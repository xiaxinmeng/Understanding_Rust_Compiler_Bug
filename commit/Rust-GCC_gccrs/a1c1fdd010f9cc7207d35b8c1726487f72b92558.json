{"sha": "a1c1fdd010f9cc7207d35b8c1726487f72b92558", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFjMWZkZDAxMGY5Y2M3MjA3ZDM1YjhjMTcyNjQ4N2Y3MmI5MjU1OA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-08-18T18:21:33Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-08-18T18:21:33Z"}, "message": "regmove.c (perhaps_ends_bb_p): New function.\n\n\t* regmove.c (perhaps_ends_bb_p): New function.\n\t(optimize_reg_copy_1, optimize_reg_copy_2): Call it.\n\t(optimize_reg_copy_3, fixup_match_2, regmove_optimize): Likewise.\n\t(fixup_match_1): Likewise.\n\t(fixup_match_1, combine_stack_adjustments_for_block): Add casts to\n\tavoid signed/unsigned warnings.\n\nFrom-SVN: r35791", "tree": {"sha": "62c5785b9aca3a6c9e1a8615ef91b7c236d2ca2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62c5785b9aca3a6c9e1a8615ef91b7c236d2ca2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1c1fdd010f9cc7207d35b8c1726487f72b92558", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1c1fdd010f9cc7207d35b8c1726487f72b92558", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1c1fdd010f9cc7207d35b8c1726487f72b92558", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1c1fdd010f9cc7207d35b8c1726487f72b92558/comments", "author": null, "committer": null, "parents": [{"sha": "3f546a5319e6faeba5d91d4476ec0baa2c2b993f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f546a5319e6faeba5d91d4476ec0baa2c2b993f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f546a5319e6faeba5d91d4476ec0baa2c2b993f"}], "stats": {"total": 191, "additions": 76, "deletions": 115}, "files": [{"sha": "2dae4b4c831150083386f822a4a014d288bc2b3c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c1fdd010f9cc7207d35b8c1726487f72b92558/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c1fdd010f9cc7207d35b8c1726487f72b92558/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1c1fdd010f9cc7207d35b8c1726487f72b92558", "patch": "@@ -1,5 +1,12 @@\n Fri Aug 18 14:23:18 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* regmove.c (perhaps_ends_bb_p): New function.\n+\t(optimize_reg_copy_1, optimize_reg_copy_2): Call it.\n+\t(optimize_reg_copy_3, fixup_match_2, regmove_optimize): Likewise.\n+\t(fixup_match_1): Likewise.\n+\t(fixup_match_1, combine_stack_adjustments_for_block): Add casts to\n+\tavoid signed/unsigned warnings.\n+\t\n \t* function.c (fixup_var_refs_1, case MEM): Update CODE after\n \tupdating X.\n "}, {"sha": "ebd0ca444bf42ebdc53792fdd33679be99ad5695", "filename": "gcc/regmove.c", "status": "modified", "additions": 69, "deletions": 115, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1c1fdd010f9cc7207d35b8c1726487f72b92558/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1c1fdd010f9cc7207d35b8c1726487f72b92558/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=a1c1fdd010f9cc7207d35b8c1726487f72b92558", "patch": "@@ -41,6 +41,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"basic-block.h\"\n #include \"toplev.h\"\n \n+static int perhaps_ends_bb_p\tPARAMS ((rtx));\n static int optimize_reg_copy_1\tPARAMS ((rtx, rtx, rtx));\n static void optimize_reg_copy_2\tPARAMS ((rtx, rtx, rtx));\n static void optimize_reg_copy_3\tPARAMS ((rtx, rtx, rtx));\n@@ -367,7 +368,31 @@ replacement_quality(reg)\n      when the registers get tied.  */\n   return 2;\n }\n+\f\n+/* Return 1 if INSN might end a basic block.  */\n+\n+static int perhaps_ends_bb_p (insn)\n+     rtx insn;\n+{\n+  switch (GET_CODE (insn))\n+    {\n+    case CODE_LABEL:\n+    case JUMP_INSN:\n+      /* These always end a basic block.  */\n+      return 1;\n \n+    case CALL_INSN:\n+      /* A CALL_INSN might be the last insn of a basic block, if it is inside\n+\t an EH region or if there are nonlocal gotos.  Note that this test is\n+\t very conservative.  */\n+      return flag_exceptions || nonlocal_goto_handler_labels;\n+\n+    default:\n+      /* All others never end a basic block.  */\n+      return 0;\n+    }\n+}\n+\f\n /* INSN is a copy from SRC to DEST, both registers, and SRC does not die\n    in INSN.\n \n@@ -403,18 +428,11 @@ optimize_reg_copy_1 (insn, dest, src)\n \n   for (p = NEXT_INSN (insn); p; p = NEXT_INSN (p))\n     {\n-      if (GET_CODE (p) == CODE_LABEL || GET_CODE (p) == JUMP_INSN)\n-\tbreak;\n-\n       /* ??? We can't scan past the end of a basic block without updating\n-\t the register lifetime info (REG_DEAD/basic_block_live_at_start).\n-\t A CALL_INSN might be the last insn of a basic block, if it is inside\n-\t an EH region.  There is no easy way to tell, so we just always break\n-\t when we see a CALL_INSN if flag_exceptions is nonzero.  */\n-      if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n+\t the register lifetime info (REG_DEAD/basic_block_live_at_start).  */\n+      if (perhaps_ends_bb_p (p))\n \tbreak;\n-\n-      if (! INSN_P (p))\n+      else if (! INSN_P (p))\n \tcontinue;\n \n       if (reg_set_p (src, p) || reg_set_p (dest, p)\n@@ -588,18 +606,11 @@ optimize_reg_copy_2 (insn, dest, src)\n \n   for (p = NEXT_INSN (insn); p; p = NEXT_INSN (p))\n     {\n-      if (GET_CODE (p) == CODE_LABEL || GET_CODE (p) == JUMP_INSN)\n-\tbreak;\n-\n       /* ??? We can't scan past the end of a basic block without updating\n-\t the register lifetime info (REG_DEAD/basic_block_live_at_start).\n-\t A CALL_INSN might be the last insn of a basic block, if it is inside\n-\t an EH region.  There is no easy way to tell, so we just always break\n-\t when we see a CALL_INSN if flag_exceptions is nonzero.  */\n-      if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n+\t the register lifetime info (REG_DEAD/basic_block_live_at_start).  */\n+      if (perhaps_ends_bb_p (p))\n \tbreak;\n-\n-      if (! INSN_P (p))\n+      else if (! INSN_P (p))\n \tcontinue;\n \n       set = single_set (p);\n@@ -661,21 +672,11 @@ optimize_reg_copy_3 (insn, dest, src)\n       || REG_N_SETS (src_no) != 1)\n     return;\n   for (p = PREV_INSN (insn); p && ! reg_set_p (src_reg, p); p = PREV_INSN (p))\n-    {\n-      if (GET_CODE (p) == CODE_LABEL || GET_CODE (p) == JUMP_INSN)\n-\treturn;\n-\n-      /* ??? We can't scan past the end of a basic block without updating\n-\t the register lifetime info (REG_DEAD/basic_block_live_at_start).\n-\t A CALL_INSN might be the last insn of a basic block, if it is inside\n-\t an EH region.  There is no easy way to tell, so we just always break\n-\t when we see a CALL_INSN if flag_exceptions is nonzero.  */\n-      if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n-\treturn;\n+    /* ??? We can't scan past the end of a basic block without updating\n+       the register lifetime info (REG_DEAD/basic_block_live_at_start).  */\n+    if (perhaps_ends_bb_p (p))\n+      break;\n \n-      if (! INSN_P (p))\n-\tcontinue;\n-    }\n   if (! p)\n     return;\n \n@@ -940,19 +941,11 @@ fixup_match_2 (insn, dst, src, offset, regmove_dump_file)\n     {\n       rtx pset;\n \n-      if (GET_CODE (p) == CODE_LABEL\n-          || GET_CODE (p) == JUMP_INSN)\n-        break;\n-\n       /* ??? We can't scan past the end of a basic block without updating\n-\t the register lifetime info (REG_DEAD/basic_block_live_at_start).\n-\t A CALL_INSN might be the last insn of a basic block, if it is inside\n-\t an EH region.  There is no easy way to tell, so we just always break\n-\t when we see a CALL_INSN if flag_exceptions is nonzero.  */\n-      if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n+\t the register lifetime info (REG_DEAD/basic_block_live_at_start).  */\n+      if (perhaps_ends_bb_p (p))\n \tbreak;\n-\n-      if (! INSN_P (p))\n+      else if (! INSN_P (p))\n         continue;\n \n       if (find_regno_note (p, REG_DEAD, REGNO (dst)))\n@@ -1370,21 +1363,12 @@ regmove_optimize (f, nregs, regmove_dump_file)\n \t\t{\n \t\t  rtx pset;\n \n-\t\t  if (GET_CODE (p) == CODE_LABEL\n-\t\t      || GET_CODE (p) == JUMP_INSN)\n-\t\t    break;\n-\n \t\t  /* ??? We can't scan past the end of a basic block without\n \t\t     updating the register lifetime info\n-\t\t     (REG_DEAD/basic_block_live_at_start).\n-\t\t     A CALL_INSN might be the last insn of a basic block, if\n-\t\t     it is inside an EH region.  There is no easy way to tell,\n-\t\t     so we just always break when we see a CALL_INSN if\n-\t\t     flag_exceptions is nonzero.  */\n-\t\t  if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n+\t\t     (REG_DEAD/basic_block_live_at_start).  */\n+\t\t  if (perhaps_ends_bb_p (p))\n \t\t    break;\n-\n-\t\t  if (! INSN_P (p))\n+\t\t  else if (! INSN_P (p))\n \t\t    continue;\n \n \t\t  length++;\n@@ -1593,6 +1577,7 @@ find_matches (insn, matchp)\n    DST is operand number MATCH_NUMBER in INSN.\n    If BACKWARD is nonzero, we have been called in a backward pass.\n    Return nonzero for success.  */\n+\n static int\n fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n \t       match_number, regmove_dump_file)\n@@ -1658,18 +1643,11 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n \n   for (length = s_length = 0, p = NEXT_INSN (insn); p; p = NEXT_INSN (p))\n     {\n-      if (GET_CODE (p) == CODE_LABEL || GET_CODE (p) == JUMP_INSN)\n-\tbreak;\n-\n       /* ??? We can't scan past the end of a basic block without updating\n-\t the register lifetime info (REG_DEAD/basic_block_live_at_start).\n-\t A CALL_INSN might be the last insn of a basic block, if it is\n-\t inside an EH region.  There is no easy way to tell, so we just\n-\t always break when we see a CALL_INSN if flag_exceptions is nonzero.  */\n-      if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n+\t the register lifetime info (REG_DEAD/basic_block_live_at_start).  */\n+      if (perhaps_ends_bb_p (p))\n \tbreak;\n-\n-      if (! INSN_P (p))\n+      else if (! INSN_P (p))\n \tcontinue;\n \n       length++;\n@@ -1704,29 +1682,18 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n \t\tbreak;\n \t      for (q = p; q; q = NEXT_INSN (q))\n \t\t{\n-\t\t  if (GET_CODE (q) == CODE_LABEL || GET_CODE (q) == JUMP_INSN)\n-\t\t    {\n-\t\t      q = 0;\n-\t\t      break;\n-\t\t    }\n-\n \t\t  /* ??? We can't scan past the end of a basic block without\n \t\t     updating the register lifetime info\n-\t\t     (REG_DEAD/basic_block_live_at_start).\n-\t\t     A CALL_INSN might be the last insn of a basic block, if\n-\t\t     it is inside an EH region.  There is no easy way to tell,\n-\t\t     so we just always break when we see a CALL_INSN if\n-\t\t     flag_exceptions is nonzero.  */\n-\t\t  if (flag_exceptions && GET_CODE (q) == CALL_INSN)\n+\t\t     (REG_DEAD/basic_block_live_at_start).  */\n+\t\t  if (perhaps_ends_bb_p (q))\n \t\t    {\n \t\t      q = 0;\n \t\t      break;\n \t\t    }\n-\n-\t\t  if (! INSN_P (q))\n+\t\t  else if (! INSN_P (q))\n \t\t    continue;\n-\t\t  if (reg_overlap_mentioned_p (src, PATTERN (q))\n-\t\t      || reg_set_p (src, q))\n+\t\t  else if (reg_overlap_mentioned_p (src, PATTERN (q))\n+\t\t\t   || reg_set_p (src, q))\n \t\t    break;\n \t\t}\n \t      if (q)\n@@ -1771,8 +1738,9 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n \t\t  /* Reject out of range shifts.  */\n \t\t  if (code != PLUS\n \t\t      && (newconst < 0\n-\t\t\t  || (newconst\n-\t\t\t      >= GET_MODE_BITSIZE (GET_MODE (SET_SRC (set2))))))\n+\t\t\t  || ((unsigned HOST_WIDE_INT) newconst\n+\t\t\t      >= (GET_MODE_BITSIZE (GET_MODE\n+\t\t\t\t\t\t    (SET_SRC (set2)))))))\n \t\t    break;\n \t\t  if (code == PLUS)\n \t\t    {\n@@ -1879,27 +1847,17 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n \t{\n \t  for (q = PREV_INSN (insn); q; q = PREV_INSN(q))\n \t    {\n-\t      if (GET_CODE (q) == CODE_LABEL || GET_CODE (q) == JUMP_INSN)\n-\t\t{\n-\t\t  q = 0;\n-\t\t  break;\n-\t\t}\n-\n \t      /* ??? We can't scan past the end of a basic block without\n \t\t updating the register lifetime info\n-\t\t (REG_DEAD/basic_block_live_at_start).\n-\t\t A CALL_INSN might be the last insn of a basic block, if\n-\t\t it is inside an EH region.  There is no easy way to tell,\n-\t\t so we just always break when we see a CALL_INSN if\n-\t\t flag_exceptions is nonzero.  */\n-\t      if (flag_exceptions && GET_CODE (q) == CALL_INSN)\n+\t\t (REG_DEAD/basic_block_live_at_start).  */\n+\t      if (perhaps_ends_bb_p (q))\n \t\t{\n \t\t  q = 0;\n \t\t  break;\n \t\t}\n-\n-\t      if (! INSN_P (q))\n+\t      else if (! INSN_P (q))\n \t\tcontinue;\n+\n \t      s_length2++;\n \t      if (reg_set_p (src, q))\n \t\t{\n@@ -1951,33 +1909,28 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n       inc_dest = post_inc_set ? SET_DEST (post_inc_set) : src;\n       for (q = post_inc; (q = NEXT_INSN (q)); )\n \t{\n-\t  if (GET_CODE (q) == CODE_LABEL || GET_CODE (q) == JUMP_INSN)\n-\t    break;\n-\n \t  /* ??? We can't scan past the end of a basic block without updating\n-\t     the register lifetime info (REG_DEAD/basic_block_live_at_start).\n-\t     A CALL_INSN might be the last insn of a basic block, if it\n-\t     is inside an EH region.  There is no easy way to tell so we\n-\t     just always break when we see a CALL_INSN if flag_exceptions\n-\t     is nonzero.  */\n-\t  if (flag_exceptions && GET_CODE (q) == CALL_INSN)\n+\t     the register lifetime info\n+\t     (REG_DEAD/basic_block_live_at_start). */\n+\t  if (perhaps_ends_bb_p (q))\n \t    break;\n-\n-\t  if (! INSN_P (q))\n+\t  else if (! INSN_P (q))\n \t    continue;\n-\t  if (src != inc_dest && (reg_overlap_mentioned_p (src, PATTERN (q))\n-\t\t\t\t  || reg_set_p (src, q)))\n+\t  else if (src != inc_dest\n+\t\t   && (reg_overlap_mentioned_p (src, PATTERN (q))\n+\t\t       || reg_set_p (src, q)))\n \t    break;\n-\t  if (reg_set_p (inc_dest, q))\n+\t  else if (reg_set_p (inc_dest, q))\n \t    break;\n-\t  if (reg_overlap_mentioned_p (inc_dest, PATTERN (q)))\n+\t  else if (reg_overlap_mentioned_p (inc_dest, PATTERN (q)))\n \t    {\n \t      try_auto_increment (q, post_inc,\n \t\t\t\t  post_inc_set, inc_dest, newconst, 1);\n \t      break;\n \t    }\n \t}\n     }\n+\n   /* Move the death note for DST to INSN if it is used\n      there.  */\n   if (reg_overlap_mentioned_p (dst, PATTERN (insn)))\n@@ -2387,7 +2340,8 @@ combine_stack_adjustments_for_block (bb)\n \t     turn it into a direct store.  Obviously we can't do this if\n \t     there were any intervening uses of the stack pointer.  */\n \t  if (memlist == NULL\n-\t      && last_sp_adjust == GET_MODE_SIZE (GET_MODE (dest))\n+\t      && (last_sp_adjust\n+\t\t  == (HOST_WIDE_INT) GET_MODE_SIZE (GET_MODE (dest)))\n \t      && GET_CODE (dest) == MEM\n \t      && GET_CODE (XEXP (dest, 0)) == PRE_DEC\n \t      && XEXP (XEXP (dest, 0), 0) == stack_pointer_rtx"}]}