{"sha": "82af613ff3d8b809dc30ab61b1e6183039e36567", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJhZjYxM2ZmM2Q4YjgwOWRjMzBhYjYxYjFlNjE4MzAzOWUzNjU2Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-12-20T17:36:39Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-12-20T17:36:39Z"}, "message": "varasm.c (assemble_real): Use REAL_VALUE_TO_x and assemble_integer to emit floating point values.\n\n\t* varasm.c (assemble_real): Use REAL_VALUE_TO_x and assemble_integer\n\tto emit floating point values.\n\t(assemble_real_1): Remove.\n\n\t* 1750a/1750a.c (real_value_to_target_single): New.\n\t(real_value_to_target_double): New.\n\t* 1750a/1750a.h (TARGET_FLOAT_FORMAT): New.\n\t(REAL_VALUE_TO_TARGET_SINGLE): New.\n\t(REAL_VALUE_TO_TARGET_DOUBLE): New.\n\t* 1750a/1750a-protos.h: Update.\n\n\t* 1750a/1750a.h, a29k/a29k.h, alpha/alpha.h, alpha/unicosmk.h,\n\talpha/vms.h, arc/arc.h, arm/aof.h, arm/aout.h, avr/avr.c,\n\tavr/avr.h, c4x/c4x.h, clipper/clix.h, convex/convex.h, cris/cris.h,\n\td30v/d30v.h, dsp16xx/dsp16xx.c, dsp16xx/dsp16xx.h, elxsi/elxsi.h,\n\tfr30/fr30.h, h8300/h8300.h, i370/i370.h, i386/i386.h, i386/i386elf.h,\n\ti386/next.h, i386/ptx4-i.h, i386/sysv4.h, i860/fx2800.h, i860/i860.h,\n\ti860/paragon.h, i860/sysv4.h, i960/i960-protos.h, i960/i960.c,\n\ti960/i960.h, ia64/ia64.h, m32r/m32r.h, m68hc11/m68hc11.c,\n\tm68hc11/m68hc11.h, m68k/3b1.h, m68k/altos3068.h, m68k/crds.h,\n\tm68k/dpx2.h, m68k/hp320.h, m68k/m68k.h, m68k/mot3300.h, m68k/news.h,\n\tm68k/next.h, m68k/next21.h, m68k/sgs.h, m68k/sun2o4.h, m68k/sun3.h,\n\tm68k/tower-as.h, m88k/m88k.h, mcore/mcore.h, mips/mips-protos.h,\n\tmips/mips.c, mips/mips.h, mmix/mmix-protos.h, mmix/mmix.c,\n\tmmix/mmix.h, mn10200/mn10200.h, mn10300/mn10300.h, ns32k/encore.h,\n\tns32k/ns32k.h, pa/long_double.h, pa/pa.h, pdp11/pdp11.h, pj/pj.h,\n\tromp/romp.c, romp/romp.h, rs6000/rs6000.h, s390/linux.h, sh/sh.h,\n\tsparc/sparc.h, stormy16/stormy16.h, v850/v850.h, vax/vax.h,\n\tvax/vaxv.h, we32k/we32k.h, doc/tm.texi: Remove ASM_OUTPUT_FLOAT,\n\tASM_OUTPUT_DOUBLE, ASM_OUTPUT_LONG_DOUBLE, ASM_OUTPUT_BYTE_FLOAT,\n\tASM_OUTPUT_SHORT_FLOAT, ASM_OUTPUT_THREE_QUARTER_FLOAT, and all\n\tassociated support routines.\n\nFrom-SVN: r48207", "tree": {"sha": "556f131986cfdfc6d8a4c8cfee29362f8d9492b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/556f131986cfdfc6d8a4c8cfee29362f8d9492b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82af613ff3d8b809dc30ab61b1e6183039e36567", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82af613ff3d8b809dc30ab61b1e6183039e36567", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82af613ff3d8b809dc30ab61b1e6183039e36567", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82af613ff3d8b809dc30ab61b1e6183039e36567/comments", "author": null, "committer": null, "parents": [{"sha": "d1ee6d9bb7d3726a5c76f7d530962d4efeaa6e4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1ee6d9bb7d3726a5c76f7d530962d4efeaa6e4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1ee6d9bb7d3726a5c76f7d530962d4efeaa6e4d"}], "stats": {"total": 2303, "additions": 267, "deletions": 2036}, "files": [{"sha": "a069113277b433eac12bb2f01b8109b37ca99494", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1,3 +1,38 @@\n+2001-12-20  Richard Henderson  <rth@redhat.com>\n+\n+\t* varasm.c (assemble_real): Use REAL_VALUE_TO_x and assemble_integer\n+\tto emit floating point values.\n+\t(assemble_real_1): Remove.\n+\n+\t* 1750a/1750a.c (real_value_to_target_single): New.\n+\t(real_value_to_target_double): New.\n+\t* 1750a/1750a.h (TARGET_FLOAT_FORMAT): New.\n+\t(REAL_VALUE_TO_TARGET_SINGLE): New.\n+\t(REAL_VALUE_TO_TARGET_DOUBLE): New.\n+\t* 1750a/1750a-protos.h: Update.\n+\n+\t* 1750a/1750a.h, a29k/a29k.h, alpha/alpha.h, alpha/unicosmk.h,\n+\talpha/vms.h, arc/arc.h, arm/aof.h, arm/aout.h, avr/avr.c, \n+\tavr/avr.h, c4x/c4x.h, clipper/clix.h, convex/convex.h, cris/cris.h,\n+\td30v/d30v.h, dsp16xx/dsp16xx.c, dsp16xx/dsp16xx.h, elxsi/elxsi.h,\n+\tfr30/fr30.h, h8300/h8300.h, i370/i370.h, i386/i386.h, i386/i386elf.h,\n+\ti386/next.h, i386/ptx4-i.h, i386/sysv4.h, i860/fx2800.h, i860/i860.h,\n+\ti860/paragon.h, i860/sysv4.h, i960/i960-protos.h, i960/i960.c,\n+\ti960/i960.h, ia64/ia64.h, m32r/m32r.h, m68hc11/m68hc11.c, \n+\tm68hc11/m68hc11.h, m68k/3b1.h, m68k/altos3068.h, m68k/crds.h,\n+\tm68k/dpx2.h, m68k/hp320.h, m68k/m68k.h, m68k/mot3300.h, m68k/news.h,\n+\tm68k/next.h, m68k/next21.h, m68k/sgs.h, m68k/sun2o4.h, m68k/sun3.h,\n+\tm68k/tower-as.h, m88k/m88k.h, mcore/mcore.h, mips/mips-protos.h,\n+\tmips/mips.c, mips/mips.h, mmix/mmix-protos.h, mmix/mmix.c,\n+\tmmix/mmix.h, mn10200/mn10200.h, mn10300/mn10300.h, ns32k/encore.h,\n+\tns32k/ns32k.h, pa/long_double.h, pa/pa.h, pdp11/pdp11.h, pj/pj.h,\n+\tromp/romp.c, romp/romp.h, rs6000/rs6000.h, s390/linux.h, sh/sh.h,\n+\tsparc/sparc.h, stormy16/stormy16.h, v850/v850.h, vax/vax.h,\n+\tvax/vaxv.h, we32k/we32k.h, doc/tm.texi: Remove ASM_OUTPUT_FLOAT,\n+\tASM_OUTPUT_DOUBLE, ASM_OUTPUT_LONG_DOUBLE, ASM_OUTPUT_BYTE_FLOAT,\n+\tASM_OUTPUT_SHORT_FLOAT, ASM_OUTPUT_THREE_QUARTER_FLOAT, and all\n+\tassociated support routines.\n+\n Thu Dec 20 16:58:46 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* cfgcleanup.c (flow_find_cross_jump): Avoid incrementing of ninsns"}, {"sha": "aa2b41fbea02953e0163186c03d25b3690d32626", "filename": "gcc/config/1750a/1750a-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2F1750a%2F1750a-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2F1750a%2F1750a-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a-protos.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -43,3 +43,6 @@ extern const char *branch_or_jump PARAMS ((const char *, int));\n extern int find_jmplbl PARAMS ((int));\n extern int one_bit_set_p PARAMS ((int));\n extern void check_section PARAMS ((enum section));\n+\n+extern long real_value_to_target_single PARAMS((double));\n+extern void real_value_to_target_double PARAMS((double, long[]));"}, {"sha": "099f7c73818b0d19ea68bd7bdbe91acbcd05b728", "filename": "gcc/config/1750a/1750a.c", "status": "modified", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2F1750a%2F1750a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2F1750a%2F1750a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.c?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -870,4 +870,145 @@ which_bit (x)\n   return b;\n }\n \n+\f\n+/* Convert a REAL_VALUE_TYPE to the target float format:\n+\n+        MSB                             LSB MSB            LSB\n+        ------------------------------------------------------\n+        |S|                 Mantissa       |  Exponent       |\n+        ------------------------------------------------------\n+         0 1                             23 24             31\n+\n+*/\n+\n+long\n+real_value_to_target_single(in)\n+     REAL_VALUE_TYPE in;\n+{\n+  union {\n+    double d;\n+    struct {\n+#if HOST_WORDS_BIG_ENDIAN\n+        unsigned int negative:1;\n+        unsigned int exponent:11;\n+        unsigned int mantissa0:20;\n+        unsigned int mantissa1:32;\n+#else\n+        unsigned int mantissa1:32;\n+        unsigned int mantissa0:20;\n+        unsigned int exponent:11;\n+        unsigned int negative:1;\n+#endif\n+    } s;\n+  } ieee;\n+\n+  unsigned int mant;\n+  int exp;\n+\n+  if (HOST_FLOAT_FORMAT != IEEE_FLOAT_FORMAT)\n+    abort ();\n+\n+  ieee.d = in;\n+\n+  /* Don't bother with NaN, Inf, 0 special cases, since they'll be handled\n+     by the over/underflow code below.  */\n+  exp = ieee.s.exponent - 0x3ff;\n+  mant = 1 << 23 | ieee.s.mantissa0 << 3 | ieee.s.mantissa1 >> 29;\n+\n+  /* The sign is actually part of the mantessa.  Since we're comming from\n+     IEEE we know that either bit 23 is set or we have a zero.  */\n+  if (! ieee.s.negative)\n+    {\n+      mant >>= 1;\n+      exp += 1;\n+    }\n+\n+  /* Check for overflow.  Crop to FLT_MAX.  */\n+  if (exp > 127)\n+    {\n+      exp = 127;\n+      mant = (ieee.s.negative ? 0xffffff : 0x7fffff);\n+    }\n+  /* Underflow to zero.  */\n+  else if (exp < -128)\n+    {\n+      exp = 0;\n+      mant = 0;\n+    }\n+\n+  return mant << 8 | (exp & 0xff);\n+}\n \n+/* Convert a REAL_VALUE_TYPE to the target 1750a extended float format:\n+\n+        ----------------------------------------------------\n+        | |      Mantissa       |        |   Mantissa      |\n+        |S|         MS          |Exponent|      LS         |\n+        ----------------------------------------------------\n+         0 1                  23 24    31 32             47\n+\n+*/\n+\n+void\n+real_value_to_target_double(in, out)\n+     REAL_VALUE_TYPE in;\n+     long out[];\n+{\n+  union {\n+    double d;\n+    struct {\n+#if HOST_WORDS_BIG_ENDIAN\n+        unsigned int negative:1;\n+        unsigned int exponent:11;\n+        unsigned int mantissa0:20;\n+        unsigned int mantissa1:32;\n+#else\n+        unsigned int mantissa1:32;\n+        unsigned int mantissa0:20;\n+        unsigned int exponent:11;\n+        unsigned int negative:1;\n+#endif\n+    } s;\n+  } ieee;\n+\n+  unsigned int mant_h24, mant_l16;\n+  int exp;\n+\n+  if (HOST_FLOAT_FORMAT != IEEE_FLOAT_FORMAT)\n+    abort ();\n+\n+  ieee.d = in;\n+\n+  /* Don't bother with NaN, Inf, 0 special cases, since they'll be handled\n+     by the over/underflow code below.  */\n+  exp = ieee.s.exponent - 0x3ff;\n+  mant_h24 = 1 << 23 | ieee.s.mantissa0 << 3 | ieee.s.mantissa1 >> 29;\n+  mant_l16 = (ieee.s.mantissa1 >> 13) & 0xffff;\n+\n+  /* The sign is actually part of the mantessa.  Since we're comming from\n+     IEEE we know that either bit 23 is set or we have a zero.  */\n+  if (! ieee.s.negative)\n+    {\n+      mant_l16 = mant_l16 >> 1 | (mant_h24 & 1) << 15;\n+      mant_h24 >>= 1;\n+      exp += 1;\n+    }\n+\n+  /* Check for overflow.  Crop to DBL_MAX.  */\n+  if (exp > 127)\n+    {\n+      exp = 127;\n+      mant_h24 = (ieee.s.negative ? 0xffffff : 0x7fffff);\n+      mant_l16 = 0xffff;\n+    }\n+  /* Underflow to zero.  */\n+  else if (exp < -128)\n+    {\n+      exp = 0;\n+      mant_h24 = 0;\n+      mant_l16 = 0;\n+    }\n+\n+  out[0] = mant_h24 << 8 | (exp & 0xff);\n+  out[1] = mant_l16;\n+}"}, {"sha": "bca9d356b9a520ec6900e676c570406e9c3be559", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 9, "deletions": 30, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -111,9 +111,8 @@ extern const char *const sectname[4];\n /* Type to use for `size_t'. If undefined, uses `long unsigned int'.  */\n #define SIZE_TYPE           \"int\"\n \n-/* 1750a preliminary\n-   #define TARGET_FLOAT_FORMAT UNKNOWN_FLOAT_FORMAT\n-*/\n+/* 1750a preliminary.  Ought to properly define the format in real.c.  */\n+#define TARGET_FLOAT_FORMAT UNKNOWN_FLOAT_FORMAT\n \n /* Allocation boundary (in *bits*) for storing pointers in memory.  */\n #define POINTER_BOUNDARY     16\n@@ -1069,32 +1068,6 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n \n #define JUMP_TABLES_IN_TEXT_SECTION 1\n \n-/* This is how to output an assembler line defining a 1750A `float'\n-   constant.  */\n-\n-#define ASM_OUTPUT_SHORT_FLOAT(FILE,VALUE) \t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-      if (label_pending) {\t\t\t\t\t\\\n-\t label_pending = 0;\t\t\t\t\t\\\n-         sprintf (datalbl[datalbl_ndx].value, \"%f\", (double) VALUE); \\\n-      }\t\t\t\t\t\t\t\t\\\n-      datalbl[datalbl_ndx].size += 2;\t\t\t\t\\\n-      fprintf (FILE, \"\\tdataf\\t%f\\n\",VALUE);\t\t\t\\\n-  } while(0)\n-\n-/* This is how to output an assembler line defining a 1750A `double'\n-    constant.  */\n-\n-#define ASM_OUTPUT_THREE_QUARTER_FLOAT(FILE,VALUE)\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-      if (label_pending) {\t\t\t\t\t\\\n-\t label_pending = 0;\t\t\t\t\t\\\n-         sprintf (datalbl[datalbl_ndx].value, \"%f\", VALUE);\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-      datalbl[datalbl_ndx].size += 3;\t\t\t\t\\\n-      fprintf(FILE,\"\\tdataef\\t%f\\n\",VALUE);\t\t\t\\\n-  } while (0)\n-\n /* This is how to output an assembler line defining a string constant.  */\n \n #define ASM_OUTPUT_ASCII(FILE, PTR, LEN)  do {\t\t\\\n@@ -1190,7 +1163,13 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n \t'Q': print a 1750 Base-Register-with-offset instruction's operands\n  */\n \n-/* 1750A: see file aux-output.c */\n #define PRINT_OPERAND(FILE, X, CODE)  print_operand(FILE,X,CODE)\n #define PRINT_OPERAND_ADDRESS(FILE, ADDR)  print_operand_address(FILE,ADDR)\n \n+/* Convert a REAL_VALUE_TYPE to the target 1750a float format.  */\n+#define REAL_VALUE_TO_TARGET_SINGLE(IN, OUT) \\\n+  ((OUT) = real_value_to_target_single(IN))\n+\n+/* Convert a REAL_VALUE_TYPE to the target 1750a extended float format.  */\n+#define REAL_VALUE_TO_TARGET_DOUBLE(IN, OUT) \\\n+  real_value_to_target_double((IN), (OUT))"}, {"sha": "18b2a631c515da24d432ef756e73200b24ba4f64", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1460,16 +1460,6 @@ extern int a29k_debug_reg_map[];\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n   sprintf (LABEL, \"*%s%d\", PREFIX, NUM)\n \n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\\\n-  fprintf (FILE, \"\\t.double %.20e\\n\", (VALUE))\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\\\n-  fprintf (FILE, \"\\t.float %.20e\\n\", (VALUE))\n-\n /* This is how to output an insn to push a register on the stack.\n    It need not be very fast code.  */\n "}, {"sha": "de2428ffb6fdc5098bc28576928d5218f09a4970", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1947,37 +1947,6 @@ do {\t\t\t\t\t\t\\\n #define CHECK_FLOAT_VALUE(MODE, D, OVERFLOW) \\\n   ((OVERFLOW) = check_float_value (MODE, &D, OVERFLOW))\n \n-/* This is how to output an assembler line defining a `long double'\n-   constant.  */\n-\n-#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    long t[4];\t\t\t\t\t\t\t\t\\\n-    REAL_VALUE_TO_TARGET_LONG_DOUBLE ((VALUE), t);\t\t\t\\\n-    fprintf (FILE, \"\\t.quad 0x%lx%08lx,0x%lx%08lx\\n\",\t\t\t\\\n-\t     t[1] & 0xffffffff, t[0] & 0xffffffff,\t\t\t\\\n-\t     t[3] & 0xffffffff, t[2] & 0xffffffff);\t\t\t\\\n-  } while (0)\n-\n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    long t[2];\t\t\t\t\t\t\t\t\\\n-    REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), t);\t\t\t\t\\\n-    fprintf (FILE, \"\\t.quad 0x%lx%08lx\\n\",\t\t\t\t\\\n-\t     t[1] & 0xffffffff, t[0] & 0xffffffff);\t\t\t\\\n-  } while (0)\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    long t;\t\t\t\t\t\t\t\\\n-    REAL_VALUE_TO_TARGET_SINGLE ((VALUE), t);\t\t\t\\\n-    fprintf (FILE, \"\\t.long 0x%lx\\n\", t & 0xffffffff);\t\t\\\n-  } while (0)\n-  \n /* We use the default ASCII-output routine, except that we don't write more\n    than 50 characters since the assembler doesn't support very long lines.  */\n "}, {"sha": "65ab319d50244c64e2c6225b3a16a729ba6bda82", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -413,51 +413,6 @@ ssib_section ()\t\t\t\\\n #define ASM_OUTPUT_CASE_LABEL(FILE,PREFIX,NUM,TABLEINSN)\t\\\n   ASM_OUTPUT_INTERNAL_LABEL (FILE, PREFIX, NUM)\n \n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#undef ASM_OUTPUT_DOUBLE\n-#ifdef REAL_ARITHMETIC\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\\\n-  do { long t[2];\t\t\t\t\t\\\n-       REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), t);\t\\\n-       fprintf (FILE, \"\\t.quad ^X%lx%08lx\\n\",\t\t\\\n-\t\tt[0] & 0xffffffff, t[1] & 0xffffffff);\t\\\n-  } while (0)\n-#else\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\\\n-  do { long t[2];\t\t\t\t\t\\\n-       REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), t);\t\\\n-       fprintf (FILE, \"\\t.quad ^X%lx\\n\", t[0]);\t\t\\\n-  } while(0)\n-#endif\n- \n-\n-/* This is how to output an assembler line defining a `long double'\n-   constant. `long double'  and `double' are the same on the Cray T3E.  */\n- \n-#undef ASM_OUTPUT_LONG_DOUBLE\n-#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)\t\t\\\n-  ASM_OUTPUT_DOUBLE (FILE,VALUE)\n-\n-/* This is how to output an assembler line defining a `float' constant.\n-   ??? Somehow, REAL_VALUE_TO_TARGET_SINGLE gets confused and returns the\n-   value in the upper bits of the int.  */\n-\n-#undef ASM_OUTPUT_FLOAT\n-#ifdef REAL_ARITHMETIC\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\\\n-  do { long t;\t\t\t\t\t\t\\\n-       REAL_VALUE_TO_TARGET_SINGLE ((VALUE), t);\t\\\n-       fprintf (FILE, \"\\t.long ^X%lx\\n\", t & 0xffffffff);\\\n-  } while (0)\n-#else\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\\\n-  do { long t;\t\t\t\t\t\t\\\n-       REAL_VALUE_TO_TARGET_SINGLE ((VALUE), t);\t\\\n-       fprintf (FILE, \"\\t.long ^X%lx\\n\", (t >> 32) & 0xffffffff);\\\n-  } while(0)\n-#endif\n-\n /* CAM has some restrictions with respect to string literals. It won't\n    accept lines with more that 256 characters which means that we have\n    to split long strings. Moreover, it only accepts escape sequences of"}, {"sha": "ed12e93d079f0ae4ee3dd62ce1011bd62bda57de", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -253,25 +253,6 @@ typedef struct {int num_args; enum avms_arg_type atypes[6];} avms_arg_info;\n   ASM_OUTPUT_SOURCE_FILENAME (FILE, main_input_filename);\t\\\n }\n \n-#undef ASM_OUTPUT_FLOAT\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (REAL_VALUE_ISINF (VALUE)\t\t\t\t\t\\\n-        || REAL_VALUE_ISNAN (VALUE)\t\t\t\t\t\\\n-\t|| REAL_VALUE_MINUS_ZERO (VALUE))\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tlong t;\t\t\t\t\t\t\t\t\\\n-\tREAL_VALUE_TO_TARGET_SINGLE ((VALUE), t);\t\t\t\\\n-\tfprintf (FILE, \"\\t.long 0x%lx\\n\", t & 0xffffffff);\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tchar str[30];\t\t\t\t\t\t\t\\\n-\tREAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", str);\t\t\t\\\n-\tfprintf (FILE, \"\\t.%c_floating %s\\n\", (TARGET_FLOAT_VAX)?'f':'s', str);\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  }\n-\n #define LINK_SECTION_ASM_OP \"\\t.link\"\n #define READONLY_SECTION_ASM_OP \"\\t.rdata\"\n #define LITERALS_SECTION_ASM_OP \"\\t.literals\""}, {"sha": "d31ccdbc2527f50982b63e94aa141cb646f8e084", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1238,28 +1238,6 @@ do {\t\t\t\t\t\t\t\\\n    no longer contain unusual constructs.  */\n #define ASM_APP_OFF \"\"\n \n-/* This is how to output an assembler line defining a `float' constant.  */\n-#define ASM_OUTPUT_FLOAT(FILE, VALUE) \\\n-{\t\t\t\t\t\t\t\\\n-  long t;\t\t\t\t\t\t\\\n-  char str[30];\t\t\t\t\t\t\\\n-  REAL_VALUE_TO_TARGET_SINGLE ((VALUE), t);\t\t\\\n-  REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", str);\t\\\n-  fprintf (FILE, \"\\t.word\\t0x%lx %s %s\\n\",\t\t\\\n-\t   t, ASM_COMMENT_START, str);\t\t\t\\\n-}\n-\n-/* This is how to output an assembler line defining a `double' constant.  */\n-#define ASM_OUTPUT_DOUBLE(FILE, VALUE) \\\n-{\t\t\t\t\t\t\t\\\n-  long t[2];\t\t\t\t\t\t\\\n-  char str[30];\t\t\t\t\t\t\\\n-  REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), t);\t\t\\\n-  REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", str);\t\\\n-  fprintf (FILE, \"\\t.word\\t0x%lx %s %s\\n\\t.word\\t0x%lx\\n\", \\\n-\t   t[0], ASM_COMMENT_START, str, t[1]);\t\t\\\n-}\n-\n /* This is how to output the definition of a user-level label named NAME,\n    such as the label on a static function or variable NAME.  */\n #define ASM_OUTPUT_LABEL(FILE, NAME) \\"}, {"sha": "750bc08d123682df03f843e85e3a28b783d24ae9", "filename": "gcc/config/arm/aof.h", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Farm%2Faof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Farm%2Faof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faof.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -183,29 +183,6 @@ do\t\t\t\t\t\\\n \n #define ASM_APP_OFF \"\"\n \n-#define ASM_OUTPUT_LONG_DOUBLE(STREAM,VALUE) \\\n-  ASM_OUTPUT_DOUBLE((STREAM),(VALUE))\n-\n-#define ASM_OUTPUT_DOUBLE(STREAM,VALUE)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  char dstr[30];\t\t\t\t\t\t\\\n-  long l[2];\t\t\t\t\t\t\t\\\n-  REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), l);\t\t\t\\\n-  REAL_VALUE_TO_DECIMAL ((VALUE), \"%.14g\", dstr);\t\t\\\n-  fprintf ((STREAM), \"\\tDCD &%lx, &%lx\\t%s double %s\\n\",\t\\\n-\t   l[0], l[1], ASM_COMMENT_START, dstr);\t\t\\\n-} while (0)\n-\n-#define ASM_OUTPUT_FLOAT(STREAM,VALUE)\t\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  char dstr[30];\t\t\t\t\t\\\n-  long l;\t\t\t\t\t\t\\\n-  REAL_VALUE_TO_TARGET_SINGLE ((VALUE), l);\t\t\\\n-  REAL_VALUE_TO_DECIMAL ((VALUE), \"%.7g\", dstr);\t\\\n-  fprintf ((STREAM), \"\\tDCD &%lx\\t%s double %s\\n\",\t\\\n-\t   l, ASM_COMMENT_START, dstr);\t\t\t\\\n-} while (0)\n-\n #define ASM_OUTPUT_ASCII(STREAM,PTR,LEN)\t\t\\\n {\t\t\t\t\t\t\t\\\n   int i;\t\t\t\t\t\t\\"}, {"sha": "64ca8b7caac1eab6ca31b6929abbd733c11c275a", "filename": "gcc/config/arm/aout.h", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Farm%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Farm%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faout.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -184,48 +184,6 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_ADDR_DIFF_ELT(STREAM, BODY, VALUE, REL)  \\\n   asm_fprintf (STREAM, \"\\tb\\t%LL%d\\n\", VALUE)\n \n-/* Output various types of constants.  For real numbers we output hex, with\n-   a comment containing the \"human\" value, this allows us to pass NaN's which\n-   the riscix assembler doesn't understand (it also makes cross-assembling\n-   less likely to fail). */\n-\n-#define ASM_OUTPUT_LONG_DOUBLE(STREAM, VALUE)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      char dstr[30];\t\t\t\t\t\t\t\\\n-      long l[3];\t\t\t\t\t\t\t\\\n-      REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\t\t\\\n-      REAL_VALUE_TO_DECIMAL (VALUE, \"%.20g\", dstr);\t\t\t\\\n-      asm_fprintf (STREAM,\t\t\t\t\t\t\\\n-\t\t   \"\\t.long 0x%lx,0x%lx,0x%lx\\t%@ long double %s\\n\",\t\\\n-\t\t   l[0], l[1], l[2], dstr);\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-#define ASM_OUTPUT_DOUBLE(STREAM, VALUE)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      char dstr[30];\t\t\t\t\t\t\t\\\n-      long l[2];\t\t\t\t\t\t\t\\\n-      REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\t\t\\\n-      REAL_VALUE_TO_DECIMAL (VALUE, \"%.14g\", dstr);\t\t\t\\\n-      asm_fprintf (STREAM, \"\\t.long 0x%lx, 0x%lx\\t%@ double %s\\n\", l[0],\\\n-\t           l[1], dstr);\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-#define ASM_OUTPUT_FLOAT(STREAM, VALUE)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      char dstr[30];\t\t\t\t\t\t\\\n-      long l;\t\t\t\t\t\t\t\\\n-      REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\t\\\n-      REAL_VALUE_TO_DECIMAL (VALUE, \"%.7g\", dstr);\t\t\\\n-      asm_fprintf (STREAM, \"\\t.word 0x%lx\\t%@ float %s\\n\", l,\t\\\n-\t           dstr);\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n #undef  ASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(STREAM, PTR, LEN)  \\\n   output_ascii_pseudo_op (STREAM, (const unsigned char *)(PTR), LEN)"}, {"sha": "073dd97d87db54357e74d6027bd3c6fee0706085", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -4485,22 +4485,6 @@ avr_assemble_integer (x, size, aligned_p)\n   return default_assemble_integer (x, size, aligned_p);\n }\n \n-\n-/* Output real N to file FILE */\n-\n-void\n-asm_output_float (file, n)\n-     FILE *file;\n-     REAL_VALUE_TYPE n;\n-{\n-  long val;\n-  char dstr[100];\n-  \n-  REAL_VALUE_TO_TARGET_SINGLE (n, val);\n-  REAL_VALUE_TO_DECIMAL (n, \"%g\", dstr);\n-  fprintf (file, \"\\t.long 0x%08lx\\t/* %s */\\n\", val, dstr);\n-}\n-\n /* Sets section name for declaration DECL */\n   \n void"}, {"sha": "1f8a8da50e421fb273ffa9d044a0ab2011b902f7", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -2009,22 +2009,6 @@ progmem_section (void)\t\t\t\t\t\t\t      \\\n    Objective C program.  */\n \n \n-\n-#define ASM_OUTPUT_DOUBLE(STREAM, VALUE) fprintf (STREAM, \"no double float %.20e\\n\", VALUE)\n-#define ASM_OUTPUT_FLOAT(STREAM, VALUE) asm_output_float (STREAM, VALUE)\n-/* `ASM_OUTPUT_LONG_DOUBLE (STREAM, VALUE)'\n-   `ASM_OUTPUT_THREE_QUARTER_FLOAT (STREAM, VALUE)'\n-   `ASM_OUTPUT_SHORT_FLOAT (STREAM, VALUE)'\n-   `ASM_OUTPUT_BYTE_FLOAT (STREAM, VALUE)'\n-   A C statement to output to the stdio stream STREAM an assembler\n-   instruction to assemble a floating-point constant of `TFmode',\n-   `DFmode', `SFmode', `TQFmode', `HFmode', or `QFmode',\n-   respectively, whose value is VALUE.  VALUE will be a C expression\n-   of type `REAL_VALUE_TYPE'.  Macros such as\n-   `REAL_VALUE_TO_TARGET_DOUBLE' are useful for writing these\n-   definitions.  */\n-\n-\n #define ASM_OUTPUT_ASCII(FILE, P, SIZE)\t gas_output_ascii (FILE,P,SIZE)\n /* `ASM_OUTPUT_ASCII (STREAM, PTR, LEN)'\n    output_ascii (FILE, P, SIZE)"}, {"sha": "b245714af52b3b6f9ad8ef89ffd87bbbda776c10", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1851,43 +1851,6 @@ const_section ()\t\t\t\t\t\t\t\\\n #define ASM_APP_ON \"\"\n #define ASM_APP_OFF \"\"\n \n-/* Output float/double constants  QFmode.  */\n-\n-#define ASM_OUTPUT_BYTE_FLOAT(FILE, VALUE)\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    long l;\t\t\t\t\t\t\\\n-    char str[30];\t\t\t\t\t\\\n-    REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n-    REAL_VALUE_TO_DECIMAL (VALUE, \"%20lf\", str);\t\\\n-    if (sizeof (int) == sizeof (long))\t\t\t\\\n-      fprintf (FILE, \"\\t.word\\t0%08xh\\t; %s\\n\", (int) l, str);\\\n-    else\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.word\\t0%08lxh\\t; %s\\n\", l, str);\\\n-  } while (0);\n-\n-/* Output long double constants  HFmode. \n-   The first word contains the exponent and first part of the mantissa\n-   in the same manner as QFmode.  The second word contains the full\n-   mantissa.  We should ensure that the two words are allocated within\n-   the same page for the large memory model since we only output a single\n-   LDP instruction.  FIXME.  The simplest solution probably is to output\n-   a LDP for each load.  */\n-\n-#define ASM_OUTPUT_SHORT_FLOAT(FILE, VALUE)\t\t\\\n-  do {\t\t\t\t\t\t\t\\\n-    long l[2];\t\t\t\t\t\t\\\n-    char str[30];\t\t\t\t\t\\\n-    REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\\\n-    REAL_VALUE_TO_DECIMAL (VALUE, \"%20lf\", str);\t\\\n-    l[1] = (l[0] << 8) | ((l[1] >> 24) & 0xff);\t\t\\\n-    if (sizeof (int) == sizeof (long))\t\t\t\\\n-      fprintf (FILE, \"\\t.word\\t0%08xh\\t; %s\\n\\t.word\\t0%08xh\\n\", \\\n-               (int) l[0], str, (int) l[1]);\t\t\\\n-    else\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.word\\t0%08lxh\\t; %s\\n\\t.word\\t0%08lxh\\n\", \\\n-               l[0], str, l[1]);\t\t\t\t\\\n-  } while (0);\n-\n #define ASM_OUTPUT_ASCII(FILE, PTR, LEN) c4x_output_ascii (FILE, PTR, LEN)\n \n /* Output and Generation of Labels.  */"}, {"sha": "cae454b8b01f17fe51875123b0fd8049bd692c86", "filename": "gcc/config/clipper/clix.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fclipper%2Fclix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fclipper%2Fclix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclix.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -46,22 +46,6 @@ do {\t\t\t\t\t\t\t\\\n   fputs (\"\\n\", (FILE));\t\t\t\t\t\\\n } while (0)\n \n-#undef ASM_OUTPUT_DOUBLE\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\\\n-{\t\t\t\t\t\\\n-  union { int i[2]; double d; } _d_;\t\\\n-  _d_.d = VALUE;\t\t\t\t\\\n-  fprintf (FILE, \"\\t.long 0x%08x,0x%08x\\n\", _d_.i[0],_d_.i[1]); \\\n-}\n-\n-#undef ASM_OUTPUT_FLOAT\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\\\n-{\t\t\t\t\t\\\n-  union { int i; float f; } _f_;\t\\\n-  _f_.f = VALUE;\t\t\t\t\\\n-  fprintf (FILE, \"\\t.long 0x%08x\\n\", _f_.i); \\\n-}\n-\n /* This is how to output an assembler line\n    that says to advance the location counter\n    to a multiple of 2**LOG bytes.  */"}, {"sha": "16fb2a43b55064ce821a8291e8d570f8ae388553", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1257,16 +1257,6 @@ enum reg_class {\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n   sprintf (LABEL, \"*%s%d\", PREFIX, NUM)\n \n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE) \\\n-  outfloat (FILE, VALUE, \"%.17e\", \"\\tds.d \", \"\\n\")\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE) \\\n-  outfloat (FILE, VALUE, \"%.9e\", \"\\tds.s \", \"\\n\")\n-\n /* This is how to output a string */\n \n #define ASM_OUTPUT_ASCII(FILE,STR,SIZE) do {\t\t\t\t\\"}, {"sha": "493ac60d7ee65a0225b2c450a66b9e509ba04c8d", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1507,36 +1507,6 @@ struct cum_args {int regs;};\n \n /* Node: Data Output */\n \n-/* We must use REAL_VALUE_TO_TARGET_SINGLE and\n-   REAL_VALUE_TO_TARGET_LONG_DOUBLE.  It seems real.h cannot support when\n-   target-double is target-single is 32bit-single.  */\n-#define ASM_OUTPUT_LONG_DOUBLE(FILE, VALUE)\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      long l[2];\t\t\t\t\t\\\n-      REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\\\n-      fprintf (FILE, \"\\t.dword 0x%lx\\n\", l[0]);\t\t\\\n-      fprintf (FILE, \"\\t.dword 0x%lx\\n\", l[1]);\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* FIXME: The manual says \"array of long:s\", but\n-   REAL_VALUE_TO_TARGET_SINGLE actually writes a long.  */\n-#define ASM_OUTPUT_FLOAT(FILE, VALUE)\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      long l;\t\t\t\t\t\\\n-      REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\\\n-      fprintf (FILE, \"\\t.dword 0x%lx\\n\", l);\t\\\n-    }\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* This is what is used by gcc for 64-bit floats,\n-   not the \"long double\" one.  */\n-#define ASM_OUTPUT_DOUBLE(FILE, VALUE) \\\n- ASM_OUTPUT_LONG_DOUBLE (FILE, VALUE)\n-\n-\n #define IS_ASM_LOGICAL_LINE_SEPARATOR(C) (C) == '@'\n \n /* Node: Uninitialized Data */"}, {"sha": "c0098a1cc911fc701cb91cc402572d1a3cc827c6", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -3729,55 +3729,6 @@ extern const char *d30v_branch_cost_string;\n \f\n /* Output of Data.  */\n \n-/* A C statement to output to the stdio stream STREAM an assembler instruction\n-   to assemble a floating-point constant of `TFmode', `DFmode', `SFmode',\n-   `TQFmode', `HFmode', or `QFmode', respectively, whose value is VALUE.  VALUE\n-   will be a C expression of type `REAL_VALUE_TYPE'.  Macros such as\n-   `REAL_VALUE_TO_TARGET_DOUBLE' are useful for writing these definitions.  */\n-\n-/* #define ASM_OUTPUT_LONG_DOUBLE(STREAM, VALUE) */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE, VALUE)\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (REAL_VALUE_ISINF (VALUE)\t\t\t\t\t\\\n-        || REAL_VALUE_ISNAN (VALUE)\t\t\t\t\t\\\n-\t|| REAL_VALUE_MINUS_ZERO (VALUE))\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tlong t[2];\t\t\t\t\t\t\t\\\n-\tREAL_VALUE_TO_TARGET_DOUBLE ((VALUE), t);\t\t\t\\\n-\tfprintf (FILE, \"\\t.long 0x%lx\\n\\t.long 0x%lx\\n\",\t\t\\\n-\t\tt[0] & 0xffffffff, t[1] & 0xffffffff);\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tchar str[30];\t\t\t\t\t\t\t\\\n-\tREAL_VALUE_TO_DECIMAL (VALUE, \"%.20e\", str);\t\t\t\\\n-\tfprintf (FILE, \"\\t.double 0d%s\\n\", str);\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  }\n-\n-#define ASM_OUTPUT_FLOAT(FILE, VALUE)\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (REAL_VALUE_ISINF (VALUE)\t\t\t\t\t\\\n-        || REAL_VALUE_ISNAN (VALUE)\t\t\t\t\t\\\n-\t|| REAL_VALUE_MINUS_ZERO (VALUE))\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tlong t;\t\t\t\t\t\t\t\t\\\n-\tREAL_VALUE_TO_TARGET_SINGLE ((VALUE), t);\t\t\t\\\n-\tfprintf (FILE, \"\\t.long 0x%lx\\n\", t & 0xffffffff);\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tchar str[30];\t\t\t\t\t\t\t\\\n-\tREAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", str);\t\t\t\\\n-\tfprintf (FILE, \"\\t.float 0d%s\\n\", str);\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  }\n-\n-/* #define ASM_OUTPUT_THREE_QUARTER_FLOAT(STREAM, VALUE) */\n-/* #define ASM_OUTPUT_SHORT_FLOAT(STREAM, VALUE) */\n-/* #define ASM_OUTPUT_BYTE_FLOAT(STREAM, VALUE) */\n-\n /* A C statement to output to the stdio stream STREAM an assembler instruction\n    to assemble a string constant containing the LEN bytes at PTR.  PTR will be\n    a C expression of type `char *' and LEN a C expression of type `int'."}, {"sha": "674a3f08eba2edcaa50d72e849be4e6f749f909d", "filename": "gcc/config/dsp16xx/dsp16xx.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -2264,30 +2264,6 @@ asm_output_local(file, name, size, rounded)\n \tfprintf (file, \"int\\n\");\n }\n \n-void\n-asm_output_float (file, fp_const)\n-     FILE *file;\n-     double fp_const;\n-{\n-#if HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT\n-  REAL_VALUE_TYPE d = fp_const;\n-  long value;\n-\n-  REAL_VALUE_TO_TARGET_SINGLE (d, value);\n-  fputs (\"\\tint \", file);\n-#ifdef WORDS_BIG_ENDIAN\n-  fprintf (file, \"0x%-4.4lx, 0x%-4.4lx\", (value >> 16) & 0xffff,\n-\t   value & 0xffff);\n-#else\n-  fprintf (file, \"0x%-4.4lx, 0x%-4.4lx\", value & 0xffff,\n-\t   (value >> 16) & 0xffff);\n-#endif\n-  fputs (\"\\n\", file);\n-#else\n-  fatal_error (\"inline float constants not supported on this host\");\n-#endif\n-}\n-\n int\n dsp16xx_address_cost (addr)\n      rtx addr;"}, {"sha": "393869ddfaa77e844ed0cd6ffe3ca0ce8dad1889", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1638,16 +1638,6 @@ const_section ()                                                   \\\n \f\n /* OUTPUT OF DATA */\n \n-/* This is how to output an assembler line defining a `double' constant.  */\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)  asm_output_float (FILE,VALUE)\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)  asm_output_float (FILE, VALUE)\n-\n-/* This is how to output an assembler line defining a 'float' constant of\n-   size HFmode.  */\n-#define ASM_OUTPUT_SHORT_FLOAT(FILE,VALUE)  asm_output_float (FILE, VALUE)\n-\n /* This is how we output a 'c' character string. For the 16xx\n    assembler we have to do it one letter at a time */\n "}, {"sha": "04b7619048c3d680aae969edb9b01d2764644c0b", "filename": "gcc/config/elxsi/elxsi.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Felxsi%2Felxsi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Felxsi%2Felxsi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -732,21 +732,6 @@ enum reg_class { NO_REGS, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n   sprintf (LABEL, \".%s%d\", PREFIX, NUM)\n \n-/* This is how to output an assembler line defining a `double' constant.\n-   It is .dfloat or .gfloat, depending.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n-{ union {double d; int i[2]; } tem;\t\t\t\t\\\n-  tem.d = (VALUE);\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t.data\\t%d{32}, %d{32}\\n\", tem.i[0], tem.i[1]); }\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)  \\\n-{ union {float f; int i; } tem;\t\t\t\t\t\\\n-  tem.f = (VALUE);\t\t\t\t\t\t\\\n-  fprintf (FILE, \"\\t.data %d{32}\\n\", tem.i); }\n-\n /* This is how to output an insn to push a register on the stack.\n    It need not be very fast code.  */\n "}, {"sha": "aad2f68ee47a0d9e2381c16276f3798aed0dc542", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1412,38 +1412,6 @@ do\t\t\t\t\t\t\t\t\t\t\\\n    for ordinary compiler output.  */\n #define ASM_APP_OFF \"#NO_APP\\n\"\n \n-/*}}}*/ \f\n-/*{{{  Output of Data.  */\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-#define ASM_OUTPUT_FLOAT(FILE, VALUE)\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      long t;\t\t\t\t\t\t\\\n-      char str[30];\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\\\n-      REAL_VALUE_TO_TARGET_SINGLE ((VALUE), t);\t\t\\\n-      REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", str);\t\\\n-      \t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.word\\t0x%lx %s %s\\n\",\t\t\\\n-\t       t, ASM_COMMENT_START, str);\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* This is how to output an assembler line defining a `double' constant.  */\n-#define ASM_OUTPUT_DOUBLE(FILE, VALUE)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      long t[2];\t\t\t\t\t\t\\\n-      char str[30];\t\t\t\t\t\t\\\n-      \t\t\t\t\t\t\t\t\\\n-      REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), t);\t\t\t\\\n-      REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", str);\t\t\\\n-      \t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.word\\t0x%lx %s %s\\n\\t.word\\t0x%lx\\n\",\t\\\n-\t       t[0], ASM_COMMENT_START, str, t[1]);\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n /*}}}*/ \f\n /*{{{  Output and Generation of Labels.  */ \n "}, {"sha": "4b37f892cd55c3433100fad81a8bc0d67b0648bb", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1248,28 +1248,6 @@ readonly_data ()\t\t\t\t\t\t\t\\\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL, PREFIX, NUM)\t\\\n   sprintf (LABEL, \"*.%s%d\", PREFIX, NUM)\n \n-/* This is how to output an assembler line defining a `double' constant.\n-   It is .dfloat or .gfloat, depending.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE, VALUE)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      char dstr[30];\t\t\t\t\t\t\\\n-      REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\t\\\n-      fprintf (FILE, \"\\t.double %s\\n\", dstr);\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-#define ASM_OUTPUT_FLOAT(FILE, VALUE)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      char dstr[30];\t\t\t\t\t\t\\\n-      REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\t\\\n-      fprintf (FILE, \"\\t.float %s\\n\", dstr);\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n /* This is how to output an insn to push a register on the stack.\n    It need not be very fast code.  */\n "}, {"sha": "cd1695f412879720591558eacc7eaf46071df9fd", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1183,14 +1183,6 @@ enum reg_class\n   fprintf (FILE, \"\\tL\\t%s,%d(13)\\n\\tLA\\t13,4(13)\\n\",\t\t\t\\\n      reg_names[REGNO], STACK_POINTER_OFFSET)\n \n-/* This is how to output an assembler line defining a `double' constant.  */\n-#define ASM_OUTPUT_DOUBLE(FILE, VALUE)\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tDC\\tD'%.18G'\\n\", (VALUE))\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-#define ASM_OUTPUT_FLOAT(FILE, VALUE)\t\t\t\t\t\\\n-  fprintf (FILE, \"\\tDC\\tE'%.9G'\\n\", (VALUE))\n-\n /* This outputs a text string.  The string are chopped up to fit into\n    an 80 byte record.  Also, control and special characters, interpreted\n    by the IBM assembler, are output numerically.  */\n@@ -1866,24 +1858,6 @@ abort(); \\\n \n #define ASM_DOUBLE \"\\t.double\"     \n \n-/* Argument to the flt pt. macros is a REAL_VALUE_TYPE which \n-   may or may not be a float/double, depending on whther we\n-   are running in cross-compiler mode.  */\n-/* This is how to output an assembler line defining a `double' constant.  */\n-#define ASM_OUTPUT_DOUBLE(FILE, RVAL) {\t\t\t\t\t\\\n-  char buf[50];\t\t\t\t\t\t\t\t\\\n-  REAL_VALUE_TO_DECIMAL (RVAL,  HOST_WIDE_INT_PRINT_DOUBLE_HEX, buf);\t\\\n-  fprintf (FILE, \"\\tDC\\tD'%s'\\n\", buf);\t\t\t\t\t\\\n-}\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-#define ASM_OUTPUT_FLOAT(FILE, RVAL) {\t\t\t\t\t\\\n-  char buf[50];\t\t\t\t\t\t\t\t\\\n-  REAL_VALUE_TO_DECIMAL (RVAL,  HOST_WIDE_INT_PRINT_DEC, buf);\t\t\\\n-  fprintf (FILE, \"\\tDC\\tE'%s'\\n\", buf); \t\t\t\t\\\n-}\n-\n-\n /* This is how to output the definition of a user-level label named NAME,\n    such as the label on a static function or variable NAME.  */\n #define ASM_OUTPUT_LABEL(FILE,NAME)     \\"}, {"sha": "7297f84d1d359c678d4367110dfb402e41731875", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -2876,34 +2876,6 @@ extern int const svr4_dbx_register_map[FIRST_PSEUDO_REGISTER];\n #define ASM_OUTPUT_LABEL(FILE,NAME)\t\\\n   (assemble_name (FILE, NAME), fputs (\":\\n\", FILE))\n \n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n-do { long l[2];\t\t\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\t\t\\\n-     fprintf (FILE, \"%s0x%lx,0x%lx\\n\", ASM_LONG, l[0], l[1]);\t\t\\\n-   } while (0)\n-\n-/* This is how to output a `long double' extended real constant.  */\n-\n-#undef ASM_OUTPUT_LONG_DOUBLE\n-#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\\\n-do { long l[4];\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\\\n-     if (TARGET_128BIT_LONG_DOUBLE)\t\t\t\\\n-       fprintf (FILE, \"%s0x%lx,0x%lx,0x%lx,0x0\\n\", ASM_LONG, l[0], l[1], l[2]); \\\n-     else \\\n-       fprintf (FILE, \"%s0x%lx,0x%lx,0x%lx\\n\", ASM_LONG, l[0], l[1], l[2]); \\\n-   } while (0)\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\\\n-do { long l;\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n-     fprintf ((FILE), \"%s0x%lx\\n\", ASM_LONG, l);\t\\\n-   } while (0)\n-\n /* Store in OUTPUT a string (made with alloca) containing\n    an assembler-name for a local static variable named NAME.\n    LABELNO is an integer which is different for each call.  */"}, {"sha": "ddf19b67e7c16ac654a5fe38f869859979501204", "filename": "gcc/config/i386/i386elf.h", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi386%2Fi386elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi386%2Fi386elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386elf.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -54,61 +54,6 @@ Boston, MA 02111-1307, USA.  */\n \t\t\t  %{pg:gcrt0.o%s}%{!pg:%{p:mcrt0.o%s}%{!p:crt0.o%s}}}}\\\n \t\t\tcrtbegin.o%s\"\n \n-/* This is how to output assembly code to define a `float' constant.\n-   We always have to use a .long pseudo-op to do this because the native\n-   SVR4 ELF assembler is buggy and it generates incorrect values when we\n-   try to use the .float pseudo-op instead.  */\n-\n-#undef ASM_OUTPUT_FLOAT\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\t\\\n-do { long value;\t\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_SINGLE ((VALUE), value);\t\t\t\\\n-     if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value);\t\t\\\n-     else\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value);\t\t\t\\\n-   } while (0)\n-\n-/* This is how to output assembly code to define a `double' constant.\n-   We always have to use a pair of .long pseudo-ops to do this because\n-   the native SVR4 ELF assembler is buggy and it generates incorrect\n-   values when we try to use the the .double pseudo-op instead.  */\n-\n-#undef ASM_OUTPUT_DOUBLE\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n-do { long value[2];\t\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), value);\t\t\t\\\n-     if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-       {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[0]);\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[1]);\t\t\\\n-       }\t\t\t\t\t\t\t\t\\\n-     else\t\t\t\t\t\t\t\t\\\n-       {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[1]);\t\t\\\n-       }\t\t\t\t\t\t\t\t\\\n-   } while (0)\n-\n-\n-#undef ASM_OUTPUT_LONG_DOUBLE\n-#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)\t\t\t\t\\\n-do { long value[3];\t\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_LONG_DOUBLE ((VALUE), value);\t\t\t\\\n-     if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-       {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[0]);\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[1]);\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[2]);\t\t\\\n-       }\t\t\t\t\t\t\t\t\\\n-     else\t\t\t\t\t\t\t\t\\\n-       {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[1]);\t\t\\\n-         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[2]);\t\t\\\n-       }\t\t\t\t\t\t\t\t\\\n-   } while (0)\n-\n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n) \\\n   (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])"}, {"sha": "3081fdebf8c981c31eb86bfee3e8f4d95af722c1", "filename": "gcc/config/i386/next.h", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi386%2Fnext.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi386%2Fnext.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnext.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -42,50 +42,6 @@ Boston, MA 02111-1307, USA.  */\n   ((MODE) == SFmode || (MODE) == DFmode || (MODE) == XFmode\t\\\n    ? FIRST_FLOAT_REG : 0)\n \n-#ifdef REAL_VALUE_TO_TARGET_LONG_DOUBLE\n-#undef\tASM_OUTPUT_LONG_DOUBLE\n-#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    long hex[3];\t\t\t\t\t\t\t\\\n-    REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, hex);\t\t\t\\\n-    if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.long 0x%x\\n\\t.long 0x%x\\n\\t.long 0x%x\\n\",\t\\\n-\t\t(int) hex[0], (int) hex[1], (int) hex[2]);\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.long 0x%lx\\n\\t.long 0x%lx\\n\\t.long 0x%lx\\n\",\t\\\n-\t\thex[0], hex[1], hex[2]);\t\t\t\t\\\n-  } while (0)\n-#endif\n-\n-#ifdef REAL_VALUE_TO_TARGET_DOUBLE\n-#undef\tASM_OUTPUT_DOUBLE\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    long hex[2];\t\t\t\t\t\t\t\\\n-    REAL_VALUE_TO_TARGET_DOUBLE (VALUE, hex);\t\t\t\t\\\n-    if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.long 0x%x\\n\\t.long 0x%x\\n\",\t\t\t\\\n-        (int) hex[0], (int) hex[1]);\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.long 0x%lx\\n\\t.long 0x%lx\\n\", hex[0], hex[1]);\t\\\n-  } while (0)\n-#endif\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#ifdef REAL_VALUE_TO_TARGET_SINGLE\n-#undef\tASM_OUTPUT_FLOAT\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    long hex;\t\t\t\t\t\t\t\t\\\n-    REAL_VALUE_TO_TARGET_SINGLE (VALUE, hex);\t\t\t\t\\\n-    if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.long 0x%x\\n\", (int) hex);\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.long 0x%lx\\n\", hex);\t\t\t\t\\\n-  } while (0)\n-#endif\n-\n /* A C statement or statements which output an assembler instruction\n    opcode to the stdio stream STREAM.  The macro-operand PTR is a\n    variable of type `char *' which points to the opcode name in its"}, {"sha": "0c51703f6e818d040fad206894feafff1e694610", "filename": "gcc/config/i386/ptx4-i.h", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi386%2Fptx4-i.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi386%2Fptx4-i.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fptx4-i.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -40,61 +40,6 @@ Boston, MA 02111-1307, USA.  */\n #define CPP_PREDEFINES \\\n   \"-Dunix -D_SEQUENT_ -Asystem=unix -Asystem=ptx4\"\n \n-/* This is how to output assembly code to define a `float' constant.\n-   We always have to use a .long pseudo-op to do this because the native\n-   SVR4 ELF assembler is buggy and it generates incorrect values when we\n-   try to use the .float pseudo-op instead.  */\n-\n-#undef ASM_OUTPUT_FLOAT\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\t\\\n-do { long value;\t\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_SINGLE ((VALUE), value);\t\t\t\\\n-     if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value);\t\t\\\n-     else\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value);\t\t\t\\\n-   } while (0)\n-\n-/* This is how to output assembly code to define a `double' constant.\n-   We always have to use a pair of .long pseudo-ops to do this because\n-   the native SVR4 ELF assembler is buggy and it generates incorrect\n-   values when we try to use the .double pseudo-op instead.  */\n-\n-#undef ASM_OUTPUT_DOUBLE\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n-do { long value[2];\t\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), value);\t\t\t\\\n-     if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-       {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[0]);\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[1]);\t\t\\\n-       }\t\t\t\t\t\t\t\t\\\n-     else\t\t\t\t\t\t\t\t\\\n-       {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[1]);\t\t\\\n-       }\t\t\t\t\t\t\t\t\\\n-   } while (0)\n-\n-\n-#undef ASM_OUTPUT_LONG_DOUBLE\n-#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)\t\t\t\t\\\n-do { long value[3];\t\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_LONG_DOUBLE ((VALUE), value);\t\t\t\\\n-     if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-       {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[0]);\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[1]);\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[2]);\t\t\\\n-       }\t\t\t\t\t\t\t\t\\\n-     else\t\t\t\t\t\t\t\t\\\n-       {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[1]);\t\t\\\n-         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[2]);\t\t\\\n-       }\t\t\t\t\t\t\t\t\\\n-   } while (0)\n-\n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n)  svr4_dbx_register_map[n]\n "}, {"sha": "f9b3093f1b994e6bcbc53bc372e58b37248d35c0", "filename": "gcc/config/i386/sysv4.h", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi386%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi386%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv4.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -38,61 +38,6 @@ Boston, MA 02111-1307, USA.  */\n #define CPP_PREDEFINES \\\n   \"-Dunix -D__svr4__ -Asystem=unix -Asystem=svr4\"\n \n-/* This is how to output assembly code to define a `float' constant.\n-   We always have to use a .long pseudo-op to do this because the native\n-   SVR4 ELF assembler is buggy and it generates incorrect values when we\n-   try to use the .float pseudo-op instead.  */\n-\n-#undef ASM_OUTPUT_FLOAT\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\t\\\n-do { long value;\t\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_SINGLE ((VALUE), value);\t\t\t\\\n-     if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value);\t\t\\\n-     else\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value);\t\t\t\\\n-   } while (0)\n-\n-/* This is how to output assembly code to define a `double' constant.\n-   We always have to use a pair of .long pseudo-ops to do this because\n-   the native SVR4 ELF assembler is buggy and it generates incorrect\n-   values when we try to use the .double pseudo-op instead.  */\n-\n-#undef ASM_OUTPUT_DOUBLE\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n-do { long value[2];\t\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), value);\t\t\t\\\n-     if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-       {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[0]);\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[1]);\t\t\\\n-       }\t\t\t\t\t\t\t\t\\\n-     else\t\t\t\t\t\t\t\t\\\n-       {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[1]);\t\t\\\n-       }\t\t\t\t\t\t\t\t\\\n-   } while (0)\n-\n-\n-#undef ASM_OUTPUT_LONG_DOUBLE\n-#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)\t\t\t\t\\\n-do { long value[3];\t\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_LONG_DOUBLE ((VALUE), value);\t\t\t\\\n-     if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-       {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[0]);\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[1]);\t\t\\\n-         fprintf((FILE), \"%s0x%x\\n\", ASM_LONG, (int) value[2]);\t\t\\\n-       }\t\t\t\t\t\t\t\t\\\n-     else\t\t\t\t\t\t\t\t\\\n-       {\t\t\t\t\t\t\t\t\\\n-         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[0]);\t\t\\\n-         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[1]);\t\t\\\n-         fprintf((FILE), \"%s0x%lx\\n\", ASM_LONG, value[2]);\t\t\\\n-       }\t\t\t\t\t\t\t\t\\\n-   } while (0)\n-\n /* Output at beginning of assembler file.  */\n /* The .file command should always begin the output.  */\n "}, {"sha": "04a62a5a0db7c4eda4fc6a27a9de8fa94629bcbb", "filename": "gcc/config/i860/fx2800.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi860%2Ffx2800.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi860%2Ffx2800.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Ffx2800.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -266,15 +266,6 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_COMMENT_START\n #define ASM_COMMENT_START \"//\"\n \n-/* Use definitions of ASM_OUTPUT_{DOUBLE,FLOAT} as given in i860.h */\n-\n-#undef ASM_OUTPUT_DOUBLE\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE) \\\n-  fprintf(FILE, \"\\t.double %.20e\\n\", (VALUE))\n-#undef ASM_OUTPUT_FLOAT\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE) \\\n-  fprintf(FILE, \"\\t.float %.12e\\n\", (VALUE))\n-\n #undef ASM_FILE_START\n #define ASM_FILE_START(FILE)\n #undef ASM_OUTPUT_FUNCTION_PREFIX"}, {"sha": "bffae0b8bab1198f9a1dc121033450dbd4ad4adc", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1072,16 +1072,6 @@ do { ASM_OUTPUT_ALIGN ((FILE), 2);\t\t\t\t\t\\\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n   sprintf (LABEL, \"*.%s%d\", PREFIX, NUM)\n \n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n-  fprintf (FILE, \"\\t.double %.20e\\n\", (VALUE))\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)  \\\n-  fprintf (FILE, \"\\t.float %.12e\\n\", (VALUE))\n-\n /* This is how to output code to push a register on the stack.\n    It need not be very fast code.  */\n "}, {"sha": "6ed94ad70eb552e5b0593a0dbb6dc34036bb8494", "filename": "gcc/config/i860/paragon.h", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi860%2Fparagon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi860%2Fparagon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fparagon.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -81,41 +81,6 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_IDENT(FILE, NAME) \\\n   fprintf (FILE, \"//\\t.ident \\\"%s\\\"\\n\", NAME);\n \n-/*\n- *\tthe assembler doesn't grok .double INF and the like\n- *\tbut does understand .long with hex numbers, so special\n- *\tcase the \"symbolic\" IEEE numbers.\n- */\n-#undef ASM_OUTPUT_DOUBLE\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\\\n-    if (REAL_VALUE_ISINF (VALUE)\t\t\t\t\\\n-        || REAL_VALUE_ISNAN (VALUE)\t\t\t\t\\\n-\t|| REAL_VALUE_MINUS_ZERO (VALUE))\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\tlong t[2];\t\t\t\t\t\t\\\n-\tREAL_VALUE_TO_TARGET_DOUBLE ((VALUE), t);\t\t\\\n-\tfprintf (FILE, \"\\t.long 0x%lx\\n\\t.long 0x%lx\\n\", t[0], t[1]); \\\n-      }\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.double %.20e\\n\", VALUE);\t\t\\\n-  }\n-\n-#undef ASM_OUTPUT_FLOAT\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\\\n-    if (REAL_VALUE_ISINF (VALUE)\t\t\t\t\\\n-        || REAL_VALUE_ISNAN (VALUE)\t\t\t\t\\\n-\t|| REAL_VALUE_MINUS_ZERO (VALUE))\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\tlong t;\t\t\t\t\t\t\t\\\n-\tREAL_VALUE_TO_TARGET_SINGLE ((VALUE), t);\t\t\\\n-\tfprintf (FILE, \"\\t.long 0x%lx\\n\", t);\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.float %.12e\\n\", VALUE);\t\t\\\n-  }\n-\n #undef\tASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(FILE, STR, LENGTH)\t\t\t\\\n   do\t\t\t\t\t\t\t\t\\"}, {"sha": "9d5e52f374d10cacc43baeb742d86300f0eac7fe", "filename": "gcc/config/i860/sysv4.h", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi860%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi860%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fsysv4.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -59,55 +59,6 @@ Boston, MA 02111-1307, USA.  */\n \tfprintf (FILE, \"]@%s\", PART_CODE);\t\t\t\t\\\n   } while (0)\n \n-/* If the host and target formats match, output the floats as hex.  */\n-#if HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT\n-#if defined (HOST_WORDS_BIG_ENDIAN) == WORDS_BIG_ENDIAN\n-\n-/* This is how to output an assembler line defining a `double' constant.\n-   Note that the native i860/svr4 ELF assembler can't properly handle\n-   infinity.  It generates an incorrect (non-infinity) value when given\n-   `.double 99e9999' and it doesn't grok `inf' at all.  It also mishandles\n-   NaNs and -0.0.  */\n-\n-#undef ASM_OUTPUT_DOUBLE\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (REAL_VALUE_ISINF (VALUE)\t\t\t\t\t\\\n-        || REAL_VALUE_ISNAN (VALUE)\t\t\t\t\t\\\n-\t|| REAL_VALUE_MINUS_ZERO (VALUE))\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tlong t[2];\t\t\t\t\t\t\t\\\n-\tREAL_VALUE_TO_TARGET_DOUBLE ((VALUE), t);\t\t\t\\\n-\tfprintf (FILE, \"\\t.word 0x%lx\\n\\t.word 0x%lx\\n\", t[0], t[1]);\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.double %.20e\\n\", VALUE);\t\t\t\\\n-  }\n-\n-/* This is how to output an assembler line defining a `float' constant.\n-   Note that the native i860/svr4 ELF assembler can't properly handle\n-   infinity.  It actually generates an assembly time error when given\n-   `.float 99e9999' and it doesn't grok `inf' at all.  It also mishandles\n-   NaNs and -0.0.  */\n-\n-#undef ASM_OUTPUT_FLOAT\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (REAL_VALUE_ISINF (VALUE)\t\t\t\t\t\\\n-        || REAL_VALUE_ISNAN (VALUE)\t\t\t\t\t\\\n-\t|| REAL_VALUE_MINUS_ZERO (VALUE))\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tlong t;\t\t\t\t\t\t\t\t\\\n-\tREAL_VALUE_TO_TARGET_SINGLE ((VALUE), t);\t\t\t\\\n-\tfprintf (FILE, \"\\t.word 0x%lx\\n\", t);\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.float %.12e\\n\", VALUE);\t\t\t\\\n-  }\n-\n-#endif /* word order matches */\n-#endif /* HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT */\n-\n #undef ASM_FILE_START\n #define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n   do {\toutput_file_directive (FILE, main_input_filename);\t\t\\"}, {"sha": "cdebff102c3fb5b13e78427110f08d813ca0400e", "filename": "gcc/config/i960/i960-protos.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi960%2Fi960-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi960%2Fi960-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960-protos.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -88,12 +88,6 @@ extern int i960_final_reg_parm_stack_space PARAMS ((int, tree));\n extern int i960_reg_parm_stack_space PARAMS ((tree));\n #endif /* TREE_CODE */\n \n-#ifdef REAL_VALUE_TYPE\n-extern void i960_output_long_double PARAMS ((FILE *, REAL_VALUE_TYPE));\n-extern void i960_output_double PARAMS ((FILE *, REAL_VALUE_TYPE));\n-extern void i960_output_float PARAMS ((FILE *, REAL_VALUE_TYPE));\n-#endif /* REAL_VALUE_TYPE */\n-\n extern int process_pragma PARAMS ((int(*)(void), void(*)(int), const char *));\n extern int i960_object_bytes_bitalign PARAMS ((int));\n extern void i960_initialize PARAMS ((void));"}, {"sha": "67fef75daa03f35713b685876c3436a9c9529dfe", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -2447,54 +2447,6 @@ i960_function_arg (cum, mode, type, named)\n   return ret;\n }\n \f\n-/* Floating-point support.  */\n-\n-void\n-i960_output_long_double (file, value)\n-     FILE *file;\n-     REAL_VALUE_TYPE value;\n-{\n-  long value_long[3];\n-  char dstr[30];\n-\n-  REAL_VALUE_TO_TARGET_LONG_DOUBLE (value, value_long);\n-  REAL_VALUE_TO_DECIMAL (value, \"%.20g\", dstr);\n-\n-  fprintf (file,\n-\t   \"\\t.word\\t0x%08lx\\t\\t# %s\\n\\t.word\\t0x%08lx\\n\\t.word\\t0x%08lx\\n\",\n-\t   value_long[0], dstr, value_long[1], value_long[2]);\n-  fprintf (file, \"\\t.word\\t0x0\\n\");\n-}\n-\n-void\n-i960_output_double (file, value)\n-     FILE *file;\n-     REAL_VALUE_TYPE value;\n-{\n-  long value_long[2];\n-  char dstr[30];\n-\n-  REAL_VALUE_TO_TARGET_DOUBLE (value, value_long);\n-  REAL_VALUE_TO_DECIMAL (value, \"%.20g\", dstr);\n-\n-  fprintf (file, \"\\t.word\\t0x%08lx\\t\\t# %s\\n\\t.word\\t0x%08lx\\n\",\n-\t   value_long[0], dstr, value_long[1]);\n-}\n-  \n-void\n-i960_output_float (file, value)\n-     FILE *file;\n-     REAL_VALUE_TYPE value;\n-{\n-  long value_long;\n-  char dstr[30];\n-\n-  REAL_VALUE_TO_TARGET_SINGLE (value, value_long);\n-  REAL_VALUE_TO_DECIMAL (value, \"%.12g\", dstr);\n-\n-  fprintf (file, \"\\t.word\\t0x%08lx\\t\\t# %s (float)\\n\", value_long, dstr);\n-}\n-\f\n /* Return the number of bits that an object of size N bytes is aligned to.  */\n \n int"}, {"sha": "8acb2e48683e33cd0b335cd9ef55b70b7bd825a5", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1388,19 +1388,6 @@ extern struct rtx_def *i960_compare_op0, *i960_compare_op1;\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n   sprintf (LABEL, \"*%s%d\", PREFIX, NUM)\n \n-/* This is how to output an assembler line defining a `long double'\n-   constant.  */\n-\n-#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE) i960_output_long_double(FILE, VALUE)\n-\n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)  i960_output_double(FILE, VALUE)\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)  i960_output_float(FILE, VALUE)\n-\n #define ASM_OUTPUT_REG_PUSH(FILE,REGNO)  \\\n   fprintf (FILE, \"\\tst\\t%s,(sp)\\n\\taddo\\t4,sp,sp\\n\", reg_names[REGNO])\n "}, {"sha": "f9c28adcd545e5bfed87387b18dd745091404dbc", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1913,37 +1913,6 @@ do {\t\t\t\t\t\t\\\n \f\n /* Output of Data.  */\n \n-/* A C statement to output to the stdio stream STREAM an assembler instruction\n-   to assemble a floating-point constant of `TFmode', `DFmode', `SFmode',\n-   respectively, whose value is VALUE.  */\n-\n-/* ??? Must reverse the word order for big-endian code?  */\n-\n-#define ASM_OUTPUT_LONG_DOUBLE(FILE, VALUE) \\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  long t[3];\t\t\t\t\t\t\t\t\\\n-  REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, t);\t\t\t\t\\\n-  fprintf (FILE, \"\\tdata4 0x%08lx, 0x%08lx, 0x%08lx, 0x%08lx\\n\",\t\\\n-\t   t[0] & 0xffffffff, t[1] & 0xffffffff, t[2] & 0xffffffff, 0L);\\\n-} while (0)\n-\n-/* ??? Must reverse the word order for big-endian code?  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  long t[2];\t\t\t\t\t\t\t\\\n-  REAL_VALUE_TO_TARGET_DOUBLE (VALUE, t);\t\t\t\\\n-  fprintf (FILE, \"\\tdata8 0x%08lx%08lx\\n\",\t\t\t\\\n-\t   t[1] & 0xffffffff, t[0] & 0xffffffff);\t\t\\\n-} while (0)\n-\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\\\n-    long t;\t\t\t\t\t\t\t\\\n-    REAL_VALUE_TO_TARGET_SINGLE (VALUE, t);\t\t\t\\\n-    fprintf (FILE, \"\\tdata4 0x%lx\\n\", t & 0xffffffff);\t\t\\\n-} while (0)\n-  \n /* This is how to output an assembler line defining a `char' constant\n    to an xdata segment.  */\n "}, {"sha": "e24368054eff5c6996c65d179b217f11967f73a1", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1719,32 +1719,6 @@ do {\t\t\t\t\t\t\t\\\n    no longer contain unusual constructs.  */\n #define ASM_APP_OFF \"\"\n \n-/* This is how to output an assembler line defining a `float' constant.  */\n-#define ASM_OUTPUT_FLOAT(FILE, VALUE)\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      long t;\t\t\t\t\t\t\\\n-      char str[30];\t\t\t\t\t\\\n-      REAL_VALUE_TO_TARGET_SINGLE ((VALUE), t);\t\t\\\n-      REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", str);\t\\\n-      fprintf (FILE, \"\\t.word\\t0x%lx %s %s\\n\",\t\t\\\n-\t       t, ASM_COMMENT_START, str);\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-/* This is how to output an assembler line defining a `double' constant.  */\n-#define ASM_OUTPUT_DOUBLE(FILE, VALUE)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      long t[2];\t\t\t\t\t\t\\\n-      char str[30];\t\t\t\t\t\t\\\n-      REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), t);\t\t\t\\\n-      REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", str);\t\t\\\n-      fprintf (FILE, \"\\t.word\\t0x%lx %s %s\\n\\t.word\\t0x%lx\\n\",\t\\\n-\t       t[0], ASM_COMMENT_START, str, t[1]);\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n /* This is how to output the definition of a user-level label named NAME,\n    such as the label on a static function or variable NAME.  */\n /* On the M32R we need to ensure the next instruction starts on a 32 bit"}, {"sha": "f45d195e0203724ab187450035d3de4d5b3cdbaf", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -2209,20 +2209,21 @@ print_operand (file, op, letter)\n   else if (GET_CODE (op) == CONST_DOUBLE && GET_MODE (op) == SFmode)\n     {\n       REAL_VALUE_TYPE r;\n+      long l;\n+\n       REAL_VALUE_FROM_CONST_DOUBLE (r, op);\n-      ASM_OUTPUT_FLOAT_OPERAND (letter, file, r);\n-    }\n-  else if (GET_CODE (op) == CONST_DOUBLE && GET_MODE (op) == XFmode)\n-    {\n-      REAL_VALUE_TYPE r;\n-      REAL_VALUE_FROM_CONST_DOUBLE (r, op);\n-      ASM_OUTPUT_LONG_DOUBLE_OPERAND (file, r);\n+      REAL_VALUE_TO_TARGET_SINGLE (r, l);\n+      asm_fprintf (file, \"%I0x%lx\", l);\n     }\n-  else if (GET_CODE (op) == CONST_DOUBLE && GET_MODE (op) == DFmode)\n+  else if (GET_CODE (op) == CONST_DOUBLE\n+\t   && (GET_MODE (op) == DFmode || GET_MODE (op) == XFmode))\n     {\n       REAL_VALUE_TYPE r;\n+      char dstr[30];\n+\n       REAL_VALUE_FROM_CONST_DOUBLE (r, op);\n-      ASM_OUTPUT_DOUBLE_OPERAND (file, r);\n+      REAL_VALUE_TO_DECIMAL (r, \"%.20g\", dstr);\n+      asm_fprintf (file, \"%I0r%s\", dstr);\n     }\n   else\n     {"}, {"sha": "deeb6a4d87f2dd6224a86b9d85048b0596c62b36", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1569,28 +1569,6 @@ do {                                                                    \\\n \n /* Output #ident as a .ident.  */\n \n-/* This is how to output a `long double' extended real constant.  */\n-\n-#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\t\t\\\n-    ASM_OUTPUT_DOUBLE(FILE,VALUE)\n-\n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n-do { long l[2];\t\t\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\t\t\\\n-     fprintf (FILE, \"\\t%s\\t0x%lx,0x%lx\\n\",\t\t\t\t\\\n-\t      integer_asm_op (4, TRUE), l[0], l[1]);\t\t\t\\\n-   } while (0)\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\\\n-do { long l;\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n-     assemble_aligned_integer (4, GEN_INT (l));\t\t\\\n-   } while (0)\n-\n /* This is how to output the definition of a user-level label named NAME,\n    such as the label on a static function or variable NAME.  */\n \n@@ -1629,33 +1607,6 @@ do { long l;\t\t\t\t\t\t\\\n   \"*_.frame\", \"*_.tmp\", \"*_.z\", \"*_.xy\", \"*fake clobber\",\t\\\n   SOFT_REG_NAMES, \"*sframe\", \"*ap\"}\n \n-\n-/* Output a float value (represented as a C double) as an immediate operand.\n-   This macro is a 68k-specific macro.  */\n-\n-#define ASM_OUTPUT_FLOAT_OPERAND(CODE,FILE,VALUE)\t\t\\\n- do {\t\t\t\t\t\t\t\t\\\n-      long l;\t\t\t\t\t\t\t\\\n-      REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\t\\\n-      asm_fprintf ((FILE), \"%I0x%lx\", l);\t\t\t\\\n-     } while (0)\n-\n-/* Output a double value (represented as a C double) as an immediate operand.\n-   This macro is a 68k-specific macro.  */\n-#define ASM_OUTPUT_DOUBLE_OPERAND(FILE,VALUE)\t\t\t\t\\\n- do { char dstr[30];\t\t\t\t\t\t\t\\\n-      REAL_VALUE_TO_DECIMAL (VALUE, \"%.20g\", dstr);\t\t\t\\\n-      asm_fprintf (FILE, \"%I0r%s\", dstr);\t\t\t\t\\\n-    } while (0)\n-\n-/* Note, long double immediate operands are not actually\n-   generated by m68k.md.  */\n-#define ASM_OUTPUT_LONG_DOUBLE_OPERAND(FILE,VALUE)\t\t\t\\\n- do { char dstr[30];\t\t\t\t\t\t\t\\\n-      REAL_VALUE_TO_DECIMAL (VALUE, \"%.20g\", dstr);\t\t\t\\\n-      asm_fprintf (FILE, \"%I0r%s\", dstr);\t\t\t\t\\\n-    } while (0)\n-\n /* Print an instruction operand X on file FILE. CODE is the code from the\n    %-spec for printing this operand. If `%z3' was used to print operand\n    3, then CODE is 'z'.  */"}, {"sha": "74aec112bf63238b9627fae898a31cbfd0e8ec81", "filename": "gcc/config/m68k/3b1.h", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2F3b1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2F3b1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2F3b1.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -101,8 +101,6 @@ output_file_directive ((FILE), main_input_filename)\n \n #undef TARGET_VERSION\n #undef ASM_FORMAT_PRIVATE_NAME\n-#undef ASM_OUTPUT_DOUBLE\n-#undef ASM_OUTPUT_FLOAT\n #undef ASM_OUTPUT_ALIGN\n #undef ASM_OUTPUT_SOURCE_FILENAME\n #undef ASM_OUTPUT_SOURCE_LINE\n@@ -127,29 +125,6 @@ output_file_directive ((FILE), main_input_filename)\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 12),\t\\\n   sprintf ((OUTPUT), \"%s_%%%d\", (NAME), (LABELNO)))\n \n-/* The unixpc doesn't know about double's and float's */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n-do { long l[2];\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\\\n-     fprintf (FILE, \"\\tlong 0x%lx,0x%lx\\n\", l[0], l[1]); \\\n-   } while (0)\n-\n-#undef ASM_OUTPUT_LONG_DOUBLE\n-#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\t\t\\\n-do { long l[3];\t\t\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\t\t\\\n-     fprintf (FILE, \"\\tlong 0x%lx,0x%lx,0x%lx\\n\", l[0], l[1], l[2]);\t\\\n-   } while (0)\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)  \\\n-do { long l;\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\\\n-     fprintf ((FILE), \"\\tlong 0x%lx\\n\", l);\t\\\n-   } while (0)\n-\n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n do {\t\t\t\t\t\\\n   if ((LOG) == 1)\t\t\t\\"}, {"sha": "63a129ca506fd5e8ca2bd5d3e8f659e42fadf550", "filename": "gcc/config/m68k/altos3068.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Faltos3068.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Faltos3068.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Faltos3068.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -78,24 +78,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define USE_GAS\n \n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#undef ASM_OUTPUT_DOUBLE\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\\\n-  do { char dstr[30];\t\t\t\t\t\\\n-       REAL_VALUE_TO_DECIMAL (VALUE, \"%.20e\", dstr);\t\\\n-       fprintf (FILE, \"\\t.double 0r%s\\n\", dstr);\t\\\n-     } while (0)\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#undef ASM_OUTPUT_FLOAT\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)                    \\\n-  do { char dstr[30];\t\t\t\t\t\\\n-       REAL_VALUE_TO_DECIMAL (VALUE, \"%.20e\", dstr);\t\\\n-       fprintf (FILE, \"\\t.single 0r%s\\n\", dstr);\t\\\n-     } while (0)\n-\n #undef ASM_OUTPUT_FLOAT_OPERAND\n #define ASM_OUTPUT_FLOAT_OPERAND(CODE,FILE,VALUE)\t\t\\\n  do {\t\t\t\t\t\t\t\t\\"}, {"sha": "03faa9fbba3cf3e6ef2ea6b5bff35d6295ff6ced", "filename": "gcc/config/m68k/crds.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fcrds.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fcrds.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fcrds.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -155,15 +155,6 @@ Boston, MA 02111-1307, USA.  */\n #undef IMMEDIATE_PREFIX\n #define IMMEDIATE_PREFIX \"$\"\n \n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#undef ASM_OUTPUT_DOUBLE   \n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n-do { long l[2];\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\\\n-     fprintf (FILE, \"\\t.long 0x%lx, 0x%lx\\n\", l[0], l[1]);\t\\\n-   } while (0)\n-\n /*unos has no .skip :-( */\n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)\t \t\\"}, {"sha": "2bc06b4bc2b757f66e60bbbf724f10302df0f279", "filename": "gcc/config/m68k/dpx2.h", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fdpx2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fdpx2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fdpx2.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -269,43 +269,6 @@ Boston, MA 02111-1307, USA.  */\n     }                                                   \\\n }\n \n-/* This is how to output a `long double' extended real constant.  */\n-#undef ASM_OUTPUT_LONG_DOUBLE \n-#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\t\t\\\n-do { long l[3];\t\t\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\t\t\\\n-     if (sizeof (int) == sizeof (long))\t\t\t\t\t\\\n-       fprintf (FILE, \"\\tdc.l $%x,$%x,$%x\\n\", (int)l[0], (int)l[1], (int)l[2]); \\\n-     else\t\t\t\t\t\t\t\t\\\n-       fprintf (FILE, \"\\tdc.l $%lx,$%lx,$%lx\\n\", l[0], l[1], l[2]);\t\\\n-   } while (0)\n-\n-#undef ASM_OUTPUT_DOUBLE\n-#if 0\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n-  do { char dstr[30];\t\t\t\t\t\t\\\n-       REAL_VALUE_TO_DECIMAL (VALUE, \"%.20g\", dstr);\t\t\\\n-       fprintf (FILE, \"\\tdc.d %s\\n\", dstr);\t        \t\\\n-     } while (0)\n-#endif\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n-do { long l[2];\t\t\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\t        \\\n-     fprintf (FILE, \"\\tdc.l $%lx,$%lx\\n\", l[0], l[1]);            \t\\\n-   } while (0)\n-\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-#undef ASM_OUTPUT_FLOAT\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)  \\\n-do { long l;\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n-     if (sizeof (int) == sizeof (long))\t\t\t\\\n-       fprintf (FILE, \"\\tdc.l $%x\\n\", (int) l);\t\t\\\n-     else\t\t\t\t\t\t\\\n-       fprintf (FILE, \"\\tdc.l $%lx\\n\", l);\t\t\\\n-   } while (0)\n-\n /* This is how to output an element of a case-vector that is absolute.\n    (The 68000 does not use such vectors,\n    but we must define this macro anyway.)  */"}, {"sha": "292d25db5b9e7fb9075ad47c4c884c82a72c9e60", "filename": "gcc/config/m68k/hp320.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fhp320.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fhp320.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp320.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -165,8 +165,6 @@ Boston, MA 02111-1307, USA.  */\n #undef TEXT_SECTION_ASM_OP\n #undef DATA_SECTION_ASM_OP\n #undef READONLY_DATA_SECTION\n-#undef ASM_OUTPUT_DOUBLE\n-#undef ASM_OUTPUT_FLOAT\n #undef ASM_OUTPUT_ADDR_VEC_ELT\n #undef ASM_OUTPUT_ADDR_DIFF_ELT\n #undef ASM_OUTPUT_ALIGN\n@@ -266,25 +264,6 @@ do{  if (PREFIX[0] == 'L' && PREFIX[1] == 'I')\t\t\\\n     fprintf (FILE, \"%s%d:\\n\", PREFIX, NUM);\t\t\\\n } while(0)\n \n-#define ASM_OUTPUT_DOUBLE(FILE, VALUE)\t\t\t\\\n-  do { char dstr[30];\t\t\t\t\t\\\n-       REAL_VALUE_TO_DECIMAL (VALUE, \"%.20g\", dstr);\t\\\n-       fprintf (FILE, \"\\tdouble 0f%s\\n\", dstr);\t\t\\\n-     } while (0)\n-\n-#define ASM_OUTPUT_FLOAT(FILE, VALUE)\t\t\t\\\n-  do { char dstr[30];\t\t\t\t\t\\\n-       REAL_VALUE_TO_DECIMAL (VALUE, \"%.9g\", dstr);\t\\\n-       fprintf (FILE, \"\\tfloat 0f%s\\n\", dstr);\t\t\\\n-     } while (0)\n-\n-#undef ASM_OUTPUT_LONG_DOUBLE\n-#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\t\t\\\n-do { long l[3];\t\t\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\t\t\\\n-     fprintf (FILE, \"\\tlong 0x%lx,0x%lx,0x%lx\\n\", l[0], l[1], l[2]);\t\\\n-   } while (0)\n-  \n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)  \\\n   fprintf (FILE, \"\\tlong L%d\\n\", VALUE)\n "}, {"sha": "2d422a07c173e236dcb1f3141bff332dd5292ef7", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1802,30 +1802,6 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n   sprintf (LABEL, \"*%s%s%ld\", LOCAL_LABEL_PREFIX, PREFIX, (long)(NUM))\n \n-/* This is how to output a `long double' extended real constant.  */\n-  \n-#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\t\t\\\n-do { long l[3];\t\t\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\t\t\\\n-     fprintf (FILE, \"\\t.long 0x%lx,0x%lx,0x%lx\\n\", l[0], l[1], l[2]);\t\\\n-   } while (0)\n-  \n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\\\n-  do { char dstr[30];\t\t\t\t\t\t\\\n-       REAL_VALUE_TO_DECIMAL (VALUE, \"%.20g\", dstr);\t\t\\\n-       fprintf (FILE, \"\\t.double 0r%s\\n\", dstr);\t\t\\\n-     } while (0)\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\\\n-do { long l;\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n-     fprintf (FILE, \"\\t.long 0x%lx\\n\", l);\t\t\\\n-   } while (0)\n-\n /* This is how to output an insn to push a register on the stack.\n    It need not be very fast code.  */\n "}, {"sha": "88e41fa03396c7a5a7abb688f6841869c96945c3", "filename": "gcc/config/m68k/mot3300.h", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fmot3300.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -296,34 +296,6 @@ Boston, MA 02111-1307, USA.  */\n #define INT_OP_GROUP INT_OP_NO_DOT\n #endif\n \n-/* The sysV68 as doesn't know about double's and float's.  */\n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#undef ASM_OUTPUT_DOUBLE\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n-do { long l[2];\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\\\n-     fprintf ((FILE), \"%s0x%lx,0x%lx\\n\",\t\t\\\n-\t      integer_asm_op (4, TRUE), l[0], l[1]);\t\\\n-   } while (0)\n-\n-#undef ASM_OUTPUT_LONG_DOUBLE\n-#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\t\t\\\n-do { long l[3];\t\t\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\t\t\\\n-     fprintf (FILE, \"%s 0x%lx,0x%lx,0x%lx\\n\",\t\t\t\t\\\n-\t      integer_asm_op (4, TRUE), l[0], l[1], l[2]);\t\t\\\n-   } while (0)\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#undef ASM_OUTPUT_FLOAT\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)  \\\n-do { long l;\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\\\n-     assemble_aligned_integer (4, GEN_INT (l));\t\\\n-   } while (0)\n-\n /* This is how to output an assembler line\n    that says to advance the location counter\n    to a multiple of 2**LOG bytes.  */"}, {"sha": "7b48a10e1433f78e282a7a76c6d58eb05529e7fc", "filename": "gcc/config/m68k/news.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fnews.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fnews.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnews.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -102,7 +102,6 @@ Boston, MA 02111-1307, USA.  */\n #undef REGISTER_NAMES\n #undef ASM_OUTPUT_REG_PUSH\n #undef ASM_OUTPUT_REG_POP\n-#undef ASM_OUTPUT_DOUBLE\n #undef ASM_OUTPUT_SKIP\n #undef ASM_FORMAT_PRIVATE_NAME\n #endif  \n@@ -160,12 +159,6 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_REG_POP(FILE,REGNO)  \\\n   fprintf (FILE, \"\\tmove.l (sp)+,%s\\n\", reg_names[REGNO])\n   \n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n-do { char dstr[30];\t\t\t\t\t\\\n-     REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\\\n-     fprintf (FILE, \"\\t.double 0d%s\\n\", dstr);\t\t\\\n-   } while (0)\n-\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n   fprintf (FILE, \"\\t.space %u\\n\", (SIZE))\n "}, {"sha": "3ccffc8ee0cef8345eb1b557bd1fab585075650a", "filename": "gcc/config/m68k/next.h", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fnext.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fnext.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnext.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -39,59 +39,6 @@ Boston, MA 02111-1307, USA.  */\n    (Why isn't this in m68k.h?)  */\n \n #define STRUCTURE_SIZE_BOUNDARY 16\n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#undef\tASM_OUTPUT_DOUBLE\n-#ifdef REAL_VALUE_TO_TARGET_DOUBLE\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    long hex[2];\t\t\t\t\t\t\t\\\n-    REAL_VALUE_TO_TARGET_DOUBLE (VALUE, hex);\t\t\t\t\\\n-    fprintf (FILE, \"\\t.long 0x%lx\\n\\t.long 0x%lx\\n\", hex[0], hex[1]);\t\\\n-  } while (0)\n-#else\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n- do { if (REAL_VALUE_ISINF (VALUE))\t\t\t\t\t\\\n-        {\t\t\t\t\t\t\t\t\\\n-          if (REAL_VALUE_NEGATIVE (VALUE))\t\t\t\t\\\n-            fprintf (FILE, \"\\t.double 0r-99e999\\n\");\t\t\t\\\n-          else\t\t\t\t\t\t\t\t\\\n-            fprintf (FILE, \"\\t.double 0r99e999\\n\");\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-        { char dstr[30];\t\t\t\t\t\t\\\n-          REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\t\\\n-          fprintf (FILE, \"\\t.double 0r%s\\n\", dstr);\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-    } while (0)\n-#endif\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#undef\tASM_OUTPUT_FLOAT\n-#ifdef REAL_VALUE_TO_TARGET_SINGLE\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    long hex;\t\t\t\t\t\t\t\t\\\n-    REAL_VALUE_TO_TARGET_SINGLE (VALUE, hex);\t\t\t\t\\\n-    fprintf (FILE, \"\\t.long 0x%lx\\n\", hex);\t\t\t\t\\\n-  } while (0)\n-#else\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\t\\\n- do { if (REAL_VALUE_ISINF (VALUE))\t\t\t\t\t\\\n-        {\t\t\t\t\t\t\t\t\\\n-          if (REAL_VALUE_NEGATIVE (VALUE))\t\t\t\t\\\n-            fprintf (FILE, \"\\t.single 0r-99e999\\n\");\t\t\t\\\n-          else\t\t\t\t\t\t\t\t\\\n-            fprintf (FILE, \"\\t.single 0r99e999\\n\");\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-        { char dstr[30];\t\t\t\t\t\t\\\n-          REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\t\\\n-          fprintf (FILE, \"\\t.single 0r%s\\n\", dstr);\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-    } while (0)\n-#endif\n \n #undef\tASM_OUTPUT_FLOAT_OPERAND\n #ifdef REAL_VALUE_TO_TARGET_SINGLE"}, {"sha": "b4d8aee8eeb3fa3e9f2cb8c09ec4a929e8030150", "filename": "gcc/config/m68k/next21.h", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fnext21.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fnext21.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnext21.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -27,39 +27,6 @@ Boston, MA 02111-1307, USA.  */\n /* for #include <mach.h> in libgcc2.c */\n #define NeXTStep21\t\n \n-#undef\tASM_OUTPUT_DOUBLE\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n- do { if (REAL_VALUE_ISINF (VALUE))\t\t\t\t\t\\\n-        {\t\t\t\t\t\t\t\t\\\n-          if (REAL_VALUE_NEGATIVE (VALUE))\t\t\t\t\\\n-            fprintf (FILE, \"#0r-99e999\");\t\t\t\t\\\n-          else\t\t\t\t\t\t\t\t\\\n-            fprintf (FILE, \"#0r99e999\");\t\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-        { char dstr[30];\t\t\t\t\t\t\\\n-          REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\t\\\n-          fprintf (FILE, \"\\t.double 0r%s\\n\", dstr);\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-    } while (0)\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-#undef\tASM_OUTPUT_FLOAT\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\t\\\n- do { if (REAL_VALUE_ISINF (VALUE))\t\t\t\t\t\\\n-        {\t\t\t\t\t\t\t\t\\\n-          if (REAL_VALUE_NEGATIVE (VALUE))\t\t\t\t\\\n-            fprintf (FILE, \"\\t.single 0r-99e999\\n\");\t\t\t\\\n-          else\t\t\t\t\t\t\t\t\\\n-            fprintf (FILE, \"\\t.single 0r99e999\\n\");\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-        { char dstr[30];\t\t\t\t\t\t\\\n-          REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\t\\\n-          fprintf (FILE, \"\\t.single 0r%s\\n\", dstr);\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-    } while (0)\n-\n /* called from m68k.c line 1881 */\n #undef\tASM_OUTPUT_FLOAT_OPERAND\n #define ASM_OUTPUT_FLOAT_OPERAND(CODE,FILE,VALUE)\t\t\\"}, {"sha": "949ea7dcaa776ba1fd60c17ee811b72598c6df50", "filename": "gcc/config/m68k/sgs.h", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fsgs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fsgs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fsgs.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -99,36 +99,6 @@ Boston, MA 02111-1307, USA.  */\n \n #endif /* defined SUPPORT_SUN_FPA */\n \n-/* This is how to output an assembler line defining an `int' constant.  */\n-/* The SGS assembler doesn't understand \".word\".  */\n-\n-#undef ASM_OUTPUT_LONG_DOUBLE\n-#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\t\\\n-do { long l[3];\t\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\t\\\n-     fprintf ((FILE), \"%s0x%lx,0x%lx,0x%lx\\n\",\t\t\t\\\n-\t      integer_asm_op (4, TRUE), l[0], l[1], l[2]);\t\\\n-   } while (0)\n-\n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#undef ASM_OUTPUT_DOUBLE\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\\\n-do { long l[2];\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\\\n-     fprintf ((FILE), \"%s0x%lx,0x%lx\\n\",\t\t\\\n-\t      integer_asm_op (4, TRUE), l[0], l[1]);\t\\\n-   } while (0)\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#undef ASM_OUTPUT_FLOAT\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\\\n-do { long l;\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\\\n-     assemble_aligned_integer (4, GEN_INT (l));\t\t\\\n-   } while (0)\n-\n /* This is how to output an assembler line that says to advance the\n    location counter to a multiple of 2**LOG bytes.  */\n "}, {"sha": "b3564c233358fef90241c50e0987e4c97a178c7d", "filename": "gcc/config/m68k/sun2o4.h", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fsun2o4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fsun2o4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fsun2o4.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -96,48 +96,6 @@ Boston, MA 02111-1307, USA.  */\n #define LINK_SPEC \\\n   \"%{!nostdlib:%{!r*:%{!e*:-e start}}} -dc -dp %{static:-Bstatic}\"\n \n-#undef ASM_OUTPUT_DOUBLE\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n-  do { if (REAL_VALUE_ISINF (VALUE))\t\t\t\t\t\\\n-        {\t\t\t\t\t\t\t\t\\\n-          if (REAL_VALUE_NEGATIVE (VALUE))\t\t\t\t\\\n-            fprintf (FILE, \"\\t.double 0r-99e999\\n\");\t\t\t\\\n-          else\t\t\t\t\t\t\t\t\\\n-            fprintf (FILE, \"\\t.double 0r99e999\\n\");\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-      else if (REAL_VALUE_MINUS_ZERO (VALUE))\t\t\t\t\\\n-        {\t\t\t\t\t\t\t\t\\\n-          fprintf (FILE, \"\\t.long 0x80000000,0\\n\");\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-        { char dstr[30];\t\t\t\t\t\t\\\n-          REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\t\\\n-          fprintf (FILE, \"\\t.double 0r%s\\n\", dstr);\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-    } while (0)\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#undef ASM_OUTPUT_FLOAT\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\t\\\n- do { if (REAL_VALUE_ISINF (VALUE))\t\t\t\t\t\\\n-        {\t\t\t\t\t\t\t\t\\\n-          if (REAL_VALUE_NEGATIVE (VALUE))\t\t\t\t\\\n-            fprintf (FILE, \"\\t.single 0r-99e999\\n\");\t\t\t\\\n-          else\t\t\t\t\t\t\t\t\\\n-            fprintf (FILE, \"\\t.single 0r99e999\\n\");\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-      else if (REAL_VALUE_MINUS_ZERO (VALUE))\t\t\t\t\\\n-        {\t\t\t\t\t\t\t\t\\\n-          fprintf (FILE, \"\\t.long 0x80000000\\n\");\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-        { char dstr[30];\t\t\t\t\t\t\\\n-          REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\t\\\n-          fprintf (FILE, \"\\t.single 0r%s\\n\", dstr);\t\t\t\\\n-        }\t\t\t\t\t\t\t\t\\\n-    } while (0)\n-\n #undef ASM_OUTPUT_FLOAT_OPERAND\n #define ASM_OUTPUT_FLOAT_OPERAND(CODE,FILE,VALUE)\t\t\\\n  do { \t\t\t\t\t\t\t\t\\"}, {"sha": "0bee82346875fea9d3bf4bb7e91a9193054cd868", "filename": "gcc/config/m68k/sun3.h", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fsun3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Fsun3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fsun3.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -183,54 +183,6 @@ Boston, MA 02111-1307, USA.  */\n #define FUNCTION_VALUE(VALTYPE,FUNC) FUNCTION_VALUEX (TYPE_MODE (VALTYPE))\n #endif /* 0 */\n \n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#undef ASM_OUTPUT_DOUBLE\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\\\n-    if (REAL_VALUE_ISINF (VALUE))\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-        if (REAL_VALUE_NEGATIVE (VALUE))\t\t\t\\\n-          fprintf (FILE, \"\\t.double 0r-99e999\\n\");\t\t\\\n-        else\t\t\t\t\t\t\t\\\n-          fprintf (FILE, \"\\t.double 0r99e999\\n\");\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    else if (REAL_VALUE_ISNAN (VALUE))\t\t\t\t\\\n-      { long l[2];\t\t\t\t\t\t\\\n-        REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), l);\t\t\\\n-\tfprintf (FILE, \"\\t.long 0x%lx\\n\\t.long 0x%lx\\n\", l[0], l[1]); \\\n-      }\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\\\n-      { char dstr[30];\t\t\t\t\t\t\\\n-        REAL_VALUE_TO_DECIMAL ((VALUE), \"%.17g\", dstr);\t\t\\\n-        fprintf (FILE, \"\\t.double 0r%s\\n\", dstr);\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    }\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#undef ASM_OUTPUT_FLOAT\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\\\n-    if (REAL_VALUE_ISINF (VALUE))\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-        if (REAL_VALUE_NEGATIVE (VALUE))\t\t\t\\\n-          fprintf (FILE, \"\\t.single 0r-99e999\\n\");\t\t\\\n-        else\t\t\t\t\t\t\t\\\n-          fprintf (FILE, \"\\t.single 0r99e999\\n\");\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    else if (REAL_VALUE_ISNAN (VALUE))\t\t\t\t\\\n-      { long l;\t\t\t\t\t\t\t\\\n-        REAL_VALUE_TO_TARGET_SINGLE ((VALUE), l);\t\t\\\n-        fprintf (FILE, \"\\t.long 0x%lx\\n\", l);\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    else\t\t\t\t\t\t\t\\\n-      { char dstr[30];\t\t\t\t\t\t\\\n-        REAL_VALUE_TO_DECIMAL ((VALUE), \"%.9g\", dstr);\t\t\\\n-        fprintf (FILE, \"\\t.single 0r%s\\n\", dstr);\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    }\n-\n /* This is how to output an assembler lines defining floating operands.\n    There's no way to output a NaN's fraction, so we lose it.  */\n   "}, {"sha": "6007099bd3ee308b2a144875616c46a4626079e3", "filename": "gcc/config/m68k/tower-as.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ftower-as.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -258,27 +258,6 @@ Boston, MA 02111-1307, USA.  */\n   fprintf (FILE, \"\\tswbeg &%d\\n%s%%%d:\\n\",\t\t\t\t\\\n            XVECLEN (PATTERN (TABLE), 1), (PREFIX), (NUM));\t\t\\\n \n-#undef ASM_OUTPUT_DOUBLE\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n-do { long l[2];\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\\\n-     fprintf (FILE, \"\\tlong 0x%lx,0x%lx\\n\", l[0], l[1]); \\\n-   } while (0)\n-\n-#undef ASM_OUTPUT_LONG_DOUBLE\n-#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)  \t\t\t\t\\\n-do { long l[3];\t\t\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_LONG_DOUBLE (VALUE, l);\t\t\t\\\n-     fprintf (FILE, \"\\tlong 0x%lx,0x%lx,0x%lx\\n\", l[0], l[1], l[2]);\t\\\n-   } while (0)\n-\n-#undef ASM_OUTPUT_FLOAT\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)  \\\n-do { long l;\t\t\t\t\t\\\n-     REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\\\n-     fprintf ((FILE), \"\\tlong 0x%lx\\n\", l);\t\\\n-   } while (0)\n-\n #undef ASM_OUTPUT_ADDR_VEC_ELT\n #define ASM_OUTPUT_ADDR_VEC_ELT(FILE, VALUE)  \\\n   fprintf (FILE, \"\\tlong L%%%d\\n\", (VALUE))"}, {"sha": "590116bd241e8137667abab7277895921118229b", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1988,61 +1988,6 @@ do {\t\t\t\t\t\t\t\t\t \\\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\t\t\\\n   sprintf (LABEL, TARGET_SVR4 ? \"*.%s%ld\" : \"*@%s%ld\", PREFIX, (long)(NUM))\n \n-/* Internal macro to get a single precision floating point value into\n-   an int, so we can print its value in hex.  */\n-#define FLOAT_TO_INT_INTERNAL( FVALUE, IVALUE )\t\t\t\t\\\n-  { union {\t\t\t\t\t\t\t\t\\\n-      REAL_VALUE_TYPE d;\t\t\t\t\t\t\\\n-      struct {\t\t\t\t\t\t\t\t\\\n-\tunsigned sign      :  1;\t\t\t\t\t\\\n-\tunsigned exponent1 :  1;\t\t\t\t\t\\\n-\tunsigned exponent2 :  3;\t\t\t\t\t\\\n-\tunsigned exponent3 :  7;\t\t\t\t\t\\\n-\tunsigned mantissa1 : 20;\t\t\t\t\t\\\n-\tunsigned mantissa2 :  3;\t\t\t\t\t\\\n-\tunsigned mantissa3 : 29;\t\t\t\t\t\\\n-      } s;\t\t\t\t\t\t\t\t\\\n-    } _u;\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    union {\t\t\t\t\t\t\t\t\\\n-      int i;\t\t\t\t\t\t\t\t\\\n-      struct {\t\t\t\t\t\t\t\t\\\n-        unsigned sign      :  1;\t\t\t\t\t\\\n-\tunsigned exponent1 :  1;\t\t\t\t\t\\\n-\tunsigned exponent3 :  7;\t\t\t\t\t\\\n-        unsigned mantissa1 : 20;\t\t\t\t\t\\\n-        unsigned mantissa2 :  3;\t\t\t\t\t\\\n-      } s;\t\t\t\t\t\t\t\t\\\n-    } _u2;\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    _u.d = REAL_VALUE_TRUNCATE (SFmode, FVALUE);\t\t\t\\\n-    _u2.s.sign = _u.s.sign;\t\t\t\t\t\t\\\n-    _u2.s.exponent1 = _u.s.exponent1;\t\t\t\t\t\\\n-    _u2.s.exponent3 = _u.s.exponent3;\t\t\t\t\t\\\n-    _u2.s.mantissa1 = _u.s.mantissa1;\t\t\t\t\t\\\n-    _u2.s.mantissa2 = _u.s.mantissa2;\t\t\t\t\t\\\n-    IVALUE = _u2.i;\t\t\t\t\t\t\t\\\n-  }\n-\n-/* This is how to output an assembler line defining a `double' constant.\n-   Use \"word\" pseudos to avoid printing NaNs, infinity, etc.  */\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    union { REAL_VALUE_TYPE d; long l[2]; } x;\t\t\t\t\\\n-    x.d = (VALUE);\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s0x%.8lx, 0x%.8lx\\n\",\t\t\t\t\\\n-\t     integer_asm_op (4, TRUE),\t\t\t\t\t\\\n-\t     (long) x.l[0], (long) x.l[1]);\t\t\t\t\\\n-  } while (0)\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    int i;\t\t\t\t\t\t\t\t\\\n-    FLOAT_TO_INT_INTERNAL (VALUE, i);\t\t\t\t\t\\\n-    assemble_aligned_integer (4, GEN_INT (i));\t\t\t\t\\\n-  } while (0)\n-\n /* The single-byte pseudo-op is the default.  Override svr[34].h.  */\n #undef\tASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(FILE, P, SIZE)  \\"}, {"sha": "61c8c6bb7690ec14afb87c6cf400c694148eec04", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1245,27 +1245,6 @@ extern long mcore_current_compilation_timestamp;\n \n /* Output various types of constants.  */\n \n-/* This is how to output an assembler line defining a `double'.  */\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      char dstr[30];\t\t\t\t\t\\\n-      REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\\\n-      fprintf (FILE, \"\\t.double %s\\n\", dstr);\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (0)\n-\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\\\n-  do\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      char dstr[30];\t\t\t\t\t\\\n-      REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\\\n-      fprintf (FILE, \"\\t.float %s\\n\", dstr);\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-  while (0)\n-\n /* This is how to output an assembler line\n    that says to advance the location counter by SIZE bytes.  */\n #undef  ASM_OUTPUT_SKIP"}, {"sha": "1acf3c1c2c6c341952c2b8451392e34445750fd2", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -40,10 +40,6 @@ extern void\t\tmips_declare_object PARAMS ((FILE *, const char *,\n \t\t\t\t\t\t     const char *, int));\n extern void\t\tmips_expand_epilogue PARAMS ((void));\n extern void\t\tmips_expand_prologue PARAMS ((void));\n-#ifdef REAL_VALUE_TYPE\n-extern void\t\tmips_output_double PARAMS ((FILE *, REAL_VALUE_TYPE));\n-extern void\t\tmips_output_float PARAMS ((FILE *, REAL_VALUE_TYPE));\n-#endif /* REAL_VALUE_TYPE */\n extern void\t\tmips_output_filename PARAMS ((FILE *, const char *));\n extern void\t\tmips_output_lineno PARAMS ((FILE *, int));\n extern void\t\tmips_output_ascii PARAMS ((FILE *, const char *,"}, {"sha": "e433488e6c2fd724181c7c18ba769a4a7e77efea", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -6289,43 +6289,6 @@ mips_declare_object (stream, name, init_string, final_string, size)\n     }\n }\n \f\n-/* Output a double precision value to the assembler.  If both the\n-   host and target are IEEE, emit the values in hex.  */\n-\n-void\n-mips_output_double (stream, value)\n-     FILE *stream;\n-     REAL_VALUE_TYPE value;\n-{\n-#ifdef REAL_VALUE_TO_TARGET_DOUBLE\n-  long value_long[2];\n-  REAL_VALUE_TO_TARGET_DOUBLE (value, value_long);\n-\n-  fprintf (stream, \"\\t.word\\t0x%08lx\\t\\t# %.20g\\n\\t.word\\t0x%08lx\\n\",\n-\t   value_long[0], value, value_long[1]);\n-#else\n-  fprintf (stream, \"\\t.double\\t%.20g\\n\", value);\n-#endif\n-}\n-\n-/* Output a single precision value to the assembler.  If both the\n-   host and target are IEEE, emit the values in hex.  */\n-\n-void\n-mips_output_float (stream, value)\n-     FILE *stream;\n-     REAL_VALUE_TYPE value;\n-{\n-#ifdef REAL_VALUE_TO_TARGET_SINGLE\n-  long value_long;\n-  REAL_VALUE_TO_TARGET_SINGLE (value, value_long);\n-\n-  fprintf (stream, \"\\t.word\\t0x%08lx\\t\\t# %.12g (float)\\n\", value_long, value);\n-#else\n-  fprintf (stream, \"\\t.float\\t%.12g\\n\", value);\n-#endif\n-}\n-\f\n /* Return the bytes needed to compute the frame pointer from the current\n    stack pointer.\n "}, {"sha": "a9a77ee37988c8b152272bdcd12b82682cb8abb2", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -4384,18 +4384,6 @@ do {\t\t\t\t\t\t\t\\\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\t\t\\\n   sprintf ((LABEL), \"*%s%s%ld\", (LOCAL_LABEL_PREFIX), (PREFIX), (long)(NUM))\n \n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#define ASM_OUTPUT_DOUBLE(STREAM,VALUE)\t\t\t\t\t\\\n-  mips_output_double (STREAM, VALUE)\n-\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#define ASM_OUTPUT_FLOAT(STREAM,VALUE)\t\t\t\t\t\\\n-  mips_output_float (STREAM, VALUE)\n-\n-\n /* This is how to output an element of a case-vector that is absolute.  */\n \n #define ASM_OUTPUT_ADDR_VEC_ELT(STREAM, VALUE)\t\t\t\t\\"}, {"sha": "b936625c7076e11c77d2bed2ad3ecee6ff606e3e", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -131,12 +131,6 @@ extern rtx mmix_gen_compare_reg PARAMS ((enum rtx_code, rtx, rtx));\n extern int mmix_asm_preferred_eh_data_format PARAMS ((int, int));\n extern void mmix_setup_frame_addresses PARAMS ((void));\n \n-/* Need real.h */\n-#ifdef GCC_REAL_H\n-extern void mmix_asm_output_double PARAMS ((FILE *, REAL_VALUE_TYPE *));\n-extern void mmix_asm_output_float PARAMS ((FILE *, REAL_VALUE_TYPE *));\n-#endif /* GCC_REAL_H */\n-\n /*\n  * Local variables:\n  * eval: (c-set-style \"gnu\")"}, {"sha": "3269d5b407503fa1a813fc00687cdd58accf7494", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1890,39 +1890,6 @@ mmix_asm_output_source_line  (stream, lineno)\n   fprintf (stream, \"\\n\");\n }\n \n-/* ASM_OUTPUT_DOUBLE.  */\n-\n-void\n-mmix_asm_output_double (stream, valuep)\n-     FILE * stream;\n-     REAL_VALUE_TYPE * valuep;\n-{\n-  unsigned long bits[2];\n-  HOST_WIDEST_INT value;\n-\n-  REAL_VALUE_TO_TARGET_DOUBLE (*valuep, (long *) bits);\n-  value\n-    = (((HOST_WIDEST_INT) bits[0]) << 32) | (HOST_WIDEST_INT) bits[1];\n-  mmix_output_octa (stream, value, 1);\n-}\n-\n-/* ASM_OUTPUT_FLOAT.  */\n-\n-void\n-mmix_asm_output_float (stream, valuep)\n-     FILE * stream;\n-     REAL_VALUE_TYPE * valuep;\n-{\n-  unsigned long bits;\n-\n-  REAL_VALUE_TO_TARGET_SINGLE (*valuep, bits);\n-\n-  fprintf (stream, \"\\tTETRA #%lx\\n\",\n-\t   (unsigned long) (bits\n-\t\t\t    & (((unsigned HOST_WIDEST_INT) (1 << 31) - 1) * 2\n-\t\t\t       + 1)));\n-}\n-\n /* Target hook for assembling integer objects.  Use mmix_print_operand\n    for WYDE and TETRA.  Use mmix_output_octa to output 8-byte\n    CONST_DOUBLEs.  */"}, {"sha": "8e8198184aa1633dfad86f434fb84445556a8cf8", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -966,16 +966,9 @@ const_section ()\t\t\t\t\t\t\\\n \n /* Node: Data Output */\n \n-#define ASM_OUTPUT_DOUBLE(STREAM, VALUE) \\\n- mmix_asm_output_double (STREAM, &VALUE)\n-\n-#define ASM_OUTPUT_FLOAT(STREAM, VALUE) \\\n- mmix_asm_output_float (STREAM, &VALUE)\n-\n #define ASM_OUTPUT_ASCII(STREAM, PTR, LEN) \\\n  mmix_asm_output_ascii (STREAM, PTR, LEN)\n \n-\n /* Node: Uninitialized Data */\n \n #define ASM_OUTPUT_ALIGNED_COMMON(ST, N, S, A) \\"}, {"sha": "261ae4611beae31bb0ba6b7c025ed1a0aa7fccf9", "filename": "gcc/config/mn10200/mn10200.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -817,23 +817,6 @@ struct cum_arg { int nbytes; };\n \n #define ASM_APP_OFF \"#NO_APP\\n\"\n \n-/* This is how to output an assembler line defining a `double' constant.\n-   It is .dfloat or .gfloat, depending.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE, VALUE)\t\t\t\\\n-do { char dstr[30];\t\t\t\t\t\\\n-     REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\\\n-     fprintf (FILE, \"\\t.double %s\\n\", dstr);\t\t\\\n-   } while (0)\n-\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-#define ASM_OUTPUT_FLOAT(FILE, VALUE)\t\t\t\\\n-do { char dstr[30];\t\t\t\t\t\\\n-     REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\\\n-     fprintf (FILE, \"\\t.float %s\\n\", dstr);\t\t\\\n-   } while (0)\n-\n /* This says how to output the assembler to define a global\n    uninitialized but not common symbol.\n    Try to use asm_output_bss to implement this macro.  */"}, {"sha": "9297b812533b1fadabc05decdaa91fa2f89f9379", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -901,23 +901,6 @@ struct cum_arg {int nbytes; };\n \n #define ASM_APP_OFF \"#NO_APP\\n\"\n \n-/* This is how to output an assembler line defining a `double' constant.\n-   It is .dfloat or .gfloat, depending.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE, VALUE)\t\t\t\\\n-do { char dstr[30];\t\t\t\t\t\\\n-     REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\\\n-     fprintf (FILE, \"\\t.double %s\\n\", dstr);\t\t\\\n-   } while (0)\n-\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-#define ASM_OUTPUT_FLOAT(FILE, VALUE)\t\t\t\\\n-do { char dstr[30];\t\t\t\t\t\\\n-     REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\\\n-     fprintf (FILE, \"\\t.float %s\\n\", dstr);\t\t\\\n-   } while (0)\n-\n /* This says how to output the assembler to define a global\n    uninitialized but not common symbol.\n    Try to use asm_output_bss to implement this macro.  */"}, {"sha": "07d447716636bb7a4a880341bd1bbaddf07b4188", "filename": "gcc/config/ns32k/encore.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fns32k%2Fencore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fns32k%2Fencore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fencore.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -39,7 +39,6 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_OUTPUT_ADDR_DIFF_ELT\n #undef ASM_OUTPUT_ALIGN\n #undef ASM_OUTPUT_ASCII\n-#undef ASM_OUTPUT_DOUBLE\n #undef ASM_OUTPUT_INTERNAL_LABEL\n #undef ASM_OUTPUT_LOCAL\n #undef CPP_PREDEFINES\n@@ -105,9 +104,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n } while (0)\n \n \n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\t\\\n- fprintf (FILE, \"\\t.long 0f%.20e\\n\", (VALUE))\n-\n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)\t\t\\\n ( fputs (\"\\t.bss \", (FILE)),\t\t\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\t\t\\"}, {"sha": "1822c189b5ed3b2c9a913e269942db0faa6c91d9", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1283,18 +1283,6 @@ while (0)\n \n /* Output of Data */\n \n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n-  fprintf (FILE, \"\\t.double 0d%.20e\\n\", (VALUE))\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)  \\\n-  fprintf (FILE, \"\\t.float 0f%.20e\\n\", (VALUE))\n-\n-/* This is how to output an assembler line defining an `int' constant.  */\n-\n /* This is how to output an assembler line defining an external/static\n    address which is not in tree format (for collect.c).  */\n "}, {"sha": "9d21eea6bc4c348e846b0c41810405608c1b6d64", "filename": "gcc/config/pa/long_double.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fpa%2Flong_double.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fpa%2Flong_double.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Flong_double.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -20,17 +20,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define LONG_DOUBLE_TYPE_SIZE 128\n \n-#undef ASM_OUTPUT_LONG_DOUBLE\n-#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE)                              \\\n-do { long value[4];                                                     \\\n-     REAL_VALUE_TO_TARGET_LONG_DOUBLE ((VALUE), value);                 \\\n-     fprintf((FILE), \"%s\\t0x%lx\\n\", \"\\t.word\", value[0]);                \\\n-     fprintf((FILE), \"%s\\t0x%lx\\n\", \"\\t.word\", value[1]);                \\\n-     fprintf((FILE), \"%s\\t0x%lx\\n\", \"\\t.word\", value[2]);                \\\n-     fprintf((FILE), \"%s\\t0x%lx\\n\", \"\\t.word\", value[3]);                \\\n-   } while (0)\n-\n-\n /* Define library calls for quad FP operations.  These are all part of the\n    PA32 and PA64 ABIs.  */\n #define ADDTF3_LIBCALL \"_U_Qfadd\""}, {"sha": "1663be76f9e28ba43ab70a65d14500b53bb9584b", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1735,22 +1735,6 @@ while (0)\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n   sprintf (LABEL, \"*%c$%s%04ld\", (PREFIX)[0], (PREFIX) + 1, (long)(NUM))\n \n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n-  do { long l[2];\t\t\t\t\t\t\t\\\n-       REAL_VALUE_TO_TARGET_DOUBLE (VALUE, l);\t\t\t\t\\\n-       fprintf (FILE, \"\\t.word 0x%lx\\n\\t.word 0x%lx\\n\", l[0], l[1]);\t\\\n-     } while (0)\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)  \\\n-  do { long l;\t\t\t\t\t\t\t\t\\\n-       REAL_VALUE_TO_TARGET_SINGLE (VALUE, l);\t\t\t\t\\\n-       fprintf (FILE, \"\\t.word 0x%lx\\n\", l);\t\t\t\t\\\n-     } while (0)\n-\n #define ASM_GLOBALIZE_LABEL(FILE, NAME)\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     /* We only handle DATA objects here, functions are globalized in\t\\"}, {"sha": "53b157180a0ff8f2f5fc81212b3b7c218e2ad4c9", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1089,16 +1089,6 @@ fprintf (FILE, \"$help$: . = .+8 ; space for tmp moves!\\n\")\t\\\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n   sprintf (LABEL, \"*%s_%d\", PREFIX, NUM)\n \n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n-  fprintf (FILE, \"\\tdouble %.20e\\n\", (VALUE))\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)  \\\n-  fprintf (FILE, \"\\tfloat %.12e\\n\", (VALUE))\n-\n #define ASM_OUTPUT_ASCII(FILE, P, SIZE)  \\\n   output_ascii (FILE, P, SIZE)\n "}, {"sha": "87606fc283c8d9dd39648b38022dfa0cb15fd9ac", "filename": "gcc/config/pj/pj.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fpj%2Fpj.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fpj%2Fpj.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fpj.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1184,22 +1184,6 @@ do { fputs (current_function_varargs || current_function_stdarg         \\\n \n /* Output various types of constants.  */\n \n-/* This is how to output an assembler line defining a `double'.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)                   \\\n-do { char dstr[30];                                     \\\n-     REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);    \\\n-     fprintf ((FILE), \"\\t.double %s\\n\", dstr);          \\\n-   } while (0)\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)                    \\\n-do { char dstr[30];                                     \\\n-     REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);    \\\n-     fprintf ((FILE), \"\\t.float %s\\n\", dstr);           \\\n-   } while (0)\n-\n /* This is how to output an assembler line\n    that says to advance the location counter by SIZE bytes.  */\n "}, {"sha": "6ded1f7d5384324485619b00452773e313b24558", "filename": "gcc/config/romp/romp.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fromp%2Fromp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fromp%2Fromp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.c?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1965,10 +1965,8 @@ output_fpops (file)\n \t\t  union real_extract u;\n \n \t\t  memcpy (&u, &CONST_DOUBLE_LOW (immed[i]), sizeof u);\n-\t\t  if (GET_MODE (immed[i]) == DFmode)\n-\t\t    ASM_OUTPUT_DOUBLE (file, u.d);\n-\t\t  else\n-\t\t    ASM_OUTPUT_FLOAT (file, u.d);\n+\t\t  assemble_real (u.d, GET_MODE (immed[i]),\n+\t\t\t\t GET_MODE_ALIGNMENT (GET_MODE (immed[i])));\n \t\t}\n \t      else\n \t\tabort ();"}, {"sha": "4f820781d08f627e73b385ad849061493eb02334", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1384,26 +1384,6 @@ struct rt_cargs {int gregs, fregs; };\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n   sprintf (LABEL, \"*%s%d\", PREFIX, NUM)\n \n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\\\n-  fprintf (FILE, \"\\t.double 0d%.20e\\n\", (VALUE))\n-\n-/* This is how to output an assembler line defining a `float' constant.\n-\n-   WARNING:  Believe it or not, the ROMP assembler has a bug in its\n-   handling of single-precision floating-point values making it impossible\n-   to output such values in the expected way.  Therefore, it must be output\n-   in hex.  THIS WILL NOT WORK IF CROSS-COMPILING FROM A MACHINE THAT DOES\n-   NOT USE IEEE-FORMAT FLOATING-POINT, but there is nothing that can be done\n-   about it short of fixing the assembler.  */\n-\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\\\n-  do { union { int i; float f; } u_i_f;\t\t\\\n-       u_i_f.f = (VALUE);\t\t\t\\\n-       fprintf (FILE, \"\\t.long 0x%x\\n\", u_i_f.i);\\\n-     } while (0)\n-\n /* This is how to output code to push a register on the stack.\n    It need not be very fast code.  */\n "}, {"sha": "72c1f7228717f85ffb8efd9f690d87f6efe9c841", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -2669,25 +2669,6 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n    the loader.  This depends on the AIX version.  */\n #define RS6000_CALL_GLUE \"cror 31,31,31\"\n \n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE, VALUE)\t\t\t\\\n-  {\t\t\t\t\t\t\t\\\n-    long t[2];\t\t\t\t\t\t\\\n-    REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), t);\t\t\\\n-    fprintf (FILE, \"\\t.long 0x%lx\\n\\t.long 0x%lx\\n\",\t\\\n-\t     t[0] & 0xffffffff, t[1] & 0xffffffff);\t\\\n-  }\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#define ASM_OUTPUT_FLOAT(FILE, VALUE)\t\t\t\\\n-  {\t\t\t\t\t\t\t\\\n-    long t;\t\t\t\t\t\t\\\n-    REAL_VALUE_TO_TARGET_SINGLE ((VALUE), t);\t\t\\\n-    fprintf (FILE, \"\\t.long 0x%lx\\n\", t & 0xffffffff);\t\\\n-  }\n-\n /* This is how to output an element of a case-vector that is relative.  */\n \n #define ASM_OUTPUT_ADDR_DIFF_ELT(FILE, BODY, VALUE, REL) \\"}, {"sha": "9c01e5815e58e0c248bb4e2e0b88b45bd5d13590", "filename": "gcc/config/s390/linux.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fs390%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fs390%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Flinux.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -93,30 +93,6 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_LABEL(FILE, NAME)     \\\n   (assemble_name (FILE, NAME), fputs (\":\\n\", FILE))\n \n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-\n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-#undef ASM_OUTPUT_DOUBLE\n-#define ASM_OUTPUT_DOUBLE(FILE, VALUE)\t\t\t\\\n-  {\t\t\t\t\t\t\t\\\n-    long t[2];\t\t\t\t\t\t\\\n-    REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), t);\t\t\\\n-    fprintf (FILE, \"\\t.long 0x%lx\\n\\t.long 0x%lx\\n\",\t\\\n-\t     t[0] & 0xffffffff, t[1] & 0xffffffff);\t\\\n-  }\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#undef ASM_OUTPUT_FLOAT\n-#define ASM_OUTPUT_FLOAT(FILE, VALUE)\t\t\t\\\n-  {\t\t\t\t\t\t\t\\\n-    long t;\t\t\t\t\t\t\\\n-    REAL_VALUE_TO_TARGET_SINGLE ((VALUE), t);\t\t\\\n-    fprintf (FILE, \"\\t.long 0x%lx\\n\", t & 0xffffffff);\t\\\n-  }\n-\n /* Store in OUTPUT a string (made with alloca) containing\n    an assembler-name for a local static variable named NAME.\n    LABELNO is an integer which is different for each call.  */"}, {"sha": "c43470317aca2dc6bae4e770be034431d9191ba0", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -2072,21 +2072,6 @@ extern char fp_reg_names[][5];\n \n /* Output various types of constants.  */\n \n-/* This is how to output an assembler line defining a `double'.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\\\n-do { char dstr[30];\t\t\t\t\t\\\n-     REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\\\n-     fprintf ((FILE), \"\\t.double %s\\n\", dstr);\t\t\\\n-   } while (0)\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\t\t\\\n-do { char dstr[30];\t\t\t\t\t\\\n-     REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\\\n-     fprintf ((FILE), \"\\t.float %s\\n\", dstr);\t\t\\\n-   } while (0)\n-\n /* Loop alignment is now done in machine_dependent_reorg, so that\n    branch shortening can know about it.  */\n "}, {"sha": "1a6547cc3b06b476cb6a4e44510ab0352407670b", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -2717,56 +2717,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n   sprintf ((LABEL), \"*%s%ld\", (PREFIX), (long)(NUM))\n \n-/* This is how to output an assembler line defining a `float' constant.\n-   We always have to use a .long pseudo-op to do this because the native\n-   SVR4 ELF assembler is buggy and it generates incorrect values when we\n-   try to use the .float pseudo-op instead.  */\n-\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE) \\\n-  {\t\t\t\t\t\t\t\t\\\n-    long t;\t\t\t\t\t\t\t\\\n-    char str[30];\t\t\t\t\t\t\\\n-    REAL_VALUE_TO_TARGET_SINGLE ((VALUE), t);\t\t\t\\\n-    REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", str);\t\t\\\n-    fprintf (FILE, \"\\t%s\\t0x%lx %s ~%s\\n\",\t\t\t\\\n-\t     integer_asm_op (4, TRUE), t,\t\t\t\\\n-\t     ASM_COMMENT_START, str);\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\\\n-\n-/* This is how to output an assembler line defining a `double' constant.\n-   We always have to use a .long pseudo-op to do this because the native\n-   SVR4 ELF assembler is buggy and it generates incorrect values when we\n-   try to use the .float pseudo-op instead.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE) \\\n-  {\t\t\t\t\t\t\t\t\\\n-    long t[2];\t\t\t\t\t\t\t\\\n-    char str[30];\t\t\t\t\t\t\\\n-    const char *long_op = integer_asm_op (4, TRUE);\t\t\\\n-    REAL_VALUE_TO_TARGET_DOUBLE ((VALUE), t);\t\t\t\\\n-    REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", str);\t\t\\\n-    fprintf (FILE, \"\\t%s\\t0x%lx %s ~%s\\n\", long_op, t[0],\t\\\n-\t     ASM_COMMENT_START, str);\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t0x%lx\\n\", long_op, t[1]);\t\t\\\n-  }\n-\n-/* This is how to output an assembler line defining a `long double'\n-   constant.  */\n-\n-#define ASM_OUTPUT_LONG_DOUBLE(FILE,VALUE) \\\n-  {\t\t\t\t\t\t\t\t\\\n-    long t[4];\t\t\t\t\t\t\t\\\n-    char str[30];\t\t\t\t\t\t\\\n-    const char *long_op = integer_asm_op (4, TRUE);\t\t\\\n-    REAL_VALUE_TO_TARGET_LONG_DOUBLE ((VALUE), t);\t\t\\\n-    REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", str);\t\t\\\n-    fprintf (FILE, \"\\t%s\\t0x%lx %s ~%s\\n\", long_op, t[0],\t\\\n-\t     ASM_COMMENT_START, str);\t\t\t\t\\\n-    fprintf (FILE, \"\\t%s\\t0x%lx\\n\", long_op, t[1]);\t\t\\\n-    fprintf (FILE, \"\\t%s\\t0x%lx\\n\", long_op, t[2]);\t\t\\\n-    fprintf (FILE, \"\\t%s\\t0x%lx\\n\", long_op, t[3]);\t\t\\\n-  }\n-\n /* This is how we hook in and defer the case-vector until the end of\n    the function.  */\n #define ASM_OUTPUT_ADDR_VEC(LAB,VEC) \\"}, {"sha": "ac000e460361f2e1e1ee5c76a646aa408af3a4a4", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -3546,31 +3546,6 @@ do {\t\t\t\t\t\t\t\\\n \f\n /* Output of Data.  */\n \n-/* A C statement to output to the stdio stream STREAM an assembler instruction\n-   to assemble a floating-point constant of `TFmode', `DFmode', `SFmode',\n-   `TQFmode', `HFmode', or `QFmode', respectively, whose value is VALUE.  VALUE\n-   will be a C expression of type `REAL_VALUE_TYPE'.  Macros such as\n-   `REAL_VALUE_TO_TARGET_DOUBLE' are useful for writing these definitions.  */\n-\n-/* This is how to output an assembler line defining a `double'.  */\n-#define ASM_OUTPUT_DOUBLE(STREAM,VALUE)                   \\\n-do { char dstr[30];                                     \\\n-     REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);    \\\n-     fprintf ((STREAM), \"\\t.double %s\\n\", dstr);          \\\n-   } while (0)\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-#define ASM_OUTPUT_FLOAT(STREAM,VALUE)                    \\\n-do { char dstr[30];                                     \\\n-     REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);    \\\n-     fprintf ((STREAM), \"\\t.float %s\\n\", dstr);           \\\n-   } while (0)\n-\n-/* #define ASM_OUTPUT_LONG_DOUBLE(STREAM, VALUE) */\n-/* #define ASM_OUTPUT_THREE_QUARTER_FLOAT(STREAM, VALUE) */\n-/* #define ASM_OUTPUT_SHORT_FLOAT(STREAM, VALUE) */\n-/* #define ASM_OUTPUT_BYTE_FLOAT(STREAM, VALUE) */\n-\n /* A C statement to output to the stdio stream STREAM an assembler instruction\n    to assemble a string constant containing the LEN bytes at PTR.  PTR will be\n    a C expression of type `char *' and LEN a C expression of type `int'."}, {"sha": "a81a6711982a6b4e5ab7a26a16ab7479e9c8dc3b", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1258,23 +1258,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\\\n     goto FAIL;\n \n-/* This is how to output an assembler line defining a `double' constant.\n-   It is .double or .float, depending.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE, VALUE)\t\t\t\\\n-do { char dstr[30];\t\t\t\t\t\\\n-     REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\\\n-     fprintf (FILE, \"\\t.double %s\\n\", dstr);\t\t\\\n-   } while (0)\n-\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-#define ASM_OUTPUT_FLOAT(FILE, VALUE)\t\t\t\\\n-do { char dstr[30];\t\t\t\t\t\\\n-     REAL_VALUE_TO_DECIMAL ((VALUE), \"%.20e\", dstr);\t\\\n-     fprintf (FILE, \"\\t.float %s\\n\", dstr);\t\t\\\n-   } while (0)\n-\n /* This says how to output the assembler to define a global\n    uninitialized but not common symbol.  */\n "}, {"sha": "8153303c115ce743c02e54e2f6e332cf30160bb2", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -1106,23 +1106,6 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n #define ASM_GENERATE_INTERNAL_LABEL(LABEL,PREFIX,NUM)\t\\\n   sprintf (LABEL, \"*%s%d\", PREFIX, NUM)\n \n-/* This is how to output an assembler line defining a `double' constant.\n-   It is .dfloat or .gfloat, depending.  */\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)  \\\n-do { char dstr[30];\t\t\t\t\t\t\t\\\n-     REAL_VALUE_TO_DECIMAL (VALUE, \"%.20e\", dstr);\t\t\t\\\n-     fprintf (FILE, \"\\t.%cfloat 0%c%s\\n\", ASM_DOUBLE_CHAR, \t\t\\\n-\t\t\t\t\t  ASM_DOUBLE_CHAR, dstr);\t\\\n-   } while (0);\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)  \\\n-  do { char dstr[30];\t\t\t\t\t\t\\\n-       REAL_VALUE_TO_DECIMAL (VALUE, \"%.20e\", dstr);\t\t\\\n-       fprintf (FILE, \"\\t.float 0f%s\\n\", dstr); } while (0);\n-\n /* This is how to output an insn to push a register on the stack.\n    It need not be very fast code.  */\n "}, {"sha": "72c09fe8734b97b8a973e741dbb18bc2a7ee278f", "filename": "gcc/config/vax/vaxv.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fvax%2Fvaxv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fvax%2Fvaxv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvaxv.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -61,10 +61,3 @@ do {\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\\\n   fputs (\"\\n\", (FILE));\t\t\t\t\t\\\n } while (0)\n-\n-#undef ASM_OUTPUT_DOUBLE\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\t\t\\\n-do { char dstr[30];\t\t\t\t\t\\\n-     REAL_VALUE_TO_DECIMAL (VALUE, \"%.20e\", dstr);\t\\\n-     fprintf (FILE, \"\\t.double 0d%s\\n\", dstr);\t\t\\\n-   } while (0)"}, {"sha": "094c9c3b9294bbd31f3e3864a1bc40dec7dff4f6", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -755,37 +755,6 @@ enum reg_class { NO_REGS, GENERAL_REGS,\n     ASM_OUTPUT_INTERNAL_LABEL (FILE, PREFIX, NUM);\t\\\n   } while (0)\n \n-/* This is how to output an assembler line defining a `double' constant.  */\n-\n-/* This is how to output an assembler line defining a `float' constant.  */\n-\n-/* AT&T's assembler can't handle floating constants written as floating.\n-   However, when cross-compiling, always use that in case format differs.  */\n-\n-#ifdef CROSS_COMPILE\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\\\n-  fprintf (FILE, \"\\t.double 0r%.20g\\n\", (VALUE))\n-\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\\\n-  fprintf (FILE, \"\\t.float 0r%.10g\\n\", (VALUE))\n-\n-#else\n-\n-#define ASM_OUTPUT_DOUBLE(FILE,VALUE)\t\\\n-do { union { double d; long l[2];} tem;\t\t\t\t\\\n-     tem.d = (VALUE);\t\t\t\t\t\t\\\n-     fprintf (FILE, \"\\t.word 0x%lx, 0x%lx\\n\", tem.l[0], tem.l[1]);\\\n-   } while (0)\n-\n-#define ASM_OUTPUT_FLOAT(FILE,VALUE)\t\\\n-do { union { float f; long l;} tem;\t\t\t\t\\\n-     tem.f = (VALUE);\t\t\t\t\t\t\\\n-     fprintf (FILE, \"\\t.word 0x%lx\\n\", tem.l);\t\t\t\\\n-   } while (0)\n-\n-#endif /* not CROSS_COMPILE */\n-\n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)  \\\n do {\t\t\t\t\t\t\t\\\n   const unsigned char *s;\t\t\t\t\\"}, {"sha": "1ad7dcb6ffb62f49c736accbee2d301da01dcf2d", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -5852,23 +5852,6 @@ when the relevant string is @code{NULL}.\n @end deftypefn\n \n @table @code\n-@findex ASM_OUTPUT_LONG_DOUBLE\n-@findex ASM_OUTPUT_DOUBLE\n-@findex ASM_OUTPUT_FLOAT\n-@item ASM_OUTPUT_LONG_DOUBLE (@var{stream}, @var{value})\n-@itemx ASM_OUTPUT_DOUBLE (@var{stream}, @var{value})\n-@itemx ASM_OUTPUT_FLOAT (@var{stream}, @var{value})\n-@itemx ASM_OUTPUT_THREE_QUARTER_FLOAT (@var{stream}, @var{value})\n-@itemx ASM_OUTPUT_SHORT_FLOAT (@var{stream}, @var{value})\n-@itemx ASM_OUTPUT_BYTE_FLOAT (@var{stream}, @var{value})\n-A C statement to output to the stdio stream @var{stream} an assembler\n-instruction to assemble a floating-point constant of @code{TFmode},\n-@code{DFmode}, @code{SFmode}, @code{TQFmode}, @code{HFmode}, or\n-@code{QFmode}, respectively, whose value is @var{value}.  @var{value}\n-will be a C expression of type @code{REAL_VALUE_TYPE}.  Macros such as\n-@code{REAL_VALUE_TO_TARGET_DOUBLE} are useful for writing these\n-definitions.\n-\n @findex OUTPUT_ADDR_CONST_EXTRA\n @item OUTPUT_ADDR_CONST_EXTRA (@var{stream}, @var{x}, @var{fail})\n A C statement to recognize @var{rtx} patterns that"}, {"sha": "3435f770c9b02a9151e22efd172d3e43dd40bcb7", "filename": "gcc/varasm.c", "status": "modified", "additions": 67, "deletions": 69, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af613ff3d8b809dc30ab61b1e6183039e36567/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=82af613ff3d8b809dc30ab61b1e6183039e36567", "patch": "@@ -140,7 +140,6 @@ static HOST_WIDE_INT const_alias_set;\n \n static const char *strip_reg_name\tPARAMS ((const char *));\n static int contains_pointers_p\t\tPARAMS ((tree));\n-static void assemble_real_1\t\tPARAMS ((PTR));\n static void decode_addr_const\t\tPARAMS ((tree, struct addr_const *));\n static int const_hash\t\t\tPARAMS ((tree));\n static int compare_constant\t\tPARAMS ((tree,\n@@ -2038,87 +2037,86 @@ assemble_integer (x, size, align, force)\n   return false;\n }\n \f\n-/* Assemble the floating-point constant D into an object of size MODE.  */\n-struct assemble_real_args\n-{\n-  REAL_VALUE_TYPE *d;\n-  enum machine_mode mode;\n-};\n-\n-static void\n-assemble_real_1 (p)\n-     PTR p;\n+void\n+assemble_real (d, mode, align)\n+     REAL_VALUE_TYPE d;\n+     enum machine_mode mode;\n+     unsigned int align;\n {\n-  struct assemble_real_args *args = (struct assemble_real_args *) p;\n-  REAL_VALUE_TYPE *d = args->d;\n-  enum machine_mode mode = args->mode;\n+  long data[4];\n+  long l;\n+  unsigned int nalign = min_align (align, 32);\n \n-  switch (mode)\n+  switch (BITS_PER_UNIT)\n     {\n-#ifdef ASM_OUTPUT_BYTE_FLOAT\n-    case QFmode:\n-      ASM_OUTPUT_BYTE_FLOAT (asm_out_file, *d);\n-      break;\n-#endif\n-#ifdef ASM_OUTPUT_SHORT_FLOAT\n-    case HFmode:\n-      ASM_OUTPUT_SHORT_FLOAT (asm_out_file, *d);\n-      break;\n-#endif\n-#ifdef ASM_OUTPUT_THREE_QUARTER_FLOAT\n-    case TQFmode:\n-      ASM_OUTPUT_THREE_QUARTER_FLOAT (asm_out_file, *d);\n-      break;\n-#endif\n-#ifdef ASM_OUTPUT_FLOAT\n-    case SFmode:\n-      ASM_OUTPUT_FLOAT (asm_out_file, *d);\n+    case 8:\n+      switch (mode)\n+\t{\n+\tcase SFmode:\n+\t  REAL_VALUE_TO_TARGET_SINGLE (d, l);\n+\t  assemble_integer (GEN_INT (l), 4, align, 1);\n+\t  break;\n+\tcase DFmode:\n+\t  REAL_VALUE_TO_TARGET_DOUBLE (d, data);\n+\t  assemble_integer (GEN_INT (data[0]), 4, align, 1);\n+\t  assemble_integer (GEN_INT (data[1]), 4, nalign, 1);\n+\t  break;\n+\tcase XFmode:\n+\t  REAL_VALUE_TO_TARGET_LONG_DOUBLE (d, data);\n+\t  assemble_integer (GEN_INT (data[0]), 4, align, 1);\n+\t  assemble_integer (GEN_INT (data[1]), 4, nalign, 1);\n+\t  assemble_integer (GEN_INT (data[2]), 4, nalign, 1);\n+\t  break;\n+\tcase TFmode:\n+\t  REAL_VALUE_TO_TARGET_LONG_DOUBLE (d, data);\n+\t  assemble_integer (GEN_INT (data[0]), 4, align, 1);\n+\t  assemble_integer (GEN_INT (data[1]), 4, nalign, 1);\n+\t  assemble_integer (GEN_INT (data[2]), 4, nalign, 1);\n+\t  assemble_integer (GEN_INT (data[3]), 4, nalign, 1);\n+\t  break;\n+\tdefault:\n+\t  abort ();\n+\t}\n       break;\n-#endif\n \n-#ifdef ASM_OUTPUT_DOUBLE\n-    case DFmode:\n-      ASM_OUTPUT_DOUBLE (asm_out_file, *d);\n+    case 16:\n+      switch (mode)\n+\t{\n+\tcase HFmode:\n+\t  REAL_VALUE_TO_TARGET_SINGLE (d, l);\n+\t  assemble_integer (GEN_INT (l), 2, align, 1);\n+\t  break;\n+\tcase TQFmode:\n+\t  REAL_VALUE_TO_TARGET_DOUBLE (d, data);\n+\t  assemble_integer (GEN_INT (data[0]), 2, align, 1);\n+\t  assemble_integer (GEN_INT (data[1]), 1, nalign, 1);\n+\t  break;\n+\tdefault:\n+\t  abort ();\n+\t}\n       break;\n-#endif\n \n-#ifdef ASM_OUTPUT_LONG_DOUBLE\n-    case XFmode:\n-    case TFmode:\n-      ASM_OUTPUT_LONG_DOUBLE (asm_out_file, *d);\n+    case 32:\n+      switch (mode)\n+\t{\n+\tcase QFmode:\n+\t  REAL_VALUE_TO_TARGET_SINGLE (d, l);\n+\t  assemble_integer (GEN_INT (l), 1, align, 1);\n+\t  break;\n+\tcase HFmode:\n+\t  REAL_VALUE_TO_TARGET_DOUBLE (d, data);\n+\t  assemble_integer (GEN_INT (data[0]), 1, align, 1);\n+\t  assemble_integer (GEN_INT (data[1]), 1, nalign, 1);\n+\t  break;\n+\tdefault:\n+\t  abort ();\n+\t}\n       break;\n-#endif\n \n     default:\n       abort ();\n     }\n }\n-\n-void\n-assemble_real (d, mode, align)\n-     REAL_VALUE_TYPE d;\n-     enum machine_mode mode;\n-     unsigned int align;\n-{\n-  struct assemble_real_args args;\n-  args.d = &d;\n-  args.mode = mode;\n-\n-  /* We cannot emit unaligned floating point constants.  This is slightly\n-     complicated in that we don't know what \"unaligned\" means exactly.  */\n-#ifdef BIGGEST_FIELD_ALIGNMENT\n-  if (align >= BIGGEST_FIELD_ALIGNMENT)\n-    ;\n-  else\n-#endif\n-  if (align < GET_MODE_ALIGNMENT (mode))\n-    abort ();\n-\n-  if (do_float_handler (assemble_real_1, (PTR) &args))\n-    return;\n-\n-  internal_error (\"floating point trap outputting a constant\");\n-}\n \f\n /* Here we combine duplicate floating constants to make\n    CONST_DOUBLE rtx's, and force those out to memory when necessary.  */"}]}