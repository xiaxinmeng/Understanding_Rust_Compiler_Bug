{"sha": "e3da301da35470986dd215f50086952bdb965c13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTNkYTMwMWRhMzU0NzA5ODZkZDIxNWY1MDA4Njk1MmJkYjk2NWMxMw==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-05-06T22:59:57Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-05-06T22:59:57Z"}, "message": "reformat a little to match GNU coding standards.\n\nFrom-SVN: r14023", "tree": {"sha": "9ed16f1465684c89cd2e6d3969753dc718b25ad2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ed16f1465684c89cd2e6d3969753dc718b25ad2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3da301da35470986dd215f50086952bdb965c13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3da301da35470986dd215f50086952bdb965c13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3da301da35470986dd215f50086952bdb965c13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3da301da35470986dd215f50086952bdb965c13/comments", "author": null, "committer": null, "parents": [{"sha": "c718078fad945f5ccfc00ed41b86a3da65a4dc55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c718078fad945f5ccfc00ed41b86a3da65a4dc55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c718078fad945f5ccfc00ed41b86a3da65a4dc55"}], "stats": {"total": 125, "additions": 61, "deletions": 64}, "files": [{"sha": "3d3e539728d71bb2e6779ec96ff770dafa78cef3", "filename": "gcc/bc-optab.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3da301da35470986dd215f50086952bdb965c13/gcc%2Fbc-optab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3da301da35470986dd215f50086952bdb965c13/gcc%2Fbc-optab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbc-optab.c?ref=e3da301da35470986dd215f50086952bdb965c13", "patch": "@@ -536,9 +536,9 @@ deduce_conversion (from, to)\n \n   obstack_init (&recipe_obstack);\n   curr.next = (struct rl *) obstack_alloc (&recipe_obstack, sizeof (struct rl));\n-  curr.next->list =\n-    (struct conversion_list *) obstack_alloc (&recipe_obstack,\n-\t\t\t\t\t      sizeof (struct conversion_list));\n+  curr.next->list\n+    = (struct conversion_list *) obstack_alloc (&recipe_obstack,\n+\t\t\t\t\t\tsizeof (struct conversion_list));\n   curr.next->list->opcode = -1;\n   curr.next->list->to = from;\n   curr.next->list->cost = 0;\n@@ -638,9 +638,9 @@ bc_init_mode_to_code_map ()\n \n   for (mode = 0; mode < MAX_MACHINE_MODE + 1; mode++)\n     {\n-      signed_mode_to_code_map[mode] = \n-\tunsigned_mode_to_code_map[mode] =\n-\t  LAST_AND_UNUSED_TYPECODE;\n+      signed_mode_to_code_map[mode]\n+\t= unsigned_mode_to_code_map[mode]\n+\t= LAST_AND_UNUSED_TYPECODE;\n     }\n \n #define DEF_MODEMAP(SYM, CODE, UCODE, CONST, LOAD, STORE) \\"}, {"sha": "2114a86e959249a33c3e969cefd240669fbe5c04", "filename": "gcc/c-aux-info.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3da301da35470986dd215f50086952bdb965c13/gcc%2Fc-aux-info.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3da301da35470986dd215f50086952bdb965c13/gcc%2Fc-aux-info.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-aux-info.c?ref=e3da301da35470986dd215f50086952bdb965c13", "patch": "@@ -178,10 +178,10 @@ gen_formal_list_for_type (fntype, style)\n         formal_list = concat (formal_list, \", \");\n \n       this_type = gen_type (\"\", TREE_VALUE (formal_type), ansi);\n-      formal_list =\n-          (strlen (this_type))\n-              ? concat (formal_list, affix_data_type (this_type))\n-              : concat (formal_list, data_type);\n+      formal_list\n+\t= ((strlen (this_type))\n+\t   ? concat (formal_list, affix_data_type (this_type))\n+\t   : concat (formal_list, data_type));\n \n       formal_type = TREE_CHAIN (formal_type);\n     }"}, {"sha": "6a753d35b6d769f3ddfea50086b230ce6143b140", "filename": "gcc/calls.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3da301da35470986dd215f50086952bdb965c13/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3da301da35470986dd215f50086952bdb965c13/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=e3da301da35470986dd215f50086952bdb965c13", "patch": "@@ -452,10 +452,10 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, struct_value_size,\n   if (stack_size != 0 && RETURN_POPS_ARGS (fndecl, funtype, stack_size) > 0)\n     {\n       if (!already_popped)\n-\tCALL_INSN_FUNCTION_USAGE (call_insn) =\n-\t   gen_rtx (EXPR_LIST, VOIDmode,\n-\t\t    gen_rtx (CLOBBER, VOIDmode, stack_pointer_rtx),\n-\t\t    CALL_INSN_FUNCTION_USAGE (call_insn));\n+\tCALL_INSN_FUNCTION_USAGE (call_insn)\n+\t  = gen_rtx (EXPR_LIST, VOIDmode,\n+\t\t     gen_rtx (CLOBBER, VOIDmode, stack_pointer_rtx),\n+\t\t     CALL_INSN_FUNCTION_USAGE (call_insn));\n       stack_size -= RETURN_POPS_ARGS (fndecl, funtype, stack_size);\n       stack_size_rtx = GEN_INT (stack_size);\n     }\n@@ -812,16 +812,16 @@ expand_call (exp, target, ignore)\n   /* Unless it's a call to a specific function that isn't alloca,\n      if it has one argument, we must assume it might be alloca.  */\n \n-  may_be_alloca =\n-    (!(fndecl != 0 && strcmp (name, \"alloca\"))\n-     && actparms != 0\n-     && TREE_CHAIN (actparms) == 0);\n+  may_be_alloca\n+    = (!(fndecl != 0 && strcmp (name, \"alloca\"))\n+       && actparms != 0\n+       && TREE_CHAIN (actparms) == 0);\n #else\n   /* We assume that alloca will always be called by name.  It\n      makes no sense to pass it as a pointer-to-function to\n      anything that does not understand its behavior.  */\n-  may_be_alloca =\n-    (name && ((IDENTIFIER_LENGTH (DECL_NAME (fndecl)) == 6\n+  may_be_alloca\n+    = (name && ((IDENTIFIER_LENGTH (DECL_NAME (fndecl)) == 6\n \t\t && name[0] == 'a'\n \t\t && ! strcmp (name, \"alloca\"))\n \t\t|| (IDENTIFIER_LENGTH (DECL_NAME (fndecl)) == 16"}, {"sha": "0cc57cd149fdefffb51983a90041789da819df92", "filename": "gcc/cccp.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3da301da35470986dd215f50086952bdb965c13/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3da301da35470986dd215f50086952bdb965c13/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=e3da301da35470986dd215f50086952bdb965c13", "patch": "@@ -1489,10 +1489,10 @@ main (argc, argv)\n \t  if (i + 1 == argc)\n \t    fatal (\"Filename missing after -pcp option\");\n \t  pcp_fname = argv[++i];\n-\t  pcp_outfile = \n-\t    ((pcp_fname[0] != '-' || pcp_fname[1] != '\\0')\n-\t     ? fopen (pcp_fname, \"w\")\n-\t     : stdout);\n+\t  pcp_outfile\n+\t    = ((pcp_fname[0] != '-' || pcp_fname[1] != '\\0')\n+\t       ? fopen (pcp_fname, \"w\")\n+\t       : stdout);\n \t  if (pcp_outfile == 0)\n \t    pfatal_with_name (pcp_fname);\n \t  no_precomp = 1;\n@@ -5546,8 +5546,8 @@ create_definition (buf, limit, op)\n       while (is_idchar[*bp]) {\n \tbp++;\n \t/* do we have a \"special\" rest-args extension here? */\n-\tif (limit - bp > REST_EXTENSION_LENGTH &&\n-\t    bcmp (rest_extension, bp, REST_EXTENSION_LENGTH) == 0) {\n+\tif (limit - bp > REST_EXTENSION_LENGTH\n+\t    && bcmp (rest_extension, bp, REST_EXTENSION_LENGTH) == 0) {\n \t  rest_args = 1;\n \t  temp->rest_args = 1;\n \t  break;\n@@ -5579,8 +5579,8 @@ create_definition (buf, limit, op)\n \tstruct arglist *otemp;\n \n \tfor (otemp = temp->next; otemp != NULL; otemp = otemp->next)\n-\t  if (temp->length == otemp->length &&\n-\t      bcmp (temp->name, otemp->name, temp->length) == 0) {\n+\t  if (temp->length == otemp->length\n+\t      && bcmp (temp->name, otemp->name, temp->length) == 0) {\n \t      error (\"duplicate argument name `%.*s' in `#define'\",\n \t\t     temp->length, temp->name);\n \t      goto nope;\n@@ -6657,8 +6657,7 @@ do_line (buf, limit, op, keyword)\n       }\n     }\n \n-    hash_bucket =\n-      &fname_table[hashf (fname, fname_length, FNAME_HASHSIZE)];\n+    hash_bucket = &fname_table[hashf (fname, fname_length, FNAME_HASHSIZE)];\n     for (hp = *hash_bucket; hp != NULL; hp = hp->next)\n       if (hp->length == fname_length &&\n \t  bcmp (hp->value.cpval, fname, fname_length) == 0) {\n@@ -6947,8 +6946,8 @@ do_elif (buf, limit, op, keyword)\n     if (if_stack->type != T_IF && if_stack->type != T_ELIF) {\n       error (\"`#elif' after `#else'\");\n       fprintf (stderr, \" (matches line %d\", if_stack->lineno);\n-      if (if_stack->fname != NULL && ip->fname != NULL &&\n-\t  strcmp (if_stack->fname, ip->nominal_fname) != 0)\n+      if (if_stack->fname != NULL && ip->fname != NULL\n+\t  && strcmp (if_stack->fname, ip->nominal_fname) != 0)\n \tfprintf (stderr, \", file %s\", if_stack->fname);\n       fprintf (stderr, \")\\n\");\n     }\n@@ -7066,9 +7065,9 @@ do_xifdef (buf, limit, op, keyword)\n \n     if (pcp_outfile) {\n       /* Output a precondition for this macro.  */\n-      if (hp &&\n-\t  (hp->type == T_CONST\n-\t   || (hp->type == T_MACRO && hp->value.defn->predefined)))\n+      if (hp\n+\t  && (hp->type == T_CONST\n+\t      || (hp->type == T_MACRO && hp->value.defn->predefined)))\n \tfprintf (pcp_outfile, \"#define %s\\n\", hp->name);\n       else {\n \tU_CHAR *cp = buf;"}, {"sha": "edf2126e5696e42cbe23d073e0b95f3ff9041b74", "filename": "gcc/combine.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3da301da35470986dd215f50086952bdb965c13/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3da301da35470986dd215f50086952bdb965c13/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=e3da301da35470986dd215f50086952bdb965c13", "patch": "@@ -7358,9 +7358,9 @@ nonzero_bits (x, mode)\n       if (GET_MODE (XEXP (x, 0)) != VOIDmode)\n \t{\n \t  inner_nz &= GET_MODE_MASK (GET_MODE (XEXP (x, 0)));\n-\t  if (inner_nz &\n-\t      (((HOST_WIDE_INT) 1\n-\t\t<< (GET_MODE_BITSIZE (GET_MODE (XEXP (x, 0))) - 1))))\n+\t  if (inner_nz\n+\t      & (((HOST_WIDE_INT) 1\n+\t\t  << (GET_MODE_BITSIZE (GET_MODE (XEXP (x, 0))) - 1))))\n \t    inner_nz |= (GET_MODE_MASK (mode)\n \t\t\t  & ~ GET_MODE_MASK (GET_MODE (XEXP (x, 0))));\n \t}"}, {"sha": "43aa8e1457a438b1281b61fe5381b95061a829ef", "filename": "gcc/cplus-dem.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3da301da35470986dd215f50086952bdb965c13/gcc%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3da301da35470986dd215f50086952bdb965c13/gcc%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcplus-dem.c?ref=e3da301da35470986dd215f50086952bdb965c13", "patch": "@@ -1362,8 +1362,8 @@ demangle_prefix (work, mangled, declp)\n \t  success = 0;\n \t}\n     }\n-  else if ((scan == *mangled) &&\n-\t   (isdigit (scan[2]) || (scan[2] == 'Q') || (scan[2] == 't')))\n+  else if ((scan == *mangled)\n+\t   && (isdigit (scan[2]) || (scan[2] == 'Q') || (scan[2] == 't')))\n     {\n       /* The ARM says nothing about the mangling of local variables.\n \t But cfront mangles local variables by prepending __<nesting_level>\n@@ -2349,15 +2349,15 @@ remember_type (work, start, len)\n       if (work -> typevec_size == 0)\n \t{\n \t  work -> typevec_size = 3;\n-\t  work -> typevec =\n-\t    (char **) xmalloc (sizeof (char *) * work -> typevec_size);\n+\t  work -> typevec\n+\t    = (char **) xmalloc (sizeof (char *) * work -> typevec_size);\n \t}\n       else\n \t{\n \t  work -> typevec_size *= 2;\n-\t  work -> typevec =\n-\t    (char **) xrealloc ((char *)work -> typevec,\n-\t\t\t\tsizeof (char *) * work -> typevec_size);\n+\t  work -> typevec\n+\t    = (char **) xrealloc ((char *)work -> typevec,\n+\t\t\t\t  sizeof (char *) * work -> typevec_size);\n \t}\n     }\n   tem = xmalloc (len + 1);"}, {"sha": "10dc2fc1d09b84a7f372f52436b89d1eb4747f21", "filename": "gcc/cpplib.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3da301da35470986dd215f50086952bdb965c13/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3da301da35470986dd215f50086952bdb965c13/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=e3da301da35470986dd215f50086952bdb965c13", "patch": "@@ -1542,8 +1542,8 @@ create_definition (buf, limit, pfile, predefinition)\n       while (is_idchar[*bp]) {\n \tbp++;\n \t/* do we have a \"special\" rest-args extension here? */\n-\tif (limit - bp > REST_EXTENSION_LENGTH &&\n-\t    strncmp (rest_extension, bp, REST_EXTENSION_LENGTH) == 0) {\n+\tif (limit - bp > REST_EXTENSION_LENGTH\n+\t    && strncmp (rest_extension, bp, REST_EXTENSION_LENGTH) == 0) {\n \t  rest_args = 1;\n \t  temp->rest_args = 1;\n \t  break;\n@@ -1570,8 +1570,8 @@ create_definition (buf, limit, pfile, predefinition)\n \tstruct arglist *otemp;\n \n \tfor (otemp = temp->next; otemp != NULL; otemp = otemp->next)\n-\t  if (temp->length == otemp->length &&\n-\t    strncmp (temp->name, otemp->name, temp->length) == 0) {\n+\t  if (temp->length == otemp->length\n+\t      && strncmp (temp->name, otemp->name, temp->length) == 0) {\n \t      U_CHAR *name;\n \n \t      name = (U_CHAR *) alloca (temp->length + 1);\n@@ -3798,11 +3798,10 @@ do_line (pfile, keyword)\n       }\n     }\n \n-    hash_bucket =\n-      &fname_table[hashf (fname, fname_length, FNAME_HASHSIZE)];\n+    hash_bucket = &fname_table[hashf (fname, fname_length, FNAME_HASHSIZE)];\n     for (hp = *hash_bucket; hp != NULL; hp = hp->next)\n-      if (hp->length == fname_length &&\n-\t  strncmp (hp->value.cpval, fname, fname_length) == 0) {\n+      if (hp->length == fname_length\n+\t  && strncmp (hp->value.cpval, fname, fname_length) == 0) {\n \tip->nominal_fname = hp->value.cpval;\n \tbreak;\n       }\n@@ -6430,10 +6429,9 @@ cpp_handle_options (pfile, argc, argv)\n #if 0\n \telse if (!strcmp (argv[i], \"-pcp\")) {\n \t  char *pcp_fname = argv[++i];\n-\t  pcp_outfile = \n-\t    ((pcp_fname[0] != '-' || pcp_fname[1] != '\\0')\n-\t     ? fopen (pcp_fname, \"w\")\n-\t     : fdopen (dup (fileno (stdout)), \"w\"));\n+\t  pcp_outfile = ((pcp_fname[0] != '-' || pcp_fname[1] != '\\0')\n+\t\t\t ? fopen (pcp_fname, \"w\")\n+\t\t\t : fdopen (dup (fileno (stdout)), \"w\"));\n \t  if (pcp_outfile == 0)\n \t    cpp_pfatal_with_name (pfile, pcp_fname);\n \t  no_precomp = 1;"}, {"sha": "39d493244b7774474ee396690adeb16fb9bfd9f8", "filename": "gcc/dbxout.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3da301da35470986dd215f50086952bdb965c13/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3da301da35470986dd215f50086952bdb965c13/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=e3da301da35470986dd215f50086952bdb965c13", "patch": "@@ -1013,19 +1013,19 @@ dbxout_type (type, full, show_arg_types)\n \n       if (next_type_number == typevec_len)\n \t{\n-\t  typevec =\n-\t    (struct typeinfo *) xrealloc (typevec,\n-\t\t\t\t\t  typevec_len * 2 * sizeof typevec[0]);\n+\t  typevec\n+\t    = (struct typeinfo *) xrealloc (typevec,\n+\t\t\t\t\t    typevec_len * 2 * sizeof typevec[0]);\n \t  bzero ((char *) (typevec + typevec_len),\n \t\t typevec_len * sizeof typevec[0]);\n \t  typevec_len *= 2;\n \t}\n \n #ifdef DBX_USE_BINCL\n-      typevec[TYPE_SYMTAB_ADDRESS (type)].file_number =\n-\tcurrent_file->file_number;\n-      typevec[TYPE_SYMTAB_ADDRESS (type)].type_number =\n-\tcurrent_file->next_type_number++;\n+      typevec[TYPE_SYMTAB_ADDRESS (type)].file_number\n+\t= current_file->file_number;\n+      typevec[TYPE_SYMTAB_ADDRESS (type)].type_number\n+\t= current_file->next_type_number++;\n #endif\n     }\n "}]}