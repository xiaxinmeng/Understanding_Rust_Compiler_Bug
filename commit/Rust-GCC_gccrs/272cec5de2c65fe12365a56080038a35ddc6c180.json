{"sha": "272cec5de2c65fe12365a56080038a35ddc6c180", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcyY2VjNWRlMmM2NWZlMTIzNjVhNTYwODAwMzhhMzVkZGM2YzE4MA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-12-03T10:28:30Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-12-03T10:28:30Z"}, "message": "trans-array.c (gfc_could_be_alias): Handle BT_CLASS as well as BT_DERIVED.\n\n2010-12-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\t* trans-array.c (gfc_could_be_alias):  Handle BT_CLASS\n\tas well as BT_DERIVED.\n\t(gfc_array_allocate):  Likewise.\n\t(gfc_conv_array_parameter):  Likewise.\n\t(structure_alloc_comps):  Likewise.\n\t(gfc_is_reallocatable_lhs):  Likewise.\n\t(gfc_trans_deferred_array):  Likewise.\n\nFrom-SVN: r167412", "tree": {"sha": "5c37d2c869c5117896074d05c89924c3befa14fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c37d2c869c5117896074d05c89924c3befa14fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/272cec5de2c65fe12365a56080038a35ddc6c180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/272cec5de2c65fe12365a56080038a35ddc6c180", "html_url": "https://github.com/Rust-GCC/gccrs/commit/272cec5de2c65fe12365a56080038a35ddc6c180", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/272cec5de2c65fe12365a56080038a35ddc6c180/comments", "author": null, "committer": null, "parents": [{"sha": "fba4cb03e98178b65d41dcce32a1233358596132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba4cb03e98178b65d41dcce32a1233358596132", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fba4cb03e98178b65d41dcce32a1233358596132"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "ae2f033ae6df7955027e1f251e8670ec9bc316f5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272cec5de2c65fe12365a56080038a35ddc6c180/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272cec5de2c65fe12365a56080038a35ddc6c180/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=272cec5de2c65fe12365a56080038a35ddc6c180", "patch": "@@ -1,3 +1,13 @@\n+2010-12-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* trans-array.c (gfc_could_be_alias):  Handle BT_CLASS\n+\tas well as BT_DERIVED.\n+\t(gfc_array_allocate):  Likewise.\n+\t(gfc_conv_array_parameter):  Likewise.\n+\t(structure_alloc_comps):  Likewise.\n+\t(gfc_is_reallocatable_lhs):  Likewise.\n+\t(gfc_trans_deferred_array):  Likewise.\n+\n 2010-12-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/46753"}, {"sha": "4c0bdfcd184a8b8ac9b6f75eabed9dd31e72aad9", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/272cec5de2c65fe12365a56080038a35ddc6c180/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/272cec5de2c65fe12365a56080038a35ddc6c180/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=272cec5de2c65fe12365a56080038a35ddc6c180", "patch": "@@ -3467,8 +3467,8 @@ gfc_could_be_alias (gfc_ss * lss, gfc_ss * rss)\n   if (gfc_symbols_could_alias (lsym, rsym))\n     return 1;\n \n-  if (rsym->ts.type != BT_DERIVED\n-      && lsym->ts.type != BT_DERIVED)\n+  if (rsym->ts.type != BT_DERIVED && rsym->ts.type != BT_CLASS\n+      && lsym->ts.type != BT_DERIVED && lsym->ts.type != BT_CLASS)\n     return 0;\n \n   /* For derived types we must check all the component types.  We can ignore\n@@ -4351,7 +4351,7 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree pstat)\n \n   gfc_conv_descriptor_offset_set (&se->pre, se->expr, offset);\n \n-  if (expr->ts.type == BT_DERIVED\n+  if ((expr->ts.type == BT_DERIVED || expr->ts.type == BT_CLASS)\n \t&& expr->ts.u.derived->attr.alloc_comp)\n     {\n       tmp = gfc_nullify_alloc_comp (expr->ts.u.derived, se->expr,\n@@ -5898,7 +5898,7 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, bool g77,\n       if (sym->ts.type == BT_CHARACTER)\n \tse->string_length = sym->ts.u.cl->backend_decl;\n \n-      if (sym->ts.type == BT_DERIVED)\n+      if (sym->ts.type == BT_DERIVED || sym->ts.type == BT_CLASS)\n \t{\n \t  gfc_conv_expr_descriptor (se, expr, ss);\n \t  se->expr = gfc_conv_array_data (se->expr);\n@@ -6004,7 +6004,7 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, bool g77,\n \n   /* Deallocate the allocatable components of structures that are\n      not variable.  */\n-  if (expr->ts.type == BT_DERIVED\n+  if ((expr->ts.type == BT_DERIVED || expr->ts.type == BT_CLASS)\n \t&& expr->ts.u.derived->attr.alloc_comp\n \t&& expr->expr_type != EXPR_VARIABLE)\n     {\n@@ -6421,7 +6421,8 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n      act on a chain of components.  */\n   for (c = der_type->components; c; c = c->next)\n     {\n-      bool cmp_has_alloc_comps = (c->ts.type == BT_DERIVED)\n+      bool cmp_has_alloc_comps = (c->ts.type == BT_DERIVED\n+\t\t\t\t  || c->ts.type == BT_CLASS)\n \t\t\t\t    && c->ts.u.derived->attr.alloc_comp;\n       cdecl = c->backend_decl;\n       ctype = TREE_TYPE (cdecl);\n@@ -6684,7 +6685,8 @@ gfc_is_reallocatable_lhs (gfc_expr *expr)\n     return true;\n \n   /* All that can be left are allocatable components.  */\n-  if (expr->symtree->n.sym->ts.type != BT_DERIVED\n+  if ((expr->symtree->n.sym->ts.type != BT_DERIVED\n+       && expr->symtree->n.sym->ts.type != BT_CLASS)\n \t|| !expr->symtree->n.sym->ts.u.derived->attr.alloc_comp)\n     return false;\n \n@@ -7067,7 +7069,8 @@ gfc_trans_deferred_array (gfc_symbol * sym, gfc_wrapped_block * block)\n   int rank;\n   bool sym_has_alloc_comp;\n \n-  sym_has_alloc_comp = (sym->ts.type == BT_DERIVED)\n+  sym_has_alloc_comp = (sym->ts.type == BT_DERIVED\n+\t\t\t|| sym->ts.type == BT_CLASS)\n \t\t\t  && sym->ts.u.derived->attr.alloc_comp;\n \n   /* Make sure the frontend gets these right.  */"}]}