{"sha": "538dbb562fc7b3d8792477176eba628498f2ef18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM4ZGJiNTYyZmM3YjNkODc5MjQ3NzE3NmViYTYyODQ5OGYyZWYxOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-02T08:08:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-02T08:08:18Z"}, "message": "[multiple changes]\n\n2012-10-02  Robert Dewar  <dewar@adacore.com>\n\n\t* usage.adb, gnat_rm.texi, vms_data.ads: Add entry for\n\t/OVERFLOW_CHECKS=?? generating -gnato?? for control\n\tof extended overflow checking.\n\t* ug_words: Add entry for -gnato?? for /OVERFLOW_CHECKS=??\n\t* gnat_ugn.texi: Add documentation for -gnato?? for control of overflow\n\tchecking mode.\n\n2012-10-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Analyze_Quantified_Expression): If the iterator in\n\ta quantified expression is statically known to be null (e.g. a\n\tarray with an empty index type) emit a warning.\n\nFrom-SVN: r191957", "tree": {"sha": "ba46b8c2fc01c16e5e53ae1f6178036853037c3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba46b8c2fc01c16e5e53ae1f6178036853037c3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/538dbb562fc7b3d8792477176eba628498f2ef18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/538dbb562fc7b3d8792477176eba628498f2ef18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/538dbb562fc7b3d8792477176eba628498f2ef18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/538dbb562fc7b3d8792477176eba628498f2ef18/comments", "author": null, "committer": null, "parents": [{"sha": "c7e152b57d8f22c33077340f5684d8098062bdff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7e152b57d8f22c33077340f5684d8098062bdff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7e152b57d8f22c33077340f5684d8098062bdff"}], "stats": {"total": 163, "additions": 156, "deletions": 7}, "files": [{"sha": "99ee5a2b27ead144899d43131e3e041ba9862191", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538dbb562fc7b3d8792477176eba628498f2ef18/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538dbb562fc7b3d8792477176eba628498f2ef18/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=538dbb562fc7b3d8792477176eba628498f2ef18", "patch": "@@ -1,3 +1,18 @@\n+2012-10-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* usage.adb, gnat_rm.texi, vms_data.ads: Add entry for\n+\t/OVERFLOW_CHECKS=?? generating -gnato?? for control\n+\tof extended overflow checking.\n+\t* ug_words: Add entry for -gnato?? for /OVERFLOW_CHECKS=??\n+\t* gnat_ugn.texi: Add documentation for -gnato?? for control of overflow\n+\tchecking mode.\n+\n+2012-10-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Quantified_Expression): If the iterator in\n+\ta quantified expression is statically known to be null (e.g. a\n+\tarray with an empty index type) emit a warning.\n+\n 2012-10-02  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_dim.adb: Minor code reorganization."}, {"sha": "9a79713f5260260463e4ca809985977fa2a4fc26", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538dbb562fc7b3d8792477176eba628498f2ef18/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538dbb562fc7b3d8792477176eba628498f2ef18/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=538dbb562fc7b3d8792477176eba628498f2ef18", "patch": "@@ -179,6 +179,7 @@ Implementation Defined Pragmas\n * Pragma Obsolescent::\n * Pragma Optimize_Alignment::\n * Pragma Ordered::\n+* Pragma Overflow_Checks::\n * Pragma Passive::\n * Pragma Persistent_BSS::\n * Pragma Polling::\n@@ -916,6 +917,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Obsolescent::\n * Pragma Optimize_Alignment::\n * Pragma Ordered::\n+* Pragma Overflow_Checks::\n * Pragma Passive::\n * Pragma Persistent_BSS::\n * Pragma Polling::\n@@ -4127,6 +4129,53 @@ as unordered, and will generate warnings for inappropriate uses.\n For additional information please refer to the description of the\n @option{-gnatw.u} switch in the @value{EDITION} User's Guide.\n \n+@node Pragma Overflow_Checks\n+@unnumberedsec Pragma Overflow_Checks\n+@findex Overflow checks\n+@findex pragma @code{Overflow_Checks}\n+@noindent\n+Syntax:\n+\n+@smallexample @c ada\n+pragma Overflow_Checks\n+ (  [General    =>] MODE\n+  [,[Assertions =>] MODE]);\n+\n+MODE ::= SUPPRESSED | CHECKED | MINIMIZED | ELIMINATED\n+@end smallexample\n+\n+@noindent\n+This pragma sets the current overflow mode to the given mode. For details\n+of the meaning of these modes, see section on overflow checking in the\n+GNAT users guide. If only the @code{General} parameter is present, the\n+given mode applies to all expressions. If both parameters are present,\n+the @code{General} mode applies to expressions outside assertions, and\n+the @code{Eliminated} mode applies to expressions within assertions.\n+\n+The case of the @code{MODE} parameter is ignored,\n+so @code{MINIMIZED}, @code{Minimized} and\n+@code{minimized} all have the same effect.\n+\n+The @code{Overflow_Checks} pragma has the same scoping and placement\n+rules as pragma @code{Suppress}, so it can occur either as a\n+configuration pragma, specifying a default for the whole\n+program, or in a declarative scope, where it applies to the\n+remaining declarations and statements in that scope.\n+\n+The pragma @code{Suppress (Overflow_Check)} sets mode\n+\n+   General => Suppressed\n+\n+suppressing all overflow checking within and outside\n+assertions.\n+\n+The pragam @code{Unsuppress (Overflow_Check)} sets mode\n+\n+   General => Checked\n+\n+which causes overflow checking of all intermediate overflows.\n+This applies both inside and outside assertions.\n+\n @node Pragma Passive\n @unnumberedsec Pragma Passive\n @findex Passive"}, {"sha": "a35d91e900b9b0e538916d60019fe800a07fa05a", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538dbb562fc7b3d8792477176eba628498f2ef18/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538dbb562fc7b3d8792477176eba628498f2ef18/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=538dbb562fc7b3d8792477176eba628498f2ef18", "patch": "@@ -4325,11 +4325,28 @@ of GNAT other than the JGNAT, .NET or GNAAMP versions), then the use of\n Historically front end inlining was more extensive than the gcc back end\n inlining, but that is no longer the case.\n \n+@item -gnato??\n+@cindex @option{-gnato??} (@command{gcc})\n+Set default overflow cheecking mode. If ?? is a single digit, in the\n+range 0-3, it sets the overflow checking mode for all expressions,\n+including those outside and within assertions. The meaning of nnn is:\n+\n+  0   suppress overflow checks (SUPPRESSED)\n+  1   all intermediate overflows checked (CHECKED)\n+  2   minimize intermediate overflows (MINIMIZED)\n+  3   eliminate intermediate overflows (ELIMINATED)\n+\n+Otherwise ?? can be two digits, both 0-3, and in this case the first\n+digit sets the mode (using the above code) for expressions outside an\n+assertion, and the second digit sets the mode for expressions within\n+an assertion.\n+\n @item -gnato\n @cindex @option{-gnato} (@command{gcc})\n Enable numeric overflow checking (which is not normally enabled by\n default). Note that division by zero is a separate check that is not\n controlled by this switch (division by zero checking is on by default).\n+The checking mode is set to CHECKED (equivalent to @option{-gnato11}).\n \n @item -gnatp\n @cindex @option{-gnatp} (@command{gcc})"}, {"sha": "93f6d3684464c7b48ccfeb20c235e6c5db71f034", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538dbb562fc7b3d8792477176eba628498f2ef18/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538dbb562fc7b3d8792477176eba628498f2ef18/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=538dbb562fc7b3d8792477176eba628498f2ef18", "patch": "@@ -3404,6 +3404,38 @@ package body Sem_Ch4 is\n    procedure Analyze_Quantified_Expression (N : Node_Id) is\n       QE_Scop : Entity_Id;\n \n+      function  Is_Empty_Range (Typ : Entity_Id) return Boolean;\n+      --  If the iterator is part of a quantified expression, and the range is\n+      --  known to be statically empty, emit a warning and replace expression\n+      --  with its static value.\n+\n+      function  Is_Empty_Range (Typ : Entity_Id) return Boolean is\n+         Loc     : constant Source_Ptr := Sloc (N);\n+\n+      begin\n+         if Is_Array_Type (Typ)\n+           and then Size_Known_At_Compile_Time (Typ)\n+           and then RM_Size (Typ) = 0\n+         then\n+            if All_Present (N) then\n+               Error_Msg_N (\"?universal quantified expression \"\n+               & \"over a null range has value True\", N);\n+               Rewrite (N, New_Occurrence_Of (Standard_True, Loc));\n+\n+            else\n+               Error_Msg_N (\"?existential quantified expression \"\n+               & \"over a null range has value False\", N);\n+               Rewrite (N, New_Occurrence_Of (Standard_False, Loc));\n+            end if;\n+\n+            Analyze (N);\n+            return True;\n+\n+         else\n+            return False;\n+         end if;\n+      end Is_Empty_Range;\n+\n    begin\n       Check_SPARK_Restriction (\"quantified expression is not allowed\", N);\n \n@@ -3425,6 +3457,13 @@ package body Sem_Ch4 is\n \n       if Present (Iterator_Specification (N)) then\n          Preanalyze (Iterator_Specification (N));\n+\n+         if Is_Entity_Name (Name (Iterator_Specification (N)))\n+           and then Is_Empty_Range (Etype (Name (Iterator_Specification (N))))\n+         then\n+            return;\n+         end if;\n+\n       else\n          Preanalyze (Loop_Parameter_Specification (N));\n       end if;"}, {"sha": "a3ca962922aed1b338570fb294e12127882b5b86", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538dbb562fc7b3d8792477176eba628498f2ef18/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538dbb562fc7b3d8792477176eba628498f2ef18/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=538dbb562fc7b3d8792477176eba628498f2ef18", "patch": "@@ -88,6 +88,7 @@ gcc -c          ^ GNAT COMPILE\n -gnatn2         ^ /INLINE=PRAGMA_LEVEL_2\n -gnatN          ^ /INLINE=FULL\n -gnato          ^ /CHECKS=OVERFLOW\n+-gnato??        ^ /OVERFLOW_CHECKS=??\n -gnatp          ^ /CHECKS=SUPPRESS_ALL\n -gnat-p         ^ /CHECKS=UNSUPPRESS_ALL\n -gnatP          ^ /POLLING"}, {"sha": "2f858070340918dc75a1cddf737ccf8b62124d63", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538dbb562fc7b3d8792477176eba628498f2ef18/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538dbb562fc7b3d8792477176eba628498f2ef18/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=538dbb562fc7b3d8792477176eba628498f2ef18", "patch": "@@ -319,7 +319,15 @@ begin\n    --  Line for -gnato switch\n \n    Write_Switch_Char (\"o\");\n-   Write_Line (\"Enable overflow checking (off by default)\");\n+   Write_Line (\"Enable overflow checking mode to CHECKED (off by default)\");\n+\n+   --  Line for -gnato? switch\n+\n+   Write_Switch_Char (\"o?\");\n+   Write_Line (\"Set SUPPRESSED/CHECKED/MINIMIZED/ELIMINATED (?=0/1/2/3) mode\");\n+\n+   Write_Switch_Char (\"o??\");\n+   Write_Line (\"Set mode for general/assertion expressions separately\");\n \n    --  Line for -gnatO switch\n "}, {"sha": "c33bb8f71f601479775891fad4bd1517f32bcf88", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/538dbb562fc7b3d8792477176eba628498f2ef18/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/538dbb562fc7b3d8792477176eba628498f2ef18/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=538dbb562fc7b3d8792477176eba628498f2ef18", "patch": "@@ -1347,12 +1347,13 @@ package VMS_Data is\n    --                      if the /CHECKS qualifier is not present on the\n    --                      command line. Same as /NOCHECKS.\n    --\n-   --     OVERFLOW        Enables overflow checking for integer operations and\n-   --                     checks for access before elaboration on subprogram\n-   --                     calls. This causes GNAT to generate slower and larger\n-   --                     executable programs by adding code to check for both\n-   --                     overflow and division by zero (resulting in raising\n-   --                     \"Constraint_Error\" as required by Ada semantics).\n+   --     OVERFLOW        Enables overflow checking in CHECKED mode for integer\n+   --                     operations and checks for access before elaboration\n+   --                     on subprogram calls. This causes GNAT to generate\n+   --                     slower and larger executable programs by adding code\n+   --                     to check for both overflow and division by zero\n+   --                     (resulting in raising \"Constraint_Error\" as required\n+   --                     by Ada semantics).\n    --                     Similarly, GNAT does not generate elaboration check\n    --                     by default, and you must specify this keyword to\n    --                     enable them.\n@@ -2108,6 +2109,24 @@ package VMS_Data is\n    --   file xyz.adb is compiled with -gnatl=.lst, then the output is written\n    --   to file xyz.adb_lst.\n \n+   S_GCC_Overflo : aliased constant S := \"/OVERFLOW_CHECKS=#\"              &\n+                                             \"-gnato#\";\n+   --        /OVERFLOW_CHECKS=nn\n+   --\n+   --   Set default overflow cheecking mode. If nn is a single digit, in the\n+   --   range 0-3, it sets the overflow checking mode for all expressions,\n+   --   including those outside and within assertions. The meaning of nnn is:\n+   --\n+   --     0   suppress overflow checks (SUPPRESSED)\n+   --     1   all intermediate overflows checked (CHECKED)\n+   --     2   minimize intermediate overflows (MINIMIZED)\n+   --     3   eliminate intermediate overflows (ELIMINATED)\n+   --\n+   --   Otherwise nn can be two digits, both 0-3, and in this case the first\n+   --   digit sets the mode (using the above code) for expressions outside an\n+   --   assertion, and the second digit sets the mode for expressions within\n+   --   an assertion.\n+\n    S_GCC_Pointer : aliased constant S := \"/POINTER_SIZE=\"                  &\n                                             \"64 \"                          &\n                                                \"-mmalloc64 \"               &\n@@ -3622,6 +3641,7 @@ package VMS_Data is\n                      S_GCC_NoWarnP 'Access,\n                      S_GCC_Opt     'Access,\n                      S_GCC_OptX    'Access,\n+                     S_GCC_Overflo 'Access,\n                      S_GCC_Pointer 'Access,\n                      S_GCC_Polling 'Access,\n                      S_GCC_Project 'Access,"}]}