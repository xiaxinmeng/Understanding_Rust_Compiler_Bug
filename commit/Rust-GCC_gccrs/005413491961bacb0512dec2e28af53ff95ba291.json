{"sha": "005413491961bacb0512dec2e28af53ff95ba291", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA1NDEzNDkxOTYxYmFjYjA1MTJkZWMyZTI4YWY1M2ZmOTViYTI5MQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-06-14T16:33:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-06-14T16:33:53Z"}, "message": "user.cfg.in (INPUT): Add C++14 headers.\n\n\t* doc/doxygen/user.cfg.in (INPUT): Add C++14 headers.\n\t* include/bits/random.h (subtract_with_carry_engine): Fix Doxygen\n\twarnings.\n\t* include/bits/shared_ptr.h (shared_ptr): Likewise.\n\t* include/bits/unordered_map.h (unordered_map, unordered_multimap):\n\tLikewise.\n\t* include/bits/unordered_set.h (unordered_set, unordered_multiset):\n\tLikewise.\n\t* include/parallel/list_partition.h (__parallel::list_partition):\n\tLikewise.\n\t* include/std/iomanip (quoted): Likewise.\n\t* include/tr2/dynamic_bitset (dynamic_bitset): Likewise.\n\nFrom-SVN: r211670", "tree": {"sha": "8d5340215e09d2307660fb1671e964da9d21cfe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d5340215e09d2307660fb1671e964da9d21cfe6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/005413491961bacb0512dec2e28af53ff95ba291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/005413491961bacb0512dec2e28af53ff95ba291", "html_url": "https://github.com/Rust-GCC/gccrs/commit/005413491961bacb0512dec2e28af53ff95ba291", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/005413491961bacb0512dec2e28af53ff95ba291/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8043fa674add9511ee418536ad48161bd206372", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8043fa674add9511ee418536ad48161bd206372", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8043fa674add9511ee418536ad48161bd206372"}], "stats": {"total": 96, "additions": 55, "deletions": 41}, "files": [{"sha": "e1a153cdeeb4a100d165e0534fe93dfdcad2ac30", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005413491961bacb0512dec2e28af53ff95ba291/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005413491961bacb0512dec2e28af53ff95ba291/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=005413491961bacb0512dec2e28af53ff95ba291", "patch": "@@ -18,6 +18,19 @@\n \t* testsuite/experimental/any/modifiers/1.cc: New.\n \t* testsuite/experimental/any/observers/type.cc: New.\n \n+\t* doc/doxygen/user.cfg.in (INPUT): Add C++14 headers.\n+\t* include/bits/random.h (subtract_with_carry_engine): Fix Doxygen\n+\twarnings.\n+\t* include/bits/shared_ptr.h (shared_ptr): Likewise.\n+\t* include/bits/unordered_map.h (unordered_map, unordered_multimap):\n+\tLikewise.\n+\t* include/bits/unordered_set.h (unordered_set, unordered_multiset):\n+\tLikewise.\n+\t* include/parallel/list_partition.h (__parallel::list_partition):\n+\tLikewise.\n+\t* include/std/iomanip (quoted): Likewise.\n+\t* include/tr2/dynamic_bitset (dynamic_bitset): Likewise.\n+\n 2014-06-11  Maciej W. Rozycki  <macro@codesourcery.com>\n \n \t* testsuite/27_io/basic_ostream/inserters_arithmetic/wchar_t/4402.cc"}, {"sha": "7ec91a16fdb7c54dec390cbdac45ed6ad3ff855e", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005413491961bacb0512dec2e28af53ff95ba291/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005413491961bacb0512dec2e28af53ff95ba291/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=005413491961bacb0512dec2e28af53ff95ba291", "patch": "@@ -783,6 +783,7 @@ INPUT                  = @srcdir@/doc/doxygen/doxygroups.cc \\\n                          include/regex \\\n                          include/scoped_allocator \\\n                          include/set \\\n+                         include/shared_mutex \\\n                          include/sstream \\\n                          include/stack \\\n                          include/stdexcept \\\n@@ -885,6 +886,9 @@ INPUT                  = @srcdir@/doc/doxygen/doxygroups.cc \\\n                          include/tr2/ratio \\\n                          include/tr2/type_traits \\\n                          include/decimal/decimal \\\n+                         include/experimental/any \\\n+                         include/experimental/optional \\\n+                         include/experimental/string_view \\\n                          include/ext \\\n                          include/ext/pb_ds \\\n                          include/ext/pb_ds/detail \\"}, {"sha": "a466a45ba4d227d11558e47de75a90f1512d107e", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005413491961bacb0512dec2e28af53ff95ba291/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005413491961bacb0512dec2e28af53ff95ba291/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=005413491961bacb0512dec2e28af53ff95ba291", "patch": "@@ -659,10 +659,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *\n    * The size of the state is @f$r@f$\n    * and the maximum period of the generator is @f$(m^r - m^s - 1)@f$.\n-   *\n-   * @var _M_x     The state of the generator.  This is a ring buffer.\n-   * @var _M_carry The carry.\n-   * @var _M_p     Current index of x(i - r).\n    */\n   template<typename _UIntType, size_t __w, size_t __s, size_t __r>\n     class subtract_with_carry_engine\n@@ -794,9 +790,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UIntType1, size_t __w1, size_t __s1, size_t __r1,\n \t       typename _CharT, typename _Traits>\n \tfriend std::basic_ostream<_CharT, _Traits>&\n-\toperator<<(std::basic_ostream<_CharT, _Traits>&,\n+\toperator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t\t   const std::subtract_with_carry_engine<_UIntType1, __w1,\n-\t\t   __s1, __r1>&);\n+\t\t   __s1, __r1>& __x);\n \n       /**\n        * @brief Extracts the current state of a % subtract_with_carry_engine\n@@ -813,14 +809,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       template<typename _UIntType1, size_t __w1, size_t __s1, size_t __r1,\n \t       typename _CharT, typename _Traits>\n \tfriend std::basic_istream<_CharT, _Traits>&\n-\toperator>>(std::basic_istream<_CharT, _Traits>&,\n+\toperator>>(std::basic_istream<_CharT, _Traits>& __is,\n \t\t   std::subtract_with_carry_engine<_UIntType1, __w1,\n-\t\t   __s1, __r1>&);\n+\t\t   __s1, __r1>& __x);\n \n     private:\n+      /// The state of the generator.  This is a ring buffer.\n       _UIntType  _M_x[long_lag];\n-      _UIntType  _M_carry;\n-      size_t     _M_p;\n+      _UIntType  _M_carry;\t\t///< The carry\n+      size_t     _M_p;\t\t\t///< Current index of x(i - r).\n     };\n \n   /**"}, {"sha": "f611e53c179646d44d5a26232796bf2fb9453a63", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005413491961bacb0512dec2e28af53ff95ba291/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005413491961bacb0512dec2e28af53ff95ba291/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=005413491961bacb0512dec2e28af53ff95ba291", "patch": "@@ -259,7 +259,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       /**\n        *  @brief  Construct an empty %shared_ptr.\n-       *  @param  __p  A null pointer constant.\n        *  @post   use_count() == 0 && get() == nullptr\n        */\n       constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }"}, {"sha": "914d26a0c790321d91538fb8c80a2ebfb7777a79", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005413491961bacb0512dec2e28af53ff95ba291/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005413491961bacb0512dec2e28af53ff95ba291/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=005413491961bacb0512dec2e28af53ff95ba291", "patch": "@@ -157,12 +157,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  distance(__first,__last)).\n        */\n       template<typename _InputIterator>\n-\tunordered_map(_InputIterator __f, _InputIterator __l,\n+\tunordered_map(_InputIterator __first, _InputIterator __last,\n \t\t      size_type __n = 0,\n \t\t      const hasher& __hf = hasher(),\n \t\t      const key_equal& __eql = key_equal(),\n \t\t      const allocator_type& __a = allocator_type())\n-\t: _M_h(__f, __l, __n, __hf, __eql, __a)\n+\t: _M_h(__first, __last, __n, __hf, __eql, __a)\n \t{ }\n \n       /// Copy constructor.\n@@ -479,8 +479,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // LWG 2059.\n       iterator\n-      erase(iterator __it)\n-      { return _M_h.erase(__it); }\n+      erase(iterator __position)\n+      { return _M_h.erase(__position); }\n       //@}\n \n       /**\n@@ -857,24 +857,24 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       /**\n        *  @brief  Builds an %unordered_multimap from a range.\n-       *  @param  __first  An input iterator.\n+       *  @param  __first An input iterator.\n        *  @param  __last  An input iterator.\n-       *  @param __n  Minimal initial number of buckets.\n-       *  @param __hf  A hash functor.\n-       *  @param __eql  A key equality functor.\n-       *  @param __a  An allocator object.\n+       *  @param __n      Minimal initial number of buckets.\n+       *  @param __hf     A hash functor.\n+       *  @param __eql    A key equality functor.\n+       *  @param __a      An allocator object.\n        *\n        *  Create an %unordered_multimap consisting of copies of the elements\n        *  from [__first,__last).  This is linear in N (where N is\n        *  distance(__first,__last)).\n        */\n       template<typename _InputIterator>\n-\tunordered_multimap(_InputIterator __f, _InputIterator __l,\n+\tunordered_multimap(_InputIterator __first, _InputIterator __last,\n \t\t\t   size_type __n = 0,\n \t\t\t   const hasher& __hf = hasher(),\n \t\t\t   const key_equal& __eql = key_equal(),\n \t\t\t   const allocator_type& __a = allocator_type())\n-\t: _M_h(__f, __l, __n, __hf, __eql, __a)\n+\t: _M_h(__first, __last, __n, __hf, __eql, __a)\n \t{ }\n \n       /// Copy constructor.\n@@ -1174,8 +1174,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // LWG 2059.\n       iterator\n-      erase(iterator __it)\n-      { return _M_h.erase(__it); }\n+      erase(iterator __position)\n+      { return _M_h.erase(__position); }\n       //@}\n \n       /**"}, {"sha": "e37bcda9bd4de4dbf9f97f4205d8906f266caa53", "filename": "libstdc++-v3/include/bits/unordered_set.h", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005413491961bacb0512dec2e28af53ff95ba291/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005413491961bacb0512dec2e28af53ff95ba291/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_set.h?ref=005413491961bacb0512dec2e28af53ff95ba291", "patch": "@@ -150,12 +150,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n        *  distance(__first,__last)).\n        */\n       template<typename _InputIterator>\n-\tunordered_set(_InputIterator __f, _InputIterator __l,\n+\tunordered_set(_InputIterator __first, _InputIterator __last,\n \t\t      size_type __n = 0,\n \t\t      const hasher& __hf = hasher(),\n \t\t      const key_equal& __eql = key_equal(),\n \t\t      const allocator_type& __a = allocator_type())\n-\t: _M_h(__f, __l, __n, __hf, __eql, __a)\n+\t: _M_h(__first, __last, __n, __hf, __eql, __a)\n \t{ }\n \n       /// Copy constructor.\n@@ -452,8 +452,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // LWG 2059.\n       iterator\n-      erase(iterator __it)\n-      { return _M_h.erase(__it); }\n+      erase(iterator __position)\n+      { return _M_h.erase(__position); }\n       //@}\n \n       /**\n@@ -774,23 +774,23 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n       /**\n        *  @brief  Builds an %unordered_multiset from a range.\n        *  @param  __first  An input iterator.\n-       *  @param  __last  An input iterator.\n-       *  @param __n  Minimal initial number of buckets.\n-       *  @param __hf  A hash functor.\n-       *  @param __eql  A key equality functor.\n-       *  @param __a  An allocator object.\n+       *  @param  __last   An input iterator.\n+       *  @param __n       Minimal initial number of buckets.\n+       *  @param __hf      A hash functor.\n+       *  @param __eql     A key equality functor.\n+       *  @param __a       An allocator object.\n        *\n        *  Create an %unordered_multiset consisting of copies of the elements\n        *  from [__first,__last).  This is linear in N (where N is\n        *  distance(__first,__last)).\n        */\n       template<typename _InputIterator>\n-\tunordered_multiset(_InputIterator __f, _InputIterator __l,\n+\tunordered_multiset(_InputIterator __first, _InputIterator __last,\n \t\t\t   size_type __n = 0,\n \t\t\t   const hasher& __hf = hasher(),\n \t\t\t   const key_equal& __eql = key_equal(),\n \t\t\t   const allocator_type& __a = allocator_type())\n-\t: _M_h(__f, __l, __n, __hf, __eql, __a)\n+\t: _M_h(__first, __last, __n, __hf, __eql, __a)\n \t{ }\n \n       /// Copy constructor.\n@@ -1066,8 +1066,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n       // LWG 2059.\n       iterator\n-      erase(iterator __it)\n-      { return _M_h.erase(__it); }\n+      erase(iterator __position)\n+      { return _M_h.erase(__position); }\n       //@}\n \n "}, {"sha": "a8d6143927b307f8e59e6a17193623c9aa770d83", "filename": "libstdc++-v3/include/parallel/list_partition.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005413491961bacb0512dec2e28af53ff95ba291/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flist_partition.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005413491961bacb0512dec2e28af53ff95ba291/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flist_partition.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Flist_partition.h?ref=005413491961bacb0512dec2e28af53ff95ba291", "patch": "@@ -90,10 +90,10 @@ namespace __gnu_parallel\n    *  @param __f Functor to be applied to each element by traversing __it\n    *  @param __oversampling Oversampling factor. If 0, then the\n    *  partitions will differ in at most \n-   *  \\sqrt{\\mathrm{__end} - \\mathrm{__begin}} \n-   *  __elements. Otherwise, the ratio between the\n+   *  \\f$\\sqrt{\\mathrm{end} - \\mathrm{begin}}\\f$ \n+   *  elements. Otherwise, the ratio between the\n    *  longest and the shortest part is bounded by\n-   *  1/(\\mathrm{__oversampling} \\cdot \\mathrm{num\\_parts})\n+   *  \\f$1/(\\mathrm{oversampling} \\cdot \\mathrm{num\\_parts})\\f$\n    *  @return Length of the whole sequence.\n    */\n   template<typename _IIter, typename _FunctorType>"}, {"sha": "2adfedafa971818dc4a25a0f7b3041d400c194e5", "filename": "libstdc++-v3/include/std/iomanip", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005413491961bacb0512dec2e28af53ff95ba291/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005413491961bacb0512dec2e28af53ff95ba291/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiomanip?ref=005413491961bacb0512dec2e28af53ff95ba291", "patch": "@@ -462,7 +462,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /**\n    * @brief Manipulator for quoted strings.\n-   * @param __str    String to quote.\n+   * @param __string String to quote.\n    * @param __delim  Character to quote string with.\n    * @param __escape Escape character to escape itself or quote character.\n    */"}, {"sha": "dba145b950e9ec6819c4d76cf71a3506e7deed0a", "filename": "libstdc++-v3/include/tr2/dynamic_bitset", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005413491961bacb0512dec2e28af53ff95ba291/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005413491961bacb0512dec2e28af53ff95ba291/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr2%2Fdynamic_bitset?ref=005413491961bacb0512dec2e28af53ff95ba291", "patch": "@@ -650,6 +650,7 @@ public:\n       /**\n        *  @brief  Construct from a string.\n        *  @param  __str  A string of '0' and '1' characters.\n+       *  @param  __alloc An allocator.\n        *  @throw  std::invalid_argument  If a character appears in the string\n        *                                 which is neither '0' nor '1'.\n        */"}]}