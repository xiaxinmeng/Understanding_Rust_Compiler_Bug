{"sha": "6ec084f3873a3216c212713722d75084ca146eff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVjMDg0ZjM4NzNhMzIxNmMyMTI3MTM3MjJkNzUwODRjYTE0NmVmZg==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2011-11-04T13:57:31Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-04T13:57:31Z"}, "message": "exp_alfa.adb: Add local constant Disable_Processing_Of_Renamings;\n\n2011-11-04  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_alfa.adb: Add local constant\n\tDisable_Processing_Of_Renamings;\n\t(Expand_Alfa_N_Object_Renaming_Declaration): Disable\n\tthe name evaluation of object renamings for now.\n\t(Expand_Potential_Renaming): Do not perform the substitution\n\tfor now.\n\t* exp_util.adb (Remove_Side_Effects): Remove processing for\n        functions with side effects in Alfa mode.\n\nFrom-SVN: r180953", "tree": {"sha": "d78cb5ec9db0f084421ecef02223389ae376f264", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d78cb5ec9db0f084421ecef02223389ae376f264"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ec084f3873a3216c212713722d75084ca146eff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ec084f3873a3216c212713722d75084ca146eff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ec084f3873a3216c212713722d75084ca146eff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ec084f3873a3216c212713722d75084ca146eff/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73fe16797b7cc9e9a41794780d7e448b1d4b2b1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73fe16797b7cc9e9a41794780d7e448b1d4b2b1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73fe16797b7cc9e9a41794780d7e448b1d4b2b1e"}], "stats": {"total": 101, "additions": 52, "deletions": 49}, "files": [{"sha": "be2dceaf7942a63fd960532ff224ae141538d7dd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec084f3873a3216c212713722d75084ca146eff/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec084f3873a3216c212713722d75084ca146eff/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6ec084f3873a3216c212713722d75084ca146eff", "patch": "@@ -1,3 +1,14 @@\n+2011-11-04  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_alfa.adb: Add local constant\n+\tDisable_Processing_Of_Renamings;\n+\t(Expand_Alfa_N_Object_Renaming_Declaration): Disable\n+\tthe name evaluation of object renamings for now.\n+\t(Expand_Potential_Renaming): Do not perform the substitution\n+\tfor now.\n+\t* exp_util.adb (Remove_Side_Effects): Remove processing for\n+        functions with side effects in Alfa mode.\n+\n 2011-11-04  Gary Dismukes  <dismukes@adacore.com>\n \n \t* bindgen.adb (Gen_Elab_Calls): In the case"}, {"sha": "844fe89a460a42f4c1dab25dfc43cd8736bf9642", "filename": "gcc/ada/exp_alfa.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec084f3873a3216c212713722d75084ca146eff/gcc%2Fada%2Fexp_alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec084f3873a3216c212713722d75084ca146eff/gcc%2Fada%2Fexp_alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_alfa.adb?ref=6ec084f3873a3216c212713722d75084ca146eff", "patch": "@@ -42,6 +42,8 @@ with Tbuild;   use Tbuild;\n \n package body Exp_Alfa is\n \n+   Disable_Processing_Of_Renamings : constant Boolean := True;\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -209,6 +211,10 @@ package body Exp_Alfa is\n \n    procedure Expand_Alfa_N_Object_Renaming_Declaration (N : Node_Id) is\n    begin\n+      if Disable_Processing_Of_Renamings then\n+         return;\n+      end if;\n+\n       --  Unconditionally remove all side effects from the name\n \n       Evaluate_Name (Name (N));\n@@ -297,6 +303,10 @@ package body Exp_Alfa is\n       T : constant Entity_Id := Etype (N);\n \n    begin\n+      if Disable_Processing_Of_Renamings then\n+         return;\n+      end if;\n+\n       --  Substitute a reference to a renaming with the actual renamed object\n \n       if Present (Renamed_Object (E)) then"}, {"sha": "bbad7128a860d11bdc15d6bb053af66981bfc0a7", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 31, "deletions": 49, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ec084f3873a3216c212713722d75084ca146eff/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ec084f3873a3216c212713722d75084ca146eff/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=6ec084f3873a3216c212713722d75084ca146eff", "patch": "@@ -168,23 +168,30 @@ package body Exp_Util is\n       Msg_Node : Node_Id;\n \n    begin\n-\n       case Nkind (Parent (N)) is\n-         when N_Attribute_Reference |\n \n-            --  Nothing to do if we are the prefix of an attribute, since we\n-            --  do not want an atomic sync operation for things like 'Size.\n+         --  Check for cases of appearing in the prefix of a construct where\n+         --  we don't need atomic synchronization for this kind of usage.\n+\n+         when\n+              --  Nothing to do if we are the prefix of an attribute, since we\n+              --  do not want an atomic sync operation for things like 'Size.\n+\n+              N_Attribute_Reference |\n+\n+              --  The N_Reference node is like an attribute\n \n               N_Reference           |\n \n-            --  Likewise for a mere reference\n+              --  Nothing to do for a reference to a component (or components)\n+              --  of a composite object. Only reads and updates of the object\n+              --  as a whole require atomic synchronization (RM C.6 (15)).\n \n               N_Indexed_Component   |\n               N_Selected_Component  |\n               N_Slice               =>\n \n-            --  The C.6(15) clause says that only reads and updates of the\n-            --  object as a whole require atomic synchronization.\n+            --  For all the above cases, nothing to do if we are the prefix\n \n             if Prefix (Parent (N)) = N then\n                return;\n@@ -6547,57 +6554,32 @@ package body Exp_Util is\n             end;\n          end if;\n \n-         Def_Id := Make_Temporary (Loc, 'R', Exp);\n-         Set_Etype (Def_Id, Exp_Type);\n-\n-         --  The regular expansion of functions with side effects involves the\n-         --  generation of an access type to capture the return value found on\n-         --  the secondary stack. Since Alfa (and why) cannot process access\n-         --  types, use a different approach which ignores the secondary stack\n-         --  and \"copies\" the returned object.\n-\n-         if Alfa_Mode then\n-            Res := New_Reference_To (Def_Id, Loc);\n-            Ref_Type := Exp_Type;\n-\n-         --  Regular expansion utilizing an access type and 'reference\n+         Ref_Type := Make_Temporary (Loc, 'A');\n \n-         else\n-            Res :=\n-              Make_Explicit_Dereference (Loc,\n-                Prefix => New_Reference_To (Def_Id, Loc));\n+         Ptr_Typ_Decl :=\n+           Make_Full_Type_Declaration (Loc,\n+             Defining_Identifier => Ref_Type,\n+             Type_Definition =>\n+               Make_Access_To_Object_Definition (Loc,\n+                 All_Present => True,\n+                 Subtype_Indication =>\n+                   New_Reference_To (Exp_Type, Loc)));\n \n-            --  Generate:\n-            --    type Ann is access all <Exp_Type>;\n-\n-            Ref_Type := Make_Temporary (Loc, 'A');\n+         E := Exp;\n+         Insert_Action (Exp, Ptr_Typ_Decl);\n \n-            Ptr_Typ_Decl :=\n-              Make_Full_Type_Declaration (Loc,\n-                Defining_Identifier => Ref_Type,\n-                Type_Definition     =>\n-                  Make_Access_To_Object_Definition (Loc,\n-                    All_Present        => True,\n-                    Subtype_Indication =>\n-                      New_Reference_To (Exp_Type, Loc)));\n+         Def_Id := Make_Temporary (Loc, 'R', Exp);\n+         Set_Etype (Def_Id, Exp_Type);\n \n-            Insert_Action (Exp, Ptr_Typ_Decl);\n-         end if;\n+         Res :=\n+           Make_Explicit_Dereference (Loc,\n+             Prefix => New_Reference_To (Def_Id, Loc));\n \n-         E := Exp;\n          if Nkind (E) = N_Explicit_Dereference then\n             New_Exp := Relocate_Node (Prefix (E));\n          else\n             E := Relocate_Node (E);\n-\n-            --  Do not generate a 'reference in Alfa since the access type is\n-            --  not generated.\n-\n-            if Alfa_Mode then\n-               New_Exp := E;\n-            else\n-               New_Exp := Make_Reference (Loc, E);\n-            end if;\n+            New_Exp := Make_Reference (Loc, E);\n          end if;\n \n          if Is_Delayed_Aggregate (E) then"}]}