{"sha": "1000b34d95a6319206389feb136879d42d4675f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAwMGIzNGQ5NWE2MzE5MjA2Mzg5ZmViMTM2ODc5ZDQyZDQ2NzVmMg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-06-20T15:02:05Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-06-20T15:02:05Z"}, "message": "expr.c (expand_expr_real_1): For vector constants with integer modes...\n\n\n\t* expr.c (expand_expr_real_1) <VECTOR_CST>: For vector constants with\n\tinteger modes, attempt to directly construct an integer constant.\n\n\t* fold-const.c (native_encode_vector): Determine the size of each\n\telement from the vector type instead of the first vector element.\n\n\t* tree.c (build_constructor_single): Mark a CONSTRUCTOR as constant,\n\tif all of its elements/components are constant.\n\t(build_constructor_from_list): Likewise.\n\nFrom-SVN: r114815", "tree": {"sha": "c9dae92eb51b59b6f01612dfb8113ea758cf617a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9dae92eb51b59b6f01612dfb8113ea758cf617a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1000b34d95a6319206389feb136879d42d4675f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1000b34d95a6319206389feb136879d42d4675f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1000b34d95a6319206389feb136879d42d4675f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1000b34d95a6319206389feb136879d42d4675f2/comments", "author": null, "committer": null, "parents": [{"sha": "c82f61c591c903d2faab8e9e0257c2fbb004c1fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c82f61c591c903d2faab8e9e0257c2fbb004c1fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c82f61c591c903d2faab8e9e0257c2fbb004c1fc"}], "stats": {"total": 64, "additions": 45, "deletions": 19}, "files": [{"sha": "0a56b814167ce5ec382577095095f5fe71e9220a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1000b34d95a6319206389feb136879d42d4675f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1000b34d95a6319206389feb136879d42d4675f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1000b34d95a6319206389feb136879d42d4675f2", "patch": "@@ -1,3 +1,15 @@\n+2006-06-20  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* expr.c (expand_expr_real_1) <VECTOR_CST>: For vector constants with\n+\tinteger modes, attempt to directly construct an integer constant.\n+\n+\t* fold-const.c (native_encode_vector): Determine the size of each\n+\telement from the vector type instead of the first vector element.\n+\n+\t* tree.c (build_constructor_single): Mark a CONSTRUCTOR as constant,\n+\tif all of its elements/components are constant.\n+\t(build_constructor_from_list): Likewise.\n+\n 2006-06-20  Zdenek Dvorak <dvorakz@suse.cz>\n \n \tPR tree-optimization/27331"}, {"sha": "562588a4481102a0e95d5b195d75742c6f114dfa", "filename": "gcc/expr.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1000b34d95a6319206389feb136879d42d4675f2/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1000b34d95a6319206389feb136879d42d4675f2/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=1000b34d95a6319206389feb136879d42d4675f2", "patch": "@@ -6939,14 +6939,21 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       return temp;\n \n     case VECTOR_CST:\n-      if (GET_MODE_CLASS (TYPE_MODE (TREE_TYPE (exp))) == MODE_VECTOR_INT\n-\t  || GET_MODE_CLASS (TYPE_MODE (TREE_TYPE (exp))) == MODE_VECTOR_FLOAT)\n-\treturn const_vector_from_tree (exp);\n-      else\n-\treturn expand_expr (build_constructor_from_list\n-\t\t\t    (TREE_TYPE (exp),\n-\t\t\t     TREE_VECTOR_CST_ELTS (exp)),\n-\t\t\t    ignore ? const0_rtx : target, tmode, modifier);\n+      {\n+\ttree tmp = NULL_TREE;\n+\tif (GET_MODE_CLASS (mode) == MODE_VECTOR_INT\n+\t    || GET_MODE_CLASS (mode) == MODE_VECTOR_FLOAT)\n+\t  return const_vector_from_tree (exp);\n+\tif (GET_MODE_CLASS (mode) == MODE_INT)\n+\t  tmp = fold_unary (VIEW_CONVERT_EXPR,\n+\t\t\t    lang_hooks.types.type_for_mode (mode, 1),\n+\t\t\t    exp);\n+\tif (!tmp)\n+\t  tmp = build_constructor_from_list (type,\n+\t\t\t\t\t     TREE_VECTOR_CST_ELTS (exp));\n+\treturn expand_expr (tmp, ignore ? const0_rtx : target,\n+\t\t\t    tmode, modifier);\n+      }\n \n     case CONST_DECL:\n       return expand_expr (DECL_INITIAL (exp), target, VOIDmode, modifier);"}, {"sha": "b54658ded62f4e9394c4c221e29b01de0dc67a9d", "filename": "gcc/fold-const.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1000b34d95a6319206389feb136879d42d4675f2/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1000b34d95a6319206389feb136879d42d4675f2/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=1000b34d95a6319206389feb136879d42d4675f2", "patch": "@@ -6934,12 +6934,13 @@ static int\n native_encode_vector (tree expr, unsigned char *ptr, int len)\n {\n   int i, size, offset, count;\n-  tree elem, elements;\n+  tree itype, elem, elements;\n \n-  size = 0;\n   offset = 0;\n   elements = TREE_VECTOR_CST_ELTS (expr);\n   count = TYPE_VECTOR_SUBPARTS (TREE_TYPE (expr));\n+  itype = TREE_TYPE (TREE_TYPE (expr));\n+  size = GET_MODE_SIZE (TYPE_MODE (itype));\n   for (i = 0; i < count; i++)\n     {\n       if (elements)\n@@ -6952,18 +6953,15 @@ native_encode_vector (tree expr, unsigned char *ptr, int len)\n \n       if (elem)\n \t{\n-\t  size = native_encode_expr (elem, ptr+offset, len-offset);\n-\t  if (size == 0)\n+\t  if (native_encode_expr (elem, ptr+offset, len-offset) != size)\n \t    return 0;\n \t}\n-      else if (size != 0)\n+      else\n \t{\n \t  if (offset + size > len)\n \t    return 0;\n \t  memset (ptr+offset, 0, size);\n \t}\n-      else\n-\treturn 0;\n       offset += size;\n     }\n   return offset;"}, {"sha": "2df2f7b3cb5ae6dcc156d8c2caabbe0e523fd947", "filename": "gcc/tree.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1000b34d95a6319206389feb136879d42d4675f2/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1000b34d95a6319206389feb136879d42d4675f2/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=1000b34d95a6319206389feb136879d42d4675f2", "patch": "@@ -1013,13 +1013,16 @@ build_constructor_single (tree type, tree index, tree value)\n {\n   VEC(constructor_elt,gc) *v;\n   constructor_elt *elt;\n+  tree t;\n \n   v = VEC_alloc (constructor_elt, gc, 1);\n   elt = VEC_quick_push (constructor_elt, v, NULL);\n   elt->index = index;\n   elt->value = value;\n \n-  return build_constructor (type, v);\n+  t = build_constructor (type, v);\n+  TREE_CONSTANT (t) = TREE_CONSTANT (value);\n+  return t;\n }\n \n \n@@ -1028,21 +1031,27 @@ build_constructor_single (tree type, tree index, tree value)\n tree\n build_constructor_from_list (tree type, tree vals)\n {\n-  tree t;\n+  tree t, val;\n   VEC(constructor_elt,gc) *v = NULL;\n+  bool constant_p = true;\n \n   if (vals)\n     {\n       v = VEC_alloc (constructor_elt, gc, list_length (vals));\n       for (t = vals; t; t = TREE_CHAIN (t))\n \t{\n \t  constructor_elt *elt = VEC_quick_push (constructor_elt, v, NULL);\n+\t  val = TREE_VALUE (t);\n \t  elt->index = TREE_PURPOSE (t);\n-\t  elt->value = TREE_VALUE (t);\n+\t  elt->value = val;\n+\t  if (!TREE_CONSTANT (val))\n+\t    constant_p = false;\n \t}\n     }\n \n-  return build_constructor (type, v);\n+  t = build_constructor (type, v);\n+  TREE_CONSTANT (t) = constant_p;\n+  return t;\n }\n \n "}]}