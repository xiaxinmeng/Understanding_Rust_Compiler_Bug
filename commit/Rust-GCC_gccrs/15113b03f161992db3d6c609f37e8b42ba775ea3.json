{"sha": "15113b03f161992db3d6c609f37e8b42ba775ea3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUxMTNiMDNmMTYxOTkyZGIzZDZjNjA5ZjM3ZThiNDJiYTc3NWVhMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-12-18T20:18:42Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-12-18T20:18:42Z"}, "message": "nvptx.c (nvptx_maybe_convert_symbolic_operand): Remove UNSPEC_TO_GENERIC generation.\n\n\t* config/nvptx/nvptx.c (nvptx_maybe_convert_symbolic_operand):\n\tRemove UNSPEC_TO_GENERIC generation.\n\t(nvptx_output_mov_insn): Generate cvta for symbolic src.\n\t* config/nvptx/nvptx.md (nvptx_register_operand): Allow hard reg.\n\t(nvptx_reg_or_mem_operand): Likewise.\n\t(nvptx_nonmemory_operand): Likewise.\n\t(nvptx_general_operand): Delete.\n\t(*mov<mode>_insn): Use nonimmediate_operand, permit hardregs.\n\t(oacc_fork, oacc_join): Use general_operand.\n\nFrom-SVN: r231837", "tree": {"sha": "f2d4126dd7c019786ae9314d43be7313dff8884c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2d4126dd7c019786ae9314d43be7313dff8884c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15113b03f161992db3d6c609f37e8b42ba775ea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15113b03f161992db3d6c609f37e8b42ba775ea3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15113b03f161992db3d6c609f37e8b42ba775ea3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15113b03f161992db3d6c609f37e8b42ba775ea3/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "266cc0c181549c2fb6b50f8f26213cdc89101026", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/266cc0c181549c2fb6b50f8f26213cdc89101026", "html_url": "https://github.com/Rust-GCC/gccrs/commit/266cc0c181549c2fb6b50f8f26213cdc89101026"}], "stats": {"total": 66, "additions": 30, "deletions": 36}, "files": [{"sha": "acc5873e7bacf9ea88d35626c25bc4a414facaaf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15113b03f161992db3d6c609f37e8b42ba775ea3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15113b03f161992db3d6c609f37e8b42ba775ea3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15113b03f161992db3d6c609f37e8b42ba775ea3", "patch": "@@ -1,3 +1,15 @@\n+2015-12-18  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config/nvptx/nvptx.c (nvptx_maybe_convert_symbolic_operand):\n+\tRemove UNSPEC_TO_GENERIC generation.\n+\t(nvptx_output_mov_insn): Generate cvta for symbolic src.\n+\t* config/nvptx/nvptx.md (nvptx_register_operand): Allow hard reg.\n+\t(nvptx_reg_or_mem_operand): Likewise.\n+\t(nvptx_nonmemory_operand): Likewise.\n+\t(nvptx_general_operand): Delete.\n+\t(*mov<mode>_insn): Use nonimmediate_operand, permit hardregs.\n+\t(oacc_fork, oacc_join): Use general_operand.\n+\n 2015-12-18  Daniel Kahn Gillmor  <dkg@fifthhorseman.net>\n \n \t* dwarf2out.c (gen_producer_string): Ignore -fdebug-prefix-map."}, {"sha": "7405d7c1221f5dbd4ce8d0269c5c5045f29695d6", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15113b03f161992db3d6c609f37e8b42ba775ea3/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15113b03f161992db3d6c609f37e8b42ba775ea3/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=15113b03f161992db3d6c609f37e8b42ba775ea3", "patch": "@@ -1436,15 +1436,7 @@ nvptx_maybe_convert_symbolic_operand (rtx op)\n \n   nvptx_maybe_record_fnsym (sym);\n \n-  nvptx_data_area area = SYMBOL_DATA_AREA (sym);\n-  if (area == DATA_AREA_GENERIC)\n-    return op;\n-\n-  rtx dest = gen_reg_rtx (Pmode);\n-  emit_insn (gen_rtx_SET (dest,\n-\t\t\t  gen_rtx_UNSPEC (Pmode, gen_rtvec (1, op),\n-\t\t\t\t\t  UNSPEC_TO_GENERIC)));\n-  return dest;\n+  return op;\n }\n \f\n /* Returns true if X is a valid address for use in a memory reference.  */\n@@ -1772,6 +1764,13 @@ nvptx_output_mov_insn (rtx dst, rtx src)\n   machine_mode src_inner = (GET_CODE (src) == SUBREG\n \t\t\t    ? GET_MODE (XEXP (src, 0)) : dst_mode);\n \n+  rtx sym = src;\n+  if (GET_CODE (sym) == CONST)\n+    sym = XEXP (XEXP (sym, 0), 0);\n+  if (SYMBOL_REF_P (sym)\n+      && SYMBOL_DATA_AREA (sym) != DATA_AREA_GENERIC)\n+    return \"%.\\tcvta%D1%t0\\t%0, %1;\";\n+\n   if (src_inner == dst_inner)\n     return \"%.\\tmov%t0\\t%0, %1;\";\n "}, {"sha": "93083a8f625ae08d0b731206fb54eff16bf6bd05", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 10, "deletions": 27, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15113b03f161992db3d6c609f37e8b42ba775ea3/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15113b03f161992db3d6c609f37e8b42ba775ea3/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=15113b03f161992db3d6c609f37e8b42ba775ea3", "patch": "@@ -64,17 +64,14 @@\n (define_predicate \"nvptx_register_operand\"\n   (match_code \"reg\")\n {\n-  if (REG_P (op))\n-    return !HARD_REGISTER_P (op);\n   return register_operand (op, mode);\n })\n \n (define_predicate \"nvptx_reg_or_mem_operand\"\n   (match_code \"mem,reg\")\n {\n-  if (REG_P (op))\n-    return !HARD_REGISTER_P (op);\n-  return memory_operand (op, mode) || register_operand (op, mode);\n+  return (REG_P (op) ? register_operand (op, mode)\n+          : memory_operand (op, mode));\n })\n \n ;; Allow symbolic constants.\n@@ -86,23 +83,10 @@\n (define_predicate \"nvptx_nonmemory_operand\"\n   (match_code \"reg,const_int,const_double\")\n {\n-  if (REG_P (op))\n-    return !HARD_REGISTER_P (op);\n-  return nonmemory_operand (op, mode);\n-})\n-\n-;; A source operand for a move instruction.  This is the only predicate we use\n-;; that accepts symbolic constants.\n-(define_predicate \"nvptx_general_operand\"\n-  (match_code \"reg,subreg,mem,const,symbol_ref,label_ref,const_int,const_double\")\n-{\n-  if (REG_P (op))\n-    return !HARD_REGISTER_P (op);\n-  return general_operand (op, mode);\n+  return (REG_P (op) ? register_operand (op, mode)\n+          : immediate_operand (op, mode));\n })\n \n-;; A destination operand for a move instruction.  This is the only destination\n-;; predicate that accepts the return register since it requires special handling.\n (define_predicate \"nvptx_nonimmediate_operand\"\n   (match_code \"reg,subreg,mem\")\n {\n@@ -210,10 +194,9 @@\n    %.\\\\tsetp.eq.u32\\\\t%0, 1, 1;\")\n \n (define_insn \"*mov<mode>_insn\"\n-  [(set (match_operand:QHSDIM 0 \"nvptx_nonimmediate_operand\" \"=R,R,m\")\n+  [(set (match_operand:QHSDIM 0 \"nonimmediate_operand\" \"=R,R,m\")\n \t(match_operand:QHSDIM 1 \"general_operand\" \"Ri,m,R\"))]\n-  \"!MEM_P (operands[0])\n-   || (REG_P (operands[1]) && REGNO (operands[1]) > LAST_VIRTUAL_REGISTER)\"\n+  \"!MEM_P (operands[0]) || REG_P (operands[1])\"\n {\n   if (which_alternative == 1)\n     return \"%.\\\\tld%A1%u1\\\\t%0, %1;\";\n@@ -225,7 +208,7 @@\n   [(set_attr \"subregs_ok\" \"true\")])\n \n (define_insn \"*mov<mode>_insn\"\n-  [(set (match_operand:SDFM 0 \"nvptx_nonimmediate_operand\" \"=R,R,m\")\n+  [(set (match_operand:SDFM 0 \"nonimmediate_operand\" \"=R,R,m\")\n \t(match_operand:SDFM 1 \"general_operand\" \"RF,m,R\"))]\n   \"!MEM_P (operands[0]) || REG_P (operands[1])\"\n {\n@@ -253,7 +236,7 @@\n   \"%.\\\\tmov%t0\\\\t%0, %%ar%1;\")\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:QHSDISDFM 0 \"nvptx_nonimmediate_operand\" \"\")\n+  [(set (match_operand:QHSDISDFM 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:QHSDISDFM 1 \"general_operand\" \"\"))]\n   \"\"\n {\n@@ -1137,7 +1120,7 @@\n \n (define_expand \"oacc_fork\"\n   [(set (match_operand:SI 0 \"nvptx_nonmemory_operand\" \"\")\n-        (match_operand:SI 1 \"nvptx_general_operand\" \"\"))\n+        (match_operand:SI 1 \"general_operand\" \"\"))\n    (unspec_volatile:SI [(match_operand:SI 2 \"const_int_operand\" \"\")]\n \t\t        UNSPECV_FORKED)]\n   \"\"\n@@ -1150,7 +1133,7 @@\n \n (define_expand \"oacc_join\"\n   [(set (match_operand:SI 0 \"nvptx_nonmemory_operand\" \"\")\n-        (match_operand:SI 1 \"nvptx_general_operand\" \"\"))\n+        (match_operand:SI 1 \"general_operand\" \"\"))\n    (unspec_volatile:SI [(match_operand:SI 2 \"const_int_operand\" \"\")]\n \t\t        UNSPECV_JOIN)]\n   \"\""}]}