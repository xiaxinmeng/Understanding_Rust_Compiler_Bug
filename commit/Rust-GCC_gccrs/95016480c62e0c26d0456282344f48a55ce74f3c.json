{"sha": "95016480c62e0c26d0456282344f48a55ce74f3c", "node_id": "C_kwDOANBUbNoAKDk1MDE2NDgwYzYyZTBjMjZkMDQ1NjI4MjM0NGY0OGE1NWNlNzRmM2M", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-15T15:58:58Z"}, "committer": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T11:52:30Z"}, "message": "libproc_macro: Add Ident type implementation\n\nAdd the Ident rust type internal implementation.\nChangeLog:\n\n\t* librust/proc_macro/rust/bridge.rs: Add ident internal module.\n\t* librust/proc_macro/rust/ident.rs: Add ident internals.\n\t* librust/proc_macro/rust/span.rs: Make internal field public.\n\t* librust/proc_macro/rust/bridge/ident.rs: Add internal Ident\n\ttype.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "21dabc116def43ecfc18719dcf5928231d507677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21dabc116def43ecfc18719dcf5928231d507677"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95016480c62e0c26d0456282344f48a55ce74f3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95016480c62e0c26d0456282344f48a55ce74f3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95016480c62e0c26d0456282344f48a55ce74f3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95016480c62e0c26d0456282344f48a55ce74f3c/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddd0c450bc64e8d44a4c481f3cea0e238d95e08c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddd0c450bc64e8d44a4c481f3cea0e238d95e08c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddd0c450bc64e8d44a4c481f3cea0e238d95e08c"}], "stats": {"total": 73, "additions": 58, "deletions": 15}, "files": [{"sha": "33d09141fbb53bf1ef082d5f49e4f4a6dbc911b3", "filename": "librust/proc_macro/rust/bridge.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95016480c62e0c26d0456282344f48a55ce74f3c/librust%2Fproc_macro%2Frust%2Fbridge.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95016480c62e0c26d0456282344f48a55ce74f3c/librust%2Fproc_macro%2Frust%2Fbridge.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fbridge.rs?ref=95016480c62e0c26d0456282344f48a55ce74f3c", "patch": "@@ -1 +1,2 @@\n+pub mod ident;\n pub mod span;"}, {"sha": "b6e471962d2c20a11710566cfcdc417ec69cf3eb", "filename": "librust/proc_macro/rust/bridge/ident.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95016480c62e0c26d0456282344f48a55ce74f3c/librust%2Fproc_macro%2Frust%2Fbridge%2Fident.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95016480c62e0c26d0456282344f48a55ce74f3c/librust%2Fproc_macro%2Frust%2Fbridge%2Fident.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fbridge%2Fident.rs?ref=95016480c62e0c26d0456282344f48a55ce74f3c", "patch": "@@ -0,0 +1,33 @@\n+use bridge::span::Span;\n+use std::ffi::CString;\n+\n+#[repr(C)]\n+#[derive(Clone, Debug)]\n+pub struct Ident {\n+    pub(crate) is_raw: bool,\n+    pub(crate) val: CString,\n+}\n+\n+impl Ident {\n+    pub fn new(string: &str, _span: Span) -> Self {\n+        Ident {\n+            is_raw: false,\n+            val: CString::new(string).expect(\"Cannot create CString from rust String\"),\n+        }\n+    }\n+\n+    pub fn new_raw(string: &str, _span: Span) -> Self {\n+        Ident {\n+            is_raw: true,\n+            val: CString::new(string).expect(\"Cannot create CString from rust String\"),\n+        }\n+    }\n+\n+    pub fn span(&self) -> Span {\n+        Span {}\n+    }\n+\n+    pub fn set_span(&mut self, span: Span) {\n+        let _ = span;\n+    }\n+}"}, {"sha": "cc85ea5b9d3a2ac10e9adf8edd91cb124f189109", "filename": "librust/proc_macro/rust/ident.rs", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95016480c62e0c26d0456282344f48a55ce74f3c/librust%2Fproc_macro%2Frust%2Fident.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95016480c62e0c26d0456282344f48a55ce74f3c/librust%2Fproc_macro%2Frust%2Fident.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fident.rs?ref=95016480c62e0c26d0456282344f48a55ce74f3c", "patch": "@@ -1,11 +1,10 @@\n+use bridge;\n use std::fmt;\n use Span;\n \n /// An identifier.\n #[derive(Clone)]\n-pub struct Ident {\n-    // Internal implementation details\n-}\n+pub struct Ident(pub(crate) bridge::ident::Ident);\n \n impl Ident {\n     /// Creates a new identifier.\n@@ -19,8 +18,8 @@ impl Ident {\n     ///\n     /// The `string` argument must be a valid identifier permitted by the\n     /// language, otherwise the function will panic.\n-    pub fn new(_string: &str, _span: Span) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn new(string: &str, span: Span) -> Self {\n+        Ident(bridge::ident::Ident::new(string, span.0))\n     }\n \n     /// Creates a new raw identifier.\n@@ -35,34 +34,44 @@ impl Ident {\n     /// The `string` argument must be a valid identifier permitted by the\n     /// language. Furthermore, it should not be a keyword used in path\n     /// segments, otherwise this function will panic.\n-    pub fn new_raw(_string: &str, _span: Span) -> Self {\n-        todo!(\"Implement this function\")\n+    pub fn new_raw(string: &str, span: Span) -> Self {\n+        Ident(bridge::ident::Ident::new_raw(string, span.0))\n     }\n \n     /// Return the span of the identifier\n     pub fn span(&self) -> Span {\n-        todo!(\"Implement this function\")\n+        Span(self.0.span())\n     }\n \n     /// Change the span of the identifier.\n     ///\n     /// # Arguments\n     ///\n     /// * `span` - The new span value.\n-    pub fn set_span(&mut self, _span: Span) {\n-        todo!(\"Implement this function\")\n+    pub fn set_span(&mut self, span: Span) {\n+        self.0.set_span(span.0);\n     }\n }\n \n impl fmt::Display for Ident {\n     /// Display as lossless converted string.\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        todo!(\"Implement this function\")\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        if self.0.is_raw {\n+            f.write_str(\"r#\")?;\n+        }\n+        fmt::Display::fmt(\n+            &self\n+                .0\n+                .val\n+                .to_str()\n+                .expect(\"Cannot convert back to rust string\"),\n+            f,\n+        )\n     }\n }\n \n impl fmt::Debug for Ident {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        todo!(\"Implement this function\")\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.0.fmt(f)\n     }\n }"}, {"sha": "b5d573cc5afe66ecf52a8d47c63de636fa70c953", "filename": "librust/proc_macro/rust/span.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95016480c62e0c26d0456282344f48a55ce74f3c/librust%2Fproc_macro%2Frust%2Fspan.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95016480c62e0c26d0456282344f48a55ce74f3c/librust%2Fproc_macro%2Frust%2Fspan.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fspan.rs?ref=95016480c62e0c26d0456282344f48a55ce74f3c", "patch": "@@ -3,7 +3,7 @@ use std::fmt;\n \n /// A region of source code along with macro expansion information.\n #[derive(Copy, Clone)]\n-pub struct Span(bridge::span::Span);\n+pub struct Span(pub(crate) bridge::span::Span);\n \n impl Span {\n     // TODO: Add experimental API functions for this type"}]}