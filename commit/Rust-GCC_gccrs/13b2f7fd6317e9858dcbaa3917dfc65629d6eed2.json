{"sha": "13b2f7fd6317e9858dcbaa3917dfc65629d6eed2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNiMmY3ZmQ2MzE3ZTk4NThkY2JhYTM5MTdkZmM2NTYyOWQ2ZWVkMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-17T10:28:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-10-17T10:28:53Z"}, "message": "[multiple changes]\n\n2013-10-17  Tristan Gingold  <gingold@adacore.com>\n\n\t* a-exexpr-gcc.adb: Synchronize declarations of other/all others.\n\n2013-10-17  Thomas Quinot  <quinot@adacore.com>\n\n\t* exp_pakd.adb: Add missing guard protecting Reverse_Storage_Order\n\tcall.\n\t* sem_res.adb: Minor code cleanup: use named parameter association\n\t(not positional) for Boolean parameter Sec_Stack in calls to\n\tEstablish_Transient_Scope.\n\nFrom-SVN: r203746", "tree": {"sha": "838481e4a8a085857e86d1310288229c87194c20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/838481e4a8a085857e86d1310288229c87194c20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13b2f7fd6317e9858dcbaa3917dfc65629d6eed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13b2f7fd6317e9858dcbaa3917dfc65629d6eed2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13b2f7fd6317e9858dcbaa3917dfc65629d6eed2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13b2f7fd6317e9858dcbaa3917dfc65629d6eed2/comments", "author": null, "committer": null, "parents": [{"sha": "f4bed77be41f90e53463f8bf7a71ff503402a963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4bed77be41f90e53463f8bf7a71ff503402a963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4bed77be41f90e53463f8bf7a71ff503402a963"}], "stats": {"total": 59, "additions": 40, "deletions": 19}, "files": [{"sha": "822e880da7e136ce9f726b3fcfa7362e67a5692c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b2f7fd6317e9858dcbaa3917dfc65629d6eed2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b2f7fd6317e9858dcbaa3917dfc65629d6eed2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=13b2f7fd6317e9858dcbaa3917dfc65629d6eed2", "patch": "@@ -1,3 +1,15 @@\n+2013-10-17  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* a-exexpr-gcc.adb: Synchronize declarations of other/all others.\n+\n+2013-10-17  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* exp_pakd.adb: Add missing guard protecting Reverse_Storage_Order\n+\tcall.\n+\t* sem_res.adb: Minor code cleanup: use named parameter association\n+\t(not positional) for Boolean parameter Sec_Stack in calls to\n+\tEstablish_Transient_Scope.\n+\n 2013-10-15  Thomas Quinot  <quinot@adacore.com>\n \n \t* exp_pakd.adb (Expand_Packed_Element_Set,"}, {"sha": "a9d9e4b77337735eb89fa34fa8016ab63cc9c4ca", "filename": "gcc/ada/a-exexpr-gcc.adb", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b2f7fd6317e9858dcbaa3917dfc65629d6eed2/gcc%2Fada%2Fa-exexpr-gcc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b2f7fd6317e9858dcbaa3917dfc65629d6eed2/gcc%2Fada%2Fa-exexpr-gcc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexpr-gcc.adb?ref=13b2f7fd6317e9858dcbaa3917dfc65629d6eed2", "patch": "@@ -45,11 +45,10 @@ package body Exception_Propagation is\n    -- Entities to interface with the GCC runtime --\n    ------------------------------------------------\n \n-   --  These come from \"C++ ABI for Itanium: Exception handling\", which is\n-   --  the reference for GCC.\n+   --  These come from \"C++ ABI for Itanium: Exception handling\", which is the\n+   --  reference for GCC.\n \n-   --  Return codes from the GCC runtime functions used to propagate\n-   --  an exception.\n+   --  Return codes from GCC runtime functions used to propagate an exception\n \n    type Unwind_Reason_Code is\n      (URC_NO_REASON,\n@@ -226,9 +225,8 @@ package body Exception_Propagation is\n       UW_Argument  : System.Address) return Unwind_Reason_Code;\n    pragma Import (C, CleanupUnwind_Handler,\n                   \"__gnat_cleanupunwind_handler\");\n-   --  Hook called at each step of the forced unwinding we perform to\n-   --  trigger cleanups found during the propagation of an unhandled\n-   --  exception.\n+   --  Hook called at each step of the forced unwinding we perform to trigger\n+   --  cleanups found during the propagation of an unhandled exception.\n \n    --  GCC runtime functions used. These are C non-void functions, actually,\n    --  but we ignore the return values. See raise.c as to why we are using\n@@ -295,7 +293,9 @@ package body Exception_Propagation is\n    ---------------------------------------------------------------------------\n \n    --  Currently, these only have their address taken and compared so there is\n-   --  no real point having whole exception data blocks allocated.\n+   --  no real point having whole exception data blocks allocated. Note that\n+   --  there are corresponding declarations in gigi (trans.c) which must be\n+   --  kept properly synchronized.\n \n    Others_Value : constant Character := 'O';\n    pragma Export (C, Others_Value, \"__gnat_others_value\");\n@@ -315,6 +315,7 @@ package body Exception_Propagation is\n \n    function Allocate_Occurrence return EOA is\n       Res : GNAT_GCC_Exception_Access;\n+\n    begin\n       Res :=\n         new GNAT_GCC_Exception'\n@@ -432,6 +433,7 @@ package body Exception_Propagation is\n    is\n    begin\n       --  Simply propagate it\n+\n       Propagate_GCC_Exception (GCC_Exception);\n    end Reraise_GCC_Exception;\n \n@@ -467,9 +469,10 @@ package body Exception_Propagation is\n       --  unwinding hook calls Unhandled_Exception_Terminate when end of\n       --  stack is reached.\n \n-      Unwind_ForcedUnwind (GCC_Exception,\n-                           CleanupUnwind_Handler'Address,\n-                           System.Null_Address);\n+      Unwind_ForcedUnwind\n+        (GCC_Exception,\n+         CleanupUnwind_Handler'Address,\n+         System.Null_Address);\n \n       --  We get here in case of error. The debugger has been notified before\n       --  the second step above.\n@@ -503,7 +506,7 @@ package body Exception_Propagation is\n \n          declare\n             GNAT_Occurrence : constant GNAT_GCC_Exception_Access :=\n-              To_GNAT_GCC_Exception (GCC_Exception);\n+                                To_GNAT_GCC_Exception (GCC_Exception);\n          begin\n             Save_Occurrence (Excep.all, GNAT_Occurrence.Occurrence);\n          end;"}, {"sha": "273baf08294532cf731c911218e125c7a5318c91", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b2f7fd6317e9858dcbaa3917dfc65629d6eed2/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b2f7fd6317e9858dcbaa3917dfc65629d6eed2/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=13b2f7fd6317e9858dcbaa3917dfc65629d6eed2", "patch": "@@ -2135,10 +2135,16 @@ package body Exp_Pakd is\n          --  Swap back if necessary\n \n          Set_Etype (Arg, Ctyp);\n-         if Byte_Swapped and then Reverse_Storage_Order (Ctyp) then\n-            Arg := Byte_Swap (Arg,\n-                     Left_Justify  => not Bytes_Big_Endian,\n-                     Right_Justify => False);\n+\n+         if Byte_Swapped\n+           and then (Is_Record_Type (Ctyp) or else Is_Array_Type (Ctyp))\n+           and then Reverse_Storage_Order (Ctyp)\n+         then\n+            Arg :=\n+              Byte_Swap\n+                (Arg,\n+                 Left_Justify  => not Bytes_Big_Endian,\n+                 Right_Justify => False);\n          end if;\n \n          --  We needed to analyze this before we do the unchecked convert"}, {"sha": "9409972ec54ecef3bb8d1e34a845673813884614", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13b2f7fd6317e9858dcbaa3917dfc65629d6eed2/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13b2f7fd6317e9858dcbaa3917dfc65629d6eed2/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=13b2f7fd6317e9858dcbaa3917dfc65629d6eed2", "patch": "@@ -3602,7 +3602,7 @@ package body Sem_Res is\n               and then Full_Expander_Active\n               and then (Is_Controlled (Etype (F)) or else Has_Task (Etype (F)))\n             then\n-               Establish_Transient_Scope (A, False);\n+               Establish_Transient_Scope (A, Sec_Stack => False);\n                Resolve (A, Etype (F));\n \n             --  A small optimization: if one of the actuals is a concatenation\n@@ -3621,7 +3621,7 @@ package body Sem_Res is\n                       and then Chars (Nam) = Name_Asm)\n               and then not Static_Concatenation (A)\n             then\n-               Establish_Transient_Scope (A, False);\n+               Establish_Transient_Scope (A, Sec_Stack => False);\n                Resolve (A, Etype (F));\n \n             else\n@@ -3680,7 +3680,7 @@ package body Sem_Res is\n                      if (Is_Controlled (DDT) or else Has_Task (DDT))\n                        and then Full_Expander_Active\n                      then\n-                        Establish_Transient_Scope (A, False);\n+                        Establish_Transient_Scope (A, Sec_Stack => False);\n                      end if;\n                   end;\n "}]}