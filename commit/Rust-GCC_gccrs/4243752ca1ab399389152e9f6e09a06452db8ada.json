{"sha": "4243752ca1ab399389152e9f6e09a06452db8ada", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI0Mzc1MmNhMWFiMzk5Mzg5MTUyZTlmNmUwOWEwNjQ1MmRiOGFkYQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2004-02-09T03:39:48Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2004-02-09T03:39:48Z"}, "message": "ffi.c (ffi_prep_args64): Correct long double handling.\n\n\t* src/powerpc/ffi.c (ffi_prep_args64): Correct long double handling.\n\t(ffi_closure_helper_LINUX64): Fix typo.\n\t* testsuite/libffi.call/cls_align_longdouble.c: Pass -mlong-double-128\n\tfor powerpc64-*-*.\n\t* testsuite/libffi.call/float.c: Likewise.\n\t* testsuite/libffi.call/float2.c: Likewise.\n\nFrom-SVN: r77522", "tree": {"sha": "78ec388e24099521b55d6696a59a0863b43e0521", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78ec388e24099521b55d6696a59a0863b43e0521"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4243752ca1ab399389152e9f6e09a06452db8ada", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4243752ca1ab399389152e9f6e09a06452db8ada", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4243752ca1ab399389152e9f6e09a06452db8ada", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4243752ca1ab399389152e9f6e09a06452db8ada/comments", "author": null, "committer": null, "parents": [{"sha": "3b4b85c945f850219212333d236f617b24b3515f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b4b85c945f850219212333d236f617b24b3515f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b4b85c945f850219212333d236f617b24b3515f"}], "stats": {"total": 67, "additions": 48, "deletions": 19}, "files": [{"sha": "76de0068a030ee162a327f19a5b437cfea59b814", "filename": "libffi/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4243752ca1ab399389152e9f6e09a06452db8ada/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4243752ca1ab399389152e9f6e09a06452db8ada/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=4243752ca1ab399389152e9f6e09a06452db8ada", "patch": "@@ -1,3 +1,12 @@\n+2004-02-09  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* src/powerpc/ffi.c (ffi_prep_args64): Correct long double handling.\n+\t(ffi_closure_helper_LINUX64): Fix typo.\n+\t* testsuite/libffi.call/cls_align_longdouble.c: Pass -mlong-double-128\n+\tfor powerpc64-*-*.\n+\t* testsuite/libffi.call/float.c: Likewise.\n+\t* testsuite/libffi.call/float2.c: Likewise.\n+\n 2004-02-08  Alan Modra  <amodra@bigpond.net.au>\n \n \t* src/powerpc/ffi.c (ffi_prep_cif_machdep <FFI_LINUX64>): Correct"}, {"sha": "454c7ac35e58a8dd7e5967130750138d5c7a1a47", "filename": "libffi/src/powerpc/ffi.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4243752ca1ab399389152e9f6e09a06452db8ada/libffi%2Fsrc%2Fpowerpc%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4243752ca1ab399389152e9f6e09a06452db8ada/libffi%2Fsrc%2Fpowerpc%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fpowerpc%2Fffi.c?ref=4243752ca1ab399389152e9f6e09a06452db8ada", "patch": "@@ -369,10 +369,27 @@ void hidden ffi_prep_args64(extended_cif *ecif, unsigned long *const stack)\n \t  FFI_ASSERT(flags & FLAG_FP_ARGUMENTS);\n \t  break;\n \n-\tcase FFI_TYPE_STRUCT:\n #if FFI_TYPE_LONGDOUBLE != FFI_TYPE_DOUBLE\n \tcase FFI_TYPE_LONGDOUBLE:\n+\t  double_tmp = ((double *) *p_argv)[0];\n+\t  *(double *) next_arg = double_tmp;\n+\t  if (++next_arg == gpr_end)\n+\t    next_arg = rest;\n+\t  if (fparg_count < NUM_FPR_ARG_REGISTERS64)\n+\t    *fpr_base++ = double_tmp;\n+\t  fparg_count++;\n+\t  double_tmp = ((double *) *p_argv)[1];\n+\t  *(double *) next_arg = double_tmp;\n+\t  if (++next_arg == gpr_end)\n+\t    next_arg = rest;\n+\t  if (fparg_count < NUM_FPR_ARG_REGISTERS64)\n+\t    *fpr_base++ = double_tmp;\n+\t  fparg_count++;\n+\t  FFI_ASSERT(flags & FLAG_FP_ARGUMENTS);\n+\t  break;\n #endif\n+\n+\tcase FFI_TYPE_STRUCT:\n \t  words = ((*ptr)->size + 7) / 8;\n \t  if (next_arg >= gpr_base && next_arg + words > gpr_end)\n \t    {\n@@ -1079,7 +1096,7 @@ ffi_closure_helper_LINUX64 (ffi_closure *closure, void *rvalue,\n \n #if FFI_TYPE_LONGDOUBLE != FFI_TYPE_DOUBLE\n \tcase FFI_TYPE_LONGDOUBLE:\n-\t  if (prf + 1 < end_pfr)\n+\t  if (pfr + 1 < end_pfr)\n \t    {\n \t      avalue[i] = pfr;\n \t      pfr += 2;"}, {"sha": "aacfcbafd8c33a7a94827a443fa15c13451418a3", "filename": "libffi/testsuite/libffi.call/cls_align_longdouble.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4243752ca1ab399389152e9f6e09a06452db8ada/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_longdouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4243752ca1ab399389152e9f6e09a06452db8ada/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_longdouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_longdouble.c?ref=4243752ca1ab399389152e9f6e09a06452db8ada", "patch": "@@ -5,6 +5,8 @@\n    Originator:\t<hos@tamanegi.org> 20031203\t */\n \n /* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n+/* { dg-options -mlong-double-128 { target powerpc64*-*-* } } */\n+\n #include \"ffitest.h\"\n \n typedef struct cls_struct_align {"}, {"sha": "d712fb1021ad410d2afcf4a1672b91ea7ca3e589", "filename": "libffi/testsuite/libffi.call/float.c", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4243752ca1ab399389152e9f6e09a06452db8ada/libffi%2Ftestsuite%2Flibffi.call%2Ffloat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4243752ca1ab399389152e9f6e09a06452db8ada/libffi%2Ftestsuite%2Flibffi.call%2Ffloat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Ffloat.c?ref=4243752ca1ab399389152e9f6e09a06452db8ada", "patch": "@@ -5,6 +5,8 @@\n    Originator:\tFrom the original ffitest.c  */\n \n /* { dg-do run } */\n+/* { dg-options -mlong-double-128 { target powerpc64*-*-* } } */\n+\n #include \"ffitest.h\"\n \n static int floating(int a, float b, double c, long double d, int e)\n@@ -28,8 +30,6 @@ int main (void)\n   double d;\n   long double ld;\n   signed int si2;\n-  \n-\n \n   args[0] = &ffi_type_sint;\n   values[0] = &si1;\n@@ -41,7 +41,7 @@ int main (void)\n   values[3] = &ld;\n   args[4] = &ffi_type_sint;\n   values[4] = &si2;\n-    \n+\n   /* Initialize the cif */\n   CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 5,\n \t\t     &ffi_type_sint, args) == FFI_OK);\n@@ -51,15 +51,14 @@ int main (void)\n   d = (double)1.0/(double)3.0;\n   ld = 2.71828182846L;\n   si2 = 10;\n-  \n+\n   floating (si1, f, d, ld, si2);\n-  \n+\n   ffi_call(&cif, FFI_FN(floating), &rint, values);\n-  \n+\n   printf (\"%d vs %d\\n\", (int)rint, floating (si1, f, d, ld, si2));\n-  \n+\n   CHECK(rint == floating(si1, f, d, ld, si2));\n-  \n+\n   exit (0);\n }\n-  "}, {"sha": "4de41d356c488aa14fdadda50fa669f7e368ed4a", "filename": "libffi/testsuite/libffi.call/float2.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4243752ca1ab399389152e9f6e09a06452db8ada/libffi%2Ftestsuite%2Flibffi.call%2Ffloat2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4243752ca1ab399389152e9f6e09a06452db8ada/libffi%2Ftestsuite%2Flibffi.call%2Ffloat2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Ffloat2.c?ref=4243752ca1ab399389152e9f6e09a06452db8ada", "patch": "@@ -5,6 +5,8 @@\n    Originator:\tFrom the original ffitest.c  */\n \n /* { dg-do run } */\n+/* { dg-options -mlong-double-128 { target powerpc64*-*-* } } */\n+\n #include \"ffitest.h\"\n #include \"float.h\"\n \n@@ -23,29 +25,29 @@ int main (void)\n \n   args[0] = &ffi_type_float;\n   values[0] = &f;\n-  \n+\n   /* Initialize the cif */\n-  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 1, \n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 1,\n \t\t     &ffi_type_longdouble, args) == FFI_OK);\n-  \n+\n   f = 3.14159;\n-  \n-#if 1 \n+\n+#if 1\n   /* This is ifdef'd out for now. long double support under SunOS/gcc\n      is pretty much non-existent.  You'll get the odd bus error in library\n      routines like printf().  */\n   printf (\"%Lf\\n\", ldblit(f));\n #endif\n   ld = 666;\n   ffi_call(&cif, FFI_FN(ldblit), &ld, values);\n-  \n-#if 1 \n+\n+#if 1\n   /* This is ifdef'd out for now. long double support under SunOS/gcc\n      is pretty much non-existent.  You'll get the odd bus error in library\n      routines like printf().  */\n   printf (\"%Lf, %Lf, %Lf, %Lf\\n\", ld, ldblit(f), ld - ldblit(f), LDBL_EPSILON);\n #endif\n-  \n+\n   /* These are not always the same!! Check for a reasonable delta */\n   /*@-realcompare@*/\n   if (ld - ldblit(f) < LDBL_EPSILON)"}]}