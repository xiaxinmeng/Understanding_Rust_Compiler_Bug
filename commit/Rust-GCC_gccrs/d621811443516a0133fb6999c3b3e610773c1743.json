{"sha": "d621811443516a0133fb6999c3b3e610773c1743", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYyMTgxMTQ0MzUxNmEwMTMzZmI2OTk5YzNiM2U2MTA3NzNjMTc0Mw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-10-11T18:10:03Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-10-11T18:10:03Z"}, "message": "compiler: Better error message of unsafe.Offsetof(method value).\n\nFrom-SVN: r203454", "tree": {"sha": "37de7994f2baba0aee367724e2f65b9c3daf0892", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37de7994f2baba0aee367724e2f65b9c3daf0892"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d621811443516a0133fb6999c3b3e610773c1743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d621811443516a0133fb6999c3b3e610773c1743", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d621811443516a0133fb6999c3b3e610773c1743", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d621811443516a0133fb6999c3b3e610773c1743/comments", "author": null, "committer": null, "parents": [{"sha": "0213a547b0ec72dbd0ea3e98181c9ebc20275a92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0213a547b0ec72dbd0ea3e98181c9ebc20275a92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0213a547b0ec72dbd0ea3e98181c9ebc20275a92"}], "stats": {"total": 14, "additions": 13, "deletions": 1}, "files": [{"sha": "258953f205ac5e77c70f37ef9dbc0c65214a867a", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d621811443516a0133fb6999c3b3e610773c1743/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d621811443516a0133fb6999c3b3e610773c1743/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=d621811443516a0133fb6999c3b3e610773c1743", "patch": "@@ -7253,6 +7253,15 @@ Builtin_call_expression::do_lower(Gogo* gogo, Named_object* function,\n   if (this->code_ == BUILTIN_OFFSETOF)\n     {\n       Expression* arg = this->one_arg();\n+\n+      if (arg->bound_method_expression() != NULL\n+\t  || arg->interface_field_reference_expression() != NULL)\n+\t{\n+\t  this->report_error(_(\"invalid use of method value as argument \"\n+\t\t\t       \"of Offsetof\"));\n+\t  return this;\n+\t}\n+\n       Field_reference_expression* farg = arg->field_reference_expression();\n       while (farg != NULL)\n \t{\n@@ -7262,7 +7271,8 @@ Builtin_call_expression::do_lower(Gogo* gogo, Named_object* function,\n \t  // it must not be reached through pointer indirections.\n \t  if (farg->expr()->deref() != farg->expr())\n \t    {\n-\t      this->report_error(_(\"argument of Offsetof implies indirection of an embedded field\"));\n+\t      this->report_error(_(\"argument of Offsetof implies \"\n+\t\t\t\t   \"indirection of an embedded field\"));\n \t      return this;\n \t    }\n \t  // Go up until we reach the original base.\n@@ -7672,6 +7682,8 @@ Find_call_expression::expression(Expression** pexpr)\n bool\n Builtin_call_expression::do_is_constant() const\n {\n+  if (this->is_error_expression())\n+    return true;\n   switch (this->code_)\n     {\n     case BUILTIN_LEN:"}]}