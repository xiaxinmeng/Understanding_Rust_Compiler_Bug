{"sha": "4e4620d8c796af482b57b94932618d1f9d9af9f7", "node_id": "C_kwDOANBUbNoAKDRlNDYyMGQ4Yzc5NmFmNDgyYjU3Yjk0OTMyNjE4ZDFmOWQ5YWY5Zjc", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-19T19:55:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-19T19:55:56Z"}, "message": "c: Diagnose compound literals with function type [PR108043]\n\nBoth C99 and latest C2X say that compound literal shall have an object type\n(complete object type in the latter case) or array of unknown bound,\nso complit with function type is invalid.  When the initializer had to be\nnon-empty for such case, we used to diagnose it as incorrect initializer,\nbut with (fntype){} now allowed we just ICE on it.\n\nThe following patch diagnoses that.\n\n2022-12-19  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/108043\n\t* c-parser.cc (c_parser_postfix_expression_after_paren_type): Diagnose\n\tcompound literals with function type.\n\n\t* gcc.dg/pr108043.c: New test.\n\t* gcc.dg/c99-complit-2.c (foo): Adjust expected diagnostics for\n\tcomplit with function type.", "tree": {"sha": "bc4a2a0333f66eb9484db68f0fb32724b12d146b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc4a2a0333f66eb9484db68f0fb32724b12d146b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e4620d8c796af482b57b94932618d1f9d9af9f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e4620d8c796af482b57b94932618d1f9d9af9f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e4620d8c796af482b57b94932618d1f9d9af9f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e4620d8c796af482b57b94932618d1f9d9af9f7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68e51bd0a85794cd437d3e740357dfef84dc560d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68e51bd0a85794cd437d3e740357dfef84dc560d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68e51bd0a85794cd437d3e740357dfef84dc560d"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "7d6960fffbb6775b5620f44c4c7002c41454ab4f", "filename": "gcc/c/c-parser.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e4620d8c796af482b57b94932618d1f9d9af9f7/gcc%2Fc%2Fc-parser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e4620d8c796af482b57b94932618d1f9d9af9f7/gcc%2Fc%2Fc-parser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.cc?ref=4e4620d8c796af482b57b94932618d1f9d9af9f7", "patch": "@@ -10924,6 +10924,11 @@ c_parser_postfix_expression_after_paren_type (c_parser *parser,\n       error_at (type_loc, \"compound literal has variable size\");\n       type = error_mark_node;\n     }\n+  else if (TREE_CODE (type) == FUNCTION_TYPE)\n+    {\n+      error_at (type_loc, \"compound literal has function type\");\n+      type = error_mark_node;\n+    }\n   if (constexpr_p && type != error_mark_node)\n     {\n       tree type_no_array = strip_array_types (type);"}, {"sha": "5e1b5be8e282bcc697786c2c4336c7c9a4c56dcb", "filename": "gcc/testsuite/gcc.dg/c99-complit-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e4620d8c796af482b57b94932618d1f9d9af9f7/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-complit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e4620d8c796af482b57b94932618d1f9d9af9f7/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-complit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-complit-2.c?ref=4e4620d8c796af482b57b94932618d1f9d9af9f7", "patch": "@@ -23,7 +23,7 @@ foo (int a)\n   /* { dg-error \"init\" \"incomplete union type\" { target *-*-* } .-1 } */\n   /* { dg-error \"invalid use of undefined type\" \"\" { target *-*-* } .-2 } */\n   (void (void)) { 0 }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n-  /* { dg-error \"init\" \"function type\" { target *-*-* } .-1 } */\n+  /* { dg-error \"compound literal has function type\" \"function type\" { target *-*-* } .-1 } */\n   (int [a]) { 1 }; /* { dg-bogus \"warning\" \"warning in place of error\" } */\n   /* { dg-error \"init|variable\" \"VLA type\" { target *-*-* } .-1 } */\n   /* Initializers must not attempt to initialize outside the object"}, {"sha": "0cc0700f30a070965644ea03f7de25f236d3140e", "filename": "gcc/testsuite/gcc.dg/pr108043.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e4620d8c796af482b57b94932618d1f9d9af9f7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108043.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e4620d8c796af482b57b94932618d1f9d9af9f7/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108043.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108043.c?ref=4e4620d8c796af482b57b94932618d1f9d9af9f7", "patch": "@@ -0,0 +1,12 @@\n+/* PR c/108043 */\n+/* { dg-do compile } */\n+/* { dg-options \"\" } */\n+\n+typedef void F (void);\n+\n+void\n+foo (void)\n+{\n+  (F) {};\t\t/* { dg-error \"compound literal has function type\" } */\n+  (F) { foo };\t\t/* { dg-error \"compound literal has function type\" } */\n+}"}]}