{"sha": "7daebb7ae4a90b9463a5b6940977690e2da07ff9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RhZWJiN2FlNGE5MGI5NDYzYTViNjk0MDk3NzY5MGUyZGEwN2ZmOQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-02-03T19:40:58Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-02-03T19:40:58Z"}, "message": "hooks.c (hook_rtx_rtx_identity): Generic hook function that takes a single rtx and returns it unmodified.\n\n\n\t* hooks.c (hook_rtx_rtx_identity): Generic hook function that\n\ttakes a single rtx and returns it unmodified.\n\t* hooks.h (hook_rtx_rtx_identity): Prototype here.\n\t* target.h (struct gcc_target): Add \"delegitimize_address\"\n\tfield to target structure.\n\t* target-def.h (TARGET_DELEGITIMIZE_ADDRESS):  Provide default\n\tfor delegitimize_address target using hook_rtx_rtx_identity.\n\t(TARGET_INITIALIZER): Initialize delegitimize_address field\n\tusing TARGET_DELEGITIMIZE_ADDRESS macro.\n\t* simplify-rtx.c (avoid_constant_pool_reference): Handle float\n\textensions of constant pool references.  Use delegitimize_address\n\tto undo the obfuscation of \"-fpic\".\n\t* Makefile.in (simplify-rtx.o): Add dependency on target.h.\n\n\t* config/i386/i386.c (TARGET_DELEGITIMIZE_ADDRESS): Define as\n\ti386_simplify_dwarf_addr.\n\t(ix86_find_base_term): Simplify using i386_simplify_dwarf_addr.\n  \t(maybe_get_pool_constant): Likewise.\n\nFrom-SVN: r62336", "tree": {"sha": "941a0c444f84c4242289e65f0a9288ba576f035e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/941a0c444f84c4242289e65f0a9288ba576f035e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7daebb7ae4a90b9463a5b6940977690e2da07ff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7daebb7ae4a90b9463a5b6940977690e2da07ff9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7daebb7ae4a90b9463a5b6940977690e2da07ff9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7daebb7ae4a90b9463a5b6940977690e2da07ff9/comments", "author": null, "committer": null, "parents": [{"sha": "348b0c310505a37e779ad69065190f1991253854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/348b0c310505a37e779ad69065190f1991253854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/348b0c310505a37e779ad69065190f1991253854"}], "stats": {"total": 114, "additions": 73, "deletions": 41}, "files": [{"sha": "d89b2153e9c82ff51d30cbf3408ede2ed37a851d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daebb7ae4a90b9463a5b6940977690e2da07ff9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daebb7ae4a90b9463a5b6940977690e2da07ff9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7daebb7ae4a90b9463a5b6940977690e2da07ff9", "patch": "@@ -1,3 +1,24 @@\n+2002-02-03  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* hooks.c (hook_rtx_rtx_identity): Generic hook function that\n+\ttakes a single rtx and returns it unmodified.\n+\t* hooks.h (hook_rtx_rtx_identity): Prototype here.\n+\t* target.h (struct gcc_target): Add \"delegitimize_address\" \n+\tfield to target structure.\n+\t* target-def.h (TARGET_DELEGITIMIZE_ADDRESS):  Provide default\n+\tfor delegitimize_address target using hook_rtx_rtx_identity.\n+\t(TARGET_INITIALIZER): Initialize delegitimize_address field\n+\tusing TARGET_DELEGITIMIZE_ADDRESS macro.\n+\t* simplify-rtx.c (avoid_constant_pool_reference): Handle float\n+\textensions of constant pool references.  Use delegitimize_address\n+\tto undo the obfuscation of \"-fpic\".\n+\t* Makefile.in (simplify-rtx.o): Add dependency on target.h.\n+\n+\t* config/i386/i386.c (TARGET_DELEGITIMIZE_ADDRESS): Define as\n+\ti386_simplify_dwarf_addr.\n+\t(ix86_find_base_term): Simplify using i386_simplify_dwarf_addr.\n+  \t(maybe_get_pool_constant): Likewise.\n+\n Mon Feb  3 16:01:17 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.c (ix86_expand_int_movcc):  Fix setcc sign bit case."}, {"sha": "a40d15adb2b13798cba32a0ed6933b6e3a128dca", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daebb7ae4a90b9463a5b6940977690e2da07ff9/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daebb7ae4a90b9463a5b6940977690e2da07ff9/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7daebb7ae4a90b9463a5b6940977690e2da07ff9", "patch": "@@ -1523,7 +1523,7 @@ jump.o : jump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) flags.h \\\n \n simplify-rtx.o : simplify-rtx.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(REGS_H) hard-reg-set.h flags.h real.h insn-config.h $(RECOG_H) $(EXPR_H) toplev.h \\\n-   output.h function.h $(GGC_H) $(OBSTACK_H) $(TM_P_H) $(TREE_H)\n+   output.h function.h $(GGC_H) $(OBSTACK_H) $(TM_P_H) $(TREE_H) $(TARGET_H)\n cselib.o : cselib.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) $(REGS_H) \\\n    hard-reg-set.h flags.h real.h insn-config.h $(RECOG_H) $(EXPR_H) toplev.h \\\n    output.h function.h cselib.h $(GGC_H) $(TM_P_H) gt-cselib.h"}, {"sha": "2f7a300f8ecd26b03cdbc6e53b61abc37cf7d428", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 33, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daebb7ae4a90b9463a5b6940977690e2da07ff9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daebb7ae4a90b9463a5b6940977690e2da07ff9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7daebb7ae4a90b9463a5b6940977690e2da07ff9", "patch": "@@ -990,6 +990,9 @@ static enum x86_64_reg_class merge_classes PARAMS ((enum x86_64_reg_class,\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM ix86_cannot_force_const_mem\n \n+#undef TARGET_DELEGITIMIZE_ADDRESS\n+#define TARGET_DELEGITIMIZE_ADDRESS i386_simplify_dwarf_addr\n+\n #undef TARGET_MS_BITFIELD_LAYOUT_P\n #define TARGET_MS_BITFIELD_LAYOUT_P ix86_ms_bitfield_layout_p\n \n@@ -5368,21 +5371,7 @@ ix86_find_base_term (x)\n       return term;\n     }\n \n-  if (GET_CODE (x) != PLUS\n-      || XEXP (x, 0) != pic_offset_table_rtx\n-      || GET_CODE (XEXP (x, 1)) != CONST)\n-    return x;\n-\n-  term = XEXP (XEXP (x, 1), 0);\n-\n-  if (GET_CODE (term) == PLUS && GET_CODE (XEXP (term, 1)) == CONST_INT)\n-    term = XEXP (term, 0);\n-\n-  if (GET_CODE (term) != UNSPEC\n-      || XINT (term, 1) != UNSPEC_GOTOFF)\n-    return x;\n-\n-  term = XVECEXP (term, 0, 0);\n+  term = i386_simplify_dwarf_addr (x);\n \n   if (GET_CODE (term) != SYMBOL_REF\n       && GET_CODE (term) != LABEL_REF)\n@@ -8047,24 +8036,7 @@ static rtx\n maybe_get_pool_constant (x)\n      rtx x;\n {\n-  x = XEXP (x, 0);\n-\n-  if (flag_pic && ! TARGET_64BIT)\n-    {\n-      if (GET_CODE (x) != PLUS)\n-\treturn NULL_RTX;\n-      if (XEXP (x, 0) != pic_offset_table_rtx)\n-\treturn NULL_RTX;\n-      x = XEXP (x, 1);\n-      if (GET_CODE (x) != CONST)\n-\treturn NULL_RTX;\n-      x = XEXP (x, 0);\n-      if (GET_CODE (x) != UNSPEC)\n-\treturn NULL_RTX;\n-      if (XINT (x, 1) != UNSPEC_GOTOFF)\n-\treturn NULL_RTX;\n-      x = XVECEXP (x, 0, 0);\n-    }\n+  x = i386_simplify_dwarf_addr (XEXP (x, 0));\n \n   if (GET_CODE (x) == SYMBOL_REF && CONSTANT_POOL_ADDRESS_P (x))\n     return get_pool_constant (x);"}, {"sha": "8926638347ce8a6cbdafc8891bd646c12e822a85", "filename": "gcc/hooks.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daebb7ae4a90b9463a5b6940977690e2da07ff9/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daebb7ae4a90b9463a5b6940977690e2da07ff9/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=7daebb7ae4a90b9463a5b6940977690e2da07ff9", "patch": "@@ -1,5 +1,5 @@\n /* General-purpose hooks.\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -149,3 +149,11 @@ hook_bool_rtx_int_int_intp_false (a, b, c, d)\n   return false;\n }\n \n+/* Generic hook that takes an rtx and returns it.  */\n+rtx\n+hook_rtx_rtx_identity (x)\n+     rtx x;\n+{\n+  return x;\n+}\n+"}, {"sha": "f7a4d6d302073ac31006a6bb0bc216c422094a2d", "filename": "gcc/hooks.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daebb7ae4a90b9463a5b6940977690e2da07ff9/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daebb7ae4a90b9463a5b6940977690e2da07ff9/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=7daebb7ae4a90b9463a5b6940977690e2da07ff9", "patch": "@@ -1,5 +1,5 @@\n /* General-purpose hooks.\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -45,4 +45,6 @@ bool default_can_output_mi_thunk_no_vcall\n \n bool hook_bool_tree_tree_false PARAMS ((tree, tree));\n \n+rtx hook_rtx_rtx_identity PARAMS ((rtx));\n+\n #endif"}, {"sha": "19d664b14fb1ce41600d842dc819931e5e422f4f", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daebb7ae4a90b9463a5b6940977690e2da07ff9/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daebb7ae4a90b9463a5b6940977690e2da07ff9/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=7daebb7ae4a90b9463a5b6940977690e2da07ff9", "patch": "@@ -38,6 +38,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"toplev.h\"\n #include \"output.h\"\n #include \"ggc.h\"\n+#include \"target.h\"\n \n /* Simplification and canonicalization of RTL.  */\n \n@@ -106,13 +107,36 @@ rtx\n avoid_constant_pool_reference (x)\n      rtx x;\n {\n-  rtx c, addr;\n+  rtx c, tmp, addr;\n   enum machine_mode cmode;\n \n-  if (GET_CODE (x) != MEM)\n-    return x;\n+  switch (GET_CODE (x))\n+    {\n+    case MEM:\n+      break;\n+\n+    case FLOAT_EXTEND:\n+      /* Handle float extensions of constant pool references.  */\n+      tmp = XEXP (x, 0);\n+      c = avoid_constant_pool_reference (tmp);\n+      if (c != tmp && GET_CODE (c) == CONST_DOUBLE)\n+\t{\n+\t  REAL_VALUE_TYPE d;\n+\n+\t  REAL_VALUE_FROM_CONST_DOUBLE (d, c);\n+\t  return CONST_DOUBLE_FROM_REAL_VALUE (d, GET_MODE (x));\n+\t}\n+      return x;\n+\n+    default:\n+      return x;\n+    }\n+\n   addr = XEXP (x, 0);\n \n+  /* Call target hook to avoid the effects of -fpic etc...  */\n+  addr = (*targetm.delegitimize_address) (addr);\n+\n   if (GET_CODE (addr) == LO_SUM)\n     addr = XEXP (addr, 1);\n "}, {"sha": "dfc590009b38e8dbfc61013c4eba5a191c0e52ce", "filename": "gcc/target-def.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daebb7ae4a90b9463a5b6940977690e2da07ff9/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daebb7ae4a90b9463a5b6940977690e2da07ff9/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=7daebb7ae4a90b9463a5b6940977690e2da07ff9", "patch": "@@ -1,5 +1,5 @@\n /* Default initializers for a generic GCC target.\n-   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -259,6 +259,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n /* In hook.c.  */\n #define TARGET_CANNOT_MODIFY_JUMPS_P hook_bool_void_false\n #define TARGET_CANNOT_FORCE_CONST_MEM hook_bool_rtx_false\n+#define TARGET_DELEGITIMIZE_ADDRESS hook_rtx_rtx_identity\n #define TARGET_FUNCTION_OK_FOR_SIBCALL hook_bool_tree_tree_false\n #define TARGET_COMP_TYPE_ATTRIBUTES hook_int_tree_tree_1\n #define TARGET_SET_DEFAULT_TYPE_ATTRIBUTES hook_void_tree\n@@ -293,6 +294,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_SECTION_TYPE_FLAGS,\t\t\t\\\n   TARGET_CANNOT_MODIFY_JUMPS_P,\t\t\t\\\n   TARGET_CANNOT_FORCE_CONST_MEM,\t\t\\\n+  TARGET_DELEGITIMIZE_ADDRESS,\t\t\t\\\n   TARGET_FUNCTION_OK_FOR_SIBCALL,\t\t\\\n   TARGET_IN_SMALL_DATA_P,\t\t\t\\\n   TARGET_BINDS_LOCAL_P,\t\t\t\t\\"}, {"sha": "8c286f70ad1b8fd0e0f5ab793196cfb0983b10fd", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7daebb7ae4a90b9463a5b6940977690e2da07ff9/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7daebb7ae4a90b9463a5b6940977690e2da07ff9/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=7daebb7ae4a90b9463a5b6940977690e2da07ff9", "patch": "@@ -1,5 +1,5 @@\n /* Data structure definitions for a generic GCC target.\n-   Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -292,6 +292,9 @@ struct gcc_target\n   /* True if the constant X cannot be placed in the constant pool.  */\n   bool (* cannot_force_const_mem) PARAMS ((rtx));\n \n+  /* Given an address RTX, undo the effects of LEGITIMIZE_ADDRESS.  */\n+  rtx (* delegitimize_address) PARAMS ((rtx));\n+\n   /* True if it is OK to do sibling call optimization for the specified\n      call expression EXP.  DECL will be the called function, or NULL if\n      this is an indirect call.  */"}]}