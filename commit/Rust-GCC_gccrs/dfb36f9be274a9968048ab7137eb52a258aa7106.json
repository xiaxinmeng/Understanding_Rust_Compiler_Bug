{"sha": "dfb36f9be274a9968048ab7137eb52a258aa7106", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZiMzZmOWJlMjc0YTk5NjgwNDhhYjcxMzdlYjUyYTI1OGFhNzEwNg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-02-07T15:35:40Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-02-07T15:35:40Z"}, "message": "fold-const.c (negate_expr_p, [...]): Optimize -(A+B) into either (-A)-B or (-B)-A...\n\n\n\t* fold-const.c (negate_expr_p, negate_expr): Optimize -(A+B) into\n\teither (-A)-B or (-B)-A, if A or B is easily negated respectively.\n\t(fold) <MINUS_EXPR>: Optimize (A*C) - (B*C) -> (A-B)*C for both\n\tinteger types and floating point with unsafe_math_optimizations.\n\tAdd similar optimization for (A*C1) - (A*C2) -> A*(C1-C2).\n\tOptimize A - B as A + (-B), if B is easily negated.\n\nFrom-SVN: r77453", "tree": {"sha": "04db5646c3835e0841ea50cc2a2ab2d6036b7d68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04db5646c3835e0841ea50cc2a2ab2d6036b7d68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfb36f9be274a9968048ab7137eb52a258aa7106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb36f9be274a9968048ab7137eb52a258aa7106", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfb36f9be274a9968048ab7137eb52a258aa7106", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb36f9be274a9968048ab7137eb52a258aa7106/comments", "author": null, "committer": null, "parents": [{"sha": "0ea5865c17469625fcd91d2dcecf5dec6fe4ce10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ea5865c17469625fcd91d2dcecf5dec6fe4ce10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ea5865c17469625fcd91d2dcecf5dec6fe4ce10"}], "stats": {"total": 81, "additions": 68, "deletions": 13}, "files": [{"sha": "ef66edd96afc04530b2b52d68a5bd258f275403f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb36f9be274a9968048ab7137eb52a258aa7106/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb36f9be274a9968048ab7137eb52a258aa7106/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfb36f9be274a9968048ab7137eb52a258aa7106", "patch": "@@ -1,3 +1,12 @@\n+2004-02-07  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* fold-const.c (negate_expr_p, negate_expr): Optimize -(A+B) into\n+\teither (-A)-B or (-B)-A, if A or B is easily negated respectively.\n+\t(fold) <MINUS_EXPR>: Optimize (A*C) - (B*C) -> (A-B)*C for both\n+\tinteger types and floating point with unsafe_math_optimizations.\n+\tAdd similar optimization for (A*C1) - (A*C2) -> A*(C1-C2).\n+\tOptimize A - B as A + (-B), if B is easily negated.\n+\n 2004-02-07  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* c-ppoutput.c, cfganal.c, diagnostic.h, print-rtl.c,"}, {"sha": "b93665c94d04e85e61c264dcf1f140cd8ca60845", "filename": "gcc/fold-const.c", "status": "modified", "additions": 59, "deletions": 13, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfb36f9be274a9968048ab7137eb52a258aa7106/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfb36f9be274a9968048ab7137eb52a258aa7106/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=dfb36f9be274a9968048ab7137eb52a258aa7106", "patch": "@@ -878,6 +878,17 @@ negate_expr_p (tree t)\n       return negate_expr_p (TREE_REALPART (t))\n \t     && negate_expr_p (TREE_IMAGPART (t));\n \n+    case PLUS_EXPR:\n+      if (FLOAT_TYPE_P (type) && !flag_unsafe_math_optimizations)\n+\treturn false;\n+      /* -(A + B) -> (-B) - A.  */\n+      if (negate_expr_p (TREE_OPERAND (t, 1))\n+\t  && reorder_operands_p (TREE_OPERAND (t, 0),\n+\t\t\t\t TREE_OPERAND (t, 1)))\n+\treturn true;\n+      /* -(A + B) -> (-A) - B.  */\n+      return negate_expr_p (TREE_OPERAND (t, 0));\n+\n     case MINUS_EXPR:\n       /* We can't turn -(A-B) into B-A when we honor signed zeros.  */\n       return (! FLOAT_TYPE_P (type) || flag_unsafe_math_optimizations)\n@@ -979,6 +990,26 @@ negate_expr (tree t)\n     case NEGATE_EXPR:\n       return convert (type, TREE_OPERAND (t, 0));\n \n+    case PLUS_EXPR:\n+      if (! FLOAT_TYPE_P (type) || flag_unsafe_math_optimizations)\n+\t{\n+\t  /* -(A + B) -> (-B) - A.  */\n+\t  if (negate_expr_p (TREE_OPERAND (t, 1))\n+\t      && reorder_operands_p (TREE_OPERAND (t, 0),\n+\t\t\t\t     TREE_OPERAND (t, 1)))\n+\t    return convert (type,\n+\t\t\t    fold (build (MINUS_EXPR, TREE_TYPE (t),\n+\t\t\t\t\t negate_expr (TREE_OPERAND (t, 1)),\n+\t\t\t\t\t TREE_OPERAND (t, 0))));\n+\t  /* -(A + B) -> (-A) - B.  */\n+\t  if (negate_expr_p (TREE_OPERAND (t, 0)))\n+\t    return convert (type,\n+\t\t\t    fold (build (MINUS_EXPR, TREE_TYPE (t),\n+\t\t\t\t\t negate_expr (TREE_OPERAND (t, 0)),\n+\t\t\t\t\t TREE_OPERAND (t, 1))));\n+\t}\n+      break;\n+\n     case MINUS_EXPR:\n       /* - (A - B) -> B - A  */\n       if ((! FLOAT_TYPE_P (type) || flag_unsafe_math_optimizations)\n@@ -6089,19 +6120,6 @@ fold (tree expr)\n \t  if (integer_zerop (arg1))\n \t    return non_lvalue (convert (type, arg0));\n \n-\t  /* (A * C) - (B * C) -> (A-B) * C.  Since we are most concerned\n-\t     about the case where C is a constant, just try one of the\n-\t     four possibilities.  */\n-\n-\t  if (TREE_CODE (arg0) == MULT_EXPR && TREE_CODE (arg1) == MULT_EXPR\n-\t      && operand_equal_p (TREE_OPERAND (arg0, 1),\n-\t\t\t\t  TREE_OPERAND (arg1, 1), 0))\n-\t    return fold (build (MULT_EXPR, type,\n-\t\t\t\tfold (build (MINUS_EXPR, type,\n-\t\t\t\t\t     TREE_OPERAND (arg0, 0),\n-\t\t\t\t\t     TREE_OPERAND (arg1, 0))),\n-\t\t\t\tTREE_OPERAND (arg0, 1)));\n-\n \t  /* Fold A - (A & B) into ~B & A.  */\n \t  if (!TREE_SIDE_EFFECTS (arg0)\n \t      && TREE_CODE (arg1) == BIT_AND_EXPR)\n@@ -6158,6 +6176,34 @@ fold (tree expr)\n \t  && operand_equal_p (arg0, arg1, 0))\n \treturn convert (type, integer_zero_node);\n \n+      /* A - B -> A + (-B) if B is easily negatable.  */\n+      if (!wins && negate_expr_p (arg1)\n+\t  && (FLOAT_TYPE_P (type)\n+\t      || (INTEGRAL_TYPE_P (type) && flag_wrapv && !flag_trapv)))\n+\treturn fold (build (PLUS_EXPR, type, arg0, negate_expr (arg1)));\n+\n+      if (TREE_CODE (arg0) == MULT_EXPR\n+\t  && TREE_CODE (arg1) == MULT_EXPR\n+\t  && (INTEGRAL_TYPE_P (type) || flag_unsafe_math_optimizations))\n+\t{\n+          /* (A * C) - (B * C) -> (A-B) * C.  */\n+\t  if (operand_equal_p (TREE_OPERAND (arg0, 1),\n+\t\t\t       TREE_OPERAND (arg1, 1), 0))\n+\t    return fold (build (MULT_EXPR, type,\n+\t\t\t\tfold (build (MINUS_EXPR, type,\n+\t\t\t\t\t     TREE_OPERAND (arg0, 0),\n+\t\t\t\t\t     TREE_OPERAND (arg1, 0))),\n+\t\t\t\tTREE_OPERAND (arg0, 1)));\n+          /* (A * C1) - (A * C2) -> A * (C1-C2).  */\n+\t  if (operand_equal_p (TREE_OPERAND (arg0, 0),\n+\t\t\t       TREE_OPERAND (arg1, 0), 0))\n+\t    return fold (build (MULT_EXPR, type,\n+\t\t\t\tTREE_OPERAND (arg0, 0),\n+\t\t\t\tfold (build (MINUS_EXPR, type,\n+\t\t\t\t\t     TREE_OPERAND (arg0, 1),\n+\t\t\t\t\t     TREE_OPERAND (arg1, 1)))));\n+\t}\n+\n       goto associate;\n \n     case MULT_EXPR:"}]}