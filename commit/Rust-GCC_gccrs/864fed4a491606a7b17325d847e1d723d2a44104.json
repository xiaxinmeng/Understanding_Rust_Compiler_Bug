{"sha": "864fed4a491606a7b17325d847e1d723d2a44104", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY0ZmVkNGE0OTE2MDZhN2IxNzMyNWQ4NDdlMWQ3MjNkMmE0NDEwNA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-05-19T03:50:14Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-05-19T03:50:14Z"}, "message": "c++: Explain fn template argument type/value mismatches [PR66439]\n\nIn fn_type_unifcation, we are passing NULL_TREE as the 'in_decl'\nparameter to coerce_template_parms, and this is causing template\ntype/value mismatch error messages to get suppressed regardless of the\nvalue of 'complain'.\n\nThis means that when substitution into a function template fails due to\na type/value mismatch between a template parameter and the provided\ntemplate argument, we just say \"template argument deduction/substitution\nfailed:\" without a followup explanation of the failure.\n\nFix this by passing 'fn' instead of NULL_TREE to coerce_template_parms.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/66439\n\t* pt.c (fn_type_unification): Pass 'fn' instead of NULL_TREE as\n\tthe 'in_decl' parameter to coerce_template_parms.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/66439\n\t* g++.dg/cpp2a/concepts-ts4.C: Expect a \"type/value mismatch\"\n\tdiagnostic.\n\t* g++.dg/cpp2a/concepts-ts6.C: Likewise.\n\t* g++.dg/template/error56.C: Likewise.\n\t* g++.dg/template/error59.C: New test.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR c++/66439\n\t* testsuite/20_util/pair/astuple/get_neg.cc: Prune \"type/value\n\tmismatch\" messages.\n\t* testsuite/20_util/tuple/element_access/get_neg.cc: Likewise.", "tree": {"sha": "6b49a44d1ceb3f97e39ca32235262225c1fcfdf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b49a44d1ceb3f97e39ca32235262225c1fcfdf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/864fed4a491606a7b17325d847e1d723d2a44104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/864fed4a491606a7b17325d847e1d723d2a44104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/864fed4a491606a7b17325d847e1d723d2a44104", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/864fed4a491606a7b17325d847e1d723d2a44104/comments", "author": null, "committer": null, "parents": [{"sha": "489fb00b14d43ee70d9a0f82f6525d7ffd34e065", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/489fb00b14d43ee70d9a0f82f6525d7ffd34e065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/489fb00b14d43ee70d9a0f82f6525d7ffd34e065"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "cd81891201da8489ce731b354de8550b6260adc5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864fed4a491606a7b17325d847e1d723d2a44104/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864fed4a491606a7b17325d847e1d723d2a44104/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=864fed4a491606a7b17325d847e1d723d2a44104", "patch": "@@ -1,3 +1,9 @@\n+2020-05-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/66439\n+\t* pt.c (fn_type_unification): Pass 'fn' instead of NULL_TREE as\n+\tthe 'in_decl' parameter to coerce_template_parms.\n+\n 2020-05-18  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94955"}, {"sha": "50933cbc23bef46a20b0852b2510c02920e00629", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864fed4a491606a7b17325d847e1d723d2a44104/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864fed4a491606a7b17325d847e1d723d2a44104/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=864fed4a491606a7b17325d847e1d723d2a44104", "patch": "@@ -20989,7 +20989,7 @@ fn_type_unification (tree fn,\n       /* Adjust any explicit template arguments before entering the\n \t substitution context.  */\n       explicit_targs\n-\t= (coerce_template_parms (tparms, explicit_targs, NULL_TREE,\n+\t= (coerce_template_parms (tparms, explicit_targs, fn,\n \t\t\t\t  complain|tf_partial,\n \t\t\t\t  /*require_all_args=*/false,\n \t\t\t\t  /*use_default_args=*/false));"}, {"sha": "b0315b0207bd86f9e47783c8bca3db6469fd7f62", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864fed4a491606a7b17325d847e1d723d2a44104/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864fed4a491606a7b17325d847e1d723d2a44104/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=864fed4a491606a7b17325d847e1d723d2a44104", "patch": "@@ -1,3 +1,12 @@\n+2020-05-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/66439\n+\t* g++.dg/cpp2a/concepts-ts4.C: Expect a \"type/value mismatch\"\n+\tdiagnostic.\n+\t* g++.dg/cpp2a/concepts-ts6.C: Likewise.\n+\t* g++.dg/template/error56.C: Likewise.\n+\t* g++.dg/template/error59.C: New test.\n+\n 2020-05-18  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/94955"}, {"sha": "cc49ff4fb278637c50a89e94f3f7f5e92b6f10c1", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-ts4.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864fed4a491606a7b17325d847e1d723d2a44104/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864fed4a491606a7b17325d847e1d723d2a44104/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts4.C?ref=864fed4a491606a7b17325d847e1d723d2a44104", "patch": "@@ -31,4 +31,6 @@ void driver()\n   fn<0>(); // OK\n   fn<-1>(); // { dg-error \"\" }\n   fn<int>(); // { dg-error \"no matching function\" }\n+  // { dg-error \"type/value mismatch at argument 1\" \"\" { target *-*-* } .-1 }\n+  // { dg-message \"expected a constant of type .int., got .int.\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "8aede575f7553e377bff6322d90ee812dda756ac", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-ts6.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864fed4a491606a7b17325d847e1d723d2a44104/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864fed4a491606a7b17325d847e1d723d2a44104/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-ts6.C?ref=864fed4a491606a7b17325d847e1d723d2a44104", "patch": "@@ -25,6 +25,8 @@ void driver1() {\n \n   f<X>();\n   f<int>(); // { dg-error \"no matching function for call\" }\n+  // { dg-error \"type/value mismatch at argument 1\" \"\" { target *-*-* } .-1 }\n+  // { dg-message \"expected a class template, got .int.\" \"\" { target *-*-* } .-2 }\n \n   S2<int> s2a;\n   S2<char, signed char, unsigned char> s2b;\n@@ -69,4 +71,4 @@ void driver2()\n   S6<void, void> s6a;\n   S6<void, int> s6c; // { dg-error \"template constraint failure\" }\n   S6<void, void, void> s6b; // { dg-error \"wrong number of template arguments\" }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "e85471a50b09fcb0f3c4d616e034961de3b785f4", "filename": "gcc/testsuite/g++.dg/template/error56.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864fed4a491606a7b17325d847e1d723d2a44104/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror56.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864fed4a491606a7b17325d847e1d723d2a44104/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror56.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror56.C?ref=864fed4a491606a7b17325d847e1d723d2a44104", "patch": "@@ -9,4 +9,6 @@ struct A\n int main()\n {\n   A().f<1>();\t\t\t// { dg-error \"f<1>\" }\n+  // { dg-error \"type/value mismatch at argument 1\" \"\" { target *-*-* } .-1 }\n+  // { dg-message \"expected a type, got .1.\" \"\" { target *-*-* } .-2 }\n }"}, {"sha": "f81a28c2f1a523e9b13076bb7ddec4053ef080e5", "filename": "gcc/testsuite/g++.dg/template/error59.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864fed4a491606a7b17325d847e1d723d2a44104/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror59.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864fed4a491606a7b17325d847e1d723d2a44104/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror59.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ferror59.C?ref=864fed4a491606a7b17325d847e1d723d2a44104", "patch": "@@ -0,0 +1,11 @@\n+template<int N> struct S { };\n+\n+template<template<typename> class TT>\n+void foo();\n+\n+void bar()\n+{\n+  foo<S>(); // { dg-error \"no matching function\" }\n+  // { dg-error \"type/value mismatch at argument 1\" \"\" { target *-*-* } .-1 }\n+  // { dg-message \"expected a template of type .template<class> class TT., got .template<int N> struct S.\" \"\" { target *-*-* } .-2 }\n+}"}, {"sha": "ae1ec87589c23cf6a7a6e315df90c56ed5c7e16c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864fed4a491606a7b17325d847e1d723d2a44104/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864fed4a491606a7b17325d847e1d723d2a44104/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=864fed4a491606a7b17325d847e1d723d2a44104", "patch": "@@ -1,3 +1,10 @@\n+2020-05-19  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/66439\n+\t* testsuite/20_util/pair/astuple/get_neg.cc: Prune \"type/value\n+\tmismatch\" messages.\n+\t* testsuite/20_util/tuple/element_access/get_neg.cc: Likewise.\n+\n 2020-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/95147"}, {"sha": "1f76aef6d73f292c9d728b45e9ad03b8dab339fa", "filename": "libstdc++-v3/testsuite/20_util/pair/astuple/get_neg.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864fed4a491606a7b17325d847e1d723d2a44104/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864fed4a491606a7b17325d847e1d723d2a44104/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fastuple%2Fget_neg.cc?ref=864fed4a491606a7b17325d847e1d723d2a44104", "patch": "@@ -27,3 +27,4 @@ void test01()\n }\n \n // { dg-prune-output \"tuple_element<2\" }\n+// { dg-prune-output \"type/value mismatch\" }"}, {"sha": "03ad77215d276837d7f4be979a3c59df2d4bfb35", "filename": "libstdc++-v3/testsuite/20_util/tuple/element_access/get_neg.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/864fed4a491606a7b17325d847e1d723d2a44104/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/864fed4a491606a7b17325d847e1d723d2a44104/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Felement_access%2Fget_neg.cc?ref=864fed4a491606a7b17325d847e1d723d2a44104", "patch": "@@ -61,3 +61,4 @@ test03()\n }\n \n // { dg-prune-output \"no type named .type\" }\n+// { dg-prune-output \"type/value mismatch\" }"}]}