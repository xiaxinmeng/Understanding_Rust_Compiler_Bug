{"sha": "0d03db068c89d46bc62ec79395708fd19f09d3d8", "node_id": "C_kwDOANBUbNoAKDBkMDNkYjA2OGM4OWQ0NmJjNjJlYzc5Mzk1NzA4ZmQxOWYwOWQzZDg", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-06T18:59:49Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-01-06T19:01:34Z"}, "message": "i386: Improve HImode interunit moves\n\nCurrently, the compiler moves HImode values between GPR and XMM registers with:\n\n\t%vpinsrw\\t{$0, %k1, %d0|%d0, %k1, 0}\n\t%vpextrw\\t{$0, %1, %k0|%k0, %1, 0}\n\nbut it could use slightly faster and shorter:\n\n\t%vmovd\\t{%k1, %0|%0, %k1}\n\t%vmovd\\t{%1, %k0|%k0, %1}\n\n2022-01-06  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\t* config/i386/i386.c (ix86_output_ssemov) <MODE_DI>:\n\tAdd %q modifier for operands in general registers.\n\t<MODE_SI>: Add %q modifier for operands in general registers.\n\t* config/i386/i386.md (*movhi_internal): Change type attribute of\n\txmm-gpr interunit alternatives 9,10 to ssemov and mode attribute\n\tto SImode for non-avx512fp16 targets.\n\t(*movhf_internal): Ditto for xmm-gpr interunit alternatives 6,8.\n\t* config/i386/mmx.md (*movv2qi_internal):\n\tDitto for xmm-gpr interunit alternatives 8,9.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr102811-2.c (dg-final):\n\tUpdate scan-assembler-times directives.\n\t* gcc.target/i386/sse2-float16-2.c (dg-final):\n\tUpdate scan-assembler directives.", "tree": {"sha": "1c8ed7c226e6b286c3f8ceccc296277459353e97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c8ed7c226e6b286c3f8ceccc296277459353e97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d03db068c89d46bc62ec79395708fd19f09d3d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d03db068c89d46bc62ec79395708fd19f09d3d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d03db068c89d46bc62ec79395708fd19f09d3d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d03db068c89d46bc62ec79395708fd19f09d3d8/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a60c08e98acaae212840b2d3329b5bd13778581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a60c08e98acaae212840b2d3329b5bd13778581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a60c08e98acaae212840b2d3329b5bd13778581"}], "stats": {"total": 86, "additions": 51, "deletions": 35}, "files": [{"sha": "aeb7db5a5e39b114c82fe716b34b87ce49e81a47", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d03db068c89d46bc62ec79395708fd19f09d3d8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d03db068c89d46bc62ec79395708fd19f09d3d8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=0d03db068c89d46bc62ec79395708fd19f09d3d8", "patch": "@@ -5535,15 +5535,30 @@ ix86_output_ssemov (rtx_insn *insn, rtx *operands)\n \n     case MODE_DI:\n       /* Handle broken assemblers that require movd instead of movq. */\n-      if (!HAVE_AS_IX86_INTERUNIT_MOVQ\n-\t  && (GENERAL_REG_P (operands[0])\n-\t      || GENERAL_REG_P (operands[1])))\n-\treturn \"%vmovd\\t{%1, %0|%0, %1}\";\n+      if (GENERAL_REG_P (operands[0]))\n+\t{\n+\t  if (HAVE_AS_IX86_INTERUNIT_MOVQ)\n+\t    return \"%vmovq\\t{%1, %q0|%q0, %1}\";\n+\t  else\n+\t    return \"%vmovd\\t{%1, %q0|%q0, %1}\";\n+\t}\n+      else if (GENERAL_REG_P (operands[1]))\n+\t{\n+\t  if (HAVE_AS_IX86_INTERUNIT_MOVQ)\n+\t    return \"%vmovq\\t{%q1, %0|%0, %q1}\";\n+\t  else\n+\t    return \"%vmovd\\t{%q1, %0|%0, %q1}\";\n+\t}\n       else\n \treturn \"%vmovq\\t{%1, %0|%0, %1}\";\n \n     case MODE_SI:\n-      return \"%vmovd\\t{%1, %0|%0, %1}\";\n+      if (GENERAL_REG_P (operands[0]))\n+\treturn \"%vmovd\\t{%1, %k0|%k0, %1}\";\n+      else if (GENERAL_REG_P (operands[1]))\n+\treturn \"%vmovd\\t{%k1, %0|%0, %k1}\";\n+      else\n+\treturn \"%vmovd\\t{%1, %0|%0, %1}\";\n \n     case MODE_HI:\n       if (GENERAL_REG_P (operands[0]))"}, {"sha": "376df1d51d11dfc86997f44277514a16d365c6ea", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d03db068c89d46bc62ec79395708fd19f09d3d8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d03db068c89d46bc62ec79395708fd19f09d3d8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=0d03db068c89d46bc62ec79395708fd19f09d3d8", "patch": "@@ -2580,13 +2580,9 @@\n \treturn standard_sse_constant_opcode (insn, operands);\n \n       if (SSE_REG_P (operands[0]))\n-\treturn MEM_P (operands[1])\n-\t  ? \"%vpinsrw\\t{$0, %1, %d0|%d0, %1, 0}\"\n-\t  : \"%vpinsrw\\t{$0, %k1, %d0|%d0, %k1, 0}\";\n+\treturn \"%vpinsrw\\t{$0, %1, %d0|%d0, %1, 0}\";\n       else\n-\treturn MEM_P (operands[0])\n-\t  ? \"%vpextrw\\t{$0, %1, %0|%0, %1, 0}\"\n-\t  : \"%vpextrw\\t{$0, %1, %k0|%k0, %1, 0}\";\n+\treturn \"%vpextrw\\t{$0, %1, %0|%0, %1, 0}\";\n \n     case TYPE_MSKLOG:\n       if (operands[1] == const0_rtx)\n@@ -2614,13 +2610,13 @@\n \t      (const_string \"mskmov\")\n \t    (eq_attr \"alternative\" \"8\")\n \t      (const_string \"msklog\")\n-\t    (eq_attr \"alternative\" \"9,10,13,14\")\n+\t    (eq_attr \"alternative\" \"13,14\")\n \t      (if_then_else (match_test \"TARGET_AVX512FP16\")\n \t\t(const_string \"ssemov\")\n \t\t(const_string \"sselog1\"))\n \t    (eq_attr \"alternative\" \"11\")\n \t      (const_string \"sselog1\")\n-\t    (eq_attr \"alternative\" \"12\")\n+\t    (eq_attr \"alternative\" \"9,10,12\")\n \t      (const_string \"ssemov\")\n \t    (match_test \"optimize_function_for_size_p (cfun)\")\n \t      (const_string \"imov\")\n@@ -2644,7 +2640,11 @@\n \t      ]\n \t      (const_string \"orig\")))\n    (set (attr \"mode\")\n-     (cond [(eq_attr \"alternative\" \"9,10,13,14\")\n+     (cond [(eq_attr \"alternative\" \"9,10\")\n+\t      (if_then_else (match_test \"TARGET_AVX512FP16\")\n+\t\t(const_string \"HI\")\n+\t\t(const_string \"SI\"))\n+\t    (eq_attr \"alternative\" \"13,14\")\n \t      (if_then_else (match_test \"TARGET_AVX512FP16\")\n \t\t(const_string \"HI\")\n \t\t(const_string \"TI\"))\n@@ -3876,13 +3876,9 @@\n \treturn standard_sse_constant_opcode (insn, operands);\n \n       if (SSE_REG_P (operands[0]))\n-\treturn MEM_P (operands[1])\n-\t       ? \"%vpinsrw\\t{$0, %1, %d0|%d0, %1, 0}\"\n-\t       : \"%vpinsrw\\t{$0, %k1, %d0|%d0, %k1, 0}\";\n+\treturn \"%vpinsrw\\t{$0, %1, %d0|%d0, %1, 0}\";\n       else\n-\treturn MEM_P (operands[0])\n-\t       ? \"%vpextrw\\t{$0, %1, %0|%0, %1, 0}\"\n-\t       : \"%vpextrw\\t{$0, %1, %k0|%k0, %1, 0}\";\n+\treturn \"%vpextrw\\t{$0, %1, %0|%0, %1, 0}\";\n \n     default:\n       if (get_attr_mode (insn) == MODE_SI)\n@@ -3901,9 +3897,9 @@\n    (set (attr \"type\")\n \t(cond [(eq_attr \"alternative\" \"4\")\n \t\t (const_string \"sselog1\")\n-\t       (eq_attr \"alternative\" \"5\")\n+\t       (eq_attr \"alternative\" \"5,6,8\")\n \t\t (const_string \"ssemov\")\n-\t       (eq_attr \"alternative\" \"6,7,8,9\")\n+\t       (eq_attr \"alternative\" \"7,9\")\n \t\t (if_then_else\n \t\t   (match_test (\"TARGET_AVX512FP16\"))\n \t\t   (const_string \"ssemov\")\n@@ -3930,7 +3926,12 @@\n    (set (attr \"mode\")\n \t(cond [(eq_attr \"alternative\" \"4\")\n \t\t (const_string \"V4SF\")\n-\t       (eq_attr \"alternative\" \"6,7,8,9\")\n+\t       (eq_attr \"alternative\" \"6,8\")\n+\t\t (if_then_else\n+\t\t   (match_test \"TARGET_AVX512FP16\")\n+\t\t   (const_string \"HI\")\n+\t\t   (const_string \"SI\"))\n+\t       (eq_attr \"alternative\" \"7,9\")\n \t\t (if_then_else\n \t\t   (match_test \"TARGET_AVX512FP16\")\n \t\t   (const_string \"HI\")"}, {"sha": "8e0a6490b7bae3dba4746c5d1ad222b145e36e27", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d03db068c89d46bc62ec79395708fd19f09d3d8/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d03db068c89d46bc62ec79395708fd19f09d3d8/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=0d03db068c89d46bc62ec79395708fd19f09d3d8", "patch": "@@ -389,13 +389,9 @@\n \treturn standard_sse_constant_opcode (insn, operands);\n \n       if (SSE_REG_P (operands[0]))\n-\treturn MEM_P (operands[1])\n-\t  ? \"%vpinsrw\\t{$0, %1, %d0|%d0, %1, 0}\"\n-\t  : \"%vpinsrw\\t{$0, %k1, %d0|%d0, %k1, 0}\";\n+\treturn \"%vpinsrw\\t{$0, %1, %d0|%d0, %1, 0}\";\n       else\n-\treturn MEM_P (operands[0])\n-\t  ? \"%vpextrw\\t{$0, %1, %0|%0, %1, 0}\"\n-\t  : \"%vpextrw\\t{$0, %1, %k0|%k0, %1, 0}\";\n+\treturn \"%vpextrw\\t{$0, %1, %0|%0, %1, 0}\";\n \n     case TYPE_SSEMOV:\n       return ix86_output_ssemov (insn, operands);\n@@ -412,13 +408,13 @@\n \t       ]\n \t       (const_string \"*\")))\n    (set (attr \"type\")\n-     (cond [(eq_attr \"alternative\" \"6,7,8,9\")\n+     (cond [(eq_attr \"alternative\" \"6,7\")\n \t      (if_then_else (match_test \"TARGET_AVX512FP16\")\n \t\t(const_string \"ssemov\")\n \t\t(const_string \"sselog1\"))\n \t    (eq_attr \"alternative\" \"4\")\n \t      (const_string \"sselog1\")\n-\t    (eq_attr \"alternative\" \"5\")\n+\t    (eq_attr \"alternative\" \"5,8,9\")\n \t      (const_string \"ssemov\")\n \t    (match_test \"optimize_function_for_size_p (cfun)\")\n \t      (const_string \"imov\")\n@@ -440,10 +436,14 @@\n \t      ]\n \t      (const_string \"orig\")))\n    (set (attr \"mode\")\n-     (cond [(eq_attr \"alternative\" \"6,7,8,9\")\n+     (cond [(eq_attr \"alternative\" \"6,7\")\n \t      (if_then_else (match_test \"TARGET_AVX512FP16\")\n \t\t(const_string \"HI\")\n \t\t(const_string \"TI\"))\n+\t    (eq_attr \"alternative\" \"8,9\")\n+\t      (if_then_else (match_test \"TARGET_AVX512FP16\")\n+\t\t(const_string \"HI\")\n+\t\t(const_string \"SI\"))\n \t    (eq_attr \"alternative\" \"4\")\n \t      (cond [(match_test \"TARGET_AVX\")\n \t\t       (const_string \"TI\")"}, {"sha": "97bc9b14e7f98b4b8c03ec2b5af313cb18e5df1e", "filename": "gcc/testsuite/gcc.target/i386/pr102811-2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d03db068c89d46bc62ec79395708fd19f09d3d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102811-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d03db068c89d46bc62ec79395708fd19f09d3d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102811-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102811-2.c?ref=0d03db068c89d46bc62ec79395708fd19f09d3d8", "patch": "@@ -1,7 +1,6 @@\n /* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-O2 -mf16c -mno-avx512fp16\" } */\n-/* { dg-final { scan-assembler-times \"pextrw\" 1 } } */\n-/* { dg-final { scan-assembler-times \"pinsrw\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovd\" 2 } } */\n /* { dg-final { scan-assembler-not \"\\\\\\(%rsp\\\\\\)\"} } */\n short test (_Float16 a)\n {"}, {"sha": "25e17231c1a360c64bc989e4b35621166de13115", "filename": "gcc/testsuite/gcc.target/i386/sse2-float16-2.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d03db068c89d46bc62ec79395708fd19f09d3d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-float16-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d03db068c89d46bc62ec79395708fd19f09d3d8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-float16-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-float16-2.c?ref=0d03db068c89d46bc62ec79395708fd19f09d3d8", "patch": "@@ -13,4 +13,5 @@ foo (union flt x)\n   return x.flt;\n }\n \n-/* { dg-final { scan-assembler {(?n)pinsrw[\\t ].*%xmm0} } } */\n+/* { dg-final { scan-assembler {(?n)pinsrw[\\t ].*%xmm0} { target ia32 } } } */\n+/* { dg-final { scan-assembler {(?n)movd[\\t ].*%xmm0} { target { ! ia32 } } } } */"}]}