{"sha": "00a4618b3f221641d3c617a55bdd2d22f13ae44d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBhNDYxOGIzZjIyMTY0MWQzYzYxN2E1NWJkZDJkMjJmMTNhZTQ0ZA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-12-08T21:46:56Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-12-08T21:46:56Z"}, "message": "re PR fortran/34342 (BOZ extensions not diagnosed as such with -std=f95)\n\n2007-12-08  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/34342\n        PR fortran/34345\n        PR fortran/18026\n        PR fortran/29471\n\n        * gfortran.texi (BOZ literal constants): Improve documentation\n        and adapt for BOZ changes.\n        * Make-lang.ini (resolve.o): Add target-memory.h dependency.\n        * gfortran.h (gfc_expr): Add is_boz flag.\n        * expr.c: Include target-memory.h.\n        (gfc_check_assign): Support transferring BOZ for real/cmlx.\n        * resolve.c: Include target-memory.h\n        (resolve_ordinary_assign): Support transferring BOZ for real/cmlx.\n        * target-memory.c (gfc_convert_boz): New function.\n        * target-memory.c (gfc_convert_boz): Add prototype.\n        * primary.c (match_boz_constant): Set is_boz, enable F95 error\n        also without -pedantic, and allow for Fortran 2003 BOZ.\n        (match_real_constant): Fix comment.\n        * simplify.c\n        * (simplify_cmplx,gfc_simplify_dble,gfc_simplify_float,\n        gfc_simplify_real): Support Fortran 2003 BOZ.\n\n2007-12-08  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/34342\n        PR fortran/34345\n        PR fortran/18026\n        PR fortran/29471\n\n        * gfortran.dg/boz_8.f90: New.\n        * gfortran.dg/boz_9.f90: New.\n        * gfortran.dg/boz_10.f90: New.\n        * gfortran.dg/boz_7.f90: Update dg-warning.\n        * gfortran.dg/pr16433.f: Add dg-error.\n        * gfortan.dg/ibits.f90: Update dg-warning.\n        * gfortran.dg/unf_io_convert_1.f90: Update/delete dg-warning.\n        * gfortran.dg/unf_io_convert_2.f90: Ditto.\n\nFrom-SVN: r130713", "tree": {"sha": "68c3248c30a91eca167c87f49666a1386e036a1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68c3248c30a91eca167c87f49666a1386e036a1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00a4618b3f221641d3c617a55bdd2d22f13ae44d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a4618b3f221641d3c617a55bdd2d22f13ae44d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00a4618b3f221641d3c617a55bdd2d22f13ae44d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00a4618b3f221641d3c617a55bdd2d22f13ae44d/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1b271c9ba316d536d177249070d510f74a06af3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b271c9ba316d536d177249070d510f74a06af3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b271c9ba316d536d177249070d510f74a06af3f"}], "stats": {"total": 442, "additions": 396, "deletions": 46}, "files": [{"sha": "290005f339814ac2156fb86884d5389c98384198", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=00a4618b3f221641d3c617a55bdd2d22f13ae44d", "patch": "@@ -1,3 +1,26 @@\n+2007-12-08  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34342\n+\tPR fortran/34345\n+\tPR fortran/18026\n+\tPR fortran/29471\n+\n+\t* gfortran.texi (BOZ literal constants): Improve documentation\n+\tand adapt for BOZ changes.\n+\t* Make-lang.ini (resolve.o): Add target-memory.h dependency.\n+\t* gfortran.h (gfc_expr): Add is_boz flag.\n+\t* expr.c: Include target-memory.h.\n+\t(gfc_check_assign): Support transferring BOZ for real/cmlx.\n+\t* resolve.c: Include target-memory.h\n+\t(resolve_ordinary_assign): Support transferring BOZ for real/cmlx.\n+\t* target-memory.c (gfc_convert_boz): New function.\n+\t* target-memory.c (gfc_convert_boz): Add prototype.\n+\t* primary.c (match_boz_constant): Set is_boz, enable F95 error\n+\talso without -pedantic, and allow for Fortran 2003 BOZ.\n+\t(match_real_constant): Fix comment.\n+\t* simplify.c (simplify_cmplx,gfc_simplify_dble,gfc_simplify_float,\n+\tgfc_simplify_real): Support Fortran 2003 BOZ.\n+\n 2007-12-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/34359"}, {"sha": "0f5d032343382acc42f1d20d767dfacd62561d00", "filename": "gcc/fortran/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ffortran%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ffortran%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FMake-lang.in?ref=00a4618b3f221641d3c617a55bdd2d22f13ae44d", "patch": "@@ -324,6 +324,6 @@ fortran/trans-intrinsic.o: $(GFORTRAN_TRANS_DEPS) fortran/mathbuiltins.def \\\n   gt-fortran-trans-intrinsic.h\n fortran/dependency.o: $(GFORTRAN_TRANS_DEPS) fortran/dependency.h\n fortran/trans-common.o: $(GFORTRAN_TRANS_DEPS) $(TARGET_H) $(RTL_H)\n-fortran/resolve.o: fortran/dependency.h fortran/data.h\n+fortran/resolve.o: fortran/dependency.h fortran/data.h fortran/target-memory.h\n fortran/data.o: fortran/data.h\n fortran/options.o: $(PARAMS_H) $(TARGET_H)"}, {"sha": "1242e5eb0a90b37a371b881a9079bd7e8d08bf7e", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=00a4618b3f221641d3c617a55bdd2d22f13ae44d", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gfortran.h\"\n #include \"arith.h\"\n #include \"match.h\"\n+#include \"target-memory.h\" /* for gfc_convert_boz */\n \n /* Get a new expr node.  */\n \n@@ -2723,6 +2724,29 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform)\n       && gfc_check_conformance (\"array assignment\", lvalue, rvalue) != SUCCESS)\n     return FAILURE;\n \n+  if (rvalue->is_boz && lvalue->ts.type != BT_INTEGER\n+      && lvalue->symtree->n.sym->attr.data\n+      && gfc_notify_std (GFC_STD_GNU, \"Extension: BOZ literal at %L used to \"\n+                         \"initialize non-integer variable '%s'\",\n+\t\t\t &rvalue->where, lvalue->symtree->n.sym->name)\n+\t == FAILURE)\n+    return FAILURE;\n+  else if (rvalue->is_boz && !lvalue->symtree->n.sym->attr.data\n+      && gfc_notify_std (GFC_STD_GNU, \"Extension: BOZ literal at %L outside \"\n+\t\t\t \"a DATA statement and outside INT/REAL/DBLE/CMPLX\",\n+\t\t\t &rvalue->where) == FAILURE)\n+    return FAILURE;\n+\n+  /* Handle the case of a BOZ literal on the RHS.  */\n+  if (rvalue->is_boz && lvalue->ts.type != BT_INTEGER)\n+    {\n+      if (gfc_option.warn_surprising)\n+        gfc_warning (\"BOZ literal at %L is bitwise transferred \"\n+                     \"non-integer symbol '%s'\", &rvalue->where,\n+                     lvalue->symtree->n.sym->name);\n+      gfc_convert_boz (rvalue, &lvalue->ts);\n+    }\n+\n   if (gfc_compare_types (&lvalue->ts, &rvalue->ts))\n     return SUCCESS;\n "}, {"sha": "10453389dfe9ec75e7c0408c91367d70578d5edb", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=00a4618b3f221641d3c617a55bdd2d22f13ae44d", "patch": "@@ -1430,7 +1430,7 @@ typedef struct gfc_expr\n \n   /* True if the expression is a call to a function that returns an array,\n      and if we have decided not to allocate temporary data for that array.  */\n-  unsigned int inline_noncopying_intrinsic : 1;\n+  unsigned int inline_noncopying_intrinsic : 1, is_boz : 1;\n \n   /* Used to quickly find a given constructor by its offset.  */\n   splay_tree con_by_offset;"}, {"sha": "84795fb016d3556abcaa3ffab2e0d2462294c152", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 41, "deletions": 19, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=00a4618b3f221641d3c617a55bdd2d22f13ae44d", "patch": "@@ -862,6 +862,9 @@ Renaming of operators in the @code{USE} statement.\n @cindex ISO C Bindings\n Interoperability with C (ISO C Bindings)\n \n+@item\n+BOZ as argument of INT, REAL, DBLE and CMPLX.\n+\n @end itemize\n \n \n@@ -1084,26 +1087,45 @@ of the @code{READ} statement, and the output item lists of the\n @section BOZ literal constants\n @cindex BOZ literal constants\n \n+Besides decimal constants, Fortran also supports binary (@code{b}),\n+octal (@code{o}) and hexadecimal (@code{z}) integer constants. The\n+syntax is: @samp{prefix quote digits quote}, were the prefix is\n+either @code{b}, @code{o} or @code{z}, quote is either @code{'} or\n+@code{\"} and the digits are for binary @code{0} or @code{1}, for\n+octal between @code{0} and @code{7}, and for hexadecimal between\n+@code{0} and @code{F}. (Example: @code{b'01011101'}.)\n+\n+Up to Fortran 95, BOZ literals were only allowed to initialize\n+integer variables in DATA statements. Since Fortran 2003 BOZ literals\n+are also allowed as argument of @code{REAL}, @code{DBLE}, @code{INT}\n+and @code{CMPLX}; the result is the same as if the integer BOZ\n+literal had been converted by @code{TRANSFER} to, respectively,\n+@code{real}, @code{double precision}, @code{integer} or @code{complex}.\n+The GNU Fortran intrinsic procedure @code{FLOAT}, @code{DFLOAT},\n+@code{COMPLEX} and @code{DCMPLX} are treated alike.\n+\n As an extension, GNU Fortran allows hexadecimal BOZ literal constants to\n-be specified using the X prefix, in addition to the standard Z prefix.\n-BOZ literal constants can also be specified by adding a suffix to the\n-string. For example, @code{Z'ABC'} and @code{'ABC'Z} are equivalent.\n-\n-The Fortran standard restricts the appearance of a BOZ literal constant\n-to the @code{DATA} statement, and it is expected to be assigned to an\n-@code{INTEGER} variable.  GNU Fortran permits a BOZ literal to appear in\n-any initialization expression as well as assignment statements.\n-\n-Attempts to use a BOZ literal constant to do a bitwise initialization of\n-a variable can lead to confusion.  A BOZ literal constant is converted\n-to an @code{INTEGER} value with the kind type with the largest decimal\n-representation, and this value is then converted numerically to the type\n-and kind of the variable in question.  Thus, one should not expect a\n-bitwise copy of the BOZ literal constant to be assigned to a @code{REAL}\n-variable.\n-\n-Similarly, initializing an @code{INTEGER} variable with a statement such\n-as @code{DATA i/Z'FFFFFFFF'/} will produce an integer overflow rather\n+be specified using the @code{X} prefix, in addition to the standard\n+@code{Z} prefix. The BOZ literal can also be specified by adding a\n+suffix to the string, for example, @code{Z'ABC'} and @code{'ABC'Z} are\n+equivalent.\n+\n+Furthermore, GNU Fortran allows using BOZ literal constants outside\n+DATA statements and the four intrinsic functions allowed by Fortran 2003.\n+In DATA statements, in direct assignments, where the right-hand side\n+only contains a BOZ literal constant, and for old-style initializers of\n+the form @code{integer i /o'0173'/}, the constant is transferred\n+as if @code{TRANSFER} had been used. In all other cases, the BOZ literal\n+constant is converted to an @code{INTEGER} value with\n+the largest decimal representation.  This value is then converted\n+numerically to the type and kind of the variable in question.\n+(For instance @code{real :: r = b'0000001' + 1} initializes @code{r}\n+with @code{2.0}.) As different compilers implement the extension\n+differently, one should be careful when doing bitwise initialization\n+of non-integer variables.\n+\n+Note that initializing an @code{INTEGER} variable with a statement such\n+as @code{DATA i/Z'FFFFFFFF'/} will give an integer overflow error rather\n than the desired result of @math{-1} when @code{i} is a 32-bit integer\n on a system that supports 64-bit integers.  The @samp{-fno-range-check}\n option can be used as a workaround for legacy code that initializes"}, {"sha": "155cfb16dfc1c7de625d246ccf1861c53510bfbb", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=00a4618b3f221641d3c617a55bdd2d22f13ae44d", "patch": "@@ -349,7 +349,7 @@ match_boz_constant (gfc_expr **result)\n   if (delim != '\\'' && delim != '\\\"')\n     goto backup;\n \n-  if (x_hex && pedantic\n+  if (x_hex\n       && (gfc_notify_std (GFC_STD_GNU, \"Extension: Hexadecimal \"\n \t\t\t  \"constant at %C uses non-standard syntax\")\n \t  == FAILURE))\n@@ -415,17 +415,18 @@ match_boz_constant (gfc_expr **result)\n   kind = gfc_max_integer_kind;\n   e = gfc_convert_integer (buffer, kind, radix, &gfc_current_locus);\n \n+  /* Mark as boz variable.  */\n+  e->is_boz = 1;\n+\n   if (gfc_range_check (e) != ARITH_OK)\n     {\n       gfc_error (\"Integer too big for integer kind %i at %C\", kind);\n       gfc_free_expr (e);\n       return MATCH_ERROR;\n     }\n \n-  /* FIXME: Fortran 2003 allows BOZ also in REAL(), CMPLX(), INT();\n-     see PR18026 and PR29471.  */\n   if (!gfc_in_match_data ()\n-      && (gfc_notify_std (GFC_STD_GNU, \"Extension: BOZ used outside a DATA \"\n+      && (gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: BOZ used outside a DATA \"\n \t\t\t  \"statement at %C\")\n \t  == FAILURE))\n       return MATCH_ERROR;\n@@ -440,7 +441,7 @@ match_boz_constant (gfc_expr **result)\n \n \n /* Match a real constant of some sort.  Allow a signed constant if signflag\n-   is nonzero.  Allow integer constants if allow_int is true.  */\n+   is nonzero.  */\n \n static match\n match_real_constant (gfc_expr **result, int signflag)"}, {"sha": "c5b95b46a045a7ee8193e884d117c4ac1664977e", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=00a4618b3f221641d3c617a55bdd2d22f13ae44d", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"arith.h\"  /* For gfc_compare_expr().  */\n #include \"dependency.h\"\n #include \"data.h\"\n+#include \"target-memory.h\" /* for gfc_simplify_transfer */\n \n /* Types used in equivalence statements.  */\n \n@@ -5885,7 +5886,6 @@ resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)\n   int n;\n   gfc_ref *ref;\n \n-\n   if (gfc_extend_assign (code, ns) == SUCCESS)\n     {\n       lhs = code->ext.actual->expr;\n@@ -5912,6 +5912,24 @@ resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)\n   lhs = code->expr;\n   rhs = code->expr2;\n \n+  if (rhs->is_boz\n+      && gfc_notify_std (GFC_STD_GNU, \"Extension: BOZ literal at %L outside \"\n+                         \"a DATA statement and outside INT/REAL/DBLE/CMPLX\",\n+                         &code->loc) == FAILURE)\n+    return false;\n+\n+  /* Handle the case of a BOZ literal on the RHS.  */\n+  if (rhs->is_boz && lhs->ts.type != BT_INTEGER)\n+    {\n+      if (gfc_option.warn_surprising)\n+\tgfc_warning (\"BOZ literal at %L is bitwise transferred \"\n+\t\t     \"non-integer symbol '%s'\", &code->loc,\n+\t\t     lhs->symtree->n.sym->name);\n+\n+      gfc_convert_boz (rhs, &lhs->ts);\n+    }\n+\n+\n   if (lhs->ts.type == BT_CHARACTER\n \t&& gfc_option.warn_character_truncation)\n     {"}, {"sha": "ea807d1d42169e85fe6e1d06e874cc8c45458b1a", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 56, "deletions": 5, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=00a4618b3f221641d3c617a55bdd2d22f13ae44d", "patch": "@@ -740,7 +740,8 @@ simplify_cmplx (const char *name, gfc_expr *x, gfc_expr *y, int kind)\n   switch (x->ts.type)\n     {\n     case BT_INTEGER:\n-      mpfr_set_z (result->value.complex.r, x->value.integer, GFC_RND_MODE);\n+      if (!x->is_boz)\n+\tmpfr_set_z (result->value.complex.r, x->value.integer, GFC_RND_MODE);\n       break;\n \n     case BT_REAL:\n@@ -761,7 +762,8 @@ simplify_cmplx (const char *name, gfc_expr *x, gfc_expr *y, int kind)\n       switch (y->ts.type)\n \t{\n \tcase BT_INTEGER:\n-\t  mpfr_set_z (result->value.complex.i, y->value.integer, GFC_RND_MODE);\n+\t  if (!y->is_boz)\n+\t    mpfr_set_z (result->value.complex.i, y->value.integer, GFC_RND_MODE);\n \t  break;\n \n \tcase BT_REAL:\n@@ -773,6 +775,25 @@ simplify_cmplx (const char *name, gfc_expr *x, gfc_expr *y, int kind)\n \t}\n     }\n \n+  /* Handle BOZ.  */\n+  if (x->is_boz)\n+    {\n+      gfc_typespec ts;\n+      ts.kind = result->ts.kind;\n+      ts.type = BT_REAL;\n+      gfc_convert_boz (x, &ts);\n+      mpfr_set (result->value.complex.r, x->value.real, GFC_RND_MODE);\n+    }\n+\n+  if (y && y->is_boz)\n+    {\n+      gfc_typespec ts;\n+      ts.kind = result->ts.kind;\n+      ts.type = BT_REAL;\n+      gfc_convert_boz (y, &ts);\n+      mpfr_set (result->value.complex.i, y->value.real, GFC_RND_MODE);\n+    }\n+\n   return range_check (result, name);\n }\n \n@@ -918,7 +939,8 @@ gfc_simplify_dble (gfc_expr *e)\n   switch (e->ts.type)\n     {\n     case BT_INTEGER:\n-      result = gfc_int2real (e, gfc_default_double_kind);\n+      if (!e->is_boz)\n+\tresult = gfc_int2real (e, gfc_default_double_kind);\n       break;\n \n     case BT_REAL:\n@@ -933,6 +955,15 @@ gfc_simplify_dble (gfc_expr *e)\n       gfc_internal_error (\"gfc_simplify_dble(): bad type at %L\", &e->where);\n     }\n \n+  if (e->ts.type == BT_INTEGER && e->is_boz)\n+    {\n+      gfc_typespec ts;\n+      ts.type = BT_REAL;\n+      ts.kind = gfc_default_double_kind;\n+      result = gfc_copy_expr (e);\n+      gfc_convert_boz (result, &ts);\n+    }\n+\n   return range_check (result, \"DBLE\");\n }\n \n@@ -1111,7 +1142,18 @@ gfc_simplify_float (gfc_expr *a)\n   if (a->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n-  result = gfc_int2real (a, gfc_default_real_kind);\n+  if (a->is_boz)\n+    {\n+      gfc_typespec ts;\n+\n+      ts.type = BT_REAL;\n+      ts.kind = gfc_default_real_kind;\n+\n+      result = gfc_copy_expr (a);\n+      gfc_convert_boz (result, &ts);\n+    }\n+  else\n+    result = gfc_int2real (a, gfc_default_real_kind);\n   return range_check (result, \"FLOAT\");\n }\n \n@@ -2954,7 +2996,8 @@ gfc_simplify_real (gfc_expr *e, gfc_expr *k)\n   switch (e->ts.type)\n     {\n     case BT_INTEGER:\n-      result = gfc_int2real (e, kind);\n+      if (!e->is_boz)\n+\tresult = gfc_int2real (e, kind);\n       break;\n \n     case BT_REAL:\n@@ -2970,6 +3013,14 @@ gfc_simplify_real (gfc_expr *e, gfc_expr *k)\n       /* Not reached */\n     }\n \n+  if (e->ts.type == BT_INTEGER && e->is_boz)\n+    {\n+      gfc_typespec ts;\n+      ts.type = BT_REAL;\n+      ts.kind = kind;\n+      result = gfc_copy_expr (e);\n+      gfc_convert_boz (result, &ts);\n+    }\n   return range_check (result, \"REAL\");\n }\n "}, {"sha": "92318e2582cf0673985f5c199b8219d9a9810680", "filename": "gcc/fortran/target-memory.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ffortran%2Ftarget-memory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ffortran%2Ftarget-memory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.c?ref=00a4618b3f221641d3c617a55bdd2d22f13ae44d", "patch": "@@ -595,3 +595,46 @@ gfc_merge_initializers (gfc_typespec ts, gfc_expr *e, unsigned char *data,\n \n   return len;\n }\n+\n+void\n+gfc_convert_boz (gfc_expr *expr, gfc_typespec *ts)\n+{\n+  size_t buffer_size;\n+  unsigned char *buffer;\n+\n+  if (!expr->is_boz)\n+    return;\n+\n+  gcc_assert (expr->expr_type == EXPR_CONSTANT\n+\t      && expr->ts.type == BT_INTEGER);\n+\n+  /* Don't convert BOZ to logical, character, derived etc.  */\n+  if (ts->type == BT_REAL)\n+    buffer_size = size_float (ts->kind);\n+  else if (ts->type == BT_COMPLEX)\n+    buffer_size = size_complex (ts->kind);\n+  else\n+    return;\n+\n+  buffer_size = MAX (buffer_size, size_integer (expr->ts.kind));\n+\n+  buffer = (unsigned char*)alloca (buffer_size);\n+  encode_integer (expr->ts.kind, expr->value.integer, buffer, buffer_size);\n+  mpz_clear (expr->value.integer);\n+\n+  if (ts->type == BT_REAL)\n+    {\n+      mpfr_init (expr->value.real);\n+      gfc_interpret_float (ts->kind, buffer, buffer_size, expr->value.real);\n+    }\n+  else\n+    {\n+      mpfr_init (expr->value.complex.r);\n+      mpfr_init (expr->value.complex.i);\n+      gfc_interpret_complex (ts->kind, buffer, buffer_size,\n+\t\t\t     expr->value.complex.r, expr->value.complex.i);\n+    }\n+  expr->is_boz = 0;  \n+  expr->ts.type = ts->type;\n+  expr->ts.kind = ts->kind;\n+}"}, {"sha": "ac1ba0ad24be4e6673c6639586013da36850e806", "filename": "gcc/fortran/target-memory.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ffortran%2Ftarget-memory.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ffortran%2Ftarget-memory.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.h?ref=00a4618b3f221641d3c617a55bdd2d22f13ae44d", "patch": "@@ -24,6 +24,9 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"gfortran.h\"\n \n+/* Convert a BOZ to REAL or COMPLEX.  */\n+void gfc_convert_boz (gfc_expr *, gfc_typespec *);\n+\n /* Return the size of an expression in its target representation.  */\n size_t gfc_target_expr_size (gfc_expr *);\n "}, {"sha": "cbf82bf38eb800a0456b593d163faa0cc1cb8768", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00a4618b3f221641d3c617a55bdd2d22f13ae44d", "patch": "@@ -1,3 +1,19 @@\n+2007-12-06  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/34342\n+\tPR fortran/34345\n+\tPR fortran/18026\n+\tPR fortran/29471\n+\n+\t* gfortran.dg/boz_8.f90: New.\n+\t* gfortran.dg/boz_9.f90: New.\n+\t* gfortran.dg/boz_10.f90: New.\n+\t* gfortran.dg/boz_7.f90: Update dg-warning.\n+\t* gfortran.dg/pr16433.f: Add dg-error.\n+\t* gfortan.dg/ibits.f90: Update dg-warning.\n+\t* gfortran.dg/unf_io_convert_1.f90: Update/delete dg-warning.\n+\t* gfortran.dg/unf_io_convert_2.f90: Ditto.\n+\n 2007-12-08  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/34359"}, {"sha": "a88bbde6522ca8b6651914cc6b65ea42deda3ec5", "filename": "gcc/testsuite/gfortran.dg/boz_10.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_10.f90?ref=00a4618b3f221641d3c617a55bdd2d22f13ae44d", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+!\n+! PR fortran/34342\n+!\n+! Diagnose BOZ literal for non-integer variables in\n+! a DATA statement. And outside DATA statements.\n+!\n+real :: r\n+integer :: i\n+r = real(z'FFFF') ! { dg-error \"outside a DATA statement\" }\n+i = int(z'4455')  ! { dg-error \"outside a DATA statement\" }\n+r = z'FFFF' + 1.0 ! { dg-error \"outside a DATA statement\" }\n+i = z'4455' + 1   ! { dg-error \"outside a DATA statement\" }\n+end"}, {"sha": "348f561d49c95fb6096cb45550f8ca8118750a74", "filename": "gcc/testsuite/gfortran.dg/boz_7.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_7.f90?ref=00a4618b3f221641d3c617a55bdd2d22f13ae44d", "patch": "@@ -6,7 +6,7 @@\n ! Some BOZ extensions where not diagnosed\n !\n integer :: k, m\n-integer :: j = z'000abc' ! { dg-error \"Extension: BOZ used outside a DATA statement\" }\n+integer :: j = z'000abc' ! { dg-error \"BOZ used outside a DATA statement\" }\n data k/x'0003'/ ! { dg-error \"uses non-standard syntax\" }\n data m/'0003'z/ ! { dg-error \"uses non-standard postfix syntax\" }\n end"}, {"sha": "25e02a8c69b231975faba73a9c845706e7d461a3", "filename": "gcc/testsuite/gfortran.dg/boz_8.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_8.f90?ref=00a4618b3f221641d3c617a55bdd2d22f13ae44d", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+!\n+! PR fortran/34342\n+!\n+! Diagnose BOZ literal for non-integer variables in\n+! a DATA statement. Cf. Fortran 2003, 5.2.5 DATA statement:\n+! \"If a data-stmt-constant is a boz-literal-constant, the\n+!  corresponding variable shall be of type integer.\"\n+!\n+real :: r\n+integer :: i\n+data i/z'111'/, r/z'4455'/ ! { dg-error \"BOZ literal at .1. used to initialize non-integer variable 'r'\" }\n+r = z'FFFF' ! { dg-error \"outside a DATA statement\" }\n+i = z'4455' ! { dg-error \"outside a DATA statement\" }\n+end"}, {"sha": "e9bb79e4e2db9ac8823c9b97c19f401f1a3ec395", "filename": "gcc/testsuite/gfortran.dg/boz_9.f90", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fboz_9.f90?ref=00a4618b3f221641d3c617a55bdd2d22f13ae44d", "patch": "@@ -0,0 +1,118 @@\n+! { dg-do run }\n+! { dg-options \"-fno-range-check\" }\n+!\n+! PR fortran/34342\n+!\n+! Test for Fortran 2003 BOZ.\n+!\n+program f2003\n+implicit none\n+\n+real,parameter             :: r2c = real(int(z'3333'))\n+real,parameter             :: rc  = real(z'3333')\n+double precision,parameter :: dc  = dble(Z'3FD34413509F79FF')\n+complex,parameter          :: z1c = cmplx(b'10101',-4.0)\n+complex,parameter          :: z2c = cmplx(5.0, o'01245')\n+\n+real             :: r2 = real(int(z'3333'))\n+real             :: r  = real(z'3333')\n+double precision :: d  = dble(Z'3FD34413509F79FF')\n+complex          :: z1 = cmplx(b'10101',-4.0)\n+complex          :: z2 = cmplx(5.0, o'01245')\n+\n+if (r2c /= 13107.0) stop '1'\n+if (rc  /= 1.83668190E-41) stop '2'\n+if (dc /= 0.30102999566398120) stop '3'\n+if (real(z1c) /= 2.94272678E-44 .or. aimag(z1c) /= -4.0) stop '4'\n+if (real(z2c) /= 5.0 .or. aimag(z2c) /= 9.48679060E-43) stop '5'\n+\n+if (r2 /= 13107.0) stop '1'\n+if (r  /= 1.83668190E-41) stop '2'\n+if (d /= 0.30102999566398120) stop '3'\n+if (real(z1) /= 2.94272678E-44 .or. aimag(z1) /= -4.0) stop '4'\n+if (real(z2) /= 5.0 .or. aimag(z2) /= 9.48679060E-43) stop '5'\n+\n+r2 = dble(int(z'3333'))\n+r = real(z'3333')\n+d = dble(Z'3FD34413509F79FF')\n+z1 = cmplx(b'10101',-4.0)\n+z2 = cmplx(5.0, o'01245')\n+\n+if (r2 /= 13107.0) stop '1'\n+if (r  /= 1.83668190E-41) stop '2'\n+if (d /= 0.30102999566398120) stop '3'\n+if (real(z1) /= 2.94272678E-44 .or. aimag(z1) /= -4.0) stop '4'\n+if (real(z2) /= 5.0 .or. aimag(z2) /= 9.48679060E-43) stop '5'\n+\n+call test4()\n+call test8()\n+\n+contains\n+\n+subroutine test4\n+real,parameter             :: r2c = real(int(z'3333', kind=4), kind=4)\n+real,parameter             :: rc  = real(z'3333', kind=4)\n+complex,parameter          :: z1c = cmplx(b'10101',-4.0, kind=4)\n+complex,parameter          :: z2c = cmplx(5.0, o'01245', kind=4)\n+\n+real             :: r2 = real(int(z'3333', kind=4), kind=4)\n+real             :: r  = real(z'3333', kind=4)\n+complex          :: z1 = cmplx(b'10101',-4.0, kind=4)\n+complex          :: z2 = cmplx(5.0, o'01245', kind=4)\n+\n+if (r2c /= 13107.0) stop '1'\n+if (rc  /= 1.83668190E-41) stop '2'\n+if (real(z1c) /= 2.94272678E-44 .or. aimag(z1c) /= -4.0) stop '4'\n+if (real(z2c) /= 5.0 .or. aimag(z2c) /= 9.48679060E-43) stop '5'\n+\n+if (r2 /= 13107.0) stop '1'\n+if (r  /= 1.83668190E-41) stop '2'\n+if (real(z1) /= 2.94272678E-44 .or. aimag(z1) /= -4.0) stop '4'\n+if (real(z2) /= 5.0 .or. aimag(z2) /= 9.48679060E-43) stop '5'\n+\n+r2 = real(int(z'3333'), kind=4)\n+r = real(z'3333', kind=4)\n+z1 = cmplx(b'10101',-4.0, kind=4)\n+z2 = cmplx(5.0, o'01245', kind=4)\n+\n+if (r2 /= 13107.0) stop '1'\n+if (r  /= 1.83668190E-41) stop '2'\n+if (real(z1) /= 2.94272678E-44 .or. aimag(z1) /= -4.0) stop '4'\n+if (real(z2) /= 5.0 .or. aimag(z2) /= 9.48679060E-43) stop '5'\n+end subroutine test4\n+\n+\n+subroutine test8\n+real(8),parameter     :: r2c = real(int(z'FFFFFF3333', kind=8), kind=8)\n+real(8),parameter     :: rc  = real(z'AAAAAAAAAAAAAAAAFFFFFFF3333', kind=8)\n+complex(8),parameter  :: z1c = cmplx(b'11111011111111111111111111111111111111111111111111111111110101',-4.0, kind=8)\n+complex(8),parameter  :: z2c = cmplx(5.0, o'444444444442222222222233301245', kind=8)\n+\n+real(8)             :: r2 = real(int(z'FFFFFF3333',kind=8),kind=8)\n+real(8)             :: r  = real(z'AAAAAAAAAAAAAAAAFFFFFFF3333', kind=8)\n+complex(8)          :: z1 = cmplx(b'11111011111111111111111111111111111111111111111111111111110101',-4.0, kind=8)\n+complex(8)          :: z2 = cmplx(5.0, o'444444444442222222222233301245', kind=8)\n+\n+if (r2c /= 1099511575347.0d0) stop '1'\n+if (rc  /= -3.72356884822177915d-103) stop '2'\n+if (real(z1c) /= 3.05175781249999627d-5 .or. aimag(z1c) /= -4.0) stop '4'\n+if (real(z2c) /= 5.0 .or. aimag(z2c) /= 3.98227593015308981d41) stop '5'\n+\n+if (r2 /= 1099511575347.0d0) stop '1'\n+if (r  /= -3.72356884822177915d-103) stop '2'\n+if (real(z1) /= 3.05175781249999627d-5 .or. aimag(z1) /= -4.0) stop '4'\n+if (real(z2) /= 5.0 .or. aimag(z2) /= 3.98227593015308981d41) stop '5'\n+\n+r2 = real(int(z'FFFFFF3333',kind=8),kind=8)\n+r  = real(z'AAAAAAAAAAAAAAAAFFFFFFF3333', kind=8)\n+z1 = cmplx(b'11111011111111111111111111111111111111111111111111111111110101',-4.0, kind=8)\n+z2 = cmplx(5.0, o'444444444442222222222233301245', kind=8)\n+\n+if (r2 /= 1099511575347.0d0) stop '1'\n+if (r  /= -3.72356884822177915d-103) stop '2'\n+if (real(z1) /= 3.05175781249999627d-5 .or. aimag(z1) /= -4.0) stop '4'\n+if (real(z2) /= 5.0 .or. aimag(z2) /= 3.98227593015308981d41) stop '5'\n+\n+end subroutine test8\n+\n+end program f2003"}, {"sha": "9233b97a37a793f1225eb69eb9f1fcf0b1e5f4b6", "filename": "gcc/testsuite/gfortran.dg/ibits.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ftestsuite%2Fgfortran.dg%2Fibits.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ftestsuite%2Fgfortran.dg%2Fibits.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fibits.f90?ref=00a4618b3f221641d3c617a55bdd2d22f13ae44d", "patch": "@@ -2,7 +2,7 @@\n ! Test that the mask is properly converted to the kind type of j in ibits.\n program ibits_test\n   implicit none\n-  integer(8), parameter :: n = z'00000000FFFFFFFF' ! { dg-warning \"BOZ used outside a DATA statement\" }\n+  integer(8), parameter :: n = z'00000000FFFFFFFF' ! { dg-warning \"BOZ literal at .1. outside a DATA statement\" }\n   integer(8) i,j,k,m\n   j = 1\n   do i=1,70"}, {"sha": "cb3dcec5e27c17b614ff6c808d5dfd9affbe648f", "filename": "gcc/testsuite/gfortran.dg/pr16433.f", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr16433.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr16433.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr16433.f?ref=00a4618b3f221641d3c617a55bdd2d22f13ae44d", "patch": "@@ -1,6 +1,6 @@\n ! { dg-do compile }\n       real x\n       double precision dx\n-      data x/x'2ffde'/ ! { dg-warning \"exadecimal constant\" \"Hex constant can't begin with x\" }\n+      data x/x'2ffde'/ ! { dg-warning \"Hexadecimal constant | used to initialize non-integer\" } \n       dx = x  ! { dg-bogus \"exadecimal constant\" \"Hex constant where there is none\" }\n       end"}, {"sha": "3d35312c92c488c2f2b20fcc8801029e20507898", "filename": "gcc/testsuite/gfortran.dg/unf_io_convert_1.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ftestsuite%2Fgfortran.dg%2Funf_io_convert_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ftestsuite%2Fgfortran.dg%2Funf_io_convert_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funf_io_convert_1.f90?ref=00a4618b3f221641d3c617a55bdd2d22f13ae44d", "patch": "@@ -18,9 +18,9 @@ program main\n   integer i\n   character*4 str\n \n-  m(1) = Z'11223344' ! { dg-warning \"BOZ used outside a DATA statement\" }\n-  m(2) = Z'55667788' ! { dg-warning \"BOZ used outside a DATA statement\" }\n-  n    = Z'77AABBCC' ! { dg-warning \"BOZ used outside a DATA statement\" }\n+  m(1) = Z'11223344' ! { dg-warning \"BOZ literal at .1. outside a DATA statement\" }\n+  m(2) = Z'55667788' ! { dg-warning \"BOZ literal at .1. outside a DATA statement\" }\n+  n    = Z'77AABBCC' ! { dg-warning \"BOZ literal at .1. outside a DATA statement\" }\n   str = 'asdf'\n   do i = 1,size\n      r(i) = i\n@@ -46,23 +46,23 @@ program main\n   read(9) str\n   !\n   ! check results\n-  if (m(1).ne.Z'11223344') then ! { dg-warning \"BOZ used outside a DATA statement\" }\n+  if (m(1).ne.Z'11223344') then\n      if (debug) then\n         print '(A,Z8)','m(1) incorrect.  m(1) = ',m(1)\n      else\n         call abort\n      endif\n   endif\n   \n-  if (m(2).ne.Z'55667788') then ! { dg-warning \"BOZ used outside a DATA statement\" }\n+  if (m(2).ne.Z'55667788') then\n      if (debug) then\n         print '(A,Z8)','m(2) incorrect.  m(2) = ',m(2)\n      else\n         call abort\n      endif\n   endif\n   \n-  if (n.ne.Z'77AABBCC') then ! { dg-warning \"BOZ used outside a DATA statement\" }\n+  if (n.ne.Z'77AABBCC') then\n      if (debug) then\n         print '(A,Z8)','n incorrect.  n = ',n\n      else"}, {"sha": "f29f6ee249e89f39e2cac6cab6c60d7c533ba881", "filename": "gcc/testsuite/gfortran.dg/unf_io_convert_2.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ftestsuite%2Fgfortran.dg%2Funf_io_convert_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00a4618b3f221641d3c617a55bdd2d22f13ae44d/gcc%2Ftestsuite%2Fgfortran.dg%2Funf_io_convert_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Funf_io_convert_2.f90?ref=00a4618b3f221641d3c617a55bdd2d22f13ae44d", "patch": "@@ -15,26 +15,26 @@ program main\n   close(10,status=\"delete\")\n \n   open (10, form=\"unformatted\",convert=\"big_endian\") ! { dg-warning \"Extension: CONVERT\" }\n-  i = (/ Z'11223344', Z'55667700' /) ! { dg-warning \"BOZ used outside a DATA statement\" }\n+  i = (/ Z'11223344', Z'55667700' /)\n   write (10) i\n   rewind (10)\n   read (10) b\n-  if (any(b /= (/ Z'11', Z'22', Z'33', Z'44', Z'55', Z'66', Z'77', Z'00' /))) & ! { dg-warning \"BOZ used outside a DATA statement\" }\n+  if (any(b /= (/ Z'11', Z'22', Z'33', Z'44', Z'55', Z'66', Z'77', Z'00' /))) &\n     call abort\n   backspace 10\n   read (10) j\n-  if (j /= Z'1122334455667700') call abort ! { dg-warning \"BOZ used outside a DATA statement\" }\n+  if (j /= Z'1122334455667700') call abort\n   close (10, status=\"delete\")\n \n   open (10, form=\"unformatted\", convert=\"little_endian\") ! { dg-warning \"Extension: CONVERT\" }\n   write (10) i\n   rewind (10)\n   read (10) b\n-  if (any(b /= (/ Z'44', Z'33', Z'22', Z'11', Z'00', Z'77', Z'66', Z'55' /))) & ! { dg-warning \"BOZ used outside a DATA statement\" }\n+  if (any(b /= (/ Z'44', Z'33', Z'22', Z'11', Z'00', Z'77', Z'66', Z'55' /))) &\n     call abort\n   backspace 10\n   read (10) j\n-  if (j /= Z'5566770011223344') call abort ! { dg-warning \"BOZ used outside a DATA statement\" }\n+  if (j /= Z'5566770011223344') call abort\n   close (10, status=\"delete\")\n \n end program main"}]}