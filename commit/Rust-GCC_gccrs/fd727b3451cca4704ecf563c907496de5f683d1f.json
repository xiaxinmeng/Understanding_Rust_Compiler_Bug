{"sha": "fd727b3451cca4704ecf563c907496de5f683d1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ3MjdiMzQ1MWNjYTQ3MDRlY2Y1NjNjOTA3NDk2ZGU1ZjY4M2QxZg==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebpop@gmail.com", "date": "2007-07-04T07:04:31Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2007-07-04T07:04:31Z"}, "message": "re PR target/32457 (Complete program optimized away (i686, -ftree-vectorize))\n\n\tPR middle-end/32457\n\t* tree-data-ref.c (analyze_siv_subscript_cst_affine,\n\tcompute_overlap_steps_for_affine_1_2, analyze_subscript_affine_affine,\n\tinit_omega_for_ddr_1): Use non conservative number of iterations\n\testimations.\n\t(analyze_subscript_affine_affine): Use HOST_WIDE_INT instead of int.\n\t(analyze_siv_subscript): Remove FIXME and reinitialization of \n\tlast_conflicts to chrec_dont_know.\n\t* testsuite/gfortran.dg/vect/pr32457.f90: New.\n\nFrom-SVN: r126305", "tree": {"sha": "a468889a2bba45ebdecbed47453ea60ae500369c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a468889a2bba45ebdecbed47453ea60ae500369c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd727b3451cca4704ecf563c907496de5f683d1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd727b3451cca4704ecf563c907496de5f683d1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd727b3451cca4704ecf563c907496de5f683d1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd727b3451cca4704ecf563c907496de5f683d1f/comments", "author": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c92b85159f14f32796cb71be4a489d488e1090a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c92b85159f14f32796cb71be4a489d488e1090a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c92b85159f14f32796cb71be4a489d488e1090a0"}], "stats": {"total": 73, "additions": 49, "deletions": 24}, "files": [{"sha": "ff2fbd4f4c99b93b83837e6ae35f8a178bba9d09", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd727b3451cca4704ecf563c907496de5f683d1f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd727b3451cca4704ecf563c907496de5f683d1f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd727b3451cca4704ecf563c907496de5f683d1f", "patch": "@@ -1,3 +1,15 @@\n+2007-07-04  Sebastian Pop  <sebpop@gmail.com>\n+\n+\tPR middle-end/32457\n+\t* tree-data-ref.c (analyze_siv_subscript_cst_affine,\n+\tcompute_overlap_steps_for_affine_1_2, analyze_subscript_affine_affine,\n+\tinit_omega_for_ddr_1): Use non conservative number of iterations\n+\testimations.\n+\t(analyze_subscript_affine_affine): Use HOST_WIDE_INT instead of int.\n+\t(analyze_siv_subscript): Remove FIXME and reinitialization of \n+\tlast_conflicts to chrec_dont_know.\n+\t* testsuite/gfortran.dg/vect/pr32457.f90: New.\n+\n 2007-07-04  Douglas Gregor  <doug.gregor@gmail.com>\n \n \t* tree.c (maybe_canonicalize_argtypes): Improve description."}, {"sha": "07a2b6056fb954a195f0ae5b9c94b36f742a4eaf", "filename": "gcc/testsuite/gfortran.dg/vect/pr32457.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd727b3451cca4704ecf563c907496de5f683d1f/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr32457.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd727b3451cca4704ecf563c907496de5f683d1f/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr32457.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr32457.f90?ref=fd727b3451cca4704ecf563c907496de5f683d1f", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! { dg-require-effective-target vect_float }\n+\n+SUBROUTINE KEEL(RBOUND)\n+  REAL, DIMENSION(0:100) :: RBOUND\n+  DO N = 1, NP1\n+     RBOUND(N) = RBOUND(N-1) + 1\n+  END DO\n+  DO N = 1, NS\n+     WRITE (16,'(I5)') SRAD(N)\n+  END DO\n+END SUBROUTINE KEEL\n+\n+! { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" } }\n+! { dg-final { cleanup-tree-dump \"vect\" } }"}, {"sha": "a90557ad614c5fe16f21b0cf956df7d8077d3195", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd727b3451cca4704ecf563c907496de5f683d1f/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd727b3451cca4704ecf563c907496de5f683d1f/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=fd727b3451cca4704ecf563c907496de5f683d1f", "patch": "@@ -1632,7 +1632,7 @@ analyze_siv_subscript_cst_affine (tree chrec_a,\n \n \t\t      /* Perform weak-zero siv test to see if overlap is\n \t\t\t outside the loop bounds.  */\n-\t\t      numiter = estimated_loop_iterations_int (loop, true);\n+\t\t      numiter = estimated_loop_iterations_int (loop, false);\n \n \t\t      if (numiter >= 0\n \t\t\t  && compare_tree_int (tmp, numiter) > 0)\n@@ -1711,7 +1711,7 @@ analyze_siv_subscript_cst_affine (tree chrec_a,\n \n \t\t      /* Perform weak-zero siv test to see if overlap is\n \t\t\t outside the loop bounds.  */\n-\t\t      numiter = estimated_loop_iterations_int (loop, true);\n+\t\t      numiter = estimated_loop_iterations_int (loop, false);\n \n \t\t      if (numiter >= 0\n \t\t\t  && compare_tree_int (tmp, numiter) > 0)\n@@ -1852,10 +1852,11 @@ compute_overlap_steps_for_affine_1_2 (tree chrec_a, tree chrec_b,\n   step_y = int_cst_value (CHREC_RIGHT (chrec_a));\n   step_z = int_cst_value (CHREC_RIGHT (chrec_b));\n \n-  niter_x = estimated_loop_iterations_int\n-\t  \t(get_chrec_loop (CHREC_LEFT (chrec_a)), true);\n-  niter_y = estimated_loop_iterations_int (get_chrec_loop (chrec_a), true);\n-  niter_z = estimated_loop_iterations_int (get_chrec_loop (chrec_b), true);\n+  niter_x = \n+    estimated_loop_iterations_int (get_chrec_loop (CHREC_LEFT (chrec_a)),\n+\t\t\t\t   false);\n+  niter_y = estimated_loop_iterations_int (get_chrec_loop (chrec_a), false);\n+  niter_z = estimated_loop_iterations_int (get_chrec_loop (chrec_b), false);\n   \n   if (niter_x < 0 || niter_y < 0 || niter_z < 0)\n     {\n@@ -1961,8 +1962,8 @@ analyze_subscript_affine_affine (tree chrec_a,\n \t\t\t\t tree *last_conflicts)\n {\n   unsigned nb_vars_a, nb_vars_b, dim;\n-  int init_a, init_b, gamma, gcd_alpha_beta;\n-  int tau1, tau2;\n+  HOST_WIDE_INT init_a, init_b, gamma, gcd_alpha_beta;\n+  HOST_WIDE_INT tau1, tau2;\n   lambda_matrix A, U, S;\n \n   if (eq_evolutions_p (chrec_a, chrec_b))\n@@ -2012,14 +2013,14 @@ analyze_subscript_affine_affine (tree chrec_a,\n     {\n       if (nb_vars_a == 1 && nb_vars_b == 1)\n \t{\n-\t  int step_a, step_b;\n+\t  HOST_WIDE_INT step_a, step_b;\n \t  HOST_WIDE_INT niter, niter_a, niter_b;\n \t  affine_fn ova, ovb;\n \n-\t  niter_a = estimated_loop_iterations_int\n-\t\t\t(get_chrec_loop (chrec_a), true);\n-\t  niter_b = estimated_loop_iterations_int\n-\t\t\t(get_chrec_loop (chrec_b), true);\n+\t  niter_a = estimated_loop_iterations_int (get_chrec_loop (chrec_a),\n+\t\t\t\t\t\t   false);\n+\t  niter_b = estimated_loop_iterations_int (get_chrec_loop (chrec_b),\n+\t\t\t\t\t\t   false);\n \t  if (niter_a < 0 || niter_b < 0)\n \t    {\n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -2116,18 +2117,18 @@ analyze_subscript_affine_affine (tree chrec_a,\n \t     | x0 = i0 + i1 * t, \n \t     | y0 = j0 + j1 * t.  */\n       \n-\t  int i0, j0, i1, j1;\n+\t  HOST_WIDE_INT i0, j0, i1, j1;\n \n \t  /* X0 and Y0 are the first iterations for which there is a\n \t     dependence.  X0, Y0 are two solutions of the Diophantine\n \t     equation: chrec_a (X0) = chrec_b (Y0).  */\n-\t  int x0, y0;\n-\t  int niter, niter_a, niter_b;\n+\t  HOST_WIDE_INT x0, y0;\n+\t  HOST_WIDE_INT niter, niter_a, niter_b;\n \n-\t  niter_a = estimated_loop_iterations_int\n-\t\t\t(get_chrec_loop (chrec_a), true);\n-\t  niter_b = estimated_loop_iterations_int\n-\t\t\t(get_chrec_loop (chrec_b), true);\n+\t  niter_a = estimated_loop_iterations_int (get_chrec_loop (chrec_a),\n+\t\t\t\t\t\t   false);\n+\t  niter_b = estimated_loop_iterations_int (get_chrec_loop (chrec_b),\n+\t\t\t\t\t\t   false);\n \n \t  if (niter_a < 0 || niter_b < 0)\n \t    {\n@@ -2361,9 +2362,6 @@ analyze_siv_subscript (tree chrec_a,\n \t  analyze_subscript_affine_affine (chrec_a, chrec_b, \n \t\t\t\t\t   overlaps_a, overlaps_b, \n \t\t\t\t\t   last_conflicts);\n-\t  /* FIXME: The number of iterations is a symbolic expression.\n-\t     Compute it properly.  */\n-\t  *last_conflicts = chrec_dont_know;\n \n \t  if (CF_NOT_KNOWN_P (*overlaps_a)\n \t      || CF_NOT_KNOWN_P (*overlaps_b))\n@@ -3466,7 +3464,7 @@ init_omega_for_ddr_1 (struct data_reference *dra, struct data_reference *drb,\n   for (i = 0; i <= DDR_INNER_LOOP (ddr) \n \t && VEC_iterate (loop_p, DDR_LOOP_NEST (ddr), i, loopi); i++)\n     {\n-      HOST_WIDE_INT nbi = estimated_loop_iterations_int (loopi, true);\n+      HOST_WIDE_INT nbi = estimated_loop_iterations_int (loopi, false);\n \n       /* 0 <= loop_x */\n       ineq = omega_add_zero_geq (pb, omega_black);"}]}