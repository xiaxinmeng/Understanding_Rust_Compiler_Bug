{"sha": "81c833b311b16cfd87a947374d5ffbbd48facd03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFjODMzYjMxMWIxNmNmZDg3YTk0NzM3NGQ1ZmZiYmQ0OGZhY2QwMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-02-25T09:31:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-02-25T09:33:29Z"}, "message": "tree-optimization/93868 copy SLP tree before re-arranging stmts\n\nThis avoids altering possibly shared SLP subtrees when attempting\nto get rid of permutations in SLP reductions by copying the SLP\nsubtree before re-arranging stmts in it.\n\n2020-02-25  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/93868\n\t* tree-vect-slp.c (slp_copy_subtree): New function.\n\t(vect_attempt_slp_rearrange_stmts): Copy the SLP tree before\n\tre-arranging stmts in it.\n\n\t* gcc.dg/torture/pr93868.c: New testcase.", "tree": {"sha": "31b6c240eeb1696e9c9baaa385713cf810f95779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31b6c240eeb1696e9c9baaa385713cf810f95779"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81c833b311b16cfd87a947374d5ffbbd48facd03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81c833b311b16cfd87a947374d5ffbbd48facd03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81c833b311b16cfd87a947374d5ffbbd48facd03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81c833b311b16cfd87a947374d5ffbbd48facd03/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2473c81cb2d4627f2d72310f4eca951c6084b596", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2473c81cb2d4627f2d72310f4eca951c6084b596", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2473c81cb2d4627f2d72310f4eca951c6084b596"}], "stats": {"total": 93, "additions": 93, "deletions": 0}, "files": [{"sha": "dba986dfdff54f2db45b83955a86a7e82be98613", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81c833b311b16cfd87a947374d5ffbbd48facd03/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81c833b311b16cfd87a947374d5ffbbd48facd03/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81c833b311b16cfd87a947374d5ffbbd48facd03", "patch": "@@ -1,3 +1,10 @@\n+2020-02-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/93868\n+\t* tree-vect-slp.c (slp_copy_subtree): New function.\n+\t(vect_attempt_slp_rearrange_stmts): Copy the SLP tree before\n+\tre-arranging stmts in it.\n+\n 2020-02-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/93874"}, {"sha": "d25296df65b8800a47b129839167f8cccae866fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81c833b311b16cfd87a947374d5ffbbd48facd03/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81c833b311b16cfd87a947374d5ffbbd48facd03/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81c833b311b16cfd87a947374d5ffbbd48facd03", "patch": "@@ -1,3 +1,8 @@\n+2020-02-25  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/93868\n+\t* gcc.dg/torture/pr93868.c: New testcase.\n+\n 2020-02-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/93874"}, {"sha": "850eba1dd49cf9e99659f9beb53699839cf510ec", "filename": "gcc/testsuite/gcc.dg/torture/pr93868.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81c833b311b16cfd87a947374d5ffbbd48facd03/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr93868.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81c833b311b16cfd87a947374d5ffbbd48facd03/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr93868.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr93868.c?ref=81c833b311b16cfd87a947374d5ffbbd48facd03", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-ftree-vectorize\" } */\n+\n+unsigned a[1024];\n+unsigned b[1024];\n+\n+void __attribute__((noipa))\n+foo (unsigned *q, unsigned *r)\n+{\n+  unsigned sum1 = 0, sum2 = 0;\n+  for (int i = 0; i < 512; ++i)\n+    {\n+      sum1 += a[2*i];\n+      sum2 += a[2*i+1];\n+      b[2*i] = a[2*i+1];\n+      b[2*i+1] = a[2*i];\n+    }\n+  *q = sum1;\n+  *r = sum2;\n+}\n+\n+int main()\n+{\n+  unsigned sum1, sum2;\n+  a[0] = 0;\n+  a[1] = 1;\n+  foo (&sum1, &sum2);\n+  if (b[0] != 1 || b[1] != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "077c7946feef3090b80ab6cb0450513a86ec9c3e", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81c833b311b16cfd87a947374d5ffbbd48facd03/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81c833b311b16cfd87a947374d5ffbbd48facd03/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=81c833b311b16cfd87a947374d5ffbbd48facd03", "patch": "@@ -1749,6 +1749,44 @@ vect_mark_slp_stmts_relevant (slp_tree node)\n   vect_mark_slp_stmts_relevant (node, visited);\n }\n \n+/* Copy the SLP subtree rooted at NODE.  */\n+\n+static slp_tree\n+slp_copy_subtree (slp_tree node, hash_map<slp_tree, slp_tree> &map)\n+{\n+  unsigned i;\n+\n+  bool existed_p;\n+  slp_tree &copy = map.get_or_insert (node, &existed_p);\n+  if (existed_p)\n+    return copy;\n+\n+  copy = XNEW (_slp_tree);\n+  memcpy (copy, node, sizeof (_slp_tree));\n+  if (SLP_TREE_SCALAR_STMTS (node).exists ())\n+    {\n+      SLP_TREE_SCALAR_STMTS (copy) = SLP_TREE_SCALAR_STMTS (node).copy ();\n+      stmt_vec_info stmt_info;\n+      FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt_info)\n+\tSTMT_VINFO_NUM_SLP_USES (stmt_info)++;\n+    }\n+  if (SLP_TREE_SCALAR_OPS (node).exists ())\n+    SLP_TREE_SCALAR_OPS (copy) = SLP_TREE_SCALAR_OPS (node).copy ();\n+  if (SLP_TREE_LOAD_PERMUTATION (node).exists ())\n+    SLP_TREE_LOAD_PERMUTATION (copy) = SLP_TREE_LOAD_PERMUTATION (node).copy ();\n+  if (SLP_TREE_CHILDREN (node).exists ())\n+    SLP_TREE_CHILDREN (copy) = SLP_TREE_CHILDREN (node).copy ();\n+  gcc_assert (!SLP_TREE_VEC_STMTS (node).exists ());\n+  copy->refcnt = 0;\n+\n+  slp_tree child;\n+  FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (copy), i, child)\n+    {\n+      SLP_TREE_CHILDREN (copy)[i] = slp_copy_subtree (child, map);\n+      SLP_TREE_CHILDREN (copy)[i]->refcnt++;\n+    }\n+  return copy;\n+}\n \n /* Rearrange the statements of NODE according to PERMUTATION.  */\n \n@@ -1840,6 +1878,18 @@ vect_attempt_slp_rearrange_stmts (slp_instance slp_instn)\n      statements in the nodes is not important unless they are memory\n      accesses, we can rearrange the statements in all the nodes\n      according to the order of the loads.  */\n+\n+  /* We have to unshare the SLP tree we modify.  */\n+  hash_map<slp_tree, slp_tree> map;\n+  slp_tree unshared = slp_copy_subtree (SLP_INSTANCE_TREE (slp_instn), map);\n+  vect_free_slp_tree (SLP_INSTANCE_TREE (slp_instn), false);\n+  unshared->refcnt++;\n+  SLP_INSTANCE_TREE (slp_instn) = unshared;\n+  FOR_EACH_VEC_ELT (SLP_INSTANCE_LOADS (slp_instn), i, node)\n+    SLP_INSTANCE_LOADS (slp_instn)[i] = *map.get (node);\n+  node = SLP_INSTANCE_LOADS (slp_instn)[0];\n+\n+  /* Do the actual re-arrangement.  */\n   hash_set<slp_tree> visited;\n   vect_slp_rearrange_stmts (SLP_INSTANCE_TREE (slp_instn), group_size,\n \t\t\t    node->load_permutation, visited);"}]}