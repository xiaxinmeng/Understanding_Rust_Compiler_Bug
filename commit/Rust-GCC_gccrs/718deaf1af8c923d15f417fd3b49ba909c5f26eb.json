{"sha": "718deaf1af8c923d15f417fd3b49ba909c5f26eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE4ZGVhZjFhZjhjOTIzZDE1ZjQxN2ZkM2I0OWJhOTA5YzVmMjZlYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-12T09:10:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-12T09:10:13Z"}, "message": "[multiple changes]\n\n2010-10-12  Robert Dewar  <dewar@adacore.com>\n\n\t* aspects.ads, aspects.adb (Move_Aspects): New procedure.\n\t* atree.ads, atree.adb: (New_Copy): Does not copy aspect specifications\n\t* sinfo.ads, par-ch3.adb, par-ch6.adb, par-ch7.adb, par-ch9.adb,\n\tpar-endh.adb, par-ch13.adb, par-ch12.adb: Modify grammar to include\n\taspect specifications.\n\tRecognize aspect specifications for all cases\n\t* par.adb: Recognize aspect specifications for all cases\n\t* sem_ch12.ads, sem_ch12.adb (Copy_Generic_Node): Copies aspect\n\tspecifications.\n\t* sem_ch3.adb (Analyze_Subtype_Declaration): Improve patch to freeze\n\tgeneric actual types (was missing some guards before).\n\t* sem_ch9.adb (Analyze_Single_Protected_Declaration): Copy aspects to\n\tgenerated object\n\t(Analyze_Single_Task_Declaration): Copy aspects to generated object\n\n2010-10-12  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* usage.adb (usage): Adjust line for -gnatn switch.\n\n2010-10-12  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_attr.adb (Eval_Attribute): Only leave change active for aspect\n\tspec case.\n\n2010-10-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Declaration): If this is a\n\tdeclaration of a null procedure resolve the types of the profile of the\n\tgenerated null body now.\n\nFrom-SVN: r165353", "tree": {"sha": "34e72a80fb14595699c393795268345a17abec04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34e72a80fb14595699c393795268345a17abec04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/718deaf1af8c923d15f417fd3b49ba909c5f26eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/718deaf1af8c923d15f417fd3b49ba909c5f26eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/718deaf1af8c923d15f417fd3b49ba909c5f26eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/718deaf1af8c923d15f417fd3b49ba909c5f26eb/comments", "author": null, "committer": null, "parents": [{"sha": "6832435e85ed5dca261f6ae041e9f78e5ccfa285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6832435e85ed5dca261f6ae041e9f78e5ccfa285", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6832435e85ed5dca261f6ae041e9f78e5ccfa285"}], "stats": {"total": 455, "additions": 353, "deletions": 102}, "files": [{"sha": "9f1aff012f26fc88a83a197f355be2ba9da0d764", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -1,3 +1,35 @@\n+2010-10-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* aspects.ads, aspects.adb (Move_Aspects): New procedure.\n+\t* atree.ads, atree.adb: (New_Copy): Does not copy aspect specifications\n+\t* sinfo.ads, par-ch3.adb, par-ch6.adb, par-ch7.adb, par-ch9.adb,\n+\tpar-endh.adb, par-ch13.adb, par-ch12.adb: Modify grammar to include\n+\taspect specifications.\n+\tRecognize aspect specifications for all cases\n+\t* par.adb: Recognize aspect specifications for all cases\n+\t* sem_ch12.ads, sem_ch12.adb (Copy_Generic_Node): Copies aspect\n+\tspecifications.\n+\t* sem_ch3.adb (Analyze_Subtype_Declaration): Improve patch to freeze\n+\tgeneric actual types (was missing some guards before).\n+\t* sem_ch9.adb (Analyze_Single_Protected_Declaration): Copy aspects to\n+\tgenerated object\n+\t(Analyze_Single_Task_Declaration): Copy aspects to generated object\n+\n+2010-10-12  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* usage.adb (usage): Adjust line for -gnatn switch.\n+\n+2010-10-12  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_attr.adb (Eval_Attribute): Only leave change active for aspect\n+\tspec case.\n+\n+2010-10-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Declaration): If this is a\n+\tdeclaration of a null procedure resolve the types of the profile of the\n+\tgenerated null body now.\n+\n 2010-10-11  Robert Dewar  <dewar@adacore.com>\n \n \t* debug.adb: Remove d.A flag to delay address clause (not needed any"}, {"sha": "a205e5e1f90594ddc91369f011b56f81b608ed64", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -160,6 +160,20 @@ package body Aspects is\n       end if;\n    end Aspect_Specifications;\n \n+   ------------------\n+   -- Move_Aspects --\n+   ------------------\n+\n+   procedure Move_Aspects (From : Node_Id; To : Node_Id) is\n+      pragma Assert (not Has_Aspects (To));\n+   begin\n+      if Has_Aspects (From) then\n+         Set_Aspect_Specifications (To, Aspect_Specifications (From));\n+         Aspect_Specifications_Hash_Table.Remove (From);\n+         Set_Has_Aspects (From, False);\n+      end if;\n+   end Move_Aspects;\n+\n    -----------------------------------\n    -- Permits_Aspect_Specifications --\n    -----------------------------------"}, {"sha": "d7c0bc966a299370dfd769c60be6934e2e2ef003", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -195,6 +195,12 @@ package Aspects is\n    --  node that has its Has_Aspects flag set True on entry, or with L being an\n    --  empty list or No_List.\n \n+   procedure Move_Aspects (From : Node_Id; To : Node_Id);\n+   --  Moves aspects from 'From' node to 'To' node. Has_Aspects (To) must be\n+   --  False on entry. If Has_Aspects (From) is False, the call has no effect.\n+   --  Otherwise the aspects are moved and on return Has_Aspects (To) is True,\n+   --  and Has_Aspects (From) is False.\n+\n    procedure Tree_Write;\n    --  Writes contents of Aspect_Specifications hash table to the tree file\n "}, {"sha": "4b518b106671f0574c91e494748c85c2e112d1b0", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -1191,7 +1191,6 @@ package body Atree is\n \n    begin\n       if Source > Empty_Or_Error then\n-\n          New_Id := Allocate_Initialize_Node (Source, Has_Extension (Source));\n \n          Nodes.Table (New_Id).Link := Empty_List_Or_Node;\n@@ -1202,6 +1201,11 @@ package body Atree is\n \n          Nodes.Table (New_Id).Rewrite_Ins := False;\n          pragma Debug (New_Node_Debugging_Output (New_Id));\n+\n+         --  Always clear Has_Aspects, the caller must take care of copying\n+         --  aspects if this is required for the particular situation.\n+\n+         Set_Has_Aspects (New_Id, False);\n       end if;\n \n       return New_Id;\n@@ -1659,6 +1663,7 @@ package body Atree is\n          --  of aspect specifications if aspect specifications are present.\n \n          if Has_Aspects (Sav_Node) then\n+            Set_Has_Aspects (Sav_Node, False);\n             Set_Aspect_Specifications\n               (Sav_Node, Aspect_Specifications (Old_Node));\n          end if;"}, {"sha": "a40c192c361c3c00b0966e9b9aee61c498814155", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -398,7 +398,10 @@ package Atree is\n    --  The parent pointer of the destination and its list link, if any, are\n    --  not affected by the copy. Note that parent pointers of descendents\n    --  are not adjusted, so the descendents of the destination node after\n-   --  the Copy_Node is completed have dubious parent pointers.\n+   --  the Copy_Node is completed have dubious parent pointers. Note that\n+   --  this routine does NOT copy aspect specifications, the Has_Aspects\n+   --  flag in the returned node will always be False. The caller must deal\n+   --  with copying aspect specifications where this is required.\n \n    function New_Copy (Source : Node_Id) return Node_Id;\n    --  This function allocates a completely new node, and then initializes"}, {"sha": "81f5e257c029223eaa3c5c75bc57f40b41b516fe", "filename": "gcc/ada/par-ch12.adb", "status": "modified", "additions": 36, "deletions": 23, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fpar-ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fpar-ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch12.adb?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -61,10 +61,12 @@ package body Ch12 is\n    --    GENERIC_SUBPROGRAM_DECLARATION | GENERIC_PACKAGE_DECLARATION\n \n    --  GENERIC_SUBPROGRAM_DECLARATION ::=\n-   --    GENERIC_FORMAL_PART SUBPROGRAM_SPECIFICATION;\n+   --    GENERIC_FORMAL_PART SUBPROGRAM_SPECIFICATION\n+   --      [ASPECT_SPECIFICATIONS];\n \n    --  GENERIC_PACKAGE_DECLARATION ::=\n-   --    GENERIC_FORMAL_PART PACKAGE_SPECIFICATION;\n+   --    GENERIC_FORMAL_PART PACKAGE_SPECIFICATION\n+   --      [ASPECT_SPECIFICATIONS];\n \n    --  GENERIC_FORMAL_PART ::=\n    --    generic {GENERIC_FORMAL_PARAMETER_DECLARATION | USE_CLAUSE}\n@@ -194,14 +196,14 @@ package body Ch12 is\n                exit Decl_Loop;\n             end if;\n          end if;\n-\n       end loop Decl_Loop;\n \n       --  Generic formal part is scanned, scan out subprogram or package spec\n \n       if Token = Tok_Package then\n          Gen_Decl := New_Node (N_Generic_Package_Declaration, Gen_Sloc);\n-         Set_Specification (Gen_Decl, P_Package (Pf_Spcn));\n+         Set_Specification (Gen_Decl, P_Package (Pf_Spcn, Gen_Decl));\n+\n       else\n          Gen_Decl := New_Node (N_Generic_Subprogram_Declaration, Gen_Sloc);\n \n@@ -213,7 +215,8 @@ package body Ch12 is\n          then\n             Error_Msg_SP (\"child unit allowed only at library level\");\n          end if;\n-         TF_Semicolon;\n+\n+         P_Aspect_Specifications (Gen_Decl);\n       end if;\n \n       Set_Generic_Formal_Declarations (Gen_Decl, Decls);\n@@ -275,8 +278,9 @@ package body Ch12 is\n    begin\n       --  Figure out if a generic actual part operation is present. Clearly\n       --  there is no generic actual part if the current token is semicolon\n+      --  or if we have apsect specifications present.\n \n-      if Token = Tok_Semicolon then\n+      if Token = Tok_Semicolon or else Aspect_Specifications_Present then\n          return No_List;\n \n       --  If we don't have a left paren, then we have an error, and the job\n@@ -402,9 +406,11 @@ package body Ch12 is\n \n    --  FORMAL_OBJECT_DECLARATION ::=\n    --    DEFINING_IDENTIFIER_LIST :\n-   --      MODE [NULL_EXCLUSION] SUBTYPE_MARK [:= DEFAULT_EXPRESSION];\n+   --      MODE [NULL_EXCLUSION] SUBTYPE_MARK [:= DEFAULT_EXPRESSION]\n+   --        [ASPECT_SPECIFICATIONS];\n    --  | DEFINING_IDENTIFIER_LIST :\n    --      MODE ACCESS_DEFINITION [:= DEFAULT_EXPRESSION];\n+   --        [ASPECT_SPECIFICATIONS];\n \n    --  The caller has checked that the initial token is an identifier\n \n@@ -425,7 +431,6 @@ package body Ch12 is\n    begin\n       Idents (1) := P_Defining_Identifier (C_Comma_Colon);\n       Num_Idents := 1;\n-\n       while Comma_Present loop\n          Num_Idents := Num_Idents + 1;\n          Idents (Num_Idents) := P_Defining_Identifier (C_Comma_Colon);\n@@ -479,6 +484,7 @@ package body Ch12 is\n \n          No_Constraint;\n          Set_Default_Expression (Decl_Node, Init_Expr_Opt);\n+         P_Aspect_Specifications (Decl_Node);\n \n          if Ident > 1 then\n             Set_Prev_Ids (Decl_Node, True);\n@@ -494,8 +500,6 @@ package body Ch12 is\n          Ident := Ident + 1;\n          Restore_Scan_State (Scan_State);\n       end loop Ident_Loop;\n-\n-      TF_Semicolon;\n    end P_Formal_Object_Declarations;\n \n    -----------------------------------\n@@ -504,7 +508,8 @@ package body Ch12 is\n \n    --  FORMAL_TYPE_DECLARATION ::=\n    --    type DEFINING_IDENTIFIER [DISCRIMINANT_PART]\n-   --      is FORMAL_TYPE_DEFINITION;\n+   --      is FORMAL_TYPE_DEFINITION\n+   --        [ASPECT_SPECIFICATIONS];\n \n    --  The caller has checked that the initial token is TYPE\n \n@@ -532,15 +537,20 @@ package body Ch12 is\n \n       if Def_Node /= Error then\n          Set_Formal_Type_Definition (Decl_Node, Def_Node);\n-         TF_Semicolon;\n+         P_Aspect_Specifications (Decl_Node);\n \n       else\n          Decl_Node := Error;\n \n+         --  If we have aspect specifications, skip them\n+\n+         if Aspect_Specifications_Present then\n+            P_Aspect_Specifications (Error);\n+\n          --  If we have semicolon, skip it to avoid cascaded errors\n \n-         if Token = Tok_Semicolon then\n-            Scan;\n+         elsif Token = Tok_Semicolon then\n+            Scan; -- past semicolon\n          end if;\n       end if;\n \n@@ -1078,10 +1088,12 @@ package body Ch12 is\n    --  | FORMAL_ABSTRACT_SUBPROGRAM_DECLARATION\n \n    --  FORMAL_CONCRETE_SUBPROGRAM_DECLARATION ::=\n-   --    with SUBPROGRAM_SPECIFICATION [is SUBPROGRAM_DEFAULT];\n+   --    with SUBPROGRAM_SPECIFICATION [is SUBPROGRAM_DEFAULT]\n+   --      [ASPECT_SPECIFICATIONS];\n \n    --  FORMAL_ABSTRACT_SUBPROGRAM_DECLARATION ::=\n-   --    with SUBPROGRAM_SPECIFICATION is abstract [SUBPROGRAM_DEFAULT];\n+   --    with SUBPROGRAM_SPECIFICATION is abstract [SUBPROGRAM_DEFAULT]\n+   --      [ASPECT_SPECIFICATIONS];\n \n    --  SUBPROGRAM_DEFAULT ::= DEFAULT_NAME | <>\n \n@@ -1122,12 +1134,14 @@ package body Ch12 is\n          Set_Specification (Def_Node, Spec_Node);\n \n          if Token = Tok_Semicolon then\n-            Scan; -- past \";\"\n+            null;\n+\n+         elsif Aspect_Specifications_Present then\n+            null;\n \n          elsif Token = Tok_Box then\n             Set_Box_Present (Def_Node, True);\n             Scan; -- past <>\n-            T_Semicolon;\n \n          elsif Token = Tok_Null then\n             if Ada_Version < Ada_2005 then\n@@ -1143,20 +1157,18 @@ package body Ch12 is\n             end if;\n \n             Scan;  --  past NULL\n-            T_Semicolon;\n \n          else\n             Set_Default_Name (Def_Node, P_Name);\n-            T_Semicolon;\n          end if;\n \n       else\n          Def_Node :=\n            New_Node (N_Formal_Concrete_Subprogram_Declaration, Prev_Sloc);\n          Set_Specification (Def_Node, Spec_Node);\n-         T_Semicolon;\n       end if;\n \n+      P_Aspect_Specifications (Def_Node);\n       return Def_Node;\n    end P_Formal_Subprogram_Declaration;\n \n@@ -1178,7 +1190,8 @@ package body Ch12 is\n \n    --  FORMAL_PACKAGE_DECLARATION ::=\n    --    with package DEFINING_IDENTIFIER\n-   --      is new generic_package_NAME FORMAL_PACKAGE_ACTUAL_PART;\n+   --      is new generic_package_NAME FORMAL_PACKAGE_ACTUAL_PART\n+   --        [ASPECT_SPECIFICATIONS];\n \n    --  FORMAL_PACKAGE_ACTUAL_PART ::=\n    --    ([OTHERS =>] <>) |\n@@ -1222,7 +1235,7 @@ package body Ch12 is\n          end if;\n       end if;\n \n-      T_Semicolon;\n+      P_Aspect_Specifications (Def_Node);\n       return Def_Node;\n    end P_Formal_Package_Declaration;\n "}, {"sha": "85067438beeaa5d331711ab233d34397376df4a6", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -378,17 +378,19 @@ package body Ch13 is\n       Aspect  : Node_Id;\n       A_Id    : Aspect_Id;\n       OK      : Boolean;\n+      Ptr     : Source_Ptr;\n \n    begin\n       --  Check if aspect specification present\n \n       if not Aspect_Specifications_Present then\n-         T_Semicolon;\n+         TF_Semicolon;\n          return;\n       end if;\n \n       --  Aspect Specification is present\n \n+      Ptr := Token_Ptr;\n       Scan; -- past WITH\n \n       --  Here we have an aspect specification to scan, note that we don;t\n@@ -511,8 +513,12 @@ package body Ch13 is\n       --  If aspects scanned, store them\n \n       if Is_Non_Empty_List (Aspects) then\n-         Set_Parent (Aspects, Decl);\n-         Set_Aspect_Specifications (Decl, Aspects);\n+         if Decl = Error then\n+            Error_Msg (\"aspect specifications not allowed here\", Ptr);\n+         else\n+            Set_Parent (Aspects, Decl);\n+            Set_Aspect_Specifications (Decl, Aspects);\n+         end if;\n       end if;\n    end P_Aspect_Specifications;\n "}, {"sha": "9cca962a0693f09a1680a9f85f82afd445ebd638", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -276,7 +276,8 @@ package body Ch3 is\n    --  | PRIVATE_EXTENSION_DECLARATION\n \n    --  FULL_TYPE_DECLARATION ::=\n-   --    type DEFINING_IDENTIFIER [KNOWN_DISCRIMINANT_PART] is TYPE_DEFINITION;\n+   --    type DEFINING_IDENTIFIER [KNOWN_DISCRIMINANT_PART] is TYPE_DEFINITION\n+   --      [ASPECT_SPECIFICATIONS];\n    --  | CONCURRENT_TYPE_DECLARATION\n \n    --  INCOMPLETE_TYPE_DECLARATION ::=\n@@ -1260,11 +1261,14 @@ package body Ch3 is\n \n    --  OBJECT_DECLARATION ::=\n    --    DEFINING_IDENTIFIER_LIST : [aliased] [constant]\n-   --      [NULL_EXCLUSION] SUBTYPE_INDICATION [:= EXPRESSION];\n+   --      [NULL_EXCLUSION] SUBTYPE_INDICATION [:= EXPRESSION]\n+   --        [ASPECT_SPECIFICATIONS];\n    --  | DEFINING_IDENTIFIER_LIST : [aliased] [constant]\n-   --      ACCESS_DEFINITION [:= EXPRESSION];\n+   --      ACCESS_DEFINITION [:= EXPRESSION]\n+   --        [ASPECT_SPECIFICATIONS];\n    --  | DEFINING_IDENTIFIER_LIST : [aliased] [constant]\n-   --      ARRAY_TYPE_DEFINITION [:= EXPRESSION];\n+   --      ARRAY_TYPE_DEFINITION [:= EXPRESSION]\n+   --        [ASPECT_SPECIFICATIONS];\n \n    --  NUMBER_DECLARATION ::=\n    --    DEFINING_IDENTIFIER_LIST : constant ::= static_EXPRESSION;\n@@ -1279,7 +1283,8 @@ package body Ch3 is\n    --    DEFINING_IDENTIFIER : exception renames exception_NAME;\n \n    --  EXCEPTION_DECLARATION ::=\n-   --    DEFINING_IDENTIFIER_LIST : exception;\n+   --    DEFINING_IDENTIFIER_LIST : exception\n+   --      [ASPECT_SPECIFICATIONS];\n \n    --  Note that the ALIASED indication in an object declaration is\n    --  marked by a flag in the parent node.\n@@ -3322,7 +3327,8 @@ package body Ch3 is\n \n    --  COMPONENT_DECLARATION ::=\n    --    DEFINING_IDENTIFIER_LIST : COMPONENT_DEFINITION\n-   --      [:= DEFAULT_EXPRESSION];\n+   --      [:= DEFAULT_EXPRESSION]\n+   --        [ASPECT_SPECIFICATIONS];\n \n    --  COMPONENT_DEFINITION ::=\n    --    [aliased] [NULL_EXCLUSION] SUBTYPE_INDICATION | ACCESS_DEFINITION"}, {"sha": "6fe1dea1428e2de5735ea5c236e09fdf1f751409", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -84,10 +84,13 @@ package body Ch6 is\n    --  subprogram renaming declaration or subprogram generic instantiation.\n    --  It also handles the new Ada 2012 parameterized expression form\n \n-   --  SUBPROGRAM_DECLARATION ::= SUBPROGRAM_SPECIFICATION;\n+   --  SUBPROGRAM_DECLARATION ::=\n+   --    SUBPROGRAM_SPECIFICATION\n+   --     [ASPECT_SPECIFICATIONS];\n \n    --  ABSTRACT_SUBPROGRAM_DECLARATION ::=\n-   --    SUBPROGRAM_SPECIFICATION is abstract;\n+   --    SUBPROGRAM_SPECIFICATION is abstract\n+   --      [ASPECT_SPECIFICATIONS];\n \n    --  SUBPROGRAM_SPECIFICATION ::=\n    --      procedure DEFINING_PROGRAM_UNIT_NAME PARAMETER_PROFILE\n@@ -445,13 +448,19 @@ package body Ch6 is\n          end if;\n       end if;\n \n+      --  Subprogram declaration ended by aspect specifications\n+\n+      if Aspect_Specifications_Present then\n+         goto Subprogram_Declaration;\n+\n       --  Deal with case of semicolon ending a subprogram declaration\n \n-      if Token = Tok_Semicolon then\n+      elsif Token = Tok_Semicolon then\n          if not Pf_Flags.Decl then\n             T_Is;\n          end if;\n \n+         Save_Scan_State (Scan_State);\n          Scan; -- past semicolon\n \n          --  If semicolon is immediately followed by IS, then ignore the\n@@ -476,6 +485,7 @@ package body Ch6 is\n             goto Subprogram_Body;\n \n          else\n+            Restore_Scan_State (Scan_State);\n             goto Subprogram_Declaration;\n          end if;\n \n@@ -544,7 +554,6 @@ package body Ch6 is\n                   Set_Null_Present (Specification_Node);\n                end if;\n \n-               TF_Semicolon;\n                goto Subprogram_Declaration;\n \n             --  Check for IS NEW with Formal_Part present and handle nicely\n@@ -572,6 +581,11 @@ package body Ch6 is\n                goto Subprogram_Body;\n             end if;\n \n+         --  Aspect specifications present\n+\n+         elsif Aspect_Specifications_Present then\n+            goto Subprogram_Declaration;\n+\n          --  Here we have a missing IS or missing semicolon, we always guess\n          --  a missing semicolon, since we are pretty good at fixing up a\n          --  semicolon which should really be an IS\n@@ -770,6 +784,7 @@ package body Ch6 is\n          Decl_Node :=\n            New_Node (N_Subprogram_Declaration, Sloc (Specification_Node));\n          Set_Specification (Decl_Node, Specification_Node);\n+         P_Aspect_Specifications (Decl_Node);\n \n          --  If this is a context in which a subprogram body is permitted,\n          --  set active SIS entry in case (see section titled \"Handling"}, {"sha": "14fedc93a730e71e897d9943a75fa6410d98f182", "filename": "gcc/ada/par-ch7.adb", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fpar-ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fpar-ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch7.adb?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -37,7 +37,9 @@ package body Ch7 is\n    --  This routine scans out a package declaration, package body, or a\n    --  renaming declaration or generic instantiation starting with PACKAGE\n \n-   --  PACKAGE_DECLARATION ::= PACKAGE_SPECIFICATION;\n+   --  PACKAGE_DECLARATION ::=\n+   --    PACKAGE_SPECIFICATION\n+   --      [ASPECT_SPECIFICATIONS];\n \n    --  PACKAGE_SPECIFICATION ::=\n    --    package DEFINING_PROGRAM_UNIT_NAME is\n@@ -59,6 +61,11 @@ package body Ch7 is\n    --  PACKAGE_BODY_STUB ::=\n    --    package body DEFINING_IDENTIFIER is separate;\n \n+   --  PACKAGE_INSTANTIATION ::=\n+   --    package DEFINING_PROGRAM_UNIT_NAME is\n+   --      new generic_package_NAME [GENERIC_ACTUAL_PART]\n+   --        [ASPECT_SPECIFICATIONS];\n+\n    --  The value in Pf_Flags indicates which of these possible declarations\n    --  is acceptable to the caller:\n \n@@ -85,7 +92,10 @@ package body Ch7 is\n \n    --  Error recovery: cannot raise Error_Resync\n \n-   function P_Package (Pf_Flags : Pf_Rec) return Node_Id is\n+   function P_Package\n+     (Pf_Flags : Pf_Rec;\n+      Decl     : Node_Id := Empty) return Node_Id\n+   is\n       Package_Node       : Node_Id;\n       Specification_Node : Node_Id;\n       Name_Node          : Node_Id;\n@@ -185,7 +195,7 @@ package body Ch7 is\n                Set_Name (Package_Node, P_Qualified_Simple_Name);\n                Set_Generic_Associations\n                  (Package_Node, P_Generic_Actual_Part_Opt);\n-               TF_Semicolon;\n+               P_Aspect_Specifications (Package_Node);\n                Pop_Scope_Stack;\n \n             --  Case of package declaration or package specification\n@@ -239,7 +249,11 @@ package body Ch7 is\n                   Discard_Junk_List (P_Sequence_Of_Statements (SS_None));\n                end if;\n \n-               End_Statements (Specification_Node);\n+               if Nkind (Package_Node) = N_Package_Declaration then\n+                  End_Statements (Specification_Node, Package_Node);\n+               else\n+                  End_Statements (Specification_Node, Decl);\n+               end if;\n             end if;\n \n             return Package_Node;"}, {"sha": "8914a2f9a1d0846f7b075ff687d032a9687302f6", "filename": "gcc/ada/par-ch9.adb", "status": "modified", "additions": 39, "deletions": 16, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fpar-ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fpar-ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch9.adb?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -40,23 +40,33 @@ package body Ch9 is\n    function P_Entry_Body_Formal_Part               return Node_Id;\n    function P_Entry_Declaration                    return Node_Id;\n    function P_Entry_Index_Specification            return Node_Id;\n-   function P_Protected_Definition                 return Node_Id;\n    function P_Protected_Operation_Declaration_Opt  return Node_Id;\n    function P_Protected_Operation_Items            return List_Id;\n-   function P_Task_Definition                      return Node_Id;\n    function P_Task_Items                           return List_Id;\n \n+   function P_Protected_Definition (Decl : Node_Id) return Node_Id;\n+   --  Parses protected definition and following aspect specifications if\n+   --  present. The argument is the declaration node to which the aspect\n+   --  specifications are to be attached.\n+\n+   function P_Task_Definition (Decl : Node_Id) return Node_Id;\n+   --  Parses task definition and following aspect specifications if present.\n+   --  The argument is the declaration node to which the aspect specifications\n+   --  are to be attached.\n+\n    -----------------------------\n    -- 9.1  Task (also 10.1.3) --\n    -----------------------------\n \n    --  TASK_TYPE_DECLARATION ::=\n    --    task type DEFINING_IDENTIFIER [KNOWN_DISCRIMINANT_PART]\n-   --      [is [new INTERFACE_LIST with] TASK_DEFINITION];\n+   --      [is [new INTERFACE_LIST with] TASK_DEFINITION]\n+   --        [ASPECT_SPECIFICATIONS];\n \n    --  SINGLE_TASK_DECLARATION ::=\n    --    task DEFINING_IDENTIFIER\n-   --      [is [new INTERFACE_LIST with] TASK_DEFINITION];\n+   --      [is [new INTERFACE_LIST with] TASK_DEFINITION]\n+   --        [ASPECT_SPECIFICATIONS];\n \n    --  TASK_BODY ::=\n    --    task body DEFINING_IDENTIFIER is\n@@ -143,10 +153,17 @@ package body Ch9 is\n             end if;\n          end if;\n \n+         --  If we have aspect definitions present here, then we do not have\n+         --  a task definition present.\n+\n+         if Aspect_Specifications_Present then\n+            P_Aspect_Specifications (Task_Node);\n+\n          --  Parse optional task definition. Note that P_Task_Definition scans\n-         --  out the semicolon as well as the task definition itself.\n+         --  out the semicolon and possible aspect specifications as well as\n+         --  the task definition itself.\n \n-         if Token = Tok_Semicolon then\n+         elsif Token = Tok_Semicolon then\n \n             --  A little check, if the next token after semicolon is\n             --  Entry, then surely the semicolon should really be IS\n@@ -156,10 +173,13 @@ package body Ch9 is\n             if Token = Tok_Entry then\n                Error_Msg_SP -- CODEFIX\n                  (\"|\"\";\"\" should be IS\");\n-               Set_Task_Definition (Task_Node, P_Task_Definition);\n+               Set_Task_Definition (Task_Node, P_Task_Definition (Task_Node));\n             else\n                Pop_Scope_Stack; -- Remove unused entry\n             end if;\n+\n+         --  Here we have a task definition\n+\n          else\n             TF_Is; -- must have IS if no semicolon\n \n@@ -194,7 +214,7 @@ package body Ch9 is\n                end if;\n             end if;\n \n-            Set_Task_Definition (Task_Node, P_Task_Definition);\n+            Set_Task_Definition (Task_Node, P_Task_Definition (Task_Node));\n          end if;\n \n          return Task_Node;\n@@ -233,7 +253,7 @@ package body Ch9 is\n \n    --  Error recovery:  cannot raise Error_Resync\n \n-   function P_Task_Definition return Node_Id is\n+   function P_Task_Definition (Decl : Node_Id) return Node_Id is\n       Def_Node  : Node_Id;\n \n    begin\n@@ -253,7 +273,7 @@ package body Ch9 is\n          end loop;\n       end if;\n \n-      End_Statements (Def_Node);\n+      End_Statements (Def_Node, Decl);\n       return Def_Node;\n    end P_Task_Definition;\n \n@@ -347,11 +367,13 @@ package body Ch9 is\n \n    --  PROTECTED_TYPE_DECLARATION ::=\n    --    protected type DEFINING_IDENTIFIER [KNOWN_DISCRIMINANT_PART]\n-   --      is [new INTERFACE_LIST with] PROTECTED_DEFINITION;\n+   --      is [new INTERFACE_LIST with] PROTECTED_DEFINITION\n+   --        [ASPECT_SPECIFICATIONS];\n \n    --  SINGLE_PROTECTED_DECLARATION ::=\n    --    protected DEFINING_IDENTIFIER\n    --    is [new INTERFACE_LIST with] PROTECTED_DEFINITION;\n+   --      [ASPECT_SPECIFICATIONS];\n \n    --  PROTECTED_BODY ::=\n    --    protected body DEFINING_IDENTIFIER is\n@@ -464,8 +486,8 @@ package body Ch9 is\n                    End_Label           => Empty));\n \n                SIS_Entry_Active := False;\n-               End_Statements (Protected_Definition (Protected_Node));\n-               Scan; -- past semicolon\n+               End_Statements\n+                 (Protected_Definition (Protected_Node), Protected_Node);\n                return Protected_Node;\n             end if;\n \n@@ -503,7 +525,8 @@ package body Ch9 is\n             Scan; -- past WITH\n          end if;\n \n-         Set_Protected_Definition (Protected_Node, P_Protected_Definition);\n+         Set_Protected_Definition\n+           (Protected_Node, P_Protected_Definition (Protected_Node));\n          return Protected_Node;\n       end if;\n    end P_Protected;\n@@ -538,7 +561,7 @@ package body Ch9 is\n \n    --  Error recovery: cannot raise Error_Resync\n \n-   function P_Protected_Definition return Node_Id is\n+   function P_Protected_Definition (Decl : Node_Id) return Node_Id is\n       Def_Node  : Node_Id;\n       Item_Node : Node_Id;\n \n@@ -584,7 +607,7 @@ package body Ch9 is\n          end loop Declaration_Loop;\n       end loop Private_Loop;\n \n-      End_Statements (Def_Node);\n+      End_Statements (Def_Node, Decl);\n       return Def_Node;\n    end P_Protected_Definition;\n "}, {"sha": "6e12a179935c4fe4cd7717f5d467abad87c52b82", "filename": "gcc/ada/par-endh.adb", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fpar-endh.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fpar-endh.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-endh.adb?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -166,7 +166,7 @@ package body Endh is\n    -- Check_End --\n    ---------------\n \n-   function Check_End return Boolean is\n+   function Check_End (Decl : Node_Id := Empty) return Boolean is\n       Name_On_Separate_Line : Boolean;\n       --  Set True if the name on an END line is on a separate source line\n       --  from the END. This is highly suspicious, but is allowed. The point\n@@ -387,14 +387,23 @@ package body Endh is\n             end if;\n          end if;\n \n+         --  Scan aspect specifications if permitted here\n+\n+         if Aspect_Specifications_Present then\n+            if No (Decl) then\n+               P_Aspect_Specifications (Error);\n+            else\n+               P_Aspect_Specifications (Decl);\n+            end if;\n+\n          --  Except in case of END RECORD, semicolon must follow. For END\n          --  RECORD, a semicolon does follow, but it is part of a higher level\n          --  construct. In any case, a missing semicolon is not serious enough\n          --  to consider the END statement to be bad in the sense that we\n          --  are dealing with (i.e. to be suspicious that it is not in fact\n          --  the END statement we are looking for!)\n \n-         if End_Type /= E_Record then\n+         elsif End_Type /= E_Record then\n             if Token = Tok_Semicolon then\n                T_Semicolon;\n \n@@ -644,13 +653,15 @@ package body Endh is\n \n    --  Error recovery: cannot raise Error_Resync;\n \n-   procedure End_Statements (Parent : Node_Id := Empty) is\n+   procedure End_Statements\n+     (Parent : Node_Id := Empty;\n+      Decl   : Node_Id := Empty) is\n    begin\n       --  This loop runs more than once in the case where Check_End rejects\n       --  the END sequence, as indicated by Check_End returning False.\n \n       loop\n-         if Check_End then\n+         if Check_End (Decl) then\n             if Present (Parent) then\n                Set_End_Label (Parent, End_Labl);\n             end if;"}, {"sha": "86998322552ac7c386f5e16e26d3ecce7fed7de0", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -754,10 +754,14 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n    -------------\n \n    package Ch7 is\n-      function P_Package (Pf_Flags : Pf_Rec) return Node_Id;\n+      function P_Package\n+        (Pf_Flags : Pf_Rec;\n+         Decl     : Node_Id := Empty) return Node_Id;\n       --  Scans out any construct starting with the keyword PACKAGE. The\n       --  parameter indicates which possible kinds of construct (body, spec,\n-      --  instantiation etc.) are permissible in the current context.\n+      --  instantiation etc.) are permissible in the current context. Decl\n+      --  is set in the specification case to request that if there are aspect\n+      --  specifications present, they be associated with this declaration.\n    end Ch7;\n \n    -------------\n@@ -854,7 +858,9 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  the given declaration node, and the list of aspect specifications is\n       --  constructed and associated with this declaration node using a call to\n       --  Set_Aspect_Specifications. If no WITH keyword is present, then this\n-      --  call has no effect other than scanning out the semicolon.\n+      --  call has no effect other than scanning out the semicolon. If Decl is\n+      --  Error on entry, any scanned aspect specifications are ignored and a\n+      --  message is output saying aspect specifications not permitted here.\n \n       function P_Code_Statement (Subtype_Mark : Node_Id) return Node_Id;\n       --  Function to parse a code statement. The caller has scanned out\n@@ -880,7 +886,7 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n    --  Routines for handling end lines, including scope recovery\n \n    package Endh is\n-      function Check_End return Boolean;\n+      function Check_End (Decl : Node_Id := Empty) return Boolean;\n       --  Called when an end sequence is required. In the absence of an error\n       --  situation, Token contains Tok_End on entry, but in a missing end\n       --  case, this may not be the case. Pop_End_Context is used to determine\n@@ -891,6 +897,10 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  Skip_And_Reject). Note that the END sequence includes a semicolon,\n       --  except in the case of END RECORD, where a semicolon follows the END\n       --  RECORD, but is not part of the record type definition itself.\n+      --\n+      --  If Decl is non-empty, then aspect specifications are permitted\n+      --  following the end, and Decl is the declaration node with which\n+      --  these aspect specifications are to be associated.\n \n       procedure End_Skip;\n       --  Skip past an end sequence. On entry Token contains Tok_End, and we\n@@ -900,13 +910,19 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  position after the end sequence. We do not issue any additional\n       --  error messages while carrying this out.\n \n-      procedure End_Statements (Parent : Node_Id := Empty);\n+      procedure End_Statements\n+        (Parent : Node_Id := Empty;\n+         Decl   : Node_Id := Empty);\n       --  Called when an end is required or expected to terminate a sequence\n       --  of statements. The caller has already made an appropriate entry in\n       --  the Scope.Table to describe the expected form of the end. This can\n       --  only be used in cases where the only appropriate terminator is end.\n       --  If Parent is non-empty, then if a correct END line is encountered,\n       --  the End_Label field of Parent is set appropriately.\n+      --\n+      --  If Decl is non-null, then it is a declaration node, and aspect\n+      --  specifications are permitted after the end statement. These aspect\n+      --  specifications, if present, are stored in this declaration node.\n    end Endh;\n \n    --------------"}, {"sha": "469e77cb7c990aaea7c7393ebbf64b92705903a7", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -5371,16 +5371,37 @@ package body Sem_Attr is\n       --       P;\n       --    end;\n \n-      --  which shouold print 64 rather than 32. The exclusion of non-source\n+      --  which should print 64 rather than 32. The exclusion of non-source\n       --  constructs from this test comes from some internal usage in packed\n       --  arrays, which otherwise fails, could use more analysis perhaps???\n \n-      if In_Spec_Expression\n-        and then Comes_From_Source (N)\n-        and then not (Is_Entity_Name (P) and then Is_Frozen (Entity (P)))\n-      then\n-         return;\n-      end if;\n+      declare\n+         function Within_Aspect (N : Node_Id) return Boolean;\n+         --  True if within aspect expression. Giant kludge, do this test only\n+         --  within an aspect, since doing it more widely, even though clearly\n+         --  correct, causes regressions notably in GA19-001 ???\n+\n+         function Within_Aspect (N : Node_Id) return Boolean\n+         is\n+         begin\n+            if No (Parent (N)) then\n+               return False;\n+            elsif Nkind (N) = N_Aspect_Specification then\n+               return True;\n+            else\n+               return Within_Aspect (Parent (N));\n+            end if;\n+         end Within_Aspect;\n+\n+      begin\n+         if In_Spec_Expression\n+           and then Comes_From_Source (N)\n+           and then not (Is_Entity_Name (P) and then Is_Frozen (Entity (P)))\n+           and then Within_Aspect (N)\n+         then\n+            return;\n+         end if;\n+      end;\n \n       --  Acquire first two expressions (at the moment, no attributes take more\n       --  than two expressions in any case)."}, {"sha": "69b799dcad1abb682a2c4e026ebbccf13bcea540", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -5768,6 +5768,14 @@ package body Sem_Ch12 is\n \n       New_N := New_Copy (N);\n \n+      --  Copy aspects if present\n+\n+      if Has_Aspects (N) then\n+         Set_Has_Aspects (New_N, False);\n+         Set_Aspect_Specifications\n+           (New_N, Copy_Generic_List (Aspect_Specifications (N), Parent_Id));\n+      end if;\n+\n       if Instantiating then\n          Adjust_Instantiation_Sloc (New_N, S_Adjustment);\n       end if;"}, {"sha": "0a94250ecc0c10102283d57e2412688333a142a9", "filename": "gcc/ada/sem_ch12.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fsem_ch12.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fsem_ch12.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.ads?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -64,7 +64,9 @@ package Sem_Ch12 is\n    --  repeatedly: once to produce a copy on which semantic analysis of\n    --  the generic is performed, and once for each instantiation. The tree\n    --  being copied is not semantically analyzed, except that references to\n-   --  global entities are marked on terminal nodes.\n+   --  global entities are marked on terminal nodes. Note that this function\n+   --  copies any aspect specifications from the input node N to the returned\n+   --  node, as well as the setting of the Has_Aspects flag.\n \n    function Get_Instance_Of (A : Entity_Id) return Entity_Id;\n    --  Retrieve actual associated with given generic parameter."}, {"sha": "41aced438b99a30f76595e696e7920da2b126738", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -4150,10 +4150,16 @@ package body Sem_Ch3 is\n          end if;\n       end if;\n \n-      --  Make sure that generic actual types are properly frozen\n+      --  Make sure that generic actual types are properly frozen The subtype\n+      --  is marked as a generic actual type when the enclosing instance is\n+      --  analyzed, so here we identify the subtype from the tree structure.\n \n       if Expander_Active\n         and then Is_Generic_Actual_Type (Id)\n+        and then In_Instance\n+        and then not Comes_From_Source (N)\n+        and then Nkind (Subtype_Indication (N)) /= N_Subtype_Indication\n+        and then Is_Frozen (T)\n       then\n          Insert_Actions (N, Freeze_Entity (Id, N));\n       end if;"}, {"sha": "ea919c0497e9b52fbeb8bb5deeef65abaf59337e", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -2737,6 +2737,27 @@ package body Sem_Ch6 is\n             Set_Defining_Identifier (Form,\n               Make_Defining_Identifier (Loc,\n                 Chars (Defining_Identifier (Form))));\n+\n+            --  Resolve the types of the formals now, because the freeze point\n+            --  may appear in a different context, e.g. an instantiation.\n+\n+            if Nkind (Parameter_Type (Form)) /= N_Access_Definition then\n+               Find_Type (Parameter_Type (Form));\n+\n+            elsif\n+              No (Access_To_Subprogram_Definition (Parameter_Type (Form)))\n+            then\n+               Find_Type (Subtype_Mark (Parameter_Type (Form)));\n+\n+            else\n+\n+               --  the case of a null procedure with a formal that is an\n+               --  access_to_subprogram type, and that is used as an actual\n+               --  in an instantiation is left to the enthusiastic reader.\n+\n+               null;\n+            end if;\n+\n             Next (Form);\n          end loop;\n "}, {"sha": "57f522ffce023804d2cff57bc88916c611b9a9fb", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -1691,6 +1691,7 @@ package body Sem_Ch9 is\n           Defining_Identifier => O_Name,\n           Object_Definition   => Make_Identifier (Loc,  Chars (T)));\n \n+      Move_Aspects (N, O_Decl);\n       Rewrite (N, T_Decl);\n       Insert_After (N, O_Decl);\n       Mark_Rewrite_Insertion (O_Decl);\n@@ -1749,13 +1750,15 @@ package body Sem_Ch9 is\n       --  entity is the new object declaration. The single_task_declaration\n       --  is not used further in semantics or code generation, but is scanned\n       --  when generating debug information, and therefore needs the updated\n-      --  Sloc information for the entity (see Sprint).\n+      --  Sloc information for the entity (see Sprint). Aspect specifications\n+      --  are moved from the single task node to the object declaration node.\n \n       O_Decl :=\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => O_Name,\n           Object_Definition   => Make_Identifier (Loc, Chars (T)));\n \n+      Move_Aspects (N, O_Decl);\n       Rewrite (N, T_Decl);\n       Insert_After (N, O_Decl);\n       Mark_Rewrite_Insertion (O_Decl);"}, {"sha": "cc2704063ca5d5dfe50ccf496b3a64ed9e14457e", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 50, "deletions": 24, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -2120,7 +2120,9 @@ package Sinfo is\n \n       --  FULL_TYPE_DECLARATION ::=\n       --    type DEFINING_IDENTIFIER [KNOWN_DISCRIMINANT_PART]\n-      --      is TYPE_DEFINITION;\n+      --      is TYPE_DEFINITION\n+      --        [ASPECT_SPECIFICATIONS];\n+\n       --  | TASK_TYPE_DECLARATION\n       --  | PROTECTED_TYPE_DECLARATION\n \n@@ -2227,11 +2229,14 @@ package Sinfo is\n \n       --  OBJECT_DECLARATION ::=\n       --    DEFINING_IDENTIFIER_LIST : [aliased] [constant]\n-      --      [NULL_EXCLUSION] SUBTYPE_INDICATION [:= EXPRESSION];\n+      --      [NULL_EXCLUSION] SUBTYPE_INDICATION [:= EXPRESSION]\n+      --        [ASPECT_SPECIFICATIONS];\n       --  | DEFINING_IDENTIFIER_LIST : [aliased] [constant]\n-      --      ACCESS_DEFINITION [:= EXPRESSION];\n+      --      ACCESS_DEFINITION [:= EXPRESSION]\n+      --        [ASPECT_SPECIFICATIONS];\n       --  | DEFINING_IDENTIFIER_LIST : [aliased] [constant]\n-      --      ARRAY_TYPE_DEFINITION [:= EXPRESSION];\n+      --      ARRAY_TYPE_DEFINITION [:= EXPRESSION]\n+      --        [ASPECT_SPECIFICATIONS];\n       --  | SINGLE_TASK_DECLARATION\n       --  | SINGLE_PROTECTED_DECLARATION\n \n@@ -2841,7 +2846,8 @@ package Sinfo is\n \n       --  COMPONENT_DECLARATION ::=\n       --    DEFINING_IDENTIFIER_LIST : COMPONENT_DEFINITION\n-      --      [:= DEFAULT_EXPRESSION];\n+      --      [:= DEFAULT_EXPRESSION]\n+      --        [ASPECT_SPECIFICATIONS];\n \n       --  Note: although the syntax does not permit a component definition to\n       --  be an anonymous array (and the parser will diagnose such an attempt\n@@ -4209,7 +4215,9 @@ package Sinfo is\n       -- 6.1  Subprogram Declaration --\n       ---------------------------------\n \n-      --  SUBPROGRAM_DECLARATION ::= SUBPROGRAM_SPECIFICATION;\n+      --  SUBPROGRAM_DECLARATION ::=\n+      --    SUBPROGRAM_SPECIFICATION\n+      --      [ASPECT_SPECIFICATIONS];\n \n       --  N_Subprogram_Declaration\n       --  Sloc points to FUNCTION or PROCEDURE\n@@ -4223,7 +4231,8 @@ package Sinfo is\n       ------------------------------------------\n \n       --  ABSTRACT_SUBPROGRAM_DECLARATION ::=\n-      --    SUBPROGRAM_SPECIFICATION is abstract;\n+      --    SUBPROGRAM_SPECIFICATION is abstract\n+      --      [ASPECT_SPECIFICATIONS];\n \n       --  N_Abstract_Subprogram_Declaration\n       --  Sloc points to ABSTRACT\n@@ -4640,7 +4649,9 @@ package Sinfo is\n       -- 7.1  Package Declaration --\n       ------------------------------\n \n-      --  PACKAGE_DECLARATION ::= PACKAGE_SPECIFICATION;\n+      --  PACKAGE_DECLARATION ::=\n+      --    PACKAGE_SPECIFICATION\n+      --      [ASPECT_SPECIFICATIONS];\n \n       --  Note: the activation chain entity for a package spec is used for\n       --  all tasks declared in the package spec, or in the package body.\n@@ -4889,7 +4900,8 @@ package Sinfo is\n \n       --  TASK_TYPE_DECLARATION ::=\n       --    task type DEFINING_IDENTIFIER [KNOWN_DISCRIMINANT_PART]\n-      --      [is [new INTERFACE_LIST with] TASK_DEFINITION];\n+      --      [is [new INTERFACE_LIST with] TASK_DEFINITION]\n+      --        [ASPECT_SPECIFICATIONS];\n \n       --  N_Task_Type_Declaration\n       --  Sloc points to TASK\n@@ -4906,7 +4918,8 @@ package Sinfo is\n \n       --  SINGLE_TASK_DECLARATION ::=\n       --    task DEFINING_IDENTIFIER\n-      --      [is [new INTERFACE_LIST with] TASK_DEFINITION];\n+      --      [is [new INTERFACE_LIST with] TASK_DEFINITION]\n+      --        [ASPECT_SPECIFICATIONS];\n \n       --  N_Single_Task_Declaration\n       --  Sloc points to TASK\n@@ -4973,7 +4986,8 @@ package Sinfo is\n \n       --  PROTECTED_TYPE_DECLARATION ::=\n       --    protected type DEFINING_IDENTIFIER [KNOWN_DISCRIMINANT_PART]\n-      --      is [new INTERFACE_LIST with] PROTECTED_DEFINITION;\n+      --      is [new INTERFACE_LIST with] PROTECTED_DEFINITION\n+      --        {ASPECT_SPECIFICATIONS];\n \n       --  Note: protected type declarations are not permitted in Ada 83 mode\n \n@@ -4992,7 +5006,8 @@ package Sinfo is\n \n       --  SINGLE_PROTECTED_DECLARATION ::=\n       --    protected DEFINING_IDENTIFIER\n-      --      is [new INTERFACE_LIST with] PROTECTED_DEFINITION;\n+      --      is [new INTERFACE_LIST with] PROTECTED_DEFINITION\n+      --        [ASPECT_SPECIFICATIONS];\n \n       --  Note: single protected declarations are not allowed in Ada 83 mode\n \n@@ -5733,7 +5748,8 @@ package Sinfo is\n       -- 11.1  Exception Declaration --\n       ---------------------------------\n \n-      --  EXCEPTION_DECLARATION ::= DEFINING_IDENTIFIER_LIST : exception;\n+      --  EXCEPTION_DECLARATION ::= DEFINING_IDENTIFIER_LIST : exception\n+      --    [ASPECT_SPECIFICATIONS];\n \n       --  For consistency with object declarations etc., the parser converts\n       --  the case of multiple identifiers being declared to a series of\n@@ -5902,7 +5918,8 @@ package Sinfo is\n       ---------------------------------------\n \n       --  GENERIC_PACKAGE_DECLARATION ::=\n-      --    GENERIC_FORMAL_PART PACKAGE_SPECIFICATION;\n+      --    GENERIC_FORMAL_PART PACKAGE_SPECIFICATION\n+      --      [ASPECT_SPECIFICATIONS];\n \n       --  Note: when we do generics right, the Activation_Chain_Entity entry\n       --  for this node can be removed (since the expander won't see generic\n@@ -5941,13 +5958,16 @@ package Sinfo is\n \n       --  GENERIC_INSTANTIATION ::=\n       --    package DEFINING_PROGRAM_UNIT_NAME is\n-      --      new generic_package_NAME [GENERIC_ACTUAL_PART];\n+      --      new generic_package_NAME [GENERIC_ACTUAL_PART]\n+      --        [ASPECT_SPECIFICATIONS];\n       --  | [[not] overriding]\n       --    procedure DEFINING_PROGRAM_UNIT_NAME is\n-      --      new generic_procedure_NAME [GENERIC_ACTUAL_PART];\n+      --      new generic_procedure_NAME [GENERIC_ACTUAL_PART]\n+      --        [ASPECT_SPECIFICATIONS];\n       --  | [[not] overriding]\n       --    function DEFINING_DESIGNATOR is\n-      --      new generic_function_NAME [GENERIC_ACTUAL_PART];\n+      --      new generic_function_NAME [GENERIC_ACTUAL_PART]\n+      --        [ASPECT_SPECIFICATIONS];\n \n       --  N_Package_Instantiation\n       --  Sloc points to PACKAGE\n@@ -6031,9 +6051,11 @@ package Sinfo is\n \n       --  FORMAL_OBJECT_DECLARATION ::=\n       --    DEFINING_IDENTIFIER_LIST :\n-      --      MODE [NULL_EXCLUSION] SUBTYPE_MARK [:= DEFAULT_EXPRESSION];\n+      --      MODE [NULL_EXCLUSION] SUBTYPE_MARK [:= DEFAULT_EXPRESSION]\n+      --        [ASPECT_SPECIFICATIONS];\n       --  | DEFINING_IDENTIFIER_LIST :\n-      --      MODE ACCESS_DEFINITION [:= DEFAULT_EXPRESSION];\n+      --      MODE ACCESS_DEFINITION [:= DEFAULT_EXPRESSION]\n+      --        [ASPECT_SPECIFICATIONS];\n \n       --  Although the syntax allows multiple identifiers in the list, the\n       --  semantics is as though successive declarations were given with\n@@ -6061,7 +6083,8 @@ package Sinfo is\n \n       --  FORMAL_TYPE_DECLARATION ::=\n       --    type DEFINING_IDENTIFIER [DISCRIMINANT_PART]\n-      --      is FORMAL_TYPE_DEFINITION;\n+      --      is FORMAL_TYPE_DEFINITION\n+      --        [ASPECT_SPECIFICATIONS];\n \n       --  N_Formal_Type_Declaration\n       --  Sloc points to TYPE\n@@ -6208,7 +6231,8 @@ package Sinfo is\n       --------------------------------------------------\n \n       --  FORMAL_CONCRETE_SUBPROGRAM_DECLARATION ::=\n-      --    with SUBPROGRAM_SPECIFICATION [is SUBPROGRAM_DEFAULT];\n+      --    with SUBPROGRAM_SPECIFICATION [is SUBPROGRAM_DEFAULT]\n+      --      [ASPECT_SPECIFICATIONS];\n \n       --  N_Formal_Concrete_Subprogram_Declaration\n       --  Sloc points to WITH\n@@ -6224,7 +6248,8 @@ package Sinfo is\n       --------------------------------------------------\n \n       --  FORMAL_ABSTRACT_SUBPROGRAM_DECLARATION ::=\n-      --    with SUBPROGRAM_SPECIFICATION is abstract [SUBPROGRAM_DEFAULT];\n+      --    with SUBPROGRAM_SPECIFICATION is abstract [SUBPROGRAM_DEFAULT]\n+      --      [ASPECT_SPECIFICATIONS];\n \n       --  N_Formal_Abstract_Subprogram_Declaration\n       --  Sloc points to WITH\n@@ -6258,7 +6283,8 @@ package Sinfo is\n \n       --  FORMAL_PACKAGE_DECLARATION ::=\n       --    with package DEFINING_IDENTIFIER\n-      --      is new generic_package_NAME FORMAL_PACKAGE_ACTUAL_PART;\n+      --      is new generic_package_NAME FORMAL_PACKAGE_ACTUAL_PART\n+      --        [ASPECT_SPECIFICATIONS];\n \n       --  Note: formal package declarations not allowed in Ada 83 mode\n \n@@ -6384,7 +6410,7 @@ package Sinfo is\n       --  entry in the list of aspects. So we use this grammar instead:\n \n       --     ASPECT_SPECIFICATIONS ::=\n-      --       with ASPECT_SPECIFICATION {, ASPECT_SPECIFICATION};\n+      --       with ASPECT_SPECIFICATION {, ASPECT_SPECIFICATION}\n \n       --     ASPECT_SPECIFICATION =>\n       --       ASPECT_MARK [=> ASPECT_DEFINITION]"}, {"sha": "2d23a5730fb73739344477629a54619fb43591eb", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/718deaf1af8c923d15f417fd3b49ba909c5f26eb/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=718deaf1af8c923d15f417fd3b49ba909c5f26eb", "patch": "@@ -279,7 +279,7 @@ begin\n    --  Line for -gnatn switch\n \n    Write_Switch_Char (\"n\");\n-   Write_Line (\"Inlining of subprograms (apply pragma Inline across units)\");\n+   Write_Line (\"Enable pragma Inline (both within and across units)\");\n \n    --  Line for -gnatN switch\n "}]}