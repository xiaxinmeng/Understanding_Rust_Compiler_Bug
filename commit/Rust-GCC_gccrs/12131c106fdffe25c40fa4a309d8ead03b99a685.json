{"sha": "12131c106fdffe25c40fa4a309d8ead03b99a685", "node_id": "C_kwDOANBUbNoAKDEyMTMxYzEwNmZkZmZlMjVjNDBmYTRhMzA5ZDhlYWQwM2I5OWE2ODU", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-05-18T12:05:25Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-06-08T12:32:35Z"}, "message": "expand: Add prc macro expander and registration\n\nAdd containers and functions to the hir-map in order to register and\nlookup all three kind of procedural macros.\nAdd a first draft for attribute procedural macro expansion. This\nexpander still lack proper error handling as well as polishing.\n\ngcc/rust/ChangeLog:\n\n\t* util/rust-hir-map.cc (Mappings::insert_bang_proc_macro):\n\tAdd a function to insert a new bang proc macro.\n\t(Mappings::lookup_bang_proc_macro): Add a function to lookup a\n\tbang procedural macro.\n\t(Mappings::insert_derive_proc_macro): Add a function to insert a\n\tderive procedural macro.\n\t(Mappings::lookup_derive_proc_macro): Add a function to lookup a\n\tderive procedural macro.\n\t(Mappings::insert_attribute_proc_macro): Add a function to\n\tinsert an attribute procedural macro.\n\t(Mappings::lookup_attribute_proc_macro): Add a function to\n\tlookup an attribute procedural macro.\n\t* util/rust-hir-map.h: Add function prototypes.\n\t* expand/rust-expand-visitor.cc (ExpandVisitor::expand_outer_attribute):\n\tImplement expansion of outer attributes.\n\t(ExpandVisitor::expand_inner_attribute):\n\tAdd call for inner attribute expansion.\n\t* expand/rust-expand-visitor.h:\n\tAdd new procedural macro expander attribute.\n\t* expand/rust-proc-macro.cc (load_macros_array): Add a function\n\tto load the proc macro array from a given shared object.\n\t(load_macros): Add a function to retrieve procedural macro\n\tvector from a given shared object.\n\t(ProcMacroExpander::import_proc_macros): Add a function to load\n\tprocedural macros from a given extern crate name.\n\t* expand/rust-proc-macro.h (RUST_PROC_MACRO_H): Add new\n\tproc-macro file.\n\t(class ProcMacroExpander): Add new ProcMacroExpander class.\n\t* rust-session-manager.cc (Session::expansion): Create new macro\n\texpander and feed it to the expand visitor.\n\t* util/rust-attributes.cc: Add macro_export builtin attribute.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "c01ec34eb87fe38d5d2c8993d0cb55891378265d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c01ec34eb87fe38d5d2c8993d0cb55891378265d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12131c106fdffe25c40fa4a309d8ead03b99a685", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12131c106fdffe25c40fa4a309d8ead03b99a685", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12131c106fdffe25c40fa4a309d8ead03b99a685", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12131c106fdffe25c40fa4a309d8ead03b99a685/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "562a0860f15ec5da89cd3605bcab5da18421ce15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/562a0860f15ec5da89cd3605bcab5da18421ce15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/562a0860f15ec5da89cd3605bcab5da18421ce15"}], "stats": {"total": 235, "additions": 229, "deletions": 6}, "files": [{"sha": "04a899f14970418a4e9feca0cfa28a037e9304e6", "filename": "gcc/rust/expand/rust-expand-visitor.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12131c106fdffe25c40fa4a309d8ead03b99a685/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12131c106fdffe25c40fa4a309d8ead03b99a685/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc?ref=12131c106fdffe25c40fa4a309d8ead03b99a685", "patch": "@@ -17,6 +17,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"rust-expand-visitor.h\"\n+#include \"rust-proc-macro.h\"\n #include \"rust-attributes.h\"\n #include \"rust-ast.h\"\n #include \"rust-type.h\"\n@@ -1551,7 +1552,8 @@ template <typename T>\n void\n ExpandVisitor::expand_outer_attribute (T &item, AST::SimplePath &path)\n {\n-  // FIXME: Implement outer attribute expansion\n+  // FIXME: Retrieve path from segments + local use statements instead of string\n+  proc_expander.expand_attribute_proc_macro (item, path);\n }\n \n template <typename T>\n@@ -1585,8 +1587,8 @@ template <typename T>\n void\n ExpandVisitor::expand_inner_attribute (T &item, AST::SimplePath &path)\n {\n-  // TODO: Warn about instability ?\n-  // FIXME: Implement expansion for that particular path\n+  // FIXME: Retrieve path from segments + local use statements instead of string\n+  proc_expander.expand_attribute_proc_macro (item, path);\n }\n \n template <typename T>"}, {"sha": "fd72d0b6771ad394ae897a019dbfec38d95a6b9d", "filename": "gcc/rust/expand/rust-expand-visitor.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12131c106fdffe25c40fa4a309d8ead03b99a685/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12131c106fdffe25c40fa4a309d8ead03b99a685/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h?ref=12131c106fdffe25c40fa4a309d8ead03b99a685", "patch": "@@ -21,6 +21,7 @@\n \n #include \"rust-ast-visitor.h\"\n #include \"rust-macro-expand.h\"\n+#include \"rust-proc-macro.h\"\n \n namespace Rust {\n \n@@ -39,7 +40,9 @@ is_builtin (AST::Attribute &attr);\n class ExpandVisitor : public AST::ASTVisitor\n {\n public:\n-  ExpandVisitor (MacroExpander &expander) : expander (expander) {}\n+  ExpandVisitor (MacroExpander &expander, ProcMacroExpander &proc_expander)\n+    : expander (expander), proc_expander (proc_expander)\n+  {}\n \n   /* Expand all of the macro invocations currently contained in a crate */\n   void go (AST::Crate &crate);\n@@ -374,6 +377,7 @@ class ExpandVisitor : public AST::ASTVisitor\n \n private:\n   MacroExpander &expander;\n+  ProcMacroExpander &proc_expander;\n };\n \n } // namespace Rust"}, {"sha": "a53a5d87ab972c142b3c54ec1f71ad138177a9d4", "filename": "gcc/rust/expand/rust-proc-macro.cc", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12131c106fdffe25c40fa4a309d8ead03b99a685/gcc%2Frust%2Fexpand%2Frust-proc-macro.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12131c106fdffe25c40fa4a309d8ead03b99a685/gcc%2Frust%2Fexpand%2Frust-proc-macro.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-proc-macro.cc?ref=12131c106fdffe25c40fa4a309d8ead03b99a685", "patch": "@@ -61,4 +61,47 @@ load_macros (std::string path)\n \t\t\t\t\t    array->macros + array->length);\n }\n \n+void\n+ProcMacroExpander::import_proc_macros (std::string extern_crate)\n+{\n+  auto path = session.extern_crates.find (extern_crate);\n+  if (path == session.extern_crates.end ())\n+    {\n+      // Extern crate path is not available.\n+      // FIXME: Emit error\n+      rust_error_at (Location (), \"Cannot find requested proc macro crate\");\n+      gcc_unreachable ();\n+    }\n+  auto macros = load_macros (path->second);\n+\n+  std::string prefix = extern_crate + \"::\";\n+  for (auto &macro : macros)\n+    {\n+      switch (macro.tag)\n+\t{\n+\tcase ProcMacro::CUSTOM_DERIVE:\n+\t  rust_debug (\"Found one derive proc macro.\");\n+\t  mappings->insert_derive_proc_macro (\n+\t    std::make_pair (extern_crate,\n+\t\t\t    macro.payload.custom_derive.trait_name),\n+\t    macro.payload.custom_derive);\n+\t  break;\n+\tcase ProcMacro::ATTR:\n+\t  rust_debug (\"Found one attribute proc macro.\");\n+\t  mappings->insert_attribute_proc_macro (\n+\t    std::make_pair (extern_crate, macro.payload.attribute.name),\n+\t    macro.payload.attribute);\n+\t  break;\n+\tcase ProcMacro::BANG:\n+\t  rust_debug (\"Found one bang proc macro.\");\n+\t  mappings->insert_bang_proc_macro (\n+\t    std::make_pair (extern_crate, macro.payload.bang.name),\n+\t    macro.payload.bang);\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+    }\n+}\n+\n } // namespace Rust"}, {"sha": "244d274773c3a022ae46db2fca89b40e77169490", "filename": "gcc/rust/expand/rust-proc-macro.h", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12131c106fdffe25c40fa4a309d8ead03b99a685/gcc%2Frust%2Fexpand%2Frust-proc-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12131c106fdffe25c40fa4a309d8ead03b99a685/gcc%2Frust%2Fexpand%2Frust-proc-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-proc-macro.h?ref=12131c106fdffe25c40fa4a309d8ead03b99a685", "patch": "@@ -17,6 +17,13 @@\n #ifndef RUST_PROC_MACRO_H\n #define RUST_PROC_MACRO_H\n \n+#include <string>\n+#include \"rust-hir-map.h\"\n+#include \"rust-name-resolver.h\"\n+#include \"rust-session-manager.h\"\n+#include \"rust-ast.h\"\n+#include \"rust-ast-collector.h\"\n+#include \"rust-token-converter.h\"\n #include \"libproc_macro/proc_macro.h\"\n \n namespace Rust {\n@@ -29,6 +36,78 @@ namespace Rust {\n const std::vector<ProcMacro::Procmacro>\n load_macros (std::string path);\n \n+class ProcMacroExpander\n+{\n+public:\n+  ProcMacroExpander (Session &session)\n+    : session (session), has_changed_flag (false),\n+      resolver (Resolver::Resolver::get ()),\n+      mappings (Analysis::Mappings::get ())\n+\n+  {}\n+\n+  ~ProcMacroExpander () = default;\n+\n+  void import_proc_macros (std::string extern_crate);\n+\n+  template <typename T>\n+  void expand_derive_proc_macro (T &item, std::string &trait_name)\n+  {}\n+\n+  template <typename T>\n+  void expand_bang_proc_macro (T &item, AST::SimplePath &path)\n+  {}\n+\n+  template <typename T>\n+  void expand_attribute_proc_macro (T &item, AST::SimplePath &path)\n+  {\n+    ProcMacro::Attribute macro;\n+\n+    std::string crate = path.get_segments ()[0].get_segment_name ();\n+    std::string name = path.get_segments ()[1].get_segment_name ();\n+    if (!mappings->lookup_attribute_proc_macro (std::make_pair (crate, name),\n+\t\t\t\t\t\tmacro))\n+      {\n+\t// FIXME: Resolve this path segment instead of taking it directly.\n+\timport_proc_macros (crate);\n+      }\n+\n+    if (!mappings->lookup_attribute_proc_macro (std::make_pair (crate, name),\n+\t\t\t\t\t\tmacro))\n+      {\n+\trust_error_at (Location (), \"procedural macro %s not found\",\n+\t\t       name.c_str ());\n+\trust_assert (false);\n+      }\n+    // FIXME: Attach result back to the ast\n+    std::vector<TokenPtr> tokens;\n+    AST::TokenCollector collector (tokens);\n+\n+    collector.visit (item);\n+\n+    std::vector<const_TokenPtr> vec;\n+    for (auto i : collector.collect_tokens ())\n+      {\n+\tvec.push_back (std::const_pointer_cast<Token> (i));\n+      }\n+\n+    // FIXME: Handle attributes\n+    macro.macro (ProcMacro::TokenStream::make_tokenstream (), convert (vec));\n+  }\n+\n+  bool has_changed () const { return has_changed_flag; }\n+\n+  void reset_changed_state () { has_changed_flag = false; }\n+\n+private:\n+  Session &session;\n+  bool has_changed_flag;\n+\n+public:\n+  Resolver::Resolver *resolver;\n+  Analysis::Mappings *mappings;\n+};\n+\n } // namespace Rust\n \n #endif /* ! RUST_PROC_MACRO_H */"}, {"sha": "bbcc5696cb9aad8bb6d173c8eb4b5b5ae6190a82", "filename": "gcc/rust/rust-session-manager.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12131c106fdffe25c40fa4a309d8ead03b99a685/gcc%2Frust%2Frust-session-manager.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12131c106fdffe25c40fa4a309d8ead03b99a685/gcc%2Frust%2Frust-session-manager.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-session-manager.cc?ref=12131c106fdffe25c40fa4a309d8ead03b99a685", "patch": "@@ -867,12 +867,13 @@ Session::expansion (AST::Crate &crate)\n   /* expand by calling cxtctxt object's monotonic_expander's expand_crate\n    * method. */\n   MacroExpander expander (crate, cfg, *this);\n+  ProcMacroExpander proc_expander (*this);\n \n   while (!fixed_point_reached && iterations < cfg.recursion_limit)\n     {\n       CfgStrip ().go (crate);\n       Resolver::EarlyNameResolver ().go (crate);\n-      ExpandVisitor (expander).go (crate);\n+      ExpandVisitor (expander, proc_expander).go (crate);\n \n       fixed_point_reached = !expander.has_changed ();\n       expander.reset_changed_state ();"}, {"sha": "3403f48ed7322a65d5488e10134966c01df38ae3", "filename": "gcc/rust/util/rust-attributes.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12131c106fdffe25c40fa4a309d8ead03b99a685/gcc%2Frust%2Futil%2Frust-attributes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12131c106fdffe25c40fa4a309d8ead03b99a685/gcc%2Frust%2Futil%2Frust-attributes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.cc?ref=12131c106fdffe25c40fa4a309d8ead03b99a685", "patch": "@@ -43,6 +43,7 @@ static const BuiltinAttrDefinition __definitions[]\n      {\"rustc_builtin_macro\", EXPANSION},\n      {\"path\", EXPANSION},\n      {\"macro_use\", NAME_RESOLUTION},\n+     {\"macro_export\", NAME_RESOLUTION},\n      // FIXME: This is not implemented yet, see\n      // https://github.com/Rust-GCC/gccrs/issues/1475\n      {\"target_feature\", CODE_GENERATION},"}, {"sha": "706a29cef2cbdc5af2c36323d84bb3e94e17d16e", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12131c106fdffe25c40fa4a309d8ead03b99a685/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12131c106fdffe25c40fa4a309d8ead03b99a685/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=12131c106fdffe25c40fa4a309d8ead03b99a685", "patch": "@@ -941,6 +941,72 @@ Mappings::get_exported_macros ()\n   return exportedMacros;\n }\n \n+void\n+Mappings::insert_derive_proc_macro (\n+  std::pair<std::string, std::string> hierarchy, ProcMacro::CustomDerive macro)\n+{\n+  auto it = procmacroDeriveMappings.find (hierarchy);\n+  rust_assert (it == procmacroDeriveMappings.end ());\n+\n+  procmacroDeriveMappings[hierarchy] = macro;\n+}\n+\n+void\n+Mappings::insert_bang_proc_macro (std::pair<std::string, std::string> hierarchy,\n+\t\t\t\t  ProcMacro::Bang macro)\n+{\n+  auto it = procmacroBangMappings.find (hierarchy);\n+  rust_assert (it == procmacroBangMappings.end ());\n+\n+  procmacroBangMappings[hierarchy] = macro;\n+}\n+\n+void\n+Mappings::insert_attribute_proc_macro (\n+  std::pair<std::string, std::string> hierarchy, ProcMacro::Attribute macro)\n+{\n+  auto it = procmacroAttributeMappings.find (hierarchy);\n+  rust_assert (it == procmacroAttributeMappings.end ());\n+\n+  procmacroAttributeMappings[hierarchy] = macro;\n+}\n+\n+bool\n+Mappings::lookup_derive_proc_macro (\n+  std::pair<std::string, std::string> hierarchy, ProcMacro::CustomDerive &macro)\n+{\n+  auto it = procmacroDeriveMappings.find (hierarchy);\n+  if (it == procmacroDeriveMappings.end ())\n+    return false;\n+\n+  macro = it->second;\n+  return true;\n+}\n+\n+bool\n+Mappings::lookup_bang_proc_macro (std::pair<std::string, std::string> hierarchy,\n+\t\t\t\t  ProcMacro::Bang &macro)\n+{\n+  auto it = procmacroBangMappings.find (hierarchy);\n+  if (it == procmacroBangMappings.end ())\n+    return false;\n+\n+  macro = it->second;\n+  return true;\n+}\n+\n+bool\n+Mappings::lookup_attribute_proc_macro (\n+  std::pair<std::string, std::string> hierarchy, ProcMacro::Attribute &macro)\n+{\n+  auto it = procmacroAttributeMappings.find (hierarchy);\n+  if (it == procmacroAttributeMappings.end ())\n+    return false;\n+\n+  macro = it->second;\n+  return true;\n+}\n+\n void\n Mappings::insert_visibility (NodeId id, Privacy::ModuleVisibility visibility)\n {"}, {"sha": "6e6a1c8ddee8ea9f1ea23e9da2509c7cfe1ad6c0", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12131c106fdffe25c40fa4a309d8ead03b99a685/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12131c106fdffe25c40fa4a309d8ead03b99a685/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=12131c106fdffe25c40fa4a309d8ead03b99a685", "patch": "@@ -28,6 +28,7 @@\n #include \"rust-hir-full-decls.h\"\n #include \"rust-lang-item.h\"\n #include \"rust-privacy-common.h\"\n+#include \"libproc_macro/proc_macro.h\"\n \n namespace Rust {\n namespace Analysis {\n@@ -282,6 +283,22 @@ class Mappings\n   void insert_exported_macro (AST::MacroRulesDefinition &def);\n   std::vector<NodeId> &get_exported_macros ();\n \n+  void insert_derive_proc_macro (std::pair<std::string, std::string> hierachy,\n+\t\t\t\t ProcMacro::CustomDerive macro);\n+  void insert_bang_proc_macro (std::pair<std::string, std::string> hierachy,\n+\t\t\t       ProcMacro::Bang macro);\n+  void\n+  insert_attribute_proc_macro (std::pair<std::string, std::string> hierachy,\n+\t\t\t       ProcMacro::Attribute macro);\n+\n+  bool lookup_derive_proc_macro (std::pair<std::string, std::string> hierachy,\n+\t\t\t\t ProcMacro::CustomDerive &macro);\n+  bool lookup_bang_proc_macro (std::pair<std::string, std::string> hierachy,\n+\t\t\t       ProcMacro::Bang &macro);\n+  bool\n+  lookup_attribute_proc_macro (std::pair<std::string, std::string> hierachy,\n+\t\t\t       ProcMacro::Attribute &macro);\n+\n   void insert_visibility (NodeId id, Privacy::ModuleVisibility visibility);\n   bool lookup_visibility (NodeId id, Privacy::ModuleVisibility &def);\n \n@@ -350,11 +367,21 @@ class Mappings\n   // all hirid nodes\n   std::map<CrateNum, std::set<HirId>> hirNodesWithinCrate;\n \n-  // macros\n+  // MBE macros\n   std::map<NodeId, AST::MacroRulesDefinition *> macroMappings;\n   std::map<NodeId, AST::MacroRulesDefinition *> macroInvocations;\n   std::vector<NodeId> exportedMacros;\n \n+  // Procedural macros\n+  std::map<std::pair<std::string, std::string>, ProcMacro::CustomDerive>\n+    procmacroDeriveMappings;\n+\n+  std::map<std::pair<std::string, std::string>, ProcMacro::Bang>\n+    procmacroBangMappings;\n+\n+  std::map<std::pair<std::string, std::string>, ProcMacro::Attribute>\n+    procmacroAttributeMappings;\n+\n   // crate names\n   std::map<CrateNum, std::string> crate_names;\n "}]}