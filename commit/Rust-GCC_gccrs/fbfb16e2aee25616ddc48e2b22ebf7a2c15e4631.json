{"sha": "fbfb16e2aee25616ddc48e2b22ebf7a2c15e4631", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJmYjE2ZTJhZWUyNTYxNmRkYzQ4ZTJiMjJlYmY3YTJjMTVlNDYzMQ==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@redhat.com", "date": "2004-01-10T06:54:02Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2004-01-10T06:54:02Z"}, "message": "toplev.c (rest_of_handle_cfg): Add reg_scan pass if we're running mark_constant_function.\n\n2004-01-09  Eric Christopher  <echristo@redhat.com>\n\n\t* toplev.c (rest_of_handle_cfg): Add reg_scan pass\n\tif we're running mark_constant_function.\n\nFrom-SVN: r75634", "tree": {"sha": "02f8d0d37f149fabce56bc29874eafe5e1da8e56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/02f8d0d37f149fabce56bc29874eafe5e1da8e56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbfb16e2aee25616ddc48e2b22ebf7a2c15e4631", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbfb16e2aee25616ddc48e2b22ebf7a2c15e4631", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbfb16e2aee25616ddc48e2b22ebf7a2c15e4631", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbfb16e2aee25616ddc48e2b22ebf7a2c15e4631/comments", "author": {"login": "echristo", "id": 327308, "node_id": "MDQ6VXNlcjMyNzMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/327308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/echristo", "html_url": "https://github.com/echristo", "followers_url": "https://api.github.com/users/echristo/followers", "following_url": "https://api.github.com/users/echristo/following{/other_user}", "gists_url": "https://api.github.com/users/echristo/gists{/gist_id}", "starred_url": "https://api.github.com/users/echristo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/echristo/subscriptions", "organizations_url": "https://api.github.com/users/echristo/orgs", "repos_url": "https://api.github.com/users/echristo/repos", "events_url": "https://api.github.com/users/echristo/events{/privacy}", "received_events_url": "https://api.github.com/users/echristo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cc23f3c7004693426582ca7f31f56c318618c7db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc23f3c7004693426582ca7f31f56c318618c7db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc23f3c7004693426582ca7f31f56c318618c7db"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "a4756335357687f645c2bbbb7d751bef89cf8079", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfb16e2aee25616ddc48e2b22ebf7a2c15e4631/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfb16e2aee25616ddc48e2b22ebf7a2c15e4631/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbfb16e2aee25616ddc48e2b22ebf7a2c15e4631", "patch": "@@ -1,3 +1,8 @@\n+2004-01-09  Eric Christopher  <echristo@redhat.com>\n+\n+\t* toplev.c (rest_of_handle_cfg): Add reg_scan pass\n+\tif we're running mark_constant_function.\n+\n 2004-01-09  Jeff Bailey  <jbailey@nisa.net>\n \n \tPR target/12561"}, {"sha": "0f6ca26faba73131b390de6aeefa71130f69f6e2", "filename": "gcc/toplev.c", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfb16e2aee25616ddc48e2b22ebf7a2c15e4631/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfb16e2aee25616ddc48e2b22ebf7a2c15e4631/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=fbfb16e2aee25616ddc48e2b22ebf7a2c15e4631", "patch": "@@ -835,11 +835,11 @@ int flag_schedule_speculative_load_dangerous = 0;\n \n    flag_sched_stalled_insns means that insns can be moved prematurely from the queue\n    of stalled insns into the ready list.\n-  \n+\n    flag_sched_stalled_insns_dep controls how many insn groups will be examined\n    for a dependency on a stalled insn that is candidate for premature removal\n    from the queue of stalled insns into the ready list (has an effect only if\n-   the flag 'sched_stalled_insns' is set).  */ \n+   the flag 'sched_stalled_insns' is set).  */\n \n int flag_sched_stalled_insns = 0;\n int flag_sched_stalled_insns_dep = 1;\n@@ -1237,12 +1237,12 @@ randomize (void)\n     {\n       unsigned HOST_WIDE_INT value;\n       static char random_seed[HOST_BITS_PER_WIDE_INT / 4 + 3];\n-      \n+\n       /* Get some more or less random data.  */\n #ifdef HAVE_GETTIMEOFDAY\n       {\n  \tstruct timeval tv;\n- \t\n+\n  \tgettimeofday (&tv, NULL);\n \tlocal_tick = tv.tv_sec * 1000 + tv.tv_usec / 1000;\n       }\n@@ -1255,7 +1255,7 @@ randomize (void)\n       }\n #endif\n       value = local_tick ^ getpid ();\n-      \n+\n       sprintf (random_seed, HOST_WIDE_INT_PRINT_HEX, value);\n       flag_random_seed = random_seed;\n     }\n@@ -1410,7 +1410,7 @@ output_file_directive (FILE *asm_file, const char *input_name)\n {\n   int len;\n   const char *na;\n-  \n+\n   if (input_name == NULL)\n     input_name = \"<stdin>\";\n \n@@ -2512,7 +2512,12 @@ rest_of_handle_cfg (tree decl, rtx insns)\n      life_analysis rarely eliminates modification of external memory.\n    */\n   if (optimize)\n-    mark_constant_function ();\n+    {\n+      /* Alias analysis depends on this information and mark_constant_function\n+       depends on alias analysis.  */\n+      reg_scan (insns, max_reg_num (), 1);\n+      mark_constant_function ();\n+    }\n \n   close_dump_file (DFI_cfg, print_rtl_with_bb, insns);\n }\n@@ -3061,7 +3066,7 @@ rest_of_compilation (tree decl)\n \n   /* Register rtl specific functions for cfg.  */\n   rtl_register_cfg_hooks ();\n-  \n+\n   /* Now that we're out of the frontend, we shouldn't have any more\n      CONCATs anywhere.  */\n   generating_concat_p = 0;\n@@ -3629,7 +3634,7 @@ rest_of_compilation (tree decl)\n }\n \n /* Display help for target options.  */\n-void \n+void\n display_target_options (void)\n {\n   int undoc, i;\n@@ -4011,7 +4016,7 @@ default_get_pch_validity (size_t *len)\n   size_t i;\n #endif\n   char *result, *r;\n-  \n+\n   *len = sizeof (target_flags) + 2;\n #ifdef TARGET_OPTIONS\n   for (i = 0; i < ARRAY_SIZE (target_options); i++)\n@@ -4028,7 +4033,7 @@ default_get_pch_validity (size_t *len)\n   r += 2;\n   memcpy (r, &target_flags, sizeof (target_flags));\n   r += sizeof (target_flags);\n-  \n+\n #ifdef TARGET_OPTIONS\n   for (i = 0; i < ARRAY_SIZE (target_options); i++)\n     {\n@@ -4053,7 +4058,7 @@ default_pch_valid_p (const void *data_p, size_t len)\n   const char *data = (const char *)data_p;\n   const char *flag_that_differs = NULL;\n   size_t i;\n-  \n+\n   /* -fpic and -fpie also usually make a PCH invalid.  */\n   if (data[0] != flag_pic)\n     return _(\"created and used with different settings of -fpic\");\n@@ -4084,7 +4089,7 @@ default_pch_valid_p (const void *data_p, size_t len)\n     }\n   data += sizeof (target_flags);\n   len -= sizeof (target_flags);\n-  \n+\n   /* Check string options.  */\n #ifdef TARGET_OPTIONS\n   for (i = 0; i < ARRAY_SIZE (target_options); i++)\n@@ -4105,7 +4110,7 @@ default_pch_valid_p (const void *data_p, size_t len)\n #endif\n \n   return NULL;\n-  \n+\n  make_message:\n   {\n     char *r;"}]}