{"sha": "54e774c010842d336124426aec671a96712cc1d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRlNzc0YzAxMDg0MmQzMzYxMjQ0MjZhZWM2NzFhOTY3MTJjYzFkNw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2014-11-14T15:47:53Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2014-11-14T15:47:53Z"}, "message": "optc-save-gen.awk: Output cl_target_option_eq...\n\n\n\t* optc-save-gen.awk: Output cl_target_option_eq,\n\tcl_target_option_hash, cl_target_option_stream_out,\n\tcl_target_option_stream_in functions.\n\t* opth-gen.awk: Output prototypes for\n\tcl_target_option_eq and cl_target_option_hash.\n\t* lto-streamer.h (cl_target_option_stream_out,\n\tcl_target_option_stream_in): Declare.\n\t* tree.c (cl_option_hash_hash): Use cl_target_option_hash.\n\t(cl_option_hash_eq): Use cl_target_option_eq.\n\t* tree-streamer-in.c (unpack_value_fields): Stream in\n\tTREE_TARGET_OPTION.\n\t* lto-streamer-out.c (DFS::DFS_write_tree_body): Follow\n\tDECL_FUNCTION_SPECIFIC_TARGET.\n\t(hash_tree): Hash TREE_TARGET_OPTION; visit\n\tDECL_FUNCTION_SPECIFIC_TARGET.\n\t* tree-streamer-out.c (streamer_pack_tree_bitfields): Skip\n\tTS_TARGET_OPTION.\n\t(streamer_write_tree_body): Output TS_TARGET_OPTION.\n\n\t* lto.c (compare_tree_sccs_1): Compare cl_target_option_eq.\n\nFrom-SVN: r217571", "tree": {"sha": "b9b240b3b0e9c9a5fc0a8dd259d3fa2ad0e27aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9b240b3b0e9c9a5fc0a8dd259d3fa2ad0e27aa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54e774c010842d336124426aec671a96712cc1d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e774c010842d336124426aec671a96712cc1d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54e774c010842d336124426aec671a96712cc1d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e774c010842d336124426aec671a96712cc1d7/comments", "author": null, "committer": null, "parents": [{"sha": "7f201a67fbf807634ed09a0b8cb8b44d0ed31227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f201a67fbf807634ed09a0b8cb8b44d0ed31227", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f201a67fbf807634ed09a0b8cb8b44d0ed31227"}], "stats": {"total": 190, "additions": 176, "deletions": 14}, "files": [{"sha": "5fd3ca894616d589a3acfc7668ddad8326f57aad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e774c010842d336124426aec671a96712cc1d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e774c010842d336124426aec671a96712cc1d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54e774c010842d336124426aec671a96712cc1d7", "patch": "@@ -1,3 +1,24 @@\n+2014-11-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* optc-save-gen.awk: Output cl_target_option_eq,\n+\tcl_target_option_hash, cl_target_option_stream_out,\n+\tcl_target_option_stream_in functions.\n+\t* opth-gen.awk: Output prototypes for\n+\tcl_target_option_eq and cl_target_option_hash.\n+\t* lto-streamer.h (cl_target_option_stream_out,\n+\tcl_target_option_stream_in): Declare.\n+\t* tree.c (cl_option_hash_hash): Use cl_target_option_hash.\n+\t(cl_option_hash_eq): Use cl_target_option_eq.\n+\t* tree-streamer-in.c (unpack_value_fields): Stream in\n+\tTREE_TARGET_OPTION.\n+\t* lto-streamer-out.c (DFS::DFS_write_tree_body): Follow\n+\tDECL_FUNCTION_SPECIFIC_TARGET.\n+\t(hash_tree): Hash TREE_TARGET_OPTION; visit\n+\tDECL_FUNCTION_SPECIFIC_TARGET.\n+\t* tree-streamer-out.c (streamer_pack_tree_bitfields): Skip\n+\tTS_TARGET_OPTION.\n+\t(streamer_write_tree_body): Output TS_TARGET_OPTION.\n+\n 2014-11-14  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-fold.h (gimple_fold_stmt_to_constant_1): Add 2nd"}, {"sha": "6975042cf279c121d19aaef49ce2e798c1cd1ba8", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e774c010842d336124426aec671a96712cc1d7/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e774c010842d336124426aec671a96712cc1d7/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=54e774c010842d336124426aec671a96712cc1d7", "patch": "@@ -1,3 +1,7 @@\n+2014-11-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* lto.c (compare_tree_sccs_1): Compare cl_target_option_eq.\n+\n 2014-11-13  Ilya Verbin  <ilya.verbin@intel.com>\n \t    Bernd Schmidt  <bernds@codesourcery.com>\n \t    Andrey Turetskiy  <andrey.turetskiy@intel.com>"}, {"sha": "ff7f9f63453d438ae4a41cb41268aa00c4c2c942", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e774c010842d336124426aec671a96712cc1d7/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e774c010842d336124426aec671a96712cc1d7/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=54e774c010842d336124426aec671a96712cc1d7", "patch": "@@ -1377,7 +1377,8 @@ compare_tree_sccs_1 (tree t1, tree t2, tree **map)\n       return false;\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n-    gcc_unreachable ();\n+    if (!cl_target_option_eq (TREE_TARGET_OPTION (t1), TREE_TARGET_OPTION (t2)))\n+      return false;\n \n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n     if (memcmp (TREE_OPTIMIZATION (t1), TREE_OPTIMIZATION (t2),"}, {"sha": "861683460ad5364ca7640edf32499dfca92232ff", "filename": "gcc/optc-save-gen.awk", "status": "modified", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e774c010842d336124426aec671a96712cc1d7/gcc%2Foptc-save-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e774c010842d336124426aec671a96712cc1d7/gcc%2Foptc-save-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-save-gen.awk?ref=54e774c010842d336124426aec671a96712cc1d7", "patch": "@@ -39,6 +39,18 @@ print \"#include \" quote \"intl.h\" quote\n print \"\"\n print \"#include \" quote \"flags.h\" quote\n print \"#include \" quote \"target.h\" quote\n+print \"#include \" quote \"inchash.h\" quote\n+print \"#include \" quote \"tree.h\" quote\n+print \"#include \" quote \"tree-ssa-alias.h\" quote\n+print \"#include \" quote \"is-a.h\" quote\n+print \"#include \" quote \"predict.h\" quote\n+print \"#include \" quote \"function.h\" quote\n+print \"#include \" quote \"basic-block.h\" quote\n+print \"#include \" quote \"gimple-expr.h\" quote\n+print \"#include \" quote \"gimple.h\" quote\n+print \"#include \" quote \"data-streamer.h\" quote\n+print \"#include \" quote \"ipa-ref.h\" quote\n+print \"#include \" quote \"cgraph.h\" quote\n print \"\"\n \n if (n_extra_c_includes > 0) {\n@@ -417,4 +429,126 @@ print \"    targetm.target_option.print (file, indent, ptr);\";\n \n print \"}\";\n \n+print \"\";\n+print \"/* Compare two target options  */\";\n+print \"bool\";\n+print \"cl_target_option_eq (struct cl_target_option const *ptr1 ATTRIBUTE_UNUSED,\";\n+print \"                     struct cl_target_option const *ptr2 ATTRIBUTE_UNUSED)\";\n+print \"{\";\n+n_target_val = 0;\n+n_target_str = 0;\n+\n+for (i = 0; i < n_target_save; i++) {\n+\tvar = target_save_decl[i];\n+\tsub (\" *=.*\", \"\", var);\n+\tname = var;\n+\ttype = var;\n+\tsub(\"^.*[ *]\", \"\", name)\n+\tsub(\" *\" name \"$\", \"\", type)\n+\tif (target_save_decl[i] ~ \"^const char \\\\*+[_\" alnum \"]+$\")\n+\t\tvar_target_str[n_target_str++] = name;\n+\telse {\n+\t\tvar_target_val_type[n_target_val] = type;\n+\t\tvar_target_val[n_target_val++] = name;\n+\t}\n+}\n+if (have_save) {\n+\tfor (i = 0; i < n_opts; i++) {\n+\t\tif (flag_set_p(\"Save\", flags[i])) {\n+\t\t\tname = var_name(flags[i])\n+\t\t\tif(name == \"\")\n+\t\t\t\tname = \"target_flags\";\n+\n+\t\t\tif(name in var_list_seen)\n+\t\t\t\tcontinue;\n+\n+\t\t\tvar_list_seen[name]++;\n+\t\t\totype = var_type_struct(flags[i])\n+\t\t\tif (otype ~ \"^const char \\\\**$\")\n+\t\t\t\tvar_target_str[n_target_str++] = \"x_\" name;\n+\t\t\telse {\n+\t\t\t\tvar_target_val_type[n_target_val] = otype;\n+\t\t\t\tvar_target_val[n_target_val++] = \"x_\" name;\n+\t\t\t}\n+\t\t}\n+\t}\n+} else {\n+\tvar_target_val_type[n_target_val] = \"int\";\n+\tvar_target_val[n_target_val++] = \"x_target_flags\";\n+}\n+\n+for (i = 0; i < n_target_str; i++) {\n+\tname = var_target_str[i]\n+\tprint \"  if (ptr1->\" name\" != ptr2->\" name;\n+\tprint \"      && (!ptr1->\" name\" || !ptr2->\" name\n+\tprint \"          || strcmp (ptr1->\" name\", ptr2->\" name \")))\";\n+\tprint \"    return false;\";\n+}\n+for (i = 0; i < n_target_val; i++) {\n+\tname = var_target_val[i]\n+\tprint \"  if (ptr1->\" name\" != ptr2->\" name \")\";\n+\tprint \"    return false;\";\n+}\n+\n+print \"  return true;\";\n+\n+print \"}\";\n+\n+print \"\";\n+print \"/* Hash target options  */\";\n+print \"hashval_t\";\n+print \"cl_target_option_hash (struct cl_target_option const *ptr ATTRIBUTE_UNUSED)\";\n+print \"{\";\n+print \"  inchash::hash hstate;\";\n+for (i = 0; i < n_target_str; i++) {\n+\tname = var_target_str[i]\n+\tprint \"  if (ptr->\" name\")\";\n+\tprint \"    hstate.add (ptr->\" name\", strlen (ptr->\" name\"));\";\n+\tprint \"  else\";\n+\tprint \"    hstate.add_int (0);\";\n+}\n+for (i = 0; i < n_target_val; i++) {\n+\tname = var_target_val[i]\n+\tprint \"  hstate.add_wide_int (ptr->\" name\");\";\n+}\n+print \"  return hstate.end ();\";\n+print \"}\";\n+\n+print \"\";\n+print \"/* Stream out target options  */\";\n+print \"void\";\n+print \"cl_target_option_stream_out (struct output_block *ob ATTRIBUTE_UNUSED,\";\n+print \"                             struct bitpack_d *bp ATTRIBUTE_UNUSED,\";\n+print \"                             struct cl_target_option *ptr ATTRIBUTE_UNUSED)\";\n+print \"{\";\n+for (i = 0; i < n_target_str; i++) {\n+\tname = var_target_str[i]\n+\tprint \"  bp_pack_string (ob, bp, ptr->\" name\", true);\";\n+}\n+for (i = 0; i < n_target_val; i++) {\n+\tname = var_target_val[i]\n+\tprint \"  bp_pack_value (bp, ptr->\" name\", 64);\";\n+}\n+print \"}\";\n+\n+print \"\";\n+print \"/* Stream in target options  */\";\n+print \"void\";\n+print \"cl_target_option_stream_in (struct data_in *data_in ATTRIBUTE_UNUSED,\";\n+print \"                            struct bitpack_d *bp ATTRIBUTE_UNUSED,\";\n+print \"                            struct cl_target_option *ptr ATTRIBUTE_UNUSED)\";\n+print \"{\";\n+for (i = 0; i < n_target_str; i++) {\n+\tname = var_target_str[i]\n+\tprint \"  ptr->\" name\" = bp_unpack_string (data_in, bp);\";\n+\tprint \"  if (ptr->\" name\")\";\n+\tprint \"    ptr->\" name\" = xstrdup (ptr->\" name\");\";\n+}\n+for (i = 0; i < n_target_val; i++) {\n+\tname = var_target_val[i]\n+\tprint \"  ptr->\" name\" = (\" var_target_val_type[i] \") bp_unpack_value (bp, 64);\";\n+}\n+\n+print \"}\";\n+\n }"}, {"sha": "a8a04b789ec0079a61c7e71819ae3908c2998d0d", "filename": "gcc/opth-gen.awk", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e774c010842d336124426aec671a96712cc1d7/gcc%2Fopth-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e774c010842d336124426aec671a96712cc1d7/gcc%2Fopth-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopth-gen.awk?ref=54e774c010842d336124426aec671a96712cc1d7", "patch": "@@ -293,6 +293,12 @@ print \"\";\n print \"/* Print target option variables from a structure.  */\";\n print \"extern void cl_target_option_print (FILE *, int, struct cl_target_option *);\";\n print \"\";\n+print \"/* Compare two target option variables from a structure.  */\";\n+print \"extern bool cl_target_option_eq (const struct cl_target_option *, const struct cl_target_option *);\";\n+print \"\";\n+print \"/* Hash option variables from a structure.  */\";\n+print \"extern hashval_t cl_target_option_hash (const struct cl_target_option *);\";\n+print \"\";\n print \"/* Anything that includes tm.h, does not necessarily need this.  */\"\n print \"#if !defined(GCC_TM_H)\"\n print \"#include \\\"input.h\\\" /* for location_t */\""}, {"sha": "c63bc607d8af85a2b85bf46a77cfb834266b8f75", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e774c010842d336124426aec671a96712cc1d7/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e774c010842d336124426aec671a96712cc1d7/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=54e774c010842d336124426aec671a96712cc1d7", "patch": "@@ -506,9 +506,6 @@ unpack_value_fields (struct data_in *data_in, struct bitpack_d *bp, tree expr)\n   if (CODE_CONTAINS_STRUCT (code, TS_TRANSLATION_UNIT_DECL))\n     unpack_ts_translation_unit_decl_value_fields (data_in, bp, expr);\n \n-  if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n-    gcc_unreachable ();\n-\n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n     unpack_ts_optimization (bp, expr);\n \n@@ -526,6 +523,9 @@ unpack_value_fields (struct data_in *data_in, struct bitpack_d *bp, tree expr)\n \tvec_safe_grow (CONSTRUCTOR_ELTS (expr), length);\n     }\n \n+  if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n+    cl_target_option_stream_in (data_in, bp, TREE_TARGET_OPTION (expr));\n+\n   if (code == OMP_CLAUSE)\n     unpack_ts_omp_clause_value_fields (data_in, bp, expr);\n }"}, {"sha": "41dca6e6abd963965639ce5dccf2c7ce17334366", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e774c010842d336124426aec671a96712cc1d7/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e774c010842d336124426aec671a96712cc1d7/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=54e774c010842d336124426aec671a96712cc1d7", "patch": "@@ -472,9 +472,6 @@ streamer_pack_tree_bitfields (struct output_block *ob,\n   if (CODE_CONTAINS_STRUCT (code, TS_TRANSLATION_UNIT_DECL))\n     pack_ts_translation_unit_decl_value_fields (ob, bp, expr);\n \n-  if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n-    gcc_unreachable ();\n-\n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n     pack_ts_optimization (bp, expr);\n \n@@ -484,6 +481,9 @@ streamer_pack_tree_bitfields (struct output_block *ob,\n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n     bp_pack_var_len_unsigned (bp, CONSTRUCTOR_NELTS (expr));\n \n+  if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n+    cl_target_option_stream_out (ob, bp, TREE_TARGET_OPTION (expr));\n+\n   if (code == OMP_CLAUSE)\n     pack_ts_omp_clause_value_fields (ob, bp, expr);\n }"}, {"sha": "933e8eb4d615b5e70ae5f3df4577f801534d9002", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e774c010842d336124426aec671a96712cc1d7/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e774c010842d336124426aec671a96712cc1d7/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=54e774c010842d336124426aec671a96712cc1d7", "patch": "@@ -11486,10 +11486,7 @@ cl_option_hash_hash (const void *x)\n     }\n \n   else if (TREE_CODE (t) == TARGET_OPTION_NODE)\n-    {\n-      p = (const char *)TREE_TARGET_OPTION (t);\n-      len = sizeof (struct cl_target_option);\n-    }\n+    return cl_target_option_hash (TREE_TARGET_OPTION (t));\n \n   else\n     gcc_unreachable ();\n@@ -11528,9 +11525,8 @@ cl_option_hash_eq (const void *x, const void *y)\n \n   else if (TREE_CODE (xt) == TARGET_OPTION_NODE)\n     {\n-      xp = (const char *)TREE_TARGET_OPTION (xt);\n-      yp = (const char *)TREE_TARGET_OPTION (yt);\n-      len = sizeof (struct cl_target_option);\n+      return cl_target_option_eq (TREE_TARGET_OPTION (xt),\n+\t\t\t\t  TREE_TARGET_OPTION (yt));\n     }\n \n   else"}]}