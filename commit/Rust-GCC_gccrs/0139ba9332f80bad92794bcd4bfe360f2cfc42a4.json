{"sha": "0139ba9332f80bad92794bcd4bfe360f2cfc42a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEzOWJhOTMzMmY4MGJhZDkyNzk0YmNkNGJmZTM2MGYyY2ZjNDJhNA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2016-05-17T17:50:55Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2016-05-17T17:50:55Z"}, "message": "VRP: range info of new variables\n\n2016-05-17  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* tree-vrp.c (simplify_truth_ops_using_ranges): Set range\n\tinformation for new SSA_NAME.\n\t(simplify_conversion_using_ranges): Get range through get_range_info\n\tinstead of get_value_range.\n\ngcc/testsuite/\n\t* gcc.dg/tree-ssa/pr69270.c: Adjust.\n\t* gcc.dg/tree-ssa/vrp99.c: New testcase.\n\nFrom-SVN: r236336", "tree": {"sha": "47ef41c1bd3fb5f550727655628f92c5afbef5c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47ef41c1bd3fb5f550727655628f92c5afbef5c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0139ba9332f80bad92794bcd4bfe360f2cfc42a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0139ba9332f80bad92794bcd4bfe360f2cfc42a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0139ba9332f80bad92794bcd4bfe360f2cfc42a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0139ba9332f80bad92794bcd4bfe360f2cfc42a4/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f2c6623295765a721f515a0e4fcc718b61b16e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f2c6623295765a721f515a0e4fcc718b61b16e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f2c6623295765a721f515a0e4fcc718b61b16e0"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "93c1a2d22a1f8a8f4ae27a07b79e2006f154e989", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139ba9332f80bad92794bcd4bfe360f2cfc42a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139ba9332f80bad92794bcd4bfe360f2cfc42a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0139ba9332f80bad92794bcd4bfe360f2cfc42a4", "patch": "@@ -1,3 +1,10 @@\n+2016-05-17  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* tree-vrp.c (simplify_truth_ops_using_ranges): Set range\n+\tinformation for new SSA_NAME.\n+\t(simplify_conversion_using_ranges): Get range through get_range_info\n+\tinstead of get_value_range.\n+\n 2016-05-17  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/arm_neon.h (vmvn_s8): Reimplement using C operator."}, {"sha": "ca093a185271de9a9bcde64ccd6522f772f00620", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139ba9332f80bad92794bcd4bfe360f2cfc42a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139ba9332f80bad92794bcd4bfe360f2cfc42a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0139ba9332f80bad92794bcd4bfe360f2cfc42a4", "patch": "@@ -1,3 +1,8 @@\n+2016-05-17  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/tree-ssa/pr69270.c: Adjust.\n+\t* gcc.dg/tree-ssa/vrp99.c: New testcase.\n+\n 2016-05-17  Jiong Wang  <jiong.wang@arm.com>\n \n \t* gcc.target/aarch64/simd/vmul_elem_1.c: Use intrinsics."}, {"sha": "0d66cc4383f2d77ba9cf05ff52de8a1bea8d452a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr69270.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139ba9332f80bad92794bcd4bfe360f2cfc42a4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69270.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139ba9332f80bad92794bcd4bfe360f2cfc42a4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69270.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr69270.c?ref=0139ba9332f80bad92794bcd4bfe360f2cfc42a4", "patch": "@@ -7,8 +7,6 @@\n /* { dg-final { scan-tree-dump-times \"Replaced .bufferstep_\\[0-9\\]+. with constant .1.\" 1 \"dom3\"} } */\n \n /* And some assignments ought to fold down to constants.  */\n-/* { dg-final { scan-tree-dump-times \"Folded to: _\\[0-9\\]+ = -1;\" 1 \"dom3\"} } */\n-/* { dg-final { scan-tree-dump-times \"Folded to: _\\[0-9\\]+ = -2;\" 1 \"dom3\"} } */\n /* { dg-final { scan-tree-dump-times \"Folded to: _\\[0-9\\]+ = 1;\" 1 \"dom3\"} } */\n /* { dg-final { scan-tree-dump-times \"Folded to: _\\[0-9\\]+ = 0;\" 1 \"dom3\"} } */\n "}, {"sha": "baa7a706fd98a7314daeecbd2cce28d277322db6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp99.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139ba9332f80bad92794bcd4bfe360f2cfc42a4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp99.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139ba9332f80bad92794bcd4bfe360f2cfc42a4/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp99.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp99.c?ref=0139ba9332f80bad92794bcd4bfe360f2cfc42a4", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+\n+unsigned f(unsigned i){\n+  i >>= __SIZEOF_INT__ * __CHAR_BIT__ - 1;\n+  return i == 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"\\\\(unsigned int\\\\)\" \"vrp1\" } } */"}, {"sha": "69e6248a4fcd63ee1a44f934d0859647d7466a83", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0139ba9332f80bad92794bcd4bfe360f2cfc42a4/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0139ba9332f80bad92794bcd4bfe360f2cfc42a4/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=0139ba9332f80bad92794bcd4bfe360f2cfc42a4", "patch": "@@ -8940,6 +8940,11 @@ simplify_truth_ops_using_ranges (gimple_stmt_iterator *gsi, gimple *stmt)\n       gassign *newop\n \t= gimple_build_assign (tem, BIT_XOR_EXPR, op0, op1);\n       gsi_insert_before (gsi, newop, GSI_SAME_STMT);\n+      if (INTEGRAL_TYPE_P (TREE_TYPE (tem))\n+\t  && TYPE_PRECISION (TREE_TYPE (tem)) > 1)\n+\tset_range_info (tem, VR_RANGE,\n+\t\t\twi::zero (TYPE_PRECISION (TREE_TYPE (tem))),\n+\t\t\twi::one (TYPE_PRECISION (TREE_TYPE (tem))));\n       gimple_assign_set_rhs_with_ops (gsi, NOP_EXPR, tem);\n     }\n   /* Or without.  */\n@@ -9648,7 +9653,6 @@ simplify_conversion_using_ranges (gimple *stmt)\n {\n   tree innerop, middleop, finaltype;\n   gimple *def_stmt;\n-  value_range *innervr;\n   signop inner_sgn, middle_sgn, final_sgn;\n   unsigned inner_prec, middle_prec, final_prec;\n   widest_int innermin, innermed, innermax, middlemin, middlemed, middlemax;\n@@ -9666,18 +9670,17 @@ simplify_conversion_using_ranges (gimple *stmt)\n       || SSA_NAME_OCCURS_IN_ABNORMAL_PHI (innerop))\n     return false;\n \n-  /* Get the value-range of the inner operand.  */\n-  innervr = get_value_range (innerop);\n-  if (innervr->type != VR_RANGE\n-      || TREE_CODE (innervr->min) != INTEGER_CST\n-      || TREE_CODE (innervr->max) != INTEGER_CST)\n+  /* Get the value-range of the inner operand.  Use get_range_info in\n+     case innerop was created during substitute-and-fold.  */\n+  wide_int imin, imax;\n+  if (!INTEGRAL_TYPE_P (TREE_TYPE (innerop))\n+      || get_range_info (innerop, &imin, &imax) != VR_RANGE)\n     return false;\n+  innermin = widest_int::from (imin, TYPE_SIGN (TREE_TYPE (innerop)));\n+  innermax = widest_int::from (imax, TYPE_SIGN (TREE_TYPE (innerop)));\n \n   /* Simulate the conversion chain to check if the result is equal if\n      the middle conversion is removed.  */\n-  innermin = wi::to_widest (innervr->min);\n-  innermax = wi::to_widest (innervr->max);\n-\n   inner_prec = TYPE_PRECISION (TREE_TYPE (innerop));\n   middle_prec = TYPE_PRECISION (TREE_TYPE (middleop));\n   final_prec = TYPE_PRECISION (finaltype);"}]}