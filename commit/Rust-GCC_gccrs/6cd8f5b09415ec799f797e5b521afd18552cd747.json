{"sha": "6cd8f5b09415ec799f797e5b521afd18552cd747", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNkOGY1YjA5NDE1ZWM3OTlmNzk3ZTViNTIxYWZkMTg1NTJjZDc0Nw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2019-08-20T09:48:51Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-20T09:48:51Z"}, "message": "[Ada] Pragma Warning_As_Error works for style warnings\n\nPragma Warning_As_Error now works for style warnings (messages that\nstart with \"(style)\", enabled by -gnaty) the same way it works for\nregular warnings enabled by -gnatw.\n\nThe following test should fail to build with style checks:\n\ngnat.adc:\n\npragma Warning_As_Error (\"two spaces required\");\n\nstyle.adb:\n\nprocedure Style is\n   X : Integer;\nbegin\n   null;\n   --Hello\nend;\n\ngnatmake -q -f -g style.adb -gnaty\n\nshould get:\n\nstyle.adb:2:04: warning: variable \"X\" is never read and never assigned\nstyle.adb:5:06: error: (style) two spaces required [warning-as-error]\nstyle.adb:6:01: (style) \"end Style\" required\ngnatmake: \"style.adb\" compilation error\n\nand no executable should be created.\n\n2019-08-20  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* errout.adb (Error_Msg_Internal): Set Warn_Err in case of\n\tIs_Style_Msg.\n\t* erroutc.adb (Output_Msg_Text): Do Warnings_Treated_As_Errors\n\tprocessing and [warning-as-error] modification for style\n\tmessages.  Clean up code, simplify, remove unnecessary block\n\tstatement, add renaming of table entry.\n\t* erroutc.ads (Warning_Treated_As_Error): Fix comment: no such\n\tthing as Set_Warning_As_Error.\n\t* opt.ads: Clean up comments and move related declarations near\n\teach other.\n\t* par-prag.adb: Process Warning_As_Error. This is necessary\n\tbecause many style warning happen during parsing.\n\t* sem_prag.adb: Use new Acquire_Warning_Match_String.\n\t* sem_util.ads, sem_util.adb (Acquire_Warning_Match_String): New\n\tfunction shared by par-prag.adb and sem_prag.adb. Replaces the\n\tprocedure in sem_prag.adb. Avoid use of global variables.\n\t* stringt.ads, stringt.adb (To_String): New function to convert\n\tString_Id to String.\n\t* doc/gnat_rm/implementation_defined_pragmas.rst: Document the\n\tnew feature.\n\t* gnat_rm.texi: Regenerate.\n\nFrom-SVN: r274721", "tree": {"sha": "73b01db9d46ba069cf32333cb74682a3952538c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73b01db9d46ba069cf32333cb74682a3952538c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cd8f5b09415ec799f797e5b521afd18552cd747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd8f5b09415ec799f797e5b521afd18552cd747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cd8f5b09415ec799f797e5b521afd18552cd747", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cd8f5b09415ec799f797e5b521afd18552cd747/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98cbc7e489ced8092e110777c119751f245ad116", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98cbc7e489ced8092e110777c119751f245ad116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98cbc7e489ced8092e110777c119751f245ad116"}], "stats": {"total": 448, "additions": 253, "deletions": 195}, "files": [{"sha": "558d5e072d2c4493daefca3a8cc9c82cf313a0c3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6cd8f5b09415ec799f797e5b521afd18552cd747", "patch": "@@ -1,3 +1,27 @@\n+2019-08-20  Bob Duff  <duff@adacore.com>\n+\n+\t* errout.adb (Error_Msg_Internal): Set Warn_Err in case of\n+\tIs_Style_Msg.\n+\t* erroutc.adb (Output_Msg_Text): Do Warnings_Treated_As_Errors\n+\tprocessing and [warning-as-error] modification for style\n+\tmessages.  Clean up code, simplify, remove unnecessary block\n+\tstatement, add renaming of table entry.\n+\t* erroutc.ads (Warning_Treated_As_Error): Fix comment: no such\n+\tthing as Set_Warning_As_Error.\n+\t* opt.ads: Clean up comments and move related declarations near\n+\teach other.\n+\t* par-prag.adb: Process Warning_As_Error. This is necessary\n+\tbecause many style warning happen during parsing.\n+\t* sem_prag.adb: Use new Acquire_Warning_Match_String.\n+\t* sem_util.ads, sem_util.adb (Acquire_Warning_Match_String): New\n+\tfunction shared by par-prag.adb and sem_prag.adb. Replaces the\n+\tprocedure in sem_prag.adb. Avoid use of global variables.\n+\t* stringt.ads, stringt.adb (To_String): New function to convert\n+\tString_Id to String.\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst: Document the\n+\tnew feature.\n+\t* gnat_rm.texi: Regenerate.\n+\n 2019-08-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* lib.ads: Add with clause for GNAT.HTable."}, {"sha": "a6b7e1319c0f95dcc1717b1e2cd08978d30541e6", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=6cd8f5b09415ec799f797e5b521afd18552cd747", "patch": "@@ -7467,18 +7467,21 @@ Syntax:\n \n \n This configuration pragma allows the programmer to specify a set\n-of warnings that will be treated as errors. Any warning which\n+of warnings that will be treated as errors. Any warning that\n matches the pattern given by the pragma argument will be treated\n-as an error. This gives much more precise control that -gnatwe\n-which treats all warnings as errors.\n-\n-The pattern may contain asterisks, which match zero or more characters in\n-the message. For example, you can use\n-``pragma Warning_As_Error (\"bits of*unused\")`` to treat the warning\n-message ``warning: 960 bits of \"a\" unused`` as an error. No other regular\n-expression notations are permitted. All characters other than asterisk in\n-these three specific cases are treated as literal characters in the match.\n-The match is case insensitive, for example XYZ matches xyz.\n+as an error. This gives more precise control than -gnatwe,\n+which treats warnings as errors.\n+\n+This pragma can apply to regular warnings (messages enabled by -gnatw)\n+and to style warnings (messages that start with \"(style)\",\n+enabled by -gnaty).\n+\n+The pattern may contain asterisks, which match zero or more characters\n+in the message. For example, you can use ``pragma Warning_As_Error\n+(\"bits of*unused\")`` to treat the warning message ``warning: 960 bits of\n+\"a\" unused`` as an error. All characters other than asterisk are treated\n+as literal characters in the match. The match is case insensitive; for\n+example XYZ matches xyz.\n \n Note that the pattern matches if it occurs anywhere within the warning\n message string (it is not necessary to put an asterisk at the start and"}, {"sha": "42c7cb904773fef68c6c619270803e4f3638eb91", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=6cd8f5b09415ec799f797e5b521afd18552cd747", "patch": "@@ -1100,7 +1100,7 @@ package body Errout is\n       --  Test if warning to be treated as error\n \n       Warn_Err :=\n-        Is_Warning_Msg\n+        (Is_Warning_Msg or Is_Style_Msg)\n           and then (Warning_Treated_As_Error (Msg_Buffer (1 .. Msglen))\n                       or else\n                     Warning_Treated_As_Error (Get_Warning_Tag (Cur_Msg)));"}, {"sha": "3bab3522096d95b3211ea83059361df7f9fa8328", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 95, "deletions": 105, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=6cd8f5b09415ec799f797e5b521afd18552cd747", "patch": "@@ -624,155 +624,145 @@ package body Erroutc is\n       Length : Nat;\n       --  Maximum total length of lines\n \n-      Text  : constant String_Ptr := Errors.Table (E).Text;\n+      E_Msg : Error_Msg_Object renames Errors.Table (E);\n+      Text  : constant String_Ptr := E_Msg.Text;\n       Ptr   : Natural;\n       Split : Natural;\n       Start : Natural;\n+      Tag : constant String := Get_Warning_Tag (E);\n+      Txt : String_Ptr;\n+      Len : Natural;\n \n    begin\n-      declare\n-         Tag : constant String := Get_Warning_Tag (E);\n-         Txt : String_Ptr;\n-         Len : Natural;\n+      --  Postfix warning tag to message if needed\n \n-      begin\n-         --  Postfix warning tag to message if needed\n-\n-         if Tag /= \"\" and then Warning_Doc_Switch then\n-            if Include_Subprogram_In_Messages then\n-               Txt :=\n-                 new String'\n-                   (Subprogram_Name_Ptr (Errors.Table (E).Node) &\n-                    \": \" & Text.all & ' ' & Tag);\n-            else\n-               Txt := new String'(Text.all & ' ' & Tag);\n-            end if;\n-\n-         elsif Include_Subprogram_In_Messages\n-           and then (Errors.Table (E).Warn or else Errors.Table (E).Style)\n-         then\n+      if Tag /= \"\" and then Warning_Doc_Switch then\n+         if Include_Subprogram_In_Messages then\n             Txt :=\n               new String'\n-                (Subprogram_Name_Ptr (Errors.Table (E).Node) &\n-                 \": \" & Text.all);\n+                (Subprogram_Name_Ptr (E_Msg.Node) &\n+                 \": \" & Text.all & ' ' & Tag);\n          else\n-            Txt := Text;\n+            Txt := new String'(Text.all & ' ' & Tag);\n          end if;\n \n-         --  Deal with warning case\n-\n-         if Errors.Table (E).Warn or else Errors.Table (E).Info then\n+      elsif Include_Subprogram_In_Messages\n+        and then (E_Msg.Warn or else E_Msg.Style)\n+      then\n+         Txt :=\n+           new String'(Subprogram_Name_Ptr (E_Msg.Node) & \": \" & Text.all);\n+      else\n+         Txt := Text;\n+      end if;\n \n-            --  For info messages, prefix message with \"info: \"\n+      --  For info messages, prefix message with \"info: \"\n \n-            if Errors.Table (E).Info then\n-               Txt := new String'(\"info: \" & Txt.all);\n+      if E_Msg.Info then\n+         Txt := new String'(\"info: \" & Txt.all);\n \n-            --  Warning treated as error\n+      --  Warning treated as error\n \n-            elsif Errors.Table (E).Warn_Err then\n+      elsif E_Msg.Warn_Err then\n \n-               --  We prefix with \"error:\" rather than warning: and postfix\n-               --  [warning-as-error] at the end.\n+      --  We prefix with \"error:\" rather than warning: and postfix\n+      --  [warning-as-error] at the end.\n \n-               Warnings_Treated_As_Errors := Warnings_Treated_As_Errors + 1;\n-               Txt := new String'(\"error: \" & Txt.all & \" [warning-as-error]\");\n+         Warnings_Treated_As_Errors := Warnings_Treated_As_Errors + 1;\n+         Txt := new String'(\"error: \" & Txt.all & \" [warning-as-error]\");\n \n-            --  Normal case, prefix with \"warning: \"\n+      --  Normal warning, prefix with \"warning: \"\n \n-            else\n-               Txt := new String'(\"warning: \" & Txt.all);\n-            end if;\n+      elsif E_Msg.Warn then\n+         Txt := new String'(\"warning: \" & Txt.all);\n \n-            --  No prefix needed for style message, \"(style)\" is there already\n+      --  No prefix needed for style message, \"(style)\" is there already\n \n-         elsif Errors.Table (E).Style then\n-            null;\n+      elsif E_Msg.Style then\n+         null;\n \n-            --  No prefix needed for check message, severity is there already\n+      --  No prefix needed for check message, severity is there already\n \n-         elsif Errors.Table (E).Check then\n-            null;\n+      elsif E_Msg.Check then\n+         null;\n \n-            --  All other cases, add \"error: \" if unique error tag set\n+      --  All other cases, add \"error: \" if unique error tag set\n \n-         elsif Opt.Unique_Error_Tag then\n-            Txt := new String'(\"error: \" & Txt.all);\n-         end if;\n+      elsif Opt.Unique_Error_Tag then\n+         Txt := new String'(\"error: \" & Txt.all);\n+      end if;\n \n-         --  Set error message line length and length of message\n+      --  Set error message line length and length of message\n \n-         if Error_Msg_Line_Length = 0 then\n-            Length := Nat'Last;\n-         else\n-            Length := Error_Msg_Line_Length;\n-         end if;\n+      if Error_Msg_Line_Length = 0 then\n+         Length := Nat'Last;\n+      else\n+         Length := Error_Msg_Line_Length;\n+      end if;\n \n-         Max := Integer (Length - Column + 1);\n-         Len := Txt'Length;\n+      Max := Integer (Length - Column + 1);\n+      Len := Txt'Length;\n \n-         --  Here we have to split the message up into multiple lines\n+      --  Here we have to split the message up into multiple lines\n \n-         Ptr := 1;\n-         loop\n-            --  Make sure we do not have ludicrously small line\n+      Ptr := 1;\n+      loop\n+         --  Make sure we do not have ludicrously small line\n \n-            Max := Integer'Max (Max, 20);\n+         Max := Integer'Max (Max, 20);\n \n-            --  If remaining text fits, output it respecting LF and we are done\n+         --  If remaining text fits, output it respecting LF and we are done\n \n-            if Len - Ptr < Max then\n-               for J in Ptr .. Len loop\n-                  if Txt (J) = ASCII.LF then\n-                     Write_Eol;\n-                     Write_Spaces (Offs);\n-                  else\n-                     Write_Char (Txt (J));\n-                  end if;\n-               end loop;\n+         if Len - Ptr < Max then\n+            for J in Ptr .. Len loop\n+               if Txt (J) = ASCII.LF then\n+                  Write_Eol;\n+                  Write_Spaces (Offs);\n+               else\n+                  Write_Char (Txt (J));\n+               end if;\n+            end loop;\n \n-               return;\n+            return;\n \n-            --  Line does not fit\n+         --  Line does not fit\n \n-            else\n-               Start := Ptr;\n+         else\n+            Start := Ptr;\n \n-               --  First scan forward looking for a hard end of line\n+            --  First scan forward looking for a hard end of line\n \n-               for Scan in Ptr .. Ptr + Max - 1 loop\n-                  if Txt (Scan) = ASCII.LF then\n-                     Split := Scan - 1;\n-                     Ptr := Scan + 1;\n-                     goto Continue;\n-                  end if;\n-               end loop;\n+            for Scan in Ptr .. Ptr + Max - 1 loop\n+               if Txt (Scan) = ASCII.LF then\n+                  Split := Scan - 1;\n+                  Ptr := Scan + 1;\n+                  goto Continue;\n+               end if;\n+            end loop;\n \n-               --  Otherwise scan backwards looking for a space\n+            --  Otherwise scan backwards looking for a space\n \n-               for Scan in reverse Ptr .. Ptr + Max - 1 loop\n-                  if Txt (Scan) = ' ' then\n-                     Split := Scan - 1;\n-                     Ptr := Scan + 1;\n-                     goto Continue;\n-                  end if;\n-               end loop;\n+            for Scan in reverse Ptr .. Ptr + Max - 1 loop\n+               if Txt (Scan) = ' ' then\n+                  Split := Scan - 1;\n+                  Ptr := Scan + 1;\n+                  goto Continue;\n+               end if;\n+            end loop;\n \n-               --  If we fall through, no space, so split line arbitrarily\n+            --  If we fall through, no space, so split line arbitrarily\n \n-               Split := Ptr + Max - 1;\n-               Ptr := Split + 1;\n-            end if;\n+            Split := Ptr + Max - 1;\n+            Ptr := Split + 1;\n+         end if;\n \n-            <<Continue>>\n-            if Start <= Split then\n-               Write_Line (Txt (Start .. Split));\n-               Write_Spaces (Offs);\n-            end if;\n+         <<Continue>>\n+         if Start <= Split then\n+            Write_Line (Txt (Start .. Split));\n+            Write_Spaces (Offs);\n+         end if;\n \n-            Max := Integer (Length - Column + 1);\n-         end loop;\n-      end;\n+         Max := Integer (Length - Column + 1);\n+      end loop;\n    end Output_Msg_Text;\n \n    ---------------------"}, {"sha": "3b34753a41d69923c549f3804aeecc5edb4c12ff", "filename": "gcc/ada/erroutc.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Ferroutc.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Ferroutc.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.ads?ref=6cd8f5b09415ec799f797e5b521afd18552cd747", "patch": "@@ -612,7 +612,7 @@ package Erroutc is\n    function Warning_Treated_As_Error (Msg : String) return Boolean;\n    --  Returns True if the warning message Msg matches any of the strings\n    --  given by Warning_As_Error pragmas, as stored in the Warnings_As_Errors\n-   --  table by Set_Warning_As_Error.\n+   --  table.\n \n    type Error_Msg_Proc is\n      access procedure (Msg : String; Flag_Location : Source_Ptr);"}, {"sha": "72eb22ca77de1c72db200ee36b1bb3f7cdd86c67", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=6cd8f5b09415ec799f797e5b521afd18552cd747", "patch": "@@ -8971,18 +8971,21 @@ pragma Warning_As_Error (static_string_EXPRESSION);\n @end example\n \n This configuration pragma allows the programmer to specify a set\n-of warnings that will be treated as errors. Any warning which\n+of warnings that will be treated as errors. Any warning that\n matches the pattern given by the pragma argument will be treated\n-as an error. This gives much more precise control that -gnatwe\n-which treats all warnings as errors.\n-\n-The pattern may contain asterisks, which match zero or more characters in\n-the message. For example, you can use\n-@code{pragma Warning_As_Error (\"bits of*unused\")} to treat the warning\n-message @code{warning: 960 bits of \"a\" unused} as an error. No other regular\n-expression notations are permitted. All characters other than asterisk in\n-these three specific cases are treated as literal characters in the match.\n-The match is case insensitive, for example XYZ matches xyz.\n+as an error. This gives more precise control than -gnatwe,\n+which treats warnings as errors.\n+\n+This pragma can apply to regular warnings (messages enabled by -gnatw)\n+and to style warnings (messages that start with \"(style)\",\n+enabled by -gnaty).\n+\n+The pattern may contain asterisks, which match zero or more characters\n+in the message. For example, you can use @code{pragma Warning_As_Error\n+(\"bits of*unused\")} to treat the warning message @code{warning: 960 bits of\n+\"a\" unused} as an error. All characters other than asterisk are treated\n+as literal characters in the match. The match is case insensitive; for\n+example XYZ matches xyz.\n \n Note that the pattern matches if it occurs anywhere within the warning\n message string (it is not necessary to put an asterisk at the start and"}, {"sha": "d3cba61762fd78f441e80d04ca50e480b0ba8a74", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=6cd8f5b09415ec799f797e5b521afd18552cd747", "patch": "@@ -1944,10 +1944,6 @@ package Opt is\n    --  which requires pragma Warnings to be stored for the formal verification\n    --  backend.\n \n-   Warnings_As_Errors_Count : Natural;\n-   --  GNAT\n-   --  Number of entries stored in Warnings_As_Errors table\n-\n    Wide_Character_Encoding_Method : WC_Encoding_Method := WCEM_Brackets;\n    --  GNAT, GNATBIND\n    --  Method used for encoding wide characters in the source program. See\n@@ -2158,10 +2154,6 @@ package Opt is\n    --  is ignored for internal and predefined units (which are always compiled\n    --  with the standard Size semantics).\n \n-   Warnings_As_Errors_Count_Config : Natural;\n-   --  GNAT\n-   --  Count of pattern strings stored from Warning_As_Error pragmas\n-\n    type Config_Switches_Type is private;\n    --  Type used to save values of the switches set from Config values\n \n@@ -2268,16 +2260,24 @@ package Opt is\n    ---------------------------\n \n    --  The following array would more reasonably be located in Err_Vars or\n-   --  Errour, but we put them here to deal with licensing issues (we need\n+   --  Errout, but we put them here to deal with licensing issues (we need\n    --  this to have the GPL exception licensing, since these variables and\n    --  subprograms are accessed from units with this licensing).\n \n    Warnings_As_Errors : array (1 .. 10_000) of String_Ptr;\n-   --  Table for recording Warning_As_Error pragmas as they are processed.\n-   --  It would be nicer to use Table, but there are circular elaboration\n-   --  problems if we try to do this, and an attempt to find some other\n-   --  appropriately licensed unit to declare this as a Table failed with\n-   --  various elaboration circularities. Memory is getting cheap these days!\n+   --  Table for recording Warning_As_Error pragmas as they are processed. It\n+   --  would be nicer to use Table, but there are circular elaboration problems\n+   --  if we try to do this, and an attempt to find some other appropriately\n+   --  licensed unit to declare this as a Table failed with various elaboration\n+   --  circularities.\n+\n+   Warnings_As_Errors_Count : Natural;\n+   --  GNAT\n+   --  Number of entries stored in Warnings_As_Errors table\n+\n+   Warnings_As_Errors_Count_Config : Natural;\n+   --  GNAT\n+   --  Count of pattern strings stored from Warning_As_Error pragmas\n \n    ---------------\n    -- GNAT_Mode --"}, {"sha": "87f97ea9439f401027ec918965b9830a319c21e2", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=6cd8f5b09415ec799f797e5b521afd18552cd747", "patch": "@@ -1088,6 +1088,21 @@ begin\n       when Pragma_Suppress_All =>\n          Set_Has_Pragma_Suppress_All (Cunit (Current_Source_Unit));\n \n+      ----------------------\n+      -- Warning_As_Error --\n+      ----------------------\n+\n+      --  pragma Warning_As_Error (static_string_EXPRESSION);\n+\n+      --  Further processing is done in Sem_Prag\n+\n+      when Pragma_Warning_As_Error =>\n+         Check_Arg_Count (1);\n+         Check_Arg_Is_String_Literal (Arg1);\n+         Warnings_As_Errors_Count := Warnings_As_Errors_Count + 1;\n+         Warnings_As_Errors (Warnings_As_Errors_Count) :=\n+           new String'(Acquire_Warning_Match_String (Get_Pragma_Arg (Arg1)));\n+\n       ---------------------\n       -- Warnings (GNAT) --\n       ---------------------\n@@ -1519,7 +1534,6 @@ begin\n          | Pragma_Volatile_Components\n          | Pragma_Volatile_Full_Access\n          | Pragma_Volatile_Function\n-         | Pragma_Warning_As_Error\n          | Pragma_Weak_External\n          | Pragma_Validity_Checks\n       =>"}, {"sha": "0e68bb132747bda2729f7aae96405bc71e759d70", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 22, "deletions": 51, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=6cd8f5b09415ec799f797e5b521afd18552cd747", "patch": "@@ -3768,12 +3768,6 @@ package body Sem_Prag is\n       function Acc_Next (N : Node_Id) return Node_Id;\n       --  Helper function to iterate over arguments given to OpenAcc pragmas\n \n-      procedure Acquire_Warning_Match_String (Arg : Node_Id);\n-      --  Used by pragma Warnings (Off, string), and Warn_As_Error (string) to\n-      --  get the given string argument, and place it in Name_Buffer, adding\n-      --  leading and trailing asterisks if they are not already present. The\n-      --  caller has already checked that Arg is a static string expression.\n-\n       procedure Ada_2005_Pragma;\n       --  Called for pragmas defined in Ada 2005, that are not in Ada 95. In\n       --  Ada 95 mode, these are implementation defined pragmas, so should be\n@@ -4400,32 +4394,6 @@ package body Sem_Prag is\n          end if;\n       end Acc_Next;\n \n-      ----------------------------------\n-      -- Acquire_Warning_Match_String --\n-      ----------------------------------\n-\n-      procedure Acquire_Warning_Match_String (Arg : Node_Id) is\n-      begin\n-         String_To_Name_Buffer\n-           (Strval (Expr_Value_S (Get_Pragma_Arg (Arg))));\n-\n-         --  Add asterisk at start if not already there\n-\n-         if Name_Len > 0 and then Name_Buffer (1) /= '*' then\n-            Name_Buffer (2 .. Name_Len + 1) :=\n-              Name_Buffer (1 .. Name_Len);\n-            Name_Buffer (1) := '*';\n-            Name_Len := Name_Len + 1;\n-         end if;\n-\n-         --  Add asterisk at end if not already there\n-\n-         if Name_Buffer (Name_Len) /= '*' then\n-            Name_Len := Name_Len + 1;\n-            Name_Buffer (Name_Len) := '*';\n-         end if;\n-      end Acquire_Warning_Match_String;\n-\n       ---------------------\n       -- Ada_2005_Pragma --\n       ---------------------\n@@ -25301,10 +25269,10 @@ package body Sem_Prag is\n             --  OK static string expression\n \n             else\n-               Acquire_Warning_Match_String (Arg1);\n                Warnings_As_Errors_Count := Warnings_As_Errors_Count + 1;\n                Warnings_As_Errors (Warnings_As_Errors_Count) :=\n-                 new String'(Name_Buffer (1 .. Name_Len));\n+                 new String'(Acquire_Warning_Match_String\n+                               (Expr_Value_S (Get_Pragma_Arg (Arg1))));\n             end if;\n \n          --------------\n@@ -25609,8 +25577,6 @@ package body Sem_Prag is\n                      --  Static string expression case\n \n                      else\n-                        Acquire_Warning_Match_String (Arg2);\n-\n                         --  Note on configuration pragma case: If this is a\n                         --  configuration pragma, then for an OFF pragma, we\n                         --  just set Config True in the call, which is all\n@@ -25630,22 +25596,27 @@ package body Sem_Prag is\n                         --  generic unit we are inside is public, but for now\n                         --  we don't bother with that refinement.\n \n-                        if Chars (Argx) = Name_Off then\n-                           Set_Specific_Warning_Off\n-                             (Loc, Name_Buffer (1 .. Name_Len), Reason,\n-                              Config => Is_Configuration_Pragma,\n-                              Used   => Inside_A_Generic or else In_Instance);\n-\n-                        elsif Chars (Argx) = Name_On then\n-                           Set_Specific_Warning_On\n-                             (Loc, Name_Buffer (1 .. Name_Len), Err);\n-\n-                           if Err then\n-                              Error_Msg\n-                                (\"??pragma Warnings On with no matching \"\n-                                 & \"Warnings Off\", Loc);\n+                        declare\n+                           Message : constant String :=\n+                             Acquire_Warning_Match_String\n+                               (Expr_Value_S (Get_Pragma_Arg (Arg2)));\n+                        begin\n+                           if Chars (Argx) = Name_Off then\n+                              Set_Specific_Warning_Off\n+                                (Loc, Message, Reason,\n+                                 Config => Is_Configuration_Pragma,\n+                                 Used => Inside_A_Generic or else In_Instance);\n+\n+                           elsif Chars (Argx) = Name_On then\n+                              Set_Specific_Warning_On (Loc, Message, Err);\n+\n+                              if Err then\n+                                 Error_Msg\n+                                   (\"??pragma Warnings On with no matching \"\n+                                    & \"Warnings Off\", Loc);\n+                              end if;\n                            end if;\n-                        end if;\n+                        end;\n                      end if;\n                   end;\n                end if;"}, {"sha": "dcc8d64485c71ea056e4ff4ca305f9585057671f", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=6cd8f5b09415ec799f797e5b521afd18552cd747", "patch": "@@ -247,6 +247,39 @@ package body Sem_Util is\n       return Interface_List (Nod);\n    end Abstract_Interface_List;\n \n+   ----------------------------------\n+   -- Acquire_Warning_Match_String --\n+   ----------------------------------\n+\n+   function Acquire_Warning_Match_String (Str_Lit : Node_Id) return String is\n+      S : constant String := To_String (Strval (Str_Lit));\n+   begin\n+      if S = \"\" then\n+         return \"\";\n+      else\n+         --  Put \"*\" before or after or both, if it's not already there\n+\n+         declare\n+            F : constant Boolean := S (S'First) = '*';\n+            L : constant Boolean := S (S'Last) = '*';\n+         begin\n+            if F then\n+               if L then\n+                  return S;\n+               else\n+                  return S & \"*\";\n+               end if;\n+            else\n+               if L then\n+                  return \"*\" & S;\n+               else\n+                  return \"*\" & S & \"*\";\n+               end if;\n+            end if;\n+         end;\n+      end if;\n+   end Acquire_Warning_Match_String;\n+\n    --------------------------------\n    -- Add_Access_Type_To_Process --\n    --------------------------------"}, {"sha": "c9065e54eea83f1e763048a66c59bf1815ce19de", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=6cd8f5b09415ec799f797e5b521afd18552cd747", "patch": "@@ -42,6 +42,12 @@ package Sem_Util is\n    --  including the cases where there can't be any because e.g. the type is\n    --  not tagged.\n \n+   function Acquire_Warning_Match_String (Str_Lit : Node_Id) return String;\n+   --  Used by pragma Warnings (Off, string), and Warn_As_Error (string) to get\n+   --  the given string argument, adding leading and trailing asterisks if they\n+   --  are not already present.  Str_Lit is the static value of the pragma\n+   --  argument.\n+\n    procedure Add_Access_Type_To_Process (E : Entity_Id; A : Entity_Id);\n    --  Add A to the list of access types to process when expanding the\n    --  freeze node of E."}, {"sha": "545705ad511ce08b9162ae1dc413d1658b4e21ec", "filename": "gcc/ada/stringt.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Fstringt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Fstringt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstringt.adb?ref=6cd8f5b09415ec799f797e5b521afd18552cd747", "patch": "@@ -349,6 +349,17 @@ package body Stringt is\n       return Strings.Table (First_String_Id)'Address;\n    end Strings_Address;\n \n+   ---------------\n+   -- To_String --\n+   ---------------\n+\n+   function To_String (S : String_Id) return String is\n+      Buf : Bounded_String;\n+   begin\n+      Append (Buf, S);\n+      return To_String (Buf);\n+   end To_String;\n+\n    ---------------\n    -- Tree_Read --\n    ---------------"}, {"sha": "722d17f7bc2d4a5d1455a2c5f47848a268432f70", "filename": "gcc/ada/stringt.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Fstringt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cd8f5b09415ec799f797e5b521afd18552cd747/gcc%2Fada%2Fstringt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstringt.ads?ref=6cd8f5b09415ec799f797e5b521afd18552cd747", "patch": "@@ -127,6 +127,9 @@ package Stringt is\n    --  out of Character range. Does not attempt to do any encoding of\n    --  characters.\n \n+   function To_String (S : String_Id) return String;\n+   --  Return S as a String\n+\n    procedure String_To_Name_Buffer (S : String_Id);\n    --  Place characters of given string in Name_Buffer, setting Name_Len.\n    --  Error if any characters are out of Character range. Does not attempt"}]}