{"sha": "00c7c57f0df9b416f7f2eec88717c526d80196e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBjN2M1N2YwZGY5YjQxNmY3ZjJlZWM4ODcxN2M1MjZkODAxOTZlMw==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2017-06-30T03:58:48Z"}, "committer": {"name": "Naveen H.S", "email": "naveenh@gcc.gnu.org", "date": "2017-06-30T03:58:48Z"}, "message": "aarch64-fusion-pairs.def: Add ALU_BRANCH entry.\n\n2017-06-29  Julian Brown  <julian@codesourcery.com>\n\t    Naveen H.S  <Naveen.Hurugalawadi@cavium.com>\n\n\t* config/aarch64/aarch64-fusion-pairs.def: Add ALU_BRANCH entry.\n\t* config/aarch64/aarch64.c (AARCH64_FUSE_ALU_BRANCH): New fusion type.\n\t(thunderx2t99_tunings): Set AARCH64_FUSE_ALU_BRANCH flag.\n\t(aarch_macro_fusion_pair_p): Add support for AARCH64_FUSE_ALU_BRANCH.\n\n\nCo-Authored-By: Naveen H.S <Naveen.Hurugalawadi@cavium.com>\n\nFrom-SVN: r249828", "tree": {"sha": "c9cdce4aa0e0557e86815a71cb20c7b96035e4df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9cdce4aa0e0557e86815a71cb20c7b96035e4df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00c7c57f0df9b416f7f2eec88717c526d80196e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00c7c57f0df9b416f7f2eec88717c526d80196e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00c7c57f0df9b416f7f2eec88717c526d80196e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00c7c57f0df9b416f7f2eec88717c526d80196e3/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "509f819a8e8ab900f303ea6ccdb8e90e97de7f3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/509f819a8e8ab900f303ea6ccdb8e90e97de7f3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/509f819a8e8ab900f303ea6ccdb8e90e97de7f3c"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "f66b41ef48451ece8d57171e36926413bc6dd108", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c7c57f0df9b416f7f2eec88717c526d80196e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c7c57f0df9b416f7f2eec88717c526d80196e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=00c7c57f0df9b416f7f2eec88717c526d80196e3", "patch": "@@ -1,3 +1,11 @@\n+2017-06-29  Julian Brown  <julian@codesourcery.com>\n+\t    Naveen H.S  <Naveen.Hurugalawadi@cavium.com>\n+\n+\t* config/aarch64/aarch64-fusion-pairs.def: Add ALU_BRANCH entry.\n+\t* config/aarch64/aarch64.c (AARCH64_FUSE_ALU_BRANCH): New fusion type.\n+\t(thunderx2t99_tunings): Set AARCH64_FUSE_ALU_BRANCH flag.\n+\t(aarch_macro_fusion_pair_p): Add support for AARCH64_FUSE_ALU_BRANCH.\n+\n 2017-06-29  Naveen H.S  <Naveen.Hurugalawadi@cavium.com>\n \n \t* config/aarch64/aarch64.c (aarch_macro_fusion_pair_p): Push the"}, {"sha": "300cd00e4bf32fd54ed3dee9110d431b379a7e81", "filename": "gcc/config/aarch64/aarch64-fusion-pairs.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c7c57f0df9b416f7f2eec88717c526d80196e3/gcc%2Fconfig%2Faarch64%2Faarch64-fusion-pairs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c7c57f0df9b416f7f2eec88717c526d80196e3/gcc%2Fconfig%2Faarch64%2Faarch64-fusion-pairs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-fusion-pairs.def?ref=00c7c57f0df9b416f7f2eec88717c526d80196e3", "patch": "@@ -34,5 +34,6 @@ AARCH64_FUSION_PAIR (\"movk+movk\", MOVK_MOVK)\n AARCH64_FUSION_PAIR (\"adrp+ldr\", ADRP_LDR)\n AARCH64_FUSION_PAIR (\"cmp+branch\", CMP_BRANCH)\n AARCH64_FUSION_PAIR (\"aes+aesmc\", AES_AESMC)\n+AARCH64_FUSION_PAIR (\"alu+branch\", ALU_BRANCH)\n \n #undef AARCH64_FUSION_PAIR"}, {"sha": "037339d431d80c49699446e548d6b2707883b6a8", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00c7c57f0df9b416f7f2eec88717c526d80196e3/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00c7c57f0df9b416f7f2eec88717c526d80196e3/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=00c7c57f0df9b416f7f2eec88717c526d80196e3", "patch": "@@ -875,7 +875,8 @@ static const struct tune_params thunderx2t99_tunings =\n   &generic_approx_modes,\n   4, /* memmov_cost.  */\n   4, /* issue_rate.  */\n-  (AARCH64_FUSE_CMP_BRANCH | AARCH64_FUSE_AES_AESMC), /* fusible_ops  */\n+  (AARCH64_FUSE_CMP_BRANCH | AARCH64_FUSE_AES_AESMC\n+   | AARCH64_FUSE_ALU_BRANCH), /* fusible_ops  */\n   16,\t/* function_align.  */\n   8,\t/* jump_align.  */\n   16,\t/* loop_align.  */\n@@ -14323,6 +14324,49 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n \t}\n     }\n \n+  if (aarch64_fusion_enabled_p (AARCH64_FUSE_ALU_BRANCH)\n+      && any_condjump_p (curr))\n+    {\n+      /* We're trying to match:\n+\t  prev (alu_insn) == (set (r0) plus ((r0) (r1/imm)))\n+\t  curr (cbz) ==  (set (pc) (if_then_else (eq/ne) (r0)\n+\t\t\t\t\t\t\t (const_int 0))\n+\t\t\t\t\t\t (label_ref (\"SYM\"))\n+\t\t\t\t\t\t (pc))  */\n+      if (SET_DEST (curr_set) == (pc_rtx)\n+\t  && GET_CODE (SET_SRC (curr_set)) == IF_THEN_ELSE\n+\t  && REG_P (XEXP (XEXP (SET_SRC (curr_set), 0), 0))\n+\t  && REG_P (SET_DEST (prev_set))\n+\t  && REGNO (SET_DEST (prev_set))\n+\t     == REGNO (XEXP (XEXP (SET_SRC (curr_set), 0), 0)))\n+\t{\n+\t  /* Fuse ALU operations followed by conditional branch instruction.  */\n+\t  switch (get_attr_type (prev))\n+\t    {\n+\t    case TYPE_ALU_IMM:\n+\t    case TYPE_ALU_SREG:\n+\t    case TYPE_ADC_REG:\n+\t    case TYPE_ADC_IMM:\n+\t    case TYPE_ADCS_REG:\n+\t    case TYPE_ADCS_IMM:\n+\t    case TYPE_LOGIC_REG:\n+\t    case TYPE_LOGIC_IMM:\n+\t    case TYPE_CSEL:\n+\t    case TYPE_ADR:\n+\t    case TYPE_MOV_IMM:\n+\t    case TYPE_SHIFT_REG:\n+\t    case TYPE_SHIFT_IMM:\n+\t    case TYPE_BFM:\n+\t    case TYPE_RBIT:\n+\t    case TYPE_REV:\n+\t    case TYPE_EXTEND:\n+\t      return true;\n+\n+\t    default:;\n+\t    }\n+\t}\n+    }\n+\n   return false;\n }\n "}]}