{"sha": "f54437d5f7912771af11f75bdb370dc440ab2b26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjU0NDM3ZDVmNzkxMjc3MWFmMTFmNzViZGIzNzBkYzQ0MGFiMmIyNg==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2014-10-15T15:48:33Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2014-10-15T15:48:33Z"}, "message": "re PR rtl-optimization/63448 (ICE when compiling atlas 3.10.2)\n\n2014-10-15  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/63448\n\t* lra-int.h (LRA_MAX_CONSTRAINT_ITERATION_NUMBER): Remove.\n\t(LRA_MAX_ASSIGNMENT_ITERATION_NUMBER): New.\n\t(LRA_MAX_INHERITANCE_PASSES): Use it.\n\t(lra_constraint_iter_after_spill): Remove.\n\t(lra_assignment_iter): New.\n\t(lra_assignment_iter_after_spill): New.\n\t* lra-assigns.c (lra_assignment_iter): New.\n\t(lra_assignment_iter_after_spill): New.\n\t(former_reload_pseudo_spill_p): New.\n\t(spill_for): Set up former_reload_pseudo_spill_p.\n\t(setup_live_pseudos_and_spill_after_risky): Ditto.\n\t(assign_by_spills): Ditto.\n\t(lra_assign): Increment lra_assignment_iter.  Print the iteration\n\tnumber.  Reset former_reload_pseudo_spill_p.  Check\n\tlra_assignment_iter_after_spill.\n\t* lra.c (lra): Remove lra_constraint_iter_after_spill.  Initialize\n\tlra_assignment_iter and lra_assignment_iter_after_spill.\n\t* lra-constraints.c (lra_constraint_iter_after_spill): Remove.\n\t(lra_constraints): Remove code with\n\tlra_assignment_iter_after_spill.\n\n2014-10-15  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/63448\n\t* gcc.target/i386/pr63448.c: New test.\n\nFrom-SVN: r216270", "tree": {"sha": "6f3ad3b8727dfb842a5843b742084318f3fc84c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f3ad3b8727dfb842a5843b742084318f3fc84c6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f54437d5f7912771af11f75bdb370dc440ab2b26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f54437d5f7912771af11f75bdb370dc440ab2b26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f54437d5f7912771af11f75bdb370dc440ab2b26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f54437d5f7912771af11f75bdb370dc440ab2b26/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e631038f4b5ca08723d34c5523e47dc8c80ce602", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e631038f4b5ca08723d34c5523e47dc8c80ce602", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e631038f4b5ca08723d34c5523e47dc8c80ce602"}], "stats": {"total": 205, "additions": 187, "deletions": 18}, "files": [{"sha": "8eb654c0a4bda5cbd7eb3636d2262f6302890c04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54437d5f7912771af11f75bdb370dc440ab2b26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54437d5f7912771af11f75bdb370dc440ab2b26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f54437d5f7912771af11f75bdb370dc440ab2b26", "patch": "@@ -1,3 +1,27 @@\n+2014-10-15  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/63448\n+\t* lra-int.h (LRA_MAX_CONSTRAINT_ITERATION_NUMBER): Remove.\n+\t(LRA_MAX_ASSIGNMENT_ITERATION_NUMBER): New.\n+\t(LRA_MAX_INHERITANCE_PASSES): Use it.\n+\t(lra_constraint_iter_after_spill): Remove.\n+\t(lra_assignment_iter): New.\n+\t(lra_assignment_iter_after_spill): New.\n+\t* lra-assigns.c (lra_assignment_iter): New.\n+\t(lra_assignment_iter_after_spill): New.\n+\t(former_reload_pseudo_spill_p): New.\n+\t(spill_for): Set up former_reload_pseudo_spill_p.\n+\t(setup_live_pseudos_and_spill_after_risky): Ditto.\n+\t(assign_by_spills): Ditto.\n+\t(lra_assign): Increment lra_assignment_iter.  Print the iteration\n+\tnumber.  Reset former_reload_pseudo_spill_p.  Check\n+\tlra_assignment_iter_after_spill.\n+\t* lra.c (lra): Remove lra_constraint_iter_after_spill.  Initialize\n+\tlra_assignment_iter and lra_assignment_iter_after_spill.\n+\t* lra-constraints.c (lra_constraint_iter_after_spill): Remove.\n+\t(lra_constraints): Remove code with\n+\tlra_assignment_iter_after_spill.\n+\n 2014-10-15  Teresa Johnson  <tejohnson@google.com>\n \n \tPR bootstrap/63432"}, {"sha": "8dbcec4eaec07793a883c2249b911448d920ce64", "filename": "gcc/lra-assigns.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54437d5f7912771af11f75bdb370dc440ab2b26/gcc%2Flra-assigns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54437d5f7912771af11f75bdb370dc440ab2b26/gcc%2Flra-assigns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-assigns.c?ref=f54437d5f7912771af11f75bdb370dc440ab2b26", "patch": "@@ -97,6 +97,15 @@ along with GCC; see the file COPYING3.\tIf not see\n #include \"params.h\"\n #include \"lra-int.h\"\n \n+/* Current iteration number of the pass and current iteration number\n+   of the pass after the latest spill pass when any former reload\n+   pseudo was spilled.  */\n+int lra_assignment_iter;\n+int lra_assignment_iter_after_spill;\n+\n+/* Flag of spilling former reload pseudos on this pass.  */\n+static bool former_reload_pseudo_spill_p;\n+\n /* Array containing corresponding values of function\n    lra_get_allocno_class.  It is used to speed up the code.  */\n static enum reg_class *regno_allocno_class_array;\n@@ -994,6 +1003,8 @@ spill_for (int regno, bitmap spilled_pseudo_bitmap, bool first_p)\n   /* Spill: */\n   EXECUTE_IF_SET_IN_BITMAP (&best_spill_pseudos_bitmap, 0, spill_regno, bi)\n     {\n+      if ((int) spill_regno >= lra_constraint_new_regno_start)\n+\tformer_reload_pseudo_spill_p = true;\n       if (lra_dump_file != NULL)\n \tfprintf (lra_dump_file, \"      Spill %sr%d(hr=%d, freq=%d) for r%d\\n\",\n \t\t pseudo_prefix_title (spill_regno),\n@@ -1109,6 +1120,8 @@ setup_live_pseudos_and_spill_after_risky_transforms (bitmap\n \t   j++)\n \tlra_hard_reg_usage[hard_regno + j] -= lra_reg_info[regno].freq;\n       reg_renumber[regno] = -1;\n+      if (regno >= lra_constraint_new_regno_start)\n+\tformer_reload_pseudo_spill_p = true;\n       if (lra_dump_file != NULL)\n \tfprintf (lra_dump_file, \"    Spill r%d after risky transformations\\n\",\n \t\t regno);\n@@ -1373,7 +1386,10 @@ assign_by_spills (void)\n       EXECUTE_IF_SET_IN_SPARSESET (live_range_hard_reg_pseudos, conflict_regno)\n \t{\n \t  if ((int) conflict_regno >= lra_constraint_new_regno_start)\n-\t    sorted_pseudos[nfails++] = conflict_regno;\n+\t    {\n+\t      sorted_pseudos[nfails++] = conflict_regno;\n+\t      former_reload_pseudo_spill_p = true;\n+\t    }\n \t  if (lra_dump_file != NULL)\n \t    fprintf (lra_dump_file, \"\t  Spill %s r%d(hr=%d, freq=%d)\\n\",\n \t\t     pseudo_prefix_title (conflict_regno), conflict_regno,\n@@ -1487,12 +1503,17 @@ lra_assign (void)\n   int max_regno = max_reg_num ();\n \n   timevar_push (TV_LRA_ASSIGN);\n+  lra_assignment_iter++;\n+  if (lra_dump_file != NULL)\n+    fprintf (lra_dump_file, \"\\n********** Assignment #%d: **********\\n\\n\",\n+\t     lra_assignment_iter);\n   init_lives ();\n   sorted_pseudos = XNEWVEC (int, max_regno);\n   sorted_reload_pseudos = XNEWVEC (int, max_regno);\n   regno_allocno_class_array = XNEWVEC (enum reg_class, max_regno);\n   for (i = FIRST_PSEUDO_REGISTER; i < max_regno; i++)\n     regno_allocno_class_array[i] = lra_get_allocno_class (i);\n+  former_reload_pseudo_spill_p = false;\n   init_regno_assign_info ();\n   bitmap_initialize (&all_spilled_pseudos, &reg_obstack);\n   create_live_range_start_chains ();\n@@ -1540,5 +1561,11 @@ lra_assign (void)\n   free (sorted_reload_pseudos);\n   finish_lives ();\n   timevar_pop (TV_LRA_ASSIGN);\n+  if (former_reload_pseudo_spill_p)\n+    lra_assignment_iter_after_spill++;\n+  if (lra_assignment_iter_after_spill > LRA_MAX_ASSIGNMENT_ITERATION_NUMBER)\n+    internal_error\n+      (\"Maximum number of LRA assignment passes is achieved (%d)\\n\",\n+       LRA_MAX_ASSIGNMENT_ITERATION_NUMBER);\n   return no_spills_p;\n }"}, {"sha": "2b17aa39fbcd38bba4807c65a8d7ed9798c58f40", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54437d5f7912771af11f75bdb370dc440ab2b26/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54437d5f7912771af11f75bdb370dc440ab2b26/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=f54437d5f7912771af11f75bdb370dc440ab2b26", "patch": "@@ -3895,10 +3895,6 @@ loc_equivalence_callback (rtx loc, const_rtx, void *data)\n /* The current iteration number of this LRA pass.  */\n int lra_constraint_iter;\n \n-/* The current iteration number of this LRA pass after the last spill\n-   pass.  */\n-int lra_constraint_iter_after_spill;\n-\n /* True if we substituted equiv which needs checking register\n    allocation correctness because the equivalent value contains\n    allocatable hard registers or when we restore multi-register\n@@ -4043,11 +4039,6 @@ lra_constraints (bool first_p)\n   if (lra_dump_file != NULL)\n     fprintf (lra_dump_file, \"\\n********** Local #%d: **********\\n\\n\",\n \t     lra_constraint_iter);\n-  lra_constraint_iter_after_spill++;\n-  if (lra_constraint_iter_after_spill > LRA_MAX_CONSTRAINT_ITERATION_NUMBER)\n-    internal_error\n-      (\"Maximum number of LRA constraint passes is achieved (%d)\\n\",\n-       LRA_MAX_CONSTRAINT_ITERATION_NUMBER);\n   changed_p = false;\n   if (pic_offset_table_rtx\n       && REGNO (pic_offset_table_rtx) >= FIRST_PSEUDO_REGISTER)"}, {"sha": "1337acad0d024227585f7f1d98edad3710dc9029", "filename": "gcc/lra-int.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54437d5f7912771af11f75bdb370dc440ab2b26/gcc%2Flra-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54437d5f7912771af11f75bdb370dc440ab2b26/gcc%2Flra-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-int.h?ref=f54437d5f7912771af11f75bdb370dc440ab2b26", "patch": "@@ -251,9 +251,10 @@ typedef struct lra_insn_recog_data *lra_insn_recog_data_t;\n #define LRA_LOSER_COST_FACTOR 6\n #define LRA_MAX_REJECT 600\n \n-/* Maximum allowed number of constraint pass iterations after the last\n-   spill pass.\tIt is for preventing LRA cycling in a bug case.\t */\n-#define LRA_MAX_CONSTRAINT_ITERATION_NUMBER 30\n+/* Maximum allowed number of assignment pass iterations after the\n+   latest spill pass when any former reload pseudo was spilled.  It is\n+   for preventing LRA cycling in a bug case.  */\n+#define LRA_MAX_ASSIGNMENT_ITERATION_NUMBER 30\n \n /* The maximal number of inheritance/split passes in LRA.  It should\n    be more 1 in order to perform caller saves transformations and much\n@@ -266,7 +267,7 @@ typedef struct lra_insn_recog_data *lra_insn_recog_data_t;\n #define LRA_MAX_INHERITANCE_PASSES 2\n \n #if LRA_MAX_INHERITANCE_PASSES <= 0 \\\n-    || LRA_MAX_INHERITANCE_PASSES >= LRA_MAX_CONSTRAINT_ITERATION_NUMBER - 8\n+    || LRA_MAX_INHERITANCE_PASSES >= LRA_MAX_ASSIGNMENT_ITERATION_NUMBER - 8\n #error wrong LRA_MAX_INHERITANCE_PASSES value\n #endif\n \n@@ -331,7 +332,6 @@ extern void lra_init_equiv (void);\n extern int lra_constraint_offset (int, enum machine_mode);\n \n extern int lra_constraint_iter;\n-extern int lra_constraint_iter_after_spill;\n extern bool lra_risky_transformations_p;\n extern int lra_inheritance_iter;\n extern int lra_undo_inheritance_iter;\n@@ -368,6 +368,8 @@ extern void lra_setup_reload_pseudo_preferenced_hard_reg (int, int, int);\n \n /* lra-assigns.c: */\n \n+extern int lra_assignment_iter;\n+extern int lra_assignment_iter_after_spill;\n extern void lra_setup_reg_renumber (int, int, bool);\n extern bool lra_assign (void);\n "}, {"sha": "f664f070cbb9b41b24b190dac5b28c6db388e26d", "filename": "gcc/lra.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54437d5f7912771af11f75bdb370dc440ab2b26/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54437d5f7912771af11f75bdb370dc440ab2b26/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=f54437d5f7912771af11f75bdb370dc440ab2b26", "patch": "@@ -2140,8 +2140,8 @@ lra (FILE *f)\n      values, clear them.  */\n   recog_init ();\n \n-  lra_live_range_iter = lra_coalesce_iter = 0;\n-  lra_constraint_iter = lra_constraint_iter_after_spill = 0;\n+  lra_live_range_iter = lra_coalesce_iter = lra_constraint_iter = 0;\n+  lra_assignment_iter = lra_assignment_iter_after_spill = 0;\n   lra_inheritance_iter = lra_undo_inheritance_iter = 0;\n \n   setup_reg_spill_flag ();\n@@ -2275,7 +2275,7 @@ lra (FILE *f)\n       lra_eliminate (false, false);\n       lra_constraint_new_regno_start = max_reg_num ();\n       lra_constraint_new_insn_uid_start = get_max_uid ();\n-      lra_constraint_iter_after_spill = 0;\n+      lra_assignment_iter_after_spill = 0;\n     }\n   restore_scratches ();\n   lra_eliminate (true, false);"}, {"sha": "0c3e540c69b5e2dac61655e869cd6794bf40bf23", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54437d5f7912771af11f75bdb370dc440ab2b26/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54437d5f7912771af11f75bdb370dc440ab2b26/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f54437d5f7912771af11f75bdb370dc440ab2b26", "patch": "@@ -1,3 +1,8 @@\n+2014-10-15  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/63448\n+\t* gcc.target/i386/pr63448.c: New test.\n+\n 2014-10-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/opt41.adb: New test."}, {"sha": "3f8262e87e150be85e6b34d292e59ad1504f1d82", "filename": "gcc/testsuite/gcc.target/i386/pr63448.c", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f54437d5f7912771af11f75bdb370dc440ab2b26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63448.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f54437d5f7912771af11f75bdb370dc440ab2b26/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63448.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr63448.c?ref=f54437d5f7912771af11f75bdb370dc440ab2b26", "patch": "@@ -0,0 +1,120 @@\n+/* PR rtl-optimization/63448 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O -std=c99\" } */\n+\n+int a, d, e, g, h, j;\n+float b, c, k, l, m, n;\n+int *__restrict i;\n+void\n+foo (void)\n+{\n+  int o = e;\n+  int *p;\n+  float *q, *r = (float *) 0x1234000;\n+  float s, t, u, v, w, x;\n+  do\n+    {\n+      for (a = o; a; a--)\n+\t{\n+\t  s += m;\n+\t  t += n;\n+\t  u += m;\n+\t  v += n;\n+\t  w += d;\n+\t  x += d;\n+\t  n = l;\n+\t  s += r[1];\n+\t  t += n;\n+\t  v += r[1];\n+\t  m = k * r[4];\n+\t  n = q[0] * r[4];\n+\t  s += m;\n+\t  m = q[1] * r[4];\n+\t  t += n;\n+\t  q += g;\n+\t  k = *q;\n+\t  n = q[1] * r[4];\n+\t  s += m;\n+\t  t += n;\n+\t  u += r[4];\n+\t  m = q[8] * r[4];\n+\t  q += 1;\n+\t  n = q[1] * r[4];\n+\t  s += m;\n+\t  m = q[4];\n+\t  t += n;\n+\t  q += g;\n+\t  w += m;\n+\t  m = k * r[4];\n+\t  s += m;\n+\t  t += q[0];\n+\t  m = q[1] * r[4];\n+\t  v += q[0];\n+\t  n = q[10] * r[4];\n+\t  s += m;\n+\t  t += n;\n+\t  u += b;\n+\t  m = q[8] * r[4];\n+\t  n = q[2] * r[4];\n+\t  s += m;\n+\t  m = q[4] * r[4];\n+\t  t += n;\n+\t  q++;\n+\t  n = q[2] * r[16];\n+\t  s += m;\n+\t  m = q[4];\n+\t  t += n;\n+\t  s += m;\n+\t  t += r[6];\n+\t  q += g;\n+\t  k = *q;\n+\t  w += m;\n+\t  m = k * r[20];\n+\t  x += r[16];\n+\t  n = q[1] * r[20];\n+\t  s += m;\n+\t  t += n;\n+\t  q += g;\n+\t  k = *q;\n+\t  w += m;\n+\t  m = k * r[2];\n+\t  n = q[1] * r[22];\n+\t  s += m;\n+\t  m = q[4];\n+\t  t += n;\n+\t  q += g;\n+\t  s += m;\n+\t  t += q[0];\n+\t  s += m;\n+\t  u += m;\n+\t  n = q[1] * r[22];\n+\t  s += m;\n+\t  m = q[4] * r[22];\n+\t  t += n;\n+\t  q += g;\n+\t  k = 1;\n+\t  w += m;\n+\t  c = q[10];\n+\t  x += r[22];\n+\t  s += m;\n+\t  t += r[22];\n+\t  u += m;\n+\t  v += r[22];\n+\t  n = q[10] * r[30];\n+\t  d = r[32];\n+\t  l = q[1];\n+\t  b = 0;\n+\t  w += m;\n+\t  m = r[32];\n+\t  x += n;\n+\t  r = 0;\n+\t}\n+      *i = s;\n+      p[0] = t;\n+      p[1] = u;\n+      p[6] = v;\n+      p[8] = w;\n+      p[10] = x;\n+    }\n+  while (j);\n+}"}]}