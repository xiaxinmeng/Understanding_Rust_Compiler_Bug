{"sha": "c46f9051654ff52ed083084c109e9247b7fce9aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ2ZjkwNTE2NTRmZjUyZWQwODMwODRjMTA5ZTkyNDdiN2ZjZTlhYQ==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-06-08T13:04:43Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-06-08T13:04:43Z"}, "message": "Add mov[us]wb store intrinsics.\n\ngcc/\n\t* config/i386/avx512bwintrin.h (_mm512_mask_cvtepi16_storeu_epi8,\n\t_mm512_mask_cvtsepi16_storeu_epi8,\n\t_mm512_mask_cvtusepi16_storeu_epi8): New intrinsics.\n\t* config/i386/avx512vlbwintrin.h (_mm256_mask_cvtepi16_storeu_epi8,\n\t_mm_mask_cvtsepi16_storeu_epi8, _mm256_mask_cvtsepi16_storeu_epi8,\n\t_mm_mask_cvtusepi16_storeu_epi8, _mm256_mask_cvtusepi16_storeu_epi8,\n\t_mm_mask_cvtepi16_storeu_epi8): New intrinsics.\n\t* config/i386/i386-builtin-types.def (PV8Q, V8QI): New pointer type.\n\t(VOID_FTYPE_PV32QI_V32HI_USI, VOID_FTYPE_PV8QI_V8HI_UQI,\n\tVOID_FTYPE_PV16QI_V16HI_UHI): New function types.\n\t* config/i386/i386-builtin.def (__builtin_ia32_pmovwb128mem_mask,\n\t__builtin_ia32_pmovwb256mem_mask, __builtin_ia32_pmovswb128mem_mask,\n\t__builtin_ia32_pmovswb256mem_mask, __builtin_ia32_pmovuswb128mem_mask,\n\t__builtin_ia32_pmovuswb256mem_mask,\n\t__builtin_ia32_pmovuswb512mem_mask, __builtin_ia32_pmovswb512mem_mask)\n\t__builtin_ia32_pmovwb512mem_mask): New builtins.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx512bw-vpmovswb-1.c: Add new intrinsics to test.\n\t* gcc.target/i386/avx512bw-vpmovswb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovuswb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovuswb-2.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovwb-1.c: Ditto.\n\t* gcc.target/i386/avx512bw-vpmovwb-2.c: Ditto.\n\nFrom-SVN: r249012", "tree": {"sha": "ab80f354dbded12efd451d0cefc525b221220c3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab80f354dbded12efd451d0cefc525b221220c3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c46f9051654ff52ed083084c109e9247b7fce9aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c46f9051654ff52ed083084c109e9247b7fce9aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c46f9051654ff52ed083084c109e9247b7fce9aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c46f9051654ff52ed083084c109e9247b7fce9aa/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5ed418891b23588989460bc85fb53c60fbabbcbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ed418891b23588989460bc85fb53c60fbabbcbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ed418891b23588989460bc85fb53c60fbabbcbc"}], "stats": {"total": 173, "additions": 164, "deletions": 9}, "files": [{"sha": "d91f3841effc337bca33ee41655cae4c61c9d639", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c46f9051654ff52ed083084c109e9247b7fce9aa", "patch": "@@ -1,3 +1,22 @@\n+2017-08-08  Julia Koval  <julia.koval@intel.com>\n+\n+\t* config/i386/avx512bwintrin.h (_mm512_mask_cvtepi16_storeu_epi8,\n+\t_mm512_mask_cvtsepi16_storeu_epi8,\n+\t_mm512_mask_cvtusepi16_storeu_epi8): New intrinsics.\n+\t* config/i386/avx512vlbwintrin.h (_mm256_mask_cvtepi16_storeu_epi8,\n+\t_mm_mask_cvtsepi16_storeu_epi8, _mm256_mask_cvtsepi16_storeu_epi8,\n+\t_mm_mask_cvtusepi16_storeu_epi8, _mm256_mask_cvtusepi16_storeu_epi8,\n+\t_mm_mask_cvtepi16_storeu_epi8): New intrinsics.\n+\t* config/i386/i386-builtin-types.def (PV8Q, V8QI): New pointer type.\n+\t(VOID_FTYPE_PV32QI_V32HI_USI, VOID_FTYPE_PV8QI_V8HI_UQI,\n+\tVOID_FTYPE_PV16QI_V16HI_UHI): New function types.\n+\t* config/i386/i386-builtin.def (__builtin_ia32_pmovwb128mem_mask,\n+\t__builtin_ia32_pmovwb256mem_mask, __builtin_ia32_pmovswb128mem_mask,\n+\t__builtin_ia32_pmovswb256mem_mask, __builtin_ia32_pmovuswb128mem_mask,\n+\t__builtin_ia32_pmovuswb256mem_mask,\n+\t__builtin_ia32_pmovuswb512mem_mask, __builtin_ia32_pmovswb512mem_mask)\n+\t__builtin_ia32_pmovwb512mem_mask): New builtins.\n+\n 2017-08-08  Julia Koval  <julia.koval@intel.com>\n \n \tPR target/73350,80862"}, {"sha": "71a75ee54dffb8d200506db3c3f7053415f03366", "filename": "gcc/config/i386/avx512bwintrin.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512bwintrin.h?ref=c46f9051654ff52ed083084c109e9247b7fce9aa", "patch": "@@ -425,6 +425,13 @@ _mm512_cvtepi16_epi8 (__m512i __A)\n \t\t\t\t\t\t  (__mmask32) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtepi16_storeu_epi8 (void * __P, __mmask32 __M, __m512i __A)\n+{\n+  __builtin_ia32_pmovwb512mem_mask ((__v32qi *) __P, (__v32hi) __A, __M);\n+}\n+\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtepi16_epi8 (__m256i __O, __mmask32 __M, __m512i __A)\n@@ -452,6 +459,13 @@ _mm512_cvtsepi16_epi8 (__m512i __A)\n \t\t\t\t\t\t   (__mmask32) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtsepi16_storeu_epi8 (void * __P, __mmask32 __M, __m512i __A)\n+{\n+  __builtin_ia32_pmovswb512mem_mask ((__v32qi *) __P, (__v32hi) __A, __M);\n+}\n+\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_cvtsepi16_epi8 (__m256i __O, __mmask32 __M, __m512i __A)\n@@ -489,6 +503,13 @@ _mm512_mask_cvtusepi16_epi8 (__m256i __O, __mmask32 __M, __m512i __A)\n \t\t\t\t\t\t    __M);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_cvtusepi16_storeu_epi8 (void * __P, __mmask32 __M, __m512i __A)\n+{\n+  __builtin_ia32_pmovuswb512mem_mask ((__v32qi *) __P, (__v32hi) __A, __M);\n+}\n+\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_maskz_cvtusepi16_epi8 (__mmask32 __M, __m512i __A)"}, {"sha": "a81180102f60024e355c6bfd44758d8753a0a9f7", "filename": "gcc/config/i386/avx512vlbwintrin.h", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Fconfig%2Fi386%2Favx512vlbwintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Fconfig%2Fi386%2Favx512vlbwintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vlbwintrin.h?ref=c46f9051654ff52ed083084c109e9247b7fce9aa", "patch": "@@ -216,6 +216,13 @@ _mm256_cvtepi16_epi8 (__m256i __A)\n \t\t\t\t\t\t  (__mmask16) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvtepi16_storeu_epi8 (void * __P, __mmask16 __M,__m256i __A)\n+{\n+  __builtin_ia32_pmovwb256mem_mask ((__v16qi *) __P , (__v16hi) __A, __M);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cvtepi16_epi8 (__m128i __O, __mmask16 __M, __m256i __A)\n@@ -244,6 +251,13 @@ _mm_cvtsepi16_epi8 (__m128i __A)\n \t\t\t\t\t\t   (__mmask8) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvtsepi16_storeu_epi8 (void * __P, __mmask8 __M,__m128i __A)\n+{\n+  __builtin_ia32_pmovswb128mem_mask ((__v8qi *) __P , (__v8hi) __A, __M);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtsepi16_epi8 (__m128i __O, __mmask8 __M, __m128i __A)\n@@ -272,6 +286,13 @@ _mm256_cvtsepi16_epi8 (__m256i __A)\n \t\t\t\t\t\t   (__mmask16) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvtsepi16_storeu_epi8 (void * __P, __mmask16 __M,__m256i __A)\n+{\n+  __builtin_ia32_pmovswb256mem_mask ((__v16qi *) __P , (__v16hi) __A, __M);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cvtsepi16_epi8 (__m128i __O, __mmask16 __M, __m256i __A)\n@@ -300,6 +321,13 @@ _mm_cvtusepi16_epi8 (__m128i __A)\n \t\t\t\t\t\t    (__mmask8) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvtusepi16_storeu_epi8 (void * __P, __mmask8 __M,__m128i __A)\n+{\n+  __builtin_ia32_pmovuswb128mem_mask ((__v8qi *) __P , (__v8hi) __A, __M);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtusepi16_epi8 (__m128i __O, __mmask8 __M, __m128i __A)\n@@ -329,6 +357,13 @@ _mm256_cvtusepi16_epi8 (__m256i __A)\n \t\t\t\t\t\t    (__mmask16) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_cvtusepi16_storeu_epi8 (void * __P, __mmask16 __M,__m256i __A)\n+{\n+  __builtin_ia32_pmovuswb256mem_mask ((__v16qi *) __P , (__v16hi) __A, __M);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_cvtusepi16_epi8 (__m128i __O, __mmask16 __M, __m256i __A)\n@@ -4009,6 +4044,13 @@ _mm_cvtepi16_epi8 (__m128i __A)\n \t\t\t\t\t\t  (__mmask8) -1);\n }\n \n+extern __inline void\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_cvtepi16_storeu_epi8 (void * __P, __mmask8 __M,__m128i __A)\n+{\n+  __builtin_ia32_pmovwb128mem_mask ((__v8qi *) __P , (__v8hi) __A, __M);\n+}\n+\n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_cvtepi16_epi8 (__m128i __O, __mmask8 __M, __m128i __A)"}, {"sha": "19d876d73f2739cc393febfbb94a2eccb8b2c30c", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=c46f9051654ff52ed083084c109e9247b7fce9aa", "patch": "@@ -155,6 +155,7 @@ DEF_POINTER_TYPE (PV4SF, V4SF)\n DEF_POINTER_TYPE (PV8DF, V8DF)\n DEF_POINTER_TYPE (PV8SF, V8SF)\n DEF_POINTER_TYPE (PV4SI, V4SI)\n+DEF_POINTER_TYPE (PV8QI, V8QI)\n DEF_POINTER_TYPE (PV8HI, V8HI)\n DEF_POINTER_TYPE (PV8SI, V8SI)\n DEF_POINTER_TYPE (PV8DI, V8DI)\n@@ -964,6 +965,7 @@ DEF_FUNCTION_TYPE (QI, V2DF, INT, UQI)\n DEF_FUNCTION_TYPE (HI, V16SF, INT, UHI)\n DEF_FUNCTION_TYPE (QI, V8SF, INT, UQI)\n DEF_FUNCTION_TYPE (QI, V4SF, INT, UQI)\n+DEF_FUNCTION_TYPE (VOID, PV32QI, V32HI, USI)\n \n DEF_FUNCTION_TYPE (V2DI, V2DI, V2DI, UINT, UINT)\n DEF_FUNCTION_TYPE (V4HI, HI, HI, HI, HI)\n@@ -1106,6 +1108,8 @@ DEF_FUNCTION_TYPE (VOID, PVOID, QI, V2DI, V2DI, INT)\n DEF_FUNCTION_TYPE (VOID, QI, V8SI, PCVOID, INT, INT)\n DEF_FUNCTION_TYPE (VOID, HI, V16SI, PCVOID, INT, INT)\n DEF_FUNCTION_TYPE (VOID, QI, V8DI, PCVOID, INT, INT)\n+DEF_FUNCTION_TYPE (VOID, PV8QI, V8HI, UQI)\n+DEF_FUNCTION_TYPE (VOID, PV16QI, V16HI, UHI)\n \n DEF_FUNCTION_TYPE_ALIAS (V2DF_FTYPE_V2DF, ROUND)\n DEF_FUNCTION_TYPE_ALIAS (V4DF_FTYPE_V4DF, ROUND)"}, {"sha": "23e88839048e6ce20879dfd62db372a98058e255", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=c46f9051654ff52ed083084c109e9247b7fce9aa", "patch": "@@ -378,6 +378,15 @@ BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_ss_truncatev8siv8hi2_mask_sto\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_ss_truncatev4siv4hi2_mask_store, \"__builtin_ia32_pmovsdw128mem_mask\", IX86_BUILTIN_PMOVSDW128_MEM, UNKNOWN, (int) VOID_FTYPE_PV8HI_V4SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_us_truncatev8siv8hi2_mask_store, \"__builtin_ia32_pmovusdw256mem_mask\", IX86_BUILTIN_PMOVUSDW256_MEM, UNKNOWN, (int) VOID_FTYPE_PV8HI_V8SI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_us_truncatev4siv4hi2_mask_store, \"__builtin_ia32_pmovusdw128mem_mask\", IX86_BUILTIN_PMOVUSDW128_MEM, UNKNOWN, (int) VOID_FTYPE_PV8HI_V4SI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_truncatev8hiv8qi2_mask_store, \"__builtin_ia32_pmovwb128mem_mask\", IX86_BUILTIN_PMOVWB128_MEM, UNKNOWN, (int) VOID_FTYPE_PV8QI_V8HI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_truncatev16hiv16qi2_mask_store, \"__builtin_ia32_pmovwb256mem_mask\", IX86_BUILTIN_PMOVWB256_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V16HI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_ss_truncatev8hiv8qi2_mask_store, \"__builtin_ia32_pmovswb128mem_mask\", IX86_BUILTIN_PMOVSWB128_MEM, UNKNOWN, (int) VOID_FTYPE_PV8QI_V8HI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_ss_truncatev16hiv16qi2_mask_store, \"__builtin_ia32_pmovswb256mem_mask\", IX86_BUILTIN_PMOVSWB256_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V16HI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_us_truncatev8hiv8qi2_mask_store, \"__builtin_ia32_pmovuswb128mem_mask\", IX86_BUILTIN_PMOVUSWB128_MEM, UNKNOWN, (int) VOID_FTYPE_PV8QI_V8HI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512BW | OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_us_truncatev16hiv16qi2_mask_store, \"__builtin_ia32_pmovuswb256mem_mask\", IX86_BUILTIN_PMOVUSWB256_MEM, UNKNOWN, (int) VOID_FTYPE_PV16QI_V16HI_UHI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_avx512bw_us_truncatev32hiv32qi2_mask_store, \"__builtin_ia32_pmovuswb512mem_mask\", IX86_BUILTIN_PMOVUSWB512_MEM, UNKNOWN, (int) VOID_FTYPE_PV32QI_V32HI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_avx512bw_ss_truncatev32hiv32qi2_mask_store, \"__builtin_ia32_pmovswb512mem_mask\", IX86_BUILTIN_PMOVSWB512_MEM, UNKNOWN, (int) VOID_FTYPE_PV32QI_V32HI_USI)\n+BDESC (OPTION_MASK_ISA_AVX512BW, CODE_FOR_avx512bw_truncatev32hiv32qi2_mask_store, \"__builtin_ia32_pmovwb512mem_mask\", IX86_BUILTIN_PMOVWB512_MEM, UNKNOWN, (int) VOID_FTYPE_PV32QI_V32HI_USI)\n \n /* RDPKRU and WRPKRU.  */\n BDESC (OPTION_MASK_ISA_PKU, CODE_FOR_rdpkru,  \"__builtin_ia32_rdpkru\", IX86_BUILTIN_RDPKRU, UNKNOWN, (int) UNSIGNED_FTYPE_VOID)"}, {"sha": "d5c2d46bf5eeeccbe63f73546101e4d9613e5ca5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=c46f9051654ff52ed083084c109e9247b7fce9aa", "patch": "@@ -37033,6 +37033,9 @@ ix86_expand_special_args_builtin (const struct builtin_description *d,\n     case VOID_FTYPE_PFLOAT_V16SF_UHI:\n     case VOID_FTYPE_PFLOAT_V8SF_UQI:\n     case VOID_FTYPE_PFLOAT_V4SF_UQI:\n+    case VOID_FTYPE_PV32QI_V32HI_USI:\n+    case VOID_FTYPE_PV16QI_V16HI_UHI:\n+    case VOID_FTYPE_PV8QI_V8HI_UQI:\n       nargs = 2;\n       klass = store;\n       /* Reserve memory operand for target.  */"}, {"sha": "64acda40d74889648c5dd70d54bb01666f50ffab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c46f9051654ff52ed083084c109e9247b7fce9aa", "patch": "@@ -1,3 +1,12 @@\n+2017-08-08  Julia Koval  <julia.koval@intel.com>\n+\n+\t* gcc.target/i386/avx512bw-vpmovswb-1.c: Add new intrinsics to test.\n+\t* gcc.target/i386/avx512bw-vpmovswb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovuswb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovuswb-2.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovwb-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpmovwb-2.c: Ditto.\n+\n 2017-06-08  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitize/80932"}, {"sha": "6bb87d25f4deeb88c83208f430d9994d778755b0", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovswb-1.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovswb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovswb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovswb-1.c?ref=c46f9051654ff52ed083084c109e9247b7fce9aa", "patch": "@@ -3,18 +3,21 @@\n /* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}{z}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*res1\\[^\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}{z}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*res2\\[^\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}{z}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*res3\\[^\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128i x, z;\n-volatile __m256i y;\n-volatile __m512i u;\n+volatile __m128i x, z, res1;\n+volatile __m256i y, res2;\n+volatile __m512i u, res3;\n volatile __mmask8 m1;\n volatile __mmask16 m2;\n volatile __mmask32 m3;\n@@ -25,10 +28,13 @@ avx512bw_test (void)\n   z = _mm_cvtsepi16_epi8 (x);\n   z = _mm_mask_cvtsepi16_epi8 (z, m1, x);\n   z = _mm_maskz_cvtsepi16_epi8 (m1, x);\n+  _mm_mask_cvtsepi16_storeu_epi8 ((void *) &res1, m1, x);\n   z = _mm256_cvtsepi16_epi8 (y);\n   z = _mm256_mask_cvtsepi16_epi8 (z, m2, y);\n   z = _mm256_maskz_cvtsepi16_epi8 (m2, y);\n+  _mm256_mask_cvtsepi16_storeu_epi8 ((void *) &res2, m2, y);\n   y = _mm512_cvtsepi16_epi8 (u);\n   y = _mm512_mask_cvtsepi16_epi8 (y, m3, u);\n   y = _mm512_maskz_cvtsepi16_epi8 (m3, u);\n+  _mm512_mask_cvtsepi16_storeu_epi8 ((void *) &res3, m3, u);\n }"}, {"sha": "fd9cb4c681e301cf047d7ac6fd8ec87faa54c7f3", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovswb-2.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovswb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovswb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovswb-2.c?ref=c46f9051654ff52ed083084c109e9247b7fce9aa", "patch": "@@ -31,16 +31,19 @@ TEST (void)\n {\n   int i, sign;\n   UNION_TYPE (AVX512F_LEN_HALF, i_b) res1, res2, res3;\n+  char res4[SIZE];\n   UNION_TYPE (AVX512F_LEN, i_w) src;\n   MASK_TYPE mask = MASK_VALUE;\n   char res_ref[32];\n+  char res_ref2[SIZE_HALF];\n \n   sign = -1;\n   for (i = 0; i < SIZE; i++)\n     {\n       src.a[i] = 1 + 34 * i * sign;\n       sign = sign * -1;\n       res2.a[i] = DEFAULT_VALUE;\n+      res4[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = INTRINSIC (_cvtsepi16_epi8) (src.x);\n@@ -59,4 +62,11 @@ TEST (void)\n   MASK_ZERO (i_b) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_b) (res3, res_ref))\n     abort ();\n+\n+  INTRINSIC (_mask_cvtsepi16_storeu_epi8) (res4, mask, src.x);\n+  CALC (res_ref2, src.a);\n+  MASK_MERGE (i_b) (res_ref2, mask, SIZE);\n+\n+  if (checkVc (res4, res_ref2, SIZE))\n+    abort ();\n }"}, {"sha": "7825e46a9441fa7ec60cb6c8534c864b5edfaf4e", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovuswb-1.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovuswb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovuswb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovuswb-1.c?ref=c46f9051654ff52ed083084c109e9247b7fce9aa", "patch": "@@ -3,18 +3,21 @@\n /* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}{z}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*res1\\[^\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}{z}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*res2\\[^\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}{z}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovuswb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*res3\\[^\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128i x, z;\n-volatile __m256i y;\n-volatile __m512i u;\n+volatile __m128i x, z, res1;\n+volatile __m256i y, res2;\n+volatile __m512i u, res3;\n volatile __mmask8 m1;\n volatile __mmask16 m2;\n volatile __mmask32 m3;\n@@ -25,10 +28,13 @@ avx512bw_test (void)\n   z = _mm_cvtusepi16_epi8 (x);\n   z = _mm_mask_cvtusepi16_epi8 (z, m1, x);\n   z = _mm_maskz_cvtusepi16_epi8 (m1, x);\n+  _mm_mask_cvtusepi16_storeu_epi8 ((void *) &res1, m1, x);\n   z = _mm256_cvtusepi16_epi8 (y);\n   z = _mm256_mask_cvtusepi16_epi8 (z, m2, y);\n   z = _mm256_maskz_cvtusepi16_epi8 (m2, y);\n+  _mm256_mask_cvtusepi16_storeu_epi8 ((void *) &res2, m2, y);\n   y = _mm512_cvtusepi16_epi8 (u);\n   y = _mm512_mask_cvtusepi16_epi8 (y, m3, u);\n   y = _mm512_maskz_cvtusepi16_epi8 (m3, u);\n+  _mm512_mask_cvtusepi16_storeu_epi8 ((void *) &res3, m3, u);\n }"}, {"sha": "d5198f39eb613d31e07d5a02d9d8d6f106179713", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovuswb-2.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovuswb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovuswb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovuswb-2.c?ref=c46f9051654ff52ed083084c109e9247b7fce9aa", "patch": "@@ -23,14 +23,17 @@ TEST (void)\n {\n   int i;\n   UNION_TYPE (AVX512F_LEN_HALF, i_b) res1, res2, res3;\n+  unsigned char res4[SIZE];\n   UNION_TYPE (AVX512F_LEN, i_w) src;\n   MASK_TYPE mask = MASK_VALUE;\n   unsigned char res_ref[32];\n+  unsigned char res_ref2[SIZE];\n \n   for (i = 0; i < SIZE; i++)\n     {\n       src.a[i] = 1 + 34 * i;\n       res2.a[i] = DEFAULT_VALUE;\n+      res4[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = INTRINSIC (_cvtusepi16_epi8) (src.x);\n@@ -49,4 +52,11 @@ TEST (void)\n   MASK_ZERO (i_b) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_b) (res3, res_ref))\n     abort ();\n+\n+  INTRINSIC (_mask_cvtusepi16_storeu_epi8) (res4, mask, src.x);\n+  CALC (res_ref2, src.a);\n+  \n+  MASK_MERGE (i_b) (res_ref2, mask, SIZE);\n+  if (checkVc (res4, res_ref2, SIZE))\n+    abort (); \n }"}, {"sha": "a1ad551392b4800bd9b5689062545eacf6dfb4ca", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovwb-1.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovwb-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovwb-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovwb-1.c?ref=c46f9051654ff52ed083084c109e9247b7fce9aa", "patch": "@@ -3,18 +3,21 @@\n /* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}{z}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\]*res1\\[^\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}{z}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\]*res2\\[^\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n /* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}{z}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpmovwb\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\]*res3\\[^\\n\\]*\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\"  1 } } */\n \n #include <immintrin.h>\n \n-volatile __m128i x, z;\n-volatile __m256i y;\n-volatile __m512i u;\n+volatile __m128i x, z, res1;\n+volatile __m256i y, res2;\n+volatile __m512i u, res3;\n volatile __mmask8 m1;\n volatile __mmask16 m2;\n volatile __mmask32 m3;\n@@ -25,10 +28,13 @@ avx512bw_test (void)\n   z = _mm_cvtepi16_epi8 (x);\n   z = _mm_mask_cvtepi16_epi8 (z, m1, x);\n   z = _mm_maskz_cvtepi16_epi8 (m1, x);\n+  _mm_mask_cvtepi16_storeu_epi8 ((void *) &res1, m1, x);\n   z = _mm256_cvtepi16_epi8 (y);\n   z = _mm256_mask_cvtepi16_epi8 (z, m2, y);\n   z = _mm256_maskz_cvtepi16_epi8 (m2, y);\n+  _mm256_mask_cvtepi16_storeu_epi8 ((void *) &res2, m2, y);\n   y = _mm512_cvtepi16_epi8 (u);\n   y = _mm512_mask_cvtepi16_epi8 (y, m3, u);\n   y = _mm512_maskz_cvtepi16_epi8 (m3, u);\n+  _mm512_mask_cvtepi16_storeu_epi8 ((void *) &res3, m3, u);\n }"}, {"sha": "6b0f86f57d8c0a156d1a7bedacaa6544dbd9e2cd", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpmovwb-2.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovwb-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c46f9051654ff52ed083084c109e9247b7fce9aa/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovwb-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpmovwb-2.c?ref=c46f9051654ff52ed083084c109e9247b7fce9aa", "patch": "@@ -24,16 +24,19 @@ TEST (void)\n {\n   int i, sign;\n   UNION_TYPE (AVX512F_LEN_HALF, i_b) res1, res2, res3;\n+  char res4[SIZE];\n   UNION_TYPE (AVX512F_LEN, i_w) src;\n   MASK_TYPE mask = MASK_VALUE;\n   char res_ref[32];\n+  char res_ref2[SIZE];\n \n   sign = -1;\n   for (i = 0; i < SIZE; i++)\n     {\n       src.a[i] = 1 + 34 * i * sign;\n       sign = sign * -1;\n       res2.a[i] = DEFAULT_VALUE;\n+      res4[i] = DEFAULT_VALUE;\n     }\n \n   res1.x = INTRINSIC (_cvtepi16_epi8) (src.x);\n@@ -52,4 +55,11 @@ TEST (void)\n   MASK_ZERO (i_b) (res_ref, mask, SIZE);\n   if (UNION_CHECK (AVX512F_LEN_HALF, i_b) (res3, res_ref))\n     abort ();\n+\n+  INTRINSIC (_mask_cvtepi16_storeu_epi8) (res4, mask, src.x);\n+  CALC (res_ref2, src.a);\n+  \n+  MASK_MERGE (i_b) (res_ref2, mask, SIZE);\n+  if (checkVc (res4, res_ref2, SIZE))\n+    abort (); \n }"}]}