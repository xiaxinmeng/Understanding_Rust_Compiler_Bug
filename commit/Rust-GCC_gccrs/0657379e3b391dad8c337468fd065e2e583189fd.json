{"sha": "0657379e3b391dad8c337468fd065e2e583189fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY1NzM3OWUzYjM5MWRhZDhjMzM3NDY4ZmQwNjVlMmU1ODMxODlmZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2016-08-15T11:40:37Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2016-08-15T11:40:37Z"}, "message": "ops.cc: Always include ostream and ext/stdio_filebuf.h.\n\n\t* src/filesystem/ops.cc: Always include ostream and\n\text/stdio_filebuf.h.\n\t(do_copy_file): Check if _GLIBCXX_USE_FCHMODAT is defined.\n\t[_GLIBCXX_USE_SENDFILE]: Fallback to read/write operations in case\n\tsendfile fails with ENOSYS or EINVAL.\n\nFrom-SVN: r239479", "tree": {"sha": "be8eef3516f748085532c3452cfdfe8e9ce062ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be8eef3516f748085532c3452cfdfe8e9ce062ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0657379e3b391dad8c337468fd065e2e583189fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0657379e3b391dad8c337468fd065e2e583189fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0657379e3b391dad8c337468fd065e2e583189fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0657379e3b391dad8c337468fd065e2e583189fd/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2e6fc1acd0aabb97d68c944650284ea08e87c92f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e6fc1acd0aabb97d68c944650284ea08e87c92f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e6fc1acd0aabb97d68c944650284ea08e87c92f"}], "stats": {"total": 59, "additions": 37, "deletions": 22}, "files": [{"sha": "829f78e1409f7e7c40201748bd9f19f714894dde", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0657379e3b391dad8c337468fd065e2e583189fd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0657379e3b391dad8c337468fd065e2e583189fd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0657379e3b391dad8c337468fd065e2e583189fd", "patch": "@@ -1,3 +1,11 @@\n+2016-08-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* src/filesystem/ops.cc: Always include ostream and\n+\text/stdio_filebuf.h.\n+\t(do_copy_file): Check if _GLIBCXX_USE_FCHMODAT is defined.\n+\t[_GLIBCXX_USE_SENDFILE]: Fallback to read/write operations in case\n+\tsendfile fails with ENOSYS or EINVAL.\n+\n 2016-08-15  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \tPR libstdc++/72840"}, {"sha": "0ecb8b9f4d871ccb44cb34882e56edf3e7abb1e7", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0657379e3b391dad8c337468fd065e2e583189fd/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0657379e3b391dad8c337468fd065e2e583189fd/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=0657379e3b391dad8c337468fd065e2e583189fd", "patch": "@@ -28,7 +28,9 @@\n \n #include <experimental/filesystem>\n #include <functional>\n+#include <ostream>\n #include <stack>\n+#include <ext/stdio_filebuf.h>\n #include <stdlib.h>\n #include <stdio.h>\n #include <errno.h>\n@@ -48,9 +50,6 @@\n #endif\n #ifdef _GLIBCXX_USE_SENDFILE\n # include <sys/sendfile.h>\n-#else\n-# include <ext/stdio_filebuf.h>\n-# include <ostream>\n #endif\n #if _GLIBCXX_HAVE_UTIME_H\n # include <utime.h>\n@@ -416,7 +415,7 @@ namespace\n \n #ifdef _GLIBCXX_USE_FCHMOD\n     if (::fchmod(out.fd, from_st->st_mode))\n-#elif _GLIBCXX_USE_FCHMODAT\n+#elif defined _GLIBCXX_USE_FCHMODAT\n     if (::fchmodat(AT_FDCWD, to.c_str(), from_st->st_mode, 0))\n #else\n     if (::chmod(to.c_str(), from_st->st_mode))\n@@ -428,37 +427,45 @@ namespace\n \n #ifdef _GLIBCXX_USE_SENDFILE\n     const auto n = ::sendfile(out.fd, in.fd, nullptr, from_st->st_size);\n-    if (n != from_st->st_size)\n+    if (n < 0 && (errno == ENOSYS || errno == EINVAL))\n       {\n-\tec.assign(errno, std::generic_category());\n-\treturn false;\n+#endif\n+\t__gnu_cxx::stdio_filebuf<char> sbin(in.fd, std::ios::in);\n+\t__gnu_cxx::stdio_filebuf<char> sbout(out.fd, std::ios::out);\n+\tif (sbin.is_open())\n+\t  in.fd = -1;\n+\tif (sbout.is_open())\n+\t  out.fd = -1;\n+\tif (from_st->st_size && !(std::ostream(&sbout) << &sbin))\n+\t  {\n+\t    ec = std::make_error_code(std::errc::io_error);\n+\t    return false;\n+\t  }\n+\tif (!sbout.close() || !sbin.close())\n+\t  {\n+\t    ec.assign(errno, std::generic_category());\n+\t    return false;\n+\t  }\n+\n+\tec.clear();\n+\treturn true;\n+\n+#ifdef _GLIBCXX_USE_SENDFILE\n       }\n-    if (!out.close() || !in.close())\n+    if (n != from_st->st_size)\n       {\n \tec.assign(errno, std::generic_category());\n \treturn false;\n       }\n-#else\n-    __gnu_cxx::stdio_filebuf<char> sbin(in.fd, std::ios::in);\n-    __gnu_cxx::stdio_filebuf<char> sbout(out.fd, std::ios::out);\n-    if (sbin.is_open())\n-      in.fd = -1;\n-    if (sbout.is_open())\n-      out.fd = -1;\n-    if (from_st->st_size && !(std::ostream(&sbout) << &sbin))\n-      {\n-\tec = std::make_error_code(std::errc::io_error);\n-\treturn false;\n-      }\n-    if (!sbout.close() || !sbin.close())\n+    if (!out.close() || !in.close())\n       {\n \tec.assign(errno, std::generic_category());\n \treturn false;\n       }\n-#endif\n \n     ec.clear();\n     return true;\n+#endif\n   }\n }\n #endif"}]}