{"sha": "a6a29d0c39e207cf1ec8ad94ec44744ae9814660", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZhMjlkMGMzOWUyMDdjZjFlYzhhZDk0ZWM0NDc0NGFlOTgxNDY2MA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-06-03T10:39:42Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-06-03T10:39:42Z"}, "message": "decl.c (gnat_to_gnu_entity): Add the _Parent field, if any, to the record before adding the other fields.\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Type>: Add the\n\t_Parent field, if any, to the record before adding the other fields.\n\t<E_Record_Subtype>: Put the _Controller field before the other fields\n\texcept for the _Tag or _Parent fields.\n\t(components_to_record): Likewise.  Retrieve the _Parent field from the\n\trecord type.\n\nFrom-SVN: r148124", "tree": {"sha": "97ba5195aef6d4dc006b2ae1363a6fc163a7406a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97ba5195aef6d4dc006b2ae1363a6fc163a7406a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6a29d0c39e207cf1ec8ad94ec44744ae9814660", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6a29d0c39e207cf1ec8ad94ec44744ae9814660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6a29d0c39e207cf1ec8ad94ec44744ae9814660", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6a29d0c39e207cf1ec8ad94ec44744ae9814660/comments", "author": null, "committer": null, "parents": [{"sha": "110a123aae0196680d42ace6e3899304ceba4d1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/110a123aae0196680d42ace6e3899304ceba4d1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/110a123aae0196680d42ace6e3899304ceba4d1d"}], "stats": {"total": 79, "additions": 60, "deletions": 19}, "files": [{"sha": "4bce612d06dfed178635002fcfedb12822caaa94", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6a29d0c39e207cf1ec8ad94ec44744ae9814660/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6a29d0c39e207cf1ec8ad94ec44744ae9814660/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a6a29d0c39e207cf1ec8ad94ec44744ae9814660", "patch": "@@ -1,3 +1,12 @@\n+2009-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Type>: Add the\n+\t_Parent field, if any, to the record before adding the other fields.\n+\t<E_Record_Subtype>: Put the _Controller field before the other fields\n+\texcept for the _Tag or _Parent fields.\n+\t(components_to_record): Likewise.  Retrieve the _Parent field from the\n+\trecord type.\n+\n 2009-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (substitution_list): Rename to build_subst_list,"}, {"sha": "befb4f5d71e34342b01e62106300791acc5b0a0b", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 51, "deletions": 19, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6a29d0c39e207cf1ec8ad94ec44744ae9814660/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6a29d0c39e207cf1ec8ad94ec44744ae9814660/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=a6a29d0c39e207cf1ec8ad94ec44744ae9814660", "patch": "@@ -2920,14 +2920,15 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    TREE_TYPE (gnu_get_parent) = gnu_parent;\n \n \t    /* ...and reference the _Parent field of this record.  */\n-\t    gnu_field_list\n+\t    gnu_field\n \t      = create_field_decl (get_identifier\n \t\t\t\t   (Get_Name_String (Name_uParent)),\n \t\t\t\t   gnu_parent, gnu_type, 0,\n \t\t\t\t   has_rep ? TYPE_SIZE (gnu_parent) : 0,\n \t\t\t\t   has_rep ? bitsize_zero_node : 0, 1);\n-\t    DECL_INTERNAL_P (gnu_field_list) = 1;\n-\t    TREE_OPERAND (gnu_get_parent, 1) = gnu_field_list;\n+\t    DECL_INTERNAL_P (gnu_field) = 1;\n+\t    TREE_OPERAND (gnu_get_parent, 1) = gnu_field;\n+\t    TYPE_FIELDS (gnu_type) = gnu_field;\n \t  }\n \n \t/* Make the fields for the discriminants and put them into the record\n@@ -3129,6 +3130,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t    && (No (Corresponding_Discriminant (gnat_field))\n \t\t\t|| !Is_Tagged_Type (gnat_base_type)))\n \t\t  {\n+\t\t    Name_Id gnat_name = Chars (gnat_field);\n \t\t    tree gnu_old_field\n \t\t      = gnat_to_gnu_field_decl\n \t\t\t(Original_Record_Component (gnat_field));\n@@ -3138,6 +3140,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t    tree gnu_pos = TREE_PURPOSE (gnu_offset);\n \t\t    tree gnu_bitpos = TREE_VALUE (TREE_VALUE (gnu_offset));\n \t\t    tree gnu_field, gnu_field_type, gnu_size, gnu_new_pos;\n+\t\t    tree gnu_last = NULL_TREE;\n \t\t    unsigned int offset_align\n \t\t      = tree_low_cst\n \t\t\t(TREE_PURPOSE (TREE_VALUE (gnu_offset)), 1);\n@@ -3243,15 +3246,29 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t    TREE_THIS_VOLATILE (gnu_field)\n \t\t      = TREE_THIS_VOLATILE (gnu_old_field);\n \n-\t\t    /* To match the layout crafted in components_to_record, if\n-\t\t       this is the _Tag field, put it before any discriminants\n-\t\t       instead of after them as for all other fields.  */\n-\t\t    if (Chars (gnat_field) == Name_uTag)\n+\t\t    /* To match the layout crafted in components_to_record,\n+\t\t       if this is the _Tag or _Parent field, put it before\n+\t\t       any other fields.  */\n+\t\t    if (gnat_name == Name_uTag || gnat_name == Name_uParent)\n \t\t      gnu_field_list = chainon (gnu_field_list, gnu_field);\n+\n+\t\t    /* Similarly, if this is the _Controller field, put\n+\t\t       it before the other fields except for the _Tag or\n+\t\t       _Parent field.  */\n+\t\t    else if (gnat_name == Name_uController && gnu_last)\n+\t\t      {\n+\t\t\tTREE_CHAIN (gnu_field) = TREE_CHAIN (gnu_last);\n+\t\t\tTREE_CHAIN (gnu_last) = gnu_field;\n+\t\t      }\n+\n+\t\t    /* Otherwise, if this is a regular field, put it after\n+\t\t       the other fields.  */\n \t\t    else\n \t\t      {\n \t\t\tTREE_CHAIN (gnu_field) = gnu_field_list;\n \t\t\tgnu_field_list = gnu_field;\n+\t\t\tif (!gnu_last)\n+\t\t\t  gnu_last = gnu_field;\n \t\t      }\n \n \t\t    save_gnu_tree (gnat_field, gnu_field, false);\n@@ -6629,10 +6646,10 @@ compare_field_bitpos (const PTR rt1, const PTR rt2)\n /* Translate and chain the GNAT_COMPONENT_LIST to the GNU_FIELD_LIST, set\n    the result as the field list of GNU_RECORD_TYPE and finish it up.  When\n    called from gnat_to_gnu_entity during the processing of a record type\n-   definition, the GCC nodes for the discriminants and the parent, if any,\n-   will be on the GNU_FIELD_LIST.  The other calls to this function are\n-   recursive calls for the component list of a variant and, in this case,\n-   GNU_FIELD_LIST is empty.\n+   definition, the GCC node for the parent, if any, will be the single field\n+   of GNU_RECORD_TYPE and the GCC nodes for the discriminants will be on the\n+   GNU_FIELD_LIST.  The other calls to this function are recursive calls for\n+   the component list of a variant and, in this case, GNU_FIELD_LIST is empty.\n \n    PACKED is 1 if this is for a packed record, -1 if this is for a record\n    with Component_Alignment of Storage_Unit, -2 if this is for a record\n@@ -6668,7 +6685,7 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n   bool layout_with_rep = false;\n   Node_Id component_decl, variant_part;\n   tree gnu_our_rep_list = NULL_TREE;\n-  tree gnu_field, gnu_next, gnu_last;\n+  tree gnu_field, gnu_next, gnu_last = tree_last (gnu_field_list);\n \n   /* For each component referenced in a component declaration create a GCC\n      field and add it to the list, skipping pragmas in the GNAT list.  */\n@@ -6679,24 +6696,39 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n \t component_decl = Next_Non_Pragma (component_decl))\n       {\n \tEntity_Id gnat_field = Defining_Entity (component_decl);\n+\tName_Id gnat_name = Chars (gnat_field);\n \n-\t/* If present, the _Parent field must have been created and added\n-\t   as the last field to the list.  */\n-\tif (Chars (gnat_field) == Name_uParent)\n-\t  gnu_field = tree_last (gnu_field_list);\n+\t/* If present, the _Parent field must have been created as the single\n+\t   field of the record type.  Put it before any other fields.  */\n+\tif (gnat_name == Name_uParent)\n+\t  {\n+\t    gnu_field = TYPE_FIELDS (gnu_record_type);\n+\t    gnu_field_list = chainon (gnu_field_list, gnu_field);\n+\t  }\n \telse\n \t  {\n \t    gnu_field = gnat_to_gnu_field (gnat_field, gnu_record_type,\n \t\t\t\t\t   packed, definition);\n \n-\t    /* If this is the _Tag field, put it before any discriminants,\n-\t       instead of after them as is the case for all other fields.  */\n-\t    if (Chars (gnat_field) == Name_uTag)\n+\t    /* If this is the _Tag field, put it before any other fields.  */\n+\t    if (gnat_name == Name_uTag)\n \t      gnu_field_list = chainon (gnu_field_list, gnu_field);\n+\n+\t    /* If this is the _Controller field, put it before the other\n+\t       fields except for the _Tag or _Parent field.  */\n+\t    else if (gnat_name == Name_uController && gnu_last)\n+\t      {\n+\t\tTREE_CHAIN (gnu_field) = TREE_CHAIN (gnu_last);\n+\t\tTREE_CHAIN (gnu_last) = gnu_field;\n+\t      }\n+\n+\t    /* If this is a regular field, put it after the other fields.  */\n \t    else\n \t      {\n \t\tTREE_CHAIN (gnu_field) = gnu_field_list;\n \t\tgnu_field_list = gnu_field;\n+\t\tif (!gnu_last)\n+\t\t  gnu_last = gnu_field;\n \t      }\n \t  }\n "}]}