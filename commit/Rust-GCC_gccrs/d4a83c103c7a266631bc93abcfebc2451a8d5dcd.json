{"sha": "d4a83c103c7a266631bc93abcfebc2451a8d5dcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRhODNjMTAzYzdhMjY2NjMxYmM5M2FiY2ZlYmMyNDUxYThkNWRjZA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-08-19T15:53:51Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-08-19T15:53:51Z"}, "message": "c-parser.c (c_parser_postfix_expression): Handle RID_BUILTIN_COMPLEX.\n\n\t* c-parser.c (c_parser_postfix_expression): Handle\n\tRID_BUILTIN_COMPLEX.\n\t* doc/extend.texi (__builtin_complex): Document.\n\nc-family:\n\t* c-common.c (c_common_reswords): Add __builtin_complex.\n\t* c-common.h (RID_BUILTIN_COMPLEX): New.\n\ntestsuite:\n\t* gcc.dg/builtin-complex-err-1.c, gcc.dg/builtin-complex-err-2.c,\n\tgcc.dg/dfp/builtin-complex.c, gcc.dg/torture/builtin-complex-1.c:\n\tNew tests.\n\nFrom-SVN: r177911", "tree": {"sha": "6962b481efb1f6dbc36e80864a62800c7cd68b11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6962b481efb1f6dbc36e80864a62800c7cd68b11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4a83c103c7a266631bc93abcfebc2451a8d5dcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a83c103c7a266631bc93abcfebc2451a8d5dcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4a83c103c7a266631bc93abcfebc2451a8d5dcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6f969f4cb4b8363b2f20f942d36dd96906ba253", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f969f4cb4b8363b2f20f942d36dd96906ba253", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6f969f4cb4b8363b2f20f942d36dd96906ba253"}], "stats": {"total": 242, "additions": 241, "deletions": 1}, "files": [{"sha": "99986b588d1ef0d27b94ef25541c190bf1c04be7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4a83c103c7a266631bc93abcfebc2451a8d5dcd", "patch": "@@ -1,3 +1,9 @@\n+2011-08-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-parser.c (c_parser_postfix_expression): Handle\n+\tRID_BUILTIN_COMPLEX.\n+\t* doc/extend.texi (__builtin_complex): Document.\n+\n 2011-08-19  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* tree-ssa-math-opts.c (is_widening_mult_rhs_p): Handle constants"}, {"sha": "df9cdff40f4825919695ff6f8763c09eaa1e6545", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=d4a83c103c7a266631bc93abcfebc2451a8d5dcd", "patch": "@@ -1,3 +1,8 @@\n+2011-08-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-common.c (c_common_reswords): Add __builtin_complex.\n+\t* c-common.h (RID_BUILTIN_COMPLEX): New.\n+\n 2011-08-18  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-common.c (c_common_reswords): Add _Noreturn."}, {"sha": "4cace8d3b140e04370e6850ff7b91c576892b6ec", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=d4a83c103c7a266631bc93abcfebc2451a8d5dcd", "patch": "@@ -424,6 +424,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"__attribute\",\tRID_ATTRIBUTE,\t0 },\n   { \"__attribute__\",\tRID_ATTRIBUTE,\t0 },\n   { \"__builtin_choose_expr\", RID_CHOOSE_EXPR, D_CONLY },\n+  { \"__builtin_complex\", RID_BUILTIN_COMPLEX, D_CONLY },\n   { \"__builtin_offsetof\", RID_OFFSETOF, 0 },\n   { \"__builtin_types_compatible_p\", RID_TYPES_COMPATIBLE_P, D_CONLY },\n   { \"__builtin_va_arg\",\tRID_VA_ARG,\t0 },"}, {"sha": "7ad82c009c806d437f8976ca0a473ef6e62b459f", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=d4a83c103c7a266631bc93abcfebc2451a8d5dcd", "patch": "@@ -103,7 +103,7 @@ enum rid\n   /* C extensions */\n   RID_ASM,       RID_TYPEOF,   RID_ALIGNOF,  RID_ATTRIBUTE,  RID_VA_ARG,\n   RID_EXTENSION, RID_IMAGPART, RID_REALPART, RID_LABEL,      RID_CHOOSE_EXPR,\n-  RID_TYPES_COMPATIBLE_P,\n+  RID_TYPES_COMPATIBLE_P,      RID_BUILTIN_COMPLEX,\n   RID_DFLOAT32, RID_DFLOAT64, RID_DFLOAT128,\n   RID_FRACT, RID_ACCUM,\n "}, {"sha": "92821b17261f9b842d0a659910c63d60dc5ab68f", "filename": "gcc/c-parser.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=d4a83c103c7a266631bc93abcfebc2451a8d5dcd", "patch": "@@ -6026,6 +6026,7 @@ c_parser_alignof_expression (c_parser *parser)\n \t\t\t     assignment-expression ,\n \t\t\t     assignment-expression )\n      __builtin_types_compatible_p ( type-name , type-name )\n+     __builtin_complex ( assignment-expression , assignment-expression )\n \n    offsetof-member-designator:\n      identifier\n@@ -6408,6 +6409,52 @@ c_parser_postfix_expression (c_parser *parser)\n \t      = comptypes (e1, e2) ? integer_one_node : integer_zero_node;\n \t  }\n \t  break;\n+\tcase RID_BUILTIN_COMPLEX:\n+\t  c_parser_consume_token (parser);\n+\t  if (!c_parser_require (parser, CPP_OPEN_PAREN, \"expected %<(%>\"))\n+\t    {\n+\t      expr.value = error_mark_node;\n+\t      break;\n+\t    }\n+\t  loc = c_parser_peek_token (parser)->location;\n+\t  e1 = c_parser_expr_no_commas (parser, NULL);\n+\t  if (!c_parser_require (parser, CPP_COMMA, \"expected %<,%>\"))\n+\t    {\n+\t      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n+\t      expr.value = error_mark_node;\n+\t      break;\n+\t    }\n+\t  e2 = c_parser_expr_no_commas (parser, NULL);\n+\t  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n+\t\t\t\t     \"expected %<)%>\");\n+\t  mark_exp_read (e1.value);\n+\t  mark_exp_read (e2.value);\n+\t  if (!SCALAR_FLOAT_TYPE_P (TREE_TYPE (e1.value))\n+\t      || DECIMAL_FLOAT_TYPE_P (TREE_TYPE (e1.value))\n+\t      || !SCALAR_FLOAT_TYPE_P (TREE_TYPE (e2.value))\n+\t      || DECIMAL_FLOAT_TYPE_P (TREE_TYPE (e2.value)))\n+\t    {\n+\t      error_at (loc, \"%<__builtin_complex%> operand \"\n+\t\t\t\"not of real binary floating-point type\");\n+\t      expr.value = error_mark_node;\n+\t      break;\n+\t    }\n+\t  if (TYPE_MAIN_VARIANT (TREE_TYPE (e1.value))\n+\t      != TYPE_MAIN_VARIANT (TREE_TYPE (e2.value)))\n+\t    {\n+\t      error_at (loc,\n+\t\t\t\"%<__builtin_complex%> operands of different types\");\n+\t      expr.value = error_mark_node;\n+\t      break;\n+\t    }\n+\t  if (!flag_isoc99)\n+\t    pedwarn (loc, OPT_pedantic,\n+\t\t     \"ISO C90 does not support complex types\");\n+\t  expr.value = build2 (COMPLEX_EXPR,\n+\t\t\t       build_complex_type (TYPE_MAIN_VARIANT\n+\t\t\t\t\t\t   (TREE_TYPE (e1.value))),\n+\t\t\t       e1.value, e2.value);\n+\t  break;\n \tcase RID_AT_SELECTOR:\n \t  gcc_assert (c_dialect_objc ());\n \t  c_parser_consume_token (parser);"}, {"sha": "cf7fdbf70d736c4ff7fe0b7f2c8aa37a2c25e18f", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=d4a83c103c7a266631bc93abcfebc2451a8d5dcd", "patch": "@@ -7511,6 +7511,18 @@ future revisions.\n \n @end deftypefn\n \n+@deftypefn {Built-in Function} @var{type} __builtin_complex (@var{real}, @var{imag})\n+\n+The built-in function @code{__builtin_complex} is provided for use in\n+implementing the ISO C1X macros @code{CMPLXF}, @code{CMPLX} and\n+@code{CMPLXL}.  @var{real} and @var{imag} must have the same type, a\n+real binary floating-point type, and the result has the corresponding\n+complex type with real and imaginary parts @var{real} and @var{imag}.\n+Unlike @samp{@var{real} + I * @var{imag}}, this works even when\n+infinities, NaNs and negative zeros are involved.\n+\n+@end deftypefn\n+\n @deftypefn {Built-in Function} int __builtin_constant_p (@var{exp})\n You can use the built-in function @code{__builtin_constant_p} to\n determine if a value is known to be constant at compile-time and hence"}, {"sha": "50a971129a546d3907cfab0b329c0f0791d44818", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d4a83c103c7a266631bc93abcfebc2451a8d5dcd", "patch": "@@ -1,3 +1,9 @@\n+2011-08-19  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/builtin-complex-err-1.c, gcc.dg/builtin-complex-err-2.c,\n+\tgcc.dg/dfp/builtin-complex.c, gcc.dg/torture/builtin-complex-1.c:\n+\tNew tests.\n+\n 2011-08-19  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* gcc.target/arm/wmul-11.c: New file."}, {"sha": "b9dab838786f0dc5f2cab773f6a57efd75d5e2e7", "filename": "gcc/testsuite/gcc.dg/builtin-complex-err-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-complex-err-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-complex-err-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-complex-err-1.c?ref=d4a83c103c7a266631bc93abcfebc2451a8d5dcd", "patch": "@@ -0,0 +1,26 @@\n+/* Test __builtin_complex errors.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c1x -pedantic-errors\" } */\n+\n+typedef double D;\n+\n+double d;\n+\n+_Complex double dc = __builtin_complex (1.0, (D) 0.0);\n+\n+_Complex double dc2 = __builtin_complex (d, 0.0); /* { dg-error \"not constant\" } */\n+\n+_Complex float fc = __builtin_complex (1.0f, 1); /* { dg-error \"not of real binary floating-point type\" } */\n+\n+_Complex float fc2 = __builtin_complex (1, 1.0f); /* { dg-error \"not of real binary floating-point type\" } */\n+\n+_Complex float fc3 = __builtin_complex (1.0f, 1.0); /* { dg-error \"different types\" } */\n+\n+void\n+f (void)\n+{\n+  __builtin_complex (0.0); /* { dg-error \"expected\" } */\n+  __builtin_complex (0.0, 0.0, 0.0); /* { dg-error \"expected\" } */\n+}\n+\n+void (*p) (void) = __builtin_complex; /* { dg-error \"expected\" } */"}, {"sha": "c285b2a0aa31cba49416395568ec14cd0eb0e751", "filename": "gcc/testsuite/gcc.dg/builtin-complex-err-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-complex-err-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-complex-err-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-complex-err-2.c?ref=d4a83c103c7a266631bc93abcfebc2451a8d5dcd", "patch": "@@ -0,0 +1,10 @@\n+/* Test __builtin_complex errors.  Verify it does nto allow quiet\n+   creation of complex types in C90.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c90 -pedantic-errors\" } */\n+\n+void\n+f (void)\n+{\n+  __builtin_complex (0.0, 0.0); /* { dg-error \"ISO C90 does not support complex types\" } */\n+}"}, {"sha": "6bb2ec73846f504dac39755e135234c7b6b8aedf", "filename": "gcc/testsuite/gcc.dg/dfp/builtin-complex.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbuiltin-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbuiltin-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fbuiltin-complex.c?ref=d4a83c103c7a266631bc93abcfebc2451a8d5dcd", "patch": "@@ -0,0 +1,10 @@\n+/* Test __builtin_complex errors with DFP.  */\n+/* { dg-do compile } */\n+\n+_Decimal32 a, b;\n+\n+void\n+f (void)\n+{\n+  __builtin_complex (a, b); /* { dg-error \"not of real binary floating-point type\" } */\n+}"}, {"sha": "63df2d26305244ff91ee71f5a942a0353783786b", "filename": "gcc/testsuite/gcc.dg/torture/builtin-complex-1.c", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-complex-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4a83c103c7a266631bc93abcfebc2451a8d5dcd/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-complex-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-complex-1.c?ref=d4a83c103c7a266631bc93abcfebc2451a8d5dcd", "patch": "@@ -0,0 +1,117 @@\n+/* Test __builtin_complex semantics.  */\n+/* { dg-do run } */\n+/* { dg-options \"-std=c1x -pedantic-errors\" } */\n+\n+extern void exit (int);\n+extern void abort (void);\n+\n+#define COMPARE_BODY(A, B, TYPE, COPYSIGN)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    TYPE s1 = COPYSIGN ((TYPE) 1.0, A);\t\t\t\t\t\\\n+    TYPE s2 = COPYSIGN ((TYPE) 1.0, B);\t\t\t\t\t\\\n+    if (s1 != s2)\t\t\t\t\t\t\t\\\n+      abort ();\t\t\t\t\t\t\t\t\\\n+    if ((__builtin_isnan (A) != 0) != (__builtin_isnan (B) != 0))\t\\\n+      abort ();\t\t\t\t\t\t\t\t\\\n+    if ((A != B) != (__builtin_isnan (A) != 0))\t\t\t\t\\\n+      abort ();\t\t\t\t\t\t\t\t\\\n+  } while (0)\n+\n+void\n+comparef (float a, float b)\n+{\n+  COMPARE_BODY (a, b, float, __builtin_copysignf);\n+}\n+\n+void\n+compare (double a, double b)\n+{\n+  COMPARE_BODY (a, b, double, __builtin_copysign);\n+}\n+\n+void\n+comparel (long double a, long double b)\n+{\n+  COMPARE_BODY (a, b, long double, __builtin_copysignl);\n+}\n+\n+void\n+comparecf (_Complex float a, float r, float i)\n+{\n+  comparef (__real__ a, r);\n+  comparef (__imag__ a, i);\n+}\n+\n+void\n+comparec (_Complex double a, double r, double i)\n+{\n+  compare (__real__ a, r);\n+  compare (__imag__ a, i);\n+}\n+\n+void\n+comparecl (_Complex long double a, long double r, long double i)\n+{\n+  comparel (__real__ a, r);\n+  comparel (__imag__ a, i);\n+}\n+\n+#define VERIFY(A, B, TYPE, COMPARE)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    TYPE a = A;\t\t\t\t\t\t\\\n+    TYPE b = B;\t\t\t\t\t\t\\\n+    _Complex TYPE cr = __builtin_complex (a, b);\t\\\n+    static _Complex TYPE cs = __builtin_complex (A, B);\t\\\n+    COMPARE (cr, A, B);\t\t\t\t\t\\\n+    COMPARE (cs, A, B);\t\t\t\t\t\\\n+  } while (0)\n+\n+#define ALL_CHECKS(PZ, NZ, NAN, INF, TYPE, COMPARE)\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    VERIFY (PZ, PZ, TYPE, COMPARE);\t\t\t\\\n+    VERIFY (PZ, NZ, TYPE, COMPARE);\t\t\t\\\n+    VERIFY (PZ, NAN, TYPE, COMPARE);\t\t\t\\\n+    VERIFY (PZ, INF, TYPE, COMPARE);\t\t\t\\\n+    VERIFY (NZ, PZ, TYPE, COMPARE);\t\t\t\\\n+    VERIFY (NZ, NZ, TYPE, COMPARE);\t\t\t\\\n+    VERIFY (NZ, NAN, TYPE, COMPARE);\t\t\t\\\n+    VERIFY (NZ, INF, TYPE, COMPARE);\t\t\t\\\n+    VERIFY (NAN, PZ, TYPE, COMPARE);\t\t\t\\\n+    VERIFY (NAN, NZ, TYPE, COMPARE);\t\t\t\\\n+    VERIFY (NAN, NAN, TYPE, COMPARE);\t\t\t\\\n+    VERIFY (NAN, INF, TYPE, COMPARE);\t\t\t\\\n+    VERIFY (INF, PZ, TYPE, COMPARE);\t\t\t\\\n+    VERIFY (INF, NZ, TYPE, COMPARE);\t\t\t\\\n+    VERIFY (INF, NAN, TYPE, COMPARE);\t\t\t\\\n+    VERIFY (INF, INF, TYPE, COMPARE);\t\t\t\\\n+  } while (0)\n+\n+void\n+check_float (void)\n+{\n+  ALL_CHECKS (0.0f, -0.0f, __builtin_nanf(\"\"), __builtin_inff(),\n+\t      float, comparecf);\n+}\n+\n+void\n+check_double (void)\n+{\n+  ALL_CHECKS (0.0, -0.0, __builtin_nan(\"\"), __builtin_inf(),\n+\t      double, comparec);\n+}\n+\n+void\n+check_long_double (void)\n+{\n+  ALL_CHECKS (0.0l, -0.0l, __builtin_nanl(\"\"), __builtin_infl(),\n+\t      long double, comparecl);\n+}\n+\n+int\n+main (void)\n+{\n+  check_float ();\n+  check_double ();\n+  check_long_double ();\n+  exit (0);\n+}"}]}