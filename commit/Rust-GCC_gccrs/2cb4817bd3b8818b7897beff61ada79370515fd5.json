{"sha": "2cb4817bd3b8818b7897beff61ada79370515fd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNiNDgxN2JkM2I4ODE4Yjc4OTdiZWZmNjFhZGE3OTM3MDUxNWZkNQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2009-03-15T13:09:44Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2009-03-15T13:09:44Z"}, "message": "re PR target/34299 ([avr] ICE on function attribute syntax for main())\n\n\tPR target/34299\n\t* config/avr/avr.c (avr_handle_fndecl_attribute): Move code for\n\tgenerate a warning if the function name does not begin with\n\t\"__vector\" and the function has either the 'signal' or 'interrupt'\n\tattribute, from here to ...\n\t(avr_declare_function_name): ...here. New function.\n\t* config/avr/avr.h (ASM_DECLARE_FUNCTION_NAME): Redefine.\n\t* config/avr/avr-protos.h (avr_declare_function_name): Declare.\n\nFrom-SVN: r144870", "tree": {"sha": "365229bb370e295b089f83525fc4b9d1fd472c32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/365229bb370e295b089f83525fc4b9d1fd472c32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cb4817bd3b8818b7897beff61ada79370515fd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cb4817bd3b8818b7897beff61ada79370515fd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cb4817bd3b8818b7897beff61ada79370515fd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cb4817bd3b8818b7897beff61ada79370515fd5/comments", "author": null, "committer": null, "parents": [{"sha": "58366b08d75c36e76695b8dedda3aecb38e4dc51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58366b08d75c36e76695b8dedda3aecb38e4dc51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58366b08d75c36e76695b8dedda3aecb38e4dc51"}], "stats": {"total": 78, "additions": 47, "deletions": 31}, "files": [{"sha": "f8a23581a9addac854cbd1aed5b9a73d94361159", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb4817bd3b8818b7897beff61ada79370515fd5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb4817bd3b8818b7897beff61ada79370515fd5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2cb4817bd3b8818b7897beff61ada79370515fd5", "patch": "@@ -1,3 +1,14 @@\n+2009-03-14  Anatoly Sokolov  <aesok@post.ru>\n+\n+\tPR target/34299\n+\t* config/avr/avr.c (avr_handle_fndecl_attribute): Move code for\n+\tgenerate a warning if the function name does not begin with\n+\t\"__vector\" and the function has either the 'signal' or 'interrupt'\n+\tattribute, from here to ...\n+\t(avr_declare_function_name): ...here. New function.\n+\t* config/avr/avr.h (ASM_DECLARE_FUNCTION_NAME): Redefine.\n+\t* config/avr/avr-protos.h (avr_declare_function_name): Declare.\n+\n 2009-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/39454"}, {"sha": "2df4a16d1cf9deaf7d884d0ada6788c45a5c89ee", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb4817bd3b8818b7897beff61ada79370515fd5/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb4817bd3b8818b7897beff61ada79370515fd5/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=2cb4817bd3b8818b7897beff61ada79370515fd5", "patch": "@@ -1,6 +1,6 @@\n /* Prototypes for exported functions defined in avr.c\n    \n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006, 2007, 2008\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2006, 2007, 2008, 2009\n    Free Software Foundation, Inc.\n    Contributed by Denis Chertykov (denisc@overta.ru)\n \n@@ -32,6 +32,7 @@ extern enum reg_class avr_regno_reg_class (int r);\n extern enum reg_class avr_reg_class_from_letter (int c);\n extern int frame_pointer_required_p (void);\n extern void asm_globalize_label (FILE *file, const char *name);\n+extern void avr_asm_declare_function_name (FILE *, const char *, tree);\n extern void order_regs_for_local_alloc (void);\n extern int initial_elimination_offset (int from, int to);\n extern int avr_simple_epilogue (void);"}, {"sha": "08aace66ddad5f83dadde18718d475f2f48c71ce", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 33, "deletions": 26, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb4817bd3b8818b7897beff61ada79370515fd5/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb4817bd3b8818b7897beff61ada79370515fd5/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=2cb4817bd3b8818b7897beff61ada79370515fd5", "patch": "@@ -4595,6 +4595,39 @@ avr_assemble_integer (rtx x, unsigned int size, int aligned_p)\n   return default_assemble_integer (x, size, aligned_p);\n }\n \n+/* Worker function for ASM_DECLARE_FUNCTION_NAME.  */\n+\n+void\n+avr_asm_declare_function_name (FILE *file, const char *name, tree decl)\n+{\n+\n+  /* If the function has the 'signal' or 'interrupt' attribute, test to\n+     make sure that the name of the function is \"__vector_NN\" so as to\n+     catch when the user misspells the interrupt vector name.  */\n+\n+  if (cfun->machine->is_interrupt)\n+    {\n+      if (strncmp (name, \"__vector\", strlen (\"__vector\")) != 0)\n+        {\n+          warning_at (DECL_SOURCE_LOCATION (decl), 0,\n+                      \"%qs appears to be a misspelled interrupt handler\",\n+                      name);\n+        }\n+    }\n+  else if (cfun->machine->is_signal)\n+    {\n+      if (strncmp (name, \"__vector\", strlen (\"__vector\")) != 0)\n+        {\n+           warning_at (DECL_SOURCE_LOCATION (decl), 0,\n+                       \"%qs appears to be a misspelled signal handler\",\n+                       name);\n+        }\n+    }\n+\n+  ASM_OUTPUT_TYPE_DIRECTIVE (file, name, \"function\");\n+  ASM_OUTPUT_LABEL (file, name);\n+}\n+\n /* The routine used to output NUL terminated strings.  We use a special\n    version of this for most svr4 targets because doing so makes the\n    generated assembly code more compact (and thus faster to assemble)\n@@ -4779,32 +4812,6 @@ avr_handle_fndecl_attribute (tree *node, tree name,\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n-  else\n-    {\n-      const char *func_name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (*node));\n-      const char *attr = IDENTIFIER_POINTER (name);\n-\n-      /* If the function has the 'signal' or 'interrupt' attribute, test to\n-         make sure that the name of the function is \"__vector_NN\" so as to\n-         catch when the user misspells the interrupt vector name.  */\n-\n-      if (strncmp (attr, \"interrupt\", strlen (\"interrupt\")) == 0)\n-        {\n-          if (strncmp (func_name, \"__vector\", strlen (\"__vector\")) != 0)\n-            {\n-              warning (0, \"%qs appears to be a misspelled interrupt handler\",\n-                       func_name);\n-            }\n-        }\n-      else if (strncmp (attr, \"signal\", strlen (\"signal\")) == 0)\n-        {\n-          if (strncmp (func_name, \"__vector\", strlen (\"__vector\")) != 0)\n-            {\n-              warning (0, \"%qs appears to be a misspelled signal handler\",\n-                       func_name);\n-            }\n-        }\n-    }\n \n   return NULL_TREE;\n }"}, {"sha": "c41ac0b930d1acb002e62655eea4bd40d997aa12", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb4817bd3b8818b7897beff61ada79370515fd5/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb4817bd3b8818b7897beff61ada79370515fd5/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=2cb4817bd3b8818b7897beff61ada79370515fd5", "patch": "@@ -590,10 +590,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    specific tm.h file (depending upon the particulars of your assembler).  */\n \n #define ASM_DECLARE_FUNCTION_NAME(FILE, NAME, DECL)\t\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-     ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"function\");\t\\\n-     ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\\\n-} while (0)\n+avr_asm_declare_function_name ((FILE), (NAME), (DECL))\n \n #define ASM_DECLARE_FUNCTION_SIZE(FILE, FNAME, DECL)\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\"}]}