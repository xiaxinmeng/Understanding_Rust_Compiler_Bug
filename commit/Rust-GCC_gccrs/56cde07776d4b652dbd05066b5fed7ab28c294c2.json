{"sha": "56cde07776d4b652dbd05066b5fed7ab28c294c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZjZGUwNzc3NmQ0YjY1MmRiZDA1MDY2YjVmZWQ3YWIyOGMyOTRjMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-02-26T19:54:33Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-02-26T19:54:33Z"}, "message": "re PR c++/69958 (sizeof... computes wrong size)\n\n\tPR c++/69958\n\t* pt.c (make_argument_pack): New.\n\t(tsubst_copy) [SIZEOF_EXPR]: Handle partial expansion.\n\t(tsubst_copy_and_build): Likewise.\n\nFrom-SVN: r233758", "tree": {"sha": "90c3696d72c4caa343b19adf28bcdfc121eee738", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90c3696d72c4caa343b19adf28bcdfc121eee738"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56cde07776d4b652dbd05066b5fed7ab28c294c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56cde07776d4b652dbd05066b5fed7ab28c294c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56cde07776d4b652dbd05066b5fed7ab28c294c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56cde07776d4b652dbd05066b5fed7ab28c294c2/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "622174b20dfaa584abcf950c89aaa1843b146669", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/622174b20dfaa584abcf950c89aaa1843b146669", "html_url": "https://github.com/Rust-GCC/gccrs/commit/622174b20dfaa584abcf950c89aaa1843b146669"}], "stats": {"total": 116, "additions": 108, "deletions": 8}, "files": [{"sha": "ec991201009f365a2bd89eaf49c64c020a428dd8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56cde07776d4b652dbd05066b5fed7ab28c294c2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56cde07776d4b652dbd05066b5fed7ab28c294c2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=56cde07776d4b652dbd05066b5fed7ab28c294c2", "patch": "@@ -1,3 +1,10 @@\n+2016-02-26  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/69958\n+\t* pt.c (make_argument_pack): New.\n+\t(tsubst_copy) [SIZEOF_EXPR]: Handle partial expansion.\n+\t(tsubst_copy_and_build): Likewise.\n+\n 2016-02-25  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/69889"}, {"sha": "b5855a8d13ccf5e503ecf5c98a2f49907b1e62d3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56cde07776d4b652dbd05066b5fed7ab28c294c2/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56cde07776d4b652dbd05066b5fed7ab28c294c2/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=56cde07776d4b652dbd05066b5fed7ab28c294c2", "patch": "@@ -11117,6 +11117,25 @@ get_pattern_parm (tree parm, tree tmpl)\n   return patparm;\n }\n \n+/* Make an argument pack out of the TREE_VEC VEC.  */\n+\n+static tree\n+make_argument_pack (tree vec)\n+{\n+  tree pack;\n+  tree elt = TREE_VEC_ELT (vec, 0);\n+  if (TYPE_P (elt))\n+    pack = cxx_make_type (TYPE_ARGUMENT_PACK);\n+  else\n+    {\n+      pack = make_node (NONTYPE_ARGUMENT_PACK);\n+      TREE_TYPE (pack) = TREE_TYPE (elt);\n+      TREE_CONSTANT (pack) = 1;\n+    }\n+  SET_ARGUMENT_PACK_ARGS (pack, vec);\n+  return pack;\n+}\n+\n /* Substitute ARGS into the vector or list of template arguments T.  */\n \n static tree\n@@ -14066,7 +14085,8 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       }\n \n     case SIZEOF_EXPR:\n-      if (PACK_EXPANSION_P (TREE_OPERAND (t, 0)))\n+      if (PACK_EXPANSION_P (TREE_OPERAND (t, 0))\n+\t  || ARGUMENT_PACK_P (TREE_OPERAND (t, 0)))\n         {\n           tree expanded, op = TREE_OPERAND (t, 0);\n \t  int len = 0;\n@@ -14077,7 +14097,11 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  ++cp_unevaluated_operand;\n \t  ++c_inhibit_evaluation_warnings;\n \t  /* We only want to compute the number of arguments.  */\n-\t  expanded = tsubst_pack_expansion (op, args, complain, in_decl);\n+\t  if (PACK_EXPANSION_P (op))\n+\t    expanded = tsubst_pack_expansion (op, args, complain, in_decl);\n+\t  else\n+\t    expanded = tsubst_template_args (ARGUMENT_PACK_ARGS (op),\n+\t\t\t\t\t     args, complain, in_decl);\n \t  --cp_unevaluated_operand;\n \t  --c_inhibit_evaluation_warnings;\n \n@@ -14093,13 +14117,15 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t    return error_mark_node;\n \t  else if (PACK_EXPANSION_P (expanded)\n \t\t   || (TREE_CODE (expanded) == TREE_VEC\n-\t\t       && len > 0\n-\t\t       && PACK_EXPANSION_P (TREE_VEC_ELT (expanded, len-1))))\n+\t\t       && pack_expansion_args_count (expanded)))\n+\n \t    {\n-\t      if (TREE_CODE (expanded) == TREE_VEC)\n-\t\texpanded = TREE_VEC_ELT (expanded, len - 1);\n+\t      if (PACK_EXPANSION_P (expanded))\n+\t\t/* OK.  */;\n+\t      else if (TREE_VEC_LENGTH (expanded) == 1)\n+\t\texpanded = TREE_VEC_ELT (expanded, 0);\n \t      else\n-\t\tPACK_EXPANSION_SIZEOF_P (expanded) = true;\n+\t\texpanded = make_argument_pack (expanded);\n \n \t      if (TYPE_P (expanded))\n \t\treturn cxx_sizeof_or_alignof_type (expanded, SIZEOF_EXPR, \n@@ -16162,7 +16188,8 @@ tsubst_copy_and_build (tree t,\n \t\t\t\t\t  length, stride, TREE_TYPE (op1)));\n       }\n     case SIZEOF_EXPR:\n-      if (PACK_EXPANSION_P (TREE_OPERAND (t, 0)))\n+      if (PACK_EXPANSION_P (TREE_OPERAND (t, 0))\n+\t  || ARGUMENT_PACK_P (TREE_OPERAND (t, 0)))\n \tRETURN (tsubst_copy (t, args, complain, in_decl));\n       /* Fall through */\n       "}, {"sha": "1187429650c8989da3b2d3568dde394c63e02c76", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-sizeof4.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56cde07776d4b652dbd05066b5fed7ab28c294c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-sizeof4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56cde07776d4b652dbd05066b5fed7ab28c294c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-sizeof4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-sizeof4.C?ref=56cde07776d4b652dbd05066b5fed7ab28c294c2", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/69958\n+// { dg-do compile { target c++11 } }\n+\n+typedef decltype(sizeof(int)) size_t;\n+\n+template <typename...Ts>\n+struct list { };\n+\n+template <size_t N>\n+struct size {  };\n+\n+template <typename...Ts>\n+using size_for = size<sizeof...(Ts)>;\n+\n+template<class T, class U> struct assert_same;\n+template<class T> struct assert_same<T,T> {};\n+\n+template <typename T, typename...Ts>\n+using wrapped = list<T, size_for<T, Ts...>>;\n+\n+// This assertion fails (produces size<4>)\n+assert_same<\n+    list<float, size<5>>,\n+    wrapped<float, int, double, char, unsigned>> a3;\n+\n+\n+template <typename T, typename...Ts>\n+using wrapped2 = list<T, size_for<Ts..., T>>;\n+\n+// This assertion fails (produces size<2>)\n+assert_same<\n+    list<float, size<5>>,\n+    wrapped2<float, int, double, char, unsigned>> a4;"}, {"sha": "0e8096de2fcb020c8586f0d5b22a56765a5d7b74", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-sizeof4a.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56cde07776d4b652dbd05066b5fed7ab28c294c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-sizeof4a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56cde07776d4b652dbd05066b5fed7ab28c294c2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-sizeof4a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-sizeof4a.C?ref=56cde07776d4b652dbd05066b5fed7ab28c294c2", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/69958\n+// { dg-do compile { target c++11 } }\n+\n+typedef decltype(sizeof(int)) size_t;\n+\n+template <typename...Ts>\n+struct list { };\n+\n+template <size_t N>\n+struct size {  };\n+\n+template <unsigned...Ts>\n+using size_for = size<sizeof...(Ts)>;\n+\n+template<class T, class U> struct assert_same;\n+template<class T> struct assert_same<T,T> {};\n+\n+template <typename T, unsigned...Ts>\n+using wrapped = list<T, size_for<0, Ts...>>;\n+\n+// This assertion fails (produces size<4>)\n+assert_same<\n+    list<float, size<5>>,\n+  wrapped<float,2,3,4,5>> a3;\n+\n+\n+template <typename T, unsigned...Ts>\n+using wrapped2 = list<T, size_for<Ts..., 0>>;\n+\n+// This assertion fails (produces size<2>)\n+assert_same<\n+    list<float, size<5>>,\n+  wrapped2<float,2,3,4,5>> a4;"}]}