{"sha": "3eb1eda1c8a9e77cdea79e796a331f265b83e2df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ViMWVkYTFjOGE5ZTc3Y2RlYTc5ZTc5NmEzMzFmMjY1YjgzZTJkZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-08-23T10:51:52Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-08-23T10:51:52Z"}, "message": "Fix testsuite failures for __gnu_debug::string with old ABI\n\nThe __gnu_debug string (mostly) implements the C++11 API, but when it\nwraps the old COW string many of the member functions in the base class\nhave the wrong parameter types or return types. This makes the\n__gnu_debug::string type adapt itself to the base class API. This\nactually makes the debug string slightly more conforming than the\nunderlying string type when using the old ABI.\n\n\t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI]\n\t(basic_string::__const_iterator): Change access to protected.\n\t[!_GLIBCXX_USE_CXX11_ABI] (basic_string::__const_iterator): Define\n\tas typedef for iterator.\n\t* include/debug/string (__const_iterator): Use typedef from base.\n\t(insert(const_iterator, _CharT))\n\t(replace(const_iterator, const_iterator, const basic_string&))\n\t(replace(const_iterator, const_iterator, const _CharT*, size_type))\n\t(replace(const_iterator, const_iterator, const CharT*))\n\t(replace(const_iterator, const_iterator, size_type, _CharT))\n\t(replace(const_iterator, const_iterator, _InputIter, _InputIter))\n\t(replace(const_iterator, const_iterator, initializer_list<_CharT>)):\n\tChange const_iterator parameters to __const_iterator.\n\t(insert(iterator, size_type, _CharT)): Add C++98 overload.\n\t(insert(const_iterator, _InputIterator, _InputIterator)): Change\n\tconst_iterator parameter to __const_iterator.\n\t[!_GLIBCXX_USE_CXX11_ABI]: Add workaround for incorrect return type\n\tof base's member function.\n\t(insert(const_iterator, size_type, _CharT)) [!_GLIBCXX_USE_CXX11_ABI]:\n\tLikewise.\n\t(insert(const_iterator, initializer_list<_CharT>))\n\t[!_GLIBCXX_USE_CXX11_ABI]: Likewise.\n\t* testsuite/21_strings/basic_string/init-list.cc: Remove effective\n\ttarget directive.\n\nFrom-SVN: r263808", "tree": {"sha": "beb0ffd40e97fd63602b230696bd34a317f99c1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beb0ffd40e97fd63602b230696bd34a317f99c1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3eb1eda1c8a9e77cdea79e796a331f265b83e2df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eb1eda1c8a9e77cdea79e796a331f265b83e2df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eb1eda1c8a9e77cdea79e796a331f265b83e2df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eb1eda1c8a9e77cdea79e796a331f265b83e2df/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "832c74d935917263bb7f9852230bb39fd47584cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/832c74d935917263bb7f9852230bb39fd47584cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/832c74d935917263bb7f9852230bb39fd47584cc"}], "stats": {"total": 88, "additions": 77, "deletions": 11}, "files": [{"sha": "54b8a2f17826ed4530d569185891071c07549786", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb1eda1c8a9e77cdea79e796a331f265b83e2df/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb1eda1c8a9e77cdea79e796a331f265b83e2df/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3eb1eda1c8a9e77cdea79e796a331f265b83e2df", "patch": "@@ -1,5 +1,30 @@\n 2018-08-23  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/basic_string.h [_GLIBCXX_USE_CXX11_ABI]\n+\t(basic_string::__const_iterator): Change access to protected.\n+\t[!_GLIBCXX_USE_CXX11_ABI] (basic_string::__const_iterator): Define\n+\tas typedef for iterator.\n+\t* include/debug/string (__const_iterator): Use typedef from base.\n+\t(insert(const_iterator, _CharT))\n+\t(replace(const_iterator, const_iterator, const basic_string&))\n+\t(replace(const_iterator, const_iterator, const _CharT*, size_type))\n+\t(replace(const_iterator, const_iterator, const CharT*))\n+\t(replace(const_iterator, const_iterator, size_type, _CharT))\n+\t(replace(const_iterator, const_iterator, _InputIter, _InputIter))\n+\t(replace(const_iterator, const_iterator, initializer_list<_CharT>)):\n+\tChange const_iterator parameters to __const_iterator.\n+\t(insert(iterator, size_type, _CharT)): Add C++98 overload.\n+\t(insert(const_iterator, _InputIterator, _InputIterator)): Change\n+\tconst_iterator parameter to __const_iterator.\n+\t[!_GLIBCXX_USE_CXX11_ABI]: Add workaround for incorrect return type\n+\tof base's member function.\n+\t(insert(const_iterator, size_type, _CharT)) [!_GLIBCXX_USE_CXX11_ABI]:\n+\tLikewise.\n+\t(insert(const_iterator, initializer_list<_CharT>))\n+\t[!_GLIBCXX_USE_CXX11_ABI]: Likewise.\n+\t* testsuite/21_strings/basic_string/init-list.cc: Remove effective\n+\ttarget directive.\n+\n \t* testsuite/20_util/reference_wrapper/lwg2993.cc: Fix C++11 test to\n \tnot use C++14 feature.\n \t* testsuite/23_containers/list/68222_neg.cc: Likewise."}, {"sha": "ba94b51f616aad1446b83354b5c02352553dcde5", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb1eda1c8a9e77cdea79e796a331f265b83e2df/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb1eda1c8a9e77cdea79e796a331f265b83e2df/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=3eb1eda1c8a9e77cdea79e796a331f265b83e2df", "patch": "@@ -100,14 +100,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       ///  Value returned by various member functions when they fail.\n       static const size_type\tnpos = static_cast<size_type>(-1);\n \n-    private:\n+    protected:\n       // type used for positions in insert, erase etc.\n #if __cplusplus < 201103L\n       typedef iterator __const_iterator;\n #else\n       typedef const_iterator __const_iterator;\n #endif\n \n+    private:\n #if __cplusplus > 201402L\n       // A helper type for avoiding boiler-plate.\n       typedef basic_string_view<_CharT, _Traits> __sv_type;\n@@ -3119,6 +3120,10 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       typedef std::reverse_iterator<const_iterator>\tconst_reverse_iterator;\n       typedef std::reverse_iterator<iterator>\t\t    reverse_iterator;\n \n+    protected:\n+      // type used for positions in insert, erase etc.\n+      typedef iterator __const_iterator;\n+\n     private:\n       // _Rep: string representation\n       //   Invariants:"}, {"sha": "d330bfd5a3fa9af676af07874049676e51c166b7", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 46, "deletions": 9, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb1eda1c8a9e77cdea79e796a331f265b83e2df/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb1eda1c8a9e77cdea79e796a331f265b83e2df/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=3eb1eda1c8a9e77cdea79e796a331f265b83e2df", "patch": "@@ -97,6 +97,10 @@ namespace __gnu_debug\n       template<typename _ItT, typename _SeqT, typename _CatT>\n \tfriend class ::__gnu_debug::_Safe_iterator;\n \n+      // type used for positions in insert, erase etc.\n+      typedef __gnu_debug::_Safe_iterator<\n+\ttypename _Base::__const_iterator, basic_string> __const_iterator;\n+\n     public:\n       // types:\n       typedef _Traits\t\t\t\t\ttraits_type;\n@@ -589,37 +593,59 @@ namespace __gnu_debug\n       }\n \n       iterator\n-      insert(const_iterator __p, _CharT __c)\n+      insert(__const_iterator __p, _CharT __c)\n       {\n \t__glibcxx_check_insert(__p);\n \ttypename _Base::iterator __res = _Base::insert(__p.base(), __c);\n \tthis->_M_invalidate_all();\n \treturn iterator(__res, this);\n       }\n \n+#if __cplusplus >= 201103L\n       iterator\n       insert(const_iterator __p, size_type __n, _CharT __c)\n       {\n \t__glibcxx_check_insert(__p);\n+#if _GLIBCXX_USE_CXX11_ABI\n \ttypename _Base::iterator __res = _Base::insert(__p.base(), __n, __c);\n+#else\n+\tconst size_type __offset = __p.base() - _Base::cbegin();\n+\t_Base::insert(_Base::begin() + __offset, __n, __c);\n+\ttypename _Base::iterator __res = _Base::begin() + __offset;\n+#endif\n \tthis->_M_invalidate_all();\n \treturn iterator(__res, this);\n       }\n+#else\n+      void\n+      insert(iterator __p, size_type __n, _CharT __c)\n+      {\n+\t__glibcxx_check_insert(__p);\n+\t_Base::insert(__p.base(), __n, __c);\n+\tthis->_M_invalidate_all();\n+      }\n+#endif\n \n       template<typename _InputIterator>\n \titerator\n-\tinsert(const_iterator __p,\n+\tinsert(__const_iterator __p,\n \t       _InputIterator __first, _InputIterator __last)\n \t{\n \t  typename __gnu_debug::_Distance_traits<_InputIterator>::__type __dist;\n \t  __glibcxx_check_insert_range(__p, __first, __last, __dist);\n \n \t  typename _Base::iterator __res;\n+#if _GLIBCXX_USE_CXX11_ABI\n \t  if (__dist.second >= __dp_sign)\n \t    __res = _Base::insert(__p.base(), __gnu_debug::__unsafe(__first),\n \t\t\t\t  __gnu_debug::__unsafe(__last));\n \t  else\n \t    __res = _Base::insert(__p.base(), __first, __last);\n+#else\n+\t  const size_type __offset = __p.base() - _Base::cbegin();\n+\t  _Base::insert(__p.base(), __first, __last);\n+\t  __res = _Base::begin() + __offset;\n+#endif\n \t  this->_M_invalidate_all();\n \t  return iterator(__res, this);\n \t}\n@@ -629,7 +655,13 @@ namespace __gnu_debug\n       insert(const_iterator __p, std::initializer_list<_CharT> __l)\n       {\n \t__glibcxx_check_insert(__p);\n+#if _GLIBCXX_USE_CXX11_ABI\n \tconst auto __res = _Base::insert(__p.base(), __l);\n+#else\n+\tconst size_type __offset = __p.base() - _Base::cbegin();\n+\t_Base::insert(_Base::begin() + __offset, __l);\n+\tauto __res = _Base::begin() + __offset;\n+#endif\n \tthis->_M_invalidate_all();\n \treturn iterator(__res, this);\n       }\n@@ -719,7 +751,8 @@ namespace __gnu_debug\n       }\n \n       basic_string&\n-      replace(iterator __i1, iterator __i2, const basic_string& __str)\n+      replace(__const_iterator __i1, __const_iterator __i2,\n+\t      const basic_string& __str)\n       {\n \t__glibcxx_check_erase_range(__i1, __i2);\n \t_Base::replace(__i1.base(), __i2.base(), __str);\n@@ -728,7 +761,8 @@ namespace __gnu_debug\n       }\n \n       basic_string&\n-      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)\n+      replace(__const_iterator __i1, __const_iterator __i2,\n+\t      const _CharT* __s, size_type __n)\n       {\n \t__glibcxx_check_erase_range(__i1, __i2);\n \t__glibcxx_check_string_len(__s, __n);\n@@ -738,7 +772,8 @@ namespace __gnu_debug\n       }\n \n       basic_string&\n-      replace(iterator __i1, iterator __i2, const _CharT* __s)\n+      replace(__const_iterator __i1, __const_iterator __i2,\n+\t      const _CharT* __s)\n       {\n \t__glibcxx_check_erase_range(__i1, __i2);\n \t__glibcxx_check_string(__s);\n@@ -748,7 +783,8 @@ namespace __gnu_debug\n       }\n \n       basic_string&\n-      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)\n+      replace(__const_iterator __i1, __const_iterator __i2,\n+\t      size_type __n, _CharT __c)\n       {\n \t__glibcxx_check_erase_range(__i1, __i2);\n \t_Base::replace(__i1.base(), __i2.base(), __n, __c);\n@@ -758,7 +794,7 @@ namespace __gnu_debug\n \n       template<typename _InputIterator>\n \tbasic_string&\n-\treplace(iterator __i1, iterator __i2,\n+\treplace(__const_iterator __i1, __const_iterator __i2,\n \t\t_InputIterator __j1, _InputIterator __j2)\n \t{\n \t  __glibcxx_check_erase_range(__i1, __i2);\n@@ -778,8 +814,9 @@ namespace __gnu_debug\n \t}\n \n #if __cplusplus >= 201103L\n-      basic_string& replace(iterator __i1, iterator __i2,\n-\t\t\t    std::initializer_list<_CharT> __l)\n+      basic_string&\n+      replace(__const_iterator __i1, __const_iterator __i2,\n+\t      std::initializer_list<_CharT> __l)\n       {\n \t__glibcxx_check_erase_range(__i1, __i2);\n \t_Base::replace(__i1.base(), __i2.base(), __l);"}, {"sha": "aa7754821b9f127a8d3f9f28c1a124d5e65dfe1d", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/init-list.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb1eda1c8a9e77cdea79e796a331f265b83e2df/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finit-list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb1eda1c8a9e77cdea79e796a331f265b83e2df/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finit-list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finit-list.cc?ref=3eb1eda1c8a9e77cdea79e796a331f265b83e2df", "patch": "@@ -17,7 +17,6 @@\n //\n \n // { dg-do run { target c++11 } }\n-// { dg-require-effective-target cxx11-abi }\n \n #include <testsuite_hooks.h>\n "}]}