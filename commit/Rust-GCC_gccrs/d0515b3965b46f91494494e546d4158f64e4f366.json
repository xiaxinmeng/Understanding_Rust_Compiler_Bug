{"sha": "d0515b3965b46f91494494e546d4158f64e4f366", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA1MTViMzk2NWI0NmY5MTQ5NDQ5NGU1NDZkNDE1OGY2NGU0ZjM2Ng==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-08-23T02:08:36Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-08-23T02:08:36Z"}, "message": "rs6000.md (eq<mode>): Use output operand instead of scratch intermediates.\n\n        * config/rs6000/rs6000.md (eq<mode>): Use output operand instead\n        of scratch intermediates.\n        (eq<mode>_compare): Same.\n        (neg_eq0<mode>): New.\n        (neg_eq<mode>): Convert to define_insn_and_split.\n\nFrom-SVN: r103379", "tree": {"sha": "e847709d61d71b14b297b21744d4a92d2010c467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e847709d61d71b14b297b21744d4a92d2010c467"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0515b3965b46f91494494e546d4158f64e4f366", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0515b3965b46f91494494e546d4158f64e4f366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0515b3965b46f91494494e546d4158f64e4f366", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0515b3965b46f91494494e546d4158f64e4f366/comments", "author": null, "committer": null, "parents": [{"sha": "6bd2fcdadc5d965347e2afa6b0b4ff982e295d5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bd2fcdadc5d965347e2afa6b0b4ff982e295d5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bd2fcdadc5d965347e2afa6b0b4ff982e295d5f"}], "stats": {"total": 103, "additions": 68, "deletions": 35}, "files": [{"sha": "b50c9f63a2619689115204dbfbb378cd7abe9c02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0515b3965b46f91494494e546d4158f64e4f366/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0515b3965b46f91494494e546d4158f64e4f366/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0515b3965b46f91494494e546d4158f64e4f366", "patch": "@@ -1,3 +1,11 @@\n+2005-08-23  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.md (eq<mode>): Use output operand instead\n+\tof scratch intermediates.\n+\t(eq<mode>_compare): Same.\n+\t(neg_eq0<mode>): New.\n+\t(neg_eq<mode>): Convert to define_insn_and_split.\n+\n 2005-08-23  Alan Modra  <amodra@bigpond.net.au>\n \n \tPR target/23070"}, {"sha": "d18b1248b1cf7e3ec0be5749cad07028e4ad492c", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 60, "deletions": 35, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0515b3965b46f91494494e546d4158f64e4f366/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0515b3965b46f91494494e546d4158f64e4f366/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=d0515b3965b46f91494494e546d4158f64e4f366", "patch": "@@ -11121,58 +11121,60 @@\n (define_insn_and_split \"*eq<mode>\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n \t(eq:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n-\t\t(match_operand:GPR 2 \"scc_eq_operand\" \"<scc_eq_op2>\")))\n-   (clobber (match_scratch:GPR 3 \"=r\"))\n-   (clobber (match_scratch:GPR 4 \"=r\"))]\n+\t\t(match_operand:GPR 2 \"scc_eq_operand\" \"<scc_eq_op2>\")))]\n   \"\"\n   \"#\"\n-  \"reload_completed\"\n-  [(set (match_dup 3)\n-\t(clz:GPR (match_dup 4)))\n+  \"\"\n+  [(set (match_dup 0)\n+\t(clz:GPR (match_dup 3)))\n    (set (match_dup 0)\n-\t(lshiftrt:GPR (match_dup 3) (match_dup 5)))]\n+\t(lshiftrt:GPR (match_dup 0) (match_dup 4)))]\n   {\n     if (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != 0)\n       {\n+\t/* Use output operand as intermediate.  */\n+\toperands[3] = operands[0];\n+\n \tif (logical_operand (operands[2], <MODE>mode))\n-\t  emit_insn (gen_rtx_SET (VOIDmode, operands[4],\n+\t  emit_insn (gen_rtx_SET (VOIDmode, operands[3],\n \t\t\t\t  gen_rtx_XOR (<MODE>mode,\n \t\t\t\t\t       operands[1], operands[2])));\n \telse\n-\t  emit_insn (gen_rtx_SET (VOIDmode, operands[4],\n+\t  emit_insn (gen_rtx_SET (VOIDmode, operands[3],\n \t\t\t\t  gen_rtx_PLUS (<MODE>mode, operands[1],\n \t\t\t\t\t\tnegate_rtx (<MODE>mode,\n \t\t\t\t\t\t\t    operands[2]))));\n       }\n     else\n-      operands[4] = operands[1];\n+      operands[3] = operands[1];\n \n-    operands[5] = GEN_INT (exact_log2 (GET_MODE_BITSIZE (<MODE>mode)));\n+    operands[4] = GEN_INT (exact_log2 (GET_MODE_BITSIZE (<MODE>mode)));\n   })\n \n (define_insn_and_split \"*eq<mode>_compare\"\n-  [(set (match_operand:CC 5 \"cc_reg_operand\" \"=y\")\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=y\")\n \t(compare:CC\n \t (eq:P (match_operand:P 1 \"gpc_reg_operand\" \"=r\")\n \t       (match_operand:P 2 \"scc_eq_operand\" \"<scc_eq_op2>\"))\n \t (const_int 0)))\n    (set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n-\t(eq:P (match_dup 1) (match_dup 2)))\n-   (clobber (match_scratch:P 3 \"=r\"))\n-   (clobber (match_scratch:P 4 \"=r\"))]\n+\t(eq:P (match_dup 1) (match_dup 2)))]\n   \"\"\n   \"#\"\n-  \"reload_completed\"\n-  [(set (match_dup 3)\n+  \"\"\n+  [(set (match_dup 0)\n \t(clz:P (match_dup 4)))\n-   (parallel [(set (match_dup 5)\n-\t\t   (compare:CC (lshiftrt:P (match_dup 3) (match_dup 6))\n+   (parallel [(set (match_dup 3)\n+\t\t   (compare:CC (lshiftrt:P (match_dup 0) (match_dup 5))\n \t\t\t       (const_int 0)))\n \t      (set (match_dup 0)\n-\t\t   (lshiftrt:P (match_dup 3) (match_dup 6)))])]\n+\t\t   (lshiftrt:P (match_dup 0) (match_dup 5)))])]\n   {\n     if (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != 0)\n       {\n+\t/* Use output operand as intermediate.  */\n+\toperands[4] = operands[0];\n+\n \tif (logical_operand (operands[2], <MODE>mode))\n \t  emit_insn (gen_rtx_SET (VOIDmode, operands[4],\n \t\t\t\t  gen_rtx_XOR (<MODE>mode,\n@@ -11186,7 +11188,7 @@\n     else\n       operands[4] = operands[1];\n \n-    operands[6] = GEN_INT (exact_log2 (GET_MODE_BITSIZE (<MODE>mode)));\n+    operands[5] = GEN_INT (exact_log2 (GET_MODE_BITSIZE (<MODE>mode)));\n   })\n \n ;; We have insns of the form shown by the first define_insn below.  If\n@@ -11305,19 +11307,42 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r\")\n-\t(neg:SI (eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n-\t\t       (match_operand:SI 2 \"scc_eq_operand\" \"r,O,K,L,I\"))))]\n-  \"TARGET_32BIT\"\n-  \"@\n-   xor %0,%1,%2\\;{ai|addic} %0,%0,-1\\;{sfe|subfe} %0,%0,%0\n-   {ai|addic} %0,%1,-1\\;{sfe|subfe} %0,%0,%0\n-   {xoril|xori} %0,%1,%b2\\;{ai|addic} %0,%0,-1\\;{sfe|subfe} %0,%0,%0\n-   {xoriu|xoris} %0,%1,%u2\\;{ai|addic} %0,%0,-1\\;{sfe|subfe} %0,%0,%0\n-   {sfi|subfic} %0,%1,%2\\;{ai|addic} %0,%0,-1\\;{sfe|subfe} %0,%0,%0\"\n-   [(set_attr \"type\" \"three,two,three,three,three\")\n-    (set_attr \"length\" \"12,8,12,12,12\")])\n+(define_insn \"*neg_eq0<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(neg:P (eq:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n+\t\t     (const_int 0))))]\n+  \"\"\n+  \"{ai|addic} %0,%1,-1\\;{sfe|subfe} %0,%0,%0\"\n+  [(set_attr \"type\" \"two\")\n+   (set_attr \"length\" \"8\")])\n+\n+(define_insn_and_split \"*neg_eq<mode>\"\n+  [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n+\t(neg:P (eq:P (match_operand:P 1 \"gpc_reg_operand\" \"%r\")\n+\t\t     (match_operand:P 2 \"scc_eq_operand\" \"<scc_eq_op2>\"))))]\n+  \"\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 0) (neg:P (eq:P (match_dup 3) (const_int 0))))]\n+  {\n+    if (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) != 0)\n+      {\n+\t/* Use output operand as intermediate.  */\n+\toperands[3] = operands[0];\n+\n+\tif (logical_operand (operands[2], <MODE>mode))\n+\t  emit_insn (gen_rtx_SET (VOIDmode, operands[3],\n+\t\t\t\t  gen_rtx_XOR (<MODE>mode,\n+\t\t\t\t\t       operands[1], operands[2])));\n+\telse\n+\t  emit_insn (gen_rtx_SET (VOIDmode, operands[3],\n+\t\t\t\t  gen_rtx_PLUS (<MODE>mode, operands[1],\n+\t\t\t\t\t\tnegate_rtx (<MODE>mode,\n+\t\t\t\t\t\t\t    operands[2]))));\n+      }\n+    else\n+      operands[3] = operands[1];\n+  })\n \n ;; Simplify (ne X (const_int 0)) on the PowerPC.  No need to on the Power,\n ;; since it nabs/sr is just as fast.\n@@ -12440,7 +12465,7 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"*plus_gt<mode>\"\n+(define_insn \"*plus_gt0<mode>\"\n   [(set (match_operand:P 0 \"gpc_reg_operand\" \"=&r\")\n \t(plus:P (gt:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n \t\t      (const_int 0))"}]}