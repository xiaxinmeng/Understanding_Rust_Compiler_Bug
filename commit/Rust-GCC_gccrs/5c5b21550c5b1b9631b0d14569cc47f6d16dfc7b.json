{"sha": "5c5b21550c5b1b9631b0d14569cc47f6d16dfc7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM1YjIxNTUwYzViMWI5NjMxYjBkMTQ1NjljYzQ3ZjZkMTZkZmM3Yg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2006-11-12T23:51:36Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2006-11-12T23:51:36Z"}, "message": "builtins.c (fold_builtin_cosh): New.\n\n\t* builtins.c (fold_builtin_cosh): New.\n\t(fold_builtin_1): Use it.\n\t* fold-const.c (negate_mathfn_p): Add llround, lround, round,\n\ttrunc to the list of \"odd\" functions.  Also add llrint, lrint,\n\trint and nearbyint when flag_rounding_math is false.\n\ntestsuite:\n\t* gcc.dg/torture/builtin-symmetric-1.c: Add more cases.\n\nFrom-SVN: r118733", "tree": {"sha": "9a539cef8be2437dc8b524015aa3a340c925fa7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a539cef8be2437dc8b524015aa3a340c925fa7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c5b21550c5b1b9631b0d14569cc47f6d16dfc7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c5b21550c5b1b9631b0d14569cc47f6d16dfc7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c5b21550c5b1b9631b0d14569cc47f6d16dfc7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c5b21550c5b1b9631b0d14569cc47f6d16dfc7b/comments", "author": null, "committer": null, "parents": [{"sha": "8f8bb1d2008496ba3856bc12f8b2cae12195c235", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8bb1d2008496ba3856bc12f8b2cae12195c235", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f8bb1d2008496ba3856bc12f8b2cae12195c235"}], "stats": {"total": 81, "additions": 73, "deletions": 8}, "files": [{"sha": "0eacd1e7b8bccea99c8412996c4c94f67727fb5c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5b21550c5b1b9631b0d14569cc47f6d16dfc7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5b21550c5b1b9631b0d14569cc47f6d16dfc7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c5b21550c5b1b9631b0d14569cc47f6d16dfc7b", "patch": "@@ -1,3 +1,11 @@\n+2006-11-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (fold_builtin_cosh): New.\n+\t(fold_builtin_1): Use it.\n+\t* fold-const.c (negate_mathfn_p): Add llround, lround, round,\n+\ttrunc to the list of \"odd\" functions.  Also add llrint, lrint,\n+\trint and nearbyint when flag_rounding_math is false.\n+\n 2006-11-12  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* tree-flow.h (name_mappings_registered_p): Declare."}, {"sha": "b9005b48799c21bf03a7985b0f388e05a8d65514", "filename": "gcc/builtins.c", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5b21550c5b1b9631b0d14569cc47f6d16dfc7b/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5b21550c5b1b9631b0d14569cc47f6d16dfc7b/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=5c5b21550c5b1b9631b0d14569cc47f6d16dfc7b", "patch": "@@ -151,6 +151,7 @@ static tree fold_builtin_cbrt (tree, tree);\n static tree fold_builtin_pow (tree, tree, tree);\n static tree fold_builtin_powi (tree, tree, tree);\n static tree fold_builtin_cos (tree, tree, tree);\n+static tree fold_builtin_cosh (tree, tree, tree);\n static tree fold_builtin_tan (tree, tree);\n static tree fold_builtin_trunc (tree, tree);\n static tree fold_builtin_floor (tree, tree);\n@@ -7121,6 +7122,29 @@ fold_builtin_cos (tree arglist, tree type, tree fndecl)\n   return NULL_TREE;\n }\n \n+/* Fold function call to builtin cosh, coshf, or coshl.  Return\n+   NULL_TREE if no simplification can be made.  */\n+static tree\n+fold_builtin_cosh (tree arglist, tree type, tree fndecl)\n+{\n+  if (validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n+    {\n+      tree arg = TREE_VALUE (arglist);\n+      tree res, narg;\n+\n+      /* Calculate the result when the argument is a constant.  */\n+      if ((res = do_mpfr_arg1 (arg, type, mpfr_cosh, NULL, NULL, 0)))\n+\treturn res;\n+  \n+      /* Optimize cosh(-x) into cosh (x).  */\n+      if ((narg = fold_strip_sign_ops (arg)))\n+\treturn build_function_call_expr (fndecl, \n+\t\t\t\t\t build_tree_list (NULL_TREE, narg));\n+    }\n+  \n+  return NULL_TREE;\n+}\n+\n /* Fold function call to builtin tan, tanf, or tanl.  Return\n    NULL_TREE if no simplification can be made.  */\n static tree\n@@ -9046,10 +9070,7 @@ fold_builtin_1 (tree fndecl, tree arglist, bool ignore)\n     break;\n \n     CASE_FLT_FN (BUILT_IN_COSH):\n-      if (validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n-\treturn do_mpfr_arg1 (TREE_VALUE (arglist), type, mpfr_cosh,\n-\t\t\t     NULL, NULL, 0);\n-    break;\n+      return fold_builtin_cosh (arglist, type, fndecl);\n \n     CASE_FLT_FN (BUILT_IN_TANH):\n       if (validate_arglist (arglist, REAL_TYPE, VOID_TYPE))"}, {"sha": "eeec0c175bd44b182b2b0b583131cfa06fc92fde", "filename": "gcc/fold-const.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5b21550c5b1b9631b0d14569cc47f6d16dfc7b/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5b21550c5b1b9631b0d14569cc47f6d16dfc7b/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=5c5b21550c5b1b9631b0d14569cc47f6d16dfc7b", "patch": "@@ -890,13 +890,23 @@ negate_mathfn_p (enum built_in_function code)\n     CASE_FLT_FN (BUILT_IN_ATAN):\n     CASE_FLT_FN (BUILT_IN_ATANH):\n     CASE_FLT_FN (BUILT_IN_CBRT):\n+    CASE_FLT_FN (BUILT_IN_ERF):\n+    CASE_FLT_FN (BUILT_IN_LLROUND):\n+    CASE_FLT_FN (BUILT_IN_LROUND):\n+    CASE_FLT_FN (BUILT_IN_ROUND):\n     CASE_FLT_FN (BUILT_IN_SIN):\n     CASE_FLT_FN (BUILT_IN_SINH):\n     CASE_FLT_FN (BUILT_IN_TAN):\n     CASE_FLT_FN (BUILT_IN_TANH):\n-    CASE_FLT_FN (BUILT_IN_ERF):\n+    CASE_FLT_FN (BUILT_IN_TRUNC):\n       return true;\n \n+    CASE_FLT_FN (BUILT_IN_LLRINT):\n+    CASE_FLT_FN (BUILT_IN_LRINT):\n+    CASE_FLT_FN (BUILT_IN_NEARBYINT):\n+    CASE_FLT_FN (BUILT_IN_RINT):\n+      return !flag_rounding_math;\n+    \n     default:\n       break;\n     }"}, {"sha": "7237d4f2b7d566935e052442cc2ada007c4ef78f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5b21550c5b1b9631b0d14569cc47f6d16dfc7b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5b21550c5b1b9631b0d14569cc47f6d16dfc7b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c5b21550c5b1b9631b0d14569cc47f6d16dfc7b", "patch": "@@ -1,3 +1,7 @@\n+2006-11-12  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/torture/builtin-symmetric-1.c: Add more cases.\n+\n 2006-11-12  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* gcc.dg/tree-ssa/prefetch-3.c: New test."}, {"sha": "b8ea99d84cf71e67582778ee45d28c7d0ca2fc33", "filename": "gcc/testsuite/gcc.dg/torture/builtin-symmetric-1.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c5b21550c5b1b9631b0d14569cc47f6d16dfc7b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-symmetric-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c5b21550c5b1b9631b0d14569cc47f6d16dfc7b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-symmetric-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fbuiltin-symmetric-1.c?ref=5c5b21550c5b1b9631b0d14569cc47f6d16dfc7b", "patch": "@@ -21,6 +21,12 @@ extern void link_error(int);\n     link_error(__LINE__); \\\n   } while (0)\n \n+/* Test that FUNC(-VAR) == FUNC(VAR), where VAR has an int type.  */\n+#define TESTIT_EVEN_I(FUNC,VAR) do { \\\n+  if (__builtin_##FUNC(-VAR) != __builtin_##FUNC(VAR)) \\\n+    link_error(__LINE__); \\\n+  } while (0)\n+\n /* Test that -FUNC(ARG) == FUNC(-ARG).  */\n #define TESTIT_ODD(FUNC) do { \\\n   if (-__builtin_##FUNC##f(-xf) != __builtin_##FUNC##f(xf)) \\\n@@ -31,24 +37,40 @@ extern void link_error(int);\n     link_error(__LINE__); \\\n   } while (0)\n \n-void foo (float xf, double x, long double xl)\n+void foo (float xf, double x, long double xl,\n+\t  int i, long l, long long ll, __INTMAX_TYPE__ im)\n {\n   TESTIT_EVEN(cos);\n+  TESTIT_EVEN(cosh);\n+  TESTIT_EVEN(fabs);\n+\n+  TESTIT_EVEN_I(abs, i);\n+  TESTIT_EVEN_I(imaxabs, im);\n+  TESTIT_EVEN_I(labs, l);\n+  TESTIT_EVEN_I(llabs, ll);\n \n   TESTIT_ODD(asin);\n   TESTIT_ODD(asinh);\n   TESTIT_ODD(atan);\n   TESTIT_ODD(atanh);\n   TESTIT_ODD(cbrt);\n+  TESTIT_ODD(erf);\n+  TESTIT_ODD(llrint);\n+  TESTIT_ODD(llround);\n+  TESTIT_ODD(lrint);\n+  TESTIT_ODD(lround);\n+  TESTIT_ODD(nearbyint);\n+  TESTIT_ODD(rint);\n+  TESTIT_ODD(round);\n   TESTIT_ODD(sin);\n   TESTIT_ODD(sinh);\n   TESTIT_ODD(tan);\n   TESTIT_ODD(tanh);\n-  TESTIT_ODD(erf);\n+  TESTIT_ODD(trunc);\n }\n \n int main()\n {\n-  foo (1,1,1);\n+  foo (1,1,1,1,1,1,1);\n   return 0;\n }"}]}