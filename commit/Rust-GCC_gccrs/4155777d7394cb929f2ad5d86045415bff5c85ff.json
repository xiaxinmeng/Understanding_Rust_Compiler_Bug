{"sha": "4155777d7394cb929f2ad5d86045415bff5c85ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE1NTc3N2Q3Mzk0Y2I5MjlmMmFkNWQ4NjA0NTQxNWJmZjVjODVmZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-11-02T11:12:43Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-11-02T11:12:43Z"}, "message": "[C++ PATCH] refactor duplicate_decls\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-11/msg00085.html\n\tgcc/cp/\n\t* decl.c (duplicate_decls): Refactor checks.\n\tgcc/testsuite/\n\t* g++.dg/lookup/crash6.C: Adjust error\n\t* g++.dg/parse/crash38.C: Likewise.\n\nFrom-SVN: r265744", "tree": {"sha": "05b914aa41f83859292692594a53d80d043af189", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05b914aa41f83859292692594a53d80d043af189"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4155777d7394cb929f2ad5d86045415bff5c85ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4155777d7394cb929f2ad5d86045415bff5c85ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4155777d7394cb929f2ad5d86045415bff5c85ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4155777d7394cb929f2ad5d86045415bff5c85ff/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97f5962a05625a25ff4bfb35e261e810d5c0381c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97f5962a05625a25ff4bfb35e261e810d5c0381c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97f5962a05625a25ff4bfb35e261e810d5c0381c"}], "stats": {"total": 151, "additions": 70, "deletions": 81}, "files": [{"sha": "bb77e0b42ab9b928704be934d3a783d3fd0a1dab", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4155777d7394cb929f2ad5d86045415bff5c85ff/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4155777d7394cb929f2ad5d86045415bff5c85ff/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4155777d7394cb929f2ad5d86045415bff5c85ff", "patch": "@@ -1,3 +1,7 @@\n+2018-11-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* decl.c (duplicate_decls): Refactor checks.\n+\n 2018-11-01  Marek Polacek  <polacek@redhat.com>\n \n \tImplement P0846R0, ADL and function templates."}, {"sha": "cf934159395c9f69c641868f0484d5bef0931a96", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 57, "deletions": 77, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4155777d7394cb929f2ad5d86045415bff5c85ff/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4155777d7394cb929f2ad5d86045415bff5c85ff/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=4155777d7394cb929f2ad5d86045415bff5c85ff", "patch": "@@ -1370,47 +1370,6 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n       || TREE_TYPE (olddecl) == error_mark_node)\n     return error_mark_node;\n \n-  if (DECL_NAME (newdecl)\n-      && DECL_NAME (olddecl)\n-      && UDLIT_OPER_P (DECL_NAME (newdecl))\n-      && UDLIT_OPER_P (DECL_NAME (olddecl)))\n-    {\n-      if (TREE_CODE (newdecl) == TEMPLATE_DECL\n-\t  && TREE_CODE (olddecl) != TEMPLATE_DECL\n-\t  && check_raw_literal_operator (olddecl))\n-\terror_at (newdecl_loc,\n-\t\t  \"literal operator template %qD conflicts with\"\n-\t\t  \" raw literal operator %qD\", newdecl, olddecl);\n-      else if (TREE_CODE (newdecl) != TEMPLATE_DECL\n-\t       && TREE_CODE (olddecl) == TEMPLATE_DECL\n-\t       && check_raw_literal_operator (newdecl))\n-\terror_at (newdecl_loc,\n-\t\t  \"raw literal operator %qD conflicts with\"\n-\t\t  \" literal operator template %qD\", newdecl, olddecl);\n-    }\n-\n-  /* True to merge attributes between the declarations, false to\n-     set OLDDECL's attributes to those of NEWDECL (for template\n-     explicit specializations that specify their own attributes\n-     independent of those specified for the primary template).  */\n-  const bool merge_attr = (TREE_CODE (newdecl) != FUNCTION_DECL\n-\t\t\t   || !DECL_TEMPLATE_SPECIALIZATION (newdecl)\n-\t\t\t   || DECL_TEMPLATE_SPECIALIZATION (olddecl));\n-\n-  if (DECL_P (olddecl)\n-      && TREE_CODE (newdecl) == FUNCTION_DECL\n-      && TREE_CODE (olddecl) == FUNCTION_DECL\n-      && merge_attr\n-      && diagnose_mismatched_attributes (olddecl, newdecl))\n-    {\n-      if (DECL_INITIAL (olddecl))\n-\tinform (olddecl_loc,\n-\t\t\"previous definition of %qD was here\", olddecl);\n-      else\n-\tinform (olddecl_loc,\n-\t\t\"previous declaration of %qD was here\", olddecl);\n-    }\n-\n   /* Check for redeclaration and other discrepancies.  */\n   if (TREE_CODE (olddecl) == FUNCTION_DECL\n       && DECL_ARTIFICIAL (olddecl))\n@@ -1634,38 +1593,45 @@ next_arg:;\n       /* C++ Standard, 3.3, clause 4:\n \t \"[Note: a namespace name or a class template name must be unique\n \t in its declarative region (7.3.2, clause 14). ]\"  */\n-      if (TREE_CODE (olddecl) != NAMESPACE_DECL\n-\t  && TREE_CODE (newdecl) != NAMESPACE_DECL\n-\t  && (TREE_CODE (olddecl) != TEMPLATE_DECL\n-\t      || TREE_CODE (DECL_TEMPLATE_RESULT (olddecl)) != TYPE_DECL)\n-\t  && (TREE_CODE (newdecl) != TEMPLATE_DECL\n-\t      || TREE_CODE (DECL_TEMPLATE_RESULT (newdecl)) != TYPE_DECL))\n-\t{\n-\t  if ((TREE_CODE (olddecl) == TYPE_DECL && DECL_ARTIFICIAL (olddecl)\n-\t       && TREE_CODE (newdecl) != TYPE_DECL)\n-\t      || (TREE_CODE (newdecl) == TYPE_DECL && DECL_ARTIFICIAL (newdecl)\n-\t\t  && TREE_CODE (olddecl) != TYPE_DECL))\n-\t    {\n-\t      /* We do nothing special here, because C++ does such nasty\n-\t\t things with TYPE_DECLs.  Instead, just let the TYPE_DECL\n-\t\t get shadowed, and know that if we need to find a TYPE_DECL\n-\t\t for a given name, we can look in the IDENTIFIER_TYPE_VALUE\n-\t\t slot of the identifier.  */\n-\t      return NULL_TREE;\n-\t    }\n-\t    \n-\t    if ((TREE_CODE (newdecl) == FUNCTION_DECL\n-\t\t && DECL_FUNCTION_TEMPLATE_P (olddecl))\n-\t\t|| (TREE_CODE (olddecl) == FUNCTION_DECL\n-\t\t    && DECL_FUNCTION_TEMPLATE_P (newdecl)))\n-\t      return NULL_TREE;\n+      if (TREE_CODE (olddecl) == NAMESPACE_DECL\n+\t  || TREE_CODE (newdecl) == NAMESPACE_DECL)\n+\t/* Namespace conflicts with not namespace.  */;\n+      else if (DECL_TYPE_TEMPLATE_P (olddecl)\n+\t       || DECL_TYPE_TEMPLATE_P (newdecl))\n+\t/* Class template conflicts.  */;\n+      else if ((TREE_CODE (newdecl) == FUNCTION_DECL\n+\t\t&& DECL_FUNCTION_TEMPLATE_P (olddecl))\n+\t       || (TREE_CODE (olddecl) == FUNCTION_DECL\n+\t\t   && DECL_FUNCTION_TEMPLATE_P (newdecl)))\n+\t{\n+\t  /* One is a function and the other is a template\n+\t     function.  */\n+\t  if (!UDLIT_OPER_P (DECL_NAME (newdecl)))\n+\t    return NULL_TREE;\n+\n+\t  /* There can only be one!  */\n+\t  if (TREE_CODE (newdecl) == TEMPLATE_DECL\n+\t      && check_raw_literal_operator (olddecl))\n+\t    error_at (newdecl_loc,\n+\t\t      \"literal operator %q#D conflicts with\"\n+\t\t      \" raw literal operator\", newdecl);\n+\t  else if (check_raw_literal_operator (newdecl))\n+\t    error_at (newdecl_loc,\n+\t\t      \"raw literal operator %q#D conflicts with\"\n+\t\t      \" literal operator template\", newdecl);\n+\t  else\n+\t    return NULL_TREE;\n+\t  \n+\t  inform (olddecl_loc, \"previous declaration %q#D\", olddecl);\n+\t  return error_mark_node;\n \t}\n+      else if (DECL_IMPLICIT_TYPEDEF_P (olddecl)\n+\t       || DECL_IMPLICIT_TYPEDEF_P (newdecl))\n+\t/* One is an implicit typedef, that's ok.  */\n+\treturn NULL_TREE;\n \n-      error (\"%q#D redeclared as different kind of symbol\", newdecl);\n-      if (TREE_CODE (olddecl) == TREE_LIST)\n-\tolddecl = TREE_VALUE (olddecl);\n-      inform (olddecl_loc,\n-\t      \"previous declaration %q#D\", olddecl);\n+      error (\"%q#D redeclared as different kind of entity\", newdecl);\n+      inform (olddecl_loc, \"previous declaration %q#D\", olddecl);\n \n       return error_mark_node;\n     }\n@@ -1700,8 +1666,8 @@ next_arg:;\n \t\t      return type.  */\n \t\t   && same_type_p (TREE_TYPE (TREE_TYPE (newdecl)),\n \t\t\t\t   TREE_TYPE (TREE_TYPE (olddecl)))\n-                   // Template functions can also be disambiguated by\n-                   // constraints.\n+                   /* Template functions can also be disambiguated by\n+\t\t      constraints.  */\n                    && equivalently_constrained (olddecl, newdecl))\n \t    {\n \t      error_at (newdecl_loc, \"ambiguating new declaration %q#D\",\n@@ -1938,16 +1904,30 @@ next_arg:;\n \t  || DECL_IMPLICIT_TYPEDEF_P (newdecl)))\n     return NULL_TREE;\n \n+  if (!validate_constexpr_redeclaration (olddecl, newdecl))\n+    return error_mark_node;\n+\n+  /* We have committed to returning OLDDECL at this point.  */\n+\n   /* If new decl is `static' and an `extern' was seen previously,\n      warn about it.  */\n   warn_extern_redeclared_static (newdecl, olddecl);\n \n-  if (!validate_constexpr_redeclaration (olddecl, newdecl))\n-    return error_mark_node;\n+  /* True to merge attributes between the declarations, false to\n+     set OLDDECL's attributes to those of NEWDECL (for template\n+     explicit specializations that specify their own attributes\n+     independent of those specified for the primary template).  */\n+  const bool merge_attr = (TREE_CODE (newdecl) != FUNCTION_DECL\n+\t\t\t   || !DECL_TEMPLATE_SPECIALIZATION (newdecl)\n+\t\t\t   || DECL_TEMPLATE_SPECIALIZATION (olddecl));\n \n-  /* We have committed to returning 1 at this point.  */\n   if (TREE_CODE (newdecl) == FUNCTION_DECL)\n     {\n+      if (merge_attr && diagnose_mismatched_attributes (olddecl, newdecl))\n+\tinform (olddecl_loc, DECL_INITIAL (olddecl)\n+\t\t? G_(\"previous definition of %qD here\")\n+\t\t: G_(\"previous declaration of %qD here\"), olddecl);\n+\n       /* Now that functions must hold information normally held\n \t by field decls, there is extra work to do so that\n \t declaration information does not get destroyed during\n@@ -2027,7 +2007,7 @@ next_arg:;\n   else\n     DECL_ATTRIBUTES (olddecl) = DECL_ATTRIBUTES (newdecl);\n \n-  if (DECL_DECLARES_FUNCTION_P (olddecl) && DECL_DECLARES_FUNCTION_P (newdecl))\n+  if (DECL_DECLARES_FUNCTION_P (olddecl))\n     {\n       olddecl_friend = DECL_FRIEND_P (olddecl);\n       olddecl_hidden_friend = DECL_HIDDEN_FRIEND_P (olddecl);"}, {"sha": "74fa20c45e318ade46e9fd785c526925800c5150", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4155777d7394cb929f2ad5d86045415bff5c85ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4155777d7394cb929f2ad5d86045415bff5c85ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4155777d7394cb929f2ad5d86045415bff5c85ff", "patch": "@@ -1,3 +1,8 @@\n+2018-11-02  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/lookup/crash6.C: Adjust error\n+\t* g++.dg/parse/crash38.C: Likewise.\n+\n 2018-11-02  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* gcc.c-torture/execute/20010904-2.c: Fix last change."}, {"sha": "b824edda3db4e19591ed0bdcf5ad8114f78a299b", "filename": "gcc/testsuite/g++.dg/lookup/crash6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4155777d7394cb929f2ad5d86045415bff5c85ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fcrash6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4155777d7394cb929f2ad5d86045415bff5c85ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fcrash6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fcrash6.C?ref=4155777d7394cb929f2ad5d86045415bff5c85ff", "patch": "@@ -5,4 +5,4 @@\n // PR c++/18652: ICE redeclaring variable as template.\n \n int A;\t\t\t// { dg-message \"previous declaration\" }\n-template<int> struct A; // { dg-error \"different kind of symbol\" }\n+template<int> struct A; // { dg-error \"different kind of\" }"}, {"sha": "5747f9fb21ba84bf3e5683a55e151cb9877d2c67", "filename": "gcc/testsuite/g++.dg/parse/crash38.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4155777d7394cb929f2ad5d86045415bff5c85ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4155777d7394cb929f2ad5d86045415bff5c85ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash38.C?ref=4155777d7394cb929f2ad5d86045415bff5c85ff", "patch": "@@ -2,10 +2,10 @@\n \n /* This would not ICE.  */\n namespace M { } /* { dg-message \"previous declaration\" } */\n-struct M; /* { dg-error \"redeclared as different kind of symbol\" } */\n+struct M; /* { dg-error \"redeclared as different kind of\" } */\n M *p; /* { dg-error \"does not name a type\" } */\n \n /* This would ICE when processing 'p'.  */\n namespace N { } /* { dg-message \"previous declaration\" } */\n-struct N; /* { dg-error \"redeclared as different kind of symbol\" } */\n-struct N* p; /* { dg-error \"redeclared as different kind of symbol|invalid type\" } */\n+struct N; /* { dg-error \"redeclared as different kind of\" } */\n+struct N* p; /* { dg-error \"redeclared as different kind of\" } */"}]}