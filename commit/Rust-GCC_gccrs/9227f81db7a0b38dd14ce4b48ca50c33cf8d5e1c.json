{"sha": "9227f81db7a0b38dd14ce4b48ca50c33cf8d5e1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIyN2Y4MWRiN2EwYjM4ZGQxNGNlNGI0OGNhNTBjMzNjZjhkNWUxYw==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-10-26T22:12:22Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-11-11T20:43:31Z"}, "message": "Objective-C++ : Allow prefix attrs on linkage specs.\n\nFor Objective-C++, this combines prefix attributes from before and\nafter top level linkage specs.  The \"reference implementation\" for\nObjective-C++ allows this, and system headers depend on it.\n\ne.g.\n\n__attribute__((__deprecated__))\nextern \"C\" __attribute__((__visibility__(\"default\")))\n@interface MyClass\n...\n@end\n\nWould consider the list of prefix attributes to the interface for\nMyClass to include both the visibility and deprecated ones.\n\nWhen we are compiling regular C++, this emits a warning and discards\nany prefix attributes before a linkage spec.\n\ngcc/cp/ChangeLog:\n\n\t* parser.c (cp_parser_declaration): Unless we are compiling for\n\tOjective-C++, warn about and discard any attributes that prefix\n\ta linkage specification.", "tree": {"sha": "9e4363f328b7d4facf4a79492cd0569c87f3116a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e4363f328b7d4facf4a79492cd0569c87f3116a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9227f81db7a0b38dd14ce4b48ca50c33cf8d5e1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9227f81db7a0b38dd14ce4b48ca50c33cf8d5e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9227f81db7a0b38dd14ce4b48ca50c33cf8d5e1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9227f81db7a0b38dd14ce4b48ca50c33cf8d5e1c/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1c9b3c3408c1ec8043f9b9e1a148f84bb7f3b25"}], "stats": {"total": 71, "additions": 57, "deletions": 14}, "files": [{"sha": "efcdce0477732f1c6412d9efa15c5c217efd58de", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 57, "deletions": 14, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9227f81db7a0b38dd14ce4b48ca50c33cf8d5e1c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9227f81db7a0b38dd14ce4b48ca50c33cf8d5e1c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=9227f81db7a0b38dd14ce4b48ca50c33cf8d5e1c", "patch": "@@ -2187,7 +2187,7 @@ static void cp_parser_already_scoped_statement\n static void cp_parser_declaration_seq_opt\n   (cp_parser *);\n static void cp_parser_declaration\n-  (cp_parser *);\n+  (cp_parser *, tree);\n static void cp_parser_toplevel_declaration\n   (cp_parser *);\n static void cp_parser_block_declaration\n@@ -2238,7 +2238,7 @@ static tree cp_parser_alias_declaration\n static void cp_parser_asm_definition\n   (cp_parser *);\n static void cp_parser_linkage_specification\n-  (cp_parser *);\n+  (cp_parser *, tree);\n static void cp_parser_static_assert\n   (cp_parser *, bool);\n static tree cp_parser_decltype\n@@ -13496,15 +13496,15 @@ cp_parser_declaration_seq_opt (cp_parser* parser)\n       __extension__ declaration */\n \n static void\n-cp_parser_declaration (cp_parser* parser)\n+cp_parser_declaration (cp_parser* parser, tree prefix_attrs)\n {\n   int saved_pedantic;\n \n   /* Check for the `__extension__' keyword.  */\n   if (cp_parser_extension_opt (parser, &saved_pedantic))\n     {\n       /* Parse the qualified declaration.  */\n-      cp_parser_declaration (parser);\n+      cp_parser_declaration (parser, prefix_attrs);\n       /* Restore the PEDANTIC flag.  */\n       pedantic = saved_pedantic;\n \n@@ -13521,11 +13521,50 @@ cp_parser_declaration (cp_parser* parser)\n \n   tree attributes = NULL_TREE;\n \n+  /* Conditionally, allow attributes to precede a linkage specification.  */\n+  if (token1->keyword == RID_ATTRIBUTE)\n+    {\n+      cp_lexer_save_tokens (parser->lexer);\n+      attributes = cp_parser_attributes_opt (parser);\n+      gcc_checking_assert (attributes);\n+      cp_token *t1 = cp_lexer_peek_token (parser->lexer);\n+      cp_token *t2 = (t1->type == CPP_EOF\n+\t\t      ? t1 : cp_lexer_peek_nth_token (parser->lexer, 2));\n+      if (t1->keyword == RID_EXTERN\n+\t  && cp_parser_is_pure_string_literal (t2))\n+\t{\n+\t  cp_lexer_commit_tokens (parser->lexer);\n+\t  /* We might have already been here.  */\n+\t  if (!c_dialect_objc ())\n+\t    {\n+\t      warning_at (token1->location, OPT_Wattributes, \"attributes are\"\n+\t\t\t  \" only permitted in this position for Objective-C++,\"\n+\t\t\t  \" ignored\");\n+\t      attributes = NULL_TREE;\n+\t    }\n+\t  token1 = t1;\n+\t  token2 = t2;\n+\t}\n+      else\n+\t{\n+\t  cp_lexer_rollback_tokens (parser->lexer);\n+\t  attributes = NULL_TREE;\n+\t}\n+    }\n+  /* If we already had some attributes, and we've added more, then prepend.\n+     Otherwise attributes just contains any that we just read.  */\n+  if (prefix_attrs)\n+    {\n+      if (attributes)\n+\tTREE_CHAIN (prefix_attrs) = attributes;\n+      attributes = prefix_attrs;\n+    }\n+\n   /* If the next token is `extern' and the following token is a string\n      literal, then we have a linkage specification.  */\n   if (token1->keyword == RID_EXTERN\n       && cp_parser_is_pure_string_literal (token2))\n-    cp_parser_linkage_specification (parser);\n+    cp_parser_linkage_specification (parser, attributes);\n   /* If the next token is `template', then we have either a template\n      declaration, an explicit instantiation, or an explicit\n      specialization.  */\n@@ -13575,7 +13614,7 @@ cp_parser_declaration (cp_parser* parser)\n     cp_parser_namespace_definition (parser);\n   /* Objective-C++ declaration/definition.  */\n   else if (c_dialect_objc () && OBJC_IS_AT_KEYWORD (token1->keyword))\n-    cp_parser_objc_declaration (parser, NULL_TREE);\n+    cp_parser_objc_declaration (parser, attributes);\n   else if (c_dialect_objc ()\n \t   && token1->keyword == RID_ATTRIBUTE\n \t   && cp_parser_objc_valid_prefix_attributes (parser, &attributes))\n@@ -13617,7 +13656,7 @@ cp_parser_toplevel_declaration (cp_parser* parser)\n     }\n   else\n     /* Parse the declaration itself.  */\n-    cp_parser_declaration (parser);\n+    cp_parser_declaration (parser, NULL_TREE);\n }\n \n /* Parse a block-declaration.\n@@ -14726,7 +14765,7 @@ cp_parser_function_specifier_opt (cp_parser* parser,\n      extern string-literal declaration  */\n \n static void\n-cp_parser_linkage_specification (cp_parser* parser)\n+cp_parser_linkage_specification (cp_parser* parser, tree prefix_attr)\n {\n   tree linkage;\n \n@@ -14791,7 +14830,7 @@ cp_parser_linkage_specification (cp_parser* parser)\n       saved_in_unbraced_linkage_specification_p\n \t= parser->in_unbraced_linkage_specification_p;\n       parser->in_unbraced_linkage_specification_p = true;\n-      cp_parser_declaration (parser);\n+      cp_parser_declaration (parser, prefix_attr);\n       parser->in_unbraced_linkage_specification_p\n \t= saved_in_unbraced_linkage_specification_p;\n     }\n@@ -33099,7 +33138,7 @@ cp_parser_objc_interstitial_code (cp_parser* parser)\n   if (token->keyword == RID_EXTERN\n       && cp_parser_is_pure_string_literal\n \t (cp_lexer_peek_nth_token (parser->lexer, 2)))\n-    cp_parser_linkage_specification (parser);\n+    cp_parser_linkage_specification (parser, NULL_TREE);\n   /* Handle #pragma, if any.  */\n   else if (token->type == CPP_PRAGMA)\n     cp_parser_pragma (parser, pragma_objc_icode, NULL);\n@@ -33864,11 +33903,15 @@ static bool\n cp_parser_objc_valid_prefix_attributes (cp_parser* parser, tree *attrib)\n {\n   cp_lexer_save_tokens (parser->lexer);\n-  *attrib = cp_parser_attributes_opt (parser);\n-  gcc_assert (*attrib);\n+  tree addon = cp_parser_attributes_opt (parser);\n+  gcc_checking_assert (addon);\n   if (OBJC_IS_AT_KEYWORD (cp_lexer_peek_token (parser->lexer)->keyword))\n     {\n       cp_lexer_commit_tokens (parser->lexer);\n+      if (*attrib)\n+\tTREE_CHAIN (*attrib) = addon;\n+      else\n+\t*attrib = addon;\n       return true;\n     }\n   cp_lexer_rollback_tokens (parser->lexer);\n@@ -41892,7 +41935,7 @@ cp_parser_omp_declare_simd (cp_parser *parser, cp_token *pragma_tok,\n       switch (context)\n \t{\n \tcase pragma_external:\n-\t  cp_parser_declaration (parser);\n+\t  cp_parser_declaration (parser, NULL_TREE);\n \t  break;\n \tcase pragma_member:\n \t  cp_parser_member_declaration (parser);\n@@ -43449,7 +43492,7 @@ cp_parser_oacc_routine (cp_parser *parser, cp_token *pragma_tok,\n \t}\n \n       /* We only have to consider the pragma_external case here.  */\n-      cp_parser_declaration (parser);\n+      cp_parser_declaration (parser, NULL_TREE);\n       if (parser->oacc_routine\n \t  && !parser->oacc_routine->fndecl_seen)\n \tcp_ensure_no_oacc_routine (parser);"}]}