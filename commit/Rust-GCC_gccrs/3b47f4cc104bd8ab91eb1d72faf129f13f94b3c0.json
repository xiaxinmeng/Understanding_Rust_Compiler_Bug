{"sha": "3b47f4cc104bd8ab91eb1d72faf129f13f94b3c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I0N2Y0Y2MxMDRiZDhhYjkxZWIxZDcyZmFmMTI5ZjEzZjk0YjNjMA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2015-12-01T16:10:45Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2015-12-01T16:10:45Z"}, "message": "rs6000.c (const_load_sequence_p): Handle extra indirection for large and small code models.\n\n[gcc]\n\n2015-12-01  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.c (const_load_sequence_p): Handle extra\n\tindirection for large and small code models.\n\t(adjust_vperm): Likewise.\n\n[gcc/testsuite]\n\n2015-12-01  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/swaps-p8-22.c: New.\n\nFrom-SVN: r231119", "tree": {"sha": "2a306bf5c0894d0b129fc5c8cdc905005e5119f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a306bf5c0894d0b129fc5c8cdc905005e5119f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b47f4cc104bd8ab91eb1d72faf129f13f94b3c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b47f4cc104bd8ab91eb1d72faf129f13f94b3c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b47f4cc104bd8ab91eb1d72faf129f13f94b3c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b47f4cc104bd8ab91eb1d72faf129f13f94b3c0/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37d5ad46dde4e1cf71bd94f39f66e1fa98591222", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37d5ad46dde4e1cf71bd94f39f66e1fa98591222"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "e582c8aa65610dc118ee529277e8e44e04555f3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b47f4cc104bd8ab91eb1d72faf129f13f94b3c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b47f4cc104bd8ab91eb1d72faf129f13f94b3c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b47f4cc104bd8ab91eb1d72faf129f13f94b3c0", "patch": "@@ -1,3 +1,9 @@\n+2015-12-01  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.c (const_load_sequence_p): Handle extra\n+\tindirection for large and small code models.\n+\t(adjust_vperm): Likewise.\n+\n 2015-12-01  Julian Brown  <julian@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>\n \t    James Norris  <James_Norris@mentor.com>"}, {"sha": "d451d7686cccb9f0abf999b8737141479561f766", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b47f4cc104bd8ab91eb1d72faf129f13f94b3c0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b47f4cc104bd8ab91eb1d72faf129f13f94b3c0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3b47f4cc104bd8ab91eb1d72faf129f13f94b3c0", "patch": "@@ -36613,7 +36613,12 @@ const_load_sequence_p (swap_web_entry *insn_entry, rtx insn)\n \t  rtx base, offset;\n \t  if (GET_CODE (tocrel_body) != SET)\n \t    return false;\n-\t  if (!toc_relative_expr_p (SET_SRC (tocrel_body), false))\n+\t  /* There is an extra level of indirection for small/large\n+\t     code models.  */\n+\t  rtx tocrel_expr = SET_SRC (tocrel_body);\n+\t  if (GET_CODE (tocrel_expr) == MEM)\n+\t    tocrel_expr = XEXP (tocrel_expr, 0);\n+\t  if (!toc_relative_expr_p (tocrel_expr, false))\n \t    return false;\n \t  split_const (XVECEXP (tocrel_base, 0, 0), &base, &offset);\n \t  if (GET_CODE (base) != SYMBOL_REF || !CONSTANT_POOL_ADDRESS_P (base))\n@@ -37294,10 +37299,19 @@ adjust_vperm (rtx_insn *insn)\n      to set tocrel_base; otherwise it would be unnecessary as we've\n      already established it will return true.  */\n   rtx base, offset;\n-  if (!toc_relative_expr_p (SET_SRC (PATTERN (tocrel_insn)), false))\n+  rtx tocrel_expr = SET_SRC (PATTERN (tocrel_insn));\n+  /* There is an extra level of indirection for small/large code models.  */\n+  if (GET_CODE (tocrel_expr) == MEM)\n+    tocrel_expr = XEXP (tocrel_expr, 0);\n+  if (!toc_relative_expr_p (tocrel_expr, false))\n     gcc_unreachable ();\n   split_const (XVECEXP (tocrel_base, 0, 0), &base, &offset);\n   rtx const_vector = get_pool_constant (base);\n+  /* With the extra indirection, get_pool_constant will produce the\n+     real constant from the reg_equal expression, so get the real\n+     constant.  */\n+  if (GET_CODE (const_vector) == SYMBOL_REF)\n+    const_vector = get_pool_constant (const_vector);\n   gcc_assert (GET_CODE (const_vector) == CONST_VECTOR);\n \n   /* Create an adjusted mask from the initial mask.  */"}, {"sha": "44055d19adf981dc2a4ca1c59f1cc0d77a7e0cd1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b47f4cc104bd8ab91eb1d72faf129f13f94b3c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b47f4cc104bd8ab91eb1d72faf129f13f94b3c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3b47f4cc104bd8ab91eb1d72faf129f13f94b3c0", "patch": "@@ -1,3 +1,7 @@\n+2015-12-01  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/swaps-p8-22.c: New.\n+\n 2015-12-01  Marek Polacek  <polacek@redhat.com>\n \n \tPR tree-optimization/67916"}, {"sha": "4be217b3dd107267199e1e74689a57fea501f0d9", "filename": "gcc/testsuite/gcc.target/powerpc/swaps-p8-22.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b47f4cc104bd8ab91eb1d72faf129f13f94b3c0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b47f4cc104bd8ab91eb1d72faf129f13f94b3c0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fswaps-p8-22.c?ref=3b47f4cc104bd8ab91eb1d72faf129f13f94b3c0", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile { target { powerpc64le-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } }\n+/* { dg-options \"-O2 -mcpu=power8 -maltivec -mcmodel=large\" } */\n+\n+/* The expansion for vector character multiply introduces a vperm operation.\n+   This tests that changing the vperm mask allows us to remove all swaps\n+   from the generated code.  It is a duplicate of swaps-p8-21.c, except\n+   that it applies the large code model, which requires an extra indirection\n+   in the load of the constant mask.  */\n+\n+#include <altivec.h>\n+\n+void abort ();\n+\n+vector unsigned char r;\n+vector unsigned char v =\n+  { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+vector unsigned char i =\n+  { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };\n+\n+int main ()\n+{\n+  int j;\n+  r = v * i;\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler-times \"vperm\" 1 } } */\n+/* { dg-final { scan-assembler-not \"xxpermdi\" } } */"}]}