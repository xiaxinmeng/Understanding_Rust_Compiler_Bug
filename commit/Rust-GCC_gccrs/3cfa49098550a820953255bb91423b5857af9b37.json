{"sha": "3cfa49098550a820953255bb91423b5857af9b37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NmYTQ5MDk4NTUwYTgyMDk1MzI1NWJiOTE0MjNiNTg1N2FmOWIzNw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-05-29T21:20:36Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1996-05-29T21:20:36Z"}, "message": "Add code to print rs6000 specific info in .s file; make eabi.asm assemble on Solaris\n\nFrom-SVN: r12123", "tree": {"sha": "a3a35de70fcab886e64afcc0eba46ea5af79e14f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3a35de70fcab886e64afcc0eba46ea5af79e14f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cfa49098550a820953255bb91423b5857af9b37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cfa49098550a820953255bb91423b5857af9b37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cfa49098550a820953255bb91423b5857af9b37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cfa49098550a820953255bb91423b5857af9b37/comments", "author": null, "committer": null, "parents": [{"sha": "802a0058bd44c4163743b682926faacaf14d7b81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/802a0058bd44c4163743b682926faacaf14d7b81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/802a0058bd44c4163743b682926faacaf14d7b81"}], "stats": {"total": 97, "additions": 78, "deletions": 19}, "files": [{"sha": "b09d14242451b5b370c48d538dcb96c68ec4c1d4", "filename": "gcc/config/rs6000/eabi.asm", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfa49098550a820953255bb91423b5857af9b37/gcc%2Fconfig%2Frs6000%2Feabi.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfa49098550a820953255bb91423b5857af9b37/gcc%2Fconfig%2Frs6000%2Feabi.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Feabi.asm?ref=3cfa49098550a820953255bb91423b5857af9b37", "patch": "@@ -105,10 +105,18 @@\n \t.long\t0\n \n \t.text\n+#ifdef _RELOCATABLE\n .Lptr:\n \t.long\t.LCTOC1-.Laddr\t\t\t/* PC relative pointer to .got2 */\n+#endif\n \n FUNC_START(__eabi)\n+\n+/* Eliminate -mrelocatable code if not -mrelocatable, so that this file can\n+   be assembled with other assemblers than GAS, such as the Solaris PowerPC\n+   assembler.  */\n+\n+#ifdef _RELOCATABLE\n \tmflr\t0\n \tbl\t.Laddr\t\t\t\t/* get current address */\n .Laddr:\n@@ -120,6 +128,13 @@ FUNC_START(__eabi)\n \tsubf.\t12,12,11\t\t\t/* calculate difference */\n \tmtlr\t0\t\t\t\t/* restore link register */\n \tlwzx\t9,10,12\t\t\t\t/* done flag */\n+\n+#else /* !-mrelocatable */\n+\taddis\t11,0,.LCTOC1@ha\t\t\t/* load address of .LCTOC1 */\n+\taddi\t11,11,.LCTOC1@l\n+\tlwz\t10,.Linit(11)\t\t\t/* init flag */\n+#endif /* !-mrelocatable */\n+\n \tcmplwi\t2,9,0\t\t\t\t/* init flag != 0? */\n \tbnelr\t2\t\t\t\t/* return now, if we've been called already */\n \tstwx\t1,10,12\t\t\t\t/* store a non-zero value in the done flag */\n@@ -145,9 +160,11 @@ FUNC_START(__eabi)\n \tlwz\t2,.Lsda2(11)\t\t\t/* load r2 with _SDA2_BASE address */\n \tb\tFUNC_NAME(__do_global_ctors)\t/* do any C++ global constructors (which returns to caller) */\n \n+.Lreloc:\n+\n+#ifdef _RELOCATABLE\n /* We need to relocate the .got2 pointers.  Don't load registers 2 or 13 */\n \n-.Lreloc:\n \tlwz\t3,.Lgot2s(11)\t\t\t/* GOT pointers start */\n \tlwz\t4,.Lgot2e(11)\t\t\t/* GOT pointers end */\n \tadd\t3,12,3\t\t\t\t/* adjust pointers */\n@@ -237,6 +254,7 @@ FUNC_START(__eabi)\n \taddi\t3,3,4\t\t\t\t/* bump to next word */\n \tcmpw\t1,3,4\t\t\t\t/* more pointers to adjust? */\n \tbc\t4,6,.Lfloop\n+#endif /* _RELOCATABLE */\n \n /* Done adjusting pointers, return */\n "}, {"sha": "7cb1e80123e6c707b8d334db44b6c21803f78b29", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfa49098550a820953255bb91423b5857af9b37/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfa49098550a820953255bb91423b5857af9b37/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3cfa49098550a820953255bb91423b5857af9b37", "patch": "@@ -295,6 +295,55 @@ rs6000_override_options (default_cpu)\n   SUBTARGET_OVERRIDE_OPTIONS;\n #endif\n }\n+\f\n+/* Do anything needed at the start of the asm file.  */\n+\n+void\n+rs6000_file_start (file, default_cpu)\n+     FILE *file;\n+     char *default_cpu;\n+{\n+  int i;\n+  char buffer[80];\n+  char *start = buffer;\n+  struct rs6000_cpu_select *ptr;\n+\n+  if (flag_verbose_asm)\n+    {\n+      sprintf (buffer, \"\\n%s rs6000/powerpc options:\", ASM_COMMENT_START);\n+      rs6000_select[0].string = default_cpu;\n+\n+      for (i = 0; i < sizeof (rs6000_select) / sizeof (rs6000_select[0]); i++)\n+\t{\n+\t  ptr = &rs6000_select[i];\n+\t  if (ptr->string != (char *)0 && ptr->string[0] != '\\0')\n+\t    {\n+\t      fprintf (file, \"%s %s%s\", start, ptr->name, ptr->string);\n+\t      start = \"\";\n+\t    }\n+\t}\n+\n+#ifdef USING_SVR4_H\n+      switch (rs6000_sdata)\n+\t{\n+\tcase SDATA_NONE: fprintf (file, \"%s -msdata=none\", start); start = \"\"; break;\n+\tcase SDATA_DATA: fprintf (file, \"%s -msdata=data\", start); start = \"\"; break;\n+\tcase SDATA_SYSV: fprintf (file, \"%s -msdata=sysv\", start); start = \"\"; break;\n+\tcase SDATA_EABI: fprintf (file, \"%s -msdata=eabi\", start); start = \"\"; break;\n+\t}\n+\n+      if (rs6000_sdata && g_switch_value)\n+\t{\n+\t  fprintf (file, \"%s -G %d\", start, g_switch_value);\n+\t  start = \"\";\n+\t}\n+#endif\n+\n+      if (*start == '\\0')\n+\tfputs (\"\\n\", file);\n+    }\n+}\n+\n \f\n /* Create a CONST_DOUBLE from a string.  */\n "}, {"sha": "ca083b7122a4934c5618a890cc148580961dc872", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfa49098550a820953255bb91423b5857af9b37/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfa49098550a820953255bb91423b5857af9b37/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=3cfa49098550a820953255bb91423b5857af9b37", "patch": "@@ -2244,6 +2244,7 @@ extern int rs6000_trunc_used;\n   text_section ();\t\t\t\t\t\t\\\n   if (profile_flag)\t\t\t\t\t\t\\\n     fputs (\"\\t.extern .mcount\\n\", FILE);\t\t\t\\\n+  rs6000_file_start (FILE, TARGET_CPU_DEFAULT);\t\t\t\\\n }\n \n /* Output at end of assembler file.\n@@ -3012,6 +3013,7 @@ extern int flag_expensive_optimizations;\n /* Declare functions in rs6000.c */\n extern void output_options ();\n extern void rs6000_override_options ();\n+extern void rs6000_file_start ();\n extern struct rtx_def *rs6000_float_const ();\n extern struct rtx_def *rs6000_immed_double_const ();\n extern int direct_return ();"}, {"sha": "b6e4023a9c33f952cb8081825d4fab3c73de084d", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfa49098550a820953255bb91423b5857af9b37/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfa49098550a820953255bb91423b5857af9b37/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=3cfa49098550a820953255bb91423b5857af9b37", "patch": "@@ -691,6 +691,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   output_file_directive ((FILE), main_input_filename);\t\t\t\\\n+  rs6000_file_start (FILE, TARGET_CPU_DEFAULT);\t\t\t\t\\\n } while (0)\n \n \n@@ -919,7 +920,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef\tCPP_SYSV_SPEC\n #define CPP_SYSV_SPEC \\\n-\"%{mrelocatable: -D_RELOCATABLE} \\\n+\"%{mrelocatable*: -D_RELOCATABLE} \\\n %{mcall-sysv: -D_CALL_SYSV} %{mcall-nt: -D_CALL_NT} \\\n %{mcall-aix: -D_CALL_AIX} %{mcall-aixdesc: -D_CALL_AIX -D_CALL_AIXDESC} \\\n %{!mcall-sysv: %{!mcall-aix: %{!mcall-aixdesc: %{!mcall-nt: %(cpp_sysv_default) }}}} \\"}, {"sha": "331c3c4983916b9c0b8d4c9b83947bf4b4ca7fdb", "filename": "gcc/config/rs6000/win-nt.h", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfa49098550a820953255bb91423b5857af9b37/gcc%2Fconfig%2Frs6000%2Fwin-nt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfa49098550a820953255bb91423b5857af9b37/gcc%2Fconfig%2Frs6000%2Fwin-nt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fwin-nt.h?ref=3cfa49098550a820953255bb91423b5857af9b37", "patch": "@@ -177,23 +177,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Stuff to force fit us into the Motorola PPC assembler */\n \n-#if 0\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  output_file_directive (FILE, main_input_filename);\t\t\\\n-  fprintf (FILE, \"\\n#\\tDirective section\\n\");                   \\\n-  fprintf (FILE, \"\\t.section\\t.drectve,\\\"iR\\\"\\n\");              \\\n-  fprintf (FILE, \"\\t.byte\\t\\\"-defaultlib:LIBC\\\" \\n\");           \\\n-  fprintf (FILE, \"\\t.previous\\n\\n\");                              \\\n-}\n-#endif\n-\n-#undef ASM_FILE_START\n-#define ASM_FILE_START(FILE)\t\t\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-  output_file_directive ((FILE), main_input_filename);\t\t\\\n-  data_section ();\t\t\t\t\t\t\\\n+#undef ASM_FILE_START\t\t\t\t\t\t\t\\\n+#define ASM_FILE_START(FILE)\t\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\t\\\n+  output_file_directive ((FILE), main_input_filename);\t\t\t\\\n+  rs6000_file_start (FILE, TARGET_CPU_DEFAULT);\t\t\t\t\\\n+  data_section ();\t\t\t\t\t\t\t\\\n } while (0)\n \n #undef ASM_FILE_END"}]}