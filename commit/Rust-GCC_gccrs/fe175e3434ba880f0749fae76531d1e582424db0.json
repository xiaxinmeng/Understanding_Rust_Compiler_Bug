{"sha": "fe175e3434ba880f0749fae76531d1e582424db0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUxNzVlMzQzNGJhODgwZjA3NDlmYWU3NjUzMWQxZTU4MjQyNGRiMA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-06-19T14:00:26Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-06-19T14:00:26Z"}, "message": "vsra_n.c: New file.\n\n2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vsra_n.c: New file.\n\nFrom-SVN: r224665", "tree": {"sha": "54fc798752d0327028e95fe300fede31fedda025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54fc798752d0327028e95fe300fede31fedda025"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe175e3434ba880f0749fae76531d1e582424db0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe175e3434ba880f0749fae76531d1e582424db0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe175e3434ba880f0749fae76531d1e582424db0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe175e3434ba880f0749fae76531d1e582424db0/comments", "author": null, "committer": null, "parents": [{"sha": "686f3b77261e6a6e5a6a8b911628d1f828b54b92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/686f3b77261e6a6e5a6a8b911628d1f828b54b92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/686f3b77261e6a6e5a6a8b911628d1f828b54b92"}], "stats": {"total": 121, "additions": 121, "deletions": 0}, "files": [{"sha": "02e187ab009f802562845eed79493581418dbed6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe175e3434ba880f0749fae76531d1e582424db0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe175e3434ba880f0749fae76531d1e582424db0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fe175e3434ba880f0749fae76531d1e582424db0", "patch": "@@ -1,3 +1,7 @@\n+2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vsra_n.c: New file.\n+\n 2015-06-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vshrn_n.c: New file."}, {"sha": "3c00497d18d813155f81acfe0fe4afbd87671056", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vsra_n.c", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe175e3434ba880f0749fae76531d1e582424db0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsra_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe175e3434ba880f0749fae76531d1e582424db0/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsra_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsra_n.c?ref=fe175e3434ba880f0749fae76531d1e582424db0", "patch": "@@ -0,0 +1,117 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t       0xfc, 0xfd, 0xfe, 0xff };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffffc, 0xfffffffd };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x5, 0x6, 0x7, 0x8,\n+\t\t\t\t\t0x9, 0xa, 0xb, 0xc };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfffc, 0xfffd, 0xfffe, 0xffff };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff3, 0xfffffff4 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0xfffffffffffffff0 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xf8, 0xf9, 0xfa, 0xfb,\n+\t\t\t\t\t0xfc, 0xfd, 0xfe, 0xff,\n+\t\t\t\t\t0x0, 0x1, 0x2, 0x3,\n+\t\t\t\t\t0x4, 0x5, 0x6, 0x7 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xfff0, 0xfff1, 0xfff2, 0xfff3,\n+\t\t\t\t\t0xfff4, 0xfff5, 0xfff6, 0xfff7 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xfffffffc, 0xfffffffd,\n+\t\t\t\t\t0xfffffffe, 0xffffffff };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t0xfffffffffffffff1 };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0x5, 0x6, 0x7, 0x8,\n+\t\t\t\t\t 0x9, 0xa, 0xb, 0xc,\n+\t\t\t\t\t 0xd, 0xe, 0xf, 0x10,\n+\t\t\t\t\t 0x11, 0x12, 0x13, 0x14 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfffc, 0xfffd, 0xfffe, 0xffff,\n+\t\t\t\t\t 0x0, 0x1, 0x2, 0x3 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfffffff3, 0xfffffff4,\n+\t\t\t\t\t 0xfffffff5, 0xfffffff6 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0xfffffffffffffff0,\n+\t\t\t\t\t 0xfffffffffffffff1 };\n+\n+#define TEST_MSG \"VSRA_N\"\n+void exec_vsra_n (void)\n+{\n+  /* Basic test: y=vsra_n(x,v), then store the result.  */\n+#define TEST_VSRA_N(Q, T1, T2, W, N, V)\t\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    vsra##Q##_n_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\\\n+\t\t\tVECT_VAR(vector2, T1, W, N),\t\t\t\\\n+\t\t\tV);\t\t\t\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector_res, T1, W, N))\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+  DECL_VARIABLE_ALL_VARIANTS(vector2);\n+  DECL_VARIABLE_ALL_VARIANTS(vector_res);\n+\n+  clean_results ();\n+\n+  /* Initialize input \"vector\" from \"buffer\".  */\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+\n+  /* Choose arbitrary initialization values.  */\n+  VDUP(vector2, , int, s, 8, 8, 0x11);\n+  VDUP(vector2, , int, s, 16, 4, 0x22);\n+  VDUP(vector2, , int, s, 32, 2, 0x33);\n+  VDUP(vector2, , int, s, 64, 1, 0x44);\n+  VDUP(vector2, , uint, u, 8, 8, 0x55);\n+  VDUP(vector2, , uint, u, 16, 4, 0x66);\n+  VDUP(vector2, , uint, u, 32, 2, 0x77);\n+  VDUP(vector2, , uint, u, 64, 1, 0x88);\n+\n+  VDUP(vector2, q, int, s, 8, 16, 0x11);\n+  VDUP(vector2, q, int, s, 16, 8, 0x22);\n+  VDUP(vector2, q, int, s, 32, 4, 0x33);\n+  VDUP(vector2, q, int, s, 64, 2, 0x44);\n+  VDUP(vector2, q, uint, u, 8, 16, 0x55);\n+  VDUP(vector2, q, uint, u, 16, 8, 0x66);\n+  VDUP(vector2, q, uint, u, 32, 4, 0x77);\n+  VDUP(vector2, q, uint, u, 64, 2, 0x88);\n+\n+  /* Choose shift amount arbitrarily.  */\n+  TEST_VSRA_N(, int, s, 8, 8, 1);\n+  TEST_VSRA_N(, int, s, 16, 4, 12);\n+  TEST_VSRA_N(, int, s, 32, 2, 2);\n+  TEST_VSRA_N(, int, s, 64, 1, 32);\n+  TEST_VSRA_N(, uint, u, 8, 8, 2);\n+  TEST_VSRA_N(, uint, u, 16, 4, 3);\n+  TEST_VSRA_N(, uint, u, 32, 2, 5);\n+  TEST_VSRA_N(, uint, u, 64, 1, 33);\n+\n+  TEST_VSRA_N(q, int, s, 8, 16, 1);\n+  TEST_VSRA_N(q, int, s, 16, 8, 12);\n+  TEST_VSRA_N(q, int, s, 32, 4, 2);\n+  TEST_VSRA_N(q, int, s, 64, 2, 32);\n+  TEST_VSRA_N(q, uint, u, 8, 16, 2);\n+  TEST_VSRA_N(q, uint, u, 16, 8, 3);\n+  TEST_VSRA_N(q, uint, u, 32, 4, 5);\n+  TEST_VSRA_N(q, uint, u, 64, 2, 33);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, int, 64, 1, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 64, 1, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, int, 8, 16, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, int, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, int, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, int, 64, 2, PRIx64, expected, \"\");\n+  CHECK(TEST_MSG, uint, 8, 16, PRIx8, expected, \"\");\n+  CHECK(TEST_MSG, uint, 16, 8, PRIx16, expected, \"\");\n+  CHECK(TEST_MSG, uint, 32, 4, PRIx32, expected, \"\");\n+  CHECK(TEST_MSG, uint, 64, 2, PRIx64, expected, \"\");\n+}\n+\n+int main (void)\n+{\n+  exec_vsra_n ();\n+  return 0;\n+}"}]}