{"sha": "7da4eae3dcef6fd5d955eb2c80c453aa52368004", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RhNGVhZTNkY2VmNmZkNWQ5NTVlYjJjODBjNDUzYWE1MjM2ODAwNA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-23T21:23:39Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-23T21:23:39Z"}, "message": "c++: excessive instantiation during CTAD [PR101174]\n\nWe set DECL_CONTEXT on implicitly generated deduction guides so that\ntheir access is consistent with that of the constructor.  But this\napparently leads to excessive instantiation in some cases, ultimately\nbecause instantiation of a deduction guide should be independent of\ninstantiation of the resulting class specialization, but setting the\nDECL_CONTEXT of the former to the latter breaks this independence.\n\nTo fix this, this patch makes push_access_scope handle artificial\ndeduction guides specifically rather than setting their DECL_CONTEXT\nin build_deduction_guide.  We could alternatively make the class\nbefriend the guide via DECL_BEFRIENDING_CLASSES, but that wouldn't\nbe a complete fix and would break class-deduction-access3.C below\nsince friendship isn't transitive.\n\n\tPR c++/101174\n\ngcc/cp/ChangeLog:\n\n\t* pt.c (push_access_scope): For artificial deduction guides,\n\tset the access scope to that of the constructor.\n\t(pop_access_scope): Likewise.\n\t(build_deduction_guide): Don't set DECL_CONTEXT on the guide.\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/23_containers/multiset/cons/deduction.cc:\n\tUncomment CTAD example that was rejected by this bug.\n\t* testsuite/23_containers/set/cons/deduction.cc: Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/class-deduction-access3.C: New test.\n\t* g++.dg/cpp1z/class-deduction91.C: New test.", "tree": {"sha": "050c717c3758571ee7bf7c088325ef08291139d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/050c717c3758571ee7bf7c088325ef08291139d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7da4eae3dcef6fd5d955eb2c80c453aa52368004", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7da4eae3dcef6fd5d955eb2c80c453aa52368004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7da4eae3dcef6fd5d955eb2c80c453aa52368004", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7da4eae3dcef6fd5d955eb2c80c453aa52368004/comments", "author": null, "committer": null, "parents": [{"sha": "f72f71c52e0d48551c2a8d6a28c349a551fef905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f72f71c52e0d48551c2a8d6a28c349a551fef905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f72f71c52e0d48551c2a8d6a28c349a551fef905"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "5c55507203a3fdccb6a8cc971683d7912050f20c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da4eae3dcef6fd5d955eb2c80c453aa52368004/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da4eae3dcef6fd5d955eb2c80c453aa52368004/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7da4eae3dcef6fd5d955eb2c80c453aa52368004", "patch": "@@ -236,6 +236,10 @@ push_access_scope (tree t)\n     push_nested_class (DECL_FRIEND_CONTEXT (t));\n   else if (DECL_CLASS_SCOPE_P (t))\n     push_nested_class (DECL_CONTEXT (t));\n+  else if (deduction_guide_p (t) && DECL_ARTIFICIAL (t))\n+    /* An artificial deduction guide should have the same access as\n+       the constructor.  */\n+    push_nested_class (TREE_TYPE (TREE_TYPE (t)));\n   else\n     push_to_top_level ();\n \n@@ -255,7 +259,9 @@ pop_access_scope (tree t)\n   if (TREE_CODE (t) == FUNCTION_DECL)\n     current_function_decl = saved_access_scope->pop();\n \n-  if (DECL_FRIEND_CONTEXT (t) || DECL_CLASS_SCOPE_P (t))\n+  if (DECL_FRIEND_CONTEXT (t)\n+      || DECL_CLASS_SCOPE_P (t)\n+      || (deduction_guide_p (t) && DECL_ARTIFICIAL (t)))\n     pop_nested_class ();\n   else\n     pop_from_top_level ();\n@@ -28804,9 +28810,6 @@ build_deduction_guide (tree type, tree ctor, tree outer_args, tsubst_flags_t com\n     DECL_ABSTRACT_ORIGIN (ded_tmpl) = fn_tmpl;\n   if (ci)\n     set_constraints (ded_tmpl, ci);\n-  /* The artificial deduction guide should have same access as the\n-     constructor.  */\n-  DECL_CONTEXT (ded_fn) = type;\n \n   return ded_tmpl;\n }"}, {"sha": "9df94808e86191f295eacfd4e004f61437e14f47", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction-access3.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da4eae3dcef6fd5d955eb2c80c453aa52368004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction-access3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da4eae3dcef6fd5d955eb2c80c453aa52368004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction-access3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction-access3.C?ref=7da4eae3dcef6fd5d955eb2c80c453aa52368004", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile { target c++17 } }\n+\n+template<class>\n+struct Cont;\n+\n+template<class T>\n+class Base\n+{\n+  using type = T;\n+  friend Cont<T>;\n+};\n+\n+template<class T>\n+struct Cont\n+{\n+  using argument_type = typename Base<T>::type;\n+  Cont(T, argument_type);\n+};\n+\n+Cont c(1, 1);"}, {"sha": "f474c8e35ece5d8d985062047e05589e4f703142", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction91.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da4eae3dcef6fd5d955eb2c80c453aa52368004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction91.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da4eae3dcef6fd5d955eb2c80c453aa52368004/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction91.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction91.C?ref=7da4eae3dcef6fd5d955eb2c80c453aa52368004", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/101174\n+// { dg-do compile { target c++17 } }\n+\n+struct S { using type = int; };\n+\n+template<class T = int, class U = S>\n+struct multiset {\n+  using type = typename U::type;\n+  multiset(T);\n+  multiset(U);\n+};\n+\n+template<class T>\n+multiset(T) -> multiset<T>;\n+\n+multiset c(42);"}, {"sha": "8b7a16042a4cc75b8801446bf9dd89f6de9a199a", "filename": "libstdc++-v3/testsuite/23_containers/multiset/cons/deduction.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da4eae3dcef6fd5d955eb2c80c453aa52368004/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da4eae3dcef6fd5d955eb2c80c453aa52368004/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fcons%2Fdeduction.cc?ref=7da4eae3dcef6fd5d955eb2c80c453aa52368004", "patch": "@@ -19,11 +19,9 @@ static_assert(std::is_same_v<\n \t      decltype(std::multiset{{1, 2, 3}, std::less<int>{}, {}}),\n \t      std::multiset<int>>);\n \n-/* FIXME: GCC 12 rejects this due to PR c++/101174\n static_assert(std::is_same_v<\n \t      decltype(std::multiset{{1, 2, 3}, std::less<int>{}}),\n \t      std::multiset<int>>);\n-*/\n \n static_assert(std::is_same_v<\n \t      decltype(std::multiset{{1, 2, 3}, SimpleAllocator<int>{}}),"}, {"sha": "14f36b7c05dd2583f5f44668dda0fbbbe34f0948", "filename": "libstdc++-v3/testsuite/23_containers/set/cons/deduction.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da4eae3dcef6fd5d955eb2c80c453aa52368004/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da4eae3dcef6fd5d955eb2c80c453aa52368004/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fcons%2Fdeduction.cc?ref=7da4eae3dcef6fd5d955eb2c80c453aa52368004", "patch": "@@ -20,12 +20,10 @@ static_assert(std::is_same_v<\n \t\t    std::less<int>{}, {}}),\n \t      std::set<int>>);\n \n-/* FIXME: GCC 12 rejects this due to PR c++/101174\n static_assert(std::is_same_v<\n \t      decltype(std::set{{1, 2, 3},\n \t\t    std::less<int>{}}),\n \t      std::set<int>>);\n-*/\n \n static_assert(std::is_same_v<\n \t      decltype(std::set{{1, 2, 3},"}]}