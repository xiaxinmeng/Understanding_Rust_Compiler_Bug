{"sha": "940d5b56990fdf171f49517ae102673817b9c869", "node_id": "C_kwDOANBUbNoAKDk0MGQ1YjU2OTkwZmRmMTcxZjQ5NTE3YWUxMDI2NzM4MTdiOWM4Njk", "commit": {"author": {"name": "Sinan", "email": "sinan.lin@linux.alibaba.com", "date": "2022-11-28T19:41:17Z"}, "committer": {"name": "Jeff Law", "email": "jlaw@ventanamicro.com", "date": "2022-11-28T19:43:20Z"}, "message": "riscv: improve cost model for loading 64bit constant in rv32\n\nThe motivation of this patch is to correct the wrong estimation of the number of instructions needed for loading a 64bit constant in rv32 in the current cost model(riscv_interger_cost). According to the current implementation, if a constant requires more than 3 instructions(riscv_const_insn and riscv_legitimate_constant_p), then the constant will be put into constant pool when expanding gimple to rtl(legitimate_constant_p hook and emit_move_insn). So the inaccurate cost model leads to the suboptimal codegen in rv32 and the wrong estimation part could be corrected through this fix.\n\ne.g. the current codegen for loading 0x839290001 in rv32\n\n  lui     a5,%hi(.LC0)\n  lw      a0,%lo(.LC0)(a5)\n  lw      a1,%lo(.LC0+4)(a5)\n.LC0:\n  .word   958988289\n  .word   8\n\noutput after this patch\n\n  li a0,958988288\n  addi a0,a0,1\n  li a1,8\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv.cc (riscv_build_integer): Improve some cases\n\tof loading 64bit constants for rv32.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rv32-load-64bit-constant.c: New test.", "tree": {"sha": "07b9435ef1f585358c1e8f4574ec2cd0c8757aaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07b9435ef1f585358c1e8f4574ec2cd0c8757aaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/940d5b56990fdf171f49517ae102673817b9c869", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/940d5b56990fdf171f49517ae102673817b9c869", "html_url": "https://github.com/Rust-GCC/gccrs/commit/940d5b56990fdf171f49517ae102673817b9c869", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/940d5b56990fdf171f49517ae102673817b9c869/comments", "author": {"login": "linsinan1995", "id": 47880367, "node_id": "MDQ6VXNlcjQ3ODgwMzY3", "avatar_url": "https://avatars.githubusercontent.com/u/47880367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/linsinan1995", "html_url": "https://github.com/linsinan1995", "followers_url": "https://api.github.com/users/linsinan1995/followers", "following_url": "https://api.github.com/users/linsinan1995/following{/other_user}", "gists_url": "https://api.github.com/users/linsinan1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/linsinan1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/linsinan1995/subscriptions", "organizations_url": "https://api.github.com/users/linsinan1995/orgs", "repos_url": "https://api.github.com/users/linsinan1995/repos", "events_url": "https://api.github.com/users/linsinan1995/events{/privacy}", "received_events_url": "https://api.github.com/users/linsinan1995/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "868fc62791b6b0f10484cc6fa15f81911418e605", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/868fc62791b6b0f10484cc6fa15f81911418e605", "html_url": "https://github.com/Rust-GCC/gccrs/commit/868fc62791b6b0f10484cc6fa15f81911418e605"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "05bdba5ab4d63e0fae19b5b16bc8dc2446d96dee", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940d5b56990fdf171f49517ae102673817b9c869/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940d5b56990fdf171f49517ae102673817b9c869/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=940d5b56990fdf171f49517ae102673817b9c869", "patch": "@@ -625,6 +625,30 @@ riscv_build_integer (struct riscv_integer_op *codes, HOST_WIDE_INT value,\n \t}\n     }\n \n+  if (!TARGET_64BIT\n+      && (value > INT32_MAX || value < INT32_MIN))\n+    {\n+      unsigned HOST_WIDE_INT loval = sext_hwi (value, 32);\n+      unsigned HOST_WIDE_INT hival = sext_hwi ((value - loval) >> 32, 32);\n+      struct riscv_integer_op alt_codes[RISCV_MAX_INTEGER_OPS];\n+      struct riscv_integer_op hicode[RISCV_MAX_INTEGER_OPS];\n+      int hi_cost, lo_cost;\n+\n+      hi_cost = riscv_build_integer_1 (hicode, hival, mode);\n+      if (hi_cost < cost)\n+\t{\n+\t  lo_cost = riscv_build_integer_1 (alt_codes, loval, mode);\n+\t  if (lo_cost + hi_cost < cost)\n+\t    {\n+\t      memcpy (codes, alt_codes,\n+\t\t      lo_cost * sizeof (struct riscv_integer_op));\n+\t      memcpy (codes + lo_cost, hicode,\n+\t\t      hi_cost * sizeof (struct riscv_integer_op));\n+\t      cost = lo_cost + hi_cost;\n+\t    }\n+\t}\n+    }\n+\n   return cost;\n }\n "}, {"sha": "954e1ddf1c0a6b3fa82a2ae7499f8c21498156ed", "filename": "gcc/testsuite/gcc.target/riscv/rv32-load-64bit-constant.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/940d5b56990fdf171f49517ae102673817b9c869/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frv32-load-64bit-constant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/940d5b56990fdf171f49517ae102673817b9c869/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frv32-load-64bit-constant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frv32-load-64bit-constant.c?ref=940d5b56990fdf171f49517ae102673817b9c869", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32im -mabi=ilp32\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } } */\n+\n+\n+/* This test only applies to RV32. Some of 64bit constants in this test will be put\n+into the constant pool in RV64, since RV64 might need one extra instruction to load\n+64bit constant. */\n+\n+unsigned long long\n+rv32_mov_64bit_int1 (void)\n+{\n+  return 0x739290001LL;\n+}\n+\n+unsigned long long\n+rv32_mov_64bit_int2 (void)\n+{\n+  return 0x839290001LL;\n+}\n+\n+unsigned long long\n+rv32_mov_64bit_int3 (void)\n+{\n+  return 0x3929000139290000LL;\n+}\n+\n+unsigned long long\n+rv32_mov_64bit_int4 (void)\n+{\n+  return 0x3929001139290000LL;\n+}\n+\n+unsigned long long\n+rv32_mov_64bit_int5 (void)\n+{\n+  return 0x14736def39290000LL;\n+}\n+\n+/* { dg-final { scan-assembler-not \"lw\\t\" } } */"}]}