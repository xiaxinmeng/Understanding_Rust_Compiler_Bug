{"sha": "13668284c944a88ee0bf50922fbd0253d586c523", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM2NjgyODRjOTQ0YTg4ZWUwYmY1MDkyMmZiZDAyNTNkNTg2YzUyMw==", "commit": {"author": {"name": "Mark Eggleston", "email": "mark.eggleston@codethink.com", "date": "2019-08-28T10:21:31Z"}, "committer": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2019-08-28T10:21:31Z"}, "message": "Stated standards in documentation\n\nCorrect the stated standards in documentation and for intrinsics and\nspecific intrinsics.  In C_SIZEOF the printed value is T not .TRUE..\nIn IPARITY example wrap BOZ constants in calls to INT.\n\nFrom-SVN: r274988", "tree": {"sha": "eb153d3a67a81bb29b3fd3c8096e508c71549865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb153d3a67a81bb29b3fd3c8096e508c71549865"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13668284c944a88ee0bf50922fbd0253d586c523", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13668284c944a88ee0bf50922fbd0253d586c523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13668284c944a88ee0bf50922fbd0253d586c523", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13668284c944a88ee0bf50922fbd0253d586c523/comments", "author": {"login": "markeggleston", "id": 42180582, "node_id": "MDQ6VXNlcjQyMTgwNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/42180582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markeggleston", "html_url": "https://github.com/markeggleston", "followers_url": "https://api.github.com/users/markeggleston/followers", "following_url": "https://api.github.com/users/markeggleston/following{/other_user}", "gists_url": "https://api.github.com/users/markeggleston/gists{/gist_id}", "starred_url": "https://api.github.com/users/markeggleston/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markeggleston/subscriptions", "organizations_url": "https://api.github.com/users/markeggleston/orgs", "repos_url": "https://api.github.com/users/markeggleston/repos", "events_url": "https://api.github.com/users/markeggleston/events{/privacy}", "received_events_url": "https://api.github.com/users/markeggleston/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b778f9f4a9606cff7c9b9b8a923e17f291c527a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b778f9f4a9606cff7c9b9b8a923e17f291c527a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b778f9f4a9606cff7c9b9b8a923e17f291c527a"}], "stats": {"total": 346, "additions": 178, "deletions": 168}, "files": [{"sha": "6b760ce106efbbab6404a4c9c42f3a4ac64a9b77", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13668284c944a88ee0bf50922fbd0253d586c523/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13668284c944a88ee0bf50922fbd0253d586c523/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=13668284c944a88ee0bf50922fbd0253d586c523", "patch": "@@ -1,3 +1,10 @@\n+2019-08-28  Mark Eggleston  <mark.eggleston@codethink.com>\n+\n+\t* intrinsics.text: Corrected stated standard for intrinsics\n+\tand specific intrinsics where necessary.  Also in C_SIZEOF the\n+\tprinted value is T not .TRUE.. In IPARITY example wrap BOZ\n+\tconstants in calls to INT.\n+\n 2019-08-27  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/91496"}, {"sha": "7e01e94fd4584c1bcd226d75ae7833784de2d8e8", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 171, "deletions": 168, "changes": 339, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13668284c944a88ee0bf50922fbd0253d586c523/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13668284c944a88ee0bf50922fbd0253d586c523/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=13668284c944a88ee0bf50922fbd0253d586c523", "patch": "@@ -657,7 +657,7 @@ This function is for compatibility only and should be avoided in favor of\n standard constructs wherever possible.\n \n @item @emph{Standard}:\n-GNU Extension, enabled with @option{-fdec-math}\n+GNU extension, enabled with @option{-fdec-math}\n \n @item @emph{Class}:\n Elemental function\n@@ -687,8 +687,8 @@ end program test_acosd\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument         @tab Return type     @tab Standard\n-@item @code{ACOSD(X)}  @tab @code{REAL(4) X} @tab @code{REAL(4)}  @tab GNU Extension\n-@item @code{DACOSD(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}  @tab GNU Extension\n+@item @code{ACOSD(X)}  @tab @code{REAL(4) X} @tab @code{REAL(4)}  @tab GNU extension\n+@item @code{DACOSD(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}  @tab GNU extension\n @end multitable\n \n @item @emph{See also}:\n@@ -811,7 +811,7 @@ end program test_adjustl\n Spaces are inserted at the start of the string as needed.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -892,7 +892,7 @@ end program test_aimag\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name               @tab Argument            @tab Return type     @tab Standard\n-@item @code{AIMAG(Z)}    @tab @code{COMPLEX Z}    @tab @code{REAL}     @tab GNU extension\n+@item @code{AIMAG(Z)}    @tab @code{COMPLEX Z}    @tab @code{REAL}     @tab Fortran 77 and later\n @item @code{DIMAG(Z)}    @tab @code{COMPLEX(8) Z} @tab @code{REAL(8)}  @tab GNU extension\n @item @code{IMAG(Z)}     @tab @code{COMPLEX Z}    @tab @code{REAL}     @tab GNU extension\n @item @code{IMAGPART(Z)} @tab @code{COMPLEX Z}    @tab @code{REAL}     @tab GNU extension\n@@ -1022,7 +1022,7 @@ after 3 seconds.\n in the array along dimension @var{DIM}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -1088,7 +1088,7 @@ end program test_all\n status of @var{ARRAY} and @var{SCALAR}, respectively.\n \n @item @emph{Standard}:\n-Fortran 95 and later.  Note, the @code{SCALAR=} keyword and allocatable\n+Fortran 90 and later.  Note, the @code{SCALAR=} keyword and allocatable\n scalar entities are available in Fortran 2003 and later.\n \n @item @emph{Class}:\n@@ -1251,7 +1251,7 @@ end program test_anint\n @var{MASK} along dimension @var{DIM} are @code{.TRUE.}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -1377,7 +1377,7 @@ This function is for compatibility only and should be avoided in favor of\n standard constructs wherever possible.\n \n @item @emph{Standard}:\n-GNU Extension, enabled with @option{-fdec-math}.\n+GNU extension, enabled with @option{-fdec-math}.\n \n @item @emph{Class}:\n Elemental function\n@@ -1407,8 +1407,8 @@ end program test_asind\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n-@item @code{ASIND(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab GNU Extension\n-@item @code{DASIND(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU Extension\n+@item @code{ASIND(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab GNU extension\n+@item @code{DASIND(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension\n @end multitable\n \n @item @emph{See also}:\n@@ -1485,7 +1485,7 @@ Inverse function: @gol\n @var{POINTER} or if @var{POINTER} is associated with the target @var{TARGET}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -1578,7 +1578,7 @@ Elemental function\n @multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL} or @code{COMPLEX};\n if @var{Y} is present, @var{X} shall be REAL.\n-@item @var{Y} shall be of the same type and kind as @var{X}.\n+@item @var{Y} @tab The type and kind type parameter shall be the same as @var{X}.\n @end multitable\n \n @item @emph{Return value}:\n@@ -1628,7 +1628,7 @@ This function is for compatibility only and should be avoided in favor of\n standard constructs wherever possible.\n \n @item @emph{Standard}:\n-GNU Extension, enabled with @option{-fdec-math}.\n+GNU extension, enabled with @option{-fdec-math}.\n \n @item @emph{Class}:\n Elemental function\n@@ -1643,7 +1643,7 @@ Elemental function\n @multitable @columnfractions .15 .70\n @item @var{X} @tab The type shall be @code{REAL} or @code{COMPLEX};\n if @var{Y} is present, @var{X} shall be REAL.\n-@item @var{Y} shall be of the same type and kind as @var{X}.\n+@item @var{Y} @tab The type and kind type parameter shall be the same as @var{X}.\n @end multitable\n \n @item @emph{Return value}:\n@@ -1664,8 +1664,8 @@ end program test_atand\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n-@item @code{ATAND(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab GNU Extension\n-@item @code{DATAND(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU Extension\n+@item @code{ATAND(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab GNU extension\n+@item @code{DATAND(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab GNU extension\n @end multitable\n \n @item @emph{See also}:\n@@ -1738,7 +1738,6 @@ Alias: @gol\n @ref{ATAN} @gol\n Degrees function: @gol\n @ref{ATAN2D}\n-\n @end table\n \n \n@@ -1761,7 +1760,7 @@ This function is for compatibility only and should be avoided in favor of\n standard constructs wherever possible.\n \n @item @emph{Standard}:\n-GNU Extension, enabled with @option{-fdec-math}.\n+GNU extension, enabled with @option{-fdec-math}.\n \n @item @emph{Class}:\n Elemental function\n@@ -1798,8 +1797,8 @@ end program test_atan2d\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name                @tab Argument            @tab Return type    @tab Standard\n-@item @code{ATAN2D(X, Y)}  @tab @code{REAL(4) X, Y} @tab @code{REAL(4)} @tab GNU Extension\n-@item @code{DATAN2D(X, Y)} @tab @code{REAL(8) X, Y} @tab @code{REAL(8)} @tab GNU Extension\n+@item @code{ATAN2D(X, Y)}  @tab @code{REAL(4) X, Y} @tab @code{REAL(4)} @tab GNU extension\n+@item @code{DATAN2D(X, Y)} @tab @code{REAL(8) X, Y} @tab @code{REAL(8)} @tab GNU extension\n @end multitable\n \n @item @emph{See also}:\n@@ -2483,7 +2482,7 @@ execution continues normally afterwards. The backtrace information is printed\n to the unit corresponding to @code{ERROR_UNIT} in @code{ISO_FORTRAN_ENV}.\n \n @item @emph{Standard}:\n-GNU Extension\n+GNU extension\n \n @item @emph{Class}:\n Subroutine\n@@ -2910,7 +2909,7 @@ represented by the type of @var{I}.  The result of @code{BIT_SIZE(I)} is\n independent of the actual value of @var{I}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -3027,7 +3026,7 @@ The return value is of type @code{LOGICAL} and of the default kind.\n in @var{I} is set.  The counting of the bits starts at 0.\n \n @item @emph{Standard}:\n-Fortran 95 and later, has overloads that are GNU extensions\n+Fortran 90 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -3060,7 +3059,7 @@ end program test_btest\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name           @tab Argument         @tab Return type             @tab Standard\n-@item @code{BTEST(I,POS)} @tab @code{INTEGER I,POS} @tab @code{LOGICAL} @tab F95 and later\n+@item @code{BTEST(I,POS)} @tab @code{INTEGER I,POS} @tab @code{LOGICAL} @tab Fortran 95 and later\n @item @code{BBTEST(I,POS)} @tab @code{INTEGER(1) I,POS} @tab @code{LOGICAL(1)} @tab GNU extension\n @item @code{BITEST(I,POS)} @tab @code{INTEGER(2) I,POS} @tab @code{LOGICAL(2)} @tab GNU extension\n @item @code{BJTEST(I,POS)} @tab @code{INTEGER(4) I,POS} @tab @code{LOGICAL(4)} @tab GNU extension\n@@ -3380,7 +3379,7 @@ the sizes of the data pointed to by these components.\n    print *, (c_sizeof(s)/c_sizeof(r) == 5)\n    end\n @end smallexample\n-The example will print @code{.TRUE.} unless you are using a platform\n+The example will print @code{T} unless you are using a platform\n where default @code{REAL} variables are unusually padded.\n \n @item @emph{See also}:\n@@ -3477,7 +3476,7 @@ end program test_char\n @item @emph{Specific names}:\n @multitable @columnfractions .18 .18 .24 .25\n @item Name           @tab Argument         @tab Return type             @tab Standard\n-@item @code{CHAR(I)} @tab @code{INTEGER I} @tab @code{CHARACTER(LEN=1)} @tab F77 and later\n+@item @code{CHAR(I)} @tab @code{INTEGER I} @tab @code{CHARACTER(LEN=1)} @tab Fortran 77 and later\n @end multitable\n \n @item @emph{Note}:\n@@ -4046,7 +4045,7 @@ Inquiry function of the module @code{ISO_FORTRAN_ENV}\n @code{STR = COMPILER_OPTIONS()}\n \n @item @emph{Arguments}:\n-None.\n+None\n \n @item @emph{Return value}:\n The return value is a default-kind string with system-dependent length.\n@@ -4090,7 +4089,7 @@ Inquiry function of the module @code{ISO_FORTRAN_ENV}\n @code{STR = COMPILER_VERSION()}\n \n @item @emph{Arguments}:\n-None.\n+None\n \n @item @emph{Return value}:\n The return value is a default-kind string with system-dependent length.\n@@ -4175,7 +4174,7 @@ end program test_complex\n then the result is @code{(x, -y)}\n \n @item @emph{Standard}:\n-Fortran 77 and later, has overloads that are GNU extensions\n+Fortran 77 and later, has an overload that is a GNU extension\n \n @item @emph{Class}:\n Elemental function\n@@ -4206,7 +4205,6 @@ end program test_conjg\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Argument             @tab Return type       @tab Standard\n-@item @code{CONJG(Z)}  @tab @code{COMPLEX Z}     @tab @code{COMPLEX}    @tab GNU extension\n @item @code{DCONJG(Z)} @tab @code{COMPLEX(8) Z}  @tab @code{COMPLEX(8)} @tab GNU extension\n @end multitable\n @end table\n@@ -4292,7 +4290,7 @@ This function is for compatibility only and should be avoided in favor of\n standard constructs wherever possible.\n \n @item @emph{Standard}:\n-GNU Extension, enabled with @option{-fdec-math}.\n+GNU extension, enabled with @option{-fdec-math}.\n \n @item @emph{Class}:\n Elemental function\n@@ -4322,9 +4320,9 @@ end program test_cosd\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument            @tab Return type       @tab Standard\n-@item @code{COSD(X)}   @tab @code{REAL(4) X}    @tab @code{REAL(4)}    @tab GNU Extension\n-@item @code{DCOSD(X)}  @tab @code{REAL(8) X}    @tab @code{REAL(8)}    @tab GNU Extension\n-@item @code{CCOSD(X)}  @tab @code{COMPLEX(4) X} @tab @code{COMPLEX(4)} @tab GNU Extension\n+@item @code{COSD(X)}   @tab @code{REAL(4) X}    @tab @code{REAL(4)}    @tab GNU extension\n+@item @code{DCOSD(X)}  @tab @code{REAL(8) X}    @tab @code{REAL(8)}    @tab GNU extension\n+@item @code{CCOSD(X)}  @tab @code{COMPLEX(4) X} @tab @code{COMPLEX(4)} @tab GNU extension\n @item @code{ZCOSD(X)}  @tab @code{COMPLEX(8) X} @tab @code{COMPLEX(8)} @tab GNU extension\n @item @code{CDCOSD(X)} @tab @code{COMPLEX(8) X} @tab @code{COMPLEX(8)} @tab GNU extension\n @end multitable\n@@ -4408,7 +4406,7 @@ This function is for compatibility only and should be avoided in favor of\n standard constructs wherever possible.\n \n @item @emph{Standard}:\n-GNU Extension, enabled with @option{-fdec-math}.\n+GNU extension, enabled with @option{-fdec-math}.\n \n @item @emph{Class}:\n Elemental function\n@@ -4435,8 +4433,8 @@ end program test_cotan\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type     @tab Standard\n-@item @code{COTAN(X)}   @tab @code{REAL(4) X}  @tab @code{REAL(4)}  @tab GNU Extension\n-@item @code{DCOTAN(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}  @tab GNU Extension\n+@item @code{COTAN(X)}   @tab @code{REAL(4) X}  @tab @code{REAL(4)}  @tab GNU extension\n+@item @code{DCOTAN(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}  @tab GNU extension\n @end multitable\n \n @item @emph{See also}:\n@@ -4461,7 +4459,7 @@ Degrees function: @gol\n @code{COSD(x)} divided by @code{SIND(x)}, or @code{1 / TAND(x)}.\n \n @item @emph{Standard}:\n-GNU Extension, enabled with @option{-fdec-math}.\n+GNU extension, enabled with @option{-fdec-math}.\n \n This function is for compatibility only and should be avoided in favor of\n standard constructs wherever possible.\n@@ -4491,8 +4489,8 @@ end program test_cotand\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type     @tab Standard\n-@item @code{COTAND(X)}   @tab @code{REAL(4) X}  @tab @code{REAL(4)}  @tab GNU Extension\n-@item @code{DCOTAND(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}  @tab GNU Extension\n+@item @code{COTAND(X)}   @tab @code{REAL(4) X}  @tab @code{REAL(4)}  @tab GNU extension\n+@item @code{DCOTAND(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}  @tab GNU extension\n @end multitable\n \n @item @emph{See also}:\n@@ -4521,7 +4519,7 @@ If the array has zero size, or all of the elements of @var{MASK} are\n @code{.FALSE.}, then the result is @code{0}.\n \n @item @emph{Standard}:\n-Fortran 95 and later, with @var{KIND} argument Fortran 2003 and later\n+Fortran 90 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -4647,7 +4645,7 @@ sections of @var{ARRAY} along the given dimension are shifted.  Elements\n shifted out one end of each rank one section are shifted back in the other end.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -4778,7 +4776,7 @@ Unavailable time and date parameters return blanks.\n @end multitable\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Subroutine\n@@ -4928,7 +4926,7 @@ model representation of @var{X}.  For example, on a system using a 32-bit\n floating point representation, a default real number would likely return 24.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -5032,7 +5030,7 @@ is @code{SUM(CONJG(VECTOR_A)*VECTOR_B)}. If the vectors are @code{LOGICAL},\n the result is @code{ANY(VECTOR_A .AND. VECTOR_B)}.  \n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -5362,7 +5360,7 @@ following are copied in depending on the type of @var{ARRAY}.\n @end multitable\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -5411,7 +5409,7 @@ end program test_eoshift\n as @var{X} such that @math{1 + E > 1}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -5888,7 +5886,7 @@ end program test_exp\n is zero the value returned is zero. \n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -6506,7 +6504,7 @@ END PROGRAM\n representation of @code{X}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -6803,8 +6801,7 @@ end program test_gamma\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Argument         @tab Return type       @tab Standard\n-@item @code{GAMMA(X)}  @tab @code{REAL(4) X} @tab @code{REAL(4)}    @tab GNU Extension\n-@item @code{DGAMMA(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}    @tab GNU Extension\n+@item @code{DGAMMA(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}    @tab GNU extension\n @end multitable\n \n @item @emph{See also}:\n@@ -7464,7 +7461,7 @@ be obtained, or to a blank string otherwise.\n the model of the type of @code{X}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -7660,7 +7657,7 @@ END PROGRAM\n Bitwise logical @code{AND}.\n \n @item @emph{Standard}:\n-Fortran 95 and later, has overloads that are GNU extensions\n+Fortran 90 and later, with boz-literal-constant Fortran 2008 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -7694,7 +7691,7 @@ END PROGRAM\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument            @tab Return type       @tab Standard\n-@item @code{IAND(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 95 and later\n+@item @code{IAND(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 90 and later\n @item @code{BIAND(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n @item @code{IIAND(A)} @tab @code{INTEGER(2) A} @tab @code{INTEGER(2)} @tab GNU extension\n @item @code{JIAND(A)} @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab GNU extension\n@@ -7801,7 +7798,7 @@ Function\n @code{RESULT = IARGC()}\n \n @item @emph{Arguments}:\n-None.\n+None\n \n @item @emph{Return value}:\n The number of command line arguments, type @code{INTEGER(4)}.\n@@ -7836,7 +7833,7 @@ Fortran 2003 functions and subroutines: @gol\n @var{POS} set to zero.\n \n @item @emph{Standard}:\n-Fortran 95 and later, has overloads that are GNU extensions\n+Fortran 90 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -7857,7 +7854,7 @@ The return value is of type @code{INTEGER} and of the same kind as\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument            @tab Return type       @tab Standard\n-@item @code{IBCLR(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 95 and later\n+@item @code{IBCLR(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 90 and later\n @item @code{BBCLR(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n @item @code{IIBCLR(A)} @tab @code{INTEGER(2) A} @tab @code{INTEGER(2)} @tab GNU extension\n @item @code{JIBCLR(A)} @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab GNU extension\n@@ -7894,7 +7891,7 @@ zeroed.  The value of @code{POS+LEN} must be less than or equal to the\n value @code{BIT_SIZE(I)}.\n \n @item @emph{Standard}:\n-Fortran 95 and later, has overloads that are GNU extensions\n+Fortran 90 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -7916,7 +7913,7 @@ The return value is of type @code{INTEGER} and of the same kind as\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument            @tab Return type       @tab Standard\n-@item @code{IBITS(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 95 and later\n+@item @code{IBITS(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 90 and later\n @item @code{BBITS(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n @item @code{IIBITS(A)} @tab @code{INTEGER(2) A} @tab @code{INTEGER(2)} @tab GNU extension\n @item @code{JIBITS(A)} @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab GNU extension\n@@ -7949,7 +7946,7 @@ The return value is of type @code{INTEGER} and of the same kind as\n @var{POS} set to one.\n \n @item @emph{Standard}:\n-Fortran 95 and later, has overloads that are GNU extensions\n+Fortran 90 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -7970,7 +7967,7 @@ The return value is of type @code{INTEGER} and of the same kind as\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument            @tab Return type       @tab Standard\n-@item @code{IBSET(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 95 and later\n+@item @code{IBSET(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 90 and later\n @item @code{BBSET(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n @item @code{IIBSET(A)} @tab @code{INTEGER(2) A} @tab @code{INTEGER(2)} @tab GNU extension\n @item @code{JIBSET(A)} @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab GNU extension\n@@ -8001,7 +7998,7 @@ The correspondence between characters and their codes is not necessarily\n the same across different GNU Fortran implementations.\n \n @item @emph{Standard}:\n-Fortran 95 and later, with @var{KIND} argument Fortran 2003 and later\n+Fortran 77 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -8133,7 +8130,7 @@ end program test_idate\n @var{J}.\n \n @item @emph{Standard}:\n-Fortran 95 and later, has overloads that are GNU extensions\n+Fortran 90 and later, with boz-literal-constant Fortran 2008 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -8158,7 +8155,7 @@ type parameter of the other argument as-if a call to @ref{INT} occurred.\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument            @tab Return type       @tab Standard\n-@item @code{IEOR(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 95 and later\n+@item @code{IEOR(A)}  @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 90 and later\n @item @code{BIEOR(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n @item @code{IIEOR(A)} @tab @code{INTEGER(2) A} @tab @code{INTEGER(2)} @tab GNU extension\n @item @code{JIEOR(A)} @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab GNU extension\n@@ -8196,7 +8193,7 @@ Function\n @code{RESULT = IERRNO()}\n \n @item @emph{Arguments}:\n-None.\n+None\n \n @item @emph{Return value}:\n The return value is of type @code{INTEGER} and of the default integer\n@@ -8317,7 +8314,7 @@ The return value is of type @code{INTEGER} and of kind @var{KIND}. If\n Convert to integer type\n \n @item @emph{Standard}:\n-Fortran 77 and later\n+Fortran 77 and later, with boz-literal-constant Fortran 2008 and later.\n \n @item @emph{Class}:\n Elemental function\n@@ -8328,7 +8325,7 @@ Elemental function\n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n @item @var{A}    @tab Shall be of type @code{INTEGER},\n-@code{REAL}, or @code{COMPLEX}.\n+@code{REAL}, or @code{COMPLEX} or or a boz-literal-constant.\n @item @var{KIND} @tab (Optional) An @code{INTEGER} initialization\n expression indicating the kind parameter of the result.\n @end multitable\n@@ -8463,7 +8460,7 @@ The return value is a @code{INTEGER(8)} variable.\n @var{J}.\n \n @item @emph{Standard}:\n-Fortran 95 and later, has overloads that are GNU extensions\n+Fortran 90 and later, with boz-literal-constant Fortran 2008 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -8488,7 +8485,7 @@ type parameter of the other argument as-if a call to @ref{INT} occurred.\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument            @tab Return type       @tab Standard\n-@item @code{IOR(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 95 and later\n+@item @code{IOR(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 90 and later\n @item @code{BIOR(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n @item @code{IIOR(A)} @tab @code{INTEGER(2) A} @tab @code{INTEGER(2)} @tab GNU extension\n @item @code{JIOR(A)} @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab GNU extension\n@@ -8553,8 +8550,8 @@ dimension @var{DIM} dropped is returned.\n PROGRAM test_iparity\n   INTEGER(1) :: a(2)\n \n-  a(1) = b'00100100'\n-  a(2) = b'01101010'\n+  a(1) = int(b'00100100', 1)\n+  a(2) = int(b'01101010', 1)\n \n   ! prints 01001110\n   PRINT '(b8.8)', IPARITY(a)\n@@ -8821,7 +8818,7 @@ value is undefined.  Bits shifted out from the left end or right end are\n lost; zeros are shifted in from the opposite end.\n \n @item @emph{Standard}:\n-Fortran 95 and later, has overloads that are GNU extensions\n+Fortran 90 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -8842,7 +8839,7 @@ The return value is of type @code{INTEGER} and of the same kind as\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument            @tab Return type       @tab Standard\n-@item @code{ISHFT(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 95 and later\n+@item @code{ISHFT(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 90 and later\n @item @code{BSHFT(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n @item @code{IISHFT(A)} @tab @code{INTEGER(2) A} @tab @code{INTEGER(2)} @tab GNU extension\n @item @code{JISHFT(A)} @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab GNU extension\n@@ -8876,7 +8873,7 @@ a right shift.  The absolute value of @var{SHIFT} must be less than\n equivalent to @code{BIT_SIZE(I)}.\n \n @item @emph{Standard}:\n-Fortran 95 and later, has overloads that are GNU extensions\n+Fortran 90 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -8900,7 +8897,7 @@ The return value is of type @code{INTEGER} and of the same kind as\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument            @tab Return type       @tab Standard\n-@item @code{ISHFTC(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 95 and later\n+@item @code{ISHFTC(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 90 and later\n @item @code{BSHFTC(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n @item @code{IISHFTC(A)} @tab @code{INTEGER(2) A} @tab @code{INTEGER(2)} @tab GNU extension\n @item @code{JISHFTC(A)} @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab GNU extension\n@@ -9023,6 +9020,9 @@ however, only one form can be used in any given program unit.\n @item @emph{Standard}:\n GNU extension\n \n+@item @emph{Standard}:\n+GNU extension\n+\n @item @emph{Class}:\n Subroutine, function\n \n@@ -9071,7 +9071,8 @@ Inquiry function\n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n @item @var{X} @tab Shall be of type @code{LOGICAL}, @code{INTEGER},\n-@code{REAL}, @code{COMPLEX} or @code{CHARACTER}.\n+@code{REAL}, @code{COMPLEX} or @code{CHARACTER}.  It may be scalar or\n+array valued.\n @end multitable\n \n @item @emph{Return value}:\n@@ -9103,7 +9104,7 @@ end program test_kind\n Returns the lower bounds of an array, or a single lower bound\n along the @var{DIM} dimension.\n @item @emph{Standard}:\n-Fortran 95 and later, with @var{KIND} argument Fortran 2003 and later\n+Fortran 90 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -9279,7 +9280,7 @@ The return value is of type @code{INTEGER} and of kind @var{KIND}. If\n Returns the length of a character string, ignoring any trailing blanks.\n \n @item @emph{Standard}:\n-Fortran 95 and later, with @var{KIND} argument Fortran 2003 and later\n+Fortran 90 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -9662,7 +9663,7 @@ end program test_loc\n logarithm to the base @math{e}.\n \n @item @emph{Standard}:\n-Fortran 77 and later\n+Fortran 77 and later, has GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -9695,11 +9696,11 @@ end program test_log\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n-@item @code{ALOG(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab f95, gnu\n-@item @code{DLOG(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab f95, gnu\n-@item @code{CLOG(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}    @tab f95, gnu\n-@item @code{ZLOG(X)}  @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab f95, gnu\n-@item @code{CDLOG(X)} @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab f95, gnu\n+@item @code{ALOG(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab Fortran 77 or later\n+@item @code{DLOG(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 77 or later\n+@item @code{CLOG(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}    @tab Fortran 77 or later\n+@item @code{ZLOG(X)}  @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab GNU extension\n+@item @code{CDLOG(X)} @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab GNU extension\n @end multitable\n @end table\n \n@@ -9747,8 +9748,8 @@ end program test_log10\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n-@item @code{ALOG10(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab Fortran 95 and later\n-@item @code{DLOG10(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 95 and later\n+@item @code{ALOG10(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab Fortran 77 and later\n+@item @code{DLOG10(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 77 and later\n @end multitable\n @end table\n \n@@ -9796,9 +9797,9 @@ end program test_log_gamma\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Argument         @tab Return type       @tab Standard\n-@item @code{LGAMMA(X)} @tab @code{REAL(4) X} @tab @code{REAL(4)}    @tab GNU Extension\n-@item @code{ALGAMA(X)} @tab @code{REAL(4) X} @tab @code{REAL(4)}    @tab GNU Extension\n-@item @code{DLGAMA(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}    @tab GNU Extension\n+@item @code{LGAMMA(X)} @tab @code{REAL(4) X} @tab @code{REAL(4)}    @tab GNU extension\n+@item @code{ALGAMA(X)} @tab @code{REAL(4) X} @tab @code{REAL(4)}    @tab GNU extension\n+@item @code{DLGAMA(X)} @tab @code{REAL(8) X} @tab @code{REAL(8)}    @tab GNU extension\n @end multitable\n \n @item @emph{See also}:\n@@ -9818,7 +9819,7 @@ Gamma function: @gol\n Converts one kind of @code{LOGICAL} variable to another.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -10187,7 +10188,7 @@ default integer kind.\n Performs a matrix multiplication on numeric or logical arguments.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -10281,7 +10282,7 @@ and has the same type and kind as the first argument.\n type of @code{X}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -10397,7 +10398,7 @@ if @var{ARRAY} is numeric, or a string of nulls if @var{ARRAY} is of character\n type.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -10415,7 +10416,7 @@ Transformational function\n @item @var{DIM}   @tab (Optional) Shall be a scalar of type\n @code{INTEGER}, with a value between one and the rank of @var{ARRAY},\n inclusive.  It may not be an optional dummy argument.\n-@item @var{MASK}  @tab Shall be an array of type @code{LOGICAL},\n+@item @var{MASK}  @tab (Opional) Shall be an array of type @code{LOGICAL},\n and conformable with @var{ARRAY}.\n @end multitable\n \n@@ -10530,7 +10531,7 @@ is equal to @var{TSOURCE} if @var{MASK} is @code{.TRUE.}, or equal to\n @var{FSOURCE} if it is @code{.FALSE.}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -10656,7 +10657,7 @@ and has the same type and kind as the first argument.\n type of @code{X}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -10701,7 +10702,7 @@ and all of the elements of @var{MASK} along a given row are zero, the\n result value for that row is zero.\n \n @item @emph{Standard}:\n-Fortran 95 and later; @var{ARRAY} of @code{CHARACTER} and the\n+Fortran 90 and later; @var{ARRAY} of @code{CHARACTER} and the\n @var{KIND} argument are available in Fortran 2003 and later.\n The @var{BACK} argument is available in Fortran 2008 and later.\n \n@@ -10764,7 +10765,7 @@ considered.  If the array has zero size, or all of the elements of\n @var{ARRAY} is of character type.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -10863,9 +10864,9 @@ end program test_mod\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Arguments          @tab Return type    @tab Standard\n-@item @code{MOD(A,P)}  @tab @code{INTEGER A,P} @tab @code{INTEGER} @tab Fortran 95 and later\n-@item @code{AMOD(A,P)} @tab @code{REAL(4) A,P} @tab @code{REAL(4)} @tab Fortran 95 and later\n-@item @code{DMOD(A,P)} @tab @code{REAL(8) A,P} @tab @code{REAL(8)} @tab Fortran 95 and later\n+@item @code{MOD(A,P)}  @tab @code{INTEGER A,P} @tab @code{INTEGER} @tab Fortran 77 and later\n+@item @code{AMOD(A,P)} @tab @code{REAL(4) A,P} @tab @code{REAL(4)} @tab Fortran 77 and later\n+@item @code{DMOD(A,P)} @tab @code{REAL(8) A,P} @tab @code{REAL(8)} @tab Fortran 77 and later\n @item @code{BMOD(A,P)}  @tab @code{INTEGER(1) A,P} @tab @code{INTEGER(1)} @tab GNU extension\n @item @code{IMOD(A,P)}  @tab @code{INTEGER(2) A,P} @tab @code{INTEGER(2)} @tab GNU extension\n @item @code{JMOD(A,P)}  @tab @code{INTEGER(4) A,P} @tab @code{INTEGER(4)} @tab GNU extension\n@@ -11007,7 +11008,7 @@ affected by the movement of bits is unchanged. The values of\n @code{BIT_SIZE(FROM)}.\n \n @item @emph{Standard}:\n-Fortran 95 and later, has overloads that are GNU extensions\n+Fortran 90 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental subroutine\n@@ -11028,7 +11029,7 @@ same kind as @var{FROM}.\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument            @tab Return type       @tab Standard\n-@item @code{MVBITS(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 95 and later\n+@item @code{MVBITS(A)}   @tab @code{INTEGER A}    @tab @code{INTEGER}    @tab Fortran 90 and later\n @item @code{BMVBITS(A)} @tab @code{INTEGER(1) A} @tab @code{INTEGER(1)} @tab GNU extension\n @item @code{IMVBITS(A)} @tab @code{INTEGER(2) A} @tab @code{INTEGER(2)} @tab GNU extension\n @item @code{JMVBITS(A)} @tab @code{INTEGER(4) A} @tab @code{INTEGER(4)} @tab GNU extension\n@@ -11058,7 +11059,7 @@ same kind as @var{FROM}.\n to @code{X} in the direction indicated by the sign of @code{S}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -11178,8 +11179,8 @@ end program test_nint\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Argument           @tab Return Type     @tab Standard\n-@item @code{NINT(A)}   @tab @code{REAL(4) A}   @tab  @code{INTEGER} @tab Fortran 95 and later\n-@item @code{IDNINT(A)} @tab @code{REAL(8) A}   @tab  @code{INTEGER} @tab Fortran 95 and later\n+@item @code{NINT(A)}   @tab @code{REAL(4) A}   @tab  @code{INTEGER} @tab Fortran 77 and later\n+@item @code{IDNINT(A)} @tab @code{REAL(8) A}   @tab  @code{INTEGER} @tab Fortran 77 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -11256,7 +11257,7 @@ END PROGRAM\n @code{NOT} returns the bitwise Boolean inverse of @var{I}.\n \n @item @emph{Standard}:\n-Fortran 95 and later, has overloads that are GNU extensions\n+Fortran 90 and later, has overloads that are GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -11473,7 +11474,7 @@ equals @code{TRUE}. Afterwards, positions are filled with elements taken from\n @var{VECTOR}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -11654,6 +11655,7 @@ end program test_population\n @end table\n \n \n+\n @node POPPAR\n @section @code{POPPAR} --- Parity of the number of bits set\n @fnindex POPPAR\n@@ -11712,7 +11714,7 @@ end program test_population\n type of @code{X}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -11722,7 +11724,8 @@ Inquiry function\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n-@item @var{X} @tab Shall be of type @code{REAL} or @code{COMPLEX}.\n+@item @var{X} @tab Shall be of type @code{REAL} or @code{COMPLEX}. It may\n+be scalar or valued.\n @end multitable\n \n @item @emph{Return value}:\n@@ -11755,7 +11758,7 @@ end program prec_and_range\n Determines whether an optional dummy argument is present.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -11803,7 +11806,7 @@ Multiplies the elements of @var{ARRAY} along dimension @var{DIM} if\n the corresponding element in @var{MASK} is @code{TRUE}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -11860,7 +11863,7 @@ END PROGRAM\n @code{RADIX(X)} returns the base of the model representing the entity @var{X}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -12045,7 +12048,7 @@ intrinsic.\n \n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Subroutine\n@@ -12100,7 +12103,7 @@ threads that have used @code{RANDOM_NUMBER} so far during the program\n execution.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Subroutine\n@@ -12155,7 +12158,7 @@ end program test_random_seed\n type of @code{X}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -12243,7 +12246,7 @@ end program test_rank\n and its use is strongly discouraged.\n \n @item @emph{Standard}:\n-Fortran 77 and later\n+Fortran 77 and later, with @var{KIND} argument Fortran 90 and later, has GNU extensions\n \n @item @emph{Class}:\n Elemental function\n@@ -12290,12 +12293,12 @@ end program test_real\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Argument           @tab Return type     @tab Standard\n-@item @code{FLOAT(A)}  @tab @code{INTEGER(4)}  @tab @code{REAL(4)}  @tab Fortran 77 and later\n+@item @code{FLOAT(A)}  @tab @code{INTEGER(4)}  @tab @code{REAL(4)}  @tab GNU extension\n @item @code{DFLOAT(A)} @tab @code{INTEGER(4)}  @tab @code{REAL(8)}  @tab GNU extension\n @item @code{FLOATI(A)} @tab @code{INTEGER(2)}  @tab @code{REAL(4)}  @tab GNU extension\n @item @code{FLOATJ(A)} @tab @code{INTEGER(4)}  @tab @code{REAL(4)}  @tab GNU extension\n @item @code{FLOATK(A)} @tab @code{INTEGER(8)}  @tab @code{REAL(4)}  @tab GNU extension\n-@item @code{SNGL(A)}   @tab @code{INTEGER(8)}  @tab @code{REAL(4)}  @tab Fortran 77 and later\n+@item @code{SNGL(A)}   @tab @code{INTEGER(8)}  @tab @code{REAL(4)}  @tab GNU extension\n @end multitable\n \n \n@@ -12360,7 +12363,7 @@ Subroutine, function\n Concatenates @var{NCOPIES} copies of a string.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -12401,7 +12404,7 @@ the new array may be padded with elements from @var{PAD} or permuted\n as defined by @var{ORDER}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -12455,7 +12458,7 @@ END PROGRAM\n model numbers near @var{X}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -12575,7 +12578,7 @@ only if the dynamic type of A is the same as the dynamic type of B.\n @code{SCALE(X,I)} returns @code{X * RADIX(X)**I}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -12623,7 +12626,7 @@ is returned. If no character of @var{SET} is found in @var{STRING}, the\n result is zero.\n \n @item @emph{Standard}:\n-Fortran 95 and later, with @var{KIND} argument Fortran 2003 and later\n+Fortran 90 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -12821,7 +12824,7 @@ to @math{10^R} (exclusive). If there is no integer kind that accommodates\n this range, @code{SELECTED_INT_KIND} returns @math{-1}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -12867,7 +12870,7 @@ with decimal precision of at least @code{P} digits, exponent range of\n at least @code{R}, and with a radix of @code{RADIX}.\n \n @item @emph{Standard}:\n-Fortran 95 and later, with @code{RADIX} Fortran 2008 or later\n+Fortran 90 and later, with @code{RADIX} Fortran 2008 or later\n \n @item @emph{Class}:\n Transformational function\n@@ -12942,7 +12945,7 @@ end program real_kinds\n is that that of @var{X} and whose exponent part is @var{I}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -12985,7 +12988,7 @@ END PROGRAM\n Determines the shape of an array.\n \n @item @emph{Standard}:\n-Fortran 95 and later, with @var{KIND} argument Fortran 2003 and later\n+Fortran 90 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -13194,9 +13197,9 @@ end program test_sign\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name              @tab Arguments              @tab Return type       @tab Standard\n-@item @code{SIGN(A,B)}  @tab @code{REAL(4) A, B}    @tab @code{REAL(4)}    @tab f77, gnu\n-@item @code{ISIGN(A,B)} @tab @code{INTEGER(4) A, B} @tab @code{INTEGER(4)} @tab f77, gnu\n-@item @code{DSIGN(A,B)} @tab @code{REAL(8) A, B}    @tab @code{REAL(8)}    @tab f77, gnu\n+@item @code{SIGN(A,B)}  @tab @code{REAL(4) A, B}    @tab @code{REAL(4)}    @tab Fortran 77 and later\n+@item @code{ISIGN(A,B)} @tab @code{INTEGER(4) A, B} @tab @code{INTEGER(4)} @tab Fortran 77 and later\n+@item @code{DSIGN(A,B)} @tab @code{REAL(8) A, B}    @tab @code{REAL(8)}    @tab Fortran 77 and later\n @end multitable\n @end table\n \n@@ -13303,11 +13306,11 @@ end program test_sin\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument             @tab Return type       @tab Standard\n-@item @code{SIN(X)}   @tab @code{REAL(4) X}     @tab @code{REAL(4)}    @tab f77, gnu\n-@item @code{DSIN(X)}  @tab @code{REAL(8) X}     @tab @code{REAL(8)}    @tab f95, gnu\n-@item @code{CSIN(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)} @tab f95, gnu\n-@item @code{ZSIN(X)}  @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)} @tab f95, gnu\n-@item @code{CDSIN(X)} @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)} @tab f95, gnu\n+@item @code{SIN(X)}   @tab @code{REAL(4) X}     @tab @code{REAL(4)}    @tab Fortran 77 and later\n+@item @code{DSIN(X)}  @tab @code{REAL(8) X}     @tab @code{REAL(8)}    @tab Fortran 77 and later\n+@item @code{CSIN(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)} @tab Fortran 77 and later\n+@item @code{ZSIN(X)}  @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)} @tab GNU extension\n+@item @code{CDSIN(X)} @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)} @tab GNU extension\n @end multitable\n \n @item @emph{See also}:\n@@ -13337,7 +13340,7 @@ This function is for compatibility only and should be avoided in favor of\n standard constructs wherever possible.\n \n @item @emph{Standard}:\n-GNU Extension, enabled with @option{-fdec-math}.\n+GNU extension, enabled with @option{-fdec-math}.\n \n @item @emph{Class}:\n Elemental function\n@@ -13365,11 +13368,11 @@ end program test_sind\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument             @tab Return type       @tab Standard\n-@item @code{SIND(X)}   @tab @code{REAL(4) X}     @tab @code{REAL(4)}    @tab GNU Extension\n-@item @code{DSIND(X)}  @tab @code{REAL(8) X}     @tab @code{REAL(8)}    @tab GNU Extension\n-@item @code{CSIND(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)} @tab GNU Extension\n-@item @code{ZSIND(X)}  @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)} @tab GNU Extension\n-@item @code{CDSIND(X)} @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)} @tab GNU Extension\n+@item @code{SIND(X)}   @tab @code{REAL(4) X}     @tab @code{REAL(4)}    @tab GNU extension\n+@item @code{DSIND(X)}  @tab @code{REAL(8) X}     @tab @code{REAL(8)}    @tab GNU extension\n+@item @code{CSIND(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)} @tab GNU extension\n+@item @code{ZSIND(X)}  @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)} @tab GNU extension\n+@item @code{CDSIND(X)} @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)} @tab GNU extension\n @end multitable\n \n @item @emph{See also}:\n@@ -13394,7 +13397,8 @@ Radians function: @gol\n @code{SINH(X)} computes the hyperbolic sine of @var{X}.\n \n @item @emph{Standard}:\n-Fortran 95 and later, for a complex argument Fortran 2008 or later\n+Fortran 90 and later, for a complex argument Fortran 2008 or later, has\n+a GNU extension\n \n @item @emph{Class}:\n Elemental function\n@@ -13421,8 +13425,7 @@ end program test_sinh\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n-@item @code{SINH(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab Fortran 95 and later\n-@item @code{DSINH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 95 and later\n+@item @code{DSINH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 90 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -13444,7 +13447,7 @@ Determine the extent of @var{ARRAY} along a specified dimension @var{DIM},\n or the total number of elements in @var{ARRAY} if @var{DIM} is absent.\n \n @item @emph{Standard}:\n-Fortran 95 and later, with @var{KIND} argument Fortran 2003 and later\n+Fortran 90 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -13579,7 +13582,7 @@ Determines the distance between the argument @var{X} and the nearest\n adjacent number of the same type.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Elemental function\n@@ -13625,7 +13628,7 @@ Replicates a @var{SOURCE} array @var{NCOPIES} times along a specified\n dimension @var{DIM}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -13707,9 +13710,9 @@ end program test_sqrt\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name             @tab Argument             @tab Return type          @tab Standard\n-@item @code{SQRT(X)}   @tab @code{REAL(4) X}     @tab @code{REAL(4)}       @tab Fortran 95 and later\n-@item @code{DSQRT(X)}  @tab @code{REAL(8) X}     @tab @code{REAL(8)}       @tab Fortran 95 and later\n-@item @code{CSQRT(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}    @tab Fortran 95 and later\n+@item @code{SQRT(X)}   @tab @code{REAL(4) X}     @tab @code{REAL(4)}       @tab Fortran 77 and later\n+@item @code{DSQRT(X)}  @tab @code{REAL(8) X}     @tab @code{REAL(8)}       @tab Fortran 77 and later\n+@item @code{CSQRT(X)}  @tab @code{COMPLEX(4) X}  @tab @code{COMPLEX(4)}    @tab Fortran 77 and later\n @item @code{ZSQRT(X)}  @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab GNU extension\n @item @code{CDSQRT(X)} @tab @code{COMPLEX(8) X}  @tab @code{COMPLEX(8)}    @tab GNU extension\n @end multitable\n@@ -13906,7 +13909,7 @@ Adds the elements of @var{ARRAY} along dimension @var{DIM} if\n the corresponding element in @var{MASK} is @code{TRUE}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -14085,7 +14088,7 @@ uses @code{QueryPerformanceCounter} and\n potential caveats, please see the platform documentation.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Subroutine\n@@ -14158,8 +14161,8 @@ end program test_tan\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type     @tab Standard\n-@item @code{TAN(X)}   @tab @code{REAL(4) X}  @tab @code{REAL(4)}  @tab Fortran 95 and later\n-@item @code{DTAN(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}  @tab Fortran 95 and later\n+@item @code{TAN(X)}   @tab @code{REAL(4) X}  @tab @code{REAL(4)}  @tab Fortran 77 and later\n+@item @code{DTAN(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}  @tab Fortran 77 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -14186,7 +14189,7 @@ This function is for compatibility only and should be avoided in favor of\n standard constructs wherever possible.\n \n @item @emph{Standard}:\n-GNU Extension, enabled with @option{-fdec-math}.\n+GNU extension, enabled with @option{-fdec-math}.\n \n @item @emph{Class}:\n Elemental function\n@@ -14213,8 +14216,8 @@ end program test_tand\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type     @tab Standard\n-@item @code{TAND(X)}   @tab @code{REAL(4) X}  @tab @code{REAL(4)}  @tab GNU Extension\n-@item @code{DTAND(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}  @tab GNU Extension\n+@item @code{TAND(X)}   @tab @code{REAL(4) X}  @tab @code{REAL(4)}  @tab GNU extension\n+@item @code{DTAND(X)}  @tab @code{REAL(8) X}  @tab @code{REAL(8)}  @tab GNU extension\n @end multitable\n \n @item @emph{See also}:\n@@ -14269,8 +14272,8 @@ end program test_tanh\n @item @emph{Specific names}:\n @multitable @columnfractions .20 .20 .20 .25\n @item Name            @tab Argument          @tab Return type       @tab Standard\n-@item @code{TANH(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab Fortran 95 and later\n-@item @code{DTANH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 95 and later\n+@item @code{TANH(X)}  @tab @code{REAL(4) X}  @tab @code{REAL(4)}    @tab Fortran 77 and later\n+@item @code{DTANH(X)} @tab @code{REAL(8) X}  @tab @code{REAL(8)}    @tab Fortran 77 and later\n @end multitable\n \n @item @emph{See also}:\n@@ -14451,7 +14454,7 @@ The return value is a scalar of type @code{INTEGER(8)}.\n in the model of the type of @code{X}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -14532,7 +14535,7 @@ This is approximately equivalent to the C concept of @emph{casting} one\n type to another.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -14592,7 +14595,7 @@ Transpose an array of rank two. Element (i, j) of the result has the value\n @code{MATRIX(j, i)}, for all i, j.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -14622,7 +14625,7 @@ The result has the same type as @var{MATRIX}, and has shape\n Removes trailing blank characters of a string.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -14711,7 +14714,7 @@ END PROGRAM\n Returns the upper bounds of an array, or a single upper bound\n along the @var{DIM} dimension.\n @item @emph{Standard}:\n-Fortran 95 and later, with @var{KIND} argument Fortran 2003 and later\n+Fortran 90 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Inquiry function\n@@ -14872,7 +14875,7 @@ Subroutine, function\n Store the elements of @var{VECTOR} in an array of higher rank.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 90 and later\n \n @item @emph{Class}:\n Transformational function\n@@ -14929,7 +14932,7 @@ position is returned. If all characters of @var{STRING} are found in\n @var{SET}, the result is zero.\n \n @item @emph{Standard}:\n-Fortran 95 and later, with @var{KIND} argument Fortran 2003 and later\n+Fortran 90 and later, with @var{KIND} argument Fortran 2003 and later\n \n @item @emph{Class}:\n Elemental function"}]}