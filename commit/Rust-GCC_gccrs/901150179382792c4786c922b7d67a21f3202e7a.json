{"sha": "901150179382792c4786c922b7d67a21f3202e7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAxMTUwMTc5MzgyNzkyYzQ3ODZjOTIyYjdkNjdhMjFmMzIwMmU3YQ==", "commit": {"author": {"name": "Thomas Fitzsimmons", "email": "fitzsim@redhat.com", "date": "2004-01-20T21:05:39Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2004-01-20T21:05:39Z"}, "message": "GtkTextFieldPeer.java, [...] (native create): Add width parameter.\n\n2004-01-20  Thomas Fitzsimmons  <fitzsim@redhat.com>\n\n\t* gnu/java/awt/peer/gtk/GtkTextFieldPeer.java,\n\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextFieldPeer.c\n\t(native create): Add width parameter.\n\t(create): Calculate text entry width based on current font's\n\tmetrics and number of columns.  Set TextField's font if not\n\talready set.  Call native create.\n\t(gtkEntryGetBorderWidth): New native method.\n\t(gtkEntryGetSize): Remove method.\n\t(getMinimumSize): Call minimumSize.\n\t(getPreferredSize): Call preferredSize.\n\t(minimumSize): Calculate minimum size based on backing\n\tGtkEntry's borders, font metrics and number of columns.\n\t(preferredSize): Likewise for preferred size.\n\t(get_border_width): New static function.\n\nFrom-SVN: r76228", "tree": {"sha": "423331742bb4b07e189a268d6b36af5c2cc302cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/423331742bb4b07e189a268d6b36af5c2cc302cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/901150179382792c4786c922b7d67a21f3202e7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/901150179382792c4786c922b7d67a21f3202e7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/901150179382792c4786c922b7d67a21f3202e7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/901150179382792c4786c922b7d67a21f3202e7a/comments", "author": null, "committer": null, "parents": [{"sha": "cbc635173fc8f5ddf95fa08f1fe0770d8b7f7f4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbc635173fc8f5ddf95fa08f1fe0770d8b7f7f4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbc635173fc8f5ddf95fa08f1fe0770d8b7f7f4b"}], "stats": {"total": 193, "additions": 144, "deletions": 49}, "files": [{"sha": "98b849770543e6a41b442226fd0625b02d590536", "filename": "libjava/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/901150179382792c4786c922b7d67a21f3202e7a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/901150179382792c4786c922b7d67a21f3202e7a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=901150179382792c4786c922b7d67a21f3202e7a", "patch": "@@ -1,5 +1,20 @@\n 2004-01-20  Thomas Fitzsimmons  <fitzsim@redhat.com>\n \n+\t* gnu/java/awt/peer/gtk/GtkTextFieldPeer.java,\n+\tjni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextFieldPeer.c\n+\t(native create): Add width parameter.\n+\t(create): Calculate text entry width based on current font's\n+\tmetrics and number of columns.  Set TextField's font if not\n+\talready set.  Call native create.\n+\t(gtkEntryGetBorderWidth): New native method.\n+\t(gtkEntryGetSize): Remove method.\n+\t(getMinimumSize): Call minimumSize.\n+\t(getPreferredSize): Call preferredSize.\n+\t(minimumSize): Calculate minimum size based on backing\n+\tGtkEntry's borders, font metrics and number of columns.\n+\t(preferredSize): Likewise for preferred size.\n+\t(get_border_width): New static function.\n+\n \t* gnu/java/awt/peer/gtk/GtkFramePeer.java (setResizable):\n \tOverride GtkWindowPeer's setResizable method to account for menu\n \tbar height when setting the frame's size."}, {"sha": "8ee06d6f2b3546c6fa03c78678855d4c312b4693", "filename": "libjava/gnu/java/awt/peer/gtk/GtkTextFieldPeer.java", "status": "modified", "additions": 76, "deletions": 24, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/901150179382792c4786c922b7d67a21f3202e7a/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextFieldPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/901150179382792c4786c922b7d67a21f3202e7a/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextFieldPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextFieldPeer.java?ref=901150179382792c4786c922b7d67a21f3202e7a", "patch": "@@ -41,21 +41,46 @@\n import java.awt.AWTEvent;\n import java.awt.Dimension;\n import java.awt.Font;\n+import java.awt.FontMetrics;\n import java.awt.TextField;\n import java.awt.event.KeyEvent;\n import java.awt.peer.TextFieldPeer;\n \n public class GtkTextFieldPeer extends GtkTextComponentPeer\n   implements TextFieldPeer\n {\n+  native void create (int width);\n \n-//    native void create (ComponentPeer parent, String text);\n+  void create ()\n+  {\n+    Font f = awtComponent.getFont ();\n+\n+    // By default, Sun sets a TextField's font when its peer is\n+    // created.  If f != null then the peer's font is set by\n+    // GtkComponent.create.\n+    if (f == null)\n+      {\n+\tf = new Font (\"Fixed\", Font.PLAIN, 12);\n+\tawtComponent.setFont (f);\n+      }\n \n-  native void create ();\n+    FontMetrics fm;\n+    if (GtkToolkit.useGraphics2D ())\n+      fm = new GdkClasspathFontPeerMetrics (f);\n+    else\n+      fm = new GdkFontMetrics (f);\n \n-  native void gtkEntryGetSize (int dims[]);\n+    TextField tf = ((TextField) awtComponent);\n+    int cols = tf.getColumns ();\n+\n+    int text_width = cols * fm.getMaxAdvance ();\n+\n+    create (text_width);\n+  }\n \n-  native void gtkSetFont(String name, int style, int size);\n+  native int gtkEntryGetBorderWidth ();\n+\n+  native void gtkSetFont (String name, int style, int size);\n \n   public GtkTextFieldPeer (TextField tf)\n   {\n@@ -67,34 +92,61 @@ public GtkTextFieldPeer (TextField tf)\n \n   public Dimension getMinimumSize (int cols)\n   {\n-    int dims[] = new int[2];\n-\n-    gtkEntryGetSize (dims);\n-\n-    return (new Dimension (dims[0], dims[1]));\n+    return minimumSize (cols);\n   }\n \n   public Dimension getPreferredSize (int cols)\n   {\n-    int dims[] = new int[2];\n-\n-    gtkEntryGetSize (dims);\n-\n-    return (new Dimension (dims[0], dims[1]));\n+    return preferredSize (cols);\n   }\n-  \n-  public native void setEchoChar (char c);\n \n-  /* Deprecated */\n+  public native void setEchoChar (char c);\n \n+  // Deprecated\n   public Dimension minimumSize (int cols)\n   {\n-    return getMinimumSize (cols);\n+    int dim[] = new int[2];\n+\n+    gtkWidgetGetPreferredDimensions (dim);\n+\n+    Font f = awtComponent.getFont ();\n+    if (f == null)\n+      return new Dimension (2 * gtkEntryGetBorderWidth (), dim[1]);\n+\n+    FontMetrics fm;\n+    if (GtkToolkit.useGraphics2D ())\n+      fm = new GdkClasspathFontPeerMetrics (f);\n+    else\n+      fm = new GdkFontMetrics (f);\n+\n+    int text_width = cols * fm.getMaxAdvance ();\n+\n+    int width = text_width + 2 * gtkEntryGetBorderWidth ();\n+\n+    return new Dimension (width, dim[1]);\n   }\n \n   public Dimension preferredSize (int cols)\n   {\n-    return getPreferredSize (cols);\n+    int dim[] = new int[2];\n+\n+    gtkWidgetGetPreferredDimensions (dim);\n+\n+    Font f = awtComponent.getFont ();\n+    if (f == null)\n+      return new Dimension (2 * gtkEntryGetBorderWidth (), dim[1]);\n+\n+    FontMetrics fm;\n+    if (GtkToolkit.useGraphics2D ())\n+      fm = new GdkClasspathFontPeerMetrics (f);\n+    else\n+      fm = new GdkFontMetrics (f);\n+\n+    int text_width = cols * fm.getMaxAdvance ();\n+\n+    int width = text_width + 2 * gtkEntryGetBorderWidth ();\n+\n+    return new Dimension (width, dim[1]);\n   }\n \n   public void setEchoCharacter (char c)\n@@ -104,18 +156,18 @@ public void setEchoCharacter (char c)\n \n   public void setFont (Font f)\n   {\n-    gtkSetFont(f.getName(), f.getStyle(), f.getSize());\n+    gtkSetFont (f.getName (), f.getStyle (), f.getSize ());\n   }\n \n   public void handleEvent (AWTEvent e)\n   {\n     if (e.getID () == KeyEvent.KEY_PRESSED)\n       {\n-        KeyEvent ke = (KeyEvent)e;\n+        KeyEvent ke = (KeyEvent) e;\n \n-        if (!ke.isConsumed()\n-            && ke.getKeyCode() == KeyEvent.VK_ENTER)\n-          postActionEvent (getText(), ke.getModifiers ());\n+        if (!ke.isConsumed ()\n+            && ke.getKeyCode () == KeyEvent.VK_ENTER)\n+          postActionEvent (getText (), ke.getModifiers ());\n       }\n \n     super.handleEvent (e);"}, {"sha": "e2429bcd1d07d9b9a4af730cec348b69181d7736", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextFieldPeer.c", "status": "modified", "additions": 53, "deletions": 25, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/901150179382792c4786c922b7d67a21f3202e7a/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextFieldPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/901150179382792c4786c922b7d67a21f3202e7a/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextFieldPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextFieldPeer.c?ref=901150179382792c4786c922b7d67a21f3202e7a", "patch": "@@ -39,48 +39,74 @@ exception statement from your version. */\n #include \"gtkpeer.h\"\n #include \"gnu_java_awt_peer_gtk_GtkTextFieldPeer.h\"\n \n+static jint\n+get_border_width (GtkWidget *entry);\n+\n JNIEXPORT void JNICALL \n Java_gnu_java_awt_peer_gtk_GtkTextFieldPeer_create\n-  (JNIEnv *env, jobject obj)\n+  (JNIEnv *env, jobject obj, jint text_width)\n {\n-  GtkWidget *widget;\n+  GtkWidget *entry;\n \n   /* Create global reference and save it for future use */\n   NSA_SET_GLOBAL_REF (env, obj);\n \n   gdk_threads_enter ();\n-  \n-  widget = gtk_entry_new ();\n+\n+  entry = gtk_entry_new ();\n+  gtk_widget_set_size_request (entry,\n+\t\t\t       text_width + 2 * get_border_width (entry), -1);\n \n   gdk_threads_leave ();\n \n-  NSA_SET_PTR (env, obj, widget);\n+  NSA_SET_PTR (env, obj, entry);\n }\n \n-JNIEXPORT void JNICALL\n-Java_gnu_java_awt_peer_gtk_GtkTextFieldPeer_gtkEntryGetSize\n-  (JNIEnv *env, jobject obj, jintArray jdims)\n+JNIEXPORT jint JNICALL\n+Java_gnu_java_awt_peer_gtk_GtkTextFieldPeer_gtkEntryGetBorderWidth\n+  (JNIEnv *env, jobject obj)\n {\n   void *ptr;\n-  jint *dims;\n-  GtkRequisition myreq;\n-  GtkWidget *entry;\n-  \n+  int border_width = 0;\n+\n   ptr = NSA_GET_PTR (env, obj);\n-  dims = (*env)->GetIntArrayElements (env, jdims, 0);  \n-  \n+\n   gdk_threads_enter ();\n-  \n-  entry = GTK_WIDGET (ptr);\n-  gtk_widget_size_request(entry, &myreq);\n-  dims[0]=myreq.width;\n-  dims[1]=myreq.height;\n-  \n+\n+  border_width = get_border_width (GTK_WIDGET (ptr));\n+\n   gdk_threads_leave ();\n-  \n-  (*env)->ReleaseIntArrayElements (env, jdims, dims, 0);\n+\n+  return border_width;\n }\n \n+/* GTK hard-codes this value.  It is the space between a GtkEntry's\n+   frame and its text. */\n+#define INNER_BORDER 2\n+\n+static jint\n+get_border_width (GtkWidget *entry)\n+{\n+  gint focus_width;\n+  gboolean interior_focus;\n+  int x_border_width = INNER_BORDER;\n+\n+  gtk_widget_style_get (entry,\n+\t\t\t\"interior-focus\", &interior_focus,\n+\t\t\t\"focus-line-width\", &focus_width,\n+\t\t\tNULL);\n+\n+  if (GTK_ENTRY (entry)->has_frame)\n+    x_border_width += entry->style->xthickness;\n+\n+  if (!interior_focus)\n+    x_border_width += focus_width;\n+\n+  return x_border_width;\n+}\n+\n+#undef INNER_BORDER\n+\n JNIEXPORT void JNICALL \n Java_gnu_java_awt_peer_gtk_GtkTextFieldPeer_setEchoChar\n   (JNIEnv *env, jobject obj, jchar c)\n@@ -93,10 +119,12 @@ Java_gnu_java_awt_peer_gtk_GtkTextFieldPeer_setEchoChar\n   gdk_threads_enter ();\n \n   entry = GTK_ENTRY (ptr);\n-    \n-  if (c!=0)\n+\n+  if (c != 0)\n     {\n-/*        gtk_entry_set_echo_char (entry, c); */\n+      /* FIXME: use gtk_entry_set_invisible_char (GtkEntry *entry,\n+\t gunichar ch) here.  That means we must convert from jchar\n+\t (utf16) to gunichar (ucs4). */\n       gtk_entry_set_visibility (entry, FALSE);\n     }\n   else"}]}