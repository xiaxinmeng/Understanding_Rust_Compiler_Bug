{"sha": "7337ddf4bfe0544121c8735624f90b6bc6bc33c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMzN2RkZjRiZmUwNTQ0MTIxYzg3MzU2MjRmOTBiNmJjNmJjMzNjMw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2013-12-08T22:15:59Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2013-12-08T22:15:59Z"}, "message": "re PR target/52898 (SH Target: Inefficient DImode comparisons)\n\n\tPR target/52898\n\tPR target/51697\n\t* common/config/sh/sh-common.c (sh_option_optimization_table): Remove\n\tOPT_mcbranchdi entry.\n\t* config/sh/sh.opt (mcbranchdi, mcmpeqdi): Mark as undocumented and\n\temit a warning.\n\t* config/sh/sh.c (sh_option_override): Initialize TARGET_CBRANCHDI4\n\tand TARGET_CMPEQDI_T variables.\n\t* doc/invoke.texi (SH options): Undocument -mcbranchdi and -mcmpeqdi.\n\n\tPR target/52898\n\tPR target/51697\n\t* gcc.target/sh/pr51697.c: New.\n\nFrom-SVN: r205794", "tree": {"sha": "d1175879cba07a0ec229fb6fe29a736690803357", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1175879cba07a0ec229fb6fe29a736690803357"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7337ddf4bfe0544121c8735624f90b6bc6bc33c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7337ddf4bfe0544121c8735624f90b6bc6bc33c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7337ddf4bfe0544121c8735624f90b6bc6bc33c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7337ddf4bfe0544121c8735624f90b6bc6bc33c3/comments", "author": null, "committer": null, "parents": [{"sha": "e1775b33f51ecff1824554750d249bedf380dd27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1775b33f51ecff1824554750d249bedf380dd27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1775b33f51ecff1824554750d249bedf380dd27"}], "stats": {"total": 60, "additions": 47, "deletions": 13}, "files": [{"sha": "18537e8ead036ea3dffaae98a05e1d755feb2ba6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7337ddf4bfe0544121c8735624f90b6bc6bc33c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7337ddf4bfe0544121c8735624f90b6bc6bc33c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7337ddf4bfe0544121c8735624f90b6bc6bc33c3", "patch": "@@ -1,3 +1,15 @@\n+2013-12-08  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/52898\n+\tPR target/51697\n+\t* common/config/sh/sh-common.c (sh_option_optimization_table): Remove\n+\tOPT_mcbranchdi entry.\n+\t* config/sh/sh.opt (mcbranchdi, mcmpeqdi): Mark as undocumented and\n+\temit a warning.\n+\t* config/sh/sh.c (sh_option_override): Initialize TARGET_CBRANCHDI4\n+\tand TARGET_CMPEQDI_T variables.\n+\t* doc/invoke.texi (SH options): Undocument -mcbranchdi and -mcmpeqdi.\n+\n 2013-12-07  Maxim Kuvyrkov  <maxim@kugelworks.com>\n \n \t* config/linux.h: Fix typo in a comment."}, {"sha": "cd4295a113806847a3de68b5232327cbebb11f3f", "filename": "gcc/common/config/sh/sh-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7337ddf4bfe0544121c8735624f90b6bc6bc33c3/gcc%2Fcommon%2Fconfig%2Fsh%2Fsh-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7337ddf4bfe0544121c8735624f90b6bc6bc33c3/gcc%2Fcommon%2Fconfig%2Fsh%2Fsh-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fsh%2Fsh-common.c?ref=7337ddf4bfe0544121c8735624f90b6bc6bc33c3", "patch": "@@ -34,7 +34,6 @@ static const struct default_options sh_option_optimization_table[] =\n     { OPT_LEVELS_1_PLUS_SPEED_ONLY, OPT_mdiv_, \"inv:minlat\", 1 },\n     { OPT_LEVELS_SIZE, OPT_mdiv_, SH_DIV_STR_FOR_SIZE, 1 },\n     { OPT_LEVELS_0_ONLY, OPT_mdiv_, \"\", 1 },\n-    { OPT_LEVELS_SIZE, OPT_mcbranchdi, NULL, 0 },\n     /* We can't meaningfully test TARGET_SHMEDIA here, because -m\n        options haven't been parsed yet, hence we'd read only the\n        default.  sh_target_reg_class will return NO_REGS if this is"}, {"sha": "519892e1855d29e2c61fda1c1a683d1f7eeb89e8", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7337ddf4bfe0544121c8735624f90b6bc6bc33c3/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7337ddf4bfe0544121c8735624f90b6bc6bc33c3/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=7337ddf4bfe0544121c8735624f90b6bc6bc33c3", "patch": "@@ -771,6 +771,11 @@ sh_option_override (void)\n   SUBTARGET_OVERRIDE_OPTIONS;\n   if (optimize > 1 && !optimize_size)\n     target_flags |= MASK_SAVE_ALL_TARGET_REGS;\n+\n+  /* Set default values of TARGET_CBRANCHDI4 and TARGET_CMPEQDI_T.  */\n+  TARGET_CBRANCHDI4 = 1;\n+  TARGET_CMPEQDI_T = 0;\n+\n   sh_cpu = PROCESSOR_SH1;\n   assembler_dialect = 0;\n   if (TARGET_SH2)"}, {"sha": "2a782c0e596e909214fae37be1d157d6941ec5d1", "filename": "gcc/config/sh/sh.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7337ddf4bfe0544121c8735624f90b6bc6bc33c3/gcc%2Fconfig%2Fsh%2Fsh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7337ddf4bfe0544121c8735624f90b6bc6bc33c3/gcc%2Fconfig%2Fsh%2Fsh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.opt?ref=7337ddf4bfe0544121c8735624f90b6bc6bc33c3", "patch": "@@ -233,11 +233,11 @@ Target Var(TARGET_ZDCBRANCH)\n Assume that zero displacement conditional branches are fast\n \n mcbranchdi\n-Target Var(TARGET_CBRANCHDI4)\n+Target Undocumented Var(TARGET_CBRANCHDI4) Warn(%qs is deprecated and has no effect)\n Enable cbranchdi4 pattern\n \n mcmpeqdi\n-Target Var(TARGET_CMPEQDI_T)\n+Target Undocumented Var(TARGET_CMPEQDI_T) Warn(%qs is deprecated and has no effect)\n Emit cmpeqdi_t pattern even when -mcbranchdi is in effect.\n \n mcut2-workaround"}, {"sha": "bda4c198806ecee504f5299f21e2d254ec920ad3", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7337ddf4bfe0544121c8735624f90b6bc6bc33c3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7337ddf4bfe0544121c8735624f90b6bc6bc33c3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7337ddf4bfe0544121c8735624f90b6bc6bc33c3", "patch": "@@ -959,7 +959,7 @@ See RS/6000 and PowerPC Options.\n -mindexed-addressing -mgettrcost=@var{number} -mpt-fixed @gol\n -maccumulate-outgoing-args -minvalid-symbols @gol\n -matomic-model=@var{atomic-model} @gol\n--mbranch-cost=@var{num} -mzdcbranch -mno-zdcbranch -mcbranchdi -mcmpeqdi @gol\n+-mbranch-cost=@var{num} -mzdcbranch -mno-zdcbranch @gol\n -mfused-madd -mno-fused-madd -mfsca -mno-fsca -mfsrra -mno-fsrra @gol\n -mpretend-cmove -mtas}\n \n@@ -20252,15 +20252,6 @@ compiler will try to prefer zero displacement branch code sequences.  This is\n enabled by default when generating code for SH4 and SH4A.  It can be explicitly\n disabled by specifying @option{-mno-zdcbranch}.\n \n-@item -mcbranchdi\n-@opindex mcbranchdi\n-Enable the @code{cbranchdi4} instruction pattern.\n-\n-@item -mcmpeqdi\n-@opindex mcmpeqdi\n-Emit the @code{cmpeqdi_t} instruction pattern even when @option{-mcbranchdi}\n-is in effect.\n-\n @item -mfused-madd\n @itemx -mno-fused-madd\n @opindex mfused-madd"}, {"sha": "9acf500147b0ef8345a22be232ccb62a4af9456a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7337ddf4bfe0544121c8735624f90b6bc6bc33c3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7337ddf4bfe0544121c8735624f90b6bc6bc33c3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7337ddf4bfe0544121c8735624f90b6bc6bc33c3", "patch": "@@ -1,3 +1,9 @@\n+2013-12-08  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/52898\n+\tPR target/51697\n+\t* gcc.target/sh/pr51697.c: New.\n+\n 2013-12-08  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/macro-fusion-1.c: Cleanup sched2 rtl dump."}, {"sha": "d63e329bff94cbd9729e826068f79b82b1cfc3d8", "filename": "gcc/testsuite/gcc.target/sh/pr51697.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7337ddf4bfe0544121c8735624f90b6bc6bc33c3/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51697.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7337ddf4bfe0544121c8735624f90b6bc6bc33c3/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51697.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51697.c?ref=7337ddf4bfe0544121c8735624f90b6bc6bc33c3", "patch": "@@ -0,0 +1,21 @@\n+/* Check that DImode comparisons are optimized as expected when compiling\n+   with -Os.  */\n+/* { dg-do compile }  */\n+/* { dg-options \"-Os\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"tst\" 2 } }  */\n+/* { dg-final { scan-assembler-not \"cmp\" } }  */\n+\n+int\n+test_00 (long long* x)\n+{\n+  /* 1x tst, no cmp/* insns.  */\n+  return *x & 0xFFFFFFFF ? -20 : -40;\n+}\n+\n+int\n+test_01 (unsigned long long x)\n+{\n+  /* 1x tst, no cmp/* insns.  */\n+  return x >= 0x100000000LL ? -20 : -40;\n+}"}]}