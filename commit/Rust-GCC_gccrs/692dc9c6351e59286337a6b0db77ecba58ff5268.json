{"sha": "692dc9c6351e59286337a6b0db77ecba58ff5268", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkyZGM5YzYzNTFlNTkyODYzMzdhNmIwZGI3N2VjYmE1OGZmNTI2OA==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@redhat.com", "date": "2000-11-24T19:51:09Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2000-11-24T19:51:09Z"}, "message": "jump.c (delete_computation): Re-instate deletion of feeding insn.\n\n\t* jump.c (delete_computation): Re-instate deletion of feeding insn.\n\t(delete_insn): Look for REG_LABEL notes.\n\t(redirect_tablejump): Delete feeding insns.\n\nFrom-SVN: r37714", "tree": {"sha": "772f187cfef204e2fc4ec8ddcfaa859d3fec9f87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/772f187cfef204e2fc4ec8ddcfaa859d3fec9f87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/692dc9c6351e59286337a6b0db77ecba58ff5268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/692dc9c6351e59286337a6b0db77ecba58ff5268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/692dc9c6351e59286337a6b0db77ecba58ff5268", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/692dc9c6351e59286337a6b0db77ecba58ff5268/comments", "author": null, "committer": null, "parents": [{"sha": "90d10fb9c6738cd6533bb9668a47b834e0ebe661", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90d10fb9c6738cd6533bb9668a47b834e0ebe661", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90d10fb9c6738cd6533bb9668a47b834e0ebe661"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "9dcaaf5bd6d62c01acb893ee07811d84dea283c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/692dc9c6351e59286337a6b0db77ecba58ff5268/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/692dc9c6351e59286337a6b0db77ecba58ff5268/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=692dc9c6351e59286337a6b0db77ecba58ff5268", "patch": "@@ -1,3 +1,9 @@\n+Fri Nov 24 19:48:09 2000  J\"orn Rennecke <amylaar@redhat.com>\n+\n+\t* jump.c (delete_computation): Re-instate deletion of feeding insn.\n+\t(delete_insn): Look for REG_LABEL notes.\n+\t(redirect_tablejump): Delete feeding insns.\n+\n 2000-11-24  Bernd Schmidt  <bernds@redhat.co.uk>\n \n \t* config/i386/i386.md (call_pop_0, call_pop_1, call_value_pop_0,"}, {"sha": "dcdd4aec693a55208dd9c66a16647a518eb10d68", "filename": "gcc/jump.c", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/692dc9c6351e59286337a6b0db77ecba58ff5268/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/692dc9c6351e59286337a6b0db77ecba58ff5268/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=692dc9c6351e59286337a6b0db77ecba58ff5268", "patch": "@@ -2705,17 +2705,6 @@ delete_computation (insn)\n     }\n #endif\n \n-#ifdef INSN_SCHEDULING\n-  /* ?!? The schedulers do not keep REG_DEAD notes accurate after\n-     reload has completed.  The schedulers need to be fixed.  Until\n-     they are, we must not rely on the death notes here.  */\n-  if (reload_completed && flag_schedule_insns_after_reload)\n-    {\n-      delete_insn (insn);\n-      return;\n-    }\n-#endif\n-\n   for (note = REG_NOTES (insn); note; note = next)\n     {\n       next = XEXP (note, 1);\n@@ -2745,6 +2734,7 @@ delete_insn (insn)\n   register rtx prev = PREV_INSN (insn);\n   register int was_code_label = (GET_CODE (insn) == CODE_LABEL);\n   register int dont_really_delete = 0;\n+  rtx note;\n \n   while (next && INSN_DELETED_P (next))\n     next = NEXT_INSN (next);\n@@ -2864,6 +2854,13 @@ delete_insn (insn)\n       return next;\n     }\n \n+  /* Likewise for an ordinary INSN / CALL_INSN with a REG_LABEL note.  */\n+  if (GET_CODE (insn) == INSN || GET_CODE (insn) == CALL_INSN)\n+    for (note = REG_NOTES (insn); note; note = XEXP (note, 1))\n+      if (REG_NOTE_KIND (note) == REG_LABEL)\n+\tif (--LABEL_NUSES (XEXP (note, 0)) == 0)\n+\t  delete_insn (XEXP (note, 0));\n+\n   while (prev && (INSN_DELETED_P (prev) || GET_CODE (prev) == NOTE))\n     prev = PREV_INSN (prev);\n \n@@ -3327,6 +3324,7 @@ redirect_tablejump (jump, nlabel)\n      rtx jump, nlabel;\n {\n   register rtx olabel = JUMP_LABEL (jump);\n+  rtx *notep, note, next;\n \n   /* Add this jump to the jump_chain of NLABEL.  */\n   if (jump_chain && INSN_UID (nlabel) < max_jump_chain\n@@ -3336,6 +3334,22 @@ redirect_tablejump (jump, nlabel)\n       jump_chain[INSN_UID (nlabel)] = jump;\n     }\n \n+  for (notep = &REG_NOTES (jump), note = *notep; note; note = next)\n+    {\n+      next = XEXP (note, 1);\n+\n+      if (REG_NOTE_KIND (note) != REG_DEAD\n+\t  /* Verify that the REG_NOTE is legitimate.  */\n+\t  || GET_CODE (XEXP (note, 0)) != REG\n+\t  || ! reg_mentioned_p (XEXP (note, 0), PATTERN (jump)))\n+\tnotep = &XEXP (note, 1);\n+      else\n+\t{\n+\t  delete_prior_computation (note, jump);\n+\t  *notep = next;\n+\t}\n+    }\n+\n   PATTERN (jump) = gen_jump (nlabel);\n   JUMP_LABEL (jump) = nlabel;\n   ++LABEL_NUSES (nlabel);"}]}