{"sha": "675d044c852044111c656f86c273a0c5f11ad3d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njc1ZDA0NGM4NTIwNDQxMTFjNjU2Zjg2YzI3M2EwYzVmMTFhZDNkNQ==", "commit": {"author": {"name": "Sudakshina Das", "email": "sudi.das@arm.com", "date": "2018-05-23T11:33:09Z"}, "committer": {"name": "Sudakshina Das", "email": "sudi@gcc.gnu.org", "date": "2018-05-23T11:33:09Z"}, "message": "[AArch64][PR target/84882] Add mno-strict-align\n\n*** gcc/ChangeLog ***\n\n2018-05-23  Sudakshina Das  <sudi.das@arm.com>\n\n\tPR target/84882\n\t* common/config/aarch64/aarch64-common.c (aarch64_handle_option):\n\tCheck val before adding MASK_STRICT_ALIGN to opts->x_target_flags.\n\t* config/aarch64/aarch64.opt (mstrict-align): Remove RejectNegative.\n\t* config/aarch64/aarch64.c (aarch64_attributes): Mark allow_neg\n\tas true for strict-align.\n\t(aarch64_can_inline_p): Perform checks even when callee has no\n\tattributes to check for strict alignment.\n\t* doc/extend.texi (AArch64 Function Attributes): Document\n\tno-strict-align.\n\t* doc/invoke.texi: (AArch64 Options): Likewise.\n\n*** gcc/testsuite/ChangeLog ***\n\n2018-05-23  Sudakshina Das  <sudi.das@arm.com>\n\n\tPR target/84882\n\t* gcc.target/aarch64/pr84882.c: New test.\n\t* gcc.target/aarch64/target_attr_18.c: Likewise.\n\nFrom-SVN: r260604", "tree": {"sha": "62a5bf326298914ec54a2ae48a228b5c9394d1d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62a5bf326298914ec54a2ae48a228b5c9394d1d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/675d044c852044111c656f86c273a0c5f11ad3d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/675d044c852044111c656f86c273a0c5f11ad3d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/675d044c852044111c656f86c273a0c5f11ad3d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/675d044c852044111c656f86c273a0c5f11ad3d5/comments", "author": {"login": "sudakshina-das-arm", "id": 28538945, "node_id": "MDQ6VXNlcjI4NTM4OTQ1", "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sudakshina-das-arm", "html_url": "https://github.com/sudakshina-das-arm", "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers", "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}", "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions", "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs", "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos", "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb3c90cc4253cc236a4d5669a893562b202570e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3c90cc4253cc236a4d5669a893562b202570e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb3c90cc4253cc236a4d5669a893562b202570e5"}], "stats": {"total": 110, "additions": 95, "deletions": 15}, "files": [{"sha": "439b8300003c5030584d5a09609bbb88246230f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675d044c852044111c656f86c273a0c5f11ad3d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675d044c852044111c656f86c273a0c5f11ad3d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=675d044c852044111c656f86c273a0c5f11ad3d5", "patch": "@@ -1,3 +1,17 @@\n+2018-05-23  Sudakshina Das  <sudi.das@arm.com>\n+\n+\tPR target/84882\n+\t* common/config/aarch64/aarch64-common.c (aarch64_handle_option):\n+\tCheck val before adding MASK_STRICT_ALIGN to opts->x_target_flags.\n+\t* config/aarch64/aarch64.opt (mstrict-align): Remove RejectNegative.\n+\t* config/aarch64/aarch64.c (aarch64_attributes): Mark allow_neg\n+\tas true for strict-align.\n+\t(aarch64_can_inline_p): Perform checks even when callee has no\n+\tattributes to check for strict alignment.\n+\t* doc/extend.texi (AArch64 Function Attributes): Document\n+\tno-strict-align.\n+\t* doc/invoke.texi: (AArch64 Options): Likewise.\n+\n 2018-05-23  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR tree-optimization/85853"}, {"sha": "292fb818705d4650113da59a6d88cf2aa7c9e57d", "filename": "gcc/common/config/aarch64/aarch64-common.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675d044c852044111c656f86c273a0c5f11ad3d5/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675d044c852044111c656f86c273a0c5f11ad3d5/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Faarch64%2Faarch64-common.c?ref=675d044c852044111c656f86c273a0c5f11ad3d5", "patch": "@@ -101,7 +101,10 @@ aarch64_handle_option (struct gcc_options *opts,\n       return true;\n \n     case OPT_mstrict_align:\n-      opts->x_target_flags |= MASK_STRICT_ALIGN;\n+      if (val)\n+\topts->x_target_flags |= MASK_STRICT_ALIGN;\n+      else\n+\topts->x_target_flags &= ~MASK_STRICT_ALIGN;\n       return true;\n \n     case OPT_momit_leaf_frame_pointer:"}, {"sha": "1df8d620527dea4f4227d226b51557d69ba6132d", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675d044c852044111c656f86c273a0c5f11ad3d5/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675d044c852044111c656f86c273a0c5f11ad3d5/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=675d044c852044111c656f86c273a0c5f11ad3d5", "patch": "@@ -11298,7 +11298,7 @@ static const struct aarch64_attribute_info aarch64_attributes[] =\n   { \"fix-cortex-a53-843419\", aarch64_attr_bool, true, NULL,\n      OPT_mfix_cortex_a53_843419 },\n   { \"cmodel\", aarch64_attr_enum, false, NULL, OPT_mcmodel_ },\n-  { \"strict-align\", aarch64_attr_mask, false, NULL, OPT_mstrict_align },\n+  { \"strict-align\", aarch64_attr_mask, true, NULL, OPT_mstrict_align },\n   { \"omit-leaf-frame-pointer\", aarch64_attr_bool, true, NULL,\n      OPT_momit_leaf_frame_pointer },\n   { \"tls-dialect\", aarch64_attr_enum, false, NULL, OPT_mtls_dialect_ },\n@@ -11661,16 +11661,13 @@ aarch64_can_inline_p (tree caller, tree callee)\n   tree caller_tree = DECL_FUNCTION_SPECIFIC_TARGET (caller);\n   tree callee_tree = DECL_FUNCTION_SPECIFIC_TARGET (callee);\n \n-  /* If callee has no option attributes, then it is ok to inline.  */\n-  if (!callee_tree)\n-    return true;\n-\n   struct cl_target_option *caller_opts\n \t= TREE_TARGET_OPTION (caller_tree ? caller_tree\n \t\t\t\t\t   : target_option_default_node);\n \n-  struct cl_target_option *callee_opts = TREE_TARGET_OPTION (callee_tree);\n-\n+  struct cl_target_option *callee_opts\n+\t= TREE_TARGET_OPTION (callee_tree ? callee_tree\n+\t\t\t\t\t   : target_option_default_node);\n \n   /* Callee's ISA flags should be a subset of the caller's.  */\n   if ((caller_opts->x_aarch64_isa_flags & callee_opts->x_aarch64_isa_flags)"}, {"sha": "1426b45ff0ff6992361f144063d665052e4b0220", "filename": "gcc/config/aarch64/aarch64.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675d044c852044111c656f86c273a0c5f11ad3d5/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675d044c852044111c656f86c273a0c5f11ad3d5/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.opt?ref=675d044c852044111c656f86c273a0c5f11ad3d5", "patch": "@@ -85,7 +85,7 @@ Target RejectNegative Joined Enum(cmodel) Var(aarch64_cmodel_var) Init(AARCH64_C\n Specify the code model.\n \n mstrict-align\n-Target Report RejectNegative Mask(STRICT_ALIGN) Save\n+Target Report Mask(STRICT_ALIGN) Save\n Don't assume that unaligned accesses are handled by the system.\n \n momit-leaf-frame-pointer"}, {"sha": "ab1db497f73afe95978a179d2b8d258d8bfad602", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675d044c852044111c656f86c273a0c5f11ad3d5/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675d044c852044111c656f86c273a0c5f11ad3d5/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=675d044c852044111c656f86c273a0c5f11ad3d5", "patch": "@@ -3612,10 +3612,13 @@ this function.  The behavior and permissible arguments are the same as\n for the command line option @option{-mcmodel=}.\n \n @item strict-align\n+@itemx no-strict-align\n @cindex @code{strict-align} function attribute, AArch64\n-Indicates that the compiler should not assume that unaligned memory references\n-are handled by the system.  The behavior is the same as for the command-line\n-option @option{-mstrict-align}.\n+@code{strict-align} indicates that the compiler should not assume that unaligned\n+memory references are handled by the system.  To allow the compiler to assume\n+that aligned memory references are handled by the system, the inverse attribute\n+@code{no-strict-align} can be specified.  The behavior is same as for the\n+command-line option @option{-mstrict-align} and @option{-mno-strict-align}.\n \n @item omit-leaf-frame-pointer\n @cindex @code{omit-leaf-frame-pointer} function attribute, AArch64"}, {"sha": "30d2a31d60679a9b48704730ad8c080d27beb2dd", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675d044c852044111c656f86c273a0c5f11ad3d5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675d044c852044111c656f86c273a0c5f11ad3d5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=675d044c852044111c656f86c273a0c5f11ad3d5", "patch": "@@ -596,7 +596,7 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-mabi=@var{name}  -mbig-endian  -mlittle-endian @gol\n -mgeneral-regs-only @gol\n -mcmodel=tiny  -mcmodel=small  -mcmodel=large @gol\n--mstrict-align @gol\n+-mstrict-align -mno-strict-align @gol\n -momit-leaf-frame-pointer @gol\n -mtls-dialect=desc  -mtls-dialect=traditional @gol\n -mtls-size=@var{size} @gol\n@@ -14594,9 +14594,11 @@ Generate code for the large code model.  This makes no assumptions about\n addresses and sizes of sections.  Programs can be statically linked only.\n \n @item -mstrict-align\n+@itemx -mno-strict-align\n @opindex mstrict-align\n-Avoid generating memory accesses that may not be aligned on a natural object\n-boundary as described in the architecture specification.\n+@opindex mno-strict-align\n+Avoid or allow generating memory accesses that may not be aligned on a natural\n+object boundary as described in the architecture specification.\n \n @item -momit-leaf-frame-pointer\n @itemx -mno-omit-leaf-frame-pointer"}, {"sha": "aea02b9085aa5f4c01ffe54da92634f5dd76db47", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675d044c852044111c656f86c273a0c5f11ad3d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675d044c852044111c656f86c273a0c5f11ad3d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=675d044c852044111c656f86c273a0c5f11ad3d5", "patch": "@@ -1,3 +1,9 @@\n+2018-05-23  Sudakshina Das  <sudi.das@arm.com>\n+\n+\tPR target/84882\n+\t* gcc.target/aarch64/pr84882.c: New test.\n+\t* gcc.target/aarch64/target_attr_18.c: Likewise.\n+\n 2018-05-23  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \tPR tree-optimization/85853"}, {"sha": "89b5d1a580517283efa3750206d28f0c0577e598", "filename": "gcc/testsuite/gcc.target/aarch64/pr84882.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675d044c852044111c656f86c273a0c5f11ad3d5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr84882.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675d044c852044111c656f86c273a0c5f11ad3d5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr84882.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr84882.c?ref=675d044c852044111c656f86c273a0c5f11ad3d5", "patch": "@@ -0,0 +1,34 @@\n+/* This is a copy of pr71727.c with scanning reversed.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-mstrict-align -O3 -mno-strict-align\" } */\n+\n+struct test_struct_s\n+{\n+  long a;\n+  long b;\n+  long c;\n+  long d;\n+  unsigned long e;\n+};\n+\n+\n+char _a;\n+struct test_struct_s xarray[128];\n+\n+void\n+_start (void)\n+{\n+  struct test_struct_s *new_entry;\n+\n+  new_entry = &xarray[0];\n+  new_entry->a = 1;\n+  new_entry->b = 2;\n+  new_entry->c = 3;\n+  new_entry->d = 4;\n+  new_entry->e = 5;\n+\n+  return;\n+}\n+/* Should have only 1 mov instead of 5 and should not use stp (store pair).  */\n+/* { dg-final { scan-assembler-times \"mov\\tx\" 1 {target lp64} } } */\n+/* { dg-final { scan-assembler-not \"stp\\tx\\[0-9\\]+, x\\[0-9\\]+,\" {target lp64} } } */"}, {"sha": "33b1d44b6a9be56272f832850b4dccbaf18926fb", "filename": "gcc/testsuite/gcc.target/aarch64/target_attr_18.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/675d044c852044111c656f86c273a0c5f11ad3d5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/675d044c852044111c656f86c273a0c5f11ad3d5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Ftarget_attr_18.c?ref=675d044c852044111c656f86c273a0c5f11ad3d5", "patch": "@@ -0,0 +1,21 @@\n+/* This is a copy of target_attr_6.c to instead check no-strict-align.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -save-temps -mstrict-align\" } */\n+\n+/* Inlining strict-align functions into non-strict align\n+   functions is not allowed.  */\n+\n+int\n+bar (int a)\n+{\n+  return a - 6;\n+}\n+\n+__attribute__ ((target (\"no-strict-align\")))\n+int\n+bam (int a)\n+{\n+  return a - bar (a);\n+}\n+\n+/* { dg-final { scan-assembler \"bl.*bar\" } } */"}]}