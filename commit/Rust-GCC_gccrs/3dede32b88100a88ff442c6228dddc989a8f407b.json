{"sha": "3dede32b88100a88ff442c6228dddc989a8f407b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RlZGUzMmI4ODEwMGE4OGZmNDQyYzYyMjhkZGRjOTg5YThmNDA3Yg==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2018-01-24T13:52:12Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-01-24T13:52:12Z"}, "message": "[nvptx, PR83589] Workaround for branch-around-nothing JIT bug\n\n2018-01-24  Tom de Vries  <tom@codesourcery.com>\n\n\tPR target/83589\n\t* config/nvptx/nvptx.c (WORKAROUND_PTXJIT_BUG_2): Define to 1.\n\t(nvptx_pc_set, nvptx_condjump_label): New function. Copy from jump.c.\n\tAdd strict parameter.\n\t(prevent_branch_around_nothing): Insert dummy insn between branch to\n\tlabel and label with no ptx insn inbetween.\n\t* config/nvptx/nvptx.md (define_insn \"fake_nop\"): New insn.\n\n\t* testsuite/libgomp.oacc-c-c++-common/pr83589.c: New test.\n\nFrom-SVN: r257016", "tree": {"sha": "eb27b1c0bbca40f1fd3c04b8cda1fff577c383d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb27b1c0bbca40f1fd3c04b8cda1fff577c383d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dede32b88100a88ff442c6228dddc989a8f407b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dede32b88100a88ff442c6228dddc989a8f407b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dede32b88100a88ff442c6228dddc989a8f407b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dede32b88100a88ff442c6228dddc989a8f407b/comments", "author": null, "committer": null, "parents": [{"sha": "be606483c9fc0c79ffb671238404203e01288b00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be606483c9fc0c79ffb671238404203e01288b00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be606483c9fc0c79ffb671238404203e01288b00"}], "stats": {"total": 137, "additions": 137, "deletions": 0}, "files": [{"sha": "c8c2f57e5d9a5f3bccae46ce980bdb7219b8daf2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dede32b88100a88ff442c6228dddc989a8f407b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dede32b88100a88ff442c6228dddc989a8f407b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3dede32b88100a88ff442c6228dddc989a8f407b", "patch": "@@ -1,3 +1,13 @@\n+2018-01-24  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR target/83589\n+\t* config/nvptx/nvptx.c (WORKAROUND_PTXJIT_BUG_2): Define to 1.\n+\t(nvptx_pc_set, nvptx_condjump_label): New function. Copy from jump.c.\n+\tAdd strict parameter.\n+\t(prevent_branch_around_nothing): Insert dummy insn between branch to\n+\tlabel and label with no ptx insn inbetween.\n+\t* config/nvptx/nvptx.md (define_insn \"fake_nop\"): New insn.\n+\n 2018-01-24  Tom de Vries  <tom@codesourcery.com>\n \n \tPR target/81352"}, {"sha": "d8484120c9d25b963648f5c539fc23bb895394c5", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dede32b88100a88ff442c6228dddc989a8f407b/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dede32b88100a88ff442c6228dddc989a8f407b/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=3dede32b88100a88ff442c6228dddc989a8f407b", "patch": "@@ -78,6 +78,7 @@\n #include \"target-def.h\"\n \n #define WORKAROUND_PTXJIT_BUG 1\n+#define WORKAROUND_PTXJIT_BUG_2 1\n \n /* The various PTX memory areas an object might reside in.  */\n enum nvptx_data_area\n@@ -4363,6 +4364,93 @@ nvptx_neuter_pars (parallel *par, unsigned modes, unsigned outer)\n     nvptx_neuter_pars (par->next, modes, outer);\n }\n \n+#if WORKAROUND_PTXJIT_BUG_2\n+/* Variant of pc_set that only requires JUMP_P (INSN) if STRICT.  This variant\n+   is needed in the nvptx target because the branches generated for\n+   parititioning are NONJUMP_INSN_P, not JUMP_P.  */\n+\n+static rtx\n+nvptx_pc_set (const rtx_insn *insn, bool strict = true)\n+{\n+  rtx pat;\n+  if ((strict && !JUMP_P (insn))\n+      || (!strict && !INSN_P (insn)))\n+    return NULL_RTX;\n+  pat = PATTERN (insn);\n+\n+  /* The set is allowed to appear either as the insn pattern or\n+     the first set in a PARALLEL.  */\n+  if (GET_CODE (pat) == PARALLEL)\n+    pat = XVECEXP (pat, 0, 0);\n+  if (GET_CODE (pat) == SET && GET_CODE (SET_DEST (pat)) == PC)\n+    return pat;\n+\n+  return NULL_RTX;\n+}\n+\n+/* Variant of condjump_label that only requires JUMP_P (INSN) if STRICT.  */\n+\n+static rtx\n+nvptx_condjump_label (const rtx_insn *insn, bool strict = true)\n+{\n+  rtx x = nvptx_pc_set (insn, strict);\n+\n+  if (!x)\n+    return NULL_RTX;\n+  x = SET_SRC (x);\n+  if (GET_CODE (x) == LABEL_REF)\n+    return x;\n+  if (GET_CODE (x) != IF_THEN_ELSE)\n+    return NULL_RTX;\n+  if (XEXP (x, 2) == pc_rtx && GET_CODE (XEXP (x, 1)) == LABEL_REF)\n+    return XEXP (x, 1);\n+  if (XEXP (x, 1) == pc_rtx && GET_CODE (XEXP (x, 2)) == LABEL_REF)\n+    return XEXP (x, 2);\n+  return NULL_RTX;\n+}\n+\n+/* Insert a dummy ptx insn when encountering a branch to a label with no ptx\n+   insn inbetween the branch and the label.  This works around a JIT bug\n+   observed at driver version 384.111, at -O0 for sm_50.  */\n+\n+static void\n+prevent_branch_around_nothing (void)\n+{\n+  rtx_insn *seen_label = NULL;\n+    for (rtx_insn *insn = get_insns (); insn; insn = NEXT_INSN (insn))\n+      {\n+\tif (seen_label == NULL)\n+\t  {\n+\t    if (INSN_P (insn) && condjump_p (insn))\n+\t      seen_label = label_ref_label (nvptx_condjump_label (insn, false));\n+\n+\t    continue;\n+\t  }\n+\n+\tif (NOTE_P (insn) || DEBUG_INSN_P (insn))\n+\t  continue;\n+\n+\tif (INSN_P (insn))\n+\t  switch (recog_memoized (insn))\n+\t    {\n+\t    case CODE_FOR_nvptx_fork:\n+\t    case CODE_FOR_nvptx_forked:\n+\t    case CODE_FOR_nvptx_joining:\n+\t    case CODE_FOR_nvptx_join:\n+\t      continue;\n+\t    default:\n+\t      seen_label = NULL;\n+\t      continue;\n+\t    }\n+\n+\tif (LABEL_P (insn) && insn == seen_label)\n+\t  emit_insn_before (gen_fake_nop (), insn);\n+\n+\tseen_label = NULL;\n+      }\n+  }\n+#endif\n+\n /* PTX-specific reorganization\n    - Split blocks at fork and join instructions\n    - Compute live registers\n@@ -4442,6 +4530,10 @@ nvptx_reorg (void)\n   if (TARGET_UNIFORM_SIMT)\n     nvptx_reorg_uniform_simt ();\n \n+#if WORKAROUND_PTXJIT_BUG_2\n+  prevent_branch_around_nothing ();\n+#endif\n+\n   regstat_free_n_sets_and_refs ();\n \n   df_finish_pass (true);"}, {"sha": "4f4453da693c081d708439615bf58bb86ba5e1e4", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dede32b88100a88ff442c6228dddc989a8f407b/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dede32b88100a88ff442c6228dddc989a8f407b/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=3dede32b88100a88ff442c6228dddc989a8f407b", "patch": "@@ -999,6 +999,15 @@\n   \"\"\n   \"exit;\")\n \n+(define_insn \"fake_nop\"\n+  [(const_int 2)]\n+  \"\"\n+  \"{\n+     .reg .u32 %%nop_src;\n+     .reg .u32 %%nop_dst;\n+     mov.u32 %%nop_dst, %%nop_src;\n+   }\")\n+\n (define_insn \"return\"\n   [(return)]\n   \"\""}, {"sha": "a0648633a784de94a020caf0530af4b51459efea", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dede32b88100a88ff442c6228dddc989a8f407b/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dede32b88100a88ff442c6228dddc989a8f407b/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=3dede32b88100a88ff442c6228dddc989a8f407b", "patch": "@@ -1,3 +1,8 @@\n+2018-01-24  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR target/83589\n+\t* testsuite/libgomp.oacc-c-c++-common/pr83589.c: New test.\n+\n 2018-01-24  Tom de Vries  <tom@codesourcery.com>\n \n \tPR target/81352"}, {"sha": "a6ed5cf7d34e304062e39acc71c8e168c06828ab", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr83589.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dede32b88100a88ff442c6228dddc989a8f407b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr83589.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dede32b88100a88ff442c6228dddc989a8f407b/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr83589.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr83589.c?ref=3dede32b88100a88ff442c6228dddc989a8f407b", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-set-target-env-var GOMP_NVPTX_JIT \"-O0\" } */\n+\n+#define n 32\n+\n+int\n+main (void)\n+{\n+  int arr_a[n];\n+\n+#pragma acc parallel copyout(arr_a) num_gangs(1) num_workers(1) vector_length(32)\n+  {\n+    #pragma acc loop vector\n+    for (int m = 0; m < 32; m++)\n+      ;\n+\n+    #pragma acc loop vector\n+    for (int m = 0; m < 32; m++)\n+      arr_a[m] = 0;\n+  }\n+}"}]}