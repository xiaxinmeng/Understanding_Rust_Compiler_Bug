{"sha": "c99116aeeb9644ebddec653ee8b19de4d38b65bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk5MTE2YWVlYjk2NDRlYmRkZWM2NTNlZThiMTlkZTRkMzhiNjViZA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2020-08-16T18:20:27Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2020-08-16T18:20:27Z"}, "message": "middle-end: Simplify (sign_extend:HI (truncate:QI (ashiftrt:HI X 8)))\n\nThe combination of several my recent nvptx patches has revealed an\ninteresting RTL optimization opportunity.  This patch to simplify-rtx.c\nsimplifies (sign_extend:HI (truncate:QI (?shiftrt:HI x 8))) to just\n(ashiftrt:HI x 8), as the inner shift already sets the high bits\nappropriately.  The equivalent zero_extend variant appears to already\nbe implemented in simplify_unary_operation_1.\n\nThese result from RTL expansion generating a reasonable arithmetic right\nshift and truncation to char, only to then discover the backend doesn't\nsupport QImode comparisons, so the next optab widens this result/operand\nback to HImode.  In this sequence the truncate and sign extend are\nredundant as the original arithmetic shift has already set the high\nbits appropriately.  The one oddity of the patch is that it tests for\nLSHIFTRT as inner shift, as simplify/combine has already canonicalized\nthis to a logical shift, assuming that the distinction is unimportant\nfollowing the truncatation.\n\n2020-08-16  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* simplify-rtx.c (simplify_unary_operation_1) [SIGN_EXTEND]:\n\tSimplify (sign_extend:M (truncate:N (lshiftrt:M x C))) to\n\t(ashiftrt:M x C) when the shift sets the high bits appropriately.", "tree": {"sha": "2eba122f1ba3767c2de299eb6f9b79c2aa3f5f77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2eba122f1ba3767c2de299eb6f9b79c2aa3f5f77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c99116aeeb9644ebddec653ee8b19de4d38b65bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c99116aeeb9644ebddec653ee8b19de4d38b65bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c99116aeeb9644ebddec653ee8b19de4d38b65bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c99116aeeb9644ebddec653ee8b19de4d38b65bd/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10218124c66445517dca81a79728216064f7f1fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10218124c66445517dca81a79728216064f7f1fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10218124c66445517dca81a79728216064f7f1fe"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "869f0d11b2e363d1224418cde7ffb15ac73fb78c", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99116aeeb9644ebddec653ee8b19de4d38b65bd/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99116aeeb9644ebddec653ee8b19de4d38b65bd/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=c99116aeeb9644ebddec653ee8b19de4d38b65bd", "patch": "@@ -1527,6 +1527,38 @@ simplify_unary_operation_1 (enum rtx_code code, machine_mode mode, rtx op)\n \t  && XEXP (op, 1) != const0_rtx)\n \treturn simplify_gen_unary (ZERO_EXTEND, mode, op, GET_MODE (op));\n \n+      /* (sign_extend:M (truncate:N (lshiftrt:O <X> (const_int I)))) where\n+\t I is GET_MODE_PRECISION(O) - GET_MODE_PRECISION(N), simplifies to\n+\t (ashiftrt:M <X> (const_int I)) if modes M and O are the same, and\n+\t (truncate:M (ashiftrt:O <X> (const_int I))) if M is narrower than\n+\t O, and (sign_extend:M (ashiftrt:O <X> (const_int I))) if M is\n+\t wider than O.  */\n+      if (GET_CODE (op) == TRUNCATE\n+\t  && GET_CODE (XEXP (op, 0)) == LSHIFTRT\n+\t  && CONST_INT_P (XEXP (XEXP (op, 0), 1)))\n+\t{\n+\t  scalar_int_mode m_mode, n_mode, o_mode;\n+\t  rtx old_shift = XEXP (op, 0);\n+\t  if (is_a <scalar_int_mode> (mode, &m_mode)\n+\t      && is_a <scalar_int_mode> (GET_MODE (op), &n_mode)\n+\t      && is_a <scalar_int_mode> (GET_MODE (old_shift), &o_mode)\n+\t      && GET_MODE_PRECISION (o_mode) - GET_MODE_PRECISION (n_mode)\n+\t\t == INTVAL (XEXP (old_shift, 1)))\n+\t    {\n+\t      rtx new_shift = simplify_gen_binary (ASHIFTRT,\n+\t\t\t\t\t\t   GET_MODE (old_shift),\n+\t\t\t\t\t\t   XEXP (old_shift, 0),\n+\t\t\t\t\t\t   XEXP (old_shift, 1));\n+\t      if (GET_MODE_PRECISION (m_mode) > GET_MODE_PRECISION (o_mode))\n+\t\treturn simplify_gen_unary (SIGN_EXTEND, mode, new_shift,\n+\t\t\t\t\t   GET_MODE (new_shift));\n+\t      if (mode != GET_MODE (new_shift))\n+\t\treturn simplify_gen_unary (TRUNCATE, mode, new_shift,\n+\t\t\t\t\t   GET_MODE (new_shift));\n+\t      return new_shift;\n+\t    }\n+\t}\n+\n #if defined(POINTERS_EXTEND_UNSIGNED)\n       /* As we do not know which address space the pointer is referring to,\n \t we can do this only if the target does not support different pointer"}]}