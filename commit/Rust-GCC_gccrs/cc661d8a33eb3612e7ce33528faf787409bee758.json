{"sha": "cc661d8a33eb3612e7ce33528faf787409bee758", "node_id": "C_kwDOANBUbNoAKGNjNjYxZDhhMzNlYjM2MTJlN2NlMzM1MjhmYWY3ODc0MDliZWU3NTg", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-05-12T07:13:30Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@embecosm.com", "date": "2023-05-18T20:38:32Z"}, "message": "Improve Optional<T> implementation\n\ngcc/rust/ChangeLog:\n\n\t* util/rust-optional.h\n\t(class Optional<T>): Improve inner state.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "258b05236517db0e60b99cd5a9d883846c4a0eaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/258b05236517db0e60b99cd5a9d883846c4a0eaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc661d8a33eb3612e7ce33528faf787409bee758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc661d8a33eb3612e7ce33528faf787409bee758", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc661d8a33eb3612e7ce33528faf787409bee758", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc661d8a33eb3612e7ce33528faf787409bee758/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee5b5905deba07104dec5bdbb889b9754c0e9c89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee5b5905deba07104dec5bdbb889b9754c0e9c89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee5b5905deba07104dec5bdbb889b9754c0e9c89"}], "stats": {"total": 80, "additions": 52, "deletions": 28}, "files": [{"sha": "e3593a12a0f953a34d8c36bda6cc18286b0c270c", "filename": "gcc/rust/util/rust-optional.h", "status": "modified", "additions": 52, "deletions": 28, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc661d8a33eb3612e7ce33528faf787409bee758/gcc%2Frust%2Futil%2Frust-optional.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc661d8a33eb3612e7ce33528faf787409bee758/gcc%2Frust%2Futil%2Frust-optional.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-optional.h?ref=cc661d8a33eb3612e7ce33528faf787409bee758", "patch": "@@ -74,48 +74,72 @@ namespace Rust {\n template <typename T> class Optional\n {\n private:\n-  struct Empty\n+  struct tag_some\n   {\n   };\n-\n-  enum Kind\n+  struct tag_none\n   {\n-    Some,\n-    None\n-  } kind;\n+  };\n \n-  union Content\n+  bool field_is_some;\n+\n+  union\n   {\n-    Empty empty;\n     T value;\n+  };\n \n-    Content () = default;\n-  } content;\n+  Optional (tag_some, const T &value) : field_is_some (true), value (value) {}\n+  Optional (tag_some, T &&value) : field_is_some (true), value (value) {}\n \n-  Optional<T> (Kind kind, Content content) : kind (kind), content (content) {}\n+  Optional (tag_none) : field_is_some (false) {}\n \n public:\n-  Optional (const Optional &other) = default;\n-  Optional &operator= (const Optional &other) = default;\n-  Optional (Optional &&other) = default;\n+  Optional (const Optional &other)\n+  {\n+    if ((field_is_some = other.field_is_some))\n+      new (&value) T (other.value);\n+  }\n \n-  static Optional<T> some (T value)\n+  Optional (Optional &&other)\n   {\n-    Content content;\n-    content.value = value;\n+    if ((field_is_some = other.field_is_some))\n+      new (&value) T (other.value);\n+  }\n \n-    return Optional (Kind::Some, content);\n+  Optional &operator= (const Optional &other)\n+  {\n+    if (is_some ())\n+      value.~T ();\n+    if ((field_is_some = other.field_is_some))\n+      new (&value) T (other.value);\n+    return *this;\n   }\n \n-  static Optional<T> none ()\n+  Optional &operator= (Optional &&other)\n   {\n-    Content content;\n-    content.empty = Empty ();\n+    if (is_some ())\n+      value.~T ();\n+    if ((field_is_some = other.field_is_some))\n+      new (&value) T (other.value);\n+    return *this;\n+  }\n \n-    return Optional (Kind::None, content);\n+  ~Optional ()\n+  {\n+    if (is_some ())\n+      value.~T ();\n   }\n \n-  bool is_some () const { return kind == Kind::Some; }\n+  static Optional some (const T &value)\n+  {\n+    return Optional (tag_some (), value);\n+  }\n+\n+  static Optional some (T &&value) { return Optional (tag_some (), value); }\n+\n+  static Optional none () { return Optional (tag_none ()); }\n+\n+  bool is_some () const { return field_is_some; }\n   bool is_none () const { return !is_some (); }\n \n   /**\n@@ -135,24 +159,24 @@ template <typename T> class Optional\n   {\n     rust_assert (is_some ());\n \n-    return content.value;\n+    return value;\n   }\n \n   T &get ()\n   {\n     rust_assert (is_some ());\n \n-    return content.value;\n+    return value;\n   }\n \n   T take ()\n   {\n     rust_assert (is_some ());\n \n-    auto to_return = std::move (content.value);\n+    T to_return = std::move (value);\n+    value.~T ();\n \n-    content.empty = Empty ();\n-    kind = Kind::None;\n+    field_is_some = false;\n \n     return to_return;\n   }"}]}