{"sha": "a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZiYjZiMDdmNzZjNDQzMWNiNWEyYTUyMGFjMzNmN2M5NzBiODBjMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-11-13T04:40:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-11-13T04:40:01Z"}, "message": "Implement P0722R3, destroying operator delete.\n\nA destroying operator delete takes responsibility for calling the destructor\nfor the object it is deleting; this is intended to be useful for sized\ndelete of a class allocated with a trailing buffer, where the compiler can't\nknow the size of the allocation, and so would pass the wrong size to the\nnon-destroying sized operator delete.\n\ngcc/c-family/\n\t* c-cppbuiltin.c (c_cpp_builtins): Define\n\t__cpp_impl_destroying_delete.\ngcc/cp/\n\t* call.c (std_destroying_delete_t_p, destroying_delete_p): New.\n\t(aligned_deallocation_fn_p, usual_deallocation_fn_p): Use\n\tdestroying_delete_p.\n\t(build_op_delete_call): Handle destroying delete.\n\t* decl2.c (coerce_delete_type): Handle destroying delete.\n\t* init.c (build_delete): Don't call dtor with destroying delete.\n\t* optimize.c (build_delete_destructor_body): Likewise.\nlibstdc++-v3/\n\t* libsupc++/new (std::destroying_delete_t): New.\n\nFrom-SVN: r266053", "tree": {"sha": "4da8d10f970dd37ab850c548d36cd4980e9a623d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4da8d10f970dd37ab850c548d36cd4980e9a623d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7de37c97b4031ba61c867cf6fadf63916c666894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7de37c97b4031ba61c867cf6fadf63916c666894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7de37c97b4031ba61c867cf6fadf63916c666894"}], "stats": {"total": 191, "additions": 174, "deletions": 17}, "files": [{"sha": "165f9b7efcc4f170be3c06202dd35b96fdd716eb", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1", "patch": "@@ -1,5 +1,8 @@\n 2018-11-12  Jason Merrill  <jason@redhat.com>\n \n+\t* c-cppbuiltin.c (c_cpp_builtins): Define\n+\t__cpp_impl_destroying_delete.\n+\n \t* c-cppbuiltin.c (c_cpp_builtins): Change __cpp_explicit_bool to\n \t__cpp_conditional_explicit.\n "}, {"sha": "7daa3e33990bfc524a9f84a468a6eb85afe9ed19", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1", "patch": "@@ -980,6 +980,7 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  /* Set feature test macros for C++2a.  */\n \t  cpp_define (pfile, \"__cpp_conditional_explicit=201806\");\n \t  cpp_define (pfile, \"__cpp_nontype_template_parameter_class=201806\");\n+\t  cpp_define (pfile, \"__cpp_impl_destroying_delete=201806\");\n \t}\n       if (flag_concepts)\n \tcpp_define (pfile, \"__cpp_concepts=201507\");"}, {"sha": "5497a0829e3c5c1938c09392c289e29d116fb2f2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1", "patch": "@@ -1,5 +1,14 @@\n 2018-11-12  Jason Merrill  <jason@redhat.com>\n \n+\tImplement P0722R3, destroying operator delete.\n+\t* call.c (std_destroying_delete_t_p, destroying_delete_p): New.\n+\t(aligned_deallocation_fn_p, usual_deallocation_fn_p): Use\n+\tdestroying_delete_p.\n+\t(build_op_delete_call): Handle destroying delete.\n+\t* decl2.c (coerce_delete_type): Handle destroying delete.\n+\t* init.c (build_delete): Don't call dtor with destroying delete.\n+\t* optimize.c (build_delete_destructor_body): Likewise.\n+\n \tImplement P0780R2, pack expansion in lambda init-capture.\n \t* parser.c (cp_parser_lambda_introducer): Parse pack init-capture.\n \t* pt.c (tsubst_pack_expansion): Handle init-capture packs."}, {"sha": "b668e031d3c5b66154d7b9648a15ea0a2391b7b5", "filename": "gcc/cp/call.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1", "patch": "@@ -6190,6 +6190,31 @@ aligned_allocation_fn_p (tree t)\n   return (a && same_type_p (TREE_VALUE (a), align_type_node));\n }\n \n+/* True if T is std::destroying_delete_t.  */\n+\n+static bool\n+std_destroying_delete_t_p (tree t)\n+{\n+  return (TYPE_CONTEXT (t) == std_node\n+\t  && id_equal (TYPE_IDENTIFIER (t), \"destroying_delete_t\"));\n+}\n+\n+/* A deallocation function with at least two parameters whose second parameter\n+   type is of type std::destroying_delete_t is a destroying operator delete. A\n+   destroying operator delete shall be a class member function named operator\n+   delete. [ Note: Array deletion cannot use a destroying operator\n+   delete. --end note ] */\n+\n+tree\n+destroying_delete_p (tree t)\n+{\n+  tree a = TYPE_ARG_TYPES (TREE_TYPE (t));\n+  if (!a || !TREE_CHAIN (a))\n+    return NULL_TREE;\n+  tree type = TREE_VALUE (TREE_CHAIN (a));\n+  return std_destroying_delete_t_p (type) ? type : NULL_TREE;\n+}\n+\n /* Returns true iff T, an element of an OVERLOAD chain, is a usual deallocation\n    function (3.7.4.2 [basic.stc.dynamic.deallocation]) with a parameter of\n    std::align_val_t.  */\n@@ -6207,6 +6232,8 @@ aligned_deallocation_fn_p (tree t)\n     return false;\n \n   tree a = FUNCTION_ARG_CHAIN (t);\n+  if (destroying_delete_p (t))\n+    a = TREE_CHAIN (a);\n   if (same_type_p (TREE_VALUE (a), align_type_node)\n       && TREE_CHAIN (a) == void_list_node)\n     return true;\n@@ -6242,6 +6269,8 @@ usual_deallocation_fn_p (tree t)\n   tree chain = FUNCTION_ARG_CHAIN (t);\n   if (!chain)\n     return false;\n+  if (destroying_delete_p (t))\n+    chain = TREE_CHAIN (chain);\n   if (chain == void_list_node\n       || ((!global || flag_sized_deallocation)\n \t  && second_parm_is_size_t (t)))\n@@ -6307,6 +6336,7 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n     fns = lookup_name_nonclass (fnname);\n \n   /* Strip const and volatile from addr.  */\n+  tree oaddr = addr;\n   addr = cp_convert (ptr_type_node, addr, complain);\n \n   if (placement)\n@@ -6484,9 +6514,24 @@ build_op_delete_call (enum tree_code code, tree addr, tree size,\n \t}\n       else\n \t{\n+\t  tree destroying = destroying_delete_p (fn);\n+\t  if (destroying)\n+\t    {\n+\t      /* Strip const and volatile from addr but retain the type of the\n+\t\t object.  */\n+\t      tree rtype = TREE_TYPE (TREE_TYPE (oaddr));\n+\t      rtype = cv_unqualified (rtype);\n+\t      rtype = TYPE_POINTER_TO (rtype);\n+\t      addr = cp_convert (rtype, oaddr, complain);\n+\t      destroying = build_functional_cast (destroying, NULL_TREE,\n+\t\t\t\t\t\t  complain);\n+\t    }\n+\n \t  tree ret;\n \t  vec<tree, va_gc> *args = make_tree_vector ();\n \t  args->quick_push (addr);\n+\t  if (destroying)\n+\t    args->quick_push (destroying);\n \t  if (second_parm_is_size_t (fn))\n \t    args->quick_push (size);\n \t  if (aligned_deallocation_fn_p (fn))"}, {"sha": "c4d79c0cf7fe35112544a6a07866e5f9346e7a7b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1", "patch": "@@ -6127,6 +6127,7 @@ extern tree build_new_op\t\t\t(location_t, enum tree_code,\n extern tree build_op_call\t\t\t(tree, vec<tree, va_gc> **,\n \t\t\t\t\t\t tsubst_flags_t);\n extern bool aligned_allocation_fn_p\t\t(tree);\n+extern tree destroying_delete_p\t\t\t(tree);\n extern bool usual_deallocation_fn_p\t\t(tree);\n extern tree build_op_delete_call\t\t(enum tree_code, tree, tree,\n \t\t\t\t\t\t bool, tree, tree,\n@@ -6456,7 +6457,7 @@ extern void cplus_decl_attributes\t\t(tree *, tree, int);\n extern void finish_anon_union\t\t\t(tree);\n extern void cxx_post_compilation_parsing_cleanups (void);\n extern tree coerce_new_type\t\t\t(tree, location_t);\n-extern tree coerce_delete_type\t\t\t(tree, location_t);\n+extern void coerce_delete_type\t\t\t(tree, location_t);\n extern void comdat_linkage\t\t\t(tree);\n extern void determine_visibility\t\t(tree);\n extern void constrain_class_visibility\t\t(tree);"}, {"sha": "42994055d5fd0128e00d7796e726a58b0ec204c6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1", "patch": "@@ -13401,7 +13401,7 @@ grok_op_properties (tree decl, bool complain)\n \t}\n \n       if (op_flags & OVL_OP_FLAG_DELETE)\n-\tTREE_TYPE (decl) = coerce_delete_type (TREE_TYPE (decl), loc);\n+\tcoerce_delete_type (decl, loc);\n       else\n \t{\n \t  DECL_IS_OPERATOR_NEW (decl) = 1;"}, {"sha": "13c156b947d0136c70d17464af8515abb3d3686a", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1", "patch": "@@ -1739,10 +1739,11 @@ coerce_new_type (tree type, location_t loc)\n   return type;\n }\n \n-tree\n-coerce_delete_type (tree type, location_t loc)\n+void\n+coerce_delete_type (tree decl, location_t loc)\n {\n   int e = 0;\n+  tree type = TREE_TYPE (decl);\n   tree args = TYPE_ARG_TYPES (type);\n \n   gcc_assert (TREE_CODE (type) == FUNCTION_TYPE);\n@@ -1754,19 +1755,38 @@ coerce_delete_type (tree type, location_t loc)\n \t\tvoid_type_node);\n     }\n \n+  tree ptrtype = ptr_type_node;\n+  if (destroying_delete_p (decl))\n+    {\n+      if (DECL_CLASS_SCOPE_P (decl))\n+\t/* If the function is a destroying operator delete declared in class type\n+\t   C, the type of its first parameter shall be C*.  */\n+\tptrtype = TYPE_POINTER_TO (DECL_CONTEXT (decl));\n+      else\n+\t/* A destroying operator delete shall be a class member function named\n+\t   operator delete.  */\n+\terror_at (loc, \"destroying operator delete must be a member function\");\n+      const ovl_op_info_t *op = IDENTIFIER_OVL_OP_INFO (DECL_NAME (decl));\n+      if (op->flags & OVL_OP_FLAG_VEC)\n+\terror_at (loc, \"operator delete[] cannot be a destroying delete\");\n+      if (!usual_deallocation_fn_p (decl))\n+\terror_at (loc, \"destroying operator delete must be a usual \"\n+\t\t  \"deallocation function\");\n+    }\n+\n   if (!args || args == void_list_node\n-      || !same_type_p (TREE_VALUE (args), ptr_type_node))\n+      || !same_type_p (TREE_VALUE (args), ptrtype))\n     {\n       e = 2;\n       if (args && args != void_list_node)\n \targs = TREE_CHAIN (args);\n       error_at (loc, \"%<operator delete%> takes type %qT as first parameter\",\n-\t\tptr_type_node);\n+\t\tptrtype);\n     }\n   switch (e)\n   {\n     case 2:\n-      args = tree_cons (NULL_TREE, ptr_type_node, args);\n+      args = tree_cons (NULL_TREE, ptrtype, args);\n       /* Fall through.  */\n     case 1:\n       type = (cxx_copy_lang_qualifiers\n@@ -1776,7 +1796,7 @@ coerce_delete_type (tree type, location_t loc)\n     default:;\n   }\n \n-  return type;\n+  TREE_TYPE (decl) = type;\n }\n \f\n /* DECL is a VAR_DECL for a vtable: walk through the entries in the vtable"}, {"sha": "5a314862c805e353cce74e1c3036626478f9401f", "filename": "gcc/cp/init.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1", "patch": "@@ -4782,6 +4782,7 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n \n   tree head = NULL_TREE;\n   tree do_delete = NULL_TREE;\n+  bool destroying_delete = false;\n \n   if (!deleting)\n     {\n@@ -4820,6 +4821,11 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n \t\t\t\t\tcomplain);\n       /* Call the complete object destructor.  */\n       auto_delete = sfk_complete_destructor;\n+      if (do_delete != error_mark_node)\n+\t{\n+\t  tree fn = get_callee_fndecl (do_delete);\n+\t  destroying_delete = destroying_delete_p (fn);\n+\t}\n     }\n   else if (TYPE_GETS_REG_DELETE (type))\n     {\n@@ -4832,7 +4838,7 @@ build_delete (tree otype, tree addr, special_function_kind auto_delete,\n \t\t\t    complain);\n     }\n \n-  if (type_build_dtor_call (type))\n+  if (!destroying_delete && type_build_dtor_call (type))\n     expr = build_dtor_call (cp_build_fold_indirect_ref (addr),\n \t\t\t    auto_delete, flags, complain);\n   else"}, {"sha": "da068b5931a6476fe74374d789a0638f4a0fa8f5", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1", "patch": "@@ -117,11 +117,6 @@ build_delete_destructor_body (tree delete_dtor, tree complete_dtor)\n   tree parm = DECL_ARGUMENTS (delete_dtor);\n   tree virtual_size = cxx_sizeof (current_class_type);\n \n-  /* Call the corresponding complete destructor.  */\n-  gcc_assert (complete_dtor);\n-  tree call_dtor = build_cxx_call (complete_dtor, 1, &parm,\n-\t\t\t\t   tf_warning_or_error);\n-\n   /* Call the delete function.  */\n   tree call_delete = build_op_delete_call (DELETE_EXPR, current_class_ptr,\n \t\t\t\t\t   virtual_size,\n@@ -130,10 +125,26 @@ build_delete_destructor_body (tree delete_dtor, tree complete_dtor)\n \t\t\t\t\t   /*alloc_fn=*/NULL_TREE,\n \t\t\t\t\t   tf_warning_or_error);\n \n-  /* Operator delete must be called, whether or not the dtor throws.  */\n-  add_stmt (build2 (TRY_FINALLY_EXPR, void_type_node, call_dtor, call_delete));\n+  tree op = get_callee_fndecl (call_delete);\n+  if (op && DECL_P (op) && destroying_delete_p (op))\n+    {\n+      /* The destroying delete will handle calling complete_dtor.  */\n+      add_stmt (call_delete);\n+    }\n+  else\n+    {\n+      /* Call the corresponding complete destructor.  */\n+      gcc_assert (complete_dtor);\n+      tree call_dtor = build_cxx_call (complete_dtor, 1, &parm,\n+\t\t\t\t       tf_warning_or_error);\n+\n+      /* Operator delete must be called, whether or not the dtor throws.  */\n+      add_stmt (build2 (TRY_FINALLY_EXPR, void_type_node,\n+\t\t\tcall_dtor, call_delete));\n+    }\n \n-  /* Return the address of the object.  */\n+  /* Return the address of the object.\n+     ??? How is it useful to return an invalid address?  */\n   if (targetm.cxx.cdtor_returns_this ())\n     {\n       tree val = DECL_ARGUMENTS (delete_dtor);"}, {"sha": "329588be7ab56a0ac12b34b52ecd3a7383f1210c", "filename": "gcc/testsuite/g++.dg/cpp2a/destroying-delete1.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdestroying-delete1.C?ref=a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do run { target c++2a } }\n+\n+#include <new>\n+\n+int adt, adl;\n+struct A {\n+  ~A() { ++adt; }\n+  void operator delete (A *p, std::destroying_delete_t) {\n+    ++adl;\n+    if (adt) __builtin_abort();\n+    p->~A();\n+    ::operator delete (p);\n+  }\n+};\n+\n+struct B {\n+  virtual ~B() {}\n+  void operator delete(void*, std::size_t) { __builtin_abort(); }\n+};\n+\n+int edel, edtor;\n+struct E : B {\n+  ~E() { ++edtor; }\n+  void operator delete(E *p, std::destroying_delete_t) {\n+    ++edel;\n+    if (edtor) __builtin_abort();\n+    p->~E();\n+    ::operator delete(p);\n+  }\n+};\n+int main() {\n+  A* ap = new A;\n+  delete ap;\n+  if (adl != 1 || adt != 1)\n+    __builtin_abort();\n+\n+  B* bp = new E;\n+  delete bp; // 2: uses E::operator delete(E*, std::destroying_delete_t)\n+  if (edel != 1 || edtor != 1)\n+    __builtin_abort();\n+}"}, {"sha": "dba77179b82499e7516a1e062e3121501bfc610e", "filename": "gcc/testsuite/g++.dg/cpp2a/feat-cxx2a.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffeat-cxx2a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffeat-cxx2a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Ffeat-cxx2a.C?ref=a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1", "patch": "@@ -426,6 +426,10 @@\n # error \"__cpp_nontype_template_parameter_class != 201806\"\n #endif\n \n+#if __cpp_impl_destroying_delete != 201806\n+# error \"__cpp_impl_destroying_delete != 201806\"\n+#endif\n+\n #ifdef __has_cpp_attribute\n \n #  if ! __has_cpp_attribute(maybe_unused)"}, {"sha": "d904b45f7dfcf4fb82e75dc4845f1ea48947710a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1", "patch": "@@ -1,3 +1,7 @@\n+2018-11-12  Jason Merrill  <jason@redhat.com>\n+\n+\t* libsupc++/new (std::destroying_delete_t): New.\n+\n 2018-11-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/87963"}, {"sha": "91ebf3c2cd716c94bd2bdcd5ed91fccb8ee34232", "filename": "libstdc++-v3/libsupc++/new", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fnew?ref=a6bb6b07f76c4431cb5a2a520ac33f7c970b80c1", "patch": "@@ -208,6 +208,18 @@ namespace std\n #endif // _GLIBCXX_HAVE_BUILTIN_LAUNDER\n #endif // C++17\n \n+#if __cpp_impl_destroying_delete\n+#define __cpp_lib_destroying_delete 201806L\n+namespace std\n+{\n+  struct destroying_delete_t\n+  {\n+    explicit destroying_delete_t() = default;\n+  };\n+  inline constexpr destroying_delete_t destroying_delete{};\n+}\n+#endif // destroying delete\n+\n #pragma GCC visibility pop\n \n #endif"}]}