{"sha": "c285126cc0af8891a29e136be4b10ed27caef470", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI4NTEyNmNjMGFmODg5MWEyOWUxMzZiZTRiMTBlZDI3Y2FlZjQ3MA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-08-31T17:27:15Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-09-02T20:59:34Z"}, "message": "d: Only test with default permutation flags for runnable tests.\n\nUnless the test explicitly requests, all compilable tests as well as\nfail_compilation tests will be ran without any extra flags.\n\nThe C++ tests now are checked against shared D runtime library.\n\ngcc/testsuite/ChangeLog:\n\n\t* lib/gdc-utils.exp (gdc-convert-test): Handle LINK directive.\n\tSet PERMUTE_ARGS as DEFAULT_DFLAGS only for runnable tests.\n\t(gdc-do-test): Set default action of compilable tests to compile.\n\tTest SHARED_OPTION on runnable_cxx tests.", "tree": {"sha": "11720164ff0a2a79f2d2c8425c421da822810e04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11720164ff0a2a79f2d2c8425c421da822810e04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c285126cc0af8891a29e136be4b10ed27caef470", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c285126cc0af8891a29e136be4b10ed27caef470", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c285126cc0af8891a29e136be4b10ed27caef470", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c285126cc0af8891a29e136be4b10ed27caef470/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72ddef620b2dec03bb81d5784d15f00dc08c9a3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72ddef620b2dec03bb81d5784d15f00dc08c9a3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72ddef620b2dec03bb81d5784d15f00dc08c9a3e"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "b1f90b8f92e1573f2ce6bc1f49747394c155e67e", "filename": "gcc/testsuite/lib/gdc-utils.exp", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c285126cc0af8891a29e136be4b10ed27caef470/gcc%2Ftestsuite%2Flib%2Fgdc-utils.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c285126cc0af8891a29e136be4b10ed27caef470/gcc%2Ftestsuite%2Flib%2Fgdc-utils.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgdc-utils.exp?ref=c285126cc0af8891a29e136be4b10ed27caef470", "patch": "@@ -192,6 +192,7 @@ proc gdc-copy-extra { base extra } {\n #   PERMUTE_ARGS:\tThe set of arguments to permute in multiple compiler\n #\t\t\tinvocations.  An empty set means only one permutation\n #\t\t\twith no arguments.\n+#   LINK:\t\tEnables linking.\n #   TEST_OUTPUT:\tThe output expected from the compilation.\n #   POST_SCRIPT:\tNot handled.\n #   REQUIRED_ARGS:\tArguments to add to the compiler command line.\n@@ -203,12 +204,13 @@ proc gdc-convert-test { base test } {\n     global PERMUTE_ARGS\n     global GDC_EXECUTE_ARGS\n \n-    set PERMUTE_ARGS $DEFAULT_DFLAGS\n+    set PERMUTE_ARGS \"\"\n     set GDC_EXECUTE_ARGS \"\"\n \n     set extra_sources \"\"\n     set extra_files \"\"\n     set needs_phobos 0\n+    set saw_test_flags 0\n \n     upvar 1 compilable_do_what compilable_do_what\n     set compilable_output_file_ext \"\"\n@@ -237,6 +239,10 @@ proc gdc-convert-test { base test } {\n \t    # DISABLED is not handled.\n \t    regsub -- {DISABLED.*$} $copy_line \"\" out_line\n \n+\t} elseif [regexp -- {LINK:} $copy_line] {\n+\t    # LINK sets dg-do-what-default \"link\"\n+\t    set compilable_do_what \"link\"\n+\n \t} elseif [regexp -- {POST_SCRIPT} $copy_line] {\n \t    # POST_SCRIPT is not handled\n \t    regsub -- {POST_SCRIPT.*$} $copy_line \"\" out_line\n@@ -246,14 +252,13 @@ proc gdc-convert-test { base test } {\n \t    if { $args != \"\" } {\n \t\terror \"gdc-convert-test: DFLAGS is not empty as expected\"\n \t    }\n-\t    if { $PERMUTE_ARGS == $DEFAULT_DFLAGS } {\n-\t\tset PERMUTE_ARGS \"\"\n-\t    }\n+\t    set saw_test_flags 1\n \t    regsub -- {DFLAGS.*$} $copy_line \"\" out_line\n \n \t} elseif [regexp -- {PERMUTE_ARGS\\s*:\\s*(.*)} $copy_line match args] {\n \t    # PERMUTE_ARGS is handled by gdc-do-test.\n \t    set PERMUTE_ARGS [gdc-convert-args $args]\n+\t    set saw_test_flags 1\n \t    regsub -- {PERMUTE_ARGS.*$} $copy_line \"\" out_line\n \n \t} elseif [regexp -- {EXECUTE_ARGS\\s*:\\s*(.*)} $copy_line match args] {\n@@ -339,21 +344,26 @@ proc gdc-convert-test { base test } {\n     # Fail compilable are successful if an output is not generated.\n     # Runnable must compile, link, and return 0 to be successful by default.\n     switch $type {\n+\trunnable_cxx -\n \trunnable {\n \t    if ![isnative] {\n \t\tputs $fdout \"// { dg-final { output-exists } }\"\n \t    }\n \t    if $needs_phobos {\n \t\tputs $fdout \"// { dg-skip-if \\\"imports phobos\\\" { ! d_runtime_has_std_library } }\"\n \t    }\n+\t    # Run runnable tests with all default permutations if not\n+\t    # explicitly set in the test file.\n+\t    if !$saw_test_flags {\n+\t\tset PERMUTE_ARGS $DEFAULT_DFLAGS\n+\t    }\n \t}\n \n \tcompilable {\n \t    puts $fdout \"// { dg-final { output-exists } }\"\n \n \t    # Compilable test may require checking another kind of output file.\n \t    if { $compilable_output_file_ext != \"\" } {\n-\t\tset compilable_do_what \"compile\"\n \t\t# Check that file generation tests output the expected file.\n \t\tset genfile \"[file rootname $name].$compilable_output_file_ext\"\n \t\tputs $fdout \"// { dg-final { if \\[file exists $genfile\\] \\\\{           } }\"\n@@ -370,11 +380,6 @@ proc gdc-convert-test { base test } {\n \t}\n \n \tfail_compilation {\n-\t    # Fail compilation tests only check for language errors from the\n-\t    # front-end.  No need to run all permutations of the default DFLAGS.\n-\t    if { $PERMUTE_ARGS == $DEFAULT_DFLAGS } {\n-\t\tset PERMUTE_ARGS \"\"\n-\t    }\n \t    puts $fdout \"// { dg-final { output-exists-not } }\"\n \t}\n     }\n@@ -451,11 +456,11 @@ proc gdc-do-test { testcases } {\n \t# Convert to DG test.\n \tset imports [format \"-I%s/%s\" $base $type]\n \tset cleanup_extra_files \"\"\n-\tset compilable_do_what \"assemble\"\n+\tset compilable_do_what \"compile\"\n \t# Include $testdir prefix so test names follow DejaGnu conventions.\n \tset filename \"$testdir/[gdc-convert-test $base $type/$name.$ext]\"\n \n-\tif { $type == \"runnable\" } {\n+\tif { $type == \"runnable\" || $type == \"runnable_cxx\" } {\n \t    append PERMUTE_ARGS \" $SHARED_OPTION\"\n \t}\n "}]}