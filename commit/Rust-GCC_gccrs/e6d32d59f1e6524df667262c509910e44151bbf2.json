{"sha": "e6d32d59f1e6524df667262c509910e44151bbf2", "node_id": "C_kwDOANBUbNoAKGU2ZDMyZDU5ZjFlNjUyNGRmNjY3MjYyYzUwOTkxMGU0NDE1MWJiZjI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-06-08T15:55:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-08T15:55:54Z"}, "message": "Merge #1298\n\n1298: rust/intrinsic: add a basic size check for `transmute` r=philberty a=liushuyu\n\n- rust/intrinsic: add a basic size check for `transmute`\r\n\r\npartially addresses #1195\n\nCo-authored-by: liushuyu <liushuyu011@gmail.com>", "tree": {"sha": "8904df62b4caf13af6a683628b5e9b0570861cd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8904df62b4caf13af6a683628b5e9b0570861cd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6d32d59f1e6524df667262c509910e44151bbf2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJioMaKCRBK7hj4Ov3rIwAAu9AIAFYgErOR8NvyBsjG/TJ57yrn\n4vsL5dw9ZYQP1096+9dH+Y3ej2ojOygyLvxFSNvaYoXe7Y5K/iGhlSu8/ZUL24I6\n7kuNZhva08ggUQFGNLZE/Q9KuntFATNnRfSZ47yg9aC25ZnQNWh6scIlJUemJb5G\nb90WsosZ453SpjLprh7G4yTzKykOK2T82bvtdl2AJSR9Ep4zMKTkVA8all6a9s7g\nMntRIsASajDsBJ8PFQIlUtKJkEupwO2m+p8BTuXLmdxfxsVrLhNL8pSjvm90XPvB\ntMMTGzvbU9T96Jnue47ON+6h2Ioc+Zr6S7DAR4j1oPCWsfO/A5L5iHUmn6oeHu0=\n=UMN2\n-----END PGP SIGNATURE-----\n", "payload": "tree 8904df62b4caf13af6a683628b5e9b0570861cd9\nparent 8f47bc322cc0e49fd249a63292173821a70d9a53\nparent 188dd73755914865bd138eb886094fb957ab185c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1654703754 +0000\ncommitter GitHub <noreply@github.com> 1654703754 +0000\n\nMerge #1298\n\n1298: rust/intrinsic: add a basic size check for `transmute` r=philberty a=liushuyu\n\n- rust/intrinsic: add a basic size check for `transmute`\r\n\r\npartially addresses #1195\n\nCo-authored-by: liushuyu <liushuyu011@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d32d59f1e6524df667262c509910e44151bbf2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6d32d59f1e6524df667262c509910e44151bbf2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d32d59f1e6524df667262c509910e44151bbf2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f47bc322cc0e49fd249a63292173821a70d9a53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f47bc322cc0e49fd249a63292173821a70d9a53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f47bc322cc0e49fd249a63292173821a70d9a53"}, {"sha": "188dd73755914865bd138eb886094fb957ab185c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/188dd73755914865bd138eb886094fb957ab185c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/188dd73755914865bd138eb886094fb957ab185c"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "e93480db134ebdaa8715ca593cb837a3217d6e0c", "filename": "gcc/rust/backend/rust-compile-intrinsic.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d32d59f1e6524df667262c509910e44151bbf2/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d32d59f1e6524df667262c509910e44151bbf2/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-intrinsic.cc?ref=e6d32d59f1e6524df667262c509910e44151bbf2", "patch": "@@ -20,6 +20,8 @@\n #include \"rust-compile-context.h\"\n #include \"rust-compile-type.h\"\n #include \"rust-compile-fnparam.h\"\n+#include \"rust-diagnostics.h\"\n+#include \"rust-location.h\"\n #include \"rust-tree.h\"\n #include \"tree-core.h\"\n \n@@ -477,6 +479,7 @@ transmute_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype_tyty)\n \n   // setup the params\n   std::vector<Bvariable *> param_vars;\n+  std::vector<tree_node *> compiled_types;\n   for (auto &parm : fntype->get_params ())\n     {\n       auto &referenced_param = parm.first;\n@@ -489,6 +492,7 @@ transmute_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype_tyty)\n \t\t\t\t   compiled_param_type, param_locus);\n \n       param_vars.push_back (compiled_param_var);\n+      compiled_types.push_back (compiled_param_type);\n     }\n \n   rust_assert (param_vars.size () == 1);\n@@ -500,6 +504,34 @@ transmute_intrinsic_handler (Context *ctx, TyTy::BaseType *fntype_tyty)\n   tree convert_me_expr\n     = ctx->get_backend ()->var_expression (convert_me_param, Location ());\n \n+  // check for transmute pre-conditions\n+  tree target_type_expr = TREE_TYPE (DECL_RESULT (fndecl));\n+  tree source_type_expr = compiled_types.at (0);\n+  tree target_size_expr = TYPE_SIZE (target_type_expr);\n+  tree source_size_expr = TYPE_SIZE (source_type_expr);\n+  // for some reason, unit types and other zero-sized types return NULL for the\n+  // size expressions\n+  unsigned HOST_WIDE_INT target_size\n+    = target_size_expr ? TREE_INT_CST_LOW (target_size_expr) : 0;\n+  unsigned HOST_WIDE_INT source_size\n+    = source_size_expr ? TREE_INT_CST_LOW (source_size_expr) : 0;\n+\n+  // size check for concrete types\n+  // TODO(liushuyu): check alignment for pointers; check for dependently-sized\n+  // types\n+  if (target_size != source_size)\n+    {\n+      rust_error_at (fntype->get_locus (),\n+\t\t     \"cannot transmute between types of different sizes, or \"\n+\t\t     \"dependently-sized types\");\n+      rust_inform (fntype->get_ident ().locus, \"source type: %qs (%lu bits)\",\n+\t\t   fntype->get_params ().at (0).second->as_string ().c_str (),\n+\t\t   source_size);\n+      rust_inform (fntype->get_ident ().locus, \"target type: %qs (%lu bits)\",\n+\t\t   fntype->get_return_type ()->as_string ().c_str (),\n+\t\t   target_size);\n+    }\n+\n   tree enclosing_scope = NULL_TREE;\n   Location start_location = Location ();\n   Location end_location = Location ();"}, {"sha": "c4817ad620c9e42e055a486290fa57ada57403a8", "filename": "gcc/rust/hir/tree/rust-hir-type.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d32d59f1e6524df667262c509910e44151bbf2/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d32d59f1e6524df667262c509910e44151bbf2/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-type.h?ref=e6d32d59f1e6524df667262c509910e44151bbf2", "patch": "@@ -582,10 +582,7 @@ class ArrayType : public TypeNoBounds\n   ArrayType (ArrayType const &other)\n     : TypeNoBounds (other.mappings), elem_type (other.elem_type->clone_type ()),\n       size (other.size->clone_expr ()), locus (other.locus)\n-  {\n-    // Untested.\n-    gcc_unreachable ();\n-  }\n+  {}\n \n   // Overload assignment operator to deep copy pointers\n   ArrayType &operator= (ArrayType const &other)"}, {"sha": "1aef4d81929636d8f250031e8e1eac52c883a8b4", "filename": "gcc/testsuite/rust/compile/torture/transmute-size-check-1.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d32d59f1e6524df667262c509910e44151bbf2/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftransmute-size-check-1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d32d59f1e6524df667262c509910e44151bbf2/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftransmute-size-check-1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftransmute-size-check-1.rs?ref=e6d32d59f1e6524df667262c509910e44151bbf2", "patch": "@@ -0,0 +1,11 @@\n+mod mem {\n+    extern \"rust-intrinsic\" {\n+        fn size_of<T>() -> usize;\n+        fn transmute<U, V>(_: U) -> V; // { dg-error \"cannot transmute between types of different sizes, or dependently-sized types\" }\n+    }\n+}\n+\n+fn main() {\n+    let a = 123;\n+    let _b: [u32; mem::size_of::<i32>()] = mem::transmute(a);\n+}"}]}