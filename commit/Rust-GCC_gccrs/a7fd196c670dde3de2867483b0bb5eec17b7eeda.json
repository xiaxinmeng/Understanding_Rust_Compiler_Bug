{"sha": "a7fd196c670dde3de2867483b0bb5eec17b7eeda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdmZDE5NmM2NzBkZGUzZGUyODY3NDgzYjBiYjVlZWMxN2I3ZWVkYQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-10-01T22:29:09Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-10-01T22:29:09Z"}, "message": "(gen_input_reload): Handle PLUS with MEM operand\nexactly the same as a PLUS with a REG operand.\n\nFrom-SVN: r5549", "tree": {"sha": "c9b026b338bbeafa60a5047be2c601c607188a2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9b026b338bbeafa60a5047be2c601c607188a2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7fd196c670dde3de2867483b0bb5eec17b7eeda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7fd196c670dde3de2867483b0bb5eec17b7eeda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7fd196c670dde3de2867483b0bb5eec17b7eeda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7fd196c670dde3de2867483b0bb5eec17b7eeda/comments", "author": null, "committer": null, "parents": [{"sha": "d9771f62959b956e116a8bba90fcc82f853aa1e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9771f62959b956e116a8bba90fcc82f853aa1e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9771f62959b956e116a8bba90fcc82f853aa1e4"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "72ec2340b91941868cb3204d524390b96b9e583a", "filename": "gcc/reload1.c", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7fd196c670dde3de2867483b0bb5eec17b7eeda/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7fd196c670dde3de2867483b0bb5eec17b7eeda/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=a7fd196c670dde3de2867483b0bb5eec17b7eeda", "patch": "@@ -6404,11 +6404,11 @@ gen_input_reload (reloadreg, in, opnum, type)\n      register that didn't get a hard register.  In that case we can just\n      call emit_move_insn.\n \n-     We can also be asked to reload a PLUS that adds either two registers, or\n-     a register and a constant or MEM, or a MEM and a constant.  This can\n-     occur during frame pointer elimination and while reloading addresses.\n-     This case is handled by trying to emit a single insn\n-     to perform the add.  If it is not valid, we use a two insn sequence.\n+     We can also be asked to reload a PLUS that adds a register or a MEM to\n+     another register, constant or MEM.  This can occur during frame pointer\n+     elimination and while reloading addresses.  This case is handled by\n+     trying to emit a single insn to perform the add.  If it is not valid,\n+     we use a two insn sequence.\n \n      Finally, we could be called to handle an 'o' constraint by putting\n      an address into a register.  In that case, we first try to do this\n@@ -6426,16 +6426,14 @@ gen_input_reload (reloadreg, in, opnum, type)\n      ??? At some point, this whole thing needs to be rethought.  */\n \n   if (GET_CODE (in) == PLUS\n-      && ((GET_CODE (XEXP (in, 0)) == REG\n-\t   && (GET_CODE (XEXP (in, 1)) == REG\n-\t       || CONSTANT_P (XEXP (in, 1))\n-\t       || GET_CODE (XEXP (in, 1)) == MEM))\n-\t  || (GET_CODE (XEXP (in, 0)) == MEM\n-\t      && CONSTANT_P (XEXP (in, 1)))))\n+      && (GET_CODE (XEXP (in, 0)) == REG\n+\t  || GET_CODE (XEXP (in, 0)) == MEM)\n+      && (GET_CODE (XEXP (in, 1)) == REG\n+\t  || CONSTANT_P (XEXP (in, 1))\n+\t  || GET_CODE (XEXP (in, 1)) == MEM))\n     {\n-      /* We need to compute the sum of what is either a register and a\n-\t constant, a register and memory, a hard register and a pseudo\n-\t register, or memory and a constant and put it into the reload\n+      /* We need to compute the sum of a register or a MEM and another\n+\t register, constant, or MEM, and put it into the reload\n \t register.  The best possible way of doing this is if the machine\n \t has a three-operand ADD insn that accepts the required operands.\n "}]}