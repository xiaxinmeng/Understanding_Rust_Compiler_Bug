{"sha": "45e76e9f397c72fb18ea89fedad822a2c553f34b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVlNzZlOWYzOTdjNzJmYjE4ZWE4OWZlZGFkODIyYTJjNTUzZjM0Yg==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-08-28T20:24:51Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-08-28T20:24:51Z"}, "message": "cfgloopmanip.c (create_empty_loop_on_edge): Generate upper bounds with LT_EXPR to make niter analysis more precise on code...\n\n2009-08-28  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* cfgloopmanip.c (create_empty_loop_on_edge): Generate upper\n\tbounds with LT_EXPR to make niter analysis more precise on code\n\tgenerated by Graphite.\n\nFrom-SVN: r151180", "tree": {"sha": "e5d165ea575dc338c49956ac68aa28027e244c10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5d165ea575dc338c49956ac68aa28027e244c10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45e76e9f397c72fb18ea89fedad822a2c553f34b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e76e9f397c72fb18ea89fedad822a2c553f34b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45e76e9f397c72fb18ea89fedad822a2c553f34b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e76e9f397c72fb18ea89fedad822a2c553f34b/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66b466c309828b8b2f09bcd3a614e59ff5ded8c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b466c309828b8b2f09bcd3a614e59ff5ded8c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66b466c309828b8b2f09bcd3a614e59ff5ded8c3"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "0105250838e10c7b913e2f0e9cb2a06704ad0b18", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e76e9f397c72fb18ea89fedad822a2c553f34b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e76e9f397c72fb18ea89fedad822a2c553f34b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45e76e9f397c72fb18ea89fedad822a2c553f34b", "patch": "@@ -1,3 +1,9 @@\n+2009-08-28  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* cfgloopmanip.c (create_empty_loop_on_edge): Generate upper\n+\tbounds with LT_EXPR to make niter analysis more precise on code\n+\tgenerated by Graphite.\n+\n 2009-08-28  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-dependences.c (graphite_legal_transform_dr): Fix formatting."}, {"sha": "d7d1a6a56f31b03af5162f2c71542df72d5055de", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e76e9f397c72fb18ea89fedad822a2c553f34b/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e76e9f397c72fb18ea89fedad822a2c553f34b/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=45e76e9f397c72fb18ea89fedad822a2c553f34b", "patch": "@@ -1,3 +1,9 @@\n+2009-08-18  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* cfgloopmanip.c (create_empty_loop_on_edge): Generate upper\n+\tbounds with LT_EXPR to make niter analysis more precise on code\n+\tgenerated by Graphite.\n+\n 2009-08-18  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* graphite-dependences.c (graphite_legal_transform_dr): Fix formatting."}, {"sha": "a357a2fd77aefc359dcdb14c89bc5f266d2d781d", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e76e9f397c72fb18ea89fedad822a2c553f34b/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e76e9f397c72fb18ea89fedad822a2c553f34b/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=45e76e9f397c72fb18ea89fedad822a2c553f34b", "patch": "@@ -599,7 +599,7 @@ create_empty_if_region_on_edge (edge entry_edge, tree condition)\n    |   |           |               |         |\n    |    -----------                |      ---V--- loop_body ---------------\n    |                               |     | iv_after = iv_before + stride   |\n-   |                               |     | if (iv_after <= upper_bound)     |\n+   |                               |     | if (iv_before < upper_bound)    |\n    |                               |      ---|--------------\\--------------\n    |                               |         |               \\ exit_e\n    |                               |         V                \\\n@@ -609,17 +609,17 @@ create_empty_if_region_on_edge (edge entry_edge, tree condition)\n    |                                \\ ___ /\n \n    Creates an empty loop as shown above, the IV_BEFORE is the SSA_NAME\n-   that is used before the increment of IV. IV_BEFORE should be used for \n+   that is used before the increment of IV. IV_BEFORE should be used for\n    adding code to the body that uses the IV.  OUTER is the outer loop in\n-   which the new loop should be inserted.  \n+   which the new loop should be inserted.\n \n    Both INITIAL_VALUE and UPPER_BOUND expressions are gimplified and\n    inserted on the loop entry edge.  This implies that this function\n    should be used only when the UPPER_BOUND expression is a loop\n    invariant.  */\n \n struct loop *\n-create_empty_loop_on_edge (edge entry_edge, \n+create_empty_loop_on_edge (edge entry_edge,\n \t\t\t   tree initial_value,\n \t\t\t   tree stride, tree upper_bound,\n \t\t\t   tree iv,\n@@ -637,7 +637,7 @@ create_empty_loop_on_edge (edge entry_edge,\n   tree exit_test;\n   edge exit_e;\n   int prob;\n-  \n+\n   gcc_assert (entry_edge && initial_value && stride && upper_bound && iv);\n \n   /* Create header, latch and wire up the loop.  */\n@@ -696,7 +696,7 @@ create_empty_loop_on_edge (edge entry_edge,\n \n   /* Insert loop exit condition.  */\n   cond_expr = gimple_build_cond\n-    (LE_EXPR, *iv_after, upper_bound, NULL_TREE, NULL_TREE);\n+    (LT_EXPR, *iv_before, upper_bound, NULL_TREE, NULL_TREE);\n \n   exit_test = gimple_cond_lhs (cond_expr);\n   exit_test = force_gimple_operand_gsi (&gsi, exit_test, true, NULL,"}]}