{"sha": "3a2317d15bafe848ca54456fdb158377bce235e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EyMzE3ZDE1YmFmZTg0OGNhNTQ0NTZmZGIxNTgzNzdiY2UyMzVlNA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-10-16T10:58:36Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-10-16T10:58:36Z"}, "message": "re PR target/53513 ([SH] Add support for fpchg insn and improve fenv support)\n\ngcc/\n\tPR target/53513\n\t* config/sh/sh-protos.h (emit_sf_insn, emit_df_insn, expand_sf_unop,\n\texpand_sf_binop, expand_df_unop, expand_df_binop): Remove.\n\n\t* config/sh/sh.c (sh_emit_set_t_insn): Adjust generated insn pattern\n\tto match fp insn patterns.\n\t(calc_live_regs): Add FPSCR_MODES_REG and FPSCR_STAT_REG to the ignore\n\tlist.\n\t(emit_sf_insn, emit_df_insn, expand_sf_unop, expand_sf_binop,\n\texpand_df_unop, expand_df_binop): Remove.\n\t(sh_conditional_register_usage): Mark FPSCR_MODES_REG and\n\tFPSCR_STAT_REG as not call clobbered.\n\t(sh_emit_mode_set): Emit fpscr store-modify-load sequence instead of\n\tinvoking fpscr_set_from_mem.\n\n\t* config/sh/sh.h (MAX_REGISTER_NAME_LENGTH): Increase to 6.\n\t(SH_REGISTER_NAMES_INITIALIZER): Add names for FPSCR_MODES_REG and\n\tFPSCR_STAT_REG.\n\t(REGISTER_NAMES): Adjust.\n\t(SPECIAL_REGISTER_P): Add FPSCR_MODES_REG and FPSCR_STAT_REG.\n\t(FIRST_PSEUDO_REGISTER): Increase to 156.\n\t(DWARF_FRAME_REGISTERS): Define as 153 to keep the original value.\n\t(FIXED_REGISTERS, CALL_USED_REGISTERS): Add FPSCR_MODES_REG and\n\tFPSCR_STAT_REG.\n\t(REG_CLASS_CONTENTS): Adjust ALL_REGS bit mask to include\n\tFPSCR_MODES_REG and FPSCR_STAT_REG.\n\t(REG_ALLOC_ORDER): Add FPSCR_MODES_REG and FPSCR_STAT_REG.\n\n\t* config/sh/sh.md (FPSCR_MODES_REG, FPSCR_STAT_REG, FPSCR_PR,\n\tFPSCR_SZ): Add new constants.\n\t(UNSPECV_FPSCR_MODES, UNSPECV_FPSCR_STAT): Add new unspecv constants.\n\n\t(movpsi): Use TARGET_FPU_ANY condition, invoke gen_fpu_switch.\n\t(fpu_switch): Add use and set of FPSCR_STAT_REG and FPSCR_MODES_REG.\n\tUse TARGET_FPU_ANY condition.\n\t(fpu_switch peephole2): Remove.\n\t(fpu_switch split): Use simple_mem_operand to capture the mem and\n\tadjust split implementation.\n\t(extend_psi_si, truncate_si_psi): New insns.\n\t(toggle_sz, toggle_pr): Use FPSCR_SZ, FPSCR_PR constants.  Add\n\tset of FPSCR_MODES_REG.\n\n\t(push_e, push_4, pop_e, pop_4, movdf_i4, reload_indf__frn, movsf_ie,\n\treload_insf__frn, force_mode_for_call, calli, calli_tbr_rel,\n\tcalli_pcrel, call_pcrel, call_compact, call_compact_rettramp,\n\tcall_valuei, call_valuei_tbr_rel, call_valuei_pcrel, call_value_pcrel,\n\tcall_value_compact, call_value_compact_rettramp, call,\n\tcall_pop_compact, call_pop_compact_rettramp, call_value, sibcalli,\n\tsibcalli_pcrel, sibcalli_thunk, sibcall_pcrel, sibcall_compact,\n\tsibcall, sibcall_valuei, sibcall_valuei_pcrel, sibcall_value_pcrel,\n\tsibcall_value_compact, sibcall_value, call_value_pop_compact,\n\tcall_value_pop_compact_rettramp, various unnamed splits):\n\tReplace use of FPSCR_REG with use of FPSCR_MODES_REG.  Adjust gen_*\n\tfunction uses.\n\n\t(floatsisf2_i4, *floatsisf2_ie): Merge into floatsisf2_i4.\n\t(fix_truncsfsi2_i4, *fixsfsi): Merge into fix_truncsfsi2_i4.\n\t(cmpgtsf_t, cmpgtsf_t_i4): Merge into cmpgtsf_t.\n\t(cmpeqsf_t, cmpeqsf_t_i4): Merge into cmpeqsf_t.\n\t(ieee_ccmpeqsf_t, *ieee_ccmpeqsf_t_4): Merge into ieee_ccmpeqsf_t.\n\n\t(udivsi3_i4, divsi3_i4, addsf3_i, subsf3_i, mulsf3_i, fmasf4_i,\n\t*fmasf4, divsf3_i, floatsisf2_i4, fix_truncsfsi2_i4, cmpgtsf_t,\n\tcmpeqsf_t, ieee_ccmpeqsf_t, sqrtsf2_i, rsqrtsf2, fsca, adddf3_i,\n\tsubdf3_i, muldf3_i, divdf3_i, floatsidf2_i, fix_truncdfsi2_i,\n\tcmpgtdf_t, cmpeqdf_t, *ieee_ccmpeqdf_t, sqrtdf2_i, extendsfdf2_i4,\n\ttruncdfsf2_i4): Replace use of FPSCR_REG with clobber of FPSCR_STAT_REG\n\tand use of FPSCR_MODES_REG.  Adjust gen_* function uses.\n\ngcc/testsuite/\n\tPR target/53513\n\t* gcc.target/sh/pr54680.c: Adjust matching of lds insn.\n\nFrom-SVN: r216307", "tree": {"sha": "47886009a32dadff2743ec6246286d283e52bb45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47886009a32dadff2743ec6246286d283e52bb45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a2317d15bafe848ca54456fdb158377bce235e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2317d15bafe848ca54456fdb158377bce235e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a2317d15bafe848ca54456fdb158377bce235e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2317d15bafe848ca54456fdb158377bce235e4/comments", "author": null, "committer": null, "parents": [{"sha": "c74459ea75f62cc61617913f741903aac50198eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c74459ea75f62cc61617913f741903aac50198eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c74459ea75f62cc61617913f741903aac50198eb"}], "stats": {"total": 715, "additions": 372, "deletions": 343}, "files": [{"sha": "7f79791f9ce6e1296d1fb1cd889d6141913fe7f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2317d15bafe848ca54456fdb158377bce235e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2317d15bafe848ca54456fdb158377bce235e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a2317d15bafe848ca54456fdb158377bce235e4", "patch": "@@ -1,3 +1,74 @@\n+2014-10-16  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/53513\n+\t* config/sh/sh-protos.h (emit_sf_insn, emit_df_insn, expand_sf_unop,\n+\texpand_sf_binop, expand_df_unop, expand_df_binop): Remove.\n+\n+\t* config/sh/sh.c (sh_emit_set_t_insn): Adjust generated insn pattern\n+\tto match fp insn patterns.\n+\t(calc_live_regs): Add FPSCR_MODES_REG and FPSCR_STAT_REG to the ignore\n+\tlist.\n+\t(emit_sf_insn, emit_df_insn, expand_sf_unop, expand_sf_binop,\n+\texpand_df_unop, expand_df_binop): Remove.\n+\t(sh_conditional_register_usage): Mark FPSCR_MODES_REG and\n+\tFPSCR_STAT_REG as not call clobbered.\n+\t(sh_emit_mode_set): Emit fpscr store-modify-load sequence instead of\n+\tinvoking fpscr_set_from_mem.\n+\n+\t* config/sh/sh.h (MAX_REGISTER_NAME_LENGTH): Increase to 6.\n+\t(SH_REGISTER_NAMES_INITIALIZER): Add names for FPSCR_MODES_REG and\n+\tFPSCR_STAT_REG.\n+\t(REGISTER_NAMES): Adjust.\n+\t(SPECIAL_REGISTER_P): Add FPSCR_MODES_REG and FPSCR_STAT_REG.\n+\t(FIRST_PSEUDO_REGISTER): Increase to 156.\n+\t(DWARF_FRAME_REGISTERS): Define as 153 to keep the original value.\n+\t(FIXED_REGISTERS, CALL_USED_REGISTERS): Add FPSCR_MODES_REG and\n+\tFPSCR_STAT_REG.\n+\t(REG_CLASS_CONTENTS): Adjust ALL_REGS bit mask to include\n+\tFPSCR_MODES_REG and FPSCR_STAT_REG.\n+\t(REG_ALLOC_ORDER): Add FPSCR_MODES_REG and FPSCR_STAT_REG.\n+\n+\t* config/sh/sh.md (FPSCR_MODES_REG, FPSCR_STAT_REG, FPSCR_PR,\n+\tFPSCR_SZ): Add new constants.\n+\t(UNSPECV_FPSCR_MODES, UNSPECV_FPSCR_STAT): Add new unspecv constants.\n+\n+\t(movpsi): Use TARGET_FPU_ANY condition, invoke gen_fpu_switch.\n+\t(fpu_switch): Add use and set of FPSCR_STAT_REG and FPSCR_MODES_REG.\n+\tUse TARGET_FPU_ANY condition.\n+\t(fpu_switch peephole2): Remove.\n+\t(fpu_switch split): Use simple_mem_operand to capture the mem and\n+\tadjust split implementation.\n+\t(extend_psi_si, truncate_si_psi): New insns.\n+\t(toggle_sz, toggle_pr): Use FPSCR_SZ, FPSCR_PR constants.  Add\n+\tset of FPSCR_MODES_REG.\n+\n+\t(push_e, push_4, pop_e, pop_4, movdf_i4, reload_indf__frn, movsf_ie,\n+\treload_insf__frn, force_mode_for_call, calli, calli_tbr_rel,\n+\tcalli_pcrel, call_pcrel, call_compact, call_compact_rettramp,\n+\tcall_valuei, call_valuei_tbr_rel, call_valuei_pcrel, call_value_pcrel,\n+\tcall_value_compact, call_value_compact_rettramp, call,\n+\tcall_pop_compact, call_pop_compact_rettramp, call_value, sibcalli,\n+\tsibcalli_pcrel, sibcalli_thunk, sibcall_pcrel, sibcall_compact,\n+\tsibcall, sibcall_valuei, sibcall_valuei_pcrel, sibcall_value_pcrel,\n+\tsibcall_value_compact, sibcall_value, call_value_pop_compact,\n+\tcall_value_pop_compact_rettramp, various unnamed splits):\n+\tReplace use of FPSCR_REG with use of FPSCR_MODES_REG.  Adjust gen_*\n+\tfunction uses.\n+\n+\t(floatsisf2_i4, *floatsisf2_ie): Merge into floatsisf2_i4.\n+\t(fix_truncsfsi2_i4, *fixsfsi): Merge into fix_truncsfsi2_i4.\n+\t(cmpgtsf_t, cmpgtsf_t_i4): Merge into cmpgtsf_t.\n+\t(cmpeqsf_t, cmpeqsf_t_i4): Merge into cmpeqsf_t.\n+\t(ieee_ccmpeqsf_t, *ieee_ccmpeqsf_t_4): Merge into ieee_ccmpeqsf_t.\n+\n+\t(udivsi3_i4, divsi3_i4, addsf3_i, subsf3_i, mulsf3_i, fmasf4_i,\n+\t*fmasf4, divsf3_i, floatsisf2_i4, fix_truncsfsi2_i4, cmpgtsf_t,\n+\tcmpeqsf_t, ieee_ccmpeqsf_t, sqrtsf2_i, rsqrtsf2, fsca, adddf3_i,\n+\tsubdf3_i, muldf3_i, divdf3_i, floatsidf2_i, fix_truncdfsi2_i,\n+\tcmpgtdf_t, cmpeqdf_t, *ieee_ccmpeqdf_t, sqrtdf2_i, extendsfdf2_i4,\n+\ttruncdfsf2_i4): Replace use of FPSCR_REG with clobber of FPSCR_STAT_REG\n+\tand use of FPSCR_MODES_REG.  Adjust gen_* function uses.\n+\n 2014-10-16  Martin Liska  <mliska@suse.cz>\n \t    Jan Hubicka  <hubicka@ucw.cz>\n "}, {"sha": "c12a8964d7e3e11569d2c1e00ab0a8f88940210e", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2317d15bafe848ca54456fdb158377bce235e4/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2317d15bafe848ca54456fdb158377bce235e4/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=3a2317d15bafe848ca54456fdb158377bce235e4", "patch": "@@ -112,8 +112,6 @@ extern bool sh_legitimate_index_p (enum machine_mode, rtx, bool, bool);\n extern bool sh_legitimize_reload_address (rtx *, enum machine_mode, int, int);\n extern rtx legitimize_pic_address (rtx, enum machine_mode, rtx);\n extern bool nonpic_symbol_mentioned_p (rtx);\n-extern void emit_sf_insn (rtx);\n-extern void emit_df_insn (rtx);\n extern void output_pic_addr_const (FILE *, rtx);\n extern bool expand_block_move (rtx *);\n extern void prepare_move_operands (rtx[], enum machine_mode mode);\n@@ -150,10 +148,6 @@ extern void final_prescan_insn (rtx_insn *, rtx *, int);\n extern enum tls_model tls_symbolic_operand (rtx, enum machine_mode);\n extern bool system_reg_operand (rtx, enum machine_mode);\n extern bool reg_unused_after (rtx, rtx_insn *);\n-extern void expand_sf_unop (rtx (*)(rtx, rtx, rtx), rtx *);\n-extern void expand_sf_binop (rtx (*)(rtx, rtx, rtx, rtx), rtx *);\n-extern void expand_df_unop (rtx (*)(rtx, rtx, rtx), rtx *);\n-extern void expand_df_binop (rtx (*)(rtx, rtx, rtx, rtx), rtx *);\n extern int sh_insn_length_adjustment (rtx_insn *);\n extern bool sh_can_redirect_branch (rtx_insn *, rtx_insn *);\n extern void sh_expand_unop_v2sf (enum rtx_code, rtx, rtx);"}, {"sha": "065ac265fee3be8f50d6bbdfa2cd01663b58c0de", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 43, "deletions": 49, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2317d15bafe848ca54456fdb158377bce235e4/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2317d15bafe848ca54456fdb158377bce235e4/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=3a2317d15bafe848ca54456fdb158377bce235e4", "patch": "@@ -2281,20 +2281,20 @@ sh_eval_treg_value (rtx op)\n   return t ^ (cmpval == cmpop);\n }\n \n-/* Emit INSN, possibly in a PARALLEL with an USE of fpscr for SH4.  */\n-\n+/* Emit INSN, possibly in a PARALLEL with an USE/CLOBBER of FPSCR bits in case\n+   of floating-point comparisons.  */\n static void\n sh_emit_set_t_insn (rtx insn, enum machine_mode mode)\n {\n-  if ((TARGET_SH4 || TARGET_SH2A) && GET_MODE_CLASS (mode) == MODE_FLOAT)\n+  if (TARGET_FPU_ANY && GET_MODE_CLASS (mode) == MODE_FLOAT\n+      && GET_CODE (insn) != PARALLEL)\n     {\n       insn = gen_rtx_PARALLEL (VOIDmode,\n-\t\t       gen_rtvec (2, insn,\n-\t\t\t          gen_rtx_USE (VOIDmode, get_fpscr_rtx ())));\n-      (mode == SFmode ? emit_sf_insn : emit_df_insn) (insn);\n+\t  gen_rtvec (3, insn,\n+\t      gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (SImode, FPSCR_STAT_REG)),\n+\t      gen_rtx_USE (VOIDmode, gen_rtx_REG (SImode, FPSCR_MODES_REG))));\n     }\n-  else\n-    emit_insn (insn);\n+  emit_insn (insn);\n }\n \n /* Prepare the operands for an scc instruction; make sure that the\n@@ -7250,6 +7250,7 @@ calc_live_regs (HARD_REG_SET *live_regs_mask)\n \t     && reg != STACK_POINTER_REGNUM && reg != ARG_POINTER_REGNUM\n \t     && reg != RETURN_ADDRESS_POINTER_REGNUM\n \t     && reg != T_REG && reg != GBR_REG\n+\t     && reg != FPSCR_MODES_REG && reg != FPSCR_STAT_REG\n \t     /* Push fpscr only on targets which have FPU */\n \t     && (reg != FPSCR_REG || TARGET_FPU_ANY))\n \t  : (/* Only push those regs which are used and need to be saved.  */\n@@ -10070,44 +10071,6 @@ emit_fpu_switch (rtx scratch, int index)\n   dst = get_fpscr_rtx ();\n   emit_move_insn (dst, src);\n }\n-\n-void\n-emit_sf_insn (rtx pat)\n-{\n-  emit_insn (pat);\n-}\n-\n-void\n-emit_df_insn (rtx pat)\n-{\n-  emit_insn (pat);\n-}\n-\n-void\n-expand_sf_unop (rtx (*fun) (rtx, rtx, rtx), rtx *operands)\n-{\n-  emit_sf_insn ((*fun) (operands[0], operands[1], get_fpscr_rtx ()));\n-}\n-\n-void\n-expand_sf_binop (rtx (*fun) (rtx, rtx, rtx, rtx), rtx *operands)\n-{\n-  emit_sf_insn ((*fun) (operands[0], operands[1], operands[2],\n-\t\t\t get_fpscr_rtx ()));\n-}\n-\n-void\n-expand_df_unop (rtx (*fun) (rtx, rtx, rtx), rtx *operands)\n-{\n-  emit_df_insn ((*fun) (operands[0], operands[1], get_fpscr_rtx ()));\n-}\n-\n-void\n-expand_df_binop (rtx (*fun) (rtx, rtx, rtx, rtx), rtx *operands)\n-{\n-  emit_df_insn ((*fun) (operands[0], operands[1], operands[2],\n-\t\t\tget_fpscr_rtx ()));\n-}\n \f\n static rtx get_free_reg (HARD_REG_SET);\n \n@@ -13308,6 +13271,9 @@ sh_conditional_register_usage (void)\n     for (regno = FIRST_GENERAL_REG; regno <= LAST_GENERAL_REG; regno++)\n       if (! fixed_regs[regno] && call_really_used_regs[regno])\n \tSET_HARD_REG_BIT (reg_class_contents[SIBCALL_REGS], regno);\n+\n+  call_really_used_regs[FPSCR_MODES_REG] = 0;\n+  call_really_used_regs[FPSCR_STAT_REG] = 0;\n }\n \n /* Implement TARGET_LEGITIMATE_CONSTANT_P\n@@ -13659,7 +13625,7 @@ sh_try_omit_signzero_extend (rtx extended_op, rtx insn)\n \n static void\n sh_emit_mode_set (int entity ATTRIBUTE_UNUSED, int mode,\n-\t\t  int prev_mode, HARD_REG_SET regs_live)\n+\t\t  int prev_mode, HARD_REG_SET regs_live ATTRIBUTE_UNUSED)\n {\n   if ((TARGET_SH4A_FP || TARGET_SH4_300)\n       && prev_mode != FP_MODE_NONE && prev_mode != mode)\n@@ -13668,8 +13634,36 @@ sh_emit_mode_set (int entity ATTRIBUTE_UNUSED, int mode,\n       if (TARGET_FMOVD)\n \temit_insn (gen_toggle_sz ());\n     }\n-  else\n-    fpscr_set_from_mem (mode, regs_live);\n+  else if (mode != FP_MODE_NONE)\n+    {\n+      rtx tmp0 = gen_reg_rtx (PSImode);\n+      rtx tmp1 = gen_reg_rtx (SImode);\n+\n+      emit_move_insn (tmp0, get_fpscr_rtx ());\n+      emit_insn (gen_extend_psi_si (tmp1, tmp0));\n+\n+      rtx i = NULL;\n+\n+      const unsigned HOST_WIDE_INT fpbits =\n+\t  TARGET_FMOVD ? (FPSCR_PR | FPSCR_SZ) : FPSCR_PR;\n+\n+      if (prev_mode != FP_MODE_NONE && prev_mode != mode)\n+\ti = gen_xorsi3 (tmp1, tmp1,\n+\t\t\tforce_reg (SImode, GEN_INT (fpbits)));\n+      else if (mode == FP_MODE_SINGLE)\n+\ti = gen_andsi3 (tmp1, tmp1,\n+\t\t\tforce_reg (SImode, GEN_INT (~fpbits)));\n+      else if (mode == FP_MODE_DOUBLE)\n+\ti = gen_iorsi3 (tmp1, tmp1,\n+\t\t\tforce_reg (SImode, GEN_INT (fpbits)));\n+      else\n+\tgcc_unreachable ();\n+\n+      emit_insn (i);\n+\n+      emit_insn (gen_truncate_si_psi (tmp0, tmp1));\n+      emit_move_insn (get_fpscr_rtx (), tmp0);\n+    }\n }\n \n static int"}, {"sha": "c6e16bd15e9cd5aa06804b055282299a6cb5076b", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2317d15bafe848ca54456fdb158377bce235e4/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2317d15bafe848ca54456fdb158377bce235e4/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=3a2317d15bafe848ca54456fdb158377bce235e4", "patch": "@@ -574,7 +574,7 @@ extern enum sh_divide_strategy_e sh_div_strategy;\n \tfr4..fr11\tfp args in\n \tfr12..fr15\tcall saved floating point registers  */\n \n-#define MAX_REGISTER_NAME_LENGTH 5\n+#define MAX_REGISTER_NAME_LENGTH 6\n extern char sh_register_names[][MAX_REGISTER_NAME_LENGTH + 1];\n \n #define SH_REGISTER_NAMES_INITIALIZER\t\t\t\t\t\\\n@@ -598,7 +598,7 @@ extern char sh_register_names[][MAX_REGISTER_NAME_LENGTH + 1];\n   \"tr0\",  \"tr1\",  \"tr2\",  \"tr3\",  \"tr4\",  \"tr5\",  \"tr6\",  \"tr7\", \t\\\n   \"xd0\",  \"xd2\",  \"xd4\",  \"xd6\",  \"xd8\",  \"xd10\", \"xd12\", \"xd14\",\t\\\n   \"gbr\",  \"ap\",\t  \"pr\",   \"t\",    \"mach\", \"macl\", \"fpul\", \"fpscr\",\t\\\n-  \"rap\",  \"sfp\"\t\t\t\t\t\t\t\t\\\n+  \"rap\",  \"sfp\", \"fpscr0\", \"fpscr1\"\t\t\t\t\t\\\n }\n \n #define REGNAMES_ARR_INDEX_1(index) \\\n@@ -623,7 +623,7 @@ extern char sh_register_names[][MAX_REGISTER_NAME_LENGTH + 1];\n   REGNAMES_ARR_INDEX_8 (128), \\\n   REGNAMES_ARR_INDEX_8 (136), \\\n   REGNAMES_ARR_INDEX_8 (144), \\\n-  REGNAMES_ARR_INDEX_2 (152) \\\n+  REGNAMES_ARR_INDEX_4 (152) \\\n }\n \n #define ADDREGNAMES_SIZE 32\n@@ -711,7 +711,8 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n \n #define SPECIAL_REGISTER_P(REGNO) \\\n   ((REGNO) == GBR_REG || (REGNO) == T_REG \\\n-   || (REGNO) == MACH_REG || (REGNO) == MACL_REG)\n+   || (REGNO) == MACH_REG || (REGNO) == MACL_REG \\\n+   || (REGNO) == FPSCR_MODES_REG || (REGNO) == FPSCR_STAT_REG)\n \n #define TARGET_REGISTER_P(REGNO) \\\n   ((int) (REGNO) >= FIRST_TARGET_REG && (int) (REGNO) <= LAST_TARGET_REG)\n@@ -738,10 +739,10 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n    ? DImode \\\n    : SImode)\n \n-#define FIRST_PSEUDO_REGISTER 154\n+#define FIRST_PSEUDO_REGISTER 156\n \n /* Don't count soft frame pointer.  */\n-#define DWARF_FRAME_REGISTERS (FIRST_PSEUDO_REGISTER - 1)\n+#define DWARF_FRAME_REGISTERS (153)\n \n /* 1 for registers that have pervasive standard uses\n    and are not available for the register allocator.\n@@ -777,8 +778,8 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n   0,      0,      0,      0,      0,      0,      0,      0,\t\t\\\n /*\"gbr\",  \"ap\",\t  \"pr\",   \"t\",    \"mach\", \"macl\", \"fpul\", \"fpscr\", */\t\\\n   1,      1,      1,      1,      1,      1,      0,      1,\t\t\\\n-/*\"rap\",  \"sfp\" */\t\t\t\t\t\t\t\\\n-  1,\t  1,\t\t\t\t\t\t\t\t\\\n+/*\"rap\",  \"sfp\",\"fpscr0\",\"fpscr1\"  */\t\t\t\t\t\\\n+  1,      1,      1,      1,\t\t\t\t\t\t\\\n }\n \n /* 1 for registers not available across function calls.\n@@ -816,8 +817,8 @@ extern char sh_additional_register_names[ADDREGNAMES_SIZE] \\\n   1,      1,      1,      1,      1,      1,      0,      0,\t\t\\\n /*\"gbr\",  \"ap\",\t  \"pr\",   \"t\",    \"mach\", \"macl\", \"fpul\", \"fpscr\", */\t\\\n   1,      1,      1,      1,      1,      1,      1,      1,\t\t\\\n-/*\"rap\",  \"sfp\" */\t\t\t\t\t\t\t\\\n-  1,\t  1,\t\t\t\t\t\t\t\t\\\n+/*\"rap\",  \"sfp\",\"fpscr0\",\"fpscr1\"  */\t\t\t\t\t\\\n+  1,      1,      1,      1,\t\t\t\t\t\t\\\n }\n \n /* TARGET_CONDITIONAL_REGISTER_USAGE might want to make a register\n@@ -1072,7 +1073,7 @@ enum reg_class\n /* TARGET_REGS:  */\t\t\t\t\t\t\t\\\n   { 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x000000ff },\t\\\n /* ALL_REGS:  */\t\t\t\t\t\t\t\\\n-  { 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x03ffffff },\t\\\n+  { 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0x0fffffff },\t\\\n }\n \n /* The same information, inverted:\n@@ -1122,7 +1123,7 @@ extern enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n    128,129,130,131,132,133,134,135, \\\n    /* Fixed registers */ \\\n     15, 16, 24, 25, 26, 27, 63,144, \\\n-   145,146,147,148,149,152,153 }\n+   145,146,147,148,149,152,153,154,155  }\n \n /* The class value for index registers, and the one for base regs.  */\n #define INDEX_REG_CLASS \\"}, {"sha": "e77e3aeeb791054c202ef9c0022f8c6884902de9", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 238, "deletions": 274, "changes": 512, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2317d15bafe848ca54456fdb158377bce235e4/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2317d15bafe848ca54456fdb158377bce235e4/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=3a2317d15bafe848ca54456fdb158377bce235e4", "patch": "@@ -76,6 +76,12 @@\n \n   (FPSCR_REG\t151)\n \n+  ;; Virtual FPSCR - bits that are used by FP ops.\n+  (FPSCR_MODES_REG 154)\n+\n+  ;; Virtual FPSCR - bits that are updated by FP ops.\n+  (FPSCR_STAT_REG 155)\n+\n   (PIC_REG\t12)\n   (FP_REG\t14)\n   (SP_REG\t15)\n@@ -109,6 +115,9 @@\n   (TR2_REG\t130)\n \n   (XD0_REG\t136)\n+\n+  (FPSCR_PR\t524288)\n+  (FPSCR_SZ\t1048576)\n ])\n \n (define_c_enum \"unspec\" [\n@@ -176,6 +185,9 @@\n   UNSPECV_GBR\n   UNSPECV_SP_SWITCH_B\n   UNSPECV_SP_SWITCH_E\n+\n+  UNSPECV_FPSCR_MODES\n+  UNSPECV_FPSCR_STAT\n ])\n \n ;; -------------------------------------------------------------------------\n@@ -2395,7 +2407,8 @@\n    (clobber (reg:SI R1_REG))\n    (clobber (reg:SI R4_REG))\n    (clobber (reg:SI R5_REG))\n-   (use (reg:PSI FPSCR_REG))\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (use (match_operand:SI 1 \"arith_reg_operand\" \"r\"))]\n   \"TARGET_FPU_DOUBLE && ! TARGET_FPU_SINGLE\"\n   \"jsr\t@%1%#\"\n@@ -2666,7 +2679,8 @@\n    (clobber (reg:SI PR_REG))\n    (clobber (reg:DF DR0_REG))\n    (clobber (reg:DF DR2_REG))\n-   (use (reg:PSI FPSCR_REG))\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (use (match_operand:SI 1 \"arith_reg_operand\" \"r\"))]\n   \"TARGET_FPU_DOUBLE && ! TARGET_FPU_SINGLE\"\n   \"jsr\t@%1%#\"\n@@ -6444,7 +6458,7 @@ label:\n (define_expand \"push_e\"\n   [(parallel [(set (mem:SF (pre_dec:SI (reg:SI SP_REG)))\n \t\t   (match_operand:SF 0 \"\" \"\"))\n-\t      (use (reg:PSI FPSCR_REG))\n+\t      (use (reg:SI FPSCR_MODES_REG))\n \t      (clobber (scratch:SI))])]\n   \"TARGET_SH1 && ! TARGET_SH5\"\n   \"\")\n@@ -6462,15 +6476,15 @@ label:\n (define_expand \"push_4\"\n   [(parallel [(set (mem:DF (pre_dec:SI (reg:SI SP_REG)))\n \t\t   (match_operand:DF 0 \"\" \"\"))\n-\t      (use (reg:PSI FPSCR_REG))\n+\t      (use (reg:SI FPSCR_MODES_REG))\n \t      (clobber (scratch:SI))])]\n   \"TARGET_SH1 && ! TARGET_SH5\"\n   \"\")\n \n (define_expand \"pop_e\"\n   [(parallel [(set (match_operand:SF 0 \"\" \"\")\n \t      (mem:SF (post_inc:SI (reg:SI SP_REG))))\n-\t      (use (reg:PSI FPSCR_REG))\n+\t      (use (reg:SI FPSCR_MODES_REG))\n \t      (clobber (scratch:SI))])]\n   \"TARGET_SH1 && ! TARGET_SH5\"\n   \"\")\n@@ -6485,7 +6499,7 @@ label:\n (define_expand \"pop_4\"\n   [(parallel [(set (match_operand:DF 0 \"\" \"\")\n \t\t   (mem:DF (post_inc:SI (reg:SI SP_REG))))\n-\t      (use (reg:PSI FPSCR_REG))\n+\t      (use (reg:SI FPSCR_MODES_REG))\n \t      (clobber (scratch:SI))])]\n   \"TARGET_SH1 && ! TARGET_SH5\"\n   \"\")\n@@ -7655,8 +7669,8 @@ label:\n (define_insn \"movdf_i4\"\n   [(set (match_operand:DF 0 \"general_movdst_operand\" \"=d,r,d,d,m,r,r,m,!??r,!???d\")\n \t(match_operand:DF 1 \"general_movsrc_operand\"  \"d,r,F,m,d,FQ,m,r,d,r\"))\n-   (use (match_operand:PSI 2 \"fpscr_operand\"          \"c,c,c,c,c,c,c,c,c,c\"))\n-   (clobber (match_scratch:SI 3                      \"=X,X,&z,X,X,X,X,X,X,X\"))]\n+   (use (reg:SI FPSCR_MODES_REG))\n+   (clobber (match_scratch:SI 2                      \"=X,X,&z,X,X,X,X,X,X,X\"))]\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\n    && (arith_reg_operand (operands[0], DFmode)\n        || arith_reg_operand (operands[1], DFmode))\"\n@@ -7711,8 +7725,8 @@ label:\n (define_split\n   [(set (match_operand:DF 0 \"register_operand\")\n \t(match_operand:DF 1 \"register_operand\"))\n-   (use (match_operand:PSI 2 \"fpscr_operand\"))\n-   (clobber (match_scratch:SI 3))]\n+   (use (reg:SI FPSCR_MODES_REG))\n+   (clobber (match_scratch:SI 2))]\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) && reload_completed\n    && (true_regnum (operands[0]) < 16) != (true_regnum (operands[1]) < 16)\"\n   [(const_int 0)]\n@@ -7728,15 +7742,15 @@ label:\n   else\n     tos = gen_tmp_stack_mem (DFmode,\n \t\t\t     gen_rtx_PRE_DEC (Pmode, stack_pointer_rtx));\n-  insn = emit_insn (gen_movdf_i4 (tos, operands[1], operands[2]));\n+  insn = emit_insn (gen_movdf_i4 (tos, operands[1]));\n   if (! (TARGET_SH5 && true_regnum (operands[1]) < 16))\n     add_reg_note (insn, REG_INC, stack_pointer_rtx);\n   if (TARGET_SH5 && true_regnum (operands[0]) < 16)\n     tos = gen_tmp_stack_mem (DFmode, stack_pointer_rtx);\n   else\n     tos = gen_tmp_stack_mem (DFmode,\n \t\t\t     gen_rtx_POST_INC (Pmode, stack_pointer_rtx));\n-  insn = emit_insn (gen_movdf_i4 (operands[0], tos, operands[2]));\n+  insn = emit_insn (gen_movdf_i4 (operands[0], tos));\n   if (TARGET_SH5 && true_regnum (operands[0]) < 16)\n     emit_move_insn (stack_pointer_rtx,\n \t\t    plus_constant (Pmode, stack_pointer_rtx, 8));\n@@ -7752,8 +7766,8 @@ label:\n (define_split\n   [(set (match_operand:DF 0 \"general_movdst_operand\" \"\")\n \t(match_operand:DF 1 \"general_movsrc_operand\"  \"\"))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n-   (clobber (match_scratch:SI 3 \"\"))]\n+   (use (reg:SI FPSCR_MODES_REG))\n+   (clobber (match_scratch:SI 2))]\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\n    && reload_completed\n    && true_regnum (operands[0]) < 16\n@@ -7824,18 +7838,18 @@ label:\n (define_split\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(match_operand:DF 1 \"memory_operand\"  \"\"))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (clobber (reg:SI R0_REG))]\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) && reload_completed\"\n   [(parallel [(set (match_dup 0) (match_dup 1))\n-\t      (use (match_dup 2))\n+\t      (use (reg:SI FPSCR_MODES_REG))\n \t      (clobber (scratch:SI))])]\n   \"\")\n \n (define_expand \"reload_indf__frn\"\n   [(parallel [(set (match_operand:DF 0 \"register_operand\" \"=a\")\n \t\t   (match_operand:DF 1 \"immediate_operand\" \"FQ\"))\n-\t      (use (reg:PSI FPSCR_REG))\n+\t      (use (reg:SI FPSCR_MODES_REG))\n \t      (clobber (match_operand:SI 2 \"register_operand\" \"=&z\"))])]\n   \"TARGET_SH1\"\n   \"\")\n@@ -7851,8 +7865,8 @@ label:\n (define_split\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t(match_operand:SF 1 \"register_operand\" \"\"))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n-   (clobber (match_scratch:SI 3 \"\"))]\n+   (use (reg:SI FPSCR_MODES_REG))\n+   (clobber (match_scratch:SI 2))]\n   \"TARGET_SH2E && reload_completed\n    && true_regnum (operands[0]) == true_regnum (operands[1])\"\n   [(set (match_dup 0) (match_dup 0))]\n@@ -7862,26 +7876,26 @@ label:\n (define_split\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(match_operand:DF 1 \"register_operand\" \"\"))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n-   (clobber (match_scratch:SI 3 \"\"))]\n+   (use (reg:SI FPSCR_MODES_REG))\n+   (clobber (match_scratch:SI 2))]\n   \"TARGET_SH4 && ! TARGET_FMOVD && reload_completed\n    && FP_OR_XD_REGISTER_P (true_regnum (operands[0]))\n    && FP_OR_XD_REGISTER_P (true_regnum (operands[1]))\"\n   [(const_int 0)]\n {\n   int dst = true_regnum (operands[0]), src = true_regnum (operands[1]);\n   emit_insn (gen_movsf_ie (gen_rtx_REG (SFmode, dst),\n-\t\t\t   gen_rtx_REG (SFmode, src), operands[2]));\n+\t\t\t   gen_rtx_REG (SFmode, src)));\n   emit_insn (gen_movsf_ie (gen_rtx_REG (SFmode, dst + 1),\n-\t\t\t   gen_rtx_REG (SFmode, src + 1), operands[2]));\n+\t\t\t   gen_rtx_REG (SFmode, src + 1)));\n   DONE;\n })\n \n (define_split\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(mem:DF (match_operand:SI 1 \"register_operand\" \"\")))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n-   (clobber (match_scratch:SI 3 \"\"))]\n+   (use (reg:SI FPSCR_MODES_REG))\n+   (clobber (match_scratch:SI 2))]\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) && ! TARGET_FMOVD && reload_completed\n    && FP_OR_XD_REGISTER_P (true_regnum (operands[0]))\n    && find_regno_note (insn, REG_DEAD, true_regnum (operands[1]))\"\n@@ -7894,20 +7908,19 @@ label:\n     = change_address (mem, SFmode, gen_rtx_POST_INC (Pmode, operands[1]));\n   insn = emit_insn (gen_movsf_ie (gen_rtx_REG (SFmode,\n \t\t\t\t\t       regno + SH_REG_MSW_OFFSET),\n-\t\t\t\t  mem2, operands[2]));\n+\t\t\t\t  mem2));\n   add_reg_note (insn, REG_INC, operands[1]);\n   insn = emit_insn (gen_movsf_ie (gen_rtx_REG (SFmode,\n \t\t\t\t\t       regno + SH_REG_LSW_OFFSET),\n-\t\t\t\t  change_address (mem, SFmode, NULL_RTX),\n-\t\t\t\t  operands[2]));\n+\t\t\t\t  change_address (mem, SFmode, NULL_RTX)));\n   DONE;\n })\n \n (define_split\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n \t(match_operand:DF 1 \"memory_operand\" \"\"))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n-   (clobber (match_scratch:SI 3 \"\"))]\n+   (use (reg:SI FPSCR_MODES_REG))\n+   (clobber (match_scratch:SI 2))]\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) && ! TARGET_FMOVD && reload_completed\n    && FP_OR_XD_REGISTER_P (true_regnum (operands[0]))\"\n   [(const_int 0)]\n@@ -7930,10 +7943,10 @@ label:\n       if (! arith_reg_operand (operands[1], SFmode))\n \t{\n \t  XEXP (mem2, 0) = addr = gen_rtx_POST_INC (SImode, addr);\n-\t  insn = emit_insn (gen_movsf_ie (reg0, mem2, operands[2]));\n+\t  insn = emit_insn (gen_movsf_ie (reg0, mem2));\n \t  add_reg_note (insn, REG_INC, XEXP (addr, 0));\n \t  \n-\t  emit_insn (gen_movsf_ie (reg1, operands[1], operands[2]));\n+\t  emit_insn (gen_movsf_ie (reg1, operands[1]));\n \n \t  /* If we have modified the stack pointer, the value that we have\n \t     read with post-increment might be modified by an interrupt,\n@@ -7948,17 +7961,17 @@ label:\n       /* Fall through.  */\n \n     case PLUS:\n-      emit_insn (gen_movsf_ie (reg0, operands[1], operands[2]));\n+      emit_insn (gen_movsf_ie (reg0, operands[1]));\n       operands[1] = copy_rtx (operands[1]);\n       XEXP (operands[1], 0) = plus_constant (Pmode, addr, 4);\n-      emit_insn (gen_movsf_ie (reg1, operands[1], operands[2]));\n+      emit_insn (gen_movsf_ie (reg1, operands[1]));\n       break;\n \n     case POST_INC:\n-      insn = emit_insn (gen_movsf_ie (reg0, operands[1], operands[2]));\n+      insn = emit_insn (gen_movsf_ie (reg0, operands[1]));\n       add_reg_note (insn, REG_INC, XEXP (addr, 0));\n \n-      insn = emit_insn (gen_movsf_ie (reg1, operands[1], operands[2]));\n+      insn = emit_insn (gen_movsf_ie (reg1, operands[1]));\n       add_reg_note (insn, REG_INC, XEXP (addr, 0));\n       break;\n \n@@ -7973,8 +7986,8 @@ label:\n (define_split\n   [(set (match_operand:DF 0 \"memory_operand\" \"\")\n \t(match_operand:DF 1 \"register_operand\" \"\"))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n-   (clobber (match_scratch:SI 3 \"\"))]\n+   (use (reg:SI FPSCR_MODES_REG))\n+   (clobber (match_scratch:SI 2))]\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) && ! TARGET_FMOVD && reload_completed\n    && FP_OR_XD_REGISTER_P (true_regnum (operands[1]))\"\n   [(const_int 0)]\n@@ -7997,12 +8010,12 @@ label:\n       if (! arith_reg_operand (operands[0], SFmode))\n \t{\n \t  emit_insn (gen_addsi3 (addr, addr, GEN_INT (4)));\n-\t  emit_insn (gen_movsf_ie (operands[0], reg1, operands[2]));\n+\t  emit_insn (gen_movsf_ie (operands[0], reg1));\n \n \t  operands[0] = copy_rtx (operands[0]);\n \t  XEXP (operands[0], 0) = addr = gen_rtx_PRE_DEC (SImode, addr);\n \t  \n-\t  insn = emit_insn (gen_movsf_ie (operands[0], reg0, operands[2]));\n+\t  insn = emit_insn (gen_movsf_ie (operands[0], reg0));\n \t  add_reg_note (insn, REG_INC, XEXP (addr, 0));\n \t  break;\n \t}\n@@ -8014,23 +8027,23 @@ label:\n \t register component of the address.  Just emit the lower numbered\n \t register first, to the lower address, then the higher numbered\n \t register to the higher address.  */\n-      emit_insn (gen_movsf_ie (operands[0], reg0, operands[2]));\n+      emit_insn (gen_movsf_ie (operands[0], reg0));\n \n       operands[0] = copy_rtx (operands[0]);\n       XEXP (operands[0], 0) = plus_constant (Pmode, addr, 4);\n \n-      emit_insn (gen_movsf_ie (operands[0], reg1, operands[2]));\n+      emit_insn (gen_movsf_ie (operands[0], reg1));\n       break;\n \n     case PRE_DEC:\n       /* This is easy.  Output the word to go to the higher address\n          first (ie the word in the higher numbered register) then the\n \t word to go to the lower address.  */\n \n-      insn = emit_insn (gen_movsf_ie (operands[0], reg1, operands[2]));\n+      insn = emit_insn (gen_movsf_ie (operands[0], reg1));\n       add_reg_note (insn, REG_INC, XEXP (addr, 0));\n \n-      insn = emit_insn (gen_movsf_ie (operands[0], reg0, operands[2]));\n+      insn = emit_insn (gen_movsf_ie (operands[0], reg0));\n       add_reg_note (insn, REG_INC, XEXP (addr, 0));\n       break;\n \n@@ -8112,7 +8125,7 @@ label:\n     }\n   if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n-      emit_df_insn (gen_movdf_i4 (operands[0], operands[1], get_fpscr_rtx ()));\n+      emit_insn (gen_movdf_i4 (operands[0], operands[1]));\n       DONE;\n     }\n })\n@@ -8357,12 +8370,12 @@ label:\n \t \"=f,r,f,f,fy,f,m,r,r,m,f,y,y,rf,r,y,<,y,y\")\n \t(match_operand:SF 1 \"general_movsrc_operand\"\n \t  \"f,r,G,H,FQ,mf,f,FQ,mr,r,y,f,>,fr,y,r,y,>,y\"))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c\"))\n-   (clobber (match_scratch:SI 3 \"=X,X,Bsc,Bsc,&z,X,X,X,X,X,X,X,X,y,X,X,X,X,X\"))]\n+   (use (reg:SI FPSCR_MODES_REG))\n+   (clobber (match_scratch:SI 2 \"=X,X,Bsc,Bsc,&z,X,X,X,X,X,X,X,X,y,X,X,X,X,X\"))]\n   \"TARGET_SH2E\n    && (arith_reg_operand (operands[0], SFmode) || fpul_operand (operands[0], SFmode)\n        || arith_reg_operand (operands[1], SFmode) || fpul_operand (operands[1], SFmode)\n-       || arith_reg_operand (operands[3], SImode))\"\n+       || arith_reg_operand (operands[2], SImode))\"\n   \"@\n \tfmov\t%1,%0\n \tmov\t%1,%0\n@@ -8441,14 +8454,14 @@ label:\n (define_split\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n \t(match_operand:SF 1 \"register_operand\" \"\"))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"\"))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (clobber (reg:SI FPUL_REG))]\n   \"TARGET_SH1\"\n   [(parallel [(set (reg:SF FPUL_REG) (match_dup 1))\n-\t      (use (match_dup 2))\n+\t      (use (reg:SI FPSCR_MODES_REG))\n \t      (clobber (scratch:SI))])\n    (parallel [(set (match_dup 0) (reg:SF FPUL_REG))\n-\t      (use (match_dup 2))\n+\t      (use (reg:SI FPSCR_MODES_REG))\n \t      (clobber (scratch:SI))])]\n   \"\")\n \n@@ -8468,7 +8481,7 @@ label:\n     }\n   if (TARGET_SH2E)\n     {\n-      emit_sf_insn (gen_movsf_ie (operands[0], operands[1], get_fpscr_rtx ()));\n+      emit_insn (gen_movsf_ie (operands[0], operands[1]));\n       DONE;\n     }\n })\n@@ -8483,7 +8496,7 @@ label:\n (define_expand \"reload_insf__frn\"\n   [(parallel [(set (match_operand:SF 0 \"register_operand\" \"=a\")\n \t\t   (match_operand:SF 1 \"immediate_operand\" \"FQ\"))\n-\t      (use (reg:PSI FPSCR_REG))\n+\t      (use (reg:SI FPSCR_MODES_REG))\n \t      (clobber (match_operand:SI 2 \"register_operand\" \"=&z\"))])]\n   \"TARGET_SH1\"\n   \"\")\n@@ -8929,7 +8942,7 @@ label:\n })\n \n (define_insn \"force_mode_for_call\"\n-  [(use (reg:PSI FPSCR_REG))]\n+  [(use (reg:SI FPSCR_MODES_REG))]\n   \"TARGET_SHCOMPACT\"\n   \"\"\n   [(set_attr \"length\" \"0\")\n@@ -8940,7 +8953,7 @@ label:\n (define_insn \"calli\"\n   [(call (mem:SI (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n \t (match_operand 1 \"\" \"\"))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (clobber (reg:SI PR_REG))]\n   \"TARGET_SH1\"\n {\n@@ -8962,7 +8975,7 @@ label:\n (define_insn \"calli_tbr_rel\"\n   [(call (mem (match_operand:SI 0 \"symbol_ref_operand\" \"\"))\n \t (match_operand 1 \"\" \"\"))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (clobber (reg:SI PR_REG))]\n   \"TARGET_SH2A && sh2a_is_function_vector_call (operands[0])\"\n {\n@@ -8983,7 +8996,7 @@ label:\n (define_insn \"calli_pcrel\"\n   [(call (mem:SI (match_operand:SI 0 \"arith_reg_operand\" \"r\"))\n \t (match_operand 1 \"\" \"\"))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (use (reg:SI PIC_REG))\n    (use (match_operand 2 \"\" \"\"))\n    (clobber (reg:SI PR_REG))]\n@@ -9002,7 +9015,7 @@ label:\n (define_insn_and_split \"call_pcrel\"\n   [(call (mem:SI (match_operand:SI 0 \"symbol_ref_operand\" \"\"))\n \t (match_operand 1 \"\" \"\"))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (use (reg:SI PIC_REG))\n    (clobber (reg:SI PR_REG))\n    (clobber (match_scratch:SI 2 \"=r\"))]\n@@ -9033,7 +9046,7 @@ label:\n    (match_operand 2 \"immediate_operand\" \"n\")\n    (use (reg:SI R0_REG))\n    (use (reg:SI R1_REG))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (clobber (reg:SI PR_REG))]\n   \"TARGET_SHCOMPACT && ! (INTVAL (operands[2]) & CALL_COOKIE_RET_TRAMP (1))\"\n   \"jsr\t@%0%#\"\n@@ -9049,7 +9062,7 @@ label:\n    (match_operand 2 \"immediate_operand\" \"n\")\n    (use (reg:SI R0_REG))\n    (use (reg:SI R1_REG))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (clobber (reg:SI R10_REG))\n    (clobber (reg:SI PR_REG))]\n   \"TARGET_SHCOMPACT && (INTVAL (operands[2]) & CALL_COOKIE_RET_TRAMP (1))\"\n@@ -9072,7 +9085,7 @@ label:\n   [(set (match_operand 0 \"\" \"=rf\")\n \t(call (mem:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\"))\n \t      (match_operand 2 \"\" \"\")))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (clobber (reg:SI PR_REG))]\n   \"TARGET_SH1\"\n {\n@@ -9095,7 +9108,7 @@ label:\n   [(set (match_operand 0 \"\" \"=rf\")\n \t(call (mem:SI (match_operand:SI 1 \"symbol_ref_operand\" \"\"))\n \t      (match_operand 2 \"\" \"\")))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (clobber (reg:SI PR_REG))]\n   \"TARGET_SH2A && sh2a_is_function_vector_call (operands[1])\"\n {\n@@ -9116,7 +9129,7 @@ label:\n   [(set (match_operand 0 \"\" \"=rf\")\n \t(call (mem:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\"))\n \t      (match_operand 2 \"\" \"\")))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (use (reg:SI PIC_REG))\n    (use (match_operand 3 \"\" \"\"))\n    (clobber (reg:SI PR_REG))]\n@@ -9136,7 +9149,7 @@ label:\n   [(set (match_operand 0 \"\" \"=rf\")\n \t(call (mem:SI (match_operand:SI 1 \"symbol_ref_operand\" \"\"))\n \t      (match_operand 2 \"\" \"\")))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (use (reg:SI PIC_REG))\n    (clobber (reg:SI PR_REG))\n    (clobber (match_scratch:SI 3 \"=r\"))]\n@@ -9169,7 +9182,7 @@ label:\n    (match_operand 3 \"immediate_operand\" \"n\")\n    (use (reg:SI R0_REG))\n    (use (reg:SI R1_REG))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (clobber (reg:SI PR_REG))]\n   \"TARGET_SHCOMPACT && ! (INTVAL (operands[3]) & CALL_COOKIE_RET_TRAMP (1))\"\n   \"jsr\t@%1%#\"\n@@ -9186,7 +9199,7 @@ label:\n    (match_operand 3 \"immediate_operand\" \"n\")\n    (use (reg:SI R0_REG))\n    (use (reg:SI R1_REG))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (clobber (reg:SI R10_REG))\n    (clobber (reg:SI PR_REG))]\n   \"TARGET_SHCOMPACT && (INTVAL (operands[3]) & CALL_COOKIE_RET_TRAMP (1))\"\n@@ -9210,7 +9223,7 @@ label:\n   [(parallel [(call (mem:SI (match_operand 0 \"arith_reg_operand\" \"\"))\n \t\t\t    (match_operand 1 \"\" \"\"))\n \t      (match_operand 2 \"\" \"\")\n-\t      (use (reg:PSI FPSCR_REG))\n+\t      (use (reg:SI FPSCR_MODES_REG))\n \t      (clobber (reg:SI PR_REG))])]\n   \"\"\n {\n@@ -9309,7 +9322,7 @@ label:\n \t\t\t\t (match_operand 3 \"immediate_operand\" \"n\")))\n    (use (reg:SI R0_REG))\n    (use (reg:SI R1_REG))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (clobber (reg:SI PR_REG))]\n   \"TARGET_SHCOMPACT && ! (INTVAL (operands[2]) & CALL_COOKIE_RET_TRAMP (1))\"\n   \"jsr\t@%0%#\"\n@@ -9327,7 +9340,7 @@ label:\n \t\t\t\t (match_operand 3 \"immediate_operand\" \"n\")))\n    (use (reg:SI R0_REG))\n    (use (reg:SI R1_REG))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (clobber (reg:SI R10_REG))\n    (clobber (reg:SI PR_REG))]\n   \"TARGET_SHCOMPACT && (INTVAL (operands[2]) & CALL_COOKIE_RET_TRAMP (1))\"\n@@ -9398,7 +9411,7 @@ label:\n \t\t   (call (mem:SI (match_operand 1 \"arith_reg_operand\" \"\"))\n \t\t\t\t (match_operand 2 \"\" \"\")))\n \t      (match_operand 3 \"\" \"\")\n-\t      (use (reg:PSI FPSCR_REG))\n+\t      (use (reg:SI FPSCR_MODES_REG))\n \t      (clobber (reg:SI PR_REG))])]\n   \"\"\n {\n@@ -9493,7 +9506,7 @@ label:\n (define_insn \"sibcalli\"\n   [(call (mem:SI (match_operand:SI 0 \"register_operand\" \"k\"))\n \t (match_operand 1 \"\" \"\"))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (return)]\n   \"TARGET_SH1\"\n   \"jmp\t@%0%#\"\n@@ -9507,7 +9520,7 @@ label:\n   [(call (mem:SI (match_operand:SI 0 \"arith_reg_operand\" \"k\"))\n \t (match_operand 1 \"\" \"\"))\n    (use (match_operand 2 \"\" \"\"))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (return)]\n   \"TARGET_SH2\"\n {\n@@ -9525,7 +9538,7 @@ label:\n   [(call (mem:SI (unspec:SI [(match_operand:SI 0 \"symbol_ref_operand\" \"\")]\n \t\t\t     UNSPEC_THUNK))\n \t (match_operand 1 \"\" \"\"))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (return)]\n   \"TARGET_SH1\"\n   \"bra\t%O0\"\n@@ -9539,7 +9552,7 @@ label:\n (define_insn_and_split \"sibcall_pcrel\"\n   [(call (mem:SI (match_operand:SI 0 \"symbol_ref_operand\" \"\"))\n \t (match_operand 1 \"\" \"\"))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (clobber (match_scratch:SI 2 \"=k\"))\n    (return)]\n   \"TARGET_SH2\"\n@@ -9568,7 +9581,7 @@ label:\n    (return)\n    (use (match_operand:SI 2 \"register_operand\" \"z,x\"))\n    (use (reg:SI R1_REG))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    ;; We want to make sure the `x' above will only match MACH_REG\n    ;; because sibcall_epilogue may clobber MACL_REG.\n    (clobber (reg:SI MACL_REG))]\n@@ -9602,7 +9615,7 @@ label:\n     [(call (mem:SI (match_operand 0 \"arith_reg_operand\" \"\"))\n \t   (match_operand 1 \"\" \"\"))\n      (match_operand 2 \"\" \"\")\n-     (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n      (return)])]\n   \"\"\n {\n@@ -9699,7 +9712,7 @@ label:\n   [(set (match_operand 0 \"\" \"=rf\")\n \t(call (mem:SI (match_operand:SI 1 \"register_operand\" \"k\"))\n \t      (match_operand 2 \"\" \"\")))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (return)]\n   \"TARGET_SH1\"\n   \"jmp\t@%1%#\"\n@@ -9714,7 +9727,7 @@ label:\n \t(call (mem:SI (match_operand:SI 1 \"arith_reg_operand\" \"k\"))\n \t      (match_operand 2 \"\" \"\")))\n    (use (match_operand 3 \"\" \"\"))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (return)]\n   \"TARGET_SH2\"\n {\n@@ -9731,7 +9744,7 @@ label:\n   [(set (match_operand 0 \"\" \"=rf\")\n \t(call (mem:SI (match_operand:SI 1 \"symbol_ref_operand\" \"\"))\n \t      (match_operand 2 \"\" \"\")))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (clobber (match_scratch:SI 3 \"=k\"))\n    (return)]\n   \"TARGET_SH2\"\n@@ -9763,7 +9776,7 @@ label:\n    (return)\n    (use (match_operand:SI 3 \"register_operand\" \"z,x\"))\n    (use (reg:SI R1_REG))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    ;; We want to make sure the `x' above will only match MACH_REG\n    ;; because sibcall_epilogue may clobber MACL_REG.\n    (clobber (reg:SI MACL_REG))]\n@@ -9799,7 +9812,7 @@ label:\n \t  (call (mem:SI (match_operand 1 \"arith_reg_operand\" \"\"))\n \t  \t(match_operand 2 \"\" \"\")))\n      (match_operand 3 \"\" \"\")\n-     (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n      (return)])]\n   \"\"\n {\n@@ -9905,7 +9918,7 @@ label:\n    (match_operand 3 \"immediate_operand\" \"n\")\n    (use (reg:SI R0_REG))\n    (use (reg:SI R1_REG))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (clobber (reg:SI PR_REG))]\n   \"TARGET_SHCOMPACT && ! (INTVAL (operands[3]) & CALL_COOKIE_RET_TRAMP (1))\"\n   \"jsr\t@%1%#\"\n@@ -9924,7 +9937,7 @@ label:\n    (match_operand 3 \"immediate_operand\" \"n\")\n    (use (reg:SI R0_REG))\n    (use (reg:SI R1_REG))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (clobber (reg:SI R10_REG))\n    (clobber (reg:SI PR_REG))]\n   \"TARGET_SHCOMPACT && (INTVAL (operands[3]) & CALL_COOKIE_RET_TRAMP (1))\"\n@@ -10430,7 +10443,7 @@ label:\n \t(call:SI (mem:SI (unspec:SI [(match_operand:SI 1 \"\" \"\")]\n \t\t\t\t  UNSPEC_TLSGD))\n \t      (const_int 0)))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (use (reg:SI PIC_REG))\n    (clobber (reg:SI PR_REG))\n    (clobber (scratch:SI))]\n@@ -10457,7 +10470,7 @@ label:\n \t(call:SI (mem:SI (unspec:SI [(match_operand:SI 1 \"\" \"\")]\n \t\t\t\t  UNSPEC_TLSLDM))\n \t      (const_int 0)))\n-   (use (reg:PSI FPSCR_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n    (use (reg:SI PIC_REG))\n    (clobber (reg:SI PR_REG))\n    (clobber (scratch:SI))]\n@@ -12199,8 +12212,11 @@ label:\n (define_expand \"movpsi\"\n   [(set (match_operand:PSI 0 \"register_operand\" \"\")\n \t(match_operand:PSI 1 \"general_movsrc_operand\" \"\"))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n-  \"\")\n+  \"TARGET_FPU_ANY\"\n+{\n+  emit_insn (gen_fpu_switch (operands[0], operands[1]));\n+  DONE;\n+})\n \n ;; The c / m alternative is a fake to guide reload to load directly into\n ;; fpscr, since reload doesn't know how to use post-increment.\n@@ -12211,8 +12227,14 @@ label:\n ;; like a mac -> gpr move.\n (define_insn \"fpu_switch\"\n   [(set (match_operand:PSI 0 \"general_movdst_operand\" \"=c,c,r,c,c,r,m,r,<\")\n-\t(match_operand:PSI 1 \"general_movsrc_operand\" \"c,>,m,m,r,r,r,!c,c\"))]\n-  \"TARGET_SH2E\n+\t(match_operand:PSI 1 \"general_movsrc_operand\" \" c,>,m,m,r,r,r,!c,c\"))\n+   (use (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n+   (set (reg:SI FPSCR_STAT_REG)\n+\t(unspec_volatile:SI [(const_int 0)] UNSPECV_FPSCR_STAT))\n+   (set (reg:SI FPSCR_MODES_REG)\n+\t(unspec_volatile:SI [(const_int 0)] UNSPECV_FPSCR_MODES))]\n+  \"TARGET_FPU_ANY\n    && (! reload_completed\n        || true_regnum (operands[0]) != FPSCR_REG\n        || !MEM_P (operands[1])\n@@ -12231,43 +12253,51 @@ label:\n    (set_attr \"type\" \"nil,mem_fpscr,load,mem_fpscr,gp_fpscr,move,store,\n \t\t     mac_gp,fstore\")])\n \n-(define_peephole2\n+(define_split\n   [(set (reg:PSI FPSCR_REG)\n-\t(mem:PSI (match_operand:SI 0 \"register_operand\" \"\")))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE) && peep2_reg_dead_p (1, operands[0])\"\n+        (match_operand:PSI 0 \"simple_mem_operand\"))\n+   (use (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))\n+   (set (reg:SI FPSCR_STAT_REG)\n+\t(unspec_volatile:SI [(const_int 0)] UNSPECV_FPSCR_STAT))\n+   (set (reg:SI FPSCR_MODES_REG)\n+\t(unspec_volatile:SI [(const_int 0)] UNSPECV_FPSCR_MODES))]\n+  \"TARGET_FPU_ANY && reload_completed\"\n   [(const_int 0)]\n {\n-  rtx fpscr, mem, new_insn;\n+  rtx addrreg = XEXP (operands[0], 0);\n+  rtx mem = replace_equiv_address (operands[0],\n+\t\t\t\t   gen_rtx_POST_INC (Pmode, addrreg));\n \n-  fpscr = SET_DEST (PATTERN (curr_insn));\n-  mem = SET_SRC (PATTERN (curr_insn));\n-  mem = replace_equiv_address (mem, gen_rtx_POST_INC (Pmode, operands[0]));\n+  add_reg_note (emit_insn (gen_fpu_switch (get_fpscr_rtx (), mem)),\n+\t\tREG_INC, addrreg);\n \n-  new_insn = emit_insn (gen_fpu_switch (fpscr, mem));\n-  add_reg_note (new_insn, REG_INC, operands[0]);\n-  DONE;\n+  /* Modify the address reg to compensate for the forced post-inc mode.\n+     If the address reg becomes dead afterwards, the add will be eliminated\n+     automatically.  */\n+  emit_insn (gen_addsi3 (addrreg, addrreg, GEN_INT (-4)));\n })\n \n-(define_split\n-  [(set (reg:PSI FPSCR_REG)\n-\t(mem:PSI (match_operand:SI 0 \"register_operand\" \"\")))]\n-  \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\n-   && (flag_peephole2 ? epilogue_completed : reload_completed)\"\n-  [(const_int 0)]\n-{\n-  rtx fpscr, mem, new_insn;\n-\n-  fpscr = SET_DEST (PATTERN (curr_insn));\n-  mem = SET_SRC (PATTERN (curr_insn));\n-  mem = replace_equiv_address (mem, gen_rtx_POST_INC (Pmode, operands[0]));\n+;; The 'extend_psi_si' and 'truncate_si_psi' insns are needed since we can't\n+;; do logic on PSImode.  Adding PSImode logic patterns works, but loading\n+;; a PSImode constant causes a double indirection, since the SH constant pool\n+;; is not aware of it.\n+;; FIXME: We could treat the FPSCR reg as SImode, but currently this causes\n+;; additional troubles.\n+(define_insn \"extend_psi_si\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n+\t(zero_extend:SI (match_operand:PSI 1 \"arith_reg_operand\" \"0\")))]\n+  \"TARGET_SH1\"\n+  \"\"\n+  [(set_attr \"length\" \"0\")])\n \n-  new_insn = emit_insn (gen_fpu_switch (fpscr, mem));\n-  add_reg_note (new_insn, REG_INC, operands[0]);\n+(define_insn \"truncate_si_psi\"\n+  [(set (match_operand:PSI 0 \"arith_reg_dest\" \"=r\")\n+\t(truncate:PSI (match_operand:SI 1 \"arith_reg_operand\" \"0\")))]\n+  \"TARGET_SH1\"\n+  \"\"\n+  [(set_attr \"length\" \"0\")])\n \n-  if (!find_regno_note (curr_insn, REG_DEAD, true_regnum (operands[0])))\n-    emit_insn (gen_addsi3 (operands[0], operands[0], GEN_INT (-4)));\n-  DONE;\n-})\n \n ;; ??? This uses the fp unit, but has no type indicating that.\n ;; If we did that, this would either give a bogus latency or introduce\n@@ -12277,7 +12307,9 @@ label:\n ;; current setting.\n (define_insn \"toggle_sz\"\n   [(set (reg:PSI FPSCR_REG)\n-\t(xor:PSI (reg:PSI FPSCR_REG) (const_int 1048576)))]\n+\t(xor:PSI (reg:PSI FPSCR_REG) (const_int FPSCR_SZ)))\n+   (set (reg:SI FPSCR_MODES_REG)\n+\t(unspec_volatile:SI [(const_int 0)] UNSPECV_FPSCR_MODES))]\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fschg\"\n   [(set_attr \"type\" \"fpscr_toggle\") (set_attr \"fp_set\" \"unknown\")])\n@@ -12286,7 +12318,9 @@ label:\n \n (define_insn \"toggle_pr\"\n   [(set (reg:PSI FPSCR_REG)\n-\t(xor:PSI (reg:PSI FPSCR_REG) (const_int 524288)))]\n+\t(xor:PSI (reg:PSI FPSCR_REG) (const_int FPSCR_PR)))\n+   (set (reg:SI FPSCR_MODES_REG)\n+\t(unspec_volatile:SI [(const_int 0)] UNSPECV_FPSCR_MODES))]\n   \"TARGET_SH4A_FP\"\n   \"fpchg\"\n   [(set_attr \"type\" \"fpscr_toggle\")])\n@@ -12299,7 +12333,7 @@ label:\n {\n   if (TARGET_SH2E)\n     {\n-      expand_sf_binop (&gen_addsf3_i, operands);\n+      emit_insn (gen_addsf3_i (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n })\n@@ -12398,7 +12432,8 @@ label:\n   [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(plus:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"%0\")\n \t\t (match_operand:SF 2 \"fp_arith_reg_operand\" \"f\")))\n-   (use (match_operand:PSI 3 \"fpscr_operand\" \"c\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"TARGET_SH2E\"\n   \"fadd\t%2,%0\"\n   [(set_attr \"type\" \"fp\")\n@@ -12412,7 +12447,7 @@ label:\n {\n   if (TARGET_SH2E)\n     {\n-      expand_sf_binop (&gen_subsf3_i, operands);\n+      emit_insn (gen_subsf3_i (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n })\n@@ -12429,7 +12464,8 @@ label:\n   [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(minus:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"0\")\n \t\t (match_operand:SF 2 \"fp_arith_reg_operand\" \"f\")))\n-   (use (match_operand:PSI 3 \"fpscr_operand\" \"c\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"TARGET_SH2E\"\n   \"fsub\t%2,%0\"\n   [(set_attr \"type\" \"fp\")\n@@ -12443,8 +12479,7 @@ label:\n {\n   if (TARGET_SH2E)\n     {\n-      emit_insn (gen_mulsf3_i (operands[0], operands[1], operands[2],\n-\t\t get_fpscr_rtx ()));\n+      emit_insn (gen_mulsf3_i (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n })\n@@ -12461,7 +12496,8 @@ label:\n   [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(mult:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"%0\")\n \t\t (match_operand:SF 2 \"fp_arith_reg_operand\" \"f\")))\n-   (use (match_operand:PSI 3 \"fpscr_operand\" \"c\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"TARGET_SH2E\"\n   \"fmul\t%2,%0\"\n   [(set_attr \"type\" \"fp\")\n@@ -12477,8 +12513,8 @@ label:\n {\n   if (TARGET_SH2E)\n     {\n-      emit_sf_insn (gen_fmasf4_i (operands[0], operands[1], operands[2],\n-\t\t\t\t  operands[3], get_fpscr_rtx ()));\n+      emit_insn (gen_fmasf4_i (operands[0], operands[1], operands[2],\n+\t\t\t       operands[3]));\n       DONE;\n     }\n })\n@@ -12488,7 +12524,8 @@ label:\n \t(fma:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"w\")\n \t\t(match_operand:SF 2 \"fp_arith_reg_operand\" \"f\")\n \t\t(match_operand:SF 3 \"fp_arith_reg_operand\" \"0\")))\n-   (use (match_operand:PSI 4 \"fpscr_operand\" \"c\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"TARGET_SH2E\"\n   \"fmac\t%1,%2,%0\"\n   [(set_attr \"type\" \"fp\")\n@@ -12511,13 +12548,15 @@ label:\n \t(plus:SF (mult:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"%w\")\n \t\t\t  (match_operand:SF 2 \"fp_arith_reg_operand\" \"f\"))\n \t\t (match_operand:SF 3 \"arith_reg_operand\" \"0\")))\n-   (use (match_operand:PSI 4 \"fpscr_operand\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"TARGET_SH2E && flag_fp_contract_mode != FP_CONTRACT_OFF\"\n   \"fmac\t%1,%2,%0\"\n   \"&& can_create_pseudo_p ()\"\n   [(parallel [(set (match_dup 0)\n \t\t   (fma:SF (match_dup 1) (match_dup 2) (match_dup 3)))\n-\t      (use (match_dup 4))])]\n+\t      (clobber (reg:SI FPSCR_STAT_REG))\n+\t      (use (reg:SI FPSCR_MODES_REG))])]\n {\n   /* Change 'b * a + a' into 'a * b + a'.\n      This is better for register allocation.  */\n@@ -12548,7 +12587,7 @@ label:\n {\n   if (TARGET_SH2E)\n     {\n-      expand_sf_binop (&gen_divsf3_i, operands);\n+      emit_insn (gen_divsf3_i (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n })\n@@ -12565,7 +12604,8 @@ label:\n   [(set (match_operand:SF 0 \"fp_arith_reg_dest\" \"=f\")\n \t(div:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"0\")\n \t\t (match_operand:SF 2 \"fp_arith_reg_operand\" \"f\")))\n-   (use (match_operand:PSI 3 \"fpscr_operand\" \"c\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"TARGET_SH2E\"\n   \"fdiv\t%2,%0\"\n   [(set_attr \"type\" \"fdiv\")\n@@ -12583,10 +12623,9 @@ label:\n \t(float:SF (match_operand:SI 1 \"fpul_operand\" \"\")))]\n   \"TARGET_SH2E || TARGET_SHMEDIA_FPU\"\n {\n-  if (TARGET_SH4 || TARGET_SH2A_SINGLE)\n+  if (!TARGET_SHMEDIA_FPU)\n     {\n-      emit_sf_insn (gen_floatsisf2_i4 (operands[0], operands[1],\n-\t\t\t\t       get_fpscr_rtx ()));\n+      emit_insn (gen_floatsisf2_i4 (operands[0], operands[1]));\n       DONE;\n     }\n })\n@@ -12601,19 +12640,13 @@ label:\n (define_insn \"floatsisf2_i4\"\n   [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(float:SF (match_operand:SI 1 \"fpul_operand\" \"y\")))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n-  \"(TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n+  \"TARGET_SH2E\"\n   \"float\t%1,%0\"\n   [(set_attr \"type\" \"fp\")\n    (set_attr \"fp_mode\" \"single\")])\n \n-(define_insn \"*floatsisf2_ie\"\n-  [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"=f\")\n-\t(float:SF (match_operand:SI 1 \"fpul_operand\" \"y\")))]\n-  \"TARGET_SH2E && ! (TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n-  \"float\t%1,%0\"\n-  [(set_attr \"type\" \"fp\")])\n-\n (define_insn \"fix_truncsfdi2\"\n   [(set (match_operand:DI 0 \"fp_arith_reg_dest\" \"=f\")\n \t(fix:DI (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))]\n@@ -12626,10 +12659,9 @@ label:\n \t(fix:SI (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))]\n   \"TARGET_SH2E || TARGET_SHMEDIA_FPU\"\n {\n-  if (TARGET_SH4 || TARGET_SH2A_SINGLE)\n+  if (!TARGET_SHMEDIA_FPU)\n     {\n-      emit_sf_insn (gen_fix_truncsfsi2_i4 (operands[0], operands[1],\n-\t\t\t\t\t   get_fpscr_rtx ()));\n+      emit_insn (gen_fix_truncsfsi2_i4 (operands[0], operands[1]));\n       DONE;\n     }\n })\n@@ -12644,98 +12676,43 @@ label:\n (define_insn \"fix_truncsfsi2_i4\"\n   [(set (match_operand:SI 0 \"fpul_operand\" \"=y\")\n \t(fix:SI (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n-  \"(TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n+  \"TARGET_SH2E\"\n   \"ftrc\t%1,%0\"\n   [(set_attr \"type\" \"ftrc_s\")\n    (set_attr \"fp_mode\" \"single\")])\n \n-;; ??? This pattern is used nowhere.  fix_truncsfsi2 always expands to\n-;; fix_truncsfsi2_i4.\n-;; (define_insn \"fix_truncsfsi2_i4_2\"\n-;;  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n-;;\t(fix:SI (match_operand:SF 1 \"arith_reg_operand\" \"f\")))\n-;;   (use (reg:PSI FPSCR_REG))\n-;;   (clobber (reg:SI FPUL_REG))]\n-;;  \"TARGET_SH4\"\n-;;  \"#\"\n-;;  [(set_attr \"length\" \"4\")\n-;;   (set_attr \"fp_mode\" \"single\")])\n-\n-;;(define_split\n-;;  [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n-;;\t(fix:SI (match_operand:SF 1 \"arith_reg_operand\" \"f\")))\n-;;   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))\n-;;   (clobber (reg:SI FPUL_REG))]\n-;;  \"TARGET_SH4\"\n-;;  [(parallel [(set (reg:SI FPUL_REG) (fix:SI (match_dup 1)))\n-;;\t      (use (match_dup 2))])\n-;;   (set (match_dup 0) (reg:SI FPUL_REG))])\n-\n-(define_insn \"*fixsfsi\"\n-  [(set (match_operand:SI 0 \"fpul_operand\" \"=y\")\n-\t(fix:SI (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))]\n-  \"TARGET_SH2E && ! (TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n-  \"ftrc\t%1,%0\"\n-  [(set_attr \"type\" \"fp\")])\n-\n (define_insn \"cmpgtsf_t\"\n-  [(set (reg:SI T_REG)\n-\t(gt:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n-\t       (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))]\n-  \"TARGET_SH2E && ! (TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n-  \"fcmp/gt\t%1,%0\"\n-  [(set_attr \"type\" \"fp_cmp\")\n-   (set_attr \"fp_mode\" \"single\")])\n-\n-(define_insn \"cmpeqsf_t\"\n-  [(set (reg:SI T_REG)\n-\t(eq:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n-\t       (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))]\n-  \"TARGET_SH2E && ! (TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n-  \"fcmp/eq\t%1,%0\"\n-  [(set_attr \"type\" \"fp_cmp\")\n-   (set_attr \"fp_mode\" \"single\")])\n-\n-(define_insn \"ieee_ccmpeqsf_t\"\n-  [(set (reg:SI T_REG)\n-\t(ior:SI (reg:SI T_REG)\n-\t\t(eq:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n-\t\t       (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\"))))]\n-  \"TARGET_SH2E && TARGET_IEEE && ! (TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n-{\n-  return output_ieee_ccmpeq (insn, operands);\n-}\n-  [(set_attr \"length\" \"4\")])\n-\n-\n-(define_insn \"cmpgtsf_t_i4\"\n   [(set (reg:SI T_REG)\n \t(gt:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n \t       (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n-  \"(TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n+  \"TARGET_SH2E || TARGET_SH4 || TARGET_SH2A_SINGLE\"\n   \"fcmp/gt\t%1,%0\"\n   [(set_attr \"type\" \"fp_cmp\")\n    (set_attr \"fp_mode\" \"single\")])\n \n-(define_insn \"cmpeqsf_t_i4\"\n+(define_insn \"cmpeqsf_t\"\n   [(set (reg:SI T_REG)\n \t(eq:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n \t       (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\")))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n-  \"(TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n+  \"TARGET_SH2E || TARGET_SH4 || TARGET_SH2A_SINGLE\"\n   \"fcmp/eq\t%1,%0\"\n   [(set_attr \"type\" \"fp_cmp\")\n    (set_attr \"fp_mode\" \"single\")])\n \n-(define_insn \"*ieee_ccmpeqsf_t_4\"\n+(define_insn \"ieee_ccmpeqsf_t\"\n   [(set (reg:SI T_REG)\n \t(ior:SI (reg:SI T_REG)\n \t\t(eq:SI (match_operand:SF 0 \"fp_arith_reg_operand\" \"f\")\n \t\t       (match_operand:SF 1 \"fp_arith_reg_operand\" \"f\"))))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_IEEE && (TARGET_SH4 || TARGET_SH2A_SINGLE)\"\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n+  \"TARGET_IEEE && TARGET_SH2E\"\n {\n   return output_ieee_ccmpeq (insn, operands);\n }\n@@ -12817,7 +12794,7 @@ label:\n {\n   if (TARGET_SH3E)\n     {\n-      expand_sf_unop (&gen_sqrtsf2_i, operands);\n+      emit_insn (gen_sqrtsf2_i (operands[0], operands[1]));\n       DONE;\n     }\n })\n@@ -12832,7 +12809,8 @@ label:\n (define_insn \"sqrtsf2_i\"\n   [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(sqrt:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"0\")))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"TARGET_SH3E\"\n   \"fsqrt\t%0\"\n   [(set_attr \"type\" \"fdiv\")\n@@ -12842,7 +12820,8 @@ label:\n   [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(div:SF (match_operand:SF 1 \"immediate_operand\" \"i\")\n \t\t(sqrt:SF (match_operand:SF 2 \"fp_arith_reg_operand\" \"0\"))))\n-   (use (match_operand:PSI 3 \"fpscr_operand\" \"c\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"TARGET_FPU_ANY && TARGET_FSRRA\n    && operands[1] == CONST1_RTX (SFmode)\"\n   \"fsrra\t%0\"\n@@ -12864,10 +12843,9 @@ label:\n   rtx fsca = gen_reg_rtx (V2SFmode);\n   rtx scale_reg = force_reg (SFmode, sh_fsca_sf2int ());\n \n-  emit_sf_insn (gen_mulsf3 (scaled, operands[2], scale_reg));\n-  emit_sf_insn (gen_fix_truncsfsi2 (truncated, scaled));\n-  emit_sf_insn (gen_fsca (fsca, truncated, sh_fsca_int2sf (),\n-\t\t\t  get_fpscr_rtx ()));\n+  emit_insn (gen_mulsf3 (scaled, operands[2], scale_reg));\n+  emit_insn (gen_fix_truncsfsi2 (truncated, scaled));\n+  emit_insn (gen_fsca (fsca, truncated, sh_fsca_int2sf ()));\n \n   emit_move_insn (operands[0], gen_rtx_SUBREG (SFmode, fsca, 4));\n   emit_move_insn (operands[1], gen_rtx_SUBREG (SFmode, fsca, 0));\n@@ -12883,7 +12861,8 @@ label:\n \t\t    ] UNSPEC_FSINA)\n \t (unspec:SF [(mult:SF (float:SF (match_dup 1)) (match_dup 2))\n \t\t    ] UNSPEC_FCOSA)))\n-   (use (match_operand:PSI 3 \"fpscr_operand\" \"c\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"TARGET_FPU_ANY && TARGET_FSCA\"\n   \"fsca\tfpul,%d0\"\n   \"&& !fpul_operand (operands[1], SImode)\"\n@@ -12898,9 +12877,8 @@ label:\n       gcc_assert (GET_CODE (x) == FIX || GET_CODE (x) == FLOAT);\n       x = XEXP (x, 0);\n     }\n-\n   gcc_assert (x != NULL_RTX && fpul_operand (x, SImode));\n-  emit_insn (gen_fsca (operands[0], x, operands[2], operands[3]));\n+  emit_insn (gen_fsca (operands[0], x, operands[2]));\n   DONE;\n }\n   [(set_attr \"type\" \"fsca\")\n@@ -12933,7 +12911,7 @@ label:\n {\n   if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n-      expand_df_binop (&gen_adddf3_i, operands);\n+      emit_insn (gen_adddf3_i (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n })\n@@ -12950,7 +12928,8 @@ label:\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(plus:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"%0\")\n \t\t (match_operand:DF 2 \"fp_arith_reg_operand\" \"f\")))\n-   (use (match_operand:PSI 3 \"fpscr_operand\" \"c\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fadd\t%2,%0\"\n   [(set_attr \"type\" \"dfp_arith\")\n@@ -12964,7 +12943,7 @@ label:\n {\n   if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n-      expand_df_binop (&gen_subdf3_i, operands);\n+      emit_insn (gen_subdf3_i (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n })\n@@ -12981,7 +12960,8 @@ label:\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(minus:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"0\")\n \t\t  (match_operand:DF 2 \"fp_arith_reg_operand\" \"f\")))\n-   (use (match_operand:PSI 3 \"fpscr_operand\" \"c\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fsub\t%2,%0\"\n   [(set_attr \"type\" \"dfp_arith\")\n@@ -12995,7 +12975,7 @@ label:\n {\n   if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n-      expand_df_binop (&gen_muldf3_i, operands);\n+      emit_insn (gen_muldf3_i (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n })\n@@ -13012,7 +12992,8 @@ label:\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(mult:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"%0\")\n \t\t (match_operand:DF 2 \"fp_arith_reg_operand\" \"f\")))\n-   (use (match_operand:PSI 3 \"fpscr_operand\" \"c\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fmul\t%2,%0\"\n   [(set_attr \"type\" \"dfp_mul\")\n@@ -13026,7 +13007,7 @@ label:\n {\n   if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n-      expand_df_binop (&gen_divdf3_i, operands);\n+      emit_insn (gen_divdf3_i (operands[0], operands[1], operands[2]));\n       DONE;\n     }\n })\n@@ -13043,7 +13024,8 @@ label:\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(div:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"0\")\n \t\t(match_operand:DF 2 \"fp_arith_reg_operand\" \"f\")))\n-   (use (match_operand:PSI 3 \"fpscr_operand\" \"c\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fdiv\t%2,%0\"\n   [(set_attr \"type\" \"dfdiv\")\n@@ -13063,8 +13045,7 @@ label:\n {\n   if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n-      emit_df_insn (gen_floatsidf2_i (operands[0], operands[1],\n-\t\t\t\t      get_fpscr_rtx ()));\n+      emit_insn (gen_floatsidf2_i (operands[0], operands[1]));\n       DONE;\n     }\n })\n@@ -13079,7 +13060,8 @@ label:\n (define_insn \"floatsidf2_i\"\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(float:DF (match_operand:SI 1 \"fpul_operand\" \"y\")))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"float\t%1,%0\"\n   [(set_attr \"type\" \"dfp_conv\")\n@@ -13099,8 +13081,7 @@ label:\n {\n   if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n-      emit_df_insn (gen_fix_truncdfsi2_i (operands[0], operands[1],\n-\t\t\t\t\t  get_fpscr_rtx ()));\n+      emit_insn (gen_fix_truncdfsi2_i (operands[0], operands[1]));\n       DONE;\n     }\n })\n@@ -13115,40 +13096,20 @@ label:\n (define_insn \"fix_truncdfsi2_i\"\n   [(set (match_operand:SI 0 \"fpul_operand\" \"=y\")\n \t(fix:SI (match_operand:DF 1 \"fp_arith_reg_operand\" \"f\")))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"ftrc\t%1,%0\"\n   [(set_attr \"type\" \"dfp_conv\")\n    (set_attr \"dfp_comp\" \"no\")\n    (set_attr \"fp_mode\" \"double\")])\n \n-;; ??? This pattern is used nowhere.  fix_truncdfsi2 always expands to\n-;; fix_truncdfsi2_i.\n-;; (define_insn \"fix_truncdfsi2_i4\"\n-;;   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n-;; \t(fix:SI (match_operand:DF 1 \"arith_reg_operand\" \"f\")))\n-;;    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))\n-;;    (clobber (reg:SI FPUL_REG))]\n-;;   \"TARGET_SH4\"\n-;;   \"#\"\n-;;   [(set_attr \"length\" \"4\")\n-;;    (set_attr \"fp_mode\" \"double\")])\n-;;\n-;; (define_split\n-;;   [(set (match_operand:SI 0 \"arith_reg_operand\" \"=r\")\n-;; \t(fix:SI (match_operand:DF 1 \"arith_reg_operand\" \"f\")))\n-;;    (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))\n-;;    (clobber (reg:SI FPUL_REG))]\n-;;   \"TARGET_SH4\"\n-;;   [(parallel [(set (reg:SI FPUL_REG) (fix:SI (match_dup 1)))\n-;; \t      (use (match_dup 2))])\n-;;    (set (match_dup 0) (reg:SI FPUL_REG))])\n-\n (define_insn \"cmpgtdf_t\"\n   [(set (reg:SI T_REG)\n \t(gt:SI (match_operand:DF 0 \"fp_arith_reg_operand\" \"f\")\n \t       (match_operand:DF 1 \"fp_arith_reg_operand\" \"f\")))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fcmp/gt\t%1,%0\"\n   [(set_attr \"type\" \"dfp_cmp\")\n@@ -13158,7 +13119,8 @@ label:\n   [(set (reg:SI T_REG)\n \t(eq:SI (match_operand:DF 0 \"fp_arith_reg_operand\" \"f\")\n \t       (match_operand:DF 1 \"fp_arith_reg_operand\" \"f\")))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fcmp/eq\t%1,%0\"\n   [(set_attr \"type\" \"dfp_cmp\")\n@@ -13169,7 +13131,8 @@ label:\n \t(ior:SI (reg:SI T_REG)\n \t\t(eq:SI (match_operand:DF 0 \"fp_arith_reg_operand\" \"f\")\n \t\t       (match_operand:DF 1 \"fp_arith_reg_operand\" \"f\"))))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"TARGET_IEEE && (TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n {\n   return output_ieee_ccmpeq (insn, operands);\n@@ -13252,7 +13215,7 @@ label:\n {\n   if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n-      expand_df_unop (&gen_sqrtdf2_i, operands);\n+      emit_insn (gen_sqrtdf2_i (operands[0], operands[1]));\n       DONE;\n     }\n })\n@@ -13267,7 +13230,8 @@ label:\n (define_insn \"sqrtdf2_i\"\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(sqrt:DF (match_operand:DF 1 \"fp_arith_reg_operand\" \"0\")))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fsqrt\t%0\"\n   [(set_attr \"type\" \"dfdiv\")\n@@ -13299,8 +13263,7 @@ label:\n {\n   if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n-      emit_df_insn (gen_extendsfdf2_i4 (operands[0], operands[1],\n-\t\t\t\t\tget_fpscr_rtx ()));\n+      emit_insn (gen_extendsfdf2_i4 (operands[0], operands[1]));\n       DONE;\n     }\n })\n@@ -13315,7 +13278,8 @@ label:\n (define_insn \"extendsfdf2_i4\"\n   [(set (match_operand:DF 0 \"fp_arith_reg_operand\" \"=f\")\n \t(float_extend:DF (match_operand:SF 1 \"fpul_operand\" \"y\")))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fcnvsd  %1,%0\"\n   [(set_attr \"type\" \"fp\")\n@@ -13328,8 +13292,7 @@ label:\n {\n   if (TARGET_SH4 || TARGET_SH2A_DOUBLE)\n     {\n-      emit_df_insn (gen_truncdfsf2_i4 (operands[0], operands[1],\n-\t\t\t\t       get_fpscr_rtx ()));\n+      emit_insn (gen_truncdfsf2_i4 (operands[0], operands[1]));\n       DONE;\n     }\n })\n@@ -13344,7 +13307,8 @@ label:\n (define_insn \"truncdfsf2_i4\"\n   [(set (match_operand:SF 0 \"fpul_operand\" \"=y\")\n \t(float_truncate:SF (match_operand:DF 1 \"fp_arith_reg_operand\" \"f\")))\n-   (use (match_operand:PSI 2 \"fpscr_operand\" \"c\"))]\n+   (clobber (reg:SI FPSCR_STAT_REG))\n+   (use (reg:SI FPSCR_MODES_REG))]\n   \"(TARGET_SH4 || TARGET_SH2A_DOUBLE)\"\n   \"fcnvds  %1,%0\"\n   [(set_attr \"type\" \"fp\")"}, {"sha": "21e3e06f031e848b7234218f7c8ddf70a60cff80", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2317d15bafe848ca54456fdb158377bce235e4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2317d15bafe848ca54456fdb158377bce235e4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3a2317d15bafe848ca54456fdb158377bce235e4", "patch": "@@ -1,3 +1,8 @@\n+2014-10-16  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/53513\n+\t* gcc.target/sh/pr54680.c: Adjust matching of lds insn.\n+\n 2014-10-16  Martin Liska  <mliska@suse.cz>\n \t    Jan Hubicka  <hubicka@ucw.cz>\n \n@@ -45,7 +50,7 @@\n \t* gcc.target/i386/bmi-2.c: Likewise.\n \t* gcc.target/i386/pr56564-2.c: Likewise.\n \n-2014-10-16  Richard Biener  <rguenther@suse.de>i\n+2014-10-16  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/63168\n \t* gcc.dg/tree-ssa/loop-40.c: New testcase."}, {"sha": "8c5d5e18c716d7cea9ba40cc8a785a366d440792", "filename": "gcc/testsuite/gcc.target/sh/pr54680.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2317d15bafe848ca54456fdb158377bce235e4/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54680.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2317d15bafe848ca54456fdb158377bce235e4/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54680.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54680.c?ref=3a2317d15bafe848ca54456fdb158377bce235e4", "patch": "@@ -6,7 +6,7 @@\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m3*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n /* { dg-final { scan-assembler-times \"fsca\" 7 } } */\n /* { dg-final { scan-assembler-times \"shad\" 1 } } */\n-/* { dg-final { scan-assembler-times \"lds\\t\" 6 } } */\n+/* { dg-final { scan-assembler-times \"lds\\tr\\[0-9\\],fpul\" 6 } } */\n /* { dg-final { scan-assembler-times \"fmul\" 2 } } */\n /* { dg-final { scan-assembler-times \"ftrc\" 1 } } */\n "}]}