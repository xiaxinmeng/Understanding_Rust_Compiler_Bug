{"sha": "03ddaf352f00f840e6bd416a78bf4056adeb185c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNkZGFmMzUyZjAwZjg0MGU2YmQ0MTZhNzhiZjQwNTZhZGViMTg1Yw==", "commit": {"author": {"name": "Tobias Schl\u00fcter", "email": "tobias.schlueter@physik.uni-muenchen.de", "date": "2004-10-03T13:30:37Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-10-03T13:30:37Z"}, "message": "simplify.c (range_check): Remove blank line at beginning of function.\n\n2004-10-03  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n\n\t* simplify.c (range_check): Remove blank line at beginning of function.\n\t(gfc_simplify_dint): Same at end of function.\n\t(gfc_simplify_exponent, gfc_simplify_fraction): Simplify calculations.\n\t(gfc_simplify_bound): Fix indentation.\n\t(gfc_simplify_log10): Simplify calculation.\n\t(gfc_simplify_min, gfc_simplify_max): Remove blank line at beginning\n\tof function.\n\t(gfc_simplify_nearest): Same at end of function.\n\t(gfc_simplify_nint, gfc_simplify_idnint): Same at beginning of\n\tfunction.\n\t(gfc_simplify_rrspacing, gfc_simplify_set_exponent,\n\tgfc_simplify_spacing): Simplify calulations.\n\nFrom-SVN: r88447", "tree": {"sha": "f4df418c2bb2bd2a7e16a1bd2fca2c44436102bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4df418c2bb2bd2a7e16a1bd2fca2c44436102bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03ddaf352f00f840e6bd416a78bf4056adeb185c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03ddaf352f00f840e6bd416a78bf4056adeb185c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03ddaf352f00f840e6bd416a78bf4056adeb185c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03ddaf352f00f840e6bd416a78bf4056adeb185c/comments", "author": {"login": "TobiSchluter", "id": 11887541, "node_id": "MDQ6VXNlcjExODg3NTQx", "avatar_url": "https://avatars.githubusercontent.com/u/11887541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TobiSchluter", "html_url": "https://github.com/TobiSchluter", "followers_url": "https://api.github.com/users/TobiSchluter/followers", "following_url": "https://api.github.com/users/TobiSchluter/following{/other_user}", "gists_url": "https://api.github.com/users/TobiSchluter/gists{/gist_id}", "starred_url": "https://api.github.com/users/TobiSchluter/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TobiSchluter/subscriptions", "organizations_url": "https://api.github.com/users/TobiSchluter/orgs", "repos_url": "https://api.github.com/users/TobiSchluter/repos", "events_url": "https://api.github.com/users/TobiSchluter/events{/privacy}", "received_events_url": "https://api.github.com/users/TobiSchluter/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "046dcd57648f9789e4f5e15565cdf6fa371d5e95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/046dcd57648f9789e4f5e15565cdf6fa371d5e95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/046dcd57648f9789e4f5e15565cdf6fa371d5e95"}], "stats": {"total": 222, "additions": 70, "deletions": 152}, "files": [{"sha": "22cc1df9035e1b5b383cfc2ecb73f8129585c588", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ddaf352f00f840e6bd416a78bf4056adeb185c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ddaf352f00f840e6bd416a78bf4056adeb185c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=03ddaf352f00f840e6bd416a78bf4056adeb185c", "patch": "@@ -1,3 +1,18 @@\n+2004-10-03  Tobias Schlueter  <tobias.schlueter@physik.uni-muenchen.de>\n+\n+\t* simplify.c (range_check): Remove blank line at beginning of function.\n+\t(gfc_simplify_dint): Same at end of function.\n+\t(gfc_simplify_exponent, gfc_simplify_fraction): Simplify calculations.\n+\t(gfc_simplify_bound): Fix indentation.\n+\t(gfc_simplify_log10): Simplify calculation.\n+\t(gfc_simplify_min, gfc_simplify_max): Remove blank line at beginning\n+\tof function.\n+\t(gfc_simplify_nearest): Same at end of function.\n+\t(gfc_simplify_nint, gfc_simplify_idnint): Same at beginning of\n+\tfunction.\n+\t(gfc_simplify_rrspacing, gfc_simplify_set_exponent,\n+\tgfc_simplify_spacing): Simplify calulations.\n+\n 2004-10-03  Feng Wang  <fengwang@nudt.edu.cn>\n \n \t* trans-intrinsic.c: Fix comments on spacing and rrspacing"}, {"sha": "2dffff845d9abbf3ee6aa59d846cf86e45c0366a", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 55, "deletions": 152, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03ddaf352f00f840e6bd416a78bf4056adeb185c/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03ddaf352f00f840e6bd416a78bf4056adeb185c/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=03ddaf352f00f840e6bd416a78bf4056adeb185c", "patch": "@@ -98,7 +98,6 @@ static int xascii_table[256];\n static gfc_expr *\n range_check (gfc_expr * result, const char *name)\n {\n-\n   if (gfc_range_check (result) == ARITH_OK)\n     return result;\n \n@@ -386,7 +385,6 @@ gfc_simplify_dint (gfc_expr * e)\n   gfc_free_expr (rtrunc);\n \n   return range_check (result, \"DINT\");\n-\n }\n \n \n@@ -951,7 +949,7 @@ gfc_simplify_exp (gfc_expr * x)\n gfc_expr *\n gfc_simplify_exponent (gfc_expr * x)\n {\n-  mpfr_t i2, absv, ln2, lnx, zero;\n+  mpfr_t tmp;\n   gfc_expr *result;\n \n   if (x->expr_type != EXPR_CONSTANT)\n@@ -961,38 +959,21 @@ gfc_simplify_exponent (gfc_expr * x)\n \t\t\t\t&x->where);\n \n   gfc_set_model (x->value.real);\n-  mpfr_init (zero);\n-  mpfr_set_ui (zero, 0, GFC_RND_MODE);\n \n-  if (mpfr_cmp (x->value.real, zero) == 0)\n+  if (mpfr_sgn (x->value.real) == 0)\n     {\n       mpz_set_ui (result->value.integer, 0);\n-      mpfr_clear (zero);\n       return result;\n     }\n \n-  mpfr_init (i2);\n-  mpfr_init (absv);\n-  mpfr_init (ln2);\n-  mpfr_init (lnx);\n+  mpfr_init (tmp);\n \n-  mpfr_set_ui (i2, 2, GFC_RND_MODE);\n+  mpfr_abs (tmp, x->value.real, GFC_RND_MODE);\n+  mpfr_log2 (tmp, tmp, GFC_RND_MODE);\n \n-  mpfr_log (ln2, i2, GFC_RND_MODE); \n-  mpfr_abs (absv, x->value.real, GFC_RND_MODE);\n-  mpfr_log (lnx, absv, GFC_RND_MODE); \n+  gfc_mpfr_to_mpz (result->value.integer, tmp);\n \n-  mpfr_div (lnx, lnx, ln2, GFC_RND_MODE);\n-  mpfr_trunc (lnx, lnx);\n-  mpfr_add_ui (lnx, lnx, 1, GFC_RND_MODE);\n-\n-  gfc_mpfr_to_mpz (result->value.integer, lnx);\n-\n-  mpfr_clear (i2);\n-  mpfr_clear (ln2);\n-  mpfr_clear (lnx);\n-  mpfr_clear (absv);\n-  mpfr_clear (zero);\n+  mpfr_clear (tmp);\n \n   return range_check (result, \"EXPONENT\");\n }\n@@ -1043,52 +1024,38 @@ gfc_expr *\n gfc_simplify_fraction (gfc_expr * x)\n {\n   gfc_expr *result;\n-  mpfr_t i2, absv, ln2, lnx, pow2, zero;\n-  unsigned long exp2;\n+  mpfr_t absv, exp, pow2;\n \n   if (x->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n   result = gfc_constant_result (BT_REAL, x->ts.kind, &x->where);\n \n   gfc_set_model_kind (x->ts.kind);\n-  mpfr_init (zero);\n-  mpfr_set_ui (zero, 0, GFC_RND_MODE);\n \n-  if (mpfr_cmp (x->value.real, zero) == 0)\n+  if (mpfr_sgn (x->value.real) == 0)\n     {\n-      mpfr_set (result->value.real, zero, GFC_RND_MODE);\n-      mpfr_clear (zero);\n+      mpfr_set_ui (result->value.real, 0, GFC_RND_MODE);\n       return result;\n     }\n \n-  mpfr_init (i2);\n+  mpfr_init (exp);\n   mpfr_init (absv);\n-  mpfr_init (ln2);\n-  mpfr_init (lnx);\n   mpfr_init (pow2);\n \n-  mpfr_set_ui (i2, 2, GFC_RND_MODE);\n-\n-  mpfr_log (ln2, i2, GFC_RND_MODE);\n   mpfr_abs (absv, x->value.real, GFC_RND_MODE);\n-  mpfr_log (lnx, absv, GFC_RND_MODE);\n+  mpfr_log2 (exp, absv, GFC_RND_MODE);\n \n-  mpfr_div (lnx, lnx, ln2, GFC_RND_MODE);\n-  mpfr_trunc (lnx, lnx);\n-  mpfr_add_ui (lnx, lnx, 1, GFC_RND_MODE);\n+  mpfr_trunc (exp, exp);\n+  mpfr_add_ui (exp, exp, 1, GFC_RND_MODE);\n \n-  exp2 = (unsigned long) mpfr_get_d (lnx, GFC_RND_MODE);\n-  mpfr_pow_ui (pow2, i2, exp2, GFC_RND_MODE);\n+  mpfr_ui_pow (pow2, 2, exp, GFC_RND_MODE);\n \n   mpfr_div (result->value.real, absv, pow2, GFC_RND_MODE);\n \n-  mpfr_clear (i2);\n-  mpfr_clear (ln2);\n+  mpfr_clear (exp);\n   mpfr_clear (absv);\n-  mpfr_clear (lnx);\n   mpfr_clear (pow2);\n-  mpfr_clear (zero);\n \n   return range_check (result, \"FRACTION\");\n }\n@@ -1765,7 +1732,7 @@ gfc_simplify_bound (gfc_expr * array, gfc_expr * dim, int upper)\n   int i;\n \n   if (array->expr_type != EXPR_VARIABLE)\n-      return NULL;\n+    return NULL;\n \n   if (dim == NULL)\n     return NULL;\n@@ -1896,42 +1863,37 @@ gfc_expr *\n gfc_simplify_log (gfc_expr * x)\n {\n   gfc_expr *result;\n-  mpfr_t xr, xi, zero;\n+  mpfr_t xr, xi;\n \n   if (x->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n   result = gfc_constant_result (x->ts.type, x->ts.kind, &x->where);\n \n   gfc_set_model_kind (x->ts.kind);\n-  mpfr_init (zero);\n-  mpfr_set_ui (zero, 0, GFC_RND_MODE);\n \n   switch (x->ts.type)\n     {\n     case BT_REAL:\n-      if (mpfr_cmp (x->value.real, zero) <= 0)\n+      if (mpfr_sgn (x->value.real) <= 0)\n \t{\n \t  gfc_error\n \t    (\"Argument of LOG at %L cannot be less than or equal to zero\",\n \t     &x->where);\n \t  gfc_free_expr (result);\n-          mpfr_clear (zero);\n \t  return &gfc_bad_expr;\n \t}\n \n       mpfr_log(result->value.real, x->value.real, GFC_RND_MODE);\n-      mpfr_clear (zero);\n       break;\n \n     case BT_COMPLEX:\n-      if ((mpfr_cmp (x->value.complex.r, zero) == 0)\n-\t  && (mpfr_cmp (x->value.complex.i, zero) == 0))\n+      if ((mpfr_sgn (x->value.complex.r) == 0)\n+\t  && (mpfr_sgn (x->value.complex.i) == 0))\n \t{\n \t  gfc_error (\"Complex argument of LOG at %L cannot be zero\",\n \t\t     &x->where);\n \t  gfc_free_expr (result);\n-          mpfr_clear (zero);\n \t  return &gfc_bad_expr;\n \t}\n \n@@ -1949,7 +1911,6 @@ gfc_simplify_log (gfc_expr * x)\n \n       mpfr_clear (xr);\n       mpfr_clear (xi);\n-      mpfr_clear (zero);\n \n       break;\n \n@@ -1965,28 +1926,23 @@ gfc_expr *\n gfc_simplify_log10 (gfc_expr * x)\n {\n   gfc_expr *result;\n-  mpfr_t zero;\n \n   if (x->expr_type != EXPR_CONSTANT)\n     return NULL;\n \n   gfc_set_model_kind (x->ts.kind);\n-  mpfr_init (zero);\n-  mpfr_set_ui (zero, 0, GFC_RND_MODE);\n \n-  if (mpfr_cmp (x->value.real, zero) <= 0)\n+  if (mpfr_sgn (x->value.real) <= 0)\n     {\n       gfc_error\n \t(\"Argument of LOG10 at %L cannot be less than or equal to zero\",\n \t &x->where);\n-      mpfr_clear (zero);\n       return &gfc_bad_expr;\n     }\n \n   result = gfc_constant_result (x->ts.type, x->ts.kind, &x->where);\n \n   mpfr_log10 (result->value.real, x->value.real, GFC_RND_MODE);\n-  mpfr_clear (zero);\n \n   return range_check (result, \"LOG10\");\n }\n@@ -2096,15 +2052,13 @@ simplify_min_max (gfc_expr * expr, int sign)\n gfc_expr *\n gfc_simplify_min (gfc_expr * e)\n {\n-\n   return simplify_min_max (e, -1);\n }\n \n \n gfc_expr *\n gfc_simplify_max (gfc_expr * e)\n {\n-\n   return simplify_min_max (e, 1);\n }\n \n@@ -2331,7 +2285,6 @@ gfc_simplify_nearest (gfc_expr * x, gfc_expr * s)\n     }\n \n   return range_check (result, \"NEAREST\");\n-\n }\n \n \n@@ -2386,15 +2339,13 @@ simplify_nint (const char *name, gfc_expr * e, gfc_expr * k)\n gfc_expr *\n gfc_simplify_nint (gfc_expr * e, gfc_expr * k)\n {\n-\n   return simplify_nint (\"NINT\", e, k);\n }\n \n \n gfc_expr *\n gfc_simplify_idnint (gfc_expr * e)\n {\n-\n   return simplify_nint (\"IDNINT\", e, NULL);\n }\n \n@@ -2840,8 +2791,7 @@ gfc_expr *\n gfc_simplify_rrspacing (gfc_expr * x)\n {\n   gfc_expr *result;\n-  mpfr_t i2, absv, ln2, lnx, frac, pow2, zero;\n-  unsigned long exp2;\n+  mpfr_t absv, log2, exp, frac, pow2;\n   int i, p;\n \n   if (x->expr_type != EXPR_CONSTANT)\n@@ -2854,47 +2804,33 @@ gfc_simplify_rrspacing (gfc_expr * x)\n   p = gfc_real_kinds[i].digits;\n \n   gfc_set_model_kind (x->ts.kind);\n-  mpfr_init (zero);\n-  mpfr_set_ui (zero, 0, GFC_RND_MODE);\n \n-  if (mpfr_cmp (x->value.real, zero) == 0)\n+  if (mpfr_sgn (x->value.real) == 0)\n     {\n       mpfr_ui_div (result->value.real, 1, gfc_real_kinds[i].tiny, GFC_RND_MODE);\n-      mpfr_clear (zero);\n       return result;\n     }\n \n-  mpfr_init (i2);\n-  mpfr_init (ln2);\n+  mpfr_init (log2);\n   mpfr_init (absv);\n-  mpfr_init (lnx);\n   mpfr_init (frac);\n   mpfr_init (pow2);\n \n-  mpfr_set_ui (i2, 2, GFC_RND_MODE);\n-\n-  mpfr_log (ln2, i2, GFC_RND_MODE);\n   mpfr_abs (absv, x->value.real, GFC_RND_MODE);\n-  mpfr_log (lnx, absv, GFC_RND_MODE);\n+  mpfr_log2 (log2, absv, GFC_RND_MODE);\n \n-  mpfr_div (lnx, lnx, ln2, GFC_RND_MODE);\n-  mpfr_trunc (lnx, lnx);\n-  mpfr_add_ui (lnx, lnx, 1, GFC_RND_MODE);\n+  mpfr_trunc (log2, log2);\n+  mpfr_add_ui (exp, log2, 1, GFC_RND_MODE);\n \n-  exp2 = (unsigned long) mpfr_get_d (lnx, GFC_RND_MODE);\n-  mpfr_pow_ui (pow2, i2, exp2, GFC_RND_MODE);\n+  mpfr_ui_pow (pow2, 2, exp, GFC_RND_MODE);\n   mpfr_div (frac, absv, pow2, GFC_RND_MODE);\n \n-  exp2 = (unsigned long) p;\n-  mpfr_mul_2exp (result->value.real, frac, exp2, GFC_RND_MODE);\n+  mpfr_mul_2exp (result->value.real, frac, (unsigned long)p, GFC_RND_MODE);\n \n-  mpfr_clear (i2);\n-  mpfr_clear (ln2);\n+  mpfr_clear (log2);\n   mpfr_clear (absv);\n-  mpfr_clear (lnx);\n   mpfr_clear (frac);\n   mpfr_clear (pow2);\n-  mpfr_clear (zero);\n \n   return range_check (result, \"RRSPACING\");\n }\n@@ -3103,7 +3039,7 @@ gfc_expr *\n gfc_simplify_set_exponent (gfc_expr * x, gfc_expr * i)\n {\n   gfc_expr *result;\n-  mpfr_t i2, ln2, absv, lnx, pow2, frac, zero;\n+  mpfr_t exp, absv, log2, pow2, frac;\n   unsigned long exp2;\n \n   if (x->expr_type != EXPR_CONSTANT || i->expr_type != EXPR_CONSTANT)\n@@ -3112,50 +3048,38 @@ gfc_simplify_set_exponent (gfc_expr * x, gfc_expr * i)\n   result = gfc_constant_result (BT_REAL, x->ts.kind, &x->where);\n \n   gfc_set_model_kind (x->ts.kind);\n-  mpfr_init (zero);\n-  mpfr_set_ui (zero, 0, GFC_RND_MODE);\n \n-  if (mpfr_cmp (x->value.real, zero) == 0)\n+  if (mpfr_sgn (x->value.real) == 0)\n     {\n-      mpfr_set (result->value.real, zero, GFC_RND_MODE);\n-      mpfr_clear (zero);\n+      mpfr_set_ui (result->value.real, 0, GFC_RND_MODE);\n       return result;\n     }\n \n-  mpfr_init (i2);\n-  mpfr_init (ln2);\n   mpfr_init (absv);\n-  mpfr_init (lnx);\n+  mpfr_init (log2);\n+  mpfr_init (exp);\n   mpfr_init (pow2);\n   mpfr_init (frac);\n \n-  mpfr_set_ui (i2, 2, GFC_RND_MODE);\n-  mpfr_log (ln2, i2, GFC_RND_MODE);\n-\n   mpfr_abs (absv, x->value.real, GFC_RND_MODE);\n-  mpfr_log (lnx, absv, GFC_RND_MODE);\n+  mpfr_log2 (log2, absv, GFC_RND_MODE);\n \n-  mpfr_div (lnx, lnx, ln2, GFC_RND_MODE);\n-  mpfr_trunc (lnx, lnx);\n-  mpfr_add_ui (lnx, lnx, 1, GFC_RND_MODE);\n+  mpfr_trunc (log2, log2);\n+  mpfr_add_ui (exp, log2, 1, GFC_RND_MODE);\n \n   /* Old exponent value, and fraction.  */\n-  exp2 = (unsigned long) mpfr_get_d (lnx, GFC_RND_MODE);\n-  mpfr_pow_ui (pow2, i2, exp2, GFC_RND_MODE);\n+  mpfr_ui_pow (pow2, 2, exp, GFC_RND_MODE);\n \n   mpfr_div (frac, absv, pow2, GFC_RND_MODE);\n \n   /* New exponent.  */\n   exp2 = (unsigned long) mpz_get_d (i->value.integer);\n   mpfr_mul_2exp (result->value.real, frac, exp2, GFC_RND_MODE);\n \n-  mpfr_clear (i2);\n-  mpfr_clear (ln2);\n   mpfr_clear (absv);\n-  mpfr_clear (lnx);\n+  mpfr_clear (log2);\n   mpfr_clear (pow2);\n   mpfr_clear (frac);\n-  mpfr_clear (zero);\n \n   return range_check (result, \"SET_EXPONENT\");\n }\n@@ -3359,9 +3283,8 @@ gfc_expr *\n gfc_simplify_spacing (gfc_expr * x)\n {\n   gfc_expr *result;\n-  mpfr_t i1, i2, ln2, absv, lnx, zero;\n+  mpfr_t absv, log2;\n   long diff;\n-  unsigned long exp2;\n   int i, p;\n \n   if (x->expr_type != EXPR_CONSTANT)\n@@ -3374,52 +3297,32 @@ gfc_simplify_spacing (gfc_expr * x)\n   result = gfc_constant_result (BT_REAL, x->ts.kind, &x->where);\n \n   gfc_set_model_kind (x->ts.kind);\n-  mpfr_init (zero);\n-  mpfr_set_ui (zero, 0, GFC_RND_MODE);\n \n-  if (mpfr_cmp (x->value.real, zero) == 0)\n+  if (mpfr_sgn (x->value.real) == 0)\n     {\n       mpfr_set (result->value.real, gfc_real_kinds[i].tiny, GFC_RND_MODE);\n-      mpfr_clear (zero);\n       return result;\n     }\n \n-  mpfr_init (i1);\n-  mpfr_init (i2);\n-  mpfr_init (ln2);\n+  mpfr_init (log2);\n   mpfr_init (absv);\n-  mpfr_init (lnx);\n \n-  mpfr_set_ui (i1, 1, GFC_RND_MODE);\n-  mpfr_set_ui (i2, 2, GFC_RND_MODE);\n-\n-  mpfr_log (ln2, i2, GFC_RND_MODE);\n   mpfr_abs (absv, x->value.real, GFC_RND_MODE);\n-  mpfr_log (lnx, absv, GFC_RND_MODE);\n+  mpfr_log2 (log2, absv, GFC_RND_MODE);\n+  mpfr_trunc (log2, log2);\n \n-  mpfr_div (lnx, lnx, ln2, GFC_RND_MODE);\n-  mpfr_trunc (lnx, lnx);\n-  mpfr_add_ui (lnx, lnx, 1, GFC_RND_MODE);\n+  mpfr_add_ui (log2, log2, 1, GFC_RND_MODE);\n \n-  diff = (long) mpfr_get_d (lnx, GFC_RND_MODE) - (long) p;\n-  if (diff >= 0)\n-    {\n-      exp2 = (unsigned) diff;\n-      mpfr_mul_2exp (result->value.real, i1, exp2, GFC_RND_MODE);\n-    }\n-  else\n-    {\n-      diff = -diff;\n-      exp2 = (unsigned) diff;\n-      mpfr_div_2exp (result->value.real, i1, exp2, GFC_RND_MODE);\n-    }\n+  /* FIXME: We should be using mpfr_get_si here, but this function is\n+     not available with the version of mpfr distributed with gmp (as of\n+     2004-09-17). Replace once mpfr has been imported into the gcc cvs\n+     tree.  */\n+  diff = (long)mpfr_get_d (log2, GFC_RND_MODE) - (long)p;\n+  mpfr_set_ui (result->value.real, 1, GFC_RND_MODE);\n+  mpfr_mul_2si (result->value.real, result->value.real, diff, GFC_RND_MODE);\n \n-  mpfr_clear (i1);\n-  mpfr_clear (i2);\n-  mpfr_clear (ln2);\n+  mpfr_clear (log2);\n   mpfr_clear (absv);\n-  mpfr_clear (lnx);\n-  mpfr_clear (zero);\n \n   if (mpfr_cmp (result->value.real, gfc_real_kinds[i].tiny) < 0)\n     mpfr_set (result->value.real, gfc_real_kinds[i].tiny, GFC_RND_MODE);"}]}