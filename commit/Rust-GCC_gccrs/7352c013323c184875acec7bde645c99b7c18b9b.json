{"sha": "7352c013323c184875acec7bde645c99b7c18b9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM1MmMwMTMzMjNjMTg0ODc1YWNlYzdiZGU2NDVjOTliN2MxOGI5Yg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-01-14T15:02:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-01-14T15:02:20Z"}, "message": "re PR tree-optimization/47179 (SPU: errno misoptimization around malloc call)\n\n2011-01-14  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/47179\n\t* target.def (ref_may_alias_errno): New target hook.\n\t* targhooks.h (default_ref_may_alias_errno): Declare.\n\t* targhooks.c: Include tree-ssa-alias.h and tree-flow.h.\n\t(default_ref_may_alias_errno): New function.\n\t* target.h (struct ao_ref_s): Declare.\n\t* tree-ssa-alias.c: Include target.h.\n\t(call_may_clobber_ref_p_1): Use the ref_may_alias_errno target hook.\n\t* Makefile.in (tree-ssa-alias.o): Adjust dependencies.\n\t(targhooks.o): Likewise.\n\t* doc/tm.texi.in (TARGET_REF_MAY_ALIAS_ERRNO): Document.\n\t* doc/tm.texi (TARGET_REF_MAY_ALIAS_ERRNO): Copy documentation.\n\nFrom-SVN: r168788", "tree": {"sha": "e8806b70dd48d5f2e48f1df1922bb15787ffe2ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8806b70dd48d5f2e48f1df1922bb15787ffe2ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7352c013323c184875acec7bde645c99b7c18b9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7352c013323c184875acec7bde645c99b7c18b9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7352c013323c184875acec7bde645c99b7c18b9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7352c013323c184875acec7bde645c99b7c18b9b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9a6c928887f6ae52f45a74f4aa54dd946c9c97d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a6c928887f6ae52f45a74f4aa54dd946c9c97d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a6c928887f6ae52f45a74f4aa54dd946c9c97d7"}], "stats": {"total": 91, "additions": 72, "deletions": 19}, "files": [{"sha": "9a6f58bfae2468af1cbad5789a85dcbf4bc019e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7352c013323c184875acec7bde645c99b7c18b9b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7352c013323c184875acec7bde645c99b7c18b9b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7352c013323c184875acec7bde645c99b7c18b9b", "patch": "@@ -1,3 +1,18 @@\n+2011-01-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/47179\n+\t* target.def (ref_may_alias_errno): New target hook.\n+\t* targhooks.h (default_ref_may_alias_errno): Declare.\n+\t* targhooks.c: Include tree-ssa-alias.h and tree-flow.h.\n+\t(default_ref_may_alias_errno): New function.\n+\t* target.h (struct ao_ref_s): Declare.\n+\t* tree-ssa-alias.c: Include target.h.\n+\t(call_may_clobber_ref_p_1): Use the ref_may_alias_errno target hook.\n+\t* Makefile.in (tree-ssa-alias.o): Adjust dependencies.\n+\t(targhooks.o): Likewise.\n+\t* doc/tm.texi.in (TARGET_REF_MAY_ALIAS_ERRNO): Document.\n+\t* doc/tm.texi (TARGET_REF_MAY_ALIAS_ERRNO): Copy documentation.\n+\n 2011-01-14  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-structalias.c  (new_var_info): Use DECL_HARD_REGISTER."}, {"sha": "188f8d55bb8614f4e71e31d145cf013a051f7544", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7352c013323c184875acec7bde645c99b7c18b9b/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7352c013323c184875acec7bde645c99b7c18b9b/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7352c013323c184875acec7bde645c99b7c18b9b", "patch": "@@ -2614,7 +2614,7 @@ tree-ssa-alias.o : tree-ssa-alias.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(TREE_H) $(TM_P_H) $(EXPR_H) $(GGC_H) $(TREE_INLINE_H) $(FLAGS_H) \\\n    $(FUNCTION_H) $(TIMEVAR_H) convert.h $(TM_H) coretypes.h langhooks.h \\\n    $(TREE_DUMP_H) $(TREE_PASS_H) $(PARAMS_H) $(BASIC_BLOCK_H) $(DIAGNOSTIC_H) \\\n-   $(GIMPLE_H) $(VEC_H) \\\n+   $(GIMPLE_H) $(VEC_H) $(TARGET_H) \\\n    $(IPA_TYPE_ESCAPE_H) vecprim.h pointer-set.h alloc-pool.h \\\n    tree-pretty-print.h\n tree-ssa-reassoc.o : tree-ssa-reassoc.c $(TREE_FLOW_H) $(CONFIG_H) \\\n@@ -2796,7 +2796,8 @@ opts-common.o : opts-common.c $(OPTS_H) $(FLAGS_H) $(CONFIG_H) $(SYSTEM_H) \\\n targhooks.o : targhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TREE_H) \\\n    $(EXPR_H) $(TM_H) $(RTL_H) $(TM_P_H) $(FUNCTION_H) output.h $(DIAGNOSTIC_CORE_H) \\\n    $(MACHMODE_H) $(TARGET_DEF_H) $(TARGET_H) $(GGC_H) gt-targhooks.h \\\n-   $(OPTABS_H) $(RECOG_H) reload.h hard-reg-set.h intl.h $(OPTS_H)\n+   $(OPTABS_H) $(RECOG_H) reload.h hard-reg-set.h intl.h $(OPTS_H) \\\n+   tree-ssa-alias.h $(TREE_FLOW_H)\n \n bversion.h: s-bversion; @true\n s-bversion: BASE-VER"}, {"sha": "010e77bdb82de81bc638c2275bb778ce3a7742c4", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7352c013323c184875acec7bde645c99b7c18b9b/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7352c013323c184875acec7bde645c99b7c18b9b/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=7352c013323c184875acec7bde645c99b7c18b9b", "patch": "@@ -4295,6 +4295,10 @@ with machine mode @var{mode}.  The default version of this\n hook returns true for both @code{ptr_mode} and @code{Pmode}.\n @end deftypefn\n \n+@deftypefn {Target Hook} bool TARGET_REF_MAY_ALIAS_ERRNO (struct ao_ref_s *@var{ref})\n+Define this to return nonzero if the memory reference @var{ref}  may alias with the system C library errno location.  The default  version of this hook assumes the system C library errno location  is either a declaration of type int or accessed by dereferencing  a pointer to int.\n+@end deftypefn\n+\n @deftypefn {Target Hook} bool TARGET_SCALAR_MODE_SUPPORTED_P (enum machine_mode @var{mode})\n Define this to return nonzero if the port is prepared to handle\n insns involving scalar mode @var{mode}.  For a scalar mode to be"}, {"sha": "3298c3d6493ebb771f4e774067f1425fc037f2db", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7352c013323c184875acec7bde645c99b7c18b9b/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7352c013323c184875acec7bde645c99b7c18b9b/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=7352c013323c184875acec7bde645c99b7c18b9b", "patch": "@@ -4283,6 +4283,8 @@ with machine mode @var{mode}.  The default version of this\n hook returns true for both @code{ptr_mode} and @code{Pmode}.\n @end deftypefn\n \n+@hook TARGET_REF_MAY_ALIAS_ERRNO\n+\n @hook TARGET_SCALAR_MODE_SUPPORTED_P\n Define this to return nonzero if the port is prepared to handle\n insns involving scalar mode @var{mode}.  For a scalar mode to be"}, {"sha": "bdd76621a6bb37f4322c7e3d68ab6bee06ff9604", "filename": "gcc/target.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7352c013323c184875acec7bde645c99b7c18b9b/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7352c013323c184875acec7bde645c99b7c18b9b/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=7352c013323c184875acec7bde645c99b7c18b9b", "patch": "@@ -1519,6 +1519,17 @@ DEFHOOK\n  bool, (enum machine_mode mode),\n  default_valid_pointer_mode)\n \n+/* Disambiguate with errno.  */\n+DEFHOOK\n+(ref_may_alias_errno,\n+ \"Define this to return nonzero if the memory reference @var{ref}\\\n+  may alias with the system C library errno location.  The default\\\n+  version of this hook assumes the system C library errno location\\\n+  is either a declaration of type int or accessed by dereferencing\\\n+  a pointer to int.\",\n+ bool, (struct ao_ref_s *ref),\n+ default_ref_may_alias_errno)\n+\n /* Support for named address spaces.  */\n #undef HOOK_PREFIX\n #define HOOK_PREFIX \"TARGET_ADDR_SPACE_\""}, {"sha": "eaf7aadd707a682e3dd9f6b4827f24bc452757f6", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7352c013323c184875acec7bde645c99b7c18b9b/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7352c013323c184875acec7bde645c99b7c18b9b/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=7352c013323c184875acec7bde645c99b7c18b9b", "patch": "@@ -100,6 +100,9 @@ struct ddg;\n /* This is defined in cfgloop.h .  */\n struct loop;\n \n+/* This is defined in tree-ssa-alias.h.  */\n+struct ao_ref_s;\n+\n /* Assembler instructions for creating various kinds of integer object.  */\n \n struct asm_int_op"}, {"sha": "225831b9515693775b866fbbd659364cf1872f30", "filename": "gcc/targhooks.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7352c013323c184875acec7bde645c99b7c18b9b/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7352c013323c184875acec7bde645c99b7c18b9b/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=7352c013323c184875acec7bde645c99b7c18b9b", "patch": "@@ -69,6 +69,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"recog.h\"\n #include \"intl.h\"\n #include \"opts.h\"\n+#include \"tree-flow.h\"\n+#include \"tree-ssa-alias.h\"\n \n \n bool\n@@ -1035,6 +1037,33 @@ default_valid_pointer_mode (enum machine_mode mode)\n   return (mode == ptr_mode || mode == Pmode);\n }\n \n+/* Determine whether the memory reference specified by REF may alias\n+   the C libraries errno location.  */\n+bool\n+default_ref_may_alias_errno (ao_ref *ref)\n+{\n+  tree base = ao_ref_base (ref);\n+  /* The default implementation assumes the errno location is\n+     a declaration of type int or is always accessed via a\n+     pointer to int.  We assume that accesses to errno are\n+     not deliberately obfuscated (even in conforming ways).  */\n+  if (TYPE_UNSIGNED (TREE_TYPE (base))\n+      || TYPE_MODE (TREE_TYPE (base)) != TYPE_MODE (integer_type_node))\n+    return false;\n+  /* The default implementation assumes an errno location\n+     declaration is never defined in the current compilation unit.  */\n+  if (DECL_P (base)\n+      && !TREE_STATIC (base))\n+    return true;\n+  else if (TREE_CODE (base) == MEM_REF\n+\t   && TREE_CODE (TREE_OPERAND (base, 0)) == SSA_NAME)\n+    {\n+      struct ptr_info_def *pi = SSA_NAME_PTR_INFO (TREE_OPERAND (base, 0));\n+      return !pi || pi->pt.anything || pi->pt.nonlocal;\n+    }\n+  return false;\n+}\n+\n /* Return the mode for a pointer to a given ADDRSPACE, defaulting to ptr_mode\n    for the generic address space only.  */\n "}, {"sha": "a8dbb11e716e2dcafaf8ec8ae49221ac41f809d9", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7352c013323c184875acec7bde645c99b7c18b9b/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7352c013323c184875acec7bde645c99b7c18b9b/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=7352c013323c184875acec7bde645c99b7c18b9b", "patch": "@@ -143,6 +143,7 @@ extern bool default_target_option_valid_attribute_p (tree, tree, tree, int);\n extern bool default_target_option_pragma_parse (tree, tree);\n extern bool default_target_can_inline_p (tree, tree);\n extern bool default_valid_pointer_mode (enum machine_mode);\n+extern bool default_ref_may_alias_errno (struct ao_ref_s *);\n extern enum machine_mode default_addr_space_pointer_mode (addr_space_t);\n extern enum machine_mode default_addr_space_address_mode (addr_space_t);\n extern bool default_addr_space_valid_pointer_mode (enum machine_mode,"}, {"sha": "3f6fec1574a764f9b692ffdf5b9aed6062142f56", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7352c013323c184875acec7bde645c99b7c18b9b/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7352c013323c184875acec7bde645c99b7c18b9b/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=7352c013323c184875acec7bde645c99b7c18b9b", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n #include \"basic-block.h\"\n #include \"timevar.h\"\n #include \"ggc.h\"\n@@ -1417,24 +1418,10 @@ call_may_clobber_ref_p_1 (gimple call, ao_ref *ref)\n \t   being the definition point for the pointer.  */\n \tcase BUILT_IN_MALLOC:\n \tcase BUILT_IN_CALLOC:\n-\t  /* Unix98 specifies that errno is set on allocation failure.\n-\t     Until we properly can track the errno location assume it\n-\t     is not a local decl but external or anonymous storage in\n-\t     a different translation unit.  Also assume it is of\n-\t     type int as required by the standard.  */\n+\t  /* Unix98 specifies that errno is set on allocation failure.  */\n \t  if (flag_errno_math\n-\t      && TREE_TYPE (base) == integer_type_node)\n-\t    {\n-\t      struct ptr_info_def *pi;\n-\t      if (DECL_P (base)\n-\t\t  && !TREE_STATIC (base))\n-\t\treturn true;\n-\t      else if ((INDIRECT_REF_P (base)\n-\t\t\t|| TREE_CODE (base) == MEM_REF)\n-\t\t       && TREE_CODE (TREE_OPERAND (base, 0)) == SSA_NAME\n-\t\t       && (pi = SSA_NAME_PTR_INFO (TREE_OPERAND (base, 0))))\n-\t\treturn pi->pt.anything || pi->pt.nonlocal;\n-\t    }\n+\t      && targetm.ref_may_alias_errno (ref))\n+\t    return true;\n \t  return false;\n \t/* Freeing memory kills the pointed-to memory.  More importantly\n \t   the call has to serve as a barrier for moving loads and stores"}]}