{"sha": "e29a8a4172ae5c4f85d0e21d7edfaf934744c9fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI5YThhNDE3MmFlNWM0Zjg1ZDBlMjFkN2VkZmFmOTM0NzQ0YzlmYg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-17T13:15:31Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-17T14:46:42Z"}, "message": "Cleanup error handling for CallExpr\n\nCall Expressions need to type check the argument passing but the type\nsystem will return TyTy::Error nodes, it used to return nullptr about a\nyear ago. Returning error nodes are safer and more flexible for detailed\nerror handling and diagnostics.\n\nAddresses: #539", "tree": {"sha": "98f1af69c6ba1c718ab680751a2129eeaadbbab0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98f1af69c6ba1c718ab680751a2129eeaadbbab0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e29a8a4172ae5c4f85d0e21d7edfaf934744c9fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29a8a4172ae5c4f85d0e21d7edfaf934744c9fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e29a8a4172ae5c4f85d0e21d7edfaf934744c9fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29a8a4172ae5c4f85d0e21d7edfaf934744c9fb/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecb777cc8df55a024add203e858486eadcc3aa62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecb777cc8df55a024add203e858486eadcc3aa62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecb777cc8df55a024add203e858486eadcc3aa62"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "dd339757405e6e5579b076c27605f7de3576dc2b", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29a8a4172ae5c4f85d0e21d7edfaf934744c9fb/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29a8a4172ae5c4f85d0e21d7edfaf934744c9fb/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=e29a8a4172ae5c4f85d0e21d7edfaf934744c9fb", "patch": "@@ -2352,14 +2352,14 @@ TypeCheckCallExpr::visit (ADTType &type)\n     BaseType *field_tyty = field->get_field_type ();\n \n     BaseType *arg = Resolver::TypeCheckExpr::Resolve (p, false);\n-    if (arg == nullptr)\n+    if (arg->get_kind () == TyTy::TypeKind::ERROR)\n       {\n \trust_error_at (p->get_locus (), \"failed to resolve argument type\");\n \treturn false;\n       }\n \n     auto res = field_tyty->unify (arg);\n-    if (res == nullptr)\n+    if (res->get_kind () == TyTy::TypeKind::ERROR)\n       {\n \treturn false;\n       }\n@@ -2407,7 +2407,7 @@ TypeCheckCallExpr::visit (FnType &type)\n   size_t i = 0;\n   call.iterate_params ([&] (HIR::Expr *param) mutable -> bool {\n     auto argument_expr_tyty = Resolver::TypeCheckExpr::Resolve (param, false);\n-    if (argument_expr_tyty == nullptr)\n+    if (argument_expr_tyty->get_kind () == TyTy::TypeKind::ERROR)\n       {\n \trust_error_at (param->get_locus (),\n \t\t       \"failed to resolve type for argument expr in CallExpr\");\n@@ -2421,7 +2421,7 @@ TypeCheckCallExpr::visit (FnType &type)\n       {\n \tauto fnparam = type.param_at (i);\n \tresolved_argument_type = fnparam.second->unify (argument_expr_tyty);\n-\tif (resolved_argument_type == nullptr)\n+\tif (argument_expr_tyty->get_kind () == TyTy::TypeKind::ERROR)\n \t  {\n \t    rust_error_at (param->get_locus (),\n \t\t\t   \"Type Resolution failure on parameter\");\n@@ -2472,15 +2472,15 @@ TypeCheckCallExpr::visit (FnPtr &type)\n   call.iterate_params ([&] (HIR::Expr *param) mutable -> bool {\n     auto fnparam = type.param_at (i);\n     auto argument_expr_tyty = Resolver::TypeCheckExpr::Resolve (param, false);\n-    if (argument_expr_tyty == nullptr)\n+    if (argument_expr_tyty->get_kind () == TyTy::TypeKind::ERROR)\n       {\n \trust_error_at (param->get_locus (),\n \t\t       \"failed to resolve type for argument expr in CallExpr\");\n \treturn false;\n       }\n \n     auto resolved_argument_type = fnparam->unify (argument_expr_tyty);\n-    if (resolved_argument_type == nullptr)\n+    if (argument_expr_tyty->get_kind () == TyTy::TypeKind::ERROR)\n       {\n \trust_error_at (param->get_locus (),\n \t\t       \"Type Resolution failure on parameter\");\n@@ -2523,15 +2523,15 @@ TypeCheckMethodCallExpr::visit (FnType &type)\n   call.iterate_params ([&] (HIR::Expr *param) mutable -> bool {\n     auto fnparam = type.param_at (i);\n     auto argument_expr_tyty = Resolver::TypeCheckExpr::Resolve (param, false);\n-    if (argument_expr_tyty == nullptr)\n+    if (argument_expr_tyty->get_kind () == TyTy::TypeKind::ERROR)\n       {\n \trust_error_at (param->get_locus (),\n \t\t       \"failed to resolve type for argument expr in CallExpr\");\n \treturn false;\n       }\n \n     auto resolved_argument_type = fnparam.second->unify (argument_expr_tyty);\n-    if (resolved_argument_type == nullptr)\n+    if (argument_expr_tyty->get_kind () == TyTy::TypeKind::ERROR)\n       {\n \trust_error_at (param->get_locus (),\n \t\t       \"Type Resolution failure on parameter\");"}, {"sha": "1af72a28551d04465d9b25aa8585e66996242cce", "filename": "gcc/testsuite/rust/compile/tuple_struct3.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e29a8a4172ae5c4f85d0e21d7edfaf934744c9fb/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple_struct3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e29a8a4172ae5c4f85d0e21d7edfaf934744c9fb/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple_struct3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftuple_struct3.rs?ref=e29a8a4172ae5c4f85d0e21d7edfaf934744c9fb", "patch": "@@ -1,5 +1,9 @@\n struct Foo(i32, i32, bool);\n \n fn main() {\n-    let c = Foo(1, 2f32, true); // { dg-error \"expected .i32. got .f32.\" }\n+    let c = Foo(1, 2f32, true);\n+    // { dg-error \"expected .i32. got .f32.\" \"\" { target *-*-* } .-1 }\n+    // { dg-error \"unexpected number of arguments 1 expected 3\" \"\" { target *-*-* } .-2 }\n+    // { dg-error \"failed to lookup type to CallExpr\" \"\" { target *-*-* } .-3 }\n+    // { dg-error \"failed to type resolve expression\" \"\" { target *-*-* } .-4 }\n }"}]}