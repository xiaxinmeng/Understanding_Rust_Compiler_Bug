{"sha": "98d64f692f4119a8d93cc49cc2d63976298a47f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThkNjRmNjkyZjQxMTlhOGQ5M2NjNDljYzJkNjM5NzYyOThhNDdmOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2000-04-10T11:59:46Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-04-10T11:59:46Z"}, "message": "c-convert.c (convert): Handle REFERENCE_TYPE like POINTER_TYPE.\n\n\t* c-convert.c (convert): Handle REFERENCE_TYPE like POINTER_TYPE.\n\t* c-typeck.c (convert_for_assignment): Likewise.\n\nFrom-SVN: r33058", "tree": {"sha": "18819ebfa553bae0c1f828feced6ab14c1598f05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18819ebfa553bae0c1f828feced6ab14c1598f05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98d64f692f4119a8d93cc49cc2d63976298a47f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98d64f692f4119a8d93cc49cc2d63976298a47f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98d64f692f4119a8d93cc49cc2d63976298a47f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98d64f692f4119a8d93cc49cc2d63976298a47f8/comments", "author": null, "committer": null, "parents": [{"sha": "29105cea6a1c86b7fcaa96cb78a6d948b32564be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29105cea6a1c86b7fcaa96cb78a6d948b32564be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29105cea6a1c86b7fcaa96cb78a6d948b32564be"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "191d444340334e3c98db83a598fc63632c68f079", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98d64f692f4119a8d93cc49cc2d63976298a47f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98d64f692f4119a8d93cc49cc2d63976298a47f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98d64f692f4119a8d93cc49cc2d63976298a47f8", "patch": "@@ -1,5 +1,8 @@\n Mon Apr 10 07:21:13 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* c-convert.c (convert): Handle REFERENCE_TYPE like POINTER_TYPE.\n+\t* c-typeck.c (convert_for_assignment): Likewise.\n+\n \t* expmed.c (init_expmed): Don't free objects we make.\n \t* emit-rtl.c (gen_rtx_CONST_INT, init_emit_once): Minor cleanups.\n "}, {"sha": "8dc85509d742c5aeb13c04c6a4b3a9690b769bc6", "filename": "gcc/c-convert.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98d64f692f4119a8d93cc49cc2d63976298a47f8/gcc%2Fc-convert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98d64f692f4119a8d93cc49cc2d63976298a47f8/gcc%2Fc-convert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-convert.c?ref=98d64f692f4119a8d93cc49cc2d63976298a47f8", "patch": "@@ -88,7 +88,7 @@ convert (type, expr)\n #endif\n   if (code == INTEGER_TYPE || code == ENUMERAL_TYPE)\n     return fold (convert_to_integer (type, e));\n-  if (code == POINTER_TYPE)\n+  if (code == POINTER_TYPE || code == REFERENCE_TYPE)\n     return fold (convert_to_pointer (type, e));\n   if (code == REAL_TYPE)\n     return fold (convert_to_real (type, e));"}, {"sha": "62a3b256469b4edc2e93261435a73909dfdaa70d", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98d64f692f4119a8d93cc49cc2d63976298a47f8/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98d64f692f4119a8d93cc49cc2d63976298a47f8/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=98d64f692f4119a8d93cc49cc2d63976298a47f8", "patch": "@@ -4082,7 +4082,8 @@ convert_for_assignment (type, rhs, errtype, fundecl, funname, parmnum)\n     }\n \n   /* Conversions among pointers */\n-  else if (codel == POINTER_TYPE && coder == POINTER_TYPE)\n+  else if ((codel == POINTER_TYPE || codel == REFERENCE_TYPE)\n+\t   && (coder == POINTER_TYPE || coder == REFERENCE_TYPE))\n     {\n       register tree ttl = TREE_TYPE (type);\n       register tree ttr = TREE_TYPE (rhstype);"}]}