{"sha": "6d458cc580dacbd3e52e3203c3acdc9ffdce70ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ0NThjYzU4MGRhY2JkM2U1MmUzMjAzYzNhY2RjOWZmZGNlNzBiYQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-03-29T16:17:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-03-29T16:17:40Z"}, "message": "par-ch3.adb (P_Type_Declaration): Fix bad error recovery after missing TYPE Improve the error message generated...\n\n2005-03-29  Robert Dewar  <dewar@adacore.com>\n\n\t* par-ch3.adb (P_Type_Declaration): Fix bad error recovery after\n\tmissing TYPE Improve the error message generated when compiling a\n\tlimited interface in Ada83 or Ada95 mode.\n\nFrom-SVN: r97178", "tree": {"sha": "1dfe244a348131643907bb281728ba59f495d509", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dfe244a348131643907bb281728ba59f495d509"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d458cc580dacbd3e52e3203c3acdc9ffdce70ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d458cc580dacbd3e52e3203c3acdc9ffdce70ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d458cc580dacbd3e52e3203c3acdc9ffdce70ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d458cc580dacbd3e52e3203c3acdc9ffdce70ba/comments", "author": null, "committer": null, "parents": [{"sha": "a276fddfdbbadaa200dabbd006e308a14377f484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a276fddfdbbadaa200dabbd006e308a14377f484", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a276fddfdbbadaa200dabbd006e308a14377f484"}], "stats": {"total": 34, "additions": 31, "deletions": 3}, "files": [{"sha": "0c02ff7d0358f27c0d672f3a4f97032f8c09ede2", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d458cc580dacbd3e52e3203c3acdc9ffdce70ba/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d458cc580dacbd3e52e3203c3acdc9ffdce70ba/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=6d458cc580dacbd3e52e3203c3acdc9ffdce70ba", "patch": "@@ -279,8 +279,29 @@ package body Ch3 is\n    begin\n       Type_Loc := Token_Ptr;\n       Type_Start_Col := Start_Column;\n-      T_Type;\n-      Ident_Node := P_Defining_Identifier (C_Is);\n+\n+      --  If we have TYPE, then proceed ahead and scan identifier\n+\n+      if Token = Tok_Type then\n+         Scan; -- past TYPE\n+         Ident_Node := P_Defining_Identifier (C_Is);\n+\n+      --  Otherwise this is an error case, and we may already have converted\n+      --  the current token to a defining identifier, so don't do it again!\n+\n+      else\n+         T_Type;\n+\n+         if Token = Tok_Identifier\n+           and then Nkind (Token_Node) = N_Defining_Identifier\n+         then\n+            Ident_Node := Token_Node;\n+            Scan; -- past defining identifier\n+         else\n+            Ident_Node := P_Defining_Identifier (C_Is);\n+         end if;\n+      end if;\n+\n       Discr_Sloc := Token_Ptr;\n \n       if P_Unknown_Discriminant_Part_Opt then\n@@ -586,7 +607,14 @@ package body Ch3 is\n \n                --  Ada 2005 (AI-251): LIMITED INTERFACE\n \n-               elsif Token = Tok_Interface then\n+               --  If we are compiling in Ada 83 or Ada 95 mode, \"interface\"\n+               --  is not a reserved word but we force its analysis to\n+               --  generate the corresponding usage error.\n+\n+               elsif Token = Tok_Interface\n+                 or else (Token = Tok_Identifier\n+                           and then Chars (Token_Node) = Name_Interface)\n+               then\n                   Typedef_Node := P_Interface_Type_Definition\n                                     (Is_Synchronized => False);\n                   Abstract_Present := True;"}]}