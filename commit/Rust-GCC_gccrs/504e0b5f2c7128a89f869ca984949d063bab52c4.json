{"sha": "504e0b5f2c7128a89f869ca984949d063bab52c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA0ZTBiNWYyYzcxMjhhODlmODY5Y2E5ODQ5NDlkMDYzYmFiNTJjNA==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2017-09-25T12:26:36Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2017-09-25T12:26:36Z"}, "message": "[PR82155] Fix crash in dwarf2out_abstract_function\n\nThis patch is an attempt to fix the crash reported in PR82155.\n\nWhen generating a C++ class method for a class that is itself nested in\na class method, dwarf2out_early_global_decl currently leaves the\nexisting context DIE as it is if it already exists.  However, it is\npossible that this call happens at a point where this context DIE is\njust a declaration that is itself not located in its own context.\n\nFrom there, if dwarf2out_early_global_decl is not called on any of the\nFUNCTION_DECL in the context chain, DIEs will be left badly scoped and\nsome (such as the nested method) will be removed by the type pruning\nmachinery.  As a consequence, dwarf2out_abstract_function will will\ncrash when called on the corresponding DECL because it asserts that the\nDECL has a DIE.\n\nThis patch fixes this crash making dwarf2out_early_global_decl process\ncontext DIEs the same way we process abstract origins for FUNCTION_DECL:\nif the corresponding DIE exists but is only a declaration, call\ndwarf2out_decl anyway on it so that it is turned into a more complete\nDIE and so that it is relocated in the proper context.\n\nBootstrapped and regtested on x86_64-linux.\n\ngcc/\n\n\tPR debug/82155\n\t* dwarf2out.c (dwarf2out_early_global_decl): Call dwarf2out_decl\n\ton the FUNCTION_DECL function context if it has a DIE that is a\n\tdeclaration.\n\ngcc/testsuite/\n\n\t* g++.dg/pr82155.C: New testcase.\n\nFrom-SVN: r253147", "tree": {"sha": "1835ef494a1d2796ab0739ed02b9dfc3d0206767", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1835ef494a1d2796ab0739ed02b9dfc3d0206767"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/504e0b5f2c7128a89f869ca984949d063bab52c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/504e0b5f2c7128a89f869ca984949d063bab52c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/504e0b5f2c7128a89f869ca984949d063bab52c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/504e0b5f2c7128a89f869ca984949d063bab52c4/comments", "author": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d362ac6c6d5a9419d9b7a0db84155a065e113434", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d362ac6c6d5a9419d9b7a0db84155a065e113434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d362ac6c6d5a9419d9b7a0db84155a065e113434"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "b3dadab4357beba152c1d8d25b896fa0661b8815", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504e0b5f2c7128a89f869ca984949d063bab52c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504e0b5f2c7128a89f869ca984949d063bab52c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=504e0b5f2c7128a89f869ca984949d063bab52c4", "patch": "@@ -1,3 +1,10 @@\n+2017-09-25  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\tPR debug/82155\n+\t* dwarf2out.c (dwarf2out_early_global_decl): Call dwarf2out_decl\n+\ton the FUNCTION_DECL function context if it has a DIE that is a\n+\tdeclaration.\n+\n 2017-09-25  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82285"}, {"sha": "e97ceb61b46ed6cedcae8f424b3c05786be96b34", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504e0b5f2c7128a89f869ca984949d063bab52c4/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504e0b5f2c7128a89f869ca984949d063bab52c4/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=504e0b5f2c7128a89f869ca984949d063bab52c4", "patch": "@@ -25490,10 +25490,16 @@ dwarf2out_early_global_decl (tree decl)\n \t     so that all nested DIEs are generated at the proper scope in the\n \t     first shot.  */\n \t  tree context = decl_function_context (decl);\n-\t  if (context != NULL && lookup_decl_die (context) == NULL)\n+\t  if (context != NULL)\n \t    {\n+\t      dw_die_ref context_die = lookup_decl_die (context);\n \t      current_function_decl = context;\n-\t      dwarf2out_decl (context);\n+\n+\t      /* Avoid emitting DIEs multiple times, but still process CONTEXT\n+\t\t enough so that it lands in its own context.  This avoids type\n+\t\t pruning issues later on.  */\n+\t      if (context_die == NULL || is_declaration_die (context_die))\n+\t\tdwarf2out_decl (context);\n \t    }\n \n \t  /* Emit an abstract origin of a function first.  This happens"}, {"sha": "8cdcbc66bd4e3f98ce31b033e6d75a55f727ac68", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504e0b5f2c7128a89f869ca984949d063bab52c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504e0b5f2c7128a89f869ca984949d063bab52c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=504e0b5f2c7128a89f869ca984949d063bab52c4", "patch": "@@ -1,3 +1,7 @@\n+2017-09-25  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* g++.dg/pr82155.C: New testcase.\n+\n 2017-09-25  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/82285"}, {"sha": "75d9b615f3939d7529851d4eba593b6bb50c4af8", "filename": "gcc/testsuite/g++.dg/pr82155.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/504e0b5f2c7128a89f869ca984949d063bab52c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr82155.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/504e0b5f2c7128a89f869ca984949d063bab52c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr82155.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr82155.C?ref=504e0b5f2c7128a89f869ca984949d063bab52c4", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile { target c++11 } } */\n+/* { dg-options \"-g -O2\" } */\n+\n+template <typename a> struct b { a c; };\n+template <typename d> struct e { d *operator->(); };\n+template <typename d> class h {\n+public:\n+  typedef e<d> ag;\n+};\n+class i {\n+protected:\n+  i(int);\n+};\n+class j {\n+  virtual void k(int) = 0;\n+\n+public:\n+  int f;\n+  void l() { k(f); }\n+};\n+struct m : i {\n+  int cn;\n+  m() : i(cn) {\n+    struct n : j {\n+      n() {}\n+      void k(int) {}\n+    };\n+  }\n+};\n+struct o {\n+  o() {\n+    for (h<b<b<j *>>>::ag g;;)\n+      g->c.c->l();\n+  }\n+};\n+void fn1() { o(); }"}]}