{"sha": "c8379865b38e7dfdd18d1aa64bb95ed76c7b54f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgzNzk4NjViMzhlN2RmZGQxOGQxYWE2NGJiOTVlZDc2YzdiNTRmMA==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-10-19T09:17:06Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2012-10-19T09:17:06Z"}, "message": "cunroll-1.c: New testcase.\n\n\n\t* gcc.dg/tree-ssa/cunroll-1.c: New testcase.\n\t* gcc.dg/tree-ssa/cunroll-2.c: New testcase.\n\t* gcc.dg/tree-ssa/cunroll-3.c: New testcase.\n\t* gcc.dg/tree-ssa/cunroll-4.c: New testcase.\n\t* gcc.dg/tree-ssa/cunroll-5.c: New testcase.\n\nFrom-SVN: r192608", "tree": {"sha": "302a352ecd6a2844ce27887f23d549051161c388", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/302a352ecd6a2844ce27887f23d549051161c388"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8379865b38e7dfdd18d1aa64bb95ed76c7b54f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8379865b38e7dfdd18d1aa64bb95ed76c7b54f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8379865b38e7dfdd18d1aa64bb95ed76c7b54f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8379865b38e7dfdd18d1aa64bb95ed76c7b54f0/comments", "author": null, "committer": null, "parents": [{"sha": "b11f0116d6e5e89dca5b1bfd56ba54fda3e05bf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b11f0116d6e5e89dca5b1bfd56ba54fda3e05bf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b11f0116d6e5e89dca5b1bfd56ba54fda3e05bf7"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "c302b17a86d11b88e1e3eb86f6bcb403ca7d3d45", "filename": "gcc/testsuite/gcc.dg/tree-ssa/cunroll-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8379865b38e7dfdd18d1aa64bb95ed76c7b54f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8379865b38e7dfdd18d1aa64bb95ed76c7b54f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-1.c?ref=c8379865b38e7dfdd18d1aa64bb95ed76c7b54f0", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-cunroll-details\" } */\n+int a[2];\n+test(int c)\n+{ \n+  int i;\n+  for (i=0;i<c;i++)\n+    a[i]=5;\n+}\n+/* Array bounds says the loop will not roll much.  */\n+/* { dg-final { scan-tree-dump \"Unrolled loop 1 completely .duplicated 1 times..\" \"cunroll\"} } */\n+/* { dg-final { scan-tree-dump \"Last iteration exit edge was proved true.\" \"cunroll\"} } */\n+/* { dg-final { cleanup-tree-dump \"cunroll\" } } */"}, {"sha": "cd54c6695b257b306c0247c701069bbbf5c9d922", "filename": "gcc/testsuite/gcc.dg/tree-ssa/cunroll-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8379865b38e7dfdd18d1aa64bb95ed76c7b54f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8379865b38e7dfdd18d1aa64bb95ed76c7b54f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-2.c?ref=c8379865b38e7dfdd18d1aa64bb95ed76c7b54f0", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-cunroll-details\" } */\n+int a[2];\n+test(int c)\n+{ \n+  int i;\n+  for (i=0;i<c;i++)\n+    {\n+      a[i]=5;\n+      if (test2())\n+\treturn;\n+    }\n+}\n+/* We are not able to get rid of the final conditional because the loop has two exits.  */\n+/* { dg-final { scan-tree-dump \"Unrolled loop 1 completely .duplicated 2 times..\" \"cunroll\"} } */\n+/* { dg-final { cleanup-tree-dump \"cunroll\" } } */"}, {"sha": "b621432c0450fddab8eded1fddca3a2eee8b2998", "filename": "gcc/testsuite/gcc.dg/tree-ssa/cunroll-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8379865b38e7dfdd18d1aa64bb95ed76c7b54f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8379865b38e7dfdd18d1aa64bb95ed76c7b54f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-3.c?ref=c8379865b38e7dfdd18d1aa64bb95ed76c7b54f0", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-cunrolli-details\" } */\n+int a[1];\n+test(int c)\n+{ \n+  int i;\n+  for (i=0;i<c;i++)\n+    {\n+      a[i]=5;\n+    }\n+}\n+/* If we start duplicating headers prior curoll, this loop will have 0 iterations.  */\n+\n+/* { dg-final { scan-tree-dump \"Unrolled loop 1 completely .duplicated 1 times..\" \"cunrolli\"} } */\n+/* { dg-final { cleanup-tree-dump \"cunrolli\" } } */"}, {"sha": "02c94260a3288e9dbdcea0f1de969b845eccf806", "filename": "gcc/testsuite/gcc.dg/tree-ssa/cunroll-4.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8379865b38e7dfdd18d1aa64bb95ed76c7b54f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8379865b38e7dfdd18d1aa64bb95ed76c7b54f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-4.c?ref=c8379865b38e7dfdd18d1aa64bb95ed76c7b54f0", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-cunroll-details\" } */\n+int a[1];\n+test(int c)\n+{ \n+  int i=0,j;\n+  for (i=0;i<c;i++)\n+    {\n+      for (j=0;j<c;j++)\n+\t{\n+          a[i]=5;\n+\t  test2();\n+\t}\n+    }\n+}\n+\n+/* We should do this as part of cunrolli, but our cost model do not take into account early exit\n+   from the last iteration.  */\n+/* { dg-final { scan-tree-dump \"Turned loop 1 to non-loop; it never loops.\" \"cunrolli\"} } */\n+/* { dg-final { scan-tree-dump \"Last iteration exit edge was proved true.\" \"cunrolli\"} } */\n+/* { dg-final { cleanup-tree-dump \"cunroll\" } } */"}, {"sha": "8d1a14a78378c4c77e5eca61769cb46b41b0876d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/cunroll-5.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8379865b38e7dfdd18d1aa64bb95ed76c7b54f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8379865b38e7dfdd18d1aa64bb95ed76c7b54f0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-5.c?ref=c8379865b38e7dfdd18d1aa64bb95ed76c7b54f0", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-cunroll-details\" } */\n+int *a;\n+test(int c)\n+{ \n+  int i;\n+  for (i=0;i<6;i++)\n+    a[i]=5;\n+}\n+/* Basic testcase for complette unrolling.  */\n+/* { dg-final { scan-tree-dump \"Unrolled loop 1 completely .duplicated 5 times..\" \"cunroll\"} } */\n+/* { dg-final { scan-tree-dump \"Exit condition of peeled iterations was eliminated.\" \"cunroll\"} } */\n+/* { dg-final { scan-tree-dump \"Last iteration exit edge was proved true.\" \"cunroll\"} } */\n+/* { dg-final { cleanup-tree-dump \"cunroll\" } } */"}]}