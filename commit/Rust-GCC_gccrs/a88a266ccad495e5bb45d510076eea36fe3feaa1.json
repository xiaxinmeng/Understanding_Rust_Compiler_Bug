{"sha": "a88a266ccad495e5bb45d510076eea36fe3feaa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg4YTI2NmNjYWQ0OTVlNWJiNDVkNTEwMDc2ZWVhMzZmZTNmZWFhMQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2007-06-08T04:49:23Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2007-06-08T04:49:23Z"}, "message": "re PR fortran/32223 (Backslash handling inconsistent)\n\n2007-06-07  Steven G. Kargl  <kargl@gcc.gnu.org>\n\t    Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/32223\n\t* match.c (gfc_match_special_char): New function.  Match special char.\n\tAdd handling '\\0'.\n\t* match.h: Add prototype.\n\t* io.c (next_char): Use it.\n\t* primary.c (next_string_char): Ditto.\n\nCo-Authored-By: Jerry DeLisle <jvdelisle@gcc.gnu.org>\n\nFrom-SVN: r125557", "tree": {"sha": "6229751b4eb48bff54ae9a9b30558a48f65b4177", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6229751b4eb48bff54ae9a9b30558a48f65b4177"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a88a266ccad495e5bb45d510076eea36fe3feaa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a88a266ccad495e5bb45d510076eea36fe3feaa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a88a266ccad495e5bb45d510076eea36fe3feaa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a88a266ccad495e5bb45d510076eea36fe3feaa1/comments", "author": null, "committer": null, "parents": [{"sha": "294e1a5bf10e457c966278bba233d6cea29e3e04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294e1a5bf10e457c966278bba233d6cea29e3e04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/294e1a5bf10e457c966278bba233d6cea29e3e04"}], "stats": {"total": 134, "additions": 71, "deletions": 63}, "files": [{"sha": "248bbf886350755871082e138cb13774d3ed9836", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a88a266ccad495e5bb45d510076eea36fe3feaa1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a88a266ccad495e5bb45d510076eea36fe3feaa1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a88a266ccad495e5bb45d510076eea36fe3feaa1", "patch": "@@ -1,3 +1,13 @@\n+2007-06-07  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\t    Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/32223\n+\t* match.c (gfc_match_special_char): New function.  Match special char.\n+\tAdd handling '\\0'.\n+\t* match.h: Add prototype.\n+\t* io.c (next_char): Use it.\n+\t* primary.c (next_string_char): Ditto.\n+\n 2007-06-06  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* decl.c: Miscellaneous whitespace fixes."}, {"sha": "4d12b2416fb36e062ac92ba4376fc0adaa1d9e8b", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 8, "deletions": 31, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a88a266ccad495e5bb45d510076eea36fe3feaa1/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a88a266ccad495e5bb45d510076eea36fe3feaa1/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=a88a266ccad495e5bb45d510076eea36fe3feaa1", "patch": "@@ -141,40 +141,17 @@ next_char (int in_string)\n \n   if (gfc_option.flag_backslash && c == '\\\\')\n     {\n+      int tmp;\n       locus old_locus = gfc_current_locus;\n \n-      switch (gfc_next_char_literal (1))\n-\t{\n-\tcase 'a':\n-\t  c = '\\a';\n-\t  break;\n-\tcase 'b':\n-\t  c = '\\b';\n-\t  break;\n-\tcase 't':\n-\t  c = '\\t';\n-\t  break;\n-\tcase 'f':\n-\t  c = '\\f';\n-\t  break;\n-\tcase 'n':\n-\t  c = '\\n';\n-\t  break;\n-\tcase 'r':\n-\t  c = '\\r';\n-\t  break;\n-\tcase 'v':\n-\t  c = '\\v';\n-\t  break;\n-\tcase '\\\\':\n-\t  c = '\\\\';\n-\t  break;\n+      /* Use a temp variable to avoid side effects from gfc_match_special_char\n+\t since it uses an int * for its argument.  */\n+      tmp = (int)c;\n \n-\tdefault:\n-\t  /* Unknown backslash codes are simply not expanded.  */\n-\t  gfc_current_locus = old_locus;\n-\t  break;\n-\t}\n+      if (gfc_match_special_char (&tmp) == MATCH_NO)\n+\tgfc_current_locus = old_locus;\n+\n+      c = (char)tmp;\n \n       if (!(gfc_option.allow_std & GFC_STD_GNU) && !inhibit_warnings)\n \tgfc_warning (\"Extension: backslash character at %C\");"}, {"sha": "e544d6d2a32339694f69de808c641addceeb79a4", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a88a266ccad495e5bb45d510076eea36fe3feaa1/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a88a266ccad495e5bb45d510076eea36fe3feaa1/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=a88a266ccad495e5bb45d510076eea36fe3feaa1", "patch": "@@ -64,6 +64,56 @@ mstring intrinsic_operators[] = {\n \n /******************** Generic matching subroutines ************************/\n \n+/* See if the next character is a special character that has\n+   escaped by a \\ via the -fbackslash option.  */\n+\n+match\n+gfc_match_special_char (int *c)\n+{\n+\n+  match m;\n+\n+  m = MATCH_YES;\n+\n+  switch (gfc_next_char_literal (1))\n+    {\n+    case 'a':\n+      *c = '\\a';\n+      break;\n+    case 'b':\n+      *c = '\\b';\n+      break;\n+    case 't':\n+      *c = '\\t';\n+      break;\n+    case 'f':\n+      *c = '\\f';\n+      break;\n+    case 'n':\n+      *c = '\\n';\n+      break;\n+    case 'r':\n+      *c = '\\r';\n+      break;\n+    case 'v':\n+      *c = '\\v';\n+      break;\n+    case '\\\\':\n+      *c = '\\\\';\n+      break;\n+    case '0':\n+      *c = '\\0';\n+      break;\n+    default:\n+      /* Unknown backslash codes are simply not expanded.  */\n+      m = MATCH_NO;\n+      break;\n+    }\n+\n+  return m;\n+}\n+\n+\n /* In free form, match at least one space.  Always matches in fixed\n    form.  */\n "}, {"sha": "8a309c5f2dd69ed50f544b4a958a8ce6e106ccea", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a88a266ccad495e5bb45d510076eea36fe3feaa1/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a88a266ccad495e5bb45d510076eea36fe3feaa1/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=a88a266ccad495e5bb45d510076eea36fe3feaa1", "patch": "@@ -39,6 +39,7 @@ extern gfc_st_label *gfc_statement_label;\n /* match.c.  */\n \n /* Generic match subroutines.  */\n+match gfc_match_special_char (int *);\n match gfc_match_space (void);\n match gfc_match_eos (void);\n match gfc_match_small_literal_int (int *, int *);"}, {"sha": "90b1d6840e4e55c3d60abd0c6604b3dc9f2ff663", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a88a266ccad495e5bb45d510076eea36fe3feaa1/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a88a266ccad495e5bb45d510076eea36fe3feaa1/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=a88a266ccad495e5bb45d510076eea36fe3feaa1", "patch": "@@ -732,38 +732,8 @@ next_string_char (char delimiter)\n     {\n       old_locus = gfc_current_locus;\n \n-      switch (gfc_next_char_literal (1))\n-\t{\n-\tcase 'a':\n-\t  c = '\\a';\n-\t  break;\n-\tcase 'b':\n-\t  c = '\\b';\n-\t  break;\n-\tcase 't':\n-\t  c = '\\t';\n-\t  break;\n-\tcase 'f':\n-\t  c = '\\f';\n-\t  break;\n-\tcase 'n':\n-\t  c = '\\n';\n-\t  break;\n-\tcase 'r':\n-\t  c = '\\r';\n-\t  break;\n-\tcase 'v':\n-\t  c = '\\v';\n-\t  break;\n-\tcase '\\\\':\n-\t  c = '\\\\';\n-\t  break;\n-\n-\tdefault:\n-\t  /* Unknown backslash codes are simply not expanded */\n-\t  gfc_current_locus = old_locus;\n-\t  break;\n-\t}\n+      if (gfc_match_special_char (&c) == MATCH_NO)\n+\tgfc_current_locus = old_locus;\n \n       if (!(gfc_option.allow_std & GFC_STD_GNU) && !inhibit_warnings)\n \tgfc_warning (\"Extension: backslash character at %C\");"}]}