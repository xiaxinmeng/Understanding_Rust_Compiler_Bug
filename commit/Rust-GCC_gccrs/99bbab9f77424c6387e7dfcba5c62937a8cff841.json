{"sha": "99bbab9f77424c6387e7dfcba5c62937a8cff841", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTliYmFiOWY3NzQyNGM2Mzg3ZTdkZmNiYTVjNjI5MzdhOGNmZjg0MQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-11T15:45:26Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-12T21:30:19Z"}, "message": "libstdc++: Fix LWG issues 3389 and 3390\n\nlibstdc++-v3/ChangeLog:\n\n\tLWG 3389 and LWG 3390\n\t* include/bits/stl_iterator.h (move_move_iterator): Use std::move when\n\tconstructing the move_iterator with __i.\n\t(counted_iterator::counted_iterator): Use std::move when initializing\n\tM_current with __i.\n\t* testsuite/24_iterators/counted_iterator/lwg3389.cc: New test.\n\t* testsuite/24_iterators/move_iterator/lwg3390.cc: New test.", "tree": {"sha": "a33c115f8a7f1140315bbc2a2c186678fe1dd639", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a33c115f8a7f1140315bbc2a2c186678fe1dd639"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99bbab9f77424c6387e7dfcba5c62937a8cff841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99bbab9f77424c6387e7dfcba5c62937a8cff841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99bbab9f77424c6387e7dfcba5c62937a8cff841", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99bbab9f77424c6387e7dfcba5c62937a8cff841/comments", "author": null, "committer": null, "parents": [{"sha": "02ce382cd323097f9d02fbf91e0a3f59ebcd3d30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02ce382cd323097f9d02fbf91e0a3f59ebcd3d30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02ce382cd323097f9d02fbf91e0a3f59ebcd3d30"}], "stats": {"total": 146, "additions": 144, "deletions": 2}, "files": [{"sha": "cc4cfb7da0fbdf21cd338923ea3d5a429d575055", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bbab9f77424c6387e7dfcba5c62937a8cff841/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bbab9f77424c6387e7dfcba5c62937a8cff841/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=99bbab9f77424c6387e7dfcba5c62937a8cff841", "patch": "@@ -1,3 +1,13 @@\n+2020-02-12  Patrick Palka  <ppalka@redhat.com>\n+\n+\tLWG 3389 and LWG 3390\n+\t* include/bits/stl_iterator.h (move_move_iterator): Use std::move when\n+\tconstructing the move_iterator with __i.\n+\t(counted_iterator::counted_iterator): Use std::move when initializing\n+\tM_current with __i.\n+\t* testsuite/24_iterators/counted_iterator/lwg3389.cc: New test.\n+\t* testsuite/24_iterators/move_iterator/lwg3390.cc: New test.\n+\n 2020-02-12  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR libstdc++/79193"}, {"sha": "fc9d442b47567c4f31b6065ace381f5771c80771", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bbab9f77424c6387e7dfcba5c62937a8cff841/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bbab9f77424c6387e7dfcba5c62937a8cff841/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=99bbab9f77424c6387e7dfcba5c62937a8cff841", "patch": "@@ -1375,7 +1375,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Iterator>\n     inline _GLIBCXX17_CONSTEXPR move_iterator<_Iterator>\n     make_move_iterator(_Iterator __i)\n-    { return move_iterator<_Iterator>(__i); }\n+    { return move_iterator<_Iterator>(std::move(__i)); }\n \n   template<typename _Iterator, typename _ReturnType\n     = typename conditional<__move_if_noexcept_cond\n@@ -1782,7 +1782,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       constexpr\n       counted_iterator(_It __i, iter_difference_t<_It> __n)\n-      : _M_current(__i), _M_length(__n)\n+      : _M_current(std::move(__i)), _M_length(__n)\n       { __glibcxx_assert(__n >= 0); }\n \n       template<typename _It2>"}, {"sha": "cf74fd47bec08b6ff99d9e0093852875f7a72843", "filename": "libstdc++-v3/testsuite/24_iterators/counted_iterator/lwg3389.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bbab9f77424c6387e7dfcba5c62937a8cff841/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcounted_iterator%2Flwg3389.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bbab9f77424c6387e7dfcba5c62937a8cff841/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcounted_iterator%2Flwg3389.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcounted_iterator%2Flwg3389.cc?ref=99bbab9f77424c6387e7dfcba5c62937a8cff841", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator>\n+\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_range;\n+using __gnu_test::input_iterator_wrapper;\n+\n+template<typename T>\n+struct move_only_wrapper : input_iterator_wrapper<T>\n+{\n+  using input_iterator_wrapper<T>::input_iterator_wrapper;\n+\n+  move_only_wrapper()\n+    : input_iterator_wrapper<T>(nullptr, nullptr)\n+  { }\n+\n+  move_only_wrapper(const move_only_wrapper&) = delete;\n+  move_only_wrapper&\n+  operator=(const move_only_wrapper&) = delete;\n+\n+  move_only_wrapper(move_only_wrapper&&) = default;\n+  move_only_wrapper&\n+  operator=(move_only_wrapper&&) = default;\n+\n+  using input_iterator_wrapper<T>::operator++;\n+\n+  move_only_wrapper&\n+  operator++()\n+  {\n+    input_iterator_wrapper<T>::operator++();\n+    return *this;\n+  }\n+};\n+\n+static_assert(std::input_iterator<move_only_wrapper<int>>);\n+static_assert(!std::forward_iterator<move_only_wrapper<int>>);\n+static_assert(!std::copyable<move_only_wrapper<int>>);\n+\n+// LWG 3389\n+void\n+test01()\n+{\n+  int x[] = {1,2,3,4};\n+  test_range<int, move_only_wrapper> rx(x);\n+  auto it = std::counted_iterator(rx.begin(), 2);\n+}"}, {"sha": "1df7caccece283c0902f141207b1382409ac3e27", "filename": "libstdc++-v3/testsuite/24_iterators/move_iterator/lwg3390.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99bbab9f77424c6387e7dfcba5c62937a8cff841/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Flwg3390.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99bbab9f77424c6387e7dfcba5c62937a8cff841/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Flwg3390.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Flwg3390.cc?ref=99bbab9f77424c6387e7dfcba5c62937a8cff841", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator>\n+\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_range;\n+using __gnu_test::input_iterator_wrapper;\n+\n+template<typename T>\n+struct move_only_wrapper : input_iterator_wrapper<T>\n+{\n+  using input_iterator_wrapper<T>::input_iterator_wrapper;\n+\n+  move_only_wrapper()\n+    : input_iterator_wrapper<T>(nullptr, nullptr)\n+  { }\n+\n+  move_only_wrapper(const move_only_wrapper&) = delete;\n+  move_only_wrapper&\n+  operator=(const move_only_wrapper&) = delete;\n+\n+  move_only_wrapper(move_only_wrapper&&) = default;\n+  move_only_wrapper&\n+  operator=(move_only_wrapper&&) = default;\n+\n+  using input_iterator_wrapper<T>::operator++;\n+\n+  move_only_wrapper&\n+  operator++()\n+  {\n+    input_iterator_wrapper<T>::operator++();\n+    return *this;\n+  }\n+};\n+\n+static_assert(std::input_iterator<move_only_wrapper<int>>);\n+static_assert(!std::forward_iterator<move_only_wrapper<int>>);\n+static_assert(!std::copyable<move_only_wrapper<int>>);\n+\n+// LWG 3390\n+void\n+test01()\n+{\n+  int x[] = {1,2,3,4};\n+  test_range<int, move_only_wrapper> rx(x);\n+  auto it = std::make_move_iterator(rx.begin());\n+}"}]}