{"sha": "740785381ec9944c861dcc29b420c96aa933f040", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQwNzg1MzgxZWM5OTQ0Yzg2MWRjYzI5YjQyMGM5NmFhOTMzZjA0MA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-10-29T08:39:33Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-10-29T08:39:33Z"}, "message": "Add a simulate_builin_function_decl langhook\n\nAlthough it's possible to define the SVE intrinsics in a normal header\nfile, it's much more convenient to define them directly in the compiler.\nThis also speeds up compilation and gives better error messages.\n\nThe idea is therefore for arm_sve.h (the main intrinsics header file)\nto have the pragma:\n\n    #pragma GCC aarch64 \"arm_sve.h\"\n\ntelling GCC to define (almost) everything arm_sve.h needs to define.\nThe target then needs a way of injecting new built-in function\ndeclarations during compilation.\n\nThe main hook for defining built-in functions is add_builtin_function.\nThis is designed for use at start-up, and so has various features that\nare correct in that context but not for the pragma above:\n\n  (1) the location is always BUILTINS_LOCATION, whereas for arm_sve.h\n      it ought to be the location of the pragma.\n\n  (2) the function is only immediately visible if it's in the implementation\n      namespace, whereas the pragma is deliberately injecting functions\n      into the general namespace.\n\n  (3) there's no attempt to emulate a normal function declaration in\n      C or C++, whereas functions declared by the pragma should be\n      checked in the same way as an open-coded declaration would be.\n      E.g. we should get an error if there was a previous incompatible\n      declaration.\n\n  (4) in C++, the function is treated as extern \"C\" and so can't be\n      overloaded, whereas SVE intrinsics do use function overloading.\n\nThis patch therefore adds a hook that targets can use to inject\nthe equivalent of a source-level function declaration, but bound\nto a BUILT_IN_MD function.\n\nThe main SVE intrinsic patch has tests to make sure that we report an\nerror for conflicting definitions that appear either before or after\nincluding arm_sve.h.\n\n2019-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* langhooks.h (lang_hooks::simulate_builtin_function_decl): New hook.\n\t(simulate_builtin_function_decl): Declare.\n\t* langhooks-def.h (LANG_HOOKS_SIMULATE_BUILTIN_FUNCTION_DECL): Define.\n\t(LANG_HOOKS_INITIALIZER): Include it.\n\t* langhooks.c (add_builtin_function_common): Rename to...\n\t(build_builtin_function): ...this.  Add a location parameter and use\n\tit instead of BUILTINS_LOCATION.  Remove the hook parameter and return\n\tthe decl instead.\n\t(add_builtin_function): Update accordingly, passing the returned\n\tdecl to the lang hook.\n\t(add_builtin_function_ext_scope): Likewise\n\t(simulate_builtin_function_decl): New function.\n\ngcc/c/\n\t* c-tree.h (c_simulate_builtin_function_decl): Declare.\n\t* c-decl.c (c_simulate_builtin_function_decl): New function.\n\t* c-objc-common.h (LANG_HOOKS_SIMULATE_BUILTIN_FUNCTION_DECL): Define\n\tto the above.\n\ngcc/cp/\n\t* cp-tree.h (cxx_simulate_builtin_function_decl): Declare.\n\t* decl.c (cxx_simulate_builtin_function_decl): New function.\n\t* cp-objcp-common.h (LANG_HOOKS_SIMULATE_BUILTIN_FUNCTION_DECL): Define\n\tto the above.\n\nFrom-SVN: r277554", "tree": {"sha": "00a84533bfa0cdcce1c5eb24f16e6bfe9f0f54cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00a84533bfa0cdcce1c5eb24f16e6bfe9f0f54cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/740785381ec9944c861dcc29b420c96aa933f040", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/740785381ec9944c861dcc29b420c96aa933f040", "html_url": "https://github.com/Rust-GCC/gccrs/commit/740785381ec9944c861dcc29b420c96aa933f040", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/740785381ec9944c861dcc29b420c96aa933f040/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "891966480630f58f115825c31badc59dd18d5eb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/891966480630f58f115825c31badc59dd18d5eb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/891966480630f58f115825c31badc59dd18d5eb9"}], "stats": {"total": 136, "additions": 118, "deletions": 18}, "files": [{"sha": "e7d69ac896f1f061e1cfefe2c736dbb7142bb964", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740785381ec9944c861dcc29b420c96aa933f040/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740785381ec9944c861dcc29b420c96aa933f040/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=740785381ec9944c861dcc29b420c96aa933f040", "patch": "@@ -1,3 +1,18 @@\n+2019-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* langhooks.h (lang_hooks::simulate_builtin_function_decl): New hook.\n+\t(simulate_builtin_function_decl): Declare.\n+\t* langhooks-def.h (LANG_HOOKS_SIMULATE_BUILTIN_FUNCTION_DECL): Define.\n+\t(LANG_HOOKS_INITIALIZER): Include it.\n+\t* langhooks.c (add_builtin_function_common): Rename to...\n+\t(build_builtin_function): ...this.  Add a location parameter and use\n+\tit instead of BUILTINS_LOCATION.  Remove the hook parameter and return\n+\tthe decl instead.\n+\t(add_builtin_function): Update accordingly, passing the returned\n+\tdecl to the lang hook.\n+\t(add_builtin_function_ext_scope): Likewise\n+\t(simulate_builtin_function_decl): New function.\n+\n 2019-10-29  Jakub Jelinek  <jakub@redhat.com>\n \n \t* doc/install.texi (--enable-offload-targets): Fix up a typo in the"}, {"sha": "3b0e3baf58aeb0a0a7212566598761fd8226d0e6", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=740785381ec9944c861dcc29b420c96aa933f040", "patch": "@@ -1,3 +1,10 @@\n+2019-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* c-tree.h (c_simulate_builtin_function_decl): Declare.\n+\t* c-decl.c (c_simulate_builtin_function_decl): New function.\n+\t* c-objc-common.h (LANG_HOOKS_SIMULATE_BUILTIN_FUNCTION_DECL): Define\n+\tto the above.\n+\n 2019-10-28  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/66970"}, {"sha": "1013996194c6ac191b07cae8987e7c8256d25b7e", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=740785381ec9944c861dcc29b420c96aa933f040", "patch": "@@ -4481,6 +4481,16 @@ c_builtin_function_ext_scope (tree decl)\n \n   return decl;\n }\n+\n+/* Implement LANG_HOOKS_SIMULATE_BUILTIN_FUNCTION_DECL.  */\n+\n+tree\n+c_simulate_builtin_function_decl (tree decl)\n+{\n+  tree type = TREE_TYPE (decl);\n+  C_DECL_BUILTIN_PROTOTYPE (decl) = prototype_p (type);\n+  return pushdecl (decl);\n+}\n \f\n /* Called when a declaration is seen that contains no names to declare.\n    If its type is a reference to a structure, union or enum inherited"}, {"sha": "8d3bcc2fdf127d88a3994bb2f29bbc1fb6c21a32", "filename": "gcc/c/c-objc-common.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Fc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Fc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.h?ref=740785381ec9944c861dcc29b420c96aa933f040", "patch": "@@ -60,6 +60,9 @@ along with GCC; see the file COPYING3.  If not see\n #define LANG_HOOKS_BUILTIN_FUNCTION c_builtin_function\n #undef  LANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE\n #define LANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE c_builtin_function_ext_scope\n+#undef  LANG_HOOKS_SIMULATE_BUILTIN_FUNCTION_DECL\n+#define LANG_HOOKS_SIMULATE_BUILTIN_FUNCTION_DECL \\\n+  c_simulate_builtin_function_decl\n #undef LANG_HOOKS_EMITS_BEGIN_STMT\n #define LANG_HOOKS_EMITS_BEGIN_STMT true\n "}, {"sha": "d01d4224fdde791089f46ac1840849562e0d1bff", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=740785381ec9944c861dcc29b420c96aa933f040", "patch": "@@ -579,6 +579,7 @@ extern struct c_declarator *set_array_declarator_inner (struct c_declarator *,\n \t\t\t\t\t\t\tstruct c_declarator *);\n extern tree c_builtin_function (tree);\n extern tree c_builtin_function_ext_scope (tree);\n+extern tree c_simulate_builtin_function_decl (tree);\n extern void shadow_tag (const struct c_declspecs *);\n extern void shadow_tag_warned (const struct c_declspecs *, int);\n extern tree start_enum (location_t, struct c_enum_contents *, tree);"}, {"sha": "02cb6f3bf5b873bd03d5d4dad69b77eca3f1c21e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=740785381ec9944c861dcc29b420c96aa933f040", "patch": "@@ -1,3 +1,10 @@\n+2019-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* cp-tree.h (cxx_simulate_builtin_function_decl): Declare.\n+\t* decl.c (cxx_simulate_builtin_function_decl): New function.\n+\t* cp-objcp-common.h (LANG_HOOKS_SIMULATE_BUILTIN_FUNCTION_DECL): Define\n+\tto the above.\n+\n 2019-10-28  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/66970"}, {"sha": "1827e53e73ade399390666bb65f829b6d322e985", "filename": "gcc/cp/cp-objcp-common.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Fcp%2Fcp-objcp-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Fcp%2Fcp-objcp-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.h?ref=740785381ec9944c861dcc29b420c96aa933f040", "patch": "@@ -100,6 +100,9 @@ extern tree cxx_make_type_hook\t\t\t(tree_code);\n #define LANG_HOOKS_BUILTIN_FUNCTION cxx_builtin_function\n #undef  LANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE\n #define LANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE cxx_builtin_function_ext_scope\n+#undef  LANG_HOOKS_SIMULATE_BUILTIN_FUNCTION_DECL\n+#define LANG_HOOKS_SIMULATE_BUILTIN_FUNCTION_DECL \\\n+  cxx_simulate_builtin_function_decl\n #undef\tLANG_HOOKS_TYPE_HASH_EQ\n #define LANG_HOOKS_TYPE_HASH_EQ\tcxx_type_hash_eq\n #undef\tLANG_HOOKS_COPY_LANG_QUALIFIERS"}, {"sha": "37b954a6c6f33058ef4a5539a77f0ff18c55d384", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=740785381ec9944c861dcc29b420c96aa933f040", "patch": "@@ -6485,6 +6485,7 @@ extern tmpl_spec_kind current_tmpl_spec_kind\t(int);\n extern tree cp_fname_init\t\t\t(const char *, tree *);\n extern tree cxx_builtin_function\t\t(tree decl);\n extern tree cxx_builtin_function_ext_scope\t(tree decl);\n+extern tree cxx_simulate_builtin_function_decl\t(tree);\n extern tree check_elaborated_type_specifier\t(enum tag_types, tree, bool);\n extern void warn_extern_redeclared_static\t(tree, tree);\n extern tree cxx_comdat_group\t\t\t(tree);"}, {"sha": "dccde80b1a78502142a0895b381d22073b85046c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=740785381ec9944c861dcc29b420c96aa933f040", "patch": "@@ -4687,6 +4687,19 @@ cxx_builtin_function_ext_scope (tree decl)\n   return decl;\n }\n \n+/* Implement LANG_HOOKS_SIMULATE_BUILTIN_FUNCTION_DECL.  */\n+\n+tree\n+cxx_simulate_builtin_function_decl (tree decl)\n+{\n+  retrofit_lang_decl (decl);\n+\n+  DECL_ARTIFICIAL (decl) = 1;\n+  SET_DECL_LANGUAGE (decl, lang_cplusplus);\n+  DECL_CONTEXT (decl) = FROB_CONTEXT (current_namespace);\n+  return pushdecl (decl);\n+}\n+\n /* Generate a FUNCTION_DECL with the typical flags for a runtime library\n    function.  Not called directly.  */\n "}, {"sha": "af0c1b359c75eef6381274c1d6bff8a4760d6485", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=740785381ec9944c861dcc29b420c96aa933f040", "patch": "@@ -122,6 +122,7 @@ extern int lhd_type_dwarf_attribute (const_tree, int);\n #define LANG_HOOKS_TYPES_COMPATIBLE_P\tlhd_types_compatible_p\n #define LANG_HOOKS_BUILTIN_FUNCTION\tlhd_builtin_function\n #define LANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE\tLANG_HOOKS_BUILTIN_FUNCTION\n+#define LANG_HOOKS_SIMULATE_BUILTIN_FUNCTION_DECL LANG_HOOKS_BUILTIN_FUNCTION\n #define LANG_HOOKS_EXPR_TO_DECL\t\tlhd_expr_to_decl\n #define LANG_HOOKS_TO_TARGET_CHARSET\tlhd_to_target_charset\n #define LANG_HOOKS_INIT_TS\t\tlhd_do_nothing\n@@ -342,6 +343,7 @@ extern void lhd_end_section (void);\n   LANG_HOOKS_GIMPLIFY_EXPR, \\\n   LANG_HOOKS_BUILTIN_FUNCTION, \\\n   LANG_HOOKS_BUILTIN_FUNCTION_EXT_SCOPE, \\\n+  LANG_HOOKS_SIMULATE_BUILTIN_FUNCTION_DECL, \\\n   LANG_HOOKS_INIT_TS,          \\\n   LANG_HOOKS_EXPR_TO_DECL, \\\n   LANG_HOOKS_EH_PERSONALITY, \\"}, {"sha": "2230e151e6318f47f525b3a2d289e4a9860798db", "filename": "gcc/langhooks.c", "status": "modified", "additions": 45, "deletions": 18, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=740785381ec9944c861dcc29b420c96aa933f040", "patch": "@@ -599,19 +599,16 @@ lhd_omp_mappable_type (tree type)\n   return true;\n }\n \n-/* Common function for add_builtin_function and\n-   add_builtin_function_ext_scope.  */\n+/* Common function for add_builtin_function, add_builtin_function_ext_scope\n+   and simulate_builtin_function_decl.  */\n+\n static tree\n-add_builtin_function_common (const char *name,\n-\t\t\t     tree type,\n-\t\t\t     int function_code,\n-\t\t\t     enum built_in_class cl,\n-\t\t\t     const char *library_name,\n-\t\t\t     tree attrs,\n-\t\t\t     tree (*hook) (tree))\n+build_builtin_function (location_t location, const char *name, tree type,\n+\t\t\tint function_code, enum built_in_class cl,\n+\t\t\tconst char *library_name, tree attrs)\n {\n   tree   id = get_identifier (name);\n-  tree decl = build_decl (BUILTINS_LOCATION, FUNCTION_DECL, id, type);\n+  tree decl = build_decl (location, FUNCTION_DECL, id, type);\n \n   TREE_PUBLIC (decl)         = 1;\n   DECL_EXTERNAL (decl)       = 1;\n@@ -632,8 +629,7 @@ add_builtin_function_common (const char *name,\n   else\n     decl_attributes (&decl, NULL_TREE, 0);\n \n-  return hook (decl);\n-\n+  return decl;\n }\n \n /* Create a builtin function.  */\n@@ -646,9 +642,9 @@ add_builtin_function (const char *name,\n \t\t      const char *library_name,\n \t\t      tree attrs)\n {\n-  return add_builtin_function_common (name, type, function_code, cl,\n-\t\t\t\t      library_name, attrs,\n-\t\t\t\t      lang_hooks.builtin_function);\n+  tree decl = build_builtin_function (BUILTINS_LOCATION, name, type,\n+\t\t\t\t      function_code, cl, library_name, attrs);\n+  return lang_hooks.builtin_function (decl);\n }\n \n /* Like add_builtin_function, but make sure the scope is the external scope.\n@@ -666,9 +662,40 @@ add_builtin_function_ext_scope (const char *name,\n \t\t\t\tconst char *library_name,\n \t\t\t\ttree attrs)\n {\n-  return add_builtin_function_common (name, type, function_code, cl,\n-\t\t\t\t      library_name, attrs,\n-\t\t\t\t      lang_hooks.builtin_function_ext_scope);\n+  tree decl = build_builtin_function (BUILTINS_LOCATION, name, type,\n+\t\t\t\t      function_code, cl, library_name, attrs);\n+  return lang_hooks.builtin_function_ext_scope (decl);\n+}\n+\n+/* Simulate a declaration of a target-specific built-in function at\n+   location LOCATION, as though it had been declared directly in the\n+   source language.  NAME is the name of the function, TYPE is its function\n+   type, FUNCTION_CODE is the target-specific function code, LIBRARY_NAME\n+   is the name of the underlying library function (NULL if none) and\n+   ATTRS is a list of function attributes.\n+\n+   Return the decl of the declared function.  */\n+\n+tree\n+simulate_builtin_function_decl (location_t location, const char *name,\n+\t\t\t\ttree type, int function_code,\n+\t\t\t\tconst char *library_name, tree attrs)\n+{\n+  tree decl = build_builtin_function (location, name, type,\n+\t\t\t\t      function_code, BUILT_IN_MD,\n+\t\t\t\t      library_name, attrs);\n+  tree new_decl = lang_hooks.simulate_builtin_function_decl (decl);\n+\n+  /* Give the front end a chance to create a new decl if necessary,\n+     but if the front end discards the decl in favour of a conflicting\n+     (erroneous) previous definition, return the decl that we tried but\n+     failed to add.  This allows the caller to process the returned decl\n+     normally, even though the source code won't be able to use it.  */\n+  if (TREE_CODE (new_decl) == FUNCTION_DECL\n+      && fndecl_built_in_p (new_decl, function_code, BUILT_IN_MD))\n+    return new_decl;\n+\n+  return decl;\n }\n \n tree"}, {"sha": "76f530eaeaf2acfe5db4d8384d5cef129c141da3", "filename": "gcc/langhooks.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/740785381ec9944c861dcc29b420c96aa933f040/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=740785381ec9944c861dcc29b420c96aa933f040", "patch": "@@ -504,6 +504,15 @@ struct lang_hooks\n      backend must add all of the builtins at program initialization time.  */\n   tree (*builtin_function_ext_scope) (tree decl);\n \n+  /* Do language-specific processing for target-specific built-in\n+     function DECL, so that it is defined in the global scope (only)\n+     and is available without needing to be explicitly declared.\n+\n+     This is intended for targets that want to inject declarations of\n+     built-in functions into the source language (such as in response\n+     to a pragma) rather than providing them in the source language itself.  */\n+  tree (*simulate_builtin_function_decl) (tree decl);\n+\n   /* Used to set up the tree_contains_structure array for a frontend. */\n   void (*init_ts) (void);\n \n@@ -572,6 +581,8 @@ extern tree add_builtin_function_ext_scope (const char *name, tree type,\n \t\t\t\t\t    enum built_in_class cl,\n \t\t\t\t\t    const char *library_name,\n \t\t\t\t\t    tree attrs);\n+extern tree simulate_builtin_function_decl (location_t, const char *, tree,\n+\t\t\t\t\t    int, const char *, tree);\n extern tree add_builtin_type (const char *name, tree type);\n \n /* Language helper functions.  */"}]}