{"sha": "f8d901d00e94e5a03c3321b37303eddd7c321ecb", "node_id": "C_kwDOANBUbNoAKGY4ZDkwMWQwMGU5NGU1YTAzYzMzMjFiMzczMDNlZGRkN2MzMjFlY2I", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-08T00:17:53Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-08T00:17:53Z"}, "message": "Daily bump.", "tree": {"sha": "d2ced26b241533c9007928616a5eadaceb10a4f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2ced26b241533c9007928616a5eadaceb10a4f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8d901d00e94e5a03c3321b37303eddd7c321ecb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d901d00e94e5a03c3321b37303eddd7c321ecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8d901d00e94e5a03c3321b37303eddd7c321ecb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d901d00e94e5a03c3321b37303eddd7c321ecb/comments", "author": null, "committer": null, "parents": [{"sha": "b457b779427b0f7b3fbac447811c9c52db5bc79e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b457b779427b0f7b3fbac447811c9c52db5bc79e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b457b779427b0f7b3fbac447811c9c52db5bc79e"}], "stats": {"total": 589, "additions": 588, "deletions": 1}, "files": [{"sha": "35a83852b08ccc63caeb04b4a193cfb58dd3e940", "filename": "gcc/ChangeLog", "status": "modified", "additions": 190, "deletions": 0, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d901d00e94e5a03c3321b37303eddd7c321ecb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d901d00e94e5a03c3321b37303eddd7c321ecb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8d901d00e94e5a03c3321b37303eddd7c321ecb", "patch": "@@ -1,3 +1,193 @@\n+2022-11-07  David Faust  <david.faust@oracle.com>\n+\n+\t* config/bpf/bpf.cc (handle_attr_preserve): Use maybe_make_core_relo().\n+\n+2022-11-07  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/55157\n+\t* range-op.cc (operator_mult::wi_fold): Optimize multiplications\n+\tby powers of 2.\n+\n+2022-11-07  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR middle-end/102566\n+\t* tree-ssa-ccp.cc (optimize_atomic_bit_test_and): Also handle\n+\tif (_5 < 0) and if (_5 >= 0).\n+\n+2022-11-07  Richard Purdie  <richard.purdie@linuxfoundation.org>\n+\n+\t* file-prefix-map.cc (remap_filename): Handle NULL filenames.\n+\n+2022-11-07  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR tree-optimization/107505\n+\t* tree-ssa-sink.cc (statement_sink_location): Additionally\n+\treject ECF_RETURNS_TWICE calls.\n+\n+2022-11-07  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107541\n+\t* range-op.cc (operator_div::fold_range): Restrict power of 2\n+\toptimization to positive numbers.\n+\n+2022-11-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-unswitch.cc (unswitch_predicate::count): New.\n+\t(unswitch_predicate::unswitch_predicate): Initialize count.\n+\t(init_loop_unswitch_info): First collect candidates and\n+\tdetermine the outermost loop to unswitch.\n+\t(tree_ssa_unswitch_loops): First perform all guard hoisting,\n+\tthen perform unswitching on innermost loop predicates.\n+\t(find_unswitching_predicates_for_bb): Keep track of the\n+\tmost profitable predicate to unswitch on.\n+\t(tree_unswitch_single_loop): Unswitch given predicate if\n+\tnot NULL.\n+\n+2022-11-07  Martin Liska  <mliska@suse.cz>\n+\t    Gerald Pfeifer  <gerald@pfeifer.com>\n+\n+\t* doc/invoke.texi: Improve wording.\n+\n+2022-11-07  Martin Liska  <mliska@suse.cz>\n+\n+\t* range-op.cc: Add final override keywords.\n+\n+2022-11-07  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR tree-optimization/107412\n+\t* gimple-fold.cc (gimple_fold_mask_load_store_mem_ref): Rename to ...\n+\t(gimple_fold_partial_load_store_mem_ref): ... this, add one parameter\n+\tmask_p indicating it's for mask or length, and add some handlings for\n+\tIFN LEN_{LOAD,STORE}.\n+\t(gimple_fold_mask_load): Rename to ...\n+\t(gimple_fold_partial_load): ... this, add one parameter mask_p.\n+\t(gimple_fold_mask_store): Rename to ...\n+\t(gimple_fold_partial_store): ... this, add one parameter mask_p.\n+\t(gimple_fold_call): Add the handlings for IFN LEN_{LOAD,STORE},\n+\tand adjust calls on gimple_fold_mask_load_store_mem_ref to\n+\tgimple_fold_partial_load_store_mem_ref.\n+\n+2022-11-07  Hu, Lin1  <lin1.hu@intel.com>\n+\n+\t* common/config/i386/cpuinfo.h\n+\t(get_intel_cpu): Handle Grand Ridge.\n+\t* common/config/i386/i386-common.cc\n+\t(processor_names): Add grandridge.\n+\t(processor_alias_table): Ditto.\n+\t* common/config/i386/i386-cpuinfo.h:\n+\t(enum processor_types): Add INTEL_GRANDRIDGE.\n+\t* config.gcc: Add -march=grandridge.\n+\t* config/i386/driver-i386.cc (host_detect_local_cpu):\n+\tHandle grandridge.\n+\t* config/i386/i386-c.cc (ix86_target_macros_internal):\n+\tDitto.\n+\t* config/i386/i386-options.cc (m_GRANDRIDGE): New define.\n+\t(processor_cost_table): Add grandridge.\n+\t* config/i386/i386.h (enum processor_type):\n+\tAdd PROCESSOR_GRANDRIDGE.\n+\t(PTA_GRANDRIDGE): Ditto.\n+\t* doc/extend.texi: Add grandridge.\n+\t* doc/invoke.texi: Ditto.\n+\n+2022-11-07  konglin1  <lingling.kong@intel.com>\n+\n+\t* config/i386/i386.opt:Add -mprefer-remote-atomic.\n+\t* config/i386/sync.md (atomic_<plus_logic><mode>):\n+\tNew define_expand.\n+\t(atomic_add<mode>): Rename to below one.\n+\t(atomic_add<mode>_1): To this.\n+\t(atomic_<logic><mode>): Ditto.\n+\t(atomic_<logic><mode>_1): Ditto.\n+\t* doc/invoke.texi: Add -mprefer-remote-atomic.\n+\n+2022-11-07  konglin1  <lingling.kong@intel.com>\n+\n+\t* common/config/i386/cpuinfo.h (get_available_features):\n+\tDetect raoint.\n+\t* common/config/i386/i386-common.cc (OPTION_MASK_ISA2_RAOINT_SET,\n+\tOPTION_MASK_ISA2_RAOINT_UNSET): New.\n+\t(ix86_handle_option): Handle -mraoint.\n+\t* common/config/i386/i386-cpuinfo.h (enum processor_features):\n+\tAdd FEATURE_RAOINT.\n+\t* common/config/i386/i386-isas.h: Add ISA_NAME_TABLE_ENTRY for\n+\traoint.\n+\t* config.gcc: Add raointintrin.h\n+\t* config/i386/cpuid.h (bit_RAOINT): New.\n+\t* config/i386/i386-builtin.def (BDESC): Add new builtins.\n+\t* config/i386/i386-c.cc (ix86_target_macros_internal): Define\n+\t__RAOINT__.\n+\t* config/i386/i386-isa.def (RAOINT): Add DEF_PTA(RAOINT).\n+\t* config/i386/i386-options.cc (ix86_valid_target_attribute_inner_p):\n+\tAdd -mraoint.\n+\t* config/i386/sync.md (rao_a<raointop><mode>): New define insn.\n+\t* config/i386/i386.opt: Add option -mraoint.\n+\t* config/i386/x86gprintrin.h: Include raointintrin.h.\n+\t* doc/extend.texi: Document raoint.\n+\t* doc/invoke.texi: Document -mraoint.\n+\t* doc/sourcebuild.texi: Document target raoint.\n+\t* config/i386/raointintrin.h: New file.\n+\n+2022-11-07  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* common/config/i386/cpuinfo.h\n+\t(get_intel_cpu): Handle Granite Rapids.\n+\t* common/config/i386/i386-common.cc:\n+\t(processor_names): Add graniterapids.\n+\t(processor_alias_table): Ditto.\n+\t* common/config/i386/i386-cpuinfo.h\n+\t(enum processor_subtypes): Add INTEL_GRANTIERAPIDS.\n+\t* config.gcc: Add -march=graniterapids.\n+\t* config/i386/driver-i386.cc (host_detect_local_cpu):\n+\tHandle graniterapids.\n+\t* config/i386/i386-c.cc (ix86_target_macros_internal):\n+\tDitto.\n+\t* config/i386/i386-options.cc (m_GRANITERAPIDS): New.\n+\t(processor_cost_table): Add graniterapids.\n+\t* config/i386/i386.h (enum processor_type):\n+\tAdd PROCESSOR_GRANITERAPIDS.\n+\t(PTA_GRANITERAPIDS): Ditto.\n+\t* doc/extend.texi: Add graniterapids.\n+\t* doc/invoke.texi: Ditto.\n+\n+2022-11-07  Haochen Jiang  <haochen.jiang@intel.com>\n+\t    Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\t* common/config/i386/cpuinfo.h (get_available_features):\n+\tDetect PREFETCHI.\n+\t* common/config/i386/i386-common.cc\n+\t(OPTION_MASK_ISA2_PREFETCHI_SET,\n+\tOPTION_MASK_ISA2_PREFETCHI_UNSET): New.\n+\t(ix86_handle_option): Handle -mprefetchi.\n+\t* common/config/i386/i386-cpuinfo.h\n+\t(enum processor_features): Add FEATURE_PREFETCHI.\n+\t* common/config/i386/i386-isas.h: Add ISA_NAME_TABLE_ENTRY\n+\tfor prefetchi.\n+\t* config.gcc: Add prfchiintrin.h.\n+\t* config/i386/cpuid.h (bit_PREFETCHI): New.\n+\t* config/i386/i386-builtin-types.def:\n+\tAdd DEF_FUNCTION_TYPE (VOID, PCVOID, INT)\n+\tand DEF_FUNCTION_TYPE (VOID, PCVOID, INT, INT, INT).\n+\t* config/i386/i386-builtin.def (BDESC): Add new builtins.\n+\t* config/i386/i386-c.cc (ix86_target_macros_internal):\n+\tDefine __PREFETCHI__.\n+\t* config/i386/i386-expand.cc: Handle new builtins.\n+\t* config/i386/i386-isa.def (PREFETCHI):\n+\tAdd DEF_PTA(PREFETCHI).\n+\t* config/i386/i386-options.cc\n+\t(ix86_valid_target_attribute_inner_p): Handle prefetchi.\n+\t* config/i386/i386.md (prefetchi): New define_insn.\n+\t* config/i386/i386.opt: Add option -mprefetchi.\n+\t* config/i386/predicates.md (local_func_symbolic_operand):\n+\tNew predicates.\n+\t* config/i386/x86gprintrin.h: Include prfchiintrin.h.\n+\t* config/i386/xmmintrin.h (enum _mm_hint): New enum for\n+\tprefetchi.\n+\t(_mm_prefetch): Handle the highest bit of enum.\n+\t* doc/extend.texi: Document prefetchi.\n+\t* doc/invoke.texi: Document -mprefetchi.\n+\t* doc/sourcebuild.texi: Document target prefetchi.\n+\t* config/i386/prfchiintrin.h: New file.\n+\n 2022-11-06  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* optabs.cc (can_vec_set_var_idx_p): Use operand[2]"}, {"sha": "f47121e1a8983ea7cbeaf3924cd2d2ff201be4a4", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d901d00e94e5a03c3321b37303eddd7c321ecb/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d901d00e94e5a03c3321b37303eddd7c321ecb/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=f8d901d00e94e5a03c3321b37303eddd7c321ecb", "patch": "@@ -1 +1 @@\n-20221107\n+20221108"}, {"sha": "f74024705c000e3f23ec0a91b4d6ae9457ab6030", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 219, "deletions": 0, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d901d00e94e5a03c3321b37303eddd7c321ecb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d901d00e94e5a03c3321b37303eddd7c321ecb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f8d901d00e94e5a03c3321b37303eddd7c321ecb", "patch": "@@ -1,3 +1,222 @@\n+2022-11-07  Cedric Landet  <landet@adacore.com>\n+\n+\t* doc/gnat_ugn/gnat_and_program_execution.rst: Mention the needed\n+\t-no-pie for windows to use gprof.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* lib-xref.adb (Hash): Tune hash function.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Non_Significant_Pragma_Reference): Detect\n+\treferences with aggregates; only assign local variables Id and C\n+\twhen necessary.\n+\n+2022-11-07  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch4.adb\n+\t(Component_Equality, Expand_Array_Equality)\n+\t(Expand_Record_Equality): Use named notation.\n+\n+2022-11-07  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch4.adb\n+\t(Expand_Array_Equality): Do not test Ltyp = Rtyp here, because\n+\tthat is necessarily true. Move assertion thereof to more general\n+\tplace.\n+\t(Expand_Composite_Equality): Pass in Outer_Type, for use in\n+\twarnings. Rename Typ to be Comp_Type, to more clearly distinguish\n+\tit from Outer_Type. Print warning when appropriate.\n+\t* exp_ch4.ads: Minor comment fix.\n+\t* errout.ads: There is no such pragma as Warning_As_Pragma --\n+\tWarning_As_Error must have been intended. Improve comment for ?x?.\n+\t* exp_ch3.adb\n+\t(Build_Untagged_Equality): Update comment to be accurate for more\n+\trecent versions of Ada.\n+\t* sem_case.adb\n+\t(Choice_Analysis): Declare user-defined \"=\" functions as abstract.\n+\t* sem_util.ads\n+\t(Is_Bounded_String): Give RM reference in comment.\n+\t* warnsw.ads, warnsw.adb\n+\t(Warn_On_Ignored_Equality): Implement new warning switch -gnatw_q.\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n+\tDocument new warning switch.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aux.ads (Is_Body): Annotate with Inline.\n+\t* sem_util.ads (Is_Body_Or_Package_Declaration): Likewise.\n+\n+2022-11-07  Bob Duff  <duff@adacore.com>\n+\n+\t* freeze.adb\n+\t(Build_Inherited_Condition_Pragmas): Do nothing if A_Post is\n+\tempty.\n+\n+2022-11-07  Quentin Ochem  <ochem@adacore.com>\n+\t    Steve Baird  <baird@adacore.com>\n+\n+\t* bindgen.adb: fixed the way the device init and final symbols are\n+\tcomputed, re-using the normal way these symbols would be computed\n+\twith a __device_ prefix. Also fixed the \"is null;\" procedure on\n+\tthe host side which are not Ada 95, replaced with a procedure\n+\traising an exception as it should never be called. Remove the\n+\tunused function Device_Ada_Final_Link_Name.\n+\n+2022-11-07  Steve Baird  <baird@adacore.com>\n+\n+\t* opt.ads: Declare new string pointer variable, CUDA_Device_Library_Name.\n+\tModify comments for existing Boolean variable Enable_CUDA_Device_Expansion.\n+\t* switch-b.adb: When \"-d_c\" switch is encountered, check that the next\n+\tcharacter is an \"'='; use the remaining characters to initialize\n+\tOpt.CUDA_Device_Library_Name.\n+\t* bindgen.adb: Remove (for now) most support for host-side invocation of\n+\tdevice-side finalization. Make use of the new CUDA_Device_Library_Name\n+\tin determining the string used to refer (on the host side) to the\n+\tdevice-side initialization procedure. Declare the placeholder routine\n+\tthat is named in the CUDA_Execute pragma (and the CUDA_Register_Function\n+\tcall) as an exported null procedure, rather than as an imported procedure.\n+\tIt is not clear whether it is really necessary to specify the link-name\n+\tfor this should-never-be-called subprogram on the host side, but for now it\n+\tshouldn't hurt to do so.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch6.adb (Expand_Protected_Subprogram_Call): Examine scope\n+\ttree and not the scope stack.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* mdll.ads (Build_Import_Library): Fix grammar in comment.\n+\t* mdll.adb (Build_Import_Library): Directly execute code of a\n+\tnested routine; rename No_Lib_Prefix to Strip_Lib_Prefix.\n+\n+2022-11-07  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_warn.adb\n+\t(Check_For_Warnings): Remove unnecessary exception handler.\n+\t(Warn_On_Known_Condition): Suppress warning when we detect a True\n+\tor False that has been turned into a more complex expression\n+\tbecause True is represented as \"nonzero\". (Note that the complex\n+\texpression will subsequently be constant-folded to a Boolean True\n+\tor False). Also simplify to always print \"condition is always ...\"\n+\tinstead of special-casing object names. The special case was\n+\tunhelpful, and indeed wrong when the expression is a literal.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* checks.adb (Safe_To_Capture_In_Parameter_Value): Remove.\n+\t* sem_util.adb (Safe_To_Capture_Value): Stop search at the current\n+\tbody.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_In_Out): Remove No_ prefix; flip return\n+\tvalues between True and False; adapt caller.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Add_Call): Just look at Instantiation_Depth.\n+\t* sem_ch3.adb (Derive_Subprograms): Likewise.\n+\t* sem_warn.adb (Check_References): Remove redundant filtering with\n+\tInstantiation_Depth that follows filtering with\n+\tInstantiation_Location.\n+\t* sinput.adb (Instantiation_Depth): Reuse Instantiation_Location.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb\n+\t(No_Warn_On_In_Out): For subprograms we can simply call\n+\tWarnings_Off.\n+\t(Output_Non_Modified_In_Out_Warnings): Remove repeated\n+\tsuppression.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Delta_Array_Aggregate): Reject boxes in\n+\tdelta array aggregates.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Enclosing_Declaration_Or_Statement): Moved to\n+\tSem_Util.\n+\t* sem_util.ads (Enclosing_Declaration_Or_Statement): Moved from\n+\tSem_Res.\n+\t* sem_util.adb (Enclosing_Declaration_Or_Statement): Likewise.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_res.adb (Resolve): Only call Comes_From_Predefined_Lib_Unit\n+\twhen its result might be needed.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch12.adb (Check_Generic_Actuals): Remove redundant parens;\n+\trefactor an excessive if-statement; remove repeated call to Node.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* inline.adb (Establish_Actual_Mapping_For_Inlined_Call): Move\n+\tcomment next to a condition that it describes.\n+\n+2022-11-07  Steve Baird  <baird@adacore.com>\n+\n+\t* exp_put_image.adb\n+\t(Image_Should_Call_Put_Image): Correctly handle the case of an\n+\tinherited Put_Image aspect specification for a scalar type.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnarl/s-interr.adb: Tune whitespace.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnarl/s-interr.adb: Reorder context items and pragmas.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch4.adb\n+\t(Expand_Modular_Addition): Rewrite using Make_XXX calls.\n+\t(Expand_Modular_Op): Likewise.\n+\t(Expand_Modular_Subtraction): Likewise.\n+\t* exp_imgv.adb\n+\t(Expand_User_Defined_Enumeration_Image): Likewise.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* checks.adb (Apply_Arithmetic_Overflow_Strict): Rewrite using a\n+\tnewly created operator node.\n+\t* exp_ch4.adb (Expand_Array_Comparison): Likewise.\n+\t* exp_ch6.adb (Add_Call_By_Copy_Code): Rewriting actual parameter\n+\tusing its own location and not the location of the subprogram\n+\tcall.\n+\t* sem_warn.adb (Check_References): Looping with Original_Node is\n+\tno longer needed.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Is_In_Context_Clause): Rewrite without negations\n+\tand inequalities.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma [Pragma_Obsolescent]): Reject\n+\tmisplaced pragma.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Output_Obsolescent_Entity_Warnings): Tag warnings\n+\tabout obsolescent functions just like we tag similar warnings for\n+\tpackages and procedures.\n+\n+2022-11-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference): Remove useless\n+\tskipping for attribute Input.\n+\n 2022-11-04  Justin Squirek  <squirek@adacore.com>\n \n \t* exp_attr.adb (Expand_N_Attribute_Reference): Skip operand"}, {"sha": "69755e261a77b72770a9d857007d875c4b7413b0", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d901d00e94e5a03c3321b37303eddd7c321ecb/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d901d00e94e5a03c3321b37303eddd7c321ecb/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f8d901d00e94e5a03c3321b37303eddd7c321ecb", "patch": "@@ -1,3 +1,12 @@\n+2022-11-07  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/107508\n+\t* trans-array.cc (gfc_alloc_allocatable_for_assignment): Fix\n+\tstring-length check, plug memory leak, and avoid generation of\n+\teffectively no-op code.\n+\t* trans-expr.cc (alloc_scalar_allocatable_for_assignment): Extend\n+\tcomment; minor cleanup.\n+\n 2022-11-03  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* openmp.cc (gfc_match_omp_clauses): Permit derived types for"}, {"sha": "e2232f687bac86779844e8d41acc32e5e1bd8893", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d901d00e94e5a03c3321b37303eddd7c321ecb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d901d00e94e5a03c3321b37303eddd7c321ecb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8d901d00e94e5a03c3321b37303eddd7c321ecb", "patch": "@@ -1,3 +1,102 @@\n+2022-11-07  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/55157\n+\t* gcc.dg/tree-ssa/pr55157.c: New test.\n+\n+2022-11-07  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\tPR middle-end/102566\n+\t* g++.target/i386/pr102566-7.C\n+\n+2022-11-07  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/abi/lambda-tpl1.h: Add more cases.\n+\t* g++.dg/abi/lambda-tpl1-17.C: Add checks.\n+\t* g++.dg/abi/lambda-tpl1-18.C: Likewise.\n+\t* g++.dg/abi/lambda-tpl1-18vs17.C: Likewise.\n+\n+2022-11-07  Alexander Monakov  <amonakov@ispras.ru>\n+\n+\tPR tree-optimization/107505\n+\t* gcc.dg/pr107505.c: New test.\n+\n+2022-11-07  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/107541\n+\t* gcc.dg/tree-ssa/pr107541.c: New test.\n+\n+2022-11-07  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/107508\n+\t* gfortran.dg/widechar_11.f90: New test.\n+\n+2022-11-07  konglin1  <lingling.kong@intel.com>\n+\n+\t* gcc.target/i386/sse-22.c: Fix typo in pragma GCC target.\n+\n+2022-11-07  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR tree-optimization/107412\n+\t* gcc.target/powerpc/pr107412.c: New test.\n+\t* gcc.target/powerpc/p9-vec-length-epil-8.c: Adjust scan times for\n+\tfolded LEN_LOAD.\n+\n+2022-11-07  Hu, Lin1  <lin1.hu@intel.com>\n+\n+\t* g++.target/i386/mv16.C: Add grandridge.\n+\t* gcc.target/i386/funcspec-56.inc: Handle new march.\n+\n+2022-11-07  konglin1  <lingling.kong@intel.com>\n+\n+\t* gcc.target/i386/raoint-atomic-fetch.c: New test.\n+\n+2022-11-07  konglin1  <lingling.kong@intel.com>\n+\n+\t* g++.dg/other/i386-2.C: Add -mraoint.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n+\t* gcc.target/i386/sse-12.c: Add -mraoint.\n+\t* gcc.target/i386/sse-13.c: Ditto.\n+\t* gcc.target/i386/sse-14.c: Ditto.\n+\t* gcc.target/i386/sse-22.c: Add raoint target.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* lib/target-supports.exp: Add check_effective_target_raoint.\n+\t* gcc.target/i386/rao-helper.h: New test.\n+\t* gcc.target/i386/raoint-1.c: Ditto.\n+\t* gcc.target/i386/raoint-aadd-2.c: Ditto.\n+\t* gcc.target/i386/raoint-aand-2.c: Ditto.\n+\t* gcc.target/i386/raoint-aor-2.c: Ditto.\n+\t* gcc.target/i386/raoint-axor-2.c: Ditto.\n+\t* gcc.target/i386/x86gprintrin-1.c: Ditto.\n+\t* gcc.target/i386/x86gprintrin-2.c: Ditto.\n+\t* gcc.target/i386/x86gprintrin-3.c: Ditto.\n+\t* gcc.target/i386/x86gprintrin-4.c: Ditto.\n+\t* gcc.target/i386/x86gprintrin-5.c: Ditto.\n+\n+2022-11-07  Haochen Jiang  <haochen.jiang@intel.com>\n+\n+\t* g++.target/i386/mv16.C: Add graniterapids.\n+\t* gcc.target/i386/funcspec-56.inc: Handle new march.\n+\n+2022-11-07  Haochen Jiang  <haochen.jiang@intel.com>\n+\t    Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\t* g++.dg/other/i386-2.C: Add -mprefetchi.\n+\t* g++.dg/other/i386-3.C: Ditto.\n+\t* gcc.target/i386/avx-1.c: Ditto.\n+\t* gcc.target/i386/funcspec-56.inc: Add new target attribute.\n+\t* gcc.target/i386/sse-13.c: Add -mprefetchi.\n+\t* gcc.target/i386/sse-23.c: Ditto.\n+\t* gcc.target/i386/x86gprintrin-1.c: Ditto.\n+\t* gcc.target/i386/x86gprintrin-2.c: Ditto.\n+\t* gcc.target/i386/x86gprintrin-3.c: Ditto.\n+\t* gcc.target/i386/x86gprintrin-4.c: Ditto.\n+\t* gcc.target/i386/x86gprintrin-5.c: Ditto.\n+\t* gcc.target/i386/prefetchi-1.c: New test.\n+\t* gcc.target/i386/prefetchi-2.c: Ditto.\n+\t* gcc.target/i386/prefetchi-3.c: Ditto.\n+\t* gcc.target/i386/prefetchi-4.c: Ditto.\n+\n 2022-11-06  Patrick Palka  <ppalka@redhat.com>\n \n \t* g++.dg/special/initpri3.C: New test."}, {"sha": "5874c62a943aa56360f96aa6845a7e3c8696a867", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8d901d00e94e5a03c3321b37303eddd7c321ecb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8d901d00e94e5a03c3321b37303eddd7c321ecb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f8d901d00e94e5a03c3321b37303eddd7c321ecb", "patch": "@@ -1,3 +1,73 @@\n+2022-11-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/107562\n+\t* src/c++17/floating_from_chars.cc (__strtof128): Put __asm before\n+\t__attribute__.\n+\t* src/c++17/floating_to_chars.cc (__strfromf128): Likewise.\n+\n+2022-11-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (as_rvalue_view): Define.\n+\t(enable_borrowed_range<as_rvalue_view>): Define.\n+\t(views::__detail::__can_as_rvalue_view): Define.\n+\t(views::_AsRvalue, views::as_rvalue): Define.\n+\t* testsuite/std/ranges/adaptors/as_rvalue/1.cc: New test.\n+\n+2022-11-07  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (__maybe_const_t): New alias for\n+\t__detail::__maybe_const_t.\n+\t(__detail::__cartesian_product_is_random_access): Define.\n+\t(__detail::__cartesian_product_common_arg): Define.\n+\t(__detail::__cartesian_product_is_bidirectional): Define.\n+\t(__detail::__cartesian_product_is_common): Define.\n+\t(__detail::__cartesian_product_is_sized): Define.\n+\t(__detail::__cartesian_is_sized_sentinel): Define.\n+\t(__detail::__cartesian_common_arg_end): Define.\n+\t(cartesian_product_view): Define.\n+\t(cartesian_product_view::_Iterator): Define.\n+\t(views::__detail::__can_cartesian_product_view): Define.\n+\t(views::_CartesianProduct, views::cartesian_product): Define.\n+\t* testsuite/std/ranges/cartesian_product/1.cc: New test.\n+\n+2022-11-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libstdc++/107468\n+\t* src/c++17/fast_float/MERGE: Adjust for merge from upstream.\n+\t* src/c++17/fast_float/LOCAL_PATCHES: Remove commits that were\n+\tupstreamed.\n+\t* src/c++17/fast_float/README.md: Merge from fast_float\n+\t662497742fea7055f0e0ee27e5a7ddc382c2c38e commit.\n+\t* src/c++17/fast_float/fast_float.h: Likewise.\n+\t* testsuite/20_util/from_chars/pr107468.cc: New test.\n+\n+2022-11-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* include/std/charconv (from_chars, to_chars): Add _Float128\n+\toverfloads if _GLIBCXX_HAVE_FLOAT128_MATH is defined.\n+\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.31): Export\n+\t_ZSt8to_charsPcS_DF128_, _ZSt8to_charsPcS_DF128_St12chars_format,\n+\t_ZSt8to_charsPcS_DF128_St12chars_formati and\n+\t_ZSt10from_charsPKcS0_RDF128_St12chars_format.\n+\t* src/c++17/floating_from_chars.cc (USE_STRTOF128_FOR_FROM_CHARS):\n+\tDefine if needed.\n+\t(__strtof128): Declare.\n+\t(from_chars_impl): Handle _Float128.\n+\t(from_chars): New _Float128 overload if USE_STRTOF128_FOR_FROM_CHARS\n+\tis define.\n+\t* src/c++17/floating_to_chars.cc (__strfromf128): Declare.\n+\t(FLOAT128_TO_CHARS): Define even when _Float128 is supported and\n+\twider than long double.\n+\t(F128_type): Use _Float128 for that case.\n+\t(floating_type_traits): Specialize for F128_type rather than\n+\t__float128.\n+\t(sprintf_ld): Add length argument.  Handle _Float128.\n+\t(__floating_to_chars_shortest, __floating_to_chars_precision):\n+\tPass length to sprintf_ld.\n+\t(to_chars): Add _Float128 overloads for the F128_type being\n+\t_Float128 cases.\n+\t* testsuite/20_util/to_chars/float128_c++23.cc: New test.\n+\n 2022-11-06  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/bits/atomic_wait.h (_detail::__platform_wait_alignment):"}]}