{"sha": "9a875db43cd4210843c480c8df26a1d6624d057d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE4NzVkYjQzY2Q0MjEwODQzYzQ4MGM4ZGYyNmExZDY2MjRkMDU3ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-06-18T10:08:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-06-18T10:12:43Z"}, "message": "forwprop: simplify_vector_constructor follow-up fix [PR95713]\n\nAs the following testcase shows, the exception for the aarch64\nvec_pack_trunc_di is not sufficient on x86, the halfvectype\n\"vectors\" have SImode but the x86 vec_pack_trunc_si meant for\nthe bool bitmasks combines 2x SImode into DImode, while in the\ntestcase the halfvectype is 1x SImode \"vector\" with SImode and\nresult is 2x HImode \"vector\" with SImode.\n\nRichard Sandiford's reply:\nFWIW, since the aarch64 case was only found by inspection and might\nnot be useful, personally I'd prefer to drop that case after all.\n\n2020-06-18  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/95713\n\t* tree-ssa-forwprop.c (simplify_vector_constructor): Don't allow\n\tscalar mode halfvectype other than vector boolean for\n\tVEC_PACK_TRUNC_EXPR.\n\n\t* gcc.dg/pr95713.c: New test.", "tree": {"sha": "d65bc1452fa2804adeb33052525ab377885579dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d65bc1452fa2804adeb33052525ab377885579dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a875db43cd4210843c480c8df26a1d6624d057d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a875db43cd4210843c480c8df26a1d6624d057d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a875db43cd4210843c480c8df26a1d6624d057d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a875db43cd4210843c480c8df26a1d6624d057d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5553433d7b38379f8dac17502f55fff1c9cf3827", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5553433d7b38379f8dac17502f55fff1c9cf3827", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5553433d7b38379f8dac17502f55fff1c9cf3827"}], "stats": {"total": 26, "additions": 19, "deletions": 7}, "files": [{"sha": "b167842b963097c23242398d669b3bb57127722a", "filename": "gcc/testsuite/gcc.dg/pr95713.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a875db43cd4210843c480c8df26a1d6624d057d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr95713.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a875db43cd4210843c480c8df26a1d6624d057d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr95713.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr95713.c?ref=9a875db43cd4210843c480c8df26a1d6624d057d", "patch": "@@ -0,0 +1,15 @@\n+/* PR target/95713 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wno-psabi -w\" } */\n+/* { dg-additional-options \"-mavx512bw\" { target i?86-*-* x86_64-*-* } } */\n+\n+typedef int v2si __attribute__((vector_size (8)));\n+typedef short int v2hi __attribute__((vector_size (4)));\n+void foo (v2hi);\n+\n+void\n+bar (v2si x)\n+{\n+  v2hi a = (v2hi) { (short) x[0], (short) x[1] };\n+  foo (4 > a);\n+}"}, {"sha": "a4aed3ccade8fb85af19c572887299b0dab50e2c", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a875db43cd4210843c480c8df26a1d6624d057d/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a875db43cd4210843c480c8df26a1d6624d057d/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=9a875db43cd4210843c480c8df26a1d6624d057d", "patch": "@@ -2401,8 +2401,8 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \t      && (dblvectype\n \t\t  = build_vector_type (TREE_TYPE (TREE_TYPE (orig[0])),\n \t\t\t\t       nelts * 2))\n-\t      /* Only use it for vector modes or for vector booleans represented\n-\t\t as scalar bitmasks.  See PR95528.  */\n+\t      /* Only use it for vector modes or for vector booleans\n+\t\t represented as scalar bitmasks.  See PR95528.  */\n \t      && (VECTOR_MODE_P (TYPE_MODE (dblvectype))\n \t\t  || VECTOR_BOOLEAN_TYPE_P (dblvectype))\n \t      && (optab = optab_for_tree_code (FLOAT_TYPE_P (TREE_TYPE (type))\n@@ -2447,12 +2447,9 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \t\t         = build_vector_type (TREE_TYPE (TREE_TYPE (orig[0])),\n \t\t\t\t\t      nelts / 2))\n \t\t   /* Only use it for vector modes or for vector booleans\n-\t\t      represented as scalar bitmasks, or allow halfvectype\n-\t\t      be the element mode.  See PR95528.  */\n+\t\t      represented as scalar bitmasks.  See PR95528.  */\n \t\t   && (VECTOR_MODE_P (TYPE_MODE (halfvectype))\n-\t\t       || VECTOR_BOOLEAN_TYPE_P (halfvectype)\n-\t\t       || (TYPE_MODE (halfvectype)\n-\t\t\t   == TYPE_MODE (TREE_TYPE (halfvectype))))\n+\t\t       || VECTOR_BOOLEAN_TYPE_P (halfvectype))\n \t\t   && (optab = optab_for_tree_code (VEC_PACK_TRUNC_EXPR,\n \t\t\t\t\t\t    halfvectype,\n \t\t\t\t\t\t    optab_default))"}]}