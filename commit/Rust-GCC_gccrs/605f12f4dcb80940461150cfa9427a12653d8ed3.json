{"sha": "605f12f4dcb80940461150cfa9427a12653d8ed3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA1ZjEyZjRkY2I4MDk0MDQ2MTE1MGNmYTk0MjdhMTI2NTNkOGVkMw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-07-08T05:38:12Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-07-08T05:38:12Z"}, "message": "re PR middle-end/60226 (ICE initializing array of elements with too large alignment)\n\n\tPR c/60226\n\t* fold-const.c (round_up_loc): Change the parameter type.\n\tRemove assert.\n\t* fold-const.h (round_up_loc): Adjust declaration.\n\t* stor-layout.c (finalize_record_size): Check for too large types.\n\n\t* c-c++-common/pr60226.c: New test.\n\nFrom-SVN: r212346", "tree": {"sha": "e4f77420db83c7c0c601b3cce97560e8b1722155", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4f77420db83c7c0c601b3cce97560e8b1722155"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/605f12f4dcb80940461150cfa9427a12653d8ed3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605f12f4dcb80940461150cfa9427a12653d8ed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/605f12f4dcb80940461150cfa9427a12653d8ed3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/605f12f4dcb80940461150cfa9427a12653d8ed3/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09aa4b1fac1f92c5d64bb21d5e51751786831186", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09aa4b1fac1f92c5d64bb21d5e51751786831186", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09aa4b1fac1f92c5d64bb21d5e51751786831186"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "edf3dc11d5e310df392fd3978b0e1b7fb499e9c0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605f12f4dcb80940461150cfa9427a12653d8ed3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605f12f4dcb80940461150cfa9427a12653d8ed3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=605f12f4dcb80940461150cfa9427a12653d8ed3", "patch": "@@ -1,3 +1,11 @@\n+2014-07-08  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/60226\n+\t* fold-const.c (round_up_loc): Change the parameter type.\n+\tRemove assert.\n+\t* fold-const.h (round_up_loc): Adjust declaration.\n+\t* stor-layout.c (finalize_record_size): Check for too large types.\n+\n 2014-07-07  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* symtab.c: Include calls.h"}, {"sha": "c57ac7bd1a9abee839cd878fa70c28103e979af0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605f12f4dcb80940461150cfa9427a12653d8ed3/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605f12f4dcb80940461150cfa9427a12653d8ed3/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=605f12f4dcb80940461150cfa9427a12653d8ed3", "patch": "@@ -16647,11 +16647,10 @@ fold_ignored_result (tree t)\n /* Return the value of VALUE, rounded up to a multiple of DIVISOR. */\n \n tree\n-round_up_loc (location_t loc, tree value, int divisor)\n+round_up_loc (location_t loc, tree value, unsigned int divisor)\n {\n   tree div = NULL_TREE;\n \n-  gcc_assert (divisor > 0);\n   if (divisor == 1)\n     return value;\n "}, {"sha": "3b5fd8476d6219463672f32903d4d4bf4ec9b75e", "filename": "gcc/fold-const.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605f12f4dcb80940461150cfa9427a12653d8ed3/gcc%2Ffold-const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605f12f4dcb80940461150cfa9427a12653d8ed3/gcc%2Ffold-const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.h?ref=605f12f4dcb80940461150cfa9427a12653d8ed3", "patch": "@@ -144,7 +144,7 @@ extern tree combine_comparisons (location_t, enum tree_code, enum tree_code,\n extern void debug_fold_checksum (const_tree);\n extern bool may_negate_without_overflow_p (const_tree);\n #define round_up(T,N) round_up_loc (UNKNOWN_LOCATION, T, N)\n-extern tree round_up_loc (location_t, tree, int);\n+extern tree round_up_loc (location_t, tree, unsigned int);\n #define round_down(T,N) round_down_loc (UNKNOWN_LOCATION, T, N)\n extern tree round_down_loc (location_t, tree, int);\n extern tree size_int_kind (HOST_WIDE_INT, enum size_type_kind);"}, {"sha": "19e7adbcbdddf8892ec3778adfc17cc2abed5018", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605f12f4dcb80940461150cfa9427a12653d8ed3/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605f12f4dcb80940461150cfa9427a12653d8ed3/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=605f12f4dcb80940461150cfa9427a12653d8ed3", "patch": "@@ -1587,6 +1587,11 @@ finalize_record_size (record_layout_info rli)\n     unpadded_size_unit\n       = size_binop (PLUS_EXPR, unpadded_size_unit, size_one_node);\n \n+  if (TREE_CODE (unpadded_size_unit) == INTEGER_CST\n+      && !TREE_OVERFLOW (unpadded_size_unit)\n+      && !valid_constant_size_p (unpadded_size_unit))\n+    error (\"type %qT is too large\", rli->t);\n+\n   /* Round the size up to be a multiple of the required alignment.  */\n   TYPE_SIZE (rli->t) = round_up (unpadded_size, TYPE_ALIGN (rli->t));\n   TYPE_SIZE_UNIT (rli->t)"}, {"sha": "9940e724cb309b36d787d99859734d6d1b0a85ea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605f12f4dcb80940461150cfa9427a12653d8ed3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605f12f4dcb80940461150cfa9427a12653d8ed3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=605f12f4dcb80940461150cfa9427a12653d8ed3", "patch": "@@ -1,3 +1,8 @@\n+2014-07-08  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/60226\n+\t* c-c++-common/pr60226.c: New test.\n+\n 2014-07-07  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/61459"}, {"sha": "3a1c261fa931ac0fcb0d39f8a712c4fb89606ef3", "filename": "gcc/testsuite/c-c++-common/pr60226.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/605f12f4dcb80940461150cfa9427a12653d8ed3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr60226.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/605f12f4dcb80940461150cfa9427a12653d8ed3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr60226.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr60226.c?ref=605f12f4dcb80940461150cfa9427a12653d8ed3", "patch": "@@ -0,0 +1,14 @@\n+/* PR c/60226 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-c++-compat\" { target c } } */\n+\n+typedef int __attribute__ ((aligned (1 << 28))) int28;\n+int28 foo[4] = {}; /* { dg-error \"alignment of array elements is greater than element size\" } */\n+typedef int __attribute__ ((aligned (1 << 29))) int29; /* { dg-error \"requested alignment is too large\" } */\n+\n+void\n+f (void)\n+{\n+  struct { __attribute__((aligned (1 << 28))) double a; } x1;\n+  struct { __attribute__((aligned (1 << 29))) double a; } x2; /* { dg-error \"requested alignment is too large\" } */\n+}"}]}