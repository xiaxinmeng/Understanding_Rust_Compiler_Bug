{"sha": "a5812bdc55ed682d3dbc166cddd273f4edea0b0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU4MTJiZGM1NWVkNjgyZDNkYmMxNjZjZGRkMjczZjRlZGVhMGIwYg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2010-11-14T13:10:41Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2010-11-14T13:10:41Z"}, "message": "re PR c/46462 (Revision 166700 caused new C test failures)\n\n2010-11-13  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR c/46462\n\t* c-decl.c (declspecs_add_type): Make variables with error types\n\tintegers.\n\t* c-parser.c (c_parser_next_tokens_start_declaration): Two IDs\n\tdo not start a declaration before an Objective-C foreach.\n\t(c_parser_declaration_or_fndef): Improve recovery after unknown\n\ttype name.\n\t(c_parser_for_statement): Hoist entrance of \"foreach context\"\n\tbefore ifs, add corresponding reset where it was missing.  Do\n\tnot set objc_could_be_foreach_context for C.\n\nFrom-SVN: r166732", "tree": {"sha": "4e246b3e80d5dc1a3504b96a42dad8946d9320d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e246b3e80d5dc1a3504b96a42dad8946d9320d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5812bdc55ed682d3dbc166cddd273f4edea0b0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5812bdc55ed682d3dbc166cddd273f4edea0b0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5812bdc55ed682d3dbc166cddd273f4edea0b0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5812bdc55ed682d3dbc166cddd273f4edea0b0b/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae788515d2b28952fdee5a83b010667dc9285732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae788515d2b28952fdee5a83b010667dc9285732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae788515d2b28952fdee5a83b010667dc9285732"}], "stats": {"total": 35, "additions": 29, "deletions": 6}, "files": [{"sha": "ea3e335bbd147ca323c821cb6042753cb716a1a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5812bdc55ed682d3dbc166cddd273f4edea0b0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5812bdc55ed682d3dbc166cddd273f4edea0b0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5812bdc55ed682d3dbc166cddd273f4edea0b0b", "patch": "@@ -1,3 +1,16 @@\n+2010-11-13  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR c/46462\n+\t* c-decl.c (declspecs_add_type): Make variables with error types\n+\tintegers.\n+\t* c-parser.c (c_parser_next_tokens_start_declaration): Two IDs\n+\tdo not start a declaration before an Objective-C foreach.\n+\t(c_parser_declaration_or_fndef): Improve recovery after unknown\n+\ttype name.\n+\t(c_parser_for_statement): Hoist entrance of \"foreach context\"\n+\tbefore ifs, add corresponding reset where it was missing.  Do\n+\tnot set objc_could_be_foreach_context for C.\n+\n 2010-11-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR tree-optimization/45722\n@@ -94,7 +107,7 @@\n \tCheck that the pubtypes table has at least one unpruned entry before\n \ttrying to emit it.\n \n-2010-10-30  Paolo Bonzini  <bonzini@gnu.org>\n+2010-11-13  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR c/20385\n \t* c-parser.c (c_parser_next_token_starts_declaration): Rename to..."}, {"sha": "bab402d90f81fa221bc4935a4ccb2ce3de8d7eba", "filename": "gcc/c-decl.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5812bdc55ed682d3dbc166cddd273f4edea0b0b/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5812bdc55ed682d3dbc166cddd273f4edea0b0b/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=a5812bdc55ed682d3dbc166cddd273f4edea0b0b", "patch": "@@ -9324,6 +9324,11 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n \t}\n       specs->type = type;\n     }\n+  else\n+    {\n+      /* Set a dummy type here to avoid warning about implicit 'int'.  */\n+      specs->type = integer_type_node;\n+    }\n \n   return specs;\n }"}, {"sha": "577528d8b44aac73d242249ae6c5413cafc2ec65", "filename": "gcc/c-parser.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5812bdc55ed682d3dbc166cddd273f4edea0b0b/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5812bdc55ed682d3dbc166cddd273f4edea0b0b/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=a5812bdc55ed682d3dbc166cddd273f4edea0b0b", "patch": "@@ -641,7 +641,10 @@ c_parser_next_tokens_start_declaration (c_parser *parser)\n       && token->id_kind == C_ID_ID\n       && (c_parser_peek_2nd_token (parser)->type == CPP_NAME\n           || c_parser_peek_2nd_token (parser)->type == CPP_MULT)\n-      && !lookup_name (token->value))\n+      && !lookup_name (token->value)\n+\n+      /* Do not try too hard when we could have \"object in array\".  */\n+      && !parser->objc_could_be_foreach_context)\n     return true;\n \n   return false;\n@@ -1373,10 +1376,12 @@ c_parser_declaration_or_fndef (c_parser *parser, bool fndef_ok,\n                 c_parser_peek_token (parser)->value);\n \n       /* Parse declspecs normally to get a correct pointer type, but avoid\n-         a further \"fails to be a type name\" error.  */\n+         a further \"fails to be a type name\" error.  Refuse nested functions\n+         since it is not how the user likely wants us to recover.  */\n       c_parser_peek_token (parser)->type = CPP_KEYWORD;\n       c_parser_peek_token (parser)->keyword = RID_VOID;\n       c_parser_peek_token (parser)->value = error_mark_node;\n+      fndef_ok = !nested;\n     }\n \n   c_parser_declspecs (parser, specs, true, true, start_attr_ok);\n@@ -4653,14 +4658,15 @@ c_parser_for_statement (c_parser *parser)\n     {\n       /* Parse the initialization declaration or expression.  */\n       object_expression = error_mark_node;\n+      parser->objc_could_be_foreach_context = c_dialect_objc ();\n       if (c_parser_next_token_is (parser, CPP_SEMICOLON))\n \t{\n+\t  parser->objc_could_be_foreach_context = false;\n \t  c_parser_consume_token (parser);\n \t  c_finish_expr_stmt (loc, NULL_TREE);\n \t}\n       else if (c_parser_next_tokens_start_declaration (parser))\n \t{\n-\t  parser->objc_could_be_foreach_context = true;\n \t  c_parser_declaration_or_fndef (parser, true, true, true, true, true, \n \t\t\t\t\t &object_expression);\n \t  parser->objc_could_be_foreach_context = false;\n@@ -4690,7 +4696,6 @@ c_parser_for_statement (c_parser *parser)\n \t      int ext;\n \t      ext = disable_extension_diagnostics ();\n \t      c_parser_consume_token (parser);\n-\t      parser->objc_could_be_foreach_context = true;\n \t      c_parser_declaration_or_fndef (parser, true, true, true, true,\n \t\t\t\t\t     true, &object_expression);\n \t      parser->objc_could_be_foreach_context = false;\n@@ -4714,7 +4719,6 @@ c_parser_for_statement (c_parser *parser)\n \tinit_expr:\n \t  {\n \t    tree init_expression;\n-\t    parser->objc_could_be_foreach_context = true;\n \t    init_expression = c_parser_expression (parser).value;\n \t    parser->objc_could_be_foreach_context = false;\n \t    if (c_parser_next_token_is_keyword (parser, RID_IN))\n@@ -4735,6 +4739,7 @@ c_parser_for_statement (c_parser *parser)\n \t}\n       /* Parse the loop condition.  In the case of a foreach\n \t statement, there is no loop condition.  */\n+      gcc_assert (!parser->objc_could_be_foreach_context);\n       if (!is_foreach_statement)\n \t{\n \t  if (c_parser_next_token_is (parser, CPP_SEMICOLON))"}]}