{"sha": "e7f567a338ca40ad1dc232c2d523810f70bd9478", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdmNTY3YTMzOGNhNDBhZDFkYzIzMmMyZDUyMzgxMGY3MGJkOTQ3OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-01T09:15:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-01T09:15:30Z"}, "message": "[multiple changes]\n\n2011-08-01  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-rbtgbo.adb (Delete_Node_Sans_Free): Fixed assignment to left child\n\tof node.\n\n2011-08-01  Pascal Obry  <obry@adacore.com>\n\n\t* a-stzunb-shared.adb, a-strunb-shared.adb, a-stwiun-shared.adb: Minor\n\treformatting.\n\nFrom-SVN: r177003", "tree": {"sha": "f031722a9c7f798d32baccf705490bcd2256341b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f031722a9c7f798d32baccf705490bcd2256341b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7f567a338ca40ad1dc232c2d523810f70bd9478", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f567a338ca40ad1dc232c2d523810f70bd9478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7f567a338ca40ad1dc232c2d523810f70bd9478", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f567a338ca40ad1dc232c2d523810f70bd9478/comments", "author": null, "committer": null, "parents": [{"sha": "1a265e7824356359788dddf51b04d85ae4f7ff04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a265e7824356359788dddf51b04d85ae4f7ff04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a265e7824356359788dddf51b04d85ae4f7ff04"}], "stats": {"total": 90, "additions": 50, "deletions": 40}, "files": [{"sha": "68e005c52967b2991bf1b25015bcee686bf95695", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f567a338ca40ad1dc232c2d523810f70bd9478/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f567a338ca40ad1dc232c2d523810f70bd9478/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e7f567a338ca40ad1dc232c2d523810f70bd9478", "patch": "@@ -1,3 +1,13 @@\n+2011-08-01  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-rbtgbo.adb (Delete_Node_Sans_Free): Fixed assignment to left child\n+\tof node.\n+\n+2011-08-01  Pascal Obry  <obry@adacore.com>\n+\n+\t* a-stzunb-shared.adb, a-strunb-shared.adb, a-stwiun-shared.adb: Minor\n+\treformatting.\n+\n 2011-08-01  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_attr.adb (Analyze_Attribute, case 'Access): Handle properly named"}, {"sha": "60a84a0c397cc74e7fee8c1c770c02575e984367", "filename": "gcc/ada/a-rbtgbo.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f567a338ca40ad1dc232c2d523810f70bd9478/gcc%2Fada%2Fa-rbtgbo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f567a338ca40ad1dc232c2d523810f70bd9478/gcc%2Fada%2Fa-rbtgbo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-rbtgbo.adb?ref=e7f567a338ca40ad1dc232c2d523810f70bd9478", "patch": "@@ -330,7 +330,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Bounded_Operations is\n                   Set_Right (N (Parent (N (Z))), Y);\n                end if;\n \n-               Set_Left (N (Y), Z);\n+               Set_Left (N (Y), Left (N (Z)));\n                Set_Parent (N (Left (N (Y))), Y);\n                Set_Right (N (Y), Z);\n                Set_Parent (N (Z), Y);"}, {"sha": "bfa4875f5884f9254c486a42ea122642685c20aa", "filename": "gcc/ada/a-strunb-shared.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f567a338ca40ad1dc232c2d523810f70bd9478/gcc%2Fada%2Fa-strunb-shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f567a338ca40ad1dc232c2d523810f70bd9478/gcc%2Fada%2Fa-strunb-shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strunb-shared.adb?ref=e7f567a338ca40ad1dc232c2d523810f70bd9478", "patch": "@@ -1298,7 +1298,7 @@ package body Ada.Strings.Unbounded is\n       DR : Shared_String_Access;\n \n    begin\n-      --  Bounds check.\n+      --  Bounds check\n \n       if Index <= SR.Last then\n "}, {"sha": "b06a9d0ec8f4ec5ce892e40ae5e154469ba02dc1", "filename": "gcc/ada/a-stwiun-shared.adb", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f567a338ca40ad1dc232c2d523810f70bd9478/gcc%2Fada%2Fa-stwiun-shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f567a338ca40ad1dc232c2d523810f70bd9478/gcc%2Fada%2Fa-stwiun-shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stwiun-shared.adb?ref=e7f567a338ca40ad1dc232c2d523810f70bd9478", "patch": "@@ -80,25 +80,25 @@ package body Ada.Strings.Wide_Unbounded is\n       DR : Shared_Wide_String_Access;\n \n    begin\n-      --  Result is an empty string, reuse shared empty string.\n+      --  Result is an empty string, reuse shared empty string\n \n       if DL = 0 then\n          Reference (Empty_Shared_Wide_String'Access);\n          DR := Empty_Shared_Wide_String'Access;\n \n-      --  Left string is empty, return Right string.\n+      --  Left string is empty, return Rigth string\n \n       elsif LR.Last = 0 then\n          Reference (RR);\n          DR := RR;\n \n-      --  Right string is empty, return Left string.\n+      --  Right string is empty, return Left string\n \n       elsif RR.Last = 0 then\n          Reference (LR);\n          DR := LR;\n \n-      --  Otherwise, allocate new shared string and fill data.\n+      --  Overwise, allocate new shared string and fill data\n \n       else\n          DR := Allocate (LR.Last + RR.Last);\n@@ -119,19 +119,19 @@ package body Ada.Strings.Wide_Unbounded is\n       DR : Shared_Wide_String_Access;\n \n    begin\n-      --  Result is an empty string, reuse shared empty string.\n+      --  Result is an empty string, reuse shared empty string\n \n       if DL = 0 then\n          Reference (Empty_Shared_Wide_String'Access);\n          DR := Empty_Shared_Wide_String'Access;\n \n-      --  Right is an empty string, return Left string.\n+      --  Right is an empty string, return Left string\n \n       elsif Right'Length = 0 then\n          Reference (LR);\n          DR := LR;\n \n-      --  Otherwise, allocate new shared string and fill it.\n+      --  Otherwise, allocate new shared string and fill it\n \n       else\n          DR := Allocate (DL);\n@@ -152,19 +152,19 @@ package body Ada.Strings.Wide_Unbounded is\n       DR : Shared_Wide_String_Access;\n \n    begin\n-      --  Result is an empty string, reuse shared one.\n+      --  Result is an empty string, reuse shared one\n \n       if DL = 0 then\n          Reference (Empty_Shared_Wide_String'Access);\n          DR := Empty_Shared_Wide_String'Access;\n \n-      --  Left is empty string, return Right string.\n+      --  Left is empty string, return Right string\n \n       elsif Left'Length = 0 then\n          Reference (RR);\n          DR := RR;\n \n-      --  Otherwise, allocate new shared string and fill it.\n+      --  Otherwise, allocate new shared string and fill it\n \n       else\n          DR := Allocate (DL);\n@@ -221,13 +221,13 @@ package body Ada.Strings.Wide_Unbounded is\n       DR : Shared_Wide_String_Access;\n \n    begin\n-      --  Result is an empty string, reuse shared empty string.\n+      --  Result is an empty string, reuse shared empty string\n \n       if Left = 0 then\n          Reference (Empty_Shared_Wide_String'Access);\n          DR := Empty_Shared_Wide_String'Access;\n \n-      --  Otherwise, allocate new shared string and fill it.\n+      --  Otherwise, allocate new shared string and fill it\n \n       else\n          DR := Allocate (Left);\n@@ -251,13 +251,13 @@ package body Ada.Strings.Wide_Unbounded is\n       K  : Positive;\n \n    begin\n-      --  Result is an empty string, reuse shared empty string.\n+      --  Result is an empty string, reuse shared empty string\n \n       if DL = 0 then\n          Reference (Empty_Shared_Wide_String'Access);\n          DR := Empty_Shared_Wide_String'Access;\n \n-      --  Otherwise, allocate new shared string and fill it.\n+      --  Otherwise, allocate new shared string and fill it\n \n       else\n          DR := Allocate (DL);\n@@ -284,19 +284,19 @@ package body Ada.Strings.Wide_Unbounded is\n       K  : Positive;\n \n    begin\n-      --  Result is an empty string, reuse shared empty string.\n+      --  Result is an empty string, reuse shared empty string\n \n       if DL = 0 then\n          Reference (Empty_Shared_Wide_String'Access);\n          DR := Empty_Shared_Wide_String'Access;\n \n-      --  Coefficient is one, just return string itself.\n+      --  Coefficient is one, just return string itself\n \n       elsif Left = 1 then\n          Reference (RR);\n          DR := RR;\n \n-      --  Otherwise, allocate new shared string and fill it.\n+      --  Otherwise, allocate new shared string and fill it\n \n       else\n          DR := Allocate (DL);\n@@ -393,7 +393,7 @@ package body Ada.Strings.Wide_Unbounded is\n \n    begin\n       return LR = RR or else LR.Data (1 .. LR.Last) = RR.Data (1 .. RR.Last);\n-      --  LR = RR means two strings shares shared string, thus they are equal.\n+      --  LR = RR means two strings shares shared string, thus they are equal\n    end \"=\";\n \n    function \"=\"\n@@ -1310,7 +1310,7 @@ package body Ada.Strings.Wide_Unbounded is\n       DR : Shared_Wide_String_Access;\n \n    begin\n-      --  Bounds check.\n+      --  Bounds check\n \n       if Index <= SR.Last then\n "}, {"sha": "08c20a0fa3f4d5673f04b35c6e1de26c872b8994", "filename": "gcc/ada/a-stzunb-shared.adb", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f567a338ca40ad1dc232c2d523810f70bd9478/gcc%2Fada%2Fa-stzunb-shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f567a338ca40ad1dc232c2d523810f70bd9478/gcc%2Fada%2Fa-stzunb-shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stzunb-shared.adb?ref=e7f567a338ca40ad1dc232c2d523810f70bd9478", "patch": "@@ -80,25 +80,25 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n       DR : Shared_Wide_Wide_String_Access;\n \n    begin\n-      --  Result is an empty string, reuse shared empty string.\n+      --  Result is an empty string, reuse shared empty string\n \n       if DL = 0 then\n          Reference (Empty_Shared_Wide_Wide_String'Access);\n          DR := Empty_Shared_Wide_Wide_String'Access;\n \n-      --  Left string is empty, return Right string.\n+      --  Left string is empty, return Rigth string\n \n       elsif LR.Last = 0 then\n          Reference (RR);\n          DR := RR;\n \n-      --  Right string is empty, return Left string.\n+      --  Right string is empty, return Left string\n \n       elsif RR.Last = 0 then\n          Reference (LR);\n          DR := LR;\n \n-      --  Otherwise, allocate new shared string and fill data.\n+      --  Overwise, allocate new shared string and fill data\n \n       else\n          DR := Allocate (LR.Last + RR.Last);\n@@ -119,19 +119,19 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n       DR : Shared_Wide_Wide_String_Access;\n \n    begin\n-      --  Result is an empty string, reuse shared empty string.\n+      --  Result is an empty string, reuse shared empty string\n \n       if DL = 0 then\n          Reference (Empty_Shared_Wide_Wide_String'Access);\n          DR := Empty_Shared_Wide_Wide_String'Access;\n \n-      --  Right is an empty string, return Left string.\n+      --  Right is an empty string, return Left string\n \n       elsif Right'Length = 0 then\n          Reference (LR);\n          DR := LR;\n \n-      --  Otherwise, allocate new shared string and fill it.\n+      --  Otherwise, allocate new shared string and fill it\n \n       else\n          DR := Allocate (DL);\n@@ -152,19 +152,19 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n       DR : Shared_Wide_Wide_String_Access;\n \n    begin\n-      --  Result is an empty string, reuse shared one.\n+      --  Result is an empty string, reuse shared one\n \n       if DL = 0 then\n          Reference (Empty_Shared_Wide_Wide_String'Access);\n          DR := Empty_Shared_Wide_Wide_String'Access;\n \n-      --  Left is empty string, return Right string.\n+      --  Left is empty string, return Right string\n \n       elsif Left'Length = 0 then\n          Reference (RR);\n          DR := RR;\n \n-      --  Otherwise, allocate new shared string and fill it.\n+      --  Otherwise, allocate new shared string and fill it\n \n       else\n          DR := Allocate (DL);\n@@ -221,13 +221,13 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n       DR : Shared_Wide_Wide_String_Access;\n \n    begin\n-      --  Result is an empty string, reuse shared empty string.\n+      --  Result is an empty string, reuse shared empty string\n \n       if Left = 0 then\n          Reference (Empty_Shared_Wide_Wide_String'Access);\n          DR := Empty_Shared_Wide_Wide_String'Access;\n \n-      --  Otherwise, allocate new shared string and fill it.\n+      --  Otherwise, allocate new shared string and fill it\n \n       else\n          DR := Allocate (Left);\n@@ -251,13 +251,13 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n       K  : Positive;\n \n    begin\n-      --  Result is an empty string, reuse shared empty string.\n+      --  Result is an empty string, reuse shared empty string\n \n       if DL = 0 then\n          Reference (Empty_Shared_Wide_Wide_String'Access);\n          DR := Empty_Shared_Wide_Wide_String'Access;\n \n-      --  Otherwise, allocate new shared string and fill it.\n+      --  Otherwise, allocate new shared string and fill it\n \n       else\n          DR := Allocate (DL);\n@@ -284,19 +284,19 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n       K  : Positive;\n \n    begin\n-      --  Result is an empty string, reuse shared empty string.\n+      --  Result is an empty string, reuse shared empty string\n \n       if DL = 0 then\n          Reference (Empty_Shared_Wide_Wide_String'Access);\n          DR := Empty_Shared_Wide_Wide_String'Access;\n \n-      --  Coefficient is one, just return string itself.\n+      --  Coefficient is one, just return string itself\n \n       elsif Left = 1 then\n          Reference (RR);\n          DR := RR;\n \n-      --  Otherwise, allocate new shared string and fill it.\n+      --  Otherwise, allocate new shared string and fill it\n \n       else\n          DR := Allocate (DL);\n@@ -393,7 +393,7 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n \n    begin\n       return LR = RR or else LR.Data (1 .. LR.Last) = RR.Data (1 .. RR.Last);\n-      --  LR = RR means two strings shares shared string, thus they are equal.\n+      --  LR = RR means two strings shares shared string, thus they are equal\n    end \"=\";\n \n    function \"=\"\n@@ -1320,7 +1320,7 @@ package body Ada.Strings.Wide_Wide_Unbounded is\n       DR : Shared_Wide_Wide_String_Access;\n \n    begin\n-      --  Bounds check.\n+      --  Bounds check\n \n       if Index <= SR.Last then\n "}]}