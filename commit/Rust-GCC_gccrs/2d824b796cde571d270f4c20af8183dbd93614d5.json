{"sha": "2d824b796cde571d270f4c20af8183dbd93614d5", "node_id": "C_kwDOANBUbNoAKDJkODI0Yjc5NmNkZTU3MWQyNzBmNGMyMGFmODE4M2RiZDkzNjE0ZDU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-07-29T12:32:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-29T12:32:30Z"}, "message": "Merge #1421\n\n1421: expand: further improves the handling of recursive macros r=CohenArthur a=liushuyu\n\n- expand: further improves the handling of recursive macros.\r\nNow all the attribute visitor that expands the macro fragment will recursively expand the macro using the unified expanding function `expand_macro_fragment_recursive` instead of expanding the fragment only once.\r\n\r\nFixes #1403 \n\nCo-authored-by: liushuyu <liushuyu011@gmail.com>", "tree": {"sha": "ad242172f61a255644b98e4f4fd73010b5d770b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad242172f61a255644b98e4f4fd73010b5d770b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d824b796cde571d270f4c20af8183dbd93614d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi49NeCRBK7hj4Ov3rIwAARCgIAAfcMXzMfPS/GuXc1Ppi131v\nLcpwzpi2lVRHuK4Xc62vXrjuPDSlQQF5Z16GUu+oSEGVLOC3S9s2sEV2MyUaaMyQ\n80Agar9CQRr5skOScjdOoOi/91i/wcW08MgFCEsl+OhZECfCssTRZ3WDaNBpZtKb\novRRi/XIYNZsKTQUUp/k+XxHFK5cIzwYrB85iHlqnV6mHt3ArMWoIEzBPVJYnJ62\nUn5AEU9whxNKwuGK3DzcKXVHol4lualLlwbV0vQs1JssAs9SIIw87/bf1HWAtTE7\nHRU3DcwD9G9jcB3UQwL59jUvx4dYPleK15jz9OOxhBOF2B5+TDhwnmuT1hTxxMg=\n=vf7T\n-----END PGP SIGNATURE-----\n", "payload": "tree ad242172f61a255644b98e4f4fd73010b5d770b7\nparent 7f1685d7f60c29eeabbd3c556428b67142201df2\nparent 5e63ca064ab52d026112166fd1b6601c61591778\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1659097950 +0000\ncommitter GitHub <noreply@github.com> 1659097950 +0000\n\nMerge #1421\n\n1421: expand: further improves the handling of recursive macros r=CohenArthur a=liushuyu\n\n- expand: further improves the handling of recursive macros.\r\nNow all the attribute visitor that expands the macro fragment will recursively expand the macro using the unified expanding function `expand_macro_fragment_recursive` instead of expanding the fragment only once.\r\n\r\nFixes #1403 \n\nCo-authored-by: liushuyu <liushuyu011@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d824b796cde571d270f4c20af8183dbd93614d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d824b796cde571d270f4c20af8183dbd93614d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d824b796cde571d270f4c20af8183dbd93614d5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f1685d7f60c29eeabbd3c556428b67142201df2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f1685d7f60c29eeabbd3c556428b67142201df2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f1685d7f60c29eeabbd3c556428b67142201df2"}, {"sha": "5e63ca064ab52d026112166fd1b6601c61591778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e63ca064ab52d026112166fd1b6601c61591778", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e63ca064ab52d026112166fd1b6601c61591778"}], "stats": {"total": 92, "additions": 71, "deletions": 21}, "files": [{"sha": "8016f9430eb54ed5dc69abc42e2f55bc23645f35", "filename": "gcc/rust/expand/rust-attribute-visitor.cc", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d824b796cde571d270f4c20af8183dbd93614d5/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d824b796cde571d270f4c20af8183dbd93614d5/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc?ref=2d824b796cde571d270f4c20af8183dbd93614d5", "patch": "@@ -1122,12 +1122,12 @@ AttrVisitor::visit (AST::CallExpr &expr)\n \n       stmt->accept_vis (*this);\n \n-      auto fragment = expander.take_expanded_fragment (*this);\n-      if (fragment.should_expand ())\n+      auto final_fragment = expand_macro_fragment_recursive ();\n+      if (final_fragment.should_expand ())\n \t{\n \t  // Remove the current expanded invocation\n \t  it = params.erase (it);\n-\t  for (auto &node : fragment.get_nodes ())\n+\t  for (auto &node : final_fragment.get_nodes ())\n \t    {\n \t      it = params.insert (it, node.take_expr ());\n \t      it++;\n@@ -3430,25 +3430,16 @@ AttrVisitor::visit (AST::BareFunctionType &type)\n void\n AttrVisitor::maybe_expand_expr (std::unique_ptr<AST::Expr> &expr)\n {\n-  auto fragment = expander.take_expanded_fragment (*this);\n-  unsigned int original_depth = expander.expansion_depth;\n-  while (fragment.should_expand ())\n-    {\n-      expr = fragment.take_expression_fragment ();\n-      expander.expansion_depth++;\n-      auto new_fragment = expander.take_expanded_fragment (*this);\n-      if (new_fragment.is_error ())\n-\tbreak;\n-      fragment = std::move (new_fragment);\n-    }\n-  expander.expansion_depth = original_depth;\n+  auto final_fragment = expand_macro_fragment_recursive ();\n+  if (final_fragment.should_expand ())\n+    expr = final_fragment.take_expression_fragment ();\n }\n \n void\n AttrVisitor::maybe_expand_type (std::unique_ptr<AST::Type> &type)\n {\n-  auto fragment = expander.take_expanded_fragment (*this);\n-  if (fragment.should_expand ())\n-    type = fragment.take_type_fragment ();\n+  auto final_fragment = expand_macro_fragment_recursive ();\n+  if (final_fragment.should_expand ())\n+    type = final_fragment.take_type_fragment ();\n }\n } // namespace Rust"}, {"sha": "0f9d1065334c858c1c67c4f24e6f5ac9ddc719f6", "filename": "gcc/rust/expand/rust-attribute-visitor.h", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d824b796cde571d270f4c20af8183dbd93614d5/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d824b796cde571d270f4c20af8183dbd93614d5/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.h?ref=2d824b796cde571d270f4c20af8183dbd93614d5", "patch": "@@ -17,6 +17,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"rust-ast-visitor.h\"\n+#include \"rust-ast.h\"\n #include \"rust-macro-expand.h\"\n \n namespace Rust {\n@@ -42,6 +43,39 @@ class AttrVisitor : public AST::ASTVisitor\n   void expand_trait_function_decl (AST::TraitFunctionDecl &decl);\n   void expand_trait_method_decl (AST::TraitMethodDecl &decl);\n \n+  /**\n+   * Expand The current macro fragment recursively until it could not be\n+   * expanded further.\n+   *\n+   * The return value checking works because correctly\n+   * expanded fragment can never be an error (if the fragment can not be\n+   * expanded, a stand-in error fragment will be returned; for fragments that\n+   * could not be further expanded: the fragment prior to the expansion failure\n+   * will be returned).\n+   *\n+   * @return Either the expanded fragment or an empty errored-out fragment\n+   * indicating an expansion failure.\n+   */\n+  AST::ASTFragment expand_macro_fragment_recursive ()\n+  {\n+    auto fragment = expander.take_expanded_fragment (*this);\n+    unsigned int original_depth = expander.expansion_depth;\n+    auto final_fragment = AST::ASTFragment ({}, true);\n+\n+    while (fragment.should_expand ())\n+      {\n+\tfinal_fragment = std::move (fragment);\n+\texpander.expansion_depth++;\n+\t// further expand the previously expanded macro fragment\n+\tauto new_fragment = expander.take_expanded_fragment (*this);\n+\tif (new_fragment.is_error ())\n+\t  break;\n+\tfragment = std::move (new_fragment);\n+      }\n+    expander.expansion_depth = original_depth;\n+    return final_fragment;\n+  }\n+\n   /**\n    * Expand a set of values, erasing them if they are marked for strip, and\n    * replacing them with expanded macro nodes if necessary.\n@@ -67,11 +101,13 @@ class AttrVisitor : public AST::ASTVisitor\n \t// mark for stripping if required\n \tvalue->accept_vis (*this);\n \n-\tauto fragment = expander.take_expanded_fragment (*this);\n-\tif (fragment.should_expand ())\n+\t// recursively expand the children\n+\tauto final_fragment = expand_macro_fragment_recursive ();\n+\n+\tif (final_fragment.should_expand ())\n \t  {\n \t    it = values.erase (it);\n-\t    for (auto &node : fragment.get_nodes ())\n+\t    for (auto &node : final_fragment.get_nodes ())\n \t      {\n \t\tauto new_node = extractor (node);\n \t\tif (new_node != nullptr && !new_node->is_marked_for_strip ())"}, {"sha": "7fe6c51053cb02b7ad5ef1814a9ed2a8a61a07e1", "filename": "gcc/testsuite/rust/compile/torture/macro-issue1403.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d824b796cde571d270f4c20af8183dbd93614d5/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmacro-issue1403.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d824b796cde571d270f4c20af8183dbd93614d5/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmacro-issue1403.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fmacro-issue1403.rs?ref=2d824b796cde571d270f4c20af8183dbd93614d5", "patch": "@@ -0,0 +1,23 @@\n+macro_rules! stmt {\n+    ($s:stmt) => {\n+        $s\n+    };\n+    ($s:stmt, $($ss:stmt),*) => {\n+        $s;\n+        stmt!($($ss),*);\n+    };\n+}\n+\n+fn main() {\n+    stmt!(\n+        struct S;\n+    );\n+    stmt!(\n+        struct A;,\n+        struct B;,\n+        struct C;,\n+        struct D;,\n+        struct E;\n+    );\n+}\n+"}]}