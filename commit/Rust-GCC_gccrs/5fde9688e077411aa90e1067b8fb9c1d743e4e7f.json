{"sha": "5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZkZTk2ODhlMDc3NDExYWE5MGUxMDY3YjhmYjljMWQ3NDNlNGU3Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T11:16:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T11:16:44Z"}, "message": "[multiple changes]\n\n2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma, case Implemented): In ASIS\n\t(compile-only) mode, use original type declaration to determine\n\twhether protected type implements an interface.\n\n2014-11-20  Yannick Moy  <moy@adacore.com>\n\n\t* a-cfdlli.adb, a-cfdlli.ads, a-cfinve.adb, a-cfinve.ads,\n\t* a-cofove.adb, a-cofove.ads: Mark spec as SPARK_Mode, and private\n\tpart/body as SPARK_Mode Off.\n\t* a-cfhama.adb, a-cfhama.ads, a-cfhase.adb, a-cfhase.ads,\n\t* a-cforma.adb, a-cforma.ads, a-cforse.adb, a-cforse.ads: Use\n\taspect instead of pragma for uniformity.\n\n2014-11-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_util.adb (Is_EVF_Expression): Include\n\tattributes 'Loop_Entry, 'Old and 'Update to the logic.\n\n2014-11-20  Bob Duff  <duff@adacore.com>\n\n\t* sem_res.adb (Make_Call_Into_Operator): Don't\n\tcall Left_Opnd in the case of unary operators, because they only\n\thave Right.\n\nFrom-SVN: r217838", "tree": {"sha": "f21b0d91a33cad9b9a346ca381e6543fa540445a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f21b0d91a33cad9b9a346ca381e6543fa540445a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/comments", "author": null, "committer": null, "parents": [{"sha": "6c802906a388f6816ba641f8ec83ef812ffe8fbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c802906a388f6816ba641f8ec83ef812ffe8fbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c802906a388f6816ba641f8ec83ef812ffe8fbd"}], "stats": {"total": 138, "additions": 104, "deletions": 34}, "files": [{"sha": "b659777cd8cd43b0a0f8e438c86374d651d64d36", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "patch": "@@ -1,3 +1,29 @@\n+2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma, case Implemented): In ASIS\n+\t(compile-only) mode, use original type declaration to determine\n+\twhether protected type implements an interface.\n+\n+2014-11-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* a-cfdlli.adb, a-cfdlli.ads, a-cfinve.adb, a-cfinve.ads,\n+\t* a-cofove.adb, a-cofove.ads: Mark spec as SPARK_Mode, and private\n+\tpart/body as SPARK_Mode Off.\n+\t* a-cfhama.adb, a-cfhama.ads, a-cfhase.adb, a-cfhase.ads,\n+\t* a-cforma.adb, a-cforma.ads, a-cforse.adb, a-cforse.ads: Use\n+\taspect instead of pragma for uniformity.\n+\n+2014-11-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_util.adb (Is_EVF_Expression): Include\n+\tattributes 'Loop_Entry, 'Old and 'Update to the logic.\n+\n+2014-11-20  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_res.adb (Make_Call_Into_Operator): Don't\n+\tcall Left_Opnd in the case of unary operators, because they only\n+\thave Right.\n+\n 2014-11-20  Pascal Obry  <obry@adacore.com>\n \n \t* initialize.c (ProcListCS): New extern variable (critical section)."}, {"sha": "2fc5d64ad26ccc6972b7c09b5315d9092289e025", "filename": "gcc/ada/a-cfdlli.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cfdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cfdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfdlli.adb?ref=5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2010-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2010-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -27,7 +27,9 @@\n \n with System;  use type System.Address;\n \n-package body Ada.Containers.Formal_Doubly_Linked_Lists is\n+package body Ada.Containers.Formal_Doubly_Linked_Lists with\n+  SPARK_Mode => Off\n+is\n \n    -----------------------\n    -- Local Subprograms --"}, {"sha": "647d32891e271711f7081f0d6527b757bc6b4d70", "filename": "gcc/ada/a-cfdlli.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cfdlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cfdlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfdlli.ads?ref=5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "patch": "@@ -61,9 +61,11 @@ generic\n    with function \"=\" (Left, Right : Element_Type)\n                       return Boolean is <>;\n \n-package Ada.Containers.Formal_Doubly_Linked_Lists is\n+package Ada.Containers.Formal_Doubly_Linked_Lists with\n+  Pure,\n+  SPARK_Mode\n+is\n    pragma Annotate (GNATprove, External_Axiomatization);\n-   pragma Pure;\n \n    type List (Capacity : Count_Type) is private with\n      Iterable => (First       => First,\n@@ -337,6 +339,7 @@ package Ada.Containers.Formal_Doubly_Linked_Lists is\n    --  scanned yet.\n \n private\n+   pragma SPARK_Mode (Off);\n \n    type Node_Type is record\n       Prev    : Count_Type'Base := -1;"}, {"sha": "1504f605d71cd3bbe8dde682716ff089626abe63", "filename": "gcc/ada/a-cfhama.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cfhama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cfhama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfhama.adb?ref=5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "patch": "@@ -35,8 +35,9 @@ with Ada.Containers.Prime_Numbers; use Ada.Containers.Prime_Numbers;\n \n with System; use type System.Address;\n \n-package body Ada.Containers.Formal_Hashed_Maps is\n-   pragma SPARK_Mode (Off);\n+package body Ada.Containers.Formal_Hashed_Maps with\n+  SPARK_Mode => Off\n+is\n \n    -----------------------\n    -- Local Subprograms --"}, {"sha": "86e282b3e17c32b79a38ad27d8e9335749455a57", "filename": "gcc/ada/a-cfhama.ads", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cfhama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cfhama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfhama.ads?ref=5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "patch": "@@ -65,10 +65,11 @@ generic\n    with function Equivalent_Keys (Left, Right : Key_Type) return Boolean;\n    with function \"=\" (Left, Right : Element_Type) return Boolean is <>;\n \n-package Ada.Containers.Formal_Hashed_Maps is\n+package Ada.Containers.Formal_Hashed_Maps with\n+  Pure,\n+  SPARK_Mode\n+is\n    pragma Annotate (GNATprove, External_Axiomatization);\n-   pragma Pure;\n-   pragma SPARK_Mode (On);\n \n    type Map (Capacity : Count_Type; Modulus : Hash_Type) is private with\n      Iterable => (First       => First,\n@@ -272,6 +273,8 @@ package Ada.Containers.Formal_Hashed_Maps is\n    --  Overlap returns True if the containers have common keys\n \n private\n+   pragma SPARK_Mode (Off);\n+\n    pragma Inline (Length);\n    pragma Inline (Is_Empty);\n    pragma Inline (Clear);\n@@ -282,7 +285,6 @@ private\n    pragma Inline (Has_Element);\n    pragma Inline (Equivalent_Keys);\n    pragma Inline (Next);\n-   pragma SPARK_Mode (Off);\n \n    type Node_Type is record\n       Key         : Key_Type;"}, {"sha": "3bbcd125776f663afa6a05e670fa98f8b991d550", "filename": "gcc/ada/a-cfhase.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cfhase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cfhase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfhase.adb?ref=5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "patch": "@@ -35,8 +35,9 @@ with Ada.Containers.Prime_Numbers; use Ada.Containers.Prime_Numbers;\n \n with System; use type System.Address;\n \n-package body Ada.Containers.Formal_Hashed_Sets is\n-   pragma SPARK_Mode (Off);\n+package body Ada.Containers.Formal_Hashed_Sets with\n+  SPARK_Mode => Off\n+is\n \n    -----------------------\n    -- Local Subprograms --"}, {"sha": "1f802d46c5aa4a66c6a973a3bfdd8a9ffb86f4f7", "filename": "gcc/ada/a-cfhase.ads", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cfhase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cfhase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfhase.ads?ref=5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "patch": "@@ -67,10 +67,11 @@ generic\n \n    with function \"=\" (Left, Right : Element_Type) return Boolean is <>;\n \n-package Ada.Containers.Formal_Hashed_Sets is\n+package Ada.Containers.Formal_Hashed_Sets with\n+  Pure,\n+  SPARK_Mode\n+is\n    pragma Annotate (GNATprove, External_Axiomatization);\n-   pragma Pure;\n-   pragma SPARK_Mode (On);\n \n    type Set (Capacity : Count_Type; Modulus : Hash_Type) is private with\n      Iterable => (First       => First,\n@@ -335,9 +336,10 @@ package Ada.Containers.Formal_Hashed_Sets is\n    --  scanned yet.\n \n private\n-   pragma Inline (Next);\n    pragma SPARK_Mode (Off);\n \n+   pragma Inline (Next);\n+\n    type Node_Type is\n       record\n          Element     : Element_Type;"}, {"sha": "e3f917aaa1e6256c8fbc6bd32967cff1e4e0532b", "filename": "gcc/ada/a-cfinve.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cfinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cfinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfinve.adb?ref=5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "patch": "@@ -26,7 +26,9 @@\n -- <http://www.gnu.org/licenses/>.                                          --\n ------------------------------------------------------------------------------\n \n-package body Ada.Containers.Formal_Indefinite_Vectors is\n+package body Ada.Containers.Formal_Indefinite_Vectors with\n+  SPARK_Mode => Off\n+is\n \n    function H (New_Item : Element_Type) return Holder renames To_Holder;\n    function E (Container : Holder) return Element_Type renames Get;"}, {"sha": "b78633b4f8cc0674494af0fcbfd2d562b3c44750", "filename": "gcc/ada/a-cfinve.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cfinve.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cfinve.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cfinve.ads?ref=5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "patch": "@@ -52,7 +52,9 @@ generic\n    --  size, and heap allocation will be avoided. If False, the containers can\n    --  grow via heap allocation.\n \n-package Ada.Containers.Formal_Indefinite_Vectors is\n+package Ada.Containers.Formal_Indefinite_Vectors with\n+  SPARK_Mode => On\n+is\n    pragma Annotate (GNATprove, External_Axiomatization);\n \n    subtype Extended_Index is Index_Type'Base\n@@ -220,6 +222,7 @@ package Ada.Containers.Formal_Indefinite_Vectors is\n      Global => null;\n \n private\n+   pragma SPARK_Mode (Off);\n \n    pragma Inline (First_Index);\n    pragma Inline (Last_Index);"}, {"sha": "cceef9e11d7a5ad595a21769fc056c84a7a17a8b", "filename": "gcc/ada/a-cforma.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cforma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cforma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cforma.adb?ref=5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "patch": "@@ -34,8 +34,9 @@ pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Bounded_Keys);\n \n with System; use type System.Address;\n \n-package body Ada.Containers.Formal_Ordered_Maps is\n-   pragma SPARK_Mode (Off);\n+package body Ada.Containers.Formal_Ordered_Maps with\n+  SPARK_Mode => Off\n+is\n \n    -----------------------------\n    -- Node Access Subprograms --"}, {"sha": "a20a78904c0ac042367540088ca158e54c41016c", "filename": "gcc/ada/a-cforma.ads", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cforma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cforma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cforma.ads?ref=5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "patch": "@@ -66,10 +66,11 @@ generic\n    with function \"<\" (Left, Right : Key_Type) return Boolean is <>;\n    with function \"=\" (Left, Right : Element_Type) return Boolean is <>;\n \n-package Ada.Containers.Formal_Ordered_Maps is\n+package Ada.Containers.Formal_Ordered_Maps with\n+  Pure,\n+  SPARK_Mode\n+is\n    pragma Annotate (GNATprove, External_Axiomatization);\n-   pragma Pure;\n-   pragma SPARK_Mode (On);\n \n    function Equivalent_Keys (Left, Right : Key_Type) return Boolean with\n      Global => null;\n@@ -273,9 +274,10 @@ package Ada.Containers.Formal_Ordered_Maps is\n    --  Overlap returns True if the containers have common keys\n \n private\n+   pragma SPARK_Mode (Off);\n+\n    pragma Inline (Next);\n    pragma Inline (Previous);\n-   pragma SPARK_Mode (Off);\n \n    subtype Node_Access is Count_Type;\n "}, {"sha": "b53d08c0edf769b522985f8e350083c2835cfc94", "filename": "gcc/ada/a-cforse.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cforse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cforse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cforse.adb?ref=5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "patch": "@@ -38,8 +38,9 @@ pragma Elaborate_All\n \n with System; use type System.Address;\n \n-package body Ada.Containers.Formal_Ordered_Sets is\n-   pragma SPARK_Mode (Off);\n+package body Ada.Containers.Formal_Ordered_Sets with\n+  SPARK_Mode => Off\n+is\n \n    ------------------------------\n    -- Access to Fields of Node --"}, {"sha": "04c66f15c256673048a2e545c2182b4f8d8fcfec", "filename": "gcc/ada/a-cforse.ads", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cforse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cforse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cforse.ads?ref=5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "patch": "@@ -64,10 +64,11 @@ generic\n    with function \"<\" (Left, Right : Element_Type) return Boolean is <>;\n    with function \"=\" (Left, Right : Element_Type) return Boolean is <>;\n \n-package Ada.Containers.Formal_Ordered_Sets is\n+package Ada.Containers.Formal_Ordered_Sets with\n+  Pure,\n+  SPARK_Mode\n+is\n    pragma Annotate (GNATprove, External_Axiomatization);\n-   pragma Pure;\n-   pragma SPARK_Mode (On);\n \n    function Equivalent_Elements (Left, Right : Element_Type) return Boolean\n    with\n@@ -353,9 +354,10 @@ package Ada.Containers.Formal_Ordered_Sets is\n    --  scanned yet.\n \n private\n+   pragma SPARK_Mode (Off);\n+\n    pragma Inline (Next);\n    pragma Inline (Previous);\n-   pragma SPARK_Mode (Off);\n \n    type Node_Type is record\n       Has_Element : Boolean := False;"}, {"sha": "8fc7ed148b6f9898a533670bc4da2f177af7874a", "filename": "gcc/ada/a-cofove.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cofove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cofove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cofove.adb?ref=5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "patch": "@@ -30,7 +30,9 @@ with Ada.Unchecked_Deallocation;\n \n with System; use type System.Address;\n \n-package body Ada.Containers.Formal_Vectors is\n+package body Ada.Containers.Formal_Vectors with\n+  SPARK_Mode => Off\n+is\n \n    Growth_Factor : constant := 2;\n    --  When growing a container, multiply current capacity by this. Doubling"}, {"sha": "5bbd18c2cdd894d866917cc51d7e626caa4f21b0", "filename": "gcc/ada/a-cofove.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cofove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fa-cofove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cofove.ads?ref=5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "patch": "@@ -46,7 +46,9 @@ generic\n    --  size, and heap allocation will be avoided. If False, the containers can\n    --  grow via heap allocation.\n \n-package Ada.Containers.Formal_Vectors is\n+package Ada.Containers.Formal_Vectors with\n+  SPARK_Mode\n+is\n    pragma Annotate (GNATprove, External_Axiomatization);\n \n    subtype Extended_Index is Index_Type'Base\n@@ -230,6 +232,7 @@ package Ada.Containers.Formal_Vectors is\n    --  scanned yet.\n \n private\n+   pragma SPARK_Mode (Off);\n \n    pragma Inline (First_Index);\n    pragma Inline (Last_Index);"}, {"sha": "5aa9514d188b3c09affb46105aeb1a88e4fe6c5c", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "patch": "@@ -14657,6 +14657,12 @@ package body Sem_Prag is\n                     (Is_Concurrent_Record_Type (Typ)\n                        and then Present (Interfaces (Typ)))\n \n+                  --  In analysis-only mode, examine original protected type\n+\n+                  or else\n+                    (Nkind (Parent (Typ)) = N_Protected_Type_Declaration\n+                      and then Present (Interface_List (Parent (Typ))))\n+\n                   --  Check for a private record extension with keyword\n                   --  \"synchronized\".\n "}, {"sha": "90311caf969e17c016be962e9614a93ede213f68", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "patch": "@@ -1794,7 +1794,7 @@ package body Sem_Res is\n         and then Nkind (Original_Node (N)) = N_Function_Call\n       then\n          declare\n-            L : constant Node_Id := Left_Opnd  (N);\n+            L : Node_Id;\n             R : constant Node_Id := Right_Opnd (N);\n \n             Old_First : constant Node_Id :=\n@@ -1803,7 +1803,8 @@ package body Sem_Res is\n \n          begin\n             if Is_Binary then\n-               Old_Sec   := Next (Old_First);\n+               L       := Left_Opnd (N);\n+               Old_Sec := Next (Old_First);\n \n                --  If the original call has named associations, replace the\n                --  explicit actual parameter in the association with the proper"}, {"sha": "d29cb7672c2f964f60d4ea5224cd1b766df219a9", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fde9688e077411aa90e1067b8fb9c1d743e4e7f/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=5fde9688e077411aa90e1067b8fb9c1d743e4e7f", "patch": "@@ -10846,6 +10846,16 @@ package body Sem_Util is\n                          N_Type_Conversion)\n       then\n          return Is_EVF_Expression (Expression (N));\n+\n+      --  Attributes 'Loop_Entry, 'Old and 'Update are an EVF expression when\n+      --  their prefix denotes an EVF expression.\n+\n+      elsif Nkind (N) = N_Attribute_Reference\n+        and then Nam_In (Attribute_Name (N), Name_Loop_Entry,\n+                                             Name_Old,\n+                                             Name_Update)\n+      then\n+         return Is_EVF_Expression (Prefix (N));\n       end if;\n \n       return False;"}]}