{"sha": "28171b9d5dff2ee4fa0675ff36f5c55131ae158f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgxNzFiOWQ1ZGZmMmVlNGZhMDY3NWZmMzZmNWM1NTEzMWFlMTU4Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-12-22T23:05:02Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-12-22T23:05:02Z"}, "message": "compiler: fix spurious redefinition error for anon struct\n    \n    Change Struct_type::do_mangled_name to incorporate the field\n    names even for hidden symbols. This is needed in cases where\n    a package imports a type \"S\" that has an anonymous struct, e.g.\n    \n      // imported from some other package\n      type S struct {\n        X struct{ _ struct{} }\n      }\n    \n    and then defines a local type that uses a structurally identical\n    anonymous struct, e.g.\n    \n      // defined locally\n      type T struct {\n        U struct{ _ struct{} }\n      }\n    \n    In the case above both types triggered the creation of hash/equal\n    methods, but the method names were clashing (since both structs\n    had the same mangled name).\n    \n    Fixes golang/go#18414\n    \n    Reviewed-on: https://go-review.googlesource.com/34621\n\nFrom-SVN: r243899", "tree": {"sha": "d89a2a32fc4fe6b2ca04d0ad5487f72a348c05bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d89a2a32fc4fe6b2ca04d0ad5487f72a348c05bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28171b9d5dff2ee4fa0675ff36f5c55131ae158f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28171b9d5dff2ee4fa0675ff36f5c55131ae158f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28171b9d5dff2ee4fa0675ff36f5c55131ae158f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28171b9d5dff2ee4fa0675ff36f5c55131ae158f/comments", "author": null, "committer": null, "parents": [{"sha": "cb66382056ed3d00383bed84db0df5b074f8265a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb66382056ed3d00383bed84db0df5b074f8265a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb66382056ed3d00383bed84db0df5b074f8265a"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "b9c62808b6745dd9c46b4078e169a88041ec7078", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28171b9d5dff2ee4fa0675ff36f5c55131ae158f/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28171b9d5dff2ee4fa0675ff36f5c55131ae158f/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=28171b9d5dff2ee4fa0675ff36f5c55131ae158f", "patch": "@@ -1,4 +1,4 @@\n-4a0bb435bbb1d1516b486d1998e8dc184576db61\n+9a89f32811e6b3a29e22dda46e9c23811f562876\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "905f48d233db9e95cd80882491e37c43cb37f14e", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28171b9d5dff2ee4fa0675ff36f5c55131ae158f/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28171b9d5dff2ee4fa0675ff36f5c55131ae158f/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=28171b9d5dff2ee4fa0675ff36f5c55131ae158f", "patch": "@@ -201,6 +201,27 @@ class Gogo\n     return name.substr(1, name.rfind('.') - 1);\n   }\n \n+  // Given a name which may or may not have been hidden, return the\n+  // name to use within a mangled symbol name.\n+  static std::string\n+  mangle_possibly_hidden_name(const std::string& name)\n+  { \n+    // FIXME: This adds in pkgpath twice for hidden symbols, which is\n+    // less than ideal.\n+    std::string n;\n+    if (!Gogo::is_hidden_name(name))\n+      n = name;\n+    else\n+      {\n+        n = \".\";\n+        std::string pkgpath = Gogo::hidden_name_pkgpath(name);\n+        n.append(Gogo::pkgpath_for_symbol(pkgpath));\n+        n.append(1, '.');\n+        n.append(Gogo::unpack_hidden_name(name));\n+      }\n+    return n;\n+  }\n+\n   // Given a name which may or may not have been hidden, return the\n   // name to use in an error message.\n   static std::string"}, {"sha": "93d7d807aa8e75e1c26a3329da6931f5e874d515", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 6, "deletions": 25, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28171b9d5dff2ee4fa0675ff36f5c55131ae158f/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28171b9d5dff2ee4fa0675ff36f5c55131ae158f/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=28171b9d5dff2ee4fa0675ff36f5c55131ae158f", "patch": "@@ -1337,18 +1337,8 @@ Type::type_descriptor_var_name(Gogo* gogo, Named_type* nt)\n \t}\n     }\n \n-  // FIXME: This adds in pkgpath twice for hidden symbols, which is\n-  // pointless.\n-  const std::string& name(no->name());\n-  if (!Gogo::is_hidden_name(name))\n-    ret.append(name);\n-  else\n-    {\n-      ret.append(1, '.');\n-      ret.append(Gogo::pkgpath_for_symbol(Gogo::hidden_name_pkgpath(name)));\n-      ret.append(1, '.');\n-      ret.append(Gogo::unpack_hidden_name(name));\n-    }\n+  std::string mname(Gogo::mangle_possibly_hidden_name(no->name()));\n+  ret.append(mname);\n \n   return ret;\n }\n@@ -5638,8 +5628,9 @@ Struct_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n \t  if (p->is_anonymous())\n \t    ret->append(\"0_\");\n \t  else\n-\t    {\n-\t      std::string n = Gogo::unpack_hidden_name(p->field_name());\n+            {\n+\n+              std::string n(Gogo::mangle_possibly_hidden_name(p->field_name()));\n \t      char buf[20];\n \t      snprintf(buf, sizeof buf, \"%u_\",\n \t\t       static_cast<unsigned int>(n.length()));\n@@ -8712,17 +8703,7 @@ Interface_type::do_mangled_name(Gogo* gogo, std::string* ret) const\n \t{\n \t  if (!p->name().empty())\n \t    {\n-\t      std::string n;\n-\t      if (!Gogo::is_hidden_name(p->name()))\n-\t\tn = p->name();\n-\t      else\n-\t\t{\n-\t\t  n = \".\";\n-\t\t  std::string pkgpath = Gogo::hidden_name_pkgpath(p->name());\n-\t\t  n.append(Gogo::pkgpath_for_symbol(pkgpath));\n-\t\t  n.append(1, '.');\n-\t\t  n.append(Gogo::unpack_hidden_name(p->name()));\n-\t\t}\n+\t      std::string n(Gogo::mangle_possibly_hidden_name(p->name()));\n \t      char buf[20];\n \t      snprintf(buf, sizeof buf, \"%u_\",\n \t\t       static_cast<unsigned int>(n.length()));"}]}