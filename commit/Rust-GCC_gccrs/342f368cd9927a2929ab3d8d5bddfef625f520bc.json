{"sha": "342f368cd9927a2929ab3d8d5bddfef625f520bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQyZjM2OGNkOTkyN2EyOTI5YWIzZDhkNWJkZGZlZjYyNWY1MjBiYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-06-30T19:20:24Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-06-30T19:20:24Z"}, "message": "utils2.c (build_binary_op): Do not use the type of the left operand if...\n\n\t* gcc-interface/utils2.c (build_binary_op) <MODIFY_EXPR>: Do not use\n\tthe type of the left operand if it pads a self-referential type when\n\tthe right operand is a constructor.\n\n\t* gcc-interface/lang-specs.h: Fix copyright date.\n\nFrom-SVN: r149115", "tree": {"sha": "e2df069bf7796f6b6a61587812e67f46f32c895a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2df069bf7796f6b6a61587812e67f46f32c895a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/342f368cd9927a2929ab3d8d5bddfef625f520bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/342f368cd9927a2929ab3d8d5bddfef625f520bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/342f368cd9927a2929ab3d8d5bddfef625f520bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/342f368cd9927a2929ab3d8d5bddfef625f520bc/comments", "author": null, "committer": null, "parents": [{"sha": "9fb374d6a82046979cd304794aabb82ae914ad72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fb374d6a82046979cd304794aabb82ae914ad72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fb374d6a82046979cd304794aabb82ae914ad72"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "a79a583e9812f2b80f5440a9ec4d524cf50e0c8d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342f368cd9927a2929ab3d8d5bddfef625f520bc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342f368cd9927a2929ab3d8d5bddfef625f520bc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=342f368cd9927a2929ab3d8d5bddfef625f520bc", "patch": "@@ -1,3 +1,11 @@\n+2009-06-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils2.c (build_binary_op) <MODIFY_EXPR>: Do not use\n+\tthe type of the left operand if it pads a self-referential type when\n+\tthe right operand is a constructor.\n+\n+\t* gcc-interface/lang-specs.h: Fix copyright date.\n+\n 2009-06-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c: Include tree-inline.h."}, {"sha": "e0c1be9e1030c3d5c33c7e0ffec0de37fcf62c29", "filename": "gcc/ada/gcc-interface/lang-specs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342f368cd9927a2929ab3d8d5bddfef625f520bc/gcc%2Fada%2Fgcc-interface%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342f368cd9927a2929ab3d8d5bddfef625f520bc/gcc%2Fada%2Fgcc-interface%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Flang-specs.h?ref=342f368cd9927a2929ab3d8d5bddfef625f520bc", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *           Copyright (C) 1992-2008, Free Software Foundation, Inc.        *\n+ *           Copyright (C) 1992-2009, Free Software Foundation, Inc.        *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *"}, {"sha": "e60e5a093ae0103484c3d60dc16fb000eabfffff", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/342f368cd9927a2929ab3d8d5bddfef625f520bc/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/342f368cd9927a2929ab3d8d5bddfef625f520bc/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=342f368cd9927a2929ab3d8d5bddfef625f520bc", "patch": "@@ -707,9 +707,10 @@ build_binary_op (enum tree_code op_code, tree result_type,\n \n       /* If we are copying between padded objects with compatible types, use\n \t the padded view of the objects, this is very likely more efficient.\n-\t Likewise for a padded that is assigned a constructor, in order to\n-\t avoid putting a VIEW_CONVERT_EXPR on the LHS.  But don't do this if\n-\t we wouldn't have actually copied anything.  */\n+\t Likewise for a padded object that is assigned a constructor, if we\n+\t can convert the constructor to the inner type, to avoid putting a\n+\t VIEW_CONVERT_EXPR on the LHS.  But don't do so if we wouldn't have\n+\t actually copied anything.  */\n       else if (TREE_CODE (left_type) == RECORD_TYPE\n \t       && TYPE_IS_PADDING_P (left_type)\n \t       && TREE_CONSTANT (TYPE_SIZE (left_type))\n@@ -719,9 +720,11 @@ build_binary_op (enum tree_code op_code, tree result_type,\n \t\t    && TYPE_IS_PADDING_P\n \t\t       (TREE_TYPE (TREE_OPERAND (right_operand, 0)))\n \t\t    && gnat_types_compatible_p\n-\t\t\t(left_type,\n-\t\t\t TREE_TYPE (TREE_OPERAND (right_operand, 0))))\n-\t\t   || TREE_CODE (right_operand) == CONSTRUCTOR)\n+\t\t       (left_type,\n+\t\t\tTREE_TYPE (TREE_OPERAND (right_operand, 0))))\n+\t\t   || (TREE_CODE (right_operand) == CONSTRUCTOR\n+\t\t       && !CONTAINS_PLACEHOLDER_P\n+\t\t\t   (DECL_SIZE (TYPE_FIELDS (left_type)))))\n \t       && !integer_zerop (TYPE_SIZE (right_type)))\n \toperation_type = left_type;\n "}]}