{"sha": "db7e5239390f0e259b64858ae1333ddb708e4486", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI3ZTUyMzkzOTBmMGUyNTliNjQ4NThhZTEzMzNkZGI3MDhlNDQ4Ng==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-11T21:58:16Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-11T21:58:16Z"}, "message": "entered into RCS\n\nFrom-SVN: r1559", "tree": {"sha": "4dc76aa0ca4c9074e06680d7aa2e626c80897dfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dc76aa0ca4c9074e06680d7aa2e626c80897dfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db7e5239390f0e259b64858ae1333ddb708e4486", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7e5239390f0e259b64858ae1333ddb708e4486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db7e5239390f0e259b64858ae1333ddb708e4486", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7e5239390f0e259b64858ae1333ddb708e4486/comments", "author": null, "committer": null, "parents": [{"sha": "d75e62a9761a136e5bfa20f564cb9671a98f95c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d75e62a9761a136e5bfa20f564cb9671a98f95c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d75e62a9761a136e5bfa20f564cb9671a98f95c1"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "c67078360fb7256cc609874aea9431e0ea82d57c", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7e5239390f0e259b64858ae1333ddb708e4486/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7e5239390f0e259b64858ae1333ddb708e4486/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=db7e5239390f0e259b64858ae1333ddb708e4486", "patch": "@@ -1107,7 +1107,7 @@ real_value_from_int_cst (i)\n #ifdef REAL_ARITHMETIC\n   REAL_VALUE_FROM_INT (d, TREE_INT_CST_LOW (i), TREE_INT_CST_HIGH (i));\n #else /* not REAL_ARITHMETIC */\n-  if (TREE_INT_CST_HIGH (i) < 0)\n+  if (TREE_INT_CST_HIGH (i) < 0 && ! TREE_UNSIGNED (TREE_TYPE (i)))\n     {\n       d = (double) (~ TREE_INT_CST_HIGH (i));\n       d *= ((double) ((HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2))\n@@ -1117,7 +1117,7 @@ real_value_from_int_cst (i)\n     }\n   else\n     {\n-      d = (double) TREE_INT_CST_HIGH (i);\n+      d = (double) (unsigned HOST_WIDE_INT) TREE_INT_CST_HIGH (i);\n       d *= ((double) ((HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2))\n \t    * (double) ((HOST_WIDE_INT) 1 << (HOST_BITS_PER_WIDE_INT / 2)));\n       d += (double) (unsigned HOST_WIDE_INT) TREE_INT_CST_LOW (i);\n@@ -1140,7 +1140,7 @@ build_real_from_int_cst (type, i)\n   v = make_node (REAL_CST);\n   TREE_TYPE (v) = type;\n \n-  d = real_value_from_int_cst (i);\n+  d = REAL_VALUE_TRUNCATE (TYPE_MODE (type), real_value_from_int_cst (i));\n   /* Check for valid float value for this type on this target machine;\n      if not, can print error message and store a valid value in D.  */\n #ifdef CHECK_FLOAT_VALUE"}]}