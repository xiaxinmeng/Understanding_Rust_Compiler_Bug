{"sha": "0b3c00ff3c53818110484f9e295523a0c3c7f324", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIzYzAwZmYzYzUzODE4MTEwNDg0ZjllMjk1NTIzYTBjM2M3ZjMyNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-14T12:19:05Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-14T12:19:05Z"}, "message": "Make std::match_results::_M_resize more useful\n\nAs both callers of match_results::_M_resize(unsigned) immediately follow\nit with a loop to update the value of each sub_match, that behaviour can\nbe moved into _M_resize itself. The first caller fills the container\nwith unmatched subs, which can be done with vector::assign, and the\nsecond caller clears the container to establish a specific state, which\ncan be provided by a new member function specific to that purpose.\n\nTangentially, I also noticed that match_results::max_size() doesn't\naccount for the three special sub_match objects that are always present\nin a fully established result state. This patch also fixes that.\n\n\t* include/bits/regex.h (match_results::max_size()): Adjust return\n\tvalue to account for prefix/suffix/unmatched subs.\n\t(match_results::_M_resize(unsigned int)): Use _Base_type::assign to\n\treset the contained sub matches.\n\t(match_results::_M_establish_failed_match(_Bi_iter)): Add new member\n\tfunction to set result state following a failed match.\n\t* include/bits/regex.tcc (__regex_algo_impl): Remove loop to set\n\tsub_match states after _M_resize. Use _M_establish_failed_match.\n\nFrom-SVN: r271167", "tree": {"sha": "74d2f5fc03fa6828aa63d847451310b2fae89536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74d2f5fc03fa6828aa63d847451310b2fae89536"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b3c00ff3c53818110484f9e295523a0c3c7f324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3c00ff3c53818110484f9e295523a0c3c7f324", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b3c00ff3c53818110484f9e295523a0c3c7f324", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b3c00ff3c53818110484f9e295523a0c3c7f324/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8db7a05fd73be5df9195a3697248084d4a5b0ee6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8db7a05fd73be5df9195a3697248084d4a5b0ee6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8db7a05fd73be5df9195a3697248084d4a5b0ee6"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "3cfcd0623c173c26d69de170f268b401687d04e9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3c00ff3c53818110484f9e295523a0c3c7f324/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3c00ff3c53818110484f9e295523a0c3c7f324/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0b3c00ff3c53818110484f9e295523a0c3c7f324", "patch": "@@ -1,5 +1,14 @@\n 2019-05-14  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/regex.h (match_results::max_size()): Adjust return\n+\tvalue to account for prefix/suffix/unmatched subs.\n+\t(match_results::_M_resize(unsigned int)): Use _Base_type::assign to\n+\treset the contained sub matches.\n+\t(match_results::_M_establish_failed_match(_Bi_iter)): Add new member\n+\tfunction to set result state following a failed match.\n+\t* include/bits/regex.tcc (__regex_algo_impl): Remove loop to set\n+\tsub_match states after _M_resize. Use _M_establish_failed_match.\n+\n \tPR libstdc++/69724\n \t* include/std/thread (thread::_State_impl, thread::_S_make_state):\n \tReplace single _Callable parameter with variadic _Args pack, to"}, {"sha": "b30b41a075953a89341341e319e2533aabbefc53", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3c00ff3c53818110484f9e295523a0c3c7f324/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3c00ff3c53818110484f9e295523a0c3c7f324/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=0b3c00ff3c53818110484f9e295523a0c3c7f324", "patch": "@@ -1707,7 +1707,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n       size_type\n       max_size() const noexcept\n-      { return _Base_type::max_size(); }\n+      { return _Base_type::max_size() - 3; }\n \n       /**\n        * @brief Indicates if the %match_results contains no results.\n@@ -1953,9 +1953,20 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\t\t\t    const basic_regex<_Cp, _Rp>&,\n \t\t\t\t    regex_constants::match_flag_type);\n \n+      // Reset contents to __size unmatched sub_match objects\n+      // (plus additional objects for prefix, suffix and unmatched sub).\n       void\n       _M_resize(unsigned int __size)\n-      { _Base_type::resize(__size + 3); }\n+      { _Base_type::assign(__size + 3, sub_match<_Bi_iter>{}); }\n+\n+      // Set state to a failed match for the given past-the-end iterator.\n+      void\n+      _M_establish_failed_match(_Bi_iter __end)\n+      {\n+\tsub_match<_Bi_iter> __sm;\n+\t__sm.first = __sm.second = __end;\n+\t_Base_type::assign(3, __sm);\n+      }\n \n       const_reference\n       _M_unmatched_sub() const"}, {"sha": "53cf1ffa01e039b49e05a80699ec88bdd106e3a5", "filename": "libstdc++-v3/include/bits/regex.tcc", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b3c00ff3c53818110484f9e295523a0c3c7f324/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b3c00ff3c53818110484f9e295523a0c3c7f324/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc?ref=0b3c00ff3c53818110484f9e295523a0c3c7f324", "patch": "@@ -59,8 +59,6 @@ namespace __detail\n       typename match_results<_BiIter, _Alloc>::_Base_type& __res = __m;\n       __m._M_begin = __s;\n       __m._M_resize(__re._M_automaton->_M_sub_count());\n-      for (auto& __it : __res)\n-\t__it.matched = false;\n \n       bool __ret;\n       if ((__re.flags() & regex_constants::__polynomial)\n@@ -111,12 +109,7 @@ namespace __detail\n \t}\n       else\n \t{\n-\t  __m._M_resize(0);\n-\t  for (auto& __it : __res)\n-\t    {\n-\t      __it.matched = false;\n-\t      __it.first = __it.second = __e;\n-\t    }\n+\t  __m._M_establish_failed_match(__e);\n \t}\n       return __ret;\n     }"}]}