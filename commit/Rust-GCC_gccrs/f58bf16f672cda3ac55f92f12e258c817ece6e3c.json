{"sha": "f58bf16f672cda3ac55f92f12e258c817ece6e3c", "node_id": "C_kwDOANBUbNoAKGY1OGJmMTZmNjcyY2RhM2FjNTVmOTJmMTJlMjU4YzgxN2VjZTZlM2M", "commit": {"author": {"name": "Florian Weimer", "email": "fweimer@redhat.com", "date": "2021-11-22T12:30:23Z"}, "committer": {"name": "Florian Weimer", "email": "fweimer@redhat.com", "date": "2021-11-22T12:31:10Z"}, "message": "libgcc: Remove dbase member from struct unw_eh_callback_data if NULL\n\nOnly bfin, frv, i386 and nios2 need this member at present.\n\nlibgcc/ChangeLog\n\n\t* unwind-dw2-fde-dip.c (NEED_DBASE_MEMBER): Define.\n\t(struct unw_eh_callback_data): Make dbase member conditional.\n\t(unw_eh_callback_data_dbase): New function.\n\t(base_from_cb_data): Simplify for the non-dbase case.\n\t(_Unwind_IteratePhdrCallback): Adjust.\n\t(_Unwind_Find_FDE): Likewise.", "tree": {"sha": "b7d6f3ca1c127f182c778b6526ecd9634c30a1c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7d6f3ca1c127f182c778b6526ecd9634c30a1c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f58bf16f672cda3ac55f92f12e258c817ece6e3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f58bf16f672cda3ac55f92f12e258c817ece6e3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f58bf16f672cda3ac55f92f12e258c817ece6e3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f58bf16f672cda3ac55f92f12e258c817ece6e3c/comments", "author": {"login": "fweimer-rh", "id": 75532728, "node_id": "MDQ6VXNlcjc1NTMyNzI4", "avatar_url": "https://avatars.githubusercontent.com/u/75532728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fweimer-rh", "html_url": "https://github.com/fweimer-rh", "followers_url": "https://api.github.com/users/fweimer-rh/followers", "following_url": "https://api.github.com/users/fweimer-rh/following{/other_user}", "gists_url": "https://api.github.com/users/fweimer-rh/gists{/gist_id}", "starred_url": "https://api.github.com/users/fweimer-rh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fweimer-rh/subscriptions", "organizations_url": "https://api.github.com/users/fweimer-rh/orgs", "repos_url": "https://api.github.com/users/fweimer-rh/repos", "events_url": "https://api.github.com/users/fweimer-rh/events{/privacy}", "received_events_url": "https://api.github.com/users/fweimer-rh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fweimer-rh", "id": 75532728, "node_id": "MDQ6VXNlcjc1NTMyNzI4", "avatar_url": "https://avatars.githubusercontent.com/u/75532728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fweimer-rh", "html_url": "https://github.com/fweimer-rh", "followers_url": "https://api.github.com/users/fweimer-rh/followers", "following_url": "https://api.github.com/users/fweimer-rh/following{/other_user}", "gists_url": "https://api.github.com/users/fweimer-rh/gists{/gist_id}", "starred_url": "https://api.github.com/users/fweimer-rh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fweimer-rh/subscriptions", "organizations_url": "https://api.github.com/users/fweimer-rh/orgs", "repos_url": "https://api.github.com/users/fweimer-rh/repos", "events_url": "https://api.github.com/users/fweimer-rh/events{/privacy}", "received_events_url": "https://api.github.com/users/fweimer-rh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90986c5f0aa61cd22a9132486304ba5d12aae6c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90986c5f0aa61cd22a9132486304ba5d12aae6c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90986c5f0aa61cd22a9132486304ba5d12aae6c4"}], "stats": {"total": 46, "additions": 39, "deletions": 7}, "files": [{"sha": "3f302826d2d4907401cb29170684dbd31b9d5315", "filename": "libgcc/unwind-dw2-fde-dip.c", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f58bf16f672cda3ac55f92f12e258c817ece6e3c/libgcc%2Funwind-dw2-fde-dip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f58bf16f672cda3ac55f92f12e258c817ece6e3c/libgcc%2Funwind-dw2-fde-dip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2-fde-dip.c?ref=f58bf16f672cda3ac55f92f12e258c817ece6e3c", "patch": "@@ -101,15 +101,35 @@ static const fde * _Unwind_Find_registered_FDE (void *pc, struct dwarf_eh_bases\n #define PT_GNU_EH_FRAME (PT_LOOS + 0x474e550)\n #endif\n \n+#ifdef CRT_GET_RFIB_DATA\n+#define NEED_DBASE_MEMBER 1\n+#else\n+#define NEED_DBASE_MEMBER 0\n+#endif\n+\n struct unw_eh_callback_data\n {\n   _Unwind_Ptr pc;\n+#if NEED_DBASE_MEMBER\n   void *dbase;\n+#endif\n   void *func;\n   const fde *ret;\n   int check_cache;\n };\n \n+/* Returns DATA->dbase if available, else NULL.  */\n+static inline _Unwind_Ptr\n+unw_eh_callback_data_dbase (const struct unw_eh_callback_data *data\n+\t\t\t    __attribute__ ((unused)))\n+{\n+#if NEED_DBASE_MEMBER\n+  return (_Unwind_Ptr) data->dbase;\n+#else\n+  return 0;\n+#endif\n+}\n+\n struct unw_eh_frame_hdr\n {\n   unsigned char version;\n@@ -139,9 +159,11 @@ static struct frame_hdr_cache_element *frame_hdr_cache_head;\n /* Like base_of_encoded_value, but take the base from a struct\n    unw_eh_callback_data instead of an _Unwind_Context.  */\n \n-static _Unwind_Ptr\n-base_from_cb_data (unsigned char encoding, struct unw_eh_callback_data *data)\n+static inline _Unwind_Ptr\n+base_from_cb_data (unsigned char encoding __attribute__ ((unused)),\n+\t\t   _Unwind_Ptr dbase __attribute__ ((unused)))\n {\n+#if NEED_DBASE_MEMBER\n   if (encoding == DW_EH_PE_omit)\n     return 0;\n \n@@ -155,10 +177,13 @@ base_from_cb_data (unsigned char encoding, struct unw_eh_callback_data *data)\n     case DW_EH_PE_textrel:\n       return 0;\n     case DW_EH_PE_datarel:\n-      return (_Unwind_Ptr) data->dbase;\n+      return dbase;\n     default:\n       gcc_unreachable ();\n     }\n+#else /* !NEED_DBASE_MEMBER */\n+  return 0;\n+#endif\n }\n \n static int\n@@ -358,9 +383,10 @@ _Unwind_IteratePhdrCallback (struct dl_phdr_info *info, size_t size, void *ptr)\n # endif\n #endif\n \n+  _Unwind_Ptr dbase = unw_eh_callback_data_dbase (data);\n   p = read_encoded_value_with_base (hdr->eh_frame_ptr_enc,\n \t\t\t\t    base_from_cb_data (hdr->eh_frame_ptr_enc,\n-\t\t\t\t\t\t       data),\n+\t\t\t\t\t\t       dbase),\n \t\t\t\t    (const unsigned char *) (hdr + 1),\n \t\t\t\t    &eh_frame);\n \n@@ -374,7 +400,7 @@ _Unwind_IteratePhdrCallback (struct dl_phdr_info *info, size_t size, void *ptr)\n \n       p = read_encoded_value_with_base (hdr->fde_count_enc,\n \t\t\t\t\tbase_from_cb_data (hdr->fde_count_enc,\n-\t\t\t\t\t\t\t   data),\n+\t\t\t\t\t\t\t   dbase),\n \t\t\t\t\tp, &fde_count);\n       /* Shouldn't happen.  */\n       if (fde_count == 0)\n@@ -431,7 +457,7 @@ _Unwind_IteratePhdrCallback (struct dl_phdr_info *info, size_t size, void *ptr)\n      removed, we could cache this (and thus use search_object).  */\n   ob.pc_begin = NULL;\n   ob.tbase = NULL;\n-  ob.dbase = data->dbase;\n+  ob.dbase = (void *) dbase;\n   ob.u.single = (fde *) eh_frame;\n   ob.s.i = 0;\n   ob.s.b.mixed_encoding = 1;  /* Need to assume worst case.  */\n@@ -442,7 +468,7 @@ _Unwind_IteratePhdrCallback (struct dl_phdr_info *info, size_t size, void *ptr)\n       unsigned int encoding = get_fde_encoding (data->ret);\n \n       read_encoded_value_with_base (encoding,\n-\t\t\t\t    base_from_cb_data (encoding, data),\n+\t\t\t\t    base_from_cb_data (encoding, dbase),\n \t\t\t\t    data->ret->pc_begin, &func);\n       data->func = (void *) func;\n     }\n@@ -460,7 +486,9 @@ _Unwind_Find_FDE (void *pc, struct dwarf_eh_bases *bases)\n     return ret;\n \n   data.pc = (_Unwind_Ptr) pc;\n+#if NEED_DBASE_MEMBER\n   data.dbase = NULL;\n+#endif\n   data.func = NULL;\n   data.ret = NULL;\n   data.check_cache = 1;\n@@ -471,7 +499,11 @@ _Unwind_Find_FDE (void *pc, struct dwarf_eh_bases *bases)\n   if (data.ret)\n     {\n       bases->tbase = NULL;\n+#if NEED_DBASE_MEMBER\n       bases->dbase = data.dbase;\n+#else\n+      bases->dbase = NULL;\n+#endif\n       bases->func = data.func;\n     }\n   return data.ret;"}]}