{"sha": "85d8754632d597fe3d94404406082bcbb2f5ff94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVkODc1NDYzMmQ1OTdmZTNkOTQ0MDQ0MDYwODJiY2JiMmY1ZmY5NA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-01-19T17:02:45Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-01-20T10:03:50Z"}, "message": "Implement NegationExpression\n\nThis is an example of a unary expression in gimple. The rules for enforcing\nthe types are observed in the type resolver here too.\n\nUnary negate cannot be applied to bools but only integers and floats.\nUnary not cannot be applied to floating points but can be applied to\nintegers and bools.", "tree": {"sha": "a118c7d4e6c294fb2b775da8fb75efad6227b0f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a118c7d4e6c294fb2b775da8fb75efad6227b0f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85d8754632d597fe3d94404406082bcbb2f5ff94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d8754632d597fe3d94404406082bcbb2f5ff94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85d8754632d597fe3d94404406082bcbb2f5ff94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d8754632d597fe3d94404406082bcbb2f5ff94/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e09093f1f759a78387d214b6d0fe8ba17b752b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e09093f1f759a78387d214b6d0fe8ba17b752b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e09093f1f759a78387d214b6d0fe8ba17b752b6"}], "stats": {"total": 113, "additions": 113, "deletions": 0}, "files": [{"sha": "da3c9cd70da97f3f100b0b27e248c19b9b8f781b", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d8754632d597fe3d94404406082bcbb2f5ff94/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d8754632d597fe3d94404406082bcbb2f5ff94/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=85d8754632d597fe3d94404406082bcbb2f5ff94", "patch": "@@ -378,6 +378,25 @@ class CompileExpr : public HIRCompileBase\n \t\t\t\t\t\t\t expr.get_locus ());\n   }\n \n+  void visit (HIR::NegationExpr &expr)\n+  {\n+    Operator op (OPERATOR_INVALID);\n+    switch (expr.get_negation_type ())\n+      {\n+      case HIR::NegationExpr::NegationType::NEGATE:\n+\top = OPERATOR_MINUS;\n+\tbreak;\n+\n+      case HIR::NegationExpr::NegationType::NOT:\n+\top = OPERATOR_NOT;\n+\tbreak;\n+      }\n+\n+    Bexpression *negated_expr = CompileExpr::Compile (expr.get_expr (), ctx);\n+    translated = ctx->get_backend ()->unary_expression (op, negated_expr,\n+\t\t\t\t\t\t\texpr.get_locus ());\n+  }\n+\n   void visit (HIR::IfExpr &expr)\n   {\n     auto stmt = CompileConditionalBlocks::compile (&expr, ctx);"}, {"sha": "a924ef2e9846cbd04fdddf231ca8e5411e23d66c", "filename": "gcc/rust/hir/rust-ast-lower-expr.h", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d8754632d597fe3d94404406082bcbb2f5ff94/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d8754632d597fe3d94404406082bcbb2f5ff94/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-expr.h?ref=85d8754632d597fe3d94404406082bcbb2f5ff94", "patch": "@@ -504,6 +504,34 @@ class ASTLoweringExpr : public ASTLoweringBase\n \t\t\t\t  expr.get_locus ());\n   }\n \n+  void visit (AST::NegationExpr &expr)\n+  {\n+    std::vector<HIR::Attribute> outer_attribs;\n+\n+    HIR::NegationExpr::NegationType type;\n+    switch (expr.get_negation_type ())\n+      {\n+      case AST::NegationExpr::NegationType::NEGATE:\n+\ttype = HIR::NegationExpr::NegationType::NEGATE;\n+\tbreak;\n+      case AST::NegationExpr::NegationType::NOT:\n+\ttype = HIR::NegationExpr::NegationType::NOT;\n+\tbreak;\n+      }\n+\n+    HIR::Expr *negated_value\n+      = ASTLoweringExpr::translate (expr.get_negated_expr ().get ());\n+\n+    auto crate_num = mappings->get_current_crate ();\n+    Analysis::NodeMapping mapping (crate_num, expr.get_node_id (),\n+\t\t\t\t   mappings->get_next_hir_id (crate_num),\n+\t\t\t\t   UNKNOWN_LOCAL_DEFID);\n+    translated\n+      = new HIR::NegationExpr (mapping,\n+\t\t\t       std::unique_ptr<HIR::Expr> (negated_value), type,\n+\t\t\t       std::move (outer_attribs), expr.get_locus ());\n+  }\n+\n   void visit (AST::StructExprStructFields &struct_expr)\n   {\n     std::vector<HIR::Attribute> inner_attribs;"}, {"sha": "03b349627c00d9728f42ac11c43346a6d8cb65b5", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d8754632d597fe3d94404406082bcbb2f5ff94/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d8754632d597fe3d94404406082bcbb2f5ff94/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=85d8754632d597fe3d94404406082bcbb2f5ff94", "patch": "@@ -128,6 +128,11 @@ class ResolveExpr : public ResolverBase\n     ResolveExpr::go (expr.get_right_expr ().get (), expr.get_node_id ());\n   }\n \n+  void visit (AST::NegationExpr &expr)\n+  {\n+    ResolveExpr::go (expr.get_negated_expr ().get (), expr.get_node_id ());\n+  }\n+\n   void visit (AST::IfExpr &expr)\n   {\n     ResolveExpr::go (expr.get_condition_expr ().get (), expr.get_node_id ());"}, {"sha": "02830cd885055364fbb6e29f055902f2534dbe61", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d8754632d597fe3d94404406082bcbb2f5ff94/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d8754632d597fe3d94404406082bcbb2f5ff94/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=85d8754632d597fe3d94404406082bcbb2f5ff94", "patch": "@@ -456,6 +456,45 @@ class TypeCheckExpr : public TypeCheckBase\n     infered = lhs->combine (rhs);\n   }\n \n+  void visit (HIR::NegationExpr &expr)\n+  {\n+    auto negated_expr_ty = TypeCheckExpr::Resolve (expr.get_expr ());\n+\n+    // https://doc.rust-lang.org/reference/expressions/operator-expr.html#negation-operators\n+    switch (expr.get_negation_type ())\n+      {\n+\tcase HIR::NegationExpr::NegationType::NEGATE: {\n+\t  bool valid\n+\t    = (negated_expr_ty->get_kind () == TyTy::TypeKind::INT)\n+\t      || (negated_expr_ty->get_kind () == TyTy::TypeKind::UINT)\n+\t      || (negated_expr_ty->get_kind () == TyTy::TypeKind::FLOAT);\n+\t  if (!valid)\n+\t    {\n+\t      rust_error_at (expr.get_locus (), \"cannot apply unary - to %s\",\n+\t\t\t     negated_expr_ty->as_string ().c_str ());\n+\t      return;\n+\t    }\n+\t}\n+\tbreak;\n+\n+\tcase HIR::NegationExpr::NegationType::NOT: {\n+\t  bool valid\n+\t    = (negated_expr_ty->get_kind () == TyTy::TypeKind::BOOL)\n+\t      || (negated_expr_ty->get_kind () == TyTy::TypeKind::INT)\n+\t      || (negated_expr_ty->get_kind () == TyTy::TypeKind::UINT);\n+\t  if (!valid)\n+\t    {\n+\t      rust_error_at (expr.get_locus (), \"cannot apply unary ! to %s\",\n+\t\t\t     negated_expr_ty->as_string ().c_str ());\n+\t      return;\n+\t    }\n+\t}\n+\tbreak;\n+      }\n+\n+    infered = negated_expr_ty;\n+  }\n+\n   void visit (HIR::IfExpr &expr)\n   {\n     TypeCheckExpr::Resolve (expr.get_if_condition ());"}, {"sha": "1ed966617c7cc929dc7e088e9e3e95432a44827e", "filename": "gcc/testsuite/rust.test/compilable/unary_operators.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d8754632d597fe3d94404406082bcbb2f5ff94/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Funary_operators.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d8754632d597fe3d94404406082bcbb2f5ff94/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Funary_operators.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Funary_operators.rs?ref=85d8754632d597fe3d94404406082bcbb2f5ff94", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let a: i32 = -1;\n+    let b: i32 = 3 - -1;\n+    let c: bool = !false;\n+    let d: i32 = !3;\n+}"}, {"sha": "476b908f0835db3225977b4074cafbd77f0cd47a", "filename": "gcc/testsuite/rust.test/fail_compilation/unary_negation.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d8754632d597fe3d94404406082bcbb2f5ff94/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Funary_negation.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d8754632d597fe3d94404406082bcbb2f5ff94/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Funary_negation.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Funary_negation.rs?ref=85d8754632d597fe3d94404406082bcbb2f5ff94", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let a: i32 = -1;\n+    let b: i32 = 3 - -1;\n+    let c: bool = !false;\n+    let d: i32 = !3;\n+\n+    let e: f32 = -true;\n+}"}, {"sha": "f358f0e9c278a05875361cce34de2b369546f62e", "filename": "gcc/testsuite/rust.test/fail_compilation/unary_not.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d8754632d597fe3d94404406082bcbb2f5ff94/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Funary_not.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d8754632d597fe3d94404406082bcbb2f5ff94/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Funary_not.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Ffail_compilation%2Funary_not.rs?ref=85d8754632d597fe3d94404406082bcbb2f5ff94", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let a: i32 = -1;\n+    let b: i32 = 3 - -1;\n+    let c: bool = !false;\n+    let d: i32 = !3;\n+\n+    let e: f32 = !5f32;\n+}"}]}