{"sha": "98998245d99f06946b4d5ed6744c77c3760f1141", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg5OTgyNDVkOTlmMDY5NDZiNGQ1ZWQ2NzQ0Yzc3YzM3NjBmMTE0MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-04-29T08:36:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-04-29T08:36:49Z"}, "message": "re PR tree-optimization/13962 ([tree-ssa] make \"fold\" use alias information to optimize pointer comparisons)\n\n2016-04-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/13962\n\tPR tree-optimization/65686\n\t* tree-ssa-alias.h (ptrs_compare_unequal): Declare.\n\t* tree-ssa-alias.c (ptrs_compare_unequal): New function\n\tusing PTA to compare pointers.\n\t* match.pd: Add pattern for pointer equality compare simplification\n\tusing ptrs_compare_unequal.\n\n\t* gcc.dg/uninit-pr65686.c: New testcase.\n\nFrom-SVN: r235622", "tree": {"sha": "1858d6d18d0408f87683330cd1b7664179f40c81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1858d6d18d0408f87683330cd1b7664179f40c81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98998245d99f06946b4d5ed6744c77c3760f1141", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98998245d99f06946b4d5ed6744c77c3760f1141", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98998245d99f06946b4d5ed6744c77c3760f1141", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98998245d99f06946b4d5ed6744c77c3760f1141/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59cf7a415cf212da56ea3ebd5b34063e84b9275f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59cf7a415cf212da56ea3ebd5b34063e84b9275f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59cf7a415cf212da56ea3ebd5b34063e84b9275f"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "0e7055614c6348d0b98a00bcce90804af39dbeb9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98998245d99f06946b4d5ed6744c77c3760f1141/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98998245d99f06946b4d5ed6744c77c3760f1141/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98998245d99f06946b4d5ed6744c77c3760f1141", "patch": "@@ -1,3 +1,13 @@\n+2016-04-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/13962\n+\tPR tree-optimization/65686\n+\t* tree-ssa-alias.h (ptrs_compare_unequal): Declare.\n+\t* tree-ssa-alias.c (ptrs_compare_unequal): New function\n+\tusing PTA to compare pointers.\n+\t* match.pd: Add pattern for pointer equality compare simplification\n+\tusing ptrs_compare_unequal.\n+\n 2016-04-29  Richard Biener  <rguenther@suse.de>\n \n \t* stor-layout.c (layout_type): Do not build a pointer-to-element"}, {"sha": "608afa3e25eb885efcd4af002727bf0e8cc8ecdb", "filename": "gcc/match.pd", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98998245d99f06946b4d5ed6744c77c3760f1141/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98998245d99f06946b4d5ed6744c77c3760f1141/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=98998245d99f06946b4d5ed6744c77c3760f1141", "patch": "@@ -2400,6 +2400,14 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t(if (cmp == NE_EXPR)\n \t { constant_boolean_node (true, type); })))))))))\n \n+/* Simplify pointer equality compares using PTA.  */\n+(for neeq (ne eq)\n+ (simplify\n+  (neeq @0 @1)\n+  (if (POINTER_TYPE_P (TREE_TYPE (@0))\n+       && ptrs_compare_unequal (@0, @1))\n+   { neeq == EQ_EXPR ? boolean_false_node : boolean_true_node; })))\n+\n /* Non-equality compare simplifications from fold_binary  */\n (for cmp (lt gt le ge)\n  /* Comparisons with the highest or lowest possible integer of"}, {"sha": "389c124627f0ae520be63f104c8061d1a885a43a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98998245d99f06946b4d5ed6744c77c3760f1141/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98998245d99f06946b4d5ed6744c77c3760f1141/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=98998245d99f06946b4d5ed6744c77c3760f1141", "patch": "@@ -1,3 +1,9 @@\n+2016-04-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/13962\n+\tPR tree-optimization/65686\n+\t* gcc.dg/uninit-pr65686.c: New testcase.\n+\n 2016-04-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/70843"}, {"sha": "1962ab76b938b393475071ab017b21e2cb497f2f", "filename": "gcc/testsuite/gcc.dg/uninit-pr65686.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98998245d99f06946b4d5ed6744c77c3760f1141/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr65686.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98998245d99f06946b4d5ed6744c77c3760f1141/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr65686.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr65686.c?ref=98998245d99f06946b4d5ed6744c77c3760f1141", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall -fdump-tree-optimized\" } */\n+\n+typedef unsigned mytype;\n+\n+struct S {\n+    mytype *pu;\n+};\n+\n+mytype f(struct S *e)\n+{\n+  mytype x;  /* { dg-bogus { \"uninitialized\" } } */\n+  if(&x != e->pu)\n+    __builtin_memcpy(&x, e->pu, sizeof(unsigned));\n+  return x;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"if\" \"optimized\" } } */"}, {"sha": "f801b013092cdad13fb8f186f004e5c4d4759168", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98998245d99f06946b4d5ed6744c77c3760f1141/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98998245d99f06946b4d5ed6744c77c3760f1141/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=98998245d99f06946b4d5ed6744c77c3760f1141", "patch": "@@ -321,6 +321,66 @@ ptr_deref_may_alias_ref_p_1 (tree ptr, ao_ref *ref)\n   return true;\n }\n \n+/* Returns true if PTR1 and PTR2 compare unequal because of points-to.  */\n+\n+bool\n+ptrs_compare_unequal (tree ptr1, tree ptr2)\n+{\n+  /* First resolve the pointers down to a SSA name pointer base or\n+     a VAR_DECL, PARM_DECL or RESULT_DECL.  This explicitely does\n+     not yet try to handle LABEL_DECLs, FUNCTION_DECLs, CONST_DECLs\n+     or STRING_CSTs which needs points-to adjustments to track them\n+     in the points-to sets.  */\n+  tree obj1 = NULL_TREE;\n+  tree obj2 = NULL_TREE;\n+  if (TREE_CODE (ptr1) == ADDR_EXPR)\n+    {\n+      tree tem = get_base_address (TREE_OPERAND (ptr1, 0));\n+      if (! tem)\n+\treturn false;\n+      if (TREE_CODE (tem) == VAR_DECL\n+\t  || TREE_CODE (tem) == PARM_DECL\n+\t  || TREE_CODE (tem) == RESULT_DECL)\n+\tobj1 = tem;\n+      else if (TREE_CODE (tem) == MEM_REF)\n+\tptr1 = TREE_OPERAND (tem, 0);\n+    }\n+  if (TREE_CODE (ptr2) == ADDR_EXPR)\n+    {\n+      tree tem = get_base_address (TREE_OPERAND (ptr2, 0));\n+      if (! tem)\n+\treturn false;\n+      if (TREE_CODE (tem) == VAR_DECL\n+\t  || TREE_CODE (tem) == PARM_DECL\n+\t  || TREE_CODE (tem) == RESULT_DECL)\n+\tobj2 = tem;\n+      else if (TREE_CODE (tem) == MEM_REF)\n+\tptr2 = TREE_OPERAND (tem, 0);\n+    }\n+\n+  if (obj1 && obj2)\n+    /* Other code handles this correctly, no need to duplicate it here.  */;\n+  else if (obj1 && TREE_CODE (ptr2) == SSA_NAME)\n+    {\n+      struct ptr_info_def *pi = SSA_NAME_PTR_INFO (ptr2);\n+      if (!pi)\n+\treturn false;\n+      return !pt_solution_includes (&pi->pt, obj1);\n+    }\n+  else if (TREE_CODE (ptr1) == SSA_NAME && obj2)\n+    {\n+      struct ptr_info_def *pi = SSA_NAME_PTR_INFO (ptr1);\n+      if (!pi)\n+\treturn false;\n+      return !pt_solution_includes (&pi->pt, obj2);\n+    }\n+\n+  /* ???  We'd like to handle ptr1 != NULL and ptr1 != ptr2\n+     but those require pt.null to be conservatively correct.  */\n+\n+  return false;\n+}\n+\n /* Returns whether reference REF to BASE may refer to global memory.  */\n \n static bool"}, {"sha": "0593b05a7bcf321712d3b70b56b17f891d2a663b", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98998245d99f06946b4d5ed6744c77c3760f1141/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98998245d99f06946b4d5ed6744c77c3760f1141/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=98998245d99f06946b4d5ed6744c77c3760f1141", "patch": "@@ -101,6 +101,7 @@ extern alias_set_type ao_ref_alias_set (ao_ref *);\n extern alias_set_type ao_ref_base_alias_set (ao_ref *);\n extern bool ptr_deref_may_alias_global_p (tree);\n extern bool ptr_derefs_may_alias_p (tree, tree);\n+extern bool ptrs_compare_unequal (tree, tree);\n extern bool ref_may_alias_global_p (tree);\n extern bool ref_may_alias_global_p (ao_ref *);\n extern bool refs_may_alias_p (tree, tree);"}]}