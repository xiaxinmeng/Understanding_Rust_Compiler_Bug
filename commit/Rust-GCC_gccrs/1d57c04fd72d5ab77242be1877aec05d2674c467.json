{"sha": "1d57c04fd72d5ab77242be1877aec05d2674c467", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ1N2MwNGZkNzJkNWFiNzcyNDJiZTE4NzdhZWMwNWQyNjc0YzQ2Nw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-23T10:21:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-23T10:21:23Z"}, "message": "[multiple changes]\n\n2010-06-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Check_Constant_Address_Clauses): Do not check legality\n\tof address clauses if if Ignore_Rep_Clauses is active.\n\t* freeze.adb (Check_Address_Clause): If Ignore_Rep_Clauses is active,\n\tremove address clause from tree so that it does not reach the backend.\n\n2010-06-23  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference [Attribute_Valid]): Do not\n\texpand 'Valid from user code in CodePeer mode, will be handled by the\n\tback-end directly.\n\n2010-06-23  Bob Duff  <duff@adacore.com>\n\n\t* g-comlin.ads: Minor comment improvements.\n\n2010-06-23  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Uses_SS): The expression that initializes a controlled\n\tcomponent of a record type may be a user-defined operator that is\n\trewritten as a function call.\n\nFrom-SVN: r161271", "tree": {"sha": "a82de8e522d4d4bab28350616d6c574da4a01f9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a82de8e522d4d4bab28350616d6c574da4a01f9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d57c04fd72d5ab77242be1877aec05d2674c467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d57c04fd72d5ab77242be1877aec05d2674c467", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d57c04fd72d5ab77242be1877aec05d2674c467", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d57c04fd72d5ab77242be1877aec05d2674c467/comments", "author": null, "committer": null, "parents": [{"sha": "b91fccb300b34982baaf684c25d4d973df16fb4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b91fccb300b34982baaf684c25d4d973df16fb4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b91fccb300b34982baaf684c25d4d973df16fb4f"}], "stats": {"total": 207, "additions": 137, "deletions": 70}, "files": [{"sha": "6b52cb6014aa5422a54afe02d59c0214ac1c7aba", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d57c04fd72d5ab77242be1877aec05d2674c467/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d57c04fd72d5ab77242be1877aec05d2674c467/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1d57c04fd72d5ab77242be1877aec05d2674c467", "patch": "@@ -1,3 +1,26 @@\n+2010-06-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Check_Constant_Address_Clauses): Do not check legality\n+\tof address clauses if if Ignore_Rep_Clauses is active.\n+\t* freeze.adb (Check_Address_Clause): If Ignore_Rep_Clauses is active,\n+\tremove address clause from tree so that it does not reach the backend.\n+\n+2010-06-23  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_attr.adb (Expand_N_Attribute_Reference [Attribute_Valid]): Do not\n+\texpand 'Valid from user code in CodePeer mode, will be handled by the\n+\tback-end directly.\n+\n+2010-06-23  Bob Duff  <duff@adacore.com>\n+\n+\t* g-comlin.ads: Minor comment improvements.\n+\n+2010-06-23  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Uses_SS): The expression that initializes a controlled\n+\tcomponent of a record type may be a user-defined operator that is\n+\trewritten as a function call.\n+\n 2010-06-23  Bob Duff  <duff@adacore.com>\n \n \t* g-comlin.ads, sem_ch13.adb: Minor comment fix."}, {"sha": "48420c0d68ae9bcfe988aa33c708e1584f786b83", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d57c04fd72d5ab77242be1877aec05d2674c467/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d57c04fd72d5ab77242be1877aec05d2674c467/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=1d57c04fd72d5ab77242be1877aec05d2674c467", "patch": "@@ -4733,6 +4733,13 @@ package body Exp_Attr is\n       --  Start of processing for Attribute_Valid\n \n       begin\n+         --  Do not expand sourced code 'Valid reference in CodePeer mode,\n+         --  will be handled by the back-end directly.\n+\n+         if CodePeer_Mode and then Comes_From_Source (N) then\n+            return;\n+         end if;\n+\n          --  Turn off validity checks. We do not want any implicit validity\n          --  checks to intefere with the explicit check from the attribute\n "}, {"sha": "584ec944058ad2cf939ecfe46c3adda442116f12", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d57c04fd72d5ab77242be1877aec05d2674c467/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d57c04fd72d5ab77242be1877aec05d2674c467/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=1d57c04fd72d5ab77242be1877aec05d2674c467", "patch": "@@ -591,7 +591,36 @@ package body Freeze is\n             end if;\n          end if;\n \n-         if not Error_Posted (Expr)\n+         --  If Rep_Clauses are to be ignored, remove address clause from\n+         --  list attached to entity, because it may be illegal for gigi,\n+         --  for example by breaking order of elaboration..\n+\n+         if Ignore_Rep_Clauses then\n+            declare\n+               Rep : Node_Id;\n+\n+            begin\n+               Rep := First_Rep_Item (E);\n+\n+               if Rep = Addr then\n+                  Set_First_Rep_Item (E, Next_Rep_Item (Addr));\n+\n+               else\n+                  while Present (Rep)\n+                    and then Next_Rep_Item (Rep) /= Addr\n+                  loop\n+                     Rep := Next_Rep_Item (Rep);\n+                  end loop;\n+               end if;\n+\n+               if Present (Rep) then\n+                  Set_Next_Rep_Item (Rep, Next_Rep_Item (Addr));\n+               end if;\n+            end;\n+\n+            Rewrite (Addr, Make_Null_Statement (Sloc (E)));\n+\n+         elsif not Error_Posted (Expr)\n            and then not Needs_Finalization (Typ)\n          then\n             Warn_Overlay (Expr, Typ, Name (Addr));"}, {"sha": "cea2e7b12e8fe8fba87705ed319e8b75ba87f226", "filename": "gcc/ada/g-comlin.ads", "status": "modified", "additions": 65, "deletions": 66, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d57c04fd72d5ab77242be1877aec05d2674c467/gcc%2Fada%2Fg-comlin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d57c04fd72d5ab77242be1877aec05d2674c467/gcc%2Fada%2Fg-comlin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-comlin.ads?ref=1d57c04fd72d5ab77242be1877aec05d2674c467", "patch": "@@ -106,12 +106,12 @@\n --     end loop;\n --  end;\n \n---  The example above have shown how to parse the command line when the\n---  arguments are read directly from Ada.Command_Line. However, these arguments\n---  can also be read from a list of strings. This can be useful in several\n---  contexts, either because your system does not support Ada.Command_Line, or\n---  because you are manipulating other tools and creating their command line by\n---  hand, or for any other reason.\n+--  The examples above show how to parse the command line when the arguments\n+--  are read directly from Ada.Command_Line. However, these arguments can also\n+--  be read from a list of strings. This can be useful in several contexts,\n+--  either because your system does not support Ada.Command_Line, or because\n+--  you are manipulating other tools and creating their command lines by hand,\n+--  or for any other reason.\n \n --  To create the list of strings, it is recommended to use\n --  GNAT.OS_Lib.Argument_String_To_List.\n@@ -140,10 +140,10 @@\n --  adding or removing arguments from them. The resulting command line is kept\n --  as short as possible by coalescing arguments whenever possible.\n \n---  Complex command lines can thus be constructed, for example from an GUI\n+--  Complex command lines can thus be constructed, for example from a GUI\n --  (although this package does not by itself depend upon any specific GUI\n---  toolkit). For instance, if you are configuring the command line to use\n---  when spawning a tool with the following characteristics:\n+--  toolkit). For instance, if you are configuring the command line to use when\n+--  spawning a tool with the following characteristics:\n \n --    * Specifying -gnatwa is the same as specifying -gnatwu -gnatwv, but\n --      shorter and more readable\n@@ -298,17 +298,17 @@ package GNAT.Command_Line is\n    --      as a switch (returned by getopt), otherwise it will be considered\n    --      as a normal argument (returned by Get_Argument).\n    --\n-   --  If SECTION_DELIMITERS is set, then every following subprogram\n+   --  If Section_Delimiters is set, then every following subprogram\n    --  (Getopt and Get_Argument) will only operate within a section, which\n    --  is delimited by any of these delimiters or the end of the command line.\n    --\n    --  Example:\n    --      Initialize_Option_Scan (Section_Delimiters => \"largs bargs cargs\");\n    --\n    --      Arguments on command line : my_application -c -bargs -d -e -largs -f\n-   --      This line is made of three section, the first one is the default one\n+   --      This line contains three sections, the first one is the default one\n    --      and includes only the '-c' switch, the second one is between -bargs\n-   --      and -largs and includes '-d -e' and the last one includes '-f'\n+   --      and -largs and includes '-d -e' and the last one includes '-f'.\n \n    procedure Free (Parser : in out Opt_Parser);\n    --  Free the memory used by the parser. Calling this is not mandatory for\n@@ -320,13 +320,15 @@ package GNAT.Command_Line is\n    --  Change the current section. The next Getopt or Get_Argument will start\n    --  looking at the beginning of the section. An empty name (\"\") refers to\n    --  the first section between the program name and the first section\n-   --  delimiter. If the section does not exist, then Invalid_Section is\n-   --  raised.\n+   --  delimiter. If the section does not exist in Section_Delimiters, then\n+   --  Invalid_Section is raised. If the section does not appear on the command\n+   --  line, then it is treated as an empty section.\n \n    function Full_Switch\n      (Parser : Opt_Parser := Command_Line_Parser) return String;\n-   --  Returns the full name of the last switch found (Getopt only returns\n-   --  the first character)\n+   --  Returns the full name of the last switch found (Getopt only returns the\n+   --  first character). Does not include the Switch_Char ('-' by default),\n+   --  unless the \"*\" option of Getopt is used (see below).\n \n    function Getopt\n      (Switches    : String;\n@@ -336,13 +338,13 @@ package GNAT.Command_Line is\n    --  switch character followed by a character within Switches, casing being\n    --  significant). The result returned is the first character of the switch\n    --  that is located. If there are no more switches in the current section,\n-   --  returns ASCII.NUL. If Concatenate is True (by default), the switches\n-   --  does not need to be separated by spaces (they can be concatenated if\n-   --  they do not require an argument, e.g. -ab is the same as two separate\n-   --  arguments -a -b).\n+   --  returns ASCII.NUL. If Concatenate is True (the default), the switches do\n+   --  not need to be separated by spaces (they can be concatenated if they do\n+   --  not require an argument, e.g. -ab is the same as two separate arguments\n+   --  -a -b).\n    --\n-   --  Switches is a string of all the possible switches, separated by a\n-   --  space. A switch can be followed by one of the following characters:\n+   --  Switches is a string of all the possible switches, separated by\n+   --  spaces. A switch can be followed by one of the following characters:\n    --\n    --   ':'  The switch requires a parameter. There can optionally be a space\n    --        on the command line between the switch and its parameter.\n@@ -389,14 +391,14 @@ package GNAT.Command_Line is\n    --    Example\n    --       Getopt (\"* a b\")\n    --       If the command line is '-a -c toto.o -b', Getopt will return\n-   --       successively 'a', '*', '*' and 'b'. When '*' is returned,\n-   --       Full_Switch returns the corresponding item on the command line.\n+   --       successively 'a', '*', '*' and 'b', with Full_Switch returning\n+   --       \"a\", \"-c\", \"toto.o\", and \"b\".\n    --\n    --  When Getopt encounters an invalid switch, it raises the exception\n    --  Invalid_Switch and sets Full_Switch to return the invalid switch.\n    --  When Getopt cannot find the parameter associated with a switch, it\n    --  raises Invalid_Parameter, and sets Full_Switch to return the invalid\n-   --  switch character.\n+   --  switch.\n    --\n    --  Note: in case of ambiguity, e.g. switches a ab abc, then the longest\n    --  matching switch is returned.\n@@ -416,33 +418,31 @@ package GNAT.Command_Line is\n    function Get_Argument\n      (Do_Expansion : Boolean := False;\n       Parser       : Opt_Parser := Command_Line_Parser) return String;\n-   --  Returns the next element on the command line which is not a switch.\n-   --  This function should not be called before Getopt has returned\n-   --  ASCII.NUL.\n+   --  Returns the next element on the command line that is not a switch.  This\n+   --  function should not be called before Getopt has returned ASCII.NUL.\n    --\n-   --  If Expansion is True, then the parameter on the command line will be\n-   --  considered as a filename with wild cards, and will be expanded. The\n-   --  matching file names will be returned one at a time. When there are no\n-   --  more arguments on the command line, this function returns an empty\n-   --  string. This is useful in non-Unix systems for obtaining normal\n-   --  expansion of wild card references.\n+   --  If Do_Expansion is True, then the parameter on the command line will\n+   --  be considered as a filename with wild cards, and will be expanded. The\n+   --  matching file names will be returned one at a time. This is useful in\n+   --  non-Unix systems for obtaining normal expansion of wild card references.\n+   --  When there are no more arguments on the command line, this function\n+   --  returns an empty string.\n \n    function Parameter\n      (Parser : Opt_Parser := Command_Line_Parser) return String;\n-   --  Returns the parameter associated with the last switch returned by\n-   --  Getopt. If no parameter was associated with the last switch, or no\n-   --  previous call has been made to Get_Argument, raises Invalid_Parameter.\n-   --  If the last switch was associated with an optional argument and this\n-   --  argument was not found on the command line, Parameter returns an empty\n-   --  string.\n+   --  Returns parameter associated with the last switch returned by Getopt.\n+   --  If no parameter was associated with the last switch, or no previous call\n+   --  has been made to Get_Argument, raises Invalid_Parameter. If the last\n+   --  switch was associated with an optional argument and this argument was\n+   --  not found on the command line, Parameter returns an empty string.\n \n    function Separator\n      (Parser : Opt_Parser := Command_Line_Parser) return Character;\n    --  The separator that was between the switch and its parameter. This is\n-   --  of little use in general, only if you want to know exactly what was on\n-   --  the command line. This is in general a single character, set to\n-   --  ASCII.NUL if the switch and the parameter were concatenated. A space is\n-   --  returned if the switch and its argument were in two separate arguments.\n+   --  useful if you want to know exactly what was on the command line. This\n+   --  is in general a single character, set to ASCII.NUL if the switch and\n+   --  the parameter were concatenated. A space is returned if the switch and\n+   --  its argument were in two separate arguments.\n \n    type Expansion_Iterator is limited private;\n    --  Type used during expansion of file names\n@@ -462,16 +462,15 @@ package GNAT.Command_Line is\n    --  Subdirectories of Directory will also be searched, up to one\n    --  hundred levels deep.\n    --\n-   --  When Start_Expansion has been called, function Expansion should be\n-   --  called repeatedly until it returns an empty string, before\n+   --  When Start_Expansion has been called, function Expansion should\n+   --  be called repeatedly until it returns an empty string, before\n    --  Start_Expansion can be called again with the same Expansion_Iterator\n    --  variable.\n \n    function Expansion (Iterator : Expansion_Iterator) return String;\n    --  Returns the next file in the directory matching the parameters given\n    --  to Start_Expansion and updates Iterator to point to the next entry.\n-   --  Returns an empty string when there is no more file in the directory\n-   --  and its subdirectories.\n+   --  Returns an empty string when there are no more files.\n    --\n    --  If Expansion is called again after an empty string has been returned,\n    --  then the exception GNAT.Directory_Operations.Directory_Error is raised.\n@@ -508,31 +507,31 @@ package GNAT.Command_Line is\n      (Config   : in out Command_Line_Configuration;\n       Prefix   : String);\n    --  Indicates that all switches starting with the given prefix should be\n-   --  grouped. For instance, for the GNAT compiler we would define \"-gnatw\"\n-   --  as a prefix, so that \"-gnatwu -gnatwv\" can be grouped into \"-gnatwuv\"\n-   --  It is assume that the remaining of the switch (\"uv\") is a set of\n-   --  characters whose order is irrelevant. In fact, this package will sort\n-   --  them alphabetically.\n+   --  grouped. For instance, for the GNAT compiler we would define \"-gnatw\" as\n+   --  a prefix, so that \"-gnatwu -gnatwv\" can be grouped into \"-gnatwuv\" It is\n+   --  assumed that the remainder of the switch (\"uv\") is a set of characters\n+   --  whose order is irrelevant. In fact, this package will sort them\n+   --  alphabetically.\n \n    procedure Define_Switch\n      (Config : in out Command_Line_Configuration;\n       Switch : String);\n    --  Indicates a new switch. The format of this switch follows the getopt\n    --  format (trailing ':', '?', etc for defining a switch with parameters).\n-   --  The switches defined in the command_line_configuration object are used\n+   --  The switches defined in the Command_Line_Configuration object are used\n    --  when ungrouping switches with more that one character after the prefix.\n \n    procedure Define_Section\n      (Config  : in out Command_Line_Configuration;\n       Section : String);\n-   --  Indicates a new switch section. Every switch belonging to the same\n+   --  Indicates a new switch section. All switches belonging to the same\n    --  section are ordered together, preceded by the section. They are placed\n-   --  at the end of the command line (as in 'gnatmake somefile.adb -cargs -g')\n+   --  at the end of the command line (as in \"gnatmake somefile.adb -cargs -g\")\n \n    function Get_Switches\n      (Config      : Command_Line_Configuration;\n       Switch_Char : Character) return String;\n-   --  Get the switches list as expected by getopt. This list is built using\n+   --  Get the switches list as expected by Getopt. This list is built using\n    --  all switches defined previously via Define_Switch above.\n \n    procedure Free (Config : in out Command_Line_Configuration);\n@@ -562,7 +561,7 @@ package GNAT.Command_Line is\n    --  version with Switches.\n    --\n    --  The parsing of Switches is done through calls to Getopt, by passing\n-   --  Getopt_Description as an argument. (a \"*\" is automatically prepended so\n+   --  Getopt_Description as an argument. (A \"*\" is automatically prepended so\n    --  that all switches and command line arguments are accepted).\n    --\n    --  To properly handle switches that take parameters, you should document\n@@ -571,8 +570,8 @@ package GNAT.Command_Line is\n    --  Command_Line_Iterator (which might be fine depending on your\n    --  application).\n    --\n-   --  If the command line has sections (such as -bargs -largs -cargs), then\n-   --  they should be listed in the Sections parameter (as \"-bargs -cargs\")\n+   --  If the command line has sections (such as -bargs -cargs), then they\n+   --  should be listed in the Sections parameter (as \"-bargs -cargs\").\n    --\n    --  This function can be used to reset Cmd by passing an empty string.\n \n@@ -600,16 +599,16 @@ package GNAT.Command_Line is\n    --  to pass \"--check=full\" to Remove_Switch as well.\n    --\n    --  A Switch with a parameter will never be grouped with another switch to\n-   --  avoid ambiguities as to who the parameter applies to.\n+   --  avoid ambiguities as to what the parameter applies to.\n    --\n    --  Separator is the character that goes between the switches and its\n    --  parameter on the command line. If it is set to ASCII.NUL, then no\n-   --  separator is applied, and they are concatenated\n+   --  separator is applied, and they are concatenated.\n    --\n    --  If the switch is part of a section, then it should be specified so that\n    --  the switch is correctly placed in the command line, and the section\n    --  added if not already present. For example, to add the -g switch into the\n-   --  -cargs section, you need to call (Cmd, \"-g\", Section => \"-cargs\")\n+   --  -cargs section, you need to pass (Cmd, \"-g\", Section => \"-cargs\").\n    --\n    --  Add_Before allows insertion of the switch at the beginning of the\n    --  command line.\n@@ -667,6 +666,9 @@ package GNAT.Command_Line is\n    --  Remove a switch with a specific parameter. If Parameter is the empty\n    --  string, then only a switch with no parameter will be removed.\n \n+   procedure Free (Cmd : in out Command_Line);\n+   --  Free the memory used by Cmd\n+\n    ---------------\n    -- Iteration --\n    ---------------\n@@ -703,9 +705,6 @@ package GNAT.Command_Line is\n    procedure Next (Iter : in out Command_Line_Iterator);\n    --  Move to the next switch\n \n-   procedure Free (Cmd : in out Command_Line);\n-   --  Free the memory used by Cmd\n-\n private\n \n    Max_Depth : constant := 100;"}, {"sha": "8b1d60aa1538f4c27bff451e38212598fc84d7c7", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d57c04fd72d5ab77242be1877aec05d2674c467/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d57c04fd72d5ab77242be1877aec05d2674c467/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=1d57c04fd72d5ab77242be1877aec05d2674c467", "patch": "@@ -3138,7 +3138,14 @@ package body Sem_Ch13 is\n    --  Start of processing for Check_Constant_Address_Clause\n \n    begin\n-      Check_Expr_Constants (Expr);\n+      --  If rep_clauses are to be ignored, no need for legality checks. In\n+      --  particular, no need to pester user about rep clauses that violate\n+      --  the rule on constant addresses, given that these clauses will be\n+      --  removed by Freeze before they reach the back end.\n+\n+      if not Ignore_Rep_Clauses then\n+         Check_Expr_Constants (Expr);\n+      end if;\n    end Check_Constant_Address_Clause;\n \n    ----------------------------------------"}, {"sha": "92ae30f4e55fdbc470b7c47bea0f083a36d948b1", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d57c04fd72d5ab77242be1877aec05d2674c467/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d57c04fd72d5ab77242be1877aec05d2674c467/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=1d57c04fd72d5ab77242be1877aec05d2674c467", "patch": "@@ -906,10 +906,12 @@ package body Sem_Res is\n                   Expr := Original_Node (Expression (Parent (Comp)));\n \n                   --  Return True if the expression is a call to a function\n-                  --  (including an attribute function such as Image) with\n-                  --  a result that requires a transient scope.\n+                  --  (including an attribute function such as Image, or a\n+                  --  user-defined operator) with a result that requires a\n+                  --  transient scope.\n \n                   if (Nkind (Expr) = N_Function_Call\n+                       or else Nkind (Expr) in N_Op\n                        or else (Nkind (Expr) = N_Attribute_Reference\n                                  and then Present (Expressions (Expr))))\n                     and then Requires_Transient_Scope (Etype (Expr))"}]}