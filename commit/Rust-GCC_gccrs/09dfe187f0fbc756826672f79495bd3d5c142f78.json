{"sha": "09dfe187f0fbc756826672f79495bd3d5c142f78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlkZmUxODdmMGZiYzc1NjgyNjY3MmY3OTQ5NWJkM2Q1YzE0MmY3OA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-05-01T19:11:07Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-05-01T19:11:07Z"}, "message": "ipa-inline.c (caller_growth_limits): Fix thinko when\n\n\t* ipa-inline.c (caller_growth_limits): Fix thinko when\n\t* ipa-inline.c (caller_growth_limits): Fix thinko when\n\tlooking for largest stack frame.\n\t* ipa-inline.h (dump_inline_summary): Declare.\n\t* ipa-inline-analysis.c (dump_inline_edge_summary): Dump info\n\ton stack usage.\n\t(dump_inline_summary): Export.\n\t(debug_inline_summary): Declare as DEBUG_FUNCTION.\n\nFrom-SVN: r173234", "tree": {"sha": "a8895ae3de3bfde152ef04c6c346ed4c3be37327", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8895ae3de3bfde152ef04c6c346ed4c3be37327"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09dfe187f0fbc756826672f79495bd3d5c142f78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09dfe187f0fbc756826672f79495bd3d5c142f78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09dfe187f0fbc756826672f79495bd3d5c142f78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09dfe187f0fbc756826672f79495bd3d5c142f78/comments", "author": null, "committer": null, "parents": [{"sha": "12c0e3856baf63f933061aacd4f70cd865913ab1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12c0e3856baf63f933061aacd4f70cd865913ab1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12c0e3856baf63f933061aacd4f70cd865913ab1"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "ffdef91664d61430f163236992874281039a465f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09dfe187f0fbc756826672f79495bd3d5c142f78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09dfe187f0fbc756826672f79495bd3d5c142f78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09dfe187f0fbc756826672f79495bd3d5c142f78", "patch": "@@ -1,3 +1,13 @@\n+2011-05-01  Jan Hubicka  <jh@suse.cz>\n+\n+\t* ipa-inline.c (caller_growth_limits): Fix thinko when\n+\tlooking for largest stack frame.\n+\t* ipa-inline.h (dump_inline_summary): Declare.\n+\t* ipa-inline-analysis.c (dump_inline_edge_summary): Dump info\n+\ton stack usage.\n+\t(dump_inline_summary): Export.\n+\t(debug_inline_summary): Declare as DEBUG_FUNCTION.\n+\n 2011-05-01  Anatoly Sokolov  <aesok@post.ru>\n \n \t* reginfo.c (memory_move_cost): Change rclass argument type form"}, {"sha": "50ae74da75e54ddaf8d7ec58a8541b4cadb6686f", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09dfe187f0fbc756826672f79495bd3d5c142f78/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09dfe187f0fbc756826672f79495bd3d5c142f78/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=09dfe187f0fbc756826672f79495bd3d5c142f78", "patch": "@@ -735,7 +735,7 @@ dump_inline_edge_summary (FILE * f, int indent, struct cgraph_node *node,\n   for (edge = node->callees; edge; edge = edge->next_callee)\n     {\n       struct inline_edge_summary *es = inline_edge_summary (edge);\n-      fprintf (f, \"%*s%s/%i %s\\n%*s  loop depth:%2i freq:%4i size:%2i time: %2i\",\n+      fprintf (f, \"%*s%s/%i %s\\n%*s  loop depth:%2i freq:%4i size:%2i time: %2i callee size:%2i stack:%2i\",\n \t       indent, \"\", cgraph_node_name (edge->callee),\n \t       edge->callee->uid, \n \t       !edge->inline_failed ? \"inlined\"\n@@ -744,7 +744,9 @@ dump_inline_edge_summary (FILE * f, int indent, struct cgraph_node *node,\n \t       es->loop_depth,\t\n                edge->frequency,\n \t       es->call_stmt_size,\n-\t       es->call_stmt_time);\n+\t       es->call_stmt_time,\n+\t       (int)inline_summary (edge->callee)->size,\n+\t       (int)inline_summary (edge->callee)->estimated_stack_size);\n       if (es->predicate)\n \t{\n \t  fprintf (f, \" predicate: \");\n@@ -753,7 +755,14 @@ dump_inline_edge_summary (FILE * f, int indent, struct cgraph_node *node,\n       else\n \t  fprintf (f, \"\\n\");\n       if (!edge->inline_failed)\n-\tdump_inline_edge_summary (f, indent+2, edge->callee, info);\n+\t{\n+          fprintf (f, \"%*sStack frame offset %i, callee self size %i, callee size %i\\n\",\n+\t\t   indent+2, \"\",\n+\t\t   (int)inline_summary (edge->callee)->stack_frame_offset,\n+\t\t   (int)inline_summary (edge->callee)->estimated_self_stack_size,\n+\t\t   (int)inline_summary (edge->callee)->estimated_stack_size);\n+\t  dump_inline_edge_summary (f, indent+2, edge->callee, info);\n+\t}\n     }\n   for (edge = node->indirect_calls; edge; edge = edge->next_callee)\n     {\n@@ -775,7 +784,7 @@ dump_inline_edge_summary (FILE * f, int indent, struct cgraph_node *node,\n }\n \n \n-static void\n+void\n dump_inline_summary (FILE * f, struct cgraph_node *node)\n {\n   if (node->analyzed)\n@@ -816,7 +825,7 @@ dump_inline_summary (FILE * f, struct cgraph_node *node)\n     }\n }\n \n-void\n+DEBUG_FUNCTION void\n debug_inline_summary (struct cgraph_node *node)\n {\n   dump_inline_summary (stderr, node);"}, {"sha": "437f6b2c7169a8bee9c2dfca8c6317600d4ebba7", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09dfe187f0fbc756826672f79495bd3d5c142f78/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09dfe187f0fbc756826672f79495bd3d5c142f78/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=09dfe187f0fbc756826672f79495bd3d5c142f78", "patch": "@@ -151,7 +151,7 @@ caller_growth_limits (struct cgraph_edge *e)\n      we immediately inline to.  This is the most relaxed\n      interpretation of the rule \"do not grow large functions\n      too much in order to prevent compiler from exploding\".  */\n-  do\n+  while (true)\n     {\n       info = inline_summary (to);\n       if (limit < info->self_size)\n@@ -160,8 +160,9 @@ caller_growth_limits (struct cgraph_edge *e)\n \tstack_size_limit = info->estimated_self_stack_size;\n       if (to->global.inlined_to)\n         to = to->callers->caller;\n+      else\n+\tbreak;\n     }\n-  while (to->global.inlined_to);\n \n   what_info = inline_summary (what);\n \n@@ -181,12 +182,15 @@ caller_growth_limits (struct cgraph_edge *e)\n       return false;\n     }\n \n+  if (!what_info->estimated_stack_size)\n+    return true;\n+\n   /* FIXME: Stack size limit often prevents inlining in Fortran programs\n      due to large i/o datastructures used by the Fortran front-end.\n      We ought to ignore this limit when we know that the edge is executed\n      on every invocation of the caller (i.e. its call statement dominates\n      exit block).  We do not track this information, yet.  */\n-  stack_size_limit += (stack_size_limit\n+  stack_size_limit += ((gcov_type)stack_size_limit\n \t\t       * PARAM_VALUE (PARAM_STACK_FRAME_GROWTH) / 100);\n \n   inlined_stack = (outer_info->stack_frame_offset"}, {"sha": "11dd15e42b936dd7f80b99c6f5f3239985c050ac", "filename": "gcc/ipa-inline.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09dfe187f0fbc756826672f79495bd3d5c142f78/gcc%2Fipa-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09dfe187f0fbc756826672f79495bd3d5c142f78/gcc%2Fipa-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.h?ref=09dfe187f0fbc756826672f79495bd3d5c142f78", "patch": "@@ -141,6 +141,7 @@ extern VEC(edge_growth_cache_entry,heap) *edge_growth_cache;\n /* In ipa-inline-analysis.c  */\n void debug_inline_summary (struct cgraph_node *);\n void dump_inline_summaries (FILE *f);\n+void dump_inline_summary (FILE * f, struct cgraph_node *node);\n void inline_generate_summary (void);\n void inline_read_summary (void);\n void inline_write_summary (cgraph_node_set, varpool_node_set);"}]}