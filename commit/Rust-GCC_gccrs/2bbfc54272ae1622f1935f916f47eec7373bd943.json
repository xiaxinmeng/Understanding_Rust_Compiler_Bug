{"sha": "2bbfc54272ae1622f1935f916f47eec7373bd943", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJiZmM1NDI3MmFlMTYyMmYxOTM1ZjkxNmY0N2VlYzczNzNiZDk0Mw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-02-12T23:32:21Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-02-12T23:32:21Z"}, "message": "* config/h8300/h8300.md (a peephole2): New.\n\nFrom-SVN: r62792", "tree": {"sha": "93fbe60c27222fd9e6ef5d28e239195cec41edef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93fbe60c27222fd9e6ef5d28e239195cec41edef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bbfc54272ae1622f1935f916f47eec7373bd943", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bbfc54272ae1622f1935f916f47eec7373bd943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bbfc54272ae1622f1935f916f47eec7373bd943", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bbfc54272ae1622f1935f916f47eec7373bd943/comments", "author": null, "committer": null, "parents": [{"sha": "e72fcfe8e47d6b453a9a7685c64b8595c32a2252", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e72fcfe8e47d6b453a9a7685c64b8595c32a2252", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e72fcfe8e47d6b453a9a7685c64b8595c32a2252"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "da2df7a430e51b0b3ad9e5d8da9dea183c5d096d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bbfc54272ae1622f1935f916f47eec7373bd943/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bbfc54272ae1622f1935f916f47eec7373bd943/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2bbfc54272ae1622f1935f916f47eec7373bd943", "patch": "@@ -1,3 +1,7 @@\n+2003-02-12  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.md (a peephole2): New.\n+\n Wed Feb 12 22:47:18 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* Makefile.in (CRTSTUFF_CFLAGS): Add -fno-unit-at-a-time"}, {"sha": "31454ba545c2795b167550ae137167f7c10002e9", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bbfc54272ae1622f1935f916f47eec7373bd943/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bbfc54272ae1622f1935f916f47eec7373bd943/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=2bbfc54272ae1622f1935f916f47eec7373bd943", "patch": "@@ -3561,6 +3561,36 @@\n \t\t  gen_rtx_NE (VOIDmode, cc0_rtx, const0_rtx) :\n \t\t  gen_rtx_EQ (VOIDmode, cc0_rtx, const0_rtx));\")\n \n+;; For constants like -1, -2, 1, 2, it is still cheaper to make a copy\n+;; of the register being tested, do the subtraction on the copy, and\n+;; then test the copy.  We avoid this transformation if we see more\n+;; than one copy of the same compare insn.\n+\n+(define_peephole2\n+  [(match_scratch:SI 4 \"r\")\n+   (set (cc0)\n+\t(compare:SI (match_operand:SI 0 \"register_operand\" \"\")\n+\t\t    (match_operand:SI 1 \"incdec_operand\" \"\")))\n+   (set (pc)\n+\t(if_then_else (match_operator 3 \"eqne_operator\"\n+\t\t\t[(cc0) (const_int 0)])\n+\t\t      (label_ref (match_operand 2 \"\" \"\"))\n+\t\t      (pc)))]\n+  \"(TARGET_H8300H || TARGET_H8300S)\n+   && !peep2_reg_dead_p (1, operands[0])\n+   && !rtx_equal_p (PATTERN (insn),\n+\t\t    PATTERN (next_nonnote_insn (next_nonnote_insn (insn))))\"\n+  [(set (cc0)\n+\t(match_dup 0))\n+   (set (pc)\n+\t(if_then_else (match_op_dup 3 [(cc0) (const_int 0)])\n+\t\t      (label_ref (match_dup 2))\n+\t\t      (pc)))]\n+  \"emit_move_insn (operands[4], operands[0]);\n+   operands[0] = operands[4];\n+   operands[1] = GEN_INT (- INTVAL (operands[1]));\n+   split_adds_subs (SImode, operands, 1);\")\n+\n ;; Narrow the mode of testing if possible.\n \n (define_peephole2"}]}