{"sha": "c16c40808331a02947b1ad962e85e1b40e30a707", "node_id": "C_kwDOANBUbNoAKGMxNmM0MDgwODMzMWEwMjk0N2IxYWQ5NjJlODVlMWI0MGUzMGE3MDc", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-10T10:24:48Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-11-11T13:52:09Z"}, "message": "[range-ops] Update known bitmasks using CCP for all operators.\n\nUse bit-CCP to calculate bitmasks for all integer operators, instead\nof the half-assed job we were doing with just a handful of operators.\n\nThis sets us up nicely for tracking known-one bitmasks in the next\nrelease, as all we'll have to do is just store them in the irange.\n\nAll in all, this series of patches incur a 1.9% penalty to VRP, with\nno measurable difference in overall compile time.  The reason is\nthree-fold:\n\n(a) There's double dispatch going on.  First, the dispatch for the\nrange-ops virtuals, and now the switch in bit_value_binop.\n\n(b) The maybe nonzero mask is stored as a tree and there is an endless\nback and forth with wide-ints.  This will be a non-issue next release,\nwhen we convert irange to wide-ints.\n\n(c) New functionality has a cost.  We were handling 2 cases (plus\ncasts).  Now we handle 20.\n\nI can play around with moving the bit_value_binop cases into inlined\nmethods in the different range-op entries, and see if that improves\nanything, but I doubt (a) buys us that much.  Certainly something that\ncan be done in stage3 if it's measurable in any significant way.\n\np.s It would be nice in the future to teach the op[12]_range methods about\nthe masks.\n\ngcc/ChangeLog:\n\n\t* range-op.cc (range_operator::fold_range): Call\n\tupdate_known_bitmask.\n\t(operator_bitwise_and::fold_range): Avoid setting nonzero bits\n\twhen range is undefined.", "tree": {"sha": "9ff46607bd8725a8ba4c184ffdd5a6b650d895ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ff46607bd8725a8ba4c184ffdd5a6b650d895ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c16c40808331a02947b1ad962e85e1b40e30a707", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c16c40808331a02947b1ad962e85e1b40e30a707", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c16c40808331a02947b1ad962e85e1b40e30a707", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c16c40808331a02947b1ad962e85e1b40e30a707/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3e8dc87b79a0c887e16553e975aa54f694f1de1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3e8dc87b79a0c887e16553e975aa54f694f1de1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3e8dc87b79a0c887e16553e975aa54f694f1de1"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "9eec46441a38e1b405e111824e1b4c9aff73ec5d", "filename": "gcc/range-op.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16c40808331a02947b1ad962e85e1b40e30a707/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16c40808331a02947b1ad962e85e1b40e30a707/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=c16c40808331a02947b1ad962e85e1b40e30a707", "patch": "@@ -245,6 +245,7 @@ range_operator::fold_range (irange &r, tree type,\n       wi_fold_in_parts (r, type, lh.lower_bound (), lh.upper_bound (),\n \t\t\trh.lower_bound (), rh.upper_bound ());\n       op1_op2_relation_effect (r, type, lh, rh, rel);\n+      update_known_bitmask (r, m_code, lh, rh);\n       return true;\n     }\n \n@@ -262,10 +263,12 @@ range_operator::fold_range (irange &r, tree type,\n \tif (r.varying_p ())\n \t  {\n \t    op1_op2_relation_effect (r, type, lh, rh, rel);\n+\t    update_known_bitmask (r, m_code, lh, rh);\n \t    return true;\n \t  }\n       }\n   op1_op2_relation_effect (r, type, lh, rh, rel);\n+  update_known_bitmask (r, m_code, lh, rh);\n   return true;\n }\n \n@@ -2873,7 +2876,7 @@ operator_bitwise_and::fold_range (irange &r, tree type,\n {\n   if (range_operator::fold_range (r, type, lh, rh))\n     {\n-      if (!lh.undefined_p () && !rh.undefined_p ())\n+      if (!r.undefined_p () && !lh.undefined_p () && !rh.undefined_p ())\n \tr.set_nonzero_bits (wi::bit_and (lh.get_nonzero_bits (),\n \t\t\t\t\t rh.get_nonzero_bits ()));\n       return true;"}]}