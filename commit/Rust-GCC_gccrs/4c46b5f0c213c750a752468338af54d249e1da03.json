{"sha": "4c46b5f0c213c750a752468338af54d249e1da03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM0NmI1ZjBjMjEzYzc1MGE3NTI0NjgzMzhhZjU0ZDI0OWUxZGEwMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-11-14T18:02:50Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-11-14T18:02:50Z"}, "message": "runtime: set library name based on compiler name\n\nDifferent compilers may have different release cadences or ABI\nincompatibilities, so it does not make sense to use the same library\nname for runtime libraries intended for different compilers.\n\nThis CL causes a libgo built by llgo to receive the name libgo-llgo.\nLikewise, libgobegin is named libgobegin-llgo.\n\nFrom-SVN: r217583", "tree": {"sha": "ab0b06d6b17b3adc80d4bfbfe17e29a01492b1df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab0b06d6b17b3adc80d4bfbfe17e29a01492b1df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c46b5f0c213c750a752468338af54d249e1da03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c46b5f0c213c750a752468338af54d249e1da03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c46b5f0c213c750a752468338af54d249e1da03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c46b5f0c213c750a752468338af54d249e1da03/comments", "author": null, "committer": null, "parents": [{"sha": "8413ca874e088161ca0fbc3bf3a98cffc45564f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8413ca874e088161ca0fbc3bf3a98cffc45564f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8413ca874e088161ca0fbc3bf3a98cffc45564f3"}], "stats": {"total": 160, "additions": 116, "deletions": 44}, "files": [{"sha": "c6ee01ba3d32d4aa3663aee85ad26deec684aba1", "filename": "libgo/Makefile.am", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c46b5f0c213c750a752468338af54d249e1da03/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c46b5f0c213c750a752468338af54d249e1da03/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=4c46b5f0c213c750a752468338af54d249e1da03", "patch": "@@ -99,8 +99,13 @@ AM_MAKEFLAGS = \\\n # Subdir rules rely on $(FLAGS_TO_PASS)\n FLAGS_TO_PASS = $(AM_MAKEFLAGS)\n \n+if GOC_IS_LLGO\n+toolexeclib_LTLIBRARIES = libgo-llgo.la\n+toolexeclib_LIBRARIES = libgobegin-llgo.a\n+else\n toolexeclib_LTLIBRARIES = libgo.la\n toolexeclib_LIBRARIES = libgobegin.a\n+endif\n \n toolexeclibgo_DATA = \\\n \tbufio.gox \\\n@@ -1993,18 +1998,27 @@ libgo_go_objs = \\\n \tunicode/utf16.lo \\\n \tunicode/utf8.lo\n \n-libgo_la_SOURCES = $(runtime_files)\n-\n-libgo_la_LDFLAGS = \\\n+libgo_ldflags = \\\n \t-version-info $(libtool_VERSION) $(PTHREAD_CFLAGS) $(AM_LDFLAGS)\n \n-libgo_la_LIBADD = \\\n+libgo_libadd = \\\n \t$(libgo_go_objs) ../libbacktrace/libbacktrace.la \\\n \t$(LIBATOMIC) $(LIBFFI) $(PTHREAD_LIBS) $(MATH_LIBS) $(NET_LIBS)\n \n+libgo_la_SOURCES = $(runtime_files)\n+libgo_la_LDFLAGS = $(libgo_ldflags)\n+libgo_la_LIBADD = $(libgo_libadd)\n+\n+libgo_llgo_la_SOURCES = $(runtime_files)\n+libgo_llgo_la_LDFLAGS = $(libgo_ldflags)\n+libgo_llgo_la_LIBADD = $(libgo_libadd)\n+\n libgobegin_a_SOURCES = \\\n \truntime/go-main.c\n \n+libgobegin_llgo_a_SOURCES = \\\n+\truntime/go-main.c\n+\n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n \n GOCFLAGS = $(CFLAGS)\n@@ -2066,7 +2080,7 @@ CHECK = \\\n \tfi\n \n # Build all packages before checking any.\n-CHECK_DEPS = libgo.la libgobegin.a \\\n+CHECK_DEPS = \\\n \t$(toolexeclibgo_DATA) \\\n \t$(toolexeclibgoarchive_DATA) \\\n \t$(toolexeclibgocompress_DATA) \\\n@@ -2095,6 +2109,12 @@ CHECK_DEPS = libgo.la libgobegin.a \\\n \t$(toolexeclibgotexttemplate_DATA) \\\n \t$(toolexeclibgounicode_DATA)\n \n+if GOC_IS_LLGO\n+CHECK_DEPS += libgo-llgo.la libgobegin-llgo.a\n+else\n+CHECK_DEPS += libgo.la libgobegin.a\n+endif\n+\n @go_include@ bufio.lo.dep\n bufio.lo.dep: $(go_bufio_files)\n \t$(BUILDDEPS)"}, {"sha": "f42c8f96fbd3eff19558986fba9db0f792301193", "filename": "libgo/Makefile.in", "status": "modified", "additions": 54, "deletions": 37, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c46b5f0c213c750a752468338af54d249e1da03/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c46b5f0c213c750a752468338af54d249e1da03/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=4c46b5f0c213c750a752468338af54d249e1da03", "patch": "@@ -45,6 +45,8 @@ POST_UNINSTALL = :\n build_triplet = @build@\n host_triplet = @host@\n target_triplet = @target@\n+@GOC_IS_LLGO_TRUE@am__append_1 = libgo-llgo.la libgobegin-llgo.a\n+@GOC_IS_LLGO_FALSE@am__append_2 = libgo.la libgobegin.a\n subdir = .\n DIST_COMMON = README $(srcdir)/Makefile.in $(srcdir)/Makefile.am \\\n \t$(top_srcdir)/configure $(am__configure_deps) \\\n@@ -126,6 +128,10 @@ am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\" \\\n \t\"$(DESTDIR)$(toolexeclibgounicodedir)\"\n LIBRARIES = $(toolexeclib_LIBRARIES)\n ARFLAGS = cru\n+libgobegin_llgo_a_AR = $(AR) $(ARFLAGS)\n+libgobegin_llgo_a_LIBADD =\n+am_libgobegin_llgo_a_OBJECTS = go-main.$(OBJEXT)\n+libgobegin_llgo_a_OBJECTS = $(am_libgobegin_llgo_a_OBJECTS)\n libgobegin_a_AR = $(AR) $(ARFLAGS)\n libgobegin_a_LIBADD =\n am_libgobegin_a_OBJECTS = go-main.$(OBJEXT)\n@@ -171,10 +177,11 @@ am__DEPENDENCIES_2 = bufio.lo bytes.lo bytes/index.lo crypto.lo \\\n \ttext/tabwriter.lo text/template.lo text/template/parse.lo \\\n \ttesting/iotest.lo testing/quick.lo unicode/utf16.lo \\\n \tunicode/utf8.lo\n-libgo_la_DEPENDENCIES = $(am__DEPENDENCIES_2) \\\n+am__DEPENDENCIES_3 = $(am__DEPENDENCIES_2) \\\n \t../libbacktrace/libbacktrace.la $(am__DEPENDENCIES_1) \\\n \t$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \\\n \t$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)\n+libgo_llgo_la_DEPENDENCIES = $(am__DEPENDENCIES_3)\n @LIBGO_IS_LINUX_FALSE@am__objects_1 = lock_sema.lo thread-sema.lo\n @LIBGO_IS_LINUX_TRUE@am__objects_1 = lock_futex.lo thread-linux.lo\n @HAVE_SYS_MMAN_H_FALSE@am__objects_2 = mem_posix_memalign.lo\n@@ -220,11 +227,19 @@ am__objects_6 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \tmalloc.lo map.lo mprof.lo netpoll.lo rdebug.lo reflect.lo \\\n \truntime1.lo sema.lo sigqueue.lo string.lo time.lo \\\n \t$(am__objects_5)\n+am_libgo_llgo_la_OBJECTS = $(am__objects_6)\n+libgo_llgo_la_OBJECTS = $(am_libgo_llgo_la_OBJECTS)\n+libgo_llgo_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \\\n+\t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\\n+\t$(libgo_llgo_la_LDFLAGS) $(LDFLAGS) -o $@\n+@GOC_IS_LLGO_TRUE@am_libgo_llgo_la_rpath = -rpath $(toolexeclibdir)\n+libgo_la_DEPENDENCIES = $(am__DEPENDENCIES_3)\n am_libgo_la_OBJECTS = $(am__objects_6)\n libgo_la_OBJECTS = $(am_libgo_la_OBJECTS)\n libgo_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n \t--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(libgo_la_LDFLAGS) \\\n \t$(LDFLAGS) -o $@\n+@GOC_IS_LLGO_FALSE@am_libgo_la_rpath = -rpath $(toolexeclibdir)\n DEFAULT_INCLUDES = -I.@am__isrc@\n depcomp = $(SHELL) $(top_srcdir)/../depcomp\n am__depfiles_maybe = depfiles\n@@ -238,7 +253,8 @@ CCLD = $(CC)\n LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n \t--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \\\n \t$(LDFLAGS) -o $@\n-SOURCES = $(libgobegin_a_SOURCES) $(libgo_la_SOURCES)\n+SOURCES = $(libgobegin_llgo_a_SOURCES) $(libgobegin_a_SOURCES) \\\n+\t$(libgo_llgo_la_SOURCES) $(libgo_la_SOURCES)\n MULTISRCTOP = \n MULTIBUILDTOP = \n MULTIDIRS = \n@@ -501,8 +517,10 @@ AM_MAKEFLAGS = \\\n \n # Subdir rules rely on $(FLAGS_TO_PASS)\n FLAGS_TO_PASS = $(AM_MAKEFLAGS)\n-toolexeclib_LTLIBRARIES = libgo.la\n-toolexeclib_LIBRARIES = libgobegin.a\n+@GOC_IS_LLGO_FALSE@toolexeclib_LTLIBRARIES = libgo.la\n+@GOC_IS_LLGO_TRUE@toolexeclib_LTLIBRARIES = libgo-llgo.la\n+@GOC_IS_LLGO_FALSE@toolexeclib_LIBRARIES = libgobegin.a\n+@GOC_IS_LLGO_TRUE@toolexeclib_LIBRARIES = libgobegin-llgo.a\n toolexeclibgo_DATA = \\\n \tbufio.gox \\\n \tbytes.gox \\\n@@ -2054,17 +2072,25 @@ libgo_go_objs = \\\n \tunicode/utf16.lo \\\n \tunicode/utf8.lo\n \n-libgo_la_SOURCES = $(runtime_files)\n-libgo_la_LDFLAGS = \\\n+libgo_ldflags = \\\n \t-version-info $(libtool_VERSION) $(PTHREAD_CFLAGS) $(AM_LDFLAGS)\n \n-libgo_la_LIBADD = \\\n+libgo_libadd = \\\n \t$(libgo_go_objs) ../libbacktrace/libbacktrace.la \\\n \t$(LIBATOMIC) $(LIBFFI) $(PTHREAD_LIBS) $(MATH_LIBS) $(NET_LIBS)\n \n+libgo_la_SOURCES = $(runtime_files)\n+libgo_la_LDFLAGS = $(libgo_ldflags)\n+libgo_la_LIBADD = $(libgo_libadd)\n+libgo_llgo_la_SOURCES = $(runtime_files)\n+libgo_llgo_la_LDFLAGS = $(libgo_ldflags)\n+libgo_llgo_la_LIBADD = $(libgo_libadd)\n libgobegin_a_SOURCES = \\\n \truntime/go-main.c\n \n+libgobegin_llgo_a_SOURCES = \\\n+\truntime/go-main.c\n+\n LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n AM_GOCFLAGS = $(STRINGOPS_FLAG)\n GOCOMPILE = $(GOC) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_GOCFLAGS) $(GOCFLAGS)\n@@ -2126,35 +2152,20 @@ CHECK = \\\n \n \n # Build all packages before checking any.\n-CHECK_DEPS = libgo.la libgobegin.a \\\n-\t$(toolexeclibgo_DATA) \\\n-\t$(toolexeclibgoarchive_DATA) \\\n-\t$(toolexeclibgocompress_DATA) \\\n-\t$(toolexeclibgocontainer_DATA) \\\n-\t$(toolexeclibgocrypto_DATA) \\\n-\t$(toolexeclibgodebug_DATA) \\\n-\t$(toolexeclibgoencoding_DATA) \\\n-\t$(toolexeclibgoexp_DATA) \\\n-\t$(toolexeclibgogo_DATA) \\\n-\t$(toolexeclibgohash_DATA) \\\n-\t$(toolexeclibgoimage_DATA) \\\n-\t$(toolexeclibgoindex_DATA) \\\n-\t$(toolexeclibgoio_DATA) \\\n-\t$(toolexeclibgolog_DATA) \\\n-\t$(toolexeclibgomath_DATA) \\\n-\t$(toolexeclibgomime_DATA) \\\n-\t$(toolexeclibgonet_DATA) \\\n-\t$(toolexeclibgonethttp_DATA) \\\n-\t$(toolexeclibgoos_DATA) \\\n-\t$(toolexeclibgopath_DATA) \\\n-\t$(toolexeclibgorpc_DATA) \\\n-\t$(toolexeclibgoruntime_DATA) \\\n-\t$(toolexeclibgosync_DATA) \\\n-\t$(toolexeclibgotesting_DATA) \\\n-\t$(toolexeclibgotext_DATA) \\\n-\t$(toolexeclibgotexttemplate_DATA) \\\n-\t$(toolexeclibgounicode_DATA)\n-\n+CHECK_DEPS = $(toolexeclibgo_DATA) $(toolexeclibgoarchive_DATA) \\\n+\t$(toolexeclibgocompress_DATA) $(toolexeclibgocontainer_DATA) \\\n+\t$(toolexeclibgocrypto_DATA) $(toolexeclibgodebug_DATA) \\\n+\t$(toolexeclibgoencoding_DATA) $(toolexeclibgoexp_DATA) \\\n+\t$(toolexeclibgogo_DATA) $(toolexeclibgohash_DATA) \\\n+\t$(toolexeclibgoimage_DATA) $(toolexeclibgoindex_DATA) \\\n+\t$(toolexeclibgoio_DATA) $(toolexeclibgolog_DATA) \\\n+\t$(toolexeclibgomath_DATA) $(toolexeclibgomime_DATA) \\\n+\t$(toolexeclibgonet_DATA) $(toolexeclibgonethttp_DATA) \\\n+\t$(toolexeclibgoos_DATA) $(toolexeclibgopath_DATA) \\\n+\t$(toolexeclibgorpc_DATA) $(toolexeclibgoruntime_DATA) \\\n+\t$(toolexeclibgosync_DATA) $(toolexeclibgotesting_DATA) \\\n+\t$(toolexeclibgotext_DATA) $(toolexeclibgotexttemplate_DATA) \\\n+\t$(toolexeclibgounicode_DATA) $(am__append_1) $(am__append_2)\n # At least for now, we need -static-libgo for this test, because\n # otherwise we can't get the line numbers.\n runtime_pprof_check_GOCFLAGS = -static-libgo\n@@ -2380,6 +2391,10 @@ uninstall-toolexeclibLIBRARIES:\n \n clean-toolexeclibLIBRARIES:\n \t-test -z \"$(toolexeclib_LIBRARIES)\" || rm -f $(toolexeclib_LIBRARIES)\n+libgobegin-llgo.a: $(libgobegin_llgo_a_OBJECTS) $(libgobegin_llgo_a_DEPENDENCIES) \n+\t-rm -f libgobegin-llgo.a\n+\t$(libgobegin_llgo_a_AR) libgobegin-llgo.a $(libgobegin_llgo_a_OBJECTS) $(libgobegin_llgo_a_LIBADD)\n+\t$(RANLIB) libgobegin-llgo.a\n libgobegin.a: $(libgobegin_a_OBJECTS) $(libgobegin_a_DEPENDENCIES) \n \t-rm -f libgobegin.a\n \t$(libgobegin_a_AR) libgobegin.a $(libgobegin_a_OBJECTS) $(libgobegin_a_LIBADD)\n@@ -2415,8 +2430,10 @@ clean-toolexeclibLTLIBRARIES:\n \t  echo \"rm -f \\\"$${dir}/so_locations\\\"\"; \\\n \t  rm -f \"$${dir}/so_locations\"; \\\n \tdone\n+libgo-llgo.la: $(libgo_llgo_la_OBJECTS) $(libgo_llgo_la_DEPENDENCIES) \n+\t$(libgo_llgo_la_LINK) $(am_libgo_llgo_la_rpath) $(libgo_llgo_la_OBJECTS) $(libgo_llgo_la_LIBADD) $(LIBS)\n libgo.la: $(libgo_la_OBJECTS) $(libgo_la_DEPENDENCIES) \n-\t$(libgo_la_LINK) -rpath $(toolexeclibdir) $(libgo_la_OBJECTS) $(libgo_la_LIBADD) $(LIBS)\n+\t$(libgo_la_LINK) $(am_libgo_la_rpath) $(libgo_la_OBJECTS) $(libgo_la_LIBADD) $(LIBS)\n \n mostlyclean-compile:\n \t-rm -f *.$(OBJEXT)"}, {"sha": "3352c0ff6d1198b9c32a7e9343c441a7f1153ca1", "filename": "libgo/configure", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c46b5f0c213c750a752468338af54d249e1da03/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c46b5f0c213c750a752468338af54d249e1da03/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=4c46b5f0c213c750a752468338af54d249e1da03", "patch": "@@ -616,6 +616,8 @@ PTHREAD_LIBS\n PTHREAD_CFLAGS\n NET_LIBS\n MATH_LIBS\n+GOC_IS_LLGO_FALSE\n+GOC_IS_LLGO_TRUE\n USING_SPLIT_STACK_FALSE\n USING_SPLIT_STACK_TRUE\n SPLIT_STACK\n@@ -11117,7 +11119,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11120 \"configure\"\n+#line 11122 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11223,7 +11225,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11226 \"configure\"\n+#line 11228 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14014,6 +14016,27 @@ $as_echo \"#define LINKER_SUPPORTS_SPLIT_STACK 1\" >>confdefs.h\n \n fi\n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether compiler is llgo\" >&5\n+$as_echo_n \"checking whether compiler is llgo... \" >&6; }\n+if test \"${libgo_cv_c_goc_is_llgo+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  libgo_cv_c_goc_is_llgo=no\n+if $GOC -dumpversion 2>/dev/null | grep llgo >/dev/null 2>&1; then\n+  libgo_cv_c_goc_is_llgo=yes\n+fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_c_goc_is_llgo\" >&5\n+$as_echo \"$libgo_cv_c_goc_is_llgo\" >&6; }\n+ if test \"$libgo_cv_c_goc_is_llgo\" = yes; then\n+  GOC_IS_LLGO_TRUE=\n+  GOC_IS_LLGO_FALSE='#'\n+else\n+  GOC_IS_LLGO_TRUE='#'\n+  GOC_IS_LLGO_FALSE=\n+fi\n+\n+\n MATH_LIBS=\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for sqrt in -lm\" >&5\n $as_echo_n \"checking for sqrt in -lm... \" >&6; }\n@@ -15692,6 +15715,10 @@ if test -z \"${USING_SPLIT_STACK_TRUE}\" && test -z \"${USING_SPLIT_STACK_FALSE}\";\n   as_fn_error \"conditional \\\"USING_SPLIT_STACK\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${GOC_IS_LLGO_TRUE}\" && test -z \"${GOC_IS_LLGO_FALSE}\"; then\n+  as_fn_error \"conditional \\\"GOC_IS_LLGO\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n \n if test -z \"${HAVE_SYS_MMAN_H_TRUE}\" && test -z \"${HAVE_SYS_MMAN_H_FALSE}\"; then\n   as_fn_error \"conditional \\\"HAVE_SYS_MMAN_H\\\" was never defined."}, {"sha": "6dac4d693fe64e6279634fc15b52e630d115a754", "filename": "libgo/configure.ac", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c46b5f0c213c750a752468338af54d249e1da03/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c46b5f0c213c750a752468338af54d249e1da03/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=4c46b5f0c213c750a752468338af54d249e1da03", "patch": "@@ -392,6 +392,14 @@ if test \"$libgo_cv_c_linker_supports_split_stack\" = yes; then\n \t    [Define if the linker support split stack adjustments])\n fi\n \n+AC_CACHE_CHECK([whether compiler is llgo],\n+[libgo_cv_c_goc_is_llgo],\n+[libgo_cv_c_goc_is_llgo=no\n+if $GOC -dumpversion 2>/dev/null | grep llgo >/dev/null 2>&1; then\n+  libgo_cv_c_goc_is_llgo=yes\n+fi])\n+AM_CONDITIONAL(GOC_IS_LLGO, test \"$libgo_cv_c_goc_is_llgo\" = yes)\n+\n dnl Test for the -lm library.\n MATH_LIBS=\n AC_CHECK_LIB([m], [sqrt], MATH_LIBS=-lm)"}]}