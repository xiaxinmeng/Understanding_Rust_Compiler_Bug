{"sha": "faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFhODMyYTc2ZDA4NmNkNmZkYmZjMmIzYTJiODU5ZjRmM2FhYjVlZg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-08-14T21:46:11Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-08-14T21:46:11Z"}, "message": "reload.h (register_move_cost, [...]): Adjust prototype.\n\n\t* reload.h (register_move_cost, memory_move_secondary_cost,\n\tsecondary_reload_class): Adjust prototype.\n\t* rtl.h (reg_class_subset_p): Adjust prototype.\n\t* reload.c (secondary_reload_class): Change arguments type from\n\tenum reg_class to reg_class_t. Change result type to reg_class_t.\n\t* reginfo.c (register_move_cost, reg_class_subset_p): Change\n\targuments type from enum reg_class to reg_class_t.\n\t(memory_move_secondary_cost): Change arguments type from\n\tenum reg_class to reg_class_t. Change type of saved_flags to\n\treg_class_t.\n\n\t* config/mips/mips.h (REGISTER_MOVE_COST, MEMORY_MOVE_COST): \n\tRemove macros.\n\t(mips_cost): Remove.\n\t(struct mips_rtx_cost_data): Moved to mips.c.\n\t* config/mips/mips-protos.h (mips_register_move_cost): Remove.\n\t* config/mips/mips.c (struct mips_rtx_cost_data): Moved from mips.h.\n\t(mips_cost): Make static.\n\t(mips_canonicalize_move_class): Change argument type to reg_class_t.\n\tChange result type to reg_class_t.\n\t(mips_move_to_gpr_cost, mips_move_from_gpr_cost): Change arguments\n\ttype from enum reg_class to reg_class_t.\n\t(mips_register_move_cost): Make static. Change arguments\n\ttype from enum reg_class to reg_class_t.\n\t(mips_memory_move_cost): New function.\n\t(TARGET_REGISTER_MOVE_COST, TARGET_MEMORY_MOVE_COST): Define.\n\nFrom-SVN: r163252", "tree": {"sha": "42001d8bb449f06f92f0ebc3b08ec3a3934bffc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42001d8bb449f06f92f0ebc3b08ec3a3934bffc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef/comments", "author": null, "committer": null, "parents": [{"sha": "0c21b3cacdbaabfa89f3fbb1bec0b6bad636dd36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c21b3cacdbaabfa89f3fbb1bec0b6bad636dd36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c21b3cacdbaabfa89f3fbb1bec0b6bad636dd36"}], "stats": {"total": 149, "additions": 82, "deletions": 67}, "files": [{"sha": "df2c197faedac78be2ab51ec69952f7de2a91cba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef", "patch": "@@ -1,3 +1,32 @@\n+2010-08-14  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* reload.h (register_move_cost, memory_move_secondary_cost,\n+\tsecondary_reload_class): Adjust prototype.\n+\t* rtl.h (reg_class_subset_p): Adjust prototype.\n+\t* reload.c (secondary_reload_class): Change arguments type from\n+\tenum reg_class to reg_class_t. Change result type to reg_class_t.\n+\t* reginfo.c (register_move_cost, reg_class_subset_p): Change\n+\targuments type from enum reg_class to reg_class_t.\n+\t(memory_move_secondary_cost): Change arguments type from\n+\tenum reg_class to reg_class_t. Change type of saved_flags to\n+\treg_class_t.\n+\n+\t* config/mips/mips.h (REGISTER_MOVE_COST, MEMORY_MOVE_COST): \n+\tRemove macros.\n+\t(mips_cost): Remove.\n+\t(struct mips_rtx_cost_data): Moved to mips.c.\n+\t* config/mips/mips-protos.h (mips_register_move_cost): Remove.\n+\t* config/mips/mips.c (struct mips_rtx_cost_data): Moved from mips.h.\n+\t(mips_cost): Make static.\n+\t(mips_canonicalize_move_class): Change argument type to reg_class_t.\n+\tChange result type to reg_class_t.\n+\t(mips_move_to_gpr_cost, mips_move_from_gpr_cost): Change arguments\n+\ttype from enum reg_class to reg_class_t.\n+\t(mips_register_move_cost): Make static. Change arguments\n+\ttype from enum reg_class to reg_class_t.\n+\t(mips_memory_move_cost): New function.\n+\t(TARGET_REGISTER_MOVE_COST, TARGET_MEMORY_MOVE_COST): Define.\n+\n 2010-08-14  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tPR rtl-optimization/43358"}, {"sha": "71b59fed9e55c754f08137c9ab7c0b71d2f5bb5f", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef", "patch": "@@ -295,8 +295,6 @@ extern enum reg_class mips_secondary_reload_class (enum reg_class,\n \t\t\t\t\t\t   enum machine_mode,\n \t\t\t\t\t\t   rtx, bool);\n extern int mips_class_max_nregs (enum reg_class, enum machine_mode);\n-extern int mips_register_move_cost (enum machine_mode, enum reg_class,\n-\t\t\t\t    enum reg_class);\n \n extern int mips_adjust_insn_length (rtx, int);\n extern void mips_output_load_label (rtx);"}, {"sha": "5fc78c1fc354c8680500275ed9af5c57f1c4a489", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 41, "deletions": 9, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef", "patch": "@@ -474,6 +474,23 @@ struct mips16e_save_restore_info {\n   HOST_WIDE_INT size;\n };\n \n+/* Costs of various operations on the different architectures.  */\n+\n+struct mips_rtx_cost_data\n+{\n+  unsigned short fp_add;\n+  unsigned short fp_mult_sf;\n+  unsigned short fp_mult_df;\n+  unsigned short fp_div_sf;\n+  unsigned short fp_div_df;\n+  unsigned short int_mult_si;\n+  unsigned short int_mult_di;\n+  unsigned short int_div_si;\n+  unsigned short int_div_di;\n+  unsigned short branch_cost;\n+  unsigned short memory_latency;\n+};\n+\n /* Global variables for machine-dependent things.  */\n \n /* The -G setting, or the configuration's default small-data limit if\n@@ -522,7 +539,7 @@ static const struct mips_cpu_info *mips_isa_option_info;\n int mips_abi = MIPS_ABI_DEFAULT;\n \n /* Which cost information to use.  */\n-const struct mips_rtx_cost_data *mips_cost;\n+static const struct mips_rtx_cost_data *mips_cost;\n \n /* The ambient target flags, excluding MASK_MIPS16.  */\n static int mips_base_target_flags;\n@@ -1167,6 +1184,8 @@ static const struct mips_rtx_cost_data\n };\n \f\n static rtx mips_find_pic_call_symbol (rtx, rtx);\n+static int mips_register_move_cost (enum machine_mode, reg_class_t,\n+\t\t\t\t    reg_class_t);\n \f\n /* This hash table keeps track of implicit \"mips16\" and \"nomips16\" attributes\n    for -mflip_mips16.  It maps decl names onto a boolean mode setting.  */\n@@ -10809,8 +10828,8 @@ mips_preferred_reload_class (rtx x, enum reg_class rclass)\n /* RCLASS is a class involved in a REGISTER_MOVE_COST calculation.\n    Return a \"canonical\" class to represent it in later calculations.  */\n \n-static enum reg_class\n-mips_canonicalize_move_class (enum reg_class rclass)\n+static reg_class_t\n+mips_canonicalize_move_class (reg_class_t rclass)\n {\n   /* All moves involving accumulator registers have the same cost.  */\n   if (reg_class_subset_p (rclass, ACC_REGS))\n@@ -10832,7 +10851,7 @@ mips_canonicalize_move_class (enum reg_class rclass)\n \n static int\n mips_move_to_gpr_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t       enum reg_class from)\n+\t\t       reg_class_t from)\n {\n   switch (from)\n     {\n@@ -10868,7 +10887,7 @@ mips_move_to_gpr_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n    other classes handled by this function.  */\n \n static int\n-mips_move_from_gpr_cost (enum machine_mode mode, enum reg_class to)\n+mips_move_from_gpr_cost (enum machine_mode mode, reg_class_t to)\n {\n   switch (to)\n     {\n@@ -10900,15 +10919,15 @@ mips_move_from_gpr_cost (enum machine_mode mode, enum reg_class to)\n     }\n }\n \n-/* Implement REGISTER_MOVE_COST.  Return 0 for classes that are the\n+/* Implement TARGET_REGISTER_MOVE_COST.  Return 0 for classes that are the\n    maximum of the move costs for subclasses; regclass will work out\n    the maximum for us.  */\n \n-int\n+static int\n mips_register_move_cost (enum machine_mode mode,\n-\t\t\t enum reg_class from, enum reg_class to)\n+\t\t\t reg_class_t from, reg_class_t to)\n {\n-  enum reg_class dregs;\n+  reg_class_t dregs;\n   int cost1, cost2;\n \n   from = mips_canonicalize_move_class (from);\n@@ -10944,6 +10963,15 @@ mips_register_move_cost (enum machine_mode mode,\n   return 0;\n }\n \n+/* Implement TARGET_MEMORY_MOVE_COST.  */\n+\n+static int\n+mips_memory_move_cost (enum machine_mode mode, reg_class_t rclass, bool in)\n+{\n+  return (mips_cost->memory_latency\n+\t  + memory_move_secondary_cost (mode, rclass, in));\n+} \n+\n /* Implement TARGET_IRA_COVER_CLASSES.  */\n \n static const reg_class_t *\n@@ -16376,6 +16404,10 @@ void mips_function_profiler (FILE *file)\n \n #undef TARGET_VALID_POINTER_MODE\n #define TARGET_VALID_POINTER_MODE mips_valid_pointer_mode\n+#undef TARGET_REGISTER_MOVE_COST\n+#define TARGET_REGISTER_MOVE_COST mips_register_move_cost\n+#undef TARGET_MEMORY_MOVE_COST\n+#define TARGET_MEMORY_MOVE_COST mips_memory_move_cost\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS mips_rtx_costs\n #undef TARGET_ADDRESS_COST"}, {"sha": "e30d03e32e9999396c3d60cef3bf81f643d5ef73", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef", "patch": "@@ -28,23 +28,6 @@ along with GCC; see the file COPYING3.  If not see\n \n /* MIPS external variables defined in mips.c.  */\n \n-/* Costs of various operations on the different architectures.  */\n-\n-struct mips_rtx_cost_data\n-{\n-  unsigned short fp_add;\n-  unsigned short fp_mult_sf;\n-  unsigned short fp_mult_df;\n-  unsigned short fp_div_sf;\n-  unsigned short fp_div_df;\n-  unsigned short int_mult_si;\n-  unsigned short int_mult_di;\n-  unsigned short int_div_si;\n-  unsigned short int_div_di;\n-  unsigned short branch_cost;\n-  unsigned short memory_latency;\n-};\n-\n /* Which ABI to use.  ABI_32 (original 32, or o32), ABI_N32 (n32),\n    ABI_64 (n64) are all defined by SGI.  ABI_O64 is o32 extended\n    to work on a 64-bit machine.  */\n@@ -2487,29 +2470,6 @@ typedef struct mips_args {\n #define FUNCTION_MODE SImode\n \n \f\n-/* A C expression for the cost of moving data from a register in\n-   class FROM to one in class TO.  The classes are expressed using\n-   the enumeration values such as `GENERAL_REGS'.  A value of 2 is\n-   the default; other values are interpreted relative to that.\n-\n-   It is not required that the cost always equal 2 when FROM is the\n-   same as TO; on some machines it is expensive to move between\n-   registers if they are not general registers.\n-\n-   If reload sees an insn consisting of a single `set' between two\n-   hard registers, and if `REGISTER_MOVE_COST' applied to their\n-   classes returns a value of 2, reload does not check to ensure\n-   that the constraints of the insn are met.  Setting a cost of\n-   other than 2 will allow reload to verify that the constraints are\n-   met.  You should do this if the `movM' pattern's constraints do\n-   not allow such copying.  */\n-\n-#define REGISTER_MOVE_COST(MODE, FROM, TO)\t\t\t\t\\\n-  mips_register_move_cost (MODE, FROM, TO)\n-\n-#define MEMORY_MOVE_COST(MODE,CLASS,TO_P) \\\n-  (mips_cost->memory_latency\t      \t\t\\\n-   + memory_move_secondary_cost ((MODE), (CLASS), (TO_P)))\n \n /* Define if copies to/from condition code registers should be avoided.\n \n@@ -3019,7 +2979,6 @@ extern int mips_isa;\t\t\t/* architectural level */\n extern int mips_abi;\t\t\t/* which ABI to use */\n extern const struct mips_cpu_info *mips_arch_info;\n extern const struct mips_cpu_info *mips_tune_info;\n-extern const struct mips_rtx_cost_data *mips_cost;\n extern bool mips_base_mips16;\n extern enum mips_code_readable_setting mips_code_readable;\n extern GTY(()) struct target_globals *mips16_globals;"}, {"sha": "55d2b5b6f9d4ed10b21a6fe6c2010d2ae02a80a2", "filename": "gcc/reginfo.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef", "patch": "@@ -628,8 +628,7 @@ init_fake_stack_mems (void)\n    TO, using MODE.  */\n \n int\n-register_move_cost (enum machine_mode mode, enum reg_class from,\n-                    enum reg_class to)\n+register_move_cost (enum machine_mode mode, reg_class_t from, reg_class_t to)\n {\n   return targetm.register_move_cost (mode, from, to);\n }\n@@ -644,10 +643,10 @@ memory_move_cost (enum machine_mode mode, enum reg_class rclass, bool in)\n /* Compute extra cost of moving registers to/from memory due to reloads.\n    Only needed if secondary reloads are required for memory moves.  */\n int\n-memory_move_secondary_cost (enum machine_mode mode, enum reg_class rclass,\n+memory_move_secondary_cost (enum machine_mode mode, reg_class_t rclass,\n \t\t\t    bool in)\n {\n-  enum reg_class altclass;\n+  reg_class_t altclass;\n   int partial_cost = 0;\n   /* We need a memory reference to feed to SECONDARY... macros.  */\n   /* mem may be unused even if the SECONDARY_ macros are defined.  */\n@@ -1174,7 +1173,7 @@ reg_scan_mark_refs (rtx x, rtx insn)\n /* Return nonzero if C1 is a subset of C2, i.e., if every register in C1\n    is also in C2.  */\n int\n-reg_class_subset_p (enum reg_class c1, enum reg_class c2)\n+reg_class_subset_p (reg_class_t c1, reg_class_t c2)\n {\n   return (c1 == c2\n \t  || c2 == ALL_REGS"}, {"sha": "75fb000647b8d3d308217be80f1f24bc8863ab0b", "filename": "gcc/reload.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef", "patch": "@@ -518,9 +518,9 @@ push_secondary_reload (int in_p, rtx x, int opnum, int optional,\n /* If a secondary reload is needed, return its class.  If both an intermediate\n    register and a scratch register is needed, we return the class of the\n    intermediate register.  */\n-enum reg_class\n-secondary_reload_class (bool in_p, enum reg_class rclass,\n-\t\t\tenum machine_mode mode, rtx x)\n+reg_class_t\n+secondary_reload_class (bool in_p, reg_class_t rclass, enum machine_mode mode,\n+\t\t\trtx x)\n {\n   enum insn_code icode;\n   secondary_reload_info sri;"}, {"sha": "340f81d514ec23bff26433bca570560d51725b20", "filename": "gcc/reload.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef", "patch": "@@ -30,11 +30,9 @@ along with GCC; see the file COPYING3.  If not see\n   SECONDARY_RELOAD_CLASS (CLASS, MODE, X)\n #endif\n \n-extern int register_move_cost (enum machine_mode, enum reg_class,\n-\t\t\t       enum reg_class);\n+extern int register_move_cost (enum machine_mode, reg_class_t, reg_class_t);\n extern int memory_move_cost (enum machine_mode, enum reg_class, bool);\n-extern int memory_move_secondary_cost (enum machine_mode, enum reg_class,\n-\t\t\t\t       bool);\n+extern int memory_move_secondary_cost (enum machine_mode, reg_class_t, bool);\n \n /* Maximum number of reloads we can need.  */\n #define MAX_RELOADS (2 * MAX_RECOG_OPERANDS * (MAX_REGS_PER_ADDRESS + 1))\n@@ -292,8 +290,8 @@ extern void compute_use_by_pseudos (HARD_REG_SET *, bitmap);\n \n /* Functions from reload.c:  */\n \n-extern enum reg_class secondary_reload_class (bool, enum reg_class,\n-\t\t\t\t\t      enum machine_mode, rtx);\n+extern reg_class_t secondary_reload_class (bool, reg_class_t,\n+\t\t\t\t\t   enum machine_mode, rtx);\n \n #ifdef GCC_INSN_CODES_H\n extern enum reg_class scratch_reload_class (enum insn_code);"}, {"sha": "873c79255bfd60e7a70f241efa60cfa762658268", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=faa832a76d086cd6fdbfc2b3a2b859f4f3aab5ef", "patch": "@@ -2371,7 +2371,7 @@ extern void mark_elimination (int, int);\n \n /* In reginfo.c */\n extern int reg_classes_intersect_p (reg_class_t, reg_class_t);\n-extern int reg_class_subset_p (enum reg_class, enum reg_class);\n+extern int reg_class_subset_p (reg_class_t, reg_class_t);\n extern void globalize_reg (int);\n extern void init_reg_modes_target (void);\n extern void init_regs (void);"}]}