{"sha": "0d87fa8ca8f0ccf7184e7606d60693530d0c4a13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ4N2ZhOGNhOGYwY2NmNzE4NGU3NjA2ZDYwNjkzNTMwZDBjNGExMw==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-01-07T12:08:21Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2011-01-07T12:08:21Z"}, "message": "re PR fortran/47189 ([OOP] calling STORAGE_SIZE on a NULL-initialized class pointer)\n\n2011-01-07  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/47189\n\tPR fortran/47194\n\t* gfortran.h (gfc_lval_expr_from_sym): Moved prototype.\n\t* class.c (gfc_class_null_initializer): Initialize _vptr to declared\n\ttype.\n\t* expr.c (gfc_lval_expr_from_sym): Moved here from symbol.c.\n\t* resolve.c (resolve_deallocate_expr): _data component will be added\n\tat translation stage.\n\t* symbol.c (gfc_lval_expr_from_sym): Moved to expr.c.\n\t* trans-stmt.c (gfc_trans_deallocate): Reset _vptr to declared type.\n\n\n2011-01-07  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/47189\n\tPR fortran/47194\n\t* gfortran.dg/storage_size_3.f08: Extended.\n\nFrom-SVN: r168565", "tree": {"sha": "023ebc065d893b6ac71d6d6906442cf961c2e194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/023ebc065d893b6ac71d6d6906442cf961c2e194"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a14e516339b8d3b5a3a35ec1c6e33e74019bb576", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a14e516339b8d3b5a3a35ec1c6e33e74019bb576", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a14e516339b8d3b5a3a35ec1c6e33e74019bb576"}], "stats": {"total": 134, "additions": 88, "deletions": 46}, "files": [{"sha": "aadd14326d91a9988125d64818a8b0030ec7947d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0d87fa8ca8f0ccf7184e7606d60693530d0c4a13", "patch": "@@ -1,3 +1,16 @@\n+2011-01-07  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/47189\n+\tPR fortran/47194\n+\t* gfortran.h (gfc_lval_expr_from_sym): Moved prototype.\n+\t* class.c (gfc_class_null_initializer): Initialize _vptr to declared\n+\ttype.\n+\t* expr.c (gfc_lval_expr_from_sym): Moved here from symbol.c.\n+\t* resolve.c (resolve_deallocate_expr): _data component will be added\n+\tat translation stage.\n+\t* symbol.c (gfc_lval_expr_from_sym): Moved to expr.c.\n+\t* trans-stmt.c (gfc_trans_deallocate): Reset _vptr to declared type.\n+\n 2011-01-06  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/33117"}, {"sha": "d07df87b088b212f78f3d5920b7fe938d9cb02b7", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=0d87fa8ca8f0ccf7184e7606d60693530d0c4a13", "patch": "@@ -83,7 +83,8 @@ gfc_add_component_ref (gfc_expr *e, const char *name)\n \n \n /* Build a NULL initializer for CLASS pointers,\n-   initializing the _data and _vptr components to zero.  */\n+   initializing the _data component to NULL and\n+   the _vptr component to the declared type.  */\n \n gfc_expr *\n gfc_class_null_initializer (gfc_typespec *ts)\n@@ -98,9 +99,10 @@ gfc_class_null_initializer (gfc_typespec *ts)\n   for (comp = ts->u.derived->components; comp; comp = comp->next)\n     {\n       gfc_constructor *ctor = gfc_constructor_get();\n-      ctor->expr = gfc_get_expr ();\n-      ctor->expr->expr_type = EXPR_NULL;\n-      ctor->expr->ts = comp->ts;\n+      if (strcmp (comp->name, \"_vptr\") == 0)\n+\tctor->expr = gfc_lval_expr_from_sym (gfc_find_derived_vtab (ts->u.derived));\n+      else\n+\tctor->expr = gfc_get_null_expr (NULL);\n       gfc_constructor_append (&init->value.constructor, ctor);\n     }\n "}, {"sha": "e331b5b2cf7ccdd9c79911e1ddf93de0528500e4", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=0d87fa8ca8f0ccf7184e7606d60693530d0c4a13", "patch": "@@ -3707,6 +3707,32 @@ gfc_get_variable_expr (gfc_symtree *var)\n }\n \n \n+gfc_expr *\n+gfc_lval_expr_from_sym (gfc_symbol *sym)\n+{\n+  gfc_expr *lval;\n+  lval = gfc_get_expr ();\n+  lval->expr_type = EXPR_VARIABLE;\n+  lval->where = sym->declared_at;\n+  lval->ts = sym->ts;\n+  lval->symtree = gfc_find_symtree (sym->ns->sym_root, sym->name);\n+\n+  /* It will always be a full array.  */\n+  lval->rank = sym->as ? sym->as->rank : 0;\n+  if (lval->rank)\n+    {\n+      lval->ref = gfc_get_ref ();\n+      lval->ref->type = REF_ARRAY;\n+      lval->ref->u.ar.type = AR_FULL;\n+      lval->ref->u.ar.dimen = lval->rank;\n+      lval->ref->u.ar.where = sym->declared_at;\n+      lval->ref->u.ar.as = sym->as;\n+    }\n+\n+  return lval;\n+}\n+\n+\n /* Returns the array_spec of a full array expression.  A NULL is\n    returned otherwise.  */\n gfc_array_spec *"}, {"sha": "d4443ecc68fe2459b6a0143c8bc3bcbf8c17898e", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=0d87fa8ca8f0ccf7184e7606d60693530d0c4a13", "patch": "@@ -2536,8 +2536,6 @@ void gfc_free_st_label (gfc_st_label *);\n void gfc_define_st_label (gfc_st_label *, gfc_sl_type, locus *);\n gfc_try gfc_reference_st_label (gfc_st_label *, gfc_sl_type);\n \n-gfc_expr * gfc_lval_expr_from_sym (gfc_symbol *);\n-\n gfc_namespace *gfc_get_namespace (gfc_namespace *, int);\n gfc_symtree *gfc_new_symtree (gfc_symtree **, const char *);\n gfc_symtree *gfc_find_symtree (gfc_symtree *, const char *);\n@@ -2701,6 +2699,7 @@ gfc_try gfc_check_assign_symbol (gfc_symbol *, gfc_expr *);\n bool gfc_has_default_initializer (gfc_symbol *);\n gfc_expr *gfc_default_initializer (gfc_typespec *);\n gfc_expr *gfc_get_variable_expr (gfc_symtree *);\n+gfc_expr * gfc_lval_expr_from_sym (gfc_symbol *);\n \n gfc_array_spec *gfc_get_full_arrayspec_from_expr (gfc_expr *expr);\n "}, {"sha": "1d8a7b6a2e7b4c085156010243cae7f4630468e3", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=0d87fa8ca8f0ccf7184e7606d60693530d0c4a13", "patch": "@@ -6417,12 +6417,6 @@ resolve_deallocate_expr (gfc_expr *e)\n   if (gfc_check_vardef_context (e, false, _(\"DEALLOCATE object\")) == FAILURE)\n     return FAILURE;\n \n-  if (e->ts.type == BT_CLASS)\n-    {\n-      /* Only deallocate the DATA component.  */\n-      gfc_add_data_component (e);\n-    }\n-\n   return SUCCESS;\n }\n "}, {"sha": "998eac9b3dfdadfe18be29a638286f62ecb4ef73", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=0d87fa8ca8f0ccf7184e7606d60693530d0c4a13", "patch": "@@ -2245,35 +2245,6 @@ gfc_reference_st_label (gfc_st_label *lp, gfc_sl_type type)\n }\n \n \n-/*******A helper function for creating new expressions*************/\n-\n-\n-gfc_expr *\n-gfc_lval_expr_from_sym (gfc_symbol *sym)\n-{\n-  gfc_expr *lval;\n-  lval = gfc_get_expr ();\n-  lval->expr_type = EXPR_VARIABLE;\n-  lval->where = sym->declared_at;\n-  lval->ts = sym->ts;\n-  lval->symtree = gfc_find_symtree (sym->ns->sym_root, sym->name);\n-\n-  /* It will always be a full array.  */\n-  lval->rank = sym->as ? sym->as->rank : 0;\n-  if (lval->rank)\n-    {\n-      lval->ref = gfc_get_ref ();\n-      lval->ref->type = REF_ARRAY;\n-      lval->ref->u.ar.type = AR_FULL;\n-      lval->ref->u.ar.dimen = lval->rank;\n-      lval->ref->u.ar.where = sym->declared_at;\n-      lval->ref->u.ar.as = sym->as;\n-    }\n-\n-  return lval;\n-}\n-\n-\n /************** Symbol table management subroutines ****************/\n \n /* Basic details: Fortran 95 requires a potentially unlimited number"}, {"sha": "5f6b1d07e747b6639941024ff598c3c750bf767c", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=0d87fa8ca8f0ccf7184e7606d60693530d0c4a13", "patch": "@@ -4738,7 +4738,6 @@ gfc_trans_deallocate (gfc_code *code)\n {\n   gfc_se se;\n   gfc_alloc *al;\n-  gfc_expr *expr;\n   tree apstat, astat, pstat, stat, tmp;\n   stmtblock_t block;\n \n@@ -4766,9 +4765,12 @@ gfc_trans_deallocate (gfc_code *code)\n \n   for (al = code->ext.alloc.list; al != NULL; al = al->next)\n     {\n-      expr = al->expr;\n+      gfc_expr *expr = gfc_copy_expr (al->expr);\n       gcc_assert (expr->expr_type == EXPR_VARIABLE);\n \n+      if (expr->ts.type == BT_CLASS)\n+\tgfc_add_data_component (expr);\n+\n       gfc_init_se (&se, NULL);\n       gfc_start_block (&se.pre);\n \n@@ -4797,20 +4799,34 @@ gfc_trans_deallocate (gfc_code *code)\n \t\t}\n \t    }\n \t  tmp = gfc_array_deallocate (se.expr, pstat, expr);\n+\t  gfc_add_expr_to_block (&se.pre, tmp);\n \t}\n       else\n \t{\n \t  tmp = gfc_deallocate_scalar_with_status (se.expr, pstat, false,\n \t\t\t\t\t\t   expr, expr->ts);\n \t  gfc_add_expr_to_block (&se.pre, tmp);\n \n+\t  /* Set to zero after deallocation.  */\n \t  tmp = fold_build2_loc (input_location, MODIFY_EXPR, void_type_node,\n \t\t\t\t se.expr,\n \t\t\t\t build_int_cst (TREE_TYPE (se.expr), 0));\n+\t  gfc_add_expr_to_block (&se.pre, tmp);\n+\t  \n+\t  if (al->expr->ts.type == BT_CLASS)\n+\t    {\n+\t      /* Reset _vptr component to declared type.  */\n+\t      gfc_expr *rhs, *lhs = gfc_copy_expr (al->expr);\n+\t      gfc_symbol *vtab = gfc_find_derived_vtab (al->expr->ts.u.derived);\n+\t      gfc_add_vptr_component (lhs);\n+\t      rhs = gfc_lval_expr_from_sym (vtab);\n+\t      tmp = gfc_trans_pointer_assignment (lhs, rhs);\n+\t      gfc_add_expr_to_block (&se.pre, tmp);\n+\t      gfc_free_expr (lhs);\n+\t      gfc_free_expr (rhs);\n+\t    }\n \t}\n \n-      gfc_add_expr_to_block (&se.pre, tmp);\n-\n       /* Keep track of the number of failed deallocations by adding stat\n \t of the last deallocation to the running total.  */\n       if (code->expr1 || code->expr2)\n@@ -4822,7 +4838,7 @@ gfc_trans_deallocate (gfc_code *code)\n \n       tmp = gfc_finish_block (&se.pre);\n       gfc_add_expr_to_block (&block, tmp);\n-\n+      gfc_free_expr (expr);\n     }\n \n   /* Set STAT.  */"}, {"sha": "49e7001d00bea9fe85504f8c1429467d0d8e6e02", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d87fa8ca8f0ccf7184e7606d60693530d0c4a13", "patch": "@@ -1,3 +1,9 @@\n+2011-01-07  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/47189\n+\tPR fortran/47194\n+\t* gfortran.dg/storage_size_3.f08: Extended.\n+\n 2011-01-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/47022"}, {"sha": "57b50af56106b9dbf5da99059810065c60e185ea", "filename": "gcc/testsuite/gfortran.dg/storage_size_3.f08", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13/gcc%2Ftestsuite%2Fgfortran.dg%2Fstorage_size_3.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d87fa8ca8f0ccf7184e7606d60693530d0c4a13/gcc%2Ftestsuite%2Fgfortran.dg%2Fstorage_size_3.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fstorage_size_3.f08?ref=0d87fa8ca8f0ccf7184e7606d60693530d0c4a13", "patch": "@@ -1,12 +1,27 @@\n ! { dg-do run }\n !\n ! PR 47024: [OOP] STORAGE_SIZE (for polymorphic types): Segfault at run time\n+! PR 47189: [OOP] calling STORAGE_SIZE on a NULL-initialized class pointer\n+! PR 47194: [OOP] EXTENDS_TYPE_OF still returns the wrong result if the polymorphic variable is unallocated\n !\n ! Contributed by Tobias Burnus <burnus@gcc.gnu.org>\n \n type t\n   integer(kind=4) :: a\n end type\n+\n+class(t), pointer :: x => null()\n class(t), allocatable :: y\n+\n+if (storage_size(x)/=32) call abort()\n+if (storage_size(y)/=32) call abort()\n+\n+allocate(y)\n+\n if (storage_size(y)/=32) call abort()\n+\n+deallocate(y)\n+\n+if (storage_size(y)/=32) call abort()\n+\n end "}]}