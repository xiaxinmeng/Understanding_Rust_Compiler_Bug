{"sha": "649fc72d2638dfc1edac57bb5dc9525bdf4911e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ5ZmM3MmQyNjM4ZGZjMWVkYWM1N2JiNWRjOTUyNWJkZjQ5MTFlNQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-03-27T12:19:13Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-03-27T12:19:13Z"}, "message": "re PR c++/10158 (ICE with templates and friends)\n\ncp:\n\tPR c++/10158\n\t* parser.c (cp_parser_function_definition): Set\n\tDECL_INITIALIZED_IN_CLASS for members.\n\t* pt.c (instantiate_decl): Only reduce the template args for\n\tfriends that are not defined in class.\ntestsuite:\n\tPR c++/10158\n\t* g++.dg/template/friend18.C: New test.\n\nFrom-SVN: r64920", "tree": {"sha": "3913c3851b9b6eea4f5dc5186d9881c464352bc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3913c3851b9b6eea4f5dc5186d9881c464352bc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/649fc72d2638dfc1edac57bb5dc9525bdf4911e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649fc72d2638dfc1edac57bb5dc9525bdf4911e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/649fc72d2638dfc1edac57bb5dc9525bdf4911e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/649fc72d2638dfc1edac57bb5dc9525bdf4911e5/comments", "author": null, "committer": null, "parents": [{"sha": "0bcaad20fceb2d9d394242467fa853919141f1c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bcaad20fceb2d9d394242467fa853919141f1c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bcaad20fceb2d9d394242467fa853919141f1c9"}], "stats": {"total": 65, "additions": 52, "deletions": 13}, "files": [{"sha": "8d835ece2c90b05d104dbe3d2465f57010be6f3a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649fc72d2638dfc1edac57bb5dc9525bdf4911e5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649fc72d2638dfc1edac57bb5dc9525bdf4911e5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=649fc72d2638dfc1edac57bb5dc9525bdf4911e5", "patch": "@@ -1,3 +1,11 @@\n+2003-03-27  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/10158\n+\t* parser.c (cp_parser_function_definition): Set\n+\tDECL_INITIALIZED_IN_CLASS for members.\n+\t* pt.c (instantiate_decl): Only reduce the template args for\n+\tfriends that are not defined in class.\n+\n 2003-03-25  Jason Merrill  <jason@redhat.com>\n \n \t* call.c (print_z_candidate): Change name of first arg to msgid.\n@@ -6,23 +14,23 @@\n 2003-03-24  Nathan Sidwell  <nathan@codesourcery.com>\n \t\n \tPR c++/9898, PR c++/383, DR 322\n-\t* pt.c (maybe_adjust_types_for_deduction) [DEDUCE_CONV]: Look\n+\t* pt.c (maybe_adjust_types_for_deduction) <DEDUCE_CONV>: Look\n \tthrough reference types on both PARM and ARG.\n \n 2003-03-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/10119\n-\t* error.c (dump_expr) [BASELINK]: Use dump_expr.\n+\t* error.c (dump_expr) <BASELINK>: Use dump_expr.\n \t* pt.c (maybe_fold_nontype_args): New function.\n-\t(tsubst_copy) [SCOPE_REF]: Subst any template_id args.\n-\t[TEMPLATE_ID_EXPR]: Break out folding code, call it.\n-\t(tsubst_copy_and_build) [TEMPLATE_ID_EXPR]: Call\n+\t(tsubst_copy) <SCOPE_REF>: Subst any template_id args.\n+\t<TEMPLATE_ID_EXPR>: Break out folding code, call it.\n+\t(tsubst_copy_and_build) <TEMPLATE_ID_EXPR>: Call\n \tmaybe_fold_nontype_args.\n \n 2003-03-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/10026\n-\t* decl2.c (arg_assoc_type) [ERROR_MARK]: Don't die.\n+\t* decl2.c (arg_assoc_type) <ERROR_MARK>: Don't die.\n \n 2003-03-23  Mark Mitchell  <mark@codesourcery.com>\n "}, {"sha": "82fc020e6308f8e80b0b79de77b836dc19748138", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649fc72d2638dfc1edac57bb5dc9525bdf4911e5/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649fc72d2638dfc1edac57bb5dc9525bdf4911e5/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=649fc72d2638dfc1edac57bb5dc9525bdf4911e5", "patch": "@@ -1987,7 +1987,8 @@ struct lang_decl GTY(())\n    (TREE_LANG_FLAG_1 (VAR_DECL_CHECK (NODE)))\n \n /* Nonzero if the DECL was initialized in the class definition itself,\n-   rather than outside the class.  */\n+   rather than outside the class.  This is used for both static member\n+   VAR_DECLS, and FUNTION_DECLS that are defined in the class. */\n #define DECL_INITIALIZED_IN_CLASS_P(DECL) \\\n  (DECL_LANG_SPECIFIC (DECL)->decl_flags.initialized_in_class)\n "}, {"sha": "8cc46f98325b128860fe066f661417f887450bbc", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649fc72d2638dfc1edac57bb5dc9525bdf4911e5/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649fc72d2638dfc1edac57bb5dc9525bdf4911e5/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=649fc72d2638dfc1edac57bb5dc9525bdf4911e5", "patch": "@@ -11046,6 +11046,10 @@ cp_parser_function_definition (cp_parser* parser, bool* friend_p)\n       DECL_PENDING_INLINE_INFO (fn) = cache;\n       DECL_PENDING_INLINE_P (fn) = 1;\n \n+      /* We need to know that this was defined in the class, so that\n+\t friend templates are handled correctly.  */\n+      DECL_INITIALIZED_IN_CLASS_P (fn) = 1;\n+\n       /* We're done with the inline definition.  */\n       finish_method (fn);\n "}, {"sha": "c04c602d8675fe90b5c08ea96fc45394b981b0bd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649fc72d2638dfc1edac57bb5dc9525bdf4911e5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649fc72d2638dfc1edac57bb5dc9525bdf4911e5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=649fc72d2638dfc1edac57bb5dc9525bdf4911e5", "patch": "@@ -10804,12 +10804,14 @@ instantiate_decl (d, defer_ok)\n   td = template_for_substitution (d);\n   code_pattern = DECL_TEMPLATE_RESULT (td);\n \n-  /* In the case of a friend template whose definition is provided\n-     outside the class, we may have too many arguments.  Drop the ones\n-     we don't need.  */\n-  args = get_innermost_template_args (gen_args,\n-\t\t\t\t      TMPL_PARMS_DEPTH \n-\t\t\t\t      (DECL_TEMPLATE_PARMS (td)));\n+  if (DECL_NAMESPACE_SCOPE_P (d) && !DECL_INITIALIZED_IN_CLASS_P (d))\n+    /* In the case of a friend template whose definition is provided\n+       outside the class, we may have too many arguments.  Drop the\n+       ones we don't need.  */\n+    args = get_innermost_template_args\n+      (gen_args, TMPL_PARMS_DEPTH  (DECL_TEMPLATE_PARMS (td)));\n+  else\n+    args = gen_args;\n \n   if (TREE_CODE (d) == FUNCTION_DECL)\n     pattern_defined = (DECL_SAVED_TREE (code_pattern) != NULL_TREE);"}, {"sha": "cb6431052c17a0119ff18a66efec381c36c6a45d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649fc72d2638dfc1edac57bb5dc9525bdf4911e5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649fc72d2638dfc1edac57bb5dc9525bdf4911e5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=649fc72d2638dfc1edac57bb5dc9525bdf4911e5", "patch": "@@ -1,3 +1,8 @@\n+2003-03-27  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/10158\n+\t* g++.dg/template/friend18.C: New test.\n+\n 2003-03-26  Roger Sayle  <roger@eyesopen.com>\n \n \t* g77.f-torture/compile/20030326-1.f: New test case."}, {"sha": "04ba26e9830c569235565efeb719831bba30291a", "filename": "gcc/testsuite/g++.dg/template/friend18.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/649fc72d2638dfc1edac57bb5dc9525bdf4911e5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/649fc72d2638dfc1edac57bb5dc9525bdf4911e5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ffriend18.C?ref=649fc72d2638dfc1edac57bb5dc9525bdf4911e5", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do run }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 26 Mar 2003 <nathan@codesourcery.com>\n+\n+// PR 10158. implicit inline template friends ICE'd\n+\n+template <int N> struct X\n+{\n+  template <int M> friend int foo(X const &)\n+  {\n+    return N * 10000 + M;\n+  }\n+};\n+X<1234> bring;\n+\n+int main() {\n+  return foo<5678> (bring) != 12345678;\n+}"}]}