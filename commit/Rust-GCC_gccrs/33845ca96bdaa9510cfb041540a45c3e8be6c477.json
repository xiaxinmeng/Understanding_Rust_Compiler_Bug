{"sha": "33845ca96bdaa9510cfb041540a45c3e8be6c477", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM4NDVjYTk2YmRhYTk1MTBjZmIwNDE1NDBhNDVjM2U4YmU2YzQ3Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T15:28:18Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T15:28:18Z"}, "message": "Drop df_ from df_read_modify_subreg_p\n\n...it's really a general RTL predicate, rather than something that depends\non the DF state.  Thanks to Segher for the suggestion.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* df.h (df_read_modify_subreg_p): Remove in favor of...\n\t* rtl.h (read_modify_subreg_p): ...this new function.  Take a\n\tconst_rtx instead of an rtx.\n\t* cprop.c (local_cprop_find_used_regs): Update accordingly.\n\t* df-problems.c (df_word_lr_mark_ref): Likewise.\n\t* ira-lives.c (mark_pseudo_reg_live): Likewise.\n\t(mark_pseudo_reg_dead): Likewise.\n\t(mark_ref_dead): Likewise.\n\t* reginfo.c (init_subregs_of_mode): Likewise.\n\t* sched-deps.c (sched_analyze_1): Likewise.\n\t* df-scan.c (df_def_record_1): Likewise.\n\t(df_uses_record): Likewise.\n\t(df_read_modify_subreg_p): Remove in favor of...\n\t* rtlanal.c (read_modify_subreg_p): ...this new function.  Take a\n\tconst_rtx instead of an rtx.\n\nFrom-SVN: r251537", "tree": {"sha": "bc69488d125557e352f5d02d91a2fdac5505faa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc69488d125557e352f5d02d91a2fdac5505faa3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33845ca96bdaa9510cfb041540a45c3e8be6c477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33845ca96bdaa9510cfb041540a45c3e8be6c477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33845ca96bdaa9510cfb041540a45c3e8be6c477", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33845ca96bdaa9510cfb041540a45c3e8be6c477/comments", "author": null, "committer": null, "parents": [{"sha": "bd4288c02b487cc8a9afcfa9c21bfe594a78e26d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd4288c02b487cc8a9afcfa9c21bfe594a78e26d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd4288c02b487cc8a9afcfa9c21bfe594a78e26d"}], "stats": {"total": 75, "additions": 46, "deletions": 29}, "files": [{"sha": "da37ce8a9657c9949493899d43547827b7cd0143", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33845ca96bdaa9510cfb041540a45c3e8be6c477/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33845ca96bdaa9510cfb041540a45c3e8be6c477/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=33845ca96bdaa9510cfb041540a45c3e8be6c477", "patch": "@@ -1,3 +1,21 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* df.h (df_read_modify_subreg_p): Remove in favor of...\n+\t* rtl.h (read_modify_subreg_p): ...this new function.  Take a\n+\tconst_rtx instead of an rtx.\n+\t* cprop.c (local_cprop_find_used_regs): Update accordingly.\n+\t* df-problems.c (df_word_lr_mark_ref): Likewise.\n+\t* ira-lives.c (mark_pseudo_reg_live): Likewise.\n+\t(mark_pseudo_reg_dead): Likewise.\n+\t(mark_ref_dead): Likewise.\n+\t* reginfo.c (init_subregs_of_mode): Likewise.\n+\t* sched-deps.c (sched_analyze_1): Likewise.\n+\t* df-scan.c (df_def_record_1): Likewise.\n+\t(df_uses_record): Likewise.\n+\t(df_read_modify_subreg_p): Remove in favor of...\n+\t* rtlanal.c (read_modify_subreg_p): ...this new function.  Take a\n+\tconst_rtx instead of an rtx.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "f7a327770cd19632f5239f5d300eba67832e8bec", "filename": "gcc/cprop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33845ca96bdaa9510cfb041540a45c3e8be6c477/gcc%2Fcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33845ca96bdaa9510cfb041540a45c3e8be6c477/gcc%2Fcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcprop.c?ref=33845ca96bdaa9510cfb041540a45c3e8be6c477", "patch": "@@ -1161,7 +1161,7 @@ local_cprop_find_used_regs (rtx *xptr, void *data)\n       return;\n \n     case SUBREG:\n-      if (df_read_modify_subreg_p (x))\n+      if (read_modify_subreg_p (x))\n \treturn;\n       break;\n "}, {"sha": "4aafb43edc61e8e64310d777a67824272016845c", "filename": "gcc/df-problems.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33845ca96bdaa9510cfb041540a45c3e8be6c477/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33845ca96bdaa9510cfb041540a45c3e8be6c477/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=33845ca96bdaa9510cfb041540a45c3e8be6c477", "patch": "@@ -2819,7 +2819,7 @@ df_word_lr_mark_ref (df_ref ref, bool is_set, regset live)\n     return true;\n \n   if (GET_CODE (orig_reg) == SUBREG\n-      && df_read_modify_subreg_p (orig_reg))\n+      && read_modify_subreg_p (orig_reg))\n     {\n       gcc_assert (DF_REF_FLAGS_IS_SET (ref, DF_REF_PARTIAL));\n       if (subreg_lowpart_p (orig_reg))"}, {"sha": "8ab3d716ea2975ed687e1e3cf61ab3233e378f63", "filename": "gcc/df-scan.c", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33845ca96bdaa9510cfb041540a45c3e8be6c477/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33845ca96bdaa9510cfb041540a45c3e8be6c477/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=33845ca96bdaa9510cfb041540a45c3e8be6c477", "patch": "@@ -2623,24 +2623,6 @@ df_ref_record (enum df_ref_class cl,\n }\n \n \n-/* A set to a non-paradoxical SUBREG for which the number of word_mode units\n-   covered by the outer mode is smaller than that covered by the inner mode,\n-   is a read-modify-write operation.\n-   This function returns true iff the SUBREG X is such a SUBREG.  */\n-\n-bool\n-df_read_modify_subreg_p (rtx x)\n-{\n-  unsigned int isize, osize;\n-  if (GET_CODE (x) != SUBREG)\n-    return false;\n-  isize = GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)));\n-  osize = GET_MODE_SIZE (GET_MODE (x));\n-  return isize > osize\n-\t && isize > REGMODE_NATURAL_SIZE (GET_MODE (SUBREG_REG (x)));\n-}\n-\n-\n /* Process all the registers defined in the rtx pointed by LOC.\n    Autoincrement/decrement definitions will be picked up by df_uses_record.\n    Any change here has to be matched in df_find_hard_reg_defs_1.  */\n@@ -2696,7 +2678,7 @@ df_def_record_1 (struct df_collection_rec *collection_rec,\n     }\n   else if (GET_CODE (dst) == SUBREG && REG_P (SUBREG_REG (dst)))\n     {\n-      if (df_read_modify_subreg_p (dst))\n+      if (read_modify_subreg_p (dst))\n \tflags |= DF_REF_READ_WRITE | DF_REF_PARTIAL;\n \n       flags |= DF_REF_SUBREG;\n@@ -2910,7 +2892,7 @@ df_uses_record (struct df_collection_rec *collection_rec,\n \tswitch (GET_CODE (dst))\n \t  {\n \t    case SUBREG:\n-\t      if (df_read_modify_subreg_p (dst))\n+\t      if (read_modify_subreg_p (dst))\n \t\t{\n \t\t  df_uses_record (collection_rec, &SUBREG_REG (dst),\n \t\t\t\t  DF_REF_REG_USE, bb, insn_info,"}, {"sha": "290fd3c7b9d3ee7884b4c2d66bb5609a477e8673", "filename": "gcc/df.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33845ca96bdaa9510cfb041540a45c3e8be6c477/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33845ca96bdaa9510cfb041540a45c3e8be6c477/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=33845ca96bdaa9510cfb041540a45c3e8be6c477", "patch": "@@ -1080,7 +1080,6 @@ extern unsigned int df_hard_reg_used_count (unsigned int);\n extern bool df_regs_ever_live_p (unsigned int);\n extern void df_set_regs_ever_live (unsigned int, bool);\n extern void df_compute_regs_ever_live (bool);\n-extern bool df_read_modify_subreg_p (rtx);\n extern void df_scan_verify (void);\n \n \f"}, {"sha": "0dff248ed4810c18876efbd5c8a90ee2d86b2981", "filename": "gcc/ira-lives.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33845ca96bdaa9510cfb041540a45c3e8be6c477/gcc%2Fira-lives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33845ca96bdaa9510cfb041540a45c3e8be6c477/gcc%2Fira-lives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-lives.c?ref=33845ca96bdaa9510cfb041540a45c3e8be6c477", "patch": "@@ -364,7 +364,7 @@ mark_hard_reg_live (rtx reg)\n static void\n mark_pseudo_reg_live (rtx orig_reg, unsigned regno)\n {\n-  if (df_read_modify_subreg_p (orig_reg))\n+  if (read_modify_subreg_p (orig_reg))\n     {\n       mark_pseudo_regno_subword_live (regno,\n \t\t\t\t      subreg_lowpart_p (orig_reg) ? 0 : 1);\n@@ -489,7 +489,7 @@ mark_hard_reg_dead (rtx reg)\n static void\n mark_pseudo_reg_dead (rtx orig_reg, unsigned regno)\n {\n-  if (df_read_modify_subreg_p (orig_reg))\n+  if (read_modify_subreg_p (orig_reg))\n     {\n       mark_pseudo_regno_subword_dead (regno,\n \t\t\t\t      subreg_lowpart_p (orig_reg) ? 0 : 1);\n@@ -515,7 +515,7 @@ mark_ref_dead (df_ref def)\n   if (DF_REF_FLAGS_IS_SET (def, DF_REF_PARTIAL)\n       && (GET_CODE (orig_reg) != SUBREG\n \t  || REGNO (reg) < FIRST_PSEUDO_REGISTER\n-\t  || !df_read_modify_subreg_p (orig_reg)))\n+\t  || !read_modify_subreg_p (orig_reg)))\n     return;\n \n   if (REGNO (reg) >= FIRST_PSEUDO_REGISTER)"}, {"sha": "9f07176d9b7a51e1cd4ea2d251d4c1f7033a4a06", "filename": "gcc/reginfo.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33845ca96bdaa9510cfb041540a45c3e8be6c477/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33845ca96bdaa9510cfb041540a45c3e8be6c477/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=33845ca96bdaa9510cfb041540a45c3e8be6c477", "patch": "@@ -1348,7 +1348,7 @@ init_subregs_of_mode (void)\n \t  df_ref def;\n \t  FOR_EACH_INSN_DEF (def, insn)\n \t    if (DF_REF_FLAGS_IS_SET (def, DF_REF_PARTIAL)\n-\t\t&& df_read_modify_subreg_p (DF_REF_REG (def)))\n+\t\t&& read_modify_subreg_p (DF_REF_REG (def)))\n \t      record_subregs_of_mode (DF_REF_REG (def), true);\n \t}\n }"}, {"sha": "2f6e32b48037806509ef22ae46c1e535fd7917cd", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33845ca96bdaa9510cfb041540a45c3e8be6c477/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33845ca96bdaa9510cfb041540a45c3e8be6c477/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=33845ca96bdaa9510cfb041540a45c3e8be6c477", "patch": "@@ -2194,6 +2194,7 @@ extern unsigned int subreg_lsb_1 (machine_mode, machine_mode,\n \t\t\t\t  unsigned int);\n extern unsigned int subreg_size_offset_from_lsb (unsigned int, unsigned int,\n \t\t\t\t\t\t unsigned int);\n+extern bool read_modify_subreg_p (const_rtx);\n \n /* Return the subreg byte offset for a subreg whose outer mode is\n    OUTER_MODE, whose inner mode is INNER_MODE, and where there are\n@@ -2836,7 +2837,7 @@ partial_subreg_p (machine_mode outermode, machine_mode innermode)\n }\n \n /* Likewise return true if X is a subreg that is smaller than the inner\n-   register.  Use df_read_modify_subreg_p to test whether writing to such\n+   register.  Use read_modify_subreg_p to test whether writing to such\n    a subreg preserves any part of the inner register.  */\n \n inline bool"}, {"sha": "3ae06e42797fb9a9e7f4cacfdd2439f65dde5466", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33845ca96bdaa9510cfb041540a45c3e8be6c477/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33845ca96bdaa9510cfb041540a45c3e8be6c477/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=33845ca96bdaa9510cfb041540a45c3e8be6c477", "patch": "@@ -1358,6 +1358,23 @@ modified_in_p (const_rtx x, const_rtx insn)\n \n   return 0;\n }\n+\n+/* Return true if X is a SUBREG and if storing a value to X would\n+   preserve some of its SUBREG_REG.  For example, on a normal 32-bit\n+   target, using a SUBREG to store to one half of a DImode REG would\n+   preserve the other half.  */\n+\n+bool\n+read_modify_subreg_p (const_rtx x)\n+{\n+  unsigned int isize, osize;\n+  if (GET_CODE (x) != SUBREG)\n+    return false;\n+  isize = GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)));\n+  osize = GET_MODE_SIZE (GET_MODE (x));\n+  return isize > osize\n+\t && isize > REGMODE_NATURAL_SIZE (GET_MODE (SUBREG_REG (x)));\n+}\n \f\n /* Helper function for set_of.  */\n struct set_of_data"}, {"sha": "844bf02803ee3304a30ce63dbc26a6d21826f884", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33845ca96bdaa9510cfb041540a45c3e8be6c477/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33845ca96bdaa9510cfb041540a45c3e8be6c477/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=33845ca96bdaa9510cfb041540a45c3e8be6c477", "patch": "@@ -2419,7 +2419,7 @@ sched_analyze_1 (struct deps_desc *deps, rtx x, rtx_insn *insn)\n     {\n       if (GET_CODE (dest) == STRICT_LOW_PART\n \t || GET_CODE (dest) == ZERO_EXTRACT\n-\t || df_read_modify_subreg_p (dest))\n+\t || read_modify_subreg_p (dest))\n         {\n \t  /* These both read and modify the result.  We must handle\n              them as writes to get proper dependencies for following"}]}