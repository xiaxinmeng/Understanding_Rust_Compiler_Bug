{"sha": "74a2a1b4f60cb499962d67c43e7d0b3b783b1373", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRhMmExYjRmNjBjYjQ5OTk2MmQ2N2M0M2U3ZDBiM2I3ODNiMTM3Mw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-06-07T16:11:36Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-06-07T16:11:36Z"}, "message": "move.h (struct __move_if_noexcept_cond): Add.\n\n2011-06-07  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/move.h (struct __move_if_noexcept_cond): Add.\n\t(move_if_noexcept): Use the latter.\n\t* include/bits/stl_iterator.h (__make_move_if_noexcept_iterator,\n\t_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR): Add.\n\t* include/bits/stl_uninitialized.h\n\t(__uninitialized_move_if_noexcept_a): Add.\n\t* include/bits/vector.tcc (vector<>::reserve): Use\n\t_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR.\n\t(vector<>::_M_insert_aux, _M_fill_insert, _M_default_append,\n\t_M_range_insert): Use __uninitialized_move_if_noexcept_a.\n\t* testsuite/23_containers/vector/modifiers/moveable2.cc: New.\n\t* testsuite/23_containers/vector/capacity/resize/moveable2.cc:\n\tLikewise.\n\t* testsuite/23_containers/vector/capacity/reserve/moveable2.cc:\n\tLikewise.\n\nFrom-SVN: r174756", "tree": {"sha": "44f8b32ca92b13801daecdae7376732bd875fb7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44f8b32ca92b13801daecdae7376732bd875fb7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74a2a1b4f60cb499962d67c43e7d0b3b783b1373", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74a2a1b4f60cb499962d67c43e7d0b3b783b1373", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74a2a1b4f60cb499962d67c43e7d0b3b783b1373", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74a2a1b4f60cb499962d67c43e7d0b3b783b1373/comments", "author": null, "committer": null, "parents": [{"sha": "06bc3ec79056f8c53d4e59f45afe78a547c23546", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06bc3ec79056f8c53d4e59f45afe78a547c23546", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06bc3ec79056f8c53d4e59f45afe78a547c23546"}], "stats": {"total": 321, "additions": 276, "deletions": 45}, "files": [{"sha": "2f3707badc6014a3e2e91b78ebc561343a95a178", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a2a1b4f60cb499962d67c43e7d0b3b783b1373/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a2a1b4f60cb499962d67c43e7d0b3b783b1373/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=74a2a1b4f60cb499962d67c43e7d0b3b783b1373", "patch": "@@ -1,3 +1,21 @@\n+2011-06-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/move.h (struct __move_if_noexcept_cond): Add.\n+\t(move_if_noexcept): Use the latter.\n+\t* include/bits/stl_iterator.h (__make_move_if_noexcept_iterator,\n+\t_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR): Add.\n+\t* include/bits/stl_uninitialized.h\n+\t(__uninitialized_move_if_noexcept_a): Add.\n+\t* include/bits/vector.tcc (vector<>::reserve): Use\n+\t_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR.\n+\t(vector<>::_M_insert_aux, _M_fill_insert, _M_default_append,\n+\t_M_range_insert): Use __uninitialized_move_if_noexcept_a.\n+\t* testsuite/23_containers/vector/modifiers/moveable2.cc: New.\n+\t* testsuite/23_containers/vector/capacity/resize/moveable2.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/capacity/reserve/moveable2.cc:\n+\tLikewise.\n+\n 2011-06-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/49293"}, {"sha": "d791d69ae4d27e3e6623e078bce7e83318a23e4c", "filename": "libstdc++-v3/include/bits/move.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a2a1b4f60cb499962d67c43e7d0b3b783b1373/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a2a1b4f60cb499962d67c43e7d0b3b783b1373/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmove.h?ref=74a2a1b4f60cb499962d67c43e7d0b3b783b1373", "patch": "@@ -82,6 +82,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     move(_Tp&& __t) noexcept\n     { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }\n \n+\n+  template<typename _Tp>\n+    struct __move_if_noexcept_cond\n+    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,\n+                    is_copy_constructible<_Tp>>::type { };\n+\n   /**\n    *  @brief Move unless it could throw and the type is copyable.\n    *  @ingroup utilities\n@@ -90,9 +96,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _Tp>\n     inline typename\n-    conditional<__and_<__not_<is_nothrow_move_constructible<_Tp>>,\n-                       is_copy_constructible<_Tp>>::value,\n-                const _Tp&, _Tp&&>::type\n+    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type\n     move_if_noexcept(_Tp& __x) noexcept\n     { return std::move(__x); }\n "}, {"sha": "c2a16893b86786949fbbc360f599b1f9d54a0e23", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a2a1b4f60cb499962d67c43e7d0b3b783b1373/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a2a1b4f60cb499962d67c43e7d0b3b783b1373/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=74a2a1b4f60cb499962d67c43e7d0b3b783b1373", "patch": "@@ -1118,14 +1118,25 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     make_move_iterator(const _Iterator& __i)\n     { return move_iterator<_Iterator>(__i); }\n \n+  template<typename _Iterator, typename _ReturnType\n+    = typename conditional<__move_if_noexcept_cond\n+      <typename iterator_traits<_Iterator>::value_type>::value,\n+                _Iterator, move_iterator<_Iterator>>::type>\n+    inline _ReturnType\n+    __make_move_if_noexcept_iterator(_Iterator __i)\n+    { return _ReturnType(__i); }\n+\n   // @} group iterators\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n \n #define _GLIBCXX_MAKE_MOVE_ITERATOR(_Iter) std::make_move_iterator(_Iter)\n+#define _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter) \\\n+  std::__make_move_if_noexcept_iterator(_Iter)\n #else\n #define _GLIBCXX_MAKE_MOVE_ITERATOR(_Iter) (_Iter)\n+#define _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter) (_Iter)\n #endif // __GXX_EXPERIMENTAL_CXX0X__\n \n #endif"}, {"sha": "246d5c36d80284498baf754c3719b3572f332e64", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a2a1b4f60cb499962d67c43e7d0b3b783b1373/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a2a1b4f60cb499962d67c43e7d0b3b783b1373/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=74a2a1b4f60cb499962d67c43e7d0b3b783b1373", "patch": "@@ -269,6 +269,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t __result, __alloc);\n     }\n \n+  template<typename _InputIterator, typename _ForwardIterator,\n+\t   typename _Allocator>\n+    inline _ForwardIterator\n+    __uninitialized_move_if_noexcept_a(_InputIterator __first,\n+\t\t\t\t       _InputIterator __last,\n+\t\t\t\t       _ForwardIterator __result,\n+\t\t\t\t       _Allocator& __alloc)\n+    {\n+      return std::__uninitialized_copy_a\n+\t(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),\n+\t _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);\n+    }\n+\n   template<typename _ForwardIterator, typename _Tp, typename _Allocator>\n     void\n     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,"}, {"sha": "5b6a8d791aefa2f794d5ce1865a9d0008e300961", "filename": "libstdc++-v3/include/bits/vector.tcc", "status": "modified", "additions": 36, "deletions": 40, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a2a1b4f60cb499962d67c43e7d0b3b783b1373/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a2a1b4f60cb499962d67c43e7d0b3b783b1373/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvector.tcc?ref=74a2a1b4f60cb499962d67c43e7d0b3b783b1373", "patch": "@@ -72,8 +72,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t{\n \t  const size_type __old_size = size();\n \t  pointer __tmp = _M_allocate_and_copy(__n,\n-\t\t _GLIBCXX_MAKE_MOVE_ITERATOR(this->_M_impl._M_start),\n-\t\t _GLIBCXX_MAKE_MOVE_ITERATOR(this->_M_impl._M_finish));\n+\t    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),\n+\t    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));\n \t  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,\n \t\t\t_M_get_Tp_allocator());\n \t  _M_deallocate(this->_M_impl._M_start,\n@@ -337,17 +337,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n #endif\n \t      __new_finish = 0;\n \n-\t      __new_finish =\n-\t\tstd::__uninitialized_move_a(this->_M_impl._M_start,\n-\t\t\t\t\t    __position.base(), __new_start,\n-\t\t\t\t\t    _M_get_Tp_allocator());\n+\t      __new_finish\n+\t\t= std::__uninitialized_move_if_noexcept_a\n+\t\t(this->_M_impl._M_start, __position.base(),\n+\t\t __new_start, _M_get_Tp_allocator());\n+\n \t      ++__new_finish;\n \n-\t      __new_finish =\n-\t\tstd::__uninitialized_move_a(__position.base(),\n-\t\t\t\t\t    this->_M_impl._M_finish,\n-\t\t\t\t\t    __new_finish,\n-\t\t\t\t\t    _M_get_Tp_allocator());\n+\t      __new_finish\n+\t\t= std::__uninitialized_move_if_noexcept_a\n+\t\t(__position.base(), this->_M_impl._M_finish,\n+\t\t __new_finish, _M_get_Tp_allocator());\n \t    }\n           __catch(...)\n \t    {\n@@ -423,18 +423,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\t\t\t\t\t_M_get_Tp_allocator());\n \t\t  __new_finish = 0;\n \n-\t\t  __new_finish =\n-\t\t    std::__uninitialized_move_a(this->_M_impl._M_start,\n-\t\t\t\t\t\t__position.base(),\n-\t\t\t\t\t\t__new_start,\n-\t\t\t\t\t\t_M_get_Tp_allocator());\n+\t\t  __new_finish\n+\t\t    = std::__uninitialized_move_if_noexcept_a\n+\t\t    (this->_M_impl._M_start, __position.base(),\n+\t\t     __new_start, _M_get_Tp_allocator());\n+\n \t\t  __new_finish += __n;\n \n-\t\t  __new_finish =\n-\t\t    std::__uninitialized_move_a(__position.base(),\n-\t\t\t\t\t\tthis->_M_impl._M_finish,\n-\t\t\t\t\t\t__new_finish,\n-\t\t\t\t\t\t_M_get_Tp_allocator());\n+\t\t  __new_finish\n+\t\t    = std::__uninitialized_move_if_noexcept_a\n+\t\t    (__position.base(), this->_M_impl._M_finish,\n+\t\t     __new_finish, _M_get_Tp_allocator());\n \t\t}\n \t      __catch(...)\n \t\t{\n@@ -484,11 +483,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t      pointer __new_finish(__new_start);\n \t      __try\n \t\t{\n-\t\t  __new_finish =\n-\t\t    std::__uninitialized_move_a(this->_M_impl._M_start,\n-\t\t\t\t\t\tthis->_M_impl._M_finish,\n-\t\t\t\t\t\t__new_start,\n-\t\t\t\t\t\t_M_get_Tp_allocator());\n+\t\t  __new_finish\n+\t\t    = std::__uninitialized_move_if_noexcept_a\n+\t\t    (this->_M_impl._M_start, this->_M_impl._M_finish,\n+\t\t     __new_start, _M_get_Tp_allocator());\n \t\t  std::__uninitialized_default_n_a(__new_finish, __n,\n \t\t\t\t\t\t   _M_get_Tp_allocator());\n \t\t  __new_finish += __n;\n@@ -577,20 +575,18 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t\tpointer __new_finish(__new_start);\n \t\t__try\n \t\t  {\n-\t\t    __new_finish =\n-\t\t      std::__uninitialized_move_a(this->_M_impl._M_start,\n-\t\t\t\t\t\t  __position.base(),\n-\t\t\t\t\t\t  __new_start,\n-\t\t\t\t\t\t  _M_get_Tp_allocator());\n-\t\t    __new_finish =\n-\t\t      std::__uninitialized_copy_a(__first, __last,\n-\t\t\t\t\t\t  __new_finish,\n-\t\t\t\t\t\t  _M_get_Tp_allocator());\n-\t\t    __new_finish =\n-\t\t      std::__uninitialized_move_a(__position.base(),\n-\t\t\t\t\t\t  this->_M_impl._M_finish,\n-\t\t\t\t\t\t  __new_finish,\n-\t\t\t\t\t\t  _M_get_Tp_allocator());\n+\t\t    __new_finish\n+\t\t      = std::__uninitialized_move_if_noexcept_a\n+\t\t      (this->_M_impl._M_start, __position.base(),\n+\t\t       __new_start, _M_get_Tp_allocator());\n+\t\t    __new_finish\n+\t\t      = std::__uninitialized_copy_a(__first, __last,\n+\t\t\t\t\t\t    __new_finish,\n+\t\t\t\t\t\t    _M_get_Tp_allocator());\n+\t\t    __new_finish\n+\t\t      = std::__uninitialized_move_if_noexcept_a\n+\t\t      (__position.base(), this->_M_impl._M_finish,\n+\t\t       __new_finish, _M_get_Tp_allocator());\n \t\t  }\n \t\t__catch(...)\n \t\t  {"}, {"sha": "3a6c3138135ef70c642091cb9055be0ea2995e31", "filename": "libstdc++-v3/testsuite/23_containers/vector/capacity/reserve/moveable2.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a2a1b4f60cb499962d67c43e7d0b3b783b1373/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Freserve%2Fmoveable2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a2a1b4f60cb499962d67c43e7d0b3b783b1373/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Freserve%2Fmoveable2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Freserve%2Fmoveable2.cc?ref=74a2a1b4f60cb499962d67c43e7d0b3b783b1373", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-06-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+#include <testsuite_rvalref.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace __gnu_test;\n+\n+  std::vector<throwing_move_constructor> v(5);\n+\n+  v.reserve(50);\n+  VERIFY( v.capacity() >= 50 );\n+\n+  v.reserve(500);\n+  VERIFY( v.capacity() >= 500 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5bdb9815a2b097c799e0b7fde03b529dde5a390f", "filename": "libstdc++-v3/testsuite/23_containers/vector/capacity/resize/moveable2.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a2a1b4f60cb499962d67c43e7d0b3b783b1373/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Fresize%2Fmoveable2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a2a1b4f60cb499962d67c43e7d0b3b783b1373/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Fresize%2Fmoveable2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcapacity%2Fresize%2Fmoveable2.cc?ref=74a2a1b4f60cb499962d67c43e7d0b3b783b1373", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-06-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+#include <testsuite_rvalref.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace __gnu_test;\n+\n+  std::vector<throwing_move_constructor> v(5);\n+\n+  v.resize(50);\n+  VERIFY( v.size() == 50 );\n+\n+  v.reserve(200);\n+  VERIFY( v.capacity() >= 200 );\n+\n+  v.resize(100);\n+  VERIFY( v.size() == 100 );\n+\n+  v.resize(500, throwing_move_constructor());\n+  VERIFY( v.size() == 500 );\n+\n+  v.reserve(2000);\n+  VERIFY( v.capacity() >= 2000 );\n+\n+  v.resize(1000, throwing_move_constructor());\n+  VERIFY( v.size() == 1000 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "000db2c856199056a640120eebd2028ec0b22c8c", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/moveable2.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a2a1b4f60cb499962d67c43e7d0b3b783b1373/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fmoveable2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a2a1b4f60cb499962d67c43e7d0b3b783b1373/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fmoveable2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fmoveable2.cc?ref=74a2a1b4f60cb499962d67c43e7d0b3b783b1373", "patch": "@@ -0,0 +1,77 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// 2011-06-07  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+#include <testsuite_rvalref.h>\n+\n+void\n+test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace __gnu_test;\n+\n+  std::vector<throwing_move_constructor> v1;\n+\n+  throwing_move_constructor tmc;\n+\n+  v1.push_back(tmc);\n+  VERIFY( v1.size() == 1 );\n+\n+  v1.push_back(tmc);\n+  VERIFY( v1.size() == 2 );\n+\n+  v1.insert(v1.end(), tmc);\n+  VERIFY( v1.size() == 3 );\n+\n+  v1.insert(v1.end(), 100, tmc);\n+  VERIFY( v1.size() == 103 );\n+\n+  v1.insert(v1.end(), 10, tmc);\n+  VERIFY( v1.size() == 113 );\n+\n+  v1.insert(v1.end(), 1, tmc);\n+  VERIFY( v1.size() == 114 );\n+\n+  std::vector<throwing_move_constructor> v2;\n+\n+  throwing_move_constructor tmca[]\n+    = { throwing_move_constructor(), throwing_move_constructor(),\n+\tthrowing_move_constructor(), throwing_move_constructor() };\n+\n+  v2.insert(v2.end(), tmca, tmca + 1);\n+  VERIFY( v2.size() == 1 );\n+\n+  v2.insert(v2.end(), tmca, tmca + 4);\n+  VERIFY( v2.size() == 5 );\n+\n+  v2.insert(v2.end(), tmca, tmca + 2);\n+  VERIFY( v2.size() == 7 );\n+\n+  v2.insert(v2.end(), tmca, tmca + 1);\n+  VERIFY( v2.size() == 8 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "31599157bd459d37c9fc4333a837fbfa04d2a6f7", "filename": "libstdc++-v3/testsuite/util/testsuite_rvalref.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74a2a1b4f60cb499962d67c43e7d0b3b783b1373/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_rvalref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74a2a1b4f60cb499962d67c43e7d0b3b783b1373/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_rvalref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_rvalref.h?ref=74a2a1b4f60cb499962d67c43e7d0b3b783b1373", "patch": "@@ -117,7 +117,7 @@ namespace __gnu_test\n       ++copycount;\n     }\n \n-    copycounter(copycounter&& in)\n+    copycounter(copycounter&& in) noexcept\n     {\n       bool test __attribute__((unused)) = true;\n       VERIFY( in.valid == true );\n@@ -156,7 +156,7 @@ namespace __gnu_test\n       return *this;\n     }\n     \n-    ~copycounter()\n+    ~copycounter() noexcept\n     { valid = false; }\n   };\n \n@@ -246,6 +246,16 @@ namespace __gnu_test\n     return lh.val < rh.val;\n   }\n \n+  struct throwing_move_constructor\n+  {\n+    throwing_move_constructor() = default;\n+\n+    throwing_move_constructor(throwing_move_constructor&&)\n+    { throw 1; }\n+\n+    throwing_move_constructor(const throwing_move_constructor&) = default;\n+  };\n+\n } // namespace __gnu_test\n \n namespace std"}]}