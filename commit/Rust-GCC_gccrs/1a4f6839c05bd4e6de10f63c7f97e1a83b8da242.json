{"sha": "1a4f6839c05bd4e6de10f63c7f97e1a83b8da242", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE0ZjY4MzljMDViZDRlNmRlMTBmNjNjN2Y5N2UxYTgzYjhkYTI0Mg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-03-11T13:35:45Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-03-11T13:35:45Z"}, "message": "natFileChannelEcos.cc: Totally reworked.\n\n2004-03-11  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/nio/channels/natFileChannelEcos.cc: Totally reworked.\n\tThis file was was just copied form java/io/natFileDescriptorEcos.cc\n\tand never changed to compile correctly.\n\nFrom-SVN: r79320", "tree": {"sha": "d07cab78dac32c9a967297770fe6a3975df4c008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d07cab78dac32c9a967297770fe6a3975df4c008"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a4f6839c05bd4e6de10f63c7f97e1a83b8da242", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a4f6839c05bd4e6de10f63c7f97e1a83b8da242", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a4f6839c05bd4e6de10f63c7f97e1a83b8da242", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a4f6839c05bd4e6de10f63c7f97e1a83b8da242/comments", "author": null, "committer": null, "parents": [{"sha": "df8e2ad0e5a0ca14828a128d56fcb2e487145cf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df8e2ad0e5a0ca14828a128d56fcb2e487145cf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df8e2ad0e5a0ca14828a128d56fcb2e487145cf4"}], "stats": {"total": 115, "additions": 69, "deletions": 46}, "files": [{"sha": "29353760a28955145f46cf56d69ce0e7d44c76ad", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4f6839c05bd4e6de10f63c7f97e1a83b8da242/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4f6839c05bd4e6de10f63c7f97e1a83b8da242/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=1a4f6839c05bd4e6de10f63c7f97e1a83b8da242", "patch": "@@ -1,3 +1,9 @@\n+2004-03-11  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/channels/natFileChannelEcos.cc: Totally reworked.\n+\tThis file was was just copied form java/io/natFileDescriptorEcos.cc\n+\tand never changed to compile correctly.\n+\n 2004-03-11  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/nio/PipeImpl.java"}, {"sha": "568d802dfd103bcc43f6c93e17c8e16dd024e3c0", "filename": "libjava/gnu/java/nio/channels/natFileChannelEcos.cc", "status": "modified", "additions": 63, "deletions": 46, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a4f6839c05bd4e6de10f63c7f97e1a83b8da242/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FnatFileChannelEcos.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a4f6839c05bd4e6de10f63c7f97e1a83b8da242/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FnatFileChannelEcos.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2Fchannels%2FnatFileChannelEcos.cc?ref=1a4f6839c05bd4e6de10f63c7f97e1a83b8da242", "patch": "@@ -26,37 +26,39 @@ details.  */\n #include <java/lang/NullPointerException.h>\n #include <java/lang/String.h>\n #include <java/io/FileNotFoundException.h>\n-\n-extern \"C\" void diag_write_char (char c);\n-\n-static void \n-diag_write (char *data, int len)\n-{\n-  while (len > 0)\n-    {\n-      diag_write_char (*data++);\n-      len--;\n-    }\n-}\n+#include <java/nio/MappedByteBufferImpl.h>\n+#include <java/nio/channels/FileChannel.h>\n+#include <java/nio/channels/FileLock.h>\n+#include <gnu/java/nio/channels/FileChannelImpl.h>\n+\n+using gnu::gcj::RawData;\n+using java::io::IOException;\n+using java::nio::MappedByteBufferImpl;\n+using java::io::InterruptedIOException;\n+using java::io::FileNotFoundException;\n+using java::lang::ArrayIndexOutOfBoundsException;\n+using java::lang::NullPointerException;\n+using gnu::java::nio::channels::FileChannelImpl;\n \n #define NO_FSYNC_MESSAGE \"sync unsupported\"\n \n void\n-java::io::FileDescriptor::init(void)\n+FileChannelImpl::init(void)\n {\n-  in = new java::io::FileDescriptor(0);\n-  out = new java::io::FileDescriptor(1);\n-  err = new java::io::FileDescriptor(2);\n+  in = new FileChannelImpl((jint) 0, FileChannelImpl::READ);\n+  out = new FileChannelImpl((jint) 1, FileChannelImpl::WRITE);\n+  err = new FileChannelImpl((jint) 2, FileChannelImpl::WRITE);\n }\n \n+#if 0\n jboolean\n-java::io::FileDescriptor::valid (void)\n+FileChannelImpl::valid (void)\n {\n   return true;\n }\n \n void\n-java::io::FileDescriptor::sync (void)\n+FileChannelImpl::sync (void)\n {\n   // Some files don't support fsync.  We don't bother reporting these\n   // as errors.\n@@ -65,95 +67,110 @@ java::io::FileDescriptor::sync (void)\n   throw new SyncFailedException (JvNewStringLatin1 (NO_FSYNC_MESSAGE));\n #endif\n }\n+#endif\n \n jint\n-java::io::FileDescriptor::open (jstring path, jint jflags)\n+FileChannelImpl::open (jstring, jint)\n {\n   return fd;\n }\n \n void\n-java::io::FileDescriptor::write (jint b)\n+FileChannelImpl::write (jint)\n {\n-  char d = (char) b;\n-  ::diag_write (&d, 1);\n }\n \n void\n-java::io::FileDescriptor::write (jbyteArray b, jint offset, jint len)\n+FileChannelImpl::write (jbyteArray b, jint offset, jint len)\n {\n   if (! b)\n-    throw new java::lang::NullPointerException;\n+    throw new NullPointerException;\n   if (offset < 0 || len < 0 || offset + len > JvGetArrayLength (b))\n-    throw new java::lang::ArrayIndexOutOfBoundsException;\n-  char *bytes = (char *)elements (b) + offset;\n-  ::diag_write (bytes, len);\n+    throw new ArrayIndexOutOfBoundsException;\n }\n \n void\n-java::io::FileDescriptor::close (void)\n+FileChannelImpl::implCloseChannel (void)\n {\n }\n \n void\n-java::io::FileDescriptor::setLength (long)\n+FileChannelImpl::implTruncate (jlong)\n {\n }\n \n-jint\n-java::io::FileDescriptor::seek (jlong pos, jint whence, jboolean)\n+void\n+FileChannelImpl::seek (jlong)\n {\n-  JvAssert (whence == SET || whence == CUR);\n-  return 0;\n }\n \n jlong\n-java::io::FileDescriptor::getLength (void)\n+FileChannelImpl::size (void)\n {\n   return 0;\n }\n \n jlong\n-java::io::FileDescriptor::getFilePointer (void)\n+FileChannelImpl::implPosition (void)\n {\n   return 0;\n }\n \n jint\n-java::io::FileDescriptor::read (void)\n+FileChannelImpl::read (void)\n {\n   return 0;\n }\n \n jint\n-java::io::FileDescriptor::read (jbyteArray buffer, jint offset, jint count)\n+FileChannelImpl::read (jbyteArray buffer, jint offset, jint count)\n {\n   return 0;\n }\n \n jint\n-java::io::FileDescriptor::available (void)\n+FileChannelImpl::available (void)\n {\n   return 0;\n }\n \n+jboolean\n+FileChannelImpl::lock (jlong, jlong, jboolean, jboolean)\n+{\n+  throw new IOException (JvNewStringLatin1\n+    (\"gnu.java.nio.FileChannelImpl.lock() not implemented\"));\n+}\n+\n void\n-java::io::FileDescriptor::lock (jlong pos, jint len, jboolean shared)\n+FileChannelImpl::unlock (jlong, jlong)\n {\n   throw new IOException (JvNewStringLatin1\n-    (\"java.io.FileDescriptor.lock() not implemented\"));\n+    (\"gnu.java.nio.channels.FileChannelImpl.unlock() not implemented\"));\n+}\n+\n+java::nio::MappedByteBuffer *\n+FileChannelImpl::mapImpl (jchar, jlong, jint)\n+{\n+  return NULL;\n+}\n+\n+void\n+MappedByteBufferImpl::unmapImpl ()\n+{\n+}\n+\n+void\n+MappedByteBufferImpl::loadImpl ()\n+{\n }\n \n jboolean\n-java::io::FileDescriptor::tryLock (jlong pos, jint len, jboolean shared)\n+MappedByteBufferImpl::isLoadedImpl ()\n {\n-  throw new IOException (JvNewStringLatin1\n-    (\"java.io.FileDescriptor.tryLock() not implemented\"));\n+  return true;\n }\n \n void\n-java::io::FileDescriptor::unlock (jlong pos, jint len)\n+MappedByteBufferImpl::forceImpl ()\n {\n-  throw new IOException (JvNewStringLatin1\n-    (\"java.io.FileDescriptor.unlock() not implemented\"));\n }"}]}