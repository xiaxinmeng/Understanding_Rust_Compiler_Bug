{"sha": "34f02c07fb1a9d966fb7af5a8c28c213e84d89c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRmMDJjMDdmYjFhOWQ5NjZmYjdhZjVhOGMyOGMyMTNlODRkODljNQ==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2019-04-12T12:51:58Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2019-04-12T12:51:58Z"}, "message": "re PR target/87532 (bad results from vec_extract(unsigned char, foo) dependent upon function inline)\n\ngcc/ChangeLog:\n\n2019-04-12  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\tPR target/87532\n\t* config/rs6000/rs6000.c (rs6000_split_vec_extract_var): Use inner\n\tmode of vector rather than mode of destination for move instruction.\n\t* config/rs6000/vsx.md (*vsx_extract_<mode>_<VS_scalar>mode_var):\n\tUse QI inner mode with V16QI vector mode.\n\ngcc/testsuite/ChangeLog:\n\n2019-04-12  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\tPR target/87532\n\t* gcc.target/powerpc/fold-vec-extract-char.p8.c: Adjust expected\n\tinstruction counts.\n\t* gcc.target/powerpc/fold-vec-extract-int.p8.c: Likewise.\n\t* gcc.target/powerpc/fold-vec-extract-short.p8.c: Likewise.\n\nFrom-SVN: r270313", "tree": {"sha": "76090c0d534433bf16832feef3c752ccbc4f7adf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76090c0d534433bf16832feef3c752ccbc4f7adf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34f02c07fb1a9d966fb7af5a8c28c213e84d89c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f02c07fb1a9d966fb7af5a8c28c213e84d89c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34f02c07fb1a9d966fb7af5a8c28c213e84d89c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34f02c07fb1a9d966fb7af5a8c28c213e84d89c5/comments", "author": null, "committer": null, "parents": [{"sha": "a847875139b261e04e829db6e5f0bbe5420be183", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a847875139b261e04e829db6e5f0bbe5420be183", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a847875139b261e04e829db6e5f0bbe5420be183"}], "stats": {"total": 56, "additions": 36, "deletions": 20}, "files": [{"sha": "2790eab6690bc9ba34fd0b6d7f6f034b05406318", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f02c07fb1a9d966fb7af5a8c28c213e84d89c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f02c07fb1a9d966fb7af5a8c28c213e84d89c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34f02c07fb1a9d966fb7af5a8c28c213e84d89c5", "patch": "@@ -1,3 +1,11 @@\n+2019-04-12  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\tPR target/87532\n+\t* config/rs6000/rs6000.c (rs6000_split_vec_extract_var): Use inner\n+\tmode of vector rather than mode of destination for move instruction.\n+\t* config/rs6000/vsx.md (*vsx_extract_<mode>_<VS_scalar>mode_var):\n+\tUse QI inner mode with V16QI vector mode.\n+\n 2019-04-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/52726"}, {"sha": "9105253d763ab6d87de96b138a1da9662241476f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f02c07fb1a9d966fb7af5a8c28c213e84d89c5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f02c07fb1a9d966fb7af5a8c28c213e84d89c5/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=34f02c07fb1a9d966fb7af5a8c28c213e84d89c5", "patch": "@@ -7167,7 +7167,7 @@ rs6000_split_vec_extract_var (rtx dest, rtx src, rtx element, rtx tmp_gpr,\n \t\t\t      rtx tmp_altivec)\n {\n   machine_mode mode = GET_MODE (src);\n-  machine_mode scalar_mode = GET_MODE (dest);\n+  machine_mode scalar_mode = GET_MODE_INNER (GET_MODE (src));\n   unsigned scalar_size = GET_MODE_SIZE (scalar_mode);\n   int byte_shift = exact_log2 (scalar_size);\n "}, {"sha": "607c0cd33f214bbaa05565c7401b219627f0d29c", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f02c07fb1a9d966fb7af5a8c28c213e84d89c5/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f02c07fb1a9d966fb7af5a8c28c213e84d89c5/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=34f02c07fb1a9d966fb7af5a8c28c213e84d89c5", "patch": "@@ -3739,9 +3739,9 @@\n   DONE;\n })\n \n-(define_insn_and_split \"*vsx_extract_<VSX_EXTRACT_I:mode>_<SDI:mode>_var\"\n-  [(set (match_operand:SDI 0 \"gpc_reg_operand\" \"=r,r,r\")\n-\t(zero_extend:SDI\n+(define_insn_and_split \"*vsx_extract_<mode>_<VS_scalar>mode_var\"\n+  [(set (match_operand:<VS_scalar> 0 \"gpc_reg_operand\" \"=r,r,r\")\n+\t(zero_extend:<VS_scalar>\n \t (unspec:<VSX_EXTRACT_I:VS_scalar>\n \t  [(match_operand:VSX_EXTRACT_I 1 \"input_operand\" \"wK,v,m\")\n \t   (match_operand:DI 2 \"gpc_reg_operand\" \"r,r,r\")]\n@@ -3753,7 +3753,7 @@\n   \"&& reload_completed\"\n   [(const_int 0)]\n {\n-  machine_mode smode = <VSX_EXTRACT_I:MODE>mode;\n+  machine_mode smode = <VS_scalar>mode;\n   rs6000_split_vec_extract_var (gen_rtx_REG (smode, REGNO (operands[0])),\n \t\t\t\toperands[1], operands[2],\n \t\t\t\toperands[3], operands[4]);"}, {"sha": "1c212b4604140462c09d5fe9f05b2d909f1c7053", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f02c07fb1a9d966fb7af5a8c28c213e84d89c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f02c07fb1a9d966fb7af5a8c28c213e84d89c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=34f02c07fb1a9d966fb7af5a8c28c213e84d89c5", "patch": "@@ -1,3 +1,11 @@\n+2019-04-12  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\tPR target/87532\n+\t* gcc.target/powerpc/fold-vec-extract-char.p8.c: Adjust expected\n+\tinstruction counts.\n+\t* gcc.target/powerpc/fold-vec-extract-int.p8.c: Likewise.\n+\t* gcc.target/powerpc/fold-vec-extract-short.p8.c: Likewise.\n+\n 2019-04-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/89946"}, {"sha": "f3fea467a5b71e78b27944c6f140ebb3dd62db96", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-char.p8.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f02c07fb1a9d966fb7af5a8c28c213e84d89c5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-char.p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f02c07fb1a9d966fb7af5a8c28c213e84d89c5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-char.p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-char.p8.c?ref=34f02c07fb1a9d966fb7af5a8c28c213e84d89c5", "patch": "@@ -6,9 +6,9 @@\n /* { dg-options \"-mdejagnu-cpu=power8 -O2\" } */\n \n // six tests total. Targeting P8LE / P8BE.\n-// P8 LE variable offset: rldicl, subfic, sldi, mtvsrd, xxpermdi, vslo, mfvsrd, sradi, (extsb)\n+// P8 LE variable offset: rldicl, subfic, sldi, mtvsrd, xxpermdi, vslo, mfvsrd, sradi, rlwinm, (extsb)\n // P8 LE constant offset: vspltb, mfvsrd, rlwinm, (extsb)\n-// P8 BE variable offset:                 sldi, mtvsrd, xxpermdi, vslo, mfvsrd, sradi, (extsb)\n+// P8 BE variable offset:                 sldi, mtvsrd, xxpermdi, vslo, mfvsrd, sradi, rlwinm, (extsb)\n // P8 BE constant offset: vspltb, mfvsrd, rlwinm, (extsb)\n \n /* { dg-final { scan-assembler-times {\\mrldicl\\M} 3 { target { le } } } } */\n@@ -21,12 +21,12 @@\n /* { dg-final { scan-assembler-times {\\msrdi\\M} 3 { target lp64 } } } */\n /* { dg-final { scan-assembler-times \"extsb\" 2 } } */\n /* { dg-final { scan-assembler-times {\\mvspltb\\M} 3 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times {\\mrlwinm\\M} 2 { target lp64} } } */\n+/* { dg-final { scan-assembler-times {\\mrlwinm\\M} 4 { target lp64 } } } */\n \n /* multiple codegen variations for -m32. */\n-/* { dg-final { scan-assembler-times {\\mrlwinm\\M} 3 { target ilp32} } } */\n-/* { dg-final { scan-assembler-times {\\mstxvw4x\\M} 6 { target ilp32} } } */\n-/* { dg-final { scan-assembler-times {\\mlbz\\M} 6 { target ilp32} } } */\n+/* { dg-final { scan-assembler-times {\\mrlwinm\\M} 3 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mstxvw4x\\M} 6 { target ilp32 } } } */\n+/* { dg-final { scan-assembler-times {\\mlbz\\M} 6 { target ilp32 } } } */\n \n \n #include <altivec.h>"}, {"sha": "83ce4ee0829863953139518ef5179b7f2b384c24", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-int.p8.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f02c07fb1a9d966fb7af5a8c28c213e84d89c5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-int.p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f02c07fb1a9d966fb7af5a8c28c213e84d89c5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-int.p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-int.p8.c?ref=34f02c07fb1a9d966fb7af5a8c28c213e84d89c5", "patch": "@@ -7,14 +7,14 @@\n \n // Targeting P8 (LE) and (BE).  6 tests total.\n // P8 LE constant:  vspltw, mfvsrwz, (1:extsw/2:rldicl)\n-// P8 LE variables: rldicl, subfic,  sldi, mtvsrd, xxpermdi, vslo, mfvsrd, sradi, (1:extsw)\n+// P8 LE variables: subfic,  sldi, mtvsrd, xxpermdi, vslo, mfvsrd, sradi, (1:extsw/5:rldicl))\n // P8 BE constant:  vspltw, mfvsrwz, (1:extsw/2:rldicl)\n-// P8 BE variables:                  sldi, mtvsrd, xxpermdi, vslo, mfvsrd, sradi, (1:extsw)\n+// P8 BE variables:                  sldi, mtvsrd, xxpermdi, vslo, mfvsrd, sradi, (1:extsw/2:rldicl))\n \n /* { dg-final { scan-assembler-times {\\mvspltw\\M} 3 { target lp64 } } } */\n /* { dg-final { scan-assembler-times {\\mmfvsrwz\\M} 3 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times {\\mrldicl\\M} 5 { target { le } } } } */\n-/* { dg-final { scan-assembler-times {\\mrldicl\\M} 2 { target { lp64 && be } } } } */\n+/* { dg-final { scan-assembler-times {\\mrldicl\\M} 7 { target { le } } } } */\n+/* { dg-final { scan-assembler-times {\\mrldicl\\M} 4 { target { lp64 && be } } } } */\n /* { dg-final { scan-assembler-times {\\msubfic\\M} 3 { target { le } } } } */\n /* { dg-final { scan-assembler-times {\\msldi\\M} 3  { target lp64 } } } */\n /* { dg-final { scan-assembler-times {\\mmtvsrd\\M} 3 { target lp64 } } } */"}, {"sha": "e749a2211dd95a808405e834058080030caf855f", "filename": "gcc/testsuite/gcc.target/powerpc/fold-vec-extract-short.p8.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34f02c07fb1a9d966fb7af5a8c28c213e84d89c5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-short.p8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34f02c07fb1a9d966fb7af5a8c28c213e84d89c5/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-short.p8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffold-vec-extract-short.p8.c?ref=34f02c07fb1a9d966fb7af5a8c28c213e84d89c5", "patch": "@@ -6,10 +6,10 @@\n /* { dg-options \"-mdejagnu-cpu=power8 -O2\" } */\n \n // six tests total. Targeting P8, both LE and BE.\n-// p8 (le) variable offset: rldicl, subfic, sldi, mtvsrd, xxpermdi, vslo, mfvsrd, srdi, *extsh\n-// p8 (le) const offset:                          mtvsrd,                                *extsh/rlwinm\n-// p8 (be) var offset:                      sldi, mtvsrd, xxpermdi, vslo, mfvsrd, srdi, *extsh\n-// p8 (be) const offset:    vsplth,               mfvsrd,                                *extsh/rlwinm\n+// p8 (le) variable offset: rldicl, subfic, sldi, mtvsrd, xxpermdi, vslo, mfvsrd, srdi, (1:extsh/2:rlwinm)\n+// p8 (le) const offset:                          mtvsrd,                                (1:extsh/2:rlwinm)\n+// p8 (be) var offset:                      sldi, mtvsrd, xxpermdi, vslo, mfvsrd, srdi, (1:extsh:2:rlwinm)\n+// p8 (be) const offset:    vsplth,               mfvsrd,                                (1:extsh/2:rlwinm)\n \n // * - each of the above will have an extsh if the argument is signed.\n // * - bool and unsigned tests also have an rlwinm.\n@@ -24,7 +24,7 @@\n /* { dg-final { scan-assembler-times \"mfvsrd\" 6 { target lp64 } } } */\n /* { dg-final { scan-assembler-times \"srdi\" 3 { target lp64 } } } */\n /* { dg-final { scan-assembler-times \"extsh\" 2 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times \"rlwinm\" 2 { target lp64 } } } */\n+/* { dg-final { scan-assembler-times \"rlwinm\" 4 { target lp64 } } } */\n \n /* -m32 codegen tests. */\n /* { dg-final { scan-assembler-times {\\mli\\M} 6 { target ilp32 } } } */"}]}