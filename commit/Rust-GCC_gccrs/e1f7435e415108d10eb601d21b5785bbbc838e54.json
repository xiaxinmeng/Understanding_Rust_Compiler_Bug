{"sha": "e1f7435e415108d10eb601d21b5785bbbc838e54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFmNzQzNWU0MTUxMDhkMTBlYjYwMWQyMWI1Nzg1YmJiYzgzOGU1NA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-10-19T12:20:32Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-10-19T12:20:32Z"}, "message": "loop.c (scan_loop): Be more selective about what invariants are moved out of a loop.\n\n        * loop.c (scan_loop): Be more selective about what invariants are\n        moved out of a loop.\n\nFrom-SVN: r23178", "tree": {"sha": "b1a9832b2f3894b411416df36de55cfcff6ee8e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1a9832b2f3894b411416df36de55cfcff6ee8e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1f7435e415108d10eb601d21b5785bbbc838e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1f7435e415108d10eb601d21b5785bbbc838e54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1f7435e415108d10eb601d21b5785bbbc838e54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1f7435e415108d10eb601d21b5785bbbc838e54/comments", "author": null, "committer": null, "parents": [{"sha": "38bf4c6fcdb82bd51a0293d6c64695499083aefb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38bf4c6fcdb82bd51a0293d6c64695499083aefb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38bf4c6fcdb82bd51a0293d6c64695499083aefb"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "5d3a4cb020bc4acdee540fd15b1a85f29b622dd6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1f7435e415108d10eb601d21b5785bbbc838e54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1f7435e415108d10eb601d21b5785bbbc838e54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1f7435e415108d10eb601d21b5785bbbc838e54", "patch": "@@ -1,3 +1,8 @@\n+Mon Oct 19 11:40:56 1998  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* loop.c (scan_loop): Be more selective about what invariants are\n+\tmoved out of a loop.\n+\n Mon Oct 19 10:46:58 PDT 1998 Jeff Law  (law@cygnus.com)\n \n \t* version.c: Bump for snapshot."}, {"sha": "749a2ac4b5d9ca1ad0e78ebd14467d0e3f14db10", "filename": "gcc/loop.c", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1f7435e415108d10eb601d21b5785bbbc838e54/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1f7435e415108d10eb601d21b5785bbbc838e54/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=e1f7435e415108d10eb601d21b5785bbbc838e54", "patch": "@@ -837,13 +837,7 @@ scan_loop (loop_start, end, unroll_p, bct_p)\n \t     We don't know its life-span, so we can't compute the benefit.  */\n \t  if (REGNO (SET_DEST (set)) >= max_reg_before_loop)\n \t    ;\n-\t  else if (/* The set is a user-variable or it is used in\n-\t\t      the exit test (this can cause the variable to be\n-\t\t      used before it is set just like a\n-\t\t      user-variable)...  */\n-\t\t   (REG_USERVAR_P (SET_DEST (set))\n-\t\t    || REG_LOOP_TEST_P (SET_DEST (set)))\n-\t\t   /* And the set is not guaranteed to be executed one\n+\t  else if (/* The set is not guaranteed to be executed one\n \t\t      the loop starts, or the value before the set is\n \t\t      needed before the set occurs... */\n \t\t   && (maybe_never\n@@ -854,14 +848,11 @@ scan_loop (loop_start, end, unroll_p, bct_p)\n \t\t      something after this point in the loop might\n \t\t      depend on its value before the set).  */\n \t\t   && !reg_in_basic_block_p (p, SET_DEST (set)))\n-\t    /* It is unsafe to move the set.  The fact that these\n-\t       three conditions are considered in conjunction means\n-\t       that we are assuming various conditions, such as:\n-\n-\t         o It's OK to move a set of a variable which was not\n-\t           created by the user and is not used in an exit test\n-\t           even if that point in the set would not be reached\n-\t\t   during execution of the loop.  */\n+\t    /* It is unsafe to move the set.  \n+\n+\t       This code used to consider it OK to move a set of a variable\n+\t       which was not created by the user and not used in an exit test.\n+\t       That behavior is incorrect and was removed.  */\n \t    ;\n \t  else if ((tem = invariant_p (src))\n \t\t   && (dependencies == 0"}]}