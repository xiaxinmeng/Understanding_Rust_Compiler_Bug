{"sha": "02614448c98bec25dacfe97635f05a04aa748676", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI2MTQ0NDhjOThiZWMyNWRhY2ZlOTc2MzVmMDVhMDRhYTc0ODY3Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-07-21T21:30:24Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-07-21T21:30:24Z"}, "message": "re PR middle-end/49705 (-Wstrict-overflow should not diagnose unevaluated expressions)\n\ngcc/c-family:\n\tPR middle-end/49705\n\t* c-common.c (c_disable_warnings): New static function.\n\t(c_enable_warnings): New static function.\n\t(c_fully_fold_internal): Change local unused_p to bool.  Call\n\tc_disable_warnings and c_enable_warnings rather than change\n\tc_inhibit_evaluation_warnings.\ngcc/testsuite:\n\tPR middle-end/49705\n\t* gcc.dg/pr49705.c: New test.\n\nFrom-SVN: r176591", "tree": {"sha": "7addef770a5a423e51574d8ee986e8096f1cbd72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7addef770a5a423e51574d8ee986e8096f1cbd72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02614448c98bec25dacfe97635f05a04aa748676", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02614448c98bec25dacfe97635f05a04aa748676", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02614448c98bec25dacfe97635f05a04aa748676", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02614448c98bec25dacfe97635f05a04aa748676/comments", "author": null, "committer": null, "parents": [{"sha": "1f1c0dbd36f67527f1efe575432e1fd7d4861eec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f1c0dbd36f67527f1efe575432e1fd7d4861eec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f1c0dbd36f67527f1efe575432e1fd7d4861eec"}], "stats": {"total": 73, "additions": 66, "deletions": 7}, "files": [{"sha": "8af431e2930d10139aaf4fa016a5fd0392baf4c7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02614448c98bec25dacfe97635f05a04aa748676/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02614448c98bec25dacfe97635f05a04aa748676/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=02614448c98bec25dacfe97635f05a04aa748676", "patch": "@@ -1,3 +1,12 @@\n+2011-07-21  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR middle-end/49705\n+\t* c-common.c (c_disable_warnings): New static function.\n+\t(c_enable_warnings): New static function.\n+\t(c_fully_fold_internal): Change local unused_p to bool.  Call\n+\tc_disable_warnings and c_enable_warnings rather than change\n+\tc_inhibit_evaluation_warnings.\n+\n 2011-07-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/6709 (DR 743)"}, {"sha": "96275bac70a5dbac6eb5cec32f7046f33c5d9ff5", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02614448c98bec25dacfe97635f05a04aa748676/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02614448c98bec25dacfe97635f05a04aa748676/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=02614448c98bec25dacfe97635f05a04aa748676", "patch": "@@ -963,6 +963,32 @@ fix_string_type (tree value)\n   return value;\n }\n \f\n+/* If DISABLE is true, stop issuing warnings.  This is used when\n+   parsing code that we know will not be executed.  This function may\n+   be called multiple times, and works as a stack.  */\n+\n+static void\n+c_disable_warnings (bool disable)\n+{\n+  if (disable)\n+    {\n+      ++c_inhibit_evaluation_warnings;\n+      fold_defer_overflow_warnings ();\n+    }\n+}\n+\n+/* If ENABLE is true, reenable issuing warnings.  */\n+\n+static void\n+c_enable_warnings (bool enable)\n+{\n+  if (enable)\n+    {\n+      --c_inhibit_evaluation_warnings;\n+      fold_undefer_and_ignore_overflow_warnings ();\n+    }\n+}\n+\n /* Fully fold EXPR, an expression that was not folded (beyond integer\n    constant expressions and null pointer constants) when being built\n    up.  If IN_INIT, this is in a static initializer and certain\n@@ -1029,7 +1055,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n   bool op0_const = true, op1_const = true, op2_const = true;\n   bool op0_const_self = true, op1_const_self = true, op2_const_self = true;\n   bool nowarning = TREE_NO_WARNING (expr);\n-  int unused_p;\n+  bool unused_p;\n \n   /* This function is not relevant to C++ because C++ folds while\n      parsing, and may need changes to be correct for C++ when C++\n@@ -1278,10 +1304,10 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       unused_p = (op0 == (code == TRUTH_ANDIF_EXPR\n \t\t\t  ? truthvalue_false_node\n \t\t\t  : truthvalue_true_node));\n-      c_inhibit_evaluation_warnings += unused_p;\n+      c_disable_warnings (unused_p);\n       op1 = c_fully_fold_internal (op1, in_init, &op1_const, &op1_const_self);\n       STRIP_TYPE_NOPS (op1);\n-      c_inhibit_evaluation_warnings -= unused_p;\n+      c_enable_warnings (unused_p);\n \n       if (op0 != orig_op0 || op1 != orig_op1 || in_init)\n \tret = in_init\n@@ -1313,15 +1339,15 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n       op0 = c_fully_fold_internal (op0, in_init, &op0_const, &op0_const_self);\n \n       STRIP_TYPE_NOPS (op0);\n-      c_inhibit_evaluation_warnings += (op0 == truthvalue_false_node);\n+      c_disable_warnings (op0 == truthvalue_false_node);\n       op1 = c_fully_fold_internal (op1, in_init, &op1_const, &op1_const_self);\n       STRIP_TYPE_NOPS (op1);\n-      c_inhibit_evaluation_warnings -= (op0 == truthvalue_false_node);\n+      c_enable_warnings (op0 == truthvalue_false_node);\n \n-      c_inhibit_evaluation_warnings += (op0 == truthvalue_true_node);\n+      c_disable_warnings (op0 == truthvalue_true_node);\n       op2 = c_fully_fold_internal (op2, in_init, &op2_const, &op2_const_self);\n       STRIP_TYPE_NOPS (op2);\n-      c_inhibit_evaluation_warnings -= (op0 == truthvalue_true_node);\n+      c_enable_warnings (op0 == truthvalue_true_node);\n \n       if (op0 != orig_op0 || op1 != orig_op1 || op2 != orig_op2)\n \tret = fold_build3_loc (loc, code, TREE_TYPE (expr), op0, op1, op2);"}, {"sha": "d28b4847483c0f99e0f2d227c496c68732d3d603", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02614448c98bec25dacfe97635f05a04aa748676/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02614448c98bec25dacfe97635f05a04aa748676/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=02614448c98bec25dacfe97635f05a04aa748676", "patch": "@@ -1,3 +1,8 @@\n+2011-07-21  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR middle-end/49705\n+\t* gcc.dg/pr49705.c: New test.\n+\n 2011-07-21  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* lib/target-supports.exp (check_avx_os_support_available): New."}, {"sha": "0c326ae3f71f0ff24e609b7dfd78afbbaa6a920b", "filename": "gcc/testsuite/gcc.dg/pr49705.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02614448c98bec25dacfe97635f05a04aa748676/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49705.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02614448c98bec25dacfe97635f05a04aa748676/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49705.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr49705.c?ref=02614448c98bec25dacfe97635f05a04aa748676", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wstrict-overflow\" } */\n+\n+struct glyph\n+{\n+  long foo, bar, baz;\n+};\n+\n+extern int fatal (char const *, int, int);\n+\n+int\n+check_image_width (int width, int height)\n+{\n+  if ((((((0 * (0 * 2 + width) - 1) < 0) ? - (~ (0 * (0 * 2 + width) + 0) == -1) - ((((0 * (0 * 2 + width) + 1) << (sizeof ((0 * 2 + width) + 0) * 8 - 2)) - 1) * 2 + 1) : (0 * (0 * 2 + width) + 0))) < 0 ? (2 < 0 ? width < ((((0 * (0 * 2 + width) - 1) < 0) ? - (~ (0 * (0 * 2 + width) + 0) == -1) - ((((0 * (0 * 2 + width) + 1) << (sizeof ((0 * 2 + width) + 0) * 8 - 2)) - 1) * 2 + 1) : (0 * (0 * 2 + width) + 0))) - 2 : ((((0 * (0 * 2 + width) - 1) < 0) ? ((((0 * (0 * 2 + width) + 1) << (sizeof ((0 * 2 + width) + 0) * 8 - 2)) - 1) * 2 + 1) : (0 * (0 * 2 + width) - 1))) - 2 < width) : width < 0 ? 2 <= width + 2 : 2 < 0 ? width <= width + 2 : width + 2 < 2)\n+      || ((((((0 * (0 * height + (width + 2)) - 1) < 0) ? - (~ (0 * (0 * height + (width + 2)) + 0) == -1) - ((((0 * (0 * height + (width + 2)) + 1) << (sizeof ((0 * height + (width + 2)) + 0) * 8 - 2)) - 1) * 2 + 1) : (0 * (0 * height + (width + 2)) + 0))) == 0 && (((width + 2) < 0 && 0 < height) || (height < 0 && 0 < (width + 2)))) || (height < 0 ? ((width + 2) < 0 ? (width + 2) < ((((0 * (0 * height + (width + 2)) - 1) < 0) ? ((((0 * (0 * height + (width + 2)) + 1) << (sizeof ((0 * height + (width + 2)) + 0) * 8 - 2)) - 1) * 2 + 1) : (0 * (0 * height + (width + 2)) - 1))) / height : height == -1 ? 0 : ((((0 * (0 * height + (width + 2)) - 1) < 0) ? - (~ (0 * (0 * height + (width + 2)) + 0) == -1) - ((((0 * (0 * height + (width + 2)) + 1) << (sizeof ((0 * height + (width + 2)) + 0) * 8 - 2)) - 1) * 2 + 1) : (0 * (0 * height + (width + 2)) + 0))) / height < (width + 2)) : height == 0 ? 0 : ((width + 2) < 0 ? (width + 2) < ((((0 * (0 * height + (width + 2)) - 1) < 0) ? - (~ (0 * (0 * height + (width + 2)) + 0) == -1) - ((((0 * (0 * height + (width + 2)) + 1) << (sizeof ((0 * height + (width + 2)) + 0) * 8 - 2)) - 1) * 2 + 1) : (0 * (0 * height + (width + 2)) + 0))) / height : ((((0 * (0 * height + (width + 2)) - 1) < 0) ? ((((0 * (0 * height + (width + 2)) + 1) << (sizeof ((0 * height + (width + 2)) + 0) * 8 - 2)) - 1) * 2 + 1) : (0 * (0 * height + (width + 2)) - 1))) / height < (width + 2))))\n+      || ((9223372036854775807L < 18446744073709551615UL ? 9223372036854775807L : 18446744073709551615UL) / sizeof (struct glyph)\n+\t  < (width + 2) * height))\n+    fatal (\"screen size %dx%d too big\", width, height);\n+}"}]}