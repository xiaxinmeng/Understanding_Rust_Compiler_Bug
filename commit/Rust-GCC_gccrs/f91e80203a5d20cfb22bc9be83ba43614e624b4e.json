{"sha": "f91e80203a5d20cfb22bc9be83ba43614e624b4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkxZTgwMjAzYTVkMjBjZmIyMmJjOWJlODNiYTQzNjE0ZTYyNGI0ZQ==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2007-10-15T13:56:15Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-10-15T13:56:15Z"}, "message": "sem_aggr.adb (Resolve_Record_Aggregate): In the case of a box association for an access component...\n\n2007-10-15  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_aggr.adb (Resolve_Record_Aggregate): In the case of a box\n\tassociation for an access component, add an association with null as\n\tthe expression. Remove testing for array subtypes and the setting in\n\tthat case of Ctyp to the array component type, which prevented proper\n\tinclusion of an association for null-initialized arrays. Collapse\n\tcondition that tests for array subtypes into just a test of\n\tIs_Partially_Initialized_Type (which already covers arrays anyway).\n\nFrom-SVN: r129331", "tree": {"sha": "f5352926499a32769a75c12a43b3b181303cd32c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5352926499a32769a75c12a43b3b181303cd32c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f91e80203a5d20cfb22bc9be83ba43614e624b4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f91e80203a5d20cfb22bc9be83ba43614e624b4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f91e80203a5d20cfb22bc9be83ba43614e624b4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f91e80203a5d20cfb22bc9be83ba43614e624b4e/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3d63f8c9a15ccf99d996b9d039ff477be978d0d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d63f8c9a15ccf99d996b9d039ff477be978d0d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d63f8c9a15ccf99d996b9d039ff477be978d0d8"}], "stats": {"total": 75, "additions": 50, "deletions": 25}, "files": [{"sha": "3d5b62df4cf29bacf0360acdf8c0c5476c67e799", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 50, "deletions": 25, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f91e80203a5d20cfb22bc9be83ba43614e624b4e/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f91e80203a5d20cfb22bc9be83ba43614e624b4e/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=f91e80203a5d20cfb22bc9be83ba43614e624b4e", "patch": "@@ -1258,10 +1258,13 @@ package body Sem_Aggr is\n          Val_AL : Uint;\n          Val_AH : Uint;\n \n-         OK_L  : Boolean;\n-         OK_H  : Boolean;\n+         OK_L : Boolean;\n+         OK_H : Boolean;\n+\n          OK_AL : Boolean;\n-         OK_AH : Boolean;\n+         OK_AH  : Boolean;\n+         pragma Warnings (Off, OK_AL);\n+         pragma Warnings (Off, OK_AH);\n \n       begin\n          if Raises_Constraint_Error (N)\n@@ -1464,7 +1467,8 @@ package body Sem_Aggr is\n       Choice  : Node_Id;\n       Expr    : Node_Id;\n \n-      Who_Cares : Node_Id;\n+      Discard : Node_Id;\n+      pragma Warnings (Off, Discard);\n \n       Aggr_Low  : Node_Id := Empty;\n       Aggr_High : Node_Id := Empty;\n@@ -1881,7 +1885,7 @@ package body Sem_Aggr is\n \n          else\n             if Others_Allowed then\n-               Get_Index_Bounds (Index_Constr, Aggr_Low, Who_Cares);\n+               Get_Index_Bounds (Index_Constr, Aggr_Low, Discard);\n             else\n                Aggr_Low := Index_Typ_Low;\n             end if;\n@@ -2984,27 +2988,17 @@ package body Sem_Aggr is\n          Expr := Get_Value (Component, Component_Associations (N), True);\n \n          --  Note: The previous call to Get_Value sets the value of the\n-         --  variable Is_Box_Present\n+         --  variable Is_Box_Present.\n \n          --  Ada 2005 (AI-287): Handle components with default initialization.\n          --  Note: This feature was originally added to Ada 2005 for limited\n          --  but it was finally allowed with any type.\n \n          if Is_Box_Present then\n-            declare\n-               Is_Array_Subtype : constant Boolean :=\n-                                    Ekind (Etype (Component)) =\n-                                                           E_Array_Subtype;\n-\n-               Ctyp : Entity_Id;\n+            Check_Box_Component : declare\n+               Ctyp : constant Entity_Id := Etype (Component);\n \n             begin\n-               if Is_Array_Subtype then\n-                  Ctyp := Component_Type (Base_Type (Etype (Component)));\n-               else\n-                  Ctyp := Etype (Component);\n-               end if;\n-\n                --  If there is a default expression for the aggregate, copy\n                --  it into a new association.\n \n@@ -3033,6 +3027,42 @@ package body Sem_Aggr is\n                      Expr      => Expr);\n                   Set_Has_Self_Reference (N);\n \n+               --  A box-defaulted access component gets the value null. Also\n+               --  included are components of private types whose underlying\n+               --  type is an access type.\n+\n+               elsif Present (Underlying_Type (Ctyp))\n+                 and then Is_Access_Type (Underlying_Type (Ctyp))\n+               then\n+                  if not Is_Private_Type (Ctyp) then\n+                     Add_Association\n+                       (Component => Component,\n+                        Expr      => Make_Null (Sloc (N)));\n+\n+                  --  If the component's type is private with an access type as\n+                  --  its underlying type then we have to create an unchecked\n+                  --  conversion to satisfy type checking.\n+\n+                  else\n+                     declare\n+                        Qual_Null : constant Node_Id :=\n+                                      Make_Qualified_Expression (Sloc (N),\n+                                        Subtype_Mark =>\n+                                          New_Occurrence_Of\n+                                            (Underlying_Type (Ctyp), Sloc (N)),\n+                                        Expression => Make_Null (Sloc (N)));\n+\n+                        Convert_Null : constant Node_Id :=\n+                                         Unchecked_Convert_To\n+                                           (Ctyp, Qual_Null);\n+\n+                     begin\n+                        Analyze_And_Resolve (Convert_Null, Ctyp);\n+                        Add_Association\n+                          (Component => Component, Expr => Convert_Null);\n+                     end;\n+                  end if;\n+\n                elsif Has_Non_Null_Base_Init_Proc (Ctyp)\n                  or else not Expander_Active\n                then\n@@ -3143,16 +3173,11 @@ package body Sem_Aggr is\n                --  expand the corresponding assignments and run-time checks).\n \n                elsif Present (Expr)\n-                 and then\n-                   ((not Is_Array_Subtype\n-                       and then Is_Partially_Initialized_Type (Component))\n-                      or else\n-                        (Is_Array_Subtype\n-                           and then Is_Partially_Initialized_Type (Ctyp)))\n+                 and then Is_Partially_Initialized_Type (Ctyp)\n                then\n                   Resolve_Aggr_Expr (Expr, Component);\n                end if;\n-            end;\n+            end Check_Box_Component;\n \n          elsif No (Expr) then\n "}]}