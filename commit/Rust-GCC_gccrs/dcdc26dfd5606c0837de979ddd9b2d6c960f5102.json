{"sha": "dcdc26dfd5606c0837de979ddd9b2d6c960f5102", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNkYzI2ZGZkNTYwNmMwODM3ZGU5NzlkZGQ5YjJkNmM5NjBmNTEwMg==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2007-05-04T18:02:18Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-05-04T18:02:18Z"}, "message": "re PR target/22539 (Internal compiler error with maximum sized array)\n\ngcc/fortran:\n2007-05-04  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/22539\n\t* intrinsic.c (add_subroutines): Added FSEEK.\n\t* intrinsic.h (gfc_resolve_fseek_sub, gfc_check_fseek_sub): New.\n\t* iresolve.c (gfc_resolve_fseek_sub): New.\n\t* check.c (gfc_check_fseek_sub): New.\n\t* intrinsic.texi (FSEEK): Updated.\n\ngcc/testsuite:\n2007-05-01  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/22539\n\t* gfortran.dg/fseek.f90: New test.\n\nlibgfortran:\n2007-05-04  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/22539\n\t* io/intrinsics.c (fseek_sub): New.\n\t* io/unix.c (fd_fseek): Change logical and physical offsets only\n\tif seek succeeds.\n\t* gfortran.map (fseek_sub): New.\n\nFrom-SVN: r124437", "tree": {"sha": "f5fbb8c905ad4fe8db79b23d98f6fdde28648680", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5fbb8c905ad4fe8db79b23d98f6fdde28648680"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcdc26dfd5606c0837de979ddd9b2d6c960f5102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcdc26dfd5606c0837de979ddd9b2d6c960f5102", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcdc26dfd5606c0837de979ddd9b2d6c960f5102", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa2bd2db03ce5bef785823ebca7b97cc2fa7f807", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2bd2db03ce5bef785823ebca7b97cc2fa7f807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa2bd2db03ce5bef785823ebca7b97cc2fa7f807"}], "stats": {"total": 260, "additions": 250, "deletions": 10}, "files": [{"sha": "84b90231bfde1b6b25af44dc1276e703c6d545cd", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=dcdc26dfd5606c0837de979ddd9b2d6c960f5102", "patch": "@@ -1,3 +1,12 @@\n+2007-05-04  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/22539\n+\t* intrinsic.c (add_subroutines): Added FSEEK.\n+\t* intrinsic.h (gfc_resolve_fseek_sub, gfc_check_fseek_sub): New.\n+\t* iresolve.c (gfc_resolve_fseek_sub): New.\n+\t* check.c (gfc_check_fseek_sub): New.\n+\t* intrinsic.texi (FSEEK): Updated.\n+\n 2007-05-04  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/31803"}, {"sha": "73192e9fa677e29251ddda244f77748889f109a4", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=dcdc26dfd5606c0837de979ddd9b2d6c960f5102", "patch": "@@ -2460,6 +2460,44 @@ gfc_check_fgetput (gfc_expr *c)\n }\n \n \n+try\n+gfc_check_fseek_sub (gfc_expr *unit, gfc_expr *offset, gfc_expr *whence, gfc_expr *status)\n+{\n+  if (type_check (unit, 0, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (scalar_check (unit, 0) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (offset, 1, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (scalar_check (offset, 1) == FAILURE)\n+    return FAILURE;\n+\n+  if (type_check (whence, 2, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (scalar_check (whence, 2) == FAILURE)\n+    return FAILURE;\n+\n+  if (status == NULL)\n+    return SUCCESS;\n+\n+  if (type_check (status, 3, BT_INTEGER) == FAILURE)\n+    return FAILURE;\n+\n+  if (kind_value_check (status, 3, 4) == FAILURE)\n+    return FAILURE\n+\n+  if (scalar_check (status, 3) == FAILURE)\n+    return FAILURE;\n+\n+  return SUCCESS;\n+}\n+\n+\n+\n try\n gfc_check_fstat (gfc_expr *unit, gfc_expr *array)\n {"}, {"sha": "927fcc13dcdb6ad2224a2dbdbd698f58d6c94c64", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=dcdc26dfd5606c0837de979ddd9b2d6c960f5102", "patch": "@@ -2313,7 +2313,8 @@ add_subroutines (void)\n     *com = \"command\", *length = \"length\", *st = \"status\",\n     *val = \"value\", *num = \"number\", *name = \"name\",\n     *trim_name = \"trim_name\", *ut = \"unit\", *han = \"handler\",\n-    *sec = \"seconds\", *res = \"result\", *of = \"offset\", *md = \"mode\";\n+    *sec = \"seconds\", *res = \"result\", *of = \"offset\", *md = \"mode\",\n+    *whence = \"whence\";\n \n   int di, dr, dc, dl, ii;\n \n@@ -2489,6 +2490,11 @@ add_subroutines (void)\n   add_sym_1s (\"free\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU, gfc_check_free,\n \t      NULL, gfc_resolve_free, c, BT_INTEGER, ii, REQUIRED);\n \n+  add_sym_4s (\"fseek\", NOT_ELEMENTAL, BT_UNKNOWN, 0, GFC_STD_GNU,\n+              gfc_check_fseek_sub, NULL, gfc_resolve_fseek_sub,\n+              ut, BT_INTEGER, di, REQUIRED, of, BT_INTEGER, di, REQUIRED,\n+              whence, BT_INTEGER, di, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n+\n   add_sym_2s (\"ftell\", NOT_ELEMENTAL,  BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_ftell_sub, NULL, gfc_resolve_ftell_sub,\n \t      ut, BT_INTEGER, di, REQUIRED, of, BT_INTEGER, ii, REQUIRED);"}, {"sha": "8f07c05ca5c151f6b36c06cac81f73dd63b73b6e", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=dcdc26dfd5606c0837de979ddd9b2d6c960f5102", "patch": "@@ -162,6 +162,7 @@ try gfc_check_random_seed (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_etime_sub (gfc_expr *, gfc_expr *);\n try gfc_check_fgetputc_sub (gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_fgetput_sub (gfc_expr *, gfc_expr *);\n+try gfc_check_fseek_sub (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n try gfc_check_ftell_sub (gfc_expr *, gfc_expr *);\n try gfc_check_getcwd_sub (gfc_expr *, gfc_expr *);\n try gfc_check_hostnm_sub (gfc_expr *, gfc_expr *);\n@@ -456,6 +457,7 @@ void gfc_resolve_exit (gfc_code *);\n void gfc_resolve_fdate_sub (gfc_code *);\n void gfc_resolve_flush (gfc_code *);\n void gfc_resolve_free (gfc_code *);\n+void gfc_resolve_fseek_sub (gfc_code *);\n void gfc_resolve_fstat_sub (gfc_code *);\n void gfc_resolve_ftell_sub (gfc_code *);\n void gfc_resolve_fgetc_sub (gfc_code *);"}, {"sha": "4e6b26a21d98dc25690020b45e84eec3db7f5f64", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 58, "deletions": 6, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=dcdc26dfd5606c0837de979ddd9b2d6c960f5102", "patch": "@@ -3966,10 +3966,31 @@ See @code{MALLOC} for an example.\n @cindex file operation, seek\n @cindex file operation, position\n \n-Not yet implemented in GNU Fortran.\n-\n @table @asis\n @item @emph{Description}:\n+Moves @var{UNIT} to the specified @var{OFFSET}. If @var{WHENCE} \n+is set to 0, the @var{OFFSET} is taken as an absolute value @code{SEEK_SET},\n+if set to 1, @var{OFFSET} is taken to be relative to the current position \n+@code{SEEK_CUR}, and if set to 2 relative to the end of the file @code{SEEK_END}.\n+On error, @var{STATUS} is set to a non-zero value. If @var{STATUS} the seek \n+fails silently.\n+\n+This intrinsic routine is not fully backwards compatible with @command{g77}. \n+In @command{g77}, the @code{FSEEK} takes a statement label instead of a \n+@var{STATUS} variable. If FSEEK is used in old code, change\n+@smallexample\n+  CALL FSEEK(UNIT, OFFSET, WHENCE, *label)\n+@end smallexample \n+to\n+@smallexample\n+  INTEGER :: status\n+  CALL FSEEK(UNIT, OFFSET, WHENCE, status)\n+  IF (status /= 0) GOTO label\n+@end smallexample \n+\n+Please note that GNU Fortran provides the Fortran 2003 Stream facility.\n+Programmers should consider the use of new stream IO feature in new code \n+for future portability. See also @ref{Fortran 2003 status}.\n \n @item @emph{Standard}:\n GNU extension\n@@ -3978,13 +3999,44 @@ GNU extension\n Subroutine\n \n @item @emph{Syntax}:\n+@code{CALL FSEEK(UNIT, OFFSET, WHENCE[, STATUS])}\n+\n @item @emph{Arguments}:\n-@item @emph{Return value}:\n+@multitable @columnfractions .15 .70\n+@item @var{UNIT}   @tab Shall be a scalar of type @code{INTEGER}.\n+@item @var{OFFSET} @tab Shall be a scalar of type @code{INTEGER}.\n+@item @var{WHENCE} @tab Shall be a scalar of type @code{INTEGER}.\n+Its value shall be either 0, 1 or 2.\n+@item @var{STATUS} @tab (Optional) shall be a scalar of type \n+@code{INTEGER(4)}.\n+@end multitable\n+\n @item @emph{Example}:\n-@item @emph{Specific names}:\n-@item @emph{See also}:\n-@uref{http://gcc.gnu.org/bugzilla/show_bug.cgi?id=19292, g77 features lacking in gfortran}\n+@smallexample\n+PROGRAM test_fseek\n+  INTEGER, PARAMETER :: SEEK_SET = 0, SEEK_CUR = 1, SEEK_END = 2\n+  INTEGER :: fd, offset, ierr\n+\n+  ierr   = 0\n+  offset = 5\n+  fd     = 10\n+\n+  OPEN(UNIT=fd, FILE=\"fseek.test\")\n+  CALL FSEEK(fd, offset, SEEK_SET, ierr)  ! move to OFFSET\n+  print *, FTELL(fd), ierr\n+\n+  CALL FSEEK(fd, 0, SEEK_END, ierr)       ! move to end\n+  print *, FTELL(fd), ierr\n \n+  CALL FSEEK(fd, 0, SEEK_SET, ierr)       ! move to beginning\n+  print *, FTELL(fd), ierr\n+\n+  CLOSE(UNIT=fd)\n+END PROGRAM\n+@end smallexample\n+\n+@item @emph{See also}:\n+@ref{FTELL}\n @end table\n \n "}, {"sha": "b0a1c37dda6d6c1dffb96aff64a2c8de2de8b2a4", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=dcdc26dfd5606c0837de979ddd9b2d6c960f5102", "patch": "@@ -2965,6 +2965,50 @@ gfc_resolve_fput_sub (gfc_code *c)\n }\n \n \n+void \n+gfc_resolve_fseek_sub (gfc_code *c)\n+{\n+  gfc_expr *unit;\n+  gfc_expr *offset;\n+  gfc_expr *whence;\n+  gfc_expr *status;\n+  gfc_typespec ts;\n+\n+  unit   = c->ext.actual->expr;\n+  offset = c->ext.actual->next->expr;\n+  whence = c->ext.actual->next->next->expr;\n+  status = c->ext.actual->next->next->next->expr;\n+\n+  if (unit->ts.kind != gfc_c_int_kind)\n+    {\n+      ts.type = BT_INTEGER;\n+      ts.kind = gfc_c_int_kind;\n+      ts.derived = NULL;\n+      ts.cl = NULL;\n+      gfc_convert_type (unit, &ts, 2);\n+    }\n+\n+  if (offset->ts.kind != gfc_intio_kind)\n+    {\n+      ts.type = BT_INTEGER;\n+      ts.kind = gfc_intio_kind;\n+      ts.derived = NULL;\n+      ts.cl = NULL;\n+      gfc_convert_type (offset, &ts, 2);\n+    }\n+\n+  if (whence->ts.kind != gfc_c_int_kind)\n+    {\n+      ts.type = BT_INTEGER;\n+      ts.kind = gfc_c_int_kind;\n+      ts.derived = NULL;\n+      ts.cl = NULL;\n+      gfc_convert_type (whence, &ts, 2);\n+    }\n+\n+  c->resolved_sym = gfc_get_intrinsic_sub_symbol (PREFIX (\"fseek_sub\"));\n+}\n+\n void\n gfc_resolve_ftell_sub (gfc_code *c)\n {"}, {"sha": "d6ca0dab86c3e8c4506f447dbca651ac3c9856b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dcdc26dfd5606c0837de979ddd9b2d6c960f5102", "patch": "@@ -1,3 +1,8 @@\n+2007-05-04  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/22539\n+\t* gfortran.dg/fseek.f90: New test.\n+\n 2007-05-04  Bob Wilson  <bob.wilson@acm.org>\n \t\n \t* g++.old-deja/g++.pt/static11.C: Remove xtensa-*-elf* xfail."}, {"sha": "a42575c2c0566ebdc2830ddbaa5933712815f81b", "filename": "gcc/testsuite/gfortran.dg/fseek.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/gcc%2Ftestsuite%2Fgfortran.dg%2Ffseek.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/gcc%2Ftestsuite%2Fgfortran.dg%2Ffseek.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffseek.f90?ref=dcdc26dfd5606c0837de979ddd9b2d6c960f5102", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do run }\n+\n+PROGRAM test_fseek\n+  INTEGER, PARAMETER :: SEEK_SET = 0, SEEK_CUR = 1, SEEK_END = 2, fd=10\n+  INTEGER :: ierr = 0\n+\n+  ! expected position: 12, one leading blank + 10 + newline\n+  WRITE(fd, *) \"1234567890\"\n+  IF (FTELL(fd) /= 12) CALL abort()\n+\n+  ! move backward from current position\n+  CALL FSEEK(fd, -12, SEEK_CUR, ierr)\n+  IF (ierr /= 0 .OR. FTELL(fd) /= 0) CALL abort()\n+\n+  ! move to negative position (error)\n+  CALL FSEEK(fd, -1, SEEK_SET, ierr)\n+  IF (ierr == 0 .OR. FTELL(fd) /= 0) CALL abort()\n+\n+  ! move forward from end (12 + 10)\n+  CALL FSEEK(fd, 10, SEEK_END, ierr)\n+  IF (ierr /= 0 .OR. FTELL(fd) /= 22) CALL abort()\n+\n+  ! set position (0)\n+  CALL FSEEK(fd, 0, SEEK_SET, ierr)\n+  IF (ierr /= 0 .OR. FTELL(fd) /= 0) CALL abort()\n+\n+  ! move forward from current position\n+  CALL FSEEK(fd, 5, SEEK_CUR, ierr)\n+  IF (ierr /= 0 .OR. FTELL(fd) /= 5) CALL abort()\n+\n+  CALL FSEEK(fd, HUGE(0_1), SEEK_SET, ierr)\n+  IF (ierr /= 0 .OR. FTELL(fd) /= HUGE(0_1)) CALL abort()\n+\n+  CALL FSEEK(fd, HUGE(0_2), SEEK_SET, ierr)\n+  IF (ierr /= 0 .OR. FTELL(fd) /= HUGE(0_2)) CALL abort()\n+\n+  CALL FSEEK(fd, HUGE(0_4), SEEK_SET, ierr)\n+  IF (ierr /= 0 .OR. FTELL(fd) /= HUGE(0_4)) CALL abort()\n+  \n+  CALL FSEEK(fd, -HUGE(0_4), SEEK_CUR, ierr)\n+  IF (ierr /= 0 .OR. FTELL(fd) /= 0) CALL abort()\n+END PROGRAM\n+"}, {"sha": "806b17d1d9593eda85ccf9f524e363a180e09622", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=dcdc26dfd5606c0837de979ddd9b2d6c960f5102", "patch": "@@ -1,3 +1,11 @@\n+2007-05-04  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/22539\n+\t* io/intrinsics.c (fseek_sub): New.\n+\t* io/unix.c (fd_fseek): Change logical and physical offsets only\n+\tif seek succeeds.\n+\t* gfortran.map (fseek_sub): New.\n+\n 2007-05-04  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR libfortran/31210"}, {"sha": "19b458b7b64c7e7b00ea2bc98e5cb09a92c2d499", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=dcdc26dfd5606c0837de979ddd9b2d6c960f5102", "patch": "@@ -128,6 +128,7 @@ GFORTRAN_1.0 {\n     _gfortran_fraction_r4;\n     _gfortran_fraction_r8;\n     _gfortran_free;\n+    _gfortran_fseek_sub;\n     _gfortran_fstat_i4;\n     _gfortran_fstat_i4_sub;\n     _gfortran_fstat_i8;"}, {"sha": "2402f4869267f47ff7b087dd28c5130f00ae9f3c", "filename": "libgfortran/io/intrinsics.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/libgfortran%2Fio%2Fintrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/libgfortran%2Fio%2Fintrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fintrinsics.c?ref=dcdc26dfd5606c0837de979ddd9b2d6c960f5102", "patch": "@@ -228,6 +228,34 @@ flush_i8 (GFC_INTEGER_8 *unit)\n     }\n }\n \n+/* FSEEK intrinsic */\n+\n+extern void fseek_sub (int *, GFC_IO_INT *, int *, int *);\n+export_proto(fseek_sub);\n+\n+void\n+fseek_sub (int * unit, GFC_IO_INT * offset, int * whence, int * status)\n+{\n+  gfc_unit * u = find_unit (*unit);\n+  try result = FAILURE;\n+\n+  if (u != NULL && is_seekable(u->s))\n+    {\n+      if (*whence == 0)\n+        result = sseek(u->s, *offset);                       /* SEEK_SET */\n+      else if (*whence == 1)\n+        result = sseek(u->s, file_position(u->s) + *offset); /* SEEK_CUR */\n+      else if (*whence == 2)\n+        result = sseek(u->s, file_length(u->s) + *offset);   /* SEEK_END */\n+\n+      unlock_unit (u);\n+    }\n+\n+  if (status)\n+    *status = (result == FAILURE ? -1 : 0);\n+}\n+\n+\n \n /* FTELL intrinsic */\n "}, {"sha": "cdac0d7dfdd6d6311c1a9a366008284f738e8de6", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdc26dfd5606c0837de979ddd9b2d6c960f5102/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=dcdc26dfd5606c0837de979ddd9b2d6c960f5102", "patch": "@@ -601,10 +601,14 @@ fd_seek (unix_stream * s, gfc_offset offset)\n       return SUCCESS;\n     }\n \n-  s->physical_offset = s->logical_offset = offset;\n-  s->active = 0;\n+  if (lseek (s->fd, offset, SEEK_SET) >= 0)\n+    {\n+      s->physical_offset = s->logical_offset = offset;\n+      s->active = 0;\n+      return SUCCESS;\n+    }\n \n-  return (lseek (s->fd, offset, SEEK_SET) < 0) ? FAILURE : SUCCESS;\n+  return FAILURE;\n }\n \n "}]}