{"sha": "8b75fc9ba6acfe2e950442b0e0d03d20c3ac7c5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI3NWZjOWJhNmFjZmUyZTk1MDQ0MmIwZTBkMDNkMjBjM2FjN2M1Yg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2009-05-17T23:33:35Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2009-05-17T23:33:35Z"}, "message": "ipa-prop.c (ipa_check_stmt_modifications): Removed.\n\n2009-05-18  Martin Jambor  <mjambor@suse.cz>\n\n\t* ipa-prop.c (ipa_check_stmt_modifications): Removed.\n\t(visit_store_addr_for_mod_analysis): New function.\n\t(ipa_detect_param_modifications): Use walk_stmt_load_store_addr_ops.\n\t(determine_cst_member_ptr): Use gimple_assign_single_p.\n\t(ipa_get_stmt_member_ptr_load_param): Use gimple_assign_single_p.\n\t(ipa_analyze_call_uses): Use !gimple_assign_rhs2 rather than number of\n\toperands.  Don't check number of operands of a NOP_EXPR.\n\n\t* testsuite/gcc.dg/ipa/modif-1.c: Do not check for unmodified int\n\tparameter.\n\nFrom-SVN: r147645", "tree": {"sha": "40b1fc9afaab5a13214ff3c7d9843257e8c24f67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40b1fc9afaab5a13214ff3c7d9843257e8c24f67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b75fc9ba6acfe2e950442b0e0d03d20c3ac7c5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b75fc9ba6acfe2e950442b0e0d03d20c3ac7c5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b75fc9ba6acfe2e950442b0e0d03d20c3ac7c5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b75fc9ba6acfe2e950442b0e0d03d20c3ac7c5b/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f133d4a2aa3f48c733e61c0d3b8873e11dc7c620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f133d4a2aa3f48c733e61c0d3b8873e11dc7c620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f133d4a2aa3f48c733e61c0d3b8873e11dc7c620"}], "stats": {"total": 97, "additions": 40, "deletions": 57}, "files": [{"sha": "1aa8d0114e65332d732519670f7f8f4d9915741a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b75fc9ba6acfe2e950442b0e0d03d20c3ac7c5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b75fc9ba6acfe2e950442b0e0d03d20c3ac7c5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b75fc9ba6acfe2e950442b0e0d03d20c3ac7c5b", "patch": "@@ -1,3 +1,13 @@\n+2009-05-18  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-prop.c (ipa_check_stmt_modifications): Removed.\n+\t(visit_store_addr_for_mod_analysis): New function.\n+\t(ipa_detect_param_modifications): Use walk_stmt_load_store_addr_ops.\n+\t(determine_cst_member_ptr): Use gimple_assign_single_p.\n+\t(ipa_get_stmt_member_ptr_load_param): Use gimple_assign_single_p.\n+\t(ipa_analyze_call_uses): Use !gimple_assign_rhs2 rather than number of\n+\toperands.  Don't check number of operands of a NOP_EXPR.\n+\n 2009-05-18  Eric Fisher  <joefoxreal@gmail.com>\n \n \t* doc/tree-ssa.texi (SSA Operands): Fix a mistake."}, {"sha": "90889137208c3eac7fa1ccf48aec6db91e7e0e46", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 25, "deletions": 53, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b75fc9ba6acfe2e950442b0e0d03d20c3ac7c5b/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b75fc9ba6acfe2e950442b0e0d03d20c3ac7c5b/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=8b75fc9ba6acfe2e950442b0e0d03d20c3ac7c5b", "patch": "@@ -172,48 +172,30 @@ ipa_initialize_node_params (struct cgraph_node *node)\n     }\n }\n \n-/* Check STMT to detect whether a formal parameter is directly modified within\n-   STMT, the appropriate entry is updated in the modified flags of INFO.\n-   Directly means that this function does not check for modifications through\n-   pointers or escaping addresses because all TREE_ADDRESSABLE parameters are\n-   considered modified anyway.  */\n+/* Callback of walk_stmt_load_store_addr_ops for the visit_store and visit_addr\n+   parameters.  If OP is a parameter declaration, mark it as modified in the\n+   info structure passed in DATA.  */\n \n-static void\n-ipa_check_stmt_modifications (struct ipa_node_params *info, gimple stmt)\n+static bool\n+visit_store_addr_for_mod_analysis (gimple stmt ATTRIBUTE_UNUSED,\n+\t\t\t\t   tree op, void *data)\n {\n-  int j;\n-  int index;\n-  tree lhs;\n+  struct ipa_node_params *info = (struct ipa_node_params *) data;\n \n-  switch (gimple_code (stmt))\n+  if (TREE_CODE (op) == PARM_DECL)\n     {\n-    case GIMPLE_ASSIGN:\n-      lhs = gimple_assign_lhs (stmt);\n-\n-      while (handled_component_p (lhs))\n-\tlhs = TREE_OPERAND (lhs, 0);\n-      if (TREE_CODE (lhs) == SSA_NAME)\n-\tlhs = SSA_NAME_VAR (lhs);\n-      index = ipa_get_param_decl_index (info, lhs);\n-      if (index >= 0)\n-\tinfo->params[index].modified = true;\n-      break;\n-\n-    case GIMPLE_ASM:\n-      /* Asm code could modify any of the parameters.  */\n-      for (j = 0; j < ipa_get_param_count (info); j++)\n-\tinfo->params[j].modified = true;\n-      break;\n-\n-    default:\n-      break;\n+      int index = ipa_get_param_decl_index (info, op);\n+      gcc_assert (index >= 0);\n+      info->params[index].modified = true;\n     }\n+\n+  return false;\n }\n \n /* Compute which formal parameters of function associated with NODE are locally\n-   modified.  Parameters may be modified in NODE if they are TREE_ADDRESSABLE,\n-   if they appear on the left hand side of an assignment or if there is an\n-   ASM_EXPR in the function.  */\n+   modified or their address is taken.  Note that this does not apply on\n+   parameters with SSA names but those can and should be analyzed\n+   differently.  */\n \n void\n ipa_detect_param_modifications (struct cgraph_node *node)\n@@ -222,27 +204,17 @@ ipa_detect_param_modifications (struct cgraph_node *node)\n   basic_block bb;\n   struct function *func;\n   gimple_stmt_iterator gsi;\n-  gimple stmt;\n   struct ipa_node_params *info = IPA_NODE_REF (node);\n-  int i, count;\n \n   if (ipa_get_param_count (info) == 0 || info->modification_analysis_done)\n     return;\n \n   func = DECL_STRUCT_FUNCTION (decl);\n   FOR_EACH_BB_FN (bb, func)\n-    {\n-      for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n-\t{\n-\t  stmt = gsi_stmt (gsi);\n-\t  ipa_check_stmt_modifications (info, stmt);\n-\t}\n-    }\n-\n-  count = ipa_get_param_count (info);\n-  for (i = 0; i < count; i++)\n-    if (TREE_ADDRESSABLE (ipa_get_param (info, i)))\n-      info->params[i].modified = true;\n+    for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n+      walk_stmt_load_store_addr_ops (gsi_stmt (gsi), info, NULL,\n+\t\t\t\t     visit_store_addr_for_mod_analysis,\n+\t\t\t\t     visit_store_addr_for_mod_analysis);\n \n   info->modification_analysis_done = 1;\n }\n@@ -482,7 +454,7 @@ determine_cst_member_ptr (gimple call, tree arg, tree method_field,\n       gimple stmt = gsi_stmt (gsi);\n       tree lhs, rhs, fld;\n \n-      if (!is_gimple_assign (stmt) || gimple_num_ops (stmt) != 2)\n+      if (!gimple_assign_single_p (stmt))\n \treturn;\n \n       lhs = gimple_assign_lhs (stmt);\n@@ -617,7 +589,7 @@ ipa_get_stmt_member_ptr_load_param (gimple stmt)\n {\n   tree rhs;\n \n-  if (!is_gimple_assign (stmt) || gimple_num_ops (stmt) != 2)\n+  if (!gimple_assign_single_p (stmt))\n     return NULL_TREE;\n \n   rhs = gimple_assign_rhs1 (stmt);\n@@ -797,7 +769,7 @@ ipa_analyze_call_uses (struct ipa_node_params *info, gimple call)\n     return;\n \n   def = SSA_NAME_DEF_STMT (cond);\n-  if (!is_gimple_assign (def) || gimple_num_ops (def) != 3\n+  if (!is_gimple_assign (def)\n       || gimple_assign_rhs_code (def) != BIT_AND_EXPR\n       || !integer_onep (gimple_assign_rhs2 (def)))\n     return;\n@@ -808,8 +780,8 @@ ipa_analyze_call_uses (struct ipa_node_params *info, gimple call)\n \n   def = SSA_NAME_DEF_STMT (cond);\n \n-  if (is_gimple_assign (def) && gimple_num_ops (def) == 2\n-      && gimple_assign_rhs_code (def) == NOP_EXPR)\n+  if (is_gimple_assign (def)\n+      && CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def)))\n     {\n       cond = gimple_assign_rhs1 (def);\n       if (!ipa_is_ssa_with_stmt_def (cond))"}, {"sha": "545fb82aacf9f46d3a7e7eac718be45c6d8167ff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b75fc9ba6acfe2e950442b0e0d03d20c3ac7c5b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b75fc9ba6acfe2e950442b0e0d03d20c3ac7c5b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b75fc9ba6acfe2e950442b0e0d03d20c3ac7c5b", "patch": "@@ -1,3 +1,7 @@\n+2009-05-18  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* gcc.dg/ipa/modif-1.c: Do not check for unmodified int parameter.\n+\n 2009-05-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR c/40172"}, {"sha": "db6915a9d9e9e1b48e7059c08f04bcfc47e46e20", "filename": "gcc/testsuite/gcc.dg/ipa/modif-1.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b75fc9ba6acfe2e950442b0e0d03d20c3ac7c5b/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fmodif-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b75fc9ba6acfe2e950442b0e0d03d20c3ac7c5b/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fmodif-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fmodif-1.c?ref=8b75fc9ba6acfe2e950442b0e0d03d20c3ac7c5b", "patch": "@@ -15,20 +15,18 @@ void func4 (int *pi);\n \n void the_test (struct whatever u, struct whatever v,\n \t       struct whatever w, struct whatever x,\n-\t       int i, int j, int k, int l)\n+\t       int i, int k, int l)\n {\n   struct whatever *pw = &w;\n   int *pk = &k;\n \n-  j = l+3;\n   v.first = 9;\n \n   func1 (u);\n   func1 (v);\n   func2 (pw);\n   func2 (&x);\n   func3 (i);\n-  func3 (j);\n   func4 (pk);\n   func4 (&l);\n }\n@@ -40,5 +38,4 @@ void the_test (struct whatever u, struct whatever v,\n /* { dg-final { scan-ipa-dump-not \"param 4\\[^\\\\n\\]*modified\" \"inline\" } } */\n /* { dg-final { scan-ipa-dump \"param 5\\[^\\\\n\\]*modified\" \"inline\" } } */\n /* { dg-final { scan-ipa-dump \"param 6\\[^\\\\n\\]*modified\" \"inline\" } } */\n-/* { dg-final { scan-ipa-dump \"param 7\\[^\\\\n\\]*modified\" \"inline\" } } */\n /* { dg-final { cleanup-ipa-dump \"inline\" } } */"}]}