{"sha": "eea05d39c799880df753e9b74d2d96e86215c46e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVhMDVkMzljNzk5ODgwZGY3NTNlOWI3NGQyZDk2ZTg2MjE1YzQ2ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-04-20T17:53:58Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2008-04-20T17:53:58Z"}, "message": "tree-sra.c (sra_walk_expr): Disable scalarization if on the LHS and not a full access.\n\n\t* tree-sra.c (sra_walk_expr) <VIEW_CONVERT_EXPR>: Disable\n\tscalarization if on the LHS and not a full access.\n\nFrom-SVN: r134487", "tree": {"sha": "98b0d0bff7a59feed5c1d5ed59a8533ed0177b82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98b0d0bff7a59feed5c1d5ed59a8533ed0177b82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eea05d39c799880df753e9b74d2d96e86215c46e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea05d39c799880df753e9b74d2d96e86215c46e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eea05d39c799880df753e9b74d2d96e86215c46e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea05d39c799880df753e9b74d2d96e86215c46e/comments", "author": null, "committer": null, "parents": [{"sha": "e871a8730ae8bd2a50a47a6c87691078e2e7fff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e871a8730ae8bd2a50a47a6c87691078e2e7fff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e871a8730ae8bd2a50a47a6c87691078e2e7fff6"}], "stats": {"total": 29, "additions": 22, "deletions": 7}, "files": [{"sha": "a760e7ff4d5544449cb07676b101254d921c6587", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea05d39c799880df753e9b74d2d96e86215c46e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea05d39c799880df753e9b74d2d96e86215c46e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eea05d39c799880df753e9b74d2d96e86215c46e", "patch": "@@ -1,9 +1,14 @@\n+2008-04-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-sra.c (sra_walk_expr) <VIEW_CONVERT_EXPR>: Disable\n+\tscalarization if on the LHS and not a full access.\n+\n 2008-04-20  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n-\t* Makefile.in (s-gtyp-input): Remove tmp-gi.list before writing\n-\tit.\n+\t* Makefile.in (s-gtyp-input): Remove tmp-gi.list before writing it.\n \n 2008-04-18  Rafael Espindola  <espindola@google.com>\n+\n \t* tree-vrp.c (find_case_label_index): Fix the binary search.\n \t(find_case_label_range): New.\n \t(vrp_visit_switch_stmt): Use find_case_label_range."}, {"sha": "78a100f38d756fb29af44486f70581e48b0915ef", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea05d39c799880df753e9b74d2d96e86215c46e/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea05d39c799880df753e9b74d2d96e86215c46e/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=eea05d39c799880df753e9b74d2d96e86215c46e", "patch": "@@ -855,18 +855,28 @@ sra_walk_expr (tree *expr_p, block_stmt_iterator *bsi, bool is_output,\n \t    if (elt)\n \t      elt->is_vector_lhs = true;\n \t  }\n+\n \t/* A bit field reference (access to *multiple* fields simultaneously)\n-\t   is not currently scalarized.  Consider this an access to the\n-\t   complete outer element, to which walk_tree will bring us next.  */\n-\t  \n+\t   is not currently scalarized.  Consider this an access to the full\n+\t   outer element, to which walk_tree will bring us next.  */\n \tgoto use_all;\n \n-      case VIEW_CONVERT_EXPR:\n       case NOP_EXPR:\n-\t/* Similarly, a view/nop explicitly wants to look at an object in a\n+\t/* Similarly, a nop explicitly wants to look at an object in a\n \t   type other than the one we've scalarized.  */\n \tgoto use_all;\n \n+      case VIEW_CONVERT_EXPR:\n+\t/* Likewise for a view conversion, but with an additional twist:\n+\t   it can be on the LHS and, in this case, an access to the full\n+\t   outer element would mean a killing def.  So we need to punt\n+\t   if we haven't already a full access to the current element,\n+\t   because we cannot pretend to have a killing def if we only\n+\t   have a partial access at some level.  */\n+\tif (is_output && !use_all_p && inner != expr)\n+\t  disable_scalarization = true;\n+\tgoto use_all;\n+\n       case WITH_SIZE_EXPR:\n \t/* This is a transparent wrapper.  The entire inner expression really\n \t   is being used.  */"}]}