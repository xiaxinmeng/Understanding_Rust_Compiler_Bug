{"sha": "729e3d3f015075bf124a0104d6a6aada347806c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI5ZTNkM2YwMTUwNzViZjEyNGEwMTA0ZDZhNmFhZGEzNDc4MDZjMw==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-11-02T17:38:11Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-11-02T17:38:11Z"}, "message": "c_io_stdio.h: Correct grammar in comments.\n\n2001-11-02  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* config/io/c_io_stdio.h:  Correct grammar in comments.\n\t* docs/doxygen/Intro.3:  Expand \"top-level\" man page.\n\t* docs/doxygen/doxygroups.cc:  New module definitions (comments).\n\t* docs/doxygen/mainpage.doxy:  Tweaks.\n\t* docs/doxygen/run_doxygen:  Update Doxygen version, massage man pages.\n\n\tAdd @file hooks so that headers are considered to be documented.\n\t* include/bits/basic_ios.h, include/bits/basic_file.h,\n\tinclude/bits/basic_string.h, include/bits/boost_concept_check.h,\n\tinclude/bits/char_traits.h, include/bits/codecvt.h,\n\tinclude/bits/concept_check.h, include/bits/cpp_type_traits.h,\n\tinclude/bits/fpos.h, include/bits/gslice.h, include/bits/gslice_array.h,\n\tinclude/bits/indirect_array.h, include/bits/ios_base.h,\n\tinclude/bits/locale_facets.h, include/bits/localefwd.h,\n\tinclude/bits/mask_array.h, include/bits/pthread_allocimpl.h,\n\tinclude/bits/slice.h, include/bits/slice_array.h,\n\tinclude/bits/std_algorithm.h, include/bits/std_bitset.h,\n\tinclude/bits/std_complex.h, include/bits/std_deque.h,\n\tinclude/bits/std_fstream.h, include/bits/std_functional.h,\n\tinclude/bits/std_iomanip.h, include/bits/std_ios.h,\n\tinclude/bits/std_iosfwd.h, include/bits/std_iostream.h,\n\tinclude/bits/std_istream.h, include/bits/std_iterator.h,\n\tinclude/bits/std_limits.h, include/bits/std_list.h,\n\tinclude/bits/std_locale.h, include/bits/std_map.h,\n\tinclude/bits/std_memory.h, include/bits/std_numeric.h,\n\tinclude/bits/std_ostream.h, include/bits/std_queue.h,\n\tinclude/bits/std_set.h, include/bits/std_sstream.h,\n\tinclude/bits/std_stack.h, include/bits/std_streambuf.h,\n\tinclude/bits/std_string.h, include/bits/std_utility.h,\n\tinclude/bits/std_valarray.h, include/bits/std_vector.h,\n\tinclude/bits/stl_algo.h, include/bits/stl_alloc.h,\n\tinclude/bits/stl_bvector.h, include/bits/stl_construct.h,\n\tinclude/bits/stl_deque.h, include/bits/stl_heap.h,\n\tinclude/bits/stl_iterator.h, include/bits/stl_iterator_base_funcs.h,\n\tinclude/bits/stl_iterator_base_types.h, include/bits/stl_list.h,\n\tinclude/bits/stl_map.h, include/bits/stl_multimap.h,\n\tinclude/bits/stl_multiset.h, include/bits/stl_numeric.h,\n\tinclude/bits/stl_pair.h, include/bits/stl_pthread_alloc.h,\n\tinclude/bits/stl_queue.h, include/bits/stl_raw_storage_iter.h,\n\tinclude/bits/stl_relops.h, include/bits/stl_set.h,\n\tinclude/bits/stl_stack.h, include/bits/stl_tempbuf.h,\n\tinclude/bits/stl_threads.h, include/bits/stl_tree.h,\n\tinclude/bits/stl_uninitialized.h, include/bits/stl_vector.h,\n\tinclude/bits/stream_iterator.h, include/bits/streambuf_iterator.h,\n\tinclude/bits/stringfwd.h, include/bits/type_traits.h,\n\tinclude/bits/valarray_array.h, include/bits/valarray_meta.h:\n\tAdd hooks, tweak comments only.\n\n\t* include/bits/stl_algobase.h (swap, min, iter_swap):  Also\n\tdocument these functions.\n\t* include/bits/stl_function.h:  Tweak link comments.\n\nFrom-SVN: r46717", "tree": {"sha": "288f9707418359c2a233f91f787278ba31029f97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/288f9707418359c2a233f91f787278ba31029f97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/729e3d3f015075bf124a0104d6a6aada347806c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/729e3d3f015075bf124a0104d6a6aada347806c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/729e3d3f015075bf124a0104d6a6aada347806c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/729e3d3f015075bf124a0104d6a6aada347806c3/comments", "author": null, "committer": null, "parents": [{"sha": "93a787dc94fb4179e8d7f232014152a8fee10b21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93a787dc94fb4179e8d7f232014152a8fee10b21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93a787dc94fb4179e8d7f232014152a8fee10b21"}], "stats": {"total": 844, "additions": 695, "deletions": 149}, "files": [{"sha": "5ec4b8b192bc565e1ce9f9576c53e1c3c595323e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -1,3 +1,57 @@\n+2001-11-02  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* config/io/c_io_stdio.h:  Correct grammar in comments.\n+\t* docs/doxygen/Intro.3:  Expand \"top-level\" man page.\n+\t* docs/doxygen/doxygroups.cc:  New module definitions (comments).\n+\t* docs/doxygen/mainpage.doxy:  Tweaks.\n+\t* docs/doxygen/run_doxygen:  Update Doxygen version, massage man pages.\n+\n+\tAdd @file hooks so that headers are considered to be documented.\n+\t* include/bits/basic_ios.h, include/bits/basic_file.h,\n+\tinclude/bits/basic_string.h, include/bits/boost_concept_check.h,\n+\tinclude/bits/char_traits.h, include/bits/codecvt.h,\n+\tinclude/bits/concept_check.h, include/bits/cpp_type_traits.h,\n+\tinclude/bits/fpos.h, include/bits/gslice.h, include/bits/gslice_array.h,\n+\tinclude/bits/indirect_array.h, include/bits/ios_base.h,\n+\tinclude/bits/locale_facets.h, include/bits/localefwd.h,\n+\tinclude/bits/mask_array.h, include/bits/pthread_allocimpl.h,\n+\tinclude/bits/slice.h, include/bits/slice_array.h,\n+\tinclude/bits/std_algorithm.h, include/bits/std_bitset.h,\n+\tinclude/bits/std_complex.h, include/bits/std_deque.h,\n+\tinclude/bits/std_fstream.h, include/bits/std_functional.h,\n+\tinclude/bits/std_iomanip.h, include/bits/std_ios.h,\n+\tinclude/bits/std_iosfwd.h, include/bits/std_iostream.h,\n+\tinclude/bits/std_istream.h, include/bits/std_iterator.h,\n+\tinclude/bits/std_limits.h, include/bits/std_list.h,\n+\tinclude/bits/std_locale.h, include/bits/std_map.h,\n+\tinclude/bits/std_memory.h, include/bits/std_numeric.h,\n+\tinclude/bits/std_ostream.h, include/bits/std_queue.h,\n+\tinclude/bits/std_set.h, include/bits/std_sstream.h,\n+\tinclude/bits/std_stack.h, include/bits/std_streambuf.h,\n+\tinclude/bits/std_string.h, include/bits/std_utility.h,\n+\tinclude/bits/std_valarray.h, include/bits/std_vector.h,\n+\tinclude/bits/stl_algo.h, include/bits/stl_alloc.h,\n+\tinclude/bits/stl_bvector.h, include/bits/stl_construct.h,\n+\tinclude/bits/stl_deque.h, include/bits/stl_heap.h,\n+\tinclude/bits/stl_iterator.h, include/bits/stl_iterator_base_funcs.h,\n+\tinclude/bits/stl_iterator_base_types.h, include/bits/stl_list.h,\n+\tinclude/bits/stl_map.h, include/bits/stl_multimap.h,\n+\tinclude/bits/stl_multiset.h, include/bits/stl_numeric.h,\n+\tinclude/bits/stl_pair.h, include/bits/stl_pthread_alloc.h,\n+\tinclude/bits/stl_queue.h, include/bits/stl_raw_storage_iter.h,\n+\tinclude/bits/stl_relops.h, include/bits/stl_set.h,\n+\tinclude/bits/stl_stack.h, include/bits/stl_tempbuf.h,\n+\tinclude/bits/stl_threads.h, include/bits/stl_tree.h,\n+\tinclude/bits/stl_uninitialized.h, include/bits/stl_vector.h,\n+\tinclude/bits/stream_iterator.h, include/bits/streambuf_iterator.h,\n+\tinclude/bits/stringfwd.h, include/bits/type_traits.h,\n+\tinclude/bits/valarray_array.h, include/bits/valarray_meta.h:\n+\tAdd hooks, tweak comments only.\n+\n+\t* include/bits/stl_algobase.h (swap, min, iter_swap):  Also\n+\tdocument these functions.\n+\t* include/bits/stl_function.h:  Tweak link comments.\n+\n 2001-11-01  Paolo Carlini  <pcarlini@unitus.it>\n \t    Benjamin Kosnik  <bkoz@redhat.com>\n \t"}, {"sha": "c9ef09ae3cfcff278bd3de163b24edffdc93ff60", "filename": "libstdc++-v3/config/io/c_io_stdio.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fc_io_stdio.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -38,7 +38,7 @@\n \n namespace std \n {\n-// from fpos.h\n+// for fpos.h\n   typedef long  \tstreamoff;\n   typedef ptrdiff_t\tstreamsize; // Signed integral type\n #if _GLIBCPP_USE_WCHAR_T\n@@ -48,11 +48,11 @@ namespace std\n \n   typedef __gthread_mutex_t __c_lock;\n \n-// from basic_file.h\n+// for basic_file.h\n #define _GLIBCPP_BASIC_FILE_ENCAPSULATION 1\n   typedef FILE __c_file_type;\n \n-// from ios_base.h\n+// for ios_base.h\n   struct __ios_flags\n   {\n     typedef short __int_type;"}, {"sha": "6f4f3a5985897084b683c9b90ce7a3e5b656aedd", "filename": "libstdc++-v3/docs/doxygen/Intro.3", "status": "modified", "additions": 115, "deletions": 8, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FIntro.3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FIntro.3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2FIntro.3?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -1,15 +1,122 @@\n+.\\\" t\n .\\\" This man page is released under the FDL as part of libstdc++-v3.\n .TH Intro 3 \"27 September 2001\" \"GNU libstdc++-v3\" \"Standard C++ Library\"\n .SH NAME\n Intro \\- Introduction to the GNU libstdc++-v3 man pages\n .SH DESCRIPTION\n-\n-This should mention the man pages generated for modules.\n-\n+This man page serves as a brief introduction to the GNU implementation of\n+the Standard C++ Library.  For a better introduction and more complete\n+documentation, see the\n+.B libstdc++-v3\n+homepage listed at the end.\n+.P\n+All standard library entities are declared within\n+.I namespace std\n+and have manual entries beginning with \"std_\".  For example, to see\n+documentation of the template class\n+.I std::vector\n+one would use \"man std_vector\".\n+.P\n+All the man pages are automatically generated by Doxygen.  For more\n+information on this tool, see the HTML counterpart to these man pages.\n+.P\n+Some man pages do not correspond to individual classes or functions.  Rather\n+they describe categories of the Standard Library.  (For a more thourough\n+introduction to the various categories, consult a textbook such as Josuttis'\n+or Austern's.)  These category pages are:\n+.P\n+.\\\" These are separated by ONE TAB.  Nothing else.  I don't like it either.\n+.TS\n+lB l.\n+Arithmetic_functors\tFunctors for basic math.\n+Assoc_containers\tKey-based containers.\n+Binder_functors\tFunctors which \"remember\" an argument.\n+Comparison_functors\tFunctors wrapping built-in comparisons.\n+Containers\tAn introduction to container classes.\n+Func_ptr_functors\tFunctors for use with pointers to functions.\n+Intro\tThis page.\n+Intro_functors\tAn introduction to function objects, or functors.\n+Logical_functors\tFunctors wrapping the Boolean operations.\n+Member_ptr_functor\tFunctors for use with pointers to members.\n+Namespace_Std\tA listing of the contents of std::.\n+Negation_functors\tFunctors which negate their contents.\n+SGIextensions\tA list of the extensions from the SGI STL subset.\n+Sequences\tLinear containers.\n+.TE\n+.P\n+The HTML documentation goes into more depth.\n .SH FILES\n-\n-Lots.  Wish I knew enough *roff syntax to list them nicely.\n-\n+Lots!\n+.SS Standard Headers\n+These headers will be found automatically, unless you instruct the compiler\n+otherwise.\n+.TS\n+lB lB lB lB.\n+<algorithm>  <csignal>     <iomanip>   <ostream>\n+<bitset>     <cstdarg>     <ios>       <queue>\n+<cassert>    <cstddef>     <iosfwd>    <set>\n+<cctype>     <cstdio>      <iostream>  <sstream>\n+<cerrno>     <cstdlib>     <istream>   <stack>\n+<cfloat>     <cstring>     <iterator>  <stdexcept>\n+<ciso>646    <ctime>       <limits>    <streambuf>\n+<climits>    <cwchar>      <list>      <string>\n+<clocale>    <cwctype>     <locale>    <utility>\n+<cmath>      <deque>       <map>       <valarray>\n+<complex>    <fstream>     <memory>    <vector>\n+<csetjmp>    <functional>  <numeric>\n+.TE\n+.SS Backwards-Compatability Headers\n+For GCC 3.0 these headers will be found automatically, unless you instruct\n+the compiler otherwise.  You should not depend on this, instead you should\n+read FAQ 5.4 and use a\n+.B backward/\n+prefix.\n+.TS\n+lB lB lB lB.\n+<algo.h>      <hash_map.h>   <map.h>       <slist.h>\n+<algobase.h>  <hash_set.h>   <multimap.h>  <stack.h>\n+<alloc.h>     <hashtable.h>  <multiset.h>  <stream.h>\n+<bvector.h>   <heap.h>       <new.h>       <streambuf.h>\n+<complex.h>   <iomanip.h>    <ostream.h>   <strstream>\n+<defalloc.h>  <iostream.h>   <pair.h>      <strstream.h>\n+<deque.h>     <istream.h>    <queue.h>     <tempbuf.h>\n+<fstream.h>   <iterator.h>   <rope.h>      <tree.h>\n+<function.h>  <list.h>       <set.h>       <vector.h>\n+.TE\n+.SS Extension Headers\n+These headers will only be found automatically if you include the leading\n+.B ext/\n+in the name.  Otherwise you need to read FAQ 5.4.\n+.TS\n+lB.\n+<ext/hash_map>\n+<ext/hash_set>\n+<ext/rope>\n+<ext/slist>\n+.TE\n+.SS Libraries\n+.TP\n+.I libstdc++.a\n+The library implementation in static archive form.  If you did not configure\n+libstdc++-v3 to use shared libraries, this will always be used.  Otherwise\n+it will only be used if the user requests it.\n+.TP\n+.I libsupc++.a\n+This library contains C++ language support routines.  Usually you will never\n+need to know about it, but it can be useful.  See FAQ 2.5.\n+.TP\n+.I libstdc++.so[.N]\n+The library implementation in shared object form.  This will be used in\n+preference to the static archive form by default.  Currently N will either\n+start with 3 or with 4, but your system vendor may change the name as they\n+see fit.  If N is in the 2.x series, then you are looking at the old\n+libstdc++-v2 library, which we do not maintain.\n+.TP\n+.I libstdc++.la\n+.TP\n+.I libsupc++.la\n+These are Libtool library files, and should only be used when working with\n+that tool.\n .SH CONFORMING TO\n Almost conforming to\n .BI \"International Standard ISO/IEC 14882:1998(E), \" \"Programming Languages --- C++\"\n@@ -20,5 +127,5 @@ Working Group,\n .UR\n http://gcc.gnu.org/libstdc++/\n .UE\n-for the Frequently Asked Questions, online documentation, and more.\n-\n+for the Frequently Asked Questions, online documentation, and much, much more!\n+.\\\" vim:ts=8:noet:"}, {"sha": "72e5ef3b8a37a3dd0091af830b87e137d84625ba", "filename": "libstdc++-v3/docs/doxygen/doxygroups.cc", "status": "modified", "additions": 77, "deletions": 16, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fdoxygroups.cc?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -3,22 +3,83 @@\n // source headers themselves.  It is a \".cc\" file for the sole cheesy reason\n // that it triggers many different text editors into doing Nice Things when\n // typing comments.  However, it is mentioned nowhere except the *cfg.in files.\n+// Pieces separated by '// //' lines will usually not be presented to the\n+// user on the same page.\n \n-/** @addtogroup SGIextensions\n- *\n- *  Because libstdc++-v3 based its implementation of the STL subsections of\n- *  the library on the SGI 3.3 implementation, we inherited their extensions\n- *  as well.\n- *\n- *  They are additionally documented in the\n- *  <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/documentation.html\">\n- *  online documentation</a>, a copy of which is also shipped with the\n- *  library source code (in .../docs/html/documentation.html).  You can also\n- *  read the documentation <a href=\"http://www.sgi.com/tech/stl/\">on SGI's\n- *  site</a>, which is still running even though the code is not maintained.\n- *\n- *  <strong>NB</strong> that the following notes are pulled from various\n- *  comments all over the place, so they may seem stilted.\n- *  <hr>\n+// // // // // // // // // // // // // // // // // // // // // // // //\n+/** @addtogroup SGIextensions STL extensions from SGI\n+Because libstdc++-v3 based its implementation of the STL subsections of\n+the library on the SGI 3.3 implementation, we inherited their extensions\n+as well.\n+\n+They are additionally documented in the\n+<a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/documentation.html\">\n+online documentation</a>, a copy of which is also shipped with the\n+library source code (in .../docs/html/documentation.html).  You can also\n+read the documentation <a href=\"http://www.sgi.com/tech/stl/\">on SGI's\n+site</a>, which is still running even though the code is not maintained.\n+\n+<strong>NB</strong> that the following notes are pulled from various\n+comments all over the place, so they may seem stilted.\n+<hr>\n+*/\n+\n+// // // // // // // // // // // // // // // // // // // // // // // //\n+// This is standalone because, unlike the functor introduction, there is no\n+// single header file which serves as a base \"all containers must include\n+// this header\".  We do some quoting of 14882 here.\n+/** @addtogroup Containers Containers\n+Containers are collections of objects.\n+\n+A container may hold any type which meets certain requirements, but the type\n+of contained object is chosen at compile time, and all objects in a given\n+container must be of the same type.  (Polymorphism is possible by declaring a\n+container of pointers to a base class and then populating it with pointers to\n+instances of derived classes.  Variant value types such as the @c any class\n+from <a href=\"http://www.boost.org/\">Boost</a> can also be used.\n+\n+All contained types must be @c Assignable and @c CopyConstructible.\n+Specific containers may place additional requirements on the types of\n+their contained objects.\n+\n+Containers manage memory allocation and deallocation themselves when\n+storing your objects.  The objects are destroyed when the container is\n+itself destroyed.  Note that if you are storing pointers in a container,\n+@c delete is @e not automatically called on the pointers before destroying them.\n+\n+All containers must meet certain requirements.  They would be listed here\n+except I'm not certain how much of 14882 can be reproduced without a\n+copyright violation.  Reproducing Tables 65 through 69 is a lot of typing...\n+\n+The standard containers are further refined into\n+@link Sequences Sequences@endlink and\n+@link Assoc_containers Associative Containers@endlink.\n */\n \n+/** @addtogroup Sequences Sequences\n+Sequences arrange a collection of objects into a strictly linear order.\n+\n+The differences between sequences are usually due to one or both of the\n+following:\n+  - memory management\n+  - algorithmic complexity\n+\n+As an example of the first case, @c vector is required to use a contiguous\n+memory layout, while other sequences such as @c deque are not.\n+\n+The prime reason for chosing one sequence over another should be based on\n+the second category of differences, algorithmic complexity.  For example, if\n+you need to perform many inserts and removals from the middle of a sequence,\n+@c list would be ideal.  But if you need to perform constant-time access to\n+random elements of the sequence, then @c list should not be used.\n+*/\n+\n+/** @addtogroup Assoc_containers Associative Containers\n+Associative containers allow fast retrieval of data based on keys.\n+\n+Each container type is parameterized on a @c Key type, and an ordering\n+relation used to sort the elements of the container.\n+*/\n+\n+// // // // // // // // // // // // // // // // // // // // // // // //\n+"}, {"sha": "467f5ff3d8683a5d9c3d751b6687ebcfc604bed1", "filename": "libstdc++-v3/docs/doxygen/mainpage.doxy", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fmainpage.doxy", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fmainpage.doxy", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Fmainpage.doxy?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -17,13 +17,14 @@\n     <li><a href=\"annotated.html\">Compound List</a>\n     <li><a href=\"classes.html\">Alphabetical List</a>\n     <li><a href=\"files.html\">File List</a>\n-    <!-- Will be useful, but not yet. <li><a href=\"modules.html\">Modules</a> -->\n+    <li><a href=\"modules.html\">Modules</a>\n    </ul>\n </p>\n \n <h2> Generating this file </h2>\n-<p>This page is automatically generated.  The Makefile rule <code> make\n-   doxygen </code> in the libstdc++-v3 build directory generates these pages\n+<p>These HTML pages are automatically generated, along with the man pages.\n+   The Makefile rule <code> 'make\n+   doxygen' </code> in the libstdc++-v3 build directory generates these pages\n    using a tool called, appropriately enough, Doxygen.  To learn more about\n    Doxygen, take a look at <a href=\"http://www.doxygen.org\">the Doxygen\n    webpage</a>."}, {"sha": "4563f925942b06b7e56d63766fc6bff119c0642d", "filename": "libstdc++-v3/docs/doxygen/run_doxygen", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Frun_doxygen", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Frun_doxygen", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Frun_doxygen?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -8,7 +8,7 @@\n \n \n # We can check now that the version of doxygen is >= this variable.\n-DOXYVER=1.2.6\n+DOXYVER=1.2.10\n doxygen=\n \n find_doxygen() {\n@@ -126,14 +126,11 @@ chmod u+w $outdir\n # man pages for doxygen modules need to be renamed (or deleted).  And the\n # generated #include lines need to be changed from the internal names to the\n # standard ones (e.g., \"#include <stl_tempbuf.h>\" -> \"#include <memory>\").\n-#\n-# File names with embedded spaces (EVIL!) need to be....?  renamed or removed?\n cd $outdir/man/man3 && {\n echo :: Fixing up the man pages...\n \n-# requires GNU tools\n-find . -name \"* *\" -print0 | xargs -0 rm\n-rm *.h.3\n+# File names with embedded spaces (EVIL!) need to be....?  renamed or removed?\n+find . -name \"* *\" -print0 | xargs -0 rm        # requires GNU tools\n \n # can leave SGIextensions.3 alone, it's an okay name\n mv s20_3_1_base.3           Intro_functors.3\n@@ -144,6 +141,11 @@ mv s20_3_5_negators.3       Negation_functors.3\n mv s20_3_6_binder.3         Binder_functors.3\n mv s20_3_7_adaptors.3       Func_ptr_functors.3\n mv s20_3_8_memadaptors.3    Member_ptr_functors.3\n+mv std.3                    Namespace_Std.3\n+\n+# man pages are for functions/types/other entities, not source files directly\n+find . -name \"[a-z]*\" -a ! -name \"std_*\" -print | xargs rm\n+rm -f *.h.3 *config* *.cc.3 *.tcc.3\n \n # Standardize the displayed header names.  If anyone who knows perl cares\n # enough to rewrite all this, feel free.  This only gets run once a century,"}, {"sha": "e7c220a3801ee765a0262f5c86b8279012484c6d", "filename": "libstdc++-v3/include/bits/basic_file.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_file.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -31,6 +31,11 @@\n // ISO C++ 14882: 27.8  File-based streams\n //\n \n+/** @file basic_file.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BASIC_FILE\n #define _CPP_BASIC_FILE\t\t1\n \n@@ -121,7 +126,9 @@ namespace std\n #endif\n     {\n #if _GLIBCPP_BASIC_FILE_ENCAPSULATION\n+      // underlying data source/sink\n       __c_file_type* \t_M_cfile;\n+      // true iff we opened _M_cfile, and thus must close it ourselves\n       bool \t\t_M_cfile_created;\n #else\n # ifdef _GLIBCPP_USE_WCHAR_T\n@@ -142,8 +149,10 @@ namespace std\n \n       // Used for opening the standard streams, cin, cout, cerr, clog,\n       // and their wide-stream equivalents. Instead of calling open, it\n-      // just sets __c_file_type->_fileno and the respective _flags bits, and\n-      // returns.\n+      // just sets\n+      //  - for libio:  __c_file_type->_fileno and the respective _flags bits\n+      //  - for stdio:  _M_cfile = __file and some internal flags\n+      // and returns.\n       __basic_file*\n       sys_open(__c_file_type* __file, ios_base::openmode __mode);\n "}, {"sha": "cc393aaf311e7388e7735f3c02a073d516a260d4", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -27,6 +27,11 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file basic_ios.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_BASICIOS_H\n #define _CPP_BITS_BASICIOS_H 1\n "}, {"sha": "37a30af7ca48f3aa0a133259b42cca30d8c8392b", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -31,6 +31,11 @@\n // ISO C++ 14882: 21 Strings library\n //\n \n+/** @file basic_string.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_STRING_H\n #define _CPP_BITS_STRING_H\t1\n "}, {"sha": "b4f0d06f12e4c5c0da708f231e0f815fb111acbc", "filename": "libstdc++-v3/include/bits/boost_concept_check.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fboost_concept_check.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -7,6 +7,12 @@\n //\n \n // GCC Note:  based on version 1.12.0 of the Boost library.\n+\n+/** @file boost_concept_check.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _GLIBCPP_BOOST_CONCEPT_CHECK\n #define _GLIBCPP_BOOST_CONCEPT_CHECK 1\n "}, {"sha": "710e0eb6a534a5d56356e51eb8c4f64bbbab8b6d", "filename": "libstdc++-v3/include/bits/char_traits.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchar_traits.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -31,6 +31,11 @@\n // ISO C++ 14882: 21  Strings library\n //\n \n+/** @file char_traits.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_CHAR_TRAITS_H\n #define _CPP_BITS_CHAR_TRAITS_H 1\n "}, {"sha": "506752f3432c12fd234b9401eeb93d61a70a10b6", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -31,10 +31,13 @@\n // ISO C++ 14882: 22.2.1.5 Template class codecvt\n //\n \n-// Warning: this file is not meant for user inclusion.  Use <locale>.\n-\n // Written by Benjamin Kosnik <bkoz@cygnus.com>\n \n+/** @file codecvt.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_CODECVT_H\n #define _CPP_BITS_CODECVT_H\t1\n "}, {"sha": "92ceefbd685e0d55bf3dab8bfea7730fed318451", "filename": "libstdc++-v3/include/bits/concept_check.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fconcept_check.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -27,6 +27,11 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file concept_check.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _GLIBCPP_CONCEPT_CHECK\n #define _GLIBCPP_CONCEPT_CHECK 1\n "}, {"sha": "693fc91a627a15701e1e9d26e6332c760535c86f", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -29,6 +29,11 @@\n \n // Written by Gabriel Dos Reis <dosreis@cmla.ens-cachan.fr>\n \n+/** @file cpp_type_traits.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_CPP_TYPE_TRAITS_H\n #define _CPP_BITS_CPP_TYPE_TRAITS_H 1\n "}, {"sha": "119fbe7f528761beecfd9d260cd3b20fc0e7bd8f", "filename": "libstdc++-v3/include/bits/fpos.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffpos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffpos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffpos.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -31,6 +31,11 @@\n // ISO C++ 14882: 27 Input/output library\n //\n \n+/** @file fpos.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_FPOS_H\n #define _CPP_BITS_FPOS_H 1\n "}, {"sha": "58a36fb174d41be71268dff9098bcb001babf982", "filename": "libstdc++-v3/include/bits/gslice.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -29,6 +29,11 @@\n \n // Written by Gabriel Dos Reis <Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>\n \n+/** @file gslice.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_GSLICE_H\n #define _CPP_BITS_GSLICE_H 1\n "}, {"sha": "eca541e636ec503810ecaa73abb97d852f70ce4a", "filename": "libstdc++-v3/include/bits/gslice_array.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fgslice_array.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -29,6 +29,11 @@\n \n // Written by Gabriel Dos Reis <Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>\n \n+/** @file gslice_array.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_GSLICE_ARRAY\n #define _CPP_BITS_GSLICE_ARRAY 1\n "}, {"sha": "d928258cd15c533aa740f74483bab48ab04e6f8b", "filename": "libstdc++-v3/include/bits/indirect_array.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Findirect_array.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -29,6 +29,11 @@\n \n // Written by Gabriel Dos Reis <Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>\n \n+/** @file indirect_array.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_INDIRECT_ARRAY_H\n #define _CPP_BITS_INDIRECT_ARRAY_H 1\n "}, {"sha": "bf9fe693199c76eb4ff00f644f202a5e15abae72", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -31,6 +31,11 @@\n // ISO C++ 14882: 27.8  File-based streams\n //\n \n+/** @file ios_base.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_IOSBASE_H\n #define _CPP_BITS_IOSBASE_H 1\n "}, {"sha": "94f607ac9c0831da18138c74f6d820f8ee3fd198", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -31,7 +31,10 @@\n // ISO C++ 14882: 22.1  Locales\n //\n \n-// Warning: this file is not meant for user inclusion.  Use <locale>.\n+/** @file locale_facets.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n \n #ifndef _CPP_BITS_LOCFACETS_H\n #define _CPP_BITS_LOCFACETS_H\t1"}, {"sha": "af48b600c0fe3572b73a8ad55fd976acf357c37a", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -31,6 +31,11 @@\n // ISO C++ 14882: 22.1  Locales\n //\n \n+/** @file localefwd.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_LOCCORE_H\n #define _CPP_BITS_LOCCORE_H\t1\n "}, {"sha": "13c01d3cc226e70d8abbf5660af084cf0fc064c7", "filename": "libstdc++-v3/include/bits/mask_array.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fmask_array.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -29,6 +29,11 @@\n \n // Written by Gabriel Dos Reis <Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>\n \n+/** @file mask_array.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_MASK_ARRAY_H\n #define _CPP_BITS_MASK_ARRAY_H 1\n "}, {"sha": "ca0f980fbf4fbd3f48810b5afec92685abc7c70c", "filename": "libstdc++-v3/include/bits/pthread_allocimpl.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpthread_allocimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpthread_allocimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpthread_allocimpl.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -40,6 +40,11 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n+/** @file pthread_allocimpl.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_PTHREAD_ALLOCIMPL_H\n #define _CPP_BITS_PTHREAD_ALLOCIMPL_H 1\n "}, {"sha": "d3da664f8d1aa31ff08799097f9a0dbf03d00362", "filename": "libstdc++-v3/include/bits/slice.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -29,6 +29,11 @@\n \n // Written by Gabriel Dos Reis <Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>\n \n+/** @file slice.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_SLICE_H\n #define _CPP_BITS_SLICE_H 1\n "}, {"sha": "4e82cebf82dec7b0ccaa13b43dcf2d11129a3dca", "filename": "libstdc++-v3/include/bits/slice_array.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fslice_array.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -29,6 +29,11 @@\n \n // Written by Gabriel Dos Reis <Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>\n \n+/** @file slice_array.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_SLICE_ARRAY_H\n #define _CPP_BITS_SLICE_ARRAY_H 1\n "}, {"sha": "746eb47541b415b6a9c7769e560a3961524438ab", "filename": "libstdc++-v3/include/bits/std_algorithm.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_algorithm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_algorithm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_algorithm.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,6 +53,11 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n+/** @file std_algorithm.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_ALGORITHM\n #define _CPP_ALGORITHM 1\n "}, {"sha": "14b5051e456a0cf7407a6085f969648a94c21784", "filename": "libstdc++-v3/include/bits/std_bitset.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_bitset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_bitset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_bitset.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -40,6 +40,11 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */ \n \n+/** @file std_bitset.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef __SGI_STL_BITSET\n #define __SGI_STL_BITSET\n "}, {"sha": "d07a6b791df9e62afb9a11d104671af7e7803007", "filename": "libstdc++-v3/include/bits/std_complex.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_complex.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -34,6 +34,11 @@\n // Improved by Gabriel Dos Reis <dosreis@cmla.ens-cachan.fr>\n //\n \n+/** @file std_complex.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_COMPLEX\n #define _CPP_COMPLEX\t1\n "}, {"sha": "394eef3b8457859d522297e579fd066acb4f5f60", "filename": "libstdc++-v3/include/bits/std_deque.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_deque.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,6 +53,11 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n+/** @file std_deque.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_DEQUE\n #define _CPP_DEQUE 1\n "}, {"sha": "52c62d4b1989f6158b1e0174fbf2097ff90caf50", "filename": "libstdc++-v3/include/bits/std_fstream.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -31,6 +31,11 @@\n // ISO C++ 14882: 27.8  File-based streams\n //\n \n+/** @file std_fstream.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_FSTREAM\n #define _CPP_FSTREAM\t1\n "}, {"sha": "82863cc3e3c9ddb574d663c1fa62c9efe1fc7a63", "filename": "libstdc++-v3/include/bits/std_functional.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_functional.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_functional.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_functional.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -41,6 +41,11 @@\n  *\n  */\n \n+/** @file std_functional.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_FUNCTIONAL\n #define _CPP_FUNCTIONAL 1\n "}, {"sha": "3d296b56ba2e6f4889a6e9d38122c0f6d46c0c93", "filename": "libstdc++-v3/include/bits/std_iomanip.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iomanip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iomanip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iomanip.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -31,6 +31,11 @@\n // ISO C++ 14882: 27.6.3  Standard manipulators\n //\n \n+/** @file std_iomanip.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_IOMANIP\n #define _CPP_IOMANIP 1\n "}, {"sha": "dfd041f811f7a89204cbd3ccce8decc60ec3c257", "filename": "libstdc++-v3/include/bits/std_ios.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ios.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -31,6 +31,11 @@\n // ISO C++ 14882: 27.4  Iostreams base classes\n //\n \n+/** @file std_ios.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_IOS\n #define _CPP_IOS\t1\n "}, {"sha": "93c30b3fbf41450f02e202b14a369ff4ec8f9cf8", "filename": "libstdc++-v3/include/bits/std_iosfwd.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iosfwd.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -31,6 +31,11 @@\n // ISO C++ 14882: 27.2  Forward declarations\n //\n \n+/** @file std_iosfwd.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_IOSFWD\n #define _CPP_IOSFWD 1\n "}, {"sha": "32893fa55cc4cf5273ed946d2e4551c88ea064bc", "filename": "libstdc++-v3/include/bits/std_iostream.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iostream.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -31,6 +31,11 @@\n // ISO C++ 14882: 27.3  Standard iostream objects\n //\n \n+/** @file std_iostream.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_IOSTREAM\n #define _CPP_IOSTREAM\t1\n "}, {"sha": "3f690d7870e483614c76fe19ecf0837f90dc5938", "filename": "libstdc++-v3/include/bits/std_istream.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_istream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_istream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_istream.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -31,6 +31,11 @@\n // ISO C++ 14882: 27.6.1  Input streams\n //\n \n+/** @file std_istream.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_ISTREAM\n #define _CPP_ISTREAM\t1\n "}, {"sha": "3e3541c60893b89b0cb6ad21ace1cf6556e06908", "filename": "libstdc++-v3/include/bits/std_iterator.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iterator.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,6 +53,11 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n+/** @file std_iterator.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_ITERATOR\n #define _CPP_ITERATOR 1\n "}, {"sha": "74184e3b9343512801a94865088a99727b30f81e", "filename": "libstdc++-v3/include/bits/std_limits.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_limits.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -35,6 +35,11 @@\n // 18.2.1\n //\n \n+/** @file std_limits.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_NUMERIC_LIMITS\n #define _CPP_NUMERIC_LIMITS 1\n "}, {"sha": "683e0a7e66dbbcdc0d7d1184017294f549cb3959", "filename": "libstdc++-v3/include/bits/std_list.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_list.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,6 +53,11 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n+/** @file std_list.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_LIST\n #define _CPP_LIST 1\n "}, {"sha": "82089d015397c75eef08204ce96173effa03da2b", "filename": "libstdc++-v3/include/bits/std_locale.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_locale.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -31,6 +31,11 @@\n // ISO C++ 14882: 22.1  Locales\n //\n \n+/** @file std_locale.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_LOCALE\n #define _CPP_LOCALE\t1\n "}, {"sha": "0dd38bfafd383ada5eea289337928a29ca7aacab", "filename": "libstdc++-v3/include/bits/std_map.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_map.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,6 +53,11 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n+/** @file std_map.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_MAP\n #define _CPP_MAP 1\n "}, {"sha": "d0b369653840cffcfba75963cd4df95db6d20840", "filename": "libstdc++-v3/include/bits/std_memory.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_memory.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_memory.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_memory.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -41,6 +41,11 @@\n  *\n  */\n \n+/** @file std_memory.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_MEMORY\n #define _CPP_MEMORY 1\n "}, {"sha": "097c9c35b4b7b6383862e819e993691f47727667", "filename": "libstdc++-v3/include/bits/std_numeric.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_numeric.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,6 +53,11 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n+/** @file std_numeric.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_NUMERIC\n #define _CPP_NUMERIC 1\n "}, {"sha": "c1c79db7fb05e6a61a1f543791b60f3c16820ac3", "filename": "libstdc++-v3/include/bits/std_ostream.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ostream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ostream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ostream.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -31,6 +31,11 @@\n // ISO C++ 14882: 27.6.2  Output streams\n //\n \n+/** @file std_ostream.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_OSTREAM\n #define _CPP_OSTREAM\t1\n "}, {"sha": "ecf7f4c135d9e54df1ef9dabc0746b8594ab660f", "filename": "libstdc++-v3/include/bits/std_queue.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_queue.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,6 +53,11 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n+/** @file std_queue.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_QUEUE\n #define _CPP_QUEUE 1\n "}, {"sha": "dab8e71af5b760e4ded94308bdcf0171d6c1e399", "filename": "libstdc++-v3/include/bits/std_set.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_set.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,6 +53,11 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n+/** @file std_set.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_SET\n #define _CPP_SET 1\n "}, {"sha": "1b8d5eff9472f6b4e5dc8a4dc0742b96615d4b09", "filename": "libstdc++-v3/include/bits/std_sstream.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_sstream.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -31,6 +31,11 @@\n // ISO C++ 14882: 27.7  String-based streams\n //\n \n+/** @file std_sstream.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_SSTREAM\n #define _CPP_SSTREAM\t1\n "}, {"sha": "166f428bf85566313dbef8e27d8151ff5ccfea44", "filename": "libstdc++-v3/include/bits/std_stack.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_stack.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,6 +53,11 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n+/** @file std_stack.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_STACK\n #define _CPP_STACK 1\n "}, {"sha": "8ef20ff4cfb4f1948ecd0c50ead10bbfe47017cc", "filename": "libstdc++-v3/include/bits/std_streambuf.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -31,6 +31,11 @@\n // ISO C++ 14882: 27.5  Stream buffers\n //\n \n+/** @file std_streambuf.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_STREAMBUF\n #define _CPP_STREAMBUF\t1\n \n@@ -95,7 +100,7 @@ namespace std\n       // the same place.  True for fstreams, false for sstreams.\n       bool \t\t\t_M_buf_unified;\t\n \n-       // This is based on _IO_FILE, just reordered to be more\n+      // This is based on _IO_FILE, just reordered to be more\n       // consistent, and is intended to be the most minimal abstraction\n       // for an internal buffer.\n       // get == input == read"}, {"sha": "09347a9b26d5e5d0b1432b9616f2ff0669026b51", "filename": "libstdc++-v3/include/bits/std_string.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_string.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -31,6 +31,11 @@\n // ISO C++ 14882: 21  Strings library\n //\n \n+/** @file std_string.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_STRING\n #define _CPP_STRING\t1\n "}, {"sha": "5917c833818159d07fcd640839a05389a54f0185", "filename": "libstdc++-v3/include/bits/std_utility.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_utility.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_utility.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_utility.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,6 +53,11 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n+/** @file std_utility.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_UTILITY\n #define _CPP_UTILITY 1\n "}, {"sha": "5f4c112f8e989da5c90c70151594b5511833dce0", "filename": "libstdc++-v3/include/bits/std_valarray.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_valarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_valarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_valarray.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -29,6 +29,11 @@\n \n // Written by Gabriel Dos Reis <Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>\n \n+/** @file std_valarray.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_VALARRAY\n #define _CPP_VALARRAY 1\n "}, {"sha": "995daec7249f483616f073f61a3226d6f7f7dabf", "filename": "libstdc++-v3/include/bits/std_vector.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_vector.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,6 +53,11 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n+/** @file std_vector.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_VECTOR\n #define _CPP_VECTOR 1\n "}, {"sha": "c909f11a890be52a857cc8841ee15b41684e2b56", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,8 +53,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_algo.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef __SGI_STL_INTERNAL_ALGO_H"}, {"sha": "a26a8b59de59b4d8e5713e4a5072092d5a7e677c", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,11 +53,11 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_algobase.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n-\n #ifndef __SGI_STL_INTERNAL_ALGOBASE_H\n #define __SGI_STL_INTERNAL_ALGOBASE_H\n \n@@ -81,6 +81,15 @@ namespace std\n \n   // swap and iter_swap\n \n+  /**\n+   *  @brief Swaps the contents of two iterators.\n+   *  @param  a  An iterator.\n+   *  @param  b  Another iterator.\n+   *  @return   Nothing.\n+   *\n+   *  This function swaps the values pointed to by two iterators, not the\n+   *  iterators themselves.\n+  */\n   template<typename _ForwardIter1, typename _ForwardIter2>\n     inline void\n     iter_swap(_ForwardIter1 __a, _ForwardIter2 __b)\n@@ -99,6 +108,15 @@ namespace std\n       *__b = __tmp;\n     }\n \n+  /**\n+   *  @brief Swaps two values.\n+   *  @param  a  A thing of arbitrary type.\n+   *  @param  b  Another thing of arbitrary type.\n+   *  @return   Nothing.\n+   *\n+   *  This is the simple classic generic implementation.  It will work on\n+   *  any type which has a copy constructor and an assignment operator.\n+  */\n   template<typename _Tp>\n     inline void\n     swap(_Tp& __a, _Tp& __b)\n@@ -117,6 +135,16 @@ namespace std\n   #undef min\n   #undef max\n \n+  /**\n+   *  @brief This does what you think it does.\n+   *  @param  a  A thing of arbitrary type.\n+   *  @param  b  Another thing of arbitrary type.\n+   *  @return   The lesser of the parameters.\n+   *\n+   *  This is the simple classic generic implementation.  It will work on\n+   *  temporary expressions, since they are only evaluated once, unlike a\n+   *  preprocessor macro.\n+  */\n   template<typename _Tp>\n     inline const _Tp&\n     min(const _Tp& __a, const _Tp& __b)"}, {"sha": "4279ba0321a8a19bcd87987db1fcac6c007ccfd2", "filename": "libstdc++-v3/include/bits/stl_alloc.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -40,8 +40,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_alloc.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef __SGI_STL_INTERNAL_ALLOC_H"}, {"sha": "fddf02ad8e73a1438731380d201c8ddb24eeef13", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,8 +53,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_bvector.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef __SGI_STL_INTERNAL_BVECTOR_H"}, {"sha": "73753b64a146f3279b4506b77ea13237ce61e43f", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,8 +53,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_construct.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_BITS_STL_CONSTRUCT_H"}, {"sha": "a1dda2f8b9eeea1125292b8adb44fe5d5e96f785", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,8 +53,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_deque.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #include <bits/concept_check.h>"}, {"sha": "9fbead498dbfce26de93eb0952e9bcfb47fece60", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -54,8 +54,8 @@\n  */\n \n /** @file stl_function.h\n- *  This is an internal header file, included by other STL headers.  You\n- *  should not attempt to use it directly.\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef __SGI_STL_INTERNAL_FUNCTION_H\n@@ -96,7 +96,7 @@ namespace std\n  *  @{\n */\n /**\n- *  This is one of the @link s20_3_1_base functor base classes @endlink.\n+ *  This is one of the @link s20_3_1_base functor base classes@endlink.\n */\n template <class _Arg, class _Result>\n struct unary_function {\n@@ -105,7 +105,7 @@ struct unary_function {\n };\n \n /**\n- *  This is one of the @link s20_3_1_base functor base classes @endlink.\n+ *  This is one of the @link s20_3_1_base functor base classes@endlink.\n */\n template <class _Arg1, class _Arg2, class _Result>\n struct binary_function {\n@@ -119,42 +119,42 @@ struct binary_function {\n /** @defgroup s20_3_2_arithmetic Arithmetic Classes\n  *  Because basic math often needs to be done during an algorithm, the library\n  *  provides functors for those operations.  See the documentation for\n- *  @link s20_3_1_base the base classes @endlink for examples of their use.\n+ *  @link s20_3_1_base the base classes@endlink for examples of their use.\n  *\n  *  @{\n */\n-/// One of the @link s20_3_2_arithmetic math functors @endlink.\n+/// One of the @link s20_3_2_arithmetic math functors@endlink.\n template <class _Tp>\n struct plus : public binary_function<_Tp,_Tp,_Tp> {\n   _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x + __y; }\n };\n \n-/// One of the @link s20_3_2_arithmetic math functors @endlink.\n+/// One of the @link s20_3_2_arithmetic math functors@endlink.\n template <class _Tp>\n struct minus : public binary_function<_Tp,_Tp,_Tp> {\n   _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x - __y; }\n };\n \n-/// One of the @link s20_3_2_arithmetic math functors @endlink.\n+/// One of the @link s20_3_2_arithmetic math functors@endlink.\n template <class _Tp>\n struct multiplies : public binary_function<_Tp,_Tp,_Tp> {\n   _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x * __y; }\n };\n \n-/// One of the @link s20_3_2_arithmetic math functors @endlink.\n+/// One of the @link s20_3_2_arithmetic math functors@endlink.\n template <class _Tp>\n struct divides : public binary_function<_Tp,_Tp,_Tp> {\n   _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x / __y; }\n };\n \n-/// One of the @link s20_3_2_arithmetic math functors @endlink.\n+/// One of the @link s20_3_2_arithmetic math functors@endlink.\n template <class _Tp>\n struct modulus : public binary_function<_Tp,_Tp,_Tp> \n {\n   _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x % __y; }\n };\n \n-/// One of the @link s20_3_2_arithmetic math functors @endlink.\n+/// One of the @link s20_3_2_arithmetic math functors@endlink.\n template <class _Tp>\n struct negate : public unary_function<_Tp,_Tp> \n {\n@@ -188,42 +188,42 @@ template <class _Tp> inline _Tp identity_element(multiplies<_Tp>) {\n  *\n  *  @{\n */\n-/// One of the @link s20_3_3_comparisons comparison functors @endlink.\n+/// One of the @link s20_3_3_comparisons comparison functors@endlink.\n template <class _Tp>\n struct equal_to : public binary_function<_Tp,_Tp,bool> \n {\n   bool operator()(const _Tp& __x, const _Tp& __y) const { return __x == __y; }\n };\n \n-/// One of the @link s20_3_3_comparisons comparison functors @endlink.\n+/// One of the @link s20_3_3_comparisons comparison functors@endlink.\n template <class _Tp>\n struct not_equal_to : public binary_function<_Tp,_Tp,bool> \n {\n   bool operator()(const _Tp& __x, const _Tp& __y) const { return __x != __y; }\n };\n \n-/// One of the @link s20_3_3_comparisons comparison functors @endlink.\n+/// One of the @link s20_3_3_comparisons comparison functors@endlink.\n template <class _Tp>\n struct greater : public binary_function<_Tp,_Tp,bool> \n {\n   bool operator()(const _Tp& __x, const _Tp& __y) const { return __x > __y; }\n };\n \n-/// One of the @link s20_3_3_comparisons comparison functors @endlink.\n+/// One of the @link s20_3_3_comparisons comparison functors@endlink.\n template <class _Tp>\n struct less : public binary_function<_Tp,_Tp,bool> \n {\n   bool operator()(const _Tp& __x, const _Tp& __y) const { return __x < __y; }\n };\n \n-/// One of the @link s20_3_3_comparisons comparison functors @endlink.\n+/// One of the @link s20_3_3_comparisons comparison functors@endlink.\n template <class _Tp>\n struct greater_equal : public binary_function<_Tp,_Tp,bool>\n {\n   bool operator()(const _Tp& __x, const _Tp& __y) const { return __x >= __y; }\n };\n \n-/// One of the @link s20_3_3_comparisons comparison functors @endlink.\n+/// One of the @link s20_3_3_comparisons comparison functors@endlink.\n template <class _Tp>\n struct less_equal : public binary_function<_Tp,_Tp,bool> \n {\n@@ -237,21 +237,21 @@ struct less_equal : public binary_function<_Tp,_Tp,bool>\n  *\n  *  @{\n */\n-/// One of the @link s20_3_4_logical Boolean operations functors @endlink.\n+/// One of the @link s20_3_4_logical Boolean operations functors@endlink.\n template <class _Tp>\n struct logical_and : public binary_function<_Tp,_Tp,bool>\n {\n   bool operator()(const _Tp& __x, const _Tp& __y) const { return __x && __y; }\n };\n \n-/// One of the @link s20_3_4_logical Boolean operations functors @endlink.\n+/// One of the @link s20_3_4_logical Boolean operations functors@endlink.\n template <class _Tp>\n struct logical_or : public binary_function<_Tp,_Tp,bool>\n {\n   bool operator()(const _Tp& __x, const _Tp& __y) const { return __x || __y; }\n };\n \n-/// One of the @link s20_3_4_logical Boolean operations functors @endlink.\n+/// One of the @link s20_3_4_logical Boolean operations functors@endlink.\n template <class _Tp>\n struct logical_not : public unary_function<_Tp,bool>\n {\n@@ -286,7 +286,7 @@ struct logical_not : public unary_function<_Tp,bool>\n  *\n  *  @{\n */\n-/// One of the @link s20_3_5_negators negation functors @endlink.\n+/// One of the @link s20_3_5_negators negation functors@endlink.\n template <class _Predicate>\n class unary_negate\n   : public unary_function<typename _Predicate::argument_type, bool> {\n@@ -299,15 +299,15 @@ class unary_negate\n   }\n };\n \n-/// One of the @link s20_3_5_negators negation functors @endlink.\n+/// One of the @link s20_3_5_negators negation functors@endlink.\n template <class _Predicate>\n inline unary_negate<_Predicate> \n not1(const _Predicate& __pred)\n {\n   return unary_negate<_Predicate>(__pred);\n }\n \n-/// One of the @link s20_3_5_negators negation functors @endlink.\n+/// One of the @link s20_3_5_negators negation functors@endlink.\n template <class _Predicate> \n class binary_negate \n   : public binary_function<typename _Predicate::first_argument_type,\n@@ -324,7 +324,7 @@ class binary_negate\n   }\n };\n \n-/// One of the @link s20_3_5_negators negation functors @endlink.\n+/// One of the @link s20_3_5_negators negation functors@endlink.\n template <class _Predicate>\n inline binary_negate<_Predicate> \n not2(const _Predicate& __pred)\n@@ -364,7 +364,7 @@ not2(const _Predicate& __pred)\n  *\n  *  @{\n */\n-/// One of the @link s20_3_6_binder binder functors @endlink.\n+/// One of the @link s20_3_6_binder binder functors@endlink.\n template <class _Operation> \n class binder1st\n   : public unary_function<typename _Operation::second_argument_type,\n@@ -389,7 +389,7 @@ class binder1st\n #endif\n };\n \n-/// One of the @link s20_3_6_binder binder functors @endlink.\n+/// One of the @link s20_3_6_binder binder functors@endlink.\n template <class _Operation, class _Tp>\n inline binder1st<_Operation> \n bind1st(const _Operation& __fn, const _Tp& __x) \n@@ -398,7 +398,7 @@ bind1st(const _Operation& __fn, const _Tp& __x)\n   return binder1st<_Operation>(__fn, _Arg1_type(__x));\n }\n \n-/// One of the @link s20_3_6_binder binder functors @endlink.\n+/// One of the @link s20_3_6_binder binder functors@endlink.\n template <class _Operation> \n class binder2nd\n   : public unary_function<typename _Operation::first_argument_type,\n@@ -423,7 +423,7 @@ class binder2nd\n #endif\n };\n \n-/// One of the @link s20_3_6_binder binder functors @endlink.\n+/// One of the @link s20_3_6_binder binder functors@endlink.\n template <class _Operation, class _Tp>\n inline binder2nd<_Operation> \n bind2nd(const _Operation& __fn, const _Tp& __x) \n@@ -535,7 +535,7 @@ compose2(const _Operation1& __fn1, const _Operation2& __fn2,\n  *\n  *  @{\n */\n-/// One of the @link s20_3_7_adaptors adaptors for function pointers @endlink.\n+/// One of the @link s20_3_7_adaptors adaptors for function pointers@endlink.\n template <class _Arg, class _Result>\n class pointer_to_unary_function : public unary_function<_Arg, _Result> {\n protected:\n@@ -546,14 +546,14 @@ class pointer_to_unary_function : public unary_function<_Arg, _Result> {\n   _Result operator()(_Arg __x) const { return _M_ptr(__x); }\n };\n \n-/// One of the @link s20_3_7_adaptors adaptors for function pointers @endlink.\n+/// One of the @link s20_3_7_adaptors adaptors for function pointers@endlink.\n template <class _Arg, class _Result>\n inline pointer_to_unary_function<_Arg, _Result> ptr_fun(_Result (*__x)(_Arg))\n {\n   return pointer_to_unary_function<_Arg, _Result>(__x);\n }\n \n-/// One of the @link s20_3_7_adaptors adaptors for function pointers @endlink.\n+/// One of the @link s20_3_7_adaptors adaptors for function pointers@endlink.\n template <class _Arg1, class _Arg2, class _Result>\n class pointer_to_binary_function : \n   public binary_function<_Arg1,_Arg2,_Result> {\n@@ -568,7 +568,7 @@ class pointer_to_binary_function :\n     }\n };\n \n-/// One of the @link s20_3_7_adaptors adaptors for function pointers @endlink.\n+/// One of the @link s20_3_7_adaptors adaptors for function pointers@endlink.\n template <class _Arg1, class _Arg2, class _Result>\n inline pointer_to_binary_function<_Arg1,_Arg2,_Result> \n ptr_fun(_Result (*__x)(_Arg1, _Arg2)) {\n@@ -823,7 +823,7 @@ class subtractive_rng : public unary_function<unsigned int, unsigned int> {\n  *\n  *  @{\n */\n-/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n template <class _Ret, class _Tp>\n class mem_fun_t : public unary_function<_Tp*,_Ret> {\n public:\n@@ -833,7 +833,7 @@ class mem_fun_t : public unary_function<_Tp*,_Ret> {\n   _Ret (_Tp::*_M_f)();\n };\n \n-/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n template <class _Ret, class _Tp>\n class const_mem_fun_t : public unary_function<const _Tp*,_Ret> {\n public:\n@@ -843,7 +843,7 @@ class const_mem_fun_t : public unary_function<const _Tp*,_Ret> {\n   _Ret (_Tp::*_M_f)() const;\n };\n \n-/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n template <class _Ret, class _Tp>\n class mem_fun_ref_t : public unary_function<_Tp,_Ret> {\n public:\n@@ -853,7 +853,7 @@ class mem_fun_ref_t : public unary_function<_Tp,_Ret> {\n   _Ret (_Tp::*_M_f)();\n };\n \n-/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n template <class _Ret, class _Tp>\n class const_mem_fun_ref_t : public unary_function<_Tp,_Ret> {\n public:\n@@ -863,7 +863,7 @@ class const_mem_fun_ref_t : public unary_function<_Tp,_Ret> {\n   _Ret (_Tp::*_M_f)() const;\n };\n \n-/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n template <class _Ret, class _Tp, class _Arg>\n class mem_fun1_t : public binary_function<_Tp*,_Arg,_Ret> {\n public:\n@@ -873,7 +873,7 @@ class mem_fun1_t : public binary_function<_Tp*,_Arg,_Ret> {\n   _Ret (_Tp::*_M_f)(_Arg);\n };\n \n-/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n template <class _Ret, class _Tp, class _Arg>\n class const_mem_fun1_t : public binary_function<const _Tp*,_Arg,_Ret> {\n public:\n@@ -884,7 +884,7 @@ class const_mem_fun1_t : public binary_function<const _Tp*,_Arg,_Ret> {\n   _Ret (_Tp::*_M_f)(_Arg) const;\n };\n \n-/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n template <class _Ret, class _Tp, class _Arg>\n class mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {\n public:\n@@ -894,7 +894,7 @@ class mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {\n   _Ret (_Tp::*_M_f)(_Arg);\n };\n \n-/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n template <class _Ret, class _Tp, class _Arg>\n class const_mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {\n public:\n@@ -904,7 +904,7 @@ class const_mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {\n   _Ret (_Tp::*_M_f)(_Arg) const;\n };\n \n-/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n template <class _Tp>\n class mem_fun_t<void, _Tp> : public unary_function<_Tp*,void> {\n public:\n@@ -914,7 +914,7 @@ class mem_fun_t<void, _Tp> : public unary_function<_Tp*,void> {\n   void (_Tp::*_M_f)();\n };\n \n-/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n template <class _Tp>\n class const_mem_fun_t<void, _Tp> : public unary_function<const _Tp*,void> {\n public:\n@@ -924,7 +924,7 @@ class const_mem_fun_t<void, _Tp> : public unary_function<const _Tp*,void> {\n   void (_Tp::*_M_f)() const;\n };\n \n-/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n template <class _Tp>\n class mem_fun_ref_t<void, _Tp> : public unary_function<_Tp,void> {\n public:\n@@ -934,7 +934,7 @@ class mem_fun_ref_t<void, _Tp> : public unary_function<_Tp,void> {\n   void (_Tp::*_M_f)();\n };\n \n-/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n template <class _Tp>\n class const_mem_fun_ref_t<void, _Tp> : public unary_function<_Tp,void> {\n public:\n@@ -944,7 +944,7 @@ class const_mem_fun_ref_t<void, _Tp> : public unary_function<_Tp,void> {\n   void (_Tp::*_M_f)() const;\n };\n \n-/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n template <class _Tp, class _Arg>\n class mem_fun1_t<void, _Tp, _Arg> : public binary_function<_Tp*,_Arg,void> {\n public:\n@@ -954,7 +954,7 @@ class mem_fun1_t<void, _Tp, _Arg> : public binary_function<_Tp*,_Arg,void> {\n   void (_Tp::*_M_f)(_Arg);\n };\n \n-/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n template <class _Tp, class _Arg>\n class const_mem_fun1_t<void, _Tp, _Arg> \n   : public binary_function<const _Tp*,_Arg,void> {\n@@ -965,7 +965,7 @@ class const_mem_fun1_t<void, _Tp, _Arg>\n   void (_Tp::*_M_f)(_Arg) const;\n };\n \n-/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n template <class _Tp, class _Arg>\n class mem_fun1_ref_t<void, _Tp, _Arg>\n   : public binary_function<_Tp,_Arg,void> {\n@@ -976,7 +976,7 @@ class mem_fun1_ref_t<void, _Tp, _Arg>\n   void (_Tp::*_M_f)(_Arg);\n };\n \n-/// One of the @link s20_3_8_memadaptors adaptors for member pointers @endlink.\n+/// One of the @link s20_3_8_memadaptors adaptors for member pointers@endlink.\n template <class _Tp, class _Arg>\n class const_mem_fun1_ref_t<void, _Tp, _Arg>\n   : public binary_function<_Tp,_Arg,void> {"}, {"sha": "c19195aad39a4dab6e04c8f79d90586d50dc6d68", "filename": "libstdc++-v3/include/bits/stl_heap.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_heap.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -52,8 +52,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_heap.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_BITS_STL_HEAP_H"}, {"sha": "abf5e520c3fed0d44d3e7f9a7302dce04a45a817", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,8 +53,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_iterator.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef __SGI_STL_INTERNAL_ITERATOR_H"}, {"sha": "1dda9c228ef6a791c1589ed35da04c71b1d5cb54", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,8 +53,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_iterator_base_funcs.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef __SGI_STL_INTERNAL_ITERATOR_BASE_FUNCS_H"}, {"sha": "65aaa66f6cec34df194b1dbd8bdc737d3b325fcd", "filename": "libstdc++-v3/include/bits/stl_iterator_base_types.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_types.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,8 +53,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_iterator_base_types.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef __SGI_STL_INTERNAL_ITERATOR_BASE_TYPES_H"}, {"sha": "4feaa7157bbc2995cc2f9b525bb5a559c37aea2e", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,8 +53,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_list.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef __SGI_STL_INTERNAL_LIST_H"}, {"sha": "7c00699406ceda90b6ba74e7a977713bc994e7b9", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,8 +53,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_map.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_BITS_STL_MAP_H"}, {"sha": "65e264f257e7decf47a021ef2536ca96fd15f196", "filename": "libstdc++-v3/include/bits/stl_multimap.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multimap.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,8 +53,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_multimap.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef __SGI_STL_INTERNAL_MULTIMAP_H"}, {"sha": "0ae57a6cb380e5a7b8a785518236e9cf265a3303", "filename": "libstdc++-v3/include/bits/stl_multiset.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_multiset.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,8 +53,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_multiset.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef __SGI_STL_INTERNAL_MULTISET_H"}, {"sha": "9bceee0a750a0f0c747b4f16a2c69053622e741f", "filename": "libstdc++-v3/include/bits/stl_numeric.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_numeric.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,11 +53,11 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_numeric.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n-\n #ifndef _CPP_BITS_STL_NUMERIC_H\n #define _CPP_BITS_STL_NUMERIC_H 1\n "}, {"sha": "10cc2e32258647bf870a5174fd40840b12d4203e", "filename": "libstdc++-v3/include/bits/stl_pair.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pair.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -54,8 +54,8 @@\n  */\n \n /** @file stl_pair.h\n- *  This is an internal header file, included by other STL headers.  You\n- *  should not attempt to use it directly.\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef __SGI_STL_INTERNAL_PAIR_H"}, {"sha": "09b7d727af65cab36c7baa430246e7d5fba3ae53", "filename": "libstdc++-v3/include/bits/stl_pthread_alloc.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pthread_alloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pthread_alloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_pthread_alloc.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -40,6 +40,11 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n+/** @file stl_pthread_alloc.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_STL_PTHREAD_ALLOC_H\n #define _CPP_BITS_STL_PTHREAD_ALLOC_H 1\n "}, {"sha": "82e6e5972feffb065e03e643f0e4192ae67b4953", "filename": "libstdc++-v3/include/bits/stl_queue.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_queue.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,8 +53,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_queue.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef __SGI_STL_INTERNAL_QUEUE_H"}, {"sha": "58c45cd3f0ce16d15f7551c9edaf75e7449d09b4", "filename": "libstdc++-v3/include/bits/stl_raw_storage_iter.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_raw_storage_iter.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,8 +53,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- * You should not attempt to use it directly.\n+/** @file stl_raw_storage_iter.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_BITS_STL_RAW_STORAGE_ITERATOR_H"}, {"sha": "d4d3d222022fee04361789db2d059efa888e6663", "filename": "libstdc++-v3/include/bits/stl_relops.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_relops.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,11 +53,7 @@\n  *\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n- */\n-\n-/**** libstdc++-v3 note:  Inclusion of this file has been removed from\n+/* +++ libstdc++-v3 note:  Inclusion of this file has been removed from\n  * all of the other STL headers for safety reasons, except std_utility.h.\n  * For more information, see the thread of about twenty messages starting\n  * with <URL:http://gcc.gnu.org/ml/libstdc++/2001-01/msg00223.html>, or the\n@@ -67,6 +63,11 @@\n  * Don't use them.\n */\n \n+/** @file stl_relops.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_STL_RELOPS_H\n #define _CPP_BITS_STL_RELOPS_H 1\n "}, {"sha": "22dcef308a4b2c6f7a9d5734ebb48bdf19b08865", "filename": "libstdc++-v3/include/bits/stl_set.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_set.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,8 +53,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_set.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef __SGI_STL_INTERNAL_SET_H"}, {"sha": "0352ec5368d1c070a29bd7e505219c1b4a0466e0", "filename": "libstdc++-v3/include/bits/stl_stack.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_stack.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,8 +53,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_stack.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef __SGI_STL_INTERNAL_STACK_H"}, {"sha": "cbae35a43b3210e6b9d40da8e22485a5ed193b4b", "filename": "libstdc++-v3/include/bits/stl_tempbuf.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tempbuf.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,8 +53,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_tempbuf.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef __SGI_STL_INTERNAL_TEMPBUF_H"}, {"sha": "20c3deb16fc87fd191c19cdf2cb64ea0ffd1b2b0", "filename": "libstdc++-v3/include/bits/stl_threads.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_threads.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -40,10 +40,10 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-// WARNING: This is an internal header file, included by other C++\n-// standard library headers.  You should not attempt to use this header\n-// file directly.\n-// Stl_config.h should be included before this file.\n+/** @file stl_threads.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n \n #ifndef __SGI_STL_INTERNAL_THREADS_H\n #define __SGI_STL_INTERNAL_THREADS_H"}, {"sha": "b0a052e442aade6ea408d7052276fa37603988b6", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -55,8 +55,9 @@\n  *\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_tree.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef __SGI_STL_INTERNAL_TREE_H"}, {"sha": "5c107a4600c158a2c39245c000b72dea30741de1", "filename": "libstdc++-v3/include/bits/stl_uninitialized.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_uninitialized.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,8 +53,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_uninitialized.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef _CPP_BITS_STL_UNINITIALIZED_H"}, {"sha": "157d31f1dd49de886822dfc894d49450d9a184f8", "filename": "libstdc++-v3/include/bits/stl_vector.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_vector.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -53,8 +53,9 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n-/* NOTE: This is an internal header file, included by other STL headers.\n- *   You should not attempt to use it directly.\n+/** @file stl_vector.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n  */\n \n #ifndef __SGI_STL_INTERNAL_VECTOR_H"}, {"sha": "4897fc36fefb4caf9cd54fe2b5254a6ebfdb36c2", "filename": "libstdc++-v3/include/bits/stream_iterator.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -27,6 +27,11 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n+/** @file stream_iterator.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_STREAM_ITERATOR_H\n #define _CPP_BITS_STREAM_ITERATOR_H 1\n "}, {"sha": "2f8b4b44070b6f7b4bf2b6af99d52235768e3b16", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -29,6 +29,11 @@\n \n // XXX Should specialize copy, find algorithms for streambuf iterators.\n \n+/** @file streambuf_iterator.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_STREAMBUF_ITERATOR_H\n #define _CPP_BITS_STREAMBUF_ITERATOR_H 1\n "}, {"sha": "5197f9703fdb456dd03265744f5d0dd479c09235", "filename": "libstdc++-v3/include/bits/stringfwd.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstringfwd.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -31,6 +31,11 @@\n // ISO C++ 14882: 21 Strings library\n //\n \n+/** @file stringfwd.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_STRINGFWD_H\n #define _CPP_BITS_STRINGFWD_H\t1\n "}, {"sha": "2471013bf61a3315708261188d788104afa9e5bf", "filename": "libstdc++-v3/include/bits/type_traits.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -41,6 +41,11 @@\n  * purpose.  It is provided \"as is\" without express or implied warranty.\n  */\n \n+/** @file type_traits.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_TYPE_TRAITS_H\n #define _CPP_BITS_TYPE_TRAITS_H 1\n "}, {"sha": "1ef10e60b010cbb822a55f9a4fd9324e208ee93c", "filename": "libstdc++-v3/include/bits/valarray_array.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_array.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -29,6 +29,11 @@\n \n // Written by Gabriel Dos Reis <Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>\n \n+/** @file valarray_array.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_BITS_ARRAY_H\n #define _CPP_BITS_ARRAY_H 1\n "}, {"sha": "b4c85ba7c997f7f0ee12134357406dea0469ddcf", "filename": "libstdc++-v3/include/bits/valarray_meta.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_meta.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/729e3d3f015075bf124a0104d6a6aada347806c3/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_meta.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fvalarray_meta.h?ref=729e3d3f015075bf124a0104d6a6aada347806c3", "patch": "@@ -29,6 +29,11 @@\n \n // Written by Gabriel Dos Reis <Gabriel.Dos-Reis@cmla.ens-cachan.fr>\n \n+/** @file valarray_meta.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n #ifndef _CPP_VALARRAY_META_H\n #define _CPP_VALARRAY_META_H 1\n "}]}