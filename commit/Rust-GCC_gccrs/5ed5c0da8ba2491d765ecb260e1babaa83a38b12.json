{"sha": "5ed5c0da8ba2491d765ecb260e1babaa83a38b12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVkNWMwZGE4YmEyNDkxZDc2NWVjYjI2MGUxYmFiYWE4M2EzOGIxMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-04-05T16:56:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-04-05T16:56:18Z"}, "message": "Fix directory_iterator handling of DT_UNKNOWN\n\nWe need to handle DT_UNKNOWN earlier, not only during directory\nrecursion, so that the cached file_type value in the directory_entry\nwon't be used.\n\n\t* src/c++17/fs_dir.cc (_Dir::advance(bool, error_code&)): Handle\n\td_type == DT_UNKNOWN immediately.\n\t(_Dir::should_recurse(bool, error_code&)): Remove file_type::unknown\n\thandling here.\n\t* testsuite/27_io/filesystem/iterators/caching.cc: New test.\n\nFrom-SVN: r270172", "tree": {"sha": "a63eb67092d3a7108921708e92aa5568ddf6fbf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a63eb67092d3a7108921708e92aa5568ddf6fbf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ed5c0da8ba2491d765ecb260e1babaa83a38b12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ed5c0da8ba2491d765ecb260e1babaa83a38b12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ed5c0da8ba2491d765ecb260e1babaa83a38b12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ed5c0da8ba2491d765ecb260e1babaa83a38b12/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d96f11a2720c8ddfc3d181b181cfaadd888323cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d96f11a2720c8ddfc3d181b181cfaadd888323cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d96f11a2720c8ddfc3d181b181cfaadd888323cd"}], "stats": {"total": 91, "additions": 89, "deletions": 2}, "files": [{"sha": "2141946f1798060bf778bca98c3f1812cb9647fb", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ed5c0da8ba2491d765ecb260e1babaa83a38b12/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ed5c0da8ba2491d765ecb260e1babaa83a38b12/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5ed5c0da8ba2491d765ecb260e1babaa83a38b12", "patch": "@@ -1,5 +1,11 @@\n 2019-04-05  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* src/c++17/fs_dir.cc (_Dir::advance(bool, error_code&)): Handle\n+\td_type == DT_UNKNOWN immediately.\n+\t(_Dir::should_recurse(bool, error_code&)): Remove file_type::unknown\n+\thandling here.\n+\t* testsuite/27_io/filesystem/iterators/caching.cc: New test.\n+\n \t* include/bits/fs_path.h (path::operator=(path&&)): Check for self\n \tassignment.\n \t* src/c++17/fs_path.cc (path::operator=(const path&)): Likewise."}, {"sha": "629c4ebf78f5ed01dcfa6cc9207387dba34203b3", "filename": "libstdc++-v3/src/c++17/fs_dir.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ed5c0da8ba2491d765ecb260e1babaa83a38b12/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_dir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ed5c0da8ba2491d765ecb260e1babaa83a38b12/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_dir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_dir.cc?ref=5ed5c0da8ba2491d765ecb260e1babaa83a38b12", "patch": "@@ -62,7 +62,13 @@ struct fs::_Dir : _Dir_base\n       {\n \tauto name = path;\n \tname /= entp->d_name;\n-\tentry = fs::directory_entry{std::move(name), get_file_type(*entp)};\n+\tfile_type type = file_type::none;\n+#ifdef _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE\n+\t// Even if the OS supports dirent::d_type the filesystem might not:\n+\tif (entp->d_type != DT_UNKNOWN)\n+\t  type = get_file_type(*entp);\n+#endif\n+\tentry = fs::directory_entry{std::move(name), type};\n \treturn true;\n       }\n     else if (!ec)\n@@ -90,7 +96,7 @@ struct fs::_Dir : _Dir_base\n   bool should_recurse(bool follow_symlink, error_code& ec) const\n   {\n     file_type type = entry._M_type;\n-    if (type == file_type::none || type == file_type::unknown)\n+    if (type == file_type::none)\n     {\n       type = entry.symlink_status(ec).type();\n       if (ec)"}, {"sha": "e95e514149e4256c2f57932b0d483c0901493d80", "filename": "libstdc++-v3/testsuite/27_io/filesystem/iterators/caching.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ed5c0da8ba2491d765ecb260e1babaa83a38b12/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Fcaching.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ed5c0da8ba2491d765ecb260e1babaa83a38b12/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Fcaching.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fiterators%2Fcaching.cc?ref=5ed5c0da8ba2491d765ecb260e1babaa83a38b12", "patch": "@@ -0,0 +1,75 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do run { target c++17 } }\n+\n+#include <filesystem>\n+#include <testsuite_fs.h>\n+#include <testsuite_hooks.h>\n+\n+namespace fs = std::filesystem;\n+\n+__gnu_test::scoped_file\n+create_dir(fs::path dir = __gnu_test::nonexistent_path())\n+{\n+  fs::create_directory(dir);\n+  return { dir, __gnu_test::scoped_file::adopt_file };\n+}\n+\n+void\n+test01()\n+{\n+  auto testdir = create_dir();\n+  __gnu_test::scoped_file file1(testdir.path/\"file1\");\n+  __gnu_test::scoped_file file2(testdir.path/\"file2\");\n+\n+  fs::directory_iterator it(testdir.path);\n+  VERIFY( it->is_regular_file() );\n+  ++it;\n+  VERIFY( it->is_regular_file() );\n+  ++it;\n+  VERIFY( it == fs::directory_iterator{} );\n+}\n+\n+void\n+test02()\n+{\n+  auto testdir = create_dir();\n+  const auto sub1 = create_dir(testdir.path/\"sub1\");\n+  __gnu_test::scoped_file file1(sub1.path / \"file\");\n+  const auto sub2 = create_dir(testdir.path/\"sub2\");\n+  __gnu_test::scoped_file file2(sub2.path / \"file\");\n+\n+  fs::recursive_directory_iterator it(testdir.path);\n+  VERIFY( it->is_directory() );\n+  ++it;\n+  VERIFY( it->is_regular_file() );\n+  ++it;\n+  VERIFY( it->is_directory() );\n+  ++it;\n+  VERIFY( it->is_regular_file() );\n+  ++it;\n+  VERIFY( it == fs::recursive_directory_iterator{} );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}