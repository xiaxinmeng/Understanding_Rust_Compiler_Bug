{"sha": "ee618c17faa664adb1b84395199cd62de3b91185", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU2MThjMTdmYWE2NjRhZGIxYjg0Mzk1MTk5Y2Q2MmRlM2I5MTE4NQ==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@au.ibm.com", "date": "2009-04-08T02:47:52Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2009-04-08T02:47:52Z"}, "message": "* gcc.c: Replace `CC' with `GCC' throughout.\n\nFrom-SVN: r145708", "tree": {"sha": "1a74df641142700c46354fb101b38882e1c67c3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a74df641142700c46354fb101b38882e1c67c3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee618c17faa664adb1b84395199cd62de3b91185", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee618c17faa664adb1b84395199cd62de3b91185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee618c17faa664adb1b84395199cd62de3b91185", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee618c17faa664adb1b84395199cd62de3b91185/comments", "author": null, "committer": null, "parents": [{"sha": "d21a98b8df9eb2d7d0a58a4c8c9589526c4f7ba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21a98b8df9eb2d7d0a58a4c8c9589526c4f7ba4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d21a98b8df9eb2d7d0a58a4c8c9589526c4f7ba4"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "46a98f29b79066acf9c3e76e2e06420aa64ffd01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee618c17faa664adb1b84395199cd62de3b91185/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee618c17faa664adb1b84395199cd62de3b91185/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ee618c17faa664adb1b84395199cd62de3b91185", "patch": "@@ -1,3 +1,7 @@\n+2009-04-08  Ben Elliston  <bje@au.ibm.com>\n+\n+\t* gcc.c: Replace `CC' with `GCC' throughout.\n+\n 2009-04-07  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* doc/invoke.texi: Document Atom support."}, {"sha": "de429f87c410867aebc1f07cde5ccd6a0d482e5b", "filename": "gcc/gcc.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee618c17faa664adb1b84395199cd62de3b91185/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee618c17faa664adb1b84395199cd62de3b91185/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=ee618c17faa664adb1b84395199cd62de3b91185", "patch": "@@ -445,7 +445,7 @@ or with constant text in a single argument.\n         it is subsequently output with %*. SUFFIX is terminated by the next\n         space or %.\n  %d\tmarks the argument containing or following the %d as a\n-\ttemporary file name, so that that file will be deleted if CC exits\n+\ttemporary file name, so that that file will be deleted if GCC exits\n \tsuccessfully.  Unlike %g, this contributes no text to the argument.\n  %w\tmarks the argument containing or following the %w as the\n \t\"output file\" of this compilation.  This puts the argument\n@@ -514,23 +514,23 @@ or with constant text in a single argument.\n \targument vector in the usual fashion.  The function returns\n \ta string which is processed as if it had appeared literally\n \tas part of the current spec.\n- %{S}   substitutes the -S switch, if that switch was given to CC.\n+ %{S}   substitutes the -S switch, if that switch was given to GCC.\n \tIf that switch was not specified, this substitutes nothing.\n \tHere S is a metasyntactic variable.\n- %{S*}  substitutes all the switches specified to CC whose names start\n+ %{S*}  substitutes all the switches specified to GCC whose names start\n \twith -S.  This is used for -o, -I, etc; switches that take\n-\targuments.  CC considers `-o foo' as being one switch whose\n+\targuments.  GCC considers `-o foo' as being one switch whose\n \tname starts with `o'.  %{o*} would substitute this text,\n \tincluding the space; thus, two arguments would be generated.\n  %{S*&T*} likewise, but preserve order of S and T options (the order\n \tof S and T in the spec is not significant).  Can be any number\n \tof ampersand-separated variables; for each the wild card is\n \toptional.  Useful for CPP as %{D*&U*&A*}.\n \n- %{S:X}   substitutes X, if the -S switch was given to CC.\n- %{!S:X}  substitutes X, if the -S switch was NOT given to CC.\n+ %{S:X}   substitutes X, if the -S switch was given to GCC.\n+ %{!S:X}  substitutes X, if the -S switch was NOT given to GCC.\n  %{S*:X}  substitutes X if one or more switches whose names start\n-          with -S was given to CC.  Normally X is substituted only\n+          with -S was given to GCC.  Normally X is substituted only\n           once, no matter how many such switches appeared.  However,\n           if %* appears somewhere in X, then X will be substituted\n           once for each matching switch, with the %* replaced by the\n@@ -540,13 +540,13 @@ or with constant text in a single argument.\n  %{,S:X}  substitutes X, if processing a file which will use spec S.\n  %{!,S:X} substitutes X, if NOT processing a file which will use spec S.\n \t  \n- %{S|T:X} substitutes X if either -S or -T was given to CC.  This may be\n+ %{S|T:X} substitutes X if either -S or -T was given to GCC.  This may be\n \t  combined with '!', '.', ',', and '*' as above binding stronger\n \t  than the OR.\n \t  If %* appears in X, all of the alternatives must be starred, and\n \t  only the first matching alternative is substituted.\n- %{S:X;   if S was given to CC, substitutes X;\n-   T:Y;   else if T was given to CC, substitutes Y;\n+ %{S:X;   if S was given to GCC, substitutes X;\n+   T:Y;   else if T was given to GCC, substitutes Y;\n     :D}   else substitutes D.  There can be as many clauses as you need.\n           This may be combined with '.', '!', ',', '|', and '*' as above.\n \n@@ -570,15 +570,15 @@ The character | at the beginning of the predicate text is used to indicate\n that a command should be piped to the following command, but only if -pipe\n is specified.\n \n-Note that it is built into CC which switches take arguments and which\n+Note that it is built into GCC which switches take arguments and which\n do not.  You might think it would be useful to generalize this to\n allow each compiler's spec to say which switches take arguments.  But\n-this cannot be done in a consistent fashion.  CC cannot even decide\n+this cannot be done in a consistent fashion.  GCC cannot even decide\n which input files have been specified without knowing which switches\n take arguments, and it must know which input files to compile in order\n to tell which compilers to run.\n \n-CC also knows implicitly that arguments starting in `-l' are to be\n+GCC also knows implicitly that arguments starting in `-l' are to be\n treated as compiler output files, and passed to the linker in their\n proper position among the other output files.  */\n \f"}]}