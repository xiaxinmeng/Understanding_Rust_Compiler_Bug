{"sha": "f410cd248566febad02edacee3ec5f13ae3fc990", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQxMGNkMjQ4NTY2ZmViYWQwMmVkYWNlZTNlYzVmMTNhZTNmYzk5MA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2020-08-25T17:57:55Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2020-08-25T17:57:55Z"}, "message": "hppa: Improve expansion of ashldi3 when !TARGET_64BIT\n\nThis patch improves the code generated on PA-RISC for DImode\n(double word) left shifts by small constants (1-31).  This target\nhas a very cool shd instruction that can be recognized by combine\nfor simple shifts, but relying on combine is fragile for more\ncomplicated functions.  This patch tweaks pa.md's ashldi3 expander,\nto form the optimal two instruction shd/zdep sequence at RTL\nexpansion time.\n\nAs an example of the benefits of this approach, the simple function\nunsigned long long u9(unsigned long long x) { return x*9; }\ncurrently generates 9 instructions and with this patch now requires\nonly 7.\n\n2020-08-25  Roger Sayle  <roger@nextmovesoftware.com>\n\n\t* config/pa/pa.md (ashldi3): Additionally, on !TARGET_64BIT\n\tgenerate a two instruction shd/zdep sequence when shifting\n\tregisters by suitable constants.\n\t(shd_internal): New define_expand to provide gen_shd_internal.", "tree": {"sha": "ae6c1dd6d21651d41528c6a8f6ff91f391162319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae6c1dd6d21651d41528c6a8f6ff91f391162319"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f410cd248566febad02edacee3ec5f13ae3fc990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f410cd248566febad02edacee3ec5f13ae3fc990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f410cd248566febad02edacee3ec5f13ae3fc990", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f410cd248566febad02edacee3ec5f13ae3fc990/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d5ed337cb354c2f85a9caf60377bad887b18d53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d5ed337cb354c2f85a9caf60377bad887b18d53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d5ed337cb354c2f85a9caf60377bad887b18d53"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "713ff175445cccb4ebe9a517c1164d8412028d59", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f410cd248566febad02edacee3ec5f13ae3fc990/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f410cd248566febad02edacee3ec5f13ae3fc990/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=f410cd248566febad02edacee3ec5f13ae3fc990", "patch": "@@ -6416,9 +6416,32 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(ashift:DI (match_operand:DI 1 \"lhs_lshift_operand\" \"\")\n \t\t   (match_operand:DI 2 \"arith32_operand\" \"\")))]\n-  \"TARGET_64BIT\"\n+  \"\"\n   \"\n {\n+  if (!TARGET_64BIT)\n+    {\n+      if (REG_P (operands[0]) && GET_CODE (operands[2]) == CONST_INT)\n+\t{\n+\t  unsigned HOST_WIDE_INT shift = UINTVAL (operands[2]);\n+\t  if (shift >= 1 && shift <= 31)\n+\t    {\n+\t      rtx dst = operands[0];\n+\t      rtx src = force_reg (DImode, operands[1]);\n+\t      emit_insn (gen_shd_internal (gen_highpart (SImode, dst),\n+\t\t\t\t\t   gen_lowpart (SImode, src),\n+\t\t\t\t\t   GEN_INT (32-shift),\n+\t\t\t\t\t   gen_highpart (SImode, src),\n+\t\t\t\t\t   GEN_INT (shift)));\n+\t      emit_insn (gen_ashlsi3 (gen_lowpart (SImode, dst),\n+\t\t\t\t      gen_lowpart (SImode, src),\n+\t\t\t\t      GEN_INT (shift)));\n+\t      DONE;\n+\t    }\n+\t}\n+      /* Fallback to using optabs.c's expand_doubleword_shift.  */\n+      FAIL;\n+    }\n   if (GET_CODE (operands[2]) != CONST_INT)\n     {\n       rtx temp = gen_reg_rtx (DImode);\n@@ -6705,6 +6728,15 @@\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"4\")])\n \n+(define_expand \"shd_internal\"\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(ior:SI\n+\t  (lshiftrt:SI (match_operand:SI 1 \"register_operand\")\n+\t\t       (match_operand:SI 2 \"const_int_operand\"))\n+\t  (ashift:SI (match_operand:SI 3 \"register_operand\")\n+\t\t     (match_operand:SI 4 \"const_int_operand\"))))]\n+  \"\")\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(and:SI (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")"}]}