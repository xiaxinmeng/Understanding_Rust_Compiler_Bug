{"sha": "1898584f04c8d512f9ed50de977cc266fc2a3b15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg5ODU4NGYwNGM4ZDUxMmY5ZWQ1MGRlOTc3Y2MyNjZmYzJhM2IxNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2000-09-07T22:11:31Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-09-07T22:11:31Z"}, "message": "h8300.h: Fix comment typos.\n\n        * config/h8300.h: Fix comment typos.\n        * config/h8300/h8300.md: Likewise.\n        * config/h8300/lib1funcs.asm: Likewise.\n\nFrom-SVN: r36248", "tree": {"sha": "ec4a4bb269fa484e166e03225803656006a69319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec4a4bb269fa484e166e03225803656006a69319"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1898584f04c8d512f9ed50de977cc266fc2a3b15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1898584f04c8d512f9ed50de977cc266fc2a3b15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1898584f04c8d512f9ed50de977cc266fc2a3b15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1898584f04c8d512f9ed50de977cc266fc2a3b15/comments", "author": null, "committer": null, "parents": [{"sha": "3a664f16010a60d417017eccad4450f737e301bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a664f16010a60d417017eccad4450f737e301bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a664f16010a60d417017eccad4450f737e301bd"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "58ba77d5db95b87dbf4a501429cd9571629413cb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1898584f04c8d512f9ed50de977cc266fc2a3b15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1898584f04c8d512f9ed50de977cc266fc2a3b15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1898584f04c8d512f9ed50de977cc266fc2a3b15", "patch": "@@ -1,3 +1,9 @@\n+2000-09-07  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/h8300.h: Fix comment typos.\n+\t* config/h8300/h8300.md: Likewise.\n+\t* config/h8300/lib1funcs.asm: Likewise.\n+\n Thu 07-Sep-2000 21:29:00 BST  Neil Booth  <NeilB@earthling.net>\n \n \t* Makefile.in: Remove references to cppulp.{c,o}."}, {"sha": "ebd05fe983c142f31d2a74ce3cc8066801038ec3", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1898584f04c8d512f9ed50de977cc266fc2a3b15/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1898584f04c8d512f9ed50de977cc266fc2a3b15/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=1898584f04c8d512f9ed50de977cc266fc2a3b15", "patch": "@@ -80,14 +80,14 @@ extern int target_flags;\n    This is for debugging the compiler only.  */\n #define TARGET_RTL_DUMP\t(target_flags & 2048)\n \n-/* Select between the h8/300 and h8/300h cpus.  */\n+/* Select between the H8/300 and H8/300H CPUs.  */\n #define TARGET_H8300\t(! TARGET_H8300H && ! TARGET_H8300S)\n #define TARGET_H8300H\t(target_flags & 4096)\n #define TARGET_H8300S\t(target_flags & 1)\n \n-/* Align all values on the h8/300h the same way as the h8/300.  Specifically,\n+/* Align all values on the H8/300H the same way as the H8/300.  Specifically,\n    32 bit and larger values are aligned on 16 bit boundaries.\n-   This is all the hardware requires, but the default is 32 bits for the 300h.\n+   This is all the hardware requires, but the default is 32 bits for the 300H.\n    ??? Now watch someone add hardware floating point requiring 32 bit\n    alignment.  */\n #define TARGET_ALIGN_300 (target_flags & 8192)"}, {"sha": "57507156d489c53a75533fa2839d9eee105a87bf", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1898584f04c8d512f9ed50de977cc266fc2a3b15/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1898584f04c8d512f9ed50de977cc266fc2a3b15/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=1898584f04c8d512f9ed50de977cc266fc2a3b15", "patch": "@@ -50,8 +50,8 @@\n ;; Long term, we want to expose the \"e\" half to the compiler (gives us\n ;; 8 more 16bit registers).  At that point addhi and subhi can't use adds/subs.\n \n-;; There's currently no way to have a insv/extzv expander for the h8/300h\n-;; because word_mode is different for the h8/300 and h8/300h.\n+;; There's currently no way to have a insv/extzv expander for the H8/300H\n+;; because word_mode is different for the H8/300 and H8/300H.\n \n ;; Shifts/rotates by small constants should be handled by special\n ;; patterns so we get the length and cc status correct.\n@@ -561,7 +561,7 @@\n   \"\n {\n   /* Force operand1 into a register if we're compiling\n-     for the h8/300.  */\n+     for the H8/300.  */\n   if (GET_CODE (operands[1]) != REG && TARGET_H8300)\n     operands[1] = force_reg (HImode, operands[1]);\n }\")\n@@ -767,7 +767,7 @@\n ;; MULTIPLY INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n \n-;; Note that the h8/300 can only handle umulqihi3.\n+;; Note that the H8/300 can only handle umulqihi3.\n \n (define_insn \"mulqihi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n@@ -1770,7 +1770,7 @@\n ;; this in both rtl and at insn emit time.  Ideally, we'd use rtl as that would\n ;; give the optimizer more cracks at the code.  However, we wish to do things\n ;; like optimizing shifting the sign bit to bit 0 by rotating the other way.\n-;; There is rtl to handle this (rotate + and), but the h8/300 doesn't handle\n+;; There is rtl to handle this (rotate + and), but the H8/300 doesn't handle\n ;; 16 bit rotates.  Also, if we emit complicated rtl, combine may not be able\n ;; to detect cases it can optimize.\n ;;"}, {"sha": "41cb3bc9f55d96caa460ab8ed35d5a08d403ce8b", "filename": "gcc/config/h8300/lib1funcs.asm", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1898584f04c8d512f9ed50de977cc266fc2a3b15/gcc%2Fconfig%2Fh8300%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1898584f04c8d512f9ed50de977cc266fc2a3b15/gcc%2Fconfig%2Fh8300%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Flib1funcs.asm?ref=1898584f04c8d512f9ed50de977cc266fc2a3b15", "patch": "@@ -1,8 +1,7 @@\n-;; libgcc1 routines for the Hitachi h8/300 cpu.\n-;; Contributed by Steve Chamberlain.\n-;; sac@cygnus.com\n+;; libgcc1 routines for the Hitachi H8/300 CPU.\n+;; Contributed by Steve Chamberlain <sac@cygnus.com>\n \n-/* Copyright (C) 1994 Free Software Foundation, Inc.\n+/* Copyright (C) 1994, 2000 Free Software Foundation, Inc.\n \n This file is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the"}]}