{"sha": "81a478c889889e61d8fb27626276a6da1d6c01a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFhNDc4Yzg4OTg4OWU2MWQ4ZmIyNzYyNjI3NmE2ZGExZDZjMDFhMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2011-09-05T19:39:27Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-09-05T19:39:27Z"}, "message": "re PR target/49606 (mips64: o64 Unrecognizable insn when one noreturn function calling another noreturn function)\n\ngcc/\n\tPR target/49606\n\t* config/mips/mips.h (ABI_HAS_64BIT_SYMBOLS): Check Pmode.\n\t(PMODE_INSN): New macro.\n\t* config/mips/mips.c (gen_load_const_gp): Use PMODE_INSN.\n\t(mips_got_load, mips_expand_synci_loop): Likewise.\n\t(mips_save_gp_to_cprestore_slot): Handle SImode and DImode\n\tcprestore patterns.\n\t(mips_emit_loadgp): Use PMODE_INSN.  Handle SImode and DImode\n\tcopygp_mips16 patterns.\n\t(mips_expand_prologue): Handle SImode and DImode potential_cprestore\n\tand use_cprestore patterns.\n\t(mips_override_options): Check for incompatible -mabi and -mlong\n\tcombinations.\n\t* config/mips/mips.md (unspec_got<mode>): Rename to...\n\t(unspec_got_<mode>): ...this.\n\t(copygp_mips16): Use the Pmode iterator.\n\t(potential_cprestore, cprestore, use_cprestore): Likewise.\n\t(clear_cache, indirect_jump): Use PMODE_INSN.\n\t(indirect_jump<mode>): Rename to...\n\t(indirect_jump_<mode>): ...this.\n\t(tablejump): Use PMODE_INSN.\n\t(tablejump<mode>): Rename to...\n\t(tablejump_<mode>): ...this.\n\t(exception_receiver): Handle restore_gp_si and restore_gp_di.\n\t(restore_gp): Use the Pmode iterator.\n\t* config/mips/mips-dsp.md (mips_lbux, mips_lhx, mips_lwx): Use\n\tPMODE_INSN.\n\ngcc/testsuite/\n\tPR target/49606\n\t* gcc.target/mips/abi-main.h: New file.\n\t* gcc.target/mips/abi-o32-long32.c: New test.\n\t* gcc.target/mips/abi-o32-long64.c: Likewise.\n\t* gcc.target/mips/abi-o64-long32.c: Likewise.\n\t* gcc.target/mips/abi-o64-long64.c: Likewise.\n\t* gcc.target/mips/abi-n32-long32.c: Likewise.\n\t* gcc.target/mips/abi-n32-long64.c: Likewise.\n\t* gcc.target/mips/abi-n64-long32.c: Likewise.\n\t* gcc.target/mips/abi-n64-long64.c: Likewise.\n\t* gcc.target/mips/abi-o32-long32-no-shared.c: Likewise.\n\t* gcc.target/mips/abi-o32-long64-no-shared.c: Likewise.\n\t* gcc.target/mips/abi-o64-long32-no-shared.c: Likewise.\n\t* gcc.target/mips/abi-o64-long64-no-shared.c: Likewise.\n\t* gcc.target/mips/abi-n32-long32-no-shared.c: Likewise.\n\t* gcc.target/mips/abi-n32-long64-no-shared.c: Likewise.\n\t* gcc.target/mips/abi-n64-long32-no-shared.c: Likewise.\n\t* gcc.target/mips/abi-n64-long64-no-shared.c: Likewise.\n\t* gcc.target/mips/abi-o32-long32-pic.c: Likewise.\n\t* gcc.target/mips/abi-o32-long64-pic.c: Likewise.\n\t* gcc.target/mips/abi-o64-long32-pic.c: Likewise.\n\t* gcc.target/mips/abi-o64-long64-pic.c: Likewise.\n\t* gcc.target/mips/abi-n32-long32-pic.c: Likewise.\n\t* gcc.target/mips/abi-n32-long64-pic.c: Likewise.\n\t* gcc.target/mips/abi-n64-long32-pic.c: Likewise.\n\t* gcc.target/mips/abi-n64-long64-pic.c: Likewise.\n\t* gcc.target/mips/abi-eabi32-long32.c: Likewise.\n\t* gcc.target/mips/abi-eabi32-long64.c: Likewise.\n\t* gcc.target/mips/abi-eabi64-long32.c: Likewise.\n\t* gcc.target/mips/abi-eabi64-long64.c: Likewise.\n\t* gcc.target/mips/mips.exp: Make -mshared implied -mabicalls.\n\t* gcc.target/mips/branch-2.c: Remove -mabicalls.\n\t* gcc.target/mips/branch-3.c: Likewise.\n\t* gcc.target/mips/branch-4.c: Likewise.\n\t* gcc.target/mips/branch-5.c: Likewise.\n\t* gcc.target/mips/branch-6.c: Likewise.\n\t* gcc.target/mips/branch-7.c: Likewise.\n\t* gcc.target/mips/branch-8.c: Likewise.\n\t* gcc.target/mips/branch-9.c: Likewise.\n\t* gcc.target/mips/branch-10.c: Likewise.\n\t* gcc.target/mips/branch-11.c: Likewise.\n\t* gcc.target/mips/branch-12.c: Likewise.\n\t* gcc.target/mips/branch-13.c: Likewise.\n\t* gcc.target/mips/lazy-binding-1.c: Likewise.\n\nFrom-SVN: r178557", "tree": {"sha": "d039e4100665e17742b2be46bda90e616e429283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d039e4100665e17742b2be46bda90e616e429283"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81a478c889889e61d8fb27626276a6da1d6c01a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a478c889889e61d8fb27626276a6da1d6c01a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81a478c889889e61d8fb27626276a6da1d6c01a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a478c889889e61d8fb27626276a6da1d6c01a1/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ab9ec7b7fa55245a78720a49e9284fd64d04536", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab9ec7b7fa55245a78720a49e9284fd64d04536", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab9ec7b7fa55245a78720a49e9284fd64d04536"}], "stats": {"total": 408, "additions": 320, "deletions": 88}, "files": [{"sha": "ab45df421144a71046e573e7fb830fb9a88cc85a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -1,3 +1,33 @@\n+2011-09-05  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR target/49606\n+\t* config/mips/mips.h (ABI_HAS_64BIT_SYMBOLS): Check Pmode.\n+\t(PMODE_INSN): New macro.\n+\t* config/mips/mips.c (gen_load_const_gp): Use PMODE_INSN.\n+\t(mips_got_load, mips_expand_synci_loop): Likewise.\n+\t(mips_save_gp_to_cprestore_slot): Handle SImode and DImode\n+\tcprestore patterns.\n+\t(mips_emit_loadgp): Use PMODE_INSN.  Handle SImode and DImode\n+\tcopygp_mips16 patterns.\n+\t(mips_expand_prologue): Handle SImode and DImode potential_cprestore\n+\tand use_cprestore patterns.\n+\t(mips_override_options): Check for incompatible -mabi and -mlong\n+\tcombinations.\n+\t* config/mips/mips.md (unspec_got<mode>): Rename to...\n+\t(unspec_got_<mode>): ...this.\n+\t(copygp_mips16): Use the Pmode iterator.\n+\t(potential_cprestore, cprestore, use_cprestore): Likewise.\n+\t(clear_cache, indirect_jump): Use PMODE_INSN.\n+\t(indirect_jump<mode>): Rename to...\n+\t(indirect_jump_<mode>): ...this.\n+\t(tablejump): Use PMODE_INSN.\n+\t(tablejump<mode>): Rename to...\n+\t(tablejump_<mode>): ...this.\n+\t(exception_receiver): Handle restore_gp_si and restore_gp_di.\n+\t(restore_gp): Use the Pmode iterator.\n+\t* config/mips/mips-dsp.md (mips_lbux, mips_lhx, mips_lwx): Use\n+\tPMODE_INSN.\n+\n 2011-09-05  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/mips/mips.c (mips_gimplify_va_arg_expr): Unshare off."}, {"sha": "0f73d08502ecca785f8c20efc732c44938bae2fe", "filename": "gcc/config/mips/mips-dsp.md", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Fconfig%2Fmips%2Fmips-dsp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Fconfig%2Fmips%2Fmips-dsp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-dsp.md?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -1105,10 +1105,8 @@\n   \"ISA_HAS_DSP\"\n {\n   operands[2] = convert_to_mode (Pmode, operands[2], false);\n-  if (Pmode == SImode)\n-    emit_insn (gen_mips_lbux_si (operands[0], operands[1], operands[2]));\n-  else\n-    emit_insn (gen_mips_lbux_di (operands[0], operands[1], operands[2]));\n+  emit_insn (PMODE_INSN (gen_mips_lbux,\n+\t\t\t (operands[0], operands[1], operands[2])));\n   DONE;\n })\n \n@@ -1129,10 +1127,8 @@\n   \"ISA_HAS_DSP\"\n {\n   operands[2] = convert_to_mode (Pmode, operands[2], false);\n-  if (Pmode == SImode)\n-    emit_insn (gen_mips_lhx_si (operands[0], operands[1], operands[2]));\n-  else\n-    emit_insn (gen_mips_lhx_di (operands[0], operands[1], operands[2]));\n+  emit_insn (PMODE_INSN (gen_mips_lhx,\n+\t\t\t (operands[0], operands[1], operands[2])));\n   DONE;\n })\n \n@@ -1153,10 +1149,8 @@\n   \"ISA_HAS_DSP\"\n {\n   operands[2] = convert_to_mode (Pmode, operands[2], false);\n-  if (Pmode == SImode)\n-    emit_insn (gen_mips_lwx_si (operands[0], operands[1], operands[2]));\n-  else\n-    emit_insn (gen_mips_lwx_di (operands[0], operands[1], operands[2]));\n+  emit_insn (PMODE_INSN (gen_mips_lwx,\n+\t\t\t (operands[0], operands[1], operands[2])));\n   DONE;\n })\n "}, {"sha": "a0e93c53bb2825c732dc75b60fc4a42179112478", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 40, "deletions": 24, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -2522,9 +2522,7 @@ mips_unspec_offset_high (rtx temp, rtx base, rtx addr,\n static rtx\n gen_load_const_gp (rtx reg)\n {\n-  return (Pmode == SImode\n-\t  ? gen_load_const_gp_si (reg)\n-\t  : gen_load_const_gp_di (reg));\n+  return PMODE_INSN (gen_load_const_gp, (reg));\n }\n \n /* Return a pseudo register that contains the value of $gp throughout\n@@ -2626,9 +2624,7 @@ mips_got_load (rtx temp, rtx addr, enum mips_symbol_type type)\n   if (type == SYMBOL_GOTOFF_CALL)\n     return mips_unspec_call (high, lo_sum_symbol);\n   else\n-    return (Pmode == SImode\n-\t    ? gen_unspec_gotsi (high, lo_sum_symbol)\n-\t    : gen_unspec_gotdi (high, lo_sum_symbol));\n+    return PMODE_INSN (gen_unspec_got, (high, lo_sum_symbol));\n }\n \n /* If MODE is MAX_MACHINE_MODE, ADDR appears as a move operand, otherwise\n@@ -6676,9 +6672,7 @@ mips_expand_synci_loop (rtx begin, rtx end)\n \n   /* Load INC with the cache line size (rdhwr INC,$1).  */\n   inc = gen_reg_rtx (Pmode);\n-  emit_insn (Pmode == SImode\n-\t     ? gen_rdhwr_synci_step_si (inc)\n-\t     : gen_rdhwr_synci_step_di (inc));\n+  emit_insn (PMODE_INSN (gen_rdhwr_synci_step, (inc)));\n \n   /* Check if inc is 0.  */\n   cmp_result = gen_rtx_EQ (VOIDmode, inc, const0_rtx);\n@@ -9526,7 +9520,7 @@ mips_save_gp_to_cprestore_slot (rtx mem, rtx offset, rtx gp, rtx temp)\n   if (TARGET_CPRESTORE_DIRECTIVE)\n     {\n       gcc_assert (gp == pic_offset_table_rtx);\n-      emit_insn (gen_cprestore (mem, offset));\n+      emit_insn (PMODE_INSN (gen_cprestore, (mem, offset)));\n     }\n   else\n     mips_emit_move (mips_cprestore_slot (temp, false), gp);\n@@ -9913,9 +9907,8 @@ mips_emit_loadgp (void)\n \t  mips_gnu_local_gp = gen_rtx_SYMBOL_REF (Pmode, \"__gnu_local_gp\");\n \t  SYMBOL_REF_FLAGS (mips_gnu_local_gp) |= SYMBOL_FLAG_LOCAL;\n \t}\n-      emit_insn (Pmode == SImode\n-\t\t ? gen_loadgp_absolute_si (pic_reg, mips_gnu_local_gp)\n-\t\t : gen_loadgp_absolute_di (pic_reg, mips_gnu_local_gp));\n+      emit_insn (PMODE_INSN (gen_loadgp_absolute,\n+\t\t\t     (pic_reg, mips_gnu_local_gp)));\n       break;\n \n     case LOADGP_OLDABI:\n@@ -9926,25 +9919,23 @@ mips_emit_loadgp (void)\n       addr = XEXP (DECL_RTL (current_function_decl), 0);\n       offset = mips_unspec_address (addr, SYMBOL_GOTOFF_LOADGP);\n       incoming_address = gen_rtx_REG (Pmode, PIC_FUNCTION_ADDR_REGNUM);\n-      emit_insn (Pmode == SImode\n-\t\t ? gen_loadgp_newabi_si (pic_reg, offset, incoming_address)\n-\t\t : gen_loadgp_newabi_di (pic_reg, offset, incoming_address));\n+      emit_insn (PMODE_INSN (gen_loadgp_newabi,\n+\t\t\t     (pic_reg, offset, incoming_address)));\n       break;\n \n     case LOADGP_RTP:\n       base = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (VXWORKS_GOTT_BASE));\n       index = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (VXWORKS_GOTT_INDEX));\n-      emit_insn (Pmode == SImode\n-\t\t ? gen_loadgp_rtp_si (pic_reg, base, index)\n-\t\t : gen_loadgp_rtp_di (pic_reg, base, index));\n+      emit_insn (PMODE_INSN (gen_loadgp_rtp, (pic_reg, base, index)));\n       break;\n \n     default:\n       return;\n     }\n \n   if (TARGET_MIPS16)\n-    emit_insn (gen_copygp_mips16 (pic_offset_table_rtx, pic_reg));\n+    emit_insn (PMODE_INSN (gen_copygp_mips16,\n+\t\t\t   (pic_offset_table_rtx, pic_reg)));\n \n   /* Emit a blockage if there are implicit uses of the GP register.\n      This includes profiled functions, because FUNCTION_PROFILE uses\n@@ -10200,11 +10191,12 @@ mips_expand_prologue (void)\n       temp = (SMALL_OPERAND (offset)\n \t      ? gen_rtx_SCRATCH (Pmode)\n \t      : MIPS_PROLOGUE_TEMP (Pmode));\n-      emit_insn (gen_potential_cprestore (mem, GEN_INT (offset), gp, temp));\n+      emit_insn (PMODE_INSN (gen_potential_cprestore,\n+\t\t\t     (mem, GEN_INT (offset), gp, temp)));\n \n       mips_get_cprestore_base_and_offset (&base, &offset, true);\n       mem = gen_frame_mem (Pmode, plus_constant (base, offset));\n-      emit_insn (gen_use_cprestore (mem));\n+      emit_insn (PMODE_INSN (gen_use_cprestore, (mem)));\n     }\n \n   /* We need to search back to the last use of K0 or K1.  */\n@@ -15400,8 +15392,32 @@ mips_option_override (void)\n \n   /* End of code shared with GAS.  */\n \n-  /* If no -mlong* option was given, infer it from the other options.  */\n-  if ((target_flags_explicit & MASK_LONG64) == 0)\n+  /* If a -mlong* option was given, check that it matches the ABI,\n+     otherwise infer the -mlong* setting from the other options.  */\n+  if ((target_flags_explicit & MASK_LONG64) != 0)\n+    {\n+      if (TARGET_LONG64)\n+\t{\n+\t  if (mips_abi == ABI_N32)\n+\t    error (\"%qs is incompatible with %qs\", \"-mabi=n32\", \"-mlong64\");\n+\t  else if (mips_abi == ABI_32)\n+\t    error (\"%qs is incompatible with %qs\", \"-mabi=32\", \"-mlong64\");\n+\t  else if (mips_abi == ABI_O64 && TARGET_ABICALLS)\n+\t    /* We have traditionally allowed non-abicalls code to use\n+\t       an LP64 form of o64.  However, it would take a bit more\n+\t       effort to support the combination of 32-bit GOT entries\n+\t       and 64-bit pointers, so we treat the abicalls case as\n+\t       an error.  */\n+\t    error (\"the combination of %qs and %qs is incompatible with %qs\",\n+\t\t   \"-mabi=o64\", \"-mabicalls\", \"-mlong64\");\n+\t}\n+      else\n+\t{\n+\t  if (mips_abi == ABI_64)\n+\t    error (\"%qs is incompatible with %qs\", \"-mabi=64\", \"-mlong32\");\n+\t}\n+    }\n+  else\n     {\n       if ((mips_abi == ABI_EABI && TARGET_64BIT) || mips_abi == ABI_64)\n \ttarget_flags |= MASK_LONG64;"}, {"sha": "236afbb4a34cfd3e3f02020e0012c06a94f93c53", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -792,7 +792,9 @@ struct mips_cpu_info {\n    the ABI's file format, but it can be overridden by -msym32.  Note that\n    overriding the size with -msym32 changes the ABI of relocatable objects,\n    although it doesn't change the ABI of a fully-linked object.  */\n-#define ABI_HAS_64BIT_SYMBOLS\t(FILE_HAS_64BIT_SYMBOLS && !TARGET_SYM32)\n+#define ABI_HAS_64BIT_SYMBOLS\t(FILE_HAS_64BIT_SYMBOLS \\\n+\t\t\t\t && Pmode == DImode\t\\\n+\t\t\t\t && !TARGET_SYM32)\n \n /* ISA has instructions for managing 64-bit fp and gp regs (e.g. mips3).  */\n #define ISA_HAS_64BIT_REGS\t(ISA_MIPS3\t\t\t\t\\\n@@ -2916,3 +2918,10 @@ extern GTY(()) struct target_globals *mips16_globals;\n \n /* For switching between MIPS16 and non-MIPS16 modes.  */\n #define SWITCHABLE_TARGET 1\n+\n+/* Several named MIPS patterns depend on Pmode.  These patterns have the\n+   form <NAME>_si for Pmode == SImode and <NAME>_di for Pmode == DImode.\n+   Add the appropriate suffix to generator function NAME and invoke it\n+   with arguments ARGS.  */\n+#define PMODE_INSN(NAME, ARGS) \\\n+  (Pmode == SImode ? NAME ## _si ARGS : NAME ## _di ARGS)"}, {"sha": "de953211523c624884da52c479c139e20a01b4d5", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 32, "deletions": 38, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -3866,7 +3866,7 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; Convenience expander that generates the rhs of a load_got<mode> insn.\n-(define_expand \"unspec_got<mode>\"\n+(define_expand \"unspec_got_<mode>\"\n   [(unspec:P [(match_operand:P 0)\n \t      (match_operand:P 1)] UNSPEC_LOAD_GOT)])\n \n@@ -4783,10 +4783,10 @@\n ;; Initialize the global pointer for MIPS16 code.  Operand 0 is the\n ;; global pointer and operand 1 is the MIPS16 register that holds\n ;; the required value.\n-(define_insn_and_split \"copygp_mips16\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=y\")\n-\t(unspec:SI [(match_operand:SI 1 \"register_operand\" \"d\")]\n-\t\t   UNSPEC_COPYGP))]\n+(define_insn_and_split \"copygp_mips16_<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=y\")\n+\t(unspec:P [(match_operand:P 1 \"register_operand\" \"d\")]\n+\t\t  UNSPEC_COPYGP))]\n   \"TARGET_MIPS16\"\n   { return mips_must_initialize_gp_p () ? \"#\" : \"\"; }\n   \"&& mips_must_initialize_gp_p ()\"\n@@ -4800,12 +4800,12 @@\n ;;\n ;; The \"cprestore\" pattern requires operand 2 to be pic_offset_table_rtx,\n ;; otherwise any register that holds the correct value will do.\n-(define_insn_and_split \"potential_cprestore\"\n-  [(set (match_operand:SI 0 \"cprestore_save_slot_operand\" \"=X,X\")\n-\t(unspec:SI [(match_operand:SI 1 \"const_int_operand\" \"I,i\")\n-\t\t    (match_operand:SI 2 \"register_operand\" \"d,d\")]\n-\t\t   UNSPEC_POTENTIAL_CPRESTORE))\n-   (clobber (match_operand:SI 3 \"scratch_operand\" \"=X,&d\"))]\n+(define_insn_and_split \"potential_cprestore_<mode>\"\n+  [(set (match_operand:P 0 \"cprestore_save_slot_operand\" \"=X,X\")\n+\t(unspec:P [(match_operand:P 1 \"const_int_operand\" \"I,i\")\n+\t\t   (match_operand:P 2 \"register_operand\" \"d,d\")]\n+\t\t  UNSPEC_POTENTIAL_CPRESTORE))\n+   (clobber (match_operand:P 3 \"scratch_operand\" \"=X,&d\"))]\n   \"!TARGET_CPRESTORE_DIRECTIVE || operands[2] == pic_offset_table_rtx\"\n   { return mips_must_initialize_gp_p () ? \"#\" : \"\"; }\n   \"mips_must_initialize_gp_p ()\"\n@@ -4822,11 +4822,11 @@\n ;; for the cprestore slot.  Operand 1 is the offset of the slot from\n ;; the stack pointer.  (This is redundant with operand 0, but it makes\n ;; things a little simpler.)\n-(define_insn \"cprestore\"\n-  [(set (match_operand:SI 0 \"cprestore_save_slot_operand\" \"=X,X\")\n-\t(unspec:SI [(match_operand:SI 1 \"const_int_operand\" \"I,i\")\n-\t\t    (reg:SI 28)]\n-\t\t   UNSPEC_CPRESTORE))]\n+(define_insn \"cprestore_<mode>\"\n+  [(set (match_operand:P 0 \"cprestore_save_slot_operand\" \"=X,X\")\n+\t(unspec:P [(match_operand:P 1 \"const_int_operand\" \"I,i\")\n+\t\t   (reg:P 28)]\n+\t\t  UNSPEC_CPRESTORE))]\n   \"TARGET_CPRESTORE_DIRECTIVE\"\n {\n   if (mips_nomacro.nesting_level > 0 && which_alternative == 1)\n@@ -4837,9 +4837,9 @@\n   [(set_attr \"type\" \"store\")\n    (set_attr \"length\" \"4,12\")])\n \n-(define_insn \"use_cprestore\"\n-  [(set (reg:SI CPRESTORE_SLOT_REGNUM)\n-\t(match_operand:SI 0 \"cprestore_load_slot_operand\"))]\n+(define_insn \"use_cprestore_<mode>\"\n+  [(set (reg:P CPRESTORE_SLOT_REGNUM)\n+\t(match_operand:P 0 \"cprestore_load_slot_operand\"))]\n   \"\"\n   \"\"\n   [(set_attr \"type\" \"ghost\")])\n@@ -4856,9 +4856,7 @@\n     {\n       mips_expand_synci_loop (operands[0], operands[1]);\n       emit_insn (gen_sync ());\n-      emit_insn (Pmode == SImode\n-\t\t ? gen_clear_hazard_si ()\n-\t\t : gen_clear_hazard_di ());\n+      emit_insn (PMODE_INSN (gen_clear_hazard, ()));\n     }\n   else if (mips_cache_flush_func && mips_cache_flush_func[0])\n     {\n@@ -5567,14 +5565,11 @@\n   \"\"\n {\n   operands[0] = force_reg (Pmode, operands[0]);\n-  if (Pmode == SImode)\n-    emit_jump_insn (gen_indirect_jumpsi (operands[0]));\n-  else\n-    emit_jump_insn (gen_indirect_jumpdi (operands[0]));\n+  emit_jump_insn (PMODE_INSN (gen_indirect_jump, (operands[0])));\n   DONE;\n })\n \n-(define_insn \"indirect_jump<mode>\"\n+(define_insn \"indirect_jump_<mode>\"\n   [(set (pc) (match_operand:P 0 \"register_operand\" \"d\"))]\n   \"\"\n   \"%*j\\t%0%/\"\n@@ -5605,14 +5600,11 @@\n \t\t\t\t  start, 0, 0, OPTAB_WIDEN);\n     }\n \n-  if (Pmode == SImode)\n-    emit_jump_insn (gen_tablejumpsi (operands[0], operands[1]));\n-  else\n-    emit_jump_insn (gen_tablejumpdi (operands[0], operands[1]));\n+  emit_jump_insn (PMODE_INSN (gen_tablejump, (operands[0], operands[1])));\n   DONE;\n })\n \n-(define_insn \"tablejump<mode>\"\n+(define_insn \"tablejump_<mode>\"\n   [(set (pc)\n \t(match_operand:P 0 \"register_operand\" \"d\"))\n    (use (label_ref (match_operand 1 \"\" \"\")))]\n@@ -5844,8 +5836,10 @@\n   emit_insn (gen_set_got_version ());\n \n   /* If we have a call-clobbered $gp, restore it from its save slot.  */\n-  if (HAVE_restore_gp)\n-    emit_insn (gen_restore_gp ());\n+  if (HAVE_restore_gp_si)\n+    emit_insn (gen_restore_gp_si ());\n+  else if (HAVE_restore_gp_di)\n+    emit_insn (gen_restore_gp_di ());\n   DONE;\n })\n \n@@ -5860,10 +5854,10 @@\n \n ;; Restore $gp from its .cprestore stack slot.  The instruction remains\n ;; volatile until all uses of $28 are exposed.\n-(define_insn_and_split \"restore_gp\"\n-  [(set (reg:SI 28)\n-\t(unspec_volatile:SI [(const_int 0)] UNSPEC_RESTORE_GP))\n-   (clobber (match_scratch:SI 0 \"=&d\"))]\n+(define_insn_and_split \"restore_gp_<mode>\"\n+  [(set (reg:P 28)\n+\t(unspec_volatile:P [(const_int 0)] UNSPEC_RESTORE_GP))\n+   (clobber (match_scratch:P 0 \"=&d\"))]\n   \"TARGET_CALL_CLOBBERED_GP\"\n   \"#\"\n   \"&& epilogue_completed\""}, {"sha": "0f24c9d682c80112d0034eb122d8a74bd25562db", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -1,3 +1,50 @@\n+2011-09-05  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR target/49606\n+\t* gcc.target/mips/abi-main.h: New file.\n+\t* gcc.target/mips/abi-o32-long32.c: New test.\n+\t* gcc.target/mips/abi-o32-long64.c: Likewise.\n+\t* gcc.target/mips/abi-o64-long32.c: Likewise.\n+\t* gcc.target/mips/abi-o64-long64.c: Likewise.\n+\t* gcc.target/mips/abi-n32-long32.c: Likewise.\n+\t* gcc.target/mips/abi-n32-long64.c: Likewise.\n+\t* gcc.target/mips/abi-n64-long32.c: Likewise.\n+\t* gcc.target/mips/abi-n64-long64.c: Likewise.\n+\t* gcc.target/mips/abi-o32-long32-no-shared.c: Likewise.\n+\t* gcc.target/mips/abi-o32-long64-no-shared.c: Likewise.\n+\t* gcc.target/mips/abi-o64-long32-no-shared.c: Likewise.\n+\t* gcc.target/mips/abi-o64-long64-no-shared.c: Likewise.\n+\t* gcc.target/mips/abi-n32-long32-no-shared.c: Likewise.\n+\t* gcc.target/mips/abi-n32-long64-no-shared.c: Likewise.\n+\t* gcc.target/mips/abi-n64-long32-no-shared.c: Likewise.\n+\t* gcc.target/mips/abi-n64-long64-no-shared.c: Likewise.\n+\t* gcc.target/mips/abi-o32-long32-pic.c: Likewise.\n+\t* gcc.target/mips/abi-o32-long64-pic.c: Likewise.\n+\t* gcc.target/mips/abi-o64-long32-pic.c: Likewise.\n+\t* gcc.target/mips/abi-o64-long64-pic.c: Likewise.\n+\t* gcc.target/mips/abi-n32-long32-pic.c: Likewise.\n+\t* gcc.target/mips/abi-n32-long64-pic.c: Likewise.\n+\t* gcc.target/mips/abi-n64-long32-pic.c: Likewise.\n+\t* gcc.target/mips/abi-n64-long64-pic.c: Likewise.\n+\t* gcc.target/mips/abi-eabi32-long32.c: Likewise.\n+\t* gcc.target/mips/abi-eabi32-long64.c: Likewise.\n+\t* gcc.target/mips/abi-eabi64-long32.c: Likewise.\n+\t* gcc.target/mips/abi-eabi64-long64.c: Likewise.\n+\t* gcc.target/mips/mips.exp: Make -mshared implied -mabicalls.\n+\t* gcc.target/mips/branch-2.c: Remove -mabicalls.\n+\t* gcc.target/mips/branch-3.c: Likewise.\n+\t* gcc.target/mips/branch-4.c: Likewise.\n+\t* gcc.target/mips/branch-5.c: Likewise.\n+\t* gcc.target/mips/branch-6.c: Likewise.\n+\t* gcc.target/mips/branch-7.c: Likewise.\n+\t* gcc.target/mips/branch-8.c: Likewise.\n+\t* gcc.target/mips/branch-9.c: Likewise.\n+\t* gcc.target/mips/branch-10.c: Likewise.\n+\t* gcc.target/mips/branch-11.c: Likewise.\n+\t* gcc.target/mips/branch-12.c: Likewise.\n+\t* gcc.target/mips/branch-13.c: Likewise.\n+\t* gcc.target/mips/lazy-binding-1.c: Likewise.\n+\n 2011-09-05  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* gcc.dg/ipa/ipcp-3.c (mark_cell): Use mask 1 << 14 instead of 1"}, {"sha": "ebc5dd67240f15518457c7fe202ae9b160f7e68c", "filename": "gcc/testsuite/gcc.target/mips/abi-eabi32-long32.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-eabi32-long32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-eabi32-long32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-eabi32-long32.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-options \"-mabi=eabi -mgp32 -mlong32 -O2\" } */\n+#include \"abi-main.h\""}, {"sha": "5a776eca988ce320b12ba6390a640b1bd790783c", "filename": "gcc/testsuite/gcc.target/mips/abi-eabi32-long64.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-eabi32-long64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-eabi32-long64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-eabi32-long64.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-options \"-mabi=eabi -mgp32 -mlong64 -O2\" } */\n+#include \"abi-main.h\""}, {"sha": "3882e48fa350ded5cc675a94ca64f9a1649508da", "filename": "gcc/testsuite/gcc.target/mips/abi-eabi64-long32.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-eabi64-long32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-eabi64-long32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-eabi64-long32.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-options \"-mabi=eabi -mgp64 -mlong32 -O2\" } */\n+#include \"abi-main.h\""}, {"sha": "5569bf521e82e96864acd211351be0990d227d86", "filename": "gcc/testsuite/gcc.target/mips/abi-eabi64-long64.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-eabi64-long64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-eabi64-long64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-eabi64-long64.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-options \"-mabi=eabi -mgp64 -mlong64 -O2\" } */\n+#include \"abi-main.h\""}, {"sha": "f47a2e30492c8a0fc82747c42dd0a31c01cd6b4c", "filename": "gcc/testsuite/gcc.target/mips/abi-main.h", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-main.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-main.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-main.h?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,74 @@\n+#define FOR_EACH_SCALAR(F)\t\\\n+  F(sc, signed char)\t\t\\\n+  F(uc, unsigned char)\t\t\\\n+  F(ss, short)\t\t\t\\\n+  F(us, unsigned short)\t\t\\\n+  F(si, int)\t\t\t\\\n+  F(ui, unsigned int)\t\t\\\n+  F(sl, long)\t\t\t\\\n+  F(ul, unsigned long)\t\t\\\n+  F(sll, long long)\t\t\\\n+  F(ull, unsigned long long)\t\\\n+  F(f, float)\t\t\t\\\n+  F(d, double)\t\t\t\\\n+  F(ld, long double)\t\t\\\n+  F(ptr, void *)\n+\n+#define EXTERN(SUFFIX, TYPE) extern TYPE x##SUFFIX;\n+#define STATIC(SUFFIX, TYPE) static TYPE s##SUFFIX;\n+#define COMMON(SUFFIX, TYPE) TYPE c##SUFFIX;\n+\n+#define GETADDR(SUFFIX, TYPE)\t\t\t\\\n+  TYPE *get##SUFFIX (int which)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    return (which == 0 ? &c##SUFFIX\t\t\\\n+\t    : which == 1 ? &s##SUFFIX\t\t\\\n+\t    : &x##SUFFIX);\t\t\t\\\n+  }\n+\n+#define COPY(SUFFIX, TYPE) c##SUFFIX = s##SUFFIX; s##SUFFIX = x##SUFFIX;\n+\n+FOR_EACH_SCALAR (EXTERN)\n+FOR_EACH_SCALAR (STATIC)\n+FOR_EACH_SCALAR (COMMON)\n+\n+FOR_EACH_SCALAR (GETADDR)\n+\n+void\n+copy (void)\n+{\n+  FOR_EACH_SCALAR (COPY);\n+}\n+\n+extern void foo (int);\n+\n+void\n+sibcall1 (void)\n+{\n+  foo (1);\n+}\n+\n+void\n+sibcall2 (void)\n+{\n+  foo (csi + ssi + xsi);\n+}\n+\n+static void\n+sibcall3 (void)\n+{\n+  foo (1);\n+  foo (2);\n+  foo (3);\n+}\n+\n+extern void bar (void (*) (void));\n+\n+int\n+nested (int x)\n+{\n+  void sub (void) { foo (x); }\n+  bar (sub);\n+  bar (sibcall3);\n+  return 1;\n+}"}, {"sha": "5cab4c97a6253bfbb4fbcef38b3c29144d35be47", "filename": "gcc/testsuite/gcc.target/mips/abi-n32-long32-no-shared.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n32-long32-no-shared.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n32-long32-no-shared.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n32-long32-no-shared.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-options \"-mabi=n32 -mlong32 -mabicalls -mno-shared -mno-plt -O2\" } */\n+#include \"abi-main.h\""}, {"sha": "eb455da96a83d40f0eaadfdbbdeec5fd225add40", "filename": "gcc/testsuite/gcc.target/mips/abi-n32-long32-pic.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n32-long32-pic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n32-long32-pic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n32-long32-pic.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-options \"-mabi=n32 -mlong32 -fpic -O2\" } */\n+#include \"abi-main.h\""}, {"sha": "6a0f7023c9df806f25408abc97d7c4c14e82dce5", "filename": "gcc/testsuite/gcc.target/mips/abi-n32-long32.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n32-long32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n32-long32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n32-long32.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-options \"-mabi=n32 -mlong32 addressing=absolute -O2\" } */\n+#include \"abi-main.h\""}, {"sha": "3edf86787cb5c259ccc5b0c24ed6c6d798d56ddb", "filename": "gcc/testsuite/gcc.target/mips/abi-n32-long64-no-shared.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n32-long64-no-shared.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n32-long64-no-shared.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n32-long64-no-shared.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-mabi=n32 -mlong64 -mabicalls -mno-shared -mno-plt -O2\" } */\n+/* { dg-error \"is incompatible with\" \"\" { target *-*-* } 0 } */\n+#include \"abi-main.h\""}, {"sha": "b444209e3b9754e5990812b58e094a96a32a89b5", "filename": "gcc/testsuite/gcc.target/mips/abi-n32-long64-pic.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n32-long64-pic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n32-long64-pic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n32-long64-pic.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-mabi=n32 -mlong64 -fpic -O2\" } */\n+/* { dg-error \"is incompatible with\" \"\" { target *-*-* } 0 } */\n+#include \"abi-main.h\""}, {"sha": "868719c445fd7433d6644f4f41d18329df2f9eec", "filename": "gcc/testsuite/gcc.target/mips/abi-n32-long64.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n32-long64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n32-long64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n32-long64.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-mabi=n32 -mlong64 addressing=absolute -O2\" } */\n+/* { dg-error \"is incompatible with\" \"\" { target *-*-* } 0 } */\n+#include \"abi-main.h\""}, {"sha": "b268d888a46d2867d3dd04ab5d53131bcef7937c", "filename": "gcc/testsuite/gcc.target/mips/abi-n64-long32-no-shared.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n64-long32-no-shared.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n64-long32-no-shared.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n64-long32-no-shared.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-mabi=64 -mlong32 -mabicalls -mno-shared -mno-plt -O2\" } */\n+/* { dg-error \"is incompatible with\" \"\" { target *-*-* } 0 } */\n+#include \"abi-main.h\""}, {"sha": "5a0d9172651869daa2ebbe4913b6690adf6836ad", "filename": "gcc/testsuite/gcc.target/mips/abi-n64-long32-pic.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n64-long32-pic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n64-long32-pic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n64-long32-pic.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-mabi=64 -mlong32 -fpic -O2\" } */\n+/* { dg-error \"is incompatible with\" \"\" { target *-*-* } 0 } */\n+#include \"abi-main.h\""}, {"sha": "4227169ec7ee07ddb151b1dbafb48b207afc2ce6", "filename": "gcc/testsuite/gcc.target/mips/abi-n64-long32.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n64-long32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n64-long32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n64-long32.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-mabi=64 -mlong32 addressing=absolute -O2\" } */\n+/* { dg-error \"is incompatible with\" \"\" { target *-*-* } 0 } */\n+#include \"abi-main.h\""}, {"sha": "5301cfc5b73fc10ea28c376dc5e0659df6d4bbcf", "filename": "gcc/testsuite/gcc.target/mips/abi-n64-long64-no-shared.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n64-long64-no-shared.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n64-long64-no-shared.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n64-long64-no-shared.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-options \"-mabi=64 -mlong64 -mabicalls -mno-shared -mno-plt -O2\" } */\n+#include \"abi-main.h\""}, {"sha": "f43e9157bad1011ce47f397e4b2b118a6a0466d7", "filename": "gcc/testsuite/gcc.target/mips/abi-n64-long64-pic.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n64-long64-pic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n64-long64-pic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n64-long64-pic.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-options \"-mabi=64 -mlong64 -fpic -O2\" } */\n+#include \"abi-main.h\""}, {"sha": "a670fe5af91c0da4703e17757c89d1c16791a982", "filename": "gcc/testsuite/gcc.target/mips/abi-n64-long64.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n64-long64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n64-long64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-n64-long64.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-options \"-mabi=64 -mlong64 addressing=absolute -O2\" } */\n+#include \"abi-main.h\""}, {"sha": "2032b36d9d0066eb9b07ae0a20d125e4e59ec9fc", "filename": "gcc/testsuite/gcc.target/mips/abi-o32-long32-no-shared.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o32-long32-no-shared.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o32-long32-no-shared.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o32-long32-no-shared.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-options \"-mabi=32 -mlong32 -mabicalls -mno-shared -mno-plt -O2\" } */\n+#include \"abi-main.h\""}, {"sha": "5a3e93effafa912990e48c1a5261d43b2a1d29f2", "filename": "gcc/testsuite/gcc.target/mips/abi-o32-long32-pic.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o32-long32-pic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o32-long32-pic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o32-long32-pic.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-options \"-mabi=32 -mlong32 -fpic -O2\" } */\n+#include \"abi-main.h\""}, {"sha": "bdb9464c74a142a06814ed305510647c1e14e445", "filename": "gcc/testsuite/gcc.target/mips/abi-o32-long32.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o32-long32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o32-long32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o32-long32.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-options \"-mabi=32 -mlong32 addressing=absolute -O2\" } */\n+#include \"abi-main.h\""}, {"sha": "6340b63252bb35c14fa45571ea5cfdb244e464e7", "filename": "gcc/testsuite/gcc.target/mips/abi-o32-long64-no-shared.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o32-long64-no-shared.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o32-long64-no-shared.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o32-long64-no-shared.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-mabi=32 -mlong64 -mabicalls -mno-shared -mno-plt -O2\" } */\n+/* { dg-error \"is incompatible with\" \"\" { target *-*-* } 0 } */\n+#include \"abi-main.h\""}, {"sha": "1583034b2a3def4e568bd1f694b13d97c9f26c98", "filename": "gcc/testsuite/gcc.target/mips/abi-o32-long64-pic.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o32-long64-pic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o32-long64-pic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o32-long64-pic.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-mabi=32 -mlong64 -fpic -O2\" } */\n+/* { dg-error \"is incompatible with\" \"\" { target *-*-* } 0 } */\n+#include \"abi-main.h\""}, {"sha": "4a88739b695e229c3aa082cee4c12c9be8f62095", "filename": "gcc/testsuite/gcc.target/mips/abi-o32-long64.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o32-long64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o32-long64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o32-long64.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-mabi=32 -mlong64 addressing=absolute -O2\" } */\n+/* { dg-error \"is incompatible with\" \"\" { target *-*-* } 0 } */\n+#include \"abi-main.h\""}, {"sha": "548ae0d4a13fe909d4a6efa068e5696a18651a23", "filename": "gcc/testsuite/gcc.target/mips/abi-o64-long32-no-shared.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long32-no-shared.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long32-no-shared.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long32-no-shared.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-options \"-mabi=o64 -mlong32 -mabicalls -mno-shared -mno-plt -O2\" } */\n+#include \"abi-main.h\""}, {"sha": "89d03ab674093450cd514177646ee017b093bbe3", "filename": "gcc/testsuite/gcc.target/mips/abi-o64-long32-pic.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long32-pic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long32-pic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long32-pic.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-options \"-mabi=o64 -mlong32 -fpic -O2\" } */\n+#include \"abi-main.h\""}, {"sha": "db5893e45274d08e301a64745691d37f667bfd5e", "filename": "gcc/testsuite/gcc.target/mips/abi-o64-long32.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long32.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-options \"-mabi=o64 -mlong32 addressing=absolute -O2\" } */\n+#include \"abi-main.h\""}, {"sha": "df164b22f6c92cb7f323cd45edaca88d8aa7bc2c", "filename": "gcc/testsuite/gcc.target/mips/abi-o64-long64-no-shared.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long64-no-shared.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long64-no-shared.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long64-no-shared.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-mabi=o64 -mlong64 -mabicalls -mno-shared -mno-plt -O2\" } */\n+/* { dg-error \"is incompatible with\" \"\" { target *-*-* } 0 } */\n+#include \"abi-main.h\""}, {"sha": "df58d1f0285fa310609ccb280f49412e26a98270", "filename": "gcc/testsuite/gcc.target/mips/abi-o64-long64-pic.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long64-pic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long64-pic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long64-pic.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-options \"-mabi=o64 -mlong64 -fpic -O2\" } */\n+/* { dg-error \"is incompatible with\" \"\" { target *-*-* } 0 } */\n+#include \"abi-main.h\""}, {"sha": "8177f5ab17a155d967eab60fac956e4acd21c53f", "filename": "gcc/testsuite/gcc.target/mips/abi-o64-long64.c", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fabi-o64-long64.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -0,0 +1,2 @@\n+/* { dg-options \"-mabi=o64 -mlong64 addressing=absolute -O2\" } */\n+#include \"abi-main.h\""}, {"sha": "8186030e6e1457f030ed4cfe8977c56f5488889c", "filename": "gcc/testsuite/gcc.target/mips/branch-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-10.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-mabicalls -mshared -mabi=n32\" } */\n+/* { dg-options \"-mshared -mabi=n32\" } */\n /* { dg-final { scan-assembler-not \"(\\\\\\$28|%gp_rel|%got)\" } } */\n /* { dg-final { scan-assembler-not \"\\tjr\\t\\\\\\$1\\n\" } } */\n "}, {"sha": "a314740655df7997787c140404875b4e4a706ad6", "filename": "gcc/testsuite/gcc.target/mips/branch-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-11.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-mabicalls -mshared -mabi=n32\" } */\n+/* { dg-options \"-mshared -mabi=n32\" } */\n /* { dg-final { scan-assembler \"\\tsd\\t\\\\\\$28,\" } } */\n /* { dg-final { scan-assembler \"\\tld\\t\\\\\\$28,\" } } */\n /* { dg-final { scan-assembler \"\\taddiu\\t\\\\\\$28,\\\\\\$28,%lo\\\\(%neg\\\\(%gp_rel\\\\(foo\\\\)\\\\)\\\\)\\n\" } } */"}, {"sha": "3e5b421cf87e745e59c924dabe14052f62637d7e", "filename": "gcc/testsuite/gcc.target/mips/branch-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-12.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-mabicalls -mshared -mabi=64\" } */\n+/* { dg-options \"-mshared -mabi=64\" } */\n /* { dg-final { scan-assembler-not \"(\\\\\\$28|%gp_rel|%got)\" } } */\n /* { dg-final { scan-assembler-not \"\\tjr\\t\\\\\\$1\\n\" } } */\n "}, {"sha": "9bd94146a6f4ad4b8f5e17fe2682f4b1fe2d6ae4", "filename": "gcc/testsuite/gcc.target/mips/branch-13.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-13.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-mabicalls -mshared -mabi=64\" } */\n+/* { dg-options \"-mshared -mabi=64\" } */\n /* { dg-final { scan-assembler \"\\tsd\\t\\\\\\$28,\" } } */\n /* { dg-final { scan-assembler \"\\tld\\t\\\\\\$28,\" } } */\n /* { dg-final { scan-assembler \"\\tdaddiu\\t\\\\\\$28,\\\\\\$28,%lo\\\\(%neg\\\\(%gp_rel\\\\(foo\\\\)\\\\)\\\\)\\n\" } } */"}, {"sha": "f6642cb87430282ed9d09e5bc91fd554a7f1e598", "filename": "gcc/testsuite/gcc.target/mips/branch-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-2.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-mabicalls -mshared -mabi=32\" } */\n+/* { dg-options \"-mshared -mabi=32\" } */\n /* { dg-final { scan-assembler-not \"(\\\\\\$25|\\\\\\$28|cpload)\" } } */\n /* { dg-final { scan-assembler-not \"\\tjr\\t\\\\\\$1\\n\" } } */\n /* { dg-final { scan-assembler-not \"cprestore\" } } */"}, {"sha": "198d6ec64844a2d3923e2c97df08ec81e475df6e", "filename": "gcc/testsuite/gcc.target/mips/branch-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-3.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-mabicalls -mshared -mabi=32\" } */\n+/* { dg-options \"-mshared -mabi=32\" } */\n /* { dg-final { scan-assembler \"\\t\\\\.cpload\\t\\\\\\$25\\n\" } } */\n /* { dg-final { scan-assembler \"\\tjr\\t\\\\\\$1\\n\" } } */\n /* { dg-final { scan-assembler-not \"cprestore\" } } */"}, {"sha": "31e4909e58fe3a54a0ba28362a83fd79d7a1694d", "filename": "gcc/testsuite/gcc.target/mips/branch-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-4.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-mabicalls -mshared -mabi=n32\" } */\n+/* { dg-options \"-mshared -mabi=n32\" } */\n /* { dg-final { scan-assembler-not \"(\\\\\\$25|\\\\\\$28|%gp_rel|%got)\" } } */\n /* { dg-final { scan-assembler-not \"\\tjr\\t\\\\\\$1\\n\" } } */\n "}, {"sha": "1e9c120c8343d7a14cfffab47a2616147fc6a6ca", "filename": "gcc/testsuite/gcc.target/mips/branch-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-5.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-mabicalls -mshared -mabi=n32\" } */\n+/* { dg-options \"-mshared -mabi=n32\" } */\n /* { dg-final { scan-assembler \"\\taddiu\\t\\\\\\$3,\\\\\\$3,%lo\\\\(%neg\\\\(%gp_rel\\\\(foo\\\\)\\\\)\\\\)\\n\" } } */\n /* { dg-final { scan-assembler \"\\tlw\\t\\\\\\$1,%got_page\\\\(\\[^)\\]*\\\\)\\\\(\\\\\\$3\\\\)\\\\n\" } } */\n /* { dg-final { scan-assembler \"\\tjr\\t\\\\\\$1\\n\" } } */"}, {"sha": "77e0340eb2eb15a25fee3cebdcb965d72d9b4005", "filename": "gcc/testsuite/gcc.target/mips/branch-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-6.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-mabicalls -mshared -mabi=64\" } */\n+/* { dg-options \"-mshared -mabi=64\" } */\n /* { dg-final { scan-assembler-not \"(\\\\\\$25|\\\\\\$28|%gp_rel|%got)\" } } */\n /* { dg-final { scan-assembler-not \"\\tjr\\t\\\\\\$1\\n\" } } */\n "}, {"sha": "8ad6808c8dfde3ab9bbb1577c486497f425f17f4", "filename": "gcc/testsuite/gcc.target/mips/branch-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-7.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-mabicalls -mshared -mabi=64\" } */\n+/* { dg-options \"-mshared -mabi=64\" } */\n /* { dg-final { scan-assembler \"\\tdaddiu\\t\\\\\\$3,\\\\\\$3,%lo\\\\(%neg\\\\(%gp_rel\\\\(foo\\\\)\\\\)\\\\)\\n\" } } */\n /* { dg-final { scan-assembler \"\\tld\\t\\\\\\$1,%got_page\\\\(\\[^)\\]*\\\\)\\\\(\\\\\\$3\\\\)\\\\n\" } } */\n /* { dg-final { scan-assembler \"\\tjr\\t\\\\\\$1\\n\" } } */"}, {"sha": "4595feafa619a7e59188f16a2870612730b4be0e", "filename": "gcc/testsuite/gcc.target/mips/branch-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-8.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-mabicalls -mshared -mabi=32\" } */\n+/* { dg-options \"-mshared -mabi=32\" } */\n /* { dg-final { scan-assembler-not \"(\\\\\\$28|cpload|cprestore)\" } } */\n /* { dg-final { scan-assembler-not \"\\tjr\\t\\\\\\$1\\n\" } } */\n "}, {"sha": "417507cc48e450f380635e6b818d821541c9a971", "filename": "gcc/testsuite/gcc.target/mips/branch-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fbranch-9.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-mabicalls -mshared -mabi=32\" } */\n+/* { dg-options \"-mshared -mabi=32\" } */\n /* { dg-final { scan-assembler \"\\t\\\\.cpload\\t\\\\\\$25\\n\" } } */\n /* { dg-final { scan-assembler \"\\t\\\\.cprestore\\t16\\n\" } } */\n /* { dg-final { scan-assembler \"\\tlw\\t\\\\\\$1,16\\\\(\\\\\\$fp\\\\)\\n\" } } */"}, {"sha": "e281a270a6e29e2bfb0803cc20322fae8bd24fd8", "filename": "gcc/testsuite/gcc.target/mips/lazy-binding-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Flazy-binding-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Flazy-binding-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Flazy-binding-1.c?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mabicalls -mshared -mexplicit-relocs -O2 -fno-delayed-branch\" } */\n+/* { dg-options \"-mshared -mexplicit-relocs -O2 -fno-delayed-branch\" } */\n \n void bar (void);\n "}, {"sha": "5889902456adc875f395fa8cd82ff347548dddfe", "filename": "gcc/testsuite/gcc.target/mips/mips.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a478c889889e61d8fb27626276a6da1d6c01a1/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fmips.exp?ref=81a478c889889e61d8fb27626276a6da1d6c01a1", "patch": "@@ -850,6 +850,7 @@ proc mips-dg-options { args } {\n     mips_option_dependency options \"-mrelax-pic-calls\" \"-mexplicit-relocs\"\n     mips_option_dependency options \"-fpic\" \"-mshared\"\n     mips_option_dependency options \"-mshared\" \"-mno-plt\"\n+    mips_option_dependency options \"-mshared\" \"-mabicalls\"\n     mips_option_dependency options \"-mno-plt\" \"addressing=unknown\"\n     mips_option_dependency options \"-mabicalls\" \"-G0\"\n     mips_option_dependency options \"-mno-gpopt\" \"-mexplicit-relocs\""}]}