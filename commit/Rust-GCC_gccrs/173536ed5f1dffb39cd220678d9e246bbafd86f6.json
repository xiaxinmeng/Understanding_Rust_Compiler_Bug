{"sha": "173536ed5f1dffb39cd220678d9e246bbafd86f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTczNTM2ZWQ1ZjFkZmZiMzljZDIyMDY3OGQ5ZTI0NmJiYWZkODZmNg==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2013-03-27T10:00:43Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2013-03-27T10:00:43Z"}, "message": "ivinline-1.C: Add target nonpic.\n\n        * g++.dg/ipa/ivinline-1.C: Add target nonpic.\n        * g++.dg/ipa/ivinline-2.C: Likewise.\n        * g++.dg/ipa/ivinline-3.C: Likewise.\n        * g++.dg/ipa/ivinline-4.C: Likewise.\n        * g++.dg/ipa/ivinline-5.C: Likewise.\n        * g++.dg/ipa/ivinline-7.C: Likewise.\n        * g++.dg/ipa/ivinline-8.C: Likewise.\n        * g++.dg/ipa/ivinline-9.C: Likewise.\n        * g++.dg/cpp0x/noexcept03.C: Likewise.\n        * gcc.dg/const-1.c: Likewise.\n        * gcc.dg/ipa/pure-const-1.c: Likewise.\n        * gcc.dg/noreturn-8.c: Likewise.\n        * gcc.target/i386/mmx-1.c: Likewise.\n        * gcc.dg/tree-ssa/ipa-split-5.c: Likewise.\n        * gcc.dg/tree-ssa/loadpre6.c: Likewise.\n        * gcc.c-torture/execute/pr33992.x: New file.\n\nFrom-SVN: r197157", "tree": {"sha": "87b129336aac76f5c178086553cc0993ae9aaead", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87b129336aac76f5c178086553cc0993ae9aaead"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/173536ed5f1dffb39cd220678d9e246bbafd86f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/173536ed5f1dffb39cd220678d9e246bbafd86f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/173536ed5f1dffb39cd220678d9e246bbafd86f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/173536ed5f1dffb39cd220678d9e246bbafd86f6/comments", "author": null, "committer": null, "parents": [{"sha": "2f251a053530659d49b88663f30ec902c6851e92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f251a053530659d49b88663f30ec902c6851e92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f251a053530659d49b88663f30ec902c6851e92"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "5b26dad3f2a27397eaa5d857b772600fc52efcb9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=173536ed5f1dffb39cd220678d9e246bbafd86f6", "patch": "@@ -1,3 +1,22 @@\n+2013-03-27  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\n+\t* g++.dg/ipa/ivinline-1.C: Add target nonpic.\n+\t* g++.dg/ipa/ivinline-2.C: Likewise.\n+\t* g++.dg/ipa/ivinline-3.C: Likewise.\n+\t* g++.dg/ipa/ivinline-4.C: Likewise.\n+\t* g++.dg/ipa/ivinline-5.C: Likewise.\n+\t* g++.dg/ipa/ivinline-7.C: Likewise.\n+\t* g++.dg/ipa/ivinline-8.C: Likewise.\n+\t* g++.dg/ipa/ivinline-9.C: Likewise.\n+\t* g++.dg/cpp0x/noexcept03.C: Likewise.\n+\t* gcc.dg/const-1.c: Likewise.\n+\t* gcc.dg/ipa/pure-const-1.c: Likewise.\n+\t* gcc.dg/noreturn-8.c: Likewise.\n+\t* gcc.target/i386/mmx-1.c: Likewise.\n+\t* gcc.dg/tree-ssa/ipa-split-5.c: Likewise.\n+\t* gcc.dg/tree-ssa/loadpre6.c: Likewise.\n+\t* gcc.c-torture/execute/pr33992.x: New file.\n+\n 2013-03-26  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.c-torture/execute/20011008-3.c: Cap VLEN with STACK_SIZE too."}, {"sha": "41c442e90be6bc20454ee0ba86aed2826b332c9f", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept03.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept03.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept03.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept03.C?ref=173536ed5f1dffb39cd220678d9e246bbafd86f6", "patch": "@@ -1,6 +1,6 @@\n // Runtime test for noexcept-specification.\n // { dg-options \"-std=c++0x -Wnoexcept\" }\n-// { dg-do run }\n+// { dg-do run { target nonpic } }\n \n #include <exception>\n #include <cstdlib>"}, {"sha": "bc4dfea5cfbd4ea2c7b7a66b9e24066aa3460746", "filename": "gcc/testsuite/g++.dg/ipa/ivinline-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-1.C?ref=173536ed5f1dffb39cd220678d9e246bbafd86f6", "patch": "@@ -1,6 +1,6 @@\n /* Verify that simple virtual calls are inlined even without early\n    inlining.  */\n-/* { dg-do run } */\n+/* { dg-do run { target nonpic } } */\n /* { dg-options \"-O3 -fdump-ipa-inline -fno-early-inlining -fno-ipa-cp\"  } */\n \n extern \"C\" void abort (void);"}, {"sha": "001cff204204b18d0b4c4952f97c9a554f7c4f63", "filename": "gcc/testsuite/g++.dg/ipa/ivinline-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-2.C?ref=173536ed5f1dffb39cd220678d9e246bbafd86f6", "patch": "@@ -1,6 +1,6 @@\n /* Verify that simple virtual calls using this pointer are inlined\n    even without early inlining..  */\n-/* { dg-do run } */\n+/* { dg-do run { target nonpic } } */\n /* { dg-options \"-O3 -fdump-ipa-inline -fno-early-inlining -fno-ipa-cp\"  } */\n \n extern \"C\" void abort (void);"}, {"sha": "637a6aeccebed3729eb49bbf9ef06ea9141ad7e4", "filename": "gcc/testsuite/g++.dg/ipa/ivinline-3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-3.C?ref=173536ed5f1dffb39cd220678d9e246bbafd86f6", "patch": "@@ -1,6 +1,6 @@\n /* Verify that simple virtual calls on an object refrence are inlined\n    even without early inlining.  */\n-/* { dg-do run } */\n+/* { dg-do run { target nonpic } } */\n /* { dg-options \"-O3 -fdump-ipa-inline -fno-early-inlining -fno-ipa-cp\"  } */\n \n extern \"C\" void abort (void);"}, {"sha": "f5b8f8e5dd49f4ec3f83e4d0565703148306065b", "filename": "gcc/testsuite/g++.dg/ipa/ivinline-4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-4.C?ref=173536ed5f1dffb39cd220678d9e246bbafd86f6", "patch": "@@ -1,7 +1,7 @@\n /* Verify that simple virtual calls are inlined even without early\n    inlining, even when a typecast to an ancestor is involved along the\n    way.  */\n-/* { dg-do run } */\n+/* { dg-do run { target nonpic } } */\n /* { dg-options \"-O3 -fdump-ipa-inline -fno-early-inlining -fno-ipa-cp\"  } */\n \n extern \"C\" void abort (void);"}, {"sha": "d78173d69e7be25bfe518e91b836170f34e2068a", "filename": "gcc/testsuite/g++.dg/ipa/ivinline-5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-5.C?ref=173536ed5f1dffb39cd220678d9e246bbafd86f6", "patch": "@@ -1,6 +1,6 @@\n /* Verify that virtual call inlining does not pick a wrong method when\n    there is a user defined ancestor in an object.  */\n-/* { dg-do run } */\n+/* { dg-do run { target nonpic } } */\n /* { dg-options \"-O3 -fdump-ipa-inline -fno-early-inlining -fno-ipa-cp\"  } */\n \n extern \"C\" void abort (void);"}, {"sha": "9d725a5086a6e9e9b97ae3e5506758b7367938b7", "filename": "gcc/testsuite/g++.dg/ipa/ivinline-7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-7.C?ref=173536ed5f1dffb39cd220678d9e246bbafd86f6", "patch": "@@ -1,7 +1,7 @@\n /* Verify that simple virtual calls are inlined even without early\n    inlining, even when a typecast to an ancestor is involved along the\n    way and that ancestor is not the first one with virtual functions.  */\n-/* { dg-do run } */\n+/* { dg-do run { target nonpic } } */\n /* { dg-options \"-O3 -fdump-ipa-inline -fno-early-inlining -fno-ipa-cp\"  } */\n \n extern \"C\" void abort (void);"}, {"sha": "eebfc6af19b3e4f0afe6e6487f58f55fd66ec1a3", "filename": "gcc/testsuite/g++.dg/ipa/ivinline-8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-8.C?ref=173536ed5f1dffb39cd220678d9e246bbafd86f6", "patch": "@@ -1,6 +1,6 @@\n /* Verify that virtual calls are inlined (ithout early inlining) even\n    when their caller is itself indirectly inlined.  */\n-/* { dg-do run } */\n+/* { dg-do run { target nonpic } } */\n /* { dg-options \"-O3 -fdump-ipa-inline -fno-early-inlining -fno-ipa-cp\"  } */\n \n extern \"C\" void abort (void);"}, {"sha": "586c3af30e171bb3506ff5e228faa67fffa84dc3", "filename": "gcc/testsuite/g++.dg/ipa/ivinline-9.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fivinline-9.C?ref=173536ed5f1dffb39cd220678d9e246bbafd86f6", "patch": "@@ -2,7 +2,7 @@\n    inlining, even when a typecast to an ancestor is involved along the\n    way and that ancestor itself has an ancestor wich is not the\n    primary base class.  */\n-/* { dg-do run } */\n+/* { dg-do run { target nonpic } } */\n /* { dg-options \"-O3 -fdump-ipa-inline -fno-early-inlining -fno-ipa-cp\"  } */\n \n extern \"C\" void abort (void);"}, {"sha": "57e98405e9b9ff587af6eb577286308b8237846a", "filename": "gcc/testsuite/gcc.c-torture/execute/pr33992.x", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr33992.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr33992.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr33992.x?ref=173536ed5f1dffb39cd220678d9e246bbafd86f6", "patch": "@@ -0,0 +1,7 @@\n+load_lib target-supports.exp\n+\n+if { [ check_effective_target_nonpic ] } {\n+        return 0\n+}\n+\n+return 1"}, {"sha": "a5b2b1677283bdddf0c44b167f3c5469e9e653f7", "filename": "gcc/testsuite/gcc.dg/const-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fconst-1.c?ref=173536ed5f1dffb39cd220678d9e246bbafd86f6", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile } */\n+/* { dg-do compile { target nonpic } } */\n /* { dg-options \"-O2 -Wsuggest-attribute=const\" } */\n \n extern int extern_const(int a) __attribute__ ((const));"}, {"sha": "f76dd87d4dde3fb3370fc72ef62f5dab1cb301dc", "filename": "gcc/testsuite/gcc.dg/ipa/pure-const-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpure-const-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpure-const-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpure-const-1.c?ref=173536ed5f1dffb39cd220678d9e246bbafd86f6", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile } */\n+/* { dg-do compile { target nonpic } } */\n /* { dg-options \"-O3 -fdump-tree-local-pure-const1 -fdump-ipa-pure-const -fdump-tree-optimized -fno-early-inlining\" } */\n void abort (void);\n int error_code;"}, {"sha": "1e75633c81209f18cd03607bfaf069ac6d4ba026", "filename": "gcc/testsuite/gcc.dg/noreturn-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoreturn-8.c?ref=173536ed5f1dffb39cd220678d9e246bbafd86f6", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run } */\n+/* { dg-do run { target nonpic } } */\n /* { dg-options \"-O2\" } */\n void exit (int);\n void noreturn_autodetection_failed ();"}, {"sha": "abf1e07e2b84dd6636787d4d2791decbbf29960a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ipa-split-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-split-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-split-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fipa-split-5.c?ref=173536ed5f1dffb39cd220678d9e246bbafd86f6", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile } */\n+/* { dg-do compile { target nonpic } } */\n /* { dg-options \"-O3 -fdump-tree-fnsplit -fdump-tree-optimized\" } */\n \n struct a {int a,b;};"}, {"sha": "bcd72c5ef228ff4a909153ab90780524204d3d05", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loadpre6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floadpre6.c?ref=173536ed5f1dffb39cd220678d9e246bbafd86f6", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile } */ \n+/* { dg-do compile { target nonpic } } */\n /* { dg-options \"-O2 -fdump-tree-pre-stats -fdump-tree-fre1\" } */\n #include <stddef.h>\n "}, {"sha": "e304acaa3ff6330099232793993977a739f4630f", "filename": "gcc/testsuite/gcc.target/i386/mmx-1.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/173536ed5f1dffb39cd220678d9e246bbafd86f6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fmmx-1.c?ref=173536ed5f1dffb39cd220678d9e246bbafd86f6", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-do compile { target { nonpic } } } */\n /* { dg-options \"-O2 -Werror-implicit-function-declaration -mmmx\" } */\n \n /* Test that the intrinsics compile with optimization.  All of them are"}]}