{"sha": "d19a00c60c15c253282f72299315261ecaa9c92f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE5YTAwYzYwYzE1YzI1MzI4MmY3MjI5OTMxNTI2MWVjYWE5YzkyZg==", "commit": {"author": {"name": "Geng Qi", "email": "gengqi@linux.alibaba.com", "date": "2021-05-24T12:22:55Z"}, "committer": {"name": "Xianmiao Qu", "email": "xianmiao_qu@c-sky.com", "date": "2021-05-25T06:07:21Z"}, "message": "C-SKY: Separate FRAME_POINTER_REGNUM into FRAME_POINTER_REGNUM and HARD_FRAME_POINTER_REGNUM.\n\ngcc/ChangeLog:\n\n\t* config/csky/csky.h (FRAME_POINTER_REGNUM): Use\n\tHARD_FRAME_POINTER_REGNUM and FRAME_POINTER_REGNUM instead of\n\tthe signle definition. The signle definition may not work well\n\tat simplify_subreg_regno().\n\t(HARD_FRAME_POINTER_REGNUM): New.\n\t(ELIMINABLE_REGS): Add for HARD_FRAME_POINTER_REGNUM.\n\t* config/csky/csky.c (get_csky_live_regs, csky_can_eliminate,\n\tcsky_initial_elimination_offset, csky_expand_prologue,\n\tcsky_expand_epilogue): Add for HARD_FRAME_POINTER_REGNUM.", "tree": {"sha": "28da0acac1f817d34f9374bf1e65105a12a27d91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28da0acac1f817d34f9374bf1e65105a12a27d91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d19a00c60c15c253282f72299315261ecaa9c92f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19a00c60c15c253282f72299315261ecaa9c92f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d19a00c60c15c253282f72299315261ecaa9c92f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19a00c60c15c253282f72299315261ecaa9c92f/comments", "author": {"login": "Geng-Qi-alibaba", "id": 74535016, "node_id": "MDQ6VXNlcjc0NTM1MDE2", "avatar_url": "https://avatars.githubusercontent.com/u/74535016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Geng-Qi-alibaba", "html_url": "https://github.com/Geng-Qi-alibaba", "followers_url": "https://api.github.com/users/Geng-Qi-alibaba/followers", "following_url": "https://api.github.com/users/Geng-Qi-alibaba/following{/other_user}", "gists_url": "https://api.github.com/users/Geng-Qi-alibaba/gists{/gist_id}", "starred_url": "https://api.github.com/users/Geng-Qi-alibaba/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Geng-Qi-alibaba/subscriptions", "organizations_url": "https://api.github.com/users/Geng-Qi-alibaba/orgs", "repos_url": "https://api.github.com/users/Geng-Qi-alibaba/repos", "events_url": "https://api.github.com/users/Geng-Qi-alibaba/events{/privacy}", "received_events_url": "https://api.github.com/users/Geng-Qi-alibaba/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62fa9cb24a8cfb197717c809c20e69161f464720", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62fa9cb24a8cfb197717c809c20e69161f464720", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62fa9cb24a8cfb197717c809c20e69161f464720"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "7f2af82749b6782c746c24e4cce589300b0c64fb", "filename": "gcc/config/csky/csky.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19a00c60c15c253282f72299315261ecaa9c92f/gcc%2Fconfig%2Fcsky%2Fcsky.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19a00c60c15c253282f72299315261ecaa9c92f/gcc%2Fconfig%2Fcsky%2Fcsky.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.c?ref=d19a00c60c15c253282f72299315261ecaa9c92f", "patch": "@@ -1751,12 +1751,12 @@ get_csky_live_regs (int *count)\n \tsave = true;\n \n       /* Frame pointer marked used.  */\n-      else if (frame_pointer_needed && reg == FRAME_POINTER_REGNUM)\n+      else if (frame_pointer_needed && reg == HARD_FRAME_POINTER_REGNUM)\n \tsave = true;\n \n       /* This is required for CK801/802 where FP is a fixed reg, otherwise\n \t we end up with no FP value available to the DWARF-2 unwinder.  */\n-      else if (crtl->calls_eh_return && reg == FRAME_POINTER_REGNUM)\n+      else if (crtl->calls_eh_return && reg == HARD_FRAME_POINTER_REGNUM)\n \tsave = true;\n \n       /* CK801/802 also need special handling for LR because it's clobbered\n@@ -1832,6 +1832,8 @@ csky_layout_stack_frame (void)\n static bool\n csky_can_eliminate (const int from ATTRIBUTE_UNUSED, const int to)\n {\n+  if (to == FRAME_POINTER_REGNUM)\n+    return from != ARG_POINTER_REGNUM;\n   if (to == STACK_POINTER_REGNUM)\n     return !frame_pointer_needed;\n   return true;\n@@ -1852,6 +1854,7 @@ csky_initial_elimination_offset (int from, int to)\n   switch (from)\n     {\n     case FRAME_POINTER_REGNUM:\n+    case HARD_FRAME_POINTER_REGNUM:\n       offset = cfun->machine->reg_offset;\n       break;\n \n@@ -1866,7 +1869,7 @@ csky_initial_elimination_offset (int from, int to)\n   /* If we are asked for the offset to the frame pointer instead,\n      then subtract the difference between the frame pointer and stack\n      pointer.  */\n-  if (to == FRAME_POINTER_REGNUM)\n+  if (to == FRAME_POINTER_REGNUM || to == HARD_FRAME_POINTER_REGNUM)\n     offset -= cfun->machine->reg_offset;\n   return offset;\n }\n@@ -5785,7 +5788,7 @@ csky_expand_prologue (void)\n      of the register save area.  */\n   if (frame_pointer_needed)\n     {\n-      insn = emit_insn (gen_movsi (frame_pointer_rtx, stack_pointer_rtx));\n+      insn = emit_insn (gen_movsi (hard_frame_pointer_rtx, stack_pointer_rtx));\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n \n@@ -5848,7 +5851,7 @@ csky_expand_epilogue (void)\n   /* Restore the SP to the base of the register save area.  */\n   if (frame_pointer_needed)\n     {\n-      insn = emit_move_insn (stack_pointer_rtx, frame_pointer_rtx);\n+      insn = emit_move_insn (stack_pointer_rtx, hard_frame_pointer_rtx);\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n   else\n@@ -6004,7 +6007,7 @@ csky_set_eh_return_address (rtx source, rtx scratch)\n \n       if (frame_pointer_needed)\n \t{\n-\t  basereg = frame_pointer_rtx;\n+\t  basereg = hard_frame_pointer_rtx;\n \t  delta = 0;\n \t}\n       else"}, {"sha": "f2b0d1cd110e778534a12eb8b0472a67155c03a6", "filename": "gcc/config/csky/csky.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19a00c60c15c253282f72299315261ecaa9c92f/gcc%2Fconfig%2Fcsky%2Fcsky.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19a00c60c15c253282f72299315261ecaa9c92f/gcc%2Fconfig%2Fcsky%2Fcsky.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcsky%2Fcsky.h?ref=d19a00c60c15c253282f72299315261ecaa9c92f", "patch": "@@ -342,7 +342,8 @@ extern int csky_arch_isa_features[];\n #define STACK_POINTER_REGNUM  CSKY_SP_REGNUM\n \n /* Base register for access to local variables of the function.  */\n-#define FRAME_POINTER_REGNUM  8\n+#define FRAME_POINTER_REGNUM  36\n+#define HARD_FRAME_POINTER_REGNUM  8\n \n /* Base register for access to arguments of the function.  This is a fake\n    register that is always eliminated.  */\n@@ -370,7 +371,9 @@ extern int csky_arch_isa_features[];\n #define ELIMINABLE_REGS\t\t  \\\n {{ ARG_POINTER_REGNUM,\t      STACK_POINTER_REGNUM\t      },\\\n  { ARG_POINTER_REGNUM,\t      FRAME_POINTER_REGNUM\t      },\\\n- { FRAME_POINTER_REGNUM,      STACK_POINTER_REGNUM\t      }}\n+ { ARG_POINTER_REGNUM,\t      HARD_FRAME_POINTER_REGNUM       },\\\n+ { FRAME_POINTER_REGNUM,      STACK_POINTER_REGNUM\t      },\\\n+ { FRAME_POINTER_REGNUM,      HARD_FRAME_POINTER_REGNUM\t      }}\n \n /* Define the offset between two registers, one to be eliminated, and the\n    other its replacement, at the start of a routine.  */"}]}