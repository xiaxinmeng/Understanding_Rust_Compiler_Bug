{"sha": "d2883be3c8e7b5fd17925ea67b99b7330e1a4f72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI4ODNiZTNjOGU3YjVmZDE3OTI1ZWE2N2I5OWI3MzMwZTFhNGY3Mg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2021-08-20T04:37:49Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2021-08-20T04:37:49Z"}, "message": "Move xx* builtins to vsx.md.\n\nI noticed that the xx built-in functions (xxspltiw, xxspltidp, xxsplti32dx,\nxxeval, xxblend, and xxpermx) were all defined in altivec.md.  However, since\nthe XX instructions can take both traditional floating point and Altivec\nregisters, these built-in functions should be in vsx.md.\n\nThis patch just moves the insns from altivec.md to vsx.md.\n\nI also moved the VM3 mode iterator and VM3_char mode attribute from altivec.md\nto vsx.md, since the only use of these were for the XXBLEND insns.\n\n2021-08-20  Michael Meissner  <meissner@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/altivec.md (UNSPEC_XXEVAL): Move to vsx.md.\n\t(UNSPEC_XXSPLTIW): Move to vsx.md.\n\t(UNSPEC_XXSPLTID): Move to vsx.md.\n\t(UNSPEC_XXSPLTI32DX): Move to vsx.md.\n\t(UNSPEC_XXBLEND): Move to vsx.md.\n\t(UNSPEC_XXPERMX): Move to vsx.md.\n\t(VM3): Move to vsx.md.\n\t(VM3_char): Move to vsx.md.\n\t(xxspltiw_v4si): Move to vsx.md.\n\t(xxspltiw_v4sf): Move to vsx.md.\n\t(xxspltiw_v4sf_inst): Move to vsx.md.\n\t(xxspltidp_v2df): Move to vsx.md.\n\t(xxspltidp_v2df_inst): Move to vsx.md.\n\t(xxsplti32dx_v4si_inst): Move to vsx.md.\n\t(xxsplti32dx_v4sf): Move to vsx.md.\n\t(xxsplti32dx_v4sf_inst): Move to vsx.md.\n\t(xxblend_<mode>): Move to vsx.md.\n\t(xxpermx): Move to vsx.md.\n\t(xxpermx_inst): Move to vsx.md.\n\t* config/rs6000/vsx.md (UNSPEC_XXEVAL): Move from altivec.md.\n\t(UNSPEC_XXSPLTIW): Move from altivec.md.\n\t(UNSPEC_XXSPLTID): Move from altivec.md.\n\t(UNSPEC_XXSPLTI32DX): Move from altivec.md.\n\t(UNSPEC_XXBLEND): Move from altivec.md.\n\t(UNSPEC_XXPERMX): Move from altivec.md.\n\t(VM3): Move from altivec.md.\n\t(VM3_char): Move from altivec.md.\n\t(xxspltiw_v4si): Move from altivec.md.\n\t(xxspltiw_v4sf): Move from altivec.md.\n\t(xxspltiw_v4sf_inst): Move from altivec.md.\n\t(xxspltidp_v2df): Move from altivec.md.\n\t(xxspltidp_v2df_inst): Move from altivec.md.\n\t(xxsplti32dx_v4si_inst): Move from altivec.md.\n\t(xxsplti32dx_v4sf): Move from altivec.md.\n\t(xxsplti32dx_v4sf_inst): Move from altivec.md.\n\t(xxblend_<mode>): Move from altivec.md.\n\t(xxpermx): Move from altivec.md.\n\t(xxpermx_inst): Move from altivec.md.", "tree": {"sha": "d5424b00a80d87859bc031a9b5bf68f63914530a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5424b00a80d87859bc031a9b5bf68f63914530a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2883be3c8e7b5fd17925ea67b99b7330e1a4f72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2883be3c8e7b5fd17925ea67b99b7330e1a4f72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2883be3c8e7b5fd17925ea67b99b7330e1a4f72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2883be3c8e7b5fd17925ea67b99b7330e1a4f72/comments", "author": null, "committer": null, "parents": [{"sha": "b57fba5e376c7277168c14e207979e1505e6fe1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b57fba5e376c7277168c14e207979e1505e6fe1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b57fba5e376c7277168c14e207979e1505e6fe1d"}], "stats": {"total": 403, "additions": 206, "deletions": 197}, "files": [{"sha": "2c73ddea823ad896f35751876eb120147278f7a2", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 0, "deletions": 197, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2883be3c8e7b5fd17925ea67b99b7330e1a4f72/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2883be3c8e7b5fd17925ea67b99b7330e1a4f72/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=d2883be3c8e7b5fd17925ea67b99b7330e1a4f72", "patch": "@@ -175,16 +175,10 @@\n    UNSPEC_VPEXTD\n    UNSPEC_VCLRLB\n    UNSPEC_VCLRRB\n-   UNSPEC_XXEVAL\n    UNSPEC_VSTRIR\n    UNSPEC_VSTRIL\n    UNSPEC_SLDB\n    UNSPEC_SRDB\n-   UNSPEC_XXSPLTIW\n-   UNSPEC_XXSPLTID\n-   UNSPEC_XXSPLTI32DX\n-   UNSPEC_XXBLEND\n-   UNSPEC_XXPERMX\n ])\n \n (define_c_enum \"unspecv\"\n@@ -225,21 +219,6 @@\n \t\t\t   (KF \"FLOAT128_VECTOR_P (KFmode)\")\n \t\t\t   (TF \"FLOAT128_VECTOR_P (TFmode)\")])\n \n-;; Like VM2, just do char, short, int, long, float and double\n-(define_mode_iterator VM3 [V4SI\n-\t\t\t   V8HI\n-\t\t\t   V16QI\n-\t\t\t   V4SF\n-\t\t\t   V2DF\n-\t\t\t   V2DI])\n-\n-(define_mode_attr VM3_char [(V2DI \"d\")\n-\t\t\t   (V4SI \"w\")\n-\t\t\t   (V8HI \"h\")\n-\t\t\t   (V16QI \"b\")\n-\t\t\t   (V2DF  \"d\")\n-\t\t\t   (V4SF  \"w\")])\n-\n ;; Map the Vector convert single precision to double precision for integer\n ;; versus floating point\n (define_mode_attr VS_sxwsp [(V4SI \"sxw\") (V4SF \"sp\")])\n@@ -859,170 +838,6 @@\n   \"vs<SLDB_lr>dbi %0,%1,%2,%3\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n-(define_insn \"xxspltiw_v4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=wa\")\n-\t(unspec:V4SI [(match_operand:SI 1 \"s32bit_cint_operand\" \"n\")]\n-\t\t     UNSPEC_XXSPLTIW))]\n- \"TARGET_POWER10\"\n- \"xxspltiw %x0,%1\"\n- [(set_attr \"type\" \"vecsimple\")\n-  (set_attr \"prefixed\" \"yes\")])\n-\n-(define_expand \"xxspltiw_v4sf\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=wa\")\n-\t(unspec:V4SF [(match_operand:SF 1 \"const_double_operand\" \"n\")]\n-\t\t     UNSPEC_XXSPLTIW))]\n- \"TARGET_POWER10\"\n-{\n-  long value = rs6000_const_f32_to_i32 (operands[1]);\n-  emit_insn (gen_xxspltiw_v4sf_inst (operands[0], GEN_INT (value)));\n-  DONE;\n-})\n-\n-(define_insn \"xxspltiw_v4sf_inst\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=wa\")\n-\t(unspec:V4SF [(match_operand:SI 1 \"c32bit_cint_operand\" \"n\")]\n-\t\t     UNSPEC_XXSPLTIW))]\n- \"TARGET_POWER10\"\n- \"xxspltiw %x0,%1\"\n- [(set_attr \"type\" \"vecsimple\")\n-  (set_attr \"prefixed\" \"yes\")])\n-\n-(define_expand \"xxspltidp_v2df\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" )\n-\t(unspec:V2DF [(match_operand:SF 1 \"const_double_operand\")]\n-\t\t     UNSPEC_XXSPLTID))]\n- \"TARGET_POWER10\"\n-{\n-  long value = rs6000_const_f32_to_i32 (operands[1]);\n-  rs6000_emit_xxspltidp_v2df (operands[0], value);\n-  DONE;\n-})\n-\n-(define_insn \"xxspltidp_v2df_inst\"\n-  [(set (match_operand:V2DF 0 \"register_operand\" \"=wa\")\n-\t(unspec:V2DF [(match_operand:SI 1 \"c32bit_cint_operand\" \"n\")]\n-\t\t     UNSPEC_XXSPLTID))]\n-  \"TARGET_POWER10\"\n-  \"xxspltidp %x0,%1\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr \"prefixed\" \"yes\")])\n-\n-(define_expand \"xxsplti32dx_v4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=wa\")\n-\t(unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t\t      (match_operand:QI 2 \"u1bit_cint_operand\" \"n\")\n-\t\t      (match_operand:SI 3 \"s32bit_cint_operand\" \"n\")]\n-\t\t     UNSPEC_XXSPLTI32DX))]\n- \"TARGET_POWER10\"\n-{\n-  int index = INTVAL (operands[2]);\n-\n-  if (!BYTES_BIG_ENDIAN)\n-    index = 1 - index;\n-\n-   emit_insn (gen_xxsplti32dx_v4si_inst (operands[0], operands[1],\n-\t\t\t\t\t GEN_INT (index), operands[3]));\n-   DONE;\n-}\n- [(set_attr \"type\" \"vecsimple\")])\n-\n-(define_insn \"xxsplti32dx_v4si_inst\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=wa\")\n-\t(unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"0\")\n-\t\t      (match_operand:QI 2 \"u1bit_cint_operand\" \"n\")\n-\t\t      (match_operand:SI 3 \"s32bit_cint_operand\" \"n\")]\n-\t\t     UNSPEC_XXSPLTI32DX))]\n-  \"TARGET_POWER10\"\n-  \"xxsplti32dx %x0,%2,%3\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr \"prefixed\" \"yes\")])\n-\n-(define_expand \"xxsplti32dx_v4sf\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=wa\")\n-\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"0\")\n-\t\t      (match_operand:QI 2 \"u1bit_cint_operand\" \"n\")\n-\t\t      (match_operand:SF 3 \"const_double_operand\" \"n\")]\n-\t\t     UNSPEC_XXSPLTI32DX))]\n-  \"TARGET_POWER10\"\n-{\n-  int index = INTVAL (operands[2]);\n-  long value = rs6000_const_f32_to_i32 (operands[3]);\n-  if (!BYTES_BIG_ENDIAN)\n-    index = 1 - index;\n-\n-   emit_insn (gen_xxsplti32dx_v4sf_inst (operands[0], operands[1],\n-\t\t\t\t\t GEN_INT (index), GEN_INT (value)));\n-   DONE;\n-})\n-\n-(define_insn \"xxsplti32dx_v4sf_inst\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=wa\")\n-\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"0\")\n-\t\t      (match_operand:QI 2 \"u1bit_cint_operand\" \"n\")\n-\t\t      (match_operand:SI 3 \"s32bit_cint_operand\" \"n\")]\n-\t\t     UNSPEC_XXSPLTI32DX))]\n-  \"TARGET_POWER10\"\n-  \"xxsplti32dx %x0,%2,%3\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr \"prefixed\" \"yes\")])\n-\n-(define_insn \"xxblend_<mode>\"\n-  [(set (match_operand:VM3 0 \"register_operand\" \"=wa\")\n-\t(unspec:VM3 [(match_operand:VM3 1 \"register_operand\" \"wa\")\n-\t\t     (match_operand:VM3 2 \"register_operand\" \"wa\")\n-\t\t     (match_operand:VM3 3 \"register_operand\" \"wa\")]\n-\t\t    UNSPEC_XXBLEND))]\n-  \"TARGET_POWER10\"\n-  \"xxblendv<VM3_char> %x0,%x1,%x2,%x3\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr \"prefixed\" \"yes\")])\n-\n-(define_expand \"xxpermx\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"+wa\")\n-\t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"wa\")\n-\t\t      (match_operand:V2DI 2 \"register_operand\" \"wa\")\n-\t\t      (match_operand:V16QI 3 \"register_operand\" \"wa\")\n-\t\t      (match_operand:QI 4 \"u8bit_cint_operand\" \"n\")]\n-\t\t     UNSPEC_XXPERMX))]\n-  \"TARGET_POWER10\"\n-{\n-  if (BYTES_BIG_ENDIAN)\n-    emit_insn (gen_xxpermx_inst (operands[0], operands[1],\n-\t\t\t\t operands[2], operands[3],\n-\t\t\t\t operands[4]));\n-  else\n-    {\n-      /* Reverse value of byte element indexes by XORing with 0xFF.\n-\t Reverse the 32-byte section identifier match by subracting bits [0:2]\n-\t of elemet from 7.  */\n-      int value = INTVAL (operands[4]);\n-      rtx vreg = gen_reg_rtx (V16QImode);\n-\n-      emit_insn (gen_xxspltib_v16qi (vreg, GEN_INT (-1)));\n-      emit_insn (gen_xorv16qi3 (operands[3], operands[3], vreg));\n-      value = 7 - value;\n-      emit_insn (gen_xxpermx_inst (operands[0], operands[2],\n-\t\t\t\t   operands[1], operands[3],\n-\t\t\t\t   GEN_INT (value)));\n-    }\n-\n-  DONE;\n-}\n-  [(set_attr \"type\" \"vecsimple\")])\n-\n-(define_insn \"xxpermx_inst\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"+v\")\n-\t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"v\")\n-\t\t      (match_operand:V2DI 2 \"register_operand\" \"v\")\n-\t\t      (match_operand:V16QI 3 \"register_operand\" \"v\")\n-\t\t      (match_operand:QI 4 \"u3bit_cint_operand\" \"n\")]\n-\t\t     UNSPEC_XXPERMX))]\n-  \"TARGET_POWER10\"\n-  \"xxpermx %x0,%x1,%x2,%x3,%4\"\n-  [(set_attr \"type\" \"vecsimple\")\n-   (set_attr \"prefixed\" \"yes\")])\n-\n (define_expand \"vstrir_<mode>\"\n   [(set (match_operand:VIshort 0 \"altivec_register_operand\")\n \t(unspec:VIshort [(match_operand:VIshort 1 \"altivec_register_operand\")]\n@@ -3873,18 +3688,6 @@\n   [(set_attr \"type\" \"vecperm\")\n    (set_attr \"isa\" \"p9v,*\")])\n \n-(define_insn \"xxeval\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=wa\")\n-\t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"wa\")\n-\t\t      (match_operand:V2DI 2 \"register_operand\" \"wa\")\n-\t\t      (match_operand:V2DI 3 \"register_operand\" \"wa\")\n-\t\t      (match_operand:QI 4 \"u8bit_cint_operand\" \"n\")]\n-\t\t     UNSPEC_XXEVAL))]\n-   \"TARGET_POWER10\"\n-   \"xxeval %0,%1,%2,%3,%4\"\n-   [(set_attr \"type\" \"vecsimple\")\n-    (set_attr \"prefixed\" \"yes\")])\n-\n (define_expand \"vec_unpacku_hi_v16qi\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n         (unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v\")]"}, {"sha": "e4ca6e94d4990f87c08c236156cebf0b452daa24", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 206, "deletions": 0, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2883be3c8e7b5fd17925ea67b99b7330e1a4f72/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2883be3c8e7b5fd17925ea67b99b7330e1a4f72/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=d2883be3c8e7b5fd17925ea67b99b7330e1a4f72", "patch": "@@ -372,6 +372,12 @@\n    UNSPEC_REPLACE_UN\n    UNSPEC_VDIVES\n    UNSPEC_VDIVEU\n+   UNSPEC_XXEVAL\n+   UNSPEC_XXSPLTIW\n+   UNSPEC_XXSPLTID\n+   UNSPEC_XXSPLTI32DX\n+   UNSPEC_XXBLEND\n+   UNSPEC_XXPERMX\n   ])\n \n (define_int_iterator XVCVBF16\t[UNSPEC_VSX_XVCVSPBF16\n@@ -392,6 +398,22 @@\n (define_mode_attr REPLACE_ELT_max [(V4SI \"12\") (V4SF \"12\")\n \t\t\t\t   (V2DI  \"8\") (V2DF \"8\")])\n \n+;; Like VM2 in altivec.md, just do char, short, int, long, float and double\n+(define_mode_iterator VM3 [V4SI\n+\t\t\t   V8HI\n+\t\t\t   V16QI\n+\t\t\t   V4SF\n+\t\t\t   V2DF\n+\t\t\t   V2DI])\n+\n+(define_mode_attr VM3_char [(V2DI \"d\")\n+\t\t\t   (V4SI \"w\")\n+\t\t\t   (V8HI \"h\")\n+\t\t\t   (V16QI \"b\")\n+\t\t\t   (V2DF  \"d\")\n+\t\t\t   (V4SF  \"w\")])\n+\n+\n ;; VSX moves\n \n ;; The patterns for LE permuted loads and stores come before the general\n@@ -6383,3 +6405,187 @@\n   \"TARGET_POWER10\"\n   \"vmulld %0,%1,%2\"\n   [(set_attr \"type\" \"veccomplex\")])\n+\n+\f\n+;; XXSPLTIW built-in function support\n+(define_insn \"xxspltiw_v4si\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=wa\")\n+\t(unspec:V4SI [(match_operand:SI 1 \"s32bit_cint_operand\" \"n\")]\n+\t\t     UNSPEC_XXSPLTIW))]\n+ \"TARGET_POWER10\"\n+ \"xxspltiw %x0,%1\"\n+ [(set_attr \"type\" \"vecsimple\")\n+  (set_attr \"prefixed\" \"yes\")])\n+\n+(define_expand \"xxspltiw_v4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=wa\")\n+\t(unspec:V4SF [(match_operand:SF 1 \"const_double_operand\" \"n\")]\n+\t\t     UNSPEC_XXSPLTIW))]\n+ \"TARGET_POWER10\"\n+{\n+  long value = rs6000_const_f32_to_i32 (operands[1]);\n+  emit_insn (gen_xxspltiw_v4sf_inst (operands[0], GEN_INT (value)));\n+  DONE;\n+})\n+\n+(define_insn \"xxspltiw_v4sf_inst\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=wa\")\n+\t(unspec:V4SF [(match_operand:SI 1 \"c32bit_cint_operand\" \"n\")]\n+\t\t     UNSPEC_XXSPLTIW))]\n+ \"TARGET_POWER10\"\n+ \"xxspltiw %x0,%1\"\n+ [(set_attr \"type\" \"vecsimple\")\n+  (set_attr \"prefixed\" \"yes\")])\n+\n+;; XXSPLTIDP built-in function support\n+(define_expand \"xxspltidp_v2df\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" )\n+\t(unspec:V2DF [(match_operand:SF 1 \"const_double_operand\")]\n+\t\t     UNSPEC_XXSPLTID))]\n+ \"TARGET_POWER10\"\n+{\n+  long value = rs6000_const_f32_to_i32 (operands[1]);\n+  rs6000_emit_xxspltidp_v2df (operands[0], value);\n+  DONE;\n+})\n+\n+(define_insn \"xxspltidp_v2df_inst\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=wa\")\n+\t(unspec:V2DF [(match_operand:SI 1 \"c32bit_cint_operand\" \"n\")]\n+\t\t     UNSPEC_XXSPLTID))]\n+  \"TARGET_POWER10\"\n+  \"xxspltidp %x0,%1\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr \"prefixed\" \"yes\")])\n+\n+;; XXSPLTI32DX built-in function support\n+(define_expand \"xxsplti32dx_v4si\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=wa\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:QI 2 \"u1bit_cint_operand\" \"n\")\n+\t\t      (match_operand:SI 3 \"s32bit_cint_operand\" \"n\")]\n+\t\t     UNSPEC_XXSPLTI32DX))]\n+ \"TARGET_POWER10\"\n+{\n+  int index = INTVAL (operands[2]);\n+\n+  if (!BYTES_BIG_ENDIAN)\n+    index = 1 - index;\n+\n+   emit_insn (gen_xxsplti32dx_v4si_inst (operands[0], operands[1],\n+\t\t\t\t\t GEN_INT (index), operands[3]));\n+   DONE;\n+}\n+ [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"xxsplti32dx_v4si_inst\"\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=wa\")\n+\t(unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:QI 2 \"u1bit_cint_operand\" \"n\")\n+\t\t      (match_operand:SI 3 \"s32bit_cint_operand\" \"n\")]\n+\t\t     UNSPEC_XXSPLTI32DX))]\n+  \"TARGET_POWER10\"\n+  \"xxsplti32dx %x0,%2,%3\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr \"prefixed\" \"yes\")])\n+\n+(define_expand \"xxsplti32dx_v4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=wa\")\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:QI 2 \"u1bit_cint_operand\" \"n\")\n+\t\t      (match_operand:SF 3 \"const_double_operand\" \"n\")]\n+\t\t     UNSPEC_XXSPLTI32DX))]\n+  \"TARGET_POWER10\"\n+{\n+  int index = INTVAL (operands[2]);\n+  long value = rs6000_const_f32_to_i32 (operands[3]);\n+  if (!BYTES_BIG_ENDIAN)\n+    index = 1 - index;\n+\n+   emit_insn (gen_xxsplti32dx_v4sf_inst (operands[0], operands[1],\n+\t\t\t\t\t GEN_INT (index), GEN_INT (value)));\n+   DONE;\n+})\n+\n+(define_insn \"xxsplti32dx_v4sf_inst\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=wa\")\n+\t(unspec:V4SF [(match_operand:V4SF 1 \"register_operand\" \"0\")\n+\t\t      (match_operand:QI 2 \"u1bit_cint_operand\" \"n\")\n+\t\t      (match_operand:SI 3 \"s32bit_cint_operand\" \"n\")]\n+\t\t     UNSPEC_XXSPLTI32DX))]\n+  \"TARGET_POWER10\"\n+  \"xxsplti32dx %x0,%2,%3\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr \"prefixed\" \"yes\")])\n+\n+;; XXBLEND built-in function support\n+(define_insn \"xxblend_<mode>\"\n+  [(set (match_operand:VM3 0 \"register_operand\" \"=wa\")\n+\t(unspec:VM3 [(match_operand:VM3 1 \"register_operand\" \"wa\")\n+\t\t     (match_operand:VM3 2 \"register_operand\" \"wa\")\n+\t\t     (match_operand:VM3 3 \"register_operand\" \"wa\")]\n+\t\t    UNSPEC_XXBLEND))]\n+  \"TARGET_POWER10\"\n+  \"xxblendv<VM3_char> %x0,%x1,%x2,%x3\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr \"prefixed\" \"yes\")])\n+\n+;; XXPERMX built-in function support\n+(define_expand \"xxpermx\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"+wa\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"wa\")\n+\t\t      (match_operand:V2DI 2 \"register_operand\" \"wa\")\n+\t\t      (match_operand:V16QI 3 \"register_operand\" \"wa\")\n+\t\t      (match_operand:QI 4 \"u8bit_cint_operand\" \"n\")]\n+\t\t     UNSPEC_XXPERMX))]\n+  \"TARGET_POWER10\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_xxpermx_inst (operands[0], operands[1],\n+\t\t\t\t operands[2], operands[3],\n+\t\t\t\t operands[4]));\n+  else\n+    {\n+      /* Reverse value of byte element indexes by XORing with 0xFF.\n+\t Reverse the 32-byte section identifier match by subracting bits [0:2]\n+\t of elemet from 7.  */\n+      int value = INTVAL (operands[4]);\n+      rtx vreg = gen_reg_rtx (V16QImode);\n+\n+      emit_insn (gen_xxspltib_v16qi (vreg, GEN_INT (-1)));\n+      emit_insn (gen_xorv16qi3 (operands[3], operands[3], vreg));\n+      value = 7 - value;\n+      emit_insn (gen_xxpermx_inst (operands[0], operands[2],\n+\t\t\t\t   operands[1], operands[3],\n+\t\t\t\t   GEN_INT (value)));\n+    }\n+\n+  DONE;\n+}\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"xxpermx_inst\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"+v\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"v\")\n+\t\t      (match_operand:V2DI 2 \"register_operand\" \"v\")\n+\t\t      (match_operand:V16QI 3 \"register_operand\" \"v\")\n+\t\t      (match_operand:QI 4 \"u3bit_cint_operand\" \"n\")]\n+\t\t     UNSPEC_XXPERMX))]\n+  \"TARGET_POWER10\"\n+  \"xxpermx %x0,%x1,%x2,%x3,%4\"\n+  [(set_attr \"type\" \"vecsimple\")\n+   (set_attr \"prefixed\" \"yes\")])\n+\n+;; XXEVAL built-in function support\n+(define_insn \"xxeval\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=wa\")\n+\t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"wa\")\n+\t\t      (match_operand:V2DI 2 \"register_operand\" \"wa\")\n+\t\t      (match_operand:V2DI 3 \"register_operand\" \"wa\")\n+\t\t      (match_operand:QI 4 \"u8bit_cint_operand\" \"n\")]\n+\t\t     UNSPEC_XXEVAL))]\n+   \"TARGET_POWER10\"\n+   \"xxeval %0,%1,%2,%3,%4\"\n+   [(set_attr \"type\" \"vecsimple\")\n+    (set_attr \"prefixed\" \"yes\")])\n+"}]}