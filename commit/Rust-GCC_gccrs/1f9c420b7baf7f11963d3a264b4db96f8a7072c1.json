{"sha": "1f9c420b7baf7f11963d3a264b4db96f8a7072c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY5YzQyMGI3YmFmN2YxMTk2M2QzYTI2NGI0ZGI5NmY4YTcwNzJjMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-05-22T14:32:56Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-05-22T14:32:56Z"}, "message": "tree-ssa-forwprop.c (associate_plusminus): Extend (T)(P + A) - (T)P -> (T)A transformation to integer types.\n\n\t* tree-ssa-forwprop.c (associate_plusminus): Extend (T)(P + A) - (T)P\n\t-> (T)A transformation to integer types.\n\nFrom-SVN: r210807", "tree": {"sha": "07d130da7dcd13846521f867398e508b7b88596c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07d130da7dcd13846521f867398e508b7b88596c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f9c420b7baf7f11963d3a264b4db96f8a7072c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9c420b7baf7f11963d3a264b4db96f8a7072c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f9c420b7baf7f11963d3a264b4db96f8a7072c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f9c420b7baf7f11963d3a264b4db96f8a7072c1/comments", "author": null, "committer": null, "parents": [{"sha": "e3f0315f883341299b198872bf1289413e7515e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3f0315f883341299b198872bf1289413e7515e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3f0315f883341299b198872bf1289413e7515e7"}], "stats": {"total": 123, "additions": 95, "deletions": 28}, "files": [{"sha": "307df9af47d7b9e952a334b2fdfcbd9b8d9123e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c420b7baf7f11963d3a264b4db96f8a7072c1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c420b7baf7f11963d3a264b4db96f8a7072c1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f9c420b7baf7f11963d3a264b4db96f8a7072c1", "patch": "@@ -1,3 +1,8 @@\n+2014-05-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree-ssa-forwprop.c (associate_plusminus): Extend (T)(P + A) - (T)P\n+\t-> (T)A transformation to integer types.\n+\n 2014-05-22  Teresa Johnson  <tejohnson@google.com>\n \n \t* gcov-io.c (gcov_position): Use gcov_nonruntime_assert."}, {"sha": "4d814635755a51b06fd08644f5d2426f9240a3f5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c420b7baf7f11963d3a264b4db96f8a7072c1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c420b7baf7f11963d3a264b4db96f8a7072c1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1f9c420b7baf7f11963d3a264b4db96f8a7072c1", "patch": "@@ -1,3 +1,7 @@\n+2014-05-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/opt37.ad[sb]: New test.\n+\n 2014-05-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c/61271"}, {"sha": "fe37f903783d5706be8df257c90e4b9bcf2d3d53", "filename": "gcc/testsuite/gnat.dg/opt37.adb", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c420b7baf7f11963d3a264b4db96f8a7072c1/gcc%2Ftestsuite%2Fgnat.dg%2Fopt37.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c420b7baf7f11963d3a264b4db96f8a7072c1/gcc%2Ftestsuite%2Fgnat.dg%2Fopt37.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt37.adb?ref=1f9c420b7baf7f11963d3a264b4db96f8a7072c1", "patch": "@@ -0,0 +1,42 @@\n+-- { dg-compile }\n+-- { dg-options \"-O2 -gnato -fdump-tree-optimized\" }\n+\n+package body Opt37 is\n+\n+   function To_Unchecked (Bits : T_Bit_Array) return Unsigned32 is\n+      Value : Unsigned32 := 0;\n+   begin\n+      for I in Bits'Range loop\n+         Value := Value * 2 + Unsigned32 (Bits(I));\n+      end loop;\n+      return Value;\n+   end;\n+\n+   function To_Scalar (Bits : T_Bit_Array) return Positive is\n+      Tmp   : Unsigned32;\n+      Value : Positive;\n+   begin\n+      Tmp := To_Unchecked (Bits);\n+      if Tmp in 0 .. Unsigned32 (Positive'last) then\n+         Value := Positive (Tmp);\n+      else\n+         Value := -Positive (Unsigned32'last - Tmp);\n+         if Value > Positive'first then\n+            Value := Value - 1;\n+         else\n+            raise Program_Error;\n+         end if;\n+      end if;\n+      return Value;\n+   end;\n+\n+   function Func (Bit_Array : T_Bit_Array;\n+                  Bit_Index : T_Bit_Index) return Positive is\n+   begin\n+      return To_Scalar (Bit_Array (Bit_Index .. Bit_Index + 1));\n+   end;\n+\n+end Opt37;\n+\n+-- { dg-final { scan-tree-dump-not \"alloca\" \"optimized\" } }\n+-- { dg-final { cleanup-tree-dump \"optimized\" } }"}, {"sha": "7507679933c845e828a277dbd1e0600d59211ac8", "filename": "gcc/testsuite/gnat.dg/opt37.ads", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c420b7baf7f11963d3a264b4db96f8a7072c1/gcc%2Ftestsuite%2Fgnat.dg%2Fopt37.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c420b7baf7f11963d3a264b4db96f8a7072c1/gcc%2Ftestsuite%2Fgnat.dg%2Fopt37.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt37.ads?ref=1f9c420b7baf7f11963d3a264b4db96f8a7072c1", "patch": "@@ -0,0 +1,18 @@\n+package Opt37 is\r\n+\r\n+   type T_Bit is range 0 .. 1;\r\n+   for T_Bit'Size use 1;\r\n+\r\n+   type Positive is range 0 .. (2 ** 31) - 1;\r\n+   type Unsigned32 is mod 2 ** 32;\r\n+\r\n+   subtype T_Bit_Count is Positive;\r\n+   subtype T_Bit_Index is T_Bit_Count range 1 .. T_Bit_Count'Last;\r\n+\r\n+   type T_Bit_Array is array (T_Bit_Count range <>) of T_Bit;\r\n+   pragma Pack (T_Bit_Array);\r\n+\r\n+   function Func (Bit_Array : in T_Bit_Array;\r\n+                  Bit_Index : in T_Bit_Index) return Positive;\r\n+\r\n+end Opt37;\r"}, {"sha": "e863567efb4e2310fc1e3bbd55a0e10e49256a40", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f9c420b7baf7f11963d3a264b4db96f8a7072c1/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f9c420b7baf7f11963d3a264b4db96f8a7072c1/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=1f9c420b7baf7f11963d3a264b4db96f8a7072c1", "patch": "@@ -2642,49 +2642,47 @@ associate_plusminus (gimple_stmt_iterator *gsi)\n \t\t  gimple_set_modified (stmt, true);\n \t\t}\n \t    }\n-\t  else if (CONVERT_EXPR_CODE_P (def_code) && code == MINUS_EXPR\n+\t  else if (code == MINUS_EXPR\n+\t\t   && CONVERT_EXPR_CODE_P (def_code)\n+\t\t   && TREE_CODE (gimple_assign_rhs1 (def_stmt)) == SSA_NAME\n \t\t   && TREE_CODE (rhs2) == SSA_NAME)\n \t    {\n-\t      /* (T)(ptr + adj) - (T)ptr -> (T)adj.  */\n+\t      /* (T)(P + A) - (T)P -> (T)A.  */\n \t      gimple def_stmt2 = SSA_NAME_DEF_STMT (rhs2);\n-\t      if (TREE_CODE (gimple_assign_rhs1 (def_stmt)) == SSA_NAME\n-\t\t  && is_gimple_assign (def_stmt2)\n+\t      if (is_gimple_assign (def_stmt2)\n \t\t  && can_propagate_from (def_stmt2)\n \t\t  && CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt2))\n \t\t  && TREE_CODE (gimple_assign_rhs1 (def_stmt2)) == SSA_NAME)\n \t\t{\n-\t\t  /* Now we have (T)A - (T)ptr.  */\n-\t\t  tree ptr = gimple_assign_rhs1 (def_stmt2);\n+\t\t  /* Now we have (T)X - (T)P.  */\n+\t\t  tree p = gimple_assign_rhs1 (def_stmt2);\n \t\t  def_stmt2 = SSA_NAME_DEF_STMT (gimple_assign_rhs1 (def_stmt));\n \t\t  if (is_gimple_assign (def_stmt2)\n-\t\t      && gimple_assign_rhs_code (def_stmt2) == POINTER_PLUS_EXPR\n-\t\t      && gimple_assign_rhs1 (def_stmt2) == ptr)\n+\t\t      && can_propagate_from (def_stmt2)\n+\t\t      && (gimple_assign_rhs_code (def_stmt2) == POINTER_PLUS_EXPR\n+\t\t\t  || gimple_assign_rhs_code (def_stmt2) == PLUS_EXPR)\n+\t\t      && gimple_assign_rhs1 (def_stmt2) == p)\n \t\t    {\n-\t\t      /* And finally (T)(ptr + X) - (T)ptr.  */\n-\t\t      tree adj = gimple_assign_rhs2 (def_stmt2);\n-\t\t      /* If the conversion of the pointer adjustment to the\n-\t\t         final type requires a sign- or zero-extension we\n-\t\t\t have to punt - it is not defined which one is\n-\t\t\t correct.  */\n-\t\t      if (TYPE_PRECISION (TREE_TYPE (rhs1))\n-\t\t\t  <= TYPE_PRECISION (TREE_TYPE (adj))\n-\t\t\t  || (TREE_CODE (adj) == INTEGER_CST\n-\t\t\t      && tree_int_cst_sign_bit (adj) == 0))\n+\t\t      /* And finally (T)(P + A) - (T)P.  */\n+\t\t      tree a = gimple_assign_rhs2 (def_stmt2);\n+\t\t      /* For pointer types, if the conversion of A to the final\n+\t\t\t type requires a sign- or zero-extension, then we have\n+\t\t\t to punt - it is not defined which one is correct.  */\n+\t\t      if (!POINTER_TYPE_P (TREE_TYPE (rhs1))\n+\t\t\t  || TYPE_PRECISION (TREE_TYPE (rhs1))\n+\t\t\t     <= TYPE_PRECISION (TREE_TYPE (a))\n+\t\t\t  || (TREE_CODE (a) == INTEGER_CST\n+\t\t\t      && tree_int_cst_sign_bit (a) == 0))\n \t\t\t{\n \t\t\t  if (useless_type_conversion_p (TREE_TYPE (rhs1),\n-\t\t\t\t\t\t\t TREE_TYPE (adj)))\n-\t\t\t    {\n-\t\t\t      code = TREE_CODE (adj);\n-\t\t\t      rhs1 = adj;\n-\t\t\t    }\n+\t\t\t\t\t\t\t TREE_TYPE (a)))\n+\t\t\t    code = TREE_CODE (a);\n \t\t\t  else\n-\t\t\t    {\n-\t\t\t      code = NOP_EXPR;\n-\t\t\t      rhs1 = adj;\n-\t\t\t    }\n+\t\t\t    code = NOP_EXPR;\n+\t\t\t  rhs1 = a;\n \t\t\t  rhs2 = NULL_TREE;\n \t\t\t  gimple_assign_set_rhs_with_ops (gsi, code, rhs1,\n-\t\t\t\t\t\t\t  NULL_TREE);\n+\t\t\t\t\t\t\t  rhs2);\n \t\t\t  gcc_assert (gsi_stmt (*gsi) == stmt);\n \t\t\t  gimple_set_modified (stmt, true);\n \t\t\t}"}]}