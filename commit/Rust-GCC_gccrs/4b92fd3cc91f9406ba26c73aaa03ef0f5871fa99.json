{"sha": "4b92fd3cc91f9406ba26c73aaa03ef0f5871fa99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI5MmZkM2NjOTFmOTQwNmJhMjZjNzNhYWEwM2VmMGY1ODcxZmE5OQ==", "commit": {"author": {"name": "Samuel Tardieu", "email": "sam@rfc1149.net", "date": "2008-06-07T16:10:50Z"}, "committer": {"name": "Samuel Tardieu", "email": "sam@gcc.gnu.org", "date": "2008-06-07T16:10:50Z"}, "message": "sem_res.adb (Large_Storage_Type): A type is large if it requires as many bits as Positive to store its values and...\n\n    gcc/ada/\n\t* sem_res.adb (Large_Storage_Type): A type is large if it\n\trequires as many bits as Positive to store its values and its\n\tbounds are known at compile time.\n\t* sem_ch13.adb (Minimum_Size): Note that this function returns\n\t0 if the size is not known at compile time.\n\n    gcc/testsuite/\n\t* gnat.dg/specs/oversize.ads: New.\n\nFrom-SVN: r136532", "tree": {"sha": "0e35d02f3c3abeff9f6bae58cc6b8c07f2f35293", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e35d02f3c3abeff9f6bae58cc6b8c07f2f35293"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b92fd3cc91f9406ba26c73aaa03ef0f5871fa99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b92fd3cc91f9406ba26c73aaa03ef0f5871fa99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b92fd3cc91f9406ba26c73aaa03ef0f5871fa99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b92fd3cc91f9406ba26c73aaa03ef0f5871fa99/comments", "author": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e32764576e31e938e1257dd55e5c151db7a87e9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e32764576e31e938e1257dd55e5c151db7a87e9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e32764576e31e938e1257dd55e5c151db7a87e9e"}], "stats": {"total": 87, "additions": 80, "deletions": 7}, "files": [{"sha": "4a2da86b26d0d0dad3b5204c3f6c0a4ae3421ab9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b92fd3cc91f9406ba26c73aaa03ef0f5871fa99/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b92fd3cc91f9406ba26c73aaa03ef0f5871fa99/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4b92fd3cc91f9406ba26c73aaa03ef0f5871fa99", "patch": "@@ -1,3 +1,11 @@\n+2008-06-07  Samuel Tardieu  <sam@rfc1149.net>\n+\n+\t* sem_res.adb (Large_Storage_Type): A type is large if it\n+\trequires as many bits as Positive to store its values and its\n+\tbounds are known at compile time.\n+\t* sem_ch13.adb (Minimum_Size): Note that this function returns\n+\t0 if the size is not known at compile time.\n+\n 2008-06-06  Nicolas Setton  <setton@adacore.com>\n \t    Olivier Hainque  <hainque@adacore.com>\n "}, {"sha": "175f3040fc8581c0b43e59b7700c529e1c7a0504", "filename": "gcc/ada/sem_ch13.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b92fd3cc91f9406ba26c73aaa03ef0f5871fa99/gcc%2Fada%2Fsem_ch13.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b92fd3cc91f9406ba26c73aaa03ef0f5871fa99/gcc%2Fada%2Fsem_ch13.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.ads?ref=4b92fd3cc91f9406ba26c73aaa03ef0f5871fa99", "patch": "@@ -64,7 +64,8 @@ package Sem_Ch13 is\n    --  the given type, of the size the type would have if it were biased. If\n    --  the type is already biased, then Minimum_Size returns the biased size,\n    --  regardless of the setting of Biased. Also, fixed-point types are never\n-   --  biased in the current implementation.\n+   --  biased in the current implementation. If the size is not known at\n+   --  compile time, this function returns 0.\n \n    procedure Check_Constant_Address_Clause (Expr : Node_Id; U_Ent : Entity_Id);\n    --  Expr is an expression for an address clause. This procedure checks"}, {"sha": "a6d42f736379feaf8237c702413beca76ad05b65", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b92fd3cc91f9406ba26c73aaa03ef0f5871fa99/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b92fd3cc91f9406ba26c73aaa03ef0f5871fa99/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=4b92fd3cc91f9406ba26c73aaa03ef0f5871fa99", "patch": "@@ -56,6 +56,7 @@ with Sem_Cat;  use Sem_Cat;\n with Sem_Ch4;  use Sem_Ch4;\n with Sem_Ch6;  use Sem_Ch6;\n with Sem_Ch8;  use Sem_Ch8;\n+with Sem_Ch13; use Sem_Ch13;\n with Sem_Disp; use Sem_Disp;\n with Sem_Dist; use Sem_Dist;\n with Sem_Elab; use Sem_Elab;\n@@ -471,12 +472,15 @@ package body Sem_Res is\n \n                function Large_Storage_Type (T : Entity_Id) return Boolean is\n                begin\n-                  return\n-                    T = Standard_Integer\n-                      or else\n-                    T = Standard_Positive\n-                      or else\n-                    T = Standard_Natural;\n+                  --  The type is considered large if its bounds are known at\n+                  --  compile time and if it requires at least as many bits as\n+                  --  a Positive to store the possible values.\n+\n+                  return Compile_Time_Known_Value (Type_Low_Bound (T))\n+                    and then Compile_Time_Known_Value (Type_High_Bound (T))\n+                    and then\n+                      Minimum_Size (T, Biased => True) >=\n+                        Esize (Standard_Integer) - 1;\n                end Large_Storage_Type;\n \n             begin"}, {"sha": "109b1d83f1943da12be33d36ba9b89af1b513dfc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b92fd3cc91f9406ba26c73aaa03ef0f5871fa99/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b92fd3cc91f9406ba26c73aaa03ef0f5871fa99/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4b92fd3cc91f9406ba26c73aaa03ef0f5871fa99", "patch": "@@ -1,3 +1,7 @@\n+2008-06-07  Samuel Tardieu  <sam@rfc1149.net>\n+\n+\t* gnat.dg/specs/oversize.ads: New.\n+\n 2008-06-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n         PR c++/35327"}, {"sha": "e98c8bd77f6ef29ff4ea47bbf84549d60b86e018", "filename": "gcc/testsuite/gnat.dg/specs/oversize.ads", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b92fd3cc91f9406ba26c73aaa03ef0f5871fa99/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Foversize.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b92fd3cc91f9406ba26c73aaa03ef0f5871fa99/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Foversize.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Foversize.ads?ref=4b92fd3cc91f9406ba26c73aaa03ef0f5871fa99", "patch": "@@ -0,0 +1,56 @@\n+with Ada.Numerics.Discrete_Random;\n+\n+package Oversize is\n+\n+   subtype M1 is Integer range 1 .. 200;                    -- Won't trigger\n+   type R1 (D : M1 := 100) is record\n+      Name : String (1 .. D);\n+   end record;\n+\n+   type M2 is new Integer range 1 .. 200;                   -- Won't trigger\n+   for M2'Size use 64;\n+   type M2S is array (M2 range <>) of Character;\n+   type R2 (D : M2 := 100) is record\n+      Name : M2S (1 .. D);\n+   end record;\n+\n+   subtype M3 is Integer;                                   -- Will trigger\n+   type R3 (D : M3 := 100) -- { dg-error \"may raise Storage_Error\" }\n+   is record\n+      Name : String (1 .. D);\n+   end record;\n+\n+   type M4 is new Positive;                                 -- Will trigger\n+   type M4S is array (M4 range <>) of Character;\n+   type R4 (D : M4 := 100) -- { dg-error \"may raise Storage_Error\" }\n+   is record\n+      Name : M4S (1 .. D);\n+   end record;\n+\n+   type M5 is new Positive;                                 -- Will trigger\n+   for M5'Size use Integer'Size - 1;\n+   type M5S is array (M5 range <>) of Character;\n+   type R5 (D : M5 := 100) -- { dg-error \"may raise Storage_Error\" }\n+   is record\n+      Name : M5S (1 .. D);\n+   end record;\n+\n+   subtype M6 is Integer range 1 .. (Integer'Last + 1)/2;   -- Won't trigger\n+   type R6 (D : M6 := 100) is record\n+      Name : String (1 .. D);\n+   end record;\n+\n+   subtype M7 is Integer range 1 .. (Integer'Last + 1)/2+1; -- Will trigger\n+   type R7 (D : M7 := 100) -- { dg-error \"may raise Storage_Error\" }\n+   is record\n+      Name : String (1 .. D);\n+   end record;\n+\n+   package P8 is new Ada.Numerics.Discrete_Random (Natural);\n+   G8 : P8.Generator;\n+   subtype M8 is Integer range 1 .. P8.Random (G8);         -- Won't trigger\n+   type R8 (D : M8 := 100) is record\n+      Name : String (1 .. D);\n+   end record;\n+\n+end Oversize;"}]}