{"sha": "a6fd2cd769c3bb446085e45794fcb22481eed400", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZmZDJjZDc2OWMzYmI0NDYwODVlNDU3OTRmY2IyMjQ4MWVlZDQwMA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-01-03T20:38:30Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-01-03T20:38:30Z"}, "message": "gimple-ssa-warn-restrict.c (builtin_memref::builtin_memref): Use offset_int::from instead of wide_int::to_shwi.\n\n\ngcc/ChangeLog:\n\n\t* gimple-ssa-warn-restrict.c (builtin_memref::builtin_memref): Use\n\toffset_int::from instead of wide_int::to_shwi.\n\t(maybe_diag_overlap): Remove assertion.\n\tUse HOST_WIDE_INT_PRINT_DEC instead of %lli.\n\t* gimple-ssa-sprintf.c (format_directive): Same.\n\t(parse_directive): Same.\n\t(sprintf_dom_walker::compute_format_length): Same.\n\t(try_substitute_return_value): Same.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/Wrestrict-3.c: New test.\n\nFrom-SVN: r256187", "tree": {"sha": "8e3d75d5168c0b68ab7bdbbb2f7b0e8551b53fd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e3d75d5168c0b68ab7bdbbb2f7b0e8551b53fd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6fd2cd769c3bb446085e45794fcb22481eed400", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6fd2cd769c3bb446085e45794fcb22481eed400", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6fd2cd769c3bb446085e45794fcb22481eed400", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6fd2cd769c3bb446085e45794fcb22481eed400/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "830421fcd37719426fa8eb7f0d545c744db497b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/830421fcd37719426fa8eb7f0d545c744db497b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/830421fcd37719426fa8eb7f0d545c744db497b4"}], "stats": {"total": 144, "additions": 96, "deletions": 48}, "files": [{"sha": "10e8d9ee513588cc3720bc61b73a43295a0d16e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fd2cd769c3bb446085e45794fcb22481eed400/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fd2cd769c3bb446085e45794fcb22481eed400/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6fd2cd769c3bb446085e45794fcb22481eed400", "patch": "@@ -1,3 +1,14 @@\n+2018-01-03  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gimple-ssa-warn-restrict.c (builtin_memref::builtin_memref): Use\n+\toffset_int::from instead of wide_int::to_shwi.\n+\t(maybe_diag_overlap): Remove assertion.\n+\tUse HOST_WIDE_INT_PRINT_DEC instead of %lli.\n+\t* gimple-ssa-sprintf.c (format_directive): Same.\n+\t(parse_directive): Same.\n+\t(sprintf_dom_walker::compute_format_length): Same.\n+\t(try_substitute_return_value): Same.\n+\n 2017-01-03  Jeff Law  <law@redhat.com>\n \n \tPR middle-end/83654"}, {"sha": "7d16bbd16f87e22298f4a82da58f08c86d2d966e", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 43, "deletions": 30, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fd2cd769c3bb446085e45794fcb22481eed400/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fd2cd769c3bb446085e45794fcb22481eed400/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=a6fd2cd769c3bb446085e45794fcb22481eed400", "patch": "@@ -2995,16 +2995,16 @@ format_directive (const sprintf_dom_walker::call_info &info,\n \n   if (dump_file && *dir.beg)\n     {\n-      fprintf (dump_file, \"    Result: %lli, %lli, %lli, %lli \"\n-\t       \"(%lli, %lli, %lli, %lli)\\n\",\n-\t       (long long)fmtres.range.min,\n-\t       (long long)fmtres.range.likely,\n-\t       (long long)fmtres.range.max,\n-\t       (long long)fmtres.range.unlikely,\n-\t       (long long)res->range.min,\n-\t       (long long)res->range.likely,\n-\t       (long long)res->range.max,\n-\t       (long long)res->range.unlikely);\n+      fprintf (dump_file,\n+\t       \"    Result: \"\n+\t       HOST_WIDE_INT_PRINT_DEC \", \" HOST_WIDE_INT_PRINT_DEC \", \"\n+\t       HOST_WIDE_INT_PRINT_DEC \", \" HOST_WIDE_INT_PRINT_DEC \" (\"\n+\t       HOST_WIDE_INT_PRINT_DEC \", \" HOST_WIDE_INT_PRINT_DEC \", \"\n+\t       HOST_WIDE_INT_PRINT_DEC \", \" HOST_WIDE_INT_PRINT_DEC \")\\n\",\n+\t       fmtres.range.min, fmtres.range.likely,\n+\t       fmtres.range.max, fmtres.range.unlikely,\n+\t       res->range.min, res->range.likely,\n+\t       res->range.max, res->range.unlikely);\n     }\n \n   return true;\n@@ -3035,11 +3035,12 @@ parse_directive (sprintf_dom_walker::call_info &info,\n \n       if (dump_file)\n \t{\n-\t  fprintf (dump_file, \"  Directive %u at offset %llu: \\\"%.*s\\\", \"\n-\t\t   \"length = %llu\\n\",\n+\t  fprintf (dump_file, \"  Directive %u at offset \"\n+\t\t   HOST_WIDE_INT_PRINT_UNSIGNED \": \\\"%.*s\\\", \"\n+\t\t   \"length = \" HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\",\n \t\t   dir.dirno,\n-\t\t   (unsigned long long)(size_t)(dir.beg - info.fmtstr),\n-\t\t   (int)dir.len, dir.beg, (unsigned long long)dir.len);\n+\t\t   (unsigned HOST_WIDE_INT)(size_t)(dir.beg - info.fmtstr),\n+\t\t   (int)dir.len, dir.beg, dir.len);\n \t}\n \n       return len - !*str;\n@@ -3411,25 +3412,34 @@ parse_directive (sprintf_dom_walker::call_info &info,\n \n   if (dump_file)\n     {\n-      fprintf (dump_file, \"  Directive %u at offset %llu: \\\"%.*s\\\"\",\n-\t       dir.dirno, (unsigned long long)(size_t)(dir.beg - info.fmtstr),\n+      fprintf (dump_file,\n+\t       \"  Directive %u at offset \" HOST_WIDE_INT_PRINT_UNSIGNED\n+\t       \": \\\"%.*s\\\"\",\n+\t       dir.dirno,\n+\t       (unsigned HOST_WIDE_INT)(size_t)(dir.beg - info.fmtstr),\n \t       (int)dir.len, dir.beg);\n       if (star_width)\n \t{\n \t  if (dir.width[0] == dir.width[1])\n-\t    fprintf (dump_file, \", width = %lli\", (long long)dir.width[0]);\n+\t    fprintf (dump_file, \", width = \" HOST_WIDE_INT_PRINT_DEC,\n+\t\t     dir.width[0]);\n \t  else\n-\t    fprintf (dump_file, \", width in range [%lli, %lli]\",\n-\t\t     (long long)dir.width[0], (long long)dir.width[1]);\n+\t    fprintf (dump_file,\n+\t\t     \", width in range [\" HOST_WIDE_INT_PRINT_DEC\n+\t\t     \", \" HOST_WIDE_INT_PRINT_DEC \"]\",\n+\t\t     dir.width[0], dir.width[1]);\n \t}\n \n       if (star_precision)\n \t{\n \t  if (dir.prec[0] == dir.prec[1])\n-\t    fprintf (dump_file, \", precision = %lli\", (long long)dir.prec[0]);\n+\t    fprintf (dump_file, \", precision = \" HOST_WIDE_INT_PRINT_DEC,\n+\t\t     dir.prec[0]);\n \t  else\n-\t    fprintf (dump_file, \", precision in range [%lli, %lli]\",\n-\t\t     (long long)dir.prec[0], (long long)dir.prec[1]);\n+\t    fprintf (dump_file,\n+\t\t     \", precision in range [\" HOST_WIDE_INT_PRINT_DEC\n+\t\t     HOST_WIDE_INT_PRINT_DEC \"]\",\n+\t\t     dir.prec[0], dir.prec[1]);\n \t}\n       fputc ('\\n', dump_file);\n     }\n@@ -3455,8 +3465,10 @@ sprintf_dom_walker::compute_format_length (call_info &info,\n \t       LOCATION_FILE (callloc), LOCATION_LINE (callloc));\n       print_generic_expr (dump_file, info.func, dump_flags);\n \n-      fprintf (dump_file, \": objsize = %llu, fmtstr = \\\"%s\\\"\\n\",\n-\t       (unsigned long long)info.objsize, info.fmtstr);\n+      fprintf (dump_file,\n+\t       \": objsize = \" HOST_WIDE_INT_PRINT_UNSIGNED\n+\t       \", fmtstr = \\\"%s\\\"\\n\",\n+\t       info.objsize, info.fmtstr);\n     }\n \n   /* Reset the minimum and maximum byte counters.  */\n@@ -3682,13 +3694,14 @@ try_substitute_return_value (gimple_stmt_iterator *gsi,\n \t  const char *what = setrange ? \"Setting\" : \"Discarding\";\n \t  if (retval[0] != retval[1])\n \t    fprintf (dump_file,\n-\t\t     \"  %s %s-bounds return value range [%llu, %llu].\\n\",\n-\t\t     what, inbounds,\n-\t\t     (unsigned long long)retval[0],\n-\t\t     (unsigned long long)retval[1]);\n+\t\t     \"  %s %s-bounds return value range [\"\n+\t\t     HOST_WIDE_INT_PRINT_UNSIGNED \", \"\n+\t\t     HOST_WIDE_INT_PRINT_UNSIGNED \"].\\n\",\n+\t\t     what, inbounds, retval[0], retval[1]);\n \t  else\n-\t    fprintf (dump_file, \"  %s %s-bounds return value %llu.\\n\",\n-\t\t     what, inbounds, (unsigned long long)retval[0]);\n+\t    fprintf (dump_file, \"  %s %s-bounds return value \"\n+\t\t     HOST_WIDE_INT_PRINT_UNSIGNED \".\\n\",\n+\t\t     what, inbounds, retval[0]);\n \t}\n     }\n "}, {"sha": "8bae73dd42b63785d60faa3796e7e9135f8f67a1", "filename": "gcc/gimple-ssa-warn-restrict.c", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fd2cd769c3bb446085e45794fcb22481eed400/gcc%2Fgimple-ssa-warn-restrict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fd2cd769c3bb446085e45794fcb22481eed400/gcc%2Fgimple-ssa-warn-restrict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-warn-restrict.c?ref=a6fd2cd769c3bb446085e45794fcb22481eed400", "patch": "@@ -276,13 +276,13 @@ builtin_memref::builtin_memref (tree expr, tree size)\n \t\t  value_range_type rng = get_range_info (offset, &min, &max);\n \t\t  if (rng == VR_RANGE)\n \t\t    {\n-\t\t      offrange[0] = min.to_shwi ();\n-\t\t      offrange[1] = max.to_shwi ();\n+\t\t      offrange[0] = offset_int::from (min, SIGNED);\n+\t\t      offrange[1] = offset_int::from (max, SIGNED);\n \t\t    }\n \t\t  else if (rng == VR_ANTI_RANGE)\n \t\t    {\n-\t\t      offrange[0] = (max + 1).to_shwi ();\n-\t\t      offrange[1] = (min - 1).to_shwi ();\n+\t\t      offrange[0] = offset_int::from (max + 1, SIGNED);\n+\t\t      offrange[1] = offset_int::from (min - 1, SIGNED);\n \t\t    }\n \t\t  else\n \t\t    {\n@@ -1233,25 +1233,31 @@ maybe_diag_overlap (location_t loc, gcall *call, builtin_access &acs)\n \n   if (dstref.offrange[0] == dstref.offrange[1]\n       || dstref.offrange[1] > HOST_WIDE_INT_MAX)\n-    sprintf (offstr[0], \"%lli\", (long long) dstref.offrange[0].to_shwi ());\n+    sprintf (offstr[0], HOST_WIDE_INT_PRINT_DEC,\n+\t     dstref.offrange[0].to_shwi ());\n   else\n-    sprintf (offstr[0], \"[%lli, %lli]\",\n-\t     (long long) dstref.offrange[0].to_shwi (),\n-\t     (long long) dstref.offrange[1].to_shwi ());\n+    sprintf (offstr[0],\n+\t     \"[\" HOST_WIDE_INT_PRINT_DEC \", \" HOST_WIDE_INT_PRINT_DEC \"]\",\n+\t     dstref.offrange[0].to_shwi (),\n+\t     dstref.offrange[1].to_shwi ());\n \n   if (srcref.offrange[0] == srcref.offrange[1]\n       || srcref.offrange[1] > HOST_WIDE_INT_MAX)\n-    sprintf (offstr[1], \"%lli\", (long long) srcref.offrange[0].to_shwi ());\n+    sprintf (offstr[1],\n+\t     HOST_WIDE_INT_PRINT_DEC,\n+\t     srcref.offrange[0].to_shwi ());\n   else\n-    sprintf (offstr[1], \"[%lli, %lli]\",\n-\t     (long long) srcref.offrange[0].to_shwi (),\n-\t     (long long) srcref.offrange[1].to_shwi ());\n+    sprintf (offstr[1],\n+\t     \"[\" HOST_WIDE_INT_PRINT_DEC \", \" HOST_WIDE_INT_PRINT_DEC \"]\",\n+\t     srcref.offrange[0].to_shwi (),\n+\t     srcref.offrange[1].to_shwi ());\n \n   if (ovloff[0] == ovloff[1] || !ovloff[1])\n-    sprintf (offstr[2], \"%lli\", (long long) ovloff[0]);\n+    sprintf (offstr[2], HOST_WIDE_INT_PRINT_DEC, ovloff[0]);\n   else\n-    sprintf (offstr[2], \"[%lli, %lli]\",\n-\t     (long long) ovloff[0], (long long) ovloff[1]);\n+    sprintf (offstr[2],\n+\t     \"[\" HOST_WIDE_INT_PRINT_DEC \", \" HOST_WIDE_INT_PRINT_DEC \"]\",\n+\t     ovloff[0], ovloff[1]);\n \n   const offset_int maxobjsize = tree_to_shwi (max_object_size ());\n   bool must_overlap = ovlsiz[0] > 0;\n@@ -1366,9 +1372,6 @@ maybe_diag_overlap (location_t loc, gcall *call, builtin_access &acs)\n     }\n \n   /* Issue \"may overlap\" diagnostics below.  */\n-  gcc_assert (ovlsiz[0] == 0\n-\t      && ovlsiz[1] > 0\n-\t      && ovlsiz[1] <= maxobjsize.to_shwi ());\n \n   /* Use more concise wording when one of the offsets is unbounded\n      to avoid confusing the user with large and mostly meaningless"}, {"sha": "55ed428cae77df2e00b64a493a0ec7790024d955", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fd2cd769c3bb446085e45794fcb22481eed400/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fd2cd769c3bb446085e45794fcb22481eed400/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a6fd2cd769c3bb446085e45794fcb22481eed400", "patch": "@@ -1,3 +1,7 @@\n+2018-01-03  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.dg/Wrestrict-3.c: New test.\n+\n 2018-01-03  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/83555"}, {"sha": "1204111ea3186e6a2249f59d0a7c4eba902fb02d", "filename": "gcc/testsuite/gcc.dg/Wrestrict-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fd2cd769c3bb446085e45794fcb22481eed400/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fd2cd769c3bb446085e45794fcb22481eed400/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWrestrict-3.c?ref=a6fd2cd769c3bb446085e45794fcb22481eed400", "patch": "@@ -0,0 +1,17 @@\n+/* Test to verify that the call below with the out-of-bounds offset\n+   doesn't trigger an internal assertion and is diagnosed.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wrestrict\" } */\n+\n+#define DIFF_MAX   __PTRDIFF_MAX__\n+\n+void test_no_ice (int *d, __PTRDIFF_TYPE__ i, __SIZE_TYPE__ n)\n+{\n+  if (i < DIFF_MAX / sizeof *d - 1 || DIFF_MAX / sizeof *d + 2 < i)\n+    i = DIFF_MAX / sizeof *d - 1;\n+\n+  if (n < DIFF_MAX)\n+    n = DIFF_MAX / sizeof *d;\n+\n+  __builtin_strncpy ((char*)(d + i), (char*)d, n);   /* { dg-warning \"\\\\\\[-Wrestrict]\" } */\n+}"}]}