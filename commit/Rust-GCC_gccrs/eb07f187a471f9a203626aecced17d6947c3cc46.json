{"sha": "eb07f187a471f9a203626aecced17d6947c3cc46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIwN2YxODdhNDcxZjlhMjAzNjI2YWVjY2VkMTdkNjk0N2MzY2M0Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-04-13T15:02:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-04-13T15:02:17Z"}, "message": "constexpr.c (potential_nondependent_constant_expression): New.\n\n\t* constexpr.c (potential_nondependent_constant_expression): New.\n\t(potential_nondependent_static_init_expression): New.\n\t(maybe_constant_value_1, fold_non_dependent_expr)\n\t(maybe_constant_init): Use them.\n\t* pt.c (instantiate_non_dependent_expr_sfinae)\n\t(instantiate_non_dependent_or_null, convert_nontype_argument): Use\n\tthem.\n\t* cp-tree.h: Declare them.\n\nFrom-SVN: r234944", "tree": {"sha": "4df20658e32c740c4941fef058a9e3b8e224f226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4df20658e32c740c4941fef058a9e3b8e224f226"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb07f187a471f9a203626aecced17d6947c3cc46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb07f187a471f9a203626aecced17d6947c3cc46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb07f187a471f9a203626aecced17d6947c3cc46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb07f187a471f9a203626aecced17d6947c3cc46/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3eddc1c9718c6b8264d42cda6e76a3dd9ffc93f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eddc1c9718c6b8264d42cda6e76a3dd9ffc93f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eddc1c9718c6b8264d42cda6e76a3dd9ffc93f0"}], "stats": {"total": 63, "additions": 45, "deletions": 18}, "files": [{"sha": "6942c8dd5d33c50fc202a4fb7de65a6a62f070dd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb07f187a471f9a203626aecced17d6947c3cc46/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb07f187a471f9a203626aecced17d6947c3cc46/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eb07f187a471f9a203626aecced17d6947c3cc46", "patch": "@@ -1,3 +1,14 @@\n+2016-04-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.c (potential_nondependent_constant_expression): New.\n+\t(potential_nondependent_static_init_expression): New.\n+\t(maybe_constant_value_1, fold_non_dependent_expr)\n+\t(maybe_constant_init): Use them.\n+\t* pt.c (instantiate_non_dependent_expr_sfinae)\n+\t(instantiate_non_dependent_or_null, convert_nontype_argument): Use\n+\tthem.\n+\t* cp-tree.h: Declare them.\n+\n 2016-04-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/70594"}, {"sha": "37cc336598306b391ce3ba3181fc2ef2bf57aa42", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb07f187a471f9a203626aecced17d6947c3cc46/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb07f187a471f9a203626aecced17d6947c3cc46/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=eb07f187a471f9a203626aecced17d6947c3cc46", "patch": "@@ -4315,10 +4315,7 @@ maybe_constant_value_1 (tree t, tree decl)\n {\n   tree r;\n \n-  if (instantiation_dependent_expression_p (t)\n-      || type_unknown_p (t)\n-      || BRACE_ENCLOSED_INITIALIZER_P (t)\n-      || !potential_constant_expression (t))\n+  if (!potential_nondependent_constant_expression (t))\n     {\n       if (TREE_OVERFLOW_P (t))\n \t{\n@@ -4397,8 +4394,7 @@ fold_non_dependent_expr (tree t)\n      as two declarations of the same function, for example.  */\n   if (processing_template_decl)\n     {\n-      if (!instantiation_dependent_expression_p (t)\n-\t  && potential_constant_expression (t))\n+      if (potential_nondependent_constant_expression (t))\n \t{\n \t  processing_template_decl_sentinel s;\n \t  t = instantiate_non_dependent_expr_internal (t, tf_none);\n@@ -4449,10 +4445,7 @@ maybe_constant_init (tree t, tree decl)\n     t = TREE_OPERAND (t, 0);\n   if (TREE_CODE (t) == INIT_EXPR)\n     t = TREE_OPERAND (t, 1);\n-  if (instantiation_dependent_expression_p (t)\n-      || type_unknown_p (t)\n-      || BRACE_ENCLOSED_INITIALIZER_P (t)\n-      || !potential_static_init_expression (t))\n+  if (!potential_nondependent_static_init_expression (t))\n     /* Don't try to evaluate it.  */;\n   else\n     t = cxx_eval_outermost_constant_expr (t, true, false, decl);\n@@ -5203,4 +5196,29 @@ require_potential_rvalue_constant_expression (tree t)\n   return potential_constant_expression_1 (t, true, true, tf_warning_or_error);\n }\n \n+/* Returns true if T is a potential constant expression that is not\n+   instantiation-dependent, and therefore a candidate for constant folding even\n+   in a template.  */\n+\n+bool\n+potential_nondependent_constant_expression (tree t)\n+{\n+  return (!type_unknown_p (t)\n+\t  && !BRACE_ENCLOSED_INITIALIZER_P (t)\n+\t  && potential_constant_expression (t)\n+\t  && !instantiation_dependent_expression_p (t));\n+}\n+\n+/* Returns true if T is a potential static initializer expression that is not\n+   instantiation-dependent.  */\n+\n+bool\n+potential_nondependent_static_init_expression (tree t)\n+{\n+  return (!type_unknown_p (t)\n+\t  && !BRACE_ENCLOSED_INITIALIZER_P (t)\n+\t  && potential_static_init_expression (t)\n+\t  && !instantiation_dependent_expression_p (t));\n+}\n+\n #include \"gt-cp-constexpr.h\""}, {"sha": "ecf2a5d5a122b03af4aa72339d8155dc58df7896", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb07f187a471f9a203626aecced17d6947c3cc46/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb07f187a471f9a203626aecced17d6947c3cc46/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=eb07f187a471f9a203626aecced17d6947c3cc46", "patch": "@@ -6884,6 +6884,8 @@ extern tree register_constexpr_fundef           (tree, tree);\n extern bool check_constexpr_ctor_body           (tree, tree, bool);\n extern tree ensure_literal_type_for_constexpr_object (tree);\n extern bool potential_constant_expression       (tree);\n+extern bool potential_nondependent_constant_expression (tree);\n+extern bool potential_nondependent_static_init_expression (tree);\n extern bool potential_static_init_expression    (tree);\n extern bool potential_rvalue_constant_expression (tree);\n extern bool require_potential_constant_expression (tree);"}, {"sha": "2871f339fffead7bd68a17f9a2f9eb2cd9931539", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb07f187a471f9a203626aecced17d6947c3cc46/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb07f187a471f9a203626aecced17d6947c3cc46/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=eb07f187a471f9a203626aecced17d6947c3cc46", "patch": "@@ -5655,8 +5655,7 @@ instantiate_non_dependent_expr_sfinae (tree expr, tsubst_flags_t complain)\n \n      as two declarations of the same function, for example.  */\n   if (processing_template_decl\n-      && !instantiation_dependent_expression_p (expr)\n-      && potential_constant_expression (expr))\n+      && potential_nondependent_constant_expression (expr))\n     {\n       processing_template_decl_sentinel s;\n       expr = instantiate_non_dependent_expr_internal (expr, complain);\n@@ -5680,8 +5679,7 @@ instantiate_non_dependent_or_null (tree expr)\n     return NULL_TREE;\n   if (processing_template_decl)\n     {\n-      if (instantiation_dependent_expression_p (expr)\n-\t  || !potential_constant_expression (expr))\n+      if (!potential_nondependent_constant_expression (expr))\n \texpr = NULL_TREE;\n       else\n \t{\n@@ -6240,10 +6238,8 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n   if (TYPE_REF_OBJ_P (type)\n       && has_value_dependent_address (expr))\n     /* If we want the address and it's value-dependent, don't fold.  */;\n-  else if (!type_unknown_p (expr)\n-\t   && processing_template_decl\n-\t   && !instantiation_dependent_expression_p (expr)\n-\t   && potential_constant_expression (expr))\n+  else if (processing_template_decl\n+\t   && potential_nondependent_constant_expression (expr))\n     non_dep = true;\n   if (error_operand_p (expr))\n     return error_mark_node;"}]}