{"sha": "c5c5822ae5c421e2f22e201366231a502c91b70a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzVjNTgyMmFlNWM0MjFlMmYyMmUyMDEzNjYyMzFhNTAyYzkxYjcwYQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2018-03-21T22:29:37Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2018-03-21T22:29:37Z"}, "message": "Adjust __builtin_tgmath handling of integer arguments to _FloatN narrowing macros.\n\nWhen adding __builtin_tgmath to support a better tgmath.h\nimplementation, I noted that further changes might be needed regarding\nthe TS 18661 functions that round their results to a narrower type,\nbecause of unresolved issues with how the corresponding type-generic\nmacros are defined in TS 18661.\n\nThe resolution of those issues is still in flux, but the latest\nversion does indeed require something slightly different from\n__builtin_tgmath.  It specifies that integer arguments to type-generic\nmacros such as f32xadd are treated as _Float64 not double - which was\nalso present in earlier versions of the resolution - but then it also\nspecifies different handling for _Float64 arguments and double\narguments, which wasn't in earlier versions.  Specifically, in the\nlatest version\n<http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2213.pdf>, f32xadd\nwith _Float64 arguments would call f32xaddf64, while f32xadd with\ndouble arguments would call f32xaddf64x.  Since integer arguments are\nconverted directly to the argument type of the selected function (not\nto double / _Float64x unless that ends up as the argument type), this\nis a user-visible difference in semantics that means __builtin_tgmath\nactually needs to implement treating integer arguments as _Float64 in\nthis case (the rest of the latest semantics can then be implemented in\nthe header, with a few inline functions there).\n\nTo avoid releasing with the older version of the __builtin_tgmath\nsemantics that doesn't work with the latest proposed DR#13 resolution,\nthis patch implements a rule in __builtin_tgmath that maps integer\ntypes to _Float64 (respectively _Complex _Float64 for complex integer\ntypes) where all the specified functions return the same _FloatN or\n_FloatNx type.  This does not affect any existing uses of\n__builtin_tgmath in glibc's or GCC's tgmath.h since I haven't yet\nadded any of these type-generic macros to glibc when adding the\ncorresponding narrowing functions.\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\n\t* doc/extend.texi (__builtin_tgmath): Document when complex\n\tinteger types are treated as _Complex _Float64.\n\ngcc/c:\n\t* c-parser.c (c_parser_postfix_expression): For __builtin_tgmath\n\twhere all functions return the same _FloatN or _FloatNx type,\n\ttreat integer types as _Float64 instead of double.\n\ngcc/testsuite:\n\t* gcc.dg/builtin-tgmath-3.c: New test.\n\nFrom-SVN: r258751", "tree": {"sha": "a1c2dc12c2981309138920b82613f39bb26024b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1c2dc12c2981309138920b82613f39bb26024b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5c5822ae5c421e2f22e201366231a502c91b70a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c5822ae5c421e2f22e201366231a502c91b70a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5c5822ae5c421e2f22e201366231a502c91b70a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c5822ae5c421e2f22e201366231a502c91b70a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4274af890e1a2938ff4604cee1113f33cdce03e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4274af890e1a2938ff4604cee1113f33cdce03e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4274af890e1a2938ff4604cee1113f33cdce03e"}], "stats": {"total": 94, "additions": 89, "deletions": 5}, "files": [{"sha": "90c558c0638c0738e2b4eeca58f6792b422716af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c5822ae5c421e2f22e201366231a502c91b70a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c5822ae5c421e2f22e201366231a502c91b70a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c5c5822ae5c421e2f22e201366231a502c91b70a", "patch": "@@ -1,3 +1,8 @@\n+2018-03-21  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/extend.texi (__builtin_tgmath): Document when complex\n+\tinteger types are treated as _Complex _Float64.\n+\n 2018-03-21  Tom de Vries  <tom@codesourcery.com>\n \n \t* doc/extend.texi (__builtin_extend_pointer): Remove pasto."}, {"sha": "fc077a881347bdf7dbc517d3cce516d5e306d3c3", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c5822ae5c421e2f22e201366231a502c91b70a/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c5822ae5c421e2f22e201366231a502c91b70a/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=c5c5822ae5c421e2f22e201366231a502c91b70a", "patch": "@@ -1,3 +1,9 @@\n+2018-03-21  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-parser.c (c_parser_postfix_expression): For __builtin_tgmath\n+\twhere all functions return the same _FloatN or _FloatNx type,\n+\ttreat integer types as _Float64 instead of double.\n+\n 2018-03-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/84999"}, {"sha": "47720861d3f22ea1ec414c0f134004b355798df3", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c5822ae5c421e2f22e201366231a502c91b70a/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c5822ae5c421e2f22e201366231a502c91b70a/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=c5c5822ae5c421e2f22e201366231a502c91b70a", "patch": "@@ -8530,10 +8530,12 @@ c_parser_postfix_expression (c_parser *parser)\n \t       argument is decimal, or if the only alternatives for\n \t       type-generic arguments are of decimal types, and are\n \t       otherwise treated as double (or _Complex double for\n-\t       complex integer types).  After that adjustment, types\n-\t       are combined following the usual arithmetic\n-\t       conversions.  If the function only accepts complex\n-\t       arguments, a complex type is produced.  */\n+\t       complex integer types, or _Float64 or _Complex _Float64\n+\t       if all the return types are the same _FloatN or\n+\t       _FloatNx type).  After that adjustment, types are\n+\t       combined following the usual arithmetic conversions.\n+\t       If the function only accepts complex arguments, a\n+\t       complex type is produced.  */\n \t    bool arg_complex = all_complex;\n \t    bool arg_binary = all_binary;\n \t    bool arg_int_decimal = all_decimal;\n@@ -8632,6 +8634,19 @@ c_parser_postfix_expression (c_parser *parser)\n \t\t      }\n \t\t  }\n \t      }\n+\t    /* For a macro rounding its result to a narrower type, map\n+\t       integer types to _Float64 not double if the return type\n+\t       is a _FloatN or _FloatNx type.  */\n+\t    bool arg_int_float64 = false;\n+\t    if (parm_kind[0] == tgmath_fixed\n+\t\t&& SCALAR_FLOAT_TYPE_P (parm_first[0])\n+\t\t&& float64_type_node != NULL_TREE)\n+\t      for (unsigned int j = 0; j < NUM_FLOATN_NX_TYPES; j++)\n+\t\tif (parm_first[0] == FLOATN_TYPE_NODE (j))\n+\t\t  {\n+\t\t    arg_int_float64 = true;\n+\t\t    break;\n+\t\t  }\n \t    tree arg_real = NULL_TREE;\n \t    for (unsigned int j = 1; j <= nargs; j++)\n \t      {\n@@ -8644,6 +8659,8 @@ c_parser_postfix_expression (c_parser *parser)\n \t\tif (INTEGRAL_TYPE_P (type))\n \t\t  type = (arg_int_decimal\n \t\t\t  ? dfloat64_type_node\n+\t\t\t  : arg_int_float64\n+\t\t\t  ? float64_type_node\n \t\t\t  : double_type_node);\n \t\tif (arg_real == NULL_TREE)\n \t\t  arg_real = type;"}, {"sha": "98d06f7a17fe1cdcf0c124ce2bf42c9a1629e441", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c5822ae5c421e2f22e201366231a502c91b70a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c5822ae5c421e2f22e201366231a502c91b70a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=c5c5822ae5c421e2f22e201366231a502c91b70a", "patch": "@@ -11848,7 +11848,9 @@ corresponding to @var{t} for each function.\n The standard rules for @code{<tgmath.h>} macros are used to find a\n common type @var{u} from the types of the arguments for parameters\n whose types vary between the functions; complex integer types (a GNU\n-extension) are treated like @code{_Complex double} for this purpose.\n+extension) are treated like @code{_Complex double} for this purpose\n+(or @code{_Complex _Float64} if all the function return types are the\n+same @code{_Float@var{n}} or @code{_Float@var{n}x} type).\n If the function return types vary, or are all the same integer type,\n the function called is the one for which @var{t} is @var{u}, and it is\n an error if there is no such function.  If the function return types"}, {"sha": "cc4cbbc857f433b6be1cd2ac9450321ab96f1abe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c5822ae5c421e2f22e201366231a502c91b70a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c5822ae5c421e2f22e201366231a502c91b70a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c5c5822ae5c421e2f22e201366231a502c91b70a", "patch": "@@ -1,3 +1,7 @@\n+2018-03-21  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/builtin-tgmath-3.c: New test.\n+\n 2018-03-21  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR c++/71965"}, {"sha": "35364ea3ee3cf1d0928ec72e1aa511e12c591a1e", "filename": "gcc/testsuite/gcc.dg/builtin-tgmath-3.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5c5822ae5c421e2f22e201366231a502c91b70a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-tgmath-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5c5822ae5c421e2f22e201366231a502c91b70a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-tgmath-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-tgmath-3.c?ref=c5c5822ae5c421e2f22e201366231a502c91b70a", "patch": "@@ -0,0 +1,50 @@\n+/* Test __builtin_tgmath: integer arguments mapped to _Float64.  */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+/* { dg-add-options float32 } */\n+/* { dg-add-options float64 } */\n+/* { dg-require-effective-target float32_runtime } */\n+/* { dg-require-effective-target float64_runtime } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+#define CHECK_CALL(C, E, V)\t\t\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      if ((C) != (E))\t\t\t\t\\\n+\tabort ();\t\t\t\t\\\n+      extern __typeof (C) V;\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n+extern _Float32 var_f32;\n+\n+_Float32 t1f (float x) { return x + 1; }\n+_Float32 t1d (double x) { return x + 2; }\n+_Float32 t1l (long double x) { return x + 3; }\n+_Float32 t1f64 (_Float64 x) { return x + 4; }\n+\n+#define t1v(x) __builtin_tgmath (t1f, t1d, t1l, t1f64, x)\n+\n+static void\n+test_1 (void)\n+{\n+  float f = 1;\n+  double d = 2;\n+  long double ld = 3;\n+  _Float64 f64 = 4;\n+  int i = 5;\n+  CHECK_CALL (t1v (f), 2, var_f32);\n+  CHECK_CALL (t1v (d), 4, var_f32);\n+  CHECK_CALL (t1v (ld), 6, var_f32);\n+  CHECK_CALL (t1v (f64), 8, var_f32);\n+  CHECK_CALL (t1v (i), 9, var_f32);\n+}\n+\n+int\n+main (void)\n+{\n+  test_1 ();\n+  exit (0);\n+}"}]}