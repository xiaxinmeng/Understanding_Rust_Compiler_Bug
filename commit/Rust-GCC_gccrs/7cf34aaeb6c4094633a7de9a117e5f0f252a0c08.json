{"sha": "7cf34aaeb6c4094633a7de9a117e5f0f252a0c08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NmMzRhYWViNmM0MDk0NjMzYTdkZTlhMTE3ZTVmMGYyNTJhMGMwOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-03-20T16:49:06Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-03-20T16:49:06Z"}, "message": "i386.md (*movti_internal): Set prefix attribute to maybe_vex for sselog1 and ssemov types.\n\n\t* config/i386/i386.md (*movti_internal): Set prefix attribute to\n\tmaybe_vex for sselog1 and ssemov types.\n\t(*movdi_internal): Reorder operand constraints.\n\t(*movsi_internal): Ditto.  Set prefix attribute to\n\tmaybe_vex for sselog1 and ssemov types.\n\t(*movtf_internal): Set prefix attribute to maybe_vex\n\tfor sselog1 and ssemov types.\n\t(*movdf_internal): Ditto.  Set prefix_data16 attribute for\n\tDImode ssemov types.  Reorder operand constraints.\n\t(*movsf_internal): Set type of alternatives 3,4 to imov.  Set prefix\n\tattribute to maybe_vex for sselog1 and ssemov types.  Set prefix_data16\n\tattribute for SImode ssemov types.  Reorder operand constraints.\n\nFrom-SVN: r196834", "tree": {"sha": "e0c5aa100884e6057a0e070b4687e540c8f33bdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0c5aa100884e6057a0e070b4687e540c8f33bdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cf34aaeb6c4094633a7de9a117e5f0f252a0c08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf34aaeb6c4094633a7de9a117e5f0f252a0c08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cf34aaeb6c4094633a7de9a117e5f0f252a0c08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cf34aaeb6c4094633a7de9a117e5f0f252a0c08/comments", "author": null, "committer": null, "parents": [{"sha": "19321415eedc7cde0db631fb9a4dfbf36d351660", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19321415eedc7cde0db631fb9a4dfbf36d351660", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19321415eedc7cde0db631fb9a4dfbf36d351660"}], "stats": {"total": 162, "additions": 97, "deletions": 65}, "files": [{"sha": "1538ca45d32cf9b3d1635051370b2d96eb5dc42b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf34aaeb6c4094633a7de9a117e5f0f252a0c08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf34aaeb6c4094633a7de9a117e5f0f252a0c08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cf34aaeb6c4094633a7de9a117e5f0f252a0c08", "patch": "@@ -1,3 +1,18 @@\n+2013-03-20  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*movti_internal): Set prefix attribute to\n+\tmaybe_vex for sselog1 and ssemov types.\n+\t(*movdi_internal): Reorder operand constraints.\n+\t(*movsi_internal): Ditto.  Set prefix attribute to\n+\tmaybe_vex for sselog1 and ssemov types.\n+\t(*movtf_internal): Set prefix attribute to maybe_vex\n+\tfor sselog1 and ssemov types.\n+\t(*movdf_internal): Ditto.  Set prefix_data16 attribute for\n+\tDImode ssemov types.  Reorder operand constraints.\n+\t(*movsf_internal): Set type of alternatives 3,4 to imov.  Set prefix\n+\tattribute to maybe_vex for sselog1 and ssemov types.  Set prefix_data16\n+\tattribute for SImode ssemov types.  Reorder operand constraints.\n+\n 2013-03-20  Martin Jambor  <mjambor@suse.cz>\n \n \t* params.def (PARAM_IPA_CP_ARRAY_INDEX_HINT_BONUS): New parameter.\n@@ -324,7 +339,7 @@\n \t    Chao-ying Fu <fu@mips.com>\n \n \t* doc/extend.texi: (micromips, nomicromips, nocompression):\n-\tDocument new function attributes. \n+\tDocument new function attributes.\n \t* doc/invoke.texi (minterlink-compressed, mmicromips,\n \tm14k, m14ke, m14kec): Document new options.\n \t(minterlink-mips16): Update documentation."}, {"sha": "e74785aaab2e420cb702e8247feaf483156312c2", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 81, "deletions": 64, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cf34aaeb6c4094633a7de9a117e5f0f252a0c08/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cf34aaeb6c4094633a7de9a117e5f0f252a0c08/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7cf34aaeb6c4094633a7de9a117e5f0f252a0c08", "patch": "@@ -1832,7 +1832,10 @@\n }\n   [(set_attr \"isa\" \"x64,x64,*,*,*\")\n    (set_attr \"type\" \"*,*,sselog1,ssemov,ssemov\")\n-   (set_attr \"prefix\" \"*,*,maybe_vex,maybe_vex,maybe_vex\")\n+   (set (attr \"prefix\")\n+     (if_then_else (eq_attr \"type\" \"sselog1,ssemov\")\n+       (const_string \"maybe_vex\")\n+       (const_string \"orig\")))\n    (set (attr \"mode\")\n    \t(cond [(eq_attr \"alternative\" \"0,1\")\n \t\t (const_string \"DI\")\n@@ -1859,9 +1862,9 @@\n \n (define_insn \"*movdi_internal\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\"\n-    \"=r  ,o  ,r,r  ,r,m ,*y,m*y,*y,?*y,?r ,?*Ym,*x,m ,*x,*x,?r ,?*Yi,?*x,?*Ym\")\n+    \"=r  ,o  ,r,r  ,r,m ,*y,m*y,*y,?*y,?r ,?*Ym,*x,*x,*x,m ,?r ,?*Yi,?*x,?*Ym\")\n \t(match_operand:DI 1 \"general_operand\"\n-    \"riFo,riF,Z,rem,i,re,C ,*y ,m ,m  ,*Ym,r   ,C ,*x,*x,m ,*Yi,r   ,*Ym,*x\"))]\n+    \"riFo,riF,Z,rem,i,re,C ,*y ,m ,m  ,*Ym,r   ,C ,*x,m ,*x,*Yi,r   ,*Ym,*x\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -1892,11 +1895,11 @@\n \tcase MODE_TI:\n \t  return \"%vmovdqa\\t{%1, %0|%0, %1}\";\n \n-\tcase MODE_V4SF:\n-\t  return \"%vmovaps\\t{%1, %0|%0, %1}\";\n \tcase MODE_V2SF:\n \t  gcc_assert (!TARGET_AVX);\n \t  return \"movlps\\t{%1, %0|%0, %1}\";\n+\tcase MODE_V4SF:\n+\t  return \"%vmovaps\\t{%1, %0|%0, %1}\";\n \n \tdefault:\n \t  gcc_unreachable ();\n@@ -1974,7 +1977,7 @@\n    (set (attr \"mode\")\n      (cond [(eq_attr \"alternative\" \"2\")\n \t      (const_string \"SI\")\n-\t    (eq_attr \"alternative\" \"12,14\")\n+\t    (eq_attr \"alternative\" \"12,13\")\n \t      (cond [(ior (not (match_test \"TARGET_SSE2\"))\n \t\t\t  (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n \t\t       (const_string \"V4SF\")\n@@ -1985,11 +1988,11 @@\n \t\t    ]\n \t\t    (const_string \"TI\"))\n \n-\t       (and (eq_attr \"alternative\" \"13,15\")\n-\t\t    (not (match_test \"TARGET_SSE2\")))\n-\t\t (const_string \"V2SF\")\n-\t      ]\n-\t      (const_string \"DI\")))])\n+\t    (and (eq_attr \"alternative\" \"14,15\")\n+\t\t (not (match_test \"TARGET_SSE2\")))\n+\t      (const_string \"V2SF\")\n+\t   ]\n+\t   (const_string \"DI\")))])\n \n (define_split\n   [(set (match_operand:DI 0 \"nonimmediate_operand\")\n@@ -2002,9 +2005,9 @@\n \n (define_insn \"*movsi_internal\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n-\t\t\t\"=r,m ,*y,*y,?rm,?*y,*x,*x,?r ,m ,?*Yi,*x\")\n+\t\t\t\"=r,m ,*y,*y,?rm,?*y,*x,*x,*x,m ,?r ,?*Yi\")\n \t(match_operand:SI 1 \"general_operand\"\n-\t\t\t\"g ,re,C ,*y,*y ,rm ,C ,*x,*Yi,*x,r   ,m\"))]\n+\t\t\t\"g ,re,C ,*y,*y ,rm ,C ,*x,m ,*x,*Yi,r\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -2060,9 +2063,9 @@\n \t   ]\n \t   (const_string \"imov\")))\n    (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"0,1,2,3,4,5\")\n-       (const_string \"orig\")\n-       (const_string \"maybe_vex\")))\n+     (if_then_else (eq_attr \"type\" \"sselog1,ssemov\")\n+       (const_string \"maybe_vex\")\n+       (const_string \"orig\")))\n    (set (attr \"prefix_data16\")\n      (if_then_else (and (eq_attr \"type\" \"ssemov\") (eq_attr \"mode\" \"SI\"))\n        (const_string \"1\")\n@@ -2071,17 +2074,17 @@\n      (cond [(eq_attr \"alternative\" \"2,3\")\n \t      (const_string \"DI\")\n \t    (eq_attr \"alternative\" \"6,7\")\n-\t      (cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n+\t      (cond [(ior (not (match_test \"TARGET_SSE2\"))\n+\t\t\t  (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n \t\t       (const_string \"V4SF\")\n \t\t     (match_test \"TARGET_AVX\")\n \t\t       (const_string \"TI\")\n-\t\t     (ior (not (match_test \"TARGET_SSE2\"))\n-\t\t     \t  (match_test \"optimize_function_for_size_p (cfun)\"))\n+\t\t     (match_test \"optimize_function_for_size_p (cfun)\")\n \t\t       (const_string \"V4SF\")\n \t\t    ]\n \t\t    (const_string \"TI\"))\n \n-\t    (and (eq_attr \"alternative\" \"8,9,10,11\")\n+\t    (and (eq_attr \"alternative\" \"8,9\")\n \t         (not (match_test \"TARGET_SSE2\")))\n \t      (const_string \"SF\")\n \t   ]\n@@ -2662,7 +2665,10 @@\n }\n   [(set_attr \"isa\" \"*,*,*,x64,x64\")\n    (set_attr \"type\" \"sselog1,ssemov,ssemov,*,*\")\n-   (set_attr \"prefix\" \"maybe_vex,maybe_vex,maybe_vex,*,*\")\n+   (set (attr \"prefix\")\n+     (if_then_else (eq_attr \"type\" \"sselog1,ssemov\")\n+       (const_string \"maybe_vex\")\n+       (const_string \"orig\")))\n    (set (attr \"mode\")\n         (cond [(eq_attr \"alternative\" \"3,4\")\n \t\t (const_string \"DI\")\n@@ -2726,9 +2732,9 @@\n ;; Possible store forwarding (partial memory) stall in alternative 4.\n (define_insn \"*movdf_internal\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-    \"=Yf*f,m   ,Yf*f,?Yd*r ,!o   ,?r,?m,?r,?r,x,x,x,m,*x,*x,*x,m ,Yi,r\")\n+    \"=Yf*f,m   ,Yf*f,?Yd*r ,!o   ,?r,?m,?r,?r,x,x,x,m,*x,*x,*x,m ,r ,Yi\")\n \t(match_operand:DF 1 \"general_operand\"\n-    \"Yf*fm,Yf*f,G   ,Yd*roF,Yd*rF,rm,rC,C ,F ,C,x,m,x,C ,*x,m ,*x,r ,Yi\"))]\n+    \"Yf*fm,Yf*f,G   ,Yd*roF,Yd*rF,rm,rC,C ,F ,C,x,m,x,C ,*x,m ,*x,Yi,r\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -2837,11 +2843,13 @@\n        (const_string \"8\")\n        (const_string \"*\")))\n    (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"0,1,2,3,4,5,6,7,8\")\n-       (const_string \"orig\")\n-       (const_string \"maybe_vex\")))\n+     (if_then_else (eq_attr \"type\" \"sselog1,ssemov\")\n+       (const_string \"maybe_vex\")\n+       (const_string \"orig\")))\n    (set (attr \"prefix_data16\")\n-     (if_then_else (eq_attr \"mode\" \"V1DF\")\n+     (if_then_else\n+       (ior (and (eq_attr \"type\" \"ssemov\") (eq_attr \"mode\" \"DI\"))\n+\t    (eq_attr \"mode\" \"V1DF\"))\n        (const_string \"1\")\n        (const_string \"*\")))\n    (set (attr \"mode\")\n@@ -2870,16 +2878,16 @@\n \t\t  movaps encodes one byte shorter for !TARGET_AVX.  */\n \t       (eq_attr \"alternative\" \"10,14\")\n \t\t (cond [(ior (not (match_test \"TARGET_SSE2\"))\n-\t\t       \t     (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n+\t\t\t     (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\"))\n \t\t\t  (const_string \"V4SF\")\n \t\t\t(match_test \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n \t\t\t  (const_string \"V2DF\")\n \t\t\t(match_test \"TARGET_AVX\")\n \t\t\t  (const_string \"DF\")\n \t\t\t(match_test \"optimize_function_for_size_p (cfun)\")\n \t\t\t  (const_string \"V4SF\")\n-\t\t   ]\n-\t\t   (const_string \"DF\"))\n+\t\t       ]\n+\t\t       (const_string \"DF\"))\n \n \t       /* For architectures resolving dependencies on register\n \t\t  parts we may avoid extra work to zero out upper part\n@@ -2889,8 +2897,8 @@\n \t\t\t  (const_string \"V2SF\")\n \t\t\t(match_test \"TARGET_SSE_SPLIT_REGS\")\n \t\t\t  (const_string \"V1DF\")\n-\t\t   ]\n-\t\t   (const_string \"DF\"))\n+\t\t       ]\n+\t\t       (const_string \"DF\"))\n \n \t       (and (eq_attr \"alternative\" \"12,16\")\n \t\t    (not (match_test \"TARGET_SSE2\")))\n@@ -2900,9 +2908,9 @@\n \n (define_insn \"*movsf_internal\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"\n-\t  \"=Yf*f,m   ,Yf*f,?r ,?m,x,x,x,m,!*y,!m,!*y,?Yi,?r,!*Ym,!r\")\n+\t  \"=Yf*f,m   ,Yf*f,?r ,?m,x,x,x,m,?r,?Yi,!*y,!*y,!m,!r ,!*Ym\")\n \t(match_operand:SF 1 \"general_operand\"\n-\t  \"Yf*fm,Yf*f,G   ,rmF,rF,C,x,m,x,m  ,*y,*y ,r  ,Yi,r   ,*Ym\"))]\n+\t  \"Yf*fm,Yf*f,G   ,rmF,rF,C,x,m,x,Yi,r  ,*y ,m  ,*y,*Ym,r\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -2931,27 +2939,32 @@\n       return standard_sse_constant_opcode (insn, operands[1]);\n \n     case 6:\n-      if (get_attr_mode (insn) == MODE_V4SF)\n-\treturn \"%vmovaps\\t{%1, %0|%0, %1}\";\n-      if (TARGET_AVX)\n-\treturn \"vmovss\\t{%1, %0, %0|%0, %0, %1}\";\n-\n     case 7:\n     case 8:\n-      return \"%vmovss\\t{%1, %0|%0, %1}\";\n+      switch (get_attr_mode (insn))\n+\t{\n+\tcase MODE_V4SF:\n+\t  return \"%vmovaps\\t{%1, %0|%0, %1}\";\n+\tcase MODE_SF:\n+\t  if (TARGET_AVX && REG_P (operands[0]) && REG_P (operands[1]))\n+\t    return \"vmovss\\t{%1, %0, %0|%0, %0, %1}\";\n+\t  return \"%vmovss\\t{%1, %0|%0, %1}\";\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n \n     case 9:\n     case 10:\n-    case 14:\n-    case 15:\n-      return \"movd\\t{%1, %0|%0, %1}\";\n+      return \"%vmovd\\t{%1, %0|%0, %1}\";\n \n     case 11:\n-      return \"movq\\t{%1, %0|%0, %1}\";\n-\n     case 12:\n     case 13:\n-      return \"%vmovd\\t{%1, %0|%0, %1}\";\n+    case 14:\n+    case 15:\n+      if (get_attr_mode (insn) == MODE_DI)\n+\treturn \"movq\\t{%1, %0|%0, %1}\";\n+      return \"movd\\t{%1, %0|%0, %1}\";\n \n     default:\n       gcc_unreachable ();\n@@ -2961,27 +2974,34 @@\n \t(cond [(eq_attr \"alternative\" \"0,1,2\")\n \t\t (const_string \"fmov\")\n \t       (eq_attr \"alternative\" \"3,4\")\n-\t\t (const_string \"multi\")\n+\t\t (const_string \"imov\")\n \t       (eq_attr \"alternative\" \"5\")\n \t\t (const_string \"sselog1\")\n-\t       (eq_attr \"alternative\" \"9,10,11,14,15\")\n+\t       (eq_attr \"alternative\" \"11,12,13,14,15\")\n \t\t (const_string \"mmxmov\")\n \t      ]\n \t      (const_string \"ssemov\")))\n    (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"5,6,7,8,12,13\")\n+     (if_then_else (eq_attr \"type\" \"sselog1,ssemov\")\n        (const_string \"maybe_vex\")\n        (const_string \"orig\")))\n+   (set (attr \"prefix_data16\")\n+     (if_then_else (and (eq_attr \"type\" \"ssemov\") (eq_attr \"mode\" \"SI\"))\n+       (const_string \"1\")\n+       (const_string \"*\")))\n    (set (attr \"mode\")\n-        (cond [(eq_attr \"alternative\" \"3,4,9,10\")\n+        (cond [(eq_attr \"alternative\" \"3,4,9,10,14,15\")\n \t\t (const_string \"SI\")\n+\t       (eq_attr \"alternative\" \"11\")\n+\t\t (const_string \"DI\")\n \t       (eq_attr \"alternative\" \"5\")\n-\t\t (cond [(match_test \"TARGET_AVX\")\n-\t\t\t  (const_string \"V4SF\")\n- \t\t\t(ior (not (match_test \"TARGET_SSE2\"))\n- \t\t\t     (match_test \"optimize_function_for_size_p (cfun)\"))\n+\t\t (cond [(not (match_test \"TARGET_SSE2\"))\n  \t\t \t  (const_string \"V4SF\")\n-\t\t\t(match_test \"TARGET_SSE_LOAD0_BY_PXOR\")\n+\t\t\t(match_test \"TARGET_AVX\")\n+\t\t\t  (const_string \"V4SF\")\n+ \t\t\t(match_test \"optimize_function_for_size_p (cfun)\")\n+\t\t\t  (const_string \"V4SF\")\n+ \t\t\t(match_test \"TARGET_SSE_LOAD0_BY_PXOR\")\n \t\t\t  (const_string \"TI\")\n \t\t       ]\n \t\t       (const_string \"V4SF\"))\n@@ -2996,15 +3016,12 @@\n \t\t  of instructions to load just part of the register.  It is\n \t\t  better to maintain the whole registers in single format\n \t\t  to avoid problems on using packed logical operations.  */\n-\t       (eq_attr \"alternative\" \"6\")\n-\t\t (if_then_else\n-\t\t   (ior (match_test \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n-\t\t\t(match_test \"TARGET_SSE_SPLIT_REGS\"))\n-\t\t   (const_string \"V4SF\")\n-\t\t   (const_string \"SF\"))\n-\t       (eq_attr \"alternative\" \"11\")\n-\t\t (const_string \"DI\")]\n-\t       (const_string \"SF\")))])\n+\t       (and (eq_attr \"alternative\" \"6\")\n+\t\t    (ior (match_test \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n+\t\t\t (match_test \"TARGET_SSE_SPLIT_REGS\")))\n+\t\t (const_string \"V4SF\")\n+\t      ]\n+\t      (const_string \"SF\")))])\n \n (define_split\n   [(set (match_operand 0 \"any_fp_register_operand\")"}]}