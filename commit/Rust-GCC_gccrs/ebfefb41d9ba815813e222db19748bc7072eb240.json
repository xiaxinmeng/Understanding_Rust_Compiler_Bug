{"sha": "ebfefb41d9ba815813e222db19748bc7072eb240", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJmZWZiNDFkOWJhODE1ODEzZTIyMmRiMTk3NDhiYzcwNzJlYjI0MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-07-11T21:03:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-07-11T21:03:19Z"}, "message": "re PR c++/49672 ([C++0x] Internal error when passing variadic template args to a lambda function)\n\n\tPR c++/49672\n\t* pt.c (extract_fnparm_pack): Split out from...\n\t(make_fnparm_pack): ...here.\n\t(instantiate_decl): Handle non-pack parms after a pack.\n\t* semantics.c (maybe_add_lambda_conv_op): Don't in a template.\n\nFrom-SVN: r176183", "tree": {"sha": "a2a6883ab203331d7177483d217b3c6aacd9e7d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2a6883ab203331d7177483d217b3c6aacd9e7d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebfefb41d9ba815813e222db19748bc7072eb240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebfefb41d9ba815813e222db19748bc7072eb240", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebfefb41d9ba815813e222db19748bc7072eb240", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebfefb41d9ba815813e222db19748bc7072eb240/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d983a802f660304ee850fac52388d698c5539d71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d983a802f660304ee850fac52388d698c5539d71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d983a802f660304ee850fac52388d698c5539d71"}], "stats": {"total": 78, "additions": 60, "deletions": 18}, "files": [{"sha": "6d44bf2f5efc1fb6b1797e6d5f72c6ad69c21f67", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfefb41d9ba815813e222db19748bc7072eb240/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfefb41d9ba815813e222db19748bc7072eb240/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ebfefb41d9ba815813e222db19748bc7072eb240", "patch": "@@ -1,5 +1,11 @@\n 2011-07-11  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/49672\n+\t* pt.c (extract_fnparm_pack): Split out from...\n+\t(make_fnparm_pack): ...here.\n+\t(instantiate_decl): Handle non-pack parms after a pack.\n+\t* semantics.c (maybe_add_lambda_conv_op): Don't in a template.\n+\n \t* decl2.c (decl_constant_var_p): Use decl_maybe_constant_var_p.\n \n \tPR c++/44609"}, {"sha": "33b5b5fab0c59abadce9091384ee804533afdc7b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfefb41d9ba815813e222db19748bc7072eb240/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfefb41d9ba815813e222db19748bc7072eb240/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ebfefb41d9ba815813e222db19748bc7072eb240", "patch": "@@ -8711,23 +8711,31 @@ tsubst_template_arg (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n   return r;\n }\n \n-/* Give a chain SPEC_PARM of PARM_DECLs, pack them into a\n-   NONTYPE_ARGUMENT_PACK.  */\n+/* Given a function parameter pack TMPL_PARM and some function parameters\n+   instantiated from it at *SPEC_P, return a NONTYPE_ARGUMENT_PACK of them\n+   and set *SPEC_P to point at the next point in the list.  */\n \n static tree\n-make_fnparm_pack (tree spec_parm)\n+extract_fnparm_pack (tree tmpl_parm, tree *spec_p)\n {\n   /* Collect all of the extra \"packed\" parameters into an\n      argument pack.  */\n   tree parmvec;\n   tree parmtypevec;\n   tree argpack = make_node (NONTYPE_ARGUMENT_PACK);\n   tree argtypepack = cxx_make_type (TYPE_ARGUMENT_PACK);\n-  int i, len = list_length (spec_parm);\n+  tree spec_parm = *spec_p;\n+  int i, len;\n+\n+  for (len = 0; spec_parm; ++len, spec_parm = TREE_CHAIN (spec_parm))\n+    if (tmpl_parm\n+\t&& !function_parameter_expanded_from_pack_p (spec_parm, tmpl_parm))\n+      break;\n \n   /* Fill in PARMVEC and PARMTYPEVEC with all of the parameters.  */\n   parmvec = make_tree_vec (len);\n   parmtypevec = make_tree_vec (len);\n+  spec_parm = *spec_p;\n   for (i = 0; i < len; i++, spec_parm = DECL_CHAIN (spec_parm))\n     {\n       TREE_VEC_ELT (parmvec, i) = spec_parm;\n@@ -8738,9 +8746,19 @@ make_fnparm_pack (tree spec_parm)\n   SET_ARGUMENT_PACK_ARGS (argpack, parmvec);\n   SET_ARGUMENT_PACK_ARGS (argtypepack, parmtypevec);\n   TREE_TYPE (argpack) = argtypepack;\n+  *spec_p = spec_parm;\n \n   return argpack;\n-}        \n+}\n+\n+/* Give a chain SPEC_PARM of PARM_DECLs, pack them into a\n+   NONTYPE_ARGUMENT_PACK.  */\n+\n+static tree\n+make_fnparm_pack (tree spec_parm)\n+{\n+  return extract_fnparm_pack (NULL_TREE, &spec_parm);\n+}\n \n /* Substitute ARGS into T, which is an pack expansion\n    (i.e. TYPE_PACK_EXPANSION or EXPR_PACK_EXPANSION). Returns a\n@@ -17830,21 +17848,21 @@ instantiate_decl (tree d, int defer_ok,\n \t  spec_parm = skip_artificial_parms_for (d, spec_parm);\n \t  tmpl_parm = skip_artificial_parms_for (subst_decl, tmpl_parm);\n \t}\n-      while (tmpl_parm && !FUNCTION_PARAMETER_PACK_P (tmpl_parm))\n+      for (; tmpl_parm; tmpl_parm = DECL_CHAIN (tmpl_parm))\n \t{\n-\t  register_local_specialization (spec_parm, tmpl_parm);\n-\t  tmpl_parm = DECL_CHAIN (tmpl_parm);\n-\t  spec_parm = DECL_CHAIN (spec_parm);\n+\t  if (!FUNCTION_PARAMETER_PACK_P (tmpl_parm))\n+\t    {\n+\t      register_local_specialization (spec_parm, tmpl_parm);\n+\t      spec_parm = DECL_CHAIN (spec_parm);\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Register the (value) argument pack as a specialization of\n+\t\t TMPL_PARM, then move on.  */\n+\t      tree argpack = extract_fnparm_pack (tmpl_parm, &spec_parm);\n+\t      register_local_specialization (argpack, tmpl_parm);\n+\t    }\n \t}\n-      if (tmpl_parm && FUNCTION_PARAMETER_PACK_P (tmpl_parm))\n-        {\n-          /* Register the (value) argument pack as a specialization of\n-             TMPL_PARM, then move on.  */\n-\t  tree argpack = make_fnparm_pack (spec_parm);\n-          register_local_specialization (argpack, tmpl_parm);\n-          tmpl_parm = DECL_CHAIN (tmpl_parm);\n-\t  spec_parm = NULL_TREE;\n-        }\n       gcc_assert (!spec_parm);\n \n       /* Substitute into the body of the function.  */"}, {"sha": "fd00e2976da0a15f93e88c75540f1cb1ccecdafe", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfefb41d9ba815813e222db19748bc7072eb240/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfefb41d9ba815813e222db19748bc7072eb240/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=ebfefb41d9ba815813e222db19748bc7072eb240", "patch": "@@ -8808,6 +8808,9 @@ maybe_add_lambda_conv_op (tree type)\n   if (LAMBDA_EXPR_CAPTURE_LIST (CLASSTYPE_LAMBDA_EXPR (type)) != NULL_TREE)\n     return;\n \n+  if (processing_template_decl)\n+    return;\n+\n   stattype = build_function_type (TREE_TYPE (TREE_TYPE (callop)),\n \t\t\t\t  FUNCTION_ARG_CHAIN (callop));\n "}, {"sha": "f17b33618aa4c5393c1175dac7a17076a181b7c8", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-variadic1.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfefb41d9ba815813e222db19748bc7072eb240/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfefb41d9ba815813e222db19748bc7072eb240/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-variadic1.C?ref=ebfefb41d9ba815813e222db19748bc7072eb240", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/49672\n+// { dg-options -std=c++0x }\n+\n+template<typename ... Args>\n+static void foo()\n+{\n+  [](Args..., int x) {\n+    x;\n+  };\n+}\n+\n+int main()\n+{\n+  foo();\n+}"}]}