{"sha": "84c7be4b21fdb0614ffbf954771b0aa241a7877d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRjN2JlNGIyMWZkYjA2MTRmZmJmOTU0NzcxYjBhYTI0MWE3ODc3ZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-14T12:56:17Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-04-14T12:56:17Z"}, "message": "(real_value_from_int_cst): New arg, TYPE.\n\nPass mode to REAL_VALUE_FROM_INT.\n(build_real_from_int_cst): Properly deal with truncation.\n\nFrom-SVN: r11767", "tree": {"sha": "0fd8841104cfbfbc519013b9bc5ebff937003e40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fd8841104cfbfbc519013b9bc5ebff937003e40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84c7be4b21fdb0614ffbf954771b0aa241a7877d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c7be4b21fdb0614ffbf954771b0aa241a7877d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84c7be4b21fdb0614ffbf954771b0aa241a7877d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c7be4b21fdb0614ffbf954771b0aa241a7877d/comments", "author": null, "committer": null, "parents": [{"sha": "7cb6a121f2ca1f53837c8601dea6bde95014d735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cb6a121f2ca1f53837c8601dea6bde95014d735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cb6a121f2ca1f53837c8601dea6bde95014d735"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "74d4fc0a7433b52f35364306d6c134ee13bf18d3", "filename": "gcc/tree.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c7be4b21fdb0614ffbf954771b0aa241a7877d/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c7be4b21fdb0614ffbf954771b0aa241a7877d/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=84c7be4b21fdb0614ffbf954771b0aa241a7877d", "patch": "@@ -1337,8 +1337,8 @@ build_real (type, d)\n #if !defined (REAL_IS_NOT_DOUBLE) || defined (REAL_ARITHMETIC)\n \n REAL_VALUE_TYPE\n-real_value_from_int_cst (i)\n-     tree i;\n+real_value_from_int_cst (type, i)\n+     tree type, i;\n {\n   REAL_VALUE_TYPE d;\n   REAL_VALUE_TYPE e;\n@@ -1347,9 +1347,11 @@ real_value_from_int_cst (i)\n \n #ifdef REAL_ARITHMETIC\n   if (! TREE_UNSIGNED (TREE_TYPE (i)))\n-    REAL_VALUE_FROM_INT (d, TREE_INT_CST_LOW (i), TREE_INT_CST_HIGH (i));\n+    REAL_VALUE_FROM_INT (d, TREE_INT_CST_LOW (i), TREE_INT_CST_HIGH (i),\n+\t\t\t TYPE_MODE (type));\n   else\n-    REAL_VALUE_FROM_UNSIGNED_INT (d, TREE_INT_CST_LOW (i), TREE_INT_CST_HIGH (i));\n+    REAL_VALUE_FROM_UNSIGNED_INT (d, TREE_INT_CST_LOW (i),\n+\t\t\t\t  TREE_INT_CST_HIGH (i), TYPE_MODE (type));\n #else /* not REAL_ARITHMETIC */\n   if (TREE_INT_CST_HIGH (i) < 0 && ! TREE_UNSIGNED (TREE_TYPE (i)))\n     {\n@@ -1399,7 +1401,12 @@ build_real_from_int_cst (type, i)\n \n   set_float_handler (float_error);\n \n-  d = REAL_VALUE_TRUNCATE (TYPE_MODE (type), real_value_from_int_cst (i));\n+#if !defined (REAL_IS_NOT_DOUBLE) || defined (REAL_ARITHMETIC)\n+  d = real_value_from_int_cst (type, i);\n+#else\n+  d = REAL_VALUE_TRUNCATE (TYPE_MODE (type),\n+\t\t\t   real_value_from_int_cst (type, i));\n+#endif\n \n   /* Check for valid float value for this type on this target machine.  */\n "}]}