{"sha": "97049e83286be13ac25c57b6f60c596156288db8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcwNDllODMyODZiZTEzYWMyNWM1N2I2ZjYwYzU5NjE1NjI4OGRiOA==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-11-25T00:05:33Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-11-25T00:05:33Z"}, "message": "tm.texi.in (DELAY_SLOTS_FOR_EPILOGUE): Remove documentation.\n\ngcc/\n\t* doc/tm.texi.in (DELAY_SLOTS_FOR_EPILOGUE): Remove documentation.\n\t(ELIGIBLE_FOR_EPILOGUE_DELAY): Likewise.\n\t* doc/tm.texi: Regenerate.\n\t* reorg.c (fill_simple_delay_slots): Remove code conditional on\n\tDELAY_SLOTS_FOR_EPILOGUE being defined.\n\t(make_return_insns, dbr_schedule): Likewise.\n\t* system.h (DELAY_SLOTS_FOR_EPILOGUE): Poison.\n\t(ELIGIBLE_FOR_EPILOGUE_DELAY): Likewise.\n\nFrom-SVN: r193787", "tree": {"sha": "f4fbe4062386c89b20d55c06b1f8c3a1bd2e796f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4fbe4062386c89b20d55c06b1f8c3a1bd2e796f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97049e83286be13ac25c57b6f60c596156288db8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97049e83286be13ac25c57b6f60c596156288db8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97049e83286be13ac25c57b6f60c596156288db8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97049e83286be13ac25c57b6f60c596156288db8/comments", "author": null, "committer": null, "parents": [{"sha": "ddffee6824dc069e4a18f572c06ccf5313e41377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddffee6824dc069e4a18f572c06ccf5313e41377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddffee6824dc069e4a18f572c06ccf5313e41377"}], "stats": {"total": 196, "additions": 13, "deletions": 183}, "files": [{"sha": "fcfb0749ff0aebf12fae1c31507f919b2457e9c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97049e83286be13ac25c57b6f60c596156288db8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97049e83286be13ac25c57b6f60c596156288db8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97049e83286be13ac25c57b6f60c596156288db8", "patch": "@@ -1,3 +1,14 @@\n+2012-11-25  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* doc/tm.texi.in (DELAY_SLOTS_FOR_EPILOGUE): Remove documentation.\n+\t(ELIGIBLE_FOR_EPILOGUE_DELAY): Likewise.\n+\t* doc/tm.texi: Regenerate.\n+\t* reorg.c (fill_simple_delay_slots): Remove code conditional on\n+\tDELAY_SLOTS_FOR_EPILOGUE being defined.\n+\t(make_return_insns, dbr_schedule): Likewise.\n+\t* system.h (DELAY_SLOTS_FOR_EPILOGUE): Poison.\n+\t(ELIGIBLE_FOR_EPILOGUE_DELAY): Likewise.\n+\n 2012-11-24  Jack Howarth <howarth@bromo.med.uc.edu>\n \n \t* config/darwin.h (LINK_COMMAND_SPEC_A): Deal with -fsanitize=address."}, {"sha": "ef47b1434a15a8847951da842b5268c2e4f74bf6", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97049e83286be13ac25c57b6f60c596156288db8/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97049e83286be13ac25c57b6f60c596156288db8/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=97049e83286be13ac25c57b6f60c596156288db8", "patch": "@@ -4849,41 +4849,6 @@ used by the exception handling mechanism, and so should be considered live\n on entry to an exception edge.\n @end defmac\n \n-@defmac DELAY_SLOTS_FOR_EPILOGUE\n-Define this macro if the function epilogue contains delay slots to which\n-instructions from the rest of the function can be ``moved''.  The\n-definition should be a C expression whose value is an integer\n-representing the number of delay slots there.\n-@end defmac\n-\n-@defmac ELIGIBLE_FOR_EPILOGUE_DELAY (@var{insn}, @var{n})\n-A C expression that returns 1 if @var{insn} can be placed in delay\n-slot number @var{n} of the epilogue.\n-\n-The argument @var{n} is an integer which identifies the delay slot now\n-being considered (since different slots may have different rules of\n-eligibility).  It is never negative and is always less than the number\n-of epilogue delay slots (what @code{DELAY_SLOTS_FOR_EPILOGUE} returns).\n-If you reject a particular insn for a given delay slot, in principle, it\n-may be reconsidered for a subsequent delay slot.  Also, other insns may\n-(at least in principle) be considered for the so far unfilled delay\n-slot.\n-\n-@findex epilogue_delay_list\n-@findex crtl->epilogue_delay_list\n-@findex final_scan_insn\n-The insns accepted to fill the epilogue delay slots are put in an RTL\n-list made with @code{insn_list} objects, stored in\n-@code{crtl->epilogue_delay_list}.  The insn for the first\n-delay slot comes first in the list.  Your definition of the macro\n-@code{TARGET_ASM_FUNCTION_EPILOGUE} should fill the delay slots by\n-outputting the insns in this list, usually by calling\n-@code{final_scan_insn}.\n-\n-You need not define this macro if you did not define\n-@code{DELAY_SLOTS_FOR_EPILOGUE}.\n-@end defmac\n-\n @deftypefn {Target Hook} void TARGET_ASM_OUTPUT_MI_THUNK (FILE *@var{file}, tree @var{thunk_fndecl}, HOST_WIDE_INT @var{delta}, HOST_WIDE_INT @var{vcall_offset}, tree @var{function})\n A function that outputs the assembler code for a thunk\n function, used to implement C++ virtual function calls with multiple"}, {"sha": "f3945a46d3d36020770f2a5f685128f54859a4c3", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97049e83286be13ac25c57b6f60c596156288db8/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97049e83286be13ac25c57b6f60c596156288db8/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=97049e83286be13ac25c57b6f60c596156288db8", "patch": "@@ -4778,41 +4778,6 @@ used by the exception handling mechanism, and so should be considered live\n on entry to an exception edge.\n @end defmac\n \n-@defmac DELAY_SLOTS_FOR_EPILOGUE\n-Define this macro if the function epilogue contains delay slots to which\n-instructions from the rest of the function can be ``moved''.  The\n-definition should be a C expression whose value is an integer\n-representing the number of delay slots there.\n-@end defmac\n-\n-@defmac ELIGIBLE_FOR_EPILOGUE_DELAY (@var{insn}, @var{n})\n-A C expression that returns 1 if @var{insn} can be placed in delay\n-slot number @var{n} of the epilogue.\n-\n-The argument @var{n} is an integer which identifies the delay slot now\n-being considered (since different slots may have different rules of\n-eligibility).  It is never negative and is always less than the number\n-of epilogue delay slots (what @code{DELAY_SLOTS_FOR_EPILOGUE} returns).\n-If you reject a particular insn for a given delay slot, in principle, it\n-may be reconsidered for a subsequent delay slot.  Also, other insns may\n-(at least in principle) be considered for the so far unfilled delay\n-slot.\n-\n-@findex epilogue_delay_list\n-@findex crtl->epilogue_delay_list\n-@findex final_scan_insn\n-The insns accepted to fill the epilogue delay slots are put in an RTL\n-list made with @code{insn_list} objects, stored in\n-@code{crtl->epilogue_delay_list}.  The insn for the first\n-delay slot comes first in the list.  Your definition of the macro\n-@code{TARGET_ASM_FUNCTION_EPILOGUE} should fill the delay slots by\n-outputting the insns in this list, usually by calling\n-@code{final_scan_insn}.\n-\n-You need not define this macro if you did not define\n-@code{DELAY_SLOTS_FOR_EPILOGUE}.\n-@end defmac\n-\n @hook TARGET_ASM_OUTPUT_MI_THUNK\n A function that outputs the assembler code for a thunk\n function, used to implement C++ virtual function calls with multiple"}, {"sha": "d4c2deb0e9ec3f503544a8a5932fd0c077b26223", "filename": "gcc/reorg.c", "status": "modified", "additions": 0, "deletions": 112, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97049e83286be13ac25c57b6f60c596156288db8/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97049e83286be13ac25c57b6f60c596156288db8/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=97049e83286be13ac25c57b6f60c596156288db8", "patch": "@@ -2407,94 +2407,6 @@ fill_simple_delay_slots (int non_jumps_p)\n \n       note_delay_statistics (slots_filled, 0);\n     }\n-\n-#ifdef DELAY_SLOTS_FOR_EPILOGUE\n-  /* See if the epilogue needs any delay slots.  Try to fill them if so.\n-     The only thing we can do is scan backwards from the end of the\n-     function.  If we did this in a previous pass, it is incorrect to do it\n-     again.  */\n-  if (crtl->epilogue_delay_list)\n-    return;\n-\n-  slots_to_fill = DELAY_SLOTS_FOR_EPILOGUE;\n-  if (slots_to_fill == 0)\n-    return;\n-\n-  slots_filled = 0;\n-  CLEAR_RESOURCE (&set);\n-\n-  /* The frame pointer and stack pointer are needed at the beginning of\n-     the epilogue, so instructions setting them can not be put in the\n-     epilogue delay slot.  However, everything else needed at function\n-     end is safe, so we don't want to use end_of_function_needs here.  */\n-  CLEAR_RESOURCE (&needed);\n-  if (frame_pointer_needed)\n-    {\n-      SET_HARD_REG_BIT (needed.regs, FRAME_POINTER_REGNUM);\n-#if HARD_FRAME_POINTER_REGNUM != FRAME_POINTER_REGNUM\n-      SET_HARD_REG_BIT (needed.regs, HARD_FRAME_POINTER_REGNUM);\n-#endif\n-      if (! EXIT_IGNORE_STACK\n-\t  || crtl->sp_is_unchanging)\n-\tSET_HARD_REG_BIT (needed.regs, STACK_POINTER_REGNUM);\n-    }\n-  else\n-    SET_HARD_REG_BIT (needed.regs, STACK_POINTER_REGNUM);\n-\n-#ifdef EPILOGUE_USES\n-  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-    {\n-      if (EPILOGUE_USES (i))\n-\tSET_HARD_REG_BIT (needed.regs, i);\n-    }\n-#endif\n-\n-  for (trial = get_last_insn (); ! stop_search_p (trial, 1);\n-       trial = PREV_INSN (trial))\n-    {\n-      if (NOTE_P (trial))\n-\tcontinue;\n-      pat = PATTERN (trial);\n-      if (GET_CODE (pat) == USE || GET_CODE (pat) == CLOBBER)\n-\tcontinue;\n-\n-      if (! insn_references_resource_p (trial, &set, true)\n-\t  && ! insn_sets_resource_p (trial, &needed, true)\n-\t  && ! insn_sets_resource_p (trial, &set, true)\n-#ifdef HAVE_cc0\n-\t  /* Don't want to mess with cc0 here.  */\n-\t  && ! reg_mentioned_p (cc0_rtx, pat)\n-#endif\n-\t  && ! can_throw_internal (trial))\n-\t{\n-\t  trial = try_split (pat, trial, 1);\n-\t  if (ELIGIBLE_FOR_EPILOGUE_DELAY (trial, slots_filled))\n-\t    {\n-\t      /* Here as well we are searching backward, so put the\n-\t\t insns we find on the head of the list.  */\n-\n-\t      crtl->epilogue_delay_list\n-\t\t= gen_rtx_INSN_LIST (VOIDmode, trial,\n-\t\t\t\t     crtl->epilogue_delay_list);\n-\t      mark_end_of_function_resources (trial, true);\n-\t      update_block (trial, trial);\n-\t      delete_related_insns (trial);\n-\n-\t      /* Clear deleted bit so final.c will output the insn.  */\n-\t      INSN_DELETED_P (trial) = 0;\n-\n-\t      if (slots_to_fill == ++slots_filled)\n-\t\tbreak;\n-\t      continue;\n-\t    }\n-\t}\n-\n-      mark_set_resources (trial, &set, 0, MARK_SRC_DEST_CALL);\n-      mark_referenced_resources (trial, &needed, true);\n-    }\n-\n-  note_delay_statistics (slots_filled, 0);\n-#endif\n }\n \f\n /* Follow any unconditional jump at LABEL, for the purpose of redirecting JUMP;\n@@ -3731,17 +3643,6 @@ make_return_insns (rtx first)\n   rtx real_simple_return_label = function_simple_return_label;\n   int slots, i;\n \n-#ifdef DELAY_SLOTS_FOR_EPILOGUE\n-  /* If a previous pass filled delay slots in the epilogue, things get a\n-     bit more complicated, as those filler insns would generally (without\n-     data flow analysis) have to be executed after any existing branch\n-     delay slot filler insns.  It is also unknown whether such a\n-     transformation would actually be profitable.  Note that the existing\n-     code only cares for branches with (some) filled delay slots.  */\n-  if (crtl->epilogue_delay_list != NULL)\n-    return;\n-#endif\n-\n   /* See if there is a RETURN insn in the function other than the one we\n      made for END_OF_FUNCTION_LABEL.  If so, set up anything we can't change\n      into a RETURN to jump to it.  */\n@@ -4080,19 +3981,6 @@ dbr_schedule (rtx first)\n \n   free_resource_info ();\n   free (uid_to_ruid);\n-#ifdef DELAY_SLOTS_FOR_EPILOGUE\n-  /* SPARC assembler, for instance, emit warning when debug info is output\n-     into the delay slot.  */\n-  {\n-    rtx link;\n-\n-    for (link = crtl->epilogue_delay_list;\n-         link;\n-         link = XEXP (link, 1))\n-      INSN_LOCATION (XEXP (link, 0)) = 0;\n-  }\n-\n-#endif\n   crtl->dbr_scheduled_p = true;\n }\n #endif /* DELAY_SLOTS */"}, {"sha": "54d86acc36021296020e69666a11e411c23ff488", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97049e83286be13ac25c57b6f60c596156288db8/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97049e83286be13ac25c57b6f60c596156288db8/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=97049e83286be13ac25c57b6f60c596156288db8", "patch": "@@ -902,7 +902,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tUNALIGNED_LONG_ASM_OP UNALIGNED_DOUBLE_INT_ASM_OP\t\t   \\\n \tUSE_COMMON_FOR_ONE_ONLY IFCVT_EXTRA_FIELDS IFCVT_INIT_EXTRA_FIELDS \\\n \tCASE_USE_BIT_TESTS FIXUNS_TRUNC_LIKE_FIX_TRUNC                     \\\n-        GO_IF_MODE_DEPENDENT_ADDRESS\n+        GO_IF_MODE_DEPENDENT_ADDRESS DELAY_SLOTS_FOR_EPILOGUE              \\\n+        ELIGIBLE_FOR_EPILOGUE_DELAY\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}