{"sha": "f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjVlNTIzYjc2ZDFiZGFmMGRmMTVmNmJmZGVlNjAyYTNlMTUzYmU2OA==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2014-10-09T08:37:26Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-10-09T08:37:26Z"}, "message": "re PR libstdc++/60132 (C++11: lack of is_trivially_copy_constructible)\n\n2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n\n\tPR libstdc++/60132\n    \t* include/std/type_traits (is_trivially_copyable,\n    \tis_trivially_constructible, is_trivially_default_constructible,\n    \tis_trivially_copy_constructible, is_trivially_move_constructible,\n    \tis_trivially_assignable, is_trivially_copy_assignable,\n    \tis_trivially_move_assignable): New.\n    \t* testsuite/20_util/is_trivially_assignable/requirements/\n    \ttypedefs.cc: Likewise.\n    \t* testsuite/20_util/is_trivially_assignable/requirements/\n    \texplicit_instantiation.cc: Likewise.\n    \t* testsuite/20_util/is_trivially_assignable/value.cc: Likewise.\n\t* testsuite/20_util/is_trivially_constructible/requirements/\n\ttypedefs.cc: Likewise.\n\t* testsuite/20_util/is_trivially_constructible/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/20_util/is_trivially_constructible/value.cc: Likewise.\n\t* testsuite/20_util/is_trivially_copyable/requirements/\n\ttypedefs.cc: Likewise.\n\t* testsuite/20_util/is_trivially_copyable/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/20_util/is_trivially_copyable/value.cc: Likewise.\n\t* testsuite/20_util/is_trivially_copy_assignable/requirements/\n\ttypedefs.cc: Likewise.\n\t* testsuite/20_util/is_trivially_copy_assignable/requirements/\n\texplicit_instantiation.cc: Likewise.\n\t* testsuite/20_util/is_trivially_copy_assignable/value.cc: Likewise.\n\t* testsuite/20_util/is_trivially_copy_constructible/requirements/\n\ttypedefs.cc: Likewise.\n\t* testsuite/20_util/is_trivially_copy_constructible/requirements/\n\texplicit_instantiation.cc: Likewise.\n    \t* testsuite/20_util/is_trivially_copy_constructible/value.cc: Likewise.\n    \t* testsuite/20_util/is_trivially_default_constructible/requirements/\n    \ttypedefs.cc: Likewise.\n    \t* testsuite/20_util/is_trivially_default_constructible/requirements/\n    \texplicit_instantiation.cc: Likewise.\n    \t* testsuite/20_util/is_trivially_default_constructible/\n\tvalue.cc: Likewise.\n    \t* testsuite/20_util/is_trivially_move_assignable/requirements/\n    \ttypedefs.cc: Likewise.\n    \t* testsuite/20_util/is_trivially_move_assignable/requirements/\n    \texplicit_instantiation.cc: Likewise.\n    \t* testsuite/20_util/is_trivially_move_assignable/value.cc: Likewise.\n    \t* testsuite/20_util/is_trivially_move_constructible/requirements/\n    \ttypedefs.cc: Likewise.\n    \t* testsuite/20_util/is_trivially_move_constructible/requirements/\n    \texplicit_instantiation.cc: Likewise.\n    \t* testsuite/20_util/is_trivially_move_constructible/value.cc:\n\tLikewise.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust dg-error\n\tline number.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n\tLikewise.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\nFrom-SVN: r216032", "tree": {"sha": "ce6783bf7fd366aac8c6500d9fb64d912b23dbda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce6783bf7fd366aac8c6500d9fb64d912b23dbda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84937de246b5aa038ef6cfcec3a20297a690bde0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84937de246b5aa038ef6cfcec3a20297a690bde0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84937de246b5aa038ef6cfcec3a20297a690bde0"}], "stats": {"total": 1483, "additions": 1469, "deletions": 14}, "files": [{"sha": "89309fdb19fc5bdef2379f6c5f8baae281a2f168", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -1,3 +1,60 @@\n+2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tPR libstdc++/60132\n+\t* include/std/type_traits (is_trivially_copyable,\n+    \tis_trivially_constructible, is_trivially_default_constructible,\n+    \tis_trivially_copy_constructible, is_trivially_move_constructible,\n+    \tis_trivially_assignable, is_trivially_copy_assignable,\n+    \tis_trivially_move_assignable): New.\n+\t* testsuite/20_util/is_trivially_assignable/requirements/\n+    \ttypedefs.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_assignable/requirements/\n+    \texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_assignable/value.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_constructible/requirements/\n+\ttypedefs.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_constructible/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_constructible/value.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_copyable/requirements/\n+\ttypedefs.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_copyable/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_copyable/value.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_copy_assignable/requirements/\n+\ttypedefs.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_copy_assignable/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_copy_assignable/value.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_copy_constructible/requirements/\n+\ttypedefs.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_copy_constructible/requirements/\n+\texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_copy_constructible/value.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_default_constructible/requirements/\n+    \ttypedefs.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_default_constructible/requirements/\n+    \texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_default_constructible/\n+\tvalue.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_move_assignable/requirements/\n+    \ttypedefs.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_move_assignable/requirements/\n+    \texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_move_assignable/value.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_move_constructible/requirements/\n+    \ttypedefs.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_move_constructible/requirements/\n+    \texplicit_instantiation.cc: Likewise.\n+\t* testsuite/20_util/is_trivially_move_constructible/value.cc:\n+\tLikewise.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust dg-error\n+\tline number.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\n 2014-10-08  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/locale_facets.tcc (num_put::_M_insert_float): Do not"}, {"sha": "d776efeb68de748627c3aa747200afa8e166210e", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 52, "deletions": 9, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -606,7 +606,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public integral_constant<bool, __is_trivial(_Tp)>\n     { };\n \n-  // is_trivially_copyable (still unimplemented)\n+  // is_trivially_copyable\n+  template<typename _Tp>\n+    struct is_trivially_copyable\n+    : public integral_constant<bool, __is_trivially_copyable(_Tp)>\n+    { };\n \n   /// is_standard_layout\n   template<typename _Tp>\n@@ -1282,19 +1286,58 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public __is_nt_move_assignable_impl<_Tp>\n     { };\n \n-  /// is_trivially_constructible (still unimplemented)\n+  /// is_trivially_constructible\n+  template<typename _Tp, typename... _Args>\n+    struct is_trivially_constructible\n+    : public __and_<is_constructible<_Tp, _Args...>, integral_constant<bool,\n+\t\t\t__is_trivially_constructible(_Tp, _Args...)>>::type\n+    { };\n   \n-  /// is_trivially_default_constructible (still unimplemented)\n-\n-  /// is_trivially_copy_constructible (still unimplemented)\n+  /// is_trivially_default_constructible\n+  template<typename _Tp>\n+    struct is_trivially_default_constructible\n+    : public is_trivially_constructible<_Tp>::type\n+    { };\n \n-  /// is_trivially_move_constructible (still unimplemented)\n+  /// is_trivially_copy_constructible\n+  template<typename _Tp>\n+    struct is_trivially_copy_constructible\n+    : public __and_<is_copy_constructible<_Tp>, \n+\t\t    integral_constant<bool,\n+\t\t\t__is_trivially_constructible(_Tp, const _Tp&)>>::type\n+    { };\n+  \n+  /// is_trivially_move_constructible\n+  template<typename _Tp>\n+    struct is_trivially_move_constructible\n+    : public __and_<is_move_constructible<_Tp>, \n+\t\t    integral_constant<bool,\n+\t\t\t__is_trivially_constructible(_Tp, _Tp&&)>>::type\n+    { };\n \n-  /// is_trivially_assignable (still unimplemented)\n+  /// is_trivially_assignable\n+  template<typename _Tp, typename _Up>\n+    struct is_trivially_assignable\n+    : public __and_<is_assignable<_Tp, _Up>, \n+\t\t    integral_constant<bool,\n+\t\t\t__is_trivially_assignable(_Tp, _Up)>>::type\n+    { };\n \n-  /// is_trivially_copy_assignable (still unimplemented)\n+  /// is_trivially_copy_assignable\n+  template<typename _Tp>\n+    struct is_trivially_copy_assignable\n+    : public __and_<is_copy_assignable<_Tp>, \n+\t\t    integral_constant<bool,\n+\t\t\t__is_trivially_assignable(_Tp&, const _Tp&)>>::type\n+    { };\n \n-  /// is_trivially_move_assignable (still unimplemented)\n+  /// is_trivially_move_assignable\n+  template<typename _Tp>\n+    struct is_trivially_move_assignable\n+    : public __and_<is_move_assignable<_Tp>, \n+\t\t    integral_constant<bool,\n+\t\t\t__is_trivially_assignable(_Tp&, _Tp&&)>>::type\n+    { };\n \n   /// is_trivially_destructible\n   template<typename _Tp>"}, {"sha": "fe7305c040d63e1309cf985477b19806efcd45a9", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 2099 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 2142 }\n \n #include <utility>\n "}, {"sha": "1c5b8038481ed9b55d91441319f15aa29461803d", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_assignable/requirements/explicit_instantiation.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_assignable%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_assignable%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_assignable%2Frequirements%2Fexplicit_instantiation.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_trivially_assignable<test_type, test_type>;\n+}"}, {"sha": "517b4f034329b242715bb3bb6f6c7ca90ba1d71a", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_assignable/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_assignable%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_assignable%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_assignable%2Frequirements%2Ftypedefs.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++11\" }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_trivially_assignable<int, int> test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "27fa643d921fcda651e4323799c818989eaeefdf", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_assignable/value.cc", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_assignable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_assignable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_assignable%2Fvalue.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,135 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_tr1.h>\n+\n+struct HasTemplateCAssign\n+{\n+  HasTemplateCAssign& operator=(const HasTemplateCAssign&) = default;\n+  template <class T>\n+  HasTemplateCAssign& operator=(T&&);\n+};\n+\n+struct MoveOnly\n+{\n+  MoveOnly& operator=(MoveOnly&&) = default;\n+};\n+\n+struct MoveOnly2\n+{\n+  MoveOnly2& operator=(MoveOnly2&&) = delete;\n+};\n+\n+void test01()\n+{\n+  using std::is_trivially_assignable;\n+  using namespace __gnu_test;\n+\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tint, int>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tint&, int>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tint&, int&>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tint&, int&&>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tint&, const int&>(true), \"\");\n+\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tTType, TType>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tTType&, TType>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tTType&, TType&>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tTType&, TType&&>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tTType&, const TType&>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tPODType, PODType>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tNType&, NType&>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tSLType, SLType>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tassign::Empty, assign::Empty>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tassign::Abstract, assign::Abstract>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tassign::Ellipsis, assign::Ellipsis>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tassign::DelEllipsis, assign::DelEllipsis>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tassign::Any, assign::Any>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tassign::DelDef, assign::DelDef>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tassign::DelCopy, assign::DelCopy>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tassign::Nontrivial, assign::Nontrivial>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tassign::AnyAssign, assign::AnyAssign>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tassign::DelAnyAssign, assign::DelAnyAssign>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tassign::DelCopyAssign, assign::DelCopyAssign>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tassign::MO, assign::MO>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tassign::MO, assign::MO&&>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tassign::MO, assign::MO&>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tassign::MO, const assign::MO&>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tCopyConsOnlyType, CopyConsOnlyType>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tCopyConsOnlyType, const CopyConsOnlyType&>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tMoveConsOnlyType, MoveConsOnlyType>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tMoveConsOnlyType, MoveConsOnlyType&&>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tHasTemplateCAssign, HasTemplateCAssign>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tHasTemplateCAssign, const HasTemplateCAssign&>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tClassType, DerivedType>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tClassType, DerivedType&>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tClassType, DerivedType&&>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tClassType, const DerivedType&>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tMoveOnly, MoveOnly>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tMoveOnly, MoveOnly&&>(true), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tMoveOnly, MoveOnly&>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tMoveOnly, const MoveOnly&>(false), \"\");\n+  static_assert(test_property<is_trivially_assignable, \n+\t\tMoveOnly2, MoveOnly2>(false), \"\");\n+}"}, {"sha": "e7cff0f4d90636dc71265955a48567fd3325ba5e", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_constructible/requirements/explicit_instantiation.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_constructible%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_constructible%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_constructible%2Frequirements%2Fexplicit_instantiation.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_trivially_constructible<test_type>;\n+}"}, {"sha": "85ba7f67aa843b23e998b43f74d3aea727c9ece6", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_constructible/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_constructible%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_constructible%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_constructible%2Frequirements%2Ftypedefs.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++11\" }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_trivially_constructible<int> test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "84fae3d81a72958c8dd9d54d04527e47793bcb19", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_constructible/value.cc", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_constructible%2Fvalue.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,168 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_tr1.h>\n+\n+struct HasTemplateCCtor\n+{\n+  HasTemplateCCtor(const HasTemplateCCtor&) = default;\n+  template <class T>\n+  HasTemplateCCtor(T&&);\n+};\n+\n+struct MoveOnly\n+{\n+  MoveOnly(MoveOnly&&) = default;\n+};\n+\n+struct MoveOnly2\n+{\n+  MoveOnly2(MoveOnly2&&) = delete;\n+};\n+\n+void test01()\n+{\n+  using std::is_trivially_constructible;\n+  using namespace __gnu_test;\n+\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tint>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tint, int>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tint, int&>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tint, int&&>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tint, const int&>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tPolymorphicClass>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tPolymorphicClass, PolymorphicClass>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tPolymorphicClass, PolymorphicClass&>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tPolymorphicClass, PolymorphicClass&&>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tPolymorphicClass, const PolymorphicClass&>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tTType>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tTType, TType>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tTType, TType&>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tTType, TType&&>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tTType, const TType&>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tTType, int, int>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tPODType>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tPODType, PODType>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tPODType, PODType&>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tPODType, PODType&&>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tPODType, const PODType&>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tPODType, int, int>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tNType>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tSLType>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tLType>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tLType, int>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tconstruct::DelDef>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tconstruct::Abstract>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tconstruct::Ellipsis>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tconstruct::DelEllipsis>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tconstruct::Any>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tconstruct::DelCopy>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tconstruct::DelCopy, const construct::DelCopy&>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tconstruct::DelDtor>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tconstruct::Nontrivial>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tconstruct::UnusualCopy>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tCopyConsOnlyType>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tCopyConsOnlyType, CopyConsOnlyType>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tCopyConsOnlyType, CopyConsOnlyType&>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tCopyConsOnlyType, CopyConsOnlyType&&>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tCopyConsOnlyType, const CopyConsOnlyType&>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tMoveConsOnlyType>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tMoveConsOnlyType, MoveConsOnlyType>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tMoveConsOnlyType, MoveConsOnlyType&>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tMoveConsOnlyType, MoveConsOnlyType&&>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tMoveConsOnlyType, const MoveConsOnlyType&>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tClassType, DerivedType>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tClassType, DerivedType&>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tClassType, DerivedType&&>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tClassType, const DerivedType&>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tHasTemplateCCtor>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tHasTemplateCCtor, HasTemplateCCtor>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tHasTemplateCCtor, const HasTemplateCCtor&>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tMoveOnly>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tMoveOnly, MoveOnly>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tMoveOnly, MoveOnly&>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tMoveOnly, MoveOnly&&>(true), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tMoveOnly, const MoveOnly&>(false), \"\");\n+  static_assert(test_property<is_trivially_constructible, \n+\t\tMoveOnly2>(false), \"\");\n+\n+\n+}"}, {"sha": "3d7dce96ef6620a9d644dc40c2cb254d54f864c4", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_copy_assignable/requirements/explicit_instantiation.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copy_assignable%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copy_assignable%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copy_assignable%2Frequirements%2Fexplicit_instantiation.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_trivially_copy_assignable<test_type>;\n+}"}, {"sha": "2544dd59411eed48419b4329aab77b4479247f94", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_copy_assignable/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copy_assignable%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copy_assignable%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copy_assignable%2Frequirements%2Ftypedefs.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++11\" }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_trivially_copy_assignable<int> test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "10e6198d9e210f3db3428f8a066e83284b32bb8d", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_copy_assignable/value.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copy_assignable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copy_assignable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copy_assignable%2Fvalue.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,92 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_tr1.h>\n+\n+struct HasTemplateCAssign\n+{\n+  HasTemplateCAssign& operator=(const HasTemplateCAssign&) = default;\n+  template <class T>\n+  HasTemplateCAssign& operator=(T&&);\n+};\n+\n+struct MoveOnly\n+{\n+  MoveOnly& operator=(MoveOnly&&) = default;\n+};\n+\n+struct MoveOnly2\n+{\n+  MoveOnly2& operator=(MoveOnly2&&) = delete;\n+};\n+\n+void test01()\n+{\n+  using std::is_trivially_copy_assignable;\n+  using namespace __gnu_test;\n+\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tint>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tTType>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tPODType>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tNType>(false), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tSLType>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tassign::Empty>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tassign::Abstract>(false), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tassign::Ellipsis>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tassign::DelEllipsis>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tassign::Any>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tassign::DelDef>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tassign::DelCopy>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tassign::Nontrivial>(false), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tassign::AnyAssign>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tassign::DelAnyAssign>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tassign::DelCopyAssign>(false), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tassign::MO>(false), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tCopyConsOnlyType>(false), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tMoveConsOnlyType>(false), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tHasTemplateCAssign>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tMoveOnly>(false), \"\");\n+  static_assert(test_property<is_trivially_copy_assignable, \n+\t\tMoveOnly2>(false), \"\");\n+}"}, {"sha": "11b76afc544992a703416d895d7ffa37bc32fb32", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_copy_constructible/requirements/explicit_instantiation.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copy_constructible%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copy_constructible%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copy_constructible%2Frequirements%2Fexplicit_instantiation.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_trivially_copy_constructible<test_type>;\n+}"}, {"sha": "477488d3d2e202fc08aefebc3cae6bf5c4c8dfd9", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_copy_constructible/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copy_constructible%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copy_constructible%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copy_constructible%2Frequirements%2Ftypedefs.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++11\" }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_trivially_copy_constructible<int> test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "18221062cef5ec43bb3044c462a3d4eb6be40099", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_copy_constructible/value.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copy_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copy_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copy_constructible%2Fvalue.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,86 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_tr1.h>\n+\n+struct HasTemplateCCtor\n+{\n+  HasTemplateCCtor(const HasTemplateCCtor&) = default;\n+  template <class T>\n+  HasTemplateCCtor(T&&);\n+};\n+\n+struct MoveOnly\n+{\n+  MoveOnly(MoveOnly&&) = default;\n+};\n+\n+struct MoveOnly2\n+{\n+  MoveOnly2(MoveOnly2&&) = delete;\n+};\n+\n+void test01()\n+{\n+  using std::is_trivially_copy_constructible;\n+  using namespace __gnu_test;\n+\n+  static_assert(test_property<is_trivially_copy_constructible, \n+\t\tint>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_constructible, \n+\t\tTType>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_constructible, \n+\t\tPODType>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_constructible, \n+\t\tNType>(false), \"\");\n+  static_assert(test_property<is_trivially_copy_constructible, \n+\t\tSLType>(false), \"\");\n+  static_assert(test_property<is_trivially_copy_constructible, \n+\t\tconstruct::DelDef>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_constructible, \n+\t\tconstruct::Abstract>(false), \"\");\n+  static_assert(test_property<is_trivially_copy_constructible, \n+\t\tconstruct::Ellipsis>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_constructible, \n+\t\tconstruct::DelEllipsis>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_constructible, \n+\t\tconstruct::Any>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_constructible, \n+\t\tconstruct::DelCopy>(false), \"\");\n+  static_assert(test_property<is_trivially_copy_constructible, \n+\t\tconstruct::DelDtor>(false), \"\");\n+  static_assert(test_property<is_trivially_copy_constructible, \n+\t\tconstruct::Nontrivial>(false), \"\");\n+  static_assert(test_property<is_trivially_copy_constructible, \n+\t\tconstruct::UnusualCopy>(false), \"\");\n+  static_assert(test_property<is_trivially_copy_constructible, \n+\t\tCopyConsOnlyType>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_constructible, \n+\t\tMoveConsOnlyType>(false), \"\");\n+  static_assert(test_property<is_trivially_copy_constructible, \n+\t\tHasTemplateCCtor>(true), \"\");\n+  static_assert(test_property<is_trivially_copy_constructible, \n+\t\tMoveOnly>(false), \"\");\n+  static_assert(test_property<is_trivially_copy_constructible, \n+\t\tMoveOnly2>(false), \"\");\n+}"}, {"sha": "1e3e52b437cfc4c78d799e7fdddf653420eb575d", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_copyable/requirements/explicit_instantiation.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copyable%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copyable%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copyable%2Frequirements%2Fexplicit_instantiation.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_trivially_copyable<test_type>;\n+}"}, {"sha": "01f3a0412d1506c7c8d8a62db881964754f8c859", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_copyable/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copyable%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copyable%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copyable%2Frequirements%2Ftypedefs.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++11\" }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_trivially_copyable<int> test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "c21a5c467726882e2ffcc651d07b28b535942450", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_copyable/value.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copyable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copyable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_copyable%2Fvalue.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,86 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_tr1.h>\n+\n+struct HasTemplateCCtor\n+{\n+  HasTemplateCCtor(const HasTemplateCCtor&) = default;\n+  template <class T>\n+  HasTemplateCCtor(T&&);\n+};\n+\n+struct MoveOnly\n+{\n+  MoveOnly(MoveOnly&&) = default;\n+};\n+\n+struct MoveOnly2\n+{\n+  MoveOnly2(MoveOnly2&&) = delete;\n+};\n+\n+void test01()\n+{\n+  using std::is_trivially_copyable;\n+  using namespace __gnu_test;\n+\n+  static_assert(test_property<is_trivially_copyable, \n+\t\tint>(true), \"\");\n+  static_assert(test_property<is_trivially_copyable, \n+\t\tTType>(true), \"\");\n+  static_assert(test_property<is_trivially_copyable, \n+\t\tPODType>(true), \"\");\n+  static_assert(test_property<is_trivially_copyable, \n+\t\tNType>(false), \"\");\n+  static_assert(test_property<is_trivially_copyable, \n+\t\tSLType>(false), \"\");\n+  static_assert(test_property<is_trivially_copyable, \n+\t\tconstruct::DelDef>(true), \"\");\n+  static_assert(test_property<is_trivially_copyable, \n+\t\tconstruct::Abstract>(false), \"\");\n+  static_assert(test_property<is_trivially_copyable, \n+\t\tconstruct::Ellipsis>(true), \"\");\n+  static_assert(test_property<is_trivially_copyable, \n+\t\tconstruct::DelEllipsis>(true), \"\");\n+  static_assert(test_property<is_trivially_copyable, \n+\t\tconstruct::Any>(true), \"\");\n+  static_assert(test_property<is_trivially_copyable, \n+\t\tconstruct::DelCopy>(true), \"\");\n+  static_assert(test_property<is_trivially_copyable, \n+\t\tconstruct::DelDtor>(true), \"\");\n+  static_assert(test_property<is_trivially_copyable, \n+\t\tconstruct::Nontrivial>(false), \"\");\n+  static_assert(test_property<is_trivially_copyable, \n+\t\tconstruct::UnusualCopy>(false), \"\");\n+  static_assert(test_property<is_trivially_copyable, \n+\t\tCopyConsOnlyType>(true), \"\");\n+  static_assert(test_property<is_trivially_copyable, \n+\t\tMoveConsOnlyType>(true), \"\");\n+  static_assert(test_property<is_trivially_copyable, \n+\t\tHasTemplateCCtor>(true), \"\");\n+  static_assert(test_property<is_trivially_copyable, \n+\t\tMoveOnly>(true), \"\");\n+  static_assert(test_property<is_trivially_copyable, \n+\t\tMoveOnly2>(true), \"\");\n+}"}, {"sha": "fcfeef3efc8b334f3e83288e85b50c54262e2f22", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_default_constructible/requirements/explicit_instantiation.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_default_constructible%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_default_constructible%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_default_constructible%2Frequirements%2Fexplicit_instantiation.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_trivially_default_constructible<test_type>;\n+}"}, {"sha": "cc005c23c552a2d78957bcc660a233f5c6585efe", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_default_constructible/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_default_constructible%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_default_constructible%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_default_constructible%2Frequirements%2Ftypedefs.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++11\" }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_trivially_default_constructible<int> test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "e785363b94f7cbc32a1f538c7891c131ab56fe10", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_default_constructible/value.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_default_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_default_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_default_constructible%2Fvalue.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,66 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_tr1.h>\n+\n+struct HasTemplateCtor\n+{\n+  HasTemplateCtor() = default;\n+  template <class T>\n+  HasTemplateCtor();\n+};\n+\n+void test01()\n+{\n+  using std::is_trivially_default_constructible;\n+  using namespace __gnu_test;\n+\n+  static_assert(test_category<is_trivially_default_constructible, \n+\t\tint>(true), \"\");\n+  static_assert(test_category<is_trivially_default_constructible, \n+\t\tTType>(true), \"\");\n+  static_assert(test_category<is_trivially_default_constructible, \n+\t\tPODType>(true), \"\");\n+  static_assert(test_category<is_trivially_default_constructible, \n+\t\tNType>(false), \"\");\n+  static_assert(test_category<is_trivially_default_constructible, \n+\t\tSLType>(false), \"\");\n+  static_assert(test_category<is_trivially_default_constructible, \n+\t\tconstruct::DelDef>(false), \"\");\n+  static_assert(test_category<is_trivially_default_constructible, \n+\t\tconstruct::Abstract>(false), \"\");\n+  static_assert(test_category<is_trivially_default_constructible, \n+\t\tconstruct::Ellipsis>(false), \"\");\n+  static_assert(test_category<is_trivially_default_constructible, \n+\t\tconstruct::DelEllipsis>(false), \"\");\n+  static_assert(test_category<is_trivially_default_constructible, \n+\t\tconstruct::Any>(false), \"\");\n+  static_assert(test_category<is_trivially_default_constructible, \n+\t\tconstruct::DelCopy>(false), \"\");\n+  static_assert(test_category<is_trivially_default_constructible, \n+\t\tconstruct::DelDtor>(false), \"\");\n+  static_assert(test_category<is_trivially_default_constructible, \n+\t\tconstruct::Nontrivial>(false), \"\");\n+  static_assert(test_category<is_trivially_default_constructible, \n+\t\tHasTemplateCtor>(true), \"\");\n+}"}, {"sha": "c2b6e83930230f7c30873db00aef52d763f33d4a", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_move_assignable/requirements/explicit_instantiation.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_move_assignable%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_move_assignable%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_move_assignable%2Frequirements%2Fexplicit_instantiation.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_trivially_move_assignable<test_type>;\n+}"}, {"sha": "5943b86fa9d6dabbb177df9f161a3f1e256d3281", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_move_assignable/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_move_assignable%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_move_assignable%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_move_assignable%2Frequirements%2Ftypedefs.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++11\" }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_trivially_move_assignable<int> test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "f96a1678bd7c1f985870aa5feed16298cdbcb1d6", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_move_assignable/value.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_move_assignable%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_move_assignable%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_move_assignable%2Fvalue.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,92 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_tr1.h>\n+\n+struct HasTemplateCAssign\n+{\n+  HasTemplateCAssign& operator=(const HasTemplateCAssign&) = default;\n+  template <class T>\n+  HasTemplateCAssign& operator=(T&&);\n+};\n+\n+struct MoveOnly\n+{\n+  MoveOnly& operator=(MoveOnly&&) = default;\n+};\n+\n+struct MoveOnly2\n+{\n+  MoveOnly2& operator=(MoveOnly2&&) = delete;\n+};\n+\n+void test01()\n+{\n+  using std::is_trivially_move_assignable;\n+  using namespace __gnu_test;\n+\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tint>(true), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tTType>(true), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tPODType>(true), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tNType>(false), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tSLType>(true), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tassign::Empty>(true), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tassign::Abstract>(false), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tassign::Ellipsis>(true), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tassign::DelEllipsis>(true), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tassign::Any>(true), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tassign::DelDef>(true), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tassign::DelCopy>(true), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tassign::Nontrivial>(false), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tassign::AnyAssign>(true), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tassign::DelAnyAssign>(true), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tassign::DelCopyAssign>(true), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tassign::MO>(true), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tCopyConsOnlyType>(false), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tMoveConsOnlyType>(false), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tHasTemplateCAssign>(false), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tMoveOnly>(true), \"\");\n+  static_assert(test_property<is_trivially_move_assignable, \n+\t\tMoveOnly2>(false), \"\");\n+}"}, {"sha": "5d2b1354d69a2966b7ee836879564b7071e7d49d", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_move_constructible/requirements/explicit_instantiation.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_move_constructible%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_move_constructible%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_move_constructible%2Frequirements%2Fexplicit_instantiation.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,31 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_trivially_move_constructible<test_type>;\n+}"}, {"sha": "f9baae1b8e65a852fe9fd093c057c8f0e53532b6", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_move_constructible/requirements/typedefs.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_move_constructible%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_move_constructible%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_move_constructible%2Frequirements%2Ftypedefs.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,37 @@\n+// { dg-options \"-std=gnu++11\" }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_trivially_move_constructible<int> test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "da6493eb1c91ac1fa43c293caed71ae5bdff492a", "filename": "libstdc++-v3/testsuite/20_util/is_trivially_move_constructible/value.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_move_constructible%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_move_constructible%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivially_move_constructible%2Fvalue.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -0,0 +1,86 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+//\n+// 2014-10-09  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+//\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_tr1.h>\n+\n+struct HasTemplateCCtor\n+{\n+  HasTemplateCCtor(const HasTemplateCCtor&) = default;\n+  template <class T>\n+  HasTemplateCCtor(T&&);\n+};\n+\n+struct MoveOnly\n+{\n+  MoveOnly(MoveOnly&&) = default;\n+};\n+\n+struct MoveOnly2\n+{\n+  MoveOnly2(MoveOnly2&&) = delete;\n+};\n+\n+void test01()\n+{\n+  using std::is_trivially_move_constructible;\n+  using namespace __gnu_test;\n+\n+  static_assert(test_property<is_trivially_move_constructible, \n+\t\tint>(true), \"\");\n+  static_assert(test_property<is_trivially_move_constructible, \n+\t\tTType>(true), \"\");\n+  static_assert(test_property<is_trivially_move_constructible, \n+\t\tPODType>(true), \"\");\n+  static_assert(test_property<is_trivially_move_constructible, \n+\t\tNType>(false), \"\");\n+  static_assert(test_property<is_trivially_move_constructible, \n+\t\tSLType>(false), \"\");\n+  static_assert(test_property<is_trivially_move_constructible, \n+\t\tconstruct::DelDef>(true), \"\");\n+  static_assert(test_property<is_trivially_move_constructible, \n+\t\tconstruct::Abstract>(false), \"\");\n+  static_assert(test_property<is_trivially_move_constructible, \n+\t\tconstruct::Ellipsis>(true), \"\");\n+  static_assert(test_property<is_trivially_move_constructible, \n+\t\tconstruct::DelEllipsis>(true), \"\");\n+  static_assert(test_property<is_trivially_move_constructible, \n+\t\tconstruct::Any>(true), \"\");\n+  static_assert(test_property<is_trivially_move_constructible, \n+\t\tconstruct::DelCopy>(false), \"\");\n+  static_assert(test_property<is_trivially_move_constructible, \n+\t\tconstruct::DelDtor>(false), \"\");\n+  static_assert(test_property<is_trivially_move_constructible, \n+\t\tconstruct::Nontrivial>(false), \"\");\n+  static_assert(test_property<is_trivially_move_constructible, \n+\t\tconstruct::UnusualCopy>(false), \"\");\n+  static_assert(test_property<is_trivially_move_constructible, \n+\t\tCopyConsOnlyType>(false), \"\");\n+  static_assert(test_property<is_trivially_move_constructible, \n+\t\tMoveConsOnlyType>(true), \"\");\n+  static_assert(test_property<is_trivially_move_constructible, \n+\t\tHasTemplateCCtor>(false), \"\");\n+  static_assert(test_property<is_trivially_move_constructible, \n+\t\tMoveOnly>(true), \"\");\n+  static_assert(test_property<is_trivially_move_constructible, \n+\t\tMoveOnly2>(false), \"\");\n+}"}, {"sha": "28ee98a3e1a060af26d6c3e6d6e0a477e9f5f7b3", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1764 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1728 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1807 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1771 }"}, {"sha": "3fc1874027fdeb185721e1b3a5d36ec507d4a15d", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5e523b76d1bdaf0df15f6bfdee602a3e153be68/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1667 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1631 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1710 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1674 }"}]}