{"sha": "821bde61e0dbaffc2e802c877e9bc91c99a0ae49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIxYmRlNjFlMGRiYWZmYzJlODAyYzg3N2U5YmM5MWM5OWEwYWU0OQ==", "commit": {"author": {"name": "Jan-Benedict Glaw", "email": "jbglaw@lug-owl.de", "date": "2005-04-02T02:29:49Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2005-04-02T02:29:49Z"}, "message": "* gcc/config/vax/vax.md: Spellcheck, fix whitespace.\n\nFrom-SVN: r97430", "tree": {"sha": "14b2ef7ef5de39a01a490d5bb7fbd0032e789d1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14b2ef7ef5de39a01a490d5bb7fbd0032e789d1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/821bde61e0dbaffc2e802c877e9bc91c99a0ae49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/821bde61e0dbaffc2e802c877e9bc91c99a0ae49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/821bde61e0dbaffc2e802c877e9bc91c99a0ae49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/821bde61e0dbaffc2e802c877e9bc91c99a0ae49/comments", "author": {"login": "jbglaw", "id": 7965297, "node_id": "MDQ6VXNlcjc5NjUyOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/7965297?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbglaw", "html_url": "https://github.com/jbglaw", "followers_url": "https://api.github.com/users/jbglaw/followers", "following_url": "https://api.github.com/users/jbglaw/following{/other_user}", "gists_url": "https://api.github.com/users/jbglaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbglaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbglaw/subscriptions", "organizations_url": "https://api.github.com/users/jbglaw/orgs", "repos_url": "https://api.github.com/users/jbglaw/repos", "events_url": "https://api.github.com/users/jbglaw/events{/privacy}", "received_events_url": "https://api.github.com/users/jbglaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b6121641fcd1aad93643d1f56440217ee9dc1c1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6121641fcd1aad93643d1f56440217ee9dc1c1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6121641fcd1aad93643d1f56440217ee9dc1c1c"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "948cda08ccb118a828f0fea2288111940e3c78e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821bde61e0dbaffc2e802c877e9bc91c99a0ae49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821bde61e0dbaffc2e802c877e9bc91c99a0ae49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=821bde61e0dbaffc2e802c877e9bc91c99a0ae49", "patch": "@@ -1,3 +1,7 @@\n+2005-04-01  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n+\n+\t* gcc/config/vax/vax.md: Spellcheck, fix whitespace.\n+\n 2005-04-01  Ian Lance Taylor  <ian@airs.com>\n \n \t* gcc.c: Don't include <sys/resource.h> or declare getrusage."}, {"sha": "78aa140a0e5d89439706b1d38ddc821d7a186195", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/821bde61e0dbaffc2e802c877e9bc91c99a0ae49/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/821bde61e0dbaffc2e802c877e9bc91c99a0ae49/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=821bde61e0dbaffc2e802c877e9bc91c99a0ae49", "patch": "@@ -23,7 +23,7 @@\n ;;- Instruction patterns.  When multiple patterns apply,\n ;;- the first one in the file is chosen.\n ;;-\n-;;- See file \"rtl.def\" for documentation on define_insn, match_*, et. al.\n+;;- See file \"rtl.def\" for documentation on define_insn, match_*, et al.\n ;;-\n ;;- cpp macro #define NOTICE_UPDATE_CC in file tm.h handles condition code\n ;;- updates for most instructions.\n@@ -46,10 +46,9 @@\n (define_mode_macro VAXfp [SF DF])\n (define_mode_attr  fsfx [(SF \"f\") (DF \"%#\")])\n \n-;; Some ouput patterns want integer immediates with a prefix...\n+;; Some output patterns want integer immediates with a prefix...\n (define_mode_attr  iprefx [(QI \"B\") (HI \"H\") (SI \"N\")])\n \n-;; We don't want to allow a constant operand for test insns because\n ;; We don't want to allow a constant operand for test insns because\n ;; (set (cc0) (const_int foo)) has no mode information.  Such insns will\n ;; be folded while optimizing anyway.\n@@ -473,7 +472,7 @@\n \t\t  (sign_extend:DI\n \t\t   (match_operand:SI 2 \"nonimmediate_operand\" \"g\")))\n \t (match_operand:DI 3 \"immediate_operand\" \"F\")))]\n-  \"GET_CODE (operands[3]) == CONST_DOUBLE \n+  \"GET_CODE (operands[3]) == CONST_DOUBLE\n     && CONST_DOUBLE_HIGH (operands[3]) == (CONST_DOUBLE_LOW (operands[3]) >> 31)\"\n   \"*\n {\n@@ -608,7 +607,7 @@\n \f\n ;; Arithmetic right shift on the VAX works by negating the shift count,\n ;; then emitting a right shift with the shift count negated.  This means\n-;; that all actual shift counts in the RTL will be positive.  This \n+;; that all actual shift counts in the RTL will be positive.  This\n ;; prevents converting shifts to ZERO_EXTRACTs with negative positions,\n ;; which isn't valid.\n (define_expand \"ashrsi3\"\n@@ -1416,7 +1415,7 @@\n   \"\"\n   \"casel %0,$0,%1\")\n \f\n-;;- load or push effective address \n+;;- load or push effective address\n ;; These come after the move and add/sub patterns\n ;; because we don't want pushl $1 turned into pushad 1.\n ;; or addl3 r1,r2,r3 turned into movab 0(r1)[r2],r3.\n@@ -1499,7 +1498,7 @@\n ;; These used to be peepholes, but it is more straightforward to do them\n ;; as single insns.  However, we must force the output to be a register\n ;; if it is not an offsettable address so that we know that we can assign\n-;; to it twice. \n+;; to it twice.\n \n ;; If we had a good way of evaluating the relative costs, these could be\n ;; machine-independent."}]}