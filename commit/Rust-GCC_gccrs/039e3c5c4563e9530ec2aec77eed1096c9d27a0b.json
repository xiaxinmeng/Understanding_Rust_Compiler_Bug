{"sha": "039e3c5c4563e9530ec2aec77eed1096c9d27a0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM5ZTNjNWM0NTYzZTk1MzBlYzJhZWM3N2VlZDEwOTZjOWQyN2EwYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-03-03T18:07:23Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-03-03T18:07:23Z"}, "message": "locale_facets.tcc (money_put<>::_M_insert): Deal properly with empty __digits and negative frac_digits, clean-up a bit.\n\n2004-03-03  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (money_put<>::_M_insert):\n\tDeal properly with empty __digits and negative frac_digits,\n\tclean-up a bit.\n\nFrom-SVN: r78844", "tree": {"sha": "6de9aab9683e3e2582ec7196b45a532732d95692", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6de9aab9683e3e2582ec7196b45a532732d95692"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/039e3c5c4563e9530ec2aec77eed1096c9d27a0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/039e3c5c4563e9530ec2aec77eed1096c9d27a0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/039e3c5c4563e9530ec2aec77eed1096c9d27a0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/039e3c5c4563e9530ec2aec77eed1096c9d27a0b/comments", "author": null, "committer": null, "parents": [{"sha": "f9957958fe143fd987e0c3e339d2586dc7cc06cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9957958fe143fd987e0c3e339d2586dc7cc06cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9957958fe143fd987e0c3e339d2586dc7cc06cd"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "33b3631d53318284eb7c364fbea96c80e385e0ef", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039e3c5c4563e9530ec2aec77eed1096c9d27a0b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039e3c5c4563e9530ec2aec77eed1096c9d27a0b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=039e3c5c4563e9530ec2aec77eed1096c9d27a0b", "patch": "@@ -1,3 +1,9 @@\n+2004-03-03  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (money_put<>::_M_insert):\n+\tDeal properly with empty __digits and negative frac_digits,\n+\tclean-up a bit.\n+\n 2004-03-03  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \t* docs/html/documentation.html: Regenerate."}, {"sha": "58261437fd106c8b78bf52be01fbcfd3476cea71", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039e3c5c4563e9530ec2aec77eed1096c9d27a0b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039e3c5c4563e9530ec2aec77eed1096c9d27a0b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=039e3c5c4563e9530ec2aec77eed1096c9d27a0b", "patch": "@@ -1441,7 +1441,6 @@ namespace std\n \t// Determine if negative or positive formats are to be used, and\n \t// discard leading negative_sign if it is present.\n \tconst char_type* __beg = __digits.data();\n-\tconst char_type* __end = __beg + __digits.size();\n \n \tmoney_base::pattern __p;\n \tconst char_type* __sign;\n@@ -1452,7 +1451,7 @@ namespace std\n \t    __sign = __lc->_M_positive_sign;\n \t    __sign_size = __lc->_M_positive_sign_size;\n \t  }\n-\telse\n+\telse if (__digits.size())\n \t  {\n \t    __p = __lc->_M_neg_format;\n \t    __sign = __lc->_M_negative_sign;\n@@ -1461,21 +1460,23 @@ namespace std\n \t  }\n        \n \t// Look for valid numbers in the ctype facet within input digits.\n-\t__end = __ctype.scan_not(ctype_base::digit, __beg, __end);\n-\tif (__beg != __end)\n+\tsize_type __len = __ctype.scan_not(ctype_base::digit, __beg,\n+\t\t\t\t\t   __beg + __digits.size()) - __beg;\n+\tif (__len)\n \t  {\n \t    // Assume valid input, and attempt to format.\n \t    // Break down input numbers into base components, as follows:\n \t    //   final_value = grouped units + (decimal point) + (digits)\n \t    string_type __value;\n-\t    size_type __len = __end - __beg;\n \t    __value.reserve(2 * __len);\n \n \t    // Add thousands separators to non-decimal digits, per\n \t    // grouping rules.\n-\t    const int __paddec = __lc->_M_frac_digits - __len;\t    \n-\t    if (__paddec < 0)\n+\t    int __paddec = __len - __lc->_M_frac_digits;\n+\t    if (__paddec > 0)\n   \t      {\n+\t\tif (__lc->_M_frac_digits < 0)\n+\t\t  __paddec = __len;\n   \t\tif (__lc->_M_grouping_size)\n   \t\t  {\n \t\t    _CharT* __ws =\n@@ -1485,24 +1486,23 @@ namespace std\n \t\t      std::__add_grouping(__ws, __lc->_M_thousands_sep,\n \t\t\t\t\t  __lc->_M_grouping,\n \t\t\t\t\t  __lc->_M_grouping_size,\n-\t\t\t\t\t  __beg, __end - __lc->_M_frac_digits);\n+\t\t\t\t\t  __beg, __beg + __paddec);\n \t\t    __value.assign(__ws, __ws_end - __ws);\n   \t\t  }\n   \t\telse\n-\t\t  __value.assign(__beg, -__paddec);\n+\t\t  __value.assign(__beg, __paddec);\n \t      }\n \n \t    // Deal with decimal point, decimal digits.\n \t    if (__lc->_M_frac_digits > 0)\n \t      {\n \t\t__value += __lc->_M_decimal_point;\n-\t\tif (__paddec <= 0)\n-\t\t  __value.append(__end - __lc->_M_frac_digits,\n-\t\t\t\t __lc->_M_frac_digits);\n+\t\tif (__paddec >= 0)\n+\t\t  __value.append(__beg + __paddec, __lc->_M_frac_digits);\n \t\telse\n \t\t  {\n \t\t    // Have to pad zeros in the decimal position.\n-\t\t    __value.append(__paddec, __lit[_S_zero]);\n+\t\t    __value.append(-__paddec, __lit[_S_zero]);\n \t\t    __value.append(__beg, __len);\n \t\t  }\n   \t      }"}]}