{"sha": "4cf4d6a32328de2725c0ca4ca7a991b97ab5e46f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNmNGQ2YTMyMzI4ZGUyNzI1YzBjYTRjYTdhOTkxYjk3YWI1ZTQ2Zg==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2006-02-19T18:26:00Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2006-02-19T18:26:00Z"}, "message": "invoke.texi: Document -fipa-pta.\n\n2006-02-19  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* doc/invoke.texi: Document -fipa-pta.\n\t* common.opt: Add ipa-pta option.\n\t* tree-ssa-structalias.c (DONT_PROPAGATE_WITH_ANYTHING): Removed.\n\t(do_sd_constraint): Enable DONT_PROPAGATE_WITH_ANYTHING code.\n\t(do_ds_constraint): Ditto.\n\t(get_constraint_for): Only add to referenced_vars if\n\treferenced_vars exists.\n\t(insert_into_field_list): Rewrite to do this unsorted.\n\t(insert_into_field_list_sorted): Rename old insert_into_field_list\n\tto this.\n\t(create_function_info_for): Use insert_into_field_list_sorted.\n\t(create_variable_info_for): Rewrite so it uses unsorted version,\n\tsince the field list is sorted.\n\t(intra_create_variable_infos): Only add to referenced_vars if\n\treferenced_vars exists.\n\t(ipa_pta_execute): Init heapvars, and delete when done.\n\t* passes.c (init_optimization_passes): Add call to pass_ipa_pta.\n\nFrom-SVN: r111273", "tree": {"sha": "05d78ede2903b096a832aaebd005c6044c193a98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05d78ede2903b096a832aaebd005c6044c193a98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cf4d6a32328de2725c0ca4ca7a991b97ab5e46f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cf4d6a32328de2725c0ca4ca7a991b97ab5e46f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cf4d6a32328de2725c0ca4ca7a991b97ab5e46f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cf4d6a32328de2725c0ca4ca7a991b97ab5e46f/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "353f74e8ee82e2a87bb41bc7cc8c5451aedec06b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/353f74e8ee82e2a87bb41bc7cc8c5451aedec06b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/353f74e8ee82e2a87bb41bc7cc8c5451aedec06b"}], "stats": {"total": 82, "additions": 62, "deletions": 20}, "files": [{"sha": "974f56d147c5a7bf007b0f1d3de5e84a05cf0866", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf4d6a32328de2725c0ca4ca7a991b97ab5e46f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf4d6a32328de2725c0ca4ca7a991b97ab5e46f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4cf4d6a32328de2725c0ca4ca7a991b97ab5e46f", "patch": "@@ -1,3 +1,23 @@\n+2006-02-19  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* doc/invoke.texi: Document -fipa-pta.\n+\t* common.opt: Add ipa-pta option.\n+\t* tree-ssa-structalias.c (DONT_PROPAGATE_WITH_ANYTHING): Removed.\n+\t(do_sd_constraint): Enable DONT_PROPAGATE_WITH_ANYTHING code.\n+\t(do_ds_constraint): Ditto.\n+\t(get_constraint_for): Only add to referenced_vars if\n+\treferenced_vars exists.\n+\t(insert_into_field_list): Rewrite to do this unsorted.\n+\t(insert_into_field_list_sorted): Rename old insert_into_field_list\n+\tto this.\n+\t(create_function_info_for): Use insert_into_field_list_sorted.\n+\t(create_variable_info_for): Rewrite so it uses unsorted version,\n+\tsince the field list is sorted.\n+\t(intra_create_variable_infos): Only add to referenced_vars if\n+\treferenced_vars exists.\n+\t(ipa_pta_execute): Init heapvars, and delete when done.\n+\t* passes.c (init_optimization_passes): Add call to pass_ipa_pta.\n+\n 2006-02-19  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* doc/install.texi: Add missing `@samp'."}, {"sha": "448c6bccc7ce4d8964a064620f46e671e34b770d", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf4d6a32328de2725c0ca4ca7a991b97ab5e46f/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf4d6a32328de2725c0ca4ca7a991b97ab5e46f/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=4cf4d6a32328de2725c0ca4ca7a991b97ab5e46f", "patch": "@@ -523,6 +523,10 @@ fipa-pure-const\n Common Report Var(flag_ipa_pure_const) Init(0)\n Discover pure and const functions\n \n+fipa-pta\n+Common Report Var(flag_ipa_pta) Init(0)\n+Perform interprocedural points-to analysis\n+\n fipa-reference\n Common Report Var(flag_ipa_reference) Init(0)\n Discover readonly and non addressable static variables"}, {"sha": "740ac9b8f4399e3844decf072457639847d78998", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf4d6a32328de2725c0ca4ca7a991b97ab5e46f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf4d6a32328de2725c0ca4ca7a991b97ab5e46f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=4cf4d6a32328de2725c0ca4ca7a991b97ab5e46f", "patch": "@@ -343,7 +343,7 @@ Objective-C and Objective-C++ Dialects}.\n -ftree-loop-linear -ftree-loop-im -ftree-loop-ivcanon -fivopts @gol\n -ftree-dominator-opts -ftree-dse -ftree-copyrename -ftree-sink @gol\n -ftree-ch -ftree-sra -ftree-ter -ftree-lrs -ftree-fre -ftree-vectorize @gol\n--ftree-vect-loop-version -ftree-salias -fweb @gol\n+-ftree-vect-loop-version -ftree-salias -fipa-pta -fweb @gol\n -ftree-copy-prop -ftree-store-ccp -ftree-store-copy-prop -fwhole-program @gol\n --param @var{name}=@var{value}\n -O  -O0  -O1  -O2  -O3  -Os}\n@@ -5033,6 +5033,9 @@ default at @option{-O2} and higher.\n Perform structural alias analysis on trees.  This flag\n is enabled by default at @option{-O} and higher.\n \n+@item -fipa-pta\n+Perform interprocedural pointer analysis.\n+\n @item -ftree-sink\n Perform forward store motion  on trees.  This flag is\n enabled by default at @option{-O} and higher."}, {"sha": "e088be11e896649f77e53f5ccb63b4a0f8c04872", "filename": "gcc/passes.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf4d6a32328de2725c0ca4ca7a991b97ab5e46f/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf4d6a32328de2725c0ca4ca7a991b97ab5e46f/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=4cf4d6a32328de2725c0ca4ca7a991b97ab5e46f", "patch": "@@ -447,6 +447,7 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_ipa_reference);\n   NEXT_PASS (pass_ipa_pure_const); \n   NEXT_PASS (pass_ipa_type_escape);\n+  NEXT_PASS (pass_ipa_pta);\n   *p = NULL;\n \n   /* All passes needed to lower the function into shape optimizers can"}, {"sha": "e7a989288af66b996158c38881d074e1d60e1340", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 33, "deletions": 19, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cf4d6a32328de2725c0ca4ca7a991b97ab5e46f/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cf4d6a32328de2725c0ca4ca7a991b97ab5e46f/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=4cf4d6a32328de2725c0ca4ca7a991b97ab5e46f", "patch": "@@ -1535,8 +1535,6 @@ type_safe (unsigned int n, unsigned HOST_WIDE_INT *offset)\n   return (get_varinfo (n)->offset + *offset) < get_varinfo (n)->fullsize;\n }\n \n-#define DONT_PROPAGATE_WITH_ANYTHING 0\n-\n /* Process a constraint C that represents *x = &y.  */\n \n static void\n@@ -1593,15 +1591,13 @@ do_sd_constraint (constraint_graph_t graph, constraint_t c,\n   unsigned int j;\n   bitmap_iterator bi;\n \n-#if DONT_PROPAGATE_WITH_ANYTHING \n  if (bitmap_bit_p (delta, anything_id))\n    {\n      flag = !bitmap_bit_p (sol, anything_id);\n      if (flag)\n        bitmap_set_bit (sol, anything_id);\n      goto done;\n    }\n-#endif\n   /* For each variable j in delta (Sol(y)), add    \n      an edge in the graph from j to x, and union Sol(j) into Sol(x).  */\n   EXECUTE_IF_SET_IN_BITMAP (delta, 0, j, bi)\n@@ -1629,9 +1625,8 @@ do_sd_constraint (constraint_graph_t graph, constraint_t c,\n \tfprintf (dump_file, \"Untypesafe usage in do_sd_constraint\\n\");\n       \n     }\n-#if DONT_PROPAGATE_WITH_ANYTHING\n+\n done:\n-#endif\n   /* If the LHS solution changed, mark the var as changed.  */\n   if (flag)\n     {\n@@ -1655,7 +1650,6 @@ do_ds_constraint (constraint_graph_t graph, constraint_t c, bitmap delta)\n   unsigned int j;\n   bitmap_iterator bi;\n \n-#if DONT_PROPAGATE_WITH_ANYTHING \n  if (bitmap_bit_p (sol, anything_id))\n    {\n      EXECUTE_IF_SET_IN_BITMAP (delta, 0, j, bi)\n@@ -1683,7 +1677,6 @@ do_ds_constraint (constraint_graph_t graph, constraint_t c, bitmap delta)\n        }\n      return;\n    }\n-#endif\n \n   /* For each member j of delta (Sol(x)), add an edge from y to j and\n      union Sol(y) into Sol(j) */\n@@ -2538,7 +2531,8 @@ get_constraint_for (tree t, VEC (ce_s, heap) **results)\n \t\t  {\t\t    \n \t\t    heapvar = create_tmp_var_raw (ptr_type_node, \"HEAP\");\n \t\t    DECL_EXTERNAL (heapvar) = 1;\n-\t\t    add_referenced_tmp_var (heapvar);\n+\t\t    if (referenced_vars)\n+\t\t      add_referenced_tmp_var (heapvar);\n \t\t    heapvar_insert (t, heapvar);\n \t\t  }\n \n@@ -3531,11 +3525,24 @@ first_vi_for_offset (varinfo_t start, unsigned HOST_WIDE_INT offset)\n }\n \n \n+/* Insert the varinfo FIELD into the field list for BASE, at the front\n+   of the list.  */\n+\n+static void\n+insert_into_field_list (varinfo_t base, varinfo_t field)\n+{\n+  varinfo_t prev = base;\n+  varinfo_t curr = base->next;\n+  \n+  field->next = curr;\n+  prev->next = field;\n+}\n+\n /* Insert the varinfo FIELD into the field list for BASE, ordered by\n    offset.  */\n \n static void\n-insert_into_field_list (varinfo_t base, varinfo_t field)\n+insert_into_field_list_sorted (varinfo_t base, varinfo_t field)\n {\n   varinfo_t prev = base;\n   varinfo_t curr = base->next;\n@@ -3793,6 +3800,7 @@ create_function_info_for (tree decl, const char *name)\n   \n   arg = DECL_ARGUMENTS (decl);\n \n+\n   /* Set up variables for each argument.  */\n   for (i = 1; i < vi->fullsize; i++)\n     {      \n@@ -3817,15 +3825,15 @@ create_function_info_for (tree decl, const char *name)\n       argvi->size = 1;\n       argvi->fullsize = vi->fullsize;\n       argvi->has_union = false;\n-      insert_into_field_list (vi, argvi);\n+      insert_into_field_list_sorted (vi, argvi);\n       stats.total_vars ++;\n       if (arg)\n \t{\n \t  insert_id_for_tree (arg, newindex);\n \t  arg = TREE_CHAIN (arg);\n \t}\n     }\n-  \n+\n   /* Create a variable for the return var.  */\n   if (DECL_RESULT (decl) != NULL\n       || !VOID_TYPE_P (TREE_TYPE (TREE_TYPE (decl))))\n@@ -3838,7 +3846,6 @@ create_function_info_for (tree decl, const char *name)\n \n       vi->fullsize ++;\n \n-\n       if (DECL_RESULT (decl))\n \tresultdecl = DECL_RESULT (decl);\n       \n@@ -3854,7 +3861,7 @@ create_function_info_for (tree decl, const char *name)\n       resultvi->size = 1;\n       resultvi->fullsize = vi->fullsize;\n       resultvi->has_union = false;\n-      insert_into_field_list (vi, resultvi);\n+      insert_into_field_list_sorted (vi, resultvi);\n       stats.total_vars ++;\n       if (DECL_RESULT (decl))\n \tinsert_id_for_tree (DECL_RESULT (decl), newindex);\n@@ -3991,7 +3998,9 @@ create_variable_info_for (tree decl, const char *name)\n       \n       vi->size = TREE_INT_CST_LOW (fo->size);\n       vi->offset = fo->offset;\n-      for (i = 1; VEC_iterate (fieldoff_s, fieldstack, i, fo); i++)\n+      for (i = VEC_length (fieldoff_s, fieldstack) - 1; \n+\t   i >= 1 && VEC_iterate (fieldoff_s, fieldstack, i, fo); \n+\t   i--)\n \t{\n \t  varinfo_t newvi;\n \t  const char *newname;\n@@ -4077,9 +4086,11 @@ intra_create_variable_infos (void)\n \t  unsigned int id;\n \t  if (heapvar == NULL_TREE)\n \t    {\n-\t      heapvar = create_tmp_var_raw (TREE_TYPE (TREE_TYPE (t)), \"PARM_NOALIAS\");\n+\t      heapvar = create_tmp_var_raw (TREE_TYPE (TREE_TYPE (t)), \n+\t\t\t\t\t    \"PARM_NOALIAS\");\n \t      DECL_EXTERNAL (heapvar) = 1;\n-\t      add_referenced_tmp_var (heapvar);\n+\t      if (referenced_vars)\n+\t\tadd_referenced_tmp_var (heapvar);\n \t      heapvar_insert (t, heapvar);\n \t    }\n \t  id = create_variable_info_for (heapvar,\n@@ -4560,6 +4571,7 @@ static bool\n gate_ipa_pta (void)\n {\n   return (flag_unit_at_a_time != 0\n+          && flag_ipa_pta\n \t  /* Don't bother doing anything if the program has errors.  */\n \t  && !(errorcount || sorrycount));\n }\n@@ -4570,9 +4582,9 @@ ipa_pta_execute (void)\n {\n   struct cgraph_node *node;\n   in_ipa_mode = 1;\n-\n+  init_alias_heapvars ();\n   init_alias_vars ();\n-  \n+   \n   for (node = cgraph_nodes; node; node = node->next)\n     {\n       if (!node->analyzed || cgraph_is_master_clone (node))\n@@ -4658,6 +4670,8 @@ ipa_pta_execute (void)\n   if (dump_file)\n     dump_sa_points_to_info (dump_file);\n   in_ipa_mode = 0;\n+  delete_alias_heapvars ();\n+  delete_points_to_sets ();\n }\n   \n struct tree_opt_pass pass_ipa_pta ="}]}