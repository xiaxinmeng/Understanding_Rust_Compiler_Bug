{"sha": "9449502d0168919f09e3d35f154ee41b6612935b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ0OTUwMmQwMTY4OTE5ZjA5ZTNkMzVmMTU0ZWU0MWI2NjEyOTM1Yg==", "commit": {"author": {"name": "Stephane Carrez", "email": "stcarrez@nerim.fr", "date": "2004-03-02T21:33:23Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2004-03-02T21:33:23Z"}, "message": "m68hc11.md (\"tstqi_z_used\"): Use define_insn_and_split.\n\n\t* config/m68hc11/m68hc11.md (\"tstqi_z_used\"): Use define_insn_and_split.\n\t(\"cmphi_z_used\", \"cmpqi_z_used\"): Likewise.\n\t(\"movstrictsi\", \"movstricthi\", \"movstrictqi\"): Likewise.\n\t(\"anddi3\", \"andsi3\", \"iordi3\", \"iorsi3\"): Likewise.\n\t(\"xordi3\", \"xorsi3\", \"*logicalsi3_zexthi\"): Likewise.\n\t(\"*logicalsi3_zextqi\", \"*logicalhi3_zexthi_ashift8\"): Likewise.\n\t(\"logicalhi3_zexthi\", \"*logicalsi3_silshr16\"): Likewise.\n\t(\"*logicalsi3_silshl16\", \"*logicalsi3_silshl16_zext\"): Likewise.\n\t(\"*ashldi3_const32\", \"*ashldi3_const1\", \"addsi_silshr16\"): Likewise.\n\t(\"addsi_andshr16\", \"*ashlsi3_const16_zexthi\"): Likewise.\n\t(\"*lshrdi3_const32\", \"*lshrdi_const1\"): Likewise.\n\nFrom-SVN: r78783", "tree": {"sha": "081a4398ca7f78525ac4c0d7b736f905450bbbbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/081a4398ca7f78525ac4c0d7b736f905450bbbbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9449502d0168919f09e3d35f154ee41b6612935b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9449502d0168919f09e3d35f154ee41b6612935b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9449502d0168919f09e3d35f154ee41b6612935b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9449502d0168919f09e3d35f154ee41b6612935b/comments", "author": null, "committer": null, "parents": [{"sha": "b90f32990eeeea3cda50fe70a77f390a5c53fa71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b90f32990eeeea3cda50fe70a77f390a5c53fa71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b90f32990eeeea3cda50fe70a77f390a5c53fa71"}], "stats": {"total": 466, "additions": 196, "deletions": 270}, "files": [{"sha": "63039b706da4e3f9e4fe4548026b7d21e5cdfcb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9449502d0168919f09e3d35f154ee41b6612935b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9449502d0168919f09e3d35f154ee41b6612935b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9449502d0168919f09e3d35f154ee41b6612935b", "patch": "@@ -1,3 +1,17 @@\n+2004-03-02  Stephane Carrez  <stcarrez@nerim.fr>\n+\n+\t* config/m68hc11/m68hc11.md (\"tstqi_z_used\"): Use define_insn_and_split.\n+\t(\"cmphi_z_used\", \"cmpqi_z_used\"): Likewise.\n+\t(\"movstrictsi\", \"movstricthi\", \"movstrictqi\"): Likewise.\n+\t(\"anddi3\", \"andsi3\", \"iordi3\", \"iorsi3\"): Likewise.\n+\t(\"xordi3\", \"xorsi3\", \"*logicalsi3_zexthi\"): Likewise.\n+\t(\"*logicalsi3_zextqi\", \"*logicalhi3_zexthi_ashift8\"): Likewise.\n+\t(\"logicalhi3_zexthi\", \"*logicalsi3_silshr16\"): Likewise.\n+\t(\"*logicalsi3_silshl16\", \"*logicalsi3_silshl16_zext\"): Likewise.\n+\t(\"*ashldi3_const32\", \"*ashldi3_const1\", \"addsi_silshr16\"): Likewise.\n+\t(\"addsi_andshr16\", \"*ashlsi3_const16_zexthi\"): Likewise.\n+\t(\"*lshrdi3_const32\", \"*lshrdi_const1\"): Likewise.\n+\n 2004-03-02  Stephane Carrez  <stcarrez@nerim.fr>\n \n \t* config/m68hc11/m68hc11.md (SOFT_TMP_REGNUM): Define."}, {"sha": "02782a6d65ae2142dc3050d0bae8830d26d575c9", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 182, "deletions": 270, "changes": 452, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9449502d0168919f09e3d35f154ee41b6612935b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9449502d0168919f09e3d35f154ee41b6612935b/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=9449502d0168919f09e3d35f154ee41b6612935b", "patch": "@@ -250,19 +250,13 @@\n ;; avoid problems with the flow+cse register pass which are made\n ;; after Z register replacement.\n ;;\n-(define_insn \"tstqi_z_used\"\n+(define_insn_and_split \"tstqi_z_used\"\n   [(set (cc0)\n \t(match_operand:QI 0 \"tst_operand\" \"m\"))\n    (use (match_operand:HI 1 \"hard_reg_operand\" \"dxy\"))\n    (use (reg:HI SOFT_Z_REGNUM))]\n   \"\"\n-  \"#\")\n-\n-(define_split /* \"tstqi_z_used\" */\n-  [(set (cc0)\n-\t(match_operand:QI 0 \"tst_operand\" \"\"))\n-   (use (match_operand:HI 1 \"hard_reg_operand\" \"\"))\n-   (use (reg:HI SOFT_Z_REGNUM))]\n+  \"#\"\n   \"z_replacement_completed == 2\"\n   [(set (mem:HI (pre_dec:HI (reg:HI SP_REGNUM))) (match_dup 1))\n    (set (match_dup 1) (match_dup 2))\n@@ -303,12 +297,24 @@\n   [(set (cc0)\n \t(compare (match_operand:HI 0 \"hard_reg_operand\" \"\")\n \t\t (match_operand:HI 1 \"hard_reg_operand\" \"\")))]\n-  \"reload_completed\"\n+  \"TARGET_M6811\n+   && reload_completed && !(Z_REG_P (operands[0]) || Z_REG_P (operands[1]))\"\n   [(set (match_dup 2) (match_dup 1))\n    (set (cc0)\n         (compare (match_dup 0) (match_dup 2)))]\n   \"operands[2] = gen_rtx_REG (HImode, SOFT_TMP_REGNUM);\")\n \n+(define_split\n+  [(set (cc0)\n+\t(compare (match_operand:HI 0 \"hard_reg_operand\" \"\")\n+\t\t (match_operand:HI 1 \"hard_reg_operand\" \"\")))]\n+  \"TARGET_M6812\n+   && reload_completed && !(Z_REG_P (operands[0]) || Z_REG_P (operands[1]))\"\n+  [(set (mem:HI (pre_dec:HI (reg:HI SP_REGNUM))) (match_dup 1))\n+   (set (cc0)\n+        (compare (match_dup 0) (mem:HI (post_inc:HI (reg:HI SP_REGNUM)))))]\n+  \"\")\n+\n (define_expand \"cmphi\"\n   [(set (cc0)\n \t(compare (match_operand:HI 0 \"tst_operand\" \"\")\n@@ -328,7 +334,7 @@\n   [(set (cc0)\n \t(compare (match_operand:HI 0 \"tst_operand\" \n \t\t\t\t\"d,?xy,xyd,?xy,d,m,!u,dxy,dxy\")\n-\t\t (match_operand:HI 1 \"cmp_operand\"\n+\t\t (match_operand:HI 1 \"general_operand\"\n \t\t\t\t\"i,i,!u,m,m,dxy,dxy,?*d*A,!*w\")))]\n   \"TARGET_M6812\"\n   \"*\n@@ -347,9 +353,9 @@\n (define_insn \"cmphi_1_hc11\"\n   [(set (cc0)\n \t(compare (match_operand:HI 0 \"tst_operand\" \n-\t\t\t\t\"dx,y,xyd,?xy,d,m,!u,dxy,dxy\")\n+\t\t\t\t\"dx,y,xyd,?xy,d,m,m,dxy,dxy,?u*z,dxy,*z\")\n \t\t (match_operand:HI 1 \"cmp_operand\"\n-\t\t\t\t\"i,i,!u,m,m,dxy,dxy,?*d*A,!*w\")))]\n+\t\t\t\t\"i,i,!u,m,m,?xy,d,?*d*A,?u,dxy,!*w,i\")))]\n   \"TARGET_M6811\"\n   \"*\n {\n@@ -364,21 +370,14 @@\n     return \\\"cp%0\\\\t%1\\\";\n }\")\n \n-(define_insn \"cmphi_z_used\"\n+(define_insn_and_split \"cmphi_z_used\"\n   [(set (cc0)\n \t(compare (match_operand:HI 0 \"tst_operand\" \"dxy,m\")\n-\t\t (match_operand:HI 1 \"cmp_operand\" \"m,dxy\")))\n+\t\t (match_operand:HI 1 \"cmp_operand\" \"mi,dxy\")))\n    (use (match_operand:HI 2 \"hard_reg_operand\" \"dxy,dxy\"))\n    (use (reg:HI SOFT_Z_REGNUM))]\n   \"\"\n-  \"#\")\n-  \n-(define_split /* \"cmphi_z_used\" */\n-  [(set (cc0)\n-\t(compare (match_operand:HI 0 \"tst_operand\" \"\")\n-\t\t (match_operand:HI 1 \"cmp_operand\" \"\")))\n-   (use (match_operand:HI 2 \"hard_reg_operand\" \"\"))\n-   (use (reg:HI SOFT_Z_REGNUM))]\n+  \"#\"\n   \"z_replacement_completed == 2\"\n   [(set (mem:HI (pre_dec:HI (reg:HI SP_REGNUM))) (match_dup 2))\n    (set (match_dup 2) (match_dup 3))\n@@ -455,21 +454,14 @@\n    operands[3] = gen_rtx_REG (HImode, SOFT_TMP_REGNUM);\n    operands[4] = gen_rtx_REG (QImode, SOFT_TMP_REGNUM);\")\n \n-(define_insn \"bitcmpqi_z_used\"\n+(define_insn_and_split \"bitcmpqi_z_used\"\n   [(set (cc0)\n \t(and:QI (match_operand:QI 0 \"tst_operand\" \"d,m\")\n \t\t(match_operand:QI 1 \"cmp_operand\" \"m,d\")))\n    (use (match_operand:HI 2 \"hard_reg_operand\" \"xy,xy\"))\n    (use (reg:HI SOFT_Z_REGNUM))]\n   \"\"\n-  \"#\")\n-  \n-(define_split /* \"bitcmpqi_z_used\" */\n-  [(set (cc0)\n-\t(and:QI (match_operand:QI 0 \"tst_operand\" \"\")\n-\t\t(match_operand:QI 1 \"cmp_operand\" \"\")))\n-   (use (match_operand:HI 2 \"hard_reg_operand\" \"\"))\n-   (use (reg:HI SOFT_Z_REGNUM))]\n+  \"#\"\n   \"z_replacement_completed == 2\"\n   [(set (mem:HI (pre_dec:HI (reg:HI SP_REGNUM))) (match_dup 2))\n    (set (match_dup 2) (match_dup 3))\n@@ -545,21 +537,14 @@\n    return \\\"cmpb\\\\t%b0\\\";\n }\")\n \n-(define_insn \"cmpqi_z_used\"\n+(define_insn_and_split \"cmpqi_z_used\"\n   [(set (cc0)\n \t(compare (match_operand:QI 0 \"tst_operand\" \"dxy,m\")\n \t\t (match_operand:QI 1 \"cmp_operand\" \"m,dxy\")))\n    (use (match_operand:HI 2 \"hard_reg_operand\" \"dxy,dxy\"))\n    (use (reg:HI SOFT_Z_REGNUM))]\n   \"\"\n-  \"#\")\n-  \n-(define_split /* cmpqi_z_used */\n-  [(set (cc0)\n-\t(compare (match_operand:QI 0 \"tst_operand\" \"\")\n-\t\t (match_operand:QI 1 \"cmp_operand\" \"\")))\n-   (use (match_operand:HI 2 \"hard_reg_operand\" \"\"))\n-   (use (reg:HI SOFT_Z_REGNUM))]\n+  \"#\"\n   \"z_replacement_completed == 2\"\n   [(set (mem:HI (pre_dec:HI (reg:HI SP_REGNUM))) (match_dup 2))\n    (set (match_dup 2) (match_dup 3))\n@@ -576,41 +561,29 @@\n ;; (strict_low_part ...) information.  This is correct for our machine\n ;; description but not for GCC optimization passes.\n ;;\n-(define_insn \"movstrictsi\"\n+(define_insn_and_split \"movstrictsi\"\n   [(set (strict_low_part (match_operand:SI 0 \"non_push_operand\" \"+um,D,D\"))\n \t(match_operand:SI 1 \"general_operand\" \"D,Dim,uD\"))]\n   \"\"\n-  \"#\")\n-\n-(define_split\n-  [(set (strict_low_part (match_operand:SI 0 \"non_push_operand\" \"\"))\n-\t(match_operand:SI 1 \"general_operand\" \"\"))]\n+  \"#\"\n   \"z_replacement_completed == 2\"\n   [(set (match_dup 0) (match_dup 1))]\n   \"\")\n \n-(define_insn \"movstricthi\"\n+(define_insn_and_split \"movstricthi\"\n   [(set (strict_low_part (match_operand:HI 0 \"non_push_operand\" \"+um,dA,dA\"))\n \t(match_operand:HI 1 \"general_operand\" \"dA,dAim,u\"))]\n   \"\"\n-  \"#\")\n-\n-(define_split\n-  [(set (strict_low_part (match_operand:HI 0 \"non_push_operand\" \"\"))\n-\t(match_operand:HI 1 \"general_operand\" \"\"))]\n+  \"#\"\n   \"z_replacement_completed == 2\"\n   [(set (match_dup 0) (match_dup 1))]\n   \"\")\n \n-(define_insn \"movstrictqi\"\n+(define_insn_and_split \"movstrictqi\"\n   [(set (strict_low_part (match_operand:QI 0 \"non_push_operand\" \"+mu,!dA\"))\n \t(match_operand:QI 1 \"general_operand\" \"d,imudA\"))]\n   \"\"\n-  \"#\")\n-\n-(define_split\n-  [(set (strict_low_part (match_operand:QI 0 \"non_push_operand\" \"\"))\n-\t(match_operand:QI 1 \"general_operand\" \"\"))]\n+  \"#\"\n   \"z_replacement_completed == 2\"\n   [(set (match_dup 0) (match_dup 1))]\n   \"\")\n@@ -3057,21 +3030,29 @@\n ;;- and instructions.\n ;;--------------------------------------------------------------------\n \n-(define_insn \"anddi3\"\n+(define_insn_and_split \"anddi3\"\n   [(set (match_operand:DI 0 \"reg_or_some_mem_operand\" \"=m,u\")\n \t(and:DI (match_operand:DI 1 \"reg_or_some_mem_operand\" \"%imu,imu\")\n \t\t(match_operand:DI 2 \"general_operand\" \"imu,imu\")))\n    (clobber (match_scratch:HI 3 \"=d,d\"))]\n   \"\"\n-  \"#\")\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  \"m68hc11_split_logical (SImode, AND, operands);\n+   DONE;\")\n \n-(define_insn \"andsi3\"\n+(define_insn_and_split \"andsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=D,!u\")\n \t(and:SI (match_operand:SI 1 \"register_operand\" \"%0,0\")\n \t\t(match_operand:SI 2 \"general_operand\" \"Dimu,imu\")))\n    (clobber (match_scratch:HI 3 \"=X,d\"))]\n   \"\"\n-  \"#\")\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  \"m68hc11_split_logical (HImode, AND, operands);\n+   DONE;\")\n \n (define_expand \"andhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n@@ -3333,21 +3314,29 @@\n ;;- Bit set or instructions.\n ;;--------------------------------------------------------------------\n \n-(define_insn \"iordi3\"\n+(define_insn_and_split \"iordi3\"\n   [(set (match_operand:DI 0 \"reg_or_some_mem_operand\" \"=m,u\")\n \t(ior:DI (match_operand:DI 1 \"reg_or_some_mem_operand\" \"%imu,imu\")\n \t\t(match_operand:DI 2 \"general_operand\" \"imu,imu\")))\n    (clobber (match_scratch:HI 3 \"=d,d\"))]\n   \"\"\n-  \"#\")\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  \"m68hc11_split_logical (SImode, IOR, operands);\n+   DONE;\")\n \n-(define_insn \"iorsi3\"\n+(define_insn_and_split \"iorsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=D,!u\")\n \t(ior:SI (match_operand:SI 1 \"register_operand\" \"%0,0\")\n \t\t(match_operand:SI 2 \"general_operand\" \"Dimu,imu\")))\n    (clobber (match_scratch:HI 3 \"=X,d\"))]\n   \"\"\n-  \"#\")\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  \"m68hc11_split_logical (HImode, IOR, operands);\n+   DONE;\")\n \n (define_expand \"iorhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n@@ -3544,21 +3533,29 @@\n ;;- xor instructions.\n ;;--------------------------------------------------------------------\n \n-(define_insn \"xordi3\"\n+(define_insn_and_split \"xordi3\"\n   [(set (match_operand:DI 0 \"reg_or_some_mem_operand\" \"=m,u\")\n \t(xor:DI (match_operand:DI 1 \"reg_or_some_mem_operand\" \"%imu,imu\")\n \t\t(match_operand:DI 2 \"general_operand\" \"imu,imu\")))\n    (clobber (match_scratch:HI 3 \"=d,d\"))]\n   \"\"\n-  \"#\")\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  \"m68hc11_split_logical (SImode, XOR, operands);\n+   DONE;\")\n \n-(define_insn \"xorsi3\"\n+(define_insn_and_split \"xorsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=D,!u\")\n \t(xor:SI (match_operand:SI 1 \"register_operand\" \"%0,0\")\n \t\t(match_operand:SI 2 \"general_operand\" \"Dimu,imu\")))\n    (clobber (match_scratch:HI 3 \"=X,d\"))]\n   \"\"\n-  \"#\")\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+  \"m68hc11_split_logical (HImode, XOR, operands);\n+   DONE;\")\n \n (define_insn \"xorhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d,d,!*A\")\n@@ -3644,30 +3641,47 @@\n ;;- Bit set or instructions.\n ;;--------------------------------------------------------------------\n \n-(define_insn \"*logicalsi3_zexthi\"\n+(define_insn_and_split \"*logicalsi3_zexthi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=D\")\n \t(match_operator:SI 3 \"m68hc11_logical_operator\"\n \t\t[(zero_extend:SI\n \t\t     (match_operand:HI 1 \"general_operand\" \"imudA\"))\n \t\t (match_operand:SI 2 \"general_operand\" \"Dimu\")]))]\n   \"\"\n-  \"#\")\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (reg:HI D_REGNUM) (match_dup 4))\n+   (set (reg:HI D_REGNUM) (match_op_dup 3 [(reg:HI D_REGNUM) (match_dup 5)]))\n+   (set (reg:HI X_REGNUM) (match_dup 6))]\n+  \"PUT_MODE (operands[3], HImode);\n+   if (X_REG_P (operands[2]))\n+     {\n+       operands[5] = operands[1];\n+       /* Make all the (set (REG:x) (REG:y)) a nop set.  */\n+       operands[4] = gen_rtx (REG, HImode, HARD_D_REGNUM);\n+       operands[6] = gen_rtx (REG, HImode, HARD_X_REGNUM);\n+     }\n+   else\n+     {\n+       operands[4] = operands[1];\n+       operands[5] = m68hc11_gen_lowpart (HImode, operands[2]);\n+       operands[6] = m68hc11_gen_highpart (HImode, operands[2]);\n+     }\n+   /* For an AND, make sure the high 16-bit part is cleared.  */\n+   if (GET_CODE (operands[3]) == AND)\n+     {\n+       operands[6] = const0_rtx;\n+     }\n+   \")\n \n-(define_insn \"*logicalsi3_zextqi\"\n+(define_insn_and_split \"*logicalsi3_zextqi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=D,D,D\")\n \t(match_operator:SI 3 \"m68hc11_logical_operator\"\n \t\t[(zero_extend:SI\n \t\t     (match_operand:QI 1 \"general_operand\" \"d,*A,imu\"))\n \t\t (match_operand:SI 2 \"general_operand\" \"imu,imu,0\")]))]\n   \"\"\n-  \"#\")\n-\n-(define_split /* logicalsi3_zextqi */\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(match_operator:SI 3 \"m68hc11_logical_operator\"\n-\t         [(zero_extend:SI\n-\t\t     (match_operand:QI 1 \"general_operand\" \"\"))\n-\t\t  (match_operand:SI 2 \"general_operand\" \"\")]))]\n+  \"#\"\n   \"z_replacement_completed == 2\"\n   [(set (reg:QI A_REGNUM) (match_dup 4))\n    (set (reg:QI D_REGNUM) (match_dup 7))\n@@ -3698,63 +3712,47 @@\n      }\n    \")\n \n-(define_split /* logicalsi3_zexthi */\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(match_operator:SI 3 \"m68hc11_logical_operator\"\n-\t         [(zero_extend:SI\n-\t\t     (match_operand:HI 1 \"general_operand\" \"\"))\n-\t\t  (match_operand:SI 2 \"general_operand\" \"\")]))]\n-  \"reload_completed\"\n-  [(set (reg:HI D_REGNUM) (match_dup 4))\n-   (set (reg:HI D_REGNUM) (match_op_dup 3 [(reg:HI D_REGNUM) (match_dup 5)]))\n-   (set (reg:HI X_REGNUM) (match_dup 6))]\n-  \"PUT_MODE (operands[3], HImode);\n-   if (X_REG_P (operands[2]))\n-     {\n-       operands[5] = operands[1];\n-       /* Make all the (set (REG:x) (REG:y)) a nop set.  */\n-       operands[4] = gen_rtx_REG (HImode, HARD_D_REGNUM);\n-       operands[6] = gen_rtx_REG (HImode, HARD_X_REGNUM);\n-     }\n-   else\n-     {\n-       operands[4] = operands[1];\n-       operands[5] = m68hc11_gen_lowpart (HImode, operands[2]);\n-       operands[6] = m68hc11_gen_highpart (HImode, operands[2]);\n-     }\n-   /* For an AND, make sure the high 16-bit part is cleared.  */\n-   if (GET_CODE (operands[3]) == AND)\n-     {\n-       operands[6] = const0_rtx;\n-     }\n-   \")\n-\n-(define_insn \"*logicalhi3_zexthi_ashift8\"\n+(define_insn_and_split \"*logicalhi3_zexthi_ashift8\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n \t(match_operator:HI 3 \"m68hc11_logical_operator\"\n \t\t[(zero_extend:HI\n-\t\t     (match_operand:QI 1 \"general_operand\" \"imud\"))\n+\t\t     (match_operand:QI 1 \"general_operand\" \"imud*A\"))\n \t\t (ashift:HI\n-\t\t     (match_operand:HI 2 \"general_operand\" \"dimu\")\n+\t\t     (match_operand:HI 2 \"general_operand\" \"imud*A\")\n \t\t     (const_int 8))]))]\n   \"\"\n-  \"#\")\n+  \"#\"\n+  \"z_replacement_completed == 2\"\n+  [(set (reg:QI A_REGNUM) (match_dup 4))\n+   (set (reg:QI B_REGNUM) (match_dup 5))]\n+  \"\n+   if (GET_CODE (operands[3]) == AND)\n+     {\n+       emit_insn (gen_movhi (operands[0], const0_rtx));\n+       DONE;\n+     }\n+   else\n+     {\n+       operands[5] = operands[1];\n+       if (D_REG_P (operands[2]))\n+         {\n+           operands[4] = gen_rtx_REG (QImode, HARD_B_REGNUM);\n+         }\n+       else\n+         {\n+           operands[4] = m68hc11_gen_lowpart (QImode, operands[2]);\n+         }\n+     }\n+  \")\n \n-(define_insn \"*logicalhi3_zexthi\"\n+(define_insn_and_split \"*logicalhi3_zexthi\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d,d\")\n \t(match_operator:HI 3 \"m68hc11_logical_operator\"\n \t\t[(zero_extend:HI\n \t\t     (match_operand:QI 1 \"general_operand\" \"imd*A,?u\"))\n \t\t (match_operand:HI 2 \"general_operand\" \"dim,?dimu\")]))]\n   \"\"\n-  \"#\")\n-\n-(define_split /* logicalhi3_zexthi */\n-  [(set (match_operand:HI 0 \"register_operand\" \"\")\n-\t(match_operator:HI 3 \"m68hc11_logical_operator\"\n-\t\t[(zero_extend:HI\n-\t\t     (match_operand:QI 1 \"general_operand\" \"\"))\n-\t\t (match_operand:HI 2 \"general_operand\" \"\")]))]\n+  \"#\"\n   \"z_replacement_completed == 2\"\n   [(set (reg:QI B_REGNUM) (match_dup 6))\n    (set (reg:QI A_REGNUM) (match_dup 4))\n@@ -3783,54 +3781,16 @@\n      }\n   \")\n \n-(define_split /* logicalhi3_zexthi_ashift8 */\n-  [(set (match_operand:HI 0 \"register_operand\" \"\")\n-\t(match_operator:HI 3 \"m68hc11_logical_operator\"\n-\t\t[(zero_extend:HI\n-\t\t     (match_operand:QI 1 \"general_operand\" \"\"))\n-\t\t (ashift:HI\n-\t\t     (match_operand:HI 2 \"general_operand\" \"\")\n-\t\t     (const_int 8))]))]\n-  \"z_replacement_completed == 2\"\n-  [(set (reg:QI A_REGNUM) (match_dup 4))\n-   (set (reg:QI B_REGNUM) (match_dup 5))]\n-  \"\n-   if (GET_CODE (operands[3]) == AND)\n-     {\n-       emit_insn (gen_movhi (operands[0], const0_rtx));\n-       DONE;\n-     }\n-   else\n-     {\n-       operands[5] = operands[1];\n-       if (D_REG_P (operands[2]))\n-         {\n-           operands[4] = gen_rtx_REG (QImode, HARD_B_REGNUM);\n-         }\n-       else\n-         {\n-           operands[4] = m68hc11_gen_lowpart (QImode, operands[2]);\n-         }\n-     }\n-  \")\n \n-(define_insn \"*logicalsi3_silshr16\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=D,D,D\")\n+(define_insn_and_split \"*logicalsi3_silshr16\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=D,D,D,?D\")\n           (match_operator:SI 3 \"m68hc11_logical_operator\"\n \t      [(lshiftrt:SI \n-\t\t   (match_operand:SI 1 \"general_operand\" \"uim,uim,?D\")\n+\t\t   (match_operand:SI 1 \"general_operand\" \"uim,uim,0,0\")\n \t\t   (const_int 16))\n-\t\t(match_operand:SI 2 \"general_operand\" \"uim,0,0\")]))]\n+\t\t(match_operand:SI 2 \"general_operand\" \"uim,0,uim,0\")]))]\n   \"\"\n-  \"#\")\n-\n-(define_split /* logicalsi3_silshr16 */\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-          (match_operator:SI 3 \"m68hc11_logical_operator\"\n-\t\t[(lshiftrt:SI \n-\t\t\t(match_operand:SI 1 \"general_operand\" \"\")\n-\t\t\t(const_int 16))\n-\t\t (match_operand:SI 2 \"general_operand\" \"\")]))]\n+  \"#\"\n   \"reload_completed\"\n   [(set (reg:HI D_REGNUM) (match_dup 4))\n    (set (reg:HI D_REGNUM) (match_op_dup 3 [(reg:HI D_REGNUM) (match_dup 5)]))\n@@ -3855,23 +3815,15 @@\n      }\n \")\n \n-(define_insn \"*logicalsi3_silshl16\"\n+(define_insn_and_split \"*logicalsi3_silshl16\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=D,D\")\n           (match_operator:SI 3 \"m68hc11_logical_operator\"\n \t      [(ashift:SI \n \t\t   (match_operand:SI 1 \"general_operand\" \"uim,?D\")\n \t\t   (const_int 16))\n \t\t(match_operand:SI 2 \"general_operand\" \"0,0\")]))]\n   \"\"\n-  \"#\")\n-\n-(define_split /* logicalsi3_silshl16 */\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-          (match_operator:SI 3 \"m68hc11_logical_operator\"\n-\t\t[(ashift:SI \n-\t\t\t(match_operand:SI 1 \"general_operand\" \"\")\n-\t\t\t(const_int 16))\n-\t\t (match_operand:SI 2 \"general_operand\" \"\")]))]\n+  \"#\"\n   \"z_replacement_completed == 2\"\n   [(set (reg:HI X_REGNUM) (match_op_dup 3 [(reg:HI X_REGNUM) (match_dup 4)]))\n    (set (reg:HI D_REGNUM) (match_dup 5))]\n@@ -3884,48 +3836,45 @@\n      operands[5] = gen_rtx_REG (HImode, HARD_D_REGNUM);\n    \")\n \n-\n-;;--------------------------------------------------------------------\n-;;- 64/32-bit Logical Operations.  Patterns are defined so that GCC\n-;; can optimize correctly.  These insns are split by the `final'\n-;; pass (# pattern).  They are split to fall in the corresponding\n-;; 16-bit logical patterns.\n-;;--------------------------------------------------------------------\n-\n-;; Split 64-bit logical operations: anddi3, iordi3, xordi3\n-(define_split\n-  [(set (match_operand:DI 0 \"reg_or_some_mem_operand\" \"\")\n-\t(match_operator:DI 4 \"m68hc11_logical_operator\"\n-\t     [(match_operand:DI 1 \"reg_or_some_mem_operand\" \"\")\n-\t      (match_operand:DI 2 \"general_operand\" \"\")]))\n-   (clobber (match_scratch:HI 3 \"\"))]\n+(define_insn_and_split \"*logicalsi3_silshl16_zext\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=D,D,D\")\n+          (match_operator:SI 3 \"m68hc11_logical_operator\"\n+\t      [(ashift:SI\n+\t          (zero_extend:SI\n+\t\t     (match_operand:HI 1 \"general_operand\" \"uim,udA,!dA\"))\n+\t\t  (const_int 16))\n+\t    (zero_extend:SI (match_operand:HI 2 \"general_operand\" \"uidA,um,!dA\"))]))]\n+  \"\"\n+  \"#\"\n+  ;; Must split before z register replacement\n   \"reload_completed\"\n-  [(const_int 0)]\n-  \"m68hc11_split_logical (SImode, GET_CODE (operands[4]), operands);\n-   DONE;\")\n-\n-;; Split 32-bit logical operations: andsi3, iorsi3, xorsi3\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(match_operator:SI 3 \"m68hc11_logical_operator\"\n-\t     [(match_operand:SI 1 \"register_operand\" \"\")\n-\t      (match_operand:SI 2 \"general_operand\" \"\")]))]\n-  \"0 && reload_completed\"\n-  [(const_int 0)]\n-  \"m68hc11_split_logical (HImode, GET_CODE (operands[3]), operands);\n-   DONE;\")\n+  [(set (match_dup 4) (match_dup 5))\n+   (set (match_dup 6) (match_dup 7))]\n+  \"\n+    /* set (X_REGNUM) (d), set (D_REGNUM) (1) */\n+   if (GET_CODE (operands[1]) == HARD_D_REGNUM\n+       && GET_CODE (operands[3]) != AND)\n+     {\n+       /* This particular case is too early to be split before\n+          Z register replacement because the cse-reg pass we do\n+\t  does not recognize the 'swap_areg'.  It is ok to handle\n+\t  this case after.  */\n+       if (z_replacement_completed != 2)\n+         {\n+\t   FAIL;\n+\t }\n+       emit_move_insn (gen_rtx (REG, HImode, HARD_X_REGNUM), operands[2]);\n+       emit_insn (gen_swap_areg (gen_rtx (REG, HImode, HARD_D_REGNUM),\n+\t\t\t         gen_rtx (REG, HImode, HARD_X_REGNUM)));\n+     }\n+   operands[4] = gen_rtx (REG, HImode, HARD_D_REGNUM);\n+   operands[6] = gen_rtx (REG, HImode, HARD_X_REGNUM);\n+   operands[5] = operands[2];\n+   operands[7] = operands[1];\n \n-;; Split 32-bit logical operations: andsi3, iorsi3, xorsi3\n-(define_split\n-  [(set (match_operand:SI 0 \"reg_or_some_mem_operand\" \"\")\n-\t(match_operator:SI 4 \"m68hc11_logical_operator\"\n-\t     [(match_operand:SI 1 \"reg_or_some_mem_operand\" \"\")\n-\t      (match_operand:SI 2 \"general_operand\" \"\")]))\n-   (clobber (match_scratch:HI 3 \"\"))]\n-  \"reload_completed\"\n-  [(const_int 0)]\n-  \"m68hc11_split_logical (HImode, GET_CODE (operands[4]), operands);\n-   DONE;\")\n+   if (GET_CODE (operands[3]) == AND)\n+     operands[5] = operands[7] = const0_rtx;\n+   \")\n \n ;;--------------------------------------------------------------------\n ;; 16-bit Arithmetic and logical operations on X and Y:\n@@ -4424,19 +4373,13 @@\n     }\n }\")\n \n-(define_insn \"*ashldi3_const32\"\n+(define_insn_and_split \"*ashldi3_const32\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=<,m,u\")\n \t(ashift:DI (match_operand:DI 1 \"general_operand\" \"umi,umi,umi\")\n \t\t   (const_int 32)))\n    (clobber (match_scratch:HI 2 \"=&A,d,d\"))]\n    \"\"\n-   \"#\")\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n-\t(ashift:DI (match_operand:DI 1 \"general_operand\" \"\")\n-\t\t   (const_int 32)))\n-   (clobber (match_scratch:HI 2 \"\"))]\n+   \"#\"\n    \"reload_completed\"\n    [(const_int 0)]\n    \"/* Move the lowpart in the highpart first in case the shift\n@@ -4463,19 +4406,13 @@\n       }\n     DONE;\")\n \n-(define_insn \"*ashldi3_const1\"\n+(define_insn_and_split \"*ashldi3_const1\"\n   [(set (match_operand:DI 0 \"non_push_operand\" \"=m,m,u\")\n \t(ashift:DI (match_operand:DI 1 \"general_operand\" \"mi,u,umi\")\n \t\t   (const_int 1)))\n    (clobber (match_scratch:HI 2 \"=d,d,d\"))]\n    \"\"\n-   \"#\")\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"non_push_operand\" \"\")\n-\t(ashift:DI (match_operand:DI 1 \"general_operand\" \"\")\n-\t\t   (const_int 1)))\n-   (clobber (match_scratch:HI 2 \"\"))]\n+   \"#\"\n    \"z_replacement_completed == 2\"\n    [(set (match_dup 2) (match_dup 3))\n     (set (match_dup 2) (ashift:HI (match_dup 2) (const_int 1)))\n@@ -4515,10 +4452,10 @@\n     operands[8] = m68hc11_gen_lowpart (HImode, operands[8]);\")\n \n (define_insn \"addsi_silshr16\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=D,D\")\n-          (plus:SI (lshiftrt:SI (match_operand:SI 1 \"general_operand\" \"!*uim,0\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=D,D,!D\")\n+          (plus:SI (lshiftrt:SI (match_operand:SI 1 \"general_operand\" \"!*uim,0,0\")\n \t\t\t\t(const_int 16))\n-\t\t   (match_operand:SI 2 \"general_operand\" \"0,m!*u\")))]\n+\t\t   (match_operand:SI 2 \"general_operand\" \"0,m!*u,0\")))]\n   \"\"\n   \"#\")\n \n@@ -4583,19 +4520,13 @@\n   operands[4] = m68hc11_gen_lowpart (HImode, operands[2]);\n }\")\n \n-(define_insn \"addsi_andshr16\"\n+(define_insn_and_split \"addsi_andshr16\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=D\")\n           (plus:SI (and:SI (match_operand:SI 1 \"general_operand\" \"%uim\")\n \t\t\t   (const_int 65535))\n \t\t   (match_operand:SI 2 \"general_operand\" \"0\")))]\n   \"\"\n-  \"#\")\n-\n-(define_split\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-          (plus:SI (and:SI (match_operand:SI 1 \"general_operand\" \"\")\n-\t\t\t   (const_int 65535))\n-\t\t   (match_operand:SI 2 \"general_operand\" \"\")))]\n+  \"#\"\n   \"z_replacement_completed == 2\"\n   [(set (reg:HI D_REGNUM) (plus:HI (reg:HI D_REGNUM) (match_dup 3)))\n    (set (reg:HI X_REGNUM) (plus:HI (plus:HI (reg:HI X_REGNUM) (const_int 0)) (reg:HI CC_REGNUM)))]\n@@ -4642,21 +4573,14 @@\n    \"\"\n    \"#\")\n \n-(define_insn \"*ashlsi3_const16_zexthi\"\n+(define_insn_and_split \"*ashlsi3_const16_zexthi\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=D\")\n \t(ashift:SI (zero_extend:HI \n \t\t\t(match_operand:HI 1 \"general_operand\" \"duim*A\"))\n \t           (const_int 16)))\n    (clobber (match_scratch:HI 2 \"=X\"))]\n    \"\"\n-   \"#\")\n-\n-(define_split /* \"*ashlsi3_const16_zexthi\"*/\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n-\t(ashift:SI (zero_extend:HI \n-\t\t\t(match_operand:HI 1 \"general_operand\" \"\"))\n-\t           (const_int 16)))\n-   (clobber (match_scratch:HI 2 \"=X\"))]\n+   \"#\"\n    \"reload_completed\"\n    [(set (reg:HI X_REGNUM) (match_dup 1))\n     (set (reg:HI D_REGNUM) (const_int 0))]\n@@ -5260,19 +5184,13 @@\n     }\n }\")\n \n-(define_insn \"*lshrdi3_const32\"\n+(define_insn_and_split \"*lshrdi3_const32\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=<,m,u\")\n \t(lshiftrt:DI (match_operand:DI 1 \"general_operand\" \"umi,umi,umi\")\n \t\t     (const_int 32)))\n    (clobber (match_scratch:HI 2 \"=&A,d,d\"))]\n    \"\"\n-   \"#\")\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n-\t(lshiftrt:DI (match_operand:DI 1 \"general_operand\" \"\")\n-\t\t     (const_int 32)))\n-   (clobber (match_scratch:HI 2 \"=&A,d\"))]\n+   \"#\"\n    \"reload_completed\"\n    [(const_int 0)]\n    \"m68hc11_split_move (m68hc11_gen_lowpart (SImode, operands[0]),\n@@ -5342,19 +5260,13 @@\n     operands[7] = m68hc11_gen_highpart (HImode, operands[6]);\n     operands[6] = m68hc11_gen_lowpart (HImode, operands[6]);\")\n \n-(define_insn \"*lshrdi_const1\"\n+(define_insn_and_split \"*lshrdi_const1\"\n   [(set (match_operand:DI 0 \"non_push_operand\" \"=m,u\")\n \t(lshiftrt:DI (match_operand:DI 1 \"general_operand\" \"umi,umi\")\n \t\t     (const_int 1)))\n    (clobber (match_scratch:HI 2 \"=d,d\"))]\n    \"\"\n-   \"#\")\n-\n-(define_split\n-  [(set (match_operand:DI 0 \"non_push_operand\" \"\")\n-\t(lshiftrt:DI (match_operand:DI 1 \"general_operand\" \"\")\n-\t\t     (const_int 1)))\n-   (clobber (match_scratch:HI 2 \"\"))]\n+   \"#\"\n    \"z_replacement_completed == 2\"\n    [(set (match_dup 2) (match_dup 3))\n     (set (match_dup 2) (lshiftrt:HI (match_dup 2) (const_int 1)))"}]}