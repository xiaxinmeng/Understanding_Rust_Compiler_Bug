{"sha": "f1c4ca32d04cf16aa78c857acca00f7eebb9b9da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFjNGNhMzJkMDRjZjE2YWE3OGM4NTdhY2NhMDBmN2VlYmI5YjlkYQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-03-09T06:01:39Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-03-09T06:01:39Z"}, "message": "re PR c++/13658 ([testcase] namespace association vs. templates part one)\n\n\n2004-03-08  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR c++/13658\n\t* testsuite/23_containers/deque/modifiers/swap.cc: New.\n\t* testsuite/23_containers/list/modifiers/swap.cc: New.\n\t* testsuite/23_containers/map/modifiers/swap.cc: New.\n\t* testsuite/23_containers/multimap/modifiers/swap.cc: New.\n\t* testsuite/23_containers/multiset/modifiers/swap.cc: New.\n\t* testsuite/23_containers/set/modifiers/swap.cc: New.\n\t* testsuite/23_containers/vector/modifiers/swap.cc: New.\n\nFrom-SVN: r79151", "tree": {"sha": "63ad669a56dbd71e0b98ac40f2a0eb06e569923c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63ad669a56dbd71e0b98ac40f2a0eb06e569923c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da/comments", "author": null, "committer": null, "parents": [{"sha": "5340bbea5a4b436138b1d6674480fa6f943dd3e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5340bbea5a4b436138b1d6674480fa6f943dd3e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5340bbea5a4b436138b1d6674480fa6f943dd3e0"}], "stats": {"total": 452, "additions": 452, "deletions": 0}, "files": [{"sha": "1538ef3e30e5e61dc1587330f18feb2ef18122b5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f1c4ca32d04cf16aa78c857acca00f7eebb9b9da", "patch": "@@ -1,3 +1,14 @@\n+2004-03-08  Benjamin Kosnik  <bkoz@redhat.com>\n+\t\n+\tPR c++/13658\n+\t* testsuite/23_containers/deque/modifiers/swap.cc: New.\n+\t* testsuite/23_containers/list/modifiers/swap.cc: New.\n+\t* testsuite/23_containers/map/modifiers/swap.cc: New.\n+\t* testsuite/23_containers/multimap/modifiers/swap.cc: New.\n+\t* testsuite/23_containers/multiset/modifiers/swap.cc: New.\n+\t* testsuite/23_containers/set/modifiers/swap.cc: New.\n+\t* testsuite/23_containers/vector/modifiers/swap.cc: New.\n+\t\n 2004-03-08  Petur Runolfsson  <peturr02@ru.is>\n \n \tPR libstdc++/12658"}, {"sha": "12cfa748b4975639a50f69db27925deac161734b", "filename": "libstdc++-v3/testsuite/23_containers/deque/modifiers/swap.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Fswap.cc?ref=f1c4ca32d04cf16aa78c857acca00f7eebb9b9da", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <deque>\n+#include <testsuite_hooks.h>\n+ \n+struct T { int i; };\n+\n+int swap_calls;\n+\n+namespace std\n+{\n+  template<> \n+    void \n+    deque<T, allocator<T> >::swap(deque<T, allocator<T> >&) \n+    { ++swap_calls; }\n+}\n+\n+// Should use deque specialization for swap.\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::deque<T> A;\n+  std::deque<T> B;\n+  swap_calls = 0;\n+  std::swap(A, B);\n+  VERIFY(1 == swap_calls);\n+}\n+\n+// Should use deque specialization for swap.\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+  deque<T> A;\n+  deque<T> B;\n+  swap_calls = 0;\n+  swap(A, B);\n+  VERIFY(1 == swap_calls);\n+}\n+\n+// See c++/13658 for background info.\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "d20dec036799315700b565169b4947c15f7f3683", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/swap.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Fswap.cc?ref=f1c4ca32d04cf16aa78c857acca00f7eebb9b9da", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+ \n+struct T { int i; };\n+\n+int swap_calls;\n+\n+namespace std\n+{\n+  template<> \n+    void \n+    list<T, allocator<T> >::swap(list<T, allocator<T> >&) \n+    { ++swap_calls; }\n+}\n+\n+// Should use list specialization for swap.\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::list<T> A;\n+  std::list<T> B;\n+  swap_calls = 0;\n+  std::swap(A, B);\n+  VERIFY(1 == swap_calls);\n+}\n+\n+// Should use list specialization for swap.\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+  list<T> A;\n+  list<T> B;\n+  swap_calls = 0;\n+  swap(A, B);\n+  VERIFY(1 == swap_calls);\n+}\n+\n+// See c++/13658 for background info.\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "8fb48cb684315d3a22047c3a23b1baaf2da7f7a9", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/swap.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Fswap.cc?ref=f1c4ca32d04cf16aa78c857acca00f7eebb9b9da", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+ \n+struct T { int i; };\n+\n+int swap_calls;\n+\n+namespace std\n+{\n+  template<> \n+    void \n+    map<T, int>::swap(map<T, int>&) \n+    { ++swap_calls; }\n+}\n+\n+// Should use map specialization for swap.\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::map<T, int> A;\n+  std::map<T, int> B;\n+  swap_calls = 0;\n+  std::swap(A, B);\n+  VERIFY(1 == swap_calls);\n+}\n+\n+// Should use map specialization for swap.\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+  map<T, int> A;\n+  map<T, int> B;\n+  swap_calls = 0;\n+  swap(A, B);\n+  VERIFY(1 == swap_calls);\n+}\n+\n+// See c++/13658 for background info.\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "34425bd4cf3f213ce820df816acdf02044068c9d", "filename": "libstdc++-v3/testsuite/23_containers/multimap/modifiers/swap.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Fswap.cc?ref=f1c4ca32d04cf16aa78c857acca00f7eebb9b9da", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+ \n+struct T { int i; };\n+\n+int swap_calls;\n+\n+namespace std\n+{\n+  template<> \n+    void \n+    multimap<T, int>::swap(multimap<T, int>&) \n+    { ++swap_calls; }\n+}\n+\n+// Should use multimap specialization for swap.\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::multimap<T, int> A;\n+  std::multimap<T, int> B;\n+  swap_calls = 0;\n+  std::swap(A, B);\n+  VERIFY(1 == swap_calls);\n+}\n+\n+// Should use multimap specialization for swap.\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+  multimap<T, int> A;\n+  multimap<T, int> B;\n+  swap_calls = 0;\n+  swap(A, B);\n+  VERIFY(1 == swap_calls);\n+}\n+\n+// See c++/13658 for background info.\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "809e1538d1c7342f9da735d2a199aeea89917ee8", "filename": "libstdc++-v3/testsuite/23_containers/multiset/modifiers/swap.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Fswap.cc?ref=f1c4ca32d04cf16aa78c857acca00f7eebb9b9da", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+ \n+struct T { int i; };\n+\n+int swap_calls;\n+\n+namespace std\n+{\n+  template<> \n+    void \n+    multiset<T>::swap(multiset<T>&) \n+    { ++swap_calls; }\n+}\n+\n+// Should use multiset specialization for swap.\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::multiset<T> A;\n+  std::multiset<T> B;\n+  swap_calls = 0;\n+  std::swap(A, B);\n+  VERIFY(1 == swap_calls);\n+}\n+\n+// Should use multiset specialization for swap.\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+  multiset<T> A;\n+  multiset<T> B;\n+  swap_calls = 0;\n+  swap(A, B);\n+  VERIFY(1 == swap_calls);\n+}\n+\n+// See c++/13658 for background info.\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "dbf3b832666e6f2158910276bdfe9cfd7b396a13", "filename": "libstdc++-v3/testsuite/23_containers/set/modifiers/swap.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Fswap.cc?ref=f1c4ca32d04cf16aa78c857acca00f7eebb9b9da", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+ \n+struct T { int i; };\n+\n+int swap_calls;\n+\n+namespace std\n+{\n+  template<> \n+    void \n+    set<T>::swap(set<T>&) \n+    { ++swap_calls; }\n+}\n+\n+// Should use set specialization for swap.\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::set<T> A;\n+  std::set<T> B;\n+  swap_calls = 0;\n+  std::swap(A, B);\n+  VERIFY(1 == swap_calls);\n+}\n+\n+// Should use set specialization for swap.\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+  set<T> A;\n+  set<T> B;\n+  swap_calls = 0;\n+  swap(A, B);\n+  VERIFY(1 == swap_calls);\n+}\n+\n+// See c++/13658 for background info.\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "3122aa1955b9c8cdb7e8de233d62125c005da4b0", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/swap.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1c4ca32d04cf16aa78c857acca00f7eebb9b9da/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Fswap.cc?ref=f1c4ca32d04cf16aa78c857acca00f7eebb9b9da", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2004 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+ \n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+ \n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+ \n+struct T { int i; };\n+\n+int swap_calls;\n+\n+namespace std\n+{\n+  template<> \n+    void \n+    vector<T, allocator<T> >::swap(vector<T, allocator<T> >&) \n+    { ++swap_calls; }\n+}\n+\n+// Should use vector specialization for swap.\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::vector<T> A;\n+  std::vector<T> B;\n+  swap_calls = 0;\n+  std::swap(A, B);\n+  VERIFY(1 == swap_calls);\n+}\n+\n+// Should use vector specialization for swap.\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+  vector<T> A;\n+  vector<T> B;\n+  swap_calls = 0;\n+  swap(A, B);\n+  VERIFY(1 == swap_calls);\n+}\n+\n+// See c++/13658 for background info.\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}]}