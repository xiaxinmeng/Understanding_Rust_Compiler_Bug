{"sha": "e8fc7396390399d4bf00415ed0cbb244bdeeefc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThmYzczOTYzOTAzOTlkNGJmMDA0MTVlZDBjYmIyNDRiZGVlZWZjMQ==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "1999-04-19T15:45:57Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "1999-04-19T15:45:57Z"}, "message": "lang.c (lang_decode_option): Fixed returned value when parsing `-fxref=...' and `-Wall'.\n\nMon Apr 19 14:44:48 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\t* lang.c (lang_decode_option): Fixed returned value when parsing\n \t`-fxref=...' and `-Wall'.\n\t* parse.y (source_end_java_method): Do not generate code when\n \tflag_emit_xref is set.\n\t(resolve_expression_name): Do not build static field access when\n \tflag_emit_xref is set.\n\t(resolve_field_access): No special treatement on `length' when\n \tflag_emit_xref is set. Do not build qualified static field access\n \twhen flag_emit_xref is set.\n\t(patch_invoke): Keep the method DECL as operand 0 of the CALL_EXPR\n \twhen flag_emit_xref is set.\n\t(patch_assignment): Do not generate array store runtime check when\n \tflag_emit_xref is set.\n\t* xref.c (xref_flag_value): Fixed function declaration\n \tindentation.\n\t(xset_set_data): New function.\n\t* xref.h (xref_set_data): Added prototype for new function.\n\t(typedef struct xref_flag_table): New field data.\n\t(XREF_GET_DATA): New macro.\n\nFrom-SVN: r26550", "tree": {"sha": "766b1f76543b43ffbf5af505600a2ae571e851f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/766b1f76543b43ffbf5af505600a2ae571e851f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8fc7396390399d4bf00415ed0cbb244bdeeefc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8fc7396390399d4bf00415ed0cbb244bdeeefc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8fc7396390399d4bf00415ed0cbb244bdeeefc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8fc7396390399d4bf00415ed0cbb244bdeeefc1/comments", "author": null, "committer": null, "parents": [{"sha": "3b6e11237cc2b779df7dd9c3b2fefc55a1a4501b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b6e11237cc2b779df7dd9c3b2fefc55a1a4501b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b6e11237cc2b779df7dd9c3b2fefc55a1a4501b"}], "stats": {"total": 63, "additions": 51, "deletions": 12}, "files": [{"sha": "39e4c86f3b8d798ac8f3f0aa532ecb82961914eb", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fc7396390399d4bf00415ed0cbb244bdeeefc1/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fc7396390399d4bf00415ed0cbb244bdeeefc1/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=e8fc7396390399d4bf00415ed0cbb244bdeeefc1", "patch": "@@ -1,3 +1,25 @@\n+Mon Apr 19 14:44:48 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* lang.c (lang_decode_option): Fixed returned value when parsing\n+ \t`-fxref=...' and `-Wall'.\n+\t* parse.y (source_end_java_method): Do not generate code when\n+ \tflag_emit_xref is set.\n+\t(resolve_expression_name): Do not build static field access when\n+ \tflag_emit_xref is set.\n+\t(resolve_field_access): No special treatement on `length' when\n+ \tflag_emit_xref is set. Do not build qualified static field access\n+ \twhen flag_emit_xref is set.\n+\t(patch_invoke): Keep the method DECL as operand 0 of the CALL_EXPR\n+ \twhen flag_emit_xref is set.\n+\t(patch_assignment): Do not generate array store runtime check when\n+ \tflag_emit_xref is set.\n+\t* xref.c (xref_flag_value): Fixed function declaration\n+ \tindentation.\n+\t(xset_set_data): New function.\n+\t* xref.h (xref_set_data): Added prototype for new function.\n+\t(typedef struct xref_flag_table): New field data.\n+\t(XREF_GET_DATA): New macro.\n+\n 1999-04-19  Tom Tromey  <tromey@cygnus.com>\n \n \t* xref.h (enum): Removed trailing comma.\n@@ -12,7 +34,7 @@ Thu Apr 15 13:08:03 1999  Anthony Green  <green@cygnus.com>\n \n Mon Apr 12 18:27:32 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \n-\t* parse.y (patch_unaryop): Fix ++ operator check on array\n+\t* parse.y (patch_unaryop): Fixed ++/-- operator check on array\n  \treferences.\n \n Tue Apr  6 23:15:52 1999  Jeffrey A Law  (law@cygnus.com)"}, {"sha": "abfa4bec8870497f6fb9024bdaa6959bafc3b2e6", "filename": "gcc/java/lang.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fc7396390399d4bf00415ed0cbb244bdeeefc1/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fc7396390399d4bf00415ed0cbb244bdeeefc1/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=e8fc7396390399d4bf00415ed0cbb244bdeeefc1", "patch": "@@ -177,9 +177,9 @@ lang_decode_option (argc, argv)\n   if (strncmp (p, XARG, sizeof (XARG) - 1) == 0)\n     {\n       if (!(flag_emit_xref = xref_flag_value (p + sizeof (XARG) - 1)))\n-\t{\n-\t  error (\"Unkown xref format `%s'\", p + sizeof (XARG) - 1);\n-\t}\n+\terror (\"Unkown xref format `%s'\", p + sizeof (XARG) - 1);\n+      else\n+\treturn 1;\n     }\n #undef XARG\n \n@@ -221,6 +221,7 @@ lang_decode_option (argc, argv)\n       flag_redundant = 1;\n       flag_not_overriding = 1;\n       flag_static_local_jdk1_1 = 1;\n+      return 1;\n     }\n \n   if (strcmp (p, \"-MD\") == 0)"}, {"sha": "8774576ddc325f6d99a01d4f7ec28ab3737c8141", "filename": "gcc/java/parse.y", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fc7396390399d4bf00415ed0cbb244bdeeefc1/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fc7396390399d4bf00415ed0cbb244bdeeefc1/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=e8fc7396390399d4bf00415ed0cbb244bdeeefc1", "patch": "@@ -5488,7 +5488,8 @@ source_end_java_method ()\n \n   /* Generate function's code */\n   if (BLOCK_EXPR_BODY (DECL_FUNCTION_BODY (fndecl))\n-      && ! flag_emit_class_files)\n+      && ! flag_emit_class_files\n+      && ! flag_emit_xref)\n     expand_expr_stmt (BLOCK_EXPR_BODY (DECL_FUNCTION_BODY (fndecl)));\n \n   /* pop out of its parameters */\n@@ -5497,7 +5498,7 @@ source_end_java_method ()\n   BLOCK_SUPERCONTEXT (DECL_INITIAL (fndecl)) = fndecl;\n \n   /* Generate rtl for function exit.  */\n-  if (! flag_emit_class_files)\n+  if (! flag_emit_class_files && ! flag_emit_xref)\n     {\n       lineno = DECL_SOURCE_LINE_LAST (fndecl);\n       /* Emit catch-finally clauses */\n@@ -6091,7 +6092,7 @@ resolve_expression_name (id, orig)\n \t      /* Otherwise build what it takes to access the field */\n \t      decl = build_field_ref ((fs ? NULL_TREE : current_this),\n \t\t\t\t      current_class, name);\n-\t      if (fs && !flag_emit_class_files)\n+\t      if (fs && !flag_emit_class_files && !flag_emit_xref)\n \t\tdecl = build_class_init (current_class, decl);\n \t      /* We may be asked to save the real field access node */\n \t      if (orig)\n@@ -6140,7 +6141,7 @@ resolve_field_access (qual_wfl, field_decl, field_type)\n \n   /* Resolve the LENGTH field of an array here */\n   if (DECL_NAME (decl) == length_identifier_node && TYPE_ARRAY_P (type_found)\n-      && ! flag_emit_class_files)\n+      && ! flag_emit_class_files && ! flag_emit_xref)\n     {\n       tree length = build_java_array_length_access (where_found);\n       field_ref =\n@@ -6169,7 +6170,8 @@ resolve_field_access (qual_wfl, field_decl, field_type)\n \t\t\t\t     type_found, DECL_NAME (decl));\n       if (field_ref == error_mark_node)\n \treturn error_mark_node;\n-      if (is_static && !static_final_found && !flag_emit_class_files)\n+      if (is_static && !static_final_found \n+\t  && !flag_emit_class_files && !flag_emit_xref)\n \t{\n \t  field_ref = build_class_init (type_found, field_ref);\n \t  /* If the static field was identified by an expression that\n@@ -7011,7 +7013,7 @@ patch_invoke (patch, method, args)\n \tTREE_TYPE (TREE_VALUE (ta)) != TREE_VALUE (t))\n       TREE_VALUE (ta) = convert (TREE_VALUE (t), TREE_VALUE (ta));\n   \n-  if (flag_emit_class_files)\n+  if (flag_emit_class_files || flag_emit_xref)\n     func = method;\n   else\n     {\n@@ -7057,7 +7059,7 @@ patch_invoke (patch, method, args)\n     {\n       tree class = DECL_CONTEXT (method);\n       tree c1, saved_new, size, new;\n-      if (flag_emit_class_files)\n+      if (flag_emit_class_files || flag_emit_xref)\n \t{\n \t  TREE_TYPE (patch) = build_pointer_type (class);\n \t  return patch;\n@@ -8654,6 +8656,7 @@ patch_assignment (node, wfl_op1, wfl_op2)\n \n   /* 10.10: Array Store Exception runtime check */\n   if (!flag_emit_class_files\n+      && !flag_emit_xref\n       && lvalue_from_array \n       && JREFERENCE_TYPE_P (TYPE_ARRAY_ELEMENT (lhs_type))\n       && !CLASS_FINAL (TYPE_NAME (GET_SKIP_TYPE (rhs_type))))"}, {"sha": "935378413c4e8913ff48f094fdf3dd867b229985", "filename": "gcc/java/xref.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fc7396390399d4bf00415ed0cbb244bdeeefc1/gcc%2Fjava%2Fxref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fc7396390399d4bf00415ed0cbb244bdeeefc1/gcc%2Fjava%2Fxref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fxref.c?ref=e8fc7396390399d4bf00415ed0cbb244bdeeefc1", "patch": "@@ -40,7 +40,8 @@ static xref_flag_table xref_table [] = {\n \n /* Decode an xref flag value. Return 0 if the flag wasn't found. */\n \n-int xref_flag_value (flag)\n+int\n+xref_flag_value (flag)\n      char *flag;\n {\n   int i;\n@@ -50,6 +51,14 @@ int xref_flag_value (flag)\n   return 0;\n }\n \n+void\n+xref_set_data (flag, data)\n+     int flag;\n+     void *data;\n+{\n+  xref_table [flag-1].data = data;\n+}\n+\n /* Branch to the right xref \"back-end\".  */\n \n void"}, {"sha": "e3901fea628e37f6b0aa87e0f5a3f6b1ef0cdb62", "filename": "gcc/java/xref.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fc7396390399d4bf00415ed0cbb244bdeeefc1/gcc%2Fjava%2Fxref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fc7396390399d4bf00415ed0cbb244bdeeefc1/gcc%2Fjava%2Fxref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fxref.h?ref=e8fc7396390399d4bf00415ed0cbb244bdeeefc1", "patch": "@@ -26,6 +26,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n /* Exported functions. */\n int xref_flag_value PROTO ((char *));\n void expand_xref PROTO ((tree));\n+void xref_set_data PROTO ((int, void *));\n \n /* flag_emit_xref range of possible values. */\n \n@@ -39,4 +40,7 @@ typedef struct {\n   char *key;\t\t\t         /* Activator in -fxref=<key>  */\n   void (*expand) PROTO ((FILE *, tree)); /* Function to write xrefs out */\n   FILE *fp;\t\t\t         /* fp to use during the call.  */\n+  void *data;\t\t\t         /* Placeholder for additional data */\n } xref_flag_table;\n+\n+#define XREF_GET_DATA(FLAG, T) ((T)xref_table [(FLAG)-1].data)"}]}