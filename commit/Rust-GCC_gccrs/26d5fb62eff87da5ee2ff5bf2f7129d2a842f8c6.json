{"sha": "26d5fb62eff87da5ee2ff5bf2f7129d2a842f8c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZkNWZiNjJlZmY4N2RhNWVlMmZmNWJmMmY3MTI5ZDJhODQyZjhjNg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-17T06:30:05Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-17T06:30:05Z"}, "message": "[multiple changes]\n\n2014-07-17  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Minor comment updates.\n\n2014-07-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_util.adb (Make_Explicit_Dereference): If the expression\n\tbeing dereferenced is a generalized indexing, reset the overloaded\n\tflag on the generalized indexing call, consistent with the\n\tresetting of the flag on the original indexed component.\n\n2014-07-17  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_ugn.texi: Document advise not to mix -gnatV? and\n\toptimization.\n\nFrom-SVN: r212723", "tree": {"sha": "800e26eda8888c1d85b11cebeb89151b3e49be65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/800e26eda8888c1d85b11cebeb89151b3e49be65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26d5fb62eff87da5ee2ff5bf2f7129d2a842f8c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d5fb62eff87da5ee2ff5bf2f7129d2a842f8c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26d5fb62eff87da5ee2ff5bf2f7129d2a842f8c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26d5fb62eff87da5ee2ff5bf2f7129d2a842f8c6/comments", "author": null, "committer": null, "parents": [{"sha": "c61ef4169e502c5b67306f3b32cf463e55309d6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61ef4169e502c5b67306f3b32cf463e55309d6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c61ef4169e502c5b67306f3b32cf463e55309d6e"}], "stats": {"total": 68, "additions": 63, "deletions": 5}, "files": [{"sha": "249ab16da7bf01f90b208b7ce3a1a3d05a670023", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d5fb62eff87da5ee2ff5bf2f7129d2a842f8c6/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d5fb62eff87da5ee2ff5bf2f7129d2a842f8c6/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=26d5fb62eff87da5ee2ff5bf2f7129d2a842f8c6", "patch": "@@ -1,3 +1,42 @@\n+2014-07-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Minor comment updates.\n+\n+2014-07-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Make_Explicit_Dereference): If the expression\n+\tbeing dereferenced is a generalized indexing, reset the overloaded\n+\tflag on the generalized indexing call, consistent with the\n+\tresetting of the flag on the original indexed component.\n+\n+2014-07-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_ugn.texi: Document advise not to mix -gnatV? and\n+\toptimization.\n+\n+2014-07-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.adb (Insert_Valid_Check): Don't insist on a name\n+\tfor the prefix when we make calls to Force_Evaluation and\n+\tDuplicate_Subexpr_No_Checks.\n+\t* exp_util.adb (Is_Volatile_Reference): Handle all cases properly\n+\t(Remove_Side_Effects): Handle all volatile references right\n+\t(Side_Effect_Free): Volatile reference is never side effect free\n+\t* sinfo.ads (N_Attribute_Reference): Add comments explaining\n+\tthat in the tree, the prefix can be a general expression.\n+\n+2014-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Contract,\n+\tAnalyze_Subprogram_Contract): Add comments on SPARK_Mode save/restore.\n+\t* sem_ch7.adb (Analyze_Package_Body_Contract,\n+\tAnalyze_Package_Contract): Add comments on SPARK_Mode save/restore.\n+\n+2014-07-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch7.ads, exp_util.ads: Document Insert_Action_After,\n+\tStore_After_Actions_In_Scope.\n+\n 2014-07-17  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_aux.ads: Minor comment addition."}, {"sha": "2705d786a7f47d757791ae489e5c590e3f50017f", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d5fb62eff87da5ee2ff5bf2f7129d2a842f8c6/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d5fb62eff87da5ee2ff5bf2f7129d2a842f8c6/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=26d5fb62eff87da5ee2ff5bf2f7129d2a842f8c6", "patch": "@@ -2437,7 +2437,7 @@ This pragma is now obsolete and, other than generating a warning if warnings\n on obsolescent features are enabled, is completely ignored.\n It used to be required to ensure compatibility with C++, but\n is no longer required for that purpose because GNAT generates\n-the same object layout than the G++ compiler by default.\n+the same object layout as the G++ compiler by default.\n \n See @ref{Interfacing to C++} for related information.\n "}, {"sha": "d635400eef4211b318b6d7e7c4ac176c4cfc5b7f", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d5fb62eff87da5ee2ff5bf2f7129d2a842f8c6/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d5fb62eff87da5ee2ff5bf2f7129d2a842f8c6/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=26d5fb62eff87da5ee2ff5bf2f7129d2a842f8c6", "patch": "@@ -6079,7 +6079,11 @@ The @option{-gnatVa} may be used to enable additional validity checks,\n which are not required by the RM. These checks are often very\n expensive (which is why the RM does not require them). These checks\n are useful in tracking down uninitialized variables, but they are\n-not usually recommended for production builds.\n+not usually recommended for production builds, and in particular\n+we do not recommend using these extra validity checking options in\n+combination with optimization, since this can confuse the optimizer.\n+If performance is a consideration, leading to the need to optimize,\n+then the validity checking options should not be used.\n \n The other @option{-gnatV^@var{x}^^} switches below allow finer-grained\n control; you can enable whichever validity checks you desire. However,\n@@ -6820,7 +6824,8 @@ that assumption is wrong.\n \n The checks subject to suppression include all the checks defined by\n the Ada standard, the additional implementation defined checks\n-@code{Alignment_Check}, @code{Atomic_Synchronization}, and\n+@code{Alignment_Check}, @code{Atomic_Synchronization},\n+@code{Duplicated_Tag_Check}, @code{Predicate_Check}, and\n @code{Validity_Check}, as well as any checks introduced using\n @code{pragma Check_Name}.\n "}, {"sha": "0639e97259c8e38ef3e48b670ccc4a5d3962ab53", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26d5fb62eff87da5ee2ff5bf2f7129d2a842f8c6/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26d5fb62eff87da5ee2ff5bf2f7129d2a842f8c6/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=26d5fb62eff87da5ee2ff5bf2f7129d2a842f8c6", "patch": "@@ -1367,6 +1367,17 @@ package body Sem_Util is\n       end if;\n \n       Set_Is_Overloaded (Expr, False);\n+\n+      --  The expression will often be a generalized indexing that yields a\n+      --  container element that is then dereferenced, in which case the\n+      --  generalized indexing call is also non-overloaded.\n+\n+      if Nkind (Expr) = N_Indexed_Component\n+        and then Present (Generalized_Indexing (Expr))\n+      then\n+         Set_Is_Overloaded (Generalized_Indexing (Expr), False);\n+      end if;\n+\n       Rewrite (Expr,\n         Make_Explicit_Dereference (Loc,\n           Prefix =>\n@@ -11872,8 +11883,11 @@ package body Sem_Util is\n                return Is_Variable_Prefix (Prefix (Orig_Node));\n \n             when N_Selected_Component =>\n-               return Is_Variable_Prefix (Prefix (Orig_Node))\n-                 and then Is_Variable (Selector_Name (Orig_Node));\n+               return (Is_Variable (Selector_Name (Orig_Node))\n+                        and then Is_Variable_Prefix (Prefix (Orig_Node)))\n+                 or else\n+                   (Nkind (N) = N_Expanded_Name\n+                     and then Scope (Entity (N)) = Entity (Prefix (N)));\n \n             --  For an explicit dereference, the type of the prefix cannot\n             --  be an access to constant or an access to subprogram."}]}