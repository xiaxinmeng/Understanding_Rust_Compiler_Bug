{"sha": "663216865f55ee324407cb57d2959d500111a5de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYzMjE2ODY1ZjU1ZWUzMjQ0MDdjYjU3ZDI5NTlkNTAwMTExYTVkZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-01T06:21:12Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-01T06:21:12Z"}, "message": "Comment fixes.\n\nFrom-SVN: r2012", "tree": {"sha": "5e261c29d331c43d6deb8603631ab8ac45cb15ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e261c29d331c43d6deb8603631ab8ac45cb15ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/663216865f55ee324407cb57d2959d500111a5de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/663216865f55ee324407cb57d2959d500111a5de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/663216865f55ee324407cb57d2959d500111a5de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/663216865f55ee324407cb57d2959d500111a5de/comments", "author": null, "committer": null, "parents": [{"sha": "c7ee7249fc2b766bd807229b10330969da04a45a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ee7249fc2b766bd807229b10330969da04a45a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7ee7249fc2b766bd807229b10330969da04a45a"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "b29ec94709fcf0b1f5469df416dc72b71a1ea6dc", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/663216865f55ee324407cb57d2959d500111a5de/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/663216865f55ee324407cb57d2959d500111a5de/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=663216865f55ee324407cb57d2959d500111a5de", "patch": "@@ -732,14 +732,15 @@ struct tree_type\n #define DECL_INCOMING_RTL(NODE) ((NODE)->decl.saved_insns.r)\n /* For FUNCTION_DECL, if it is inline, holds the saved insn chain.  */\n #define DECL_SAVED_INSNS(NODE) ((NODE)->decl.saved_insns.r)\n-/* For FUNCTION_DECL for built-in function.  */\n+/* For FUNCTION_DECL, if it is inline,\n+   holds the size of the stack frame, as an integer.  */\n+#define DECL_FRAME_SIZE(NODE) ((NODE)->decl.frame_size)\n+/* For FUNCTION_DECL, if it is built-in,\n+   this identifies which built-in operation it is.  */\n #define DECL_FUNCTION_CODE(NODE) \\\n  ((enum built_in_function) (NODE)->decl.frame_size)\n #define DECL_SET_FUNCTION_CODE(NODE,VAL) \\\n  ((NODE)->decl.frame_size = (int) (VAL))\n-/* For FUNCTION_DECL, if it is inline,\n-   holds the size of the stack frame, as an integer.  */\n-#define DECL_FRAME_SIZE(NODE) ((NODE)->decl.frame_size)\n /* For a FIELD_DECL, holds the size of the member as an integer.  */\n #define DECL_FIELD_SIZE(NODE) ((NODE)->decl.saved_insns.i)\n \n@@ -887,7 +888,8 @@ struct tree_decl\n   struct rtx_def *rtl;\t/* acts as link to register transfer language\n \t\t\t\t   (rtl) info */\n   /* For a FUNCTION_DECL, if inline, this is the size of frame needed.\n-     If built-in, this is the code for which built-in function.  */\n+     If built-in, this is the code for which built-in function.\n+     For other kinds of decls, this is DECL_ALIGN.  */\n   int frame_size;\n   /* For FUNCTION_DECLs: points to insn that constitutes its definition\n      on the permanent obstack.  For any other kind of decl, this is the"}]}