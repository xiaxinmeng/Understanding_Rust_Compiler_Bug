{"sha": "31fde973e5cb886dca17e61b84a72a26a81487ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFmZGU5NzNlNWNiODg2ZGNhMTdlNjFiODRhNzJhMjZhODE0ODdhZA==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2019-08-20T09:50:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-20T09:50:14Z"}, "message": "[Ada] Minor reformattings\n\n2019-08-20  Gary Dismukes  <dismukes@adacore.com>\n\ngcc/ada/\n\n\t* ali.adb, ali.ads, aspects.adb, checks.ads, checks.adb,\n\tdoc/gnat_rm/implementation_defined_pragmas.rst,\n\tdoc/gnat_ugn/building_executable_programs_with_gnat.rst,\n\teinfo.ads, exp_aggr.adb, exp_ch11.adb, exp_ch3.ads, exp_ch4.adb,\n\texp_disp.adb, inline.adb, libgnat/a-locale.ads,\n\tlibgnat/s-soflin.ads, par_sco.adb, repinfo.adb, sem_ch5.adb,\n\tsem_disp.adb, sem_elab.adb, sem_eval.adb, sem_spark.adb,\n\tsem_spark.ads, sinfo.ads: Minor reformattings, typo fixes and\n\tand rewordings.\n\nFrom-SVN: r274737", "tree": {"sha": "7ed08e749f75bffe5538ea1f8d57b83b025725cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ed08e749f75bffe5538ea1f8d57b83b025725cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31fde973e5cb886dca17e61b84a72a26a81487ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31fde973e5cb886dca17e61b84a72a26a81487ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31fde973e5cb886dca17e61b84a72a26a81487ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31fde973e5cb886dca17e61b84a72a26a81487ad/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d3e80186744f894702d2f618a78eae0a2c1d33c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d3e80186744f894702d2f618a78eae0a2c1d33c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d3e80186744f894702d2f618a78eae0a2c1d33c"}], "stats": {"total": 182, "additions": 94, "deletions": 88}, "files": [{"sha": "608eacb41afc8fa05e3de7efab7b56caa58f9a68", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -1,3 +1,15 @@\n+2019-08-20  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* ali.adb, ali.ads, aspects.adb, checks.ads, checks.adb,\n+\tdoc/gnat_rm/implementation_defined_pragmas.rst,\n+\tdoc/gnat_ugn/building_executable_programs_with_gnat.rst,\n+\teinfo.ads, exp_aggr.adb, exp_ch11.adb, exp_ch3.ads, exp_ch4.adb,\n+\texp_disp.adb, inline.adb, libgnat/a-locale.ads,\n+\tlibgnat/s-soflin.ads, par_sco.adb, repinfo.adb, sem_ch5.adb,\n+\tsem_disp.adb, sem_elab.adb, sem_eval.adb, sem_spark.adb,\n+\tsem_spark.ads, sinfo.ads: Minor reformattings, typo fixes and\n+\tand rewordings.\n+\n 2019-08-20  Dmitriy Anisimkov  <anisimko@adacore.com>\n \n \t* adaint.c (__gnat_to_gm_time): On _WIN32, don't round time up"}, {"sha": "8d1d54a90b912713d1723477b57de8ee28675002", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -649,7 +649,7 @@ package body ALI is\n       Xref.Init;\n       Xref_Section.Init;\n \n-      --  Add dummy zero'th item in Linker_Options and Notes for sort calls\n+      --  Add dummy zeroth item in Linker_Options and Notes for sort calls\n \n       Linker_Options.Increment_Last;\n       Notes.Increment_Last;"}, {"sha": "5e2ec715183e299681014dcb3718769e8d450ba0", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -727,9 +727,9 @@ package ALI is\n       --  but before the entries from the run-time.\n    end record;\n \n-   --  The indexes of active entries in this table range from 1 to\n-   --  the value of Linker_Options.Last. The zero'th element is for\n-   --  convenience if the table needs to be sorted.\n+   --  The indexes of active entries in this table range from 1 to the value of\n+   --  Linker_Options.Last. The zeroth element is for convenience if the table\n+   --  needs to be sorted.\n \n    package Linker_Options is new Table.Table (\n      Table_Component_Type => Linker_Option_Record,\n@@ -765,9 +765,9 @@ package ALI is\n       --  location to the last character on the line.\n    end record;\n \n-   --  The indexes of active entries in this table range from 1 to the\n-   --  value of Notes.Last. The zero'th element is for convenience if\n-   --  the table needs to be sorted.\n+   --  The indexes of active entries in this table range from 1 to the value of\n+   --  Notes.Last. The zeroth element is for convenience if the table needs to\n+   --  be sorted.\n \n    package Notes is new Table.Table (\n      Table_Component_Type => Notes_Record,"}, {"sha": "3b8b7c4ec99c229108469807e6df11b18a1e6c97", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -226,8 +226,8 @@ package body Aspects is\n          end if;\n \n          if Is_Private_Type (Owner)\n-            and then Present (Full_View (Owner))\n-            and then not Operational_Aspect (A)\n+           and then Present (Full_View (Owner))\n+           and then not Operational_Aspect (A)\n          then\n             Owner := Full_View (Owner);\n          end if;"}, {"sha": "61cabedacb6bba0977006fed599d3c08b73e966f", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -2471,7 +2471,7 @@ package body Checks is\n         (Formal     : Entity_Id;\n          Prag_Nam   : Name_Id;\n          For_Result : Boolean := False);\n-      --  Add a single 'Valid[_Scalar] check which verifies the initialization\n+      --  Add a single 'Valid[_Scalars] check which verifies the initialization\n       --  of Formal. Prag_Nam denotes the pre or post condition pragma name.\n       --  Set flag For_Result when to verify the result of a function.\n "}, {"sha": "9bf29081764078840d7947df71f92e46dea03a80", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -161,7 +161,7 @@ package Checks is\n \n    procedure Activate_Range_Check (N : Node_Id);\n    pragma Inline (Activate_Range_Check);\n-   --  Sets Do_Range_Check flag in node N, and handles possible local raise\n+   --  Sets Do_Range_Check flag in node N, and handles possible local raise.\n    --  Always call this routine rather than calling Set_Do_Range_Check to\n    --  set an explicit value of True, to ensure handling the local raise case.\n "}, {"sha": "91c2d33568874027ccef3ac963e05392c9a10456", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -380,9 +380,9 @@ Syntax:\n \n   pragma Aggregate_Individually_Assign;\n \n-Where possible GNAT will store the binary representation of a record aggregate\n+Where possible, GNAT will store the binary representation of a record aggregate\n in memory for space and performance reasons. This configuration pragma changes\n-this behaviour so that record aggregates are instead always converted into\n+this behavior so that record aggregates are instead always converted into\n individual assignment statements.\n \n "}, {"sha": "6f1345254625fac0b58a97bc603a4b85352af4dd", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -4796,7 +4796,7 @@ checks to be performed. The following checks are defined:\n \n   The set of style check switches is set to match that used by the GNAT sources.\n   This may be useful when developing code that is eventually intended to be\n-  incorporated into GNAT. Currently this is equivalent to :switch:`-gnatwydISux`)\n+  incorporated into GNAT. Currently this is equivalent to :switch:`-gnatyydISux`)\n   but additional style switches may be added to this set in the future without\n   advance notice.\n "}, {"sha": "e93a837b82e7478e82d73205cad8b892a44b4567", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -663,8 +663,8 @@ package Einfo is\n --       In that case, this field points to that subtype.\n --\n --       For E_Class_Wide_Subtype, the presence of Equivalent_Type overrides\n---       this field. Note that this field ONLY appears in subtype entries, not\n---       in type entries, it is not defined, and it is an error to reference\n+--       this field. Note that this field ONLY appears in subtype entities, not\n+--       in type entities, it is not defined, and it is an error to reference\n --       Cloned_Subtype in an E_Record_Type or E_Class_Wide_Type entity.\n \n --    Comes_From_Source\n@@ -915,7 +915,7 @@ package Einfo is\n --       depends on a private type.\n \n --    Derived_Type_Link (Node31)\n---       Defined in all type and subtype entries. Set in a base type if\n+--       Defined in all type and subtype entities. Set in a base type if\n --       a derived type declaration is encountered which derives from\n --       this base type or one of its subtypes, and there are already\n --       primitive operations declared. In this case, it references the\n@@ -1228,7 +1228,7 @@ package Einfo is\n --       initial value). See Exp_Util.Expand_Class_Wide_Subtype for further\n --       details. For E_Exception_Type, this points to the record containing\n --       the data necessary to represent exceptions (for further details, see\n---       System.Standard_Library. For access_to_protected subprograms, it\n+--       System.Standard_Library). For access to protected subprograms, it\n --       denotes a record that holds pointers to the operation and to the\n --       protected object. For remote Access_To_Subprogram types, it denotes\n --       the record that is the fat pointer representation of an RAST.\n@@ -1616,7 +1616,7 @@ package Einfo is\n --       set, signalling that Freeze.Inherit_Delayed_Rep_Aspects must be called\n --       at the freeze point of the derived type.\n \n---    Has_DIC (syntherized)\n+--    Has_DIC (synthesized)\n --       Defined in all type entities. Set for a private type and its full view\n --       when the type is subject to pragma Default_Initial_Condition (DIC), or\n --       when the type inherits a DIC pragma from a parent type.\n@@ -1952,7 +1952,7 @@ package Einfo is\n --       Unmodified and Unreferenced pragmas.\n \n --    Has_Pragma_Unused (Flag294)\n---       Defined in all entries. Set if a valid pragma Unused applies to a\n+--       Defined in all entities. Set if a valid pragma Unused applies to a\n --       variable or entity, indicating that warnings should not be given if\n --       it is never modified or referenced. Note: This pragma is exactly\n --       equivalent Unmodified and Unreference combined.\n@@ -3327,7 +3327,7 @@ package Einfo is\n --       frozen. If set it indicates that the representation is known to be\n --       unsigned (i.e. that no negative values appear in the range). This is\n --       normally just a reflection of the lower bound of the subtype or base\n---       type, but there is one case in which the setting is non-obvious,\n+--       type, but there is one case in which the setting is not obvious,\n --       namely the case of an unsigned subtype of a signed type from which\n --       a further subtype is obtained using variable bounds. This further\n --       subtype is still unsigned, but this cannot be determined by looking"}, {"sha": "c3eba3c3f9334ba2181b6acd50821326beaa4b43", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -7478,7 +7478,7 @@ package body Exp_Aggr is\n          return;\n       end if;\n \n-      --  If the pramga Aggregate_Individually_Assign is set always convert to\n+      --  If the pramga Aggregate_Individually_Assign is set, always convert to\n       --  assignments.\n \n       if Aggregate_Individually_Assign then"}, {"sha": "d45cb4507aad1d67b4cbbe0e3ab244bdf7453f81", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -63,10 +63,9 @@ package body Exp_Ch11 is\n    --  N is the node on which the warning is placed.\n \n    procedure Warn_If_No_Propagation (N : Node_Id);\n-   --  Called for an exception raise that is not a local raise (and thus\n-   --  cannot be optimized to a goto). Issues warning if\n-   --  No_Exception_Propagation restriction is set.\n-   --  N is the node for the raise or equivalent call.\n+   --  Called for an exception raise that is not a local raise (and thus cannot\n+   --  be optimized to a goto). Issues warning if No_Exception_Propagation\n+   --  restriction is set. N is the node for the raise or equivalent call.\n \n    ---------------------------\n    -- Expand_At_End_Handler --"}, {"sha": "197c053b5c2e3ac278aca7286ac5cf65bd8500da", "filename": "gcc/ada/exp_ch3.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fexp_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fexp_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.ads?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -102,10 +102,10 @@ package Exp_Ch3 is\n      (Typ  : Entity_Id;\n       N    : Node_Id;\n       Size : Uint := No_Uint) return Node_Id;\n-   --  Build an expression which represents the required initial value of type\n+   --  Build an expression that represents the required initial value of type\n    --  Typ for which predicate Needs_Simple_Initialization is True. N is a node\n-   --  whose source location used in the construction of the expression. Size\n-   --  is utilized as follows:\n+   --  whose source location is used in the construction of the expression.\n+   --  Size is used as follows:\n    --\n    --    * If the size of the object to be initialized it is known, it should\n    --      be passed to the routine.\n@@ -115,7 +115,7 @@ package Exp_Ch3 is\n    --\n    --  The object size is needed to prepare a known invalid value for use by\n    --  Normalize_Scalars. A call to this routine where Typ denotes a scalar\n-   --  type is only valid when Normalize_Scalars or Initialize_Scalars is\n+   --  type is valid only when Normalize_Scalars or Initialize_Scalars is\n    --  active, or if N is the node for a 'Invalid_Value attribute node.\n \n    procedure Init_Secondary_Tags"}, {"sha": "f28deac9b47f8f8547866acbcc65084367202c76", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -1852,7 +1852,7 @@ package body Exp_Ch4 is\n                     Statements => New_List (Loop_Stm)));\n \n          --  If no separate indexes, return loop statement with explicit\n-         --  iteration scheme on its own\n+         --  iteration scheme on its own.\n \n          else\n             Loop_Stm :=\n@@ -2757,7 +2757,7 @@ package body Exp_Ch4 is\n       --  The J'th entry in an expression node that represents the total length\n       --  of operands 1 through J. It is either an integer literal node, or a\n       --  reference to a constant entity with the right value, so it is fine\n-      --  to just do a Copy_Node to get an appropriate copy. The extra zero'th\n+      --  to just do a Copy_Node to get an appropriate copy. The extra zeroth\n       --  entry always is set to zero. The length is of type Artyp.\n \n       Low_Bound : Node_Id;\n@@ -4421,7 +4421,7 @@ package body Exp_Ch4 is\n \n    begin\n       --  Warn on the presence of an allocator of an anonymous access type when\n-      --  enabled except when its an object declaration at library level.\n+      --  enabled, except when it's an object declaration at library level.\n \n       if Warn_On_Anonymous_Allocators\n         and then Ekind (PtrT) = E_Anonymous_Access_Type\n@@ -11310,7 +11310,7 @@ package body Exp_Ch4 is\n          end if;\n \n          --  Nothing to do if expression was rewritten into a float-to-float\n-         --  conversion, since this kind of conversions is handled elsewhere.\n+         --  conversion, since this kind of conversion is handled elsewhere.\n \n          if Is_Floating_Point_Type (Etype (Expr))\n            and then Is_Floating_Point_Type (Target_Type)"}, {"sha": "640d205a4a4cc86ea333d6ab982a55c6e2a5c1a4", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -730,7 +730,7 @@ package body Exp_Disp is\n \n          --  If the dispatching call appears in the same scope as the\n          --  declaration of the dispatching subprogram (for example in\n-         --  the expression of a local expression function) the prec.\n+         --  the expression of a local expression function), the spec\n          --  has not been analyzed yet, in which case we use the Chars\n          --  field to recognize intended occurrences of the formals.\n \n@@ -746,9 +746,7 @@ package body Exp_Disp is\n                F := First_Formal (Subp);\n                A := First_Actual (Call_Node);\n \n-               if Present (Entity (N))\n-                 and then Is_Formal (Entity (N))\n-               then\n+               if Present (Entity (N)) and then Is_Formal (Entity (N)) then\n                   while Present (F) loop\n                      if F = Entity (N) then\n                         Rewrite (N, New_Copy_Tree (A));\n@@ -781,9 +779,9 @@ package body Exp_Disp is\n                      Next_Actual (A);\n                   end loop;\n \n-               --  If node is not analyzed, recognize occurrences of\n-               --  a formal by name, as would be done when resolving\n-               --  the aspect expression in the context of the subprogram.\n+               --  If the node is not analyzed, recognize occurrences of a\n+               --  formal by name, as would be done when resolving the aspect\n+               --  expression in the context of the subprogram.\n \n                elsif not Analyzed (N)\n                  and then Nkind (N) = N_Identifier"}, {"sha": "e5ecb554075ccd938a48b09f441d84bfae3ad2ab", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -635,8 +635,8 @@ package body Inline is\n             --  declares the type, and that body is visible to the back end.\n             --  Do not inline it either if it is in the main unit.\n             --  Extend the -gnatn2 processing to -gnatn1 for Inline_Always\n-            --  calls if the back-end takes care of inlining the call.\n-            --  Note that Level is in Inline_Call | Inline_Packag here.\n+            --  calls if the back end takes care of inlining the call.\n+            --  Note that Level is in Inline_Call | Inline_Package here.\n \n             elsif ((Level = Inline_Call\n                       and then Has_Pragma_Inline_Always (E)"}, {"sha": "418c41eb681ee4b1f8603418d980a3d5f541f596", "filename": "gcc/ada/libgnat/a-locale.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Flibgnat%2Fa-locale.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Flibgnat%2Fa-locale.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-locale.ads?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -20,9 +20,9 @@ package Ada.Locales is\n    pragma Remote_Types (Locales);\n \n    --  A locale identifies a geopolitical place or region and its associated\n-   --  language, which can be used to determine other\n-   --  internationalization-related characteristics. The active locale is the\n-   --  locale associated with the partition of the current task.\n+   --  language, which can be used to determine other internationalization-\n+   --  related characteristics. The active locale is the locale associated with\n+   --  the partition of the current task.\n \n    type Language_Code is new String (1 .. 3)\n       with Dynamic_Predicate =>"}, {"sha": "2125d598c2d5756a1b6eff7e7b1f85f4854d5a60", "filename": "gcc/ada/libgnat/s-soflin.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Flibgnat%2Fs-soflin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Flibgnat%2Fs-soflin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-soflin.ads?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -302,15 +302,16 @@ package System.Soft_Links is\n    --  Wrapper to the possible user specified traceback decorator to be\n    --  called during automatic output of exception data.\n \n-   --  The null value of this wrapper correspond sto the null value of the\n+   --  The null value of this wrapper corresponds to the null value of the\n    --  current actual decorator. This is ensured first by the null initial\n    --  value of the corresponding variables, and then by Set_Trace_Decorator\n    --  in g-exctra.adb.\n \n    pragma Atomic (Traceback_Decorator_Wrapper);\n    --  Since concurrent read/write operations may occur on this variable.\n-   --  See the body of Tailored_Exception_Traceback in Ada.Exceptions for\n-   --  a more detailed description of the potential problems.\n+   --  See the body of Tailored_Exception_Traceback in\n+   --  Ada.Exceptions.Exception_Data for a more detailed description of the\n+   --  potential problems.\n \n    procedure Save_Library_Occurrence (E : EOA);\n    --  When invoked, this routine saves an exception occurrence into a hidden"}, {"sha": "0fe248cb4df1df0dcf7fa4c6c56e9b58fbfdadfe", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -92,8 +92,8 @@ package body Par_SCO is\n    --  writing out the SCO information to the ALI file, we can fill in the\n    --  proper dependency numbers and file names.\n \n-   --  Note that the zero'th entry is here for convenience in sorting the\n-   --  table, the real lower bound is 1.\n+   --  Note that the zeroth entry is here for convenience in sorting the table;\n+   --  the real lower bound is 1.\n \n    package SCO_Unit_Number_Table is new Table.Table\n      (Table_Component_Type => Unit_Number_Type,"}, {"sha": "6318682f6481b383c8ada8ac5b1683004565001a", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -1818,8 +1818,8 @@ package body Repinfo is\n                    Has_Rep_Item (Ent, Name_Scalar_Storage_Order)\n                      or else SSO_Set_Low_By_Default  (Ent)\n                      or else SSO_Set_High_By_Default (Ent);\n-      --  Scalar_Storage_Order is displayed if specified explicitly\n-      --  or set by Default_Scalar_Storage_Order.\n+      --  Scalar_Storage_Order is displayed if specified explicitly or set by\n+      --  Default_Scalar_Storage_Order.\n \n    --  Start of processing for List_Scalar_Storage_Order\n "}, {"sha": "3abaa8dd83636dfef2218628b5f4461cfc3297f7", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -2234,15 +2234,14 @@ package body Sem_Ch5 is\n                It : Interp;\n \n             begin\n-               --  THe domain of iteralion must implement either the RM\n+               --  The domain of iteration must implement either the RM\n                --  iterator interface, or the SPARK Iterable aspect.\n \n                if No (Iterator) then\n-                  if No\n-                     (Find_Aspect (Etype (Iter_Name), Aspect_Iterable))\n-                  then\n-                     Error_Msg_NE (\"cannot iterate over&\",\n-                       N, Base_Type (Etype (Iter_Name)));\n+                  if No (Find_Aspect (Etype (Iter_Name), Aspect_Iterable)) then\n+                     Error_Msg_NE\n+                       (\"cannot iterate over&\",\n+                        N, Base_Type (Etype (Iter_Name)));\n                      return;\n                   end if;\n "}, {"sha": "b04b86332b15c7992bd7a50f9dfa01752c54dbdf", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -1144,12 +1144,12 @@ package body Sem_Disp is\n          --  3. Subprograms associated with stream attributes (built by\n          --     New_Stream_Subprogram)\n \n-         --  4. Wrapper built for inherited operations with inherited class-\n+         --  4. Wrappers built for inherited operations with inherited class-\n          --     wide conditions, where the conditions include calls to other\n          --     overridden primitives. The wrappers include checks on these\n          --     modified conditions. (AI12-113).\n \n-         --  5. Declarations built for subprograms without separate spec which\n+         --  5. Declarations built for subprograms without separate specs that\n          --     are eligible for inlining in GNATprove (inside\n          --     Sem_Ch6.Analyze_Subprogram_Body_Helper).\n "}, {"sha": "2dbf54da555e8f53773596ba0b1bf9afde500e50", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -15234,8 +15234,8 @@ package body Sem_Elab is\n          begin\n             --  Nothing to do for predefined primitives because they are\n             --  artifacts of tagged type expansion and cannot override source\n-            --  primitives. Nothing to do as well for inherited primitives as\n-            --  the check concerns overridding ones.\n+            --  primitives. Nothing to do as well for inherited primitives, as\n+            --  the check concerns overriding ones.\n \n             if Is_Predefined_Dispatching_Operation (Prim)\n               or else not Is_Overriding_Subprogram (Prim)"}, {"sha": "5c41642cea296e341977c98557baa76e08549bf4", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -562,9 +562,9 @@ package body Sem_Eval is\n       elsif Is_Out_Of_Range (N, Base_Type (T), Assume_Valid => True) then\n          Out_Of_Range (N);\n \n-      --  Give a warning or error on the value outside the subtype. A\n-      --  warning is omitted if the expression appears in a range that could\n-      --  be null (warnings are handled elsewhere for this case).\n+      --  Give a warning or error on the value outside the subtype. A warning\n+      --  is omitted if the expression appears in a range that could be null\n+      --  (warnings are handled elsewhere for this case).\n \n       elsif T /= Base_Type (T) and then Nkind (Parent (N)) /= N_Range then\n          if Is_In_Range (N, T, Assume_Valid => True) then\n@@ -578,8 +578,8 @@ package body Sem_Eval is\n             if CodePeer_Mode and then T = RTE (RE_Priority) then\n                Set_Do_Range_Check (N, False);\n \n-            --  Determine if the out of range violation constitutes a warning\n-            --  or an error based on context according to RM 4.9 (34/3).\n+            --  Determine if the out-of-range violation constitutes a warning\n+            --  or an error based on context, according to RM 4.9 (34/3).\n \n             elsif Nkind_In (Original_Node (N), N_Type_Conversion,\n                                                N_Qualified_Expression)\n@@ -5531,8 +5531,8 @@ package body Sem_Eval is\n          --  CodePeer mode where the target runtime may have more priorities.\n \n          elsif not CodePeer_Mode or else Etype (N) /= RTE (RE_Priority) then\n-            --  Determine if the out of range violation constitutes a warning\n-            --  or an error based on context according to RM 4.9 (34/3).\n+            --  Determine if the out-of-range violation constitutes a warning\n+            --  or an error based on context, according to RM 4.9 (34/3).\n \n             if Nkind (Original_Node (N)) = N_Type_Conversion\n               and then not Comes_From_Source (Original_Node (N))"}, {"sha": "f99dced0da39ec353fcc9b3fe2e3abf8480264ca", "filename": "gcc/ada/sem_spark.adb", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fsem_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fsem_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_spark.adb?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -1171,19 +1171,17 @@ package body Sem_SPARK is\n \n          Expr_Root := Get_Root_Object (Expr);\n \n-         --  SPARK RM 3.10(8): For an assignment statement where\n-         --  the target is a stand-alone object of an anonymous\n-         --  access-to-object type\n+         --  SPARK RM 3.10(7): For an assignment statement where the target is\n+         --  a stand-alone object of an anonymous access-to-object type.\n \n          pragma Assert (Present (Target_Root));\n \n-         --  If the type of the target is an anonymous\n-         --  access-to-constant type (an observing access type), the\n-         --  source shall be an owning access object denoted by a name\n-         --  that is not in the Moved state, and whose root object\n-         --  is not in the Moved state and is not declared at a\n-         --  statically deeper accessibility level than that of\n-         --  the target object.\n+         --  If the type of the target is an anonymous access-to-constant type\n+         --  (an observing access type), the source shall be an owning access\n+         --  object denoted by a name that is not in the Moved state, and whose\n+         --  root object is not in the Moved state and is not declared at a\n+         --  statically deeper accessibility level than that of the target\n+         --  object.\n \n          if Is_Access_Constant (Target_Typ) then\n             Perm := Get_Perm (Expr);\n@@ -1206,11 +1204,10 @@ package body Sem_SPARK is\n \n             --  ??? check accessibility level\n \n-            --  If the type of the target is an anonymous\n-            --  access-to-variable type (an owning access type), the\n-            --  source shall be an owning access object denoted by a\n-            --  name that is in the Unrestricted state, and whose root\n-            --  object is the target object itself.\n+            --  If the type of the target is an anonymous access-to-variable\n+            --  type (an owning access type), the source shall be an owning\n+            --  access object denoted by a name that is in the Unrestricted\n+            --  state, and whose root object is the target object itself.\n \n             Check_Expression (Expr, Observe);\n             Handle_Observe (Target_Root, Expr, Is_Decl);"}, {"sha": "ff9aa633ab0b93c19dc7770fb6f1da69f0a2d1a1", "filename": "gcc/ada/sem_spark.ads", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fsem_spark.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fsem_spark.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_spark.ads?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -166,8 +166,7 @@ package Sem_SPARK is\n    --  when there are violations of ownership rules.\n \n    function Is_Deep (Typ : Entity_Id) return Boolean;\n-   --  A function that can tell whether a type is deep. Returns True if the\n-   --  type passed as argument is deep.\n+   --  Returns True if the type passed as argument is deep\n \n    function Is_Traversal_Function (E : Entity_Id) return Boolean;\n "}, {"sha": "dc8280076d27e0d478133bae3b11ef7a91b750dc", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31fde973e5cb886dca17e61b84a72a26a81487ad/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=31fde973e5cb886dca17e61b84a72a26a81487ad", "patch": "@@ -2327,7 +2327,8 @@ package Sinfo is\n    --    Present in N_Extended_Return_Statement. Points to a list initially\n    --    containing a single N_Object_Declaration representing the return\n    --    object. We use a list (instead of just a pointer to the object decl)\n-   --    because Analyze wants to insert extra actions on this list.\n+   --    because Analyze wants to insert extra actions on this list, before the\n+   --    N_Object_Declaration, which always remains last on the list.\n \n    --  Rounded_Result (Flag18-Sem)\n    --    Present in N_Type_Conversion, N_Op_Divide, and N_Op_Multiply nodes."}]}