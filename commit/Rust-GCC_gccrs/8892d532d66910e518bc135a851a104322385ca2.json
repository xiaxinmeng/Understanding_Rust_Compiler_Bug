{"sha": "8892d532d66910e518bc135a851a104322385ca2", "node_id": "C_kwDOANBUbNoAKDg4OTJkNTMyZDY2OTEwZTUxOGJjMTM1YTg1MWExMDQzMjIzODVjYTI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-06T08:28:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-06T08:28:31Z"}, "message": "c++: Implement C++23 P2242R3 - Non-literal variables (and labels and gotos) in constexpr functions [PR102612]\n\nThe following patch implements C++23 P2242R3 - Non-literal variables\n(and labels and gotos) in constexpr functions.\nI think it is mostly straightforward, don't diagnose certain\nstatements/declarations just because of their presence in\nconstexpr/consteval functions, but (except for the non-literal type\nvar declarations which ought to be caught by e.g. constructor or\ndestructor call during evaluation not being constexpr and for\nlabels which are now always allowed) diagnose it during constexpr\nevaluation.\n\n2021-10-06  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/102612\ngcc/c-family/\n\t* c-cppbuiltin.c (c_cpp_builtins): For -std=c++23 predefine\n\t__cpp_constexpr to 202110L rather than 201907L.\ngcc/cp/\n\t* parser.c (cp_parser_jump_statement): Implement C++23 P2242R3.\n\tAllow goto expressions in constexpr function bodies for C++23.\n\tAdjust error message for older standards to mention it.\n\t* decl.c (start_decl): Allow static and thread_local declarations\n\tin constexpr function bodies for C++23.  Adjust error message for\n\tolder standards to mention it.\n\t* constexpr.c (ensure_literal_type_for_constexpr_object): Allow\n\tdeclarations of variables with non-literal type in constexpr function\n\tbodies for C++23.  Adjust error message for older standards to mention\n\tit.\n\t(cxx_eval_constant_expression) <case DECL_EXPR>: Diagnose declarations\n\tof initialization of static or thread_local vars.\n\t(cxx_eval_constant_expression) <case GOTO_EXPR>: Diagnose goto\n\tstatements for C++23.\n\t(potential_constant_expression_1) <case DECL_EXPR>: Swap the\n\tCP_DECL_THREAD_LOCAL_P and TREE_STATIC checks.\n\t(potential_constant_expression_1) <case LABEL_EXPR>: Allow labels for\n\tC++23.  Adjust error message for older standards to mention it.\ngcc/testsuite/\n\t* g++.dg/cpp23/feat-cxx2b.C: Expect __cpp_constexpr 202110L rather\n\tthan 201907L.\n\t* g++.dg/cpp23/constexpr-nonlit1.C: New test.\n\t* g++.dg/cpp23/constexpr-nonlit2.C: New test.\n\t* g++.dg/cpp23/constexpr-nonlit3.C: New test.\n\t* g++.dg/cpp23/constexpr-nonlit4.C: New test.\n\t* g++.dg/cpp23/constexpr-nonlit5.C: New test.\n\t* g++.dg/cpp23/constexpr-nonlit6.C: New test.\n\t* g++.dg/diagnostic/constexpr1.C: Only expect some diagnostics for\n\tc++20_down.\n\t* g++.dg/cpp1y/constexpr-label.C: Likewise.\n\t* g++.dg/cpp1y/constexpr-neg1.C: Likewise.\n\t* g++.dg/cpp2a/constexpr-try5.C: Likewise.  Adjust some expected\n\twording.\n\t* g++.dg/cpp2a/constexpr-dtor3.C: Likewise.\n\t* g++.dg/cpp2a/consteval3.C: Likewise.  Add effective target c++20\n\tand remove dg-options.", "tree": {"sha": "4de92e23189314aa0778d012923888b88a9c4a06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4de92e23189314aa0778d012923888b88a9c4a06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8892d532d66910e518bc135a851a104322385ca2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8892d532d66910e518bc135a851a104322385ca2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8892d532d66910e518bc135a851a104322385ca2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8892d532d66910e518bc135a851a104322385ca2/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f43eb7707c06e8824d07d5c87ed2019d796fa8a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f43eb7707c06e8824d07d5c87ed2019d796fa8a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f43eb7707c06e8824d07d5c87ed2019d796fa8a0"}], "stats": {"total": 394, "additions": 353, "deletions": 41}, "files": [{"sha": "60e9e05206289fe7ef2d7cf7096eb0581f28197d", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8892d532d66910e518bc135a851a104322385ca2/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8892d532d66910e518bc135a851a104322385ca2/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=8892d532d66910e518bc135a851a104322385ca2", "patch": "@@ -1052,7 +1052,8 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  cpp_define (pfile, \"__cpp_init_captures=201803L\");\n \t  cpp_define (pfile, \"__cpp_generic_lambdas=201707L\");\n \t  cpp_define (pfile, \"__cpp_designated_initializers=201707L\");\n-\t  cpp_define (pfile, \"__cpp_constexpr=201907L\");\n+\t  if (cxx_dialect <= cxx20)\n+\t    cpp_define (pfile, \"__cpp_constexpr=201907L\");\n \t  cpp_define (pfile, \"__cpp_constexpr_in_decltype=201711L\");\n \t  cpp_define (pfile, \"__cpp_conditional_explicit=201806L\");\n \t  cpp_define (pfile, \"__cpp_consteval=201811L\");\n@@ -1071,6 +1072,7 @@ c_cpp_builtins (cpp_reader *pfile)\n \t  /* Set feature test macros for C++23.  */\n \t  cpp_define (pfile, \"__cpp_size_t_suffix=202011L\");\n \t  cpp_define (pfile, \"__cpp_if_consteval=202106L\");\n+\t  cpp_define (pfile, \"__cpp_constexpr=202110L\");\n \t}\n       if (flag_concepts)\n         {"}, {"sha": "66d5221692ab6adb980e3f1e8a06d59dbbaa3d64", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 42, "deletions": 12, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8892d532d66910e518bc135a851a104322385ca2/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8892d532d66910e518bc135a851a104322385ca2/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=8892d532d66910e518bc135a851a104322385ca2", "patch": "@@ -109,14 +109,15 @@ ensure_literal_type_for_constexpr_object (tree decl)\n \t      explain_non_literal_class (type);\n \t      decl = error_mark_node;\n \t    }\n-\t  else\n+\t  else if (cxx_dialect < cxx23)\n \t    {\n \t      if (!is_instantiation_of_constexpr (current_function_decl))\n \t\t{\n \t\t  auto_diagnostic_group d;\n \t\t  error_at (DECL_SOURCE_LOCATION (decl),\n \t\t\t    \"variable %qD of non-literal type %qT in \"\n-\t\t\t    \"%<constexpr%> function\", decl, type);\n+\t\t\t    \"%<constexpr%> function only available with \"\n+\t\t\t    \"%<-std=c++2b%> or %<-std=gnu++2b%>\", decl, type);\n \t\t  explain_non_literal_class (type);\n \t\t  decl = error_mark_node;\n \t\t}\n@@ -6345,6 +6346,26 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t    r = void_node;\n \t    break;\n \t  }\n+\n+\tif (VAR_P (r)\n+\t    && (TREE_STATIC (r) || CP_DECL_THREAD_LOCAL_P (r))\n+\t    /* Allow __FUNCTION__ etc.  */\n+\t    && !DECL_ARTIFICIAL (r))\n+\t  {\n+\t    gcc_assert (cxx_dialect >= cxx23);\n+\t    if (!ctx->quiet)\n+\t      {\n+\t\tif (CP_DECL_THREAD_LOCAL_P (r))\n+\t\t  error_at (loc, \"control passes through declaration of %qD \"\n+\t\t\t\t \"with thread storage duration\", r);\n+\t\telse\n+\t\t  error_at (loc, \"control passes through declaration of %qD \"\n+\t\t\t\t \"with static storage duration\", r);\n+\t      }\n+\t    *non_constant_p = true;\n+\t    break;\n+\t  }\n+\n \tif (AGGREGATE_TYPE_P (TREE_TYPE (r))\n \t    || VECTOR_TYPE_P (TREE_TYPE (r)))\n \t  {\n@@ -7049,10 +7070,18 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       break;\n \n     case GOTO_EXPR:\n-      *jump_target = TREE_OPERAND (t, 0);\n-      gcc_assert (breaks (jump_target) || continues (jump_target)\n-\t\t  /* Allow for jumping to a cdtor_label.  */\n-\t\t  || returns (jump_target));\n+      if (breaks (&TREE_OPERAND (t, 0))\n+\t  || continues (&TREE_OPERAND (t, 0))\n+\t  /* Allow for jumping to a cdtor_label.  */\n+\t  || returns (&TREE_OPERAND (t, 0)))\n+\t*jump_target = TREE_OPERAND (t, 0);\n+      else\n+\t{\n+\t  gcc_assert (cxx_dialect >= cxx23);\n+\t  if (!ctx->quiet)\n+\t    error_at (loc, \"%<goto%> is not a constant expression\");\n+\t  *non_constant_p = true;\n+\t}\n       break;\n \n     case LOOP_EXPR:\n@@ -8736,18 +8765,18 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n       tmp = DECL_EXPR_DECL (t);\n       if (VAR_P (tmp) && !DECL_ARTIFICIAL (tmp))\n \t{\n-\t  if (TREE_STATIC (tmp))\n+\t  if (CP_DECL_THREAD_LOCAL_P (tmp))\n \t    {\n \t      if (flags & tf_error)\n \t\terror_at (DECL_SOURCE_LOCATION (tmp), \"%qD declared \"\n-\t\t\t  \"%<static%> in %<constexpr%> context\", tmp);\n+\t\t\t  \"%<thread_local%> in %<constexpr%> context\", tmp);\n \t      return false;\n \t    }\n-\t  else if (CP_DECL_THREAD_LOCAL_P (tmp))\n+\t  else if (TREE_STATIC (tmp))\n \t    {\n \t      if (flags & tf_error)\n \t\terror_at (DECL_SOURCE_LOCATION (tmp), \"%qD declared \"\n-\t\t\t  \"%<thread_local%> in %<constexpr%> context\", tmp);\n+\t\t\t  \"%<static%> in %<constexpr%> context\", tmp);\n \t      return false;\n \t    }\n \t  else if (!check_for_uninitialized_const_var\n@@ -9025,10 +9054,11 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \n     case LABEL_EXPR:\n       t = LABEL_EXPR_LABEL (t);\n-      if (DECL_ARTIFICIAL (t))\n+      if (DECL_ARTIFICIAL (t) || cxx_dialect >= cxx23)\n \treturn true;\n       else if (flags & tf_error)\n-\terror_at (loc, \"label definition is not a constant expression\");\n+\terror_at (loc, \"label definition in %<constexpr%> function only \"\n+\t\t       \"available with %<-std=c++2b%> or %<-std=gnu++2b%>\");\n       return false;\n \n     case ANNOTATE_EXPR:"}, {"sha": "2d30c790b930dd089e9d8b7e37f6c0156325e287", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8892d532d66910e518bc135a851a104322385ca2/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8892d532d66910e518bc135a851a104322385ca2/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8892d532d66910e518bc135a851a104322385ca2", "patch": "@@ -5709,17 +5709,20 @@ start_decl (const cp_declarator *declarator,\n     }\n \n   if (current_function_decl && VAR_P (decl)\n-      && DECL_DECLARED_CONSTEXPR_P (current_function_decl))\n+      && DECL_DECLARED_CONSTEXPR_P (current_function_decl)\n+      && cxx_dialect < cxx23)\n     {\n       bool ok = false;\n       if (CP_DECL_THREAD_LOCAL_P (decl))\n \terror_at (DECL_SOURCE_LOCATION (decl),\n-\t\t  \"%qD declared %<thread_local%> in %qs function\", decl,\n+\t\t  \"%qD declared %<thread_local%> in %qs function only \"\n+\t\t  \"available with %<-std=c++2b%> or %<-std=gnu++2b%>\", decl,\n \t\t  DECL_IMMEDIATE_FUNCTION_P (current_function_decl)\n \t\t  ? \"consteval\" : \"constexpr\");\n       else if (TREE_STATIC (decl))\n \terror_at (DECL_SOURCE_LOCATION (decl),\n-\t\t  \"%qD declared %<static%> in %qs function\", decl,\n+\t\t  \"%qD declared %<static%> in %qs function only available \"\n+\t\t  \"with %<-std=c++2b%> or %<-std=gnu++2b%>\", decl,\n \t\t  DECL_IMMEDIATE_FUNCTION_P (current_function_decl)\n \t\t  ? \"consteval\" : \"constexpr\");\n       else"}, {"sha": "d285a45bf7dfad18611cf98462220ff874a2fa4d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8892d532d66910e518bc135a851a104322385ca2/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8892d532d66910e518bc135a851a104322385ca2/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=8892d532d66910e518bc135a851a104322385ca2", "patch": "@@ -14176,9 +14176,11 @@ cp_parser_jump_statement (cp_parser* parser)\n \n     case RID_GOTO:\n       if (parser->in_function_body\n-\t  && DECL_DECLARED_CONSTEXPR_P (current_function_decl))\n+\t  && DECL_DECLARED_CONSTEXPR_P (current_function_decl)\n+\t  && cxx_dialect < cxx23)\n \t{\n-\t  error (\"%<goto%> in %<constexpr%> function\");\n+\t  error (\"%<goto%> in %<constexpr%> function only available with \"\n+\t\t \"%<-std=c++2b%> or %<-std=gnu++2b%>\");\n \t  cp_function_chain->invalid_constexpr = true;\n \t}\n "}, {"sha": "4994008a77b412032f68216401634293a25e84b3", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-label.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-label.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-label.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-label.C?ref=8892d532d66910e518bc135a851a104322385ca2", "patch": "@@ -4,6 +4,6 @@\n constexpr int\n f ()\n {\n-x: // { dg-error \"label definition is not a constant expression\" }\n+x: // { dg-error \"label definition in 'constexpr' function only available with\" \"\" { target c++20_down } }\n   return 42;\n }"}, {"sha": "8e9d1ea494376b4bbb6fceee4da57383fa7fbc3f", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-neg1.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-neg1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-neg1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-neg1.C?ref=8892d532d66910e518bc135a851a104322385ca2", "patch": "@@ -4,12 +4,12 @@ struct A { A(); };\n \n constexpr int f(int i) {\n   static int j = i;\t\t// { dg-error \"static\" }\n-  thread_local int l = i;\t// { dg-error \"thread_local\" }\n-  goto foo;\t\t\t// { dg-error \"goto\" }\n+  thread_local int l = i;\t// { dg-error \"thread_local\" \"\" { target c++20_down } }\n+  goto foo;\t\t\t// { dg-error \"goto\" \"\" { target c++20_down } }\n  foo:\n   asm(\"foo\");\t\t\t// { dg-error \"asm\" \"\" { target c++17_down } }\n   int k;\t\t\t// { dg-error \"uninitialized\" \"\" { target c++17_down } }\n-  A a;\t\t\t\t// { dg-error \"non-literal\" }\n+  A a;\t\t\t\t// { dg-error \"non-literal\" \"\" { target c++20_down } }\n   return i;\n }\n "}, {"sha": "c80ea38732f5a3db4e71c07692176c7aa33fbc68", "filename": "gcc/testsuite/g++.dg/cpp23/constexpr-nonlit1.C", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit1.C?ref=8892d532d66910e518bc135a851a104322385ca2", "patch": "@@ -0,0 +1,68 @@\n+// P2242R3\n+// { dg-do compile { target c++14 } }\n+\n+constexpr int\n+foo ()\n+{\n+lab:\t\t// { dg-error \"label definition in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+  return 1;\n+}\n+\n+constexpr int\n+bar (int x)\n+{\n+  if (x)\n+    goto lab;\t// { dg-error \"'goto' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+  return 1;\n+lab:\n+  return 0;\n+}\n+\n+constexpr int\n+baz (int x)\n+{\n+  if (!x)\n+    return 1;\n+  static int a;\t// { dg-error \"'a' declared 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+  return ++a;\t// { dg-error \"uninitialized variable 'a' in 'constexpr' function\" \"\" { target c++17_down } .-1 }\n+}\n+\n+constexpr int\n+qux (int x)\n+{\n+  if (!x)\n+    return 1;\n+  thread_local int a;\t// { dg-error \"'a' declared 'thread_local' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+  return ++a;\t// { dg-error \"uninitialized variable 'a' in 'constexpr' function\" \"\" { target c++17_down } .-1 }\n+}\n+\n+constexpr int\n+garply (int x)\n+{\n+  if (!x)\n+    return 1;\n+  extern thread_local int a;\t// { dg-error \"'a' declared 'thread_local' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+  return ++a;\n+}\n+\n+struct S { S (); ~S (); int s; };\t// { dg-message \"'S' is not literal because:\" \"\" { target c++20_down } }\n+\t\t\t\t\t// { dg-message \"'S' has a non-trivial destructor\" \"\" { target c++17_down } .-1 }\n+\t\t\t\t\t// { dg-message \"'S' does not have 'constexpr' destructor\" \"\" { target { c++20_only } } .-2 }\n+\n+constexpr int\n+corge (int x)\n+{\n+  if (!x)\n+    return 1;\n+  S s;\t\t\t// { dg-error \"variable 's' of non-literal type 'S' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+  return 0;\n+}\n+\n+#if __cpp_constexpr >= 202110L\n+static_assert (foo ());\n+static_assert (bar (0));\n+static_assert (baz (0));\n+static_assert (qux (0));\n+static_assert (garply (0));\n+static_assert (corge (0));\n+#endif"}, {"sha": "0f7b2299e7a5fe55f49fd191dada7a6b0d8689f0", "filename": "gcc/testsuite/g++.dg/cpp23/constexpr-nonlit2.C", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit2.C?ref=8892d532d66910e518bc135a851a104322385ca2", "patch": "@@ -0,0 +1,54 @@\n+// P2242R3\n+// { dg-do compile }\n+// { dg-options \"-std=c++2b\" }\n+\n+constexpr int\n+foo ()\n+{\n+lab:\n+  return 1;\n+}\n+\n+constexpr int\n+bar (int x)\n+{\n+  if (x)\n+    goto lab;\t\t// { dg-error \"'goto' is not a constant expression\" }\n+  return 1;\n+lab:\n+  return 0;\n+}\n+\n+constexpr int\n+baz (int x)\n+{\n+  if (!x)\n+    return 1;\n+  static int a;\t\t// { dg-error \"control passes through declaration of 'a' with static storage duration\" }\n+  return ++a;\n+}\n+\n+constexpr int\n+qux (int x)\n+{\n+  if (!x)\n+    return 1;\n+  thread_local int a;\t// { dg-error \"control passes through declaration of 'a' with thread storage duration\" }\n+  return ++a;\n+}\n+\n+struct S { S (); ~S (); int s; };\t// { dg-message \"'S::S\\\\\\(\\\\\\)' declared here\" }\n+\n+constexpr int\n+corge (int x)\n+{\n+  if (!x)\n+    return 1;\n+  S s;\t\t\t// { dg-error \"call to non-'constexpr' function 'S::S\\\\\\(\\\\\\)'\" }\n+  return 0;\n+}\n+\n+constexpr int a = bar (1);\t// { dg-message \"in 'constexpr' expansion of\" }\n+constexpr int b = baz (1);\t// { dg-message \"in 'constexpr' expansion of\" }\n+constexpr int c = qux (1);\t// { dg-message \"in 'constexpr' expansion of\" }\n+constexpr int d = corge (1);\t// { dg-message \"in 'constexpr' expansion of\" }"}, {"sha": "3b5585dcd841c7a4f6778093b077171f5a48baf2", "filename": "gcc/testsuite/g++.dg/cpp23/constexpr-nonlit3.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit3.C?ref=8892d532d66910e518bc135a851a104322385ca2", "patch": "@@ -0,0 +1,10 @@\n+// P2242R3\n+// { dg-do compile { target c++14 } }\n+\n+constexpr int\n+foo ()\n+{\n+  goto lab;\t// { dg-error \"'goto' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+lab:\t\t// { dg-error \"'goto' is not a constant expression\" \"\" { target { c++23 } } .-1 }\n+  return 1;\n+}"}, {"sha": "e4ed2e36c3057ebdc262eb513ee116e6559fc5ee", "filename": "gcc/testsuite/g++.dg/cpp23/constexpr-nonlit4.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit4.C?ref=8892d532d66910e518bc135a851a104322385ca2", "patch": "@@ -0,0 +1,57 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++2b\" }\n+\n+int qux ();\n+\n+constexpr int\n+foo (int x)\n+{\n+  switch (x)\n+    {\n+      static int v = qux ();\n+    case 12:\n+      return 1;\n+    }\n+  return 0;\n+}\n+\n+constexpr int\n+bar (int x)\n+{\n+  switch (x)\n+    {\n+      thread_local int v = qux ();\n+    case 12:\n+      return 1;\n+    }\n+  return 0;\n+}\n+\n+constexpr int\n+baz (int x)\n+{\n+  switch (x)\n+    {\n+      static const int v = qux ();\t// { dg-message \"'v' was not initialized with a constant expression\" }\n+    case 12:\n+      return v;\n+    }\n+  return 0;\n+}\n+\n+constexpr int\n+corge (int x)\n+{\n+  switch (x)\n+    {\n+      const thread_local int v = qux ();\t// { dg-message \"'v' was not initialized with a constant expression\" }\n+    case 12:\n+      return v;\n+    }\n+  return 0;\n+}\n+\n+constexpr int a = foo (12);\n+constexpr int b = bar (12);\n+constexpr int c = baz (12);\t\t// { dg-error \"the value of 'v' is not usable in a constant expression\" }\n+constexpr int d = corge (12);\t\t// { dg-error \"the value of 'v' is not usable in a constant expression\" }"}, {"sha": "838f282c1f9421dd090e0ad7d10680d847f2daeb", "filename": "gcc/testsuite/g++.dg/cpp23/constexpr-nonlit5.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit5.C?ref=8892d532d66910e518bc135a851a104322385ca2", "patch": "@@ -0,0 +1,57 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++2b\" }\n+\n+int qux ();\n+\n+constexpr int\n+foo (int x)\n+{\n+  switch (x)\n+    {\n+      static const int v = 6;\n+    case 12:\n+      return v;\n+    }\n+  return 0;\n+}\n+\n+constexpr int\n+bar (int x)\n+{\n+  switch (x)\n+    {\n+      thread_local const int v = 7;\n+    case 12:\n+      return 7;\n+    }\n+  return 0;\n+}\n+\n+constexpr int\n+baz (int x)\n+{\n+  switch (x)\n+    {\n+      static int v = 6;\t// { dg-message \"int v' is not const\" }\n+    case 12:\n+      return v;\n+    }\n+  return 0;\n+}\n+\n+constexpr int\n+corge (int x)\n+{\n+  switch (x)\n+    {\n+      thread_local int v = 6;\t// { dg-message \"int v' is not const\" }\n+    case 12:\n+      return v;\n+    }\n+  return 0;\n+}\n+\n+constexpr int a = foo (12);\n+constexpr int b = bar (12);\n+constexpr int c = baz (12);\t\t// { dg-error \"the value of 'v' is not usable in a constant expression\" }\n+constexpr int d = corge (12);\t\t// { dg-error \"the value of 'v' is not usable in a constant expression\" }"}, {"sha": "11cb5189c85d2ae9b131dbd2da815add779aa09b", "filename": "gcc/testsuite/g++.dg/cpp23/constexpr-nonlit6.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconstexpr-nonlit6.C?ref=8892d532d66910e518bc135a851a104322385ca2", "patch": "@@ -0,0 +1,25 @@\n+// P2242R3\n+// { dg-do compile }\n+// { dg-options \"-std=c++2b\" }\n+\n+constexpr int\n+foo ()\n+{\n+  goto lab;\t\t// { dg-error \"'goto' is not a constant expression\" }\n+lab:\n+  return 1;\n+}\n+\n+constexpr int\n+bar ()\n+{\n+  static int a;\t\t// { dg-error \"'a' declared 'static' in 'constexpr' context\" }\n+  return ++a;\n+}\n+\n+constexpr int\n+baz (int x)\n+{\n+  thread_local int a;\t// { dg-error \"'a' declared 'thread_local' in 'constexpr' context\" }\n+  return ++a;\n+}"}, {"sha": "8bb3bf1f00f412a577d82cdce71414b4398fa451", "filename": "gcc/testsuite/g++.dg/cpp23/feat-cxx2b.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Ffeat-cxx2b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Ffeat-cxx2b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Ffeat-cxx2b.C?ref=8892d532d66910e518bc135a851a104322385ca2", "patch": "@@ -134,8 +134,8 @@\n \n #ifndef __cpp_constexpr\n #  error \"__cpp_constexpr\"\n-#elif __cpp_constexpr != 201907\n-#  error \"__cpp_constexpr != 201907\"\n+#elif __cpp_constexpr != 202110\n+#  error \"__cpp_constexpr != 202110\"\n #endif\n \n #ifndef __cpp_decltype_auto"}, {"sha": "8f9316411b5ad40d87304d8a3de30857cfc6da91", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval3.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval3.C?ref=8892d532d66910e518bc135a851a104322385ca2", "patch": "@@ -1,5 +1,4 @@\n-// { dg-do compile }\n-// { dg-options \"-std=c++2a\" }\n+// { dg-do compile { target c++20 } }\n \n struct S { S () : a (0), b (1) {} int a, b; };\n int f1 ();\t\t// { dg-message \"previous declaration 'int f1\\\\(\\\\)'\" }\n@@ -57,7 +56,8 @@ template consteval float f12 (float x); // { dg-error \"explicit instantiation sh\n consteval int\n f13 (int x)\n {\n-  static int a = 5;\t\t// { dg-error \"'a' declared 'static' in 'consteval' function\" }\n-  thread_local int b = 6;\t// { dg-error \"'b' declared 'thread_local' in 'consteval' function\" }\n+  static int a = 5;\t\t// { dg-error \"'a' declared 'static' in 'consteval' function only available with\" \"\" { target c++20_only } }\n+\t\t\t\t// { dg-error \"'a' declared 'static' in 'constexpr' context\" \"\" { target c++23 } .-1 }\n+  thread_local int b = 6;\t// { dg-error \"'b' declared 'thread_local' in 'consteval' function only available with\" \"\" { target c++20_only } }\n   return x;\n }"}, {"sha": "69fe9e26654f83983d5ce9d47074ee5e440396d4", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-dtor3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-dtor3.C?ref=8892d532d66910e518bc135a851a104322385ca2", "patch": "@@ -180,6 +180,6 @@ f7 ()\n constexpr int\n f8 ()\n {\n-  T t4;\t\t\t// { dg-error \"variable 't4' of non-literal type 'T' in 'constexpr' function\" }\n+  T t4;\t\t\t// { dg-error \"variable 't4' of non-literal type 'T' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n   return 0;\n }"}, {"sha": "ed5e40dff955479542ad90b1fe3e509826e62b78", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-try5.C", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-try5.C?ref=8892d532d66910e518bc135a851a104322385ca2", "patch": "@@ -5,35 +5,37 @@\n constexpr int foo ()\n try {\t\t\t// { dg-warning \"function-try-block body of 'constexpr' function only available with\" \"\" { target c++17_down } }\n   int a;\t\t// { dg-error \"uninitialized variable 'a' in 'constexpr' function\" \"\" { target c++17_down } }\n-  static double b = 1.0;// { dg-error \"'b' declared 'static' in 'constexpr' function\" }\n-  goto l;\t\t// { dg-error \"'goto' in 'constexpr' function\" }\n+  static double b = 1.0;// { dg-error \"'b' declared 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+\t\t\t// { dg-error \"'b' declared 'static' in 'constexpr' context\" \"\" { target c++23 } .-1 }\n+  goto l;\t\t// { dg-error \"'goto' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n   l:;\n   return 0;\n } catch (...) {\n   long int c;\t\t// { dg-error \"uninitialized variable 'c' in 'constexpr' function\" \"\" { target c++17_down } }\n-  static float d = 2.0f;// { dg-error \"'d' declared 'static' in 'constexpr' function\" }\n-  goto l2;\t\t// { dg-error \"'goto' in 'constexpr' function\" }\n+  static float d = 2.0f;// { dg-error \"'d' declared 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+  goto l2;\t\t// { dg-error \"'goto' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n   l2:;\n   return -1;\n }\n \n constexpr int bar ()\n {\n   int a;\t\t// { dg-error \"uninitialized variable 'a' in 'constexpr' function\" \"\" { target c++17_down } }\n-  static long double b = 3.0;// { dg-error \"'b' declared 'static' in 'constexpr' function\" }\n-  goto l;\t\t// { dg-error \"'goto' in 'constexpr' function\" }\n+  static long double b = 3.0;// { dg-error \"'b' declared 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+\t\t\t// { dg-error \"'b' declared 'static' in 'constexpr' context\" \"\" { target c++23 } .-1 }\n+  goto l;\t\t// { dg-error \"'goto' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n   l:;\n   try {\t\t\t// { dg-warning \"'try' in 'constexpr' function only available with\" \"\" { target c++17_down } }\n     short c;\t\t// { dg-error \"uninitialized variable 'c' in 'constexpr' function\" \"\" { target c++17_down } }\n-    static float d;\t// { dg-error \"'d' declared 'static' in 'constexpr' function\" }\n+    static float d;\t// { dg-error \"'d' declared 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n \t\t\t// { dg-error \"uninitialized variable 'd' in 'constexpr' function\" \"\" { target c++17_down } .-1 }\n-    goto l2;\t\t// { dg-error \"'goto' in 'constexpr' function\" }\n+    goto l2;\t\t// { dg-error \"'goto' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n     l2:;\n     return 0;\n   } catch (int) {\n     char e;\t\t// { dg-error \"uninitialized variable 'e' in 'constexpr' function\" \"\" { target c++17_down } }\n-    static int f = 5;\t// { dg-error \"'f' declared 'static' in 'constexpr' function\" }\n-    goto l3;\t\t// { dg-error \"'goto' in 'constexpr' function\" }\n+    static int f = 5;\t// { dg-error \"'f' declared 'static' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n+    goto l3;\t\t// { dg-error \"'goto' in 'constexpr' function only available with\" \"\" { target c++20_down } }\n     l3:;\n     return 1;\n   }"}, {"sha": "f2bcec6e4e16a6d7cff9a8acda6cf4a14c97f277", "filename": "gcc/testsuite/g++.dg/diagnostic/constexpr1.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fconstexpr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8892d532d66910e518bc135a851a104322385ca2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fconstexpr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fconstexpr1.C?ref=8892d532d66910e518bc135a851a104322385ca2", "patch": "@@ -1,5 +1,7 @@\n // { dg-do compile { target c++11 } }\n \n-constexpr int foo() { thread_local int i __attribute__((unused)) {}; return 1; }  // { dg-error \"40:.i. declared .thread_local.\" }\n+constexpr int foo() { thread_local int i __attribute__((unused)) {}; return 1; }  // { dg-error \"40:.i. declared .thread_local.\" \"\" { target c++20_down } }\n+// { dg-error \"40:.i. declared .thread_local. in .constexpr. context\" \"\" { target c++23 } .-1 }\n \n-constexpr int bar() { static int i __attribute__((unused)) {}; return 1; }  // { dg-error \"34:.i. declared .static.\" }\n+constexpr int bar() { static int i __attribute__((unused)) {}; return 1; }  // { dg-error \"34:.i. declared .static.\" \"\" { target c++20_down } }\n+// { dg-error \"34:.i. declared .static. in .constexpr. context\" \"\" { target c++23 } .-1 }"}]}