{"sha": "2646d0e06b170569be1da28fce1d6e2f03a15f60", "node_id": "C_kwDOANBUbNoAKDI2NDZkMGUwNmIxNzA1NjliZTFkYTI4ZmNlMWQ2ZTJmMDNhMTVmNjA", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2021-09-23T15:03:52Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2021-09-23T23:42:35Z"}, "message": "Fortran: Diagnose default-initialized pointer/allocatable dummies\n\nTS29113 changed what was then C516 in the 2010 Fortran standard (now\nC1557 in F2018) from disallowing all of pointer, allocatable, and\noptional attributes on dummy arguments to BIND(C) functions, to\ndisallowing only pointer/allocatable with default-initialization.\ngfortran was previously failing to diagnose violations of this\nconstraint.\n\n2021-09-23  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tPR fortran/101320\n\ngcc/fortran/\n\t* decl.c (gfc_verify_c_interop_param): Handle F2018 C1557,\n\taka TS29113 C516.\n\ngcc/testsuite/\n\t* gfortran.dg/c-interop/c516.f90: Remove xfails.  Add more\n\ttests.", "tree": {"sha": "5b1a43523e1b310bd5ec3df6a5dc252d5e168689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b1a43523e1b310bd5ec3df6a5dc252d5e168689"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2646d0e06b170569be1da28fce1d6e2f03a15f60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2646d0e06b170569be1da28fce1d6e2f03a15f60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2646d0e06b170569be1da28fce1d6e2f03a15f60", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2646d0e06b170569be1da28fce1d6e2f03a15f60/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5c0492b7f42ccc093f9f4385bbbc4b39dc5ffcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5c0492b7f42ccc093f9f4385bbbc4b39dc5ffcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5c0492b7f42ccc093f9f4385bbbc4b39dc5ffcb"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "b3c65b7175ba68f16b7a89cb689522336dd5d526", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2646d0e06b170569be1da28fce1d6e2f03a15f60/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2646d0e06b170569be1da28fce1d6e2f03a15f60/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=2646d0e06b170569be1da28fce1d6e2f03a15f60", "patch": "@@ -1557,6 +1557,20 @@ gfc_verify_c_interop_param (gfc_symbol *sym)\n \t\t       \"CONTIGUOUS attribute as procedure %qs is BIND(C)\",\n \t\t       sym->name, &sym->declared_at, sym->ns->proc_name->name);\n \n+\t  /* Per F2018, C1557, pointer/allocatable dummies to a bind(c)\n+\t     procedure that are default-initialized are not permitted.  */\n+\t  if ((sym->attr.pointer || sym->attr.allocatable)\n+\t      && sym->ts.type == BT_DERIVED\n+\t      && gfc_has_default_initializer (sym->ts.u.derived))\n+\t    {\n+\t      gfc_error (\"Default-initialized %s dummy argument %qs \"\n+\t\t\t \"at %L is not permitted in BIND(C) procedure %qs\",\n+\t\t\t (sym->attr.pointer ? \"pointer\" : \"allocatable\"),\n+\t\t\t sym->name, &sym->declared_at,\n+\t\t\t sym->ns->proc_name->name);\n+\t      retval = false;\n+\t    }\n+\n           /* Character strings are only C interoperable if they have a\n \t     length of 1.  However, as an argument they are also iteroperable\n \t     when passed as descriptor (which requires len=: or len=*).  */"}, {"sha": "d6a65affdb2d5183a94f479c00808810367a00c9", "filename": "gcc/testsuite/gfortran.dg/c-interop/c516.f90", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2646d0e06b170569be1da28fce1d6e2f03a15f60/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc516.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2646d0e06b170569be1da28fce1d6e2f03a15f60/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc516.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fc-interop%2Fc516.f90?ref=2646d0e06b170569be1da28fce1d6e2f03a15f60", "patch": "@@ -27,6 +27,10 @@ module m2\n \n   interface\n \n+    ! First test versions with optional attributes on the argument.\n+    ! TS29113 removed the constraint disallowing optional arguments\n+    ! that previously used to be in C516.\n+\n     ! good, no default initialization, no pointer/allocatable attribute\n     subroutine s1a (x) bind (c)\n       use m1\n@@ -52,16 +56,54 @@ subroutine s2a (x) bind (c)\n     end subroutine\n \n     ! bad, default initialization + allocatable\n-    subroutine s2b (x) bind (c)  ! { dg-error \"BIND\\\\(C\\\\)\" \"pr101320\" { xfail *-*-* } }\n+    subroutine s2b (x) bind (c)  ! { dg-error \"BIND\\\\(C\\\\)\" }\n       use m1\n       type(t2), allocatable, optional :: x\n     end subroutine\n \n     ! bad, default initialization + pointer\n-    subroutine s2c (x) bind (c)  ! { dg-error \"BIND\\\\(C\\\\)\" \"pr101320\" { xfail *-*-* } }\n+    subroutine s2c (x) bind (c)  ! { dg-error \"BIND\\\\(C\\\\)\" }\n       use m1\n       type(t2), pointer, optional :: x\n     end subroutine\n \n+    ! Now do all the same tests without the optional attribute.\n+\n+    ! good, no default initialization, no pointer/allocatable attribute\n+    subroutine s3a (x) bind (c)\n+      use m1\n+      type(t1) :: x\n+    end subroutine\n+\n+    ! good, no default initialization\n+    subroutine s3b (x) bind (c)\n+      use m1\n+      type(t1), allocatable :: x\n+    end subroutine\n+\n+    ! good, no default initialization\n+    subroutine s3c (x) bind (c)\n+      use m1\n+      type(t1), pointer :: x\n+    end subroutine\n+\n+    ! good, default initialization but no pointer/allocatable attribute\n+    subroutine s4a (x) bind (c)\n+      use m1\n+      type(t2) :: x\n+    end subroutine\n+\n+    ! bad, default initialization + allocatable\n+    subroutine s4b (x) bind (c)  ! { dg-error \"BIND\\\\(C\\\\)\" }\n+      use m1\n+      type(t2), allocatable :: x\n+    end subroutine\n+\n+    ! bad, default initialization + pointer\n+    subroutine s4c (x) bind (c)  ! { dg-error \"BIND\\\\(C\\\\)\" }\n+      use m1\n+      type(t2), pointer :: x\n+    end subroutine\n+\n   end interface\n end module"}]}