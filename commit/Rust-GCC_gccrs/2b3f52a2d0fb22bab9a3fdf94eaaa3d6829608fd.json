{"sha": "2b3f52a2d0fb22bab9a3fdf94eaaa3d6829608fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIzZjUyYTJkMGZiMjJiYWI5YTNmZGY5NGVhYWEzZDY4Mjk2MDhmZA==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2015-10-04T12:30:16Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2015-10-04T12:30:16Z"}, "message": "Fix fortran common-related error recovery ICE.\n\nUpon reverting a symbol in a common block (after throwing an error),\nthe compiler was ICEing because the symbol's common_block field was set,\nbut the symbol was not in the common block's list of symbols.\n\nFixed by both adding the symbol to the common block list and setting\nthe symbol's common_block field at the same time.\nFurthermore, the gfc_add_in_common call is delayed and its result is\nignored, so that its error messages are ignored and the compiler has\nthe opportunity to give a better error message.\nAnother gfc_add_in_common call is added later during resolution\nto emit again the missing errors.\n\n\tPR fortran/67758\ngcc/fortran/\n\t* match.c (gfc_match_common): Delay the common_block pointer\n\tassignment after error checking.\n\tDelay the call to gfc_add_in_common attribute after the handling\n\tof array specs.\n\t* resolve.c (resolve_common_vars): Call gfc_add_in_common again.\ngcc/testsuite/\n\t* gfortran.dg/common_24.f: New.\n\nFrom-SVN: r228457", "tree": {"sha": "0e37a535c2fb1ad4175640b01e0f4518a0f4ece7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e37a535c2fb1ad4175640b01e0f4518a0f4ece7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b3f52a2d0fb22bab9a3fdf94eaaa3d6829608fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b3f52a2d0fb22bab9a3fdf94eaaa3d6829608fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b3f52a2d0fb22bab9a3fdf94eaaa3d6829608fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b3f52a2d0fb22bab9a3fdf94eaaa3d6829608fd/comments", "author": null, "committer": null, "parents": [{"sha": "6dcab5071487cfb42b4414d08c517210fac94d00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dcab5071487cfb42b4414d08c517210fac94d00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dcab5071487cfb42b4414d08c517210fac94d00"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "cdf27b2e295815e3161bac970ae6704a1bf2bbef", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3f52a2d0fb22bab9a3fdf94eaaa3d6829608fd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3f52a2d0fb22bab9a3fdf94eaaa3d6829608fd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2b3f52a2d0fb22bab9a3fdf94eaaa3d6829608fd", "patch": "@@ -1,3 +1,12 @@\n+2015-10-04  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/67758\n+\t* match.c (gfc_match_common): Delay the common_block pointer\n+\tassignment after error checking.\n+\tDelay the call to gfc_add_in_common attribute after the handling\n+\tof array specs.\n+\t* resolve.c (resolve_common_vars): Call gfc_add_in_common again.\n+\n 2015-10-04  Mikael Morin  <mikael@gcc.gnu.org>\n \n \t* resolve.c (resolve_common_vars): Move access to the common\n@@ -102,7 +111,6 @@\n \n \t* resolve.c (nonscalar_typebound_assign): Fix typos in comment.\n \n-\n 2015-09-21  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/67615"}, {"sha": "2363004208bb4f700dbcc321974247fe276c6216", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3f52a2d0fb22bab9a3fdf94eaaa3d6829608fd/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3f52a2d0fb22bab9a3fdf94eaaa3d6829608fd/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=2b3f52a2d0fb22bab9a3fdf94eaaa3d6829608fd", "patch": "@@ -4330,10 +4330,6 @@ gfc_match_common (void)\n \t  if (m == MATCH_NO)\n \t    goto syntax;\n \n-          /* Store a ref to the common block for error checking.  */\n-          sym->common_block = t;\n-          sym->common_block->refs++;\n-\n           /* See if we know the current common block is bind(c), and if\n              so, then see if we can check if the symbol is (which it'll\n              need to be).  This can happen if the bind(c) attr stmt was\n@@ -4376,8 +4372,8 @@ gfc_match_common (void)\n \t\tgoto cleanup;\n \t    }\n \n-\t  if (!gfc_add_in_common (&sym->attr, sym->name, NULL))\n-\t    goto cleanup;\n+\t  sym->common_block = t;\n+\t  sym->common_block->refs++;\n \n \t  if (tail != NULL)\n \t    tail->common_next = sym;\n@@ -4416,6 +4412,10 @@ gfc_match_common (void)\n \n \t    }\n \n+\t  /* Add the in_common attribute, but ignore the reported errors\n+\t     if any, and continue matching.  */\n+\t  gfc_add_in_common (&sym->attr, sym->name, NULL);\n+\n \t  sym->common_head = t;\n \n \t  /* Check to see if the symbol is already in an equivalence group."}, {"sha": "e75c29302288effc7f4017a42a653401130b8ece", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3f52a2d0fb22bab9a3fdf94eaaa3d6829608fd/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3f52a2d0fb22bab9a3fdf94eaaa3d6829608fd/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=2b3f52a2d0fb22bab9a3fdf94eaaa3d6829608fd", "patch": "@@ -918,6 +918,12 @@ resolve_common_vars (gfc_common_head *common_block, bool named_common)\n \n   for (; csym; csym = csym->common_next)\n     {\n+      /* gfc_add_in_common may have been called before, but the reported errors\n+\t have been ignored to continue parsing.\n+\t We do the checks again here.  */\n+      if (!csym->attr.use_assoc)\n+\tgfc_add_in_common (&csym->attr, csym->name, &common_block->where);\n+\n       if (csym->value || csym->attr.data)\n \t{\n \t  if (!csym->ns->is_block_data)"}, {"sha": "85d593da93fbda97d4e4812215b4be9bbfb9d3d4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3f52a2d0fb22bab9a3fdf94eaaa3d6829608fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3f52a2d0fb22bab9a3fdf94eaaa3d6829608fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b3f52a2d0fb22bab9a3fdf94eaaa3d6829608fd", "patch": "@@ -1,3 +1,8 @@\n+2015-10-04  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/67758\n+\t* gfortran.dg/common_24.f: New.\n+\n 2015-10-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* gcc.target/arm/pr67756.c: Fixed warnings."}, {"sha": "ea37c2a8660e1b98ccdf779af5ab4d2003b56066", "filename": "gcc/testsuite/gfortran.dg/common_24.f", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3f52a2d0fb22bab9a3fdf94eaaa3d6829608fd/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_24.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3f52a2d0fb22bab9a3fdf94eaaa3d6829608fd/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_24.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_24.f?ref=2b3f52a2d0fb22bab9a3fdf94eaaa3d6829608fd", "patch": "@@ -0,0 +1,11 @@\n+c { dg-do compile }\n+c PR fortran/67758\n+c\n+c Check the absence of ICE after emitting the error message\n+c\n+c Contributed by Ilya Enkovich <ienkovich@gcc.gnu.org>\n+\n+      COMMON /FMCOM / X(80 000 000)\n+      CALL T(XX(A))\n+      COMMON /FMCOM / XX(80 000 000) ! { dg-error \"Unexpected COMMON\" }\n+      END"}]}