{"sha": "f22e3c85d7529038e1e5621ae1187453d6fef2f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIyZTNjODVkNzUyOTAzOGUxZTU2MjFhZTExODc0NTNkNmZlZjJmNg==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2013-03-12T11:42:26Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2013-03-12T11:42:26Z"}, "message": "re PR target/56263 ([avr] Provide strict address-space checking)\n\n\tPR target/56263\n\t* config/avr/avr.c (TARGET_CONVERT_TO_TYPE): Define to...\n\t(avr_convert_to_type): ...this new static function.\n\t* config/avr/avr.opt (-Waddr-space-convert): New C option.\n\t* doc/invoke.texi (AVR Options): Document it.\n\nFrom-SVN: r196611", "tree": {"sha": "218bdd8cb693895b400d70c7b61830c64f4c3762", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/218bdd8cb693895b400d70c7b61830c64f4c3762"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f22e3c85d7529038e1e5621ae1187453d6fef2f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f22e3c85d7529038e1e5621ae1187453d6fef2f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f22e3c85d7529038e1e5621ae1187453d6fef2f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f22e3c85d7529038e1e5621ae1187453d6fef2f6/comments", "author": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dedd8ef17d484b3cb0cb094480a0ed6399e5f487", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dedd8ef17d484b3cb0cb094480a0ed6399e5f487", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dedd8ef17d484b3cb0cb094480a0ed6399e5f487"}], "stats": {"total": 74, "additions": 73, "deletions": 1}, "files": [{"sha": "c916d6bcf2376a395d3645813e7bf71ff6c8f5c8", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22e3c85d7529038e1e5621ae1187453d6fef2f6/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22e3c85d7529038e1e5621ae1187453d6fef2f6/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=f22e3c85d7529038e1e5621ae1187453d6fef2f6", "patch": "@@ -10765,6 +10765,66 @@ avr_addr_space_subset_p (addr_space_t subset ATTRIBUTE_UNUSED,\n }\n \n \n+/* Implement `TARGET_CONVERT_TO_TYPE'.  */\n+\n+static tree\n+avr_convert_to_type (tree type, tree expr)\n+{\n+  /* Print a diagnose for pointer conversion that changes the address\n+     space of the pointer target to a non-enclosing address space,\n+     provided -Waddr-space-convert is on.\n+\n+     FIXME: Filter out cases where the target object is known to\n+            be located in the right memory, like in\n+\n+                (const __flash*) PSTR (\"text\")\n+\n+            Also try to distinguish between explicit casts requested by\n+            the user and implicit casts like\n+\n+                void f (const __flash char*);\n+\n+                void g (const char *p)\n+                {\n+                    f ((const __flash*) p);\n+                }\n+\n+            under the assumption that an explicit casts means that the user\n+            knows what he is doing, e.g. interface with PSTR or old style\n+            code with progmem and pgm_read_xxx.\n+  */\n+\n+  if (avr_warn_addr_space_convert\n+      && expr != error_mark_node\n+      && POINTER_TYPE_P (type)\n+      && POINTER_TYPE_P (TREE_TYPE (expr)))\n+    {\n+      addr_space_t as_old = TYPE_ADDR_SPACE (TREE_TYPE (TREE_TYPE (expr)));\n+      addr_space_t as_new = TYPE_ADDR_SPACE (TREE_TYPE (type));\n+        \n+      if (avr_log.progmem)\n+        avr_edump (\"%?: type = %t\\nexpr = %t\\n\\n\", type, expr);\n+\n+      if (as_new != ADDR_SPACE_MEMX\n+          && as_new != as_old)\n+        {\n+          location_t loc = EXPR_LOCATION (expr);\n+          const char *name_old = avr_addrspace[as_old].name;\n+          const char *name_new = avr_addrspace[as_new].name;\n+\n+          warning (OPT_Waddr_space_convert,\n+                   \"conversion from address space %qs to address space %qs\",\n+                   ADDR_SPACE_GENERIC_P (as_old) ? \"generic\" : name_old,\n+                   ADDR_SPACE_GENERIC_P (as_new) ? \"generic\" : name_new);\n+\n+          return fold_build1_loc (loc, ADDR_SPACE_CONVERT_EXPR, type, expr);\n+        }\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+\n /* Worker function for movmemhi expander.\n    XOP[0]  Destination as MEM:BLK\n    XOP[1]  Source      \"     \"\n@@ -12149,6 +12209,9 @@ avr_fold_builtin (tree fndecl, int n_args ATTRIBUTE_UNUSED, tree *arg,\n #undef  TARGET_FIXED_POINT_SUPPORTED_P\n #define TARGET_FIXED_POINT_SUPPORTED_P hook_bool_void_true\n \n+#undef  TARGET_CONVERT_TO_TYPE\n+#define TARGET_CONVERT_TO_TYPE avr_convert_to_type\n+\n #undef  TARGET_ADDR_SPACE_SUBSET_P\n #define TARGET_ADDR_SPACE_SUBSET_P avr_addr_space_subset_p\n "}, {"sha": "6b2e755eeb2ca1b90d88e63529b1c1fd7a9b017f", "filename": "gcc/config/avr/avr.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22e3c85d7529038e1e5621ae1187453d6fef2f6/gcc%2Fconfig%2Favr%2Favr.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22e3c85d7529038e1e5621ae1187453d6fef2f6/gcc%2Fconfig%2Favr%2Favr.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.opt?ref=f22e3c85d7529038e1e5621ae1187453d6fef2f6", "patch": "@@ -74,3 +74,7 @@ When accessing RAM, use X as imposed by the hardware, i.e. just use pre-decremen\n msp8\n Target Report RejectNegative Var(avr_sp8) Init(0)\n The device has no SPH special function register. This option will be overridden by the compiler driver with the correct setting if presence/absence of SPH can be deduced from -mmcu=MCU.\n+\n+Waddr-space-convert\n+Warning C Report Var(avr_warn_addr_space_convert) Init(0)\n+Warn if the address space of an address is change."}, {"sha": "a3f3d5ae47a14599641255d691f11aa3cc9b9106", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f22e3c85d7529038e1e5621ae1187453d6fef2f6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f22e3c85d7529038e1e5621ae1187453d6fef2f6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f22e3c85d7529038e1e5621ae1187453d6fef2f6", "patch": "@@ -514,7 +514,7 @@ Objective-C and Objective-C++ Dialects}.\n @emph{AVR Options}\n @gccoptlist{-mmcu=@var{mcu} -maccumulate-args -mbranch-cost=@var{cost} @gol\n -mcall-prologues -mint8 -mno-interrupts -mrelax @gol\n--mstrict-X -mtiny-stack}\n+-mstrict-X -mtiny-stack -Waddr-space-convert}\n \n @emph{Blackfin Options}\n @gccoptlist{-mcpu=@var{cpu}@r{[}-@var{sirevision}@r{]} @gol\n@@ -11649,6 +11649,11 @@ when @code{EICALL} or @code{EIJMP} instructions are used.\n Indirect jumps and calls on these devices are handled as follows by\n the compiler and are subject to some limitations:\n \n+@item -Waddr-space-convert\n+@opindex Waddr-space-convert\n+Warn about conversions between address spaces in the case where the\n+resulting address space is not contained in the incoming address space.\n+\n @itemize @bullet\n \n @item"}]}