{"sha": "b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkwODJlOGFkYjhhOGUyYzY1MDEzNTBhZTFjN2E1ZTE4OWE5OTk1Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-05-09T18:10:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-05-09T18:10:28Z"}, "message": "class.c (currently_open_class): New fn.\n\n\t* class.c (currently_open_class): New fn.\n\t* decl.c (lookup_name_real): Use it.\n\t* search.c (lookup_field): Likewise.\n\nFrom-SVN: r19650", "tree": {"sha": "fffe277ae140f32c34ad7fd9c26c341e4080c3cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fffe277ae140f32c34ad7fd9c26c341e4080c3cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/comments", "author": null, "committer": null, "parents": [{"sha": "6e940d05f48d784783f1a8ce79bba3a47a2263a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e940d05f48d784783f1a8ce79bba3a47a2263a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e940d05f48d784783f1a8ce79bba3a47a2263a2"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "0006972b434a38b54e021285bd7ae4136f7b0c89", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "patch": "@@ -1,4 +1,10 @@\n-Mon Apr 27 07:17:38 1998  Martin von Loewis  <loewis@informatik.hu-berlin.de>\n+Sat May  9 14:44:37 1998  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* class.c (currently_open_class): New fn.\n+\t* decl.c (lookup_name_real): Use it.\n+\t* search.c (lookup_field): Likewise.\n+\n+Fri May  8 23:32:42 1998  Martin von Loewis  <loewis@informatik.hu-berlin.de>\n \n \t* cp-tree.def (OVERLOAD): New node.  \n \t* cp-tree.h (BINDING_TYPE, SET_IDENTIFIER_GLOBAL_VALUE,"}, {"sha": "0e3e3cde12448be81bf84ba3a6d06f75845620a2", "filename": "gcc/cp/class.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "patch": "@@ -4822,6 +4822,21 @@ popclass (modify)\n   ;\n }\n \n+/* Returns 1 if current_class_type is either T or a nested type of T.  */\n+\n+int\n+currently_open_class (t)\n+     tree t;\n+{\n+  int i;\n+  if (t == current_class_type)\n+    return 1;\n+  for (i = 0; i < current_class_depth; ++i)\n+    if (current_class_stack [-i*2 - 1] == t)\n+      return 1;\n+  return 0;\n+}\n+\n /* When entering a class scope, all enclosing class scopes' names with\n    static meaning (static variables, static functions, types and enumerators)\n    have to be visible.  This recursive function calls pushclass for all"}, {"sha": "d0afbc2791eb6f22965630c04f828b0d57fc9e5a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "patch": "@@ -4826,20 +4826,21 @@ lookup_name_real (name, prefer_type, nonclass)\n \t   TYPE_DECLs.  */\n \tclassval = lookup_field (current_class_type, name, 0, 1);\n \n-      /* yylex() calls this with -2, since we should never start digging for\n-\t the nested name at the point where we haven't even, for example,\n-\t created the COMPONENT_REF or anything like that.  */\n-      if (classval == NULL_TREE)\n-\tclassval = lookup_nested_field (name, ! yylex);\n-\n       /* Add implicit 'typename' to types from template bases.  lookup_field\n-         will do this for us.  */\n+         will do this for us.  If classval is actually from an enclosing\n+         scope, lookup_nested_field will get it for us.  */\n       if (processing_template_decl\n \t  && classval && TREE_CODE (classval) == TYPE_DECL\n-\t  && DECL_CONTEXT (classval) != current_class_type\n+\t  && ! currently_open_class (DECL_CONTEXT (classval))\n \t  && uses_template_parms (current_class_type)\n \t  && ! DECL_ARTIFICIAL (classval))\n \tclassval = lookup_field (current_class_type, name, 0, 1);\n+\n+      /* yylex() calls this with -2, since we should never start digging for\n+\t the nested name at the point where we haven't even, for example,\n+\t created the COMPONENT_REF or anything like that.  */\n+      if (classval == NULL_TREE)\n+\tclassval = lookup_nested_field (name, ! yylex);\n     }\n \n   if (locval && classval)"}, {"sha": "08291a892a3520beca47690fafb1af40d26648bc", "filename": "gcc/cp/search.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9082e8adb8a8e2c6501350ae1c7a5e189a9995c/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=b9082e8adb8a8e2c6501350ae1c7a5e189a9995c", "patch": "@@ -1549,7 +1549,7 @@ lookup_field (xbasetype, name, protect, want_type)\n   if (rval && TREE_CODE (rval) == TYPE_DECL\n       && ! DECL_ARTIFICIAL (rval)\n       && processing_template_decl\n-      && BINFO_TYPE (rval_binfo) != current_class_type\n+      && ! currently_open_class (BINFO_TYPE (rval_binfo))\n       && uses_template_parms (type))\n     {\n       binfo = rval_binfo;\n@@ -1577,14 +1577,14 @@ lookup_nested_field (name, complain)\n   register tree t;\n \n   tree id = NULL_TREE;\n-  if (TREE_CHAIN (current_class_type))\n+  if (TYPE_MAIN_DECL (current_class_type))\n     {\n       /* Climb our way up the nested ladder, seeing if we're trying to\n \t modify a field in an enclosing class.  If so, we should only\n \t be able to modify if it's static.  */\n-      for (t = TREE_CHAIN (current_class_type);\n+      for (t = TYPE_MAIN_DECL (current_class_type);\n \t   t && DECL_CONTEXT (t);\n-\t   t = TREE_CHAIN (DECL_CONTEXT (t)))\n+\t   t = TYPE_MAIN_DECL (DECL_CONTEXT (t)))\n \t{\n \t  if (TREE_CODE (DECL_CONTEXT (t)) != RECORD_TYPE)\n \t    break;"}]}