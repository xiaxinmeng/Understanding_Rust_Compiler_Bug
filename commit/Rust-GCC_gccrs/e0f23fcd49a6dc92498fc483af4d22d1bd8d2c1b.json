{"sha": "e0f23fcd49a6dc92498fc483af4d22d1bd8d2c1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBmMjNmY2Q0OWE2ZGM5MjQ5OGZjNDgzYWY0ZDIyZDFiZDhkMmMxYg==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@mckinlay.net.nz", "date": "2003-10-26T02:28:45Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2003-10-26T02:28:45Z"}, "message": "AccessibleObject.java (secureSetAccessible): Don't check for AccessibleObject.\n\n\t* java/lang/reflect/AccessibleObject.java (secureSetAccessible):\n\tDon't check for AccessibleObject. Update javadocs.\n\nFrom-SVN: r72943", "tree": {"sha": "b297b2d08668dfc2dbcb5bbc6dfd7949fcc489a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b297b2d08668dfc2dbcb5bbc6dfd7949fcc489a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0f23fcd49a6dc92498fc483af4d22d1bd8d2c1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f23fcd49a6dc92498fc483af4d22d1bd8d2c1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0f23fcd49a6dc92498fc483af4d22d1bd8d2c1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f23fcd49a6dc92498fc483af4d22d1bd8d2c1b/comments", "author": null, "committer": null, "parents": [{"sha": "b9b5672b49c02abf4eb9ee7a41268676975fe8dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9b5672b49c02abf4eb9ee7a41268676975fe8dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9b5672b49c02abf4eb9ee7a41268676975fe8dd"}], "stats": {"total": 50, "additions": 17, "deletions": 33}, "files": [{"sha": "8d14a77d506f6e9cb2c10c27ba321e60b2772cb4", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f23fcd49a6dc92498fc483af4d22d1bd8d2c1b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f23fcd49a6dc92498fc483af4d22d1bd8d2c1b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e0f23fcd49a6dc92498fc483af4d22d1bd8d2c1b", "patch": "@@ -1,3 +1,8 @@\n+2003-10-26  Bryce McKinlay  <bryce@mckinlay.net.nz>\n+\n+\t* java/lang/reflect/AccessibleObject.java (secureSetAccessible):\n+\tDon't check for AccessibleObject. Update javadocs.\n+\n 2003-10-26  Bryce McKinlay  <bryce@mckinlay.net.nz>\n \n \t* java/lang/reflect/Constructor.java (toString): Avoid extra "}, {"sha": "4fb89bb44b5fa4b89421cfdd498018ebbd39546b", "filename": "libjava/java/lang/reflect/AccessibleObject.java", "status": "modified", "additions": 12, "deletions": 33, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f23fcd49a6dc92498fc483af4d22d1bd8d2c1b/libjava%2Fjava%2Flang%2Freflect%2FAccessibleObject.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f23fcd49a6dc92498fc483af4d22d1bd8d2c1b/libjava%2Fjava%2Flang%2Freflect%2FAccessibleObject.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FAccessibleObject.java?ref=e0f23fcd49a6dc92498fc483af4d22d1bd8d2c1b", "patch": "@@ -59,8 +59,7 @@\n {\n   /**\n    * True if this object is marked accessible, which means the reflected\n-   * object bypasses normal security checks. <em>NOTE</em>Don't try messing\n-   * with this by reflection.  You'll mess yourself up.\n+   * object bypasses normal security checks.\n    */\n   // default visibility for use by inherited classes\n   boolean flag = false;\n@@ -88,19 +87,11 @@ public boolean isAccessible()\n    * security check. If a security manager exists, it is checked for\n    * <code>ReflectPermission(\"suppressAccessChecks\")</code>.<p>\n    *\n-   * If <code>flag</code> is true, and the initial security check succeeds,\n-   * this can still fail if a forbidden object is encountered, leaving the\n-   * array half-modified. At the moment, the forbidden members are:<br>\n-   * <ul>\n-   *  <li>Any Constructor for java.lang.Class</li>\n-   *  <li>Any AccessibleObject for java.lang.reflect.AccessibleObject\n-   *      (this is not specified by Sun, but it closes a big security hole\n-   *      where you can use reflection to bypass the security checks that\n-   *      reflection is supposed to provide)</li>\n-   * </ul>\n-   * (Sun has not specified others, but good candidates might include\n-   * ClassLoader, String, and such. However, the more checks we do, the\n-   * slower this method gets).\n+   * It is forbidden to set the accessibility flag to true on any constructor\n+   * for java.lang.Class. This will result in a SecurityException. If the \n+   * SecurityException is thrown for any of the passed AccessibleObjects,\n+   * the accessibility flag will be set on AccessibleObjects in the array prior \n+   * to the one which resulted in the exception.\n    *\n    * @param array the array of accessible objects\n    * @param flag the desired state of accessibility, true to bypass security\n@@ -121,19 +112,8 @@ public static void setAccessible(AccessibleObject[] array, boolean flag)\n    * manager exists, it is checked for\n    * <code>ReflectPermission(\"suppressAccessChecks\")</code>.<p>\n    *\n-   * If <code>flag</code> is true, and the initial security check succeeds,\n-   * this will still fail for a forbidden object. At the moment, the\n-   * forbidden members are:<br>\n-   * <ul>\n-   *  <li>Any Constructor for java.lang.Class</li>\n-   *  <li>Any AccessibleObject for java.lang.reflect.AccessibleObject\n-   *      (this is not specified by Sun, but it closes a big security hole\n-   *      where you can use reflection to bypass the security checks that\n-   *      reflection is supposed to provide)</li>\n-   * </ul>\n-   * (Sun has not specified others, but good candidates might include\n-   * ClassLoader, String, and such. However, the more checks we do, the\n-   * slower this method gets).\n+   * It is forbidden to set the accessibility flag to true on any constructor for \n+   * java.lang.Class. This will result in a SecurityException.\n    *\n    * @param flag the desired state of accessibility, true to bypass security\n    * @throws NullPointerException if array is null\n@@ -165,15 +145,14 @@ private static final void checkPermission()\n    * after calling checkPermission.\n    *\n    * @param flag the desired status\n-   * @throws SecurityException if flag is true and this is one of the\n-   *         forbidden members mentioned in {@link setAccessible(boolean)}.\n+   * @throws SecurityException if flag is true and this is a constructor\n+   * for <code>java.lang.Class</code>.\n    */\n   private final void secureSetAccessible(boolean flag)\n   {\n     if (flag &&\n-        ((this instanceof Constructor\n-          && ((Constructor) this).getDeclaringClass() == Class.class)\n-         || ((Member) this).getDeclaringClass() == AccessibleObject.class))\n+        (this instanceof Constructor\n+          && ((Constructor) this).getDeclaringClass() == Class.class))\n       throw new SecurityException(\"Cannot make object accessible: \" + this);\n     this.flag = flag;\n   }"}]}