{"sha": "76d6224b944e1a66bfb1195fb7d35d9726f1aed8", "node_id": "C_kwDOANBUbNoAKDc2ZDYyMjRiOTQ0ZTFhNjZiZmIxMTk1ZmI3ZDM1ZDk3MjZmMWFlZDg", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-24T11:22:22Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-07-24T11:22:22Z"}, "message": "PR target/106303: Fix TImode STV related failures on x86.\n\nThis patch resolves PR target/106303 (and the related PRs 106347,\n106404, 106407) which are ICEs caused by my improvements to x86_64's\n128-bit TImode to V1TImode Scalar to Vector (STV) pass.  My apologies\nfor the breakage.  The issue is that data flow analysis is used to\npartition usage of each TImode pseudo into \"chains\", where each\nchain is analyzed and if suitable converted to vector operations.\nThe problems appears when some chains for a pseudo are converted,\nand others aren't as RTL sharing can result in some mode changes\nleaking into other instructions that aren't/shouldn't/can't be\nconverted, which eventually leads to an ICE for mismatched modes.\n\nMy first approach to a fix was to unify more of the STV infrastructure,\nreasoning that if TImode STV was exhibiting these problems, but DImode\nand SImode STV weren't, the issue was likely to be caused/resolved by\nthese remaining differences.  This appeared to fix some but not all of\nthe reported PRs.  A better solution was then proposed by H.J. Lu in\nBugzilla, that we need to iterate the removal of candidates in the\nfunction timode_remove_non_convertible_regs until there are no further\nchanges.  As each chain is removed from consideration, it in turn may\naffect whether other insns/chains can safely be converted.\n\n2022-07-24  Roger Sayle  <roger@nextmovesoftware.com>\n\t    H.J. Lu  <hjl.tools@gmail.com>\n\ngcc/ChangeLog\n\tPR target/106303\n\tPR target/106347\n\t* config/i386/i386-features.cc (make_vector_copies): Move from\n\tgeneral_scalar_chain to scalar_chain.\n\t(convert_reg): Likewise.\n\t(convert_insn_common): New scalar_chain method split out from\n\tgeneral_scalar_chain convert_insn.\n\t(convert_registers): Move from general_scalar_chain to\n\tscalar_chain.\n\t(scalar_chain::convert): Call convert_insn_common before calling\n\tconvert_insn.\n\t(timode_remove_non_convertible_regs): Iterate until there are\n\tno further changes to the candidates.\n\t* config/i386/i386-features.h (scalar_chain::hash_map): Move\n\tfrom general_scalar_chain.\n\t(scalar_chain::convert_reg): Likewise.\n\t(scalar_chain::convert_insn_common): New shared method.\n\t(scalar_chain::make_vector_copies): Move from general_scalar_chain.\n\t(scalar_chain::convert_registers): Likewise.  No longer virtual.\n\t(general_scalar_chain::hash_map): Delete.  Moved to scalar_chain.\n\t(general_scalar_chain::convert_reg): Likewise.\n\t(general_scalar_chain::make_vector_copies): Likewise.\n\t(general_scalar_chain::convert_registers): Delete virtual method.\n\t(timode_scalar_chain::convert_registers): Likewise.\n\ngcc/testsuite/ChangeLog\n\tPR target/106303\n\tPR target/106347\n\t* gcc.target/i386/pr106303.c: New test case.\n\t* gcc.target/i386/pr106347.c: New test case.", "tree": {"sha": "68a3df45b08458dadddb0fed1416eb36d5b5240f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68a3df45b08458dadddb0fed1416eb36d5b5240f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76d6224b944e1a66bfb1195fb7d35d9726f1aed8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d6224b944e1a66bfb1195fb7d35d9726f1aed8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76d6224b944e1a66bfb1195fb7d35d9726f1aed8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d6224b944e1a66bfb1195fb7d35d9726f1aed8/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e6fa997306dd03bd1a019b4f4d837cb2ff8daf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e6fa997306dd03bd1a019b4f4d837cb2ff8daf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e6fa997306dd03bd1a019b4f4d837cb2ff8daf8"}], "stats": {"total": 177, "additions": 119, "deletions": 58}, "files": [{"sha": "aa5de714edb32dd83801ebd9d8ca871ca7e26c8e", "filename": "gcc/config/i386/i386-features.cc", "status": "modified", "additions": 65, "deletions": 51, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6224b944e1a66bfb1195fb7d35d9726f1aed8/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6224b944e1a66bfb1195fb7d35d9726f1aed8/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.cc?ref=76d6224b944e1a66bfb1195fb7d35d9726f1aed8", "patch": "@@ -708,7 +708,7 @@ gen_gpr_to_xmm_move_src (enum machine_mode vmode, rtx gpr)\n    and replace its uses in a chain.  */\n \n void\n-general_scalar_chain::make_vector_copies (rtx_insn *insn, rtx reg)\n+scalar_chain::make_vector_copies (rtx_insn *insn, rtx reg)\n {\n   rtx vreg = *defs_map.get (reg);\n \n@@ -772,7 +772,7 @@ general_scalar_chain::make_vector_copies (rtx_insn *insn, rtx reg)\n    scalar uses outside of the chain.  */\n \n void\n-general_scalar_chain::convert_reg (rtx_insn *insn, rtx dst, rtx src)\n+scalar_chain::convert_reg (rtx_insn *insn, rtx dst, rtx src)\n {\n   start_sequence ();\n   if (!TARGET_INTER_UNIT_MOVES_FROM_VEC)\n@@ -973,10 +973,10 @@ scalar_chain::convert_compare (rtx op1, rtx op2, rtx_insn *insn)\n \t\t\t UNSPEC_PTEST);\n }\n \n-/* Convert INSN to vector mode.  */\n+/* Helper function for converting INSN to vector mode.  */\n \n void\n-general_scalar_chain::convert_insn (rtx_insn *insn)\n+scalar_chain::convert_insn_common (rtx_insn *insn)\n {\n   /* Generate copies for out-of-chain uses of defs and adjust debug uses.  */\n   for (df_ref ref = DF_INSN_DEFS (insn); ref; ref = DF_REF_NEXT_LOC (ref))\n@@ -1037,7 +1037,13 @@ general_scalar_chain::convert_insn (rtx_insn *insn)\n \t    XEXP (note, 0) = *vreg;\n \t  *DF_REF_REAL_LOC (ref) = *vreg;\n \t}\n+}\n+\n+/* Convert INSN to vector mode.  */\n \n+void\n+general_scalar_chain::convert_insn (rtx_insn *insn)\n+{\n   rtx def_set = single_set (insn);\n   rtx src = SET_SRC (def_set);\n   rtx dst = SET_DEST (def_set);\n@@ -1475,7 +1481,7 @@ timode_scalar_chain::convert_insn (rtx_insn *insn)\n    Also populates defs_map which is used later by convert_insn.  */\n \n void\n-general_scalar_chain::convert_registers ()\n+scalar_chain::convert_registers ()\n {\n   bitmap_iterator bi;\n   unsigned id;\n@@ -1510,7 +1516,9 @@ scalar_chain::convert ()\n \n   EXECUTE_IF_SET_IN_BITMAP (insns, 0, id, bi)\n     {\n-      convert_insn (DF_INSN_UID_GET (id)->insn);\n+      rtx_insn *insn = DF_INSN_UID_GET (id)->insn;\n+      convert_insn_common (insn);\n+      convert_insn (insn);\n       converted_insns++;\n     }\n \n@@ -1843,56 +1851,62 @@ timode_remove_non_convertible_regs (bitmap candidates)\n   bitmap_iterator bi;\n   unsigned id;\n   bitmap regs = BITMAP_ALLOC (NULL);\n+  bool changed;\n \n-  EXECUTE_IF_SET_IN_BITMAP (candidates, 0, id, bi)\n-    {\n-      rtx def_set = single_set (DF_INSN_UID_GET (id)->insn);\n-      rtx dest = SET_DEST (def_set);\n-      rtx src = SET_SRC (def_set);\n-\n-      if ((!REG_P (dest)\n-\t   || bitmap_bit_p (regs, REGNO (dest))\n-\t   || HARD_REGISTER_P (dest))\n-\t  && (!REG_P (src)\n-\t      || bitmap_bit_p (regs, REGNO (src))\n-\t      || HARD_REGISTER_P (src)))\n-\tcontinue;\n-\n-      if (REG_P (dest))\n-\ttimode_check_non_convertible_regs (candidates, regs,\n-\t\t\t\t\t   REGNO (dest));\n-\n-      if (REG_P (src))\n-\ttimode_check_non_convertible_regs (candidates, regs,\n-\t\t\t\t\t   REGNO (src));\n-    }\n+  do {\n+    changed = false;\n+    EXECUTE_IF_SET_IN_BITMAP (candidates, 0, id, bi)\n+      {\n+\trtx def_set = single_set (DF_INSN_UID_GET (id)->insn);\n+\trtx dest = SET_DEST (def_set);\n+\trtx src = SET_SRC (def_set);\n+\n+\tif ((!REG_P (dest)\n+\t     || bitmap_bit_p (regs, REGNO (dest))\n+\t     || HARD_REGISTER_P (dest))\n+\t    && (!REG_P (src)\n+\t\t|| bitmap_bit_p (regs, REGNO (src))\n+\t\t|| HARD_REGISTER_P (src)))\n+\t  continue;\n+\n+\tif (REG_P (dest))\n+\t  timode_check_non_convertible_regs (candidates, regs,\n+\t\t\t\t\t     REGNO (dest));\n+\n+\tif (REG_P (src))\n+\t  timode_check_non_convertible_regs (candidates, regs,\n+\t\t\t\t\t     REGNO (src));\n+      }\n \n-  EXECUTE_IF_SET_IN_BITMAP (regs, 0, id, bi)\n-    {\n-      for (df_ref def = DF_REG_DEF_CHAIN (id);\n-\t   def;\n-\t   def = DF_REF_NEXT_REG (def))\n-\tif (bitmap_bit_p (candidates, DF_REF_INSN_UID (def)))\n-\t  {\n-\t    if (dump_file)\n-\t      fprintf (dump_file, \"Removing insn %d from candidates list\\n\",\n-\t\t       DF_REF_INSN_UID (def));\n+    EXECUTE_IF_SET_IN_BITMAP (regs, 0, id, bi)\n+      {\n+\tfor (df_ref def = DF_REG_DEF_CHAIN (id);\n+\t     def;\n+\t     def = DF_REF_NEXT_REG (def))\n+\t  if (bitmap_bit_p (candidates, DF_REF_INSN_UID (def)))\n+\t    {\n+\t      if (dump_file)\n+\t\tfprintf (dump_file, \"Removing insn %d from candidates list\\n\",\n+\t\t\t DF_REF_INSN_UID (def));\n \n-\t    bitmap_clear_bit (candidates, DF_REF_INSN_UID (def));\n-\t  }\n+\t      bitmap_clear_bit (candidates, DF_REF_INSN_UID (def));\n+\t      changed = true;\n+\t    }\n \n-      for (df_ref ref = DF_REG_USE_CHAIN (id);\n-\t   ref;\n-\t   ref = DF_REF_NEXT_REG (ref))\n-\tif (bitmap_bit_p (candidates, DF_REF_INSN_UID (ref)))\n-\t  {\n-\t    if (dump_file)\n-\t      fprintf (dump_file, \"Removing insn %d from candidates list\\n\",\n-\t\t       DF_REF_INSN_UID (ref));\n+\tfor (df_ref ref = DF_REG_USE_CHAIN (id);\n+\t     ref;\n+\t     ref = DF_REF_NEXT_REG (ref))\n+\t  if (bitmap_bit_p (candidates, DF_REF_INSN_UID (ref)))\n+\t    {\n+\t      if (dump_file)\n+\t\tfprintf (dump_file, \"Removing insn %d from candidates list\\n\",\n+\t\t\t DF_REF_INSN_UID (ref));\n \n-\t    bitmap_clear_bit (candidates, DF_REF_INSN_UID (ref));\n-\t  }\n-    }\n+\t      bitmap_clear_bit (candidates, DF_REF_INSN_UID (ref));\n+\t      changed = true;\n+\t    }\n+      }\n+  } while (changed);\n \n   BITMAP_FREE (regs);\n }"}, {"sha": "3d88a88e014c3ffa4a962a141d5099a28acab4df", "filename": "gcc/config/i386/i386-features.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6224b944e1a66bfb1195fb7d35d9726f1aed8/gcc%2Fconfig%2Fi386%2Fi386-features.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6224b944e1a66bfb1195fb7d35d9726f1aed8/gcc%2Fconfig%2Fi386%2Fi386-features.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.h?ref=76d6224b944e1a66bfb1195fb7d35d9726f1aed8", "patch": "@@ -149,6 +149,7 @@ class scalar_chain\n   bitmap defs_conv;\n \n   bitmap insns_conv;\n+  hash_map<rtx, rtx> defs_map;\n   unsigned n_sse_to_integer;\n   unsigned n_integer_to_sse;\n \n@@ -161,12 +162,15 @@ class scalar_chain\n   void emit_conversion_insns (rtx insns, rtx_insn *pos);\n   rtx convert_compare (rtx op1, rtx op2, rtx_insn *insn);\n   void mark_dual_mode_def (df_ref def);\n+  void convert_reg (rtx_insn *insn, rtx dst, rtx src);\n+  void convert_insn_common (rtx_insn *insn);\n+  void make_vector_copies (rtx_insn *, rtx);\n+  void convert_registers ();\n \n  private:\n   void add_insn (bitmap candidates, unsigned insn_uid);\n   void analyze_register_chain (bitmap candidates, df_ref ref);\n   virtual void convert_insn (rtx_insn *insn) = 0;\n-  virtual void convert_registers () = 0;\n   virtual void convert_op (rtx *op, rtx_insn *insn) = 0;\n };\n \n@@ -178,12 +182,8 @@ class general_scalar_chain : public scalar_chain\n   int compute_convert_gain () final override;\n \n  private:\n-  hash_map<rtx, rtx> defs_map;\n   void convert_insn (rtx_insn *insn) final override;\n-  void convert_reg (rtx_insn *insn, rtx dst, rtx src);\n   void convert_op (rtx *op, rtx_insn *insn);\n-  void make_vector_copies (rtx_insn *, rtx);\n-  void convert_registers () final override;\n   int vector_const_cost (rtx exp);\n };\n \n@@ -197,8 +197,6 @@ class timode_scalar_chain : public scalar_chain\n   void fix_debug_reg_uses (rtx reg);\n   void convert_insn (rtx_insn *insn) final override;\n   void convert_op (rtx *op, rtx_insn *insn);\n-  /* We don't convert registers to different size.  */\n-  void convert_registers () final override {}\n };\n \n } // anon namespace"}, {"sha": "19cce404fa401fdba0028a8a49a5199446449c92", "filename": "gcc/testsuite/gcc.target/i386/pr106303.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6224b944e1a66bfb1195fb7d35d9726f1aed8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106303.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6224b944e1a66bfb1195fb7d35d9726f1aed8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106303.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106303.c?ref=76d6224b944e1a66bfb1195fb7d35d9726f1aed8", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-inline-small-functions\" } */\n+\n+struct a {\n+  int b;\n+  int c;\n+  int d;\n+  int e;\n+} i, j;\n+int f, g, h;\n+struct a k() {\n+  while (f)\n+    i = j;\n+  if (g) {\n+    for (; h; h++)\n+      i = j;\n+    return j;\n+  }\n+  return i;\n+}\n+int main() {\n+  k();\n+  return 0;\n+}\n+"}, {"sha": "003dd1b6bf25fd5a8ef380fb07be956a73ea9f24", "filename": "gcc/testsuite/gcc.target/i386/pr106347.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76d6224b944e1a66bfb1195fb7d35d9726f1aed8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106347.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76d6224b944e1a66bfb1195fb7d35d9726f1aed8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106347.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr106347.c?ref=76d6224b944e1a66bfb1195fb7d35d9726f1aed8", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2 -fno-expensive-optimizations\" } */\n+\n+__int128 m;\n+int n;\n+\n+__attribute__ ((noinline)) int\n+return_zero (void)\n+{\n+  return 0;\n+}\n+\n+void\n+foo (void)\n+{\n+  while (m < 0)\n+    {\n+      if (n || return_zero ())\n+        __builtin_trap ();\n+\n+      ++m;\n+    }\n+}\n+"}]}