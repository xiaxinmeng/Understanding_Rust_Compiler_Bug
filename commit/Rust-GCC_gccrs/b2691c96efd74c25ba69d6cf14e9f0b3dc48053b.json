{"sha": "b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "node_id": "C_kwDOANBUbNoAKGIyNjkxYzk2ZWZkNzRjMjViYTY5ZDZjZjE0ZTlmMGIzZGM0ODA1M2I", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-05T01:50:31Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T02:59:19Z"}, "message": "RISC-V: Add saturating Add && Sub vx constraint tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-100.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-101.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-102.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-103.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-104.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-105.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-106.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-107.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-108.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-109.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-110.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-111.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-112.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-113.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-114.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-115.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-116.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-117.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-118.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-119.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-97.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-98.c: New test.\n\t* gcc.target/riscv/rvv/base/binop_vx_constraint-99.c: New test.", "tree": {"sha": "4feeb5083a76adbbcecfbf98404129bec9cee724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4feeb5083a76adbbcecfbf98404129bec9cee724"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1"}], "stats": {"total": 921, "additions": 921, "deletions": 0}, "files": [{"sha": "667a7656ce1f91cf553ea9efcc6d8cc56598714b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-100.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-100.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-100.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-100.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsadd_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vsadd_vx_i64m1_tu (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vsadd\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "eefdf455bca851ee70f43a52583343ccf8321b49", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-101.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-101.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-101.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-101.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsadd_vx_i64m1 (v2, x, 4);\n+  vint64m1_t v4 = __riscv_vsadd_vx_i64m1_tu (v3, v2, x, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vsadd\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "4b24b971cbac55f5400fad28eac533845ae158d3", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-102.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-102.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-102.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-102.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int32_t x, int n)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = __riscv_vle64_v_i64m1 (in + i + 1, 4);\n+    vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + i + 2, 4);\n+    vint64m1_t v3 = __riscv_vsadd_vx_i64m1 (v2, x, 4);\n+    vint64m1_t v4 = __riscv_vsadd_vx_i64m1_tu (v3, v2, x, 4);\n+    __riscv_vse64_v_i64m1 (out + i + 2, v4, 4);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero\\s+\\.L[0-9]+\\:\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsadd\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "7ffedd5ceb9176076ab4e95aa8c980e5badb5a7b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-103.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-103.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-103.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-103.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvsaddu\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvsaddu\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vsaddu_vx_u64m1 (v2, -16, 4);\n+  vuint64m1_t v4 = __riscv_vsaddu_vx_u64m1 (v3, -16, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsaddu\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvsaddu\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vsaddu_vx_u64m1 (v2, 15, 4);\n+  vuint64m1_t v4 = __riscv_vsaddu_vx_u64m1 (v3, 15, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsaddu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsaddu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vsaddu_vx_u64m1 (v2, 16, 4);\n+  vuint64m1_t v4 = __riscv_vsaddu_vx_u64m1 (v3, 16, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsaddu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsaddu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vsaddu_vx_u64m1 (v2, 0xAAAAAAAA, 4);\n+  vuint64m1_t v4 = __riscv_vsaddu_vx_u64m1 (v3, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvsaddu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsaddu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vsaddu_vx_u64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vuint64m1_t v4 = __riscv_vsaddu_vx_u64m1 (v3, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvsaddu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsaddu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vsaddu_vx_u64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vuint64m1_t v4 = __riscv_vsaddu_vx_u64m1 (v3, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvsaddu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsaddu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vsaddu_vx_u64m1 (v2, x, 4);\n+  vuint64m1_t v4 = __riscv_vsaddu_vx_u64m1 (v3, x, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}"}, {"sha": "612213a603642507b909bcae25ebd7cdc28db758", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-104.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-104.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-104.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-104.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvsaddu\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvsaddu\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vsaddu_vx_u64m1 (v2, -16, 4);\n+  vuint64m1_t v4 = __riscv_vsaddu_vx_u64m1 (v3, -16, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsaddu\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvsaddu\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vsaddu_vx_u64m1 (v2, 15, 4);\n+  vuint64m1_t v4 = __riscv_vsaddu_vx_u64m1 (v3, 15, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsaddu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsaddu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vsaddu_vx_u64m1 (v2, 16, 4);\n+  vuint64m1_t v4 = __riscv_vsaddu_vx_u64m1 (v3, 16, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsaddu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsaddu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vsaddu_vx_u64m1 (v2, 0xAAAAAAA, 4);\n+  vuint64m1_t v4 = __riscv_vsaddu_vx_u64m1 (v3, 0xAAAAAAA, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}"}, {"sha": "86825c088b1f9bae401fcf7fa775076933cca4de", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-105.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-105.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-105.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-105.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vsaddu_vx_u64m1 (v2, 0xAAAAAAAA, 4);\n+  vuint64m1_t v4 = __riscv_vsaddu_vx_u64m1_tu (v3, v2, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "94bff68ba5ea2b60a57b664a3184594d7cdd3575", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-106.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-106.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-106.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-106.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vsaddu_vx_u64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vuint64m1_t v4 = __riscv_vsaddu_vx_u64m1_tu (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "a3d08de06c4735c2e57c8213dbc040dc1f95aa61", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-107.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-107.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-107.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-107.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vsaddu_vx_u64m1 (v2, x, 4);\n+  vuint64m1_t v4 = __riscv_vsaddu_vx_u64m1_tu (v3, v2, x, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "99acc51b4ffbfe89f78df7b479f207deab74eab9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-108.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-108.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-108.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-108.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int32_t x, int n)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vuint64m1_t v = __riscv_vle64_v_u64m1 (in + i + 1, 4);\n+    vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + i + 2, 4);\n+    vuint64m1_t v3 = __riscv_vsaddu_vx_u64m1 (v2, x, 4);\n+    vuint64m1_t v4 = __riscv_vsaddu_vx_u64m1_tu (v3, v2, x, 4);\n+    __riscv_vse64_v_u64m1 (out + i + 2, v4, 4);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero\\s+\\.L[0-9]+\\:\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vsaddu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "9127b869f5358b080de64b750261f05a370d2a3a", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-109.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-109.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-109.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-109.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvsadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvsadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vssub_vx_i64m1 (v2, -15, 4);\n+  vint64m1_t v4 = __riscv_vssub_vx_i64m1 (v3, -15, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvsadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vssub_vx_i64m1 (v2, 16, 4);\n+  vint64m1_t v4 = __riscv_vssub_vx_i64m1 (v3, 16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvssub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvssub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vssub_vx_i64m1 (v2, 17, 4);\n+  vint64m1_t v4 = __riscv_vssub_vx_i64m1 (v3, 17, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvssub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvssub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vssub_vx_i64m1 (v2, 0xAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vssub_vx_i64m1 (v3, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvssub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvssub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vssub_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vssub_vx_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvssub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvssub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vssub_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vssub_vx_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvssub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvssub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vssub_vx_i64m1 (v2, x, 4);\n+  vint64m1_t v4 = __riscv_vssub_vx_i64m1 (v3, x, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}"}, {"sha": "d70789e1810b2093571583e22b4a6874af6ce774", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-110.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-110.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-110.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-110.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvsadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvsadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vssub_vx_i64m1 (v2, -15, 4);\n+  vint64m1_t v4 = __riscv_vssub_vx_i64m1 (v3, -15, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvsadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vssub_vx_i64m1 (v2, 16, 4);\n+  vint64m1_t v4 = __riscv_vssub_vx_i64m1 (v3, 16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvssub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvssub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vssub_vx_i64m1 (v2, 17, 4);\n+  vint64m1_t v4 = __riscv_vssub_vx_i64m1 (v3, 17, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvssub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvssub\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vssub_vx_i64m1 (v2, 0xAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vssub_vx_i64m1 (v3, 0xAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}"}, {"sha": "e02b21554a8743142cbd7b522d73eb13694b78f0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-111.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-111.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-111.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-111.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vssub_vx_i64m1 (v2, 0xAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vssub_vx_i64m1_tu (v3, v2, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vssub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "8cd9c4d09ba0b7ef355d3e1f0b4dd8b80035e910", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-112.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-112.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-112.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-112.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vssub_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vssub_vx_i64m1_tu (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vssub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "6090a1da69d92e29e109955213bde666f2a62283", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-113.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-113.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-113.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-113.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vssub_vx_i64m1 (v2, x, 4);\n+  vint64m1_t v4 = __riscv_vssub_vx_i64m1_tu (v3, v2, x, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vssub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "d595c446503062464f920cd87358a236287f8bc0", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-114.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-114.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-114.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-114.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int32_t x, int n)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vint64m1_t v = __riscv_vle64_v_i64m1 (in + i + 1, 4);\n+    vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + i + 2, 4);\n+    vint64m1_t v3 = __riscv_vssub_vx_i64m1 (v2, x, 4);\n+    vint64m1_t v4 = __riscv_vssub_vx_i64m1_tu (v3, v2, x, 4);\n+    __riscv_vse64_v_i64m1 (out + i + 2, v4, 4);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero\\s+\\.L[0-9]+\\:\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vssub\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "9722f5e61188dc2b2178a1015ed4b800dff73493", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-115.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-115.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-115.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-115.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvssubu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvssubu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, uint64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vssubu_vx_u64m1 (v2, -16, 4);\n+  vuint64m1_t v4 = __riscv_vssubu_vx_u64m1 (v3, -16, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvssubu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvssubu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, uint64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vssubu_vx_u64m1 (v2, 15, 4);\n+  vuint64m1_t v4 = __riscv_vssubu_vx_u64m1 (v3, 15, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvssubu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvssubu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, uint64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vssubu_vx_u64m1 (v2, 16, 4);\n+  vuint64m1_t v4 = __riscv_vssubu_vx_u64m1 (v3, 16, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvssubu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvssubu\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, uint64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vssubu_vx_u64m1 (v2, 0xAAAAAAA, 4);\n+  vuint64m1_t v4 = __riscv_vssubu_vx_u64m1 (v3, 0xAAAAAAA, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}"}, {"sha": "066365dc744fb0ee06946a049ce94a192cee7b92", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-116.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-116.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-116.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-116.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, uint64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vssubu_vx_u64m1 (v2, 0xAAAAAAAA, 4);\n+  vuint64m1_t v4 = __riscv_vssubu_vx_u64m1_tu (v3, v2, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vssubu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "bfc6773f198daccec2bb7d9762e1c6b949f116ae", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-117.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-117.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-117.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-117.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, uint64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vssubu_vx_u64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vuint64m1_t v4 = __riscv_vssubu_vx_u64m1_tu (v3, v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vssubu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "05a7a1d9e65a6ebace3de92e56aa8b53bf1aad68", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-118.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-118.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-118.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-118.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, uint64_t x, int n)\n+{\n+  vuint64m1_t v = __riscv_vle64_v_u64m1 (in + 1, 4);\n+  vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + 2, 4);\n+  vuint64m1_t v3 = __riscv_vssubu_vx_u64m1 (v2, x, 4);\n+  vuint64m1_t v4 = __riscv_vssubu_vx_u64m1_tu (v3, v2, x, 4);\n+  __riscv_vse64_v_u64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vssubu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "0b51175f66ca0c7123f1b0f49782eeb3cce3b67c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-119.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-119.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-119.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-119.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, uint64_t x, int n)\n+{\n+  for (int i = 0; i < n; i++) {\n+    vuint64m1_t v = __riscv_vle64_v_u64m1 (in + i + 1, 4);\n+    vuint64m1_t v2 = __riscv_vle64_v_u64m1_tu (v, in + i + 2, 4);\n+    vuint64m1_t v3 = __riscv_vssubu_vx_u64m1 (v2, x, 4);\n+    vuint64m1_t v4 = __riscv_vssubu_vx_u64m1_tu (v3, v2, x, 4);\n+    __riscv_vse64_v_u64m1 (out + i + 2, v4, 4);\n+  }\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero\\s+\\.L[0-9]+\\:\\s+} 1 } } */\n+/* { dg-final { scan-assembler-times {vssubu\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "d1283d89a934423f01e3c9c3b82c00a4e0d4bfc7", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-97.c", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-97.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-97.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-97.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,123 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvsadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvsadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsadd_vx_i64m1 (v2, -16, 4);\n+  vint64m1_t v4 = __riscv_vsadd_vx_i64m1 (v3, -16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvsadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsadd_vx_i64m1 (v2, 15, 4);\n+  vint64m1_t v4 = __riscv_vsadd_vx_i64m1 (v3, 15, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsadd_vx_i64m1 (v2, 16, 4);\n+  vint64m1_t v4 = __riscv_vsadd_vx_i64m1 (v3, 16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsadd_vx_i64m1 (v2, 0xAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vsadd_vx_i64m1 (v3, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f4:\n+**  ...\n+**\tvsadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsadd_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vsadd_vx_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f5:\n+**  ...\n+**\tvsadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsadd_vx_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vsadd_vx_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f6:\n+**  ...\n+**\tvsadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsadd_vx_i64m1 (v2, x, 4);\n+  vint64m1_t v4 = __riscv_vsadd_vx_i64m1 (v3, x, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}"}, {"sha": "ed7477b3ca8d56fbb4cac576024c230e4c5ce99c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-98.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-98.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-98.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-98.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+#include \"riscv_vector.h\"\n+\n+/*\n+** f0:\n+**  ...\n+**\tvsadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**\tvsadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*-16\n+**  ...\n+**\tret\n+*/\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsadd_vx_i64m1 (v2, -16, 4);\n+  vint64m1_t v4 = __riscv_vsadd_vx_i64m1 (v3, -16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f1:\n+**  ...\n+**\tvsadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**\tvsadd\\.vi\\tv[0-9]+,\\s*v[0-9]+,\\s*15\n+**  ...\n+**\tret\n+*/\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsadd_vx_i64m1 (v2, 15, 4);\n+  vint64m1_t v4 = __riscv_vsadd_vx_i64m1 (v3, 15, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f2:\n+**  ...\n+**\tvsadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsadd_vx_i64m1 (v2, 16, 4);\n+  vint64m1_t v4 = __riscv_vsadd_vx_i64m1 (v3, 16, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/*\n+** f3:\n+**  ...\n+**\tvsadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**\tvsadd\\.vx\\tv[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+\n+**  ...\n+**\tret\n+*/\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vsadd_vx_i64m1 (v2, 0xAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vsadd_vx_i64m1 (v3, 0xAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}"}, {"sha": "5a4f58bfc1a73e05354c9e316a92fd66142f89ad", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/binop_vx_constraint-99.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-99.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2691c96efd74c25ba69d6cf14e9f0b3dc48053b/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-99.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fbinop_vx_constraint-99.c?ref=b2691c96efd74c25ba69d6cf14e9f0b3dc48053b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f (void * in, void *out, int64_t x, int n)\n+{\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadd_vx_i64m1 (v2, 0xAAAAAAAA, 4);\n+  vint64m1_t v4 = __riscv_vadd_vx_i64m1_tu (v3, v2, 0xAAAAAAAA, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vlse64\\.v\\s+v[0-9]+,\\s*0\\([a-x0-9]+\\),\\s*zero} 1 } } */\n+/* { dg-final { scan-assembler-times {vadd\\.vv\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}]}