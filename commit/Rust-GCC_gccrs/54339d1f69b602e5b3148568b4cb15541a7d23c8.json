{"sha": "54339d1f69b602e5b3148568b4cb15541a7d23c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQzMzlkMWY2OWI2MDJlNWIzMTQ4NTY4YjRjYjE1NTQxYTdkMjNjOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-02-20T16:17:21Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-02-20T16:17:21Z"}, "message": "sibcall-9.c: New test.\n\n\t* gcc.dg/sibcall-9.c: New test.\n\t* gcc.dg/sibcall-10.c: New test.\n\nFrom-SVN: r220872", "tree": {"sha": "1e190ff2f8a5d2c0a290dd7b107dda39f703bcaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e190ff2f8a5d2c0a290dd7b107dda39f703bcaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54339d1f69b602e5b3148568b4cb15541a7d23c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54339d1f69b602e5b3148568b4cb15541a7d23c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54339d1f69b602e5b3148568b4cb15541a7d23c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54339d1f69b602e5b3148568b4cb15541a7d23c8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "deaa1ccbec5c806c86d4d7e54334fef6e6abdf0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deaa1ccbec5c806c86d4d7e54334fef6e6abdf0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deaa1ccbec5c806c86d4d7e54334fef6e6abdf0e"}], "stats": {"total": 170, "additions": 170, "deletions": 0}, "files": [{"sha": "57a740e0c62a338946ec08e364153d47d6cbb827", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54339d1f69b602e5b3148568b4cb15541a7d23c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54339d1f69b602e5b3148568b4cb15541a7d23c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=54339d1f69b602e5b3148568b4cb15541a7d23c8", "patch": "@@ -1,3 +1,8 @@\n+2015-02-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.dg/sibcall-9.c: New test.\n+\t* gcc.dg/sibcall-10.c: New test.\n+\n 2015-02-20  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/sisd-shft-neg_1.c: New test."}, {"sha": "d98b43a91b870fbca10ab4cde7292bb4a71e835f", "filename": "gcc/testsuite/gcc.dg/sibcall-10.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54339d1f69b602e5b3148568b4cb15541a7d23c8/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54339d1f69b602e5b3148568b4cb15541a7d23c8/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-10.c?ref=54339d1f69b602e5b3148568b4cb15541a7d23c8", "patch": "@@ -0,0 +1,83 @@\n+/* Simple check that sibling calls are performed from a\n+   void non-leaf-function taking no arguments calling a function which\n+   is about the same as itself.\n+\n+   Copyright (C) 2002 Free Software Foundation Inc.\n+   Contributed by Hans-Peter Nilsson  <hp@bitrange.com>  */\n+\n+/* { dg-do run { xfail { { cris-*-* crisv32-*-* h8300-*-* hppa*64*-*-* m32r-*-* mcore-*-* mn10300-*-* msp430*-*-* nds32*-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa*-*-* } || { arm*-*-* && { ! arm32 } } } } } */\n+/* -mlongcall disables sibcall patterns.  */\n+/* { dg-skip-if \"\" { powerpc*-*-* } { \"-mlongcall\" } { \"\" } } */\n+/* { dg-options \"-O2 -foptimize-sibling-calls\" } */\n+\n+/* The option -foptimize-sibling-calls is the default, but serves as\n+   marker.  This test is xfailed on targets without sibcall patterns\n+   (except targets where the test does not work due to the return address\n+   not saved on the regular stack).  */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+/* Sibcalls are not supported in MIPS16 mode, which has direct calls but\n+   not direct jumps.  */\n+#ifdef __mips\n+#define ATTR __attribute__((nomips16))\n+#else\n+#define ATTR\n+#endif\n+\n+static ATTR void recurser_void1 (void);\n+static ATTR void recurser_void2 (void);\n+extern void track (void);\n+volatile int v;\n+\n+int n = 0;\n+int main ()\n+{\n+  recurser_void1 ();\n+  if (v != 5)\n+    abort ();\n+  exit (0);\n+}\n+\n+/* The functions should get the same stack-frame, and best way to make it\n+   reasonably sure is to make them have the same contents (regarding the\n+   n tests).  */\n+\n+static void __attribute__((noinline)) ATTR\n+recurser_void1 (void)\n+{\n+  if (n == 0 || n == 7 || n == 8)\n+    track ();\n+\n+  if (n == 10)\n+    return;\n+  n++;\n+  recurser_void2 ();\n+}\n+\n+static void __attribute__((noinline)) ATTR\n+recurser_void2 (void)\n+{\n+  if (n == 0 || n == 7 || n == 8)\n+    track ();\n+\n+  if (n == 10)\n+    return;\n+  n++;\n+  v++;\n+  recurser_void1 ();\n+}\n+\n+void *trackpoint;\n+\n+void __attribute__ ((noinline))\n+track ()\n+{\n+  char stackpos[1];\n+\n+  if (n == 0)\n+    trackpoint = stackpos;\n+  else if ((n != 7 && n != 8) || trackpoint != stackpos)\n+    abort ();\n+}"}, {"sha": "d64e549801647a0624249b32c4d2299b37e2afd8", "filename": "gcc/testsuite/gcc.dg/sibcall-9.c", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54339d1f69b602e5b3148568b4cb15541a7d23c8/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54339d1f69b602e5b3148568b4cb15541a7d23c8/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsibcall-9.c?ref=54339d1f69b602e5b3148568b4cb15541a7d23c8", "patch": "@@ -0,0 +1,82 @@\n+/* Simple check that sibling calls are performed from a\n+   void non-leaf-function taking one int argument calling a function which\n+   is about the same as itself.\n+\n+   Copyright (C) 2002 Free Software Foundation Inc.\n+   Contributed by Hans-Peter Nilsson  <hp@bitrange.com>  */\n+\n+/* { dg-do run { xfail { { cris-*-* crisv32-*-* h8300-*-* hppa*64*-*-* m32r-*-* mcore-*-* mn10300-*-* msp430*-*-* nds32*-*-* xstormy16-*-* v850*-*-* vax-*-* xtensa*-*-* } || { arm*-*-* && { ! arm32 } } } } } */\n+/* -mlongcall disables sibcall patterns.  */\n+/* { dg-skip-if \"\" { powerpc*-*-* } { \"-mlongcall\" } { \"\" } } */\n+/* { dg-options \"-O2 -foptimize-sibling-calls\" } */\n+\n+/* The option -foptimize-sibling-calls is the default, but serves as\n+   marker.  This test is xfailed on targets without sibcall patterns\n+   (except targets where the test does not work due to the return address\n+   not saved on the regular stack).  */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+/* Sibcalls are not supported in MIPS16 mode, which has direct calls but\n+   not direct jumps.  */\n+#ifdef __mips\n+#define ATTR __attribute__((nomips16))\n+#else\n+#define ATTR\n+#endif\n+\n+static ATTR void recurser_void1 (int);\n+static ATTR void recurser_void2 (int);\n+extern void track (int);\n+volatile int v;\n+\n+int main ()\n+{\n+  recurser_void1 (0);\n+  if (v != 5)\n+    abort ();\n+  exit (0);\n+}\n+\n+/* The functions should get the same stack-frame, and best way to make it\n+   reasonably sure is to make them have the same contents (regarding the\n+   n tests).  */\n+\n+static void __attribute__((noinline)) ATTR\n+recurser_void1 (int n)\n+{\n+  if (n == 0 || n == 7 || n == 8)\n+    track (n);\n+\n+  if (n == 10)\n+    return;\n+\n+  recurser_void2 (n + 1);\n+}\n+\n+static void __attribute__((noinline)) ATTR\n+recurser_void2 (int n)\n+{\n+  if (n == 0 || n == 7 || n == 8)\n+    track (n);\n+\n+  if (n == 10)\n+    return;\n+\n+  v++;\n+  recurser_void1 (n + 1);\n+}\n+\n+void *trackpoint;\n+\n+void __attribute__ ((noinline))\n+track (int n)\n+{\n+  char stackpos[1];\n+\n+  if (n == 0)\n+    trackpoint = stackpos;\n+  else if ((n != 7 && n != 8) || trackpoint != stackpos)\n+    abort ();\n+}"}]}