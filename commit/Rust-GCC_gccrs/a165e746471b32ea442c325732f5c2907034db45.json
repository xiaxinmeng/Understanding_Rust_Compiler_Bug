{"sha": "a165e746471b32ea442c325732f5c2907034db45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE2NWU3NDY0NzFiMzJlYTQ0MmMzMjU3MzJmNWMyOTA3MDM0ZGI0NQ==", "commit": {"author": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-06-13T00:18:41Z"}, "committer": {"name": "James A. Morrison", "email": "phython@gcc.gnu.org", "date": "2005-06-13T00:18:41Z"}, "message": "re PR tree-optimization/14796 ([tree-ssa] combine two shifts into one)\n\n2005-06-12  James A. Morrison  <phython@gcc.gnu.org>\n\n        PR tree-optimization/14796\n        * fold-const (fold_binary): Transform (X << C) >> C into X & (-1>>C)\n        for unsigned types.\n\nFrom-SVN: r100869", "tree": {"sha": "0e491ce1198062f770844aa5c3a1dadc4b298c0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e491ce1198062f770844aa5c3a1dadc4b298c0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a165e746471b32ea442c325732f5c2907034db45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a165e746471b32ea442c325732f5c2907034db45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a165e746471b32ea442c325732f5c2907034db45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a165e746471b32ea442c325732f5c2907034db45/comments", "author": null, "committer": null, "parents": [{"sha": "61e58d36f29d9c190c6e520a47f45e83582d9b74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e58d36f29d9c190c6e520a47f45e83582d9b74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61e58d36f29d9c190c6e520a47f45e83582d9b74"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "b18b1e4ec0f093a3d1b753658caa7e723057a2e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a165e746471b32ea442c325732f5c2907034db45/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a165e746471b32ea442c325732f5c2907034db45/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a165e746471b32ea442c325732f5c2907034db45", "patch": "@@ -1,3 +1,9 @@\n+2005-06-12  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\tPR tree-optimization/14796\n+\t* fold-const (fold_binary): Transform (X << C) >> C into X & (-1>>C)\n+\tfor unsigned types.\n+\n 2005-06-12  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* cgraphunit.c, tree-ssa-loop-ivopts.c,"}, {"sha": "af3f01c38df23b5a2b93a5dbd711cf43384d2ad2", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a165e746471b32ea442c325732f5c2907034db45/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a165e746471b32ea442c325732f5c2907034db45/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a165e746471b32ea442c325732f5c2907034db45", "patch": "@@ -8768,33 +8768,32 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t\t      build_int_cst (type, low));\n \t}\n \n-      /* Transform (x >> c) << c into x & (-1<<c)  */\n-      if (code == LSHIFT_EXPR && TREE_CODE (arg0) == RSHIFT_EXPR\n+      /* Transform (x >> c) << c into x & (-1<<c), or transform (x << c) >> c\n+         into x & ((unsigned)-1 >> c) for unsigned types.  */\n+      if (((code == LSHIFT_EXPR && TREE_CODE (arg0) == RSHIFT_EXPR)\n+           || (TYPE_UNSIGNED (type)\n+\t       && code == RSHIFT_EXPR && TREE_CODE (arg0) == LSHIFT_EXPR))\n \t  && host_integerp (arg1, false)\n \t  && TREE_INT_CST_LOW (arg1) < TYPE_PRECISION (type)\n \t  && host_integerp (TREE_OPERAND (arg0, 1), false)\n \t  && TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1)) < TYPE_PRECISION (type))\n \t{\n \t  HOST_WIDE_INT low0 = TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1));\n \t  HOST_WIDE_INT low1 = TREE_INT_CST_LOW (arg1);\n-\t  unsigned HOST_WIDE_INT low;\n-\t  HOST_WIDE_INT high;\n \t  tree lshift;\n \t  tree arg00;\n \n \t  if (low0 == low1)\n \t    {\n \t      arg00 = fold_convert (type, TREE_OPERAND (arg0, 0));\n \n-\t      lshift_double (-1, -1, low0 < low1 ? low0 : low1,\n-\t\t\t     TYPE_PRECISION (type), &low, &high, 1);\n-\t      lshift = build_int_cst_wide (type, low, high);\n+\t      lshift = build_int_cst (type, -1);\n+\t      lshift = int_const_binop (code, lshift, arg1, 0);\n \n \t      return fold_build2 (BIT_AND_EXPR, type, arg00, lshift);\n \t    }\n \t}\n \n-\n       /* Rewrite an LROTATE_EXPR by a constant into an\n \t RROTATE_EXPR by a new constant.  */\n       if (code == LROTATE_EXPR && TREE_CODE (arg1) == INTEGER_CST)"}, {"sha": "0baaf8a6e86688ffe649e437012165d9ede8bb6f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a165e746471b32ea442c325732f5c2907034db45/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a165e746471b32ea442c325732f5c2907034db45/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a165e746471b32ea442c325732f5c2907034db45", "patch": "@@ -1,3 +1,7 @@\n+2005-06-12  James A. Morrison  <phython@gcc.gnu.org>\n+\n+\t* ggcc.dg/pr14796-1.c: Add tests for (X << C) >> C.\n+\n 2005-06-12  Roger Sayle  <roger@eyesopen.com>\n \n \tPR c++/21930"}, {"sha": "7ddc4fe3467c07262d43225e9644d2978887038b", "filename": "gcc/testsuite/gcc.dg/pr14796-1.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a165e746471b32ea442c325732f5c2907034db45/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14796-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a165e746471b32ea442c325732f5c2907034db45/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14796-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14796-1.c?ref=a165e746471b32ea442c325732f5c2907034db45", "patch": "@@ -9,6 +9,16 @@ int g (int b) {\n \treturn (b >> 5) << 5;\n }\n \n+unsigned long long h (unsigned long long c) {\n+\treturn (c << 60) >> 60;\n+}\n+\n+int l (int d) {\n+\treturn (d << 6) >> 6;\n+}\n+\n /* { dg-final { scan-tree-dump \"a << 9\" \"gimple\" } } */\n /* { dg-final { scan-tree-dump \"b & -32\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"c & 15\" \"gimple\" } } */\n+/* { dg-final { scan-tree-dump \"d << 6\" \"gimple\" } } */\n /* { dg-final { cleanup-tree-dump \"gimple\" } } */"}]}