{"sha": "1457ddca5a4c96ff2c6f3272e626b245179afebe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ1N2RkY2E1YTRjOTZmZjJjNmYzMjcyZTYyNmIyNDUxNzlhZmViZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2009-01-16T02:55:11Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-01-16T02:55:11Z"}, "message": "Makefile.am (sources): Add math_stubs_long_double.cc.\n\n2009-01-15  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* src/Makefile.am (sources): Add math_stubs_long_double.cc.\n\t* src/Makefile.in: Regenerate.\n\t* src/math_stubs_long_double.cc: New, from libmath/stubs.c.\n\nFrom-SVN: r143420", "tree": {"sha": "f122548c2e52b668856260035b7797f03d00475c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f122548c2e52b668856260035b7797f03d00475c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1457ddca5a4c96ff2c6f3272e626b245179afebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1457ddca5a4c96ff2c6f3272e626b245179afebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1457ddca5a4c96ff2c6f3272e626b245179afebe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1457ddca5a4c96ff2c6f3272e626b245179afebe/comments", "author": null, "committer": null, "parents": [{"sha": "6a1c0a18ed07ca591730465be8ab8ddb7fbd5324", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a1c0a18ed07ca591730465be8ab8ddb7fbd5324", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a1c0a18ed07ca591730465be8ab8ddb7fbd5324"}], "stats": {"total": 268, "additions": 249, "deletions": 19}, "files": [{"sha": "f33067b896d8926aaabbeb5a77e3ad26f0ccb48f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1457ddca5a4c96ff2c6f3272e626b245179afebe/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1457ddca5a4c96ff2c6f3272e626b245179afebe/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1457ddca5a4c96ff2c6f3272e626b245179afebe", "patch": "@@ -1,3 +1,9 @@\n+2009-01-15  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* src/Makefile.am (sources): Add math_stubs_long_double.cc.\n+\t* src/Makefile.in: Regenerate.\n+\t* src/math_stubs_long_double.cc: New, from libmath/stubs.c.\n+\n 2009-01-15  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/32666"}, {"sha": "c922d8fea9416786d341e2a333b1502baf52174b", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1457ddca5a4c96ff2c6f3272e626b245179afebe/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1457ddca5a4c96ff2c6f3272e626b245179afebe/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=1457ddca5a4c96ff2c6f3272e626b245179afebe", "patch": "@@ -162,6 +162,7 @@ sources = \\\n \tlocale_init.cc \\\n \tlocale_facets.cc \\\n \tlocalename.cc \\\n+\tmath_stubs_long_double.cc \\\n \tstdexcept.cc \\\n \tstrstream.cc \\\n \tsystem_error.cc \\"}, {"sha": "ad75f4a674c1a720b1ec701d0113ed5f72e367f4", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1457ddca5a4c96ff2c6f3272e626b245179afebe/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1457ddca5a4c96ff2c6f3272e626b245179afebe/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=1457ddca5a4c96ff2c6f3272e626b245179afebe", "patch": "@@ -79,17 +79,18 @@ am__libstdc___la_SOURCES_DIST = atomic.cc bitmap_allocator.cc \\\n \thash_c++0x.cc globals_io.cc hashtable.cc hashtable_c++0x.cc \\\n \tios.cc ios_failure.cc ios_init.cc ios_locale.cc limits.cc \\\n \tlimits_c++0x.cc list.cc debug_list.cc locale.cc locale_init.cc \\\n-\tlocale_facets.cc localename.cc stdexcept.cc strstream.cc \\\n-\tsystem_error.cc tree.cc allocator-inst.cc concept-inst.cc \\\n-\tfstream-inst.cc ext-inst.cc ios-inst.cc iostream-inst.cc \\\n-\tistream-inst.cc istream.cc locale-inst.cc misc-inst.cc \\\n-\tostream-inst.cc sstream-inst.cc streambuf-inst.cc streambuf.cc \\\n-\tstring-inst.cc valarray-inst.cc wlocale-inst.cc \\\n-\twstring-inst.cc mutex.cc condition_variable.cc chrono.cc \\\n-\tthread.cc atomicity.cc codecvt_members.cc collate_members.cc \\\n-\tctype_members.cc messages_members.cc monetary_members.cc \\\n-\tnumeric_members.cc time_members.cc basic_file.cc c++locale.cc \\\n-\tcompatibility-ldbl.cc parallel_list.cc parallel_settings.cc\n+\tlocale_facets.cc localename.cc math_stubs_long_double.cc \\\n+\tstdexcept.cc strstream.cc system_error.cc tree.cc \\\n+\tallocator-inst.cc concept-inst.cc fstream-inst.cc ext-inst.cc \\\n+\tios-inst.cc iostream-inst.cc istream-inst.cc istream.cc \\\n+\tlocale-inst.cc misc-inst.cc ostream-inst.cc sstream-inst.cc \\\n+\tstreambuf-inst.cc streambuf.cc string-inst.cc valarray-inst.cc \\\n+\twlocale-inst.cc wstring-inst.cc mutex.cc condition_variable.cc \\\n+\tchrono.cc thread.cc atomicity.cc codecvt_members.cc \\\n+\tcollate_members.cc ctype_members.cc messages_members.cc \\\n+\tmonetary_members.cc numeric_members.cc time_members.cc \\\n+\tbasic_file.cc c++locale.cc compatibility-ldbl.cc \\\n+\tparallel_list.cc parallel_settings.cc\n am__objects_1 = atomicity.lo codecvt_members.lo collate_members.lo \\\n \tctype_members.lo messages_members.lo monetary_members.lo \\\n \tnumeric_members.lo time_members.lo\n@@ -104,14 +105,14 @@ am__objects_5 = atomic.lo bitmap_allocator.lo pool_allocator.lo \\\n \tglobals_io.lo hashtable.lo hashtable_c++0x.lo ios.lo \\\n \tios_failure.lo ios_init.lo ios_locale.lo limits.lo \\\n \tlimits_c++0x.lo list.lo debug_list.lo locale.lo locale_init.lo \\\n-\tlocale_facets.lo localename.lo stdexcept.lo strstream.lo \\\n-\tsystem_error.lo tree.lo allocator-inst.lo concept-inst.lo \\\n-\tfstream-inst.lo ext-inst.lo ios-inst.lo iostream-inst.lo \\\n-\tistream-inst.lo istream.lo locale-inst.lo misc-inst.lo \\\n-\tostream-inst.lo sstream-inst.lo streambuf-inst.lo streambuf.lo \\\n-\tstring-inst.lo valarray-inst.lo wlocale-inst.lo \\\n-\twstring-inst.lo mutex.lo condition_variable.lo chrono.lo \\\n-\tthread.lo $(am__objects_1) $(am__objects_4)\n+\tlocale_facets.lo localename.lo math_stubs_long_double.lo \\\n+\tstdexcept.lo strstream.lo system_error.lo tree.lo \\\n+\tallocator-inst.lo concept-inst.lo fstream-inst.lo ext-inst.lo \\\n+\tios-inst.lo iostream-inst.lo istream-inst.lo istream.lo \\\n+\tlocale-inst.lo misc-inst.lo ostream-inst.lo sstream-inst.lo \\\n+\tstreambuf-inst.lo streambuf.lo string-inst.lo valarray-inst.lo \\\n+\twlocale-inst.lo wstring-inst.lo mutex.lo condition_variable.lo \\\n+\tchrono.lo thread.lo $(am__objects_1) $(am__objects_4)\n am_libstdc___la_OBJECTS = $(am__objects_5)\n libstdc___la_OBJECTS = $(am_libstdc___la_OBJECTS)\n DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)\n@@ -411,6 +412,7 @@ sources = \\\n \tlocale_init.cc \\\n \tlocale_facets.cc \\\n \tlocalename.cc \\\n+\tmath_stubs_long_double.cc \\\n \tstdexcept.cc \\\n \tstrstream.cc \\\n \tsystem_error.cc \\"}, {"sha": "e46400e7e4b3b8216d78a77d3a09a3ddc76fec93", "filename": "libstdc++-v3/src/math_stubs_long_double.cc", "status": "added", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1457ddca5a4c96ff2c6f3272e626b245179afebe/libstdc%2B%2B-v3%2Fsrc%2Fmath_stubs_long_double.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1457ddca5a4c96ff2c6f3272e626b245179afebe/libstdc%2B%2B-v3%2Fsrc%2Fmath_stubs_long_double.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmath_stubs_long_double.cc?ref=1457ddca5a4c96ff2c6f3272e626b245179afebe", "patch": "@@ -0,0 +1,221 @@\n+// Stub definitions for long double math.\n+\n+// Copyright (C) 2001, 2002, 2003, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <cmath>\n+\n+// For targets which do not have support for long double versions,\n+// we use the following crude approximations. We keep saying that we'll do\n+// better later, but never do.\n+\n+extern \"C\" \n+{\n+#ifndef _GLIBCXX_HAVE_FABSL\n+  long double\n+  fabsl(long double x)\n+  {\n+    return fabs((double) x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_ACOSL\n+  long double\n+  acosl(long double x)\n+  {\n+    return acos((double) x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_ASINL\n+  long double\n+  asinl(long double x)\n+  {\n+    return asin((double) x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_ATANL\n+  long double\n+  atanl(long double x)\n+  {\n+    return atan ((double) x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_ATAN2L\n+  long double\n+  atan2l(long double x, long double y)\n+  {\n+    return atan2((double) x, (double) y);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_COSL\n+  long double\n+  cosl(long double x)\n+  {\n+    return cos((double) x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_COSHL\n+  long double\n+  coshl(long double x)\n+  {\n+    return cosh((double) x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_EXPL\n+  long double\n+  expl(long double x)\n+  {\n+    return exp((double) x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_FLOORL\n+  long double\n+  floorl(long double x)\n+  {\n+    return floor((double) x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_FMODL\n+  long double\n+  fmodl(long double x, long double y)\n+  {\n+    return fmod((double) x, (double) y);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_FREXPL\n+  long double\n+  frexpl(long double x, int *exp)\n+  {\n+    return frexp((double) x, exp);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_SQRTL\n+  long double\n+  sqrtl(long double x)\n+  {\n+    return  sqrt((double) x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_HYPOTL\n+  long double\n+  hypotl(long double x, long double y)\n+  {\n+    long double s = fabsl(x) + fabsl(y);\n+    if (s == 0.0L)\n+      return s;\n+    x /= s; y /= s;\n+    return s * sqrtl(x * x + y * y);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_LDEXPL\n+  long double\n+  ldexpl(long double x, int exp)\n+  {\n+    return ldexp((double) x, exp);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_LOGL\n+  long double\n+  logl(long double x)\n+  {\n+    return log((double) x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_LOG10L\n+  long double\n+  log10l(long double x)\n+  {\n+    return log10((double) x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_MODFL\n+  long double\n+  modfl(long double x, long double *iptr)\n+  {\n+    double result, temp;\n+\n+    result = modf((double) x, &temp);\n+    *iptr = temp;\n+    return result;\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_POWL\n+  long double\n+  powl(long double x, long double y)\n+  {\n+    return pow((double) x, (double) y);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_SINL\n+  long double\n+  sinl(long double x)\n+  {\n+    return sin((double) x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_SINHL\n+  long double\n+  sinhl(long double x)\n+  {\n+    return sinh((double) x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_TANL\n+  long double\n+  tanl(long double x)\n+  {\n+    return tan((double) x);\n+  }\n+#endif\n+\n+#ifndef _GLIBCXX_HAVE_TANHL\n+  long double\n+  tanhl(long double x)\n+  {\n+    return tanh((double) x);\n+  }\n+#endif\n+} // extern \"C\""}]}