{"sha": "b313b165a4eac02c7fd079082415ecfac41a0713", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMxM2IxNjVhNGVhYzAyYzdmZDA3OTA4MjQxNWVjZmFjNDFhMDcxMw==", "commit": {"author": {"name": "Douglas B Rupp", "email": "rupp@gnat.com", "date": "2010-06-29T18:53:39Z"}, "committer": {"name": "Douglas Rupp", "email": "rupp@gcc.gnu.org", "date": "2010-06-29T18:53:39Z"}, "message": "vmsdbg.h (DST_K_TBG): New DST constant.\n\n\t* vmsdbg.h (DST_K_TBG): New DST constant.\n\t* vmsdbgout.c (addr_const_to_string): Removed, not referenced.\n\t(write_modbeg): Cast module_language to avoid warning.\n\t(write_rtnbeg): Use DST_K_TBG vice magic mystery number.\n\tMinor reformatting.\n\nFrom-SVN: r161549", "tree": {"sha": "7b5679c103640854652a56ca388be83dfa4d2e15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b5679c103640854652a56ca388be83dfa4d2e15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b313b165a4eac02c7fd079082415ecfac41a0713", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b313b165a4eac02c7fd079082415ecfac41a0713", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b313b165a4eac02c7fd079082415ecfac41a0713", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b313b165a4eac02c7fd079082415ecfac41a0713/comments", "author": null, "committer": null, "parents": [{"sha": "38f8b050edd36ac977c564cab41cc1ce8e8a073e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38f8b050edd36ac977c564cab41cc1ce8e8a073e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38f8b050edd36ac977c564cab41cc1ce8e8a073e"}], "stats": {"total": 145, "additions": 11, "deletions": 134}, "files": [{"sha": "868bbe11c7140c16ac4616b55ce01faeccd54443", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b313b165a4eac02c7fd079082415ecfac41a0713/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b313b165a4eac02c7fd079082415ecfac41a0713/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b313b165a4eac02c7fd079082415ecfac41a0713", "patch": "@@ -1,3 +1,10 @@\n+2010-06-29  Douglas B Rupp  <rupp@gnat.com>\n+\n+\t* vmsdbg.h (DST_K_TBG): New DST constant.\n+\t* vmsdbgout.c (addr_const_to_string): Removed, not referenced.\n+\t(write_modbeg): Cast module_language to avoid warning.\n+\t(write_rtnbeg): Use DST_K_TBG vice magic mystery number.\n+\n 2010-06-29  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \tPR other/44034"}, {"sha": "1c62b363a3444d51af55286f4ef61da9f53e84bf", "filename": "gcc/vmsdbg.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b313b165a4eac02c7fd079082415ecfac41a0713/gcc%2Fvmsdbg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b313b165a4eac02c7fd079082415ecfac41a0713/gcc%2Fvmsdbg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbg.h?ref=b313b165a4eac02c7fd079082415ecfac41a0713", "patch": "@@ -28,7 +28,8 @@ along with GCC; see the file COPYING3.  If not see\n     size of the struct.  */\n \n /* Header type codes.  */\n-typedef enum _DST_TYPE {DST_K_SOURCE = 155, DST_K_PROLOG = 162,\n+typedef enum _DST_TYPE {DST_K_TBG = 0x17,\n+\t\t\tDST_K_SOURCE = 155, DST_K_PROLOG = 162,\n \t\t\tDST_K_BLKBEG = 176, DST_K_BLKEND = 177,\n \t\t\tDST_K_LINE_NUM = 185, DST_K_MODBEG = 188,\n \t\t\tDST_K_MODEND = 189, DST_K_RTNBEG = 190,"}, {"sha": "2bf0aff21e1a9dfd1aee5ee273f37794c65b55d0", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 2, "deletions": 133, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b313b165a4eac02c7fd079082415ecfac41a0713/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b313b165a4eac02c7fd079082415ecfac41a0713/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=b313b165a4eac02c7fd079082415ecfac41a0713", "patch": "@@ -149,7 +149,6 @@ static unsigned int line_info_table_in_use;\n /* Forward declarations for functions defined in this file.  */\n static char *full_name (const char *);\n static unsigned int lookup_filename (const char *);\n-static void addr_const_to_string (char *, rtx);\n static int write_debug_header (DST_HEADER *, const char *, int);\n static int write_debug_addr (const char *, const char *, int);\n static int write_debug_data1 (unsigned int, const char *, int);\n@@ -425,136 +424,6 @@ static char text_end_label[MAX_ARTIFICIAL_LABEL_BYTES];\n #endif\n \n \f\n-/* General utility functions.  */\n-\n-/* Convert an integer constant expression into assembler syntax.  Addition and\n-   subtraction are the only arithmetic that may appear in these expressions.\n-   This is an adaptation of output_addr_const in final.c.  Here, the target\n-   of the conversion is a string buffer.  We can't use output_addr_const\n-   directly, because it writes to a file.  */\n-\n-static void\n-addr_const_to_string (char *str, rtx x)\n-{\n-  char buf1[256];\n-  char buf2[256];\n-\n- restart:\n-  str[0] = '\\0';\n-  switch (GET_CODE (x))\n-    {\n-    case PC:\n-      gcc_assert (flag_pic);\n-      strcat (str, \",\");\n-      break;\n-\n-    case SYMBOL_REF:\n-      ASM_NAME_TO_STRING (buf1, XSTR (x, 0));\n-      strcat (str, buf1);\n-      break;\n-\n-    case LABEL_REF:\n-      ASM_GENERATE_INTERNAL_LABEL (buf1, \"L\", CODE_LABEL_NUMBER (XEXP (x, 0)));\n-      ASM_NAME_TO_STRING (buf2, buf1);\n-      strcat (str, buf2);\n-      break;\n-\n-    case CODE_LABEL:\n-      ASM_GENERATE_INTERNAL_LABEL (buf1, \"L\", CODE_LABEL_NUMBER (x));\n-      ASM_NAME_TO_STRING (buf2, buf1);\n-      strcat (str, buf2);\n-      break;\n-\n-    case CONST_INT:\n-      sprintf (buf1, HOST_WIDE_INT_PRINT_DEC, INTVAL (x));\n-      strcat (str, buf1);\n-      break;\n-\n-    case CONST:\n-      /* This used to output parentheses around the expression, but that does\n-         not work on the 386 (either ATT or BSD assembler).  */\n-      addr_const_to_string (buf1, XEXP (x, 0));\n-      strcat (str, buf1);\n-      break;\n-\n-    case CONST_DOUBLE:\n-      if (GET_MODE (x) == VOIDmode)\n-\t{\n-\t  /* We can use %d if the number is one word and positive.  */\n-\t  if (CONST_DOUBLE_HIGH (x))\n-\t    sprintf (buf1, HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n-\t\t     CONST_DOUBLE_HIGH (x), CONST_DOUBLE_LOW (x));\n-\t  else if (CONST_DOUBLE_LOW (x) < 0)\n-\t    sprintf (buf1, HOST_WIDE_INT_PRINT_HEX, CONST_DOUBLE_LOW (x));\n-\t  else\n-\t    sprintf (buf1, HOST_WIDE_INT_PRINT_DEC,\n-\t\t     CONST_DOUBLE_LOW (x));\n-\t  strcat (str, buf1);\n-\t}\n-      else\n-\t/* We can't handle floating point constants;\n-\t   TARGET_PRINT_OPERAND must handle them.  */\n-\toutput_operand_lossage (\"floating constant misused\");\n-      break;\n-\n-    case PLUS:\n-      /* Some assemblers need integer constants to appear last (eg masm).  */\n-      if (CONST_INT_P (XEXP (x, 0)))\n-\t{\n-\t  addr_const_to_string (buf1, XEXP (x, 1));\n-\t  strcat (str, buf1);\n-\t  if (INTVAL (XEXP (x, 0)) >= 0)\n-\t    strcat (str, \"+\");\n-\t  addr_const_to_string (buf1, XEXP (x, 0));\n-\t  strcat (str, buf1);\n-\t}\n-      else\n-\t{\n-\t  addr_const_to_string (buf1, XEXP (x, 0));\n-\t  strcat (str, buf1);\n-\t  if (INTVAL (XEXP (x, 1)) >= 0)\n-\t    strcat (str, \"+\");\n-\t  addr_const_to_string (buf1, XEXP (x, 1));\n-\t  strcat (str, buf1);\n-\t}\n-      break;\n-\n-    case MINUS:\n-      /* Avoid outputting things like x-x or x+5-x, since some assemblers\n-         can't handle that.  */\n-      x = simplify_subtraction (x);\n-      if (GET_CODE (x) != MINUS)\n-\tgoto restart;\n-\n-      addr_const_to_string (buf1, XEXP (x, 0));\n-      strcat (str, buf1);\n-      strcat (str, \"-\");\n-      if (CONST_INT_P (XEXP (x, 1))\n-\t  && INTVAL (XEXP (x, 1)) < 0)\n-\t{\n-\t  strcat (str, \"(\");\n-\t  addr_const_to_string (buf1, XEXP (x, 1));\n-\t  strcat (str, buf1);\n-\t  strcat (str, \")\");\n-\t}\n-      else\n-\t{\n-\t  addr_const_to_string (buf1, XEXP (x, 1));\n-\t  strcat (str, buf1);\n-\t}\n-      break;\n-\n-    case ZERO_EXTEND:\n-    case SIGN_EXTEND:\n-      addr_const_to_string (buf1, XEXP (x, 0));\n-      strcat (str, buf1);\n-      break;\n-\n-    default:\n-      output_operand_lossage (\"invalid expression as operand\");\n-    }\n-}\n-\n /* Output the debug header HEADER.  Also output COMMENT if flag_verbose_asm is\n    set.  Return the header size.  Just return the size if DOSIZEONLY is\n    nonzero.  */\n@@ -744,7 +613,7 @@ write_modbeg (int dosizeonly)\n   modbeg.dst_b_modbeg_flags.dst_v_modbeg_version = 1;\n   modbeg.dst_b_modbeg_flags.dst_v_modbeg_unused = 0;\n   modbeg.dst_b_modbeg_unused = 0;\n-  modbeg.dst_l_modbeg_language = module_language;\n+  modbeg.dst_l_modbeg_language = (DST_LANGUAGE) module_language;\n   modbeg.dst_w_version_major = DST_K_VERSION_MAJOR;\n   modbeg.dst_w_version_minor = DST_K_VERSION_MINOR;\n   modbeg.dst_b_modbeg_name = strlen (module_name);\n@@ -823,7 +692,7 @@ write_rtnbeg (int rtnnum, int dosizeonly)\n \t + string count byte + string length */\n       header.dst__header_length.dst_w_length\n \t= DST_K_DST_HEADER_SIZE - 1 + 1 + 4 + 1 + strlen (go);\n-      header.dst__header_type.dst_w_type = 0x17;\n+      header.dst__header_type.dst_w_type = DST_K_TBG;\n \n       totsize += write_debug_header (&header, \"transfer\", dosizeonly);\n "}]}