{"sha": "de36f65dd133d189aa889f70bf380499596a310c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUzNmY2NWRkMTMzZDE4OWFhODg5ZjcwYmYzODA0OTk1OTZhMzEwYw==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-11-03T20:27:31Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2002-11-03T20:27:31Z"}, "message": "GNU Classpath merge.\n\n2002-10-31  Stephen Crawley  <crawley@dstc.edu.au>\n\n\t* java/lang/Double.java (valueOf): Return new Double(parseDouble(s)).\n\n2002-10-31  Wu Gansha <gansha.wu@intel.com>:\n\n        * java/util/ArrayList.java (readObject, writeObject): Only read/write\n        size items.\n\n2002-10-31  Wu Gansha <gansha.wu@intel.com>:\n\n        * java/io/DataInputStream.java (convertFromUTF): Give StringBuffer an\n        initial estimated size to avoid enlarge buffer frequently.\n\n2002-10-31  Wu Gansha <gansha.wu@intel.com>:\n\n\t* java/lang/reflect/Proxy.java (ProxyType): Set loader to System\n\tClassLoader when null.\n\t(ProxyType.hashCode): Loader null check no longer needed.\n\t(ProxyType.sameTypes): New method.\n\t(ProxyType.equals): Use new method.\n\n2002-10-31  Mark Wielaard  <mark@klomp.org>\n\n        * java/net/URLDecoder.java (decode): Initialize Stringbuffer size to\n\tlength of String.\n\t* java/net/URLEncoder.java (encode): Likewise.\n\n2002-10-31  Mark Wielaard  <mark@klomp.org>\n\n\t* java/util/zip/ZipInputStream.java (getNextEntry): Throw IOException\n\twhen stream is closed.\n\t(closeEntry): Likewise.\n\t(read): Likewise.\n\t* java/util/zip/ZipOutputStream.java (putNextEntry): Throw\n\tZipException when no entry active.\n\t(closeEntry): Likewise.\n\t(write): Likewise.\n\nFrom-SVN: r58772", "tree": {"sha": "30c789f77765f6a4f5d115a1720bdb304829cfd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30c789f77765f6a4f5d115a1720bdb304829cfd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de36f65dd133d189aa889f70bf380499596a310c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de36f65dd133d189aa889f70bf380499596a310c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de36f65dd133d189aa889f70bf380499596a310c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de36f65dd133d189aa889f70bf380499596a310c/comments", "author": null, "committer": null, "parents": [{"sha": "c33c471beba9625b037428df4d4da0ecd5cbba4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c33c471beba9625b037428df4d4da0ecd5cbba4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c33c471beba9625b037428df4d4da0ecd5cbba4d"}], "stats": {"total": 141, "additions": 109, "deletions": 32}, "files": [{"sha": "24820d84019e0a65943b79ccc87522ed86901a6e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de36f65dd133d189aa889f70bf380499596a310c/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de36f65dd133d189aa889f70bf380499596a310c/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=de36f65dd133d189aa889f70bf380499596a310c", "patch": "@@ -1,3 +1,42 @@\n+2002-10-31  Stephen Crawley  <crawley@dstc.edu.au>\n+\n+\t* java/lang/Double.java (valueOf): Return new Double(parseDouble(s)).\n+\n+2002-10-31  Wu Gansha <gansha.wu@intel.com>:\n+\n+        * java/util/ArrayList.java (readObject, writeObject): Only read/write\n+        size items.\n+\n+2002-10-31  Wu Gansha <gansha.wu@intel.com>:\n+\n+        * java/io/DataInputStream.java (convertFromUTF): Give StringBuffer an\n+        initial estimated size to avoid enlarge buffer frequently.\n+\n+2002-10-31  Wu Gansha <gansha.wu@intel.com>:\n+\n+\t* java/lang/reflect/Proxy.java (ProxyType): Set loader to System\n+\tClassLoader when null.\n+\t(ProxyType.hashCode): Loader null check no longer needed.\n+\t(ProxyType.sameTypes): New method.\n+\t(ProxyType.equals): Use new method.\n+\n+2002-10-31  Mark Wielaard  <mark@klomp.org>\n+\n+        * java/net/URLDecoder.java (decode): Initialize Stringbuffer size to\n+\tlength of String.\n+\t* java/net/URLEncoder.java (encode): Likewise.\n+\n+2002-10-31  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/util/zip/ZipInputStream.java (getNextEntry): Throw IOException\n+\twhen stream is closed.\n+\t(closeEntry): Likewise.\n+\t(read): Likewise.\n+\t* java/util/zip/ZipOutputStream.java (putNextEntry): Throw\n+\tZipException when no entry active.\n+\t(closeEntry): Likewise.\n+\t(write): Likewise.\n+\n 2002-11-02  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/Class.h: Move JV_STATE_ERROR before JV_STATE_DONE."}, {"sha": "52c0c7a7b82bfe0b7a71da62238cd32253bac988", "filename": "libjava/java/io/DataInputStream.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de36f65dd133d189aa889f70bf380499596a310c/libjava%2Fjava%2Fio%2FDataInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de36f65dd133d189aa889f70bf380499596a310c/libjava%2Fjava%2Fio%2FDataInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FDataInputStream.java?ref=de36f65dd133d189aa889f70bf380499596a310c", "patch": "@@ -734,7 +734,9 @@ static long convertToLong(byte[] buf)\n   static String convertFromUTF(byte[] buf) \n     throws EOFException, UTFDataFormatException\n   {\n-    StringBuffer strbuf = new StringBuffer();\n+    // Give StringBuffer an initial estimated size to avoid \n+    // enlarge buffer frequently\n+    StringBuffer strbuf = new StringBuffer(buf.length/2 + 2);\n \n     for (int i = 0; i < buf.length; )\n       {"}, {"sha": "199f64ee5b888caf4bcf11768dc750c823e81fa5", "filename": "libjava/java/lang/Double.java", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de36f65dd133d189aa889f70bf380499596a310c/libjava%2Fjava%2Flang%2FDouble.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de36f65dd133d189aa889f70bf380499596a310c/libjava%2Fjava%2Flang%2FDouble.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FDouble.java?ref=de36f65dd133d189aa889f70bf380499596a310c", "patch": "@@ -191,10 +191,7 @@ public static String toString(double d)\n    */\n   public static Double valueOf(String s)\n   {\n-    // XXX just call new Double(parseDouble(s));\n-    if (s == null)\n-      throw new NullPointerException();\n-    return new Double(s);\n+    return new Double(parseDouble(s));\n   }\n \n   /**"}, {"sha": "82cf3722263d5fa899ac9789d3cd7e9d87035003", "filename": "libjava/java/lang/reflect/Proxy.java", "status": "modified", "additions": 48, "deletions": 10, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de36f65dd133d189aa889f70bf380499596a310c/libjava%2Fjava%2Flang%2Freflect%2FProxy.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de36f65dd133d189aa889f70bf380499596a310c/libjava%2Fjava%2Flang%2Freflect%2FProxy.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FProxy.java?ref=de36f65dd133d189aa889f70bf380499596a310c", "patch": "@@ -462,7 +462,6 @@ private static native ProxyData getProxyData0(ClassLoader loader,\n   private static native Class generateProxyClass0(ClassLoader loader,\n                                                   ProxyData data);\n \n-\f\n   /**\n    * Helper class for mapping unique ClassLoader and interface combinations\n    * to proxy classes.\n@@ -490,6 +489,8 @@ private static native Class generateProxyClass0(ClassLoader loader,\n      */\n     ProxyType(ClassLoader loader, Class[] interfaces)\n     {\n+      if (loader == null)\n+         loader = ClassLoader.getSystemClassLoader();\n       this.loader = loader;\n       this.interfaces = interfaces;\n     }\n@@ -501,12 +502,56 @@ private static native Class generateProxyClass0(ClassLoader loader,\n      */\n     public int hashCode()\n     {\n-      int hash = (loader == null) ? 0 : loader.hashCode();\n+      //loader is always not null\n+      int hash = loader.hashCode();\n       for (int i = 0; i < interfaces.length; i++)\n         hash = hash * 31 + interfaces[i].hashCode();\n       return hash;\n     }\n \n+    // A more comprehensive comparison of two arrays,\n+    //   ignore array element order, and\n+    //   ignore redundant elements\n+    private static boolean sameTypes(Class arr1[], Class arr2[]) {\n+      if (arr1.length == 1 && arr2.length == 1) {\n+        return arr1[0] == arr2[0];\n+      }\n+        \n+      // total occurrance of elements of arr1 in arr2\n+      int total_occ_of_arr1_in_arr2 = 0;\n+    each_type:\n+      for (int i = arr1.length; --i >= 0; ) \n+      {\n+        Class t = arr1[i];\n+        for (int j = i; --j >= 0; ) \n+        {\n+          if (t == arr1[j]) \n+          { //found duplicate type\n+            continue each_type;  \n+          }\n+        }\n+            \n+        // count c(a unique element of arr1)'s \n+        //   occurrences in arr2\n+        int occ_in_arr2 = 0;\n+        for (int j = arr2.length; --j >= 0; ) \n+        {\n+          if (t == arr2[j]) \n+          {\n+            ++occ_in_arr2;\n+          }\n+        }\n+        if (occ_in_arr2 == 0) \n+        { // t does not occur in arr2\n+          return false;\n+        }\n+        \n+        total_occ_of_arr1_in_arr2 += occ_in_arr2;\n+      }\n+      // now, each element of arr2 must have been visited\n+      return total_occ_of_arr1_in_arr2 == arr2.length;\n+    }\n+\n     /**\n      * Calculates equality.\n      *\n@@ -518,15 +563,10 @@ public boolean equals(Object other)\n       ProxyType pt = (ProxyType) other;\n       if (loader != pt.loader || interfaces.length != pt.interfaces.length)\n         return false;\n-      int i = interfaces.length;\n-      while (--i >= 0)\n-        if (interfaces[i] != pt.interfaces[i])\n-          return false;\n-      return true;\n+\t  return sameTypes(interfaces, pt.interfaces);\n     }\n   } // class ProxyType\n \n-\f\n   /**\n    * Helper class which allows hashing of a method name and signature\n    * without worrying about return type, declaring class, or throws clause,\n@@ -681,7 +721,6 @@ public boolean equals(Object other)\n     }\n   } // class ProxySignature\n \n-\f\n   /**\n    * A flat representation of all data needed to generate bytecode/instantiate\n    * a proxy class.  This is basically a struct.\n@@ -820,7 +859,6 @@ static ProxyData getProxyData(ProxyType pt)\n     }\n   } // class ProxyData\n \n-\f\n   /**\n    * Does all the work of building a class. By making this a nested class,\n    * this code is not loaded in memory if the VM has a native"}, {"sha": "36747409983edc221edb97a510dfbb1cb7d06b38", "filename": "libjava/java/net/URLDecoder.java", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de36f65dd133d189aa889f70bf380499596a310c/libjava%2Fjava%2Fnet%2FURLDecoder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de36f65dd133d189aa889f70bf380499596a310c/libjava%2Fjava%2Fnet%2FURLDecoder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLDecoder.java?ref=de36f65dd133d189aa889f70bf380499596a310c", "patch": "@@ -63,7 +63,7 @@\n public class URLDecoder\n {\n   /**\n-   * Constructor for compatibility with Sun's JDK.\n+   * Public contructor. Note that this class has only static methods.\n    */\n   public URLDecoder ()\n   {\n@@ -116,8 +116,6 @@ public static String decode(String s)\n   public static String decode(String s, String encoding)\n     throws UnsupportedEncodingException\n   {\n-    StringBuffer result = new StringBuffer();\n-\n     // First convert all '+' characters to spaces.\n     String str = s.replace('+', ' ');\n     \n@@ -126,6 +124,7 @@ public static String decode(String s, String encoding)\n     int start = 0;\n     byte[] bytes = null;\n     int length = str.length();\n+    StringBuffer result = new StringBuffer(length);\n     while ((i = str.indexOf('%', start)) >= 0)\n       {\n \t// Add all non-encoded characters to the result buffer"}, {"sha": "0f106e820de64bc527b72120c5ac13451d3fbf30", "filename": "libjava/java/net/URLEncoder.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de36f65dd133d189aa889f70bf380499596a310c/libjava%2Fjava%2Fnet%2FURLEncoder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de36f65dd133d189aa889f70bf380499596a310c/libjava%2Fjava%2Fnet%2FURLEncoder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLEncoder.java?ref=de36f65dd133d189aa889f70bf380499596a310c", "patch": "@@ -1,5 +1,5 @@\n /* URLEncoder.java -- Class to convert strings to a properly encoded URL\n-   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -39,7 +39,7 @@\n \n import java.io.UnsupportedEncodingException;\n \n-/**\n+/*\n  * Written using on-line Java Platform 1.2/1.4 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n@@ -102,11 +102,11 @@ public static String encode(String s)\n   public static String encode(String s, String encoding)\n     throws UnsupportedEncodingException\n   {\n-    StringBuffer result = new StringBuffer();\n     int length = s.length();\n     int start = 0;\n     int i = 0;\n \n+    StringBuffer result = new StringBuffer(length);\n     while (true)\n     {\n       while ( i < length && isSafe(s.charAt(i)) )"}, {"sha": "c6f6b86991df5f1424c598923dc84aeb816f2dbe", "filename": "libjava/java/util/ArrayList.java", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de36f65dd133d189aa889f70bf380499596a310c/libjava%2Fjava%2Futil%2FArrayList.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de36f65dd133d189aa889f70bf380499596a310c/libjava%2Fjava%2Futil%2FArrayList.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FArrayList.java?ref=de36f65dd133d189aa889f70bf380499596a310c", "patch": "@@ -558,7 +558,9 @@ private void writeObject(ObjectOutputStream s) throws IOException\n     // We serialize unused list entries to preserve capacity.\n     int len = data.length;\n     s.writeInt(len);\n-    for (int i = 0; i < len; i++)\n+    // it would be more efficient to just write \"size\" items,\n+    // this need readObject read \"size\" items too.\n+    for (int i = 0; i < size; i++)\n       s.writeObject(data[i]);\n   }\n \n@@ -578,7 +580,7 @@ private void readObject(ObjectInputStream s)\n     s.defaultReadObject();\n     int capacity = s.readInt();\n     data = new Object[capacity];\n-    for (int i = 0; i < capacity; i++)\n+    for (int i = 0; i < size; i++)\n       data[i] = s.readObject();\n   }\n }"}, {"sha": "c9a6c0159e7c85a1d65e1e68d9a8c9715b2b6164", "filename": "libjava/java/util/zip/ZipInputStream.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de36f65dd133d189aa889f70bf380499596a310c/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de36f65dd133d189aa889f70bf380499596a310c/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipInputStream.java?ref=de36f65dd133d189aa889f70bf380499596a310c", "patch": "@@ -139,7 +139,7 @@ private final int readLeInt() throws IOException\n   public ZipEntry getNextEntry() throws IOException\n   {\n     if (crc == null)\n-      throw new IllegalStateException(\"Closed.\");\n+      throw new IOException(\"Stream closed.\");\n     if (entry != null)\n       closeEntry();\n \n@@ -216,7 +216,7 @@ private void readDataDescr() throws IOException\n   public void closeEntry() throws IOException\n   {\n     if (crc == null)\n-      throw new IllegalStateException(\"Closed.\");\n+      throw new IOException(\"Stream closed.\");\n     if (entry == null)\n       return;\n \n@@ -287,7 +287,7 @@ public int read() throws IOException\n   public int read(byte[] b, int off, int len) throws IOException\n   {\n     if (crc == null)\n-      throw new IllegalStateException(\"Closed.\");\n+      throw new IOException(\"Stream closed.\");\n     if (entry == null)\n       return -1;\n     boolean finished = false;"}, {"sha": "44c4a9cc9b138288acf95ad98bd7b197c10533e8", "filename": "libjava/java/util/zip/ZipOutputStream.java", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de36f65dd133d189aa889f70bf380499596a310c/libjava%2Fjava%2Futil%2Fzip%2FZipOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de36f65dd133d189aa889f70bf380499596a310c/libjava%2Fjava%2Futil%2Fzip%2FZipOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FZipOutputStream.java?ref=de36f65dd133d189aa889f70bf380499596a310c", "patch": "@@ -158,12 +158,12 @@ private final void writeLeInt(int value) throws IOException\n    * is not set in the entry, the current time is used.\n    * @param entry the entry.\n    * @exception IOException if an I/O error occured.\n-   * @exception IllegalStateException if stream was finished\n+   * @exception ZipException if stream was finished.\n    */\n   public void putNextEntry(ZipEntry entry) throws IOException\n   {\n     if (entries == null)\n-      throw new IllegalStateException(\"ZipOutputStream was finished\");\n+      throw new ZipException(\"ZipOutputStream was finished\");\n \n     int method = entry.getMethod();\n     int flags = 0;\n@@ -249,12 +249,12 @@ else if (method == DEFLATED)\n   /**\n    * Closes the current entry.\n    * @exception IOException if an I/O error occured.\n-   * @exception IllegalStateException if no entry is active.\n+   * @exception ZipException if no entry is active.\n    */\n   public void closeEntry() throws IOException\n   {\n     if (curEntry == null)\n-      throw new IllegalStateException(\"No open entry\");\n+      throw new ZipException(\"No open entry\");\n \n     /* First finish the deflater, if appropriate */\n     if (curMethod == DEFLATED)\n@@ -300,12 +300,12 @@ else if (curEntry.getCrc() != crc.getValue())\n   /**\n    * Writes the given buffer to the current entry.\n    * @exception IOException if an I/O error occured.\n-   * @exception IllegalStateException if no entry is active.\n+   * @exception ZipException if no entry is active.\n    */\n   public void write(byte[] b, int off, int len) throws IOException\n   {\n     if (curEntry == null)\n-      throw new IllegalStateException(\"No open entry.\");\n+      throw new ZipException(\"No open entry.\");\n \n     switch (curMethod)\n       {"}]}