{"sha": "05e59503c6e57851104649d8781727c4571a8b2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVlNTk1MDNjNmU1Nzg1MTEwNDY0OWQ4NzgxNzI3YzQ1NzFhOGIyYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-11-02T10:02:00Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-27T09:15:45Z"}, "message": "[Ada] Abort defer mismatch with SJLJ exceptions\n\ngcc/ada/\n\n\t* libgnarl/s-tasren.adb (Local_Complete_Rendezvous): Always call\n\tDefer_Abort.\n\t* libgnat/a-except.adb: Abort does not need to be deferred.\n\t* libgnarl/s-tpobop.adb (Exceptional_Complete_Entry_Body): Abort\n\tnever needs to be undeferred here.\n\t* exp_ch11.adb (Expand_Exception_Handlers): Remove difference\n\tbetween ZCX and SJLJ.\n\t* exp_ch9.adb (Expand_N_Asynchronous_Select): Remove different\n\thandling for sjlj.\n\t* exp_sel.ads, exp_sel.adb (Build_Abort_Block,\n\tBuild_Abort_Block_Handler): Ditto.", "tree": {"sha": "53eb0b232edfa68bf3283b694625ffbad3cf3f32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53eb0b232edfa68bf3283b694625ffbad3cf3f32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05e59503c6e57851104649d8781727c4571a8b2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05e59503c6e57851104649d8781727c4571a8b2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05e59503c6e57851104649d8781727c4571a8b2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05e59503c6e57851104649d8781727c4571a8b2c/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf85ff03b3e6a17da5bee164114721ea076e33ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf85ff03b3e6a17da5bee164114721ea076e33ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf85ff03b3e6a17da5bee164114721ea076e33ad"}], "stats": {"total": 171, "additions": 7, "deletions": 164}, "files": [{"sha": "3ab2ea25eabc6571e749d2de945af0940f578c08", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e59503c6e57851104649d8781727c4571a8b2c/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e59503c6e57851104649d8781727c4571a8b2c/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=05e59503c6e57851104649d8781727c4571a8b2c", "patch": "@@ -189,20 +189,13 @@ package body Exp_Ch11 is\n       Handlrs       : constant List_Id    := Exception_Handlers (HSS);\n       Loc           : constant Source_Ptr := Sloc (HSS);\n       Handler       : Node_Id;\n-      Others_Choice : Boolean;\n       Obj_Decl      : Node_Id;\n       Next_Handler  : Node_Id;\n \n       procedure Expand_Local_Exception_Handlers;\n       --  This procedure handles the expansion of exception handlers for the\n       --  optimization of local raise statements into goto statements.\n \n-      procedure Prepend_Call_To_Handler\n-        (Proc : RE_Id;\n-         Args : List_Id := No_List);\n-      --  Routine to prepend a call to the procedure referenced by Proc at\n-      --  the start of the handler code for the current Handler.\n-\n       procedure Replace_Raise_By_Goto (Raise_S : Node_Id; Goto_L1 : Node_Id);\n       --  Raise_S is a raise statement (possibly expanded, and possibly of the\n       --  form of a Raise_xxx_Error node with a condition. This procedure is\n@@ -850,36 +843,6 @@ package body Exp_Ch11 is\n          end;\n       end Expand_Local_Exception_Handlers;\n \n-      -----------------------------\n-      -- Prepend_Call_To_Handler --\n-      -----------------------------\n-\n-      procedure Prepend_Call_To_Handler\n-        (Proc : RE_Id;\n-         Args : List_Id := No_List)\n-      is\n-         Ent : constant Entity_Id := RTE (Proc);\n-\n-      begin\n-         --  If we have no Entity, then we are probably in no run time mode or\n-         --  some weird error has occurred. In either case do nothing. Note use\n-         --  of No_Location to hide this code from the debugger, so single\n-         --  stepping doesn't jump back and forth.\n-\n-         if Present (Ent) then\n-            declare\n-               Call : constant Node_Id :=\n-                        Make_Procedure_Call_Statement (No_Location,\n-                          Name => New_Occurrence_Of (RTE (Proc), No_Location),\n-                          Parameter_Associations => Args);\n-\n-            begin\n-               Prepend_To (Statements (Handler), Call);\n-               Analyze (Call, Suppress => All_Checks);\n-            end;\n-         end if;\n-      end Prepend_Call_To_Handler;\n-\n       ---------------------------\n       -- Replace_Raise_By_Goto --\n       ---------------------------\n@@ -1089,44 +1052,6 @@ package body Exp_Ch11 is\n                        (Statements (Handler), Suppress => All_Checks);\n                   end;\n                end if;\n-\n-               --  For the normal case, we have to worry about the state of\n-               --  abort deferral. Generally, we defer abort during runtime\n-               --  handling of exceptions. When control is passed to the\n-               --  handler, then in the normal case we undefer aborts. In\n-               --  any case this entire handling is relevant only if aborts\n-               --  are allowed.\n-\n-               if Abort_Allowed\n-                 and then not ZCX_Exceptions\n-               then\n-                  --  There are some special cases in which we do not do the\n-                  --  undefer. In particular a finalization (AT END) handler\n-                  --  wants to operate with aborts still deferred.\n-\n-                  --  We also suppress the call if this is the special handler\n-                  --  for Abort_Signal, since if we are aborting, we want to\n-                  --  keep aborts deferred (one abort is enough).\n-\n-                  --  If abort really needs to be deferred the expander must\n-                  --  add this call explicitly, see\n-                  --  Expand_N_Asynchronous_Select.\n-\n-                  Others_Choice :=\n-                    Nkind (First (Exception_Choices (Handler))) =\n-                                                         N_Others_Choice;\n-\n-                  if (Others_Choice\n-                       or else Entity (First (Exception_Choices (Handler))) /=\n-                                                         Stand.Abort_Signal)\n-                    and then not\n-                      (Others_Choice\n-                        and then\n-                          All_Others (First (Exception_Choices (Handler))))\n-                  then\n-                     Prepend_Call_To_Handler (RE_Abort_Undefer);\n-                  end if;\n-               end if;\n             end if;\n          end if;\n "}, {"sha": "525eee900292d6df88912c20aa9341985e282826", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e59503c6e57851104649d8781727c4571a8b2c/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e59503c6e57851104649d8781727c4571a8b2c/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=05e59503c6e57851104649d8781727c4571a8b2c", "patch": "@@ -7061,7 +7061,6 @@ package body Exp_Ch9 is\n       Enqueue_Call      : Node_Id;\n       Formals           : List_Id;\n       Hdle              : List_Id;\n-      Handler_Stmt      : Node_Id;\n       Index             : Node_Id;\n       Lim_Typ_Stmts     : List_Id;\n       N_Orig            : Node_Id;\n@@ -7737,16 +7736,6 @@ package body Exp_Ch9 is\n              Has_Created_Identifier => True,\n              Is_Asynchronous_Call_Block => True);\n \n-         --  Aborts are not deferred at beginning of exception handlers in\n-         --  ZCX mode.\n-\n-         if ZCX_Exceptions then\n-            Handler_Stmt := Make_Null_Statement (Loc);\n-\n-         else\n-            Handler_Stmt := Build_Runtime_Call (Loc, RE_Abort_Undefer);\n-         end if;\n-\n          Stmts := New_List (\n            Make_Block_Statement (Loc,\n              Handled_Statement_Sequence =>\n@@ -7763,11 +7752,11 @@ package body Exp_Ch9 is\n                    Make_Implicit_Exception_Handler (Loc,\n \n                --  when Abort_Signal =>\n-               --     Abort_Undefer.all;\n+               --     null;\n \n                      Exception_Choices =>\n                        New_List (New_Occurrence_Of (Stand.Abort_Signal, Loc)),\n-                     Statements => New_List (Handler_Stmt))))),\n+                     Statements => New_List (Make_Null_Statement (Loc)))))),\n \n          --  if not Cancelled (Bnn) then\n          --     triggered statements"}, {"sha": "ccf62c6d6836919cc44255923f2b223483569ba3", "filename": "gcc/ada/exp_sel.adb", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e59503c6e57851104649d8781727c4571a8b2c/gcc%2Fada%2Fexp_sel.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e59503c6e57851104649d8781727c4571a8b2c/gcc%2Fada%2Fexp_sel.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_sel.adb?ref=05e59503c6e57851104649d8781727c4571a8b2c", "patch": "@@ -70,27 +70,11 @@ package body Exp_Sel is\n    -------------------------------\n \n    function Build_Abort_Block_Handler (Loc : Source_Ptr) return Node_Id is\n-      Stmt : Node_Id;\n-\n    begin\n-\n-      --  With ZCX exceptions, aborts are not defered in handlers. With SJLJ,\n-      --  they are deferred at the beginning of Abort_Signal handlers.\n-\n-      if ZCX_Exceptions then\n-         Stmt := Make_Null_Statement (Loc);\n-\n-      else\n-         Stmt :=\n-           Make_Procedure_Call_Statement (Loc,\n-             Name => New_Occurrence_Of (RTE (RE_Abort_Undefer), Loc),\n-             Parameter_Associations => No_List);\n-      end if;\n-\n       return Make_Implicit_Exception_Handler (Loc,\n         Exception_Choices =>\n           New_List (New_Occurrence_Of (Stand.Abort_Signal, Loc)),\n-        Statements        => New_List (Stmt));\n+        Statements        => New_List (Make_Null_Statement (Loc)));\n    end Build_Abort_Block_Handler;\n \n    -------------"}, {"sha": "f2f2c5681edcaac115b4cd3a4a5dfb953ba7ea12", "filename": "gcc/ada/exp_sel.ads", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e59503c6e57851104649d8781727c4571a8b2c/gcc%2Fada%2Fexp_sel.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e59503c6e57851104649d8781727c4571a8b2c/gcc%2Fada%2Fexp_sel.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_sel.ads?ref=05e59503c6e57851104649d8781727c4571a8b2c", "patch": "@@ -39,21 +39,18 @@ package Exp_Sel is\n    --    begin\n    --       Blk\n    --    exception\n-   --       when Abort_Signal => Abort_Undefer / null;\n+   --       when Abort_Signal => null;\n    --    end;\n    --  Abr_Blk_Ent is the name of the generated block, Cln_Blk_Ent is the name\n    --  of the encapsulated cleanup block, Blk is the actual block name.\n    --  The exception handler code is built by Build_Abort_Block_Handler.\n \n    function Build_Abort_Block_Handler (Loc : Source_Ptr) return Node_Id;\n-   --  Generate if front-end exception:\n-   --    when others =>\n-   --      Abort_Undefer;\n-   --  or if back-end exception:\n+   --  Generate:\n    --    when others =>\n    --      null;\n    --  This is an exception handler to stop propagation of aborts, without\n-   --  modifying the deferal level.\n+   --  modifying the deferral level.\n \n    function Build_B\n      (Loc   : Source_Ptr;"}, {"sha": "b7ee8656637ee428993789ee5c396b6ba514ed10", "filename": "gcc/ada/libgnarl/s-tasren.adb", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e59503c6e57851104649d8781727c4571a8b2c/gcc%2Fada%2Flibgnarl%2Fs-tasren.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e59503c6e57851104649d8781727c4571a8b2c/gcc%2Fada%2Flibgnarl%2Fs-tasren.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tasren.adb?ref=05e59503c6e57851104649d8781727c4571a8b2c", "patch": "@@ -473,19 +473,7 @@ package body System.Tasking.Rendezvous is\n       pragma Debug\n         (Debug.Trace (Self_Id, \"Local_Complete_Rendezvous\", 'R'));\n \n-      if Ex = Ada.Exceptions.Null_Id then\n-\n-         --  The call came from normal end-of-rendezvous, so abort is not yet\n-         --  deferred.\n-\n-         Initialization.Defer_Abort (Self_Id);\n-\n-      elsif ZCX_By_Default then\n-\n-         --  With ZCX, aborts are not automatically deferred in handlers\n-\n-         Initialization.Defer_Abort (Self_Id);\n-      end if;\n+      Initialization.Defer_Abort (Self_Id);\n \n       --  We need to clean up any accepts which Self may have been serving when\n       --  it was aborted."}, {"sha": "b123c1976616148583cd7743d544310a89508b36", "filename": "gcc/ada/libgnarl/s-tpobop.adb", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e59503c6e57851104649d8781727c4571a8b2c/gcc%2Fada%2Flibgnarl%2Fs-tpobop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e59503c6e57851104649d8781727c4571a8b2c/gcc%2Fada%2Flibgnarl%2Fs-tpobop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-tpobop.adb?ref=05e59503c6e57851104649d8781727c4571a8b2c", "patch": "@@ -246,17 +246,7 @@ package body System.Tasking.Protected_Objects.Operations is\n          Entry_Call.Exception_To_Raise := Ex;\n \n          if Ex /= Ada.Exceptions.Null_Id then\n-\n-            --  An exception was raised and abort was deferred, so adjust\n-            --  before propagating, otherwise the task will stay with deferral\n-            --  enabled for its remaining life.\n-\n             Self_Id := STPO.Self;\n-\n-            if not ZCX_By_Default then\n-               Initialization.Undefer_Abort_Nestable (Self_Id);\n-            end if;\n-\n             Transfer_Occurrence\n               (Entry_Call.Self.Common.Compiler_Data.Current_Excep'Access,\n                Self_Id.Common.Compiler_Data.Current_Excep);"}, {"sha": "f7fd5bb21557102b322e3f3b8bd95229201ddd47", "filename": "gcc/ada/libgnat/a-except.adb", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05e59503c6e57851104649d8781727c4571a8b2c/gcc%2Fada%2Flibgnat%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05e59503c6e57851104649d8781727c4571a8b2c/gcc%2Fada%2Flibgnat%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-except.adb?ref=05e59503c6e57851104649d8781727c4571a8b2c", "patch": "@@ -957,11 +957,6 @@ package body Ada.Exceptions is\n \n    begin\n       Exception_Data.Set_Exception_Msg (X, E, Message);\n-\n-      if not ZCX_By_Default then\n-         Abort_Defer.all;\n-      end if;\n-\n       Complete_And_Propagate_Occurrence (X);\n    end Raise_Exception_Always;\n \n@@ -1041,11 +1036,6 @@ package body Ada.Exceptions is\n \n    begin\n       Exception_Data.Set_Exception_C_Msg (X, E, M);\n-\n-      if not ZCX_By_Default then\n-         Abort_Defer.all;\n-      end if;\n-\n       Complete_Occurrence (X);\n       return X;\n    end Create_Occurrence_From_Signal_Handler;\n@@ -1141,11 +1131,6 @@ package body Ada.Exceptions is\n       X : constant EOA := Exception_Propagation.Allocate_Occurrence;\n    begin\n       Exception_Data.Set_Exception_C_Msg (X, E, F, L, C, M);\n-\n-      if not ZCX_By_Default then\n-         Abort_Defer.all;\n-      end if;\n-\n       Complete_And_Propagate_Occurrence (X);\n    end Raise_With_Location_And_Msg;\n \n@@ -1168,13 +1153,6 @@ package body Ada.Exceptions is\n       Excep.Msg_Length                  := Ex.Msg_Length;\n       Excep.Msg (1 .. Excep.Msg_Length) := Ex.Msg (1 .. Ex.Msg_Length);\n \n-      --  The following is a common pattern, should be abstracted\n-      --  into a procedure call ???\n-\n-      if not ZCX_By_Default then\n-         Abort_Defer.all;\n-      end if;\n-\n       Complete_And_Propagate_Occurrence (Excep);\n    end Raise_With_Msg;\n \n@@ -1507,10 +1485,6 @@ package body Ada.Exceptions is\n       Saved_MO : constant System.Address := Excep.Machine_Occurrence;\n \n    begin\n-      if not ZCX_By_Default then\n-         Abort_Defer.all;\n-      end if;\n-\n       Save_Occurrence (Excep.all, Get_Current_Excep.all.all);\n       Excep.Machine_Occurrence := Saved_MO;\n       Complete_And_Propagate_Occurrence (Excep);\n@@ -1556,10 +1530,6 @@ package body Ada.Exceptions is\n \n    procedure Reraise_Occurrence_Always (X : Exception_Occurrence) is\n    begin\n-      if not ZCX_By_Default then\n-         Abort_Defer.all;\n-      end if;\n-\n       Reraise_Occurrence_No_Defer (X);\n    end Reraise_Occurrence_Always;\n "}]}