{"sha": "f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYxZTU0ZTU5Y2RhNWEyZTI4MWQ1MjVkM2Y4N2ZmYTE3OWZhZTFhZQ==", "commit": {"author": {"name": "Mark Eggleston", "email": "mark.eggleston@codethink.com", "date": "2019-10-03T09:40:23Z"}, "committer": {"name": "Mark Eggleston", "email": "markeggleston@gcc.gnu.org", "date": "2019-10-03T09:40:23Z"}, "message": "Character typenames in errors and warnings\n    \nCharacter type names now incorporate length, kind is only shown if\nthe default character is not being used.\n    \nExamples:\n   \n  character(7) is reported as CHARACTER(7)\n  character(len=20,kind=4) is reported as CHARACTER(20,4)\n   \ndummy character variables with assumed length:\n    \n  character(*) is reported as CHARACTER(*)\n  character(*,kind=4) is reported as CHARACTER(*,4)\n\nFrom-SVN: r276505", "tree": {"sha": "522705254b54086a43db1ff08a986353ea587ff9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/522705254b54086a43db1ff08a986353ea587ff9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/comments", "author": {"login": "markeggleston", "id": 42180582, "node_id": "MDQ6VXNlcjQyMTgwNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/42180582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/markeggleston", "html_url": "https://github.com/markeggleston", "followers_url": "https://api.github.com/users/markeggleston/followers", "following_url": "https://api.github.com/users/markeggleston/following{/other_user}", "gists_url": "https://api.github.com/users/markeggleston/gists{/gist_id}", "starred_url": "https://api.github.com/users/markeggleston/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/markeggleston/subscriptions", "organizations_url": "https://api.github.com/users/markeggleston/orgs", "repos_url": "https://api.github.com/users/markeggleston/repos", "events_url": "https://api.github.com/users/markeggleston/events{/privacy}", "received_events_url": "https://api.github.com/users/markeggleston/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "38a734350fd787da1b4bcf9b4e0a99ed2adb5eae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38a734350fd787da1b4bcf9b4e0a99ed2adb5eae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38a734350fd787da1b4bcf9b4e0a99ed2adb5eae"}], "stats": {"total": 431, "additions": 373, "deletions": 58}, "files": [{"sha": "64812f28574d6f8ff8c8b8c53a150499bd9fb148", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "patch": "@@ -1,3 +1,47 @@\n+2019-10-03  Mark Eggleston  <mark.eggleston@codethink.com>\n+\n+\t* array.c (check_element_type): Call gfc_typename with the gfc_expr\n+\t\"expr\" instead of its gfc_typespec \"ts\".\n+\t* check.c (gfc_check_co_reduce): Call gfc_typename with the gfc_expr\n+\t\"a\" instead of its gfc_typespec \"ts\".\n+\t(gfc_check_co_reduce): Call gfc_typename with the gfc_expr \"a\" instead\n+\t of its gfc_typespec \"ts\".\n+\t(gfc_check_eoshift): Call gfc_typename with the gfc_expr \"array\"\n+\tinstead of its gfc_typespec ts.\n+\t(gfc_check_same_type_as): In two calls to gfc_typename use \"a\" and \"b\"\n+\tof type gfc_expr instead of the \"ts\" fields of \"a\" and \"b\"\n+\t* decl.c (variable_decl): Call gfc_typename with the gfc_expr\n+\t\"initializer\" instead of its gfc_typespec \"ts\".\n+\t* expr.c (gfc_check_assign): Use \"rvalue\" and \"lvalue\" of type gfc_expr\n+\tin calls to gfc_typename instead of their \"ts\" fields of type\n+\tgfc_typespec.\n+\t(gfc_check_pointer_assign): Use \"rvalue\" and \"lvalue\" of type gfc_expr\n+\tin calls to gfc_typename instead of their \"ts\" fields of type\n+\tgfc_typespec.\n+\t* gfortran.h: Add prototypes for gfc_dummy_typename and a new function\n+\tgfc_typename for gfc_expr *.\n+\t*interface.c (gfc_check_dummy_characteristics): Use gfc_dummy_typename\n+\tfor the dummy variable.\n+\t(compare_parameter): Use gfc_dummy_typename for the formal argument.\n+\tUse \"actual\" of type gfc_expr in call to gfc_typename for the actual\n+\targument.\n+\t* intrinsic.c (check_arglist): Use gfc_dummy_typename for the formal\n+\targument. Use expressions of type gfc_expr from the argument list to\n+\tcall gfc_typename.\n+\t(gfc_convert_type_warn): New local variable \"is_char_constant\" set if\n+\tthe expression type is a character constant. At the \"bad\" label\n+\tdetermine source type name by calling gfc_typename with either \"expr\"\n+\tfor character constants or \"from_ts\" and use that in the warning\n+\tmessages instead of the original call to gfc_typename.\n+\t* misc.c (gfc_typename): New function for gfc_expr *, use for where\n+\tcharacter types are possible it can get the character length from\n+        gfc_expr for character literals.\n+\t(gfc_dummy_typename): New functionfor gfc_typespec *, if no character\n+\tlength is present the character type is assumed and the appropriate \n+\tstring is return otherwise it calls gfc_typename for gfc_typespec *.\n+\t(gfc_typespec): for character types construct the type name with length\n+\tand kind (if it is not default kind).\n+\n 2019-10-02  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/91784"}, {"sha": "3a504ebfea81c369cda2a01b0e8b6af91f3d57c8", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "patch": "@@ -1358,7 +1358,7 @@ check_element_type (gfc_expr *expr, bool convert)\n \n   gfc_error (\"Element in %s array constructor at %L is %s\",\n \t     gfc_typename (&constructor_ts), &expr->where,\n-\t     gfc_typename (&expr->ts));\n+\t     gfc_typename (expr));\n \n   cons_state = CONS_BAD;\n   return 1;"}, {"sha": "87a8196906279941fe55eb25e29ea3236a639f5e", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "patch": "@@ -2266,7 +2266,7 @@ gfc_check_co_reduce (gfc_expr *a, gfc_expr *op, gfc_expr *result_image,\n     {\n       gfc_error (\"The A argument at %L has type %s but the function passed as \"\n \t\t \"OPERATOR at %L returns %s\",\n-\t\t &a->where, gfc_typename (&a->ts), &op->where,\n+\t\t &a->where, gfc_typename (a), &op->where,\n \t\t gfc_typename (&sym->result->ts));\n       return false;\n     }\n@@ -2276,7 +2276,7 @@ gfc_check_co_reduce (gfc_expr *a, gfc_expr *op, gfc_expr *result_image,\n       gfc_error (\"The function passed as OPERATOR at %L has arguments of type \"\n \t\t \"%s and %s but shall have type %s\", &op->where,\n \t\t gfc_typename (&formal->sym->ts),\n-\t\t gfc_typename (&formal->next->sym->ts), gfc_typename (&a->ts));\n+\t\t gfc_typename (&formal->next->sym->ts), gfc_typename (a));\n       return false;\n     }\n   if (op->rank || attr.allocatable || attr.pointer || formal->sym->as\n@@ -2844,7 +2844,7 @@ gfc_check_eoshift (gfc_expr *array, gfc_expr *shift, gfc_expr *boundary,\n \t\t     \"of type %qs\", gfc_current_intrinsic_arg[2]->name,\n \t\t     gfc_current_intrinsic, &array->where,\n \t\t     gfc_current_intrinsic_arg[0]->name,\n-\t\t     gfc_typename (&array->ts));\n+\t\t     gfc_typename (array));\n \t  return false;\n \t}\n     }\n@@ -4808,7 +4808,7 @@ gfc_check_same_type_as (gfc_expr *a, gfc_expr *b)\n \t\t   \"cannot be of type %s\",\n \t\t   gfc_current_intrinsic_arg[0]->name,\n \t\t   gfc_current_intrinsic,\n-\t\t   &a->where, gfc_typename (&a->ts));\n+\t\t   &a->where, gfc_typename (a));\n         return false;\n     }\n \n@@ -4827,7 +4827,7 @@ gfc_check_same_type_as (gfc_expr *a, gfc_expr *b)\n \t\t   \"cannot be of type %s\",\n \t\t   gfc_current_intrinsic_arg[0]->name,\n \t\t   gfc_current_intrinsic,\n-\t\t   &b->where, gfc_typename (&b->ts));\n+\t\t   &b->where, gfc_typename (b));\n       return false;\n     }\n "}, {"sha": "96b6f3f88345415d6f3aaebd3bddceff1ece6eb9", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "patch": "@@ -2908,7 +2908,7 @@ variable_decl (int elem)\n     {\n       gfc_error (\"Incompatible initialization between a derived type \"\n \t\t \"entity and an entity with %qs type at %C\",\n-\t\t  gfc_typename (&initializer->ts));\n+\t\t  gfc_typename (initializer));\n       m = MATCH_ERROR;\n       goto cleanup;\n     }"}, {"sha": "9f638fe4dc32be8b4c6fdc4fc628109c9d828849", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "patch": "@@ -3693,8 +3693,7 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform,\n \treturn true;\n \n       gfc_error (\"BOZ literal constant near %L cannot be assigned to a \"\n-\t\t \"%qs variable\", &rvalue->where, gfc_typename (&lvalue->ts));\n-\n+\t\t \"%qs variable\", &rvalue->where, gfc_typename (lvalue));\n       return false;\n     }\n \n@@ -3726,7 +3725,7 @@ gfc_check_assign (gfc_expr *lvalue, gfc_expr *rvalue, int conform,\n       where = lvalue->where.lb ? &lvalue->where : &rvalue->where;\n       gfc_error (\"Incompatible types in DATA statement at %L; attempted \"\n \t\t \"conversion of %s to %s\", where,\n-\t\t gfc_typename (&rvalue->ts), gfc_typename (&lvalue->ts));\n+\t\t gfc_typename (rvalue), gfc_typename (lvalue));\n \n       return false;\n     }\n@@ -4139,8 +4138,7 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue,\n       else if (!suppress_type_test)\n \tgfc_error (\"Different types in pointer assignment at %L; \"\n \t\t   \"attempted assignment of %s to %s\", &lvalue->where,\n-\t\t   gfc_typename (&rvalue->ts),\n-\t\t   gfc_typename (&lvalue->ts));\n+\t\t   gfc_typename (rvalue), gfc_typename (lvalue));\n       return false;\n     }\n "}, {"sha": "d84d1fa7f7e1581c38c2e22d197ca0c4613e102b", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "patch": "@@ -2884,7 +2884,9 @@ void gfc_end_source_files (void);\n void gfc_clear_ts (gfc_typespec *);\n FILE *gfc_open_file (const char *);\n const char *gfc_basic_typename (bt);\n+const char *gfc_dummy_typename (gfc_typespec *);\n const char *gfc_typename (gfc_typespec *);\n+const char *gfc_typename (gfc_expr *);\n const char *gfc_op2string (gfc_intrinsic_op);\n const char *gfc_code2string (const mstring *, int);\n int gfc_string2code (const mstring *, const char *);"}, {"sha": "3313e729db9f77e9350eebd5373455cca8651906", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "patch": "@@ -1330,7 +1330,8 @@ gfc_check_dummy_characteristics (gfc_symbol *s1, gfc_symbol *s2,\n \t  || !compare_type_characteristics (s2, s1))\n \t{\n \t  snprintf (errmsg, err_len, \"Type mismatch in argument '%s' (%s/%s)\",\n-\t\t    s1->name, gfc_typename (&s1->ts), gfc_typename (&s2->ts));\n+\t\t    s1->name, gfc_dummy_typename (&s1->ts),\n+\t\t    gfc_dummy_typename (&s2->ts));\n \t  return false;\n \t}\n       if (!compare_rank (s1, s2))\n@@ -2338,15 +2339,15 @@ compare_parameter (gfc_symbol *formal, gfc_expr *actual,\n \t\t\t       \"and actual argument at %L (%s/%s).\",\n \t\t\t       &actual->where,\n \t\t\t       &formal->declared_at,\n-\t\t\t       gfc_typename (&actual->ts),\n-\t\t\t       gfc_typename (&formal->ts));\n+\t\t\t       gfc_typename (actual),\n+\t\t\t       gfc_dummy_typename (&formal->ts));\n \n \t      formal->error = 1;\n \t    }\n \t  else\n \t    gfc_error_opt (0, \"Type mismatch in argument %qs at %L; passed %s \"\n-\t\t\t   \"to %s\", formal->name, where, gfc_typename (&actual->ts),\n-\t\t\t   gfc_typename (&formal->ts));\n+\t\t\t   \"to %s\", formal->name, where, gfc_typename (actual),\n+\t\t\t   gfc_dummy_typename (&formal->ts));\n \t}\n       return false;\n     }"}, {"sha": "ac5af10a775ff4b088e0b625bb4b57046b6d4a6f", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "patch": "@@ -4363,11 +4363,12 @@ check_arglist (gfc_actual_arglist **ap, gfc_intrinsic_sym *sym,\n       if (!gfc_compare_types (&ts, &actual->expr->ts))\n \t{\n \t  if (error_flag)\n-\t    gfc_error (\"Type of argument %qs in call to %qs at %L should \"\n-\t\t       \"be %s, not %s\", gfc_current_intrinsic_arg[i]->name,\n-\t\t       gfc_current_intrinsic, &actual->expr->where,\n-\t\t       gfc_typename (&formal->ts),\n-\t\t       gfc_typename (&actual->expr->ts));\n+\t    gfc_error (\"In call to %qs at %L, type mismatch in argument \"\n+\t\t       \"%qs; pass %qs to %qs\", gfc_current_intrinsic,\n+\t\t       &actual->expr->where,\n+\t\t       gfc_current_intrinsic_arg[i]->name,\n+\t\t       gfc_typename (actual->expr),\n+\t\t       gfc_dummy_typename (&formal->ts));\n \t  return false;\n \t}\n \n@@ -5076,6 +5077,8 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n   gfc_expr *new_expr;\n   int rank;\n   mpz_t *shape;\n+  bool is_char_constant = (expr->expr_type == EXPR_CONSTANT)\n+\t\t\t  && (expr->ts.type == BT_CHARACTER);\n \n   from_ts = expr->ts;\t\t/* expr->ts gets clobbered */\n \n@@ -5117,7 +5120,7 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n   if ((gfc_option.warn_std & sym->standard) != 0)\n     {\n       gfc_warning_now (0, \"Extension: Conversion from %s to %s at %L\",\n-\t\t       gfc_typename (&from_ts), gfc_typename (ts),\n+\t\t       gfc_typename (&from_ts), gfc_dummy_typename (ts),\n \t\t       &expr->where);\n     }\n   else if (wflag)\n@@ -5179,7 +5182,7 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n \t  /* If HOLLERITH is involved, all bets are off.  */\n \t  if (warn_conversion)\n \t    gfc_warning_now (OPT_Wconversion, \"Conversion from %s to %s at %L\",\n-\t\t\t     gfc_typename (&from_ts), gfc_typename (ts),\n+\t\t\t     gfc_typename (&from_ts), gfc_dummy_typename (ts),\n \t\t\t     &expr->where);\n \t}\n       else\n@@ -5231,15 +5234,17 @@ gfc_convert_type_warn (gfc_expr *expr, gfc_typespec *ts, int eflag, int wflag)\n   return true;\n \n bad:\n+  const char *type_name = is_char_constant ? gfc_typename (expr)\n+\t\t\t\t\t   : gfc_typename (&from_ts);\n   if (eflag == 1)\n     {\n-      gfc_error (\"Cannot convert %s to %s at %L\",\n-\t\t gfc_typename (&from_ts), gfc_typename (ts), &expr->where);\n+      gfc_error (\"Cannot convert %s to %s at %L\", type_name, gfc_typename (ts),\n+\t\t &expr->where);\n       return false;\n     }\n \n-  gfc_internal_error (\"Cannot convert %qs to %qs at %L\",\n-\t\t      gfc_typename (&from_ts), gfc_typename (ts),\n+  gfc_internal_error (\"Cannot convert %qs to %qs at %L\", type_name,\n+\t\t      gfc_typename (ts),\n \t\t      &expr->where);\n   /* Not reached */\n }"}, {"sha": "97df9eea94e15c2e04d2e998761b6ec6c892bc55", "filename": "gcc/fortran/misc.c", "status": "modified", "additions": 70, "deletions": 1, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ffortran%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ffortran%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmisc.c?ref=f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "patch": "@@ -129,6 +129,7 @@ gfc_typename (gfc_typespec *ts)\n   static int flag = 0;\n   char *buffer;\n   gfc_typespec *ts1;\n+  gfc_charlen_t length = 0;\n \n   buffer = flag ? buffer1 : buffer2;\n   flag = !flag;\n@@ -148,7 +149,13 @@ gfc_typename (gfc_typespec *ts)\n       sprintf (buffer, \"LOGICAL(%d)\", ts->kind);\n       break;\n     case BT_CHARACTER:\n-      sprintf (buffer, \"CHARACTER(%d)\", ts->kind);\n+      if (ts->u.cl && ts->u.cl->length)\n+\tlength = gfc_mpz_get_hwi (ts->u.cl->length->value.integer);\n+      if (ts->kind == gfc_default_character_kind)\n+\tsprintf (buffer, \"CHARACTER(\" HOST_WIDE_INT_PRINT_DEC \")\", length);\n+      else\n+\tsprintf (buffer, \"CHARACTER(\" HOST_WIDE_INT_PRINT_DEC \",%d)\", length,\n+\t\t ts->kind);\n       break;\n     case BT_HOLLERITH:\n       sprintf (buffer, \"HOLLERITH\");\n@@ -186,6 +193,68 @@ gfc_typename (gfc_typespec *ts)\n }\n \n \n+const char *\n+gfc_typename (gfc_expr *ex)\n+{\n+  /* 34 character buffer: 14 for \"CHARACTER(n,4)\", n can be upto 20 characters,\n+     add 19 for the extra width and 1 for '\\0' */\n+  static char buffer1[34];\n+  static char buffer2[34];\n+  static bool flag = false;\n+  char *buffer;\n+  gfc_charlen_t length;\n+  buffer = flag ? buffer1 : buffer2;\n+  flag = !flag;\n+\n+  if (ex->ts.type == BT_CHARACTER)\n+    {\n+      if (ex->ts.u.cl && ex->ts.u.cl->length)\n+\tlength = gfc_mpz_get_hwi (ex->ts.u.cl->length->value.integer);\n+      else\n+\tlength = ex->value.character.length;\n+      if (ex->ts.kind == gfc_default_character_kind)\n+\tsprintf (buffer, \"CHARACTER(\" HOST_WIDE_INT_PRINT_DEC \")\", length);\n+      else\n+\tsprintf (buffer, \"CHARACTER(\" HOST_WIDE_INT_PRINT_DEC \",%d)\", length,\n+\t\t ex->ts.kind);\n+      return buffer;\n+    }\n+  return gfc_typename(&ex->ts);\n+}\n+\n+/* The type of a dummy variable can also be CHARACTER(*).  */\n+\n+const char *\n+gfc_dummy_typename (gfc_typespec *ts)\n+{\n+  static char buffer1[15];  /* 15 for \"CHARACTER(*,4)\" + '\\0'.  */\n+  static char buffer2[15];\n+  static bool flag = false;\n+  char *buffer;\n+\n+  buffer = flag ? buffer1 : buffer2;\n+  flag = !flag;\n+\n+  if (ts->type == BT_CHARACTER)\n+    {\n+      bool has_length = false;\n+      if (ts->u.cl)\n+\thas_length = ts->u.cl->length != NULL;\n+      if (!has_length)\n+\t{\n+\t  if (ts->kind == gfc_default_character_kind)\n+\t    sprintf(buffer, \"CHARACTER(*)\");\n+\t  else if (ts->kind < 10)\n+\t    sprintf(buffer, \"CHARACTER(*,%d)\", ts->kind);\n+\t  else\n+\t    sprintf(buffer, \"CHARACTER(*,?)\");\n+\t  return buffer;\n+\t}\n+    }\n+  return gfc_typename(ts);\n+}\n+\n+\n /* Given an mstring array and a code, locate the code in the table,\n    returning a pointer to the string.  */\n "}, {"sha": "20ecafd944e40a7eca7718104f6b2637f0c9fb73", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "patch": "@@ -3980,7 +3980,7 @@ resolve_operator (gfc_expr *e)\n \t}\n \n       sprintf (msg, _(\"Operand of unary numeric operator %%<%s%%> at %%L is %s\"),\n-\t       gfc_op2string (e->value.op.op), gfc_typename (&e->ts));\n+\t       gfc_op2string (e->value.op.op), gfc_typename (e));\n       goto bad_op;\n \n     case INTRINSIC_PLUS:\n@@ -4002,8 +4002,8 @@ resolve_operator (gfc_expr *e)\n       else\n       \tsprintf (msg,\n \t       _(\"Operands of binary numeric operator %%<%s%%> at %%L are %s/%s\"),\n-\t       gfc_op2string (e->value.op.op), gfc_typename (&op1->ts),\n-\t       gfc_typename (&op2->ts));\n+\t       gfc_op2string (e->value.op.op), gfc_typename (op1),\n+\t       gfc_typename (op2));\n       goto bad_op;\n \n     case INTRINSIC_CONCAT:\n@@ -4017,7 +4017,7 @@ resolve_operator (gfc_expr *e)\n \n       sprintf (msg,\n \t       _(\"Operands of string concatenation operator at %%L are %s/%s\"),\n-\t       gfc_typename (&op1->ts), gfc_typename (&op2->ts));\n+\t       gfc_typename (op1), gfc_typename (op2));\n       goto bad_op;\n \n     case INTRINSIC_AND:\n@@ -4059,8 +4059,8 @@ resolve_operator (gfc_expr *e)\n \t}\n \n       sprintf (msg, _(\"Operands of logical operator %%<%s%%> at %%L are %s/%s\"),\n-\t       gfc_op2string (e->value.op.op), gfc_typename (&op1->ts),\n-\t       gfc_typename (&op2->ts));\n+\t       gfc_op2string (e->value.op.op), gfc_typename (op1),\n+\t       gfc_typename (op2));\n \n       goto bad_op;\n \n@@ -4082,7 +4082,7 @@ resolve_operator (gfc_expr *e)\n \t}\n \n       sprintf (msg, _(\"Operand of .not. operator at %%L is %s\"),\n-\t       gfc_typename (&op1->ts));\n+\t\t      gfc_typename (op1));\n       goto bad_op;\n \n     case INTRINSIC_GT:\n@@ -4168,7 +4168,7 @@ resolve_operator (gfc_expr *e)\n \t\t    msg = \"Inequality comparison for %s at %L\";\n \n \t\t  gfc_warning (OPT_Wcompare_reals, msg,\n-\t\t\t       gfc_typename (&op1->ts), &op1->where);\n+\t\t\t       gfc_typename (op1), &op1->where);\n \t\t}\n \t    }\n \n@@ -4184,8 +4184,8 @@ resolve_operator (gfc_expr *e)\n       else\n \tsprintf (msg,\n \t\t _(\"Operands of comparison operator %%<%s%%> at %%L are %s/%s\"),\n-\t\t gfc_op2string (e->value.op.op), gfc_typename (&op1->ts),\n-\t\t gfc_typename (&op2->ts));\n+\t\t gfc_op2string (e->value.op.op), gfc_typename (op1),\n+\t\t gfc_typename (op2));\n \n       goto bad_op;\n \n@@ -4203,12 +4203,12 @@ resolve_operator (gfc_expr *e)\n \t}\n       else if (op2 == NULL)\n \tsprintf (msg, _(\"Operand of user operator %%<%s%%> at %%L is %s\"),\n-\t\t e->value.op.uop->name, gfc_typename (&op1->ts));\n+\t\t e->value.op.uop->name, gfc_typename (op1));\n       else\n \t{\n \t  sprintf (msg, _(\"Operands of user operator %%<%s%%> at %%L are %s/%s\"),\n-\t\t   e->value.op.uop->name, gfc_typename (&op1->ts),\n-\t\t   gfc_typename (&op2->ts));\n+\t\t   e->value.op.uop->name, gfc_typename (op1),\n+\t\t   gfc_typename (op2));\n \t  e->value.op.uop->op->sym->attr.referenced = 1;\n \t}\n \n@@ -8509,7 +8509,7 @@ resolve_select (gfc_code *code, bool select_type)\n   if (type != BT_LOGICAL && type != BT_INTEGER && type != BT_CHARACTER)\n     {\n       gfc_error (\"Argument of SELECT statement at %L cannot be %s\",\n-\t\t &case_expr->where, gfc_typename (&case_expr->ts));\n+\t\t &case_expr->where, gfc_typename (case_expr));\n \n       /* Punt. Going on here just produce more garbage error messages.  */\n       return;\n@@ -8538,15 +8538,15 @@ resolve_select (gfc_code *code, bool select_type)\n \t\t\t\t\t  case_expr->ts.kind) != ARITH_OK)\n \t    gfc_warning (0, \"Expression in CASE statement at %L is \"\n \t\t\t \"not in the range of %s\", &cp->low->where,\n-\t\t\t gfc_typename (&case_expr->ts));\n+\t\t\t gfc_typename (case_expr));\n \n \t  if (cp->high\n \t      && cp->low != cp->high\n \t      && gfc_check_integer_range (cp->high->value.integer,\n \t\t\t\t\t  case_expr->ts.kind) != ARITH_OK)\n \t    gfc_warning (0, \"Expression in CASE statement at %L is \"\n \t\t\t \"not in the range of %s\", &cp->high->where,\n-\t\t\t gfc_typename (&case_expr->ts));\n+\t\t\t gfc_typename (case_expr));\n \t}\n \n   /* PR 19168 has a long discussion concerning a mismatch of the kinds"}, {"sha": "10de7b95a13c7f4714574deac95ef4ed0ab9bd14", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "patch": "@@ -1,3 +1,17 @@\n+2019-10-03 Mark Eggleston <mark.eggleston@codethink.com>\n+\n+\t* gfortran.dg/bad_operands.f90: New test.\n+\t* gfortran.dg/character mismatch.f90: New test.\n+\t* gfortran.dg/compare_interfaces.f90: New test.\n+\t* gfortran.dg/hollerith_to_char_parameter_1.f90: New test.\n+\t* gfortran.dg/hollerith_to_char_parameter_2.f90: New test.\n+\t* gfortran.dg/widechar_intrinsics_1.f90: Checked for specific character\n+\ttype names instead of \"Type of argument\".\n+\t* gfortran.dg/widechar_intrinsics_2.f90: Checked for specific character\n+\ttype names instead of \"Type of argument\".\n+\t* gfortran.dg/widechar_intrinsics_3.f90: Checked for specific character\n+\ttype names instead of \"Type of argument\".\n+\n 2019-10-02  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/cr-decimal-dig-2.c: New test."}, {"sha": "e82a07fdbd3c6388d4fc44ccf44f37c9a2c2ce82", "filename": "gcc/testsuite/gfortran.dg/bad_operands.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fbad_operands.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fbad_operands.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbad_operands.f90?ref=f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+!\n+! Test case contributed by Mark Eggleston  <mark.eggleston@codethink.com>\n+\n+program test\n+  integer(4) :: x\n+  \n+  x = x // \"rubbish\"       ! { dg-error \"INTEGER\\\\(4\\\\)/CHARACTER\\\\(7\\\\)\" }\n+  x = 4_\"more rubbish\" + 6 ! { dg-error \"CHARACTER\\\\(12,4\\\\)/INTEGER\\\\(4\\\\)\" }\n+end program"}, {"sha": "e1619467ccce37f37fa44a532f2de9bcbf9cbe05", "filename": "gcc/testsuite/gfortran.dg/character_mismatch.f90", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fcharacter_mismatch.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fcharacter_mismatch.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcharacter_mismatch.f90?ref=f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "patch": "@@ -0,0 +1,76 @@\n+! { dg-do compile }\n+!\n+! Test case contributed by Mark Eggleston  <mark.eggleston@codethink.com>\n+\n+program test\n+  use iso_fortran_env\n+  implicit none\n+  integer, parameter :: ucs4 = selected_char_kind('ISO_10646')\n+  integer :: x\n+  character(len=7) :: s = \"abcd123\"\n+  character(4, ucs4) :: s4 = char(int(z'20ac'), ucs4) // ucs4_\"100\"\n+\n+  x = s\n+  x = \"string\"\n+  x = \"A longer string\" // \" plus a bit\"\n+  x = s // s\n+  x = s // \"a bit more\"\n+  x = \"prefix:\" // s\n+  x = s4\n+  x = ucs4_\"string\"\n+  x = ucs4_\"A longer string\" // ucs4_\" plus a bit\"\n+  x = s4 // s4\n+  x = s4 // ucs4_\"a bit more\"\n+  x = ucs4_\"prefix:\" // s4\n+\n+  call f(s)\n+  call f(\"string\")\n+  call f(\"A longer string\" // \" plus a bit\")\n+  call f(s // s)\n+  call f(s // \"a bit more\")\n+  call f(\"a string:\" // s)\n+\n+  call f(s4)\n+  call f(ucs4_\"string\")\n+  call f(ucs4_\"A longer string\" // ucs4_\" plus a bit\")\n+  call f(s4 // s4)\n+  call f(s4 // ucs4_\"a bit more\")\n+  call f(ucs4_\"a string:\" // s4)\n+\n+  write(*,*) \"\" // ucs4_\"\"\n+\n+contains\n+  subroutine f(y)\n+    integer, intent(in) :: y\n+\n+    write(*,*) y\n+  end subroutine f\n+\n+end program\n+\n+! { dg-error \"CHARACTER\\\\(7\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 13 }\n+! { dg-error \"CHARACTER\\\\(6\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 14 }\n+! { dg-error \"CHARACTER\\\\(26\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 15 }\n+! { dg-error \"CHARACTER\\\\(14\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 16 }\n+! { dg-error \"CHARACTER\\\\(17\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 17 }\n+! { dg-error \"CHARACTER\\\\(14\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 18 }\n+! { dg-error \"CHARACTER\\\\(4,4\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 19 }\n+! { dg-error \"CHARACTER\\\\(6,4\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 20 }\n+! { dg-error \"CHARACTER\\\\(26,4\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 21 }\n+! { dg-error \"CHARACTER\\\\(8,4\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 22 }\n+! { dg-error \"CHARACTER\\\\(14,4\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 23 }\n+! { dg-error \"CHARACTER\\\\(11,4\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 24 }\n+! { dg-error \"CHARACTER\\\\(7\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 26 }\n+! { dg-error \"CHARACTER\\\\(6\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 27 }\n+! { dg-error \"CHARACTER\\\\(26\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 28 }\n+! { dg-error \"CHARACTER\\\\(14\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 29 }\n+! { dg-error \"CHARACTER\\\\(17\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 30 }\n+! { dg-error \"CHARACTER\\\\(16\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 31 }\n+! { dg-error \"CHARACTER\\\\(4,4\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 33 }\n+! { dg-error \"CHARACTER\\\\(6,4\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 34 }\n+! { dg-error \"CHARACTER\\\\(26,4\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 35 }\n+! { dg-error \"CHARACTER\\\\(8,4\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 36 }\n+! { dg-error \"CHARACTER\\\\(14,4\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 37 }\n+! { dg-error \"CHARACTER\\\\(13,4\\\\) to INTEGER\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 38 }\n+! { dg-error \"CHARACTER\\\\(0\\\\)/CHARACTER\\\\(0,4\\\\)\" \"operand type mismatch\" { target \\*-\\*-\\* } 40 }\n+"}, {"sha": "cb2cbb759a64bcafeb8302efc9b7c21159408a43", "filename": "gcc/testsuite/gfortran.dg/compare_interfaces.f90", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fcompare_interfaces.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fcompare_interfaces.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcompare_interfaces.f90?ref=f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "patch": "@@ -0,0 +1,73 @@\n+! { dg-do compile }\n+!\n+! Contributed by Mark Eggleston  <mark.eggleston@codethink.co.uk>\n+\n+subroutine f(a, b)\n+  integer :: a\n+  real :: b\n+\n+  write(*,*) a, b\n+end subroutine\n+\n+subroutine g(a, b)\n+  integer :: a\n+  character(*) :: b\n+\n+  write(*,*) a, b\n+end subroutine\n+\n+subroutine h\n+  interface\n+    subroutine f(a, b)  ! { dg-error \"\\\\(CHARACTER\\\\(\\\\*\\\\)/REAL\\\\(4\\\\)\\\\)\" }\n+      integer :: a\n+      character(*) :: b\n+    end subroutine\n+    subroutine g(a, b)  ! { dg-error \"\\\\(REAL\\\\(4\\\\)/CHARACTER\\\\(\\\\*\\\\)\\\\)\" }\n+      integer :: a\n+      real :: b\n+    end subroutine\n+  end interface\n+\n+  call f(6, 6.0)\n+  call g(6, \"abcdef\")\n+end subroutine\n+\n+subroutine f4(a, b)\n+  integer :: a\n+  real :: b\n+\n+  write(*,*) a, b\n+end subroutine\n+\n+subroutine g4(a, b)\n+  integer :: a\n+  character(*,4) :: b\n+\n+  write(*,*) a, b\n+end subroutine\n+\n+subroutine h4\n+  interface\n+    subroutine f4(a, b)  ! { dg-error \"\\\\(CHARACTER\\\\(\\\\*,4\\\\)/REAL\\\\(4\\\\)\\\\)\" }\n+      integer :: a\n+      character(*,4) :: b\n+    end subroutine\n+    subroutine g4(a, b)  ! { dg-error \"REAL\\\\(4\\\\)/CHARACTER\\\\(\\\\*,4\\\\)\" }\n+      integer :: a\n+      real :: b\n+    end subroutine\n+  end interface\n+\n+  call f4(6, 6.0) \n+  call g4(6, 4_\"abcdef\")\n+end subroutine\n+\n+program test\n+  call h\n+  call h4\n+end program\n+\n+! { dg-error \"passed REAL\\\\(4\\\\) to CHARACTER\\\\(\\\\*\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 31 }\n+! { dg-error \"passed CHARACTER\\\\(6\\\\) to REAL\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 32 }\n+! { dg-error \"passed REAL\\\\(4\\\\) to CHARACTER\\\\(\\\\*,4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 61 }\n+! { dg-error \"passed CHARACTER\\\\(6,4\\\\) to REAL\\\\(4\\\\)\" \"type mismatch\" { target \\*-\\*-\\* } 62 }"}, {"sha": "4c50be4acbbb288ffecbcbb760e16d73c33f207f", "filename": "gcc/testsuite/gfortran.dg/hollerith_to_char_parameter_1.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_to_char_parameter_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_to_char_parameter_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_to_char_parameter_1.f90?ref=f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-Wconversion -std=legacy\" }\n+!\n+! Test case contributed by Mark Eggleston  <mark.eggleston@codethink.com>\n+\n+program test\n+  character(*), parameter :: h = 5hABCDE ! { dg-warning \"HOLLERITH to CHARACTER\\\\(\\\\*\\\\)\" }\n+\n+  write(*,*) h\n+end program\n+"}, {"sha": "1d5bc6cd7e322ae61d1c37b326ac57dbf0b9ec34", "filename": "gcc/testsuite/gfortran.dg/hollerith_to_char_parameter_2.f90", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_to_char_parameter_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_to_char_parameter_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhollerith_to_char_parameter_2.f90?ref=f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "patch": "@@ -0,0 +1,12 @@\n+! { dg-do compile }\n+!\n+! Test case contributed by Mark Eggleston  <mark.eggleston@codethink.com>\n+\n+program test\n+  character(*), parameter :: h = 5hABCDE ! { dg-warning \"HOLLERITH to CHARACTER\\\\(\\\\*\\\\)\" }\n+\n+  write(*,*) h\n+end program\n+\n+! { dg-warning \"Legacy Extension\" \"extension\" { target \\*-\\*-\\* } 6 }\n+"}, {"sha": "259ed1b783e64286ed634329f87c091b2105e34b", "filename": "gcc/testsuite/gfortran.dg/widechar_intrinsics_1.f90", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_1.f90?ref=f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "patch": "@@ -15,18 +15,18 @@\n   call date_and_time(s4, t4, u4) ! { dg-error \"must be of kind 1\" }\n \n   call get_command(s1)\n-  call get_command(s4) ! { dg-error \"Type of argument\" }\n+  call get_command(s4) ! { dg-error \"'CHARACTER\\\\(20,4\\\\)' to 'CHARACTER\\\\(\\\\*\\\\)'\" }\n \n   call get_command_argument(1, s1)\n-  call get_command_argument(1, s4) ! { dg-error \"Type of argument\" }\n+  call get_command_argument(1, s4) ! { dg-error \"'CHARACTER\\\\(20,4\\\\)' to 'CHARACTER\\\\(\\\\*\\\\)'\" }\n \n   call get_environment_variable(\"PATH\", s1)\n   call get_environment_variable(s1)\n   call get_environment_variable(s1, t1)\n-  call get_environment_variable(4_\"PATH\", s1) ! { dg-error \"Type of argument\" }\n-  call get_environment_variable(s4) ! { dg-error \"Type of argument\" }\n-  call get_environment_variable(s1, t4) ! { dg-error \"Type of argument\" }\n-  call get_environment_variable(s4, t1) ! { dg-error \"Type of argument\" }\n+  call get_environment_variable(4_\"PATH\", s1) ! { dg-error \"'CHARACTER\\\\(4,4\\\\)' to 'CHARACTER\\\\(\\\\*\\\\)'\" }\n+  call get_environment_variable(s4) ! { dg-error \"'CHARACTER\\\\(20,4\\\\)' to 'CHARACTER\\\\(\\\\*\\\\)'\" }\n+  call get_environment_variable(s1, t4) ! { dg-error \"'CHARACTER\\\\(20,4\\\\)' to 'CHARACTER\\\\(\\\\*\\\\)'\" }\n+  call get_environment_variable(s4, t1) ! { dg-error \"'CHARACTER\\\\(20,4\\\\)' to 'CHARACTER\\\\(\\\\*\\\\)'\" }\n \n   print *, lge(s1,t1)\n   print *, lge(s1,\"foo\")"}, {"sha": "db4fc3c1f4ecdace8808a32177fbca27a6182d96", "filename": "gcc/testsuite/gfortran.dg/widechar_intrinsics_2.f90", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_2.f90?ref=f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "patch": "@@ -38,9 +38,9 @@ program failme\n   call getcwd (s4, i) ! { dg-error \"must be of kind\" }\n \n   call getenv (s1, t1)\n-  call getenv (s1, t4) ! { dg-error \"Type of argument\" }\n-  call getenv (s4, t1) ! { dg-error \"Type of argument\" }\n-  call getenv (s4, t4) ! { dg-error \"Type of argument\" }\n+  call getenv (s1, t4) ! { dg-error \"'CHARACTER\\\\(20,4\\\\)' to 'CHARACTER\\\\(\\\\*\\\\)'\" }\n+  call getenv (s4, t1) ! { dg-error \"'CHARACTER\\\\(20,4\\\\)' to 'CHARACTER\\\\(\\\\*\\\\)'\" }\n+  call getenv (s4, t4) ! { dg-error \"'CHARACTER\\\\(20,4\\\\)' to 'CHARACTER\\\\(\\\\*\\\\)'\" }\n \n   call getarg (i, s1)\n   call getarg (i, s4) ! { dg-error \"must be of kind\" }\n@@ -115,8 +115,8 @@ program failme\n \n   call system (s1)\n   call system (s1, i)\n-  call system (s4) ! { dg-error \"Type of argument\" }\n-  call system (s4, i) ! { dg-error \"Type of argument\" }\n+  call system (s4) ! { dg-error \"'CHARACTER\\\\(20,4\\\\)' to 'CHARACTER\\\\(\\\\*\\\\)'\" }\n+  call system (s4, i) ! { dg-error \"'CHARACTER\\\\(20,4\\\\)' to 'CHARACTER\\\\(\\\\*\\\\)'\" }\n \n   call ttynam (i, s1)\n   call ttynam (i, s4) ! { dg-error \"must be of kind\" }"}, {"sha": "7995c3693f97573ee4ae31baa63053cbcb54cc36", "filename": "gcc/testsuite/gfortran.dg/widechar_intrinsics_3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61e54e59cda5a2e281d525d3f87ffa179fae1ae/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwidechar_intrinsics_3.f90?ref=f61e54e59cda5a2e281d525d3f87ffa179fae1ae", "patch": "@@ -35,7 +35,7 @@ program failme\n   print *, fputc (i, s4) ! { dg-error \"must be of kind\" }\n \n   print *, getcwd (s1)\n-  print *, getcwd (s4) ! { dg-error \"Type of argument\" }\n+  print *, getcwd (s4) ! { dg-error \"'CHARACTER\\\\(20,4\\\\)' to 'CHARACTER\\\\(\\\\*\\\\)'\" }\n \n   print *, hostnm (s1)\n   print *, hostnm (s4) ! { dg-error \"must be of kind\" }\n@@ -61,7 +61,7 @@ program failme\n   print *, symlnk (s4, t4) ! { dg-error \"must be of kind\" }\n \n   print *, system (s1)\n-  print *, system (s4) ! { dg-error \"Type of argument\" }\n+  print *, system (s4) ! { dg-error \"'CHARACTER\\\\(20,4\\\\)' to 'CHARACTER\\\\(\\\\*\\\\)'\" }\n \n   print *, unlink (s1)\n   print *, unlink (s4) ! { dg-error \"must be of kind\" }"}]}