{"sha": "34e5efa10a7b514238ed9a914b802898d2d8cb36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRlNWVmYTEwYTdiNTE0MjM4ZWQ5YTkxNGI4MDI4OThkMmQ4Y2IzNg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-06-02T15:39:58Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-06-02T15:39:58Z"}, "message": "Simplify streaming of tree references\n\n\t* lto-streamer-in.c (stream_read_tree_ref): Simplify streaming of\n\treferences.\n\t* lto-streamer-out.c (stream_write_tree_ref): Likewise.", "tree": {"sha": "845b7d76584efb727c753eeb9ee2f1ce301caf30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/845b7d76584efb727c753eeb9ee2f1ce301caf30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34e5efa10a7b514238ed9a914b802898d2d8cb36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e5efa10a7b514238ed9a914b802898d2d8cb36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34e5efa10a7b514238ed9a914b802898d2d8cb36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e5efa10a7b514238ed9a914b802898d2d8cb36/comments", "author": null, "committer": null, "parents": [{"sha": "d3b6767dce45a7100e4cc32d2986a55f09a2cce2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3b6767dce45a7100e4cc32d2986a55f09a2cce2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3b6767dce45a7100e4cc32d2986a55f09a2cce2"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "15bfb6141639381f1a99f62bc245921153004016", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e5efa10a7b514238ed9a914b802898d2d8cb36/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e5efa10a7b514238ed9a914b802898d2d8cb36/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=34e5efa10a7b514238ed9a914b802898d2d8cb36", "patch": "@@ -1501,20 +1501,22 @@ lto_input_scc (class lto_input_block *ib, class data_in *data_in,\n tree\n stream_read_tree_ref (lto_input_block *ib, data_in *data_in)\n {\n-  unsigned ix = streamer_read_uhwi (ib);\n-  tree ret;\n+  int ix = streamer_read_hwi (ib);\n   if (!ix)\n     return NULL_TREE;\n-  else if (ix < LTO_NUM_TAGS)\n-    ret = lto_input_tree_ref (ib, data_in, cfun, (LTO_tags)ix);\n+  if (ix > 0)\n+    return streamer_tree_cache_get_tree (data_in->reader_cache, ix - 1);\n+\n+  ix = -ix - 1;\n+  int id = ix & 1;\n+  ix /= 2;\n+\n+  tree ret;\n+  if (!id)\n+    ret = (*data_in->file_data->current_decl_state\n+\t   ->streams[LTO_DECL_STREAM])[ix];\n   else\n-    ret = streamer_tree_cache_get_tree (data_in->reader_cache,\n-\t\t\t\t\tix - LTO_NUM_TAGS);\n-  if (ret && streamer_debugging)\n-    {\n-      enum tree_code c = (enum tree_code)streamer_read_uhwi (ib);\n-      gcc_assert (c == TREE_CODE (ret));\n-    }\n+    ret = (*SSANAMES (cfun))[ix];\n   return ret;\n }\n "}, {"sha": "f71d3f816624e076a351d6407f9421ed52e58529", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e5efa10a7b514238ed9a914b802898d2d8cb36/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e5efa10a7b514238ed9a914b802898d2d8cb36/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=34e5efa10a7b514238ed9a914b802898d2d8cb36", "patch": "@@ -400,15 +400,19 @@ stream_write_tree_ref (struct output_block *ob, tree t)\n       unsigned int ix;\n       bool existed_p = streamer_tree_cache_lookup (ob->writer_cache, t, &ix);\n       if (existed_p)\n-\tstreamer_write_uhwi (ob, ix + LTO_NUM_TAGS);\n+\tstreamer_write_hwi (ob, ix + 1);\n       else\n \t{\n \t  enum LTO_tags tag;\n \t  unsigned ix;\n+\t  int id = 0;\n \n \t  lto_indexable_tree_ref (ob, t, &tag, &ix);\n-\t  streamer_write_uhwi (ob, tag);\n-\t  streamer_write_uhwi (ob, ix);\n+\t  if (tag == LTO_ssa_name_ref)\n+\t    id = 1;\n+\t  else\n+\t    gcc_checking_assert (tag == LTO_global_stream_ref);\n+\t  streamer_write_hwi (ob, -(int)(ix * 2 + id + 1));\n \t}\n       if (streamer_debugging)\n \tstreamer_write_uhwi (ob, TREE_CODE (t));"}]}