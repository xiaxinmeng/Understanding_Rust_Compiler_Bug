{"sha": "26aafae4e50d1b90fe3a265027003487c1d25b45", "node_id": "C_kwDOANBUbNoAKDI2YWFmYWU0ZTUwZDFiOTBmZTNhMjY1MDI3MDAzNDg3YzFkMjViNDU", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-08-31T20:45:30Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-08-31T20:45:30Z"}, "message": "libstdc++: A few more minor <ranges> cleanups\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/ranges_base.h (__advance_fn::operator()): Add\n\tparentheses in assert condition to avoid -Wparentheses warning.\n\t* include/std/ranges: (take_view::take_view): Uglify 'base'.\n\t(take_while_view::take_while_view): Likewise.\n\t(elements_view::elements_view): Likewise.\n\t(views::_Zip::operator()): Adjust position of [[nodiscard]] for\n\tcompatibility with -fconcepts-ts.\n\t(zip_transform_view::_Sentinel): Uglify 'OtherConst'.\n\t(views::_ZipTransform::operator()): Adjust position of\n\t[[nodiscard]] for compatibilty with -fconcepts-ts.", "tree": {"sha": "7a79c457396b957593890b801b5ba9f65a44fc72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a79c457396b957593890b801b5ba9f65a44fc72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26aafae4e50d1b90fe3a265027003487c1d25b45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26aafae4e50d1b90fe3a265027003487c1d25b45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26aafae4e50d1b90fe3a265027003487c1d25b45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26aafae4e50d1b90fe3a265027003487c1d25b45/comments", "author": null, "committer": null, "parents": [{"sha": "ad8428c17ae4167f74584fb455d964a0f73a057a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad8428c17ae4167f74584fb455d964a0f73a057a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad8428c17ae4167f74584fb455d964a0f73a057a"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "866d7c56cbcd391b18b43259969caddf94dd326e", "filename": "libstdc++-v3/include/bits/ranges_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26aafae4e50d1b90fe3a265027003487c1d25b45/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26aafae4e50d1b90fe3a265027003487c1d25b45/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h?ref=26aafae4e50d1b90fe3a265027003487c1d25b45", "patch": "@@ -778,7 +778,7 @@ namespace ranges\n \t    else if (__n != 0) [[likely]]\n \t      {\n \t\t// n and bound must not lead in opposite directions:\n-\t\t__glibcxx_assert(__n < 0 == __diff < 0);\n+\t\t__glibcxx_assert((__n < 0) == (__diff < 0));\n \n \t\t(*this)(__it, __n);\n \t\treturn 0;"}, {"sha": "39822b71b944f67b95133a0b341fddcc463a1a43", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26aafae4e50d1b90fe3a265027003487c1d25b45/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26aafae4e50d1b90fe3a265027003487c1d25b45/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=26aafae4e50d1b90fe3a265027003487c1d25b45", "patch": "@@ -2121,8 +2121,8 @@ namespace views::__adaptor\n       take_view() requires default_initializable<_Vp> = default;\n \n       constexpr\n-      take_view(_Vp base, range_difference_t<_Vp> __count)\n-\t: _M_base(std::move(base)), _M_count(std::move(__count))\n+      take_view(_Vp __base, range_difference_t<_Vp> __count)\n+\t: _M_base(std::move(__base)), _M_count(std::move(__count))\n       { }\n \n       constexpr _Vp\n@@ -2355,8 +2355,8 @@ namespace views::__adaptor\n \t= default;\n \n       constexpr\n-      take_while_view(_Vp base, _Pred __pred)\n-\t: _M_base(std::move(base)), _M_pred(std::move(__pred))\n+      take_while_view(_Vp __base, _Pred __pred)\n+\t: _M_base(std::move(__base)), _M_pred(std::move(__pred))\n       { }\n \n       constexpr _Vp\n@@ -3982,8 +3982,8 @@ namespace views::__adaptor\n       elements_view() requires default_initializable<_Vp> = default;\n \n       constexpr explicit\n-      elements_view(_Vp base)\n-\t: _M_base(std::move(base))\n+      elements_view(_Vp __base)\n+\t: _M_base(std::move(__base))\n       { }\n \n       constexpr _Vp\n@@ -4753,9 +4753,8 @@ namespace views::__adaptor\n     {\n       template<typename... _Ts>\n \trequires (sizeof...(_Ts) == 0 || __detail::__can_zip_view<_Ts...>)\n-\t[[nodiscard]]\n \tconstexpr auto\n-\toperator()(_Ts&&... __ts) const\n+\toperator() [[nodiscard]] (_Ts&&... __ts) const\n \t{\n \t  if constexpr (sizeof...(_Ts) == 0)\n \t    return views::empty<tuple<>>;\n@@ -5036,22 +5035,22 @@ namespace views::__adaptor\n       : _M_inner(std::move(__i._M_inner))\n     { }\n \n-    template<bool OtherConst>\n-      requires sentinel_for<__zentinel<_Const>, __ziperator<OtherConst>>\n+    template<bool _OtherConst>\n+      requires sentinel_for<__zentinel<_Const>, __ziperator<_OtherConst>>\n     friend constexpr bool\n-    operator==(const _Iterator<OtherConst>& __x, const _Sentinel& __y)\n+    operator==(const _Iterator<_OtherConst>& __x, const _Sentinel& __y)\n     { return __x._M_inner == __y._M_inner; }\n \n-    template<bool OtherConst>\n-      requires sized_sentinel_for<__zentinel<_Const>, __ziperator<OtherConst>>\n-    friend constexpr range_difference_t<__detail::__maybe_const_t<OtherConst, _InnerView>>\n-    operator-(const _Iterator<OtherConst>& __x, const _Sentinel& __y)\n+    template<bool _OtherConst>\n+      requires sized_sentinel_for<__zentinel<_Const>, __ziperator<_OtherConst>>\n+    friend constexpr range_difference_t<__detail::__maybe_const_t<_OtherConst, _InnerView>>\n+    operator-(const _Iterator<_OtherConst>& __x, const _Sentinel& __y)\n     { return __x._M_inner - __y._M_inner; }\n \n-    template<bool OtherConst>\n-      requires sized_sentinel_for<__zentinel<_Const>, __ziperator<OtherConst>>\n-    friend constexpr range_difference_t<__detail::__maybe_const_t<OtherConst, _InnerView>>\n-    operator-(const _Sentinel& __x, const _Iterator<OtherConst>& __y)\n+    template<bool _OtherConst>\n+      requires sized_sentinel_for<__zentinel<_Const>, __ziperator<_OtherConst>>\n+    friend constexpr range_difference_t<__detail::__maybe_const_t<_OtherConst, _InnerView>>\n+    operator-(const _Sentinel& __x, const _Iterator<_OtherConst>& __y)\n     { return __x._M_inner - __y._M_inner; }\n   };\n \n@@ -5068,9 +5067,8 @@ namespace views::__adaptor\n     {\n       template<typename _Fp, typename... _Ts>\n \trequires (sizeof...(_Ts) == 0) || __detail::__can_zip_transform_view<_Fp, _Ts...>\n-\t[[nodiscard]]\n \tconstexpr auto\n-\toperator()(_Fp&& __f, _Ts&&... __ts) const\n+\toperator() [[nodiscard]] (_Fp&& __f, _Ts&&... __ts) const\n \t{\n \t  if constexpr (sizeof...(_Ts) == 0)\n \t    return views::empty<decay_t<invoke_result_t<_Fp>>>;"}]}