{"sha": "84f4954c38228e4cb3e6f0b5471883e6c2523631", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRmNDk1NGMzODIyOGU0Y2IzZTZmMGI1NDcxODgzZTZjMjUyMzYzMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-11T11:40:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-11T15:56:31Z"}, "message": "tree-optimization/95049 - fix not terminating RPO VN iteration\n\nThis rejects lattice changes from one constant to another.\n\n2020-05-11  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/95049\n\t* tree-ssa-sccvn.c (set_ssa_val_to): Reject lattice transition\n\tbetween different constants.\n\n\t* gcc.dg/torture/pr95049.c: New testcase.", "tree": {"sha": "364d1acb8ce08b1b24fed30f89e6bc8fc716b75d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/364d1acb8ce08b1b24fed30f89e6bc8fc716b75d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84f4954c38228e4cb3e6f0b5471883e6c2523631", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f4954c38228e4cb3e6f0b5471883e6c2523631", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84f4954c38228e4cb3e6f0b5471883e6c2523631", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f4954c38228e4cb3e6f0b5471883e6c2523631/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8bd9d32e8b3e7c2a1bb6fc920efe6691fb5e8b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8bd9d32e8b3e7c2a1bb6fc920efe6691fb5e8b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8bd9d32e8b3e7c2a1bb6fc920efe6691fb5e8b6"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "9ddd08505c8bda0c5679c77ced4d024fa114b0bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84f4954c38228e4cb3e6f0b5471883e6c2523631/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84f4954c38228e4cb3e6f0b5471883e6c2523631/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84f4954c38228e4cb3e6f0b5471883e6c2523631", "patch": "@@ -1,3 +1,9 @@\n+2020-05-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95049\n+\t* tree-ssa-sccvn.c (set_ssa_val_to): Reject lattice transition\n+\tbetween different constants.\n+\n 2020-05-11  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-pretty-print.c (dump_generic_node): Handle BOOLEAN_TYPEs."}, {"sha": "92e1d40930423baa4965e1fdbf64cfaa30612286", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84f4954c38228e4cb3e6f0b5471883e6c2523631/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84f4954c38228e4cb3e6f0b5471883e6c2523631/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=84f4954c38228e4cb3e6f0b5471883e6c2523631", "patch": "@@ -1,3 +1,8 @@\n+2020-05-11  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95049\n+\t* gcc.dg/torture/pr95049.c: New testcase.\n+\n 2020-05-11  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n \t    Bill Schmidt  <wschmidt@linux.ibm.com>\n "}, {"sha": "164bfdbdcfc664abbf6fc88892b8fd5e08134c33", "filename": "gcc/testsuite/gcc.dg/torture/pr95049.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84f4954c38228e4cb3e6f0b5471883e6c2523631/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr95049.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84f4954c38228e4cb3e6f0b5471883e6c2523631/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr95049.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr95049.c?ref=84f4954c38228e4cb3e6f0b5471883e6c2523631", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+\n+void a()\n+{\n+  for (int b; b; b = !b)\n+    ;\n+}"}, {"sha": "4b3f31c12cb42bc04c26f50e90ad449917112ffa", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84f4954c38228e4cb3e6f0b5471883e6c2523631/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84f4954c38228e4cb3e6f0b5471883e6c2523631/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=84f4954c38228e4cb3e6f0b5471883e6c2523631", "patch": "@@ -4472,6 +4472,8 @@ set_ssa_val_to (tree from, tree to)\n   vn_ssa_aux_t from_info = VN_INFO (from);\n   tree currval = from_info->valnum; // SSA_VAL (from)\n   poly_int64 toff, coff;\n+  bool curr_undefined = false;\n+  bool curr_invariant = false;\n \n   /* The only thing we allow as value numbers are ssa_names\n      and invariants.  So assert that here.  We don't allow VN_TOP\n@@ -4514,9 +4516,9 @@ set_ssa_val_to (tree from, tree to)\n \t    }\n \t  return false;\n \t}\n-      bool curr_invariant = is_gimple_min_invariant (currval);\n-      bool curr_undefined = (TREE_CODE (currval) == SSA_NAME\n-\t\t\t     && ssa_undefined_value_p (currval, false));\n+      curr_invariant = is_gimple_min_invariant (currval);\n+      curr_undefined = (TREE_CODE (currval) == SSA_NAME\n+\t\t\t&& ssa_undefined_value_p (currval, false));\n       if (currval != VN_TOP\n \t  && !curr_invariant\n \t  && !curr_undefined\n@@ -4571,9 +4573,8 @@ set_ssa_val_to (tree from, tree to)\n       && !operand_equal_p (currval, to, 0)\n       /* Different undefined SSA names are not actually different.  See\n          PR82320 for a testcase were we'd otherwise not terminate iteration.  */\n-      && !(TREE_CODE (currval) == SSA_NAME\n+      && !(curr_undefined\n \t   && TREE_CODE (to) == SSA_NAME\n-\t   && ssa_undefined_value_p (currval, false)\n \t   && ssa_undefined_value_p (to, false))\n       /* ???  For addresses involving volatile objects or types operand_equal_p\n          does not reliably detect ADDR_EXPRs as equal.  We know we are only\n@@ -4585,6 +4586,22 @@ set_ssa_val_to (tree from, tree to)\n \t       == get_addr_base_and_unit_offset (TREE_OPERAND (to, 0), &toff))\n \t   && known_eq (coff, toff)))\n     {\n+      if (to != from\n+\t  && currval != VN_TOP\n+\t  && !curr_undefined\n+\t  /* We do not want to allow lattice transitions from one value\n+\t     to another since that may lead to not terminating iteration\n+\t     (see PR95049).  Since there's no convenient way to check\n+\t     for the allowed transition of VAL -> PHI (loop entry value,\n+\t     same on two PHIs, to same PHI result) we restrict the check\n+\t     to invariants.  */\n+\t  && curr_invariant\n+\t  && is_gimple_min_invariant (to))\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    fprintf (dump_file, \" forced VARYING\");\n+\t  to = from;\n+\t}\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \" (changed)\\n\");\n       from_info->valnum = to;"}]}