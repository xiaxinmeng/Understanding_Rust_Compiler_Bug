{"sha": "056c014d34bf664641450d6160a6f5e24f4e2044", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU2YzAxNGQzNGJmNjY0NjQxNDUwZDYxNjBhNmY1ZTI0ZjRlMjA0NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-09-03T08:26:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1997-09-03T08:26:52Z"}, "message": "typeck.c (convert_arguments): Don't arbitrarily choose the first of a set of overloaded functions.\n\n        * typeck.c (convert_arguments): Don't arbitrarily choose the first\n        of a set of overloaded functions.\n\n        * lex.c (real_yylex): Don't elide __FUNCTION__.\n\nFrom-SVN: r15055", "tree": {"sha": "5fd9727b2c44f2dc969383e1c05b5d4ad37b3ae5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fd9727b2c44f2dc969383e1c05b5d4ad37b3ae5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/056c014d34bf664641450d6160a6f5e24f4e2044", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056c014d34bf664641450d6160a6f5e24f4e2044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/056c014d34bf664641450d6160a6f5e24f4e2044", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/056c014d34bf664641450d6160a6f5e24f4e2044/comments", "author": null, "committer": null, "parents": [{"sha": "704af6a15fd596d57aa3228f720d6fdcc39ad079", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/704af6a15fd596d57aa3228f720d6fdcc39ad079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/704af6a15fd596d57aa3228f720d6fdcc39ad079"}], "stats": {"total": 55, "additions": 16, "deletions": 39}, "files": [{"sha": "66418eb7983792c31372f6c1dc58f77169752983", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056c014d34bf664641450d6160a6f5e24f4e2044/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056c014d34bf664641450d6160a6f5e24f4e2044/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=056c014d34bf664641450d6160a6f5e24f4e2044", "patch": "@@ -1,5 +1,12 @@\n+Wed Sep  3 00:02:53 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* typeck.c (convert_arguments): Don't arbitrarily choose the first\n+ \tof a set of overloaded functions.\n+\n Tue Sep  2 12:09:13 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* lex.c (real_yylex): Don't elide __FUNCTION__.\n+\n \t* method.c (build_overload_value): Add in_template parm.\n \t(build_overload_int): Likewise.\n \t(build_overload_identifier): Pass it."}, {"sha": "f2fe0380a93dd64b2f24d471536a456fe67da562", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056c014d34bf664641450d6160a6f5e24f4e2044/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056c014d34bf664641450d6160a6f5e24f4e2044/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=056c014d34bf664641450d6160a6f5e24f4e2044", "patch": "@@ -4455,9 +4455,9 @@ build_new_function_call (fn, args, obj)\n \t  return error_mark_node;\n \t}\n \n-      /* Pedantically, it is ill-formed to define a function that could\n-\t also be a template instantiation, but we won't implement that\n-\t until things settle down.  */\n+      /* Pedantically, normal function declarations are never considered\n+\t to refer to template instantiations, but we won't implement that\n+\t until we implement full template instantiation syntax.  */\n       if (templates && ! cand->template && ! DECL_INITIAL (cand->fn))\n \tadd_maybe_template (cand->fn, templates);\n "}, {"sha": "83ac1a7de5bd4eca0852a07e051611b39d6af5d0", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056c014d34bf664641450d6160a6f5e24f4e2044/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056c014d34bf664641450d6160a6f5e24f4e2044/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=056c014d34bf664641450d6160a6f5e24f4e2044", "patch": "@@ -3310,30 +3310,6 @@ real_yylex ()\n #endif\n \n \t    yylval.ttype = tmp;\n-\n-\t    /* A user-invisible read-only initialized variable\n-\t       should be replaced by its value.  We only handle strings\n-\t       since that's the only case used in C (and C++).  */\n-\t    /* Note we go right after the local value for the identifier\n-\t       (e.g., __FUNCTION__ or __PRETTY_FUNCTION__).  We used to\n-\t       call lookup_name, but that could result in an error about\n-\t       ambiguities.  */\n-\t    tmp = IDENTIFIER_LOCAL_VALUE (yylval.ttype);\n-\t    if (tmp != NULL_TREE\n-\t\t&& TREE_CODE (tmp) == VAR_DECL\n-\t\t&& DECL_IGNORED_P (tmp)\n-\t\t&& TREE_READONLY (tmp)\n-\t\t&& DECL_INITIAL (tmp) != NULL_TREE\n-\t\t&& TREE_CODE (DECL_INITIAL (tmp)) == STRING_CST)\n-\t      {\n-\t\ttree stringval = DECL_INITIAL (tmp);\n-\t      \n-\t\t/* Copy the string value so that we won't clobber anything\n-\t\t   if we put something in the TREE_CHAIN of this one.  */\n-\t\tyylval.ttype = build_string (TREE_STRING_LENGTH (stringval),\n-\t\t\t\t\t     TREE_STRING_POINTER (stringval));\n-\t\tvalue = STRING;\n-\t      }\n \t  }\n \tif (value == NEW && ! global_bindings_p ())\n \t  {"}, {"sha": "4c79d948aa434a79247b3f052a8f693f45a3d3c6", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056c014d34bf664641450d6160a6f5e24f4e2044/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056c014d34bf664641450d6160a6f5e24f4e2044/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=056c014d34bf664641450d6160a6f5e24f4e2044", "patch": "@@ -1300,7 +1300,7 @@ instantiate_class_template (type)\n       TREE_VALUE (d) = xref_tag_from_type (TREE_VALUE (d), NULL_TREE, 1);\n \n     d = tsubst (DECL_TEMPLATE_INJECT (template), &TREE_VEC_ELT (args, 0),\n-\t\t     TREE_VEC_LENGTH (args), NULL_TREE);\n+\t\tTREE_VEC_LENGTH (args), NULL_TREE);\n \n     for (; d; d = TREE_CHAIN (d))\n       {"}, {"sha": "2204c1f9c32bfd88010adc370c5252aa7b0044f0", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/056c014d34bf664641450d6160a6f5e24f4e2044/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/056c014d34bf664641450d6160a6f5e24f4e2044/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=056c014d34bf664641450d6160a6f5e24f4e2044", "patch": "@@ -2800,18 +2800,12 @@ convert_arguments (return_loc, typelist, values, fndecl, flags)\n \t  /* Strip the `&' from an overloaded FUNCTION_DECL.  */\n \t  if (TREE_CODE (val) == ADDR_EXPR)\n \t    val = TREE_OPERAND (val, 0);\n-\t  if (TREE_CODE (val) == TREE_LIST\n-\t      && TREE_CHAIN (val) == NULL_TREE\n-\t      && TREE_TYPE (TREE_VALUE (val)) != NULL_TREE\n-\t      && (TREE_TYPE (val) == unknown_type_node\n-\t\t  || DECL_CHAIN (TREE_VALUE (val)) == NULL_TREE))\n-\t    /* Instantiates automatically.  */\n-\t    val = TREE_VALUE (val);\n+\t  if (really_overloaded_fn (val))\n+\t    cp_error (\"insufficient type information to resolve address of overloaded function `%D'\",\n+\t\t      DECL_NAME (get_first_fn (val)));\n \t  else\n-\t    {\n-\t      error (\"insufficient type information in parameter list\");\n-\t      val = integer_zero_node;\n-\t    }\n+\t    error (\"insufficient type information in parameter list\");\n+\t  val = integer_zero_node;\n \t}\n       else if (TREE_CODE (val) == OFFSET_REF\n \t    && TREE_CODE (TREE_TYPE (val)) == METHOD_TYPE)"}]}