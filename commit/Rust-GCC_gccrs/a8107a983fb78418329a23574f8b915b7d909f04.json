{"sha": "a8107a983fb78418329a23574f8b915b7d909f04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgxMDdhOTgzZmI3ODQxODMyOWEyMzU3NGY4YjkxNWI3ZDkwOWYwNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-08-18T13:47:28Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-18T13:47:28Z"}, "message": "Improve markup in libstdc++ manual\n\n\t* doc/xml/manual/build_hacking.xml: Improve markup.\n\t* doc/xml/manual/test.xml: Likewise. Change section title from \"Test\"\n\tto \"Testing\".\n\t* doc/xml/faq.xml: Change link text to \"Testing\".\n\nFrom-SVN: r239571", "tree": {"sha": "95c171e1f70916b5d7598866686fd1a6bb5245f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95c171e1f70916b5d7598866686fd1a6bb5245f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8107a983fb78418329a23574f8b915b7d909f04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8107a983fb78418329a23574f8b915b7d909f04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8107a983fb78418329a23574f8b915b7d909f04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8107a983fb78418329a23574f8b915b7d909f04/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f89b03b6bec154b41041b08df7bf53203524a826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f89b03b6bec154b41041b08df7bf53203524a826", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f89b03b6bec154b41041b08df7bf53203524a826"}], "stats": {"total": 488, "additions": 266, "deletions": 222}, "files": [{"sha": "a65d040e8c2da60ba072395d5370f2d95fac7010", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8107a983fb78418329a23574f8b915b7d909f04/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8107a983fb78418329a23574f8b915b7d909f04/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a8107a983fb78418329a23574f8b915b7d909f04", "patch": "@@ -1,5 +1,10 @@\n 2016-08-18  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* doc/xml/manual/build_hacking.xml: Improve markup.\n+\t* doc/xml/manual/test.xml: Likewise. Change section title from \"Test\"\n+\tto \"Testing\".\n+\t* doc/xml/faq.xml: Change link text to \"Testing\".\n+\n \t* testsuite/tr1/3_function_objects/function/10.cc: Remove unintended\n \tdg-options directive.\n "}, {"sha": "94662314928315c6cfcc77eda3475c9638772ebe", "filename": "libstdc++-v3/doc/xml/faq.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8107a983fb78418329a23574f8b915b7d909f04/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8107a983fb78418329a23574f8b915b7d909f04/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Ffaq.xml?ref=a8107a983fb78418329a23574f8b915b7d909f04", "patch": "@@ -328,7 +328,7 @@\n     performance testing. Please consult the \n     <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://gcc.gnu.org/install/test.html\">testing\n     documentation</link> for GCC and\n-    <link linkend=\"manual.intro.setup.test\">Test</link> in the libstdc++\n+    <link linkend=\"manual.intro.setup.test\">Testing</link> in the libstdc++\n     manual for more details.\n     </para> \n     <para>"}, {"sha": "0bcd8791c6f1589eb9b1ba1eb8ddb6c656094fda", "filename": "libstdc++-v3/doc/xml/manual/build_hacking.xml", "status": "modified", "additions": 66, "deletions": 52, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8107a983fb78418329a23574f8b915b7d909f04/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbuild_hacking.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8107a983fb78418329a23574f8b915b7d909f04/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbuild_hacking.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fbuild_hacking.xml?ref=a8107a983fb78418329a23574f8b915b7d909f04", "patch": "@@ -93,7 +93,7 @@ in the build directory starts the build process. The <literal>all</literal> targ\n \n   <para>\n     Regenerate all generated files by using the command \n-    <code>autoreconf</code> at the top level of the libstdc++ source\n+    <command>autoreconf</command> at the top level of the libstdc++ source\n     directory.\n   </para>\n </section>\n@@ -108,19 +108,19 @@ in the build directory starts the build process. The <literal>all</literal> targ\n \n \n   <para>\n-    Until that glorious day when we can use AC_TRY_LINK with a\n-    cross-compiler, we have to hardcode the results of what the tests\n+    Until that glorious day when we can use <literal>AC_TRY_LINK</literal>\n+    with a cross-compiler, we have to hardcode the results of what the tests\n     would have shown if they could be run.  So we have an inflexible\n-    mess like crossconfig.m4.\n+    mess like <filename>crossconfig.m4</filename>.\n   </para>\n \n   <para>\n     Wouldn't it be nice if we could store that information in files\n     like configure.host, which can be modified without needing to\n     regenerate anything, and can even be tweaked without really\n     knowing how the configury all works?  Perhaps break the pieces of\n-    crossconfig.m4 out and place them in their appropriate\n-    config/{cpu,os} directory.\n+    <filename>crossconfig.m4</filename> out and place them in their appropriate\n+    <filename class=\"directory\">config/{cpu,os}</filename> directory.\n   </para>\n \n   <para>\n@@ -141,41 +141,46 @@ in the build directory starts the build process. The <literal>all</literal> targ\n \n   <para>\n     Most comments should use {octothorpes, shibboleths, hash marks,\n-    pound signs, whatever} rather than \"dnl\".  Nearly all comments in\n-    configure.ac should.  Comments inside macros written in ancillary\n-    .m4 files should.  About the only comments which should\n-    <emphasis>not</emphasis> use #, but use dnl instead, are comments\n-    <emphasis>outside</emphasis> our own macros in the ancillary\n-    files.  The difference is that # comments show up in\n-    <code>configure</code> (which is most helpful for debugging),\n-    while dnl'd lines just vanish.  Since the macros in ancillary\n-    files generate code which appears in odd places, their \"outside\"\n-    comments tend to not be useful while reading\n-    <code>configure</code>.\n+    pound signs, whatever} rather than \"<literal>dnl</literal>\".\n+    Nearly all comments in <filename>configure.ac</filename> should.\n+    Comments inside macros written in ancillary\n+    <filename class=\"extension\">.m4</filename> files should.\n+    About the only comments which should <emphasis>not</emphasis>\n+    use <literal>#</literal>, but use <literal>dnl</literal> instead,\n+    are comments <emphasis>outside</emphasis> our own macros in the ancillary\n+    files.  The difference is that <literal>#</literal> comments show up in\n+    <filename>configure</filename> (which is most helpful for debugging),\n+    while <literal>dnl</literal>'d lines just vanish.  Since the macros\n+    in ancillary files generate code which appears in odd places,\n+    their \"outside\" comments tend to not be useful while reading\n+    <filename>configure</filename>.\n   </para>\n \n   <para>\n     Do not use any <code>$target*</code> variables, such as\n-    <code>$target_alias</code>.  The single exception is in\n-    configure.ac, for automake+dejagnu's sake.\n+    <varname>$target_alias</varname>.  The single exception is in\n+    <filename>configure.ac</filename>, for automake+dejagnu's sake.\n   </para>\n </section>\n \n <section xml:id=\"build_hacking.configure.acinclude\"><info><title>The acinclude.m4 layout</title></info>\n \n   <para>\n-    The nice thing about acinclude.m4/aclocal.m4 is that macros aren't\n+    The nice thing about\n+    <filename>acinclude.m4</filename>/<filename>aclocal.m4</filename>\n+    is that macros aren't\n     actually performed/called/expanded/whatever here, just loaded.  So\n     we can arrange the contents however we like.  As of this writing,\n-    acinclude.m4 is arranged as follows:\n+    <filename>acinclude.m4</filename> is arranged as follows:\n   </para>\n   <programlisting>\n     GLIBCXX_CHECK_HOST\n     GLIBCXX_TOPREL_CONFIGURE\n     GLIBCXX_CONFIGURE\n   </programlisting>\n   <para>\n-    All the major variable \"discovery\" is done here.  CXX, multilibs,\n+    All the major variable \"discovery\" is done here.\n+    <varname>CXX</varname>, multilibs,\n     etc.\n   </para>\n   <programlisting>\n@@ -263,7 +268,8 @@ in the build directory starts the build process. The <literal>all</literal> targ\n <orderedlist>\n  <listitem>\n    <para>\n-     Builds the call to the <literal>AC_ARG_ENABLE</literal> macro, with --help text\n+     Builds the call to the <literal>AC_ARG_ENABLE</literal> macro, with\n+     <option>--help</option> text\n      properly quoted and aligned.  (Death to changequote!)\n    </para>\n  </listitem>\n@@ -305,21 +311,25 @@ in the build directory starts the build process. The <literal>all</literal> targ\n <itemizedlist>\n  <listitem>\n    <para>\n-     FEATURE is the string that follows --enable.  The results of the\n-     test (such as it is) will be in the variable $enable_FEATURE,\n-     where FEATURE has been squashed.  Example:\n-     <code>[extra-foo]</code>, controlled by the --enable-extra-foo\n-     option and stored in $enable_extra_foo.\n+     <literal>FEATURE</literal> is the string that follows\n+     <option>--enable</option>.  The results of the\n+     test (such as it is) will be in the variable\n+     <varname>$enable_FEATURE</varname>,\n+     where <literal>FEATURE</literal> has been squashed.  Example:\n+     <code>[extra-foo]</code>, controlled by the\n+     <option>--enable-extra-foo</option>\n+     option and stored in <varname>$enable_extra_foo</varname>.\n    </para>\n  </listitem>\n  <listitem>\n    <para>\n-     DEFAULT is the value to store in $enable_FEATURE if the user does\n-     not pass --enable/--disable.  It should be one of the permitted\n-     values passed later.  Examples: <code>[yes]</code>, or\n-     <code>[bar]</code>, or <code>[$1]</code> (which passes the\n-     argument given to the <literal>GLIBCXX_ENABLE_FOO</literal> macro\n-     as the default).\n+     <literal>DEFAULT</literal> is the value to store in\n+     <varname>$enable_FEATURE</varname> if the user does\n+     not pass <option>--enable</option>/<option>--disable</option>.\n+     It should be one of the permitted values passed later.\n+     Examples: <code>[yes]</code>, or <code>[bar]</code>, or\n+     <code>[$1]</code> (which passes the argument given to the\n+     <literal>GLIBCXX_ENABLE_FOO</literal> macro as the default).\n    </para>\n    <para>\n      For cases where we need to probe for particular models of things,\n@@ -329,11 +339,11 @@ in the build directory starts the build process. The <literal>all</literal> targ\n  </listitem>\n  <listitem>\n    <para>\n-     HELP-ARG is any text to append to the option string itself in the\n-     --help output.  Examples: <code>[]</code> (i.e., an empty string,\n-     which appends nothing), <code>[=BAR]</code>, which produces\n-     <code>--enable-extra-foo=BAR</code>, and\n-     <code>[@&lt;:@=BAR@:&gt;@]</code>, which produces\n+     <literal>HELP-ARG</literal> is any text to append to the option string\n+     itself in the <option>--help</option> output.  Examples:\n+     <code>[]</code> (i.e., an empty string, which appends nothing),\n+     <code>[=BAR]</code>, which produces <code>--enable-extra-foo=BAR</code>,\n+     and <code>[@&lt;:@=BAR@:&gt;@]</code>, which produces\n      <code>--enable-extra-foo[=BAR]</code>.  See the difference?  See\n      what it implies to the user?\n    </para>\n@@ -345,18 +355,19 @@ in the build directory starts the build process. The <literal>all</literal> targ\n  </para>\n  </listitem>\n  <listitem>\n-   <para>HELP-STRING is what you think it is.  Do not include the\n+   <para><literal>HELP-STRING</literal> is what you think it is.  Do not include the\n    \"default\" text like we used to do; it will be done for you by\n-   GLIBCXX_ENABLE.  By convention, these are not full English\n-   sentences.  Example: [turn on extra foo]\n+   <literal>GLIBCXX_ENABLE</literal>.  By convention, these are not full English\n+   sentences.  Example: <literal>[turn on extra foo]</literal>\n    </para>\n  </listitem>\n </itemizedlist>\n \n <para>\n   With no other arguments, only the standard autoconf patterns are\n-  allowed: \"<code>--{enable,disable}-foo[={yes,no}]</code>\" The\n-  $enable_FEATURE variable is guaranteed to equal either \"yes\" or \"no\"\n+  allowed: \"<option>--{enable,disable}-foo[={yes,no}]</option>\" The\n+  <varname>$enable_FEATURE</varname> variable is guaranteed to equal\n+  either \"<literal>yes</literal>\" or \"<literal>no</literal>\"\n   after the macro.  If the user tries to pass something else, an\n   explanatory error message will be given, and configure will halt.\n </para>\n@@ -365,11 +376,14 @@ in the build directory starts the build process. The <literal>all</literal> targ\n   The second signature takes a fifth argument, \"<code>[permit\n   a | b | c | ...]</code>\"\n   This allows <emphasis>a</emphasis> or <emphasis>b</emphasis> or\n-  ... after the equals sign in the option, and $enable_FEATURE is\n+  ... after the equals sign in the option, and\n+  <varname>$enable_FEATURE</varname> is\n   guaranteed to equal one of them after the macro.  Note that if you\n-  want to allow plain --enable/--disable with no \"=whatever\", you must\n-  include \"yes\" and \"no\" in the list of permitted values.  Also note\n-  that whatever you passed as DEFAULT must be in the list.  If the\n+  want to allow plain <option>--enable</option>/<option>--disable</option>\n+  with no \"<literal>=whatever</literal>\", you must\n+  include \"<literal>yes</literal>\" and \"<literal>no</literal>\" in the\n+  list of permitted values.  Also note that whatever you passed as\n+  <literal>DEFAULT</literal> must be in the list.  If the\n   user tries to pass something not on the list, a semi-explanatory\n   error message will be given, and configure will halt.  Example:\n   <code>[permit generic|gnu|ieee_1003.1-2001|yes|no|auto]</code>\n@@ -380,8 +394,8 @@ in the build directory starts the build process. The <literal>all</literal> targ\n   code to execute if the user actually passes the enable/disable\n   option.  (If the user does not, the default is used.  Duh.)  No\n   argument checking at all is done in this signature.  See\n-  GLIBCXX_ENABLE_CXX_FLAGS for an example of handling, and an error\n-  message.\n+  <literal>GLIBCXX_ENABLE_CXX_FLAGS</literal> for an example of handling,\n+  and an error message.\n </para>\n \n </section>\n@@ -430,7 +444,7 @@ in the build directory starts the build process. The <literal>all</literal> targ\n    <para>\n      Generates a libtool convenience library,\n      <filename>libc++98convenience</filename> with language-support\n-     routines. Uses the <literal>-std=gnu++98</literal> dialect.\n+     routines. Uses the <option>-std=gnu++98</option> dialect.\n    </para>\n  </listitem>\n  <listitem>\n@@ -440,7 +454,7 @@ in the build directory starts the build process. The <literal>all</literal> targ\n    <para>\n      Generates a libtool convenience library,\n      <filename>libc++11convenience</filename> with language-support\n-     routines. Uses the <literal>-std=gnu++11</literal> dialect.\n+     routines. Uses the <option>-std=gnu++11</option> dialect.\n    </para>\n  </listitem>\n  <listitem>"}, {"sha": "740323ab57cb61a47a32d5023cd857d2a80392f8", "filename": "libstdc++-v3/doc/xml/manual/test.xml", "status": "modified", "additions": 194, "deletions": 169, "changes": 363, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8107a983fb78418329a23574f8b915b7d909f04/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Ftest.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8107a983fb78418329a23574f8b915b7d909f04/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Ftest.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Ftest.xml?ref=a8107a983fb78418329a23574f8b915b7d909f04", "patch": "@@ -2,7 +2,7 @@\n \t xml:id=\"manual.intro.setup.test\" xreflabel=\"Testing\">\n <?dbhtml filename=\"test.html\"?>\n \n-<info><title>Test</title>\n+<info><title>Testing</title>\n   <keywordset>\n     <keyword>ISO C++</keyword>\n     <keyword>test</keyword>\n@@ -19,80 +19,114 @@ The libstdc++ testsuite includes testing for standard conformance,\n regressions, ABI, and performance.\n </para>\n \n-<section xml:id=\"test.organization\" xreflabel=\"Test Organization\"><info><title>Organization</title></info>\n+<section xml:id=\"test.organization\" xreflabel=\"Test Organization\"><info><title>Test Organization</title></info>\n \n \n <section xml:id=\"test.organization.layout\" xreflabel=\"Directory Layout\"><info><title>Directory Layout</title></info>\n \n \n <para>\n-  The directory <emphasis>libsrcdir/testsuite</emphasis> contains the\n-  individual test cases organized in sub-directories corresponding to\n-  clauses of the C++ standard (detailed below), the dejagnu test\n-  harness support files, and sources to various testsuite utilities\n-  that are packaged in a separate testing library.\n+  The directory\n+  <filename class=\"directory\"><replaceable>gccsrcdir</replaceable>/libstdc++-v3/testsuite</filename>\n+  contains the individual test cases organized in sub-directories\n+  corresponding to clauses of the C++ standard (detailed below),\n+  the DejaGnu test harness support files, and sources to various\n+  testsuite utilities that are packaged in a separate testing library.\n </para>\n \n <para>\n   All test cases for functionality required by the runtime components\n   of the C++ standard (ISO 14882) are files within the following\n-  directories.\n-</para>\n+  directories:\n \n    <programlisting>\n-17_intro\n-18_support\n-19_diagnostics\n-20_util\n-21_strings\n-22_locale\n-23_containers\n-25_algorithms\n-26_numerics\n-27_io\n-28_regex\n-29_atomics\n-30_threads\n+    17_intro\n+    18_support\n+    19_diagnostics\n+    20_util\n+    21_strings\n+    22_locale\n+    23_containers\n+    24_iterators\n+    25_algorithms\n+    26_numerics\n+    27_io\n+    28_regex\n+    29_atomics\n+    30_threads\n    </programlisting>\n+</para>\n \n    <para>\n       In addition, the following directories include test files:\n-   </para>\n \n-   <programlisting>\n-tr1\t\t  Tests for components as described by the Technical Report on Standard Library Extensions (TR1).\n-backward\t  Tests for backwards compatibility and deprecated features.\n-demangle\t  Tests for __cxa_demangle, the IA 64 C++ ABI demangler\n-ext\t\t  Tests for extensions.\n-performance\t  Tests for performance analysis, and performance regressions.\n-   </programlisting>\n+<variablelist spacing=\"compact\">\n+<varlistentry>\n+  <term><filename class=\"directory\">tr1</filename></term>\n+  <listitem>Tests for components as described by the Technical Report\n+    on Standard Library Extensions (<link linked=\"status.iso.tr1\">TR1</link>).\n+  </listitem>\n+</varlistentry>\n+<varlistentry>\n+  <term><filename class=\"directory\">backward</filename></term>\n+  <listitem>Tests for backwards compatibility and deprecated features.\n+  </listitem>\n+</varlistentry>\n+<varlistentry>\n+  <term><filename class=\"directory\">demangle</filename></term>\n+  <listitem>Tests for <function>__cxa_demangle</function>, the IA-64 C++ ABI\n+    demangler.\n+  </listitem>\n+</varlistentry>\n+<varlistentry>\n+  <term><filename class=\"directory\">ext</filename></term>\n+  <listitem>Tests for extensions.</listitem>\n+</varlistentry>\n+<varlistentry>\n+  <term><filename class=\"directory\">performance</filename></term>\n+  <listitem>Tests for performance analysis, and performance regressions.\n+  </listitem>\n+</varlistentry>\n+</variablelist>\n+   </para>\n \n    <para>\n       Some directories don't have test files, but instead contain\n       auxiliary information:\n-   </para>\n \n-   <programlisting>\n-config\t\t  Files for the dejagnu test harness.\n-lib\t\t  Files for the dejagnu test harness.\n-libstdc++*     \t  Files for the dejagnu test harness.\n-data\t\t  Sample text files for testing input and output.\n-util\t\t  Files for libtestc++, utilities and testing routines.\n-   </programlisting>\n+<variablelist spacing=\"compact\">\n+<varlistentry>\n+  <term><filename class=\"directory\">config</filename></term>\n+  <listitem>Files for the DejaGnu test harness.</listitem>\n+</varlistentry>\n+<varlistentry>\n+  <term><filename class=\"directory\">lib</filename></term>\n+  <listitem>Files for the DejaGnu test harness.</listitem>\n+</varlistentry>\n+<varlistentry>\n+  <term><filename class=\"directory\">libstdc++*</filename></term>\n+  <listitem>Files for the DejaGnu test harness.</listitem>\n+</varlistentry>\n+<varlistentry>\n+  <term><filename class=\"directory\">data</filename></term>\n+  <listitem>Sample text files for testing input and output.</listitem>\n+</varlistentry>\n+<varlistentry>\n+  <term><filename class=\"directory\">util</filename></term>\n+  <listitem>Files for libtestc++, utilities and testing routines.</listitem>\n+</varlistentry>\n+</variablelist>\n+   </para>\n \n    <para>\n       Within a directory that includes test files, there may be\n       additional subdirectories, or files.  Originally, test cases\n       were appended to one file that represented a particular section\n       of the chapter under test, and was named accordingly. For\n       instance, to test items related to <code> 21.3.6.1 -\n-      basic_string::find [lib.string::find]</code> in the standard,\n-      the following was used:\n-   </para>\n-   <programlisting>\n-21_strings/find.cc\n-   </programlisting>\n-   <para>\n+      <function>basic_string::find</function> [lib.string::find]</code>\n+      in the standard, the following was used:\n+<programlisting>    21_strings/find.cc </programlisting>\n       However, that practice soon became a liability as the test cases\n       became huge and unwieldy, and testing new or extended\n       functionality (like wide characters or named locales) became\n@@ -102,19 +136,17 @@ util\t\t  Files for libtestc++, utilities and testing routines.\n       above issues and gives finer grained results and more manageable\n       error debugging. As an example, the test case quoted above\n       becomes:\n+<programlisting>    21_strings/basic_string/find/char/1.cc\n+    21_strings/basic_string/find/char/2.cc\n+    21_strings/basic_string/find/char/3.cc\n+    21_strings/basic_string/find/wchar_t/1.cc\n+    21_strings/basic_string/find/wchar_t/2.cc\n+    21_strings/basic_string/find/wchar_t/3.cc</programlisting>\n    </para>\n-   <programlisting>\n-21_strings/basic_string/find/char/1.cc\n-21_strings/basic_string/find/char/2.cc\n-21_strings/basic_string/find/char/3.cc\n-21_strings/basic_string/find/wchar_t/1.cc\n-21_strings/basic_string/find/wchar_t/2.cc\n-21_strings/basic_string/find/wchar_t/3.cc\n-   </programlisting>\n \n    <para>\n-      All new tests should be written with the policy of one test\n-      case, one file in mind.\n+      All new tests should be written with the policy of \"one test\n+      case, one file\" in mind.\n    </para>\n </section>\n \n@@ -128,87 +160,72 @@ util\t\t  Files for libtestc++, utilities and testing routines.\n       tests.\n    </para>\n \n-<itemizedlist>\n-<listitem>\n-  <para>\n-   <emphasis>_xin.cc</emphasis>\n-  </para>\n-   <para>\n+<variablelist>\n+<varlistentry>\n+  <term><filename class=\"extension\">_xin.cc</filename></term>\n+  <listitem>\n       This test case expects some kind of interactive input in order\n       to finish or pass. At the moment, the interactive tests are not\n       run by default. Instead, they are run by hand, like:\n-   </para>\n       <programlisting>\n g++ 27_io/objects/char/3_xin.cc\n-cat 27_io/objects/char/3_xin.in | a.out\n-     </programlisting>\n-</listitem>\n-<listitem>\n-   <para>\n-     <emphasis>.in</emphasis>\n-   </para>\n-   <para>\n+cat 27_io/objects/char/3_xin.in | a.out</programlisting>\n+  </listitem>\n+</varlistentry>\n+<varlistentry>\n+  <term><filename class=\"extension\">.in</filename></term>\n+  <listitem>\n       This file contains the expected input for the corresponding <emphasis>\n       _xin.cc</emphasis> test case.\n-   </para>\n-</listitem>\n-<listitem>\n-  <para>\n-   <emphasis>_neg.cc</emphasis>\n-  </para>\n-   <para>\n+  </listitem>\n+</varlistentry>\n+<varlistentry>\n+  <term><filename class=\"extension\">_neg.cc</filename></term>\n+  <listitem>\n       This test case is expected to fail: it's a negative test. At the\n       moment, these are almost always compile time errors.\n-   </para>\n-</listitem>\n-<listitem>\n-  <para>\n-   <emphasis>char</emphasis>\n-  </para>\n-   <para>\n+  </listitem>\n+</varlistentry>\n+<varlistentry>\n+  <term><filename class=\"directory\">char</filename></term>\n+  <listitem>\n       This can either be a directory name or part of a longer file\n       name, and indicates that this file, or the files within this\n       directory are testing the <code>char</code> instantiation of a\n       template.\n-   </para>\n-</listitem>\n-<listitem>\n-  <para>\n-   <emphasis>wchar_t</emphasis>\n-  </para>\n-   <para>\n+  </listitem>\n+</varlistentry>\n+<varlistentry>\n+  <term><filename class=\"directory\">wchar_t</filename></term>\n+  <listitem>\n       This can either be a directory name or part of a longer file\n       name, and indicates that this file, or the files within this\n       directory are testing the <code>wchar_t</code> instantiation of\n       a template. Some hosts do not support <code>wchar_t</code>\n       functionality, so for these targets, all of these tests will not\n       be run.\n-   </para>\n-</listitem>\n-<listitem>\n-  <para>\n-   <emphasis>thread</emphasis>\n-  </para>\n-   <para>\n+  </listitem>\n+</varlistentry>\n+<varlistentry>\n+  <term><filename class=\"directory\">thread</filename></term>\n+  <listitem>\n       This can either be a directory name or part of a longer file\n       name, and indicates that this file, or the files within this\n       directory are testing situations where multiple threads are\n       being used.\n-   </para>\n-</listitem>\n-<listitem>\n-  <para>\n-   <emphasis>performance</emphasis>\n-  </para>\n-   <para>\n+  </listitem>\n+</varlistentry>\n+<varlistentry>\n+  <term><filename class=\"directory\">performance</filename></term>\n+  <listitem>\n       This can either be an enclosing directory name or part of a\n       specific file name. This indicates a test that is used to\n       analyze runtime performance, for performance regression testing,\n       or for other optimization related analysis. At the moment, these\n       test cases are not run by default.\n-   </para>\n-</listitem>\n-</itemizedlist>\n+  </listitem>\n+</varlistentry>\n+</variablelist>\n \n </section>\n </section>\n@@ -222,24 +239,29 @@ cat 27_io/objects/char/3_xin.in | a.out\n \n     <para>\n       You can check the status of the build without installing it\n-      using the dejagnu harness, much like the rest of the gcc\n-      tools.</para>\n-   <programlisting> make check</programlisting>\n-   <para>in the <emphasis>libbuilddir</emphasis> directory.</para>\n-   <para>or</para>\n-   <programlisting> make check-target-libstdc++-v3</programlisting>\n-   <para>in the <emphasis>gccbuilddir</emphasis> directory.\n-     </para>\n+      using the DejaGnu harness, much like the rest of the gcc\n+      tools, i.e.\n+   <userinput>make check</userinput>\n+      in the\n+      <filename class=\"directory\"><replaceable>libbuilddir</replaceable></filename>\n+      directory, or\n+   <userinput>make check-target-libstdc++-v3</userinput>\n+       in the\n+      <filename class=\"directory\"><replaceable>gccbuilddir</replaceable></filename>\n+       directory.\n+    </para>\n \n      <para>\n        These commands are functionally equivalent and will create a\n-       'testsuite' directory underneath\n-       <emphasis>libbuilddir</emphasis> containing the results of the\n-       tests. Two results files will be generated: <emphasis>\n-       libstdc++.sum</emphasis>, which is a PASS/FAIL summary for each\n-       test, and <emphasis>libstdc++.log</emphasis> which is a log of\n-       the exact command line passed to the compiler, the compiler\n-       output, and the executable output (if any).\n+       '<filename class=\"directory\">testsuite</filename>' directory underneath\n+       <filename class=\"directory\"><replaceable>libbuilddir</replaceable></filename>\n+       containing the results of the\n+       tests. Two results files will be generated:\n+       <filename>libstdc++.sum</filename>, which is a PASS/FAIL summary\n+       for each test, and\n+       <filename>libstdc++.log</filename> which is a log of\n+       the exact command-line passed to the compiler, the compiler\n+       output, and the executable output (if any) for each test.\n      </para>\n \n      <para>\n@@ -262,88 +284,88 @@ cat 27_io/objects/char/3_xin.in | a.out\n       checking the exported symbols of the shared library.\n     </para>\n     <para>\n-      To debug the dejagnu test harness during runs, try invoking with a\n-      specific argument to the variable RUNTESTFLAGS, as below.\n-    </para>\n-\n+      To debug the DejaGnu test harness during runs, try invoking with a\n+      specific argument to the variable <varname>RUNTESTFLAGS</varname>,\n+      like so:\n <programlisting>\n-make check-target-libstdc++-v3 RUNTESTFLAGS=\"-v\"\n+    make check-target-libstdc++-v3 RUNTESTFLAGS=\"-v\"\n </programlisting>\n-\n-    <para>\n       or\n-    </para>\n-\n <programlisting>\n-make check-target-libstdc++-v3 RUNTESTFLAGS=\"-v -v\"\n+    make check-target-libstdc++-v3 RUNTESTFLAGS=\"-v -v\"\n </programlisting>\n+    </para>\n \n     <para>\n       To run a subset of the library tests, you can either generate the\n-      <emphasis>testsuite_files</emphasis> file (described below) by running\n-      <command>make testsuite_files</command> in the\n-      <emphasis>libbuilddir/testsuite</emphasis> directory, then edit the\n+      <filename>testsuite_files</filename> file (described below) by running\n+      <userinput>make testsuite_files</userinput> in the\n+      <filename class=\"directory\"><replaceable>libbuilddir</replaceable>/testsuite</filename>\n+      directory, then edit the\n       file to remove the tests you don't want and then run the testsuite as\n       normal, or you can specify a testsuite and a subset of tests in the\n-      RUNTESTFLAGS variable.\n+      <varname>RUNTESTFLAGS</varname> variable.\n     </para>\n \n     <para>\n       For example, to run only the tests for containers you could use:\n-    </para>\n \n <programlisting>\n-make check-target-libstdc++-v3 RUNTESTFLAGS=\"conformance.exp=23_containers/*\"\n+    make check-target-libstdc++-v3 RUNTESTFLAGS=\"conformance.exp=23_containers/*\"\n </programlisting>\n+    </para>\n \n     <para>\n-      When combining this with other options in RUNTESTFLAGS the\n-      <emphasis>testsuite.exp=testfiles</emphasis> options must come first.\n+      When combining this with other options in <varname>RUNTESTFLAGS</varname>\n+      the <option>testsuite.exp=testfiles</option> options must come first.\n     </para>\n \n     <para>\n-      There are two ways to run on a simulator: set up DEJAGNU to point to a\n-      specially crafted site.exp, or pass down --target_board flags.\n+      There are two ways to run on a simulator: set up <envar>DEJAGNU</envar>\n+      to point to a specially crafted <filename>site.exp</filename>,\n+      or pass down <option>--target_board</option> flags.\n     </para>\n \n     <para>\n     Example flags to pass down for various embedded builds are as follows:\n-    </para>\n \n <programlisting>\n-      --target=powerpc-eabism (libgloss/sim)\n-make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=powerpc-sim\"\n+  --target=powerpc-eabisim <emphasis>(libgloss/sim)</emphasis>\n+  make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=powerpc-sim\"\n \n---target=calmrisc32 (libgloss/sid)\n-make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=calmrisc32-sid\"\n+  --target=calmrisc32 <emphasis>(libgloss/sid)</emphasis>\n+  make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=calmrisc32-sid\"\n \n---target=xscale-elf (newlib/sim)\n-make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=arm-sim\"\n+  --target=xscale-elf <emphasis>(newlib/sim)</emphasis>\n+  make check-target-libstdc++-v3 RUNTESTFLAGS=\"--target_board=arm-sim\"\n </programlisting>\n+    </para>\n \n     <para>\n       Also, here is an example of how to run the libstdc++ testsuite\n       for a multilibed build directory with different ABI settings:\n-    </para>\n \n  <programlisting>\n-make check-target-libstdc++-v3 RUNTESTFLAGS='--target_board \\\"unix{-mabi=32,,-mabi=64}\\\"'\n+    make check-target-libstdc++-v3 RUNTESTFLAGS='--target_board \\\"unix{-mabi=32,,-mabi=64}\\\"'\n </programlisting>\n+    </para>\n \n     <para>\n       You can run the tests with a compiler and library that have\n       already been installed.  Make sure that the compiler (e.g.,\n-      <code>g++</code>) is in your <code>PATH</code>.  If you are\n+      <command>g++</command>) is in your <envar>PATH</envar>.  If you are\n       using shared libraries, then you must also ensure that the\n       directory containing the shared version of libstdc++ is in your\n-      <code>LD_LIBRARY_PATH</code>, or equivalent.  If your GCC source\n-      tree is at <code>/path/to/gcc</code>, then you can run the tests\n-      as follows:\n-    </para>\n+      <envar>LD_LIBRARY_PATH</envar>, or\n+      <link linkend=\"manual.intro.using.linkage.dynamic\">equivalent</link>.\n+      If your GCC source tree is at\n+      <filename class=\"directory\">/path/to/gcc</filename>,\n+      then you can run the tests as follows:\n \n <programlisting>\n-runtest --tool libstdc++ --srcdir=/path/to/gcc/libstdc++-v3/testsuite\n+    runtest --tool libstdc++ --srcdir=/path/to/gcc/libstdc++-v3/testsuite\n </programlisting>\n+    </para>\n \n     <para>\n       The testsuite will create a number of files in the directory in\n@@ -356,12 +378,13 @@ runtest --tool libstdc++ --srcdir=/path/to/gcc/libstdc++-v3/testsuite\n     <para>\n       In addition, there are some testing options that are mostly of\n       interest to library maintainers and system integrators. As such,\n-      these tests may not work on all cpu and host combinations, and\n+      these tests may not work on all CPU and host combinations, and\n       may need to be executed in the\n-      <emphasis>libbuilddir/testsuite</emphasis> directory.  These\n+      <filename class=\"directory\"><replaceable>libbuilddir</replaceable>/testsuite</filename>\n+      directory.  These\n       options include, but are not necessarily limited to, the\n       following:\n-   </para>\n+    </para>\n \n    <programlisting>\n    make testsuite_files\n@@ -626,30 +649,32 @@ up in the normal.exp file.\n </programlisting>\n \n    <para>\n-    More examples can be found in the libstdc++-v3/testsuite/*/*.cc files.\n+    More examples can be found in the\n+    <filename>libstdc++-v3/testsuite/*/*.cc</filename> files.\n    </para>\n </section>\n \n \n <section xml:id=\"test.harness\" xreflabel=\"Test Harness and Utilities\"><info><title>Test Harness and Utilities</title></info>\n \n \n-<section xml:id=\"test.harness.dejagnu\"><info><title>Dejagnu Harness Details</title></info>\n+<section xml:id=\"test.harness.dejagnu\"><info><title>DejaGnu Harness Details</title></info>\n \n   <para>\n     Underlying details of testing for conformance and regressions are\n-    abstracted via the GNU Dejagnu package. This is similar to the\n+    abstracted via the GNU DejaGnu package. This is similar to the\n     rest of GCC.\n   </para>\n \n \n <para>This is information for those looking at making changes to the testsuite\n-structure, and/or needing to trace dejagnu's actions with --verbose.  This\n-will not be useful to people who are \"merely\" adding new tests to the existing\n-structure.\n+structure, and/or needing to trace DejaGnu's actions with\n+<option>--verbose</option>.\n+This will not be useful to people who are \"merely\" adding new tests\n+to the existing structure.\n </para>\n \n-<para>The first key point when working with dejagnu is the idea of a \"tool\".\n+<para>The first key point when working with DejaGnu is the idea of a \"tool\".\n Files, directories, and functions are all implicitly used when they are\n named after the tool in use.  Here, the tool will always be \"libstdc++\".\n </para>\n@@ -665,7 +690,7 @@ our own.  Callbacks must be prefixed with the name of the tool.  To easily\n distinguish the others, by convention our own routines are named \"v3-*\".\n </para>\n \n-<para>The next key point when working with dejagnu is \"test files\".  Any\n+<para>The next key point when working with DejaGnu is \"test files\".  Any\n directory whose name starts with the tool name will be searched for test files.\n (We have only one.)  In those directories, any <code>.exp</code> file is\n considered a test file, and will be run in turn.  Our main test file is called"}]}