{"sha": "9a26dfc815e601a6377fa17b82c37fe3dbc5cbb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEyNmRmYzgxNWU2MDFhNjM3N2ZhMTdiODJjMzdmZTNkYmM1Y2JiMw==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-05-03T16:33:45Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-05-03T16:33:45Z"}, "message": "re PR tree-optimization/78496 (Missed opportunities for jump threading)\n\n\tPR tree-optimization/78496\n\t* tree-vrp.c (simplify_cond_using_ranges_1): Renamed\n\tfrom simplify_cond_using_ranges.  Split off code to walk\n\tbackwards through casts into ...\n\t(simplify_cond_using_ranges_2): New function.\n\t(simplify_stmt_using_ranges): Call simplify_cond_using_ranges_1.\n\t(execute_vrp): After identifying jump threads, call\n\tsimplify_cond_using_ranges_2.\n\n\tPR tree-optimization/78496\n\t* gcc.dg/tree-ssa/ssa-thread-15.c: New test.\n\nFrom-SVN: r247556", "tree": {"sha": "b1aeeb94cbd5ff125b89517a329780678e4d377a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1aeeb94cbd5ff125b89517a329780678e4d377a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a26dfc815e601a6377fa17b82c37fe3dbc5cbb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a26dfc815e601a6377fa17b82c37fe3dbc5cbb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a26dfc815e601a6377fa17b82c37fe3dbc5cbb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a26dfc815e601a6377fa17b82c37fe3dbc5cbb3/comments", "author": null, "committer": null, "parents": [{"sha": "5386abe0daa9f1cdc2a2ca07457500e155d24810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5386abe0daa9f1cdc2a2ca07457500e155d24810", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5386abe0daa9f1cdc2a2ca07457500e155d24810"}], "stats": {"total": 114, "additions": 108, "deletions": 6}, "files": [{"sha": "456419014b3bcf4bd469b52093325c7b8ce0f68b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a26dfc815e601a6377fa17b82c37fe3dbc5cbb3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a26dfc815e601a6377fa17b82c37fe3dbc5cbb3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a26dfc815e601a6377fa17b82c37fe3dbc5cbb3", "patch": "@@ -1,3 +1,14 @@\n+2017-05-03  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/78496\n+\t* tree-vrp.c (simplify_cond_using_ranges_1): Renamed\n+\tfrom simplify_cond_using_ranges.  Split off code to walk\n+\tbackwards through casts into ...\n+\t(simplify_cond_using_ranges_2): New function.\n+\t(simplify_stmt_using_ranges): Call simplify_cond_using_ranges_1.\n+\t(execute_vrp): After identifying jump threads, call\n+\tsimplify_cond_using_ranges_2.\n+\n 2017-05-03  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR bootstrap/80609"}, {"sha": "55a44e4635a11957266bef38be63374b6ebc817d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a26dfc815e601a6377fa17b82c37fe3dbc5cbb3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a26dfc815e601a6377fa17b82c37fe3dbc5cbb3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a26dfc815e601a6377fa17b82c37fe3dbc5cbb3", "patch": "@@ -1,3 +1,8 @@\n+2017-05-03  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/78496\n+\t* gcc.dg/tree-ssa/ssa-thread-15.c: New test.\n+\n 2017-05-03  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* g++.dg/lto/pr79671_0.C (foo): Fix asm constraints."}, {"sha": "f73268cacbb7271b4f011d871d2b4451d369e690", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-thread-15.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a26dfc815e601a6377fa17b82c37fe3dbc5cbb3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a26dfc815e601a6377fa17b82c37fe3dbc5cbb3/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-thread-15.c?ref=9a26dfc815e601a6377fa17b82c37fe3dbc5cbb3", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do compile } */ \n+/* { dg-options \"-O2 -fdump-tree-vrp1\" } */\n+\n+/* We should thread the if (!in_loop) completely leaving\n+   just two conditionals.  */\n+/* { dg-final { scan-tree-dump-times \"if \\\\(\" 2 \"vrp1\" } } */\n+\n+\n+union tree_node;\n+typedef union tree_node *tree;\n+\n+enum size_type_kind\n+{\n+  SIZETYPE,\n+  SSIZETYPE,\n+  BITSIZETYPE,\n+  SBITSIZETYPE,\n+  TYPE_KIND_LAST\n+};\n+extern tree size_int_kind (long, enum size_type_kind);\n+\n+\n+\n+typedef struct\n+{\n+\n+  tree base, step;\n+\n+} affine_iv;\n+\n+struct loop\n+{\n+\n+  int num;\n+};\n+extern unsigned char simple_iv ();\n+\n+unsigned char\n+dr_analyze_innermost (struct loop *loop, tree poffset)\n+{\n+  affine_iv offset_iv;\n+  unsigned char in_loop = (loop && loop->num);\n+\n+\n+  if (in_loop)\n+    simple_iv ();\n+\n+  if (!in_loop)\n+    offset_iv.step = size_int_kind (0, SSIZETYPE);\n+\n+}"}, {"sha": "6a4035dc9247bff74b6c2fb906bfecb29225d8c9", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a26dfc815e601a6377fa17b82c37fe3dbc5cbb3/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a26dfc815e601a6377fa17b82c37fe3dbc5cbb3/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=9a26dfc815e601a6377fa17b82c37fe3dbc5cbb3", "patch": "@@ -9977,7 +9977,7 @@ range_fits_type_p (value_range *vr, unsigned dest_precision, signop dest_sgn)\n    the original conditional.  */\n \n static bool\n-simplify_cond_using_ranges (gcond *stmt)\n+simplify_cond_using_ranges_1 (gcond *stmt)\n {\n   tree op0 = gimple_cond_lhs (stmt);\n   tree op1 = gimple_cond_rhs (stmt);\n@@ -10080,6 +10080,22 @@ simplify_cond_using_ranges (gcond *stmt)\n \t    }\n \t}\n     }\n+  return false;\n+}\n+\n+/* STMT is a conditional at the end of a basic block.\n+\n+   If the conditional is of the form SSA_NAME op constant and the SSA_NAME\n+   was set via a type conversion, try to replace the SSA_NAME with the RHS\n+   of the type conversion.  Doing so makes the conversion dead which helps\n+   subsequent passes.  */\n+\n+static void\n+simplify_cond_using_ranges_2 (gcond *stmt)\n+{\n+  tree op0 = gimple_cond_lhs (stmt);\n+  tree op1 = gimple_cond_rhs (stmt);\n+  enum tree_code cond_code = gimple_cond_code (stmt);\n \n   /* If we have a comparison of an SSA_NAME (OP0) against a constant,\n      see if OP0 was set by a type conversion where the source of\n@@ -10097,7 +10113,7 @@ simplify_cond_using_ranges (gcond *stmt)\n \n       if (!is_gimple_assign (def_stmt)\n \t  || !CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (def_stmt)))\n-\treturn false;\n+\treturn;\n \n       innerop = gimple_assign_rhs1 (def_stmt);\n \n@@ -10142,12 +10158,16 @@ simplify_cond_using_ranges (gcond *stmt)\n \t      tree newconst = fold_convert (TREE_TYPE (innerop), op1);\n \t      gimple_cond_set_lhs (stmt, innerop);\n \t      gimple_cond_set_rhs (stmt, newconst);\n-\t      return true;\n+\t      update_stmt (stmt);\n+\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t{\n+\t\t  fprintf (dump_file, \"Folded into: \");\n+\t\t  print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n+\t\t  fprintf (dump_file, \"\\n\");\n+\t\t}\n \t    }\n \t}\n     }\n-\n-  return false;\n }\n \n /* Simplify a switch statement using the value range of the switch\n@@ -10746,7 +10766,7 @@ simplify_stmt_using_ranges (gimple_stmt_iterator *gsi)\n \t}\n     }\n   else if (gimple_code (stmt) == GIMPLE_COND)\n-    return simplify_cond_using_ranges (as_a <gcond *> (stmt));\n+    return simplify_cond_using_ranges_1 (as_a <gcond *> (stmt));\n   else if (gimple_code (stmt) == GIMPLE_SWITCH)\n     return simplify_switch_using_ranges (as_a <gswitch *> (stmt));\n   else if (is_gimple_call (stmt)\n@@ -11759,6 +11779,21 @@ execute_vrp (bool warn_array_bounds_p)\n      the datastructures built by VRP.  */\n   identify_jump_threads ();\n \n+  /* A comparison of an SSA_NAME against a constant where the SSA_NAME\n+     was set by a type conversion can often be rewritten to use the\n+     RHS of the type conversion.\n+\n+     However, doing so inhibits jump threading through the comparison.\n+     So that transformation is not performed until after jump threading\n+     is complete.  */\n+  basic_block bb;\n+  FOR_EACH_BB_FN (bb, cfun)\n+    {\n+      gimple *last = last_stmt (bb);\n+      if (last && gimple_code (last) == GIMPLE_COND)\n+\tsimplify_cond_using_ranges_2 (as_a <gcond *> (last));\n+    }\n+\n   vrp_free_lattice ();\n \n   free_numbers_of_iterations_estimates (cfun);"}]}