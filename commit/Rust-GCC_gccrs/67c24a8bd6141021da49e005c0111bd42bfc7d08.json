{"sha": "67c24a8bd6141021da49e005c0111bd42bfc7d08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdjMjRhOGJkNjE0MTAyMWRhNDllMDA1YzAxMTFiZDQyYmZjN2QwOA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2017-11-28T19:28:50Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2017-11-28T19:28:50Z"}, "message": "PR 53796 Improve INQUIRE(RECL=...) handling\n\nThe current F2018 draft (N2137) specifies behavior of the RECL=\nspecifier in the INQUIRE statement, where it previously was left as\nundefined. Namely:\n\n- If the unit is not connected, RECL= should be given the value -1.\n- If the unit is connected with stream access, RECL= should be given\n  the value -2.\n\nFurther, as PR 53796 describes, the handling of RECL= is poor in other\nways as well. When the recl is set to the maximum possible\n(GFC_INTEGER_8_HUGE / LLONG_MAX), which it does by default except for\npreconnected units, and when INQUIRE(RECL=) is used with a 4 byte\ninteger, the value is truncated and the 4 byte value is thus\n-1. Fixing this to generate an error is a lot of work, as currently\nthe truncation is done by the frontend, the library sees only an 8\nbyte value with no indication that the frontend is going to copy it to\na 4 byte one. Instead, this patch does a bit twiddling trick such that\nthe truncated 4 byte value is GFC_INTEGER_4_HUGE while still being\n0.99999999 * GFC_INTEGER_8_HUGE which is large enough for all\npractical purposes.\n\nFinally, the patch removes GFORTRAN_DEFAULT_RECL which was used only\nfor preconnected units, and instead uses the same approach as describe\nabove.\n\nRegtested on x86_64-pc-linux-gnu, Ok for trunk.\n\ngcc/fortran/ChangeLog:\n\n2017-11-28  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/53796\n\t* gfortran.texi: Remove mentions of GFORTRAN_DEFAULT_RECL.\n\nlibgfortran/ChangeLog:\n\n2017-11-28  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/53796\n\t* io/inquire.c (inquire_via_unit): Set recl to -1 for unconnected\n\tunits.\n\t* io/io.h (default_recl): New variable.\n\t* io/open.c (new_unit): Set recl to default_recl for sequential,\n\t-2 for stream access.\n\t* io/transfer.c (read_block_form): Test against default_recl\n\tinstead of DEFAULT_RECL.\n\t(write_block): Likewise.\n\t* io/unit.c (init_units): Calculate max_offset, default_recl.\n\t* libgfortran.h (DEFAULT_RECL): Remove.\n\t* runtime/environ.c: Remove GFORTRAN_DEFAULT_RECL.\n\ngcc/testsuite/ChangeLog:\n\n2017-11-28  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/53796\n\t* gfortran.dg/inquire_recl_f2018.f90: New test.\n\nFrom-SVN: r255215", "tree": {"sha": "4255e7df80923463cf7ce62bf84f31f5f890ab13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4255e7df80923463cf7ce62bf84f31f5f890ab13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67c24a8bd6141021da49e005c0111bd42bfc7d08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c24a8bd6141021da49e005c0111bd42bfc7d08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67c24a8bd6141021da49e005c0111bd42bfc7d08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67c24a8bd6141021da49e005c0111bd42bfc7d08/comments", "author": null, "committer": null, "parents": [{"sha": "6df8934f6ad73b97181fc0a997b3eb8cd799b6a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6df8934f6ad73b97181fc0a997b3eb8cd799b6a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6df8934f6ad73b97181fc0a997b3eb8cd799b6a0"}], "stats": {"total": 125, "additions": 89, "deletions": 36}, "files": [{"sha": "fc971583686ffae943edf95682b9e00ec97270c7", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c24a8bd6141021da49e005c0111bd42bfc7d08/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c24a8bd6141021da49e005c0111bd42bfc7d08/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=67c24a8bd6141021da49e005c0111bd42bfc7d08", "patch": "@@ -1,3 +1,8 @@\n+2017-11-28  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/53796\n+\t* gfortran.texi: Remove mentions of GFORTRAN_DEFAULT_RECL.\n+\n 2017-11-28  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/83021"}, {"sha": "36c7b942355766358d0aacad3ea04a19458f0dc0", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c24a8bd6141021da49e005c0111bd42bfc7d08/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c24a8bd6141021da49e005c0111bd42bfc7d08/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=67c24a8bd6141021da49e005c0111bd42bfc7d08", "patch": "@@ -600,7 +600,6 @@ Malformed environment variables are silently ignored.\n * GFORTRAN_UNBUFFERED_PRECONNECTED:: Do not buffer I/O for preconnected units.\n * GFORTRAN_SHOW_LOCUS::  Show location for runtime errors\n * GFORTRAN_OPTIONAL_PLUS:: Print leading + where permitted\n-* GFORTRAN_DEFAULT_RECL:: Default record length for new files\n * GFORTRAN_LIST_SEPARATOR::  Separator for list output\n * GFORTRAN_CONVERT_UNIT::  Set endianness for unformatted I/O\n * GFORTRAN_ERROR_BACKTRACE:: Show backtrace on run-time errors\n@@ -683,14 +682,6 @@ where permitted by the Fortran standard.  If the first letter\n is @samp{n}, @samp{N} or @samp{0}, a plus sign is not printed\n in most cases.  Default is not to print plus signs.\n \n-@node GFORTRAN_DEFAULT_RECL\n-@section @env{GFORTRAN_DEFAULT_RECL}---Default record length for new files\n-\n-This environment variable specifies the default record length, in\n-bytes, for files which are opened without a @code{RECL} tag in the\n-@code{OPEN} statement.  This must be a positive integer.  The\n-default value is 1073741824 bytes (1 GB).\n-\n @node GFORTRAN_LIST_SEPARATOR\n @section @env{GFORTRAN_LIST_SEPARATOR}---Separator for list output\n "}, {"sha": "e0e027b7653c14c0a6bbc41ac576c3651a30c76b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c24a8bd6141021da49e005c0111bd42bfc7d08/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c24a8bd6141021da49e005c0111bd42bfc7d08/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=67c24a8bd6141021da49e005c0111bd42bfc7d08", "patch": "@@ -1,3 +1,8 @@\n+2017-11-28  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\tPR fortran/53796\n+\t* gfortran.dg/inquire_recl_f2018.f90: New test.\n+\n 2017-11-28  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \t    Martin Jambor  <mjambor@suse.cz>\n "}, {"sha": "8a1334029fceb7dedd67b76ed47b9223df5144e5", "filename": "gcc/testsuite/gfortran.dg/inquire_recl_f2018.f90", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c24a8bd6141021da49e005c0111bd42bfc7d08/gcc%2Ftestsuite%2Fgfortran.dg%2Finquire_recl_f2018.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c24a8bd6141021da49e005c0111bd42bfc7d08/gcc%2Ftestsuite%2Fgfortran.dg%2Finquire_recl_f2018.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finquire_recl_f2018.f90?ref=67c24a8bd6141021da49e005c0111bd42bfc7d08", "patch": "@@ -0,0 +1,42 @@\n+! { dg-do run }\n+! PR 53796 INQUIRE(RECL=...)\n+program inqrecl\n+  implicit none\n+  integer(8) :: r\n+  integer :: r4\n+  ! F2018 (N2137) 12.10.2.26: recl for unconnected should be -1\n+  inquire(10, recl=r)\n+  if (r /= -1) then\n+     call abort()\n+  end if\n+  \n+  ! Formatted sequential\n+  open(10, status=\"scratch\")\n+  inquire(10, recl=r)\n+  inquire(10, recl=r4)\n+  close(10)\n+  if (r /= huge(0_8) - huge(0_4) - 1) then\n+     call abort()\n+  end if\n+  if (r4 /= huge(0)) then\n+     call abort()\n+  end if\n+\n+  ! Formatted sequential with recl= specifier\n+  open(10, status=\"scratch\", recl=100)\n+  inquire(10, recl=r)\n+  close(10)\n+  if (r /= 100) then\n+     call abort()\n+  end if\n+\n+  ! Formatted stream\n+  ! F2018 (N2137) 12.10.2.26: If unit is connected\n+  ! for stream access, recl should be assigned the value -2.\n+  open(10, status=\"scratch\", access=\"stream\")\n+  inquire(10, recl=r)\n+  close(10)\n+  if (r /= -2) then\n+     call abort()\n+  end if\n+end program inqrecl"}, {"sha": "848a08f61571a2561977af8824a7f4e90c7afc4a", "filename": "libgfortran/io/inquire.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c24a8bd6141021da49e005c0111bd42bfc7d08/libgfortran%2Fio%2Finquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c24a8bd6141021da49e005c0111bd42bfc7d08/libgfortran%2Fio%2Finquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Finquire.c?ref=67c24a8bd6141021da49e005c0111bd42bfc7d08", "patch": "@@ -218,7 +218,9 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit *u)\n     }\n \n   if ((cf & IOPARM_INQUIRE_HAS_RECL_OUT) != 0)\n-    *iqp->recl_out = (u != NULL) ? u->recl : 0;\n+    /* F2018 (N2137) 12.10.2.26: If there is no connection, recl is\n+       assigned the value -1.  */\n+    *iqp->recl_out = (u != NULL) ? u->recl : -1;\n \n   if ((cf & IOPARM_INQUIRE_HAS_STRM_POS_OUT) != 0)\n     *iqp->strm_pos_out = (u != NULL) ? u->strm_pos : 0;"}, {"sha": "fd48bf19e9bf33abcc48a73f432ffee02ecc7980", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c24a8bd6141021da49e005c0111bd42bfc7d08/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c24a8bd6141021da49e005c0111bd42bfc7d08/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=67c24a8bd6141021da49e005c0111bd42bfc7d08", "patch": "@@ -735,6 +735,11 @@ gfc_saved_unit;\n extern gfc_offset max_offset;\n internal_proto(max_offset);\n \n+/* Default RECL for sequential access if not given in OPEN statement,\n+   computed at library initialization time.  */\n+extern gfc_offset default_recl;\n+internal_proto(default_recl);\n+\n /* Unit tree root.  */\n extern gfc_unit *unit_root;\n internal_proto(unit_root);"}, {"sha": "05e1773c84154ef37725a01ced68f26c0840400b", "filename": "libgfortran/io/open.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c24a8bd6141021da49e005c0111bd42bfc7d08/libgfortran%2Fio%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c24a8bd6141021da49e005c0111bd42bfc7d08/libgfortran%2Fio%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fopen.c?ref=67c24a8bd6141021da49e005c0111bd42bfc7d08", "patch": "@@ -586,7 +586,7 @@ new_unit (st_parameter_open *opp, gfc_unit *u, unit_flags *flags)\n   else\n     {\n       u->flags.has_recl = 0;\n-      u->recl = max_offset;\n+      u->recl = default_recl;\n       if (compile_options.max_subrecord_length)\n \t{\n \t  u->recl_subrecord = compile_options.max_subrecord_length;\n@@ -622,7 +622,9 @@ new_unit (st_parameter_open *opp, gfc_unit *u, unit_flags *flags)\n   if (flags->access == ACCESS_STREAM)\n     {\n       u->maxrec = max_offset;\n-      u->recl = 1;\n+      /* F2018 (N2137) 12.10.2.26: If the connection is for stream\n+\t access recl is assigned the value -2.  */\n+      u->recl = -2;\n       u->bytes_left = 1;\n       u->strm_pos = stell (u->s) + 1;\n     }"}, {"sha": "1ac4c5164e9eda8c0ac7aebdc7169830cd54af97", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c24a8bd6141021da49e005c0111bd42bfc7d08/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c24a8bd6141021da49e005c0111bd42bfc7d08/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=67c24a8bd6141021da49e005c0111bd42bfc7d08", "patch": "@@ -451,7 +451,7 @@ read_block_form (st_parameter_dt *dtp, int *nbytes)\n \t  /* For preconnected units with default record length, set bytes left\n \t   to unit record length and proceed, otherwise error.  */\n \t  if (dtp->u.p.current_unit->unit_number == options.stdin_unit\n-\t      && dtp->u.p.current_unit->recl == DEFAULT_RECL)\n+\t      && dtp->u.p.current_unit->recl == default_recl)\n             dtp->u.p.current_unit->bytes_left = dtp->u.p.current_unit->recl;\n \t  else\n \t    {\n@@ -757,7 +757,7 @@ write_block (st_parameter_dt *dtp, int length)\n \t\t       == options.stdout_unit\n \t\t       || dtp->u.p.current_unit->unit_number\n \t\t       == options.stderr_unit)\n-\t\t      && dtp->u.p.current_unit->recl == DEFAULT_RECL))\n+\t\t      && dtp->u.p.current_unit->recl == default_recl))\n \t    dtp->u.p.current_unit->bytes_left = dtp->u.p.current_unit->recl;\n \t  else\n \t    {"}, {"sha": "fbb33046dee8bfa50245e5acb62e4d972e5930e9", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c24a8bd6141021da49e005c0111bd42bfc7d08/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c24a8bd6141021da49e005c0111bd42bfc7d08/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=67c24a8bd6141021da49e005c0111bd42bfc7d08", "patch": "@@ -95,7 +95,10 @@ static int newunit_lwi;\n \n #define CACHE_SIZE 3\n static gfc_unit *unit_cache[CACHE_SIZE];\n+\n gfc_offset max_offset;\n+gfc_offset default_recl;\n+\n gfc_unit *unit_root;\n #ifdef __GTHREAD_MUTEX_INIT\n __gthread_mutex_t unit_lock = __GTHREAD_MUTEX_INIT;\n@@ -575,7 +578,6 @@ void\n init_units (void)\n {\n   gfc_unit *u;\n-  unsigned int i;\n \n #ifdef HAVE_NEWLOCALE\n   c_locale = newlocale (0, \"C\", 0);\n@@ -589,6 +591,22 @@ init_units (void)\n   __GTHREAD_MUTEX_INIT_FUNCTION (&unit_lock);\n #endif\n \n+  if (sizeof (max_offset) == 8)\n+    {\n+      max_offset = GFC_INTEGER_8_HUGE;\n+      /* Why this weird value? Because if the recl specifier in the\n+\t inquire statement is a 4 byte value, u->recl is truncated,\n+\t and this trick ensures it becomes HUGE(0) rather than -1.\n+\t The full 8 byte value of default_recl is still 0.99999999 *\n+\t max_offset which is large enough for all practical\n+\t purposes.  */\n+      default_recl = max_offset & ~(1LL<<31);\n+    }\n+  else if (sizeof (max_offset) == 4)\n+    max_offset = default_recl = GFC_INTEGER_4_HUGE;\n+  else\n+    internal_error (NULL, \"sizeof (max_offset) must be 4 or 8\");\n+\n   if (options.stdin_unit >= 0)\n     {\t\t\t\t/* STDIN */\n       u = insert_unit (options.stdin_unit);\n@@ -611,7 +629,7 @@ init_units (void)\n       u->flags.share = SHARE_UNSPECIFIED;\n       u->flags.cc = CC_LIST;\n \n-      u->recl = options.default_recl;\n+      u->recl = default_recl;\n       u->endfile = NO_ENDFILE;\n \n       u->filename = strdup (stdin_name);\n@@ -642,7 +660,7 @@ init_units (void)\n       u->flags.share = SHARE_UNSPECIFIED;\n       u->flags.cc = CC_LIST;\n \n-      u->recl = options.default_recl;\n+      u->recl = default_recl;\n       u->endfile = AT_ENDFILE;\n \n       u->filename = strdup (stdout_name);\n@@ -672,7 +690,7 @@ init_units (void)\n       u->flags.share = SHARE_UNSPECIFIED;\n       u->flags.cc = CC_LIST;\n \n-      u->recl = options.default_recl;\n+      u->recl = default_recl;\n       u->endfile = AT_ENDFILE;\n \n       u->filename = strdup (stderr_name);\n@@ -682,13 +700,6 @@ init_units (void)\n \n       __gthread_mutex_unlock (&u->lock);\n     }\n-\n-  /* Calculate the maximum file offset in a portable manner.\n-     max will be the largest signed number for the type gfc_offset.\n-     set a 1 in the LSB and keep a running sum, stopping at MSB-1 bit.  */\n-  max_offset = 0;\n-  for (i = 0; i < sizeof (max_offset) * 8 - 1; i++)\n-    max_offset = max_offset + ((gfc_offset) 1 << i);\n }\n \n "}, {"sha": "94aedc8c49f27ebbea504d6bd7b3cec3e8ae7ee4", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c24a8bd6141021da49e005c0111bd42bfc7d08/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c24a8bd6141021da49e005c0111bd42bfc7d08/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=67c24a8bd6141021da49e005c0111bd42bfc7d08", "patch": "@@ -511,7 +511,7 @@ typedef struct\n   int separator_len;\n   const char *separator;\n \n-  int all_unbuffered, unbuffered_preconnected, default_recl;\n+  int all_unbuffered, unbuffered_preconnected;\n   int fpe, backtrace;\n }\n options_t;\n@@ -577,12 +577,6 @@ extern char *filename;\n iexport_data_proto(filename);\n \n \n-/* The default value of record length for preconnected units is defined\n-   here. This value can be overriden by an environment variable.\n-   Default value is 1 Gb.  */\n-#define DEFAULT_RECL 1073741824\n-\n-\n #define CHARACTER2(name) \\\n               gfc_charlen_type name ## _len; \\\n               char * name"}, {"sha": "fb9a3c170d59887a68b7418a952b611725d9caf6", "filename": "libgfortran/runtime/environ.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67c24a8bd6141021da49e005c0111bd42bfc7d08/libgfortran%2Fruntime%2Fenviron.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67c24a8bd6141021da49e005c0111bd42bfc7d08/libgfortran%2Fruntime%2Fenviron.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fenviron.c?ref=67c24a8bd6141021da49e005c0111bd42bfc7d08", "patch": "@@ -208,10 +208,6 @@ static variable variable_table[] = {\n   /* Print optional plus signs in numbers where permitted */\n   { \"GFORTRAN_OPTIONAL_PLUS\", 0, &options.optional_plus, init_boolean },\n \n-  /* Default maximum record length for sequential files */\n-  { \"GFORTRAN_DEFAULT_RECL\", DEFAULT_RECL, &options.default_recl,\n-    init_unsigned_integer },\n-\n   /* Separator to use when writing list output */\n   { \"GFORTRAN_LIST_SEPARATOR\", 0, NULL, init_sep },\n "}]}