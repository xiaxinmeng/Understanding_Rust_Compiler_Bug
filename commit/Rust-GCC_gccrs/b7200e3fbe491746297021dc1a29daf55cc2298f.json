{"sha": "b7200e3fbe491746297021dc1a29daf55cc2298f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcyMDBlM2ZiZTQ5MTc0NjI5NzAyMWRjMWEyOWRhZjU1Y2MyMjk4Zg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2010-02-03T20:16:22Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2010-02-03T20:16:22Z"}, "message": "condition_variable (condition_variable_any): Provide definitions for all members.\n\n2010-02-03  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\t* include/std/condition_variable (condition_variable_any): Provide\n\tdefinitions for all members.\n\t* src/condition_variable.cc (condition_variable_any): Adjust\n\tdefinitions.\n\t* config/abi/pre/gnu.ver: Adjust exports for condition_variable_any.\n\t* testsuite/30_threads/condition_variable_any/cons/assign_neg.cc:\n\tAdjust dg-error line number.\n\t* testsuite/30_threads/condition_variable_any/cons/copy_neg.cc:\n\tLikewise.\n\t* testsuite/30_threads/condition_variable_any/members/1.cc: New.\n\t* testsuite/30_threads/condition_variable_any/members/2.cc: New.\n\t* testsuite/30_threads/condition_variable_any/requirements/\n\tstandard_layout.cc: Remove.\n\t* testsuite/30_threads/condition_variable_any/native_handle/\n\ttypesizes.cc: Remove.\n\nFrom-SVN: r156479", "tree": {"sha": "76dcaf635a71e06fcab976a9cb215f45862c0a0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76dcaf635a71e06fcab976a9cb215f45862c0a0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7200e3fbe491746297021dc1a29daf55cc2298f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7200e3fbe491746297021dc1a29daf55cc2298f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7200e3fbe491746297021dc1a29daf55cc2298f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7200e3fbe491746297021dc1a29daf55cc2298f/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7f3e500f223710cbe92627c5ba7759272a43b74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7f3e500f223710cbe92627c5ba7759272a43b74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7f3e500f223710cbe92627c5ba7759272a43b74"}], "stats": {"total": 287, "additions": 200, "deletions": 87}, "files": [{"sha": "a9e17bc87f983eca5815cdcefce103448a677664", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7200e3fbe491746297021dc1a29daf55cc2298f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7200e3fbe491746297021dc1a29daf55cc2298f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b7200e3fbe491746297021dc1a29daf55cc2298f", "patch": "@@ -1,3 +1,21 @@\n+2010-02-03  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/condition_variable (condition_variable_any): Provide\n+\tdefinitions for all members.\n+\t* src/condition_variable.cc (condition_variable_any): Adjust\n+\tdefinitions.\n+\t* config/abi/pre/gnu.ver: Adjust exports for condition_variable_any.\n+\t* testsuite/30_threads/condition_variable_any/cons/assign_neg.cc:\n+\tAdjust dg-error line number.\n+\t* testsuite/30_threads/condition_variable_any/cons/copy_neg.cc:\n+\tLikewise.\n+\t* testsuite/30_threads/condition_variable_any/members/1.cc: New.\n+\t* testsuite/30_threads/condition_variable_any/members/2.cc: New.\n+\t* testsuite/30_threads/condition_variable_any/requirements/\n+\tstandard_layout.cc: Remove.\n+\t* testsuite/30_threads/condition_variable_any/native_handle/\n+\ttypesizes.cc: Remove.\n+\n 2010-02-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/ext/vstring.h (__versa_string::shrink_to_fit): Fix"}, {"sha": "447b63ede49e656158985396baea9655aeb584fc", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7200e3fbe491746297021dc1a29daf55cc2298f/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7200e3fbe491746297021dc1a29daf55cc2298f/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=b7200e3fbe491746297021dc1a29daf55cc2298f", "patch": "@@ -1113,10 +1113,6 @@ GLIBCXX_3.4.14 {\n     # std::time_get::_M_extract_wday_or_month\n     _ZNKSt8time_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE24_M_extract_wday_or_month*;\n \n-    # condition_variable_any::notify_*\n-    _ZNSt22condition_variable_any10notify_allEv;\n-    _ZNSt22condition_variable_any10notify_oneEv;    \n-\n } GLIBCXX_3.4.13;\n \n # Symbols in the support library (libsupc++) have their own tag."}, {"sha": "ff5af7214cac53c2bf4abac41caf858a7ad72a7f", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7200e3fbe491746297021dc1a29daf55cc2298f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7200e3fbe491746297021dc1a29daf55cc2298f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=b7200e3fbe491746297021dc1a29daf55cc2298f", "patch": "@@ -162,14 +162,15 @@ namespace std\n   };\n \n   /// condition_variable_any\n-  // Like above, only mutex may not have try_lock.\n+  // Like above, but mutex is not required to have try_lock.\n   class condition_variable_any\n   {\n-    typedef __gthread_cond_t\t\t__native_type;\n-    __native_type\t\t\t_M_cond;\n+    typedef chrono::system_clock\t__clock_t;\n+    condition_variable\t\t\t_M_cond;\n+    mutex\t\t\t\t_M_mutex;\n \n   public:\n-    typedef __native_type* \t\tnative_handle_type;\n+    typedef condition_variable::native_handle_type\tnative_handle_type;\n \n     condition_variable_any() throw ();\n     ~condition_variable_any() throw ();\n@@ -178,14 +179,29 @@ namespace std\n     condition_variable_any& operator=(const condition_variable_any&) = delete;\n \n     void\n-    notify_one();\n+    notify_one()\n+    {\n+      lock_guard<mutex> __lock(_M_mutex);\n+      _M_cond.notify_one();\n+    }\n \n     void\n-    notify_all();\n+    notify_all()\n+    {\n+      lock_guard<mutex> __lock(_M_mutex);\n+      _M_cond.notify_all();\n+    }\n \n     template<typename _Lock>\n       void\n-      wait(_Lock& __lock);\n+      wait(_Lock& __lock)\n+      {\n+        unique_lock<mutex> __my_lock(_M_mutex);\n+        __lock.unlock();\n+        _M_cond.wait(__my_lock);\n+        __lock.lock();\n+      }\n+      \n \n     template<typename _Lock, typename _Predicate>\n       void\n@@ -198,7 +214,14 @@ namespace std\n     template<typename _Lock, typename _Clock, typename _Duration>\n       cv_status\n       wait_until(_Lock& __lock,\n-\t\t const chrono::time_point<_Clock, _Duration>& __atime);\n+\t\t const chrono::time_point<_Clock, _Duration>& __atime)\n+      {\n+        unique_lock<mutex> __my_lock(_M_mutex);\n+        __lock.unlock();\n+        cv_status __status = _M_cond.wait_until(__my_lock, __atime);\n+        __lock.lock();\n+        return __status;\n+      }\n \n     template<typename _Lock, typename _Clock,\n \t     typename _Duration, typename _Predicate>\n@@ -215,17 +238,19 @@ namespace std\n \n     template<typename _Lock, typename _Rep, typename _Period>\n       cv_status\n-      wait_for(_Lock& __lock, const chrono::duration<_Rep, _Period>& __rtime);\n+      wait_for(_Lock& __lock, const chrono::duration<_Rep, _Period>& __rtime)\n+      { return wait_until(__lock, __clock_t::now() + __rtime); }\n \n     template<typename _Lock, typename _Rep,\n \t     typename _Period, typename _Predicate>\n       bool\n       wait_for(_Lock& __lock,\n-\t       const chrono::duration<_Rep, _Period>& __rtime, _Predicate __p);\n+\t       const chrono::duration<_Rep, _Period>& __rtime, _Predicate __p)\n+      { return wait_until(__lock, __clock_t::now() + __rtime, std::move(__p)); }\n \n     native_handle_type\n     native_handle()\n-    { return &_M_cond; }\n+    { return _M_cond.native_handle(); }\n   };\n \n   // @} group condition_variables"}, {"sha": "fdcb6a04b38447d28afaa47547216e2684ab38fd", "filename": "libstdc++-v3/src/condition_variable.cc", "status": "modified", "additions": 2, "deletions": 36, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7200e3fbe491746297021dc1a29daf55cc2298f/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7200e3fbe491746297021dc1a29daf55cc2298f/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc?ref=b7200e3fbe491746297021dc1a29daf55cc2298f", "patch": "@@ -80,44 +80,10 @@ namespace std\n   }\n \n   condition_variable_any::condition_variable_any() throw ()\n-  {\n-#ifdef __GTHREAD_COND_INIT\n-    __native_type __tmp = __GTHREAD_COND_INIT;\n-    _M_cond = __tmp;\n-#else\n-    int __e = __gthread_cond_init(&_M_cond, NULL);\n-\n-    if (__e)\n-      __throw_system_error(__e);\n-#endif\n-  }\n+  { }\n \n   condition_variable_any::~condition_variable_any() throw ()\n-  {\n-    __gthread_cond_destroy(&_M_cond);\n-  }\n-\n-  void\n-  condition_variable_any::notify_one()\n-  {\n-    int __e = __gthread_cond_signal(&_M_cond);\n-\n-    // XXX not in spec\n-    // EINVAL\n-    if (__e)\n-      __throw_system_error(__e);\n-  }\n-\n-  void\n-  condition_variable_any::notify_all()\n-  {\n-    int __e = __gthread_cond_broadcast(&_M_cond);\n-\n-    // XXX not in spec\n-    // EINVAL\n-    if (__e)\n-      __throw_system_error(__e);\n-  }\n+  { }\n }\n \n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "8fa79a2cf1a65b4e5b9ca4500bfef9e7adaaa812", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/cons/assign_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7200e3fbe491746297021dc1a29daf55cc2298f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7200e3fbe491746297021dc1a29daf55cc2298f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fassign_neg.cc?ref=b7200e3fbe491746297021dc1a29daf55cc2298f", "patch": "@@ -32,4 +32,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 31 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 178 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 179 }"}, {"sha": "344f90c961ceddf915060547275d95ac9c69d4b9", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/cons/copy_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7200e3fbe491746297021dc1a29daf55cc2298f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7200e3fbe491746297021dc1a29daf55cc2298f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fcons%2Fcopy_neg.cc?ref=b7200e3fbe491746297021dc1a29daf55cc2298f", "patch": "@@ -31,4 +31,4 @@ void test01()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 30 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 177 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 178 }"}, {"sha": "07743928a269b3c82af9849ff5893690d2b7483f", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/members/1.cc", "status": "renamed", "additions": 56, "deletions": 4, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7200e3fbe491746297021dc1a29daf55cc2298f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7200e3fbe491746297021dc1a29daf55cc2298f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F1.cc?ref=b7200e3fbe491746297021dc1a29daf55cc2298f", "patch": "@@ -5,7 +5,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2009 Free Software Foundation, Inc.\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,12 +22,64 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+#include <chrono>\n #include <condition_variable>\n-#include <thread/all.h>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+struct Mutex\n+{\n+  Mutex() : locked(false) { }\n+\n+  void lock()\n+  {\n+    if (locked)\n+      throw locked;\n+    mtx.lock();\n+    locked = true;\n+  }\n+\n+  void unlock()\n+  {\n+    if (!locked)\n+      throw locked;\n+    mtx.unlock();\n+    locked = false;\n+  }\n+\n+  std::mutex mtx;\n+  bool locked;\n+};\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try \n+    {\n+      std::chrono::microseconds ms(500);\n+      std::condition_variable_any c1;\n+      Mutex m;\n+      m.lock();\n+\n+      auto then = std::chrono::system_clock::now();\n+      std::cv_status result = c1.wait_for(m, ms);\n+      VERIFY( result == std::cv_status::timeout );\n+      VERIFY( (std::chrono::system_clock::now() - then) >= ms );\n+      VERIFY( m.locked );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n \n int main()\n {\n-  typedef std::condition_variable_any test_type;\n-  __gnu_test::compare_type_to_native_type<test_type>();\n+  test01();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/native_handle/typesizes.cc"}, {"sha": "8e58dce818b975e53859560a003560048a81a2b8", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/members/2.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7200e3fbe491746297021dc1a29daf55cc2298f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7200e3fbe491746297021dc1a29daf55cc2298f/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2F2.cc?ref=b7200e3fbe491746297021dc1a29daf55cc2298f", "patch": "@@ -0,0 +1,86 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <chrono>\n+#include <condition_variable>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+struct Mutex\n+{\n+  Mutex() : locked(false) { }\n+\n+  void lock()\n+  {\n+    if (locked)\n+      throw locked;\n+    mtx.lock();\n+    locked = true;\n+  }\n+\n+  void unlock()\n+  {\n+    if (!locked)\n+      throw locked;\n+    mtx.unlock();\n+    locked = false;\n+  }\n+\n+  std::mutex mtx;\n+  bool locked;\n+};\n+\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try \n+    {\n+      std::chrono::microseconds ms(500);\n+      std::condition_variable_any c1;\n+      Mutex m;\n+      m.lock();\n+\n+      auto then = std::chrono::monotonic_clock::now();\n+      std::cv_status result = c1.wait_until(m, then + ms);\n+      VERIFY( result == std::cv_status::timeout );\n+      VERIFY( (std::chrono::monotonic_clock::now() - then) >= ms );\n+      VERIFY( m.locked );\n+    }\n+  catch (const std::system_error& e)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "74e57ab354a95fb2830110b73bdf62e8636b32a0", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/requirements/standard_layout.cc", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7f3e500f223710cbe92627c5ba7759272a43b74/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Frequirements%2Fstandard_layout.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7f3e500f223710cbe92627c5ba7759272a43b74/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Frequirements%2Fstandard_layout.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Frequirements%2Fstandard_layout.cc?ref=a7f3e500f223710cbe92627c5ba7759272a43b74", "patch": "@@ -1,30 +0,0 @@\n-// { dg-do compile }\n-// { dg-options \"-std=gnu++0x\" }\n-// { dg-require-cstdint \"\" }\n-// { dg-require-gthreads \"\" }\n-\n-// Copyright (C) 2010 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-#include <condition_variable>\n-#include <testsuite_common_types.h>\n-\n-void test01()\n-{\n-  __gnu_test::standard_layout test;\n-  test.operator()<std::condition_variable_any>();\n-}"}]}