{"sha": "03fc215c4cd08c7ba124c617a7676c0f2f689c3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNmYzIxNWM0Y2QwOGM3YmExMjRjNjE3YTc2NzZjMGYyZjY4OWMzZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2002-07-30T05:03:42Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2002-07-30T05:03:42Z"}, "message": "cp-tree.h (CLASSTYPE_VFIELDS, VF_*, BV_*): Add more documentation.\n\n\t* cp-tree.h (CLASSTYPE_VFIELDS, VF_*, BV_*): Add more\n\tdocumentation.\n\nFrom-SVN: r55863", "tree": {"sha": "fd4f149a3dd1a4ee111d8ea41bf46d3ac0ccd800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd4f149a3dd1a4ee111d8ea41bf46d3ac0ccd800"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03fc215c4cd08c7ba124c617a7676c0f2f689c3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03fc215c4cd08c7ba124c617a7676c0f2f689c3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03fc215c4cd08c7ba124c617a7676c0f2f689c3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03fc215c4cd08c7ba124c617a7676c0f2f689c3f/comments", "author": null, "committer": null, "parents": [{"sha": "1dcd444b7e319963e35b806639bb38d8d0371fd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dcd444b7e319963e35b806639bb38d8d0371fd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dcd444b7e319963e35b806639bb38d8d0371fd4"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "1e52dbac81332fcae4ffdd88175926607d89c521", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03fc215c4cd08c7ba124c617a7676c0f2f689c3f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03fc215c4cd08c7ba124c617a7676c0f2f689c3f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=03fc215c4cd08c7ba124c617a7676c0f2f689c3f", "patch": "@@ -1,3 +1,8 @@\n+2002-07-30  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.h (CLASSTYPE_VFIELDS, VF_*, BV_*): Add more\n+\tdocumentation.\n+\n 2002-07-29  Alan Modra  <amodra@bigpond.net.au>\n \n \t* cp-tree.h: Comment typo fix."}, {"sha": "ce46b03560e778add1e753e9c635da255e0ee7d3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03fc215c4cd08c7ba124c617a7676c0f2f689c3f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03fc215c4cd08c7ba124c617a7676c0f2f689c3f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=03fc215c4cd08c7ba124c617a7676c0f2f689c3f", "patch": "@@ -1734,29 +1734,34 @@ struct lang_type GTY(())\n \f\n /* Accessor macros for the vfield slots in structures.  */\n \n-/* The virtual function pointer fields that this type contains.  For a\n-   vfield defined just for this class, or from a primary base, the\n-   TREE_PURPOSE is NULL.  Otherwise, the TREE_PURPOSE is the BINFO for\n-   the class containing the vfield.  The TREE_VALUE is the class where\n-   the vfield was first defined.  */\n+/* List of virtual table fields that this type contains (both the primary\n+   and secondaries). The TREE_VALUE is the class type where the vtable\n+   field was introduced. For a vtable field inherited from the primary\n+   base, or introduced by this class, the TREE_PURPOSE is NULL. For\n+   other vtable fields (those from non-primary bases), the\n+   TREE_PURPOSE is the BINFO of the base through which the vtable was\n+   inherited.  */\n #define CLASSTYPE_VFIELDS(NODE) (LANG_TYPE_CLASS_CHECK (NODE)->vfields)\n \n-/* Get the assoc info that caused this vfield to exist.  */\n+/* Get the BINFO that introduced this vtable into the hierarchy (will\n+   be NULL for those created at this level, or from a primary\n+   hierarchy).  */\n #define VF_BINFO_VALUE(NODE) TREE_PURPOSE (NODE)\n \n-/* Get that same information as a _TYPE.  */\n+/* Get the TYPE that introduced this vtable into the hierarchy (always\n+   non-NULL).  */\n #define VF_BASETYPE_VALUE(NODE) TREE_VALUE (NODE)\n \n-/* Get the value of the top-most type dominating the non-`normal' vfields.  */\n-#define VF_DERIVED_VALUE(NODE) \\\n-  (VF_BINFO_VALUE (NODE) ? BINFO_TYPE (VF_BINFO_VALUE (NODE)) : NULL_TREE)\n+/* Accessor macros for the BINFO_VIRTUALS list. */\n \n /* The number of bytes by which to adjust the `this' pointer when\n-   calling this virtual function.  */\n+   calling this virtual function.  Subtract this value from the this\n+   pointer. Always non-NULL, might be constant zero though. */\n #define BV_DELTA(NODE) (TREE_PURPOSE (NODE))\n \n /* If non-NULL, the vtable index at which to find the vcall offset\n-   when calling this virtual function.  */\n+   when calling this virtual function.  Add the value at that vtable\n+   index to the this pointer.  */\n #define BV_VCALL_INDEX(NODE) (TREE_TYPE (NODE))\n \n /* The function to call.  */"}]}