{"sha": "4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNjMTNkOWQ3YWFlNTJiYTBiNjg0MWEyYjgyZmU4MWQ1NDYxNWFhMQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2010-11-15T16:32:18Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2010-11-15T16:32:18Z"}, "message": "re PR tree-optimization/46349 (incorrect scalarization)\n\n2010-11-15  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/46349\n\t* tree-sra.c (contains_bitfld_comp_ref_p): New function.\n\t(contains_vce_or_bfcref_p): Likewise.\n\t(sra_modify_assign): Use them.\n\n\t* testsuite/gnat.dg/opt9.adb: New file.\n\t* testsuite/gnat.dg/opt9_pkg.ads: Likewise\n\nFrom-SVN: r166759", "tree": {"sha": "1a851a57d2fd7b8515a90ca295050abb6e82fb5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a851a57d2fd7b8515a90ca295050abb6e82fb5e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9965e3cddf54cfb4c45d5004345e490c6ac45124", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9965e3cddf54cfb4c45d5004345e490c6ac45124", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9965e3cddf54cfb4c45d5004345e490c6ac45124"}], "stats": {"total": 86, "additions": 83, "deletions": 3}, "files": [{"sha": "20e23f8cd12381777217730493b2291c9797224d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1", "patch": "@@ -1,3 +1,10 @@\n+2010-11-15  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/46349\n+\t* tree-sra.c (contains_bitfld_comp_ref_p): New function.\n+\t(contains_vce_or_bfcref_p): Likewise.\n+\t(sra_modify_assign): Use them.\n+\n 2010-11-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/46467"}, {"sha": "f1ff569548890007e9a4337aedd6263718d18d11", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1", "patch": "@@ -1,3 +1,9 @@\n+2010-11-15  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/46349\n+\t* gnat.dg/opt9.adb: New file.\n+\t* gnat.dg/opt9_pkg.ads: Likewise\n+\n 2010-11-15  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/44989"}, {"sha": "a0f1ac5c6896e92157603a64140c143292e019cf", "filename": "gcc/testsuite/gnat.dg/opt9.adb", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1/gcc%2Ftestsuite%2Fgnat.dg%2Fopt9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1/gcc%2Ftestsuite%2Fgnat.dg%2Fopt9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt9.adb?ref=4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1", "patch": "@@ -0,0 +1,26 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnatws -O\" }\n+\n+with Opt9_Pkg; use Opt9_Pkg;\n+\n+procedure Opt9 is\n+\n+   type Array_T is array (1 .. N) of Integer;\n+\n+   type Clock_T is record\n+      N_Ticks : Integer := 0;\n+   end record;\n+\n+   type Rec is record\n+      Values : Array_T;\n+      Valid  : Boolean;\n+      Tstamp : Clock_T;\n+   end record;\n+\n+   pragma Pack (Rec);\n+\n+   Data : Rec;\n+\n+begin\n+   null;\n+end;"}, {"sha": "beffac26f38f255317e88a223d44267af041d8b3", "filename": "gcc/testsuite/gnat.dg/opt9_pkg.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1/gcc%2Ftestsuite%2Fgnat.dg%2Fopt9_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1/gcc%2Ftestsuite%2Fgnat.dg%2Fopt9_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt9_pkg.ads?ref=4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1", "patch": "@@ -0,0 +1,5 @@\n+package Opt9_Pkg is\n+\n+  N : integer := 15;\n+\n+end Opt9_Pkg;"}, {"sha": "252fa0628e286a3717ee8a6b015b092dac3ad185", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=4cc13d9d7aae52ba0b6841a2b82fe81d54615aa1", "patch": "@@ -2626,6 +2626,41 @@ get_repl_default_def_ssa_name (struct access *racc)\n   return repl;\n }\n \n+/* Return true if REF has a COMPONENT_REF with a bit-field field declaration\n+   somewhere in it.  */\n+\n+static inline bool\n+contains_bitfld_comp_ref_p (const_tree ref)\n+{\n+  while (handled_component_p (ref))\n+    {\n+      if (TREE_CODE (ref) == COMPONENT_REF\n+          && DECL_BIT_FIELD (TREE_OPERAND (ref, 1)))\n+        return true;\n+      ref = TREE_OPERAND (ref, 0);\n+    }\n+\n+  return false;\n+}\n+\n+/* Return true if REF has an VIEW_CONVERT_EXPR or a COMPONENT_REF with a\n+   bit-field field declaration somewhere in it.  */\n+\n+static inline bool\n+contains_vce_or_bfcref_p (const_tree ref)\n+{\n+  while (handled_component_p (ref))\n+    {\n+      if (TREE_CODE (ref) == VIEW_CONVERT_EXPR\n+\t  || (TREE_CODE (ref) == COMPONENT_REF\n+\t      && DECL_BIT_FIELD (TREE_OPERAND (ref, 1))))\n+\treturn true;\n+      ref = TREE_OPERAND (ref, 0);\n+    }\n+\n+  return false;\n+}\n+\n /* Examine both sides of the assignment statement pointed to by STMT, replace\n    them with a scalare replacement if there is one and generate copying of\n    replacements if scalarized aggregates have been used in the assignment.  GSI\n@@ -2694,14 +2729,15 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n \t     ???  This should move to fold_stmt which we simply should\n \t     call after building a VIEW_CONVERT_EXPR here.  */\n \t  if (AGGREGATE_TYPE_P (TREE_TYPE (lhs))\n+\t      && !contains_bitfld_comp_ref_p (lhs)\n \t      && !access_has_children_p (lacc))\n \t    {\n \t      lhs = build_ref_for_offset (loc, lhs, 0, TREE_TYPE (rhs),\n \t\t\t\t\t  gsi, false);\n \t      gimple_assign_set_lhs (*stmt, lhs);\n \t    }\n \t  else if (AGGREGATE_TYPE_P (TREE_TYPE (rhs))\n-\t\t   && !contains_view_convert_expr_p (rhs)\n+\t\t   && !contains_vce_or_bfcref_p (rhs)\n \t\t   && !access_has_children_p (racc))\n \t    rhs = build_ref_for_offset (loc, rhs, 0, TREE_TYPE (lhs),\n \t\t\t\t\tgsi, false);\n@@ -2751,8 +2787,8 @@ sra_modify_assign (gimple *stmt, gimple_stmt_iterator *gsi)\n      This is what the first branch does.  */\n \n   if (gimple_has_volatile_ops (*stmt)\n-      || contains_view_convert_expr_p (rhs)\n-      || contains_view_convert_expr_p (lhs))\n+      || contains_vce_or_bfcref_p (rhs)\n+      || contains_vce_or_bfcref_p (lhs))\n     {\n       if (access_has_children_p (racc))\n \tgenerate_subtree_copies (racc->first_child, racc->base, 0, 0, 0,"}]}