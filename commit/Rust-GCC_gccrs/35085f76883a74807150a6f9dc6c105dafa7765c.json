{"sha": "35085f76883a74807150a6f9dc6c105dafa7765c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUwODVmNzY4ODNhNzQ4MDcxNTBhNmY5ZGM2YzEwNWRhZmE3NzY1Yw==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2008-02-25T19:20:48Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2008-02-25T19:20:48Z"}, "message": "re PR fortran/29549 (matmul slow for complex matrices)\n\n2008-02-25  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\tPR fortran/29549\n\t* doc/invoke.texi (-fcx-limited-range): Document new option.\n\t* toplev.c (process_options): Handle -fcx-fortran-rules.\n        * common.opt: Add documentation for -fcx-fortran-rules.\n\nFrom-SVN: r132636", "tree": {"sha": "27845d82850bec18497dbe7de8726e2937e7a171", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27845d82850bec18497dbe7de8726e2937e7a171"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35085f76883a74807150a6f9dc6c105dafa7765c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35085f76883a74807150a6f9dc6c105dafa7765c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35085f76883a74807150a6f9dc6c105dafa7765c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35085f76883a74807150a6f9dc6c105dafa7765c/comments", "author": null, "committer": null, "parents": [{"sha": "8cc6d3e0304968c3bc7f08efbf3dc03d582baa64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cc6d3e0304968c3bc7f08efbf3dc03d582baa64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cc6d3e0304968c3bc7f08efbf3dc03d582baa64"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "670466bdb3099da596e0cb42bc5058c56294ea1c", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35085f76883a74807150a6f9dc6c105dafa7765c/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35085f76883a74807150a6f9dc6c105dafa7765c/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=35085f76883a74807150a6f9dc6c105dafa7765c", "patch": "@@ -405,6 +405,10 @@ fcx-limited-range\n Common Report Var(flag_cx_limited_range) Optimization\n Omit range reduction step when performing complex division\n \n+fcx-fortran-rules\n+Common Report Var(flag_cx_fortran_rules) Optimization\n+Complex multiplication and division follow Fortran rules\n+\n fdata-sections\n Common Report Var(flag_data_sections) Optimization\n Place data items into their own section"}, {"sha": "693f30de694faa554bc0b17c40e51c53c9d4df55", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35085f76883a74807150a6f9dc6c105dafa7765c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35085f76883a74807150a6f9dc6c105dafa7765c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=35085f76883a74807150a6f9dc6c105dafa7765c", "patch": "@@ -321,7 +321,7 @@ Objective-C and Objective-C++ Dialects}.\n -fauto-inc-dec -fbranch-probabilities -fbranch-target-load-optimize @gol\n -fbranch-target-load-optimize2 -fbtr-bb-exclusive -fcaller-saves @gol\n -fcheck-data-deps -fcprop-registers -fcrossjumping -fcse-follow-jumps @gol\n--fcse-skip-blocks -fcx-limited-range @gol\n+-fcse-skip-blocks -fcx-fortran-rules -fcx-limited-range @gol\n -fdata-sections -fdce -fdce @gol\n -fdelayed-branch -fdelete-null-pointer-checks -fdse -fdse @gol\n -fearly-inlining -fexpensive-optimizations -ffast-math @gol\n@@ -6557,6 +6557,15 @@ This option controls the default setting of the ISO C99\n @code{CX_LIMITED_RANGE} pragma.  Nevertheless, the option applies to\n all languages.\n \n+@item -fcx-fortran-rules\n+@opindex fcx-fortran-rules\n+Complex multiplication and division follow Fortran rules.  Range\n+reduction is done as part of complex division, but there is no checking\n+whether the result of a complex multiplication or division is @code{NaN\n++ I*NaN}, with an attempt to rescue the situation in that case.\n+\n+The default is @option{-fno-cx-fortran-rules}.\n+\n @end table\n \n The following options control optimizations that may improve"}, {"sha": "7a6be498a72cc1672b27aa6e3e0508cbd68c79db", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35085f76883a74807150a6f9dc6c105dafa7765c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35085f76883a74807150a6f9dc6c105dafa7765c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=35085f76883a74807150a6f9dc6c105dafa7765c", "patch": "@@ -2001,6 +2001,10 @@ process_options (void)\n   if (flag_cx_limited_range)\n     flag_complex_method = 0;\n \n+  /* With -fcx-fortran-rules, we do something in-between cheap and C99.  */\n+  if (flag_cx_fortran_rules)\n+    flag_complex_method = 1;\n+\n   /* Targets must be able to place spill slots at lower addresses.  If the\n      target already uses a soft frame pointer, the transition is trivial.  */\n   if (!FRAME_GROWS_DOWNWARD && flag_stack_protect)"}]}