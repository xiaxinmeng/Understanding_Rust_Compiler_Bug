{"sha": "778e0ac39798b142bbc96c78da568e2debeeff0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc4ZTBhYzM5Nzk4YjE0MmJiYzk2Yzc4ZGE1NjhlMmRlYmVlZmYwYg==", "commit": {"author": {"name": "Maxim Ostapenko", "email": "m.ostapenko@samsung.com", "date": "2017-02-03T12:17:59Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2017-02-03T12:17:59Z"}, "message": "re PR sanitizer/78663 (Hundreds of asan failures on x86_64-apple-darwin10 at r243019)\n\n\tPR sanitizer/78663\n\t* sanitizer_common/sanitizer_mac.cc: Cherry-pick upstream r293992.\n\t* sanitizer_common/sanitizer_platform_interceptors.h: Likewise.\n\nFrom-SVN: r245149", "tree": {"sha": "7310d86ff5aff97759365f5e8dcc7488aeb4ac27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7310d86ff5aff97759365f5e8dcc7488aeb4ac27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/778e0ac39798b142bbc96c78da568e2debeeff0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/778e0ac39798b142bbc96c78da568e2debeeff0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/778e0ac39798b142bbc96c78da568e2debeeff0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/778e0ac39798b142bbc96c78da568e2debeeff0b/comments", "author": null, "committer": null, "parents": [{"sha": "5dd5e20438f0cfd7f6e64a8174e27aca8d75a391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dd5e20438f0cfd7f6e64a8174e27aca8d75a391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dd5e20438f0cfd7f6e64a8174e27aca8d75a391"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "c0e5563ac6fbf3b35b14f857065a125096a4c185", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/778e0ac39798b142bbc96c78da568e2debeeff0b/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/778e0ac39798b142bbc96c78da568e2debeeff0b/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=778e0ac39798b142bbc96c78da568e2debeeff0b", "patch": "@@ -1,3 +1,9 @@\n+2017-02-03  Maxim Ostapenko  <m.ostapenko@samsung.com>\n+\n+\tPR sanitizer/78663\n+\t* sanitizer_common/sanitizer_mac.cc: Cherry-pick upstream r293992.\n+\t* sanitizer_common/sanitizer_platform_interceptors.h: Likewise.\n+\n 2017-01-31  Jakub Jelinek  <jakub@redhat.com>\n \n \t* configure.tgt: Enable asan and ubsan on 64-bit s390*-*-linux*."}, {"sha": "2a05102e9682ccc6a3ea992637e6ec55f8689374", "filename": "libsanitizer/sanitizer_common/sanitizer_mac.cc", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/778e0ac39798b142bbc96c78da568e2debeeff0b/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/778e0ac39798b142bbc96c78da568e2debeeff0b/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_mac.cc?ref=778e0ac39798b142bbc96c78da568e2debeeff0b", "patch": "@@ -91,20 +91,22 @@ namespace __sanitizer {\n \n #include \"sanitizer_syscall_generic.inc\"\n \n-// Direct syscalls, don't call libmalloc hooks.\n+// Direct syscalls, don't call libmalloc hooks (but not available on 10.6).\n extern \"C\" void *__mmap(void *addr, size_t len, int prot, int flags, int fildes,\n-                        off_t off);\n-extern \"C\" int __munmap(void *, size_t);\n+                        off_t off) SANITIZER_WEAK_ATTRIBUTE;\n+extern \"C\" int __munmap(void *, size_t) SANITIZER_WEAK_ATTRIBUTE;\n \n // ---------------------- sanitizer_libc.h\n uptr internal_mmap(void *addr, size_t length, int prot, int flags,\n                    int fd, u64 offset) {\n   if (fd == -1) fd = VM_MAKE_TAG(VM_MEMORY_ANALYSIS_TOOL);\n-  return (uptr)__mmap(addr, length, prot, flags, fd, offset);\n+  if (__mmap) return (uptr)__mmap(addr, length, prot, flags, fd, offset);\n+  return (uptr)mmap(addr, length, prot, flags, fd, offset);\n }\n \n uptr internal_munmap(void *addr, uptr length) {\n-  return __munmap(addr, length);\n+  if (__munmap) return __munmap(addr, length);\n+  return munmap(addr, length);\n }\n \n int internal_mprotect(void *addr, uptr length, int prot) {\n@@ -190,17 +192,19 @@ uptr internal_sigprocmask(int how, __sanitizer_sigset_t *set,\n   return sigprocmask(how, set, oldset);\n }\n \n-// Doesn't call pthread_atfork() handlers.\n-extern \"C\" pid_t __fork(void);\n+// Doesn't call pthread_atfork() handlers (but not available on 10.6).\n+extern \"C\" pid_t __fork(void) SANITIZER_WEAK_ATTRIBUTE;\n \n int internal_fork() {\n-  return __fork();\n+  if (__fork)\n+    return __fork();\n+  return fork();\n }\n \n int internal_forkpty(int *amaster) {\n   int master, slave;\n   if (openpty(&master, &slave, nullptr, nullptr, nullptr) == -1) return -1;\n-  int pid = __fork();\n+  int pid = internal_fork();\n   if (pid == -1) {\n     close(master);\n     close(slave);"}, {"sha": "6b2ba31a2bfd16815174be1c0193cb59c1bbeda4", "filename": "libsanitizer/sanitizer_common/sanitizer_platform_interceptors.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/778e0ac39798b142bbc96c78da568e2debeeff0b/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_interceptors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/778e0ac39798b142bbc96c78da568e2debeeff0b/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_interceptors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fsanitizer_common%2Fsanitizer_platform_interceptors.h?ref=778e0ac39798b142bbc96c78da568e2debeeff0b", "patch": "@@ -81,8 +81,16 @@\n #define SANITIZER_INTERCEPT_MEMMOVE 1\n #define SANITIZER_INTERCEPT_MEMCPY 1\n #define SANITIZER_INTERCEPT_MEMCMP 1\n+#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && \\\n+    __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ < 1070\n+# define SI_MAC_DEPLOYMENT_BELOW_10_7 1\n+#else\n+# define SI_MAC_DEPLOYMENT_BELOW_10_7 0\n+#endif\n+// memmem on Darwin doesn't exist on 10.6\n // FIXME: enable memmem on Windows.\n-#define SANITIZER_INTERCEPT_MEMMEM SI_NOT_WINDOWS\n+#define SANITIZER_INTERCEPT_MEMMEM \\\n+  SI_NOT_WINDOWS && !SI_MAC_DEPLOYMENT_BELOW_10_7\n #define SANITIZER_INTERCEPT_MEMCHR 1\n #define SANITIZER_INTERCEPT_MEMRCHR SI_FREEBSD || SI_LINUX\n "}]}