{"sha": "84df580f073debc208187d1ff2e5cec49989e5a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRkZjU4MGYwNzNkZWJjMjA4MTg3ZDFmZjJlNWNlYzQ5OTg5ZTVhOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-01-10T23:20:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-01-10T23:20:19Z"}, "message": "re PR target/88785 (ICE in as_a, at machmode.h:353)\n\n\tPR target/88785\n\t* config/i386/sse.md (float<floatunssuffix>v2div2sf2): Turn into\n\tdefine_expand.\n\t(*float<floatunssuffix>v2div2sf2): New define_insn.\n\t(float<floatunssuffix>v2div2sf2_mask): Turn into define_expand.\n\t(*float<floatunssuffix>v2div2sf2_mask): New define_insn.\n\t(*float<floatunssuffix>v2div2sf2_mask_1): Replace\n\tsubrtxes (const_vector:V2SF [(const_int 0) (const_int 0)]) with\n\tmatch_operands with \"const0_operand\" \"C\".\n\n\t* g++.target/i386/pr88785.C: New test.\n\nFrom-SVN: r267825", "tree": {"sha": "c30fb2e43f8205621d18e42174f6c87112352edb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c30fb2e43f8205621d18e42174f6c87112352edb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84df580f073debc208187d1ff2e5cec49989e5a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84df580f073debc208187d1ff2e5cec49989e5a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84df580f073debc208187d1ff2e5cec49989e5a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84df580f073debc208187d1ff2e5cec49989e5a9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "280d970b15779754e99801b7fd6ece92ffae32c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/280d970b15779754e99801b7fd6ece92ffae32c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/280d970b15779754e99801b7fd6ece92ffae32c1"}], "stats": {"total": 249, "additions": 242, "deletions": 7}, "files": [{"sha": "8a83f4e376cc3f6c1a5031347923d27d2c7989cc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84df580f073debc208187d1ff2e5cec49989e5a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84df580f073debc208187d1ff2e5cec49989e5a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=84df580f073debc208187d1ff2e5cec49989e5a9", "patch": "@@ -1,3 +1,15 @@\n+2019-01-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/88785\n+\t* config/i386/sse.md (float<floatunssuffix>v2div2sf2): Turn into\n+\tdefine_expand.\n+\t(*float<floatunssuffix>v2div2sf2): New define_insn.\n+\t(float<floatunssuffix>v2div2sf2_mask): Turn into define_expand.\n+\t(*float<floatunssuffix>v2div2sf2_mask): New define_insn.\n+\t(*float<floatunssuffix>v2div2sf2_mask_1): Replace\n+\tsubrtxes (const_vector:V2SF [(const_int 0) (const_int 0)]) with\n+\tmatch_operands with \"const0_operand\" \"C\".\n+\n 2019-01-10  Tamar Christina  <tamar.christina@arm.com>\n \n \t* config/aarch64/aarch64-builtins.c"}, {"sha": "c9ec74b6aa101c3b78ed175946845eff75ac2741", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84df580f073debc208187d1ff2e5cec49989e5a9/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84df580f073debc208187d1ff2e5cec49989e5a9/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=84df580f073debc208187d1ff2e5cec49989e5a9", "patch": "@@ -5222,11 +5222,19 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"float<floatunssuffix>v2div2sf2\"\n+(define_expand \"float<floatunssuffix>v2div2sf2\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(vec_concat:V4SF\n \t    (any_float:V2SF (match_operand:V2DI 1 \"nonimmediate_operand\" \"vm\"))\n-\t    (const_vector:V2SF [(const_int 0) (const_int 0)])))]\n+\t    (match_dup 2)))]\n+  \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n+  \"operands[2] = CONST0_RTX (V2SFmode);\")\n+\n+(define_insn \"*float<floatunssuffix>v2div2sf2\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n+\t(vec_concat:V4SF\n+\t    (any_float:V2SF (match_operand:V2DI 1 \"nonimmediate_operand\" \"vm\"))\n+\t    (match_operand:V2SF 2 \"const0_operand\" \"C\")))]\n   \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n   \"vcvt<floatsuffix>qq2ps{x}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -5260,16 +5268,29 @@\n   DONE;\n })\n \n-(define_insn \"float<floatunssuffix>v2div2sf2_mask\"\n+(define_expand \"float<floatunssuffix>v2div2sf2_mask\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n+    (vec_concat:V4SF\n+        (vec_merge:V2SF\n+\t    (any_float:V2SF (match_operand:V2DI 1 \"nonimmediate_operand\" \"vm\"))\n+            (vec_select:V2SF\n+                (match_operand:V4SF 2 \"nonimm_or_0_operand\" \"0C\")\n+                (parallel [(const_int 0) (const_int 1)]))\n+            (match_operand:QI 3 \"register_operand\" \"Yk\"))\n+\t    (match_dup 4)))]\n+  \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n+  \"operands[4] = CONST0_RTX (V2SFmode);\")\n+\n+(define_insn \"*float<floatunssuffix>v2div2sf2_mask\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n     (vec_concat:V4SF\n         (vec_merge:V2SF\n-\t        (any_float:V2SF (match_operand:V2DI 1 \"nonimmediate_operand\" \"vm\"))\n+\t    (any_float:V2SF (match_operand:V2DI 1 \"nonimmediate_operand\" \"vm\"))\n             (vec_select:V2SF\n                 (match_operand:V4SF 2 \"nonimm_or_0_operand\" \"0C\")\n                 (parallel [(const_int 0) (const_int 1)]))\n             (match_operand:QI 3 \"register_operand\" \"Yk\"))\n-\t    (const_vector:V2SF [(const_int 0) (const_int 0)])))]\n+\t    (match_operand:V2SF 4 \"const0_operand\" \"C\")))]\n   \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n   \"vcvt<floatsuffix>qq2ps{x}\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -5282,9 +5303,9 @@\n \t(vec_merge:V2SF\n \t\t(any_float:V2SF (match_operand:V2DI 1\n \t\t\t\t  \"nonimmediate_operand\" \"vm\"))\n-\t    (const_vector:V2SF [(const_int 0) (const_int 0)])\n+\t    (match_operand:V2SF 3 \"const0_operand\" \"C\")\n \t    (match_operand:QI 2 \"register_operand\" \"Yk\"))\n-\t    (const_vector:V2SF [(const_int 0) (const_int 0)])))]\n+\t    (match_operand:V2SF 4 \"const0_operand\" \"C\")))]\n   \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n   \"vcvt<floatsuffix>qq2ps{x}\\t{%1, %0%{%2%}%{z%}|%0%{%2%}%{z%}, %1}\"\n   [(set_attr \"type\" \"ssecvt\")"}, {"sha": "018fa7675a441382bde805315de2248f7cbcb008", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84df580f073debc208187d1ff2e5cec49989e5a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84df580f073debc208187d1ff2e5cec49989e5a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=84df580f073debc208187d1ff2e5cec49989e5a9", "patch": "@@ -1,3 +1,8 @@\n+2019-01-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/88785\n+\t* g++.target/i386/pr88785.C: New test.\n+\n 2019-01-10  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/87305"}, {"sha": "026528656ad83f2137fda5524bd814d0ea8807ec", "filename": "gcc/testsuite/g++.target/i386/pr88785.C", "status": "added", "additions": 197, "deletions": 0, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84df580f073debc208187d1ff2e5cec49989e5a9/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr88785.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84df580f073debc208187d1ff2e5cec49989e5a9/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr88785.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr88785.C?ref=84df580f073debc208187d1ff2e5cec49989e5a9", "patch": "@@ -0,0 +1,197 @@\n+// PR target/88785\n+// { dg-do compile }\n+// { dg-options \"-O2 -g -std=c++17 -mavx512vl -mavx512dq\" }\n+\n+namespace a {\n+template <class> class b;\n+template <class> class d;\n+}\n+template <int f> struct g { static constexpr int e = f; };\n+template <typename> struct aa;\n+template <typename...> struct o;\n+template <typename h, typename ab> struct o<h, ab> : aa<h>::ac {};\n+template <typename...> struct j;\n+template <typename h, typename ab> struct j<h, ab> : aa<ab>::ac {};\n+template <typename... k> constexpr bool l = o<k...>::e;\n+template <typename, typename> struct r : g<false> {};\n+template <typename m> struct r<m, m> : g<true> {};\n+template <typename ad> struct aa { typedef ad ac; };\n+template <bool, typename ad, typename> using ae = ad;\n+template <typename...> using af = void;\n+typedef float ag __attribute__((__vector_size__(16)));\n+ag ah;\n+ag ai(__attribute__((__vector_size__(2 * sizeof(long long)))) long long z) {\n+  ah = ag{};\n+  __attribute__((__vector_size__(4 * sizeof(float)))) float aj = ah;\n+  return __builtin_ia32_cvtqq2ps128_mask(z, aj, 1);\n+}\n+namespace a {\n+int ak;\n+int al;\n+template <long> int am;\n+template <class> struct an;\n+template <class> struct ao;\n+template <class m> using ap = typename ao<m>::ac;\n+template <class, unsigned long, class = af<>> struct aq;\n+template <class m> using ar = aq<m, sizeof(m)>;\n+template <class as, class at> as au(at);\n+template <class> struct av;\n+template <class m> using aw = typename av<m>::ac;\n+template <class m, int ax> struct ay {\n+  static constexpr long az = ax * sizeof(int);\n+  using ac [[gnu::__vector_size__(az)]] = m;\n+};\n+template <class m, long ba> using bb = typename ay<m, ba>::ac;\n+template <class m> struct p {\n+  using bc = decltype(m()[0]);\n+  static constexpr int bd = sizeof(bc);\n+};\n+template <class as, class m, class = p<m>> as be(m);\n+template <class as, class... at> as bf(at... z) { return be<as>(z...); }\n+template <class m, unsigned long ax, class bg = aw<m>> bg bh(aq<m, ax>) {\n+  return bg();\n+}\n+template <> struct av<float> {\n+  using ac [[gnu::__vector_size__(16)]] = float;\n+};\n+template <class> struct av {\n+  using ac [[gnu::__vector_size__(16)]] = long long;\n+};\n+template <unsigned long bi> struct aq<bool, bi> {};\n+template <class m, unsigned long bi, class bj = bb<m, bi>,\n+          bool = l<r<bb<m, bi>, aw<m>>, r<bj, m>>>\n+struct bk;\n+template <class m, unsigned long bi, class bj> struct bk<m, bi, bj, true> {\n+  bj bl;\n+  bk(bb<m, bi> z) : bl(z) {}\n+};\n+template <class m, unsigned long bi, class bj> struct bk<m, bi, bj, false> {};\n+template <class m, unsigned long bi> struct aq<m, bi> : bk<m, bi> {\n+  using bm = bb<m, bi>;\n+  static constexpr long bd = bi;\n+  aq();\n+  template <class bn> aq(bn z) : bk<m, bi>(z) {}\n+  m operator[](long);\n+};\n+template <class> constexpr long bo = g<0>::e;\n+template <class m> struct ao { using ac = typename an<m>::br; };\n+template <class bp, class m> class bq {\n+  using bu = m;\n+  bp bs;\n+  m bt;\n+\n+public:\n+  template <class bn, class bv> void q(bn z, bv bw) {\n+    auto s = bx(bt), by = bx(bs);\n+    ap<bu>::bz(s, z, bw, by);\n+  }\n+};\n+class ca {\n+public:\n+  template <class bn, class bv> void cb(bn, bv);\n+};\n+template <class m> ca cc(typename b<m>::cd, m &);\n+template <class m> bq<d<m>, b<m>> cc(typename b<m>::cd, const m &);\n+struct ce;\n+template <class t, int ax> struct cf {\n+  using br = typename t::br;\n+  using cg = aq<long, ax>;\n+  using ch = aq<long, ax>;\n+};\n+struct ci {\n+  template <class m> static constexpr long cj = sizeof(m);\n+  struct ck : j<int, g<sizeof(int)>> {};\n+  template <class> static constexpr bool cl = ck::e;\n+  using br = ce;\n+  template <class m> using cn = ae<cl<m>, cf<ci, cj<m>>, int>;\n+};\n+template <class> struct an : ci::cn<long> {};\n+template <class> class d : an<int> {\n+  using cm = ch;\n+\n+public:\n+  cm bl;\n+};\n+template <class m> auto bx(m z) { return z.bl; }\n+template <class> class b : an<int> {\n+  using cm = cg;\n+\n+public:\n+  using cd = d<long>;\n+  static long cu();\n+  b();\n+  template <class bn, class bv> b(bn, bv) {}\n+  cm bl;\n+};\n+template <class m> auto bx(b<m> z) { return z.bl; }\n+template <class m, class co> void cq(ar<m>, co, aq<bool, ar<m>::bd>);\n+template <class as, class bu, class cp> as be(bu z) {\n+  using cs = typename cp::bc;\n+  constexpr long ax = cp::bd;\n+  auto cr = bh(z);\n+  aq<cs, ax> f;\n+  using bn = typename p<as>::bc;\n+  constexpr bool cy = sizeof(f), ct = sizeof(bn);\n+  if (ct)\n+    if (cy) {\n+      ag cw = ai(cr);\n+      return cw;\n+    }\n+}\n+template <class as, class at> auto cv(at z) { return bf<as>(z); }\n+struct G {\n+  template <class m> using ch = typename ci::cn<m>::ch;\n+  template <class m, unsigned long ax, class bn, class co>\n+  static void bz(aq<m, ax> z, bn *, co, ch<m> cx) {\n+    using da = aq<bn, sizeof(bn)>;\n+    using bu = typename da::bm;\n+    using bp = aq<ae<1, bool, bn>, da::bd>;\n+    auto cz = cv<bu>(z);\n+    cq(da(cz), ae<0, int, co>(), au<bp>(cx));\n+  }\n+};\n+struct ce : G {};\n+}\n+class D {\n+public:\n+  D(...);\n+  template <typename db> void operator<<(db);\n+};\n+template <class dc> dc dd;\n+struct de {\n+  long cu();\n+};\n+template <typename dc> void dg() {\n+  using db = long;\n+  auto df = dd<a::b<long>>;\n+  using a::ak;\n+  using a::al;\n+  constexpr long di = 1, alignment = a::bo<a::b<long>>;\n+  using dh = ae<di, decltype(al), int>;\n+  dh dk, am = a::am<alignment>;\n+  const a::b<long> dj;\n+  de u;\n+  auto dm = 0 ? u.cu() : 0;\n+  float dl[dm];\n+  db reference;\n+  a::b<long> x;\n+  auto compare = [&](long) {\n+    int n;\n+    a::b<long>(reference, ak);\n+    for (auto i = 0; 0; ++i)\n+      [] {\n+        auto v = 0, w = 0;\n+        return D(w, v);\n+      }() << n;\n+  };\n+  compare(0);\n+  using c = a::b<long>::cd;\n+  c dn;\n+  a::b y = df;\n+  auto v(y);\n+  cc(dn, x).cb(dl, am);\n+  long i;\n+  cc(dn, dj).q(&dl[dc::cu()], dk);\n+  ++i;\n+}\n+void test() { dg<a::b<long>>(); }"}]}