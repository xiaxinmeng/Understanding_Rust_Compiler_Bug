{"sha": "ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU0YjRhMDJlODc4YjhlYzQ3M2Q1Y2FiZDNiMDQzZmU4ZGZkODk0MA==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2002-02-04T22:50:56Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-02-04T22:50:56Z"}, "message": "extend.texi: Warn about unsupported usage of altivec builtins.\n\n2002-01-31  Aldy Hernandez  <aldyh@redhat.com>\n\n        * doc/extend.texi: Warn about unsupported usage of altivec\n        builtins.\n\n        * config/rs6000/rs6000.md (altivec_vcmp*_p): Remove.\n        (altivec_predicate_*): New.\n\n        * config/rs6000/altivec.h: Rewrite predicates to use new builtins.\n        Add C++ version of vec_*() functions.\n\n        * config/rs6000/rs6000.c (bdesc_altivec_preds): New.\n        (bdesc_2arg): Remove altivec predicates.\n        (altivec_expand_builtin): Handle predicates.\n        (altivec_init_builtins): Handle predicates.\n        (altivec_expand_predicate_builtin): New.\n\nFrom-SVN: r49500", "tree": {"sha": "fbe889cb28dc85dfb6aa3f5e2b1b80bf90f5c495", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbe889cb28dc85dfb6aa3f5e2b1b80bf90f5c495"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6bcf44c5e6d91f3db56fc60b94f9157ae0ede92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6bcf44c5e6d91f3db56fc60b94f9157ae0ede92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6bcf44c5e6d91f3db56fc60b94f9157ae0ede92"}], "stats": {"total": 4629, "additions": 4316, "deletions": 313}, "files": [{"sha": "bf46b29b504a13d72c64ff9e0eea3fd7b2129177", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940", "patch": "@@ -1,3 +1,20 @@\n+2002-02-05  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * doc/extend.texi: Warn about unsupported usage of altivec\n+        builtins.\n+\n+        * config/rs6000/rs6000.md (altivec_vcmp*_p): Remove.\n+        (altivec_predicate_*): New.\n+\n+        * config/rs6000/altivec.h: Rewrite predicates to use new builtins.\n+        Add C++ version of vec_*() functions.\n+\n+        * config/rs6000/rs6000.c (bdesc_altivec_preds): New.\n+        (bdesc_2arg): Remove altivec predicates.\n+        (altivec_expand_builtin): Handle predicates.\n+        (altivec_init_builtins): Handle predicates.\n+        (altivec_expand_predicate_builtin): New.\n+\n 2002-02-04  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* pa.c (DO_FRAME_NOTES): Move forward."}, {"sha": "4e8cdf27b097a844464dd80571f8f1e0811678cb", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 4046, "deletions": 202, "changes": 4248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940"}, {"sha": "7a33dc21820dcac613b9bb60102ad4587878cba0", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 182, "deletions": 14, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940", "patch": "@@ -163,6 +163,7 @@ static rtx rs6000_expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int\n static rtx altivec_expand_builtin PARAMS ((tree, rtx));\n static rtx altivec_expand_unop_builtin PARAMS ((enum insn_code, tree, rtx));\n static rtx altivec_expand_binop_builtin PARAMS ((enum insn_code, tree, rtx));\n+static rtx altivec_expand_predicate_builtin PARAMS ((enum insn_code, const char *, tree, rtx));\n static rtx altivec_expand_ternop_builtin PARAMS ((enum insn_code, tree, rtx));\n static rtx altivec_expand_stv_builtin PARAMS ((enum insn_code, tree));\n static void rs6000_parse_abi_options PARAMS ((void));\n@@ -3352,19 +3353,34 @@ static const struct builtin_description bdesc_2arg[] =\n   { MASK_ALTIVEC, CODE_FOR_altivec_vsum2sws, \"__builtin_altivec_vsum2sws\", ALTIVEC_BUILTIN_VSUM2SWS },\n   { MASK_ALTIVEC, CODE_FOR_altivec_vsumsws, \"__builtin_altivec_vsumsws\", ALTIVEC_BUILTIN_VSUMSWS },\n   { MASK_ALTIVEC, CODE_FOR_xorv4si3, \"__builtin_altivec_vxor\", ALTIVEC_BUILTIN_VXOR },\n-  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpbfp_p, \"__builtin_altivec_vcmpbfp_p\", ALTIVEC_BUILTIN_VCMPBFP_P },\n-  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpeqfp_p, \"__builtin_altivec_vcmpeqfp_p\", ALTIVEC_BUILTIN_VCMPEQFP_P },\n-  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpequb_p, \"__builtin_altivec_vcmpequb_p\", ALTIVEC_BUILTIN_VCMPEQUB_P },\n-  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpequh_p, \"__builtin_altivec_vcmpequh_p\", ALTIVEC_BUILTIN_VCMPEQUH_P },\n-  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpequw_p, \"__builtin_altivec_vcmpequw_p\", ALTIVEC_BUILTIN_VCMPEQUW_P },\n-  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpgefp_p, \"__builtin_altivec_vcmpgefp_p\", ALTIVEC_BUILTIN_VCMPGEFP_P },\n-  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpgtfp_p, \"__builtin_altivec_vcmpgtfp_p\", ALTIVEC_BUILTIN_VCMPGTFP_P },\n-  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpgtsb_p, \"__builtin_altivec_vcmpgtsb_p\", ALTIVEC_BUILTIN_VCMPGTSB_P },\n-  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpgtsh_p, \"__builtin_altivec_vcmpgtsh_p\", ALTIVEC_BUILTIN_VCMPGTSH_P },\n-  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpgtsw_p, \"__builtin_altivec_vcmpgtsw_p\", ALTIVEC_BUILTIN_VCMPGTSW_P },\n-  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpgtub_p, \"__builtin_altivec_vcmpgtub_p\", ALTIVEC_BUILTIN_VCMPGTUB_P },\n-  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpgtuh_p, \"__builtin_altivec_vcmpgtuh_p\", ALTIVEC_BUILTIN_VCMPGTUH_P },\n-  { MASK_ALTIVEC, CODE_FOR_altivec_vcmpgtuw_p, \"__builtin_altivec_vcmpgtuw_p\", ALTIVEC_BUILTIN_VCMPGTUW_P },\n+};\n+\n+/* AltiVec predicates.  */\n+\n+struct builtin_description_predicates\n+{\n+  const unsigned int mask;\n+  const enum insn_code icode;\n+  const char *opcode;\n+  const char *const name;\n+  const enum rs6000_builtins code;\n+};\n+\n+static const struct builtin_description_predicates bdesc_altivec_preds[] =\n+{\n+  { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v4sf, \"*vcmpbfp.\", \"__builtin_altivec_vcmpbfp_p\", ALTIVEC_BUILTIN_VCMPBFP_P },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v4sf, \"*vcmpeqfp.\", \"__builtin_altivec_vcmpeqfp_p\", ALTIVEC_BUILTIN_VCMPEQFP_P },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v4sf, \"*vcmpgefp.\", \"__builtin_altivec_vcmpgefp_p\", ALTIVEC_BUILTIN_VCMPGEFP_P },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v4sf, \"*vcmpgtfp.\", \"__builtin_altivec_vcmpgtfp_p\", ALTIVEC_BUILTIN_VCMPGTFP_P },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v4si, \"*vcmpequw.\", \"__builtin_altivec_vcmpequw_p\", ALTIVEC_BUILTIN_VCMPEQUW_P },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v4si, \"*vcmpgtsw.\", \"__builtin_altivec_vcmpgtsw_p\", ALTIVEC_BUILTIN_VCMPGTSW_P },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v4si, \"*vcmpgtuw.\", \"__builtin_altivec_vcmpgtuw_p\", ALTIVEC_BUILTIN_VCMPGTUW_P },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v8hi, \"*vcmpgtuh.\", \"__builtin_altivec_vcmpgtuh_p\", ALTIVEC_BUILTIN_VCMPGTUH_P },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v8hi, \"*vcmpgtsh.\", \"__builtin_altivec_vcmpgtsh_p\", ALTIVEC_BUILTIN_VCMPGTSH_P },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v8hi, \"*vcmpequh.\", \"__builtin_altivec_vcmpequh_p\", ALTIVEC_BUILTIN_VCMPEQUH_P },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v16qi, \"*vcmpequb.\", \"__builtin_altivec_vcmpequb_p\", ALTIVEC_BUILTIN_VCMPEQUB_P },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v16qi, \"*vcmpgtsb.\", \"__builtin_altivec_vcmpgtsb_p\", ALTIVEC_BUILTIN_VCMPGTSB_P },\n+  { MASK_ALTIVEC, CODE_FOR_altivec_predicate_v16qi, \"*vcmpgtub.\", \"__builtin_altivec_vcmpgtub_p\", ALTIVEC_BUILTIN_VCMPGTUB_P }\n };\n \n /* Simple unary operations: VECb = foo (unsigned literal) or VECb =\n@@ -3422,6 +3438,7 @@ altivec_expand_unop_builtin (icode, arglist, target)\n \n   return target;\n }\n+\n static rtx\n altivec_expand_binop_builtin (icode, arglist, target)\n      enum insn_code icode;\n@@ -3459,6 +3476,87 @@ altivec_expand_binop_builtin (icode, arglist, target)\n   return target;\n }\n \n+static rtx\n+altivec_expand_predicate_builtin (icode, opcode, arglist, target)\n+     enum insn_code icode;\n+     const char *opcode;\n+     tree arglist;\n+     rtx target;\n+{\n+  rtx pat, scratch;\n+  tree cr6_form = TREE_VALUE (arglist);\n+  tree arg0 = TREE_VALUE (TREE_CHAIN (arglist));\n+  tree arg1 = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+  rtx op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+  rtx op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+  enum machine_mode tmode = SImode;\n+  enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n+  enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n+  int cr6_form_int;\n+\n+  if (TREE_CODE (cr6_form) != INTEGER_CST)\n+    {\n+      error (\"argument 1 of __builtin_altivec_predicate must be a constant\");\n+      return NULL_RTX;\n+    }\n+  else\n+    cr6_form_int = TREE_INT_CST_LOW (cr6_form);\n+\n+  if (mode0 != mode1)\n+    abort ();\n+\n+  /* If we have invalid arguments, bail out before generating bad rtl.  */\n+  if (arg0 == error_mark_node || arg1 == error_mark_node)\n+    return NULL_RTX;\n+\n+  if (target == 0\n+      || GET_MODE (target) != tmode\n+      || ! (*insn_data[icode].operand[0].predicate) (target, tmode))\n+    target = gen_reg_rtx (tmode);\n+\n+  if (! (*insn_data[icode].operand[1].predicate) (op0, mode0))\n+    op0 = copy_to_mode_reg (mode0, op0);\n+  if (! (*insn_data[icode].operand[2].predicate) (op1, mode1))\n+    op1 = copy_to_mode_reg (mode1, op1);\n+\n+  scratch = gen_reg_rtx (mode0);\n+\n+  pat = GEN_FCN (icode) (scratch, op0, op1,\n+\t\t\t gen_rtx (SYMBOL_REF, Pmode, opcode));\n+  if (! pat)\n+    return 0;\n+  emit_insn (pat);\n+\n+  /* The vec_any* and vec_all* predicates use the same opcodes for two\n+     different operations, but the bits in CR6 will be different\n+     depending on what information we want.  So we have to play tricks\n+     with CR6 to get the right bits out.\n+\n+     If you think this is disgusting, look at the specs for the\n+     AltiVec predicates.  */\n+\n+     switch (cr6_form_int)\n+       {\n+       case 0:\n+\t emit_insn (gen_cr6_test_for_zero (target));\n+\t break;\n+       case 1:\n+\t emit_insn (gen_cr6_test_for_zero_reverse (target));\n+\t break;\n+       case 2:\n+\t emit_insn (gen_cr6_test_for_lt (target));\n+\t break;\n+       case 3:\n+\t emit_insn (gen_cr6_test_for_lt_reverse (target));\n+\t break;\n+       default:\n+\t error (\"argument 1 of __builtin_altivec_predicate is out of range\");\n+\t break;\n+       }\n+\n+  return target;\n+}\n+\n static rtx\n altivec_expand_stv_builtin (icode, arglist)\n      enum insn_code icode;\n@@ -3543,6 +3641,7 @@ altivec_expand_builtin (exp, target)\n      rtx target;\n {\n   struct builtin_description *d;\n+  struct builtin_description_predicates *dp;\n   size_t i;\n   enum insn_code icode;\n   tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n@@ -3830,6 +3929,12 @@ altivec_expand_builtin (exp, target)\n     if (d->code == fcode)\n       return altivec_expand_binop_builtin (d->icode, arglist, target);\n \n+  /* Expand the AltiVec predicates.  */\n+  dp = (struct builtin_description_predicates *) bdesc_altivec_preds;\n+  for (i = 0; i < sizeof (bdesc_altivec_preds) / sizeof *dp; i++, dp++)\n+    if (dp->code == fcode)\n+      return altivec_expand_predicate_builtin (dp->icode, dp->opcode, arglist, target);\n+\n   /* LV* are funky.  We initialized them differently.  */\n   switch (fcode)\n     {\n@@ -3899,7 +4004,8 @@ rs6000_init_builtins ()\n static void\n altivec_init_builtins (void)\n {\n-  struct builtin_description * d;\n+  struct builtin_description *d;\n+  struct builtin_description_predicates *dp;\n   size_t i;\n \n   tree endlink = void_list_node;\n@@ -4265,6 +4371,38 @@ altivec_init_builtins (void)\n \t\t\t\t      tree_cons (NULL_TREE, V16QI_type_node,\n \t\t\t\t\t\t endlink)));\n \n+  tree int_ftype_int_v4si_v4si\n+    = build_function_type\n+    (integer_type_node,\n+     tree_cons (NULL_TREE, integer_type_node,\n+\t\ttree_cons (NULL_TREE, V4SI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SI_type_node,\n+\t\t\t\t      endlink))));\n+\n+  tree int_ftype_int_v4sf_v4sf\n+    = build_function_type\n+    (integer_type_node,\n+     tree_cons (NULL_TREE, integer_type_node,\n+\t\ttree_cons (NULL_TREE, V4SF_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V4SF_type_node,\n+\t\t\t\t      endlink))));\n+\n+  tree int_ftype_int_v8hi_v8hi\n+    = build_function_type\n+    (integer_type_node,\n+     tree_cons (NULL_TREE, integer_type_node,\n+\t\t tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t    tree_cons (NULL_TREE, V8HI_type_node,\n+\t\t\t\t       endlink))));\n+\n+  tree int_ftype_int_v16qi_v16qi\n+    = build_function_type\n+    (integer_type_node,\n+     tree_cons (NULL_TREE, integer_type_node,\n+\t\ttree_cons (NULL_TREE, V16QI_type_node,\n+\t\t\t   tree_cons (NULL_TREE, V16QI_type_node,\n+\t\t\t\t      endlink))));\n+\n   tree v16qi_ftype_int_pvoid\n     = build_function_type (V16QI_type_node,\n \t\t\t   tree_cons (NULL_TREE, integer_type_node,\n@@ -4412,6 +4550,36 @@ altivec_init_builtins (void)\n   for (i = 0; i < sizeof (bdesc_dst) / sizeof *d; i++, d++)\n     def_builtin (d->mask, d->name, void_ftype_pvoid_int_char, d->code);\n \n+  /* Initialize the predicates.  */\n+  dp = (struct builtin_description_predicates *) bdesc_altivec_preds;\n+  for (i = 0; i < sizeof (bdesc_altivec_preds) / sizeof *dp; i++, dp++)\n+    {\n+      enum machine_mode mode1;\n+      tree type;\n+\n+      mode1 = insn_data[dp->icode].operand[1].mode;\n+\n+      switch (mode1)\n+\t{\n+\tcase V4SImode:\n+\t  type = int_ftype_int_v4si_v4si;\n+\t  break;\n+\tcase V8HImode:\n+\t  type = int_ftype_int_v8hi_v8hi;\n+\t  break;\n+\tcase V16QImode:\n+\t  type = int_ftype_int_v16qi_v16qi;\n+\t  break;\n+\tcase V4SFmode:\n+\t  type = int_ftype_int_v4sf_v4sf;\n+\t  break;\n+\tdefault:\n+\t  abort ();\n+\t}\n+      \n+      def_builtin (dp->mask, dp->name, type, dp->code);\n+    }\n+\n   /* Add the simple binary operators.  */\n   d = (struct builtin_description *) bdesc_2arg;\n   for (i = 0; i < sizeof (bdesc_2arg) / sizeof *d; i++, d++)"}, {"sha": "b0d1a1209b16b3d12af3e030074777e04792d738", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940", "patch": "@@ -2938,19 +2938,6 @@ enum rs6000_builtins\n   ALTIVEC_BUILTIN_VUPKLSB,\n   ALTIVEC_BUILTIN_VUPKLPX,\n   ALTIVEC_BUILTIN_VUPKLSH,\n-  ALTIVEC_BUILTIN_VCMPBFP_P,\n-  ALTIVEC_BUILTIN_VCMPEQFP_P,\n-  ALTIVEC_BUILTIN_VCMPEQUB_P,\n-  ALTIVEC_BUILTIN_VCMPEQUH_P,\n-  ALTIVEC_BUILTIN_VCMPEQUW_P,\n-  ALTIVEC_BUILTIN_VCMPGEFP_P,\n-  ALTIVEC_BUILTIN_VCMPGTFP_P,\n-  ALTIVEC_BUILTIN_VCMPGTSB_P,\n-  ALTIVEC_BUILTIN_VCMPGTSH_P,\n-  ALTIVEC_BUILTIN_VCMPGTSW_P,\n-  ALTIVEC_BUILTIN_VCMPGTUB_P,\n-  ALTIVEC_BUILTIN_VCMPGTUH_P,\n-  ALTIVEC_BUILTIN_VCMPGTUW_P,\n   ALTIVEC_BUILTIN_MTVSCR,\n   ALTIVEC_BUILTIN_MFVSCR,\n   ALTIVEC_BUILTIN_DSSALL,\n@@ -2970,5 +2957,18 @@ enum rs6000_builtins\n   ALTIVEC_BUILTIN_STVEBX,\n   ALTIVEC_BUILTIN_STVEHX,\n   ALTIVEC_BUILTIN_STVEWX,\n-  ALTIVEC_BUILTIN_STVXL\n+  ALTIVEC_BUILTIN_STVXL,\n+  ALTIVEC_BUILTIN_VCMPBFP_P,\n+  ALTIVEC_BUILTIN_VCMPEQFP_P,\n+  ALTIVEC_BUILTIN_VCMPEQUB_P,\n+  ALTIVEC_BUILTIN_VCMPEQUH_P,\n+  ALTIVEC_BUILTIN_VCMPEQUW_P,\n+  ALTIVEC_BUILTIN_VCMPGEFP_P,\n+  ALTIVEC_BUILTIN_VCMPGTFP_P,\n+  ALTIVEC_BUILTIN_VCMPGTSB_P,\n+  ALTIVEC_BUILTIN_VCMPGTSH_P,\n+  ALTIVEC_BUILTIN_VCMPGTSW_P,\n+  ALTIVEC_BUILTIN_VCMPGTUB_P,\n+  ALTIVEC_BUILTIN_VCMPGTUH_P,\n+  ALTIVEC_BUILTIN_VCMPGTUW_P\n };"}, {"sha": "1d1533137c91a43dd8ca828f915714f24c611236", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 52, "deletions": 83, "changes": 135, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940", "patch": "@@ -15318,110 +15318,79 @@\n \n ;; AltiVec predicates.\n \n-(define_insn \"altivec_vcmpequb_p\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n-                      (match_operand:V16QI 2 \"register_operand\" \"v\")] 173))]\n-  \"TARGET_ALTIVEC\"\n-  \"vcmpequb. %0,%1,%2\"\n-[(set_attr \"type\" \"veccmp\")])\n-\n-(define_insn \"altivec_vcmpequh_p\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n-                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 174))]\n-  \"TARGET_ALTIVEC\"\n-  \"vcmpequh. %0,%1,%2\"\n-[(set_attr \"type\" \"veccmp\")])\n-\n-(define_insn \"altivec_vcmpequw_p\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n-                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 175))]\n-  \"TARGET_ALTIVEC\"\n-  \"vcmpequw. %0,%1,%2\"\n-[(set_attr \"type\" \"veccmp\")])\n-\n-(define_insn \"altivec_vcmpeqfp_p\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V4SF 1 \"register_operand\" \"v\")\n-                      (match_operand:V4SF 2 \"register_operand\" \"v\")] 176))]\n+(define_expand \"cr6_test_for_zero\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(eq:SI (reg:CC 74)\n+\t       (const_int 0)))]\n   \"TARGET_ALTIVEC\"\n-  \"vcmpeqfp. %0,%1,%2\"\n-[(set_attr \"type\" \"veccmp\")])\n+  \"\")\n \n-(define_insn \"altivec_vcmpgtub_p\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n-                      (match_operand:V16QI 2 \"register_operand\" \"v\")] 177))]\n+(define_expand \"cr6_test_for_zero_reverse\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(eq:SI (reg:CC 74)\n+\t       (const_int 0)))\n+   (set (match_dup 0) (minus:SI (const_int 1) (match_dup 0)))]\n   \"TARGET_ALTIVEC\"\n-  \"vcmpgtub. %0,%1,%2\"\n-[(set_attr \"type\" \"veccmp\")])\n+  \"\")\n \n-(define_insn \"altivec_vcmpgtsb_p\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n-                      (match_operand:V16QI 2 \"register_operand\" \"v\")] 178))]\n+(define_expand \"cr6_test_for_lt\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(lt:SI (reg:CC 74)\n+\t       (const_int 0)))]\n   \"TARGET_ALTIVEC\"\n-  \"vcmpgtsb. %0,%1,%2\"\n-[(set_attr \"type\" \"veccmp\")])\n+  \"\")\n \n-(define_insn \"altivec_vcmpgtuw_p\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n-                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 179))]\n+(define_expand \"cr6_test_for_lt_reverse\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(lt:SI (reg:CC 74)\n+\t       (const_int 0)))\n+   (set (match_dup 0) (minus:SI (const_int 1) (match_dup 0)))]\n   \"TARGET_ALTIVEC\"\n-  \"vcmpgtuw. %0,%1,%2\"\n-[(set_attr \"type\" \"veccmp\")])\n+  \"\")\n \n-(define_insn \"altivec_vcmpgtsw_p\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V4SI 1 \"register_operand\" \"v\")\n-                      (match_operand:V4SI 2 \"register_operand\" \"v\")] 180))]\n-  \"TARGET_ALTIVEC\"\n-  \"vcmpgtsw. %0,%1,%2\"\n-[(set_attr \"type\" \"veccmp\")])\n+;; We can get away with generating the opcode on the fly (%3 below)\n+;; because all the predicates have the same scheduling parameters.\n \n-(define_insn \"altivec_vcmpgefp_p\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V4SF 1 \"register_operand\" \"v\")\n-                      (match_operand:V4SF 2 \"register_operand\" \"v\")] 181))]\n+(define_insn \"altivec_predicate_v4si\"\n+  [(set (reg:CC 74)\n+\t(unspec:CC [(match_operand:V4SI 1 \"register_operand\" \"v\")\n+\t\t    (match_operand:V4SI 2 \"register_operand\" \"v\")\n+\t\t    (match_operand 3 \"any_operand\" \"\")] 173))\n+   (clobber (match_scratch:V4SI 0 \"=v\"))]\n   \"TARGET_ALTIVEC\"\n-  \"vcmpgefp. %0,%1,%2\"\n+  \"%3 %0,%1,%2\"\n [(set_attr \"type\" \"veccmp\")])\n \n-(define_insn \"altivec_vcmpgtfp_p\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V4SF 1 \"register_operand\" \"v\")\n-                      (match_operand:V4SF 2 \"register_operand\" \"v\")] 182))]\n+(define_insn \"altivec_predicate_v4sf\"\n+  [(set (reg:CC 74)\n+\t(unspec:CC [(match_operand:V4SF 1 \"register_operand\" \"v\")\n+\t\t    (match_operand:V4SF 2 \"register_operand\" \"v\")\n+\t\t    (match_operand 3 \"any_operand\" \"\")] 174))\n+   (clobber (match_scratch:V4SF 0 \"=v\"))]\n   \"TARGET_ALTIVEC\"\n-  \"vcmpgtfp. %0,%1,%2\"\n+  \"%3 %0,%1,%2\"\n [(set_attr \"type\" \"veccmp\")])\n \n-(define_insn \"altivec_vcmpbfp_p\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V4SF 1 \"register_operand\" \"v\")\n-                      (match_operand:V4SF 2 \"register_operand\" \"v\")] 183))]\n+(define_insn \"altivec_predicate_v8hi\"\n+  [(set (reg:CC 74)\n+\t(unspec:CC [(match_operand:V8HI 1 \"register_operand\" \"v\")\n+\t\t    (match_operand:V8HI 2 \"register_operand\" \"v\")\n+\t\t    (match_operand 3 \"any_operand\" \"\")] 175))\n+   (clobber (match_scratch:V8HI 0 \"=v\"))]\n   \"TARGET_ALTIVEC\"\n-  \"vcmpbfp. %0,%1,%2\"\n+  \"%3 %0,%1,%2\"\n [(set_attr \"type\" \"veccmp\")])\n \n-(define_insn \"altivec_vcmpgtuh_p\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n-                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 184))]\n+(define_insn \"altivec_predicate_v16qi\"\n+  [(set (reg:CC 74)\n+\t(unspec:CC [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+\t\t    (match_operand:V16QI 2 \"register_operand\" \"v\")\n+\t\t    (match_operand 3 \"any_operand\" \"\")] 175))\n+   (clobber (match_scratch:V16QI 0 \"=v\"))]\n   \"TARGET_ALTIVEC\"\n-  \"vcmpgtuh. %0,%1,%2\"\n+  \"%3 %0,%1,%2\"\n [(set_attr \"type\" \"veccmp\")])\n \n-(define_insn \"altivec_vcmpgtsh_p\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")\n-                      (match_operand:V8HI 2 \"register_operand\" \"v\")] 185))]\n-  \"TARGET_ALTIVEC\"\n-  \"vcmpgtsh. %0,%1,%2\"\n-  [(set_attr \"type\" \"veccmp\")])\n-\n (define_insn \"altivec_mtvscr\"\n   [(unspec [(match_operand:V4SI 0 \"register_operand\" \"v\")] 186)]\n   \"TARGET_ALTIVEC\""}, {"sha": "1663367bf0c01600a009c11f83265a30cae313db", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ae4b4a02e878b8ec473d5cabd3b043fe8dfd8940", "patch": "@@ -4889,6 +4889,11 @@ The following functions are made available by including\n @option{-mabi=altivec}.  The functions implement the functionality\n described in Motorola's AltiVec Programming Interface Manual.\n \n+@emph{Note:} Only the @code{<altivec.h>} interface is supported.\n+Internally, GCC uses built-in functions to achieve the functionality in\n+the aforementioned header file, but they are not supported and are\n+subject to change without notice.\n+\n @smallexample\n vector signed char vec_abs (vector signed char, vector signed char);\n vector signed short vec_abs (vector signed short, vector signed short);"}]}