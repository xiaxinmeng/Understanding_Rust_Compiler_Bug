{"sha": "b2725ea5df920e68591375847c0310254020eec7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI3MjVlYTVkZjkyMGU2ODU5MTM3NTg0N2MwMzEwMjU0MDIwZWVjNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-03-14T08:14:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-03-14T08:14:48Z"}, "message": "re PR c++/89512 (ICE in get_expr_operands, at tree-ssa-operands.c:882)\n\n\tPR c++/89512\n\t* semantics.c (finish_qualified_id_expr): Reject variable templates.\n\n\t* g++.dg/cpp1y/var-templ61.C: New test.\n\nFrom-SVN: r269672", "tree": {"sha": "898cefc46e0c617c71ce27643bef4f2b5907ebf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/898cefc46e0c617c71ce27643bef4f2b5907ebf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2725ea5df920e68591375847c0310254020eec7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2725ea5df920e68591375847c0310254020eec7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2725ea5df920e68591375847c0310254020eec7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2725ea5df920e68591375847c0310254020eec7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ee285909bcef729415995e16c68e8713c59996f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee285909bcef729415995e16c68e8713c59996f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ee285909bcef729415995e16c68e8713c59996f"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "054a891bcef374a69643d7709b33978dcb9c0474", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2725ea5df920e68591375847c0310254020eec7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2725ea5df920e68591375847c0310254020eec7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b2725ea5df920e68591375847c0310254020eec7", "patch": "@@ -1,5 +1,8 @@\n 2019-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/89512\n+\t* semantics.c (finish_qualified_id_expr): Reject variable templates.\n+\n \tPR c++/89652\n \t* constexpr.c (struct constexpr_ctx): Change save_exprs type from\n \thash_set<tree> to vec<tree>."}, {"sha": "fcf06061bc724963b33ffc1c6686aee81d50c5bd", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2725ea5df920e68591375847c0310254020eec7/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2725ea5df920e68591375847c0310254020eec7/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=b2725ea5df920e68591375847c0310254020eec7", "patch": "@@ -2112,6 +2112,14 @@ finish_qualified_id_expr (tree qualifying_class,\n \texpr = build_offset_ref (qualifying_class, expr, /*address_p=*/false,\n \t\t\t\t complain);\n     }\n+  else if (!template_p\n+\t   && TREE_CODE (expr) == TEMPLATE_DECL\n+\t   && !DECL_FUNCTION_TEMPLATE_P (expr))\n+    {\n+      if (complain & tf_error)\n+\terror (\"%qE missing template arguments\", expr);\n+      return error_mark_node;\n+    }\n   else\n     {\n       /* In a template, return a SCOPE_REF for most qualified-ids"}, {"sha": "dbd918c6ca4cca12fdb3331a10eae41a32b2c497", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2725ea5df920e68591375847c0310254020eec7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2725ea5df920e68591375847c0310254020eec7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2725ea5df920e68591375847c0310254020eec7", "patch": "@@ -1,5 +1,8 @@\n 2019-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/89512\n+\t* g++.dg/cpp1y/var-templ61.C: New test.\n+\n \tPR c++/89652\n \t* g++.dg/cpp1y/constexpr-89652.C: New test.\n "}, {"sha": "be2fe0f4423ee6c9c8008ab84fee8c71649afd4d", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ61.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2725ea5df920e68591375847c0310254020eec7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ61.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2725ea5df920e68591375847c0310254020eec7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ61.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ61.C?ref=b2725ea5df920e68591375847c0310254020eec7", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/89512\n+// { dg-do compile { target c++14 } }\n+\n+struct A {\n+  template <typename T>\n+  static const int a = 0;\n+};\n+\n+struct B {\n+  template <typename T>\n+  static int foo ()\n+  {\n+    return T::a;\t\t// { dg-error \"missing template arguments\" }\n+  }\n+};\n+\n+int bar ()\n+{\n+  return B::foo<A> ();\t\t// { dg-message \"required from here\" }\n+}"}]}