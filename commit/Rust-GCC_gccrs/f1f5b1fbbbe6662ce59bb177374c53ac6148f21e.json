{"sha": "f1f5b1fbbbe6662ce59bb177374c53ac6148f21e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFmNWIxZmJiYmU2NjYyY2U1OWJiMTc3Mzc0YzUzYWM2MTQ4ZjIxZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-09-14T07:41:36Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-09-14T07:42:43Z"}, "message": "Give more informative error message for by-reference types\n\nRecent compilers enforce more strictly the RM C.6(18) clause, which says\nthat volatile record types are by-reference types.  This changes the typical\nerror message now given in these cases.\n\ngcc/ada/\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <is_type>: Declare new\n\tconstant.  Adjust error message issued by validate_size in the case\n\tof by-reference types.\n\t(validate_size): Always use the error strings passed by the caller.", "tree": {"sha": "72971751268020e274123896a8bac5ef4f07bbe9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72971751268020e274123896a8bac5ef4f07bbe9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1f5b1fbbbe6662ce59bb177374c53ac6148f21e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1f5b1fbbbe6662ce59bb177374c53ac6148f21e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1f5b1fbbbe6662ce59bb177374c53ac6148f21e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1f5b1fbbbe6662ce59bb177374c53ac6148f21e/comments", "author": null, "committer": null, "parents": [{"sha": "ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebcdd004edfcd79788e044ac2a4e4d7bb3e01888"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "d37ed3d1b52fa58b6a8f8ac0169e626ff411bbf6", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f5b1fbbbe6662ce59bb177374c53ac6148f21e/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f5b1fbbbe6662ce59bb177374c53ac6148f21e/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=f1f5b1fbbbe6662ce59bb177374c53ac6148f21e", "patch": "@@ -4279,6 +4279,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n      handling alignment and possible padding.  */\n   if (is_type && (!gnu_decl || this_made_decl))\n     {\n+      const bool is_by_ref = Is_By_Reference_Type (gnat_entity);\n+\n       gcc_assert (!TYPE_IS_DUMMY_P (gnu_type));\n \n       /* Process the attributes, if not already done.  Note that the type is\n@@ -4293,15 +4295,18 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t non-constant).  */\n       if (!gnu_size && kind != E_String_Literal_Subtype)\n \t{\n+\t  const char *size_s = \"size for %s too small{, minimum allowed is ^}\";\n+\t  const char *type_s = is_by_ref ? \"by-reference type &\" : \"&\";\n+\n \t  if (Known_Esize (gnat_entity))\n \t    gnu_size\n \t      = validate_size (Esize (gnat_entity), gnu_type, gnat_entity,\n-\t\t\t       VAR_DECL, false, false, NULL, NULL);\n+\t\t\t       VAR_DECL, false, false, size_s, type_s);\n \t  else\n \t    gnu_size\n \t      = validate_size (RM_Size (gnat_entity), gnu_type, gnat_entity,\n \t\t\t       TYPE_DECL, false, Has_Size_Clause (gnat_entity),\n-\t\t\t       NULL, NULL);\n+\t\t\t       size_s, type_s);\n \t}\n \n       /* If a size was specified, see if we can make a new type of that size\n@@ -4614,7 +4619,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t    TYPE_ALIGN_OK (gnu_type) = 1;\n \n \t  /* Record whether the type is passed by reference.  */\n-\t  if (Is_By_Reference_Type (gnat_entity) && !VOID_TYPE_P (gnu_type))\n+\t  if (is_by_ref && !VOID_TYPE_P (gnu_type))\n \t    TYPE_BY_REFERENCE_P (gnu_type) = 1;\n \n \t  /* Record whether an alignment clause was specified.  */\n@@ -9184,7 +9189,7 @@ validate_size (Uint uint_size, tree gnu_type, Entity_Id gnat_object,\n       char buf[128];\n       const char *s;\n \n-      if (kind == FIELD_DECL)\n+      if (s1 && s2)\n \t{\n \t  snprintf (buf, sizeof (buf), s1, s2);\n \t  s = buf;\n@@ -9193,6 +9198,7 @@ validate_size (Uint uint_size, tree gnu_type, Entity_Id gnat_object,\n \ts = \"component size for& too small{, minimum allowed is ^}\";\n       else\n \ts = \"size for& too small{, minimum allowed is ^}\";\n+\n       post_error_ne_tree (s, gnat_error_node, gnat_object, old_size);\n \n       return NULL_TREE;"}]}