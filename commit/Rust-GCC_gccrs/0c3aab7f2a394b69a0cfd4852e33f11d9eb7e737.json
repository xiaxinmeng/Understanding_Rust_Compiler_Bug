{"sha": "0c3aab7f2a394b69a0cfd4852e33f11d9eb7e737", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGMzYWFiN2YyYTM5NGI2OWEwY2ZkNDg1MmUzM2YxMWQ5ZWI3ZTczNw==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-28T16:45:36Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-08-05T10:52:13Z"}, "message": "aarch64: Don't include vec_select high-half in SIMD subtract cost\n\nThe Neon subtract-long/subract-widen instructions can select the top\nor bottom half of the operand registers. This selection does not\nchange the cost of the underlying instruction and this should be\nreflected by the RTL cost function.\n\nThis patch adds RTL tree traversal in the Neon subtract cost function\nto match vec_select high-half of its operands. This traversal\nprevents the cost of the vec_select from being added into the cost of\nthe subtract - meaning that these instructions can now be emitted in\nthe combine pass as they are no longer deemed prohibitively\nexpensive.\n\ngcc/ChangeLog:\n\n2021-07-28  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64.c: Traverse RTL tree to prevent cost\n\tof vec_select high-half from being added into Neon subtract\n\tcost.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/vsubX_high_cost.c: New test.", "tree": {"sha": "14bc4fe5016ee5661f51deac402500bf5fc94b53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14bc4fe5016ee5661f51deac402500bf5fc94b53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c3aab7f2a394b69a0cfd4852e33f11d9eb7e737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3aab7f2a394b69a0cfd4852e33f11d9eb7e737", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c3aab7f2a394b69a0cfd4852e33f11d9eb7e737", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c3aab7f2a394b69a0cfd4852e33f11d9eb7e737/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cd27a3b25558e5be7f8595fc1c828bc46641671", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cd27a3b25558e5be7f8595fc1c828bc46641671", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cd27a3b25558e5be7f8595fc1c828bc46641671"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "30f836549c685e7f6cde05e72e3025c2db23b1e7", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3aab7f2a394b69a0cfd4852e33f11d9eb7e737/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3aab7f2a394b69a0cfd4852e33f11d9eb7e737/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=0c3aab7f2a394b69a0cfd4852e33f11d9eb7e737", "patch": "@@ -13089,6 +13089,21 @@ aarch64_rtx_costs (rtx x, machine_mode mode, int outer ATTRIBUTE_UNUSED,\n \top1 = XEXP (x, 1);\n \n cost_minus:\n+\tif (VECTOR_MODE_P (mode))\n+\t  {\n+\t    /* SUBL2 and SUBW2.  */\n+\t    unsigned int vec_flags = aarch64_classify_vector_mode (mode);\n+\t    if (vec_flags & VEC_ADVSIMD)\n+\t      {\n+\t\t/* The select-operand-high-half versions of the sub instruction\n+\t\t   have the same cost as the regular three vector version -\n+\t\t   don't add the costs of the select into the costs of the sub.\n+\t\t   */\n+\t\top0 = aarch64_strip_extend_vec_half (op0);\n+\t\top1 = aarch64_strip_extend_vec_half (op1);\n+\t      }\n+\t  }\n+\n \t*cost += rtx_cost (op0, mode, MINUS, 0, speed);\n \n \t/* Detect valid immediates.  */"}, {"sha": "09bc7fc7766e8bcb468d592cbf4005a57cf09397", "filename": "gcc/testsuite/gcc.target/aarch64/vsubX_high_cost.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c3aab7f2a394b69a0cfd4852e33f11d9eb7e737/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvsubX_high_cost.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c3aab7f2a394b69a0cfd4852e33f11d9eb7e737/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvsubX_high_cost.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2FvsubX_high_cost.c?ref=0c3aab7f2a394b69a0cfd4852e33f11d9eb7e737", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+#include <arm_neon.h>\n+\n+#define TEST_SUBL(rettype, intype, ts, rs) \\\n+  rettype test_vsubl_ ## ts (intype a, intype b, intype c) \\\n+\t{ \\\n+\t\trettype t0 = vsubl_ ## ts (vget_high_ ## ts (a), \\\n+\t\t\t\t\t   vget_high_ ## ts (c)); \\\n+\t\trettype t1 = vsubl_ ## ts (vget_high_ ## ts (b), \\\n+\t\t\t\t\t   vget_high_ ## ts (c)); \\\n+\t\treturn vaddq ## _ ## rs (t0, t1); \\\n+\t}\n+\n+TEST_SUBL (int16x8_t, int8x16_t, s8, s16)\n+TEST_SUBL (uint16x8_t, uint8x16_t, u8, u16)\n+TEST_SUBL (int32x4_t, int16x8_t, s16, s32)\n+TEST_SUBL (uint32x4_t, uint16x8_t, u16, u32)\n+TEST_SUBL (int64x2_t, int32x4_t, s32, s64)\n+TEST_SUBL (uint64x2_t, uint32x4_t, u32, u64)\n+\n+#define TEST_SUBW(rettype, intype, intypel, ts, rs) \\\n+  rettype test_vsubw_ ## ts (intype a, intype b, intypel c) \\\n+\t{ \\\n+\t\trettype t0 = vsubw_ ## ts (a, vget_high_ ## ts (c)); \\\n+\t\trettype t1 = vsubw_ ## ts (b, vget_high_ ## ts (c)); \\\n+\t\treturn vaddq ## _ ## rs (t0, t1); \\\n+\t}\n+\n+TEST_SUBW (int16x8_t, int16x8_t, int8x16_t, s8, s16)\n+TEST_SUBW (uint16x8_t, uint16x8_t, uint8x16_t, u8, u16)\n+TEST_SUBW (int32x4_t, int32x4_t, int16x8_t, s16, s32)\n+TEST_SUBW (uint32x4_t, uint32x4_t, uint16x8_t, u16, u32)\n+TEST_SUBW (int64x2_t, int64x2_t, int32x4_t, s32, s64)\n+TEST_SUBW (uint64x2_t, uint64x2_t, uint32x4_t, u32, u64)\n+\n+/* { dg-final { scan-assembler-not \"dup\\\\t\" } } */"}]}