{"sha": "b6e5b400c3253134d0c7dd71c7976bdd0be55391", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZlNWI0MDBjMzI1MzEzNGQwYzdkZDcxYzc5NzZiZGQwYmU1NTM5MQ==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2016-02-22T10:31:32Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2016-02-22T10:31:32Z"}, "message": "Add dump-fn to gdbhooks.py\n\n2016-02-22  Tom de Vries  <tom@codesourcery.com>\n\n\t* gdbhooks.py (class DumpFn): Add and instantiate, adding command\n\tdump-fn.\n\nFrom-SVN: r233599", "tree": {"sha": "ca3a13991813e1d54cc0186638530595ef15e894", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca3a13991813e1d54cc0186638530595ef15e894"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6e5b400c3253134d0c7dd71c7976bdd0be55391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e5b400c3253134d0c7dd71c7976bdd0be55391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6e5b400c3253134d0c7dd71c7976bdd0be55391", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6e5b400c3253134d0c7dd71c7976bdd0be55391/comments", "author": null, "committer": null, "parents": [{"sha": "bddead150b7e66b097f920b48980f0c65ff8e09e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bddead150b7e66b097f920b48980f0c65ff8e09e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bddead150b7e66b097f920b48980f0c65ff8e09e"}], "stats": {"total": 96, "additions": 96, "deletions": 0}, "files": [{"sha": "c2646f6caa794cbc4b0aace30e9fb239dd345b9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e5b400c3253134d0c7dd71c7976bdd0be55391/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e5b400c3253134d0c7dd71c7976bdd0be55391/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6e5b400c3253134d0c7dd71c7976bdd0be55391", "patch": "@@ -1,3 +1,8 @@\n+2016-02-22  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* gdbhooks.py (class DumpFn): Add and instantiate, adding command\n+\tdump-fn.\n+\n 2016-02-22  Richard Biener  <rguenther@suse.de>\n \n \tPR ipa/37448"}, {"sha": "ed72016e44eea133565f2f053e48d5a2c4972f2f", "filename": "gcc/gdbhooks.py", "status": "modified", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6e5b400c3253134d0c7dd71c7976bdd0be55391/gcc%2Fgdbhooks.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6e5b400c3253134d0c7dd71c7976bdd0be55391/gcc%2Fgdbhooks.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgdbhooks.py?ref=b6e5b400c3253134d0c7dd71c7976bdd0be55391", "patch": "@@ -133,6 +133,7 @@\n import os.path\n import re\n import sys\n+import tempfile\n \n import gdb\n import gdb.printing\n@@ -589,4 +590,94 @@ def invoke(self, arg, from_tty):\n \n BreakOnPass()\n \n+class DumpFn(gdb.Command):\n+    \"\"\"\n+    A custom command to dump a gimple/rtl function to file.  By default, it\n+    dumps the current function using 0 as dump_flags, but the function and flags\n+    can also be specified. If /f <file> are passed as the first two arguments,\n+    the dump is written to that file.  Otherwise, a temporary file is created\n+    and opened in the text editor specified in the EDITOR environment variable.\n+\n+    Examples of use:\n+      (gdb) dump-fn\n+      (gdb) dump-fn /f foo.1.txt\n+      (gdb) dump-fn cfun->decl\n+      (gdb) dump-fn /f foo.1.txt cfun->decl\n+      (gdb) dump-fn cfun->decl 0\n+      (gdb) dump-fn cfun->decl dump_flags\n+    \"\"\"\n+\n+    def __init__(self):\n+        gdb.Command.__init__(self, 'dump-fn', gdb.COMMAND_USER)\n+\n+    def invoke(self, arg, from_tty):\n+        # Parse args, check number of args\n+        args = gdb.string_to_argv(arg)\n+        if len(args) >= 1 and args[0] == \"/f\":\n+            if len(args) == 1:\n+                print (\"Missing file argument\")\n+                return\n+            filename = args[1]\n+            editor_mode = False\n+            base_arg = 2\n+        else:\n+            editor = os.getenv(\"EDITOR\", \"\")\n+            if editor == \"\":\n+                print (\"EDITOR environment variable not defined\")\n+                return\n+            editor_mode = True\n+            base_arg = 0\n+        if len(args) - base_arg > 2:\n+            print (\"Too many arguments\")\n+            return\n+\n+        # Set func\n+        if len(args) - base_arg >= 1:\n+            funcname = args[base_arg]\n+            printfuncname = \"function %s\" % funcname\n+        else:\n+            funcname = \"cfun ? cfun->decl : current_function_decl\"\n+            printfuncname = \"current function\"\n+        func = gdb.parse_and_eval(funcname)\n+        if func == 0:\n+            print (\"Could not find %s\" % printfuncname)\n+            return\n+        func = \"(tree)%u\" % func\n+\n+        # Set flags\n+        if len(args) - base_arg >= 2:\n+            flags = gdb.parse_and_eval(args[base_arg + 1])\n+        else:\n+            flags = 0\n+\n+        # Get tempory file, if necessary\n+        if editor_mode:\n+            f = tempfile.NamedTemporaryFile(delete=False, suffix=\".txt\")\n+            filename = f.name\n+            f.close()\n+\n+        # Open file\n+        fp = gdb.parse_and_eval(\"fopen (\\\"%s\\\", \\\"w\\\")\" % filename)\n+        if fp == 0:\n+            print (\"Could not open file: %s\" % filename)\n+            return\n+        fp = \"(FILE *)%u\" % fp\n+\n+        # Dump function to file\n+        _ = gdb.parse_and_eval(\"dump_function_to_file (%s, %s, %u)\" %\n+                               (func, fp, flags))\n+\n+        # Close file\n+        ret = gdb.parse_and_eval(\"fclose (%s)\" % fp)\n+        if ret != 0:\n+            print (\"Could not close file: %s\" % filename)\n+            return\n+\n+        # Open file in editor, if necessary\n+        if editor_mode:\n+            os.system(\"( %s \\\"%s\\\"; rm \\\"%s\\\" ) &\" %\n+                      (editor, filename, filename))\n+\n+DumpFn()\n+\n print('Successfully loaded GDB hooks for GCC')"}]}