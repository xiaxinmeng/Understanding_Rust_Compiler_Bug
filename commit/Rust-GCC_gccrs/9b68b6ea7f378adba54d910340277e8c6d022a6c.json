{"sha": "9b68b6ea7f378adba54d910340277e8c6d022a6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI2OGI2ZWE3ZjM3OGFkYmE1NGQ5MTAzNDAyNzdlOGM2ZDAyMmE2Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2010-06-10T20:23:23Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-06-10T20:23:23Z"}, "message": "Makefile.in (BUILD_RTL): Move build/read-md.o to...\n\ngcc/\n\t* Makefile.in (BUILD_RTL): Move build/read-md.o to...\n\t(BUILD_MD): ...this new variable.\n\t(simple_generated_rtl_h, simple_generated_rtl_c): New variables\n\tthat include the old contents of simple_generated_h and\n\tsimple_generated_c.\n\t(simple_generated_h, simple_generated_c): Include them.  Add\n\tinsn-constants.h.\n\t(s-%): Make simple_generated_{h,c} stamps depend on $(MD_DEPS)\n\tand simple_generated_rtl_{h,c} stamps depend on insn-conditions.md.\n\tRemove these dependencies from the main rule and include\n\tinsn-conditions.md in the command line only if it appears\n\tin the dependency list.\n\t(insn-constants.h, s-constants): Delete.\n\t(build/genconstants.o): Don't depend on $(RTL_BASE_H), $(GTM_H)\n\tor gensupport.h.\n\t(build/genmddeps.o): Likewise.\n\t(genprogrtl): New variable that contains everything from genprogmd\n\texcept mddeps and constants.\n\t(genprogmd): Redefine in terms of genprogrtl.  Make these programs\n\tdepend on $(BUILD_MD)\n\t(genprog): New variable.  Make these programs depend on\n\t$(BUILD_ERRORS).\n\t* genmddeps.c: Don't include tm.h, rtl.h or gensupport.h.\n\t(main): Use read_md_files instead of init_rtx_reader_args.\n\t* genconstants.c: As for genmddeps.c.\n\t* read-md.h (read_skip_construct): Declare.\n\t* read-md.c (read_skip_construct): New function.\n\t(handle_file): Allow a null handle_directive, skipping the\n\tconstruct if so.\n\t(parse_include): Update the comment accordingly.\n\nFrom-SVN: r160578", "tree": {"sha": "b0d555e6cf1ab4460355eb3d51bbf23067aaef5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0d555e6cf1ab4460355eb3d51bbf23067aaef5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b68b6ea7f378adba54d910340277e8c6d022a6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b68b6ea7f378adba54d910340277e8c6d022a6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b68b6ea7f378adba54d910340277e8c6d022a6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b68b6ea7f378adba54d910340277e8c6d022a6c/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "600ab3fcfa44ffe8f6c384333d3254ec610a3da7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/600ab3fcfa44ffe8f6c384333d3254ec610a3da7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/600ab3fcfa44ffe8f6c384333d3254ec610a3da7"}], "stats": {"total": 179, "additions": 132, "deletions": 47}, "files": [{"sha": "ed3c96af190284b5763b039ae16826836784feb9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b68b6ea7f378adba54d910340277e8c6d022a6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b68b6ea7f378adba54d910340277e8c6d022a6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b68b6ea7f378adba54d910340277e8c6d022a6c", "patch": "@@ -1,3 +1,36 @@\n+2010-06-10  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* Makefile.in (BUILD_RTL): Move build/read-md.o to...\n+\t(BUILD_MD): ...this new variable.\n+\t(simple_generated_rtl_h, simple_generated_rtl_c): New variables\n+\tthat include the old contents of simple_generated_h and\n+\tsimple_generated_c.\n+\t(simple_generated_h, simple_generated_c): Include them.  Add\n+\tinsn-constants.h.\n+\t(s-%): Make simple_generated_{h,c} stamps depend on $(MD_DEPS)\n+\tand simple_generated_rtl_{h,c} stamps depend on insn-conditions.md.\n+\tRemove these dependencies from the main rule and include\n+\tinsn-conditions.md in the command line only if it appears\n+\tin the dependency list.\n+\t(insn-constants.h, s-constants): Delete.\n+\t(build/genconstants.o): Don't depend on $(RTL_BASE_H), $(GTM_H)\n+\tor gensupport.h.\n+\t(build/genmddeps.o): Likewise.\n+\t(genprogrtl): New variable that contains everything from genprogmd\n+\texcept mddeps and constants.\n+\t(genprogmd): Redefine in terms of genprogrtl.  Make these programs\n+\tdepend on $(BUILD_MD)\n+\t(genprog): New variable.  Make these programs depend on\n+\t$(BUILD_ERRORS).\n+\t* genmddeps.c: Don't include tm.h, rtl.h or gensupport.h.\n+\t(main): Use read_md_files instead of init_rtx_reader_args.\n+\t* genconstants.c: As for genmddeps.c.\n+\t* read-md.h (read_skip_construct): Declare.\n+\t* read-md.c (read_skip_construct): New function.\n+\t(handle_file): Allow a null handle_directive, skipping the\n+\tconstruct if so.\n+\t(parse_include): Update the comment accordingly.\n+\n 2010-06-10  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* Makefile.in (build/genmddeps.o): Depend on $(READ_MD_H)."}, {"sha": "bdafaa55ca28a55bf16cab579cf305219cd7e751", "filename": "gcc/Makefile.in", "status": "modified", "additions": 41, "deletions": 36, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b68b6ea7f378adba54d910340277e8c6d022a6c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b68b6ea7f378adba54d910340277e8c6d022a6c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=9b68b6ea7f378adba54d910340277e8c6d022a6c", "patch": "@@ -1037,9 +1037,10 @@ LDEXP_LIB = @LDEXP_LIB@\n # even if we are cross-building GCC.\n BUILD_LIBS = $(BUILD_LIBIBERTY)\n \n-BUILD_RTL = build/read-md.o build/rtl.o build/read-rtl.o build/ggc-none.o \\\n+BUILD_RTL = build/rtl.o build/read-rtl.o build/ggc-none.o \\\n \t    build/vec.o build/min-insn-modes.o build/gensupport.o \\\n \t    build/print-rtl.o\n+BUILD_MD = build/read-md.o\n BUILD_ERRORS = build/errors.o\n \n # Specify the directories to be searched for header files.\n@@ -3558,44 +3559,43 @@ insn-recog.o : insn-recog.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\t\\\n   reload.h $(REGS_H) tm-constrs.h\n \n # For each of the files generated by running a generator program over\n-# the machine description, the following pair of static pattern rules\n-# runs the generator program only if the machine description has changed,\n-# but touches the target file only when its contents actually change.\n-# The \"; @true\" construct forces Make to recheck the timestamp on the\n-# target file.\n+# the machine description, the following static pattern rules run the\n+# generator program only if the machine description has changed,\n+# but touch the target file only when its contents actually change.\n+# The \"; @true\" construct forces Make to recheck the timestamp on\n+# the target file.\n \n-simple_generated_h = insn-attr.h insn-codes.h insn-config.h insn-flags.h\n+simple_rtl_generated_h\t= insn-attr.h insn-codes.h insn-config.h insn-flags.h\n \n-simple_generated_c = insn-attrtab.c insn-automata.c insn-emit.c \\\n-\t\t     insn-extract.c insn-opinit.c insn-output.c \\\n-\t\t     insn-peep.c insn-recog.c\n+simple_rtl_generated_c\t= insn-attrtab.c insn-automata.c insn-emit.c \\\n+\t\t\t  insn-extract.c insn-opinit.c insn-output.c \\\n+\t\t\t  insn-peep.c insn-recog.c\n+\n+simple_generated_h\t= $(simple_rtl_generated_h) insn-constants.h\n+\n+simple_generated_c\t= $(simple_rtl_generated_c)\n+\n+$(simple_generated_h:insn-%.h=s-%) \\\n+$(simple_generated_c:insn-%.c=s-%): s-%: $(MD_DEPS)\n+\n+$(simple_rtl_generated_h:insn-%.h=s-%) \\\n+$(simple_rtl_generated_c:insn-%.c=s-%): s-%: insn-conditions.md\n \n $(simple_generated_h): insn-%.h: s-%; @true\n \n-$(simple_generated_h:insn-%.h=s-%): s-%: build/gen%$(build_exeext) \\\n-  $(MD_DEPS) insn-conditions.md\n+$(simple_generated_h:insn-%.h=s-%): s-%: build/gen%$(build_exeext)\n \t$(RUN_GEN) build/gen$*$(build_exeext) $(md_file) \\\n-\t  insn-conditions.md > tmp-$*.h\n+\t  $(filter insn-conditions.md,$^) > tmp-$*.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-$*.h insn-$*.h\n \t$(STAMP) s-$*\n \n $(simple_generated_c): insn-%.c: s-%; @true\n-$(simple_generated_c:insn-%.c=s-%): s-%: build/gen%$(build_exeext) \\\n-  $(MD_DEPS) insn-conditions.md\n+$(simple_generated_c:insn-%.c=s-%): s-%: build/gen%$(build_exeext)\n \t$(RUN_GEN) build/gen$*$(build_exeext) $(md_file) \\\n-\t  insn-conditions.md > tmp-$*.c\n+\t  $(filter insn-conditions.md,$^) > tmp-$*.c\n \t$(SHELL) $(srcdir)/../move-if-change tmp-$*.c insn-$*.c\n \t$(STAMP) s-$*\n \n-# genconstants needs to run before insn-conditions.md is available\n-# (because the constants may be used in the conditions).\n-insn-constants.h: s-constants; @true\n-s-constants: build/genconstants$(build_exeext) $(MD_DEPS)\n-\t$(RUN_GEN) build/genconstants$(build_exeext) $(md_file) \\\n-\t  > tmp-constants.h\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-constants.h insn-constants.h\n-\t$(STAMP) s-constants\n-\n # gencheck doesn't read the machine description, and the file produced\n # doesn't use the insn-* convention.\n tree-check.h: s-check ; @true\n@@ -3813,8 +3813,8 @@ build/genconditions.o : genconditions.c $(RTL_BASE_H) $(BCONFIG_H)\t\\\n   gensupport.h\n build/genconfig.o : genconfig.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   coretypes.h $(GTM_H) errors.h gensupport.h\n-build/genconstants.o : genconstants.c $(RTL_BASE_H) $(BCONFIG_H)\t\\\n-  $(SYSTEM_H) coretypes.h $(GTM_H) errors.h $(READ_MD_H) gensupport.h\n+build/genconstants.o : genconstants.c $(BCONFIG_H) $(SYSTEM_H)\t\t\\\n+  coretypes.h errors.h $(READ_MD_H)\n build/genemit.o : genemit.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n   coretypes.h $(GTM_H) errors.h $(READ_MD_H) gensupport.h\n build/genextract.o : genextract.c $(RTL_BASE_H) $(BCONFIG_H)\t\t\\\n@@ -3829,7 +3829,7 @@ build/gengtype-parse.o : gengtype-parse.c gengtype.h $(BCONFIG_H)\t\\\n build/gengtype.o : gengtype.c $(BCONFIG_H) $(SYSTEM_H) gengtype.h \t\\\n   rtl.def insn-notes.def errors.h double-int.h $(HASHTAB_H)\n build/genmddeps.o: genmddeps.c $(BCONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n-  $(GTM_H) $(RTL_BASE_H) errors.h $(READ_MD_H) gensupport.h\n+  errors.h $(READ_MD_H)\n build/genmodes.o : genmodes.c $(BCONFIG_H) $(SYSTEM_H) errors.h\t\t\\\n   $(HASHTAB_H) machmode.def $(extra_modes_file)\n build/genopinit.o : genopinit.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n@@ -3853,19 +3853,24 @@ build/gen%$(build_exeext): build/gen%.o $(BUILD_LIBDEPS)\n \t$(LINKER_FOR_BUILD) $(BUILD_LINKERFLAGS) $(BUILD_LDFLAGS) -o $@ \\\n \t    $(filter-out $(BUILD_LIBDEPS), $^) $(BUILD_LIBS)\n \n-# All these programs use the MD reader ($(BUILD_RTL)).\n-genprogmd = attr attrtab automata codes conditions config constants emit \\\n-\t    extract flags mddeps opinit output peep preds recog\n-$(genprogmd:%=build/gen%$(build_exeext)): $(BUILD_RTL) $(BUILD_ERRORS)\n+# All these programs use the RTL reader ($(BUILD_RTL)).\n+genprogrtl = attr attrtab automata codes conditions config emit \\\n+\t     extract flags opinit output peep preds recog\n+$(genprogrtl:%=build/gen%$(build_exeext)): $(BUILD_RTL)\n+\n+# All these programs use the MD reader ($(BUILD_MD)).\n+genprogmd = $(genprogrtl) mddeps constants\n+$(genprogmd:%=build/gen%$(build_exeext)): $(BUILD_MD)\n+\n+# All generator programs need to report errors\n+genprog = $(genprogmd) genrtl modes gtype\n+$(genprog:%=build/gen%$(build_exeext)): $(BUILD_ERRORS)\n \n # These programs need libs over and above what they get from the above list.\n build/genautomata$(build_exeext) : BUILD_LIBS += -lm\n \n # These programs are not linked with the MD reader.\n-build/gengenrtl$(build_exeext) : $(BUILD_ERRORS)\n-build/genmodes$(build_exeext) : $(BUILD_ERRORS)\n-build/gengtype$(build_exeext) : build/gengtype-lex.o build/gengtype-parse.o \\\n-\t\t\t\t$(BUILD_ERRORS)\n+build/gengtype$(build_exeext) : build/gengtype-lex.o build/gengtype-parse.o\n \n # Generated source files for gengtype.\n gengtype-lex.c : gengtype-lex.l"}, {"sha": "60526bbf7167154a9226608c0487371d78aa6682", "filename": "gcc/genconstants.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b68b6ea7f378adba54d910340277e8c6d022a6c/gcc%2Fgenconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b68b6ea7f378adba54d910340277e8c6d022a6c/gcc%2Fgenconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenconstants.c?ref=9b68b6ea7f378adba54d910340277e8c6d022a6c", "patch": "@@ -28,11 +28,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"bconfig.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"rtl.h\"\n #include \"errors.h\"\n #include \"read-md.h\"\n-#include \"gensupport.h\"\n \n /* Called via traverse_md_constants; emit a #define for\n    the current constant definition.  */\n@@ -52,7 +49,7 @@ main (int argc, char **argv)\n {\n   progname = \"genconstants\";\n \n-  if (!init_rtx_reader_args (argc, argv))\n+  if (!read_md_files (argc, argv, NULL, NULL))\n     return (FATAL_EXIT_CODE);\n \n   /* Initializing the MD reader has the side effect of loading up"}, {"sha": "15311eeaed6ccb79f1a80d205d47375e5dd9ce12", "filename": "gcc/genmddeps.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b68b6ea7f378adba54d910340277e8c6d022a6c/gcc%2Fgenmddeps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b68b6ea7f378adba54d910340277e8c6d022a6c/gcc%2Fgenmddeps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmddeps.c?ref=9b68b6ea7f378adba54d910340277e8c6d022a6c", "patch": "@@ -18,11 +18,8 @@\n #include \"bconfig.h\"\n #include \"system.h\"\n #include \"coretypes.h\"\n-#include \"tm.h\"\n-#include \"rtl.h\"\n #include \"errors.h\"\n #include \"read-md.h\"\n-#include \"gensupport.h\"\n \n \n struct filedep\n@@ -50,8 +47,8 @@ main (int argc, char **argv)\n   progname = \"genmddeps\";\n   include_callback = add_filedep;\n \n-  if (!init_rtx_reader_args (argc, argv))\n-    return (FATAL_EXIT_CODE);\n+  if (!read_md_files (argc, argv, NULL, NULL))\n+    return FATAL_EXIT_CODE;\n \n   *last = NULL;\n "}, {"sha": "af9800f8e2df174fcf0702c326922e3f7ca315d1", "filename": "gcc/read-md.c", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b68b6ea7f378adba54d910340277e8c6d022a6c/gcc%2Fread-md.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b68b6ea7f378adba54d910340277e8c6d022a6c/gcc%2Fread-md.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-md.c?ref=9b68b6ea7f378adba54d910340277e8c6d022a6c", "patch": "@@ -575,6 +575,55 @@ read_string (int star_if_braced)\n   return stringbuf;\n }\n \n+/* Skip the rest of a construct that started at line LINENO and that\n+   is currently nested by DEPTH levels of parentheses.  */\n+\n+void\n+read_skip_construct (int depth, int lineno)\n+{\n+  struct md_name name;\n+  int c;\n+\n+  do\n+    {\n+      c = read_skip_spaces ();\n+      if (c == EOF)\n+\t{\n+\t  error_with_line (lineno, \"unterminated construct\");\n+\t  exit (1);\n+\t}\n+      switch (c)\n+\t{\n+\tcase '(':\n+\t  depth++;\n+\t  break;\n+\n+\tcase ')':\n+\t  depth--;\n+\t  break;\n+\n+\tcase ':':\n+\tcase '[':\n+\tcase ']':\n+\tcase '/':\n+\t  break;\n+\n+\tcase '\\\"':\n+\tcase '{':\n+\t  unread_char (c);\n+\t  read_string (false);\n+\t  break;\n+\n+\tdefault:\n+\t  unread_char (c);\n+\t  read_name (&name);\n+\t  break;\n+\t}\n+    }\n+  while (depth > 0);\n+  unread_char (c);\n+}\n+\n /* Given a string, return the number of comma-separated elements in it.\n    Return 0 for the null string.  */\n \n@@ -787,8 +836,10 @@ handle_file (directive_handler_t handle_directive)\n \thandle_constants ();\n       else if (strcmp (directive.string, \"include\") == 0)\n \thandle_include (lineno, handle_directive);\n-      else\n+      else if (handle_directive)\n \thandle_directive (lineno, directive.string);\n+      else\n+\tread_skip_construct (1, lineno);\n \n       c = read_skip_spaces ();\n       if (c != ')')\n@@ -840,7 +891,8 @@ parse_include (const char *arg)\n    It should return true if it recognizes the argument or false if a\n    generic error should be reported.\n \n-   The parser calls HANDLE_DIRECTIVE for each unknown directive.\n+   If HANDLE_DIRECTIVE is nonnull, the parser calls it for each\n+   unknown directive, otherwise it just skips such directives.\n    See the comment above the directive_handler_t definition for\n    details about the callback's interface.  */\n "}, {"sha": "ebe47cc3737d9e6e92b9babd4e92453d7533740a", "filename": "gcc/read-md.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b68b6ea7f378adba54d910340277e8c6d022a6c/gcc%2Fread-md.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b68b6ea7f378adba54d910340277e8c6d022a6c/gcc%2Fread-md.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-md.h?ref=9b68b6ea7f378adba54d910340277e8c6d022a6c", "patch": "@@ -92,6 +92,7 @@ extern int read_skip_spaces (void);\n extern void read_name (struct md_name *);\n extern char *read_quoted_string (void);\n extern char *read_string (int);\n+extern void read_skip_construct (int, int);\n extern int n_comma_elts (const char *);\n extern const char *scan_comma_elt (const char **);\n extern void traverse_md_constants (htab_trav, void *);"}]}