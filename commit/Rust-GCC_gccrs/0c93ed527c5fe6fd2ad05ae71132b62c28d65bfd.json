{"sha": "0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM5M2VkNTI3YzVmZTZmZDJhZDA1YWU3MTEzMmI2MmMyOGQ2NWJmZA==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-06-26T10:47:01Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-06-26T10:47:01Z"}, "message": "re PR middle-end/33190 (tm.texi describes some non-existing hooks)\n\n\tPR other/33190\n\t* config/mips/mips.h: Do not define ALL_COP_ADDITIONAL_REGISTER_NAMES.\n\t* config/frv/frv.h: Do not define REVERSE_CONDEXEC_PREDICATES_P.\n\t* doc/tm.texi.in: Remove documentation for unused target macros\n\tALL_COP_ADDITIONAL_REGISTER_NAMES, DBX_OUTPUT_LBRAC, DBX_OUTPUT_NFUN,\n\tDBX_OUTPUT_RBRAC, RANGE_TEST_NON_SHORT_CIRCUIT, REAL_VALUE_TRUNCATE,\n\tREVERSE_CONDEXEC_PREDICATES_P, TARGET_ALIGN_ANON_BITFIELDS, and\n\tTARGET_NARROW_VOLATILE_BITFIELDS.\n\tDocument that MD_HANDLE_UNWABI is a macro in libgcc.\n\t* doc/tm.texi: Regenerate.\n\t* system.h: Poison target macros\n\tALL_COP_ADDITIONAL_REGISTER_NAMES, DBX_OUTPUT_LBRAC, DBX_OUTPUT_NFUN,\n\tDBX_OUTPUT_RBRAC, RANGE_TEST_NON_SHORT_CIRCUIT, REAL_VALUE_TRUNCATE,\n\tREVERSE_CONDEXEC_PREDICATES_P, TARGET_ALIGN_ANON_BITFIELDS, and\n\tTARGET_NARROW_VOLATILE_BITFIELDS\n\nFrom-SVN: r188983", "tree": {"sha": "136759118b163290fa77c40a1be17d30cdb12fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/136759118b163290fa77c40a1be17d30cdb12fb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd/comments", "author": null, "committer": null, "parents": [{"sha": "3d2e04fdeeccf35f4b704c75d593ff15ae37ff74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d2e04fdeeccf35f4b704c75d593ff15ae37ff74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d2e04fdeeccf35f4b704c75d593ff15ae37ff74"}], "stats": {"total": 146, "additions": 27, "deletions": 119}, "files": [{"sha": "0c3d8cb3c936dd5f29d384cade8f8047f519a1d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd", "patch": "@@ -1,3 +1,21 @@\n+2012-06-26  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tPR other/33190\n+\t* config/mips/mips.h: Do not define ALL_COP_ADDITIONAL_REGISTER_NAMES.\n+\t* config/frv/frv.h: Do not define REVERSE_CONDEXEC_PREDICATES_P.\n+\t* doc/tm.texi.in: Remove documentation for unused target macros\n+\tALL_COP_ADDITIONAL_REGISTER_NAMES, DBX_OUTPUT_LBRAC, DBX_OUTPUT_NFUN,\n+\tDBX_OUTPUT_RBRAC, RANGE_TEST_NON_SHORT_CIRCUIT, REAL_VALUE_TRUNCATE,\n+\tREVERSE_CONDEXEC_PREDICATES_P, TARGET_ALIGN_ANON_BITFIELDS, and\n+\tTARGET_NARROW_VOLATILE_BITFIELDS.\n+\tDocument that MD_HANDLE_UNWABI is a macro in libgcc.\n+\t* doc/tm.texi: Regenerate.\n+\t* system.h: Poison target macros\n+\tALL_COP_ADDITIONAL_REGISTER_NAMES, DBX_OUTPUT_LBRAC, DBX_OUTPUT_NFUN,\n+\tDBX_OUTPUT_RBRAC, RANGE_TEST_NON_SHORT_CIRCUIT, REAL_VALUE_TRUNCATE,\n+\tREVERSE_CONDEXEC_PREDICATES_P, TARGET_ALIGN_ANON_BITFIELDS, and\n+\tTARGET_NARROW_VOLATILE_BITFIELDS\n+\n 2012-06-26  Jan Hubicka  <jh@suse.cz>\n \n \tPR lto/53572"}, {"sha": "f24479926b7739895b04b7d7ec0266bfe7070e6e", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd", "patch": "@@ -1519,9 +1519,6 @@ __asm__(\"\\n\"\t\t\t\t\t\t\t\t\\\n #define REVERSIBLE_CC_MODE(MODE) \\\n   ((MODE) == CCmode || (MODE) == CC_UNSmode || (MODE) == CC_NZmode)\n \n-/* Frv CCR_MODE's are not reversible.  */\n-#define REVERSE_CONDEXEC_PREDICATES_P(x,y)      0\n-\n \f\n /* Describing Relative Costs of Operations.  */\n "}, {"sha": "6ee6b6e0e49ab1b86f80c18e2a2fc1a996568422", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd", "patch": "@@ -2521,15 +2521,9 @@ typedef struct mips_args {\n   { \"gp\",\t28 + GP_REG_FIRST },\t\t\t\t\t\\\n   { \"sp\",\t29 + GP_REG_FIRST },\t\t\t\t\t\\\n   { \"fp\",\t30 + GP_REG_FIRST },\t\t\t\t\t\\\n-  { \"ra\",\t31 + GP_REG_FIRST },\t\t\t\t\t\\\n-  ALL_COP_ADDITIONAL_REGISTER_NAMES\t\t\t\t\t\\\n+  { \"ra\",\t31 + GP_REG_FIRST }\t\t\t\t\t\\\n }\n \n-/* This is meant to be redefined in the host dependent files.  It is a\n-   set of alternative names and regnums for mips coprocessors.  */\n-\n-#define ALL_COP_ADDITIONAL_REGISTER_NAMES\n-\n #define DBR_OUTPUT_SEQEND(STREAM)\t\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "cb0e07beb62dfbea741abbdefe43ee0b5e968e2e", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 54, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd", "patch": "@@ -3426,8 +3426,8 @@ This macro allows the target to add operating system specific code to the\n call-frame unwinder to handle the IA-64 @code{.unwabi} unwinding directive,\n usually used for signal or interrupt frames.\n \n-This macro is called from @code{uw_update_context} in @file{unwind-ia64.c}.\n-@var{context} is an @code{_Unwind_Context};\n+This macro is called from @code{uw_update_context} in libgcc's\n+@file{unwind-ia64.c}.  @var{context} is an @code{_Unwind_Context};\n @var{fs} is an @code{_Unwind_FrameState}.  Examine @code{fs->unwabi}\n for the abi and context in the @code{.unwabi} directive.  If the\n @code{.unwabi} directive can be handled, the register save addresses should\n@@ -6134,20 +6134,6 @@ There is one macro that may need to be defined for targets\n supporting conditional execution, independent of how they\n represent conditional branches.\n \n-@defmac REVERSE_CONDEXEC_PREDICATES_P (@var{op1}, @var{op2})\n-A C expression that returns true if the conditional execution predicate\n-@var{op1}, a comparison operation, is the inverse of @var{op2} and vice\n-versa.  Define this to return 0 if the target has conditional execution\n-predicates that cannot be reversed safely.  There is no need to validate\n-that the arguments of op1 and op2 are the same, this is done separately.\n-If no expansion is specified, this macro is defined as follows:\n-\n-@smallexample\n-#define REVERSE_CONDEXEC_PREDICATES_P (x, y) \\\n-   (GET_CODE ((x)) == reversed_comparison_code ((y), NULL))\n-@end smallexample\n-@end defmac\n-\n @node Costs\n @section Describing Relative Costs of Operations\n @cindex costs of instructions\n@@ -6428,12 +6414,6 @@ Define this macro if it is as good or better to call a constant\n function address than to call an address kept in a register.\n @end defmac\n \n-@defmac RANGE_TEST_NON_SHORT_CIRCUIT\n-Define this macro if a non-short-circuit operation produced by\n-@samp{fold_range_test ()} is optimal.  This macro defaults to true if\n-@code{BRANCH_COST} is greater than or equal to the value 2.\n-@end defmac\n-\n @deftypefn {Target Hook} bool TARGET_RTX_COSTS (rtx @var{x}, int @var{code}, int @var{outer_code}, int @var{opno}, int *@var{total}, bool @var{speed})\n This target hook describes the relative costs of RTL expressions.\n \n@@ -9345,22 +9325,6 @@ number for a type number.\n @c prevent bad page break with this line\n These are hooks for DBX format.\n \n-@defmac DBX_OUTPUT_LBRAC (@var{stream}, @var{name})\n-Define this macro to say how to output to @var{stream} the debugging\n-information for the start of a scope level for variable names.  The\n-argument @var{name} is the name of an assembler symbol (for use with\n-@code{assemble_name}) whose value is the address where the scope begins.\n-@end defmac\n-\n-@defmac DBX_OUTPUT_RBRAC (@var{stream}, @var{name})\n-Like @code{DBX_OUTPUT_LBRAC}, but for the end of a scope level.\n-@end defmac\n-\n-@defmac DBX_OUTPUT_NFUN (@var{stream}, @var{lscope_label}, @var{decl})\n-Define this macro if the target machine requires special handling to\n-output an @code{N_FUN} entry for the function @var{decl}.\n-@end defmac\n-\n @defmac DBX_OUTPUT_SOURCE_LINE (@var{stream}, @var{line}, @var{counter})\n A C statement to output DBX debugging information before code for line\n number @var{line} of the current source file to the stdio stream\n@@ -9684,13 +9648,6 @@ Returns the negative of the floating point value @var{x}.\n Returns the absolute value of @var{x}.\n @end deftypefn\n \n-@deftypefn Macro REAL_VALUE_TYPE REAL_VALUE_TRUNCATE (REAL_VALUE_TYPE @var{mode}, enum machine_mode @var{x})\n-Truncates the floating point value @var{x} to fit in @var{mode}.  The\n-return value is still a full-size @code{REAL_VALUE_TYPE}, but it has an\n-appropriate bit pattern to be output as a floating constant whose\n-precision accords with mode @var{mode}.\n-@end deftypefn\n-\n @deftypefn Macro void REAL_VALUE_TO_INT (HOST_WIDE_INT @var{low}, HOST_WIDE_INT @var{high}, REAL_VALUE_TYPE @var{x})\n Converts a floating point value @var{x} into a double-precision integer\n which is then stored into @var{low} and @var{high}.  If the value is not\n@@ -10058,15 +10015,6 @@ floating-point support; they are not included in this mechanism.\n There is one macro used in defining the MIPS coprocessor interface which\n you may want to override in subtargets; it is described below.\n \n-@defmac ALL_COP_ADDITIONAL_REGISTER_NAMES\n-A comma-separated list (with leading comma) of pairs describing the\n-alternate names of coprocessor registers.  The format of each entry should be\n-@smallexample\n-@{ @var{alternatename}, @var{register_number}@}\n-@end smallexample\n-Default: empty.\n-@end defmac\n-\n @node PCH Target\n @section Parameters for Precompiled Header Validity Checking\n @cindex parameters, precompiled headers"}, {"sha": "0d429d94bd1fa462c3bb878503e1e1b8d527396e", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 54, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd", "patch": "@@ -3408,8 +3408,8 @@ This macro allows the target to add operating system specific code to the\n call-frame unwinder to handle the IA-64 @code{.unwabi} unwinding directive,\n usually used for signal or interrupt frames.\n \n-This macro is called from @code{uw_update_context} in @file{unwind-ia64.c}.\n-@var{context} is an @code{_Unwind_Context};\n+This macro is called from @code{uw_update_context} in libgcc's\n+@file{unwind-ia64.c}.  @var{context} is an @code{_Unwind_Context};\n @var{fs} is an @code{_Unwind_FrameState}.  Examine @code{fs->unwabi}\n for the abi and context in the @code{.unwabi} directive.  If the\n @code{.unwabi} directive can be handled, the register save addresses should\n@@ -6062,20 +6062,6 @@ There is one macro that may need to be defined for targets\n supporting conditional execution, independent of how they\n represent conditional branches.\n \n-@defmac REVERSE_CONDEXEC_PREDICATES_P (@var{op1}, @var{op2})\n-A C expression that returns true if the conditional execution predicate\n-@var{op1}, a comparison operation, is the inverse of @var{op2} and vice\n-versa.  Define this to return 0 if the target has conditional execution\n-predicates that cannot be reversed safely.  There is no need to validate\n-that the arguments of op1 and op2 are the same, this is done separately.\n-If no expansion is specified, this macro is defined as follows:\n-\n-@smallexample\n-#define REVERSE_CONDEXEC_PREDICATES_P (x, y) \\\n-   (GET_CODE ((x)) == reversed_comparison_code ((y), NULL))\n-@end smallexample\n-@end defmac\n-\n @node Costs\n @section Describing Relative Costs of Operations\n @cindex costs of instructions\n@@ -6356,12 +6342,6 @@ Define this macro if it is as good or better to call a constant\n function address than to call an address kept in a register.\n @end defmac\n \n-@defmac RANGE_TEST_NON_SHORT_CIRCUIT\n-Define this macro if a non-short-circuit operation produced by\n-@samp{fold_range_test ()} is optimal.  This macro defaults to true if\n-@code{BRANCH_COST} is greater than or equal to the value 2.\n-@end defmac\n-\n @hook TARGET_RTX_COSTS\n This target hook describes the relative costs of RTL expressions.\n \n@@ -9240,22 +9220,6 @@ number for a type number.\n @c prevent bad page break with this line\n These are hooks for DBX format.\n \n-@defmac DBX_OUTPUT_LBRAC (@var{stream}, @var{name})\n-Define this macro to say how to output to @var{stream} the debugging\n-information for the start of a scope level for variable names.  The\n-argument @var{name} is the name of an assembler symbol (for use with\n-@code{assemble_name}) whose value is the address where the scope begins.\n-@end defmac\n-\n-@defmac DBX_OUTPUT_RBRAC (@var{stream}, @var{name})\n-Like @code{DBX_OUTPUT_LBRAC}, but for the end of a scope level.\n-@end defmac\n-\n-@defmac DBX_OUTPUT_NFUN (@var{stream}, @var{lscope_label}, @var{decl})\n-Define this macro if the target machine requires special handling to\n-output an @code{N_FUN} entry for the function @var{decl}.\n-@end defmac\n-\n @defmac DBX_OUTPUT_SOURCE_LINE (@var{stream}, @var{line}, @var{counter})\n A C statement to output DBX debugging information before code for line\n number @var{line} of the current source file to the stdio stream\n@@ -9571,13 +9535,6 @@ Returns the negative of the floating point value @var{x}.\n Returns the absolute value of @var{x}.\n @end deftypefn\n \n-@deftypefn Macro REAL_VALUE_TYPE REAL_VALUE_TRUNCATE (REAL_VALUE_TYPE @var{mode}, enum machine_mode @var{x})\n-Truncates the floating point value @var{x} to fit in @var{mode}.  The\n-return value is still a full-size @code{REAL_VALUE_TYPE}, but it has an\n-appropriate bit pattern to be output as a floating constant whose\n-precision accords with mode @var{mode}.\n-@end deftypefn\n-\n @deftypefn Macro void REAL_VALUE_TO_INT (HOST_WIDE_INT @var{low}, HOST_WIDE_INT @var{high}, REAL_VALUE_TYPE @var{x})\n Converts a floating point value @var{x} into a double-precision integer\n which is then stored into @var{low} and @var{high}.  If the value is not\n@@ -9943,15 +9900,6 @@ floating-point support; they are not included in this mechanism.\n There is one macro used in defining the MIPS coprocessor interface which\n you may want to override in subtargets; it is described below.\n \n-@defmac ALL_COP_ADDITIONAL_REGISTER_NAMES\n-A comma-separated list (with leading comma) of pairs describing the\n-alternate names of coprocessor registers.  The format of each entry should be\n-@smallexample\n-@{ @var{alternatename}, @var{register_number}@}\n-@end smallexample\n-Default: empty.\n-@end defmac\n-\n @node PCH Target\n @section Parameters for Precompiled Header Validity Checking\n @cindex parameters, precompiled headers"}, {"sha": "c59563f31df6e0362023aa0bdca5661655f8a404", "filename": "gcc/system.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=0c93ed527c5fe6fd2ad05ae71132b62c28d65bfd", "patch": "@@ -889,7 +889,10 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tPREFERRED_OUTPUT_RELOAD_CLASS SYSTEM_INCLUDE_DIR\t\t   \\\n \tSTANDARD_INCLUDE_DIR STANDARD_INCLUDE_COMPONENT\t\t\t   \\\n \tLINK_ELIMINATE_DUPLICATE_LDIRECTORIES MIPS_DEBUGGING_INFO\t   \\\n-\tIDENT_ASM_OP\n+\tIDENT_ASM_OP ALL_COP_ADDITIONAL_REGISTER_NAMES DBX_OUTPUT_LBRAC\t   \\\n+\tDBX_OUTPUT_NFUN DBX_OUTPUT_RBRAC RANGE_TEST_NON_SHORT_CIRCUIT\t   \\\n+\tREAL_VALUE_TRUNCATE REVERSE_CONDEXEC_PREDICATES_P\t\t   \\\n+\tTARGET_ALIGN_ANON_BITFIELDS TARGET_NARROW_VOLATILE_BITFIELDS\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}