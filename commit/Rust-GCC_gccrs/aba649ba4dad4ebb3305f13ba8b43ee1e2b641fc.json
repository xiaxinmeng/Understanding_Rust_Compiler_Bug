{"sha": "aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJhNjQ5YmE0ZGFkNGViYjMzMDVmMTNiYThiNDNlZTFlMmI2NDFmYw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-12-16T16:07:01Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-12-16T16:07:01Z"}, "message": "ChangeLog.1, [...]: Fix spelling errors.\n\n\t* ChangeLog.1, ChangeLog.2, ChangeLog, NEWS, call.c, class.c,\n\tcp-tree.h, decl.c, decl2.c, except.c, operators.def, optimize.c,\n\tpt.c, rtti.c, semantics.c, typeck.c: Fix spelling errors.\n\nFrom-SVN: r48072", "tree": {"sha": "a547fc5e783eef7eb0de3501b691efc4a619b428", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a547fc5e783eef7eb0de3501b691efc4a619b428"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d955c3ab799983c9d3e2afef1e8438d06e4c7fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d955c3ab799983c9d3e2afef1e8438d06e4c7fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d955c3ab799983c9d3e2afef1e8438d06e4c7fb"}], "stats": {"total": 92, "additions": 49, "deletions": 43}, "files": [{"sha": "b9488e747cf8a6cc0ee1437c4bee8329d577b0e5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "patch": "@@ -1,3 +1,9 @@\n+2001-12-16  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* ChangeLog.1, ChangeLog.2, ChangeLog, NEWS, call.c, class.c,\n+\tcp-tree.h, decl.c, decl2.c, except.c, operators.def, optimize.c,\n+\tpt.c, rtti.c, semantics.c, typeck.c: Fix spelling errors.\n+\n 2001-12-15  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* lang-options.h: Use American spelling in messages.\n@@ -1308,7 +1314,7 @@ Fri Sep 21 08:16:19 2001  J\"orn Rennecke <amylaar@redhat.com>\n 2001-07-20  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tRemove old-abi remnants. Remove comments about old abi\n-\tbehaviour. Remove refences to 'new-abi' in comments.\n+\tbehaviour. Remove references to 'new-abi' in comments.\n \t* cp-tree.h: Adjust comments.\n \t(vbase_offsets_in_vtable_p): Delete.\n \t(vcall_offsets_in_vtable_p): Delete.\n@@ -3652,7 +3658,7 @@ Sun Feb  4 15:52:44 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* decl.c (struct binding_level): Adjust class_shadowed comments\n \tto reflect reality.\n-\t(push_class_level_binding): Ajust comments to reflect reality.\n+\t(push_class_level_binding): Adjust comments to reflect reality.\n \tSet IDENTIFIER_CLASS_VALUE when replacing an existing binding.\n \tDon't set TREE_VALUE on the class_shadowed list.\n \n@@ -6406,7 +6412,7 @@ Wed Jul 26 15:05:51 CEST 2000\tMarc Espie <espie@cvs.openbsd.org>\n 2000-06-23  Kriang Lerdsuwanakij <lerdsuwa@scf.usc.edu>\n \n \t* parse.y (template_arg): Convert TEMPLATE_DECL\n-\tthat is a template template paramter to\n+\tthat is a template template parameter to\n \tTEMPLATE_TEMPLATE_PARM here.\n \n \t* cp-tree.def (TEMPLATE_TEMPLATE_PARM): Adjust comment.\n@@ -7471,10 +7477,10 @@ Sat May 27 11:25:46 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t* tinfo.h (__user_type_info::contained_virtual_p): New\n \tpredicate.\n \t* tinfo.cc (__user_type_info::do_upcast): Fix bug with diamond\n-\tshaped heirarchy.\n+\tshaped hierarchy.\n \t(__vmi_class_type_info::__do_upcast): Fix bug with NULL pointer to\n-\tdiamond shaped heirarchy. Add early out for mixed diamond and\n-\tduplicate shaped heirarchy.\n+\tdiamond shaped hierarchy. Add early out for mixed diamond and\n+\tduplicate shaped hierarchy.\n \n 2000-05-24  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -7519,7 +7525,7 @@ Mon May 15 11:46:29 2000  Donald Lindsay  <dlindsay@cygnus.com>\n \t(__si_class_type_info::__do_upcast): Adjust. Use parent's\n \t__do_upcast.\n \t(__vmi_class_type_info::__do_upcast): Likewise. Fix private\n-\tvirtual base in diamond heirarchy bug.\n+\tvirtual base in diamond hierarchy bug.\n \n 2000-05-23  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -10559,7 +10565,7 @@ Wed Jan 26 22:19:14 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \tbuild_static_cast, build_reinterpret_cast, build_const_cast,\n \tbuild_c_cast, build_modify_expr, get_delta_difference,\n \tbuild_ptrmemfunc, check_return_expr): Replace 'ANSI C++' with\n-\t'ISO C++'.  Fusion consecutive calls to diagnotic message routines\n+\t'ISO C++'.  Fusion consecutive calls to diagnostic message routines\n \tinto a single one.\n \t* typeck2.c (readonly_error, abstract_virtuals_error,\n \tprocess_init_constructor, check_for_new_type): Likewise."}, {"sha": "b411f18ef05acdd5d55228febb6377bd35e9aab3", "filename": "gcc/cp/ChangeLog.1", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2FChangeLog.1", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2FChangeLog.1", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog.1?ref=aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "patch": "@@ -2309,7 +2309,7 @@ Mon Mar  6 15:07:02 1995  Jason Merrill  <jason@phydeaux.cygnus.com>\n \tfunction.\n \n \tMake base initialization more re-entrant so that synthesis on the\n-\tfly will work (and, eventually, template instantation on the fly).\n+\tfly will work (and, eventually, template instantiation on the fly).\n \t* init.c (sort_member_init): Don't bother with members that can't be\n \tinitialized.  Reorganize a bit.  Don't initialize base members here.\n \t(sort_base_init): New function, like sort_member_init, but for base"}, {"sha": "179d6d7b13606fcb3a12525458a398ab27988540", "filename": "gcc/cp/ChangeLog.2", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2FChangeLog.2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2FChangeLog.2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog.2?ref=aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "patch": "@@ -1216,7 +1216,7 @@ Wed Oct 13 22:01:35 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n 1999-10-07  Mark Mitchell  <mark@codesourcery.com>\n \n \t* pt.c (tsubst_expr): Set DECL_TEMPLATE_INSTANTIATED for a catch\n-\tparamter.\n+\tparameter.\n \t\n \t* semantics.c (expand_stmt): Don't pretend to have asmspecs for\n \tlocal statics if we don't really have them.\n@@ -1357,7 +1357,7 @@ Wed Oct 13 22:01:35 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \t(mark_lang_function): Use mark_stmt_tree.\n \t* expr.c (cplus_expand_expr): Don't handle VEC_INIT_EXPR.\n \t* init.c (build_new_1): Remove creation of VEC_INIT_EXPR.\n-\t(build_vec_init): Remove creation of stand-in intializer.\n+\t(build_vec_init): Remove creation of stand-in initializer.\n \t* pt.c (begin_tree): Remove.\n \t(end_tree): Likewise.\n \t* semantics.c (SET_LAST_STMT): New macro.  Use it throughout.\n@@ -1463,7 +1463,7 @@ Thu Sep 30 00:13:27 1999  Dirk Zoller  <duz@rtsffm.com>\n \t(pushlevel_class): Don't push_decl_level.\n \t(poplevel_class): Don't pop_stack_level.\n \t(push_class_level_binding): Don't push_cache_obstack.\n-\t(init_decl_processing): Don't intialize decl_obstack.\n+\t(init_decl_processing): Don't initialize decl_obstack.\n \t* search.c (push_class_decls): Don't push_cache_obstack.\n \t* tree.c (list_hash_add): Put hash node on permanent_obstack.\n \t(hash_tree_cons): Don't mess with obstacks.\n@@ -2255,7 +2255,7 @@ Sun Sep 12 23:29:07 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \tif appropriate.\n \t(finish_decl_cleanup): New function.\n \t(expand_stmt): Use emit_local_var to output variables.\t\t\n-\t(expand_body): Set current_funtion_name_declared.\n+\t(expand_body): Set current_function_name_declared.\n \t\n 1999-09-10  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -4139,7 +4139,7 @@ Thu Aug  5 02:40:42 1999  Jeffrey A Law  (law@cygnus.com)\n \t(ARITHMETIC_TYPE_P): Adjust definition for standard conformance.\n \t(strip_top_quals): Declare.\n \t(ncp_convert): Likewise.\n-\t(type_after_usual_arithmetic_converions): Likewise.\n+\t(type_after_usual_arithmetic_conversions): Likewise.\n \t(composite_pointer_type): Likewise.\n \t* call.c (strip_top_quals): Don't make it static.\n \t(promoted_arithmetic_type_p): New function.\n@@ -4670,7 +4670,7 @@ Wed Jul  7 01:26:47 1999  Alexandre Oliva  <oliva@dcc.unicamp.br>\n 1999-05-25  Mark Mitchell  <mark@codesourcery.com>\n \n \t* class.c (finish_vtbls): Copy BINFO_VIRTUALs before using it to\n-\tintialize a vtable.\n+\tinitialize a vtable.\n \n \t* cp-tree.h (NAMESPACE_LEVEL): Reformat.\n \t(lang_decl_flags): Document MEMFUNC_POINTER_TO.  Save four bytes\n@@ -9673,7 +9673,7 @@ Fri Aug 14 16:42:27 1998  Nick Clifton  <nickc@cygnus.com>\n \tpush_template_decl_real instead of push_template_decl.\n \t* method.c (build_decl_overload_real): Remove prototype.  Give it\n \texternal linkage.\n-\t(build_overload_identififer): Adjust call to innermost_args.\n+\t(build_overload_identifier): Adjust call to innermost_args.\n \t(build_template_decl_overload): Remove.\n \t(set_mangled_name_for_decl): New function.\n \t* parse.y (.finish_template_type): New non-terminal."}, {"sha": "1790882cfcf54d4e3e6bc8a75f7feefde83bb590", "filename": "gcc/cp/NEWS", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2FNEWS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2FNEWS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FNEWS?ref=aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "patch": "@@ -33,7 +33,7 @@\n       void operator delete[] (void *);\n     };\n \n-  does not cause unncessary storage to be allocated when an array of\n+  does not cause unnecessary storage to be allocated when an array of\n   `A' objects is allocated.\n \n   This change will only affect code that declares both of these"}, {"sha": "bd43a404409442b953b7f1b1ae4b28357007777d", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "patch": "@@ -1125,7 +1125,7 @@ reference_binding (rto, rfrom, expr, flags)\n     {\n       /* [dcl.init.ref]\n \n-\t If the intializer expression \n+\t If the initializer expression \n \t \n \t -- is an lvalue (but not an lvalue for a bit-field), and \"cv1 T1\"\n \t    is reference-compatible with \"cv2 T2,\""}, {"sha": "b9ed718cf0d4ba7962e4b37bdf689d73696bcdcf", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "patch": "@@ -1380,9 +1380,9 @@ check_bases (t, cant_have_default_ctor_p, cant_have_const_ctor_p,\n     }\n }\n \n-/* Binfo FROM is within a virtual heirarchy which is being reseated to\n+/* Binfo FROM is within a virtual hierarchy which is being reseated to\n    TO. Move primary information from FROM to TO, and recursively traverse\n-   into FROM's bases. The heirarchy is dominated by TYPE.  MAPPINGS is an\n+   into FROM's bases. The hierarchy is dominated by TYPE.  MAPPINGS is an\n    assoc list of binfos that have already been reseated.  */\n \n static void\n@@ -1448,7 +1448,7 @@ force_canonical_binfo_r (to, from, type, mappings)\n }\n \n /* FROM is the canonical binfo for a virtual base. It is being reseated to\n-   make TO the canonical binfo, within the heirarchy dominated by TYPE.\n+   make TO the canonical binfo, within the hierarchy dominated by TYPE.\n    MAPPINGS is an assoc list of binfos that have already been reseated.\n    Adjust any non-virtual bases within FROM, and also move any virtual bases\n    which are canonical.  This complication arises because selecting primary\n@@ -6907,7 +6907,7 @@ build_vtt (t)\n }\n \n /* The type corresponding to BASE_BINFO is a base of the type of BINFO, but\n-   from within some heirarchy which is inherited from the type of BINFO.\n+   from within some hierarchy which is inherited from the type of BINFO.\n    Return BASE_BINFO's equivalent binfo from the hierarchy dominated by\n    BINFO.  */\n "}, {"sha": "d4fc1b6de0b41967bf2c96a433e10e674e68a862", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "patch": "@@ -1609,7 +1609,7 @@ struct lang_type\n \n /* Nonzero if this binfo has lost its primary base binfo (because that\n    is a nearly-empty virtual base that has been taken by some other\n-   base in the complete heirarchy.  */\n+   base in the complete hierarchy.  */\n #define BINFO_LOST_PRIMARY_P(NODE) TREE_LANG_FLAG_2 (NODE)\n \n /* Nonzero if this binfo is an indirect primary base, i.e. a virtual\n@@ -3018,7 +3018,7 @@ typedef enum instantiate_type_flags {\n   itf_ptrmem_ok = 1 << 2,     /* pointers to member ok (internal use) */\n } instantiate_type_flags;\n \n-/* The kind of checking we can do looking in a class heirarchy. */\n+/* The kind of checking we can do looking in a class hierarchy. */\n typedef enum base_access {\n   ba_any = 0,      /* Do not check access, allow an ambiguous base,\n \t\t      prefer a non-virtual base */\n@@ -3029,7 +3029,7 @@ typedef enum base_access {\n   ba_quiet = 4,    /* Do not issue error messages (bit mask).  */\n } base_access;\n \n-/* The kind of base we can find, looking in a class heirarchy.\n+/* The kind of base we can find, looking in a class hierarchy.\n    Values <0 indicate we failed. */\n typedef enum base_kind {\n   bk_inaccessible = -3,   /* The base is inaccessible */\n@@ -3090,7 +3090,7 @@ typedef enum unification_kind_t {\n   DEDUCE_ORDER\n } unification_kind_t;\n \n-/* Macros for operating on a template instantation level node, represented\n+/* Macros for operating on a template instantiation level node, represented\n    by an EXPR_WITH_FILE_LOCATION.  */\n \n #define TINST_DECL(NODE) EXPR_WFL_NODE (NODE)"}, {"sha": "f9aceaa1e3ed2d02601728c1e77f2baa757cdd36", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "patch": "@@ -7834,7 +7834,7 @@ make_rtl_for_nonlocal_decl (decl, init, asmspec)\n   defer_p = DECL_FUNCTION_SCOPE_P (decl) || DECL_VIRTUAL_P (decl);\n \n   /* We try to defer namespace-scope static constants so that they are\n-     not emitted into the object file unncessarily.  */\n+     not emitted into the object file unnecessarily.  */\n   if (!DECL_VIRTUAL_P (decl)\n       && TREE_READONLY (decl)\n       && DECL_INITIAL (decl) != NULL_TREE\n@@ -8401,7 +8401,7 @@ start_cleanup_fn ()\n   DECL_ARTIFICIAL (fndecl) = 1;\n   /* Make the function `inline' so that it is only emitted if it is\n      actually needed.  It is unlikely that it will be inlined, since\n-     it is only called via a function pointer, but we avoid unncessary\n+     it is only called via a function pointer, but we avoid unnecessary\n      emissions this way.  */\n   DECL_INLINE (fndecl) = 1;\n   /* Build the parameter.  */\n@@ -11042,7 +11042,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n       && TREE_OVERFLOW (TYPE_SIZE (type)))\n     {\n       error (\"size of array `%s' is too large\", name);\n-      /* If we proceed with the array type as it is, we'll eventully\n+      /* If we proceed with the array type as it is, we'll eventually\n \t crash in tree_low_cst().  */\n       type = error_mark_node;\n     }"}, {"sha": "10120450f2ed6978e10e3f92e6bbc09a209bf584", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "patch": "@@ -1690,7 +1690,7 @@ grokbitfield (declarator, declspecs, width)\n      check here.  */\n   if (TREE_CODE (value) == FUNCTION_DECL)\n     {\n-      cp_error (\"cannot declare bitfield `%D' with funcion type\",\n+      cp_error (\"cannot declare bitfield `%D' with function type\",\n \t\tDECL_NAME (value));\n       return NULL_TREE;\n     }"}, {"sha": "32f2458bff957168898c8108b3fc9f7277499640", "filename": "gcc/cp/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "patch": "@@ -86,7 +86,7 @@ init_exception_processing ()\n }\n \n /* Returns an expression to be executed if an unhandled exception is\n-   propogated out of a cleanup region.  */\n+   propagated out of a cleanup region.  */\n \n static tree\n cp_protect_cleanup_actions ()"}, {"sha": "775f59db05208d8aba14cdff8e690c2cea804635", "filename": "gcc/cp/operators.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Foperators.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Foperators.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foperators.def?ref=aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "patch": "@@ -29,7 +29,7 @@ Boston, MA 02111-1307, USA.  */\n    NAME\n \n      The name of the operator, as a C string, but without the\n-     preceeding `operator'.  This is the name that would be given in\n+     preceding `operator'.  This is the name that would be given in\n      the source program.  For `operator +', for example, this would be\n      `+'.\n    \n@@ -48,7 +48,7 @@ Boston, MA 02111-1307, USA.  */\n \n    OLD_MANGLING\n \n-     Analagous, but for the old ABI.\n+     Analogous, but for the old ABI.\n \n    ARITY\n    \n@@ -65,7 +65,7 @@ Boston, MA 02111-1307, USA.  */\n \n    There is code (such as in grok_op_properties) that depends on the\n    order the operators are presented in this file.  In particular,\n-   unary operators must preceed binary operators.  */\n+   unary operators must precede binary operators.  */\n  \n /* Use DEF_SIMPLE_OPERATOR to define a non-assignment operator.  Its\n    arguments are as for DEF_OPERATOR, but there is no need to provide"}, {"sha": "ac51cda4963cf6872988faa0954616e6b3fb2b32", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "patch": "@@ -194,7 +194,7 @@ maybe_clone_body (fn)\n       for (; parm;\n \t   parm = TREE_CHAIN (parm), clone_parm = TREE_CHAIN (clone_parm))\n \t{\n-\t  /* Update this paramter.  */\n+\t  /* Update this parameter.  */\n \t  update_cloned_parm (parm, clone_parm);\n \t  /* We should only give unused information for one clone. */\n \t  if (!first)"}, {"sha": "7775fcf9bf29eda24fe65d6fd35f3d679409b363", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "patch": "@@ -9622,7 +9622,7 @@ do_type_instantiation (t, storage, complain)\n \n          If CLASSTYPE_INTERFACE_ONLY, then the first explicit instantiation\n \t was `extern'.  If EXTERN_P then the second is.  If -frepo, chances\n-\t are we already got marked as an explicit instantion because of the\n+\t are we already got marked as an explicit instantiation because of the\n \t repo file.  All these cases are OK.  */\n       if (!CLASSTYPE_INTERFACE_ONLY (t) && !extern_p && !flag_use_repository\n \t  && complain)"}, {"sha": "f99f1cc615027b9375be97678450d816b7d9ab5a", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "patch": "@@ -860,7 +860,7 @@ dfs_class_hint_unmark (binfo, data)\n   return NULL_TREE;\n }\n \n-/* Determine the hint flags describing the features of a class's heirarchy.  */\n+/* Determine the hint flags describing the features of a class's hierarchy.  */\n \n static int\n class_hint_flags (type)\n@@ -1315,7 +1315,7 @@ create_tinfo_types ()\n     TYPE_HAS_CONSTRUCTOR (base_desc_type_node) = 1;\n   }\n   \n-  /* General heirarchy is created as necessary in this vector. */\n+  /* General hierarchy is created as necessary in this vector. */\n   vmi_class_desc_type_node = make_tree_vec (10);\n   \n   /* Pointer type_info. Adds two fields, qualification mask"}, {"sha": "632e91320381c3675b9c9fc355aac012f6942417", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "patch": "@@ -1116,7 +1116,7 @@ finish_mem_initializers (init_list)\n \t  /* We're running through the initializers from right to left\n \t     as we process them here.  So, if we see a data member\n \t     initializer after we see a base initializer, that\n-\t     actually means that the base initializer preceeded the\n+\t     actually means that the base initializer preceded the\n \t     data member initializer.  */\n \t  if (warn_reorder && last_base_warned_about != base_init_list)\n \t    {\n@@ -2109,7 +2109,7 @@ enter_scope_of (sr)\n /* Finish processing a BASE_CLASS with the indicated ACCESS_SPECIFIER.\n    Return a TREE_LIST containing the ACCESS_SPECIFIER and the\n    BASE_CLASS, or NULL_TREE if an error occurred.  The\n-   ACCESSS_SPECIFIER is one of\n+   ACCESS_SPECIFIER is one of\n    access_{default,public,protected_private}[_virtual]_node.*/\n \n tree \n@@ -2455,7 +2455,7 @@ expand_body (fn)\n       /* Remember this function.  In finish_file we'll decide if\n \t we actually need to write this function out.  */\n       defer_fn (fn);\n-      /* Let the back-end know that this funtion exists.  */\n+      /* Let the back-end know that this function exists.  */\n       (*debug_hooks->deferred_inline_function) (fn);\n       return;\n     }"}, {"sha": "b721faefc9cb8a3205bb15b916485fe5fedf3faa", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=aba649ba4dad4ebb3305f13ba8b43ee1e2b641fc", "patch": "@@ -324,7 +324,7 @@ original_type (t)\n }\n \n /* T1 and T2 are arithmetic or enumeration types.  Return the type\n-   that will result from the \"usual arithmetic converions\" on T1 and\n+   that will result from the \"usual arithmetic conversions\" on T1 and\n    T2 as described in [expr].  */\n \n tree\n@@ -7010,7 +7010,7 @@ casts_away_constness (t1, t2)\n        Casting from an rvalue of type \"pointer to data member of X\n        of type T1\" to the type \"pointer to data member of Y of type\n        T2\" casts away constness if a cast from an rvalue of type\n-       \"poitner to T1\" to the type \"pointer to T2\" casts away\n+       \"pointer to T1\" to the type \"pointer to T2\" casts away\n        constness.  */\n     return casts_away_constness\n       (build_pointer_type (TREE_TYPE (TREE_TYPE (t1))),"}]}