{"sha": "6f5db5f7e9cac88710d78ad6de684d9f036ac91e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY1ZGI1ZjdlOWNhYzg4NzEwZDc4YWQ2ZGU2ODRkOWYwMzZhYzkxZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-03-24T23:20:15Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-03-24T23:20:15Z"}, "message": "inclhack.def (glibc_strncpy): New fix.\n\nfixincludes:\n\t* inclhack.def (glibc_strncpy): New fix.\n\t* fixincl.x: Regenerate.\n\t* tests/base/bits/string2.h: Update.\n\ngcc/testsuite:\n\t* gcc.dg/strncpy-fix-1.c: New test.\n\nFrom-SVN: r157717", "tree": {"sha": "606a7efe5f95105e61a8c817193b4c9725cfbe39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/606a7efe5f95105e61a8c817193b4c9725cfbe39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f5db5f7e9cac88710d78ad6de684d9f036ac91e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f5db5f7e9cac88710d78ad6de684d9f036ac91e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f5db5f7e9cac88710d78ad6de684d9f036ac91e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f5db5f7e9cac88710d78ad6de684d9f036ac91e/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e599ebb7dfdbbfefe346bc5a2731746a905b643", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e599ebb7dfdbbfefe346bc5a2731746a905b643", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e599ebb7dfdbbfefe346bc5a2731746a905b643"}], "stats": {"total": 105, "additions": 99, "deletions": 6}, "files": [{"sha": "d53ca27f9bf32bf5eeb66e02e0148e07d4880494", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5db5f7e9cac88710d78ad6de684d9f036ac91e/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5db5f7e9cac88710d78ad6de684d9f036ac91e/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=6f5db5f7e9cac88710d78ad6de684d9f036ac91e", "patch": "@@ -1,3 +1,9 @@\n+2010-03-24  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* inclhack.def (glibc_strncpy): New fix.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/bits/string2.h: Update.\n+\n 2010-03-23  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/40722"}, {"sha": "395b6b49124cc91470127962ceafa1fe0d8bae10", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 51, "deletions": 6, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5db5f7e9cac88710d78ad6de684d9f036ac91e/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5db5f7e9cac88710d78ad6de684d9f036ac91e/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=6f5db5f7e9cac88710d78ad6de684d9f036ac91e", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  March 11, 2010 at 08:08:36 PM by AutoGen 5.10.1\n+ * It has been AutoGen-ed  Wednesday March 24, 2010 at 02:21:16 PM PDT\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Thu Mar 11 20:08:36 PST 2010\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Wed Mar 24 14:21:16 PDT 2010\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 205 fixup descriptions.\n+ * This file contains 206 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -2845,6 +2845,45 @@ static const char* apzGlibc_StdintPatch[] = {\n # define UINT16_C\\\\(c\\\\)\\tc ## U\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Glibc_Strncpy fix\n+ */\n+tSCC zGlibc_StrncpyName[] =\n+     \"glibc_strncpy\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zGlibc_StrncpyList[] =\n+  \"bits/string2.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzGlibc_StrncpyMachs (const char**)NULL\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zGlibc_StrncpyBypass0[] =\n+       \"__builtin_strncpy\";\n+\n+#define    GLIBC_STRNCPY_TEST_CT  1\n+static tTestDesc aGlibc_StrncpyTests[] = {\n+  { TT_NEGREP,   zGlibc_StrncpyBypass0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Glibc_Strncpy\n+ */\n+static const char* apzGlibc_StrncpyPatch[] = {\n+    \"format\",\n+    \"#  define strncpy(dest, src, n) __builtin_strncpy (dest, src, n)\",\n+    \"#  define strncpy([^\\n\\\n+]*\\\\\\\\\\n\\\n+)*[^\\n\\\n+]*\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Glibc_Tgmath fix\n@@ -6345,7 +6384,7 @@ tSCC zSolaris_Math_8List[] =\n  *  content selection pattern - do fix if pattern found\n  */\n tSCC zSolaris_Math_8Select0[] =\n-       \"@\\\\(#\\\\)math_c99.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+       \"@\\\\(#\\\\)math_c99\\\\.h[ \\t]+1\\\\.[0-9]+[ \\t]+[0-9/]+ SMI\";\n \n /*\n  *  content bypass pattern - skip fix if pattern found\n@@ -8356,9 +8395,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          245\n+#define REGEX_COUNT          246\n #define MACH_LIST_SIZE_LIMIT 181\n-#define FIX_COUNT            205\n+#define FIX_COUNT            206\n \n /*\n  *  Enumerate the fixes\n@@ -8431,6 +8470,7 @@ typedef enum {\n     GLIBC_C99_INLINE_4_FIXIDX,\n     GLIBC_MUTEX_INIT_FIXIDX,\n     GLIBC_STDINT_FIXIDX,\n+    GLIBC_STRNCPY_FIXIDX,\n     GLIBC_TGMATH_FIXIDX,\n     GNU_TYPES_FIXIDX,\n     HP_INLINE_FIXIDX,\n@@ -8907,6 +8947,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      GLIBC_STDINT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aGlibc_StdintTests,   apzGlibc_StdintPatch, 0 },\n \n+  {  zGlibc_StrncpyName,    zGlibc_StrncpyList,\n+     apzGlibc_StrncpyMachs,\n+     GLIBC_STRNCPY_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aGlibc_StrncpyTests,   apzGlibc_StrncpyPatch, 0 },\n+\n   {  zGlibc_TgmathName,    zGlibc_TgmathList,\n      apzGlibc_TgmathMachs,\n      GLIBC_TGMATH_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,"}, {"sha": "27ed40934be31a9857f3ffe3f6b2b6963085923b", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5db5f7e9cac88710d78ad6de684d9f036ac91e/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5db5f7e9cac88710d78ad6de684d9f036ac91e/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=6f5db5f7e9cac88710d78ad6de684d9f036ac91e", "patch": "@@ -1598,6 +1598,28 @@ fix = {\n };\n \n \n+/* Some versions of glibc have a version of bits/string2.h that\n+   produces \"value computed is not used\" warnings from strncpy; fix\n+   this definition by using __builtin_strncpy instead as in newer\n+   versions.  */\n+fix = {\n+    hackname  = glibc_strncpy;\n+    files     = bits/string2.h;\n+    bypass    = \"__builtin_strncpy\";\n+    c_fix     = format;\n+    c_fix_arg = \"#  define strncpy(dest, src, n) __builtin_strncpy (dest, src, n)\";\n+    c_fix_arg = \"#  define strncpy([^\\n]*\\\\\\\\\\n)*[^\\n]*\";\n+    test_text = <<-EOT\n+\t#  define strncpy(dest, src, n) \\\n+\t  (__extension__ (__builtin_constant_p (src) && __builtin_constant_p (n)      \\\\\n+\t\t\t  ? (strlen (src) + 1 >= ((size_t) (n))\t\t\t      \\\\\n+\t\t\t     ? (char *) memcpy (dest, src, n)\t\t\t      \\\\\n+\t\t\t     : strncpy (dest, src, n))\t\t\t\t      \\\\\n+\t\t\t  : strncpy (dest, src, n)))\n+\tEOT;\n+\n+};\n+\n /* glibc's tgmath.h relies on an expression that is not an integer\n    constant expression being treated as it was by GCC 4.4 and\n    earlier.  */"}, {"sha": "be6fe601a6b0095d9982ae2c9d20597342b74495", "filename": "fixincludes/tests/base/bits/string2.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5db5f7e9cac88710d78ad6de684d9f036ac91e/fixincludes%2Ftests%2Fbase%2Fbits%2Fstring2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5db5f7e9cac88710d78ad6de684d9f036ac91e/fixincludes%2Ftests%2Fbase%2Fbits%2Fstring2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fbits%2Fstring2.h?ref=6f5db5f7e9cac88710d78ad6de684d9f036ac91e", "patch": "@@ -16,3 +16,8 @@\n #  define __STRING_INLINE extern __inline\n # endif\n #endif  /* GLIBC_C99_INLINE_3_CHECK */\n+\n+\n+#if defined( GLIBC_STRNCPY_CHECK )\n+#  define strncpy(dest, src, n) __builtin_strncpy (dest, src, n)\n+#endif  /* GLIBC_STRNCPY_CHECK */"}, {"sha": "6d629156688cb9bb105994b14679a23e9c5f33bb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5db5f7e9cac88710d78ad6de684d9f036ac91e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5db5f7e9cac88710d78ad6de684d9f036ac91e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6f5db5f7e9cac88710d78ad6de684d9f036ac91e", "patch": "@@ -1,3 +1,7 @@\n+2010-03-24  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/strncpy-fix-1.c: New test.\n+\n 2010-03-24  Iain Sandoe  <iain.sandoe@sandoe-acoustics.co.uk>\n \n \tPR testsuite/41609"}, {"sha": "b8bc916e00896f74e544c1bb5ad0f046b9993cf5", "filename": "gcc/testsuite/gcc.dg/strncpy-fix-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f5db5f7e9cac88710d78ad6de684d9f036ac91e/gcc%2Ftestsuite%2Fgcc.dg%2Fstrncpy-fix-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f5db5f7e9cac88710d78ad6de684d9f036ac91e/gcc%2Ftestsuite%2Fgcc.dg%2Fstrncpy-fix-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrncpy-fix-1.c?ref=6f5db5f7e9cac88710d78ad6de684d9f036ac91e", "patch": "@@ -0,0 +1,11 @@\n+/* Test that use of strncpy does not result in a \"value computed is\n+   not used\" warning.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall\" } */\n+\n+#include <string.h>\n+void\n+f (char *s)\n+{\n+  strncpy (s, \"::\", 2);\n+}"}]}