{"sha": "0033df1a52615529f567a5a89d40ff97b5650136", "node_id": "C_kwDOANBUbNoAKDAwMzNkZjFhNTI2MTU1MjlmNTY3YTVhODlkNDBmZjk3YjU2NTAxMzY", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-24T14:30:15Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-24T14:30:15Z"}, "message": "Refactor ArrayIndexExpr typechecking into cc impl file", "tree": {"sha": "7399f82ab585829e2ab28f0237afc066dfb89663", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7399f82ab585829e2ab28f0237afc066dfb89663"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0033df1a52615529f567a5a89d40ff97b5650136", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0033df1a52615529f567a5a89d40ff97b5650136", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0033df1a52615529f567a5a89d40ff97b5650136", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0033df1a52615529f567a5a89d40ff97b5650136/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "833c439a501a02c6c3c5b34f8e4c84706e8b62f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/833c439a501a02c6c3c5b34f8e4c84706e8b62f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/833c439a501a02c6c3c5b34f8e4c84706e8b62f2"}], "stats": {"total": 94, "additions": 48, "deletions": 46}, "files": [{"sha": "bd05c285f75f560fbdbefc2a273368b332bb5629", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0033df1a52615529f567a5a89d40ff97b5650136/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0033df1a52615529f567a5a89d40ff97b5650136/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=0033df1a52615529f567a5a89d40ff97b5650136", "patch": "@@ -242,5 +242,52 @@ TypeCheckExpr::visit (HIR::RangeFromToInclExpr &expr)\n   infered = SubstMapperInternal::Resolve (adt, subst);\n }\n \n+void\n+TypeCheckExpr::visit (HIR::ArrayIndexExpr &expr)\n+{\n+  TyTy::BaseType *size_ty;\n+  if (!context->lookup_builtin (\"usize\", &size_ty))\n+    {\n+      rust_error_at (\n+\texpr.get_locus (),\n+\t\"Failure looking up size type for index in ArrayIndexExpr\");\n+      return;\n+    }\n+\n+  auto resolved_index_expr\n+    = size_ty->unify (TypeCheckExpr::Resolve (expr.get_index_expr (), false));\n+  if (resolved_index_expr->get_kind () != TyTy::TypeKind::ERROR)\n+    {\n+      // allow the index expr to fail lets just continue on\n+      context->insert_type (expr.get_index_expr ()->get_mappings (),\n+\t\t\t    resolved_index_expr);\n+    }\n+\n+  auto array_expr_ty\n+    = TypeCheckExpr::Resolve (expr.get_array_expr (), inside_loop);\n+  if (array_expr_ty->get_kind () == TyTy::TypeKind::ERROR)\n+    return;\n+  else if (array_expr_ty->get_kind () == TyTy::TypeKind::REF)\n+    {\n+      // lets try and deref it since rust allows this\n+      auto ref = static_cast<TyTy::ReferenceType *> (array_expr_ty);\n+      auto base = ref->get_base ();\n+      if (base->get_kind () == TyTy::TypeKind::ARRAY)\n+\tarray_expr_ty = base;\n+    }\n+\n+  if (array_expr_ty->get_kind () != TyTy::TypeKind::ARRAY)\n+    {\n+      rust_error_at (expr.get_index_expr ()->get_locus (),\n+\t\t     \"expected an ArrayType got [%s]\",\n+\t\t     infered->as_string ().c_str ());\n+      infered = nullptr;\n+      return;\n+    }\n+\n+  TyTy::ArrayType *array_type = static_cast<TyTy::ArrayType *> (array_expr_ty);\n+  infered = array_type->get_element_type ()->clone ();\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "5b96854f5c87578e27869fb2c2dab3caf18424d5", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 1, "deletions": 46, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0033df1a52615529f567a5a89d40ff97b5650136/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0033df1a52615529f567a5a89d40ff97b5650136/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=0033df1a52615529f567a5a89d40ff97b5650136", "patch": "@@ -879,52 +879,7 @@ class TypeCheckExpr : public TypeCheckBase\n       = TypeCheckExpr::Resolve (expr.get_block_expr ().get (), inside_loop);\n   }\n \n-  void visit (HIR::ArrayIndexExpr &expr) override\n-  {\n-    TyTy::BaseType *size_ty;\n-    if (!context->lookup_builtin (\"usize\", &size_ty))\n-      {\n-\trust_error_at (\n-\t  expr.get_locus (),\n-\t  \"Failure looking up size type for index in ArrayIndexExpr\");\n-\treturn;\n-      }\n-\n-    auto resolved_index_expr\n-      = size_ty->unify (TypeCheckExpr::Resolve (expr.get_index_expr (), false));\n-    if (resolved_index_expr->get_kind () != TyTy::TypeKind::ERROR)\n-      {\n-\t// allow the index expr to fail lets just continue on\n-\tcontext->insert_type (expr.get_index_expr ()->get_mappings (),\n-\t\t\t      resolved_index_expr);\n-      }\n-\n-    auto array_expr_ty\n-      = TypeCheckExpr::Resolve (expr.get_array_expr (), inside_loop);\n-    if (array_expr_ty->get_kind () == TyTy::TypeKind::ERROR)\n-      return;\n-    else if (array_expr_ty->get_kind () == TyTy::TypeKind::REF)\n-      {\n-\t// lets try and deref it since rust allows this\n-\tauto ref = static_cast<TyTy::ReferenceType *> (array_expr_ty);\n-\tauto base = ref->get_base ();\n-\tif (base->get_kind () == TyTy::TypeKind::ARRAY)\n-\t  array_expr_ty = base;\n-      }\n-\n-    if (array_expr_ty->get_kind () != TyTy::TypeKind::ARRAY)\n-      {\n-\trust_error_at (expr.get_index_expr ()->get_locus (),\n-\t\t       \"expected an ArrayType got [%s]\",\n-\t\t       infered->as_string ().c_str ());\n-\tinfered = nullptr;\n-\treturn;\n-      }\n-\n-    TyTy::ArrayType *array_type\n-      = static_cast<TyTy::ArrayType *> (array_expr_ty);\n-    infered = array_type->get_element_type ()->clone ();\n-  }\n+  void visit (HIR::ArrayIndexExpr &expr) override;\n \n   void visit (HIR::ArrayExpr &expr) override\n   {"}]}