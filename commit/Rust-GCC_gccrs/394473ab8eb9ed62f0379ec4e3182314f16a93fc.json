{"sha": "394473ab8eb9ed62f0379ec4e3182314f16a93fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk0NDczYWI4ZWI5ZWQ2MmYwMzc5ZWM0ZTMxODIzMTRmMTZhOTNmYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-07-05T09:55:43Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-07-05T09:55:43Z"}, "message": "pt.c (tsubst): Early declare code = TREE_CODE (t) and use it throughout.\n\n2010-07-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* pt.c (tsubst): Early declare code = TREE_CODE (t) and use it\n\tthroughout.\n\nFrom-SVN: r161825", "tree": {"sha": "34d00704a3b3155d968fa6420e9009891925a902", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34d00704a3b3155d968fa6420e9009891925a902"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/394473ab8eb9ed62f0379ec4e3182314f16a93fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394473ab8eb9ed62f0379ec4e3182314f16a93fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/394473ab8eb9ed62f0379ec4e3182314f16a93fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394473ab8eb9ed62f0379ec4e3182314f16a93fc/comments", "author": null, "committer": null, "parents": [{"sha": "e4dde839da2f1c485551f6dfd6e9a3c43ede50d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4dde839da2f1c485551f6dfd6e9a3c43ede50d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4dde839da2f1c485551f6dfd6e9a3c43ede50d6"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "479020890be3ea3376dc918ca87a2fcff66153f8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394473ab8eb9ed62f0379ec4e3182314f16a93fc/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394473ab8eb9ed62f0379ec4e3182314f16a93fc/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=394473ab8eb9ed62f0379ec4e3182314f16a93fc", "patch": "@@ -1,8 +1,13 @@\n+2010-07-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* pt.c (tsubst): Early declare code = TREE_CODE (t) and use it\n+\tthroughout.\n+\n 2010-07-05  Shujing Zhao  <pearly.zhao@oracle.com>\n \n-\t PR c++/22138\n-\t * parser.c (cp_parser_primary_expression): Error if local template is\n-\t declared.\n+\tPR c++/22138\n+\t* parser.c (cp_parser_primary_expression): Error if local template is\n+\tdeclared.\n \n 2010-07-02  Le-Chun Wu  <lcwu@google.com>\n "}, {"sha": "f542b2133a75d7d5eeed008e3aaceb18462eaf6a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394473ab8eb9ed62f0379ec4e3182314f16a93fc/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394473ab8eb9ed62f0379ec4e3182314f16a93fc/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=394473ab8eb9ed62f0379ec4e3182314f16a93fc", "patch": "@@ -9958,6 +9958,7 @@ tsubst_exception_specification (tree fntype,\n tree\n tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n {\n+  enum tree_code code;\n   tree type, r;\n \n   if (t == NULL_TREE || t == error_mark_node\n@@ -9974,7 +9975,9 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n   if (args == NULL_TREE)\n     return t;\n \n-  if (TREE_CODE (t) == IDENTIFIER_NODE)\n+  code = TREE_CODE (t);\n+\n+  if (code == IDENTIFIER_NODE)\n     type = IDENTIFIER_TYPE_VALUE (t);\n   else\n     type = TREE_TYPE (t);\n@@ -10017,16 +10020,16 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n     }\n \n   if (type\n-      && TREE_CODE (t) != TYPENAME_TYPE\n-      && TREE_CODE (t) != TEMPLATE_TYPE_PARM\n-      && TREE_CODE (t) != IDENTIFIER_NODE\n-      && TREE_CODE (t) != FUNCTION_TYPE\n-      && TREE_CODE (t) != METHOD_TYPE)\n+      && code != TYPENAME_TYPE\n+      && code != TEMPLATE_TYPE_PARM\n+      && code != IDENTIFIER_NODE\n+      && code != FUNCTION_TYPE\n+      && code != METHOD_TYPE)\n     type = tsubst (type, args, complain, in_decl);\n   if (type == error_mark_node)\n     return error_mark_node;\n \n-  switch (TREE_CODE (t))\n+  switch (code)\n     {\n     case RECORD_TYPE:\n     case UNION_TYPE:\n@@ -10156,7 +10159,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n                  };  */\n \t      return t;\n \n-\t    if (TREE_CODE (t) == TEMPLATE_TYPE_PARM)\n+\t    if (code == TEMPLATE_TYPE_PARM)\n \t      {\n \t\tint quals;\n \t\tgcc_assert (TYPE_P (arg));\n@@ -10166,7 +10169,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\treturn cp_build_qualified_type_real\n \t\t  (arg, quals, complain | tf_ignore_bad_quals);\n \t      }\n-\t    else if (TREE_CODE (t) == BOUND_TEMPLATE_TEMPLATE_PARM)\n+\t    else if (code == BOUND_TEMPLATE_TEMPLATE_PARM)\n \t      {\n \t\t/* We are processing a type constructed from a\n \t\t   template template parameter.  */\n@@ -10205,7 +10208,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t/* If we get here, we must have been looking at a parm for a\n \t   more deeply nested template.  Make a new version of this\n \t   template parameter, but with a lower level.  */\n-\tswitch (TREE_CODE (t))\n+\tswitch (code)\n \t  {\n \t  case TEMPLATE_TYPE_PARM:\n \t  case TEMPLATE_TEMPLATE_PARM:\n@@ -10215,7 +10218,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\tr = tsubst (TYPE_MAIN_VARIANT (t), args, complain, in_decl);\n \t\tr = cp_build_qualified_type_real\n \t\t  (r, cp_type_quals (t),\n-\t\t   complain | (TREE_CODE (t) == TEMPLATE_TYPE_PARM\n+\t\t   complain | (code == TEMPLATE_TYPE_PARM\n \t\t\t       ? tf_ignore_bad_quals : 0));\n \t      }\n \t    else\n@@ -10243,7 +10246,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\telse\n \t\t  TYPE_CANONICAL (r) = canonical_type_parameter (r);\n \n-\t\tif (TREE_CODE (t) == BOUND_TEMPLATE_TEMPLATE_PARM)\n+\t\tif (code == BOUND_TEMPLATE_TEMPLATE_PARM)\n \t\t  {\n \t\t    tree argvec = tsubst (TYPE_TI_ARGS (t), args,\n \t\t\t\t\t  complain, in_decl);\n@@ -10314,14 +10317,9 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n       {\n-\tenum tree_code code;\n-\n \tif (type == TREE_TYPE (t) && TREE_CODE (type) != METHOD_TYPE)\n \t  return t;\n \n-\tcode = TREE_CODE (t);\n-\n-\n \t/* [temp.deduct]\n \n \t   Type deduction may fail for any of the following\n@@ -10506,7 +10504,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  return error_mark_node;\n \n \treturn fold_build2_loc (input_location,\n-\t\t\t    TREE_CODE (t), TREE_TYPE (t), e1, e2);\n+\t\t\t\tcode, TREE_TYPE (t), e1, e2);\n       }\n \n     case NEGATE_EXPR:\n@@ -10516,7 +10514,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \tif (e == error_mark_node)\n \t  return error_mark_node;\n \n-\treturn fold_build1_loc (input_location, TREE_CODE (t), TREE_TYPE (t), e);\n+\treturn fold_build1_loc (input_location, code, TREE_TYPE (t), e);\n       }\n \n     case TYPENAME_TYPE:\n@@ -10672,9 +10670,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n     case TYPE_ARGUMENT_PACK:\n     case NONTYPE_ARGUMENT_PACK:\n       {\n-        tree r = TYPE_P (t)\n-          ? cxx_make_type (TREE_CODE (t))\n-          : make_node (TREE_CODE (t));\n+        tree r = TYPE_P (t) ? cxx_make_type (code) : make_node (code);\n         tree packed_out = \n           tsubst_template_args (ARGUMENT_PACK_ARGS (t), \n                                 args,\n@@ -10684,16 +10680,15 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \n         /* For template nontype argument packs, also substitute into\n            the type.  */\n-        if (TREE_CODE (t) == NONTYPE_ARGUMENT_PACK)\n+        if (code == NONTYPE_ARGUMENT_PACK)\n           TREE_TYPE (r) = tsubst (TREE_TYPE (t), args, complain, in_decl);\n \n         return r;\n       }\n       break;\n \n     default:\n-      sorry (\"use of %qs in template\",\n-\t     tree_code_name [(int) TREE_CODE (t)]);\n+      sorry (\"use of %qs in template\", tree_code_name [(int) code]);\n       return error_mark_node;\n     }\n }"}]}