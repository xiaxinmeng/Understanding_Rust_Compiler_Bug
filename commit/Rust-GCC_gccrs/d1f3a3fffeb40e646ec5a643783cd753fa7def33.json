{"sha": "d1f3a3fffeb40e646ec5a643783cd753fa7def33", "node_id": "C_kwDOANBUbNoAKGQxZjNhM2ZmZmViNDBlNjQ2ZWM1YTY0Mzc4M2NkNzUzZmE3ZGVmMzM", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-06T00:16:33Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-07-06T00:16:33Z"}, "message": "Daily bump.", "tree": {"sha": "1fe841bff46f80529b53bbceb4f6b36e19ae8a20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fe841bff46f80529b53bbceb4f6b36e19ae8a20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1f3a3fffeb40e646ec5a643783cd753fa7def33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f3a3fffeb40e646ec5a643783cd753fa7def33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1f3a3fffeb40e646ec5a643783cd753fa7def33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1f3a3fffeb40e646ec5a643783cd753fa7def33/comments", "author": null, "committer": null, "parents": [{"sha": "c70a48a8f8f6a43b35f783b5672c9a3c0a363c31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c70a48a8f8f6a43b35f783b5672c9a3c0a363c31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c70a48a8f8f6a43b35f783b5672c9a3c0a363c31"}], "stats": {"total": 452, "additions": 451, "deletions": 1}, "files": [{"sha": "4267279b60f5287ba9a853105dd32f19ab82b769", "filename": "gcc/ChangeLog", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f3a3fffeb40e646ec5a643783cd753fa7def33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f3a3fffeb40e646ec5a643783cd753fa7def33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d1f3a3fffeb40e646ec5a643783cd753fa7def33", "patch": "@@ -1,3 +1,96 @@\n+2022-07-05  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* value-relation.cc (relation_to_code): New vector.\n+\t(relation_oracle::validate_relation): New.\n+\t(set_relation): Allow ssa1 == ssa2 to be registered.\n+\t* value-relation.h (validate_relation): New prototype.\n+\t(query_relation): Make internal variant protected.\n+\n+2022-07-05  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/i386/i386.cc (ix86_rtx_costs) <COMPARE>: Provide costs\n+\tfor double word comparisons and tests (comparisons against zero).\n+\t* config/i386/i386.md (*test<mode>_not_doubleword): Split DWI\n+\tand;cmp into andn;cmp $0 as a pre-reload splitter.\n+\t(*andn<dwi>3_doubleword_bmi): Use <dwi> instead of <mode> in name.\n+\t(*<any_or><dwi>3_doubleword): Likewise.\n+\n+2022-07-05  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\t* config/i386/i386-builtin.def (__builtin_ia32_palignr128): Change\n+\tCODE_FOR_ssse3_palignrti to CODE_FOR_ssse3_palignrv1ti.\n+\t* config/i386/i386-expand.cc (expand_vec_perm_palignr): Use V1TImode\n+\tand gen_ssse3_palignv1ti instead of TImode.\n+\t* config/i386/sse.md (SSESCALARMODE): Delete.\n+\t(define_mode_attr ssse3_avx2): Handle V1TImode instead of TImode.\n+\t(<ssse3_avx2>_palignr<mode>): Use VIMAX_AVX2_AVX512BW as a mode\n+\titerator instead of SSESCALARMODE.\n+\t(ssse3_palignrdi): Optimize cases where operands[3] is 0 or 64,\n+\tusing a single move instruction (if required).\n+\n+2022-07-05  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR rtl-optimization/96692\n+\t* config/i386/i386.md (define_split): Split ((A | B) ^ C) ^ D\n+\tas (X & ~Y) ^ Z on target BMI when either C or D is A or B.\n+\n+2022-07-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106198\n+\t* tree-cfgcleanup.cc (repair_loop_structures): Always do a\n+\tfull LC SSA rewrite but only if any blocks changed loop\n+\tdepth.\n+\n+2022-07-05  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-loop-manip.cc (find_uses_to_rename_def): Remove.\n+\t(find_uses_to_rename_in_loop): Likewise.\n+\t(rewrite_into_loop_closed_ssa_1): Remove loop parameter and\n+\tuses.\n+\t(rewrite_into_loop_closed_ssa): Adjust.\n+\n+2022-07-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106186\n+\t* tree-ssa-propagate.cc (clean_up_loop_closed_phi):\n+\tProperly handle virtual PHI nodes.\n+\n+2022-07-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106196\n+\t* tree-vect-stmts.cc (vect_finish_stmt_generation): Properly\n+\thandle aggregate returns of calls for VDEF updates.\n+\n+2022-07-05  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop-manip.cc (vect_set_loop_condition_normal):\n+\tMaintain LC SSA.\n+\n+2022-07-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vect-patterns.cc (vect_convert_input): Expect the input\n+\ttype to be signed for optab_vector_mixed_sign.  Update the vectype\n+\tat the same time as type.\n+\t(vect_recog_dot_prod_pattern): Update accordingly.  If usdot isn't\n+\tavailable, try sdot instead.\n+\t* tree-vect-loop.cc (vect_is_emulated_mixed_dot_prod): New function.\n+\t(vect_model_reduction_cost): Model the cost of implementing usdot\n+\tusing sdot.\n+\t(vectorizable_reduction): Likewise.  Skip target support test\n+\tfor lane reductions.\n+\t(vect_emulate_mixed_dot_prod): New function.\n+\t(vect_transform_reduction): Use it to emulate usdot via sdot.\n+\n+2022-07-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106182\n+\t* loop-init.cc (fix_loop_structure): Return the number\n+\tof newly discovered plus the number of deleted loops.\n+\t* tree-cfgcleanup.cc (repair_loop_structures): Adjust\n+\tvariable name.\n+\n 2022-07-04  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* gimple-range-fold.cc"}, {"sha": "ebfebbb18422ace280be4964b543eef8f651ac7d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f3a3fffeb40e646ec5a643783cd753fa7def33/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f3a3fffeb40e646ec5a643783cd753fa7def33/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=d1f3a3fffeb40e646ec5a643783cd753fa7def33", "patch": "@@ -1 +1 @@\n-20220705\n+20220706"}, {"sha": "3b6906482f080b8bc1675689597119f93972a0d3", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 242, "deletions": 0, "changes": 242, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f3a3fffeb40e646ec5a643783cd753fa7def33/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f3a3fffeb40e646ec5a643783cd753fa7def33/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d1f3a3fffeb40e646ec5a643783cd753fa7def33", "patch": "@@ -1,3 +1,245 @@\n+2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst\n+\t(Warning Message Control): Update description of switch -gnatwj.\n+\t* gnat_ugn.texi: Regenerate.\n+\t* sem_ch10.adb (Analyze_With_Clause): Warn on WITH clauses for\n+\tobsolete renamed units; in Ada 83 mode do not consider\n+\tpredefined renamings to be obsolete.\n+\n+2022-07-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_util.adb (Make_Subtype_From_Expr): Do not set field to Empty.\n+\t* sem_util.adb (Visit_Itype): Remove ??? comment.\n+\n+2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Note_Possible_Modification): Revert a\n+\tspecial-case for validity checks on Long_Float type.\n+\t* snames.ads-tmpl (Name_Attr_Long_Float): Remove name added\n+\texclusively for the mentioned fix.\n+\n+2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch6.adb (Set_Formal_Mode): Remove unnecessary setting of\n+\tNever_Set_In_Source.\n+\n+2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch6.adb (Process_Formals): Avoid repeated calls to\n+\tExpression.\n+\n+2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_code.adb (Setup_Asm_IO_Args): Remove guard against No_List.\n+\t* par_sco.adb (Process_Decisions): Likewise.\n+\t* sem_ch13.adb (Check_Component_List): Likewise.\n+\t* sem_ch6.adb (FCL): Likewise.\n+\n+2022-07-05  Doug Rupp  <rupp@adacore.com>\n+\n+\t* cstreams.c (__gnat_full_name) [QNX]: Remove block.\n+\n+2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* osint.adb (Locate_File): Use Name_Find with a parameter and\n+\tnot with a global buffer.\n+\n+2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Init_Statements): Reuse Get_Pragma_Arg.\n+\t* exp_prag.adb (Arg_N): Likewise.\n+\n+2022-07-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* ghost.adb (Is_OK_Ghost_Context): Detect ghost type inside object\n+\trenaming.\n+\n+2022-07-05  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_ch7.adb: Change two constants Is_Protected_Body and\n+\tIs_Prot_Body to be Is_Protected_Subp_Body; these are not true\n+\tfor protected bodies, but for protected subprogram bodies.\n+\t(Expand_Cleanup_Actions): No need to search for\n+\tActivation_Chain_Entity; just use Activation_Chain_Entity.\n+\t* sem_ch8.adb (Find_Direct_Name): Use Entyp constant.\n+\t* atree.adb, atree.ads, atree.h, nlists.adb, nlists.ads\n+\t(Parent): Provide nonoverloaded versions of Parent, so that they\n+\tcan be easily found in the debugger.\n+\t* debug_a.adb, debug_a.ads: Clarify that we're talking about the\n+\t-gnatda switch; switches are case sensitive.  Print out the\n+\tChars field if appropriate, which makes it easier to find things\n+\tin the output.\n+\t(Debug_Output_Astring): Simplify. Also fix an off-by-one\n+\tbug (\"for I in Vbars'Length ..\" should have been \"for I in\n+\tVbars'Length + 1 ..\").  Before, it was printing Debug_A_Depth +\n+\t1 '|' characters if Debug_A_Depth > Vbars'Length.\n+\n+2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma): Remove unnecessary call to\n+\tAnalyze.\n+\n+2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* libgnat/g-socket.adb (Raise_Host_Error): Add No_Return aspect.\n+\t(Raise_GAI_Error): Likewise.\n+\t* libgnat/g-socket.ads (Raise_Socket_Error): Likewise.\n+\n+2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.adb (Aggregate_Constraint_Checks): Fix whitespace;\n+\trefactor repeated code; replace a ??? comment with an\n+\texplanation based on the comment for the routine spec.\n+\n+2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_util.ads (Note_Possible_Modification): Fix occurrence of\n+\tMay_Be_Modified in comment.\n+\t* sem_warn.ads (Check_Unset_Reference): Fix occurrence of\n+\tNot_Assigned in comment.\n+\n+2022-07-05  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Take into account the\n+\tpossibility of homonyms.\n+\n+2022-07-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Rewrite as a renaming\n+\tfor any nonaliased local object with nominal unconstrained subtype\n+\toriginally initialized with the result of a function call that has\n+\tbeen rewritten as the dereference of a reference to the result.\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Do not do it here\n+\n+2022-07-05  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_imgv.adb (Build_Enumeration_Image_Tables): Also disable\n+\tperfect hash in GNAT_Mode.\n+\t* raise-gcc.c (__gnat_Unwind_RaiseException): Add support for\n+\tdisabling exception propagation.\n+\t* sem_eval.adb (Compile_Time_Known_Value): Update comment and\n+\tremove wrong call to Check_Error_Detected.\n+\t* sem_prag.adb (Check_Loop_Pragma_Grouping, Analyze_Pragma):\n+\tRemove exception propagation during bootstrap.\n+\n+2022-07-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_aggr.adb (Expand_Array_Aggregate): Remove obsolete code.\n+\tDelay the expansion of aggregates initializing return objects of\n+\tbuild-in-place functions.\n+\t* exp_ch3.ads (Ensure_Activation_Chain_And_Master): Delete.\n+\t* exp_ch3.adb (Ensure_Activation_Chain_And_Master): Fold back to...\n+\t(Expand_N_Object_Declaration): ...here.\n+\tPerform the expansion of return objects of build-in-place functions\n+\there instead of...\n+\t* exp_ch6.ads (Is_Build_In_Place_Return_Object): Declare.\n+\t* exp_ch6.adb (Expand_N_Extended_Return_Statement): ...here.\n+\t(Is_Build_In_Place_Result_Type): Alphabetize.\n+\t(Is_Build_In_Place_Return_Object): New predicate.\n+\t* exp_ch7.adb (Enclosing_Function): Delete.\n+\t(Process_Object_Declaration): Tidy up handling of return objects.\n+\t* sem_ch3.adb (Analyze_Object_Declaration): Do not decorate and\n+\tfreeze the actual type if it is the same as the nominal type.\n+\t* sem_ch6.adb: Remove use and with clauses for Exp_Ch3.\n+\t(Analyze_Function_Return): Analyze again all return objects.\n+\t(Create_Extra_Formals): Do not force the definition of an Itype\n+\tif the subprogram is a compilation unit.\n+\n+2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* gnatls.adb (Corresponding_Sdep_Entry): Remove dead return\n+\tstatement in defensive path; there is another return statement\n+\tfor a normal execution of this routine, so rule Ada RM 6.5(5),\n+\twhich requires function to have at least one return statement is\n+\tstill satisfied.\n+\t(Gnatls): Remove dead, call to nonreturning Exit_Program after\n+\tOutput_License_Information which itself does not return.\n+\t* libgnat/a-exstat.adb (Bad_EO): Remove raise statement that was\n+\tmeant to please some ancient version of GNAT.\n+\t* libgnat/g-awk.adb (Raise_With_Info): Likewise.\n+\t* sem_attr.adb (Check_Reference): Remove dead return statement;\n+\trule Ada RM 6.5(5), which requires function to have at least one\n+\treturn statement is still satisfied.\n+\t(Analyze_Attribute): Remove dead exit statement.\n+\t(Check_Reference): Same as above.\n+\t* sem_ch12.adb (Instantiate_Formal_Package): Remove dead raise\n+\tstatement; it was inconsistent with other calls to\n+\tAbandon_Instantiation, which are not followed by a raise\n+\tstatement.\n+\t* sem_prag.adb (Process_Convention): Remove dead defensive\n+\tassignment.\n+\t(Interrupt_State): Remove dead defensive exit statement.\n+\t(Do_SPARK_Mode): Likewise.\n+\t* sfn_scan.adb (Scan_String): Remove dead defensive assignment.\n+\n+2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb, sem_prag.adb: Remove dead return statements\n+\tafter calls to Error_Attr, Error_Pragma, Error_Pragma_Arg and\n+\tPlacement_Error. All these calls raise exceptions that are\n+\thandled to gently recover from errors.\n+\n+2022-07-05  Doug Rupp  <rupp@adacore.com>\n+\n+\t* libgnat/system-vxworks-ppc-kernel.ads (Word_Size): Compute\n+\tbased on Standard'Word_Size.\n+\t(Memory_Size): Compute based on Word_Size.\n+\t* libgnat/system-vxworks-ppc-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks-ppc-rtp.ads: Likewise.\n+\n+2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Move call to\n+\tSet_Address_Taken so that it is executed when the prefix\n+\tattribute is legal.\n+\n+2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch5.adb (Check_Unreachable_Code): Avoid explicit use of\n+\tSloc; this should also help when we finally use Source_Span for\n+\tprettier error messages.\n+\n+2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch5.adb (Check_Unreachable_Code): Remove redundant guard;\n+\tthe call to Present wasn't needed either.\n+\n+2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch5.adb (Analyze_Block_Statement): Call to List_Length with\n+\tNo_List is safe and will return zero.\n+\n+2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Missing_Return): Add reference to an RM rule.\n+\n+2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch6.adb (Check_Missing_Return): Remove outdated comment.\n+\n+2022-07-05  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* adaint.h (convert_addresses): Remove function declaration.\n+\n+2022-07-05  Doug Rupp  <rupp@adacore.com>\n+\n+\t* Makefile.rtl (*vxworks*): Remove most pre-vxworks7 code.\n+\t* vxworks-arm-link.spec: Remove.\n+\t* vxworks-e500-link.spec: Likewise.\n+\t* vxworks-smp-arm-link.spec: Likewise.\n+\t* vxworks-smp-e500-link.spec: Likewise.\n+\t* vxworks-smp-x86-link.spec: Likewise.\n+\t* libgnat/system-vxworks-arm-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks-arm-rtp.ads: Likewise.\n+\t* libgnat/system-vxworks-arm.ads: Likewise.\n+\t* libgnat/system-vxworks-e500-kernel.ads: Likewise.\n+\t* libgnat/system-vxworks-e500-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks-e500-rtp.ads: Likewise.\n+\t* libgnat/system-vxworks-x86-kernel.ads: Likewise.\n+\t* libgnat/system-vxworks-x86-rtp-smp.ads: Likewise.\n+\t* libgnat/system-vxworks-x86-rtp.ads: Likewise.\n+\n 2022-07-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem_disp.adb (Check_Dispatching_Call): Merge the two special cases"}, {"sha": "402484bee23a0e839afe40a43c2601516bca5423", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f3a3fffeb40e646ec5a643783cd753fa7def33/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f3a3fffeb40e646ec5a643783cd753fa7def33/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=d1f3a3fffeb40e646ec5a643783cd753fa7def33", "patch": "@@ -1,3 +1,9 @@\n+2022-07-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/105626\n+\t* c-format.cc (check_format_arg): Don't emit -Wformat warnings with\n+\tu8 strings.\n+\n 2022-07-01  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/106111"}, {"sha": "ba13cdd6aae4546675407ee7a5b0e71c59ad0c26", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f3a3fffeb40e646ec5a643783cd753fa7def33/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f3a3fffeb40e646ec5a643783cd753fa7def33/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d1f3a3fffeb40e646ec5a643783cd753fa7def33", "patch": "@@ -1,3 +1,30 @@\n+2022-07-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* module.cc\n+\t(struct ord_loc_info, ord_loc_traits): New.\n+\t(ord_loc_tabke, ord_loc_remap): New globals.\n+\t(struct location_map_info): Delete.\n+\t(struct module_state_config): Rename ordinary_loc_align to\n+\tloc_range_bits.\n+\t(module_for_ordinary_loc): Adjust.\n+\t(module_state::note_location): Note ordinary locations,\n+\treturn bool.\n+\t(module_state::write_location): Adjust ordinary location\n+\tstreaming.\n+\t(module_state::read_location): Likewise.\n+\t(module_state::write_init_maps): Allocate ord_loc_table.\n+\t(module_state::write_prepare_maps): Reimplement ordinary\n+\tmap preparation.\n+\t(module_state::read_prepare_maps): Adjust.\n+\t(module_state::write_ordinary_maps): Reimplement.\n+\t(module_state::write_macro_maps): Adjust.\n+\t(module_state::read_ordinary_maps): Reimplement.\n+\t(module_state::write_macros): Adjust.\n+\t(module_state::write_config): Adjust.\n+\t(module_state::read_config): Adjust.\n+\t(module_state::write_begin): Adjust.\n+\t(module_state::read_initial): Adjust.\n+\n 2022-07-04  Tobias Burnus  <tobias@codesourcery.com>\n \t    Chung-Lin Tang  <cltang@codesourcery.com>\n \t    Thomas Schwinge  <thomas@codesourcery.com>"}, {"sha": "208590bc41ff72b0e9b42e464cfe0fa4e9b2bd0a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f3a3fffeb40e646ec5a643783cd753fa7def33/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f3a3fffeb40e646ec5a643783cd753fa7def33/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d1f3a3fffeb40e646ec5a643783cd753fa7def33", "patch": "@@ -1,3 +1,75 @@\n+2022-07-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/105626\n+\t* g++.dg/warn/Wformat-char8_t-1.C: New test.\n+\n+2022-07-05  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/i386/testnot-3.c: New test case.\n+\n+2022-07-05  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Hongtao Liu  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/ssse3-palignr-2.c: New test case.\n+\n+2022-07-05  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR rtl-optimization/96692\n+\t* gcc.target/i386/bmi-andn-4.c: New test case.\n+\n+2022-07-05  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* g++.dg/modules/loc-prune-1.C: Adjust.\n+\t* g++.dg/modules/loc-prune-4.C: New.\n+\t* g++.dg/modules/pr98718_a.C: Adjust.\n+\t* g++.dg/modules/pr98718_b.C: Adjust.\n+\t* g++.dg/modules/pr99072.H: Adjust.\n+\n+2022-07-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106198\n+\t* gcc.dg/pr106198.c: New testcase.\n+\n+2022-07-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106196\n+\t* gcc.dg/torture/pr106196.c: New testcase.\n+\n+2022-07-05  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_two_plus_gigs):\n+\tFix array element type.  Reported by Hans-Peter Nilsson.\n+\n+2022-07-05  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* gnat.dg/renaming1.adb: Update WITH clause.\n+\t* gnat.dg/renaming1.ads: Likewise.\n+\t* gnat.dg/warn29.adb: Likewise.\n+\n+2022-07-05  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.dg/vect/vect-reduc-dot-9.c: Reduce target requirements\n+\tfrom i8mm to dotprod.\n+\t* gcc.dg/vect/vect-reduc-dot-10.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-dot-11.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-dot-12.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-dot-13.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-dot-14.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-dot-15.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-dot-16.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-dot-17.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-dot-18.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-dot-19.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-dot-20.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-dot-21.c: Likewise.\n+\t* gcc.dg/vect/vect-reduc-dot-22.c: Likewise.\n+\n+2022-07-05  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106182\n+\t* gcc.dg/torture/pr106182.c: New testcase.\n+\n 2022-07-05  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* gcc.dg/analyzer/allocation-size-1.c,"}, {"sha": "3a38b0a03c62f1744a951262b341aee8777aedff", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1f3a3fffeb40e646ec5a643783cd753fa7def33/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1f3a3fffeb40e646ec5a643783cd753fa7def33/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d1f3a3fffeb40e646ec5a643783cd753fa7def33", "patch": "@@ -1,3 +1,13 @@\n+2022-07-05  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* testsuite/util/testsuite_fs.h (nonexistent_path): Explain\n+\twhy we need the typecast.\n+\n+2022-07-05  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* testsuite/util/testsuite_fs.h (nonexistent_path): Convert\n+\tthe getpid result to an integral type.\n+\n 2022-07-01  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/106162"}]}