{"sha": "733167f9d5ca5b9417559b7362d91e967be95a01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMzMTY3ZjlkNWNhNWI5NDE3NTU5YjczNjJkOTFlOTY3YmU5NWEwMQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-09T21:16:24Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-06-09T21:16:24Z"}, "message": "libstdc++: Define converting assignment operator for std::move_iterator\n\nAs clarified by LWG 3265, std::move_iterator is supposed to have an\nassignment operator that converts from a different specialization of\nstd::move_iterator, which performs an assignment. That has always been\nmissing from libstdc++, so assigning a different type actually performs\na converting construction, then an assignment. This is non-conforming\nfor the (fairly contrived) case where the converting assignment is\nwell-formed but the converting construction is not.\n\n\t* include/bits/stl_iterator.h (move_iterator::operator=): Define.\n\t* testsuite/24_iterators/move_iterator/dr3265.cc: New test.", "tree": {"sha": "e2d8662e0c24f771fa9c24436393bc09a9454b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2d8662e0c24f771fa9c24436393bc09a9454b4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/733167f9d5ca5b9417559b7362d91e967be95a01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/733167f9d5ca5b9417559b7362d91e967be95a01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/733167f9d5ca5b9417559b7362d91e967be95a01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/733167f9d5ca5b9417559b7362d91e967be95a01/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3647057913d3671312a79a77be02fc459d89fb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3647057913d3671312a79a77be02fc459d89fb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3647057913d3671312a79a77be02fc459d89fb6"}], "stats": {"total": 59, "additions": 59, "deletions": 0}, "files": [{"sha": "6d2d19eb0683825d081b179045f86376453d8045", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/733167f9d5ca5b9417559b7362d91e967be95a01/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/733167f9d5ca5b9417559b7362d91e967be95a01/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=733167f9d5ca5b9417559b7362d91e967be95a01", "patch": "@@ -1307,6 +1307,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tmove_iterator(const move_iterator<_Iter>& __i)\n \t: _M_current(__i.base()) { }\n \n+      template<typename _Iter>\n+\t_GLIBCXX17_CONSTEXPR\n+\tmove_iterator& operator=(const move_iterator<_Iter>& __i)\n+\t{\n+\t  _M_current = __i.base();\n+\t  return *this;\n+\t}\n+\n #if __cplusplus <= 201703L\n       _GLIBCXX17_CONSTEXPR iterator_type\n       base() const"}, {"sha": "05327e979ac2f7b972e6adcb5776a24a69d9cd5c", "filename": "libstdc++-v3/testsuite/24_iterators/move_iterator/dr3265.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/733167f9d5ca5b9417559b7362d91e967be95a01/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fdr3265.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/733167f9d5ca5b9417559b7362d91e967be95a01/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fdr3265.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fdr3265.cc?ref=733167f9d5ca5b9417559b7362d91e967be95a01", "patch": "@@ -0,0 +1,51 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <iterator>\n+\n+struct Iter\n+{\n+  using iterator_category = std::forward_iterator_tag;\n+  using value_type = int;\n+  using pointer = int*;\n+  using reference = int&;\n+  using difference_type = std::ptrdiff_t;\n+\n+  Iter();\n+\n+  // Construction from int* is not valid:\n+  Iter(int*) = delete;\n+\n+  // Assignment from int* is valid:\n+  Iter& operator=(int*);\n+\n+  Iter& operator++();\n+  Iter operator++(int);\n+  int& operator*() const;\n+  int* operator->() const;\n+\n+  template<int N> friend bool operator==(Iter, Iter);\n+};\n+\n+void test01()\n+{\n+  std::move_iterator<Iter> m;\n+  int i = 0;\n+  m = std::make_move_iterator(&i); // Should use assignment not construction\n+}"}]}