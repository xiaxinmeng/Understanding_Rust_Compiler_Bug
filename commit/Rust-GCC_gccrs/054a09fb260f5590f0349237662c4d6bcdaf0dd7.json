{"sha": "054a09fb260f5590f0349237662c4d6bcdaf0dd7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU0YTA5ZmIyNjBmNTU5MGYwMzQ5MjM3NjYyYzRkNmJjZGFmMGRkNw==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2006-03-23T10:33:38Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2006-03-23T10:33:38Z"}, "message": "cfgloopmanip.c (create_loop_notes): Removed.\n\n\t* cfgloopmanip.c (create_loop_notes): Removed.\n\t* final.c (final_scan_insn): Do not handle loop notes.\n\t* jump.c (squeeze_notes): Ditto.\n\t* cfglayout.c (skip_insns_after_block,\n\tduplicate_insn_chain): Ditto.\n\t* cfgcleanup.c (rest_of_handle_jump2): Do not call\n\tcreate_loop_notes.\n\t* cfgloop.h (create_loop_notes): Declaration removed.\n\nFrom-SVN: r112316", "tree": {"sha": "b4875002f8168859c607632b90c826dc7f4b747a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4875002f8168859c607632b90c826dc7f4b747a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/054a09fb260f5590f0349237662c4d6bcdaf0dd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/054a09fb260f5590f0349237662c4d6bcdaf0dd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/054a09fb260f5590f0349237662c4d6bcdaf0dd7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/054a09fb260f5590f0349237662c4d6bcdaf0dd7/comments", "author": null, "committer": null, "parents": [{"sha": "c16ba1d5fea86df6f8d9e3d5d16c023dc65ce516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c16ba1d5fea86df6f8d9e3d5d16c023dc65ce516", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c16ba1d5fea86df6f8d9e3d5d16c023dc65ce516"}], "stats": {"total": 134, "additions": 19, "deletions": 115}, "files": [{"sha": "e573c23d577d9bd26bbafff5eca80cecf22bb5d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/054a09fb260f5590f0349237662c4d6bcdaf0dd7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/054a09fb260f5590f0349237662c4d6bcdaf0dd7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=054a09fb260f5590f0349237662c4d6bcdaf0dd7", "patch": "@@ -1,3 +1,14 @@\n+2006-03-23  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\t* cfgloopmanip.c (create_loop_notes): Removed.\n+\t* final.c (final_scan_insn): Do not handle loop notes.\n+\t* jump.c (squeeze_notes): Ditto.\n+\t* cfglayout.c (skip_insns_after_block,\n+\tduplicate_insn_chain): Ditto.\n+\t* cfgcleanup.c (rest_of_handle_jump2): Do not call\n+\tcreate_loop_notes.\n+\t* cfgloop.h (create_loop_notes): Declaration removed.\n+\n 2006-03-23  Richard Sandiford  <richard@codesourcery.com>\n \n \t* varasm.c (output_constant_pool): Restore fnname and fndecl"}, {"sha": "954a9569f16dd12751b89a7c6b617808602fd724", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/054a09fb260f5590f0349237662c4d6bcdaf0dd7/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/054a09fb260f5590f0349237662c4d6bcdaf0dd7/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=054a09fb260f5590f0349237662c4d6bcdaf0dd7", "patch": "@@ -2312,8 +2312,6 @@ rest_of_handle_jump2 (void)\n   cleanup_cfg ((optimize ? CLEANUP_EXPENSIVE : 0)\n                | (flag_thread_jumps ? CLEANUP_THREADING : 0));\n \n-  create_loop_notes ();\n-\n   purge_line_number_notes ();\n \n   if (optimize)"}, {"sha": "f427a2bb57e148b674a54b2fb0443fbb49547bed", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/054a09fb260f5590f0349237662c4d6bcdaf0dd7/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/054a09fb260f5590f0349237662c4d6bcdaf0dd7/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=054a09fb260f5590f0349237662c4d6bcdaf0dd7", "patch": "@@ -99,7 +99,6 @@ skip_insns_after_block (basic_block bb)\n \tcase NOTE:\n \t  switch (NOTE_LINE_NUMBER (insn))\n \t    {\n-\t    case NOTE_INSN_LOOP_END:\n \t    case NOTE_INSN_BLOCK_END:\n \t      last_insn = insn;\n \t      continue;\n@@ -135,20 +134,19 @@ skip_insns_after_block (basic_block bb)\n   /* It is possible to hit contradictory sequence.  For instance:\n \n      jump_insn\n-     NOTE_INSN_LOOP_BEG\n+     NOTE_INSN_BLOCK_BEG\n      barrier\n \n      Where barrier belongs to jump_insn, but the note does not.  This can be\n      created by removing the basic block originally following\n-     NOTE_INSN_LOOP_BEG.  In such case reorder the notes.  */\n+     NOTE_INSN_BLOCK_BEG.  In such case reorder the notes.  */\n \n   for (insn = last_insn; insn != BB_END (bb); insn = prev)\n     {\n       prev = PREV_INSN (insn);\n       if (NOTE_P (insn))\n \tswitch (NOTE_LINE_NUMBER (insn))\n \t  {\n-\t  case NOTE_INSN_LOOP_END:\n \t  case NOTE_INSN_BLOCK_END:\n \t  case NOTE_INSN_DELETED:\n \t  case NOTE_INSN_DELETED_LABEL:\n@@ -986,10 +984,6 @@ duplicate_insn_chain (rtx from, rtx to)\n \t         in first BB, we may want to copy the block.  */\n \t    case NOTE_INSN_PROLOGUE_END:\n \n-\t    case NOTE_INSN_LOOP_BEG:\n-\t    case NOTE_INSN_LOOP_END:\n-\t      /* Strip down the loop notes - we don't really want to keep\n-\t         them consistent in loop copies.  */\n \t    case NOTE_INSN_DELETED:\n \t    case NOTE_INSN_DELETED_LABEL:\n \t      /* No problem to strip these.  */"}, {"sha": "3309e0fdca9a20ea1b7fdfdbb36dc5fb09726694", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/054a09fb260f5590f0349237662c4d6bcdaf0dd7/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/054a09fb260f5590f0349237662c4d6bcdaf0dd7/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=054a09fb260f5590f0349237662c4d6bcdaf0dd7", "patch": "@@ -198,7 +198,6 @@ int flow_loop_nodes_find (basic_block, struct loop *);\n void fix_loop_structure (struct loops *, bitmap changed_bbs);\n void mark_irreducible_loops (struct loops *);\n void mark_single_exit_loops (struct loops *);\n-extern void create_loop_notes (void);\n \n /* Loop data structure manipulation/querying.  */\n extern void flow_loop_tree_node_add (struct loop *, struct loop *);"}, {"sha": "79c5142a078f90bbebaf13ab53632ff24b626e4f", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/054a09fb260f5590f0349237662c4d6bcdaf0dd7/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/054a09fb260f5590f0349237662c4d6bcdaf0dd7/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=054a09fb260f5590f0349237662c4d6bcdaf0dd7", "patch": "@@ -1275,100 +1275,6 @@ loop_split_edge_with (edge e, rtx insns)\n   return new_bb;\n }\n \n-/* Uses the natural loop discovery to recreate loop notes.  */\n-void\n-create_loop_notes (void)\n-{\n-  rtx insn, head, end;\n-  struct loops loops;\n-  struct loop *loop;\n-  basic_block *first, *last, bb, pbb;\n-  struct loop **stack, **top;\n-\n-#ifdef ENABLE_CHECKING\n-  /* Verify that there really are no loop notes.  */\n-  for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-    gcc_assert (!NOTE_P (insn) ||\n-\t\tNOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_BEG);\n-#endif\n-\n-  flow_loops_find (&loops);\n-  free_dominance_info (CDI_DOMINATORS);\n-  if (loops.num > 1)\n-    {\n-      last = XCNEWVEC (basic_block, loops.num);\n-\n-      FOR_EACH_BB (bb)\n-\t{\n-\t  for (loop = bb->loop_father; loop->outer; loop = loop->outer)\n-\t    last[loop->num] = bb;\n-\t}\n-\n-      first = XCNEWVEC (basic_block, loops.num);\n-      stack = XCNEWVEC (struct loop *, loops.num);\n-      top = stack;\n-\n-      FOR_EACH_BB (bb)\n-\t{\n-\t  for (loop = bb->loop_father; loop->outer; loop = loop->outer)\n-\t    {\n-\t      if (!first[loop->num])\n-\t\t{\n-\t\t  *top++ = loop;\n-\t\t  first[loop->num] = bb;\n-\t\t}\n-\n-\t      if (bb == last[loop->num])\n-\t\t{\n-\t\t  /* Prevent loops from overlapping.  */\n-\t\t  while (*--top != loop)\n-\t\t    last[(*top)->num] = EXIT_BLOCK_PTR;\n-\n-\t\t  /* If loop starts with jump into it, place the note in\n-\t\t     front of the jump.  */\n-\t\t  insn = PREV_INSN (BB_HEAD (first[loop->num]));\n-\t\t  if (insn\n-\t\t      && BARRIER_P (insn))\n-\t\t    insn = PREV_INSN (insn);\n-\t\t  \n-\t\t  if (insn\n-\t\t      && JUMP_P (insn)\n-\t\t      && any_uncondjump_p (insn)\n-\t\t      && onlyjump_p (insn))\n-\t\t    {\n-\t\t      pbb = BLOCK_FOR_INSN (insn);\n-\t\t      gcc_assert (pbb && single_succ_p (pbb));\n-\n-\t\t      if (!flow_bb_inside_loop_p (loop, single_succ (pbb)))\n-\t\t\tinsn = BB_HEAD (first[loop->num]);\n-\t\t    }\n-\t\t  else\n-\t\t    insn = BB_HEAD (first[loop->num]);\n-\t\t    \n-\t\t  head = BB_HEAD (first[loop->num]);\n-\t\t  emit_note_before (NOTE_INSN_LOOP_BEG, insn);\n-\t\t  BB_HEAD (first[loop->num]) = head;\n-\n-\t\t  /* Position the note correctly wrto barrier.  */\n-\t\t  insn = BB_END (last[loop->num]);\n-\t\t  if (NEXT_INSN (insn)\n-\t\t      && BARRIER_P (NEXT_INSN (insn)))\n-\t\t    insn = NEXT_INSN (insn);\n-\t\t  \n-\t\t  end = BB_END (last[loop->num]);\n-\t\t  emit_note_after (NOTE_INSN_LOOP_END, insn);\n-\t\t  BB_END (last[loop->num]) = end;\n-\t\t}\n-\t    }\n-\t}\n-\n-      free (first);\n-      free (last);\n-      free (stack);\n-    }\n-  flow_loops_free (&loops);\n-}\n-\n /* This function is called from loop_version.  It splits the entry edge\n    of the loop we want to version, adds the versioning condition, and\n    adjust the edges to the two versions of the loop appropriately."}, {"sha": "0cb985fd4d67f576dfc577786cc246e66e974fbc", "filename": "gcc/final.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/054a09fb260f5590f0349237662c4d6bcdaf0dd7/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/054a09fb260f5590f0349237662c4d6bcdaf0dd7/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=054a09fb260f5590f0349237662c4d6bcdaf0dd7", "patch": "@@ -1697,8 +1697,6 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n       switch (NOTE_LINE_NUMBER (insn))\n \t{\n \tcase NOTE_INSN_DELETED:\n-\tcase NOTE_INSN_LOOP_BEG:\n-\tcase NOTE_INSN_LOOP_END:\n \tcase NOTE_INSN_FUNCTION_END:\n \tcase NOTE_INSN_REPEATED_LINE_NUMBER:\n \tcase NOTE_INSN_EXPECTED_VALUE:"}, {"sha": "b60c2840720a498b4201c32ee59d85baec457317", "filename": "gcc/jump.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/054a09fb260f5590f0349237662c4d6bcdaf0dd7/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/054a09fb260f5590f0349237662c4d6bcdaf0dd7/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=054a09fb260f5590f0349237662c4d6bcdaf0dd7", "patch": "@@ -260,11 +260,11 @@ mark_all_labels (rtx f)\n       }\n }\n \f\n-/* Move all block-beg, block-end, loop-beg, loop-cont, loop-vtop, loop-end,\n-   notes between START and END out before START.  START and END may be such\n-   notes.  Returns the values of the new starting and ending insns, which\n-   may be different if the original ones were such notes.\n-   Return true if there were only such notes and no real instructions.  */\n+/* Move all block-beg, block-end and loop-beg notes between START and END out\n+   before START.  START and END may be such notes.  Returns the values of the\n+   new starting and ending insns, which may be different if the original ones\n+   were such notes.  Return true if there were only such notes and no real\n+   instructions.  */\n \n bool\n squeeze_notes (rtx* startp, rtx* endp)\n@@ -282,9 +282,7 @@ squeeze_notes (rtx* startp, rtx* endp)\n       next = NEXT_INSN (insn);\n       if (NOTE_P (insn)\n \t  && (NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_END\n-\t      || NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_BEG\n-\t      || NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_BEG\n-\t      || NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_END))\n+\t      || NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_BEG))\n \t{\n \t  /* BLOCK_BEG or BLOCK_END notes only exist in the `final' pass.  */\n \t  gcc_assert (NOTE_LINE_NUMBER (insn) != NOTE_INSN_BLOCK_BEG"}]}