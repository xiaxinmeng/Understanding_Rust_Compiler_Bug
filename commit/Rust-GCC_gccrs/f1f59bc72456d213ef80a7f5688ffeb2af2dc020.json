{"sha": "f1f59bc72456d213ef80a7f5688ffeb2af2dc020", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFmNTliYzcyNDU2ZDIxM2VmODBhN2Y1Njg4ZmZlYjJhZjJkYzAyMA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-11-01T14:10:13Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-11-01T14:10:13Z"}, "message": "re PR target/50910 ([avr] inefficient division by 2)\n\n\tPR target/50910\n\t* config/avr/avr.opt (-mbranch-cost=): New option.\n\t* config/avr/avr.h (BRANCH_COST): Define to avr_branch_cost.\n\t* config/avr/avr.c (avr_rtx_costs_1): Adjust [U]DIV/[U]MOD costs.\n\t* config/avr/avr.md (*addqi3.lt0, *addhi3.lt0, *addsi3.lt0): New insns.\n\t(*addhi3_zero_extend1): Remov % in constraint of operand 1.\n\t(*addhi3.sign_extend1, *subhi3.sign_extend2): New insns.\n\nFrom-SVN: r180739", "tree": {"sha": "64a7ad573ee0812364b547eb84d67b74032a6153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64a7ad573ee0812364b547eb84d67b74032a6153"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1f59bc72456d213ef80a7f5688ffeb2af2dc020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1f59bc72456d213ef80a7f5688ffeb2af2dc020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1f59bc72456d213ef80a7f5688ffeb2af2dc020", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1f59bc72456d213ef80a7f5688ffeb2af2dc020/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa4ba4affe94d6b88242f38aabe7fe480fc6ff4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa4ba4affe94d6b88242f38aabe7fe480fc6ff4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa4ba4affe94d6b88242f38aabe7fe480fc6ff4d"}], "stats": {"total": 112, "additions": 96, "deletions": 16}, "files": [{"sha": "d8476c27c6be1ff43ee2ed27d6ab3b81c1428b19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f59bc72456d213ef80a7f5688ffeb2af2dc020/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f59bc72456d213ef80a7f5688ffeb2af2dc020/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1f59bc72456d213ef80a7f5688ffeb2af2dc020", "patch": "@@ -1,3 +1,13 @@\n+2011-11-01  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/50910\n+\t* config/avr/avr.opt (-mbranch-cost=): New option.\n+\t* config/avr/avr.h (BRANCH_COST): Define to avr_branch_cost.\n+\t* config/avr/avr.c (avr_rtx_costs_1): Adjust [U]DIV/[U]MOD costs.\n+\t* config/avr/avr.md (*addqi3.lt0, *addhi3.lt0, *addsi3.lt0): New insns.\n+\t(*addhi3_zero_extend1): Remov % in constraint of operand 1.\n+\t(*addhi3.sign_extend1, *subhi3.sign_extend2): New insns.\n+\n 2011-11-01  Tom de Vries  <tom@codesourcery.com>\n \n \tPR tree-optimization/50908"}, {"sha": "6435c4854f5eb35deb494773e0783a000b1714b4", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f59bc72456d213ef80a7f5688ffeb2af2dc020/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f59bc72456d213ef80a7f5688ffeb2af2dc020/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=f1f59bc72456d213ef80a7f5688ffeb2af2dc020", "patch": "@@ -6477,11 +6477,16 @@ avr_rtx_costs_1 (rtx x, int codearg, int outer_code ATTRIBUTE_UNUSED,\n     case UDIV:\n     case UMOD:\n       if (!speed)\n-\t*total = COSTS_N_INSNS (AVR_HAVE_JMP_CALL ? 2 : 1);\n+        *total = COSTS_N_INSNS (AVR_HAVE_JMP_CALL ? 2 : 1);\n       else\n-\treturn false;\n+        *total = COSTS_N_INSNS (15 * GET_MODE_SIZE (mode));\n       *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code, 0, speed);\n-      *total += avr_operand_rtx_cost (XEXP (x, 1), mode, code, 1, speed);\n+      /* For div/mod with const-int divisor we have at least the cost of\n+         loading the divisor. */\n+      if (CONST_INT_P (XEXP (x, 1)))\n+        *total += COSTS_N_INSNS (GET_MODE_SIZE (mode));\n+      /* Add some overall penaly for clobbering and moving around registers */\n+      *total += COSTS_N_INSNS (2);\n       return true;\n \n     case ROTATE:"}, {"sha": "47ca8ff759af2ec2b526bce6aeadaaa80d80b680", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f59bc72456d213ef80a7f5688ffeb2af2dc020/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f59bc72456d213ef80a7f5688ffeb2af2dc020/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=f1f59bc72456d213ef80a7f5688ffeb2af2dc020", "patch": "@@ -385,7 +385,7 @@ typedef struct avr_args {\n       }                                                                 \\\n   } while (0)\n \n-#define BRANCH_COST(speed_p, predictable_p) 0\n+#define BRANCH_COST(speed_p, predictable_p) avr_branch_cost\n \n #define SLOW_BYTE_ACCESS 0\n "}, {"sha": "f3edbbcd026c2e0cde52cf25753966b7682ee77e", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 69, "deletions": 12, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f59bc72456d213ef80a7f5688ffeb2af2dc020/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f59bc72456d213ef80a7f5688ffeb2af2dc020/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=f1f59bc72456d213ef80a7f5688ffeb2af2dc020", "patch": "@@ -776,27 +776,36 @@\n \n \n (define_insn \"*addhi3_zero_extend\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(plus:HI (zero_extend:HI\n-\t\t  (match_operand:QI 1 \"register_operand\" \"r\"))\n-\t\t (match_operand:HI 2 \"register_operand\" \"0\")))]\n+  [(set (match_operand:HI 0 \"register_operand\"                         \"=r\")\n+        (plus:HI (zero_extend:HI (match_operand:QI 1 \"register_operand\" \"r\"))\n+                 (match_operand:HI 2 \"register_operand\"                 \"0\")))]\n   \"\"\n-  \"add %A0,%1\n-\tadc %B0,__zero_reg__\"\n+  \"add %A0,%1\\;adc %B0,__zero_reg__\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set_n\")])\n \n (define_insn \"*addhi3_zero_extend1\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(plus:HI (match_operand:HI 1 \"register_operand\" \"%0\")\n-\t\t (zero_extend:HI\n-\t\t  (match_operand:QI 2 \"register_operand\" \"r\"))))]\n+  [(set (match_operand:HI 0 \"register_operand\"                         \"=r\")\n+        (plus:HI (match_operand:HI 1 \"register_operand\"                 \"0\")\n+                 (zero_extend:HI (match_operand:QI 2 \"register_operand\" \"r\"))))]\n   \"\"\n-  \"add %A0,%2\n-\tadc %B0,__zero_reg__\"\n+  \"add %A0,%2\\;adc %B0,__zero_reg__\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set_n\")])\n \n+(define_insn \"*addhi3.sign_extend1\"\n+  [(set (match_operand:HI 0 \"register_operand\"                         \"=r\")\n+        (plus:HI (sign_extend:HI (match_operand:QI 1 \"register_operand\" \"r\"))\n+                 (match_operand:HI 2 \"register_operand\"                 \"0\")))]\n+  \"\"\n+  {\n+    return reg_overlap_mentioned_p (operands[0], operands[1])\n+      ? \"mov __tmp_reg__,%1\\;add %A0,%1\\;adc %B0,__zero_reg__\\;sbrc __tmp_reg__,7\\;dec %B0\"\n+      : \"add %A0,%1\\;adc %B0,__zero_reg__\\;sbrc %1,7\\;dec %B0\";\n+  }\n+  [(set_attr \"length\" \"5\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n (define_insn \"*addhi3_sp\"\n   [(set (match_operand:HI 1 \"stack_register_operand\"           \"=q\")\n         (plus:HI (match_operand:HI 2 \"stack_register_operand\"   \"q\")\n@@ -956,6 +965,19 @@\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"set_czn\")])\n \n+(define_insn \"*subhi3.sign_extend2\"\n+  [(set (match_operand:HI 0 \"register_operand\"                          \"=r\")\n+        (minus:HI (match_operand:HI 1 \"register_operand\"                 \"0\")\n+                  (sign_extend:HI (match_operand:QI 2 \"register_operand\" \"r\"))))]\n+  \"\"\n+  {\n+    return reg_overlap_mentioned_p (operands[0], operands[2])\n+      ? \"mov __tmp_reg__,%2\\;sub %A0,%2\\;sbc %B0,__zero_reg__\\;sbrc __tmp_reg__,7\\;inc %B0\"\n+      : \"sub %A0,%2\\;sbc %B0,__zero_reg__\\;sbrc %2,7\\;inc %B0\";\n+  }\n+  [(set_attr \"length\" \"5\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n (define_insn \"subsi3\"\n   [(set (match_operand:SI 0 \"register_operand\"          \"=r\")\n         (minus:SI (match_operand:SI 1 \"register_operand\" \"0\")\n@@ -1054,6 +1076,41 @@\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"clobber\")])\n \n+(define_insn \"*addqi3.lt0\"\n+  [(set (match_operand:QI 0 \"register_operand\"                 \"=r\")\n+        (plus:QI (lt:QI (match_operand:QI 1 \"register_operand\"  \"r\")\n+                        (const_int 0))\n+                 (match_operand:QI 2 \"register_operand\"         \"0\")))]\n+  \"\"\n+  \"sbrc %1,7\\;inc %0\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n+(define_insn \"*addhi3.lt0\"\n+  [(set (match_operand:HI 0 \"register_operand\"                   \"=w,r\")\n+        (plus:HI (lt:HI (match_operand:QI 1 \"register_operand\"    \"r,r\")\n+                        (const_int 0))\n+                 (match_operand:HI 2 \"register_operand\"           \"0,0\")))\n+   (clobber (match_scratch:QI 3                                  \"=X,&1\"))]\n+  \"\"\n+  \"@\n+\tsbrc %1,7\\;adiw %0,1\n+\tlsl %1\\;adc %A0,__zero_reg__\\;adc %B0,__zero_reg__\"\n+  [(set_attr \"length\" \"2,3\")\n+   (set_attr \"cc\" \"clobber\")])\n+\n+(define_insn \"*addsi3.lt0\"\n+  [(set (match_operand:SI 0 \"register_operand\"                       \"=r\")\n+        (plus:SI (lshiftrt:SI (match_operand:SI 1 \"register_operand\"  \"r\")\n+                              (const_int 31))\n+                 (match_operand:SI 2 \"register_operand\"               \"0\")))]\n+  \"\"\n+  \"mov __tmp_reg__,%D1\\;lsl __tmp_reg__\n+\tadc %A0,__zero_reg__\\;adc %B0,__zero_reg__\\;adc %C0,__zero_reg__\\;adc %D0,__zero_reg__\"\n+  [(set_attr \"length\" \"6\")\n+   (set_attr \"cc\" \"clobber\")])\n+  \n+\n ;; \"umulqihi3\"\n ;; \"mulqihi3\"\n (define_insn \"<extend_u>mulqihi3\""}, {"sha": "bb9c90ec36f3e5c82675f4a22121baa0c56cece5", "filename": "gcc/config/avr/avr.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1f59bc72456d213ef80a7f5688ffeb2af2dc020/gcc%2Fconfig%2Favr%2Favr.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1f59bc72456d213ef80a7f5688ffeb2af2dc020/gcc%2Fconfig%2Favr%2Favr.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.opt?ref=f1f59bc72456d213ef80a7f5688ffeb2af2dc020", "patch": "@@ -40,6 +40,10 @@ mno-interrupts\n Target Report RejectNegative Mask(NO_INTERRUPTS)\n Change the stack pointer without disabling interrupts\n \n+mbranch-cost=\n+Target Report Joined RejectNegative UInteger Var(avr_branch_cost) Init(0)\n+Set the branch costs for conditional branch instructions.  Reasonable values are small, non-negative integers.  The default branch cost is 0.\n+\n morder1\n Target Report Undocumented Mask(ORDER_1)\n \n@@ -69,3 +73,7 @@ Accumulate outgoing function arguments and acquire/release the needed stack spac\n mstrict-X\n Target Report Var(avr_strict_X) Init(0)\n When accessing RAM, use X as imposed by the hardware, i.e. just use pre-decrement, post-increment and indirect addressing with the X register.  Without this option, the compiler may assume that there is an addressing mode X+const similar to Y+const and Z+const and emit instructions to emulate such an addressing mode for X.\n+\n+mbranch-cost=\n+Target Report RejectNegative Joined UInteger Var(avr_branch_cost) Init(0)\n+Set the cost of a branch instruction.  Default value is 0."}]}