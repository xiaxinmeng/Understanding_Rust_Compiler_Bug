{"sha": "92ea8dd20e05e6a71170743e7d9a711c9599f1d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJlYThkZDIwZTA1ZTZhNzExNzA3NDNlN2Q5YTcxMWM5NTk5ZjFkMQ==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2018-05-22T13:19:24Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-05-22T13:19:24Z"}, "message": "[Ada] Adding support for Ada.Locales package\n\nThis patch adds generic support for the Ada.Locales package that\nrelies on the setlocale() C service.\n\n2018-05-22  Javier Miranda  <miranda@adacore.com>\n\ngcc/ada/\n\n\t* locales.c: New implementation for the Ada.Locales package.\n\t* libgnat/a-locale.ads: Remove comment indicating that this is not\n\timplemented.\n\t* doc/gnat_rm/standard_library_routines.rst: Remove comment indicating\n\tthat this is not implemented.\n\t* gnat_rm.texi: Regenerate.\n\nFrom-SVN: r260509", "tree": {"sha": "863c05b13c59c787599a55181bae8acaa53f3dd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/863c05b13c59c787599a55181bae8acaa53f3dd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92ea8dd20e05e6a71170743e7d9a711c9599f1d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ea8dd20e05e6a71170743e7d9a711c9599f1d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92ea8dd20e05e6a71170743e7d9a711c9599f1d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92ea8dd20e05e6a71170743e7d9a711c9599f1d1/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e5fc017905d64f59f189bf9453978fa158a289e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5fc017905d64f59f189bf9453978fa158a289e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5fc017905d64f59f189bf9453978fa158a289e6"}], "stats": {"total": 864, "additions": 846, "deletions": 18}, "files": [{"sha": "06d9bffdacb8c0a51506f55b4134c6f0122b813c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8dd20e05e6a71170743e7d9a711c9599f1d1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8dd20e05e6a71170743e7d9a711c9599f1d1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=92ea8dd20e05e6a71170743e7d9a711c9599f1d1", "patch": "@@ -1,3 +1,12 @@\n+2018-05-22  Javier Miranda  <miranda@adacore.com>\n+\n+\t* locales.c: New implementation for the Ada.Locales package.\n+\t* libgnat/a-locale.ads: Remove comment indicating that this is not\n+\timplemented.\n+\t* doc/gnat_rm/standard_library_routines.rst: Remove comment indicating\n+\tthat this is not implemented.\n+\t* gnat_rm.texi: Regenerate.\n+\n 2018-05-22  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch5.adb, freeze.adb, pprint.adb, sem_ch4.adb, sem_res.adb: Minor"}, {"sha": "398b6139a922575e4ac060330647752e6f4df97c", "filename": "gcc/ada/doc/gnat_rm/standard_library_routines.rst", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8dd20e05e6a71170743e7d9a711c9599f1d1/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_library_routines.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8dd20e05e6a71170743e7d9a711c9599f1d1/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_library_routines.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_library_routines.rst?ref=92ea8dd20e05e6a71170743e7d9a711c9599f1d1", "patch": "@@ -273,9 +273,7 @@ the unit is not implemented.\n \n ``Ada.Locales`` *(A.19)*\n   This package provides declarations providing information (Language\n-  and Country) about the current locale. This package is currently not\n-  implemented other than by providing stubs which will always return\n-  Language_Unknown/Country_Unknown.\n+  and Country) about the current locale.\n \n \n ``Ada.Numerics``"}, {"sha": "b21f1da6dc5b7b6871dc39e520e2529764f4d3e0", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8dd20e05e6a71170743e7d9a711c9599f1d1/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8dd20e05e6a71170743e7d9a711c9599f1d1/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=92ea8dd20e05e6a71170743e7d9a711c9599f1d1", "patch": "@@ -20617,9 +20617,7 @@ This package provides a generic interface to generalized iterators.\n @item @code{Ada.Locales} @emph{(A.19)}\n \n This package provides declarations providing information (Language\n-and Country) about the current locale. This package is currently not\n-implemented other than by providing stubs which will always return\n-Language_Unknown/Country_Unknown.\n+and Country) about the current locale.\n \n @item @code{Ada.Numerics}\n "}, {"sha": "a193eb813b0bafadd64db42d136bf2953a0935ec", "filename": "gcc/ada/libgnat/a-locale.ads", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8dd20e05e6a71170743e7d9a711c9599f1d1/gcc%2Fada%2Flibgnat%2Fa-locale.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8dd20e05e6a71170743e7d9a711c9599f1d1/gcc%2Fada%2Flibgnat%2Fa-locale.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-locale.ads?ref=92ea8dd20e05e6a71170743e7d9a711c9599f1d1", "patch": "@@ -15,10 +15,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  Note that this package is currently not implemented on any platform and\n---  functions Language and Country will always return\n---  Language_Unknown/Country_Unknown.\n-\n package Ada.Locales is\n    pragma Preelaborate (Locales);\n    pragma Remote_Types (Locales);"}, {"sha": "dd549e181dfaef103dcc320811f58ca3049b516a", "filename": "gcc/ada/locales.c", "status": "modified", "additions": 835, "deletions": 8, "changes": 843, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92ea8dd20e05e6a71170743e7d9a711c9599f1d1/gcc%2Fada%2Flocales.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92ea8dd20e05e6a71170743e7d9a711c9599f1d1/gcc%2Fada%2Flocales.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flocales.c?ref=92ea8dd20e05e6a71170743e7d9a711c9599f1d1", "patch": "@@ -31,26 +31,853 @@\n \n /*  This file provides OS-dependent support for the Ada.Locales package.    */\n \n+#include <locale.h>\n+#include <ctype.h>\n+#include <stddef.h>\n+\n typedef char char4 [4];\n \n+/* Table containing equivalences between ISO_639_1 codes and their ISO_639_3\n+   alpha-3 code plus their language name. */\n+\n+static char* iso_639[] =\n+{\n+  \"aa\", \"aar\", \"Afar\",\n+  \"ab\", \"abk\", \"Abkhazian\",\n+  \"ae\", \"ave\", \"Avestan\",\n+  \"af\", \"afr\", \"Afrikaans\",\n+  \"ak\", \"aka\", \"Akan\",\n+  \"am\", \"amh\", \"Amharic\",\n+  \"an\", \"arg\", \"Aragonese\",\n+  \"ar\", \"ara\", \"Arabic\",\n+  \"as\", \"asm\", \"Assamese\",\n+  \"av\", \"ava\", \"Avaric\",\n+  \"ay\", \"aym\", \"Aymara\",\n+  \"az\", \"aze\", \"Azerbaijani\",\n+\n+  \"ba\", \"bak\", \"Bashkir\",\n+  \"be\", \"bel\", \"Belarusian\",\n+  \"bg\", \"bul\", \"Bulgarian\",\n+  \"bi\", \"bis\", \"Bislama\",\n+  \"bm\", \"bam\", \"Bambara\",\n+  \"bn\", \"ben\", \"Bengali\",\n+  \"bo\", \"bod\", \"Tibetan\",\n+  \"br\", \"bre\", \"Breton\",\n+  \"bs\", \"bos\", \"Bosnian\",\n+\n+  \"ca\", \"cat\", \"Catalan\",\n+  \"ce\", \"che\", \"Chechen\",\n+  \"ch\", \"cha\", \"Chamorro\",\n+  \"co\", \"cos\", \"Corsican\",\n+  \"cr\", \"cre\", \"Cree\",\n+  \"cs\", \"ces\", \"Czech\",\n+  \"cu\", \"chu\", \"Church Slavic\",\n+  \"cv\", \"chv\", \"Chuvash\",\n+  \"cy\", \"cym\", \"Welsh\",\n+\n+  \"da\", \"dan\", \"Danish\",\n+  \"de\", \"deu\", \"German\",\n+  \"dv\", \"div\", \"Divehi\",\n+  \"dz\", \"dzo\", \"Dzongkha\",\n+\n+  \"ee\", \"ewe\", \"Ewe\",\n+  \"el\", \"ell\", \"Modern Greek\",\n+  \"en\", \"eng\", \"English\",\n+  \"eo\", \"epo\", \"Esperanto\",\n+  \"es\", \"spa\", \"Spanish\",\n+  \"et\", \"est\", \"Estonian\",\n+  \"eu\", \"eus\", \"Basque\",\n+\n+  \"fa\", \"fas\", \"Persian\",\n+  \"ff\", \"ful\", \"Fulah\",\n+  \"fi\", \"fin\", \"Finnish\",\n+  \"fj\", \"fij\", \"Fijian\",\n+  \"fo\", \"fao\", \"Faroese\",\n+  \"fr\", \"fra\", \"French\",\n+  \"fy\", \"fry\", \"Western Frisian\",\n+\n+  \"ga\", \"gle\", \"Irish\",\n+  \"gd\", \"gla\", \"Scottish Gaelic\",\n+  \"gl\", \"glg\", \"Galician\",\n+  \"gn\", \"grn\", \"Guarani\",\n+  \"gu\", \"guj\", \"Gujarati\",\n+  \"gv\", \"glv\", \"Manx\",\n+\n+  \"ha\", \"hau\", \"Hausa\",\n+  \"he\", \"heb\", \"Hebrew\",\n+  \"hi\", \"hin\", \"Hindi\",\n+  \"ho\", \"hmo\", \"Hiri Motu\",\n+  \"hr\", \"hrv\", \"Croatian\",\n+  \"ht\", \"hat\", \"Haitian\",\n+  \"hu\", \"hun\", \"Hungarian\",\n+  \"hy\", \"hye\", \"Armenian\",\n+  \"hz\", \"her\", \"Herero\",\n+\n+  \"ia\", \"ina\", \"Interlingua\",\n+  \"id\", \"ind\", \"Indonesian\",\n+  \"ie\", \"ile\", \"Interlingue\",\n+  \"ig\", \"ibo\", \"Igbo\",\n+  \"ii\", \"iii\", \"Sichuan Yi\",\n+  \"ik\", \"ipk\", \"Inupiaq\",\n+  \"io\", \"ido\", \"Ido\",\n+  \"is\", \"isl\", \"Icelandic\",\n+  \"it\", \"ita\", \"Italian\",\n+  \"iu\", \"iku\", \"Inuktitut\",\n+\n+  \"ja\", \"jpn\", \"Japanese\",\n+  \"jv\", \"jav\", \"Javanese\",\n+\n+  \"ka\", \"kat\", \"Georgian\",\n+  \"kg\", \"kon\", \"Kongo\",\n+  \"ki\", \"kik\", \"Kikuyu\",\n+  \"kj\", \"kua\", \"Kuanyama\",\n+  \"kk\", \"kaz\", \"Kazakh\",\n+  \"kl\", \"kal\", \"Kalaallisut\",\n+  \"km\", \"khm\", \"Central Khmer\",\n+  \"kn\", \"kan\", \"Kannada\",\n+  \"ko\", \"kor\", \"Korean\",\n+  \"kr\", \"kau\", \"Kanuri\",\n+  \"ks\", \"kas\", \"Kashmiri\",\n+  \"ku\", \"kur\", \"Kurdish\",\n+  \"kv\", \"kom\", \"Komi\",\n+  \"kw\", \"cor\", \"Cornish\",\n+  \"ky\", \"kir\", \"Kirghiz\",\n+\n+  \"la\", \"lat\", \"Latin\",\n+  \"lb\", \"ltz\", \"Luxembourgish\",\n+  \"lg\", \"lug\", \"Ganda\",\n+  \"li\", \"lim\", \"Limburgan\",\n+  \"ln\", \"lin\", \"Lingala\",\n+  \"lo\", \"lao\", \"Lao\",\n+  \"lt\", \"lit\", \"Lithuanian\",\n+  \"lu\", \"lub\", \"Luba-Katanga\",\n+  \"lv\", \"lav\", \"Latvian\",\n+\n+  \"mg\", \"mlg\", \"Malagasy\",\n+  \"mh\", \"mah\", \"Marshallese\",\n+  \"mi\", \"mri\", \"Maori\",\n+  \"mk\", \"mkd\", \"Macedonian\",\n+  \"ml\", \"mal\", \"Malayalam\",\n+  \"mn\", \"mon\", \"Mongolian\",\n+  \"mr\", \"mar\", \"Marathi\",\n+  \"ms\", \"msa\", \"Malay\",\n+  \"mt\", \"mlt\", \"Maltese\",\n+  \"my\", \"mya\", \"Burmese\",\n+\n+  \"na\", \"nau\", \"Nauru\",\n+  \"nb\", \"nob\", \"Norwegian Bokmal\",\n+  \"nd\", \"nde\", \"North Ndebele\",\n+  \"ne\", \"nep\", \"Nepali\",\n+  \"ng\", \"ndo\", \"Ndonga\",\n+  \"nl\", \"nld\", \"Dutch\",\n+  \"nn\", \"nno\", \"Norwegian Nynorsk\",\n+  \"no\", \"nor\", \"Norwegian\",\n+  \"nr\", \"nbl\", \"South Ndebele\",\n+  \"nv\", \"nav\", \"Navajo\",\n+  \"ny\", \"nya\", \"Nyanja\",\n+\n+  \"oc\", \"oci\", \"Occitan\",\n+  \"oj\", \"oji\", \"Ojibwa\",\n+  \"om\", \"orm\", \"Oromo\",\n+  \"or\", \"ori\", \"Oriya\",\n+  \"os\", \"oss\", \"Ossetian\",\n+\n+  \"pa\", \"pan\", \"Panjabi\",\n+  \"pi\", \"pli\", \"Pali\",\n+  \"pl\", \"pol\", \"Polish\",\n+  \"ps\", \"pus\", \"Pushto\",\n+  \"pt\", \"por\", \"Portuguese\",\n+\n+  \"qu\", \"que\", \"Quechua\",\n+\n+  \"rm\", \"roh\", \"Romansh\",\n+  \"rn\", \"run\", \"Rundi\",\n+  \"ro\", \"ron\", \"Romanian\",\n+  \"ru\", \"rus\", \"Russian\",\n+  \"rw\", \"kin\", \"Kinyarwanda\",\n+\n+  \"sa\", \"san\", \"Sanskrit\",\n+  \"sc\", \"srd\", \"Sardinian\",\n+  \"sd\", \"snd\", \"Sindhi\",\n+  \"se\", \"sme\", \"Northern Sami\",\n+  \"sg\", \"sag\", \"Sango\",\n+  \"sh\", \"hbs\", \"Serbo-Croatian\",\n+  \"si\", \"sin\", \"Sinhala\",\n+  \"sk\", \"slk\", \"Slovak\",\n+  \"sl\", \"slv\", \"Slovenian\",\n+  \"sm\", \"smo\", \"Samoan\",\n+  \"sn\", \"sna\", \"Shona\",\n+  \"so\", \"som\", \"Somali\",\n+  \"sq\", \"sqi\", \"Albanian\",\n+  \"sr\", \"srp\", \"Serbian\",\n+  \"ss\", \"ssw\", \"Swati\",\n+  \"st\", \"sot\", \"Southern Sotho\",\n+  \"su\", \"sun\", \"Sundanese\",\n+  \"sv\", \"swe\", \"Swedish\",\n+  \"sw\", \"swa\", \"Swahili\",\n+\n+  \"ta\", \"tam\", \"Tamil\",\n+  \"te\", \"tel\", \"Telugu\",\n+  \"tg\", \"tgk\", \"Tajik\",\n+  \"th\", \"tha\", \"Thai\",\n+  \"ti\", \"tir\", \"Tigrinya\",\n+  \"tk\", \"tuk\", \"Turkmen\",\n+  \"tl\", \"tgl\", \"Tagalog\",\n+  \"tn\", \"tsn\", \"Tswana\",\n+  \"to\", \"ton\", \"Tonga\",\n+  \"tr\", \"tur\", \"Turkish\",\n+  \"ts\", \"tso\", \"Tsonga\",\n+  \"tt\", \"tat\", \"Tatar\",\n+  \"tw\", \"twi\", \"Twi\",\n+  \"ty\", \"tah\", \"Tahitian\",\n+\n+  \"ug\", \"uig\", \"Uighur\",\n+  \"uk\", \"ukr\", \"Ukrainian\",\n+  \"ur\", \"urd\", \"Urdu\",\n+  \"uz\", \"uzb\", \"Uzbek\",\n+\n+  \"ve\", \"ven\", \"Venda\",\n+  \"vi\", \"vie\", \"Vietnamese\",\n+  \"vo\", \"vol\", \"Volapuk\",\n+\n+  \"wa\", \"wln\", \"Walloon\",\n+  \"wo\", \"wol\", \"Wolof\",\n+\n+  \"xh\", \"xho\", \"Xhosa\",\n+\n+  \"yi\", \"yid\", \"Yiddish\",\n+  \"yo\", \"yor\", \"Yoruba\",\n+\n+  \"za\", \"zha\", \"Zhuang\",\n+  \"zh\", \"zho\", \"Chinese\",\n+  \"zu\", \"zul\", \"Zulu\"\n+};\n+\n+/* Table containing equivalences between ISO_3166 alpha-2 codes and country\n+   names. This table has several entries for codes that have several valid\n+   country names. */\n+\n+static char* iso_3166[] =\n+{\n+  \"AU\", \"Australia\",\n+  \"AD\", \"Andorra\",\n+  \"AE\", \"United Arab Emirates\",\n+  \"AF\", \"Afghanistan\",\n+  \"AG\", \"Antigua and Barbuda\",\n+  \"AI\", \"Anguilla\",\n+  \"AL\", \"Albania\",\n+  \"AM\", \"Armenia\",\n+  \"AN\", \"Netherlands Antilles\",\n+  \"AO\", \"Angola\",\n+  \"AQ\", \"Antarctica\",\n+  \"AR\", \"Argentina\",\n+  \"AS\", \"American Samoa\",\n+  \"AT\", \"Austria\",\n+  \"AU\", \"Australia\",\n+  \"AW\", \"Aruba\",\n+  \"AX\", \"Aland Islands\",\n+  \"AZ\", \"Azerbaijan\",\n+\n+  \"BA\", \"Bosnia and Herzegovina\",\n+  \"BB\", \"Barbados\",\n+  \"BD\", \"Bangladesh\",\n+  \"BE\", \"Belgium\",\n+  \"BF\", \"Burkina Faso\",\n+  \"BG\", \"Bulgaria\",\n+  \"BH\", \"Bahrain\",\n+  \"BI\", \"Burundi\",\n+  \"BJ\", \"Benin\",\n+  \"BL\", \"Saint Barthe\u0301lemy\",\n+  \"BM\", \"Bermuda\",\n+  \"BN\", \"Brunei Darussalam\",\n+  \"BO\", \"Bolivia, Plurinational State of\",\n+  \"BQ\", \"Bonaire, Sint Eustatius and Saba\",\n+  \"BR\", \"Brazil\",\n+  \"BS\", \"Bahamas\",\n+  \"BT\", \"Bhutan\",\n+  \"BV\", \"Bouvet Island\",\n+  \"BW\", \"Botswana\",\n+  \"BY\", \"Belarus\",\n+  \"BZ\", \"Belize\",\n+\n+  \"CA\", \"Canada\",\n+  \"CC\", \"Cocos (Keeling) Islands\",\n+  \"CD\", \"Congo, Democratic Republic of the\",\n+  \"CF\", \"Central African Republic\",\n+  \"CG\", \"Congo\",\n+  \"CH\", \"Switzerland\",\n+  \"CI\", \"Co\u0302te d'Ivoire\",\n+  \"CK\", \"Cook Islands\",\n+  \"CL\", \"Chile\",\n+  \"CM\", \"Cameroon\",\n+  \"CN\", \"China\",\n+  \"CN\", \"People\u2019s Republic of China\",\n+  \"CN\", \"PR China\",\n+  \"CN\", \"PR-China\",\n+  \"CO\", \"Colombia\",\n+  \"CR\", \"Costa Rica\",\n+  \"CS\", \"Czechoslovakia\",\n+  \"CU\", \"Cuba\",\n+  \"CV\", \"Cape Verde\",\n+  \"CW\", \"Curac\u0327ao\",\n+  \"CX\", \"Christmas Island\",\n+  \"CY\", \"Cyprus\",\n+  \"CZ\", \"Czech Republic\",\n+\n+  \"DE\", \"Germany\",\n+  \"DJ\", \"Djibouti\",\n+  \"DK\", \"Denmark\",\n+  \"DM\", \"Dominica\",\n+  \"DO\", \"Dominican Republic\",\n+  \"DZ\", \"Algeria\",\n+\n+  \"EC\", \"Ecuador\",\n+  \"EE\", \"Estonia\",\n+  \"EG\", \"Egypt\",\n+  \"EH\", \"Western Sahara\",\n+  \"ER\", \"Eritrea\",\n+  \"ES\", \"Spain\",\n+  \"ET\", \"Ethiopia\",\n+\n+  \"FI\", \"Finland\",\n+  \"FG\", \"Fiji\",\n+  \"FK\", \"Falkland Islands (Malvinas)\",\n+  \"FM\", \"Micronesia, Federated States of\",\n+  \"FO\", \"Faroe Islands\",\n+  \"FR\", \"France\",\n+\n+  \"GA\", \"Gabon\",\n+  \"GB\", \"United Kingdom\",\n+  \"GB\", \"United-Kingdom\",\n+  \"GB\", \"England\",\n+  \"GB\", \"Britain\",\n+  \"GB\", \"Great Britain\",\n+  \"GD\", \"Grenada\",\n+  \"GE\", \"Georgia\",\n+  \"GF\", \"French Guiana\",\n+  \"GG\", \"Guernsey\",\n+  \"GH\", \"Ghana\",\n+  \"GI\", \"Gibraltar\",\n+  \"GL\", \"Greenland\",\n+  \"GM\", \"Gambia\",\n+  \"GN\", \"Guinea\",\n+  \"GP\", \"Guadeloupe\",\n+  \"GQ\", \"Equatorial Guinea\",\n+  \"GR\", \"Greece\",\n+  \"GS\", \"South Georgia and the South Sandwich Islands\",\n+  \"GT\", \"Guatemala\",\n+  \"GU\", \"Guam\",\n+  \"GW\", \"Guinea-Bissau\",\n+  \"GY\", \"Guyana\",\n+\n+  \"HK\", \"Hong Kong\",\n+  \"HK\", \"Hong-Kong\",\n+  \"HM\", \"Heard Island and McDonald Islands\",\n+  \"HN\", \"Honduras\",\n+  \"HR\", \"Croatia\",\n+  \"HT\", \"Haiti\",\n+  \"HU\", \"Hungary\",\n+\n+  \"ID\", \"Indonesia\",\n+  \"IE\", \"Ireland\",\n+  \"IL\", \"Israel\",\n+  \"IM\", \"Isle of Man\",\n+  \"IN\", \"India\",\n+  \"IO\", \"British Indian Ocean Territory\",\n+  \"IQ\", \"Iraq\",\n+  \"IR\", \"Iran\",\n+  \"IR\", \"Iran, Islamic Republic of\",\n+  \"IS\", \"Iceland\",\n+  \"IT\", \"Italy\",\n+\n+  \"JE\", \"Jersey\",\n+  \"JM\", \"Jamaica\",\n+  \"JO\", \"Jordan\",\n+  \"JP\", \"Japan\",\n+\n+  \"KE\", \"Kenya\",\n+  \"KG\", \"Kyrgyzstan\",\n+  \"KH\", \"Cambodia\",\n+  \"KI\", \"Kiribati\",\n+  \"KM\", \"Comoros\",\n+  \"KN\", \"Saint Kitts and Nevis\",\n+  \"KP\", \"Korea, Democratic People's Republic of\",\n+  \"KR\", \"Korea, Republic of\",\n+  \"KW\", \"Kuwait\",\n+  \"KY\", \"Cayman Islands\",\n+  \"KZ\", \"Kazakhstan\",\n+\n+  \"LA\", \"Lao People's Democratic Republic\",\n+  \"LB\", \"Lebanon\",\n+  \"LC\", \"Saint Lucia\",\n+  \"LI\", \"Liechtenstein\",\n+  \"LK\", \"Sri Lanka\",\n+  \"LR\", \"Liberia\",\n+  \"LS\", \"Lesotho\",\n+  \"LT\", \"Lithuania\",\n+  \"LU\", \"Luxembourg\",\n+  \"LV\", \"Latvia\",\n+  \"LY\", \"Libya\",\n+\n+  \"MA\", \"Morocco\",\n+  \"MC\", \"Monaco\",\n+  \"MD\", \"Moldova, Republic of\",\n+  \"ME\", \"Montenegro\",\n+  \"MF\", \"Saint Martin\",\n+  \"MG\", \"Madagascar\",\n+  \"MH\", \"Marshall Islands\",\n+  \"MK\", \"Macedonia\",\n+  \"ML\", \"Mali\",\n+  \"MM\", \"Myanmar\",\n+  \"MN\", \"Mongolia\",\n+  \"MO\", \"Macao\",\n+  \"MP\", \"Northern Mariana Islands\",\n+  \"MQ\", \"Martinique\",\n+  \"MR\", \"Mauritania\",\n+  \"MS\", \"Montserrat\",\n+  \"MT\", \"Malta\",\n+  \"MU\", \"Mauritius\",\n+  \"MV\", \"Maldives\",\n+  \"MW\", \"Malawi\",\n+  \"MX\", \"Mexico\",\n+  \"MY\", \"Malaysia\",\n+  \"MZ\", \"Mozambique\",\n+\n+  \"NA\", \"Namibia\",\n+  \"NC\", \"New Caledonia\",\n+  \"NE\", \"Niger\",\n+  \"NF\", \"Norfolk Island\",\n+  \"NG\", \"Nigeria\",\n+  \"NI\", \"Nicaragua\",\n+  \"NL\", \"Netherlands\",\n+  \"NL\", \"Holland\",\n+  \"NO\", \"Norway\",\n+  \"NP\", \"Nepal\",\n+  \"NR\", \"Nauru\",\n+  \"NU\", \"Niue\",\n+  \"NZ\", \"New Zealand\",\n+  \"NZ\", \"New-Zealand\",\n+\n+  \"OM\", \"Oman\",\n+\n+  \"PA\", \"Panama\",\n+  \"PE\", \"Peru\",\n+  \"PF\", \"French Polynesia\",\n+  \"PG\", \"Papua New Guinea\",\n+  \"PH\", \"Philippines\",\n+  \"PK\", \"Pakistan\",\n+  \"PL\", \"Poland\",\n+  \"PM\", \"Saint Pierre and Miquelon\",\n+  \"PN\", \"Pitcairn\",\n+  \"PR\", \"Puerto Rico\",\n+  \"PS\", \"Palestine, State of\",\n+  \"PT\", \"Portugal\",\n+  \"PW\", \"Palau\",\n+  \"PY\", \"Paraguay\",\n+\n+  \"QA\", \"Qatar\",\n+\n+  \"RE\", \"Re\u0301union\",\n+  \"RO\", \"Romania\",\n+  \"RS\", \"Serbia\",\n+  \"RU\", \"Russian Federation\",\n+  \"RW\", \"Rwanda\",\n+\n+  \"SA\", \"Saudi Arabia\",\n+  \"SB\", \"Solomon Islands\",\n+  \"SC\", \"Seychelles\",\n+  \"SD\", \"Sudan\",\n+  \"SE\", \"Sweden\",\n+  \"SG\", \"Singapore\",\n+  \"SH\", \"Saint Helena, Ascension and Tristan da Cunha\",\n+  \"SI\", \"Slovenia\",\n+  \"SJ\", \"Svalbard and Jan Mayen\",\n+  \"SK\", \"Slovakia\",\n+  \"SL\", \"Sierra Leone\",\n+  \"SM\", \"San Marino\",\n+  \"SN\", \"Senegal\",\n+  \"SO\", \"Somalia\",\n+  \"SR\", \"Suriname\",\n+  \"SS\", \"South Sudan\",\n+  \"SV\", \"El Salvador\",\n+  \"SX\", \"Sint Maarten (Dutch part)\",\n+  \"SY\", \"Syrian Arab Republic\",\n+  \"SZ\", \"Swaziland\",\n+\n+  \"TC\", \"Turks and Caicos Islands\",\n+  \"TD\", \"Chad\",\n+  \"TF\", \"French Southern Territories\",\n+  \"TG\", \"Togo\",\n+  \"TH\", \"Thailand\",\n+  \"TJ\", \"Tajikistan\",\n+  \"TK\", \"Tokelau\",\n+  \"TL\", \"Timor-Leste\",\n+  \"TM\", \"Turkmenistan\",\n+  \"TN\", \"Tunisia\",\n+  \"TO\", \"Tonga\",\n+  \"TP\", \"East Timor\",\n+  \"TR\", \"Turkey\",\n+  \"TT\", \"Trinidad and Tobago\",\n+  \"TV\", \"Tuvalu\",\n+  \"TW\", \"Taiwan\",\n+  \"TW\", \"Taiwan, Province of China\",\n+  \"TZ\", \"Tanzania\",\n+  \"TZ\", \"Tanzania, United Republic of\",\n+\n+  \"UA\", \"Ukraine\",\n+  \"UG\", \"Uganda\",\n+  \"UM\", \"United States Minor Outlying Islands\",\n+  \"US\", \"United States\",\n+  \"US\", \"United States of America\",\n+  \"US\", \"United-States\"\n+  \"UY\", \"Uruguay\",\n+  \"UZ\", \"Uzbekistan\",\n+\n+  \"VA\", \"Holy See (Vatican City State)\",\n+  \"VC\", \"Saint Vincent and the Grenadines\",\n+  \"VE\", \"Venezuela\",\n+  \"VE\", \"Venezuela, Bolivarian Republic of\",\n+  \"VG\", \"Virgin Islands, British\",\n+  \"VI\", \"Virgin Islands, U.S.\",\n+  \"VN\", \"Viet Nam\",\n+  \"VU\", \"Vanuatu\",\n+  \"WF\", \"Wallis and Futuna\",\n+  \"WS\", \"Samoa\",\n+\n+  \"YE\", \"Yemen\",\n+  \"YT\", \"Mayotte\",\n+  \"YU\", \"Yugoslavia\",\n+\n+  \"ZA\", \"South Africa\",\n+  \"ZM\", \"Zambia\",\n+  \"ZW\", \"Zimbabwe\"\n+};\n+\n+/* Utility function to perform case insensitive string comparison. Returns 1\n+   if both strings are equal and 0 otherwise. */\n+\n+static int\n+str_case_equals (const char *s1, const char *s2) {\n+  while (*s1 != '\\0' && *s2 != '\\0' && tolower(*s1) == tolower(*s2)) {\n+    s1++;\n+    s2++;\n+  }\n+\n+  return (*s1 == '\\0') && (*s2 == '\\0');\n+}\n+\n+/* Utility function to copy length characters of a string. The target string\n+   must have space to store the extra string null terminator. */\n+\n+static void\n+str_copy (char *target, char *source, int length) {\n+  for (; length > 0; source++, target++, length--) {\n+    *target = *source;\n+  }\n+\n+  *target = '\\0';\n+}\n+\n+/* Utility function to search for the last byte of the lc_all string to be\n+   processed. Required because in some targets (for example, AIX), the\n+   string returned by setlocale() has duplicates. */\n+\n+static char*\n+str_get_last_byte (char *lc_all) {\n+  char* first_space = NULL;\n+  char* second_space = NULL;\n+  char* last_byte = NULL;\n+  char* s1 = lc_all;\n+\n+  /* Search for the 1st space (if any) */\n+  while (*s1 != ' ' && *s1 != '\\0')\n+    s1++;\n+\n+  if (*s1 == '\\0') {\n+    last_byte = s1;\n+\n+  } else {\n+    first_space = s1;\n+\n+    /* Skip this space and search for the 2nd one (if available) */\n+    s1++;\n+    while (*s1 != ' ' && *s1 != '\\0')\n+      s1++;\n+\n+    if (*s1 == '\\0') {\n+      last_byte = s1;\n+\n+    } else {\n+      second_space=s1;\n+\n+      /* Search for the last byte of lc_all */\n+      while (*s1 != '\\0')\n+        s1++;\n+\n+      last_byte = s1;\n+\n+      /* Check if the two strings match */\n+      {\n+        int len1 = first_space - lc_all;\n+        int len2 = second_space - first_space - 1;\n+\n+        if (len1 == len2) {\n+          char* p1 = lc_all;\n+          char* p2 = first_space + 1;\n+\n+          /* Compare their contents */\n+          while (*p1 == *p2 && p2 != second_space) {\n+            p1++;\n+            p2++;\n+          }\n+\n+          /* if the two strings match then update the last byte */\n+\n+          if (p2 == second_space) {\n+            last_byte = first_space;\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  return last_byte;\n+}\n+\n+/* Utility function to search in the iso_639_1 table for an iso-639-1 code;\n+   returns the corresponding iso-639-3 code or NULL if not found. */\n+\n+static char*\n+iso_639_1_to_639_3(char* iso_639_1_code) {\n+  int len = sizeof(iso_639)/sizeof(iso_639[0]);\n+  char **p = iso_639;\n+  int j;\n+\n+  for (j=0; j < len/3; j++) {\n+    char* s1 = iso_639_1_code;\n+    char* s2 = *p;\n+\n+    if (s1[0]==s2[0] && s1[1]==s2[1]) {\n+      p++;\n+      return *p;\n+    }\n+\n+    p = p + 3;\n+  }\n+\n+  return NULL;\n+}\n+\n+/* Utility function to search in the iso_639_1 table for a language name;\n+   returns the corresponding iso-639-3 code or NULL if not found. */\n+\n+static char*\n+language_name_to_639_3(char* name) {\n+  int len = sizeof(iso_639)/sizeof(iso_639[0]);\n+  char **p = iso_639;\n+  int j;\n+\n+  p = p + 2;\n+  for (j=0; j < len/3; j++) {\n+    if (str_case_equals(name, *p)) {\n+      p--;\n+      return *p;\n+    }\n+\n+    p = p + 3;\n+  }\n+\n+  return NULL;\n+}\n+\n+/* Utility function to search in the iso_3166 table for a country name;\n+   returns the corresponding iso-3166 code or NULL if not found. */\n+\n+static char*\n+country_name_to_3166 (char* name) {\n+  int len = sizeof(iso_3166)/sizeof(iso_3166[0]);\n+  char **p = iso_3166;\n+  int j;\n+\n+  p++;\n+  for (j=0; j < len/2; j++) {\n+    if (str_case_equals(name, *p)) {\n+      p--;\n+      return *p;\n+    }\n+\n+    p = p + 2;\n+  }\n+\n+  return NULL;\n+}\n+\n /*\n   c_get_language_code needs to fill in the Alpha-3 encoding of the\n   language code (3 lowercase letters). That should be \"und\" if the\n   language is unknown. [see Ada.Locales]\n */\n-void c_get_language_code (char4 p) {\n-  char *r = \"und\";\n-  for (; *r != '\\0'; p++, r++)\n-    *p = *r;\n+void\n+c_get_language_code (char4 p) {\n+  char* Saved_Locale = setlocale(LC_ALL, NULL);\n+  char  iso_639_3_code[] = \"und\";                        /* Language Unknown */\n+  char* lc_all;\n+  char* result;\n+\n+  /* Get locales set in the environment */\n+\n+  setlocale(LC_ALL, \"\");\n+  lc_all = setlocale(LC_ALL, NULL);\n+\n+  /* The string returned by setlocale has the following format:\n+\n+           language[_territory][.code-set][@modifier]\n+\n+     where language is an ISO 639 language code, territory is an ISO 3166\n+     country code, and codeset is a character set or encoding identifier\n+     like ISO-8859-1 or UTF-8.\n+  */\n+\n+  if (lc_all != NULL) {\n+    char* s = lc_all;\n+    int lang_length = 0;\n+\n+    /* Copy the language part (which may be an ISO-639-1 code, an ISO-639-3\n+       code, or a language name) adding a string terminator */\n+\n+    while (*s != '_' && *s != '.' && *s != '@' && *s != '\\0')\n+      s++;\n+\n+    lang_length = s - lc_all;\n+\n+    /* Handle conversion of ISO-639-1 to ISO-639-3 */\n+\n+    if (lang_length == 2) {\n+      char  iso_639_1[3];\n+      char* to_iso_639_3;\n+\n+      /* Duplicate the ISO-639-1 code adding the null terminator required to\n+         search for the equivalent ISO-639-3 code; we cannot just append the\n+         null terminator since the pointer may reference non-writable memory.\n+      */\n+\n+      str_copy(iso_639_1, lc_all, lang_length);\n+      to_iso_639_3 = iso_639_1_to_639_3(iso_639_1);\n+\n+      if (to_iso_639_3)\n+        str_copy(iso_639_3_code, to_iso_639_3, 3);\n+\n+    /* Copy the ISO-639-3 code (adding a null terminator) */\n+\n+    } else if (lang_length == 3) {\n+      str_copy(iso_639_3_code, lc_all, lang_length);\n+\n+    /* Handle conversion of language name to ISO-639-3 */\n+\n+    } else if (lang_length > 3) {\n+      char  name_copy[lang_length + 1];\n+      char* to_iso_639_3;\n+\n+      /* Duplicate the ISO-639-1 code adding the null terminator required to\n+         search for the equivalent ISO-639-3 code; we cannot just append the\n+         null terminator since the pointer may reference non-writable memory.\n+      */\n+\n+      str_copy(name_copy, lc_all, lang_length);\n+      to_iso_639_3 = language_name_to_639_3(name_copy);\n+\n+      if (to_iso_639_3)\n+        str_copy(iso_639_3_code, to_iso_639_3, 3);\n+    }\n+  }\n+\n+  /* Copy out the computed ISO_639_3 code */\n+\n+  result = iso_639_3_code;\n+  for (; *result != '\\0'; p++, result++)\n+    *p = *result;\n+\n+  /* Restore the original locale settings */\n+\n+  setlocale(LC_ALL, Saved_Locale);\n+\n+  return;\n }\n \n /*\n   c_get_country_code needs to fill in the Alpha-2 encoding of the\n   country code (2 uppercase letters). That should be \"ZZ\" if the\n   country is unknown. [see Ada.Locales]\n */\n-void c_get_country_code (char4 p) {\n-  char *r = \"ZZ\";\n-  for (; *r != '\\0'; p++, r++)\n-    *p = *r;\n+void\n+c_get_country_code (char4 p) {\n+  char* Saved_Locale = setlocale(LC_ALL, NULL);\n+  char  iso_3166_code[] = \"ZZ\";                           /* Country Unknown */\n+  char* lc_all;\n+  char* result;\n+\n+  /* Get locales set in the environment */\n+\n+  setlocale(LC_ALL, \"\");\n+  lc_all = setlocale(LC_ALL, NULL);\n+\n+  /* The string returned by setlocale has the following format:\n+\n+           language[_territory][.code-set][@modifier]\n+\n+     where language is an ISO 639 language code, territory is an ISO 3166\n+     country code, and codeset is a character set or encoding identifier\n+     like ISO-8859-1 or UTF-8.\n+  */\n+\n+  if (lc_all != NULL) {\n+    char* s1 = lc_all;\n+    char* s2 = NULL;\n+    char* last_byte = str_get_last_byte(lc_all);\n+    int country_length = 0;\n+\n+    /* Search for the beginning of the country code */\n+\n+    s1 = lc_all;\n+    while (*s1 != '_' && *s1 != '.' && *s1 != '@' && s1 != last_byte)\n+      s1++;\n+\n+    if (*s1 == '_') {\n+      s1++;\n+      s2 = s1;\n+\n+      while (*s2 != '.' && *s2 != '@' && s2 != last_byte)\n+        s2++;\n+\n+      country_length = s2 - s1;\n+\n+      if (country_length == 2) {\n+        str_copy(iso_3166_code, s1, country_length);\n+\n+      /* setlocale returned us the country name */\n+\n+      } else if (country_length > 3) {\n+        char  name_copy[country_length + 1];\n+        char* to_3166;\n+\n+        str_copy(name_copy, s1, country_length);\n+        to_3166 = country_name_to_3166(name_copy);\n+\n+        if (to_3166)\n+          str_copy(iso_3166_code, to_3166, 2);\n+      }\n+    }\n+  }\n+\n+  /* Copy out the computed ISO_3166 code */\n+\n+  result = iso_3166_code;\n+  for (; *result != '\\0'; p++, result++)\n+    *p = *result;\n+\n+  /* Restore the original locale settings */\n+\n+  setlocale(LC_ALL, Saved_Locale);\n+\n+  return;\n }"}]}