{"sha": "14e75608240f1df215e003c08b8fdbe4a6a9844c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRlNzU2MDgyNDBmMWRmMjE1ZTAwM2MwOGI4ZmRiZTRhNmE5ODQ0Yw==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2020-04-14T18:13:47Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-17T08:14:12Z"}, "message": "[Ada] Various typo corrections plus minor reformatting\n\n2020-06-17  Gary Dismukes  <dismukes@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch3.ads (Build_Access_Subprogram_Wrapper_Body): Adjust\n\tcolon columns; reformat comment.\n\t* exp_ch3.adb\n\t(Build_Access_Subprogram_Wrapper_Body): Likewise.\n\t* sem_ch3.adb (Build_Access_Subprogram_Wrapper): Reformat spec\n\tcomment and reformat comment in body.\n\t(Analyze_Full_Type_Declaration): Reformat comment.\n\t(Replace_Type_Name): Fixed three typos, plus reformatting of\n\tcomment.\n\t* sem_prag.adb (Analyze_Pre_Post_Condition): Fix typos.\n\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Edit comments:\n\tremove hyphen, add missing word.", "tree": {"sha": "4938955ee7fdec1634b6bb3ec5149c076de1c6d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4938955ee7fdec1634b6bb3ec5149c076de1c6d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14e75608240f1df215e003c08b8fdbe4a6a9844c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e75608240f1df215e003c08b8fdbe4a6a9844c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14e75608240f1df215e003c08b8fdbe4a6a9844c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14e75608240f1df215e003c08b8fdbe4a6a9844c/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c602003b6a2552c01d77fd1fdd5f12848743075f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c602003b6a2552c01d77fd1fdd5f12848743075f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c602003b6a2552c01d77fd1fdd5f12848743075f"}], "stats": {"total": 68, "additions": 33, "deletions": 35}, "files": [{"sha": "15b88c3a87b01d7862927d8938c8c1a21dded596", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e75608240f1df215e003c08b8fdbe4a6a9844c/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e75608240f1df215e003c08b8fdbe4a6a9844c/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=14e75608240f1df215e003c08b8fdbe4a6a9844c", "patch": "@@ -520,20 +520,21 @@ package body Exp_Ch3 is\n    ------------------------------------------\n \n    procedure Build_Access_Subprogram_Wrapper_Body\n-     (Decl : Node_Id;\n+     (Decl     : Node_Id;\n       New_Decl : Node_Id)\n    is\n       Loc       : constant Source_Ptr := Sloc (Decl);\n-      Actuals   : constant List_Id := New_List;\n-      Type_Def  : constant Node_Id := Type_Definition (Decl);\n-      Type_Id   : constant Entity_Id := Defining_Identifier (Decl);\n-      Spec_Node : constant Node_Id :=\n-        New_Copy_Tree (Specification (New_Decl));\n+      Actuals   : constant List_Id    := New_List;\n+      Type_Def  : constant Node_Id    := Type_Definition (Decl);\n+      Type_Id   : constant Entity_Id  := Defining_Identifier (Decl);\n+      Spec_Node : constant Node_Id    :=\n+                    New_Copy_Tree (Specification (New_Decl));\n \n       Act       : Node_Id;\n       Body_Node : Node_Id;\n       Call_Stmt : Node_Id;\n       Ptr       : Entity_Id;\n+\n    begin\n       if not Expander_Active then\n          return;\n@@ -543,8 +544,8 @@ package body Exp_Ch3 is\n         Make_Defining_Identifier\n           (Loc, Chars (Defining_Unit_Name (Spec_Node))));\n \n-      --  Create List of actuals for indirect call. The last\n-      --  parameter of the subprogram is the access value itself.\n+      --  Create List of actuals for indirect call. The last parameter of the\n+      --  subprogram is the access value itself.\n \n       Act := First (Parameter_Specifications (Spec_Node));\n "}, {"sha": "fcbe83befaa1a8a6575774d545dabf97e0f9754e", "filename": "gcc/ada/exp_ch3.ads", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e75608240f1df215e003c08b8fdbe4a6a9844c/gcc%2Fada%2Fexp_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e75608240f1df215e003c08b8fdbe4a6a9844c/gcc%2Fada%2Fexp_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.ads?ref=14e75608240f1df215e003c08b8fdbe4a6a9844c", "patch": "@@ -47,15 +47,14 @@ package Exp_Ch3 is\n    --  Add a field _parent in the extension part of the record\n \n    procedure Build_Access_Subprogram_Wrapper_Body\n-     (Decl : Node_Id;\n+     (Decl     : Node_Id;\n       New_Decl : Node_Id);\n-   --  Build the wrapper body, which holds the indirect call through\n-   --  an access_to_subprogram, and whose expansion incorporates the\n-   --  contracts of the access type declaration. Called from Build_\n-   --  Access_Subprogram_Wrapper.\n-   --  Building the wrapper is done during analysis to perform proper\n-   --  semantic checks on the relevant aspects. The wrapper body could\n-   --  be simplified to a null body when expansion is disabled ???\n+   --  Build the wrapper body, which holds the indirect call through an access-\n+   --  to-subprogram, and whose expansion incorporates the contracts of the\n+   --  access type declaration. Called from Build_Access_Subprogram_Wrapper.\n+   --  Building the wrapper is done during analysis to perform proper semantic\n+   --  checks on the relevant aspects. The wrapper body could be simplified to\n+   --  a null body when expansion is disabled ???\n \n    procedure Build_Discr_Checking_Funcs (N : Node_Id);\n    --  Builds function which checks whether the component name is consistent"}, {"sha": "63d0c6ddd391df34cd951186abf324470682ac06", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e75608240f1df215e003c08b8fdbe4a6a9844c/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e75608240f1df215e003c08b8fdbe4a6a9844c/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=14e75608240f1df215e003c08b8fdbe4a6a9844c", "patch": "@@ -93,9 +93,9 @@ package body Sem_Ch3 is\n    --  record type.\n \n    procedure Build_Access_Subprogram_Wrapper (Decl : Node_Id);\n-   --  When an access_to_subprogram type has pre/postconditions, we\n-   --  build a subprogram that includes these contracts and is invoked\n-   --  by any indirect call through the corresponding access type.\n+   --  When an access-to-subprogram type has pre/postconditions, we build a\n+   --  subprogram that includes these contracts and is invoked by an indirect\n+   --  call through the corresponding access type.\n \n    procedure Build_Derived_Type\n      (N             : Node_Id;\n@@ -3142,9 +3142,9 @@ package body Sem_Ch3 is\n                Validate_Access_Type_Declaration (T, N);\n \n                --  If the type has contracts, we create the corresponding\n-               --  wrapper at once, before analyzing the aspect\n-               --  specifications, so that pre/postconditions can be\n-               --  handled directly on the generated wrapper.\n+               --  wrapper at once, before analyzing the aspect specifications,\n+               --  so that pre/postconditions can be handled directly on the\n+               --  generated wrapper.\n \n                if Ada_Version >= Ada_2020\n                  and then Present (Aspect_Specifications (N))\n@@ -6483,13 +6483,11 @@ package body Sem_Ch3 is\n       Spec      : Node_Id;\n \n       procedure Replace_Type_Name (Expr : Node_Id);\n-      --  In the expressions for contract aspects, replace\n-      --  occurrences of the access type with the name of the\n-      --  subprogram entity, as needed, e.g. for 'Result.\n-      --  Apects that are not contracts 9e.g. Size or Aligment)\n-      --  remain on the originsl access type declaration.\n-      --  What about expanded names denoting formals, whose prefix\n-      --  in the source is the type name ???\n+      --  In the expressions for contract aspects, replace occurrences of the\n+      --  access type with the name of the subprogram entity, as needed, e.g.\n+      --  for 'Result. Aspects that are not contracts, e.g. Size or Alignment)\n+      --  remain on the original access type declaration. What about expanded\n+      --  names denoting formals, whose prefix in source is the type name ???\n \n       -----------------------\n       -- Replace_Type_Name --\n@@ -6570,8 +6568,8 @@ package body Sem_Ch3 is\n          Next (Form_P);\n       end loop;\n \n-      --  Add to parameter specifications the access parameter that\n-      --  is passed in from an indirect call.\n+      --  Add to parameter specifications the access parameter that is passed\n+      --  in from an indirect call.\n \n       Append (\n          Make_Parameter_Specification (Loc,"}, {"sha": "740e3eaa234c3b016f0d89fbd27bd0c609e964f2", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e75608240f1df215e003c08b8fdbe4a6a9844c/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e75608240f1df215e003c08b8fdbe4a6a9844c/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=14e75608240f1df215e003c08b8fdbe4a6a9844c", "patch": "@@ -4774,8 +4774,8 @@ package body Sem_Prag is\n          then\n             null;\n \n-         --  Access_To_Subprogram type can have pre/postconditions, but\n-         --  these are trasnfered to the generated subprogram wrapper and\n+         --  An access-to-subprogram type can have pre/postconditions, but\n+         --  these are transferred to the generated subprogram wrapper and\n          --  analyzed there.\n \n          --  Otherwise the placement of the pragma is illegal"}, {"sha": "5e9c61641318f7af300b0c5e997bc22b2bf1b5f9", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14e75608240f1df215e003c08b8fdbe4a6a9844c/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14e75608240f1df215e003c08b8fdbe4a6a9844c/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=14e75608240f1df215e003c08b8fdbe4a6a9844c", "patch": "@@ -3698,14 +3698,14 @@ package body Sem_Warn is\n       --  out to C that is known to denote the same object (RM 6.4.1(6.15/3))\n       --  This has been clarified in AI12-0216 to indicate that the illegality\n       --  only occurs if both formals are of an elementary type, because of the\n-      --  non-determinism on the write-back of the corresponding actuals.\n+      --  nondeterminism on the write-back of the corresponding actuals.\n       --  Earlier versions of the language made it illegal if only one of the\n       --  actuals was an elementary parameter that overlapped a composite\n       --  actual, and both were writable.\n \n       --  If appropriate warning switch is set, we also report warnings on\n       --  overlapping parameters that are composite types. Users find these\n-      --  warnings useful, and they used in style guides.\n+      --  warnings useful, and they are used in style guides.\n \n       --  It is also worthwhile to warn on overlaps of composite objects when\n       --  only one of the formals is (in)-out. Note that the RM rule above is"}]}