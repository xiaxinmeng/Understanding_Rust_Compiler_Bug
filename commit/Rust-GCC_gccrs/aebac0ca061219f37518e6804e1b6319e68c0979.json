{"sha": "aebac0ca061219f37518e6804e1b6319e68c0979", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWViYWMwY2EwNjEyMTlmMzc1MThlNjgwNGUxYjYzMTllNjhjMDk3OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-12-15T03:24:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-12-15T03:24:05Z"}, "message": "arm-linux: Add libitm support.\n\n\t* config/arm/hwcap.h, config/arm/hwcap.cc: New files.\n\t* config/arm/sjlj.S, config/arm/target.h: New files.\n\t* config/generic/asmcfi.h (cfi_adjust_cfa_offset): New.\n\t(cfi_rel_offset): New.\n\t* config/linux/futex_bits.h: New file.\n\t* config/linux/futex.cc: Include futex_bits.h here...\n\t* config/linux/futex.h: ... not here.\n\t* Makefile.am (libitm_la_SOURCES) <ARCH_ARM>: Add hwcap.cc.\n\t* configure.ac (ARCH_AM): New conditional.\n\t* Makefile.in, configure: Rebuild.\n\t* configure.tgt: Handle ARM.\n\nFrom-SVN: r182355", "tree": {"sha": "d69d530d9b08693c960ebf681af1cb7de90883dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d69d530d9b08693c960ebf681af1cb7de90883dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aebac0ca061219f37518e6804e1b6319e68c0979", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aebac0ca061219f37518e6804e1b6319e68c0979", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aebac0ca061219f37518e6804e1b6319e68c0979", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aebac0ca061219f37518e6804e1b6319e68c0979/comments", "author": null, "committer": null, "parents": [{"sha": "cc50a1e14ed07a9f2031809aa9225dc6739267ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc50a1e14ed07a9f2031809aa9225dc6739267ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc50a1e14ed07a9f2031809aa9225dc6739267ab"}], "stats": {"total": 439, "additions": 422, "deletions": 17}, "files": [{"sha": "ea535faedd7f8441b410fae1bb462ff16ab10479", "filename": "libitm/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=aebac0ca061219f37518e6804e1b6319e68c0979", "patch": "@@ -1,3 +1,17 @@\n+2011-12-14  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/arm/hwcap.h, config/arm/hwcap.cc: New files.\n+\t* config/arm/sjlj.S, config/arm/target.h: New files.\n+\t* config/generic/asmcfi.h (cfi_adjust_cfa_offset): New.\n+\t(cfi_rel_offset): New.\n+\t* config/linux/futex_bits.h: New file.\n+\t* config/linux/futex.cc: Include futex_bits.h here...\n+\t* config/linux/futex.h: ... not here.\n+\t* Makefile.am (libitm_la_SOURCES) <ARCH_ARM>: Add hwcap.cc.\n+\t* configure.ac (ARCH_AM): New conditional.\n+\t* Makefile.in, configure: Rebuild.\n+\t* configure.tgt: Handle ARM.\n+\n 2011-12-13  Richard Henderson  <rth@redhat.com>\n \n \t* config/posix/rwlock.cc (gtm_rwlock::write_lock_generic): Fix"}, {"sha": "d41702614fd0133fecac6ace7e119ab78ad19a69", "filename": "libitm/Makefile.am", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FMakefile.am?ref=aebac0ca061219f37518e6804e1b6319e68c0979", "patch": "@@ -62,6 +62,9 @@ libitm_la_SOURCES = \\\n \tquery.cc retry.cc rwlock.cc useraction.cc util.cc \\\n \tsjlj.S tls.cc method-serial.cc method-gl.cc\n \n+if ARCH_ARM\n+libitm_la_SOURCES += hwcap.cc\n+endif\n if ARCH_X86\n libitm_la_SOURCES += x86_sse.cc x86_avx.cc\n x86_sse.lo : XCFLAGS += -msse"}, {"sha": "5305f4ce8c572bf1afebb3462a7952b37be647b4", "filename": "libitm/Makefile.in", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FMakefile.in?ref=aebac0ca061219f37518e6804e1b6319e68c0979", "patch": "@@ -36,8 +36,9 @@ POST_UNINSTALL = :\n build_triplet = @build@\n host_triplet = @host@\n target_triplet = @target@\n-@ARCH_X86_TRUE@am__append_1 = x86_sse.cc x86_avx.cc\n-@ARCH_FUTEX_TRUE@am__append_2 = futex.cc\n+@ARCH_ARM_TRUE@am__append_1 = hwcap.cc\n+@ARCH_X86_TRUE@am__append_2 = x86_sse.cc x86_avx.cc\n+@ARCH_FUTEX_TRUE@am__append_3 = futex.cc\n subdir = .\n DIST_COMMON = $(am__configure_deps) $(srcdir)/../config.guess \\\n \t$(srcdir)/../config.sub $(srcdir)/../depcomp \\\n@@ -99,15 +100,16 @@ libitm_la_LIBADD =\n am__libitm_la_SOURCES_DIST = aatree.cc alloc.cc alloc_c.cc \\\n \talloc_cpp.cc barrier.cc beginend.cc clone.cc eh_cpp.cc \\\n \tlocal.cc query.cc retry.cc rwlock.cc useraction.cc util.cc \\\n-\tsjlj.S tls.cc method-serial.cc method-gl.cc x86_sse.cc \\\n-\tx86_avx.cc futex.cc\n-@ARCH_X86_TRUE@am__objects_1 = x86_sse.lo x86_avx.lo\n-@ARCH_FUTEX_TRUE@am__objects_2 = futex.lo\n+\tsjlj.S tls.cc method-serial.cc method-gl.cc hwcap.cc \\\n+\tx86_sse.cc x86_avx.cc futex.cc\n+@ARCH_ARM_TRUE@am__objects_1 = hwcap.lo\n+@ARCH_X86_TRUE@am__objects_2 = x86_sse.lo x86_avx.lo\n+@ARCH_FUTEX_TRUE@am__objects_3 = futex.lo\n am_libitm_la_OBJECTS = aatree.lo alloc.lo alloc_c.lo alloc_cpp.lo \\\n \tbarrier.lo beginend.lo clone.lo eh_cpp.lo local.lo query.lo \\\n \tretry.lo rwlock.lo useraction.lo util.lo sjlj.lo tls.lo \\\n \tmethod-serial.lo method-gl.lo $(am__objects_1) \\\n-\t$(am__objects_2)\n+\t$(am__objects_2) $(am__objects_3)\n libitm_la_OBJECTS = $(am_libitm_la_OBJECTS)\n DEFAULT_INCLUDES = -I.@am__isrc@\n depcomp = $(SHELL) $(top_srcdir)/../depcomp\n@@ -376,7 +378,8 @@ libitm_la_LDFLAGS = $(libitm_version_info) $(libitm_version_script)\n libitm_la_SOURCES = aatree.cc alloc.cc alloc_c.cc alloc_cpp.cc \\\n \tbarrier.cc beginend.cc clone.cc eh_cpp.cc local.cc query.cc \\\n \tretry.cc rwlock.cc useraction.cc util.cc sjlj.S tls.cc \\\n-\tmethod-serial.cc method-gl.cc $(am__append_1) $(am__append_2)\n+\tmethod-serial.cc method-gl.cc $(am__append_1) $(am__append_2) \\\n+\t$(am__append_3)\n \n # Automake Documentation:\n # If your package has Texinfo files in many directories, you can use the\n@@ -505,6 +508,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clone.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eh_cpp.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/futex.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hwcap.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/local.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/method-gl.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/method-serial.Plo@am__quote@"}, {"sha": "007c10e7a4ec3ca7304a40376d6d7911552f0271", "filename": "libitm/config/arm/hwcap.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfig%2Farm%2Fhwcap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfig%2Farm%2Fhwcap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Farm%2Fhwcap.cc?ref=aebac0ca061219f37518e6804e1b6319e68c0979", "patch": "@@ -0,0 +1,67 @@\n+/* Copyright (C) 2011 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson <rth@redhat.com>.\n+\n+   This file is part of the GNU Transactional Memory Library (libitm).\n+\n+   Libitm is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   Libitm is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* This file initializes GTM_hwcap in some os-specific way to indicate\n+   what ISA extensions are present for ARM.  */\n+\n+#include \"libitm_i.h\"\n+#include \"hwcap.h\"\n+\n+/* Begin by defaulting to whatever options were given to the compiler.  */\n+int GTM_hwcap HIDDEN = 0\n+#ifdef __VFP_FP__\n+  | HWCAP_ARM_VFP\n+#endif\n+#ifdef __IWMMXT__\n+  | HWCAP_ARM_IWMMXT\n+#endif\n+  ;\n+\n+#ifdef __linux__\n+#include <unistd.h>\n+#include <sys/fcntl.h>\n+#include <elf.h>\n+\n+static void __attribute__((constructor))\n+init_gtm_hwcap(void)\n+{\n+  int fd = open (\"/proc/self/auxv\", O_RDONLY);\n+  if (fd < 0)\n+    return;\n+\n+  Elf32_auxv_t pairs[512];\n+  ssize_t rlen = read (fd, pairs, sizeof(pairs));\n+  close (fd);\n+  if (rlen < 0)\n+    return;\n+\n+  size_t n = (size_t)rlen / sizeof(pairs[0]);\n+  for (size_t i = 0; i < n; ++i)\n+    if (pairs[i].a_type == AT_HWCAP)\n+      {\n+\tGTM_hwcap = pairs[i].a_un.a_val;\n+\treturn;\n+      }\n+}\n+#endif"}, {"sha": "16e4034767c755ff2a7025fd3b4d89e0936d97cb", "filename": "libitm/config/arm/hwcap.h", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfig%2Farm%2Fhwcap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfig%2Farm%2Fhwcap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Farm%2Fhwcap.h?ref=aebac0ca061219f37518e6804e1b6319e68c0979", "patch": "@@ -0,0 +1,41 @@\n+/* Copyright (C) 2011 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson <rth@redhat.com>.\n+\n+   This file is part of the GNU Transactional Memory Library (libitm).\n+\n+   Libitm is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   Libitm is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* The following must match the kernel's <asm/procinfo.h>.  */\n+#define HWCAP_ARM_SWP           1\n+#define HWCAP_ARM_HALF          2\n+#define HWCAP_ARM_THUMB         4\n+#define HWCAP_ARM_26BIT         8\n+#define HWCAP_ARM_FAST_MULT     16\n+#define HWCAP_ARM_FPA           32\n+#define HWCAP_ARM_VFP           64\n+#define HWCAP_ARM_EDSP          128\n+#define HWCAP_ARM_JAVA          256\n+#define HWCAP_ARM_IWMMXT        512\n+#define HWCAP_ARM_CRUNCH        1024\n+#define HWCAP_ARM_THUMBEE       2048\n+#define HWCAP_ARM_NEON          4096\n+#define HWCAP_ARM_VFPv3         8192\n+#define HWCAP_ARM_VFPv3D16      16384\n+"}, {"sha": "2c9fb02c5019d401bc5a05e7e2aa7e1efd386f98", "filename": "libitm/config/arm/sjlj.S", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfig%2Farm%2Fsjlj.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfig%2Farm%2Fsjlj.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Farm%2Fsjlj.S?ref=aebac0ca061219f37518e6804e1b6319e68c0979", "patch": "@@ -0,0 +1,164 @@\n+/* Copyright (C) 2011 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson <rth@redhat.com>.\n+\n+   This file is part of the GNU Transactional Memory Library (libitm).\n+\n+   Libitm is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   Libitm is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"hwcap.h\"\n+#include \"asmcfi.h\"\n+\n+\t.syntax\tunified\n+\n+#if defined(__thumb2__)\n+# define PC_OFS 4\n+        .thumb\n+        .thumb_func\n+#else\n+# define PC_OFS 8\n+#endif\n+\n+#if defined (__thumb2__) && defined(__ARM_ARCH_6T2__)\n+# define HAVE_MOVT\n+\t.arch\tarmv6t2\n+#elif defined (__ARM_ARCH_7A__)\n+# define HAVE_MOVT\n+\t.arch\tarmv7-a\n+#elif defined (__ARM_ARCH_7R__)\n+# define HAVE_MOVT\n+\t.arch\tarmv7-r\n+#elif defined (__ARM_ARCH_7M__)\n+# define HAVE_MOVT\n+\t.arch\tarmv7-m\n+#endif\n+\n+#if defined(HAVE_MOVT) && defined(PIC)\n+.macro ldaddr reg, addr\n+\tmovw\t\\reg, #:lower16:(\\addr - (98f + PC_OFS))\n+\tmovt\t\\reg, #:upper16:(\\addr - (98f + PC_OFS))\n+98:\tadd\t\\reg, \\reg, pc\n+.endm\n+#elif defined(HAVE_MOVT)\n+.macro ldaddr reg, addr\n+\tmovw\t\\reg, #:lower16:\\addr\n+\tmovt\t\\reg, #:upper16:\\addr\n+.endm\n+#elif defined(PIC)\n+.macro ldaddr reg, addr\n+\tldr\t\\reg, 99f\n+98:\tadd\t\\reg, \\reg, pc\n+.subsection 1\n+\t.align\t2\n+99:\t.word\t\\addr - (98b + PC_OFS)\n+.subsection 0\n+.endm\n+#else\n+.macro ldaddr reg, addr\n+\tldr\t\\reg, =\\addr\n+.endm\n+#endif\n+\n+\t.text\n+\t.align\t2\n+\t.global\t_ITM_beginTransaction\n+\t.type\t_ITM_beginTransaction, %function\n+\n+_ITM_beginTransaction:\n+\t.fnstart\n+\tcfi_startproc\n+\tmov\tip, sp\n+\tpush\t{ r4-r11, ip, lr }\n+\t.save\t{ lr }\n+\t.pad\t#(9*4)\n+\tcfi_adjust_cfa_offset(40)\n+\tcfi_rel_offset(lr, 36)\n+\tsub\tsp, sp, #(14*8)\n+\t.pad\t#(14*8)\n+\tcfi_adjust_cfa_offset(14*8)\n+\n+\tldaddr\tr2, GTM_hwcap\n+\tldr\tr2, [r2]\n+\n+\t/* Store the VFP registers.  Don't use VFP instructions directly\n+\t   because this code is used in non-VFP multilibs.  */\n+\ttst\tr2, #HWCAP_ARM_VFP\n+\tbeq\t1f\n+\tstc\tp11, cr8, [sp], {16}\t/* vstm sp, {d8-d15} */\n+1:\n+\t/* Save the call-preserved iWMMXt registers.  */\n+\ttst\tr2, #HWCAP_ARM_IWMMXT\n+\tbeq\t1f\n+\tstcl\tp1, cr10, [sp, #64]\t/* wstrd wr10, [sp, #64] */\n+\tstcl\tp1, cr11, [sp, #72]\n+\tstcl\tp1, cr12, [sp, #80]\n+\tstcl\tp1, cr13, [sp, #88]\n+\tstcl\tp1, cr14, [sp, #96]\n+\tstcl\tp1, cr15, [sp, #104]\n+1:\n+\t/* Invoke GTM_begin_transaction with the struct we just built.  */\n+\tmov\tr1, sp\n+\tbl\tGTM_begin_transaction\n+\n+\t/* Return; we don't need to restore any of the call-saved regs.  */\n+\tadd     sp, sp, #(14*8 + 9*4)\n+\tcfi_adjust_cfa_offset(-(14*8 + 9*4))\n+\tpop\t{ pc }\n+\t.fnend\n+\tcfi_endproc\n+\t.size\t_ITM_beginTransaction, . - _ITM_beginTransaction\n+\n+\t.align\t2\n+\t.global\tGTM_longjmp\n+\t.hidden\tGTM_longjmp\n+\t.type\tGTM_longjmp, %function\n+\n+GTM_longjmp:\n+\tcfi_startproc\n+\tldaddr\tr2, GTM_hwcap\n+\tldr\tr2, [r2]\n+\n+\ttst\tr2, #HWCAP_ARM_VFP\n+\tbeq\t1f\n+\tldc\tp11, cr8, [r1], {16}\t/* vldmia r1, {d8-d15} */\n+1:\n+\ttst\tr2, #HWCAP_ARM_IWMMXT\n+\tbeq\t1f\n+\tldcl\tp1, cr10, [r1, #64]\t/* wldrd wr10, [r1, #64] */\n+\tldcl\tp1, cr11, [r1, #72]\n+\tldcl\tp1, cr12, [r1, #80]\n+\tldcl\tp1, cr13, [r1, #88]\n+\tldcl\tp1, cr14, [r1, #96]\n+\tldcl\tp1, cr15, [r1, #104]\n+1:\n+\tadd\tr1, r1, #(14*8)\t\t/* Skip both VFP and iWMMXt blocks */\n+#ifdef __thumb2__\n+\tldm\tr1, { r4-r11, ip, lr }\n+\tcfi_def_cfa(ip, 0)\n+\tmov\tsp, ip\n+\tbx\tlr\n+#else\n+\tldm\tr1, { r4-r11, sp, pc }\n+#endif\n+\tcfi_endproc\n+\t.size\tGTM_longjmp, . - GTM_longjmp\n+\n+#ifdef __linux__\n+.section .note.GNU-stack, \"\", %progbits\n+#endif"}, {"sha": "758d449428ecb2c935d6c10cae087218eabb0ce2", "filename": "libitm/config/arm/target.h", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfig%2Farm%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfig%2Farm%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Farm%2Ftarget.h?ref=aebac0ca061219f37518e6804e1b6319e68c0979", "patch": "@@ -0,0 +1,53 @@\n+/* Copyright (C) 2011 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson <rth@redhat.com>.\n+\n+   This file is part of the GNU Transactional Memory Library (libitm).\n+\n+   Libitm is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   Libitm is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+namespace GTM HIDDEN {\n+\n+typedef struct gtm_jmpbuf\n+{\n+  unsigned long long vfp[8];\t/* d8-d15 */\n+  unsigned long long iwmmxt[6];\t/* cr10-cr15 */\n+  unsigned long gr[8];\t\t/* r4-r11 */\n+  void *cfa;\n+  unsigned long pc;\n+} gtm_jmpbuf;\n+\n+/* ARM generally uses a fixed page size of 4K.  */\n+#define PAGE_SIZE\t4096\n+#define FIXED_PAGE_SIZE\t1\n+\n+/* ??? The size of one line in hardware caches (in bytes). */\n+#define HW_CACHELINE_SIZE 64\n+\n+static inline void\n+cpu_relax (void)\n+{\n+  /* ??? The kernel uses the condition\n+\t#if __LINUX_ARM_ARCH__ == 6 || defined(CONFIG_ARM_ERRATA_754327)\n+     Given that we're actually just waiting, it doesn't seem like it \n+     hurts to simply use a full barrier all the time.  */\n+  __sync_synchronize ();\n+}\n+\n+} // namespace GTM"}, {"sha": "c9d4edf6e699512ceccf79e012c69c78be6e42d3", "filename": "libitm/config/generic/asmcfi.h", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfig%2Fgeneric%2Fasmcfi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfig%2Fgeneric%2Fasmcfi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Fgeneric%2Fasmcfi.h?ref=aebac0ca061219f37518e6804e1b6319e68c0979", "patch": "@@ -27,18 +27,22 @@\n \n #ifdef HAVE_AS_CFI_PSEUDO_OP\n \n-#define cfi_startproc\t\t.cfi_startproc\n-#define cfi_endproc\t\t.cfi_endproc\n-#define cfi_def_cfa_offset(n)\t.cfi_def_cfa_offset n\n-#define cfi_def_cfa(r,n)\t.cfi_def_cfa r, n\n-#define cfi_register(o,n)\t.cfi_register o, n\n+#define cfi_startproc\t\t\t.cfi_startproc\n+#define cfi_endproc\t\t\t.cfi_endproc\n+#define cfi_adjust_cfa_offset(n)\t.cfi_adjust_cfa_offset n\n+#define cfi_def_cfa_offset(n)\t\t.cfi_def_cfa_offset n\n+#define cfi_def_cfa(r,n)\t\t.cfi_def_cfa r, n\n+#define cfi_rel_offset(r,o)\t\t.cfi_rel_offset r, o\n+#define cfi_register(o,n)\t\t.cfi_register o, n\n \n #else\n \n #define cfi_startproc\n #define cfi_endproc\n+#define cfi_adjust_cfa_offset(n)\n #define cfi_def_cfa_offset(n)\n #define cfi_def_cfa(r,n)\n+#define cfi_rel_offset(r,o)\n #define cfi_register(o,n)\n \n #endif /* HAVE_AS_CFI_PSEUDO_OP */"}, {"sha": "0889ee5dfeceaf95d39b10de0a8df20c0320afd3", "filename": "libitm/config/linux/futex.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfig%2Flinux%2Ffutex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfig%2Flinux%2Ffutex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Flinux%2Ffutex.cc?ref=aebac0ca061219f37518e6804e1b6319e68c0979", "patch": "@@ -26,6 +26,7 @@\n \n #include \"libitm_i.h\"\n #include \"futex.h\"\n+#include <futex_bits.h>\n #include <errno.h>\n \n namespace GTM HIDDEN {"}, {"sha": "00161b47431ce7145079450dcbbaef8b6305eed2", "filename": "libitm/config/linux/futex.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfig%2Flinux%2Ffutex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfig%2Flinux%2Ffutex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Flinux%2Ffutex.h?ref=aebac0ca061219f37518e6804e1b6319e68c0979", "patch": "@@ -29,8 +29,6 @@\n \n namespace GTM HIDDEN {\n \n-#include \"futex_bits.h\"\n-\n extern void futex_wait (int *addr, int val);\n extern long futex_wake (int *addr, int count);\n "}, {"sha": "bbc336604e9202cc8f32621d9bcc33dc42c90924", "filename": "libitm/config/linux/futex_bits.h", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfig%2Flinux%2Ffutex_bits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfig%2Flinux%2Ffutex_bits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Flinux%2Ffutex_bits.h?ref=aebac0ca061219f37518e6804e1b6319e68c0979", "patch": "@@ -0,0 +1,39 @@\n+/* Copyright (C) 2011 Free Software Foundation, Inc.\n+   Contributed by Richard Henderson <rth@redhat.com>.\n+\n+   This file is part of the GNU Transactional Memory Library (libitm).\n+\n+   Libitm is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   Libitm is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+/* Provide target-independant access to the futex system call.  */\n+\n+/* Note for ARM:\n+   There are two styles of syscall, and in the eabi style the syscall\n+   number goes into the thumb frame pointer.  We need to either write\n+   this in pure assembler or just defer entirely to libc.  */\n+\n+#include <unistd.h>\n+#include <sys/syscall.h>\n+\n+static inline long\n+sys_futex0 (int *addr, long op, long val)\n+{\n+  return syscall (SYS_futex, addr, op, val, 0);\n+}"}, {"sha": "3abc7930e20d08cf3e9554aa745ba57096866466", "filename": "libitm/configure", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure?ref=aebac0ca061219f37518e6804e1b6319e68c0979", "patch": "@@ -607,6 +607,8 @@ ARCH_X86_AVX_FALSE\n ARCH_X86_AVX_TRUE\n ARCH_X86_FALSE\n ARCH_X86_TRUE\n+ARCH_ARM_FALSE\n+ARCH_ARM_TRUE\n link_itm\n XLDFLAGS\n XCFLAGS\n@@ -11720,7 +11722,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11723 \"configure\"\n+#line 11725 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11826,7 +11828,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11829 \"configure\"\n+#line 11831 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -17369,6 +17371,14 @@ else\n fi\n \n \n+ if test \"$ARCH\" = arm; then\n+  ARCH_ARM_TRUE=\n+  ARCH_ARM_FALSE='#'\n+else\n+  ARCH_ARM_TRUE='#'\n+  ARCH_ARM_FALSE=\n+fi\n+\n  if test \"$ARCH\" = x86; then\n   ARCH_X86_TRUE=\n   ARCH_X86_FALSE='#'\n@@ -17542,6 +17552,10 @@ if test -z \"${LIBITM_BUILD_VERSIONED_SHLIB_SUN_TRUE}\" && test -z \"${LIBITM_BUILD\n   as_fn_error \"conditional \\\"LIBITM_BUILD_VERSIONED_SHLIB_SUN\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${ARCH_ARM_TRUE}\" && test -z \"${ARCH_ARM_FALSE}\"; then\n+  as_fn_error \"conditional \\\"ARCH_ARM\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${ARCH_X86_TRUE}\" && test -z \"${ARCH_X86_FALSE}\"; then\n   as_fn_error \"conditional \\\"ARCH_X86\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "ab2a90b7cf93cfdeadab4b675d98ddda2431659b", "filename": "libitm/configure.ac", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure.ac?ref=aebac0ca061219f37518e6804e1b6319e68c0979", "patch": "@@ -273,6 +273,7 @@ else\n fi\n AC_SUBST(link_itm)\n \n+AM_CONDITIONAL([ARCH_ARM], [test \"$ARCH\" = arm])\n AM_CONDITIONAL([ARCH_X86], [test \"$ARCH\" = x86])\n AM_CONDITIONAL([ARCH_X86_AVX], [test \"$libitm_cv_as_avx\" = yes])\n AM_CONDITIONAL([ARCH_FUTEX], [test $enable_linux_futex = yes])"}, {"sha": "a17f3fc7b90c6e82f23648d985dc4840a48c900f", "filename": "libitm/configure.tgt", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfigure.tgt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aebac0ca061219f37518e6804e1b6319e68c0979/libitm%2Fconfigure.tgt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfigure.tgt?ref=aebac0ca061219f37518e6804e1b6319e68c0979", "patch": "@@ -48,6 +48,8 @@ fi\n case \"${target_cpu}\" in\n   alpha*)\tARCH=alpha ;;\n \n+  arm*)\t\tARCH=arm ;;\n+\n   i[3456]86)\n \tcase \" ${CC} ${CFLAGS} \" in\n \t  *\" -m64 \"*)"}]}