{"sha": "c42a19d5e3a8236af3b727cd708bac22a8608b9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQyYTE5ZDVlM2E4MjM2YWYzYjcyN2NkNzA4YmFjMjJhODYwOGI5ZA==", "commit": {"author": {"name": "Thomas Koenig", "email": "Thomas.Koenig@online.de", "date": "2005-05-12T17:50:33Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2005-05-12T17:50:33Z"}, "message": "re PR libfortran/21324 (#undef GFC_CLEAR_MEMORY causes testsuite failures)\n\n2005-05-12  Thomas Koenig  <Thomas.Koenig@online.de>\n\n        PR libfortran/21324\n        * runtime/memory.c:  Don't define GFC_CLEAR_MEMORY (it's a\n        performance hog).\n        * io/open.c (new_unit): Zero freshly allocated memory for\n        unit structure.\n        * io/unit.c (init_units):  Zero freshly allocated memory for\n        STDIN, STDOUT and STDERR.\n        * io/unix.c (open_internal):  Zero freshly allocated memory\n        for unix_stream.\n        (fd_to_stream):  Likewise.\n\nFrom-SVN: r99619", "tree": {"sha": "35e0ae8368fc459238e0ba93fbf129aef6b0c137", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35e0ae8368fc459238e0ba93fbf129aef6b0c137"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c42a19d5e3a8236af3b727cd708bac22a8608b9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c42a19d5e3a8236af3b727cd708bac22a8608b9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c42a19d5e3a8236af3b727cd708bac22a8608b9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c42a19d5e3a8236af3b727cd708bac22a8608b9d/comments", "author": null, "committer": null, "parents": [{"sha": "7cc70b5e3c155ae457f89871dd7f644079f08a61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cc70b5e3c155ae457f89871dd7f644079f08a61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cc70b5e3c155ae457f89871dd7f644079f08a61"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "353ac9a02c4c5f39b99efab961171320669ff571", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42a19d5e3a8236af3b727cd708bac22a8608b9d/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42a19d5e3a8236af3b727cd708bac22a8608b9d/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=c42a19d5e3a8236af3b727cd708bac22a8608b9d", "patch": "@@ -1,3 +1,16 @@\n+2005-05-12  Thomas Koenig  <Thomas.Koenig@online.de>\n+\n+\tPR libfortran/21324\n+\t* runtime/memory.c:  Don't define GFC_CLEAR_MEMORY (it's a\n+\tperformance hog).\n+\t* io/open.c (new_unit): Zero freshly allocated memory for\n+\tunit structure.\n+\t* io/unit.c (init_units):  Zero freshly allocated memory for\n+\tSTDIN, STDOUT and STDERR.\n+\t* io/unix.c (open_internal):  Zero freshly allocated memory\n+\tfor unix_stream.\n+\t(fd_to_stream):  Likewise.\n+\n 2005-05-11  Bud Davis  <bdavis@gfortran.org>\n \n \tPR fortran/19478"}, {"sha": "f579f1f5b3c5b1cf838e880a5f6dc6762f1c284f", "filename": "libgfortran/io/open.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42a19d5e3a8236af3b727cd708bac22a8608b9d/libgfortran%2Fio%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42a19d5e3a8236af3b727cd708bac22a8608b9d/libgfortran%2Fio%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fopen.c?ref=c42a19d5e3a8236af3b727cd708bac22a8608b9d", "patch": "@@ -351,6 +351,7 @@ new_unit (unit_flags * flags)\n   /* Create the unit structure.  */\n \n   u = get_mem (sizeof (gfc_unit) + ioparm.file_len);\n+  memset (u, '\\0', sizeof (gfc_unit) + ioparm.file_len);\n \n   u->unit_number = ioparm.unit;\n   u->s = s;"}, {"sha": "f0d8dbe205fded29212d2a3c557cedf1bf911f98", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42a19d5e3a8236af3b727cd708bac22a8608b9d/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42a19d5e3a8236af3b727cd708bac22a8608b9d/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=c42a19d5e3a8236af3b727cd708bac22a8608b9d", "patch": "@@ -295,6 +295,7 @@ init_units (void)\n   if (options.stdin_unit >= 0)\n     {\t\t\t\t/* STDIN */\n       u = get_mem (sizeof (gfc_unit));\n+      memset (u, '\\0', sizeof (gfc_unit));\n \n       u->unit_number = options.stdin_unit;\n       u->s = input_stream ();\n@@ -316,6 +317,7 @@ init_units (void)\n   if (options.stdout_unit >= 0)\n     {\t\t\t\t/* STDOUT */\n       u = get_mem (sizeof (gfc_unit));\n+      memset (u, '\\0', sizeof (gfc_unit));\n \n       u->unit_number = options.stdout_unit;\n       u->s = output_stream ();\n@@ -337,6 +339,7 @@ init_units (void)\n   if (options.stderr_unit >= 0)\n     {\t\t\t\t/* STDERR */\n       u = get_mem (sizeof (gfc_unit));\n+      memset (u, '\\0', sizeof (gfc_unit));\n \n       u->unit_number = options.stderr_unit;\n       u->s = error_stream ();"}, {"sha": "2d8286ce04797ae5f77af8fe55c46e4595629764", "filename": "libgfortran/io/unix.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42a19d5e3a8236af3b727cd708bac22a8608b9d/libgfortran%2Fio%2Funix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42a19d5e3a8236af3b727cd708bac22a8608b9d/libgfortran%2Fio%2Funix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funix.c?ref=c42a19d5e3a8236af3b727cd708bac22a8608b9d", "patch": "@@ -872,6 +872,7 @@ open_internal (char *base, int length)\n   unix_stream *s;\n \n   s = get_mem (sizeof (unix_stream));\n+  memset (s, '\\0', sizeof (unix_stream));\n \n   s->buffer = base;\n   s->buffer_offset = 0;\n@@ -900,6 +901,7 @@ fd_to_stream (int fd, int prot, int avoid_mmap)\n   unix_stream *s;\n \n   s = get_mem (sizeof (unix_stream));\n+  memset (s, '\\0', sizeof (unix_stream));\n \n   s->fd = fd;\n   s->buffer_offset = 0;"}, {"sha": "ce2dc91c7974cdbd3e29f87fa73bd945bbd7b6d5", "filename": "libgfortran/runtime/memory.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c42a19d5e3a8236af3b727cd708bac22a8608b9d/libgfortran%2Fruntime%2Fmemory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c42a19d5e3a8236af3b727cd708bac22a8608b9d/libgfortran%2Fruntime%2Fmemory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmemory.c?ref=c42a19d5e3a8236af3b727cd708bac22a8608b9d", "patch": "@@ -36,7 +36,7 @@ Boston, MA 02111-1307, USA.  */\n    return memory that is guaranteed to be set to zero.  This can have\n    a severe efficiency penalty, so it should never be set if good\n    performance is desired, but it can help when you're debugging code.  */\n-#define GFC_CLEAR_MEMORY\n+/* #define GFC_CLEAR_MEMORY */\n \n /* If GFC_CHECK_MEMORY is defined, we do some sanity checks at runtime.\n    This causes small overhead, but again, it also helps debugging.  */"}]}