{"sha": "237be3f618dfae396944c601c295eb182d32e54e", "node_id": "C_kwDOANBUbNoAKDIzN2JlM2Y2MThkZmFlMzk2OTQ0YzYwMWMyOTVlYjE4MmQzMmU1NGU", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-28T14:51:32Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-28T14:51:32Z"}, "message": "rustspec: Remove most unused options from gccgo", "tree": {"sha": "b41bdf6312ed7b76123a4472ff3dabee29cc3b9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b41bdf6312ed7b76123a4472ff3dabee29cc3b9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/237be3f618dfae396944c601c295eb182d32e54e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/237be3f618dfae396944c601c295eb182d32e54e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/237be3f618dfae396944c601c295eb182d32e54e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/237be3f618dfae396944c601c295eb182d32e54e/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "205096066a50f501eb1c1d1f7acb4b0daa8be15a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/205096066a50f501eb1c1d1f7acb4b0daa8be15a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/205096066a50f501eb1c1d1f7acb4b0daa8be15a"}], "stats": {"total": 131, "additions": 11, "deletions": 120}, "files": [{"sha": "b05f8ae5454df4da12cf48d5988e6694494ab3d8", "filename": "gcc/rust/rustspec.cc", "status": "modified", "additions": 11, "deletions": 120, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/237be3f618dfae396944c601c295eb182d32e54e/gcc%2Frust%2Frustspec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/237be3f618dfae396944c601c295eb182d32e54e/gcc%2Frust%2Frustspec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frustspec.cc?ref=237be3f618dfae396944c601c295eb182d32e54e", "patch": "@@ -40,13 +40,6 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n {\n   unsigned int i, j;\n \n-  /* This is a tristate:\n-     -1 means we should not link in librust\n-     0  means we should link in librust if it is needed\n-     1  means librust is needed and should be linked in.\n-     2  means librust is needed and should be linked statically.  */\n-  int library = 0;\n-\n   /* The new argument list will be contained in this.  */\n   struct cl_decoded_option *new_decoded_options;\n \n@@ -78,14 +71,6 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n   /* Whether the -o option was used.  */\n   bool saw_opt_o = false;\n \n-  /* Whether the -c option was used.  Also used for -E, -fsyntax-only,\n-     in general anything which implies only compilation and not\n-     linking.  */\n-  bool saw_opt_c = false;\n-\n-  /* Whether the -S option was used.  */\n-  bool saw_opt_S = false;\n-\n   /* The first input file with an extension of .rs.  */\n   const char *first_rust_file = NULL;\n \n@@ -101,47 +86,9 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \n       switch (decoded_options[i].opt_index)\n \t{\n-\tcase OPT_r:\n-\tcase OPT_nostdlib:\n-\tcase OPT_nodefaultlibs:\n-\t  library = -1;\n-\t  break;\n-\n \tcase OPT_l:\n \t  if (strcmp (arg, \"c\") == 0)\n \t    args[i] |= WITHLIBC;\n-\t  else\n-\t    /* Unrecognized libraries (e.g. -lfoo) may require librust.  */\n-\t    library = (library == 0) ? 1 : library;\n-\t  break;\n-\n-\tcase OPT_x:\n-\t  if (library == 0 && strcmp (arg, \"rust\") == 0)\n-\t    library = 1;\n-\t  break;\n-\n-\tcase OPT_Xlinker:\n-\tcase OPT_Wl_:\n-\t  /* Arguments that go directly to the linker might be .o files,\n-\t     or something, and so might cause librust to be needed.  */\n-\t  if (library == 0)\n-\t    library = 1;\n-\t  break;\n-\n-\tcase OPT_c:\n-\tcase OPT_E:\n-\tcase OPT_M:\n-\tcase OPT_MM:\n-\tcase OPT_fsyntax_only:\n-\t  /* Don't specify libraries if we won't link, since that would\n-\t     cause a warning.  */\n-\t  saw_opt_c = true;\n-\t  library = -1;\n-\t  break;\n-\n-\tcase OPT_S:\n-\t  saw_opt_S = true;\n-\t  library = -1;\n \t  break;\n \n \tcase OPT_o:\n@@ -156,15 +103,7 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t  shared_libgcc = 0;\n \t  break;\n \n-\tcase OPT_static_librust:\n-\t  library = library >= 0 ? 2 : library;\n-\t  args[i] |= SKIPOPT;\n-\t  break;\n-\n \tcase OPT_SPECIAL_input_file:\n-\t  if (library == 0)\n-\t    library = 1;\n-\n \t  if (first_rust_file == NULL)\n \t    {\n \t      int len;\n@@ -173,6 +112,13 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n \t      if (len > 3 && strcmp (arg + len - 3, \".rs\") == 0)\n \t\tfirst_rust_file = arg;\n \t    }\n+\t  else\n+\t    {\n+\t      // FIXME: ARTHUR: Do we want to error here? If there's already one\n+\t      // file?\n+\t      // How do we error here? Do we want to instead just handle that in\n+\t      // the session manager?\n+\t    }\n \n \t  break;\n \t}\n@@ -185,7 +131,7 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n #endif\n \n   /* Make sure to have room for the trailing NULL argument.  */\n-  num_args = argc + shared_libgcc + (library > 0) * 5 + 10;\n+  num_args = argc + shared_libgcc * 5 + 10;\n   new_decoded_options = XNEWVEC (struct cl_decoded_option, num_args);\n \n   i = 0;\n@@ -199,7 +145,7 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n     {\n       new_decoded_options[j] = decoded_options[i];\n \n-      if (!saw_libc && (args[i] & WITHLIBC) && library > 0)\n+      if (!saw_libc && (args[i] & WITHLIBC))\n \t{\n \t  --j;\n \t  saw_libc = &decoded_options[i];\n@@ -217,67 +163,12 @@ lang_specific_driver (struct cl_decoded_option **in_decoded_options,\n      driver will invoke rust1 separately for each input file.  FIXME:\n      This should probably use some other interface to force the driver\n      to set combine_inputs.  */\n-  if (first_rust_file != NULL && !saw_opt_o)\n+  if (!saw_opt_o)\n     {\n-      if (saw_opt_c || saw_opt_S)\n-\t{\n-\t  const char *base;\n-\t  int baselen;\n-\t  int alen;\n-\t  char *out;\n-\n-\t  base = lbasename (first_rust_file);\n-\t  baselen = strlen (base) - 3;\n-\t  alen = baselen + 3;\n-\t  out = XNEWVEC (char, alen);\n-\t  memcpy (out, base, baselen);\n-\t  /* The driver will convert .o to some other suffix (e.g.,\n-\t     .obj) if appropriate.  */\n-\t  out[baselen] = '.';\n-\t  if (saw_opt_S)\n-\t    out[baselen + 1] = 's';\n-\t  else\n-\t    out[baselen + 1] = 'o';\n-\t  out[baselen + 2] = '\\0';\n-\t  generate_option (OPT_o, out, 1, CL_DRIVER, &new_decoded_options[j]);\n-\t}\n-      else\n-\tgenerate_option (OPT_o, \"a.out\", 1, CL_DRIVER, &new_decoded_options[j]);\n+      generate_option (OPT_o, \"a.out\", 1, CL_DRIVER, &new_decoded_options[j]);\n       j++;\n     }\n \n-  /* Add `-lrust' if we haven't already done so.  */\n-  if (library > 0)\n-    {\n-      // generate_option (OPT_l, LIBGOBEGIN, 1, CL_DRIVER,\n-      //               &new_decoded_options[j]);\n-      // added_libraries++;\n-      // j++;\n-\n-#ifdef HAVE_LD_STATIC_DYNAMIC\n-      if (library > 1 && !static_link)\n-\t{\n-\t  generate_option (OPT_Wl_, LD_STATIC_OPTION, 1, CL_DRIVER,\n-\t\t\t   &new_decoded_options[j]);\n-\t  j++;\n-\t}\n-#endif\n-\n-\t// generate_option (OPT_l, LIBGO, 1,\n-\t//   \t       CL_DRIVER, &new_decoded_options[j]);\n-\t// added_libraries++;\n-\t// j++;\n-\n-#ifdef HAVE_LD_STATIC_DYNAMIC\n-      if (library > 1 && !static_link)\n-\t{\n-\t  generate_option (OPT_Wl_, LD_DYNAMIC_OPTION, 1, CL_DRIVER,\n-\t\t\t   &new_decoded_options[j]);\n-\t  j++;\n-\t}\n-#endif\n-    }\n-\n   if (saw_libc)\n     new_decoded_options[j++] = *saw_libc;\n   if (shared_libgcc && !static_link)"}]}