{"sha": "f12f25a7f625fc69ab610b8997e1f6f5c1ccf982", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEyZjI1YTdmNjI1ZmM2OWFiNjEwYjg5OTdlMWY2ZjVjMWNjZjk4Mg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-05-12T05:21:09Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-05-12T05:21:09Z"}, "message": "ia64.c (group_barrier_needed_p): Don't allow calls and jumps to be bundled together.\n\n        * config/ia64/ia64.c (group_barrier_needed_p): Don't allow\n        calls and jumps to be bundled together.\n        (ia64_reorg): Emit a break after a noreturn call that ends\n        a function.\n        * config/ia64/ia64.md (break_f): New.\n\nFrom-SVN: r41979", "tree": {"sha": "d58ea33902b88eecd462e9b93d2bbcdab4291641", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d58ea33902b88eecd462e9b93d2bbcdab4291641"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f12f25a7f625fc69ab610b8997e1f6f5c1ccf982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f12f25a7f625fc69ab610b8997e1f6f5c1ccf982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f12f25a7f625fc69ab610b8997e1f6f5c1ccf982", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f12f25a7f625fc69ab610b8997e1f6f5c1ccf982/comments", "author": null, "committer": null, "parents": [{"sha": "c8a96070172673d05574e3c9fe21e28750610223", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8a96070172673d05574e3c9fe21e28750610223", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8a96070172673d05574e3c9fe21e28750610223"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "63309d3f4198a275856f5d23b511780a4801741f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12f25a7f625fc69ab610b8997e1f6f5c1ccf982/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12f25a7f625fc69ab610b8997e1f6f5c1ccf982/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f12f25a7f625fc69ab610b8997e1f6f5c1ccf982", "patch": "@@ -1,3 +1,11 @@\n+2001-05-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/ia64/ia64.c (group_barrier_needed_p): Don't allow\n+\tcalls and jumps to be bundled together.\n+\t(ia64_reorg): Emit a break after a noreturn call that ends\n+\ta function.\n+\t* config/ia64/ia64.md (break_f): New.\n+\n 2001-05-12  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* c-lex.c (lex_charconst): Convert into a simple wrapper"}, {"sha": "0a1284a3248c4e4cb7c212a43a149d8ff7805e97", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12f25a7f625fc69ab610b8997e1f6f5c1ccf982/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12f25a7f625fc69ab610b8997e1f6f5c1ccf982/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=f12f25a7f625fc69ab610b8997e1f6f5c1ccf982", "patch": "@@ -4509,11 +4509,28 @@ group_barrier_needed_p (insn)\n       flags.is_branch = 1;\n       flags.is_sibcall = SIBLING_CALL_P (insn);\n       memset (rws_insn, 0, sizeof (rws_insn));\n+\n+      /* Don't bundle a call following another call.  */\n+      if ((pat = prev_active_insn (insn))\n+\t  && GET_CODE (pat) == CALL_INSN)\n+\t{\n+\t  need_barrier = 1;\n+\t  break;\n+\t}\n+\n       need_barrier = rtx_needs_barrier (PATTERN (insn), flags, 0);\n       break;\n \n     case JUMP_INSN:\n       flags.is_branch = 1;\n+\n+      /* Don't bundle a jump following a call.  */\n+      if ((pat = prev_active_insn (insn))\n+\t  && GET_CODE (pat) == CALL_INSN)\n+\t{\n+\t  need_barrier = 1;\n+\t  break;\n+\t}\n       /* FALLTHRU */\n \n     case INSN:\n@@ -6411,6 +6428,33 @@ ia64_reorg (insns)\n   else\n     emit_all_insn_group_barriers (rtl_dump_file, insns);\n \n+  /* A call must not be the last instruction in a function, so that the\n+     return address is still within the function, so that unwinding works\n+     properly.  Note that IA-64 differs from dwarf2 on this point.  */\n+  if (flag_unwind_tables || (flag_exceptions && !USING_SJLJ_EXCEPTIONS))\n+    {\n+      rtx insn;\n+      int saw_stop = 0;\n+\n+      insn = get_last_insn ();\n+      if (! INSN_P (insn))\n+        insn = prev_active_insn (insn);\n+      if (GET_CODE (insn) == INSN\n+\t  && GET_CODE (PATTERN (insn)) == UNSPEC_VOLATILE\n+\t  && XINT (PATTERN (insn), 1) == 2)\n+\t{\n+\t  saw_stop = 1;\n+\t  insn = prev_active_insn (insn);\n+\t}\n+      if (GET_CODE (insn) == CALL_INSN)\n+\t{\n+\t  if (! saw_stop)\n+\t    emit_insn (gen_insn_group_barrier (GEN_INT (3)));\n+\t  emit_insn (gen_break_f ());\n+\t  emit_insn (gen_insn_group_barrier (GEN_INT (3)));\n+\t}\n+    }\n+\n   fixup_errata ();\n   emit_predicate_relation_info ();\n }"}, {"sha": "36823d6dd7aa0b3f275869f354560fc9c933abc1", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f12f25a7f625fc69ab610b8997e1f6f5c1ccf982/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f12f25a7f625fc69ab610b8997e1f6f5c1ccf982/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=f12f25a7f625fc69ab610b8997e1f6f5c1ccf982", "patch": "@@ -71,6 +71,7 @@\n ;;\t0\talloc\n ;;\t1\tblockage\n ;;\t2\tinsn_group_barrier\n+;;\t3\tbreak\n ;;\t5\tset_bsp\n ;;\t8\tpred.safe_across_calls all\n ;;\t9\tpred.safe_across_calls normal\n@@ -4940,6 +4941,11 @@\n   [(set_attr \"itanium_class\" \"stop_bit\")\n    (set_attr \"predicable\" \"no\")])\n \n+(define_insn \"break_f\"\n+  [(unspec_volatile [(const_int 0)] 3)]\n+  \"\"\n+  \"break.f 0\"\n+  [(set_attr \"itanium_class\" \"nop_f\")])\n \f\n ;; Non-local goto support.\n "}]}