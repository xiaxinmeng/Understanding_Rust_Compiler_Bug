{"sha": "4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8", "node_id": "C_kwDOANBUbNoAKDRkMGJhZWFlMzE1ZWJlN2QwZWM3NjgyZWEzZTdjMDUxNjAyN2MyYjg", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-03-08T14:15:07Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-03-10T18:21:20Z"}, "message": "ubsan: missed -fsanitize=bounds for compound ops [PR108060]\n\nIn this PR we are dealing with a missing .UBSAN_BOUNDS, so the\nout-of-bounds access in the test makes the program crash before\na UBSan diagnostic was emitted.  In C and C++, c_genericize gets\n\n  a[b] = a[b] | c;\n\nbut in C, both a[b] are one identical shared tree (not in C++ because\ncp_fold/ARRAY_REF created two same but not identical trees).  Since\nubsan_walk_array_refs_r keeps a pset, in C we produce\n\n  a[.UBSAN_BOUNDS (0B, SAVE_EXPR <b>, 8);, SAVE_EXPR <b>;] = a[b] | c;\n\nbecause the LHS is walked before the RHS.\n\nSince r7-1900, we gimplify the RHS before the LHS.  So the statement above\ngets gimplified into\n\n    _1 = a[b];\n    c.0_2 = c;\n    b.1 = b;\n    .UBSAN_BOUNDS (0B, b.1, 8);\n\nWith this patch we produce:\n\n  a[b] = a[.UBSAN_BOUNDS (0B, SAVE_EXPR <b>, 8);, SAVE_EXPR <b>;] | c;\n\nwhich gets gimplified into:\n\n    b.0 = b;\n    .UBSAN_BOUNDS (0B, b.0, 8);\n    _1 = a[b.0];\n\ntherefore we emit a runtime error before making the bad array access.\n\nI think it's OK that only the RHS gets a .UBSAN_BOUNDS, as in few lines\nabove: the instrumented array access dominates the array access on the\nLHS, and I've verified that\n\n  b = 0;\n  a[b] = (a[b], b = -32768, a[0] | c);\n\nworks as expected: the inner a[b] is OK but we do emit an error for the\na[b] on the LHS.\n\nFor GCC 14, we could apply\n<https://gcc.gnu.org/pipermail/gcc-patches/2023-March/613687.html>\nsince the copy_node doesn't seem to be needed.\n\n\tPR sanitizer/108060\n\tPR sanitizer/109050\n\ngcc/c-family/ChangeLog:\n\n\t* c-gimplify.cc (ubsan_walk_array_refs_r): For a MODIFY_EXPR, instrument\n\tthe RHS before the LHS.\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/ubsan/bounds-17.c: New test.\n\t* c-c++-common/ubsan/bounds-18.c: New test.\n\t* c-c++-common/ubsan/bounds-19.c: New test.\n\t* c-c++-common/ubsan/bounds-20.c: New test.\n\t* c-c++-common/ubsan/bounds-21.c: New test.", "tree": {"sha": "ac5876123413cc55f7e723ddbb5251a90ae2a586", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac5876123413cc55f7e723ddbb5251a90ae2a586"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e20e5d9dc11b64e8eabce6803c91cb5768207083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e20e5d9dc11b64e8eabce6803c91cb5768207083", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e20e5d9dc11b64e8eabce6803c91cb5768207083"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "ef5c7d919fcc678f2b8aac453c5d82d8ac76b4ef", "filename": "gcc/c-family/c-gimplify.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8/gcc%2Fc-family%2Fc-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8/gcc%2Fc-family%2Fc-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-gimplify.cc?ref=4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8", "patch": "@@ -106,6 +106,18 @@ ubsan_walk_array_refs_r (tree *tp, int *walk_subtrees, void *data)\n     }\n   else if (TREE_CODE (*tp) == ARRAY_REF)\n     ubsan_maybe_instrument_array_ref (tp, false);\n+  else if (TREE_CODE (*tp) == MODIFY_EXPR)\n+    {\n+      /* Since r7-1900, we gimplify RHS before LHS.  Consider\n+\t   a[b] |= c;\n+\t wherein we can have a single shared tree a[b] in both LHS and RHS.\n+\t If we only instrument the LHS and the access is invalid, the program\n+\t could crash before emitting a UBSan error.  So instrument the RHS\n+\t first.  */\n+      *walk_subtrees = 0;\n+      walk_tree (&TREE_OPERAND (*tp, 1), ubsan_walk_array_refs_r, pset, pset);\n+      walk_tree (&TREE_OPERAND (*tp, 0), ubsan_walk_array_refs_r, pset, pset);\n+    }\n   return NULL_TREE;\n }\n "}, {"sha": "b727e3235b8e71018b077a014bf41670049fe857", "filename": "gcc/testsuite/c-c++-common/ubsan/bounds-17.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-17.c?ref=4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8", "patch": "@@ -0,0 +1,17 @@\n+/* PR sanitizer/108060 */\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=bounds\" } */\n+/* { dg-skip-if \"\" { *-*-* } \"-flto\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+\n+int a[8];\n+int c;\n+\n+int\n+main ()\n+{\n+  int b = -32768;\n+  a[b] |= c;\n+}\n+\n+/* { dg-output \"index -32768 out of bounds for type 'int \\\\\\[8\\\\\\]'\" } */"}, {"sha": "556abc0e1c0a771059c9cf56613d05f2a9ce2eee", "filename": "gcc/testsuite/c-c++-common/ubsan/bounds-18.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-18.c?ref=4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8", "patch": "@@ -0,0 +1,17 @@\n+/* PR sanitizer/108060 */\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=bounds\" } */\n+/* { dg-skip-if \"\" { *-*-* } \"-flto\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+\n+int a[8];\n+int c;\n+\n+int\n+main ()\n+{\n+  int b = -32768;\n+  a[b] = a[b] | c;\n+}\n+\n+/* { dg-output \"index -32768 out of bounds for type 'int \\\\\\[8\\\\\\]'\" } */"}, {"sha": "54217ae399f40fa86241444d8067eeadf4b024e9", "filename": "gcc/testsuite/c-c++-common/ubsan/bounds-19.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-19.c?ref=4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8", "patch": "@@ -0,0 +1,20 @@\n+/* PR sanitizer/108060 */\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=bounds\" } */\n+/* { dg-skip-if \"\" { *-*-* } \"-flto\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+\n+int a[8];\n+int a2[18];\n+int c;\n+\n+int\n+main ()\n+{\n+  int b = 0;\n+  a[0] = (a2[b], b = -32768, a[0] | c);\n+  b = 0;\n+  a[b] = (a[b], b = -32768, a[0] | c);\n+}\n+\n+/* { dg-output \"index -32768 out of bounds for type 'int \\\\\\[8\\\\\\]'\" } */"}, {"sha": "a78c67129e0d07b42444e10aeed77150de2f1e92", "filename": "gcc/testsuite/c-c++-common/ubsan/bounds-20.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-20.c?ref=4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8", "patch": "@@ -0,0 +1,16 @@\n+/* PR sanitizer/109050 */\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=bounds -fno-sanitize-recover=all\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+\n+long a;\n+int b;\n+int\n+main ()\n+{\n+  int c[4] = {0, 1, 2, 3};\n+  a = 0;\n+  c[a - 9806816] |= b;\n+}\n+\n+/* { dg-output \"index -9806816 out of bounds for type 'int \\\\\\[4\\\\\\]'\" } */"}, {"sha": "b9d9308849f6971a4a75fd40d50539402c514e7a", "filename": "gcc/testsuite/c-c++-common/ubsan/bounds-21.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fbounds-21.c?ref=4d0baeae315ebe7d0ec7682ea3e7c0516027c2b8", "patch": "@@ -0,0 +1,18 @@\n+/* PR sanitizer/109050 */\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=bounds -fno-sanitize-recover=all\" } */\n+\n+int i;\n+int foo (void) { return ++i; }\n+\n+int\n+main ()\n+{\n+  char a[10] = { };\n+  a[foo ()] = a[foo()] | 'a';\n+  if (i != 2)\n+    __builtin_abort ();\n+  a[foo()] |= 'a';\n+  if (i != 3)\n+    __builtin_abort ();\n+}"}]}