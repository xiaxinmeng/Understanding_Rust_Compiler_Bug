{"sha": "49a27995217d813ec99f6c8b4be15c04cf668c57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDlhMjc5OTUyMTdkODEzZWM5OWY2YzhiNGJlMTVjMDRjZjY2OGM1Nw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-12-19T23:27:05Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-12-19T23:27:05Z"}, "message": "dwarfout.c: Remove uses of \"register\" specifier in declarations of arguments and local...\n\n\t* dwarfout.c: Remove uses of \"register\" specifier in\n\tdeclarations of arguments and local variables.\n\t* gensupport.c: Likewise.\n\t* local-alloc.c: Likewise.\n\t* regclass.c: Likewise.\n\nFrom-SVN: r74854", "tree": {"sha": "389e90c73773aee72d7ddedf988df74e642a5bed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/389e90c73773aee72d7ddedf988df74e642a5bed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49a27995217d813ec99f6c8b4be15c04cf668c57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49a27995217d813ec99f6c8b4be15c04cf668c57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49a27995217d813ec99f6c8b4be15c04cf668c57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49a27995217d813ec99f6c8b4be15c04cf668c57/comments", "author": null, "committer": null, "parents": [{"sha": "6fe68b374016c44a0dc26c00080fea053598e287", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fe68b374016c44a0dc26c00080fea053598e287", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fe68b374016c44a0dc26c00080fea053598e287"}], "stats": {"total": 43, "additions": 19, "deletions": 24}, "files": [{"sha": "671be016f0ec87779691409a22b520d4611bbb11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49a27995217d813ec99f6c8b4be15c04cf668c57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49a27995217d813ec99f6c8b4be15c04cf668c57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49a27995217d813ec99f6c8b4be15c04cf668c57", "patch": "@@ -1,3 +1,11 @@\n+2003-12-19  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* dwarfout.c: Remove uses of \"register\" specifier in\n+\tdeclarations of arguments and local variables.\n+\t* gensupport.c: Likewise.\n+\t* local-alloc.c: Likewise.\n+\t* regclass.c: Likewise.\n+\n 2003-12-19  Kelley Cook  <kelleycook@wideopenwest.com>\n \n \t* config.guess: Remove."}, {"sha": "1e335389f49c91e83bb3241afef627f1e74d96bd", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49a27995217d813ec99f6c8b4be15c04cf668c57/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49a27995217d813ec99f6c8b4be15c04cf668c57/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=49a27995217d813ec99f6c8b4be15c04cf668c57", "patch": "@@ -3720,7 +3720,7 @@ output_formal_parameter_die (void *arg)\n     {\n     case 'd':\t/* We were called with some kind of a ..._DECL node.  */\n       {\n-\tregister tree origin = decl_ultimate_origin (node);\n+\ttree origin = decl_ultimate_origin (node);\n \n \tif (origin != NULL)\n \t  abstract_origin_attribute (origin);\n@@ -4774,8 +4774,8 @@ output_type (tree type, tree containing_scope)\n \t      {\n \t\ttree bases = BINFO_BASETYPES (binfo);\n \t\ttree accesses = BINFO_BASEACCESSES (binfo);\n-\t\tregister int n_bases = BINFO_N_BASETYPES (binfo);\n-\t\tregister int i;\n+\t\tint n_bases = BINFO_N_BASETYPES (binfo);\n+\t\tint i;\n \n \t\tfor (i = 0; i < n_bases; i++)\n \t\t  {\n@@ -5092,7 +5092,7 @@ output_decl (tree decl, tree containing_scope)\n \n       {\n \t/* And its containing type.  */\n-\tregister tree origin = decl_class_context (decl);\n+\ttree origin = decl_class_context (decl);\n \tif (origin)\n \t  output_type (origin, containing_scope);\n       }\n@@ -5337,7 +5337,7 @@ output_decl (tree decl, tree containing_scope)\n \n       {\n \t/* And its containing type.  */\n-\tregister tree origin = decl_class_context (decl);\n+\ttree origin = decl_class_context (decl);\n \tif (origin)\n \t  output_type (origin, containing_scope);\n       }\n@@ -5363,7 +5363,7 @@ output_decl (tree decl, tree containing_scope)\n \n       {\n \tvoid (*func) (void *);\n-\tregister tree origin = decl_ultimate_origin (decl);\n+\ttree origin = decl_ultimate_origin (decl);\n \n \tif (origin != NULL && TREE_CODE (origin) == PARM_DECL)\n \t  func = output_formal_parameter_die;"}, {"sha": "fede14a513028510da61a22530895cce4bc04056", "filename": "gcc/gensupport.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49a27995217d813ec99f6c8b4be15c04cf668c57/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49a27995217d813ec99f6c8b4be15c04cf668c57/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=49a27995217d813ec99f6c8b4be15c04cf668c57", "patch": "@@ -842,7 +842,7 @@ process_define_cond_exec (void)\n static char *\n save_string (const char *s, int len)\n {\n-  register char *result = xmalloc (len + 1);\n+  char *result = xmalloc (len + 1);\n \n   memcpy (result, s, len);\n   result[len] = 0;"}, {"sha": "f3caba4f6a6baddac95dca465aef57574386eaef", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49a27995217d813ec99f6c8b4be15c04cf668c57/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49a27995217d813ec99f6c8b4be15c04cf668c57/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=49a27995217d813ec99f6c8b4be15c04cf668c57", "patch": "@@ -2293,11 +2293,7 @@ post_mark_life (int regno, enum machine_mode mode, int life, int birth,\n \t\tint death)\n {\n   int j = HARD_REGNO_NREGS (regno, mode);\n-#ifdef HARD_REG_SET\n-  /* Declare it register if it's a scalar.  */\n-  register\n-#endif\n-    HARD_REG_SET this_reg;\n+  HARD_REG_SET this_reg;\n \n   CLEAR_HARD_REG_SET (this_reg);\n   while (--j >= 0)"}, {"sha": "439f9f6b77340909c3c226ed7ce294e12d1b4b86", "filename": "gcc/regclass.c", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49a27995217d813ec99f6c8b4be15c04cf668c57/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49a27995217d813ec99f6c8b4be15c04cf668c57/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=49a27995217d813ec99f6c8b4be15c04cf668c57", "patch": "@@ -321,10 +321,7 @@ init_reg_sets_1 (void)\n     {\n       for (j = 0; j < N_REG_CLASSES; j++)\n \t{\n-#ifdef HARD_REG_SET\n-\t  register\t\t/* Declare it register if it's a scalar.  */\n-#endif\n-\t    HARD_REG_SET c;\n+\t  HARD_REG_SET c;\n \t  int k;\n \n \t  COPY_HARD_REG_SET (c, reg_class_contents[i]);\n@@ -355,10 +352,7 @@ init_reg_sets_1 (void)\n     {\n       for (j = 0; j < N_REG_CLASSES; j++)\n \t{\n-#ifdef HARD_REG_SET\n-\t  register\t\t/* Declare it register if it's a scalar.  */\n-#endif\n-\t    HARD_REG_SET c;\n+\t  HARD_REG_SET c;\n \t  int k;\n \n \t  COPY_HARD_REG_SET (c, reg_class_contents[i]);\n@@ -2544,10 +2538,7 @@ reg_class_subset_p (enum reg_class c1, enum reg_class c2)\n int\n reg_classes_intersect_p (enum reg_class c1, enum reg_class c2)\n {\n-#ifdef HARD_REG_SET\n-  register\n-#endif\n-    HARD_REG_SET c;\n+  HARD_REG_SET c;\n \n   if (c1 == c2) return 1;\n "}]}