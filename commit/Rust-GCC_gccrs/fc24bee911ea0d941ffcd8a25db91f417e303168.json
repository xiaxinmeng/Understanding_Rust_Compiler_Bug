{"sha": "fc24bee911ea0d941ffcd8a25db91f417e303168", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMyNGJlZTkxMWVhMGQ5NDFmZmNkOGEyNWRiOTFmNDE3ZTMwMzE2OA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-03-01T00:45:26Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-03-01T00:45:26Z"}, "message": "compiler: Fix unary ^ applied to typed signed integer constant.\n\nFrom-SVN: r184681", "tree": {"sha": "1ecaf86a03bbbb29554ab3479d70193eb8dbcff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ecaf86a03bbbb29554ab3479d70193eb8dbcff0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc24bee911ea0d941ffcd8a25db91f417e303168", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc24bee911ea0d941ffcd8a25db91f417e303168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc24bee911ea0d941ffcd8a25db91f417e303168", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc24bee911ea0d941ffcd8a25db91f417e303168/comments", "author": null, "committer": null, "parents": [{"sha": "75c37a6484a9c1212e361b1e959d0639d920780f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c37a6484a9c1212e361b1e959d0639d920780f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75c37a6484a9c1212e361b1e959d0639d920780f"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "abcd5933fb4c0241ddb490240a6eef50b4522e2b", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc24bee911ea0d941ffcd8a25db91f417e303168/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc24bee911ea0d941ffcd8a25db91f417e303168/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=fc24bee911ea0d941ffcd8a25db91f417e303168", "patch": "@@ -4300,14 +4300,23 @@ Unary_expression::eval_integer(Operator op, Type* utype, mpz_t uval, mpz_t val,\n \t  unsigned HOST_WIDE_INT* phwi = new unsigned HOST_WIDE_INT[count];\n \t  memset(phwi, 0, count * sizeof(HOST_WIDE_INT));\n \n+\t  size_t obits = utype->integer_type()->bits();\n+\n+\t  if (!utype->integer_type()->is_unsigned()\n+\t      && mpz_sgn(uval) < 0)\n+\t    {\n+\t      mpz_t adj;\n+\t      mpz_init_set_ui(adj, 1);\n+\t      mpz_mul_2exp(adj, adj, obits);\n+\t      mpz_add(uval, uval, adj);\n+\t      mpz_clear(adj);\n+\t    }\n+\n \t  size_t ecount;\n \t  mpz_export(phwi, &ecount, -1, sizeof(HOST_WIDE_INT), 0, 0, uval);\n \t  go_assert(ecount <= count);\n \n \t  // Trim down to the number of words required by the type.\n-\t  size_t obits = utype->integer_type()->bits();\n-\t  if (!utype->integer_type()->is_unsigned())\n-\t    ++obits;\n \t  size_t ocount = ((obits + HOST_BITS_PER_WIDE_INT - 1)\n \t\t\t   / HOST_BITS_PER_WIDE_INT);\n \t  go_assert(ocount <= count);\n@@ -4322,6 +4331,16 @@ Unary_expression::eval_integer(Operator op, Type* utype, mpz_t uval, mpz_t val,\n \n \t  mpz_import(val, ocount, -1, sizeof(HOST_WIDE_INT), 0, 0, phwi);\n \n+\t  if (!utype->integer_type()->is_unsigned()\n+\t      && mpz_tstbit(val, obits - 1))\n+\t    {\n+\t      mpz_t adj;\n+\t      mpz_init_set_ui(adj, 1);\n+\t      mpz_mul_2exp(adj, adj, obits);\n+\t      mpz_sub(val, val, adj);\n+\t      mpz_clear(adj);\n+\t    }\n+\n \t  delete[] phwi;\n \t}\n       return Integer_expression::check_constant(val, utype, location);"}]}