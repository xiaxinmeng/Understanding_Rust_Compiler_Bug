{"sha": "74687efe94ad01d8af1f28e607bbeba0d80b6d90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ2ODdlZmU5NGFkMDFkOGFmMWYyOGU2MDdiYmViYTBkODBiNmQ5MA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-09-27T18:39:55Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-09-27T18:39:55Z"}, "message": "re PR fortran/33568 (ICE with ANINT (with KIND and an array))\n\n2007-09-27  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/33568\n\t* trans-intrinsic.c (gfc_conv_intrinsic_aint): Allow for the \n\tpossibility of the optional KIND argument by making arg\n\tan array, counting the number of arguments and using arg[0].\n\n2007-09-27  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/33568\n\t* gfortran.dg/anint_1.f90: New test.\n\nFrom-SVN: r128843", "tree": {"sha": "66a2a58c23f76fabbe4e6bf777ba63d4cc027abc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66a2a58c23f76fabbe4e6bf777ba63d4cc027abc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74687efe94ad01d8af1f28e607bbeba0d80b6d90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74687efe94ad01d8af1f28e607bbeba0d80b6d90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74687efe94ad01d8af1f28e607bbeba0d80b6d90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74687efe94ad01d8af1f28e607bbeba0d80b6d90/comments", "author": null, "committer": null, "parents": [{"sha": "5c13b77cb041e4f56b71448b6ce94b7c98a29812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c13b77cb041e4f56b71448b6ce94b7c98a29812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c13b77cb041e4f56b71448b6ce94b7c98a29812"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "1e06226268e05fe517f75c37c2d3717121bacb89", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74687efe94ad01d8af1f28e607bbeba0d80b6d90/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74687efe94ad01d8af1f28e607bbeba0d80b6d90/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=74687efe94ad01d8af1f28e607bbeba0d80b6d90", "patch": "@@ -1,3 +1,10 @@\n+2007-09-27  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/33568\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_aint): Allow for the \n+\tpossibility of the optional KIND argument by making arg\n+\tan array, counting the number of arguments and using arg[0].\n+\n 2007-09-26  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/30780"}, {"sha": "cf7d1e13450ed4e486dd1384f6fbd49351a144f3", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74687efe94ad01d8af1f28e607bbeba0d80b6d90/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74687efe94ad01d8af1f28e607bbeba0d80b6d90/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=74687efe94ad01d8af1f28e607bbeba0d80b6d90", "patch": "@@ -393,14 +393,15 @@ gfc_conv_intrinsic_aint (gfc_se * se, gfc_expr * expr, enum rounding_mode op)\n {\n   tree type;\n   tree itype;\n-  tree arg;\n+  tree arg[2];\n   tree tmp;\n   tree cond;\n   mpfr_t huge;\n-  int n;\n+  int n, nargs;\n   int kind;\n \n   kind = expr->ts.kind;\n+  nargs =  gfc_intrinsic_argument_list_length (expr);\n \n   n = END_BUILTINS;\n   /* We have builtin functions for some cases.  */\n@@ -448,38 +449,38 @@ gfc_conv_intrinsic_aint (gfc_se * se, gfc_expr * expr, enum rounding_mode op)\n \n   /* Evaluate the argument.  */\n   gcc_assert (expr->value.function.actual->expr);\n-  gfc_conv_intrinsic_function_args (se, expr, &arg, 1);\n+  gfc_conv_intrinsic_function_args (se, expr, arg, nargs);\n \n   /* Use a builtin function if one exists.  */\n   if (n != END_BUILTINS)\n     {\n       tmp = built_in_decls[n];\n-      se->expr = build_call_expr (tmp, 1, arg);\n+      se->expr = build_call_expr (tmp, 1, arg[0]);\n       return;\n     }\n \n   /* This code is probably redundant, but we'll keep it lying around just\n      in case.  */\n   type = gfc_typenode_for_spec (&expr->ts);\n-  arg = gfc_evaluate_now (arg, &se->pre);\n+  arg[0] = gfc_evaluate_now (arg[0], &se->pre);\n \n   /* Test if the value is too large to handle sensibly.  */\n   gfc_set_model_kind (kind);\n   mpfr_init (huge);\n   n = gfc_validate_kind (BT_INTEGER, kind, false);\n   mpfr_set_z (huge, gfc_integer_kinds[n].huge, GFC_RND_MODE);\n   tmp = gfc_conv_mpfr_to_tree (huge, kind);\n-  cond = build2 (LT_EXPR, boolean_type_node, arg, tmp);\n+  cond = build2 (LT_EXPR, boolean_type_node, arg[0], tmp);\n \n   mpfr_neg (huge, huge, GFC_RND_MODE);\n   tmp = gfc_conv_mpfr_to_tree (huge, kind);\n-  tmp = build2 (GT_EXPR, boolean_type_node, arg, tmp);\n+  tmp = build2 (GT_EXPR, boolean_type_node, arg[0], tmp);\n   cond = build2 (TRUTH_AND_EXPR, boolean_type_node, cond, tmp);\n   itype = gfc_get_int_type (kind);\n \n-  tmp = build_fix_expr (&se->pre, arg, itype, op);\n+  tmp = build_fix_expr (&se->pre, arg[0], itype, op);\n   tmp = convert (type, tmp);\n-  se->expr = build3 (COND_EXPR, type, cond, tmp, arg);\n+  se->expr = build3 (COND_EXPR, type, cond, tmp, arg[0]);\n   mpfr_clear (huge);\n }\n "}, {"sha": "4f608d0e98e132740232e27a10d8ea3c19da37b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74687efe94ad01d8af1f28e607bbeba0d80b6d90/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74687efe94ad01d8af1f28e607bbeba0d80b6d90/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=74687efe94ad01d8af1f28e607bbeba0d80b6d90", "patch": "@@ -1,3 +1,8 @@\n+2007-09-27  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/33568\n+\t* gfortran.dg/anint_1.f90: New test.\n+\n 2007-09-27  Ian Lance Taylor  <iant@google.com>\n \n \tPR tree-optimization/33565"}, {"sha": "a6b92cbcd3a0091cb6204fa4e620eb7aa6a0c415", "filename": "gcc/testsuite/gfortran.dg/anint_1.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74687efe94ad01d8af1f28e607bbeba0d80b6d90/gcc%2Ftestsuite%2Fgfortran.dg%2Fanint_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74687efe94ad01d8af1f28e607bbeba0d80b6d90/gcc%2Ftestsuite%2Fgfortran.dg%2Fanint_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fanint_1.f90?ref=74687efe94ad01d8af1f28e607bbeba0d80b6d90", "patch": "@@ -0,0 +1,16 @@\n+! { dg-do run }\n+! Check the fix for PR33568 in which the optional KIND\n+! argument for ANINT, with an array for the first argument\n+! would cause an ICE.\n+!\n+! Contributed by Ignacio Fern\ufffdndez Galv\ufffdn <jellby@yahoo.com>\n+!\n+PROGRAM Test\n+  IMPLICIT NONE\n+  INTEGER, PARAMETER :: DP=8\n+  REAL(DP), DIMENSION(1:3) :: A = (/1.76,2.32,7.66/), B\n+  A = ANINT ( A , DP)\n+  B = A\n+  A = ANINT ( A)\n+  if (any (A .ne. B)) call abort ()\n+END PROGRAM Test"}]}