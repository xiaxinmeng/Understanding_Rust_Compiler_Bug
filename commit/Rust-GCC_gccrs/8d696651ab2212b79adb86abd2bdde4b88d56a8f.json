{"sha": "8d696651ab2212b79adb86abd2bdde4b88d56a8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ2OTY2NTFhYjIyMTJiNzlhZGI4NmFiZDJiZGRlNGI4OGQ1NmE4Zg==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2014-10-17T06:36:45Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2014-10-17T06:36:45Z"}, "message": "Use fuse-caller-save info in cprop-hardreg\n\n2014-10-17  Tom de Vries  <tom@codesourcery.com>\n\n\tPR rtl-optimization/61605\n\t* regcprop.c (copyprop_hardreg_forward_1): Use\n\tregs_invalidated_by_this_call instead of regs_invalidated_by_call.\n\n\t* gcc.target/i386/fuse-caller-save.c: Update addition check.  Add movl\n\tabsence check.\n\nFrom-SVN: r216365", "tree": {"sha": "12ea390a5209af9b33f61090776f5ef97a5c1394", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12ea390a5209af9b33f61090776f5ef97a5c1394"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d696651ab2212b79adb86abd2bdde4b88d56a8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d696651ab2212b79adb86abd2bdde4b88d56a8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d696651ab2212b79adb86abd2bdde4b88d56a8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d696651ab2212b79adb86abd2bdde4b88d56a8f/comments", "author": null, "committer": null, "parents": [{"sha": "8c8fe66309a90e2fffd1515650321ca934857357", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c8fe66309a90e2fffd1515650321ca934857357", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c8fe66309a90e2fffd1515650321ca934857357"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "22c440bc8c0d15d513048946fd76f56a8d306f12", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d696651ab2212b79adb86abd2bdde4b88d56a8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d696651ab2212b79adb86abd2bdde4b88d56a8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d696651ab2212b79adb86abd2bdde4b88d56a8f", "patch": "@@ -1,3 +1,9 @@\n+2014-10-17  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR rtl-optimization/61605\n+\t* regcprop.c (copyprop_hardreg_forward_1): Use\n+\tregs_invalidated_by_this_call instead of regs_invalidated_by_call.\n+\n 2014-10-17  Tom de Vries  <tom@codesourcery.com>\n \n \tPR rtl-optimization/61605"}, {"sha": "262de1be046ff971f892941d2d533cb279f99a43", "filename": "gcc/regcprop.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d696651ab2212b79adb86abd2bdde4b88d56a8f/gcc%2Fregcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d696651ab2212b79adb86abd2bdde4b88d56a8f/gcc%2Fregcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregcprop.c?ref=8d696651ab2212b79adb86abd2bdde4b88d56a8f", "patch": "@@ -1005,6 +1005,7 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n \t  unsigned int set_nregs = 0;\n \t  unsigned int regno;\n \t  rtx exp;\n+\t  HARD_REG_SET regs_invalidated_by_this_call;\n \n \t  for (exp = CALL_INSN_FUNCTION_USAGE (insn); exp; exp = XEXP (exp, 1))\n \t    {\n@@ -1023,8 +1024,11 @@ copyprop_hardreg_forward_1 (basic_block bb, struct value_data *vd)\n \t\t}\n \t    }\n \n+\t  get_call_reg_set_usage (insn,\n+\t\t\t\t  &regs_invalidated_by_this_call,\n+\t\t\t\t  regs_invalidated_by_call);\n \t  for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n-\t    if ((TEST_HARD_REG_BIT (regs_invalidated_by_call, regno)\n+\t    if ((TEST_HARD_REG_BIT (regs_invalidated_by_this_call, regno)\n \t\t || HARD_REGNO_CALL_PART_CLOBBERED (regno, vd->e[regno].mode))\n \t\t&& (regno < set_regno || regno >= set_regno + set_nregs))\n \t      kill_value_regno (regno, 1, vd);"}, {"sha": "218cb5628cfa0385faf2768ced0817d5192f39f0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d696651ab2212b79adb86abd2bdde4b88d56a8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d696651ab2212b79adb86abd2bdde4b88d56a8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d696651ab2212b79adb86abd2bdde4b88d56a8f", "patch": "@@ -1,3 +1,9 @@\n+2014-10-17  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR rtl-optimization/61605\n+\t* gcc.target/i386/fuse-caller-save.c: Update addition check.  Add movl\n+\tabsence check.\n+\n 2014-10-17  Markus Trippelsdorf  <markus@trippelsdorf.de>\n \n \tPR middle-end/61848"}, {"sha": "a6e8f1c17b396def90480f6fc0c8227059621539", "filename": "gcc/testsuite/gcc.target/i386/fuse-caller-save.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d696651ab2212b79adb86abd2bdde4b88d56a8f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d696651ab2212b79adb86abd2bdde4b88d56a8f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuse-caller-save.c?ref=8d696651ab2212b79adb86abd2bdde4b88d56a8f", "patch": "@@ -20,5 +20,13 @@ foo (int y)\n /* { dg-final { scan-assembler-not \"push\"  } } */\n /* { dg-final { scan-assembler-not \"pop\"  } } */\n \n-/* Check that addition uses dx. */\n-/* { dg-final { scan-assembler-times \"addl\\t%\\[re\\]?dx, %\\[re\\]?ax\" 1 } } */\n+/* PR61605.  If the first argument register and the return register differ, then\n+   bar leaves the first argument register intact.  That means in foo that the\n+   first argument register still contains y after bar has been called, and\n+   there's no need to copy y to a different register before the call, to be able\n+   to use it after the call.\n+   Check that the copy is absent.  */\n+/* { dg-final { scan-assembler-not \"movl\" { target { ! ia32 } } } } */\n+\n+/* Check that addition uses di (in case of no copy) or dx (in case of copy). */\n+/* { dg-final { scan-assembler-times \"addl\\t%\\[re\\]?d\\[ix\\], %\\[re\\]?ax\" 1 } } */"}]}