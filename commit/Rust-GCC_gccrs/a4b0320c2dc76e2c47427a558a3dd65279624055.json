{"sha": "a4b0320c2dc76e2c47427a558a3dd65279624055", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRiMDMyMGMyZGM3NmUyYzQ3NDI3YTU1OGEzZGQ2NTI3OTYyNDA1NQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2002-07-27T04:12:48Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2002-07-27T04:12:48Z"}, "message": "rs6000.c (function_arg_advance): SPE vararg vectors are split into two registers.\n\n2002-07-25  Aldy Hernandez  <aldyh@redhat.com>\n\n\t* config/rs6000/rs6000.c (function_arg_advance): SPE vararg\n\tvectors are split into two registers.\n\t(function_arg): Same.\n\nFrom-SVN: r55791", "tree": {"sha": "d2c328af1dac3d5fb98e828fb82bb393896363dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2c328af1dac3d5fb98e828fb82bb393896363dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4b0320c2dc76e2c47427a558a3dd65279624055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4b0320c2dc76e2c47427a558a3dd65279624055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4b0320c2dc76e2c47427a558a3dd65279624055", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4b0320c2dc76e2c47427a558a3dd65279624055/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c427db5dabb1af0d148f463cfc5a56d374b6ab6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c427db5dabb1af0d148f463cfc5a56d374b6ab6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c427db5dabb1af0d148f463cfc5a56d374b6ab6f"}], "stats": {"total": 45, "additions": 33, "deletions": 12}, "files": [{"sha": "32034bd08ad83c1ee14a8b0d6bcf429474c5557b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4b0320c2dc76e2c47427a558a3dd65279624055/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4b0320c2dc76e2c47427a558a3dd65279624055/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a4b0320c2dc76e2c47427a558a3dd65279624055", "patch": "@@ -1,3 +1,9 @@\n+2002-07-25  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* config/rs6000/rs6000.c (function_arg_advance): SPE vararg\n+\tvectors are split into two registers.\n+\t(function_arg): Same.\n+\n Thu Jul 26 23:00:13 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* pa.md (extv): Check predicates before emitting extv_32."}, {"sha": "5b6cabb4fdddf68ba150a408344751e62935091a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4b0320c2dc76e2c47427a558a3dd65279624055/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4b0320c2dc76e2c47427a558a3dd65279624055/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a4b0320c2dc76e2c47427a558a3dd65279624055", "patch": "@@ -2918,11 +2918,9 @@ function_arg_advance (cum, mode, type, named)\n       else\n \tcum->words += RS6000_ARG_SIZE (mode, type);\n     }\n-  else if (TARGET_SPE_ABI && TARGET_SPE && SPE_VECTOR_MODE (mode))\n-    {\n-      cum->words += RS6000_ARG_SIZE (mode, type);\n-      cum->sysv_gregno++;\n-    }\n+  else if (TARGET_SPE_ABI && TARGET_SPE && SPE_VECTOR_MODE (mode)\n+\t   && named && cum->sysv_gregno <= GP_ARG_MAX_REG)\n+    cum->sysv_gregno++;\n   else if (DEFAULT_ABI == ABI_V4)\n     {\n       if (TARGET_HARD_FLOAT && TARGET_FPRS\n@@ -2949,11 +2947,12 @@ function_arg_advance (cum, mode, type, named)\n \t  else \n \t    n_words = RS6000_ARG_SIZE (mode, type);\n \n-\t  /* Long long is put in odd registers.  */\n+\t  /* Long long and SPE vectors are put in odd registers.  */\n \t  if (n_words == 2 && (gregno & 1) == 0)\n \t    gregno += 1;\n \n-\t  /* Long long is not split between registers and stack.  */\n+\t  /* Long long and SPE vectors are not split between registers\n+\t     and stack.  */\n \t  if (gregno + n_words - 1 > GP_ARG_MAX_REG)\n \t    {\n \t      /* Long long is aligned on the stack.  */\n@@ -3062,9 +3061,9 @@ function_arg (cum, mode, type, named)\n       else\n \treturn NULL;\n     }\n-  else if (TARGET_SPE_ABI && TARGET_SPE && SPE_VECTOR_MODE (mode))\n+  else if (TARGET_SPE_ABI && TARGET_SPE && SPE_VECTOR_MODE (mode) && named)\n     {\n-      if (cum->sysv_gregno - 1 <= GP_ARG_MAX_REG)\n+      if (cum->sysv_gregno <= GP_ARG_MAX_REG)\n \treturn gen_rtx_REG (mode, cum->sysv_gregno);\n       else\n \treturn NULL;\n@@ -3091,13 +3090,29 @@ function_arg (cum, mode, type, named)\n \t  else \n \t    n_words = RS6000_ARG_SIZE (mode, type);\n \n-\t  /* Long long is put in odd registers.  */\n+\t  /* Long long and SPE vectors are put in odd registers.  */\n \t  if (n_words == 2 && (gregno & 1) == 0)\n \t    gregno += 1;\n \n-\t  /* Long long is not split between registers and stack.  */\n+\t  /* Long long and SPE vectors are not split between registers\n+\t     and stack.  */\n \t  if (gregno + n_words - 1 <= GP_ARG_MAX_REG)\n-\t    return gen_rtx_REG (mode, gregno);\n+\t    {\n+\t      /* SPE vectors in ... get split into 2 registers.  */\n+\t      if (TARGET_SPE && TARGET_SPE_ABI\n+\t\t  && SPE_VECTOR_MODE (mode) && !named)\n+\t\t{\n+\t\t  rtx r1, r2;\n+\t\t  enum machine_mode m = GET_MODE_INNER (mode);\n+\n+\t\t  r1 = gen_rtx_REG (m, gregno);\n+\t\t  r1 = gen_rtx_EXPR_LIST (m, r1, const0_rtx);\n+\t\t  r2 = gen_rtx_REG (m, gregno + 1);\n+\t\t  r2 = gen_rtx_EXPR_LIST (m, r2, GEN_INT (4));\n+\t\t  return gen_rtx_PARALLEL (mode, gen_rtvec (2, r1, r2));\n+\t\t}\n+\t      return gen_rtx_REG (mode, gregno);\n+\t    }\n \t  else\n \t    return NULL;\n \t}"}]}