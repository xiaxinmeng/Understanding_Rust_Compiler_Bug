{"sha": "b4ccaa16993e587a2ba5fff1af6670f8c599f7d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRjY2FhMTY5OTNlNTg3YTJiYTVmZmYxYWY2NjcwZjhjNTk5ZjdkOA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-21T19:26:56Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-21T19:26:56Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1042", "tree": {"sha": "1adf3763a10d5b29bf2e9fb7fcd937c4ba914e07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1adf3763a10d5b29bf2e9fb7fcd937c4ba914e07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4ccaa16993e587a2ba5fff1af6670f8c599f7d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ccaa16993e587a2ba5fff1af6670f8c599f7d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4ccaa16993e587a2ba5fff1af6670f8c599f7d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ccaa16993e587a2ba5fff1af6670f8c599f7d8/comments", "author": null, "committer": null, "parents": [{"sha": "e53c841d038337262176cb181780cb5359392ed7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53c841d038337262176cb181780cb5359392ed7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e53c841d038337262176cb181780cb5359392ed7"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "6b874116640d5d931003f967f71fc466cd4398b0", "filename": "gcc/stmt.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4ccaa16993e587a2ba5fff1af6670f8c599f7d8/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4ccaa16993e587a2ba5fff1af6670f8c599f7d8/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=b4ccaa16993e587a2ba5fff1af6670f8c599f7d8", "patch": "@@ -1000,14 +1000,24 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n   rtx body;\n   int ninputs = list_length (inputs);\n   int noutputs = list_length (outputs);\n-  int nclobbers = list_length (clobbers);\n+  int nclobbers;\n   tree tail;\n   register int i;\n   /* Vector of RTX's of evaluated output operands.  */\n   rtx *output_rtx = (rtx *) alloca (noutputs * sizeof (rtx));\n   /* The insn we have emitted.  */\n   rtx insn;\n \n+  /* Count the number of meaningful clobbered registers, ignoring what\n+     we would ignore later.  */\n+  nclobbers = 0;\n+  for (tail = clobbers; tail; tail = TREE_CHAIN (tail))\n+    {\n+      char *regname = TREE_STRING_POINTER (TREE_VALUE (tail));\n+      if (decode_reg_name (regname) >= 0)\n+\t++nclobbers;\n+    }\n+\n   last_expr_type = 0;\n \n   for (i = 0, tail = outputs; tail; tail = TREE_CHAIN (tail), i++)\n@@ -1168,7 +1178,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \n       /* Store (clobber REG) for each clobbered register specified.  */\n \n-      for (tail = clobbers; tail; tail = TREE_CHAIN (tail), i++)\n+      for (tail = clobbers; tail; tail = TREE_CHAIN (tail))\n \t{\n \t  char *regname = TREE_STRING_POINTER (TREE_VALUE (tail));\n \t  int j = decode_reg_name (regname);\n@@ -1183,7 +1193,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t    }\n \n \t  /* Use QImode since that's guaranteed to clobber just one reg.  */\n-\t  XVECEXP (body, 0, i)\n+\t  XVECEXP (body, 0, i++)\n \t    = gen_rtx (CLOBBER, VOIDmode, gen_rtx (REG, QImode, j));\n \t}\n "}]}