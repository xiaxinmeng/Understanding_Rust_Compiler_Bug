{"sha": "eccec8684142e05f2f92f0f5bd5b47dda3ba1529", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNjZWM4Njg0MTQyZTA1ZjJmOTJmMGY1YmQ1YjQ3ZGRhM2JhMTUyOQ==", "commit": {"author": {"name": "JeanHeyd Meneide", "email": "phdofthehouse@gmail.com", "date": "2020-12-01T21:39:47Z"}, "committer": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-12-01T21:46:51Z"}, "message": "Feature: Macros for identifying the wide and narrow execution string literal encoding\n\ngcc/c-family\n\t* c-cppbuiltin.c (c_cpp_builtins): Add predefined\n\t{__GNUC_EXECUTION_CHARSET_NAME} and\n\t_WIDE_EXECUTION_CHARSET_NAME} macros.\n\ngcc/\n\t* doc/cpp.texi: Document new macros.\n\ngcc/testsuite/\n\t* c-c++-common/cpp/wide-narrow-predef-macros.c: New test.\n\nlibcpp/\n\t* charset.c (init_iconv_desc): Initialize \"to\" and \"from\" fields.\n\t* directives.c (cpp_get_narrow_charset_name): New function.\n\t(cpp_get_wide_charset_name): Likewise.\n\t* include/cpplib.h (cpp_get_narrow_charset_name): Prototype.\n\t(cpp_get_wide_charset_name): Likewise.\n\t* internal.h (cset_converter): Add \"to\" and \"from\" fields.", "tree": {"sha": "fe7097d15b7f8eaa5cfa1635f0783e1824908083", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe7097d15b7f8eaa5cfa1635f0783e1824908083"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eccec8684142e05f2f92f0f5bd5b47dda3ba1529", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eccec8684142e05f2f92f0f5bd5b47dda3ba1529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eccec8684142e05f2f92f0f5bd5b47dda3ba1529", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eccec8684142e05f2f92f0f5bd5b47dda3ba1529/comments", "author": {"login": "ThePhD", "id": 2886436, "node_id": "MDQ6VXNlcjI4ODY0MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/2886436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThePhD", "html_url": "https://github.com/ThePhD", "followers_url": "https://api.github.com/users/ThePhD/followers", "following_url": "https://api.github.com/users/ThePhD/following{/other_user}", "gists_url": "https://api.github.com/users/ThePhD/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThePhD/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThePhD/subscriptions", "organizations_url": "https://api.github.com/users/ThePhD/orgs", "repos_url": "https://api.github.com/users/ThePhD/repos", "events_url": "https://api.github.com/users/ThePhD/events{/privacy}", "received_events_url": "https://api.github.com/users/ThePhD/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "39836f8324d819459cb21198e95b993588c6a2b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39836f8324d819459cb21198e95b993588c6a2b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39836f8324d819459cb21198e95b993588c6a2b1"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "7b7b07db13611478ca10ec85941d1eab938e3728", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eccec8684142e05f2f92f0f5bd5b47dda3ba1529/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eccec8684142e05f2f92f0f5bd5b47dda3ba1529/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=eccec8684142e05f2f92f0f5bd5b47dda3ba1529", "patch": "@@ -877,6 +877,13 @@ c_cpp_builtins (cpp_reader *pfile)\n \n   define_language_independent_builtin_macros (pfile);\n \n+  /* encoding definitions used by users and libraries  */\n+  builtin_define_with_value (\"__GNUC_EXECUTION_CHARSET_NAME\",\n+    cpp_get_narrow_charset_name (pfile), 1);\n+  builtin_define_with_value (\"__GNUC_WIDE_EXECUTION_CHARSET_NAME\",\n+    cpp_get_wide_charset_name (pfile), 1);\n+\n+\n   if (c_dialect_cxx ())\n   {\n     int major;"}, {"sha": "5dcd67259e37b5c3ca9472634d212739b2d84753", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eccec8684142e05f2f92f0f5bd5b47dda3ba1529/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eccec8684142e05f2f92f0f5bd5b47dda3ba1529/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=eccec8684142e05f2f92f0f5bd5b47dda3ba1529", "patch": "@@ -2451,6 +2451,15 @@ features are supported by GCC.\n @item __NO_MATH_ERRNO__\n This macro is defined if @option{-fno-math-errno} is used, or enabled\n by another option such as @option{-ffast-math} or by default.\n+\n+@item __GNUC_EXECUTION_CHARSET_NAME\n+@itemx __GNUC_WIDE_EXECUTION_CHARSET_NAME\n+These macros are defined to expand to a narrow string literal of\n+the name of the narrow and wide compile-time execution character\n+set used.  It directly reflects the name passed to the options\n+@option{-fexec-charset} and @option{-fwide-exec-charset}, or the defaults\n+documented for those options (that is, it can expand to something like\n+@code{\"UTF-8\"}).  @xref{Invocation}.\n @end table\n \n @node System-specific Predefined Macros"}, {"sha": "d5440f8a61e457def011b14072dddea1ddbd6e5b", "filename": "gcc/testsuite/c-c++-common/cpp/wide-narrow-predef-macros.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eccec8684142e05f2f92f0f5bd5b47dda3ba1529/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fwide-narrow-predef-macros.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eccec8684142e05f2f92f0f5bd5b47dda3ba1529/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fwide-narrow-predef-macros.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcpp%2Fwide-narrow-predef-macros.c?ref=eccec8684142e05f2f92f0f5bd5b47dda3ba1529", "patch": "@@ -0,0 +1,13 @@\n+/*\n+   { dg-do compile }\n+ */\n+\n+#if !defined(__GNUC_EXECUTION_CHARSET_NAME)\n+#error \"Required implementation macro for comple-time charset name is not present\"\n+#endif\n+#if !defined(__GNUC_WIDE_EXECUTION_CHARSET_NAME)\n+#error \"Required implementation macro for wide comple-time charset name is not present\"\n+#endif\n+\n+const char narrow_name[] = __GNUC_EXECUTION_CHARSET_NAME;\n+const char wide_name[] = __GNUC_WIDE_EXECUTION_CHARSET_NAME;"}, {"sha": "3e5578b139045fd4c64f40d7f596de7de319484b", "filename": "libcpp/charset.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eccec8684142e05f2f92f0f5bd5b47dda3ba1529/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eccec8684142e05f2f92f0f5bd5b47dda3ba1529/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=eccec8684142e05f2f92f0f5bd5b47dda3ba1529", "patch": "@@ -638,6 +638,9 @@ init_iconv_desc (cpp_reader *pfile, const char *to, const char *from)\n   char *pair;\n   size_t i;\n \n+  ret.to = to;\n+  ret.from = from;\n+\n   if (!strcasecmp (to, from))\n     {\n       ret.func = convert_no_conversion;"}, {"sha": "0d09da71abde0236a147c47256ce61a83ddb3160", "filename": "libcpp/directives.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eccec8684142e05f2f92f0f5bd5b47dda3ba1529/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eccec8684142e05f2f92f0f5bd5b47dda3ba1529/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=eccec8684142e05f2f92f0f5bd5b47dda3ba1529", "patch": "@@ -2596,6 +2596,20 @@ cpp_set_callbacks (cpp_reader *pfile, cpp_callbacks *cb)\n   pfile->cb = *cb;\n }\n \n+/* The narrow character set identifier.  */\n+const char *\n+cpp_get_narrow_charset_name (cpp_reader *pfile)\n+{\n+  return pfile->narrow_cset_desc.to;\n+}\n+\n+/* The wide character set identifier.  */\n+const char *\n+cpp_get_wide_charset_name (cpp_reader *pfile)\n+{\n+  return pfile->wide_cset_desc.to;\n+}\n+\n /* The dependencies structure.  (Creates one if it hasn't already been.)  */\n class mkdeps *\n cpp_get_deps (cpp_reader *pfile)"}, {"sha": "692aee58d19e8d725389cf0348b4e8ef59114f30", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eccec8684142e05f2f92f0f5bd5b47dda3ba1529/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eccec8684142e05f2f92f0f5bd5b47dda3ba1529/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=eccec8684142e05f2f92f0f5bd5b47dda3ba1529", "patch": "@@ -1005,6 +1005,11 @@ extern class mkdeps *cpp_get_deps (cpp_reader *) ATTRIBUTE_PURE;\n extern const char *cpp_find_header_unit (cpp_reader *, const char *file,\n \t\t\t\t\t bool angle_p,  location_t);\n \n+/* Call these to get name data about the various compile-time\n+   charsets.  */\n+extern const char *cpp_get_narrow_charset_name (cpp_reader *) ATTRIBUTE_PURE;\n+extern const char *cpp_get_wide_charset_name (cpp_reader *) ATTRIBUTE_PURE;\n+\n /* This function reads the file, but does not start preprocessing.  It\n    returns the name of the original file; this is the same as the\n    input file, except for preprocessed input.  This will generate at"}, {"sha": "4010af87496f81807b97a69eb354028e2956a35f", "filename": "libcpp/internal.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eccec8684142e05f2f92f0f5bd5b47dda3ba1529/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eccec8684142e05f2f92f0f5bd5b47dda3ba1529/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=eccec8684142e05f2f92f0f5bd5b47dda3ba1529", "patch": "@@ -48,6 +48,8 @@ struct cset_converter\n   convert_f func;\n   iconv_t cd;\n   int width;\n+  const char* from;\n+  const char* to;\n };\n \n #define BITS_PER_CPPCHAR_T (CHAR_BIT * sizeof (cppchar_t))"}]}