{"sha": "ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNjOWEyNWI5Nzc1YTZiMDk5Y2U1MGQ4YmM0ZmQwNWM2ZDFkNmZmYw==", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2017-01-06T17:40:50Z"}, "committer": {"name": "Andre Vieira", "email": "avieira@gcc.gnu.org", "date": "2017-01-06T17:40:50Z"}, "message": "[ARM] Implement support for ACLE Coprocessor MCR and MRC intrinsics\n\ngcc/ChangeLog:\n2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/arm/arm.md (<mcr>): New.\n\t(<mrc>): New.\n\t* config/arm/arm.c (arm_coproc_builtin_available): Add\n\tsupport for mcr, mrc, mcr2 and mrc2.\n\t* config/arm/arm-builtins.c (MCR_QUALIFIERS): Define to...\n\t(arm_mcr_qualifiers): ... this. New.\n\t(MRC_QUALIFIERS): Define to ...\n\t(arm_mrc_qualifiers): ... this. New.\n\t(MCR_QUALIFIERS): Define to ...\n\t(arm_mcr_qualifiers): ... this. New.\n\t* config/arm/arm_acle.h (__arm_mcr, __arm_mrc, __arm_mcr2,\n\t__arm_mrc2): New.\n\t* config/arm/arm_acle_builtins.def (mcr, mcr2, mrc, mrc2): New.\n\t* config/arm/iterators.md (MCRI, mcr, MCR, MRCI, mrc, MRC): New.\n\t* config/arm/unspecs.md (VUNSPEC_MCR, VUNSPEC_MCR2, VUNSPEC_MRC,\n\tVUNSPEC_MRC2): New.\n\ngcc/testsuite/ChangeLog:\n2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* gcc.target/arm/acle/mcr.c: New.\n\t* gcc.target/arm/acle/mrc.c: New.\n\t* gcc.target/arm/acle/mcr2.c: New.\n\t* gcc.target/arm/acle/mrc2.c: New.\n\nFrom-SVN: r244174", "tree": {"sha": "e809201218c7b28fba82037fe84f11ba498eab1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e809201218c7b28fba82037fe84f11ba498eab1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3811581f8b3cf85892a7ff2519abb9a0c9fc79c1"}], "stats": {"total": 201, "additions": 201, "deletions": 0}, "files": [{"sha": "c860f363c1a1dbb4910123a63671854f2a51bd92", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc", "patch": "@@ -1,3 +1,22 @@\n+2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/arm/arm.md (<mcr>): New.\n+\t(<mrc>): New.\n+\t* config/arm/arm.c (arm_coproc_builtin_available): Add\n+\tsupport for mcr, mrc, mcr2 and mrc2.\n+\t* config/arm/arm-builtins.c (MCR_QUALIFIERS): Define to...\n+\t(arm_mcr_qualifiers): ... this. New.\n+\t(MRC_QUALIFIERS): Define to ...\n+\t(arm_mrc_qualifiers): ... this. New.\n+\t(MCR_QUALIFIERS): Define to ...\n+\t(arm_mcr_qualifiers): ... this. New.\n+\t* config/arm/arm_acle.h (__arm_mcr, __arm_mrc, __arm_mcr2,\n+\t__arm_mrc2): New.\n+\t* config/arm/arm_acle_builtins.def (mcr, mcr2, mrc, mrc2): New.\n+\t* config/arm/iterators.md (MCRI, mcr, MCR, MRCI, mrc, MRC): New.\n+\t* config/arm/unspecs.md (VUNSPEC_MCR, VUNSPEC_MCR2, VUNSPEC_MRC,\n+\tVUNSPEC_MRC2): New.\n+\n 2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/arm/arm.md (*ldc): New."}, {"sha": "1a983b27961e96cfab651244af3ba1fb44b87d2e", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc", "patch": "@@ -197,6 +197,26 @@ arm_stc_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define STC_QUALIFIERS \\\n   (arm_stc_qualifiers)\n \n+/* void (unsigned immediate, unsigned immediate,  T, unsigned immediate,\n+\t unsigned immediate, unsigned immediate).  */\n+static enum arm_type_qualifiers\n+arm_mcr_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_void, qualifier_unsigned_immediate,\n+      qualifier_unsigned_immediate, qualifier_none,\n+      qualifier_unsigned_immediate, qualifier_unsigned_immediate,\n+      qualifier_unsigned_immediate };\n+#define MCR_QUALIFIERS \\\n+  (arm_mcr_qualifiers)\n+\n+/* T (unsigned immediate, unsigned immediate, unsigned immediate,\n+      unsigned immediate, unsigned immediate).  */\n+static enum arm_type_qualifiers\n+arm_mrc_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_unsigned_immediate,\n+      qualifier_unsigned_immediate, qualifier_unsigned_immediate,\n+      qualifier_unsigned_immediate, qualifier_unsigned_immediate };\n+#define MRC_QUALIFIERS \\\n+  (arm_mrc_qualifiers)\n /* The first argument (return type) of a store should be void type,\n    which we represent with qualifier_void.  Their first operand will be\n    a DImode pointer to the location to store to, so we must use"}, {"sha": "e376ab3f4bfc0d4c47e99e1f7f681960f7609f17", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc", "patch": "@@ -30908,6 +30908,8 @@ arm_coproc_builtin_available (enum unspecv builtin)\n       case VUNSPEC_LDCL:\n       case VUNSPEC_STC:\n       case VUNSPEC_STCL:\n+      case VUNSPEC_MCR:\n+      case VUNSPEC_MRC:\n \tif (arm_arch4)\n \t  return true;\n \tbreak;\n@@ -30916,6 +30918,8 @@ arm_coproc_builtin_available (enum unspecv builtin)\n       case VUNSPEC_LDC2L:\n       case VUNSPEC_STC2:\n       case VUNSPEC_STC2L:\n+      case VUNSPEC_MCR2:\n+      case VUNSPEC_MRC2:\n \t/* Only present in ARMv5*, ARMv6 (but not ARMv6-M), ARMv7* and\n \t   ARMv8-{A,M}.  */\n \tif (arm_arch5)"}, {"sha": "15926f13bac7beb55f8942cf4c1923cf875a782f", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc", "patch": "@@ -11977,6 +11977,45 @@\n \t\t     (mem:SI (match_operand:SI 2 \"s_register_operand\"))] STCI)]\n   \"arm_coproc_builtin_available (VUNSPEC_<STC>)\")\n \n+(define_insn \"<mcr>\"\n+  [(unspec_volatile [(match_operand:SI 0 \"immediate_operand\" \"n\")\n+\t\t     (match_operand:SI 1 \"immediate_operand\" \"n\")\n+\t\t     (match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t\t     (match_operand:SI 3 \"immediate_operand\" \"n\")\n+\t\t     (match_operand:SI 4 \"immediate_operand\" \"n\")\n+\t\t     (match_operand:SI 5 \"immediate_operand\" \"n\")] MCRI)\n+   (use (match_dup 2))]\n+  \"arm_coproc_builtin_available (VUNSPEC_<MCR>)\"\n+{\n+  arm_const_bounds (operands[0], 0, 16);\n+  arm_const_bounds (operands[1], 0, 8);\n+  arm_const_bounds (operands[3], 0, (1 << 5));\n+  arm_const_bounds (operands[4], 0, (1 << 5));\n+  arm_const_bounds (operands[5], 0, 8);\n+  return \"<mcr>\\\\tp%c0, %1, %2, CR%c3, CR%c4, %5\";\n+}\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"coproc\")])\n+\n+(define_insn \"<mrc>\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(unspec_volatile [(match_operand:SI 1 \"immediate_operand\" \"n\")\n+\t\t\t  (match_operand:SI 2 \"immediate_operand\" \"n\")\n+\t\t\t  (match_operand:SI 3 \"immediate_operand\" \"n\")\n+\t\t\t  (match_operand:SI 4 \"immediate_operand\" \"n\")\n+\t\t\t  (match_operand:SI 5 \"immediate_operand\" \"n\")] MRCI))]\n+  \"arm_coproc_builtin_available (VUNSPEC_<MRC>)\"\n+{\n+  arm_const_bounds (operands[1], 0, 16);\n+  arm_const_bounds (operands[2], 0, 8);\n+  arm_const_bounds (operands[3], 0, (1 << 5));\n+  arm_const_bounds (operands[4], 0, (1 << 5));\n+  arm_const_bounds (operands[5], 0, 8);\n+  return \"<mrc>\\\\tp%c1, %2, %0, CR%c3, CR%c4, %5\";\n+}\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"type\" \"coproc\")])\n+\n ;; Vector bits common to IWMMXT and Neon\n (include \"vec-common.md\")\n ;; Load the Intel Wireless Multimedia Extension patterns"}, {"sha": "a218547bac9ec761487a260bca71a8fe195bc08e", "filename": "gcc/config/arm/arm_acle.h", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Fconfig%2Farm%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Fconfig%2Farm%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle.h?ref=ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc", "patch": "@@ -68,6 +68,22 @@ __arm_stcl (const unsigned int __coproc, const unsigned int __CRd,\n {\n   return __builtin_arm_stcl (__coproc, __CRd, __p);\n }\n+\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+__arm_mcr (const unsigned int __coproc, const unsigned int __opc1,\n+\t   uint32_t __value, const unsigned int __CRn, const unsigned int __CRm,\n+\t   const unsigned int __opc2)\n+{\n+  return __builtin_arm_mcr (__coproc, __opc1, __value, __CRn, __CRm, __opc2);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__arm_mrc (const unsigned int __coproc, const unsigned int __opc1,\n+\t   const unsigned int __CRn, const unsigned int __CRm,\n+\t   const unsigned int __opc2)\n+{\n+  return __builtin_arm_mrc (__coproc, __opc1, __CRn, __CRm, __opc2);\n+}\n #if __ARM_ARCH >= 5\n __extension__ static __inline void __attribute__ ((__always_inline__))\n __arm_cdp2 (const unsigned int __coproc, const unsigned int __opc1,\n@@ -104,6 +120,22 @@ __arm_stc2l (const unsigned int __coproc, const unsigned int __CRd,\n {\n   return __builtin_arm_stc2l (__coproc, __CRd, __p);\n }\n+\n+__extension__ static __inline void __attribute__ ((__always_inline__))\n+__arm_mcr2 (const unsigned int __coproc, const unsigned int __opc1,\n+\t    uint32_t __value, const unsigned int __CRn,\n+\t    const unsigned int __CRm, const unsigned int __opc2)\n+{\n+  return __builtin_arm_mcr2 (__coproc, __opc1, __value, __CRn, __CRm, __opc2);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__arm_mrc2 (const unsigned int __coproc, const unsigned int __opc1,\n+\t    const unsigned int __CRn, const unsigned int __CRm,\n+\t    const unsigned int __opc2)\n+{\n+  return __builtin_arm_mrc2 (__coproc, __opc1, __CRn, __CRm, __opc2);\n+}\n #endif /*  __ARM_ARCH >= 5.  */\n #endif /* (!__thumb__ || __thumb2__) &&  __ARM_ARCH >= 4.  */\n "}, {"sha": "d258f8a3748f6b4f0aeb3d4a28c6d4d79597f69c", "filename": "gcc/config/arm/arm_acle_builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def?ref=ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc", "patch": "@@ -34,3 +34,7 @@ VAR1 (STC, stc, void)\n VAR1 (STC, stc2, void)\n VAR1 (STC, stcl, void)\n VAR1 (STC, stc2l, void)\n+VAR1 (MCR, mcr, void)\n+VAR1 (MCR, mcr2, void)\n+VAR1 (MRC, mrc, si)\n+VAR1 (MRC, mrc2, si)"}, {"sha": "d34a705cd428821c0e2a48a4df428c0aeb61cdda", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc", "patch": "@@ -964,3 +964,15 @@\n \t\t      (VUNSPEC_STCL \"stcl\") (VUNSPEC_STC2L \"stc2l\")])\n (define_int_attr STC [(VUNSPEC_STC \"STC\") (VUNSPEC_STC2 \"STC2\")\n \t\t      (VUNSPEC_STCL \"STCL\") (VUNSPEC_STC2L \"STC2L\")])\n+\n+;; An iterator for the MCR coprocessor instructions\n+(define_int_iterator MCRI [VUNSPEC_MCR VUNSPEC_MCR2])\n+\n+(define_int_attr mcr [(VUNSPEC_MCR \"mcr\") (VUNSPEC_MCR2 \"mcr2\")])\n+(define_int_attr MCR [(VUNSPEC_MCR \"MCR\") (VUNSPEC_MCR2 \"MCR2\")])\n+\n+;; An iterator for the MRC coprocessor instructions\n+(define_int_iterator MRCI [VUNSPEC_MRC VUNSPEC_MRC2])\n+\n+(define_int_attr mrc [(VUNSPEC_MRC \"mrc\") (VUNSPEC_MRC2 \"mrc2\")])\n+(define_int_attr MRC [(VUNSPEC_MRC \"MRC\") (VUNSPEC_MRC2 \"MRC2\")])"}, {"sha": "6bde96e357917a9c1c2eb4d292bc71797232df29", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc", "patch": "@@ -160,6 +160,10 @@\n   VUNSPEC_STC2\t\t; Represent the coprocessor stc2 instruction.\n   VUNSPEC_STCL\t\t; Represent the coprocessor stcl instruction.\n   VUNSPEC_STC2L\t\t; Represent the coprocessor stc2l instruction.\n+  VUNSPEC_MCR\t\t; Represent the coprocessor mcr instruction.\n+  VUNSPEC_MCR2\t\t; Represent the coprocessor mcr2 instruction.\n+  VUNSPEC_MRC\t\t; Represent the coprocessor mrc instruction.\n+  VUNSPEC_MRC2\t\t; Represent the coprocessor mrc2 instruction.\n ])\n \n ;; Enumerators for NEON unspecs."}, {"sha": "cd61f81e57824135e429f7fcce4563101cfeedfa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc", "patch": "@@ -1,3 +1,10 @@\n+2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/arm/acle/mcr.c: New.\n+\t* gcc.target/arm/acle/mrc.c: New.\n+\t* gcc.target/arm/acle/mcr2.c: New.\n+\t* gcc.target/arm/acle/mrc2.c: New.\n+\n 2017-01-06  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* gcc.target/arm/acle/ldc: New."}, {"sha": "93f977a2bdb03ece206cf36b4d67f47811dd0073", "filename": "gcc/testsuite/gcc.target/arm/acle/mcr.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmcr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmcr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmcr.c?ref=ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc", "patch": "@@ -0,0 +1,16 @@\n+/* Test the mcr ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-require-effective-target arm_coproc1_ok } */\n+\n+#include \"arm_acle.h\"\n+\n+void test_mcr (uint32_t a)\n+{\n+  a += 77;\n+  __arm_mcr (10, 5, a, 3, 4, 7);\n+}\n+\n+/* { dg-final { scan-assembler \"add\\[^\\n\\]*#77\\n\" } } */\n+/* { dg-final { scan-assembler \"mcr\\tp10, #5, r\\[r0-9\\]*, CR3, CR4, #7\\n\" } } */"}, {"sha": "5b60d10ff255a0a72dc93fcc13056b0d424ffec7", "filename": "gcc/testsuite/gcc.target/arm/acle/mcr2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmcr2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmcr2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmcr2.c?ref=ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc", "patch": "@@ -0,0 +1,16 @@\n+/* Test the mcr2 ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-require-effective-target arm_coproc2_ok } */\n+\n+#include \"arm_acle.h\"\n+\n+void test_mcr2 (uint32_t a)\n+{\n+  a += 77;\n+  __arm_mcr2 (10, 5, a, 3, 4, 7);\n+}\n+\n+/* { dg-final { scan-assembler \"add\\[^\\n\\]*#77\\n\" } } */\n+/* { dg-final { scan-assembler \"mcr2\\tp10, #5, r\\[r0-9\\]*, CR3, CR4, #7\\n\" } } */"}, {"sha": "34ca6a1638c5667b3ef529ebcf448caecc6e3492", "filename": "gcc/testsuite/gcc.target/arm/acle/mrc.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmrc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmrc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmrc.c?ref=ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc", "patch": "@@ -0,0 +1,14 @@\n+/* Test the mrc ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-require-effective-target arm_coproc1_ok } */\n+\n+#include \"arm_acle.h\"\n+\n+uint32_t test_mrc (void)\n+{\n+  return __arm_mrc (10, 0, 0, 15, 3);\n+}\n+\n+/* { dg-final { scan-assembler \"mrc\\tp10, #0, r\\[r0-9\\]*, CR0, CR15, #3\\n\" } } */"}, {"sha": "3b72a402224dec5544349c9e4d79c9a8aa5a1f8c", "filename": "gcc/testsuite/gcc.target/arm/acle/mrc2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmrc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmrc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fmrc2.c?ref=ecc9a25b9775a6b099ce50d8bc4fd05c6d1d6ffc", "patch": "@@ -0,0 +1,14 @@\n+/* Test the mrc2 ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-save-temps\" } */\n+/* { dg-require-effective-target arm_coproc2_ok } */\n+\n+#include \"arm_acle.h\"\n+\n+uint32_t test_mrc2 (void)\n+{\n+  return __arm_mrc2 (10, 0, 0, 15, 3);\n+}\n+\n+/* { dg-final { scan-assembler \"mrc2\\tp10, #0, r\\[r0-9\\]*, CR0, CR15, #3\\n\" } } */"}]}