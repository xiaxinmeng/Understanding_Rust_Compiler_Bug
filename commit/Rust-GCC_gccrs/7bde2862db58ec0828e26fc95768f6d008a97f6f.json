{"sha": "7bde2862db58ec0828e26fc95768f6d008a97f6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JkZTI4NjJkYjU4ZWMwODI4ZTI2ZmM5NTc2OGY2ZDAwOGE5N2Y2Zg==", "commit": {"author": {"name": "Geoff Keating", "email": "geoffk@cygnus.com", "date": "2000-03-31T22:28:33Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2000-03-31T22:28:33Z"}, "message": "t-aix43 (AR_FLAGS_FOR_TARGET): Adjust for new definition.\n\n* config/rs6000/t-aix43 (AR_FLAGS_FOR_TARGET): Adjust for new\ndefinition.\n* Makefile.in (AR_FLAGS_FOR_TARGET): Is now the flags that\nare passed to any invocation of AR_FOR_TARGET.\n(AR_CREATE_FOR_TARGET): New macro.\n(AR_EXTRACT_FOR_TARGET): New macro.\n(ORDINARY_FLAGS_TO_PASS): Add AR_CREATE_FOR_TARGET,\nAR_EXTRACT_FOR_TARGET.\n(many places): Use AR_CREATE_FOR_TARGET, AR_EXTRACT_FOR_TARGET\nin place of `$(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET)' and\n`$(AR_FOR_TARGET) x'.  Pass AR_CREATE_FOR_TARGET and\nAR_EXTRACT_FOR_TARGET to sub-makes.\n\nFrom-SVN: r32849", "tree": {"sha": "983d8c9949b9d476c6ec3e275ce193a578d8b530", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/983d8c9949b9d476c6ec3e275ce193a578d8b530"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bde2862db58ec0828e26fc95768f6d008a97f6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bde2862db58ec0828e26fc95768f6d008a97f6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bde2862db58ec0828e26fc95768f6d008a97f6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bde2862db58ec0828e26fc95768f6d008a97f6f/comments", "author": null, "committer": null, "parents": [{"sha": "eba30526137838ad493dbbec46fe1ff2ae59e7c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eba30526137838ad493dbbec46fe1ff2ae59e7c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eba30526137838ad493dbbec46fe1ff2ae59e7c5"}], "stats": {"total": 61, "additions": 45, "deletions": 16}, "files": [{"sha": "2281d6509f6589f75091850bd23c3f85d6354616", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bde2862db58ec0828e26fc95768f6d008a97f6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bde2862db58ec0828e26fc95768f6d008a97f6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bde2862db58ec0828e26fc95768f6d008a97f6f", "patch": "@@ -1,3 +1,18 @@\n+2000-03-30  Geoff Keating  <geoffk@cygnus.com>\n+\n+\t* config/rs6000/t-aix43 (AR_FLAGS_FOR_TARGET): Adjust for new\n+\tdefinition.\n+\t* Makefile.in (AR_FLAGS_FOR_TARGET): Is now the flags that\n+\tare passed to any invocation of AR_FOR_TARGET.\n+\t(AR_CREATE_FOR_TARGET): New macro.\n+\t(AR_EXTRACT_FOR_TARGET): New macro.\n+\t(ORDINARY_FLAGS_TO_PASS): Add AR_CREATE_FOR_TARGET,\n+\tAR_EXTRACT_FOR_TARGET.\n+\t(many places): Use AR_CREATE_FOR_TARGET, AR_EXTRACT_FOR_TARGET\n+\tin place of `$(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET)' and\n+\t`$(AR_FOR_TARGET) x'.  Pass AR_CREATE_FOR_TARGET and\n+\tAR_EXTRACT_FOR_TARGET to sub-makes.\n+\n 2000-03-31  Neil Booth <NeilB@earthling.net>\n \n \t* cppexp.c: Delete SKIP_OPERAND.  Correct priority"}, {"sha": "117edb732e69e775ac9558a3c410ee5ac84bff78", "filename": "gcc/Makefile.in", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bde2862db58ec0828e26fc95768f6d008a97f6f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bde2862db58ec0828e26fc95768f6d008a97f6f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7bde2862db58ec0828e26fc95768f6d008a97f6f", "patch": "@@ -197,7 +197,9 @@ AR_FOR_TARGET = ` \\\n        t='$(program_transform_cross_name)'; echo ar | sed -e $$t ; \\\n     fi; \\\n   fi`\n-AR_FLAGS_FOR_TARGET = rc\n+AR_FLAGS_FOR_TARGET = \n+AR_CREATE_FOR_TARGET = $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) rc\n+AR_EXTRACT_FOR_TARGET = $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) x\n RANLIB_FOR_TARGET = ` \\\n   if [ -f $(objdir)/../binutils/ranlib ] ; then \\\n     echo $(objdir)/../binutils/ranlib ; \\\n@@ -613,6 +615,8 @@ LANG_EXTRA_HEADERS = @all_headers@\n # ??? The choices here will need some experimenting with.\n ORDINARY_FLAGS_TO_PASS = \\\n \t\"AR_FLAGS_FOR_TARGET=$(AR_FLAGS_FOR_TARGET)\" \\\n+\t\"AR_CREATE_FOR_TARGET=$(AR_CREATE_FOR_TARGET)\" \\\n+\t\"AR_EXTRACT_FOR_TARGET=$(AR_EXTRACT_FOR_TARGET)\" \\\n \t\"AR_FOR_TARGET=$(AR_FOR_TARGET)\" \\\n \t\"BISON=$(BISON)\" \\\n \t\"BISONFLAGS=$(BISONFLAGS)\" \\\n@@ -936,7 +940,7 @@ libgcc1.conv: libgcc1.a\n libgcc1.null: $(GCC_PASSES)\n \techo \"void __foo () {}\" > dummy.c\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) -c dummy.c\n-\t$(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) libgcc1.null dummy$(objext)\n+\t$(AR_CREATE_FOR_TARGET) libgcc1.null dummy$(objext)\n \trm -f dummy$(objext) dummy.c\n \n # This is $(LIBGCC1) for a cross-compiler.\n@@ -1021,7 +1025,7 @@ libgcc1-asm.a: libgcc2.ready config.status $(srcdir)/config/$(LIB1ASMSRC)\n \t  $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) -c -DL$${name} libgcc1.S; \\\n \t  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n \t  mv libgcc1$(objext) $${name}$(objext); \\\n-\t  $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) tmplibgcc1.a $${name}$(objext); \\\n+\t  $(AR_CREATE_FOR_TARGET) tmplibgcc1.a $${name}$(objext); \\\n \t  rm -f $${name}$(objext); \\\n \tdone\n \t-rm -f libgcc1.S\n@@ -1073,7 +1077,7 @@ libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(FPBIT) $(DPBIT) $(LIB2ADD) \\\n \t  $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) -c -DL$${name} \\\n \t      $(MAYBE_USE_COLLECT2) $(srcdir)/libgcc2.c -o $${name}$(objext); \\\n \t  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n-\t  $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) tmplibgcc2.a $${name}$(objext); \\\n+\t  $(AR_CREATE_FOR_TARGET) tmplibgcc2.a $${name}$(objext); \\\n \t  rm -f $${name}$(objext); \\\n \tdone\n \tfor name in $(LIB2FUNCS_EH); \\\n@@ -1082,7 +1086,7 @@ libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(FPBIT) $(DPBIT) $(LIB2ADD) \\\n \t  $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -fexceptions $(INCLUDES) -c \\\n \t      -DL$${name} $(srcdir)/libgcc2.c -o $${name}$(objext); \\\n \t  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n-\t  $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) tmplibgcc2.a $${name}$(objext); \\\n+\t  $(AR_CREATE_FOR_TARGET) tmplibgcc2.a $${name}$(objext); \\\n \t  rm -f $${name}$(objext); \\\n \tdone\n \tif [ x$(FPBIT) != x ]; then \\\n@@ -1092,7 +1096,7 @@ libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(FPBIT) $(DPBIT) $(LIB2ADD) \\\n \t    $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) -c -DL$${name} \\\n \t        -DFINE_GRAINED_LIBRARIES $(FPBIT) -o $${name}$(objext); \\\n \t    if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n-\t    $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) tmplibgcc2.a $${name}$(objext); \\\n+\t    $(AR_CREATE_FOR_TARGET) tmplibgcc2.a $${name}$(objext); \\\n \t    rm -f $${name}$(objext); \\\n \t  done; \\\n \telse true; fi;\n@@ -1103,7 +1107,7 @@ libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(FPBIT) $(DPBIT) $(LIB2ADD) \\\n \t    $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) -c -DL$${name} \\\n \t        -DFINE_GRAINED_LIBRARIES $(DPBIT) -o _dp$${name}$(objext); \\\n \t    if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n-\t    $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) tmplibgcc2.a _dp$${name}$(objext); \\\n+\t    $(AR_CREATE_FOR_TARGET) tmplibgcc2.a _dp$${name}$(objext); \\\n \t    rm -f _dp$${name}$(objext); \\\n \t  done; \\\n \telse true; fi;\n@@ -1120,13 +1124,15 @@ libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(FPBIT) $(DPBIT) $(LIB2ADD) \\\n \t    for f in .. `cat $${file}`; do if [ x$${f} != x.. ]; then \\\n \t      $(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n \t\tAR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n+\t\tAR_CREATE_FOR_TARGET=\"$(AR_CREATE_FOR_TARGET)\" \\\n+\t\tAR_EXTRACT_FOR_TARGET=\"$(AR_EXTRACT_FOR_TARGET)\" \\\n \t\tAR_FLAGS_FOR_TARGET=\"$(AR_FLAGS_FOR_TARGET)\" CC=\"$(CC)\" \\\n \t\tCFLAGS=\"$(CFLAGS)\" HOST_PREFIX=\"$(HOST_PREFIX)\" \\\n \t\tHOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n \t\tLANGUAGES=\"$(LANGUAGES)\" \\\n \t\tLIBGCC2_CFLAGS=\"$(LIBGCC2_CFLAGS)\" $${f}; \\\n \t      if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n-\t      $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) tmplibgcc2.a $${f}; \\\n+\t      $(AR_CREATE_FOR_TARGET) tmplibgcc2.a $${f}; \\\n \t      rm -f $${f}; \\\n \t    else true; \\\n \t    fi; done; \\\n@@ -1137,7 +1143,7 @@ libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(FPBIT) $(DPBIT) $(LIB2ADD) \\\n \t    else true; fi; \\\n \t    $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) $(INCLUDES) -c $${file}; \\\n \t    if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n-\t    $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) tmplibgcc2.a $${oname}$(objext); \\\n+\t    $(AR_CREATE_FOR_TARGET) tmplibgcc2.a $${oname}$(objext); \\\n \t    rm -f $${name}.s $${oname}$(objext); \\\n \t  fi; \\\n \tdone\n@@ -1156,17 +1162,17 @@ libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(FPBIT) $(DPBIT) $(LIB2ADD) \\\n libgcc.a: $(LIBGCC1) $(LIBGCC2)\n \t-rm -rf tmplibgcc.a libgcc.a tmpcopy\n \tmkdir tmpcopy\n-\t(cd tmpcopy; $(AR_FOR_TARGET) x ../$(LIBGCC2))\n+\t(cd tmpcopy; $(AR_EXTRACT_FOR_TARGET) ../$(LIBGCC2))\n # Some versions of ar (specifically the one in RISC/os 5.x), create an\n # unwritable table of contents file, and then print an error message when\n # the second ar command tries to overwrite this file.  To avoid the error\n # message from ar, we make sure all files are writable.\n \t-(cd tmpcopy; chmod +w * > /dev/null 2>&1)\n \t-if [ x$(LIBGCC1) != x ];\t\t\t\\\n-\tthen (cd tmpcopy; $(AR_FOR_TARGET) x ../$(LIBGCC1));\t\\\n+\tthen (cd tmpcopy; $(AR_EXTRACT_FOR_TARGET) ../$(LIBGCC1));\t\\\n \telse true;\t\t\t\t\t\\\n \tfi\n-\t(cd tmpcopy; $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) ../tmplibgcc.a *$(objext))\n+\t(cd tmpcopy; $(AR_CREATE_FOR_TARGET) ../tmplibgcc.a *$(objext))\n \trm -rf tmpcopy\n \t-if $(RANLIB_TEST_FOR_TARGET) ; then \\\n \t  $(RANLIB_FOR_TARGET) tmplibgcc.a; \\\n@@ -1199,6 +1205,8 @@ stmp-multilib: $(LIBGCC1) libgcc2.c libgcc2.ready $(CONFIG_H) \\\n \t  flags=`echo $$i | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`; \\\n \t  $(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n \t    AR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n+\t    AR_CREATE_FOR_TARGET=\"$(AR_CREATE_FOR_TARGET)\" \\\n+\t    AR_EXTRACT_FOR_TARGET=\"$(AR_EXTRACT_FOR_TARGET)\" \\\n \t    AR_FLAGS_FOR_TARGET=\"$(AR_FLAGS_FOR_TARGET)\" \\\n \t    CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\" \\\n \t    RANLIB_FOR_TARGET=\"$(RANLIB_FOR_TARGET)\" \\\n@@ -1223,6 +1231,8 @@ stmp-multilib-sub:\n \tfi\n \t$(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n \t  AR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n+\t  AR_CREATE_FOR_TARGET=\"$(AR_CREATE_FOR_TARGET)\" \\\n+\t  AR_EXTRACT_FOR_TARGET=\"$(AR_EXTRACT_FOR_TARGET)\" \\\n \t  AR_FLAGS_FOR_TARGET=\"$(AR_FLAGS_FOR_TARGET)\" \\\n \t  CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\" \\\n \t  HOST_PREFIX=\"$(HOST_PREFIX)\" HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n@@ -1237,6 +1247,8 @@ stmp-multilib-sub:\n \telse \\\n \t  $(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n \t    AR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n+\t    AR_CREATE_FOR_TARGET=\"$(AR_CREATE_FOR_TARGET)\" \\\n+\t    AR_EXTRACT_FOR_TARGET=\"$(AR_EXTRACT_FOR_TARGET)\" \\\n \t    AR_FLAGS_FOR_TARGET=\"$(AR_FLAGS_FOR_TARGET)\" \\\n \t    CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\" \\\n \t    HOST_PREFIX=\"$(HOST_PREFIX)\" HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\\n@@ -1245,17 +1257,17 @@ stmp-multilib-sub:\n \tfi\n \trm -rf tmplibgcc.a tmpcopy\n \tmkdir tmpcopy\n-\t(cd tmpcopy; $(AR_FOR_TARGET) x ../$(LIBGCC2))\n+\t(cd tmpcopy; $(AR_EXTRACT_FOR_TARGET) ../$(LIBGCC2))\n # Some versions of ar (specifically the one in RISC/os 5.x), create an\n # unwritable table of contents file, and then print an error message when\n # the second ar command tries to overwrite this file.  To avoid the error\n # message from ar, we make sure all files are writable.\n \t-(cd tmpcopy; chmod +w * > /dev/null 2>&1)\n \tif [ x$(LIBGCC1) != x ]; \\\n-\tthen (cd tmpcopy; $(AR_FOR_TARGET) x ../$(LIBGCC1)); \\\n+\tthen (cd tmpcopy; $(AR_EXTRACT_FOR_TARGET) ../$(LIBGCC1)); \\\n \telse true; \\\n \tfi\n-\t(cd tmpcopy; $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) ../tmplibgcc.a *$(objext))\n+\t(cd tmpcopy; $(AR_CREATE_FOR_TARGET) ../tmplibgcc.a *$(objext))\n \trm -rf libgcc2.a tmpcopy\n \tif $(RANLIB_TEST_FOR_TARGET) ; then \\\n \t  $(RANLIB_FOR_TARGET) tmplibgcc.a; \\\n@@ -1265,6 +1277,8 @@ stmp-multilib-sub:\n \tfor f in .. $(EXTRA_MULTILIB_PARTS); do if [ x$${f} != x.. ]; then \\\n \t  $(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n \t    AR_FOR_TARGET=\"$(AR_FOR_TARGET)\" \\\n+\t    AR_CREATE_FOR_TARGET=\"$(AR_CREATE_FOR_TARGET)\" \\\n+\t    AR_EXTRACT_FOR_TARGET=\"$(AR_EXTRACT_FOR_TARGET)\" \\\n \t    AR_FLAGS_FOR_TARGET=\"$(AR_FLAGS_FOR_TARGET)\" \\\n \t    CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\" \\\n \t    HOST_PREFIX=\"$(HOST_PREFIX)\" HOST_PREFIX_1=\"$(HOST_PREFIX_1)\" \\"}, {"sha": "aa17f106e90d7167fa0188f6f8f3a73067fb236e", "filename": "gcc/config/rs6000/t-aix43", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bde2862db58ec0828e26fc95768f6d008a97f6f/gcc%2Fconfig%2Frs6000%2Ft-aix43", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bde2862db58ec0828e26fc95768f6d008a97f6f/gcc%2Fconfig%2Frs6000%2Ft-aix43", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-aix43?ref=7bde2862db58ec0828e26fc95768f6d008a97f6f", "patch": "@@ -51,7 +51,7 @@ INSTALL_LIBGCC = install-multilib\n \n \n # Both 32-bit and 64-bit objects in archives\n-AR_FLAGS_FOR_TARGET=-X32_64 rc\n+AR_FLAGS_FOR_TARGET=-X32_64\n \n # We need -lld for collect2 (actually this only matters\n # for a native compiler, but this is as good a place as any"}]}