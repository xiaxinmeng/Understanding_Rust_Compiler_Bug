{"sha": "5d583d24200ac33a1cb281b7ddee9aad351151b5", "node_id": "C_kwDOANBUbNoAKDVkNTgzZDI0MjAwYWMzM2ExY2IyODFiN2RkZWU5YWFkMzUxMTUxYjU", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-04T15:56:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-04-05T16:29:33Z"}, "message": "c++: alias template equivalence and CTAD [PR103852]\n\nI had been thinking about DR1286 \"equivalence\" as meaning generally\ninterchangeable, but looking back at the proposed resolution in the context\nof this PR, I see that it's just about use as a template argument.  So let's\ngive a pedwarn if we look through a renaming alias.\n\n\tPR c++/103852\n\tDR 1286\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (do_class_deduction): Pedwarn for renaming alias in C++17.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/class-deduction-alias1.C: Expect warning.", "tree": {"sha": "1cfc2dfb4e7a0fffc6c757a414a607705c266a0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cfc2dfb4e7a0fffc6c757a414a607705c266a0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d583d24200ac33a1cb281b7ddee9aad351151b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d583d24200ac33a1cb281b7ddee9aad351151b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d583d24200ac33a1cb281b7ddee9aad351151b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d583d24200ac33a1cb281b7ddee9aad351151b5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1de6612d994ada8edaab18bbc6afd8e9a57413aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1de6612d994ada8edaab18bbc6afd8e9a57413aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1de6612d994ada8edaab18bbc6afd8e9a57413aa"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "eeebc4c1ef34293185818812700c0a2b077a6e8a", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d583d24200ac33a1cb281b7ddee9aad351151b5/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d583d24200ac33a1cb281b7ddee9aad351151b5/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=5d583d24200ac33a1cb281b7ddee9aad351151b5", "patch": "@@ -29909,8 +29909,6 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n       && CLASS_PLACEHOLDER_TEMPLATE (TREE_TYPE (init)) == tmpl)\n     return cp_build_qualified_type (TREE_TYPE (init), cp_type_quals (ptype));\n \n-  /* Look through alias templates that just rename another template.  */\n-  tmpl = get_underlying_template (tmpl);\n   if (!ctad_template_p (tmpl))\n     {\n       if (complain & tf_error)\n@@ -29920,15 +29918,33 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n   else if (cxx_dialect < cxx20 && DECL_ALIAS_TEMPLATE_P (tmpl))\n     {\n       if (complain & tf_error)\n-\terror (\"alias template deduction only available \"\n-\t       \"with %<-std=c++20%> or %<-std=gnu++20%>\");\n-      return error_mark_node;\n+\t{\n+\t  /* Be permissive with equivalent alias templates.  */\n+\t  tree u = get_underlying_template (tmpl);\n+\t  diagnostic_t dk = (u == tmpl) ? DK_ERROR : DK_PEDWARN;\n+\t  bool complained\n+\t    = emit_diagnostic (dk, input_location, 0,\n+\t\t\t       \"alias template deduction only available \"\n+\t\t\t       \"with %<-std=c++20%> or %<-std=gnu++20%>\");\n+\t  if (u == tmpl)\n+\t    return error_mark_node;\n+\t  else if (complained)\n+\t    {\n+\t      inform (input_location, \"use %qD directly instead\", u);\n+\t      tmpl = u;\n+\t    }\n+\t}\n+      else\n+\treturn error_mark_node;\n     }\n \n   /* Wait until the initializer is non-dependent.  */\n   if (type_dependent_expression_p (init))\n     return ptype;\n \n+  /* Don't bother with the alias rules for an equivalent template.  */\n+  tmpl = get_underlying_template (tmpl);\n+\n   tree type = TREE_TYPE (tmpl);\n \n   bool try_list_ctor = false;"}, {"sha": "ffa5f2bad945a0fec3bd40106911b0bf5f8db966", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction-alias1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d583d24200ac33a1cb281b7ddee9aad351151b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction-alias1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d583d24200ac33a1cb281b7ddee9aad351151b5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction-alias1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction-alias1.C?ref=5d583d24200ac33a1cb281b7ddee9aad351151b5", "patch": "@@ -1,5 +1,6 @@\n // PR c++/103852\n // { dg-do compile { target c++17 } }\n+// { dg-options \"\" }\n \n template <class T> struct b{};\n template <class T, class T1 = b<T>>\n@@ -10,7 +11,7 @@ struct s\n s c(100);\n template <class T, class T1 = b<T>>\n using ss = s<T, T1>;\t     // equivalent under proposed resolution of DR 1286\n-ss tt(1);\t\t     // OK\n+ss tt(1);   // { dg-warning \"alias template deduction\" \"\" { target c++17_only } }\n \n template <class T, class T1 = T>\n using ss2 = s<T, T1>;\t     // different default arg makes it non-equivalent"}]}