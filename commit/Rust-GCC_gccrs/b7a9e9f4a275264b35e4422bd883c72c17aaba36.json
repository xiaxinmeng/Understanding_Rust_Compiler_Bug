{"sha": "b7a9e9f4a275264b35e4422bd883c72c17aaba36", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdhOWU5ZjRhMjc1MjY0YjM1ZTQ0MjJiZDg4M2M3MmMxN2FhYmEzNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-04-15T12:26:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-04-15T12:26:11Z"}, "message": "re PR debug/90074 (wrong debug info at -O3)\n\n2019-04-15  Richard Biener  <rguenther@suse.de>\n\n\tPR debug/90074\n\t* tree-loop-distribution.c (destroy_loop): Preserve correct\n\tdebug info.\n\n\t* gcc.dg/guality/pr90074.c: New testcase.\n\nFrom-SVN: r270370", "tree": {"sha": "2b7a5a62c1c338873e4c6ac8406b97dcb19da0e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b7a5a62c1c338873e4c6ac8406b97dcb19da0e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7a9e9f4a275264b35e4422bd883c72c17aaba36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7a9e9f4a275264b35e4422bd883c72c17aaba36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7a9e9f4a275264b35e4422bd883c72c17aaba36", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7a9e9f4a275264b35e4422bd883c72c17aaba36/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "98dc565ef07f8bf9d720ea419bc1ce14bafc4a3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98dc565ef07f8bf9d720ea419bc1ce14bafc4a3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98dc565ef07f8bf9d720ea419bc1ce14bafc4a3a"}], "stats": {"total": 85, "additions": 77, "deletions": 8}, "files": [{"sha": "2872bd37feeeea41904d43f3b2e82350dbd09289", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7a9e9f4a275264b35e4422bd883c72c17aaba36/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7a9e9f4a275264b35e4422bd883c72c17aaba36/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b7a9e9f4a275264b35e4422bd883c72c17aaba36", "patch": "@@ -1,3 +1,9 @@\n+2019-04-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/90074\n+\t* tree-loop-distribution.c (destroy_loop): Preserve correct\n+\tdebug info.\n+\n 2019-04-15  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/90071"}, {"sha": "aacdaff51ed6b7fad7e63cf756508c450ec72ba8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7a9e9f4a275264b35e4422bd883c72c17aaba36/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7a9e9f4a275264b35e4422bd883c72c17aaba36/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b7a9e9f4a275264b35e4422bd883c72c17aaba36", "patch": "@@ -1,3 +1,8 @@\n+2019-04-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/90074\n+\t* gcc.dg/guality/pr90074.c: New testcase.\n+\n 2019-04-15  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/90071"}, {"sha": "12949282516271df0c5ef9c24d23730dfe023cec", "filename": "gcc/testsuite/gcc.dg/guality/pr90074.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7a9e9f4a275264b35e4422bd883c72c17aaba36/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr90074.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7a9e9f4a275264b35e4422bd883c72c17aaba36/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr90074.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr90074.c?ref=b7a9e9f4a275264b35e4422bd883c72c17aaba36", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+\n+void __attribute__((noinline))\n+optimize_me_not ()\n+{\n+  __asm__ volatile (\"\" : : : \"memory\");\n+}\n+char a;\n+short b[7][1];\n+int main()\n+{\n+  int i, c;\n+  a = 0;\n+  i = 0;\n+  for (; i < 7; i++) {\n+      c = 0;\n+      for (; c < 1; c++)\n+\tb[i][c] = 0;\n+  }\n+  /* i may very well be optimized out, so we cannot test for i == 7.\n+     Instead test i + 1 which will make the test UNSUPPORTED if i\n+     is optimized out.  Since the test previously had wrong debug\n+     with i == 0 this is acceptable.  Optimally we'd produce a\n+     debug stmt for the final value of the loop during loop distribution\n+     which would fix the UNSUPPORTED cases.\n+     c is optimized out at -Og for no obvious reason.  */\n+  optimize_me_not(); /* { dg-final { gdb-test . \"i + 1\" \"8\" } } */\n+    /* { dg-final { gdb-test .-1 \"c + 1\" \"2\" } } */\n+  return 0;\n+}"}, {"sha": "8959f52a67b2bc12e787f1c70b6293cb31961416", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7a9e9f4a275264b35e4422bd883c72c17aaba36/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7a9e9f4a275264b35e4422bd883c72c17aaba36/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=b7a9e9f4a275264b35e4422bd883c72c17aaba36", "patch": "@@ -1094,12 +1094,8 @@ destroy_loop (struct loop *loop)\n \n   bbs = get_loop_body_in_dom_order (loop);\n \n-  redirect_edge_pred (exit, src);\n-  exit->flags &= ~(EDGE_TRUE_VALUE|EDGE_FALSE_VALUE);\n-  exit->flags |= EDGE_FALLTHRU;\n-  cancel_loop_tree (loop);\n-  rescan_loop_exit (exit, false, true);\n-\n+  gimple_stmt_iterator dst_gsi = gsi_after_labels (exit->dest);\n+  bool safe_p = single_pred_p (exit->dest);\n   i = nbbs;\n   do\n     {\n@@ -1116,14 +1112,45 @@ destroy_loop (struct loop *loop)\n \t  if (virtual_operand_p (gimple_phi_result (phi)))\n \t    mark_virtual_phi_result_for_renaming (phi);\n \t}\n-      for (gimple_stmt_iterator gsi = gsi_start_bb (bbs[i]); !gsi_end_p (gsi);\n-\t   gsi_next (&gsi))\n+      for (gimple_stmt_iterator gsi = gsi_start_bb (bbs[i]); !gsi_end_p (gsi);)\n \t{\n \t  gimple *stmt = gsi_stmt (gsi);\n \t  tree vdef = gimple_vdef (stmt);\n \t  if (vdef && TREE_CODE (vdef) == SSA_NAME)\n \t    mark_virtual_operand_for_renaming (vdef);\n+\t  /* Also move and eventually reset debug stmts.  We can leave\n+\t     constant values in place in case the stmt dominates the exit.\n+\t     ???  Non-constant values from the last iteration can be\n+\t     replaced with final values if we can compute them.  */\n+\t  if (gimple_debug_bind_p (stmt))\n+\t    {\n+\t      tree val = gimple_debug_bind_get_value (stmt);\n+\t      gsi_move_before (&gsi, &dst_gsi);\n+\t      if (val\n+\t\t  && (!safe_p\n+\t\t      || !is_gimple_min_invariant (val)\n+\t\t      || !dominated_by_p (CDI_DOMINATORS, exit->src, bbs[i])))\n+\t\t{\n+\t\t  gimple_debug_bind_reset_value (stmt);\n+\t\t  update_stmt (stmt);\n+\t\t}\n+\t    }\n+\t  else\n+\t    gsi_next (&gsi);\n \t}\n+    }\n+  while (i != 0);\n+\n+  redirect_edge_pred (exit, src);\n+  exit->flags &= ~(EDGE_TRUE_VALUE|EDGE_FALSE_VALUE);\n+  exit->flags |= EDGE_FALLTHRU;\n+  cancel_loop_tree (loop);\n+  rescan_loop_exit (exit, false, true);\n+\n+  i = nbbs;\n+  do\n+    {\n+      --i;\n       delete_basic_block (bbs[i]);\n     }\n   while (i != 0);"}]}