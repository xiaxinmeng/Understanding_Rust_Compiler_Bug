{"sha": "e6fc8353fcfc15827c6a3c3dc97538f3507878d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZmYzgzNTNmY2ZjMTU4MjdjNmEzYzNkYzk3NTM4ZjM1MDc4NzhkMw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-05-14T11:41:40Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-05-14T11:41:40Z"}, "message": "Do a refactoring in linemap (PR preprocessor/90382).\n\n2019-05-14  Martin Liska  <mliska@suse.cz>\n\n\tPR preprocessor/90382\n\t* include/line-map.h (get_data_from_adhoc_loc): Add const to\n\tthe first argument.\n\t(get_location_from_adhoc_loc): Likewise.\n\t* line-map.c(get_data_from_adhoc_loc):  Add const to\n\tthe first argument.\n\t(get_location_from_adhoc_loc): Likewise.\n\t(get_combined_adhoc_loc): Use get_location_from_adhoc_loc\n\t(or get_data_from_adhoc_loc).\n\t(get_range_from_adhoc_loc): Likewise.\n\t(get_pure_location): Likewise.\n\t(linemap_position_for_loc_and_offset): Likewise.\n\t(linemap_lookup): Likewise.\n\t(linemap_ordinary_map_lookup): Likewise.\n\t(linemap_macro_map_lookup): Likewise.\n\t(linemap_get_expansion_line): Likewise.\n\t(linemap_get_expansion_filename): Likewise.\n\t(linemap_location_in_system_header_p): Likewise.\n\t(linemap_location_from_macro_expansion_p): Likewise.\n\t(linemap_macro_loc_to_exp_point): Likewise.\n\t(linemap_resolve_location): Likewise.\n\t(linemap_unwind_toward_expansion): Likewise.\n\t(linemap_unwind_to_first_non_reserved_loc): Likewise.\n\t(linemap_expand_location): Likewise.\n\t(linemap_dump_location): Likewise.\n\nFrom-SVN: r271162", "tree": {"sha": "a4a2f49f1546e7a78bd144404af6fa4fd3ce83a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4a2f49f1546e7a78bd144404af6fa4fd3ce83a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6fc8353fcfc15827c6a3c3dc97538f3507878d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6fc8353fcfc15827c6a3c3dc97538f3507878d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6fc8353fcfc15827c6a3c3dc97538f3507878d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6fc8353fcfc15827c6a3c3dc97538f3507878d3/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c688848d6a0c826a3e61d5a5e338f07578e71624", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c688848d6a0c826a3e61d5a5e338f07578e71624", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c688848d6a0c826a3e61d5a5e338f07578e71624"}], "stats": {"total": 80, "additions": 50, "deletions": 30}, "files": [{"sha": "4969b4a9630cf9326c590b05ce7e061bc92d57cc", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6fc8353fcfc15827c6a3c3dc97538f3507878d3/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6fc8353fcfc15827c6a3c3dc97538f3507878d3/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=e6fc8353fcfc15827c6a3c3dc97538f3507878d3", "patch": "@@ -1,3 +1,31 @@\n+2019-05-14  Martin Liska  <mliska@suse.cz>\n+\n+\tPR preprocessor/90382\n+\t* include/line-map.h (get_data_from_adhoc_loc): Add const to\n+\tthe first argument.\n+\t(get_location_from_adhoc_loc): Likewise.\n+\t* line-map.c(get_data_from_adhoc_loc):  Add const to\n+\tthe first argument.\n+\t(get_location_from_adhoc_loc): Likewise.\n+\t(get_combined_adhoc_loc): Use get_location_from_adhoc_loc\n+\t(or get_data_from_adhoc_loc).\n+\t(get_range_from_adhoc_loc): Likewise.\n+\t(get_pure_location): Likewise.\n+\t(linemap_position_for_loc_and_offset): Likewise.\n+\t(linemap_lookup): Likewise.\n+\t(linemap_ordinary_map_lookup): Likewise.\n+\t(linemap_macro_map_lookup): Likewise.\n+\t(linemap_get_expansion_line): Likewise.\n+\t(linemap_get_expansion_filename): Likewise.\n+\t(linemap_location_in_system_header_p): Likewise.\n+\t(linemap_location_from_macro_expansion_p): Likewise.\n+\t(linemap_macro_loc_to_exp_point): Likewise.\n+\t(linemap_resolve_location): Likewise.\n+\t(linemap_unwind_toward_expansion): Likewise.\n+\t(linemap_unwind_to_first_non_reserved_loc): Likewise.\n+\t(linemap_expand_location): Likewise.\n+\t(linemap_dump_location): Likewise.\n+\n 2019-05-07  Nathan Sidwell  <nathan@acm.org>\n \n \t* files.c (_cpp_stack_file): Empty filenames aren't dependencies."}, {"sha": "7649700e8a5131a32366a6d1662773e6822e64f2", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6fc8353fcfc15827c6a3c3dc97538f3507878d3/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6fc8353fcfc15827c6a3c3dc97538f3507878d3/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=e6fc8353fcfc15827c6a3c3dc97538f3507878d3", "patch": "@@ -1054,8 +1054,8 @@ extern location_t get_combined_adhoc_loc (struct line_maps *,\n \t\t\t\t\t       location_t,\n \t\t\t\t\t       source_range,\n \t\t\t\t\t       void *);\n-extern void *get_data_from_adhoc_loc (struct line_maps *, location_t);\n-extern location_t get_location_from_adhoc_loc (struct line_maps *,\n+extern void *get_data_from_adhoc_loc (const struct line_maps *, location_t);\n+extern location_t get_location_from_adhoc_loc (const struct line_maps *,\n \t\t\t\t\t\t    location_t);\n \n extern source_range get_range_from_loc (line_maps *set, location_t loc);"}, {"sha": "e1fc0e9faf4500dba5d227bea2d0f1133224d424", "filename": "libcpp/line-map.c", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6fc8353fcfc15827c6a3c3dc97538f3507878d3/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6fc8353fcfc15827c6a3c3dc97538f3507878d3/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=e6fc8353fcfc15827c6a3c3dc97538f3507878d3", "patch": "@@ -163,8 +163,7 @@ get_combined_adhoc_loc (struct line_maps *set,\n   struct location_adhoc_data **slot;\n \n   if (IS_ADHOC_LOC (locus))\n-    locus\n-      = set->location_adhoc_data_map.data[locus & MAX_LOCATION_T].locus;\n+    locus = get_location_from_adhoc_loc (set, locus);\n   if (locus == 0 && data == NULL)\n     return 0;\n \n@@ -243,7 +242,7 @@ get_combined_adhoc_loc (struct line_maps *set,\n /* Return the data for the adhoc loc.  */\n \n void *\n-get_data_from_adhoc_loc (struct line_maps *set, location_t loc)\n+get_data_from_adhoc_loc (const struct line_maps *set, location_t loc)\n {\n   linemap_assert (IS_ADHOC_LOC (loc));\n   return set->location_adhoc_data_map.data[loc & MAX_LOCATION_T].data;\n@@ -252,7 +251,7 @@ get_data_from_adhoc_loc (struct line_maps *set, location_t loc)\n /* Return the location for the adhoc loc.  */\n \n location_t\n-get_location_from_adhoc_loc (struct line_maps *set, location_t loc)\n+get_location_from_adhoc_loc (const struct line_maps *set, location_t loc)\n {\n   linemap_assert (IS_ADHOC_LOC (loc));\n   return set->location_adhoc_data_map.data[loc & MAX_LOCATION_T].locus;\n@@ -261,7 +260,7 @@ get_location_from_adhoc_loc (struct line_maps *set, location_t loc)\n /* Return the source_range for adhoc location LOC.  */\n \n static source_range\n-get_range_from_adhoc_loc (struct line_maps *set, location_t loc)\n+get_range_from_adhoc_loc (const struct line_maps *set, location_t loc)\n {\n   linemap_assert (IS_ADHOC_LOC (loc));\n   return set->location_adhoc_data_map.data[loc & MAX_LOCATION_T].src_range;\n@@ -321,8 +320,7 @@ location_t\n get_pure_location (line_maps *set, location_t loc)\n {\n   if (IS_ADHOC_LOC (loc))\n-    loc\n-      = set->location_adhoc_data_map.data[loc & MAX_LOCATION_T].locus;\n+    loc = get_location_from_adhoc_loc (set, loc);\n \n   if (loc >= LINEMAPS_MACRO_LOWEST_LOCATION (set))\n     return loc;\n@@ -872,7 +870,7 @@ linemap_position_for_loc_and_offset (struct line_maps *set,\n   const line_map_ordinary * map = NULL;\n \n   if (IS_ADHOC_LOC (loc))\n-    loc = set->location_adhoc_data_map.data[loc & MAX_LOCATION_T].locus;\n+    loc = get_location_from_adhoc_loc (set, loc);\n \n   /* This function does not support virtual locations yet.  */\n   if (linemap_location_from_macro_expansion_p (set, loc))\n@@ -934,7 +932,7 @@ const struct line_map*\n linemap_lookup (struct line_maps *set, location_t line)\n {\n   if (IS_ADHOC_LOC (line))\n-    line = set->location_adhoc_data_map.data[line & MAX_LOCATION_T].locus;\n+    line = get_location_from_adhoc_loc (set, line);\n   if (linemap_location_from_macro_expansion_p (set, line))\n     return linemap_macro_map_lookup (set, line);\n   return linemap_ordinary_map_lookup (set, line);\n@@ -952,7 +950,7 @@ linemap_ordinary_map_lookup (struct line_maps *set, location_t line)\n   const line_map_ordinary *cached, *result;\n \n   if (IS_ADHOC_LOC (line))\n-    line = set->location_adhoc_data_map.data[line & MAX_LOCATION_T].locus;\n+    line = get_location_from_adhoc_loc (set, line);\n \n   if (set ==  NULL || line < RESERVED_LOCATION_COUNT)\n     return NULL;\n@@ -1000,7 +998,7 @@ linemap_macro_map_lookup (struct line_maps *set, location_t line)\n   const struct line_map_macro *cached, *result;\n \n   if (IS_ADHOC_LOC (line))\n-    line = set->location_adhoc_data_map.data[line & MAX_LOCATION_T].locus;\n+    line = get_location_from_adhoc_loc (set, line);\n \n   linemap_assert (line >= LINEMAPS_MACRO_LOWEST_LOCATION (set));\n \n@@ -1130,8 +1128,7 @@ linemap_get_expansion_line (struct line_maps *set,\n   const line_map_ordinary *map = NULL;\n \n   if (IS_ADHOC_LOC (location))\n-    location = set->location_adhoc_data_map.data[location\n-\t\t\t\t\t\t & MAX_LOCATION_T].locus;\n+    location = get_location_from_adhoc_loc (set, location);\n \n   if (location < RESERVED_LOCATION_COUNT)\n     return 0;\n@@ -1158,8 +1155,7 @@ linemap_get_expansion_filename (struct line_maps *set,\n   const struct line_map_ordinary *map = NULL;\n \n   if (IS_ADHOC_LOC (location))\n-    location = set->location_adhoc_data_map.data[location\n-\t\t\t\t\t\t & MAX_LOCATION_T].locus;\n+    location = get_location_from_adhoc_loc (set, location);\n \n   if (location < RESERVED_LOCATION_COUNT)\n     return NULL;\n@@ -1196,8 +1192,7 @@ linemap_location_in_system_header_p (struct line_maps *set,\n   const struct line_map *map = NULL;\n \n   if (IS_ADHOC_LOC (location))\n-    location = set->location_adhoc_data_map.data[location\n-\t\t\t\t\t\t & MAX_LOCATION_T].locus;\n+    location = get_location_from_adhoc_loc (set, location);\n \n   if (location < RESERVED_LOCATION_COUNT)\n     return false;\n@@ -1240,8 +1235,7 @@ linemap_location_from_macro_expansion_p (const struct line_maps *set,\n \t\t\t\t\t location_t location)\n {\n   if (IS_ADHOC_LOC (location))\n-    location = set->location_adhoc_data_map.data[location\n-\t\t\t\t\t\t & MAX_LOCATION_T].locus;\n+    location = get_location_from_adhoc_loc (set, location);\n \n   return IS_MACRO_LOC (location);\n }\n@@ -1467,8 +1461,7 @@ linemap_macro_loc_to_exp_point (struct line_maps *set,\n   struct line_map *map;\n \n   if (IS_ADHOC_LOC (location))\n-    location = set->location_adhoc_data_map.data[location\n-\t\t\t\t\t\t & MAX_LOCATION_T].locus;\n+    location = get_location_from_adhoc_loc (set, location);\n \n   linemap_assert (set && location >= RESERVED_LOCATION_COUNT);\n \n@@ -1542,7 +1535,7 @@ linemap_resolve_location (struct line_maps *set,\n {\n   location_t locus = loc;\n   if (IS_ADHOC_LOC (loc))\n-    locus = set->location_adhoc_data_map.data[loc & MAX_LOCATION_T].locus;\n+    locus = get_location_from_adhoc_loc (set, loc);\n \n   if (locus < RESERVED_LOCATION_COUNT)\n     {\n@@ -1624,7 +1617,7 @@ linemap_unwind_toward_expansion (struct line_maps *set,\n   const struct line_map *resolved_map;\n \n   if (IS_ADHOC_LOC (loc))\n-    loc = set->location_adhoc_data_map.data[loc & MAX_LOCATION_T].locus;\n+    loc = get_location_from_adhoc_loc (set, loc);\n \n   resolved_location =\n     linemap_macro_map_loc_unwind_toward_spelling (set, macro_map, loc);\n@@ -1664,7 +1657,7 @@ linemap_unwind_to_first_non_reserved_loc (struct line_maps *set,\n   const line_map_ordinary *map1 = NULL;\n \n   if (IS_ADHOC_LOC (loc))\n-    loc = set->location_adhoc_data_map.data[loc & MAX_LOCATION_T].locus;\n+    loc = get_location_from_adhoc_loc (set, loc);\n \n   map0 = linemap_lookup (set, loc);\n   if (!linemap_macro_expansion_map_p (map0))\n@@ -1709,9 +1702,8 @@ linemap_expand_location (struct line_maps *set,\n   memset (&xloc, 0, sizeof (xloc));\n   if (IS_ADHOC_LOC (loc))\n     {\n-      xloc.data\n-\t= set->location_adhoc_data_map.data[loc & MAX_LOCATION_T].data;\n-      loc = set->location_adhoc_data_map.data[loc & MAX_LOCATION_T].locus;\n+      xloc.data = get_data_from_adhoc_loc (set, loc);\n+      loc = get_location_from_adhoc_loc (set, loc);\n     }\n \n   if (loc < RESERVED_LOCATION_COUNT)\n@@ -1815,7 +1807,7 @@ linemap_dump_location (struct line_maps *set,\n   int l = -1, c = -1, s = -1, e = -1;\n \n   if (IS_ADHOC_LOC (loc))\n-    loc = set->location_adhoc_data_map.data[loc & MAX_LOCATION_T].locus;\n+    loc = get_location_from_adhoc_loc (set, loc);\n \n   if (loc == 0)\n     return;"}]}