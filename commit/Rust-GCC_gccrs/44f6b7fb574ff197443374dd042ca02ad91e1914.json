{"sha": "44f6b7fb574ff197443374dd042ca02ad91e1914", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRmNmI3ZmI1NzRmZjE5NzQ0MzM3NGRkMDQyY2EwMmFkOTFlMTkxNA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-20T20:56:20Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-26T16:19:18Z"}, "message": "c++: Some improvements to concept diagnostics\n\nThis patch improves our concept diagnostics in two ways.  First, it sets a more\nprecise location for the constraint expressions built in\nfinish_constraint_binary_op.  As a result, when a disjunction is unsatisfied we\nnow print e.g.\n\n.../include/bits/range_access.h:467:2: note: neither operand of the disjunction is satisfied\n  466 |  requires is_bounded_array_v<remove_reference_t<_Tp>> || __member_end<_Tp>\n      |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  467 |  || __adl_end<_Tp>\n      |  ^~~~~~~~~~~~~~~~~\n\ninstead of\n\n.../include/bits/range_access.h:467:2: note: neither operand of the disjunction is satisfied\n  467 |  || __adl_end<_Tp>\n      |  ^~\n\nSecond, this patch changes diagnose_atomic_constraint to print unsatisfied\natomic constraint expressions with their template arguments.  So e.g. we now\nprint\n\ncpp2a/concepts-pr67719.C:9:8: note: the expression \u2018(... &&(C<Tx>)()) [with Tx = {int, long int, void}]\u2019 evaluated to \u2018false\u2019\n\ninstead of\n\ncpp2a/concepts-pr67719.C:9:8: note: the expression \u2018(... &&(C<Tx>)())\u2019 evaluated to \u2018false\u2019\n\nTested on x86_64-pc-linux-gnu, and verified that all the diagnostics emitted in\nour concept tests are no worse with this patch.\n\ngcc/cp/ChangeLog:\n\n\t* constraint.cc (finish_constraint_binary_op): Set expr's location range\n\tto the range of its operands.\n\t(satisfy_atom): Pass MAP instead of ARGS to diagnose_atomic_constraint.\n\t(diagnose_trait_expr): Take the instantiated parameter mapping MAP\n\tinstead of the corresponding template arguments ARGS and adjust body\n\taccordingly.\n\t(diagnose_requires_expr): Likewise.\n\t(diagnose_atomic_constraint): Likewise.  When printing an atomic\n\tconstraint expression, print the instantiated parameter mapping\n\talongside it.\n\t* cxx-pretty-print.cc (cxx_pretty_printer::expression)\n\t[NONTYPE_ARGUMENT_PACK]: Print braces around a NONTYPE_ARGUMENT_PACK.\n\t(cxx_pretty_printer::type_id): Handle TYPE_ARGUMENT_PACK.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/concepts/diagnostic2.C: New test.\n\t* g++.dg/concepts/diagnostic3.C: New test.", "tree": {"sha": "e8e12221b36d992696201f54936aa214c2590be3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8e12221b36d992696201f54936aa214c2590be3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44f6b7fb574ff197443374dd042ca02ad91e1914", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f6b7fb574ff197443374dd042ca02ad91e1914", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44f6b7fb574ff197443374dd042ca02ad91e1914", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f6b7fb574ff197443374dd042ca02ad91e1914/comments", "author": null, "committer": null, "parents": [{"sha": "38e1002657828150b2cda9f80c1f752184286e80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38e1002657828150b2cda9f80c1f752184286e80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38e1002657828150b2cda9f80c1f752184286e80"}], "stats": {"total": 130, "additions": 116, "deletions": 14}, "files": [{"sha": "5962981d3c00ed87f01cb911a1df448c6f176504", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f6b7fb574ff197443374dd042ca02ad91e1914/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f6b7fb574ff197443374dd042ca02ad91e1914/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=44f6b7fb574ff197443374dd042ca02ad91e1914", "patch": "@@ -1,3 +1,19 @@\n+2020-02-26  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* constraint.cc (finish_constraint_binary_op): Set expr's location range\n+\tto the range of its operands.\n+\t(satisfy_atom): Pass MAP instead of ARGS to diagnose_atomic_constraint.\n+\t(diagnose_trait_expr): Take the instantiated parameter mapping MAP\n+\tinstead of the corresponding template arguments ARGS and adjust body\n+\taccordingly.\n+\t(diagnose_requires_expr): Likewise.\n+\t(diagnose_atomic_constraint): Likewise.  When printing an atomic\n+\tconstraint expression, print the instantiated parameter mapping\n+\talongside it.\n+\t* cxx-pretty-print.cc (cxx_pretty_printer::expression)\n+\t[NONTYPE_ARGUMENT_PACK]: Print braces around a NONTYPE_ARGUMENT_PACK.\n+\t(cxx_pretty_printer::type_id): Handle TYPE_ARGUMENT_PACK.\n+\n 2020-02-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/93676 - value-init crash in template."}, {"sha": "4bb4a3f725228e1578d04e9493df1e1ef2834ad9", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f6b7fb574ff197443374dd042ca02ad91e1914/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f6b7fb574ff197443374dd042ca02ad91e1914/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=44f6b7fb574ff197443374dd042ca02ad91e1914", "patch": "@@ -155,14 +155,14 @@ finish_constraint_binary_op (location_t loc,\n   if (!check_constraint_operands (loc, lhs, rhs))\n     return error_mark_node;\n   tree overload;\n-  tree expr = build_x_binary_op (loc, code,\n-\t\t\t\t lhs, TREE_CODE (lhs),\n-\t\t\t\t rhs, TREE_CODE (rhs),\n-\t\t\t\t &overload, tf_none);\n+  cp_expr expr = build_x_binary_op (loc, code,\n+\t\t\t\t    lhs, TREE_CODE (lhs),\n+\t\t\t\t    rhs, TREE_CODE (rhs),\n+\t\t\t\t    &overload, tf_none);\n   /* When either operand is dependent, the overload set may be non-empty.  */\n   if (expr == error_mark_node)\n     return error_mark_node;\n-  SET_EXPR_LOCATION (expr, loc);\n+  expr.set_range (lhs.get_start (), rhs.get_finish ());\n   return expr;\n }\n \n@@ -2547,7 +2547,7 @@ satisfy_atom (tree t, tree args, subst_info info)\n   /* Compute the value of the constraint.  */\n   result = satisfaction_value (cxx_constant_value (result));\n   if (result == boolean_false_node && info.noisy ())\n-    diagnose_atomic_constraint (t, args, info);\n+    diagnose_atomic_constraint (t, map, info);\n \n   return cache.save (result);\n }\n@@ -3056,9 +3056,10 @@ get_constraint_error_location (tree t)\n /* Emit a diagnostic for a failed trait.  */\n \n void\n-diagnose_trait_expr (tree expr, tree args)\n+diagnose_trait_expr (tree expr, tree map)\n {\n   location_t loc = cp_expr_location (expr);\n+  tree args = get_mapped_args (map);\n \n   /* Build a \"fake\" version of the instantiated trait, so we can\n      get the instantiated types from result.  */\n@@ -3271,11 +3272,12 @@ diagnose_requirement (tree req, tree args, tree in_decl)\n }\n \n static void\n-diagnose_requires_expr (tree expr, tree args, tree in_decl)\n+diagnose_requires_expr (tree expr, tree map, tree in_decl)\n {\n   local_specialization_stack stack (lss_copy);\n   tree parms = TREE_OPERAND (expr, 0);\n   tree body = TREE_OPERAND (expr, 1);\n+  tree args = get_mapped_args (map);\n \n   cp_unevaluated u;\n   subst_info info (tf_warning_or_error, NULL_TREE);\n@@ -3292,11 +3294,11 @@ diagnose_requires_expr (tree expr, tree args, tree in_decl)\n     }\n }\n \n-/* Diagnose a substitution failure in the atomic constraint T. Note that\n-   ARGS have been previously instantiated through the parameter map.  */\n+/* Diagnose a substitution failure in the atomic constraint T when applied\n+   with the instantiated parameter mapping MAP.  */\n \n static void\n-diagnose_atomic_constraint (tree t, tree args, subst_info info)\n+diagnose_atomic_constraint (tree t, tree map, subst_info info)\n {\n   /* If the constraint is already ill-formed, we've previously diagnosed\n      the reason. We should still say why the constraints aren't satisfied.  */\n@@ -3320,17 +3322,20 @@ diagnose_atomic_constraint (tree t, tree args, subst_info info)\n   switch (TREE_CODE (expr))\n     {\n     case TRAIT_EXPR:\n-      diagnose_trait_expr (expr, args);\n+      diagnose_trait_expr (expr, map);\n       break;\n     case REQUIRES_EXPR:\n-      diagnose_requires_expr (expr, args, info.in_decl);\n+      diagnose_requires_expr (expr, map, info.in_decl);\n       break;\n     case INTEGER_CST:\n       /* This must be either 0 or false.  */\n       inform (loc, \"%qE is never satisfied\", expr);\n       break;\n     default:\n-      inform (loc, \"the expression %qE evaluated to %<false%>\", expr);\n+      tree a = copy_node (t);\n+      ATOMIC_CONSTR_MAP (a) = map;\n+      inform (loc, \"the expression %qE evaluated to %<false%>\", a);\n+      ggc_free (a);\n     }\n }\n "}, {"sha": "397bdbfa2346f9f49477f013142c22866d201530", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f6b7fb574ff197443374dd042ca02ad91e1914/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f6b7fb574ff197443374dd042ca02ad91e1914/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=44f6b7fb574ff197443374dd042ca02ad91e1914", "patch": "@@ -1214,12 +1214,14 @@ cxx_pretty_printer::expression (tree t)\n       {\n \ttree args = ARGUMENT_PACK_ARGS (t);\n \tint i, len = TREE_VEC_LENGTH (args);\n+\tpp_cxx_left_brace (this);\n \tfor (i = 0; i < len; ++i)\n \t  {\n \t    if (i > 0)\n \t      pp_cxx_separate_with (this, ',');\n \t    expression (TREE_VEC_ELT (args, i));\n \t  }\n+\tpp_cxx_right_brace (this);\n       }\n       break;\n \n@@ -1839,6 +1841,21 @@ cxx_pretty_printer::type_id (tree t)\n       pp_cxx_ws_string (this, \"...\");\n       break;\n \n+    case TYPE_ARGUMENT_PACK:\n+      {\n+\ttree args = ARGUMENT_PACK_ARGS (t);\n+\tint len = TREE_VEC_LENGTH (args);\n+\tpp_cxx_left_brace (this);\n+\tfor (int i = 0; i < len; ++i)\n+\t  {\n+\t    if (i > 0)\n+\t      pp_cxx_separate_with (this, ',');\n+\t    type_id (TREE_VEC_ELT (args, i));\n+\t  }\n+\tpp_cxx_right_brace (this);\n+      }\n+      break;\n+\n     default:\n       c_pretty_printer::type_id (t);\n       break;"}, {"sha": "662ffbfd11e09a3c36ca94b2da634c1c5863381d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f6b7fb574ff197443374dd042ca02ad91e1914/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f6b7fb574ff197443374dd042ca02ad91e1914/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=44f6b7fb574ff197443374dd042ca02ad91e1914", "patch": "@@ -1,3 +1,8 @@\n+2020-02-26  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/concepts/diagnostic2.C: New test.\n+\t* g++.dg/concepts/diagnostic3.C: New test.\n+\n 2020-02-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/93676 - value-init crash in template."}, {"sha": "ce51b71fa8be6049a4960c66ebfdbf510c9369df", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic2.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f6b7fb574ff197443374dd042ca02ad91e1914/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f6b7fb574ff197443374dd042ca02ad91e1914/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic2.C?ref=44f6b7fb574ff197443374dd042ca02ad91e1914", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile { target c++2a } }\n+// { dg-options \"-fdiagnostics-show-caret\" }\n+\n+template<typename T>\n+  inline constexpr bool foo_v = false;\n+\n+template<typename T>\n+  concept foo = foo_v<T> || foo_v<T&>; // { dg-message \"neither operand\" }\n+/* { dg-begin-multiline-output \"\" }\n+   concept foo = foo_v<T> || foo_v<T&>;\n+                 ~~~~~~~~~^~~~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+\n+template<typename T>\n+  requires foo<T>\n+  void bar();\n+/* { dg-begin-multiline-output \"\" }\n+   void bar();\n+   { dg-end-multiline-output \"\" } */\n+/* { dg-prune-output \"~\" } */\n+\n+void\n+baz()\n+{\n+  bar<int>(); // { dg-error \"unsatisfied constraints\" }\n+/* { dg-begin-multiline-output \"\" }\n+   bar<int>();\n+            ^\n+   { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "b4c75409b94f46229be12262d757f5eb4e09a8cd", "filename": "gcc/testsuite/g++.dg/concepts/diagnostic3.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44f6b7fb574ff197443374dd042ca02ad91e1914/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44f6b7fb574ff197443374dd042ca02ad91e1914/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fdiagnostic3.C?ref=44f6b7fb574ff197443374dd042ca02ad91e1914", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile { target c++2a } }\n+\n+template<typename T>\n+  inline constexpr bool foo_v = false;\n+\n+template<typename T>\n+  concept foo = (bool)(foo_v<T> | foo_v<T&>);\n+\n+template<typename... Ts>\n+requires (foo<Ts> && ...)\n+void\n+bar() // { dg-message \"with Ts = .int, char... evaluated to .false.\" }\n+{ }\n+\n+template<int>\n+struct S { };\n+\n+template<int... Is>\n+requires (foo<S<Is>> && ...)\n+void\n+baz() // { dg-message \"with Is = .2, 3, 4... evaluated to .false.\" }\n+{ }\n+\n+void\n+baz()\n+{\n+  bar<int, char>(); // { dg-error \"unsatisfied constraints\" }\n+  baz<2,3,4>(); // { dg-error \"unsatisfied constraints\" }\n+}"}]}