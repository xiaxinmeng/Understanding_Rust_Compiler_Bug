{"sha": "5681c890b67c0f3c3134fb9897293866594cbd5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY4MWM4OTBiNjdjMGYzYzMxMzRmYjk4OTcyOTM4NjY1OTRjYmQ1Yw==", "commit": {"author": {"name": "Petur Runolfsson", "email": "peturr02@ru.is", "date": "2003-11-13T17:43:48Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-11-13T17:43:48Z"}, "message": "re PR libstdc++/12594 (DRs 60 [TC] and 63 [TC] not implemented)\n\n\n2003-11-13  Petur Runolfsson  <peturr02@ru.is>\n\n\tPR libstdc++/12594\n\t* include/bits/ostream.tcc\n\t(basic_ostream::operator<<(basic_ostream& (*)(basic_ostream&)),\n\tbasic_ostream::operator<<(basic_ios& (*)(basic_ios&)),\n\tbasic_ostream::operator<<(ios_base& (*)(ios_base&))):\n\tImplement the resolution of DR 60 (TC): These are not formatted\n\toutput functions so don't construct sentry objects and don't\n\tcatch exceptions.\n\t(basic_ostream::put, basic_ostream::write): Implement the\n\tresolution of DR 63 (TC) by catching exceptions and setting\n\tbadbit.\n\t(basic_ostream::flush): Implement the resolution of DR 60 (TC):\n\tThis is not an unformatted output function so don't construct\n\ta sentry object.\n\t* testsuite/testsuite_io.h (sync_streambuf): Define.\n\t* testsuite/27_io/basic_ostream/flush/char/2.cc: New test.\n\t* testsuite/27_io/basic_ostream/inserters_other/char/5.cc: New test.\n\t* testsuite/27_io/basic_ostream/put/char/1.cc: New test.\n\t* testsuite/27_io/basic_ostream/write/char/1.cc: New test.\n\nFrom-SVN: r73551", "tree": {"sha": "987089f2712ac37da35236a2d219760bdafc2b62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/987089f2712ac37da35236a2d219760bdafc2b62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5681c890b67c0f3c3134fb9897293866594cbd5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5681c890b67c0f3c3134fb9897293866594cbd5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5681c890b67c0f3c3134fb9897293866594cbd5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5681c890b67c0f3c3134fb9897293866594cbd5c/comments", "author": null, "committer": null, "parents": [{"sha": "148a82c8ad081d9bc615389c6a167824fdf2e2bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/148a82c8ad081d9bc615389c6a167824fdf2e2bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/148a82c8ad081d9bc615389c6a167824fdf2e2bf"}], "stats": {"total": 461, "additions": 408, "deletions": 53}, "files": [{"sha": "4aaf2ad4af66ac9cfa2ca323f57fdcbdaf4663fe", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5681c890b67c0f3c3134fb9897293866594cbd5c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5681c890b67c0f3c3134fb9897293866594cbd5c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5681c890b67c0f3c3134fb9897293866594cbd5c", "patch": "@@ -1,3 +1,25 @@\n+2003-11-13  Petur Runolfsson  <peturr02@ru.is>\n+\n+\tPR libstdc++/12594\n+\t* include/bits/ostream.tcc\n+\t(basic_ostream::operator<<(basic_ostream& (*)(basic_ostream&)),\n+\tbasic_ostream::operator<<(basic_ios& (*)(basic_ios&)),\n+\tbasic_ostream::operator<<(ios_base& (*)(ios_base&))):\n+\tImplement the resolution of DR 60 (TC): These are not formatted\n+\toutput functions so don't construct sentry objects and don't\n+\tcatch exceptions.\n+\t(basic_ostream::put, basic_ostream::write): Implement the\n+\tresolution of DR 63 (TC) by catching exceptions and setting\n+\tbadbit.\n+\t(basic_ostream::flush): Implement the resolution of DR 60 (TC):\n+\tThis is not an unformatted output function so don't construct\n+\ta sentry object.\n+\t* testsuite/testsuite_io.h (sync_streambuf): Define.\n+\t* testsuite/27_io/basic_ostream/flush/char/2.cc: New test.\n+\t* testsuite/27_io/basic_ostream/inserters_other/char/5.cc: New test.\n+\t* testsuite/27_io/basic_ostream/put/char/1.cc: New test.\n+\t* testsuite/27_io/basic_ostream/write/char/1.cc: New test.\n+\t\n 2003-11-13  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/27_io/basic_filebuf/overflow/wchar_t/11305-1:"}, {"sha": "3235754cd35328826e6864bf50b8245a8abadfb2", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 52, "deletions": 53, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5681c890b67c0f3c3134fb9897293866594cbd5c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5681c890b67c0f3c3134fb9897293866594cbd5c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=5681c890b67c0f3c3134fb9897293866594cbd5c", "patch": "@@ -64,42 +64,21 @@ namespace std\n     basic_ostream<_CharT, _Traits>::\n     operator<<(__ostream_type& (*__pf)(__ostream_type&))\n     {\n-      sentry __cerb(*this);\n-      if (__cerb)\n-\t{ \n-\t  try \n-\t    { __pf(*this); }\n-\t  catch(...)\n-\t    {\n-\t      // 27.6.2.5.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n-\t}\n-      return *this;\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // DR 60. What is a formatted input function?\n+      // The inserters for manipulators are *not* formatted output functions.\n+      return __pf(*this);\n     }\n   \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>& \n     basic_ostream<_CharT, _Traits>::\n     operator<<(__ios_type& (*__pf)(__ios_type&))\n     {\n-      sentry __cerb(*this);\n-      if (__cerb)\n-\t{ \n-\t  try \n-\t    { __pf(*this); }\n-\t  catch(...)\n-\t    {\n-\t      // 27.6.2.5.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n-\t}\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // DR 60. What is a formatted input function?\n+      // The inserters for manipulators are *not* formatted output functions.\n+      __pf(*this);\n       return *this;\n     }\n \n@@ -108,20 +87,10 @@ namespace std\n     basic_ostream<_CharT, _Traits>::\n     operator<<(ios_base& (*__pf)(ios_base&))\n     {\n-      sentry __cerb(*this);\n-      if (__cerb)\n-\t{ \n-\t  try \n-\t    { __pf(*this); }\n-\t  catch(...)\n-\t    {\n-\t      // 27.6.2.5.1 Common requirements.\n-\t      // Turn this on without causing an ios::failure to be thrown.\n-\t      this->_M_setstate(ios_base::badbit);\n-\t      if ((this->exceptions() & ios_base::badbit) != 0)\n-\t\t__throw_exception_again;\n-\t    }\n-\t}\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // DR 60. What is a formatted input function?\n+      // The inserters for manipulators are *not* formatted output functions.\n+      __pf(*this);\n       return *this;\n     }\n \n@@ -378,12 +347,27 @@ namespace std\n     basic_ostream<_CharT, _Traits>&\n     basic_ostream<_CharT, _Traits>::put(char_type __c)\n     { \n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // DR 60. What is a formatted input function?\n+      // basic_ostream::put(char_type) is an unformatted output function.\n+      // DR 63. Exception-handling policy for unformatted output.\n+      // Unformatted output functions should catch exceptions thrown\n+      // from streambuf members.\n       sentry __cerb(*this);\n       if (__cerb) \n \t{\n-\t  int_type __put = this->rdbuf()->sputc(__c); \n-\t  if (traits_type::eq_int_type(__put, traits_type::eof()))\n-\t    this->setstate(ios_base::badbit);\n+\t  try\n+\t    {\n+\t      int_type __put = this->rdbuf()->sputc(__c); \n+\t      if (traits_type::eq_int_type(__put, traits_type::eof()))\n+\t\tthis->setstate(ios_base::badbit);\n+\t    }\n+\t  catch (...)\n+\t    {\n+\t      this->_M_setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n \t}\n       return *this;  \n     }\n@@ -392,22 +376,37 @@ namespace std\n     basic_ostream<_CharT, _Traits>&\n     basic_ostream<_CharT, _Traits>::write(const _CharT* __s, streamsize __n)\n     {\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // DR 60. What is a formatted input function?\n+      // basic_ostream::write(const char_type*, streamsize) is an\n+      // unformatted output function.\n+      // DR 63. Exception-handling policy for unformatted output.\n+      // Unformatted output functions should catch exceptions thrown\n+      // from streambuf members.\n       sentry __cerb(*this);\n       if (__cerb)\n-\t_M_write(__s, __n);\n+\t{\n+\t  try\n+\t    { _M_write(__s, __n); }\n+\t  catch (...)\n+\t    {\n+\t      this->_M_setstate(ios_base::badbit);\n+\t      if ((this->exceptions() & ios_base::badbit) != 0)\n+\t\t__throw_exception_again;\n+\t    }\n+\t}\n       return *this;\n     }\n \n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>&\n     basic_ostream<_CharT, _Traits>::flush()\n     {\n-      sentry __cerb(*this);\n-      if (__cerb) \n-\t{\n-\t  if (this->rdbuf() && this->rdbuf()->pubsync() == -1)\n-\t    this->setstate(ios_base::badbit);\n-\t}\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // DR 60. What is a formatted input function?\n+      // basic_ostream::flush() is *not* an unformatted output function.\n+      if (this->rdbuf() && this->rdbuf()->pubsync() == -1)\n+\tthis->setstate(ios_base::badbit);\n       return *this;\n     }\n   "}, {"sha": "2f03116979025e783cc6d7ae9d965bd49b7bd4e4", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/flush/char/2.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5681c890b67c0f3c3134fb9897293866594cbd5c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5681c890b67c0f3c3134fb9897293866594cbd5c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fflush%2Fchar%2F2.cc?ref=5681c890b67c0f3c3134fb9897293866594cbd5c", "patch": "@@ -0,0 +1,66 @@\n+// 2003-09-22  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.6 Unformatted output functions\n+//\n+// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+// DR 60. What is a formatted input function?\n+// basic_ostream::flush() does not behave as an unformatted output function.\n+\n+#include <ostream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+void test02()\n+{\n+  bool test = true;\n+\n+  __gnu_test::sync_streambuf buf;\n+  std::ostream os(&buf);\n+  \n+  __gnu_test::sync_streambuf buf_tie;\n+  std::ostream os_tie(&buf_tie);\n+\n+  // No sentry should be constructed so os.tie()->flush() should not be\n+  // called.\n+  os.tie(&os_tie);\n+  \n+  os.flush();\n+\n+  VERIFY( os.good() );\n+  VERIFY( buf.sync_called() );\n+  VERIFY( !buf_tie.sync_called() );\n+\n+  // os.rdbuf()->pubsync() should be called even if !os.good().\n+  os.setstate(std::ios_base::eofbit);\n+\n+  os.flush();\n+\n+  VERIFY( os.rdstate() == std::ios_base::eofbit );\n+  VERIFY( buf.sync_called() );\n+  VERIFY( !buf_tie.sync_called() );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}\n+"}, {"sha": "d905875d34000b7022de3e8b313821262e910688", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/inserters_other/char/5.cc", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5681c890b67c0f3c3134fb9897293866594cbd5c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5681c890b67c0f3c3134fb9897293866594cbd5c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Finserters_other%2Fchar%2F5.cc?ref=5681c890b67c0f3c3134fb9897293866594cbd5c", "patch": "@@ -0,0 +1,99 @@\n+// 2003-09-22  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.5.3 basic_ostream manipulator inserters\n+//\n+// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+// DR 60. What is a formatted input function?\n+// Inserters for manipulators do not behave as formatted output functions.\n+\n+#include <ostream>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+std::ostream& func1(std::ostream&)\n+{ throw std::runtime_error(\"\"); }\n+\n+std::ios& func2(std::ios&)\n+{ throw std::runtime_error(\"\"); }\n+\n+std::ios_base& func3(std::ios_base&)\n+{ throw std::runtime_error(\"\"); }\n+\n+template<typename T>\n+void test(T& (*f)(T&))\n+{\n+  bool test = true;\n+\n+  __gnu_test::sync_streambuf buf;\n+  std::ostream os(&buf);\n+  \n+  __gnu_test::sync_streambuf buf_tie;\n+  std::ostream os_tie(&buf_tie);\n+\n+  // No sentry should be constructed so os.tie()->flush() should not be\n+  // called.\n+  os.tie(&os_tie);\n+\n+  try\n+    {\n+      os << f;\n+      // Exceptions thrown by f should not be caught\n+      VERIFY( false );\n+    }\n+  catch (std::runtime_error&)\n+    {\n+    }\n+\n+  // Exceptions thrown by f should not cause badbit to be set\n+  VERIFY( os.good() );\n+  VERIFY( !buf_tie.sync_called() );\n+\n+  // The manipulator should be called even if !os.good().\n+  os.setstate(std::ios_base::eofbit);\n+\n+  try\n+    {\n+      os << f;\n+      // Exceptions thrown by f should not be caught\n+      VERIFY( false );\n+    }\n+  catch (std::runtime_error&)\n+    {\n+    }\n+\n+  // Exceptions thrown by f should not cause badbit to be set\n+  VERIFY( os.rdstate() == std::ios_base::eofbit );\n+  VERIFY( !buf_tie.sync_called() );\n+}\n+\n+void test05()\n+{\n+  test(&func1);\n+  test(&func2);\n+  test(&func3);\n+}\n+\n+int main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "df396e5f06738ea9d12e9c903b6bd8cac0bda8ec", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/put/char/1.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5681c890b67c0f3c3134fb9897293866594cbd5c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fput%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5681c890b67c0f3c3134fb9897293866594cbd5c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fput%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fput%2Fchar%2F1.cc?ref=5681c890b67c0f3c3134fb9897293866594cbd5c", "patch": "@@ -0,0 +1,72 @@\n+// 2003-09-22  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.6 Unformatted output functions\n+//\n+// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+// DR 60. What is a formatted input function?\n+// basic_ostream::put(char_type) is an unformatted output function.\n+// DR 63. Exception-handling policy for unformatted output.\n+// Unformatted output functions should catch exceptions thrown\n+// from streambuf members.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+class Buf : public std::streambuf\n+{\n+protected:\n+  virtual int_type overflow(int_type = traits_type::eof())\n+  { throw 0; }\n+};\n+\n+void test01()\n+{\n+  bool test = true;\n+\n+  Buf buf;\n+  std::ostream os(&buf);\n+\n+  VERIFY( os.good() );\n+\n+  os.put('a');\n+\n+  VERIFY( os.rdstate() == std::ios_base::badbit );\n+\n+  os.clear();\n+  os.exceptions(std::ios_base::badbit);\n+\n+  try\n+    {\n+      os.put('b');\n+      VERIFY( false );\n+    }\n+  catch (int)\n+    {\n+      VERIFY( os.rdstate() == std::ios_base::badbit );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2cb7f48b8b034d045a16d3b4af3c922b263b6916", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/write/char/1.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5681c890b67c0f3c3134fb9897293866594cbd5c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fwrite%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5681c890b67c0f3c3134fb9897293866594cbd5c/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fwrite%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Fwrite%2Fchar%2F1.cc?ref=5681c890b67c0f3c3134fb9897293866594cbd5c", "patch": "@@ -0,0 +1,73 @@\n+// 2003-09-22  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.6.2.6 Unformatted output functions\n+//\n+// _GLIBCXX_RESOLVE_LIB_DEFECTS\n+// DR 60. What is a formatted input function?\n+// basic_ostream::write(const char_type*, streamsize) is an unformatted\n+// output function.\n+// DR 63. Exception-handling policy for unformatted output.\n+// Unformatted output functions should catch exceptions thrown\n+// from streambuf members.\n+\n+#include <ostream>\n+#include <streambuf>\n+#include <testsuite_hooks.h>\n+\n+class Buf : public std::streambuf\n+{\n+protected:\n+  virtual int_type overflow(int_type = traits_type::eof())\n+  { throw 0; }\n+};\n+\n+void test01()\n+{\n+  bool test = true;\n+\n+  Buf buf;\n+  std::ostream os(&buf);\n+\n+  VERIFY( os.good() );\n+\n+  os.write(\"a\", 1);\n+\n+  VERIFY( os.rdstate() == std::ios_base::badbit );\n+\n+  os.clear();\n+  os.exceptions(std::ios_base::badbit);\n+\n+  try\n+    {\n+      os.write(\"b\", 1);\n+      VERIFY( false );\n+    }\n+  catch (int)\n+    {\n+      VERIFY( os.rdstate() == std::ios_base::badbit );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "86e1696845b8db08b8a771c080fb35a87cff6030", "filename": "libstdc++-v3/testsuite/testsuite_io.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5681c890b67c0f3c3134fb9897293866594cbd5c/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5681c890b67c0f3c3134fb9897293866594cbd5c/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_io.h?ref=5681c890b67c0f3c3134fb9897293866594cbd5c", "patch": "@@ -73,6 +73,30 @@ namespace __gnu_test\n     }\n     \n   };\n+\n+  // Used to check if basic_streambuf::pubsync() has been called.\n+  // This is useful for checking if a function creates [io]stream::sentry\n+  // objects, since the sentry constructors call tie()->flush().\n+  class sync_streambuf : public std::streambuf\n+  {\n+  private:\n+    bool m_sync_called;\n+    \n+  public:\n+    sync_streambuf()\n+    : m_sync_called(false)\n+    { }\n+\n+    bool sync_called() const\n+    { return m_sync_called; }\n+\n+  protected:\n+    int sync()\n+    {\n+      m_sync_called = true;\n+      return 0;\n+    }\n+  };\n }; // namespace __gnu_test\n \n #endif // _GLIBCXX_TESTSUITE_IO_H"}]}