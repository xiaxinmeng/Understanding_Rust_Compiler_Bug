{"sha": "7a1f3f5f3bdf7862391b3404eaaf348364ba57bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ExZjNmNWYzYmRmNzg2MjM5MWIzNDA0ZWFhZjM0ODM2NGJhNTdiZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-22T23:42:57Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-22T23:42:57Z"}, "message": "decl.c (check_tag_decl): Handle RID_THREAD.\n\n        * decl.c (check_tag_decl): Handle RID_THREAD.\n        (obscure_complex_init): Reject run-time init of tls.\n        (grokvardecl, grokdeclarator): Handle RID_THREAD.\n        * lex.c (reswords): Add __thread.\n        (rid_to_yy): Map RID_THREAD to SCSPEC.\n\n        * g++.dg/dg.exp: Prune the tls subdirectory.\n        * g++.dg/tls/tls.exp, g++.dg/tls/trivial.C: New.\n        * g++.dg/tls/diag-1.C, g++.dg/tls/diag-2.C: New.\n        * g++.dg/tls/init-1.C: New.\n\nFrom-SVN: r53754", "tree": {"sha": "cb01828f5937f4aad110232990db6d0285400a54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb01828f5937f4aad110232990db6d0285400a54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/comments", "author": null, "committer": null, "parents": [{"sha": "c711ba8e2edb69d3f6fa58cfba1d6dc49847afcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c711ba8e2edb69d3f6fa58cfba1d6dc49847afcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c711ba8e2edb69d3f6fa58cfba1d6dc49847afcd"}], "stats": {"total": 217, "additions": 204, "deletions": 13}, "files": [{"sha": "69008fdd8c4fc1ba958cc0847fd919e980548eee", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7a1f3f5f3bdf7862391b3404eaaf348364ba57bd", "patch": "@@ -1,3 +1,11 @@\n+2002-05-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* decl.c (check_tag_decl): Handle RID_THREAD.\n+\t(obscure_complex_init): Reject run-time init of tls.\n+\t(grokvardecl, grokdeclarator): Handle RID_THREAD.\n+\t* lex.c (reswords): Add __thread.\n+\t(rid_to_yy): Map RID_THREAD to SCSPEC.\n+\n 2002-05-22  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cp-lang.c (LANG_HOOKS_POST_OPTIONS): Use c_common_post_options."}, {"sha": "dbdc6f2efc2939ad4327dd64ef1afb72de701ca1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7a1f3f5f3bdf7862391b3404eaaf348364ba57bd", "patch": "@@ -7106,7 +7106,8 @@ check_tag_decl (declspecs)\n \t       || value == ridpointers[(int) RID_VIRTUAL]\n \t       || value == ridpointers[(int) RID_CONST]\n \t       || value == ridpointers[(int) RID_VOLATILE]\n-\t       || value == ridpointers[(int) RID_EXPLICIT])\n+\t       || value == ridpointers[(int) RID_EXPLICIT]\n+\t       || value == ridpointers[(int) RID_THREAD])\n \tob_modifier = value;\n     }\n \n@@ -7580,6 +7581,12 @@ static tree\n obscure_complex_init (decl, init)\n      tree decl, init;\n {\n+  if (DECL_THREAD_LOCAL (decl))\n+    {\n+      error (\"run-time initialization of thread-local storage\");\n+      return NULL_TREE;\n+    }\n+\n   if (! flag_no_inline && TREE_STATIC (decl))\n     {\n       if (extract_init (decl, init))\n@@ -9274,6 +9281,16 @@ grokvardecl (type, declarator, specbits_in, initialized, constp, in_namespace)\n       TREE_PUBLIC (decl) = DECL_EXTERNAL (decl);\n     }\n \n+  if (RIDBIT_SETP (RID_THREAD, specbits))\n+    {\n+      if (targetm.have_tls)\n+\tDECL_THREAD_LOCAL (decl) = 1;\n+      else\n+\t/* A mere warning is sure to result in improper semantics\n+\t   at runtime.  Don't bother to allow this to compile.  */\n+\terror (\"thread-local storage not supported for this target\");\n+    }\n+\n   if (TREE_PUBLIC (decl))\n     {\n       /* [basic.link]: A name with no linkage (notably, the name of a class\n@@ -10176,10 +10193,22 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t    }\n \t\t  else if (RIDBIT_SETP (i, specbits))\n \t\t    pedwarn (\"duplicate `%s'\", IDENTIFIER_POINTER (id));\n+\n+\t\t  /* Diagnose \"__thread extern\".  Recall that this list\n+\t\t     is in the reverse order seen in the text.  */\n+\t\t  if (i == (int)RID_THREAD)\n+\t\t    {\n+\t\t      if (RIDBIT_SETP (RID_EXTERN, specbits))\n+\t\t\terror (\"`__thread' before `extern'\");\n+\t\t      if (RIDBIT_SETP (RID_STATIC, specbits))\n+\t\t\terror (\"`__thread' before `static'\");\n+\t\t    }\n+\n \t\t  if (i == (int)RID_EXTERN\n \t\t      && TREE_PURPOSE (spec) == error_mark_node)\n \t\t    /* This extern was part of a language linkage.  */\n \t\t    extern_langp = 1;\n+\n \t\t  RIDBIT_SET (i, specbits);\n \t\t  goto found;\n \t\t}\n@@ -10476,6 +10505,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n     {\n       if (RIDBIT_SETP (RID_STATIC, specbits)) nclasses++;\n       if (RIDBIT_SETP (RID_EXTERN, specbits) && !extern_langp) nclasses++;\n+      if (RIDBIT_SETP (RID_THREAD, specbits)) nclasses++;\n       if (decl_context == PARM && nclasses > 0)\n \terror (\"storage class specifiers invalid in parameter declarations\");\n       if (RIDBIT_SETP (RID_TYPEDEF, specbits))\n@@ -10507,6 +10537,13 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n   /* Warn about storage classes that are invalid for certain\n      kinds of declarations (parameters, typenames, etc.).  */\n \n+  /* \"static __thread\" and \"extern __thread\" are allowed.  */\n+  if (nclasses == 2\n+      && RIDBIT_SETP (RID_THREAD, specbits)\n+      && (RIDBIT_SETP (RID_EXTERN, specbits)\n+\t  || RIDBIT_SETP (RID_STATIC, specbits)))\n+    nclasses = 1;\n+    \n   if (nclasses > 1)\n     error (\"multiple storage classes in declaration of `%s'\", name);\n   else if (decl_context != NORMAL && nclasses > 0)\n@@ -10562,6 +10599,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t  RIDBIT_RESET (RID_REGISTER, specbits);\n \t  RIDBIT_RESET (RID_AUTO, specbits);\n \t  RIDBIT_RESET (RID_EXTERN, specbits);\n+\t  RIDBIT_RESET (RID_THREAD, specbits);\n \t}\n     }\n   else if (RIDBIT_SETP (RID_EXTERN, specbits) && initialized && !funcdef_flag)\n@@ -10584,6 +10622,14 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n       if (RIDBIT_SETP (RID_AUTO, specbits))\n \terror (\"top-level declaration of `%s' specifies `auto'\", name);\n     }\n+  else if (RIDBIT_SETP (RID_THREAD, specbits)\n+\t   && !RIDBIT_SETP (RID_EXTERN, specbits)\n+\t   && !RIDBIT_SETP (RID_STATIC, specbits))\n+    {\n+      error (\"function-scope `%s' implicitly auto and declared `__thread'\",\n+\t     name);\n+      RIDBIT_RESET (RID_THREAD, specbits);\n+    }\n \n   if (nclasses > 0 && friendp)\n     error (\"storage class specifiers invalid in friend function declarations\");\n@@ -11784,6 +11830,8 @@ friend declaration requires class-key, i.e. `friend %#T'\",\n \t  error (\"storage class `auto' invalid for function `%s'\", name);\n \telse if (RIDBIT_SETP (RID_REGISTER, specbits))\n \t  error (\"storage class `register' invalid for function `%s'\", name);\n+\telse if (RIDBIT_SETP (RID_THREAD, specbits))\n+\t  error (\"storage class `__thread' invalid for function `%s'\", name);\n \n \t/* Function declaration not at top level.\n \t   Storage classes other than `extern' are not allowed"}, {"sha": "a2b0dd3df57c6d9c54d630264bb9113cff95d505", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=7a1f3f5f3bdf7862391b3404eaaf348364ba57bd", "patch": "@@ -362,6 +362,7 @@ static const struct resword reswords[] =\n   { \"__restrict__\",\tRID_RESTRICT,\t0 },\n   { \"__signed\",\t\tRID_SIGNED,\t0 },\n   { \"__signed__\",\tRID_SIGNED,\t0 },\n+  { \"__thread\",\t\tRID_THREAD,\t0 },\n   { \"__typeof\",\t\tRID_TYPEOF,\t0 },\n   { \"__typeof__\",\tRID_TYPEOF,\t0 },\n   { \"__volatile\",\tRID_VOLATILE,\t0 },\n@@ -467,7 +468,7 @@ const short rid_to_yy[RID_MAX] =\n   /* RID_BOUNDED */\t0,\n   /* RID_UNBOUNDED */\t0,\n   /* RID_COMPLEX */\tTYPESPEC,\n-  /* RID_THREAD */\t0,\n+  /* RID_THREAD */\tSCSPEC,\n \n   /* C++ */\n   /* RID_FRIEND */\tSCSPEC,"}, {"sha": "980729516eee22608e3073653100e53c53ea32cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a1f3f5f3bdf7862391b3404eaaf348364ba57bd", "patch": "@@ -1,3 +1,10 @@\n+2002-05-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* g++.dg/dg.exp: Prune the tls subdirectory.\n+\t* g++.dg/tls/tls.exp, g++.dg/tls/trivial.C: New.\n+\t* g++.dg/tls/diag-1.C, g++.dg/tls/diag-2.C: New.\n+\t* g++.dg/tls/init-1.C: New.\n+\n 2002-05-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/20020517-1.c: New test.\n@@ -168,11 +175,11 @@ Mon May 20 10:51:35 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n 2002-05-02  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * gcc.dg/altivec-8.c: New.\n+\t* gcc.dg/altivec-8.c: New.\n \n 2002-05-01  Aldy Hernandez  <aldyh@redhat.com>\n \n-        * gcc.dg/altivec-7.c: New.\n+\t* gcc.dg/altivec-7.c: New.\n \n 2002-04-29  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -319,8 +326,8 @@ Wed Apr 24 21:38:36 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n 2002-04-18  Richard Henderson  <rth@redhat.com>\n \n-        * gcc.dg/20000906-1.c: Enable for all targets.\n-        * gcc.c-torture/compile/iftrap-2.c: New.\n+\t* gcc.dg/20000906-1.c: Enable for all targets.\n+\t* gcc.c-torture/compile/iftrap-2.c: New.\n \n 2002-04-18  Jakub Jelinek  <jakub@redhat.com>\n \n@@ -329,9 +336,9 @@ Wed Apr 24 21:38:36 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n 2002-04-18  Richard Henderson  <rth@redhat.com>\n \n-        * gcc.c-torture/compile/iftrap-1.c: New.\n-        * gcc.dg/iftrap-1.c: Adjust for ia64.\n-        * gcc.dg/iftrap-2.c: New.\n+\t* gcc.c-torture/compile/iftrap-1.c: New.\n+\t* gcc.dg/iftrap-1.c: Adjust for ia64.\n+\t* gcc.dg/iftrap-2.c: New.\n \n 2002-04-18  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "da499bec06f97d8b0b04e9d449295b93c8aca2e0", "filename": "gcc/testsuite/g++.dg/dg.exp", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp?ref=7a1f3f5f3bdf7862391b3404eaaf348364ba57bd", "patch": "@@ -31,10 +31,11 @@ dg-init\n # Gather a list of all tests, with the exception of those in directories\n # that are handled specially.\n set all [lsort [find $srcdir/$subdir *.C]]\n-set tests [prune [prune [prune [prune $all $srcdir/$subdir/special/*] \\\n-                               $srcdir/$subdir/debug/*] \\\n-                        $srcdir/$subdir/gcov/*] \\\n-                 $srcdir/$subdir/bprob/*]\n+set tests [prune $tests $srcdir/$subdir/bprob/*]\n+set tests [prune $tests $srcdir/$subdir/debug/*]\n+set tests [prune $tests $srcdir/$subdir/gcov/*]\n+set tests [prune $tests $srcdir/$subdir/special/*]\n+set tests [prune $tests $srcdir/$subdir/tls/*]\n \n # Main loop.\n dg-runtest $tests \"\" $DEFAULT_CXXFLAGS"}, {"sha": "697d0b13106b5130e03bd0c6a250802d4680ac46", "filename": "gcc/testsuite/g++.dg/tls/diag-1.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-1.C?ref=7a1f3f5f3bdf7862391b3404eaaf348364ba57bd", "patch": "@@ -0,0 +1,30 @@\n+/* Valid __thread specifiers.  */\n+\n+__thread int g1;\n+extern __thread int g2;\n+static __thread int g3;\n+\n+void foo()\n+{\n+  extern __thread int l1;\n+  static __thread int l2;\n+}\n+\n+struct A {\n+  static __thread int i;\n+};\n+\n+__thread int A::i = 42;\n+\n+template <typename T> struct B {\n+  static __thread T t;\n+};\n+\n+template <typename T>\n+__thread T B<T>::t = 42;\n+\n+void bar ()\n+{\n+  int j = B<int>::t;\n+  int k = B<const int>::t;\n+}"}, {"sha": "6365406e2e7cbdcd272b743663ea93db566269c3", "filename": "gcc/testsuite/g++.dg/tls/diag-2.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Fdiag-2.C?ref=7a1f3f5f3bdf7862391b3404eaaf348364ba57bd", "patch": "@@ -0,0 +1,25 @@\n+/* Invalid __thread specifiers.  */\n+\n+__thread extern int g1;\t\t/* { dg-error \"`__thread' before `extern'\" } */\n+__thread static int g2;\t\t/* { dg-error \"`__thread' before `static'\" } */\n+__thread __thread int g3;\t/* { dg-error \"duplicate `__thread'\" } */\n+typedef __thread int g4;\t/* { dg-error \"multiple storage classes\" } */\n+\n+void foo()\n+{\n+  __thread int l1;\t\t/* { dg-error \"implicitly auto and declared `__thread'\" } */\n+  auto __thread int l2;\t\t/* { dg-error \"multiple storage classes\" } */\n+  __thread extern int l3;\t/* { dg-error \"`__thread' before `extern'\" } */\n+  register __thread int l4;\t/* { dg-error \"multiple storage classes\" } */\n+}\n+\n+__thread void f1 ();\t\t/* { dg-error \"invalid for function\" } */\n+extern __thread void f2 ();\t/* { dg-error \"invalid for function\" } */\n+static __thread void f3 ();\t/* { dg-error \"invalid for function\" } */\n+__thread void f4 () { }\t\t/* { dg-error \"invalid for function\" } */\n+\n+void bar(__thread int p1);\t/* { dg-error \"(invalid in parameter)|(specified for parameter)\" } */\n+\n+struct A {\n+  __thread int i;\t\t/* { dg-error \"specified for field\" } */\n+};"}, {"sha": "74f7641fe27469a70050fa57330a31d970e5ad3e", "filename": "gcc/testsuite/g++.dg/tls/init-1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Finit-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Finit-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Finit-1.C?ref=7a1f3f5f3bdf7862391b3404eaaf348364ba57bd", "patch": "@@ -0,0 +1,13 @@\n+/* Valid initializations.  */\n+\n+__thread int i = 42;\n+\n+static int j;\n+__thread int *p = &j;\n+\n+/* Note that this is valid in C++ (unlike C) as a run-time initialization.  */\n+int *q = &i;\n+\n+/* Valid because \"const int k\" is an integral constant expression in C++.  */\n+__thread const int k = 42;\n+__thread const int l = k;"}, {"sha": "49df50147b30a41dc6a29110c4e947f6c35f4aad", "filename": "gcc/testsuite/g++.dg/tls/init-2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Finit-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Finit-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Finit-2.C?ref=7a1f3f5f3bdf7862391b3404eaaf348364ba57bd", "patch": "@@ -0,0 +1,13 @@\n+/* Invalid initializations.  */\n+\n+extern __thread int i;\n+__thread int *p = &i;\t/* { dg-error \"run-time initialization\" } */\n+\n+extern int f();\n+__thread int j = f();\t/* { dg-error \"run-time initialization\" } */\n+\n+struct S\n+{\n+  S();\n+};\n+__thread S s;\t\t/* { dg-error \"run-time initialization\" } */"}, {"sha": "a00dad79dce0cb353446dac690a5a3a4c35462ef", "filename": "gcc/testsuite/g++.dg/tls/tls.exp", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Ftls.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Ftls.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Ftls.exp?ref=7a1f3f5f3bdf7862391b3404eaaf348364ba57bd", "patch": "@@ -0,0 +1,44 @@\n+#   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+\n+# Test for thread-local data supported by the platform.  If it\n+# isn't, everything will fail with the \"not supported\" message.\n+\n+set comp_output [g++_target_compile \\\n+\t\t\"$srcdir/$subdir/trivial.C\" \"trivial.S\" assembly \"\"]\n+if { [string match \"*not supported*\" $comp_output] } {\n+  return 0\n+}\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CXXFLAGS\n+if ![info exists DEFAULT_CXXFLAGS] then {\n+    set DEFAULT_CXXFLAGS \" -ansi -pedantic-errors -Wno-long-long\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] \"\" $DEFAULT_CXXFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "1fd70631f33b78379c81232b8e5e8f8ab1094618", "filename": "gcc/testsuite/g++.dg/tls/trivial.C", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Ftrivial.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a1f3f5f3bdf7862391b3404eaaf348364ba57bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Ftrivial.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftls%2Ftrivial.C?ref=7a1f3f5f3bdf7862391b3404eaaf348364ba57bd", "patch": "@@ -0,0 +1 @@\n+__thread int i;"}]}