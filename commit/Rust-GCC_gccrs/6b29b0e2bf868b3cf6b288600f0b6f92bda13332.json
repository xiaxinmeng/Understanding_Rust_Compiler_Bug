{"sha": "6b29b0e2bf868b3cf6b288600f0b6f92bda13332", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIyOWIwZTJiZjg2OGIzY2Y2YjI4ODYwMGYwYjZmOTJiZGExMzMzMg==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "2000-05-07T05:09:46Z"}, "committer": {"name": "John Wehle", "email": "wehle@gcc.gnu.org", "date": "2000-05-07T05:09:46Z"}, "message": "rtl.def (COND_EXEC): Clarify.\n\n\t* rtl.def (COND_EXEC): Clarify.\n\n\t* i386.md (extendsidi2): Clobber (reg:CC 17) in the\n\tsame fashion as zero_extendsidi2.\n\nFrom-SVN: r33756", "tree": {"sha": "92cb808f6fe724bbe563badfbecd81817f022cd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92cb808f6fe724bbe563badfbecd81817f022cd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b29b0e2bf868b3cf6b288600f0b6f92bda13332", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b29b0e2bf868b3cf6b288600f0b6f92bda13332", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b29b0e2bf868b3cf6b288600f0b6f92bda13332", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b29b0e2bf868b3cf6b288600f0b6f92bda13332/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee455968538b78fbe8fcfd1e177bb09b72d296f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee455968538b78fbe8fcfd1e177bb09b72d296f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee455968538b78fbe8fcfd1e177bb09b72d296f3"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "8ccc1bf4ea3177102fb55b079aca774de63bbb8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b29b0e2bf868b3cf6b288600f0b6f92bda13332/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b29b0e2bf868b3cf6b288600f0b6f92bda13332/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b29b0e2bf868b3cf6b288600f0b6f92bda13332", "patch": "@@ -1,3 +1,10 @@\n+Sun May  7 00:54:57 EDT 2000  John Wehle  (john@feith.com)\n+\n+\t* rtl.def (COND_EXEC): Clarify.\n+\n+\t* i386.md (extendsidi2): Clobber (reg:CC 17) in the\n+\tsame fashion as zero_extendsidi2.\n+\n 2000-05-06  Richard Henderson  <rth@cygnus.com>\n \n \t* config/ia64/ia64.c (predicate_operator): New."}, {"sha": "5696c2645a76daeb54dfee271e2b317f78e3d4fa", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b29b0e2bf868b3cf6b288600f0b6f92bda13332/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b29b0e2bf868b3cf6b288600f0b6f92bda13332/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=6b29b0e2bf868b3cf6b288600f0b6f92bda13332", "patch": "@@ -2642,17 +2642,17 @@\n (define_insn \"extendsidi2\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=*A,r,?r,?*o\")\n \t(sign_extend:DI (match_operand:SI 1 \"register_operand\" \"0,0,r,r\")))\n-   (clobber (match_scratch:SI 2 \"=X,X,X,&r\"))\n-   (clobber (reg:CC 17))]\n+   (clobber (reg:CC 17))\n+   (clobber (match_scratch:SI 2 \"=X,X,X,&r\"))]\n   \"\"\n   \"#\")\n \n ;; Extend to memory case when source register does die.\n (define_split \n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n \t(sign_extend:DI (match_operand:SI 1 \"register_operand\" \"\")))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"\"))\n-   (clobber (reg:CC 17))]\n+   (clobber (reg:CC 17))\n+   (clobber (match_operand:SI 2 \"register_operand\" \"\"))]\n   \"(reload_completed\n     && dead_or_set_p (insn, operands[1])\n     && !reg_mentioned_p (operands[1], operands[0]))\"\n@@ -2666,8 +2666,8 @@\n (define_split \n   [(set (match_operand:DI 0 \"memory_operand\" \"\")\n \t(sign_extend:DI (match_operand:SI 1 \"register_operand\" \"\")))\n-   (clobber (match_operand:SI 2 \"register_operand\" \"\"))\n-   (clobber (reg:CC 17))]\n+   (clobber (reg:CC 17))\n+   (clobber (match_operand:SI 2 \"register_operand\" \"\"))]\n   \"reload_completed\"\n   [(const_int 0)]\n   \"\n@@ -2697,8 +2697,8 @@\n (define_split \n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n \t(sign_extend:DI (match_operand:SI 1 \"register_operand\" \"\")))\n-   (clobber (match_scratch:SI 2 \"\"))\n-   (clobber (reg:CC 17))]\n+   (clobber (reg:CC 17))\n+   (clobber (match_scratch:SI 2 \"\"))]\n   \"reload_completed\"\n   [(const_int 0)]\n   \""}, {"sha": "cbfd892bc67f7fb67c2751a087c75b1d66adda26", "filename": "gcc/rtl.def", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b29b0e2bf868b3cf6b288600f0b6f92bda13332/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b29b0e2bf868b3cf6b288600f0b6f92bda13332/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=6b29b0e2bf868b3cf6b288600f0b6f92bda13332", "patch": "@@ -434,7 +434,16 @@ DEF_RTL_EXPR(NOTE, \"note\", \"iuu0n\", 'x')\n    Top level constituents of INSN, JUMP_INSN and CALL_INSN.\n    ---------------------------------------------------------------------- */\n    \n-/* Several operations to be done in parallel.  */\n+/* Conditionally execute code.\n+   Operand 0 is the condition that if true, the code is executed.\n+   Operand 1 is the code to be executed (typically a SET). \n+\n+   Semantics are that there are no side effects if the condition\n+   is false.  This pattern is created automatically by the if_convert\n+   pass run after reload or by target-specific splitters.  */\n+DEF_RTL_EXPR(COND_EXEC, \"cond_exec\", \"ee\", 'x')\n+\n+/* Several operations to be done in parallel (perhaps under COND_EXEC).  */\n DEF_RTL_EXPR(PARALLEL, \"parallel\", \"E\", 'x')\n \n /* A string that is passed through to the assembler as input.\n@@ -936,13 +945,6 @@ DEF_RTL_EXPR(CALL_PLACEHOLDER, \"call_placeholder\", \"uuuu\", 'x')\n    of canonical RTL.  It is, however, easier to manipulate this way.  */\n DEF_RTL_EXPR(PHI, \"phi\", \"E\", 'x')\n \n-/* Conditionally execute code.\n-   Operand 0 is the condition that if true, the code is executed.\n-   Operand 1 is the code to be executed (typically a SET). \n-\n-   Semantics are that there are no side effects if the condition\n-   is false.  */\n-DEF_RTL_EXPR(COND_EXEC, \"cond_exec\", \"ee\", 'x')\n \n /*\n Local variables:"}]}