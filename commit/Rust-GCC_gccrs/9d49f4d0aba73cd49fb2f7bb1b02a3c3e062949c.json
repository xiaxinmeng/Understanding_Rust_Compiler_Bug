{"sha": "9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ0OWY0ZDBhYmE3M2NkNDlmYjJmN2JiMWIwMmEzYzNlMDYyOTQ5Yw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-22T04:47:32Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-22T04:47:32Z"}, "message": "Update Go library to release r60.1.\n\nFrom-SVN: r179076", "tree": {"sha": "d2bb9404c8c972b65a3a92e2f30721def7c92dc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2bb9404c8c972b65a3a92e2f30721def7c92dc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/comments", "author": null, "committer": null, "parents": [{"sha": "270aae3307efa26c11b8b219c4400e819b24247f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/270aae3307efa26c11b8b219c4400e819b24247f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/270aae3307efa26c11b8b219c4400e819b24247f"}], "stats": {"total": 776, "additions": 749, "deletions": 27}, "files": [{"sha": "41cab710019edc76f8bdee0938de0cb6e8ef685a", "filename": "libgo/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMERGE?ref=9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c", "patch": "@@ -1,4 +1,4 @@\n-504f4e9b079c\n+fd30c132d1bd\n \n The first line of this file holds the Mercurial revision number of the\n last merge done from the master library sources."}, {"sha": "b49a61e7b40494200b033c79be12d22eefca86a1", "filename": "libgo/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c", "patch": "@@ -636,7 +636,8 @@ go_json_files = \\\n \tgo/json/encode.go \\\n \tgo/json/indent.go \\\n \tgo/json/scanner.go \\\n-\tgo/json/stream.go\n+\tgo/json/stream.go \\\n+\tgo/json/tags.go\n \n go_log_files = \\\n \tgo/log/log.go"}, {"sha": "9d61859f812c3d0b8146af05dc3c0e01ed0599f8", "filename": "libgo/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c", "patch": "@@ -1037,7 +1037,8 @@ go_json_files = \\\n \tgo/json/encode.go \\\n \tgo/json/indent.go \\\n \tgo/json/scanner.go \\\n-\tgo/json/stream.go\n+\tgo/json/stream.go \\\n+\tgo/json/tags.go\n \n go_log_files = \\\n \tgo/log/log.go"}, {"sha": "84a1abe27013251a6826f8ca0524486bc9453601", "filename": "libgo/go/go/types/testdata/test0.src", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Ftest0.src", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Ftest0.src", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Ftypes%2Ftestdata%2Ftest0.src?ref=9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c", "patch": "@@ -0,0 +1,154 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// type declarations\n+\n+package test0\n+\n+import \"unsafe\"\n+\n+const pi = 3.1415\n+\n+type (\n+\tN undeclared /* ERROR \"undeclared\" */\n+\tB bool\n+\tI int32\n+\tA [10]P\n+\tT struct {\n+\t\tx, y P\n+\t}\n+\tP *T\n+\tR (*R)\n+\tF func(A) I\n+\tY interface {\n+\t\tf(A) I\n+\t}\n+\tS [](((P)))\n+\tM map[I]F\n+\tC chan<- I\n+)\n+\n+\n+type (\n+\tp1 pi /* ERROR \"not a package\" */ .foo\n+\tp2 unsafe.Pointer\n+)\n+\n+\n+type (\n+\tPi pi /* ERROR \"not a type\" */\n+\n+\ta /* DISABLED \"illegal cycle\" */ a\n+\ta /* ERROR \"redeclared\" */ int\n+\n+\t// where the cycle error appears depends on the\n+\t// order in which declarations are processed\n+\t// (which depends on the order in which a map\n+\t// is iterated through)\n+\tb c\n+\tc /* DISABLED \"illegal cycle\" */ d\n+\td e\n+\te b\n+\n+\tt *t\n+\n+\tU V\n+\tV *W\n+\tW U\n+\n+\tP1 *S2\n+\tP2 P1\n+\n+\tS0 struct {\n+\t}\n+\tS1 struct {\n+\t\ta, b, c int\n+\t\tu, v, a /* ERROR \"redeclared\" */ float32\n+\t}\n+\tS2 struct {\n+\t\tU // anonymous field\n+\t\t// TODO(gri) recognize double-declaration below\n+\t\t// U /* ERROR \"redeclared\" */ int\n+\t}\n+\tS3 struct {\n+\t\tx S2\n+\t}\n+\tS4/* DISABLED \"illegal cycle\" */ struct {\n+\t\tS4\n+\t}\n+\tS5 struct {\n+\t\tS6\n+\t}\n+\tS6 /* DISABLED \"illegal cycle\" */ struct {\n+\t\tfield S7\n+\t}\n+\tS7 struct {\n+\t\tS5\n+\t}\n+\n+\tL1 []L1\n+\tL2 []int\n+\n+\tA1 [10]int\n+\tA2 /* DISABLED \"illegal cycle\" */ [10]A2\n+\tA3 /* DISABLED \"illegal cycle\" */ [10]struct {\n+\t\tx A4\n+\t}\n+\tA4 [10]A3\n+\n+\tF1 func()\n+\tF2 func(x, y, z float32)\n+\tF3 func(x, y, x /* ERROR \"redeclared\" */ float32)\n+\tF4 func() (x, y, x /* ERROR \"redeclared\" */ float32)\n+\tF5 func(x int) (x /* ERROR \"redeclared\" */ float32)\n+\tF6 func(x ...int)\n+\n+\tI1 interface{}\n+\tI2 interface {\n+\t\tm1()\n+\t}\n+\tI3 interface {\n+\t\tm1()\n+\t\tm1 /* ERROR \"redeclared\" */ ()\n+\t}\n+\tI4 interface {\n+\t\tm1(x, y, x /* ERROR \"redeclared\" */ float32)\n+\t\tm2() (x, y, x /* ERROR \"redeclared\" */ float32)\n+\t\tm3(x int) (x /* ERROR \"redeclared\" */ float32)\n+\t}\n+\tI5 interface {\n+\t\tm1(I5)\n+\t}\n+\tI6 interface {\n+\t\tS0 /* ERROR \"non-interface\" */\n+\t}\n+\tI7 interface {\n+\t\tI1\n+\t\tI1\n+\t}\n+\tI8 /* DISABLED \"illegal cycle\" */ interface {\n+\t\tI8\n+\t}\n+\tI9 /* DISABLED \"illegal cycle\" */ interface {\n+\t\tI10\n+\t}\n+\tI10 interface {\n+\t\tI11\n+\t}\n+\tI11 interface {\n+\t\tI9\n+\t}\n+\n+\tC1 chan int\n+\tC2 <-chan int\n+\tC3 chan<- C3\n+\tC4 chan C5\n+\tC5 chan C6\n+\tC6 chan C4\n+\n+\tM1 map[Last]string\n+\tM2 map[string]M2\n+\n+\tLast int\n+)"}, {"sha": "a9284ced7f97743795b61760ee79e32bc4444652", "filename": "libgo/go/gob/doc.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fgob%2Fdoc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fgob%2Fdoc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgob%2Fdoc.go?ref=9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c", "patch": "@@ -221,6 +221,9 @@ In summary, a gob stream looks like\n \n where * signifies zero or more repetitions and the type id of a value must\n be predefined or be defined before the value in the stream.\n+\n+See \"Gobs of data\" for a design discussion of the gob wire format:\n+http://blog.golang.org/2011/03/gobs-of-data.html\n */\n package gob\n "}, {"sha": "ff46631383be3c4b674e925455f9480f4005cabf", "filename": "libgo/go/http/cgi/host_test.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fhttp%2Fcgi%2Fhost_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fhttp%2Fcgi%2Fhost_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhttp%2Fcgi%2Fhost_test.go?ref=9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c", "patch": "@@ -374,6 +374,8 @@ func TestCopyError(t *testing.T) {\n \t}\n }\n \n+/* This test doesn't work in gccgo's testing environment.\n+\n func TestDirUnix(t *testing.T) {\n \tif skipTest(t) || runtime.GOOS == \"windows\" {\n \t\treturn\n@@ -402,6 +404,8 @@ func TestDirUnix(t *testing.T) {\n \trunCgiTest(t, h, \"GET /test.cgi HTTP/1.0\\nHost: example.com\\n\\n\", expectedMap)\n }\n \n+*/\n+\n func TestDirWindows(t *testing.T) {\n \tif skipTest(t) || runtime.GOOS != \"windows\" {\n \t\treturn"}, {"sha": "b46b1330f38c309e8dc92823756da6b19c65dc2b", "filename": "libgo/go/http/cgi/testdata/test.cgi", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fhttp%2Fcgi%2Ftestdata%2Ftest.cgi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fhttp%2Fcgi%2Ftestdata%2Ftest.cgi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhttp%2Fcgi%2Ftestdata%2Ftest.cgi?ref=9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c", "patch": "@@ -0,0 +1,96 @@\n+#!/usr/bin/perl\n+# Copyright 2011 The Go Authors. All rights reserved.\n+# Use of this source code is governed by a BSD-style\n+# license that can be found in the LICENSE file.\n+#\n+# Test script run as a child process under cgi_test.go\n+\n+use strict;\n+use Cwd;\n+\n+my $q = MiniCGI->new;\n+my $params = $q->Vars;\n+\n+if ($params->{\"loc\"}) {\n+    print \"Location: $params->{loc}\\r\\n\\r\\n\";\n+    exit(0);\n+}\n+\n+my $NL = \"\\r\\n\";\n+$NL = \"\\n\" if $params->{mode} eq \"NL\";\n+\n+my $p = sub {\n+  print \"$_[0]$NL\";\n+};\n+\n+# With carriage returns\n+$p->(\"Content-Type: text/html\");\n+$p->(\"X-CGI-Pid: $$\");\n+$p->(\"X-Test-Header: X-Test-Value\");\n+$p->(\"\");\n+\n+if ($params->{\"bigresponse\"}) {\n+    for (1..1024) {\n+        print \"A\" x 1024, \"\\n\";\n+    }\n+    exit 0;\n+}\n+\n+print \"test=Hello CGI\\n\";\n+\n+foreach my $k (sort keys %$params) {\n+  print \"param-$k=$params->{$k}\\n\";\n+}\n+\n+foreach my $k (sort keys %ENV) {\n+  my $clean_env = $ENV{$k};\n+  $clean_env =~ s/[\\n\\r]//g;\n+  print \"env-$k=$clean_env\\n\";\n+}\n+\n+# NOTE: don't call getcwd() for windows.\n+# msys return /c/go/src/... not C:\\go\\...\n+my $dir;\n+if ($^O eq 'MSWin32' || $^O eq 'msys') {\n+  my $cmd = $ENV{'COMSPEC'} || 'c:\\\\windows\\\\system32\\\\cmd.exe';\n+  $cmd =~ s!\\\\!/!g;\n+  $dir = `$cmd /c cd`;\n+  chomp $dir;\n+} else {\n+  $dir = getcwd();\n+}\n+print \"cwd=$dir\\n\";\n+\n+\n+# A minimal version of CGI.pm, for people without the perl-modules\n+# package installed.  (CGI.pm used to be part of the Perl core, but\n+# some distros now bundle perl-base and perl-modules separately...)\n+package MiniCGI;\n+\n+sub new {\n+    my $class = shift;\n+    return bless {}, $class;\n+}\n+\n+sub Vars {\n+    my $self = shift;\n+    my $pairs;\n+    if ($ENV{CONTENT_LENGTH}) {\n+        $pairs = do { local $/; <STDIN> };\n+    } else {\n+        $pairs = $ENV{QUERY_STRING};\n+    }\n+    my $vars = {};\n+    foreach my $kv (split(/&/, $pairs)) {\n+        my ($k, $v) = split(/=/, $kv, 2);\n+        $vars->{_urldecode($k)} = _urldecode($v);\n+    }\n+    return $vars;\n+}\n+\n+sub _urldecode {\n+    my $v = shift;\n+    $v =~ tr/+/ /;\n+    $v =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack(\"C\", hex($1))/eg;\n+    return $v;\n+}"}, {"sha": "b0fc0c1be747a12f18a9ab6cc8e195f91a20362e", "filename": "libgo/go/image/png/testdata/pngsuite/basn3p08-trns.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fbasn3p08-trns.png", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fbasn3p08-trns.png", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fbasn3p08-trns.png?ref=9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c"}, {"sha": "78dc367bba3b1935b87f85537da53e798e00a7e8", "filename": "libgo/go/image/png/testdata/pngsuite/basn3p08-trns.sng", "status": "added", "additions": 301, "deletions": 0, "changes": 301, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fbasn3p08-trns.sng", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fbasn3p08-trns.sng", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fimage%2Fpng%2Ftestdata%2Fpngsuite%2Fbasn3p08-trns.sng?ref=9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c", "patch": "@@ -0,0 +1,301 @@\n+#SNG: from basn3p08-trns.png\n+IHDR {\n+    width: 32; height: 32; bitdepth: 8;\n+    using color palette;\n+}\n+gAMA {1.0000}\n+PLTE {\n+    (255,  3,  7)     # rgb = (0xff,0x03,0x07)\n+    (255,  4,  7)     # rgb = (0xff,0x04,0x07)\n+    (255,  9,  7)     # rgb = (0xff,0x09,0x07)\n+    (217, 14,  7)     # rgb = (0xd9,0x0e,0x07)\n+    (255, 14,  7)     # rgb = (0xff,0x0e,0x07)\n+    (  2, 22, 19)     # rgb = (0x02,0x16,0x13)\n+    (255, 26,  7)     # rgb = (0xff,0x1a,0x07)\n+    (255, 31,  7)     # rgb = (0xff,0x1f,0x07)\n+    ( 10, 37, 14)     # rgb = (0x0a,0x25,0x0e)\n+    (179, 37,  6)     # rgb = (0xb3,0x25,0x06)\n+    (254, 42,  7)     # rgb = (0xfe,0x2a,0x07)\n+    (255, 45,  7)     # rgb = (0xff,0x2d,0x07)\n+    ( 25, 46,  9)     # rgb = (0x19,0x2e,0x09)\n+    (  0, 48,254)     # rgb = (0x00,0x30,0xfe)\n+    (  0, 48,255)     # rgb = (0x00,0x30,0xff)\n+    (  0, 49,255)     # rgb = (0x00,0x31,0xff)\n+    (  0, 51,254)     # rgb = (0x00,0x33,0xfe)\n+    (  0, 52,255)     # rgb = (0x00,0x34,0xff)\n+    (255, 53,  7)     # rgb = (0xff,0x35,0x07)\n+    (  0, 54,252)     # rgb = (0x00,0x36,0xfc)\n+    (254, 57,  7)     # rgb = (0xfe,0x39,0x07)\n+    (251, 57,  7)     # rgb = (0xfb,0x39,0x07)\n+    (247, 59,  7)     # rgb = (0xf7,0x3b,0x07)\n+    (  0, 59, 61)     # rgb = (0x00,0x3b,0x3d)\n+    (  0, 62,255)     # rgb = (0x00,0x3e,0xff)\n+    (142, 63,  5)     # rgb = (0x8e,0x3f,0x05)\n+    (  0, 63,250)     # rgb = (0x00,0x3f,0xfa)\n+    (255, 63,  7)     # rgb = (0xff,0x3f,0x07)\n+    (253, 68,  7)     # rgb = (0xfd,0x44,0x07)\n+    (  0, 73,255)     # rgb = (0x00,0x49,0xff)\n+    (  0, 73,246)     # rgb = (0x00,0x49,0xf6)\n+    (255, 75,  7)     # rgb = (0xff,0x4b,0x07)\n+    ( 82, 85,  9)     # rgb = (0x52,0x55,0x09)\n+    (255, 85,  7)     # rgb = (0xff,0x55,0x07)\n+    (  0, 89,255)     # rgb = (0x00,0x59,0xff)\n+    (  0, 91,237)     # rgb = (0x00,0x5b,0xed)\n+    (255, 94,  7)     # rgb = (0xff,0x5e,0x07)\n+    (241,100,  7)     # rgb = (0xf1,0x64,0x07)\n+    (  0,101,255)     # rgb = (0x00,0x65,0xff)\n+    (253,105,  7)     # rgb = (0xfd,0x69,0x07)\n+    (  0,107,223)     # rgb = (0x00,0x6b,0xdf)\n+    (255,106,  7)     # rgb = (0xff,0x6a,0x07)\n+    (  1,110, 95)     # rgb = (0x01,0x6e,0x5f)\n+    (255,115,  7)     # rgb = (0xff,0x73,0x07)\n+    (  0,117,255)     # rgb = (0x00,0x75,0xff)\n+    (255,124,  7)     # rgb = (0xff,0x7c,0x07)\n+    (118,126, 10)     # rgb = (0x76,0x7e,0x0a)\n+    (  0,130,250)     # rgb = (0x00,0x82,0xfa)\n+    (  0,132,255)     # rgb = (0x00,0x84,0xff)\n+    (  0,134,207)     # rgb = (0x00,0x86,0xcf)\n+    (255,134,  7)     # rgb = (0xff,0x86,0x07)\n+    (  0,136,249)     # rgb = (0x00,0x88,0xf9)\n+    (219,140,  6)     # rgb = (0xdb,0x8c,0x06)\n+    (  0,140,252)     # rgb = (0x00,0x8c,0xfc)\n+    (  0,140,255)     # rgb = (0x00,0x8c,0xff)\n+    (  1,142,136)     # rgb = (0x01,0x8e,0x88)\n+    (255,143,  7)     # rgb = (0xff,0x8f,0x07)\n+    (243,150,  7)     # rgb = (0xf3,0x96,0x07)\n+    (198,152,  7)     # rgb = (0xc6,0x98,0x07)\n+    (165,153,  7)     # rgb = (0xa5,0x99,0x07)\n+    (  0,157,255)     # rgb = (0x00,0x9d,0xff)\n+    (255,158,  7)     # rgb = (0xff,0x9e,0x07)\n+    ( 70,159,  4)     # rgb = (0x46,0x9f,0x04)\n+    (  0,160,251)     # rgb = (0x00,0xa0,0xfb)\n+    (203,163,  6)     # rgb = (0xcb,0xa3,0x06)\n+    (  0,163,239)     # rgb = (0x00,0xa3,0xef)\n+    (  1,164,178)     # rgb = (0x01,0xa4,0xb2)\n+    (255,166,  7)     # rgb = (0xff,0xa6,0x07)\n+    (  1,169,165)     # rgb = (0x01,0xa9,0xa5)\n+    (  1,170,255)     # rgb = (0x01,0xaa,0xff)\n+    (232,172,  6)     # rgb = (0xe8,0xac,0x06)\n+    (255,175,  7)     # rgb = (0xff,0xaf,0x07)\n+    (185,176,131)     # rgb = (0xb9,0xb0,0x83)\n+    (  1,179,225)     # rgb = (0x01,0xb3,0xe1)\n+    (188,179,118)     # rgb = (0xbc,0xb3,0x76)\n+    (199,180,  6)     # rgb = (0xc7,0xb4,0x06)\n+    (  1,182,255)     # rgb = (0x01,0xb6,0xff)\n+    (  1,184,249)     # rgb = (0x01,0xb8,0xf9)\n+    (255,184,  7)     # rgb = (0xff,0xb8,0x07)\n+    (207,186, 71)     # rgb = (0xcf,0xba,0x47)\n+    (193,187,  6)     # rgb = (0xc1,0xbb,0x06)\n+    (253,191,  7)     # rgb = (0xfd,0xbf,0x07)\n+    (218,193, 48)     # rgb = (0xda,0xc1,0x30)\n+    (  1,193,157)     # rgb = (0x01,0xc1,0x9d)\n+    (  1,196,244)     # rgb = (0x01,0xc4,0xf4)\n+    (  1,196,254)     # rgb = (0x01,0xc4,0xfe)\n+    ( 48,199,  3)     # rgb = (0x30,0xc7,0x03)\n+    (164,199,  5)     # rgb = (0xa4,0xc7,0x05)\n+    (220,202,  6)     # rgb = (0xdc,0xca,0x06)\n+    (253,203,  7)     # rgb = (0xfd,0xcb,0x07)\n+    (  1,204,204)     # rgb = (0x01,0xcc,0xcc)\n+    (251,209,  7)     # rgb = (0xfb,0xd1,0x07)\n+    (231,208, 24)     # rgb = (0xe7,0xd0,0x18)\n+    (  1,210,254)     # rgb = (0x01,0xd2,0xfe)\n+    (  2,211,146)     # rgb = (0x02,0xd3,0x92)\n+    (  1,212,156)     # rgb = (0x01,0xd4,0x9c)\n+    (  1,213,252)     # rgb = (0x01,0xd5,0xfc)\n+    (237,219, 15)     # rgb = (0xed,0xdb,0x0f)\n+    (  1,218,240)     # rgb = (0x01,0xda,0xf0)\n+    (165,220,  5)     # rgb = (0xa5,0xdc,0x05)\n+    (  1,221,250)     # rgb = (0x01,0xdd,0xfa)\n+    (249,221,  6)     # rgb = (0xf9,0xdd,0x06)\n+    (146,222,  4)     # rgb = (0x92,0xde,0x04)\n+    (  1,224,184)     # rgb = (0x01,0xe0,0xb8)\n+    (  2,224,155)     # rgb = (0x02,0xe0,0x9b)\n+    (244,225, 10)     # rgb = (0xf4,0xe1,0x0a)\n+    (249,227,  7)     # rgb = (0xf9,0xe3,0x07)\n+    (  2,229,133)     # rgb = (0x02,0xe5,0x85)\n+    (192,228,  6)     # rgb = (0xc0,0xe4,0x06)\n+    ( 37,230,  3)     # rgb = (0x25,0xe6,0x03)\n+    (246,230,  7)     # rgb = (0xf6,0xe6,0x07)\n+    (143,232,  4)     # rgb = (0x8f,0xe8,0x04)\n+    (244,233,  8)     # rgb = (0xf4,0xe9,0x08)\n+    (  2,236,139)     # rgb = (0x02,0xec,0x8b)\n+    (  1,236,227)     # rgb = (0x01,0xec,0xe3)\n+    (  1,238,238)     # rgb = (0x01,0xee,0xee)\n+    (101,241,  4)     # rgb = (0x65,0xf1,0x04)\n+    (  1,241,218)     # rgb = (0x01,0xf1,0xda)\n+    (  1,240,232)     # rgb = (0x01,0xf0,0xe8)\n+    (167,240,  5)     # rgb = (0xa7,0xf0,0x05)\n+    ( 27,243,  2)     # rgb = (0x1b,0xf3,0x02)\n+    (126,243,  4)     # rgb = (0x7e,0xf3,0x04)\n+    (  2,246,113)     # rgb = (0x02,0xf6,0x71)\n+    (133,248,  5)     # rgb = (0x85,0xf8,0x05)\n+    ( 22,250,  1)     # rgb = (0x16,0xfa,0x01)\n+    (  2,249,219)     # rgb = (0x02,0xf9,0xdb)\n+    (148,250,  5)     # rgb = (0x94,0xfa,0x05)\n+    (  2,250,199)     # rgb = (0x02,0xfa,0xc7)\n+    (183,252,  5)     # rgb = (0xb7,0xfc,0x05)\n+    (176,252,  5)     # rgb = (0xb0,0xfc,0x05)\n+    (  2,252,211)     # rgb = (0x02,0xfc,0xd3)\n+    (  2,252,190)     # rgb = (0x02,0xfc,0xbe)\n+    (164,251,  5)     # rgb = (0xa4,0xfb,0x05)\n+    ( 12,254,128)     # rgb = (0x0c,0xfe,0x80)\n+    (192,253,  5)     # rgb = (0xc0,0xfd,0x05)\n+    (164,253,  5)     # rgb = (0xa4,0xfd,0x05)\n+    ( 26,254, 85)     # rgb = (0x1a,0xfe,0x55)\n+    ( 14,254,  1)     # rgb = (0x0e,0xfe,0x01)\n+    (133,253,  5)     # rgb = (0x85,0xfd,0x05)\n+    (  4,253,180)     # rgb = (0x04,0xfd,0xb4)\n+    (196,253,  5)     # rgb = (0xc4,0xfd,0x05)\n+    (  2,253,198)     # rgb = (0x02,0xfd,0xc6)\n+    (  3,255, 91)     # rgb = (0x03,0xff,0x5b)\n+    (  3,255, 80)     # rgb = (0x03,0xff,0x50)\n+    (186,255,  5)     # rgb = (0xba,0xff,0x05)\n+    (  9,255,  2)     # rgb = (0x09,0xff,0x02)\n+    (  3,255,118)     # rgb = (0x03,0xff,0x76)\n+    (  9,255,  3)     # rgb = (0x09,0xff,0x03)\n+    ( 10,255,  1)     # rgb = (0x0a,0xff,0x01)\n+    (  3,255, 76)     # rgb = (0x03,0xff,0x4c)\n+    (  3,255, 86)     # rgb = (0x03,0xff,0x56)\n+    (  3,255, 82)     # rgb = (0x03,0xff,0x52)\n+    ( 13,255,  1)     # rgb = (0x0d,0xff,0x01)\n+    (  3,255, 49)     # rgb = (0x03,0xff,0x31)\n+    (  3,255,101)     # rgb = (0x03,0xff,0x65)\n+    ( 61,255, 32)     # rgb = (0x3d,0xff,0x20)\n+    (129,255,  5)     # rgb = (0x81,0xff,0x05)\n+    (177,255,  5)     # rgb = (0xb1,0xff,0x05)\n+    (  3,255, 37)     # rgb = (0x03,0xff,0x25)\n+    (149,255,  5)     # rgb = (0x95,0xff,0x05)\n+    (  7,255,  6)     # rgb = (0x07,0xff,0x06)\n+    (192,255,  5)     # rgb = (0xc0,0xff,0x05)\n+    (  2,255,131)     # rgb = (0x02,0xff,0x83)\n+    (  3,255, 98)     # rgb = (0x03,0xff,0x62)\n+    ( 85,255, 11)     # rgb = (0x55,0xff,0x0b)\n+    (  2,255,163)     # rgb = (0x02,0xff,0xa3)\n+    (  2,255,149)     # rgb = (0x02,0xff,0x95)\n+    (  4,255, 23)     # rgb = (0x04,0xff,0x17)\n+    (  6,255, 12)     # rgb = (0x06,0xff,0x0c)\n+    (  3,255, 67)     # rgb = (0x03,0xff,0x43)\n+    (160,255,  5)     # rgb = (0xa0,0xff,0x05)\n+    (119,255,  6)     # rgb = (0x77,0xff,0x06)\n+    (102,255,  8)     # rgb = (0x66,0xff,0x08)\n+    (255,255,255)     # rgb = (0xff,0xff,0xff)\n+    (254,254,254)     # rgb = (0xfe,0xfe,0xfe)\n+    (254,254,254)     # rgb = (0xfe,0xfe,0xfe)\n+    (252,252,252)     # rgb = (0xfc,0xfc,0xfc)\n+    (252,252,252)     # rgb = (0xfc,0xfc,0xfc)\n+    (250,250,250)     # rgb = (0xfa,0xfa,0xfa)\n+    (250,250,250)     # rgb = (0xfa,0xfa,0xfa)\n+    (248,248,248)     # rgb = (0xf8,0xf8,0xf8)\n+    (248,248,248)     # rgb = (0xf8,0xf8,0xf8)\n+    (247,247,247)     # rgb = (0xf7,0xf7,0xf7)\n+    (245,245,245)     # rgb = (0xf5,0xf5,0xf5)\n+    (245,245,245)     # rgb = (0xf5,0xf5,0xf5)\n+    (243,243,243)     # rgb = (0xf3,0xf3,0xf3)\n+    (243,243,243)     # rgb = (0xf3,0xf3,0xf3)\n+    (241,241,241)     # rgb = (0xf1,0xf1,0xf1)\n+    (241,241,241)     # rgb = (0xf1,0xf1,0xf1)\n+    (239,239,239)     # rgb = (0xef,0xef,0xef)\n+    (238,238,238)     # rgb = (0xee,0xee,0xee)\n+    (238,238,238)     # rgb = (0xee,0xee,0xee)\n+    (236,236,236)     # rgb = (0xec,0xec,0xec)\n+    (236,236,236)     # rgb = (0xec,0xec,0xec)\n+    (234,234,234)     # rgb = (0xea,0xea,0xea)\n+    (234,234,234)     # rgb = (0xea,0xea,0xea)\n+    (232,232,232)     # rgb = (0xe8,0xe8,0xe8)\n+    (231,231,231)     # rgb = (0xe7,0xe7,0xe7)\n+    (231,231,231)     # rgb = (0xe7,0xe7,0xe7)\n+    (229,229,229)     # rgb = (0xe5,0xe5,0xe5)\n+    (229,229,229)     # rgb = (0xe5,0xe5,0xe5)\n+    (227,227,227)     # rgb = (0xe3,0xe3,0xe3)\n+    (226,226,226)     # rgb = (0xe2,0xe2,0xe2)\n+    (226,226,226)     # rgb = (0xe2,0xe2,0xe2)\n+    (224,224,224)     # rgb = (0xe0,0xe0,0xe0)\n+    (224,224,224)     # rgb = (0xe0,0xe0,0xe0)\n+    (222,222,222)     # rgb = (0xde,0xde,0xde)\n+    (222,222,222)     # rgb = (0xde,0xde,0xde)\n+    (220,220,220)     # rgb = (0xdc,0xdc,0xdc)\n+    (219,219,219)     # rgb = (0xdb,0xdb,0xdb)\n+    (219,219,219)     # rgb = (0xdb,0xdb,0xdb)\n+    (217,217,217)     # rgb = (0xd9,0xd9,0xd9)\n+    (217,217,217)     # rgb = (0xd9,0xd9,0xd9)\n+    (215,215,215)     # rgb = (0xd7,0xd7,0xd7)\n+    (214,214,214)     # rgb = (0xd6,0xd6,0xd6)\n+    (214,214,214)     # rgb = (0xd6,0xd6,0xd6)\n+    (212,212,212)     # rgb = (0xd4,0xd4,0xd4)\n+    (212,212,212)     # rgb = (0xd4,0xd4,0xd4)\n+    (210,210,210)     # rgb = (0xd2,0xd2,0xd2)\n+    (209,209,209)     # rgb = (0xd1,0xd1,0xd1)\n+    (209,209,209)     # rgb = (0xd1,0xd1,0xd1)\n+    (207,207,207)     # rgb = (0xcf,0xcf,0xcf)\n+    (205,205,205)     # rgb = (0xcd,0xcd,0xcd)\n+    (205,205,205)     # rgb = (0xcd,0xcd,0xcd)\n+    (204,204,204)     # rgb = (0xcc,0xcc,0xcc)\n+    (204,204,204)     # rgb = (0xcc,0xcc,0xcc)\n+    (202,202,202)     # rgb = (0xca,0xca,0xca)\n+    (201,201,201)     # rgb = (0xc9,0xc9,0xc9)\n+    (201,201,201)     # rgb = (0xc9,0xc9,0xc9)\n+    (199,199,199)     # rgb = (0xc7,0xc7,0xc7)\n+    (199,199,199)     # rgb = (0xc7,0xc7,0xc7)\n+    (197,197,197)     # rgb = (0xc5,0xc5,0xc5)\n+    (196,196,196)     # rgb = (0xc4,0xc4,0xc4)\n+    (196,196,196)     # rgb = (0xc4,0xc4,0xc4)\n+    (194,194,194)     # rgb = (0xc2,0xc2,0xc2)\n+    (193,193,193)     # rgb = (0xc1,0xc1,0xc1)\n+    (193,193,193)     # rgb = (0xc1,0xc1,0xc1)\n+    (191,191,191)     # rgb = (0xbf,0xbf,0xbf)\n+    (191,191,191)     # rgb = (0xbf,0xbf,0xbf)\n+    (189,189,189)     # rgb = (0xbd,0xbd,0xbd)\n+    (188,188,188)     # rgb = (0xbc,0xbc,0xbc)\n+    (188,188,188)     # rgb = (0xbc,0xbc,0xbc)\n+    (186,186,186)     # rgb = (0xba,0xba,0xba)\n+    (185,185,185)     # rgb = (0xb9,0xb9,0xb9)\n+    (185,185,185)     # rgb = (0xb9,0xb9,0xb9)\n+    (183,183,183)     # rgb = (0xb7,0xb7,0xb7)\n+    (182,182,182)     # rgb = (0xb6,0xb6,0xb6)\n+    (182,182,182)     # rgb = (0xb6,0xb6,0xb6)\n+    (180,180,180)     # rgb = (0xb4,0xb4,0xb4)\n+    (178,178,178)     # rgb = (0xb2,0xb2,0xb2)\n+    (178,178,178)     # rgb = (0xb2,0xb2,0xb2)\n+    (177,177,177)     # rgb = (0xb1,0xb1,0xb1)\n+    (177,177,177)     # rgb = (0xb1,0xb1,0xb1)\n+    (175,175,175)     # rgb = (0xaf,0xaf,0xaf)\n+    (174,174,174)     # rgb = (0xae,0xae,0xae)\n+    (174,174,174)     # rgb = (0xae,0xae,0xae)\n+}\n+tRNS {\n+ 197 187 190 194 186 4 186 189 4 195 84 191 5 193 175 163 205 150 191 213 88 75 67 8 147 191 220 203 95 151 223 199 8 207 156 227 199 65 163 98 226 204 12 202 167 201 11 65 178 228 205 74 59 87 178 19 201 99 18 14 184 204 184 96 22 61 227 199 22 193 97 197 254 59 253 28 192 102 199 247 58 198 244 30 109 202 188 32 96 196 60 203 239 202 230 41 207 237 119 53 213 209 37 55 45 230 214 233 92 185 223 50 230 57 124 217 43 133 221 95 198 47 233 99 194 221 107 138 152 144 226 140 133 220 172 125 218 196 118 225 161 223 235 238 200 155 147 146 172 236 236 151 183 150 234 216 217 211 151 219 132 185 145 147 217 138 144 137 142 151 217 217 213}\n+IMAGE {\n+    pixels hex\n+0520201616160a0a0a0a0a0a0a0a010101010101010101000000000000000000\n+053a3a161616160a0a0a0a0a0a0a0a0a0a06060606060607070707070707071b\n+053a3a3a161616161615151c1c1c1c1c1c1c12121212121b1b1b1b1b1b1b1b1b\n+053a3a3a3a252525252527272727272727272724242424242424212121212121\n+053a3a3a4034343425252727272727393939392d2d2d2d2d2d2d323232323232\n+053a3a404034343434343939393939393939394747474343433d3d3d3d3d3d3d\n+053a404b4b4b50505046464646464646464659595959595151514e5b5b616161\n+053a404b4b4b50505058585858585858588c8c8c595959595b656a6e70707070\n+053a4b4b4b4b5050506c5858585858588c8c8c8c8c8c5965656a6a6e70707070\n+053b4b4b4b636363506c6c6c6c6c6c8781808c8c8c86a1a1a1906e6e70707070\n+053b4b5757636363636c6c6c6c7787878181808c8c86a1a190909d9d9d9daa70\n+053b576666666f6363777777777e8787848481808086a19090aaaaaaaa9f9f9f\n+053b576666797979797b7b7b7b7b8a8a8a8a848480809c9c9c9c9c9c9c9c9c9c\n+053b66747474747474747b7b7b7b8a8a8a8a8a8aacacacacacacacacacaca4a4\n+052e7474747474747474747b7b7b8a8a8a6d6d6d6d6d6d6da4a4a4a4a4a4a4a4\n+052e7474747474747474a0a0a0a0a0a09393936d6d6d6d787878787878787878\n+05207474747474a0a0a0a0a0a0a0a0a093939191949494948989898989898989\n+052a2a2a7171717171a7a7a7a7a7a7a7a7a79e9e9e9e9e9e9e9e959595959595\n+052a53536871717171717171a9a9a9a9a9a9a9a9a9a9a9a99595959595959595\n+053753536871717171717171a3a3a3a3a3a3a3a3979797979a9a9a9a8e8e8e8e\n+05445353686871717171717171a5a2a2a2a2a2929292928585857a7a7a7a7a7a\n+054453535f68687171717171a5a5a5a5a5a5a6a6a6a6a68b8b8b8b8b8b8b8b6b\n+054444535f686767676767677272727f7f8383838383838d8d8d8d8d8d8d8b8b\n+054444535f6767675a5a5a627272727275757f7f7f7f5d73737d7d7d82828282\n+0544445367675a5a5a5a4d546262727272757575755d5d5d7373737376767676\n+054444535349495a5a5a4d4d54626262626275754c5d5d5d5d60646464767676\n+054444444949494949494d4d4d5454546262624c4c4c4c4c5555556060646464\n+05444444444941414133353f3f3f3f3f3f4d3636363c3c454545454531313131\n+05444444442f2f2f2f333535353535352c2c2c2c2c3030303030282828282828\n+053744442f2f2f2f2f2f333535351d1d22222222262626262323232323232323\n+053737372f2f2f2f2f2f2f331818181818181d1d1d1d1d131a1a1a1a1a1e1e1e\n+052a37372f2f2f2f2f2f18111111110f0e0e0e0e0d0d0d0d0d0d0d0d0d0d0d13\n+}"}, {"sha": "b7129f9846aa757ee951350e6d191a7bd9c0fab3", "filename": "libgo/go/json/decode.go", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fjson%2Fdecode.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fjson%2Fdecode.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fjson%2Fdecode.go?ref=9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c", "patch": "@@ -140,6 +140,7 @@ type decodeState struct {\n \tscan       scanner\n \tnextscan   scanner // for calls to nextValue\n \tsavedError os.Error\n+\ttempstr    string // scratch space to avoid some allocations\n }\n \n // errPhase is used for errors that should not happen unless\n@@ -470,6 +471,8 @@ func (d *decodeState) object(v reflect.Value) {\n \n \t\t// Figure out field corresponding to key.\n \t\tvar subv reflect.Value\n+\t\tdestring := false // whether the value is wrapped in a string to be decoded first\n+\n \t\tif mv.IsValid() {\n \t\t\telemType := mv.Type().Elem()\n \t\t\tif !mapElem.IsValid() {\n@@ -486,7 +489,8 @@ func (d *decodeState) object(v reflect.Value) {\n \t\t\tif isValidTag(key) {\n \t\t\t\tfor i := 0; i < sv.NumField(); i++ {\n \t\t\t\t\tf = st.Field(i)\n-\t\t\t\t\tif f.Tag.Get(\"json\") == key {\n+\t\t\t\t\ttagName, _ := parseTag(f.Tag.Get(\"json\"))\n+\t\t\t\t\tif tagName == key {\n \t\t\t\t\t\tok = true\n \t\t\t\t\t\tbreak\n \t\t\t\t\t}\n@@ -508,6 +512,8 @@ func (d *decodeState) object(v reflect.Value) {\n \t\t\t\t} else {\n \t\t\t\t\tsubv = sv.FieldByIndex(f.Index)\n \t\t\t\t}\n+\t\t\t\t_, opts := parseTag(f.Tag.Get(\"json\"))\n+\t\t\t\tdestring = opts.Contains(\"string\")\n \t\t\t}\n \t\t}\n \n@@ -520,8 +526,12 @@ func (d *decodeState) object(v reflect.Value) {\n \t\t}\n \n \t\t// Read value.\n-\t\td.value(subv)\n-\n+\t\tif destring {\n+\t\t\td.value(reflect.ValueOf(&d.tempstr))\n+\t\t\td.literalStore([]byte(d.tempstr), subv)\n+\t\t} else {\n+\t\t\td.value(subv)\n+\t\t}\n \t\t// Write value back to map;\n \t\t// if using struct, subv points into struct already.\n \t\tif mv.IsValid() {\n@@ -550,8 +560,12 @@ func (d *decodeState) literal(v reflect.Value) {\n \t// Scan read one byte too far; back up.\n \td.off--\n \td.scan.undo(op)\n-\titem := d.data[start:d.off]\n \n+\td.literalStore(d.data[start:d.off], v)\n+}\n+\n+// literalStore decodes a literal stored in item into v.\n+func (d *decodeState) literalStore(item []byte, v reflect.Value) {\n \t// Check for unmarshaler.\n \twantptr := item[0] == 'n' // null\n \tunmarshaler, pv := d.indirect(v, wantptr)"}, {"sha": "5f6c3f5b8d061cd7604be711607d25ea11568347", "filename": "libgo/go/json/decode_test.go", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fjson%2Fdecode_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fjson%2Fdecode_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fjson%2Fdecode_test.go?ref=9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c", "patch": "@@ -262,7 +262,10 @@ type All struct {\n \tFloat32 float32\n \tFloat64 float64\n \n-\tFoo string `json:\"bar\"`\n+\tFoo  string `json:\"bar\"`\n+\tFoo2 string `json:\"bar2,dummyopt\"`\n+\n+\tIntStr int64 `json:\",string\"`\n \n \tPBool    *bool\n \tPInt     *int\n@@ -331,6 +334,8 @@ var allValue = All{\n \tFloat32: 14.1,\n \tFloat64: 15.1,\n \tFoo:     \"foo\",\n+\tFoo2:    \"foo2\",\n+\tIntStr:  42,\n \tString:  \"16\",\n \tMap: map[string]Small{\n \t\t\"17\": {Tag: \"tag17\"},\n@@ -391,6 +396,8 @@ var allValueIndent = `{\n \t\"Float32\": 14.1,\n \t\"Float64\": 15.1,\n \t\"bar\": \"foo\",\n+\t\"bar2\": \"foo2\",\n+\t\"IntStr\": \"42\",\n \t\"PBool\": null,\n \t\"PInt\": null,\n \t\"PInt8\": null,\n@@ -481,6 +488,8 @@ var pallValueIndent = `{\n \t\"Float32\": 0,\n \t\"Float64\": 0,\n \t\"bar\": \"\",\n+\t\"bar2\": \"\",\n+        \"IntStr\": \"0\",\n \t\"PBool\": true,\n \t\"PInt\": 2,\n \t\"PInt8\": 3,"}, {"sha": "16be5e2af1686a357957eaa96aa3253d52cfd465", "filename": "libgo/go/json/encode.go", "status": "modified", "additions": 44, "deletions": 18, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fjson%2Fencode.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fjson%2Fencode.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fjson%2Fencode.go?ref=9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c", "patch": "@@ -4,6 +4,9 @@\n \n // Package json implements encoding and decoding of JSON objects as defined in\n // RFC 4627.\n+//\n+// See \"JSON and Go\" for an introduction to this package:\n+// http://blog.golang.org/2011/01/json-and-go.html\n package json\n \n import (\n@@ -14,7 +17,6 @@ import (\n \t\"runtime\"\n \t\"sort\"\n \t\"strconv\"\n-\t\"strings\"\n \t\"unicode\"\n \t\"utf8\"\n )\n@@ -59,6 +61,12 @@ import (\n //   // Note the leading comma.\n //   Field int `json:\",omitempty\"`\n //\n+// The \"string\" option signals that a field is stored as JSON inside a\n+// JSON-encoded string.  This extra level of encoding is sometimes\n+// used when communicating with JavaScript programs:\n+//\n+//    Int64String int64 `json:\",string\"`\n+//\n // The key name will be used if it's a non-empty string consisting of\n // only Unicode letters, digits, dollar signs, hyphens, and underscores.\n //\n@@ -221,6 +229,12 @@ func isEmptyValue(v reflect.Value) bool {\n }\n \n func (e *encodeState) reflectValue(v reflect.Value) {\n+\te.reflectValueQuoted(v, false)\n+}\n+\n+// reflectValueQuoted writes the value in v to the output.\n+// If quoted is true, the serialization is wrapped in a JSON string.\n+func (e *encodeState) reflectValueQuoted(v reflect.Value, quoted bool) {\n \tif !v.IsValid() {\n \t\te.WriteString(\"null\")\n \t\treturn\n@@ -238,26 +252,39 @@ func (e *encodeState) reflectValue(v reflect.Value) {\n \t\treturn\n \t}\n \n+\twriteString := (*encodeState).WriteString\n+\tif quoted {\n+\t\twriteString = (*encodeState).string\n+\t}\n+\n \tswitch v.Kind() {\n \tcase reflect.Bool:\n \t\tx := v.Bool()\n \t\tif x {\n-\t\t\te.WriteString(\"true\")\n+\t\t\twriteString(e, \"true\")\n \t\t} else {\n-\t\t\te.WriteString(\"false\")\n+\t\t\twriteString(e, \"false\")\n \t\t}\n \n \tcase reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:\n-\t\te.WriteString(strconv.Itoa64(v.Int()))\n+\t\twriteString(e, strconv.Itoa64(v.Int()))\n \n \tcase reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:\n-\t\te.WriteString(strconv.Uitoa64(v.Uint()))\n+\t\twriteString(e, strconv.Uitoa64(v.Uint()))\n \n \tcase reflect.Float32, reflect.Float64:\n-\t\te.WriteString(strconv.FtoaN(v.Float(), 'g', -1, v.Type().Bits()))\n+\t\twriteString(e, strconv.FtoaN(v.Float(), 'g', -1, v.Type().Bits()))\n \n \tcase reflect.String:\n-\t\te.string(v.String())\n+\t\tif quoted {\n+\t\t\tsb, err := Marshal(v.String())\n+\t\t\tif err != nil {\n+\t\t\t\te.error(err)\n+\t\t\t}\n+\t\t\te.string(string(sb))\n+\t\t} else {\n+\t\t\te.string(v.String())\n+\t\t}\n \n \tcase reflect.Struct:\n \t\te.WriteByte('{')\n@@ -269,17 +296,14 @@ func (e *encodeState) reflectValue(v reflect.Value) {\n \t\t\tif f.PkgPath != \"\" {\n \t\t\t\tcontinue\n \t\t\t}\n-\t\t\ttag, omitEmpty := f.Name, false\n+\t\t\ttag, omitEmpty, quoted := f.Name, false, false\n \t\t\tif tv := f.Tag.Get(\"json\"); tv != \"\" {\n-\t\t\t\tss := strings.SplitN(tv, \",\", 2)\n-\t\t\t\tif isValidTag(ss[0]) {\n-\t\t\t\t\ttag = ss[0]\n-\t\t\t\t}\n-\t\t\t\tif len(ss) > 1 {\n-\t\t\t\t\t// Currently the only option is omitempty,\n-\t\t\t\t\t// so parsing is trivial.\n-\t\t\t\t\tomitEmpty = ss[1] == \"omitempty\"\n+\t\t\t\tname, opts := parseTag(tv)\n+\t\t\t\tif isValidTag(name) {\n+\t\t\t\t\ttag = name\n \t\t\t\t}\n+\t\t\t\tomitEmpty = opts.Contains(\"omitempty\")\n+\t\t\t\tquoted = opts.Contains(\"string\")\n \t\t\t}\n \t\t\tfieldValue := v.Field(i)\n \t\t\tif omitEmpty && isEmptyValue(fieldValue) {\n@@ -292,7 +316,7 @@ func (e *encodeState) reflectValue(v reflect.Value) {\n \t\t\t}\n \t\t\te.string(tag)\n \t\t\te.WriteByte(':')\n-\t\t\te.reflectValue(fieldValue)\n+\t\t\te.reflectValueQuoted(fieldValue, quoted)\n \t\t}\n \t\te.WriteByte('}')\n \n@@ -380,7 +404,8 @@ func (sv stringValues) Swap(i, j int)      { sv[i], sv[j] = sv[j], sv[i] }\n func (sv stringValues) Less(i, j int) bool { return sv.get(i) < sv.get(j) }\n func (sv stringValues) get(i int) string   { return sv[i].String() }\n \n-func (e *encodeState) string(s string) {\n+func (e *encodeState) string(s string) (int, os.Error) {\n+\tlen0 := e.Len()\n \te.WriteByte('\"')\n \tstart := 0\n \tfor i := 0; i < len(s); {\n@@ -425,4 +450,5 @@ func (e *encodeState) string(s string) {\n \t\te.WriteString(s[start:])\n \t}\n \te.WriteByte('\"')\n+\treturn e.Len() - len0, nil\n }"}, {"sha": "012e9f143b401461c9d948619cc86b7efe1b5ee4", "filename": "libgo/go/json/encode_test.go", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fjson%2Fencode_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fjson%2Fencode_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fjson%2Fencode_test.go?ref=9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c", "patch": "@@ -5,6 +5,8 @@\n package json\n \n import (\n+\t\"bytes\"\n+\t\"reflect\"\n \t\"testing\"\n )\n \n@@ -42,3 +44,39 @@ func TestOmitEmpty(t *testing.T) {\n \t\tt.Errorf(\" got: %s\\nwant: %s\\n\", got, optionalsExpected)\n \t}\n }\n+\n+type StringTag struct {\n+\tBoolStr bool   `json:\",string\"`\n+\tIntStr  int64  `json:\",string\"`\n+\tStrStr  string `json:\",string\"`\n+}\n+\n+var stringTagExpected = `{\n+ \"BoolStr\": \"true\",\n+ \"IntStr\": \"42\",\n+ \"StrStr\": \"\\\"xzbit\\\"\"\n+}`\n+\n+func TestStringTag(t *testing.T) {\n+\tvar s StringTag\n+\ts.BoolStr = true\n+\ts.IntStr = 42\n+\ts.StrStr = \"xzbit\"\n+\tgot, err := MarshalIndent(&s, \"\", \" \")\n+\tif err != nil {\n+\t\tt.Fatal(err)\n+\t}\n+\tif got := string(got); got != stringTagExpected {\n+\t\tt.Fatalf(\" got: %s\\nwant: %s\\n\", got, stringTagExpected)\n+\t}\n+\n+\t// Verify that it round-trips.\n+\tvar s2 StringTag\n+\terr = NewDecoder(bytes.NewBuffer(got)).Decode(&s2)\n+\tif err != nil {\n+\t\tt.Fatalf(\"Decode: %v\", err)\n+\t}\n+\tif !reflect.DeepEqual(s, s2) {\n+\t\tt.Fatalf(\"decode didn't match.\\nsource: %#v\\nEncoded as:\\n%s\\ndecode: %#v\", s, string(got), s2)\n+\t}\n+}"}, {"sha": "58cda2027c612ae107dad951bbf0eb3a81d07879", "filename": "libgo/go/json/tags.go", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fjson%2Ftags.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fjson%2Ftags.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fjson%2Ftags.go?ref=9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package json\n+\n+import (\n+\t\"strings\"\n+)\n+\n+// tagOptions is the string following a comma in a struct field's \"json\"\n+// tag, or the empty string. It does not include the leading comma.\n+type tagOptions string\n+\n+// parseTag splits a struct field's json tag into its name and\n+// comma-separated options.\n+func parseTag(tag string) (string, tagOptions) {\n+\tif idx := strings.Index(tag, \",\"); idx != -1 {\n+\t\treturn tag[:idx], tagOptions(tag[idx+1:])\n+\t}\n+\treturn tag, tagOptions(\"\")\n+}\n+\n+// Contains returns whether checks that a comma-separated list of options\n+// contains a particular substr flag. substr must be surrounded by a\n+// string boundary or commas.\n+func (o tagOptions) Contains(optionName string) bool {\n+\tif len(o) == 0 {\n+\t\treturn false\n+\t}\n+\ts := string(o)\n+\tfor s != \"\" {\n+\t\tvar next string\n+\t\ti := strings.Index(s, \",\")\n+\t\tif i >= 0 {\n+\t\t\ts, next = s[:i], s[i+1:]\n+\t\t}\n+\t\tif s == optionName {\n+\t\t\treturn true\n+\t\t}\n+\t\ts = next\n+\t}\n+\treturn false\n+}"}, {"sha": "91fb18831e27305c2962364e81887d24d2ab3a70", "filename": "libgo/go/json/tags_test.go", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fjson%2Ftags_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Fjson%2Ftags_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fjson%2Ftags_test.go?ref=9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package json\n+\n+import (\n+\t\"testing\"\n+)\n+\n+func TestTagParsing(t *testing.T) {\n+\tname, opts := parseTag(\"field,foobar,foo\")\n+\tif name != \"field\" {\n+\t\tt.Fatalf(\"name = %q, want field\", name)\n+\t}\n+\tfor _, tt := range []struct {\n+\t\topt  string\n+\t\twant bool\n+\t}{\n+\t\t{\"foobar\", true},\n+\t\t{\"foo\", true},\n+\t\t{\"bar\", false},\n+\t} {\n+\t\tif opts.Contains(tt.opt) != tt.want {\n+\t\t\tt.Errorf(\"Contains(%q) = %v\", tt.opt, !tt.want)\n+\t\t}\n+\t}\n+}"}, {"sha": "6d0f4542431e8245dac0090b2067e8738e56b894", "filename": "libgo/go/reflect/type.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Freflect%2Ftype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fgo%2Freflect%2Ftype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Ftype.go?ref=9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c", "patch": "@@ -10,6 +10,9 @@\n // A call to ValueOf returns a Value representing the run-time data.\n // Zero takes a Type and returns a Value representing a zero value\n // for that type.\n+//\n+// See \"The Laws of Reflection\" for an introduction to reflection in Go:\n+// http://blog.golang.org/2011/09/laws-of-reflection.html\n package reflect\n \n import ("}, {"sha": "59e1df2018f6c4f9ca75a3c9caeb738765a7bc2f", "filename": "libgo/merge.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fmerge.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c/libgo%2Fmerge.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmerge.sh?ref=9d49f4d0aba73cd49fb2f7bb1b02a3c3e062949c", "patch": "@@ -40,7 +40,7 @@ hg clone -r ${old_rev} ${repository} ${OLDDIR}\n rm -rf ${NEWDIR}\n hg clone -u release ${repository} ${NEWDIR}\n \n-new_rev=`cd ${NEWDIR} && hg log | sed 1q | sed -e 's/.*://'`\n+new_rev=`cd ${NEWDIR} && hg log -r release | sed 1q | sed -e 's/.*://'`\n \n merge() {\n   name=$1"}]}