{"sha": "52b62c0e1a86842d44946fe7fa91775b60af85d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJiNjJjMGUxYTg2ODQyZDQ0OTQ2ZmU3ZmE5MTc3NWI2MGFmODVkNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-02-04T22:42:32Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-02-04T22:42:32Z"}, "message": "PR libstdc++/9439, PR libstdc++/9425\n\n2003-02-04  Paolo Carlini  <pcarlini@unitus.it>\n\n\tPR libstdc++/9439, PR libstdc++/9425\n\t* config/io/basic_file_stdio.cc\n\t(__basic_file<char>::seekoff, seekpos): Return -1L if\n\tfseek fails.\n\t* include/bits/fstream.tcc (basic_filebuf::seekoff):\n\tCheck _M_file.seekoff return value; always return\n\tpos_type(off_type(-1)) in case of failure.\n\t(basic_filebuf::pbackfail): Check this->seekoff return\n\tvalue and return traits_type::eof() in case of failure.\n\t* testsuite/27_io/filebuf_virtuals.cc (test09): Add.\n\nFrom-SVN: r62408", "tree": {"sha": "65c44c2de016efc62e22b368ac2174dff478f580", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65c44c2de016efc62e22b368ac2174dff478f580"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52b62c0e1a86842d44946fe7fa91775b60af85d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52b62c0e1a86842d44946fe7fa91775b60af85d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52b62c0e1a86842d44946fe7fa91775b60af85d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52b62c0e1a86842d44946fe7fa91775b60af85d6/comments", "author": null, "committer": null, "parents": [{"sha": "1efd0b97d6e5f1cf93928fdeb50534b7edba1dad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1efd0b97d6e5f1cf93928fdeb50534b7edba1dad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1efd0b97d6e5f1cf93928fdeb50534b7edba1dad"}], "stats": {"total": 81, "additions": 62, "deletions": 19}, "files": [{"sha": "1313e4028b4f3e0ddd0f23a50d792579c229c6b2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52b62c0e1a86842d44946fe7fa91775b60af85d6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52b62c0e1a86842d44946fe7fa91775b60af85d6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=52b62c0e1a86842d44946fe7fa91775b60af85d6", "patch": "@@ -1,3 +1,16 @@\n+2003-02-04  Paolo Carlini  <pcarlini@unitus.it>\n+\t\n+\tPR libstdc++/9439, PR libstdc++/9425\n+\t* config/io/basic_file_stdio.cc\n+\t(__basic_file<char>::seekoff, seekpos): Return -1L if\n+\tfseek fails.\n+\t* include/bits/fstream.tcc (basic_filebuf::seekoff):\n+\tCheck _M_file.seekoff return value; always return\n+\tpos_type(off_type(-1)) in case of failure.\n+\t(basic_filebuf::pbackfail): Check this->seekoff return\n+\tvalue and return traits_type::eof() in case of failure.  \n+\t* testsuite/27_io/filebuf_virtuals.cc (test09): Add.\n+\n 2003-02-04  Jerry Quinn  <jlquinn@optonline.net>\n \n \t* include/std/std_ostream.h (ostream::_M_write): Declare.\t"}, {"sha": "961523b0dcd7f7e2ff898bf88bacc72c056bbf1c", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52b62c0e1a86842d44946fe7fa91775b60af85d6/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52b62c0e1a86842d44946fe7fa91775b60af85d6/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=52b62c0e1a86842d44946fe7fa91775b60af85d6", "patch": "@@ -203,15 +203,21 @@ namespace std\n   __basic_file<char>::seekoff(streamoff __off, ios_base::seekdir __way, \n \t\t\t      ios_base::openmode /*__mode*/)\n   { \n-    fseek(_M_cfile, __off, __way); \n-    return ftell(_M_cfile); \n+    if (!fseek(_M_cfile, __off, __way))\n+      return ftell(_M_cfile); \n+    else\n+      // Fseek failed.\n+      return -1L;\n   }\n \n   streamoff\n   __basic_file<char>::seekpos(streamoff __pos, ios_base::openmode /*__mode*/)\n   { \n-    fseek(_M_cfile, __pos, ios_base::beg); \n-    return ftell(_M_cfile); \n+    if (!fseek(_M_cfile, __pos, ios_base::beg))\n+      return ftell(_M_cfile);\n+    else\n+      // Fseek failed.\n+      return -1L;\n   }\n   \n   int "}, {"sha": "abc7310e32d001f32bda0c38823d8cd97cca39e7", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52b62c0e1a86842d44946fe7fa91775b60af85d6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52b62c0e1a86842d44946fe7fa91775b60af85d6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=52b62c0e1a86842d44946fe7fa91775b60af85d6", "patch": "@@ -215,19 +215,24 @@ namespace std\n \t    {\t \n  \t      // At the beginning of the buffer, need to make a\n \t      // putback position available.\n-\t      this->seekoff(-1, ios_base::cur);\n-\t      this->underflow();\n- \t      if (!__testeof)\n- \t\t{\n-\t\t  if (!traits_type::eq(__c, *this->_M_in_cur))\n+\t      // But the seek may fail (f.i., at the beginning of\n+\t      // a file, see libstdc++/9439) and in that case\n+\t      // we return traits_type::eof()\n+\t      if (this->seekoff(-1, ios_base::cur) >= 0)\n+\t\t{\n+\t\t  this->underflow();\n+\t\t  if (!__testeof)\n \t\t    {\n-\t\t      _M_pback_create();\n-\t\t      *this->_M_in_cur = __c;\n+\t\t      if (!traits_type::eq(__c, *this->_M_in_cur))\n+\t\t\t{\n+\t\t\t  _M_pback_create();\n+\t\t\t  *this->_M_in_cur = __c;\n+\t\t\t}\n+\t\t      __ret = __i;\n \t\t    }\n- \t\t  __ret = __i;\n- \t\t}\n- \t      else\n- \t\t__ret = traits_type::not_eof(__i);\n+\t\t  else\n+\t\t    __ret = traits_type::not_eof(__i);\n+\t\t}\n  \t    }\n \t}\n       _M_last_overflowed = false;\t\n@@ -439,17 +444,21 @@ namespace std\n \t      //in\n \t      else if (__testget && __way == ios_base::cur)\n \t\t__computed_off += this->_M_in_cur - _M_filepos;\n-\t  \n+\n+\t      // Return pos_type(off_type(-1)) in case of failure.\n \t      __ret = _M_file.seekoff(__computed_off, __way, __mode);\n \t      _M_set_indeterminate();\n \t    }\n \t  // NB: Need to do this in case _M_file in indeterminate\n \t  // state, ie _M_file._offset == -1\n \t  else\n \t    {\n-\t      __ret = _M_file.seekoff(__off, ios_base::cur, __mode);\n-\t      __ret +=\n-\t\tstd::max(this->_M_out_cur, this->_M_in_cur) - _M_filepos;\n+\t      pos_type __tmp =\n+\t\t_M_file.seekoff(__off, ios_base::cur, __mode);\n+\t      if (__tmp >= 0)\n+\t\t// Seek successful.\n+\t\t__ret = __tmp +\n+\t\t  std::max(this->_M_out_cur, this->_M_in_cur) - _M_filepos;\n \t    }\n \t}\n       _M_last_overflowed = false;\t"}, {"sha": "58a565095835634811dfd2d1ecff6aaa13da6e22", "filename": "libstdc++-v3/testsuite/27_io/filebuf_virtuals.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52b62c0e1a86842d44946fe7fa91775b60af85d6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_virtuals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52b62c0e1a86842d44946fe7fa91775b60af85d6/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_virtuals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_virtuals.cc?ref=52b62c0e1a86842d44946fe7fa91775b60af85d6", "patch": "@@ -570,6 +570,20 @@ void test08()\n   mb.sputbackc(0);  \n }\n \n+// libstdc++/9439, libstdc++/9425\n+void test09()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  filebuf fbuf;\n+  fbuf.open(name_01, ios_base::in);\n+  filebuf::int_type r = fbuf.sputbackc('a');\n+  fbuf.close();\n+\n+  VERIFY( r == filebuf::traits_type::eof() );\n+}\n+\n main() \n {\n   test01();\n@@ -582,5 +596,6 @@ main()\n \n   test07();\n   test08();\n+  test09();\n   return 0;\n }"}]}