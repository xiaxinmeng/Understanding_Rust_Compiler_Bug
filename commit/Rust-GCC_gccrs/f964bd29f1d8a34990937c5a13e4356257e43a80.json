{"sha": "f964bd29f1d8a34990937c5a13e4356257e43a80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk2NGJkMjlmMWQ4YTM0OTkwOTM3YzVhMTNlNDM1NjI1N2U0M2E4MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2004-04-29T07:19:25Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2004-04-29T07:19:25Z"}, "message": "reg-stack.c (swap_to_top): New function.\n\n2004-04-23  Uros Bizjak  <uros@kss-loka.si>\n\n        * reg-stack.c (swap_to_top): New function.\n        (subst_stack_regs_pat): UNSPEC_FPATAN, UNSPEC_FYL2X: Use\\\n        swap_to_top().\n        (subst_stack_regs_pat): UNSPEC_FSCALE: Remove.\n        (subst_stack_regs_pat): Handle UNSPEC_FSCALE_FRACT and\n        UNSPEC_FSCALE_EXP.\n\n        * config/i386/i386.md (UNSPEC_FSCALE): Remove.\n        (*fscale_sfxf3, *fscale_dfxf3, *fscale_xf3): Remove insn pattern.\n        (UNSPEC_FSCALE_FRACT, UNSPEC_FSCALE_EXP): New unspecs to represent\n        x87's fscale insn.\n        (*fscalexf4: Define new insn pattern to implement x87 fscale insn.\n        (exp?f2, exp10?f2, exp2?f2): Use *fscalexf4 and float_truncate\n        patterns.\n\nFrom-SVN: r81278", "tree": {"sha": "827e4443f76d6de7e65f84cbf80cfc3ba9151699", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/827e4443f76d6de7e65f84cbf80cfc3ba9151699"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f964bd29f1d8a34990937c5a13e4356257e43a80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f964bd29f1d8a34990937c5a13e4356257e43a80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f964bd29f1d8a34990937c5a13e4356257e43a80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f964bd29f1d8a34990937c5a13e4356257e43a80/comments", "author": null, "committer": null, "parents": [{"sha": "fe6663350dd69453ef7689da7aa1a09ea4c2a9b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe6663350dd69453ef7689da7aa1a09ea4c2a9b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe6663350dd69453ef7689da7aa1a09ea4c2a9b2"}], "stats": {"total": 321, "additions": 213, "deletions": 108}, "files": [{"sha": "3916f83518c285fb9baa8c63f03cf9dae1e923e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f964bd29f1d8a34990937c5a13e4356257e43a80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f964bd29f1d8a34990937c5a13e4356257e43a80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f964bd29f1d8a34990937c5a13e4356257e43a80", "patch": "@@ -1,3 +1,20 @@\n+2004-04-29  Uros Bizjak  <uros@kss-loka.si>\n+\n+        * reg-stack.c (swap_to_top): New function.\n+        (subst_stack_regs_pat): UNSPEC_FPATAN, UNSPEC_FYL2X: Use\n+        swap_to_top().\n+        (subst_stack_regs_pat): UNSPEC_FSCALE: Remove.\n+        (subst_stack_regs_pat): Handle UNSPEC_FSCALE_FRACT and \n+        UNSPEC_FSCALE_EXP.\n+\n+        * config/i386/i386.md (UNSPEC_FSCALE): Remove.\n+        (*fscale_sfxf3, *fscale_dfxf3, *fscale_xf3): Remove insn pattern.\n+        (UNSPEC_FSCALE_FRACT, UNSPEC_FSCALE_EXP): New unspecs to represent\n+        x87's fscale insn.\n+        (*fscalexf4: Define new insn pattern to implement x87 fscale insn.\n+        (exp?f2, exp10?f2, exp2?f2): Use *fscalexf4 and float_truncate\n+        patterns.\n+\n 2004-04-28  Serge Belyshev  <1319@bot.ru>\n \n \tPR 14944"}, {"sha": "fbb39c1cd7afe8fe0f42de90ae34fd584dd9f431", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 88, "deletions": 71, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f964bd29f1d8a34990937c5a13e4356257e43a80/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f964bd29f1d8a34990937c5a13e4356257e43a80/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f964bd29f1d8a34990937c5a13e4356257e43a80", "patch": "@@ -117,7 +117,6 @@\n    ; x87 Floating point\n    (UNSPEC_FPATAN\t\t65)\n    (UNSPEC_FYL2X\t\t66)\n-   (UNSPEC_FSCALE\t\t67)\n    (UNSPEC_FRNDINT\t\t68)\n    (UNSPEC_F2XM1\t\t69)\n \n@@ -128,6 +127,8 @@\n    (UNSPEC_TAN_TAN\t\t83)\n    (UNSPEC_XTRACT_FRACT\t\t84)\n    (UNSPEC_XTRACT_EXP\t\t85)\n+   (UNSPEC_FSCALE_FRACT\t\t86)\n+   (UNSPEC_FSCALE_EXP\t\t87)\n \n    ; REP instruction\n    (UNSPEC_REP\t\t\t75)\n@@ -15669,42 +15670,6 @@\n   operands[3] = gen_reg_rtx (XFmode);\n })\n \n-(define_insn \"*fscale_sfxf3\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n-\t (unspec:SF [(match_operand:XF 2 \"register_operand\" \"0\")\n-\t\t     (match_operand:XF 1 \"register_operand\" \"u\")]\n-\t\t    UNSPEC_FSCALE))\n-   (clobber (match_scratch:SF 3 \"=1\"))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n-  \"fscale\\;fstp\\t%y1\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"SF\")])\n-\n-(define_insn \"*fscale_dfxf3\"\n-  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n-\t (unspec:DF [(match_operand:XF 2 \"register_operand\" \"0\")\n-\t\t     (match_operand:XF 1 \"register_operand\" \"u\")]\n-\t\t    UNSPEC_FSCALE))\n-   (clobber (match_scratch:DF 3 \"=1\"))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n-  \"fscale\\;fstp\\t%y1\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"DF\")])\n-\n-(define_insn \"*fscale_xf3\"\n-  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n-\t(unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")\n-\t\t    (match_operand:XF 1 \"register_operand\" \"u\")]\n-\t           UNSPEC_FSCALE))\n-   (clobber (match_scratch:XF 3 \"=1\"))]\n-  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n-   && flag_unsafe_math_optimizations\"\n-  \"fscale\\;fstp\\t%y1\"\n-  [(set_attr \"type\" \"fpspc\")\n-   (set_attr \"mode\" \"XF\")])\n-\n (define_insn \"*frndintxf2\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n \t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")]\n@@ -15725,6 +15690,20 @@\n   [(set_attr \"type\" \"fpspc\")\n    (set_attr \"mode\" \"XF\")])\n \n+(define_insn \"*fscalexf4\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")\n+\t\t    (match_operand:XF 3 \"register_operand\" \"1\")]\n+\t\t   UNSPEC_FSCALE_FRACT))\n+   (set (match_operand:XF 1 \"register_operand\" \"=u\")\n+\t(unspec:XF [(match_dup 2) (match_dup 3)]\n+\t\t   UNSPEC_FSCALE_EXP))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+  \"fscale\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"DF\")])\n+\n (define_expand \"expsf2\"\n   [(set (match_dup 2)\n \t(float_extend:XF (match_operand:SF 1 \"register_operand\" \"\")))\n@@ -15733,16 +15712,21 @@\n    (set (match_dup 6) (minus:XF (match_dup 4) (match_dup 5)))\n    (set (match_dup 7) (unspec:XF [(match_dup 6)] UNSPEC_F2XM1))\n    (set (match_dup 9) (plus:XF (match_dup 7) (match_dup 8)))\n-   (parallel [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t\t   (unspec:SF [(match_dup 9) (match_dup 5)] UNSPEC_FSCALE))\n-\t      (clobber (match_scratch:SF 5 \"\"))])]\n+   (parallel [(set (match_dup 10)\n+\t\t   (unspec:XF [(match_dup 9) (match_dup 5)]\n+\t\t\t      UNSPEC_FSCALE_FRACT))\n+\t      (set (match_dup 11)\n+\t\t   (unspec:XF [(match_dup 9) (match_dup 5)]\n+\t\t\t      UNSPEC_FSCALE_EXP))])\n+   (set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(float_truncate:SF (match_dup 10)))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\"\n {\n   rtx temp;\n   int i;\n \n-  for (i=2; i<10; i++)\n+  for (i=2; i<12; i++)\n     operands[i] = gen_reg_rtx (XFmode);\n   temp = standard_80387_constant_rtx (5); /* fldl2e */\n   emit_move_insn (operands[3], temp);\n@@ -15755,19 +15739,23 @@\n    (set (match_dup 4) (mult:XF (match_dup 2) (match_dup 3)))\n    (set (match_dup 5) (unspec:XF [(match_dup 4)] UNSPEC_FRNDINT))\n    (set (match_dup 6) (minus:XF (match_dup 4) (match_dup 5)))\n-\n    (set (match_dup 7) (unspec:XF [(match_dup 6)] UNSPEC_F2XM1))\n    (set (match_dup 9) (plus:XF (match_dup 7) (match_dup 8)))\n-   (parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t\t   (unspec:DF [(match_dup 9) (match_dup 5)] UNSPEC_FSCALE))\n-\t      (clobber (match_scratch:DF 5 \"\"))])]\n+   (parallel [(set (match_dup 10)\n+\t\t   (unspec:XF [(match_dup 9) (match_dup 5)]\n+\t\t\t      UNSPEC_FSCALE_FRACT))\n+\t      (set (match_dup 11)\n+\t\t   (unspec:XF [(match_dup 9) (match_dup 5)]\n+\t\t\t      UNSPEC_FSCALE_EXP))])\n+   (set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(float_truncate:DF (match_dup 10)))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\"\n {\n   rtx temp;\n   int i;\n \n-  for (i=2; i<10; i++)\n+  for (i=2; i<12; i++)\n     operands[i] = gen_reg_rtx (XFmode);\n   temp = standard_80387_constant_rtx (5); /* fldl2e */\n   emit_move_insn (operands[3], temp);\n@@ -15782,15 +15770,18 @@\n    (set (match_dup 6) (unspec:XF [(match_dup 5)] UNSPEC_F2XM1))\n    (set (match_dup 8) (plus:XF (match_dup 6) (match_dup 7)))\n    (parallel [(set (match_operand:XF 0 \"register_operand\" \"\")\n-\t\t   (unspec:XF [(match_dup 8) (match_dup 4)] UNSPEC_FSCALE))\n-\t      (clobber (match_scratch:XF 5 \"\"))])]\n+\t\t   (unspec:XF [(match_dup 8) (match_dup 4)]\n+\t\t\t      UNSPEC_FSCALE_FRACT))\n+\t      (set (match_dup 9)\n+\t\t   (unspec:XF [(match_dup 8) (match_dup 4)]\n+\t\t\t      UNSPEC_FSCALE_EXP))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\"\n {\n   rtx temp;\n   int i;\n \n-  for (i=2; i<9; i++)\n+  for (i=2; i<10; i++)\n     operands[i] = gen_reg_rtx (XFmode);\n   temp = standard_80387_constant_rtx (5); /* fldl2e */\n   emit_move_insn (operands[2], temp);\n@@ -15805,16 +15796,21 @@\n    (set (match_dup 6) (minus:XF (match_dup 4) (match_dup 5)))\n    (set (match_dup 7) (unspec:XF [(match_dup 6)] UNSPEC_F2XM1))\n    (set (match_dup 9) (plus:XF (match_dup 7) (match_dup 8)))\n-   (parallel [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t\t   (unspec:SF [(match_dup 9) (match_dup 5)] UNSPEC_FSCALE))\n-\t      (clobber (match_scratch:SF 5 \"\"))])]\n+   (parallel [(set (match_dup 10)\n+\t\t   (unspec:XF [(match_dup 9) (match_dup 5)]\n+\t\t\t      UNSPEC_FSCALE_FRACT))\n+\t      (set (match_dup 11)\n+\t\t   (unspec:XF [(match_dup 9) (match_dup 5)]\n+\t\t\t      UNSPEC_FSCALE_EXP))])\n+   (set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(float_truncate:SF (match_dup 10)))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\"\n {\n   rtx temp;\n   int i;\n \n-  for (i=2; i<10; i++)\n+  for (i=2; i<12; i++)\n     operands[i] = gen_reg_rtx (XFmode);\n   temp = standard_80387_constant_rtx (6); /* fldl2t */\n   emit_move_insn (operands[3], temp);\n@@ -15829,16 +15825,21 @@\n    (set (match_dup 6) (minus:XF (match_dup 4) (match_dup 5)))\n    (set (match_dup 7) (unspec:XF [(match_dup 6)] UNSPEC_F2XM1))\n    (set (match_dup 9) (plus:XF (match_dup 7) (match_dup 8)))\n-   (parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t\t   (unspec:DF [(match_dup 9) (match_dup 5)] UNSPEC_FSCALE))\n-\t      (clobber (match_scratch:DF 5 \"\"))])]\n+   (parallel [(set (match_dup 10)\n+\t\t   (unspec:XF [(match_dup 9) (match_dup 5)]\n+\t\t\t      UNSPEC_FSCALE_FRACT))\n+\t      (set (match_dup 11)\n+\t\t   (unspec:XF [(match_dup 9) (match_dup 5)]\n+\t\t\t      UNSPEC_FSCALE_EXP))])\n+   (set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(float_truncate:DF (match_dup 10)))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\"\n {\n   rtx temp;\n   int i;\n \n-  for (i=2; i<10; i++)\n+  for (i=2; i<12; i++)\n     operands[i] = gen_reg_rtx (XFmode);\n   temp = standard_80387_constant_rtx (6); /* fldl2t */\n   emit_move_insn (operands[3], temp);\n@@ -15853,15 +15854,18 @@\n    (set (match_dup 6) (unspec:XF [(match_dup 5)] UNSPEC_F2XM1))\n    (set (match_dup 8) (plus:XF (match_dup 6) (match_dup 7)))\n    (parallel [(set (match_operand:XF 0 \"register_operand\" \"\")\n-\t\t   (unspec:XF [(match_dup 8) (match_dup 4)] UNSPEC_FSCALE))\n-\t      (clobber (match_scratch:XF 5 \"\"))])]\n+\t\t   (unspec:XF [(match_dup 8) (match_dup 4)]\n+\t\t\t      UNSPEC_FSCALE_FRACT))\n+\t      (set (match_dup 9)\n+\t\t   (unspec:XF [(match_dup 8) (match_dup 4)]\n+\t\t\t      UNSPEC_FSCALE_EXP))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\"\n {\n   rtx temp;\n   int i;\n \n-  for (i=2; i<9; i++)\n+  for (i=2; i<10; i++)\n     operands[i] = gen_reg_rtx (XFmode);\n   temp = standard_80387_constant_rtx (6); /* fldl2t */\n   emit_move_insn (operands[2], temp);\n@@ -15875,15 +15879,20 @@\n    (set (match_dup 4) (minus:XF (match_dup 2) (match_dup 3)))\n    (set (match_dup 5) (unspec:XF [(match_dup 4)] UNSPEC_F2XM1))\n    (set (match_dup 7) (plus:XF (match_dup 5) (match_dup 6)))\n-   (parallel [(set (match_operand:SF 0 \"register_operand\" \"\")\n-\t\t   (unspec:SF [(match_dup 7) (match_dup 3)] UNSPEC_FSCALE))\n-\t      (clobber (match_scratch:SF 3 \"\"))])]\n+   (parallel [(set (match_dup 8)\n+\t\t   (unspec:XF [(match_dup 7) (match_dup 3)]\n+\t\t\t      UNSPEC_FSCALE_FRACT))\n+\t      (set (match_dup 9)\n+\t\t   (unspec:XF [(match_dup 7) (match_dup 3)]\n+\t\t\t      UNSPEC_FSCALE_EXP))])\n+   (set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(float_truncate:SF (match_dup 8)))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\"\n {\n   int i;\n \n-  for (i=2; i<8; i++)\n+  for (i=2; i<10; i++)\n     operands[i] = gen_reg_rtx (XFmode);\n   emit_move_insn (operands[6], CONST1_RTX (XFmode));  /* fld1 */\n })\n@@ -15895,15 +15904,20 @@\n    (set (match_dup 4) (minus:XF (match_dup 2) (match_dup 3)))\n    (set (match_dup 5) (unspec:XF [(match_dup 4)] UNSPEC_F2XM1))\n    (set (match_dup 7) (plus:XF (match_dup 5) (match_dup 6)))\n-   (parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n-\t\t   (unspec:DF [(match_dup 7) (match_dup 3)] UNSPEC_FSCALE))\n-\t      (clobber (match_scratch:DF 3 \"\"))])]\n+   (parallel [(set (match_dup 8)\n+\t\t   (unspec:XF [(match_dup 7) (match_dup 3)]\n+\t\t\t      UNSPEC_FSCALE_FRACT))\n+\t      (set (match_dup 9)\n+\t\t   (unspec:XF [(match_dup 7) (match_dup 3)]\n+\t\t\t      UNSPEC_FSCALE_EXP))])\n+   (set (match_operand:DF 0 \"register_operand\" \"\")\n+\t(float_truncate:DF (match_dup 8)))]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\"\n {\n   int i;\n \n-  for (i=2; i<8; i++)\n+  for (i=2; i<10; i++)\n     operands[i] = gen_reg_rtx (XFmode);\n   emit_move_insn (operands[6], CONST1_RTX (XFmode));  /* fld1 */\n })\n@@ -15915,14 +15929,17 @@\n    (set (match_dup 5) (unspec:XF [(match_dup 4)] UNSPEC_F2XM1))\n    (set (match_dup 7) (plus:XF (match_dup 5) (match_dup 6)))\n    (parallel [(set (match_operand:XF 0 \"register_operand\" \"\")\n-\t\t   (unspec:XF [(match_dup 7) (match_dup 3)] UNSPEC_FSCALE))\n-\t      (clobber (match_scratch:XF 3 \"\"))])]\n+\t\t   (unspec:XF [(match_dup 7) (match_dup 3)]\n+\t\t\t      UNSPEC_FSCALE_FRACT))\n+\t      (set (match_dup 8)\n+\t\t   (unspec:XF [(match_dup 7) (match_dup 3)]\n+\t\t\t      UNSPEC_FSCALE_EXP))])]\n   \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n    && flag_unsafe_math_optimizations\"\n {\n   int i;\n \n-  for (i=2; i<8; i++)\n+  for (i=2; i<9; i++)\n     operands[i] = gen_reg_rtx (XFmode);\n   emit_move_insn (operands[6], CONST1_RTX (XFmode));  /* fld1 */\n })"}, {"sha": "2836e63d7ed47b84a1500e5735cc8fa17411f47e", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 108, "deletions": 37, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f964bd29f1d8a34990937c5a13e4356257e43a80/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f964bd29f1d8a34990937c5a13e4356257e43a80/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=f964bd29f1d8a34990937c5a13e4356257e43a80", "patch": "@@ -249,6 +249,7 @@ static void remove_regno_note (rtx, enum reg_note, unsigned int);\n static int get_hard_regnum (stack, rtx);\n static rtx emit_pop_insn (rtx, stack, rtx, enum emit_where);\n static void emit_swap_insn (rtx, stack, rtx);\n+static void swap_to_top(rtx, stack, rtx, rtx);\n static bool move_for_stack_reg (rtx, stack, rtx);\n static int swap_rtx_condition_1 (rtx);\n static int swap_rtx_condition (rtx);\n@@ -1034,6 +1035,54 @@ emit_swap_insn (rtx insn, stack regstack, rtx reg)\n     emit_insn_before (swap_rtx, insn);\n }\n \f\n+/* Emit an insns before INSN to swap virtual register SRC1 with\n+   the top of stack and virtual register SRC2 with second stack\n+   slot. REGSTACK is the stack state before the swaps, and\n+   is updated to reflect the swaps.  A swap insn is represented as a\n+   PARALLEL of two patterns: each pattern moves one reg to the other.\n+\n+   If SRC1 and/or SRC2 are already at the right place, no swap insn\n+   is emitted.  */\n+\n+static void\n+swap_to_top (rtx insn, stack regstack, rtx src1, rtx src2)\n+{\n+  struct stack_def temp_stack;\n+  int regno, j, k, temp;\n+\n+  temp_stack = *regstack;\n+\n+  /* Place operand 1 at the top of stack.  */\n+  regno = get_hard_regnum (&temp_stack, src1);\n+  if (regno < 0)\n+    abort ();\n+  if (regno != FIRST_STACK_REG)\n+    {\n+      k = temp_stack.top - (regno - FIRST_STACK_REG);\n+      j = temp_stack.top;\n+\n+      temp = temp_stack.reg[k];\n+      temp_stack.reg[k] = temp_stack.reg[j];\n+      temp_stack.reg[j] = temp;\n+    }\n+\n+  /* Place operand 2 next on the stack.  */\n+  regno = get_hard_regnum (&temp_stack, src2);\n+  if (regno < 0)\n+    abort ();\n+  if (regno != FIRST_STACK_REG + 1)\n+    {\n+      k = temp_stack.top - (regno - FIRST_STACK_REG);\n+      j = temp_stack.top - 1;\n+\n+      temp = temp_stack.reg[k];\n+      temp_stack.reg[k] = temp_stack.reg[j];\n+      temp_stack.reg[j] = temp;\n+    }\n+\n+  change_stack (insn, regstack, &temp_stack, EMIT_BEFORE);\n+}\n+\f\n /* Handle a move to or from a stack register in PAT, which is in INSN.\n    REGSTACK is the current stack.  Return whether a control flow insn\n    was deleted in the process.  */\n@@ -1701,7 +1750,6 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \n \t      case UNSPEC_FPATAN:\n \t      case UNSPEC_FYL2X:\n-\t      case UNSPEC_FSCALE:\n \t\t/* These insns operate on the top two stack slots.  */\n \n \t\tsrc1 = get_true_reg (&XVECEXP (pat_src, 0, 0));\n@@ -1710,42 +1758,7 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \t\tsrc1_note = find_regno_note (insn, REG_DEAD, REGNO (*src1));\n \t\tsrc2_note = find_regno_note (insn, REG_DEAD, REGNO (*src2));\n \n-\t\t{\n-\t\t  struct stack_def temp_stack;\n-\t\t  int regno, j, k, temp;\n-\n-\t\t  temp_stack = *regstack;\n-\n-\t\t  /* Place operand 1 at the top of stack.  */\n-\t\t  regno = get_hard_regnum (&temp_stack, *src1);\n-\t\t  if (regno < 0)\n-\t\t    abort ();\n-\t\t  if (regno != FIRST_STACK_REG)\n-\t\t    {\n-\t\t      k = temp_stack.top - (regno - FIRST_STACK_REG);\n-\t\t      j = temp_stack.top;\n-\n-\t\t      temp = temp_stack.reg[k];\n-\t\t      temp_stack.reg[k] = temp_stack.reg[j];\n-\t\t      temp_stack.reg[j] = temp;\n-\t\t    }\n-\n-\t\t  /* Place operand 2 next on the stack.  */\n-\t\t  regno = get_hard_regnum (&temp_stack, *src2);\n-\t\t  if (regno < 0)\n-\t\t    abort ();\n-\t\t  if (regno != FIRST_STACK_REG + 1)\n-\t\t    {\n-\t\t      k = temp_stack.top - (regno - FIRST_STACK_REG);\n-\t\t      j = temp_stack.top - 1;\n-\n-\t\t      temp = temp_stack.reg[k];\n-\t\t      temp_stack.reg[k] = temp_stack.reg[j];\n-\t\t      temp_stack.reg[j] = temp;\n-\t\t    }\n-\n-\t\t  change_stack (insn, regstack, &temp_stack, EMIT_BEFORE);\n-\t\t}\n+\t\tswap_to_top (insn, regstack, *src1, *src2);\n \n \t\treplace_reg (src1, FIRST_STACK_REG);\n \t\treplace_reg (src2, FIRST_STACK_REG + 1);\n@@ -1768,6 +1781,64 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \t\treplace_reg (dest, FIRST_STACK_REG);\n \t\tbreak;\n \n+\t      case UNSPEC_FSCALE_FRACT:\n+\t\t/* These insns operate on the top two stack slots.\n+\t\t   first part of double input, double output insn.  */\n+\n+\t\tsrc1 = get_true_reg (&XVECEXP (pat_src, 0, 0));\n+\t\tsrc2 = get_true_reg (&XVECEXP (pat_src, 0, 1));\n+\n+\t\tsrc1_note = find_regno_note (insn, REG_DEAD, REGNO (*src1));\n+\t\tsrc2_note = find_regno_note (insn, REG_DEAD, REGNO (*src2));\n+\n+\t\t/* Inputs should never die, they are\n+\t\t   replaced with outputs.  */\n+\t\tif ((src1_note) || (src2_note))\n+\t\t  abort();\n+\n+\t\tswap_to_top (insn, regstack, *src1, *src2);\n+\n+\t\t/* Push the result back onto stack. Empty stack slot\n+\t\t   will be filled in second part of insn. */\n+\t\tif (STACK_REG_P (*dest)) {\n+\t\t  regstack->reg[regstack->top] = REGNO (*dest);\n+\t\t  SET_HARD_REG_BIT (regstack->reg_set, REGNO (*dest));\n+\t\t  replace_reg (dest, FIRST_STACK_REG);\n+\t\t}\n+\n+\t\treplace_reg (src1, FIRST_STACK_REG);\n+\t\treplace_reg (src2, FIRST_STACK_REG + 1);\n+\t\tbreak;\n+\n+\t      case UNSPEC_FSCALE_EXP:\n+\t\t/* These insns operate on the top two stack slots./\n+\t\t   second part of double input, double output insn.  */\n+\n+\t\tsrc1 = get_true_reg (&XVECEXP (pat_src, 0, 0));\n+\t\tsrc2 = get_true_reg (&XVECEXP (pat_src, 0, 1));\n+\n+\t\tsrc1_note = find_regno_note (insn, REG_DEAD, REGNO (*src1));\n+\t\tsrc2_note = find_regno_note (insn, REG_DEAD, REGNO (*src2));\n+\n+\t\t/* Inputs should never die, they are\n+\t\t   replaced with outputs.  */\n+\t\tif ((src1_note) || (src2_note))\n+\t\t  abort();\n+\n+\t\tswap_to_top (insn, regstack, *src1, *src2);\n+\n+\t\t/* Push the result back onto stack. Fill empty slot from\n+\t\t   first part of insn and fix top of stack pointer.  */\n+\t\tif (STACK_REG_P (*dest)) {\n+\t\t  regstack->reg[regstack->top - 1] = REGNO (*dest);\n+\t\t  SET_HARD_REG_BIT (regstack->reg_set, REGNO (*dest));\n+\t\t  replace_reg (dest, FIRST_STACK_REG + 1);\n+\t\t}\n+\n+\t\treplace_reg (src1, FIRST_STACK_REG);\n+\t\treplace_reg (src2, FIRST_STACK_REG + 1);\n+\t\tbreak;\n+\n \t      case UNSPEC_SINCOS_COS:\n \t      case UNSPEC_TAN_ONE:\n \t      case UNSPEC_XTRACT_FRACT:"}]}