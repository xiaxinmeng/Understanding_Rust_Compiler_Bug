{"sha": "a8ccdfa8ea6fbdc78bdd5617427d7ba945cc83af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThjY2RmYThlYTZmYmRjNzhiZGQ1NjE3NDI3ZDdiYTk0NWNjODNhZg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-10-03T16:02:38Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-10-03T16:02:38Z"}, "message": "simplify-rtx: Remove non-simplifying simplification (PR77729)\n\nIf we have (X&C1)|C2 simplify_binary_operation_1 makes C1 as small as\npossible.  This makes worse code in common cases like when the AND with\nC1 is from a zero-extension.  This patch fixes it by removing this\ntransformation (twice).\n\n\n\tPR rtl-optimization/77729\n\t* simplify-rtx.c (simplify_binary_operation_1): Delete the (X&C1)|C2\n\tto (X&(C1&~C2))|C2 transformations.\n\nFrom-SVN: r253384", "tree": {"sha": "50f8effb7cc092e35fba1cd02ad40548cf55e31b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50f8effb7cc092e35fba1cd02ad40548cf55e31b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8ccdfa8ea6fbdc78bdd5617427d7ba945cc83af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8ccdfa8ea6fbdc78bdd5617427d7ba945cc83af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8ccdfa8ea6fbdc78bdd5617427d7ba945cc83af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8ccdfa8ea6fbdc78bdd5617427d7ba945cc83af/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c53f040cb3c3bc0b86f702af5bd73d904d6cf0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c53f040cb3c3bc0b86f702af5bd73d904d6cf0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c53f040cb3c3bc0b86f702af5bd73d904d6cf0f"}], "stats": {"total": 31, "additions": 6, "deletions": 25}, "files": [{"sha": "9d43ae54b6988a10cd6c060e0e242d8458b5deb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8ccdfa8ea6fbdc78bdd5617427d7ba945cc83af/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8ccdfa8ea6fbdc78bdd5617427d7ba945cc83af/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8ccdfa8ea6fbdc78bdd5617427d7ba945cc83af", "patch": "@@ -1,3 +1,9 @@\n+2017-10-03  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/77729\n+\t* simplify-rtx.c (simplify_binary_operation_1): Delete the (X&C1)|C2\n+\tto (X&(C1&~C2))|C2 transformations.\n+\n 2017-10-03  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/82363"}, {"sha": "3b6cf6fa850711956fcdef1a2274e95a7e5e4a36", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8ccdfa8ea6fbdc78bdd5617427d7ba945cc83af/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8ccdfa8ea6fbdc78bdd5617427d7ba945cc83af/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=a8ccdfa8ea6fbdc78bdd5617427d7ba945cc83af", "patch": "@@ -2673,14 +2673,6 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \t  /* If (C1|C2) == ~0 then (X&C1)|C2 becomes X|C2.  */\n \t  if (((c1|c2) & mask) == mask)\n \t    return simplify_gen_binary (IOR, mode, XEXP (op0, 0), op1);\n-\n-\t  /* Minimize the number of bits set in C1, i.e. C1 := C1 & ~C2.  */\n-\t  if (((c1 & ~c2) & mask) != (c1 & mask))\n-\t    {\n-\t      tem = simplify_gen_binary (AND, mode, XEXP (op0, 0),\n-\t\t\t\t\t gen_int_mode (c1 & ~c2, mode));\n-\t      return simplify_gen_binary (IOR, mode, tem, op1);\n-\t    }\n \t}\n \n       /* Convert (A & B) | A to A.  */\n@@ -2736,23 +2728,6 @@ simplify_binary_operation_1 (enum rtx_code code, machine_mode mode,\n \treturn gen_rtx_ROTATE (int_mode, XEXP (opright, 0),\n \t\t\t       XEXP (SUBREG_REG (opleft), 1));\n \n-      /* If we have (ior (and (X C1) C2)), simplify this by making\n-\t C1 as small as possible if C1 actually changes.  */\n-      if (CONST_INT_P (op1)\n-\t  && (HWI_COMPUTABLE_MODE_P (mode)\n-\t      || INTVAL (op1) > 0)\n-\t  && GET_CODE (op0) == AND\n-\t  && CONST_INT_P (XEXP (op0, 1))\n-\t  && CONST_INT_P (op1)\n-\t  && (UINTVAL (XEXP (op0, 1)) & UINTVAL (op1)) != 0)\n-\t{\n-\t  rtx tmp = simplify_gen_binary (AND, mode, XEXP (op0, 0),\n-\t\t\t\t\t gen_int_mode (UINTVAL (XEXP (op0, 1))\n-\t\t\t\t\t\t       & ~UINTVAL (op1),\n-\t\t\t\t\t\t       mode));\n-\t  return simplify_gen_binary (IOR, mode, tmp, op1);\n-\t}\n-\n       /* If OP0 is (ashiftrt (plus ...) C), it might actually be\n          a (sign_extend (plus ...)).  Then check if OP1 is a CONST_INT and\n \t the PLUS does not affect any of the bits in OP1: then we can do"}]}