{"sha": "358804e74108b4a22c1b22b872a9866f85078a14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU4ODA0ZTc0MTA4YjRhMjJjMWIyMmI4NzJhOTg2NmY4NTA3OGExNA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-24T15:15:12Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-24T15:15:12Z"}, "message": "tree-ssa-dom.c (cprop_into_successor_phis): Remove code to find the index of a PHI argument.\n\n\t* tree-ssa-dom.c (cprop_into_successor_phis): Remove code to\n\tfind the index of a PHI argument.  Use e->dest_idx instead.\n\tReplace hint with index.\n\nFrom-SVN: r91166", "tree": {"sha": "47962b28bfb768098636006dff42e5c52ac35f5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47962b28bfb768098636006dff42e5c52ac35f5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/358804e74108b4a22c1b22b872a9866f85078a14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/358804e74108b4a22c1b22b872a9866f85078a14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/358804e74108b4a22c1b22b872a9866f85078a14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/358804e74108b4a22c1b22b872a9866f85078a14/comments", "author": null, "committer": null, "parents": [{"sha": "8a7228ee9249a99641a064ae2be3e5afa3590c25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a7228ee9249a99641a064ae2be3e5afa3590c25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a7228ee9249a99641a064ae2be3e5afa3590c25"}], "stats": {"total": 45, "additions": 10, "deletions": 35}, "files": [{"sha": "f6e30d9e339e71e87693d5e652f18aa6e5c003b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/358804e74108b4a22c1b22b872a9866f85078a14/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/358804e74108b4a22c1b22b872a9866f85078a14/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=358804e74108b4a22c1b22b872a9866f85078a14", "patch": "@@ -1,3 +1,9 @@\n+2004-11-23  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-ssa-dom.c (cprop_into_successor_phis): Remove code to\n+\tfind the index of a PHI argument.  Use e->dest_idx instead.\n+\tReplace hint with index.\n+\n 2004-11-24  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-ssa-alias.c (merge_pointed_to_info): Fix comment"}, {"sha": "f257d2d9ce3723c0de1dbb1f83c4efc5c05b4d5c", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 4, "deletions": 35, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/358804e74108b4a22c1b22b872a9866f85078a14/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/358804e74108b4a22c1b22b872a9866f85078a14/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=358804e74108b4a22c1b22b872a9866f85078a14", "patch": "@@ -2290,8 +2290,7 @@ cprop_into_successor_phis (basic_block bb, bitmap nonzero_vars)\n   FOR_EACH_EDGE (e, ei, bb->succs)\n     {\n       tree phi;\n-      int phi_num_args;\n-      int hint;\n+      int index;\n \n       /* If this is an abnormal edge, then we do not want to copy propagate\n \t into the PHI alternative associated with this edge.  */\n@@ -2302,54 +2301,24 @@ cprop_into_successor_phis (basic_block bb, bitmap nonzero_vars)\n       if (! phi)\n \tcontinue;\n \n-      /* There is no guarantee that for any two PHI nodes in a block that\n-\t the phi alternative associated with a particular edge will be\n-\t at the same index in the phi alternative array.\n-\n-\t However, it is very likely they will be the same.  So we keep\n-\t track of the index of the alternative where we found the edge in\n-\t the previous phi node and check that index first in the next\n-\t phi node.  If that hint fails, then we actually search all\n-\t the entries.  */\n-      phi_num_args = PHI_NUM_ARGS (phi);\n-      hint = phi_num_args;\n+      index = e->dest_idx;\n       for ( ; phi; phi = PHI_CHAIN (phi))\n \t{\n-\t  int i;\n \t  tree new;\n \t  use_operand_p orig_p;\n \t  tree orig;\n \n-\t  /* If the hint is valid (!= phi_num_args), see if it points\n-\t     us to the desired phi alternative.  */\n-\t  if (hint != phi_num_args && PHI_ARG_EDGE (phi, hint) == e)\n-\t    ;\n-\t  else\n-\t    {\n-\t      /* The hint was either invalid or did not point to the\n-\t\t correct phi alternative.  Search all the alternatives\n-\t\t for the correct one.  Update the hint.  */\n-\t      for (i = 0; i < phi_num_args; i++)\n-\t\tif (PHI_ARG_EDGE (phi, i) == e)\n-\t\t  break;\n-\t      hint = i;\n-\t    }\n-\n-\t  /* If we did not find the proper alternative, then something is\n-\t     horribly wrong.  */\n-\t  gcc_assert (hint != phi_num_args);\n-\n \t  /* The alternative may be associated with a constant, so verify\n \t     it is an SSA_NAME before doing anything with it.  */\n-\t  orig_p = PHI_ARG_DEF_PTR (phi, hint);\n+\t  orig_p = PHI_ARG_DEF_PTR (phi, index);\n \t  orig = USE_FROM_PTR (orig_p);\n \t  if (TREE_CODE (orig) != SSA_NAME)\n \t    continue;\n \n \t  /* If the alternative is known to have a nonzero value, record\n \t     that fact in the PHI node itself for future use.  */\n \t  if (bitmap_bit_p (nonzero_vars, SSA_NAME_VERSION (orig)))\n-\t    PHI_ARG_NONZERO (phi, hint) = true;\n+\t    PHI_ARG_NONZERO (phi, index) = true;\n \n \t  /* If we have *ORIG_P in our constant/copy table, then replace\n \t     ORIG_P with its value in our constant/copy table.  */"}]}