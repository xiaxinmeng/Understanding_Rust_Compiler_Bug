{"sha": "58e07eaae447b73763ae390a13a613a6b70679ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThlMDdlYWFlNDQ3YjczNzYzYWUzOTBhMTNhNjEzYTZiNzA2NzljZQ==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2020-05-11T14:34:26Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-07T09:26:55Z"}, "message": "[Ada] Checking type invariants on in params of procedures, not functions (AI12-0044)\n\ngcc/ada/\n\n\t* contracts.adb (Add_Invariant_And_Predicate_Checks): Relax the\n\tcondition for doing invariant checks so that in-mode parameters\n\tof procedures are also checked (required by AI05-0289, and\n\trestricted to procedures by AI12-0044). This is done in a\n\tprocedure's nested postconditions procedure.\n\t* exp_ch6.adb (Expand_Actuals): Also perform postcall invariant\n\tchecks for in parameters of procedures (but not functions).\n\tMoved invariant-checking code to end of Expand_Actuals\n\t(including the nested function Is_Public_Subp).", "tree": {"sha": "aead85c6db7ae2183e7a3b9e16c8681f0cc8b627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aead85c6db7ae2183e7a3b9e16c8681f0cc8b627"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58e07eaae447b73763ae390a13a613a6b70679ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58e07eaae447b73763ae390a13a613a6b70679ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58e07eaae447b73763ae390a13a613a6b70679ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58e07eaae447b73763ae390a13a613a6b70679ce/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "845c49360bca4553676d5a33603d5099e7cf6d85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/845c49360bca4553676d5a33603d5099e7cf6d85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/845c49360bca4553676d5a33603d5099e7cf6d85"}], "stats": {"total": 150, "additions": 82, "deletions": 68}, "files": [{"sha": "99313348b27a5c60e9c151e38999e7bcf5c2015b", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e07eaae447b73763ae390a13a613a6b70679ce/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e07eaae447b73763ae390a13a613a6b70679ce/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=58e07eaae447b73763ae390a13a613a6b70679ce", "patch": "@@ -1864,13 +1864,15 @@ package body Contracts is\n             Add_Invariant_Access_Checks (Result);\n          end if;\n \n-         --  Add invariant and predicates for all formals that qualify\n+         --  Add invariant checks for all formals that qualify (see AI05-0289\n+         --  and AI12-0044).\n \n          Formal := First_Formal (Subp_Id);\n          while Present (Formal) loop\n             Typ := Etype (Formal);\n \n             if Ekind (Formal) /= E_In_Parameter\n+              or else Ekind (Subp_Id) = E_Procedure\n               or else Is_Access_Type (Typ)\n             then\n                if Invariant_Checks_OK (Typ) then"}, {"sha": "fb1998377346890bc717af17d83c2dcf227e55b3", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 79, "deletions": 67, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e07eaae447b73763ae390a13a613a6b70679ce/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e07eaae447b73763ae390a13a613a6b70679ce/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=58e07eaae447b73763ae390a13a613a6b70679ce", "patch": "@@ -2461,46 +2461,6 @@ package body Exp_Ch6 is\n                Aund : constant Entity_Id := Underlying_Type (E_Actual);\n                Atyp : Entity_Id;\n \n-               function Is_Public_Subp return Boolean;\n-               --  Check whether the subprogram being called is a visible\n-               --  operation of the type of the actual. Used to determine\n-               --  whether an invariant check must be generated on the\n-               --  caller side.\n-\n-               ---------------------\n-               --  Is_Public_Subp --\n-               ---------------------\n-\n-               function Is_Public_Subp return Boolean is\n-                  Pack      : constant Entity_Id := Scope (Subp);\n-                  Subp_Decl : Node_Id;\n-\n-               begin\n-                  if not Is_Subprogram (Subp) then\n-                     return False;\n-\n-                  --  The operation may be inherited, or a primitive of the\n-                  --  root type.\n-\n-                  elsif\n-                    Nkind_In (Parent (Subp), N_Private_Extension_Declaration,\n-                                             N_Full_Type_Declaration)\n-                  then\n-                     Subp_Decl := Parent (Subp);\n-\n-                  else\n-                     Subp_Decl := Unit_Declaration_Node (Subp);\n-                  end if;\n-\n-                  return Ekind (Pack) = E_Package\n-                    and then\n-                      List_Containing (Subp_Decl) =\n-                        Visible_Declarations\n-                          (Specification (Unit_Declaration_Node (Pack)));\n-               end Is_Public_Subp;\n-\n-            --  Start of processing for By_Ref_Predicate_Check\n-\n             begin\n                if No (Aund) then\n                   Atyp := E_Actual;\n@@ -2518,33 +2478,6 @@ package body Exp_Ch6 is\n                   Append_To (Post_Call,\n                     Make_Predicate_Check (Atyp, Actual));\n                end if;\n-\n-               --  We generated caller-side invariant checks in two cases:\n-\n-               --  a) when calling an inherited operation, where there is an\n-               --  implicit view conversion of the actual to the parent type.\n-\n-               --  b) When the conversion is explicit\n-\n-               --  We treat these cases separately because the required\n-               --  conversion for a) is added later when expanding the call.\n-\n-               if Has_Invariants (Etype (Actual))\n-                  and then\n-                    Nkind (Parent (Subp)) = N_Private_Extension_Declaration\n-               then\n-                  if Comes_From_Source (N) and then Is_Public_Subp then\n-                     Append_To (Post_Call, Make_Invariant_Call (Actual));\n-                  end if;\n-\n-               elsif Nkind (Actual) = N_Type_Conversion\n-                 and then Has_Invariants (Etype (Expression (Actual)))\n-               then\n-                  if Comes_From_Source (N) and then Is_Public_Subp then\n-                     Append_To (Post_Call,\n-                       Make_Invariant_Call (Expression (Actual)));\n-                  end if;\n-               end if;\n             end By_Ref_Predicate_Check;\n \n          --  Processing for IN parameters\n@@ -2629,6 +2562,85 @@ package body Exp_Ch6 is\n             end if;\n          end if;\n \n+         --  Type-invariant checks for in-out and out parameters, as well as\n+         --  for in parameters of procedures (AI05-0289 and AI12-0044).\n+\n+         if Ekind (Formal) /= E_In_Parameter\n+           or else Ekind (Subp) = E_Procedure\n+         then\n+            Caller_Side_Invariant_Checks : declare\n+\n+               function Is_Public_Subp return Boolean;\n+               --  Check whether the subprogram being called is a visible\n+               --  operation of the type of the actual. Used to determine\n+               --  whether an invariant check must be generated on the\n+               --  caller side.\n+\n+               ---------------------\n+               --  Is_Public_Subp --\n+               ---------------------\n+\n+               function Is_Public_Subp return Boolean is\n+                  Pack      : constant Entity_Id := Scope (Subp);\n+                  Subp_Decl : Node_Id;\n+\n+               begin\n+                  if not Is_Subprogram (Subp) then\n+                     return False;\n+\n+                  --  The operation may be inherited, or a primitive of the\n+                  --  root type.\n+\n+                  elsif\n+                    Nkind_In (Parent (Subp), N_Private_Extension_Declaration,\n+                                             N_Full_Type_Declaration)\n+                  then\n+                     Subp_Decl := Parent (Subp);\n+\n+                  else\n+                     Subp_Decl := Unit_Declaration_Node (Subp);\n+                  end if;\n+\n+                  return Ekind (Pack) = E_Package\n+                    and then\n+                      List_Containing (Subp_Decl) =\n+                        Visible_Declarations\n+                          (Specification (Unit_Declaration_Node (Pack)));\n+               end Is_Public_Subp;\n+\n+            --  Start of processing for Caller_Side_Invariant_Checks\n+\n+            begin\n+               --  We generate caller-side invariant checks in two cases:\n+\n+               --  a) when calling an inherited operation, where there is an\n+               --  implicit view conversion of the actual to the parent type.\n+\n+               --  b) When the conversion is explicit\n+\n+               --  We treat these cases separately because the required\n+               --  conversion for a) is added later when expanding the call.\n+\n+               if Has_Invariants (Etype (Actual))\n+                  and then\n+                    Nkind (Parent (Etype (Actual)))\n+                      = N_Private_Extension_Declaration\n+               then\n+                  if Comes_From_Source (N) and then Is_Public_Subp then\n+                     Append_To (Post_Call, Make_Invariant_Call (Actual));\n+                  end if;\n+\n+               elsif Nkind (Actual) = N_Type_Conversion\n+                 and then Has_Invariants (Etype (Expression (Actual)))\n+               then\n+                  if Comes_From_Source (N) and then Is_Public_Subp then\n+                     Append_To\n+                       (Post_Call, Make_Invariant_Call (Expression (Actual)));\n+                  end if;\n+               end if;\n+            end Caller_Side_Invariant_Checks;\n+         end if;\n+\n          Next_Formal (Formal);\n          Next_Actual (Actual);\n       end loop;"}]}