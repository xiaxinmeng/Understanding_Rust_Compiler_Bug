{"sha": "7573521f46427d36a203f72794af7188ce04de88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU3MzUyMWY0NjQyN2QzNmEyMDNmNzI3OTRhZjcxODhjZTA0ZGU4OA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-02-10T16:39:00Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-02-10T16:39:00Z"}, "message": "gcc.target/cris/pr93372-3.c, -4.c...-35.c: New tests.\n\nPR target/93372\n* gcc.target/cris/pr93372-3.c, gcc.target/cris/pr93372-4.c,\ngcc.target/cris/pr93372-6.c, gcc.target/cris/pr93372-7.c,\ngcc.target/cris/pr93372-9.c, gcc.target/cris/pr93372-10.c,\ngcc.target/cris/pr93372-11.c, gcc.target/cris/pr93372-12.c,\ngcc.target/cris/pr93372-13.c, gcc.target/cris/pr93372-14.c,\ngcc.target/cris/pr93372-15.c, gcc.target/cris/pr93372-16.c,\ngcc.target/cris/pr93372-17.c, gcc.target/cris/pr93372-18.c,\ngcc.target/cris/pr93372-19.c, gcc.target/cris/pr93372-20.c,\ngcc.target/cris/pr93372-21.c, gcc.target/cris/pr93372-22.c,\ngcc.target/cris/pr93372-23.c, gcc.target/cris/pr93372-24.c,\ngcc.target/cris/pr93372-25.c, gcc.target/cris/pr93372-26.c,\ngcc.target/cris/pr93372-27.c, gcc.target/cris/pr93372-28.c,\ngcc.target/cris/pr93372-29.c, gcc.target/cris/pr93372-30.c,\ngcc.target/cris/pr93372-31.c, gcc.target/cris/pr93372-32.c,\ngcc.target/cris/pr93372-33.c, gcc.target/cris/pr93372-34.c,\ngcc.target/cris/pr93372-35.c: New tests.\n\nCheck that somewhat-trivially eliminable compare-instructions\nare eliminated, for all instructions.  Note that pr93372-23.c\nand pr93372-24.c are xfailed with cc0.", "tree": {"sha": "e9d873e8774ddf9ecc6a1752afa8bc831996424a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9d873e8774ddf9ecc6a1752afa8bc831996424a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7573521f46427d36a203f72794af7188ce04de88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7573521f46427d36a203f72794af7188ce04de88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7573521f46427d36a203f72794af7188ce04de88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7573521f46427d36a203f72794af7188ce04de88/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "991c1376b8f5a1e40d4a602701b50329cb627853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991c1376b8f5a1e40d4a602701b50329cb627853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/991c1376b8f5a1e40d4a602701b50329cb627853"}], "stats": {"total": 658, "additions": 658, "deletions": 0}, "files": [{"sha": "69c564ff952fa98fae07f389dd3a3271499cbc70", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -2,9 +2,26 @@\n \n \t* gcc.target/cris/cris.exp (check_effective_target_cc0): New.\n \n+\tPR target/93372\n \t* gcc.target/cris/pr93372-1.c: New test.\n \t* gcc.target/cris/pr93372-2.c, gcc.target/cris/pr93372-5.c,\n \tgcc.target/cris/pr93372-8.c: New tests.\n+\t* gcc.target/cris/pr93372-3.c, gcc.target/cris/pr93372-4.c,\n+\tgcc.target/cris/pr93372-6.c, gcc.target/cris/pr93372-7.c,\n+\tgcc.target/cris/pr93372-9.c, gcc.target/cris/pr93372-10.c,\n+\tgcc.target/cris/pr93372-11.c, gcc.target/cris/pr93372-12.c,\n+\tgcc.target/cris/pr93372-13.c, gcc.target/cris/pr93372-14.c,\n+\tgcc.target/cris/pr93372-15.c, gcc.target/cris/pr93372-16.c,\n+\tgcc.target/cris/pr93372-17.c, gcc.target/cris/pr93372-18.c,\n+\tgcc.target/cris/pr93372-19.c, gcc.target/cris/pr93372-20.c,\n+\tgcc.target/cris/pr93372-21.c, gcc.target/cris/pr93372-22.c,\n+\tgcc.target/cris/pr93372-23.c, gcc.target/cris/pr93372-24.c,\n+\tgcc.target/cris/pr93372-25.c, gcc.target/cris/pr93372-26.c,\n+\tgcc.target/cris/pr93372-27.c, gcc.target/cris/pr93372-28.c,\n+\tgcc.target/cris/pr93372-29.c, gcc.target/cris/pr93372-30.c,\n+\tgcc.target/cris/pr93372-31.c, gcc.target/cris/pr93372-32.c,\n+\tgcc.target/cris/pr93372-33.c, gcc.target/cris/pr93372-34.c,\n+\tgcc.target/cris/pr93372-35.c: New tests.\n \n 2020-02-10  Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "76e8fef8d296f3272da226a63f72bf5f42229b3b", "filename": "gcc/testsuite/gcc.target/cris/pr93372-10.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-10.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,9 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"\\tcmp\" 1 } } */\n+/* { dg-final { scan-assembler-not \"\\ttest\" } } */\n+\n+#define t char\n+#include \"pr93372-3.c\"\n+#include \"pr93372-7.c\""}, {"sha": "b5eb5ebb089d67dac3cd029f34a142b163c2cb35", "filename": "gcc/testsuite/gcc.target/cris/pr93372-11.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-11.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,46 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+\n+#ifndef t\n+#define t short int\n+#endif\n+#ifndef t2\n+#define t2 int\n+#endif\n+\n+#define eq_op(x) ((x) == 0)\n+#define ne_op(x) ((x) != 0)\n+#define gt_op(x) ((x) > 0)\n+#define gtu_op(x) ((x) > 0)\n+#define lt_op(x) ((x) < 0)\n+#define ltu_op(x) ((x) < 0)\n+#define ge_op(x) ((x) >= 0)\n+#define geu_op(x) ((x) >= 0)\n+#define le_op(x) ((x) <= 0)\n+#define leu_op(x) ((x) <= 0)\n+\n+#define f(n, T, T2) \\\n+T2 f ## n(T *a, T *b, T2 *d) \\\n+{ \\\n+  T2 c = *a; \\\n+  *d = c; \\\n+  *b = n ## _op (c); \\\n+  return c; \\\n+}\n+\n+f(eq, t, t2)\n+f(ne, t, t2)\n+f(gt, t, t2)\n+f(gtu, unsigned t, unsigned t2)\n+f(lt, t, t2)\n+#if 0\n+f(ltu, unsigned t, unsigned t2)\n+#endif\n+f(ge, t, t2)\n+#if 0\n+f(geu, t, t2)\n+#endif\n+f(le, t, t2)\n+f(leu, t, t2)"}, {"sha": "429e0b849463bea79e7af880fcf2231c73f2d6b7", "filename": "gcc/testsuite/gcc.target/cris/pr93372-12.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-12.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,7 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+\n+#define t char\n+#include \"pr93372-11.c\""}, {"sha": "ff0d0f8a12a6a633ac61ad02d966485726ff8fbd", "filename": "gcc/testsuite/gcc.target/cris/pr93372-13.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-13.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,18 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest|\\tor\" } } */\n+\n+extern void foo(void);\n+\n+void f(long long int a, long long int b)\n+{\n+  if (a + b == 0)\n+    foo();\n+}\n+\n+void g(long long int a, long long int b)\n+{\n+  if (a + b >= 0)\n+    foo();\n+}"}, {"sha": "e0a846ee77badbc2dfa36c89174a82e04a77af47", "filename": "gcc/testsuite/gcc.target/cris/pr93372-14.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-14.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,13 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"\\tcmp|\\ttest\" 2 } } */\n+\n+extern void foo(void);\n+\n+void f(long long int a, long long int b)\n+{\n+  /* Trivial check that we don't eliminate a non-eliminable compare. */\n+  if (a + b <= 0)\n+    foo();\n+}"}, {"sha": "4932762af92f6cf535031e2e3d63d7ccdd7c8274", "filename": "gcc/testsuite/gcc.target/cris/pr93372-15.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-15.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,15 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"\\tcmp|\\ttest\" 1 } } */\n+\n+int f(int a, int b, int *d)\n+{\n+  int c = a + b;\n+\n+  *d = (c == 0);\n+\n+  /* See also pr93372-6.c.  We should get exactly one compare\n+     instruction for this condition. */\n+  return c <= 0;\n+}"}, {"sha": "7e69d862c3f450e24e7bad1738c3e3a8d9b78c50", "filename": "gcc/testsuite/gcc.target/cris/pr93372-16.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-16.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,42 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+\n+#ifndef t\n+#define t short int\n+#endif\n+#ifndef t2\n+#define t2 t\n+#endif\n+#ifndef op\n+#define op +\n+#endif\n+#ifndef do_f\n+#define do_f 1\n+#endif\n+#ifndef do_g\n+#define do_g 1\n+#endif\n+\n+extern void foo(void);\n+\n+#if do_f\n+void f(t a, t b)\n+{\n+  t2 c = a op b;\n+\n+  if (c == 0)\n+    foo();\n+}\n+#endif\n+\n+#if do_g\n+void g(t a, t b)\n+{\n+  t2 c = a op b;\n+\n+  if (c >= 0)\n+    foo();\n+}\n+#endif"}, {"sha": "05b5c31cc455a23213afce7e7d40313ed7906082", "filename": "gcc/testsuite/gcc.target/cris/pr93372-17.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-17.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,7 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+\n+#define t signed char\n+#include \"pr93372-16.c\""}, {"sha": "deb45e4f6ac30f0affd3ef6e4384fb2d8a6c63f6", "filename": "gcc/testsuite/gcc.target/cris/pr93372-18.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-18.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,24 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest|\\tor\" } } */\n+\n+#ifndef t\n+#define t long long\n+#endif\n+#ifndef t2\n+#define t2 t\n+#endif\n+#ifndef op\n+#define op -\n+#endif\n+\n+extern void foo(t2);\n+\n+void g(t a, t b)\n+{\n+  t2 c = a op b;\n+\n+  if (c >= 0)\n+    foo(c);\n+}"}, {"sha": "9a4e117d9b03d580e83f9608d99c1ebe72c3372a", "filename": "gcc/testsuite/gcc.target/cris/pr93372-19.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-19.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,8 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+\n+#define t int\n+#define op -\n+#include \"pr93372-18.c\""}, {"sha": "12870b368076bef281ce55d0ef54f9f6bf30081e", "filename": "gcc/testsuite/gcc.target/cris/pr93372-20.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-20.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-20.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-20.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,8 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+\n+#define t short int\n+#define op -\n+#include \"pr93372-18.c\""}, {"sha": "76845cb1a6ff61a4a97317d762d81e6ecad6dc0d", "filename": "gcc/testsuite/gcc.target/cris/pr93372-21.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-21.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,8 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+\n+#define t signed char\n+#define op -\n+#include \"pr93372-18.c\""}, {"sha": "23b38f6ee6beebb11fdafed0e609d452682e8c64", "filename": "gcc/testsuite/gcc.target/cris/pr93372-22.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-22.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,8 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+\n+#define t int\n+#define op &\n+#include \"pr93372-16.c\""}, {"sha": "fcefc9ab91863307d066125a817c63dfe0875293", "filename": "gcc/testsuite/gcc.target/cris/pr93372-23.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-23.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,21 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+/* For the f2, we want an andq, not and.w. */\n+/* { dg-final { scan-assembler \"\\tandq 20,\" } } */\n+/* { dg-final { scan-assembler-not \"\\tand.w 20,\" } } */\n+/* We don't want a move.w that sets condition codes, but it happens for\n+   cc0, as the \"andq\" that is the last insn before the branch, is for an\n+   alternative that matches -32..31 and thus marked as clobbering\n+   condition codes.  */\n+/* { dg-final { scan-assembler-not \"\\tmove.w\" { xfail cc0 } } } */\n+\n+#define op &\n+#include \"pr93372-16.c\"\n+\n+#undef op\n+#define op & 20 &\n+#define f f2\n+#define g g2\n+#include \"pr93372-16.c\""}, {"sha": "87f10e93c06a6c54b971c2eddda33f895debf947", "filename": "gcc/testsuite/gcc.target/cris/pr93372-24.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-24.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-24.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-24.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,19 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+/* For the f2, we want an andq, not and.b. */\n+/* { dg-final { scan-assembler \"\\tandq 20,\" } } */\n+/* { dg-final { scan-assembler-not \"\\tand.b 20,\" } } */\n+/* See pr93372-23.c regarding the xfail.  */\n+/* { dg-final { scan-assembler-not \"\\tmove.b\" { xfail cc0 } } } */\n+\n+#define op &\n+#define t signed char\n+#include \"pr93372-16.c\"\n+\n+#undef op\n+#define op & 20 &\n+#define f f2\n+#define g g2\n+#include \"pr93372-16.c\""}, {"sha": "448083b75709fb5a7cd9539b4ca0d2e140372c46", "filename": "gcc/testsuite/gcc.target/cris/pr93372-25.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-25.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,8 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+\n+#define t int\n+#define op |\n+#include \"pr93372-16.c\""}, {"sha": "c44c918a841ad0b40c743a2e2e9c3a94e28f62a3", "filename": "gcc/testsuite/gcc.target/cris/pr93372-26.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-26.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,7 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+\n+#define op |\n+#include \"pr93372-16.c\""}, {"sha": "38bfd94798725f0037f1adc217b02a10224c3c7f", "filename": "gcc/testsuite/gcc.target/cris/pr93372-27.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-27.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-27.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-27.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,8 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+\n+#define op |\n+#define t signed char\n+#include \"pr93372-16.c\""}, {"sha": "3d32a7fa90beb411d88963f4fa0fa642db28d545", "filename": "gcc/testsuite/gcc.target/cris/pr93372-28.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-28.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,8 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+\n+#define op ^\n+#define t int\n+#include \"pr93372-18.c\""}, {"sha": "7fb0fe8fb097db034c270b00ade7e2f5dcc0af5d", "filename": "gcc/testsuite/gcc.target/cris/pr93372-29.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-29.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,40 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+\n+#ifndef t\n+#define t int\n+#endif\n+#ifndef t2\n+#define t2 t\n+#endif\n+#ifndef op\n+#define op(x) ~(x)\n+#endif\n+\n+extern void foo(t2);\n+\n+t2 f(t a, t2 *b, t2 *d)\n+{\n+  t2 c = op(a);\n+\n+  *b = c;\n+\n+  if (c != 0)\n+    *d = c;\n+\n+  return c;\n+}\n+\n+t2 g(t a, t2 *b, t2 *d)\n+{\n+  t2 c = op(a);\n+\n+  *b = c;\n+\n+  if (c <= 0)\n+    *d = c;\n+\n+  return c;\n+}"}, {"sha": "c0fbdd83a33a78d58b04293cdd26b1f810afa245", "filename": "gcc/testsuite/gcc.target/cris/pr93372-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-3.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,15 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"\\tcmp\" 1 } } */\n+\n+#ifndef t\n+#define t int\n+#endif\n+\n+int ff(t a, t b, t *d)\n+{\n+  *d = (a == b);\n+\n+  return a > b;\n+}"}, {"sha": "a61e8c42a9ed6fe90f3f9fd1698dae8ef3832fa6", "filename": "gcc/testsuite/gcc.target/cris/pr93372-30.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-30.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,31 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+\n+#define t int\n+#define op >>\n+#define f ashrtf\n+\n+/* If we don't disable g, it will degenerate into a test of the\n+   input. */\n+#define do_g 0\n+\n+#include \"pr93372-16.c\"\n+#undef do_g\n+\n+#undef t\n+#define t unsigned int\n+#undef f\n+#undef g\n+#define f lshrtf\n+#define g lshrtg\n+#include \"pr93372-16.c\"\n+\n+#undef f\n+#undef g\n+#undef op\n+#define op <<\n+#define f shlf\n+#define g shlg\n+#include \"pr93372-16.c\""}, {"sha": "649a90aa55320de3794f14557e8cba2e2dbd52a6", "filename": "gcc/testsuite/gcc.target/cris/pr93372-31.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-31.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-31.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-31.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,33 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { \"*-*-*\" } { \"-march=v0\" } { \"\" } } */\n+/* { dg-options \"-O2\" { target march_option } } */\n+/* { dg-options \"-O2 -march=v10\" { target { ! march_option } } } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+\n+#ifndef t\n+#define t int\n+#endif\n+#ifndef t2\n+#define t2 t\n+#endif\n+#ifndef t3\n+#define t3 t\n+#endif\n+#ifndef op\n+#define op(xx) __builtin_clz(xx)\n+#endif\n+\n+extern t3 x;\n+\n+t2 f(t a, t2 *b, t2 *d)\n+{\n+  t2 c = op(a);\n+\n+  *b = c;\n+\n+  if (c != 0)\n+    *d = c;\n+\n+  return c;\n+}"}, {"sha": "64ab67895340dae70313fb525f5cc25541a8b495", "filename": "gcc/testsuite/gcc.target/cris/pr93372-32.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-32.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,10 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { \"*-*-*\" } { \"-march=*\" } { \"\" } } */\n+/* { dg-options \"-O2 -march=v10\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+/* { dg-final { scan-assembler \"\\tswapwb \" } } */\n+\n+#define op(xx) __builtin_bswap32(xx)\n+\n+#include \"pr93372-31.c\""}, {"sha": "9c7d2ba93c8186cf01da195e55afe26e5eb1bdde", "filename": "gcc/testsuite/gcc.target/cris/pr93372-33.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-33.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-33.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-33.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,10 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+/* { dg-final { scan-assembler \"\\tbound\" } } */\n+\n+#define t unsigned int\n+#define op(xx) ((xx) < x ? (xx) : x)\n+\n+#include \"pr93372-31.c\""}, {"sha": "8bd3b4434acc97d5bee691a66d502ad9c03cb453", "filename": "gcc/testsuite/gcc.target/cris/pr93372-34.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-34.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,45 @@\n+/* Check that btst/btstq other than a field starting at bit 0, is used. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tand\" } } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+/* { dg-final { scan-assembler-times \"\\tbtstq\" 3 } } */\n+/* { dg-final { scan-assembler-times \"\\tbtst \" 3 } } */\n+\n+void foo(void);\n+\n+void f(int *a)\n+{\n+  if ((*a & 32) != 0)\n+    foo();\n+}\n+\n+void g(short int *a)\n+{\n+  if ((*a & 128) == 0)\n+    foo();\n+}\n+\n+void h(char *a)\n+{\n+  if ((*a & 64) != 0)\n+    foo();\n+}\n+\n+void i(int *a, unsigned int n)\n+{\n+  if ((*a & (1 << n)) != 0)\n+    foo();\n+}\n+\n+void j(short int *a, unsigned int n)\n+{\n+  if ((*a & (1 << n)) == 0)\n+    foo();\n+}\n+\n+void k(char *a, unsigned int n)\n+{\n+  if ((*a & (1 << n)) != 0)\n+    foo();\n+}"}, {"sha": "4e364972033f40b5c36cb0aa56f798c02a37bc31", "filename": "gcc/testsuite/gcc.target/cris/pr93372-35.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-35.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,49 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+/* { dg-final { scan-assembler \"\\tneg\" } } */\n+\n+void foo(void);\n+\n+#ifndef op\n+#define op(x) -(x)\n+#endif\n+\n+#define f(k, T, T2)\t\t\t\t\\\n+void f ## k (T *a, T2 *b)\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  T2 d = op(*a);\t\t\t\t\\\n+  *b = d;\t\t\t\t\t\\\n+  if (d != 0)\t\t\t\t\t\\\n+    foo();\t\t\t\t\t\\\n+}\n+\n+#define ff(x, y) f(x, y, y)\n+\n+/* For NEG, gcc prefers to test the source (before the operation), but\n+   will settle for the destination.  For SImode, the destination is\n+   allocated to a different register than the source.  Not that\n+   important; just skip the \"int\" variant for now.  */\n+#ifndef do_1\n+#define do_1 0\n+#endif\n+\n+#ifndef do_2\n+#define do_2 1\n+#endif\n+#ifndef do_3\n+#define do_3 1\n+#endif\n+\n+#if do_1\n+ff(1, int)\n+#endif\n+\n+#if do_2\n+ff(2, short int)\n+#endif\n+\n+#if do_3\n+ff(3, signed char)\n+#endif"}, {"sha": "e9faf9ff869b79380ec14d732106434a7c36ce8c", "filename": "gcc/testsuite/gcc.target/cris/pr93372-4.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-4.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,12 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+\n+int f(int a, int *b)\n+{\n+  /* As seen in powisf2, the result of a shift is checked for zeroness. */\n+  int c = a >> 1;\n+  *b = (c == 0);\n+  return c;\n+}"}, {"sha": "69ae55ccbfd2500e95caa87b05b852e01c5adb43", "filename": "gcc/testsuite/gcc.target/cris/pr93372-6.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-6.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,18 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+/* { dg-final { scan-assembler \"\\tlsr|\\tsmi\" } } */\n+\n+/* Regarding the \"lsr\", see pr93372-2.c; we get a shift for the\n+   sign-bit.  For \"<\", that's equally optimal to smi; we just want this\n+   test to be different with the \"<\" instead of \">=\".  */\n+\n+int f(int a, int b, int *d)\n+{\n+  int c = a + b;\n+\n+  *d = (c == 0);\n+\n+  return c < 0;\n+}"}, {"sha": "fb22b20d9deed03507c225f8a30d2ff61c6a3f22", "filename": "gcc/testsuite/gcc.target/cris/pr93372-7.c", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-7.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,85 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not \"\\tcmp|\\ttest\" } } */\n+\n+#ifndef t\n+#define t int\n+#endif\n+\n+t feq(t *a, t *b)\n+{\n+  t c = *a;\n+  *b = c == 0;\n+  return c;\n+}\n+\n+t fne(t *a, t *b)\n+{\n+  t c = *a;\n+  *b = c != 0;\n+  return c;\n+}\n+\n+t fgt(t *a, t *b)\n+{\n+  t c = *a;\n+  *b = c > 0;\n+  return c;\n+}\n+\n+unsigned t fgtu(unsigned t *a, unsigned t *b)\n+{\n+  unsigned t c = *a;\n+  *b = c > 0;\n+  return c;\n+}\n+\n+t flt(t *a, t *b)\n+{\n+  t c = *a;\n+  *b = c < 0;\n+  return c;\n+}\n+\n+#if 0\n+/* Always false... */\n+unsigned t fltu(unsigned t *a, unsigned t *b)\n+{\n+  unsigned t c = *a;\n+  *b = c < 0;\n+  return c;\n+}\n+#endif\n+\n+t fge(t *a, t *b)\n+{\n+  t c = *a;\n+  *b = c >= 0;\n+  return c;\n+}\n+\n+#if 0\n+/* Always true... */\n+unsigned t fgeu(unsigned t *a, unsigned t *b)\n+{\n+  unsigned t c = *a;\n+  *b = c > 0;\n+  return c;\n+}\n+#endif\n+\n+t fle(t *a, t *b)\n+{\n+  t c = *a;\n+  *b = c <= 0;\n+  return c;\n+}\n+\n+/* Same as eq... */\n+unsigned t fleu(unsigned t *a, unsigned t *b)\n+{\n+  unsigned t c = *a;\n+  *b = c <= 0;\n+  return c;\n+}"}, {"sha": "9a11b8c063cdbbab417a963e1cd21d3bf338c440", "filename": "gcc/testsuite/gcc.target/cris/pr93372-9.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7573521f46427d36a203f72794af7188ce04de88/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fcris%2Fpr93372-9.c?ref=7573521f46427d36a203f72794af7188ce04de88", "patch": "@@ -0,0 +1,9 @@\n+/* Check that eliminable compare-instructions are eliminated. */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"\\tcmp\" 1 } } */\n+/* { dg-final { scan-assembler-not \"\\ttest\" } } */\n+\n+#define t short int\n+#include \"pr93372-3.c\"\n+#include \"pr93372-7.c\""}]}