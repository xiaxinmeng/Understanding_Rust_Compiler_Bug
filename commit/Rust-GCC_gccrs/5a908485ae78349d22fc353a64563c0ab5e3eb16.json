{"sha": "5a908485ae78349d22fc353a64563c0ab5e3eb16", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE5MDg0ODVhZTc4MzQ5ZDIyZmMzNTNhNjQ1NjNjMGFiNWUzZWIxNg==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-07-04T15:56:27Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-07-04T15:56:27Z"}, "message": "[Patch AArch64_be] Fix some vec_concat big-endian confusions\n\n\t* config/aarch64/aarch64-simd.md (move_lo_quad_internal_<mode>): New.\n\t(move_lo_quad_internal_be_<mode>): Likewise.\n\t(move_lo_quad_<mode>): Convert to define_expand.\n\t(aarch64_simd_move_hi_quad_<mode>): Gate on BYTES_BIG_ENDIAN.\n\t(aarch64_simd_move_hi_quad_be_<mode>): New.\n\t(move_hi_quad_<mode>): Use appropriate insn for BYTES_BIG_ENDIAN.\n\t(aarch64_combinez<mode>): Gate on BYTES_BIG_ENDIAN.\n\t(aarch64_combinez_be<mode>): New.\n\t(aarch64_combine<mode>): Convert to define_expand.\n\t(aarch64_combine_internal<mode>): New.\n \t(aarch64_simd_combine<mode>): Remove bogus RTL description.\n\nFrom-SVN: r212298", "tree": {"sha": "a9a2e096fdd51fc8ad795c1d2280964e25db9e3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9a2e096fdd51fc8ad795c1d2280964e25db9e3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a908485ae78349d22fc353a64563c0ab5e3eb16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a908485ae78349d22fc353a64563c0ab5e3eb16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a908485ae78349d22fc353a64563c0ab5e3eb16", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a908485ae78349d22fc353a64563c0ab5e3eb16/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "34386e79b36040307ba65076cc09cb65ccfe1d66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34386e79b36040307ba65076cc09cb65ccfe1d66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34386e79b36040307ba65076cc09cb65ccfe1d66"}], "stats": {"total": 138, "additions": 122, "deletions": 16}, "files": [{"sha": "c93920b0c10b71372d56d81ad5d716105d7de671", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a908485ae78349d22fc353a64563c0ab5e3eb16/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a908485ae78349d22fc353a64563c0ab5e3eb16/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a908485ae78349d22fc353a64563c0ab5e3eb16", "patch": "@@ -1,3 +1,17 @@\n+2014-07-04  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (move_lo_quad_internal_<mode>): New.\n+\t(move_lo_quad_internal_be_<mode>): Likewise.\n+\t(move_lo_quad_<mode>): Convert to define_expand.\n+\t(aarch64_simd_move_hi_quad_<mode>): Gate on BYTES_BIG_ENDIAN.\n+\t(aarch64_simd_move_hi_quad_be_<mode>): New.\n+\t(move_hi_quad_<mode>): Use appropriate insn for BYTES_BIG_ENDIAN.\n+\t(aarch64_combinez<mode>): Gate on BYTES_BIG_ENDIAN.\n+\t(aarch64_combinez_be<mode>): New.\n+\t(aarch64_combine<mode>): Convert to define_expand.\n+\t(aarch64_combine_internal<mode>): New.\n+\t(aarch64_simd_combine<mode>): Remove bogus RTL description.\n+\n 2014-07-04  Tom de Vries  <tom@codesourcery.com>\n \n \t* doc/md.texi (@subsection Constraint Modifier Characters): Clarify"}, {"sha": "6300b9b6c7ac06384d2e59bbac1a0d5445975bb6", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 108, "deletions": 16, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a908485ae78349d22fc353a64563c0ab5e3eb16/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a908485ae78349d22fc353a64563c0ab5e3eb16/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=5a908485ae78349d22fc353a64563c0ab5e3eb16", "patch": "@@ -942,14 +942,22 @@\n   [(set_attr \"type\" \"neon_minmax<q>\")]\n )\n \n-;; Move into low-half clearing high half to 0.\n+;; vec_concat gives a new vector with the low elements from operand 1, and\n+;; the high elements from operand 2.  That is to say, given op1 = { a, b }\n+;; op2 = { c, d }, vec_concat (op1, op2) = { a, b, c, d }.\n+;; What that means, is that the RTL descriptions of the below patterns\n+;; need to change depending on endianness.\n \n-(define_insn \"move_lo_quad_<mode>\"\n+;; Move to the low architectural bits of the register.\n+;; On little-endian this is { operand, zeroes }\n+;; On big-endian this is { zeroes, operand }\n+\n+(define_insn \"move_lo_quad_internal_<mode>\"\n   [(set (match_operand:VQ 0 \"register_operand\" \"=w,w,w\")\n         (vec_concat:VQ\n \t  (match_operand:<VHALF> 1 \"register_operand\" \"w,r,r\")\n \t  (vec_duplicate:<VHALF> (const_int 0))))]\n-  \"TARGET_SIMD\"\n+  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n   \"@\n    dup\\\\t%d0, %1.d[0]\n    fmov\\\\t%d0, %1\n@@ -960,7 +968,39 @@\n    (set_attr \"length\" \"4\")]\n )\n \n-;; Move into high-half.\n+(define_insn \"move_lo_quad_internal_be_<mode>\"\n+  [(set (match_operand:VQ 0 \"register_operand\" \"=w,w,w\")\n+        (vec_concat:VQ\n+\t  (vec_duplicate:<VHALF> (const_int 0))\n+\t  (match_operand:<VHALF> 1 \"register_operand\" \"w,r,r\")))]\n+  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+  \"@\n+   dup\\\\t%d0, %1.d[0]\n+   fmov\\\\t%d0, %1\n+   dup\\\\t%d0, %1\"\n+  [(set_attr \"type\" \"neon_dup<q>,f_mcr,neon_dup<q>\")\n+   (set_attr \"simd\" \"yes,*,yes\")\n+   (set_attr \"fp\" \"*,yes,*\")\n+   (set_attr \"length\" \"4\")]\n+)\n+\n+(define_expand \"move_lo_quad_<mode>\"\n+  [(match_operand:VQ 0 \"register_operand\")\n+   (match_operand:VQ 1 \"register_operand\")]\n+  \"TARGET_SIMD\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_move_lo_quad_internal_be_<mode> (operands[0], operands[1]));\n+  else\n+    emit_insn (gen_move_lo_quad_internal_<mode> (operands[0], operands[1]));\n+  DONE;\n+}\n+)\n+\n+;; Move operand1 to the high architectural bits of the register, keeping\n+;; the low architectural bits of operand2.\n+;; For little-endian this is { operand2, operand1 }\n+;; For big-endian this is { operand1, operand2 }\n \n (define_insn \"aarch64_simd_move_hi_quad_<mode>\"\n   [(set (match_operand:VQ 0 \"register_operand\" \"+w,w\")\n@@ -969,22 +1009,39 @@\n                 (match_dup 0)\n                 (match_operand:VQ 2 \"vect_par_cnst_lo_half\" \"\"))\n \t  (match_operand:<VHALF> 1 \"register_operand\" \"w,r\")))]\n-  \"TARGET_SIMD\"\n+  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n   \"@\n    ins\\\\t%0.d[1], %1.d[0]\n    ins\\\\t%0.d[1], %1\"\n-  [(set_attr \"type\" \"neon_ins\")\n-   (set_attr \"length\" \"4\")]\n+  [(set_attr \"type\" \"neon_ins\")]\n+)\n+\n+(define_insn \"aarch64_simd_move_hi_quad_be_<mode>\"\n+  [(set (match_operand:VQ 0 \"register_operand\" \"+w,w\")\n+        (vec_concat:VQ\n+\t  (match_operand:<VHALF> 1 \"register_operand\" \"w,r\")\n+          (vec_select:<VHALF>\n+                (match_dup 0)\n+                (match_operand:VQ 2 \"vect_par_cnst_hi_half\" \"\"))))]\n+  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+  \"@\n+   ins\\\\t%0.d[1], %1.d[0]\n+   ins\\\\t%0.d[1], %1\"\n+  [(set_attr \"type\" \"neon_ins\")]\n )\n \n (define_expand \"move_hi_quad_<mode>\"\n  [(match_operand:VQ 0 \"register_operand\" \"\")\n   (match_operand:<VHALF> 1 \"register_operand\" \"\")]\n  \"TARGET_SIMD\"\n {\n-  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, false);\n-  emit_insn (gen_aarch64_simd_move_hi_quad_<mode> (operands[0],\n-\t\t\t\t\t\t   operands[1], p));\n+  rtx p = aarch64_simd_vect_par_cnst_half (<MODE>mode, BYTES_BIG_ENDIAN);\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_aarch64_simd_move_hi_quad_be_<mode> (operands[0],\n+\t\t    operands[1], p));\n+  else\n+    emit_insn (gen_aarch64_simd_move_hi_quad_<mode> (operands[0],\n+\t\t    operands[1], p));\n   DONE;\n })\n \n@@ -2338,12 +2395,44 @@\n         (vec_concat:<VDBL>\n \t   (match_operand:VDIC 1 \"register_operand\" \"w\")\n \t   (match_operand:VDIC 2 \"aarch64_simd_imm_zero\" \"Dz\")))]\n-  \"TARGET_SIMD\"\n+  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n   \"mov\\\\t%0.8b, %1.8b\"\n   [(set_attr \"type\" \"neon_move<q>\")]\n )\n \n-(define_insn_and_split \"aarch64_combine<mode>\"\n+(define_insn \"*aarch64_combinez_be<mode>\"\n+  [(set (match_operand:<VDBL> 0 \"register_operand\" \"=&w\")\n+        (vec_concat:<VDBL>\n+\t   (match_operand:VDIC 2 \"aarch64_simd_imm_zero\" \"Dz\")\n+\t   (match_operand:VDIC 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+  \"mov\\\\t%0.8b, %1.8b\"\n+  [(set_attr \"type\" \"neon_move<q>\")]\n+)\n+\n+(define_expand \"aarch64_combine<mode>\"\n+  [(match_operand:<VDBL> 0 \"register_operand\")\n+   (match_operand:VDC 1 \"register_operand\")\n+   (match_operand:VDC 2 \"register_operand\")]\n+  \"TARGET_SIMD\"\n+{\n+  rtx op1, op2;\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      op1 = operands[2];\n+      op2 = operands[1];\n+    }\n+  else\n+    {\n+      op1 = operands[1];\n+      op2 = operands[2];\n+    }\n+  emit_insn (gen_aarch64_combine_internal<mode> (operands[0], op1, op2));\n+  DONE;\n+}\n+)\n+\n+(define_insn_and_split \"aarch64_combine_internal<mode>\"\n   [(set (match_operand:<VDBL> 0 \"register_operand\" \"=&w\")\n         (vec_concat:<VDBL> (match_operand:VDC 1 \"register_operand\" \"w\")\n \t\t\t   (match_operand:VDC 2 \"register_operand\" \"w\")))]\n@@ -2352,16 +2441,19 @@\n   \"&& reload_completed\"\n   [(const_int 0)]\n {\n-  aarch64_split_simd_combine (operands[0], operands[1], operands[2]);\n+  if (BYTES_BIG_ENDIAN)\n+    aarch64_split_simd_combine (operands[0], operands[2], operands[1]);\n+  else\n+    aarch64_split_simd_combine (operands[0], operands[1], operands[2]);\n   DONE;\n }\n [(set_attr \"type\" \"multiple\")]\n )\n \n (define_expand \"aarch64_simd_combine<mode>\"\n-  [(set (match_operand:<VDBL> 0 \"register_operand\" \"=&w\")\n-        (vec_concat:<VDBL> (match_operand:VDC 1 \"register_operand\" \"w\")\n-  (match_operand:VDC 2 \"register_operand\" \"w\")))]\n+  [(match_operand:<VDBL> 0 \"register_operand\")\n+   (match_operand:VDC 1 \"register_operand\")\n+   (match_operand:VDC 2 \"register_operand\")]\n   \"TARGET_SIMD\"\n   {\n     emit_insn (gen_move_lo_quad_<Vdbl> (operands[0], operands[1]));"}]}