{"sha": "2f5030259ccb5944c83dfd4c10306ae1844bec38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY1MDMwMjU5Y2NiNTk0NGM4M2RmZDRjMTAzMDZhZTE4NDRiZWMzOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-08-20T19:27:49Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-08-20T19:27:49Z"}, "message": "builtins.c (expand_builtin_mathfn): Use get_callee_fndecl.\n\n        * builtins.c (expand_builtin_mathfn): Use get_callee_fndecl.\n        (expand_builtin_mathfn2, expand_builtin, builtin_mathfn_code,\n        fold_trunc_transparent_mathfn, fold_builtin): Likewise.\n        * dojump.c (do_jump): Likewise.\n        * fold-const.c (operand_equal_p, fold): Likewise.\n        (tree_expr_nonnegative_p): Likewise.\n\nFrom-SVN: r70611", "tree": {"sha": "5818d3a73137a0b34a7c1c1e65be34505d270b05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5818d3a73137a0b34a7c1c1e65be34505d270b05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f5030259ccb5944c83dfd4c10306ae1844bec38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f5030259ccb5944c83dfd4c10306ae1844bec38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f5030259ccb5944c83dfd4c10306ae1844bec38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f5030259ccb5944c83dfd4c10306ae1844bec38/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "47d4c811980d2793dc7502bd3949de2bac374304", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d4c811980d2793dc7502bd3949de2bac374304", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47d4c811980d2793dc7502bd3949de2bac374304"}], "stats": {"total": 184, "additions": 93, "deletions": 91}, "files": [{"sha": "9e026a1489c35201848b95795b6a8bae0c690d6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5030259ccb5944c83dfd4c10306ae1844bec38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5030259ccb5944c83dfd4c10306ae1844bec38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f5030259ccb5944c83dfd4c10306ae1844bec38", "patch": "@@ -1,5 +1,12 @@\n 2003-08-20  Jason Merrill  <jason@redhat.com>\n \n+\t* builtins.c (expand_builtin_mathfn): Use get_callee_fndecl.\n+\t(expand_builtin_mathfn2, expand_builtin, builtin_mathfn_code, \n+\tfold_trunc_transparent_mathfn, fold_builtin): Likewise.\n+\t* dojump.c (do_jump): Likewise.\n+\t* fold-const.c (operand_equal_p, fold): Likewise.\n+\t(tree_expr_nonnegative_p): Likewise.\n+\n \t* stor-layout.c (do_type_align): Only copy DECL_USER_ALIGN from\n \tTYPE_USER_ALIGN for FIELD_DECLs.\n \t"}, {"sha": "10e9a2cb5ebf348a9883c3d0102eb0ee321c241d", "filename": "gcc/builtins.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5030259ccb5944c83dfd4c10306ae1844bec38/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5030259ccb5944c83dfd4c10306ae1844bec38/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=2f5030259ccb5944c83dfd4c10306ae1844bec38", "patch": "@@ -1566,7 +1566,7 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n {\n   optab builtin_optab;\n   rtx op0, insns;\n-  tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n+  tree fndecl = get_callee_fndecl (exp);\n   tree arglist = TREE_OPERAND (exp, 1);\n   enum machine_mode mode;\n   bool errno_set = false;\n@@ -1695,7 +1695,7 @@ expand_builtin_mathfn_2 (tree exp, rtx target, rtx subtarget)\n {\n   optab builtin_optab;\n   rtx op0, op1, insns;\n-  tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n+  tree fndecl = get_callee_fndecl (exp);\n   tree arglist = TREE_OPERAND (exp, 1);\n   tree arg0, arg1, temp, narg;\n   enum machine_mode mode;\n@@ -4756,7 +4756,7 @@ rtx\n expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \t\tint ignore)\n {\n-  tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n+  tree fndecl = get_callee_fndecl (exp);\n   tree arglist = TREE_OPERAND (exp, 1);\n   enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n   enum machine_mode target_mode = TYPE_MODE (TREE_TYPE (exp));\n@@ -5301,8 +5301,8 @@ builtin_mathfn_code (tree t)\n       || TREE_CODE (TREE_OPERAND (t, 0)) != ADDR_EXPR)\n     return END_BUILTINS;\n \n-  fndecl = TREE_OPERAND (TREE_OPERAND (t, 0), 0);\n-  if (TREE_CODE (fndecl) != FUNCTION_DECL\n+  fndecl = get_callee_fndecl (t);\n+  if (fndecl == NULL_TREE\n       || ! DECL_BUILT_IN (fndecl)\n       || DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n     return END_BUILTINS;\n@@ -5513,7 +5513,7 @@ integer_valued_real_p (tree t)\n static tree\n fold_trunc_transparent_mathfn (tree exp)\n {\n-  tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n+  tree fndecl = get_callee_fndecl (exp);\n   tree arglist = TREE_OPERAND (exp, 1);\n   enum built_in_function fcode = DECL_FUNCTION_CODE (fndecl);\n   tree arg;\n@@ -5732,7 +5732,7 @@ fold_builtin_ceil (tree exp)\n tree\n fold_builtin (tree exp)\n {\n-  tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n+  tree fndecl = get_callee_fndecl (exp);\n   tree arglist = TREE_OPERAND (exp, 1);\n   tree type = TREE_TYPE (TREE_TYPE (fndecl));\n "}, {"sha": "2ed014bacf93b687cc4ac6d3115393147f0df18b", "filename": "gcc/dojump.c", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5030259ccb5944c83dfd4c10306ae1844bec38/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5030259ccb5944c83dfd4c10306ae1844bec38/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=2f5030259ccb5944c83dfd4c10306ae1844bec38", "patch": "@@ -530,27 +530,26 @@ do_jump (tree exp, rtx if_false_label, rtx if_true_label)\n          operation produced a 1 or 0.  */\n     case CALL_EXPR:\n       /* Check for a built-in function.  */\n-      if (TREE_CODE (TREE_OPERAND (exp, 0)) == ADDR_EXPR)\n-        {\n-          tree fndecl = TREE_OPERAND (TREE_OPERAND (exp, 0), 0);\n-          tree arglist = TREE_OPERAND (exp, 1);\n-\n-      if (TREE_CODE (fndecl) == FUNCTION_DECL\n-          && DECL_BUILT_IN (fndecl)\n-          && DECL_FUNCTION_CODE (fndecl) == BUILT_IN_EXPECT\n-          && arglist != NULL_TREE\n-          && TREE_CHAIN (arglist) != NULL_TREE)\n-        {\n-          rtx seq = expand_builtin_expect_jump (exp, if_false_label,\n-                                                if_true_label);\n-\n-          if (seq != NULL_RTX)\n-            {\n-              emit_insn (seq);\n-              return;\n-            }\n-        }\n-    }\n+      {\n+\ttree fndecl = get_callee_fndecl (exp);\n+\ttree arglist = TREE_OPERAND (exp, 1);\n+\n+\tif (fndecl\n+\t    && DECL_BUILT_IN (fndecl)\n+\t    && DECL_FUNCTION_CODE (fndecl) == BUILT_IN_EXPECT\n+\t    && arglist != NULL_TREE\n+\t    && TREE_CHAIN (arglist) != NULL_TREE)\n+\t  {\n+\t    rtx seq = expand_builtin_expect_jump (exp, if_false_label,\n+\t\t\t\t\t\t  if_true_label);\n+\n+\t    if (seq != NULL_RTX)\n+\t      {\n+\t\temit_insn (seq);\n+\t\treturn;\n+\t      }\n+\t  }\n+      }\n       /* Fall through and generate the normal code.  */\n \n     default:"}, {"sha": "488239d75cb5cc81fc60f54a1eff79b4ba1937b4", "filename": "gcc/fold-const.c", "status": "modified", "additions": 59, "deletions": 63, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5030259ccb5944c83dfd4c10306ae1844bec38/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5030259ccb5944c83dfd4c10306ae1844bec38/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=2f5030259ccb5944c83dfd4c10306ae1844bec38", "patch": "@@ -1837,6 +1837,8 @@ truth_value_p (enum tree_code code)\n int\n operand_equal_p (tree arg0, tree arg1, int only_const)\n {\n+  tree fndecl;\n+\n   /* If both types don't have the same signedness, then we can't consider\n      them equal.  We must check this before the STRIP_NOPS calls\n      because they may change the signedness of the arguments.  */\n@@ -2007,13 +2009,9 @@ operand_equal_p (tree arg0, tree arg1, int only_const)\n \t    return 0;\n \n \t  /* Only consider const functions equivalent.  */\n-\t  if (TREE_CODE (TREE_OPERAND (arg0, 0)) == ADDR_EXPR)\n-\t    {\n-\t      tree fndecl = TREE_OPERAND (TREE_OPERAND (arg0, 0), 0);\n-\t      if (! (flags_from_decl_or_type (fndecl) & ECF_CONST))\n-\t\treturn 0;\n-\t    }\n-\t  else\n+\t  fndecl = get_callee_fndecl (arg0);\n+\t  if (fndecl == NULL_TREE\n+\t      || ! (flags_from_decl_or_type (fndecl) & ECF_CONST))\n \t    return 0;\n \n \t  /* Now see if all the arguments are the same.  operand_equal_p\n@@ -5481,7 +5479,7 @@ fold (tree expr)\n \t    {\n \t      tree fndecl, arg, arglist;\n \n-\t      fndecl = TREE_OPERAND (TREE_OPERAND (arg0, 0), 0);\n+\t      fndecl = get_callee_fndecl (arg0);\n \t      arg = TREE_VALUE (TREE_OPERAND (arg0, 1));\n \t      arg = fold (build1 (NEGATE_EXPR, type, arg));\n \t      arglist = build_tree_list (NULL_TREE, arg);\n@@ -7622,13 +7620,12 @@ fold (tree expr)\n \t due to the return value of strlen being unsigned.  */\n       if ((code == EQ_EXPR || code == NE_EXPR)\n \t  && integer_zerop (arg1)\n-\t  && TREE_CODE (arg0) == CALL_EXPR\n-\t  && TREE_CODE (TREE_OPERAND (arg0, 0)) == ADDR_EXPR)\n+\t  && TREE_CODE (arg0) == CALL_EXPR)\n \t{\n-\t  tree fndecl = TREE_OPERAND (TREE_OPERAND (arg0, 0), 0);\n+\t  tree fndecl = get_callee_fndecl (arg0);\n \t  tree arglist;\n \n-\t  if (TREE_CODE (fndecl) == FUNCTION_DECL\n+\t  if (fndecl\n \t      && DECL_BUILT_IN (fndecl)\n \t      && DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_MD\n \t      && DECL_FUNCTION_CODE (fndecl) == BUILT_IN_STRLEN\n@@ -8637,58 +8634,57 @@ tree_expr_nonnegative_p (tree t)\n       return rtl_expr_nonnegative_p (RTL_EXPR_RTL (t));\n \n     case CALL_EXPR:\n-      if (TREE_CODE (TREE_OPERAND (t, 0)) == ADDR_EXPR)\n-\t{\n-\t  tree fndecl = TREE_OPERAND (TREE_OPERAND (t, 0), 0);\n-\t  tree arglist = TREE_OPERAND (t, 1);\n-\t  if (TREE_CODE (fndecl) == FUNCTION_DECL\n-\t      && DECL_BUILT_IN (fndecl)\n-\t      && DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_MD)\n-\t    switch (DECL_FUNCTION_CODE (fndecl))\n-\t      {\n-\t      case BUILT_IN_CABS:\n-\t      case BUILT_IN_CABSL:\n-\t      case BUILT_IN_CABSF:\n-\t      case BUILT_IN_EXP:\n-\t      case BUILT_IN_EXPF:\n-\t      case BUILT_IN_EXPL:\n-\t      case BUILT_IN_FABS:\n-\t      case BUILT_IN_FABSF:\n-\t      case BUILT_IN_FABSL:\n-\t      case BUILT_IN_SQRT:\n-\t      case BUILT_IN_SQRTF:\n-\t      case BUILT_IN_SQRTL:\n-\t\treturn 1;\n-\n-\t      case BUILT_IN_ATAN:\n-\t      case BUILT_IN_ATANF:\n-\t      case BUILT_IN_ATANL:\n-\t      case BUILT_IN_CEIL:\n-\t      case BUILT_IN_CEILF:\n-\t      case BUILT_IN_CEILL:\n-\t      case BUILT_IN_FLOOR:\n-\t      case BUILT_IN_FLOORF:\n-\t      case BUILT_IN_FLOORL:\n-\t      case BUILT_IN_NEARBYINT:\n-\t      case BUILT_IN_NEARBYINTF:\n-\t      case BUILT_IN_NEARBYINTL:\n-\t      case BUILT_IN_ROUND:\n-\t      case BUILT_IN_ROUNDF:\n-\t      case BUILT_IN_ROUNDL:\n-\t      case BUILT_IN_TRUNC:\n-\t      case BUILT_IN_TRUNCF:\n-\t      case BUILT_IN_TRUNCL:\n-\t\treturn tree_expr_nonnegative_p (TREE_VALUE (arglist));\n-\n-\t      case BUILT_IN_POW:\n-\t      case BUILT_IN_POWF:\n-\t      case BUILT_IN_POWL:\n-\t\treturn tree_expr_nonnegative_p (TREE_VALUE (arglist));\n+      {\n+\ttree fndecl = get_callee_fndecl (t);\n+\ttree arglist = TREE_OPERAND (t, 1);\n+\tif (fndecl\n+\t    && DECL_BUILT_IN (fndecl)\n+\t    && DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_MD)\n+\t  switch (DECL_FUNCTION_CODE (fndecl))\n+\t    {\n+\t    case BUILT_IN_CABS:\n+\t    case BUILT_IN_CABSL:\n+\t    case BUILT_IN_CABSF:\n+\t    case BUILT_IN_EXP:\n+\t    case BUILT_IN_EXPF:\n+\t    case BUILT_IN_EXPL:\n+\t    case BUILT_IN_FABS:\n+\t    case BUILT_IN_FABSF:\n+\t    case BUILT_IN_FABSL:\n+\t    case BUILT_IN_SQRT:\n+\t    case BUILT_IN_SQRTF:\n+\t    case BUILT_IN_SQRTL:\n+\t      return 1;\n+\n+\t    case BUILT_IN_ATAN:\n+\t    case BUILT_IN_ATANF:\n+\t    case BUILT_IN_ATANL:\n+\t    case BUILT_IN_CEIL:\n+\t    case BUILT_IN_CEILF:\n+\t    case BUILT_IN_CEILL:\n+\t    case BUILT_IN_FLOOR:\n+\t    case BUILT_IN_FLOORF:\n+\t    case BUILT_IN_FLOORL:\n+\t    case BUILT_IN_NEARBYINT:\n+\t    case BUILT_IN_NEARBYINTF:\n+\t    case BUILT_IN_NEARBYINTL:\n+\t    case BUILT_IN_ROUND:\n+\t    case BUILT_IN_ROUNDF:\n+\t    case BUILT_IN_ROUNDL:\n+\t    case BUILT_IN_TRUNC:\n+\t    case BUILT_IN_TRUNCF:\n+\t    case BUILT_IN_TRUNCL:\n+\t      return tree_expr_nonnegative_p (TREE_VALUE (arglist));\n+\n+\t    case BUILT_IN_POW:\n+\t    case BUILT_IN_POWF:\n+\t    case BUILT_IN_POWL:\n+\t      return tree_expr_nonnegative_p (TREE_VALUE (arglist));\n \n-\t      default:\n-\t\tbreak;\n-\t      }\n-\t}\n+\t    default:\n+\t      break;\n+\t    }\n+      }\n \n       /* ... fall through ...  */\n "}]}