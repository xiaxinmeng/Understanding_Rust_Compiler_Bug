{"sha": "5d045324305966cc22b7aa060dce9ac6e263ac5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQwNDUzMjQzMDU5NjZjYzIyYjdhYTA2MGRjZTlhYzZlMjYzYWM1ZQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-09-25T20:15:21Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2016-09-25T20:15:21Z"}, "message": "bitset (bitset::reference::reference(const _Base_ref&, bitset*)): Remove __unused__ attribute.\n\n2016-09-25  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/debug/bitset (bitset::reference::reference(const _Base_ref&,\n\tbitset*)): Remove __unused__ attribute.\n\t* include/debug/safe_base.h (_Safe_iterator_base): Make\n\t_Safe_sequence_base a friend.\n\t(_Safe_iterator_base::_M_attach): Make protected.\n\t(_Safe_iterator_base::_M_attach_single): Likewise.\n\t(_Safe_iterator_base::_M_detach): Likewise.\n\t(_Safe_iterator_base::_M_detach_single): Likewise.\n\t(_Safe_sequence_base): Make _Safe_iterator_base a friend.\n\t(_Safe_sequence_base::_Safe_sequence_base(_Safe_sequence_base&&)): New.\n\t(_Safe_sequence_base::_M_swap): Make protected.\n\t(_Safe_sequence_base::_M_attach): Make private.\n\t(_Safe_sequence_base::_M_attach_single): Likewise.\n\t(_Safe_sequence_base::_M_detach): Likewise.\n\t(_Safe_sequence_base::_M_detach_single): Likewise.\n\t* include/debug/safe_container.h\n\t(_Safe_container::_Safe_container(_Safe_container&&)): Make default.\n\t* include/debug/safe_iterator.h\n\t(_Safe_iterator::operator++()): Name __scoped_lock instance.\n\t* include/debug/safe_iterator.tcc: Remove trailing line.\n\t* include/debug/safe_unordered_base.h\n\t(_Safe_local_iterator_base::_M_attach): Make protected.\n\t(_Safe_local_iterator_base::_M_attach_single): Likewise.\n\t(_Safe_local_iterator_base::_M_detach): Likewise.\n\t(_Safe_local_iterator_base::_M_detach_single): Likewise.\n\t(_Safe_unordered_container_base): Make _Safe_local_iterator_base friend.\n\t(_Safe_unordered_container_base::_M_attach_local): Make private.\n\t(_Safe_unordered_container_base::_M_attach_local_single): Likewise.\n\t(_Safe_unordered_container_base::_M_detach_local): Likewise.\n\t(_Safe_unordered_container_base::_M_detach_local_single): Likewise.\n\nFrom-SVN: r240478", "tree": {"sha": "843dd350c0abcd09023435300c5b50c29460b8a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/843dd350c0abcd09023435300c5b50c29460b8a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d045324305966cc22b7aa060dce9ac6e263ac5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d045324305966cc22b7aa060dce9ac6e263ac5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d045324305966cc22b7aa060dce9ac6e263ac5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d045324305966cc22b7aa060dce9ac6e263ac5e/comments", "author": null, "committer": null, "parents": [{"sha": "9b597c1f414566f7bebed6bd88675a8c022a07e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b597c1f414566f7bebed6bd88675a8c022a07e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b597c1f414566f7bebed6bd88675a8c022a07e2"}], "stats": {"total": 86, "additions": 63, "deletions": 23}, "files": [{"sha": "47a52b52656892e19b7965352af4f71918abafa7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d045324305966cc22b7aa060dce9ac6e263ac5e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d045324305966cc22b7aa060dce9ac6e263ac5e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5d045324305966cc22b7aa060dce9ac6e263ac5e", "patch": "@@ -1,5 +1,36 @@\n 2016-09-25  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n+\t* include/debug/bitset (bitset::reference::reference(const _Base_ref&,\n+\tbitset*)): Remove __unused__ attribute.\n+\t* include/debug/safe_base.h (_Safe_iterator_base): Make\n+\t_Safe_sequence_base a friend.\n+\t(_Safe_iterator_base::_M_attach): Make protected.\n+\t(_Safe_iterator_base::_M_attach_single): Likewise.\n+\t(_Safe_iterator_base::_M_detach): Likewise.\n+\t(_Safe_iterator_base::_M_detach_single): Likewise.\n+\t(_Safe_sequence_base): Make _Safe_iterator_base a friend.\n+\t(_Safe_sequence_base::_Safe_sequence_base(_Safe_sequence_base&&)): New.\n+\t(_Safe_sequence_base::_M_swap): Make protected.\n+\t(_Safe_sequence_base::_M_attach): Make private.\n+\t(_Safe_sequence_base::_M_attach_single): Likewise.\n+\t(_Safe_sequence_base::_M_detach): Likewise.\n+\t(_Safe_sequence_base::_M_detach_single): Likewise.\n+\t* include/debug/safe_container.h\n+\t(_Safe_container::_Safe_container(_Safe_container&&)): Make default.\n+\t* include/debug/safe_iterator.h\n+\t(_Safe_iterator::operator++()): Name __scoped_lock instance.\n+\t* include/debug/safe_iterator.tcc: Remove trailing line.\n+\t* include/debug/safe_unordered_base.h\n+\t(_Safe_local_iterator_base::_M_attach): Make protected.\n+\t(_Safe_local_iterator_base::_M_attach_single): Likewise.\n+\t(_Safe_local_iterator_base::_M_detach): Likewise.\n+\t(_Safe_local_iterator_base::_M_detach_single): Likewise.\n+\t(_Safe_unordered_container_base): Make _Safe_local_iterator_base friend.\n+\t(_Safe_unordered_container_base::_M_attach_local): Make private.\n+\t(_Safe_unordered_container_base::_M_attach_local_single): Likewise.\n+\t(_Safe_unordered_container_base::_M_detach_local): Likewise.\n+\t(_Safe_unordered_container_base::_M_detach_local_single): Likewise.\n+\n \t* include/parallel/algo.h: Generalize usage of std::__iterator_category.\n \tAdjust whitespaces.\n "}, {"sha": "b7bada30cf88abddca7116399bc189b6ef0b9f0a", "filename": "libstdc++-v3/include/debug/bitset", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d045324305966cc22b7aa060dce9ac6e263ac5e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d045324305966cc22b7aa060dce9ac6e263ac5e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset?ref=5d045324305966cc22b7aa060dce9ac6e263ac5e", "patch": "@@ -66,8 +66,7 @@ namespace __debug\n \tfriend class bitset;\n \treference();\n \n-\treference(const _Base_ref& __base,\n-\t\t  bitset* __seq __attribute__((__unused__))) _GLIBCXX_NOEXCEPT\n+\treference(const _Base_ref& __base, bitset* __seq) _GLIBCXX_NOEXCEPT\n \t: _Base_ref(__base)\n \t, _Safe_iterator_base(__seq, false)\n \t{ }\n@@ -81,7 +80,7 @@ namespace __debug\n \treference&\n \toperator=(bool __x) _GLIBCXX_NOEXCEPT\n \t{\n-\t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n+\t  _GLIBCXX_DEBUG_VERIFY(!this->_M_singular(),\n \t\t\t      _M_message(__gnu_debug::__msg_bad_bitset_write)\n \t\t\t\t._M_iterator(*this));\n \t  *static_cast<_Base_ref*>(this) = __x;\n@@ -91,10 +90,10 @@ namespace __debug\n \treference&\n \toperator=(const reference& __x) _GLIBCXX_NOEXCEPT\n \t{\n-\t  _GLIBCXX_DEBUG_VERIFY(! __x._M_singular(),\n+\t  _GLIBCXX_DEBUG_VERIFY(!__x._M_singular(),\n \t\t\t       _M_message(__gnu_debug::__msg_bad_bitset_read)\n \t\t\t\t._M_iterator(__x));\n-\t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n+\t  _GLIBCXX_DEBUG_VERIFY(!this->_M_singular(),\n \t\t\t      _M_message(__gnu_debug::__msg_bad_bitset_write)\n \t\t\t\t._M_iterator(*this));\n \t  *static_cast<_Base_ref*>(this) = __x;\n@@ -104,15 +103,15 @@ namespace __debug\n \tbool\n \toperator~() const _GLIBCXX_NOEXCEPT\n \t{\n-\t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n+\t  _GLIBCXX_DEBUG_VERIFY(!this->_M_singular(),\n \t\t\t       _M_message(__gnu_debug::__msg_bad_bitset_read)\n \t\t\t\t._M_iterator(*this));\n \t  return ~(*static_cast<const _Base_ref*>(this));\n \t}\n \n \toperator bool() const _GLIBCXX_NOEXCEPT\n \t{\n-\t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n+\t  _GLIBCXX_DEBUG_VERIFY(!this->_M_singular(),\n \t\t\t      _M_message(__gnu_debug::__msg_bad_bitset_read)\n \t\t\t\t._M_iterator(*this));\n \t  return *static_cast<const _Base_ref*>(this);\n@@ -121,7 +120,7 @@ namespace __debug\n \treference&\n \tflip() _GLIBCXX_NOEXCEPT\n \t{\n-\t  _GLIBCXX_DEBUG_VERIFY(! this->_M_singular(),\n+\t  _GLIBCXX_DEBUG_VERIFY(!this->_M_singular(),\n \t\t\t      _M_message(__gnu_debug::__msg_bad_bitset_flip)\n \t\t\t\t._M_iterator(*this));\n \t  _Base_ref::flip();"}, {"sha": "78c3ffdd4d0e6a36c5b6df22b7dcb4d11638fe0b", "filename": "libstdc++-v3/include/debug/safe_base.h", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d045324305966cc22b7aa060dce9ac6e263ac5e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d045324305966cc22b7aa060dce9ac6e263ac5e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h?ref=5d045324305966cc22b7aa060dce9ac6e263ac5e", "patch": "@@ -49,6 +49,8 @@ namespace __gnu_debug\n    */\n   class _Safe_iterator_base\n   {\n+    friend class _Safe_sequence_base;\n+\n   public:\n     /** The sequence this iterator references; may be NULL to indicate\n \ta singular iterator. */\n@@ -101,7 +103,6 @@ namespace __gnu_debug\n     __gnu_cxx::__mutex&\n     _M_get_mutex() throw ();\n \n-  public:\n     /** Attaches this iterator to the given sequence, detaching it\n      *\tfrom whatever sequence it was attached to originally. If the\n      *\tnew sequence is the NULL pointer, the iterator is left\n@@ -124,6 +125,7 @@ namespace __gnu_debug\n     void\n     _M_detach_single() throw ();\n \n+  public:\n     /** Determines if we are attached to the given sequence. */\n     bool\n     _M_attached_to(const _Safe_sequence_base* __seq) const\n@@ -185,6 +187,8 @@ namespace __gnu_debug\n    */\n   class _Safe_sequence_base\n   {\n+    friend class _Safe_iterator_base;\n+\n   public:\n     /// The list of mutable iterators that reference this container\n     _Safe_iterator_base* _M_iterators;\n@@ -204,6 +208,11 @@ namespace __gnu_debug\n #if __cplusplus >= 201103L\n     _Safe_sequence_base(const _Safe_sequence_base&) noexcept\n     : _Safe_sequence_base() { }\n+\n+    // Move constructor swap iterators.\n+    _Safe_sequence_base(_Safe_sequence_base&& __seq) noexcept\n+    : _Safe_sequence_base()\n+    { _M_swap(__seq); }\n #endif\n \n     /** Notify all iterators that reference this sequence that the\n@@ -242,12 +251,12 @@ namespace __gnu_debug\n     __gnu_cxx::__mutex&\n     _M_get_mutex() throw ();\n \n-  public:\n     /** Invalidates all iterators. */\n     void\n     _M_invalidate_all() const\n     { if (++_M_version == 0) _M_version = 1; }\n \n+  private:\n     /** Attach an iterator to this sequence. */\n     void\n     _M_attach(_Safe_iterator_base* __it, bool __constant);"}, {"sha": "d96cb17a2a3ec9ccff3606e5ec7b75b967858502", "filename": "libstdc++-v3/include/debug/safe_container.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d045324305966cc22b7aa060dce9ac6e263ac5e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_container.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d045324305966cc22b7aa060dce9ac6e263ac5e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_container.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_container.h?ref=5d045324305966cc22b7aa060dce9ac6e263ac5e", "patch": "@@ -55,12 +55,9 @@ namespace __gnu_debug\n #if __cplusplus >= 201103L\n       _Safe_container() = default;\n       _Safe_container(const _Safe_container&) = default;\n-      _Safe_container(_Safe_container&& __x) noexcept\n-      : _Safe_container()\n-      { _Base::_M_swap(__x); }\n+      _Safe_container(_Safe_container&&) = default;\n \n-      _Safe_container(_Safe_container&& __x,\n-\t\t      const _Alloc& __a)\n+      _Safe_container(_Safe_container&& __x, const _Alloc& __a)\n       : _Safe_container()\n       {\n \tif (__x._M_cont().get_allocator() == __a)"}, {"sha": "d550ac240e1e60fc8972584384d669fb40c5124a", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d045324305966cc22b7aa060dce9ac6e263ac5e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d045324305966cc22b7aa060dce9ac6e263ac5e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=5d045324305966cc22b7aa060dce9ac6e263ac5e", "patch": "@@ -295,7 +295,7 @@ namespace __gnu_debug\n \t_GLIBCXX_DEBUG_VERIFY(this->_M_incrementable(),\n \t\t\t      _M_message(__msg_bad_inc)\n \t\t\t      ._M_iterator(*this, \"this\"));\n-\t__gnu_cxx::__scoped_lock(this->_M_get_mutex());\n+\t__gnu_cxx::__scoped_lock __l(this->_M_get_mutex());\n \t++base();\n \treturn *this;\n       }"}, {"sha": "0ae7fd1571bea346cba4cb04f7243699f5531f3a", "filename": "libstdc++-v3/include/debug/safe_iterator.tcc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d045324305966cc22b7aa060dce9ac6e263ac5e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d045324305966cc22b7aa060dce9ac6e263ac5e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc?ref=5d045324305966cc22b7aa060dce9ac6e263ac5e", "patch": "@@ -93,4 +93,3 @@ namespace __gnu_debug\n } // namespace __gnu_debug\n \n #endif\n-"}, {"sha": "21292c33e3400b809366393f2123319a2125d797", "filename": "libstdc++-v3/include/debug/safe_unordered_base.h", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d045324305966cc22b7aa060dce9ac6e263ac5e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d045324305966cc22b7aa060dce9ac6e263ac5e/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_base.h?ref=5d045324305966cc22b7aa060dce9ac6e263ac5e", "patch": "@@ -76,24 +76,27 @@ namespace __gnu_debug\n     _Safe_unordered_container_base*\n     _M_get_container() const noexcept;\n \n-  public:\n     /** Attaches this iterator to the given container, detaching it\n      *\tfrom whatever container it was attached to originally. If the\n      *\tnew container is the NULL pointer, the iterator is left\n      *\tunattached.\n      */\n-    void _M_attach(_Safe_sequence_base* __seq, bool __constant);\n+    void\n+    _M_attach(_Safe_sequence_base* __seq, bool __constant);\n \n     /** Likewise, but not thread-safe. */\n-    void _M_attach_single(_Safe_sequence_base* __seq, bool __constant) throw ();\n+    void\n+    _M_attach_single(_Safe_sequence_base* __seq, bool __constant) throw ();\n \n     /** Detach the iterator for whatever container it is attached to,\n      *\tif any.\n     */\n-    void _M_detach();\n+    void\n+    _M_detach();\n \n     /** Likewise, but not thread-safe. */\n-    void _M_detach_single() throw ();\n+    void\n+    _M_detach_single() throw ();\n   };\n \n   /**\n@@ -116,7 +119,9 @@ namespace __gnu_debug\n    */\n   class _Safe_unordered_container_base : public _Safe_sequence_base\n   {\n+    friend class _Safe_local_iterator_base;\n     typedef _Safe_sequence_base _Base;\n+\n   public:\n     /// The list of mutable local iterators that reference this container\n     _Safe_iterator_base* _M_local_iterators;\n@@ -158,7 +163,7 @@ namespace __gnu_debug\n     void\n     _M_swap(_Safe_unordered_container_base& __x) noexcept;\n \n-  public:\n+  private:\n     /** Attach an iterator to this container. */\n     void\n     _M_attach_local(_Safe_iterator_base* __it, bool __constant);"}]}