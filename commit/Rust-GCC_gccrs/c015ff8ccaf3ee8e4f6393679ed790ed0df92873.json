{"sha": "c015ff8ccaf3ee8e4f6393679ed790ed0df92873", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAxNWZmOGNjYWYzZWU4ZTRmNjM5MzY3OWVkNzkwZWQwZGY5Mjg3Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-16T21:58:41Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-03-16T21:58:41Z"}, "message": "c: Handle MEM_REF in c_fully_fold* [PR94179]\n\nThe recent match.pd changes can generate a MEM_REF which can be seen by the\nC FE folding routines.  Unlike the C++ FE, they weren't expected in the C FE\nyet.  MEM_REF should be handled like INDIRECT_REF, except that it has two\noperands rather than just one and that we should preserve the type of the\nsecond operand.  Given that it already has to be an INTEGER_CST with pointer\ntype, I think we are fine, the recursive call should return the INTEGER_CST\nunmodified and STRIP_TYPE_NOPS will not strip anything.\n\n2020-03-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c/94179\n\t* c-fold.c (c_fully_fold_internal): Handle MEM_REF.\n\n\t* gcc.c-torture/compile/pr94179.c: New test.", "tree": {"sha": "d8b570cffa193c1ce5b539e57157e231ead1df47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8b570cffa193c1ce5b539e57157e231ead1df47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c015ff8ccaf3ee8e4f6393679ed790ed0df92873", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c015ff8ccaf3ee8e4f6393679ed790ed0df92873", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c015ff8ccaf3ee8e4f6393679ed790ed0df92873", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c015ff8ccaf3ee8e4f6393679ed790ed0df92873/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bae7b38cf8a21e068ad5c0bab089dedb78af3346", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae7b38cf8a21e068ad5c0bab089dedb78af3346", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bae7b38cf8a21e068ad5c0bab089dedb78af3346"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "240859e9fedf1e79f787df2feaf03d80ece7d5be", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c015ff8ccaf3ee8e4f6393679ed790ed0df92873/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c015ff8ccaf3ee8e4f6393679ed790ed0df92873/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=c015ff8ccaf3ee8e4f6393679ed790ed0df92873", "patch": "@@ -1,3 +1,8 @@\n+2020-03-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/94179\n+\t* c-fold.c (c_fully_fold_internal): Handle MEM_REF.\n+\n 2020-03-13  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/94040"}, {"sha": "63becfeaf2c1535fa3dd49c12519b941bed5dc71", "filename": "gcc/c/c-fold.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c015ff8ccaf3ee8e4f6393679ed790ed0df92873/gcc%2Fc%2Fc-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c015ff8ccaf3ee8e4f6393679ed790ed0df92873/gcc%2Fc%2Fc-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-fold.c?ref=c015ff8ccaf3ee8e4f6393679ed790ed0df92873", "patch": "@@ -346,6 +346,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n     case UNGT_EXPR:\n     case UNGE_EXPR:\n     case UNEQ_EXPR:\n+    case MEM_REF:\n       /* Binary operations evaluating both arguments (increment and\n \t decrement are binary internally in GCC).  */\n       orig_op0 = op0 = TREE_OPERAND (expr, 0);\n@@ -435,6 +436,14 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n \t      || TREE_CODE (TREE_TYPE (orig_op0)) == FIXED_POINT_TYPE)\n \t  && TREE_CODE (TREE_TYPE (orig_op1)) == INTEGER_TYPE)\n \twarn_for_div_by_zero (loc, op1);\n+      if (code == MEM_REF\n+\t  && ret != expr\n+\t  && TREE_CODE (ret) == MEM_REF)\n+\t{\n+\t  TREE_READONLY (ret) = TREE_READONLY (expr);\n+\t  TREE_SIDE_EFFECTS (ret) = TREE_SIDE_EFFECTS (expr);\n+\t  TREE_THIS_VOLATILE (ret) = TREE_THIS_VOLATILE (expr);\n+\t}\n       goto out;\n \n     case ADDR_EXPR:"}, {"sha": "f0d703369a8188711e99fbac72622ae1f343c316", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c015ff8ccaf3ee8e4f6393679ed790ed0df92873/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c015ff8ccaf3ee8e4f6393679ed790ed0df92873/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c015ff8ccaf3ee8e4f6393679ed790ed0df92873", "patch": "@@ -1,3 +1,8 @@\n+2020-03-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/94179\n+\t* gcc.c-torture/compile/pr94179.c: New test.\n+\n 2020-03-16  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/94185"}, {"sha": "dfe27fe61d44a3cd8b451e0d31c48b9f6823f964", "filename": "gcc/testsuite/gcc.c-torture/compile/pr94179.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c015ff8ccaf3ee8e4f6393679ed790ed0df92873/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr94179.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c015ff8ccaf3ee8e4f6393679ed790ed0df92873/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr94179.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr94179.c?ref=c015ff8ccaf3ee8e4f6393679ed790ed0df92873", "patch": "@@ -0,0 +1,9 @@\n+/* PR c/94179 */\n+\n+struct S { char c, d, e[64]; } a;\n+\n+unsigned char *\n+foo (int b)\n+{\n+  return (unsigned char *)((char *)&a.e[b != 0] - (char *)&((struct S *)0)->d);\n+}"}]}