{"sha": "7540a2c787301dc04f72c2fb236de8333ff41786", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU0MGEyYzc4NzMwMWRjMDRmNzJjMmZiMjM2ZGU4MzMzZmY0MTc4Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-09-28T20:23:43Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-09-28T20:23:43Z"}, "message": "compiler: Avoid knockon errors for invalid uses of _.\n\nFrom-SVN: r203006", "tree": {"sha": "b24baf9c4764aae0eebeb8e199fd1af5e9d4ab24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b24baf9c4764aae0eebeb8e199fd1af5e9d4ab24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7540a2c787301dc04f72c2fb236de8333ff41786", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7540a2c787301dc04f72c2fb236de8333ff41786", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7540a2c787301dc04f72c2fb236de8333ff41786", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7540a2c787301dc04f72c2fb236de8333ff41786/comments", "author": null, "committer": null, "parents": [{"sha": "8d60fca50e7ccdfcc3c09e39068c1a1eb3a2e7cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d60fca50e7ccdfcc3c09e39068c1a1eb3a2e7cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d60fca50e7ccdfcc3c09e39068c1a1eb3a2e7cf"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "a95f290150956aa0c085bcf5756c9391900db746", "filename": "gcc/go/gofrontend/gogo-tree.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7540a2c787301dc04f72c2fb236de8333ff41786/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7540a2c787301dc04f72c2fb236de8333ff41786/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo-tree.cc?ref=7540a2c787301dc04f72c2fb236de8333ff41786", "patch": "@@ -1061,6 +1061,12 @@ Named_object::get_tree(Gogo* gogo, Named_object* function)\n   if (this->tree_ != NULL_TREE)\n     return this->tree_;\n \n+  if (Gogo::is_erroneous_name(this->name_))\n+    {\n+      this->tree_ = error_mark_node;\n+      return error_mark_node;\n+    }\n+\n   tree name;\n   if (this->classification_ == NAMED_OBJECT_TYPE)\n     name = NULL_TREE;"}, {"sha": "9f918cb81c7bc25eed0ea34a6d52b21a70dbba59", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7540a2c787301dc04f72c2fb236de8333ff41786/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7540a2c787301dc04f72c2fb236de8333ff41786/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=7540a2c787301dc04f72c2fb236de8333ff41786", "patch": "@@ -1192,6 +1192,27 @@ Gogo::record_interface_type(Interface_type* itype)\n   this->interface_types_.push_back(itype);\n }\n \n+// Return an erroneous name that indicates that an error has already\n+// been reported.\n+\n+std::string\n+Gogo::erroneous_name()\n+{\n+  static int erroneous_count;\n+  char name[50];\n+  snprintf(name, sizeof name, \"$erroneous%d\", erroneous_count);\n+  ++erroneous_count;\n+  return name;\n+}\n+\n+// Return whether a name is an erroneous name.\n+\n+bool\n+Gogo::is_erroneous_name(const std::string& name)\n+{\n+  return name.compare(0, 10, \"$erroneous\") == 0;\n+}\n+\n // Return a name for a thunk object.\n \n std::string"}, {"sha": "23968d4a1919fb826b1a36e9e443a2fcc8c5efb8", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7540a2c787301dc04f72c2fb236de8333ff41786/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7540a2c787301dc04f72c2fb236de8333ff41786/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=7540a2c787301dc04f72c2fb236de8333ff41786", "patch": "@@ -387,6 +387,16 @@ class Gogo\n   void\n   mark_locals_used();\n \n+  // Return a name to use for an error case.  This should only be used\n+  // after reporting an error, and is used to avoid useless knockon\n+  // errors.\n+  static std::string\n+  erroneous_name();\n+\n+  // Return whether the name indicates an error.\n+  static bool\n+  is_erroneous_name(const std::string&);\n+\n   // Return a name to use for a thunk function.  A thunk function is\n   // one we create during the compilation, for a go statement or a\n   // defer statement or a method expression."}, {"sha": "e68f1753f8784e8775d6fe0aff04df23d7329914", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7540a2c787301dc04f72c2fb236de8333ff41786/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7540a2c787301dc04f72c2fb236de8333ff41786/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=7540a2c787301dc04f72c2fb236de8333ff41786", "patch": "@@ -213,7 +213,7 @@ Parse::qualified_ident(std::string* pname, Named_object** ppackage)\n   if (name == \"_\")\n     {\n       error_at(this->location(), \"invalid use of %<_%>\");\n-      name = \"blank\";\n+      name = Gogo::erroneous_name();\n     }\n \n   if (package->name() == this->gogo_->package_name())\n@@ -3104,7 +3104,7 @@ Parse::selector(Expression* left, bool* is_type_switch)\n       if (token->identifier() == \"_\")\n \t{\n \t  error_at(this->location(), \"invalid use of %<_%>\");\n-\t  name = this->gogo_->pack_hidden_name(\"blank\", false);\n+\t  name = Gogo::erroneous_name();\n \t}\n       this->advance_token();\n       return Expression::make_selector(left, name, location);\n@@ -4929,7 +4929,7 @@ Parse::send_or_recv_stmt(bool* is_send, Expression** channel, Expression** val,\n \t    {\n \t      error_at(recv_var_loc,\n \t\t       \"no new variables on left side of %<:=%>\");\n-\t      recv_var = \"blank\";\n+\t      recv_var = Gogo::erroneous_name();\n \t    }\n \t  *is_send = false;\n \t  *varname = gogo->pack_hidden_name(recv_var, is_rv_exported);\n@@ -4965,7 +4965,7 @@ Parse::send_or_recv_stmt(bool* is_send, Expression** channel, Expression** val,\n \t\t    {\n \t\t      error_at(recv_var_loc,\n \t\t\t       \"no new variables on left side of %<:=%>\");\n-\t\t      recv_var = \"blank\";\n+\t\t      recv_var = Gogo::erroneous_name();\n \t\t    }\n \t\t  *is_send = false;\n \t\t  if (recv_var != \"_\")\n@@ -5502,7 +5502,7 @@ Parse::package_clause()\n \t  if (name == \"_\")\n \t    {\n \t      error_at(this->location(), \"invalid package name _\");\n-\t      name = \"blank\";\n+\t      name = Gogo::erroneous_name();\n \t    }\n \t  this->advance_token();\n \t}"}, {"sha": "a4a60706b7afbcc2304b5cba573360f4e2c11c24", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7540a2c787301dc04f72c2fb236de8333ff41786/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7540a2c787301dc04f72c2fb236de8333ff41786/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=7540a2c787301dc04f72c2fb236de8333ff41786", "patch": "@@ -9269,7 +9269,11 @@ Type::bind_field_or_method(Gogo* gogo, const Type* type, Expression* expr,\n     }\n   else\n     {\n-      if (!ambig1.empty())\n+      if (Gogo::is_erroneous_name(name))\n+\t{\n+\t  // An error was already reported.\n+\t}\n+      else if (!ambig1.empty())\n \terror_at(location, \"%qs is ambiguous via %qs and %qs\",\n \t\t Gogo::message_name(name).c_str(), ambig1.c_str(),\n \t\t ambig2.c_str());"}]}