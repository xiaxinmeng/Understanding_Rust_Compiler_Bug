{"sha": "5e2eebc80d6eeca24745c27a925afdb64292ed22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUyZWViYzgwZDZlZWNhMjQ3NDVjMjdhOTI1YWZkYjY0MjkyZWQyMg==", "commit": {"author": {"name": "Samuel Thibault", "email": "samuel.thibault@gnu.org", "date": "2020-05-29T11:46:50Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2020-06-17T22:01:27Z"}, "message": "hurd: libgcc unwinding support over signal trampolines\n\n\tlibgcc/\n\t* config.host (md_unwind_header) <i[34567]86-*-gnu*>: Set to\n\t'i386/gnu-unwind.h'\n\t* config/i386/gnu-unwind.h: New file.\n\nSigned-off-by: Thomas Schwinge <thomas@codesourcery.com>", "tree": {"sha": "d11a04eea79f7cfd0a0a010d7d0aa28a3f109d52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d11a04eea79f7cfd0a0a010d7d0aa28a3f109d52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e2eebc80d6eeca24745c27a925afdb64292ed22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e2eebc80d6eeca24745c27a925afdb64292ed22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e2eebc80d6eeca24745c27a925afdb64292ed22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e2eebc80d6eeca24745c27a925afdb64292ed22/comments", "author": {"login": "sthibaul", "id": 5405051, "node_id": "MDQ6VXNlcjU0MDUwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/5405051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sthibaul", "html_url": "https://github.com/sthibaul", "followers_url": "https://api.github.com/users/sthibaul/followers", "following_url": "https://api.github.com/users/sthibaul/following{/other_user}", "gists_url": "https://api.github.com/users/sthibaul/gists{/gist_id}", "starred_url": "https://api.github.com/users/sthibaul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sthibaul/subscriptions", "organizations_url": "https://api.github.com/users/sthibaul/orgs", "repos_url": "https://api.github.com/users/sthibaul/repos", "events_url": "https://api.github.com/users/sthibaul/events{/privacy}", "received_events_url": "https://api.github.com/users/sthibaul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00"}], "stats": {"total": 115, "additions": 114, "deletions": 1}, "files": [{"sha": "044b34d53ccd4b72b0538ce8ced3262d7dd7e95f", "filename": "libgcc/config.host", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2eebc80d6eeca24745c27a925afdb64292ed22/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2eebc80d6eeca24745c27a925afdb64292ed22/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=5e2eebc80d6eeca24745c27a925afdb64292ed22", "patch": "@@ -734,11 +734,17 @@ i[34567]86-*-linux*)\n \ttm_file=\"${tm_file} i386/elf-lib.h\"\n \tmd_unwind_header=i386/linux-unwind.h\n \t;;\n-i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-gnu* | i[34567]86-*-kopensolaris*-gnu)\n+i[34567]86-*-kfreebsd*-gnu | i[34567]86-*-kopensolaris*-gnu)\n \textra_parts=\"$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o\"\n \ttmake_file=\"${tmake_file} i386/t-crtpc t-crtfm i386/t-crtstuff t-dfprules\"\n \ttm_file=\"${tm_file} i386/elf-lib.h\"\n \t;;\n+i[34567]86-*-gnu*)\n+\textra_parts=\"$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o\"\n+\ttmake_file=\"${tmake_file} i386/t-crtpc t-crtfm i386/t-crtstuff t-dfprules\"\n+\ttm_file=\"${tm_file} i386/elf-lib.h\"\n+\tmd_unwind_header=i386/gnu-unwind.h\n+\t;;\n x86_64-*-linux*)\n \textra_parts=\"$extra_parts crtprec32.o crtprec64.o crtprec80.o crtfastmath.o\"\n \ttmake_file=\"${tmake_file} i386/t-crtpc t-crtfm i386/t-crtstuff t-dfprules\""}, {"sha": "db47f0ac1d4bfd93672963f9df04de3e4cd46f9d", "filename": "libgcc/config/i386/gnu-unwind.h", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e2eebc80d6eeca24745c27a925afdb64292ed22/libgcc%2Fconfig%2Fi386%2Fgnu-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e2eebc80d6eeca24745c27a925afdb64292ed22/libgcc%2Fconfig%2Fi386%2Fgnu-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fgnu-unwind.h?ref=5e2eebc80d6eeca24745c27a925afdb64292ed22", "patch": "@@ -0,0 +1,107 @@\n+/* DWARF2 EH unwinding support for GNU Hurd: x86.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+   Contributed by Samuel Thibault <samuel.thibault@gnu.org>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Do code reading to identify a signal frame, and set the frame\n+   state data appropriately.  See unwind-dw2.c for the structs. */\n+\n+#ifndef inhibit_libc\n+\n+#include <signal.h>\n+\n+#define MD_FALLBACK_FRAME_STATE_FOR x86_gnu_fallback_frame_state\n+\n+static _Unwind_Reason_Code\n+x86_gnu_fallback_frame_state\n+(struct _Unwind_Context *context, _Unwind_FrameState *fs)\n+{\n+  struct handler_args {\n+    int signo;\n+    int sigcode;\n+    struct sigcontext *scp;\n+  } *handler_args;\n+  struct sigcontext *scp;\n+  unsigned long usp;\n+\n+/*\n+ * i386 sigtramp frame we are looking for follows.\n+ * (see glibc/sysdeps/mach/hurd/i386/trampoline.c assembly)\n+ *\n+ * rpc_wait_trampoline:\n+ *   0:\tb8 e7 ff ff ff       \tmov    $-25,%eax       mach_msg_trap\n+ *   5:\t9a 00 00 00 00 07 00 \tlcall  $7,$0\n+ *  12:\t89 01                \tmovl   %eax, (%ecx)\n+ *  14:\t89 dc                \tmovl   %ebx, %esp      switch to signal stack\n+ *\n+ * trampoline:\n+ *  16:\tff d2                \tcall   *%edx           call the handler function\n+ * RA HERE\n+ *  18:\t83 c4 0c             \taddl   $12, %esp       pop its args\n+ *  21:\tc3                   \tret                    return to sigreturn\n+ *\n+ * firewall:\n+ *  22:\tf4                   \thlt\n+ */\n+\n+  if (!(   *(unsigned int   *)(context->ra     ) == 0xc30cc483\n+        && *(unsigned char  *)(context->ra +  4) ==       0xf4\n+\n+        && *(unsigned int   *)(context->ra -  4) == 0xd2ffdc89\n+        && *(unsigned int   *)(context->ra -  8) == 0x01890007\n+        && *(unsigned int   *)(context->ra - 12) == 0x00000000\n+        && *(unsigned int   *)(context->ra - 16) == 0x9affffff\n+        && *(unsigned short *)(context->ra - 18) ==     0xe7b8))\n+    return _URC_END_OF_STACK;\n+\n+  handler_args = context->cfa;\n+  scp = handler_args->scp;\n+  usp = scp->sc_uesp;\n+\n+  fs->regs.cfa_how = CFA_REG_OFFSET;\n+  fs->regs.cfa_reg = 4;\n+  fs->regs.cfa_offset = usp - (unsigned long) context->cfa;\n+\n+  fs->regs.reg[0].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[0].loc.offset = (unsigned long)&scp->sc_eax - usp;\n+  fs->regs.reg[1].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[1].loc.offset = (unsigned long)&scp->sc_ecx - usp;\n+  fs->regs.reg[2].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[2].loc.offset = (unsigned long)&scp->sc_edx - usp;\n+  fs->regs.reg[3].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[3].loc.offset = (unsigned long)&scp->sc_ebx - usp;\n+  fs->regs.reg[5].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[5].loc.offset = (unsigned long)&scp->sc_ebp - usp;\n+  fs->regs.reg[6].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[6].loc.offset = (unsigned long)&scp->sc_esi - usp;\n+  fs->regs.reg[7].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[7].loc.offset = (unsigned long)&scp->sc_edi - usp;\n+  fs->regs.reg[8].how = REG_SAVED_OFFSET;\n+  fs->regs.reg[8].loc.offset = (unsigned long)&scp->sc_eip - usp;\n+  fs->retaddr_column = 8;\n+  fs->signal_frame = 1;\n+\n+  return _URC_NO_REASON;\n+}\n+\n+#endif /* ifndef inhibit_libc */"}]}