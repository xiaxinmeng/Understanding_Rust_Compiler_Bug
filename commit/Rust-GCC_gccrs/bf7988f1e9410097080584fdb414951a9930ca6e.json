{"sha": "bf7988f1e9410097080584fdb414951a9930ca6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY3OTg4ZjFlOTQxMDA5NzA4MDU4NGZkYjQxNDk1MWE5OTMwY2E2ZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-02-15T10:40:34Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-02-15T10:40:34Z"}, "message": "lib2funcs.c (__set_trampoline_parity): Replace TRAMPOLINE_SIZE with __LIBGCC_TRAMPOLINE_SIZE__.\n\nlibgcc/\n\t* config/visium/lib2funcs.c (__set_trampoline_parity): Replace\n\tTRAMPOLINE_SIZE with __LIBGCC_TRAMPOLINE_SIZE__.\ngcc/\n\t* final.c (insn_current_reference_address): Replace test on JUMP_P\n\twith test on jump_to_label_p.\n\t* config/visium/visium-passes.def: New file.\n\t* config/visium/t-visium (PASSES_EXTRA): Define.\n\t* config/visium/visium-protos.h (make_pass_visium_reorg): Declare.\n\t* config/visium/visium.h (TRAMPOLINE_SIZE): Adjust.\n\t(TRAMPOLINE_ALIGNMENT): Define.\n\t* config/visium/visium.c (visium_option_override): Do not register\n\tthe machine-specific reorg pass here.\n\t(visium_trampoline_init): Align the BRA insn on a 64-bit boundary\n\tfor the GR6.\n\t(output_branch): Adjust threshold for long branch instruction.\n\t* config/visium/visium.md (cpu): Move around.\n\t(length): Adjust for the GR6.\n\nFrom-SVN: r268931", "tree": {"sha": "8d5b2c396ec5a3876eb6fd62024d749ddff7ff2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d5b2c396ec5a3876eb6fd62024d749ddff7ff2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf7988f1e9410097080584fdb414951a9930ca6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf7988f1e9410097080584fdb414951a9930ca6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf7988f1e9410097080584fdb414951a9930ca6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf7988f1e9410097080584fdb414951a9930ca6e/comments", "author": null, "committer": null, "parents": [{"sha": "9f53b76775c53998a7714570ae8d36acab02a07f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f53b76775c53998a7714570ae8d36acab02a07f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f53b76775c53998a7714570ae8d36acab02a07f"}], "stats": {"total": 128, "additions": 99, "deletions": 29}, "files": [{"sha": "9d130110cab46759094d700278fb6c5c2855e458", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7988f1e9410097080584fdb414951a9930ca6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7988f1e9410097080584fdb414951a9930ca6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf7988f1e9410097080584fdb414951a9930ca6e", "patch": "@@ -1,3 +1,20 @@\n+2019-02-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* final.c (insn_current_reference_address): Replace test on JUMP_P\n+\twith test on jump_to_label_p.\n+\t* config/visium/visium-passes.def: New file.\n+\t* config/visium/t-visium (PASSES_EXTRA): Define.\n+\t* config/visium/visium-protos.h (make_pass_visium_reorg): Declare.\n+\t* config/visium/visium.h (TRAMPOLINE_SIZE): Adjust.\n+\t(TRAMPOLINE_ALIGNMENT): Define.\n+\t* config/visium/visium.c (visium_option_override): Do not register\n+\tthe machine-specific reorg pass here.\n+\t(visium_trampoline_init): Align the BRA insn on a 64-bit boundary\n+\tfor the GR6.\n+\t(output_branch): Adjust threshold for long branch instruction.\n+\t* config/visium/visium.md (cpu): Move around.\n+\t(length): Adjust for the GR6.\n+\n 2019-02-15  Richard Biener  <rguenther@suse.de>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "a086615c4b97635f27c05a8d9bdbb77cccfdb805", "filename": "gcc/config/visium/t-visium", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7988f1e9410097080584fdb414951a9930ca6e/gcc%2Fconfig%2Fvisium%2Ft-visium", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7988f1e9410097080584fdb414951a9930ca6e/gcc%2Fconfig%2Fvisium%2Ft-visium", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Ft-visium?ref=bf7988f1e9410097080584fdb414951a9930ca6e", "patch": "@@ -1,4 +1,5 @@\n-# Multilibs for Visium.\n+# General rules that all visium/ targets must have.\n+\n # Copyright (C) 2012-2019 Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n@@ -17,6 +18,8 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n+PASSES_EXTRA += $(srcdir)/config/visium/visium-passes.def\n+\n # The compiler defaults to -mcpu=gr5 but this may be overridden via --with-cpu\n # at configure time so the -mcpu setting must be symmetrical.\n MULTILIB_OPTIONS = mcpu=gr5/mcpu=gr6 muser-mode"}, {"sha": "17c519cc838901224582c63fa9cb8acf4be9ba43", "filename": "gcc/config/visium/visium-passes.def", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7988f1e9410097080584fdb414951a9930ca6e/gcc%2Fconfig%2Fvisium%2Fvisium-passes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7988f1e9410097080584fdb414951a9930ca6e/gcc%2Fconfig%2Fvisium%2Fvisium-passes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium-passes.def?ref=bf7988f1e9410097080584fdb414951a9930ca6e", "patch": "@@ -0,0 +1,27 @@\n+/* Description of target passes for Visium.\n+   Copyright (C) 2018 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/*\n+   Macros that can be used in this file:\n+   INSERT_PASS_AFTER (PASS, INSTANCE, TGT_PASS)\n+   INSERT_PASS_BEFORE (PASS, INSTANCE, TGT_PASS)\n+   REPLACE_PASS (PASS, INSTANCE, TGT_PASS)\n+ */\n+\n+  INSERT_PASS_AFTER (pass_delay_slots, 1, pass_visium_reorg);"}, {"sha": "a44a2cf24e91df6d7a8326138662f0783f482405", "filename": "gcc/config/visium/visium-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7988f1e9410097080584fdb414951a9930ca6e/gcc%2Fconfig%2Fvisium%2Fvisium-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7988f1e9410097080584fdb414951a9930ca6e/gcc%2Fconfig%2Fvisium%2Fvisium-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium-protos.h?ref=bf7988f1e9410097080584fdb414951a9930ca6e", "patch": "@@ -61,4 +61,6 @@ extern int visium_expand_block_set (rtx *);\n extern unsigned int reg_or_subreg_regno (rtx);\n #endif /* RTX_CODE */\n \n+extern rtl_opt_pass * make_pass_visium_reorg (gcc::context *);\n+\n #endif"}, {"sha": "67bc2d6d2206fe8656def0dcab468da0e2760687", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7988f1e9410097080584fdb414951a9930ca6e/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7988f1e9410097080584fdb414951a9930ca6e/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=bf7988f1e9410097080584fdb414951a9930ca6e", "patch": "@@ -484,20 +484,6 @@ visium_option_override (void)\n       else\n \tstr_align_jumps = \"8\";\n     }\n-\n-  /* We register a machine-specific pass.  This pass must be scheduled as\n-     late as possible so that we have the (essentially) final form of the\n-     insn stream to work on.  Registering the pass must be done at start up.\n-     It's convenient to do it here.  */\n-  opt_pass *visium_reorg_pass = make_pass_visium_reorg (g);\n-  struct register_pass_info insert_pass_visium_reorg =\n-    {\n-      visium_reorg_pass,\t\t/* pass */\n-      \"dbr\",\t\t\t\t/* reference_pass_name */\n-      1,\t\t\t\t/* ref_pass_instance_number */\n-      PASS_POS_INSERT_AFTER\t\t/* po_op */\n-    };\n-  register_pass (&insert_pass_visium_reorg);\n }\n \n /* Register the Visium-specific libfuncs with the middle-end.  */\n@@ -2725,6 +2711,7 @@ visium_trampoline_init (rtx m_tramp, tree fndecl, rtx static_chain)\n \n \tmoviu   r9,%u FUNCTION\n \tmovil   r9,%l FUNCTION\n+\t[nop]\n \tmoviu   r20,%u STATIC\n \tbra     tr,r9,r9\n \t movil   r20,%l STATIC\n@@ -2745,6 +2732,14 @@ visium_trampoline_init (rtx m_tramp, tree fndecl, rtx static_chain)\n \t\t\t\t\t     NULL_RTX),\n \t\t\t\t 0x04890000));\n \n+  if (visium_cpu == PROCESSOR_GR6)\n+    {\n+      /* For the GR6, the BRA insn must be aligned on a 64-bit boundary.  */\n+      gcc_assert (TRAMPOLINE_ALIGNMENT >= 64);\n+      emit_move_insn (gen_rtx_MEM (SImode, plus_constant (Pmode, addr, 12)),\n+\t\t      gen_int_mode (0, SImode));\n+    }\n+\n   emit_move_insn (gen_rtx_MEM (SImode, plus_constant (Pmode, addr, 8)),\n \t\t  plus_constant (SImode,\n \t\t\t\t expand_shift (RSHIFT_EXPR, SImode,\n@@ -3059,9 +3054,9 @@ output_branch (rtx label, const char *cond, rtx_insn *insn)\n   gcc_assert (cond);\n   operands[0] = label;\n \n-  /* If the length of the instruction is greater than 8, then this is a\n+  /* If the length of the instruction is greater than 12, then this is a\n      long branch and we need to work harder to emit it properly.  */\n-  if (get_attr_length (insn) > 8)\n+  if (get_attr_length (insn) > 12)\n     {\n       bool spilled;\n "}, {"sha": "817e7dc70fc280fd93c2e217b8af017ea968ae1f", "filename": "gcc/config/visium/visium.h", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7988f1e9410097080584fdb414951a9930ca6e/gcc%2Fconfig%2Fvisium%2Fvisium.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7988f1e9410097080584fdb414951a9930ca6e/gcc%2Fconfig%2Fvisium%2Fvisium.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.h?ref=bf7988f1e9410097080584fdb414951a9930ca6e", "patch": "@@ -1045,16 +1045,20 @@ struct visium_args\n \n \tmoviu\tr9,%u FUNCTION\n \tmovil\tr9,%l FUNCTION\n+\t[nop]\n \tmoviu\tr20,%u STATIC\n \tbra\ttr,r9,r0\n-\tmovil\tr20,%l STATIC\n+\t movil\tr20,%l STATIC\n \n     A difficulty is setting the correct instruction parity at run time.\n \n \n     TRAMPOLINE_SIZE \n     A C expression for the size in bytes of the trampoline, as an integer. */\n-#define TRAMPOLINE_SIZE 20\n+#define TRAMPOLINE_SIZE (visium_cpu == PROCESSOR_GR6 ? 24 : 20)\n+\n+/* Alignment required for trampolines, in bits.  */\n+#define TRAMPOLINE_ALIGNMENT (visium_cpu == PROCESSOR_GR6 ? 64 : 32)\n \n /* Implicit calls to library routines\n "}, {"sha": "f53544134274fb40c278d31b3200658f6ccc6099", "filename": "gcc/config/visium/visium.md", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7988f1e9410097080584fdb414951a9930ca6e/gcc%2Fconfig%2Fvisium%2Fvisium.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7988f1e9410097080584fdb414951a9930ca6e/gcc%2Fconfig%2Fvisium%2Fvisium.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.md?ref=bf7988f1e9410097080584fdb414951a9930ca6e", "patch": "@@ -103,6 +103,10 @@\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n \n+; Attribute for cpu type.\n+; These must match the values for enum processor_type in visium-opts.h.\n+(define_attr \"cpu\" \"gr5,gr6\" (const (symbol_ref \"visium_cpu_attr\")))\n+\n ; Instruction type.\n ;\n ;imm_reg       Move of immediate value to register.\n@@ -154,22 +158,37 @@\n \t\t? EMPTY_DELAY_SLOT_TRUE : EMPTY_DELAY_SLOT_FALSE)\"))\n \n ; Length in bytes.\n-; The allowed range for the offset of short branches is [-131072;131068]\n+; On the GR6, absolute branches must be aligned on a 64-bit boundary to avoid\n+; a pipeline hazard.  This is done by the assembler, so the length of these\n+; instructions for the compiler can effectively be 4, 8, or 12 bytes.\n+; The allowed range for the offset of relative branches is [-131072;131068]\n ; and it is counted from the address of the insn so we need to subtract\n ; 8 for forward branches because (pc) points to the next insn for them.\n (define_attr \"length\" \"\"\n   (cond [(eq_attr \"type\" \"abs_branch,call,ret\")\n            (if_then_else (eq_attr \"empty_delay_slot\" \"true\")\n-                         (const_int 8)\n-                         (const_int 4))\n+                         (if_then_else (and (eq_attr \"cpu\" \"gr6\")\n+                                            (eq (mod (pc) (const_int 8))\n+                                                (const_int 4)))\n+                                       (const_int 12)\n+                                       (const_int 8))\n+                         (if_then_else (and (eq_attr \"cpu\" \"gr6\")\n+                                            (eq (mod (pc) (const_int 8))\n+                                                (const_int 4)))\n+                                       (const_int 8)\n+                                       (const_int 4)))\n          (eq_attr \"type\" \"branch\")\n            (if_then_else (leu (plus (minus (match_dup 0) (pc))\n                                     (const_int 131060))\n                               (const_int 262120))\n                          (if_then_else (eq_attr \"empty_delay_slot\" \"true\")\n                                        (const_int 8)\n                                        (const_int 4))\n-                         (const_int 20))\n+                         (if_then_else (and (eq_attr \"cpu\" \"gr6\")\n+                                            (eq (mod (pc) (const_int 8))\n+                                                (const_int 0)))\n+                                       (const_int 24)\n+                                       (const_int 20)))\n          (eq_attr \"single_insn\" \"no\")\n            (const_int 8)] (const_int 4)))\n \n@@ -189,10 +208,6 @@\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n \n-; Attribute for cpu type.\n-; These must match the values for enum processor_type in visium-opts.h.\n-(define_attr \"cpu\" \"gr5,gr6\" (const (symbol_ref \"visium_cpu_attr\")))\n-\n (include \"gr5.md\")\n (include \"gr6.md\")\n "}, {"sha": "fefc4874b24a9b1519f6fbc937627f1ae6236d08", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7988f1e9410097080584fdb414951a9930ca6e/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7988f1e9410097080584fdb414951a9930ca6e/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=bf7988f1e9410097080584fdb414951a9930ca6e", "patch": "@@ -606,7 +606,7 @@ insn_current_reference_address (rtx_insn *branch)\n \n   rtx_insn *seq = NEXT_INSN (PREV_INSN (branch));\n   seq_uid = INSN_UID (seq);\n-  if (!JUMP_P (branch))\n+  if (!jump_to_label_p (branch))\n     /* This can happen for example on the PA; the objective is to know the\n        offset to address something in front of the start of the function.\n        Thus, we can treat it like a backward branch."}, {"sha": "65cd3f97cddf8928cf8f52cb2320f2bc426c9182", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7988f1e9410097080584fdb414951a9930ca6e/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7988f1e9410097080584fdb414951a9930ca6e/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=bf7988f1e9410097080584fdb414951a9930ca6e", "patch": "@@ -1,3 +1,8 @@\n+2019-02-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/visium/lib2funcs.c (__set_trampoline_parity): Replace\n+\tTRAMPOLINE_SIZE with __LIBGCC_TRAMPOLINE_SIZE__.\n+\n 2019-01-31  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/t-linux: Add -mfp-rounding-mode=d"}, {"sha": "4554e7d51ca928f0d6ea9946f048fa7765f7f368", "filename": "libgcc/config/visium/lib2funcs.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf7988f1e9410097080584fdb414951a9930ca6e/libgcc%2Fconfig%2Fvisium%2Flib2funcs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf7988f1e9410097080584fdb414951a9930ca6e/libgcc%2Fconfig%2Fvisium%2Flib2funcs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fvisium%2Flib2funcs.c?ref=bf7988f1e9410097080584fdb414951a9930ca6e", "patch": "@@ -315,7 +315,9 @@ __set_trampoline_parity (UWtype *addr)\n {\n   int i;\n \n-  for (i = 0; i < (TRAMPOLINE_SIZE * __CHAR_BIT__) / W_TYPE_SIZE; i++)\n+  for (i = 0;\n+       i < (__LIBGCC_TRAMPOLINE_SIZE__ * __CHAR_BIT__) / W_TYPE_SIZE;\n+       i++)\n     addr[i] |= parity_bit (addr[i]);\n }\n #endif"}]}