{"sha": "f8b0f44f2e5437e06e6def089f81d53a3ee2ce38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhiMGY0NGYyZTU0MzdlMDZlNmRlZjA4OWY4MWQ1M2EzZWUyY2UzOA==", "commit": {"author": {"name": "Easwaran Raman", "email": "eraman@google.com", "date": "2013-11-23T21:01:46Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2013-11-23T21:01:46Z"}, "message": "re PR c++/59031 (vtable lookup not optimized away)\n\n\tPR c++/59031\n\t* call.c (build_new_method_call_1): Comnpare function context\n\twith BASELINK_BINFO type rather than instance type before\n\tmarking the call with LOOKUP_NONVIRTUAL.\n\nFrom-SVN: r205317", "tree": {"sha": "971f6a535d597aa1a2375e50049f8a5f22a27d8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/971f6a535d597aa1a2375e50049f8a5f22a27d8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8b0f44f2e5437e06e6def089f81d53a3ee2ce38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b0f44f2e5437e06e6def089f81d53a3ee2ce38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8b0f44f2e5437e06e6def089f81d53a3ee2ce38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8b0f44f2e5437e06e6def089f81d53a3ee2ce38/comments", "author": null, "committer": null, "parents": [{"sha": "18768faed3875e1d33b122fbf867788add95f056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18768faed3875e1d33b122fbf867788add95f056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18768faed3875e1d33b122fbf867788add95f056"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "aadecddc4138e9b91cb33ef963222a9499c4d316", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b0f44f2e5437e06e6def089f81d53a3ee2ce38/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b0f44f2e5437e06e6def089f81d53a3ee2ce38/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f8b0f44f2e5437e06e6def089f81d53a3ee2ce38", "patch": "@@ -1,3 +1,10 @@\n+2013-11-23  Easwaran Raman  <eraman@google.com>\n+\n+\tPR c++/59031\n+\t* call.c (build_new_method_call_1): Comnpare function context\n+\twith BASELINK_BINFO type rather than instance type before\n+\tmarking the call with LOOKUP_NONVIRTUAL.\n+\n 2013-11-23  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/58868"}, {"sha": "4107afa86725049e341f472886e3116e27aebe32", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b0f44f2e5437e06e6def089f81d53a3ee2ce38/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b0f44f2e5437e06e6def089f81d53a3ee2ce38/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=f8b0f44f2e5437e06e6def089f81d53a3ee2ce38", "patch": "@@ -7514,7 +7514,7 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n   struct z_candidate *candidates = 0, *cand;\n   tree explicit_targs = NULL_TREE;\n   tree basetype = NULL_TREE;\n-  tree access_binfo;\n+  tree access_binfo, binfo;\n   tree optype;\n   tree first_mem_arg = NULL_TREE;\n   tree name;\n@@ -7553,6 +7553,7 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n   if (!conversion_path)\n     conversion_path = BASELINK_BINFO (fns);\n   access_binfo = BASELINK_ACCESS_BINFO (fns);\n+  binfo = BASELINK_BINFO (fns);\n   optype = BASELINK_OPTYPE (fns);\n   fns = BASELINK_FUNCTIONS (fns);\n   if (TREE_CODE (fns) == TEMPLATE_ID_EXPR)\n@@ -7799,13 +7800,13 @@ build_new_method_call_1 (tree instance, tree fns, vec<tree, va_gc> **args,\n \t    {\n \t      /* Optimize away vtable lookup if we know that this\n \t\t function can't be overridden.  We need to check if\n-\t\t the context and the instance type are the same,\n+\t\t the context and the type where we found fn are the same,\n \t\t actually FN might be defined in a different class\n \t\t type because of a using-declaration. In this case, we\n \t\t do not want to perform a non-virtual call.  */\n \t      if (DECL_VINDEX (fn) && ! (flags & LOOKUP_NONVIRTUAL)\n \t\t  && same_type_ignoring_top_level_qualifiers_p\n-\t\t  (DECL_CONTEXT (fn), TREE_TYPE (instance))\n+\t\t  (DECL_CONTEXT (fn), BINFO_TYPE (binfo))\n \t\t  && resolves_to_fixed_type_p (instance, 0))\n \t\tflags |= LOOKUP_NONVIRTUAL;\n               if (explicit_targs)"}, {"sha": "1fc4b59d846b2bc36a3125389925e082fd5ee383", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b0f44f2e5437e06e6def089f81d53a3ee2ce38/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b0f44f2e5437e06e6def089f81d53a3ee2ce38/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f8b0f44f2e5437e06e6def089f81d53a3ee2ce38", "patch": "@@ -359,7 +359,8 @@ struct GTY(()) tree_overload {\n /* Returns true iff NODE is a BASELINK.  */\n #define BASELINK_P(NODE) \\\n   (TREE_CODE (NODE) == BASELINK)\n-/* The BINFO indicating the base from which the BASELINK_FUNCTIONS came.  */\n+/* The BINFO indicating the base in which lookup found the\n+   BASELINK_FUNCTIONS.  */\n #define BASELINK_BINFO(NODE) \\\n   (((struct tree_baselink*) BASELINK_CHECK (NODE))->binfo)\n /* The functions referred to by the BASELINK; either a FUNCTION_DECL,"}, {"sha": "04c24129343810009f88fd90622c188f13d74deb", "filename": "gcc/testsuite/g++.dg/inherit/virtual11.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8b0f44f2e5437e06e6def089f81d53a3ee2ce38/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8b0f44f2e5437e06e6def089f81d53a3ee2ce38/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fvirtual11.C?ref=f8b0f44f2e5437e06e6def089f81d53a3ee2ce38", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/59031\n+// { dg-do compile }\n+// { dg-options \"-fdump-tree-gimple \" }\n+class B {\n+ public:\n+  virtual int add (int a, int b) {return a+ b;}\n+};\n+\n+class D : public B {\n+};\n+\n+int foo (int a, int b) {\n+  D d;\n+  return d.add(a, b);\n+}\n+// { dg-final { scan-tree-dump-not \"OBJ_TYPE_REF\" \"gimple\" } }\n+// { dg-final { cleanup-tree-dump \"gimple\" } }"}]}