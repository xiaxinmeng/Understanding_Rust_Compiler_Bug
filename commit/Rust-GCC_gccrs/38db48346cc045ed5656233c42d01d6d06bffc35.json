{"sha": "38db48346cc045ed5656233c42d01d6d06bffc35", "node_id": "C_kwDOANBUbNoAKDM4ZGI0ODM0NmNjMDQ1ZWQ1NjU2MjMzYzQyZDAxZDZkMDZiZmZjMzU", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-09-13T09:14:23Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2022-09-13T10:39:05Z"}, "message": "rs6000: Fix the check of bif argument number [PR104482]\n\nAs PR104482 shown, it's one regression about the handlings when\nthe argument number is more than the one of built-in function\nprototype.  The new bif support only catches the case that the\nargument number is less than the one of function prototype, but\nit misses the case that the argument number is more than the one\nof function prototype.  Because it uses \"n != expected_args\",\nn is updated in\n\n   for (n = 0; !VOID_TYPE_P (TREE_VALUE (fnargs)) && n < nargs;\n        fnargs = TREE_CHAIN (fnargs), n++)\n\n, it's restricted to be less than or equal to expected_args with\nthe guard !VOID_TYPE_P (TREE_VALUE (fnargs)), so it's wrong.\n\nThe fix is to use nargs instead, also move the checking hunk's\nlocation ahead to avoid useless further scanning when the counts\nmismatch.\n\n\tPR target/104482\n\ngcc/ChangeLog:\n\n\t* config/rs6000/rs6000-c.cc (altivec_resolve_overloaded_builtin): Fix\n\tthe equality check for argument number, and move this hunk ahead.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/pr104482.c: New test.", "tree": {"sha": "2abcb7066948566195bb0aeb437226512e88c883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2abcb7066948566195bb0aeb437226512e88c883"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/38db48346cc045ed5656233c42d01d6d06bffc35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38db48346cc045ed5656233c42d01d6d06bffc35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38db48346cc045ed5656233c42d01d6d06bffc35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38db48346cc045ed5656233c42d01d6d06bffc35/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94504c9ae157db937a2e62d533a36d56598f3c09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94504c9ae157db937a2e62d533a36d56598f3c09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94504c9ae157db937a2e62d533a36d56598f3c09"}], "stats": {"total": 76, "additions": 46, "deletions": 30}, "files": [{"sha": "ca9cc42028f773c6dda58fb2b589a5bd4c41b423", "filename": "gcc/config/rs6000/rs6000-c.cc", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38db48346cc045ed5656233c42d01d6d06bffc35/gcc%2Fconfig%2Frs6000%2Frs6000-c.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38db48346cc045ed5656233c42d01d6d06bffc35/gcc%2Fconfig%2Frs6000%2Frs6000-c.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.cc?ref=38db48346cc045ed5656233c42d01d6d06bffc35", "patch": "@@ -1749,6 +1749,36 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n   vec<tree, va_gc> *arglist = static_cast<vec<tree, va_gc> *> (passed_arglist);\n   unsigned int nargs = vec_safe_length (arglist);\n \n+  /* If the number of arguments did not match the prototype, return NULL\n+     and the generic code will issue the appropriate error message.  Skip\n+     this test for functions where we don't fully describe all the possible\n+     overload signatures in rs6000-overload.def (because they aren't relevant\n+     to the expansion here).  If we don't, we get confusing error messages.  */\n+  /* As an example, for vec_splats we have:\n+\n+; There are no actual builtins for vec_splats.  There is special handling for\n+; this in altivec_resolve_overloaded_builtin in rs6000-c.cc, where the call\n+; is replaced by a constructor.  The single overload here causes\n+; __builtin_vec_splats to be registered with the front end so that can happen.\n+[VEC_SPLATS, vec_splats, __builtin_vec_splats]\n+  vsi __builtin_vec_splats (vsi);\n+    ABS_V4SI SPLATS_FAKERY\n+\n+    So even though __builtin_vec_splats accepts all vector types, the\n+    infrastructure cheats and just records one prototype.  We end up getting\n+    an error message that refers to this specific prototype even when we\n+    are handling a different argument type.  That is completely confusing\n+    to the user, so it's best to let these cases be handled individually\n+    in the resolve_vec_splats, etc., helper functions.  */\n+\n+  if (expected_args != nargs\n+      && !(fcode == RS6000_OVLD_VEC_PROMOTE\n+\t   || fcode == RS6000_OVLD_VEC_SPLATS\n+\t   || fcode == RS6000_OVLD_VEC_EXTRACT\n+\t   || fcode == RS6000_OVLD_VEC_INSERT\n+\t   || fcode == RS6000_OVLD_VEC_STEP))\n+    return NULL;\n+\n   for (n = 0;\n        !VOID_TYPE_P (TREE_VALUE (fnargs)) && n < nargs;\n        fnargs = TREE_CHAIN (fnargs), n++)\n@@ -1809,36 +1839,6 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n       types[n] = type;\n     }\n \n-  /* If the number of arguments did not match the prototype, return NULL\n-     and the generic code will issue the appropriate error message.  Skip\n-     this test for functions where we don't fully describe all the possible\n-     overload signatures in rs6000-overload.def (because they aren't relevant\n-     to the expansion here).  If we don't, we get confusing error messages.  */\n-  /* As an example, for vec_splats we have:\n-\n-; There are no actual builtins for vec_splats.  There is special handling for\n-; this in altivec_resolve_overloaded_builtin in rs6000-c.cc, where the call\n-; is replaced by a constructor.  The single overload here causes\n-; __builtin_vec_splats to be registered with the front end so that can happen.\n-[VEC_SPLATS, vec_splats, __builtin_vec_splats]\n-  vsi __builtin_vec_splats (vsi);\n-    ABS_V4SI SPLATS_FAKERY\n-\n-    So even though __builtin_vec_splats accepts all vector types, the\n-    infrastructure cheats and just records one prototype.  We end up getting\n-    an error message that refers to this specific prototype even when we\n-    are handling a different argument type.  That is completely confusing\n-    to the user, so it's best to let these cases be handled individually\n-    in the resolve_vec_splats, etc., helper functions.  */\n-\n-  if (n != expected_args\n-      && !(fcode == RS6000_OVLD_VEC_PROMOTE\n-\t   || fcode == RS6000_OVLD_VEC_SPLATS\n-\t   || fcode == RS6000_OVLD_VEC_EXTRACT\n-\t   || fcode == RS6000_OVLD_VEC_INSERT\n-\t   || fcode == RS6000_OVLD_VEC_STEP))\n-    return NULL;\n-\n   /* Some overloads require special handling.  */\n   tree returned_expr = NULL;\n   resolution res = unresolved;"}, {"sha": "92191265e4c68bcebbd5b0234b56d6f37b87151b", "filename": "gcc/testsuite/gcc.target/powerpc/pr104482.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/38db48346cc045ed5656233c42d01d6d06bffc35/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104482.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/38db48346cc045ed5656233c42d01d6d06bffc35/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104482.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104482.c?ref=38db48346cc045ed5656233c42d01d6d06bffc35", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx\" } */\n+\n+/* It's to verify no ICE here, ignore error messages about\n+   mismatch argument number since they are not test points\n+   here.  */\n+/* { dg-excess-errors \"pr104482\" } */\n+\n+__attribute__ ((altivec (vector__))) int vsi;\n+\n+double\n+testXXPERMDI (void)\n+{\n+  return __builtin_vsx_xxpermdi (vsi, vsi, 2, 4);\n+}\n+"}]}