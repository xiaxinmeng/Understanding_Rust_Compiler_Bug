{"sha": "9b87db3c0fc95b7f76fcdc38e21371dff155ee4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI4N2RiM2MwZmM5NWI3Zjc2ZmNkYzM4ZTIxMzcxZGZmMTU1ZWU0Yg==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2009-09-16T16:12:18Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2009-09-16T16:12:18Z"}, "message": "re PR fortran/41212 (miscompilation  at  -O2)\n\n        PR fortran/41212\n\t* tree.h (struct tree_decl_common): Add decl_restricted_flag,\n\tshorten decl_common_unused.\n\t(DECL_RESTRICTED_P): New accessor.\n\t* tree-ssa-alias.c (ptr_deref_may_alias_decl_p): Use it\n\tto disambiguate marked decls and restrict pointers.\n\nfortran/\n\t* trans.h (struct lang_type): Remove nontarget_type member.\n\t* trans.c (gfc_add_modify): Don't access it.\n\t* trans-decl.c (gfc_finish_var_decl): Don't allocate and set it,\n\tinstead set DECL_RESTRICTED_P on affected decls.\n\ntestsuite/\n\t* gfortran.dg/pr41212.f90: New test.\n\nFrom-SVN: r151761", "tree": {"sha": "16bc7e6ccab2dd7b94d385eb0dc4572ffb988dc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16bc7e6ccab2dd7b94d385eb0dc4572ffb988dc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "798763075fa686158fc9b40b2e6b3bc57320dd5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798763075fa686158fc9b40b2e6b3bc57320dd5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/798763075fa686158fc9b40b2e6b3bc57320dd5a"}], "stats": {"total": 107, "additions": 78, "deletions": 29}, "files": [{"sha": "eaff6d9e75228809292333d2f965be70b73a15fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b87db3c0fc95b7f76fcdc38e21371dff155ee4b", "patch": "@@ -1,3 +1,12 @@\n+2009-09-16  Michael Matz  <matz@suse.de>\n+\n+\tPR fortran/41212\n+\t* tree.h (struct tree_decl_common): Add decl_restricted_flag,\n+\tshorten decl_common_unused.\n+\t(DECL_RESTRICTED_P): New accessor.\n+\t* tree-ssa-alias.c (ptr_deref_may_alias_decl_p): Use it\n+\tto disambiguate marked decls and restrict pointers.\n+\n 2009-09-16  Richard Henderson  <rth@redhat.com>\n \n \tPR middle-end/41360"}, {"sha": "9c9744b140e36ae64a2991ee2c054698b26aae94", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9b87db3c0fc95b7f76fcdc38e21371dff155ee4b", "patch": "@@ -1,3 +1,11 @@\n+2009-09-16  Michael Matz  <matz@suse.de>\n+\n+\tPR fortran/41212\n+\t* trans.h (struct lang_type): Remove nontarget_type member.\n+\t* trans.c (gfc_add_modify): Don't access it.\n+\t* trans-decl.c (gfc_finish_var_decl): Don't allocate and set it,\n+\tinstead set DECL_RESTRICTED_P on affected decls.\n+\n 2009-09-14  Richard Henderson  <rth@redhat.com>\n \n \t* f95-lang.c (gfc_init_builtin_functions): Update call to"}, {"sha": "4e72a23bd5c956aeef3201e46fbb3864d982ca26", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=9b87db3c0fc95b7f76fcdc38e21371dff155ee4b", "patch": "@@ -581,26 +581,8 @@ gfc_finish_var_decl (tree decl, gfc_symbol * sym)\n \n   if (!sym->attr.target\n       && !sym->attr.pointer\n-      && !sym->attr.proc_pointer\n-      /* For now, don't bother with aggregate types.  We would need\n-         to adjust DECL_CONTEXT of all field decls.  */\n-      && !AGGREGATE_TYPE_P (TREE_TYPE (decl)))\n-    {\n-      tree type = TREE_TYPE (decl);\n-      if (!TYPE_LANG_SPECIFIC (type))\n-\tTYPE_LANG_SPECIFIC (type) = (struct lang_type *)\n-\t  ggc_alloc_cleared (sizeof (struct lang_type));\n-      if (!TYPE_LANG_SPECIFIC (type)->nontarget_type)\n-\t{\n-\t  alias_set_type set = new_alias_set ();\n-\t  type = build_distinct_type_copy (type);\n-\t  TYPE_ALIAS_SET (type) = set;\n-\t  TYPE_LANG_SPECIFIC (type)->nontarget_type = type;\n-\t}\n-      else\n-\ttype = TYPE_LANG_SPECIFIC (type)->nontarget_type;\n-      TREE_TYPE (decl) = type;\n-    }\n+      && !sym->attr.proc_pointer)\n+    DECL_RESTRICTED_P (decl) = 1;\n }\n \n "}, {"sha": "136987a74885c1bd72b5d1bdc1786e10cf637cd2", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=9b87db3c0fc95b7f76fcdc38e21371dff155ee4b", "patch": "@@ -162,13 +162,6 @@ gfc_add_modify (stmtblock_t * pblock, tree lhs, tree rhs)\n   tree t1, t2;\n   t1 = TREE_TYPE (rhs);\n   t2 = TREE_TYPE (lhs);\n-  /* ??? This is actually backwards, we should test the \"base\" type\n-     from which the nontarget_type was copied, but we don't have this\n-     backlink.  This will do for now, it's for checking anyway.  */\n-  if (TYPE_LANG_SPECIFIC (t1))\n-    t1 = TYPE_LANG_SPECIFIC (t1)->nontarget_type;\n-  if (TYPE_LANG_SPECIFIC (t2))\n-    t2 = TYPE_LANG_SPECIFIC (t2)->nontarget_type;\n   /* Make sure that the types of the rhs and the lhs are the same\n      for scalar assignments.  We should probably have something\n      similar for aggregates, but right now removing that check just"}, {"sha": "4469023499de35c10de4a990fd1f1fafece8c10b", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=9b87db3c0fc95b7f76fcdc38e21371dff155ee4b", "patch": "@@ -629,7 +629,6 @@ struct GTY(())\tlang_type\t {\n   tree dataptr_type;\n   tree span;\n   tree base_decl[2];\n-  tree nontarget_type;\n };\n \n struct GTY(()) lang_decl {"}, {"sha": "5730da14617dd3a1122704b9df79c05c3cdaf54a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b87db3c0fc95b7f76fcdc38e21371dff155ee4b", "patch": "@@ -1,3 +1,8 @@\n+2009-09-16  Michael Matz  <matz@suse.de>\n+\n+\tPR fortran/41212\n+\t* gfortran.dg/pr41212.f90: New test.\n+\n 2009-09-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/alignment9.adb: New test."}, {"sha": "4bdae6dad2829d5a158aa576027a34bda0fda8cf", "filename": "gcc/testsuite/gfortran.dg/pr41212.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr41212.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr41212.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr41212.f90?ref=9b87db3c0fc95b7f76fcdc38e21371dff155ee4b", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do run }\n+! { dg-options \"-O2\" }\n+program m\n+   double precision :: y,z\n+   call b(1.0d0,y,z)\n+   if (ABS (z - 1.213) > 0.1) call abort\n+contains\n+     subroutine b( x, y, z)\n+       implicit none\n+       double precision :: x,y,z\n+       integer :: i, k\n+       double precision :: h, r\n+\n+       y = 1.0d0\n+       z = 0.0d0\n+\n+       h = 0\n+       DO k = 1,10\n+          h = h + 1.0d0/k\n+\n+          r = 1\n+          DO i = 1,k\n+             r = (x/(2*i) ) * r\n+          END DO\n+\n+          y = y + (-1)**k * r\n+          z = z + (-1)**(k+1) * h * r\n+\n+          IF ( ABS(2*k/x*r) < 1d-6 ) EXIT\n+       END DO\n+\n+       z = 2*y\n+     end subroutine b\n+end program m"}, {"sha": "e619190386c2cf6aa672692f5473f12da6f6e0dd", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=9b87db3c0fc95b7f76fcdc38e21371dff155ee4b", "patch": "@@ -208,6 +208,14 @@ ptr_deref_may_alias_decl_p (tree ptr, tree decl)\n   if (!pi)\n     return true;\n \n+  /* If the decl can be used as a restrict tag and we have a restrict\n+     pointer and that pointers points-to set doesn't contain this decl\n+     then they can't alias.  */\n+  if (DECL_RESTRICTED_P (decl)\n+      && TYPE_RESTRICT (TREE_TYPE (ptr))\n+      && pi->pt.vars_contains_restrict)\n+    return bitmap_bit_p (pi->pt.vars, DECL_UID (decl));\n+\n   return pt_solution_includes (&pi->pt, decl);\n }\n "}, {"sha": "09ce8fa125c0957fe53ea5c448c50131d6e6d5d7", "filename": "gcc/tree.h", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b87db3c0fc95b7f76fcdc38e21371dff155ee4b/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=9b87db3c0fc95b7f76fcdc38e21371dff155ee4b", "patch": "@@ -1306,6 +1306,15 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n   (TREE_CHECK3 (NODE, VAR_DECL, PARM_DECL, \\\n \t\tRESULT_DECL)->decl_common.decl_by_reference_flag)\n \n+/* In a RESULT_DECL, PARM_DECL and VAR_DECL, means that this decl\n+   can be used as restricted tag to disambiguate against other restrict\n+   pointers.  Used by fortran to capture something like non-addressability\n+   (which it isn't really because the middle-end does take addresses of\n+   such variables).  */\n+#define DECL_RESTRICTED_P(NODE) \\\n+  (TREE_CHECK3 (NODE, VAR_DECL, PARM_DECL, \\\n+\t\tRESULT_DECL)->decl_common.decl_restricted_flag)\n+\n /* In a CALL_EXPR, means that the call is the jump from a thunk to the\n    thunked-to function.  */\n #define CALL_FROM_THUNK_P(NODE) (CALL_EXPR_CHECK (NODE)->base.protected_flag)\n@@ -2646,8 +2655,10 @@ struct GTY(()) tree_decl_common {\n   unsigned gimple_reg_flag : 1;\n   /* In VAR_DECL, PARM_DECL and RESULT_DECL, this is DECL_BY_REFERENCE.  */\n   unsigned decl_by_reference_flag : 1;\n+  /* In VAR_DECL, PARM_DECL and RESULT_DECL, this is DECL_RESTRICTED_P.  */\n+  unsigned decl_restricted_flag : 1;\n   /* Padding so that 'off_align' can be on a 32-bit boundary.  */\n-  unsigned decl_common_unused : 4;\n+  unsigned decl_common_unused : 3;\n \n   /* DECL_OFFSET_ALIGN, used only for FIELD_DECLs.  */\n   unsigned int off_align : 8;"}]}