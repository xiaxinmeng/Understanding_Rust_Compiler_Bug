{"sha": "0e871c15e0beddce2226f3bf8fb96f2fb214b28e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU4NzFjMTVlMGJlZGRjZTIyMjZmM2JmOGZiOTZmMmZiMjE0YjI4ZQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2011-09-19T12:32:02Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2011-09-19T12:32:02Z"}, "message": "decl.c (annotate_value): Look up expression for insertion in the cache at the end.\n\n* gcc-interface/decl.c (annotate_value): Look up expression for\ninsertion in the cache at the end.\n\nFrom-SVN: r178970", "tree": {"sha": "99cb6bf3fbc52e9fc6f48689942e35dabe8c77dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99cb6bf3fbc52e9fc6f48689942e35dabe8c77dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e871c15e0beddce2226f3bf8fb96f2fb214b28e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e871c15e0beddce2226f3bf8fb96f2fb214b28e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e871c15e0beddce2226f3bf8fb96f2fb214b28e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e871c15e0beddce2226f3bf8fb96f2fb214b28e/comments", "author": null, "committer": null, "parents": [{"sha": "12bfa8bd29310b40e114f4965d9139e1015ae1df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12bfa8bd29310b40e114f4965d9139e1015ae1df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12bfa8bd29310b40e114f4965d9139e1015ae1df"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "1d0a10cf32eb85f63fe6a02fb7dc00801ff66b89", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e871c15e0beddce2226f3bf8fb96f2fb214b28e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e871c15e0beddce2226f3bf8fb96f2fb214b28e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0e871c15e0beddce2226f3bf8fb96f2fb214b28e", "patch": "@@ -1,3 +1,8 @@\n+2011-09-19  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* gcc-interface/decl.c (annotate_value): Look up expression for\n+\tinsertion in the cache at the end.\n+\n 2011-09-19  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gcc-interface/Make-lang.in: Update dependencies."}, {"sha": "a6bfd37c41f752cd7723d8884e2ba2b6d0954611", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e871c15e0beddce2226f3bf8fb96f2fb214b28e/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e871c15e0beddce2226f3bf8fb96f2fb214b28e/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=0e871c15e0beddce2226f3bf8fb96f2fb214b28e", "patch": "@@ -7471,23 +7471,26 @@ annotate_value (tree gnu_size)\n {\n   TCode tcode;\n   Node_Ref_Or_Val ops[3], ret;\n-  struct tree_int_map **h = NULL;\n+  struct tree_int_map in;\n   int i;\n \n   /* See if we've already saved the value for this node.  */\n   if (EXPR_P (gnu_size))\n     {\n-      struct tree_int_map in;\n+      struct tree_int_map *e;\n+\n       if (!annotate_value_cache)\n         annotate_value_cache = htab_create_ggc (512, tree_int_map_hash,\n \t\t\t\t\t        tree_int_map_eq, 0);\n       in.base.from = gnu_size;\n-      h = (struct tree_int_map **)\n-\t    htab_find_slot (annotate_value_cache, &in, INSERT);\n+      e = (struct tree_int_map *)\n+\t    htab_find (annotate_value_cache, &in);\n \n-      if (*h)\n-\treturn (Node_Ref_Or_Val) (*h)->to;\n+      if (e)\n+\treturn (Node_Ref_Or_Val) e->to;\n     }\n+  else\n+    in.base.from = NULL_TREE;\n \n   /* If we do not return inside this switch, TCODE will be set to the\n      code to use for a Create_Node operand and LEN (set above) will be\n@@ -7588,8 +7591,17 @@ annotate_value (tree gnu_size)\n   ret = Create_Node (tcode, ops[0], ops[1], ops[2]);\n \n   /* Save the result in the cache.  */\n-  if (h)\n+  if (in.base.from)\n     {\n+      struct tree_int_map **h;\n+      /* We can't assume the hash table data hasn't moved since the\n+\t initial look up, so we have to search again.  Allocating and\n+\t inserting an entry at that point would be an alternative, but\n+\t then we'd better discard the entry if we decided not to cache\n+\t it.  */\n+      h = (struct tree_int_map **)\n+\t    htab_find_slot (annotate_value_cache, &in, INSERT);\n+      gcc_assert (!*h);\n       *h = ggc_alloc_tree_int_map ();\n       (*h)->base.from = gnu_size;\n       (*h)->to = ret;"}]}