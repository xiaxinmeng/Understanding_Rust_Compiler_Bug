{"sha": "a58be199f15e5b657dae09009a67369cde60f345", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU4YmUxOTlmMTVlNWI2NTdkYWUwOTAwOWE2NzM2OWNkZTYwZjM0NQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2002-12-13T23:07:47Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2002-12-13T23:07:47Z"}, "message": "mn10300.c (print_operand): Check operand's range.\n\n* config/mn10300/mn10300.c (print_operand) <case N>: Check\noperand's range.  Print value directly, without aid from\noutput_address.\n<case U>: New.\n<case S>: Make sure argument to fprintf has the right type.\n* config/mn10300/mn10300.h (OK_FOR_T): New macro.\n(EXTRA_CONSTRAINT): Adjust.\n* config/mn10300/mn10300.md: Add new all-QImode pattern for\nbclr.  Use %U for immediate operands of bset and bclr.\n(iorqi3): New expand, with insns for AM33 and mn10300.\n\nFrom-SVN: r60109", "tree": {"sha": "7a9657cf5fbd4d7bd8cdc6c2eefd735cd205ac9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a9657cf5fbd4d7bd8cdc6c2eefd735cd205ac9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a58be199f15e5b657dae09009a67369cde60f345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a58be199f15e5b657dae09009a67369cde60f345", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a58be199f15e5b657dae09009a67369cde60f345", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a58be199f15e5b657dae09009a67369cde60f345/comments", "author": null, "committer": null, "parents": [{"sha": "0edcfdcb7388dedcae6d92f4bc6d1d40c0fee114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0edcfdcb7388dedcae6d92f4bc6d1d40c0fee114", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0edcfdcb7388dedcae6d92f4bc6d1d40c0fee114"}], "stats": {"total": 92, "additions": 85, "deletions": 7}, "files": [{"sha": "d1036a4fc888cadcd2e77172de6f9c8f1fc48f34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58be199f15e5b657dae09009a67369cde60f345/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58be199f15e5b657dae09009a67369cde60f345/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a58be199f15e5b657dae09009a67369cde60f345", "patch": "@@ -1,3 +1,16 @@\n+Fri Dec 13 21:07:18 2002  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* config/mn10300/mn10300.c (print_operand) <case N>: Check\n+\toperand's range.  Print value directly, without aid from\n+\toutput_address.\n+\t<case U>: New.\n+\t<case S>: Make sure argument to fprintf has the right type.\n+\t* config/mn10300/mn10300.h (OK_FOR_T): New macro.\n+\t(EXTRA_CONSTRAINT): Adjust.\n+\t* config/mn10300/mn10300.md: Add new all-QImode pattern for\n+\tbclr.  Use %U for immediate operands of bset and bclr.\n+\t(iorqi3): New expand, with insns for AM33 and mn10300.\n+\n Fri Dec 13 16:02:27 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n \n \t* sh.c (sh_register_operand): New function."}, {"sha": "3bad60b74758a4a2af9e5487d228d292fc9dc18f", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58be199f15e5b657dae09009a67369cde60f345/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58be199f15e5b657dae09009a67369cde60f345/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=a58be199f15e5b657dae09009a67369cde60f345", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for Matsushita MN10300 series\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002\n    Free Software Foundation, Inc.\n    Contributed by Jeff Law (law@cygnus.com).\n \n@@ -264,7 +264,15 @@ print_operand (file, x, code)\n \tbreak;\n \n       case 'N':\n-\toutput_address (GEN_INT ((~INTVAL (x)) & 0xff));\n+\tif (INTVAL (x) < -128 || INTVAL (x) > 255)\n+\t  abort ();\n+\tfprintf (file, \"%d\", (int)((~INTVAL (x)) & 0xff));\n+\tbreak;\n+\n+      case 'U':\n+\tif (INTVAL (x) < -128 || INTVAL (x) > 255)\n+\t  abort ();\n+\tfprintf (file, \"%d\", (int)(INTVAL (x) & 0xff));\n \tbreak;\n \n       /* For shift counts.  The hardware ignores the upper bits of\n@@ -274,7 +282,7 @@ print_operand (file, x, code)\n       case 'S':\n \tif (GET_CODE (x) == CONST_INT)\n \t  {\n-\t    fprintf (file, \"%d\", INTVAL (x) & 0x1f);\n+\t    fprintf (file, \"%d\", (int)(INTVAL (x) & 0x1f));\n \t    break;\n \t  }\n \t/* FALL THROUGH */"}, {"sha": "f3cf9b639e75592f4b9e99b9442ec665c210d861", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58be199f15e5b657dae09009a67369cde60f345/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58be199f15e5b657dae09009a67369cde60f345/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=a58be199f15e5b657dae09009a67369cde60f345", "patch": "@@ -678,9 +678,17 @@ struct cum_arg {int nbytes; };\n \t    && GET_CODE (XEXP (XEXP (OP, 0), 1)) == CONST_INT\t\\\n \t    && INT_8_BITS (INTVAL (XEXP (XEXP (OP, 0), 1))))))\n \t \n+#define OK_FOR_T(OP) \\\n+   (GET_CODE (OP) == MEM\t\t\t\t\t\\\n+    && GET_MODE (OP) == QImode\t\t\t\t\t\\\n+    && (GET_CODE (XEXP (OP, 0)) == REG\t\t\t\t\\\n+\t&& REG_OK_FOR_BIT_BASE_P (XEXP (OP, 0))\t\t\t\\\n+\t&& XEXP (OP, 0) != stack_pointer_rtx))\n+\n #define EXTRA_CONSTRAINT(OP, C) \\\n  ((C) == 'R' ? OK_FOR_R (OP) \\\n   : (C) == 'S' ? GET_CODE (OP) == SYMBOL_REF \\\n+  : (C) == 'T' ? OK_FOR_T (OP) \\\n   : 0)\n \n /* Maximum number of registers that can appear in a valid memory address.  */"}, {"sha": "770f7c5428e189a4f3009b212b4eec9ee97429b4", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 53, "deletions": 4, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a58be199f15e5b657dae09009a67369cde60f345/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a58be199f15e5b657dae09009a67369cde60f345/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=a58be199f15e5b657dae09009a67369cde60f345", "patch": "@@ -1,5 +1,5 @@\n ;; GCC machine description for Matsushita MN10300\n-;; Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001\n+;; Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002\n ;; Free Software Foundation, Inc.\n ;; Contributed by Jeff Law (law@cygnus.com).\n \n@@ -1257,17 +1257,66 @@\n   and %1,%0\"\n   [(set_attr \"cc\" \"clobber,set_znv\")])\n \n+(define_insn \"\"\n+  [(set (match_operand:QI 0 \"memory_operand\" \"=R,T\")\n+\t(and:QI\n+\t (match_dup 0)\n+\t (not:QI (match_operand:QI 1 \"nonmemory_operand\" \"i,d\"))))]\n+  \"\"\n+  \"@\n+  bclr %U1,%A0\n+  bclr %1,%0\"\n+  [(set_attr \"cc\" \"clobber,clobber\")])\n+\n (define_insn \"\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"+R,d\")\n \t(subreg:QI\n \t  (ior:SI (subreg:SI (match_dup 0) 0)\n \t\t  (match_operand:SI 1 \"const_int_operand\" \"i,i\")) 0))]\n   \"\"\n   \"@\n-  bset %1,%A0\n+  bset %U1,%A0\n   or %1,%0\"\n   [(set_attr \"cc\" \"clobber,set_znv\")])\n \n+(define_expand \"iorqi3\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"\")\n+\t(ior:QI (match_operand:QI 1 \"nonimmediate_operand\" \"\")\n+\t\t(match_operand:QI 2 \"nonmemory_operand\" \"\")))]\n+  \"\"\n+  \"\")\n+\n+(define_insn \"\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=R,T,r\")\n+\t(ior:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n+\t\t;; This constraint should really be nonmemory_operand,\n+\t\t;; but making it general_operand, along with the\n+\t\t;; condition that not both input operands are MEMs, it\n+\t\t;; here helps combine do a better job.\n+\t\t(match_operand:QI 2 \"general_operand\" \"i,d,ir\")))]\n+  \"TARGET_AM33 &&\n+   (GET_CODE (operands[2]) != MEM || GET_CODE (operands[1]) != MEM)\"\n+  \"@\n+  bset %U2,%A0\n+  bset %2,%0\n+  or %2,%0\"\n+  [(set_attr \"cc\" \"clobber,clobber,set_znv\")])\n+\n+(define_insn \"\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=R,T,d\")\n+\t(ior:QI (match_operand:QI 1 \"nonimmediate_operand\" \"%0,0,0\")\n+\t\t;; This constraint should really be nonmemory_operand,\n+\t\t;; but making it general_operand, along with the\n+\t\t;; condition that not both input operands are MEMs, it\n+\t\t;; here helps combine do a better job.\n+\t\t(match_operand:QI 2 \"general_operand\" \"i,d,id\")))]\n+  \"GET_CODE (operands[2]) != MEM || GET_CODE (operands[1]) != MEM\"\n+  \"@\n+  bset %U2,%A0\n+  bset %2,%0\n+  or %2,%0\"\n+  [(set_attr \"cc\" \"clobber,clobber,set_znv\")])\n+\n (define_insn \"\"\n   [(set (cc0)\n      (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"dx\")\n@@ -1335,7 +1384,7 @@\n   if (GET_CODE (operands[0]) == REG)\n     output_asm_insn (\\\"btst %1,%0\\\", xoperands);\n   else\n-    output_asm_insn (\\\"btst %1,%A0\\\", xoperands);\n+    output_asm_insn (\\\"btst %U1,%A0\\\", xoperands);\n   return \\\"\\\";\n }\"\n   [(set_attr \"cc\" \"clobber\")])\n@@ -1354,7 +1403,7 @@\n        (match_operand:SI 1 \"const_8bit_operand\" \"\")))]\n   \"\"\n   \"@\n-  btst %1,%A0\n+  btst %U1,%A0\n   btst %1,%0\"\n   [(set_attr \"cc\" \"clobber\")])\n "}]}