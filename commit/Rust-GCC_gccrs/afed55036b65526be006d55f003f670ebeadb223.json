{"sha": "afed55036b65526be006d55f003f670ebeadb223", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZlZDU1MDM2YjY1NTI2YmUwMDZkNTVmMDAzZjY3MGViZWFkYjIyMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-02-22T15:43:56Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-02-22T15:51:45Z"}, "message": "c++: Recursing header imports and other duplicates [PR 99174]\n\nThe fix for 98741 introduced two issues.  (a) recursive header units\niced because we tried to read the preprocessor state after having\nfailed to read the config.  (b) we could have duplicate imports of\nnamed modules in our pending queue, and that would lead to duplicate\nrequests for pathnames, which coupled with the use of a null-pathname\nto indicate we'd asked could lead to desynchronization with the module\nmapper.  Fixed by adding a 'visited' flag to module state, so we ask\nexactly once.\n\n\tPR c++/99174\n\tgcc/cp\n\t* module.cc (struct module_state): Add visited_p flag.\n\t(name_pending_imports): Use it to avoid duplicate requests.\n\t(preprocess_module): Don't read preprocessor state if we failed to\n\tload a module's config.\n\tgcc/testsuite/\n\t* g++.dg/modules/pr99174-1_a.C: New.\n\t* g++.dg/modules/pr99174-1_b.C: New.\n\t* g++.dg/modules/pr99174-1_c.C: New.\n\t* g++.dg/modules/pr99174.H: New.", "tree": {"sha": "39a327a5f54eae98a7b1bc99bbff81de1de18540", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39a327a5f54eae98a7b1bc99bbff81de1de18540"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afed55036b65526be006d55f003f670ebeadb223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afed55036b65526be006d55f003f670ebeadb223", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afed55036b65526be006d55f003f670ebeadb223", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afed55036b65526be006d55f003f670ebeadb223/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d789cf134b7e04ffd90e9512e3e591bd16dc6655", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d789cf134b7e04ffd90e9512e3e591bd16dc6655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d789cf134b7e04ffd90e9512e3e591bd16dc6655"}], "stats": {"total": 65, "additions": 48, "deletions": 17}, "files": [{"sha": "766f2ab853dc68c44aab48291789e0e030d0a926", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afed55036b65526be006d55f003f670ebeadb223/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afed55036b65526be006d55f003f670ebeadb223/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=afed55036b65526be006d55f003f670ebeadb223", "patch": "@@ -3551,9 +3551,10 @@ class GTY((chain_next (\"%h.parent\"), for_user)) module_state {\n   bool call_init_p : 1; /* This module's global initializer needs\n \t\t\t   calling.  */\n   bool inform_read_p : 1; /* Inform of a read.  */\n+  bool visited_p : 1;    /* A walk-once flag. */\n   /* Record extensions emitted or permitted.  */\n   unsigned extensions : SE_BITS;\n-  /* 13 bits used, 3 bits remain  */\n+  /* 14 bits used, 2 bits remain  */\n \n  public:\n   module_state (tree name, module_state *, bool);\n@@ -3787,6 +3788,7 @@ module_state::module_state (tree name, module_state *parent, bool partition)\n   partition_p = partition;\n \n   inform_read_p = false;\n+  visited_p = false;\n \n   extensions = 0;\n   if (name && TREE_CODE (name) == STRING_CST)\n@@ -19305,16 +19307,16 @@ name_pending_imports (cpp_reader *reader, bool at_end)\n     {\n       module_state *module = (*pending_imports)[ix];\n       gcc_checking_assert (module->is_direct ());\n-      if (!module->filename)\n+      if (!module->filename\n+\t  && !module->visited_p\n+\t  && (module->is_header () || !only_headers))\n \t{\n-\t  Cody::Flags flags\n-\t    = (flag_preprocess_only ? Cody::Flags::None\n-\t       : Cody::Flags::NameOnly);\n+\t  module->visited_p = true;\n+\t  Cody::Flags flags = (flag_preprocess_only\n+\t\t\t       ? Cody::Flags::None : Cody::Flags::NameOnly);\n \n-\t  if (only_headers && !module->is_header ())\n-\t    ;\n-\t  else if (module->module_p\n-\t\t   && (module->is_partition () || module->exported_p))\n+\t  if (module->module_p\n+\t      && (module->is_partition () || module->exported_p))\n \t    mapper->ModuleExport (module->get_flatname (), flags);\n \t  else\n \t    mapper->ModuleImport (module->get_flatname (), flags);\n@@ -19326,15 +19328,13 @@ name_pending_imports (cpp_reader *reader, bool at_end)\n   for (unsigned ix = 0; ix != pending_imports->length (); ix++)\n     {\n       module_state *module = (*pending_imports)[ix];\n-      gcc_checking_assert (module->is_direct ());\n-      if (only_headers && !module->is_header ())\n-\t;\n-      else if (!module->filename)\n+      if (module->visited_p)\n \t{\n-\t  Cody::Packet const &p = *r_iter;\n-\t  ++r_iter;\n+\t  module->visited_p = false;\n+\t  gcc_checking_assert (!module->filename);\n \n-\t  module->set_filename (p);\n+\t  module->set_filename (*r_iter);\n+\t  ++r_iter;\n \t}\n     }\n \n@@ -19444,7 +19444,8 @@ preprocess_module (module_state *module, location_t from_loc,\n \t  /* Now read the preprocessor state of this particular\n \t     import.  */\n \t  unsigned n = dump.push (module);\n-\t  if (module->read_preprocessor (true))\n+\t  if (module->loadedness == ML_CONFIG\n+\t      && module->read_preprocessor (true))\n \t    module->import_macros ();\n \t  dump.pop (n);\n "}, {"sha": "c22b45bff4548231f4eb1c5f98528175abdb6f5b", "filename": "gcc/testsuite/g++.dg/modules/pr99174-1_a.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afed55036b65526be006d55f003f670ebeadb223/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99174-1_a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afed55036b65526be006d55f003f670ebeadb223/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99174-1_a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99174-1_a.C?ref=afed55036b65526be006d55f003f670ebeadb223", "patch": "@@ -0,0 +1,8 @@\n+// PR 99174 what if we import the same module twice (with no\n+// intervening header import)?\n+// { dg-additional-options -fmodules-ts }\n+\n+export module Foo;\n+// { dg-module-cmi Foo }\n+\n+export void Foo ();"}, {"sha": "aaa0a9492ad0df8203365d4072c118b894d89e0f", "filename": "gcc/testsuite/g++.dg/modules/pr99174-1_b.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afed55036b65526be006d55f003f670ebeadb223/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99174-1_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afed55036b65526be006d55f003f670ebeadb223/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99174-1_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99174-1_b.C?ref=afed55036b65526be006d55f003f670ebeadb223", "patch": "@@ -0,0 +1,6 @@\n+// { dg-additional-options -fmodules-ts }\n+\n+export module Bar;\n+// { dg-module-cmi Bar }\n+\n+export void Bar ();"}, {"sha": "58936f292f86d6e374fb10598423c7d556e5a254", "filename": "gcc/testsuite/g++.dg/modules/pr99174-1_c.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afed55036b65526be006d55f003f670ebeadb223/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99174-1_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afed55036b65526be006d55f003f670ebeadb223/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99174-1_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99174-1_c.C?ref=afed55036b65526be006d55f003f670ebeadb223", "patch": "@@ -0,0 +1,11 @@\n+// { dg-additional-options -fmodules-ts }\n+\n+import Foo;\n+import Foo;\n+import Bar;\n+\n+int main ()\n+{\n+  Foo ();\n+  Bar ();\n+}"}, {"sha": "62d5513b19a93b1d4f616b0ef90053b071764e48", "filename": "gcc/testsuite/g++.dg/modules/pr99174.H", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afed55036b65526be006d55f003f670ebeadb223/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99174.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afed55036b65526be006d55f003f670ebeadb223/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99174.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99174.H?ref=afed55036b65526be006d55f003f670ebeadb223", "patch": "@@ -0,0 +1,5 @@\n+// { dg-additional-options -fmodule-header }\n+// { dg-module-cmi !{} }\n+import \"pr99174.H\"; // { dg-error \"cannot import\" }\n+\n+// { dg-prune-output {not writing module} }"}]}