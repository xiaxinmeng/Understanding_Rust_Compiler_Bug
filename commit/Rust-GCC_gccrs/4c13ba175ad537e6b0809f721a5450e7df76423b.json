{"sha": "4c13ba175ad537e6b0809f721a5450e7df76423b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGMxM2JhMTc1YWQ1MzdlNmIwODA5ZjcyMWE1NDUwZTdkZjc2NDIzYg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2016-09-13T10:42:39Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2016-09-13T10:42:39Z"}, "message": "c-typeck.c (build_unary_op): Rename FLAG parameter to NOCONVERT.\n\n\t* c-typeck.c (build_unary_op): Rename FLAG parameter to NOCONVERT.  Use\n\tit.\n\nFrom-SVN: r240109", "tree": {"sha": "0dfac2a9a2f1861943299a4016b6f0771127b8a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dfac2a9a2f1861943299a4016b6f0771127b8a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c13ba175ad537e6b0809f721a5450e7df76423b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c13ba175ad537e6b0809f721a5450e7df76423b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c13ba175ad537e6b0809f721a5450e7df76423b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c13ba175ad537e6b0809f721a5450e7df76423b/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "caa05ce2013e867928534e2b4cf146d7e35bbeaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/caa05ce2013e867928534e2b4cf146d7e35bbeaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/caa05ce2013e867928534e2b4cf146d7e35bbeaf"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "c856374993958813fa1c3fba2d00ae42810aed72", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c13ba175ad537e6b0809f721a5450e7df76423b/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c13ba175ad537e6b0809f721a5450e7df76423b/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=4c13ba175ad537e6b0809f721a5450e7df76423b", "patch": "@@ -1,3 +1,8 @@\n+2016-09-13  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-typeck.c (build_unary_op): Rename FLAG parameter to NOCONVERT.  Use\n+\tit.\n+\n 2016-09-12  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR c++/77496"}, {"sha": "8c7f89542b7a68e3d54b955a9d0a9079e9c0b920", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c13ba175ad537e6b0809f721a5450e7df76423b/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c13ba175ad537e6b0809f721a5450e7df76423b/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=4c13ba175ad537e6b0809f721a5450e7df76423b", "patch": "@@ -4112,17 +4112,17 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n /* Construct and perhaps optimize a tree representation\n    for a unary operation.  CODE, a tree_code, specifies the operation\n    and XARG is the operand.\n-   For any CODE other than ADDR_EXPR, FLAG nonzero suppresses\n+   For any CODE other than ADDR_EXPR, NOCONVERT nonzero suppresses\n    the default promotions (such as from short to int).\n-   For ADDR_EXPR, the default promotions are not applied; FLAG nonzero\n+   For ADDR_EXPR, the default promotions are not applied; NOCONVERT nonzero\n    allows non-lvalues; this is only used to handle conversion of non-lvalue\n    arrays to pointers in C99.\n \n    LOCATION is the location of the operator.  */\n \n tree\n-build_unary_op (location_t location,\n-\t\tenum tree_code code, tree xarg, int flag)\n+build_unary_op (location_t location, enum tree_code code, tree xarg,\n+\t\tint noconvert)\n {\n   /* No default_conversion here.  It causes trouble for ADDR_EXPR.  */\n   tree arg = xarg;\n@@ -4131,7 +4131,6 @@ build_unary_op (location_t location,\n   tree val;\n   tree ret = error_mark_node;\n   tree eptype = NULL_TREE;\n-  int noconvert = flag;\n   const char *invalid_op_diag;\n   bool int_operands;\n \n@@ -4276,7 +4275,8 @@ build_unary_op (location_t location,\n       if (TREE_CODE (arg) == C_MAYBE_CONST_EXPR)\n \t{\n \t  tree inner = build_unary_op (location, code,\n-\t\t\t\t       C_MAYBE_CONST_EXPR_EXPR (arg), flag);\n+\t\t\t\t       C_MAYBE_CONST_EXPR_EXPR (arg),\n+\t\t\t\t       noconvert);\n \t  if (inner == error_mark_node)\n \t    return error_mark_node;\n \t  ret = build2 (C_MAYBE_CONST_EXPR, TREE_TYPE (inner),\n@@ -4486,7 +4486,7 @@ build_unary_op (location_t location,\n \n       /* Anything not already handled and not a true memory reference\n \t or a non-lvalue array is an error.  */\n-      if (typecode != FUNCTION_TYPE && !flag\n+      if (typecode != FUNCTION_TYPE && !noconvert\n \t  && !lvalue_or_else (location, arg, lv_addressof))\n \treturn error_mark_node;\n \n@@ -4495,7 +4495,8 @@ build_unary_op (location_t location,\n       if (TREE_CODE (arg) == C_MAYBE_CONST_EXPR)\n \t{\n \t  tree inner = build_unary_op (location, code,\n-\t\t\t\t       C_MAYBE_CONST_EXPR_EXPR (arg), flag);\n+\t\t\t\t       C_MAYBE_CONST_EXPR_EXPR (arg),\n+\t\t\t\t       noconvert);\n \t  ret = build2 (C_MAYBE_CONST_EXPR, TREE_TYPE (inner),\n \t\t\tC_MAYBE_CONST_EXPR_PRE (arg), inner);\n \t  gcc_assert (!C_MAYBE_CONST_EXPR_INT_OPERANDS (arg));"}]}