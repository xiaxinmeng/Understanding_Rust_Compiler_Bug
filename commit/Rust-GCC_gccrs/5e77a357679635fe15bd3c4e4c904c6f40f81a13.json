{"sha": "5e77a357679635fe15bd3c4e4c904c6f40f81a13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU3N2EzNTc2Nzk2MzVmZTE1YmQzYzRlNGM5MDRjNmY0MGY4MWExMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-04-20T13:54:45Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-04-20T13:54:45Z"}, "message": "sstream.tcc (pbackfail): Remove redundant NULL pointer check from test involving _M_in_*.\n\n2003-04-20  Paolo Carlini  <pcarlini@unitus.it>\n\n\t* include/bits/sstream.tcc (pbackfail): Remove redundant\n\tNULL pointer check from test involving _M_in_*.\n\t(overflow, seekoff, seekpos): Const qualify bool variables.\n\t* include/std/std_sstream.h (underflow): Remove redundant\n\tNULL pointer check from test involving _M_in_*.\n\t(_M_really_sync): Const qualify bool variables.\n\t* src/fstream.cc (_M_underflow_common): Remove redundant\n\tNULL pointer check from test involving _M_in_*, const qualify\n\tbool variables.\n\n\t* include/std/std_streambuf.h (sgetc): Remove redundant\n\tvariable.\n\nFrom-SVN: r65853", "tree": {"sha": "b2849bcde361bd07d9dbc9f5ee4ba543a1c85d15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2849bcde361bd07d9dbc9f5ee4ba543a1c85d15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e77a357679635fe15bd3c4e4c904c6f40f81a13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e77a357679635fe15bd3c4e4c904c6f40f81a13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e77a357679635fe15bd3c4e4c904c6f40f81a13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e77a357679635fe15bd3c4e4c904c6f40f81a13/comments", "author": null, "committer": null, "parents": [{"sha": "1052bb09b809f7fb7d14a417b3a9d2316a57db42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1052bb09b809f7fb7d14a417b3a9d2316a57db42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1052bb09b809f7fb7d14a417b3a9d2316a57db42"}], "stats": {"total": 69, "additions": 42, "deletions": 27}, "files": [{"sha": "6f46b916fb3026f711363f3f76ac1904c32a22d7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e77a357679635fe15bd3c4e4c904c6f40f81a13/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e77a357679635fe15bd3c4e4c904c6f40f81a13/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5e77a357679635fe15bd3c4e4c904c6f40f81a13", "patch": "@@ -1,3 +1,18 @@\n+2003-04-20  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\t* include/bits/sstream.tcc (pbackfail): Remove redundant\n+\tNULL pointer check from test involving _M_in_*.\n+\t(overflow, seekoff, seekpos): Const qualify bool variables.\n+\t* include/std/std_sstream.h (underflow): Remove redundant\n+\tNULL pointer check from test involving _M_in_*.\n+\t(_M_really_sync): Const qualify bool variables.\n+\t* src/fstream.cc (_M_underflow_common): Remove redundant\n+\tNULL pointer check from test involving _M_in_*, const qualify\n+\tbool variables.\n+\n+\t* include/std/std_streambuf.h (sgetc): Remove redundant\n+\tvariable.\n+\n 2003-04-18  Paolo Carlini  <pcarlini@unitus.it>\n \n \tAccording to 5.9 para 2 (second bullet) for pointers p, q"}, {"sha": "9160b5a8a9d64d65336a4dfb534a0fff285a8642", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e77a357679635fe15bd3c4e4c904c6f40f81a13/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e77a357679635fe15bd3c4e4c904c6f40f81a13/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=5e77a357679635fe15bd3c4e4c904c6f40f81a13", "patch": "@@ -47,8 +47,9 @@ namespace std\n     pbackfail(int_type __c)\n     {\n       int_type __ret = traits_type::eof();\n-      bool __testeof = traits_type::eq_int_type(__c, traits_type::eof());\n-      bool __testpos = this->_M_in_cur && this->_M_in_beg < this->_M_in_cur; \n+      const bool __testeof = \n+\ttraits_type::eq_int_type(__c, traits_type::eof());\n+      const bool __testpos = this->_M_in_beg < this->_M_in_cur; \n       \n       // Try to put back __c into input sequence in one of three ways.\n       // Order these tests done in is unspecified by the standard.\n@@ -80,11 +81,12 @@ namespace std\n     basic_stringbuf<_CharT, _Traits, _Alloc>::\n     overflow(int_type __c)\n     {\n-      bool __testout = this->_M_mode & ios_base::out;\n+      const bool __testout = this->_M_mode & ios_base::out;\n       if (__builtin_expect(!__testout, false))\n \treturn traits_type::eof();\n \n-      bool __testeof = traits_type::eq_int_type(__c, traits_type::eof());\n+      const bool __testeof =\n+\ttraits_type::eq_int_type(__c, traits_type::eof());\n       if (__builtin_expect(__testeof, false))\n \treturn traits_type::not_eof(__c);\n \n@@ -94,7 +96,7 @@ namespace std\n       // suit particular needs.\n       __size_type __len = std::max(__size_type(_M_string.capacity() + 1),\n \t\t\t\t   __size_type(512));\n-      bool __testput = this->_M_out_cur < this->_M_out_end;\n+      const bool __testput = this->_M_out_cur < this->_M_out_end;\n       if (__builtin_expect(!__testput && __len > _M_string.max_size(), false))\n \treturn traits_type::eof();\n \n@@ -123,7 +125,7 @@ namespace std\n       pos_type __ret =  pos_type(off_type(-1)); \n       bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;\n       bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;\n-      bool __testboth = __testin && __testout && __way != ios_base::cur;\n+      const bool __testboth = __testin && __testout && __way != ios_base::cur;\n       __testin &= !(__mode & ios_base::out);\n       __testout &= !(__mode & ios_base::in);\n \n@@ -189,8 +191,8 @@ namespace std\n \t  off_type __pos = __sp; // Use streamoff operator to do conversion.\n \t  char_type* __beg = NULL;\n \t  char_type* __end = NULL;\n-\t  bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;\n-\t  bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;\n+\t  const bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;\n+\t  const bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;\n \t  \n \t  // NB: Ordered.\n \t  bool __testposi = false;"}, {"sha": "48b81cd8d95bb281eb0d400f577f17b24e52ad85", "filename": "libstdc++-v3/include/std/std_sstream.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e77a357679635fe15bd3c4e4c904c6f40f81a13/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e77a357679635fe15bd3c4e4c904c6f40f81a13/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h?ref=5e77a357679635fe15bd3c4e4c904c6f40f81a13", "patch": "@@ -190,7 +190,7 @@ namespace std\n       virtual int_type\n       underflow()\n       {\n-\tif (this->_M_in_cur && this->_M_in_cur < this->_M_in_end)\n+\tif (this->_M_in_cur < this->_M_in_end)\n \t  return traits_type::to_int_type(*gptr());\n \telse\n \t  return traits_type::eof();\n@@ -260,8 +260,8 @@ namespace std\n       virtual void\n       _M_really_sync(char_type* __base, __size_type __i, __size_type __o)\n       {\n-\tbool __testin = this->_M_mode & ios_base::in;\n-\tbool __testout = this->_M_mode & ios_base::out;\n+\tconst bool __testin = this->_M_mode & ios_base::in;\n+\tconst bool __testout = this->_M_mode & ios_base::out;\n \t__size_type __len = _M_string.size();\n \n \tthis->_M_buf = __base;"}, {"sha": "658b02f46ccc5df661e9efae84ade6f5d0fa7147", "filename": "libstdc++-v3/include/std/std_streambuf.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e77a357679635fe15bd3c4e4c904c6f40f81a13/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e77a357679635fe15bd3c4e4c904c6f40f81a13/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_streambuf.h?ref=5e77a357679635fe15bd3c4e4c904c6f40f81a13", "patch": "@@ -452,12 +452,10 @@ namespace std\n       int_type \n       sgetc()\n       {\n-\tint_type __ret;\n \tif (_M_in_cur < _M_in_end)\n-\t  __ret = traits_type::to_int_type(*(this->gptr()));\n+\t  return traits_type::to_int_type(*(this->gptr()));\n \telse \n-\t  __ret = this->underflow();\n-\treturn __ret;\n+\t  return this->underflow();\n       }\n \n       /**"}, {"sha": "e79659d38a723581fb775a5f2a9495d4340e77fd", "filename": "libstdc++-v3/src/fstream.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e77a357679635fe15bd3c4e4c904c6f40f81a13/libstdc%2B%2B-v3%2Fsrc%2Ffstream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e77a357679635fe15bd3c4e4c904c6f40f81a13/libstdc%2B%2B-v3%2Fsrc%2Ffstream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffstream.cc?ref=5e77a357679635fe15bd3c4e4c904c6f40f81a13", "patch": "@@ -41,10 +41,10 @@ namespace std\n     basic_filebuf<char>::_M_underflow_common(bool __bump)\n     {\n       int_type __ret = traits_type::eof();\n-      bool __testin = _M_mode & ios_base::in;\n-      bool __testout = _M_mode & ios_base::out;\n+      const bool __testin = _M_mode & ios_base::in;\n+      const bool __testout = _M_mode & ios_base::out;\n       // Sync with stdio.\n-      bool __sync = _M_buf_size <= 1;\n+      const bool __sync = _M_buf_size <= 1;\n \n       if (__testin)\n \t{\n@@ -54,7 +54,7 @@ namespace std\n \t  if (_M_pback_init)\n \t    _M_pback_destroy();\n \n-\t  if (_M_in_cur && _M_in_cur < _M_in_end)\n+\t  if (_M_in_cur < _M_in_end)\n \t    {\n \t      __ret = traits_type::to_int_type(*_M_in_cur);\n \t      if (__bump)\n@@ -64,8 +64,8 @@ namespace std\n \n \t  // Sync internal and external buffers.\n \t  // NB: __testget -> __testput as _M_buf_unified here.\n-\t  bool __testget = _M_in_cur && _M_in_beg < _M_in_cur;\n-\t  bool __testinit = _M_is_indeterminate();\n+\t  const bool __testget = _M_in_beg < _M_in_cur;\n+\t  const bool __testinit = _M_is_indeterminate();\n \t  if (__testget)\n \t    {\n \t      if (__testout)\n@@ -123,10 +123,10 @@ namespace std\n     basic_filebuf<wchar_t>::_M_underflow_common(bool __bump)\n     {\n       int_type __ret = traits_type::eof();\n-      bool __testin = _M_mode & ios_base::in;\n-      bool __testout = _M_mode & ios_base::out;\n+      const bool __testin = _M_mode & ios_base::in;\n+      const bool __testout = _M_mode & ios_base::out;\n       // Sync with stdio.\n-      bool __sync = _M_buf_size <= 1;\n+      const bool __sync = _M_buf_size <= 1;\n \n       if (__testin)\n \t{\n@@ -136,7 +136,7 @@ namespace std\n \t  if (_M_pback_init)\n \t    _M_pback_destroy();\n \n-\t  if (_M_in_cur && _M_in_cur < _M_in_end)\n+\t  if (_M_in_cur < _M_in_end)\n \t    {\n \t      __ret = traits_type::to_int_type(*_M_in_cur);\n \t      if (__bump)\n@@ -146,8 +146,8 @@ namespace std\n \n \t  // Sync internal and external buffers.\n \t  // NB: __testget -> __testput as _M_buf_unified here.\n-\t  bool __testget = _M_in_cur && _M_in_beg < _M_in_cur;\n-\t  bool __testinit = _M_is_indeterminate();\n+\t  const bool __testget = _M_in_beg < _M_in_cur;\n+\t  const bool __testinit = _M_is_indeterminate();\n \t  if (__testget)\n \t    {\n \t      if (__testout)"}]}