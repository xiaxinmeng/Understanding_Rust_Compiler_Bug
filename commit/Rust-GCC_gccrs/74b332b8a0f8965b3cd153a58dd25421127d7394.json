{"sha": "74b332b8a0f8965b3cd153a58dd25421127d7394", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRiMzMyYjhhMGY4OTY1YjNjZDE1M2E1OGRkMjU0MjExMjdkNzM5NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-05-06T18:51:10Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-05-06T18:51:10Z"}, "message": "complex: Add missing extern template declarations.\n\n2007-05-06  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/std/complex: Add missing extern template declarations.\n\t* testsuite/26_numerics/complex/complex_inserters_extractors.cc:\n\tMove...\n\t* testsuite/26_numerics/complex/inserters_extractors/char/1.cc:\n\t... here.\n\t* testsuite/26_numerics/complex/inserters_extractors/wchar_t/1.cc:\n\tNew.\n\nFrom-SVN: r124477", "tree": {"sha": "5424e781b2697ab5fab983baa8b992fd93ceec9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5424e781b2697ab5fab983baa8b992fd93ceec9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74b332b8a0f8965b3cd153a58dd25421127d7394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74b332b8a0f8965b3cd153a58dd25421127d7394", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74b332b8a0f8965b3cd153a58dd25421127d7394", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74b332b8a0f8965b3cd153a58dd25421127d7394/comments", "author": null, "committer": null, "parents": [{"sha": "3fc0889aa7740d26efd760f65ef333b88ab7f859", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fc0889aa7740d26efd760f65ef333b88ab7f859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fc0889aa7740d26efd760f65ef333b88ab7f859"}], "stats": {"total": 175, "additions": 170, "deletions": 5}, "files": [{"sha": "ec746b2802b6994d4b0dfffa93647552b0992e7f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74b332b8a0f8965b3cd153a58dd25421127d7394/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74b332b8a0f8965b3cd153a58dd25421127d7394/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=74b332b8a0f8965b3cd153a58dd25421127d7394", "patch": "@@ -1,3 +1,13 @@\n+2007-05-06  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/std/complex: Add missing extern template declarations.\n+\t* testsuite/26_numerics/complex/complex_inserters_extractors.cc:\n+\tMove...\n+\t* testsuite/26_numerics/complex/inserters_extractors/char/1.cc:\n+\t... here.\n+\t* testsuite/26_numerics/complex/inserters_extractors/wchar_t/1.cc:\n+\tNew.\n+\n 2007-05-06  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/31834"}, {"sha": "04a6c69ba75363479d61cc6d25b78334c47b32c2", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74b332b8a0f8965b3cd153a58dd25421127d7394/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74b332b8a0f8965b3cd153a58dd25421127d7394/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=74b332b8a0f8965b3cd153a58dd25421127d7394", "patch": "@@ -1,6 +1,7 @@\n // The template and inlines for the -*- C++ -*- complex number classes.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+// 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -1484,6 +1485,27 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   complex<long double>::complex(const complex<double>& __z)\n   : _M_value(__z.__rep()) { }\n \n+  // Inhibit implicit instantiations for required instantiations,\n+  // which are defined via explicit instantiations elsewhere.\n+  // NB:  This syntax is a GNU extension.\n+#if _GLIBCXX_EXTERN_TEMPLATE\n+  extern template istream& operator>>(istream&, complex<float>&);\n+  extern template ostream& operator<<(ostream&, const complex<float>&);\n+  extern template istream& operator>>(istream&, complex<double>&);\n+  extern template ostream& operator<<(ostream&, const complex<double>&);\n+  extern template istream& operator>>(istream&, complex<long double>&);\n+  extern template ostream& operator<<(ostream&, const complex<long double>&);\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  extern template wistream& operator>>(wistream&, complex<float>&);\n+  extern template wostream& operator<<(wostream&, const complex<float>&);\n+  extern template wistream& operator>>(wistream&, complex<double>&);\n+  extern template wostream& operator<<(wostream&, const complex<double>&);\n+  extern template wistream& operator>>(wistream&, complex<long double>&);\n+  extern template wostream& operator<<(wostream&, const complex<long double>&);\n+#endif\n+#endif\n+\n _GLIBCXX_END_NAMESPACE\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__"}, {"sha": "9253f3ac61cc742222188be35f780d14dffa3696", "filename": "libstdc++-v3/testsuite/26_numerics/complex/inserters_extractors/char/1.cc", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74b332b8a0f8965b3cd153a58dd25421127d7394/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Finserters_extractors%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74b332b8a0f8965b3cd153a58dd25421127d7394/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Finserters_extractors%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Finserters_extractors%2Fchar%2F1.cc?ref=74b332b8a0f8965b3cd153a58dd25421127d7394", "patch": "@@ -137,7 +137,3 @@ main()\n \n   return 0;\n }\n-\n-\n-\n-", "previous_filename": "libstdc++-v3/testsuite/26_numerics/complex/complex_inserters_extractors.cc"}, {"sha": "d49b2e6f5c3b188d814de809f7929146485be45f", "filename": "libstdc++-v3/testsuite/26_numerics/complex/inserters_extractors/wchar_t/1.cc", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74b332b8a0f8965b3cd153a58dd25421127d7394/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Finserters_extractors%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74b332b8a0f8965b3cd153a58dd25421127d7394/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Finserters_extractors%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Finserters_extractors%2Fwchar_t%2F1.cc?ref=74b332b8a0f8965b3cd153a58dd25421127d7394", "patch": "@@ -0,0 +1,137 @@\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+\n+#include <iostream>\n+#include <string>\n+#include <sstream>\n+#include <complex>\n+#include <testsuite_hooks.h>\n+#include <cmath>\n+\n+template<typename R>\n+inline bool flteq(R x, R y)\n+{\n+  if (x == R(0)) return y == R(0);\n+  else return std::fabs(x-y) < 1e-6*std::fabs(x);\n+}\n+\n+template<typename R>\n+int\n+test_good(std::wstring str, R x, R y)\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::complex<R> z;\n+  wchar_t ch;\n+  std::wistringstream iss(str);\n+  iss >> z >> ch;\n+  VERIFY( iss.good() );\n+  VERIFY( flteq(z.real(), x) );\n+  VERIFY( flteq(z.imag(), y) );\n+  VERIFY( ch == L'#' );\n+  return 0;\n+}\n+\n+template<typename R>\n+int\n+test_fail(std::wstring str)\n+{\n+  bool test __attribute__((unused)) = true;\n+  std::complex<R> z;\n+  std::wistringstream iss(str);\n+  iss >> z;\n+  VERIFY( iss.fail() && !iss.bad() );\n+  return 0;\n+}\n+\n+template<typename R>\n+int\n+testall()\n+{\n+  test_good<R>(L\"(-1.1,3.7)#\", -1.1, 3.7);\n+  test_good<R>(L\"(  .7e6  ,  \\n-3.1)#\", .7e6, -3.1);\n+  test_good<R>(L\"(\\t0,-1)#\", 0.0, -1.0);\n+  test_good<R>(L\"(-3.14)#\", -3.14, 0.0);\n+  test_good<R>(L\"-.1#\", -.1, 0.0);\n+  test_good<R>(L\" ( -2.7e3 )#\", -2.7e3, 0.0);\n+  test_good<R>(L\" -.1#\", -.1, 0.0);\n+  test_fail<R>(L\"(a,1)\");\n+  test_fail<R>(L\"(,1)\");\n+  test_fail<R>(L\"(1,a)\");\n+  test_fail<R>(L\"(1, )\");\n+  test_fail<R>(L\"|1,1)\");\n+  test_fail<R>(L\"(1|1)\");\n+  test_fail<R>(L\"(1,1|\");\n+  return 0;\n+}\n+\n+// libstdc++/2970\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+  \n+  complex<float> cf01(-1.1, -333.2);\n+  wstringstream ss;\n+  ss << cf01;\n+  wstring str = ss.str();\n+  VERIFY( str == L\"(-1.1,-333.2)\" );\n+}\n+\n+// libstdc++/2985\n+struct gnu_char_traits : public std::char_traits<wchar_t>\n+{ };\n+\n+typedef std::basic_ostringstream<wchar_t, gnu_char_traits> gnu_sstream;\n+template class std::basic_string<wchar_t, gnu_char_traits,\n+\t\t\t\t std::allocator<wchar_t> >;\n+\n+void test02()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  // Construct locale with specialized facets.\n+  typedef gnu_sstream::__num_put_type numput_type;\n+  typedef gnu_sstream::__num_get_type numget_type;\n+  std::locale loc_c = std::locale::classic();\n+  std::locale loc_1(loc_c, new numput_type);\n+  std::locale loc_2(loc_1, new numget_type);\n+  VERIFY( std::has_facet<numput_type>(loc_2) );\n+  VERIFY( std::has_facet<numget_type>(loc_2) );\n+\n+  gnu_sstream sstr;\n+  sstr.imbue(loc_2);\n+\n+\n+  std::complex<double> x(3, 4);\n+  sstr << x; \n+  VERIFY( sstr.str() == L\"(3,4)\" );\n+}\n+\n+int\n+main()\n+{\n+  testall<float>();\n+  testall<double>();\n+  testall<long double>();\n+\n+  test01();\n+  test02();\n+\n+  return 0;\n+}"}]}