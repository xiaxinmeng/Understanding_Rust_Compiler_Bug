{"sha": "e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJhNDBlMDhlMjZmOWYxZDRkZGJkY2IwODhhOTgwOTgxNGU0NGMyYQ==", "commit": {"author": {"name": "Thomas Young", "email": "wenzhang5800@gmail.com", "date": "2021-06-28T15:08:32Z"}, "committer": {"name": "Thomas Young", "email": "wenzhang5800@gmail.com", "date": "2021-06-29T13:56:23Z"}, "message": "Marking live symbol for struct construction.\nComment iterate_type_ribs of UnusedScan in order to resolve multiple struct unused report.", "tree": {"sha": "7a36c243dfd8362b260304dfd3f312e1ca86ac8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a36c243dfd8362b260304dfd3f312e1ca86ac8f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a/comments", "author": {"login": "thomasyonug", "id": 17464490, "node_id": "MDQ6VXNlcjE3NDY0NDkw", "avatar_url": "https://avatars.githubusercontent.com/u/17464490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasyonug", "html_url": "https://github.com/thomasyonug", "followers_url": "https://api.github.com/users/thomasyonug/followers", "following_url": "https://api.github.com/users/thomasyonug/following{/other_user}", "gists_url": "https://api.github.com/users/thomasyonug/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasyonug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasyonug/subscriptions", "organizations_url": "https://api.github.com/users/thomasyonug/orgs", "repos_url": "https://api.github.com/users/thomasyonug/repos", "events_url": "https://api.github.com/users/thomasyonug/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasyonug/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomasyonug", "id": 17464490, "node_id": "MDQ6VXNlcjE3NDY0NDkw", "avatar_url": "https://avatars.githubusercontent.com/u/17464490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomasyonug", "html_url": "https://github.com/thomasyonug", "followers_url": "https://api.github.com/users/thomasyonug/followers", "following_url": "https://api.github.com/users/thomasyonug/following{/other_user}", "gists_url": "https://api.github.com/users/thomasyonug/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomasyonug/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomasyonug/subscriptions", "organizations_url": "https://api.github.com/users/thomasyonug/orgs", "repos_url": "https://api.github.com/users/thomasyonug/repos", "events_url": "https://api.github.com/users/thomasyonug/events{/privacy}", "received_events_url": "https://api.github.com/users/thomasyonug/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bab6f6bcb299ac42096783cda32b8f11da4288ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab6f6bcb299ac42096783cda32b8f11da4288ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bab6f6bcb299ac42096783cda32b8f11da4288ca"}], "stats": {"total": 126, "additions": 88, "deletions": 38}, "files": [{"sha": "5cdb5d40f9daa1f1d2c9f034a1f76ae11d412625", "filename": "gcc/rust/lint/rust-lint-marklive.cc", "status": "modified", "additions": 33, "deletions": 25, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a/gcc%2Frust%2Flint%2Frust-lint-marklive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.cc?ref=e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a", "patch": "@@ -91,31 +91,39 @@ MarkLive::go (HIR::Crate &crate)\n void\n MarkLive::visit (HIR::PathInExpression &expr)\n {\n-  NodeId ast_node_id = expr.get_mappings ().get_nodeid ();\n-  NodeId ref_node_id = UNKNOWN_NODEID;\n-  if (resolver->lookup_resolved_name (ast_node_id, &ref_node_id))\n-    {\n-      Resolver::Definition def;\n-      if (!resolver->lookup_definition (ref_node_id, &def))\n-\t{\n-\t  rust_error_at (expr.get_locus (),\n-\t\t\t \"unknown reference for resolved name\");\n-\t  return;\n-\t}\n-      ref_node_id = def.parent;\n-      HirId ref;\n-      if (!mappings->lookup_node_to_hir (expr.get_mappings ().get_crate_num (),\n-\t\t\t\t\t ref_node_id, &ref))\n-\t{\n-\t  rust_error_at (expr.get_locus (), \"reverse lookup failure\");\n-\t  return;\n-\t}\n-      if (scannedSymbols.find (ref) == scannedSymbols.end ())\n-\t{\n-\t  worklist.push_back (ref);\n-\t}\n-      liveSymbols.emplace (ref);\n-    }\n+  expr.iterate_path_segments ([&] (HIR::PathExprSegment &seg) -> bool {\n+    NodeId ast_node_id = seg.get_mappings ().get_nodeid ();\n+    NodeId ref_node_id = UNKNOWN_NODEID;\n+    HirId ref;\n+    if (resolver->lookup_resolved_name (ast_node_id, &ref_node_id))\n+      {\n+\tResolver::Definition def;\n+\tif (!resolver->lookup_definition (ref_node_id, &def))\n+\t  {\n+\t    rust_error_at (seg.get_locus (),\n+\t\t\t   \"unknown reference for resolved name\");\n+\t    return false;\n+\t  }\n+\tref_node_id = def.parent;\n+      }\n+    else if (!resolver->lookup_resolved_type (ast_node_id, &ref_node_id))\n+      {\n+\treturn false;\n+      }\n+\n+    if (!mappings->lookup_node_to_hir (seg.get_mappings ().get_crate_num (),\n+\t\t\t\t       ref_node_id, &ref))\n+      {\n+\trust_error_at (seg.get_locus (), \"reverse lookup failure\");\n+\treturn false;\n+      }\n+    if (scannedSymbols.find (ref) == scannedSymbols.end ())\n+      {\n+\tworklist.push_back (ref);\n+      }\n+    liveSymbols.emplace (ref);\n+    return true;\n+  });\n }\n \n void"}, {"sha": "673639a039ed18d11df7cc5020e88d2213807bce", "filename": "gcc/rust/lint/rust-lint-marklive.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.h?ref=e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a", "patch": "@@ -201,12 +201,19 @@ class MarkLive : public MarkLiveBase\n       }\n   }\n \n+  void visit (HIR::StructExprStruct &stct) override\n+  {\n+    stct.get_struct_name ().accept_vis (*this);\n+  }\n+\n   void visit (HIR::StructExprStructFields &stct) override\n   {\n     stct.iterate ([&] (HIR::StructExprField *field) -> bool {\n       field->accept_vis (*this);\n       return true;\n     });\n+\n+    stct.get_struct_name ().accept_vis (*this);\n     if (stct.has_struct_base ())\n       {\n \tstct.struct_base->base_struct.get ()->accept_vis (*this);"}, {"sha": "1dee18aefe7367d726608dec7275576186102a93", "filename": "gcc/rust/lint/rust-lint-scan-deadcode.h", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h?ref=e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a", "patch": "@@ -46,20 +46,34 @@ class ScanDeadcode : public MarkLiveBase\n   void visit (HIR::Function &function) override\n   {\n     HirId hirId = function.get_mappings ().get_hirid ();\n-    if (live_symbols.find (hirId) == live_symbols.end ())\n-      {\n-\trust_warning_at (function.get_locus (), 0,\n-\t\t\t \"function is never used: %<%s%>\",\n-\t\t\t function.get_function_name ().c_str ());\n-\treturn;\n-      }\n+    warning (hirId, function.get_locus (), \"function\",\n+\t     function.get_function_name (), \"used\");\n+  }\n+\n+  void visit (HIR::StructStruct &stct) override\n+  {\n+    HirId hirId = stct.get_mappings ().get_hirid ();\n+    warning (hirId, stct.get_locus (), \"struct\", stct.get_identifier (),\n+\t     \"constructed\");\n   }\n \n private:\n   std::set<HirId> live_symbols;\n-  // std::set<HirId> dead_codes;\n+  Resolver::Resolver *resolver;\n \n-  ScanDeadcode (std::set<HirId> &live_symbols) : live_symbols (live_symbols){};\n+  ScanDeadcode (std::set<HirId> &live_symbols)\n+    : live_symbols (live_symbols), resolver (Resolver::Resolver::get ()){};\n+\n+  void warning (HirId hirId, Location loc, const std::string &span,\n+\t\tconst std::string &name, const std::string &participle) const\n+  {\n+    if (live_symbols.find (hirId) == live_symbols.end ())\n+      {\n+\trust_warning_at (loc, 0, \"%s is never %s: %<%s%>\", span.c_str (),\n+\t\t\t participle.c_str (), name.c_str ());\n+\treturn;\n+      }\n+  }\n };\n \n } // namespace Analysis"}, {"sha": "f60093cb6a4b364fc6d158cfd36a3d15b04a6b95", "filename": "gcc/rust/resolve/rust-ast-resolve-unused.h", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-unused.h?ref=e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a", "patch": "@@ -19,6 +19,7 @@\n #ifndef RUST_AST_RESOLVE_UNUSED_H\n #define RUST_AST_RESOLVE_UNUSED_H\n \n+#include \"rust-hir-map.h\"\n #include \"rust-ast-resolve-base.h\"\n \n namespace Rust {\n@@ -35,8 +36,20 @@ class ScanUnused\n       bool ok = r->lookup_canonical_path (decl_node_id, &ident);\n       rust_assert (ok);\n \n+      Analysis::Mappings *map = Analysis::Mappings::get ();\n+      HirId decl_hir_id;\n+      // ScanUnused is conflicting with the dead code analysis here on types and\n+      // functions. So just ignoring the warnings of item which will be handled\n+      // by dead code analysis.\n+      HIR::Item *found_item = nullptr;\n+      if (map->lookup_node_to_hir (r->get_crate_num (), decl_node_id,\n+\t\t\t\t   &decl_hir_id))\n+\t{\n+\t  found_item = map->lookup_hir_item (r->get_crate_num (), decl_hir_id);\n+\t}\n+\n       if (!r->have_references_for_node (decl_node_id)\n-\t  && ident.get ().at (0) != '_')\n+\t  && ident.get ().at (0) != '_' && !found_item)\n \t{\n \t  rust_warning_at (locus, 0, \"unused name '%s'\", ident.get ().c_str ());\n \t}\n@@ -48,7 +61,8 @@ class ScanUnused\n   {\n     auto resolver = Resolver::get ();\n     resolver->iterate_name_ribs ([&] (Rib *r) -> void { ScanRib (r); });\n-    resolver->iterate_type_ribs ([&] (Rib *r) -> void { ScanRib (r); });\n+    // ScanUnused is conflicting with the dead code analysis here on types.\n+    // resolver->iterate_type_ribs ([&] (Rib *r) -> void { ScanRib (r); });\n     resolver->iterate_label_ribs ([&] (Rib *r) -> void { ScanRib (r); });\n   }\n };"}, {"sha": "885221f66629a930315bd4e22af3678ec530496f", "filename": "gcc/testsuite/rust/compile/torture/cfg_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcfg_attr.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcfg_attr.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fcfg_attr.rs?ref=e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a", "patch": "@@ -2,7 +2,7 @@ use std::env; // Add one line so gccrs doesn't believe we're parsing a shebang\n \n #[cfg_attr(feature = \"somefeature\", attribute = \"someattr\")]\n struct Feature;\n-// { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n+// { dg-warning \"struct is never constructed\" \"\" { target *-*-* } .-1 }\n \n fn main() {\n }"}, {"sha": "db7eb8fc1fcd9a2ac5333c63c523a1315be6aec8", "filename": "gcc/testsuite/rust/compile/torture/unused1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused1.rs?ref=e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a", "patch": "@@ -4,7 +4,6 @@ fn test() -> i32 {\n \n fn unused() -> i32 {\n     // { dg-warning \"function is never used: 'unused'\" \"\" { target *-*-* } .-1 }\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-2 }\n     2\n }\n "}, {"sha": "3a20d6b2ee361cb52e2d69cc6bfe889aae769861", "filename": "gcc/testsuite/rust/compile/torture/unused_struct.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused_struct.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused_struct.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Funused_struct.rs?ref=e2a40e08e26f9f1d4ddbdcb088a9809814e44c2a", "patch": "@@ -0,0 +1,8 @@\n+struct Foo {\n+// { dg-warning \"struct is never constructed\" \"\" { target *-*-* } .-1 }\n+    one: i32,\n+    two: i32\n+}\n+\n+fn main() {\n+}\n\\ No newline at end of file"}]}