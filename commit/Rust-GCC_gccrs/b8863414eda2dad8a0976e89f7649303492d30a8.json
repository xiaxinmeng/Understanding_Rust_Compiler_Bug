{"sha": "b8863414eda2dad8a0976e89f7649303492d30a8", "node_id": "C_kwDOANBUbNoAKGI4ODYzNDE0ZWRhMmRhZDhhMDk3NmU4OWY3NjQ5MzAzNDkyZDMwYTg", "commit": {"author": {"name": "Jakub Dupak", "email": "dev@jakubdupak.com", "date": "2022-11-16T12:58:50Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2023-02-21T11:36:50Z"}, "message": "gccrs: ast: Dump generic parameters\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-dump.cc (Dump::visit): Add missing visitor.\n\t* ast/rust-ast-dump.h: Likewise.\n\nSigned-off-by: Jakub Dupak <dev@jakubdupak.com>", "tree": {"sha": "6330fa2fc5b72c2ecccab6d0d3492dc380add2f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6330fa2fc5b72c2ecccab6d0d3492dc380add2f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8863414eda2dad8a0976e89f7649303492d30a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8863414eda2dad8a0976e89f7649303492d30a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8863414eda2dad8a0976e89f7649303492d30a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8863414eda2dad8a0976e89f7649303492d30a8/comments", "author": {"login": "jdupak", "id": 22683640, "node_id": "MDQ6VXNlcjIyNjgzNjQw", "avatar_url": "https://avatars.githubusercontent.com/u/22683640?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdupak", "html_url": "https://github.com/jdupak", "followers_url": "https://api.github.com/users/jdupak/followers", "following_url": "https://api.github.com/users/jdupak/following{/other_user}", "gists_url": "https://api.github.com/users/jdupak/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdupak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdupak/subscriptions", "organizations_url": "https://api.github.com/users/jdupak/orgs", "repos_url": "https://api.github.com/users/jdupak/repos", "events_url": "https://api.github.com/users/jdupak/events{/privacy}", "received_events_url": "https://api.github.com/users/jdupak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1acb7e02ed829662965ddbf71c89210a22a9c980", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1acb7e02ed829662965ddbf71c89210a22a9c980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1acb7e02ed829662965ddbf71c89210a22a9c980"}], "stats": {"total": 132, "additions": 123, "deletions": 9}, "files": [{"sha": "03a57d416c4333cad06b5990549f3bdda570bccc", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 120, "deletions": 9, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8863414eda2dad8a0976e89f7649303492d30a8/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8863414eda2dad8a0976e89f7649303492d30a8/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=b8863414eda2dad8a0976e89f7649303492d30a8", "patch": "@@ -372,21 +372,134 @@ Dump::visit (PathInExpression &path)\n }\n \n void\n-Dump::visit (TypePathSegment &)\n-{}\n+Dump::visit (TypePathSegment &segment)\n+{\n+  // Syntax:\n+  //    PathIdentSegment\n+\n+  stream << segment.get_ident_segment ().as_string ();\n+}\n \n void\n-Dump::visit (TypePathSegmentGeneric &)\n-{}\n+Dump::visit (TypePathSegmentGeneric &segment)\n+{\n+  // Syntax:\n+  //    PathIdentSegment `::`? (GenericArgs)?\n+  // GenericArgs :\n+  //    `<` `>`\n+  //    | `<` ( GenericArg `,` )* GenericArg `,`? `>`\n+\n+  stream << segment.get_ident_segment ().as_string ();\n+\n+  if (segment.get_separating_scope_resolution ())\n+    stream << \"::\";\n+\n+  stream << \"<\";\n+\n+  {\n+    // Here we join 3 lists (each possibly empty) with a separator.\n+\n+    auto &lifetime_args = segment.get_generic_args ().get_lifetime_args ();\n+    auto &generic_args = segment.get_generic_args ().get_generic_args ();\n+    auto &binding_args = segment.get_generic_args ().get_binding_args ();\n+\n+    visit_items_joined_by_separator (lifetime_args, \", \");\n+    if (!lifetime_args.empty ()\n+\t&& (!generic_args.empty () || !binding_args.empty ()))\n+      {\n+\t// Insert separator if some items have been already emitted and some\n+\t// more are to be emitted from any of the following collections.\n+\tstream << \", \";\n+      }\n+    visit_items_joined_by_separator (generic_args, \", \");\n+    if (!generic_args.empty () && !binding_args.empty ())\n+      {\n+\t// Insert separator if some item vas emitted from the previous\n+\t// collection and more are to be emitted from the last.\n+\tstream << \", \";\n+      }\n+    visit_items_joined_by_separator (binding_args, \", \");\n+  }\n+\n+  stream << \">\";\n+}\n \n void\n-Dump::visit (TypePathSegmentFunction &)\n-{}\n+Dump::visit (GenericArgsBinding &binding)\n+{\n+  // Syntax:\n+  //    IDENTIFIER `=` Type\n+\n+  stream << binding.get_identifier () << \" << \";\n+  visit (binding.get_type ());\n+}\n+\n+void\n+Dump::visit (GenericArg &arg)\n+{\n+  // `GenericArg` implements `accept_vis` but it is not useful for this case as\n+  // it ignores unresolved cases (`Kind::Either`).\n+\n+  switch (arg.get_kind ())\n+    {\n+    case GenericArg::Kind::Const:\n+      visit (arg.get_expression ());\n+      break;\n+    case GenericArg::Kind::Type:\n+      visit (arg.get_type ());\n+      break;\n+    case GenericArg::Kind::Either:\n+      stream << arg.get_path ();\n+      break;\n+    case GenericArg::Kind::Error:\n+      gcc_unreachable ();\n+    }\n+} // namespace AST\n+\n+void\n+Dump::visit (TypePathSegmentFunction &segment)\n+{\n+  // Syntax:\n+  //   PathIdentSegment `::`? (TypePathFn)?\n+\n+  stream << segment.get_ident_segment ().as_string ();\n+\n+  if (segment.get_separating_scope_resolution ())\n+    stream << \"::\";\n+\n+  if (!segment.is_ident_only ())\n+    visit (segment.get_type_path_function ());\n+}\n+\n+void\n+Dump::visit (TypePathFunction &type_path_fn)\n+{\n+  // Syntax:\n+  //   `(` TypePathFnInputs? `)` (`->` Type)?\n+  // TypePathFnInputs :\n+  //   Type (`,` Type)* `,`?\n+\n+  stream << '(';\n+  if (type_path_fn.has_inputs ())\n+    visit_items_joined_by_separator (type_path_fn.get_params (), \", \");\n+  stream << ')';\n+\n+  if (type_path_fn.has_return_type ())\n+    {\n+      stream << \"->\";\n+      visit (type_path_fn.get_return_type ());\n+    }\n+}\n \n void\n Dump::visit (TypePath &path)\n {\n-  stream << path.as_string ();\n+  // Syntax:\n+  //    `::`? TypePathSegment (`::` TypePathSegment)*\n+\n+  if (path.has_opening_scope_resolution_op ())\n+    stream << \"::\";\n+  visit_items_joined_by_separator (path.get_segments (), \"::\");\n }\n \n void\n@@ -897,8 +1010,6 @@ Dump::visit (TypeParam &param)\n   // TypeParamBounds :\n   //    TypeParamBound ( + TypeParamBound )* +?\n \n-  // FIXME this outputs things like \"Ambiguous: String\" - this comes from\n-  // Token::str\n   stream << param.get_type_representation ();\n   if (param.has_type_param_bounds ())\n     {"}, {"sha": "4bc322cda9883fbcb4c06d1840a14150c9f91da4", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8863414eda2dad8a0976e89f7649303492d30a8/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8863414eda2dad8a0976e89f7649303492d30a8/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=b8863414eda2dad8a0976e89f7649303492d30a8", "patch": "@@ -139,6 +139,9 @@ class Dump : public ASTVisitor\n   void visit (std::vector<LifetimeParam> &for_lifetimes);\n   void visit (FunctionQualifiers &qualifiers);\n   void visit (MaybeNamedParam &param);\n+  void visit (TypePathFunction &type_path_fn);\n+  void visit (GenericArgsBinding &binding);\n+  void visit (GenericArg &arg);\n \n   // rust-ast.h\n   void visit (Token &tok);"}]}