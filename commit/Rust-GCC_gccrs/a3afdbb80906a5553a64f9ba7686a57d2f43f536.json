{"sha": "a3afdbb80906a5553a64f9ba7686a57d2f43f536", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNhZmRiYjgwOTA2YTU1NTNhNjRmOWJhNzY4NmE1N2QyZjQzZjUzNg==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2014-02-26T01:49:35Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2014-02-26T01:49:35Z"}, "message": "re PR tree-optimization/60280 (gcc.target/arm/ivopts.c and gcc.target/arm/ivopts-2.c failed caused by preserving loop structure.)\n\n\n\tPR target/60280\n\t* tree-cfgcleanup.c (tree_forwarder_block_p): Protect loop\n\tpreheaders and latches only if requested.  Fix latch if it\n\tis removed.\n\t* tree-ssa-dom.c (tree_ssa_dominator_optimize): Set\n\tLOOPS_HAVE_PREHEADERS.\n\n\tPR target/60280\n\t* gnat.dg/renaming5.adb: Change to two expected gotos.\n\t* gcc.dg/tree-ssa/pr21559.c: Change back to three expected\n\tjump threads.\n\t* gcc.dg/tree-prof/update-loopch.c: Check two \"Invalid sum\"\n\tmessages for removed basic block.\n\t* gcc.dg/tree-ssa/ivopt_1.c: Fix unreliable scanning string.\n\t* gcc.dg/tree-ssa/ivopt_2.c: Ditto.\n\t* gcc.dg/tree-ssa/ivopt_3.c: Ditto.\n\t* gcc.dg/tree-ssa/ivopt_4.c: Ditto.\n\nFrom-SVN: r208165", "tree": {"sha": "6950f4f889e9bdb8f3310b7162ef11948dcabffc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6950f4f889e9bdb8f3310b7162ef11948dcabffc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3afdbb80906a5553a64f9ba7686a57d2f43f536", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3afdbb80906a5553a64f9ba7686a57d2f43f536", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3afdbb80906a5553a64f9ba7686a57d2f43f536", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3afdbb80906a5553a64f9ba7686a57d2f43f536/comments", "author": null, "committer": null, "parents": [{"sha": "b8a542c64830635d1716130f41da4c7a165b5872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8a542c64830635d1716130f41da4c7a165b5872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8a542c64830635d1716130f41da4c7a165b5872"}], "stats": {"total": 73, "additions": 59, "deletions": 14}, "files": [{"sha": "3b4c2b97487b87da946e156243c08cc0a386edd0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3afdbb80906a5553a64f9ba7686a57d2f43f536", "patch": "@@ -1,3 +1,12 @@\n+2014-02-26  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR target/60280\n+\t* tree-cfgcleanup.c (tree_forwarder_block_p): Protect loop\n+\tpreheaders and latches only if requested.  Fix latch if it\n+\tis removed.\n+\t* tree-ssa-dom.c (tree_ssa_dominator_optimize): Set\n+\tLOOPS_HAVE_PREHEADERS.\n+\n 2014-02-25  Andrew Pinski  <apinski@cavium.com>\n \n \t* builtins.c (expand_builtin_thread_pointer): Create a new target"}, {"sha": "830d722d1540d76639505953ba6cae26da776a13", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3afdbb80906a5553a64f9ba7686a57d2f43f536", "patch": "@@ -1,3 +1,16 @@\n+2014-02-26  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR target/60280\n+\t* gnat.dg/renaming5.adb: Change to two expected gotos.\n+\t* gcc.dg/tree-ssa/pr21559.c: Change back to three expected\n+\tjump threads.\n+\t* gcc.dg/tree-prof/update-loopch.c: Check two \"Invalid sum\"\n+\tmessages for removed basic block.\n+\t* gcc.dg/tree-ssa/ivopt_1.c: Fix unreliable scanning string.\n+\t* gcc.dg/tree-ssa/ivopt_2.c: Ditto.\n+\t* gcc.dg/tree-ssa/ivopt_3.c: Ditto.\n+\t* gcc.dg/tree-ssa/ivopt_4.c: Ditto.\n+\n 2014-02-25  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.dg/vmx/ld-vsx.c: Don't use vec_all_eq."}, {"sha": "5297098fc91491b1c87bd1dd476cdea1b80a6e37", "filename": "gcc/testsuite/gcc.dg/tree-prof/update-loopch.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fupdate-loopch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fupdate-loopch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Fupdate-loopch.c?ref=a3afdbb80906a5553a64f9ba7686a57d2f43f536", "patch": "@@ -16,6 +16,7 @@ main ()\n    edge.  */\n /* { dg-final-use { scan-ipa-dump \"loop depth 1, count 33334\" \"profile\"} } */\n /* { dg-final-use { scan-tree-dump \"loop depth 1, count 33332\" \"optimized\"} } */\n-/* { dg-final-use { scan-tree-dump-not \"Invalid sum\" \"optimized\"} } */\n+/* { dg-final-use { scan-tree-dump-times \"Removing basic block \\[^\\r\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\r\\n\\]*\\[\\\\r\\\\n\\]+Invalid sum of\\[^\\r\\n\\]*\\[\\\\r\\\\n\\]+Invalid sum of\" 1 \"optimized\"} } */\n+/* { dg-final-use { scan-tree-dump-times \"Invalid sum of\" 2 \"optimized\"} } */\n /* { dg-final-use { cleanup-ipa-dump \"profile\" } } */\n /* { dg-final-use { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "74b73da687572cb6e7d084be2c4f1e91f475f454", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ivopt_1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_1.c?ref=a3afdbb80906a5553a64f9ba7686a57d2f43f536", "patch": "@@ -14,5 +14,5 @@ void foo (int i_width, TYPE dst, TYPE src1, TYPE src2)\n }\n \n \n-/* { dg-final { scan-tree-dump-times \"PHI <ivtmp\" 1 \"ivopts\"} } */\n+/* { dg-final { scan-tree-dump-times \"ivtmp.\\[0-9_\\]* = PHI <\" 1 \"ivopts\"} } */\n /* { dg-final { cleanup-tree-dump \"ivopts\" } } */"}, {"sha": "f27b900729501bec79430e35c8ce0ff04ebd8984", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ivopt_2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_2.c?ref=a3afdbb80906a5553a64f9ba7686a57d2f43f536", "patch": "@@ -13,5 +13,5 @@ void foo (int i_width, TYPE dst, TYPE src1, TYPE src2)\n        }\n }\n \n-/* { dg-final { scan-tree-dump-times \"PHI <ivtmp\" 1 \"ivopts\"} } */\n+/* { dg-final { scan-tree-dump-times \"ivtmp.\\[0-9_\\]* = PHI <\" 1 \"ivopts\"} } */\n /* { dg-final { cleanup-tree-dump \"ivopts\" } } */"}, {"sha": "b548e8f0fb6af2e39271de1892af2e772622f328", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ivopt_3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_3.c?ref=a3afdbb80906a5553a64f9ba7686a57d2f43f536", "patch": "@@ -14,7 +14,7 @@ void foo (int i_width, char* dst, char* src1, char* src2)\n \t   src1+=sizeof(TYPE);\n \t   src2+=sizeof(TYPE);\n        }\n-} \n+}\n \n-/* { dg-final { scan-tree-dump-times \"PHI <ivtmp\" 1 \"ivopts\"} } */\n+/* { dg-final { scan-tree-dump-times \"ivtmp.\\[0-9_\\]* = PHI <\" 1 \"ivopts\"} } */\n /* { dg-final { cleanup-tree-dump \"ivopts\" } } */"}, {"sha": "330b3bf53ed72bcf1be68d7a6bcf82e759299892", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ivopt_4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fivopt_4.c?ref=a3afdbb80906a5553a64f9ba7686a57d2f43f536", "patch": "@@ -15,5 +15,5 @@ void foo (int i_width, TYPE dst, TYPE src1, TYPE src2)\n        }\n }\n \n-/* { dg-final { scan-tree-dump-times \"PHI <ivtmp\" 1 \"ivopts\"} } */\n+/* { dg-final { scan-tree-dump-times \"ivtmp.\\[0-9_\\]* = PHI <\" 1 \"ivopts\"} } */\n /* { dg-final { cleanup-tree-dump \"ivopts\" } } */"}, {"sha": "6378d1aa729c22766b3fd9d0bfe6e7cbafd0bf19", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr21559.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr21559.c?ref=a3afdbb80906a5553a64f9ba7686a57d2f43f536", "patch": "@@ -36,8 +36,9 @@ void foo (void)\n \n /* Second, we should thread the edge out of the loop via the break\n    statement.  We also realize that the final bytes == 0 test is useless,\n-   and thread over it.  */\n-/* { dg-final { scan-tree-dump-times \"Threaded jump\" 2 \"vrp1\" } } */\n+   and thread over it.  We also know that toread != 0 is useless when\n+   entering while loop and thread over it.  */\n+/* { dg-final { scan-tree-dump-times \"Threaded jump\" 3 \"vrp1\" } } */\n \n /* { dg-final { cleanup-tree-dump \"vrp1\" } } */\n "}, {"sha": "25374fe895c9313d65cffcc3b6aac2da131575aa", "filename": "gcc/testsuite/gnat.dg/renaming5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming5.adb?ref=a3afdbb80906a5553a64f9ba7686a57d2f43f536", "patch": "@@ -26,5 +26,5 @@ package body Renaming5 is\n \n end Renaming5;\n \n--- { dg-final { scan-tree-dump-times \"goto\" 3 \"optimized\" } }\n+-- { dg-final { scan-tree-dump-times \"goto\" 2 \"optimized\" } }\n -- { dg-final { cleanup-tree-dump \"optimized\" } }"}, {"sha": "b5c384b902ca37566dd6c95d3ee69b678fd7995e", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=a3afdbb80906a5553a64f9ba7686a57d2f43f536", "patch": "@@ -308,14 +308,24 @@ tree_forwarder_block_p (basic_block bb, bool phi_wanted)\n   if (current_loops)\n     {\n       basic_block dest;\n-      /* Protect loop latches, headers and preheaders.  */\n+      /* Protect loop headers.  */\n       if (bb->loop_father->header == bb)\n \treturn false;\n-      dest = EDGE_SUCC (bb, 0)->dest;\n \n+      dest = EDGE_SUCC (bb, 0)->dest;\n+      /* Protect loop preheaders and latches if requested.  */\n       if (dest->loop_father->header == dest)\n-\treturn false;\n+\t{\n+\t  if (loops_state_satisfies_p (LOOPS_HAVE_PREHEADERS)\n+\t      && bb->loop_father->header != dest)\n+\t    return false;\n+\n+\t  if (loops_state_satisfies_p (LOOPS_HAVE_SIMPLE_LATCHES)\n+\t      && bb->loop_father->header == dest)\n+\t    return false;\n+\t}\n     }\n+\n   return true;\n }\n \n@@ -497,6 +507,11 @@ remove_forwarder_block (basic_block bb)\n       set_immediate_dominator (CDI_DOMINATORS, dest, dom);\n     }\n \n+  /* Adjust latch infomation of BB's parent loop as otherwise\n+     the cfg hook has a hard time not to kill the loop.  */\n+  if (current_loops && bb->loop_father->latch == bb)\n+    bb->loop_father->latch = dest;\n+\n   /* And kill the forwarder block.  */\n   delete_basic_block (bb);\n "}, {"sha": "91253dc05921334aa3fc0f9f45c25bb4da9be1bc", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3afdbb80906a5553a64f9ba7686a57d2f43f536/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=a3afdbb80906a5553a64f9ba7686a57d2f43f536", "patch": "@@ -849,8 +849,14 @@ tree_ssa_dominator_optimize (void)\n   /* We need to know loop structures in order to avoid destroying them\n      in jump threading.  Note that we still can e.g. thread through loop\n      headers to an exit edge, or through loop header to the loop body, assuming\n-     that we update the loop info.  */\n-  loop_optimizer_init (LOOPS_HAVE_SIMPLE_LATCHES);\n+     that we update the loop info.\n+\n+     TODO: We don't need to set LOOPS_HAVE_PREHEADERS generally, but due\n+     to several overly conservative bail-outs in jump threading, case\n+     gcc.dg/tree-ssa/pr21417.c can't be threaded if loop preheader is\n+     missing.  We should improve jump threading in future then\n+     LOOPS_HAVE_PREHEADERS won't be needed here.  */\n+  loop_optimizer_init (LOOPS_HAVE_PREHEADERS | LOOPS_HAVE_SIMPLE_LATCHES);\n \n   /* Initialize the value-handle array.  */\n   threadedge_initialize_values ();"}]}