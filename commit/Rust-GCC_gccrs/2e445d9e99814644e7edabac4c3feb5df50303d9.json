{"sha": "2e445d9e99814644e7edabac4c3feb5df50303d9", "node_id": "C_kwDOANBUbNoAKDJlNDQ1ZDllOTk4MTQ2NDRlN2VkYWJhYzRjM2ZlYjVkZjUwMzAzZDk", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-26T11:35:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-01-26T13:38:22Z"}, "message": "libstdc++: Add workaround for old tzdata.zi files\n\nThe tzdata.zi file in the RHEL 6 tzdata-2018e-3.el6 package (with\nversion \"unknown\") does not conform to the current rules described in\nthe zic(8) man page. Specifically, a Rule name must not start with the\ncharacter '+' in the current rules, but the older tzdata.zi file\nused \"+\" as the name of rules for the \"Europe/Sofia\" zone.\n\nAdd a special case to the logic that detects whether a RULES field\nrefers to a named rule or is an offset from standard time. For a string\nmatching exactly \"+\" treat it as a named Rule, but for any other string\nstarting with '+' treat it as an offset.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++20/tzdb.cc (operator>>(istream&, ZoneInfo&)): Allow\n\trules named \"+\" for compatibility with older tzdata.zi files.", "tree": {"sha": "733945a76920b23c57b3c10439e264c424c6d484", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/733945a76920b23c57b3c10439e264c424c6d484"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e445d9e99814644e7edabac4c3feb5df50303d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e445d9e99814644e7edabac4c3feb5df50303d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e445d9e99814644e7edabac4c3feb5df50303d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e445d9e99814644e7edabac4c3feb5df50303d9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3376467ce090aa0966d59ca3aea35db4f17a4b47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3376467ce090aa0966d59ca3aea35db4f17a4b47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3376467ce090aa0966d59ca3aea35db4f17a4b47"}], "stats": {"total": 49, "additions": 34, "deletions": 15}, "files": [{"sha": "c956e861891cf31ef21a34950b802301cf7725dd", "filename": "libstdc++-v3/src/c++20/tzdb.cc", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e445d9e99814644e7edabac4c3feb5df50303d9/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Ftzdb.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e445d9e99814644e7edabac4c3feb5df50303d9/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Ftzdb.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Ftzdb.cc?ref=2e445d9e99814644e7edabac4c3feb5df50303d9", "patch": "@@ -1967,6 +1967,22 @@ namespace std::chrono\n       return in;\n     }\n \n+    // Test whether the RULES field of a Zone line is a valid Rule name.\n+    inline bool\n+    is_rule_name(string_view rules) noexcept\n+    {\n+      // The NAME field of a Rule line must start with a character that is\n+      // neither an ASCII digit nor '-' nor '+'.\n+      if (('0' <= rules[0] && rules[0] <= '9') || rules[0] == '-')\n+\treturn false;\n+      // However, some older tzdata.zi files (e.g. in tzdata-2018e-3.el6 RPM)\n+      // used \"+\" as a Rule name, so we need to handle that special case.\n+      if (rules[0] == '+')\n+\treturn rules.size() == 1; // \"+\" is a rule name, \"+1\" is not.\n+      // Everything else is the name of a Rule.\n+      return true;\n+    }\n+\n     istream& operator>>(istream& in, ZoneInfo& inf)\n     {\n       // STDOFF  RULES  FORMAT  [UNTIL]\n@@ -1976,25 +1992,28 @@ namespace std::chrono\n \n       in >> off >> quoted{rules} >> fmt;\n       inf.m_offset = off.time;\n-      if (rules == \"-\")\n-\t{\n-\t  // Standard time always applies, no DST.\n-\t  inf.set_abbrev(fmt);\n-\t}\n-      else if (string_view(\"0123456789-+\").find(rules[0]) != string_view::npos)\n+      if (is_rule_name(rules))\n \t{\n-\t  // rules specifies the difference from standard time.\n-\t  at_time rules_time;\n-\t  istringstream in2(std::move(rules));\n-\t  in2 >> rules_time;\n-\t  inf.m_save = duration_cast<minutes>(rules_time.time);\n-\t  select_std_or_dst_abbrev(fmt, inf.m_save);\n-\t  inf.set_abbrev(fmt);\n+\t  // `rules` refers to a named Rule which describes transitions.\n+\t  inf.set_rules_and_format(rules, fmt);\n \t}\n       else\n \t{\n-\t  // rules refers to a named Rule which describes transitions.\n-\t  inf.set_rules_and_format(rules, fmt);\n+\t  if (rules == \"-\")\n+\t    {\n+\t      // Standard time always applies, no DST.\n+\t    }\n+\t  else\n+\t    {\n+\t      // `rules` specifies the difference from standard time,\n+\t      // e.g., \"-2:30\"\n+\t      at_time rules_time;\n+\t      istringstream in2(std::move(rules));\n+\t      in2 >> rules_time;\n+\t      inf.m_save = duration_cast<minutes>(rules_time.time);\n+\t      select_std_or_dst_abbrev(fmt, inf.m_save);\n+\t    }\n+\t  inf.set_abbrev(fmt);\n \t}\n \n       // YEAR [MONTH [DAY [TIME]]]"}]}