{"sha": "1f8551b2637b9091bf9526dbaac0775f7ea490a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY4NTUxYjI2MzdiOTA5MWJmOTUyNmRiYWFjMDc3NWY3ZWE0OTBhNQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-03-15T18:51:53Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-03-15T18:51:53Z"}, "message": "defaults.h (REVERSIBLE_CC_MODE): Define.\n\n\t* defaults.h (REVERSIBLE_CC_MODE): Define.\n\t* jump.c (reversed_comparison_code_parts): Don't check if\n\tREVERSIBLE_CC_MODE is defined.\n\nFrom-SVN: r79507", "tree": {"sha": "9ca84164818fa6fc315b0ab76506a593c013d26f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ca84164818fa6fc315b0ab76506a593c013d26f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f8551b2637b9091bf9526dbaac0775f7ea490a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f8551b2637b9091bf9526dbaac0775f7ea490a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f8551b2637b9091bf9526dbaac0775f7ea490a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f8551b2637b9091bf9526dbaac0775f7ea490a5/comments", "author": null, "committer": null, "parents": [{"sha": "ca2b05bae542053cbc947e9c4e30d2dd52748fdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca2b05bae542053cbc947e9c4e30d2dd52748fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca2b05bae542053cbc947e9c4e30d2dd52748fdf"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "0437bfdc785dfe4c73d7a4fda84913fa05de5950", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8551b2637b9091bf9526dbaac0775f7ea490a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8551b2637b9091bf9526dbaac0775f7ea490a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f8551b2637b9091bf9526dbaac0775f7ea490a5", "patch": "@@ -1,3 +1,9 @@\n+2004-03-15  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* defaults.h (REVERSIBLE_CC_MODE): Define.\n+\t* jump.c (reversed_comparison_code_parts): Don't check if\n+\tREVERSIBLE_CC_MODE is defined.\n+\n 2004-03-15  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* c-incpath.c, c-incpath.h, c-pch.c, c.opt, cppexp.c,"}, {"sha": "e4a6fae57e5de6677e83349766fe1f662474c311", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8551b2637b9091bf9526dbaac0775f7ea490a5/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8551b2637b9091bf9526dbaac0775f7ea490a5/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=1f8551b2637b9091bf9526dbaac0775f7ea490a5", "patch": "@@ -737,4 +737,8 @@ You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n #define LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN)\n #endif\n \n+#ifndef REVERSIBLE_CC_MODE\n+#define REVERSIBLE_CC_MODE(MODE) 0\n+#endif\n+\n #endif  /* ! GCC_DEFAULTS_H */"}, {"sha": "5567bb7ea665dc0c3010885333acf359a2d38fb8", "filename": "gcc/jump.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f8551b2637b9091bf9526dbaac0775f7ea490a5/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f8551b2637b9091bf9526dbaac0775f7ea490a5/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=1f8551b2637b9091bf9526dbaac0775f7ea490a5", "patch": "@@ -648,7 +648,6 @@ reversed_comparison_code_parts (enum rtx_code code, rtx arg0, rtx arg1, rtx insn\n   /* First see if machine description supply us way to reverse the comparison.\n      Give it priority over everything else to allow machine description to do\n      tricks.  */\n-#ifdef REVERSIBLE_CC_MODE\n   if (GET_MODE_CLASS (mode) == MODE_CC\n       && REVERSIBLE_CC_MODE (mode))\n     {\n@@ -657,7 +656,6 @@ reversed_comparison_code_parts (enum rtx_code code, rtx arg0, rtx arg1, rtx insn\n #endif\n       return reverse_condition (code);\n     }\n-#endif\n \n   /* Try a few special cases based on the comparison code.  */\n   switch (code)"}]}