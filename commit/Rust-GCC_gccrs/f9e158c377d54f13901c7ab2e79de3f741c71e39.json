{"sha": "f9e158c377d54f13901c7ab2e79de3f741c71e39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjllMTU4YzM3N2Q1NGYxMzkwMWM3YWIyZTc5ZGUzZjc0MWM3MWUzOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "2000-05-04T21:15:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-05-04T21:15:05Z"}, "message": "simplify-rtx.c (simplify_ternary_operation): Cast to unsigned.\n\n        * simplify-rtx.c (simplify_ternary_operation): Cast to unsigned.\n        * stor-layout.c (place_field): Likewise.\n        * integrate.h (struct inline_remap): Make regno_pointer_align unsigned.\n        * expr.c (store_expr): Make align unsigned.\n        * explow.c (plus_constant_wide): Make low words unsigned.\n        * expmed.c (choose_multiplier): Likewise.\n        * fold-const.c (fold):  Likewise.\n        * tree.h (build_int_2): Likewise.\n        * tree.c (build_int_2_wide, tree_int_cst_msb): Likewise.\n        * emit-rtl.c (gen_reg_rtx): Add cast to unsigned char*.\n        (init_emit): Change cast to unsigned char*.\n        * varasm.c (compare_constant_1): Add cast to char*.\n        * gcse.c (delete_null_pointer_checks): Change cast to unsigned int*.\n        * reload1.c (reload): Likewise.\n\n        * rtl.h (MEM_SET_IN_STRUCT_P): Use do { } while (0).\n\nFrom-SVN: r33684", "tree": {"sha": "f94edf423be1c6f8735d954344a16ef175aca24d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f94edf423be1c6f8735d954344a16ef175aca24d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9e158c377d54f13901c7ab2e79de3f741c71e39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9e158c377d54f13901c7ab2e79de3f741c71e39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9e158c377d54f13901c7ab2e79de3f741c71e39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9e158c377d54f13901c7ab2e79de3f741c71e39/comments", "author": null, "committer": null, "parents": [{"sha": "926fd2e161ada3acf143b8c123b9237d53e3c27e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/926fd2e161ada3acf143b8c123b9237d53e3c27e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/926fd2e161ada3acf143b8c123b9237d53e3c27e"}], "stats": {"total": 89, "additions": 61, "deletions": 28}, "files": [{"sha": "4987c2a1999037469039455f23098abd86d78651", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9e158c377d54f13901c7ab2e79de3f741c71e39", "patch": "@@ -1,3 +1,22 @@\n+2000-05-04  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* simplify-rtx.c (simplify_ternary_operation): Cast to unsigned.\n+\t* stor-layout.c (place_field): Likewise.\n+\t* integrate.h (struct inline_remap): Make regno_pointer_align unsigned.\n+\t* expr.c (store_expr): Make align unsigned.\n+\t* explow.c (plus_constant_wide): Make low words unsigned.\n+\t* expmed.c (choose_multiplier): Likewise.\n+\t* fold-const.c (fold):  Likewise.\n+\t* tree.h (build_int_2): Likewise.\n+\t* tree.c (build_int_2_wide, tree_int_cst_msb): Likewise.\n+\t* emit-rtl.c (gen_reg_rtx): Add cast to unsigned char*.\n+\t(init_emit): Change cast to unsigned char*.\n+\t* varasm.c (compare_constant_1): Add cast to char*.\n+\t* gcse.c (delete_null_pointer_checks): Change cast to unsigned int*.\n+\t* reload1.c (reload): Likewise.\n+\n+\t* rtl.h (MEM_SET_IN_STRUCT_P): Use do { } while (0).\n+\n Thu May  4 14:37:23 2000  Jeffrey A Law  (law@cygnus.com)\n \n \t* predict.c (estimate_probability): If no prediction was found, then"}, {"sha": "12ba67f411478a6154131e22d71a493848b54bbc", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=f9e158c377d54f13901c7ab2e79de3f741c71e39", "patch": "@@ -572,7 +572,7 @@ gen_reg_rtx (mode)\n \n       new = xrealloc (f->emit->regno_pointer_align, old_size * 2);\n       memset (new + old_size, 0, old_size);\n-      f->emit->regno_pointer_align = new;\n+      f->emit->regno_pointer_align = (unsigned char *) new;\n \n       new1 = (rtx *) xrealloc (f->emit->x_regno_reg_rtx,\n \t\t\t       old_size * 2 * sizeof (rtx));\n@@ -3893,8 +3893,8 @@ init_emit ()\n     = (char *) xcalloc (f->emit->regno_pointer_flag_length, sizeof (char));\n \n   f->emit->regno_pointer_align\n-    = (char *) xcalloc (f->emit->regno_pointer_flag_length,\n-\t\t\tsizeof (char));\n+    = (unsigned char *) xcalloc (f->emit->regno_pointer_flag_length,\n+\t\t\t\t sizeof (unsigned char));\n \n   regno_reg_rtx \n     = (rtx *) xcalloc (f->emit->regno_pointer_flag_length * sizeof (rtx),"}, {"sha": "585dafd69ce070bdb81da762887b181b09ce9708", "filename": "gcc/explow.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=f9e158c377d54f13901c7ab2e79de3f741c71e39", "patch": "@@ -106,11 +106,12 @@ plus_constant_wide (x, c)\n \n     case CONST_DOUBLE:\n       {\n-\tHOST_WIDE_INT l1 = CONST_DOUBLE_LOW (x);\n+\tunsigned HOST_WIDE_INT l1 = CONST_DOUBLE_LOW (x);\n \tHOST_WIDE_INT h1 = CONST_DOUBLE_HIGH (x);\n-\tHOST_WIDE_INT l2 = c;\n+\tunsigned HOST_WIDE_INT l2 = c;\n \tHOST_WIDE_INT h2 = c < 0 ? ~0 : 0;\n-\tHOST_WIDE_INT lv, hv;\n+\tunsigned HOST_WIDE_INT lv;\n+\tHOST_WIDE_INT hv;\n \n \tadd_double (l1, h1, l2, h2, &lv, &hv);\n "}, {"sha": "c230a338356969e42a282dbf786810a9aa3abe3d", "filename": "gcc/expmed.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=f9e158c377d54f13901c7ab2e79de3f741c71e39", "patch": "@@ -2567,11 +2567,12 @@ choose_multiplier (d, n, precision, multiplier_ptr, post_shift_ptr, lgup_ptr)\n      int *post_shift_ptr;\n      int *lgup_ptr;\n {\n-  unsigned HOST_WIDE_INT mhigh_hi, mhigh_lo;\n-  unsigned HOST_WIDE_INT mlow_hi, mlow_lo;\n+  HOST_WIDE_INT mhigh_hi, mlow_hi;\n+  unsigned HOST_WIDE_INT mhigh_lo, mlow_lo;\n   int lgup, post_shift;\n   int pow, pow2;\n-  unsigned HOST_WIDE_INT nh, nl, dummy1, dummy2;\n+  unsigned HOST_WIDE_INT nl, dummy1;\n+  HOST_WIDE_INT nh, dummy2;\n \n   /* lgup = ceil(log2(divisor)); */\n   lgup = ceil_log2 (d);\n@@ -2592,7 +2593,7 @@ choose_multiplier (d, n, precision, multiplier_ptr, post_shift_ptr, lgup_ptr)\n   /* mlow = 2^(N + lgup)/d */\n  if (pow >= HOST_BITS_PER_WIDE_INT)\n     {\n-      nh = (unsigned HOST_WIDE_INT) 1 << (pow - HOST_BITS_PER_WIDE_INT);\n+      nh = (HOST_WIDE_INT) 1 << (pow - HOST_BITS_PER_WIDE_INT);\n       nl = 0;\n     }\n   else\n@@ -2605,7 +2606,7 @@ choose_multiplier (d, n, precision, multiplier_ptr, post_shift_ptr, lgup_ptr)\n \n   /* mhigh = (2^(N + lgup) + 2^N + lgup - precision)/d */\n   if (pow2 >= HOST_BITS_PER_WIDE_INT)\n-    nh |= (unsigned HOST_WIDE_INT) 1 << (pow2 - HOST_BITS_PER_WIDE_INT);\n+    nh |= (HOST_WIDE_INT) 1 << (pow2 - HOST_BITS_PER_WIDE_INT);\n   else\n     nl |= (unsigned HOST_WIDE_INT) 1 << pow2;\n   div_and_round_double (TRUNC_DIV_EXPR, 1, nl, nh, d, (HOST_WIDE_INT) 0,"}, {"sha": "b680ca8e1f78474c98b12604ec34fd78088f5774", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f9e158c377d54f13901c7ab2e79de3f741c71e39", "patch": "@@ -3926,7 +3926,7 @@ store_expr (exp, target, want_value)\n \t\t= size_binop (MIN_EXPR,\n \t\t\t      make_tree (sizetype, size),\n \t\t\t      size_int (TREE_STRING_LENGTH (exp)));\n-\t      int align = TYPE_ALIGN (TREE_TYPE (exp));\n+\t      unsigned int align = TYPE_ALIGN (TREE_TYPE (exp));\n \t      rtx copy_size_rtx = expand_expr (copy_size, NULL_RTX,\n \t\t\t\t\t       VOIDmode, 0);\n \t      rtx label = 0;"}, {"sha": "93c5816d9a7fd363831b9c85a131e4d568b9a81a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=f9e158c377d54f13901c7ab2e79de3f741c71e39", "patch": "@@ -5185,7 +5185,8 @@ fold (expr)\n \t{\n \t  if (TREE_CODE (arg0) == INTEGER_CST)\n \t    {\n-\t      HOST_WIDE_INT low, high;\n+\t      unsigned HOST_WIDE_INT low;\n+\t      HOST_WIDE_INT high;\n \t      int overflow = neg_double (TREE_INT_CST_LOW (arg0),\n \t\t\t\t\t TREE_INT_CST_HIGH (arg0),\n \t\t\t\t\t &low, &high);\n@@ -5219,7 +5220,8 @@ fold (expr)\n \t      if (! TREE_UNSIGNED (type)\n \t\t  && TREE_INT_CST_HIGH (arg0) < 0)\n \t\t{\n-\t\t  HOST_WIDE_INT low, high;\n+\t\t  unsigned HOST_WIDE_INT low;\n+\t\t  HOST_WIDE_INT high;\n \t\t  int overflow = neg_double (TREE_INT_CST_LOW (arg0),\n \t\t\t\t\t     TREE_INT_CST_HIGH (arg0),\n \t\t\t\t\t     &low, &high);"}, {"sha": "78b9d5910aefaf5cce2ed2455a691d5d8fe34d49", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=f9e158c377d54f13901c7ab2e79de3f741c71e39", "patch": "@@ -5093,7 +5093,7 @@ delete_null_pointer_checks (f)\n   /* Go through the basic blocks, seeing whether or not each block\n      ends with a conditional branch whose condition is a comparison\n      against zero.  Record the register compared in BLOCK_REG.  */\n-  block_reg = (int *) xcalloc (n_basic_blocks, sizeof (int));\n+  block_reg = (unsigned int *) xcalloc (n_basic_blocks, sizeof (int));\n   for (bb = 0; bb < n_basic_blocks; bb++)\n     {\n       rtx last_insn = BLOCK_END (bb);"}, {"sha": "5bc456920aa53ddc7f76172d14e2783741a1c347", "filename": "gcc/integrate.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Fintegrate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Fintegrate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.h?ref=f9e158c377d54f13901c7ab2e79de3f741c71e39", "patch": "@@ -95,7 +95,7 @@ struct inline_remap\n \n   /* Indications for regs being pointers and their alignment.  */\n   char *regno_pointer_flag;\n-  char *regno_pointer_align;\n+  unsigned char *regno_pointer_align;\n \n   /* The next few fields are used for subst_constants to record the SETs\n      that it saw.  */"}, {"sha": "a543297fa4bae4d826b21b4de279c95547596cc9", "filename": "gcc/reload1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=f9e158c377d54f13901c7ab2e79de3f741c71e39", "patch": "@@ -674,7 +674,7 @@ reload (first, global, dumpfile)\n   reg_equiv_mem = (rtx *) xcalloc (max_regno, sizeof (rtx));\n   reg_equiv_init = (rtx *) xcalloc (max_regno, sizeof (rtx));\n   reg_equiv_address = (rtx *) xcalloc (max_regno, sizeof (rtx));\n-  reg_max_ref_width = (int *) xcalloc (max_regno, sizeof (int));\n+  reg_max_ref_width = (unsigned int *) xcalloc (max_regno, sizeof (int));\n   reg_old_renumber = (short *) xcalloc (max_regno, sizeof (short));\n   bcopy ((PTR) reg_renumber, (PTR) reg_old_renumber, max_regno * sizeof (short));\n   pseudo_forbidden_regs"}, {"sha": "9148676726ff580ee08cbb5d0d501f72d07c271f", "filename": "gcc/rtl.h", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=f9e158c377d54f13901c7ab2e79de3f741c71e39", "patch": "@@ -772,9 +772,18 @@ extern const char * const note_insn_name[NOTE_INSN_MAX - NOTE_INSN_BIAS];\n    RTX.  Otherwise, vice versa.  Use this macro only when you are\n    *sure* that you know that the MEM is in a structure, or is a\n    scalar.  VAL is evaluated only once.  */\n-#define MEM_SET_IN_STRUCT_P(RTX, VAL) \t\t\t\t\\\n-  ((VAL) ? (MEM_IN_STRUCT_P (RTX) = 1, MEM_SCALAR_P (RTX) = 0)\t\\\n-   : (MEM_IN_STRUCT_P (RTX) = 0, MEM_SCALAR_P (RTX) = 1))\n+#define MEM_SET_IN_STRUCT_P(RTX, VAL) do {\t\\\n+  if (VAL)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      MEM_IN_STRUCT_P (RTX) = 1;\t\t\\\n+      MEM_SCALAR_P (RTX) = 0;\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      MEM_IN_STRUCT_P (RTX) = 0;\t\t\\\n+      MEM_SCALAR_P (RTX) = 1;\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+} while (0)\n \n /* For a MEM rtx, the alias set.  If 0, this MEM is not in any alias\n    set, and may alias anything.  Otherwise, the MEM can only alias"}, {"sha": "af16f115cba9effc66fd47652211be068b4e1642", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=f9e158c377d54f13901c7ab2e79de3f741c71e39", "patch": "@@ -1905,7 +1905,7 @@ simplify_ternary_operation (code, mode, op0_mode, op0, op1, op2)\n \t  && GET_CODE (op1) == CONST_INT\n \t  && GET_CODE (op2) == CONST_INT\n \t  && INTVAL (op1) + INTVAL (op2) <= GET_MODE_BITSIZE (op0_mode)\n-\t  && width <= HOST_BITS_PER_WIDE_INT)\n+\t  && width <= (unsigned) HOST_BITS_PER_WIDE_INT)\n \t{\n \t  /* Extracting a bit-field from a constant */\n \t  HOST_WIDE_INT val = INTVAL (op0);"}, {"sha": "eadb9732a8ff3a19d027847a189716340d0cc0a2", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=f9e158c377d54f13901c7ab2e79de3f741c71e39", "patch": "@@ -667,7 +667,7 @@ place_field (rli, field)\n   /* Some targets (i.e. VMS) limit struct field alignment\n      to a lower boundary than alignment of variables.  */\n #ifdef BIGGEST_FIELD_ALIGNMENT\n-  desired_align = MIN (desired_align, BIGGEST_FIELD_ALIGNMENT);\n+  desired_align = MIN (desired_align, (unsigned) BIGGEST_FIELD_ALIGNMENT);\n #endif\n #ifdef ADJUST_FIELD_ALIGN\n   desired_align = ADJUST_FIELD_ALIGN (field, desired_align);"}, {"sha": "9f68e60122ac8f4dec15ddb04b124a185b1a1a46", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f9e158c377d54f13901c7ab2e79de3f741c71e39", "patch": "@@ -1386,7 +1386,8 @@ set_identifier_size (size)\n \n tree\n build_int_2_wide (low, hi)\n-     HOST_WIDE_INT low, hi;\n+     unsigned HOST_WIDE_INT low;\n+     HOST_WIDE_INT hi;\n {\n   register tree t = make_node (INTEGER_CST);\n \n@@ -4334,7 +4335,7 @@ tree_int_cst_msb (t)\n {\n   register int prec;\n   HOST_WIDE_INT h;\n-  HOST_WIDE_INT l;\n+  unsigned HOST_WIDE_INT l;\n \n   /* Note that using TYPE_PRECISION here is wrong.  We care about the\n      actual bits, not the (arbitrary) range of the type.  */"}, {"sha": "dcbdd9a62c1c51950a90c5c97f8c4ff960299a47", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f9e158c377d54f13901c7ab2e79de3f741c71e39", "patch": "@@ -1824,13 +1824,13 @@ extern tree maybe_get_identifier\tPARAMS ((const char *));\n /* Construct various types of nodes.  */\n \n #define build_int_2(LO,HI)  \\\n-  build_int_2_wide ((HOST_WIDE_INT) (LO), (HOST_WIDE_INT) (HI))\n+  build_int_2_wide ((unsigned HOST_WIDE_INT) (LO), (HOST_WIDE_INT) (HI))\n \n extern tree build\t\t\tPARAMS ((enum tree_code, tree, ...));\n extern tree build_nt\t\t\tPARAMS ((enum tree_code, ...));\n extern tree build_parse_node\t\tPARAMS ((enum tree_code, ...));\n \n-extern tree build_int_2_wide\t\tPARAMS ((HOST_WIDE_INT, HOST_WIDE_INT));\n+extern tree build_int_2_wide\t\tPARAMS ((unsigned HOST_WIDE_INT, HOST_WIDE_INT));\n extern tree build_real\t\t\tPARAMS ((tree, REAL_VALUE_TYPE));\n extern tree build_real_from_int_cst \tPARAMS ((tree, tree));\n extern tree build_complex\t\tPARAMS ((tree, tree, tree));"}, {"sha": "8a6bdde7de3a478cfed2b285541975a70629e1da", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9e158c377d54f13901c7ab2e79de3f741c71e39/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=f9e158c377d54f13901c7ab2e79de3f741c71e39", "patch": "@@ -2563,8 +2563,8 @@ compare_constant_1 (exp, p)\n \t  int xlen = len = int_size_in_bytes (TREE_TYPE (exp));\n \t  unsigned char *tmp = (unsigned char *) alloca (len);\n \n-\t  get_set_constructor_bytes (exp, (unsigned char *) tmp, len);\n-\t  strp = tmp;\n+\t  get_set_constructor_bytes (exp, tmp, len);\n+\t  strp = (char *) tmp;\n \t  if (bcmp ((char *) &xlen, p, sizeof xlen))\n \t    return 0;\n "}]}