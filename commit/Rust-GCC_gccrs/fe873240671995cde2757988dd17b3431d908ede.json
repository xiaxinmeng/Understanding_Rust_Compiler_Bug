{"sha": "fe873240671995cde2757988dd17b3431d908ede", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU4NzMyNDA2NzE5OTVjZGUyNzU3OTg4ZGQxN2IzNDMxZDkwOGVkZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-24T11:53:52Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-12-24T11:53:52Z"}, "message": "(simplify_binary_operation): Can fold multi-word operations when first is CONST_INT.\n\n(simplify_binary_operation): Can fold multi-word operations when first is\nCONST_INT.\n(simplify_binary_operation, case PLUS, MINUS): Don't call plus_constant when\nOP0 is VOIDmode.\n\nFrom-SVN: r6298", "tree": {"sha": "3a0dbc6439bce4113d437b687670b62d2c06642d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a0dbc6439bce4113d437b687670b62d2c06642d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe873240671995cde2757988dd17b3431d908ede", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe873240671995cde2757988dd17b3431d908ede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe873240671995cde2757988dd17b3431d908ede", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe873240671995cde2757988dd17b3431d908ede/comments", "author": null, "committer": null, "parents": [{"sha": "27f006ebb12cb8dfc50bb0dae2f9f256436475b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27f006ebb12cb8dfc50bb0dae2f9f256436475b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27f006ebb12cb8dfc50bb0dae2f9f256436475b6"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "507cef68c06280c716c5081948c20937a9c073dd", "filename": "gcc/cse.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe873240671995cde2757988dd17b3431d908ede/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe873240671995cde2757988dd17b3431d908ede/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=fe873240671995cde2757988dd17b3431d908ede", "patch": "@@ -3321,12 +3321,15 @@ simplify_binary_operation (code, mode, op0, op1)\n \n   /* We can fold some multi-word operations.  */\n   if (GET_MODE_CLASS (mode) == MODE_INT\n-      && GET_CODE (op0) == CONST_DOUBLE\n+      && (GET_CODE (op0) == CONST_DOUBLE || GET_CODE (op0) == CONST_INT)\n       && (GET_CODE (op1) == CONST_DOUBLE || GET_CODE (op1) == CONST_INT))\n     {\n       HOST_WIDE_INT l1, l2, h1, h2, lv, hv;\n \n-      l1 = CONST_DOUBLE_LOW (op0), h1 = CONST_DOUBLE_HIGH (op0);\n+      if (GET_CODE (op0) == CONST_DOUBLE)\n+\tl1 = CONST_DOUBLE_LOW (op0), h1 = CONST_DOUBLE_HIGH (op0);\n+      else\n+\tl1 = INTVAL (op0), h1 = l1 < 0 ? -1 : 0;\n \n       if (GET_CODE (op1) == CONST_DOUBLE)\n \tl2 = CONST_DOUBLE_LOW (op1), h2 = CONST_DOUBLE_HIGH (op1);\n@@ -3463,11 +3466,15 @@ simplify_binary_operation (code, mode, op0, op1)\n \n \t  /* Handle both-operands-constant cases.  We can only add\n \t     CONST_INTs to constants since the sum of relocatable symbols\n-\t     can't be handled by most assemblers.  */\n+\t     can't be handled by most assemblers.  Don't add CONST_INT\n+\t     to CONST_INT since overflow won't be computed properly if wider\n+\t     than HOST_BITS_PER_WIDE_INT.  */\n \n-\t  if (CONSTANT_P (op0) && GET_CODE (op1) == CONST_INT)\n+\t  if (CONSTANT_P (op0) && GET_MODE (op0) != VOIDmode\n+\t      && GET_CODE (op1) == CONST_INT)\n \t    return plus_constant (op0, INTVAL (op1));\n-\t  else if (CONSTANT_P (op1) && GET_CODE (op0) == CONST_INT)\n+\t  else if (CONSTANT_P (op1) && GET_MODE (op1) != VOIDmode\n+\t\t   && GET_CODE (op0) == CONST_INT)\n \t    return plus_constant (op1, INTVAL (op0));\n \n \t  /* If one of the operands is a PLUS or a MINUS, see if we can\n@@ -3542,7 +3549,7 @@ simplify_binary_operation (code, mode, op0, op1)\n \t    return tem;\n \n \t  /* Don't let a relocatable value get a negative coeff.  */\n-\t  if (GET_CODE (op1) == CONST_INT)\n+\t  if (GET_CODE (op1) == CONST_INT && GET_MODE (op1) != VOIDmode)\n \t    return plus_constant (op0, - INTVAL (op1));\n \t  break;\n "}]}