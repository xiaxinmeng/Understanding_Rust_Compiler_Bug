{"sha": "7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JmNTgyZTZjZmNlZjkyMmEwODdiMWIyYjQyYWEwNGVhOWNiMmQ5NA==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-07-28T17:11:27Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2021-07-28T17:11:27Z"}, "message": "Fortran: ICE in resolve_allocate_deallocate for invalid STAT argument\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/101564\n\t* expr.c (gfc_check_vardef_context): Add check for KIND and LEN\n\tparameter inquiries.\n\t* match.c (gfc_match): Fix comment for %v code.\n\t(gfc_match_allocate, gfc_match_deallocate): Replace use of %v code\n\tby %e in gfc_match to allow for function references as STAT and\n\tERRMSG arguments.\n\t* resolve.c (resolve_allocate_deallocate): Avoid NULL pointer\n\tdereferences and shortcut for bad STAT and ERRMSG argument to\n\t(DE)ALLOCATE.  Remove bogus parts of checks for STAT and ERRMSG.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/101564\n\t* gfortran.dg/allocate_stat_3.f90: New test.\n\t* gfortran.dg/allocate_stat.f90: Adjust error messages.\n\t* gfortran.dg/implicit_11.f90: Likewise.\n\t* gfortran.dg/inquiry_type_ref_3.f90: Likewise.", "tree": {"sha": "ef270e0cfb9c265bc09048967391da0b90aa224a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef270e0cfb9c265bc09048967391da0b90aa224a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49e28c02a95a4bee981e69a80950309869580151", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e28c02a95a4bee981e69a80950309869580151", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49e28c02a95a4bee981e69a80950309869580151"}], "stats": {"total": 139, "additions": 117, "deletions": 22}, "files": [{"sha": "35563a78697f4f7a8fdd1c89c2e1ebf0dd3f1a52", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94", "patch": "@@ -6199,6 +6199,16 @@ gfc_check_vardef_context (gfc_expr* e, bool pointer, bool alloc_obj,\n \t  if (!pointer)\n \t    check_intentin = false;\n \t}\n+      if (ref->type == REF_INQUIRY\n+\t  && (ref->u.i == INQUIRY_KIND || ref->u.i == INQUIRY_LEN))\n+\t{\n+\t  if (context)\n+\t    gfc_error (\"%qs parameter inquiry for %qs in \"\n+\t\t       \"variable definition context (%s) at %L\",\n+\t\t       ref->u.i == INQUIRY_KIND ? \"KIND\" : \"LEN\",\n+\t\t       sym->name, context, &e->where);\n+\t  return false;\n+\t}\n     }\n \n   if (check_intentin"}, {"sha": "b11054810991c7b72de65cf48157d35c43f89823", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94", "patch": "@@ -1109,7 +1109,8 @@ gfc_match_char (char c)\n    %t  Matches end of statement.\n    %o  Matches an intrinsic operator, returned as an INTRINSIC enum.\n    %l  Matches a statement label\n-   %v  Matches a variable expression (an lvalue)\n+   %v  Matches a variable expression (an lvalue, except function references\n+   having a data pointer result)\n    %   Matches a required space (in free form) and optional spaces.  */\n \n match\n@@ -4405,7 +4406,7 @@ gfc_match_allocate (void)\n \n alloc_opt_list:\n \n-      m = gfc_match (\" stat = %v\", &tmp);\n+      m = gfc_match (\" stat = %e\", &tmp);\n       if (m == MATCH_ERROR)\n \tgoto cleanup;\n       if (m == MATCH_YES)\n@@ -4434,7 +4435,7 @@ gfc_match_allocate (void)\n \t    goto alloc_opt_list;\n \t}\n \n-      m = gfc_match (\" errmsg = %v\", &tmp);\n+      m = gfc_match (\" errmsg = %e\", &tmp);\n       if (m == MATCH_ERROR)\n \tgoto cleanup;\n       if (m == MATCH_YES)\n@@ -4777,7 +4778,7 @@ gfc_match_deallocate (void)\n \n dealloc_opt_list:\n \n-      m = gfc_match (\" stat = %v\", &tmp);\n+      m = gfc_match (\" stat = %e\", &tmp);\n       if (m == MATCH_ERROR)\n \tgoto cleanup;\n       if (m == MATCH_YES)\n@@ -4799,7 +4800,7 @@ gfc_match_deallocate (void)\n \t    goto dealloc_opt_list;\n \t}\n \n-      m = gfc_match (\" errmsg = %v\", &tmp);\n+      m = gfc_match (\" errmsg = %e\", &tmp);\n       if (m == MATCH_ERROR)\n \tgoto cleanup;\n       if (m == MATCH_YES)"}, {"sha": "592364689f9771efb42cb429f99530752f649643", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94", "patch": "@@ -8155,16 +8155,21 @@ resolve_allocate_deallocate (gfc_code *code, const char *fcn)\n   /* Check the stat variable.  */\n   if (stat)\n     {\n-      gfc_check_vardef_context (stat, false, false, false,\n-\t\t\t\t_(\"STAT variable\"));\n+      if (!gfc_check_vardef_context (stat, false, false, false,\n+\t\t\t\t     _(\"STAT variable\")))\n+\t  goto done_stat;\n \n-      if ((stat->ts.type != BT_INTEGER\n-\t   && !(stat->ref && (stat->ref->type == REF_ARRAY\n-\t\t\t      || stat->ref->type == REF_COMPONENT)))\n+      if (stat->ts.type != BT_INTEGER\n \t  || stat->rank > 0)\n \tgfc_error (\"Stat-variable at %L must be a scalar INTEGER \"\n \t\t   \"variable\", &stat->where);\n \n+      if (stat->expr_type == EXPR_CONSTANT || stat->symtree == NULL)\n+\tgoto done_stat;\n+\n+      /* F2018:9.7.4: The stat-variable shall not be allocated or deallocated\n+       * within the ALLOCATE or DEALLOCATE statement in which it appears ...\n+       */\n       for (p = code->ext.alloc.list; p; p = p->next)\n \tif (p->expr->symtree->n.sym->name == stat->symtree->n.sym->name)\n \t  {\n@@ -8192,29 +8197,35 @@ resolve_allocate_deallocate (gfc_code *code, const char *fcn)\n \t  }\n     }\n \n+done_stat:\n+\n   /* Check the errmsg variable.  */\n   if (errmsg)\n     {\n       if (!stat)\n \tgfc_warning (0, \"ERRMSG at %L is useless without a STAT tag\",\n \t\t     &errmsg->where);\n \n-      gfc_check_vardef_context (errmsg, false, false, false,\n-\t\t\t\t_(\"ERRMSG variable\"));\n+      if (!gfc_check_vardef_context (errmsg, false, false, false,\n+\t\t\t\t     _(\"ERRMSG variable\")))\n+\t  goto done_errmsg;\n \n       /* F18:R928  alloc-opt             is ERRMSG = errmsg-variable\n \t F18:R930  errmsg-variable       is scalar-default-char-variable\n \t F18:R906  default-char-variable is variable\n \t F18:C906  default-char-variable shall be default character.  */\n-      if ((errmsg->ts.type != BT_CHARACTER\n-\t   && !(errmsg->ref\n-\t\t&& (errmsg->ref->type == REF_ARRAY\n-\t\t    || errmsg->ref->type == REF_COMPONENT)))\n+      if (errmsg->ts.type != BT_CHARACTER\n \t  || errmsg->rank > 0\n \t  || errmsg->ts.kind != gfc_default_character_kind)\n \tgfc_error (\"ERRMSG variable at %L shall be a scalar default CHARACTER \"\n \t\t   \"variable\", &errmsg->where);\n \n+      if (errmsg->expr_type == EXPR_CONSTANT || errmsg->symtree == NULL)\n+\tgoto done_errmsg;\n+\n+      /* F2018:9.7.5: The errmsg-variable shall not be allocated or deallocated\n+       * within the ALLOCATE or DEALLOCATE statement in which it appears ...\n+       */\n       for (p = code->ext.alloc.list; p; p = p->next)\n \tif (p->expr->symtree->n.sym->name == errmsg->symtree->n.sym->name)\n \t  {\n@@ -8242,6 +8253,8 @@ resolve_allocate_deallocate (gfc_code *code, const char *fcn)\n \t  }\n     }\n \n+done_errmsg:\n+\n   /* Check that an allocate-object appears only once in the statement.  */\n \n   for (p = code->ext.alloc.list; p; p = p->next)"}, {"sha": "f8a12913c914632c45cd5d31d10a38b2f574b9f3", "filename": "gcc/testsuite/gfortran.dg/allocate_stat.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_stat.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_stat.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_stat.f90?ref=7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94", "patch": "@@ -38,7 +38,7 @@ function func2() result(res)\n   implicit none\n   real, pointer :: gain \n   integer :: res\n-  allocate (gain,STAT=func2) ! { dg-error \"is not a variable\" }\n+  allocate (gain,STAT=func2) ! { dg-error \"requires an argument list\" }\n   deallocate(gain)\n   res = 0\n end function func2\n@@ -51,7 +51,7 @@ integer function func2()\n   end interface\n   real, pointer :: gain \n   integer, parameter :: res = 2\n-  allocate (gain,STAT=func2) ! { dg-error \"is not a variable\" }\n+  allocate (gain,STAT=func2) ! { dg-error \"requires an argument list\" }\n   deallocate(gain)\n end subroutine sub\n \n@@ -68,9 +68,9 @@ function one()\n  end function one\n  subroutine sub()\n    integer, pointer :: p\n-   allocate(p, stat=one) ! { dg-error \"is not a variable\" }\n+   allocate(p, stat=one) ! { dg-error \"requires an argument list\" }\n    if(associated(p)) deallocate(p)\n-   allocate(p, stat=two) ! { dg-error \"is not a variable\" }\n+   allocate(p, stat=two) ! { dg-error \"requires an argument list\" }\n    if(associated(p)) deallocate(p)\n  end subroutine sub\n end module test"}, {"sha": "fe51ff7e826462ef75933db0683d15b4b38677f4", "filename": "gcc/testsuite/gfortran.dg/allocate_stat_3.f90", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_stat_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_stat_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_stat_3.f90?ref=7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94", "patch": "@@ -0,0 +1,71 @@\n+! { dg-do compile }\n+! PR fortran/101564 - ICE in resolve_allocate_deallocate\n+\n+program p\n+  implicit none\n+  integer, allocatable :: x(:)\n+  integer              :: stat\n+  integer, pointer     :: A\n+  integer, target      :: ptr\n+  real,    target      :: r\n+  character(80)        :: c\n+  type t\n+     integer :: stat\n+     real    :: r\n+     complex :: z\n+  end type t\n+  type(t), allocatable :: y\n+  type tc\n+     character(len=:), allocatable :: s\n+  end type tc\n+  type(tc) :: z\n+  allocate (character(42) :: z%s, stat=stat)\n+  allocate (x(2), stat=stat)\n+  deallocate (x,  stat=stat)\n+  allocate (A,    stat=f())\n+  deallocate (A,  stat=f())\n+  allocate (A,    stat=y%stat)\n+  deallocate (A,  stat=y%stat)\n+  allocate (A,    stat=stat, errmsg=c(2:79))\n+  deallocate (A,  stat=stat, errmsg=c(2:79))\n+  allocate (A,    stat=stat, errmsg=z%s)\n+  deallocate (A,  stat=stat, errmsg=z%s)\n+  allocate (A,    stat=stat, errmsg=z%s(2:39))\n+  deallocate (A,  stat=stat, errmsg=z%s(2:39))\n+  allocate (A,    stat=y%r)  ! { dg-error \"must be a scalar INTEGER variable\" }\n+  deallocate (A,  stat=y%r)  ! { dg-error \"must be a scalar INTEGER variable\" }\n+  allocate (x(2), stat=stat%kind) ! { dg-error \"STAT tag\" }\n+  deallocate (x,  stat=stat%kind) ! { dg-error \"STAT variable\" }\n+  allocate (A,    stat=A%kind)    ! { dg-error \"STAT tag\" }\n+  deallocate (A,  stat=A%kind)    ! { dg-error \"STAT variable\" }\n+  allocate (A,    stat=c%len)     ! { dg-error \"STAT tag\" }\n+  deallocate (A,  stat=c%len)     ! { dg-error \"STAT variable\" }\n+  allocate (A,    stat=y%stat%kind) ! { dg-error \"STAT tag\" }\n+  deallocate (A,  stat=y%stat%kind) ! { dg-error \"STAT variable\" }\n+  allocate (y, stat=y%stat) ! { dg-error \"within the same ALLOCATE statement\" }\n+  allocate (y, stat=r)      ! { dg-error \"must be a scalar INTEGER variable\" }\n+  allocate (A, stat=y%z%re)   ! { dg-error \"must be a scalar INTEGER variable\" }\n+  deallocate (A, stat=y%z%im) ! { dg-error \"must be a scalar INTEGER variable\" }\n+  allocate (y, stat=g())    ! { dg-error \"must be a scalar INTEGER variable\" }\n+  deallocate (y, stat=g())  ! { dg-error \"must be a scalar INTEGER variable\" }\n+  allocate (A, stat=f)      ! { dg-error \"requires an argument list\" }\n+  deallocate (A, stat=f)    ! { dg-error \"requires an argument list\" }\n+  allocate (y, stat=g)      ! { dg-error \"requires an argument list\" }\n+  deallocate (y, stat=g)    ! { dg-error \"requires an argument list\" }\n+  allocate (A, stat=z%s%len)   ! { dg-error \"parameter inquiry\" }\n+  deallocate (A, stat=z%s%len) ! { dg-error \"parameter inquiry\" }\n+  allocate (A,   stat=f(), errmsg=\"\") ! { dg-error \"ERRMSG variable\" }\n+  deallocate (A, stat=f(), errmsg=\"\") ! { dg-error \"ERRMSG variable\" }\n+  allocate (A,   stat=stat, errmsg=z%s%len) ! { dg-error \"ERRMSG variable\" }\n+  deallocate (A, stat=stat, errmsg=z%s%len) ! { dg-error \"ERRMSG variable\" }\n+  deallocate (z%s, stat=stat, errmsg=z%s)   ! { dg-error \"within the same DEALLOCATE statement\" }\n+contains\n+  integer function f()\n+    pointer :: f\n+    f => ptr\n+  end function f\n+  real function g()\n+    pointer :: g\n+    g => r\n+  end function g\n+end"}, {"sha": "8f93704ac4c4de50db0649b97973a0170b64b5d0", "filename": "gcc/testsuite/gfortran.dg/implicit_11.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_11.f90?ref=7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94", "patch": "@@ -31,6 +31,6 @@ end function istat2\n      SUBROUTINE AD0001\n        REAL RLA1(:)\n        ALLOCATABLE RLA1\n-       ALLOCATE (RLA1(NF10), STAT = ISTAT2) ! { dg-error \"is not a variable\" }\n+       ALLOCATE (RLA1(NF10), STAT = ISTAT2) ! { dg-error \"requires an argument list\" }\n      END SUBROUTINE\n      END MODULE tests2"}, {"sha": "7c1bf43785c5e7732b730ee634c6955060aeb551", "filename": "gcc/testsuite/gfortran.dg/inquiry_type_ref_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94/gcc%2Ftestsuite%2Fgfortran.dg%2Finquiry_type_ref_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94/gcc%2Ftestsuite%2Fgfortran.dg%2Finquiry_type_ref_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finquiry_type_ref_3.f90?ref=7bf582e6cfcef922a087b1b2b42aa04ea9cb2d94", "patch": "@@ -17,7 +17,7 @@ program main\n    type(t) :: s\n    b = \"abcdefg\"\n    a%kind = 2        ! { dg-error \"Assignment to a constant expression\" }\n-   b%len = 2         ! { dg-error \"Assignment to a LEN or KIND part_ref\" }\n+   b%len = 2         ! { dg-error \"parameter inquiry\" }\n    i = a%kind        ! OK\n    i = b%len         ! OK\n    print *, z%re     ! { dg-error \"must be applied to a COMPLEX expression\" }"}]}