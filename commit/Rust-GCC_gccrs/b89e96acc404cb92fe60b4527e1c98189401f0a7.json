{"sha": "b89e96acc404cb92fe60b4527e1c98189401f0a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg5ZTk2YWNjNDA0Y2I5MmZlNjBiNDUyN2UxYzk4MTg5NDAxZjBhNw==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2004-05-14T18:29:09Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-05-14T18:29:09Z"}, "message": "re PR rtl-optimization/14472 ([tree-ssa] [regression] no sib calling for enum to int functions)\n\n\tPR opt/14472\n\t* tree-tailcall.c (process_assignment): Use STRIP_NOPS to\n\tignore type conversions that do not inhibit tail calling.\n\t(find_tail_calls): Likewise.\n\nFrom-SVN: r81855", "tree": {"sha": "d4f040f6987fd06abab74375ab42f23b8c8798c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4f040f6987fd06abab74375ab42f23b8c8798c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b89e96acc404cb92fe60b4527e1c98189401f0a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b89e96acc404cb92fe60b4527e1c98189401f0a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b89e96acc404cb92fe60b4527e1c98189401f0a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b89e96acc404cb92fe60b4527e1c98189401f0a7/comments", "author": null, "committer": null, "parents": [{"sha": "14bc8dc2806a4dae14ec1fa052fb319cf92c2085", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14bc8dc2806a4dae14ec1fa052fb319cf92c2085", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14bc8dc2806a4dae14ec1fa052fb319cf92c2085"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "f327a764b1016dc8427e2066af2c8f69e8fc6a1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89e96acc404cb92fe60b4527e1c98189401f0a7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89e96acc404cb92fe60b4527e1c98189401f0a7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b89e96acc404cb92fe60b4527e1c98189401f0a7", "patch": "@@ -1,3 +1,10 @@\n+2004-05-14  Steven Bosscher  <stevenb@suse.de>\n+\n+\tPR opt/14472\n+\t* tree-tailcall.c (process_assignment): Use STRIP_NOPS to\n+\tignore type conversions that do not inhibit tail calling.\n+\t(find_tail_calls): Likewise.\n+\n 2004-05-14  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-dom.c (simplify_rhs_and_lookup_avail_expr): Reorganize"}, {"sha": "9321c93a5415db17e5b0dc563b04ab170113c356", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b89e96acc404cb92fe60b4527e1c98189401f0a7/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b89e96acc404cb92fe60b4527e1c98189401f0a7/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=b89e96acc404cb92fe60b4527e1c98189401f0a7", "patch": "@@ -72,7 +72,7 @@ Boston, MA 02111-1307, USA.  */\n    omit the accumulator.\n \n    There are three cases how the function may exit.  The first one is\n-   handled in adjust_return_value, the later two in adjust_accumulator_values\n+   handled in adjust_return_value, the other two in adjust_accumulator_values\n    (the second case is actually a special case of the third one and we\n    present it separately just for clarity):\n \n@@ -260,10 +260,16 @@ process_assignment (tree ass, tree stmt, block_stmt_iterator call, tree *m,\n   tree dest = TREE_OPERAND (ass, 0);\n   tree src = TREE_OPERAND (ass, 1);\n   enum tree_code code = TREE_CODE (src);\n-\n-  if (code == SSA_NAME)\n+  tree src_var = src;\n+\n+  /* See if this is a simple copy operation of an SSA name to the function\n+     result.  In that case we may have a simple tail call.  Ignore type\n+     conversions that can never produce extra code between the function\n+     call and the function return.  */\n+  STRIP_NOPS (src_var);\n+  if (TREE_CODE (src_var) == SSA_NAME)\n     {\n-      if (src != *ass_var)\n+      if (src_var != *ass_var)\n \treturn false;\n \n       *ass_var = dest;\n@@ -295,7 +301,7 @@ process_assignment (tree ass, tree stmt, block_stmt_iterator call, tree *m,\n   else\n     return false;\n \n-  switch (TREE_CODE (src))\n+  switch (code)\n     {\n     case PLUS_EXPR:\n       /* There should be no previous addition.  TODO -- it should be fairly\n@@ -463,12 +469,15 @@ find_tail_calls (basic_block bb, struct tailcall **ret)\n \treturn;\n     }\n \n+  /* See if this is a tail call we can handle.  */\n   ret_var = TREE_OPERAND (stmt, 0);\n   if (ret_var\n       && TREE_CODE (ret_var) == MODIFY_EXPR)\n     {\n+      tree ret_op = TREE_OPERAND (ret_var, 1);\n+      STRIP_NOPS (ret_op);\n       if (!tail_recursion\n-\t  && TREE_CODE (TREE_OPERAND (ret_var, 1)) != SSA_NAME)\n+\t  && TREE_CODE (ret_op) != SSA_NAME)\n \treturn;\n \n       if (!process_assignment (ret_var, stmt, bsi, &m, &a, &ass_var))"}]}