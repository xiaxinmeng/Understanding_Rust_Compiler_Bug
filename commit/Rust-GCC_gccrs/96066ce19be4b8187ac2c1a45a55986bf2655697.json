{"sha": "96066ce19be4b8187ac2c1a45a55986bf2655697", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYwNjZjZTE5YmU0YjgxODdhYzJjMWE0NWE1NTk4NmJmMjY1NTY5Nw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-01-06T18:53:01Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-01-06T18:53:01Z"}, "message": "re PR c/57773 (-Wpedantic incorrect warning for enum bit-field)\n\n\tPR c/57773\n\t* doc/implement-c.texi: Mention that other integer types are\n\tpermitted as bit-field types in strictly conforming mode.\nc/\n\t* c-decl.c (check_bitfield_type_and_width): Warn for implementation\n\tdefined bit-field types only in ISO C.\ntestsuite/\n\t* gcc.dg/pr57773.c: New test.\n\nFrom-SVN: r206373", "tree": {"sha": "d1e15bd8204f3a756aa9a12600b3781957a80f71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1e15bd8204f3a756aa9a12600b3781957a80f71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96066ce19be4b8187ac2c1a45a55986bf2655697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96066ce19be4b8187ac2c1a45a55986bf2655697", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96066ce19be4b8187ac2c1a45a55986bf2655697", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96066ce19be4b8187ac2c1a45a55986bf2655697/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aaa15a0d0823654d69cb9d4d751a0ecf3ed6ee49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaa15a0d0823654d69cb9d4d751a0ecf3ed6ee49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaa15a0d0823654d69cb9d4d751a0ecf3ed6ee49"}], "stats": {"total": 38, "additions": 34, "deletions": 4}, "files": [{"sha": "2a9dafaa1d00a4a81bc116d0385398424bf41a79", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96066ce19be4b8187ac2c1a45a55986bf2655697/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96066ce19be4b8187ac2c1a45a55986bf2655697/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96066ce19be4b8187ac2c1a45a55986bf2655697", "patch": "@@ -1,3 +1,9 @@\n+2014-01-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/57773\n+\t* doc/implement-c.texi: Mention that other integer types are\n+\tpermitted as bit-field types in strictly conforming mode.\n+\n 2014-01-02  Felix Yang  <fei.yang0953@gmail.com>\n \n \t* modulo-sched.c (schedule_reg_moves): Clear distance1_uses if it"}, {"sha": "917453b41110a89cedef9e299c6b50175b87ca1c", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96066ce19be4b8187ac2c1a45a55986bf2655697/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96066ce19be4b8187ac2c1a45a55986bf2655697/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=96066ce19be4b8187ac2c1a45a55986bf2655697", "patch": "@@ -1,3 +1,9 @@\n+2014-01-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/57773\n+\t* c-decl.c (check_bitfield_type_and_width): Warn for implementation\n+\tdefined bit-field types only in ISO C.\n+\n 2014-01-02  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tUpdate copyright years"}, {"sha": "6d4e6a36deacfbc95f566e1b723866800e3c2d37", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96066ce19be4b8187ac2c1a45a55986bf2655697/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96066ce19be4b8187ac2c1a45a55986bf2655697/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=96066ce19be4b8187ac2c1a45a55986bf2655697", "patch": "@@ -4840,7 +4840,8 @@ check_bitfield_type_and_width (tree *type, tree *width, tree orig_name)\n   if (!in_system_header_at (input_location)\n       && type_mv != integer_type_node\n       && type_mv != unsigned_type_node\n-      && type_mv != boolean_type_node)\n+      && type_mv != boolean_type_node\n+      && !flag_isoc99)\n     pedwarn (input_location, OPT_Wpedantic,\n \t     \"type of bit-field %qs is a GCC extension\", name);\n "}, {"sha": "762ffe018de0b3ce00fbc3ce21a8fee8132ac11b", "filename": "gcc/doc/implement-c.texi", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96066ce19be4b8187ac2c1a45a55986bf2655697/gcc%2Fdoc%2Fimplement-c.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96066ce19be4b8187ac2c1a45a55986bf2655697/gcc%2Fdoc%2Fimplement-c.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fimplement-c.texi?ref=96066ce19be4b8187ac2c1a45a55986bf2655697", "patch": "@@ -479,9 +479,8 @@ by the @option{-funsigned-bitfields} option.\n @cite{Allowable bit-field types other than @code{_Bool}, @code{signed int},\n and @code{unsigned int} (C99 and C11 6.7.2.1).}\n \n-No other types are permitted in strictly conforming mode.\n-@c Would it be better to restrict the pedwarn for other types to C90\n-@c mode and document the other types for C99/C11 mode?\n+Other integer types, such as @code{long int}, and enumerated types are\n+permitted even in strictly conforming mode.\n \n @item\n @cite{Whether atomic types are permitted for bit-fields (C11 6.7.2.1).}"}, {"sha": "075e83ede09b775c48d62bcfffe1c08e9205aa68", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96066ce19be4b8187ac2c1a45a55986bf2655697/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96066ce19be4b8187ac2c1a45a55986bf2655697/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96066ce19be4b8187ac2c1a45a55986bf2655697", "patch": "@@ -1,3 +1,8 @@\n+2014-01-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/57773\n+\t* gcc.dg/pr57773.c: New test.\n+\n 2014-01-06  Adam Butcher  <adam@jessamine.co.uk>\n \n \tPR c++/59635"}, {"sha": "1c309506d10816e162a9ad2501a172c811d5fd9b", "filename": "gcc/testsuite/gcc.dg/pr57773.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96066ce19be4b8187ac2c1a45a55986bf2655697/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57773.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96066ce19be4b8187ac2c1a45a55986bf2655697/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57773.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr57773.c?ref=96066ce19be4b8187ac2c1a45a55986bf2655697", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99 -Wpedantic\" } */\n+\n+enum e { A };\n+struct { enum e b: 2; } s1;\n+struct { signed char b: 2; } s2;\n+struct { unsigned char b: 2; } s3;\n+struct { short b: 2; } s4;\n+struct { unsigned short b: 2; } s5;\n+struct { long int b: 2; } s6;\n+struct { unsigned long int b: 2; } s7;\n+struct { long long int b: 2; } s8;\n+struct { unsigned long long int b: 2; } s9;"}]}