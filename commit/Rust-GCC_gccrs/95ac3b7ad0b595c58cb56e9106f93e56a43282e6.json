{"sha": "95ac3b7ad0b595c58cb56e9106f93e56a43282e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVhYzNiN2FkMGI1OTVjNThjYjU2ZTkxMDZmOTNlNTZhNDMyODJlNg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-11-04T23:03:37Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-11-04T23:03:37Z"}, "message": "Fix select { case v, ok := <-c: }.\n\nFrom-SVN: r180992", "tree": {"sha": "44cbefd0fecf973f2127b8b276de9ef5e912f6ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44cbefd0fecf973f2127b8b276de9ef5e912f6ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95ac3b7ad0b595c58cb56e9106f93e56a43282e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ac3b7ad0b595c58cb56e9106f93e56a43282e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95ac3b7ad0b595c58cb56e9106f93e56a43282e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95ac3b7ad0b595c58cb56e9106f93e56a43282e6/comments", "author": null, "committer": null, "parents": [{"sha": "cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf9e9959d1a5e8c7ddb506f68017b4f9c9292b94"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "156977d3f5dc7a222af2c2cf23e0d376b35dcaee", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ac3b7ad0b595c58cb56e9106f93e56a43282e6/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ac3b7ad0b595c58cb56e9106f93e56a43282e6/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=95ac3b7ad0b595c58cb56e9106f93e56a43282e6", "patch": "@@ -4559,10 +4559,26 @@ Select_clauses::Select_clause::lower(Gogo* gogo, Named_object* function,\n \t\t\t\t\t\t\t  loc);\n       Statement* s = Statement::make_tuple_receive_assignment(val, closed, ref,\n \t\t\t\t\t\t\t      true, loc);\n+\n       // We have to put S in STATEMENTS_, because that is where the\n       // variables are declared.\n+\n       go_assert(this->statements_ != NULL);\n-      this->statements_->add_statement_at_front(s);\n+\n+      // Skip the variable declaration statements themselves.\n+      size_t skip = 1;\n+      if (this->var_ != NULL)\n+\tskip = 2;\n+\n+      // Verify that we are only skipping variable declarations.\n+      size_t i = 0;\n+      for (Block::iterator p = this->statements_->begin();\n+\t   i < skip && p != this->statements_->end();\n+\t   ++p, ++i)\n+\tgo_assert((*p)->variable_declaration_statement() != NULL);\n+\n+      this->statements_->insert_statement_before(skip, s);\n+\n       // We have to lower STATEMENTS_ again, to lower the tuple\n       // receive assignment we just added.\n       gogo->lower_block(function, this->statements_);\n@@ -4655,7 +4671,8 @@ Select_clauses::Select_clause::dump_clause(\n         {\n           ast_dump_context->dump_expression(this->channel_);\n           ast_dump_context->ostream() << \" <- \" ;\n-          ast_dump_context->dump_expression(this->val_);\n+\t  if (this->val_ != NULL)\n+\t    ast_dump_context->dump_expression(this->val_);\n         }\n       else\n         {\n@@ -4667,8 +4684,7 @@ Select_clauses::Select_clause::dump_clause(\n               ast_dump_context->ostream() << \" , \" ;\n               ast_dump_context->dump_expression(this->closed_);\n             }\n-          if (this->closedvar_ != NULL ||\n-              this->var_ != NULL)\n+          if (this->closedvar_ != NULL || this->var_ != NULL)\n             ast_dump_context->ostream() << \" := \" ;\n \n           ast_dump_context->ostream() << \" <- \" ;"}, {"sha": "c2bbec59d95be91f6cb04b5157dacc658ee272b9", "filename": "gcc/testsuite/go.test/test/closedchan.go", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95ac3b7ad0b595c58cb56e9106f93e56a43282e6/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fclosedchan.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95ac3b7ad0b595c58cb56e9106f93e56a43282e6/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fclosedchan.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fclosedchan.go?ref=95ac3b7ad0b595c58cb56e9106f93e56a43282e6", "patch": "@@ -11,6 +11,10 @@\n \n package main\n \n+import \"os\"\n+\n+var failed bool\n+\n type Chan interface {\n \tSend(int)\n \tNbsend(int) bool\n@@ -225,19 +229,23 @@ func test1(c Chan) {\n \t\t// recv a close signal (a zero value)\n \t\tif x := c.Recv(); x != 0 {\n \t\t\tprintln(\"test1: recv on closed:\", x, c.Impl())\n+\t\t\tfailed = true\n \t\t}\n \t\tif x, ok := c.Recv2(); x != 0 || ok {\n \t\t\tprintln(\"test1: recv2 on closed:\", x, ok, c.Impl())\n+\t\t\tfailed = true\n \t\t}\n \n \t\t// should work with select: received a value without blocking, so selected == true.\n \t\tx, selected := c.Nbrecv()\n \t\tif x != 0 || !selected {\n \t\t\tprintln(\"test1: recv on closed nb:\", x, selected, c.Impl())\n+\t\t\tfailed = true\n \t\t}\n \t\tx, ok, selected := c.Nbrecv2()\n \t\tif x != 0 || ok || !selected {\n \t\t\tprintln(\"test1: recv2 on closed nb:\", x, ok, selected, c.Impl())\n+\t\t\tfailed = true\n \t\t}\n \t}\n \n@@ -247,19 +255,22 @@ func test1(c Chan) {\n \t// the value should have been discarded.\n \tif x := c.Recv(); x != 0 {\n \t\tprintln(\"test1: recv on closed got non-zero after send on closed:\", x, c.Impl())\n+\t\tfailed = true\n \t}\n \n \t// similarly Send.\n \tshouldPanic(func() { c.Send(2) })\n \tif x := c.Recv(); x != 0 {\n \t\tprintln(\"test1: recv on closed got non-zero after send on closed:\", x, c.Impl())\n+\t\tfailed = true\n \t}\n }\n \n func testasync1(c Chan) {\n \t// should be able to get the last value via Recv\n \tif x := c.Recv(); x != 1 {\n \t\tprintln(\"testasync1: Recv did not get 1:\", x, c.Impl())\n+\t\tfailed = true\n \t}\n \n \ttest1(c)\n@@ -269,6 +280,7 @@ func testasync2(c Chan) {\n \t// should be able to get the last value via Recv2\n \tif x, ok := c.Recv2(); x != 1 || !ok {\n \t\tprintln(\"testasync1: Recv did not get 1, true:\", x, ok, c.Impl())\n+\t\tfailed = true\n \t}\n \n \ttest1(c)\n@@ -278,6 +290,7 @@ func testasync3(c Chan) {\n \t// should be able to get the last value via Nbrecv\n \tif x, selected := c.Nbrecv(); x != 1 || !selected {\n \t\tprintln(\"testasync2: Nbrecv did not get 1, true:\", x, selected, c.Impl())\n+\t\tfailed = true\n \t}\n \n \ttest1(c)\n@@ -287,6 +300,7 @@ func testasync4(c Chan) {\n \t// should be able to get the last value via Nbrecv2\n \tif x, ok, selected := c.Nbrecv2(); x != 1 || !ok || !selected {\n \t\tprintln(\"testasync2: Nbrecv did not get 1, true, true:\", x, ok, selected, c.Impl())\n+\t\tfailed = true\n \t}\n \ttest1(c)\n }\n@@ -327,4 +341,19 @@ func main() {\n \t\t\ttestclosed(mk(closedasync()))\n \t\t}\n \t}\n+\t\n+\tvar ch chan int\t\n+\tshouldPanic(func() {\n+\t\tclose(ch)\n+\t})\n+\t\n+\tch = make(chan int)\n+\tclose(ch)\n+\tshouldPanic(func() {\n+\t\tclose(ch)\n+\t})\n+\n+\tif failed {\n+\t\tos.Exit(1)\n+\t}\n }"}]}