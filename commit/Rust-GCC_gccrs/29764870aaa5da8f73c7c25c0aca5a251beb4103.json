{"sha": "29764870aaa5da8f73c7c25c0aca5a251beb4103", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk3NjQ4NzBhYWE1ZGE4ZjczYzdjMjVjMGFjYTVhMjUxYmViNDEwMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-06-01T10:37:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-06-01T10:37:30Z"}, "message": "re PR tree-optimization/66280 (ICE: in vect_get_vec_def_for_operand, at tree-vect-stmts.c:1472)\n\n2015-06-01  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/66280\n\t* tree-vect-slp.c (vect_detect_hybrid_slp_stmts): Fix pattern\n\tdef-use walking.\n\n\t* g++.dg/torture/pr66280.C: New testcase.\n\t* g++.dg/torture/pr66280-2.C: Likewise.\n\nFrom-SVN: r223927", "tree": {"sha": "66e8cb18e6ff411fadefe24785a35836dab7ef84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/66e8cb18e6ff411fadefe24785a35836dab7ef84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29764870aaa5da8f73c7c25c0aca5a251beb4103", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29764870aaa5da8f73c7c25c0aca5a251beb4103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29764870aaa5da8f73c7c25c0aca5a251beb4103", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29764870aaa5da8f73c7c25c0aca5a251beb4103/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4900b374e60f2834e4d3236c8f48696993a4406", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4900b374e60f2834e4d3236c8f48696993a4406", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4900b374e60f2834e4d3236c8f48696993a4406"}], "stats": {"total": 94, "additions": 81, "deletions": 13}, "files": [{"sha": "4b007b4a0e0bbfc27f8689b05dead98168318e3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29764870aaa5da8f73c7c25c0aca5a251beb4103/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29764870aaa5da8f73c7c25c0aca5a251beb4103/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29764870aaa5da8f73c7c25c0aca5a251beb4103", "patch": "@@ -1,3 +1,9 @@\n+2015-06-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/66280\n+\t* tree-vect-slp.c (vect_detect_hybrid_slp_stmts): Fix pattern\n+\tdef-use walking.\n+\n 2015-06-01  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64.md"}, {"sha": "d25d5a7d9d983e48554fd5130be1a8b1485f0845", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29764870aaa5da8f73c7c25c0aca5a251beb4103/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29764870aaa5da8f73c7c25c0aca5a251beb4103/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=29764870aaa5da8f73c7c25c0aca5a251beb4103", "patch": "@@ -1,3 +1,9 @@\n+2015-06-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/66280\n+\t* g++.dg/torture/pr66280.C: New testcase.\n+\t* g++.dg/torture/pr66280-2.C: Likewise.\n+\n 2015-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/addr9_1.adb: New test."}, {"sha": "fee53fce7ad84037dd2e930801c9cd074fcf28ef", "filename": "gcc/testsuite/g++.dg/torture/pr66280-2.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29764870aaa5da8f73c7c25c0aca5a251beb4103/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr66280-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29764870aaa5da8f73c7c25c0aca5a251beb4103/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr66280-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr66280-2.C?ref=29764870aaa5da8f73c7c25c0aca5a251beb4103", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile }\n+\n+typedef struct\n+{\n+  short re;\n+  short im;\n+} cint16_T;\n+typedef struct\n+{\n+  int re;\n+  int im;\n+} cint32_T;\n+int a;\n+short b;\n+cint16_T *c;\n+cint32_T *d, *e;\n+void\n+fn1 ()\n+{\n+  for (; a; a++)\n+    {\n+      d[a].re = d[a].im = e[a].im = c[a].im * b;\n+      e[a].re = c[a].re * b;\n+    }\n+}"}, {"sha": "b9f43daeee9fcfdc8fe2fe9fd2fbaa61d1da922a", "filename": "gcc/testsuite/g++.dg/torture/pr66280.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29764870aaa5da8f73c7c25c0aca5a251beb4103/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr66280.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29764870aaa5da8f73c7c25c0aca5a251beb4103/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr66280.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr66280.C?ref=29764870aaa5da8f73c7c25c0aca5a251beb4103", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do compile }\n+\n+typedef struct\n+{\n+  short re;\n+  short im;\n+} cint16_T;\n+typedef struct\n+{\n+  int re;\n+  int im;\n+} cint32_T;\n+int a;\n+short b;\n+cint16_T *c;\n+cint32_T *d, *e;\n+void\n+fn1 ()\n+{\n+  for (; a; a++)\n+    {\n+      d[a].re = d[a].im = e[a].re = c[a].re * b;\n+      e[a].im = c[a].im * b;\n+    }\n+}"}, {"sha": "fb57dd411113991d3877ccd4fd1d30daab1dff7c", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29764870aaa5da8f73c7c25c0aca5a251beb4103/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29764870aaa5da8f73c7c25c0aca5a251beb4103/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=29764870aaa5da8f73c7c25c0aca5a251beb4103", "patch": "@@ -2031,21 +2031,27 @@ vect_detect_hybrid_slp_stmts (slp_tree node, unsigned i, slp_vect_type stype)\n     {\n       /* Check if a pure SLP stmt has uses in non-SLP stmts.  */\n       gcc_checking_assert (PURE_SLP_STMT (stmt_vinfo));\n+      /* We always get the pattern stmt here, but for immediate\n+\t uses we have to use the LHS of the original stmt.  */\n+      gcc_checking_assert (!STMT_VINFO_IN_PATTERN_P (stmt_vinfo));\n+      if (STMT_VINFO_RELATED_STMT (stmt_vinfo))\n+\tstmt = STMT_VINFO_RELATED_STMT (stmt_vinfo);\n       if (TREE_CODE (gimple_op (stmt, 0)) == SSA_NAME)\n \tFOR_EACH_IMM_USE_STMT (use_stmt, imm_iter, gimple_op (stmt, 0))\n-\t  if (gimple_bb (use_stmt)\n-\t      && flow_bb_inside_loop_p (loop, gimple_bb (use_stmt))\n-\t      && (use_vinfo = vinfo_for_stmt (use_stmt))\n-\t      && !STMT_SLP_TYPE (use_vinfo)\n-\t      && (STMT_VINFO_RELEVANT (use_vinfo)\n-\t\t  || VECTORIZABLE_CYCLE_DEF (STMT_VINFO_DEF_TYPE (use_vinfo))\n-\t\t  || (STMT_VINFO_IN_PATTERN_P (use_vinfo)\n-\t\t      && STMT_VINFO_RELATED_STMT (use_vinfo)\n-\t\t      && !STMT_SLP_TYPE (vinfo_for_stmt\n-\t\t\t    (STMT_VINFO_RELATED_STMT (use_vinfo)))))\n-\t      && !(gimple_code (use_stmt) == GIMPLE_PHI\n-\t\t   && STMT_VINFO_DEF_TYPE (use_vinfo) == vect_reduction_def))\n-\t    stype = hybrid;\n+\t  {\n+\t    if (!flow_bb_inside_loop_p (loop, gimple_bb (use_stmt)))\n+\t      continue;\n+\t    use_vinfo = vinfo_for_stmt (use_stmt);\n+\t    if (STMT_VINFO_IN_PATTERN_P (use_vinfo)\n+\t\t&& STMT_VINFO_RELATED_STMT (use_vinfo))\n+\t      use_vinfo = vinfo_for_stmt (STMT_VINFO_RELATED_STMT (use_vinfo));\n+\t    if (!STMT_SLP_TYPE (use_vinfo)\n+\t\t&& (STMT_VINFO_RELEVANT (use_vinfo)\n+\t\t    || VECTORIZABLE_CYCLE_DEF (STMT_VINFO_DEF_TYPE (use_vinfo)))\n+\t\t&& !(gimple_code (use_stmt) == GIMPLE_PHI\n+\t\t     && STMT_VINFO_DEF_TYPE (use_vinfo) == vect_reduction_def))\n+\t      stype = hybrid;\n+\t  }\n     }\n \n   if (stype == hybrid)"}]}