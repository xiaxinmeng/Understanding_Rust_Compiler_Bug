{"sha": "e77c9aedcda056161ff93b55c86789266c1895c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc3YzlhZWRjZGEwNTYxNjFmZjkzYjU1Yzg2Nzg5MjY2YzE4OTVjOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2012-11-05T21:10:27Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2012-11-05T21:10:27Z"}, "message": "forward_list: Update to meet allocator-aware requirements.\n\n\t* include/profile/forward_list: Update to meet allocator-aware\n\trequirements.\n\t* include/debug/forward_list: Likewise.\n\t* include/debug/vector: Verify allocators are swapped or equal.\n\t* include/debug/macros.h (__glibcxx_check_equal_allocs): Define.\n\t* include/debug/formatter.h: Add new debug message.\n\t* src/c++11/debug.cc: Likewise.\n\t* testsuite/23_containers/forward_list/allocator/swap.cc: Do not\n\tswap containers with non-propagating, non-equal allocators.\n\t* testsuite/23_containers/vector/allocator/swap.cc: Likewise.\n\nFrom-SVN: r193186", "tree": {"sha": "553f439a5157ae50ed27353875aa3cac4fd0c23b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/553f439a5157ae50ed27353875aa3cac4fd0c23b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e77c9aedcda056161ff93b55c86789266c1895c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e77c9aedcda056161ff93b55c86789266c1895c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e77c9aedcda056161ff93b55c86789266c1895c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e77c9aedcda056161ff93b55c86789266c1895c9/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "684592672f5aa8383f6985a33af99c73afc49292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/684592672f5aa8383f6985a33af99c73afc49292", "html_url": "https://github.com/Rust-GCC/gccrs/commit/684592672f5aa8383f6985a33af99c73afc49292"}], "stats": {"total": 113, "additions": 95, "deletions": 18}, "files": [{"sha": "4938ace66546ae3bf2d659c3e8c6ab0ffc34aa03", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e77c9aedcda056161ff93b55c86789266c1895c9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e77c9aedcda056161ff93b55c86789266c1895c9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e77c9aedcda056161ff93b55c86789266c1895c9", "patch": "@@ -1,3 +1,16 @@\n+2012-11-05  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/profile/forward_list: Update to meet allocator-aware\n+\trequirements.\n+\t* include/debug/forward_list: Likewise.\n+\t* include/debug/vector: Verify allocators are swapped or equal.\n+\t* include/debug/macros.h (__glibcxx_check_equal_allocs): Define.\n+\t* include/debug/formatter.h: Add new debug message.\n+\t* src/c++11/debug.cc: Likewise.\n+\t* testsuite/23_containers/forward_list/allocator/swap.cc: Do not\n+\tswap containers with non-propagating, non-equal allocators.\n+\t* testsuite/23_containers/vector/allocator/swap.cc: Likewise.\n+\n 2012-11-05  Benjamin Kosnik  <bkoz@redhat.com>\n             Oleg Smolsky  <oleg@smolsky.net>\n "}, {"sha": "d622ed1cdbaec8c4dbec63a1cfd8b2935410ea6e", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e77c9aedcda056161ff93b55c86789266c1895c9/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e77c9aedcda056161ff93b55c86789266c1895c9/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=e77c9aedcda056161ff93b55c86789266c1895c9", "patch": "@@ -114,7 +114,8 @@ namespace __gnu_debug\n     __msg_self_move_assign,\n     // unordered container buckets\n     __msg_bucket_index_oob,\n-    __msg_valid_load_factor\n+    __msg_valid_load_factor,\n+    __msg_equal_allocs\n   };\n \n   class _Error_formatter"}, {"sha": "61ae6ed6297a6834438d1a73a0efe736a49aeae7", "filename": "libstdc++-v3/include/debug/forward_list", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e77c9aedcda056161ff93b55c86789266c1895c9/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e77c9aedcda056161ff93b55c86789266c1895c9/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fforward_list?ref=e77c9aedcda056161ff93b55c86789266c1895c9", "patch": "@@ -49,6 +49,12 @@ namespace __debug\n \n       typedef typename _Base::iterator       _Base_iterator;\n       typedef typename _Base::const_iterator _Base_const_iterator;\n+\n+      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template\n+        rebind<_GLIBCXX_STD_C::_Fwd_list_node<_Tp>>::other _Node_alloc_type;\n+\n+      typedef __gnu_cxx::__alloc_traits<_Node_alloc_type> _Node_alloc_traits;\n+\n     public:\n       typedef typename _Base::reference             reference;\n       typedef typename _Base::const_reference       const_reference;\n@@ -78,12 +84,15 @@ namespace __debug\n       forward_list(forward_list&& __list, const _Alloc& __al)\n       : _Base(std::move(__list._M_base()), __al)\n       {\n-\tthis->_M_swap(__list);\n+\tif (__list.get_allocator() == __al)\n+\t  this->_M_swap(__list);\n+\telse\n+\t  __list._M_invalidate_all();\n       }\n \n       explicit\n-      forward_list(size_type __n)\n-      : _Base(__n)\n+      forward_list(size_type __n, const _Alloc& __al = _Alloc())\n+      : _Base(__n, __al)\n       { }\n \n       forward_list(size_type __n, const _Tp& __value,\n@@ -128,12 +137,17 @@ namespace __debug\n \n       forward_list&\n       operator=(forward_list&& __list)\n+      noexcept(_Node_alloc_traits::_S_nothrow_move())\n       {\n-\t// NB: DR 1204.\n-\t// NB: DR 675.\n \t__glibcxx_check_self_move_assign(__list);\n-\tclear();\n-\tswap(__list);\n+\tbool xfer_memory = _Node_alloc_traits::_S_propagate_on_move_assign()\n+\t    || __list.get_allocator() == this->get_allocator();\n+\tstatic_cast<_Base&>(*this) = std::move(__list);\n+\tif (xfer_memory)\n+\t  this->_M_swap(__list);\n+\telse\n+\t  this->_M_invalidate_all();\n+\t__list._M_invalidate_all();\n \treturn *this;\n       }\n \n@@ -333,7 +347,10 @@ namespace __debug\n \n       void\n       swap(forward_list& __list)\n+      noexcept(_Node_alloc_traits::_S_nothrow_swap())\n       {\n+\tif (!_Node_alloc_traits::_S_propagate_on_swap())\n+\t  __glibcxx_check_equal_allocs(__list);\n \t_Base::swap(__list);\n \tthis->_M_swap(__list);\n       }"}, {"sha": "30606d5bf66c320d35e16ec9d7a0102a3edd28c0", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e77c9aedcda056161ff93b55c86789266c1895c9/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e77c9aedcda056161ff93b55c86789266c1895c9/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=e77c9aedcda056161ff93b55c86789266c1895c9", "patch": "@@ -333,6 +333,11 @@ _GLIBCXX_DEBUG_VERIFY(_F > 0.0f,\t\t\t\t\t\\\n \t\t      _M_message(__gnu_debug::__msg_valid_load_factor)\t\\\n                       ._M_sequence(*this, \"this\"))\n \n+#define __glibcxx_check_equal_allocs(_Other)\t\t\t\\\n+_GLIBCXX_DEBUG_VERIFY(this->get_allocator() == _Other.get_allocator(),\t\\\n+\t\t      _M_message(__gnu_debug::__msg_equal_allocs)\t\\\n+\t\t      ._M_sequence(*this, \"this\"))\n+\n #ifdef _GLIBCXX_DEBUG_PEDANTIC\n #  define __glibcxx_check_string(_String) _GLIBCXX_DEBUG_ASSERT(_String != 0)\n #  define __glibcxx_check_string_len(_String,_Len) \\"}, {"sha": "9c33fdf69f9087e87e69f34a122da20dbb95bb7c", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e77c9aedcda056161ff93b55c86789266c1895c9/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e77c9aedcda056161ff93b55c86789266c1895c9/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=e77c9aedcda056161ff93b55c86789266c1895c9", "patch": "@@ -550,6 +550,10 @@ namespace __debug\n \t\t\tnoexcept(_Alloc_traits::_S_nothrow_swap())\n #endif\n       {\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+\tif (!_Alloc_traits::_S_propagate_on_swap())\n+\t  __glibcxx_check_equal_allocs(__x);\n+#endif\n \t_Base::swap(__x);\n \tthis->_M_swap(__x);\n         std::swap(_M_guaranteed_capacity, __x._M_guaranteed_capacity);"}, {"sha": "a44ea7aeeb4878ed81a77ff03ccacfd017395419", "filename": "libstdc++-v3/include/profile/forward_list", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e77c9aedcda056161ff93b55c86789266c1895c9/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e77c9aedcda056161ff93b55c86789266c1895c9/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fforward_list?ref=e77c9aedcda056161ff93b55c86789266c1895c9", "patch": "@@ -1,6 +1,6 @@\n // <forward_list> -*- C++ -*-\n \n-// Copyright (C) 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2010-2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -46,10 +46,14 @@ namespace __profile\n     {\n       typedef _GLIBCXX_STD_C::forward_list<_Tp, _Alloc> _Base;\n \n+      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template\n+        rebind<_GLIBCXX_STD_C::_Fwd_list_node<_Tp>>::other _Node_alloc_type;\n+\n+      typedef __gnu_cxx::__alloc_traits<_Node_alloc_type> _Node_alloc_traits;\n+\n     public:\n       typedef typename _Base::size_type             size_type;\n \n-    public:\n       // 23.2.3.1 construct/copy/destroy:\n       explicit\n       forward_list(const _Alloc& __al = _Alloc())\n@@ -64,8 +68,8 @@ namespace __profile\n       { }\n \n       explicit\n-      forward_list(size_type __n)\n-      : _Base(__n)\n+      forward_list(size_type __n, const _Alloc& __al = _Alloc())\n+      : _Base(__n, __al)\n       { }\n \n       forward_list(size_type __n, const _Tp& __value,\n@@ -103,11 +107,9 @@ namespace __profile\n \n       forward_list&\n       operator=(forward_list&& __list)\n+      noexcept(_Node_alloc_traits::_S_nothrow_move())\n       {\n-\t// NB: DR 1204.\n-\t// NB: DR 675.\n-\t_Base::clear();\n-\t_Base::swap(__list);\n+\tstatic_cast<_Base&>(*this) = std::move(__list);\n \treturn *this;\n       }\n "}, {"sha": "f7725ed50db5b2b8e9850e10b079f4e10a6dcb14", "filename": "libstdc++-v3/src/c++11/debug.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e77c9aedcda056161ff93b55c86789266c1895c9/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e77c9aedcda056161ff93b55c86789266c1895c9/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc?ref=e77c9aedcda056161ff93b55c86789266c1895c9", "patch": "@@ -181,7 +181,8 @@ namespace __gnu_debug\n     \"attempt to self move assign\",\n     \"attempt to access container with out-of-bounds bucket index %2;,\"\n     \" container only holds %3; buckets\",\n-    \"load factor shall be positive\"\n+    \"load factor shall be positive\",\n+    \"allocators must be equal\"\n   };\n \n   void"}, {"sha": "1d1e217f152143467fdae45b65d6a237397ed088", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/allocator/swap.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e77c9aedcda056161ff93b55c86789266c1895c9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e77c9aedcda056161ff93b55c86789266c1895c9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fallocator%2Fswap.cc?ref=e77c9aedcda056161ff93b55c86789266c1895c9", "patch": "@@ -25,6 +25,23 @@ struct T { int i; };\n \n using __gnu_test::propagating_allocator;\n \n+// It is undefined behaviour to swap() containers wth unequal allocators\n+// if the allocator doesn't propagate, so ensure the allocators compare\n+// equal, while still being able to test propagation via get_personality().\n+bool\n+operator==(const propagating_allocator<T, false>&,\n+           const propagating_allocator<T, false>&)\n+{\n+  return true;\n+}\n+\n+bool\n+operator!=(const propagating_allocator<T, false>&,\n+           const propagating_allocator<T, false>&)\n+{\n+  return false;\n+}\n+\n void test01()\n {\n   bool test __attribute__((unused)) = true;"}, {"sha": "2ca19db1713a588a4e10fa19c97256e2446f27c9", "filename": "libstdc++-v3/testsuite/23_containers/vector/allocator/swap.cc", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e77c9aedcda056161ff93b55c86789266c1895c9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e77c9aedcda056161ff93b55c86789266c1895c9/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fallocator%2Fswap.cc?ref=e77c9aedcda056161ff93b55c86789266c1895c9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2011 Free Software Foundation\n+// Copyright (C) 2011-2012 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,6 +25,23 @@ struct T { int i; };\n \n using __gnu_test::propagating_allocator;\n \n+// It is undefined behaviour to swap() containers wth unequal allocators\n+// if the allocator doesn't propagate, so ensure the allocators compare\n+// equal, while still being able to test propagation via get_personality().\n+bool\n+operator==(const propagating_allocator<T, false>&,\n+           const propagating_allocator<T, false>&)\n+{\n+  return true;\n+}\n+\n+bool\n+operator!=(const propagating_allocator<T, false>&,\n+           const propagating_allocator<T, false>&)\n+{\n+  return false;\n+}\n+\n void test01()\n {\n   bool test __attribute__((unused)) = true;"}]}