{"sha": "0ccc245a06e434df2c98d7f9d6036c03e4038842", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNjYzI0NWEwNmU0MzRkZjJjOThkN2Y5ZDYwMzZjMDNlNDAzODg0Mg==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-02-06T18:24:42Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-07T18:21:53Z"}, "message": "With the merge of BlockExprs\n\nFurther testing found regressions with implicit returns and type\nresolution.\n\nThis unifies the type resolution in block expressions to be more strict\nand ensure everything bar the final statement should be UnitType.", "tree": {"sha": "cf06b88b66d1bd2a54cc1db7e10ea40fc4c09deb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf06b88b66d1bd2a54cc1db7e10ea40fc4c09deb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ccc245a06e434df2c98d7f9d6036c03e4038842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ccc245a06e434df2c98d7f9d6036c03e4038842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ccc245a06e434df2c98d7f9d6036c03e4038842", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ccc245a06e434df2c98d7f9d6036c03e4038842/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db7134353447921136a321b8fd78cea78f2c344e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7134353447921136a321b8fd78cea78f2c344e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db7134353447921136a321b8fd78cea78f2c344e"}], "stats": {"total": 223, "additions": 81, "deletions": 142}, "files": [{"sha": "686fb7f8a3d1ca060fe102e7c069482a76818c0b", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccc245a06e434df2c98d7f9d6036c03e4038842/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccc245a06e434df2c98d7f9d6036c03e4038842/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=0ccc245a06e434df2c98d7f9d6036c03e4038842", "patch": "@@ -460,22 +460,31 @@ class CompileExpr : public HIRCompileBase\n \treturn;\n       }\n \n-    fncontext fnctx = ctx->peek_fn ();\n-    Bblock *enclosing_scope = ctx->peek_enclosing_scope ();\n-    Btype *block_type = TyTyResolveCompile::compile (ctx, block_tyty);\n-\n-    bool is_address_taken = false;\n-    Bstatement *ret_var_stmt = nullptr;\n-    Bvariable *tmp = ctx->get_backend ()->temporary_variable (\n-      fnctx.fndecl, enclosing_scope, block_type, NULL, is_address_taken,\n-      expr.get_locus (), &ret_var_stmt);\n-    ctx->add_statement (ret_var_stmt);\n+    Bvariable *tmp = NULL;\n+    bool needs_temp = block_tyty->get_kind () != TyTy::TypeKind::UNIT;\n+    if (needs_temp)\n+      {\n+\tfncontext fnctx = ctx->peek_fn ();\n+\tBblock *enclosing_scope = ctx->peek_enclosing_scope ();\n+\tBtype *block_type = TyTyResolveCompile::compile (ctx, block_tyty);\n+\n+\tbool is_address_taken = false;\n+\tBstatement *ret_var_stmt = nullptr;\n+\ttmp = ctx->get_backend ()->temporary_variable (\n+\t  fnctx.fndecl, enclosing_scope, block_type, NULL, is_address_taken,\n+\t  expr.get_locus (), &ret_var_stmt);\n+\tctx->add_statement (ret_var_stmt);\n+      }\n \n     auto code_block = CompileBlock::compile (&expr, ctx, tmp);\n     auto block_stmt = ctx->get_backend ()->block_statement (code_block);\n     ctx->add_statement (block_stmt);\n \n-    translated = ctx->get_backend ()->var_expression (tmp, expr.get_locus ());\n+    if (tmp != NULL)\n+      {\n+\ttranslated\n+\t  = ctx->get_backend ()->var_expression (tmp, expr.get_locus ());\n+      }\n   }\n \n   void visit (HIR::StructExprStructFields &struct_expr)"}, {"sha": "e7fa3b3a9e0cfa4f37c4b2195d7d4f1bf0baf17d", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 13, "deletions": 66, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccc245a06e434df2c98d7f9d6036c03e4038842/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccc245a06e434df2c98d7f9d6036c03e4038842/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=0ccc245a06e434df2c98d7f9d6036c03e4038842", "patch": "@@ -32,9 +32,9 @@ namespace Resolver {\n class TypeCheckExpr : public TypeCheckBase\n {\n public:\n-  static TyTy::TyBase *Resolve (HIR::Expr *expr, bool is_final_expr = false)\n+  static TyTy::TyBase *Resolve (HIR::Expr *expr)\n   {\n-    TypeCheckExpr resolver (is_final_expr);\n+    TypeCheckExpr resolver;\n     expr->accept_vis (resolver);\n \n     if (resolver.infered == nullptr)\n@@ -277,11 +277,13 @@ class TypeCheckExpr : public TypeCheckBase\n \n   void visit (HIR::AssignmentExpr &expr)\n   {\n+    infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+\n     auto lhs = TypeCheckExpr::Resolve (expr.get_lhs ());\n     auto rhs = TypeCheckExpr::Resolve (expr.get_rhs ());\n \n-    infered = lhs->combine (rhs);\n-    if (infered == nullptr)\n+    auto result = lhs->combine (rhs);\n+    if (result == nullptr)\n       {\n \trust_error_at (expr.get_locus (),\n \t\t       \"failure in TypeInference AssignmentExpr\");\n@@ -320,11 +322,10 @@ class TypeCheckExpr : public TypeCheckBase\n \treturn;\n       }\n \n-    // FIXME free the old one\n     context->insert_type (\n       Analysis::NodeMapping (expr.get_lhs ()->get_mappings ().get_crate_num (),\n \t\t\t     ref_node_id, ref, UNKNOWN_LOCAL_DEFID),\n-      infered->clone ());\n+      result->clone ());\n   }\n \n   void visit (HIR::IdentifierExpr &expr)\n@@ -592,76 +593,25 @@ class TypeCheckExpr : public TypeCheckBase\n   void visit (HIR::IfExpr &expr)\n   {\n     TypeCheckExpr::Resolve (expr.get_if_condition ());\n-    auto blk_expr = TypeCheckExpr::Resolve (expr.get_if_block ());\n-\n-    if (is_final_expr\n-\t&& context->peek_return_type ()->get_kind () != TyTy::TypeKind::UNIT)\n-      {\n-\tauto expected_ty = context->peek_return_type ();\n-\tinfered = expected_ty->combine (blk_expr);\n-\treturn;\n-      }\n+    TypeCheckExpr::Resolve (expr.get_if_block ());\n \n     infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n   }\n \n   void visit (HIR::IfExprConseqElse &expr)\n   {\n-    // check and resolve all types in the conditional var\n     TypeCheckExpr::Resolve (expr.get_if_condition ());\n-\n     auto if_blk_resolved = TypeCheckExpr::Resolve (expr.get_if_block ());\n     auto else_blk_resolved = TypeCheckExpr::Resolve (expr.get_else_block ());\n \n-    TyTy::TyBase *if_block_tyty = nullptr;\n-    if (expr.get_if_block ()->has_expr ())\n-      if_block_tyty\n-\t= TypeCheckExpr::Resolve (expr.get_if_block ()->expr.get ());\n-    else\n-      if_block_tyty = if_blk_resolved;\n-\n-    TyTy::TyBase *else_block_tyty = nullptr;\n-    if (expr.get_else_block ()->has_expr ())\n-      else_block_tyty\n-\t= TypeCheckExpr::Resolve (expr.get_else_block ()->expr.get ());\n-    else\n-      else_block_tyty = else_blk_resolved;\n-\n-    if (context->peek_return_type ()->get_kind () != TyTy::TypeKind::UNIT)\n-      {\n-\t// this must combine to what the type is expected\n-\t// this might be a parameter or the last expr in an if + else in a\n-\t// BlockExpr then it must resolve to fn return type else its a unit-type\n-\tauto expected_ty\n-\t  = is_final_expr\n-\t      ? context->peek_return_type ()\n-\t      : new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n-\n-\tauto if_blk_combined = expected_ty->combine (if_block_tyty);\n-\tauto else_blk_combined = expected_ty->combine (else_block_tyty);\n-\n-\tinfered = if_blk_combined->combine (else_blk_combined);\n-\treturn;\n-      }\n-\n-    infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+    infered = if_blk_resolved->combine (else_blk_resolved);\n   }\n \n   void visit (HIR::IfExprConseqIf &expr)\n   {\n     TypeCheckExpr::Resolve (expr.get_if_condition ());\n-    auto if_blk = TypeCheckExpr::Resolve (expr.get_if_block ());\n-    auto elif_blk = TypeCheckExpr::Resolve (expr.get_conseq_if_expr ());\n-\n-    if (is_final_expr\n-\t&& context->peek_return_type ()->get_kind () != TyTy::TypeKind::UNIT)\n-      {\n-\tauto expected_ty = context->peek_return_type ();\n-\n-\tinfered = expected_ty->combine (if_blk);\n-\tinfered = infered->combine (elif_blk);\n-\treturn;\n-      }\n+    TypeCheckExpr::Resolve (expr.get_if_block ());\n+    TypeCheckExpr::Resolve (expr.get_conseq_if_expr ());\n \n     infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n   }\n@@ -817,9 +767,8 @@ class TypeCheckExpr : public TypeCheckBase\n   }\n \n private:\n-  TypeCheckExpr (bool is_final_expr)\n-    : TypeCheckBase (), infered (nullptr), infered_array_elems (nullptr),\n-      is_final_expr (is_final_expr)\n+  TypeCheckExpr ()\n+    : TypeCheckBase (), infered (nullptr), infered_array_elems (nullptr)\n   {}\n \n   bool\n@@ -870,8 +819,6 @@ class TypeCheckExpr : public TypeCheckBase\n \n   TyTy::TyBase *infered;\n   TyTy::TyBase *infered_array_elems;\n-\n-  bool is_final_expr;\n };\n \n } // namespace Resolver"}, {"sha": "a0a4fda4b638a54e8cbe732444b9e70369ac38bf", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 10, "deletions": 32, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccc245a06e434df2c98d7f9d6036c03e4038842/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccc245a06e434df2c98d7f9d6036c03e4038842/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=0ccc245a06e434df2c98d7f9d6036c03e4038842", "patch": "@@ -170,23 +170,12 @@ class TypeCheckImplItem : public TypeCheckBase\n     auto expected_ret_tyty = resolve_fn_type->return_type ();\n     context->push_return_type (expected_ret_tyty);\n \n-    TypeCheckExpr::Resolve (function.function_body.get ());\n-    if (function.function_body->has_expr ())\n-      {\n-\tauto resolved\n-\t  = TypeCheckExpr::Resolve (function.function_body->expr.get ());\n+    auto result = TypeCheckExpr::Resolve (function.function_body.get ());\n+    auto ret_resolved = expected_ret_tyty->combine (result);\n+    if (ret_resolved == nullptr)\n+      return;\n \n-\tauto ret_resolved = expected_ret_tyty->combine (resolved);\n-\tif (ret_resolved == nullptr)\n-\t  {\n-\t    rust_error_at (function.function_body->expr->get_locus_slow (),\n-\t\t\t   \"failed to resolve final expression\");\n-\t    return;\n-\t  }\n-\n-\tcontext->peek_return_type ()->append_reference (\n-\t  ret_resolved->get_ref ());\n-      }\n+    context->peek_return_type ()->append_reference (ret_resolved->get_ref ());\n \n     context->pop_return_type ();\n   }\n@@ -213,23 +202,12 @@ class TypeCheckImplItem : public TypeCheckBase\n     auto expected_ret_tyty = resolve_fn_type->return_type ();\n     context->push_return_type (expected_ret_tyty);\n \n-    TypeCheckExpr::Resolve (method.get_function_body ().get ());\n-    if (method.get_function_body ()->has_expr ())\n-      {\n-\tauto resolved\n-\t  = TypeCheckExpr::Resolve (method.get_function_body ()->expr.get ());\n+    auto result = TypeCheckExpr::Resolve (method.get_function_body ().get ());\n+    auto ret_resolved = expected_ret_tyty->combine (result);\n+    if (ret_resolved == nullptr)\n+      return;\n \n-\tauto ret_resolved = expected_ret_tyty->combine (resolved);\n-\tif (ret_resolved == nullptr)\n-\t  {\n-\t    rust_error_at (method.get_function_body ()->expr->get_locus_slow (),\n-\t\t\t   \"failed to resolve final expression\");\n-\t    return;\n-\t  }\n-\n-\tcontext->peek_return_type ()->append_reference (\n-\t  ret_resolved->get_ref ());\n-      }\n+    context->peek_return_type ()->append_reference (ret_resolved->get_ref ());\n \n     context->pop_return_type ();\n   }"}, {"sha": "fbe2056e45fa87af74354fa4795932e1deb3b3ba", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccc245a06e434df2c98d7f9d6036c03e4038842/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccc245a06e434df2c98d7f9d6036c03e4038842/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=0ccc245a06e434df2c98d7f9d6036c03e4038842", "patch": "@@ -75,23 +75,12 @@ class TypeCheckItem : public TypeCheckBase\n     auto expected_ret_tyty = resolve_fn_type->return_type ();\n     context->push_return_type (expected_ret_tyty);\n \n-    TypeCheckExpr::Resolve (function.function_body.get ());\n-    if (function.function_body->has_expr ())\n-      {\n-\tauto resolved\n-\t  = TypeCheckExpr::Resolve (function.function_body->expr.get ());\n-\n-\tauto ret_resolved = expected_ret_tyty->combine (resolved);\n-\tif (ret_resolved == nullptr)\n-\t  {\n-\t    rust_error_at (function.function_body->expr->get_locus_slow (),\n-\t\t\t   \"failed to resolve final expression\");\n-\t    return;\n-\t  }\n-\n-\tcontext->peek_return_type ()->append_reference (\n-\t  ret_resolved->get_ref ());\n-      }\n+    auto result = TypeCheckExpr::Resolve (function.function_body.get ());\n+    auto ret_resolved = expected_ret_tyty->combine (result);\n+    if (ret_resolved == nullptr)\n+      return;\n+\n+    context->peek_return_type ()->append_reference (ret_resolved->get_ref ());\n \n     context->pop_return_type ();\n   }"}, {"sha": "83fdf110faa43cc8f28681c58089467b62498c1a", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccc245a06e434df2c98d7f9d6036c03e4038842/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccc245a06e434df2c98d7f9d6036c03e4038842/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=0ccc245a06e434df2c98d7f9d6036c03e4038842", "patch": "@@ -30,21 +30,21 @@ namespace Resolver {\n class TypeCheckStmt : public TypeCheckBase\n {\n public:\n-  static TyTy::TyBase *Resolve (HIR::Stmt *stmt, bool is_final_stmt)\n+  static TyTy::TyBase *Resolve (HIR::Stmt *stmt)\n   {\n-    TypeCheckStmt resolver (is_final_stmt);\n+    TypeCheckStmt resolver;\n     stmt->accept_vis (resolver);\n     return resolver.infered;\n   }\n \n   void visit (HIR::ExprStmtWithBlock &stmt)\n   {\n-    infered = TypeCheckExpr::Resolve (stmt.get_expr (), is_final_stmt);\n+    infered = TypeCheckExpr::Resolve (stmt.get_expr ());\n   }\n \n   void visit (HIR::ExprStmtWithoutBlock &stmt)\n   {\n-    infered = TypeCheckExpr::Resolve (stmt.get_expr (), is_final_stmt);\n+    infered = TypeCheckExpr::Resolve (stmt.get_expr ());\n   }\n \n   void visit (HIR::LetStmt &stmt)\n@@ -54,8 +54,7 @@ class TypeCheckStmt : public TypeCheckBase\n     TyTy::TyBase *init_expr_ty = nullptr;\n     if (stmt.has_init_expr ())\n       {\n-\tinit_expr_ty\n-\t  = TypeCheckExpr::Resolve (stmt.get_init_expr (), is_final_stmt);\n+\tinit_expr_ty = TypeCheckExpr::Resolve (stmt.get_init_expr ());\n \tif (init_expr_ty == nullptr)\n \t  return;\n \n@@ -106,13 +105,10 @@ class TypeCheckStmt : public TypeCheckBase\n   }\n \n private:\n-  TypeCheckStmt (bool is_final_stmt)\n-    : TypeCheckBase (), infered (nullptr), is_final_stmt (is_final_stmt)\n-  {}\n+  TypeCheckStmt () : TypeCheckBase (), infered (nullptr) {}\n \n   TyTy::TyBase *infered;\n-  bool is_final_stmt;\n-}; // namespace Resolver\n+};\n \n } // namespace Resolver\n } // namespace Rust"}, {"sha": "3044a6ff35dbd181981709498478472f5c1defe6", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccc245a06e434df2c98d7f9d6036c03e4038842/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccc245a06e434df2c98d7f9d6036c03e4038842/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=0ccc245a06e434df2c98d7f9d6036c03e4038842", "patch": "@@ -109,10 +109,11 @@ TypeCheckExpr::visit (HIR::BlockExpr &expr)\n \n   expr.iterate_stmts ([&] (HIR::Stmt *s) mutable -> bool {\n     bool is_final_stmt = expr.is_final_stmt (s);\n-    bool is_final_expr = is_final_stmt && !expr.has_expr ();\n+    bool is_final_expr\n+      = is_final_stmt && (!expr.has_expr () || !expr.tail_expr_reachable ());\n \n-    auto infered = TypeCheckStmt::Resolve (s, is_final_expr);\n-    if (infered == nullptr)\n+    auto resolved = TypeCheckStmt::Resolve (s);\n+    if (resolved == nullptr)\n       {\n \trust_error_at (s->get_locus_slow (), \"failure to resolve type\");\n \treturn false;\n@@ -121,7 +122,12 @@ TypeCheckExpr::visit (HIR::BlockExpr &expr)\n     if (is_final_expr)\n       {\n \tdelete block_tyty;\n-\tblock_tyty = infered;\n+\tblock_tyty = resolved;\n+      }\n+    else if (resolved->get_kind () != TyTy::TypeKind::UNIT)\n+      {\n+\trust_error_at (s->get_locus_slow (), \"expected () got %s\",\n+\t\t       infered->as_string ().c_str ());\n       }\n \n     return true;\n@@ -131,7 +137,7 @@ TypeCheckExpr::visit (HIR::BlockExpr &expr)\n     {\n       delete block_tyty;\n \n-      block_tyty = TypeCheckExpr::Resolve (expr.get_final_expr ().get (), true);\n+      block_tyty = TypeCheckExpr::Resolve (expr.get_final_expr ().get ());\n     }\n \n   infered = block_tyty->clone ();"}, {"sha": "a66ca7bcb01a62843f2b3d9c85f5a47525d854c4", "filename": "gcc/testsuite/rust.test/compilable/block_expr2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ccc245a06e434df2c98d7f9d6036c03e4038842/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fblock_expr2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ccc245a06e434df2c98d7f9d6036c03e4038842/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fblock_expr2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fblock_expr2.rs?ref=0ccc245a06e434df2c98d7f9d6036c03e4038842", "patch": "@@ -0,0 +1,14 @@\n+fn test() -> i32 {\n+    123\n+}\n+\n+fn main() {\n+    let a = { test() };\n+    let b = {\n+        if a > 10 {\n+            a - 1\n+        } else {\n+            a + 1\n+        }\n+    };\n+}"}]}