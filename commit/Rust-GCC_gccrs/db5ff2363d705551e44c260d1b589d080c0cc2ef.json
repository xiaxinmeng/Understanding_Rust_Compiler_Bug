{"sha": "db5ff2363d705551e44c260d1b589d080c0cc2ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI1ZmYyMzYzZDcwNTU1MWU0NGMyNjBkMWI1ODlkMDgwYzBjYzJlZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-12-11T21:46:27Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-12-11T21:46:27Z"}, "message": "type_traits: Implement rank.\n\n2004-12-11  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/type_traits: Implement rank.\n\t* testsuite/testsuite_tr1.h (test_property): Generalize to any\n\tvalue_type.\n\t(test_category, test_relationship): Slightly tweak consistently.\n\t* testsuite/tr1/4_metaprogramming/type_properties/rank/\n\trank.cc: New.\n\t* testsuite/tr1/4_metaprogramming/type_properties/rank/\n\ttypedefs.cc: Likewise.\n\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_compound/is_compound.cc: New.\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_compound/typedefs.cc: Likewise.\n\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_arithmetic/is_arithmetic.cc: Tweak consistently with the\n\ttestsuite_tr1.h changes.\n\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n\tis_fundamental/is_fundamental.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_array/is_array.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_floating_point/is_floating_point.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_integral/is_integral.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_reference/is_reference.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n\tis_void/is_void.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/relationships_between_types/\n\tis_same/is_same.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/is_const/\n\tis_const.cc: Likewise.\n\t* testsuite/tr1/4_metaprogramming/type_properties/is_volatile/\n\tis_volatile.cc: Likewise.\n\nFrom-SVN: r92033", "tree": {"sha": "3ffd3f0de10d01a8c3c44949a87990360f7a8b34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ffd3f0de10d01a8c3c44949a87990360f7a8b34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db5ff2363d705551e44c260d1b589d080c0cc2ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5ff2363d705551e44c260d1b589d080c0cc2ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db5ff2363d705551e44c260d1b589d080c0cc2ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db5ff2363d705551e44c260d1b589d080c0cc2ef/comments", "author": null, "committer": null, "parents": [{"sha": "343f6bbf97b13bba5cb6cbd6bdd2bbc601f342c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/343f6bbf97b13bba5cb6cbd6bdd2bbc601f342c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/343f6bbf97b13bba5cb6cbd6bdd2bbc601f342c6"}], "stats": {"total": 524, "additions": 375, "deletions": 149}, "files": [{"sha": "4de8634dc4200be705d4bb4bae40bcd5f4eb115f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=db5ff2363d705551e44c260d1b589d080c0cc2ef", "patch": "@@ -1,3 +1,41 @@\n+2004-12-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/type_traits: Implement rank.\n+\t* testsuite/testsuite_tr1.h (test_property): Generalize to any\n+\tvalue_type.\n+\t(test_category, test_relationship): Slightly tweak consistently.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/rank/\n+\trank.cc: New.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/rank/\n+\ttypedefs.cc: Likewise.\n+\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_compound/is_compound.cc: New.\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_compound/typedefs.cc: Likewise.\n+\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_arithmetic/is_arithmetic.cc: Tweak consistently with the\n+\ttestsuite_tr1.h changes.\n+\t* testsuite/tr1/4_metaprogramming/composite_type_traits/\n+\tis_fundamental/is_fundamental.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_array/is_array.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_floating_point/is_floating_point.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_integral/is_integral.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_reference/is_reference.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/primary_type_categories/\n+\tis_void/is_void.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/relationships_between_types/\n+\tis_same/is_same.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/is_const/\n+\tis_const.cc: Likewise.\n+\t* testsuite/tr1/4_metaprogramming/type_properties/is_volatile/\n+\tis_volatile.cc: Likewise.\n+\n 2004-12-10  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/type_traits: Implement remove_const, remove_volatile,"}, {"sha": "5e16637e46d7a22f20d6ed51d0be73d821f7cbae", "filename": "libstdc++-v3/include/tr1/type_traits", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Ftype_traits?ref=db5ff2363d705551e44c260d1b589d080c0cc2ef", "patch": "@@ -233,8 +233,17 @@ namespace tr1\n   template<typename _Tp>\n     struct alignment_of;\n   \n+  template<typename>\n+    struct rank\n+    : public integral_constant<std::size_t, 0> { };\n+   \n+  template<typename _Tp, std::size_t _Size>\n+    struct rank<_Tp[_Size]>\n+    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };\n+\n   template<typename _Tp>\n-    struct rank;\n+    struct rank<_Tp[]>\n+    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };\n    \n   template<typename _Tp, unsigned _Uint = 0>\n     struct extent;\n@@ -324,25 +333,25 @@ namespace tr1\n   template<typename _Tp>\n     struct remove_extent\n     {\n-      typedef _Tp   type;\n+      typedef _Tp     type;\n     };\n \n   template<typename _Tp, std::size_t _Size>\n     struct remove_extent<_Tp[_Size]>\n     {\n-      typedef _Tp   type;\n+      typedef _Tp     type;\n     };\n \n   template<typename _Tp>\n     struct remove_extent<_Tp[]>\n     {\n-      typedef _Tp   type;\n+      typedef _Tp     type;\n     };\n \n   template<typename _Tp>\n     struct remove_all_extents\n     {\n-      typedef _Tp   type;\n+      typedef _Tp     type;\n     };\n \n   template<typename _Tp, std::size_t _Size>"}, {"sha": "c9d8d235781db9acc7833b5d46b6b3af520d2309", "filename": "libstdc++-v3/testsuite/testsuite_tr1.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_tr1.h?ref=db5ff2363d705551e44c260d1b589d080c0cc2ef", "patch": "@@ -35,41 +35,41 @@ namespace __gnu_test\n {  \n   // For tr1/type_traits.\n   template<template<typename> class Category,\n-\t   typename Type, bool Tv>\n+\t   typename Type>\n     bool\n-    test_category()\n+    test_category(bool value)\n     {\n       bool ret = true;\n-      ret &= Category<Type>::value == Tv;\n-      ret &= Category<const Type>::value == Tv;\n-      ret &= Category<volatile Type>::value == Tv;\n-      ret &= Category<const volatile Type>::value == Tv;\n-      ret &= Category<Type>::type::value == Tv;\n-      ret &= Category<const Type>::type::value == Tv;\n-      ret &= Category<volatile Type>::type::value == Tv;\n-      ret &= Category<const volatile Type>::type::value == Tv;\n+      ret &= Category<Type>::value == value;\n+      ret &= Category<const Type>::value == value;\n+      ret &= Category<volatile Type>::value == value;\n+      ret &= Category<const volatile Type>::value == value;\n+      ret &= Category<Type>::type::value == value;\n+      ret &= Category<const Type>::type::value == value;\n+      ret &= Category<volatile Type>::type::value == value;\n+      ret &= Category<const volatile Type>::type::value == value;\n       return ret;\n     }\n \n   template<template<typename> class Property,\n-\t   typename Type, bool Tv>\n+\t   typename Type>\n     bool\n-    test_property()\n+    test_property(typename Property<Type>::value_type value)\n     {\n       bool ret = true;\n-      ret &= Property<Type>::value == Tv;\n-      ret &= Property<Type>::type::value == Tv;\n+      ret &= Property<Type>::value == value;\n+      ret &= Property<Type>::type::value == value;\n       return ret;\n     }\n \n   template<template<typename, typename> class Relationship,\n-\t   typename Type1, typename Type2, bool Tv>\n+\t   typename Type1, typename Type2>\n     bool\n-    test_relationship()\n+    test_relationship(bool value)\n     {\n       bool ret = true;\n-      ret &= Relationship<Type1, Type2>::value == Tv;\n-      ret &= Relationship<Type1, Type2>::type::value == Tv;\n+      ret &= Relationship<Type1, Type2>::value == value;\n+      ret &= Relationship<Type1, Type2>::type::value == value;\n       return ret;\n     }\n "}, {"sha": "2bd8c52d9bedde95cb511cf525118be537ee2d80", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_arithmetic/is_arithmetic.cc", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_arithmetic%2Fis_arithmetic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_arithmetic%2Fis_arithmetic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_arithmetic%2Fis_arithmetic.cc?ref=db5ff2363d705551e44c260d1b589d080c0cc2ef", "patch": "@@ -30,28 +30,28 @@ void test01()\n   using std::tr1::is_arithmetic;\n   using namespace __gnu_test;\n   \n-  VERIFY( (test_category<is_arithmetic, void, false>()) );\n+  VERIFY( (test_category<is_arithmetic, void>(false)) );\n \n-  VERIFY( (test_category<is_arithmetic, char, true>()) );\n-  VERIFY( (test_category<is_arithmetic, signed char, true>()) );\n-  VERIFY( (test_category<is_arithmetic, unsigned char, true>()) );\n+  VERIFY( (test_category<is_arithmetic, char>(true)) );\n+  VERIFY( (test_category<is_arithmetic, signed char>(true)) );\n+  VERIFY( (test_category<is_arithmetic, unsigned char>(true)) );\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  VERIFY( (test_category<is_arithmetic, wchar_t, true>()) );\n+  VERIFY( (test_category<is_arithmetic, wchar_t>(true)) );\n #endif\n-  VERIFY( (test_category<is_arithmetic, short, true>()) );\n-  VERIFY( (test_category<is_arithmetic, unsigned short, true>()) );\n-  VERIFY( (test_category<is_arithmetic, int, true>()) );\n-  VERIFY( (test_category<is_arithmetic, unsigned int, true>()) );\n-  VERIFY( (test_category<is_arithmetic, long, true>()) );\n-  VERIFY( (test_category<is_arithmetic, unsigned long, true>()) );\n-  VERIFY( (test_category<is_arithmetic, long long, true>()) );\n-  VERIFY( (test_category<is_arithmetic, unsigned long long, true>()) );\n-  VERIFY( (test_category<is_arithmetic, float, true>()) );\n-  VERIFY( (test_category<is_arithmetic, double, true>()) );\n-  VERIFY( (test_category<is_arithmetic, long double, true>()) );\n+  VERIFY( (test_category<is_arithmetic, short>(true)) );\n+  VERIFY( (test_category<is_arithmetic, unsigned short>(true)) );\n+  VERIFY( (test_category<is_arithmetic, int>(true)) );\n+  VERIFY( (test_category<is_arithmetic, unsigned int>(true)) );\n+  VERIFY( (test_category<is_arithmetic, long>(true)) );\n+  VERIFY( (test_category<is_arithmetic, unsigned long>(true)) );\n+  VERIFY( (test_category<is_arithmetic, long long>(true)) );\n+  VERIFY( (test_category<is_arithmetic, unsigned long long>(true)) );\n+  VERIFY( (test_category<is_arithmetic, float>(true)) );\n+  VERIFY( (test_category<is_arithmetic, double>(true)) );\n+  VERIFY( (test_category<is_arithmetic, long double>(true)) );\n \n   // Sanity check.\n-  VERIFY( (test_category<is_arithmetic, ClassType, false>()) );\n+  VERIFY( (test_category<is_arithmetic, ClassType>(false)) );\n }\n \n int main()"}, {"sha": "4e190a6d8b0816d0121155a0848eb04935e6a1bb", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_compound/is_compound.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_compound%2Fis_compound.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_compound%2Fis_compound.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_compound%2Fis_compound.cc?ref=db5ff2363d705551e44c260d1b589d080c0cc2ef", "patch": "@@ -0,0 +1,60 @@\n+// 2004-12-11  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.2 Composite type traits\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::is_compound;\n+  using namespace __gnu_test;\n+  \n+  VERIFY( (test_category<is_compound, void>(false)) );\n+  VERIFY( (test_category<is_compound, char>(false)) );\n+  VERIFY( (test_category<is_compound, signed char>(false)) );\n+  VERIFY( (test_category<is_compound, unsigned char>(false)) );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  VERIFY( (test_category<is_compound, wchar_t>(false)) );\n+#endif\n+  VERIFY( (test_category<is_compound, short>(false)) );\n+  VERIFY( (test_category<is_compound, unsigned short>(false)) );\n+  VERIFY( (test_category<is_compound, int>(false)) );\n+  VERIFY( (test_category<is_compound, unsigned int>(false)) );\n+  VERIFY( (test_category<is_compound, long>(false)) );\n+  VERIFY( (test_category<is_compound, unsigned long>(false)) );\n+  VERIFY( (test_category<is_compound, long long>(false)) );\n+  VERIFY( (test_category<is_compound, unsigned long long>(false)) );\n+  VERIFY( (test_category<is_compound, float>(false)) );\n+  VERIFY( (test_category<is_compound, double>(false)) );\n+  VERIFY( (test_category<is_compound, long double>(false)) );\n+\n+  // Sanity check.\n+  VERIFY( (test_category<is_compound, ClassType>(true)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "ced2203b0fb65582a30808429da1f38a59fe88c8", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_compound/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_compound%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_compound%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_compound%2Ftypedefs.cc?ref=db5ff2363d705551e44c260d1b589d080c0cc2ef", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-11  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::is_compound<int>          test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "9bb66a1989bb11a567c4fe24a38cc8a02924933a", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/composite_type_traits/is_fundamental/is_fundamental.cc", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_fundamental%2Fis_fundamental.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_fundamental%2Fis_fundamental.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fcomposite_type_traits%2Fis_fundamental%2Fis_fundamental.cc?ref=db5ff2363d705551e44c260d1b589d080c0cc2ef", "patch": "@@ -30,27 +30,27 @@ void test01()\n   using std::tr1::is_fundamental;\n   using namespace __gnu_test;\n   \n-  VERIFY( (test_category<is_fundamental, void, true>()) );\n-  VERIFY( (test_category<is_fundamental, char, true>()) );\n-  VERIFY( (test_category<is_fundamental, signed char, true>()) );\n-  VERIFY( (test_category<is_fundamental, unsigned char, true>()) );\n+  VERIFY( (test_category<is_fundamental, void>(true)) );\n+  VERIFY( (test_category<is_fundamental, char>(true)) );\n+  VERIFY( (test_category<is_fundamental, signed char>(true)) );\n+  VERIFY( (test_category<is_fundamental, unsigned char>(true)) );\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  VERIFY( (test_category<is_fundamental, wchar_t, true>()) );\n+  VERIFY( (test_category<is_fundamental, wchar_t>(true)) );\n #endif\n-  VERIFY( (test_category<is_fundamental, short, true>()) );\n-  VERIFY( (test_category<is_fundamental, unsigned short, true>()) );\n-  VERIFY( (test_category<is_fundamental, int, true>()) );\n-  VERIFY( (test_category<is_fundamental, unsigned int, true>()) );\n-  VERIFY( (test_category<is_fundamental, long, true>()) );\n-  VERIFY( (test_category<is_fundamental, unsigned long, true>()) );\n-  VERIFY( (test_category<is_fundamental, long long, true>()) );\n-  VERIFY( (test_category<is_fundamental, unsigned long long, true>()) );\n-  VERIFY( (test_category<is_fundamental, float, true>()) );\n-  VERIFY( (test_category<is_fundamental, double, true>()) );\n-  VERIFY( (test_category<is_fundamental, long double, true>()) );\n+  VERIFY( (test_category<is_fundamental, short>(true)) );\n+  VERIFY( (test_category<is_fundamental, unsigned short>(true)) );\n+  VERIFY( (test_category<is_fundamental, int>(true)) );\n+  VERIFY( (test_category<is_fundamental, unsigned int>(true)) );\n+  VERIFY( (test_category<is_fundamental, long>(true)) );\n+  VERIFY( (test_category<is_fundamental, unsigned long>(true)) );\n+  VERIFY( (test_category<is_fundamental, long long>(true)) );\n+  VERIFY( (test_category<is_fundamental, unsigned long long>(true)) );\n+  VERIFY( (test_category<is_fundamental, float>(true)) );\n+  VERIFY( (test_category<is_fundamental, double>(true)) );\n+  VERIFY( (test_category<is_fundamental, long double>(true)) );\n \n   // Sanity check.\n-  VERIFY( (test_category<is_fundamental, ClassType, false>()) );\n+  VERIFY( (test_category<is_fundamental, ClassType>(false)) );\n }\n \n int main()"}, {"sha": "0505212c78075f16952127910ead4d6ffbadcf4a", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_array/is_array.cc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_array%2Fis_array.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_array%2Fis_array.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_array%2Fis_array.cc?ref=db5ff2363d705551e44c260d1b589d080c0cc2ef", "patch": "@@ -30,21 +30,21 @@ void test01()\n   using std::tr1::is_array;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_category<is_array, int[2], true>()) );\n-  VERIFY( (test_category<is_array, int[], true>()) );\n-  VERIFY( (test_category<is_array, int[2][3], true>()) );\n-  VERIFY( (test_category<is_array, int[][3], true>()) );\n-  VERIFY( (test_category<is_array, float*[2], true>()) );\n-  VERIFY( (test_category<is_array, float*[], true>()) );\n-  VERIFY( (test_category<is_array, float*[2][3], true>()) );\n-  VERIFY( (test_category<is_array, float*[][3], true>()) );\n-  VERIFY( (test_category<is_array, ClassType[2], true>()) );\n-  VERIFY( (test_category<is_array, ClassType[], true>()) );\n-  VERIFY( (test_category<is_array, ClassType[2][3], true>()) );\n-  VERIFY( (test_category<is_array, ClassType[][3], true>()) );\n+  VERIFY( (test_category<is_array, int[2]>(true)) );\n+  VERIFY( (test_category<is_array, int[]>(true)) );\n+  VERIFY( (test_category<is_array, int[2][3]>(true)) );\n+  VERIFY( (test_category<is_array, int[][3]>(true)) );\n+  VERIFY( (test_category<is_array, float*[2]>(true)) );\n+  VERIFY( (test_category<is_array, float*[]>(true)) );\n+  VERIFY( (test_category<is_array, float*[2][3]>(true)) );\n+  VERIFY( (test_category<is_array, float*[][3]>(true)) );\n+  VERIFY( (test_category<is_array, ClassType[2]>(true)) );\n+  VERIFY( (test_category<is_array, ClassType[]>(true)) );\n+  VERIFY( (test_category<is_array, ClassType[2][3]>(true)) );\n+  VERIFY( (test_category<is_array, ClassType[][3]>(true)) );\n \n   // Sanity check.\n-  VERIFY( (test_category<is_array, ClassType, false>()) );\n+  VERIFY( (test_category<is_array, ClassType>(false)) );\n }\n \n int main()"}, {"sha": "c0496ebad3ea95ebc911a0fca2b5d4b9e1011f02", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_floating_point/is_floating_point.cc", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_floating_point%2Fis_floating_point.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_floating_point%2Fis_floating_point.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_floating_point%2Fis_floating_point.cc?ref=db5ff2363d705551e44c260d1b589d080c0cc2ef", "patch": "@@ -30,28 +30,28 @@ void test01()\n   using std::tr1::is_floating_point;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_category<is_floating_point, void, false>()) );\n-  VERIFY( (test_category<is_floating_point, char, false>()) );\n-  VERIFY( (test_category<is_floating_point, signed char, false>()) );\n-  VERIFY( (test_category<is_floating_point, unsigned char, false>()) );\n+  VERIFY( (test_category<is_floating_point, void>(false)) );\n+  VERIFY( (test_category<is_floating_point, char>(false)) );\n+  VERIFY( (test_category<is_floating_point, signed char>(false)) );\n+  VERIFY( (test_category<is_floating_point, unsigned char>(false)) );\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  VERIFY( (test_category<is_floating_point, wchar_t, false>()) );\n+  VERIFY( (test_category<is_floating_point, wchar_t>(false)) );\n #endif\n-  VERIFY( (test_category<is_floating_point, short, false>()) );\n-  VERIFY( (test_category<is_floating_point, unsigned short, false>()) );\n-  VERIFY( (test_category<is_floating_point, int, false>()) );\n-  VERIFY( (test_category<is_floating_point, unsigned int, false>()) );\n-  VERIFY( (test_category<is_floating_point, long, false>()) );\n-  VERIFY( (test_category<is_floating_point, unsigned long, false>()) );\n-  VERIFY( (test_category<is_floating_point, long long, false>()) );\n-  VERIFY( (test_category<is_floating_point, unsigned long long, false>()) );\n+  VERIFY( (test_category<is_floating_point, short>(false)) );\n+  VERIFY( (test_category<is_floating_point, unsigned short>(false)) );\n+  VERIFY( (test_category<is_floating_point, int>(false)) );\n+  VERIFY( (test_category<is_floating_point, unsigned int>(false)) );\n+  VERIFY( (test_category<is_floating_point, long>(false)) );\n+  VERIFY( (test_category<is_floating_point, unsigned long>(false)) );\n+  VERIFY( (test_category<is_floating_point, long long>(false)) );\n+  VERIFY( (test_category<is_floating_point, unsigned long long>(false)) );\n \n-  VERIFY( (test_category<is_floating_point, float, true>()) );\n-  VERIFY( (test_category<is_floating_point, double, true>()) );\n-  VERIFY( (test_category<is_floating_point, long double, true>()) );\n+  VERIFY( (test_category<is_floating_point, float>(true)) );\n+  VERIFY( (test_category<is_floating_point, double>(true)) );\n+  VERIFY( (test_category<is_floating_point, long double>(true)) );\n \n   // Sanity check.\n-  VERIFY( (test_category<is_floating_point, ClassType, false>()) );\n+  VERIFY( (test_category<is_floating_point, ClassType>(false)) );\n }\n \n int main()"}, {"sha": "95221dc406ba46f25cacaccba848136e79d89934", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_integral/is_integral.cc", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_integral%2Fis_integral.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_integral%2Fis_integral.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_integral%2Fis_integral.cc?ref=db5ff2363d705551e44c260d1b589d080c0cc2ef", "patch": "@@ -30,29 +30,29 @@ void test01()\n   using std::tr1::is_integral;\n   using namespace __gnu_test;\n   \n-  VERIFY( (test_category<is_integral, void, false>()) );\n+  VERIFY( (test_category<is_integral, void>(false)) );\n   \n-  VERIFY( (test_category<is_integral, char, true>()) );\n-  VERIFY( (test_category<is_integral, signed char, true>()) );\n-  VERIFY( (test_category<is_integral, unsigned char, true>()) );\n+  VERIFY( (test_category<is_integral, char>(true)) );\n+  VERIFY( (test_category<is_integral, signed char>(true)) );\n+  VERIFY( (test_category<is_integral, unsigned char>(true)) );\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  VERIFY( (test_category<is_integral, wchar_t, true>()) );\n+  VERIFY( (test_category<is_integral, wchar_t>(true)) );\n #endif\n-  VERIFY( (test_category<is_integral, short, true>()) );\n-  VERIFY( (test_category<is_integral, unsigned short, true>()) );\n-  VERIFY( (test_category<is_integral, int, true>()) );\n-  VERIFY( (test_category<is_integral, unsigned int, true>()) );\n-  VERIFY( (test_category<is_integral, long, true>()) );\n-  VERIFY( (test_category<is_integral, unsigned long, true>()) );\n-  VERIFY( (test_category<is_integral, long long, true>()) );\n-  VERIFY( (test_category<is_integral, unsigned long long, true>()) );\n+  VERIFY( (test_category<is_integral, short>(true)) );\n+  VERIFY( (test_category<is_integral, unsigned short>(true)) );\n+  VERIFY( (test_category<is_integral, int>(true)) );\n+  VERIFY( (test_category<is_integral, unsigned int>(true)) );\n+  VERIFY( (test_category<is_integral, long>(true)) );\n+  VERIFY( (test_category<is_integral, unsigned long>(true)) );\n+  VERIFY( (test_category<is_integral, long long>(true)) );\n+  VERIFY( (test_category<is_integral, unsigned long long>(true)) );\n \n-  VERIFY( (test_category<is_integral, float, false>()) );\n-  VERIFY( (test_category<is_integral, double, false>()) );\n-  VERIFY( (test_category<is_integral, long double, false>()) );\n+  VERIFY( (test_category<is_integral, float>(false)) );\n+  VERIFY( (test_category<is_integral, double>(false)) );\n+  VERIFY( (test_category<is_integral, long double>(false)) );\n \n   // Sanity check.\n-  VERIFY( (test_category<is_integral, ClassType, false>()) );\n+  VERIFY( (test_category<is_integral, ClassType>(false)) );\n }\n \n int main()"}, {"sha": "7409368c9b6a8e8f60aea6c79abbd17acb01e631", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_reference/is_reference.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_reference%2Fis_reference.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_reference%2Fis_reference.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_reference%2Fis_reference.cc?ref=db5ff2363d705551e44c260d1b589d080c0cc2ef", "patch": "@@ -34,12 +34,12 @@ void test01()\n   typedef ClassType&     ClassType_ref;\n   typedef int (&fun_ref) (int);\n \n-  VERIFY( (test_category<is_reference, int_ref, true>()) );\n-  VERIFY( (test_category<is_reference, ClassType_ref, true>()) );\n-  VERIFY( (test_category<is_reference, fun_ref, true>()) );\n+  VERIFY( (test_category<is_reference, int_ref>(true)) );\n+  VERIFY( (test_category<is_reference, ClassType_ref>(true)) );\n+  VERIFY( (test_category<is_reference, fun_ref>(true)) );\n \n   // Sanity check.\n-  VERIFY( (test_category<is_reference, ClassType, false>()) );\n+  VERIFY( (test_category<is_reference, ClassType>(false)) );\n }\n \n int main()"}, {"sha": "45e4821756d883192aebcf86f444f6cb59141595", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/primary_type_categories/is_void/is_void.cc", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_void%2Fis_void.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_void%2Fis_void.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Fprimary_type_categories%2Fis_void%2Fis_void.cc?ref=db5ff2363d705551e44c260d1b589d080c0cc2ef", "patch": "@@ -30,28 +30,28 @@ void test01()\n   using std::tr1::is_void;\n   using namespace __gnu_test;\n \n-  VERIFY( (test_category<is_void, void, true>()) );\n+  VERIFY( (test_category<is_void, void>(true)) );\n   \n-  VERIFY( (test_category<is_void, char, false>()) );\n-  VERIFY( (test_category<is_void, signed char, false>()) );\n-  VERIFY( (test_category<is_void, unsigned char, false>()) );\n+  VERIFY( (test_category<is_void, char>(false)) );\n+  VERIFY( (test_category<is_void, signed char>(false)) );\n+  VERIFY( (test_category<is_void, unsigned char>(false)) );\n #ifdef _GLIBCXX_USE_WCHAR_T\n-  VERIFY( (test_category<is_void, wchar_t, false>()) );\n+  VERIFY( (test_category<is_void, wchar_t>(false)) );\n #endif\n-  VERIFY( (test_category<is_void, short, false>()) );\n-  VERIFY( (test_category<is_void, unsigned short, false>()) );\n-  VERIFY( (test_category<is_void, int, false>()) );\n-  VERIFY( (test_category<is_void, unsigned int, false>()) );\n-  VERIFY( (test_category<is_void, long, false>()) );\n-  VERIFY( (test_category<is_void, unsigned long, false>()) );\n-  VERIFY( (test_category<is_void, long long, false>()) );\n-  VERIFY( (test_category<is_void, unsigned long long, false>()) );\n-  VERIFY( (test_category<is_void, float, false>()) );\n-  VERIFY( (test_category<is_void, double, false>()) );\n-  VERIFY( (test_category<is_void, long double, false>()) );\n+  VERIFY( (test_category<is_void, short>(false)) );\n+  VERIFY( (test_category<is_void, unsigned short>(false)) );\n+  VERIFY( (test_category<is_void, int>(false)) );\n+  VERIFY( (test_category<is_void, unsigned int>(false)) );\n+  VERIFY( (test_category<is_void, long>(false)) );\n+  VERIFY( (test_category<is_void, unsigned long>(false)) );\n+  VERIFY( (test_category<is_void, long long>(false)) );\n+  VERIFY( (test_category<is_void, unsigned long long>(false)) );\n+  VERIFY( (test_category<is_void, float>(false)) );\n+  VERIFY( (test_category<is_void, double>(false)) );\n+  VERIFY( (test_category<is_void, long double>(false)) );\n \n   // Sanity check.\n-  VERIFY( (test_category<is_void, ClassType, false>()) );\n+  VERIFY( (test_category<is_void, ClassType>(false)) );\n }\n \n int main()"}, {"sha": "29bd8a56b9678e0b9462124f4d89f79b8c08bf32", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/relationships_between_types/is_same/is_same.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_same%2Fis_same.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_same%2Fis_same.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Frelationships_between_types%2Fis_same%2Fis_same.cc?ref=db5ff2363d705551e44c260d1b589d080c0cc2ef", "patch": "@@ -31,16 +31,16 @@ void test01()\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_relationship<is_same, int, int, true>()) );\n-  VERIFY( (test_relationship<is_same, const int, const int, true>()) );\n-  VERIFY( (test_relationship<is_same, int&, int&, true>()) );\n-  VERIFY( (test_relationship<is_same, ClassType, ClassType, true>()) );\n+  VERIFY( (test_relationship<is_same, int, int>(true)) );\n+  VERIFY( (test_relationship<is_same, const int, const int>(true)) );\n+  VERIFY( (test_relationship<is_same, int&, int&>(true)) );\n+  VERIFY( (test_relationship<is_same, ClassType, ClassType>(true)) );\n \n   // Negative tests.\n-  VERIFY( (test_relationship<is_same, void, int, false>()) );\n-  VERIFY( (test_relationship<is_same, int, const int, false>()) );\n-  VERIFY( (test_relationship<is_same, int, int&, false>()) );\n-  VERIFY( (test_relationship<is_same, int, ClassType, false>()) );\n+  VERIFY( (test_relationship<is_same, void, int>(false)) );\n+  VERIFY( (test_relationship<is_same, int, const int>(false)) );\n+  VERIFY( (test_relationship<is_same, int, int&>(false)) );\n+  VERIFY( (test_relationship<is_same, int, ClassType>(false)) );\n }\n \n int main()"}, {"sha": "09c0a3c4820d24ee140ab22e882d95bdb71d8509", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/is_const/is_const.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_const%2Fis_const.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_const%2Fis_const.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_const%2Fis_const.cc?ref=db5ff2363d705551e44c260d1b589d080c0cc2ef", "patch": "@@ -31,16 +31,16 @@ void test01()\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_property<is_const, const int, true>()) );\n-  VERIFY( (test_property<is_const, const volatile int, true>()) );\n-  VERIFY( (test_property<is_const, cClassType, true>()) );\n-  VERIFY( (test_property<is_const, cvClassType, true>()) );\n+  VERIFY( (test_property<is_const, const int>(true)) );\n+  VERIFY( (test_property<is_const, const volatile int>(true)) );\n+  VERIFY( (test_property<is_const, cClassType>(true)) );\n+  VERIFY( (test_property<is_const, cvClassType>(true)) );\n \n   // Negative tests.\n-  VERIFY( (test_property<is_const, int, false>()) );\n-  VERIFY( (test_property<is_const, volatile int, false>()) );\n-  VERIFY( (test_property<is_const, ClassType, false>()) );\n-  VERIFY( (test_property<is_const, vClassType, false>()) );\n+  VERIFY( (test_property<is_const, int>(false)) );\n+  VERIFY( (test_property<is_const, volatile int>(false)) );\n+  VERIFY( (test_property<is_const, ClassType>(false)) );\n+  VERIFY( (test_property<is_const, vClassType>(false)) );\n }\n \n int main()"}, {"sha": "9747d955644e5e950fabd39db71b41ba87b3aa3d", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/is_volatile/is_volatile.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_volatile%2Fis_volatile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_volatile%2Fis_volatile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Fis_volatile%2Fis_volatile.cc?ref=db5ff2363d705551e44c260d1b589d080c0cc2ef", "patch": "@@ -31,16 +31,16 @@ void test01()\n   using namespace __gnu_test;\n \n   // Positive tests.\n-  VERIFY( (test_property<is_volatile, volatile int, true>()) );\n-  VERIFY( (test_property<is_volatile, const volatile int, true>()) );\n-  VERIFY( (test_property<is_volatile, vClassType, true>()) );\n-  VERIFY( (test_property<is_volatile, cvClassType, true>()) );\n+  VERIFY( (test_property<is_volatile, volatile int>(true)) );\n+  VERIFY( (test_property<is_volatile, const volatile int>(true)) );\n+  VERIFY( (test_property<is_volatile, vClassType>(true)) );\n+  VERIFY( (test_property<is_volatile, cvClassType>(true)) );\n \n   // Negative tests.\n-  VERIFY( (test_property<is_volatile, int, false>()) );\n-  VERIFY( (test_property<is_volatile, const int, false>()) );\n-  VERIFY( (test_property<is_volatile, ClassType, false>()) );\n-  VERIFY( (test_property<is_volatile, cClassType, false>()) );\n+  VERIFY( (test_property<is_volatile, int>(false)) );\n+  VERIFY( (test_property<is_volatile, const int>(false)) );\n+  VERIFY( (test_property<is_volatile, ClassType>(false)) );\n+  VERIFY( (test_property<is_volatile, cClassType>(false)) );\n }\n \n int main()"}, {"sha": "d725d4f91c603800dd171f80ac4135bfe870dd56", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/rank/rank.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Frank%2Frank.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Frank%2Frank.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Frank%2Frank.cc?ref=db5ff2363d705551e44c260d1b589d080c0cc2ef", "patch": "@@ -0,0 +1,47 @@\n+// 2004-12-11  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 4.5.3 Type properties\n+\n+#include <tr1/type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::tr1::rank;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_property<rank, int>(0)) );\n+  VERIFY( (test_property<rank, int[2]>(1)) );\n+  VERIFY( (test_property<rank, int[][4]>(2)) );\n+  VERIFY( (test_property<rank, int[2][2][4][4][6][6]>(6)) );\n+  VERIFY( (test_property<rank, ClassType>(0)) );\n+  VERIFY( (test_property<rank, ClassType[2]>(1)) );\n+  VERIFY( (test_property<rank, ClassType[][4]>(2)) );\n+  VERIFY( (test_property<rank, ClassType[2][2][4][4][6][6]>(6)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "7cbd600e598b3af9786376bcfc5b852569c96efe", "filename": "libstdc++-v3/testsuite/tr1/4_metaprogramming/type_properties/rank/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Frank%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db5ff2363d705551e44c260d1b589d080c0cc2ef/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Frank%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F4_metaprogramming%2Ftype_properties%2Frank%2Ftypedefs.cc?ref=db5ff2363d705551e44c260d1b589d080c0cc2ef", "patch": "@@ -0,0 +1,36 @@\n+// 2004-12-11  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// \n+// NB: This file is for testing tr1/type_traits with NO OTHER INCLUDES.\n+\n+#include <tr1/type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::tr1::rank<int>                 test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}]}