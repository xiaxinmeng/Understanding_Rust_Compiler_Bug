{"sha": "d2626c0b6900551733f8d200b9086e710e8f638b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI2MjZjMGI2OTAwNTUxNzMzZjhkMjAwYjkwODZlNzEwZThmNjM4Yg==", "commit": {"author": {"name": "Yuri Rumyantsev", "email": "ysrumyan@gmail.com", "date": "2015-01-15T11:39:20Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2015-01-15T11:39:20Z"}, "message": "re PR tree-optimization/64434 (Performance regression after operand canonicalization (r216728).)\n\ngcc/\n\n\tPR tree-optimization/64434\n\t* cfgexpand.c (reorder_operands): New function.\n\t(expand_gimple_basic_block): Insert call of reorder_operands if\n\toptimized is true.\n\ngcc/testsuite/\n\n\tPR tree-optimization/64434\n\t* gcc.dg/torture/pr64434.c: New test.\n\nFrom-SVN: r219646", "tree": {"sha": "2720c134dd4bf2a22cf20ad9323e34df6d73b351", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2720c134dd4bf2a22cf20ad9323e34df6d73b351"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2626c0b6900551733f8d200b9086e710e8f638b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2626c0b6900551733f8d200b9086e710e8f638b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2626c0b6900551733f8d200b9086e710e8f638b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2626c0b6900551733f8d200b9086e710e8f638b/comments", "author": {"login": "ysrumyan", "id": 44425612, "node_id": "MDQ6VXNlcjQ0NDI1NjEy", "avatar_url": "https://avatars.githubusercontent.com/u/44425612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysrumyan", "html_url": "https://github.com/ysrumyan", "followers_url": "https://api.github.com/users/ysrumyan/followers", "following_url": "https://api.github.com/users/ysrumyan/following{/other_user}", "gists_url": "https://api.github.com/users/ysrumyan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysrumyan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysrumyan/subscriptions", "organizations_url": "https://api.github.com/users/ysrumyan/orgs", "repos_url": "https://api.github.com/users/ysrumyan/repos", "events_url": "https://api.github.com/users/ysrumyan/events{/privacy}", "received_events_url": "https://api.github.com/users/ysrumyan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3387e6141e08d9cb010c88aea4017318fcbaf20a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3387e6141e08d9cb010c88aea4017318fcbaf20a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3387e6141e08d9cb010c88aea4017318fcbaf20a"}], "stats": {"total": 113, "additions": 113, "deletions": 0}, "files": [{"sha": "3fc2bceb1a5a545e06e45b1b1ad3e79239f4c0ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2626c0b6900551733f8d200b9086e710e8f638b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2626c0b6900551733f8d200b9086e710e8f638b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2626c0b6900551733f8d200b9086e710e8f638b", "patch": "@@ -1,3 +1,10 @@\n+2015-01-15  Yuri Rumyantsev  <ysrumyan@gmail.com>\n+\n+\tPR tree-optimization/64434\n+\t* cfgexpand.c (reorder_operands): New function.\n+\t(expand_gimple_basic_block): Insert call of reorder_operands if\n+\toptimized is true.\n+\n 2015-01-15  Matthew Fortune  <matthew.fortune@imgtec.com>\n \n \t* config/mips/micromips.md (*swp): Remove explicit parallel."}, {"sha": "c8eae425af86e6cada4a106295abc64bf57b852d", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2626c0b6900551733f8d200b9086e710e8f638b/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2626c0b6900551733f8d200b9086e710e8f638b/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=d2626c0b6900551733f8d200b9086e710e8f638b", "patch": "@@ -4983,6 +4983,84 @@ expand_debug_locations (void)\n   flag_strict_aliasing = save_strict_alias;\n }\n \n+/* Performs swapping operands of commutative operations to expand\n+   the expensive one first.  */\n+\n+static void\n+reorder_operands (basic_block bb)\n+{\n+  unsigned int *lattice;  /* Hold cost of each statement.  */\n+  unsigned int i = 0, n = 0;\n+  gimple_stmt_iterator gsi;\n+  gimple_seq stmts;\n+  gimple stmt;\n+  bool swap;\n+  tree op0, op1;\n+  ssa_op_iter iter;\n+  use_operand_p use_p;\n+  gimple def0, def1;\n+\n+  /* Compute cost of each statement using estimate_num_insns.  */\n+  stmts = bb_seq (bb);\n+  for (gsi = gsi_start (stmts); !gsi_end_p (gsi); gsi_next (&gsi))\n+    {\n+      stmt = gsi_stmt (gsi);\n+      gimple_set_uid (stmt, n++);\n+    }\n+  lattice = XNEWVEC (unsigned int, n);\n+  for (gsi = gsi_start (stmts); !gsi_end_p (gsi); gsi_next (&gsi))\n+    {\n+      unsigned cost;\n+      stmt = gsi_stmt (gsi);\n+      cost = estimate_num_insns (stmt, &eni_size_weights);\n+      lattice[i] = cost;\n+      FOR_EACH_SSA_USE_OPERAND (use_p, stmt, iter, SSA_OP_USE)\n+\t{\n+\t  tree use = USE_FROM_PTR (use_p);\n+\t  gimple def_stmt;\n+\t  if (TREE_CODE (use) != SSA_NAME)\n+\t    continue;\n+\t  def_stmt = get_gimple_for_ssa_name (use);\n+\t  if (!def_stmt)\n+\t    continue;\n+\t  lattice[i] += lattice[gimple_uid (def_stmt)];\n+\t}\n+      i++;\n+      if (!is_gimple_assign (stmt)\n+\t  || !commutative_tree_code (gimple_assign_rhs_code (stmt)))\n+\tcontinue;\n+      op0 = gimple_op (stmt, 1);\n+      op1 = gimple_op (stmt, 2);\n+      if (TREE_CODE (op0) != SSA_NAME\n+\t  || TREE_CODE (op1) != SSA_NAME)\n+\tcontinue;\n+      /* Swap operands if the second one is more expensive.  */\n+      def0 = get_gimple_for_ssa_name (op0);\n+      if (!def0)\n+\tcontinue;\n+      def1 = get_gimple_for_ssa_name (op1);\n+      if (!def1)\n+\tcontinue;\n+      swap = false;\n+      if (lattice[gimple_uid (def1)] > lattice[gimple_uid (def0)])\n+\tswap = true;\n+      if (swap)\n+\t{\n+\t  if (dump_file && (dump_flags & TDF_DETAILS))\n+\t    {\n+\t      fprintf (dump_file, \"Swap operands in stmt:\\n\");\n+\t      print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n+\t      fprintf (dump_file, \"Cost left opnd=%d, right opnd=%d\\n\",\n+\t\t       lattice[gimple_uid (def0)],\n+\t\t       lattice[gimple_uid (def1)]);\n+\t    }\n+\t  swap_ssa_operands (stmt, gimple_assign_rhs1_ptr (stmt),\n+\t\t\t     gimple_assign_rhs2_ptr (stmt));\n+\t}\n+    }\n+  XDELETE (lattice);\n+}\n+\n /* Expand basic block BB from GIMPLE trees to RTL.  */\n \n static basic_block\n@@ -5004,6 +5082,8 @@ expand_gimple_basic_block (basic_block bb, bool disable_tail_calls)\n      cannot use the gsi_*_bb() routines because they expect the basic\n      block to be in GIMPLE, instead of RTL.  Therefore, we need to\n      access the BB sequence directly.  */\n+  if (optimize)\n+    reorder_operands (bb);\n   stmts = bb_seq (bb);\n   bb->il.gimple.seq = NULL;\n   bb->il.gimple.phi_nodes = NULL;"}, {"sha": "c5b27a4962f574e68ccc91515a9b5e0ded11fd85", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2626c0b6900551733f8d200b9086e710e8f638b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2626c0b6900551733f8d200b9086e710e8f638b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d2626c0b6900551733f8d200b9086e710e8f638b", "patch": "@@ -1,3 +1,8 @@\n+2015-01-15  Yuri Rumyantsev  <ysrumyan@gmail.com>\n+\n+\tPR tree-optimization/64434\n+\t* gcc.dg/torture/pr64434.c: New test.\n+\n 2015-01-15  Matthew Fortune  <matthew.fortune@imgtec.com>\n \n \t* gcc.target/mips/mips.exp (mips-dg-options): -mips3d requires"}, {"sha": "60fc80615de383ee5c1cde785aba1786e17a4771", "filename": "gcc/testsuite/gcc.dg/torture/pr64434.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2626c0b6900551733f8d200b9086e710e8f638b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr64434.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2626c0b6900551733f8d200b9086e710e8f638b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr64434.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr64434.c?ref=d2626c0b6900551733f8d200b9086e710e8f638b", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-rtl-expand-details\" } */\n+\n+#define N 256\n+int a1[N], a2[N], a3[N], a4[N];\n+\n+void foo ()\n+{\n+  int i;\n+  for (i=0; i<N; i++) {\n+    int c;\n+    c = a3[i] + (a1[i] * a2[i]);\n+    a4[i] = c + 1;\n+    a1[i] = a2[i] - 1;\n+  }\n+}\n+\n+/* { dg-final { scan-rtl-dump-times \"Swap operands\" 1 \"expand\" } } */\n+/* { dg-final { cleanup-rtl-dump \"expand\" } } */\n+\n+"}]}