{"sha": "c8a47c4877889b42afc5e3804c0fc575770564f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzhhNDdjNDg3Nzg4OWI0MmFmYzVlMzgwNGMwZmM1NzU3NzA1NjRmMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-22T14:33:13Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-22T14:33:13Z"}, "message": "runtime: avoid write barriers when calling deferred function\n    \n    Calling a deferred function currently requires changing from a uintptr\n    to the function code to a Go function value. That is done by setting\n    the value of a func local variable using unsafe.Pointer. The local\n    variable will always be on the stack. Adjust the code that sets the\n    local variable to avoid generating a write barrier.\n    \n    A write barrier is never needed here. Also, for deferreturn, we must\n    avoid write barriers entirely when called from a cgo function; that\n    requires more than just this, but this is a start.\n    \n    The test for this is runtime tests that use the go tool; these are not\n    currently run, but they will be in the future.\n    \n    Reviewed-on: https://go-review.googlesource.com/46455\n\nFrom-SVN: r249559", "tree": {"sha": "cd867e8bbd31844fdb91beae7951b4a13cc9ceb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd867e8bbd31844fdb91beae7951b4a13cc9ceb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c8a47c4877889b42afc5e3804c0fc575770564f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8a47c4877889b42afc5e3804c0fc575770564f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8a47c4877889b42afc5e3804c0fc575770564f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8a47c4877889b42afc5e3804c0fc575770564f2/comments", "author": null, "committer": null, "parents": [{"sha": "b92e4dff0a767a4e39dac6a012e381816ee5937a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b92e4dff0a767a4e39dac6a012e381816ee5937a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b92e4dff0a767a4e39dac6a012e381816ee5937a"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "a8dba3608d0660187ed59821d46690e105551cef", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a47c4877889b42afc5e3804c0fc575770564f2/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a47c4877889b42afc5e3804c0fc575770564f2/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=c8a47c4877889b42afc5e3804c0fc575770564f2", "patch": "@@ -1,4 +1,4 @@\n-a459f1fdfe0bd365bf2def730e1529052c6487fd\n+73b14da15ec731837ce2a45db658142bfbf5fe22\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "de3c79fe6bf4107bb25a7ff6658527a794e0341f", "filename": "libgo/go/runtime/panic.go", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c8a47c4877889b42afc5e3804c0fc575770564f2/libgo%2Fgo%2Fruntime%2Fpanic.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c8a47c4877889b42afc5e3804c0fc575770564f2/libgo%2Fgo%2Fruntime%2Fpanic.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fpanic.go?ref=c8a47c4877889b42afc5e3804c0fc575770564f2", "patch": "@@ -194,7 +194,7 @@ func deferreturn(frame *bool) {\n \t\t\t// The gc compiler does this using assembler\n \t\t\t// code in jmpdefer.\n \t\t\tvar fn func(unsafe.Pointer)\n-\t\t\t*(**uintptr)(unsafe.Pointer(&fn)) = &pfn\n+\t\t\t*(*uintptr)(unsafe.Pointer(&fn)) = uintptr(unsafe.Pointer(&pfn))\n \t\t\tfn(d.arg)\n \t\t}\n \n@@ -259,7 +259,7 @@ func checkdefer(frame *bool) {\n \t\t\tgp._defer = d.link\n \n \t\t\tvar fn func(unsafe.Pointer)\n-\t\t\t*(**uintptr)(unsafe.Pointer(&fn)) = &pfn\n+\t\t\t*(*uintptr)(unsafe.Pointer(&fn)) = uintptr(unsafe.Pointer(&pfn))\n \t\t\tfn(d.arg)\n \n \t\t\tfreedefer(d)\n@@ -345,7 +345,7 @@ func Goexit() {\n \n \t\tif pfn != 0 {\n \t\t\tvar fn func(unsafe.Pointer)\n-\t\t\t*(**uintptr)(unsafe.Pointer(&fn)) = &pfn\n+\t\t\t*(*uintptr)(unsafe.Pointer(&fn)) = uintptr(unsafe.Pointer(&pfn))\n \t\t\tfn(d.arg)\n \t\t}\n \n@@ -446,7 +446,7 @@ func gopanic(e interface{}) {\n \n \t\tif pfn != 0 {\n \t\t\tvar fn func(unsafe.Pointer)\n-\t\t\t*(**uintptr)(unsafe.Pointer(&fn)) = &pfn\n+\t\t\t*(*uintptr)(unsafe.Pointer(&fn)) = uintptr(unsafe.Pointer(&pfn))\n \t\t\tfn(d.arg)\n \n \t\t\tif p.recovered {"}]}