{"sha": "e9e6a995380186401dd75b2dfb4331e2c85e9e25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTllNmE5OTUzODAxODY0MDFkZDc1YjJkZmI0MzMxZTJjODVlOWUyNQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-12-21T13:02:12Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-12-21T13:02:12Z"}, "message": "libstdc++/68276 consistently qualify std::forward\n\n\tPR libstdc++/68276\n\t* include/std/functional (__invoke_impl, _Mem_fn::operator()): Qualify\n\tstd::forward.\n\ttestsuite/20_util/function_objects/mem_fn/68276.cc: New.\n\nFrom-SVN: r231879", "tree": {"sha": "82b73412fbff377fca5f63f509f551e83fa3989c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82b73412fbff377fca5f63f509f551e83fa3989c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9e6a995380186401dd75b2dfb4331e2c85e9e25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e6a995380186401dd75b2dfb4331e2c85e9e25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9e6a995380186401dd75b2dfb4331e2c85e9e25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e6a995380186401dd75b2dfb4331e2c85e9e25/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c453c55157e3738dc0ffb3b44817bcdc93cdfd55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c453c55157e3738dc0ffb3b44817bcdc93cdfd55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c453c55157e3738dc0ffb3b44817bcdc93cdfd55"}], "stats": {"total": 75, "additions": 66, "deletions": 9}, "files": [{"sha": "8ea45384462644a18019b6408a41f6021828d013", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e6a995380186401dd75b2dfb4331e2c85e9e25/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e6a995380186401dd75b2dfb4331e2c85e9e25/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e9e6a995380186401dd75b2dfb4331e2c85e9e25", "patch": "@@ -1,3 +1,10 @@\n+2015-12-21  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/68276\n+\t* include/std/functional (__invoke_impl, _Mem_fn::operator()): Qualify\n+\tstd::forward.\n+\ttestsuite/20_util/function_objects/mem_fn/68276.cc: New.\n+\n 2015-12-21  Ville Voutilainen  <ville.voutilainen@gmail.com>\n \n \tPR libstdc++/66693"}, {"sha": "4d08e12de4377dc54adae53a360ba216e6680574", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e6a995380186401dd75b2dfb4331e2c85e9e25/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e6a995380186401dd75b2dfb4331e2c85e9e25/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=e9e6a995380186401dd75b2dfb4331e2c85e9e25", "patch": "@@ -221,15 +221,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline _Res\n     __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,\n \t\t  _Args&&... __args)\n-    noexcept(noexcept((__invfwd<_Tp>(__t).*__f)(forward<_Args>(__args)...)))\n-    { return (__invfwd<_Tp>(__t).*__f)(forward<_Args>(__args)...); }\n+    noexcept(noexcept(\n+\t  (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...)))\n+    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }\n \n   template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>\n     inline _Res\n     __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,\n \t\t  _Args&&... __args)\n-    noexcept(noexcept(((*forward<_Tp>(__t)).*__f)(forward<_Args>(__args)...)))\n-    { return ((*forward<_Tp>(__t)).*__f)(forward<_Args>(__args)...); }\n+    noexcept(noexcept(\n+\t  ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...)))\n+    {\n+      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);\n+    }\n \n   template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>\n     inline _Res\n@@ -241,8 +245,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline _Res\n     __invoke_impl(__invoke_memobj_deref, _MemFun&& __f, _Tp&& __t,\n \t\t  _Args&&... __args)\n-    noexcept(noexcept((*forward<_Tp>(__t)).*__f))\n-    { return (*forward<_Tp>(__t)).*__f; }\n+    noexcept(noexcept((*std::forward<_Tp>(__t)).*__f))\n+    { return (*std::forward<_Tp>(__t)).*__f; }\n \n   /// Invoke a callable object.\n   template<typename _Callable, typename... _Args>\n@@ -603,8 +607,9 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       template<typename... _Args>\n \tauto\n \toperator()(_Args&&... __args) const\n-\tnoexcept(noexcept(std::__invoke(_M_pmf, forward<_Args>(__args)...)))\n-\t-> decltype(std::__invoke(_M_pmf, forward<_Args>(__args)...))\n+\tnoexcept(noexcept(\n+\t      std::__invoke(_M_pmf, std::forward<_Args>(__args)...)))\n+\t-> decltype(std::__invoke(_M_pmf, std::forward<_Args>(__args)...))\n \t{ return std::__invoke(_M_pmf, std::forward<_Args>(__args)...); }\n     };\n \n@@ -627,7 +632,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       template<typename _Tp>\n \tauto\n \toperator()(_Tp&& __obj) const\n-\tnoexcept(noexcept(std::__invoke(_M_pm, forward<_Tp>(__obj))))\n+\tnoexcept(noexcept(std::__invoke(_M_pm, std::forward<_Tp>(__obj))))\n \t-> decltype(std::__invoke(_M_pm, std::forward<_Tp>(__obj)))\n \t{ return std::__invoke(_M_pm, std::forward<_Tp>(__obj)); }\n     };"}, {"sha": "9341bab6d58c2b99eeeb54f4c45ad185117a3869", "filename": "libstdc++-v3/testsuite/20_util/function_objects/mem_fn/68276.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e6a995380186401dd75b2dfb4331e2c85e9e25/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fmem_fn%2F68276.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e6a995380186401dd75b2dfb4331e2c85e9e25/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fmem_fn%2F68276.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Fmem_fn%2F68276.cc?ref=e9e6a995380186401dd75b2dfb4331e2c85e9e25", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+\n+#include <functional>\n+\n+namespace n\n+{\n+  template<typename T> struct identity { using type = T; };\n+\n+  template<typename T>\n+    T&&\n+    forward(typename identity<T>::type& t)\n+    { return static_cast<T&&>(t); }\n+\n+  struct X { };\n+}\n+\n+struct server\n+{\n+  void action(n::X) { }\n+\n+  void act() {\n+    auto f = std::mem_fn(&server::action);\n+    n::X x;\n+    f(this, x);\n+  }\n+};\n+"}]}