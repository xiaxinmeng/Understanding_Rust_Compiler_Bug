{"sha": "b22ec9216067a03b2093da35ea5a33f3960e4fe2", "node_id": "C_kwDOANBUbNoAKGIyMmVjOTIxNjA2N2EwM2IyMDkzZGEzNWVhNWEzM2YzOTYwZTRmZTI", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-05T14:05:22Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-05T14:05:22Z"}, "message": "Const fold ref,pointer,borrow+deref", "tree": {"sha": "1727dffe5b1d38504b16449a931967dfc4867848", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1727dffe5b1d38504b16449a931967dfc4867848"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b22ec9216067a03b2093da35ea5a33f3960e4fe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b22ec9216067a03b2093da35ea5a33f3960e4fe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b22ec9216067a03b2093da35ea5a33f3960e4fe2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b22ec9216067a03b2093da35ea5a33f3960e4fe2/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e992e371bbd896c8b605e1ebade5cad80b1b411", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e992e371bbd896c8b605e1ebade5cad80b1b411", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e992e371bbd896c8b605e1ebade5cad80b1b411"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "111bd382b98df60ab99472610c815b65ff808aee", "filename": "gcc/rust/typecheck/rust-hir-const-fold.h", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b22ec9216067a03b2093da35ea5a33f3960e4fe2/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b22ec9216067a03b2093da35ea5a33f3960e4fe2/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-const-fold.h?ref=b22ec9216067a03b2093da35ea5a33f3960e4fe2", "patch": "@@ -47,9 +47,33 @@ class ConstFoldType : public TyTy::TyVisitor\n     translated = backend->array_type (element_ty, type.get_capacity ());\n   }\n \n-  void visit (TyTy::ReferenceType &) override { gcc_unreachable (); }\n+  void visit (TyTy::ReferenceType &type) override\n+  {\n+    Btype *base_compiled_type = ConstFoldType::fold (type.get_base (), backend);\n+    if (type.is_mutable ())\n+      {\n+\ttranslated = backend->reference_type (base_compiled_type);\n+      }\n+    else\n+      {\n+\tauto base = backend->immutable_type (base_compiled_type);\n+\ttranslated = backend->reference_type (base);\n+      }\n+  }\n \n-  void visit (TyTy::PointerType &) override { gcc_unreachable (); }\n+  void visit (TyTy::PointerType &type) override\n+  {\n+    Btype *base_compiled_type = ConstFoldType::fold (type.get_base (), backend);\n+    if (type.is_mutable ())\n+      {\n+\ttranslated = backend->pointer_type (base_compiled_type);\n+      }\n+    else\n+      {\n+\tauto base = backend->immutable_type (base_compiled_type);\n+\ttranslated = backend->pointer_type (base);\n+      }\n+  }\n \n   void visit (TyTy::ParamType &) override { gcc_unreachable (); }\n \n@@ -436,6 +460,33 @@ class ConstFoldExpr : public ConstFoldBase\n \t\t\t\t\t\t\t  expr.get_locus ());\n   }\n \n+  void visit (HIR::BorrowExpr &expr) override\n+  {\n+    Bexpression *main_expr = ConstFoldExpr::fold (expr.get_expr ().get ());\n+\n+    folded\n+      = ctx->get_backend ()->address_expression (main_expr, expr.get_locus ());\n+  }\n+\n+  void visit (HIR::DereferenceExpr &expr) override\n+  {\n+    Bexpression *main_expr = ConstFoldExpr::fold (expr.get_expr ().get ());\n+\n+    TyTy::BaseType *tyty = nullptr;\n+    if (!tyctx->lookup_type (expr.get_mappings ().get_hirid (), &tyty))\n+      {\n+\trust_fatal_error (expr.get_locus (),\n+\t\t\t  \"did not resolve type for this TupleExpr\");\n+\treturn;\n+      }\n+\n+    Btype *expected_type = ConstFoldType::fold (tyty, ctx->get_backend ());\n+    bool known_valid = true;\n+    folded = ctx->get_backend ()->indirect_expression (expected_type, main_expr,\n+\t\t\t\t\t\t       known_valid,\n+\t\t\t\t\t\t       expr.get_locus ());\n+  }\n+\n private:\n   ConstFoldExpr ()\n     : ConstFoldBase (), folded (ctx->get_backend ()->error_expression ())"}]}