{"sha": "114dae43305796626be7257e51fd53c7e5085f44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE0ZGFlNDMzMDU3OTY2MjZiZTcyNTdlNTFmZDUzYzdlNTA4NWY0NA==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-12-16T22:52:48Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-16T22:52:48Z"}, "message": "In libobjc/: 2010-12-16 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2010-12-16  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* sendmsg.c: Include objc/runtime.h instead of objc/objc-api.h.\n\tInclude objc-private/module-abi-8.h and objc-private/selector.h\n\tinstead of objc/encoding.h.\n\t(objc_msg_lookup_super): Use super->super_class instead of\n\tsuper->class.\n\t(method_get_first_argument, method_get_next_argument): Declare\n\tlocally.\n\t(class_get_instance_method): Declare before using.\n\t(objc_msg_sendv): Use 'struct objc_method' instead of 'Method'.\n\t(__objc_init_dispatch_tables, __objc_send_initialize): Use\n\tsel_registerName() instead of sel_register_name().\n\t(__objc_forward): Use sel_getName() instead of sel_get_name().\n\t(objc_get_uninstalled_dtable): Use 'void' as argument.\n\t* objc-private/selector.h: New.\n\nFrom-SVN: r167961", "tree": {"sha": "60ff7f1bec0ff779802ad822ec1f9052eb39730b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60ff7f1bec0ff779802ad822ec1f9052eb39730b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/114dae43305796626be7257e51fd53c7e5085f44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/114dae43305796626be7257e51fd53c7e5085f44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/114dae43305796626be7257e51fd53c7e5085f44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/114dae43305796626be7257e51fd53c7e5085f44/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7470b8fc5ef3b74256ffe3ccc5d49bd003f375f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7470b8fc5ef3b74256ffe3ccc5d49bd003f375f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7470b8fc5ef3b74256ffe3ccc5d49bd003f375f9"}], "stats": {"total": 105, "additions": 92, "deletions": 13}, "files": [{"sha": "d081e4f1498bbc2d80d55e2b7b28260f817c3fee", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/114dae43305796626be7257e51fd53c7e5085f44/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/114dae43305796626be7257e51fd53c7e5085f44/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=114dae43305796626be7257e51fd53c7e5085f44", "patch": "@@ -1,3 +1,20 @@\n+2010-12-16  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* sendmsg.c: Include objc/runtime.h instead of objc/objc-api.h.\n+\tInclude objc-private/module-abi-8.h and objc-private/selector.h\n+\tinstead of objc/encoding.h.\n+\t(objc_msg_lookup_super): Use super->super_class instead of\n+\tsuper->class.\n+\t(method_get_first_argument, method_get_next_argument): Declare\n+\tlocally.\n+\t(class_get_instance_method): Declare before using.\n+\t(objc_msg_sendv): Use 'struct objc_method' instead of 'Method'.\n+\t(__objc_init_dispatch_tables, __objc_send_initialize): Use\n+\tsel_registerName() instead of sel_register_name().\n+\t(__objc_forward): Use sel_getName() instead of sel_get_name().\n+\t(objc_get_uninstalled_dtable): Use 'void' as argument.\n+\t* objc-private/selector.h: New.\n+\n 2010-12-15  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc/message.h (objc_super): When using the modern API, do not"}, {"sha": "a0986b52e655abde85a8463c1f273145b8339352", "filename": "libobjc/objc-private/selector.h", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/114dae43305796626be7257e51fd53c7e5085f44/libobjc%2Fobjc-private%2Fselector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/114dae43305796626be7257e51fd53c7e5085f44/libobjc%2Fobjc-private%2Fselector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc-private%2Fselector.h?ref=114dae43305796626be7257e51fd53c7e5085f44", "patch": "@@ -0,0 +1,52 @@\n+/* GNU Objective C Runtime selector implementation - Private functions\n+   Copyright (C) 2010 Free Software Foundation, Inc.\n+   Contributed by Nicola Pero <nicola.pero@meta-innovation.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under the\n+terms of the GNU General Public License as published by the Free Software\n+Foundation; either version 3, or (at your option) any later version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n+details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef __objc_private_selector_INCLUDE_GNU\n+#define __objc_private_selector_INCLUDE_GNU\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif /* __cplusplus */\n+\n+/* Private runtime functions that may go away or be rewritten or\n+   replaced.  */\n+\n+/* Return whether a selector is mapped or not (\"mapped\" meaning that\n+   it has been inserted into the selector table).  This is private as\n+   only the runtime should ever encounter or need to know about\n+   unmapped selectors.  */\n+BOOL sel_is_mapped (SEL aSel);\n+\n+/* Return selector representing name without registering it if it\n+   doesn't exist.  Typically used internally by the runtime when it's\n+   looking up methods that may or may not exist (such as +initialize)\n+   in the most efficient way.  */\n+SEL\n+sel_get_any_uid (const char *name);\n+\n+#ifdef __cplusplus\n+}\n+#endif /* __cplusplus */\n+\n+#endif /* not __objc_private_selector_INCLUDE_GNU */"}, {"sha": "8797c82c98153cb39740b04f6809f62aa8ed3b0a", "filename": "libobjc/sendmsg.c", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/114dae43305796626be7257e51fd53c7e5085f44/libobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/114dae43305796626be7257e51fd53c7e5085f44/libobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsendmsg.c?ref=114dae43305796626be7257e51fd53c7e5085f44", "patch": "@@ -33,11 +33,12 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include \"tconfig.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n-#include \"objc/objc-api.h\"\n+#include \"objc/runtime.h\"\n #include \"objc/thr.h\"\n+#include \"objc-private/module-abi-8.h\"\n #include \"objc-private/runtime.h\"\n #include \"objc-private/sarray.h\"\n-#include \"objc/encoding.h\"\n+#include \"objc-private/selector.h\" /* For sel_is_mapped() */\n #include \"runtime-info.h\"\n #include <assert.h> /* For assert */\n #include <string.h> /* For strlen */\n@@ -50,7 +51,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define gen_rtx(args...) 1\n #define gen_rtx_MEM(args...) 1\n #define gen_rtx_REG(args...) 1\n-/* Alread defined in gcc/coretypes.h. So prevent double definition warning.  */\n+/* Already defined in gcc/coretypes.h. So prevent double definition warning.  */\n #undef rtx\n #define rtx int\n \n@@ -448,17 +449,26 @@ IMP\n objc_msg_lookup_super (struct objc_super *super, SEL sel)\n {\n   if (super->self)\n-    return get_imp (super->class, sel);\n+    return get_imp (super->super_class, sel);\n   else\n     return (IMP)nil_method;\n }\n \n-int method_get_sizeof_arguments (Method *);\n+/* Temporarily defined here until objc_msg_sendv() goes away.  */\n+char *method_get_first_argument (struct objc_method *,\n+\t\t\t\t arglist_t argframe, \n+\t\t\t\t const char **type);\n+char *method_get_next_argument (arglist_t argframe, \n+\t\t\t\tconst char **type);\n+int method_get_sizeof_arguments (struct objc_method *);\n+\n+struct objc_method *\n+class_get_instance_method (Class class, SEL op);\n \n retval_t\n objc_msg_sendv (id object, SEL op, arglist_t arg_frame)\n {\n-  Method *m = class_get_instance_method (object->class_pointer, op);\n+  struct objc_method *m = class_get_instance_method (object->class_pointer, op);\n   const char *type;\n   *((id *) method_get_first_argument (m, arg_frame, &type)) = object;\n   *((SEL *) method_get_next_argument (arg_frame, &type)) = op;\n@@ -473,8 +483,8 @@ __objc_init_dispatch_tables ()\n   __objc_uninstalled_dtable = sarray_new (200, 0);\n \n   /* TODO: It would be cool to register typed selectors here.  */\n-  selector_resolveClassMethod = sel_register_name (\"resolveClassMethod:\");\n-  selector_resolveInstanceMethod  =sel_register_name (\"resolveInstanceMethod:\");\n+  selector_resolveClassMethod = sel_registerName (\"resolveClassMethod:\");\n+  selector_resolveInstanceMethod  =sel_registerName (\"resolveInstanceMethod:\");\n }\n \n /* This function is called by objc_msg_lookup when the dispatch table\n@@ -548,7 +558,7 @@ __objc_send_initialize (Class class)\n \t__objc_send_initialize (class->super_class);\n \n       {\n-\tSEL op = sel_register_name (\"initialize\");\n+\tSEL op = sel_registerName (\"initialize\");\n \tIMP imp = 0;\n         struct objc_method_list * method_list = class->class_pointer->methods;\n \t\n@@ -750,7 +760,7 @@ class_addMethod (Class class_, SEL selector, IMP implementation,\n       || method_types == NULL  || (strcmp (method_types, \"\") == 0))\n     return NO;\n \n-  method_name = sel_get_name (selector);\n+  method_name = sel_getName (selector);\n   if (method_name == NULL)\n     return NO;\n \n@@ -953,14 +963,14 @@ __objc_forward (id object, SEL sel, arglist_t args)\n   /* The object doesn't recognize the method.  Check for responding to\n      error:.  If it does then sent it.  */\n   {\n-    char msg[256 + strlen ((const char *) sel_get_name (sel))\n+    char msg[256 + strlen ((const char *) sel_getName (sel))\n              + strlen ((const char *) object->class_pointer->name)];\n \n     sprintf (msg, \"(%s) %s does not recognize %s\",\n \t     (CLS_ISMETA (object->class_pointer)\n \t      ? \"class\"\n \t      : \"instance\" ),\n-             object->class_pointer->name, sel_get_name (sel));\n+             object->class_pointer->name, sel_getName (sel));\n \n     /* TODO: support for error: is surely deprecated ? */\n     err_sel = sel_get_any_uid (\"error:\");\n@@ -1012,7 +1022,7 @@ __objc_print_dtable_stats ()\n    dispatch table points to __objc_uninstalled_dtable then that means\n    it needs its dispatch table to be installed.  */\n struct sarray *\n-objc_get_uninstalled_dtable ()\n+objc_get_uninstalled_dtable (void)\n {\n   return __objc_uninstalled_dtable;\n }"}]}