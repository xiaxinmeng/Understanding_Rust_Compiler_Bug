{"sha": "12d03f6671165d77b076d043dc020d3a19caa44a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJkMDNmNjY3MTE2NWQ3N2IwNzZkMDQzZGMwMjBkM2ExOWNhYTQ0YQ==", "commit": {"author": {"name": "Anthony Green", "email": "green@cygnus.com", "date": "1999-04-22T14:22:11Z"}, "committer": {"name": "Anthony Green", "email": "green@gcc.gnu.org", "date": "1999-04-22T14:22:11Z"}, "message": "* libjava.compile/OperatorBenchmark.java: New file.\n\nFrom-SVN: r26583", "tree": {"sha": "59c1a0e93433acb912018647a58ae31b4fe28e9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59c1a0e93433acb912018647a58ae31b4fe28e9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12d03f6671165d77b076d043dc020d3a19caa44a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d03f6671165d77b076d043dc020d3a19caa44a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12d03f6671165d77b076d043dc020d3a19caa44a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d03f6671165d77b076d043dc020d3a19caa44a/comments", "author": null, "committer": null, "parents": [{"sha": "76c8f855861451f078440721b735e873106694d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76c8f855861451f078440721b735e873106694d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76c8f855861451f078440721b735e873106694d6"}], "stats": {"total": 890, "additions": 890, "deletions": 0}, "files": [{"sha": "3aad268139dec2865889e3ddb5246c8fd5cdac2b", "filename": "libjava/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d03f6671165d77b076d043dc020d3a19caa44a/libjava%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d03f6671165d77b076d043dc020d3a19caa44a/libjava%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FChangeLog?ref=12d03f6671165d77b076d043dc020d3a19caa44a", "patch": "@@ -1,3 +1,7 @@\n+Thu Apr 22 14:19:35 1999  Anthony Green  <green@cygnus.com>\n+\n+\t* libjava.compile/OperatorBenchmark.java: New file.\n+\n 1999-04-09  Warren Levy  <warrenl@cygnus.com>\n \n \t* libjava.mauve/mauve.exp (KEYS): Default to libgcj."}, {"sha": "03f660d848deeef2e919777b5aba646244ca82b5", "filename": "libjava/testsuite/libjava.compile/OperatorBenchmark.java", "status": "added", "additions": 886, "deletions": 0, "changes": 886, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d03f6671165d77b076d043dc020d3a19caa44a/libjava%2Ftestsuite%2Flibjava.compile%2FOperatorBenchmark.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d03f6671165d77b076d043dc020d3a19caa44a/libjava%2Ftestsuite%2Flibjava.compile%2FOperatorBenchmark.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.compile%2FOperatorBenchmark.java?ref=12d03f6671165d77b076d043dc020d3a19caa44a", "patch": "@@ -0,0 +1,886 @@\n+\r\n+/*\r\n+ * Copyright (c) 1996, 1997 by Doug Bell <dbell@shvn.com>.  All Rights Reserved.\r\n+ * \r\n+ * Redistribution and use in source and binary forms, with or without\r\n+ * modification, are permitted provided that the following conditions\r\n+ * are met:\r\n+ * 1. Redistributions of source code must retain the above copyright\r\n+ *    notice, this list of conditions and the following disclaimer.\r\n+ * 2. Redistributions in binary form must reproduce the above copyright\r\n+ *    notice, this list of conditions and the following disclaimer in the\r\n+ *    documentation and/or other materials provided with the distribution.\r\n+ *\r\n+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\r\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\r\n+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\r\n+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\r\n+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\r\n+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\r\n+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\r\n+ * SUCH DAMAGE.\r\n+ */\r\n+\r\n+\r\n+// This file has been hacked to compile without the rest of the\r\n+// benchmark code.\r\n+\r\n+class OperatorBenchmark {\r\n+\r\n+  public int getSampleCount() { return 0; }\r\n+  public int getSampleMillis() { return 0; }\r\n+  public boolean go;\r\n+  public int useint[];\r\n+  public void startTest () { }\r\n+  public long finishTest () { return 0; }\r\n+  public void startTimer (boolean b) { }\r\n+  public void stopTimer (int a, int b) { }\r\n+  public void report  (String s) { }\r\n+  public void println  (String s) { }\r\n+\r\n+\tpublic int getTestTime () {\r\n+\t\treturn (int) (100 * getSampleCount() * getSampleMillis()) / 1000;\r\n+\t}\r\n+\r\n+\tpublic int getRunningTime () {\r\n+\t\treturn (int) (1.1 * getTestTime());\r\n+\t}\r\n+\r\n+\tpublic long\trunTest () {\r\n+\t\tint\t\t\tdummy1 = 0, dummy2 = 0, dummy3 = 0;  // occupy implicit index slots\r\n+\t\tint\t\t\tcnt, ii;\r\n+\t\tbyte\t\tb1 = 1, b2 = 2, b3 = 3;\r\n+\t\tshort\t\ts1 = 1, s2 = 2, s3 = 3;\r\n+\t\tint\t\t\ti1 = 1, i2 = 2, i3 = 3;\r\n+\t\tlong\t\tl1 = 1, l2 = 2, l3 = 3;\r\n+\t\tfloat\t\tf1 = 1, f2 = 2, f3 = 3;\r\n+\t\tdouble\t\td1 = 1, d2 = 2, d3 = 3;\r\n+\r\n+\t\tstartTest();\r\n+\r\n+\t\tprintln(\"--- byte operators, local vars\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1++;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte++\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1 += b2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte += byte\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1 = (byte) (b2 + b3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte = byte + byte\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1 *= b2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte *= byte\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1 = (byte) (b2 * b3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte = byte * byte\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1 *= 2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte *= 2\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1 <<= 1;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte <<= 1\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1 %= b2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte %= byte\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1 = (byte) (b2 % b3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte = byte % byte\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1 /= b2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte /= byte\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1 = (byte) (b2 / b3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte = byte / byte\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1 /= 2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte /= 2\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1 >>= 1;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte >>= 1\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1 >>= i2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte >>= int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1 = (byte) (b2 >> i3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte = byte >> int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1 |= b2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte |= byte\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1 = (byte) (b2 | b3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte = byte | byte\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1 &= b2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte &= byte\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1 = (byte) (b2 & b3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte = byte & byte\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1 ^= b2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte ^= byte\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tb1 = (byte) (b2 ^ b3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"byte = byte ^ byte\");\r\n+\r\n+\r\n+\t\tprintln(\"--- short operators, local vars\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1++;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short++\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1 += s2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short += short\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1 = (short) (s2 + s3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short = short + short\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1 *= s2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short *= short\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1 = (short) (s2 * s3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short = short * short\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1 *= 2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short *= 2\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1 <<= 1;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short <<= 1\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1 %= s2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short %= short\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1 = (short) (s2 % s3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short = short % short\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1 /= s2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short /= short\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1 = (short) (s2 / s3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short = short / short\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1 /= 2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short /= 2\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1 >>= 1;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short >>= 1\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1 >>= i2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short >>= int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1 = (short) (s2 >> i3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short = short >> int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1 |= s2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short |= short\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1 = (short) (s2 | s3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short = short | short\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1 &= s2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short &= short\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1 = (short) (s2 & s3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short = short & short\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1 ^= s2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short ^= short\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ts1 = (short) (s2 ^ s3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"short = short ^ short\");\r\n+\r\n+\r\n+\t\tprintln(\"--- int operators, local vars\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1++;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int++\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1 += i2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int += int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1 = (i2 + i3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int = int + int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1 *= i2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int *= int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1 = (i2 * i3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int = int * int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1 *= 2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int *= 2\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1 <<= 1;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int <<= 1\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1 %= i2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int %= int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1 = (i2 % i3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int = int % int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1 /= i2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int /= int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1 = (i2 / i3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int = int / int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1 /= 2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int /= 2\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1 >>= 1;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int >>= 1\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1 >>= i2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int >>= int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1 = i2 >> i3;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int = int >> int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1 |= i2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int |= int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1 = i2 | i3;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int = int | int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1 &= i2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int &= int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1 = i2 & i3;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int = int & int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1 ^= i2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int ^= int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\ti1 = i2 ^ i3;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"int = int ^ int\");\r\n+\r\n+\r\n+\t\tprintln(\"--- long operators, local vars\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1++;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long++\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1 += l2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long += long\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1 = (l2 + l3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long = long + long\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1 *= l2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long *= long\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1 = (l2 * l3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long = long * long\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1 *= 2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long *= 2\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1 <<= 1;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long <<= 1\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1 %= l2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long %= long\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1 = (l2 % l3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long = long % long\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1 /= l2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long /= long\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1 = (l2 / l3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long = long / long\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1 /= 2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long /= 2\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1 >>= 1;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long >>= 1\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1 >>= i2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long >>= int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1 = l2 >> i3;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long = long >> int\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1 |= l2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long |= long\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1 = l2 | l3;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long = long | long\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1 &= l2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long &= long\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1 = l2 & l3;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long = long & long\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1 ^= l2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long ^= long\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tl1 = l2 ^ l3;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"long = long ^ long\");\r\n+\r\n+\r\n+\t\tprintln(\"--- float operators, local vars\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tf1 += f2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"float += float\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tf1 = (float) (f2 + f3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"float = float + float\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tf1 *= f2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"float *= float\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tf1 = (float) (f2 * f3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"float = float * float\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tf1 %= f2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"float %= float\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tf1 = (float) (f2 % f3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"float = float % float\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tf1 /= f2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"float /= float\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\tf1 = (float) (f2 / f3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"float = float / float\");\r\n+\r\n+\r\n+\t\tprintln(\"--- double operators, local vars\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\td1 += d2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"double += double\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\td1 = (d2 + d3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"double = double + double\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\td1 *= d2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"double *= double\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\td1 = (d2 * d3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"double = double * double\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\td1 %= d2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"double %= double\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\td1 = (d2 % d3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"double = double % double\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\td1 /= d2;\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"double /= double\");\r\n+\r\n+\t\tfor (cnt = getSampleCount();  --cnt >= 0; ) {\r\n+\t\t\tstartTimer(true);\r\n+\t\t\tfor (ii = 0;  go;  ii++)\r\n+\t\t\t\td1 = (d2 / d3);\r\n+\t\t\tstopTimer(cnt, ii);\r\n+\t\t}\r\n+\t\treport(\"double = double / double\");\r\n+\r\n+\t\tuseint[0] = dummy1;  useint[1] = dummy2;  useint[2] = dummy3;\r\n+\t\treturn finishTest();\r\n+\t}\r\n+}  // class OperatorBenchmark\r\n+\r\n+// EOF\r"}]}