{"sha": "e79136e41af698ccdaec62ed842b4785162dde09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc5MTM2ZTQxYWY2OThjY2RhZWM2MmVkODQyYjQ3ODUxNjJkZGUwOQ==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2016-05-26T12:25:51Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2016-05-26T12:25:51Z"}, "message": "GCC expands switch statements in a very simplistic way and tries to use a table...\n\nGCC expands switch statements in a very simplistic way and tries to use a table\nexpansion even when it is a bad idea for performance or codesize.\nGCC typically emits extremely sparse tables that contain mostly default entries\n(something which currently cannot be tuned by backends).  Additionally the\ncomputation of the minimum/maximum label offsets is too simplistic so the\ntables are often twice as large as necessary.\n\nThe cost of a table switch is significant due to the setup overhead, the table\nlookup (which due to being sparse and large adds unnecessary cachemisses)\nand hard to predict indirect jump.  Therefore it is best to avoid using a table\nunless there are many real case labels.\n\nThis patch fixes that by setting the default aarch64_case_values_threshold to\n16 when the per-CPU tuning is not set.  On SPEC2006 this improves the switch\nheavy benchmarks GCC and perlbench both in performance (1-2%) as well as size\n(0.5-1% smaller).\n\n    gcc/\n\t* config/aarch64/aarch64.c (aarch64_case_values_threshold):\n\tReturn a better case_values_threshold when optimizing.\n\nFrom-SVN: r236771", "tree": {"sha": "9cb928a5a7d1097002b87cf821c6a825fd65ac24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9cb928a5a7d1097002b87cf821c6a825fd65ac24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e79136e41af698ccdaec62ed842b4785162dde09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e79136e41af698ccdaec62ed842b4785162dde09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e79136e41af698ccdaec62ed842b4785162dde09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e79136e41af698ccdaec62ed842b4785162dde09/comments", "author": null, "committer": null, "parents": [{"sha": "5e4d7abeeea05faaa19d97c4693d5ae6c660a831", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e4d7abeeea05faaa19d97c4693d5ae6c660a831", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e4d7abeeea05faaa19d97c4693d5ae6c660a831"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "8fe8a26f394b05e3c464f2c96f87c25cf804367f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79136e41af698ccdaec62ed842b4785162dde09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79136e41af698ccdaec62ed842b4785162dde09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e79136e41af698ccdaec62ed842b4785162dde09", "patch": "@@ -1,3 +1,8 @@\n+2016-05-26  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_case_values_threshold):\n+\tReturn a better case_values_threshold when optimizing.\n+\n 2016-05-26  Wilco Dijkstra  <wdijkstr@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (aarch64_combinez):"}, {"sha": "84dcb0be8698cc59616df8c879bf6468d8883a96", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79136e41af698ccdaec62ed842b4785162dde09/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79136e41af698ccdaec62ed842b4785162dde09/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=e79136e41af698ccdaec62ed842b4785162dde09", "patch": "@@ -3572,7 +3572,12 @@ aarch64_cannot_force_const_mem (machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n   return aarch64_tls_referenced_p (x);\n }\n \n-/* Implement TARGET_CASE_VALUES_THRESHOLD.  */\n+/* Implement TARGET_CASE_VALUES_THRESHOLD.\n+   The expansion for a table switch is quite expensive due to the number\n+   of instructions, the table lookup and hard to predict indirect jump.\n+   When optimizing for speed, and -O3 enabled, use the per-core tuning if \n+   set, otherwise use tables for > 16 cases as a tradeoff between size and\n+   performance.  When optimizing for size, use the default setting.  */\n \n static unsigned int\n aarch64_case_values_threshold (void)\n@@ -3583,7 +3588,7 @@ aarch64_case_values_threshold (void)\n       && selected_cpu->tune->max_case_values != 0)\n     return selected_cpu->tune->max_case_values;\n   else\n-    return default_case_values_threshold ();\n+    return optimize_size ? default_case_values_threshold () : 17;\n }\n \n /* Return true if register REGNO is a valid index register."}]}