{"sha": "55e96bf91237bc0b42fe0079006507d42c155e69", "node_id": "C_kwDOANBUbNoAKDU1ZTk2YmY5MTIzN2JjMGI0MmZlMDA3OTAwNjUwN2Q0MmMxNTVlNjk", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-08T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-01-08T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "2797f4a48753abf8a96d71ef5e687da6de678fce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2797f4a48753abf8a96d71ef5e687da6de678fce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55e96bf91237bc0b42fe0079006507d42c155e69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55e96bf91237bc0b42fe0079006507d42c155e69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55e96bf91237bc0b42fe0079006507d42c155e69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55e96bf91237bc0b42fe0079006507d42c155e69/comments", "author": null, "committer": null, "parents": [{"sha": "11a2ff8d981110e1562caf7d98e41c1ff2e76056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11a2ff8d981110e1562caf7d98e41c1ff2e76056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11a2ff8d981110e1562caf7d98e41c1ff2e76056"}], "stats": {"total": 652, "additions": 651, "deletions": 1}, "files": [{"sha": "20aa719b8262e9af2e71adbed439b96f9bf3b4d5", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e96bf91237bc0b42fe0079006507d42c155e69/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e96bf91237bc0b42fe0079006507d42c155e69/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=55e96bf91237bc0b42fe0079006507d42c155e69", "patch": "@@ -1,3 +1,7 @@\n+2022-01-07  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* build.log: New file.\n+\n 2022-01-05  Nathan Sidwell  <nathan@acm.org>\n \n \t* MAINTAINERS: Add DCO entry.  Sort that list."}, {"sha": "c25ecf66aaf473a698e2ea792ca14908a8a16016", "filename": "gcc/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e96bf91237bc0b42fe0079006507d42c155e69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e96bf91237bc0b42fe0079006507d42c155e69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55e96bf91237bc0b42fe0079006507d42c155e69", "patch": "@@ -1,3 +1,62 @@\n+2022-01-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/analyzer.texi\n+\t(Special Functions for Debugging the Analyzer): Document\n+\t__analyzer_dump_escaped.\n+\n+2022-01-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/analyzer.texi (Other Debugging Techniques): Document\n+\tregion::is_named_decl_p.\n+\n+2022-01-07  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/102941\n+\t* config/arm/aarch-common.c (arm_md_asm_adjust):\n+\tUse a temp if !REG_P.\n+\n+2022-01-07  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/mmx.md (*move<V_32:mode>_internal): Add isa attribute.\n+\t(*movv2qi_internal): Remve sse2 requirement for alternatives 4,5.\n+\n+2022-01-07  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR rtl-optimization/103750\n+\t* fwprop.c (forward_propagate_into): Allow propagations from\n+\tinner loop to outer loop.\n+\n+2022-01-07  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* config/nvptx/nvptx.md (*cnot<mode>2): New define_insn.\n+\n+2022-01-07  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000.md (rs6000_mffscrni): Define.\n+\t(rs6000_set_fpscr_rn): Change the type of operand[0] from DI to SI.\n+\tCall gen_rs6000_mffscrni when operand[0] is a const_0_to_3_operand.\n+\n+2022-01-07  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/sse.md\n+\t(*<avx512>_eq<mode>3<mask_scalar_merge_name>_1): Extend to\n+\tUNSPEC_PCMP_UNSIGNED.\n+\n+2022-01-07  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/103753\n+\t* config/i386/i386-expand.c (ix86_expand_vector_set): Not use\n+\tgen_avx2_pblendph_1 when elt == 0.\n+\t* config/i386/sse.md (avx2_pblendph): Rename to ..\n+\t(avx2_pblend<ssemodesuffix>_1).. this, and extend to V16HI.\n+\t(*avx2_pblendw): Rename to ..\n+\t(*avx2_pblend<ssemodesuffix>): .. this, and extend to V16HF.\n+\t(avx2_pblendw): Rename to ..\n+\t(*avx2_pblend<ssemodesuffix>): .. this, and extend to V16HF.\n+\t(blendsuf): Removed.\n+\t(sse4_1_pblend<blendsuf>): Renamed to ..\n+\t(sse4_1_pblend<ssemodesuffix>): .. this.\n+\n 2022-01-06  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/103925"}, {"sha": "4c3145b6fef15b57ef6157cbc443369c65125b07", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e96bf91237bc0b42fe0079006507d42c155e69/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e96bf91237bc0b42fe0079006507d42c155e69/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=55e96bf91237bc0b42fe0079006507d42c155e69", "patch": "@@ -1 +1 @@\n-20220107\n+20220108"}, {"sha": "6a7b5004d7e8e1faf9daddec405461bec832f19d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 304, "deletions": 0, "changes": 304, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e96bf91237bc0b42fe0079006507d42c155e69/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e96bf91237bc0b42fe0079006507d42c155e69/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=55e96bf91237bc0b42fe0079006507d42c155e69", "patch": "@@ -1,3 +1,307 @@\n+2022-01-07  Patrick Bernardi  <bernardi@adacore.com>\n+\n+\t* libgnat/a-direct.adb (Search_Data): Remove type.\n+\t(Directory_Vectors): New package instantiation.\n+\t(Search_State): New type.\n+\t(Fetch_Next_Entry): Remove.\n+\t(Close): Remove.\n+\t(Finalize): Rewritten.\n+\t(Full_Name): Ditto.\n+\t(Get_Next_Entry): Return next entry from Search results vector\n+\trather than querying the directory directly using readdir.\n+\t(Kind): Rewritten.\n+\t(Modification_Time): Rewritten.\n+\t(More_Entries): Use Search state cursor to determine if more\n+\tentries are available for users to read.\n+\t(Simple_Name): Rewritten.\n+\t(Size): Rewritten.\n+\t(Start_Search_Internal): Rewritten to load the contents of the\n+\tdirectory that matches the pattern and filter into the search\n+\tobject.\n+\t* libgnat/a-direct.ads (Search_Type): New type.\n+\t(Search_Ptr): Ditto.\n+\t(Directory_Entry_Type): Rewritten to support new Start_Search\n+\tprocedure.\n+\t* libgnat/s-filatt.ads (File_Length_Attr): New function.\n+\n+2022-01-07  Etienne Servais  <servais@adacore.com>\n+\n+\t* sem_attr.adb (Check_Reference): Fix condition.\n+\n+2022-01-07  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* libgnarl/s-taprop__mingw.adb (Timed_Sleep): Remove \"pragma\n+\tUnreferenced\" for Result.\n+\t(Timed_Delay): Likewise.\n+\n+2022-01-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* gen_il-gen.adb (Put_Make_Decls): Put pragma Inline in a\n+\tdedicated line, so that the current indentation is taken into\n+\taccount.\n+\n+2022-01-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_aggr.adb (Build_Array_Aggr_Code): Fix inconsistent style\n+\tin comments and code.\n+\n+2022-01-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_aggr.adb (Gen_Assign): Remove explicit initialization for\n+\tcomponents of access types.\n+\t(Get_Assoc_Expr): Enable initialization for components of all\n+\ttypes that require simple initialization.\n+\n+2022-01-07  Javier Miranda  <miranda@adacore.com>\n+\n+\t* atree.ads (Traverse_Func_With_Parent): New generic subprogram.\n+\t(Traverse_Proc_With_Parent): Likewise.\n+\t* atree.adb (Parents_Stack): New table used to traverse trees\n+\tpassing the parent field of each node.\n+\t(Internal_Traverse_With_Parent): New generic subprogram.\n+\t(Traverse_Func_With_Parent): Likewise.\n+\t(Traverse_Proc_With_Parent): Likewise.\n+\t* contracts.adb (Fix_Parents): New subprogram.\n+\t(Restore_Original_Selected_Component): Enhanced to fix the\n+\tparent field of restored nodes.\n+\t(Inherit_Condition): Adding assertions to check the parent field\n+\tof inherited conditions and to ensure that the built inherited\n+\tcondition has no reference to the formals of the parent\n+\tsubprogram.\n+\t* sem_util.ads, sem_util.adb (Check_Parents): New subprogram.\n+\n+2022-01-07  Etienne Servais  <servais@adacore.com>\n+\n+\t* sem_attr.adb (Check_Placement_In_Test_Case): Fix typo.\n+\n+2022-01-07  Justin Squirek  <squirek@adacore.com>\n+\n+\t* comperr.adb (Delete_SCIL_Files): Replace unnecessary\n+\tUnreferenced pragma with specific pragma Warnings.\n+\t* doc/gnat_rm/implementation_defined_pragmas.rst (Unreferenced):\n+\tAdd documentation for new behavior.\n+\t* gnat_rm.texi: Regenerate.\n+\t* erroutc.adb (Set_At): Remove useless assignment.\n+\t* exp_ch2.adb (In_Assignment_Context): Deleted.\n+\t(Is_Object_Renaming_Name): Replace calls to Is_LHS with calls to\n+\tKnown_To_Be_Assigned.\n+\t(Expand_Current_Value): Replace calls to May_Be_Lvalue with\n+\tcalls to Known_To_Be_Assigned.\n+\t(Expand_Entry_Paramter): Replace calls to In_Assignment_Context\n+\twith calls to Known_To_Be_Assigned.\n+\t* exp_ch4.adb (Expand_N_Op_Rem): Remove unnecessary Unreferenced\n+\tpragma.\n+\t* exp_imgv.adb (Build_Enumeration_Image_Tables): Default\n+\tinitialize S_N.\n+\t* ghost.adb (Check_Ghost_Policy): Replace call to May_Be_Lvalue\n+\twith call to Known_To_Be_Assigned.\n+\t* lib-xref.adb (Is_On_LHS): Deleted.\n+\t(OK_To_Set_Referenced): Rewrite subprogram to encompass the new\n+\tpragma Unreferenced behavior.\n+\t(Process_Deferred_References): Replace call to Is_LHS with call\n+\tto Known_To_Be_Assigned.\n+\t* libgnarl/s-taasde.adb, libgnarl/s-tasren.adb,\n+\tlibgnarl/s-tpobop.adb, libgnat/a-calend.adb,\n+\tlibgnat/a-calfor.adb, libgnat/a-cbdlli.adb,\n+\tlibgnat/a-cbhama.adb, libgnat/a-cbhase.adb,\n+\tlibgnat/a-cbmutr.adb, libgnat/a-cborma.adb,\n+\tlibgnat/a-cborse.adb, libgnat/a-cdlili.adb,\n+\tlibgnat/a-cfhama.adb, libgnat/a-cforse.adb,\n+\tlibgnat/a-cidlli.adb, libgnat/a-cihama.adb,\n+\tlibgnat/a-cihase.adb, libgnat/a-cimutr.adb,\n+\tlibgnat/a-ciorma.adb, libgnat/a-ciormu.adb,\n+\tlibgnat/a-ciorse.adb, libgnat/a-cohama.adb,\n+\tlibgnat/a-cohase.adb, libgnat/a-comutr.adb,\n+\tlibgnat/a-convec.adb, libgnat/a-coorma.adb,\n+\tlibgnat/a-coormu.adb, libgnat/a-coorse.adb,\n+\tlibgnat/a-crdlli.adb, libgnat/a-tigeau.adb,\n+\tlibgnat/a-wtgeau.adb, libgnat/a-ztgeau.adb,\n+\tlibgnat/g-calend.adb, libgnat/g-comlin.adb,\n+\tlibgnat/g-expect.adb, libgnat/g-mbflra.adb,\n+\tlibgnat/g-spipat.adb, libgnat/s-fatgen.adb,\n+\tlibgnat/s-fileio.adb, libgnat/s-os_lib.adb,\n+\tlibgnat/s-regpat.adb, libgnat/s-valued.adb,\n+\tlibgnat/s-valuer.adb: Remove unnecessary Unreferenced pragmas\n+\t* sem_ch10.adb (Process_Spec_Clauses): Remove useless\n+\tassignments.\n+\t* sem_ch13.adb (Validate_Literal_Aspect): Default initialize I.\n+\t* sem_ch3.adb (Build_Derived_Concurrent_Type): Default\n+\tinitialize Corr_Decl.\n+\t* sem_ch8.adb (Undefined): Replace calls to Is_LHS with calls to\n+\tKnown_To_Be_Assigned.\n+\t(In_Abstract_View_Pragma): Likewise.\n+\t* sem_eval.adb (Eval_Selected_Component): Replace calls to\n+\tIs_LHS with calls to Known_To_Be_Assigned.\n+\t* sem_res.adb (Init_Component): Replace calls to May_Be_Lvalue\n+\twith calls to Known_To_Be_Assigned.\n+\t* sem_util.adb, sem_util.ads (End_Label_Loc): Default initialize\n+\tOwner.\n+\t(Explain_Limited_Type): Default initialize Expr_Func.\n+\t(Find_Actual): Modified to handle entry families.\n+\t(Is_LHS): Deleted.\n+\t(May_Be_Lvalue): Deleted.\n+\t(Known_To_Be_Assigned): Modified and improved to handle all\n+\tcases.\n+\t* sem_warn.adb (Traverse_Result): Replace calls to May_Be_Lvalue\n+\twith calls to Known_To_Be_Assigned.\n+\t(Check_Ref): Modify error on unreferenced out parameters to take\n+\tinto account different warning flags.\n+\n+2022-01-07  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch3.adb (Reorder_Interfaces): When the conflicting\n+\tinterface is identified we just replace the interface in the\n+\tlist of interfaces of the tagged type (instead of adding a\n+\tduplicate to the list of interfaces).\n+\n+2022-01-07  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* adaint.c (__gnat_kill): Terminate process only in case of\n+\tSIGKILL, SIGINT, SIGBREAK, SIGTERM, SIGABRT.  Do not call\n+\tOpenProcess if not going to terminate process.\n+\n+2022-01-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_prag.adb (Expand_Pragma_Inspection_Point): Do a single pass\n+\tover the arguments of the pragma.  Set the Address_Taken flag on\n+\tthem and use the Has_Delayed_Freeze flag to spot those which have\n+\ttheir elaboration delayed.  Reuse the location variable Loc.\n+\n+2022-01-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* osint.adb (To_Lower): Clarify that only To_Lower function\n+\tcauses bootstrap issues; fix style.\n+\t* treepr.adb (Print_Str_Mixed_Case): Reuse existing case\n+\tconversion routine.\n+\t(To_Mixed): Rename from Capitalize; reuse System.Case_Util\n+\tprocedure and explain the bootstrap issue.\n+\n+2022-01-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch7.adb (Process_Transients_In_Scope): Remove unnecessary\n+\tinitialization of Must_Hook; change Detect_Subprogram_Call from\n+\tfunction to procedure; adapt caller.\n+\n+2022-01-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch5.adb, exp_disp.adb, exp_util.adb, par-ch4.adb,\n+\tsem_ch13.adb: Remove extra space before THEN that occurs at the\n+\tend of a line.\n+\n+2022-01-07  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* expect.c (__gnat_waitpid): Use macros WIFEXITED, WEXITSTATUS,\n+\tWIFSIGNALED, WTERMSIG, WIFSTOPPED, WSTOPSIG to get exit status\n+\tor signal that caused the child process to terminate/stop.  Do\n+\tnot process exit status in case of error in waitpid call.\n+\t* adaint.c (__gnat_kill): Use of GenerateConsoleCtrlEvent is\n+\tremoved in Windows variant as it actually is not working and was\n+\tterminating the calling process.  Set signal number into exit\n+\tcode parameter of TerminateProcess to work the same like in\n+\tLinux.\n+\n+2022-01-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch5.adb (Expand_N_Case_Statement): Remove explicit\n+\texpansion.\n+\n+2022-01-07  Etienne Servais  <servais@adacore.com>\n+\n+\t* doc/gnat_ugn/building_executable_programs_with_gnat.rst:\n+\tUpdate -gnatwr documentation.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2022-01-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_unst.adb (Unnest_Subprogram): Sync comment with the\n+\tcurrent code.\n+\n+2022-01-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch4.adb (Raise_Accessibility_Error): Move exception name\n+\tto the message string; move << control characters to the end,\n+\tfor consistency.\n+\t* sem_ch6.adb (Analyze_Function_Return): Likewise.\n+\t* sem_util.adb (Compile_Time_Constraint_Error): Likewise.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Remove quotes\n+\taround Storage_Error.\n+\t* gcc-interface/trans.c (gnat_to_gnu): Remove quotes around\n+\tConstraint_Error.\n+\n+2022-01-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* errout.adb (Error_Msg): Move warning suppression code from\n+\tError_Msg_NLE\n+\t(Error_Msg_NLE): Warning suppression is now done by the internal\n+\tcall to Error_Msg.\n+\n+2022-01-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Remove unnecessary\n+\tguards.\n+\t* exp_ch4.adb (Expand_N_If_Expression): Likewise; clarify comment.\n+\t* exp_ch5.adb (Expand_N_If_Statement,\n+\tExpand_Iterator_Loop_Over_Container): Likewise.\n+\t* exp_ch9.adb (Expand_N_Task_Type_Declaration): Remove redundant\n+\tguard.\n+\t* freeze.adb (Freeze_All_Ent): Reduce scope of a local variable.\n+\n+2022-01-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_ch3.adb (Build_Init_Procedure): Remove unnecessary guard.\n+\t* exp_disp.adb (Make_DT): Likewise.\n+\t* sem_ch12.adb (Analyze_Associations): Likewise.\n+\n+2022-01-07  Etienne Servais  <servais@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Op_Concat_Arg): Check range when\n+\tconcatenating scalars.\n+\n+2022-01-07  Bob Duff  <duff@adacore.com>\n+\n+\t* treepr.adb (Print_Node_Ref): Change \"not Is_Array_Type\" to\n+\t\"Is_Discrete_Type\".\n+\n+2022-01-07  Richard Kenner  <kenner@adacore.com>\n+\n+\t* libgnat/g-spipat.ads (Boolean_Func, Natural_Func,\n+\tVString_Func): Mark as Favor_Top_Level.\n+\t* sem_ch13.adb (Validate_Unchecked_Conversion): Avoid using\n+\tinternal representation if Unchecked_Conversion between\n+\tan access to subprogram and System.Address within the same unit.\n+\n+2022-01-07  Bob Duff  <duff@adacore.com>\n+\n+\t* treepr.adb (Print_Node_Ref): Print the value if available.\n+\n+2022-01-07  Richard Kenner  <kenner@adacore.com>\n+\n+\t* sem_util.ads, sem_util.adb (Get_Fullest_View): Add option to\n+\tnot recurse and return the next-most-fullest view.\n+\n+2022-01-07  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch10.adb (Check_Redundant_Withs): Add a warning if a\n+\tlibrary unit with's its own ancestor. Note that this warning is\n+\tnot triggered for something like \"with P.R;\" in P.Q, because\n+\tthere the \"with P;\" is considered implicit.\n+\t* fname-sf.adb, libgnarl/s-stusta.adb, libgnarl/s-tasdeb.ads,\n+\tlibgnat/a-calfor.adb, libgnat/a-tiboio.adb,\n+\tlibgnat/a-wwboio.adb, libgnat/a-zzboio.adb, libgnat/i-cobol.adb,\n+\tlibgnat/s-bitops.adb, libgnat/s-bitops.ads,\n+\tlibgnat/s-direio.adb, libgnat/s-dwalin.adb,\n+\tlibgnat/s-geveop.adb, libgnat/s-mmosin__unix.adb,\n+\tlibgnat/s-os_lib.adb, libgnat/s-os_lib.ads,\n+\tlibgnat/s-pooglo.ads, libgnat/s-secsta.adb,\n+\tlibgnat/s-shasto.adb, libgnat/s-stausa.ads,\n+\tlibgnat/s-stratt.ads, libgnat/s-ststop.adb: Remove with of\n+\tparent.\n+\t* sinfo.ads: Minor comment fix.\n+\n+2022-01-07  Bob Duff  <duff@adacore.com>\n+\n+\t* osint-m.adb: Remove with_clause and pragma.\n+\n 2022-01-06  Bob Duff  <duff@adacore.com>\n \n \t* sem_res.adb (Resolve_Range): Warn on null range, unless we are"}, {"sha": "3484e3557eb36d5adfa23cbf3b21d05872db023e", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e96bf91237bc0b42fe0079006507d42c155e69/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e96bf91237bc0b42fe0079006507d42c155e69/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=55e96bf91237bc0b42fe0079006507d42c155e69", "patch": "@@ -1,3 +1,36 @@\n+2022-01-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* engine.cc (impl_run_checkers): Pass logger to engine ctor.\n+\t* region-model-manager.cc\n+\t(region_model_manager::region_model_manager): Add logger param and\n+\tuse it to initialize m_logger.\n+\t* region-model.cc (engine::engine): New.\n+\t* region-model.h (region_model_manager::region_model_manager):\n+\tAdd logger param.\n+\t(region_model_manager::get_logger): New.\n+\t(region_model_manager::m_logger): New field.\n+\t(engine::engine): New.\n+\t* store.cc (store_manager::get_logger): New.\n+\t(store::set_value): Log scope.  Log when marking a cluster as\n+\tunknown due to possible aliasing.\n+\t* store.h (store_manager::get_logger): New decl.\n+\n+2022-01-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model-impl-calls.cc (cmp_decls): New.\n+\t(cmp_decls_ptr_ptr): New.\n+\t(region_model::impl_call_analyzer_dump_escaped): New.\n+\t* region-model.cc (region_model::on_stmt_pre): Handle\n+\t__analyzer_dump_escaped.\n+\t* region-model.h (region_model::impl_call_analyzer_dump_escaped):\n+\tNew decl.\n+\t* store.h (binding_cluster::get_base_region): New accessor.\n+\n+2022-01-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region.cc (region::is_named_decl_p): New.\n+\t* region.h (region::is_named_decl_p): New decl.\n+\n 2022-01-06  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/103546"}, {"sha": "b2c47cd105a7cf95ce1bb010933a12c4a0ecb46b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e96bf91237bc0b42fe0079006507d42c155e69/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e96bf91237bc0b42fe0079006507d42c155e69/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=55e96bf91237bc0b42fe0079006507d42c155e69", "patch": "@@ -1,3 +1,114 @@\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/20040\n+\t* init.c (build_new_1): Also build pointer cleanup if\n+\tTYPE_GETS_DELETE.\n+\t* cp-tree.h (TYPE_GETS_VEC_DELETE): New.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/103936\n+\tPR c++/65591\n+\t* cp-gimplify.c (cp_gimplify_expr): Restore VEC_INIT_EXPR handling.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/103711\n+\t* init.c (perform_target_ctor): Select destructor by in_chrg.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/61611\n+\t* except.c (in_nested_catch): New.\n+\t(expand_end_catch_block): Check it.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/33799\n+\tPR c++/102191\n+\t* except.c (maybe_splice_retval_cleanup): Check\n+\tcurrent_binding_level.\n+\t* semantics.c (do_poplevel): Call it here.\n+\t* parser.c (cp_parser_compound_statement): Not here.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53868\n+\t* decl.c (cp_finish_decl): Use wrap_temporary_cleanups for\n+\tcleanups from set_up_extended_ref_temp.\n+\t(wrap_temporary_cleanups): Ignore array cleanups.\n+\t(initialize_local_var): Don't check for array here.\n+\t* cp-tree.h (BIND_EXPR_VEC_DTOR): New.\n+\t* init.c (build_vec_delete_1): Set it.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/66451\n+\t* init.c (build_vec_delete_1): Handle throwing dtor.\n+\t(build_vec_init): Tell it we're in a cleanup already.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\t* typeck2.c (split_nonconstant_init_1): Don't cleanup the last elt.\n+\t(split_nonconstant_init): Adjust.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/66139\n+\tPR c++/52320\n+\t* constexpr.c (replace_decl): Rename from replace_result_decl.\n+\t* cp-tree.h (replace_decl): Declare it.\n+\t* cp-gimplify.c (cp_gimplify_init_expr): Call it.\n+\t(cp_gimplify_expr): Don't handle VEC_INIT_EXPR.\n+\t(cp_genericize_init, cp_genericize_init_expr)\n+\t(cp_genericize_target_expr): New.\n+\t(cp_fold_r): Call them.\n+\t* tree.c (build_array_copy): Add a TARGET_EXPR.\n+\t* typeck2.c (digest_init_r): Look through a TARGET_EXPR.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/94041\n+\t* decl.c (initialize_local_var): Fix comment.\n+\t* init.c (build_new_1): Do stabilize array init.\n+\t(build_vec_init): Use TARGET_EXPR for cleanup.  Initialization\n+\tof an element from an explicit initializer is not a\n+\tfull-expression.\n+\t* tree.c (expand_vec_init_expr): Pass flags through.\n+\t* typeck2.c (split_nonconstant_init_1): Handle VEC_INIT_EXPR.\n+\t(split_nonconstant_init): Handle array cleanups.\n+\t* cp-tree.h: Adjust.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/94041\n+\t* decl.c (check_initializer): Remove obsolete comment.\n+\t(wrap_cleanups_r): Don't wrap CLEANUP_EH_ONLY.\n+\t(initialize_local_var): Change assert to test.\n+\t* typeck2.c (maybe_push_temp_cleanup): New.\n+\t(split_nonconstant_init_1): Use it.\n+\t(split_nonconstant_init): Clear cleanup flags.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/92385\n+\t* typeck2.c (PICFLAG_VEC_INIT): New.\n+\t(process_init_constructor_array): Set it.\n+\t(process_init_constructor): Handle it.\n+\t(split_nonconstant_init_1): Handle VEC_INIT_EXPR.\n+\t* init.c (build_vec_init): Likewise.\n+\t* cp-gimplify.c (cp_gimplify_expr): Factor out...\n+\t* tree.c (expand_vec_init_expr): ...this function.\n+\t(build_vec_init_elt): Handle BRACE_ENCLOSED_INITIALIZER_P.\n+\t(build_vec_init_expr): Likewise.\n+\t* constexpr.c (cxx_eval_vec_init): Likewise.\n+\t(reduced_constant_expression_p): Check arrays before C++20.\n+\t* cp-tree.h (expand_vec_init_expr): Declare.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\t* init.c (build_new_1): Remove preevaluation code.\n+\n 2022-01-05  Nathan Sidwell  <nathan@acm.org>\n \n \t* pt.c (instantiate_class_template_1): Process attribute((used)) set"}, {"sha": "f9ee1752e7acf23c7d45073c19de2f194d68e9a5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e96bf91237bc0b42fe0079006507d42c155e69/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e96bf91237bc0b42fe0079006507d42c155e69/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=55e96bf91237bc0b42fe0079006507d42c155e69", "patch": "@@ -1,3 +1,9 @@\n+2022-01-07  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR fortran/103898\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_size): Make size_var\n+\tactually be a variable and fix surrounding code.\n+\n 2022-01-06  Steve Kargl  <kargl@gcc.gnu.org>\n \t    Sandra Loosemore  <sandra@codesourcery.com>\n "}, {"sha": "01a661de70fcd0007a4b7da294147d17d9f36014", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55e96bf91237bc0b42fe0079006507d42c155e69/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55e96bf91237bc0b42fe0079006507d42c155e69/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=55e96bf91237bc0b42fe0079006507d42c155e69", "patch": "@@ -1,3 +1,136 @@\n+2022-01-08  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/analyzer-decls.h (__analyzer_dump_escaped): New\n+\tdecl.\n+\t* gcc.dg/analyzer/escaping-1.c: New test.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/20040\n+\t* g++.dg/init/delete4.C: New test.\n+\n+2022-01-07  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/102941\n+\t* gcc.target/aarch64/asm-flag-7.c: New test.\n+\t* gcc.target/arm/asm-flag-7.c: New test.\n+\n+2022-01-07  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* gnat.dg/aggr26.adb: Update expected error message.\n+\n+2022-01-07  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* g++.target/i386/pr103750-fwprop-1.C: New test.\n+\n+2022-01-07  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\t* gcc.target/nvptx/cnot-1.c: New test case.\n+\n+2022-01-07  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/mffscrni_p9.c: New testcase for mffscrni.\n+\t* gcc.target/powerpc/test_fpscr_rn_builtin.c: Test mffscrn and mffscrni\n+\tseparately.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/103936\n+\tPR c++/65591\n+\t* g++.dg/init/aggr15.C: New test.\n+\n+2022-01-07  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr103774.c: New test.\n+\t* gcc.target/i386/avx512bw-vpcmpequb-1.c: Adjust scan assembler\n+\tfrom vpcmpub to (?:vpcmpub|vpcmpeqb).\n+\t* gcc.target/i386/avx512bw-vpcmpequw-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpub-1.c: Ditto.\n+\t* gcc.target/i386/avx512bw-vpcmpuw-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpequd-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpequq-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpcmpud-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpequd-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpequq-1.c: Ditto.\n+\t* gcc.target/i386/avx512vl-vpcmpuq-1.c: Ditto.\n+\n+2022-01-07  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr103753.c: New test.\n+\n+2022-01-07  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR fortran/103898\n+\t* gfortran.dg/pr103898.f90: New test.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/103711\n+\t* g++.dg/eh/delegating1.C: New test.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/61611\n+\t* g++.dg/eh/ctor-fntry1.C: New test.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/33799\n+\tPR c++/102191\n+\t* g++.dg/eh/return1.C: Add temporary in try block case.\n+\t* g++.dg/cpp2a/constexpr-dtor11.C: New test.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/53868\n+\t* g++.dg/eh/ref-temp1.C: New test.\n+\t* g++.dg/eh/ref-temp2.C: New test.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/66451\n+\t* g++.dg/eh/array3.C: New test.\n+\t* g++.dg/eh/array1.C: Mark destructor as throw().\n+\t* g++.dg/ipa/devirt-40.C: Likewise.\n+\t* g++.dg/warn/pr83054.C: Likewise.\n+\t* g++.dg/eh/delete1.C: Shorten array to one element.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/tree-ssa/aggregate1.C: New test.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/66139\n+\tPR c++/52320\n+\t* g++.dg/cpp0x/initlist116.C: New test.\n+\t* g++.dg/cpp0x/initlist117.C: New test.\n+\t* g++.dg/cpp0x/lambda/lambda-eh.C: New test.\n+\t* g++.dg/eh/aggregate1.C: New test.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/94041\n+\t* g++.dg/init/array12.C:\n+\t* g++.dg/init/aggr7-eh2.C: New test.\n+\t* g++.dg/init/aggr7-eh3.C: New test.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/94041\n+\t* g++.dg/init/aggr7-eh.C: New test.\n+\t* g++.dg/cpp0x/initlist122.C: Also test aggregate variable.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/92385\n+\t* g++.dg/init/array61.C: New test.\n+\n+2022-01-07  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.old-deja/g++.martin/new1.C: Don't expect preeval.\n+\t* g++.dg/tree-ssa/stabilize1.C: Removed.\n+\n 2022-01-06  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/103546"}]}