{"sha": "ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYwODg5ZWI0ZDdmMzQyNzBhNmNkZGIzMzUxZmU4ZWU0ZmM5YmJlMA==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2019-08-14T09:52:54Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-14T09:52:54Z"}, "message": "[Ada] Alignment may be specified as zero\n\nAn Alignment clause or an aspect_specification for Alignment may be\nspecified as 0, which is treated the same as 1.\n\n2019-08-14  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch13.adb (Get_Alignment_Value): Return 1 for Alignment 0,\n\tand do not give an error.\n\t* doc/gnat_rm/representation_clauses_and_pragmas.rst: Update the\n\tcorresponding documentation.\n\t* gnat_rm.texi: Regenerate.\n\ngcc/testsuite/\n\n\t* gnat.dg/alignment15.adb: New testcase.\n\nFrom-SVN: r274473", "tree": {"sha": "5aef1abe0c82b06992ba02189c10df55d9cdcef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5aef1abe0c82b06992ba02189c10df55d9cdcef7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f0539a7914cba3b7de76665a74edb90e30f2dbc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0539a7914cba3b7de76665a74edb90e30f2dbc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0539a7914cba3b7de76665a74edb90e30f2dbc9"}], "stats": {"total": 88, "additions": 63, "deletions": 25}, "files": [{"sha": "188770565745044e91e93f357773735c4d103859", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0", "patch": "@@ -1,3 +1,11 @@\n+2019-08-14  Bob Duff  <duff@adacore.com>\n+\n+\t* sem_ch13.adb (Get_Alignment_Value): Return 1 for Alignment 0,\n+\tand do not give an error.\n+\t* doc/gnat_rm/representation_clauses_and_pragmas.rst: Update the\n+\tcorresponding documentation.\n+\t* gnat_rm.texi: Regenerate.\n+\n 2019-08-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* inline.adb (Add_Pending_Instantiation): Fix off-by-one error"}, {"sha": "efcdc8049fc4dc4d6b5bac9a5c511701570acfdb", "filename": "gcc/ada/doc/gnat_rm/representation_clauses_and_pragmas.rst", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst?ref=ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0", "patch": "@@ -30,9 +30,11 @@ Alignment Clauses\n \n .. index:: Alignment Clause\n \n-GNAT requires that all alignment clauses specify a power of 2, and all\n-default alignments are always a power of 2.  The default alignment\n-values are as follows:\n+GNAT requires that all alignment clauses specify 0 or a power of 2, and\n+all default alignments are always a power of 2. Specifying 0 is the\n+same as specifying 1.\n+\n+The default alignment values are as follows:\n \n * *Elementary Types*.\n \n@@ -610,23 +612,23 @@ alignment of the type (this is true for all types). In some cases the\n      end record;\n \n \n-On a typical 32-bit architecture, the X component will occupy four bytes \n-and the Y component will occupy one byte, for a total of 5 bytes. As a \n-result ``R'Value_Size`` will be 40 (bits) since this is the minimum size \n-required to store a value of this type. For example, it is permissible \n-to have a component of type R in an array whose component size is \n-specified to be 40 bits. \n-\n-However, ``R'Object_Size`` will be 64 (bits). The difference is due to \n-the alignment requirement for objects of the record type. The X \n-component will require four-byte alignment because that is what type \n-Integer requires, whereas the Y component, a Character, will only \n-require 1-byte alignment. Since the alignment required for X is the \n-greatest of all the components' alignments, that is the alignment \n-required for the enclosing record type, i.e., 4 bytes or 32 bits. As \n-indicated above, the actual object size must be rounded up so that it is \n-a multiple of the alignment value. Therefore, 40 bits rounded up to the \n-next multiple of 32 yields 64 bits. \n+On a typical 32-bit architecture, the X component will occupy four bytes\n+and the Y component will occupy one byte, for a total of 5 bytes. As a\n+result ``R'Value_Size`` will be 40 (bits) since this is the minimum size\n+required to store a value of this type. For example, it is permissible\n+to have a component of type R in an array whose component size is\n+specified to be 40 bits.\n+\n+However, ``R'Object_Size`` will be 64 (bits). The difference is due to\n+the alignment requirement for objects of the record type. The X\n+component will require four-byte alignment because that is what type\n+Integer requires, whereas the Y component, a Character, will only\n+require 1-byte alignment. Since the alignment required for X is the\n+greatest of all the components' alignments, that is the alignment\n+required for the enclosing record type, i.e., 4 bytes or 32 bits. As\n+indicated above, the actual object size must be rounded up so that it is\n+a multiple of the alignment value. Therefore, 40 bits rounded up to the\n+next multiple of 32 yields 64 bits.\n \n For all other types, the ``Object_Size``\n and ``Value_Size`` are the same (and equivalent to the RM attribute ``Size``)."}, {"sha": "58ff6af0079cf9a1f0427b9867413d3756456a73", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0", "patch": "@@ -21,7 +21,7 @@\n \n @copying\n @quotation\n-GNAT Reference Manual , Jul 31, 2019\n+GNAT Reference Manual , Aug 01, 2019\n \n AdaCore\n \n@@ -18369,9 +18369,11 @@ and this section describes the additional capabilities provided.\n \n @geindex Alignment Clause\n \n-GNAT requires that all alignment clauses specify a power of 2, and all\n-default alignments are always a power of 2.  The default alignment\n-values are as follows:\n+GNAT requires that all alignment clauses specify 0 or a power of 2, and\n+all default alignments are always a power of 2. Specifying 0 is the\n+same as specifying 1.\n+\n+The default alignment values are as follows:\n \n \n @itemize *"}, {"sha": "35a295c8cf3843f6997fdae4a4e511e4d685f21a", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0", "patch": "@@ -11509,7 +11509,7 @@ package body Sem_Ch13 is\n       if Align = No_Uint then\n          return No_Uint;\n \n-      elsif Align <= 0 then\n+      elsif Align < 0 then\n \n          --  This error is suppressed in ASIS mode to allow for different ASIS\n          --  back ends or ASIS-based tools to query the illegal clause.\n@@ -11520,6 +11520,11 @@ package body Sem_Ch13 is\n \n          return No_Uint;\n \n+      --  If Alignment is specified to be 0, we treat it the same as 1\n+\n+      elsif Align = 0 then\n+         return Uint_1;\n+\n       else\n          for J in Int range 0 .. 64 loop\n             declare"}, {"sha": "a9c98219a35f0e35a0a2db23377b7ae8f3305110", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0", "patch": "@@ -1,3 +1,7 @@\n+2019-08-14  Bob Duff  <duff@adacore.com>\n+\n+\t* gnat.dg/alignment15.adb: New testcase.\n+\n 2019-08-14  Bob Duff  <duff@adacore.com>\n \n \t* gnat.dg/warn27.adb: New testcase."}, {"sha": "e58243d29084abc0dffbee11e6b7ecc63d47ab7b", "filename": "gcc/testsuite/gnat.dg/alignment15.adb", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0/gcc%2Ftestsuite%2Fgnat.dg%2Falignment15.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0/gcc%2Ftestsuite%2Fgnat.dg%2Falignment15.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Falignment15.adb?ref=ff0889eb4d7f34270a6cddb3351fe8ee4fc9bbe0", "patch": "@@ -0,0 +1,17 @@\n+--  { dg-compile }\n+\n+procedure Alignment15 is\n+   type T0 is record\n+      X : Integer;\n+   end record;\n+   for T0'Alignment use 0;\n+\n+   type T00 is record\n+      X : Integer;\n+   end record with Alignment => 0;\n+\n+   Dummy0  : T0;\n+   Dummy00 : T00;\n+begin\n+   null;\n+end;"}]}