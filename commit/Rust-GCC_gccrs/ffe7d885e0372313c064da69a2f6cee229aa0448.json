{"sha": "ffe7d885e0372313c064da69a2f6cee229aa0448", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZlN2Q4ODVlMDM3MjMxM2MwNjRkYTY5YTJmNmNlZTIyOWFhMDQ0OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-02-24T19:13:49Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-02-24T19:13:49Z"}, "message": "array (array<>::swap, assign): Implement.\n\n2006-02-24  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/array (array<>::swap, assign): Implement.\n\t* include/tr1/array (operator==, operator!=, operator<,\n\toperator>, operator>=, operator<=, swap, get): Inline.\n\t* testsuite/tr1/6_containers/array/requirements/member_swap.cc: New.\n\t* testsuite/tr1/6_containers/array/requirements/assign.cc: Likewise.\n\t* testsuite/tr1/6_containers/array/specialized_algorithms/swap.cc:\n\tLikewise.\n\nFrom-SVN: r111424", "tree": {"sha": "bc13bd7d1a6b37817db97204a8932a276fd9db5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc13bd7d1a6b37817db97204a8932a276fd9db5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffe7d885e0372313c064da69a2f6cee229aa0448", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe7d885e0372313c064da69a2f6cee229aa0448", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffe7d885e0372313c064da69a2f6cee229aa0448", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffe7d885e0372313c064da69a2f6cee229aa0448/comments", "author": null, "committer": null, "parents": [{"sha": "e26ec0bb0662b03b4b5b96c035abe26f1351a433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e26ec0bb0662b03b4b5b96c035abe26f1351a433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e26ec0bb0662b03b4b5b96c035abe26f1351a433"}], "stats": {"total": 199, "additions": 178, "deletions": 21}, "files": [{"sha": "66f57c7f1eb8dfeb1e89c313403c24828503fa57", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe7d885e0372313c064da69a2f6cee229aa0448/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe7d885e0372313c064da69a2f6cee229aa0448/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ffe7d885e0372313c064da69a2f6cee229aa0448", "patch": "@@ -1,3 +1,13 @@\n+2006-02-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/array (array<>::swap, assign): Implement.\n+\t* include/tr1/array (operator==, operator!=, operator<,\n+\toperator>, operator>=, operator<=, swap, get): Inline.\n+\t* testsuite/tr1/6_containers/array/requirements/member_swap.cc: New.\n+\t* testsuite/tr1/6_containers/array/requirements/assign.cc: Likewise.\n+\t* testsuite/tr1/6_containers/array/specialized_algorithms/swap.cc:\n+\tLikewise.\n+\n 2006-02-23  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* testsuite/22_locale/codecvt/in/wchar_t/1.cc (test01): Change int"}, {"sha": "9332efeb4ab5ef43c8522ac497ea3f72e664d0ab", "filename": "libstdc++-v3/include/tr1/array", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe7d885e0372313c064da69a2f6cee229aa0448/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe7d885e0372313c064da69a2f6cee229aa0448/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray?ref=ffe7d885e0372313c064da69a2f6cee229aa0448", "patch": "@@ -50,15 +50,15 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n   template<typename _Tp, std::size_t _Nm = 1>\n     struct array\n     {\n-      typedef _Tp \t    \t\t\tvalue_type;\n-      typedef value_type&                   \treference;\n-      typedef const value_type&             \tconst_reference;\n-      typedef value_type*          \t\titerator;\n-      typedef const value_type*\t\t\tconst_iterator;\n-      typedef std::size_t                    \tsize_type;\n-      typedef std::ptrdiff_t                   \tdifference_type;\n-      typedef std::reverse_iterator<iterator>\treverse_iterator;\n-      typedef std::reverse_iterator<const_iterator>\tconst_reverse_iterator;\n+      typedef _Tp \t    \t\t\t      value_type;\n+      typedef value_type&                   \t      reference;\n+      typedef const value_type&             \t      const_reference;\n+      typedef value_type*          \t\t      iterator;\n+      typedef const value_type*\t\t\t      const_iterator;\n+      typedef std::size_t                    \t      size_type;\n+      typedef std::ptrdiff_t                   \t      difference_type;\n+      typedef std::reverse_iterator<iterator>\t      reverse_iterator;\n+      typedef std::reverse_iterator<const_iterator>   const_reverse_iterator;\n \n       // Compile time constant without other dependencies.\n       enum { _S_index = _Nm };\n@@ -69,10 +69,12 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       // No explicit construct/copy/destroy for aggregate type.\n \n       void \n-      assign(const value_type& u); \n+      assign(const value_type& __u)\n+      { std::fill_n(begin(), size(), __u); }\n \n       void \n-      swap(array&);\n+      swap(array& __other)\n+      { std::swap_ranges(begin(), end(), __other.begin()); }\n \n       // Iterators.\n       iterator\n@@ -169,43 +171,43 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n   // Array comparisons.\n   template<typename _Tp, std::size_t _Nm>\n-    bool \n+    inline bool \n     operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n     { return std::equal(__one.begin(), __one.end(), __two.begin()); }\n \n   template<typename _Tp, std::size_t _Nm>\n-    bool \n+    inline bool\n     operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n     { return !(__one == __two); }\n \n   template<typename _Tp, std::size_t _Nm>\n-    bool \n+    inline bool\n     operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)\n     { \n       return std::lexicographical_compare(__a.begin(), __a.end(),\n \t\t\t\t\t  __b.begin(), __b.end()); \n     }\n \n   template<typename _Tp, std::size_t _Nm>\n-    bool \n+    inline bool\n     operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n     { return __two < __one; }\n \n   template<typename _Tp, std::size_t _Nm>\n-    bool \n+    inline bool\n     operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n     { return !(__one > __two); }\n \n   template<typename _Tp, std::size_t _Nm>\n-    bool \n+    inline bool\n     operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n     { return !(__one < __two); }\n \n   // Specialized algorithms [6.2.2.2].\n   template<typename _Tp, std::size_t _Nm>\n-    void\n+    inline void\n     swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)\n-    { swap_ranges(__one.begin(), __one.end(), __two.begin()); }\n+    { std::swap_ranges(__one.begin(), __one.end(), __two.begin()); }\n \n   // Tuple interface to class template array [6.2.2.5].\n   template<typename _Tp> class tuple_size;\n@@ -220,12 +222,12 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     { typedef _Tp type; };\n \n   template<int _Int, typename _Tp, std::size_t _Nm>\n-    _Tp&\n+    inline _Tp&\n     get(array<_Tp, _Nm>& __arr)\n     { return __arr[_Int]; }\n \n   template<int _Int, typename _Tp, std::size_t _Nm>\n-    const _Tp&\n+    inline const _Tp&\n     get(const array<_Tp, _Nm>& __arr)\n     { return __arr[_Int]; }\n "}, {"sha": "e65c54e9aeed85c848b1bb5f1649e8f35366e670", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/requirements/assign.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe7d885e0372313c064da69a2f6cee229aa0448/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fassign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe7d885e0372313c064da69a2f6cee229aa0448/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fassign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fassign.cc?ref=ffe7d885e0372313c064da69a2f6cee229aa0448", "patch": "@@ -0,0 +1,47 @@\n+// 2006-02-24  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+\n+  const size_t len = 3;\n+  typedef std::tr1::array<int, len> array_type;\n+\n+  array_type a = { 0, 1, 2 };\n+  const int value = 5;\n+\n+  a.assign(value);\n+  VERIFY( a[0] == value );\n+  VERIFY( a[1] == value );\n+  VERIFY( a[2] == value );  \n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3baa3cb2b3adfc1aa04b20e6647bf540f64882e7", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/requirements/member_swap.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe7d885e0372313c064da69a2f6cee229aa0448/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fmember_swap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe7d885e0372313c064da69a2f6cee229aa0448/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fmember_swap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Frequirements%2Fmember_swap.cc?ref=ffe7d885e0372313c064da69a2f6cee229aa0448", "patch": "@@ -0,0 +1,49 @@\n+// 2006-02-24  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.2.2 Class template array\n+\n+#include <tr1/array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+\n+  const size_t len = 5;\n+  typedef std::tr1::array<int, len> array_type;\n+\n+  array_type a = { 0, 1, 2, 3, 4 };\n+  const array_type a_ref = a;\n+\n+  array_type b = { 4, 3, 2, 1, 0 };\n+  const array_type b_ref = b;\n+\n+  a.swap(b);\n+  VERIFY( a == b_ref );\n+  VERIFY( b == a_ref );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6ec9968f4c750f270e0f2bed988fcaa4677181e0", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/specialized_algorithms/swap.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffe7d885e0372313c064da69a2f6cee229aa0448/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fspecialized_algorithms%2Fswap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffe7d885e0372313c064da69a2f6cee229aa0448/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fspecialized_algorithms%2Fswap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Fspecialized_algorithms%2Fswap.cc?ref=ffe7d885e0372313c064da69a2f6cee229aa0448", "patch": "@@ -0,0 +1,49 @@\n+// 2006-02-24  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 6.2.2.2  array specialized algorithms\n+\n+#include <tr1/array>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{ \n+  bool test __attribute__((unused)) = true;\n+\n+  const size_t len = 5;\n+  typedef std::tr1::array<int, len> array_type;\n+\n+  array_type a = { 0, 1, 2, 3, 4 };\n+  const array_type a_ref = a;\n+\n+  array_type b = { 4, 3, 2, 1, 0 };\n+  const array_type b_ref = b;\n+\n+  std::tr1::swap(a, b);\n+  VERIFY( a == b_ref );\n+  VERIFY( b == a_ref );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}