{"sha": "4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJjNjMxMzhiYzAxMjQ0YjFlYTBlYjA0ZmZiMGI2Mjg3MDg2NWEwZQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-10-10T13:47:14Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2016-10-10T13:47:14Z"}, "message": "[3/4] ARMv8.2-A testsuite for new vector intrinsics\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vdiv_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vfmas_lane_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vfmas_n_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmaxnmv_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmaxv_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vminnmv_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vminv_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmul_lane_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmulx_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmulx_lane_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmulx_n_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vpminmaxnm_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrndi_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vsqrt_f16_1.c: New.\n\nFrom-SVN: r240923", "tree": {"sha": "176b2195820297a41714347f397809a87b3aa166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/176b2195820297a41714347f397809a87b3aa166"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/comments", "author": null, "committer": null, "parents": [{"sha": "8f3edb0732491c053d821445c6ce46b1ca52b1a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f3edb0732491c053d821445c6ce46b1ca52b1a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f3edb0732491c053d821445c6ce46b1ca52b1a6"}], "stats": {"total": 3428, "additions": 3428, "deletions": 0}, "files": [{"sha": "e201cdc2126c324ace88f82bab4bb920dbc29a9f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "patch": "@@ -1,3 +1,20 @@\n+2016-10-10  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdiv_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vfmas_lane_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vfmas_n_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmaxnmv_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmaxv_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vminnmv_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vminv_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmul_lane_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmulx_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmulx_lane_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmulx_n_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vpminmaxnm_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrndi_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vsqrt_f16_1.c: New.\n+\n 2016-10-10  Jiong Wang  <jiong.wang@arm.com>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/arm-neon-ref.h (FP16_SUPPORTED):"}, {"sha": "c0103fb0bcf13bd950cc21e289d6243df5ccaf29", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdiv_f16_1.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdiv_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdiv_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdiv_f16_1.c?ref=4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define FP16_C(a) ((__fp16) a)\n+#define A FP16_C (13.4)\n+#define B FP16_C (-56.8)\n+#define C FP16_C (-34.8)\n+#define D FP16_C (12)\n+#define E FP16_C (63.1)\n+#define F FP16_C (19.1)\n+#define G FP16_C (-4.8)\n+#define H FP16_C (77)\n+\n+#define I FP16_C (0.7)\n+#define J FP16_C (-78)\n+#define K FP16_C (11.23)\n+#define L FP16_C (98)\n+#define M FP16_C (87.1)\n+#define N FP16_C (-8)\n+#define O FP16_C (-1.1)\n+#define P FP16_C (-9.7)\n+\n+/* Expected results for vdiv.  */\n+VECT_VAR_DECL (expected_div_static, hfloat, 16, 4) []\n+  = { 0x32CC /* A / E.  */, 0xC1F3 /* B / F.  */,\n+      0x4740 /* C / G.  */, 0x30FD /* D / H.  */ };\n+\n+VECT_VAR_DECL (expected_div_static, hfloat, 16, 8) []\n+  = { 0x32CC /* A / E.  */, 0xC1F3 /* B / F.  */,\n+      0x4740 /* C / G.  */, 0x30FD /* D / H.  */,\n+      0x201D /* I / M.  */, 0x48E0 /* J / N.  */,\n+      0xC91B /* K / O.  */, 0xC90D /* L / P.  */ };\n+\n+void exec_vdiv_f16 (void)\n+{\n+#undef TEST_MSG\n+#define TEST_MSG \"VDIV (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_1, float, 16, 4);\n+  DECL_VARIABLE(vsrc_2, float, 16, 4);\n+  VECT_VAR_DECL (buf_src_1, float, 16, 4) [] = {A, B, C, D};\n+  VECT_VAR_DECL (buf_src_2, float, 16, 4) [] = {E, F, G, H};\n+  VLOAD (vsrc_1, buf_src_1, , float, f, 16, 4);\n+  VLOAD (vsrc_2, buf_src_2, , float, f, 16, 4);\n+\n+  DECL_VARIABLE (vector_res, float, 16, 4)\n+    = vdiv_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\tVECT_VAR (vsrc_2, float, 16, 4));\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_div_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VDIVQ (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_1, float, 16, 8);\n+  DECL_VARIABLE(vsrc_2, float, 16, 8);\n+  VECT_VAR_DECL (buf_src_1, float, 16, 8) [] = {A, B, C, D, I, J, K, L};\n+  VECT_VAR_DECL (buf_src_2, float, 16, 8) [] = {E, F, G, H, M, N, O, P};\n+  VLOAD (vsrc_1, buf_src_1, q, float, f, 16, 8);\n+  VLOAD (vsrc_2, buf_src_2, q, float, f, 16, 8);\n+\n+  DECL_VARIABLE (vector_res, float, 16, 8)\n+    = vdivq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t VECT_VAR (vsrc_2, float, 16, 8));\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_div_static, \"\");\n+}\n+\n+int\n+main (void)\n+{\n+  exec_vdiv_f16 ();\n+  return 0;\n+}"}, {"sha": "00c95d3e28da16fe31fb20aeb0e3968eef198321", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vfmas_lane_f16_1.c", "status": "added", "additions": 908, "deletions": 0, "changes": 908, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfmas_lane_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfmas_lane_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfmas_lane_f16_1.c?ref=4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "patch": "@@ -0,0 +1,908 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define FP16_C(a) ((__fp16) a)\n+#define A0 FP16_C (123.4)\n+#define A1 FP16_C (-5.8)\n+#define A2 FP16_C (-0.0)\n+#define A3 FP16_C (10)\n+#define A4 FP16_C (123412.43)\n+#define A5 FP16_C (-5.8)\n+#define A6 FP16_C (90.8)\n+#define A7 FP16_C (24)\n+\n+#define B0 FP16_C (23.4)\n+#define B1 FP16_C (-5.8)\n+#define B2 FP16_C (8.9)\n+#define B3 FP16_C (4.0)\n+#define B4 FP16_C (3.4)\n+#define B5 FP16_C (-550.8)\n+#define B6 FP16_C (-31.8)\n+#define B7 FP16_C (20000.0)\n+\n+/* Expected results for vfma_lane.  */\n+VECT_VAR_DECL (expected0_static, hfloat, 16, 4) []\n+  = { 0x613E /* A0 + B0 * B0.  */,\n+      0xD86D /* A1 + B1 * B0.  */,\n+      0x5A82 /* A2 + B2 * B0.  */,\n+      0x567A /* A3 + B3 * B0.  */};\n+\n+VECT_VAR_DECL (expected1_static, hfloat, 16, 4) []\n+  = { 0xCA33 /* A0 + B0 * B1.  */,\n+      0x4EF6 /* A1 + B1 * B1.  */,\n+      0xD274 /* A2 + B2 * B1.  */,\n+      0xCA9A /* A3 + B3 * B1.  */ };\n+\n+VECT_VAR_DECL (expected2_static, hfloat, 16, 4) []\n+  = { 0x5D2F /* A0 + B0 * B2.  */,\n+      0xD32D /* A1 + B1 * B2.  */,\n+      0x54F3 /* A2 + B2 * B2.  */,\n+      0x51B3 /* A3 + B3 * B2.  */ };\n+\n+VECT_VAR_DECL (expected3_static, hfloat, 16, 4) []\n+  = { 0x5AC8 /* A0 + B0 * B3.  */,\n+      0xCF40 /* A1 + B1 * B3.  */,\n+      0x5073 /* A2 + B2 * B3.  */,\n+      0x4E80 /* A3 + B3 * B3.  */ };\n+\n+/* Expected results for vfmaq_lane.  */\n+VECT_VAR_DECL (expected0_static, hfloat, 16, 8) []\n+  = { 0x613E /* A0 + B0 * B0.  */,\n+      0xD86D /* A1 + B1 * B0.  */,\n+      0x5A82 /* A2 + B2 * B0.  */,\n+      0x567A /* A3 + B3 * B0.  */,\n+      0x7C00 /* A4 + B4 * B0.  */,\n+      0xF24D /* A5 + B5 * B0.  */,\n+      0xE11B /* A6 + B6 * B0.  */,\n+      0x7C00 /* A7 + B7 * B0.  */ };\n+\n+VECT_VAR_DECL (expected1_static, hfloat, 16, 8) []\n+  = { 0xCA33 /* A0 + B0 * B1.  */,\n+      0x4EF6 /* A1 + B1 * B1.  */,\n+      0xD274 /* A2 + B2 * B1.  */,\n+      0xCA9A /* A3 + B3 * B1.  */,\n+      0x7C00 /* A4 + B4 * B1.  */,\n+      0x6A3B /* A5 + B5 * B1.  */,\n+      0x5C4D /* A6 + B6 * B1.  */,\n+      0xFC00 /* A7 + B7 * B1.  */ };\n+\n+VECT_VAR_DECL (expected2_static, hfloat, 16, 8) []\n+  = { 0x5D2F /* A0 + B0 * B2.  */,\n+      0xD32D /* A1 + B1 * B2.  */,\n+      0x54F3 /* A2 + B2 * B2.  */,\n+      0x51B3 /* A3 + B3 * B2.  */,\n+      0x7C00 /* A4 + B4 * B2.  */,\n+      0xECCB /* A5 + B5 * B2.  */,\n+      0xDA01 /* A6 + B6 * B2.  */,\n+      0x7C00 /* A7 + B7 * B2.  */ };\n+\n+VECT_VAR_DECL (expected3_static, hfloat, 16, 8) []\n+  = { 0x5AC8 /* A0 + B0 * B3.  */,\n+      0xCF40 /* A1 + B1 * B3.  */,\n+      0x5073 /* A2 + B2 * B3.  */,\n+      0x4E80 /* A3 + B3 * B3.  */,\n+      0x7C00 /* A4 + B4 * B3.  */,\n+      0xE851 /* A5 + B5 * B3.  */,\n+      0xD08C /* A6 + B6 * B3.  */,\n+      0x7C00 /* A7 + B7 * B3.  */ };\n+\n+/* Expected results for vfma_laneq.  */\n+VECT_VAR_DECL (expected0_laneq_static, hfloat, 16, 4) []\n+  = { 0x613E /* A0 + B0 * B0.  */,\n+      0xD86D /* A1 + B1 * B0.  */,\n+      0x5A82 /* A2 + B2 * B0.  */,\n+      0x567A /* A3 + B3 * B0.  */ };\n+\n+VECT_VAR_DECL (expected1_laneq_static, hfloat, 16, 4) []\n+  = { 0xCA33 /* A0 + B0 * B1.  */,\n+      0x4EF6 /* A1 + B1 * B1.  */,\n+      0xD274 /* A2 + B2 * B1.  */,\n+      0xCA9A /* A3 + B3 * B1.  */ };\n+\n+VECT_VAR_DECL (expected2_laneq_static, hfloat, 16, 4) []\n+  = { 0x5D2F /* A0 + B0 * B2.  */,\n+      0xD32D /* A1 + B1 * B2.  */,\n+      0x54F3 /* A2 + B2 * B2.  */,\n+      0x51B3 /* A3 + B3 * B2.  */ };\n+\n+VECT_VAR_DECL (expected3_laneq_static, hfloat, 16, 4) []\n+  = { 0x5AC8 /* A0 + B0 * B3.  */,\n+      0xCF40 /* A1 + B1 * B3.  */,\n+      0x5073 /* A2 + B2 * B3.  */,\n+      0x4E80 /* A3 + B3 * B3.  */ };\n+\n+VECT_VAR_DECL (expected4_laneq_static, hfloat, 16, 4) []\n+  = { 0x5A58 /* A0 + B0 * B4.  */,\n+      0xCE62 /* A1 + B1 * B4.  */,\n+      0x4F91 /* A2 + B2 * B4.  */,\n+      0x4DE6 /* A3 + B3 * B4.  */ };\n+\n+VECT_VAR_DECL (expected5_laneq_static, hfloat, 16, 4) []\n+  = { 0xF23D /* A0 + B0 * B5.  */,\n+      0x6A3B /* A1 + B1 * B5.  */,\n+      0xECCA /* A2 + B2 * B5.  */,\n+      0xE849 /* A3 + B3 * B5.  */ };\n+\n+VECT_VAR_DECL (expected6_laneq_static, hfloat, 16, 4) []\n+  = { 0xE0DA /* A0 + B0 * B6.  */,\n+      0x5995 /* A1 + B1 * B6.  */,\n+      0xDC6C /* A2 + B2 * B6.  */,\n+      0xD753 /* A3 + B3 * B6.  */ };\n+\n+VECT_VAR_DECL (expected7_laneq_static, hfloat, 16, 4) []\n+  = { 0x7C00 /* A0 + B0 * B7.  */,\n+      0xFC00 /* A1 + B1 * B7.  */,\n+      0x7C00 /* A2 + B2 * B7.  */,\n+      0x7C00 /* A3 + B3 * B7.  */ };\n+\n+/* Expected results for vfmaq_laneq.  */\n+VECT_VAR_DECL (expected0_laneq_static, hfloat, 16, 8) []\n+  = { 0x613E /* A0 + B0 * B0.  */,\n+      0xD86D /* A1 + B1 * B0.  */,\n+      0x5A82 /* A2 + B2 * B0.  */,\n+      0x567A /* A3 + B3 * B0.  */,\n+      0x7C00 /* A4 + B4 * B0.  */,\n+      0xF24D /* A5 + B5 * B0.  */,\n+      0xE11B /* A6 + B6 * B0.  */,\n+      0x7C00 /* A7 + B7 * B0.  */ };\n+\n+VECT_VAR_DECL (expected1_laneq_static, hfloat, 16, 8) []\n+  = { 0xCA33 /* A0 + B0 * B1.  */,\n+      0x4EF6 /* A1 + B1 * B1.  */,\n+      0xD274 /* A2 + B2 * B1.  */,\n+      0xCA9A /* A3 + B3 * B1.  */,\n+      0x7C00 /* A4 + B4 * B1.  */,\n+      0x6A3B /* A5 + B5 * B1.  */,\n+      0x5C4D /* A6 + B6 * B1.  */,\n+      0xFC00 /* A7 + B7 * B1.  */ };\n+\n+VECT_VAR_DECL (expected2_laneq_static, hfloat, 16, 8) []\n+  = { 0x5D2F /* A0 + B0 * B2.  */,\n+      0xD32D /* A1 + B1 * B2.  */,\n+      0x54F3 /* A2 + B2 * B2.  */,\n+      0x51B3 /* A3 + B3 * B2.  */,\n+      0x7C00 /* A4 + B4 * B2.  */,\n+      0xECCB /* A5 + B5 * B2.  */,\n+      0xDA01 /* A6 + B6 * B2.  */,\n+      0x7C00 /* A7 + B7 * B2.  */ };\n+\n+VECT_VAR_DECL (expected3_laneq_static, hfloat, 16, 8) []\n+  = { 0x5AC8 /* A0 + B0 * B3.  */,\n+      0xCF40 /* A1 + B1 * B3.  */,\n+      0x5073 /* A2 + B2 * B3.  */,\n+      0x4E80 /* A3 + B3 * B3.  */,\n+      0x7C00 /* A4 + B4 * B3.  */,\n+      0xE851 /* A5 + B5 * B3.  */,\n+      0xD08C /* A6 + B6 * B3.  */,\n+      0x7C00 /* A7 + B7 * B3.  */ };\n+\n+VECT_VAR_DECL (expected4_laneq_static, hfloat, 16, 8) []\n+  = { 0x5A58 /* A0 + B0 * B4.  */,\n+      0xCE62 /* A1 + B1 * B4.  */,\n+      0x4F91 /* A2 + B2 * B4.  */,\n+      0x4DE6 /* A3 + B3 * B4.  */,\n+      0x7C00 /* A4 + B4 * B4.  */,\n+      0xE757 /* A5 + B5 * B4.  */,\n+      0xCC54 /* A6 + B6 * B4.  */,\n+      0x7C00 /* A7 + B7 * B4.  */ };\n+\n+VECT_VAR_DECL (expected5_laneq_static, hfloat, 16, 8) []\n+  = { 0xF23D /* A0 + B0 * B5.  */,\n+      0x6A3B /* A1 + B1 * B5.  */,\n+      0xECCA /* A2 + B2 * B5.  */,\n+      0xE849 /* A3 + B3 * B5.  */,\n+      0x7C00 /* A4 + B4 * B5.  */,\n+      0x7C00 /* A5 + B5 * B5.  */,\n+      0x744D /* A6 + B6 * B5.  */,\n+      0xFC00 /* A7 + B7 * B5.  */ };\n+\n+VECT_VAR_DECL (expected6_laneq_static, hfloat, 16, 8) []\n+  = { 0xE0DA /* A0 + B0 * B6.  */,\n+      0x5995 /* A1 + B1 * B6.  */,\n+      0xDC6C /* A2 + B2 * B6.  */,\n+      0xD753 /* A3 + B3 * B6.  */,\n+      0x7C00 /* A4 + B4 * B6.  */,\n+      0x7447 /* A5 + B5 * B6.  */,\n+      0x644E /* A6 + B6 * B6.  */,\n+      0xFC00 /* A7 + B7 * B6.  */ };\n+\n+VECT_VAR_DECL (expected7_laneq_static, hfloat, 16, 8) []\n+  = { 0x7C00 /* A0 + B0 * B7.  */,\n+      0xFC00 /* A1 + B1 * B7.  */,\n+      0x7C00 /* A2 + B2 * B7.  */,\n+      0x7C00 /* A3 + B3 * B7.  */,\n+      0x7C00 /* A4 + B4 * B7.  */,\n+      0xFC00 /* A5 + B5 * B7.  */,\n+      0xFC00 /* A6 + B6 * B7.  */,\n+      0x7C00 /* A7 + B7 * B7.  */ };\n+\n+/* Expected results for vfms_lane.  */\n+VECT_VAR_DECL (expected0_fms_static, hfloat, 16, 4) []\n+  = { 0xDEA2 /* A0 + (-B0) * B0.  */,\n+      0x5810 /* A1 + (-B1) * B0.  */,\n+      0xDA82 /* A2 + (-B2) * B0.  */,\n+      0xD53A /* A3 + (-B3) * B0.  */ };\n+\n+VECT_VAR_DECL (expected1_fms_static, hfloat, 16, 4) []\n+  = { 0x5C0D /* A0 + (-B0) * B1.  */,\n+      0xD0EE /* A1 + (-B1) * B1.  */,\n+      0x5274 /* A2 + (-B2) * B1.  */,\n+      0x5026 /* A3 + (-B3) * B1.  */ };\n+\n+VECT_VAR_DECL (expected2_fms_static, hfloat, 16, 4) []\n+  = { 0xD54E /* A0 + (-B0) * B2.  */,\n+      0x51BA /* A1 + (-B1) * B2.  */,\n+      0xD4F3 /* A2 + (-B2) * B2.  */,\n+      0xCE66 /* A3 + (-B3) * B2.  */ };\n+\n+VECT_VAR_DECL (expected3_fms_static, hfloat, 16, 4) []\n+  = { 0x4F70 /* A0 + (-B0) * B3.  */,\n+      0x4C5A /* A1 + (-B1) * B3.  */,\n+      0xD073 /* A2 + (-B2) * B3.  */,\n+      0xC600 /* A3 + (-B3) * B3.  */ };\n+\n+/* Expected results for vfmsq_lane.  */\n+VECT_VAR_DECL (expected0_fms_static, hfloat, 16, 8) []\n+  = { 0xDEA2 /* A0 + (-B0) * B0.  */,\n+      0x5810 /* A1 + (-B1) * B0.  */,\n+      0xDA82 /* A2 + (-B2) * B0.  */,\n+      0xD53A /* A3 + (-B3) * B0.  */,\n+      0x7C00 /* A4 + (-B4) * B0.  */,\n+      0x724B /* A5 + (-B5) * B0.  */,\n+      0x6286 /* A6 + (-B6) * B0.  */,\n+      0xFC00 /* A7 + (-B7) * B0.  */ };\n+\n+VECT_VAR_DECL (expected1_fms_static, hfloat, 16, 8) []\n+  = { 0x5C0D /* A0 + (-B0) * B1.  */,\n+      0xD0EE /* A1 + (-B1) * B1.  */,\n+      0x5274 /* A2 + (-B2) * B1.  */,\n+      0x5026 /* A3 + (-B3) * B1.  */,\n+      0x7C00 /* A4 + (-B4) * B1.  */,\n+      0xEA41 /* A5 + (-B5) * B1.  */,\n+      0xD5DA /* A6 + (-B6) * B1.  */,\n+      0x7C00 /* A7 + (-B7) * B1.  */ };\n+\n+VECT_VAR_DECL (expected2_fms_static, hfloat, 16, 8) []\n+  = { 0xD54E /* A0 + (-B0) * B2.  */,\n+      0x51BA /* A1 + (-B1) * B2.  */,\n+      0xD4F3 /* A2 + (-B2) * B2.  */,\n+      0xCE66 /* A3 + (-B3) * B2.  */,\n+      0x7C00 /* A4 + (-B4) * B2.  */,\n+      0x6CC8 /* A5 + (-B5) * B2.  */,\n+      0x5DD7 /* A6 + (-B6) * B2.  */,\n+      0xFC00 /* A7 + (-B7) * B2.  */ };\n+\n+VECT_VAR_DECL (expected3_fms_static, hfloat, 16, 8) []\n+  = { 0x4F70 /* A0 + (-B0) * B3.  */,\n+      0x4C5A /* A1 + (-B1) * B3.  */,\n+      0xD073 /* A2 + (-B2) * B3.  */,\n+      0xC600 /* A3 + (-B3) * B3.  */,\n+      0x7C00 /* A4 + (-B4) * B3.  */,\n+      0x684B /* A5 + (-B5) * B3.  */,\n+      0x5AD0 /* A6 + (-B6) * B3.  */,\n+      0xFC00 /* A7 + (-B7) * B3.  */ };\n+\n+/* Expected results for vfms_laneq.  */\n+VECT_VAR_DECL (expected0_fms_laneq_static, hfloat, 16, 4) []\n+  = { 0xDEA2 /* A0 + (-B0) * B0.  */,\n+      0x5810 /* A1 + (-B1) * B0.  */,\n+      0xDA82 /* A2 + (-B2) * B0.  */,\n+      0xD53A /* A3 + (-B3) * B0.  */ };\n+\n+VECT_VAR_DECL (expected1_fms_laneq_static, hfloat, 16, 4) []\n+  = { 0x5C0D /* A0 + (-B0) * B1.  */,\n+      0xD0EE /* A1 + (-B1) * B1.  */,\n+      0x5274 /* A2 + (-B2) * B1.  */,\n+      0x5026 /* A3 + (-B3) * B1.  */ };\n+\n+VECT_VAR_DECL (expected2_fms_laneq_static, hfloat, 16, 4) []\n+  = { 0xD54E /* A0 + (-B0) * B2.  */,\n+      0x51BA /* A1 + (-B1) * B2.  */,\n+      0xD4F3 /* A2 + (-B2) * B2.  */,\n+      0xCE66 /* A3 + (-B3) * B2.  */ };\n+\n+VECT_VAR_DECL (expected3_fms_laneq_static, hfloat, 16, 4) []\n+  = { 0x4F70 /* A0 + (-B0) * B3.  */,\n+      0x4C5A /* A1 + (-B1) * B3.  */,\n+      0xD073 /* A2 + (-B2) * B3.  */,\n+      0xC600 /* A3 + (-B3) * B3.  */ };\n+\n+VECT_VAR_DECL (expected4_fms_laneq_static, hfloat, 16, 4) []\n+  = { 0x5179 /* A0 + (-B0) * B4.  */,\n+      0x4AF6 /* A1 + (-B1) * B4.  */,\n+      0xCF91 /* A2 + (-B2) * B4.  */,\n+      0xC334 /* A3 + (-B3) * B4.  */ };\n+\n+VECT_VAR_DECL (expected5_fms_laneq_static, hfloat, 16, 4) []\n+  = { 0x725C /* A0 + (-B0) * B5.  */,\n+      0xEA41 /* A1 + (-B1) * B5.  */,\n+      0x6CCA /* A2 + (-B2) * B5.  */,\n+      0x6853 /* A3 + (-B3) * B5.  */ };\n+\n+VECT_VAR_DECL (expected6_fms_laneq_static, hfloat, 16, 4) []\n+  = { 0x62C7 /* A0 + (-B0) * B6.  */,\n+      0xD9F2 /* A1 + (-B1) * B6.  */,\n+      0x5C6C /* A2 + (-B2) * B6.  */,\n+      0x584A /* A3 + (-B3) * B6.  */ };\n+\n+VECT_VAR_DECL (expected7_fms_laneq_static, hfloat, 16, 4) []\n+  = { 0xFC00 /* A0 + (-B0) * B7.  */,\n+      0x7C00 /* A1 + (-B1) * B7.  */,\n+      0xFC00 /* A2 + (-B2) * B7.  */,\n+      0xFC00 /* A3 + (-B3) * B7.  */ };\n+\n+/* Expected results for vfmsq_laneq.  */\n+VECT_VAR_DECL (expected0_fms_laneq_static, hfloat, 16, 8) []\n+  = { 0xDEA2 /* A0 + (-B0) * B0.  */,\n+      0x5810 /* A1 + (-B1) * B0.  */,\n+      0xDA82 /* A2 + (-B2) * B0.  */,\n+      0xD53A /* A3 + (-B3) * B0.  */,\n+      0x7C00 /* A4 + (-B4) * B0.  */,\n+      0x724B /* A5 + (-B5) * B0.  */,\n+      0x6286 /* A6 + (-B6) * B0.  */,\n+      0xFC00 /* A7 + (-B7) * B0.  */ };\n+\n+VECT_VAR_DECL (expected1_fms_laneq_static, hfloat, 16, 8) []\n+  = { 0x5C0D /* A0 + (-B0) * B1.  */,\n+      0xD0EE /* A1 + (-B1) * B1.  */,\n+      0x5274 /* A2 + (-B2) * B1.  */,\n+      0x5026 /* A3 + (-B3) * B1.  */,\n+      0x7C00 /* A4 + (-B4) * B1.  */,\n+      0xEA41 /* A5 + (-B5) * B1.  */,\n+      0xD5DA /* A6 + (-B6) * B1.  */,\n+      0x7C00 /* A7 + (-B7) * B1.  */ };\n+\n+VECT_VAR_DECL (expected2_fms_laneq_static, hfloat, 16, 8) []\n+  = { 0xD54E /* A0 + (-B0) * B2.  */,\n+      0x51BA /* A1 + (-B1) * B2.  */,\n+      0xD4F3 /* A2 + (-B2) * B2.  */,\n+      0xCE66 /* A3 + (-B3) * B2.  */,\n+      0x7C00 /* A4 + (-B4) * B2.  */,\n+      0x6CC8 /* A5 + (-B5) * B2.  */,\n+      0x5DD7 /* A6 + (-B6) * B2.  */,\n+      0xFC00 /* A7 + (-B7) * B2.  */ };\n+\n+VECT_VAR_DECL (expected3_fms_laneq_static, hfloat, 16, 8) []\n+  = { 0x4F70 /* A0 + (-B0) * B3.  */,\n+      0x4C5A /* A1 + (-B1) * B3.  */,\n+      0xD073 /* A2 + (-B2) * B3.  */,\n+      0xC600 /* A3 + (-B3) * B3.  */,\n+      0x7C00 /* A4 + (-B4) * B3.  */,\n+      0x684B /* A5 + (-B5) * B3.  */,\n+      0x5AD0 /* A6 + (-B6) * B3.  */,\n+      0xFC00 /* A7 + (-B7) * B3.  */ };\n+\n+VECT_VAR_DECL (expected4_fms_laneq_static, hfloat, 16, 8) []\n+  = { 0x5179 /* A0 + (-B0) * B4.  */,\n+      0x4AF6 /* A1 + (-B1) * B4.  */,\n+      0xCF91 /* A2 + (-B2) * B4.  */,\n+      0xC334 /* A3 + (-B3) * B4.  */,\n+      0x7C00 /* A4 + (-B4) * B4.  */,\n+      0x674C /* A5 + (-B5) * B4.  */,\n+      0x5A37 /* A6 + (-B6) * B4.  */,\n+      0xFC00 /* A7 + (-B7) * B4.  */ };\n+\n+VECT_VAR_DECL (expected5_fms_laneq_static, hfloat, 16, 8) []\n+  = { 0x725C /* A0 + (-B0) * B5.  */,\n+      0xEA41 /* A1 + (-B1) * B5.  */,\n+      0x6CCA /* A2 + (-B2) * B5.  */,\n+      0x6853 /* A3 + (-B3) * B5.  */,\n+      0x7C00 /* A4 + (-B4) * B5.  */,\n+      0xFC00 /* A5 + (-B5) * B5.  */,\n+      0xF441 /* A6 + (-B6) * B5.  */,\n+      0x7C00 /* A7 + (-B7) * B5.  */ };\n+\n+VECT_VAR_DECL (expected6_fms_laneq_static, hfloat, 16, 8) []\n+  = { 0x62C7 /* A0 + (-B0) * B6.  */,\n+      0xD9F2 /* A1 + (-B1) * B6.  */,\n+      0x5C6C /* A2 + (-B2) * B6.  */,\n+      0x584A /* A3 + (-B3) * B6.  */,\n+      0x7C00 /* A4 + (-B4) * B6.  */,\n+      0xF447 /* A5 + (-B5) * B6.  */,\n+      0xE330 /* A6 + (-B6) * B6.  */,\n+      0x7C00 /* A7 + (-B7) * B6.  */ };\n+\n+VECT_VAR_DECL (expected7_fms_laneq_static, hfloat, 16, 8) []\n+  = { 0xFC00 /* A0 + (-B0) * B7.  */,\n+      0x7C00 /* A1 + (-B1) * B7.  */,\n+      0xFC00 /* A2 + (-B2) * B7.  */,\n+      0xFC00 /* A3 + (-B3) * B7.  */,\n+      0x7C00 /* A4 + (-B4) * B7.  */,\n+      0x7C00 /* A5 + (-B5) * B7.  */,\n+      0x7C00 /* A6 + (-B6) * B7.  */,\n+      0xFC00 /* A7 + (-B7) * B7.  */ };\n+\n+void exec_vfmas_lane_f16 (void)\n+{\n+#undef TEST_MSG\n+#define TEST_MSG \"VFMA_LANE (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_1, float, 16, 4);\n+  DECL_VARIABLE(vsrc_2, float, 16, 4);\n+  VECT_VAR_DECL (buf_src_1, float, 16, 4) [] = {A0, A1, A2, A3};\n+  VECT_VAR_DECL (buf_src_2, float, 16, 4) [] = {B0, B1, B2, B3};\n+  VLOAD (vsrc_1, buf_src_1, , float, f, 16, 4);\n+  VLOAD (vsrc_2, buf_src_2, , float, f, 16, 4);\n+  DECL_VARIABLE (vector_res, float, 16, 4)\n+    = vfma_lane_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t     VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t     VECT_VAR (vsrc_2, float, 16, 4), 0);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected0_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfma_lane_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t     VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t     VECT_VAR (vsrc_2, float, 16, 4), 1);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected1_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfma_lane_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t     VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t     VECT_VAR (vsrc_2, float, 16, 4), 2);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected2_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfma_lane_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t     VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t     VECT_VAR (vsrc_2, float, 16, 4), 3);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected3_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VFMAQ_LANE (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_1, float, 16, 8);\n+  DECL_VARIABLE(vsrc_2, float, 16, 8);\n+  VECT_VAR_DECL (buf_src_1, float, 16, 8) [] = {A0, A1, A2, A3, A4, A5, A6, A7};\n+  VECT_VAR_DECL (buf_src_2, float, 16, 8) [] = {B0, B1, B2, B3, B4, B5, B6, B7};\n+  VLOAD (vsrc_1, buf_src_1, q, float, f, 16, 8);\n+  VLOAD (vsrc_2, buf_src_2, q, float, f, 16, 8);\n+  DECL_VARIABLE (vector_res, float, 16, 8)\n+    = vfmaq_lane_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4), 0);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected0_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmaq_lane_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4), 1);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected1_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmaq_lane_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4), 2);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected2_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmaq_lane_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4), 3);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected3_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VFMA_LANEQ (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_3, float, 16, 8);\n+  VECT_VAR_DECL (buf_src_3, float, 16, 8) [] = {B0, B1, B2, B3, B4, B5, B6, B7};\n+  VLOAD (vsrc_3, buf_src_3, q, float, f, 16, 8);\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfma_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_3, float, 16, 8), 0);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected0_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfma_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_3, float, 16, 8), 1);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected1_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfma_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_3, float, 16, 8), 2);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected2_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfma_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_3, float, 16, 8), 3);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected3_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfma_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_3, float, 16, 8), 4);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected4_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfma_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_3, float, 16, 8), 5);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected5_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfma_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_3, float, 16, 8), 6);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected6_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfma_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_3, float, 16, 8), 7);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected7_laneq_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VFMAQ_LANEQ (FP16)\"\n+  clean_results ();\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmaq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_3, float, 16, 8), 0);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected0_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmaq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_3, float, 16, 8), 1);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected1_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmaq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_3, float, 16, 8), 2);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected2_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmaq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_3, float, 16, 8), 3);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected3_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmaq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_3, float, 16, 8), 4);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected4_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmaq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_3, float, 16, 8), 5);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected5_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmaq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_3, float, 16, 8), 6);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected6_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmaq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_3, float, 16, 8), 7);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected7_laneq_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VFMS_LANE (FP16)\"\n+  clean_results ();\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfms_lane_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t     VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t     VECT_VAR (vsrc_2, float, 16, 4), 0);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected0_fms_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfms_lane_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t     VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t     VECT_VAR (vsrc_2, float, 16, 4), 1);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected1_fms_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfms_lane_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t     VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t     VECT_VAR (vsrc_2, float, 16, 4), 2);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected2_fms_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfms_lane_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t     VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t     VECT_VAR (vsrc_2, float, 16, 4), 3);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected3_fms_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VFMSQ_LANE (FP16)\"\n+  clean_results ();\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmsq_lane_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4), 0);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected0_fms_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmsq_lane_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4), 1);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected1_fms_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmsq_lane_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4), 2);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected2_fms_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmsq_lane_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4), 3);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected3_fms_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VFMS_LANEQ (FP16)\"\n+  clean_results ();\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfms_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_3, float, 16, 8), 0);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected0_fms_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfms_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_3, float, 16, 8), 1);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected1_fms_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfms_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_3, float, 16, 8), 2);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected2_fms_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfms_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_3, float, 16, 8), 3);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected3_fms_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfms_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_3, float, 16, 8), 4);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected4_fms_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfms_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_3, float, 16, 8), 5);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected5_fms_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfms_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_3, float, 16, 8), 6);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected6_fms_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfms_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_3, float, 16, 8), 7);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected7_fms_laneq_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VFMSQ_LANEQ (FP16)\"\n+  clean_results ();\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmsq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_3, float, 16, 8), 0);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected0_fms_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmsq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_3, float, 16, 8), 1);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected1_fms_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmsq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_3, float, 16, 8), 2);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected2_fms_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmsq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_3, float, 16, 8), 3);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected3_fms_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmsq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_3, float, 16, 8), 4);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected4_fms_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmsq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_3, float, 16, 8), 5);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected5_fms_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmsq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_3, float, 16, 8), 6);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected6_fms_laneq_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmsq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_3, float, 16, 8), 7);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected7_fms_laneq_static, \"\");\n+}\n+\n+int\n+main (void)\n+{\n+  exec_vfmas_lane_f16 ();\n+  return 0;\n+}"}, {"sha": "f01aefb51adedba0768cac484531e5c58758fdfd", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vfmas_n_f16_1.c", "status": "added", "additions": 469, "deletions": 0, "changes": 469, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfmas_n_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfmas_n_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfmas_n_f16_1.c?ref=4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "patch": "@@ -0,0 +1,469 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define FP16_C(a) ((__fp16) a)\n+#define A0 FP16_C (123.4)\n+#define A1 FP16_C (-5.8)\n+#define A2 FP16_C (-0.0)\n+#define A3 FP16_C (10)\n+#define A4 FP16_C (123412.43)\n+#define A5 FP16_C (-5.8)\n+#define A6 FP16_C (90.8)\n+#define A7 FP16_C (24)\n+\n+#define B0 FP16_C (23.4)\n+#define B1 FP16_C (-5.8)\n+#define B2 FP16_C (8.9)\n+#define B3 FP16_C (4.0)\n+#define B4 FP16_C (3.4)\n+#define B5 FP16_C (-550.8)\n+#define B6 FP16_C (-31.8)\n+#define B7 FP16_C (20000.0)\n+\n+/* Expected results for vfma_n.  */\n+VECT_VAR_DECL (expected_fma0_static, hfloat, 16, 4) []\n+  = { 0x613E /* A0 + B0 * B0.  */,\n+      0xD86D /* A1 + B1 * B0.  */,\n+      0x5A82 /* A2 + B2 * B0.  */,\n+      0x567A /* A3 + B3 * B0.  */ };\n+\n+VECT_VAR_DECL (expected_fma1_static, hfloat, 16, 4) []\n+  = { 0xCA33 /* A0 + B0 * B1.  */,\n+      0x4EF6 /* A1 + B1 * B1.  */,\n+      0xD274 /* A2 + B2 * B1.  */,\n+      0xCA9A /* A3 + B3 * B1.  */ };\n+\n+VECT_VAR_DECL (expected_fma2_static, hfloat, 16, 4) []\n+  = { 0x5D2F /* A0 + B0 * B2.  */,\n+      0xD32D /* A1 + B1 * B2.  */,\n+      0x54F3 /* A2 + B2 * B2.  */,\n+      0x51B3 /* A3 + B3 * B2.  */ };\n+\n+VECT_VAR_DECL (expected_fma3_static, hfloat, 16, 4) []\n+  = { 0x5AC8 /* A0 + B0 * B3.  */,\n+      0xCF40 /* A1 + B1 * B3.  */,\n+      0x5073 /* A2 + B2 * B3.  */,\n+      0x4E80 /* A3 + B3 * B3.  */ };\n+\n+VECT_VAR_DECL (expected_fma0_static, hfloat, 16, 8) []\n+  = { 0x613E /* A0 + B0 * B0.  */,\n+      0xD86D /* A1 + B1 * B0.  */,\n+      0x5A82 /* A2 + B2 * B0.  */,\n+      0x567A /* A3 + B3 * B0.  */,\n+      0x7C00 /* A4 + B4 * B0.  */,\n+      0xF24D /* A5 + B5 * B0.  */,\n+      0xE11B /* A6 + B6 * B0.  */,\n+      0x7C00 /* A7 + B7 * B0.  */ };\n+\n+VECT_VAR_DECL (expected_fma1_static, hfloat, 16, 8) []\n+  = { 0xCA33 /* A0 + B0 * B1.  */,\n+      0x4EF6 /* A1 + B1 * B1.  */,\n+      0xD274 /* A2 + B2 * B1.  */,\n+      0xCA9A /* A3 + B3 * B1.  */,\n+      0x7C00 /* A4 + B4 * B1.  */,\n+      0x6A3B /* A5 + B5 * B1.  */,\n+      0x5C4D /* A6 + B6 * B1.  */,\n+      0xFC00 /* A7 + B7 * B1.  */ };\n+\n+VECT_VAR_DECL (expected_fma2_static, hfloat, 16, 8) []\n+  = { 0x5D2F /* A0 + B0 * B2.  */,\n+      0xD32D /* A1 + B1 * B2.  */,\n+      0x54F3 /* A2 + B2 * B2.  */,\n+      0x51B3 /* A3 + B3 * B2.  */,\n+      0x7C00 /* A4 + B4 * B2.  */,\n+      0xECCB /* A5 + B5 * B2.  */,\n+      0xDA01 /* A6 + B6 * B2.  */,\n+      0x7C00 /* A7 + B7 * B2.  */ };\n+\n+VECT_VAR_DECL (expected_fma3_static, hfloat, 16, 8) []\n+  = { 0x5AC8 /* A0 + B0 * B3.  */,\n+      0xCF40 /* A1 + B1 * B3.  */,\n+      0x5073 /* A2 + B2 * B3.  */,\n+      0x4E80 /* A3 + B3 * B3.  */,\n+      0x7C00 /* A4 + B4 * B3.  */,\n+      0xE851 /* A5 + B5 * B3.  */,\n+      0xD08C /* A6 + B6 * B3.  */,\n+      0x7C00 /* A7 + B7 * B3.  */ };\n+\n+VECT_VAR_DECL (expected_fma4_static, hfloat, 16, 8) []\n+  = { 0x5A58 /* A0 + B0 * B4.  */,\n+      0xCE62 /* A1 + B1 * B4.  */,\n+      0x4F91 /* A2 + B2 * B4.  */,\n+      0x4DE6 /* A3 + B3 * B4.  */,\n+      0x7C00 /* A4 + B4 * B4.  */,\n+      0xE757 /* A5 + B5 * B4.  */,\n+      0xCC54 /* A6 + B6 * B4.  */,\n+      0x7C00 /* A7 + B7 * B4.  */ };\n+\n+VECT_VAR_DECL (expected_fma5_static, hfloat, 16, 8) []\n+  = { 0xF23D /* A0 + B0 * B5.  */,\n+      0x6A3B /* A1 + B1 * B5.  */,\n+      0xECCA /* A2 + B2 * B5.  */,\n+      0xE849 /* A3 + B3 * B5.  */,\n+      0x7C00 /* A4 + B4 * B5.  */,\n+      0x7C00 /* A5 + B5 * B5.  */,\n+      0x744D /* A6 + B6 * B5.  */,\n+      0xFC00 /* A7 + B7 * B5.  */ };\n+\n+VECT_VAR_DECL (expected_fma6_static, hfloat, 16, 8) []\n+  = { 0xE0DA /* A0 + B0 * B6.  */,\n+      0x5995 /* A1 + B1 * B6.  */,\n+      0xDC6C /* A2 + B2 * B6.  */,\n+      0xD753 /* A3 + B3 * B6.  */,\n+      0x7C00 /* A4 + B4 * B6.  */,\n+      0x7447 /* A5 + B5 * B6.  */,\n+      0x644E /* A6 + B6 * B6.  */,\n+      0xFC00 /* A7 + B7 * B6.  */ };\n+\n+VECT_VAR_DECL (expected_fma7_static, hfloat, 16, 8) []\n+  = { 0x7C00 /* A0 + B0 * B7.  */,\n+      0xFC00 /* A1 + B1 * B7.  */,\n+      0x7C00 /* A2 + B2 * B7.  */,\n+      0x7C00 /* A3 + B3 * B7.  */,\n+      0x7C00 /* A4 + B4 * B7.  */,\n+      0xFC00 /* A5 + B5 * B7.  */,\n+      0xFC00 /* A6 + B6 * B7.  */,\n+      0x7C00 /* A7 + B7 * B7.  */ };\n+\n+/* Expected results for vfms_n.  */\n+VECT_VAR_DECL (expected_fms0_static, hfloat, 16, 4) []\n+  = { 0xDEA2 /* A0 + (-B0) * B0.  */,\n+      0x5810 /* A1 + (-B1) * B0.  */,\n+      0xDA82 /* A2 + (-B2) * B0.  */,\n+      0xD53A /* A3 + (-B3) * B0.  */ };\n+\n+VECT_VAR_DECL (expected_fms1_static, hfloat, 16, 4) []\n+  = { 0x5C0D /* A0 + (-B0) * B1.  */,\n+      0xD0EE /* A1 + (-B1) * B1.  */,\n+      0x5274 /* A2 + (-B2) * B1.  */,\n+      0x5026 /* A3 + (-B3) * B1.  */ };\n+\n+VECT_VAR_DECL (expected_fms2_static, hfloat, 16, 4) []\n+  = { 0xD54E /* A0 + (-B0) * B2.  */,\n+      0x51BA /* A1 + (-B1) * B2.  */,\n+      0xD4F3 /* A2 + (-B2) * B2.  */,\n+      0xCE66 /* A3 + (-B3) * B2.  */ };\n+\n+VECT_VAR_DECL (expected_fms3_static, hfloat, 16, 4) []\n+  = { 0x4F70 /* A0 + (-B0) * B3.  */,\n+      0x4C5A /* A1 + (-B1) * B3.  */,\n+      0xD073 /* A2 + (-B2) * B3.  */,\n+      0xC600 /* A3 + (-B3) * B3.  */ };\n+\n+VECT_VAR_DECL (expected_fms0_static, hfloat, 16, 8) []\n+  = { 0xDEA2 /* A0 + (-B0) * B0.  */,\n+      0x5810 /* A1 + (-B1) * B0.  */,\n+      0xDA82 /* A2 + (-B2) * B0.  */,\n+      0xD53A /* A3 + (-B3) * B0.  */,\n+      0x7C00 /* A4 + (-B4) * B0.  */,\n+      0x724B /* A5 + (-B5) * B0.  */,\n+      0x6286 /* A6 + (-B6) * B0.  */,\n+      0xFC00 /* A7 + (-B7) * B0.  */ };\n+\n+VECT_VAR_DECL (expected_fms1_static, hfloat, 16, 8) []\n+  = { 0x5C0D /* A0 + (-B0) * B1.  */,\n+      0xD0EE /* A1 + (-B1) * B1.  */,\n+      0x5274 /* A2 + (-B2) * B1.  */,\n+      0x5026 /* A3 + (-B3) * B1.  */,\n+      0x7C00 /* A4 + (-B4) * B1.  */,\n+      0xEA41 /* A5 + (-B5) * B1.  */,\n+      0xD5DA /* A6 + (-B6) * B1.  */,\n+      0x7C00 /* A7 + (-B7) * B1.  */ };\n+\n+VECT_VAR_DECL (expected_fms2_static, hfloat, 16, 8) []\n+  = { 0xD54E /* A0 + (-B0) * B2.  */,\n+      0x51BA /* A1 + (-B1) * B2.  */,\n+      0xD4F3 /* A2 + (-B2) * B2.  */,\n+      0xCE66 /* A3 + (-B3) * B2.  */,\n+      0x7C00 /* A4 + (-B4) * B2.  */,\n+      0x6CC8 /* A5 + (-B5) * B2.  */,\n+      0x5DD7 /* A6 + (-B6) * B2.  */,\n+      0xFC00 /* A7 + (-B7) * B2.  */ };\n+\n+VECT_VAR_DECL (expected_fms3_static, hfloat, 16, 8) []\n+  = { 0x4F70 /* A0 + (-B0) * B3.  */,\n+      0x4C5A /* A1 + (-B1) * B3.  */,\n+      0xD073 /* A2 + (-B2) * B3.  */,\n+      0xC600 /* A3 + (-B3) * B3.  */,\n+      0x7C00 /* A4 + (-B4) * B3.  */,\n+      0x684B /* A5 + (-B5) * B3.  */,\n+      0x5AD0 /* A6 + (-B6) * B3.  */,\n+      0xFC00 /* A7 + (-B7) * B3.  */ };\n+\n+VECT_VAR_DECL (expected_fms4_static, hfloat, 16, 8) []\n+  = { 0x5179 /* A0 + (-B0) * B4.  */,\n+      0x4AF6 /* A1 + (-B1) * B4.  */,\n+      0xCF91 /* A2 + (-B2) * B4.  */,\n+      0xC334 /* A3 + (-B3) * B4.  */,\n+      0x7C00 /* A4 + (-B4) * B4.  */,\n+      0x674C /* A5 + (-B5) * B4.  */,\n+      0x5A37 /* A6 + (-B6) * B4.  */,\n+      0xFC00 /* A7 + (-B7) * B4.  */ };\n+\n+VECT_VAR_DECL (expected_fms5_static, hfloat, 16, 8) []\n+  = { 0x725C /* A0 + (-B0) * B5.  */,\n+      0xEA41 /* A1 + (-B1) * B5.  */,\n+      0x6CCA /* A2 + (-B2) * B5.  */,\n+      0x6853 /* A3 + (-B3) * B5.  */,\n+      0x7C00 /* A4 + (-B4) * B5.  */,\n+      0xFC00 /* A5 + (-B5) * B5.  */,\n+      0xF441 /* A6 + (-B6) * B5.  */,\n+      0x7C00 /* A7 + (-B7) * B5.  */ };\n+\n+VECT_VAR_DECL (expected_fms6_static, hfloat, 16, 8) []\n+  = { 0x62C7 /* A0 + (-B0) * B6.  */,\n+      0xD9F2 /* A1 + (-B1) * B6.  */,\n+      0x5C6C /* A2 + (-B2) * B6.  */,\n+      0x584A /* A3 + (-B3) * B6.  */,\n+      0x7C00 /* A4 + (-B4) * B6.  */,\n+      0xF447 /* A5 + (-B5) * B6.  */,\n+      0xE330 /* A6 + (-B6) * B6.  */,\n+      0x7C00 /* A7 + (-B7) * B6.  */ };\n+\n+VECT_VAR_DECL (expected_fms7_static, hfloat, 16, 8) []\n+  = { 0xFC00 /* A0 + (-B0) * B7.  */,\n+      0x7C00 /* A1 + (-B1) * B7.  */,\n+      0xFC00 /* A2 + (-B2) * B7.  */,\n+      0xFC00 /* A3 + (-B3) * B7.  */,\n+      0x7C00 /* A4 + (-B4) * B7.  */,\n+      0x7C00 /* A5 + (-B5) * B7.  */,\n+      0x7C00 /* A6 + (-B6) * B7.  */,\n+      0xFC00 /* A7 + (-B7) * B7.  */ };\n+\n+void exec_vfmas_n_f16 (void)\n+{\n+#undef TEST_MSG\n+#define TEST_MSG \"VFMA_N (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_1, float, 16, 4);\n+  DECL_VARIABLE(vsrc_2, float, 16, 4);\n+  VECT_VAR_DECL (buf_src_1, float, 16, 4) [] = {A0, A1, A2, A3};\n+  VECT_VAR_DECL (buf_src_2, float, 16, 4) [] = {B0, B1, B2, B3};\n+  VLOAD (vsrc_1, buf_src_1, , float, f, 16, 4);\n+  VLOAD (vsrc_2, buf_src_2, , float, f, 16, 4);\n+  DECL_VARIABLE (vector_res, float, 16, 4)\n+    = vfma_n_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t  VECT_VAR (vsrc_2, float, 16, 4), B0);\n+\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_fma0_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfma_n_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t  VECT_VAR (vsrc_2, float, 16, 4), B1);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_fma1_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfma_n_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t  VECT_VAR (vsrc_2, float, 16, 4), B2);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_fma2_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfma_n_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t  VECT_VAR (vsrc_2, float, 16, 4), B3);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_fma3_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VFMAQ_N (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_1, float, 16, 8);\n+  DECL_VARIABLE(vsrc_2, float, 16, 8);\n+  VECT_VAR_DECL (buf_src_1, float, 16, 8) [] = {A0, A1, A2, A3, A4, A5, A6, A7};\n+  VECT_VAR_DECL (buf_src_2, float, 16, 8) [] = {B0, B1, B2, B3, B4, B5, B6, B7};\n+  VLOAD (vsrc_1, buf_src_1, q, float, f, 16, 8);\n+  VLOAD (vsrc_2, buf_src_2, q, float, f, 16, 8);\n+  DECL_VARIABLE (vector_res, float, 16, 8)\n+    = vfmaq_n_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t   VECT_VAR (vsrc_2, float, 16, 8), B0);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_fma0_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmaq_n_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t   VECT_VAR (vsrc_2, float, 16, 8), B1);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_fma1_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmaq_n_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t   VECT_VAR (vsrc_2, float, 16, 8), B2);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_fma2_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmaq_n_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t   VECT_VAR (vsrc_2, float, 16, 8), B3);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_fma3_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmaq_n_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t   VECT_VAR (vsrc_2, float, 16, 8), B4);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_fma4_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmaq_n_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t   VECT_VAR (vsrc_2, float, 16, 8), B5);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_fma5_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmaq_n_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t   VECT_VAR (vsrc_2, float, 16, 8), B6);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_fma6_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmaq_n_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t   VECT_VAR (vsrc_2, float, 16, 8), B7);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_fma7_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VFMA_N (FP16)\"\n+  clean_results ();\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfms_n_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t  VECT_VAR (vsrc_2, float, 16, 4), B0);\n+\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_fms0_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfms_n_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t  VECT_VAR (vsrc_2, float, 16, 4), B1);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_fms1_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfms_n_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t  VECT_VAR (vsrc_2, float, 16, 4), B2);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_fms2_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vfms_n_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t  VECT_VAR (vsrc_2, float, 16, 4), B3);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_fms3_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VFMAQ_N (FP16)\"\n+  clean_results ();\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmsq_n_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t   VECT_VAR (vsrc_2, float, 16, 8), B0);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_fms0_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmsq_n_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t   VECT_VAR (vsrc_2, float, 16, 8), B1);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_fms1_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmsq_n_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t   VECT_VAR (vsrc_2, float, 16, 8), B2);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_fms2_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmsq_n_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t   VECT_VAR (vsrc_2, float, 16, 8), B3);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_fms3_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmsq_n_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t   VECT_VAR (vsrc_2, float, 16, 8), B4);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_fms4_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmsq_n_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t   VECT_VAR (vsrc_2, float, 16, 8), B5);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_fms5_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmsq_n_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t   VECT_VAR (vsrc_2, float, 16, 8), B6);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_fms6_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vfmsq_n_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t   VECT_VAR (vsrc_2, float, 16, 8), B7);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_fms7_static, \"\");\n+}\n+\n+int\n+main (void)\n+{\n+  exec_vfmas_n_f16 ();\n+  return 0;\n+}"}, {"sha": "ce9872f260bc9af7a1bd699066a7d37e7517e05e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmaxnmv_f16_1.c", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmaxnmv_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmaxnmv_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmaxnmv_f16_1.c?ref=4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "patch": "@@ -0,0 +1,131 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define FP16_C(a) ((__fp16) a)\n+#define A0 FP16_C (34.8)\n+#define B0 FP16_C (__builtin_nanf (\"\"))\n+#define C0 FP16_C (-__builtin_nanf (\"\"))\n+#define D0 FP16_C (0.0)\n+\n+#define A1 FP16_C (1025.8)\n+#define B1 FP16_C (13.4)\n+#define C1 FP16_C (__builtin_nanf (\"\"))\n+#define D1 FP16_C (10)\n+#define E1 FP16_C (-0.0)\n+#define F1 FP16_C (-__builtin_nanf (\"\"))\n+#define G1 FP16_C (0.0)\n+#define H1 FP16_C (10)\n+\n+/* Expected results for vmaxnmv.  */\n+uint16_t expect = 0x505A /* A0.  */;\n+uint16_t expect_alt = 0x6402 /* A1.  */;\n+\n+void exec_vmaxnmv_f16 (void)\n+{\n+#undef TEST_MSG\n+#define TEST_MSG \"VMAXNMV (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc, float, 16, 4);\n+  VECT_VAR_DECL (buf_src, float, 16, 4) [] = {A0, B0, C0, D0};\n+  VLOAD (vsrc, buf_src, , float, f, 16, 4);\n+  float16_t vector_res = vmaxnmv_f16 (VECT_VAR (vsrc, float, 16, 4));\n+\n+  if (* (uint16_t *) &vector_res != expect)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src1, float, 16, 4) [] = {B0, A0, C0, D0};\n+  VLOAD (vsrc, buf_src1, , float, f, 16, 4);\n+  vector_res = vmaxnmv_f16 (VECT_VAR (vsrc, float, 16, 4));\n+\n+  if (* (uint16_t *) &vector_res != expect)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src2, float, 16, 4) [] = {B0, C0, A0, D0};\n+  VLOAD (vsrc, buf_src2, , float, f, 16, 4);\n+  vector_res = vmaxnmv_f16 (VECT_VAR (vsrc, float, 16, 4));\n+\n+  if (* (uint16_t *) &vector_res != expect)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src3, float, 16, 4) [] = {B0, C0, D0, A0};\n+  VLOAD (vsrc, buf_src3, , float, f, 16, 4);\n+  vector_res = vmaxnmv_f16 (VECT_VAR (vsrc, float, 16, 4));\n+\n+  if (* (uint16_t *) &vector_res != expect)\n+    abort ();\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VMAXNMVQ (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc, float, 16, 8);\n+  VECT_VAR_DECL (buf_src, float, 16, 8) [] = {A1, B1, C1, D1, E1, F1, G1, H1};\n+  VLOAD (vsrc, buf_src, q, float, f, 16, 8);\n+  vector_res = vmaxnmvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src1, float, 16, 8) [] = {B1, A1, C1, D1, E1, F1, G1, H1};\n+  VLOAD (vsrc, buf_src1, q, float, f, 16, 8);\n+  vector_res = vmaxnmvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src2, float, 16, 8) [] = {B1, C1, A1, D1, E1, F1, G1, H1};\n+  VLOAD (vsrc, buf_src2, q, float, f, 16, 8);\n+  vector_res = vmaxnmvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src3, float, 16, 8) [] = {B1, C1, D1, A1, E1, F1, G1, H1};\n+  VLOAD (vsrc, buf_src3, q, float, f, 16, 8);\n+  vector_res = vmaxnmvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src4, float, 16, 8) [] = {B1, C1, D1, E1, A1, F1, G1, H1};\n+  VLOAD (vsrc, buf_src4, q, float, f, 16, 8);\n+  vector_res = vmaxnmvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src5, float, 16, 8) [] = {B1, C1, D1, E1, F1, A1, G1, H1};\n+  VLOAD (vsrc, buf_src5, q, float, f, 16, 8);\n+  vector_res = vmaxnmvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src6, float, 16, 8) [] = {B1, C1, D1, E1, F1, G1, A1, H1};\n+  VLOAD (vsrc, buf_src6, q, float, f, 16, 8);\n+  vector_res = vmaxnmvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src7, float, 16, 8) [] = {B1, C1, D1, E1, F1, G1, H1, A1};\n+  VLOAD (vsrc, buf_src7, q, float, f, 16, 8);\n+  vector_res = vmaxnmvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  exec_vmaxnmv_f16 ();\n+  return 0;\n+}"}, {"sha": "39c48977c86a6b12fa63c1e276403a51d542b1fa", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmaxv_f16_1.c", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmaxv_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmaxv_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmaxv_f16_1.c?ref=4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "patch": "@@ -0,0 +1,131 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define FP16_C(a) ((__fp16) a)\n+#define A0 FP16_C (123.4)\n+#define B0 FP16_C (-567.8)\n+#define C0 FP16_C (34.8)\n+#define D0 FP16_C (0.0)\n+\n+#define A1 FP16_C (1025.8)\n+#define B1 FP16_C (13.4)\n+#define C1 FP16_C (-567.8)\n+#define D1 FP16_C (10)\n+#define E1 FP16_C (-0.0)\n+#define F1 FP16_C (567.8)\n+#define G1 FP16_C (0.0)\n+#define H1 FP16_C (10)\n+\n+/* Expected results for vmaxv.  */\n+uint16_t expect = 0x57B6 /* A0.  */;\n+uint16_t expect_alt = 0x6402 /* A1.  */;\n+\n+void exec_vmaxv_f16 (void)\n+{\n+#undef TEST_MSG\n+#define TEST_MSG \"VMAXV (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc, float, 16, 4);\n+  VECT_VAR_DECL (buf_src, float, 16, 4) [] = {A0, B0, C0, D0};\n+  VLOAD (vsrc, buf_src, , float, f, 16, 4);\n+  float16_t vector_res = vmaxv_f16 (VECT_VAR (vsrc, float, 16, 4));\n+\n+  if (* (uint16_t *) &vector_res != expect)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src1, float, 16, 4) [] = {B0, A0, C0, D0};\n+  VLOAD (vsrc, buf_src1, , float, f, 16, 4);\n+  vector_res = vmaxv_f16 (VECT_VAR (vsrc, float, 16, 4));\n+\n+  if (* (uint16_t *) &vector_res != expect)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src2, float, 16, 4) [] = {B0, C0, A0, D0};\n+  VLOAD (vsrc, buf_src2, , float, f, 16, 4);\n+  vector_res = vmaxv_f16 (VECT_VAR (vsrc, float, 16, 4));\n+\n+  if (* (uint16_t *) &vector_res != expect)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src3, float, 16, 4) [] = {B0, C0, D0, A0};\n+  VLOAD (vsrc, buf_src3, , float, f, 16, 4);\n+  vector_res = vmaxv_f16 (VECT_VAR (vsrc, float, 16, 4));\n+\n+  if (* (uint16_t *) &vector_res != expect)\n+    abort ();\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VMAXVQ (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc, float, 16, 8);\n+  VECT_VAR_DECL (buf_src, float, 16, 8) [] = {A1, B1, C1, D1, E1, F1, G1, H1};\n+  VLOAD (vsrc, buf_src, q, float, f, 16, 8);\n+  vector_res = vmaxvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src1, float, 16, 8) [] = {B1, A1, C1, D1, E1, F1, G1, H1};\n+  VLOAD (vsrc, buf_src1, q, float, f, 16, 8);\n+  vector_res = vmaxvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src2, float, 16, 8) [] = {B1, C1, A1, D1, E1, F1, G1, H1};\n+  VLOAD (vsrc, buf_src2, q, float, f, 16, 8);\n+  vector_res = vmaxvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src3, float, 16, 8) [] = {B1, C1, D1, A1, E1, F1, G1, H1};\n+  VLOAD (vsrc, buf_src3, q, float, f, 16, 8);\n+  vector_res = vmaxvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src4, float, 16, 8) [] = {B1, C1, D1, E1, A1, F1, G1, H1};\n+  VLOAD (vsrc, buf_src4, q, float, f, 16, 8);\n+  vector_res = vmaxvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src5, float, 16, 8) [] = {B1, C1, D1, E1, F1, A1, G1, H1};\n+  VLOAD (vsrc, buf_src5, q, float, f, 16, 8);\n+  vector_res = vmaxvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src6, float, 16, 8) [] = {B1, C1, D1, E1, F1, G1, A1, H1};\n+  VLOAD (vsrc, buf_src6, q, float, f, 16, 8);\n+  vector_res = vmaxvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src7, float, 16, 8) [] = {B1, C1, D1, E1, F1, G1, H1, A1};\n+  VLOAD (vsrc, buf_src7, q, float, f, 16, 8);\n+  vector_res = vmaxvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  exec_vmaxv_f16 ();\n+  return 0;\n+}"}, {"sha": "b7c51011da527f356ada7d6d68442c565c5d1365", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vminnmv_f16_1.c", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvminnmv_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvminnmv_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvminnmv_f16_1.c?ref=4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "patch": "@@ -0,0 +1,131 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define FP16_C(a) ((__fp16) a)\n+#define A0 FP16_C (-567.8)\n+#define B0 FP16_C (__builtin_nanf (\"\"))\n+#define C0 FP16_C (34.8)\n+#define D0 FP16_C (-__builtin_nanf (\"\"))\n+\n+#define A1 FP16_C (-567.8)\n+#define B1 FP16_C (1025.8)\n+#define C1 FP16_C (-__builtin_nanf (\"\"))\n+#define D1 FP16_C (10)\n+#define E1 FP16_C (-0.0)\n+#define F1 FP16_C (__builtin_nanf (\"\"))\n+#define G1 FP16_C (0.0)\n+#define H1 FP16_C (10)\n+\n+/* Expected results for vminnmv.  */\n+uint16_t expect = 0xE070 /* A0.  */;\n+uint16_t expect_alt = 0xE070 /* A1.  */;\n+\n+void exec_vminnmv_f16 (void)\n+{\n+#undef TEST_MSG\n+#define TEST_MSG \"VMINNMV (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc, float, 16, 4);\n+  VECT_VAR_DECL (buf_src, float, 16, 4) [] = {A0, B0, C0, D0};\n+  VLOAD (vsrc, buf_src, , float, f, 16, 4);\n+  float16_t vector_res = vminnmv_f16 (VECT_VAR (vsrc, float, 16, 4));\n+\n+  if (* (uint16_t *) &vector_res != expect)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src1, float, 16, 4) [] = {B0, A0, C0, D0};\n+  VLOAD (vsrc, buf_src1, , float, f, 16, 4);\n+  vector_res = vminnmv_f16 (VECT_VAR (vsrc, float, 16, 4));\n+\n+  if (* (uint16_t *) &vector_res != expect)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src2, float, 16, 4) [] = {B0, C0, A0, D0};\n+  VLOAD (vsrc, buf_src2, , float, f, 16, 4);\n+  vector_res = vminnmv_f16 (VECT_VAR (vsrc, float, 16, 4));\n+\n+  if (* (uint16_t *) &vector_res != expect)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src3, float, 16, 4) [] = {B0, C0, D0, A0};\n+  VLOAD (vsrc, buf_src3, , float, f, 16, 4);\n+  vector_res = vminnmv_f16 (VECT_VAR (vsrc, float, 16, 4));\n+\n+  if (* (uint16_t *) &vector_res != expect)\n+    abort ();\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VMINNMVQ (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc, float, 16, 8);\n+  VECT_VAR_DECL (buf_src, float, 16, 8) [] = {A1, B1, C1, D1, E1, F1, G1, H1};\n+  VLOAD (vsrc, buf_src, q, float, f, 16, 8);\n+  vector_res = vminnmvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src1, float, 16, 8) [] = {B1, A1, C1, D1, E1, F1, G1, H1};\n+  VLOAD (vsrc, buf_src1, q, float, f, 16, 8);\n+  vector_res = vminnmvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src2, float, 16, 8) [] = {B1, C1, A1, D1, E1, F1, G1, H1};\n+  VLOAD (vsrc, buf_src2, q, float, f, 16, 8);\n+  vector_res = vminnmvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src3, float, 16, 8) [] = {B1, C1, D1, A1, E1, F1, G1, H1};\n+  VLOAD (vsrc, buf_src3, q, float, f, 16, 8);\n+  vector_res = vminnmvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src4, float, 16, 8) [] = {B1, C1, D1, E1, A1, F1, G1, H1};\n+  VLOAD (vsrc, buf_src4, q, float, f, 16, 8);\n+  vector_res = vminnmvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src5, float, 16, 8) [] = {B1, C1, D1, E1, F1, A1, G1, H1};\n+  VLOAD (vsrc, buf_src5, q, float, f, 16, 8);\n+  vector_res = vminnmvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src6, float, 16, 8) [] = {B1, C1, D1, E1, F1, G1, A1, H1};\n+  VLOAD (vsrc, buf_src6, q, float, f, 16, 8);\n+  vector_res = vminnmvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src7, float, 16, 8) [] = {B1, C1, D1, E1, F1, G1, H1, A1};\n+  VLOAD (vsrc, buf_src7, q, float, f, 16, 8);\n+  vector_res = vminnmvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  exec_vminnmv_f16 ();\n+  return 0;\n+}"}, {"sha": "c454a530192fbd50def55120f61f98947dc56610", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vminv_f16_1.c", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvminv_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvminv_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvminv_f16_1.c?ref=4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "patch": "@@ -0,0 +1,131 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define FP16_C(a) ((__fp16) a)\n+#define A0 FP16_C (-567.8)\n+#define B0 FP16_C (123.4)\n+#define C0 FP16_C (34.8)\n+#define D0 FP16_C (0.0)\n+\n+#define A1 FP16_C (-567.8)\n+#define B1 FP16_C (1025.8)\n+#define C1 FP16_C (13.4)\n+#define D1 FP16_C (10)\n+#define E1 FP16_C (-0.0)\n+#define F1 FP16_C (567.8)\n+#define G1 FP16_C (0.0)\n+#define H1 FP16_C (10)\n+\n+/* Expected results for vminv.  */\n+uint16_t expect = 0xE070 /* A0.  */;\n+uint16_t expect_alt = 0xE070 /* A1.  */;\n+\n+void exec_vminv_f16 (void)\n+{\n+#undef TEST_MSG\n+#define TEST_MSG \"VMINV (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc, float, 16, 4);\n+  VECT_VAR_DECL (buf_src, float, 16, 4) [] = {A0, B0, C0, D0};\n+  VLOAD (vsrc, buf_src, , float, f, 16, 4);\n+  float16_t vector_res = vminv_f16 (VECT_VAR (vsrc, float, 16, 4));\n+\n+  if (* (uint16_t *) &vector_res != expect)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src1, float, 16, 4) [] = {B0, A0, C0, D0};\n+  VLOAD (vsrc, buf_src1, , float, f, 16, 4);\n+  vector_res = vminv_f16 (VECT_VAR (vsrc, float, 16, 4));\n+\n+  if (* (uint16_t *) &vector_res != expect)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src2, float, 16, 4) [] = {B0, C0, A0, D0};\n+  VLOAD (vsrc, buf_src2, , float, f, 16, 4);\n+  vector_res = vminv_f16 (VECT_VAR (vsrc, float, 16, 4));\n+\n+  if (* (uint16_t *) &vector_res != expect)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src3, float, 16, 4) [] = {B0, C0, D0, A0};\n+  VLOAD (vsrc, buf_src3, , float, f, 16, 4);\n+  vector_res = vminv_f16 (VECT_VAR (vsrc, float, 16, 4));\n+\n+  if (* (uint16_t *) &vector_res != expect)\n+    abort ();\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VMINVQ (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc, float, 16, 8);\n+  VECT_VAR_DECL (buf_src, float, 16, 8) [] = {A1, B1, C1, D1, E1, F1, G1, H1};\n+  VLOAD (vsrc, buf_src, q, float, f, 16, 8);\n+  vector_res = vminvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src1, float, 16, 8) [] = {B1, A1, C1, D1, E1, F1, G1, H1};\n+  VLOAD (vsrc, buf_src1, q, float, f, 16, 8);\n+  vector_res = vminvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src2, float, 16, 8) [] = {B1, C1, A1, D1, E1, F1, G1, H1};\n+  VLOAD (vsrc, buf_src2, q, float, f, 16, 8);\n+  vector_res = vminvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src3, float, 16, 8) [] = {B1, C1, D1, A1, E1, F1, G1, H1};\n+  VLOAD (vsrc, buf_src3, q, float, f, 16, 8);\n+  vector_res = vminvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src4, float, 16, 8) [] = {B1, C1, D1, E1, A1, F1, G1, H1};\n+  VLOAD (vsrc, buf_src4, q, float, f, 16, 8);\n+  vector_res = vminvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src5, float, 16, 8) [] = {B1, C1, D1, E1, F1, A1, G1, H1};\n+  VLOAD (vsrc, buf_src5, q, float, f, 16, 8);\n+  vector_res = vminvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src6, float, 16, 8) [] = {B1, C1, D1, E1, F1, G1, A1, H1};\n+  VLOAD (vsrc, buf_src6, q, float, f, 16, 8);\n+  vector_res = vminvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+\n+  VECT_VAR_DECL (buf_src7, float, 16, 8) [] = {B1, C1, D1, E1, F1, G1, H1, A1};\n+  VLOAD (vsrc, buf_src7, q, float, f, 16, 8);\n+  vector_res = vminvq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+\n+  if (* (uint16_t *) &vector_res != expect_alt)\n+    abort ();\n+}\n+\n+int\n+main (void)\n+{\n+  exec_vminv_f16 ();\n+  return 0;\n+}"}, {"sha": "1719d5626711d70273629a69a50e2c2fac8545f0", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmul_lane_f16_1.c", "status": "added", "additions": 454, "deletions": 0, "changes": 454, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul_lane_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul_lane_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmul_lane_f16_1.c?ref=4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "patch": "@@ -0,0 +1,454 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define FP16_C(a) ((__fp16) a)\n+#define A FP16_C (13.4)\n+#define B FP16_C (-56.8)\n+#define C FP16_C (-34.8)\n+#define D FP16_C (12)\n+#define E FP16_C (63.1)\n+#define F FP16_C (19.1)\n+#define G FP16_C (-4.8)\n+#define H FP16_C (77)\n+\n+#define I FP16_C (0.7)\n+#define J FP16_C (-78)\n+#define K FP16_C (11.23)\n+#define L FP16_C (98)\n+#define M FP16_C (87.1)\n+#define N FP16_C (-8)\n+#define O FP16_C (-1.1)\n+#define P FP16_C (-9.7)\n+\n+/* Expected results for vmul_lane.  */\n+VECT_VAR_DECL (expected0_static, hfloat, 16, 4) []\n+  = { 0x629B /* A * E.  */,\n+      0xEB00 /* B * E.  */,\n+      0xE84A /* C * E.  */,\n+      0x61EA /* D * E.  */ };\n+\n+VECT_VAR_DECL (expected1_static, hfloat, 16, 4) []\n+  = { 0x5BFF /* A * F.  */,\n+      0xE43D /* B * F.  */,\n+      0xE131 /* C * F.  */,\n+      0x5B29 /* D * F.  */ };\n+\n+VECT_VAR_DECL (expected2_static, hfloat, 16, 4) []\n+  = { 0xD405 /* A * G.  */,\n+      0x5C43 /* B * G.  */,\n+      0x5939 /* C * G.  */,\n+      0xD334 /* D * G.  */ };\n+\n+VECT_VAR_DECL (expected3_static, hfloat, 16, 4) []\n+  = { 0x6408 /* A * H.  */,\n+      0xEC46 /* B * H.  */,\n+      0xE93C /* C * H.  */,\n+      0x6338 /* D * H.  */ };\n+\n+/* Expected results for vmulq_lane.  */\n+VECT_VAR_DECL (expected0_static, hfloat, 16, 8) []\n+  = { 0x629B /* A * E.  */,\n+      0xEB00 /* B * E.  */,\n+      0xE84A /* C * E.  */,\n+      0x61EA /* D * E.  */,\n+      0x5186 /* I * E.  */,\n+      0xECCE /* J * E.  */,\n+      0x6189 /* K * E.  */,\n+      0x6E0A /* L * E.  */ };\n+\n+VECT_VAR_DECL (expected1_static, hfloat, 16, 8) []\n+  = { 0x5BFF /* A * F.  */,\n+      0xE43D /* B * F.  */,\n+      0xE131 /* C * F.  */,\n+      0x5B29 /* D * F.  */,\n+      0x4AAF /* I * F.  */,\n+      0xE5D1 /* J * F.  */,\n+      0x5AB3 /* K * F.  */,\n+      0x674F /* L * F.  */ };\n+\n+VECT_VAR_DECL (expected2_static, hfloat, 16, 8) []\n+  = { 0xD405 /* A * G.  */,\n+      0x5C43 /* B * G.  */,\n+      0x5939 /* C * G.  */,\n+      0xD334 /* D * G.  */,\n+      0xC2B9 /* I * G.  */,\n+      0x5DDA /* J * G.  */,\n+      0xD2BD /* K * G.  */,\n+      0xDF5A /* L * G.  */ };\n+\n+VECT_VAR_DECL (expected3_static, hfloat, 16, 8) []\n+  = { 0x6408 /* A * H.  */,\n+      0xEC46 /* B * H.  */,\n+      0xE93C /* C * H.  */,\n+      0x6338 /* D * H.  */,\n+      0x52BD /* I * H.  */,\n+      0xEDDE /* J * H.  */,\n+      0x62C1 /* K * H.  */,\n+      0x6F5E /* L * H.  */ };\n+\n+/* Expected results for vmul_laneq.  */\n+VECT_VAR_DECL (expected_laneq0_static, hfloat, 16, 4) []\n+  = { 0x629B /* A * E.  */,\n+      0xEB00 /* B * E.  */,\n+      0xE84A /* C * E.  */,\n+      0x61EA /* D * E.  */ };\n+\n+VECT_VAR_DECL (expected_laneq1_static, hfloat, 16, 4) []\n+  = { 0x5BFF /* A * F.  */,\n+      0xE43D /* B * F.  */,\n+      0xE131 /* C * F.  */,\n+      0x5B29 /* D * F.  */ };\n+\n+VECT_VAR_DECL (expected_laneq2_static, hfloat, 16, 4) []\n+  = { 0xD405 /* A * G.  */,\n+      0x5C43 /* B * G.  */,\n+      0x5939 /* C * G.  */,\n+      0xD334 /* D * G.  */ };\n+\n+VECT_VAR_DECL (expected_laneq3_static, hfloat, 16, 4) []\n+  = { 0x6408 /* A * H.  */,\n+      0xEC46 /* B * H.  */,\n+      0xE93C /* C * H.  */,\n+      0x6338 /* D * H.  */ };\n+\n+VECT_VAR_DECL (expected_laneq4_static, hfloat, 16, 4) []\n+  = { 0x648F /* A * M.  */,\n+      0xECD5 /* B * M.  */,\n+      0xE9ED /* C * M.  */,\n+      0x6416 /* D * M.  */ };\n+\n+VECT_VAR_DECL (expected_laneq5_static, hfloat, 16, 4) []\n+  = { 0xD6B3 /* A * N.  */,\n+      0x5F1A /* B * N.  */,\n+      0x5C5A /* C * N.  */,\n+      0xD600 /* D * N.  */ };\n+\n+VECT_VAR_DECL (expected_laneq6_static, hfloat, 16, 4) []\n+  = { 0xCB5E /* A * O.  */,\n+      0x53CF /* B * O.  */,\n+      0x50C9 /* C * O.  */,\n+      0xCA99 /* D * O.  */ };\n+\n+VECT_VAR_DECL (expected_laneq7_static, hfloat, 16, 4) []\n+  = { 0xD810 /* A * P.  */,\n+      0x604F /* B * P.  */,\n+      0x5D47 /* C * P.  */,\n+      0xD747 /* D * P.  */ };\n+\n+/* Expected results for vmulq_laneq.  */\n+VECT_VAR_DECL (expected_laneq0_static, hfloat, 16, 8) []\n+  = { 0x629B /* A * E.  */,\n+      0xEB00 /* B * E.  */,\n+      0xE84A /* C * E.  */,\n+      0x61EA /* D * E.  */,\n+      0x5186 /* I * E.  */,\n+      0xECCE /* J * E.  */,\n+      0x6189 /* K * E.  */,\n+      0x6E0A /* L * E.  */ };\n+\n+VECT_VAR_DECL (expected_laneq1_static, hfloat, 16, 8) []\n+  = { 0x5BFF /* A * F.  */,\n+      0xE43D /* B * F.  */,\n+      0xE131 /* C * F.  */,\n+      0x5B29 /* D * F.  */,\n+      0x4AAF /* I * F.  */,\n+      0xE5D1 /* J * F.  */,\n+      0x5AB3 /* K * F.  */,\n+      0x674F /* L * F.  */ };\n+\n+VECT_VAR_DECL (expected_laneq2_static, hfloat, 16, 8) []\n+  = { 0xD405 /* A * G.  */,\n+      0x5C43 /* B * G.  */,\n+      0x5939 /* C * G.  */,\n+      0xD334 /* D * G.  */,\n+      0xC2B9 /* I * G.  */,\n+      0x5DDA /* J * G.  */,\n+      0xD2BD /* K * G.  */,\n+      0xDF5A /* L * G.  */ };\n+\n+VECT_VAR_DECL (expected_laneq3_static, hfloat, 16, 8) []\n+  = { 0x6408 /* A * H.  */,\n+      0xEC46 /* B * H.  */,\n+      0xE93C /* C * H.  */,\n+      0x6338 /* D * H.  */,\n+      0x52BD /* I * H.  */,\n+      0xEDDE /* J * H.  */,\n+      0x62C1 /* K * H.  */,\n+      0x6F5E /* L * H.  */ };\n+\n+VECT_VAR_DECL (expected_laneq4_static, hfloat, 16, 8) []\n+  = { 0x648F /* A * M.  */,\n+      0xECD5 /* B * M.  */,\n+      0xE9ED /* C * M.  */,\n+      0x6416 /* D * M.  */,\n+      0x53A0 /* I * M.  */,\n+      0xEEA3 /* J * M.  */,\n+      0x63A4 /* K * M.  */,\n+      0x702B /* L * M.  */ };\n+\n+VECT_VAR_DECL (expected_laneq5_static, hfloat, 16, 8) []\n+  = { 0xD6B3 /* A * N.  */,\n+      0x5F1A /* B * N.  */,\n+      0x5C5A /* C * N.  */,\n+      0xD600 /* D * N.  */,\n+      0xC59A /* I * N.  */,\n+      0x60E0 /* J * N.  */,\n+      0xD59D /* K * N.  */,\n+      0xE220 /* L * N.  */ };\n+\n+VECT_VAR_DECL (expected_laneq6_static, hfloat, 16, 8) []\n+  = { 0xCB5E /* A * O.  */,\n+      0x53CF /* B * O.  */,\n+      0x50C9 /* C * O.  */,\n+      0xCA99 /* D * O.  */,\n+      0xBA29 /* I * O.  */,\n+      0x555C /* J * O.  */,\n+      0xCA2C /* K * O.  */,\n+      0xD6BC /* L * O.  */ };\n+\n+VECT_VAR_DECL (expected_laneq7_static, hfloat, 16, 8) []\n+  = { 0xD810 /* A * P.  */,\n+      0x604F /* B * P.  */,\n+      0x5D47 /* C * P.  */,\n+      0xD747 /* D * P.  */,\n+      0xC6CB /* I * P.  */,\n+      0x61EA /* J * P.  */,\n+      0xD6CF /* K * P.  */,\n+      0xE36E /* L * P.  */ };\n+\n+void exec_vmul_lane_f16 (void)\n+{\n+#undef TEST_MSG\n+#define TEST_MSG \"VMUL_LANE (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_1, float, 16, 4);\n+  DECL_VARIABLE(vsrc_2, float, 16, 4);\n+  VECT_VAR_DECL (buf_src_1, float, 16, 4) [] = {A, B, C, D};\n+  VECT_VAR_DECL (buf_src_2, float, 16, 4) [] = {E, F, G, H};\n+  VLOAD (vsrc_1, buf_src_1, , float, f, 16, 4);\n+  VLOAD (vsrc_2, buf_src_2, , float, f, 16, 4);\n+  DECL_VARIABLE (vector_res, float, 16, 4)\n+    = vmul_lane_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t     VECT_VAR (vsrc_2, float, 16, 4), 0);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected0_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmul_lane_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t     VECT_VAR (vsrc_2, float, 16, 4), 1);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected1_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmul_lane_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t     VECT_VAR (vsrc_2, float, 16, 4), 2);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected2_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmul_lane_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t     VECT_VAR (vsrc_2, float, 16, 4), 3);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected3_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VMULQ_LANE (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_1, float, 16, 8);\n+  VECT_VAR_DECL (buf_src_1, float, 16, 8) [] = {A, B, C, D, I, J, K, L};\n+  VLOAD (vsrc_1, buf_src_1, q, float, f, 16, 8);\n+  DECL_VARIABLE (vector_res, float, 16, 8)\n+    = vmulq_lane_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4), 0);\n+\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected0_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulq_lane_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4), 1);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected1_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulq_lane_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4), 2);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected2_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulq_lane_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4), 3);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected3_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VMUL_LANEQ (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_2, float, 16, 8);\n+  VECT_VAR_DECL (buf_src_2, float, 16, 8) [] = {E, F, G, H, M, N, O, P};\n+  VLOAD (vsrc_2, buf_src_2, q, float, f, 16, 8);\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmul_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 8), 0);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_laneq0_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmul_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 8), 1);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_laneq1_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmul_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 8), 2);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_laneq2_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmul_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 8), 3);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_laneq3_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmul_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 8), 4);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_laneq4_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmul_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 8), 5);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_laneq5_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmul_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 8), 6);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_laneq6_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmul_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 8), 7);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_laneq7_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VMULQ_LANEQ (FP16)\"\n+  clean_results ();\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8), 0);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_laneq0_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8), 1);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_laneq1_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8), 2);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_laneq2_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8), 3);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_laneq3_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8), 4);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_laneq4_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8), 5);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_laneq5_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8), 6);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_laneq6_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8), 7);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_laneq7_static, \"\");\n+}\n+\n+int\n+main (void)\n+{\n+  exec_vmul_lane_f16 ();\n+  return 0;\n+}"}, {"sha": "51bbead3f2a90f4349f34a702ae57cacbeb43116", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmulx_f16_1.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulx_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulx_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulx_f16_1.c?ref=4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "patch": "@@ -0,0 +1,84 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define FP16_C(a) ((__fp16) a)\n+#define A FP16_C (13.4)\n+#define B FP16_C (__builtin_inff ())\n+#define C FP16_C (-34.8)\n+#define D FP16_C (-__builtin_inff ())\n+#define E FP16_C (63.1)\n+#define F FP16_C (0.0)\n+#define G FP16_C (-4.8)\n+#define H FP16_C (0.0)\n+\n+#define I FP16_C (0.7)\n+#define J FP16_C (-__builtin_inff ())\n+#define K FP16_C (11.23)\n+#define L FP16_C (98)\n+#define M FP16_C (87.1)\n+#define N FP16_C (-0.0)\n+#define O FP16_C (-1.1)\n+#define P FP16_C (7)\n+\n+/* Expected results for vmulx.  */\n+VECT_VAR_DECL (expected_static, hfloat, 16, 4) []\n+  = { 0x629B /* A * E.  */, 0x4000 /* FP16_C (2.0f).  */,\n+      0x5939 /* C * G.  */, 0xC000 /* FP16_C (-2.0f).  */ };\n+\n+VECT_VAR_DECL (expected_static, hfloat, 16, 8) []\n+  = { 0x629B /* A * E.  */, 0x4000 /* FP16_C (2.0f).  */,\n+      0x5939 /* C * G.  */, 0xC000 /* FP16_C (-2.0f).  */,\n+      0x53A0 /* I * M.  */, 0x4000 /* FP16_C (2.0f).  */,\n+      0xCA2C /* K * O.  */, 0x615C /* L * P.  */ };\n+\n+void exec_vmulx_f16 (void)\n+{\n+#undef TEST_MSG\n+#define TEST_MSG \"VMULX (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_1, float, 16, 4);\n+  DECL_VARIABLE(vsrc_2, float, 16, 4);\n+  VECT_VAR_DECL (buf_src_1, float, 16, 4) [] = {A, B, C, D};\n+  VECT_VAR_DECL (buf_src_2, float, 16, 4) [] = {E, F, G, H};\n+  VLOAD (vsrc_1, buf_src_1, , float, f, 16, 4);\n+  VLOAD (vsrc_2, buf_src_2, , float, f, 16, 4);\n+  DECL_VARIABLE (vector_res, float, 16, 4)\n+    = vmulx_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t VECT_VAR (vsrc_2, float, 16, 4));\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VMULXQ (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_1, float, 16, 8);\n+  DECL_VARIABLE(vsrc_2, float, 16, 8);\n+  VECT_VAR_DECL (buf_src_1, float, 16, 8) [] = {A, B, C, D, I, J, K, L};\n+  VECT_VAR_DECL (buf_src_2, float, 16, 8) [] = {E, F, G, H, M, N, O, P};\n+  VLOAD (vsrc_1, buf_src_1, q, float, f, 16, 8);\n+  VLOAD (vsrc_2, buf_src_2, q, float, f, 16, 8);\n+  DECL_VARIABLE (vector_res, float, 16, 8)\n+    = vmulxq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t  VECT_VAR (vsrc_2, float, 16, 8));\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_static, \"\");\n+}\n+\n+int\n+main (void)\n+{\n+  exec_vmulx_f16 ();\n+  return 0;\n+}"}, {"sha": "f90a36d1cd3ce172a2deea10aaf62aff09925f79", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmulx_lane_f16_1.c", "status": "added", "additions": 452, "deletions": 0, "changes": 452, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulx_lane_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulx_lane_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulx_lane_f16_1.c?ref=4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "patch": "@@ -0,0 +1,452 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define FP16_C(a) ((__fp16) a)\n+#define A FP16_C (13.4)\n+#define B FP16_C (__builtin_inff ())\n+#define C FP16_C (-34.8)\n+#define D FP16_C (-__builtin_inff ())\n+#define E FP16_C (-0.0)\n+#define F FP16_C (19.1)\n+#define G FP16_C (-4.8)\n+#define H FP16_C (0.0)\n+\n+#define I FP16_C (0.7)\n+#define J FP16_C (-78)\n+#define K FP16_C (-__builtin_inff ())\n+#define L FP16_C (98)\n+#define M FP16_C (87.1)\n+#define N FP16_C (-8)\n+#define O FP16_C (-1.1)\n+#define P FP16_C (-0.0)\n+\n+/* Expected results for vmulx_lane.  */\n+VECT_VAR_DECL (expected0_static, hfloat, 16, 4) []\n+  = { 0x8000 /* A * E.  */,\n+      0xC000 /* FP16_C (-2.0f).  */,\n+      0x0000 /* C * E.  */,\n+      0x4000 /* FP16_C (2.0f).  */ };\n+\n+VECT_VAR_DECL (expected1_static, hfloat, 16, 4) []\n+  = { 0x5BFF /* A * F.  */,\n+      0x7C00 /* B * F.  */,\n+      0xE131 /* C * F.  */,\n+      0xFC00 /* D * F.  */ };\n+\n+VECT_VAR_DECL (expected2_static, hfloat, 16, 4) []\n+  = { 0xD405 /* A * G.  */,\n+      0xFC00 /* B * G.  */,\n+      0x5939 /* C * G.  */,\n+      0x7C00 /* D * G.  */ };\n+\n+VECT_VAR_DECL (expected3_static, hfloat, 16, 4) []\n+  = { 0x0000 /* A * H.  */,\n+      0x4000 /* FP16_C (2.0f).  */,\n+      0x8000 /* C * H.  */,\n+      0xC000 /* FP16_C (-2.0f).  */ };\n+\n+/* Expected results for vmulxq_lane.  */\n+VECT_VAR_DECL (expected0_static, hfloat, 16, 8) []\n+  = { 0x8000 /* A * E.  */,\n+      0xC000 /* FP16_C (-2.0f).  */,\n+      0x0000 /* C * E.  */,\n+      0x4000 /* FP16_C (2.0f).  */,\n+      0x8000 /* I * E.  */,\n+      0x0000 /* J * E.  */,\n+      0x4000 /* FP16_C (2.0f).  */,\n+      0x8000 /* L * E.  */ };\n+\n+VECT_VAR_DECL (expected1_static, hfloat, 16, 8) []\n+  = { 0x5BFF /* A * F.  */,\n+      0x7C00 /* B * F.  */,\n+      0xE131 /* C * F.  */,\n+      0xFC00 /* D * F.  */,\n+      0x4AAF /* I * F.  */,\n+      0xE5D1 /* J * F.  */,\n+      0xFC00 /* K * F.  */,\n+      0x674F /* L * F.  */ };\n+\n+VECT_VAR_DECL (expected2_static, hfloat, 16, 8) []\n+  = { 0xD405 /* A * G.  */,\n+      0xFC00 /* B * G.  */,\n+      0x5939 /* C * G.  */,\n+      0x7C00 /* D * G.  */,\n+      0xC2B9 /* I * G.  */,\n+      0x5DDA /* J * G.  */,\n+      0x7C00 /* K * G.  */,\n+      0xDF5A /* L * G.  */ };\n+\n+VECT_VAR_DECL (expected3_static, hfloat, 16, 8) []\n+  = { 0x0000 /* A * H.  */,\n+      0x4000 /* FP16_C (2.0f).  */,\n+      0x8000 /* C * H.  */,\n+      0xC000 /* FP16_C (-2.0f).  */,\n+      0x0000 /* I * H.  */,\n+      0x8000 /* J * H.  */,\n+      0xC000 /* FP16_C (-2.0f).  */,\n+      0x0000 /* L * H.  */};\n+\n+/* Expected results for vmulx_laneq.  */\n+VECT_VAR_DECL (expected_laneq0_static, hfloat, 16, 4) []\n+  = { 0x8000 /* A * E.  */,\n+      0xC000 /* FP16_C (-2.0f).  */,\n+      0x0000 /* C * E.  */,\n+      0x4000 /* FP16_C (2.0f).  */ };\n+\n+VECT_VAR_DECL (expected_laneq1_static, hfloat, 16, 4) []\n+  = { 0x5BFF /* A * F.  */,\n+      0x7C00 /* B * F.  */,\n+      0xE131 /* C * F.  */,\n+      0xFC00 /* D * F.  */ };\n+\n+VECT_VAR_DECL (expected_laneq2_static, hfloat, 16, 4) []\n+  = { 0xD405 /* A * G.  */,\n+      0xFC00 /* B * G.  */,\n+      0x5939 /* C * G.  */,\n+      0x7C00 /* D * G.  */ };\n+\n+VECT_VAR_DECL (expected_laneq3_static, hfloat, 16, 4) []\n+  = { 0x0000 /* A * H.  */,\n+      0x4000 /* FP16_C (2.0f).  */,\n+      0x8000 /* C * H.  */,\n+      0xC000 /* FP16_C (-2.0f).  */ };\n+\n+VECT_VAR_DECL (expected_laneq4_static, hfloat, 16, 4) []\n+  = { 0x648F /* A * M.  */,\n+      0x7C00 /* B * M.  */,\n+      0xE9ED /* C * M.  */,\n+      0xFC00 /* D * M.  */ };\n+\n+VECT_VAR_DECL (expected_laneq5_static, hfloat, 16, 4) []\n+  = { 0xD6B3 /* A * N.  */,\n+      0xFC00 /* B * N.  */,\n+      0x5C5A /* C * N.  */,\n+      0x7C00 /* D * N.  */ };\n+\n+VECT_VAR_DECL (expected_laneq6_static, hfloat, 16, 4) []\n+  = { 0xCB5E /* A * O.  */,\n+      0xFC00 /* B * O.  */,\n+      0x50C9 /* C * O.  */,\n+      0x7C00 /* D * O.  */ };\n+\n+VECT_VAR_DECL (expected_laneq7_static, hfloat, 16, 4) []\n+  = { 0x8000 /* A * P.  */,\n+      0xC000 /* FP16_C (-2.0f).  */,\n+      0x0000 /* C * P.  */,\n+      0x4000 /* FP16_C (2.0f).  */ };\n+\n+VECT_VAR_DECL (expected_laneq0_static, hfloat, 16, 8) []\n+  = { 0x8000 /* A * E.  */,\n+      0xC000 /* FP16_C (-2.0f).  */,\n+      0x0000 /* C * E.  */,\n+      0x4000 /* FP16_C (2.0f).  */,\n+      0x8000 /* I * E.  */,\n+      0x0000 /* J * E.  */,\n+      0x4000 /* FP16_C (2.0f).  */,\n+      0x8000 /* L * E.  */  };\n+\n+VECT_VAR_DECL (expected_laneq1_static, hfloat, 16, 8) []\n+  = { 0x5BFF /* A * F.  */,\n+      0x7C00 /* B * F.  */,\n+      0xE131 /* C * F.  */,\n+      0xFC00 /* D * F.  */,\n+      0x4AAF /* I * F.  */,\n+      0xE5D1 /* J * F.  */,\n+      0xFC00 /* K * F.  */,\n+      0x674F /* L * F.  */ };\n+\n+VECT_VAR_DECL (expected_laneq2_static, hfloat, 16, 8) []\n+  = { 0xD405 /* A * G.  */,\n+      0xFC00 /* B * G.  */,\n+      0x5939 /* C * G.  */,\n+      0x7C00 /* D * G.  */,\n+      0xC2B9 /* I * G.  */,\n+      0x5DDA /* J * G.  */,\n+      0x7C00 /* K * G.  */,\n+      0xDF5A /* L * G.  */ };\n+\n+VECT_VAR_DECL (expected_laneq3_static, hfloat, 16, 8) []\n+  = { 0x0000 /* A * H.  */,\n+      0x4000 /* FP16_C (2.0f).  */,\n+      0x8000 /* C * H.  */,\n+      0xC000 /* FP16_C (-2.0f).  */,\n+      0x0000 /* I * H.  */,\n+      0x8000 /* J * H.  */,\n+      0xC000 /* FP16_C (-2.0f).  */,\n+      0x0000 /* L * H.  */ };\n+\n+VECT_VAR_DECL (expected_laneq4_static, hfloat, 16, 8) []\n+  = { 0x648F /* A * M.  */,\n+      0x7C00 /* B * M.  */,\n+      0xE9ED /* C * M.  */,\n+      0xFC00 /* D * M.  */,\n+      0x53A0 /* I * M.  */,\n+      0xEEA3 /* J * M.  */,\n+      0xFC00 /* K * M.  */,\n+      0x702B /* L * M.  */ };\n+\n+VECT_VAR_DECL (expected_laneq5_static, hfloat, 16, 8) []\n+  = { 0xD6B3 /* A * N.  */,\n+      0xFC00 /* B * N.  */,\n+      0x5C5A /* C * N.  */,\n+      0x7C00 /* D * N.  */,\n+      0xC59A /* I * N.  */,\n+      0x60E0 /* J * N.  */,\n+      0x7C00 /* K * N.  */,\n+      0xE220 /* L * N.  */ };\n+\n+VECT_VAR_DECL (expected_laneq6_static, hfloat, 16, 8) []\n+  = { 0xCB5E /* A * O.  */,\n+      0xFC00 /* B * O.  */,\n+      0x50C9 /* C * O.  */,\n+      0x7C00 /* D * O.  */,\n+      0xBA29 /* I * O.  */,\n+      0x555C /* J * O.  */,\n+      0x7C00 /* K * O.  */,\n+      0xD6BC /* L * O.  */ };\n+\n+VECT_VAR_DECL (expected_laneq7_static, hfloat, 16, 8) []\n+  = { 0x8000 /* A * P.  */,\n+      0xC000 /* FP16_C (-2.0f).  */,\n+      0x0000 /* C * P.  */,\n+      0x4000 /* FP16_C (2.0f).  */,\n+      0x8000 /* I * P.  */,\n+      0x0000 /* J * P.  */,\n+      0x4000 /* FP16_C (2.0f).  */,\n+      0x8000 /* L * P.  */ };\n+\n+void exec_vmulx_lane_f16 (void)\n+{\n+#undef TEST_MSG\n+#define TEST_MSG \"VMULX_LANE (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_1, float, 16, 4);\n+  DECL_VARIABLE(vsrc_2, float, 16, 4);\n+  VECT_VAR_DECL (buf_src_1, float, 16, 4) [] = {A, B, C, D};\n+  VECT_VAR_DECL (buf_src_2, float, 16, 4) [] = {E, F, G, H};\n+  VLOAD (vsrc_1, buf_src_1, , float, f, 16, 4);\n+  VLOAD (vsrc_2, buf_src_2, , float, f, 16, 4);\n+  DECL_VARIABLE (vector_res, float, 16, 4)\n+    = vmulx_lane_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4), 0);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected0_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmulx_lane_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4), 1);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected1_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmulx_lane_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4), 2);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected2_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmulx_lane_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t      VECT_VAR (vsrc_2, float, 16, 4), 3);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected3_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VMULXQ_LANE (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_1, float, 16, 8);\n+  VECT_VAR_DECL (buf_src_1, float, 16, 8) [] = {A, B, C, D, I, J, K, L};\n+  VLOAD (vsrc_1, buf_src_1, q, float, f, 16, 8);\n+  DECL_VARIABLE (vector_res, float, 16, 8)\n+    = vmulxq_lane_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 4), 0);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected0_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulxq_lane_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 4), 1);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected1_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulxq_lane_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 4), 2);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected2_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulxq_lane_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 4), 3);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected3_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VMULX_LANEQ (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_2, float, 16, 8);\n+  VECT_VAR_DECL (buf_src_2, float, 16, 8) [] = {E, F, G, H, M, N, O, P};\n+  VLOAD (vsrc_2, buf_src_2, q, float, f, 16, 8);\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmulx_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8), 0);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_laneq0_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmulx_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8), 1);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_laneq1_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmulx_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8), 2);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_laneq2_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmulx_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8), 3);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_laneq3_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmulx_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8), 4);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_laneq4_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmulx_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8), 5);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_laneq5_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmulx_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8), 6);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_laneq6_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmulx_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t       VECT_VAR (vsrc_2, float, 16, 8), 7);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_laneq7_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VMULXQ_LANEQ (FP16)\"\n+  clean_results ();\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulxq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t\tVECT_VAR (vsrc_2, float, 16, 8), 0);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_laneq0_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulxq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t\tVECT_VAR (vsrc_2, float, 16, 8), 1);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_laneq1_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulxq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t\tVECT_VAR (vsrc_2, float, 16, 8), 2);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_laneq2_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulxq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t\tVECT_VAR (vsrc_2, float, 16, 8), 3);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_laneq3_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulxq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t\tVECT_VAR (vsrc_2, float, 16, 8), 4);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_laneq4_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulxq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t\tVECT_VAR (vsrc_2, float, 16, 8), 5);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_laneq5_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulxq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t\tVECT_VAR (vsrc_2, float, 16, 8), 6);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_laneq6_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulxq_laneq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t\tVECT_VAR (vsrc_2, float, 16, 8), 7);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_laneq7_static, \"\");\n+}\n+\n+int\n+main (void)\n+{\n+  exec_vmulx_lane_f16 ();\n+  return 0;\n+}"}, {"sha": "140647b453d6ac73ec8950cb36d4f1da64e9df30", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmulx_n_f16_1.c", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulx_n_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulx_n_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulx_n_f16_1.c?ref=4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "patch": "@@ -0,0 +1,177 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define FP16_C(a) ((__fp16) a)\n+#define A FP16_C (13.4)\n+#define B FP16_C (__builtin_inff ())\n+#define C FP16_C (-34.8)\n+#define D FP16_C (-__builtin_inff ())\n+#define E FP16_C (-0.0)\n+#define F FP16_C (19.1)\n+#define G FP16_C (-4.8)\n+#define H FP16_C (0.0)\n+\n+float16_t elemE = E;\n+float16_t elemF = F;\n+float16_t elemG = G;\n+float16_t elemH = H;\n+\n+#define I FP16_C (0.7)\n+#define J FP16_C (-78)\n+#define K FP16_C (11.23)\n+#define L FP16_C (98)\n+#define M FP16_C (87.1)\n+#define N FP16_C (-8)\n+#define O FP16_C (-1.1)\n+#define P FP16_C (-9.7)\n+\n+/* Expected results for vmulx_n.  */\n+VECT_VAR_DECL (expected0_static, hfloat, 16, 4) []\n+  = { 0x8000 /* A * E.  */,\n+      0xC000 /* FP16_C (-2.0f).  */,\n+      0x0000 /* C * E.  */,\n+      0x4000 /* FP16_C (2.0f).  */ };\n+\n+VECT_VAR_DECL (expected1_static, hfloat, 16, 4) []\n+  = { 0x5BFF /* A * F.  */,\n+      0x7C00 /* B * F.  */,\n+      0xE131 /* C * F.  */,\n+      0xFC00 /* D * F.  */ };\n+\n+VECT_VAR_DECL (expected2_static, hfloat, 16, 4) []\n+  = { 0xD405 /* A * G.  */,\n+      0xFC00 /* B * G.  */,\n+      0x5939 /* C * G.  */,\n+      0x7C00 /* D * G.  */ };\n+\n+VECT_VAR_DECL (expected3_static, hfloat, 16, 4) []\n+  = { 0x0000 /* A * H.  */,\n+      0x4000 /* FP16_C (2.0f).  */,\n+      0x8000 /* C * H.  */,\n+      0xC000 /* FP16_C (-2.0f).  */ };\n+\n+VECT_VAR_DECL (expected0_static, hfloat, 16, 8) []\n+  = { 0x8000 /* A * E.  */,\n+      0xC000 /* FP16_C (-2.0f).  */,\n+      0x0000 /* C * E.  */,\n+      0x4000 /* FP16_C (2.0f).  */,\n+      0x8000 /* I * E.  */,\n+      0x0000 /* J * E.  */,\n+      0x8000 /* K * E.  */,\n+      0x8000 /* L * E.  */ };\n+\n+VECT_VAR_DECL (expected1_static, hfloat, 16, 8) []\n+  = { 0x5BFF /* A * F.  */,\n+      0x7C00 /* B * F.  */,\n+      0xE131 /* C * F.  */,\n+      0xFC00 /* D * F.  */,\n+      0x4AAF /* I * F.  */,\n+      0xE5D1 /* J * F.  */,\n+      0x5AB3 /* K * F.  */,\n+      0x674F /* L * F.  */ };\n+\n+VECT_VAR_DECL (expected2_static, hfloat, 16, 8) []\n+  = { 0xD405 /* A * G.  */,\n+      0xFC00 /* B * G.  */,\n+      0x5939 /* C * G.  */,\n+      0x7C00 /* D * G.  */,\n+      0xC2B9 /* I * G.  */,\n+      0x5DDA /* J * G.  */,\n+      0xD2BD /* K * G.  */,\n+      0xDF5A /* L * G.  */ };\n+\n+VECT_VAR_DECL (expected3_static, hfloat, 16, 8) []\n+  = { 0x0000 /* A * H.  */,\n+      0x4000 /* FP16_C (2.0f).  */,\n+      0x8000 /* C * H.  */,\n+      0xC000 /* FP16_C (-2.0f).  */,\n+      0x0000 /* I * H.  */,\n+      0x8000 /* J * H.  */,\n+      0x0000 /* K * H.  */,\n+      0x0000 /* L * H.  */ };\n+\n+void exec_vmulx_n_f16 (void)\n+{\n+#undef TEST_MSG\n+#define TEST_MSG \"VMULX_N (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE (vsrc_1, float, 16, 4);\n+  VECT_VAR_DECL (buf_src_1, float, 16, 4) [] = {A, B, C, D};\n+  VLOAD (vsrc_1, buf_src_1, , float, f, 16, 4);\n+  DECL_VARIABLE (vector_res, float, 16, 4)\n+    = vmulx_n_f16 (VECT_VAR (vsrc_1, float, 16, 4), elemE);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected0_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmulx_n_f16 (VECT_VAR (vsrc_1, float, 16, 4), elemF);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected1_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmulx_n_f16 (VECT_VAR (vsrc_1, float, 16, 4), elemG);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected2_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vmulx_n_f16 (VECT_VAR (vsrc_1, float, 16, 4), elemH);\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected3_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VMULXQ_N (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE (vsrc_1, float, 16, 8);\n+  VECT_VAR_DECL (buf_src_1, float, 16, 8) [] = {A, B, C, D, I, J, K, L};\n+  VLOAD (vsrc_1, buf_src_1, q, float, f, 16, 8);\n+  DECL_VARIABLE (vector_res, float, 16, 8)\n+    = vmulxq_n_f16 (VECT_VAR (vsrc_1, float, 16, 8), elemE);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected0_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulxq_n_f16 (VECT_VAR (vsrc_1, float, 16, 8), elemF);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected1_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulxq_n_f16 (VECT_VAR (vsrc_1, float, 16, 8), elemG);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected2_static, \"\");\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vmulxq_n_f16 (VECT_VAR (vsrc_1, float, 16, 8), elemH);\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected3_static, \"\");\n+}\n+\n+int\n+main (void)\n+{\n+  exec_vmulx_n_f16 ();\n+  return 0;\n+}"}, {"sha": "c8df67757e049c59402a66e7ac7ff6442b65925d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vpminmaxnm_f16_1.c", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpminmaxnm_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpminmaxnm_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvpminmaxnm_f16_1.c?ref=4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "patch": "@@ -0,0 +1,114 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define FP16_C(a) ((__fp16) a)\n+#define A FP16_C (123.4)\n+#define B FP16_C (__builtin_nanf (\"\")) /* NaN */\n+#define C FP16_C (-34.8)\n+#define D FP16_C (1024)\n+#define E FP16_C (663.1)\n+#define F FP16_C (169.1)\n+#define G FP16_C (-4.8)\n+#define H FP16_C (-__builtin_nanf (\"\")) /* NaN */\n+\n+#define I FP16_C (0.7)\n+#define J FP16_C (-78)\n+#define K FP16_C (101.23)\n+#define L FP16_C (-1098)\n+#define M FP16_C (870.1)\n+#define N FP16_C (-8781)\n+#define O FP16_C (__builtin_inff ()) /* +Inf */\n+#define P FP16_C (-__builtin_inff ()) /* -Inf */\n+\n+\n+/* Expected results for vpminnm.  */\n+VECT_VAR_DECL (expected_min_static, hfloat, 16, 4) []\n+  = { 0x57B6 /* A.  */, 0xD05A /* C.  */, 0x5949 /* F.  */, 0xC4CD /* G.  */ };\n+\n+VECT_VAR_DECL (expected_min_static, hfloat, 16, 8) []\n+  = { 0x57B6 /* A.  */, 0xD05A /* C.  */, 0xD4E0 /* J.  */, 0xE44A /* L.  */,\n+      0x5949 /* F.  */, 0xC4CD /* G.  */, 0xF04A /* N.  */, 0xFC00 /* P.  */ };\n+\n+/* expected_max results for vpmaxnm.  */\n+VECT_VAR_DECL (expected_max_static, hfloat, 16, 4) []\n+  = { 0x57B6 /* A.  */, 0x6400 /* D.  */, 0x612E /* E.  */, 0xC4CD /* G.  */ };\n+\n+VECT_VAR_DECL (expected_max_static, hfloat, 16, 8) []\n+  = { 0x57B6 /* A.  */, 0x6400 /* D.  */, 0x399A /* I.  */, 0x5654 /* K.  */,\n+      0x612E /* E.  */, 0xC4CD /* G.  */, 0x62CC /* M.  */, 0x7C00 /* O.  */ };\n+\n+void exec_vpminmaxnm_f16 (void)\n+{\n+#undef TEST_MSG\n+#define TEST_MSG \"VPMINNM (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_1, float, 16, 4);\n+  DECL_VARIABLE(vsrc_2, float, 16, 4);\n+  VECT_VAR_DECL (buf_src_1, float, 16, 4) [] = {A, B, C, D};\n+  VECT_VAR_DECL (buf_src_2, float, 16, 4) [] = {E, F, G, H};\n+  VLOAD (vsrc_1, buf_src_1, , float, f, 16, 4);\n+  VLOAD (vsrc_2, buf_src_2, , float, f, 16, 4);\n+  DECL_VARIABLE (vector_res, float, 16, 4)\n+    = vpminnm_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t   VECT_VAR (vsrc_2, float, 16, 4));\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_min_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VPMINNMQ (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc_1, float, 16, 8);\n+  DECL_VARIABLE(vsrc_2, float, 16, 8);\n+  VECT_VAR_DECL (buf_src_1, float, 16, 8) [] = {A, B, C, D, I, J, K, L};\n+  VECT_VAR_DECL (buf_src_2, float, 16, 8) [] = {E, F, G, H, M, N, O, P};\n+  VLOAD (vsrc_1, buf_src_1, q, float, f, 16, 8);\n+  VLOAD (vsrc_2, buf_src_2, q, float, f, 16, 8);\n+  DECL_VARIABLE (vector_res, float, 16, 8)\n+    = vpminnmq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t    VECT_VAR (vsrc_2, float, 16, 8));\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_min_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VPMAXNM (FP16)\"\n+  clean_results ();\n+\n+  VECT_VAR (vector_res, float, 16, 4)\n+    = vpmaxnm_f16 (VECT_VAR (vsrc_1, float, 16, 4),\n+\t\t   VECT_VAR (vsrc_2, float, 16, 4));\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_max_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VPMAXNMQ (FP16)\"\n+  clean_results ();\n+\n+  VECT_VAR (vector_res, float, 16, 8)\n+    = vpmaxnmq_f16 (VECT_VAR (vsrc_1, float, 16, 8),\n+\t\t    VECT_VAR (vsrc_2, float, 16, 8));\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_max_static, \"\");\n+}\n+\n+int\n+main (void)\n+{\n+  exec_vpminmaxnm_f16 ();\n+  return 0;\n+}"}, {"sha": "7a4620bc8943d879f6cebf088917649d22211124", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrndi_f16_1.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndi_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndi_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndi_f16_1.c?ref=4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define FP16_C(a) ((__fp16) a)\n+#define A FP16_C (123.4)\n+#define RNDI_A 0x57B0 /* FP16_C (123).  */\n+#define B FP16_C (-567.5)\n+#define RNDI_B 0xE070 /* FP16_C (-568).  */\n+#define C FP16_C (-34.8)\n+#define RNDI_C 0xD060 /* FP16_C (-35).  */\n+#define D FP16_C (1024)\n+#define RNDI_D 0x6400 /* FP16_C (1024).  */\n+#define E FP16_C (663.1)\n+#define RNDI_E 0x612E /* FP16_C (663).  */\n+#define F FP16_C (169.1)\n+#define RNDI_F 0x5948 /* FP16_C (169).  */\n+#define G FP16_C (-4.8)\n+#define RNDI_G 0xC500 /* FP16_C (-5).  */\n+#define H FP16_C (77.5)\n+#define RNDI_H 0x54E0 /* FP16_C (78).  */\n+\n+/* Expected results for vrndi.  */\n+VECT_VAR_DECL (expected_static, hfloat, 16, 4) []\n+  = { RNDI_A, RNDI_B, RNDI_C, RNDI_D };\n+\n+VECT_VAR_DECL (expected_static, hfloat, 16, 8) []\n+  = { RNDI_A, RNDI_B, RNDI_C, RNDI_D, RNDI_E, RNDI_F, RNDI_G, RNDI_H };\n+\n+void exec_vrndi_f16 (void)\n+{\n+#undef TEST_MSG\n+#define TEST_MSG \"VRNDI (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc, float, 16, 4);\n+  VECT_VAR_DECL (buf_src, float, 16, 4) [] = {A, B, C, D};\n+  VLOAD (vsrc, buf_src, , float, f, 16, 4);\n+  DECL_VARIABLE (vector_res, float, 16, 4)\n+    = vrndi_f16 (VECT_VAR (vsrc, float, 16, 4));\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VRNDIQ (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc, float, 16, 8);\n+  VECT_VAR_DECL (buf_src, float, 16, 8) [] = {A, B, C, D, E, F, G, H};\n+  VLOAD (vsrc, buf_src, q, float, f, 16, 8);\n+  DECL_VARIABLE (vector_res, float, 16, 8)\n+    = vrndiq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_static, \"\");\n+}\n+\n+int\n+main (void)\n+{\n+  exec_vrndi_f16 ();\n+  return 0;\n+}"}, {"sha": "82249a7982894a4bfa327479ad3dc7d8066c7722", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vsqrt_f16_1.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsqrt_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bc63138bc01244b1ea0eb04ffb0b62870865a0e/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsqrt_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsqrt_f16_1.c?ref=4bc63138bc01244b1ea0eb04ffb0b62870865a0e", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_neon_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_neon } */\n+/* { dg-skip-if \"\" { arm*-*-* } } */\n+\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+#define FP16_C(a) ((__fp16) a)\n+#define A FP16_C (123.4)\n+#define B FP16_C (567.8)\n+#define C FP16_C (34.8)\n+#define D FP16_C (1024)\n+#define E FP16_C (663.1)\n+#define F FP16_C (144.0)\n+#define G FP16_C (4.8)\n+#define H FP16_C (77)\n+\n+#define SQRT_A 0x498E /* FP16_C (__builtin_sqrtf (123.4)).  */\n+#define SQRT_B 0x4DF5 /* FP16_C (__builtin_sqrtf (567.8)).  */\n+#define SQRT_C 0x45E6 /* FP16_C (__builtin_sqrtf (34.8)).  */\n+#define SQRT_D 0x5000 /* FP16_C (__builtin_sqrtf (1024)).  */\n+#define SQRT_E 0x4E70 /* FP16_C (__builtin_sqrtf (663.1)).  */\n+#define SQRT_F 0x4A00 /* FP16_C (__builtin_sqrtf (144.0)).  */\n+#define SQRT_G 0x4062 /* FP16_C (__builtin_sqrtf (4.8)).  */\n+#define SQRT_H 0x4863 /* FP16_C (__builtin_sqrtf (77)).  */\n+\n+/* Expected results for vsqrt.  */\n+VECT_VAR_DECL (expected_static, hfloat, 16, 4) []\n+  = { SQRT_A, SQRT_B, SQRT_C, SQRT_D };\n+\n+VECT_VAR_DECL (expected_static, hfloat, 16, 8) []\n+  = { SQRT_A, SQRT_B, SQRT_C, SQRT_D, SQRT_E, SQRT_F, SQRT_G, SQRT_H };\n+\n+void exec_vsqrt_f16 (void)\n+{\n+#undef TEST_MSG\n+#define TEST_MSG \"VSQRT (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc, float, 16, 4);\n+  VECT_VAR_DECL (buf_src, float, 16, 4) [] = {A, B, C, D};\n+  VLOAD (vsrc, buf_src, , float, f, 16, 4);\n+  DECL_VARIABLE (vector_res, float, 16, 4)\n+    = vsqrt_f16 (VECT_VAR (vsrc, float, 16, 4));\n+  vst1_f16 (VECT_VAR (result, float, 16, 4),\n+\t    VECT_VAR (vector_res, float, 16, 4));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 4, PRIx16, expected_static, \"\");\n+\n+#undef TEST_MSG\n+#define TEST_MSG \"VSQRTQ (FP16)\"\n+  clean_results ();\n+\n+  DECL_VARIABLE(vsrc, float, 16, 8);\n+  VECT_VAR_DECL (buf_src, float, 16, 8) [] = {A, B, C, D, E, F, G, H};\n+  VLOAD (vsrc, buf_src, q, float, f, 16, 8);\n+  DECL_VARIABLE (vector_res, float, 16, 8)\n+    = vsqrtq_f16 (VECT_VAR (vsrc, float, 16, 8));\n+  vst1q_f16 (VECT_VAR (result, float, 16, 8),\n+\t     VECT_VAR (vector_res, float, 16, 8));\n+\n+  CHECK_FP (TEST_MSG, float, 16, 8, PRIx16, expected_static, \"\");\n+}\n+\n+int\n+main (void)\n+{\n+  exec_vsqrt_f16 ();\n+  return 0;\n+}"}]}