{"sha": "ea403d8bb5129632aac4d2f270566d2d0073a8ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE0MDNkOGJiNTEyOTYzMmFhYzRkMmYyNzA1NjZkMmQwMDczYThhZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-06-18T14:52:41Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-06-18T14:52:41Z"}, "message": "[AArch64] Tabify aarch64-sve.md\n\n2019-06-18  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64-sve.md: Tabify file.\n\nFrom-SVN: r272426", "tree": {"sha": "429d91c05bec95349d4a35ac48f1456e8ff8cce3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/429d91c05bec95349d4a35ac48f1456e8ff8cce3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea403d8bb5129632aac4d2f270566d2d0073a8ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea403d8bb5129632aac4d2f270566d2d0073a8ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea403d8bb5129632aac4d2f270566d2d0073a8ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea403d8bb5129632aac4d2f270566d2d0073a8ae/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e7053b0c7cf3f1cd8a23cc71e7e36ec29c46b217", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7053b0c7cf3f1cd8a23cc71e7e36ec29c46b217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7053b0c7cf3f1cd8a23cc71e7e36ec29c46b217"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "4ce44041cb2be74bab86462e24857c616a7f5774", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea403d8bb5129632aac4d2f270566d2d0073a8ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea403d8bb5129632aac4d2f270566d2d0073a8ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea403d8bb5129632aac4d2f270566d2d0073a8ae", "patch": "@@ -1,3 +1,7 @@\n+2019-06-18  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-sve.md: Tabify file.\n+\n 2019-06-18  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-protos.h (aarch64_pfalse_reg): Declare."}, {"sha": "eb20b8344441cd075d94b9855401776e152ae234", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea403d8bb5129632aac4d2f270566d2d0073a8ae/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea403d8bb5129632aac4d2f270566d2d0073a8ae/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=ea403d8bb5129632aac4d2f270566d2d0073a8ae", "patch": "@@ -72,7 +72,7 @@\n        head of the file) and increases the addressing choices for\n        little-endian.  */\n     if ((MEM_P (operands[0]) || MEM_P (operands[1]))\n-        && can_create_pseudo_p ())\n+\t&& can_create_pseudo_p ())\n       {\n \taarch64_expand_sve_mem_move (operands[0], operands[1], <VPRED>mode);\n \tDONE;\n@@ -88,7 +88,7 @@\n     /* Optimize subregs on big-endian targets: we can use REV[BHW]\n        instead of going through memory.  */\n     if (BYTES_BIG_ENDIAN\n-        && aarch64_maybe_expand_sve_subreg_move (operands[0], operands[1]))\n+\t&& aarch64_maybe_expand_sve_subreg_move (operands[0], operands[1]))\n       DONE;\n   }\n )\n@@ -100,7 +100,7 @@\n (define_insn_and_split \"*aarch64_sve_mov<mode>_subreg_be\"\n   [(set (match_operand:SVE_ALL 0 \"aarch64_sve_nonimmediate_operand\" \"=w\")\n \t(unspec:SVE_ALL\n-          [(match_operand:VNx16BI 1 \"register_operand\" \"Upl\")\n+\t  [(match_operand:VNx16BI 1 \"register_operand\" \"Upl\")\n \t   (match_operand 2 \"aarch64_any_register_operand\" \"w\")]\n \t  UNSPEC_REV_SUBREG))]\n   \"TARGET_SVE && BYTES_BIG_ENDIAN\"\n@@ -147,7 +147,7 @@\n (define_expand \"aarch64_sve_reload_be\"\n   [(parallel\n      [(set (match_operand 0)\n-           (match_operand 1))\n+\t   (match_operand 1))\n       (clobber (match_operand:VNx16BI 2 \"register_operand\" \"=Upl\"))])]\n   \"TARGET_SVE && BYTES_BIG_ENDIAN\"\n   {\n@@ -1442,24 +1442,24 @@\n (define_insn_and_split \"*pred_cmp<cmp_op><mode>_combine\"\n   [(set (match_operand:<VPRED> 0 \"register_operand\" \"=Upa, Upa\")\n        (and:<VPRED>\n-         (unspec:<VPRED>\n-           [(match_operand:<VPRED> 1)\n-            (SVE_INT_CMP:<VPRED>\n-              (match_operand:SVE_I 2 \"register_operand\" \"w, w\")\n-              (match_operand:SVE_I 3 \"aarch64_sve_cmp_<sve_imm_con>_operand\" \"<sve_imm_con>, w\"))]\n-           UNSPEC_MERGE_PTRUE)\n-         (match_operand:<VPRED> 4 \"register_operand\" \"Upl, Upl\")))\n+\t (unspec:<VPRED>\n+\t   [(match_operand:<VPRED> 1)\n+\t    (SVE_INT_CMP:<VPRED>\n+\t      (match_operand:SVE_I 2 \"register_operand\" \"w, w\")\n+\t      (match_operand:SVE_I 3 \"aarch64_sve_cmp_<sve_imm_con>_operand\" \"<sve_imm_con>, w\"))]\n+\t   UNSPEC_MERGE_PTRUE)\n+\t (match_operand:<VPRED> 4 \"register_operand\" \"Upl, Upl\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_SVE\"\n   \"#\"\n   \"&& 1\"\n   [(parallel\n      [(set (match_dup 0)\n-          (and:<VPRED>\n-            (SVE_INT_CMP:<VPRED>\n-              (match_dup 2)\n-              (match_dup 3))\n-            (match_dup 4)))\n+\t  (and:<VPRED>\n+\t    (SVE_INT_CMP:<VPRED>\n+\t      (match_dup 2)\n+\t      (match_dup 3))\n+\t    (match_dup 4)))\n       (clobber (reg:CC CC_REGNUM))])]\n )\n \n@@ -2730,8 +2730,8 @@\n        a ZIP whose first operand is zero.  */\n     rtx temp = gen_reg_rtx (VNx4SImode);\n     emit_insn ((<hi_lanes_optab>\n-\t        ? gen_aarch64_sve_zip2vnx4si\n-\t        : gen_aarch64_sve_zip1vnx4si)\n+\t\t? gen_aarch64_sve_zip2vnx4si\n+\t\t: gen_aarch64_sve_zip1vnx4si)\n \t       (temp, operands[1], operands[1]));\n     rtx ptrue = aarch64_ptrue_reg (VNx2BImode);\n     emit_insn (gen_aarch64_sve_<FLOATUORS:optab>vnx4sivnx2df2 (operands[0],"}]}