{"sha": "183e687af1dd8ca311712b5061c205a43ce1252c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgzZTY4N2FmMWRkOGNhMzExNzEyYjUwNjFjMjA1YTQzY2UxMjUyYw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-11-01T18:30:42Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-11-01T18:30:42Z"}, "message": "[C++ PATCH] overloaded operator fns [8/N]\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-11/msg00031.html\n\t* cp-tree.h (enum cp_identifier_kind): Delete cik_newdel_op.\n\tRenumber and reserve udlit value.\n\t(IDENTIFIER_NEWDEL_OP): Delete.\n\t(IDENTIFIER_OVL_OP): New.\n\t(IDENTIFIER_ASSIGN_OP): Adjust.\n\t(IDENTIFIER_CONV_OP): Adjust.\n\t(IDENTIFIER_OVL_OP_INFO): Adjust.\n\t(IDENTIFIER_OVL_OP_FLAGS): New.\n\t* decl.c (grokdeclarator): Use IDENTIFIER_OVL_OP_FLAGS.\n\t* lex.c (get_identifier_kind_name): Adjust.\n\t(init_operators): Don't special case new/delete ops.\n\t* mangle.c (write_unqualified_id): Use IDENTIFIER_OVL_OP.\n\t* pt.c (push_template_decl_real): Use IDENTIFIER_OVL_OP_FLAGS.\n\t* typeck.c (check_return_expr): Likewise.\n\nFrom-SVN: r254322", "tree": {"sha": "202d41fd95c66b89850315710714b16e7eae2f18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/202d41fd95c66b89850315710714b16e7eae2f18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/183e687af1dd8ca311712b5061c205a43ce1252c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/183e687af1dd8ca311712b5061c205a43ce1252c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/183e687af1dd8ca311712b5061c205a43ce1252c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/183e687af1dd8ca311712b5061c205a43ce1252c/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d4b51b8ba058a79d9ef64cd03a3bc88d2c7fc6c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b51b8ba058a79d9ef64cd03a3bc88d2c7fc6c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4b51b8ba058a79d9ef64cd03a3bc88d2c7fc6c6"}], "stats": {"total": 73, "additions": 46, "deletions": 27}, "files": [{"sha": "d3ffadfb1fbc2e034e0fe387cd5183eee0768fc0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/183e687af1dd8ca311712b5061c205a43ce1252c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/183e687af1dd8ca311712b5061c205a43ce1252c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=183e687af1dd8ca311712b5061c205a43ce1252c", "patch": "@@ -1,5 +1,20 @@\n 2017-11-01  Nathan Sidwell  <nathan@acm.org>\n \n+\t* cp-tree.h (enum cp_identifier_kind): Delete cik_newdel_op.\n+\tRenumber and reserve udlit value.\n+\t(IDENTIFIER_NEWDEL_OP): Delete.\n+\t(IDENTIFIER_OVL_OP): New.\n+\t(IDENTIFIER_ASSIGN_OP): Adjust.\n+\t(IDENTIFIER_CONV_OP): Adjust.\n+\t(IDENTIFIER_OVL_OP_INFO): Adjust.\n+\t(IDENTIFIER_OVL_OP_FLAGS): New.\n+\t* decl.c (grokdeclarator): Use IDENTIFIER_OVL_OP_FLAGS.\n+\t* lex.c (get_identifier_kind_name): Adjust.\n+\t(init_operators): Don't special case new/delete ops.\n+\t* mangle.c (write_unqualified_id): Use IDENTIFIER_OVL_OP.\n+\t* pt.c (push_template_decl_real): Use IDENTIFIER_OVL_OP_FLAGS.\n+\t* typeck.c (check_return_expr): Likewise.\n+\n \t* cp-tree.h (assign_op_identifier, call_op_identifier): Use\n \tcompressed code.\n \t(struct lang_decl_fn): Use compressed operator code."}, {"sha": "1de32de14052afaa77573bebbf9e91e274582626", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/183e687af1dd8ca311712b5061c205a43ce1252c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/183e687af1dd8ca311712b5061c205a43ce1252c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=183e687af1dd8ca311712b5061c205a43ce1252c", "patch": "@@ -996,9 +996,9 @@ enum cp_identifier_kind {\n   cik_dtor = 3,\t\t/* Destructor (in-chg, deleting, complete or\n \t\t\t   base).  */\n   cik_simple_op = 4,\t/* Non-assignment operator name.  */\n-  cik_newdel_op = 5,\t/* New or delete operator name.  */\n-  cik_assign_op = 6,\t/* An assignment operator name.  */\n-  cik_conv_op = 7,\t/* Conversion operator name.  */\n+  cik_assign_op = 5,\t/* An assignment operator name.  */\n+  cik_conv_op = 6,\t/* Conversion operator name.  */\n+  cik_reserved_for_udlit = 7,\t/* Not yet in use  */\n   cik_max\n };\n \n@@ -1053,24 +1053,22 @@ enum cp_identifier_kind {\n #define IDENTIFIER_ANY_OP_P(NODE)\t\t\\\n   (IDENTIFIER_KIND_BIT_2 (NODE))\n \n-/* True if this identifier is for new or delete operator.  Value 5.  */\n-#define IDENTIFIER_NEWDEL_OP_P(NODE)\t\t\\\n-  (IDENTIFIER_KIND_BIT_2 (NODE)\t\t\t\\\n-   & (!IDENTIFIER_KIND_BIT_1 (NODE))\t\t\\\n-   & IDENTIFIER_KIND_BIT_0 (NODE))\n+/* True if this identifier is for an overloaded operator. Values 4, 5.  */\n+#define IDENTIFIER_OVL_OP_P(NODE)\t\t\\\n+  (IDENTIFIER_ANY_OP_P (NODE)\t\t\t\\\n+   & (!IDENTIFIER_KIND_BIT_1 (NODE)))\n \n-/* True if this identifier is for any assignment. Values 6.  */\n+/* True if this identifier is for any assignment. Values 5.  */\n #define IDENTIFIER_ASSIGN_OP_P(NODE)\t\t\\\n-  (IDENTIFIER_KIND_BIT_2 (NODE)\t\t\t\\\n-   & IDENTIFIER_KIND_BIT_1 (NODE)\t\t\\\n-   & (!IDENTIFIER_KIND_BIT_0 (NODE)))\n+  (IDENTIFIER_OVL_OP_P (NODE)\t\t\t\\\n+   & IDENTIFIER_KIND_BIT_0 (NODE))\n \n /* True if this identifier is the name of a type-conversion\n    operator.  Value 7.  */\n #define IDENTIFIER_CONV_OP_P(NODE)\t\t\\\n-  (IDENTIFIER_KIND_BIT_2 (NODE)\t\t\t\\\n+  (IDENTIFIER_ANY_OP_P (NODE)\t\t\t\\\n    & IDENTIFIER_KIND_BIT_1 (NODE)\t\t\\\n-   & IDENTIFIER_KIND_BIT_0 (NODE))\n+   & (!IDENTIFIER_KIND_BIT_0 (NODE)))\n \n /* Access a C++-specific index for identifier NODE.\n    Used to optimize operator mappings etc.  */\n@@ -5529,9 +5527,11 @@ extern GTY(()) unsigned char ovl_op_alternate[OVL_OP_MAX];\n #define OVL_OP_INFO(IS_ASS_P, TREE_CODE)\t\t\t\\\n   (&ovl_op_info[(IS_ASS_P) != 0][ovl_op_mapping[(TREE_CODE)]])\n /* Overloaded operator info for an identifier for which\n-   IDENTIFIER_ANY_OP_P is true.  */\n+   IDENTIFIER_OVL_OP_P is true.  */\n #define IDENTIFIER_OVL_OP_INFO(NODE) \\\n-  (&ovl_op_info[IDENTIFIER_ASSIGN_OP_P (NODE)][IDENTIFIER_CP_INDEX (NODE)])\n+  (&ovl_op_info[IDENTIFIER_KIND_BIT_0 (NODE)][IDENTIFIER_CP_INDEX (NODE)])\n+#define IDENTIFIER_OVL_OP_FLAGS(NODE) \\\n+  (IDENTIFIER_OVL_OP_INFO (NODE)->flags)\n \n /* A type-qualifier, or bitmask therefore, using the TYPE_QUAL\n    constants.  */"}, {"sha": "d88c78f348b59b9c49764e872d6368d3e6c468b1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/183e687af1dd8ca311712b5061c205a43ce1252c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/183e687af1dd8ca311712b5061c205a43ce1252c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=183e687af1dd8ca311712b5061c205a43ce1252c", "patch": "@@ -11744,7 +11744,8 @@ grokdeclarator (const cp_declarator *declarator,\n \n   if (ctype && TREE_CODE (type) == FUNCTION_TYPE && staticp < 2\n       && !(identifier_p (unqualified_id)\n-\t   && IDENTIFIER_NEWDEL_OP_P (unqualified_id)))\n+\t   && IDENTIFIER_OVL_OP_P (unqualified_id)\n+\t   && (IDENTIFIER_OVL_OP_FLAGS (unqualified_id) & OVL_OP_FLAG_ALLOC)))\n     {\n       cp_cv_quals real_quals = memfn_quals;\n       if (cxx_dialect < cxx14 && constexpr_p\n@@ -11857,7 +11858,9 @@ grokdeclarator (const cp_declarator *declarator,\n \n \t\tif (virtualp\n \t\t    && identifier_p (unqualified_id)\n-\t\t    && IDENTIFIER_NEWDEL_OP_P (unqualified_id))\n+\t\t    && IDENTIFIER_OVL_OP_P (unqualified_id)\n+\t\t    && (IDENTIFIER_OVL_OP_FLAGS (unqualified_id)\n+\t\t\t& OVL_OP_FLAG_ALLOC))\n \t\t  {\n \t\t    error (\"%qD cannot be declared %<virtual%>, since it \"\n \t\t\t   \"is always static\", unqualified_id);"}, {"sha": "c097f4b54cfc5eaac49921b65c720bd49f59ef72", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/183e687af1dd8ca311712b5061c205a43ce1252c/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/183e687af1dd8ca311712b5061c205a43ce1252c/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=183e687af1dd8ca311712b5061c205a43ce1252c", "patch": "@@ -100,7 +100,8 @@ get_identifier_kind_name (tree id)\n   /* Keep in sync with cp_id_kind enumeration.  */\n   static const char *const names[cik_max] = {\n     \"normal\", \"keyword\", \"constructor\", \"destructor\",\n-    \"assign-op\", \"op-assign-op\", \"simple-op\", \"conv-op\", };\n+    \"simple-op\", \"assign-op\", \"conv-op\", \"<reserved>udlit-op\"\n+  };\n \n   unsigned kind = 0;\n   kind |= IDENTIFIER_KIND_BIT_2 (id) << 2;\n@@ -176,9 +177,7 @@ init_operators (void)\n \t  else\n \t    {\n \t      IDENTIFIER_CP_INDEX (ident) = ix;\n-\t      set_identifier_kind (ident,\n-\t\t\t\t   op_ptr->flags & OVL_OP_FLAG_ALLOC\n-\t\t\t\t   ? cik_newdel_op : cik_simple_op);\n+\t      set_identifier_kind (ident, cik_simple_op);\n \t    }\n \t}\n       if (op_ptr->tree_code)"}, {"sha": "050055bd26cec0c0f5d5f5f82b01f0b9007a0191", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/183e687af1dd8ca311712b5061c205a43ce1252c/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/183e687af1dd8ca311712b5061c205a43ce1252c/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=183e687af1dd8ca311712b5061c205a43ce1252c", "patch": "@@ -1263,7 +1263,7 @@ write_unqualified_id (tree identifier)\n {\n   if (IDENTIFIER_CONV_OP_P (identifier))\n     write_conversion_operator_name (TREE_TYPE (identifier));\n-  else if (IDENTIFIER_ANY_OP_P (identifier))\n+  else if (IDENTIFIER_OVL_OP_P (identifier))\n     {\n       const ovl_op_info_t *ovl_op = IDENTIFIER_OVL_OP_INFO (identifier);\n       write_string (ovl_op->mangled_name);"}, {"sha": "f807e8c3955d95afaa67d609ce745bcee8b22a84", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/183e687af1dd8ca311712b5061c205a43ce1252c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/183e687af1dd8ca311712b5061c205a43ce1252c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=183e687af1dd8ca311712b5061c205a43ce1252c", "patch": "@@ -5329,7 +5329,9 @@ push_template_decl_real (tree decl, bool is_friend)\n \t      error (\"destructor %qD declared as member template\", decl);\n \t      return error_mark_node;\n \t    }\n-\t  if (IDENTIFIER_NEWDEL_OP_P (DECL_NAME (decl))\n+\t  if (IDENTIFIER_OVL_OP_P (DECL_NAME (decl))\n+\t      && (IDENTIFIER_OVL_OP_FLAGS (DECL_NAME (decl))\n+\t\t  & OVL_OP_FLAG_ALLOC)\n \t      && (!prototype_p (TREE_TYPE (decl))\n \t\t  || TYPE_ARG_TYPES (TREE_TYPE (decl)) == void_list_node\n \t\t  || !TREE_CHAIN (TYPE_ARG_TYPES (TREE_TYPE (decl)))"}, {"sha": "e2df355921a72df41a6582eaed1dd22e4989967a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/183e687af1dd8ca311712b5061c205a43ce1252c/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/183e687af1dd8ca311712b5061c205a43ce1252c/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=183e687af1dd8ca311712b5061c205a43ce1252c", "patch": "@@ -9073,9 +9073,9 @@ check_return_expr (tree retval, bool *no_warning)\n     }\n \n   /* Only operator new(...) throw(), can return NULL [expr.new/13].  */\n-  if (DECL_OVERLOADED_OPERATOR_P (current_function_decl)\n-      && (DECL_OVERLOADED_OPERATOR_IS (current_function_decl,  NEW_EXPR)\n-\t  || DECL_OVERLOADED_OPERATOR_IS (current_function_decl, VEC_NEW_EXPR))\n+  if (IDENTIFIER_OVL_OP_P (DECL_NAME (current_function_decl))\n+      && ((IDENTIFIER_OVL_OP_FLAGS (DECL_NAME (current_function_decl))\n+\t   & (OVL_OP_FLAG_ALLOC | OVL_OP_FLAG_DELETE)) == OVL_OP_FLAG_ALLOC)\n       && !TYPE_NOTHROW_P (TREE_TYPE (current_function_decl))\n       && ! flag_check_new\n       && retval && null_ptr_cst_p (retval))"}]}