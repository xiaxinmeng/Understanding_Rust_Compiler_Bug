{"sha": "3e4b91f275a6fb8f6466f1ab8c9f24e3d2abf13f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U0YjkxZjI3NWE2ZmI4ZjY0NjZmMWFiOGM5ZjI0ZTNkMmFiZjEzZg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-01-24T19:25:32Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-01-24T19:25:32Z"}, "message": "PR c++/79118 - anon-members and constexpr\n\n\tPR c++/79118 - anon-members and constexpr\n\t* constexpr.c (cx_check_missing_mem_inits): Caller passes type not\n\tctor decl.  Recursively check anonymous members.\n\t(register_constexpr_fundef): Adjust cx_check_missing_mem_inits\n\tcall.\n\t(explain_invalid_constexpr_fn): Likewise.\n\n\n\tPR c++/79118\n\t* g++.dg/cpp0x/pr79118.C: New.\n\nFrom-SVN: r244881", "tree": {"sha": "7a3ca93f7b5264d2830fe6c4e50bda6072a0a7ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a3ca93f7b5264d2830fe6c4e50bda6072a0a7ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e4b91f275a6fb8f6466f1ab8c9f24e3d2abf13f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e4b91f275a6fb8f6466f1ab8c9f24e3d2abf13f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e4b91f275a6fb8f6466f1ab8c9f24e3d2abf13f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e4b91f275a6fb8f6466f1ab8c9f24e3d2abf13f/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b20ba138efe0958dac85df2ec52ca0fc83dbb539", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b20ba138efe0958dac85df2ec52ca0fc83dbb539", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b20ba138efe0958dac85df2ec52ca0fc83dbb539"}], "stats": {"total": 128, "additions": 102, "deletions": 26}, "files": [{"sha": "5b863446b8973ff950f8852bbabafd37fdb6fc0b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4b91f275a6fb8f6466f1ab8c9f24e3d2abf13f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4b91f275a6fb8f6466f1ab8c9f24e3d2abf13f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3e4b91f275a6fb8f6466f1ab8c9f24e3d2abf13f", "patch": "@@ -1,3 +1,12 @@\n+2017-01-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/79118 - anon-members and constexpr\n+\t* constexpr.c (cx_check_missing_mem_inits): Caller passes type not\n+\tctor decl.  Recursively check anonymous members.\n+\t(register_constexpr_fundef): Adjust cx_check_missing_mem_inits\n+\tcall.\n+\t(explain_invalid_constexpr_fn): Likewise.\n+\n 2017-01-23  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/71710 - template using directive of field"}, {"sha": "67d2428e9b6eead09cffaaae7007763a4dacab1d", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 45, "deletions": 25, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4b91f275a6fb8f6466f1ab8c9f24e3d2abf13f/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4b91f275a6fb8f6466f1ab8c9f24e3d2abf13f/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=3e4b91f275a6fb8f6466f1ab8c9f24e3d2abf13f", "patch": "@@ -696,23 +696,21 @@ massage_constexpr_body (tree fun, tree body)\n   return body;\n }\n \n-/* FUN is a constexpr constructor with massaged body BODY.  Return true\n-   if some bases/fields are uninitialized, and complain if COMPLAIN.  */\n+/* CTYPE is a type constructed from BODY.  Return true if some\n+   bases/fields are uninitialized, and complain if COMPLAIN.  */\n \n static bool\n-cx_check_missing_mem_inits (tree fun, tree body, bool complain)\n+cx_check_missing_mem_inits (tree ctype, tree body, bool complain)\n {\n-  bool bad;\n-  tree field;\n-  unsigned i, nelts;\n-  tree ctype;\n-\n-  if (TREE_CODE (body) != CONSTRUCTOR)\n-    return false;\n-\n-  nelts = CONSTRUCTOR_NELTS (body);\n-  ctype = DECL_CONTEXT (fun);\n-  field = TYPE_FIELDS (ctype);\n+  unsigned nelts = 0;\n+  \n+  if (body)\n+    {\n+      if (TREE_CODE (body) != CONSTRUCTOR)\n+\treturn false;\n+      nelts = CONSTRUCTOR_NELTS (body);\n+    }\n+  tree field = TYPE_FIELDS (ctype);\n \n   if (TREE_CODE (ctype) == UNION_TYPE)\n     {\n@@ -726,27 +724,39 @@ cx_check_missing_mem_inits (tree fun, tree body, bool complain)\n       return false;\n     }\n \n-  bad = false;\n-  for (i = 0; i <= nelts; ++i)\n+  /* Iterate over the CONSTRUCTOR, checking any missing fields don't\n+     need an explicit initialization.  */\n+  bool bad = false;\n+  for (unsigned i = 0; i <= nelts; ++i)\n     {\n-      tree index;\n-      if (i == nelts)\n-\tindex = NULL_TREE;\n-      else\n+      tree index = NULL_TREE;\n+      if (i < nelts)\n \t{\n \t  index = CONSTRUCTOR_ELT (body, i)->index;\n \t  /* Skip base and vtable inits.  */\n \t  if (TREE_CODE (index) != FIELD_DECL\n \t      || DECL_ARTIFICIAL (index))\n \t    continue;\n \t}\n+\n       for (; field != index; field = DECL_CHAIN (field))\n \t{\n \t  tree ftype;\n-\t  if (TREE_CODE (field) != FIELD_DECL\n-\t      || (DECL_C_BIT_FIELD (field) && !DECL_NAME (field))\n-\t      || DECL_ARTIFICIAL (field))\n+\t  if (TREE_CODE (field) != FIELD_DECL)\n+\t    continue;\n+\t  if (DECL_C_BIT_FIELD (field) && !DECL_NAME (field))\n \t    continue;\n+\t  if (DECL_ARTIFICIAL (field))\n+\t    continue;\n+\t  if (ANON_AGGR_TYPE_P (TREE_TYPE (field)))\n+\t    {\n+\t      /* Recurse to check the anonummous aggregate member.  */\n+\t      bad |= cx_check_missing_mem_inits\n+\t\t(TREE_TYPE (field), NULL_TREE, complain);\n+\t      if (bad && !complain)\n+\t\treturn true;\n+\t      continue;\n+\t    }\n \t  ftype = strip_array_types (TREE_TYPE (field));\n \t  if (type_has_constexpr_default_constructor (ftype))\n \t    {\n@@ -766,6 +776,15 @@ cx_check_missing_mem_inits (tree fun, tree body, bool complain)\n \t}\n       if (field == NULL_TREE)\n \tbreak;\n+\n+      if (ANON_AGGR_TYPE_P (TREE_TYPE (index)))\n+\t{\n+\t  /* Check the anonymous aggregate initializer is valid.  */\n+\t  bad |= cx_check_missing_mem_inits\n+\t    (TREE_TYPE (index), CONSTRUCTOR_ELT (body, i)->value, complain);\n+\t  if (bad && !complain)\n+\t    return true;\n+\t}\n       field = DECL_CHAIN (field);\n     }\n \n@@ -803,7 +822,8 @@ register_constexpr_fundef (tree fun, tree body)\n     }\n \n   if (DECL_CONSTRUCTOR_P (fun)\n-      && cx_check_missing_mem_inits (fun, massaged, !DECL_GENERATED_P (fun)))\n+      && cx_check_missing_mem_inits (DECL_CONTEXT (fun),\n+\t\t\t\t     massaged, !DECL_GENERATED_P (fun)))\n     return NULL;\n \n   /* Create the constexpr function table if necessary.  */\n@@ -864,7 +884,7 @@ explain_invalid_constexpr_fn (tree fun)\n \t  body = massage_constexpr_body (fun, DECL_SAVED_TREE (fun));\n \t  require_potential_rvalue_constant_expression (body);\n \t  if (DECL_CONSTRUCTOR_P (fun))\n-\t    cx_check_missing_mem_inits (fun, body, true);\n+\t    cx_check_missing_mem_inits (DECL_CONTEXT (fun), body, true);\n \t}\n     }\n   input_location = save_loc;"}, {"sha": "cdd4e1b8a0482e113936bed3ac20b8bb4b8e405e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4b91f275a6fb8f6466f1ab8c9f24e3d2abf13f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4b91f275a6fb8f6466f1ab8c9f24e3d2abf13f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e4b91f275a6fb8f6466f1ab8c9f24e3d2abf13f", "patch": "@@ -1,3 +1,8 @@\n+2017-01-24  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/79118\n+\t* g++.dg/cpp0x/pr79118.C: New.\n+\n 2017-01-24  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.target/arm/vfp-longcall-apcs.c: New test.\n@@ -305,7 +310,7 @@\n \n 2017-01-20  Nathan Sidwell  <nathan@acm.org>\n \n-\tPR c++/79495\n+\tPR c++/78495\n \t* g++.dg/cpp1z/inh-ctor38.C: New.\n \n 2017-01-20  Marek Polacek  <polacek@redhat.com>"}, {"sha": "e7dfeb37957557fa4dc629df8835c1e731b7c2b0", "filename": "gcc/testsuite/g++.dg/cpp0x/pr79118.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e4b91f275a6fb8f6466f1ab8c9f24e3d2abf13f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr79118.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e4b91f275a6fb8f6466f1ab8c9f24e3d2abf13f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr79118.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr79118.C?ref=3e4b91f275a6fb8f6466f1ab8c9f24e3d2abf13f", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options { -Wno-pedantic } }\n+// PR c++/79118 failure to check initialization of anonymous members.\n+\n+struct One\n+{\n+  union\n+  {\n+    int a;\n+    int b;\n+  };\n+\n+  constexpr One () : a(), b() {} // { dg-error \"multiple\" }\n+  constexpr One (int) : a() {}\n+  constexpr One (unsigned) : b () {}\n+  constexpr One (void *) {} // { dg-error \"exactly one\" }\n+};\n+\n+One a ();\n+One b (0);\n+One c (0u);\n+One d ((void *)0);\n+\n+struct Two\n+{\n+  struct\n+  {\n+    int a;\n+    int b;\n+  };\n+\n+  constexpr Two () : a(), b() {}\n+  constexpr Two (int) : a() {} // { dg-error \"b' must be initialized\" }\n+  constexpr Two (unsigned) : b () {} // { dg-error \"a' must be initialized\" }\n+  constexpr Two (void *) {} // { dg-error \"a' must be initialized\" }\n+   // { dg-error \"b' must be initialized\" \"\" { target *-*-* } 35 }\n+};\n+\n+Two e ();\n+Two f (0);\n+Two g (0u);\n+Two h ((void *)0);"}]}