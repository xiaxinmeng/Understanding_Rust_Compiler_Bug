{"sha": "a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBlNGQ3YjQ0YzU0NGM4NGNmZmM3ZmY5YzY0YjZmMWFmMTRmYjA4ZA==", "commit": {"author": {"name": "Thomas Rodgers", "email": "trodgers@redhat.com", "date": "2020-10-28T18:52:17Z"}, "committer": {"name": "Thomas Rodgers", "email": "trodgers@redhat.com", "date": "2020-10-28T18:56:06Z"}, "message": "libstdc++: Implement C++20 features for <sstream>\n\nNew ctors and ::view() accessor for -\n  * basic_stingbuf\n  * basic_istringstream\n  * basic_ostringstream\n  * basic_stringstreamm\n\nNew ::get_allocator() accessor for basic_stringbuf.\n\nlibstdc++-v3/ChangeLog:\n\t* acinclude.m4 (glibcxx_SUBDIRS): Add src/c++20.\n\t* config/abi/pre/gnu.ver (GLIBCXX_3.4.29): New symbols.\n\t* configure: Regenerate.\n\t* include/std/sstream:\n\t(basic_stringbuf::basic_stringbuf(allocator const&)): New constructor.\n\t(basic_stringbuf::basic_stringbuf(openmode, allocator const&)): Likewise.\n\t(basic_stringbuf::basic_stringbuf(basic_string&&, openmode)): Likewise.\n\t(basic_stringbuf::basic_stringbuf(basic_stringbuf&&, allocator const&)):\n\tLikewise.\n\t(basic_stringbuf::get_allocator()): New method.\n\t(basic_stringbuf::view()): Likewise.\n\t(basic_istringstream::basic_istringstream(basic_string&&, openmode)):\n\tNew constructor.\n\t(basic_istringstream::basic_istringstream(openmode, allocator const&)):\n\tLikewise\n\t(basic_istringstream::view()): New method.\n\t(basic_ostringstream::basic_ostringstream(basic_string&&, openmode)):\n\tNew constructor.\n\t(basic_ostringstream::basic_ostringstream(openmode, allocator const&)):\n\tLikewise\n\t(basic_ostringstream::view()): New method.\n\t(basic_stringstream::basic_stringstream(basic_string&&, openmode)):\n\tNew constructor.\n\t(basic_stringstream::basic_stringstream(openmode, allocator const&)):\n\tLikewise\n\t(basic_stringstream::view()): New method.\n\t* src/Makefile.in: Add c++20 directory.\n\t* src/Makefile.am: Regenerate.\n\t* src/c++20/Makefile.am: Add makefile for new sub-directory.\n\t* src/c++20/Makefile.in: Generate.\n\t* src/c++20/sstream-inst.cc: New file defining explicit\n\tinstantiations for basic_stringbuf, basic_istringstream,\n\tbasic_ostringstream, and basic_stringstream member functions\n\tadded in C++20.\n\t* testsuite/27_io/basic_stringbuf/cons/char/2.cc: New test.\n\t* testsuite/27_io/basic_stringbuf/cons/wchar_t/2.cc: Likewise.\n\t* testsuite/27_io/basic_stringbuf/view/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_stringbuf/view/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_istringstream/cons/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_istringstream/cons/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_istringstream/view/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_istringstream/view/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostringstream/cons/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostringstream/cons/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostringstream/view/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_ostringstream/view/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_stringstream/cons/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_stringstream/cons/wchar_t/1.cc: Likewise.\n\t* testsuite/27_io/basic_stringstream/view/char/1.cc: Likewise.\n\t* testsuite/27_io/basic_stringstream/view/wchar_t/1.cc: Likewise.", "tree": {"sha": "5436f8e6b2790a3d2c3c1c9a2ba7f50fe20c98d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5436f8e6b2790a3d2c3c1c9a2ba7f50fe20c98d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/comments", "author": {"login": "rodgert", "id": 120839, "node_id": "MDQ6VXNlcjEyMDgzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/120839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodgert", "html_url": "https://github.com/rodgert", "followers_url": "https://api.github.com/users/rodgert/followers", "following_url": "https://api.github.com/users/rodgert/following{/other_user}", "gists_url": "https://api.github.com/users/rodgert/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodgert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodgert/subscriptions", "organizations_url": "https://api.github.com/users/rodgert/orgs", "repos_url": "https://api.github.com/users/rodgert/repos", "events_url": "https://api.github.com/users/rodgert/events{/privacy}", "received_events_url": "https://api.github.com/users/rodgert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rodgert", "id": 120839, "node_id": "MDQ6VXNlcjEyMDgzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/120839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodgert", "html_url": "https://github.com/rodgert", "followers_url": "https://api.github.com/users/rodgert/followers", "following_url": "https://api.github.com/users/rodgert/following{/other_user}", "gists_url": "https://api.github.com/users/rodgert/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodgert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodgert/subscriptions", "organizations_url": "https://api.github.com/users/rodgert/orgs", "repos_url": "https://api.github.com/users/rodgert/repos", "events_url": "https://api.github.com/users/rodgert/events{/privacy}", "received_events_url": "https://api.github.com/users/rodgert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4289e488dddc1f07a04feca6568b329f65b8fa10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4289e488dddc1f07a04feca6568b329f65b8fa10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4289e488dddc1f07a04feca6568b329f65b8fa10"}], "stats": {"total": 2312, "additions": 2287, "deletions": 25}, "files": [{"sha": "b9452dd74cd2ec0ce1b892d5441a8d058e1eb740", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -49,7 +49,7 @@ AC_DEFUN([GLIBCXX_CONFIGURE], [\n   # Keep these sync'd with the list in Makefile.am.  The first provides an\n   # expandable list at autoconf time; the second provides an expandable list\n   # (i.e., shell variable) at configure time.\n-  m4_define([glibcxx_SUBDIRS],[include libsupc++ src src/c++98 src/c++11 src/c++17 src/filesystem doc po testsuite python])\n+  m4_define([glibcxx_SUBDIRS],[include libsupc++ src src/c++98 src/c++11 src/c++17 src/c++20 src/filesystem doc po testsuite python])\n   SUBDIRS='glibcxx_SUBDIRS'\n \n   # These need to be absolute paths, yet at the same time need to"}, {"sha": "2648c8136168fff996e9376ddbbb29954dfb7e3d", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 95, "deletions": 13, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -1769,21 +1769,31 @@ GLIBCXX_3.4.21 {\n \n     # ABI-tagged stringstreams\n #   _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]*;\n-    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]E[ORS]*;\n+    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EOS4_;\n+    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EOSa*;\n+    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ERKNS_12basic_stringI[cw]S2_S3_EESt13_Ios_Openmode;\n+    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ESt13_Ios_Openmode;\n     _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EED[012]Ev;\n     _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]*__xfer_bufptrs*;\n     _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EE[a1346789]*;\n #   _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]*;\n-    _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]E[ORS]*;\n+    _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EOS4_;\n+    _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EOSa*;\n+    _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ERKNS_12basic_stringI[cw]S2_S3_EESt13_Ios_Openmode;\n+    _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ESt13_Ios_Openmode;\n     _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EED[012]Ev;\n     _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE[a34]*;\n #   _ZNSt7__cxx1119basic_istringstreamI[cw]St11char_traitsI[cw]*;\n #   _ZNSt7__cxx1119basic_ostringstreamI[cw]St11char_traitsI[cw]*;\n-    _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]E[ORS]*;\n+    _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EOS4_;\n+    _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EOSa*;\n+    _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ERKNS_12basic_stringI[cw]S2_S3_EESt13_Ios_Openmode;\n+    _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ESt13_Ios_Openmode;\n     _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EED[012]Ev;\n     _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE[a34]*;\n     _ZNKSt7__cxx1115basic_stringbuf*;\n-    _ZNKSt7__cxx1118basic_stringstream*;\n+    _ZNKSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE3strEv;\n+    _ZNKSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE5rdbufEv;\n     _ZNKSt7__cxx1119basic_istringstream*;\n     _ZNKSt7__cxx1119basic_ostringstream*;\n     _ZT[ISTV]NSt7__cxx1115basic_stringbuf*;\n@@ -2325,6 +2335,87 @@ GLIBCXX_3.4.29 {\n     # std::__throw_bad_array_new_length()\n     _ZSt28__throw_bad_array_new_lengthv;\n \n+    # basic_stringbuf::basic_stringbuf(allocator const&)\n+    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EEC1ERKS3_;\n+\n+    # basic_stringbuf::basic_stringbuf(ios_base::openmode, allocator const&)\n+    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EEC1ESt13_Ios_OpenmodeRKS3;\n+\n+    # basic_stringbuf::basic_stringbuf(basic_string&&, ios_base::openmode)\n+    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EEC1EONS_12basic_stringI[cw]S2_S3_EESt13_Ios_Openmode;\n+\n+    # basic_stringbuf::basic_stringbuf(basic_stringbuf&&, allocator const&)\n+    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaIcEEC1EOS4_RKS3_;\n+\n+    # basic_stringbuf::get_allocator()\n+    _ZNKSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EE13get_allocatorEv;\n+\n+    # basic_stringbuf::view()\n+    _ZNKSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EE4viewEv;\n+\n+    # basic_istringstream::basic_istringstream(basic_string&&, ios_base::openmode)\n+    _ZNSt7__cxx1119basic_istringstreamI[cw]St11char_traitsI[cw]ESaIcEEC1EONS_12basic_stringI[cw]S2_S3_EESt13_Ios_Openmode;\n+\n+    # basic_istringstream::basic_istringstream(ios_base::openmode, allocator const&)\n+    _ZNSt7__cxx1119basic_istringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC1ESt13_Ios_OpenmodeRKS3_;\n+\n+    # basic_istringstream::view()\n+    _ZNKSt7__cxx1119basic_istringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE4viewEv;\n+\n+    # basic_ostringstream::basic_ostringstream(basic_string&&, ios_base::openmode)\n+    _ZNSt7__cxx1119basic_ostringstreamI[cw]St11char_traitsI[cw]ESaIcEEC1EONS_12basic_stringI[cw]S2_S3_EESt13_Ios_Openmode;\n+\n+    # basic_ostringstream::basic_ostringstream(ios_base::openmode, allocator const&)\n+    _ZNSt7__cxx1119basic_ostringstreamI[cw]St11char_traitsI[cw]ESaIcEEC1ESt13_Ios_OpenmodeRKS3_;\n+\n+    # basic_ostringstream::view()\n+    _ZNKSt7__cxx1119basic_ostringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE4viewEv;\n+\n+    # basic_stringstream::basic_stringstream(basic_string&&, ios_base::openmode)\n+    _ZNSt7__cxx1119basic_stringstreamI[cw]St11char_traitsI[cw]ESaIcEEC1EONS_12basic_stringI[cw]S2_S3_EESt13_Ios_Openmode;\n+\n+    # basic_stringstream::basic_stringstream(ios_base::openmode, allocator const&)\n+    _ZNSt7__cxx1119basic_stringstreamI[cw]St11char_traitsI[cw]ESaIcEEC1ESt13_Ios_OpenmodeRKS3_;\n+\n+    # basic_stringstream::view()\n+    _ZNKSt7__cxx1119basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE4viewEv;\n+\n+    # basic_stringbuf::basic_stringbuf(allocator const&)\n+    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ERKS3_;\n+\n+    # basic_stringbuf::basic_stringbuf(ios_base::openmode, allocator const&)\n+    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ESt13_Ios_OpenmodeRKS3_;\n+\n+    # basic_stringbuf::basic_stringbuf(basic_string&&, ios_base::openmode)\n+    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EONS_12basic_stringI[cw]S2_S3_EESt13_Ios_Openmode;\n+\n+    # basic_stringbuf::basic_stringbuf(basic_stringbuf&&, allocator const&)\n+    _ZNSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EOS4_RKS3_;\n+\n+    # basic_stringbuf::get_allocator()\n+    _ZNKSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EE13get_allocatorEv;\n+\n+    # basic_stringbuf::view()\n+    _ZNKSt7__cxx1115basic_stringbufI[cw]St11char_traitsI[cw]ESaI[cw]EE4viewEv;\n+\n+    # basic_istringstream::basic_istringstream(basic_string&&, ios_base::openmode)\n+    _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EONS_12basic_stringI[cw]S2_S3_EESt13_Ios_Openmode;\n+\n+    # basic_[io]stringstream::basic_[io]stringstream(ios_base::openmode, allocator const&)\n+    _ZNSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ESt13_Ios_OpenmodeRKS3_;\n+\n+    # basic_istringstream::view()\n+    _ZNKSt7__cxx1119basic_[io]stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE4viewEv;\n+\n+    # basic_stringstream::basic_stringstream(basic_string&&, ios_base::openmode)\n+    _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]EONS_12basic_stringI[cw]S2_S3_EESt13_Ios_Openmode;\n+\n+    # basic_stringstream::basic_stringstream(ios_base::openmode, allocator const&)\n+    _ZNSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EEC[12]ESt13_Ios_OpenmodeRKS3_;\n+\n+    # basic_stringstream::view()\n+    _ZNKSt7__cxx1118basic_stringstreamI[cw]St11char_traitsI[cw]ESaI[cw]EE4viewEv;\n+\n } GLIBCXX_3.4.28;\n \n # Symbols in the support library (libsupc++) have their own tag.\n@@ -2625,15 +2716,6 @@ CXXABI_1.3.12 {\n \n } CXXABI_1.3.11;\n \n-CXXABI_1.3.13 {\n-\n-    # std::exception_ptr::_M_addref()\n-    _ZNSt15__exception_ptr13exception_ptr9_M_addrefEv;\n-    # std::exception_ptr::_M_release()\n-    _ZNSt15__exception_ptr13exception_ptr10_M_releaseEv;\n-\n-} CXXABI_1.3.12;\n-\n # Symbols in the support library (libsupc++) supporting transactional memory.\n CXXABI_TM_1 {\n "}, {"sha": "efdec6e68b9122a933a322b369120eeb44d9022a", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -5418,7 +5418,7 @@ $as_echo \"$ac_cv_path_EGREP\" >&6; }\n   # expandable list at autoconf time; the second provides an expandable list\n   # (i.e., shell variable) at configure time.\n \n-  SUBDIRS='include libsupc++ src src/c++98 src/c++11 src/c++17 src/filesystem doc po testsuite python'\n+  SUBDIRS='include libsupc++ src src/c++98 src/c++11 src/c++17 src/c++20 src/filesystem doc po testsuite python'\n \n   # These need to be absolute paths, yet at the same time need to\n   # canonicalize only relative paths, because then amd will not unmount\n@@ -78394,7 +78394,7 @@ ac_config_files=\"$ac_config_files doc/xsl/customization.xsl\"\n # append it here.  Only modify Makefiles that have just been created.\n #\n # Also, get rid of this simulated-VPATH thing that automake does.\n-ac_config_files=\"$ac_config_files include/Makefile libsupc++/Makefile src/Makefile src/c++98/Makefile src/c++11/Makefile src/c++17/Makefile src/filesystem/Makefile doc/Makefile po/Makefile testsuite/Makefile python/Makefile\"\n+ac_config_files=\"$ac_config_files include/Makefile libsupc++/Makefile src/Makefile src/c++98/Makefile src/c++11/Makefile src/c++17/Makefile src/c++20/Makefile src/filesystem/Makefile doc/Makefile po/Makefile testsuite/Makefile python/Makefile\"\n \n \n ac_config_commands=\"$ac_config_commands generate-headers\"\n@@ -79650,6 +79650,7 @@ do\n     \"src/c++98/Makefile\") CONFIG_FILES=\"$CONFIG_FILES src/c++98/Makefile\" ;;\n     \"src/c++11/Makefile\") CONFIG_FILES=\"$CONFIG_FILES src/c++11/Makefile\" ;;\n     \"src/c++17/Makefile\") CONFIG_FILES=\"$CONFIG_FILES src/c++17/Makefile\" ;;\n+    \"src/c++20/Makefile\") CONFIG_FILES=\"$CONFIG_FILES src/c++20/Makefile\" ;;\n     \"src/filesystem/Makefile\") CONFIG_FILES=\"$CONFIG_FILES src/filesystem/Makefile\" ;;\n     \"doc/Makefile\") CONFIG_FILES=\"$CONFIG_FILES doc/Makefile\" ;;\n     \"po/Makefile\") CONFIG_FILES=\"$CONFIG_FILES po/Makefile\" ;;\n@@ -81500,6 +81501,17 @@ _EOF\n  ;;\n     \"src/c++17/Makefile\":F) cat > vpsed$$ << \\_EOF\n s!`test -f '$<' || echo '$(srcdir)/'`!!\n+_EOF\n+   sed -f vpsed$$ $ac_file > tmp$$\n+   mv tmp$$ $ac_file\n+   rm vpsed$$\n+   echo 'MULTISUBDIR =' >> $ac_file\n+   ml_norecursion=yes\n+   . ${multi_basedir}/config-ml.in\n+   { ml_norecursion=; unset ml_norecursion;}\n+ ;;\n+    \"src/c++20/Makefile\":F) cat > vpsed$$ << \\_EOF\n+s!`test -f '$<' || echo '$(srcdir)/'`!!\n _EOF\n    sed -f vpsed$$ $ac_file > tmp$$\n    mv tmp$$ $ac_file"}, {"sha": "f03f3abd6fc3c0c01abdd0be669882a873ebbc31", "filename": "libstdc++-v3/include/std/sstream", "status": "modified", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -165,6 +165,55 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       }\n #endif\n \n+#if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n+      using __sv_type = basic_string_view<char_type, traits_type>;\n+\n+      basic_stringbuf(const allocator_type& __a)\n+      : basic_stringbuf(ios_base::in | std::ios_base::out, __a)\n+      { }\n+\n+      basic_stringbuf(ios_base::openmode __mode,\n+\t\t      const allocator_type& __a)\n+      : __streambuf_type(), _M_mode(__mode), _M_string(__a)\n+      { }\n+\n+      explicit\n+      basic_stringbuf(__string_type&& __s,\n+\t              ios_base::openmode __mode = ios_base::in\n+\t\t\t\t\t\t  | ios_base::out )\n+      : __streambuf_type(), _M_mode(__mode), _M_string(move(__s))\n+      { }\n+\n+      template<typename _SAlloc>\n+      basic_stringbuf(const basic_string<_CharT, _Traits, _SAlloc>& __s,\n+\t\t      const allocator_type& __a )\n+      : basic_stringbuf(__s, ios_base::in | std::ios_base::out, __a )\n+      { }\n+\n+      template<typename _SAlloc>\n+      basic_stringbuf(const basic_string<_CharT, _Traits, _SAlloc>& __s,\n+\t\t      ios_base::openmode __mode,\n+\t\t      const allocator_type& __a)\n+      : __streambuf_type(), _M_mode(__mode),\n+      _M_string(static_cast<__sv_type>(__s), __a)\n+      { }\n+\n+      template<typename _SAlloc>\n+\texplicit\n+\tbasic_stringbuf(const basic_string<_CharT, _Traits, _SAlloc>& __s,\n+\t                ios_base::openmode __mode = ios_base::in\n+\t\t\t\t\t\t    | ios_base::out)\n+\t: basic_stringbuf(__s, __mode, allocator_type{})\n+\t{ }\n+\n+      basic_stringbuf(basic_stringbuf&& __rhs, const allocator_type& __a)\n+      : basic_stringbuf(std::move(__rhs), __a, __xfer_bufptrs(__rhs, this))\n+      { __rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0); }\n+\n+      allocator_type get_allocator() const noexcept\n+      { return _M_string.get_allocator(); }\n+#endif\n+\n       // Get and set:\n       /**\n        *  @brief  Copying out the string buffer.\n@@ -208,6 +257,23 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t_M_stringbuf_init(_M_mode);\n       }\n \n+#if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n+      __sv_type\n+      view() const noexcept\n+      {\n+\tif (this->pptr())\n+\t  {\n+\t    // The current egptr() may not be the actual string end.\n+\t    if (this->pptr() > this->egptr())\n+\t      return __sv_type(this->pbase(), this->pptr());\n+\t    else\n+\t      return __sv_type(this->pbase(), this->egptr());\n+\t  }\n+\telse\n+\t  return static_cast<__sv_type>(_M_string);\n+      }\n+#endif\n+\n     protected:\n       // Common initialization code goes here.\n       void\n@@ -370,6 +436,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       : __streambuf_type(static_cast<const __streambuf_type&>(__rhs)),\n       _M_mode(__rhs._M_mode), _M_string(std::move(__rhs._M_string))\n       { }\n+\n+#if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n+      // The move constructor initializes an __xfer_bufptrs temporary then\n+      // delegates to this constructor to performs moves during its lifetime.\n+      basic_stringbuf(basic_stringbuf&& __rhs, const allocator_type& __a,\n+\t\t      __xfer_bufptrs&&)\n+      : __streambuf_type(static_cast<const __streambuf_type&>(__rhs)),\n+      _M_mode(__rhs._M_mode), _M_string(std::move(__rhs._M_string), __a)\n+      { }\n+#endif\n #endif\n     };\n \n@@ -501,6 +577,40 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       }\n #endif\n \n+#if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n+      basic_istringstream(ios_base::openmode __mode, const allocator_type& __a)\n+      : __istream_type(), _M_stringbuf(__mode | ios_base::in, __a)\n+      { this->init(std::__addressof(_M_stringbuf)); }\n+\n+      explicit\n+      basic_istringstream(__string_type&& __str,\n+\t                  ios_base::openmode __mode = ios_base::in )\n+      : __istream_type(), _M_stringbuf(std::move(__str), __mode | ios_base::in)\n+      { this->init(std::__addressof(_M_stringbuf)); }\n+\n+      template<typename _SAlloc>\n+\tbasic_istringstream(const basic_string<_CharT, _Traits, _SAlloc>& __str,\n+\t\t\t    const allocator_type& __a)\n+\t: basic_istringstream(__str, ios_base::in, __a)\n+\t{ }\n+\n+      template<typename _SAlloc>\n+\tbasic_istringstream(const basic_string<_CharT, _Traits, _SAlloc>& __str,\n+\t\t\t    ios_base::openmode __mode,\n+\t\t\t    const allocator_type& __a)\n+\t: __istream_type(),\n+\t_M_stringbuf(__string_type(__str.data(), __str.size()),\n+\t\t     __mode | ios_base::in, __a)\n+\t{ this->init(std::__addressof(_M_stringbuf)); }\n+\n+      template<typename _SAlloc>\n+\texplicit\n+\tbasic_istringstream(const basic_string<_CharT, _Traits, _SAlloc>& __str,\n+\t                    ios_base::openmode __mode = ios_base::in)\n+\t: basic_istringstream(__str, __mode, allocator_type())\n+\t{ }\n+#endif\n+\n       // Members:\n       /**\n        *  @brief  Accessing the underlying buffer.\n@@ -529,6 +639,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       void\n       str(const __string_type& __s)\n       { _M_stringbuf.str(__s); }\n+\n+#if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n+      basic_string_view<char_type, traits_type>\n+      view() const noexcept\n+      { return _M_stringbuf.view(); }\n+#endif\n     };\n \n \n@@ -659,6 +775,40 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       }\n #endif\n \n+#if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n+      basic_ostringstream(ios_base::openmode __mode, const allocator_type& __a)\n+      : __ostream_type(), _M_stringbuf(__mode | ios_base::out, __a)\n+      { this->init(std::__addressof(_M_stringbuf)); }\n+\n+      explicit\n+      basic_ostringstream(__string_type&& __str,\n+\t                  ios_base::openmode __mode = ios_base::out )\n+      : __ostream_type(), _M_stringbuf(std::move(__str), __mode | ios_base::out)\n+      { this->init(std::__addressof(_M_stringbuf)); }\n+\n+      template<typename _SAlloc>\n+\tbasic_ostringstream(const basic_string<_CharT, _Traits, _SAlloc>& __str,\n+\t\t\t    const allocator_type& __a)\n+\t: basic_ostringstream(__str, ios_base::out, __a)\n+\t{ }\n+\n+      template<typename _SAlloc>\n+\tbasic_ostringstream(const basic_string<_CharT, _Traits, _SAlloc>& __str,\n+\t\t\t    ios_base::openmode __mode,\n+\t\t\t    const allocator_type& __a)\n+\t: __ostream_type(),\n+\t_M_stringbuf(__string_type(__str.data(), __str.size()),\n+\t\t     __mode | ios_base::out, __a)\n+\t{ this->init(std::__addressof(_M_stringbuf)); }\n+\n+      template<typename _SAlloc>\n+\texplicit\n+\tbasic_ostringstream(const basic_string<_CharT, _Traits, _SAlloc>& __str,\n+\t                    ios_base::openmode __mode = ios_base::out)\n+\t: basic_ostringstream(__str, __mode, allocator_type())\n+\t{ }\n+#endif\n+\n       // Members:\n       /**\n        *  @brief  Accessing the underlying buffer.\n@@ -687,6 +837,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       void\n       str(const __string_type& __s)\n       { _M_stringbuf.str(__s); }\n+\n+#if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n+      basic_string_view<char_type, traits_type>\n+      view() const noexcept\n+      { return _M_stringbuf.view(); }\n+#endif\n     };\n \n \n@@ -813,6 +969,40 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       }\n #endif\n \n+#if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n+      basic_stringstream(ios_base::openmode __mode, const allocator_type& __a)\n+      : __iostream_type(), _M_stringbuf(__mode, __a)\n+      { this->init(&_M_stringbuf); }\n+\n+      explicit\n+      basic_stringstream(__string_type&& __str,\n+\t                 ios_base::openmode __mode = ios_base::out\n+\t\t\t\t\t\t     | ios_base::out)\n+      : __iostream_type(), _M_stringbuf(std::move(__str), __mode)\n+      { this->init(std::__addressof(_M_stringbuf)); }\n+\n+      template<typename _SAlloc>\n+\tbasic_stringstream(const basic_string<_CharT, _Traits, _SAlloc>& __str,\n+\t\t\t   const allocator_type& __a)\n+\t: basic_stringstream(__str, ios_base::in | ios_base::out, __a)\n+\t{ }\n+\n+      template<typename _SAlloc>\n+\tbasic_stringstream(const basic_string<_CharT, _Traits, _SAlloc>& __str,\n+\t\t\t   ios_base::openmode __mode, const allocator_type& __a)\n+\t: __iostream_type(),\n+\t_M_stringbuf(__string_type(__str.data(), __str.size()), __mode, __a)\n+\t{ this->init(std::__addressof(_M_stringbuf)); }\n+\n+      template<typename _SAlloc>\n+\texplicit\n+\tbasic_stringstream(const basic_string<_CharT, _Traits, _SAlloc>& __str,\n+\t                   ios_base::openmode __mode = ios_base::in\n+\t\t\t\t\t\t       | ios_base::out)\n+\t: basic_stringstream(__str, __mode, allocator_type())\n+\t{ }\n+#endif\n+\n       // Members:\n       /**\n        *  @brief  Accessing the underlying buffer.\n@@ -841,6 +1031,12 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       void\n       str(const __string_type& __s)\n       { _M_stringbuf.str(__s); }\n+\n+#if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n+      basic_string_view<char_type, traits_type>\n+      view() const noexcept\n+      { return _M_stringbuf.view(); }\n+#endif\n     };\n \n #if __cplusplus >= 201103L"}, {"sha": "9a6807ae8c6bb52bba458740c89fd5b995052aa3", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -29,7 +29,7 @@ filesystem_dir =\n endif\n \n ## Keep this list sync'd with acinclude.m4:GLIBCXX_CONFIGURE.\n-SUBDIRS = c++98 c++11 c++17 $(filesystem_dir)\n+SUBDIRS = c++98 c++11 c++17 c++20 $(filesystem_dir)\n \n # Cross compiler support.\n if VTV_CYGMIN\n@@ -60,6 +60,7 @@ endif\n vpath % $(top_srcdir)/src/c++98\n vpath % $(top_srcdir)/src/c++11\n vpath % $(top_srcdir)/src/c++17\n+vpath % $(top_srcdir)/src/c++20\n if ENABLE_FILESYSTEM_TS\n vpath % $(top_srcdir)/src/filesystem\n endif\n@@ -95,14 +96,16 @@ libstdc___la_LIBADD = \\\n \t$(top_builddir)/libsupc++/libsupc++convenience.la \\\n \t$(top_builddir)/src/c++98/libc++98convenience.la \\\n \t$(top_builddir)/src/c++11/libc++11convenience.la \\\n-\t$(top_builddir)/src/c++17/libc++17convenience.la\n+\t$(top_builddir)/src/c++17/libc++17convenience.la \\\n+\t$(top_builddir)/src/c++20/libc++20convenience.la\n \n libstdc___la_DEPENDENCIES = \\\n \t${version_dep} \\\n \t$(top_builddir)/libsupc++/libsupc++convenience.la \\\n \t$(top_builddir)/src/c++98/libc++98convenience.la \\\n \t$(top_builddir)/src/c++11/libc++11convenience.la \\\n-\t$(top_builddir)/src/c++17/libc++17convenience.la\n+\t$(top_builddir)/src/c++17/libc++17convenience.la \\\n+\t$(top_builddir)/src/c++20/libc++20convenience.la\n \n libstdc___la_LDFLAGS = \\\n \t-version-info $(libtool_VERSION) ${version_arg} -lm\n@@ -153,7 +156,8 @@ compatibility-condvar.o: compatibility-condvar.cc\n # segregated in the sources with -D_GLIBCXX_SHARED.\n #\n # In the sub-directories of libsupc++, src/c++98, src/c++11, src/c++17,\n-# only -prefer-pic objects are generated for the convenience libraries.\n+# src/c++20, only -prefer-pic objects are generated for the convenience\n+# libraries.\n #\n # In the main src directory, make shared and static objects just for\n # the compat libraries. Shared objects are compiled with -prefer-pic"}, {"sha": "e51e61640558323cb5262da6b2a8ec7ecefd7267", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -234,7 +234,7 @@ am__define_uniq_tagged_files = \\\n   done | $(am__uniquify_input)`\n ETAGS = etags\n CTAGS = ctags\n-DIST_SUBDIRS = c++98 c++11 c++17 filesystem\n+DIST_SUBDIRS = c++98 c++11 c++17 c++20 filesystem\n ABI_TWEAKS_SRCDIR = @ABI_TWEAKS_SRCDIR@\n ACLOCAL = @ACLOCAL@\n ALLOCATOR_H = @ALLOCATOR_H@\n@@ -464,7 +464,7 @@ WARN_CXXFLAGS = \\\n AM_CPPFLAGS = $(GLIBCXX_INCLUDES) $(CPPFLAGS)\n @ENABLE_FILESYSTEM_TS_FALSE@filesystem_dir = \n @ENABLE_FILESYSTEM_TS_TRUE@filesystem_dir = filesystem\n-SUBDIRS = c++98 c++11 c++17 $(filesystem_dir)\n+SUBDIRS = c++98 c++11 c++17 c++20 $(filesystem_dir)\n @VTV_CYGMIN_FALSE@toolexeclib_LTLIBRARIES = libstdc++.la\n \n # Cross compiler support.\n@@ -505,14 +505,16 @@ libstdc___la_LIBADD = \\\n \t$(top_builddir)/libsupc++/libsupc++convenience.la \\\n \t$(top_builddir)/src/c++98/libc++98convenience.la \\\n \t$(top_builddir)/src/c++11/libc++11convenience.la \\\n-\t$(top_builddir)/src/c++17/libc++17convenience.la\n+\t$(top_builddir)/src/c++17/libc++17convenience.la \\\n+\t$(top_builddir)/src/c++20/libc++20convenience.la\n \n libstdc___la_DEPENDENCIES = \\\n \t${version_dep} \\\n \t$(top_builddir)/libsupc++/libsupc++convenience.la \\\n \t$(top_builddir)/src/c++98/libc++98convenience.la \\\n \t$(top_builddir)/src/c++11/libc++11convenience.la \\\n-\t$(top_builddir)/src/c++17/libc++17convenience.la\n+\t$(top_builddir)/src/c++17/libc++17convenience.la \\\n+\t$(top_builddir)/src/c++20/libc++20convenience.la\n \n libstdc___la_LDFLAGS = \\\n \t-version-info $(libtool_VERSION) ${version_arg} -lm\n@@ -528,7 +530,8 @@ libstdc___la_LINK = $(CXXLINK) $(libstdc___la_LDFLAGS)\n # segregated in the sources with -D_GLIBCXX_SHARED.\n #\n # In the sub-directories of libsupc++, src/c++98, src/c++11, src/c++17,\n-# only -prefer-pic objects are generated for the convenience libraries.\n+# src/c++20, only -prefer-pic objects are generated for the convenience\n+# libraries.\n #\n # In the main src directory, make shared and static objects just for\n # the compat libraries. Shared objects are compiled with -prefer-pic\n@@ -957,6 +960,7 @@ uninstall-am: uninstall-toolexeclibLTLIBRARIES\n vpath % $(top_srcdir)/src/c++98\n vpath % $(top_srcdir)/src/c++11\n vpath % $(top_srcdir)/src/c++17\n+vpath % $(top_srcdir)/src/c++20\n @ENABLE_FILESYSTEM_TS_TRUE@vpath % $(top_srcdir)/src/filesystem\n \n # Use special rules for compatibility-ldbl.cc compilation, as we need to"}, {"sha": "423a79f3686dd5f3fab6a03ac7cbe367aab9f102", "filename": "libstdc++-v3/src/c++20/Makefile.am", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.am?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -0,0 +1,105 @@\n+## Makefile for the C++20 sources of the GNU C++ Standard library.\n+##\n+## Copyright (C) 1997-2020 Free Software Foundation, Inc.\n+##\n+## This file is part of the libstdc++ version 3 distribution.\n+## Process this file with automake to produce Makefile.in.\n+\n+## This file is part of the GNU ISO C++ Library.  This library is free\n+## software; you can redistribute it and/or modify it under the\n+## terms of the GNU General Public License as published by the\n+## Free Software Foundation; either version 3, or (at your option)\n+## any later version.\n+\n+## This library is distributed in the hope that it will be useful,\n+## but WITHOUT ANY WARRANTY; without even the implied warranty of\n+## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+## GNU General Public License for more details.\n+\n+## You should have received a copy of the GNU General Public License along\n+## with this library; see the file COPYING3.  If not see\n+## <http://www.gnu.org/licenses/>.\n+\n+include $(top_srcdir)/fragment.am\n+\n+# Convenience library for C++17 runtime.\n+noinst_LTLIBRARIES = libc++20convenience.la\n+\n+headers =\n+\n+if ENABLE_EXTERN_TEMPLATE\n+# XTEMPLATE_FLAGS = -fno-implicit-templates\n+inst_sources = \\\n+\tsstream-inst.cc\n+else\n+# XTEMPLATE_FLAGS =\n+inst_sources =\n+endif\n+\n+sources =\n+\n+vpath % $(top_srcdir)/src/c++20\n+\n+libc__20convenience_la_SOURCES = $(sources)  $(inst_sources)\n+\n+# AM_CXXFLAGS needs to be in each subdirectory so that it can be\n+# modified in a per-library or per-sub-library way.  Need to manually\n+# set this option because CONFIG_CXXFLAGS has to be after\n+# OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n+# as the occasion calls for it.\n+AM_CXXFLAGS = \\\n+\t-std=gnu++20 \\\n+\t$(glibcxx_lt_pic_flag) $(glibcxx_compiler_shared_flag) \\\n+\t$(XTEMPLATE_FLAGS) $(VTV_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) $(OPTIMIZE_CXXFLAGS) $(CONFIG_CXXFLAGS) \\\n+\t-fimplicit-templates\n+\n+AM_MAKEFLAGS = \\\n+\t\"gxx_include_dir=$(gxx_include_dir)\"\n+\n+# Libtool notes\n+\n+# 1) In general, libtool expects an argument such as `--tag=CXX' when\n+# using the C++ compiler, because that will enable the settings\n+# detected when C++ support was being configured.  However, when no\n+# such flag is given in the command line, libtool attempts to figure\n+# it out by matching the compiler name in each configuration section\n+# against a prefix of the command line.  The problem is that, if the\n+# compiler name and its initial flags stored in the libtool\n+# configuration file don't match those in the command line, libtool\n+# can't decide which configuration to use, and it gives up.  The\n+# correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n+# CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n+# attempt to infer which configuration to use.\n+#\n+# The second tag argument, `--tag disable-shared` means that libtool\n+# only compiles each source once, for static objects. In actuality,\n+# glibcxx_lt_pic_flag and glibcxx_compiler_shared_flag are added to\n+# the libtool command that is used create the object, which is\n+# suitable for shared libraries.  The `--tag disable-shared` must be\n+# placed after --tag CXX lest things CXX undo the affect of\n+# disable-shared.\n+\n+# 2) Need to explicitly set LTCXXCOMPILE so that EXTRA_CXX_FLAGS is\n+# last. (That way, things like -O2 passed down from the toplevel can\n+# be overridden by --enable-debug.)\n+LTCXXCOMPILE = \\\n+\t$(LIBTOOL) --tag CXX --tag disable-shared \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=compile $(CXX) $(TOPLEVEL_INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(EXTRA_CXX_FLAGS)\n+\n+LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n+\n+# 3) We'd have a problem when building the shared libstdc++ object if\n+# the rules automake generates would be used.  We cannot allow g++ to\n+# be used since this would add -lstdc++ to the link line which of\n+# course is problematic at this point.  So, we get the top-level\n+# directory to configure libstdc++-v3 to use gcc as the C++\n+# compilation driver.\n+CXXLINK = \\\n+\t$(LIBTOOL) --tag CXX --tag disable-shared \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=link $(CXX) \\\n+\t$(VTV_CXXLINKFLAGS) \\\n+\t$(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@"}, {"sha": "0e2de19ae59cec079c2203203910d65dbe25b2af", "filename": "libstdc++-v3/src/c++20/Makefile.in", "status": "added", "additions": 735, "deletions": 0, "changes": 735, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2FMakefile.in?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -0,0 +1,735 @@\n+# Makefile.in generated by automake 1.15.1 from Makefile.am.\n+# @configure_input@\n+\n+# Copyright (C) 1994-2017 Free Software Foundation, Inc.\n+\n+# This Makefile.in is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+# PARTICULAR PURPOSE.\n+\n+@SET_MAKE@\n+\n+VPATH = @srcdir@\n+am__is_gnu_make = { \\\n+  if test -z '$(MAKELEVEL)'; then \\\n+    false; \\\n+  elif test -n '$(MAKE_HOST)'; then \\\n+    true; \\\n+  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \\\n+    true; \\\n+  else \\\n+    false; \\\n+  fi; \\\n+}\n+am__make_running_with_option = \\\n+  case $${target_option-} in \\\n+      ?) ;; \\\n+      *) echo \"am__make_running_with_option: internal error: invalid\" \\\n+              \"target option '$${target_option-}' specified\" >&2; \\\n+         exit 1;; \\\n+  esac; \\\n+  has_opt=no; \\\n+  sane_makeflags=$$MAKEFLAGS; \\\n+  if $(am__is_gnu_make); then \\\n+    sane_makeflags=$$MFLAGS; \\\n+  else \\\n+    case $$MAKEFLAGS in \\\n+      *\\\\[\\ \\\t]*) \\\n+        bs=\\\\; \\\n+        sane_makeflags=`printf '%s\\n' \"$$MAKEFLAGS\" \\\n+          | sed \"s/$$bs$$bs[$$bs $$bs\t]*//g\"`;; \\\n+    esac; \\\n+  fi; \\\n+  skip_next=no; \\\n+  strip_trailopt () \\\n+  { \\\n+    flg=`printf '%s\\n' \"$$flg\" | sed \"s/$$1.*$$//\"`; \\\n+  }; \\\n+  for flg in $$sane_makeflags; do \\\n+    test $$skip_next = yes && { skip_next=no; continue; }; \\\n+    case $$flg in \\\n+      *=*|--*) continue;; \\\n+        -*I) strip_trailopt 'I'; skip_next=yes;; \\\n+      -*I?*) strip_trailopt 'I';; \\\n+        -*O) strip_trailopt 'O'; skip_next=yes;; \\\n+      -*O?*) strip_trailopt 'O';; \\\n+        -*l) strip_trailopt 'l'; skip_next=yes;; \\\n+      -*l?*) strip_trailopt 'l';; \\\n+      -[dEDm]) skip_next=yes;; \\\n+      -[JT]) skip_next=yes;; \\\n+    esac; \\\n+    case $$flg in \\\n+      *$$target_option*) has_opt=yes; break;; \\\n+    esac; \\\n+  done; \\\n+  test $$has_opt = yes\n+am__make_dryrun = (target_option=n; $(am__make_running_with_option))\n+am__make_keepgoing = (target_option=k; $(am__make_running_with_option))\n+pkgdatadir = $(datadir)/@PACKAGE@\n+pkgincludedir = $(includedir)/@PACKAGE@\n+pkglibdir = $(libdir)/@PACKAGE@\n+pkglibexecdir = $(libexecdir)/@PACKAGE@\n+am__cd = CDPATH=\"$${ZSH_VERSION+.}$(PATH_SEPARATOR)\" && cd\n+install_sh_DATA = $(install_sh) -c -m 644\n+install_sh_PROGRAM = $(install_sh) -c\n+install_sh_SCRIPT = $(install_sh) -c\n+INSTALL_HEADER = $(INSTALL_DATA)\n+transform = $(program_transform_name)\n+NORMAL_INSTALL = :\n+PRE_INSTALL = :\n+POST_INSTALL = :\n+NORMAL_UNINSTALL = :\n+PRE_UNINSTALL = :\n+POST_UNINSTALL = :\n+build_triplet = @build@\n+host_triplet = @host@\n+target_triplet = @target@\n+subdir = src/c++20\n+ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n+am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n+\t$(top_srcdir)/../config/enable.m4 \\\n+\t$(top_srcdir)/../config/futex.m4 \\\n+\t$(top_srcdir)/../config/hwcaps.m4 \\\n+\t$(top_srcdir)/../config/iconv.m4 \\\n+\t$(top_srcdir)/../config/lead-dot.m4 \\\n+\t$(top_srcdir)/../config/lib-ld.m4 \\\n+\t$(top_srcdir)/../config/lib-link.m4 \\\n+\t$(top_srcdir)/../config/lib-prefix.m4 \\\n+\t$(top_srcdir)/../config/lthostflags.m4 \\\n+\t$(top_srcdir)/../config/multi.m4 \\\n+\t$(top_srcdir)/../config/no-executables.m4 \\\n+\t$(top_srcdir)/../config/override.m4 \\\n+\t$(top_srcdir)/../config/stdint.m4 \\\n+\t$(top_srcdir)/../config/toolexeclibdir.m4 \\\n+\t$(top_srcdir)/../config/unwind_ipinfo.m4 \\\n+\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltoptions.m4 \\\n+\t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\\n+\t$(top_srcdir)/../lt~obsolete.m4 $(top_srcdir)/crossconfig.m4 \\\n+\t$(top_srcdir)/linkage.m4 $(top_srcdir)/acinclude.m4 \\\n+\t$(top_srcdir)/../config/gc++filt.m4 \\\n+\t$(top_srcdir)/../config/tls.m4 $(top_srcdir)/../config/gthr.m4 \\\n+\t$(top_srcdir)/../config/cet.m4 $(top_srcdir)/configure.ac\n+am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n+\t$(ACLOCAL_M4)\n+DIST_COMMON = $(srcdir)/Makefile.am\n+CONFIG_HEADER = $(top_builddir)/config.h\n+CONFIG_CLEAN_FILES =\n+CONFIG_CLEAN_VPATH_FILES =\n+LTLIBRARIES = $(noinst_LTLIBRARIES)\n+libc__20convenience_la_LIBADD =\n+am__objects_1 =\n+@ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_2 = sstream-inst.lo\n+am_libc__20convenience_la_OBJECTS = $(am__objects_1) $(am__objects_2)\n+libc__20convenience_la_OBJECTS = $(am_libc__20convenience_la_OBJECTS)\n+AM_V_lt = $(am__v_lt_@AM_V@)\n+am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)\n+am__v_lt_0 = --silent\n+am__v_lt_1 = \n+AM_V_P = $(am__v_P_@AM_V@)\n+am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)\n+am__v_P_0 = false\n+am__v_P_1 = :\n+AM_V_GEN = $(am__v_GEN_@AM_V@)\n+am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)\n+am__v_GEN_0 = @echo \"  GEN     \" $@;\n+am__v_GEN_1 = \n+AM_V_at = $(am__v_at_@AM_V@)\n+am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)\n+am__v_at_0 = @\n+am__v_at_1 = \n+DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)\n+depcomp =\n+am__depfiles_maybe =\n+CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)\n+AM_V_CXX = $(am__v_CXX_@AM_V@)\n+am__v_CXX_ = $(am__v_CXX_@AM_DEFAULT_V@)\n+am__v_CXX_0 = @echo \"  CXX     \" $@;\n+am__v_CXX_1 = \n+CXXLD = $(CXX)\n+AM_V_CXXLD = $(am__v_CXXLD_@AM_V@)\n+am__v_CXXLD_ = $(am__v_CXXLD_@AM_DEFAULT_V@)\n+am__v_CXXLD_0 = @echo \"  CXXLD   \" $@;\n+am__v_CXXLD_1 = \n+SOURCES = $(libc__20convenience_la_SOURCES)\n+am__can_run_installinfo = \\\n+  case $$AM_UPDATE_INFO_DIR in \\\n+    n|no|NO) false;; \\\n+    *) (install-info --version) >/dev/null 2>&1;; \\\n+  esac\n+am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)\n+# Read a list of newline-separated strings from the standard input,\n+# and print each of them once, without duplicates.  Input order is\n+# *not* preserved.\n+am__uniquify_input = $(AWK) '\\\n+  BEGIN { nonempty = 0; } \\\n+  { items[$$0] = 1; nonempty = 1; } \\\n+  END { if (nonempty) { for (i in items) print i; }; } \\\n+'\n+# Make sure the list of sources is unique.  This is necessary because,\n+# e.g., the same source file might be shared among _SOURCES variables\n+# for different programs/libraries.\n+am__define_uniq_tagged_files = \\\n+  list='$(am__tagged_files)'; \\\n+  unique=`for i in $$list; do \\\n+    if test -f \"$$i\"; then echo $$i; else echo $(srcdir)/$$i; fi; \\\n+  done | $(am__uniquify_input)`\n+ETAGS = etags\n+CTAGS = ctags\n+ABI_TWEAKS_SRCDIR = @ABI_TWEAKS_SRCDIR@\n+ACLOCAL = @ACLOCAL@\n+ALLOCATOR_H = @ALLOCATOR_H@\n+ALLOCATOR_NAME = @ALLOCATOR_NAME@\n+AMTAR = @AMTAR@\n+AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@\n+AR = @AR@\n+AS = @AS@\n+ATOMICITY_SRCDIR = @ATOMICITY_SRCDIR@\n+ATOMIC_FLAGS = @ATOMIC_FLAGS@\n+ATOMIC_WORD_SRCDIR = @ATOMIC_WORD_SRCDIR@\n+AUTOCONF = @AUTOCONF@\n+AUTOHEADER = @AUTOHEADER@\n+AUTOMAKE = @AUTOMAKE@\n+AWK = @AWK@\n+BASIC_FILE_CC = @BASIC_FILE_CC@\n+BASIC_FILE_H = @BASIC_FILE_H@\n+CC = @CC@\n+CCODECVT_CC = @CCODECVT_CC@\n+CCOLLATE_CC = @CCOLLATE_CC@\n+CCTYPE_CC = @CCTYPE_CC@\n+CFLAGS = @CFLAGS@\n+CLOCALE_CC = @CLOCALE_CC@\n+CLOCALE_H = @CLOCALE_H@\n+CLOCALE_INTERNAL_H = @CLOCALE_INTERNAL_H@\n+CMESSAGES_CC = @CMESSAGES_CC@\n+CMESSAGES_H = @CMESSAGES_H@\n+CMONEY_CC = @CMONEY_CC@\n+CNUMERIC_CC = @CNUMERIC_CC@\n+CPP = @CPP@\n+CPPFLAGS = @CPPFLAGS@\n+CPU_DEFINES_SRCDIR = @CPU_DEFINES_SRCDIR@\n+CPU_OPT_BITS_RANDOM = @CPU_OPT_BITS_RANDOM@\n+CPU_OPT_EXT_RANDOM = @CPU_OPT_EXT_RANDOM@\n+CSTDIO_H = @CSTDIO_H@\n+CTIME_CC = @CTIME_CC@\n+CTIME_H = @CTIME_H@\n+CXX = @CXX@\n+CXXCPP = @CXXCPP@\n+CXXFILT = @CXXFILT@\n+CXXFLAGS = @CXXFLAGS@\n+CYGPATH_W = @CYGPATH_W@\n+C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+DBLATEX = @DBLATEX@\n+DEBUG_FLAGS = @DEBUG_FLAGS@\n+DEFS = @DEFS@\n+DOT = @DOT@\n+DOXYGEN = @DOXYGEN@\n+DSYMUTIL = @DSYMUTIL@\n+DUMPBIN = @DUMPBIN@\n+ECHO_C = @ECHO_C@\n+ECHO_N = @ECHO_N@\n+ECHO_T = @ECHO_T@\n+EGREP = @EGREP@\n+ERROR_CONSTANTS_SRCDIR = @ERROR_CONSTANTS_SRCDIR@\n+EXEEXT = @EXEEXT@\n+EXTRA_CFLAGS = @EXTRA_CFLAGS@\n+EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n+FGREP = @FGREP@\n+GLIBCXX_INCLUDES = @GLIBCXX_INCLUDES@\n+GLIBCXX_LIBS = @GLIBCXX_LIBS@\n+GREP = @GREP@\n+HWCAP_CFLAGS = @HWCAP_CFLAGS@\n+INSTALL = @INSTALL@\n+INSTALL_DATA = @INSTALL_DATA@\n+INSTALL_PROGRAM = @INSTALL_PROGRAM@\n+INSTALL_SCRIPT = @INSTALL_SCRIPT@\n+INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@\n+LD = @LD@\n+LDFLAGS = @LDFLAGS@\n+LIBICONV = @LIBICONV@\n+LIBOBJS = @LIBOBJS@\n+LIBS = @LIBS@\n+LIBTOOL = @LIBTOOL@\n+LIPO = @LIPO@\n+LN_S = @LN_S@\n+LONG_DOUBLE_COMPAT_FLAGS = @LONG_DOUBLE_COMPAT_FLAGS@\n+LTLIBICONV = @LTLIBICONV@\n+LTLIBOBJS = @LTLIBOBJS@\n+MAINT = @MAINT@\n+MAKEINFO = @MAKEINFO@\n+MKDIR_P = @MKDIR_P@\n+NM = @NM@\n+NMEDIT = @NMEDIT@\n+OBJDUMP = @OBJDUMP@\n+OBJEXT = @OBJEXT@\n+OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n+OPT_LDFLAGS = @OPT_LDFLAGS@\n+OS_INC_SRCDIR = @OS_INC_SRCDIR@\n+OTOOL = @OTOOL@\n+OTOOL64 = @OTOOL64@\n+PACKAGE = @PACKAGE@\n+PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@\n+PACKAGE_NAME = @PACKAGE_NAME@\n+PACKAGE_STRING = @PACKAGE_STRING@\n+PACKAGE_TARNAME = @PACKAGE_TARNAME@\n+PACKAGE_URL = @PACKAGE_URL@\n+PACKAGE_VERSION = @PACKAGE_VERSION@\n+PATH_SEPARATOR = @PATH_SEPARATOR@\n+PDFLATEX = @PDFLATEX@\n+RANLIB = @RANLIB@\n+SECTION_FLAGS = @SECTION_FLAGS@\n+SECTION_LDFLAGS = @SECTION_LDFLAGS@\n+SED = @SED@\n+SET_MAKE = @SET_MAKE@\n+SHELL = @SHELL@\n+STRIP = @STRIP@\n+SYMVER_FILE = @SYMVER_FILE@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n+USE_NLS = @USE_NLS@\n+VERSION = @VERSION@\n+VTV_CXXFLAGS = @VTV_CXXFLAGS@\n+VTV_CXXLINKFLAGS = @VTV_CXXLINKFLAGS@\n+VTV_PCH_CXXFLAGS = @VTV_PCH_CXXFLAGS@\n+WARN_FLAGS = @WARN_FLAGS@\n+XMLCATALOG = @XMLCATALOG@\n+XMLLINT = @XMLLINT@\n+XSLTPROC = @XSLTPROC@\n+XSL_STYLE_DIR = @XSL_STYLE_DIR@\n+abs_builddir = @abs_builddir@\n+abs_srcdir = @abs_srcdir@\n+abs_top_builddir = @abs_top_builddir@\n+abs_top_srcdir = @abs_top_srcdir@\n+ac_ct_CC = @ac_ct_CC@\n+ac_ct_CXX = @ac_ct_CXX@\n+ac_ct_DUMPBIN = @ac_ct_DUMPBIN@\n+am__leading_dot = @am__leading_dot@\n+am__tar = @am__tar@\n+am__untar = @am__untar@\n+baseline_dir = @baseline_dir@\n+baseline_subdir_switch = @baseline_subdir_switch@\n+bindir = @bindir@\n+build = @build@\n+build_alias = @build_alias@\n+build_cpu = @build_cpu@\n+build_os = @build_os@\n+build_vendor = @build_vendor@\n+builddir = @builddir@\n+check_msgfmt = @check_msgfmt@\n+datadir = @datadir@\n+datarootdir = @datarootdir@\n+docdir = @docdir@\n+dvidir = @dvidir@\n+enable_shared = @enable_shared@\n+enable_static = @enable_static@\n+exec_prefix = @exec_prefix@\n+get_gcc_base_ver = @get_gcc_base_ver@\n+glibcxx_MOFILES = @glibcxx_MOFILES@\n+glibcxx_PCHFLAGS = @glibcxx_PCHFLAGS@\n+glibcxx_POFILES = @glibcxx_POFILES@\n+glibcxx_builddir = @glibcxx_builddir@\n+glibcxx_compiler_pic_flag = @glibcxx_compiler_pic_flag@\n+glibcxx_compiler_shared_flag = @glibcxx_compiler_shared_flag@\n+glibcxx_cxx98_abi = @glibcxx_cxx98_abi@\n+glibcxx_localedir = @glibcxx_localedir@\n+glibcxx_lt_pic_flag = @glibcxx_lt_pic_flag@\n+glibcxx_prefixdir = @glibcxx_prefixdir@\n+glibcxx_srcdir = @glibcxx_srcdir@\n+glibcxx_toolexecdir = @glibcxx_toolexecdir@\n+glibcxx_toolexeclibdir = @glibcxx_toolexeclibdir@\n+gxx_include_dir = @gxx_include_dir@\n+host = @host@\n+host_alias = @host_alias@\n+host_cpu = @host_cpu@\n+host_os = @host_os@\n+host_vendor = @host_vendor@\n+htmldir = @htmldir@\n+includedir = @includedir@\n+infodir = @infodir@\n+install_sh = @install_sh@\n+libdir = @libdir@\n+libexecdir = @libexecdir@\n+libtool_VERSION = @libtool_VERSION@\n+localedir = @localedir@\n+localstatedir = @localstatedir@\n+lt_host_flags = @lt_host_flags@\n+mandir = @mandir@\n+mkdir_p = @mkdir_p@\n+multi_basedir = @multi_basedir@\n+oldincludedir = @oldincludedir@\n+pdfdir = @pdfdir@\n+port_specific_symbol_files = @port_specific_symbol_files@\n+prefix = @prefix@\n+program_transform_name = @program_transform_name@\n+psdir = @psdir@\n+python_mod_dir = @python_mod_dir@\n+sbindir = @sbindir@\n+sharedstatedir = @sharedstatedir@\n+srcdir = @srcdir@\n+sysconfdir = @sysconfdir@\n+target = @target@\n+target_alias = @target_alias@\n+target_cpu = @target_cpu@\n+target_os = @target_os@\n+target_vendor = @target_vendor@\n+thread_header = @thread_header@\n+tmake_file = @tmake_file@\n+top_build_prefix = @top_build_prefix@\n+top_builddir = @top_builddir@\n+top_srcdir = @top_srcdir@\n+toplevel_builddir = @toplevel_builddir@\n+toplevel_srcdir = @toplevel_srcdir@\n+\n+# May be used by various substitution variables.\n+gcc_version := $(shell @get_gcc_base_ver@ $(top_srcdir)/../gcc/BASE-VER)\n+MAINT_CHARSET = latin1\n+mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n+PWD_COMMAND = $${PWDCMD-pwd}\n+STAMP = echo timestamp >\n+toolexecdir = $(glibcxx_toolexecdir)\n+toolexeclibdir = $(glibcxx_toolexeclibdir)\n+@ENABLE_WERROR_FALSE@WERROR_FLAG = \n+@ENABLE_WERROR_TRUE@WERROR_FLAG = -Werror\n+@ENABLE_EXTERN_TEMPLATE_FALSE@XTEMPLATE_FLAGS = \n+@ENABLE_EXTERN_TEMPLATE_TRUE@XTEMPLATE_FLAGS = -fno-implicit-templates\n+\n+# These bits are all figured out from configure.  Look in acinclude.m4\n+# or configure.ac to see how they are set.  See GLIBCXX_EXPORT_FLAGS.\n+CONFIG_CXXFLAGS = \\\n+\t$(SECTION_FLAGS) $(HWCAP_CFLAGS) -frandom-seed=$@\n+\n+WARN_CXXFLAGS = \\\n+\t$(WARN_FLAGS) $(WERROR_FLAG) -fdiagnostics-show-location=once \n+\n+\n+# -I/-D flags to pass when compiling.\n+AM_CPPFLAGS = $(GLIBCXX_INCLUDES) $(CPPFLAGS)\n+\n+# Convenience library for C++17 runtime.\n+noinst_LTLIBRARIES = libc++20convenience.la\n+headers = \n+# XTEMPLATE_FLAGS =\n+@ENABLE_EXTERN_TEMPLATE_FALSE@inst_sources = \n+\n+# XTEMPLATE_FLAGS = -fno-implicit-templates\n+@ENABLE_EXTERN_TEMPLATE_TRUE@inst_sources = \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tsstream-inst.cc\n+\n+sources = \n+libc__20convenience_la_SOURCES = $(sources)  $(inst_sources)\n+\n+# AM_CXXFLAGS needs to be in each subdirectory so that it can be\n+# modified in a per-library or per-sub-library way.  Need to manually\n+# set this option because CONFIG_CXXFLAGS has to be after\n+# OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n+# as the occasion calls for it.\n+AM_CXXFLAGS = \\\n+\t-std=gnu++20 \\\n+\t$(glibcxx_lt_pic_flag) $(glibcxx_compiler_shared_flag) \\\n+\t$(XTEMPLATE_FLAGS) $(VTV_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) $(OPTIMIZE_CXXFLAGS) $(CONFIG_CXXFLAGS) \\\n+\t-fimplicit-templates\n+\n+AM_MAKEFLAGS = \\\n+\t\"gxx_include_dir=$(gxx_include_dir)\"\n+\n+\n+# Libtool notes\n+\n+# 1) In general, libtool expects an argument such as `--tag=CXX' when\n+# using the C++ compiler, because that will enable the settings\n+# detected when C++ support was being configured.  However, when no\n+# such flag is given in the command line, libtool attempts to figure\n+# it out by matching the compiler name in each configuration section\n+# against a prefix of the command line.  The problem is that, if the\n+# compiler name and its initial flags stored in the libtool\n+# configuration file don't match those in the command line, libtool\n+# can't decide which configuration to use, and it gives up.  The\n+# correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n+# CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n+# attempt to infer which configuration to use.\n+#\n+# The second tag argument, `--tag disable-shared` means that libtool\n+# only compiles each source once, for static objects. In actuality,\n+# glibcxx_lt_pic_flag and glibcxx_compiler_shared_flag are added to\n+# the libtool command that is used create the object, which is\n+# suitable for shared libraries.  The `--tag disable-shared` must be\n+# placed after --tag CXX lest things CXX undo the affect of\n+# disable-shared.\n+\n+# 2) Need to explicitly set LTCXXCOMPILE so that EXTRA_CXX_FLAGS is\n+# last. (That way, things like -O2 passed down from the toplevel can\n+# be overridden by --enable-debug.)\n+LTCXXCOMPILE = \\\n+\t$(LIBTOOL) --tag CXX --tag disable-shared \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=compile $(CXX) $(TOPLEVEL_INCLUDES) \\\n+\t$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(EXTRA_CXX_FLAGS)\n+\n+LTLDFLAGS = $(shell $(SHELL) $(top_srcdir)/../libtool-ldflags $(LDFLAGS))\n+\n+# 3) We'd have a problem when building the shared libstdc++ object if\n+# the rules automake generates would be used.  We cannot allow g++ to\n+# be used since this would add -lstdc++ to the link line which of\n+# course is problematic at this point.  So, we get the top-level\n+# directory to configure libstdc++-v3 to use gcc as the C++\n+# compilation driver.\n+CXXLINK = \\\n+\t$(LIBTOOL) --tag CXX --tag disable-shared \\\n+\t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n+\t--mode=link $(CXX) \\\n+\t$(VTV_CXXLINKFLAGS) \\\n+\t$(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@\n+\n+all: all-am\n+\n+.SUFFIXES:\n+.SUFFIXES: .cc .lo .o .obj\n+$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am $(top_srcdir)/fragment.am $(am__configure_deps)\n+\t@for dep in $?; do \\\n+\t  case '$(am__configure_deps)' in \\\n+\t    *$$dep*) \\\n+\t      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \\\n+\t        && { if test -f $@; then exit 0; else break; fi; }; \\\n+\t      exit 1;; \\\n+\t  esac; \\\n+\tdone; \\\n+\techo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign --ignore-deps src/c++20/Makefile'; \\\n+\t$(am__cd) $(top_srcdir) && \\\n+\t  $(AUTOMAKE) --foreign --ignore-deps src/c++20/Makefile\n+Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status\n+\t@case '$?' in \\\n+\t  *config.status*) \\\n+\t    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \\\n+\t  *) \\\n+\t    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \\\n+\t    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \\\n+\tesac;\n+$(top_srcdir)/fragment.am $(am__empty):\n+\n+$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)\n+\tcd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh\n+\n+$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)\n+\tcd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh\n+$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)\n+\tcd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh\n+$(am__aclocal_m4_deps):\n+\n+clean-noinstLTLIBRARIES:\n+\t-test -z \"$(noinst_LTLIBRARIES)\" || rm -f $(noinst_LTLIBRARIES)\n+\t@list='$(noinst_LTLIBRARIES)'; \\\n+\tlocs=`for p in $$list; do echo $$p; done | \\\n+\t      sed 's|^[^/]*$$|.|; s|/[^/]*$$||; s|$$|/so_locations|' | \\\n+\t      sort -u`; \\\n+\ttest -z \"$$locs\" || { \\\n+\t  echo rm -f $${locs}; \\\n+\t  rm -f $${locs}; \\\n+\t}\n+\n+libc++20convenience.la: $(libc__20convenience_la_OBJECTS) $(libc__20convenience_la_DEPENDENCIES) $(EXTRA_libc__20convenience_la_DEPENDENCIES) \n+\t$(AM_V_CXXLD)$(CXXLINK)  $(libc__20convenience_la_OBJECTS) $(libc__20convenience_la_LIBADD) $(LIBS)\n+\n+mostlyclean-compile:\n+\t-rm -f *.$(OBJEXT)\n+\n+distclean-compile:\n+\t-rm -f *.tab.c\n+\n+.cc.o:\n+\t$(AM_V_CXX)$(CXXCOMPILE) -c -o $@ $<\n+\n+.cc.obj:\n+\t$(AM_V_CXX)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`\n+\n+.cc.lo:\n+\t$(AM_V_CXX)$(LTCXXCOMPILE) -c -o $@ $<\n+\n+mostlyclean-libtool:\n+\t-rm -f *.lo\n+\n+clean-libtool:\n+\t-rm -rf .libs _libs\n+\n+ID: $(am__tagged_files)\n+\t$(am__define_uniq_tagged_files); mkid -fID $$unique\n+tags: tags-am\n+TAGS: tags\n+\n+tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)\n+\tset x; \\\n+\there=`pwd`; \\\n+\t$(am__define_uniq_tagged_files); \\\n+\tshift; \\\n+\tif test -z \"$(ETAGS_ARGS)$$*$$unique\"; then :; else \\\n+\t  test -n \"$$unique\" || unique=$$empty_fix; \\\n+\t  if test $$# -gt 0; then \\\n+\t    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \\\n+\t      \"$$@\" $$unique; \\\n+\t  else \\\n+\t    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \\\n+\t      $$unique; \\\n+\t  fi; \\\n+\tfi\n+ctags: ctags-am\n+\n+CTAGS: ctags\n+ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)\n+\t$(am__define_uniq_tagged_files); \\\n+\ttest -z \"$(CTAGS_ARGS)$$unique\" \\\n+\t  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \\\n+\t     $$unique\n+\n+GTAGS:\n+\there=`$(am__cd) $(top_builddir) && pwd` \\\n+\t  && $(am__cd) $(top_srcdir) \\\n+\t  && gtags -i $(GTAGS_ARGS) \"$$here\"\n+cscopelist: cscopelist-am\n+\n+cscopelist-am: $(am__tagged_files)\n+\tlist='$(am__tagged_files)'; \\\n+\tcase \"$(srcdir)\" in \\\n+\t  [\\\\/]* | ?:[\\\\/]*) sdir=\"$(srcdir)\" ;; \\\n+\t  *) sdir=$(subdir)/$(srcdir) ;; \\\n+\tesac; \\\n+\tfor i in $$list; do \\\n+\t  if test -f \"$$i\"; then \\\n+\t    echo \"$(subdir)/$$i\"; \\\n+\t  else \\\n+\t    echo \"$$sdir/$$i\"; \\\n+\t  fi; \\\n+\tdone >> $(top_builddir)/cscope.files\n+\n+distclean-tags:\n+\t-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags\n+check-am: all-am\n+check: check-am\n+all-am: Makefile $(LTLIBRARIES)\n+installdirs:\n+install: install-am\n+install-exec: install-exec-am\n+install-data: install-data-am\n+uninstall: uninstall-am\n+\n+install-am: all-am\n+\t@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am\n+\n+installcheck: installcheck-am\n+install-strip:\n+\tif test -z '$(STRIP)'; then \\\n+\t  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n+\t    install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\\n+\t      install; \\\n+\telse \\\n+\t  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n+\t    install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\\n+\t    \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\" install; \\\n+\tfi\n+mostlyclean-generic:\n+\n+clean-generic:\n+\n+distclean-generic:\n+\t-test -z \"$(CONFIG_CLEAN_FILES)\" || rm -f $(CONFIG_CLEAN_FILES)\n+\t-test . = \"$(srcdir)\" || test -z \"$(CONFIG_CLEAN_VPATH_FILES)\" || rm -f $(CONFIG_CLEAN_VPATH_FILES)\n+\n+maintainer-clean-generic:\n+\t@echo \"This command is intended for maintainers to use\"\n+\t@echo \"it deletes files that may require special tools to rebuild.\"\n+clean: clean-am\n+\n+clean-am: clean-generic clean-libtool clean-noinstLTLIBRARIES \\\n+\tmostlyclean-am\n+\n+distclean: distclean-am\n+\t-rm -f Makefile\n+distclean-am: clean-am distclean-compile distclean-generic \\\n+\tdistclean-tags\n+\n+dvi: dvi-am\n+\n+dvi-am:\n+\n+html: html-am\n+\n+html-am:\n+\n+info: info-am\n+\n+info-am:\n+\n+install-data-am:\n+\n+install-dvi: install-dvi-am\n+\n+install-dvi-am:\n+\n+install-exec-am:\n+\n+install-html: install-html-am\n+\n+install-html-am:\n+\n+install-info: install-info-am\n+\n+install-info-am:\n+\n+install-man:\n+\n+install-pdf: install-pdf-am\n+\n+install-pdf-am:\n+\n+install-ps: install-ps-am\n+\n+install-ps-am:\n+\n+installcheck-am:\n+\n+maintainer-clean: maintainer-clean-am\n+\t-rm -f Makefile\n+maintainer-clean-am: distclean-am maintainer-clean-generic\n+\n+mostlyclean: mostlyclean-am\n+\n+mostlyclean-am: mostlyclean-compile mostlyclean-generic \\\n+\tmostlyclean-libtool\n+\n+pdf: pdf-am\n+\n+pdf-am:\n+\n+ps: ps-am\n+\n+ps-am:\n+\n+uninstall-am:\n+\n+.MAKE: install-am install-strip\n+\n+.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean clean-generic \\\n+\tclean-libtool clean-noinstLTLIBRARIES cscopelist-am ctags \\\n+\tctags-am distclean distclean-compile distclean-generic \\\n+\tdistclean-libtool distclean-tags dvi dvi-am html html-am info \\\n+\tinfo-am install install-am install-data install-data-am \\\n+\tinstall-dvi install-dvi-am install-exec install-exec-am \\\n+\tinstall-html install-html-am install-info install-info-am \\\n+\tinstall-man install-pdf install-pdf-am install-ps \\\n+\tinstall-ps-am install-strip installcheck installcheck-am \\\n+\tinstalldirs maintainer-clean maintainer-clean-generic \\\n+\tmostlyclean mostlyclean-compile mostlyclean-generic \\\n+\tmostlyclean-libtool pdf pdf-am ps ps-am tags tags-am uninstall \\\n+\tuninstall-am\n+\n+.PRECIOUS: Makefile\n+\n+\n+vpath % $(top_srcdir)/src/c++20\n+\n+# Tell versions [3.59,3.63) of GNU make to not export all variables.\n+# Otherwise a system limit (for SysV at least) may be exceeded.\n+.NOEXPORT:"}, {"sha": "e04560d28c8d00643d19f3dcfca25e5554515f30", "filename": "libstdc++-v3/src/c++20/sstream-inst.cc", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Fsstream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Fsstream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B20%2Fsstream-inst.cc?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -0,0 +1,108 @@\n+// Explicit instantiation file.\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882:\n+//\n+\n+// Instantiations in this file are only for the new SSO std::string ABI\n+#include <sstream>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+template basic_stringbuf<char>::basic_stringbuf(const allocator_type&);\n+template basic_stringbuf<char>::basic_stringbuf(ios_base::openmode,\n+\t\t\t\t\t\tconst allocator_type&);\n+template basic_stringbuf<char>::basic_stringbuf(__string_type&&,\n+\t\t\t\t\t\tios_base::openmode);\n+template basic_stringbuf<char>::basic_stringbuf(basic_stringbuf&&,\n+\t\t\t\t\t\tconst allocator_type&);\n+template basic_stringbuf<char>::allocator_type\n+basic_stringbuf<char>::get_allocator() const noexcept;\n+template basic_stringbuf<char>::__sv_type\n+basic_stringbuf<char>::view() const noexcept;\n+\n+template basic_istringstream<char>::basic_istringstream(ios_base::openmode,\n+\t\t\t\t\t\t\tconst allocator_type&);\n+template basic_istringstream<char>::basic_istringstream(__string_type&&,\n+\t\t\t\t\t\t\tios_base::openmode);\n+template string_view\n+basic_istringstream<char>::view() const noexcept;\n+\n+template basic_ostringstream<char>::basic_ostringstream(ios_base::openmode,\n+\t\t\t\t\t\t\tconst allocator_type&);\n+template basic_ostringstream<char>::basic_ostringstream(__string_type&&,\n+\t\t\t\t\t\t\tios_base::openmode);\n+template string_view\n+basic_ostringstream<char>::view() const noexcept;\n+\n+template basic_stringstream<char>::basic_stringstream(ios_base::openmode,\n+\t\t\t\t\t\t      const allocator_type&);\n+template basic_stringstream<char>::basic_stringstream(__string_type&&,\n+\t\t\t\t\t\t      ios_base::openmode);\n+template string_view\n+basic_stringstream<char>::view() const noexcept;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+using wsv_type = basic_string_view<wchar_t>;\n+\n+template basic_stringbuf<wchar_t>::basic_stringbuf(const allocator_type&);\n+template basic_stringbuf<wchar_t>::basic_stringbuf(ios_base::openmode,\n+\t\t\t\t\t\t   const allocator_type&);\n+template basic_stringbuf<wchar_t>::basic_stringbuf(__string_type&&,\n+\t\t\t\t\t\t   ios_base::openmode);\n+template basic_stringbuf<wchar_t>::basic_stringbuf(basic_stringbuf&&,\n+\t\t\t\t\t\t   const allocator_type&);\n+template basic_stringbuf<wchar_t>::allocator_type\n+basic_stringbuf<wchar_t>::get_allocator() const noexcept;\n+\n+template basic_istringstream<wchar_t>::__stringbuf_type::__sv_type\n+basic_stringbuf<wchar_t>::view() const noexcept;\n+\n+template basic_istringstream<wchar_t>::basic_istringstream(ios_base::openmode,\n+\t\t\t\t\t\t\t   const allocator_type&);\n+template basic_istringstream<wchar_t>::basic_istringstream(__string_type&&,\n+\t\t\t\t\t\t\t   ios_base::openmode);\n+template wstring_view\n+basic_istringstream<wchar_t>::view() const noexcept;\n+\n+template basic_ostringstream<wchar_t>::basic_ostringstream(ios_base::openmode,\n+\t\t\t\t\t\t\t   const allocator_type&);\n+template basic_ostringstream<wchar_t>::basic_ostringstream(__string_type&&,\n+\t\t\t\t\t\t\t   ios_base::openmode);\n+template wstring_view\n+basic_ostringstream<wchar_t>::view() const noexcept;\n+\n+template basic_stringstream<wchar_t>::basic_stringstream(ios_base::openmode,\n+\t\t\t\t\t\t\t const allocator_type&);\n+template basic_stringstream<wchar_t>::basic_stringstream(__string_type&&,\n+\t\t\t\t\t\t\t ios_base::openmode);\n+template wstring_view\n+basic_stringstream<wchar_t>::view() const noexcept;\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+}"}, {"sha": "496aa6963e0b2a77006e92cb13fb266302be2375", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/cons/char/1.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fcons%2Fchar%2F1.cc?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -0,0 +1,85 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++20 29.8.2.2  basic_stringbuf constructors  [stringbuf.cons\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <string>\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::istringstream::allocator_type a;\n+  std::istringstream stm(std::ios_base::in, a);\n+}\n+\n+auto const cstr = \"This is a test\";\n+\n+void\n+test02()\n+{\n+  std::string s1(cstr);\n+  std::istringstream stm(std::move(s1));\n+  VERIFY( s1.empty() );\n+\n+  std::string s2(cstr);\n+  VERIFY( stm.str() == s2 );\n+}\n+\n+void\n+test03()\n+{\n+  using alloc_type = __gnu_test::tracker_allocator<char>;\n+  using str_type = std::basic_string<char, std::char_traits<char>, alloc_type>;\n+\n+  auto const mode = std::ios_base::in;\n+  str_type s1(cstr);\n+\n+  {\n+    std::istringstream::allocator_type a;\n+    std::istringstream sbuf(s1, mode, a);\n+    std::string s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+\n+  {\n+    std::istringstream sbuf(s1, mode);\n+    std::string s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+\n+  {\n+    std::istringstream sbuf(s1);\n+    std::string s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}"}, {"sha": "26a3a86c46e8c011756bcffb0dcfbb612da721d7", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/cons/wchar_t/1.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fcons%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fcons%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fcons%2Fwchar_t%2F1.cc?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -0,0 +1,85 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++20 29.8.2.2  basic_stringbuf constructors  [stringbuf.cons\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <string>\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::wistringstream::allocator_type a;\n+  std::wistringstream stm(std::ios_base::in, a);\n+}\n+\n+auto const cstr = L\"This is a test\";\n+\n+void\n+test02()\n+{\n+  std::wstring s1(cstr);\n+  std::wistringstream stm(std::move(s1));\n+  VERIFY( s1.empty() );\n+\n+  std::wstring s2(cstr);\n+  VERIFY( stm.str() == s2 );\n+}\n+\n+void\n+test03()\n+{\n+  using alloc_type = __gnu_test::tracker_allocator<wchar_t>;\n+  using str_type = std::basic_string<wchar_t, std::char_traits<wchar_t>, alloc_type>;\n+\n+  auto const mode = std::ios_base::in;\n+  str_type s1(cstr);\n+\n+  {\n+    std::wistringstream::allocator_type a;\n+    std::wistringstream sbuf(s1, mode, a);\n+    std::wstring s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+\n+  {\n+    std::wistringstream sbuf(s1, mode);\n+    std::wstring s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+\n+  {\n+    std::wistringstream sbuf(s1);\n+    std::wstring s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}"}, {"sha": "091de5f7a797f01f18f60b892c78a5c926677613", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/view/char/1.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fview%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fview%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fview%2Fchar%2F1.cc?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 27.7.1.1  basic_stringbuf constructors  [lib.stringbuf.cons]\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+int\n+main()\n+{\n+  std::string s(\"This is a test\");\n+  std::istringstream stm(s);\n+  VERIFY( stm.view() == s );\n+  return 0;\n+}"}, {"sha": "f6599643bd90eb56db6db0634660f33d87761a82", "filename": "libstdc++-v3/testsuite/27_io/basic_istringstream/view/wchar_t/1.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fview%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fview%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_istringstream%2Fview%2Fwchar_t%2F1.cc?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 27.7.1.1  basic_stringbuf constructors  [lib.stringbuf.cons]\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+int\n+main()\n+{\n+  std::wstring s(L\"This is a test\");\n+  std::wistringstream stm(s);\n+  VERIFY( stm.view() == s );\n+  return 0;\n+}"}, {"sha": "cba69f80931ad0da4f40bd38e757a78dc20129fa", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/cons/char/1.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2Fchar%2F1.cc?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -0,0 +1,85 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++20 29.8.2.2  basic_stringbuf constructors  [stringbuf.cons\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <string>\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::ostringstream::allocator_type a;\n+  std::ostringstream stm(std::ios_base::in, a);\n+}\n+\n+auto const cstr = \"This is a test\";\n+\n+void\n+test02()\n+{\n+  std::string s1(cstr);\n+  std::ostringstream stm(std::move(s1));\n+  VERIFY( s1.empty() );\n+\n+  std::string s2(cstr);\n+  VERIFY( stm.str() == s2 );\n+}\n+\n+void\n+test03()\n+{\n+  using alloc_type = __gnu_test::tracker_allocator<char>;\n+  using str_type = std::basic_string<char, std::char_traits<char>, alloc_type>;\n+\n+  auto const mode = std::ios_base::out;\n+  str_type s1(cstr);\n+\n+  {\n+    std::ostringstream::allocator_type a;\n+    std::ostringstream sbuf(s1, mode, a);\n+    std::string s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+\n+  {\n+    std::ostringstream sbuf(s1, mode);\n+    std::string s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+\n+  {\n+    std::ostringstream sbuf(s1);\n+    std::string s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}"}, {"sha": "9021186d2c8a80b9e0b4711d7d40c0ef56e60d3e", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/cons/wchar_t/1.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fcons%2Fwchar_t%2F1.cc?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -0,0 +1,85 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++20 29.8.2.2  basic_stringbuf constructors  [stringbuf.cons\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <string>\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::wostringstream::allocator_type a;\n+  std::wostringstream stm(std::ios_base::out, a);\n+}\n+\n+auto const cstr = L\"This is a test\";\n+\n+void\n+test02()\n+{\n+  std::wstring s1(cstr);\n+  std::wostringstream stm(std::move(s1));\n+  VERIFY( s1.empty() );\n+\n+  std::wstring s2(cstr);\n+  VERIFY( stm.str() == s2 );\n+}\n+\n+void\n+test03()\n+{\n+  using alloc_type = __gnu_test::tracker_allocator<wchar_t>;\n+  using str_type = std::basic_string<wchar_t, std::char_traits<wchar_t>, alloc_type>;\n+\n+  auto const mode = std::ios_base::out;\n+  str_type s1(cstr);\n+\n+  {\n+    std::wostringstream::allocator_type a;\n+    std::wostringstream sbuf(s1, mode, a);\n+    std::wstring s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+\n+  {\n+    std::wostringstream sbuf(s1, mode);\n+    std::wstring s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+\n+  {\n+    std::wostringstream sbuf(s1);\n+    std::wstring s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}"}, {"sha": "a366363abb59a8e8d3f314b95577191216c162e0", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/view/char/1.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fview%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fview%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fview%2Fchar%2F1.cc?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 27.7.1.1  basic_stringbuf constructors  [lib.stringbuf.cons]\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+int\n+main()\n+{\n+  std::string s(\"This is a test\");\n+  std::ostringstream stm(s);\n+  VERIFY( stm.view() == s );\n+  return 0;\n+}"}, {"sha": "1ebf7c505e3062e54d6af7f2c7821aee75e4f00f", "filename": "libstdc++-v3/testsuite/27_io/basic_ostringstream/view/wchar_t/1.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fview%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fview%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostringstream%2Fview%2Fwchar_t%2F1.cc?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 27.7.1.1  basic_stringbuf constructors  [lib.stringbuf.cons]\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+int\n+main()\n+{\n+  std::wstring s(L\"This is a test\");\n+  std::wostringstream stm(s);\n+  VERIFY( stm.view() == s );\n+  return 0;\n+}"}, {"sha": "ce669358c85083c809db0f80ed3551f58b79ed2d", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/cons/char/2.cc", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2Fchar%2F2.cc?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -0,0 +1,121 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 27.7.1.1  basic_stringbuf constructors  [lib.stringbuf.cons]\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <string>\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  {\n+    using alloc_type = __gnu_test::uneq_allocator<char>;\n+    using sbuf_t = std::basic_stringbuf<char, std::char_traits<char>,\n+\t\t\t\t\t\talloc_type>;\n+\n+    alloc_type aa;\n+    sbuf_t sbuf1(aa);\n+    VERIFY( aa == sbuf1.get_allocator() );\n+\n+    alloc_type aaa(42);\n+    sbuf_t sbuf2(aaa);\n+    VERIFY( aaa == sbuf2.get_allocator() );\n+\n+    VERIFY( sbuf1.get_allocator() != sbuf2.get_allocator() );\n+  }\n+\n+  std::stringbuf::allocator_type a;\n+  {\n+    std::stringbuf sbuf(std::ios_base::in, a);\n+  }\n+\n+  {\n+    std::stringbuf sbuf(a);\n+  }\n+}\n+\n+auto const cstr = \"This is a test\";\n+\n+void\n+test02()\n+{\n+  std::string s1(cstr);\n+  std::stringbuf sbuf(std::move(s1));\n+  VERIFY( s1.empty() );\n+\n+  std::string s2(cstr);\n+  VERIFY( sbuf.str() == s2 );\n+}\n+\n+void\n+test03()\n+{\n+  using alloc_type = __gnu_test::tracker_allocator<char>;\n+  using str_type = std::basic_string<char, std::char_traits<char>, alloc_type>;\n+\n+  auto const mode = std::ios_base::in | std::ios_base::out;\n+  str_type s1(cstr);\n+\n+  {\n+    std::stringbuf::allocator_type a;\n+    std::stringbuf sbuf(s1, mode, a);\n+    std::string s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+\n+  {\n+    std::stringbuf sbuf(s1, mode);\n+    std::string s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+\n+  {\n+    std::stringbuf sbuf(s1);\n+    std::string s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+}\n+\n+void\n+test04()\n+{\n+  std::stringbuf sbuf1(cstr);\n+\n+  std::stringbuf::allocator_type a;\n+  std::stringbuf sbuf2(std::move(sbuf1), a);\n+  VERIFY( sbuf1.str().empty() );\n+\n+  std::string s(cstr);\n+  VERIFY( sbuf2.str() == s );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  return 0;\n+}"}, {"sha": "e05acc42165974968625bd8aebf80e184508b4c1", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/cons/wchar_t/2.cc", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fcons%2Fwchar_t%2F2.cc?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -0,0 +1,105 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 27.7.1.1  basic_stringbuf constructors  [lib.stringbuf.cons]\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <string>\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::wstringbuf::allocator_type a;\n+  {\n+    std::wstringbuf sbuf(std::ios_base::in, a);\n+  }\n+\n+  {\n+    std::wstringbuf sbuf(a);\n+  }\n+}\n+\n+auto const cstr = L\"This is a test\";\n+\n+void\n+test02()\n+{\n+  std::wstring s1(cstr);\n+  std::wstringbuf sbuf(std::move(s1));\n+  VERIFY( s1.empty() );\n+\n+  std::wstring s2(cstr);\n+  VERIFY( sbuf.str() == s2 );\n+}\n+\n+void\n+test03()\n+{\n+  using alloc_type = __gnu_test::tracker_allocator<wchar_t>;\n+  using str_type = std::basic_string<wchar_t, std::char_traits<wchar_t>, alloc_type>;\n+\n+  auto const mode = std::ios_base::in | std::ios_base::out;\n+  str_type s1(cstr);\n+\n+  {\n+    std::wstringbuf::allocator_type a;\n+    std::wstringbuf sbuf(s1, mode, a);\n+    std::wstring s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+\n+  {\n+    std::wstringbuf sbuf(s1, mode);\n+    std::wstring s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+\n+  {\n+    std::wstringbuf sbuf(s1);\n+    std::wstring s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+}\n+\n+void\n+test04()\n+{\n+  std::wstringbuf sbuf1(cstr);\n+\n+  std::wstringbuf::allocator_type a;\n+  std::wstringbuf sbuf2(std::move(sbuf1), a);\n+  VERIFY( sbuf1.str().empty() );\n+\n+  std::wstring s(cstr);\n+  VERIFY( sbuf2.str() == s );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+  return 0;\n+}"}, {"sha": "8f8c62daa21fb3282f362166c62b56dc435d2f75", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/view/char/1.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fview%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fview%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fview%2Fchar%2F1.cc?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 27.7.1.1  basic_stringbuf constructors  [lib.stringbuf.cons]\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+int\n+main()\n+{\n+  std::string s(\"This is a test\");\n+  std::stringbuf sbuf(s);\n+  VERIFY( sbuf.view() == s );\n+  return 0;\n+}"}, {"sha": "0d23d7d8e66d69594867bd29ed7fc3d9245e98ba", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/view/wchar_t/1.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fview%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fview%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Fview%2Fwchar_t%2F1.cc?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 27.7.1.1  basic_stringbuf constructors  [lib.stringbuf.cons]\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+int\n+main()\n+{\n+  std::wstring s(L\"This is a test\");\n+  std::wstringbuf sbuf(s);\n+  VERIFY( sbuf.view() == s );\n+  return 0;\n+}"}, {"sha": "83a3374b3cdbb8ac785f99f200bad2f27976887d", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/cons/char/1.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fcons%2Fchar%2F1.cc?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -0,0 +1,85 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++20 29.8.2.2  basic_stringbuf constructors  [stringbuf.cons\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <string>\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::stringstream::allocator_type a;\n+  std::stringstream stm(std::ios_base::in, a);\n+}\n+\n+auto const cstr = \"This is a test\";\n+\n+void\n+test02()\n+{\n+  std::string s1(cstr);\n+  std::stringstream stm(std::move(s1));\n+  VERIFY( s1.empty() );\n+\n+  std::string s2(cstr);\n+  VERIFY( stm.str() == s2 );\n+}\n+\n+void\n+test03()\n+{\n+  using alloc_type = __gnu_test::tracker_allocator<char>;\n+  using str_type = std::basic_string<char, std::char_traits<char>, alloc_type>;\n+\n+  auto const mode = std::ios_base::in | std::ios_base::out;\n+  str_type s1(cstr);\n+\n+  {\n+    std::stringstream::allocator_type a;\n+    std::stringstream sbuf(s1, mode, a);\n+    std::string s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+\n+  {\n+    std::stringstream sbuf(s1, mode);\n+    std::string s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+\n+  {\n+    std::stringstream sbuf(s1);\n+    std::string s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}"}, {"sha": "26a3a86c46e8c011756bcffb0dcfbb612da721d7", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/cons/wchar_t/1.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fcons%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fcons%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fcons%2Fwchar_t%2F1.cc?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -0,0 +1,85 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++20 29.8.2.2  basic_stringbuf constructors  [stringbuf.cons\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <string>\n+#include <testsuite_allocator.h>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::wistringstream::allocator_type a;\n+  std::wistringstream stm(std::ios_base::in, a);\n+}\n+\n+auto const cstr = L\"This is a test\";\n+\n+void\n+test02()\n+{\n+  std::wstring s1(cstr);\n+  std::wistringstream stm(std::move(s1));\n+  VERIFY( s1.empty() );\n+\n+  std::wstring s2(cstr);\n+  VERIFY( stm.str() == s2 );\n+}\n+\n+void\n+test03()\n+{\n+  using alloc_type = __gnu_test::tracker_allocator<wchar_t>;\n+  using str_type = std::basic_string<wchar_t, std::char_traits<wchar_t>, alloc_type>;\n+\n+  auto const mode = std::ios_base::in;\n+  str_type s1(cstr);\n+\n+  {\n+    std::wistringstream::allocator_type a;\n+    std::wistringstream sbuf(s1, mode, a);\n+    std::wstring s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+\n+  {\n+    std::wistringstream sbuf(s1, mode);\n+    std::wstring s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+\n+  {\n+    std::wistringstream sbuf(s1);\n+    std::wstring s2(cstr);\n+    VERIFY( sbuf.str() == s2 );\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  return 0;\n+}"}, {"sha": "f47035cf148132385b478c007c9fa0448efedf2a", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/view/char/1.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fview%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fview%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fview%2Fchar%2F1.cc?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 27.7.1.1  basic_stringbuf constructors  [lib.stringbuf.cons]\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+int\n+main()\n+{\n+  std::string s(\"This is a test\");\n+  std::stringstream stm(s);\n+  VERIFY( stm.view() == s );\n+  return 0;\n+}"}, {"sha": "d707cfed2435295747807684b4e068fdbd239afd", "filename": "libstdc++-v3/testsuite/27_io/basic_stringstream/view/wchar_t/1.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fview%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fview%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringstream%2Fview%2Fwchar_t%2F1.cc?ref=a0e4d7b44c544c84cffc7ff9c64b6f1af14fb08d", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 27.7.1.1  basic_stringbuf constructors  [lib.stringbuf.cons]\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// { dg-require-effective-target cxx11-abi }\n+\n+#include <sstream>\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+int\n+main()\n+{\n+  std::wstring s(L\"This is a test\");\n+  std::wstringstream stm(s);\n+  VERIFY( stm.view() == s );\n+  return 0;\n+}"}]}