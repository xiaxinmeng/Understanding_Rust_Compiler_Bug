{"sha": "ead02915fa92af8cb1b801a83fc4019859eafef6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFkMDI5MTVmYTkyYWY4Y2IxYjgwMWE4M2ZjNDAxOTg1OWVhZmVmNg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-03-05T20:22:08Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1992-03-05T20:22:08Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r397", "tree": {"sha": "56793a1360d0fc67b30b8ed36df6997ad885bed8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56793a1360d0fc67b30b8ed36df6997ad885bed8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ead02915fa92af8cb1b801a83fc4019859eafef6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ead02915fa92af8cb1b801a83fc4019859eafef6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ead02915fa92af8cb1b801a83fc4019859eafef6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ead02915fa92af8cb1b801a83fc4019859eafef6/comments", "author": null, "committer": null, "parents": [{"sha": "bf6beae550227348b95a592def3676335475dd17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf6beae550227348b95a592def3676335475dd17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf6beae550227348b95a592def3676335475dd17"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "3026203d61620f1481d45f038e95ef935bd12a72", "filename": "gcc/integrate.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ead02915fa92af8cb1b801a83fc4019859eafef6/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ead02915fa92af8cb1b801a83fc4019859eafef6/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=ead02915fa92af8cb1b801a83fc4019859eafef6", "patch": "@@ -164,6 +164,16 @@ function_cannot_inline_p (fndecl)\n \treturn \"function too large to be inline\";\n     }\n \n+  /* We cannot inline this function if forced_labels is non-zero.  This\n+     implies that a label in this function was used as an initializer.\n+     Because labels can not be duplicated, all labels in the function\n+     will be renamed when it is inlined.  However, there is no way to find\n+     and fix all variables initialized with addresses of labels in this\n+     function, hence inlining is impossible.  */\n+\n+  if (forced_labels)\n+    return \"function with label addresses used in initializers cannot inline\";\n+\n   return 0;\n }\n \f"}]}