{"sha": "7797ff539ae89500ec8f93aec8cf878e0000165a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc5N2ZmNTM5YWU4OTUwMGVjOGY5M2FlYzhjZjg3OGUwMDAwMTY1YQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2004-04-23T07:58:23Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2004-04-23T07:58:23Z"}, "message": "invoke.texi (Optimize Options): Refer to \"unit-at-a-time mode\" rather than \"-funit-at-a-time\" since -O2 enables...\n\n2004-04-23  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* doc/invoke.texi (Optimize Options): Refer to \"unit-at-a-time\n\tmode\" rather than \"-funit-at-a-time\" since -O2 enables it\n\twithout requiring -f* options.\tRefer to -fprofile-generate and\n\t-fprofile-use correctly.  Move -funit-at-a-time among options\n\tenabled by -O.\tAdd information about unit-at-a-time caveats.\n\nFrom-SVN: r81082", "tree": {"sha": "0d50b045ced05b9b9a08fcd6f13180185ae0eed7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d50b045ced05b9b9a08fcd6f13180185ae0eed7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7797ff539ae89500ec8f93aec8cf878e0000165a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7797ff539ae89500ec8f93aec8cf878e0000165a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7797ff539ae89500ec8f93aec8cf878e0000165a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7797ff539ae89500ec8f93aec8cf878e0000165a/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4e7ef8d2b10449ae032857a20df885f3c8a108d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e7ef8d2b10449ae032857a20df885f3c8a108d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e7ef8d2b10449ae032857a20df885f3c8a108d"}], "stats": {"total": 69, "additions": 52, "deletions": 17}, "files": [{"sha": "b45f29a12bb31ebf889621af55c894af3e28af58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7797ff539ae89500ec8f93aec8cf878e0000165a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7797ff539ae89500ec8f93aec8cf878e0000165a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7797ff539ae89500ec8f93aec8cf878e0000165a", "patch": "@@ -1,3 +1,11 @@\n+2004-04-23  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* doc/invoke.texi (Optimize Options): Refer to \"unit-at-a-time\n+\tmode\" rather than \"-funit-at-a-time\" since -O2 enables it\n+\twithout requiring -f* options.\tRefer to -fprofile-generate and\n+\t-fprofile-use correctly.  Move -funit-at-a-time among options\n+\tenabled by -O.\tAdd information about unit-at-a-time caveats.\n+\n 2004-04-22  Per Bothner  <per@bothner.com>\n \n \t* line-map.h (struct line_maps):  New field highest_line."}, {"sha": "947679647c8b034c5cc4e715f8b6b99a993e1b44", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 44, "deletions": 17, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7797ff539ae89500ec8f93aec8cf878e0000165a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7797ff539ae89500ec8f93aec8cf878e0000165a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7797ff539ae89500ec8f93aec8cf878e0000165a", "patch": "@@ -3594,10 +3594,11 @@ the performance and/or code size at the expense of compilation time\n and possibly the ability to debug the program.\n \n The compiler performs optimization based on the knowledge it has of\n-the program.  Using the @option{-funit-at-a-time} flag will allow the\n-compiler to consider information gained from later functions in the\n-file when compiling a function.  Compiling multiple files at once to a\n-single output file (and using @option{-funit-at-a-time}) will allow\n+the program.  Optimization levels @option{-O2} and above, in\n+particular, enable @emph{unit-at-a-time} mode, which allows the\n+compiler to consider information gained from later functions in\n+the file when compiling a function.  Compiling multiple files at\n+once to a single output file in @emph{unit-at-a-time} mode allows\n the compiler to use information gained from all of the files when\n compiling each of them.\n \n@@ -4343,6 +4344,40 @@ If @var{n} is not specified or is zero, use a machine-dependent default.\n \n Enabled at levels @option{-O2}, @option{-O3}.\n \n+@item -funit-at-a-time\n+@opindex funit-at-a-time\n+Parse the whole compilation unit before starting to produce code.\n+This allows some extra optimizations to take place but consumes\n+more memory (in general).  There are some compatibility issues\n+with @emph{unit-at-at-time} mode:\n+@itemize @bullet\n+@item\n+enabling @emph{unit-at-a-time} mode may change the order\n+in which functions, variables, and top-level @code{asm} statements\n+are emitted, and will likely break code relying on some particular\n+ordering.  The majority of such top-level @code{asm} statements,\n+though, can be replaced by @code{section} attributes.\n+\n+@item\n+@emph{unit-at-a-time} mode removes unreferenced static variables\n+and functions are removed.  This may result in undefined references\n+when an @code{asm} statement refers directly to variables or functions\n+that are otherwise unused.  In that case either the variable/function\n+shall be listed as an operand of the @code{asm} statement operand or,\n+in the case of top-level @code{asm} statements the attribute @code{used}\n+shall be used on the declaration.\n+\n+@item\n+Static functions now can use non-standard passing conventions that\n+may break @code{asm} statements calling functions directly. Again,\n+attribute @code{used} will prevent this behavior.\n+@end itemize\n+\n+As a temporary workaround, @option{-fno-unit-at-a-time} can be used,\n+but this scheme may not be supported by future releases of GCC. \n+\n+Enabled at levels @option{-O2}, @option{-O3}.\n+\n @item -fweb\n @opindex fweb\n Constructs webs as commonly used for register allocation purposes and assign\n@@ -4549,7 +4584,7 @@ With @option{-fbranch-probabilities}, it reads back the data gathered\n from profiling values of expressions and adds @samp{REG_VALUE_PROFILE}\n notes to instructions for their later usage in optimizations.\n \n-Enabled with @option{-profile-generate} and @option{-profile-use}.\n+Enabled with @option{-fprofile-generate} and @option{-fprofile-use}.\n \n @item -fvpt\n @opindex fvpt\n@@ -4561,7 +4596,7 @@ and actually performs the optimizations based on them.\n Currently the optimizations include specialization of division operation\n using the knowledge about the value of the denominator.\n \n-Enabled with @option{-profile-generate} and @option{-profile-use}.\n+Enabled with @option{-fprofile-generate} and @option{-fprofile-use}.\n \n @item -frename-registers\n @opindex frename-registers\n@@ -4586,15 +4621,7 @@ Perform tail duplication to enlarge superblock size. This transformation\n simplifies the control flow of the function allowing other optimizations to do\n better job.\n \n-Enabled with @option{-profile-use}.\n-\n-@item -funit-at-a-time\n-@opindex funit-at-a-time\n-Parse the whole compilation unit before starting to produce code.\n-This allows some extra optimizations to take place but consumes more\n-memory.\n-\n-Enabled at levels @option{-O2}, @option{-O3}.\n+Enabled with @option{-fprofile-use}.\n \n @item -funroll-loops\n @opindex funroll-loops\n@@ -4604,7 +4631,7 @@ upon entry to the loop.  @option{-funroll-loops} implies\n (i.e. complete removal of loops with small constant number of iterations).\n This option makes code larger, and may or may not make it run faster.\n \n-Enabled with @option{-profile-use}.\n+Enabled with @option{-fprofile-use}.\n \n @item -funroll-all-loops\n @opindex funroll-all-loops\n@@ -4619,7 +4646,7 @@ Peels the loops for that there is enough information that they do not\n roll much (from profile feedback).  It also turns on complete loop peeling\n (i.e. complete removal of loops with small constant number of iterations).\n \n-Enabled with @option{-profile-use}.\n+Enabled with @option{-fprofile-use}.\n \n @item -funswitch-loops\n @opindex funswitch-loops"}]}