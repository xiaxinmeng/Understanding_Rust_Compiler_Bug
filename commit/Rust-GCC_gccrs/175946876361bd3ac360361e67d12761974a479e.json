{"sha": "175946876361bd3ac360361e67d12761974a479e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc1OTQ2ODc2MzYxYmQzYWMzNjAzNjFlNjdkMTI3NjE5NzRhNDc5ZQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-01-23T12:24:55Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-01-23T12:24:55Z"}, "message": "Fix profile_quality sanity check.\n\n2018-01-22  Martin Liska  <mliska@suse.cz>\n\n\t* profile-count.h (enum profile_quality): Add\n\tprofile_uninitialized as the first value. Do not number values\n\tas they are zero based.\n\t(profile_count::verify): Update sanity check.\n\t(profile_probability::verify): Likewise.\n\nFrom-SVN: r256982", "tree": {"sha": "912046844c2e3140f6472ef118a01bc31e65bdb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/912046844c2e3140f6472ef118a01bc31e65bdb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/175946876361bd3ac360361e67d12761974a479e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/175946876361bd3ac360361e67d12761974a479e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/175946876361bd3ac360361e67d12761974a479e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/175946876361bd3ac360361e67d12761974a479e/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d55d1e4fa9fbab3e47b91391c6a3986ca9f6f1ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d55d1e4fa9fbab3e47b91391c6a3986ca9f6f1ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d55d1e4fa9fbab3e47b91391c6a3986ca9f6f1ff"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "19b21375512870f72240d0b82e06540421e3e420", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/175946876361bd3ac360361e67d12761974a479e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/175946876361bd3ac360361e67d12761974a479e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=175946876361bd3ac360361e67d12761974a479e", "patch": "@@ -1,3 +1,11 @@\n+2018-01-23  Martin Liska  <mliska@suse.cz>\n+\n+\t* profile-count.h (enum profile_quality): Add\n+\tprofile_uninitialized as the first value. Do not number values\n+\tas they are zero based.\n+\t(profile_count::verify): Update sanity check.\n+\t(profile_probability::verify): Likewise.\n+\n 2018-01-23  Nathan Sidwell  <nathan@acm.org>\n \n \t* doc/invoke.texi (ffor-scope): Deprecate."}, {"sha": "234e3886cb2bd32854a6736efc79ebdf1873b24e", "filename": "gcc/profile-count.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/175946876361bd3ac360361e67d12761974a479e/gcc%2Fprofile-count.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/175946876361bd3ac360361e67d12761974a479e/gcc%2Fprofile-count.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile-count.h?ref=175946876361bd3ac360361e67d12761974a479e", "patch": "@@ -26,34 +26,36 @@ struct function;\n /* Quality of the profile count.  Because gengtype does not support enums\n    inside of classes, this is in global namespace.  */\n enum profile_quality {\n+  /* Uninitialized value.  */\n+  profile_uninitialized,\n   /* Profile is based on static branch prediction heuristics and may\n      or may not match reality.  It is local to function and can not be compared\n      inter-procedurally.  Never used by probabilities (they are always local).\n    */\n-  profile_guessed_local = 1,\n+  profile_guessed_local,\n   /* Profile was read by feedback and was 0, we used local heuristics to guess\n      better.  This is the case of functions not run in profile fedback.\n      Never used by probabilities.  */\n-  profile_guessed_global0 = 2,\n+  profile_guessed_global0,\n \n   /* Same as profile_guessed_global0 but global count is adjusted 0.  */\n-  profile_guessed_global0adjusted = 3,\n+  profile_guessed_global0adjusted,\n \n   /* Profile is based on static branch prediction heuristics.  It may or may\n      not reflect the reality but it can be compared interprocedurally\n      (for example, we inlined function w/o profile feedback into function\n       with feedback and propagated from that).\n      Never used by probablities.  */\n-  profile_guessed = 4,\n+  profile_guessed,\n   /* Profile was determined by autofdo.  */\n-  profile_afdo = 5,\n+  profile_afdo,\n   /* Profile was originally based on feedback but it was adjusted\n      by code duplicating optimization.  It may not precisely reflect the\n      particular code path.  */\n-  profile_adjusted = 6,\n+  profile_adjusted,\n   /* Profile was read from profile feedback or determined by accurate static\n      method.  */\n-  profile_precise = 7\n+  profile_precise\n };\n \n /* The base value for branch probability notes and edge probabilities.  */\n@@ -529,8 +531,7 @@ class GTY((user)) profile_probability\n   /* Return false if profile_probability is bogus.  */\n   bool verify () const\n     {\n-      gcc_checking_assert (profile_guessed_local <= m_quality\n-\t\t\t   && m_quality <= profile_precise);\n+      gcc_checking_assert (m_quality != profile_uninitialized);\n       if (m_val == uninitialized_probability)\n \treturn m_quality == profile_guessed;\n       else if (m_quality < profile_guessed)\n@@ -815,8 +816,7 @@ class GTY(()) profile_count\n   /* Return false if profile_count is bogus.  */\n   bool verify () const\n     {\n-      gcc_checking_assert (profile_guessed_local <= m_quality\n-\t\t\t   && m_quality <= profile_precise);\n+      gcc_checking_assert (m_quality != profile_uninitialized);\n       return m_val != uninitialized_count || m_quality == profile_guessed_local;\n     }\n "}]}