{"sha": "ffb9c594d3891ce2dd3231689832e584339bbb42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZiOWM1OTRkMzg5MWNlMmRkMzIzMTY4OTgzMmU1ODQzMzliYmI0Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-01-09T21:34:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-01-09T21:34:32Z"}, "message": "20010226-1.c: New test.\n\n\t* gcc.c-torture/compile/20010226-1.c: New test.\n\t* gcc.c-torture/compile/20010227-1.c: New test.\n\t* gcc.c-torture/compile/20010426-1.c: New test.\n\t* gcc.c-torture/compile/20010510-1.c: New test.\n\t* gcc.c-torture/compile/20010605-3.c: New test.\n\t* gcc.c-torture/compile/20010824-1.c: New test.\n\t* gcc.c-torture/execute/20010409-1.c: New test.\n\t* gcc.dg/noncompile/20000901-1.c: New test.\n\t* gcc.dg/20001023-1.c: New test.\n\t* gcc.dg/20001101-1.c: New test.\n\t* gcc.dg/20001102-1.c: New test.\n\t* gcc.dg/20010207-1.c: New test.\n\t* gcc.dg/20010405-1.c: New test.\n\t* gcc.dg/20010822-1.c: New test.\n\t* gcc.dg/20011107-1.c: New test.\n\nFrom-SVN: r48693", "tree": {"sha": "e53b44bfb8f28d7d86ab9b90e9b93538b696c016", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e53b44bfb8f28d7d86ab9b90e9b93538b696c016"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffb9c594d3891ce2dd3231689832e584339bbb42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb9c594d3891ce2dd3231689832e584339bbb42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffb9c594d3891ce2dd3231689832e584339bbb42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffb9c594d3891ce2dd3231689832e584339bbb42/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "afaa8065241c25444bc9c6d2df3f9d3958f14015", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afaa8065241c25444bc9c6d2df3f9d3958f14015", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afaa8065241c25444bc9c6d2df3f9d3958f14015"}], "stats": {"total": 389, "additions": 389, "deletions": 0}, "files": [{"sha": "d9a1885973d94f59692287b8e0fd0b789c5de0b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ffb9c594d3891ce2dd3231689832e584339bbb42", "patch": "@@ -1,3 +1,21 @@\n+2002-01-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/compile/20010226-1.c: New test.\n+\t* gcc.c-torture/compile/20010227-1.c: New test.\n+\t* gcc.c-torture/compile/20010426-1.c: New test.\n+\t* gcc.c-torture/compile/20010510-1.c: New test.\n+\t* gcc.c-torture/compile/20010605-3.c: New test.\n+\t* gcc.c-torture/compile/20010824-1.c: New test.\n+\t* gcc.c-torture/execute/20010409-1.c: New test.\n+\t* gcc.dg/noncompile/20000901-1.c: New test.\n+\t* gcc.dg/20001023-1.c: New test.\n+\t* gcc.dg/20001101-1.c: New test.\n+\t* gcc.dg/20001102-1.c: New test.\n+\t* gcc.dg/20010207-1.c: New test.\n+\t* gcc.dg/20010405-1.c: New test.\n+\t* gcc.dg/20010822-1.c: New test.\n+\t* gcc.dg/20011107-1.c: New test.\n+\n Wed Jan  9 14:03:20 2002  Jeffrey A Law  (law@redhat.com)\n \n \t* gcc.c-torture/execute/strct-stdarg-1.x: New file.  Expect"}, {"sha": "c06be53dc525740ef52b017bd480bc776cc3d646", "filename": "gcc/testsuite/gcc.c-torture/compile/20010226-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010226-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010226-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010226-1.c?ref=ffb9c594d3891ce2dd3231689832e584339bbb42", "patch": "@@ -0,0 +1,22 @@\n+void f1 (void *);\n+void f3 (void *, void (*)(void *));\n+void f2 (void *);\n+\n+int foo (void *a, int b)\n+{\n+  if (!b)\n+    {\n+      f1 (a);\n+      return 1;\n+    }\n+  if (b)\n+    {\n+      void bar (void *c)\n+      {\n+\tif (c == a)\n+\t  f2 (c);\n+      }\n+      f3 (a, bar);\n+    }\n+  return 0;\n+}"}, {"sha": "767cb0d1c2e743c28612e907c3f561faa831966a", "filename": "gcc/testsuite/gcc.c-torture/compile/20010227-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010227-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010227-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010227-1.c?ref=ffb9c594d3891ce2dd3231689832e584339bbb42", "patch": "@@ -0,0 +1,6 @@\n+void foo (void)\n+{\n+  double a = 0.0;\n+  double b = a;\n+  if (&b != &a);\n+}"}, {"sha": "356818f9ec8cc31f0a33891a983bdc04bf1d50a7", "filename": "gcc/testsuite/gcc.c-torture/compile/20010426-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010426-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010426-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010426-1.c?ref=ffb9c594d3891ce2dd3231689832e584339bbb42", "patch": "@@ -0,0 +1,19 @@\n+struct { char *m; long n; } a[20];\n+int b = 20, c;\n+void bar(void) __attribute__((__noreturn__));\n+\n+int\n+foo(int x)\n+{\n+  int i;\n+\n+  for (i = 0; i < x; i++)\n+    {\n+      a[0].m = \"a\"; a[0].n = 10; c=1;\n+      a[c].m = \"b\"; a[c].n = 32; c++;\n+      if (c >= b) bar ();\n+      a[c].m = \"c\"; a[c].n = 80; c++;\n+      if (c >= b) bar ();\n+    }\n+  return 0;\n+}"}, {"sha": "23d44f8642c05547065090ed2a81396e358b88e2", "filename": "gcc/testsuite/gcc.c-torture/compile/20010510-1.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010510-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010510-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010510-1.c?ref=ffb9c594d3891ce2dd3231689832e584339bbb42", "patch": "@@ -0,0 +1,3 @@\n+typedef char *ident;\n+#ident \"This is ident\"\n+ident i;"}, {"sha": "a43c0b1e462e1c9b039800de04e7433584473e00", "filename": "gcc/testsuite/gcc.c-torture/compile/20010605-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010605-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010605-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010605-3.c?ref=ffb9c594d3891ce2dd3231689832e584339bbb42", "patch": "@@ -0,0 +1,20 @@\n+struct A { unsigned long buf[100]; };\n+int foo(unsigned int *x)\n+{\n+  unsigned int a;\n+\n+  if (!x)\n+    return -22;\n+\n+#ifdef __ia64__\n+  if (({\n+    register long b asm (\"r8\") = 0;\n+    register long c asm (\"r9\") = 0;\n+    asm (\"\" : \"=r\"(c), \"=r\"(b) : \"m\"(*(struct A *)x), \"1\"(b));\n+    a = (unsigned int) c;\n+    b; }))\n+    return -14;\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "8e67722b960cc8abc9001d4742a42d8b9b53deb7", "filename": "gcc/testsuite/gcc.c-torture/compile/20010824-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010824-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010824-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20010824-1.c?ref=ffb9c594d3891ce2dd3231689832e584339bbb42", "patch": "@@ -0,0 +1,7 @@\n+void f(int n)\n+{\n+bugcauser:\n+  if (n != 0)\n+    f(n-1);\n+  return;\n+}"}, {"sha": "95a5dc34401663fda5cac112e885270a383402f1", "filename": "gcc/testsuite/gcc.c-torture/execute/20010409-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010409-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010409-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20010409-1.c?ref=ffb9c594d3891ce2dd3231689832e584339bbb42", "patch": "@@ -0,0 +1,43 @@\n+typedef __SIZE_TYPE__ size_t;\n+extern size_t strlen (const char *s);\n+\n+typedef struct A {\n+  int a, b;\n+} A;\n+\n+typedef struct B {\n+  struct A **a;\n+  int b;\n+} B;\n+\n+A *a;\n+int b = 1, c;\n+B d[1];\n+\n+void foo (A *x, const char *y, int z)\n+{\n+  c = y[4] + z * 25;\n+}\n+\n+A *bar (const char *v, int w, int x, const char *y, int z)\n+{\n+  if (w)\n+    abort ();\n+  exit (0);\n+}\n+\n+void test (const char *x, int *y)\n+{\n+  foo (d->a[d->b], \"test\", 200);\n+  d->a[d->b] = bar (x, b ? 0 : 65536, strlen (x), \"test\", 201);\n+  d->a[d->b]->a++;\n+  if (y)\n+    d->a[d->b]->b = *y;\n+}\n+\n+int main ()\n+{\n+  d->b = 0;\n+  d->a = &a;\n+  test (\"\", 0);\n+}"}, {"sha": "ce5e532ea6cb1ded9b505e19266f0a884acab412", "filename": "gcc/testsuite/gcc.dg/20001023-1.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.dg%2F20001023-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.dg%2F20001023-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20001023-1.c?ref=ffb9c594d3891ce2dd3231689832e584339bbb42", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+\n+unsigned char a[256], b[256], c[256], d[256];\n+\n+void foo(unsigned char *x, int y, unsigned char *z)\n+{\n+}\n+\n+void bar(int x, ...)\n+{\n+}\n+\n+void baz(int y)\n+{\n+  if (y != 0x10)\n+    abort();\n+}\n+\n+void test(int x, unsigned char *y)\n+{\n+  unsigned char g,h,j, k[5],l[5], m[30];\n+  int i;\n+\n+  bar(x, y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7], y[8], y[9]);\n+  for (i = 5; --i >= 0; )\n+    k[i] = y[5 + i] ^ a[i] ^ c[i];\n+\n+  foo(&m[29], sizeof m, k);\n+  g = d[x] ^ c[x];\n+  bar(x, d[x], x, c[x]);\n+  baz(g);\n+  for (i = 5, h = 0; --i >= 0; h = y[i])\n+    {\n+      j = m[25 + i] ^ y[i];\n+      j = b[j] ^ g;\n+      k[i] = c[j] ^ h;\n+    }\n+  for (i = 5, h = 0; --i >= 0; h = k[i])\n+    {\n+      j = m[20 + i] ^ k[i];\n+      j = b[j] ^ g;\n+      l[i] = c[j] ^ h;\n+    }\n+  for (i = 5, h = 0; --i >= 0; h = l[i]) {\n+    j = m[15 + i] ^ l[i];\n+    j = b[j] ^ g;\n+    j = c[j] ^ h;\n+    k[i] = a[j] ^ c[j];\n+  }\n+}\n+\n+int main()\n+{\n+  c[4] = 0xdc;\n+  d[4] = 0xcc;\n+  test(4, a);\n+  exit(0);\n+}"}, {"sha": "b5231f2ce4eba05708564a3e616f51d3034f337c", "filename": "gcc/testsuite/gcc.dg/20001101-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.dg%2F20001101-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.dg%2F20001101-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20001101-1.c?ref=ffb9c594d3891ce2dd3231689832e584339bbb42", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do run { target sparc*-*-* } } */\n+/* { dg-options \"-O2 -mvis\" } */\n+\n+int foo(double a, int b, int c, double *d, int h)\n+{\n+  int f, g;\n+  double e;\n+\n+l:\n+  f = (int) a;\n+  a -= (double) f;\n+  if (b == 1)\n+    {\n+      g = c;\n+      f += g;\n+      c -= g;\n+    }\n+  if (b == 2)\n+    {\n+      f++;\n+      h = c;\n+    }\n+  if (!h)\n+    {\n+      for (g = 0; g <= 10; g++)\n+        for (h = 0; h <= 10; h++)\n+          e += d [10 + g - h];\n+      goto l;\n+    }\n+  return f & 7;\n+}\n+\n+int main()\n+{\n+  if (foo(0.1, 1, 3, 0, 1) != 3)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "9d1ccb3c6969b5f2c23226a70dd191140f3c5797", "filename": "gcc/testsuite/gcc.dg/20001102-1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.dg%2F20001102-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.dg%2F20001102-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20001102-1.c?ref=ffb9c594d3891ce2dd3231689832e584339bbb42", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run { target sparc*-*-* } } */\n+/* { dg-options \"-O2 -mvis\" } */\n+\n+int foo(double a, int b, int c, double *d, int h)\n+{\n+  int f, g;\n+  double e;\n+\n+l:\n+  f = (int) a;\n+  a -= (double) f;\n+  if (b == 1)\n+    {\n+      g = c;\n+      f += g;\n+      c -= g;\n+    }\n+  if (b == 2)\n+    {\n+      f++;\n+      h = c;\n+      goto l;\n+    }\n+\n+  asm volatile (\"\" : : :\n+\t\t\"f0\", \"f1\", \"f2\", \"f3\", \"f4\", \"f5\", \"f6\", \"f7\",\n+\t\t\"f8\", \"f9\", \"f10\", \"f11\", \"f12\", \"f13\", \"f14\", \"f15\",\n+\t\t\"f16\", \"f17\", \"f18\", \"f19\", \"f20\", \"f21\", \"f22\", \"f23\",\n+\t\t\"f24\", \"f25\", \"f26\", \"f27\", \"f28\", \"f29\", \"f30\", \"f31\");\n+\n+  return f & 7;\n+}\n+\n+int main()\n+{\n+  if (foo(0.1, 1, 3, 0, 1) != 3)\n+    abort ();\n+  exit (0);\n+}"}, {"sha": "1958f4c57c65266c3676707f5c7ca3e14d412fc6", "filename": "gcc/testsuite/gcc.dg/20010207-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.dg%2F20010207-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.dg%2F20010207-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20010207-1.c?ref=ffb9c594d3891ce2dd3231689832e584339bbb42", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile { target i?86-*-* } } */\n+/* { dg-options \"-O3 -gdwarf-2\" } */\n+\n+extern inline int f1 (void) {return f2();}\n+int f3 (void) {return f1();}\n+int f1 (void) {return 0;}"}, {"sha": "b4d57a5d8144b1ccfb0d94519cdca82aeca952fb", "filename": "gcc/testsuite/gcc.dg/20010405-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.dg%2F20010405-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.dg%2F20010405-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20010405-1.c?ref=ffb9c594d3891ce2dd3231689832e584339bbb42", "patch": "@@ -0,0 +1,19 @@\n+__inline__ double bar(double *x)\n+{\n+  static double a;\n+  a = *x >= 0 ? *x : -*x;\n+  return a;\n+}\n+\n+int main(void)\n+{\n+  extern double bar();\n+  double a;\n+  static double b;\n+  int r;\n+  for (r = 1; r < 3; r++) {\n+    a = 1.0;\n+    b = bar(&a);\n+  }\n+  return 0;\n+}"}, {"sha": "b1c1cd45a90109f3b78e7274f53b1bcb75cf670c", "filename": "gcc/testsuite/gcc.dg/20010822-1.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.dg%2F20010822-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.dg%2F20010822-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20010822-1.c?ref=ffb9c594d3891ce2dd3231689832e584339bbb42", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Os\" } */\n+\n+extern void abort (void);\n+\n+void foo (unsigned long x)\n+{\n+}\n+\n+typedef struct a {\n+  volatile unsigned int a1, a2, a3, a4, a5;\n+} *A;\n+typedef struct {\n+  volatile unsigned int b1, b2, b3, b4, b5;\n+} *B;\n+struct C {\n+  void *c1, *c2;\n+  A c3;\n+  unsigned char c4;\n+};\n+\n+void\n+bar (struct C *c, unsigned int *d)\n+{\n+  *d = *d | 1;\n+  ((c->c4 >= 2)\n+   ? (*(volatile unsigned int *) ((void *)(&((A)c->c3)->a5)) = *d)\n+   : (*(volatile unsigned int *) ((void *)(&((B)c->c3)->b5)) = *d));\n+\n+  foo (50);\n+}\n+\n+int main (void)\n+{\n+  struct a a;\n+  struct C c;\n+  unsigned int d = 8;\n+  c.c3 = &a;\n+  c.c4 = 0;\n+  bar (&c, &d);\n+  if (a.a5 != 9)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "0e969fd34a49df54dfe5fb4bcd0f1485f4576a8c", "filename": "gcc/testsuite/gcc.dg/20011107-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.dg%2F20011107-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.dg%2F20011107-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20011107-1.c?ref=ffb9c594d3891ce2dd3231689832e584339bbb42", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile { target i?86-*-* } } */\n+/* { dg-options \"-O2 -mcpu=k6\" } */\n+\n+void\n+foo (unsigned char *x, const unsigned char *y)\n+{\n+  int a = 6;\n+  unsigned char *b;\n+  for (;;)\n+    {\n+      unsigned char *c = x;\n+\n+      while (1)\n+\t{\n+\t  if (c + 2 < y)\n+\t    c += 3;\n+\t  else\n+\t    break;\n+\t}\n+      b = x + a;\n+      if (*c == 4 || *c == 5)\n+\t{\n+\t  unsigned char d = c[2];\n+\n+\t  if (b[3] == 7 || b[3] == 8)\n+\t    {\n+\t      int e = b[3] == 8;\n+\t      if (d < b[4] * 8 && b[5 + d / 8] & (1 << (d % 8)))\n+\t\te = !e;\n+\t      if (!e)\n+\t\tx[-3] = 26;\n+\t    }\n+\t}\n+      else if (*c == 7 && b[3] == 8)\n+\t{\n+\t  int f;\n+\t  for (f = 0; f < (int) c[1]; f++)\n+\t    if (!(c[2 + f] == 0))\n+\t      break;\n+\t  if (f == c[1])\n+\t    x[-3] = 26;\n+\t}\n+      x -= 2;\n+    }\n+}"}, {"sha": "94df14a9ed957f109d0f72766f73154238bc93f2", "filename": "gcc/testsuite/gcc.dg/noncompile/20000901-1.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F20000901-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffb9c594d3891ce2dd3231689832e584339bbb42/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F20000901-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnoncompile%2F20000901-1.c?ref=ffb9c594d3891ce2dd3231689832e584339bbb42", "patch": "@@ -0,0 +1 @@\n+struct foo bar[] = { {\"baz\"} }; /* { dg-error \"have incomplete type|excess elements|near|assumed|storage size\" } */"}]}