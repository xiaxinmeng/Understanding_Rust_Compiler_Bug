{"sha": "75add2d039de20a128af1d9e4ee54a8758db9837", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVhZGQyZDAzOWRlMjBhMTI4YWYxZDllNGVlNTRhODc1OGRiOTgzNw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-05-21T11:21:07Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-05-21T11:21:07Z"}, "message": "[AArch64] Implement usadv16qi and ssadv16qi standard names\n\n\nThis patch implements the usadv16qi and ssadv16qi standard names.\nSee the thread at on gcc@gcc.gnu.org [1] for background.\n\nThe V16QImode variant is important to get right as it is the most commonly used pattern:\nreducing vectors of bytes into an int.\nThe midend expects the optab to compute the absolute differences of operands 1 and 2 and\nreduce them while widening along the way up to SImode. So the inputs are V16QImode and\nthe output is V4SImode.\n\nI've tried out a few different strategies for that, the one I settled with is to emit:\nUABDL2    tmp.8h, op1.16b, op2.16b\nUABAL    tmp.8h, op1.16b, op2.16b\nUADALP    op3.4s, tmp.8h\n\nTo work through the semantics let's say operands 1 and 2 are:\nop1 { a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15 }\nop2 { b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15 }\nop3 { c0, c1, c2, c3 }\n\nThe UABDL2 takes the upper V8QI elements, computes their absolute differences, widens them and stores them into the V8HImode tmp:\n\ntmp { ABS(a[8]-b[8]), ABS(a[9]-b[9]), ABS(a[10]-b[10]), ABS(a[11]-b[11]), ABS(a[12]-b[12]), ABS(a[13]-b[13]), ABS(a[14]-b[14]), ABS(a[15]-b[15]) }\n\nThe UABAL after that takes the lower V8QI elements, computes their absolute differences, widens them and accumulates them into the V8HImode tmp from the previous step:\n\ntmp { ABS(a[8]-b[8])+ABS (a[0]-b[0]), ABS(a[9]-b[9])+ABS(a[1]-b[1]), ABS(a[10]-b[10])+ABS(a[2]-b[2]), ABS(a[11]-b[11])+ABS(a[3]-b[3]), ABS(a[12]-b[12])+ABS(a[4]-b[4]), ABS(a[13]-b[13])+ABS(a[5]-b[5]), ABS(a[14]-b[14])+ABS(a[6]-b[6]), ABS(a[15]-b[15])+ABS(a[7]-b[7]) }\n\nFinally the UADALP does a pairwise widening reduction and accumulation into the V4SImode op3:\nop3 { c0+ABS(a[8]-b[8])+ABS(a[0]-b[0])+ABS(a[9]-b[9])+ABS(a[1]-b[1]), c1+ABS(a[10]-b[10])+ABS(a[2]-b[2])+ABS(a[11]-b[11])+ABS(a[3]-b[3]), c2+ABS(a[12]-b[12])+ABS(a[4]-b[4])+ABS(a[13]-b[13])+ABS(a[5]-b[5]), c3+ABS(a[14]-b[14])+ABS(a[6]-b[6])+ABS(a[15]-b[15])+ABS(a[7]-b[7]) }\n\n(sorry for the text dump)\n\nRemember, according to [1] the exact reduction sequence doesn't matter (for integer arithmetic at least).\nI've considered other sequences as well (thanks Wilco), for example\n* UABD + UADDLP + UADALP\n* UABLD2 + UABDL + UADALP + UADALP\n\nI ended up settling in the sequence in this patch as it's short (3 instructions) and in the future we can potentially\nlook to optimise multiple occurrences of these into something even faster (for example accumulating into H registers for longer\nbefore doing a single UADALP in the end to accumulate into the final S register).\n\nIf your microarchitecture has some some strong preferences for a particular sequence, please let me know or, even better, propose a patch\nto parametrise the generation sequence by code (or the appropriate RTX cost).\n\n\nThis expansion allows the vectoriser to avoid unpacking the bytes in two steps and performing V4SI arithmetic on them.\nSo, for the code:\n\nunsigned char pix1[N], pix2[N];\n\nint foo (void)\n{\n  int i_sum = 0;\n  int i;\n\n  for (i = 0; i < 16; i++)\n    i_sum += __builtin_abs (pix1[i] - pix2[i]);\n\n  return i_sum;\n}\n\nwe now generate on aarch64:\nfoo:\n        adrp    x1, pix1\n        add     x1, x1, :lo12:pix1\n        movi    v0.4s, 0\n        adrp    x0, pix2\n        add     x0, x0, :lo12:pix2\n        ldr     q2, [x1]\n        ldr     q3, [x0]\n        uabdl2  v1.8h, v2.16b, v3.16b\n        uabal   v1.8h, v2.8b, v3.8b\n        uadalp  v0.4s, v1.8h\n        addv    s0, v0.4s\n        umov    w0, v0.s[0]\n        ret\n\n\ninstead of:\nfoo:\n        adrp    x1, pix1\n        adrp    x0, pix2\n        add     x1, x1, :lo12:pix1\n        add     x0, x0, :lo12:pix2\n        ldr     q0, [x1]\n        ldr     q4, [x0]\n        ushll   v1.8h, v0.8b, 0\n        ushll2  v0.8h, v0.16b, 0\n        ushll   v2.8h, v4.8b, 0\n        ushll2  v4.8h, v4.16b, 0\n        usubl   v3.4s, v1.4h, v2.4h\n        usubl2  v1.4s, v1.8h, v2.8h\n        usubl   v2.4s, v0.4h, v4.4h\n        usubl2  v0.4s, v0.8h, v4.8h\n        abs     v3.4s, v3.4s\n        abs     v1.4s, v1.4s\n        abs     v2.4s, v2.4s\n        abs     v0.4s, v0.4s\n        add     v1.4s, v3.4s, v1.4s\n        add     v1.4s, v2.4s, v1.4s\n        add     v0.4s, v0.4s, v1.4s\n        addv    s0, v0.4s\n        umov    w0, v0.s[0]\n        ret\n\nSo I expect this new expansion to be better than the status quo in any case.\nBootstrapped and tested on aarch64-none-linux-gnu.\nThis gives about 8% on 525.x264_r from SPEC2017 on a Cortex-A72.\n\n\t* config/aarch64/aarch64.md (\"unspec\"): Define UNSPEC_SABAL,\n\tUNSPEC_SABDL2, UNSPEC_SADALP, UNSPEC_UABAL, UNSPEC_UABDL2,\n\tUNSPEC_UADALP values.\n\t* config/aarch64/iterators.md (ABAL): New int iterator.\n\t(ABDL2): Likewise.\n\t(ADALP): Likewise.\n\t(sur): Add mappings for the above.\n\t* config/aarch64/aarch64-simd.md (aarch64_<sur>abdl2<mode>_3):\n\tNew define_insn.\n\t(aarch64_<sur>abal<mode>_4): Likewise.\n\t(aarch64_<sur>adalp<mode>_3): Likewise.\n\t(<sur>sadv16qi): New define_expand.\n\n\t* gcc.c-torture/execute/ssad-run.c: New test.\n\t* gcc.c-torture/execute/usad-run.c: Likewise.\n\t* gcc.target/aarch64/ssadv16qi.c: Likewise.\n\t* gcc.target/aarch64/usadv16qi.c: Likewise.\n\nFrom-SVN: r260437", "tree": {"sha": "535ca3eb06308bdbe3f22a8b64a27944fa02427c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/535ca3eb06308bdbe3f22a8b64a27944fa02427c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75add2d039de20a128af1d9e4ee54a8758db9837", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75add2d039de20a128af1d9e4ee54a8758db9837", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75add2d039de20a128af1d9e4ee54a8758db9837", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75add2d039de20a128af1d9e4ee54a8758db9837/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "60801ebc33261a28cc9225e12b8a425d64a7e314", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60801ebc33261a28cc9225e12b8a425d64a7e314", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60801ebc33261a28cc9225e12b8a425d64a7e314"}], "stats": {"total": 254, "additions": 254, "deletions": 0}, "files": [{"sha": "b247c1fd28dbd909b6388bccd640bf06e02516a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75add2d039de20a128af1d9e4ee54a8758db9837/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75add2d039de20a128af1d9e4ee54a8758db9837/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75add2d039de20a128af1d9e4ee54a8758db9837", "patch": "@@ -1,3 +1,18 @@\n+2018-05-21  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.md (\"unspec\"): Define UNSPEC_SABAL,\n+\tUNSPEC_SABDL2, UNSPEC_SADALP, UNSPEC_UABAL, UNSPEC_UABDL2,\n+\tUNSPEC_UADALP values.\n+\t* config/aarch64/iterators.md (ABAL): New int iterator.\n+\t(ABDL2): Likewise.\n+\t(ADALP): Likewise.\n+\t(sur): Add mappings for the above.\n+\t* config/aarch64/aarch64-simd.md (aarch64_<sur>abdl2<mode>_3):\n+\tNew define_insn.\n+\t(aarch64_<sur>abal<mode>_4): Likewise.\n+\t(aarch64_<sur>adalp<mode>_3): Likewise.\n+\t(<sur>sadv16qi): New define_expand.\n+\n 2018-05-21  Alexander Nesterovskiy  <alexander.nesterovskiy@intel.com>\n \n \t* config/i386/i386.md (*movsf_internal): AVX falsedep fix."}, {"sha": "fd971bf5c6debac24631f035909d5e3afbc27173", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75add2d039de20a128af1d9e4ee54a8758db9837/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75add2d039de20a128af1d9e4ee54a8758db9837/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=75add2d039de20a128af1d9e4ee54a8758db9837", "patch": "@@ -612,6 +612,67 @@\n   [(set_attr \"type\" \"neon_abd<q>\")]\n )\n \n+(define_insn \"aarch64_<sur>abdl2<mode>_3\"\n+  [(set (match_operand:<VDBLW> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VDBLW> [(match_operand:VDQV_S 1 \"register_operand\" \"w\")\n+\t\t\t  (match_operand:VDQV_S 2 \"register_operand\" \"w\")]\n+\tABDL2))]\n+  \"TARGET_SIMD\"\n+  \"<sur>abdl2\\t%0.<Vwtype>, %1.<Vtype>, %2.<Vtype>\"\n+  [(set_attr \"type\" \"neon_abd<q>\")]\n+)\n+\n+(define_insn \"aarch64_<sur>abal<mode>_4\"\n+  [(set (match_operand:<VDBLW> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VDBLW> [(match_operand:VDQV_S 1 \"register_operand\" \"w\")\n+\t\t\t  (match_operand:VDQV_S 2 \"register_operand\" \"w\")\n+\t\t\t (match_operand:<VDBLW> 3 \"register_operand\" \"0\")]\n+\tABAL))]\n+  \"TARGET_SIMD\"\n+  \"<sur>abal\\t%0.<Vwtype>, %1.<Vhalftype>, %2.<Vhalftype>\"\n+  [(set_attr \"type\" \"neon_arith_acc<q>\")]\n+)\n+\n+(define_insn \"aarch64_<sur>adalp<mode>_3\"\n+  [(set (match_operand:<VDBLW> 0 \"register_operand\" \"=w\")\n+\t(unspec:<VDBLW> [(match_operand:VDQV_S 1 \"register_operand\" \"w\")\n+\t\t\t  (match_operand:<VDBLW> 2 \"register_operand\" \"0\")]\n+\tADALP))]\n+  \"TARGET_SIMD\"\n+  \"<sur>adalp\\t%0.<Vwtype>, %1.<Vtype>\"\n+  [(set_attr \"type\" \"neon_reduc_add<q>\")]\n+)\n+\n+;; Emit a sequence to produce a sum-of-absolute-differences of the V16QI\n+;; inputs in operands 1 and 2.  The sequence also has to perform a widening\n+;; reduction of the difference into a V4SI vector and accumulate that into\n+;; operand 3 before copying that into the result operand 0.\n+;; Perform that with a sequence of:\n+;; UABDL2\ttmp.8h, op1.16b, op2.16b\n+;; UABAL\ttmp.8h, op1.16b, op2.16b\n+;; UADALP\top3.4s, tmp.8h\n+;; MOV\t\top0, op3 // should be eliminated in later passes.\n+;; The signed version just uses the signed variants of the above instructions.\n+\n+(define_expand \"<sur>sadv16qi\"\n+  [(use (match_operand:V4SI 0 \"register_operand\"))\n+   (unspec:V16QI [(use (match_operand:V16QI 1 \"register_operand\"))\n+\t\t  (use (match_operand:V16QI 2 \"register_operand\"))] ABAL)\n+   (use (match_operand:V4SI 3 \"register_operand\"))]\n+  \"TARGET_SIMD\"\n+  {\n+    rtx reduc = gen_reg_rtx (V8HImode);\n+    emit_insn (gen_aarch64_<sur>abdl2v16qi_3 (reduc, operands[1],\n+\t\t\t\t\t       operands[2]));\n+    emit_insn (gen_aarch64_<sur>abalv16qi_4 (reduc, operands[1],\n+\t\t\t\t\t      operands[2], reduc));\n+    emit_insn (gen_aarch64_<sur>adalpv8hi_3 (operands[3], reduc,\n+\t\t\t\t\t      operands[3]));\n+    emit_move_insn (operands[0], operands[3]);\n+    DONE;\n+  }\n+)\n+\n (define_insn \"aba<mode>_3\"\n   [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w\")\n \t(plus:VDQ_BHSI (abs:VDQ_BHSI (minus:VDQ_BHSI"}, {"sha": "7437971bdd89342529220a422d7b961730fe736e", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75add2d039de20a128af1d9e4ee54a8758db9837/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75add2d039de20a128af1d9e4ee54a8758db9837/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=75add2d039de20a128af1d9e4ee54a8758db9837", "patch": "@@ -141,6 +141,9 @@\n     UNSPEC_PRLG_STK\n     UNSPEC_REV\n     UNSPEC_RBIT\n+    UNSPEC_SABAL\n+    UNSPEC_SABDL2\n+    UNSPEC_SADALP\n     UNSPEC_SCVTF\n     UNSPEC_SISD_NEG\n     UNSPEC_SISD_SSHL\n@@ -159,6 +162,9 @@\n     UNSPEC_TLSLE24\n     UNSPEC_TLSLE32\n     UNSPEC_TLSLE48\n+    UNSPEC_UABAL\n+    UNSPEC_UABDL2\n+    UNSPEC_UADALP\n     UNSPEC_UCVTF\n     UNSPEC_USHL_2S\n     UNSPEC_VSTRUCTDUMMY"}, {"sha": "bf01044bc702da1829447d89b20a0b6e214953c0", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75add2d039de20a128af1d9e4ee54a8758db9837/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75add2d039de20a128af1d9e4ee54a8758db9837/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=75add2d039de20a128af1d9e4ee54a8758db9837", "patch": "@@ -1389,6 +1389,16 @@\n ;; -------------------------------------------------------------------\n ;; Int Iterators.\n ;; -------------------------------------------------------------------\n+\n+;; The unspec codes for the SABAL, UABAL AdvancedSIMD instructions.\n+(define_int_iterator ABAL [UNSPEC_SABAL UNSPEC_UABAL])\n+\n+;; The unspec codes for the SABDL2, UABDL2 AdvancedSIMD instructions.\n+(define_int_iterator ABDL2 [UNSPEC_SABDL2 UNSPEC_UABDL2])\n+\n+;; The unspec codes for the SADALP, UADALP AdvancedSIMD instructions.\n+(define_int_iterator ADALP [UNSPEC_SADALP UNSPEC_UADALP])\n+\n (define_int_iterator MAXMINV [UNSPEC_UMAXV UNSPEC_UMINV\n \t\t\t      UNSPEC_SMAXV UNSPEC_SMINV])\n \n@@ -1596,6 +1606,9 @@\n \t\t      (UNSPEC_SHSUB \"s\") (UNSPEC_UHSUB \"u\")\n \t\t      (UNSPEC_SRHSUB \"sr\") (UNSPEC_URHSUB \"ur\")\n \t\t      (UNSPEC_ADDHN \"\") (UNSPEC_RADDHN \"r\")\n+\t\t      (UNSPEC_SABAL \"s\") (UNSPEC_UABAL \"u\")\n+\t\t      (UNSPEC_SABDL2 \"s\") (UNSPEC_UABDL2 \"u\")\n+\t\t      (UNSPEC_SADALP \"s\") (UNSPEC_UADALP \"u\")\n \t\t      (UNSPEC_SUBHN \"\") (UNSPEC_RSUBHN \"r\")\n \t\t      (UNSPEC_ADDHN2 \"\") (UNSPEC_RADDHN2 \"r\")\n \t\t      (UNSPEC_SUBHN2 \"\") (UNSPEC_RSUBHN2 \"r\")"}, {"sha": "4d10e0a9f7ea814d1296c48af3538d6711f4abae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75add2d039de20a128af1d9e4ee54a8758db9837/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75add2d039de20a128af1d9e4ee54a8758db9837/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=75add2d039de20a128af1d9e4ee54a8758db9837", "patch": "@@ -1,3 +1,10 @@\n+2018-05-21  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.c-torture/execute/ssad-run.c: New test.\n+\t* gcc.c-torture/execute/usad-run.c: Likewise.\n+\t* gcc.target/aarch64/ssadv16qi.c: Likewise.\n+\t* gcc.target/aarch64/usadv16qi.c: Likewise.\n+\n 2018-05-21  Tamar Christina  <tamar.christina@arm.com>\n \n \t* gcc.target/gcc.target/aarch64/sha3.h (veor3q_u8, veor3q_u32,"}, {"sha": "f15f85f5753769a492cc066ac1ff8a82f39fcc30", "filename": "gcc/testsuite/gcc.c-torture/execute/ssad-run.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75add2d039de20a128af1d9e4ee54a8758db9837/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fssad-run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75add2d039de20a128af1d9e4ee54a8758db9837/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fssad-run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fssad-run.c?ref=75add2d039de20a128af1d9e4ee54a8758db9837", "patch": "@@ -0,0 +1,49 @@\n+extern void abort ();\n+extern int abs (int __x) __attribute__ ((__nothrow__, __leaf__)) __attribute__ ((__const__));\n+\n+static int\n+foo (signed char *w, int i, signed char *x, int j)\n+{\n+  int tot = 0;\n+  for (int a = 0; a < 16; a++)\n+    {\n+      for (int b = 0; b < 16; b++)\n+\ttot += abs (w[b] - x[b]);\n+      w += i;\n+      x += j;\n+    }\n+  return tot;\n+}\n+\n+void\n+bar (signed char *w, signed char *x, int i, int *result)\n+{\n+  *result = foo (w, 16, x, i);\n+}\n+\n+int\n+main (void)\n+{\n+  signed char m[256];\n+  signed char n[256];\n+  int sum, i;\n+\n+  for (i = 0; i < 256; ++i)\n+    if (i % 2 == 0)\n+      {\n+\tm[i] = (i % 8) * 2 + 1;\n+\tn[i] = -(i % 8);\n+      }\n+    else\n+      {\n+\tm[i] = -((i % 8) * 2 + 2);\n+\tn[i] = -((i % 8) >> 1);\n+      }\n+\n+  bar (m, n, 16, &sum);\n+\n+  if (sum != 2368)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "904a634a497688eda6331845e2bf2805aa8a7991", "filename": "gcc/testsuite/gcc.c-torture/execute/usad-run.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75add2d039de20a128af1d9e4ee54a8758db9837/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fusad-run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75add2d039de20a128af1d9e4ee54a8758db9837/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fusad-run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fusad-run.c?ref=75add2d039de20a128af1d9e4ee54a8758db9837", "patch": "@@ -0,0 +1,49 @@\n+extern void abort ();\n+extern int abs (int __x) __attribute__ ((__nothrow__, __leaf__)) __attribute__ ((__const__));\n+\n+static int\n+foo (unsigned char *w, int i, unsigned char *x, int j)\n+{\n+  int tot = 0;\n+  for (int a = 0; a < 16; a++)\n+    {\n+      for (int b = 0; b < 16; b++)\n+\ttot += abs (w[b] - x[b]);\n+      w += i;\n+      x += j;\n+    }\n+  return tot;\n+}\n+\n+void\n+bar (unsigned char *w, unsigned char *x, int i, int *result)\n+{\n+  *result = foo (w, 16, x, i);\n+}\n+\n+int\n+main (void)\n+{\n+  unsigned char m[256];\n+  unsigned char n[256];\n+  int sum, i;\n+\n+  for (i = 0; i < 256; ++i)\n+    if (i % 2 == 0)\n+      {\n+\tm[i] = (i % 8) * 2 + 1;\n+\tn[i] = -(i % 8);\n+      }\n+    else\n+      {\n+\tm[i] = -((i % 8) * 2 + 2);\n+\tn[i] = -((i % 8) >> 1);\n+      }\n+\n+  bar (m, n, 16, &sum);\n+\n+  if (sum != 32384)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "bab75992986865389dff8f9ca43c58e947ef94a0", "filename": "gcc/testsuite/gcc.target/aarch64/ssadv16qi.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75add2d039de20a128af1d9e4ee54a8758db9837/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fssadv16qi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75add2d039de20a128af1d9e4ee54a8758db9837/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fssadv16qi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fssadv16qi.c?ref=75add2d039de20a128af1d9e4ee54a8758db9837", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+#define N 1024\n+\n+signed char pix1[N], pix2[N];\n+\n+int foo (void)\n+{\n+  int i_sum = 0;\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    i_sum += __builtin_abs (pix1[i] - pix2[i]);\n+\n+  return i_sum;\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tsshll\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsshll2\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tssubl\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tssubl2\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tabs\\t} } } */\n+\n+/* { dg-final { scan-assembler {\\tsabdl2\\t} } } */\n+/* { dg-final { scan-assembler {\\tsabal\\t} } } */\n+/* { dg-final { scan-assembler {\\tsadalp\\t} } } */"}, {"sha": "b7c08ee1e1182dadba0048bb96b006f2db61ffe0", "filename": "gcc/testsuite/gcc.target/aarch64/usadv16qi.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75add2d039de20a128af1d9e4ee54a8758db9837/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fusadv16qi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75add2d039de20a128af1d9e4ee54a8758db9837/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fusadv16qi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fusadv16qi.c?ref=75add2d039de20a128af1d9e4ee54a8758db9837", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+#define N 1024\n+\n+unsigned char pix1[N], pix2[N];\n+\n+int foo (void)\n+{\n+  int i_sum = 0;\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    i_sum += __builtin_abs (pix1[i] - pix2[i]);\n+\n+  return i_sum;\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tushll\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tushll2\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tusubl\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tusubl2\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tabs\\t} } } */\n+\n+/* { dg-final { scan-assembler {\\tuabdl2\\t} } } */\n+/* { dg-final { scan-assembler {\\tuabal\\t} } } */\n+/* { dg-final { scan-assembler {\\tuadalp\\t} } } */"}]}