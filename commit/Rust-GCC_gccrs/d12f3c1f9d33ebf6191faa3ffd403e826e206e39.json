{"sha": "d12f3c1f9d33ebf6191faa3ffd403e826e206e39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDEyZjNjMWY5ZDMzZWJmNjE5MWZhYTNmZmQ0MDNlODI2ZTIwNmUzOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2005-03-30T06:30:13Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2005-03-30T06:30:13Z"}, "message": "c4x-protos.h (c4x_rpts_cycles, [...]): Delete.\n\n\t* config/c4x/c4x-protos.h (c4x_rpts_cycles, c4x_cpu_version): Delete.\n\t* config/c4x/c4x.h (SMALL_MEMORY_FLAG, MPYI_FLAG, FAST_FIX_FLAG)\n\t(RPTS_FLAG, C3X_FLAG, TI_FLAG, PARANOID_FLAG, MEMPARM_FLAG, DEVEL_FLAG)\n\t(RPTB_FLAG, BK_FLAG, DB_FLAG, DEBUG_FLAG, HOIST_FLAG)\n\t(LOOP_UNSIGNED_FLAG, FORCE_FLAG, PRESERVE_FLOAT_FLAG)\n\t(PARALLEL_INSN_FLAG, PARALLEL_MPY_FLAG, ALIASES_FLAG, C30_FLAG)\n\t(C31_FLAG, C32_FLAG, C33_FLAG, C40_FLAG, C44_FLAG, TARGET_SWITCHES)\n\t(TARGET_DEFAULT, TARGET_SMALL, TARGET_MPYI, TARGET_FAST_FIX)\n\t(TARGET_RPTS, TARGET_TI, TARGET_PARANOID, TARGET_MEMPARM, TARGET_DEVEL)\n\t(TARGET_RPTB, TARGET_BK, TARGET_DB, TARGET_DEBUG, TARGET_HOIST)\n\t(TARGET_LOOP_UNSIGNED, TARGET_FORCE, TARGET_PRESERVE_FLOAT)\n\t(TARGET_PARALLEL, TARGET_PARALLEL_MPY, TARGET_ALIASES)\n\t(c4x_rpts_cycles_string, c4x_cpu_version_string)\n\t(TARGET_OPTIONS): Delete.\n\t(c4x_rpts_cycles, c4x_cpu_version): Declare.\n\t(TARGET_C3X, TARGET_C30, TARGET_C31, TARGET_C32, TARGET_C33)\n\t(TARGET_C40, TARGET_C44): Redefine in terms of c4x_cpu_version.\n\t* config/c4x/c4x.c (c4x_rpts_cycles_string): Delete.\n\t(c4x_cpu_version_string): Delete.\n\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n\t(c4x_handle_option): New function.  Map -m3x and -m4x options to the\n\tequivalent -mcpu= option.\n\t(c4x_override_options): Remove -mrpts= and -mcpu= handling from here.\n\tDeal with the extra conditions in the old TARGET_MPYI, TARGET_RPTB,\n\tTARGET_DB, TARGET_PARALLEL and TARGET_PARALLEL_MPY macros by setting\n\tor clearing the appropriate MASK_* bit.\n\t(c4x_file_start): Use c4x_cpu_version.\n\t* config/c4x/c4x.opt: New file.\n\nFrom-SVN: r97239", "tree": {"sha": "f41031068d1ad60d5500d19e957665d281960392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f41031068d1ad60d5500d19e957665d281960392"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d12f3c1f9d33ebf6191faa3ffd403e826e206e39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d12f3c1f9d33ebf6191faa3ffd403e826e206e39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d12f3c1f9d33ebf6191faa3ffd403e826e206e39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d12f3c1f9d33ebf6191faa3ffd403e826e206e39/comments", "author": null, "committer": null, "parents": [{"sha": "f9b4c1db7dc1e30266f20e75090536be4b31349e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9b4c1db7dc1e30266f20e75090536be4b31349e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9b4c1db7dc1e30266f20e75090536be4b31349e"}], "stats": {"total": 480, "additions": 234, "deletions": 246}, "files": [{"sha": "ebfa39725ab3bd6823c7efc2e20626721ae0dc37", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d12f3c1f9d33ebf6191faa3ffd403e826e206e39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d12f3c1f9d33ebf6191faa3ffd403e826e206e39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d12f3c1f9d33ebf6191faa3ffd403e826e206e39", "patch": "@@ -1,3 +1,34 @@\n+2005-03-30  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/c4x/c4x-protos.h (c4x_rpts_cycles, c4x_cpu_version): Delete.\n+\t* config/c4x/c4x.h (SMALL_MEMORY_FLAG, MPYI_FLAG, FAST_FIX_FLAG)\n+\t(RPTS_FLAG, C3X_FLAG, TI_FLAG, PARANOID_FLAG, MEMPARM_FLAG, DEVEL_FLAG)\n+\t(RPTB_FLAG, BK_FLAG, DB_FLAG, DEBUG_FLAG, HOIST_FLAG)\n+\t(LOOP_UNSIGNED_FLAG, FORCE_FLAG, PRESERVE_FLOAT_FLAG)\n+\t(PARALLEL_INSN_FLAG, PARALLEL_MPY_FLAG, ALIASES_FLAG, C30_FLAG)\n+\t(C31_FLAG, C32_FLAG, C33_FLAG, C40_FLAG, C44_FLAG, TARGET_SWITCHES)\n+\t(TARGET_DEFAULT, TARGET_SMALL, TARGET_MPYI, TARGET_FAST_FIX)\n+\t(TARGET_RPTS, TARGET_TI, TARGET_PARANOID, TARGET_MEMPARM, TARGET_DEVEL)\n+\t(TARGET_RPTB, TARGET_BK, TARGET_DB, TARGET_DEBUG, TARGET_HOIST)\n+\t(TARGET_LOOP_UNSIGNED, TARGET_FORCE, TARGET_PRESERVE_FLOAT)\n+\t(TARGET_PARALLEL, TARGET_PARALLEL_MPY, TARGET_ALIASES)\n+\t(c4x_rpts_cycles_string, c4x_cpu_version_string)\n+\t(TARGET_OPTIONS): Delete.\n+\t(c4x_rpts_cycles, c4x_cpu_version): Declare.\n+\t(TARGET_C3X, TARGET_C30, TARGET_C31, TARGET_C32, TARGET_C33)\n+\t(TARGET_C40, TARGET_C44): Redefine in terms of c4x_cpu_version.\n+\t* config/c4x/c4x.c (c4x_rpts_cycles_string): Delete.\n+\t(c4x_cpu_version_string): Delete.\n+\t(TARGET_DEFAULT_TARGET_FLAGS, TARGET_HANDLE_OPTION): Override defaults.\n+\t(c4x_handle_option): New function.  Map -m3x and -m4x options to the\n+\tequivalent -mcpu= option.\n+\t(c4x_override_options): Remove -mrpts= and -mcpu= handling from here.\n+\tDeal with the extra conditions in the old TARGET_MPYI, TARGET_RPTB,\n+\tTARGET_DB, TARGET_PARALLEL and TARGET_PARALLEL_MPY macros by setting\n+\tor clearing the appropriate MASK_* bit.\n+\t(c4x_file_start): Use c4x_cpu_version.\n+\t* config/c4x/c4x.opt: New file.\n+\n 2005-03-30  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* doc/options.texi: Document the new MaskExists flag."}, {"sha": "536ddb2e707b7c68fb13e665f44acb39145b56d0", "filename": "gcc/config/c4x/c4x-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d12f3c1f9d33ebf6191faa3ffd403e826e206e39/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d12f3c1f9d33ebf6191faa3ffd403e826e206e39/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h?ref=d12f3c1f9d33ebf6191faa3ffd403e826e206e39", "patch": "@@ -274,9 +274,6 @@ extern GTY(()) rtx c4x_compare_op1;\t/* Operand 1 for comparisons.  */\n extern enum reg_class c4x_regclass_map[FIRST_PSEUDO_REGISTER];\n extern enum machine_mode c4x_caller_save_map[FIRST_PSEUDO_REGISTER];\n \n-extern int c4x_rpts_cycles;\t        /* Max cycles for RPTS.  */\n-extern int c4x_cpu_version;\t\t/* Cpu version C30/31/32/40/44.  */\n-\n extern void c4x_pr_CODE_SECTION (struct cpp_reader *);\n extern void c4x_pr_DATA_SECTION (struct cpp_reader *);\n extern void c4x_pr_FUNC_IS_PURE (struct cpp_reader *);"}, {"sha": "b7f54d9786093dddcca90614d2f5478154dec00c", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 52, "deletions": 63, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d12f3c1f9d33ebf6191faa3ffd403e826e206e39/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d12f3c1f9d33ebf6191faa3ffd403e826e206e39/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=d12f3c1f9d33ebf6191faa3ffd403e826e206e39", "patch": "@@ -152,9 +152,7 @@ enum machine_mode c4x_caller_save_map[FIRST_PSEUDO_REGISTER] =\n rtx c4x_compare_op0;\n rtx c4x_compare_op1;\n \n-const char *c4x_rpts_cycles_string;\n int c4x_rpts_cycles = 0;\t/* Max. cycles for RPTS.  */\n-const char *c4x_cpu_version_string;\n int c4x_cpu_version = 40;\t/* CPU version C30/31/32/33/40/44.  */\n \n /* Pragma definitions.  */\n@@ -167,6 +165,7 @@ tree interrupt_tree = NULL_TREE;\n tree naked_tree = NULL_TREE;\n \n /* Forward declarations */\n+static bool c4x_handle_option (size_t, const char *, int);\n static int c4x_isr_reg_used_p (unsigned int);\n static int c4x_leaf_function_p (void);\n static int c4x_naked_function_p (void);\n@@ -221,6 +220,13 @@ static tree c4x_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n #undef TARGET_ASM_EXTERNAL_LIBCALL\n #define TARGET_ASM_EXTERNAL_LIBCALL c4x_external_libcall\n \n+/* Play safe, not the fastest code.  */\n+#undef TARGET_DEFAULT_TARGET_FLAGS\n+#define TARGET_DEFAULT_TARGET_FLAGS (MASK_ALIASES | MASK_PARALLEL \\\n+\t\t\t\t     | MASK_PARALLEL_MPY | MASK_RPTB)\n+#undef TARGET_HANDLE_OPTION\n+#define TARGET_HANDLE_OPTION c4x_handle_option\n+\n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE c4x_attribute_table\n \n@@ -258,74 +264,65 @@ static tree c4x_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n-/* Override command line options.\n-   Called once after all options have been parsed.\n-   Mostly we process the processor\n-   type and sometimes adjust other TARGET_ options.  */\n+/* Implement TARGET_HANDLE_OPTION.  */\n \n-void\n-c4x_override_options (void)\n+static bool\n+c4x_handle_option (size_t code, const char *arg, int value)\n {\n-  if (c4x_rpts_cycles_string)\n-    c4x_rpts_cycles = atoi (c4x_rpts_cycles_string);\n-  else\n-    c4x_rpts_cycles = 0;\n-\n-  if (TARGET_C30)\n-    c4x_cpu_version = 30;\n-  else if (TARGET_C31)\n-    c4x_cpu_version = 31;\n-  else if (TARGET_C32)\n-    c4x_cpu_version = 32;\n-  else if (TARGET_C33)\n-    c4x_cpu_version = 33;\n-  else if (TARGET_C40)\n-    c4x_cpu_version = 40;\n-  else if (TARGET_C44)\n-    c4x_cpu_version = 44;\n-  else\n-    c4x_cpu_version = 40;\t       \n-\n-  /* -mcpu=xx overrides -m40 etc.  */\n-  if (c4x_cpu_version_string)\n+  switch (code)\n     {\n-      const char *p = c4x_cpu_version_string;\n-      \n-      /* Also allow -mcpu=c30 etc.  */\n-      if (*p == 'c' || *p == 'C')\n-\tp++;\n-      c4x_cpu_version = atoi (p);\n-    }\n+    case OPT_m30: c4x_cpu_version = 30; return true;\n+    case OPT_m31: c4x_cpu_version = 31; return true;\n+    case OPT_m32: c4x_cpu_version = 32; return true;\n+    case OPT_m33: c4x_cpu_version = 33; return true;\n+    case OPT_m40: c4x_cpu_version = 40; return true;\n+    case OPT_m44: c4x_cpu_version = 44; return true;\n+\n+    case OPT_mcpu_:\n+      if (arg[0] == 'c' || arg[0] == 'C')\n+\targ++;\n+      value = atoi (arg);\n+      switch (value)\n+\t{\n+\tcase 30: case 31: case 32: case 33: case 40: case 44:\n+\t  c4x_cpu_version = value;\n+\t  return true;\n+\t}\n+      return false;\n \n-  target_flags &= ~(C30_FLAG | C31_FLAG | C32_FLAG | C33_FLAG |\n-\t\t    C40_FLAG | C44_FLAG);\n+    case OPT_mrpts_:\n+      c4x_rpts_cycles = value;\n+      return true;\n \n-  switch (c4x_cpu_version)\n-    {\n-    case 30: target_flags |= C30_FLAG; break;\n-    case 31: target_flags |= C31_FLAG; break;\n-    case 32: target_flags |= C32_FLAG; break;\n-    case 33: target_flags |= C33_FLAG; break;\n-    case 40: target_flags |= C40_FLAG; break;\n-    case 44: target_flags |= C44_FLAG; break;\n     default:\n-      warning (\"unknown CPU version %d, using 40.\\n\", c4x_cpu_version);\n-      c4x_cpu_version = 40;\n-      target_flags |= C40_FLAG;\n+      return true;\n     }\n+}\n \n-  if (TARGET_C30 || TARGET_C31 || TARGET_C32 || TARGET_C33)\n-    target_flags |= C3X_FLAG;\n-  else\n-    target_flags &= ~C3X_FLAG;\n+/* Override command line options.\n+   Called once after all options have been parsed.\n+   Mostly we process the processor\n+   type and sometimes adjust other TARGET_ options.  */\n \n+void\n+c4x_override_options (void)\n+{\n   /* Convert foo / 8.0 into foo * 0.125, etc.  */\n   set_fast_math_flags (1);\n \n   /* We should phase out the following at some stage.\n      This provides compatibility with the old -mno-aliases option.  */\n   if (! TARGET_ALIASES && ! flag_argument_noalias)\n     flag_argument_noalias = 1;\n+\n+  if (!TARGET_C3X)\n+    target_flags |= MASK_MPYI | MASK_DB;\n+\n+  if (optimize < 2)\n+    target_flags &= ~(MASK_RPTB | MASK_PARALLEL);\n+\n+  if (!TARGET_PARALLEL)\n+    target_flags &= ~MASK_PARALLEL_MPY;\n }\n \n \n@@ -4409,16 +4406,8 @@ c4x_external_ref (const char *name)\n static void\n c4x_file_start (void)\n {\n-  int dspversion = 0;\n-  if (TARGET_C30) dspversion = 30;\n-  if (TARGET_C31) dspversion = 31;\n-  if (TARGET_C32) dspversion = 32;\n-  if (TARGET_C33) dspversion = 33;\n-  if (TARGET_C40) dspversion = 40;\n-  if (TARGET_C44) dspversion = 44;\n-\n   default_file_start ();\n-  fprintf (asm_out_file, \"\\t.version\\t%d\\n\", dspversion);\n+  fprintf (asm_out_file, \"\\t.version\\t%d\\n\", c4x_cpu_version);\n   fputs (\"\\n\\t.data\\ndata_sec:\\n\", asm_out_file);\n }\n "}, {"sha": "488a63fc9eab2367d4115a65cc1716c5cfac8540", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 11, "deletions": 180, "changes": 191, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d12f3c1f9d33ebf6191faa3ffd403e826e206e39/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d12f3c1f9d33ebf6191faa3ffd403e826e206e39/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=d12f3c1f9d33ebf6191faa3ffd403e826e206e39", "patch": "@@ -123,186 +123,27 @@\n \n #define ENDFILE_SPEC \"\"\n \n-/* Target compilation option flags.  */\n-\n-#define SMALL_MEMORY_FLAG   0x0000001 /* Small memory model.  */\n-#define MPYI_FLAG           0x0000002 /* Use 24-bit MPYI for C3x.  */\n-#define FAST_FIX_FLAG       0x0000004 /* Fast fixing of floats.  */\n-#define RPTS_FLAG           0x0000008 /* Allow use of RPTS.  */\n-#define C3X_FLAG            0x0000010 /* Emit C3x code.  */\n-#define TI_FLAG             0x0000020 /* Be compatible with TI assembler.  */\n-#define PARANOID_FLAG       0x0000040 /* Be paranoid about DP reg. in ISRs.  */\n-#define MEMPARM_FLAG        0x0000080 /* Pass arguments on stack.  */\n-#define DEVEL_FLAG          0x0000100 /* Enable features under development.  */\n-#define RPTB_FLAG           0x0000200 /* Enable repeat block.  */\n-#define BK_FLAG             0x0000400 /* Use BK as general register.  */\n-#define DB_FLAG             0x0000800 /* Use decrement and branch for C3x.  */\n-#define DEBUG_FLAG          0x0001000 /* Enable debugging of GCC.  */\n-#define HOIST_FLAG          0x0002000 /* Force constants into registers.  */\n-#define LOOP_UNSIGNED_FLAG  0x0004000 /* Allow unsigned loop counters.  */\n-#define FORCE_FLAG          0x0008000 /* Force op0 and op1 to be same.  */\n-#define PRESERVE_FLOAT_FLAG 0x0010000 /* Save all 40 bits for floats.  */\n-#define PARALLEL_INSN_FLAG  0x0020000 /* Allow parallel insns.  */\n-#define PARALLEL_MPY_FLAG   0x0040000 /* Allow MPY||ADD, MPY||SUB insns.  */\n-#define ALIASES_FLAG\t    0x0080000 /* Assume mem refs possibly aliased.  */\n-\n-#define C30_FLAG            0x0100000 /* Emit C30 code.  */\n-#define C31_FLAG            0x0200000 /* Emit C31 code.  */\n-#define C32_FLAG            0x0400000 /* Emit C32 code.  */\n-#define C33_FLAG            0x0800000 /* Emit C33 code.  */\n-#define C40_FLAG            0x1000000 /* Emit C40 code.  */\n-#define C44_FLAG            0x2000000 /* Emit C44 code.  */\n-\n-/* Run-time compilation parameters selecting different hardware subsets.\n-\n-   Macro to define tables used to set the flags.\n-   This is a list in braces of triplets in braces,\n-   each pair being { \"NAME\", VALUE, \"DESCRIPTION\" }\n-   where VALUE is the bits to set or minus the bits to clear.\n-   An empty string NAME is used to identify the default VALUE.  */\n-\n-#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n-{ { \"small\", SMALL_MEMORY_FLAG,\t\t\t\t\t\t\\\n-    N_(\"Small memory model\") },\t\t\t\t\t\t\\\n-  { \"big\", -SMALL_MEMORY_FLAG,\t\t\t\t\t\t\\\n-    N_(\"Big memory model\") },\t\t\t\t\t\t\\\n-  { \"mpyi\", MPYI_FLAG,\t\t\t\t\t\t\t\\\n-    N_(\"Use MPYI instruction for C3x\") },\t\t\t\t\\\n-  { \"no-mpyi\", -MPYI_FLAG,\t\t\t\t\t\t\\\n-    N_(\"Do not use MPYI instruction for C3x\") },\t\t\t\\\n-  { \"fast-fix\", FAST_FIX_FLAG,\t\t\t\t\t\t\\\n-    N_(\"Use fast but approximate float to integer conversion\") },\t\\\n-  { \"no-fast-fix\", -FAST_FIX_FLAG,\t\t\t\t\t\\\n-    N_(\"Use slow but accurate float to integer conversion\") },\t\t\\\n-  { \"rpts\", RPTS_FLAG,\t\t\t\t\t\t\t\\\n-    N_(\"Enable use of RTPS instruction\") },\t\t\t\t\\\n-  { \"no-rpts\", -RPTS_FLAG,\t\t\t\t\t\t\\\n-    N_(\"Disable use of RTPS instruction\") },\t\t\t\t\\\n-  { \"rptb\", RPTB_FLAG,\t\t\t\t\t\t\t\\\n-    N_(\"Enable use of RTPB instruction\") },\t\t\t\t\\\n-  { \"no-rptb\", -RPTB_FLAG,\t\t\t\t\t\t\\\n-    N_(\"Disable use of RTPB instruction\") },\t\t\t\t\\\n-  { \"30\", C30_FLAG,\t\t\t\t\t\t\t\\\n-    N_(\"Generate code for C30 CPU\")},\t\t\t\t\t\\\n-  { \"31\", C31_FLAG,\t\t\t\t\t\t\t\\\n-    N_(\"Generate code for C31 CPU\")},\t\t\t\t\t\\\n-  { \"32\", C32_FLAG,\t\t\t\t\t\t\t\\\n-    N_(\"Generate code for C32 CPU\")},\t\t\t\t\t\\\n-  { \"33\", C33_FLAG,\t\t\t\t\t\t\t\\\n-    N_(\"Generate code for C33 CPU\")},\t\t\t\t\t\\\n-  { \"40\", C40_FLAG,\t\t\t\t\t\t\t\\\n-    N_(\"Generate code for C40 CPU\")},\t\t\t\t\t\\\n-  { \"44\", C44_FLAG,\t\t\t\t\t\t\t\\\n-    N_(\"Generate code for C44 CPU\")},\t\t\t\t\t\\\n-  { \"ti\", TI_FLAG,\t\t\t\t\t\t\t\\\n-    N_(\"Emit code compatible with TI tools\")},\t\t\t\t\\\n-  { \"no-ti\", -TI_FLAG,\t\t\t\t\t\t\t\\\n-    N_(\"Emit code to use GAS extensions\")},\t\t\t\t\\\n-  { \"paranoid\", PARANOID_FLAG,\t\t\t\t\t\t\\\n-    N_(\"Save DP across ISR in small memory model\") },\t\t\t\\\n-  { \"no-paranoid\", -PARANOID_FLAG,\t\t\t\t\t\\\n-    N_(\"Don't save DP across ISR in small memory model\") },\t\t\\\n-  { \"isr-dp-reload\", PARANOID_FLAG,\t\t\t\t\t\\\n-    N_(\"Save DP across ISR in small memory model\") },\t\t\t\\\n-  { \"no-isr-dp-reload\", -PARANOID_FLAG,\t\t\t\t\t\\\n-    N_(\"Don't save DP across ISR in small memory model\") },\t\t\\\n-  { \"memparm\", MEMPARM_FLAG,\t\t\t\t\t\t\\\n-    N_(\"Pass arguments on the stack\") },\t\t\t\t\\\n-  { \"regparm\", -MEMPARM_FLAG,\t\t\t\t\t\t\\\n-    N_(\"Pass arguments in registers\") },\t\t\t\t\\\n-  { \"devel\", DEVEL_FLAG,\t\t\t\t\t\t\\\n-    N_(\"Enable new features under development\") },\t\t\t\\\n-  { \"no-devel\", -DEVEL_FLAG,\t\t\t\t\t\t\\\n-    N_(\"Disable new features under development\") },\t\t\t\\\n-  { \"bk\", BK_FLAG,\t\t\t\t\t\t\t\\\n-    N_(\"Use the BK register as a general purpose register\") },\t\t\\\n-  { \"no-bk\", -BK_FLAG,\t\t\t\t\t\t\t\\\n-    N_(\"Do not allocate BK register\") },\t\t\t\t\\\n-  { \"db\", DB_FLAG,\t\t\t\t\t\t\t\\\n-    N_(\"Enable use of DB instruction\") },\t\t\t\t\\\n-  { \"no-db\", -DB_FLAG,\t\t\t\t\t\t\t\\\n-    N_(\"Disable use of DB instruction\") },\t\t\t\t\\\n-  { \"debug\", DEBUG_FLAG,\t\t\t\t\t\t\\\n-    N_(\"Enable debugging\") },\t\t\t\t\t\t\\\n-  { \"no-debug\", -DEBUG_FLAG,\t\t\t\t\t\t\\\n-    N_(\"Disable debugging\") },\t\t\t\t\t\t\\\n-  { \"hoist\", HOIST_FLAG,\t\t\t\t\t\t\\\n-    N_(\"Force constants into registers to improve hoisting\") },\t\t\\\n-  { \"no-hoist\", -HOIST_FLAG,\t\t\t\t\t\t\\\n-    N_(\"Don't force constants into registers\") },\t\t\t\\\n-  { \"force\", FORCE_FLAG,\t\t\t\t\t\t\\\n-    N_(\"Force RTL generation to emit valid 3 operand insns\") },\t\t\\\n-  { \"no-force\", -FORCE_FLAG,\t\t\t\t\t\t\\\n-    N_(\"Allow RTL generation to emit invalid 3 operand insns\") },\t\\\n-  { \"loop-unsigned\", LOOP_UNSIGNED_FLAG,\t\t\t\t\\\n-    N_(\"Allow unsigned iteration counts for RPTB/DB\") },\t\t\\\n-  { \"no-loop-unsigned\", -LOOP_UNSIGNED_FLAG,\t\t\t\t\\\n-    N_(\"Disallow unsigned iteration counts for RPTB/DB\") },\t\t\\\n-  { \"preserve-float\", PRESERVE_FLOAT_FLAG,\t\t\t\t\\\n-    N_(\"Preserve all 40 bits of FP reg across call\") },\t\t\t\\\n-  { \"no-preserve-float\", -PRESERVE_FLOAT_FLAG,\t\t\t\t\\\n-    N_(\"Only preserve 32 bits of FP reg across call\") },\t\t\\\n-  { \"parallel-insns\", PARALLEL_INSN_FLAG,\t\t\t\t\\\n-    N_(\"Enable parallel instructions\") },\t\t\t\t\\\n-  { \"no-parallel-insns\", -PARALLEL_INSN_FLAG,\t\t\t\t\\\n-    N_(\"Disable parallel instructions\") },\t\t\t\t\\\n-  { \"parallel-mpy\", PARALLEL_MPY_FLAG,\t\t\t\t\t\\\n-    N_(\"Enable MPY||ADD and MPY||SUB instructions\") },\t\t\t\\\n-  { \"no-parallel-mpy\", -PARALLEL_MPY_FLAG,\t\t\t\t\\\n-    N_(\"Disable MPY||ADD and MPY||SUB instructions\") },\t\t\t\\\n-  { \"aliases\", ALIASES_FLAG,\t\t\t\t\t\t\\\n-    N_(\"Assume that pointers may be aliased\") },\t\t\t\\\n-  { \"no-aliases\", -ALIASES_FLAG,\t\t\t\t\t\\\n-    N_(\"Assume that pointers not aliased\") },\t\t\t\t\\\n-  { \"\", TARGET_DEFAULT, \"\"} }\n-\n-/* Default target switches.  */\n-\n-/* Play safe, not the fastest code.  */\n-#define TARGET_DEFAULT\t\tALIASES_FLAG | PARALLEL_INSN_FLAG \\\n-\t\t\t\t| PARALLEL_MPY_FLAG | RPTB_FLAG\n-\n /* Caveats:\n    Max iteration count for RPTB/RPTS is 2^31 + 1.\n    Max iteration count for DB is 2^31 + 1 for C40, but 2^23 + 1 for C30.\n    RPTS blocks interrupts.  */\n \n \n-extern int target_flags;\n+extern int c4x_rpts_cycles;\t        /* Max cycles for RPTS.  */\n+extern int c4x_cpu_version;\t\t/* Cpu version C30/31/32/33/40/44.  */\n \n #define TARGET_INLINE\t\t(! optimize_size) /* Inline MPYI.  */\n #define TARGET_SMALL_REG_CLASS\t0\n \n-#define TARGET_SMALL\t\t(target_flags & SMALL_MEMORY_FLAG)\n-#define TARGET_MPYI\t\t(!TARGET_C3X || (target_flags & MPYI_FLAG))\n-#define TARGET_FAST_FIX\t\t(target_flags & FAST_FIX_FLAG)\n-#define TARGET_RPTS\t\t(target_flags & RPTS_FLAG)\n-#define TARGET_TI\t\t(target_flags & TI_FLAG)\n-#define TARGET_PARANOID\t\t(target_flags & PARANOID_FLAG)\n-#define TARGET_MEMPARM\t\t(target_flags & MEMPARM_FLAG)\n-#define TARGET_DEVEL\t\t(target_flags & DEVEL_FLAG)\n-#define TARGET_RPTB\t\t(target_flags & RPTB_FLAG \\\n-\t\t\t\t && optimize >= 2)\n-#define TARGET_BK\t\t(target_flags & BK_FLAG)\n-#define TARGET_DB\t\t(! TARGET_C3X || (target_flags & DB_FLAG))\n-#define TARGET_DEBUG\t\t(target_flags & DEBUG_FLAG)\n-#define TARGET_HOIST\t\t(target_flags & HOIST_FLAG)\n-#define TARGET_LOOP_UNSIGNED\t(target_flags & LOOP_UNSIGNED_FLAG)\n-#define TARGET_FORCE\t\t(target_flags & FORCE_FLAG)\n-#define\tTARGET_PRESERVE_FLOAT\t(target_flags & PRESERVE_FLOAT_FLAG)\n-#define TARGET_PARALLEL\t\t((target_flags & PARALLEL_INSN_FLAG) \\\n-\t\t\t\t && optimize >= 2)\n-#define TARGET_PARALLEL_MPY\t(TARGET_PARALLEL \\\n-\t\t\t\t && (target_flags & PARALLEL_MPY_FLAG))\n-#define\tTARGET_ALIASES\t\t(target_flags & ALIASES_FLAG)\n-\n-#define TARGET_C3X\t\t(target_flags & C3X_FLAG)\n-#define TARGET_C30\t\t(target_flags & C30_FLAG)\n-#define TARGET_C31\t\t(target_flags & C31_FLAG)\n-#define TARGET_C32\t\t(target_flags & C32_FLAG)\n-#define TARGET_C33\t\t(target_flags & C33_FLAG)\n-#define TARGET_C40\t\t(target_flags & C40_FLAG)\n-#define TARGET_C44\t\t(target_flags & C44_FLAG)\n+#define TARGET_C3X\t\t(c4x_cpu_version >= 30 \\\n+\t\t\t\t && c4x_cpu_version <= 39)\n+\n+#define TARGET_C30\t\t(c4x_cpu_version == 30)\n+#define TARGET_C31\t\t(c4x_cpu_version == 31)\n+#define TARGET_C32\t\t(c4x_cpu_version == 32)\n+#define TARGET_C33\t\t(c4x_cpu_version == 33)\n+#define TARGET_C40\t\t(c4x_cpu_version == 40)\n+#define TARGET_C44\t\t(c4x_cpu_version == 44)\n \n /* Nonzero to use load_immed_addr pattern rather than forcing memory\n    addresses into memory.  */\n@@ -321,16 +162,6 @@ extern int target_flags;\n \n #define TARGET_RPTS_CYCLES(CYCLES) (TARGET_RPTS || (CYCLES) < c4x_rpts_cycles)\n \n-/* -mcpu=XX    with XX = target DSP version number.  */\n-\n-extern const char *c4x_rpts_cycles_string, *c4x_cpu_version_string;\n-\n-#define TARGET_OPTIONS\t\t\t\t\t\t\\\n-{ {\"rpts=\", &c4x_rpts_cycles_string,\t\t\t\t\\\n-   N_(\"Specify maximum number of iterations for RPTS\"), 0},\t\\\n-  {\"cpu=\", &c4x_cpu_version_string,\t\t\t\t\\\n-   N_(\"Select CPU to generate code for\"), 0} }\n-\n /* Sometimes certain combinations of command options do not make sense\n    on a particular target machine.  You can define a macro\n    `OVERRIDE_OPTIONS' to take account of this.  This macro, if"}, {"sha": "a135e632fe4a17d8b0af0b6f91fc1466dfd714e3", "filename": "gcc/config/c4x/c4x.opt", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d12f3c1f9d33ebf6191faa3ffd403e826e206e39/gcc%2Fconfig%2Fc4x%2Fc4x.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d12f3c1f9d33ebf6191faa3ffd403e826e206e39/gcc%2Fconfig%2Fc4x%2Fc4x.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.opt?ref=d12f3c1f9d33ebf6191faa3ffd403e826e206e39", "patch": "@@ -0,0 +1,140 @@\n+; Options for the TMS320C[34]x port of the compiler.\n+\n+; Copyright (C) 2005 Free Software Foundation, Inc.\n+;\n+; This file is part of GCC.\n+;\n+; GCC is free software; you can redistribute it and/or modify it under\n+; the terms of the GNU General Public License as published by the Free\n+; Software Foundation; either version 2, or (at your option) any later\n+; version.\n+;\n+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+; WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; for more details.\n+;\n+; You should have received a copy of the GNU General Public License\n+; along with GCC; see the file COPYING.  If not, write to the Free\n+; Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n+; 02111-1307, USA.\n+\n+m30\n+Target RejectNegative\n+Generate code for C30 CPU\n+\n+m31\n+Target RejectNegative\n+Generate code for C31 CPU\n+\n+m32\n+Target RejectNegative\n+Generate code for C32 CPU\n+\n+m33\n+Target RejectNegative\n+Generate code for C33 CPU\n+\n+m40\n+Target RejectNegative\n+Generate code for C40 CPU\n+\n+m44\n+Target RejectNegative\n+Generate code for C44 CPU\n+\n+maliases\n+Target Report Mask(ALIASES)\n+Assume that pointers may be aliased\n+\n+mbig\n+Target RejectNegative Report InverseMask(SMALL)\n+Big memory model\n+\n+mbk\n+Target Report Mask(BK)\n+Use the BK register as a general purpose register\n+\n+mcpu=\n+Target RejectNegative Joined\n+-mcpu=CPU\tGenerate code for CPU\n+\n+mdb\n+Target Report Mask(DB)\n+Enable use of DB instruction\n+\n+mdebug\n+Target Report Mask(DEBUG)\n+Enable debugging\n+\n+mdevel\n+Target Report Mask(DEVEL)\n+Enable new features under development\n+\n+mfast-fix\n+Target Report Mask(FAST_FIX)\n+Use fast but approximate float to integer conversion\n+\n+mforce\n+Target Report Mask(FORCE)\n+Force RTL generation to emit valid 3 operand insns\n+\n+mhoist\n+Target Report Mask(HOIST)\n+Force constants into registers to improve hoisting\n+\n+misr-dp-reload\n+Target Mask(PARANOID) MaskExists\n+Save DP across ISR in small memory model\n+\n+mloop-unsigned\n+Target Report Mask(LOOP_UNSIGNED)\n+Allow unsigned iteration counts for RPTB/DB\n+\n+mmemparm\n+Target RejectNegative Report Mask(MEMPARM)\n+Pass arguments on the stack\n+\n+mmpyi\n+Target Report Mask(MPYI)\n+Use MPYI instruction for C3x\n+\n+mparallel-insns\n+Target Report Mask(PARALLEL)\n+Enable parallel instructions\n+\n+mparallel-mpy\n+Target Report Mask(PARALLEL_MPY)\n+Enable MPY||ADD and MPY||SUB instructions\n+\n+mparanoid\n+Target Report Mask(PARANOID)\n+Save DP across ISR in small memory model\n+\n+mpreserve-float\n+Target Report Mask(PRESERVE_FLOAT)\n+Preserve all 40 bits of FP reg across call\n+\n+mregparm\n+Target RejectNegative Report InverseMask(MEMPARM)\n+Pass arguments in registers\n+\n+mrptb\n+Target Report Mask(RPTB)\n+Enable use of RTPB instruction\n+\n+mrpts\n+Target Report Mask(RPTS)\n+Enable use of RTPS instruction\n+\n+mrpts=\n+Target RejectNegative Joined UInteger\n+-mrpts=N\tSet the maximum number of iterations for RPTS to N\n+\n+msmall\n+Target RejectNegative Report Mask(SMALL)\n+Small memory model\n+\n+mti\n+Target Report Mask(TI)\n+Emit code compatible with TI tools"}]}