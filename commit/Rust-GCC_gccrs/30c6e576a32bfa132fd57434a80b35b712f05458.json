{"sha": "30c6e576a32bfa132fd57434a80b35b712f05458", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBjNmU1NzZhMzJiZmExMzJmZDU3NDM0YTgwYjM1YjcxMmYwNTQ1OA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-01-14T20:56:28Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-03T10:01:43Z"}, "message": "[Ada] Get rid of more references to Universal_Integer in expanded code\n\n2020-06-03  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/s-atopar.adb (Atomic_Fetch_And_Add): Make use of an\n\tequivalent static expression.\n\t(Atomic_Fetch_And_Subtract): Likewise.\n\t(Is_Lock_Free): Likewise.\n\t* libgnat/s-atopex.adb (Atomic_Exchange): Likewise.\n\t(Atomic_Compare_And_Exchange): Likewise.\n\t(Is_Lock_Free): Likewise.", "tree": {"sha": "e855d69fd3efa3eeeee3706a687f5170890bdc1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e855d69fd3efa3eeeee3706a687f5170890bdc1d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30c6e576a32bfa132fd57434a80b35b712f05458", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c6e576a32bfa132fd57434a80b35b712f05458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c6e576a32bfa132fd57434a80b35b712f05458", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c6e576a32bfa132fd57434a80b35b712f05458/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f38efc1361c67077f175f194a34718de85d17a24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38efc1361c67077f175f194a34718de85d17a24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f38efc1361c67077f175f194a34718de85d17a24"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "d4590c708e83ee853eebf16b62d9cdae18e34a75", "filename": "gcc/ada/libgnat/s-atopar.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6e576a32bfa132fd57434a80b35b712f05458/gcc%2Fada%2Flibgnat%2Fs-atopar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6e576a32bfa132fd57434a80b35b712f05458/gcc%2Fada%2Flibgnat%2Fs-atopar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-atopar.adb?ref=30c6e576a32bfa132fd57434a80b35b712f05458", "patch": "@@ -88,7 +88,7 @@ package body System.Atomic_Operations.Arithmetic is\n       pragma Warnings (On);\n \n    begin\n-      case Item'Size is\n+      case Atomic_Type'Size is\n          when 8      => return Atomic_Fetch_Add_1 (Item'Address, Value);\n          when 16     => return Atomic_Fetch_Add_2 (Item'Address, Value);\n          when 32     => return Atomic_Fetch_Add_4 (Item'Address, Value);\n@@ -125,7 +125,7 @@ package body System.Atomic_Operations.Arithmetic is\n       pragma Warnings (On);\n \n    begin\n-      case Item'Size is\n+      case Atomic_Type'Size is\n          when 8      => return Atomic_Fetch_Sub_1 (Item'Address, Value);\n          when 16     => return Atomic_Fetch_Sub_2 (Item'Address, Value);\n          when 32     => return Atomic_Fetch_Sub_4 (Item'Address, Value);\n@@ -139,9 +139,10 @@ package body System.Atomic_Operations.Arithmetic is\n    ------------------\n \n    function Is_Lock_Free (Item : aliased Atomic_Type) return Boolean is\n+      pragma Unreferenced (Item);\n       use type Interfaces.C.size_t;\n    begin\n-      return Boolean (Atomic_Always_Lock_Free (Item'Size / 8));\n+      return Boolean (Atomic_Always_Lock_Free (Atomic_Type'Size / 8));\n    end Is_Lock_Free;\n \n end System.Atomic_Operations.Arithmetic;"}, {"sha": "1c2921f9151e0fb3a7686bb8dcc4bf2a2f47bbc8", "filename": "gcc/ada/libgnat/s-atopex.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c6e576a32bfa132fd57434a80b35b712f05458/gcc%2Fada%2Flibgnat%2Fs-atopex.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c6e576a32bfa132fd57434a80b35b712f05458/gcc%2Fada%2Flibgnat%2Fs-atopex.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-atopex.adb?ref=30c6e576a32bfa132fd57434a80b35b712f05458", "patch": "@@ -66,7 +66,7 @@ package body System.Atomic_Operations.Exchange is\n       pragma Warnings (On);\n \n    begin\n-      case Item'Size is\n+      case Atomic_Type'Size is\n          when 8      => return Atomic_Exchange_1 (Item'Address, Value);\n          when 16     => return Atomic_Exchange_2 (Item'Address, Value);\n          when 32     => return Atomic_Exchange_4 (Item'Address, Value);\n@@ -124,7 +124,7 @@ package body System.Atomic_Operations.Exchange is\n       pragma Warnings (On);\n \n    begin\n-      case Item'Size is\n+      case Atomic_Type'Size is\n          when 8 =>\n             return Boolean\n               (Atomic_Compare_Exchange_1\n@@ -151,9 +151,10 @@ package body System.Atomic_Operations.Exchange is\n    ------------------\n \n    function Is_Lock_Free (Item : aliased Atomic_Type) return Boolean is\n+      pragma Unreferenced (Item);\n       use type Interfaces.C.size_t;\n    begin\n-      return Boolean (Atomic_Always_Lock_Free (Item'Size / 8));\n+      return Boolean (Atomic_Always_Lock_Free (Atomic_Type'Size / 8));\n    end Is_Lock_Free;\n \n end System.Atomic_Operations.Exchange;"}]}