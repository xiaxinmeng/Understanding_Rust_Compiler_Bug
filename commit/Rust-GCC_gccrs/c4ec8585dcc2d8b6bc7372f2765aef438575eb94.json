{"sha": "c4ec8585dcc2d8b6bc7372f2765aef438575eb94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRlYzg1ODVkY2MyZDhiNmJjNzM3MmYyNzY1YWVmNDM4NTc1ZWI5NA==", "commit": {"author": {"name": "Mark Wielaard", "email": "mjw@redhat.com", "date": "2016-11-04T23:55:01Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2016-11-04T23:55:01Z"}, "message": "libiberty: Fix -Wimplicit-fallthrough warnings.\n\nAdjust some comments, add some explicit fall through comments or explicit\nreturns where necessary to not get implicit-fallthrough warnings.\n\nAll fall throughs were deliberate. In one case I added an explicit return\nfalse for clarity instead of falling through a default case (that also\nwould return false).\n\nlibiberty/ChangeLog:\n\n       * cplus-dem.c (demangle_signature): Move fall through comment.\n       (demangle_fund_type): Add fall through comment between 'G' and 'I'.\n       * hashtab.c (iterative_hash): Add fall through comments.\n       * regex.c (regex_compile): Add Fall through comment after '+'/'?'.\n       (byte_re_match_2_internal): Add Fall through comment after jump_n.\n       Change \"Note fall through\" to \"Fall through\".\n       (common_op_match_null_string_p): Return false after set_number_at\n       instead of fall through.\n\nFrom-SVN: r241864", "tree": {"sha": "3df95a30e4d33af6c4197800347e9b803d1b2f2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3df95a30e4d33af6c4197800347e9b803d1b2f2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4ec8585dcc2d8b6bc7372f2765aef438575eb94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ec8585dcc2d8b6bc7372f2765aef438575eb94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4ec8585dcc2d8b6bc7372f2765aef438575eb94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ec8585dcc2d8b6bc7372f2765aef438575eb94/comments", "author": null, "committer": null, "parents": [{"sha": "8d48126dc7fc47684bf655d298951766a456c7ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d48126dc7fc47684bf655d298951766a456c7ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d48126dc7fc47684bf655d298951766a456c7ec"}], "stats": {"total": 44, "additions": 29, "deletions": 15}, "files": [{"sha": "40e5bc7cc9e74243586dd7a9d4781544befc9715", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ec8585dcc2d8b6bc7372f2765aef438575eb94/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ec8585dcc2d8b6bc7372f2765aef438575eb94/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=c4ec8585dcc2d8b6bc7372f2765aef438575eb94", "patch": "@@ -1,3 +1,14 @@\n+2016-11-02  Mark Wielaard  <mjw@redhat.com>\n+\n+\t* cplus-dem.c (demangle_signature): Move fall through comment.\n+\t(demangle_fund_type): Add fall through comment between 'G' and 'I'.\n+\t* hashtab.c (iterative_hash): Add fall through comments.\n+\t* regex.c (regex_compile): Add Fall through comment after '+'/'?'.\n+\t(byte_re_match_2_internal): Add Fall through comment after jump_n.\n+\tChange \"Note fall through\" to \"Fall through\".\n+\t(common_op_match_null_string_p): Return false after set_number_at\n+\tinstead of fall through.\n+\n 2016-11-01  Jason Merrill  <jason@redhat.com>\n \n \t* cp-demangle.c (d_ctor_dtor_name): Handle inheriting constructor."}, {"sha": "c955bfbe1e7d768b452a5ee24141c4581b3b7849", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ec8585dcc2d8b6bc7372f2765aef438575eb94/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ec8585dcc2d8b6bc7372f2765aef438575eb94/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=c4ec8585dcc2d8b6bc7372f2765aef438575eb94", "patch": "@@ -1657,9 +1657,7 @@ demangle_signature (struct work_stuff *work,\n \t      (*mangled)++;\n \t      break;\n \t    }\n-\t  else\n-\t    /* fall through */\n-\t    {;}\n+\t  /* fall through */\n \n \tdefault:\n \t  if (AUTO_DEMANGLING || GNU_DEMANGLING)\n@@ -4024,6 +4022,7 @@ demangle_fund_type (struct work_stuff *work,\n \t  success = 0;\n \t  break;\n \t}\n+      /* fall through */\n     case 'I':\n       (*mangled)++;\n       if (**mangled == '_')"}, {"sha": "99381b17fd60805883a8eb665c73821292b9b8b3", "filename": "libiberty/hashtab.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ec8585dcc2d8b6bc7372f2765aef438575eb94/libiberty%2Fhashtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ec8585dcc2d8b6bc7372f2765aef438575eb94/libiberty%2Fhashtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fhashtab.c?ref=c4ec8585dcc2d8b6bc7372f2765aef438575eb94", "patch": "@@ -962,17 +962,17 @@ iterative_hash (const PTR k_in /* the key */,\n   c += length;\n   switch(len)              /* all the case statements fall through */\n     {\n-    case 11: c+=((hashval_t)k[10]<<24);\n-    case 10: c+=((hashval_t)k[9]<<16);\n-    case 9 : c+=((hashval_t)k[8]<<8);\n+    case 11: c+=((hashval_t)k[10]<<24);\t/* fall through */\n+    case 10: c+=((hashval_t)k[9]<<16);\t/* fall through */\n+    case 9 : c+=((hashval_t)k[8]<<8);\t/* fall through */\n       /* the first byte of c is reserved for the length */\n-    case 8 : b+=((hashval_t)k[7]<<24);\n-    case 7 : b+=((hashval_t)k[6]<<16);\n-    case 6 : b+=((hashval_t)k[5]<<8);\n-    case 5 : b+=k[4];\n-    case 4 : a+=((hashval_t)k[3]<<24);\n-    case 3 : a+=((hashval_t)k[2]<<16);\n-    case 2 : a+=((hashval_t)k[1]<<8);\n+    case 8 : b+=((hashval_t)k[7]<<24);\t/* fall through */\n+    case 7 : b+=((hashval_t)k[6]<<16);\t/* fall through */\n+    case 6 : b+=((hashval_t)k[5]<<8);\t/* fall through */\n+    case 5 : b+=k[4];\t\t\t/* fall through */\n+    case 4 : a+=((hashval_t)k[3]<<24);\t/* fall through */\n+    case 3 : a+=((hashval_t)k[2]<<16);\t/* fall through */\n+    case 2 : a+=((hashval_t)k[1]<<8);\t/* fall through */\n     case 1 : a+=k[0];\n       /* case 0: nothing left to add */\n     }"}, {"sha": "6854e3b41a018dca47e68afb74e33b12e93dd8b3", "filename": "libiberty/regex.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ec8585dcc2d8b6bc7372f2765aef438575eb94/libiberty%2Fregex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ec8585dcc2d8b6bc7372f2765aef438575eb94/libiberty%2Fregex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fregex.c?ref=c4ec8585dcc2d8b6bc7372f2765aef438575eb94", "patch": "@@ -2493,6 +2493,7 @@ PREFIX(regex_compile) (const char *ARG_PREFIX(pattern),\n           if ((syntax & RE_BK_PLUS_QM)\n               || (syntax & RE_LIMITED_OPS))\n             goto normal_char;\n+\t  /* Fall through.  */\n         handle_plus:\n         case '*':\n           /* If there is no previous pattern... */\n@@ -6697,6 +6698,7 @@ byte_re_match_2_internal (struct re_pattern_buffer *bufp,\n                 {\n                   case jump_n:\n \t\t    is_a_jump_n = true;\n+\t\t    /* Fall through.  */\n                   case pop_failure_jump:\n \t\t  case maybe_pop_jump:\n \t\t  case jump:\n@@ -7125,7 +7127,7 @@ byte_re_match_2_internal (struct re_pattern_buffer *bufp,\n               DEBUG_PRINT1 (\"  Match => jump.\\n\");\n \t      goto unconditional_jump;\n \t    }\n-        /* Note fall through.  */\n+        /* Fall through.  */\n \n \n \t/* The end of a simple repeat has a pop_failure_jump back to\n@@ -7150,7 +7152,7 @@ byte_re_match_2_internal (struct re_pattern_buffer *bufp,\n                                dummy_low_reg, dummy_high_reg,\n                                reg_dummy, reg_dummy, reg_info_dummy);\n           }\n-\t  /* Note fall through.  */\n+\t  /* Fall through.  */\n \n \tunconditional_jump:\n #ifdef _LIBC\n@@ -7453,6 +7455,7 @@ byte_re_match_2_internal (struct re_pattern_buffer *bufp,\n                 {\n                 case jump_n:\n                   is_a_jump_n = true;\n+\t\t  /* Fall through.  */\n                 case maybe_pop_jump:\n                 case pop_failure_jump:\n                 case jump:\n@@ -7718,6 +7721,7 @@ PREFIX(common_op_match_null_string_p) (UCHAR_T **p, UCHAR_T *end,\n \n     case set_number_at:\n       p1 += 2 * OFFSET_ADDRESS_SIZE;\n+      return false;\n \n     default:\n       /* All other opcodes mean we cannot match the empty string.  */"}]}