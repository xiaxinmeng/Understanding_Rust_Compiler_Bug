{"sha": "1f53367fb5f16985e82c39f56368b956292cf86c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY1MzM2N2ZiNWYxNjk4NWU4MmMzOWY1NjM2OGI5NTYyOTJjZjg2Yw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-07-22T19:10:38Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-07-22T19:11:00Z"}, "message": "libstdc++: Add static assertions to futures and promises [LWG 3458]\n\nLWG recently decided it should be ill-formed to instantiate std::future\nand std::shared_future for types that can't be returned from a function.\nThis adds static assertions to enforce it (std::future already failed,\nbut this makes the error more understandable).\n\nLWG 3466 extends that to std::promise. The actual constraint is that\nt.~T() is well-formed for the primary template, but rejecting arrays and\nfunctions as done for futures matches that condition.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/future (future, shared_future, promise): Add\n\tstatic assertions to the primary template to reject array and\n\tfunction types.\n\t* testsuite/30_threads/future/requirements/lwg3458.cc: New test.\n\t* testsuite/30_threads/promise/requirements/lwg3466.cc: New test.\n\t* testsuite/30_threads/shared_future/requirements/lwg3458.cc: New test.", "tree": {"sha": "557ab60dd23a3f0fa24b28f4f1d6ac0277ef50ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/557ab60dd23a3f0fa24b28f4f1d6ac0277ef50ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f53367fb5f16985e82c39f56368b956292cf86c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f53367fb5f16985e82c39f56368b956292cf86c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f53367fb5f16985e82c39f56368b956292cf86c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f53367fb5f16985e82c39f56368b956292cf86c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e55ba804d3b8de86a430a8a5553dfc1ad06daa74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e55ba804d3b8de86a430a8a5553dfc1ad06daa74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e55ba804d3b8de86a430a8a5553dfc1ad06daa74"}], "stats": {"total": 115, "additions": 115, "deletions": 0}, "files": [{"sha": "bdf4a75d694ecee78a9830f31c0a8a4a6c29d479", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f53367fb5f16985e82c39f56368b956292cf86c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f53367fb5f16985e82c39f56368b956292cf86c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=1f53367fb5f16985e82c39f56368b956292cf86c", "patch": "@@ -763,6 +763,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Res>\n     class future : public __basic_future<_Res>\n     {\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 3458. Is shared_future intended to work with arrays or function types?\n+      static_assert(!is_array<_Res>{}, \"result type is not an array\");\n+      static_assert(!is_function<_Res>{}, \"result type is not a function\");\n+\n       friend class promise<_Res>;\n       template<typename> friend class packaged_task;\n       template<typename _Fn, typename... _Args>\n@@ -893,6 +898,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Res>\n     class shared_future : public __basic_future<_Res>\n     {\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 3458. Is shared_future intended to work with arrays or function types?\n+      static_assert(!is_array<_Res>{}, \"result type is not an array\");\n+      static_assert(!is_function<_Res>{}, \"result type is not a function\");\n+\n       typedef __basic_future<_Res> _Base_type;\n \n     public:\n@@ -1045,6 +1055,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Res>\n     class promise\n     {\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 3466: Specify the requirements for promise/future/[...] consistently\n+      static_assert(!is_array<_Res>{}, \"result type is not an array\");\n+      static_assert(!is_function<_Res>{}, \"result type is not a function\");\n+\n       typedef __future_base::_State_base \t_State;\n       typedef __future_base::_Result<_Res>\t_Res_type;\n       typedef __future_base::_Ptr<_Res_type>\t_Ptr_type;"}, {"sha": "2bc206c94501413d6cdef792fa5ed0ddfa7ccb9b", "filename": "libstdc++-v3/testsuite/30_threads/future/requirements/lwg3458.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f53367fb5f16985e82c39f56368b956292cf86c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Frequirements%2Flwg3458.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f53367fb5f16985e82c39f56368b956292cf86c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Frequirements%2Flwg3458.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Frequirements%2Flwg3458.cc?ref=1f53367fb5f16985e82c39f56368b956292cf86c", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+// LWG 3458\n+// Is shared_future intended to work with arrays or function types?\n+\n+#include <future>\n+\n+std::future<int(&)[1]> good;\n+std::future<int(&)()> good2;\n+\n+std::future<int[1]> bad; // { dg-error \"here\" }\n+// { dg-error \"result type is not an array\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output \"function returning an array\" }\n+\n+std::future<int()> bad2; // { dg-error \"here\" }\n+// { dg-error \"result type is not a function\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output \"function returning a function\" }"}, {"sha": "124c86c0392d5a7db891592ae014cd0187fede5f", "filename": "libstdc++-v3/testsuite/30_threads/promise/requirements/lwg3466.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f53367fb5f16985e82c39f56368b956292cf86c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Frequirements%2Flwg3466.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f53367fb5f16985e82c39f56368b956292cf86c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Frequirements%2Flwg3466.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fpromise%2Frequirements%2Flwg3466.cc?ref=1f53367fb5f16985e82c39f56368b956292cf86c", "patch": "@@ -0,0 +1,34 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+// LWG 3466\n+// Specify the requirements for promise/future/shared_future consistently\n+\n+#include <future>\n+\n+std::promise<int(&)[1]> good;\n+std::promise<int(&)()> good2;\n+\n+std::promise<int[1]> bad; // { dg-error \"here\" }\n+// { dg-error \"result type is not an array\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output {request for member '~int \\[1\\]'} }\n+\n+std::promise<int()> bad2; // { dg-error \"here\" }\n+// { dg-error \"result type is not a function\" \"\" { target *-*-* } 0 }\n+// { dg-prune-output {'sizeof \\(int\\(\\)\\)'} }"}, {"sha": "df5bfd2b976199bcf0742a8e2715adc1fc91f65c", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/requirements/lwg3458.cc", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f53367fb5f16985e82c39f56368b956292cf86c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Frequirements%2Flwg3458.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f53367fb5f16985e82c39f56368b956292cf86c/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Frequirements%2Flwg3458.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Frequirements%2Flwg3458.cc?ref=1f53367fb5f16985e82c39f56368b956292cf86c", "patch": "@@ -0,0 +1,32 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+// LWG 3458\n+// Is shared_future intended to work with arrays or function types?\n+\n+#include <future>\n+\n+std::shared_future<int(&)[1]> good;\n+std::shared_future<int(&)()> good2;\n+\n+std::shared_future<int[1]> bad; // { dg-error \"here\" }\n+// { dg-error \"result type is not an array\" \"\" { target *-*-* } 0 }\n+\n+std::shared_future<int()> bad2; // { dg-error \"here\" }\n+// { dg-error \"result type is not a function\" \"\" { target *-*-* } 0 }"}]}