{"sha": "e400b49192683f2f57e1e977b5d4d302c63ab8aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQwMGI0OTE5MjY4M2YyZjU3ZTFlOTc3YjVkNGQzMDJjNjNhYjhhYQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2019-10-17T12:04:51Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2019-10-17T12:04:51Z"}, "message": "[C++ PATCH] builtin fn creation\n\nhttps://gcc.gnu.org/ml/gcc-patches/2019-10/msg01283.html\n\t* decl.c (builtin_function_1): Merge into ...\n\t(cxx_builtin_function): ... here.  Nadger the decl before maybe\n\tcopying it.  Set the context.\n\t(cxx_builtin_function_ext_scope): Push to top level, then call\n\tcxx_builtin_function.\n\nFrom-SVN: r277102", "tree": {"sha": "0909280542f2487dfc6901401f893e0fef2fa416", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0909280542f2487dfc6901401f893e0fef2fa416"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e400b49192683f2f57e1e977b5d4d302c63ab8aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e400b49192683f2f57e1e977b5d4d302c63ab8aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e400b49192683f2f57e1e977b5d4d302c63ab8aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e400b49192683f2f57e1e977b5d4d302c63ab8aa/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a421fe9e610b5dbfce1913cd724c8ba193addd47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a421fe9e610b5dbfce1913cd724c8ba193addd47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a421fe9e610b5dbfce1913cd724c8ba193addd47"}], "stats": {"total": 85, "additions": 36, "deletions": 49}, "files": [{"sha": "09fe6b1531cb963d816be95c2867234387aecf42", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e400b49192683f2f57e1e977b5d4d302c63ab8aa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e400b49192683f2f57e1e977b5d4d302c63ab8aa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e400b49192683f2f57e1e977b5d4d302c63ab8aa", "patch": "@@ -1,3 +1,11 @@\n+2019-10-17  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* decl.c (builtin_function_1): Merge into ...\n+\t(cxx_builtin_function): ... here.  Nadger the decl before maybe\n+\tcopying it.  Set the context.\n+\t(cxx_builtin_function_ext_scope): Push to top level, then call\n+\tcxx_builtin_function.\n+\n 2019-10-16  Luis Machado  <luis.machado@linaro.org>\n \n \t* cp-gimplify.c: Fix reference to non-existing tree-gimple.c file."}, {"sha": "23e04e57e6994447b063f18a6f03920bee80bc13", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 28, "deletions": 49, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e400b49192683f2f57e1e977b5d4d302c63ab8aa/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e400b49192683f2f57e1e977b5d4d302c63ab8aa/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e400b49192683f2f57e1e977b5d4d302c63ab8aa", "patch": "@@ -71,7 +71,6 @@ static tree grokvardecl (tree, tree, tree, const cp_decl_specifier_seq *,\n \t\t\t int, int, int, bool, int, tree, location_t);\n static void check_static_variable_definition (tree, tree);\n static void record_unknown_type (tree, const char *);\n-static tree builtin_function_1 (tree, tree, bool);\n static int member_function_or_else (tree, tree, enum overload_flags);\n static tree local_variable_p_walkfn (tree *, int *, void *);\n static const char *tag_name (enum tag_types);\n@@ -4629,12 +4628,13 @@ cp_make_fname_decl (location_t loc, tree id, int type_dep)\n   return decl;\n }\n \n-static tree\n-builtin_function_1 (tree decl, tree context, bool is_global)\n-{\n-  tree          id = DECL_NAME (decl);\n-  const char *name = IDENTIFIER_POINTER (id);\n+/* Install DECL as a builtin function at current (global) scope.\n+   Return the new decl (if we found an existing version).  Also\n+   installs it into ::std, if it's not '_*'.  */\n \n+tree\n+cxx_builtin_function (tree decl)\n+{\n   retrofit_lang_decl (decl);\n \n   DECL_ARTIFICIAL (decl) = 1;\n@@ -4644,47 +4644,35 @@ builtin_function_1 (tree decl, tree context, bool is_global)\n   DECL_VISIBILITY (decl) = VISIBILITY_DEFAULT;\n   DECL_VISIBILITY_SPECIFIED (decl) = 1;\n \n-  DECL_CONTEXT (decl) = context;\n-\n-  /* A function in the user's namespace should have an explicit\n-     declaration before it is used.  Mark the built-in function as\n-     anticipated but not actually declared.  */\n+  tree id = DECL_NAME (decl);\n+  const char *name = IDENTIFIER_POINTER (id);\n   if (name[0] != '_' || name[1] != '_')\n+    /* In the user's namespace, it must be declared before use.  */\n+    DECL_ANTICIPATED (decl) = 1;\n+  else if (IDENTIFIER_LENGTH (id) > strlen (\"___chk\")\n+\t   && 0 != strncmp (name + 2, \"builtin_\", strlen (\"builtin_\"))\n+\t   && 0 == memcmp (name + IDENTIFIER_LENGTH (id) - strlen (\"_chk\"),\n+\t\t\t   \"_chk\", strlen (\"_chk\") + 1))\n+    /* Treat __*_chk fortification functions as anticipated as well,\n+       unless they are __builtin_*_chk.  */\n     DECL_ANTICIPATED (decl) = 1;\n-  else if (strncmp (name + 2, \"builtin_\", strlen (\"builtin_\")) != 0)\n-    {\n-      size_t len = strlen (name);\n-\n-      /* Treat __*_chk fortification functions as anticipated as well,\n-\t unless they are __builtin_*.  */\n-      if (len > strlen (\"___chk\")\n-\t  && memcmp (name + len - strlen (\"_chk\"),\n-\t\t     \"_chk\", strlen (\"_chk\") + 1) == 0)\n-\tDECL_ANTICIPATED (decl) = 1;\n-    }\n-\n-  if (is_global)\n-    return pushdecl_top_level (decl);\n-  else\n-    return pushdecl (decl);\n-}\n \n-tree\n-cxx_builtin_function (tree decl)\n-{\n-  tree          id = DECL_NAME (decl);\n-  const char *name = IDENTIFIER_POINTER (id);\n   /* All builtins that don't begin with an '_' should additionally\n      go in the 'std' namespace.  */\n   if (name[0] != '_')\n     {\n-      tree decl2 = copy_node(decl);\n+      tree std_decl = copy_decl (decl);\n+\n       push_namespace (std_identifier);\n-      builtin_function_1 (decl2, std_node, false);\n+      DECL_CONTEXT (std_decl) = FROB_CONTEXT (std_node);\n+      pushdecl (std_decl);\n       pop_namespace ();\n     }\n \n-  return builtin_function_1 (decl, NULL_TREE, false);\n+  DECL_CONTEXT (decl) = FROB_CONTEXT (current_namespace);\n+  decl = pushdecl (decl);\n+\n+  return decl;\n }\n \n /* Like cxx_builtin_function, but guarantee the function is added to the global\n@@ -4696,20 +4684,11 @@ cxx_builtin_function (tree decl)\n tree\n cxx_builtin_function_ext_scope (tree decl)\n {\n+  push_nested_namespace (global_namespace);\n+  decl = cxx_builtin_function (decl);\n+  pop_nested_namespace (global_namespace);\n \n-  tree          id = DECL_NAME (decl);\n-  const char *name = IDENTIFIER_POINTER (id);\n-  /* All builtins that don't begin with an '_' should additionally\n-     go in the 'std' namespace.  */\n-  if (name[0] != '_')\n-    {\n-      tree decl2 = copy_node(decl);\n-      push_namespace (std_identifier);\n-      builtin_function_1 (decl2, std_node, true);\n-      pop_namespace ();\n-    }\n-\n-  return builtin_function_1 (decl, NULL_TREE, true);\n+  return decl;\n }\n \n /* Generate a FUNCTION_DECL with the typical flags for a runtime library"}]}