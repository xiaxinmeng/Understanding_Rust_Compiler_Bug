{"sha": "4322eb6c0ee5bac01fbca9846438084d33367120", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMyMmViNmMwZWU1YmFjMDFmYmNhOTg0NjQzODA4NGQzMzM2NzEyMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-02-04T23:18:43Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-02-04T23:18:43Z"}, "message": "diagnostic.h (set_internal_error_function): Renamed.\n\n\t* diagnostic.h (set_internal_error_function): Renamed.\n\t* toplev.h (internal_error): Renamed from fatal.\n\t(pfatal_with_name): Deleted.\n\t(fatal_io_error): Now has printf-style arguments.\n\t* diagnostic.c (pfatal_with_name): Deleted.\n\t(fatal_io_error): Rework to have args in printf-style.\n\t(set_internal_error_function): Renamed from set_fatal_function.\n\t(internal_error): Renamed from fatal.\n\t(error_recursion, fancy_abort): Call internal_error instead of fatal.\n\t* dwarf2out.c (get_cfa_from_loc_descr): Likewise.\n\t* emit-rtl.c (gen_realpart, gen_imagpart): Likewise.\n\t* expr.c (check_max_integer_computation_mode, expand_expr): Likewise.\n\t* flow.c (verify_flow_info): Likewise.\n\t* config/arm/arm.c (thumb_unexpanded_epilogue): Likewise.\n\t* config/mips/mips.c (save_restore_insns): Likewise.\n\t* cp/init.c (build_java_class_ref): Likewise.\n\t(dsp16xx_reg_class_from_letter): Likewise.\n\t(limit_reload_class, double_reg_to_memory): Likewise.\n\t(print_operand_address, emit_1600_code_shift): Likewise.\n\t(gen_tst_reg, gen_compare_reg): Likewise.\n\t* config/m68hc11/m68hc11.c (m68hc11_emit_libcall): Likewise.\n\t* cp/decl.c (pushdecl): Likewise.\n\t* java/check-init.c (check_init): Likewise.\n\t* java/expr.c (java_lang_expand_expr): Likewise.\n\t* java/jcf-parse.c (get_constant): Likewise.\n\t* java/mangle.c (java_mangle_decl): Likewise.\n\t* java/parse.y (make_nested_class_name, java_complete_lhs): Likewise.\n\t(operator_string): Likewise.\n\n\t* except.c (duplicate_eh_handlers): Call abort instead of fatal.\n\t* flow.c (verify_flow_info): Likewise.\n\t* ch/convert.c (convert): Likewise.\n\t* ch/except.c (pop_handler, chill_check_no_handlers): Likewise.\n\t* ch/expr.c (chill_expand_expr): Likewise.\n\t* ch/parse.c (peek_token_, pushback_token, require): Likewise.\n\t* config/arm/arm.c (thumb_load_double_from_address): Likewise.\n\t* config/avr/avr.c (pttreg_to_str, unique_section): Likewise.\n\t(avr_normalize_condition): Likewise.\n\t* config/c4x/c4x.c (c4x_emit_libcall, c4x_valid_operands): Likewise.\n\t* config/dsp16xx/dsp16xx.c (dsp16xx_reg_class_from_letter): Likewise.\n\t(limit_reload_class, double_reg_to_memory): Likewise.\n\t(print_operand_address, emit_1600_code_shift): Likewise.\n\t(gen_tst_reg, gen_compare_reg): Likewise.\n\t* config/m68hc11/m68hc11.c (m68hc11_emit_libcall): Likewise.\n\t* cp/decl.c (pushdecl): Likewise.\n\t* java/check-init.c (check_init): Likewise.\n\t* java/class.c (build_class_ref): Likewise.\n\t* java/constants.c (write_constant_pool): Likewise.\n\t* java/decl.c (start_java_method): Likewise.\n\t* java/expr.c (push_type, java_stack_pop, java_stack_swap): Likewise.\n\t(java_stack_dup, encode_newarray_type): Likewise.\n\t(build_java_array_length_access): Likewise.\n\t(build_java_check_indexed_type, expand_java_pushc): Likewise.\n\t(build_java_soft_divmod, build_invokeinterface): Likewise.\n\t* java/java-tree.h (INNER_CLASS_P): Likewise.\n\t* java/jcf-parse.c (parse_signature, get_name_constant): Likewise.\n\t(give_name_to_class, get_class_constant): Likewise.\n\t* java/jcf-write.c (CHECK_PUT, CHECK_OP, get_access_flags): Likewise.\n\t(find_constant_index, generate_bytecode_conditional): Likewise.\n\t(generate_bytecode_insns, perform_relocations): Likewise.\n\t* java/lex.c (java_unget_unicode, java_lex): Likewise.\n\t* java/mangle.c (mangle_type, mangle_record_type): Likewise.\n\t(mangle_pointer_type, mangle_array_type, init_mangling): Likewise.\n\t(finish_mangling): Likewise.\n\t* java/parse.h (MARK_FINAL_PARMS): Likewise.\n\t* java/parse.y (pop_current_osb, unreachable_stmt_error): Likewise.\n\t(obtain_incomplete_type, java_complete_class): Likewise.\n\t(java_check_regular_methods, java_complete_expand_method): Likewise.\n\t(cut_identifier_in_qualified, check_deprecation): Likewise.\n\t(patch_invoke, find_applicable_accessible_methods_list): Likewise.\n\t(java_complete_lhs, lookup_name_in_blocks): Likewise.\n\t(check_final_variable_indirect_assignment, build_unaryop): Likewise.\n\t* java/typeck.c (set_local_type, parse_signature_type): Likewise.\n\t(parse_signature_string, build_java_signature): Likewise;\n\t(set_java_signature): Likewise.\n\t* java/verify.c (type_stack_dup, CHECK_PC_IN_RANGE): Likewise.\n\n\t* c-parse.in (methoddef): Call fatal_error instead of fatal.\n\t* objc/objc-act.c (build_ivar_chain): Likewise.\n\t* cp/except.c (decl_is_java_type): Likewise.\n\t* cp/init.c (build_java_class_ref): Likewise.\n\t* cp/init.c (build_new_1): Likewise.\n\t* f/com.c (ffecom_init_0): Likewise.\n\t* java/class.c (add_method, build_static_field_ref): Likewise.\n\t* java/expr.c (build_known_method_ref, expand_invoke): Likewise.\n\t* java/jcf-parse.c (get_constant, jcf_parse): Likewise.\n\t* java/lex.c (java_new_new_lexer): Likewise.\n\t* java/jv-scan.c (main): Likewise.\n\t(fatal_error): Renamed from fatal.\n\n\t* dwarfout.c (dwarfout_init): Call fatal_io_error instead of\n\tpfatal_with_name.\n\t* graph.c (clean_graph_dump_file): Likewise.\n\t* profile.c (init_branch_prob): Likewise.\n\t* ch/grant.c (write_grant_file): Likewise.\n\t* ch/lex.c (init_parse, same_file, yywrap): Likewise.\n\t* f/com.c (init_parse): Likewise.\n\t* java/jcf-parse.c (yyparse): Likewise.\n\t* objc/objc-act.c (objc_init): Likewise.\n\n\t* java/jcf-parse.c (jcf_parse_source): Call fatal_io_error, not fatal.\n\t(yyparse): Likewise.\n\t* java/jcf-write.c (make_class_file_name, write_classfile): Likewise.\n\t* java/lex.c (java_get_line_col): Likewise.\n\n\t* hash.c (hash_allocate): Don't check for failure returns from\n\tobstack functions that can't fail.\n\t(hash_table_init_n, hash_table_init): Likewise; also now return void.\n\t* hash.h (hash_table_init_n, hash_table_init): Now return void.\n\t* cp/decl.c (build_typename_type): hash_table_init now returns void.\n\n\t* ch/lang.c (GNU_xref_begin, GNU_xref_end): Deleted.\n\t* ch/lex.c (convert_bitstring): Delete check for alloca failure.\n\t* config/dsp16xx/dsp16xx.c (dsp16xx_invalid_register_for_compare):\n\tDeleted.\n\t* config/dsp16xx/dsp16xx.md (unnamed cmphi): Call abort instead of it.\n\n\t* f/com.c (ffecom_decode_include_option_): Make errors non-fatal.\n\t* f/lex.c (ffelex_cfelex_, ffelex_get_directive_line_): Likewise.\n\t(ffelex_hash_): Likewise.\n\t* config/arm/arm.c (arm_override_options): Likewise.\n\t* config/avr/avr.c (avr_override_options): Likewise.\n\t* config/c4x/c4x.c (c4x_expand_prologue): Likewise.\n\t* config/dsp16xx/dsp16xx.c (function_prologue): Likewise.\n\t* config/h8300/h8300.c (h8300_init_once): Likewise.\n\t* config/mips/mips.c (override_options): Likewise.\n\t* config/i386/i386.c (override_options): Likewise, rework.\n\t* config/m68k/m68k.c (override_options): Likewise.\n\t* cp/decl.c (init_decl_processing): Likewise.\n\t* java/jcf-parse.c (load_class): Likewise.\n\n\t* config/dsp16xx/dsp16xx.c (print_operand): Call output_operand_lossage\n\tinstead of fatal.\n\t* config/mips/mips.c (print_operand): Likewise.\n\n\t* java/lex.c (byteswap_init, need_byteswap): Only #ifdef HAVE_ICONV.\n\t* objc/objc_act.c (objc_check_decl): Remove unneeded fatal call.\n\t(get_object_reference): Likewise.\n\nFrom-SVN: r39444", "tree": {"sha": "0e77266cd57447ed6510e4425499630cf005ab39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e77266cd57447ed6510e4425499630cf005ab39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4322eb6c0ee5bac01fbca9846438084d33367120", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4322eb6c0ee5bac01fbca9846438084d33367120", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4322eb6c0ee5bac01fbca9846438084d33367120", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4322eb6c0ee5bac01fbca9846438084d33367120/comments", "author": null, "committer": null, "parents": [{"sha": "400500c4a50104969a303ba3c41983b134523e15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/400500c4a50104969a303ba3c41983b134523e15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/400500c4a50104969a303ba3c41983b134523e15"}], "stats": {"total": 106, "additions": 56, "deletions": 50}, "files": [{"sha": "8356aa22a4a979b53bc79c75212184b1e19ec27b", "filename": "gcc/ch/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4322eb6c0ee5bac01fbca9846438084d33367120/gcc%2Fch%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4322eb6c0ee5bac01fbca9846438084d33367120/gcc%2Fch%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FChangeLog?ref=4322eb6c0ee5bac01fbca9846438084d33367120", "patch": "@@ -1,3 +1,15 @@\n+Sun Feb  4 15:52:44 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* convert.c (convert): Call abort instead of fatal.\n+\t* except.c (pop_handler, chill_check_no_handlers): Likewise.\n+\t* expr.c (chill_expand_expr): Likewise.\n+\t* parse.c (peek_token_, pushback_token, require): Likewise.\n+\t* grant.c (write_grant_file): Call fatal_io_error instead of\n+\tpfatal_with_name.\n+\t* lex.c (init_parse, same_file, yywrap): Likewise.\n+\t* lang.c (GNU_xref_begin, GNU_xref_end): Deleted.\n+\t* lex.c (convert_bitstring): Delete check for alloca failure.\n+\n 2001-01-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* ch-tree.h (integer_minus_one_node): Moved to top level gcc"}, {"sha": "e7c93109bd0cbf2603789e4e17f6b7cecbbe3433", "filename": "gcc/ch/convert.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4322eb6c0ee5bac01fbca9846438084d33367120/gcc%2Fch%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4322eb6c0ee5bac01fbca9846438084d33367120/gcc%2Fch%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fconvert.c?ref=4322eb6c0ee5bac01fbca9846438084d33367120", "patch": "@@ -1,5 +1,5 @@\n /* Language-level data type conversion for GNU CHILL.\n-   Copyright (C) 1992, 1993, 1994, 1998, 1999, 2000\n+   Copyright (C) 1992, 1993, 1994, 1998, 1999, 2000, 2001\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -1135,11 +1135,12 @@ convert (type, expr)\n \t{\n \t  if (TREE_CODE (type) == SET_TYPE)\n \t    return digest_powerset_tuple (type, e);\n-\t  if (TREE_CODE (type) == RECORD_TYPE)\n+\t  else if (TREE_CODE (type) == RECORD_TYPE)\n \t    return digest_structure_tuple (type, e);\n-\t  if (TREE_CODE (type) == ARRAY_TYPE)\n+\t  else if (TREE_CODE (type) == ARRAY_TYPE)\n \t    return digest_array_tuple (type, e, 0);\n-\t  fatal (\"internal error - bad CONSTRUCTOR passed to convert\");\n+\t  else\n+\t    abort ();\n \t}\n       else if (TREE_CODE (e) == COND_EXPR)\n \te = build (COND_EXPR, type,"}, {"sha": "b32dba60636bf5f6a22daf485ff52a7ce6ca1fb2", "filename": "gcc/ch/except.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4322eb6c0ee5bac01fbca9846438084d33367120/gcc%2Fch%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4322eb6c0ee5bac01fbca9846438084d33367120/gcc%2Fch%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fexcept.c?ref=4322eb6c0ee5bac01fbca9846438084d33367120", "patch": "@@ -1,6 +1,6 @@\n /* Exception support for GNU CHILL.\n    WARNING:  Only works for native (needs setjmp.h)!  FIXME!\n-   Copyright (C) 1992, 1993, 1994, 1998, 1999, 2000\n+   Copyright (C) 1992, 1993, 1994, 1998, 1999, 2000, 2001\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -361,8 +361,9 @@ pop_handler (used)\n   if (pass == 1)\n     {\n       struct handler_state *old = current_handler;\n+\n       if (old == NULL)\n-\tfatal (\"internal error: on stack out of sync\");\n+\tabort ();\n       current_handler = old->next;\n \n       if (used)\n@@ -539,7 +540,7 @@ void\n chill_check_no_handlers ()\n {\n   if (current_handler != NULL)\n-    fatal (\"internal error: on stack not empty when done\");\n+    abort ();\n }\n \n static void"}, {"sha": "59371e820db468bee86f4673c6efbe36e1c5d51c", "filename": "gcc/ch/expr.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4322eb6c0ee5bac01fbca9846438084d33367120/gcc%2Fch%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4322eb6c0ee5bac01fbca9846438084d33367120/gcc%2Fch%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fexpr.c?ref=4322eb6c0ee5bac01fbca9846438084d33367120", "patch": "@@ -1,6 +1,6 @@\n /* Convert language-specific tree expression to rtl instructions,\n    for GNU CHILL compiler.\n-   Copyright (C) 1992, 1993, 1994, 1998, 1999, 2000\n+   Copyright (C) 1992, 1993, 1994, 1998, 1999, 2000, 2001\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -390,19 +390,20 @@ chill_expand_expr (exp, target, tmode, modifier)\n \t      {\n \t\ttree type0 = TREE_TYPE (exp0);\n \t\ttree type1 = TREE_TYPE (exp1);\n-\t\tint\tlen0 = int_size_in_bytes (type0);\n-\t\tint\tlen1 = int_size_in_bytes (type1);\n+\t\tHOST_WIDE_INT len0 = int_size_in_bytes (type0);\n+\t\tHOST_WIDE_INT len1 = int_size_in_bytes (type1);\n \n \t\tif (len0 < 0 && TYPE_ARRAY_MAX_SIZE (type0)\n-\t\t    && TREE_CODE (TYPE_ARRAY_MAX_SIZE (type0)) == INTEGER_CST)\n-\t\t  len0 = TREE_INT_CST_LOW (TYPE_ARRAY_MAX_SIZE (type0));\n+\t\t    && host_integerp (TYPE_ARRAY_MAX_SIZE (type0), 1))\n+\t\t  len0 = tree_low_cst (TYPE_ARRAY_MAX_SIZE (type0), 1);\n \n \t\tif (len1 < 0 && TYPE_ARRAY_MAX_SIZE (type1)\n-\t\t    && TREE_CODE (TYPE_ARRAY_MAX_SIZE (type1)) == INTEGER_CST)\n-\t\t  len1 = TREE_INT_CST_LOW (TYPE_ARRAY_MAX_SIZE (type1));\n+\t\t    && host_integerp (TYPE_ARRAY_MAX_SIZE (type1), 1))\n+\t\t  len1 = tree_low_cst (TYPE_ARRAY_MAX_SIZE (type1), 1);\n \n \t\tif (len0 < 0 || len1 < 0)\n-\t\t  fatal (\"internal error - don't know how much space is needed for concatenation\");\n+\t\t  abort ();\n+\n \t\ttarget = assign_stack_temp (mode, len0 + len1, 0);\n \t\tpreserve_temp_slots (target);\n \t      }"}, {"sha": "29e7ddc1bb56bb040dcb29fcb23d7798567096af", "filename": "gcc/ch/grant.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4322eb6c0ee5bac01fbca9846438084d33367120/gcc%2Fch%2Fgrant.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4322eb6c0ee5bac01fbca9846438084d33367120/gcc%2Fch%2Fgrant.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fgrant.c?ref=4322eb6c0ee5bac01fbca9846438084d33367120", "patch": "@@ -1,6 +1,6 @@\n /* Implement grant-file output & seize-file input for CHILL.\n-   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001\n+   Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -2648,7 +2648,7 @@ write_grant_file ()\n \n   fb = fopen (grant_file_name, \"w\");\n   if (fb == NULL)\n-      pfatal_with_name (grant_file_name);\n+    fatal_io_error (\"can't open %s\", grant_file_name);\n     \n   /* write file. Due to problems with record sizes on VAX/VMS\n      write string to '\\n' */\n@@ -2670,9 +2670,10 @@ write_grant_file ()\n   if (write (fileno (fb), gstring->str, gstring->len) < 0)\n     {\n       int save_errno = errno;\n+\n       unlink (grant_file_name);\n       errno = save_errno;\n-      pfatal_with_name (grant_file_name);\n+      fatal_io_error (\"can't write to %s\", grant_file_name);\n     }\n #endif\n   fclose (fb);"}, {"sha": "0c493b70bfe887c21a201ffa300e5b8aaab29500", "filename": "gcc/ch/lang.c", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4322eb6c0ee5bac01fbca9846438084d33367120/gcc%2Fch%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4322eb6c0ee5bac01fbca9846438084d33367120/gcc%2Fch%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flang.c?ref=4322eb6c0ee5bac01fbca9846438084d33367120", "patch": "@@ -1,5 +1,5 @@\n /* Language-specific hook definitions for CHILL front end.\n-   Copyright (C) 1992, 1993, 1994, 1998, 1999, 2000\n+   Copyright (C) 1992, 1993, 1994, 1998, 1999, 2000, 2001\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -148,18 +148,6 @@ lang_print_xnode (file, node, indent)\n      int indent ATTRIBUTE_UNUSED;\n {\n }\n-\n-void\n-GNU_xref_begin ()\n-{\n-  fatal (\"GCC does not yet support XREF\");\n-}\n-\n-void\n-GNU_xref_end ()\n-{\n-  fatal (\"GCC does not yet support XREF\");\n-}\n \f\n /*\n  * process chill-specific compiler command-line options"}, {"sha": "1a87025baaead1d75a09753f469adfde94d79474", "filename": "gcc/ch/lex.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4322eb6c0ee5bac01fbca9846438084d33367120/gcc%2Fch%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4322eb6c0ee5bac01fbca9846438084d33367120/gcc%2Fch%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Flex.c?ref=4322eb6c0ee5bac01fbca9846438084d33367120", "patch": "@@ -1,5 +1,5 @@\n /* Lexical analyzer for GNU CHILL. -*- C -*-\n-   Copyright (C) 1992, 1993, 1994, 1998, 1999, 2000\n+   Copyright (C) 1992, 1993, 1994, 1998, 1999, 2000, 2001\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -212,8 +212,9 @@ init_parse (filename)\n     }\n   else\n     finput = fopen (filename, \"r\");\n+\n   if (finput == 0)\n-    pfatal_with_name (filename);\n+    fatal_io_error (\"can't open %s\", filename);\n \n #ifdef IO_BUFFER_SIZE\n   setvbuf (finput, (char *) xmalloc (IO_BUFFER_SIZE), _IOFBF, IO_BUFFER_SIZE);\n@@ -1288,7 +1289,6 @@ convert_bitstring (p)\n   \n   /* Move p to stack so we can re-use temporary_obstack for result. */\n   char *oldp = (char*) alloca (strlen (p) + 1);\n-  if (oldp == 0) fatal (\"stack space exhausted\");\n   strcpy (oldp, p);\n   obstack_free (&temporary_obstack, p);\n   p = oldp;\n@@ -1378,25 +1378,26 @@ same_file (filename1, filename2)\n   for (i = 0; i < 2; i++)\n     {\n       stat_status = stat (fn_input[i], &s[i]);\n-      if (stat_status < 0 &&\n-\t  strchr (fn_input[i], '/') == 0)\n+      if (stat_status < 0\n+\t  && strchr (fn_input[i], '/') == 0)\n         {\n \t  STRING_LIST *plp;\n-\t  char        *path;\n+\t  char *path;\n \t  \n \t  for (plp = seize_path_list; plp != 0; plp = plp->next)\n \t    {\n-\t      path = (char *)xmalloc (strlen (fn_input[i]) +\n-\t\t\t\t      strlen (plp->str) + 2);\n+\t      path = (char *) xmalloc (strlen (fn_input[i])\n+\t\t\t\t       + strlen (plp->str) + 2);\n \t      sprintf (path, \"%s/%s\", plp->str, fn_input[i]);\n \t      stat_status = stat (path, &s[i]);\n \t      free (path);\n \t      if (stat_status >= 0)\n \t        break;\n   \t    }\n         }\n+\n       if (stat_status < 0)\n-        pfatal_with_name (fn_input[i]);\n+\tfatal_io_error (\"can't find %s\", fn_input[i]);\n   }\n   return s[0].st_ino == s[1].st_ino && s[0].st_dev == s[1].st_dev;\n }\n@@ -2190,7 +2191,7 @@ yywrap ()\n \t}\n \n       if (grt_in == NULL)\n-\tpfatal_with_name (seizefile_name_chars);\n+\tfatal_io_error (\"can't open %s\", seizefile_name_chars);\n \n       finput = grt_in;\n       input_filename = seizefile_name_chars;"}, {"sha": "afcf1427fd82c99965467ae393918c639d63887f", "filename": "gcc/ch/parse.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4322eb6c0ee5bac01fbca9846438084d33367120/gcc%2Fch%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4322eb6c0ee5bac01fbca9846438084d33367120/gcc%2Fch%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2Fparse.c?ref=4322eb6c0ee5bac01fbca9846438084d33367120", "patch": "@@ -1,5 +1,5 @@\n /* Parser for GNU CHILL (CCITT High-Level Language)  -*- C -*-\n-   Copyright (C) 1992, 1993, 1998, 1999, 2000\n+   Copyright (C) 1992, 1993, 1998, 1999, 2000, 2001\n    Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n@@ -278,14 +278,15 @@ PEEK_TOKEN()\n   return terminal_buffer[0];\n }\n #define PEEK_TREE() val_buffer[0].ttype\n-#define PEEK_TOKEN1() peek_token_(1)\n-#define PEEK_TOKEN2() peek_token_(2)\n+#define PEEK_TOKEN1() peek_token_ (1)\n+#define PEEK_TOKEN2() peek_token_ (2)\n+\n static int\n peek_token_ (i)\n      int i;\n {\n   if (i > MAX_LOOK_AHEAD)\n-    fatal (\"internal error - too much lookahead\");\n+    abort ();\n   if (terminal_buffer[i] == TOKEN_NOT_READ)\n     {\n       terminal_buffer[i] = yylex();\n@@ -301,7 +302,7 @@ pushback_token (code, node)\n {\n   int i;\n   if (terminal_buffer[MAX_LOOK_AHEAD] != TOKEN_NOT_READ)\n-    fatal (\"internal error - cannot pushback token\");\n+    abort ();\n   for (i = MAX_LOOK_AHEAD; i > 0; i--)\n     { \n       terminal_buffer[i] = terminal_buffer[i - 1]; \n@@ -322,17 +323,17 @@ forward_token_()\n     }\n   terminal_buffer[MAX_LOOK_AHEAD] = TOKEN_NOT_READ;\n }\n-#define FORWARD_TOKEN() forward_token_()\n+#define FORWARD_TOKEN() forward_token_ ()\n \n /* Skip the next token.\n    if it isn't TOKEN, the parser is broken. */\n \n static void\n-require(token)\n+require (token)\n      enum terminal token;\n {\n   if (PEEK_TOKEN() != token)\n-    fatal (\"internal parser error - expected token %d\", (int)token);\n+    internal_error (\"internal parser error - expected token %d\", (int) token);\n   FORWARD_TOKEN();\n }\n "}]}