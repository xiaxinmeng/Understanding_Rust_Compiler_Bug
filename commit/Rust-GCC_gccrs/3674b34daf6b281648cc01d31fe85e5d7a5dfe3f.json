{"sha": "3674b34daf6b281648cc01d31fe85e5d7a5dfe3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY3NGIzNGRhZjZiMjgxNjQ4Y2MwMWQzMWZlODVlNWQ3YTVkZmUzZg==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2005-10-24T16:51:59Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2005-10-24T16:51:59Z"}, "message": "pa-linux.h (NO_PROFILE_COUNTERS): Delete define.\n\n\t* pa-linux.h (NO_PROFILE_COUNTERS): Delete define.\n\t(NO_DEFERRED_PROFILE_COUNTERS): Define.\n\t* pa.h (NO_PROFILE_COUNTERS): Define.\n\t* pa.c (NO_DEFERRED_PROFILE_COUNTERS): Define if not defined.\n\t(funcdef_nos): New vector to hold label numbers of deferred profile\n\tcounters.\n\t(output_deferred_profile_counters): New function.\n\t(hppa_profile_hook): Push label number onto funcdef_nos.\n\t(pa_hpux_file_end): Call output_deferred_profile_counters if\n\tNO_DEFERRED_PROFILE_COUNTERS is false.\n\nFrom-SVN: r105854", "tree": {"sha": "543373aa5e5ab79d3d5d926571f0b8a84fb2e778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/543373aa5e5ab79d3d5d926571f0b8a84fb2e778"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3674b34daf6b281648cc01d31fe85e5d7a5dfe3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3674b34daf6b281648cc01d31fe85e5d7a5dfe3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3674b34daf6b281648cc01d31fe85e5d7a5dfe3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3674b34daf6b281648cc01d31fe85e5d7a5dfe3f/comments", "author": null, "committer": null, "parents": [{"sha": "09e87839d4255f7a9fd1c2531efacd7b8b6f33a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09e87839d4255f7a9fd1c2531efacd7b8b6f33a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09e87839d4255f7a9fd1c2531efacd7b8b6f33a8"}], "stats": {"total": 61, "additions": 58, "deletions": 3}, "files": [{"sha": "e4e85dde37a431ef34e96088a2de9b9eb33c90d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3674b34daf6b281648cc01d31fe85e5d7a5dfe3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3674b34daf6b281648cc01d31fe85e5d7a5dfe3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3674b34daf6b281648cc01d31fe85e5d7a5dfe3f", "patch": "@@ -1,4 +1,15 @@\n-2005-10-23  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+2005-10-24  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa-linux.h (NO_PROFILE_COUNTERS): Delete define.\n+\t(NO_DEFERRED_PROFILE_COUNTERS): Define.\n+\t* pa.h (NO_PROFILE_COUNTERS): Define.\n+\t* pa.c (NO_DEFERRED_PROFILE_COUNTERS): Define if not defined.\n+\t(funcdef_nos): New vector to hold label numbers of deferred profile\n+\tcounters.\n+\t(output_deferred_profile_counters): New function.\n+\t(hppa_profile_hook): Push label number onto funcdef_nos.\n+\t(pa_hpux_file_end): Call output_deferred_profile_counters if\n+\tNO_DEFERRED_PROFILE_COUNTERS is false.\n \n \t* pa-protos.h (get_deferred_plabel): New prototype.\n \t* pa.c (get_plabel): Rename to get_deferred_plabel.  Return plabel."}, {"sha": "4115577dc62fe96775bc8d8d1bc6276dac76a330", "filename": "gcc/config/pa/pa-linux.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3674b34daf6b281648cc01d31fe85e5d7a5dfe3f/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3674b34daf6b281648cc01d31fe85e5d7a5dfe3f/gcc%2Fconfig%2Fpa%2Fpa-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-linux.h?ref=3674b34daf6b281648cc01d31fe85e5d7a5dfe3f", "patch": "@@ -92,7 +92,7 @@ Boston, MA 02110-1301, USA.  */\n       %{static:-static}}\"\n \n /* glibc's profiling functions don't need gcc to allocate counters.  */\n-#define NO_PROFILE_COUNTERS 1\n+#define NO_DEFERRED_PROFILE_COUNTERS 1\n \n /* Define the strings used for the special svr4 .type and .size directives.\n    These strings generally do not vary from one system running svr4 to"}, {"sha": "aa603dc90b411226ca8e9a68836a4a1633415502", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3674b34daf6b281648cc01d31fe85e5d7a5dfe3f/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3674b34daf6b281648cc01d31fe85e5d7a5dfe3f/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=3674b34daf6b281648cc01d31fe85e5d7a5dfe3f", "patch": "@@ -137,6 +137,7 @@ static void pa_linux_file_start (void) ATTRIBUTE_UNUSED;\n static void pa_hpux64_gas_file_start (void) ATTRIBUTE_UNUSED;\n static void pa_hpux64_hpas_file_start (void) ATTRIBUTE_UNUSED;\n static void output_deferred_plabels (void);\n+static void output_deferred_profile_counters (void) ATTRIBUTE_UNUSED;\n #ifdef ASM_OUTPUT_EXTERNAL_REAL\n static void pa_hpux_file_end (void);\n #endif\n@@ -4141,6 +4142,40 @@ hppa_pic_save_rtx (void)\n   return get_hard_reg_initial_val (word_mode, PIC_OFFSET_TABLE_REGNUM);\n }\n \n+#ifndef NO_DEFERRED_PROFILE_COUNTERS\n+#define NO_DEFERRED_PROFILE_COUNTERS 0\n+#endif\n+\n+/* Define heap vector type for funcdef numbers.  */\n+DEF_VEC_I(int);\n+DEF_VEC_ALLOC_I(int,heap);\n+\n+/* Vector of funcdef numbers.  */\n+static VEC(int,heap) *funcdef_nos;\n+\n+/* Output deferred profile counters.  */\n+static void\n+output_deferred_profile_counters (void)\n+{\n+  unsigned int i;\n+  int align, n;\n+\n+  if (VEC_empty (int, funcdef_nos))\n+   return;\n+\n+  data_section ();\n+  align = MIN (BIGGEST_ALIGNMENT, LONG_TYPE_SIZE);\n+  ASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (align / BITS_PER_UNIT));\n+\n+  for (i = 0; VEC_iterate (int, funcdef_nos, i, n); i++)\n+    {\n+      targetm.asm_out.internal_label (asm_out_file, \"LP\", n);\n+      assemble_integer (const0_rtx, LONG_TYPE_SIZE / BITS_PER_UNIT, align, 1);\n+    }\n+\n+  VEC_free (int, heap, funcdef_nos);\n+}\n+\n void\n hppa_profile_hook (int label_no)\n {\n@@ -4175,11 +4210,12 @@ hppa_profile_hook (int label_no)\n   emit_insn (gen_load_offset_label_address (gen_rtx_REG (SImode, 25), \n \t\t\t\t\t    reg, begin_label_rtx, label_rtx));\n \n-#ifndef NO_PROFILE_COUNTERS\n+#if !NO_DEFERRED_PROFILE_COUNTERS\n   {\n     rtx count_label_rtx, addr, r24;\n     char count_label_name[16];\n \n+    VEC_safe_push (int, heap, funcdef_nos, label_no);\n     ASM_GENERATE_INTERNAL_LABEL (count_label_name, \"LP\", label_no);\n     count_label_rtx = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (count_label_name));\n \n@@ -9158,6 +9194,9 @@ pa_hpux_file_end (void)\n   unsigned int i;\n   extern_symbol *p;\n \n+  if (!NO_DEFERRED_PROFILE_COUNTERS)\n+    output_deferred_profile_counters ();\n+\n   output_deferred_plabels ();\n \n   for (i = 0; VEC_iterate (extern_symbol, extern_symbols, i, p); i++)"}, {"sha": "fa43828225e0b7d004ed0bd4e48f5eb443c799f7", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3674b34daf6b281648cc01d31fe85e5d7a5dfe3f/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3674b34daf6b281648cc01d31fe85e5d7a5dfe3f/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=3674b34daf6b281648cc01d31fe85e5d7a5dfe3f", "patch": "@@ -769,6 +769,11 @@ void hppa_profile_hook (int label_no);\n /* The profile counter if emitted must come before the prologue.  */\n #define PROFILE_BEFORE_PROLOGUE 1\n \n+/* We never want final.c to emit profile counters.  When profile\n+   counters are required, we have to defer emitting them to the end\n+   of the current file.  */\n+#define NO_PROFILE_COUNTERS 1\n+\n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in\n    functions that have frame pointers."}]}