{"sha": "0559cc77522cfd49759e2ac5729cdf9b820cea79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU1OWNjNzc1MjJjZmQ0OTc1OWUyYWM1NzI5Y2RmOWI4MjBjZWE3OQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2002-07-30T21:23:46Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-07-30T21:23:46Z"}, "message": "rs6000.c (rs6000_expand_unop_builtin): Check icode not CODE_FOR_nothing.\n\n2002-07-30  David Edelsohn  <edelsohn@gnu.org>\n            Zack Weinberg  <zack@codesourcery.com>\n\n        * rs6000.c (rs6000_expand_unop_builtin): Check icode not\n        CODE_FOR_nothing.  Change switch to if.\n        (rs6000_expand_binop_builtin): Same.\n        (rs6000_expand_builtin): Expand builtin if target support enabled.\n        (rs6000_init_builtins): Init builtin if target support enabled.\n        (rs6000_common_init_builtins): Check icode not CODE_FOR_nothing.\n\nCo-Authored-By: Zack Weinberg <zack@codesourcery.com>\n\nFrom-SVN: r55882", "tree": {"sha": "390224b20177b00e210930013c9bd59d5b4b29d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/390224b20177b00e210930013c9bd59d5b4b29d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0559cc77522cfd49759e2ac5729cdf9b820cea79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0559cc77522cfd49759e2ac5729cdf9b820cea79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0559cc77522cfd49759e2ac5729cdf9b820cea79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0559cc77522cfd49759e2ac5729cdf9b820cea79/comments", "author": null, "committer": null, "parents": [{"sha": "60b8aa9433f6adbdc91d82545b94fab0350b3030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60b8aa9433f6adbdc91d82545b94fab0350b3030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60b8aa9433f6adbdc91d82545b94fab0350b3030"}], "stats": {"total": 124, "additions": 69, "deletions": 55}, "files": [{"sha": "cc50ca838ab1e27714e34b6c26e7297d1443bde8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0559cc77522cfd49759e2ac5729cdf9b820cea79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0559cc77522cfd49759e2ac5729cdf9b820cea79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0559cc77522cfd49759e2ac5729cdf9b820cea79", "patch": "@@ -1,3 +1,13 @@\n+2002-07-30  David Edelsohn  <edelsohn@gnu.org>\n+\t    Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* rs6000.c (rs6000_expand_unop_builtin): Check icode not\n+\tCODE_FOR_nothing.  Change switch to if.\n+\t(rs6000_expand_binop_builtin): Same.\n+\t(rs6000_expand_builtin): Expand builtin if target support enabled.\n+\t(rs6000_init_builtins): Init builtin if target support enabled.\n+\t(rs6000_common_init_builtins): Check icode not CODE_FOR_nothing.\n+\n 2002-07-30  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \n \t* gcc.c (cpp_unique_options): Define __GXX_ABI_VERSION, bump it to 101."}, {"sha": "891bfca5ffe5021a7cc3cceb5aa8aef8a7140f89", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 59, "deletions": 55, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0559cc77522cfd49759e2ac5729cdf9b820cea79/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0559cc77522cfd49759e2ac5729cdf9b820cea79/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=0559cc77522cfd49759e2ac5729cdf9b820cea79", "patch": "@@ -4085,28 +4085,28 @@ rs6000_expand_unop_builtin (icode, arglist, target)\n   enum machine_mode tmode = insn_data[icode].operand[0].mode;\n   enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n \n+  if (icode == CODE_FOR_nothing)\n+    /* Builtin not supported on this processor.  */\n+    return 0;\n+\n   /* If we got invalid arguments bail out before generating bad rtl.  */\n   if (arg0 == error_mark_node)\n     return const0_rtx;\n \n-  switch (icode)\n+  if (icode == CODE_FOR_altivec_vspltisb\n+      || icode == CODE_FOR_altivec_vspltish\n+      || icode == CODE_FOR_altivec_vspltisw\n+      || icode == CODE_FOR_spe_evsplatfi\n+      || icode == CODE_FOR_spe_evsplati)\n     {\n       /* Only allow 5-bit *signed* literals.  */\n-    case CODE_FOR_altivec_vspltisb:\n-    case CODE_FOR_altivec_vspltish:\n-    case CODE_FOR_altivec_vspltisw:\n-    case CODE_FOR_spe_evsplatfi:\n-    case CODE_FOR_spe_evsplati:\n       if (GET_CODE (op0) != CONST_INT\n \t  || INTVAL (op0) > 0x1f\n \t  || INTVAL (op0) < -0x1f)\n \t{\n \t  error (\"argument 1 must be a 5-bit signed literal\");\n \t  return const0_rtx;\n \t}\n-      break;\n-    default:\n-      break;\n     }\n \n   if (target == 0\n@@ -4175,45 +4175,45 @@ rs6000_expand_binop_builtin (icode, arglist, target)\n   enum machine_mode mode0 = insn_data[icode].operand[1].mode;\n   enum machine_mode mode1 = insn_data[icode].operand[2].mode;\n \n+  if (icode == CODE_FOR_nothing)\n+    /* Builtin not supported on this processor.  */\n+    return 0;\n+\n   /* If we got invalid arguments bail out before generating bad rtl.  */\n   if (arg0 == error_mark_node || arg1 == error_mark_node)\n     return const0_rtx;\n \n-  switch (icode)\n+  if (icode == CODE_FOR_altivec_vcfux\n+      || icode == CODE_FOR_altivec_vcfsx\n+      || icode == CODE_FOR_altivec_vctsxs\n+      || icode == CODE_FOR_altivec_vctuxs\n+      || icode == CODE_FOR_altivec_vspltb\n+      || icode == CODE_FOR_altivec_vsplth\n+      || icode == CODE_FOR_altivec_vspltw\n+      || icode == CODE_FOR_spe_evaddiw\n+      || icode == CODE_FOR_spe_evldd\n+      || icode == CODE_FOR_spe_evldh\n+      || icode == CODE_FOR_spe_evldw\n+      || icode == CODE_FOR_spe_evlhhesplat\n+      || icode == CODE_FOR_spe_evlhhossplat\n+      || icode == CODE_FOR_spe_evlhhousplat\n+      || icode == CODE_FOR_spe_evlwhe\n+      || icode == CODE_FOR_spe_evlwhos\n+      || icode == CODE_FOR_spe_evlwhou\n+      || icode == CODE_FOR_spe_evlwhsplat\n+      || icode == CODE_FOR_spe_evlwwsplat\n+      || icode == CODE_FOR_spe_evrlwi\n+      || icode == CODE_FOR_spe_evslwi\n+      || icode == CODE_FOR_spe_evsrwis\n+      || icode == CODE_FOR_spe_evsrwiu)\n     {\n       /* Only allow 5-bit unsigned literals.  */\n-    case CODE_FOR_altivec_vcfux:\n-    case CODE_FOR_altivec_vcfsx:\n-    case CODE_FOR_altivec_vctsxs:\n-    case CODE_FOR_altivec_vctuxs:\n-    case CODE_FOR_altivec_vspltb:\n-    case CODE_FOR_altivec_vsplth:\n-    case CODE_FOR_altivec_vspltw:\n-    case CODE_FOR_spe_evaddiw:\n-    case CODE_FOR_spe_evldd:\n-    case CODE_FOR_spe_evldh:\n-    case CODE_FOR_spe_evldw:\n-    case CODE_FOR_spe_evlhhesplat:\n-    case CODE_FOR_spe_evlhhossplat:\n-    case CODE_FOR_spe_evlhhousplat:\n-    case CODE_FOR_spe_evlwhe:\n-    case CODE_FOR_spe_evlwhos:\n-    case CODE_FOR_spe_evlwhou:\n-    case CODE_FOR_spe_evlwhsplat:\n-    case CODE_FOR_spe_evlwwsplat:\n-    case CODE_FOR_spe_evrlwi:\n-    case CODE_FOR_spe_evslwi:\n-    case CODE_FOR_spe_evsrwis:\n-    case CODE_FOR_spe_evsrwiu:\n       if (TREE_CODE (arg1) != INTEGER_CST\n \t  || TREE_INT_CST_LOW (arg1) & ~0x1f)\n \t{\n \t  error (\"argument 2 must be a 5-bit unsigned literal\");\n \t  return const0_rtx;\n \t}\n-      break;\n-    default:\n-      break;\n     }\n \n   if (target == 0\n@@ -5095,23 +5095,26 @@ rs6000_expand_builtin (exp, target, subtarget, mode, ignore)\n \treturn ret;\n     }\n \n-  /* Handle simple unary operations.  */\n-  d = (struct builtin_description *) bdesc_1arg;\n-  for (i = 0; i < ARRAY_SIZE (bdesc_1arg); i++, d++)\n-    if (d->code == fcode)\n-      return rs6000_expand_unop_builtin (d->icode, arglist, target);\n+  if (TARGET_ALTIVEC || TARGET_SPE)\n+    {\n+      /* Handle simple unary operations.  */\n+      d = (struct builtin_description *) bdesc_1arg;\n+      for (i = 0; i < ARRAY_SIZE (bdesc_1arg); i++, d++)\n+\tif (d->code == fcode)\n+\t  return rs6000_expand_unop_builtin (d->icode, arglist, target);\n \n-  /* Handle simple binary operations.  */\n-  d = (struct builtin_description *) bdesc_2arg;\n-  for (i = 0; i < ARRAY_SIZE (bdesc_2arg); i++, d++)\n-    if (d->code == fcode)\n-      return rs6000_expand_binop_builtin (d->icode, arglist, target);\n+      /* Handle simple binary operations.  */\n+      d = (struct builtin_description *) bdesc_2arg;\n+      for (i = 0; i < ARRAY_SIZE (bdesc_2arg); i++, d++)\n+\tif (d->code == fcode)\n+\t  return rs6000_expand_binop_builtin (d->icode, arglist, target);\n \n-  /* Handle simple ternary operations.  */\n-  d = (struct builtin_description *) bdesc_3arg;\n-  for (i = 0; i < ARRAY_SIZE  (bdesc_3arg); i++, d++)\n-    if (d->code == fcode)\n-      return rs6000_expand_ternop_builtin (d->icode, arglist, target);\n+      /* Handle simple ternary operations.  */\n+      d = (struct builtin_description *) bdesc_3arg;\n+      for (i = 0; i < ARRAY_SIZE  (bdesc_3arg); i++, d++)\n+\tif (d->code == fcode)\n+\t  return rs6000_expand_ternop_builtin (d->icode, arglist, target);\n+    }\n \n   abort ();\n   return NULL_RTX;\n@@ -5124,7 +5127,8 @@ rs6000_init_builtins ()\n     spe_init_builtins ();\n   if (TARGET_ALTIVEC)\n     altivec_init_builtins ();\n-  rs6000_common_init_builtins ();\n+  if (TARGET_ALTIVEC || TARGET_SPE)\n+    rs6000_common_init_builtins ();\n }\n \n /* Search through a set of builtins and enable the mask bits.\n@@ -5738,7 +5742,7 @@ rs6000_common_init_builtins (void)\n       enum machine_mode mode0, mode1, mode2, mode3;\n       tree type;\n \n-      if (d->name == 0)\n+      if (d->name == 0 || d->icode == CODE_FOR_nothing)\n \tcontinue;\n       \n       mode0 = insn_data[d->icode].operand[0].mode;\n@@ -5830,7 +5834,7 @@ rs6000_common_init_builtins (void)\n       enum machine_mode mode0, mode1, mode2;\n       tree type;\n \n-      if (d->name == 0)\n+      if (d->name == 0 || d->icode == CODE_FOR_nothing)\n \tcontinue;\n       \n       mode0 = insn_data[d->icode].operand[0].mode;\n@@ -5966,7 +5970,7 @@ rs6000_common_init_builtins (void)\n       enum machine_mode mode0, mode1;\n       tree type;\n \n-      if (d->name == 0)\n+      if (d->name == 0 || d->icode == CODE_FOR_nothing)\n \tcontinue;\n       \n       mode0 = insn_data[d->icode].operand[0].mode;"}]}