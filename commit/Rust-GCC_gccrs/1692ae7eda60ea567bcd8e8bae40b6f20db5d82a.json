{"sha": "1692ae7eda60ea567bcd8e8bae40b6f20db5d82a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY5MmFlN2VkYTYwZWE1NjdiY2Q4ZThiYWU0MGI2ZjIwZGI1ZDgyYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-10-09T20:04:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-10-09T20:04:10Z"}, "message": "rtl.h (locator_eq): New decl.\n\n\t* rtl.h (locator_eq): New decl.\n\t* cfglayout.c (locator_scope): New function.\n\t(insn_scope): Use it.\n\t(locator_eq): New function.\n\t(fixup_reorder_chain): Search for last insn in src bb\n\tthat has locator set or first insn in dest bb.  Use\n\tlocator_eq instead of == to compare locators.\n\t* cfgrtl.c (cfg_layout_merge_blocks): Likewise.\n\t* cfgcleanup.c (try_forward_edges): Use locator_eq instead of\n\t== to compare locators.\n\nFrom-SVN: r141009", "tree": {"sha": "0169af2955472328d5f862f7396b198dfc82b215", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0169af2955472328d5f862f7396b198dfc82b215"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1692ae7eda60ea567bcd8e8bae40b6f20db5d82a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1692ae7eda60ea567bcd8e8bae40b6f20db5d82a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1692ae7eda60ea567bcd8e8bae40b6f20db5d82a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1692ae7eda60ea567bcd8e8bae40b6f20db5d82a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e81897731e2232b88f735bf8b8ce319d76983b51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e81897731e2232b88f735bf8b8ce319d76983b51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e81897731e2232b88f735bf8b8ce319d76983b51"}], "stats": {"total": 88, "additions": 63, "deletions": 25}, "files": [{"sha": "fc48767f83a8470f782457c02fdee14569de9762", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1692ae7eda60ea567bcd8e8bae40b6f20db5d82a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1692ae7eda60ea567bcd8e8bae40b6f20db5d82a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1692ae7eda60ea567bcd8e8bae40b6f20db5d82a", "patch": "@@ -1,5 +1,16 @@\n 2008-10-09  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* rtl.h (locator_eq): New decl.\n+\t* cfglayout.c (locator_scope): New function.\n+\t(insn_scope): Use it.\n+\t(locator_eq): New function.\n+\t(fixup_reorder_chain): Search for last insn in src bb\n+\tthat has locator set or first insn in dest bb.  Use\n+\tlocator_eq instead of == to compare locators.\n+\t* cfgrtl.c (cfg_layout_merge_blocks): Likewise.\n+\t* cfgcleanup.c (try_forward_edges): Use locator_eq instead of\n+\t== to compare locators.\n+\n \t* tree-ssa-live.c (remove_unused_locals): Mark all edge's goto_block\n \tas used.\n \t* gimple-low.c (lower_function_body, lower_gimple_return,"}, {"sha": "190bde668481205edee329e4c65fd145e6fa9ce2", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1692ae7eda60ea567bcd8e8bae40b6f20db5d82a/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1692ae7eda60ea567bcd8e8bae40b6f20db5d82a/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=1692ae7eda60ea567bcd8e8bae40b6f20db5d82a", "patch": "@@ -483,7 +483,7 @@ try_forward_edges (int mode, basic_block b)\n \t\t     blocks with different locus are not optimized out.  */\n \t\t  int locus = single_succ_edge (target)->goto_locus;\n \n-\t\t  if (locus && goto_locus && locus != goto_locus)\n+\t\t  if (locus && goto_locus && !locator_eq (locus, goto_locus))\n \t\t    counter = n_basic_blocks;\n \t\t  else if (locus)\n \t\t    goto_locus = locus;\n@@ -492,7 +492,8 @@ try_forward_edges (int mode, basic_block b)\n \t\t    {\n \t\t      locus = INSN_LOCATOR (BB_END (target));\n \n-\t\t      if (locus && goto_locus && locus != goto_locus)\n+\t\t      if (locus && goto_locus\n+\t\t\t  && !locator_eq (locus, goto_locus))\n \t\t\tcounter = n_basic_blocks;\n \t\t      else if (locus)\n \t\t\tgoto_locus = locus;"}, {"sha": "05e355d411f1fc429ad2c7bf4b15f9c0339f878a", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 39, "deletions": 16, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1692ae7eda60ea567bcd8e8bae40b6f20db5d82a/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1692ae7eda60ea567bcd8e8bae40b6f20db5d82a/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=1692ae7eda60ea567bcd8e8bae40b6f20db5d82a", "patch": "@@ -448,13 +448,12 @@ change_scope (rtx orig_insn, tree s1, tree s2)\n     }\n }\n \n-/* Return lexical scope block insn belong to.  */\n+/* Return lexical scope block locator belongs to.  */\n static tree\n-insn_scope (const_rtx insn)\n+locator_scope (int loc)\n {\n   int max = VEC_length (int, block_locators_locs);\n   int min = 0;\n-  int loc = INSN_LOCATOR (insn);\n \n   /* When block_locators_locs was initialized, the pro- and epilogue\n      insns didn't exist yet and can therefore not be found this way.\n@@ -488,6 +487,13 @@ insn_scope (const_rtx insn)\n   return VEC_index (tree, block_locators_blocks, min);\n }\n \n+/* Return lexical scope block insn belongs to.  */\n+static tree\n+insn_scope (const_rtx insn)\n+{\n+  return locator_scope (INSN_LOCATOR (insn));\n+}\n+\n /* Return line number of the statement specified by the locator.  */\n static location_t\n locator_location (int loc)\n@@ -551,6 +557,17 @@ insn_file (const_rtx insn)\n   return locator_file (INSN_LOCATOR (insn));\n }\n \n+/* Return true if LOC1 and LOC2 locators have the same location and scope.  */\n+bool\n+locator_eq (int loc1, int loc2)\n+{\n+  if (loc1 == loc2)\n+    return true;\n+  if (locator_location (loc1) != locator_location (loc2))\n+    return false;\n+  return locator_scope (loc1) == locator_scope (loc2);\n+}\n+\n /* Rebuild all the NOTE_INSN_BLOCK_BEG and NOTE_INSN_BLOCK_END notes based\n    on the scope tree and the newly reordered instructions.  */\n \n@@ -900,24 +917,30 @@ fixup_reorder_chain (void)\n \t  if (e->goto_locus && !(e->flags & EDGE_ABNORMAL))\n \t    {\n \t      basic_block nb;\n-\n-\t      if (simplejump_p (BB_END (e->src)))\n+\t      rtx end;\n+\n+\t      insn = BB_END (e->src);\n+\t      end = PREV_INSN (BB_HEAD (e->src));\n+\t      while (insn != end\n+\t\t     && (!INSN_P (insn) || INSN_LOCATOR (insn) == 0))\n+\t\tinsn = PREV_INSN (insn);\n+\t      if (insn != end\n+\t\t  && locator_eq (INSN_LOCATOR (insn), (int) e->goto_locus))\n+\t\tcontinue;\n+\t      if (simplejump_p (BB_END (e->src))\n+\t\t  && INSN_LOCATOR (BB_END (e->src)) == 0)\n \t\t{\n-\t\t  if (INSN_LOCATOR (BB_END (e->src)) == (int) e->goto_locus)\n-\t\t    continue;\n-\t\t  if (INSN_LOCATOR (BB_END (e->src)) == 0)\n-\t\t    {\n-\t\t      INSN_LOCATOR (BB_END (e->src)) = e->goto_locus;\n-\t\t      continue;\n-\t\t    }\n+\t\t  INSN_LOCATOR (BB_END (e->src)) = e->goto_locus;\n+\t\t  continue;\n \t\t}\n \t      if (e->dest != EXIT_BLOCK_PTR)\n \t\t{\n \t\t  insn = BB_HEAD (e->dest);\n-\t\t  if (!INSN_P (insn))\n-\t\t    insn = next_insn (insn);\n-\t\t  if (insn && INSN_P (insn)\n-\t\t      && INSN_LOCATOR (insn) == (int) e->goto_locus)\n+\t\t  end = NEXT_INSN (BB_END (e->dest));\n+\t\t  while (insn != end && !INSN_P (insn))\n+\t\t    insn = NEXT_INSN (insn);\n+\t\t  if (insn != end && INSN_LOCATOR (insn)\n+\t\t      && locator_eq (INSN_LOCATOR (insn), (int) e->goto_locus))\n \t\t    continue;\n \t\t}\n \t      nb = split_edge (e);"}, {"sha": "a7dc5076865fdc0d76a4f5e3223256ef334d8366", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1692ae7eda60ea567bcd8e8bae40b6f20db5d82a/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1692ae7eda60ea567bcd8e8bae40b6f20db5d82a/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=1692ae7eda60ea567bcd8e8bae40b6f20db5d82a", "patch": "@@ -2615,19 +2615,21 @@ cfg_layout_merge_blocks (basic_block a, basic_block b)\n      some unique locus, emit a nop with that locus in between.  */\n   if (!optimize && EDGE_SUCC (a, 0)->goto_locus)\n     {\n-      rtx insn = BB_END (a);\n+      rtx insn = BB_END (a), end = PREV_INSN (BB_HEAD (a));\n       int goto_locus = EDGE_SUCC (a, 0)->goto_locus;\n \n-      if (NOTE_P (insn))\n-\tinsn = prev_nonnote_insn (insn);\n-      if (insn && INSN_P (insn) && INSN_LOCATOR (insn) == goto_locus)\n+      while (insn != end && (!INSN_P (insn) || INSN_LOCATOR (insn) == 0))\n+\tinsn = PREV_INSN (insn);\n+      if (insn != end && locator_eq (INSN_LOCATOR (insn), goto_locus))\n \tgoto_locus = 0;\n       else\n \t{\n \t  insn = BB_HEAD (b);\n-\t  if (!INSN_P (insn))\n-\t    insn = next_insn (insn);\n-\t  if (insn && INSN_P (insn) && INSN_LOCATOR (insn) == goto_locus)\n+\t  end = NEXT_INSN (BB_END (b));\n+\t  while (insn != end && !INSN_P (insn))\n+\t    insn = NEXT_INSN (insn);\n+\t  if (insn != end && INSN_LOCATOR (insn) != 0\n+\t      && locator_eq (INSN_LOCATOR (insn), goto_locus))\n \t    goto_locus = 0;\n \t}\n       if (goto_locus)"}, {"sha": "118025a4ff06e5d2225d2110c93335d20ca883fa", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1692ae7eda60ea567bcd8e8bae40b6f20db5d82a/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1692ae7eda60ea567bcd8e8bae40b6f20db5d82a/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=1692ae7eda60ea567bcd8e8bae40b6f20db5d82a", "patch": "@@ -1639,6 +1639,7 @@ extern int insn_line (const_rtx);\n extern const char * insn_file (const_rtx);\n extern int locator_line (int);\n extern const char * locator_file (int);\n+extern bool locator_eq (int, int);\n extern int prologue_locator, epilogue_locator;\n \n /* In jump.c */"}]}