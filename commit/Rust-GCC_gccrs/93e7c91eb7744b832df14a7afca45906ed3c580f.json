{"sha": "93e7c91eb7744b832df14a7afca45906ed3c580f", "node_id": "C_kwDOANBUbNoAKDkzZTdjOTFlYjc3NDRiODMyZGYxNGE3YWZjYTQ1OTA2ZWQzYzU4MGY", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-01-10T23:23:21Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-09T09:27:32Z"}, "message": "[Ada] Allow Big_Integer in loop and subprogram variants\n\nIn SPARK loop and subprogram variants we now allow expressions of any\ndiscrete type and of Ada.Numerics.Big_Numbers.Big_Integers.Big_Integer\ntype.\n\ngcc/ada/\n\n\t* exp_prag.adb (Expand_Pragma_Loop_Variant,\n\tExpand_Pragma_Subprogram_Variant): Adapt call via\n\tProcess_Variant to Make_Variant_Comparison.\n\t* exp_util.adb (Make_Variant_Comparison): Compare Big_Integer\n\texpressions with a function call and not an operator.\n\t* exp_util.ads (Make_Variant_Comparison): Add type parameter,\n\twhich is needed because the Curr_Val and Old_Val expressions\n\tmight not be yet decorated.\n\t* rtsfind.ads: (RTU_Id): Add support for Big_Integers and\n\tBig_Integers_Ghost.\n\t(RE_Id): Add support for Big_Integer and its ghost variant.\n\t(RE_Unit_Table): Add mapping from Big_Integer to Big_Integers;\n\tsame for the ghost variants.\n\t* rtsfind.adb (Get_Unit_Name): Add support for Big_Numbers.\n\t* sem_prag.adb (Analyze_Pragma): Allow Big_Integer in pragma\n\tLoop_Variant.\n\t(Analyze_Variant): Allow Big_Integer in pragma\n\tSubprogram_Variant.", "tree": {"sha": "5a8d047f48df05256b0bcdef05f5bac74c41c76f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a8d047f48df05256b0bcdef05f5bac74c41c76f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93e7c91eb7744b832df14a7afca45906ed3c580f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e7c91eb7744b832df14a7afca45906ed3c580f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93e7c91eb7744b832df14a7afca45906ed3c580f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e7c91eb7744b832df14a7afca45906ed3c580f/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fe776e2d346bcf450f40739825249cab449e567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fe776e2d346bcf450f40739825249cab449e567", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fe776e2d346bcf450f40739825249cab449e567"}], "stats": {"total": 144, "additions": 137, "deletions": 7}, "files": [{"sha": "35ec2508550f4eda578241c286f4c5be552edd9e", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e7c91eb7744b832df14a7afca45906ed3c580f/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e7c91eb7744b832df14a7afca45906ed3c580f/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=93e7c91eb7744b832df14a7afca45906ed3c580f", "patch": "@@ -2636,6 +2636,7 @@ package body Exp_Prag is\n                  Expression =>\n                    Make_Variant_Comparison (Loc,\n                      Mode     => Chars (Variant),\n+                     Typ      => Expr_Typ,\n                      Curr_Val => New_Occurrence_Of (Curr_Id, Loc),\n                      Old_Val  => New_Occurrence_Of (Old_Id, Loc)))));\n \n@@ -3000,6 +3001,7 @@ package body Exp_Prag is\n                  Expression =>\n                    Make_Variant_Comparison (Loc,\n                      Mode     => Chars (First (Choices (Variant))),\n+                     Typ      => Expr_Typ,\n                      Curr_Val => New_Occurrence_Of (Curr_Id, Loc),\n                      Old_Val  => New_Occurrence_Of (Old_Id, Loc)))));\n "}, {"sha": "416ce65b1897d087905efaebdf733a69ad0a9000", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e7c91eb7744b832df14a7afca45906ed3c580f/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e7c91eb7744b832df14a7afca45906ed3c580f/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=93e7c91eb7744b832df14a7afca45906ed3c580f", "patch": "@@ -10239,15 +10239,61 @@ package body Exp_Util is\n \n    function Make_Variant_Comparison\n      (Loc      : Source_Ptr;\n+      Typ      : Entity_Id;\n       Mode     : Name_Id;\n       Curr_Val : Node_Id;\n       Old_Val  : Node_Id) return Node_Id\n    is\n+      function Big_Integer_Lt return Entity_Id;\n+      --  Returns the entity of the predefined \"<\" function from\n+      --  Ada.Numerics.Big_Numbers.Big_Integers.\n+\n+      --------------------\n+      -- Big_Integer_Lt --\n+      --------------------\n+\n+      function Big_Integer_Lt return Entity_Id is\n+         Big_Integers : constant Entity_Id :=\n+           RTU_Entity (Ada_Numerics_Big_Numbers_Big_Integers);\n+\n+         E : Entity_Id := First_Entity (Big_Integers);\n+\n+      begin\n+         while Present (E) loop\n+            if Chars (E) = Name_Op_Lt then\n+               return E;\n+            end if;\n+            Next_Entity (E);\n+         end loop;\n+\n+         raise Program_Error;\n+      end Big_Integer_Lt;\n+\n+   --  Start of processing for Make_Variant_Comparison\n+\n    begin\n       if Mode = Name_Increases then\n          return Make_Op_Gt (Loc, Curr_Val, Old_Val);\n+\n       else pragma Assert (Mode = Name_Decreases);\n-         return Make_Op_Lt (Loc, Curr_Val, Old_Val);\n+\n+         --  For discrete expressions use the \"<\" operator\n+\n+         if Is_Discrete_Type (Typ) then\n+            return Make_Op_Lt (Loc, Curr_Val, Old_Val);\n+\n+         --  For Big_Integer expressions use the \"<\" function, because the\n+         --  operator on private type might not be visible and won't be\n+         --  resolved.\n+\n+         else pragma Assert (Is_RTE (Base_Type (Typ), RE_Big_Integer));\n+            return\n+              Make_Function_Call (Loc,\n+                Name                   =>\n+                  New_Occurrence_Of (Big_Integer_Lt, Loc),\n+                Parameter_Associations =>\n+                  New_List (Curr_Val, Old_Val));\n+         end if;\n       end if;\n    end Make_Variant_Comparison;\n "}, {"sha": "d384567e2a9f694eca9b953bdad65647a0183137", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e7c91eb7744b832df14a7afca45906ed3c580f/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e7c91eb7744b832df14a7afca45906ed3c580f/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=93e7c91eb7744b832df14a7afca45906ed3c580f", "patch": "@@ -901,12 +901,14 @@ package Exp_Util is\n \n    function Make_Variant_Comparison\n      (Loc      : Source_Ptr;\n+      Typ      : Entity_Id;\n       Mode     : Name_Id;\n       Curr_Val : Node_Id;\n       Old_Val  : Node_Id) return Node_Id;\n    --  Subsidiary to the expansion of pragmas Loop_Variant and\n    --  Subprogram_Variant. Generate a comparison between Curr_Val and Old_Val\n-   --  depending on the variant mode (Increases / Decreases).\n+   --  depending on the variant mode (Increases / Decreases) using less or\n+   --  greater operator for Typ.\n \n    procedure Map_Formals\n      (Parent_Subp  : Entity_Id;"}, {"sha": "cda13d4bf4c9e1f19853b0d7d7506f3a65332f1f", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e7c91eb7744b832df14a7afca45906ed3c580f/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e7c91eb7744b832df14a7afca45906ed3c580f/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=93e7c91eb7744b832df14a7afca45906ed3c580f", "patch": "@@ -564,8 +564,12 @@ package body Rtsfind is\n      Ada_Interrupts_Names .. Ada_Interrupts_Names;\n \n    subtype Ada_Numerics_Descendant is Ada_Descendant\n-     range Ada_Numerics_Generic_Elementary_Functions ..\n-           Ada_Numerics_Generic_Elementary_Functions;\n+     range Ada_Numerics_Big_Numbers ..\n+           Ada_Numerics_Big_Numbers_Big_Integers_Ghost;\n+\n+   subtype Ada_Numerics_Big_Numbers_Descendant is Ada_Descendant\n+     range Ada_Numerics_Big_Numbers_Big_Integers ..\n+           Ada_Numerics_Big_Numbers_Big_Integers_Ghost;\n \n    subtype Ada_Real_Time_Descendant is Ada_Descendant\n      range Ada_Real_Time_Delays .. Ada_Real_Time_Timing_Events;\n@@ -657,6 +661,10 @@ package body Rtsfind is\n          elsif U_Id in Ada_Numerics_Descendant then\n             Name_Buffer (13) := '.';\n \n+            if U_Id in Ada_Numerics_Big_Numbers_Descendant then\n+               Name_Buffer (25) := '.';\n+            end if;\n+\n          elsif U_Id in Ada_Real_Time_Descendant then\n             Name_Buffer (14) := '.';\n "}, {"sha": "8c831f05841a45a056bcfa55decc87c0194e8f8d", "filename": "gcc/ada/rtsfind.ads", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e7c91eb7744b832df14a7afca45906ed3c580f/gcc%2Fada%2Frtsfind.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e7c91eb7744b832df14a7afca45906ed3c580f/gcc%2Fada%2Frtsfind.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.ads?ref=93e7c91eb7744b832df14a7afca45906ed3c580f", "patch": "@@ -115,8 +115,14 @@ package Rtsfind is\n \n       --  Children of Ada.Numerics\n \n+      Ada_Numerics_Big_Numbers,\n       Ada_Numerics_Generic_Elementary_Functions,\n \n+      --  Children of Ada.Numerics.Big_Numbers\n+\n+      Ada_Numerics_Big_Numbers_Big_Integers,\n+      Ada_Numerics_Big_Numbers_Big_Integers_Ghost,\n+\n       --  Children of Ada.Real_Time\n \n       Ada_Real_Time_Delays,\n@@ -585,6 +591,9 @@ package Rtsfind is\n      RE_Detach_Handler,                  -- Ada.Interrupts\n      RE_Reference,                       -- Ada.Interrupts\n \n+     RE_Big_Integer,             -- Ada.Numerics.Big_Numbers.Big_Integers\n+     RO_GH_Big_Integer,          -- Ada.Numerics.Big_Numbers.Big_Integers_Ghost\n+\n      RE_Names,                           -- Ada.Interrupts.Names\n \n      RE_Clock,                           -- Ada.Real_Time\n@@ -2271,6 +2280,9 @@ package Rtsfind is\n      RE_Detach_Handler                   => Ada_Interrupts,\n      RE_Reference                        => Ada_Interrupts,\n \n+     RE_Big_Integer             => Ada_Numerics_Big_Numbers_Big_Integers,\n+     RO_GH_Big_Integer          => Ada_Numerics_Big_Numbers_Big_Integers_Ghost,\n+\n      RE_Names                            => Ada_Interrupts_Names,\n \n      RE_Clock                            => Ada_Real_Time,"}, {"sha": "9ef3a06d929e6946a864eee031959ff2242092dc", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 63, "deletions": 3, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e7c91eb7744b832df14a7afca45906ed3c580f/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e7c91eb7744b832df14a7afca45906ed3c580f/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=93e7c91eb7744b832df14a7afca45906ed3c580f", "patch": "@@ -19455,8 +19455,39 @@ package body Sem_Prag is\n                   end;\n                end if;\n \n-               Preanalyze_Assert_Expression\n-                 (Expression (Variant), Any_Discrete);\n+               --  Preanalyze_Assert_Expression, but without enforcing any of\n+               --  the two acceptable types.\n+\n+               Preanalyze_Assert_Expression (Expression (Variant));\n+\n+               --  Expression of a discrete type is allowed\n+\n+               if Is_Discrete_Type (Etype (Expression (Variant))) then\n+                  null;\n+\n+               --  Expression of a Big_Integer type (or its ghost variant) is\n+               --  only allowed in Decreases clause.\n+\n+               elsif\n+                 Is_RTE (Base_Type (Etype (Expression (Variant))),\n+                         RE_Big_Integer)\n+                   or else\n+                 Is_RTE (Base_Type (Etype (Expression (Variant))),\n+                         RO_GH_Big_Integer)\n+               then\n+                  if Chars (Variant) = Name_Increases then\n+                     Error_Msg_N\n+                       (\"Loop_Variant with Big_Integer can only decrease\",\n+                        Expression (Variant));\n+                  end if;\n+\n+               --  Expression of other types is not allowed\n+\n+               else\n+                  Error_Msg_N\n+                    (\"expected a discrete or Big_Integer type\",\n+                     Expression (Variant));\n+               end if;\n \n                Next (Variant);\n             end loop;\n@@ -29415,7 +29446,36 @@ package body Sem_Prag is\n          end if;\n \n          Errors := Serious_Errors_Detected;\n-         Preanalyze_Assert_Expression (Expr, Any_Discrete);\n+\n+         --  Preanalyze_Assert_Expression, but without enforcing any of the two\n+         --  acceptable types.\n+\n+         Preanalyze_Assert_Expression (Expr);\n+\n+         --  Expression of a discrete type is allowed\n+\n+         if Is_Discrete_Type (Etype (Expr)) then\n+            null;\n+\n+         --  Expression of a Big_Integer type (or its ghost variant) is only\n+         --  allowed in Decreases clause.\n+\n+         elsif\n+           Is_RTE (Base_Type (Etype (Expr)), RE_Big_Integer)\n+             or else\n+           Is_RTE (Base_Type (Etype (Expr)), RO_GH_Big_Integer)\n+         then\n+            if Chars (Direction) = Name_Increases then\n+               Error_Msg_N\n+                 (\"Subprogram_Variant with Big_Integer can only decrease\",\n+                  Expr);\n+            end if;\n+\n+         --  Expression of other types is not allowed\n+\n+         else\n+            Error_Msg_N (\"expected a discrete or Big_Integer type\", Expr);\n+         end if;\n \n          --  Emit a clarification message when the variant expression\n          --  contains at least one undefined reference, possibly due"}]}