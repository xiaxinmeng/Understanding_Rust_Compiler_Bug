{"sha": "cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y5YTQ3M2U2NDk0YWVmNGQ2ZTM2ZGZkYWI2NGIzYzQyYmZlNTk1OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T10:49:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-04-25T10:49:34Z"}, "message": "[multiple changes]\n\n2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.adb Flag301 is now known as Ignore_SPARK_Mode_Pragmas.\n\t(Ignore_SPARK_Mode_Pragmas): New routine.\n\t(Set_Ignore_SPARK_Mode_Pragmas): New routine.\n\t(Write_Entity_Flags): Add an entry for Ignore_SPARK_Mode_Pragmas.\n\t* einfo.ads Add new attribute Ignore_SPARK_Mode_Pragmas and update\n\trelated entities.\n\t(Ignore_SPARK_Mode_Pragmas): New routine\n\talong with pragma Inline.\n\t(Set_Ignore_SPARK_Mode_Pragmas): New routine along with pragma Inline.\n\t* opt.ads Rename flag Ignore_Pragma_SPARK_Mode to\n\tIgnore_SPARK_Mode_Pragmas_In_Instance.\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper):\n\tSave and restore the value of global flag\n\tIgnore_SPARK_Mode_Pragmas_In_Instance. Set or reinstate the value\n\tof global flag Ignore_SPARK_Mode_Pragmas_In_Instance when either\n\tthe corresponding spec or the body must ignore all SPARK_Mode\n\tpragmas found within.\n\t(Analyze_Subprogram_Declaration): Mark\n\tthe spec when it needs to ignore all SPARK_Mode pragmas found\n\twithin to allow the body to infer this property in case it is\n\tinstantiated or inlined later.\n\t* sem_ch7.adb (Analyze_Package_Body_Helper): Save and restore the\n\tvalue of global flag Ignore_SPARK_Mode_Pragmas_In_Instance. Set\n\tthe value of global flag Ignore_SPARK_Mode_Pragmas_In_Instance\n\twhen the corresponding spec also ignored all SPARK_Mode pragmas\n\tfound within.\n\t(Analyze_Package_Declaration): Mark the spec when\n\tit needs to ignore all SPARK_Mode pragmas found within to allow\n\tthe body to infer this property in case it is instantiated or\n\tinlined later.\n\t* sem_ch12.adb (Analyze_Formal_Package_Declaration):\n\tSave and restore the value of flag\n\tIgnore_SPARK_Mode_Pragmas_In_Instance. Mark the\n\tformal spec when it needs to ignore all SPARK_Mode\n\tpragmas found within to allow the body to infer this\n\tproperty in case it is instantiated or inlined later.\n\t(Analyze_Package_Instantiation): Save and restore the value\n\tof global flag Ignore_SPARK_Mode_Pragmas_In_Instance. Mark\n\tthe instance spec when it needs to ignore all SPARK_Mode\n\tpragmas found within to allow the body to infer this\n\tproperty in case it is instantiated or inlined later.\n\t(Analyze_Subprogram_Instantiation): Save and restore the value\n\tof global flag Ignore_SPARK_Mode_Pragmas_In_Instance. Mark the\n\tinstance spec and anonymous package when they need to ignore\n\tall SPARK_Mode pragmas found within to allow the body to infer\n\tthis property in case it is instantiated or inlined later.\n\t(Instantiate_Package_Body): Save and restore the value of global\n\tflag Ignore_SPARK_Mode_Pragmas_In_Instance. Set the value of\n\tglobal flag Ignore_SPARK_Mode_Pragmas_In_Instance when the\n\tcorresponding instance spec also ignored all SPARK_Mode pragmas\n\tfound within.\n\t(Instantiate_Subprogram_Body): Save and restore the\n\tvalue of global flag Ignore_SPARK_Mode_Pragmas_In_Instance. Set\n\tthe value of global flag Ignore_SPARK_Mode_Pragmas_In_Instance\n\twhen the corresponding instance spec also ignored all SPARK_Mode\n\tpragmas found within.\n\t* sem_prag.adb (Analyze_Pragma): Update the reference to\n\tIgnore_Pragma_SPARK_Mode.\n\t* sem_util.adb (SPARK_Mode_Is_Off): A construct which ignored\n\tall SPARK_Mode pragmas defined within yields mode \"off\".\n\n2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* bindgen.adb, exp_dbug.adb, errout.adb, fname.adb: Minor reformatting.\n\n2017-04-25  Bob Duff  <duff@adacore.com>\n\n\t* exp_atag.adb (Build_CW_Membership): Add \"Suppress =>\n\tAll_Checks\" to avoid generating unnecessary checks.\n\t* exp_ch4.adb (Expand_N_In, Make_Tag_Check): Add \"Suppress =>\n\tAll_Checks\".\n\t* sem.ads: Fix comment.\n\t* expander.ads: Fix comment.\n\t* exp_atag.ads: Fix comment: \"Index = 0\" should be\n\t\"Index >= 0\".\n\n2017-04-25  Gary Dismukes  <dismukes@adacore.com>\n\n\t* s-taprop-linux.adb: Minor editorial fixes.\n\nFrom-SVN: r247182", "tree": {"sha": "3ba8a2ea4ab83bda23bcdc99817bc62e7a3b9002", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ba8a2ea4ab83bda23bcdc99817bc62e7a3b9002"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/comments", "author": null, "committer": null, "parents": [{"sha": "1f0bcd44fe7967cd994a2a1d1397305b4b8f2e47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f0bcd44fe7967cd994a2a1d1397305b4b8f2e47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f0bcd44fe7967cd994a2a1d1397305b4b8f2e47"}], "stats": {"total": 499, "additions": 377, "deletions": 122}, "files": [{"sha": "bec26bcc770a093ddd34a28d971f18d45cb42d90", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "patch": "@@ -1,3 +1,85 @@\n+2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb Flag301 is now known as Ignore_SPARK_Mode_Pragmas.\n+\t(Ignore_SPARK_Mode_Pragmas): New routine.\n+\t(Set_Ignore_SPARK_Mode_Pragmas): New routine.\n+\t(Write_Entity_Flags): Add an entry for Ignore_SPARK_Mode_Pragmas.\n+\t* einfo.ads Add new attribute Ignore_SPARK_Mode_Pragmas and update\n+\trelated entities.\n+\t(Ignore_SPARK_Mode_Pragmas): New routine\n+\talong with pragma Inline.\n+\t(Set_Ignore_SPARK_Mode_Pragmas): New routine along with pragma Inline.\n+\t* opt.ads Rename flag Ignore_Pragma_SPARK_Mode to\n+\tIgnore_SPARK_Mode_Pragmas_In_Instance.\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper):\n+\tSave and restore the value of global flag\n+\tIgnore_SPARK_Mode_Pragmas_In_Instance. Set or reinstate the value\n+\tof global flag Ignore_SPARK_Mode_Pragmas_In_Instance when either\n+\tthe corresponding spec or the body must ignore all SPARK_Mode\n+\tpragmas found within.\n+\t(Analyze_Subprogram_Declaration): Mark\n+\tthe spec when it needs to ignore all SPARK_Mode pragmas found\n+\twithin to allow the body to infer this property in case it is\n+\tinstantiated or inlined later.\n+\t* sem_ch7.adb (Analyze_Package_Body_Helper): Save and restore the\n+\tvalue of global flag Ignore_SPARK_Mode_Pragmas_In_Instance. Set\n+\tthe value of global flag Ignore_SPARK_Mode_Pragmas_In_Instance\n+\twhen the corresponding spec also ignored all SPARK_Mode pragmas\n+\tfound within.\n+\t(Analyze_Package_Declaration): Mark the spec when\n+\tit needs to ignore all SPARK_Mode pragmas found within to allow\n+\tthe body to infer this property in case it is instantiated or\n+\tinlined later.\n+\t* sem_ch12.adb (Analyze_Formal_Package_Declaration):\n+\tSave and restore the value of flag\n+\tIgnore_SPARK_Mode_Pragmas_In_Instance. Mark the\n+\tformal spec when it needs to ignore all SPARK_Mode\n+\tpragmas found within to allow the body to infer this\n+\tproperty in case it is instantiated or inlined later.\n+\t(Analyze_Package_Instantiation): Save and restore the value\n+\tof global flag Ignore_SPARK_Mode_Pragmas_In_Instance. Mark\n+\tthe instance spec when it needs to ignore all SPARK_Mode\n+\tpragmas found within to allow the body to infer this\n+\tproperty in case it is instantiated or inlined later.\n+\t(Analyze_Subprogram_Instantiation): Save and restore the value\n+\tof global flag Ignore_SPARK_Mode_Pragmas_In_Instance. Mark the\n+\tinstance spec and anonymous package when they need to ignore\n+\tall SPARK_Mode pragmas found within to allow the body to infer\n+\tthis property in case it is instantiated or inlined later.\n+\t(Instantiate_Package_Body): Save and restore the value of global\n+\tflag Ignore_SPARK_Mode_Pragmas_In_Instance. Set the value of\n+\tglobal flag Ignore_SPARK_Mode_Pragmas_In_Instance when the\n+\tcorresponding instance spec also ignored all SPARK_Mode pragmas\n+\tfound within.\n+\t(Instantiate_Subprogram_Body): Save and restore the\n+\tvalue of global flag Ignore_SPARK_Mode_Pragmas_In_Instance. Set\n+\tthe value of global flag Ignore_SPARK_Mode_Pragmas_In_Instance\n+\twhen the corresponding instance spec also ignored all SPARK_Mode\n+\tpragmas found within.\n+\t* sem_prag.adb (Analyze_Pragma): Update the reference to\n+\tIgnore_Pragma_SPARK_Mode.\n+\t* sem_util.adb (SPARK_Mode_Is_Off): A construct which ignored\n+\tall SPARK_Mode pragmas defined within yields mode \"off\".\n+\n+2017-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* bindgen.adb, exp_dbug.adb, errout.adb, fname.adb: Minor reformatting.\n+\n+2017-04-25  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_atag.adb (Build_CW_Membership): Add \"Suppress =>\n+\tAll_Checks\" to avoid generating unnecessary checks.\n+\t* exp_ch4.adb (Expand_N_In, Make_Tag_Check): Add \"Suppress =>\n+\tAll_Checks\".\n+\t* sem.ads: Fix comment.\n+\t* expander.ads: Fix comment.\n+\t* exp_atag.ads: Fix comment: \"Index = 0\" should be\n+\t\"Index >= 0\".\n+\n+2017-04-25  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* s-taprop-linux.adb: Minor editorial fixes.\n+\n 2017-04-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem_util.adb (New_Copy_Tree): Put back the declarations of the"}, {"sha": "5544c8244b753b9de2773ba05d67fa0ceb2bb6b4", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "patch": "@@ -1120,8 +1120,8 @@ package body Bindgen is\n                --  where we increment the elaboration entity if one exists.\n \n                --  Likewise for lone specs with an elaboration entity defined\n-               --  despite No_Elaboration_Code, e.g. when requested to\n-               --  preserve control flow.\n+               --  despite No_Elaboration_Code, e.g. when requested to preserve\n+               --  control flow.\n \n                if (U.Utype = Is_Body or else U.Utype = Is_Spec_Only)\n                  and then Units.Table (Unum_Spec).Set_Elab_Entity"}, {"sha": "5638bc09e086a091509021bbdce1eb5f1307e480", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "patch": "@@ -620,7 +620,7 @@ package body Einfo is\n    --    Body_Needed_For_Inlining        Flag299\n \n    --    Has_Private_Extension           Flag300\n-   --    (unused)                        Flag301\n+   --    Ignore_SPARK_Mode_Pragmas       Flag301\n    --    (unused)                        Flag302\n    --    (unused)                        Flag303\n    --    (unused)                        Flag304\n@@ -1981,6 +1981,29 @@ package body Einfo is\n       return Node4 (Id);\n    end Homonym;\n \n+   function Ignore_SPARK_Mode_Pragmas (Id : E) return B is\n+   begin\n+      pragma Assert\n+        (Ekind_In (Id, E_Protected_Body,   --  concurrent variants\n+                       E_Protected_Type,\n+                       E_Task_Body,\n+                       E_Task_Type)\n+          or else\n+         Ekind_In (Id, E_Entry,            --  overloadable variants\n+                       E_Entry_Family,\n+                       E_Function,\n+                       E_Generic_Function,\n+                       E_Generic_Procedure,\n+                       E_Operator,\n+                       E_Procedure,\n+                       E_Subprogram_Body)\n+           or else\n+         Ekind_In (Id, E_Generic_Package,  --  package variants\n+                       E_Package,\n+                       E_Package_Body));\n+      return Flag301 (Id);\n+   end Ignore_SPARK_Mode_Pragmas;\n+\n    function Import_Pragma (Id : E) return E is\n    begin\n       pragma Assert (Is_Subprogram (Id));\n@@ -5073,6 +5096,29 @@ package body Einfo is\n       Set_Elist24 (Id, V);\n    end Set_Incomplete_Actuals;\n \n+   procedure Set_Ignore_SPARK_Mode_Pragmas (Id : E; V : B := True) is\n+   begin\n+      pragma Assert\n+        (Ekind_In (Id, E_Protected_Body,   --  concurrent variants\n+                       E_Protected_Type,\n+                       E_Task_Body,\n+                       E_Task_Type)\n+          or else\n+         Ekind_In (Id, E_Entry,            --  overloadable variants\n+                       E_Entry_Family,\n+                       E_Function,\n+                       E_Generic_Function,\n+                       E_Generic_Procedure,\n+                       E_Operator,\n+                       E_Procedure,\n+                       E_Subprogram_Body)\n+           or else\n+         Ekind_In (Id, E_Generic_Package,  --  package variants\n+                       E_Package,\n+                       E_Package_Body));\n+      Set_Flag301 (Id, V);\n+   end Set_Ignore_SPARK_Mode_Pragmas;\n+\n    procedure Set_Import_Pragma (Id : E; V : E) is\n    begin\n       pragma Assert (Is_Subprogram (Id));\n@@ -9402,6 +9448,7 @@ package body Einfo is\n       W (\"Has_Visible_Refinement\",          Flag263 (Id));\n       W (\"Has_Volatile_Components\",         Flag87  (Id));\n       W (\"Has_Xref_Entry\",                  Flag182 (Id));\n+      W (\"Ignore_SPARK_Mode_Pragmas\",       Flag301 (Id));\n       W (\"In_Package_Body\",                 Flag48  (Id));\n       W (\"In_Private_Part\",                 Flag45  (Id));\n       W (\"In_Use\",                          Flag8   (Id));"}, {"sha": "9d8a33c7075a82d2ff95ba064bb8096a1f584c56", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "patch": "@@ -2164,6 +2164,13 @@ package Einfo is\n --       scopes. Homonyms in the same scope are overloaded. Used for name\n --       resolution and for the generation of debugging information.\n \n+--    Ignore_SPARK_Mode_Pragmas (Flag301)\n+--       Present in concurrent type, entry, operator, [generic] package,\n+--       package body, [generic] subprogram, and subprogram body entities.\n+--       Set when the entity appears in an instance subject to SPARK_Mode\n+--       \"off\" and indicates that all SPARK_Mode pragmas found within must\n+--       be ignored.\n+\n --    Implementation_Base_Type (synthesized)\n --       Applies to all entities. For types, similar to Base_Type, but never\n --       returns a private type when applied to a non-private type. Instead in\n@@ -5922,14 +5929,15 @@ package Einfo is\n    --    Extra_Formals                       (Node28)\n    --    Contract                            (Node34)\n    --    SPARK_Pragma                        (Node40)   (protected kind)\n-   --    Needs_No_Actuals                    (Flag22)\n-   --    Uses_Sec_Stack                      (Flag95)\n    --    Default_Expressions_Processed       (Flag108)\n    --    Entry_Accepted                      (Flag152)\n-   --    Sec_Stack_Needed_For_Return         (Flag167)\n    --    Has_Expanded_Contract               (Flag240)\n-   --    SPARK_Pragma_Inherited              (Flag265)  (protected kind)\n+   --    Ignore_SPARK_Mode_Pragmas           (Flag301)\n    --    Is_Entry_Wrapper                    (Flag297)\n+   --    Needs_No_Actuals                    (Flag22)\n+   --    Sec_Stack_Needed_For_Return         (Flag167)\n+   --    SPARK_Pragma_Inherited              (Flag265)  (protected kind)\n+   --    Uses_Sec_Stack                      (Flag95)\n    --    Address_Clause                      (synth)\n    --    Entry_Index_Type                    (synth)\n    --    First_Formal                        (synth)\n@@ -6056,6 +6064,7 @@ package Einfo is\n    --    Has_Nested_Subprogram               (Flag282)\n    --    Has_Out_Or_In_Out_Parameter         (Flag110)\n    --    Has_Recursive_Call                  (Flag143)\n+   --    Ignore_SPARK_Mode_Pragmas           (Flag301)\n    --    Is_Abstract_Subprogram              (Flag19)   (non-generic case only)\n    --    Is_Called                           (Flag102)  (non-generic case only)\n    --    Is_Constructor                      (Flag76)\n@@ -6209,6 +6218,7 @@ package Einfo is\n    --    SPARK_Pragma                        (Node40)\n    --    Default_Expressions_Processed       (Flag108)\n    --    Has_Nested_Subprogram               (Flag282)\n+   --    Ignore_SPARK_Mode_Pragmas           (Flag301)\n    --    Is_Intrinsic_Subprogram             (Flag64)\n    --    Is_Machine_Code_Subprogram          (Flag137)\n    --    Is_Primitive                        (Flag218)\n@@ -6272,6 +6282,7 @@ package Einfo is\n    --    Has_Forward_Instantiation           (Flag175)\n    --    Has_Master_Entity                   (Flag21)\n    --    Has_RACW                            (Flag214)  (non-generic case only)\n+   --    Ignore_SPARK_Mode_Pragmas           (Flag301)\n    --    In_Package_Body                     (Flag48)\n    --    In_Use                              (Flag8)\n    --    Is_Instantiated                     (Flag126)\n@@ -6299,6 +6310,7 @@ package Einfo is\n    --    SPARK_Aux_Pragma                    (Node41)\n    --    Contains_Ignored_Ghost_Code         (Flag279)\n    --    Delay_Subprogram_Descriptors        (Flag50)\n+   --    Ignore_SPARK_Mode_Pragmas           (Flag301)\n    --    SPARK_Aux_Pragma_Inherited          (Flag266)\n    --    SPARK_Pragma_Inherited              (Flag265)\n    --    Scope_Depth                         (synth)\n@@ -6367,6 +6379,7 @@ package Einfo is\n    --    Has_Master_Entity                   (Flag21)\n    --    Has_Nested_Block_With_Handler       (Flag101)\n    --    Has_Nested_Subprogram               (Flag282)\n+   --    Ignore_SPARK_Mode_Pragmas           (Flag301)\n    --    Is_Abstract_Subprogram              (Flag19)   (non-generic case only)\n    --    Is_Asynchronous                     (Flag81)\n    --    Is_Called                           (Flag102)  (non-generic case only)\n@@ -6406,6 +6419,7 @@ package Einfo is\n \n    --  E_Protected_Body\n    --    SPARK_Pragma                        (Node40)\n+   --    Ignore_SPARK_Mode_Pragmas           (Flag301)\n    --    SPARK_Pragma_Inherited              (Flag265)\n    --    (any others??? First/Last Entity, Scope_Depth???)\n \n@@ -6427,6 +6441,7 @@ package Einfo is\n    --    Entry_Max_Queue_Lengths_Array       (Node35)\n    --    SPARK_Pragma                        (Node40)\n    --    SPARK_Aux_Pragma                    (Node41)\n+   --    Ignore_SPARK_Mode_Pragmas           (Flag301)\n    --    Sec_Stack_Needed_For_Return         (Flag167)  ???\n    --    SPARK_Aux_Pragma_Inherited          (Flag266)\n    --    SPARK_Pragma_Inherited              (Flag265)\n@@ -6557,6 +6572,7 @@ package Einfo is\n    --  E_Task_Body\n    --    Contract                            (Node34)\n    --    SPARK_Pragma                        (Node40)\n+   --    Ignore_SPARK_Mode_Pragmas           (Flag301)\n    --    SPARK_Pragma_Inherited              (Flag265)\n    --    (any others??? First/Last Entity, Scope_Depth???)\n \n@@ -6580,6 +6596,7 @@ package Einfo is\n    --    Delay_Cleanups                      (Flag114)\n    --    Has_Master_Entity                   (Flag21)\n    --    Has_Storage_Size_Clause             (Flag23)   (base type only)\n+   --    Ignore_SPARK_Mode_Pragmas           (Flag301)\n    --    Sec_Stack_Needed_For_Return         (Flag167)  ???\n    --    SPARK_Aux_Pragma_Inherited          (Flag266)\n    --    SPARK_Pragma_Inherited              (Flag265)\n@@ -7103,6 +7120,7 @@ package Einfo is\n    function Has_Xref_Entry                      (Id : E) return B;\n    function Hiding_Loop_Variable                (Id : E) return E;\n    function Homonym                             (Id : E) return E;\n+   function Ignore_SPARK_Mode_Pragmas           (Id : E) return B;\n    function Import_Pragma                       (Id : E) return E;\n    function Incomplete_Actuals                  (Id : E) return L;\n    function In_Package_Body                     (Id : E) return B;\n@@ -7788,6 +7806,7 @@ package Einfo is\n    procedure Set_Has_Xref_Entry                  (Id : E; V : B := True);\n    procedure Set_Hiding_Loop_Variable            (Id : E; V : E);\n    procedure Set_Homonym                         (Id : E; V : E);\n+   procedure Set_Ignore_SPARK_Mode_Pragmas       (Id : E; V : B := True);\n    procedure Set_Import_Pragma                   (Id : E; V : E);\n    procedure Set_Incomplete_Actuals              (Id : E; V : L);\n    procedure Set_In_Package_Body                 (Id : E; V : B := True);\n@@ -8587,6 +8606,7 @@ package Einfo is\n    pragma Inline (Has_Xref_Entry);\n    pragma Inline (Hiding_Loop_Variable);\n    pragma Inline (Homonym);\n+   pragma Inline (Ignore_SPARK_Mode_Pragmas);\n    pragma Inline (Import_Pragma);\n    pragma Inline (Incomplete_Actuals);\n    pragma Inline (In_Package_Body);\n@@ -9109,6 +9129,7 @@ package Einfo is\n    pragma Inline (Set_Has_Xref_Entry);\n    pragma Inline (Set_Hiding_Loop_Variable);\n    pragma Inline (Set_Homonym);\n+   pragma Inline (Set_Ignore_SPARK_Mode_Pragmas);\n    pragma Inline (Set_Import_Pragma);\n    pragma Inline (Set_Incomplete_Actuals);\n    pragma Inline (Set_In_Package_Body);"}, {"sha": "2d26d07e948f3b1301b2b36d01866ad159506c7b", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "patch": "@@ -508,10 +508,12 @@ package body Errout is\n                      Error_Msg_Internal\n                        (\"info: in inlined body #\",\n                         Actual_Error_Loc, Flag_Location, Msg_Cont_Status);\n+\n                   elsif Is_Warning_Msg or Is_Style_Msg then\n                      Error_Msg_Internal\n                        (Warn_Insertion & \"in inlined body #\",\n                         Actual_Error_Loc, Flag_Location, Msg_Cont_Status);\n+\n                   else\n                      Error_Msg_Internal\n                        (\"error in inlined body #\",\n@@ -525,10 +527,12 @@ package body Errout is\n                      Error_Msg_Internal\n                        (\"info: in instantiation #\",\n                         Actual_Error_Loc, Flag_Location, Msg_Cont_Status);\n+\n                   elsif Is_Warning_Msg or else Is_Style_Msg then\n                      Error_Msg_Internal\n                        (Warn_Insertion & \"in instantiation #\",\n                         Actual_Error_Loc, Flag_Location, Msg_Cont_Status);\n+\n                   else\n                      Error_Msg_Internal\n                        (\"instantiation error #\","}, {"sha": "dd25237fd8fb20f163d70e665d8ffd25d2eab9ad", "filename": "gcc/ada/exp_atag.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fexp_atag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fexp_atag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_atag.adb?ref=cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2006-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2006-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -178,7 +178,7 @@ package body Exp_Atag is\n       --    Typ_TSD  : constant Type_Specific_Data_Ptr\n       --                          := Build_TSD (Address!(Typ_Tag));\n       --    Index    : constant Integer := Obj_TSD.Idepth - Typ_TSD.Idepth\n-      --    Index > 0 and then Obj_TSD.Tags_Table (Index) = Typ'Tag\n+      --    Index >= 0 and then Obj_TSD.Tags_Table (Index) = Typ'Tag\n \n       Insert_Action (Related_Nod,\n         Make_Object_Declaration (Loc,\n@@ -199,7 +199,8 @@ package body Exp_Atag is\n           Constant_Present    => True,\n           Object_Definition   => New_Occurrence_Of\n                                    (RTE (RE_Type_Specific_Data_Ptr), Loc),\n-          Expression => Build_TSD (Loc, New_Occurrence_Of (Tag_Addr, Loc))));\n+          Expression => Build_TSD (Loc, New_Occurrence_Of (Tag_Addr, Loc))),\n+        Suppress => All_Checks);\n \n       Insert_Action (Related_Nod,\n         Make_Object_Declaration (Loc,\n@@ -209,7 +210,8 @@ package body Exp_Atag is\n                                    (RTE (RE_Type_Specific_Data_Ptr), Loc),\n           Expression => Build_TSD (Loc,\n                           Unchecked_Convert_To (RTE (RE_Address),\n-                            Typ_Tag_Node))));\n+                            Typ_Tag_Node))),\n+        Suppress => All_Checks);\n \n       Insert_Action (Related_Nod,\n         Make_Object_Declaration (Loc,\n@@ -230,7 +232,8 @@ package body Exp_Atag is\n                    Prefix        => New_Occurrence_Of (Typ_TSD, Loc),\n                    Selector_Name =>\n                      New_Occurrence_Of\n-                       (RTE_Record_Component (RE_Idepth), Loc)))));\n+                       (RTE_Record_Component (RE_Idepth), Loc)))),\n+        Suppress => All_Checks);\n \n       New_Node :=\n         Make_And_Then (Loc,"}, {"sha": "d53466fc39c6a3101b115eadab770be6512afab1", "filename": "gcc/ada/exp_atag.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fexp_atag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fexp_atag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_atag.ads?ref=cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2006-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2006-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -54,7 +54,7 @@ package Exp_Atag is\n    --  computed in constant time by the formula:\n    --\n    --   Index := TSD (Obj'Tag).Idepth - TSD (Typ'Tag).Idepth;\n-   --   Index > 0 and then TSD (Obj'Tag).Tags_Table (Index) = Typ'Tag\n+   --   Index >= 0 and then TSD (Obj'Tag).Tags_Table (Index) = Typ'Tag\n    --\n    --  Related_Nod is the node where the implicit declaration of variable Index\n    --  is inserted. Obj_Tag_Node is relocated."}, {"sha": "8a2698befbfcae39640e697e95142b6962d9eecc", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "patch": "@@ -5859,7 +5859,8 @@ package body Exp_Ch4 is\n                if Tagged_Type_Expansion then\n                   Tagged_Membership (N, SCIL_Node, New_N);\n                   Rewrite (N, New_N);\n-                  Analyze_And_Resolve (N, Restyp);\n+                  Analyze_And_Resolve\n+                    (N, Restyp, Suppress => All_Checks);\n \n                   --  Update decoration of relocated node referenced by the\n                   --  SCIL node.\n@@ -10908,7 +10909,8 @@ package body Exp_Ch4 is\n                Insert_Action (N,\n                  Make_Raise_Constraint_Error (Loc,\n                    Condition => Cond,\n-                   Reason    => CE_Tag_Check_Failed));\n+                   Reason    => CE_Tag_Check_Failed),\n+                 Suppress => All_Checks);\n             end Make_Tag_Check;\n \n          --  Start of processing for Tagged_Conversion"}, {"sha": "ede7e2ebc78dda2c31059d3b2de2a18703e5a902", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "patch": "@@ -343,8 +343,10 @@ package body Exp_Dbug is\n \n       begin\n          Enable :=\n-           Enable or else (Ekind (T) in Array_Kind\n-                            and then Present (Packed_Array_Impl_Type (T)));\n+           Enable\n+             or else\n+               (Ekind (T) in Array_Kind\n+                 and then Present (Packed_Array_Impl_Type (T)));\n       end Enable_If_Packed_Array;\n \n       ----------------------\n@@ -359,7 +361,7 @@ package body Exp_Dbug is\n          elsif Nkind (N) = N_Identifier\n            and then Scope_Contains (Scope (Entity (N)), Ent)\n            and then (Ekind (Entity (N)) = E_Constant\n-                     or else Ekind (Entity (N)) = E_In_Parameter)\n+                      or else Ekind (Entity (N)) = E_In_Parameter)\n          then\n             Prepend_String_To_Buffer (Get_Name_String (Chars (Entity (N))));\n \n@@ -375,25 +377,25 @@ package body Exp_Dbug is\n       -- Scope_Contains --\n       --------------------\n \n-      function Scope_Contains (Sc : Node_Id; Ent : Entity_Id) return Boolean\n-      is\n+      function Scope_Contains (Sc : Node_Id; Ent : Entity_Id) return Boolean is\n          Cur : Node_Id := Scope (Ent);\n+\n       begin\n          while Present (Cur) loop\n             if Cur = Sc then\n                return True;\n             end if;\n+\n             Cur := Scope (Cur);\n          end loop;\n+\n          return False;\n       end Scope_Contains;\n \n    --  Start of processing for Debug_Renaming_Declaration\n \n    begin\n-      if not Comes_From_Source (N)\n-        and then not Needs_Debug_Info (Ent)\n-      then\n+      if not Comes_From_Source (N) and then not Needs_Debug_Info (Ent) then\n          return Empty;\n       end if;\n "}, {"sha": "92764763daa4aa56cb2d889a1cce95d89ef1c8b6", "filename": "gcc/ada/expander.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fexpander.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fexpander.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpander.ads?ref=cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -66,9 +66,9 @@\n --      always the case).\n \n --  In both these cases, Replace or Rewrite must be used to achieve the\n---  of the node, since the Expander routine is only passed the Node_Id\n---  of the node to be expanded, and the resulting expanded Node_Id must\n---  be the same (the parameter to Expand is mode in, not mode in-out).\n+--  expansion of the node, since the Expander routine is only passed the\n+--  Node_Id of the node to be expanded, and the resulting expanded Node_Id\n+--  must be the same (the parameter to Expand is mode in, not mode in-out).\n \n --  For nodes other than subexpressions, it is not necessary to preserve the\n --  original tree in the Expand routines, unlike the case for modifications"}, {"sha": "0487085e02c03197474fe869c827944e7d9cf9d3", "filename": "gcc/ada/fname.adb", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Ffname.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Ffname.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffname.adb?ref=cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "patch": "@@ -59,14 +59,13 @@ package body Fname is\n \n    function Has_Internal_Extension (Fname : String) return Boolean;\n    pragma Inline (Has_Internal_Extension);\n-   --  True if the extension is appropriate for an internal/predefined\n-   --  unit. That means \".ads\" or \".adb\" for source files, and \".ali\" for\n-   --  ALI files.\n+   --  True if the extension is appropriate for an internal/predefined unit.\n+   --  That means \".ads\" or \".adb\" for source files, and \".ali\" for ALI files.\n \n    function Has_Prefix (X, Prefix : String) return Boolean;\n    pragma Inline (Has_Prefix);\n    --  True if Prefix is at the beginning of X. For example,\n-   --  Has_Prefix(\"a-filename.ads\", Prefix => \"a-\") is True.\n+   --  Has_Prefix (\"a-filename.ads\", Prefix => \"a-\") is True.\n \n    ----------------------------\n    -- Has_Internal_Extension --\n@@ -145,14 +144,14 @@ package body Fname is\n       subtype Str8 is String (1 .. 8);\n \n       Renaming_Names : constant array (1 .. 8) of Str8 :=\n-        (\"calendar\",       -- Calendar\n-         \"machcode\",       -- Machine_Code\n-         \"unchconv\",       -- Unchecked_Conversion\n-         \"unchdeal\",       -- Unchecked_Deallocation\n-         \"directio\",       -- Direct_IO\n-         \"ioexcept\",       -- IO_Exceptions\n-         \"sequenio\",       -- Sequential_IO\n-         \"text_io.\");      -- Text_IO\n+        (\"calendar\",   --  Calendar\n+         \"machcode\",   --  Machine_Code\n+         \"unchconv\",   --  Unchecked_Conversion\n+         \"unchdeal\",   --  Unchecked_Deallocation\n+         \"directio\",   --  Direct_IO\n+         \"ioexcept\",   --  IO_Exceptions\n+         \"sequenio\",   --  Sequential_IO\n+         \"text_io.\");  --  Text_IO\n \n       --  Note: the implementation is optimized to perform uniform comparisons\n       --  on string slices whose length is known at compile time and at most 8"}, {"sha": "bb6c5b37e13d93f9029b8e7d0925134aafac658e", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "patch": "@@ -814,18 +814,18 @@ package Opt is\n    --  default value appropriate to the system (in Osint.Initialize), and then\n    --  reset if a command line switch is used to change the setting.\n \n-   Ignore_Pragma_SPARK_Mode : Boolean := False;\n-   --  GNAT\n-   --  Set True to ignore the semantics and effects of pragma SPARK_Mode when\n-   --  the pragma appears inside an instance whose enclosing context is subject\n-   --  to SPARK_Mode \"off\".\n-\n    Ignore_Rep_Clauses : Boolean := False;\n    --  GNAT\n    --  Set True to ignore all representation clauses. Useful when compiling\n    --  code from foreign compilers for checking or ASIS purposes. Can be\n    --  set True by use of -gnatI.\n \n+   Ignore_SPARK_Mode_Pragmas_In_Instance : Boolean := False;\n+   --  GNAT\n+   --  Set True to ignore the semantics and effects of pragma SPARK_Mode when\n+   --  the pragma appears inside an instance whose enclosing context is subject\n+   --  to SPARK_Mode \"off\". This property applies to nested instances.\n+\n    Ignore_Style_Checks_Pragmas : Boolean := False;\n    --  GNAT\n    --  Set True to ignore all Style_Checks pragmas. Can be set True by use"}, {"sha": "a435617805b507ba37df55cb64d57e8487169efb", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "patch": "@@ -849,8 +849,8 @@ package body System.Task_Primitives.Operations is\n                end if;\n             end loop;\n \n-            --  Cover the odd situtation if someone decides to change\n-            --  Parameters.Max_Task_Image_Length to less than 16 characters\n+            --  Cover the odd situation where someone decides to change\n+            --  Parameters.Max_Task_Image_Length to less than 16 characters.\n \n             if Len > Parameters.Max_Task_Image_Length then\n                Len := Parameters.Max_Task_Image_Length;"}, {"sha": "be5bc33245b65a5f013f2571c5a9bd353265041d", "filename": "gcc/ada/sem.ads", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fsem.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fsem.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.ads?ref=cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "patch": "@@ -165,7 +165,7 @@\n ------------------\n \n --  For certain kind of expressions, such as aggregates, we need to defer\n---  expansion of the aggregate and its inner expressions after the whole\n+--  expansion of the aggregate and its inner expressions until after the whole\n --  set of expressions appearing inside the aggregate have been analyzed.\n --  Consider, for instance the following example:\n --\n@@ -177,17 +177,17 @@\n --  repeatedly (for instance in the above aggregate \"new Thing (Function_Call)\"\n --  needs to be called 100 times.)\n \n---  The reason why this mechanism does not work is that the expanded code for\n---  the children is typically inserted above the parent and thus when the\n---  father gets expanded no re-evaluation takes place. For instance in the case\n---  of aggregates if \"new Thing (Function_Call)\" is expanded before of the\n---  aggregate the expanded code will be placed outside of the aggregate and\n---  when expanding the aggregate the loop from 1 to 100 will not surround the\n+--  The reason this mechanism does not work is that the expanded code for the\n+--  children is typically inserted above the parent and thus when the father\n+--  gets expanded no re-evaluation takes place. For instance in the case of\n+--  aggregates if \"new Thing (Function_Call)\" is expanded before the aggregate\n+--  the expanded code will be placed outside of the aggregate and when\n+--  expanding the aggregate the loop from 1 to 100 will not surround the\n --  expanded code for \"new Thing (Function_Call)\".\n \n---  To remedy this situation we introduce a new flag which signals whether we\n---  want a full analysis (i.e. expansion is enabled) or a pre-analysis which\n---  performs Analysis and Resolution but no expansion.\n+--  To remedy this situation we introduce a flag that signals whether we want a\n+--  full analysis (i.e. expansion is enabled) or a pre-analysis which performs\n+--  Analysis and Resolution but no expansion.\n \n --  After the complete pre-analysis of an expression has been carried out we\n --  can transform the expression and then carry out the full three stage"}, {"sha": "3a450eb2a71d7508aea0b302de82a033172867a5", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 84, "deletions": 56, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "patch": "@@ -2605,8 +2605,8 @@ package body Sem_Ch12 is\n \n       --  Local variables\n \n-      Save_IPSM : constant Boolean := Ignore_Pragma_SPARK_Mode;\n-      --  Save flag Ignore_Pragma_SPARK_Mode for restore on exit\n+      Save_ISMP : constant Boolean := Ignore_SPARK_Mode_Pragmas_In_Instance;\n+      --  Save flag Ignore_SPARK_Mode_Pragmas_In_Instance for restore on exit\n \n       Associations     : Boolean := True;\n       New_N            : Node_Id;\n@@ -2782,7 +2782,12 @@ package body Sem_Ch12 is\n       --  all SPARK_Mode pragmas within the generic_package_name.\n \n       if SPARK_Mode /= On then\n-         Ignore_Pragma_SPARK_Mode := True;\n+         Ignore_SPARK_Mode_Pragmas_In_Instance := True;\n+\n+         --  Mark the formal spec in case the body is instantiated at a later\n+         --  pass. This preserves the original context in effect for the body.\n+\n+         Set_Ignore_SPARK_Mode_Pragmas (Formal);\n       end if;\n \n       Analyze (Specification (N));\n@@ -2843,7 +2848,7 @@ package body Sem_Ch12 is\n          Analyze_Aspect_Specifications (N, Pack_Id);\n       end if;\n \n-      Ignore_Pragma_SPARK_Mode := Save_IPSM;\n+      Ignore_SPARK_Mode_Pragmas_In_Instance := Save_ISMP;\n    end Analyze_Formal_Package_Declaration;\n \n    ---------------------------------\n@@ -3622,8 +3627,8 @@ package body Sem_Ch12 is\n       Inline_Now        : Boolean := False;\n       Has_Inline_Always : Boolean := False;\n \n-      Save_IPSM : constant Boolean := Ignore_Pragma_SPARK_Mode;\n-      --  Save flag Ignore_Pragma_SPARK_Mode for restore on exit\n+      Save_ISMP : constant Boolean := Ignore_SPARK_Mode_Pragmas_In_Instance;\n+      --  Save flag Ignore_SPARK_Mode_Pragmas_In_Instance for restore on exit\n \n       Save_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n       Save_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n@@ -3865,7 +3870,13 @@ package body Sem_Ch12 is\n          --  the instance.\n \n          if SPARK_Mode /= On then\n-            Ignore_Pragma_SPARK_Mode := True;\n+            Ignore_SPARK_Mode_Pragmas_In_Instance := True;\n+\n+            --  Mark the instance spec in case the body is instantiated at a\n+            --  later pass. This preserves the original context in effect for\n+            --  the body.\n+\n+            Set_Ignore_SPARK_Mode_Pragmas (Act_Decl_Id);\n          end if;\n \n          Gen_Decl := Unit_Declaration_Node (Gen_Unit);\n@@ -4433,11 +4444,6 @@ package body Sem_Ch12 is\n          Set_Defining_Identifier (N, Act_Decl_Id);\n       end if;\n \n-      Ignore_Pragma_SPARK_Mode := Save_IPSM;\n-      SPARK_Mode               := Save_SM;\n-      SPARK_Mode_Pragma        := Save_SMP;\n-      Style_Check              := Save_Style_Check;\n-\n       --  Check that if N is an instantiation of System.Dim_Float_IO or\n       --  System.Dim_Integer_IO, the formal type has a dimension system.\n \n@@ -4460,6 +4466,11 @@ package body Sem_Ch12 is\n          Analyze_Aspect_Specifications (N, Act_Decl_Id);\n       end if;\n \n+      Ignore_SPARK_Mode_Pragmas_In_Instance := Save_ISMP;\n+      SPARK_Mode        := Save_SM;\n+      SPARK_Mode_Pragma := Save_SMP;\n+      Style_Check       := Save_Style_Check;\n+\n       if Mode_Set then\n          Restore_Ghost_Mode (Mode);\n       end if;\n@@ -4474,10 +4485,10 @@ package body Sem_Ch12 is\n             Restore_Env;\n          end if;\n \n-         Ignore_Pragma_SPARK_Mode := Save_IPSM;\n-         SPARK_Mode               := Save_SM;\n-         SPARK_Mode_Pragma        := Save_SMP;\n-         Style_Check              := Save_Style_Check;\n+         Ignore_SPARK_Mode_Pragmas_In_Instance := Save_ISMP;\n+         SPARK_Mode        := Save_SM;\n+         SPARK_Mode_Pragma := Save_SMP;\n+         Style_Check       := Save_Style_Check;\n \n          if Mode_Set then\n             Restore_Ghost_Mode (Mode);\n@@ -5119,8 +5130,8 @@ package body Sem_Ch12 is\n \n       --  Local variables\n \n-      Save_IPSM : constant Boolean := Ignore_Pragma_SPARK_Mode;\n-      --  Save flag Ignore_Pragma_SPARK_Mode for restore on exit\n+      Save_ISMP : constant Boolean := Ignore_SPARK_Mode_Pragmas_In_Instance;\n+      --  Save flag Ignore_SPARK_Mode_Pragmas_In_Instance for restore on exit\n \n       Save_SM  : constant SPARK_Mode_Type := SPARK_Mode;\n       Save_SMP : constant Node_Id         := SPARK_Mode_Pragma;\n@@ -5201,15 +5212,6 @@ package body Sem_Ch12 is\n          Error_Msg_NE (\"instantiation of & within itself\", N, Gen_Unit);\n \n       else\n-         --  If the context of the instance is subject to SPARK_Mode \"off\" or\n-         --  the annotation is altogether missing, set the global flag which\n-         --  signals Analyze_Pragma to ignore all SPARK_Mode pragmas within\n-         --  the instance.\n-\n-         if SPARK_Mode /= On then\n-            Ignore_Pragma_SPARK_Mode := True;\n-         end if;\n-\n          Set_Entity (Gen_Id, Gen_Unit);\n          Set_Is_Instantiated (Gen_Unit);\n \n@@ -5348,6 +5350,22 @@ package body Sem_Ch12 is\n          Set_Has_Pragma_Inline_Always\n            (Anon_Id,     Has_Pragma_Inline_Always (Gen_Unit));\n \n+         --  If the context of the instance is subject to SPARK_Mode \"off\" or\n+         --  the annotation is altogether missing, set the global flag which\n+         --  signals Analyze_Pragma to ignore all SPARK_Mode pragmas within\n+         --  the instance.\n+\n+         if SPARK_Mode /= On then\n+            Ignore_SPARK_Mode_Pragmas_In_Instance := True;\n+\n+            --  Mark both the instance spec and the anonymous package in case\n+            --  the body is instantiated at a later pass. This preserves the\n+            --  original context in effect for the body.\n+\n+            Set_Ignore_SPARK_Mode_Pragmas (Act_Decl_Id);\n+            Set_Ignore_SPARK_Mode_Pragmas (Anon_Id);\n+         end if;\n+\n          if not Is_Intrinsic_Subprogram (Gen_Unit) then\n             Check_Elab_Instantiation (N);\n          end if;\n@@ -5421,17 +5439,17 @@ package body Sem_Ch12 is\n          Env_Installed := False;\n          Generic_Renamings.Set_Last (0);\n          Generic_Renamings_HTable.Reset;\n-\n-         Ignore_Pragma_SPARK_Mode := Save_IPSM;\n-         SPARK_Mode               := Save_SM;\n-         SPARK_Mode_Pragma        := Save_SMP;\n       end if;\n \n    <<Leave>>\n       if Has_Aspects (N) then\n          Analyze_Aspect_Specifications (N, Act_Decl_Id);\n       end if;\n \n+      Ignore_SPARK_Mode_Pragmas_In_Instance := Save_ISMP;\n+      SPARK_Mode        := Save_SM;\n+      SPARK_Mode_Pragma := Save_SMP;\n+\n       if Mode_Set then\n          Restore_Ghost_Mode (Mode);\n       end if;\n@@ -5446,9 +5464,9 @@ package body Sem_Ch12 is\n             Restore_Env;\n          end if;\n \n-         Ignore_Pragma_SPARK_Mode := Save_IPSM;\n-         SPARK_Mode               := Save_SM;\n-         SPARK_Mode_Pragma        := Save_SMP;\n+         Ignore_SPARK_Mode_Pragmas_In_Instance := Save_ISMP;\n+         SPARK_Mode        := Save_SM;\n+         SPARK_Mode_Pragma := Save_SMP;\n \n          if Mode_Set then\n             Restore_Ghost_Mode (Mode);\n@@ -10847,7 +10865,8 @@ package body Sem_Ch12 is\n       Gen_Decl    : constant Node_Id    := Unit_Declaration_Node (Gen_Unit);\n       Loc         : constant Source_Ptr := Sloc (Inst_Node);\n \n-      Save_IPSM        : constant Boolean := Ignore_Pragma_SPARK_Mode;\n+      Save_ISMP        : constant Boolean :=\n+                           Ignore_SPARK_Mode_Pragmas_In_Instance;\n       Save_Style_Check : constant Boolean := Style_Check;\n \n       procedure Check_Initialized_Types;\n@@ -11009,13 +11028,16 @@ package body Sem_Ch12 is\n          Save_Env (Gen_Unit, Act_Decl_Id);\n          Style_Check := False;\n \n-         --  If the context of the instance is subject to SPARK_Mode \"off\" or\n-         --  the annotation is altogether missing, set the global flag which\n-         --  signals Analyze_Pragma to ignore all SPARK_Mode pragmas within\n-         --  the instance.\n+         --  If the context of the instance is subject to SPARK_Mode \"off\", the\n+         --  annotation is missing, or the body is instantiated at a later pass\n+         --  and its spec ignored SPARK_Mode pragma, set the global flag which\n+         --  signals Analyze_Pragma to ignore all SPARK_Mode pragmas within the\n+         --  instance.\n \n-         if SPARK_Mode /= On then\n-            Ignore_Pragma_SPARK_Mode := True;\n+         if SPARK_Mode /= On\n+           or else Ignore_SPARK_Mode_Pragmas (Act_Decl_Id)\n+         then\n+            Ignore_SPARK_Mode_Pragmas_In_Instance := True;\n          end if;\n \n          Current_Sem_Unit := Body_Info.Current_Sem_Unit;\n@@ -11186,8 +11208,6 @@ package body Sem_Ch12 is\n          end if;\n \n          Restore_Env;\n-         Ignore_Pragma_SPARK_Mode := Save_IPSM;\n-         Style_Check := Save_Style_Check;\n \n       --  If we have no body, and the unit requires a body, then complain. This\n       --  complaint is suppressed if we have detected other errors (since a\n@@ -11209,7 +11229,7 @@ package body Sem_Ch12 is\n          --  was already detected, since this can cause blowups.\n \n          else\n-            return;\n+            goto Leave;\n          end if;\n \n       --  Case of package that does not need a body\n@@ -11244,6 +11264,9 @@ package body Sem_Ch12 is\n       Expander_Mode_Restore;\n \n    <<Leave>>\n+      Ignore_SPARK_Mode_Pragmas_In_Instance := Save_ISMP;\n+      Style_Check := Save_Style_Check;\n+\n       Restore_Ghost_Mode (Mode);\n    end Instantiate_Package_Body;\n \n@@ -11269,8 +11292,9 @@ package body Sem_Ch12 is\n       Pack_Id     : constant Entity_Id  :=\n                       Defining_Unit_Name (Parent (Act_Decl));\n \n-      Saved_IPSM        : constant Boolean        := Ignore_Pragma_SPARK_Mode;\n-      Saved_Style_Check : constant Boolean        := Style_Check;\n+      Saved_ISMP        : constant Boolean :=\n+                            Ignore_SPARK_Mode_Pragmas_In_Instance;\n+      Saved_Style_Check : constant Boolean := Style_Check;\n       Saved_Warnings    : constant Warning_Record := Save_Warnings;\n \n       Act_Body    : Node_Id;\n@@ -11363,13 +11387,16 @@ package body Sem_Ch12 is\n          Save_Env (Gen_Unit, Act_Decl_Id);\n          Style_Check := False;\n \n-         --  If the context of the instance is subject to SPARK_Mode \"off\" or\n-         --  the annotation is altogether missing, set the global flag which\n-         --  signals Analyze_Pragma to ignore all SPARK_Mode pragmas within\n-         --  the instance.\n+         --  If the context of the instance is subject to SPARK_Mode \"off\", the\n+         --  annotation is missing, or the body is instantiated at a later pass\n+         --  and its spec ignored SPARK_Mode pragma, set the global flag which\n+         --  signals Analyze_Pragma to ignore all SPARK_Mode pragmas within the\n+         --  instance.\n \n-         if SPARK_Mode /= On then\n-            Ignore_Pragma_SPARK_Mode := True;\n+         if SPARK_Mode /= On\n+           or else Ignore_SPARK_Mode_Pragmas (Act_Decl_Id)\n+         then\n+            Ignore_SPARK_Mode_Pragmas_In_Instance := True;\n          end if;\n \n          Current_Sem_Unit := Body_Info.Current_Sem_Unit;\n@@ -11473,8 +11500,6 @@ package body Sem_Ch12 is\n          end if;\n \n          Restore_Env;\n-         Ignore_Pragma_SPARK_Mode := Saved_IPSM;\n-         Style_Check := Saved_Style_Check;\n          Restore_Warnings (Saved_Warnings);\n \n       --  Body not found. Error was emitted already. If there were no previous\n@@ -11549,6 +11574,9 @@ package body Sem_Ch12 is\n       Expander_Mode_Restore;\n \n    <<Leave>>\n+      Ignore_SPARK_Mode_Pragmas_In_Instance := Saved_ISMP;\n+      Style_Check := Saved_Style_Check;\n+\n       Restore_Ghost_Mode (Mode);\n    end Instantiate_Subprogram_Body;\n \n@@ -11562,12 +11590,12 @@ package body Sem_Ch12 is\n       Analyzed_Formal : Node_Id;\n       Actual_Decls    : List_Id) return List_Id\n    is\n-      Gen_T      : constant Entity_Id  := Defining_Identifier (Formal);\n       A_Gen_T    : constant Entity_Id  :=\n                      Defining_Identifier (Analyzed_Formal);\n-      Ancestor   : Entity_Id := Empty;\n       Def        : constant Node_Id    := Formal_Type_Definition (Formal);\n+      Gen_T      : constant Entity_Id  := Defining_Identifier (Formal);\n       Act_T      : Entity_Id;\n+      Ancestor   : Entity_Id := Empty;\n       Decl_Node  : Node_Id;\n       Decl_Nodes : List_Id;\n       Loc        : Source_Ptr;"}, {"sha": "5bd4a7c4ef1247a38765e77e938f67fa190bbe55", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "patch": "@@ -3298,8 +3298,9 @@ package body Sem_Ch6 is\n \n       --  Local variables\n \n-      Mode     : Ghost_Mode_Type;\n-      Mode_Set : Boolean := False;\n+      Save_ISMP : constant Boolean := Ignore_SPARK_Mode_Pragmas_In_Instance;\n+      Mode      : Ghost_Mode_Type;\n+      Mode_Set  : Boolean := False;\n \n    --  Start of processing for Analyze_Subprogram_Body_Helper\n \n@@ -3371,7 +3372,7 @@ package body Sem_Ch6 is\n \n          else\n             Enter_Name (Body_Id);\n-            return;\n+            goto Leave;\n          end if;\n \n       --  Non-generic case, find the subprogram declaration, if one was seen,\n@@ -3381,7 +3382,7 @@ package body Sem_Ch6 is\n       --  analysis.\n \n       elsif Prev_Id = Body_Id and then Has_Completion (Body_Id) then\n-         return;\n+         goto Leave;\n \n       else\n          Body_Id := Analyze_Subprogram_Specification (Body_Spec);\n@@ -3868,6 +3869,29 @@ package body Sem_Ch6 is\n          Set_SPARK_Pragma_Inherited (Body_Id);\n       end if;\n \n+      --  A subprogram body may be instantiated or inlined at a later pass.\n+      --  Restore the state of Ignore_SPARK_Mode_Pragmas_In_Instance when it\n+      --  applied to the initial declaration of the body.\n+\n+      if Present (Spec_Id) then\n+         if Ignore_SPARK_Mode_Pragmas (Spec_Id) then\n+            Ignore_SPARK_Mode_Pragmas_In_Instance := True;\n+         end if;\n+\n+      else\n+         --  Save the state of flag Ignore_SPARK_Mode_Pragmas_In_Instance in\n+         --  case the body is instantiated or inlined later and out of context.\n+         --  The body uses this attribute to restore the value of the global\n+         --  flag.\n+\n+         if Ignore_SPARK_Mode_Pragmas_In_Instance then\n+            Set_Ignore_SPARK_Mode_Pragmas (Body_Id);\n+\n+         elsif Ignore_SPARK_Mode_Pragmas (Body_Id) then\n+            Ignore_SPARK_Mode_Pragmas_In_Instance := True;\n+         end if;\n+      end if;\n+\n       --  If this is the proper body of a stub, we must verify that the stub\n       --  conforms to the body, and to the previous spec if one was present.\n       --  We know already that the body conforms to that spec. This test is\n@@ -4056,6 +4080,7 @@ package body Sem_Ch6 is\n                                 Protected_Body_Subprogram (Spec_Id);\n             Prot_Ext_Formal : Entity_Id := Extra_Formals (Spec_Id);\n             Impl_Ext_Formal : Entity_Id := Extra_Formals (Impl_Subp);\n+\n          begin\n             while Present (Prot_Ext_Formal) loop\n                pragma Assert (Present (Impl_Ext_Formal));\n@@ -4406,6 +4431,8 @@ package body Sem_Ch6 is\n       end if;\n \n    <<Leave>>\n+      Ignore_SPARK_Mode_Pragmas_In_Instance := Save_ISMP;\n+\n       if Mode_Set then\n          Restore_Ghost_Mode (Mode);\n       end if;\n@@ -4470,6 +4497,15 @@ package body Sem_Ch6 is\n          Set_SPARK_Pragma_Inherited (Designator);\n       end if;\n \n+      --  Save the state of flag Ignore_SPARK_Mode_Pragmas_In_Instance in case\n+      --  the body of this subprogram is instantiated or inlined later and out\n+      --  of context. The body uses this attribute to restore the value of the\n+      --  global flag.\n+\n+      if Ignore_SPARK_Mode_Pragmas_In_Instance then\n+         Set_Ignore_SPARK_Mode_Pragmas (Designator);\n+      end if;\n+\n       if Debug_Flag_C then\n          Write_Str (\"==> subprogram spec \");\n          Write_Name (Chars (Designator));"}, {"sha": "260f923beaef1b36a5aad0221ec555581f966925", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "patch": "@@ -539,6 +539,8 @@ package body Sem_Ch7 is\n \n       --  Local variables\n \n+      Save_ISMP : constant Boolean := Ignore_SPARK_Mode_Pragmas_In_Instance;\n+\n       Body_Id          : Entity_Id;\n       HSS              : Node_Id;\n       Last_Spec_Entity : Entity_Id;\n@@ -738,6 +740,14 @@ package body Sem_Ch7 is\n          Set_SPARK_Aux_Pragma           (Body_Id, SPARK_Mode_Pragma);\n          Set_SPARK_Pragma_Inherited     (Body_Id);\n          Set_SPARK_Aux_Pragma_Inherited (Body_Id);\n+\n+         --  A package body may be instantiated or inlined at a later pass.\n+         --  Restore the state of Ignore_SPARK_Mode_Pragmas_In_Instance when\n+         --  it applied to the package spec.\n+\n+         if Ignore_SPARK_Mode_Pragmas (Spec_Id) then\n+            Ignore_SPARK_Mode_Pragmas_In_Instance := True;\n+         end if;\n       end if;\n \n       Set_Categorization_From_Pragmas (N);\n@@ -931,6 +941,8 @@ package body Sem_Ch7 is\n          end if;\n       end if;\n \n+      Ignore_SPARK_Mode_Pragmas_In_Instance := Save_ISMP;\n+\n       Restore_Ghost_Mode (Mode);\n    end Analyze_Package_Body_Helper;\n \n@@ -969,6 +981,15 @@ package body Sem_Ch7 is\n          Set_SPARK_Aux_Pragma           (Id, SPARK_Mode_Pragma);\n          Set_SPARK_Pragma_Inherited     (Id);\n          Set_SPARK_Aux_Pragma_Inherited (Id);\n+\n+         --  Save the state of flag Ignore_SPARK_Mode_Pragmas_In_Instance in\n+         --  case the body of this package is instantiated or inlined later and\n+         --  out of context. The body uses this attribute to restore the value\n+         --  of the global flag.\n+\n+         if Ignore_SPARK_Mode_Pragmas_In_Instance then\n+            Set_Ignore_SPARK_Mode_Pragmas (Id);\n+         end if;\n       end if;\n \n       --  Analyze aspect specifications immediately, since we need to recognize"}, {"sha": "079e52a1db5217525558e8e6be0ac6b9741a4b71", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "patch": "@@ -21689,7 +21689,7 @@ package body Sem_Prag is\n             --  enclosing context has SPARK_Mode set to \"off\", the pragma has\n             --  no semantic effect.\n \n-            if Ignore_Pragma_SPARK_Mode then\n+            if Ignore_SPARK_Mode_Pragmas_In_Instance then\n                Rewrite (N, Make_Null_Statement (Loc));\n                Analyze (N);\n                return;"}, {"sha": "1cadd47af938d1a82266ed24830f224c66e43b19", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf9a473e6494aef4d6e36dfdab64b3c42bfe5958/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=cf9a473e6494aef4d6e36dfdab64b3c42bfe5958", "patch": "@@ -3622,11 +3622,21 @@ package body Sem_Util is\n       -----------------------\n \n       function SPARK_Mode_Is_Off (N : Node_Id) return Boolean is\n-         Prag : constant Node_Id := SPARK_Pragma (Defining_Entity (N));\n+         Id   : constant Entity_Id := Defining_Entity (N);\n+         Prag : constant Node_Id   := SPARK_Pragma (Id);\n \n       begin\n-         return\n-           Present (Prag) and then Get_SPARK_Mode_From_Annotation (Prag) = Off;\n+         --  Default the mode to \"off\" when the context is an instance and all\n+         --  SPARK_Mode pragmas found within are to be ignored.\n+\n+         if Ignore_SPARK_Mode_Pragmas (Id) then\n+            return True;\n+\n+         else\n+            return\n+              Present (Prag)\n+                and then Get_SPARK_Mode_From_Annotation (Prag) = Off;\n+         end if;\n       end SPARK_Mode_Is_Off;\n \n    --  Start of processing for Check_State_Refinements"}]}