{"sha": "75da268e1a563a1a52389cd2ecee12d07c45a655", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVkYTI2OGUxYTU2M2ExYTUyMzg5Y2QyZWNlZTEyZDA3YzQ1YTY1NQ==", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2019-07-04T06:48:42Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh3492@gcc.gnu.org", "date": "2019-07-04T06:48:42Z"}, "message": "re PR target/88833 ([SVE] Redundant moves for WHILELO-based loops)\n\n2019-07-04  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\n\tPR target/88833\n\t* fwprop.c (reg_single_def_p): New function.\n\t(propagate_rtx_1): Add unconditional else inside RTX_EXTRA case.\n\t(forward_propagate_into): New parameter reg_prop_only\n\twith default value false.\n\tPropagate def's src into loop only if SET_SRC and SET_DEST\n\tof def_set have single definitions.\n\tLikewise if reg_prop_only is set to true.\n\t(fwprop): New param fwprop_addr_p.\n\tIntegrate fwprop_addr into fwprop.\n\t(fwprop_addr): Remove.\n\t(pass_rtl_fwprop_addr::execute): Call fwprop with arg set\n\tto true.\n\t(pass_rtl_fwprop::execute): Call fwprop with arg set to false.\n\t* simplify-rtx.c (simplify_subreg): Add case for vector comparison.\n\t* config/i386/sse.md (UNSPEC_BLENDV): Adjust pattern.\n\ntestsuite/\n\t* gfortran.dg/pr88833.f90: New test.\n\nFrom-SVN: r273040", "tree": {"sha": "714da14dc584d3e6f3b168644f755d9a131ee1da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/714da14dc584d3e6f3b168644f755d9a131ee1da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75da268e1a563a1a52389cd2ecee12d07c45a655", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75da268e1a563a1a52389cd2ecee12d07c45a655", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75da268e1a563a1a52389cd2ecee12d07c45a655", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75da268e1a563a1a52389cd2ecee12d07c45a655/comments", "author": null, "committer": null, "parents": [{"sha": "6b150619545449f40d14acb87d636535e1e838ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b150619545449f40d14acb87d636535e1e838ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b150619545449f40d14acb87d636535e1e838ac"}], "stats": {"total": 181, "additions": 136, "deletions": 45}, "files": [{"sha": "624cf765e37c2d3a48370f0ee01e8b60bdda72ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75da268e1a563a1a52389cd2ecee12d07c45a655/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75da268e1a563a1a52389cd2ecee12d07c45a655/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75da268e1a563a1a52389cd2ecee12d07c45a655", "patch": "@@ -1,3 +1,22 @@\n+2019-07-04  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/88833\n+\t* fwprop.c (reg_single_def_p): New function.\n+\t(propagate_rtx_1): Add unconditional else inside RTX_EXTRA case.\n+\t(forward_propagate_into): New parameter reg_prop_only\n+\twith default value false.\n+\tPropagate def's src into loop only if SET_SRC and SET_DEST\n+\tof def_set have single definitions.\n+\tLikewise if reg_prop_only is set to true.\n+\t(fwprop): New param fwprop_addr_p.\n+\tIntegrate fwprop_addr into fwprop.\n+\t(fwprop_addr): Remove.\n+\t(pass_rtl_fwprop_addr::execute): Call fwprop with arg set\n+\tto true.\n+\t(pass_rtl_fwprop::execute): Call fwprop with arg set to false.\n+\t* simplify-rtx.c (simplify_subreg): Add case for vector comparison.\n+\t* config/i386/sse.md (UNSPEC_BLENDV): Adjust pattern.\n+\n 2019-07-04  Jakub Jelinek  <jakub@redhat.com>\n \n \t* omp-low.c (lower_omp_scan): Call lower_omp on stmt's body"}, {"sha": "3fa45609005acc4901c3909958ac75a75f4bcb27", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75da268e1a563a1a52389cd2ecee12d07c45a655/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75da268e1a563a1a52389cd2ecee12d07c45a655/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=75da268e1a563a1a52389cd2ecee12d07c45a655", "patch": "@@ -16784,10 +16784,9 @@\n \t(unspec:VF_128_256\n \t  [(match_operand:VF_128_256 1 \"register_operand\" \"0,0,x\")\n \t   (match_operand:VF_128_256 2 \"vector_operand\" \"YrBm,*xBm,xm\")\n-\t   (subreg:VF_128_256\n-\t     (lt:<sseintvecmode>\n-\t       (match_operand:<sseintvecmode> 3 \"register_operand\" \"Yz,Yz,x\")\n-\t       (match_operand:<sseintvecmode> 4 \"const0_operand\" \"C,C,C\")) 0)]\n+\t   (lt:VF_128_256\n+\t     (match_operand:<sseintvecmode> 3 \"register_operand\" \"Yz,Yz,x\")\n+\t     (match_operand:<sseintvecmode> 4 \"const0_operand\" \"C,C,C\"))]\n \t  UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n   \"#\""}, {"sha": "e6f37527192761fe908c65fedb2d35a90d8ee9e5", "filename": "gcc/fwprop.c", "status": "modified", "additions": 89, "deletions": 41, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75da268e1a563a1a52389cd2ecee12d07c45a655/gcc%2Ffwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75da268e1a563a1a52389cd2ecee12d07c45a655/gcc%2Ffwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.c?ref=75da268e1a563a1a52389cd2ecee12d07c45a655", "patch": "@@ -448,6 +448,18 @@ enum {\n   PR_OPTIMIZE_FOR_SPEED = 4\n };\n \n+/* Check that X has a single def.  */\n+\n+static bool\n+reg_single_def_p (rtx x)\n+{\n+  if (!REG_P (x))\n+    return false;\n+\n+  int regno = REGNO (x);\n+  return (DF_REG_DEF_COUNT (regno) == 1\n+\t  && !bitmap_bit_p (DF_LR_OUT (ENTRY_BLOCK_PTR_FOR_FN (cfun)), regno));\n+}\n \n /* Replace all occurrences of OLD in *PX with NEW and try to simplify the\n    resulting expression.  Replace *PX with a new RTL expression if an\n@@ -547,6 +559,54 @@ propagate_rtx_1 (rtx *px, rtx old_rtx, rtx new_rtx, int flags)\n \t  tem = simplify_gen_subreg (mode, op0, GET_MODE (SUBREG_REG (x)),\n \t\t\t\t     SUBREG_BYTE (x));\n \t}\n+\n+      else\n+\t{\n+\t  rtvec vec;\n+\t  rtvec newvec;\n+\t  const char *fmt = GET_RTX_FORMAT (code);\n+\t  rtx op;\n+\n+\t  for (int i = 0; fmt[i]; i++)\n+\t    switch (fmt[i])\n+\t      {\n+\t      case 'E':\n+\t\tvec = XVEC (x, i);\n+\t\tnewvec = vec;\n+\t\tfor (int j = 0; j < GET_NUM_ELEM (vec); j++)\n+\t\t  {\n+\t\t    op = RTVEC_ELT (vec, j);\n+\t\t    valid_ops &= propagate_rtx_1 (&op, old_rtx, new_rtx, flags);\n+\t\t    if (op != RTVEC_ELT (vec, j))\n+\t\t      {\n+\t\t\tif (newvec == vec)\n+\t\t\t  {\n+\t\t\t    newvec = shallow_copy_rtvec (vec);\n+\t\t\t    if (!tem)\n+\t\t\t      tem = shallow_copy_rtx (x);\n+\t\t\t    XVEC (tem, i) = newvec;\n+\t\t\t  }\n+\t\t\tRTVEC_ELT (newvec, j) = op;\n+\t\t      }\n+\t\t  }\n+\t        break;\n+\n+\t      case 'e':\n+\t\tif (XEXP (x, i))\n+\t\t  {\n+\t\t    op = XEXP (x, i);\n+\t\t    valid_ops &= propagate_rtx_1 (&op, old_rtx, new_rtx, flags);\n+\t\t    if (op != XEXP (x, i))\n+\t\t      {\n+\t\t\tif (!tem)\n+\t\t\t  tem = shallow_copy_rtx (x);\n+\t\t\tXEXP (tem, i) = op;\n+\t\t      }\n+\t\t  }\n+\t        break;\n+\t      }\n+\t}\n+\n       break;\n \n     case RTX_OBJ:\n@@ -1370,10 +1430,11 @@ forward_propagate_and_simplify (df_ref use, rtx_insn *def_insn, rtx def_set)\n \n /* Given a use USE of an insn, if it has a single reaching\n    definition, try to forward propagate it into that insn.\n-   Return true if cfg cleanup will be needed.  */\n+   Return true if cfg cleanup will be needed.\n+   REG_PROP_ONLY is true if we should only propagate register copies.  */\n \n static bool\n-forward_propagate_into (df_ref use)\n+forward_propagate_into (df_ref use, bool reg_prop_only = false)\n {\n   df_ref def;\n   rtx_insn *def_insn, *use_insn;\n@@ -1394,10 +1455,6 @@ forward_propagate_into (df_ref use)\n   if (DF_REF_IS_ARTIFICIAL (def))\n     return false;\n \n-  /* Do not propagate loop invariant definitions inside the loop.  */\n-  if (DF_REF_BB (def)->loop_father != DF_REF_BB (use)->loop_father)\n-    return false;\n-\n   /* Check if the use is still present in the insn!  */\n   use_insn = DF_REF_INSN (use);\n   if (DF_REF_FLAGS (use) & DF_REF_IN_NOTE)\n@@ -1415,6 +1472,19 @@ forward_propagate_into (df_ref use)\n   if (!def_set)\n     return false;\n \n+  if (reg_prop_only\n+      && (!reg_single_def_p (SET_SRC (def_set))\n+\t  || !reg_single_def_p (SET_DEST (def_set))))\n+    return false;\n+\n+  /* Allow propagations into a loop only for reg-to-reg copies, since\n+     replacing one register by another shouldn't increase the cost.  */\n+\n+  if (DF_REF_BB (def)->loop_father != DF_REF_BB (use)->loop_father\n+      && (!reg_single_def_p (SET_SRC (def_set))\n+\t  || !reg_single_def_p (SET_DEST (def_set))))\n+    return false;\n+\n   /* Only try one kind of propagation.  If two are possible, we'll\n      do it on the following iterations.  */\n   if (forward_propagate_and_simplify (use, def_insn, def_set)\n@@ -1483,7 +1553,7 @@ gate_fwprop (void)\n }\n \n static unsigned int\n-fwprop (void)\n+fwprop (bool fwprop_addr_p)\n {\n   unsigned i;\n \n@@ -1502,11 +1572,16 @@ fwprop (void)\n \n       df_ref use = DF_USES_GET (i);\n       if (use)\n-\tif (DF_REF_TYPE (use) == DF_REF_REG_USE\n-\t    || DF_REF_BB (use)->loop_father == NULL\n-\t    /* The outer most loop is not really a loop.  */\n-\t    || loop_outer (DF_REF_BB (use)->loop_father) == NULL)\n-\t  forward_propagate_into (use);\n+\t{\n+\t  if (DF_REF_TYPE (use) == DF_REF_REG_USE\n+\t      || DF_REF_BB (use)->loop_father == NULL\n+\t      /* The outer most loop is not really a loop.  */\n+\t      || loop_outer (DF_REF_BB (use)->loop_father) == NULL)\n+\t    forward_propagate_into (use, fwprop_addr_p);\n+\n+\t  else if (fwprop_addr_p)\n+\t    forward_propagate_into (use, false);\n+\t}\n     }\n \n   fwprop_done ();\n@@ -1537,7 +1612,7 @@ class pass_rtl_fwprop : public rtl_opt_pass\n \n   /* opt_pass methods: */\n   virtual bool gate (function *) { return gate_fwprop (); }\n-  virtual unsigned int execute (function *) { return fwprop (); }\n+  virtual unsigned int execute (function *) { return fwprop (false); }\n \n }; // class pass_rtl_fwprop\n \n@@ -1549,33 +1624,6 @@ make_pass_rtl_fwprop (gcc::context *ctxt)\n   return new pass_rtl_fwprop (ctxt);\n }\n \n-static unsigned int\n-fwprop_addr (void)\n-{\n-  unsigned i;\n-\n-  fwprop_init ();\n-\n-  /* Go through all the uses.  df_uses_create will create new ones at the\n-     end, and we'll go through them as well.  */\n-  for (i = 0; i < DF_USES_TABLE_SIZE (); i++)\n-    {\n-      if (!propagations_left)\n-\tbreak;\n-\n-      df_ref use = DF_USES_GET (i);\n-      if (use)\n-\tif (DF_REF_TYPE (use) != DF_REF_REG_USE\n-\t    && DF_REF_BB (use)->loop_father != NULL\n-\t    /* The outer most loop is not really a loop.  */\n-\t    && loop_outer (DF_REF_BB (use)->loop_father) != NULL)\n-\t  forward_propagate_into (use);\n-    }\n-\n-  fwprop_done ();\n-  return 0;\n-}\n-\n namespace {\n \n const pass_data pass_data_rtl_fwprop_addr =\n@@ -1600,7 +1648,7 @@ class pass_rtl_fwprop_addr : public rtl_opt_pass\n \n   /* opt_pass methods: */\n   virtual bool gate (function *) { return gate_fwprop (); }\n-  virtual unsigned int execute (function *) { return fwprop_addr (); }\n+  virtual unsigned int execute (function *) { return fwprop (true); }\n \n }; // class pass_rtl_fwprop_addr\n "}, {"sha": "dd2acd4eca9985b4d5b14ff8533f393433daa14c", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75da268e1a563a1a52389cd2ecee12d07c45a655/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75da268e1a563a1a52389cd2ecee12d07c45a655/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=75da268e1a563a1a52389cd2ecee12d07c45a655", "patch": "@@ -6697,6 +6697,17 @@ simplify_subreg (machine_mode outermode, rtx op,\n \t}\n     }\n \n+  /* If OP is a vector comparison and the subreg is not changing the\n+     number of elements or the size of the elements, change the result\n+     of the comparison to the new mode.  */\n+  if (COMPARISON_P (op)\n+      && VECTOR_MODE_P (outermode)\n+      && VECTOR_MODE_P (innermode)\n+      && known_eq (GET_MODE_NUNITS (outermode), GET_MODE_NUNITS (innermode))\n+      && known_eq (GET_MODE_UNIT_SIZE (outermode),\n+\t\t    GET_MODE_UNIT_SIZE (innermode)))\n+    return simplify_gen_relational (GET_CODE (op), outermode, innermode,\n+\t\t\t\t    XEXP (op, 0), XEXP (op, 1));\n   return NULL_RTX;\n }\n "}, {"sha": "5bcd7fbe6bcd4c80752cf8886f4fd6c62d8af50a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75da268e1a563a1a52389cd2ecee12d07c45a655/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75da268e1a563a1a52389cd2ecee12d07c45a655/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=75da268e1a563a1a52389cd2ecee12d07c45a655", "patch": "@@ -1,3 +1,8 @@\n+2019-07-04  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR target/88833\n+\t* gfortran.dg/pr88833.f90: New test.\n+\n 2019-07-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/91069"}, {"sha": "224e6ce5f3d53135c588b6ac0ab6ee1733eab852", "filename": "gcc/testsuite/gfortran.dg/pr88833.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75da268e1a563a1a52389cd2ecee12d07c45a655/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88833.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75da268e1a563a1a52389cd2ecee12d07c45a655/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88833.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr88833.f90?ref=75da268e1a563a1a52389cd2ecee12d07c45a655", "patch": "@@ -0,0 +1,9 @@\n+! { dg-do assemble { target aarch64_asm_sve_ok } }\n+! { dg-options \"-O3 -march=armv8.2-a+sve --save-temps\" }\n+\n+subroutine foo(x)\n+  real :: x(100)\n+  x = x + 10\n+end subroutine foo\n+\n+! { dg-final { scan-assembler {\\twhilelo\\tp[0-9]+\\.s, wzr, (w[0-9]+).*\\twhilelo\\tp[0-9]+\\.s, w[0-9]+, \\1} } }"}]}