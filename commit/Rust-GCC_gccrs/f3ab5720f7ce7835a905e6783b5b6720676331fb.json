{"sha": "f3ab5720f7ce7835a905e6783b5b6720676331fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNhYjU3MjBmN2NlNzgzNWE5MDVlNjc4M2I1YjY3MjA2NzYzMzFmYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-05-14T22:08:42Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-05-14T22:08:42Z"}, "message": "libgo: Use -fgo-pkgpath.\n\nFrom-SVN: r187485", "tree": {"sha": "b119ee23a08a92b43632e3c7e227b3862c869fba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b119ee23a08a92b43632e3c7e227b3862c869fba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3ab5720f7ce7835a905e6783b5b6720676331fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ab5720f7ce7835a905e6783b5b6720676331fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3ab5720f7ce7835a905e6783b5b6720676331fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3ab5720f7ce7835a905e6783b5b6720676331fb/comments", "author": null, "committer": null, "parents": [{"sha": "517f1b3430f929a25694d29dc787ec33e2cbd47f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/517f1b3430f929a25694d29dc787ec33e2cbd47f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/517f1b3430f929a25694d29dc787ec33e2cbd47f"}], "stats": {"total": 1003, "additions": 526, "deletions": 477}, "files": [{"sha": "e7c61f02303569418819b4ce1743359b2aab3273", "filename": "gcc/go/gofrontend/unsafe.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/gcc%2Fgo%2Fgofrontend%2Funsafe.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/gcc%2Fgo%2Fgofrontend%2Funsafe.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Funsafe.cc?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -22,8 +22,8 @@ Gogo::import_unsafe(const std::string& local_name, bool is_local_name_exported,\n   bool add_to_globals;\n   Package* package = this->add_imported_package(\"unsafe\", local_name,\n \t\t\t\t\t\tis_local_name_exported,\n-\t\t\t\t\t\t\"libgo_unsafe.unsafe\",\n-\t\t\t\t\t\tlocation, &add_to_globals);\n+\t\t\t\t\t\t\"unsafe\", location,\n+\t\t\t\t\t\t&add_to_globals);\n \n   if (package == NULL)\n     {"}, {"sha": "f48a42cbc12a7bca93426dde935e0fe8809eb1fa", "filename": "libgo/Makefile.am", "status": "modified", "additions": 170, "deletions": 168, "changes": 338, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -488,31 +488,31 @@ goc2c: goc2c.$(OBJEXT)\n \t$(CC_FOR_BUILD) $(CFLAGS_FOR_BUILD) $(LDFLAGS_FOR_BUILD) -o $@ $<\n \n malloc.c: $(srcdir)/runtime/malloc.goc goc2c\n-\t./goc2c --gcc --go-prefix libgo_runtime $< > $@.tmp\n+\t./goc2c --gcc $< > $@.tmp\n \tmv -f $@.tmp $@\n \n mprof.c: $(srcdir)/runtime/mprof.goc goc2c\n-\t./goc2c --gcc --go-prefix libgo_runtime $< > $@.tmp\n+\t./goc2c --gcc $< > $@.tmp\n \tmv -f $@.tmp $@\n \n reflect.c: $(srcdir)/runtime/reflect.goc goc2c\n-\t./goc2c --gcc --go-prefix libgo_reflect $< > $@.tmp\n+\t./goc2c --gcc $< > $@.tmp\n \tmv -f $@.tmp $@\n \n runtime1.c: $(srcdir)/runtime/runtime1.goc goc2c\n-\t./goc2c --gcc --go-prefix libgo_runtime $< > $@.tmp\n+\t./goc2c --gcc $< > $@.tmp\n \tmv -f $@.tmp $@\n \n sema.c: $(srcdir)/runtime/sema.goc goc2c\n-\t./goc2c --gcc --go-prefix libgo_sync $< > $@.tmp\n+\t./goc2c --gcc $< > $@.tmp\n \tmv -f $@.tmp $@\n \n sigqueue.c: $(srcdir)/runtime/sigqueue.goc goc2c\n-\t./goc2c --gcc --go-prefix libgo_os $< > $@.tmp\n+\t./goc2c --gcc --go-pkgpath os_signal $< > $@.tmp\n \tmv -f $@.tmp $@\n \n time.c: $(srcdir)/runtime/time.goc goc2c\n-\t./goc2c --gcc --go-prefix libgo_time $< > $@.tmp\n+\t./goc2c --gcc $< > $@.tmp\n \tmv -f $@.tmp $@\n \n %.c: $(srcdir)/runtime/%.goc goc2c\n@@ -1604,33 +1604,38 @@ os_lib_inotify_lo =\n endif\n \n libgo_go_objs = \\\n-\tbufio/bufio.lo \\\n-\tbytes/bytes.lo \\\n+\tbufio.lo \\\n+\tbytes.lo \\\n \tbytes/index.lo \\\n-\tcrypto/crypto.lo \\\n-\terrors/errors.lo \\\n-\texpvar/expvar.lo \\\n-\tflag/flag.lo \\\n-\tfmt/fmt.lo \\\n-\thash/hash.lo \\\n-\thtml/html.lo \\\n-\timage/image.lo \\\n-\tio/io.lo \\\n-\tlog/log.lo \\\n-\tmath/math.lo \\\n-\tnet/net.lo \\\n-\tos/exec.lo \\\n-\tos/os.lo \\\n-\tpath/path.lo \\\n-\treflect/reflect.lo \\\n-\tregexp/regexp.lo \\\n-\truntime/runtime.lo \\\n-\tsort/sort.lo \\\n-\tstrconv/strconv.lo \\\n-\tstrings/strings.lo \\\n-\tsync/sync.lo \\\n-\ttime/time.lo \\\n-\tunicode/unicode.lo \\\n+\tcrypto.lo \\\n+\terrors.lo \\\n+\texpvar.lo \\\n+\tflag.lo \\\n+\tfmt.lo \\\n+\thash.lo \\\n+\thtml.lo \\\n+\timage.lo \\\n+\tio.lo \\\n+\tlog.lo \\\n+\tmath.lo \\\n+\tmime.lo \\\n+\tnet.lo \\\n+\tos.lo \\\n+\tpath.lo \\\n+\treflect-go.lo \\\n+\tregexp.lo \\\n+\truntime-go.lo \\\n+\tsort.lo \\\n+\tstrconv.lo \\\n+\tstrings.lo \\\n+\tsync.lo \\\n+\tsyscall.lo \\\n+\tsyscall/errno.lo \\\n+\tsyscall/signame.lo \\\n+\tsyscall/wait.lo \\\n+\ttesting.lo \\\n+\ttime-go.lo \\\n+\tunicode.lo \\\n \tarchive/tar.lo \\\n \tarchive/zip.lo \\\n \tcompress/bzip2.lo \\\n@@ -1713,7 +1718,6 @@ libgo_go_objs = \\\n \tmath/big.lo \\\n \tmath/cmplx.lo \\\n \tmath/rand.lo \\\n-\tmime/mime.lo \\\n \tmime/multipart.lo \\\n \tnet/http.lo \\\n \tnet/mail.lo \\\n@@ -1724,6 +1728,7 @@ libgo_go_objs = \\\n \told/netchan.lo \\\n \told/regexp.lo \\\n \told/template.lo \\\n+\tos/exec.lo \\\n \t$(os_lib_inotify_lo) \\\n \tos/signal.lo \\\n \tos/user.lo \\\n@@ -1734,15 +1739,10 @@ libgo_go_objs = \\\n \truntime/pprof.lo \\\n \tsync/atomic.lo \\\n \tsync/atomic_c.lo \\\n-\tsyscall/syscall.lo \\\n-\tsyscall/errno.lo \\\n-\tsyscall/signame.lo \\\n-\tsyscall/wait.lo \\\n \ttext/scanner.lo \\\n \ttext/tabwriter.lo \\\n \ttext/template.lo \\\n \ttext/template/parse.lo \\\n-\ttesting/testing.lo \\\n \ttesting/iotest.lo \\\n \ttesting/quick.lo \\\n \tunicode/utf16.lo \\\n@@ -1780,7 +1780,7 @@ BUILDDEPS = \\\n BUILDPACKAGE = \\\n \t$(MKDIR_P) $(@D); \\\n \tfiles=`echo $^ | sed -e 's/[^ ]*\\.gox//g'`; \\\n-\t$(LTGOCOMPILE) -I . -c -fgo-prefix=\"libgo_$(@D)\" -o $@ $$files\n+\t$(LTGOCOMPILE) -I . -c -fgo-pkgpath=`echo $@ | sed -e 's/.lo$$//' -e 's/-go$$//'` -o $@ $$files\n \n if LIBGO_IS_RTEMS\n use_dejagnu = yes\n@@ -1805,12 +1805,10 @@ CHECK = \\\n \tLD_LIBRARY_PATH=`echo $${LD_LIBRARY_PATH} | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; \\\n \texport LD_LIBRARY_PATH; \\\n \trm -f $@-testsum $@-testlog; \\\n-\tprefix=`if test \"$(@D)\" = \"regexp\"; then echo regexp-test; else dirname $(@D); fi`; \\\n-\ttest \"$${prefix}\" != \".\" || prefix=\"$(@D)\"; \\\n \tif test \"$(use_dejagnu)\" = \"yes\"; then \\\n-\t  $(SHELL) $(srcdir)/testsuite/gotest --dejagnu=yes --basedir=$(srcdir) --srcdir=$(srcdir)/go/$(@D) --prefix=\"libgo_$${prefix}\" --pkgfiles=\"$(go_$(subst /,_,$(@D))_files)\" --testname=\"$(@D)\" --goarch=\"$(GOARCH)\" $(GOTESTFLAGS); \\\n+\t  $(SHELL) $(srcdir)/testsuite/gotest --dejagnu=yes --basedir=$(srcdir) --srcdir=$(srcdir)/go/$(@D) --pkgpath=\"$(@D)\" --pkgfiles=\"$(go_$(subst /,_,$(@D))_files)\" --testname=\"$(@D)\" --goarch=\"$(GOARCH)\" $(GOTESTFLAGS); \\\n \telse \\\n-\t  if $(SHELL) $(srcdir)/testsuite/gotest --basedir=$(srcdir) --srcdir=$(srcdir)/go/$(@D) --prefix=\"libgo_$${prefix}\" --pkgfiles=\"$(go_$(subst /,_,$(@D))_files)\" --goarch=\"$(GOARCH)\" $(GOTESTFLAGS) >>$@-testlog 2>&1; then \\\n+\t  if $(SHELL) $(srcdir)/testsuite/gotest --basedir=$(srcdir) --srcdir=$(srcdir)/go/$(@D) --pkgpath=\"$(@D)\" --pkgfiles=\"$(go_$(subst /,_,$(@D))_files)\" --goarch=\"$(GOARCH)\" $(GOTESTFLAGS) >>$@-testlog 2>&1; then \\\n \t    echo \"PASS: $(@D)\" >> $@-testlog; \\\n \t    echo \"PASS: $(@D)\"; \\\n \t    echo \"PASS: $(@D)\" > $@-testsum; \\\n@@ -1852,258 +1850,249 @@ CHECK_DEPS = libgo.la libgobegin.a \\\n \t$(toolexeclibgotexttemplate_DATA) \\\n \t$(toolexeclibgounicode_DATA)\n \n-@go_include@ bufio/bufio.lo.dep\n-bufio/bufio.lo.dep: $(go_bufio_files)\n+@go_include@ bufio.lo.dep\n+bufio.lo.dep: $(go_bufio_files)\n \t$(BUILDDEPS)\n-bufio/bufio.lo: $(go_bufio_files)\n+bufio.lo: $(go_bufio_files)\n \t$(BUILDPACKAGE)\n bufio/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: bufio/check\n \n-@go_include@ bytes/bytes.lo.dep\n-bytes/bytes.lo.dep: $(go_bytes_files)\n+@go_include@ bytes.lo.dep\n+bytes.lo.dep: $(go_bytes_files)\n \t$(BUILDDEPS)\n-bytes/bytes.lo: $(go_bytes_files)\n+bytes.lo: $(go_bytes_files)\n \t$(BUILDPACKAGE)\n-bytes/index.lo: $(go_bytes_c_files) bytes/bytes.lo\n+bytes/index.lo: $(go_bytes_c_files)\n+\t@$(MKDIR_P) bytes\n \t$(LTCOMPILE) -c -o bytes/index.lo $(srcdir)/go/bytes/indexbyte.c\n bytes/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: bytes/check\n \n-@go_include@ crypto/crypto.lo.dep\n-crypto/crypto.lo.dep: $(go_crypto_files)\n+@go_include@ crypto.lo.dep\n+crypto.lo.dep: $(go_crypto_files)\n \t$(BUILDDEPS)\n-crypto/crypto.lo: $(go_crypto_files)\n+crypto.lo: $(go_crypto_files)\n \t$(BUILDPACKAGE)\n crypto/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: crypto/check\n \n-@go_include@ errors/errors.lo.dep\n-errors/errors.lo.dep: $(go_errors_files)\n+@go_include@ errors.lo.dep\n+errors.lo.dep: $(go_errors_files)\n \t$(BUILDDEPS)\n-errors/errors.lo: $(go_errors_files)\n+errors.lo: $(go_errors_files)\n \t$(BUILDPACKAGE)\n errors/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: errors/check\n \n-@go_include@ expvar/expvar.lo.dep\n-expvar/expvar.lo.dep: $(go_expvar_files)\n+@go_include@ expvar.lo.dep\n+expvar.lo.dep: $(go_expvar_files)\n \t$(BUILDDEPS)\n-expvar/expvar.lo: $(go_expvar_files)\n+expvar.lo: $(go_expvar_files)\n \t$(BUILDPACKAGE)\n expvar/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: expvar/check\n \n-@go_include@ flag/flag.lo.dep\n-flag/flag.lo.dep: $(go_flag_files)\n+@go_include@ flag.lo.dep\n+flag.lo.dep: $(go_flag_files)\n \t$(BUILDDEPS)\n-flag/flag.lo: $(go_flag_files)\n+flag.lo: $(go_flag_files)\n \t$(BUILDPACKAGE)\n flag/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: flag/check\n \n-@go_include@ fmt/fmt.lo.dep\n-fmt/fmt.lo.dep: $(go_fmt_files)\n+@go_include@ fmt.lo.dep\n+fmt.lo.dep: $(go_fmt_files)\n \t$(BUILDDEPS)\n-fmt/fmt.lo: $(go_fmt_files)\n+fmt.lo: $(go_fmt_files)\n \t$(BUILDPACKAGE)\n fmt/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: fmt/check\n \n-@go_include@ hash/hash.lo.dep\n-hash/hash.lo.dep: $(go_hash_files)\n+@go_include@ hash.lo.dep\n+hash.lo.dep: $(go_hash_files)\n \t$(BUILDDEPS)\n-hash/hash.lo: $(go_hash_files)\n+hash.lo: $(go_hash_files)\n \t$(BUILDPACKAGE)\n hash/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: hash/check\n \n-@go_include@ html/html.lo.dep\n-html/html.lo.dep: $(go_html_files)\n+@go_include@ html.lo.dep\n+html.lo.dep: $(go_html_files)\n \t$(BUILDDEPS)\n-html/html.lo: $(go_html_files)\n+html.lo: $(go_html_files)\n \t$(BUILDPACKAGE)\n html/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: html/check\n \n-@go_include@ image/image.lo.dep\n-image/image.lo.dep: $(go_image_files)\n+@go_include@ image.lo.dep\n+image.lo.dep: $(go_image_files)\n \t$(BUILDDEPS)\n-image/image.lo: $(go_image_files)\n+image.lo: $(go_image_files)\n \t$(BUILDPACKAGE)\n image/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: image/check\n \n-@go_include@ io/io.lo.dep\n-io/io.lo.dep: $(go_io_files)\n+@go_include@ io.lo.dep\n+io.lo.dep: $(go_io_files)\n \t$(BUILDDEPS)\n-io/io.lo: $(go_io_files)\n+io.lo: $(go_io_files)\n \t$(BUILDPACKAGE)\n io/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: io/check\n \n-@go_include@ log/log.lo.dep\n-log/log.lo.dep: $(go_log_files)\n+@go_include@ log.lo.dep\n+log.lo.dep: $(go_log_files)\n \t$(BUILDDEPS)\n-log/log.lo: $(go_log_files)\n+log.lo: $(go_log_files)\n \t$(BUILDPACKAGE)\n log/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: log/check\n \n-@go_include@ math/math.lo.dep\n-math/math.lo.dep: $(go_math_files)\n+@go_include@ math.lo.dep\n+math.lo.dep: $(go_math_files)\n \t$(BUILDDEPS)\n-math/math.lo: $(go_math_files)\n+math.lo: $(go_math_files)\n \t$(MKDIR_P) $(@D)\n \tfiles=`echo $^ | sed -e 's/[^ ]*\\.gox//g'`; \\\n-\t$(LTGOCOMPILE) $(MATH_FLAG) -I . -c -fgo-prefix=\"libgo_$(@D)\" -o $@ $$files\n+\t$(LTGOCOMPILE) $(MATH_FLAG) -I . -c -fgo-pkgpath=math -o $@ $$files\n math/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: math/check\n \n-@go_include@ mime/mime.lo.dep\n-mime/mime.lo.dep: $(go_mime_files)\n+@go_include@ mime.lo.dep\n+mime.lo.dep: $(go_mime_files)\n \t$(BUILDDEPS)\n-mime/mime.lo: $(go_mime_files)\n+mime.lo: $(go_mime_files)\n \t$(BUILDPACKAGE)\n mime/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: mime/check\n \n-@go_include@ net/net.lo.dep\n-net/net.lo.dep: $(go_net_files)\n+@go_include@ net.lo.dep\n+net.lo.dep: $(go_net_files)\n \t$(BUILDDEPS)\n-net/net.lo: $(go_net_files)\n+net.lo: $(go_net_files)\n \t$(BUILDPACKAGE)\n net/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: net/check\n \n-@go_include@ os/os.lo.dep\n-os/os.lo.dep: $(go_os_files)\n+@go_include@ os.lo.dep\n+os.lo.dep: $(go_os_files)\n \t$(BUILDDEPS)\n-os/os.lo: $(go_os_files)\n+os.lo: $(go_os_files)\n \t$(BUILDPACKAGE)\n os/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: os/check\n \n-@go_include@ path/path.lo.dep\n-path/path.lo.dep: $(go_path_files)\n+@go_include@ path.lo.dep\n+path.lo.dep: $(go_path_files)\n \t$(BUILDDEPS)\n-path/path.lo: $(go_path_files)\n+path.lo: $(go_path_files)\n \t$(BUILDPACKAGE)\n path/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: path/check\n \n-@go_include@ reflect/reflect.lo.dep\n-reflect/reflect.lo.dep: $(go_reflect_files)\n+@go_include@ reflect-go.lo.dep\n+reflect-go.lo.dep: $(go_reflect_files)\n \t$(BUILDDEPS)\n-reflect/reflect.lo: $(go_reflect_files)\n+reflect-go.lo: $(go_reflect_files)\n \t$(BUILDPACKAGE)\n reflect/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: reflect/check\n \n-@go_include@ regexp/regexp.lo.dep\n-regexp/regexp.lo.dep: $(go_regexp_files)\n+@go_include@ regexp.lo.dep\n+regexp.lo.dep: $(go_regexp_files)\n \t$(BUILDDEPS)\n-regexp/regexp.lo: $(go_regexp_files)\n+regexp.lo: $(go_regexp_files)\n \t$(BUILDPACKAGE)\n regexp/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: regexp/check\n \n-@go_include@ runtime/runtime.lo.dep\n-runtime/runtime.lo.dep: $(go_runtime_files)\n+@go_include@ runtime-go.lo.dep\n+runtime-go.lo.dep: $(go_runtime_files)\n \t$(BUILDDEPS)\n-runtime/runtime.lo: $(go_runtime_files)\n+runtime-go.lo: $(go_runtime_files)\n \t$(BUILDPACKAGE)\n runtime/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: runtime/check\n \n-@go_include@ text/scanner.lo.dep\n-text/scanner.lo.dep: $(go_text_scanner_files)\n-\t$(BUILDDEPS)\n-text/scanner.lo: $(go_text_scanner_files)\n-\t$(BUILDPACKAGE)\n-text/scanner/check: $(CHECK_DEPS)\n-\t@$(MKDIR_P) text/scanner\n-\t@$(CHECK)\n-.PHONY: text/scanner/check\n-\n-@go_include@ sort/sort.lo.dep\n-sort/sort.lo.dep: $(go_sort_files)\n+@go_include@ sort.lo.dep\n+sort.lo.dep: $(go_sort_files)\n \t$(BUILDDEPS)\n-sort/sort.lo: $(go_sort_files)\n+sort.lo: $(go_sort_files)\n \t$(BUILDPACKAGE)\n sort/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: sort/check\n \n-@go_include@ strconv/strconv.lo.dep\n-strconv/strconv.lo.dep: $(go_strconv_files)\n+@go_include@ strconv.lo.dep\n+strconv.lo.dep: $(go_strconv_files)\n \t$(BUILDDEPS)\n-strconv/strconv.lo: $(go_strconv_files)\n+strconv.lo: $(go_strconv_files)\n \t$(BUILDPACKAGE)\n strconv/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: strconv/check\n \n-@go_include@ strings/strings.lo.dep\n-strings/strings.lo.dep: $(go_strings_files)\n+@go_include@ strings.lo.dep\n+strings.lo.dep: $(go_strings_files)\n \t$(BUILDDEPS)\n-strings/strings.lo: $(go_strings_files)\n+strings.lo: $(go_strings_files)\n \t$(BUILDPACKAGE)\n strings/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: strings/check\n \n-@go_include@ sync/sync.lo.dep\n-sync/sync.lo.dep: $(go_sync_files)\n+@go_include@ sync.lo.dep\n+sync.lo.dep: $(go_sync_files)\n \t$(BUILDDEPS)\n-sync/sync.lo: $(go_sync_files)\n+sync.lo: $(go_sync_files)\n \t$(BUILDPACKAGE)\n sync/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: sync/check\n \n-@go_include@ testing/testing.lo.dep\n-testing/testing.lo.dep: $(go_testing_files)\n+@go_include@ testing.lo.dep\n+testing.lo.dep: $(go_testing_files)\n \t$(BUILDDEPS)\n-testing/testing.lo: $(go_testing_files)\n+testing.lo: $(go_testing_files)\n \t$(BUILDPACKAGE)\n testing/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: testing/check\n \n-@go_include@ time/time.lo.dep\n-time/time.lo.dep: $(go_time_files)\n+@go_include@ time-go.lo.dep\n+time-go.lo.dep: $(go_time_files)\n \t$(BUILDDEPS)\n-time/time.lo: $(go_time_files)\n+time-go.lo: $(go_time_files)\n \t$(BUILDPACKAGE)\n time/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: time/check\n \n-@go_include@ unicode/unicode.lo.dep\n-unicode/unicode.lo.dep: $(go_unicode_files)\n+@go_include@ unicode.lo.dep\n+unicode.lo.dep: $(go_unicode_files)\n \t$(BUILDDEPS)\n-unicode/unicode.lo: $(go_unicode_files)\n+unicode.lo: $(go_unicode_files)\n \t$(BUILDPACKAGE)\n unicode/check: $(CHECK_DEPS)\n \t@$(CHECK)\n@@ -3133,6 +3122,16 @@ sync/atomic/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: sync/atomic/check\n \n+@go_include@ text/scanner.lo.dep\n+text/scanner.lo.dep: $(go_text_scanner_files)\n+\t$(BUILDDEPS)\n+text/scanner.lo: $(go_text_scanner_files)\n+\t$(BUILDPACKAGE)\n+text/scanner/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) text/scanner\n+\t@$(CHECK)\n+.PHONY: text/scanner/check\n+\n @go_include@ text/tabwriter.lo.dep\n text/tabwriter.lo.dep: $(go_text_tabwriter_files)\n \t$(BUILDDEPS)\n@@ -3202,78 +3201,81 @@ unicode/utf8/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: unicode/utf8/check\n \n-@go_include@ syscall/syscall.lo.dep\n-syscall/syscall.lo.dep: $(go_syscall_files)\n+@go_include@ syscall.lo.dep\n+syscall.lo.dep: $(go_syscall_files)\n \t$(BUILDDEPS)\n-syscall/syscall.lo: $(go_syscall_files)\n+syscall.lo: $(go_syscall_files)\n \t$(BUILDPACKAGE)\n syscall/errno.lo: go/syscall/errno.c\n+\t@$(MKDIR_P) syscall\n \t$(LTCOMPILE) -c -o $@ $<\n syscall/signame.lo: go/syscall/signame.c\n+\t@$(MKDIR_P) syscall\n \t$(LTCOMPILE) -c -o $@ $<\n syscall/wait.lo: go/syscall/wait.c\n+\t@$(MKDIR_P) syscall\n \t$(LTCOMPILE) -c -o $@ $<\n \n # How to build a .gox file from a .lo file.\n BUILDGOX = \\\n \tf=`echo $< | sed -e 's/.lo$$/.o/'`; \\\n \t$(OBJCOPY) -j .go_export $$f $@.tmp && mv -f $@.tmp $@\n \n-bufio.gox: bufio/bufio.lo\n+bufio.gox: bufio.lo\n \t$(BUILDGOX)\n-bytes.gox: bytes/bytes.lo\n+bytes.gox: bytes.lo\n \t$(BUILDGOX)\n-crypto.gox: crypto/crypto.lo\n+crypto.gox: crypto.lo\n \t$(BUILDGOX)\n-errors.gox: errors/errors.lo\n+errors.gox: errors.lo\n \t$(BUILDGOX)\n-expvar.gox: expvar/expvar.lo\n+expvar.gox: expvar.lo\n \t$(BUILDGOX)\n-flag.gox: flag/flag.lo\n+flag.gox: flag.lo\n \t$(BUILDGOX)\n-fmt.gox: fmt/fmt.lo\n+fmt.gox: fmt.lo\n \t$(BUILDGOX)\n-hash.gox: hash/hash.lo\n+hash.gox: hash.lo\n \t$(BUILDGOX)\n-html.gox: html/html.lo\n+html.gox: html.lo\n \t$(BUILDGOX)\n-image.gox: image/image.lo\n+image.gox: image.lo\n \t$(BUILDGOX)\n-io.gox: io/io.lo\n+io.gox: io.lo\n \t$(BUILDGOX)\n-log.gox: log/log.lo\n+log.gox: log.lo\n \t$(BUILDGOX)\n-math.gox: math/math.lo\n+math.gox: math.lo\n \t$(BUILDGOX)\n-mime.gox: mime/mime.lo\n+mime.gox: mime.lo\n \t$(BUILDGOX)\n-net.gox: net/net.lo\n+net.gox: net.lo\n \t$(BUILDGOX)\n-os.gox: os/os.lo\n+os.gox: os.lo\n \t$(BUILDGOX)\n-path.gox: path/path.lo\n+path.gox: path.lo\n \t$(BUILDGOX)\n-reflect.gox: reflect/reflect.lo\n+reflect.gox: reflect-go.lo\n \t$(BUILDGOX)\n-regexp.gox: regexp/regexp.lo\n+regexp.gox: regexp.lo\n \t$(BUILDGOX)\n-runtime.gox: runtime/runtime.lo\n+runtime.gox: runtime-go.lo\n \t$(BUILDGOX)\n-sort.gox: sort/sort.lo\n+sort.gox: sort.lo\n \t$(BUILDGOX)\n-strconv.gox: strconv/strconv.lo\n+strconv.gox: strconv.lo\n \t$(BUILDGOX)\n-strings.gox: strings/strings.lo\n+strings.gox: strings.lo\n \t$(BUILDGOX)\n-sync.gox: sync/sync.lo\n+sync.gox: sync.lo\n \t$(BUILDGOX)\n-syscall.gox: syscall/syscall.lo\n+syscall.gox: syscall.lo\n \t$(BUILDGOX)\n-testing.gox: testing/testing.lo\n+testing.gox: testing.lo\n \t$(BUILDGOX)\n-time.gox: time/time.lo\n+time.gox: time-go.lo\n \t$(BUILDGOX)\n-unicode.gox: unicode/unicode.lo\n+unicode.gox: unicode.lo\n \t$(BUILDGOX)\n \n archive/tar.gox: archive/tar.lo"}, {"sha": "d7a2de65e00b4a147ed67d588e9296fd43ce9a50", "filename": "libgo/Makefile.in", "status": "modified", "additions": 191, "deletions": 192, "changes": 383, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -133,21 +133,20 @@ am_libgobegin_a_OBJECTS = go-main.$(OBJEXT)\n libgobegin_a_OBJECTS = $(am_libgobegin_a_OBJECTS)\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n am__DEPENDENCIES_1 =\n-am__DEPENDENCIES_2 = bufio/bufio.lo bytes/bytes.lo bytes/index.lo \\\n-\tcrypto/crypto.lo errors/errors.lo expvar/expvar.lo \\\n-\tflag/flag.lo fmt/fmt.lo hash/hash.lo html/html.lo \\\n-\timage/image.lo io/io.lo log/log.lo math/math.lo net/net.lo \\\n-\tos/exec.lo os/os.lo path/path.lo reflect/reflect.lo \\\n-\tregexp/regexp.lo runtime/runtime.lo sort/sort.lo \\\n-\tstrconv/strconv.lo strings/strings.lo sync/sync.lo \\\n-\ttime/time.lo unicode/unicode.lo archive/tar.lo archive/zip.lo \\\n-\tcompress/bzip2.lo compress/flate.lo compress/gzip.lo \\\n-\tcompress/lzw.lo compress/zlib.lo container/heap.lo \\\n-\tcontainer/list.lo container/ring.lo crypto/aes.lo \\\n-\tcrypto/cipher.lo crypto/des.lo crypto/dsa.lo crypto/ecdsa.lo \\\n-\tcrypto/elliptic.lo crypto/hmac.lo crypto/md5.lo crypto/rand.lo \\\n-\tcrypto/rc4.lo crypto/rsa.lo crypto/sha1.lo crypto/sha256.lo \\\n-\tcrypto/sha512.lo crypto/subtle.lo crypto/tls.lo crypto/x509.lo \\\n+am__DEPENDENCIES_2 = bufio.lo bytes.lo bytes/index.lo crypto.lo \\\n+\terrors.lo expvar.lo flag.lo fmt.lo hash.lo html.lo image.lo \\\n+\tio.lo log.lo math.lo mime.lo net.lo os.lo path.lo \\\n+\treflect-go.lo regexp.lo runtime-go.lo sort.lo strconv.lo \\\n+\tstrings.lo sync.lo syscall.lo syscall/errno.lo \\\n+\tsyscall/signame.lo syscall/wait.lo testing.lo time-go.lo \\\n+\tunicode.lo archive/tar.lo archive/zip.lo compress/bzip2.lo \\\n+\tcompress/flate.lo compress/gzip.lo compress/lzw.lo \\\n+\tcompress/zlib.lo container/heap.lo container/list.lo \\\n+\tcontainer/ring.lo crypto/aes.lo crypto/cipher.lo crypto/des.lo \\\n+\tcrypto/dsa.lo crypto/ecdsa.lo crypto/elliptic.lo \\\n+\tcrypto/hmac.lo crypto/md5.lo crypto/rand.lo crypto/rc4.lo \\\n+\tcrypto/rsa.lo crypto/sha1.lo crypto/sha256.lo crypto/sha512.lo \\\n+\tcrypto/subtle.lo crypto/tls.lo crypto/x509.lo \\\n \tcrypto/x509/pkix.lo database/sql.lo database/sql/driver.lo \\\n \tdebug/dwarf.lo debug/elf.lo debug/gosym.lo debug/macho.lo \\\n \tdebug/pe.lo encoding/ascii85.lo encoding/asn1.lo \\\n@@ -163,15 +162,13 @@ am__DEPENDENCIES_2 = bufio/bufio.lo bytes/bytes.lo bytes/index.lo \\\n \timage/color.lo image/draw.lo image/gif.lo image/jpeg.lo \\\n \timage/png.lo index/suffixarray.lo io/ioutil.lo log/syslog.lo \\\n \tlog/syslog/syslog_c.lo math/big.lo math/cmplx.lo math/rand.lo \\\n-\tmime/mime.lo mime/multipart.lo net/http.lo net/mail.lo \\\n-\tnet/rpc.lo net/smtp.lo net/textproto.lo net/url.lo \\\n-\told/netchan.lo old/regexp.lo old/template.lo \\\n-\t$(am__DEPENDENCIES_1) os/signal.lo os/user.lo path/filepath.lo \\\n-\tregexp/syntax.lo net/rpc/jsonrpc.lo runtime/debug.lo \\\n-\truntime/pprof.lo sync/atomic.lo sync/atomic_c.lo \\\n-\tsyscall/syscall.lo syscall/errno.lo syscall/signame.lo \\\n-\tsyscall/wait.lo text/scanner.lo text/tabwriter.lo \\\n-\ttext/template.lo text/template/parse.lo testing/testing.lo \\\n+\tmime/multipart.lo net/http.lo net/mail.lo net/rpc.lo \\\n+\tnet/smtp.lo net/textproto.lo net/url.lo old/netchan.lo \\\n+\told/regexp.lo old/template.lo os/exec.lo $(am__DEPENDENCIES_1) \\\n+\tos/signal.lo os/user.lo path/filepath.lo regexp/syntax.lo \\\n+\tnet/rpc/jsonrpc.lo runtime/debug.lo runtime/pprof.lo \\\n+\tsync/atomic.lo sync/atomic_c.lo text/scanner.lo \\\n+\ttext/tabwriter.lo text/template.lo text/template/parse.lo \\\n \ttesting/iotest.lo testing/quick.lo unicode/utf16.lo \\\n \tunicode/utf8.lo\n libgo_la_DEPENDENCIES = $(am__DEPENDENCIES_2) $(am__DEPENDENCIES_1) \\\n@@ -1848,33 +1845,38 @@ go_syscall_c_files = \\\n # os_lib_inotify_lo = os/inotify.lo\n @LIBGO_IS_LINUX_TRUE@os_lib_inotify_lo = \n libgo_go_objs = \\\n-\tbufio/bufio.lo \\\n-\tbytes/bytes.lo \\\n+\tbufio.lo \\\n+\tbytes.lo \\\n \tbytes/index.lo \\\n-\tcrypto/crypto.lo \\\n-\terrors/errors.lo \\\n-\texpvar/expvar.lo \\\n-\tflag/flag.lo \\\n-\tfmt/fmt.lo \\\n-\thash/hash.lo \\\n-\thtml/html.lo \\\n-\timage/image.lo \\\n-\tio/io.lo \\\n-\tlog/log.lo \\\n-\tmath/math.lo \\\n-\tnet/net.lo \\\n-\tos/exec.lo \\\n-\tos/os.lo \\\n-\tpath/path.lo \\\n-\treflect/reflect.lo \\\n-\tregexp/regexp.lo \\\n-\truntime/runtime.lo \\\n-\tsort/sort.lo \\\n-\tstrconv/strconv.lo \\\n-\tstrings/strings.lo \\\n-\tsync/sync.lo \\\n-\ttime/time.lo \\\n-\tunicode/unicode.lo \\\n+\tcrypto.lo \\\n+\terrors.lo \\\n+\texpvar.lo \\\n+\tflag.lo \\\n+\tfmt.lo \\\n+\thash.lo \\\n+\thtml.lo \\\n+\timage.lo \\\n+\tio.lo \\\n+\tlog.lo \\\n+\tmath.lo \\\n+\tmime.lo \\\n+\tnet.lo \\\n+\tos.lo \\\n+\tpath.lo \\\n+\treflect-go.lo \\\n+\tregexp.lo \\\n+\truntime-go.lo \\\n+\tsort.lo \\\n+\tstrconv.lo \\\n+\tstrings.lo \\\n+\tsync.lo \\\n+\tsyscall.lo \\\n+\tsyscall/errno.lo \\\n+\tsyscall/signame.lo \\\n+\tsyscall/wait.lo \\\n+\ttesting.lo \\\n+\ttime-go.lo \\\n+\tunicode.lo \\\n \tarchive/tar.lo \\\n \tarchive/zip.lo \\\n \tcompress/bzip2.lo \\\n@@ -1957,7 +1959,6 @@ libgo_go_objs = \\\n \tmath/big.lo \\\n \tmath/cmplx.lo \\\n \tmath/rand.lo \\\n-\tmime/mime.lo \\\n \tmime/multipart.lo \\\n \tnet/http.lo \\\n \tnet/mail.lo \\\n@@ -1968,6 +1969,7 @@ libgo_go_objs = \\\n \told/netchan.lo \\\n \told/regexp.lo \\\n \told/template.lo \\\n+\tos/exec.lo \\\n \t$(os_lib_inotify_lo) \\\n \tos/signal.lo \\\n \tos/user.lo \\\n@@ -1978,15 +1980,10 @@ libgo_go_objs = \\\n \truntime/pprof.lo \\\n \tsync/atomic.lo \\\n \tsync/atomic_c.lo \\\n-\tsyscall/syscall.lo \\\n-\tsyscall/errno.lo \\\n-\tsyscall/signame.lo \\\n-\tsyscall/wait.lo \\\n \ttext/scanner.lo \\\n \ttext/tabwriter.lo \\\n \ttext/template.lo \\\n \ttext/template/parse.lo \\\n-\ttesting/testing.lo \\\n \ttesting/iotest.lo \\\n \ttesting/quick.lo \\\n \tunicode/utf16.lo \\\n@@ -2021,7 +2018,7 @@ BUILDDEPS = \\\n BUILDPACKAGE = \\\n \t$(MKDIR_P) $(@D); \\\n \tfiles=`echo $^ | sed -e 's/[^ ]*\\.gox//g'`; \\\n-\t$(LTGOCOMPILE) -I . -c -fgo-prefix=\"libgo_$(@D)\" -o $@ $$files\n+\t$(LTGOCOMPILE) -I . -c -fgo-pkgpath=`echo $@ | sed -e 's/.lo$$//' -e 's/-go$$//'` -o $@ $$files\n \n @LIBGO_IS_RTEMS_FALSE@use_dejagnu = no\n @LIBGO_IS_RTEMS_TRUE@use_dejagnu = yes\n@@ -2042,12 +2039,10 @@ CHECK = \\\n \tLD_LIBRARY_PATH=`echo $${LD_LIBRARY_PATH} | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; \\\n \texport LD_LIBRARY_PATH; \\\n \trm -f $@-testsum $@-testlog; \\\n-\tprefix=`if test \"$(@D)\" = \"regexp\"; then echo regexp-test; else dirname $(@D); fi`; \\\n-\ttest \"$${prefix}\" != \".\" || prefix=\"$(@D)\"; \\\n \tif test \"$(use_dejagnu)\" = \"yes\"; then \\\n-\t  $(SHELL) $(srcdir)/testsuite/gotest --dejagnu=yes --basedir=$(srcdir) --srcdir=$(srcdir)/go/$(@D) --prefix=\"libgo_$${prefix}\" --pkgfiles=\"$(go_$(subst /,_,$(@D))_files)\" --testname=\"$(@D)\" --goarch=\"$(GOARCH)\" $(GOTESTFLAGS); \\\n+\t  $(SHELL) $(srcdir)/testsuite/gotest --dejagnu=yes --basedir=$(srcdir) --srcdir=$(srcdir)/go/$(@D) --pkgpath=\"$(@D)\" --pkgfiles=\"$(go_$(subst /,_,$(@D))_files)\" --testname=\"$(@D)\" --goarch=\"$(GOARCH)\" $(GOTESTFLAGS); \\\n \telse \\\n-\t  if $(SHELL) $(srcdir)/testsuite/gotest --basedir=$(srcdir) --srcdir=$(srcdir)/go/$(@D) --prefix=\"libgo_$${prefix}\" --pkgfiles=\"$(go_$(subst /,_,$(@D))_files)\" --goarch=\"$(GOARCH)\" $(GOTESTFLAGS) >>$@-testlog 2>&1; then \\\n+\t  if $(SHELL) $(srcdir)/testsuite/gotest --basedir=$(srcdir) --srcdir=$(srcdir)/go/$(@D) --pkgpath=\"$(@D)\" --pkgfiles=\"$(go_$(subst /,_,$(@D))_files)\" --goarch=\"$(GOARCH)\" $(GOTESTFLAGS) >>$@-testlog 2>&1; then \\\n \t    echo \"PASS: $(@D)\" >> $@-testlog; \\\n \t    echo \"PASS: $(@D)\"; \\\n \t    echo \"PASS: $(@D)\" > $@-testsum; \\\n@@ -4315,31 +4310,31 @@ goc2c: goc2c.$(OBJEXT)\n \t$(CC_FOR_BUILD) $(CFLAGS_FOR_BUILD) $(LDFLAGS_FOR_BUILD) -o $@ $<\n \n malloc.c: $(srcdir)/runtime/malloc.goc goc2c\n-\t./goc2c --gcc --go-prefix libgo_runtime $< > $@.tmp\n+\t./goc2c --gcc $< > $@.tmp\n \tmv -f $@.tmp $@\n \n mprof.c: $(srcdir)/runtime/mprof.goc goc2c\n-\t./goc2c --gcc --go-prefix libgo_runtime $< > $@.tmp\n+\t./goc2c --gcc $< > $@.tmp\n \tmv -f $@.tmp $@\n \n reflect.c: $(srcdir)/runtime/reflect.goc goc2c\n-\t./goc2c --gcc --go-prefix libgo_reflect $< > $@.tmp\n+\t./goc2c --gcc $< > $@.tmp\n \tmv -f $@.tmp $@\n \n runtime1.c: $(srcdir)/runtime/runtime1.goc goc2c\n-\t./goc2c --gcc --go-prefix libgo_runtime $< > $@.tmp\n+\t./goc2c --gcc $< > $@.tmp\n \tmv -f $@.tmp $@\n \n sema.c: $(srcdir)/runtime/sema.goc goc2c\n-\t./goc2c --gcc --go-prefix libgo_sync $< > $@.tmp\n+\t./goc2c --gcc $< > $@.tmp\n \tmv -f $@.tmp $@\n \n sigqueue.c: $(srcdir)/runtime/sigqueue.goc goc2c\n-\t./goc2c --gcc --go-prefix libgo_os $< > $@.tmp\n+\t./goc2c --gcc --go-pkgpath os_signal $< > $@.tmp\n \tmv -f $@.tmp $@\n \n time.c: $(srcdir)/runtime/time.goc goc2c\n-\t./goc2c --gcc --go-prefix libgo_time $< > $@.tmp\n+\t./goc2c --gcc $< > $@.tmp\n \tmv -f $@.tmp $@\n \n %.c: $(srcdir)/runtime/%.goc goc2c\n@@ -4408,258 +4403,249 @@ s-epoll: Makefile\n \t$(SHELL) $(srcdir)/../move-if-change epoll.go.tmp epoll.go\n \t$(STAMP) $@\n \n-@go_include@ bufio/bufio.lo.dep\n-bufio/bufio.lo.dep: $(go_bufio_files)\n+@go_include@ bufio.lo.dep\n+bufio.lo.dep: $(go_bufio_files)\n \t$(BUILDDEPS)\n-bufio/bufio.lo: $(go_bufio_files)\n+bufio.lo: $(go_bufio_files)\n \t$(BUILDPACKAGE)\n bufio/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: bufio/check\n \n-@go_include@ bytes/bytes.lo.dep\n-bytes/bytes.lo.dep: $(go_bytes_files)\n+@go_include@ bytes.lo.dep\n+bytes.lo.dep: $(go_bytes_files)\n \t$(BUILDDEPS)\n-bytes/bytes.lo: $(go_bytes_files)\n+bytes.lo: $(go_bytes_files)\n \t$(BUILDPACKAGE)\n-bytes/index.lo: $(go_bytes_c_files) bytes/bytes.lo\n+bytes/index.lo: $(go_bytes_c_files)\n+\t@$(MKDIR_P) bytes\n \t$(LTCOMPILE) -c -o bytes/index.lo $(srcdir)/go/bytes/indexbyte.c\n bytes/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: bytes/check\n \n-@go_include@ crypto/crypto.lo.dep\n-crypto/crypto.lo.dep: $(go_crypto_files)\n+@go_include@ crypto.lo.dep\n+crypto.lo.dep: $(go_crypto_files)\n \t$(BUILDDEPS)\n-crypto/crypto.lo: $(go_crypto_files)\n+crypto.lo: $(go_crypto_files)\n \t$(BUILDPACKAGE)\n crypto/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: crypto/check\n \n-@go_include@ errors/errors.lo.dep\n-errors/errors.lo.dep: $(go_errors_files)\n+@go_include@ errors.lo.dep\n+errors.lo.dep: $(go_errors_files)\n \t$(BUILDDEPS)\n-errors/errors.lo: $(go_errors_files)\n+errors.lo: $(go_errors_files)\n \t$(BUILDPACKAGE)\n errors/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: errors/check\n \n-@go_include@ expvar/expvar.lo.dep\n-expvar/expvar.lo.dep: $(go_expvar_files)\n+@go_include@ expvar.lo.dep\n+expvar.lo.dep: $(go_expvar_files)\n \t$(BUILDDEPS)\n-expvar/expvar.lo: $(go_expvar_files)\n+expvar.lo: $(go_expvar_files)\n \t$(BUILDPACKAGE)\n expvar/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: expvar/check\n \n-@go_include@ flag/flag.lo.dep\n-flag/flag.lo.dep: $(go_flag_files)\n+@go_include@ flag.lo.dep\n+flag.lo.dep: $(go_flag_files)\n \t$(BUILDDEPS)\n-flag/flag.lo: $(go_flag_files)\n+flag.lo: $(go_flag_files)\n \t$(BUILDPACKAGE)\n flag/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: flag/check\n \n-@go_include@ fmt/fmt.lo.dep\n-fmt/fmt.lo.dep: $(go_fmt_files)\n+@go_include@ fmt.lo.dep\n+fmt.lo.dep: $(go_fmt_files)\n \t$(BUILDDEPS)\n-fmt/fmt.lo: $(go_fmt_files)\n+fmt.lo: $(go_fmt_files)\n \t$(BUILDPACKAGE)\n fmt/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: fmt/check\n \n-@go_include@ hash/hash.lo.dep\n-hash/hash.lo.dep: $(go_hash_files)\n+@go_include@ hash.lo.dep\n+hash.lo.dep: $(go_hash_files)\n \t$(BUILDDEPS)\n-hash/hash.lo: $(go_hash_files)\n+hash.lo: $(go_hash_files)\n \t$(BUILDPACKAGE)\n hash/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: hash/check\n \n-@go_include@ html/html.lo.dep\n-html/html.lo.dep: $(go_html_files)\n+@go_include@ html.lo.dep\n+html.lo.dep: $(go_html_files)\n \t$(BUILDDEPS)\n-html/html.lo: $(go_html_files)\n+html.lo: $(go_html_files)\n \t$(BUILDPACKAGE)\n html/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: html/check\n \n-@go_include@ image/image.lo.dep\n-image/image.lo.dep: $(go_image_files)\n+@go_include@ image.lo.dep\n+image.lo.dep: $(go_image_files)\n \t$(BUILDDEPS)\n-image/image.lo: $(go_image_files)\n+image.lo: $(go_image_files)\n \t$(BUILDPACKAGE)\n image/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: image/check\n \n-@go_include@ io/io.lo.dep\n-io/io.lo.dep: $(go_io_files)\n+@go_include@ io.lo.dep\n+io.lo.dep: $(go_io_files)\n \t$(BUILDDEPS)\n-io/io.lo: $(go_io_files)\n+io.lo: $(go_io_files)\n \t$(BUILDPACKAGE)\n io/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: io/check\n \n-@go_include@ log/log.lo.dep\n-log/log.lo.dep: $(go_log_files)\n+@go_include@ log.lo.dep\n+log.lo.dep: $(go_log_files)\n \t$(BUILDDEPS)\n-log/log.lo: $(go_log_files)\n+log.lo: $(go_log_files)\n \t$(BUILDPACKAGE)\n log/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: log/check\n \n-@go_include@ math/math.lo.dep\n-math/math.lo.dep: $(go_math_files)\n+@go_include@ math.lo.dep\n+math.lo.dep: $(go_math_files)\n \t$(BUILDDEPS)\n-math/math.lo: $(go_math_files)\n+math.lo: $(go_math_files)\n \t$(MKDIR_P) $(@D)\n \tfiles=`echo $^ | sed -e 's/[^ ]*\\.gox//g'`; \\\n-\t$(LTGOCOMPILE) $(MATH_FLAG) -I . -c -fgo-prefix=\"libgo_$(@D)\" -o $@ $$files\n+\t$(LTGOCOMPILE) $(MATH_FLAG) -I . -c -fgo-pkgpath=math -o $@ $$files\n math/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: math/check\n \n-@go_include@ mime/mime.lo.dep\n-mime/mime.lo.dep: $(go_mime_files)\n+@go_include@ mime.lo.dep\n+mime.lo.dep: $(go_mime_files)\n \t$(BUILDDEPS)\n-mime/mime.lo: $(go_mime_files)\n+mime.lo: $(go_mime_files)\n \t$(BUILDPACKAGE)\n mime/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: mime/check\n \n-@go_include@ net/net.lo.dep\n-net/net.lo.dep: $(go_net_files)\n+@go_include@ net.lo.dep\n+net.lo.dep: $(go_net_files)\n \t$(BUILDDEPS)\n-net/net.lo: $(go_net_files)\n+net.lo: $(go_net_files)\n \t$(BUILDPACKAGE)\n net/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: net/check\n \n-@go_include@ os/os.lo.dep\n-os/os.lo.dep: $(go_os_files)\n+@go_include@ os.lo.dep\n+os.lo.dep: $(go_os_files)\n \t$(BUILDDEPS)\n-os/os.lo: $(go_os_files)\n+os.lo: $(go_os_files)\n \t$(BUILDPACKAGE)\n os/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: os/check\n \n-@go_include@ path/path.lo.dep\n-path/path.lo.dep: $(go_path_files)\n+@go_include@ path.lo.dep\n+path.lo.dep: $(go_path_files)\n \t$(BUILDDEPS)\n-path/path.lo: $(go_path_files)\n+path.lo: $(go_path_files)\n \t$(BUILDPACKAGE)\n path/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: path/check\n \n-@go_include@ reflect/reflect.lo.dep\n-reflect/reflect.lo.dep: $(go_reflect_files)\n+@go_include@ reflect-go.lo.dep\n+reflect-go.lo.dep: $(go_reflect_files)\n \t$(BUILDDEPS)\n-reflect/reflect.lo: $(go_reflect_files)\n+reflect-go.lo: $(go_reflect_files)\n \t$(BUILDPACKAGE)\n reflect/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: reflect/check\n \n-@go_include@ regexp/regexp.lo.dep\n-regexp/regexp.lo.dep: $(go_regexp_files)\n+@go_include@ regexp.lo.dep\n+regexp.lo.dep: $(go_regexp_files)\n \t$(BUILDDEPS)\n-regexp/regexp.lo: $(go_regexp_files)\n+regexp.lo: $(go_regexp_files)\n \t$(BUILDPACKAGE)\n regexp/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: regexp/check\n \n-@go_include@ runtime/runtime.lo.dep\n-runtime/runtime.lo.dep: $(go_runtime_files)\n+@go_include@ runtime-go.lo.dep\n+runtime-go.lo.dep: $(go_runtime_files)\n \t$(BUILDDEPS)\n-runtime/runtime.lo: $(go_runtime_files)\n+runtime-go.lo: $(go_runtime_files)\n \t$(BUILDPACKAGE)\n runtime/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: runtime/check\n \n-@go_include@ text/scanner.lo.dep\n-text/scanner.lo.dep: $(go_text_scanner_files)\n-\t$(BUILDDEPS)\n-text/scanner.lo: $(go_text_scanner_files)\n-\t$(BUILDPACKAGE)\n-text/scanner/check: $(CHECK_DEPS)\n-\t@$(MKDIR_P) text/scanner\n-\t@$(CHECK)\n-.PHONY: text/scanner/check\n-\n-@go_include@ sort/sort.lo.dep\n-sort/sort.lo.dep: $(go_sort_files)\n+@go_include@ sort.lo.dep\n+sort.lo.dep: $(go_sort_files)\n \t$(BUILDDEPS)\n-sort/sort.lo: $(go_sort_files)\n+sort.lo: $(go_sort_files)\n \t$(BUILDPACKAGE)\n sort/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: sort/check\n \n-@go_include@ strconv/strconv.lo.dep\n-strconv/strconv.lo.dep: $(go_strconv_files)\n+@go_include@ strconv.lo.dep\n+strconv.lo.dep: $(go_strconv_files)\n \t$(BUILDDEPS)\n-strconv/strconv.lo: $(go_strconv_files)\n+strconv.lo: $(go_strconv_files)\n \t$(BUILDPACKAGE)\n strconv/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: strconv/check\n \n-@go_include@ strings/strings.lo.dep\n-strings/strings.lo.dep: $(go_strings_files)\n+@go_include@ strings.lo.dep\n+strings.lo.dep: $(go_strings_files)\n \t$(BUILDDEPS)\n-strings/strings.lo: $(go_strings_files)\n+strings.lo: $(go_strings_files)\n \t$(BUILDPACKAGE)\n strings/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: strings/check\n \n-@go_include@ sync/sync.lo.dep\n-sync/sync.lo.dep: $(go_sync_files)\n+@go_include@ sync.lo.dep\n+sync.lo.dep: $(go_sync_files)\n \t$(BUILDDEPS)\n-sync/sync.lo: $(go_sync_files)\n+sync.lo: $(go_sync_files)\n \t$(BUILDPACKAGE)\n sync/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: sync/check\n \n-@go_include@ testing/testing.lo.dep\n-testing/testing.lo.dep: $(go_testing_files)\n+@go_include@ testing.lo.dep\n+testing.lo.dep: $(go_testing_files)\n \t$(BUILDDEPS)\n-testing/testing.lo: $(go_testing_files)\n+testing.lo: $(go_testing_files)\n \t$(BUILDPACKAGE)\n testing/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: testing/check\n \n-@go_include@ time/time.lo.dep\n-time/time.lo.dep: $(go_time_files)\n+@go_include@ time-go.lo.dep\n+time-go.lo.dep: $(go_time_files)\n \t$(BUILDDEPS)\n-time/time.lo: $(go_time_files)\n+time-go.lo: $(go_time_files)\n \t$(BUILDPACKAGE)\n time/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: time/check\n \n-@go_include@ unicode/unicode.lo.dep\n-unicode/unicode.lo.dep: $(go_unicode_files)\n+@go_include@ unicode.lo.dep\n+unicode.lo.dep: $(go_unicode_files)\n \t$(BUILDDEPS)\n-unicode/unicode.lo: $(go_unicode_files)\n+unicode.lo: $(go_unicode_files)\n \t$(BUILDPACKAGE)\n unicode/check: $(CHECK_DEPS)\n \t@$(CHECK)\n@@ -5689,6 +5675,16 @@ sync/atomic/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: sync/atomic/check\n \n+@go_include@ text/scanner.lo.dep\n+text/scanner.lo.dep: $(go_text_scanner_files)\n+\t$(BUILDDEPS)\n+text/scanner.lo: $(go_text_scanner_files)\n+\t$(BUILDPACKAGE)\n+text/scanner/check: $(CHECK_DEPS)\n+\t@$(MKDIR_P) text/scanner\n+\t@$(CHECK)\n+.PHONY: text/scanner/check\n+\n @go_include@ text/tabwriter.lo.dep\n text/tabwriter.lo.dep: $(go_text_tabwriter_files)\n \t$(BUILDDEPS)\n@@ -5758,73 +5754,76 @@ unicode/utf8/check: $(CHECK_DEPS)\n \t@$(CHECK)\n .PHONY: unicode/utf8/check\n \n-@go_include@ syscall/syscall.lo.dep\n-syscall/syscall.lo.dep: $(go_syscall_files)\n+@go_include@ syscall.lo.dep\n+syscall.lo.dep: $(go_syscall_files)\n \t$(BUILDDEPS)\n-syscall/syscall.lo: $(go_syscall_files)\n+syscall.lo: $(go_syscall_files)\n \t$(BUILDPACKAGE)\n syscall/errno.lo: go/syscall/errno.c\n+\t@$(MKDIR_P) syscall\n \t$(LTCOMPILE) -c -o $@ $<\n syscall/signame.lo: go/syscall/signame.c\n+\t@$(MKDIR_P) syscall\n \t$(LTCOMPILE) -c -o $@ $<\n syscall/wait.lo: go/syscall/wait.c\n+\t@$(MKDIR_P) syscall\n \t$(LTCOMPILE) -c -o $@ $<\n \n-bufio.gox: bufio/bufio.lo\n+bufio.gox: bufio.lo\n \t$(BUILDGOX)\n-bytes.gox: bytes/bytes.lo\n+bytes.gox: bytes.lo\n \t$(BUILDGOX)\n-crypto.gox: crypto/crypto.lo\n+crypto.gox: crypto.lo\n \t$(BUILDGOX)\n-errors.gox: errors/errors.lo\n+errors.gox: errors.lo\n \t$(BUILDGOX)\n-expvar.gox: expvar/expvar.lo\n+expvar.gox: expvar.lo\n \t$(BUILDGOX)\n-flag.gox: flag/flag.lo\n+flag.gox: flag.lo\n \t$(BUILDGOX)\n-fmt.gox: fmt/fmt.lo\n+fmt.gox: fmt.lo\n \t$(BUILDGOX)\n-hash.gox: hash/hash.lo\n+hash.gox: hash.lo\n \t$(BUILDGOX)\n-html.gox: html/html.lo\n+html.gox: html.lo\n \t$(BUILDGOX)\n-image.gox: image/image.lo\n+image.gox: image.lo\n \t$(BUILDGOX)\n-io.gox: io/io.lo\n+io.gox: io.lo\n \t$(BUILDGOX)\n-log.gox: log/log.lo\n+log.gox: log.lo\n \t$(BUILDGOX)\n-math.gox: math/math.lo\n+math.gox: math.lo\n \t$(BUILDGOX)\n-mime.gox: mime/mime.lo\n+mime.gox: mime.lo\n \t$(BUILDGOX)\n-net.gox: net/net.lo\n+net.gox: net.lo\n \t$(BUILDGOX)\n-os.gox: os/os.lo\n+os.gox: os.lo\n \t$(BUILDGOX)\n-path.gox: path/path.lo\n+path.gox: path.lo\n \t$(BUILDGOX)\n-reflect.gox: reflect/reflect.lo\n+reflect.gox: reflect-go.lo\n \t$(BUILDGOX)\n-regexp.gox: regexp/regexp.lo\n+regexp.gox: regexp.lo\n \t$(BUILDGOX)\n-runtime.gox: runtime/runtime.lo\n+runtime.gox: runtime-go.lo\n \t$(BUILDGOX)\n-sort.gox: sort/sort.lo\n+sort.gox: sort.lo\n \t$(BUILDGOX)\n-strconv.gox: strconv/strconv.lo\n+strconv.gox: strconv.lo\n \t$(BUILDGOX)\n-strings.gox: strings/strings.lo\n+strings.gox: strings.lo\n \t$(BUILDGOX)\n-sync.gox: sync/sync.lo\n+sync.gox: sync.lo\n \t$(BUILDGOX)\n-syscall.gox: syscall/syscall.lo\n+syscall.gox: syscall.lo\n \t$(BUILDGOX)\n-testing.gox: testing/testing.lo\n+testing.gox: testing.lo\n \t$(BUILDGOX)\n-time.gox: time/time.lo\n+time.gox: time-go.lo\n \t$(BUILDGOX)\n-unicode.gox: unicode/unicode.lo\n+unicode.gox: unicode.lo\n \t$(BUILDGOX)\n \n archive/tar.gox: archive/tar.lo"}, {"sha": "8986d1056e05a0647d7289d91daaf72abdeb7a52", "filename": "libgo/go/bytes/indexbyte.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fbytes%2Findexbyte.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fbytes%2Findexbyte.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fbytes%2Findexbyte.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -13,7 +13,7 @@\n    library function, which shouldn't need much stack space.  */\n \n int IndexByte (struct __go_open_array, char)\n-  asm (\"libgo_bytes.bytes.IndexByte\")\n+  asm (\"bytes.IndexByte\")\n   __attribute__ ((no_split_stack));\n \n int\n@@ -30,7 +30,7 @@ IndexByte (struct __go_open_array s, char b)\n /* Comparison.  */\n \n _Bool Equal (struct __go_open_array a, struct __go_open_array b)\n-  asm (\"libgo_bytes.bytes.Equal\")\n+  asm (\"bytes.Equal\")\n   __attribute__ ((no_split_stack));\n \n _Bool"}, {"sha": "6f0ecfc233be4778e3fc14ba0fe5479a74225cac", "filename": "libgo/go/encoding/xml/marshal_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fencoding%2Fxml%2Fmarshal_test.go?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -726,7 +726,7 @@ var marshalErrorTests = []struct {\n \t},\n \t{\n \t\tValue: map[*Ship]bool{nil: false},\n-\t\tErr:   \"xml: unsupported type: map[*xml.Ship]bool\",\n+\t\tErr:   \"xml: unsupported type: map[*encoding/xml.Ship]bool\",\n \t\tKind:  reflect.Map,\n \t},\n \t{"}, {"sha": "6670be9a195f7815d46c88e09f3e94f906a8b097", "filename": "libgo/go/html/template/escape_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fhtml%2Ftemplate%2Fescape_test.go?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -226,7 +226,7 @@ func TestEscape(t *testing.T) {\n \t\t{\n \t\t\t\"badMarshaler\",\n \t\t\t`<button onclick='alert(1/{{.B}}in numbers)'>`,\n-\t\t\t`<button onclick='alert(1/ /* json: error calling MarshalJSON for type *template.badMarshaler: invalid character &#39;f&#39; looking for beginning of object key string */null in numbers)'>`,\n+\t\t\t`<button onclick='alert(1/ /* json: error calling MarshalJSON for type *html/template.badMarshaler: invalid character &#39;f&#39; looking for beginning of object key string */null in numbers)'>`,\n \t\t},\n \t\t{\n \t\t\t\"jsMarshaler\","}, {"sha": "e946c0adfca5f77c24d97b0234394fcce7d2baff", "filename": "libgo/go/reflect/all_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Freflect%2Fall_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Freflect%2Fall_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Freflect%2Fall_test.go?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -1383,7 +1383,7 @@ func TestImportPath(t *testing.T) {\n \t\tt    Type\n \t\tpath string\n \t}{\n-\t\t{TypeOf(&base64.Encoding{}).Elem(), \"libgo_encoding.base64\"},\n+\t\t{TypeOf(&base64.Encoding{}).Elem(), \"encoding/base64\"},\n \t\t{TypeOf(uint(0)), \"\"},\n \t\t{TypeOf(map[string]int{}), \"\"},\n \t\t{TypeOf((*error)(nil)).Elem(), \"\"},"}, {"sha": "39a28dfc322cf76907892e2bd35889abb60826de", "filename": "libgo/go/regexp/all_test.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fregexp%2Fall_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fregexp%2Fall_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fregexp%2Fall_test.go?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -2,9 +2,10 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package regexp\n+package regexp_test\n \n import (\n+\t. \"regexp\"\n \t\"strings\"\n \t\"testing\"\n )"}, {"sha": "a84bedc69d79cb8d377e7a82f2edc758a746b371", "filename": "libgo/go/regexp/exec_test.go", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fregexp%2Fexec_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fregexp%2Fexec_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fregexp%2Fexec_test.go?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -2,9 +2,11 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package regexp\n+package regexp_test\n \n import (\n+\t. \"regexp\"\n+\n \t\"bufio\"\n \t\"compress/bzip2\"\n \t\"fmt\"\n@@ -219,22 +221,22 @@ var run = []func(*Regexp, *Regexp, string) ([]int, string){\n }\n \n func runFull(re, refull *Regexp, text string) ([]int, string) {\n-\trefull.longest = false\n+\trefull.SetLongest(false)\n \treturn refull.FindStringSubmatchIndex(text), \"[full]\"\n }\n \n func runPartial(re, refull *Regexp, text string) ([]int, string) {\n-\tre.longest = false\n+\tre.SetLongest(false)\n \treturn re.FindStringSubmatchIndex(text), \"\"\n }\n \n func runFullLongest(re, refull *Regexp, text string) ([]int, string) {\n-\trefull.longest = true\n+\trefull.SetLongest(true)\n \treturn refull.FindStringSubmatchIndex(text), \"[full,longest]\"\n }\n \n func runPartialLongest(re, refull *Regexp, text string) ([]int, string) {\n-\tre.longest = true\n+\tre.SetLongest(true)\n \treturn re.FindStringSubmatchIndex(text), \"[longest]\"\n }\n \n@@ -246,22 +248,22 @@ var match = []func(*Regexp, *Regexp, string) (bool, string){\n }\n \n func matchFull(re, refull *Regexp, text string) (bool, string) {\n-\trefull.longest = false\n+\trefull.SetLongest(false)\n \treturn refull.MatchString(text), \"[full]\"\n }\n \n func matchPartial(re, refull *Regexp, text string) (bool, string) {\n-\tre.longest = false\n+\tre.SetLongest(false)\n \treturn re.MatchString(text), \"\"\n }\n \n func matchFullLongest(re, refull *Regexp, text string) (bool, string) {\n-\trefull.longest = true\n+\trefull.SetLongest(true)\n \treturn refull.MatchString(text), \"[full,longest]\"\n }\n \n func matchPartialLongest(re, refull *Regexp, text string) (bool, string) {\n-\tre.longest = true\n+\tre.SetLongest(true)\n \treturn re.MatchString(text), \"[longest]\"\n }\n \n@@ -541,7 +543,7 @@ Reading:\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tre, err := compile(pattern, syn, true)\n+\t\t\tre, err := CompileInternal(pattern, syn, true)\n \t\t\tif err != nil {\n \t\t\t\tif shouldCompile {\n \t\t\t\t\tt.Errorf(\"%s:%d: %#q did not compile\", file, lineno, pattern)"}, {"sha": "25080ad19cebe08680bf0d1fee8e144d08b5c8c2", "filename": "libgo/go/regexp/export_test.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fregexp%2Fexport_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fregexp%2Fexport_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fregexp%2Fexport_test.go?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package regexp\n+\n+import \"regexp/syntax\"\n+\n+func (re *Regexp) SetLongest(b bool) {\n+\tre.longest = b\n+}\n+\n+func CompileInternal(expr string, mode syntax.Flags, longest bool) (*Regexp, error) {\n+\treturn compile(expr, mode, longest)\n+}"}, {"sha": "25930160f84525fb118747c698e8819e54b56b86", "filename": "libgo/go/regexp/find_test.go", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fregexp%2Ffind_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fregexp%2Ffind_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fregexp%2Ffind_test.go?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -2,9 +2,11 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package regexp\n+package regexp_test\n \n import (\n+\t. \"regexp\"\n+\n \t\"fmt\"\n \t\"strings\"\n \t\"testing\""}, {"sha": "14bc7895621e3a7b429b1205899faee3cd4e8d6c", "filename": "libgo/go/sync/atomic/atomic.c", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fsync%2Fatomic%2Fatomic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fsync%2Fatomic%2Fatomic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsync%2Fatomic%2Fatomic.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -7,7 +7,7 @@\n #include <stdint.h>\n \n _Bool CompareAndSwapInt32 (int32_t *, int32_t, int32_t)\n-  asm (\"libgo_sync.atomic.CompareAndSwapInt32\");\n+  asm (\"sync_atomic.CompareAndSwapInt32\");\n \n _Bool\n CompareAndSwapInt32 (int32_t *val, int32_t old, int32_t new)\n@@ -16,7 +16,7 @@ CompareAndSwapInt32 (int32_t *val, int32_t old, int32_t new)\n }\n \n _Bool CompareAndSwapInt64 (int64_t *, int64_t, int64_t)\n-  asm (\"libgo_sync.atomic.CompareAndSwapInt64\");\n+  asm (\"sync_atomic.CompareAndSwapInt64\");\n \n _Bool\n CompareAndSwapInt64 (int64_t *val, int64_t old, int64_t new)\n@@ -25,7 +25,7 @@ CompareAndSwapInt64 (int64_t *val, int64_t old, int64_t new)\n }\n \n _Bool CompareAndSwapUint32 (uint32_t *, uint32_t, uint32_t)\n-  asm (\"libgo_sync.atomic.CompareAndSwapUint32\");\n+  asm (\"sync_atomic.CompareAndSwapUint32\");\n \n _Bool\n CompareAndSwapUint32 (uint32_t *val, uint32_t old, uint32_t new)\n@@ -34,7 +34,7 @@ CompareAndSwapUint32 (uint32_t *val, uint32_t old, uint32_t new)\n }\n \n _Bool CompareAndSwapUint64 (uint64_t *, uint64_t, uint64_t)\n-  asm (\"libgo_sync.atomic.CompareAndSwapUint64\");\n+  asm (\"sync_atomic.CompareAndSwapUint64\");\n \n _Bool\n CompareAndSwapUint64 (uint64_t *val, uint64_t old, uint64_t new)\n@@ -43,7 +43,7 @@ CompareAndSwapUint64 (uint64_t *val, uint64_t old, uint64_t new)\n }\n \n _Bool CompareAndSwapUintptr (uintptr_t *, uintptr_t, uintptr_t)\n-  asm (\"libgo_sync.atomic.CompareAndSwapUintptr\");\n+  asm (\"sync_atomic.CompareAndSwapUintptr\");\n \n _Bool\n CompareAndSwapUintptr (uintptr_t *val, uintptr_t old, uintptr_t new)\n@@ -52,7 +52,7 @@ CompareAndSwapUintptr (uintptr_t *val, uintptr_t old, uintptr_t new)\n }\n \n _Bool CompareAndSwapPointer (void **, void *, void *)\n-  asm (\"libgo_sync.atomic.CompareAndSwapPointer\");\n+  asm (\"sync_atomic.CompareAndSwapPointer\");\n \n _Bool\n CompareAndSwapPointer (void **val, void *old, void *new)\n@@ -61,7 +61,7 @@ CompareAndSwapPointer (void **val, void *old, void *new)\n }\n \n int32_t AddInt32 (int32_t *, int32_t)\n-  asm (\"libgo_sync.atomic.AddInt32\");\n+  asm (\"sync_atomic.AddInt32\");\n \n int32_t\n AddInt32 (int32_t *val, int32_t delta)\n@@ -70,7 +70,7 @@ AddInt32 (int32_t *val, int32_t delta)\n }\n \n uint32_t AddUint32 (uint32_t *, uint32_t)\n-  asm (\"libgo_sync.atomic.AddUint32\");\n+  asm (\"sync_atomic.AddUint32\");\n \n uint32_t\n AddUint32 (uint32_t *val, uint32_t delta)\n@@ -79,7 +79,7 @@ AddUint32 (uint32_t *val, uint32_t delta)\n }\n \n int64_t AddInt64 (int64_t *, int64_t)\n-  asm (\"libgo_sync.atomic.AddInt64\");\n+  asm (\"sync_atomic.AddInt64\");\n \n int64_t\n AddInt64 (int64_t *val, int64_t delta)\n@@ -88,7 +88,7 @@ AddInt64 (int64_t *val, int64_t delta)\n }\n \n uint64_t AddUint64 (uint64_t *, uint64_t)\n-  asm (\"libgo_sync.atomic.AddUint64\");\n+  asm (\"sync_atomic.AddUint64\");\n \n uint64_t\n AddUint64 (uint64_t *val, uint64_t delta)\n@@ -97,7 +97,7 @@ AddUint64 (uint64_t *val, uint64_t delta)\n }\n \n uintptr_t AddUintptr (uintptr_t *, uintptr_t)\n-  asm (\"libgo_sync.atomic.AddUintptr\");\n+  asm (\"sync_atomic.AddUintptr\");\n \n uintptr_t\n AddUintptr (uintptr_t *val, uintptr_t delta)\n@@ -106,7 +106,7 @@ AddUintptr (uintptr_t *val, uintptr_t delta)\n }\n \n int32_t LoadInt32 (int32_t *addr)\n-  asm (\"libgo_sync.atomic.LoadInt32\");\n+  asm (\"sync_atomic.LoadInt32\");\n \n int32_t\n LoadInt32 (int32_t *addr)\n@@ -120,7 +120,7 @@ LoadInt32 (int32_t *addr)\n }\n \n int64_t LoadInt64 (int64_t *addr)\n-  asm (\"libgo_sync.atomic.LoadInt64\");\n+  asm (\"sync_atomic.LoadInt64\");\n \n int64_t\n LoadInt64 (int64_t *addr)\n@@ -134,7 +134,7 @@ LoadInt64 (int64_t *addr)\n }\n \n uint32_t LoadUint32 (uint32_t *addr)\n-  asm (\"libgo_sync.atomic.LoadUint32\");\n+  asm (\"sync_atomic.LoadUint32\");\n \n uint32_t\n LoadUint32 (uint32_t *addr)\n@@ -148,7 +148,7 @@ LoadUint32 (uint32_t *addr)\n }\n \n uint64_t LoadUint64 (uint64_t *addr)\n-  asm (\"libgo_sync.atomic.LoadUint64\");\n+  asm (\"sync_atomic.LoadUint64\");\n \n uint64_t\n LoadUint64 (uint64_t *addr)\n@@ -162,7 +162,7 @@ LoadUint64 (uint64_t *addr)\n }\n \n uintptr_t LoadUintptr (uintptr_t *addr)\n-  asm (\"libgo_sync.atomic.LoadUintptr\");\n+  asm (\"sync_atomic.LoadUintptr\");\n \n uintptr_t\n LoadUintptr (uintptr_t *addr)\n@@ -176,7 +176,7 @@ LoadUintptr (uintptr_t *addr)\n }\n \n void *LoadPointer (void **addr)\n-  asm (\"libgo_sync.atomic.LoadPointer\");\n+  asm (\"sync_atomic.LoadPointer\");\n \n void *\n LoadPointer (void **addr)\n@@ -190,7 +190,7 @@ LoadPointer (void **addr)\n }\n \n void StoreInt32 (int32_t *addr, int32_t val)\n-  asm (\"libgo_sync.atomic.StoreInt32\");\n+  asm (\"sync_atomic.StoreInt32\");\n \n void\n StoreInt32 (int32_t *addr, int32_t val)\n@@ -203,7 +203,7 @@ StoreInt32 (int32_t *addr, int32_t val)\n }\n \n void StoreInt64 (int64_t *addr, int64_t val)\n-  asm (\"libgo_sync.atomic.StoreInt64\");\n+  asm (\"sync_atomic.StoreInt64\");\n \n void\n StoreInt64 (int64_t *addr, int64_t val)\n@@ -216,7 +216,7 @@ StoreInt64 (int64_t *addr, int64_t val)\n }\n \n void StoreUint32 (uint32_t *addr, uint32_t val)\n-  asm (\"libgo_sync.atomic.StoreUint32\");\n+  asm (\"sync_atomic.StoreUint32\");\n \n void\n StoreUint32 (uint32_t *addr, uint32_t val)\n@@ -229,7 +229,7 @@ StoreUint32 (uint32_t *addr, uint32_t val)\n }\n \n void StoreUint64 (uint64_t *addr, uint64_t val)\n-  asm (\"libgo_sync.atomic.StoreUint64\");\n+  asm (\"sync_atomic.StoreUint64\");\n \n void\n StoreUint64 (uint64_t *addr, uint64_t val)\n@@ -242,7 +242,7 @@ StoreUint64 (uint64_t *addr, uint64_t val)\n }\n \n void StoreUintptr (uintptr_t *addr, uintptr_t val)\n-  asm (\"libgo_sync.atomic.StoreUintptr\");\n+  asm (\"sync_atomic.StoreUintptr\");\n \n void\n StoreUintptr (uintptr_t *addr, uintptr_t val)\n@@ -255,7 +255,7 @@ StoreUintptr (uintptr_t *addr, uintptr_t val)\n }\n \n void StorePointer (void **addr, void *val)\n-  asm (\"libgo_sync.atomic.StorePointer\");\n+  asm (\"sync_atomic.StorePointer\");\n \n void\n StorePointer (void **addr, void *val)"}, {"sha": "d01f4c973d7a4660e5fe1c1953c12e68ffc64dc2", "filename": "libgo/go/syscall/errno.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fsyscall%2Ferrno.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fsyscall%2Ferrno.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Ferrno.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -10,8 +10,8 @@\n /* errno is typically a macro. These functions set \n    and get errno specific to the libc being used.  */\n \n-uintptr_t GetErrno() asm (\"libgo_syscall.syscall.GetErrno\");\n-void SetErrno(uintptr_t) asm (\"libgo_syscall.syscall.SetErrno\");\n+uintptr_t GetErrno() asm (\"syscall.GetErrno\");\n+void SetErrno(uintptr_t) asm (\"syscall.SetErrno\");\n \n uintptr_t\n GetErrno()"}, {"sha": "63422889c3345a50c50c9d79d36871b16a560023", "filename": "libgo/go/syscall/signame.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fsyscall%2Fsigname.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fsyscall%2Fsigname.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsigname.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -11,7 +11,7 @@\n #include \"arch.h\"\n #include \"malloc.h\"\n \n-String Signame (int sig) asm (\"libgo_syscall.syscall.Signame\");\n+String Signame (int sig) asm (\"syscall.Signame\");\n \n String\n Signame (int sig)"}, {"sha": "98ad245c2c4cfdb7a83c4acbf8867af24246a684", "filename": "libgo/go/syscall/wait.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fsyscall%2Fwait.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fgo%2Fsyscall%2Fwait.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fwait.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -11,7 +11,7 @@\n #include <sys/wait.h>\n \n extern _Bool Exited (uint32_t *w)\n-  __asm__ (\"libgo_syscall.syscall.Exited.N32_libgo_syscall.syscall.WaitStatus\");\n+  __asm__ (\"syscall.Exited.N18_syscall.WaitStatus\");\n \n _Bool\n Exited (uint32_t *w)\n@@ -20,7 +20,7 @@ Exited (uint32_t *w)\n }\n \n extern _Bool Signaled (uint32_t *w)\n-  __asm__ (\"libgo_syscall.syscall.Signaled.N32_libgo_syscall.syscall.WaitStatus\");\n+  __asm__ (\"syscall.Signaled.N18_syscall.WaitStatus\");\n \n _Bool\n Signaled (uint32_t *w)\n@@ -29,7 +29,7 @@ Signaled (uint32_t *w)\n }\n \n extern _Bool Stopped (uint32_t *w)\n-  __asm__ (\"libgo_syscall.syscall.Stopped.N32_libgo_syscall.syscall.WaitStatus\");\n+  __asm__ (\"syscall.Stopped.N18_syscall.WaitStatus\");\n \n _Bool\n Stopped (uint32_t *w)\n@@ -38,7 +38,7 @@ Stopped (uint32_t *w)\n }\n \n extern _Bool Continued (uint32_t *w)\n-  __asm__ (\"libgo_syscall.syscall.Continued.N32_libgo_syscall.syscall.WaitStatus\");\n+  __asm__ (\"syscall.Continued.N18_syscall.WaitStatus\");\n \n _Bool\n Continued (uint32_t *w)\n@@ -47,7 +47,7 @@ Continued (uint32_t *w)\n }\n \n extern _Bool CoreDump (uint32_t *w)\n-  __asm__ (\"libgo_syscall.syscall.CoreDump.N32_libgo_syscall.syscall.WaitStatus\");\n+  __asm__ (\"syscall.CoreDump.N18_syscall.WaitStatus\");\n \n _Bool\n CoreDump (uint32_t *w)\n@@ -56,7 +56,7 @@ CoreDump (uint32_t *w)\n }\n \n extern int ExitStatus (uint32_t *w)\n-  __asm__ (\"libgo_syscall.syscall.ExitStatus.N32_libgo_syscall.syscall.WaitStatus\");\n+  __asm__ (\"syscall.ExitStatus.N18_syscall.WaitStatus\");\n \n int\n ExitStatus (uint32_t *w)\n@@ -67,7 +67,7 @@ ExitStatus (uint32_t *w)\n }\n \n extern int Signal (uint32_t *w)\n-  __asm__ (\"libgo_syscall.syscall.Signal.N32_libgo_syscall.syscall.WaitStatus\");\n+  __asm__ (\"syscall.Signal.N18_syscall.WaitStatus\");\n \n int\n Signal (uint32_t *w)\n@@ -78,7 +78,7 @@ Signal (uint32_t *w)\n }\n \n extern int StopSignal (uint32_t *w)\n-  __asm__ (\"libgo_syscall.syscall.StopSignal.N32_libgo_syscall.syscall.WaitStatus\");\n+  __asm__ (\"syscall.StopSignal.N18_syscall.WaitStatus\");\n \n int\n StopSignal (uint32_t *w)\n@@ -89,7 +89,7 @@ StopSignal (uint32_t *w)\n }\n \n extern int TrapCause (uint32_t *w)\n-  __asm__ (\"libgo_syscall.syscall.TrapCause.N32_libgo_syscall.syscall.WaitStatus\");\n+  __asm__ (\"syscall.TrapCause.N18_syscall.WaitStatus\");\n \n int\n TrapCause (uint32_t *w __attribute__ ((unused)))"}, {"sha": "7cf307f03783b3405716834a6a8b8cecc6eb55c5", "filename": "libgo/runtime/chan.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fchan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fchan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fchan.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -109,7 +109,7 @@ runtime_makechan_c(ChanType *t, int64 hint)\n // For reflect\n //\tfunc makechan(typ *ChanType, size uint32) (chan)\n uintptr reflect_makechan(ChanType *, uint32)\n-  asm (\"libgo_reflect.reflect.makechan\");\n+  asm (\"reflect.makechan\");\n \n uintptr\n reflect_makechan(ChanType *t, uint32 size)\n@@ -568,7 +568,7 @@ runtime_selectnbrecv2(ChanType *t, byte *v, _Bool *received, Hchan *c)\n // the actual data if it fits, or else a pointer to the data.\n \n _Bool reflect_chansend(ChanType *, Hchan *, uintptr, _Bool)\n-  __asm__(\"libgo_reflect.reflect.chansend\");\n+  __asm__(\"reflect.chansend\");\n \n _Bool\n reflect_chansend(ChanType *t, Hchan *c, uintptr val, _Bool nb)\n@@ -605,7 +605,7 @@ struct chanrecv_ret\n };\n \n struct chanrecv_ret reflect_chanrecv(ChanType *, Hchan *, _Bool)\n-  __asm__(\"libgo_reflect.reflect.chanrecv\");\n+  __asm__(\"reflect.chanrecv\");\n \n struct chanrecv_ret\n reflect_chanrecv(ChanType *t, Hchan *c, _Bool nb)\n@@ -1161,7 +1161,7 @@ __go_builtin_close(Hchan *c)\n // For reflect\n //\tfunc chanclose(c chan)\n \n-void reflect_chanclose(uintptr) __asm__(\"libgo_reflect.reflect.chanclose\");\n+void reflect_chanclose(uintptr) __asm__(\"reflect.chanclose\");\n \n void\n reflect_chanclose(uintptr c)\n@@ -1172,7 +1172,7 @@ reflect_chanclose(uintptr c)\n // For reflect\n //\tfunc chanlen(c chan) (len int32)\n \n-int32 reflect_chanlen(uintptr) __asm__(\"libgo_reflect.reflect.chanlen\");\n+int32 reflect_chanlen(uintptr) __asm__(\"reflect.chanlen\");\n \n int32\n reflect_chanlen(uintptr ca)\n@@ -1197,7 +1197,7 @@ __go_chan_len(Hchan *c)\n // For reflect\n //\tfunc chancap(c chan) (cap int32)\n \n-int32 reflect_chancap(uintptr) __asm__(\"libgo_reflect.reflect.chancap\");\n+int32 reflect_chancap(uintptr) __asm__(\"reflect.chancap\");\n \n int32\n reflect_chancap(uintptr ca)"}, {"sha": "252948d66597cc2d604b5cf6e8401b82b582f437", "filename": "libgo/runtime/cpuprof.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fcpuprof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fcpuprof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fcpuprof.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -122,7 +122,7 @@ static void LostProfileData(void) {\n }\n \n extern void runtime_SetCPUProfileRate(int32)\n-     __asm__(\"libgo_runtime.runtime.SetCPUProfileRate\");\n+     __asm__(\"runtime.SetCPUProfileRate\");\n \n // SetCPUProfileRate sets the CPU profiling rate.\n // The user documentation is in debug.go.\n@@ -422,7 +422,7 @@ getprofile(Profile *p)\n }\n \n extern Slice runtime_CPUProfile(void)\n-     __asm__(\"libgo_runtime.runtime.CPUProfile\");\n+     __asm__(\"runtime.CPUProfile\");\n \n // CPUProfile returns the next cpu profile block as a []byte.\n // The user documentation is in debug.go."}, {"sha": "5eebe188bbe7152500c1e70c3d49f4a30058ba2d", "filename": "libgo/runtime/go-breakpoint.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-breakpoint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-breakpoint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-breakpoint.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -6,7 +6,7 @@\n \n #include <sched.h>\n \n-void Breakpoint (void) asm (\"libgo_runtime.runtime.Breakpoint\");\n+void Breakpoint (void) asm (\"runtime.Breakpoint\");\n \n void\n Breakpoint (void)"}, {"sha": "dda396054c39fa9f37358a056cc33ef01e281aca", "filename": "libgo/runtime/go-caller.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-caller.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-caller.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-caller.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -36,7 +36,7 @@ static symvalfn_type symvalfn;\n    function/file/line information.  */\n \n void RegisterDebugLookup (infofn_type, symvalfn_type)\n-  __asm__ (\"libgo_runtime.runtime.RegisterDebugLookup\");\n+  __asm__ (\"runtime.RegisterDebugLookup\");\n \n void\n RegisterDebugLookup (infofn_type pi, symvalfn_type ps)\n@@ -76,9 +76,9 @@ struct caller_ret\n   _Bool ok;\n };\n \n-struct caller_ret Caller (int n) asm (\"libgo_runtime.runtime.Caller\");\n+struct caller_ret Caller (int n) asm (\"runtime.Caller\");\n \n-Func *FuncForPC (uintptr_t) asm (\"libgo_runtime.runtime.FuncForPC\");\n+Func *FuncForPC (uintptr_t) asm (\"runtime.FuncForPC\");\n \n /* Implement runtime.Caller.  */\n \n@@ -132,7 +132,7 @@ struct funcline_go_return\n \n struct funcline_go_return\n runtime_funcline_go (Func *f, uintptr targetpc)\n-  __asm__ (\"libgo_runtime.runtime.funcline_go\");\n+  __asm__ (\"runtime.funcline_go\");\n \n struct funcline_go_return\n runtime_funcline_go (Func *f __attribute__((unused)), uintptr targetpc)"}, {"sha": "2d8fce73de4c39b675c0606fde1183b6895521d7", "filename": "libgo/runtime/go-callers.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-callers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-callers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-callers.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -67,7 +67,7 @@ runtime_callers (int32 skip, uintptr *pcbuf, int32 m)\n }\n \n int Callers (int, struct __go_open_array)\n-  __asm__ (\"libgo_runtime.runtime.Callers\");\n+  __asm__ (\"runtime.Callers\");\n \n int\n Callers (int skip, struct __go_open_array pc)"}, {"sha": "1db4afe30a96d15efdd1ed1c886a2a14e84d5f98", "filename": "libgo/runtime/go-getgoroot.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-getgoroot.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-getgoroot.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-getgoroot.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -8,7 +8,7 @@\n \n #include \"go-string.h\"\n \n-struct __go_string getgoroot (void) asm (\"libgo_runtime.runtime.getgoroot\");\n+struct __go_string getgoroot (void) asm (\"runtime.getgoroot\");\n \n struct __go_string\n getgoroot ()"}, {"sha": "ede4493b8f3afbb9cfd436c8bb828890d30b408f", "filename": "libgo/runtime/go-now.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-now.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-now.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-now.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -15,7 +15,7 @@ struct time_now_ret\n };\n \n struct time_now_ret now()\n-  __asm__ (\"libgo_time.time.now\")\n+  __asm__ (\"time.now\")\n   __attribute__ ((no_split_stack));\n \n struct time_now_ret"}, {"sha": "7ef632cfe133a647bca4729e5db10d406d8294db", "filename": "libgo/runtime/go-reflect-map.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-reflect-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-reflect-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-reflect-map.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -24,7 +24,7 @@ struct mapaccess_ret\n \n extern struct mapaccess_ret mapaccess (struct __go_map_type *, uintptr_t,\n \t\t\t\t       uintptr_t)\n-  asm (\"libgo_reflect.reflect.mapaccess\");\n+  asm (\"reflect.mapaccess\");\n \n struct mapaccess_ret\n mapaccess (struct __go_map_type *mt, uintptr_t m, uintptr_t key_i)\n@@ -77,7 +77,7 @@ mapaccess (struct __go_map_type *mt, uintptr_t m, uintptr_t key_i)\n \n extern void mapassign (struct __go_map_type *, uintptr_t, uintptr_t,\n \t\t       uintptr_t, _Bool)\n-  asm (\"libgo_reflect.reflect.mapassign\");\n+  asm (\"reflect.mapassign\");\n \n void\n mapassign (struct __go_map_type *mt, uintptr_t m, uintptr_t key_i,\n@@ -118,7 +118,7 @@ mapassign (struct __go_map_type *mt, uintptr_t m, uintptr_t key_i,\n }\n \n extern int32_t maplen (uintptr_t)\n-  asm (\"libgo_reflect.reflect.maplen\");\n+  asm (\"reflect.maplen\");\n \n int32_t\n maplen (uintptr_t m)\n@@ -131,7 +131,7 @@ maplen (uintptr_t m)\n }\n \n extern unsigned char *mapiterinit (struct __go_map_type *, uintptr_t)\n-  asm (\"libgo_reflect.reflect.mapiterinit\");\n+  asm (\"reflect.mapiterinit\");\n \n unsigned char *\n mapiterinit (struct __go_map_type *mt, uintptr_t m)\n@@ -145,7 +145,7 @@ mapiterinit (struct __go_map_type *mt, uintptr_t m)\n }\n \n extern void mapiternext (unsigned char *)\n-  asm (\"libgo_reflect.reflect.mapiternext\");\n+  asm (\"reflect.mapiternext\");\n \n void\n mapiternext (unsigned char *it)\n@@ -160,7 +160,7 @@ struct mapiterkey_ret\n };\n \n extern struct mapiterkey_ret mapiterkey (unsigned char *)\n-  asm (\"libgo_reflect.reflect.mapiterkey\");\n+  asm (\"reflect.mapiterkey\");\n \n struct mapiterkey_ret\n mapiterkey (unsigned char *ita)\n@@ -203,7 +203,7 @@ mapiterkey (unsigned char *ita)\n /* Make a new map.  We have to build our own map descriptor.  */\n \n extern uintptr_t makemap (const struct __go_map_type *)\n-  asm (\"libgo_reflect.reflect.makemap\");\n+  asm (\"reflect.makemap\");\n \n uintptr_t\n makemap (const struct __go_map_type *t)"}, {"sha": "789ffdf4987f5c7250dfaafd4f984fee5de6a6be", "filename": "libgo/runtime/go-setenv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-setenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-setenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-setenv.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -15,7 +15,7 @@\n /* Set the C environment from Go.  This is called by syscall.Setenv.  */\n \n void setenv_c (struct __go_string, struct __go_string)\n-  __asm__ (\"libgo_syscall.syscall.setenv_c\");\n+  __asm__ (\"syscall.setenv_c\");\n \n void\n setenv_c (struct __go_string k, struct __go_string v)"}, {"sha": "abe78c44ea822993c9d5d91bc9035cf504c8f0c0", "filename": "libgo/runtime/go-signal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-signal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-signal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-signal.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -408,7 +408,7 @@ runtime_setsig (int32 i, bool def __attribute__ ((unused)), bool restart)\n \n /* Used by the os package to raise SIGPIPE.  */\n \n-void os_sigpipe (void) __asm__ (\"libgo_os.os.sigpipe\");\n+void os_sigpipe (void) __asm__ (\"os.sigpipe\");\n \n void\n os_sigpipe (void)"}, {"sha": "d40c6ad1b9860c194512faa4594b6c83f4885188", "filename": "libgo/runtime/go-typestring.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-typestring.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-typestring.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-typestring.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -9,7 +9,7 @@\n #include \"go-string.h\"\n \n struct __go_string typestring(struct __go_empty_interface)\n-  asm (\"libgo_runtime.runtime.typestring\");\n+  asm (\"runtime.typestring\");\n \n struct __go_string\n typestring (struct __go_empty_interface e)"}, {"sha": "a75c3884eed56d3cb83e152b0cf826877a7af226", "filename": "libgo/runtime/go-unsafe-new.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-unsafe-new.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-unsafe-new.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unsafe-new.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -12,7 +12,7 @@\n /* Implement unsafe_New, called from the reflect package.  */\n \n void *unsafe_New (struct __go_empty_interface type)\n-  asm (\"libgo_reflect.reflect.unsafe_New\");\n+  asm (\"reflect.unsafe_New\");\n \n /* The dynamic type of the argument will be a pointer to a type\n    descriptor.  */"}, {"sha": "67399eac88c8ce9e94bbc8f372fe86aca24eaa20", "filename": "libgo/runtime/go-unsafe-newarray.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-unsafe-newarray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-unsafe-newarray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unsafe-newarray.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -12,7 +12,7 @@\n /* Implement unsafe_NewArray, called from the reflect package.  */\n \n void *unsafe_NewArray (struct __go_empty_interface type, int n)\n-  asm (\"libgo_reflect.reflect.unsafe_NewArray\");\n+  asm (\"reflect.unsafe_NewArray\");\n \n /* The dynamic type of the argument will be a pointer to a type\n    descriptor.  */"}, {"sha": "cda59361327e8a709581ce627c263fbf3c9249ca", "filename": "libgo/runtime/go-unsafe-pointer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-unsafe-pointer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgo-unsafe-pointer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-unsafe-pointer.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -15,7 +15,7 @@\n    descriptor.  */\n \n extern const struct __go_type_descriptor unsafe_Pointer\n-  asm (\"__go_tdn_libgo_unsafe.unsafe.Pointer\");\n+  asm (\"__go_tdn_unsafe.Pointer\");\n \n /* Used to determine the field alignment.  */\n struct field_align\n@@ -61,7 +61,7 @@ const struct __go_type_descriptor unsafe_Pointer =\n    it to be defined elsewhere.  */\n \n extern const struct __go_ptr_type pointer_unsafe_Pointer\n-  asm (\"__go_td_pN27_libgo_unsafe.unsafe.Pointer\");\n+  asm (\"__go_td_pN14_unsafe.Pointer\");\n \n /* The reflection string.  */\n #define PREFLECTION \"*unsafe.Pointer\""}, {"sha": "55c6d9b2dc43c26e475eb6f62a7c198870637827", "filename": "libgo/runtime/goc2c.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgoc2c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fgoc2c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgoc2c.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -33,6 +33,9 @@\n /* Whether we're emitting for gcc */\n static int gcc;\n \n+/* Package path to use; only meaningful for gcc */\n+static const char *pkgpath;\n+\n /* Package prefix to use; only meaningful for gcc */\n static const char *prefix;\n \n@@ -579,9 +582,13 @@ write_gcc_func_header(char *package, char *name, struct params *params,\n \tfirst = 1;\n \twrite_params(params, &first);\n \tprintf(\") asm (\\\"\");\n-\tif (prefix != NULL)\n-\t  printf(\"%s.\", prefix);\n-\tprintf(\"%s.%s\\\");\\n\", package, name);\n+\tif (pkgpath != NULL)\n+\t  printf(\"%s\", pkgpath);\n+\telse if (prefix != NULL)\n+\t  printf(\"%s.%s\", prefix, package);\n+\telse\n+\t  printf(\"%s\", package);\n+\tprintf(\".%s\\\");\\n\", name);\n \twrite_gcc_return_type(package, name, rets);\n \tprintf(\" %s_%s(\", package, name);\n \tfirst = 1;\n@@ -724,7 +731,7 @@ process_file(void)\n static void\n usage(void)\n {\n-\tsysfatal(\"Usage: goc2c [--6g | --gc] [--go-prefix PREFIX] [file]\\n\");\n+\tsysfatal(\"Usage: goc2c [--6g | --gc] [--go-pkgpath PKGPATH] [--go-prefix PREFIX] [file]\\n\");\n }\n \n void\n@@ -740,7 +747,11 @@ main(int argc, char **argv)\n \t\t\tgcc = 0;\n \t\telse if(strcmp(argv[1], \"--gcc\") == 0)\n \t\t\tgcc = 1;\n-\t\telse if (strcmp(argv[1], \"--go-prefix\") == 0 && argc > 2) {\n+\t\telse if (strcmp(argv[1], \"--go-pkgpath\") == 0 && argc > 2) {\n+\t\t\tpkgpath = argv[2];\n+\t\t\targc--;\n+\t\t\targv++;\n+\t\t} else if (strcmp(argv[1], \"--go-prefix\") == 0 && argc > 2) {\n \t\t\tprefix = argv[2];\n \t\t\targc--;\n \t\t\targv++;"}, {"sha": "ae5e15fa9dd3639ac06336ec2390967e704c23b9", "filename": "libgo/runtime/malloc.goc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fmalloc.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fmalloc.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmalloc.goc?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -23,7 +23,7 @@ MHeap runtime_mheap;\n extern MStats mstats;\t// defined in extern.go\n \n extern volatile int32 runtime_MemProfileRate\n-  __asm__ (\"libgo_runtime.runtime.MemProfileRate\");\n+  __asm__ (\"runtime.MemProfileRate\");\n \n // Allocate an object of at least size bytes.\n // Small objects are allocated from the per-thread cache's free lists.\n@@ -266,7 +266,7 @@ runtime_purgecachedstats(M* m)\n }\n \n extern uintptr runtime_sizeof_C_MStats\n-  __asm__ (\"libgo_runtime.runtime.Sizeof_C_MStats\");\n+  __asm__ (\"runtime.Sizeof_C_MStats\");\n \n #define MaxArena32 (2U<<30)\n "}, {"sha": "16bb449f128b812041f94b8b321dbc98c26bc17b", "filename": "libgo/runtime/malloc.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fmalloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fmalloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmalloc.h?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -237,7 +237,7 @@ struct MStats\n };\n \n extern MStats mstats\n-  __asm__ (\"libgo_runtime.runtime.VmemStats\");\n+  __asm__ (\"runtime.VmemStats\");\n \n \n // Size classes.  Computed and initialized by InitSizes."}, {"sha": "c08d5c1548edaef5020fcc6d6fe3ba623bb987b6", "filename": "libgo/runtime/mgc0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fmgc0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fmgc0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmgc0.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -1078,7 +1078,7 @@ runtime_gc(int32 force)\n }\n \n void runtime_ReadMemStats(MStats *)\n-  __asm__(\"libgo_runtime.runtime.ReadMemStats\");\n+  __asm__(\"runtime.ReadMemStats\");\n \n void\n runtime_ReadMemStats(MStats *stats)"}, {"sha": "eabd5e82664849255fd5c55430a93a87c4092854", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -1300,7 +1300,7 @@ runtime_malg(int32 stacksize, byte** ret_stack, size_t* ret_stacksize)\n /* For runtime package testing.  */\n \n void runtime_testing_entersyscall(void)\n-  __asm__(\"libgo_runtime.runtime.entersyscall\");\n+  __asm__(\"runtime.entersyscall\");\n \n void\n runtime_testing_entersyscall()\n@@ -1309,7 +1309,7 @@ runtime_testing_entersyscall()\n }\n \n void runtime_testing_exitsyscall(void)\n-  __asm__(\"libgo_runtime.runtime.exitsyscall\");\n+  __asm__(\"runtime.exitsyscall\");\n \n void\n runtime_testing_exitsyscall()\n@@ -1416,7 +1416,7 @@ rundefer(void)\n \t}\n }\n \n-void runtime_Goexit (void) asm (\"libgo_runtime.runtime.Goexit\");\n+void runtime_Goexit (void) asm (\"runtime.Goexit\");\n \n void\n runtime_Goexit(void)\n@@ -1425,7 +1425,7 @@ runtime_Goexit(void)\n \truntime_goexit();\n }\n \n-void runtime_Gosched (void) asm (\"libgo_runtime.runtime.Gosched\");\n+void runtime_Gosched (void) asm (\"runtime.Gosched\");\n \n void\n runtime_Gosched(void)\n@@ -1504,7 +1504,7 @@ runtime_lockedOSThread(void)\n // for testing of callbacks\n \n _Bool runtime_golockedOSThread(void)\n-  asm(\"libgo_runtime.runtime.golockedOSThread\");\n+  asm(\"runtime.golockedOSThread\");\n \n _Bool\n runtime_golockedOSThread(void)\n@@ -1520,7 +1520,7 @@ runtime_mid()\n }\n \n int32 runtime_NumGoroutine (void)\n-  __asm__ (\"libgo_runtime.runtime.NumGoroutine\");\n+  __asm__ (\"runtime.NumGoroutine\");\n \n int32\n runtime_NumGoroutine()"}, {"sha": "c8443cbed9901198bd6dcc973e7c3443c0b346af", "filename": "libgo/runtime/runtime.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fruntime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fruntime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.c?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -86,8 +86,8 @@ runtime_panicstring(const char *s)\n static int32\targc;\n static byte**\targv;\n \n-extern Slice os_Args asm (\"libgo_os.os.Args\");\n-extern Slice syscall_Envs asm (\"libgo_syscall.syscall.Envs\");\n+extern Slice os_Args asm (\"os.Args\");\n+extern Slice syscall_Envs asm (\"syscall.Envs\");\n \n void\n runtime_args(int32 c, byte **v)"}, {"sha": "3e75b1583b8c72ebe3fad66f64712748985bb4e8", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -298,8 +298,8 @@ void\truntime_gosched(void);\n void\truntime_tsleep(int64);\n M*\truntime_newm(void);\n void\truntime_goexit(void);\n-void\truntime_entersyscall(void) __asm__(\"libgo_syscall.syscall.Entersyscall\");\n-void\truntime_exitsyscall(void) __asm__(\"libgo_syscall.syscall.Exitsyscall\");\n+void\truntime_entersyscall(void) __asm__(\"syscall.Entersyscall\");\n+void\truntime_exitsyscall(void) __asm__(\"syscall.Exitsyscall\");\n void\tsiginit(void);\n bool\t__go_sigsend(int32 sig);\n int32\truntime_callers(int32, uintptr*, int32);\n@@ -374,7 +374,7 @@ void\truntime_panic(Eface);\n struct __go_func_type;\n void reflect_call(const struct __go_func_type *, const void *, _Bool, _Bool,\n \t\t  void **, void **)\n-  asm (\"libgo_reflect.reflect.call\");\n+  asm (\"reflect.call\");\n \n /* Functions.  */\n #define runtime_panic __go_panic\n@@ -417,11 +417,11 @@ void\truntime_usleep(uint32);\n  * runtime c-called (but written in Go)\n  */\n void\truntime_printany(Eface)\n-     __asm__(\"libgo_runtime.runtime.Printany\");\n+     __asm__(\"runtime.Printany\");\n void\truntime_newTypeAssertionError(const String*, const String*, const String*, const String*, Eface*)\n-     __asm__(\"libgo_runtime.runtime.NewTypeAssertionError\");\n+     __asm__(\"runtime.NewTypeAssertionError\");\n void\truntime_newErrorString(String, Eface*)\n-     __asm__(\"libgo_runtime.runtime.NewErrorString\");\n+     __asm__(\"runtime.NewErrorString\");\n \n /*\n  * wrapped for go users\n@@ -431,8 +431,8 @@ void\truntime_semrelease(uint32 volatile *);\n int32\truntime_gomaxprocsfunc(int32 n);\n void\truntime_procyield(uint32);\n void\truntime_osyield(void);\n-void\truntime_LockOSThread(void) __asm__(\"libgo_runtime.runtime.LockOSThread\");\n-void\truntime_UnlockOSThread(void) __asm__(\"libgo_runtime.runtime.UnlockOSThread\");\n+void\truntime_LockOSThread(void) __asm__(\"runtime.LockOSThread\");\n+void\truntime_UnlockOSThread(void) __asm__(\"runtime.UnlockOSThread\");\n \n uintptr\truntime_memlimit(void);\n "}, {"sha": "da1162e6748829d3ceac35c9060db59df06b414c", "filename": "libgo/testsuite/gotest", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Ftestsuite%2Fgotest", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3ab5720f7ce7835a905e6783b5b6720676331fb/libgo%2Ftestsuite%2Fgotest", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Ftestsuite%2Fgotest?ref=f3ab5720f7ce7835a905e6783b5b6720676331fb", "patch": "@@ -30,6 +30,7 @@ gofiles=\"\"\n pkgfiles=\"\"\n loop=true\n keep=false\n+pkgpath=\n prefix=\n dejagnu=no\n GOARCH=\"\"\n@@ -56,6 +57,15 @@ while $loop; do\n \t\tbasedir=`echo $1 | sed -e 's/^--basedir=//'`\n \t\tshift\n \t\t;;\n+\tx--pkgpath)\n+\t\tpkgpath=$2\n+\t\tshift\n+\t\tshift\n+\t\t;;\n+\tx--pkgpath=*)\n+\t\tpkgpath=`echo $1 | sed -e 's/^--pkgpath=//'`\n+\t\tshift\n+\t\t;;\n \tx--prefix)\n \t\tprefix=$2\n \t\tshift\n@@ -310,23 +320,28 @@ set -e\n \n package=`echo ${srcdir} | sed -e 's|^.*libgo/go/||'`\n \n+pkgpatharg=\n+xpkgpatharg=\n prefixarg=\n-if test -n \"$prefix\"; then\n+if test -n \"$pkgpath\"; then\n+\tpkgpatharg=\"-fgo-pkgpath=$pkgpath\"\n+\txpkgpatharg=\"-fgo-pkgpath=${pkgpath}_test\"\n+elif test -n \"$prefix\"; then\n \tprefixarg=\"-fgo-prefix=$prefix\"\n fi\n \n if test \"$trace\" = \"true\"; then\n-  echo $GC -g $prefixarg -c -I . -fno-toplevel-reorder -o _gotest_.o $gofiles $pkgbasefiles\n+  echo $GC -g $pkgpatharg $prefixarg -c -I . -fno-toplevel-reorder -o _gotest_.o $gofiles $pkgbasefiles\n fi\n-$GC -g $prefixarg -c -I . -fno-toplevel-reorder -o _gotest_.o $gofiles $pkgbasefiles\n+$GC -g $pkgpatharg $prefixarg -c -I . -fno-toplevel-reorder -o _gotest_.o $gofiles $pkgbasefiles\n \n if $havex; then\n \tmkdir -p `dirname $package`\n \tcp _gotest_.o `dirname $package`/lib`basename $package`.a\n \tif test \"$trace\" = \"true\"; then\n-\t    echo $GC -g -c -I . -fno-toplevel-reorder -o $xofile $xgofiles\n+\t    echo $GC -g $xpkgpatharg -c -I . -fno-toplevel-reorder -o $xofile $xgofiles\n \tfi\n-\t$GC -g -c -I . -fno-toplevel-reorder -o $xofile $xgofiles\n+\t$GC -g $xpkgpatharg -c -I . -fno-toplevel-reorder -o $xofile $xgofiles\n fi\n \n # They all compile; now generate the code to call them.\n@@ -343,24 +358,26 @@ localname() {\n \tppc*) text=\"D\" ;;\n \tesac\n \n+\tsymtogo='sed -e s/_test/XXXtest/ -e s/.*_\\([^_]*\\.\\)/\\1/ -e s/XXXtest/_test/'\n+\n \t# test functions are named TestFoo\n \t# the grep -v eliminates methods and other special names\n \t# that have multiple dots.\n \tpattern='Test([^a-z].*)?'\n \t# The -p option tells GNU nm not to sort.\n \t# The -v option tells Solaris nm to sort by value.\n-\ttests=$($NM -p -v _gotest_.o $xofile | egrep \" $text .*\\.\"$pattern'$' | grep -v '\\..*\\..*\\.' | fgrep -v '$' | fgrep -v ' __go_' | sed 's/.* //' | sed 's/.*\\.\\(.*\\.\\)/\\1/')\n+\ttests=$($NM -p -v _gotest_.o $xofile | egrep \" $text .*\\.\"$pattern'$' | grep -v '\\..*\\..*\\.' | fgrep -v '$' | fgrep -v ' __go_' | sed 's/.* //' | $symtogo)\n \tif [ \"x$tests\" = x ]; then\n \t\techo 'gotest: warning: no tests matching '$pattern in _gotest_.o $xofile 1>&2\n \t\texit 2\n \tfi\n \t# benchmarks are named BenchmarkFoo.\n \tpattern='Benchmark([^a-z].*)?'\n-\tbenchmarks=$($NM -p -v _gotest_.o $xofile | egrep \" $test .*\\.\"$pattern'$' | grep -v '\\..*\\..*\\.' | fgrep -v '$' | fgrep -v ' __go_' | sed 's/.* //' | sed 's/.*\\.\\(.*\\.\\)/\\1/')\n+\tbenchmarks=$($NM -p -v _gotest_.o $xofile | egrep \" $test .*\\.\"$pattern'$' | grep -v '\\..*\\..*\\.' | fgrep -v '$' | fgrep -v ' __go_' | sed 's/.* //' | $symtogo)\n \n \t# examples are named ExampleFoo\n \tpattern='Example([^a-z].*)?'\n-\texamples=$($NM -p -v _gotest_.o $xofile | egrep \" $text .*\\.\"$pattern'$' | grep -v '\\..*\\..*\\.' | fgrep -v '$' | fgrep -v ' __go_' | sed 's/.* //' | sed 's/.*\\.\\(.*\\.\\)/\\1/')\n+\texamples=$($NM -p -v _gotest_.o $xofile | egrep \" $text .*\\.\"$pattern'$' | grep -v '\\..*\\..*\\.' | fgrep -v '$' | fgrep -v ' __go_' | sed 's/.* //' | $symtogo)\n \n \t# package spec\n \techo 'package main'"}]}