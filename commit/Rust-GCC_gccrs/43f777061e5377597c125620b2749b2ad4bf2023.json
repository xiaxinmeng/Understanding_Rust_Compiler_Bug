{"sha": "43f777061e5377597c125620b2749b2ad4bf2023", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNmNzc3MDYxZTUzNzc1OTdjMTI1NjIwYjI3NDliMmFkNGJmMjAyMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-09-14T09:25:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-09-14T09:25:16Z"}, "message": "match-and-simplify.texi: Fixup some formatting issues and document the 's' flag.\n\n2015-09-14  Richard Biener  <rguenther@suse.de>\n\n\t* doc/match-and-simplify.texi: Fixup some formatting issues\n\tand document the 's' flag.\n\nFrom-SVN: r227739", "tree": {"sha": "92a2ec35390efce941458e369c8114dd67d7192c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92a2ec35390efce941458e369c8114dd67d7192c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43f777061e5377597c125620b2749b2ad4bf2023", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f777061e5377597c125620b2749b2ad4bf2023", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43f777061e5377597c125620b2749b2ad4bf2023", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43f777061e5377597c125620b2749b2ad4bf2023/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed4c91ea5015e19d3ba11756d1179c2b52f0bd57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed4c91ea5015e19d3ba11756d1179c2b52f0bd57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed4c91ea5015e19d3ba11756d1179c2b52f0bd57"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "e347f03893c5c758b47c24e7310974fdceeaaf53", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f777061e5377597c125620b2749b2ad4bf2023/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f777061e5377597c125620b2749b2ad4bf2023/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=43f777061e5377597c125620b2749b2ad4bf2023", "patch": "@@ -1,3 +1,8 @@\n+2015-09-14  Richard Biener  <rguenther@suse.de>\n+\n+\t* doc/match-and-simplify.texi: Fixup some formatting issues\n+\tand document the 's' flag.\n+\n 2015-09-13  Olivier Hainque  <hainque@adacore.com>\n \t    Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "2591ed835cd43698d686d958b4b36cb45a788dd1", "filename": "gcc/doc/match-and-simplify.texi", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43f777061e5377597c125620b2749b2ad4bf2023/gcc%2Fdoc%2Fmatch-and-simplify.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43f777061e5377597c125620b2749b2ad4bf2023/gcc%2Fdoc%2Fmatch-and-simplify.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmatch-and-simplify.texi?ref=43f777061e5377597c125620b2749b2ad4bf2023", "patch": "@@ -186,20 +186,36 @@ preprocessor directives.\n   (bit_and @@1 @@0))\n @end smallexample\n \n-Here we introduce flags on match expressions.  There is currently\n-a single flag, @code{c}, which denotes that the expression should\n+Here we introduce flags on match expressions.  There used flag\n+above, @code{c}, denotes that the expression should\n be also matched commutated.  Thus the above match expression\n is really the following four match expressions:\n \n+@smallexample\n   (bit_and integral_op_p@@0 (bit_ior (bit_not @@0) @@1))\n   (bit_and (bit_ior (bit_not @@0) @@1) integral_op_p@@0)\n   (bit_and integral_op_p@@0 (bit_ior @@1 (bit_not @@0)))\n   (bit_and (bit_ior @@1 (bit_not @@0)) integral_op_p@@0)\n+@end smallexample\n \n Usual canonicalizations you know from GENERIC expressions are\n applied before matching, so for example constant operands always\n come second in commutative expressions.\n \n+The second supported flag is @code{s} which tells the code\n+generator to fail the pattern if the expression marked with\n+@code{s} does have more than one use.  For example in\n+\n+@smallexample\n+(simplify\n+  (pointer_plus (pointer_plus:s @@0 @@1) @@3)\n+  (pointer_plus @@0 (plus @@1 @@3)))\n+@end smallexample\n+\n+this avoids the association if @code{(pointer_plus @@0 @@1)} is\n+used outside of the matched expression and thus it would stay\n+live and not trivially removed by dead code elimination.\n+\n More features exist to avoid too much repetition.\n \n @smallexample\n@@ -291,17 +307,17 @@ with a @code{?}:\n \n @smallexample\n (simplify\n- (eq (convert@@0 @@1) (convert? @@2))\n+ (eq (convert@@0 @@1) (convert@? @@2))\n  (eq @@1 (convert @@2)))\n @end smallexample\n \n which will match both @code{(eq (convert @@1) (convert @@2))} and\n @code{(eq (convert @@1) @@2)}.  The optional converts are supposed\n to be all either present or not, thus\n-@code{(eq (convert? @@1) (convert? @@2))} will result in two\n+@code{(eq (convert@? @@1) (convert@? @@2))} will result in two\n patterns only.  If you want to match all four combinations you\n have access to two additional conditional converts as in\n-@code{(eq (convert1? @@1) (convert2? @@2))}.\n+@code{(eq (convert1@? @@1) (convert2@? @@2))}.\n \n Predicates available from the GCC middle-end need to be made\n available explicitely via @code{define_predicates}:"}]}