{"sha": "03301dcc8402e51506e0f64ace9c83e36d2fefc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMzMDFkY2M4NDAyZTUxNTA2ZTBmNjRhY2U5YzgzZTM2ZDJmZWZjNw==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2019-06-10T08:25:25Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gcc.gnu.org", "date": "2019-06-10T08:25:25Z"}, "message": "[ARC] Improve code gen when compiling for size\n\nWhen optimizing for size, try to avoid using long immediate by\nemploying alternative instructions.\n\ngcc/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n        * config/arc/arc-protos.h (arc_check_ior_const): Declare.\n        (arc_split_ior): Likewise.\n        (arc_check_mov_const): Likewise.\n        (arc_split_mov_const): Likewise.\n        * config/arc/arc.c (arc_print_operand): Fix 'z' letter.\n        (arc_rtx_costs): Replace check Crr with Cax constraint.\n        (prepare_move_operands): Cleanup, remove unused code.\n        (arc_split_ior): New function.\n        (arc_check_ior_const): Likewise.\n        (arc_split_mov_const): Likewise.\n        (arc_check_mov_const): Likewise.\n        * config/arc/arc.md (movsi_insn): Restructure it, and convert it\n        in define_insn_and_split pattern.\n        (iorsi3): Likewise.\n        (mulsi3_v2): Add new matching variant.\n        (andsi3_i): Cleanup pattern.\n        (rotrsi3_cnt1): Update pattern.\n        (rotrsi3_cnt8): New pattern.\n        (ashlsi2_cnt8): Likewise.\n        (ashlsi2_cnt16): Likewise.\n        * config/arc/constraints.md (C0p): Update constraint.\n        (Crr): Remove it.\n        (C0x): New pattern.\n        (Cax): New pattern.\n\ntestsuite/\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n        * gcc.target/arc/and-cnst-size.c: New test.\n        * gcc.target/arc/mov-cnst-size.c: Likewise.\n        * gcc.target/arc/or-cnst-size.c: Likewise.\n        * gcc.target/arc/store-merge-1.c: Update test.\n        * gcc.target/arc/arc700-stld-hazard.c: Likewise.\n        * gcc.target/arc/cmem-1.c: Likewise.\n        * gcc.target/arc/cmem-2.c: Likewise.\n        * gcc.target/arc/cmem-3.c: Likewise.\n        * gcc.target/arc/cmem-4.c: Likewise.\n        * gcc.target/arc/cmem-5.c: Likewise.\n        * gcc.target/arc/cmem-6.c: Likewise.\n        * gcc.target/arc/loop-4.c: Likewise.\n        * gcc.target/arc/movh_cl-1.c: Likewise.\n        * gcc.target/arc/sdata-3.c: Likewise.\n\nFrom-SVN: r272112", "tree": {"sha": "dda2787f645488fcba9e72e990178e02356ed37e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dda2787f645488fcba9e72e990178e02356ed37e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03301dcc8402e51506e0f64ace9c83e36d2fefc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03301dcc8402e51506e0f64ace9c83e36d2fefc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03301dcc8402e51506e0f64ace9c83e36d2fefc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03301dcc8402e51506e0f64ace9c83e36d2fefc7/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07b8d0afe8c177d096bf77c97f03f41b34bb18cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07b8d0afe8c177d096bf77c97f03f41b34bb18cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07b8d0afe8c177d096bf77c97f03f41b34bb18cb"}], "stats": {"total": 649, "additions": 495, "deletions": 154}, "files": [{"sha": "a69a656e25fb2e7fbb6f3ee6e28009c09a62913f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03301dcc8402e51506e0f64ace9c83e36d2fefc7", "patch": "@@ -1,3 +1,30 @@\n+2019-06-10  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* config/arc/arc-protos.h (arc_check_ior_const): Declare.\n+\t(arc_split_ior): Likewise.\n+\t(arc_check_mov_const): Likewise.\n+\t(arc_split_mov_const): Likewise.\n+\t* config/arc/arc.c (arc_print_operand): Fix 'z' letter.\n+\t(arc_rtx_costs): Replace check Crr with Cax constraint.\n+\t(prepare_move_operands): Cleanup, remove unused code.\n+\t(arc_split_ior): New function.\n+\t(arc_check_ior_const): Likewise.\n+\t(arc_split_mov_const): Likewise.\n+\t(arc_check_mov_const): Likewise.\n+\t* config/arc/arc.md (movsi_insn): Restructure it, and convert it\n+\tin define_insn_and_split pattern.\n+\t(iorsi3): Likewise.\n+\t(mulsi3_v2): Add new matching variant.\n+\t(andsi3_i): Cleanup pattern.\n+\t(rotrsi3_cnt1): Update pattern.\n+\t(rotrsi3_cnt8): New pattern.\n+\t(ashlsi2_cnt8): Likewise.\n+\t(ashlsi2_cnt16): Likewise.\n+\t* config/arc/constraints.md (C0p): Update constraint.\n+\t(Crr): Remove it.\n+\t(C0x): New pattern.\n+\t(Cax): New pattern.\n+\n 2019-06-10  Martin Liska  <mliska@suse.cz>\n \n \t* ipa-icf.c (sem_item_optimizer::parse_nonsingleton_classes):"}, {"sha": "f501bc30ee7cdef26f56045d6e32db21f303de6e", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=03301dcc8402e51506e0f64ace9c83e36d2fefc7", "patch": "@@ -48,6 +48,10 @@ extern bool arc_is_uncached_mem_p (rtx);\n extern bool gen_operands_ldd_std (rtx *operands, bool load, bool commute);\n extern bool arc_check_multi (rtx, bool);\n extern void arc_adjust_reg_alloc_order (void);\n+extern bool arc_check_ior_const (HOST_WIDE_INT );\n+extern void arc_split_ior (rtx *);\n+extern bool arc_check_mov_const (HOST_WIDE_INT );\n+extern bool arc_split_mov_const (rtx *);\n #endif /* RTX_CODE */\n \n extern unsigned int arc_compute_frame_size (int);"}, {"sha": "04ca554d9074f80ea2c144b7c0b925474c4505f9", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 193, "deletions": 29, "changes": 222, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=03301dcc8402e51506e0f64ace9c83e36d2fefc7", "patch": "@@ -4223,7 +4223,7 @@ arc_print_operand (FILE *file, rtx x, int code)\n \n     case 'z':\n       if (GET_CODE (x) == CONST_INT)\n-\tfprintf (file, \"%d\",exact_log2(INTVAL (x)) );\n+\tfprintf (file, \"%d\",exact_log2 (INTVAL (x) & 0xffffffff));\n       else\n \toutput_operand_lossage (\"invalid operand to %%z code\");\n \n@@ -5588,9 +5588,6 @@ arc_rtx_costs (rtx x, machine_mode mode, int outer_code,\n \t\tif (satisfies_constraint_C0p (x)) /* bxor */\n \t\t  nolimm = fast = condexec = true;\n \t\tbreak;\n-\t      case SET:\n-\t\tif (satisfies_constraint_Crr (x)) /* ror b,u6 */\n-\t\t  nolimm = true;\n \t      default:\n \t\tbreak;\n \t      }\n@@ -9079,31 +9076,6 @@ prepare_move_operands (rtx *operands, machine_mode mode)\n \t  MEM_COPY_ATTRIBUTES (pat, operands[0]);\n \t  operands[0] = pat;\n \t}\n-      if (!cse_not_expected)\n-\t{\n-\t  rtx pat = XEXP (operands[0], 0);\n-\n-\t  pat = arc_legitimize_address_0 (pat, pat, mode);\n-\t  if (pat)\n-\t    {\n-\t      pat = change_address (operands[0], mode, pat);\n-\t      MEM_COPY_ATTRIBUTES (pat, operands[0]);\n-\t      operands[0] = pat;\n-\t    }\n-\t}\n-    }\n-\n-  if (MEM_P (operands[1]) && !cse_not_expected)\n-    {\n-      rtx pat = XEXP (operands[1], 0);\n-\n-      pat = arc_legitimize_address_0 (pat, pat, mode);\n-      if (pat)\n-\t{\n-\t  pat = change_address (operands[1], mode, pat);\n-\t  MEM_COPY_ATTRIBUTES (pat, operands[1]);\n-\t  operands[1] = pat;\n-\t}\n     }\n \n   return false;\n@@ -11448,6 +11420,198 @@ arc_memory_move_cost (machine_mode mode,\n   return (2 * GET_MODE_SIZE (mode));\n }\n \n+/* Split an OR instruction into multiple BSET/OR instructions in a\n+   attempt to avoid long immediate constants.  The next strategies are\n+   employed when destination is 'q' reg.\n+\n+   1. if there are up to three bits set in the mask, a succession of\n+   three bset instruction will be emitted:\n+   OR rA, rB, mask ->\n+   BSET(_S) rA,rB,mask1/BSET_S rA,rA,mask2/BSET_S rA,rA,mask3\n+\n+   2. if the lower 6 bits of the mask is set and there is only one\n+   bit set in the upper remaining bits then we will emit one bset and\n+   one OR instruction:\n+   OR rA, rB, mask -> OR rA,rB,mask1/BSET_S rA,mask2\n+\n+   3. otherwise an OR with limm will be emmitted.  */\n+\n+void\n+arc_split_ior (rtx *operands)\n+{\n+  unsigned HOST_WIDE_INT mask, maskx;\n+  rtx op1 = operands[1];\n+\n+  gcc_assert (CONST_INT_P (operands[2]));\n+  mask =  INTVAL (operands[2]) & 0xffffffff;\n+\n+  if (__builtin_popcount (mask) > 3 || (mask & 0x3f))\n+    {\n+      maskx = mask & 0x3f;\n+      emit_insn (gen_rtx_SET (operands[0],\n+\t\t\t      gen_rtx_IOR (SImode, op1, GEN_INT (maskx))));\n+      op1 = operands[0];\n+      mask &= ~maskx;\n+    }\n+\n+  switch (__builtin_popcount (mask))\n+    {\n+    case 3:\n+      maskx = 1 << (__builtin_ffs (mask) - 1);\n+      emit_insn (gen_rtx_SET (operands[0],\n+\t\t\t      gen_rtx_IOR (SImode, op1, GEN_INT (maskx))));\n+      mask &= ~maskx;\n+      op1 = operands[0];\n+      /* FALLTHRU */\n+    case 2:\n+      maskx = 1 << (__builtin_ffs (mask) - 1);\n+      emit_insn (gen_rtx_SET (operands[0],\n+\t\t\t      gen_rtx_IOR (SImode, op1, GEN_INT (maskx))));\n+      mask &= ~maskx;\n+      op1 = operands[0];\n+      /* FALLTHRU */\n+    case 1:\n+      maskx = 1 << (__builtin_ffs (mask) - 1);\n+      emit_insn (gen_rtx_SET (operands[0],\n+\t\t\t      gen_rtx_IOR (SImode, op1, GEN_INT (maskx))));\n+      break;\n+    default:\n+      break;\n+    }\n+}\n+\n+/* Helper to check C0x constraint.  */\n+\n+bool\n+arc_check_ior_const (HOST_WIDE_INT ival)\n+{\n+  unsigned int mask = (unsigned int) (ival & 0xffffffff);\n+  if (__builtin_popcount (mask) <= 3)\n+    return true;\n+  if (__builtin_popcount (mask & ~0x3f) <= 1)\n+    return true;\n+  return false;\n+}\n+\n+/* Split a mov with long immediate instruction into smaller, size\n+   friendly instructions.  */\n+\n+bool\n+arc_split_mov_const (rtx *operands)\n+{\n+  unsigned HOST_WIDE_INT ival;\n+  HOST_WIDE_INT shimm;\n+  machine_mode mode = GET_MODE (operands[0]);\n+\n+  /* Manage a constant.  */\n+  gcc_assert (CONST_INT_P (operands[1]));\n+  ival = INTVAL (operands[1]) & 0xffffffff;\n+\n+  if (SIGNED_INT12 (ival))\n+    return false;\n+\n+  /* 1. Check if we can just rotate limm by 8 but using ROR8.  */\n+  if (TARGET_BARREL_SHIFTER && TARGET_V2\n+      && ((ival & ~0x3f000000) == 0))\n+    {\n+      shimm = (ival >> 24) & 0x3f;\n+      emit_insn (gen_rtx_SET (operands[0],\n+\t\t\t      gen_rtx_ROTATERT (mode, GEN_INT (shimm),\n+\t\t\t\t\t\tGEN_INT (8))));\n+      return true;\n+    }\n+  /* 2. Check if we can just shift by 8 to fit into the u6 of LSL8.  */\n+  if (TARGET_BARREL_SHIFTER && TARGET_V2\n+      && ((ival & ~0x3f00) == 0))\n+    {\n+      shimm = (ival >> 8) & 0x3f;\n+      emit_insn (gen_rtx_SET (operands[0],\n+\t\t\t      gen_rtx_ASHIFT (mode, GEN_INT (shimm),\n+\t\t\t\t\t      GEN_INT (8))));\n+      return true;\n+    }\n+\n+  /* 3. Check if we can just shift by 16 to fit into the u6 of LSL16.  */\n+  if (TARGET_BARREL_SHIFTER && TARGET_V2\n+      && ((ival & ~0x3f0000) == 0))\n+    {\n+      shimm = (ival >> 16) & 0x3f;\n+      emit_insn (gen_rtx_SET (operands[0],\n+\t\t\t      gen_rtx_ASHIFT (mode, GEN_INT (shimm),\n+\t\t\t\t\t      GEN_INT (16))));\n+      return true;\n+    }\n+\n+  /* 4. Check if we can do something like mov_s h,u8 / asl_s ra,h,#nb.  */\n+  if (((ival >> (__builtin_ffs (ival) - 1)) & 0xffffff00) == 0\n+      && TARGET_BARREL_SHIFTER)\n+    {\n+      HOST_WIDE_INT shift = __builtin_ffs (ival);\n+      shimm = (ival >> (shift - 1)) & 0xff;\n+      emit_insn (gen_rtx_SET (operands[0], GEN_INT (shimm)));\n+      emit_insn (gen_rtx_SET (operands[0],\n+\t\t\t      gen_rtx_ASHIFT (mode, operands[0],\n+\t\t\t\t\t      GEN_INT (shift - 1))));\n+      return true;\n+    }\n+\n+  /* 5. Check if we can just rotate the limm, useful when no barrel\n+     shifter is present.  */\n+  if ((ival & ~0x8000001f) == 0)\n+    {\n+      shimm = (ival * 2 + 1) & 0x3f;\n+      emit_insn (gen_rtx_SET (operands[0],\n+\t\t\t      gen_rtx_ROTATERT (mode, GEN_INT (shimm),\n+\t\t\t\t\t\tconst1_rtx)));\n+      return true;\n+    }\n+\n+  /* 6. Check if we can do something with bmask.  */\n+  if (IS_POWEROF2_P (ival + 1))\n+    {\n+      emit_insn (gen_rtx_SET (operands[0], constm1_rtx));\n+      emit_insn (gen_rtx_SET (operands[0],\n+\t\t\t      gen_rtx_AND (mode, operands[0],\n+\t\t\t\t\t   GEN_INT (ival))));\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n+/* Helper to check Cax constraint.  */\n+\n+bool\n+arc_check_mov_const (HOST_WIDE_INT ival)\n+{\n+  ival = ival & 0xffffffff;\n+\n+  if ((ival & ~0x8000001f) == 0)\n+    return true;\n+\n+  if (IS_POWEROF2_P (ival + 1))\n+    return true;\n+\n+  /* The next rules requires a barrel shifter.  */\n+  if (!TARGET_BARREL_SHIFTER)\n+    return false;\n+\n+  if (((ival >> (__builtin_ffs (ival) - 1)) & 0xffffff00) == 0)\n+    return true;\n+\n+  if ((ival & ~0x3f00) == 0)\n+    return true;\n+\n+  if ((ival & ~0x3f0000) == 0)\n+    return true;\n+\n+  if ((ival & ~0x3f000000) == 0)\n+    return true;\n+\n+  return false;\n+}\n+\n+\n #undef TARGET_USE_ANCHORS_FOR_SYMBOL_P\n #define TARGET_USE_ANCHORS_FOR_SYMBOL_P arc_use_anchors_for_symbol_p\n "}, {"sha": "528e344c3b868619d36f822283a67d0a6eb0e5c3", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 130, "deletions": 85, "changes": 215, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=03301dcc8402e51506e0f64ace9c83e36d2fefc7", "patch": "@@ -749,66 +749,63 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n ; In order to allow the ccfsm machinery to do its work, the leading compact\n ; alternatives say 'canuse' - there is another alternative that will match\n ; when the condition codes are used.\n-; Rcq won't match if the condition is actually used; to avoid a spurious match\n-; via q, q is inactivated as constraint there.\n-; Likewise, the length of an alternative that might be shifted to conditional\n+; The length of an alternative that might be shifted to conditional\n ; execution must reflect this, lest out-of-range branches are created.\n ; the iscompact attribute allows the epilogue expander to know for which\n ; insns it should lengthen the return insn.\n-; N.B. operand 1 of alternative 7 expands into pcl,symbol@gotpc .\n-(define_insn \"*movsi_insn\"\t\t\t;   0     1     2     3    4  5  6   7   8   9   10  11  12  13    14  15   16  17  18     19     20  21  22    23    24 25 26    27 28  29  30   31\n-  [(set (match_operand:SI 0 \"move_dest_operand\" \"=Rcq,Rcq#q,    w,Rcq#q,   h,wl, w,  w,  w,  w,  w,???w, ?w,  w,Rcq#q,  h,  wl,Rcq,  S,   Us<,RcqRck,!*x,  r,!*Rsd,!*Rcd,r,Ucm,  Usd,m,???m,  m,VUsc\")\n-\t(match_operand:SI 1 \"move_src_operand\"  \"  cL,   cP,Rcq#q,    P,hCm1,cL, I,Crr,Clo,Chi,Cbi,?Rac,Cpc,Clb, ?Cal,Cal,?Cal,Uts,Rcq,RcqRck,   Us>,Usd,Ucm,  Usd,  Ucd,m,  w,!*Rzd,c,?Rac,Cm3, C32\"))]\n+(define_insn_and_split \"*movsi_insn\"\t\t; 0  1 2 3    4  5  6   7   8   9  10  11  12  13  14  15  16    17      18  19  20    21   22 23  24   25 26  27  28\n+  [(set (match_operand:SI 0 \"move_dest_operand\" \"=q, q,r,q,   h,rl, r,  r,  r,  r, ?r,  r,  q,  h, rl,  q,  S,   Us<,RcqRck,!*x,  r,!*Rsd,!*Rcd,r,Ucm,  Usd,m,  m,VUsc\")\n+\t(match_operand:SI 1 \"move_src_operand\"  \"rL,rP,q,P,hCm1,rL, I,Clo,Chi,Cbi,Cpc,Clb,Cax,Cal,Cal,Uts,Rcq,RcqRck,   Us>,Usd,Ucm,  Usd,  Ucd,m,  r,!*Rzd,r,Cm3, C32\"))]\n   \"register_operand (operands[0], SImode)\n    || register_operand (operands[1], SImode)\n    || (CONSTANT_P (operands[1])\n-       /* Don't use a LIMM that we could load with a single insn - we loose\n-\t  delay-slot filling opportunities.  */\n-       && !satisfies_constraint_I (operands[1])\n+       && (!satisfies_constraint_I (operands[1]) || !optimize_size)\n        && satisfies_constraint_Usc (operands[0]))\n    || (satisfies_constraint_Cm3 (operands[1])\n       && memory_operand (operands[0], SImode))\"\n   \"@\n-   mov%? %0,%1%&\t;0\n-   mov%? %0,%1%&\t;1\n-   mov%? %0,%1%&\t;2\n-   mov%? %0,%1%&\t;3\n-   mov%? %0,%1%&\t;4\n-   mov%? %0,%1\t\t;5\n-   mov%? %0,%1\t\t;6\n-   ror %0,((%1*2+1) & 0x3f) ;7\n-   movl.cl %0,%1\t;8\n-   movh.cl %0,%L1>>16   ;9\n-   * return INTVAL (operands[1]) & 0xffffff ? \\\"movbi.cl %0,%1 >> %p1,%p1,8;10\\\" : \\\"movbi.cl %0,%L1 >> 24,24,8;10\\\";\n-   mov%? %0,%1\t\t;11\n-   add %0,%1\t\t;12\n-   add %0,pcl,%1@pcl    ;13\n-   mov%? %0,%j1 \t;14\n-   mov%? %0,%j1\t\t;15\n-   mov%? %0,%j1\t\t;16\n-   ld%? %0,%1\t\t;17\n-   st%? %1,%0%&\t\t;18\n-   * return arc_short_long (insn, \\\"push%? %1%&\\\", \\\"st%U0 %1,%0%&\\\");\n-   * return arc_short_long (insn, \\\"pop%? %0%&\\\",  \\\"ld%U1 %0,%1%&\\\");\n-   ld%? %0,%1%&\t\t;21\n-   xld%U1 %0,%1\t\t;22\n-   ld%? %0,%1%&\t\t;23\n-   ld%? %0,%1%&\t\t;24\n-   ld%U1%V1 %0,%1\t;25\n-   xst%U0 %1,%0\t\t;26\n-   st%? %1,%0%&\t\t;27\n-   st%U0%V0 %1,%0\t;28\n-   st%U0%V0 %1,%0\t;29\n-   st%U0%V0 %1,%0\t;30\n-   st%U0%V0 %1,%0\t;31\"\n-   ;                         0     1     2     3    4    5      6       7           8     9    10     11    12    13           14        15    16   17    18    19   20    21    22   23  24    25    26    27    28    29   30   31\n-  [(set_attr \"type\"       \"move, move, move,move,move, move, move,two_cycle_core,shift,shift,shift, move,binary,binary,      move,      move, move,load,store,store,load,load, load,load,load, load,store,store,store,store,store,store\")\n-   (set_attr \"iscompact\" \"maybe,maybe,maybe,true,true,false,false,         false,false,false,false,false, false, false,maybe_limm,maybe_limm,false,true, true, true,true,true,false,true,true,false,false, true,false,false,false,false\")\n-   ; Use default length for iscompact to allow for COND_EXEC.  But set length\n-   ; of Crr to 4.\n-   (set_attr \"length\" \"*,*,*,*,*,4,4,4,4,4,4,4,8,8,*,*,*,*,*,*,*,*,4,*,4,*,*,*,*,*,*,8\")\n-   (set_attr \"predicable\" \"yes,no,yes,no,no,yes,no,no,no,no,no,yes,no,no,yes,yes,yes,no,no,no,no,no,no,no,no,no,no,no,no,no,no,no\")\n-   (set_attr \"cpu_facility\" \"av1,av1,av1,av2,av2,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,av2,av2,*,*,av2,*,*,av2,*\")])\n+   mov%?\\\\t%0,%1\t;0\n+   mov%?\\\\t%0,%1\t;1\n+   mov%?\\\\t%0,%1\t;2\n+   mov%?\\\\t%0,%1\t;3\n+   mov%?\\\\t%0,%1\t;4\n+   mov%?\\\\t%0,%1\t;5\n+   mov%?\\\\t%0,%1\t;6\n+   movl.cl\\\\t %0,%1\t;7\n+   movh.cl\\\\t %0,%L1>>16 ;8\n+   * return INTVAL (operands[1]) & 0xffffff ? \\\"movbi.cl\\\\t%0,%1 >> %p1,%p1,8;9\\\" : \\\"movbi.cl\\\\t%0,%L1 >> 24,24,8;9\\\";\n+   add\\\\t%0,%1\t\t;10\n+   add\\\\t%0,pcl,%1@pcl  ;11\n+   #\n+   mov%?\\\\t%0,%j1\t;13\n+   mov%?\\\\t%0,%j1\t;14\n+   ld%?\\\\t%0,%1\t\t;15\n+   st%?\\\\t %1,%0\t;16\n+   * return arc_short_long (insn, \\\"push%?\\\\t%1%&\\\", \\\"st%U0\\\\t%1,%0%&\\\");\n+   * return arc_short_long (insn, \\\"pop%?\\\\t%0%&\\\",  \\\"ld%U1\\\\t%0,%1%&\\\");\n+   ld%?\\\\t%0,%1\t\t;19\n+   xld%U1\\\\t%0,%1\t;20\n+   ld%?\\\\t%0,%1\t\t;21\n+   ld%?\\\\t%0,%1\t\t;22\n+   ld%U1%V1\\\\t%0,%1\t;23\n+   xst%U0\\\\t%1,%0\t;24\n+   st%?\\\\t%1,%0%&\t;25\n+   st%U0%V0\\\\t%1,%0\t;26\n+   st%U0%V0\\\\t%1,%0\t;37\n+   st%U0%V0\\\\t%1,%0\t;28\"\n+  \"reload_completed && satisfies_constraint_Cax (operands[1])\n+   && register_operand (operands[0], SImode)\"\n+  [(const_int 0)]\n+  \"\n+   arc_split_mov_const (operands);\n+   DONE;\n+  \"\n+   ;                          0     1     2     3    4    5     6     7     8     9     10     11    12   13    14   15    16    17   18   19    20   21   22    23    24    25    26    27   28\n+  [(set_attr \"type\"       \"move, move, move,move,move, move, move,shift,shift,shift,binary,binary,multi,move, move,load,store,store,load,load, load,load,load, load,store,store,store,store,store\")\n+   (set_attr \"iscompact\" \"maybe,maybe,maybe,true,true,false,false,false,false,false, false, false,false,true,false,true, true, true,true,true,false,true,true,false,false, true,false,false,false\")\n+   (set_attr \"length\"    \"*,*,*,*,*,4,4,4,4,4,8,8,*,6,*,*,*,*,*,*,4,*,4,*,*,*,*,*,8\")\n+   (set_attr \"predicable\" \"yes,no,yes,no,no,yes,no,no,no,yes,no,no,no,yes,yes,no,no,no,no,no,no,no,no,no,no,no,no,no,no\")\n+   (set_attr \"cpu_facility\" \"av1,av1,av1,av2,av2,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,av2,av2,*,*,av2,*,av2,*\")])\n \n ;; Sometimes generated by the epilogue code.  We don't want to\n ;; recognize these addresses in general, because the limm is costly,\n@@ -2303,16 +2300,23 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n ; ARCv2 has no penalties between mpy and mpyu. So, we use mpy because of its\n ; short variant. LP_COUNT constraints are still valid.\n (define_insn \"mulsi3_v2\"\n- [(set (match_operand:SI 0 \"mpy_dest_reg_operand\"        \"=Rcqq,Rcr, r,r,Rcr,  r\")\n-\t(mult:SI (match_operand:SI 1 \"register_operand\"     \"%0,  0, c,0,  0,  c\")\n-\t\t (match_operand:SI 2 \"nonmemory_operand\" \" Rcqq, cL,cL,I,Cal,Cal\")))]\n+ [(set (match_operand:SI 0 \"mpy_dest_reg_operand\"        \"=q,q, r, r,r,  r,  r\")\n+\t(mult:SI (match_operand:SI 1 \"register_operand\"  \"%0,q, 0, r,0,  0,  c\")\n+\t\t (match_operand:SI 2 \"nonmemory_operand\"  \"q,0,rL,rL,I,Cal,Cal\")))]\n  \"TARGET_MULTI\"\n- \"mpy%? %0,%1,%2\"\n- [(set_attr \"length\" \"*,4,4,4,8,8\")\n-  (set_attr \"iscompact\" \"maybe,false,false,false,false,false\")\n+ \"@\n+  mpy%?\\\\t%0,%1,%2\n+  mpy%?\\\\t%0,%2,%1\n+  mpy%?\\\\t%0,%1,%2\n+  mpy%?\\\\t%0,%1,%2\n+  mpy%?\\\\t%0,%1,%2\n+  mpy%?\\\\t%0,%1,%2\n+  mpy%?\\\\t%0,%1,%2\"\n+ [(set_attr \"length\" \"*,*,4,4,4,8,8\")\n+  (set_attr \"iscompact\" \"maybe,maybe,false,false,false,false,false\")\n   (set_attr \"type\" \"umulti\")\n-  (set_attr \"predicable\" \"no,yes,no,no,yes,no\")\n-  (set_attr \"cond\" \"nocond,canuse,nocond,canuse_limm,canuse,nocond\")])\n+  (set_attr \"predicable\" \"no,no,yes,no,no,yes,no\")\n+  (set_attr \"cond\" \"nocond,nocond,canuse,nocond,canuse_limm,canuse,nocond\")])\n \n (define_expand \"mulsidi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -3216,10 +3220,10 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n      operands[1] = force_reg (SImode, operands[1]);\n   \")\n \n-(define_insn \"andsi3_i\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\"          \"=Rcqq,Rcq,Rcqq,Rcqq,Rcqq,Rcw,Rcw,   Rcw,Rcw,Rcw,Rcw, w,     w,  w,  w,Rrq,w,Rcw,  w,W\")\n-\t(and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,Rcq,   0,   0,Rcqq,  0,  c,     0,  0,  0,  0, c,     c,  c,  c,Rrq,0,  0,  c,o\")\n-\t\t(match_operand:SI 2 \"nonmemory_operand\"  \"Rcqq,  0, C1p, Ccp, Cux, cL,  0,C2pC1p,Ccp,CnL,  I,Lc,C2pC1p,Ccp,CnL,Cbf,I,Cal,Cal,Cux\")))]\n+(define_insn \"andsi3_i\"                                     ;0 1   2   3   4  5 6      7   8  9 10 11     12  13  14  15 16 17  18   19\n+  [(set (match_operand:SI 0 \"dest_reg_operand\"             \"=q,q,  q,  q,  q, r,r,     r,  r,  r,r, r,     r,  r,  r,  q,r,  r,  r,  W\")\n+\t(and:SI (match_operand:SI 1 \"nonimmediate_operand\" \"%0,q,  0,  0,  q, 0,r,     0,  0,  0,0, r,     r,  r,  r,  q,0,  0,  r,  o\")\n+\t\t(match_operand:SI 2 \"nonmemory_operand\"     \"q,0,C1p,Ccp,Cux,rL,0,C2pC1p,Ccp,CnL,I,rL,C2pC1p,Ccp,CnL,Cbf,I,Cal,Cal,Cux\")))]\n   \"(register_operand (operands[1], SImode)\n     && nonmemory_operand (operands[2], SImode))\n    || (memory_operand (operands[1], SImode)\n@@ -3317,27 +3321,35 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n   (set_attr \"predicable\" \"no,yes,no,yes,no,no,no\")\n   (set_attr \"cond\" \"canuse,canuse,canuse_limm,canuse,nocond,nocond,nocond\")])\n \n-(define_insn \"iorsi3\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\"        \"=Rcqq,Rcq,Rcqq,Rcw,Rcw,Rcw,Rcw,w,  w,w,Rcw,  w\")\n-\t(ior:SI (match_operand:SI 1 \"nonmemory_operand\" \"% 0,Rcq,   0,  0,  c,  0, 0, c,  c,0,  0,  c\")\n-\t\t(match_operand:SI 2 \"nonmemory_operand\" \"Rcqq, 0, C0p, cL,  0,C0p, I,cL,C0p,I,Cal,Cal\")))]\n+(define_insn_and_split \"iorsi3\"\n+  [(set (match_operand:SI 0 \"dest_reg_operand\"          \"=q,q,  q, r,r,  r,r, r,  r,r,  q,  r,  r\")\n+\t(ior:SI (match_operand:SI 1 \"register_operand\"  \"%0,q,  0, 0,r,  0,0, r,  r,0,  r,  0,  r\")\n+\t\t(match_operand:SI 2 \"nonmemory_operand\"  \"q,0,C0p,rL,0,C0p,I,rL,C0p,I,C0x,Cal,Cal\")))]\n   \"\"\n-  \"*\n-  switch (which_alternative)\n-    {\n-    case 0: case 3: case 6: case 7: case 9: case 10: case 11:\n-      return \\\"or%? %0,%1,%2%&\\\";\n-    case 1: case 4:\n-      return \\\"or%? %0,%2,%1%&\\\";\n-    case 2: case 5: case 8:\n-      return \\\"bset%? %0,%1,%z2%&\\\";\n-    default:\n-      gcc_unreachable ();\n-    }\"\n-  [(set_attr \"iscompact\" \"maybe,maybe,maybe,false,false,false,false,false,false,false,false,false\")\n-   (set_attr \"length\" \"*,*,*,4,4,4,4,4,4,4,8,8\")\n-   (set_attr \"predicable\" \"no,no,no,yes,yes,yes,no,no,no,no,yes,no\")\n-   (set_attr \"cond\" \"canuse,canuse,canuse,canuse,canuse,canuse,canuse_limm,nocond,nocond,canuse_limm,canuse,nocond\")])\n+  \"@\n+   or%?\\\\t%0,%1,%2\n+   or%?\\\\t%0,%2,%1\n+   bset%?\\\\t%0,%1,%z2\n+   or%?\\\\t%0,%1,%2\n+   or%?\\\\t%0,%2,%1\n+   bset%?\\\\t%0,%1,%z2\n+   or%?\\\\t%0,%1,%2\n+   or%?\\\\t%0,%1,%2\n+   bset%?\\\\t%0,%1,%z2\n+   or%?\\\\t%0,%1,%2\n+   #\n+   or%?\\\\t%0,%1,%2\n+   or%?\\\\t%0,%1,%2\"\n+  \"reload_completed && satisfies_constraint_C0x (operands[2])\"\n+  [(const_int 0)]\n+  \"\n+   arc_split_ior (operands);\n+   DONE;\n+  \"\n+  [(set_attr \"iscompact\" \"maybe,maybe,maybe,false,false,false,false,false,false,false,false,false,false\")\n+   (set_attr \"length\" \"*,*,*,4,4,4,4,4,4,4,*,8,8\")\n+   (set_attr \"predicable\" \"no,no,no,yes,yes,yes,no,no,no,no,no,yes,no\")\n+   (set_attr \"cond\" \"canuse,canuse,canuse,canuse,canuse,canuse,canuse_limm,nocond,nocond,canuse_limm,nocond,canuse,nocond\")])\n \n (define_insn \"xorsi3\"\n   [(set (match_operand:SI 0 \"dest_reg_operand\"          \"=Rcqq,Rcq,Rcw,Rcw,Rcw,Rcw, w,  w,w,  w,  w\")\n@@ -5972,11 +5984,21 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n    (match_dup 1)])\n \n (define_insn \"*rotrsi3_cnt1\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\"             \"=w\")\n-\t(rotatert:SI (match_operand:SI 1 \"register_operand\" \"c\")\n+  [(set (match_operand:SI 0 \"dest_reg_operand\"              \"=r\")\n+\t(rotatert:SI (match_operand:SI 1 \"nonmemory_operand\" \"rL\")\n \t\t     (const_int 1)))]\n   \"\"\n-  \"ror %0,%1%&\"\n+  \"ror\\\\t%0,%1\"\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"predicable\" \"no\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*rotrsi3_cnt8\"\n+  [(set (match_operand:SI 0 \"register_operand\"             \"=r\")\n+\t(rotatert:SI (match_operand:SI 1 \"nonmemory_operand\" \"rL\")\n+\t\t     (const_int 8)))]\n+  \"TARGET_BARREL_SHIFTER && TARGET_V2\"\n+  \"ror8\\\\t%0,%1\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"predicable\" \"no\")\n    (set_attr \"length\" \"4\")])\n@@ -5989,8 +6011,31 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n   \"asl%? %0,%1%&\"\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"iscompact\" \"maybe,false\")\n+   (set_attr \"length\" \"4\")\n    (set_attr \"predicable\" \"no,no\")])\n \n+(define_insn \"*ashlsi2_cnt8\"\n+  [(set (match_operand:SI 0 \"register_operand\"            \"=r\")\n+\t(ashift:SI (match_operand:SI 1 \"nonmemory_operand\" \"rL\")\n+\t\t   (const_int 8)))]\n+  \"TARGET_BARREL_SHIFTER && TARGET_V2\"\n+  \"lsl8\\\\t%0,%1\"\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"iscompact\" \"false\")\n+   (set_attr \"length\" \"4\")\n+   (set_attr \"predicable\" \"no\")])\n+\n+(define_insn \"*ashlsi2_cnt16\"\n+  [(set (match_operand:SI 0 \"register_operand\"            \"=r\")\n+\t(ashift:SI (match_operand:SI 1 \"nonmemory_operand\" \"rL\")\n+\t\t   (const_int 16)))]\n+  \"TARGET_BARREL_SHIFTER && TARGET_V2\"\n+  \"lsl16\\\\t%0,%1\"\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"iscompact\" \"false\")\n+   (set_attr \"length\" \"4\")\n+   (set_attr \"predicable\" \"no\")])\n+\n (define_insn \"*lshrsi3_cnt1\"\n   [(set (match_operand:SI 0 \"dest_reg_operand\"             \"=Rcqq,w\")\n \t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"Rcqq,c\")"}, {"sha": "bbb0b96f7e367d40b72c46508d74e0a31726ae05", "filename": "gcc/config/arc/constraints.md", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Fconfig%2Farc%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Fconfig%2Farc%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fconstraints.md?ref=03301dcc8402e51506e0f64ace9c83e36d2fefc7", "patch": "@@ -201,7 +201,7 @@\n  \"@internal\n   power of two\"\n   (and (match_code \"const_int\")\n-       (match_test \"IS_POWEROF2_P (ival)\")))\n+       (match_test \"IS_POWEROF2_P (ival & 0xffffffff)\")))\n \n (define_constraint \"C1p\"\n  \"@internal\n@@ -275,12 +275,6 @@\n   (and (match_code \"const_int\")\n        (match_test \"ival == 1 || ival == 2 || ival == 4 || ival == 8\")))\n \n-(define_constraint \"Crr\"\n- \"@internal\n-  constant that can be loaded with ror b,u6\"\n-  (and (match_code \"const_int\")\n-       (match_test \"(ival & ~0x8000001f) == 0 && !arc_ccfsm_cond_exec_p ()\")))\n-\n (define_constraint \"Cbi\"\n  \"@internal\n   constant that can be loaded with movbi.cl\"\n@@ -290,6 +284,20 @@\n \t\t    || ((ival & 0xffffffffUL) >> exact_log2 (ival & -ival)\n \t\t\t<= 0xff)\")))\n \n+(define_constraint \"C0x\"\n+  \"@internal\n+  special const_int pattern used to split ior insns\"\n+  (and (match_code \"const_int\")\n+       (match_test \"optimize_size\")\n+       (match_test \"arc_check_ior_const (ival)\")))\n+\n+(define_constraint \"Cax\"\n+  \"@internal\n+  special const_int pattern used to split mov insns\"\n+  (and (match_code \"const_int\")\n+       (match_test \"optimize_size\")\n+       (match_test \"arc_check_mov_const (ival)\")))\n+\n ;; Floating-point constraints\n \n (define_constraint \"G\""}, {"sha": "3f4606d4552b4b7f6d35a0c7271fd4d1984aec35", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=03301dcc8402e51506e0f64ace9c83e36d2fefc7", "patch": "@@ -1,3 +1,20 @@\n+2019-06-10  Claudiu Zissulescu  <claziss@synopsys.com>\n+\n+\t* gcc.target/arc/and-cnst-size.c: New test.\n+\t* gcc.target/arc/mov-cnst-size.c: Likewise.\n+\t* gcc.target/arc/or-cnst-size.c: Likewise.\n+\t* gcc.target/arc/store-merge-1.c: Update test.\n+\t* gcc.target/arc/arc700-stld-hazard.c: Likewise.\n+\t* gcc.target/arc/cmem-1.c: Likewise.\n+\t* gcc.target/arc/cmem-2.c: Likewise.\n+\t* gcc.target/arc/cmem-3.c: Likewise.\n+\t* gcc.target/arc/cmem-4.c: Likewise.\n+\t* gcc.target/arc/cmem-5.c: Likewise.\n+\t* gcc.target/arc/cmem-6.c: Likewise.\n+\t* gcc.target/arc/loop-4.c: Likewise.\n+\t* gcc.target/arc/movh_cl-1.c: Likewise.\n+\t* gcc.target/arc/sdata-3.c: Likewise.\n+\n 2019-06-10  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/ipa/pr68035.c: Update scanned pattern."}, {"sha": "9437be992f49ace13a7536d515218cc7015e8f52", "filename": "gcc/testsuite/gcc.target/arc/and-cnst-size.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fand-cnst-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fand-cnst-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fand-cnst-size.c?ref=03301dcc8402e51506e0f64ace9c83e36d2fefc7", "patch": "@@ -0,0 +1,16 @@\n+/* Tests to check if and instructions are emitted efficiently.  */\n+/* { dg-require-effective-target codedensity } */\n+/* { dg-options \"-Os\" } */\n+\n+int check_bclr (int a)\n+{\n+  return a & (~0x40);\n+}\n+\n+int check_bmskn (int a)\n+{\n+  return a & (-128);\n+}\n+\n+/* { dg-final { scan-assembler \"bclr_s\" } } */\n+/* { dg-final { scan-assembler \"bmskn\" } } */"}, {"sha": "49b5664b37082528b3214f0ea5f86fe5dad4faa9", "filename": "gcc/testsuite/gcc.target/arc/arc700-stld-hazard.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Farc700-stld-hazard.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Farc700-stld-hazard.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Farc700-stld-hazard.c?ref=03301dcc8402e51506e0f64ace9c83e36d2fefc7", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-mcpu=arc700 -mno-sdata\" } */\n+/* { dg-skip-if \"\" { ! { clmcpu } } } */\n+/* { dg-options \"-mcpu=arc700 -mno-sdata -O2\" } */\n \n volatile int a;\n volatile int b;\n@@ -11,4 +12,4 @@ foo ()\n   b = a;\n }\n \n-/* { dg-final { scan-assembler \"st r\\[0-9\\]+,\\\\\\[@a\\\\\\]\\[^\\n\\]*\\n\\[ \\t\\]+nop_s\\[^\\n\\]*\\n\\[ \\t\\]+nop_s\\[^\\n\\]*\\n\\[ \\t\\]+ld r\\[0-9\\]+,\\\\\\[@a\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"st\\\\s+r\\[0-9\\]+,\\\\\\[@a\\\\\\]\\\\.*\\[^\\n\\]*\\n\\[ \\t\\]+nop_s\\[^\\n\\]*\\n\\[ \\t\\]+nop_s\\[^\\n\\]*\\n\\[ \\t\\]+ld\\\\s+r\\[0-9\\]+,\\\\\\[@a\\\\\\]\" } } */"}, {"sha": "f0e7a8d6bbdd8ac1625e0515d71b63637a97dd31", "filename": "gcc/testsuite/gcc.target/arc/cmem-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-1.c?ref=03301dcc8402e51506e0f64ace9c83e36d2fefc7", "patch": "@@ -6,6 +6,6 @@\n \n #include \"cmem-st.inc\"\n \n-/* { dg-final { scan-assembler \"xst \" } } */\n-/* { dg-final { scan-assembler \"xstw \" } } */\n-/* { dg-final { scan-assembler \"xstb \" } } */\n+/* { dg-final { scan-assembler \"xst\\\\s\" } } */\n+/* { dg-final { scan-assembler \"xstw\\\\s\" } } */\n+/* { dg-final { scan-assembler \"xstb\\\\s\" } } */"}, {"sha": "a63df0eb4efc1380e595ee0902034078a6227f89", "filename": "gcc/testsuite/gcc.target/arc/cmem-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-2.c?ref=03301dcc8402e51506e0f64ace9c83e36d2fefc7", "patch": "@@ -6,6 +6,6 @@\n \n #include \"cmem-ld.inc\"\n \n-/* { dg-final { scan-assembler \"xld \" } } */\n-/* { dg-final { scan-assembler \"xldw \" } } */\n-/* { dg-final { scan-assembler \"xldb \" } } */\n+/* { dg-final { scan-assembler \"xld\\\\s\" } } */\n+/* { dg-final { scan-assembler \"xldw\\\\s\" } } */\n+/* { dg-final { scan-assembler \"xldb\\\\s\" } } */"}, {"sha": "d3d1d5954faa717f08aeb3043300441adb38fc4d", "filename": "gcc/testsuite/gcc.target/arc/cmem-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-3.c?ref=03301dcc8402e51506e0f64ace9c83e36d2fefc7", "patch": "@@ -6,6 +6,6 @@\n \n #include \"cmem-st.inc\"\n \n-/* { dg-final { scan-assembler \"xst \" } } */\n-/* { dg-final { scan-assembler \"xstw \" } } */\n-/* { dg-final { scan-assembler \"xstb \" } } */\n+/* { dg-final { scan-assembler \"xst\\\\s\" } } */\n+/* { dg-final { scan-assembler \"xstw\\\\s\" } } */\n+/* { dg-final { scan-assembler \"xstb\\\\s\" } } */"}, {"sha": "2160f1f072dd4a54f4376d52da0e20d5ffebbd68", "filename": "gcc/testsuite/gcc.target/arc/cmem-4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-4.c?ref=03301dcc8402e51506e0f64ace9c83e36d2fefc7", "patch": "@@ -6,6 +6,6 @@\n \n #include \"cmem-ld.inc\"\n \n-/* { dg-final { scan-assembler \"xld \" } } */\n-/* { dg-final { scan-assembler \"xldw \" } } */\n-/* { dg-final { scan-assembler \"xldb \" } } */\n+/* { dg-final { scan-assembler \"xld\\\\s\" } } */\n+/* { dg-final { scan-assembler \"xldw\\\\s\" } } */\n+/* { dg-final { scan-assembler \"xldb\\\\s\" } } */"}, {"sha": "db4142f7ee476b9a0f2963b128b85808828aebe4", "filename": "gcc/testsuite/gcc.target/arc/cmem-5.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-5.c?ref=03301dcc8402e51506e0f64ace9c83e36d2fefc7", "patch": "@@ -6,6 +6,6 @@\n \n #include \"cmem-st.inc\"\n \n-/* { dg-final { scan-assembler \"xst \" } } */\n-/* { dg-final { scan-assembler \"xstw \" } } */\n-/* { dg-final { scan-assembler \"xstb \" } } */\n+/* { dg-final { scan-assembler \"xst\\\\s\" } } */\n+/* { dg-final { scan-assembler \"xstw\\\\s\" } } */\n+/* { dg-final { scan-assembler \"xstb\\\\s\" } } */"}, {"sha": "ac22ad5065304f3898717442596ccdb262b20d0d", "filename": "gcc/testsuite/gcc.target/arc/cmem-6.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcmem-6.c?ref=03301dcc8402e51506e0f64ace9c83e36d2fefc7", "patch": "@@ -6,6 +6,6 @@\n \n #include \"cmem-ld.inc\"\n \n-/* { dg-final { scan-assembler \"xld \" } } */\n-/* { dg-final { scan-assembler \"xldw \" } } */\n-/* { dg-final { scan-assembler \"xldb \" } } */\n+/* { dg-final { scan-assembler \"xld\\\\s\" } } */\n+/* { dg-final { scan-assembler \"xldw\\\\s\" } } */\n+/* { dg-final { scan-assembler \"xldb\\\\s\" } } */"}, {"sha": "06de41879480514d7e7cc438046eb0b98d482b0d", "filename": "gcc/testsuite/gcc.target/arc/loop-4.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Floop-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Floop-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Floop-4.c?ref=03301dcc8402e51506e0f64ace9c83e36d2fefc7", "patch": "@@ -3,12 +3,13 @@\n /* { dg-options \"-Os -fbranch-count-reg\" } */\n \n \n-void fn1(void *p1, int p2, int p3)\n+int fn1(void *p1, int p2, int p3)\n {\n   char *d = p1;\n   do\n     *d++ = p2;\n   while (--p3);\n+  return *d;\n }\n \n /* { dg-final { scan-assembler \"lp_count\" } } */"}, {"sha": "916dd8b7620d34a578751e1ba0c48ae394a17bce", "filename": "gcc/testsuite/gcc.target/arc/mov-cnst-size.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmov-cnst-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmov-cnst-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmov-cnst-size.c?ref=03301dcc8402e51506e0f64ace9c83e36d2fefc7", "patch": "@@ -0,0 +1,42 @@\n+/* Tests to check if mov instructions are emitted efficiently.  */\n+/* { dg-require-effective-target codedensity } */\n+/* { dg-options \"-Os\" } */\n+\n+int rule1 (void)\n+{\n+  return 0x3f000000;\n+}\n+\n+int rule2 (void)\n+{\n+  return 0x3f00;\n+}\n+\n+int rule3 (void)\n+{\n+  return 0x3f0000;\n+}\n+\n+int rule4 (void)\n+{\n+  return 0x22000;\n+}\n+\n+int rule5 (void)\n+{\n+  return 0x8000001f;\n+}\n+\n+int rule6 (void)\n+{\n+  return 0x3fffff;\n+}\n+\n+/* { dg-final { scan-assembler \"ror8\\\\s+r0,63\" } } */\n+/* { dg-final { scan-assembler \"lsl8\\\\s+r0,63\" } } */\n+/* { dg-final { scan-assembler \"lsl16\\\\s+r0,63\" } } */\n+/* { dg-final { scan-assembler \"ror\\\\s+r0,63\" } } */\n+/* { dg-final { scan-assembler \"mov_s\\\\s+r0,17\" } } */\n+/* { dg-final { scan-assembler \"asl_s\\\\s+r0,r0,13\" } } */\n+/* { dg-final { scan-assembler \"mov_s\\\\s+r0,-1\" } } */\n+/* { dg-final { scan-assembler \"bmsk_s\\\\s+r0,r0,21\" } } */"}, {"sha": "7e838bb2a69a9db04f850ebffa7e514fba6ad9f4", "filename": "gcc/testsuite/gcc.target/arc/movh_cl-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmovh_cl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmovh_cl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fmovh_cl-1.c?ref=03301dcc8402e51506e0f64ace9c83e36d2fefc7", "patch": "@@ -36,4 +36,4 @@ woof ()\n   func (xx.raw);\n }\n \n-/* { dg-final { scan-assembler \"movh\\.cl r\\[0-9\\]+,0xc0000000>>16\" } } */\n+/* { dg-final { scan-assembler \"movh\\.cl\\\\s+r\\[0-9\\]+,0xc0000000>>16\" } } */"}, {"sha": "c4a9f0fbaa92c695f96fedc5ca185631575ade07", "filename": "gcc/testsuite/gcc.target/arc/or-cnst-size.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2For-cnst-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2For-cnst-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2For-cnst-size.c?ref=03301dcc8402e51506e0f64ace9c83e36d2fefc7", "patch": "@@ -0,0 +1,16 @@\n+/* Tests to check if or instructions are emitted efficiently.  */\n+/* { dg-require-effective-target codedensity } */\n+/* { dg-options \"-Os\" } */\n+\n+int check_bset1 (int a)\n+{\n+  return a | 0x80000000;\n+}\n+\n+int check_bset2(int a)\n+{\n+  return a | 0x2022;\n+}\n+\n+/* { dg-final { scan-assembler-times \"bset_s\" 2 } } */\n+/* { dg-final { scan-assembler \"or\" } } */"}, {"sha": "df66cbd70c5a67fc336675dc11a66eed6f559338", "filename": "gcc/testsuite/gcc.target/arc/sdata-3.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsdata-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsdata-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fsdata-3.c?ref=03301dcc8402e51506e0f64ace9c83e36d2fefc7", "patch": "@@ -2,7 +2,7 @@\n    for variables which are having a different alignment\n    than the default data type indicates.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2\" } */\n+/* { dg-options \"-O2 -msdata\" } */\n \n int g_a __attribute__ ((aligned (1)));\n int g_b;\n@@ -24,13 +24,13 @@ TEST (b, int)\n TEST (c, short)\n TEST (d, char)\n \n-/* { dg-final { scan-assembler \"ld r2,\\\\\\[gp,@g_a@sda\\\\\\]\" } } */\n-/* { dg-final { scan-assembler \"ld.as r2,\\\\\\[gp,@g_b@sda\\\\\\]\" } } */\n-/* { dg-final { scan-assembler \"ld\\[hw\\]\\\\\\.as r2,\\\\\\[gp,@g_c@sda\\\\\\]\" } } */\n-/* { dg-final { scan-assembler \"ldb r2,\\\\\\[gp,@g_d@sda\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"ld\\\\s+r2,\\\\\\[gp,@g_a@sda\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"ld.as\\\\s+r2,\\\\\\[gp,@g_b@sda\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"ld\\[hw\\]\\\\\\.as\\\\s+r2,\\\\\\[gp,@g_c@sda\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"ldb\\\\s+r2,\\\\\\[gp,@g_d@sda\\\\\\]\" } } */\n \n-/* { dg-final { scan-assembler \"st r0,\\\\\\[gp,@g_a@sda\\\\\\]\" } } */\n-/* { dg-final { scan-assembler \"st_s r0,\\\\\\[gp,@g_b@sda\\\\\\]\" { target { arcem || archs } } } } */\n-/* { dg-final { scan-assembler \"st\\\\\\.as r0,\\\\\\[gp,@g_b@sda\\\\\\]\" { target { arc700 || arc6xx } } } } */\n-/* { dg-final { scan-assembler \"st\\[hw\\]\\\\\\.as r0,\\\\\\[gp,@g_c@sda\\\\\\]\" } } */\n-/* { dg-final { scan-assembler \"stb r0,\\\\\\[gp,@g_d@sda\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"st\\\\s+r0,\\\\\\[gp,@g_a@sda\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"st_s\\\\s+r0,\\\\\\[gp,@g_b@sda\\\\\\]\" { target { codedensity } } } } */\n+/* { dg-final { scan-assembler \"st\\\\\\.as\\\\s+r0,\\\\\\[gp,@g_b@sda\\\\\\]\" { target { ! { codedensity } } } } } */\n+/* { dg-final { scan-assembler \"st\\[hw\\]\\\\\\.as\\\\s+r0,\\\\\\[gp,@g_c@sda\\\\\\]\" } } */\n+/* { dg-final { scan-assembler \"stb\\\\s+r0,\\\\\\[gp,@g_d@sda\\\\\\]\" } } */"}, {"sha": "e9d4e57c27dbacd8db936806f3b4a95abbf1ab54", "filename": "gcc/testsuite/gcc.target/arc/store-merge-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fstore-merge-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03301dcc8402e51506e0f64ace9c83e36d2fefc7/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fstore-merge-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fstore-merge-1.c?ref=03301dcc8402e51506e0f64ace9c83e36d2fefc7", "patch": "@@ -14,4 +14,4 @@ int sigemptyset2 (sigset_t *set)\n   return 0;\n }\n \n-/* { dg-final { scan-assembler-times \"st 0,\\\\\\[r\" 2 } } */\n+/* { dg-final { scan-assembler-times \"std\\\\s*0,\\\\\\[r\" 1 } } */"}]}