{"sha": "d71dba7b611f5e8404aa1b4361d319e856665a4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcxZGJhN2I2MTFmNWU4NDA0YWExYjQzNjFkMzE5ZTg1NjY2NWE0YQ==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-17T15:22:25Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-17T15:22:25Z"}, "message": "[ARM][GCC][3/2x]: MVE intrinsics with binary operands.\n\nThis patch supports following MVE ACLE intrinsics with binary operands.\n\nvaddlvq_p_s32, vaddlvq_p_u32, vcmpneq_s8, vcmpneq_s16, vcmpneq_s32, vcmpneq_u8, vcmpneq_u16, vcmpneq_u32, vshlq_s8, vshlq_s16, vshlq_s32, vshlq_u8, vshlq_u16, vshlq_u32.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm-builtins.c (BINOP_NONE_NONE_UNONE_QUALIFIERS): Define\n\tqualifier for binary operands.\n\t(BINOP_UNONE_NONE_NONE_QUALIFIERS): Likewise.\n\t(BINOP_UNONE_UNONE_NONE_QUALIFIERS): Likewise.\n\t* config/arm/arm_mve.h (vaddlvq_p_s32): Define macro.\n\t(vaddlvq_p_u32): Likewise.\n\t(vcmpneq_s8): Likewise.\n\t(vcmpneq_s16): Likewise.\n\t(vcmpneq_s32): Likewise.\n\t(vcmpneq_u8): Likewise.\n\t(vcmpneq_u16): Likewise.\n\t(vcmpneq_u32): Likewise.\n\t(vshlq_s8): Likewise.\n\t(vshlq_s16): Likewise.\n\t(vshlq_s32): Likewise.\n\t(vshlq_u8): Likewise.\n\t(vshlq_u16): Likewise.\n\t(vshlq_u32): Likewise.\n\t(__arm_vaddlvq_p_s32): Define intrinsic.\n\t(__arm_vaddlvq_p_u32): Likewise.\n\t(__arm_vcmpneq_s8): Likewise.\n\t(__arm_vcmpneq_s16): Likewise.\n\t(__arm_vcmpneq_s32): Likewise.\n\t(__arm_vcmpneq_u8): Likewise.\n\t(__arm_vcmpneq_u16): Likewise.\n\t(__arm_vcmpneq_u32): Likewise.\n\t(__arm_vshlq_s8): Likewise.\n\t(__arm_vshlq_s16): Likewise.\n\t(__arm_vshlq_s32): Likewise.\n\t(__arm_vshlq_u8): Likewise.\n\t(__arm_vshlq_u16): Likewise.\n\t(__arm_vshlq_u32): Likewise.\n\t(vaddlvq_p): Define polymorphic variant.\n\t(vcmpneq): Likewise.\n\t(vshlq): Likewise.\n\t* config/arm/arm_mve_builtins.def (BINOP_NONE_NONE_UNONE_QUALIFIERS):\n\tUse it.\n\t(BINOP_UNONE_NONE_NONE_QUALIFIERS): Likewise.\n\t(BINOP_UNONE_UNONE_NONE_QUALIFIERS): Likewise.\n\t* config/arm/mve.md (mve_vaddlvq_p_<supf>v4si): Define RTL pattern.\n\t(mve_vcmpneq_<supf><mode>): Likewise.\n\t(mve_vshlq_<supf><mode>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vaddlvq_p_s32.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vaddlvq_p_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcmpneq_u8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlq_u8.c: Likewise.", "tree": {"sha": "01002112163fbd45facfd6a59bfab23b29780e05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01002112163fbd45facfd6a59bfab23b29780e05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d71dba7b611f5e8404aa1b4361d319e856665a4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71dba7b611f5e8404aa1b4361d319e856665a4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d71dba7b611f5e8404aa1b4361d319e856665a4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71dba7b611f5e8404aa1b4361d319e856665a4a/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f166a8cdf48bd0196cfcf91e5e8cd0e2b46409d8"}], "stats": {"total": 616, "additions": 612, "deletions": 4}, "files": [{"sha": "c9e6530364dd6b1b5b3892112026272847ac4a2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d71dba7b611f5e8404aa1b4361d319e856665a4a", "patch": "@@ -1,3 +1,50 @@\n+2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm-builtins.c (BINOP_NONE_NONE_UNONE_QUALIFIERS): Define\n+\tqualifier for binary operands.\n+\t(BINOP_UNONE_NONE_NONE_QUALIFIERS): Likewise.\n+\t(BINOP_UNONE_UNONE_NONE_QUALIFIERS): Likewise.\n+\t* config/arm/arm_mve.h (vaddlvq_p_s32): Define macro.\n+\t(vaddlvq_p_u32): Likewise.\n+\t(vcmpneq_s8): Likewise.\n+\t(vcmpneq_s16): Likewise.\n+\t(vcmpneq_s32): Likewise.\n+\t(vcmpneq_u8): Likewise.\n+\t(vcmpneq_u16): Likewise.\n+\t(vcmpneq_u32): Likewise.\n+\t(vshlq_s8): Likewise.\n+\t(vshlq_s16): Likewise.\n+\t(vshlq_s32): Likewise.\n+\t(vshlq_u8): Likewise.\n+\t(vshlq_u16): Likewise.\n+\t(vshlq_u32): Likewise.\n+\t(__arm_vaddlvq_p_s32): Define intrinsic.\n+\t(__arm_vaddlvq_p_u32): Likewise.\n+\t(__arm_vcmpneq_s8): Likewise.\n+\t(__arm_vcmpneq_s16): Likewise.\n+\t(__arm_vcmpneq_s32): Likewise.\n+\t(__arm_vcmpneq_u8): Likewise.\n+\t(__arm_vcmpneq_u16): Likewise.\n+\t(__arm_vcmpneq_u32): Likewise.\n+\t(__arm_vshlq_s8): Likewise.\n+\t(__arm_vshlq_s16): Likewise.\n+\t(__arm_vshlq_s32): Likewise.\n+\t(__arm_vshlq_u8): Likewise.\n+\t(__arm_vshlq_u16): Likewise.\n+\t(__arm_vshlq_u32): Likewise.\n+\t(vaddlvq_p): Define polymorphic variant.\n+\t(vcmpneq): Likewise.\n+\t(vshlq): Likewise.\n+\t* config/arm/arm_mve_builtins.def (BINOP_NONE_NONE_UNONE_QUALIFIERS):\n+\tUse it.\n+\t(BINOP_UNONE_NONE_NONE_QUALIFIERS): Likewise.\n+\t(BINOP_UNONE_UNONE_NONE_QUALIFIERS): Likewise.\n+\t* config/arm/mve.md (mve_vaddlvq_p_<supf>v4si): Define RTL pattern.\n+\t(mve_vcmpneq_<supf><mode>): Likewise.\n+\t(mve_vshlq_<supf><mode>): Likewise.\n+\n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "afccac0cee94b6ac034aa18358d9aa9aa028416a", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=d71dba7b611f5e8404aa1b4361d319e856665a4a", "patch": "@@ -415,6 +415,24 @@ arm_binop_unone_none_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define BINOP_UNONE_NONE_IMM_QUALIFIERS \\\n   (arm_binop_unone_none_imm_qualifiers)\n \n+static enum arm_type_qualifiers\n+arm_binop_none_none_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none, qualifier_unsigned };\n+#define BINOP_NONE_NONE_UNONE_QUALIFIERS \\\n+  (arm_binop_none_none_unone_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_binop_unone_none_none_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_none, qualifier_none };\n+#define BINOP_UNONE_NONE_NONE_QUALIFIERS \\\n+  (arm_binop_unone_none_none_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_binop_unone_unone_none_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_none };\n+#define BINOP_UNONE_UNONE_NONE_QUALIFIERS \\\n+  (arm_binop_unone_unone_none_qualifiers)\n+\n /* End of Qualifier for MVE builtins.  */\n \n    /* void ([T element type] *, T, immediate).  */"}, {"sha": "ef0d2ace8432c7c27db42f25aee24e362055d4fe", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=d71dba7b611f5e8404aa1b4361d319e856665a4a", "patch": "@@ -225,6 +225,20 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vshrq_n_u8(__a,  __imm) __arm_vshrq_n_u8(__a,  __imm)\n #define vshrq_n_u16(__a,  __imm) __arm_vshrq_n_u16(__a,  __imm)\n #define vshrq_n_u32(__a,  __imm) __arm_vshrq_n_u32(__a,  __imm)\n+#define vaddlvq_p_s32(__a, __p) __arm_vaddlvq_p_s32(__a, __p)\n+#define vaddlvq_p_u32(__a, __p) __arm_vaddlvq_p_u32(__a, __p)\n+#define vcmpneq_s8(__a, __b) __arm_vcmpneq_s8(__a, __b)\n+#define vcmpneq_s16(__a, __b) __arm_vcmpneq_s16(__a, __b)\n+#define vcmpneq_s32(__a, __b) __arm_vcmpneq_s32(__a, __b)\n+#define vcmpneq_u8(__a, __b) __arm_vcmpneq_u8(__a, __b)\n+#define vcmpneq_u16(__a, __b) __arm_vcmpneq_u16(__a, __b)\n+#define vcmpneq_u32(__a, __b) __arm_vcmpneq_u32(__a, __b)\n+#define vshlq_s8(__a, __b) __arm_vshlq_s8(__a, __b)\n+#define vshlq_s16(__a, __b) __arm_vshlq_s16(__a, __b)\n+#define vshlq_s32(__a, __b) __arm_vshlq_s32(__a, __b)\n+#define vshlq_u8(__a, __b) __arm_vshlq_u8(__a, __b)\n+#define vshlq_u16(__a, __b) __arm_vshlq_u16(__a, __b)\n+#define vshlq_u32(__a, __b) __arm_vshlq_u32(__a, __b)\n #endif\n \n __extension__ extern __inline void\n@@ -868,6 +882,103 @@ __arm_vshrq_n_u32 (uint32x4_t __a, const int __imm)\n {\n   return __builtin_mve_vshrq_n_uv4si (__a, __imm);\n }\n+__extension__ extern __inline int64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vaddlvq_p_s32 (int32x4_t __a, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vaddlvq_p_sv4si (__a, __p);\n+}\n+\n+__extension__ extern __inline uint64_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vaddlvq_p_u32 (uint32x4_t __a, mve_pred16_t __p)\n+{\n+  return __builtin_mve_vaddlvq_p_uv4si (__a, __p);\n+}\n+\n+__extension__ extern __inline int32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcmpneq_s8 (int8x16_t __a, int8x16_t __b)\n+{\n+  return __builtin_mve_vcmpneq_sv16qi (__a, __b);\n+}\n+\n+__extension__ extern __inline mve_pred16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcmpneq_s16 (int16x8_t __a, int16x8_t __b)\n+{\n+  return __builtin_mve_vcmpneq_sv8hi (__a, __b);\n+}\n+\n+__extension__ extern __inline mve_pred16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcmpneq_s32 (int32x4_t __a, int32x4_t __b)\n+{\n+  return __builtin_mve_vcmpneq_sv4si (__a, __b);\n+}\n+\n+__extension__ extern __inline mve_pred16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcmpneq_u8 (uint8x16_t __a, uint8x16_t __b)\n+{\n+  return __builtin_mve_vcmpneq_uv16qi (__a, __b);\n+}\n+\n+__extension__ extern __inline mve_pred16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcmpneq_u16 (uint16x8_t __a, uint16x8_t __b)\n+{\n+  return __builtin_mve_vcmpneq_uv8hi (__a, __b);\n+}\n+\n+__extension__ extern __inline mve_pred16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcmpneq_u32 (uint32x4_t __a, uint32x4_t __b)\n+{\n+  return __builtin_mve_vcmpneq_uv4si (__a, __b);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlq_s8 (int8x16_t __a, int8x16_t __b)\n+{\n+  return __builtin_mve_vshlq_sv16qi (__a, __b);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlq_s16 (int16x8_t __a, int16x8_t __b)\n+{\n+  return __builtin_mve_vshlq_sv8hi (__a, __b);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlq_s32 (int32x4_t __a, int32x4_t __b)\n+{\n+  return __builtin_mve_vshlq_sv4si (__a, __b);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlq_u8 (uint8x16_t __a, int8x16_t __b)\n+{\n+  return __builtin_mve_vshlq_uv16qi (__a, __b);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlq_u16 (uint16x8_t __a, int16x8_t __b)\n+{\n+  return __builtin_mve_vshlq_uv8hi (__a, __b);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlq_u32 (uint32x4_t __a, int32x4_t __b)\n+{\n+  return __builtin_mve_vshlq_uv4si (__a, __b);\n+}\n \n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n@@ -1689,6 +1800,27 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_float16x8_t]: __arm_vbrsrq_n_f16 (__ARM_mve_coerce(__p0, float16x8_t), p1), \\\n   int (*)[__ARM_mve_type_float32x4_t]: __arm_vbrsrq_n_f32 (__ARM_mve_coerce(__p0, float32x4_t), p1));})\n \n+#define vshlq(p0,p1) __arm_vshlq(p0,p1)\n+#define __arm_vshlq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vshlq_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vshlq_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vshlq_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int8x16_t]: __arm_vshlq_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vshlq_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vshlq_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, int32x4_t)));})\n+\n+#define vshrq(p0,p1) __arm_vshrq(p0,p1)\n+#define __arm_vshrq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vshrq_n_s8 (__ARM_mve_coerce(__p0, int8x16_t), p1), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vshrq_n_s16 (__ARM_mve_coerce(__p0, int16x8_t), p1), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vshrq_n_s32 (__ARM_mve_coerce(__p0, int32x4_t), p1), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vshrq_n_u8 (__ARM_mve_coerce(__p0, uint8x16_t), p1), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vshrq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), p1), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vshrq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), p1));})\n+\n #define vcvtq_n(p0,p1) __arm_vcvtq_n(p0,p1)\n #define __arm_vcvtq_n(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n   _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n@@ -1831,6 +1963,34 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint16x8_t]: __arm_vshrq_n_u16 (__ARM_mve_coerce(__p0, uint16x8_t), p1), \\\n   int (*)[__ARM_mve_type_uint32x4_t]: __arm_vshrq_n_u32 (__ARM_mve_coerce(__p0, uint32x4_t), p1));})\n \n+#define vaddlvq_p(p0,p1) __arm_vaddlvq_p(p0,p1)\n+#define __arm_vaddlvq_p(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vaddlvq_p_s32 (__ARM_mve_coerce(__p0, int32x4_t), p1), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vaddlvq_p_u32 (__ARM_mve_coerce(__p0, uint32x4_t), p1));})\n+\n+#define vcmpneq(p0,p1) __arm_vcmpneq(p0,p1)\n+#define __arm_vcmpneq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vcmpneq_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vcmpneq_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vcmpneq_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_uint8x16_t]: __arm_vcmpneq_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_uint16x8_t]: __arm_vcmpneq_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_uint32x4_t]: __arm_vcmpneq_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, uint32x4_t)));})\n+\n+#define vshlq(p0,p1) __arm_vshlq(p0,p1)\n+#define __arm_vshlq(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t][__ARM_mve_type_int8x16_t]: __arm_vshlq_s8 (__ARM_mve_coerce(__p0, int8x16_t), __ARM_mve_coerce(__p1, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t][__ARM_mve_type_int16x8_t]: __arm_vshlq_s16 (__ARM_mve_coerce(__p0, int16x8_t), __ARM_mve_coerce(__p1, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t][__ARM_mve_type_int32x4_t]: __arm_vshlq_s32 (__ARM_mve_coerce(__p0, int32x4_t), __ARM_mve_coerce(__p1, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t][__ARM_mve_type_int8x16_t]: __arm_vshlq_u8 (__ARM_mve_coerce(__p0, uint8x16_t), __ARM_mve_coerce(__p1, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t][__ARM_mve_type_int16x8_t]: __arm_vshlq_u16 (__ARM_mve_coerce(__p0, uint16x8_t), __ARM_mve_coerce(__p1, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t][__ARM_mve_type_int32x4_t]: __arm_vshlq_u32 (__ARM_mve_coerce(__p0, uint32x4_t), __ARM_mve_coerce(__p1, int32x4_t)));})\n+\n #endif /* MVE Floating point.  */\n \n #ifdef __cplusplus"}, {"sha": "05930c9f87460a50f216fc4a41d96768c8599c43", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=d71dba7b611f5e8404aa1b4361d319e856665a4a", "patch": "@@ -6,7 +6,7 @@\n \n     GCC is free software; you can redistribute it and/or modify it\n     under the terms of the GNU General Public License as published\n-    by the Free Software Foundation; either version 3, or   (at your\n+    by the Free Software Foundation; either version 3, or (at your\n     option) any later version.\n \n     GCC is distributed in the hope that it will be useful, but WITHOUT\n@@ -87,3 +87,9 @@ VAR4 (BINOP_UNONE_UNONE_UNONE, vcreateq_u, v16qi, v8hi, v4si, v2di)\n VAR4 (BINOP_NONE_UNONE_UNONE, vcreateq_s, v16qi, v8hi, v4si, v2di)\n VAR3 (BINOP_UNONE_UNONE_IMM, vshrq_n_u, v16qi, v8hi, v4si)\n VAR3 (BINOP_NONE_NONE_IMM, vshrq_n_s, v16qi, v8hi, v4si)\n+VAR1 (BINOP_NONE_NONE_UNONE, vaddlvq_p_s, v4si)\n+VAR1 (BINOP_UNONE_UNONE_UNONE, vaddlvq_p_u, v4si)\n+VAR3 (BINOP_UNONE_NONE_NONE, vcmpneq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_UNONE, vcmpneq_u, v16qi, v8hi, v4si)\n+VAR3 (BINOP_NONE_NONE_NONE, vshlq_s, v16qi, v8hi, v4si)\n+VAR3 (BINOP_UNONE_UNONE_NONE, vshlq_u, v16qi, v8hi, v4si)"}, {"sha": "4ae608b3676e29eb8cd82380d40092ec9cf58828", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=d71dba7b611f5e8404aa1b4361d319e856665a4a", "patch": "@@ -40,7 +40,8 @@\n \t\t\t VADDLVQ_U VCTP8Q VCTP16Q VCTP32Q VCTP64Q VPNOT\n \t\t\t VCREATEQ_F VCVTQ_N_TO_F_S VCVTQ_N_TO_F_U VBRSRQ_N_F\n \t\t\t VSUBQ_N_F VCREATEQ_U VCREATEQ_S VSHRQ_N_S VSHRQ_N_U\n-\t\t\t VCVTQ_N_FROM_F_S VCVTQ_N_FROM_F_U])\n+\t\t\t VCVTQ_N_FROM_F_S VCVTQ_N_FROM_F_U VADDLVQ_P_S\n+\t\t\t VADDLVQ_P_U VCMPNEQ_U VCMPNEQ_S VSHLQ_S VSHLQ_U])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\")\n \t\t\t    (V8HF \"V8HI\") (V4SF \"V4SI\")])\n@@ -59,8 +60,9 @@\n \t\t       (VREV32Q_S \"s\") (VADDLVQ_U \"u\") (VADDLVQ_S \"s\")\n \t\t       (VCVTQ_N_TO_F_S \"s\") (VCVTQ_N_TO_F_U \"u\")\n \t\t       (VCREATEQ_U \"u\") (VCREATEQ_S \"s\") (VSHRQ_N_S \"s\")\n-\t\t       (VSHRQ_N_U \"u\") (VCVTQ_N_FROM_F_S \"s\")\n-\t\t       (VCVTQ_N_FROM_F_U \"u\")])\n+\t\t       (VSHRQ_N_U \"u\") (VCVTQ_N_FROM_F_S \"s\") (VSHLQ_U \"u\")\n+\t\t       (VCVTQ_N_FROM_F_U \"u\") (VADDLVQ_P_S \"s\") (VSHLQ_S \"s\")\n+\t\t       (VADDLVQ_P_U \"u\") (VCMPNEQ_U \"u\") (VCMPNEQ_S \"s\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n \t\t\t(VCTP64Q \"64\")])\n@@ -90,6 +92,9 @@\n (define_int_iterator VCREATEQ [VCREATEQ_U VCREATEQ_S])\n (define_int_iterator VSHRQ_N [VSHRQ_N_S VSHRQ_N_U])\n (define_int_iterator VCVTQ_N_FROM_F [VCVTQ_N_FROM_F_S VCVTQ_N_FROM_F_U])\n+(define_int_iterator VADDLVQ_P [VADDLVQ_P_S VADDLVQ_P_U])\n+(define_int_iterator VCMPNEQ [VCMPNEQ_U VCMPNEQ_S])\n+(define_int_iterator VSHLQ [VSHLQ_S VSHLQ_U])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -806,3 +811,48 @@\n   \"vcvt.<supf><V_sz_elem>.f<V_sz_elem>\\t%q0, %q1, %2\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n+\n+;;\n+;; [vaddlvq_p_s])\n+;;\n+(define_insn \"mve_vaddlvq_p_<supf>v4si\"\n+  [\n+   (set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:HI 2 \"vpr_register_operand\" \"Up\")]\n+\t VADDLVQ_P))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vpst\\;vaddlvt.<supf>32 %Q0, %R0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+   (set_attr \"length\"\"8\")])\n+\n+;;\n+;; [vcmpneq_u, vcmpneq_s])\n+;;\n+(define_insn \"mve_vcmpneq_<supf><mode>\"\n+  [\n+   (set (match_operand:HI 0 \"vpr_register_operand\" \"=Up\")\n+\t(unspec:HI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t    (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VCMPNEQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vcmp.i%#<V_sz_elem>  ne, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vshlq_s, vshlq_u])\n+;;\n+(define_insn \"mve_vshlq_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n+\t VSHLQ))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vshl.<supf>%#<V_sz_elem>\\t%q0, %q1, %q2\"\n+  [(set_attr \"type\" \"mve_move\")\n+])"}, {"sha": "83de77b4207c2a7e102d8a7beb49ba3e2ab72486", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d71dba7b611f5e8404aa1b4361d319e856665a4a", "patch": "@@ -1,3 +1,22 @@\n+2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vaddlvq_p_s32.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vaddlvq_p_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcmpneq_u8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlq_u8.c: Likewise.\n+\n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "ccdebba7f792a1c166f637b3b0ee6417bdb420a0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddlvq_p_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_p_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_p_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_p_s32.c?ref=d71dba7b611f5e8404aa1b4361d319e856665a4a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int64_t\n+foo (int32x4_t a, mve_pred16_t p)\n+{\n+  return vaddlvq_p_s32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddlvt.s32\"  }  } */\n+\n+int64_t\n+foo1 (int32x4_t a, mve_pred16_t p)\n+{\n+  return vaddlvq_p (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddlvt.s32\"  }  } */"}, {"sha": "9bdff242976d1f9be646ffb5597dd066d53ae2c4", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vaddlvq_p_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_p_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_p_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvaddlvq_p_u32.c?ref=d71dba7b611f5e8404aa1b4361d319e856665a4a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint64_t\n+foo (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vaddlvq_p_u32 (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddlvt.u32\"  }  } */\n+\n+uint64_t\n+foo1 (uint32x4_t a, mve_pred16_t p)\n+{\n+  return vaddlvq_p (a, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vaddlvt.u32\"  }  } */"}, {"sha": "001af00878f36ca767319f1fa0ebde69010d8d57", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_s16.c?ref=d71dba7b611f5e8404aa1b4361d319e856665a4a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vcmpneq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vcmpneq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */"}, {"sha": "a49f8e3a9c73c60d98597ad0e5593245babc5dea", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_s32.c?ref=d71dba7b611f5e8404aa1b4361d319e856665a4a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vcmpneq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vcmpneq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */"}, {"sha": "e312b77cb007cd7e0cf667e4e380337bcea81a39", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_s8.c?ref=d71dba7b611f5e8404aa1b4361d319e856665a4a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vcmpneq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vcmpneq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */"}, {"sha": "c234f257777103bab30296c8eff19f354309215f", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_u16.c?ref=d71dba7b611f5e8404aa1b4361d319e856665a4a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint16x8_t a, uint16x8_t b)\n+{\n+  return vcmpneq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint16x8_t a, uint16x8_t b)\n+{\n+  return vcmpneq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i16\"  }  } */"}, {"sha": "711d071499cfe8e69b5b1c7e989cca73fc856e3b", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_u32.c?ref=d71dba7b611f5e8404aa1b4361d319e856665a4a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint32x4_t a, uint32x4_t b)\n+{\n+  return vcmpneq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint32x4_t a, uint32x4_t b)\n+{\n+  return vcmpneq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i32\"  }  } */"}, {"sha": "5fa88843078a4a61d9e63da62eb4086765d96ece", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcmpneq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcmpneq_u8.c?ref=d71dba7b611f5e8404aa1b4361d319e856665a4a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+mve_pred16_t\n+foo (uint8x16_t a, uint8x16_t b)\n+{\n+  return vcmpneq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */\n+\n+mve_pred16_t\n+foo1 (uint8x16_t a, uint8x16_t b)\n+{\n+  return vcmpneq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vcmp.i8\"  }  } */"}, {"sha": "bcadf6ea97e80fafddbfcc7f45bf6683f4004abd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_s16.c?ref=d71dba7b611f5e8404aa1b4361d319e856665a4a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, int16x8_t b)\n+{\n+  return vshlq_s16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vshl.s16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, int16x8_t b)\n+{\n+  return vshlq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vshl.s16\"  }  } */"}, {"sha": "3f01c1c2658ce68e0f654f3d44c2964e2d0732f5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_s32.c?ref=d71dba7b611f5e8404aa1b4361d319e856665a4a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, int32x4_t b)\n+{\n+  return vshlq_s32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vshl.s32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, int32x4_t b)\n+{\n+  return vshlq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vshl.s32\"  }  } */"}, {"sha": "554f984627913b0bc1280067773dd5765115b3a5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_s8.c?ref=d71dba7b611f5e8404aa1b4361d319e856665a4a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, int8x16_t b)\n+{\n+  return vshlq_s8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vshl.s8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, int8x16_t b)\n+{\n+  return vshlq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vshl.s8\"  }  } */"}, {"sha": "9b6328bc9c174c7dda2803731339983622319a08", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_u16.c?ref=d71dba7b611f5e8404aa1b4361d319e856665a4a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, int16x8_t b)\n+{\n+  return vshlq_u16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vshl.u16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, int16x8_t b)\n+{\n+  return vshlq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vshl.u16\"  }  } */"}, {"sha": "d8a5b9072d0f565f70a4e2567b74483ff0378876", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_u32.c?ref=d71dba7b611f5e8404aa1b4361d319e856665a4a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, int32x4_t b)\n+{\n+  return vshlq_u32 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vshl.u32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, int32x4_t b)\n+{\n+  return vshlq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vshl.u32\"  }  } */"}, {"sha": "818b2f64f538dd6528aae19ea9f977b1b7bec6a6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlq_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71dba7b611f5e8404aa1b4361d319e856665a4a/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlq_u8.c?ref=d71dba7b611f5e8404aa1b4361d319e856665a4a", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, int8x16_t b)\n+{\n+  return vshlq_u8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vshl.u8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, int8x16_t b)\n+{\n+  return vshlq (a, b);\n+}\n+\n+/* { dg-final { scan-assembler \"vshl.u8\"  }  } */"}]}