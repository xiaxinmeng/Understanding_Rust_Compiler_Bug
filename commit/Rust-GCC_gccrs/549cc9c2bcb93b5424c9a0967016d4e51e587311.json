{"sha": "549cc9c2bcb93b5424c9a0967016d4e51e587311", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ5Y2M5YzJiY2I5M2I1NDI0YzlhMDk2NzAxNmQ0ZTUxZTU4NzMxMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T11:52:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-12T11:52:59Z"}, "message": "[multiple changes]\n\n2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb (Find_Selected_Component): In a synchronized\n\tbody, a reference to an operation of an object of the same\n\tsynchronized type was always interpreted as a reference to the\n\tcurrent instance. This is not always the case, as the prefix of\n\tthe reference may designate an object of the same type declared\n\tin the enclosing context prior to the body.\n\n2015-11-12  Arnaud Charlet  <charlet@adacore.com>\n\n\t* impunit.ads, impunit.adb (Get_Kind_Of_File): New. Cleaned up\n\timplementation from previous Get_Kind_Of_Unit.\n\t(Get_Kind_Of_Unit): Reimplemented using Get_Kind_Of_File.\n\t* debug.adb: Remove d.4 switch, no longer used.\n\t* opt.ads: Update doc on Debugger_Level.\n\t* gnat1drv.adb: Code clean ups.\n\t* sinput.ads: minor fix in comment\n\n2015-11-12  Bob Duff  <duff@adacore.com>\n\n\t* sinfo.adb, sinfo.ads, sem_ch6.adb, atree.ads: Add\n\tWas_Expression_Function flag, which is set in sem_ch6.adb when\n\tconverting an Expression_Function into a Subprogram_Body.\n\n2015-11-12  Pascal Obry  <obry@adacore.com>\n\n\t* usage.adb: Update overflow checking documentation.\n\nFrom-SVN: r230243", "tree": {"sha": "e3316f28c5129d8661e41c313965dd0c973deda3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3316f28c5129d8661e41c313965dd0c973deda3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/549cc9c2bcb93b5424c9a0967016d4e51e587311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/549cc9c2bcb93b5424c9a0967016d4e51e587311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/549cc9c2bcb93b5424c9a0967016d4e51e587311", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/549cc9c2bcb93b5424c9a0967016d4e51e587311/comments", "author": null, "committer": null, "parents": [{"sha": "b3083540f530b6e28e57756e23c98670f69df4af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3083540f530b6e28e57756e23c98670f69df4af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3083540f530b6e28e57756e23c98670f69df4af"}], "stats": {"total": 213, "additions": 149, "deletions": 64}, "files": [{"sha": "2931059cfe905d1c0b86558db7cbf6c0c1bf15e2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=549cc9c2bcb93b5424c9a0967016d4e51e587311", "patch": "@@ -1,3 +1,32 @@\n+2015-11-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb (Find_Selected_Component): In a synchronized\n+\tbody, a reference to an operation of an object of the same\n+\tsynchronized type was always interpreted as a reference to the\n+\tcurrent instance. This is not always the case, as the prefix of\n+\tthe reference may designate an object of the same type declared\n+\tin the enclosing context prior to the body.\n+\n+2015-11-12  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* impunit.ads, impunit.adb (Get_Kind_Of_File): New. Cleaned up\n+\timplementation from previous Get_Kind_Of_Unit.\n+\t(Get_Kind_Of_Unit): Reimplemented using Get_Kind_Of_File.\n+\t* debug.adb: Remove d.4 switch, no longer used.\n+\t* opt.ads: Update doc on Debugger_Level.\n+\t* gnat1drv.adb: Code clean ups.\n+\t* sinput.ads: minor fix in comment\n+\n+2015-11-12  Bob Duff  <duff@adacore.com>\n+\n+\t* sinfo.adb, sinfo.ads, sem_ch6.adb, atree.ads: Add\n+\tWas_Expression_Function flag, which is set in sem_ch6.adb when\n+\tconverting an Expression_Function into a Subprogram_Body.\n+\n+2015-11-12  Pascal Obry  <obry@adacore.com>\n+\n+\t* usage.adb: Update overflow checking documentation.\n+\n 2015-11-12  Tristan Gingold  <gingold@adacore.com>\n \n \t* snames.ads-tmpl: Name_Gnat_Extended_Ravenscar: New identifier."}, {"sha": "08ea27770c8559cbaa94a87496d3bd0f9d64fad6", "filename": "gcc/ada/atree.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fatree.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fatree.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.ads?ref=549cc9c2bcb93b5424c9a0967016d4e51e587311", "patch": "@@ -181,7 +181,7 @@ package Atree is\n    --   Flag10\n    --   Flag11        Note that Flag0-3 are stored separately in the Flags\n    --   Flag12        table, but that's a detail of the implementation which\n-   --   Flag13        is entirely hidden by the funcitonal interface.\n+   --   Flag13        is entirely hidden by the functional interface.\n    --   Flag14\n    --   Flag15\n    --   Flag16"}, {"sha": "e84719a893e0cf89bf724c35fd286495d95f0cd6", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=549cc9c2bcb93b5424c9a0967016d4e51e587311", "patch": "@@ -148,12 +148,16 @@ procedure Gnat1drv is\n          Generate_C_Code := True;\n          Modify_Tree_For_C := True;\n          Unnest_Subprogram_Mode := True;\n-         Back_Annotate_Rep_Info := True;\n \n          --  Set operating mode to Generate_Code to benefit from full front-end\n          --  expansion (e.g. generics).\n \n          Operating_Mode := Generate_Code;\n+\n+         --  Suppress alignment checks since we do not have access to alignment\n+         --  info on the target\n+\n+         Suppress_Options.Suppress (Alignment_Check) := False;\n       end if;\n \n       --  -gnatd.E sets Error_To_Warning mode, causing selected error messages\n@@ -1346,8 +1350,8 @@ begin\n       Back_End.Call_Back_End (Back_End_Mode);\n \n       --  Once the backend is complete, we unlock the names table. This call\n-      --  allows a few extra entries, needed for example for the file name for\n-      --  the library file output.\n+      --  allows a few extra entries, needed for example for the file name\n+      --  for the library file output.\n \n       Namet.Unlock;\n "}, {"sha": "5fea99d59c908b1c8171433cb3a414c5c9dc54e9", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 45, "deletions": 53, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=549cc9c2bcb93b5424c9a0967016d4e51e587311", "patch": "@@ -635,45 +635,42 @@ package body Impunit is\n                  (\"utf_32\", Sutf_32'Access));\n \n    ----------------------\n-   -- Get_Kind_Of_Unit --\n+   -- Get_Kind_Of_File --\n    ----------------------\n \n-   function Get_Kind_Of_Unit (U : Unit_Number_Type) return Kind_Of_Unit is\n-      Fname : constant File_Name_Type := Unit_File_Name (U);\n+   function Get_Kind_Of_File (File : String) return Kind_Of_Unit is\n+      pragma Assert (File'First = 1);\n+\n+      Buffer : String (1 .. 8);\n \n    begin\n       Error_Msg_Strlen := 0;\n-      Get_Name_String (Fname);\n \n       --  Ada/System/Interfaces are all Ada 95 units\n \n-      if (Name_Len =  7 and then Name_Buffer (1 ..  7) = \"ada.ads\")\n-           or else\n-         (Name_Len = 10 and then Name_Buffer (1 .. 10) = \"system.ads\")\n-           or else\n-         (Name_Len = 12 and then Name_Buffer (1 .. 12) = \"interfac.ads\")\n+      if File = \"ada.ads\"\n+        or else File = \"system.ads\"\n+        or else File = \"interfac.ads\"\n       then\n          return Ada_95_Unit;\n       end if;\n \n       --  If length of file name is greater than 12, not predefined. The value\n       --  12 here is an 8 char name with extension .ads.\n \n-      if Name_Len > 12 then\n+      if File'Length > 12 then\n          return Not_Predefined_Unit;\n       end if;\n \n       --  Not predefined if file name does not start with a- g- s- i-\n \n-      if Name_Len < 3\n-        or else Name_Buffer (2) /= '-'\n-        or else (Name_Buffer (1) /= 'a'\n-                   and then\n-                 Name_Buffer (1) /= 'g'\n-                   and then\n-                 Name_Buffer (1) /= 'i'\n-                   and then\n-                 Name_Buffer (1) /= 's')\n+      if File'Length < 3\n+        or else File (2) /= '-'\n+        or else\n+          (File (1) /= 'a'\n+            and then File (1) /= 'g'\n+            and then File (1) /= 'i'\n+            and then File (1) /= 's')\n       then\n          return Not_Predefined_Unit;\n       end if;\n@@ -687,83 +684,68 @@ package body Impunit is\n       --  this routine to detect when a construct comes from an instance of\n       --  a generic defined in a predefined unit.\n \n-      if Name_Buffer (Name_Len - 3 .. Name_Len) /= \".ads\"\n+      if File (File'Last - 3 .. File'Last) /= \".ads\"\n            and then\n-         Name_Buffer (Name_Len - 3 .. Name_Len) /= \".adb\"\n+         File (File'Last - 3 .. File'Last) /= \".adb\"\n       then\n          return Not_Predefined_Unit;\n       end if;\n \n       --  Otherwise normalize file name to 8 characters\n \n-      Name_Len := Name_Len - 4;\n-      while Name_Len < 8 loop\n-         Name_Len := Name_Len + 1;\n-         Name_Buffer (Name_Len) := ' ';\n+      Buffer (1 .. File'Length - 4) := File (1 .. File'Length - 4);\n+\n+      for J in File'Length - 3 .. 8 loop\n+         Buffer (J) := ' ';\n       end loop;\n \n       --  See if name is in 95 list\n \n       for J in Non_Imp_File_Names_95'Range loop\n-         if Name_Buffer (1 .. 8) = Non_Imp_File_Names_95 (J).Fname then\n+         if Buffer = Non_Imp_File_Names_95 (J).Fname then\n             return Ada_95_Unit;\n          end if;\n       end loop;\n \n       --  See if name is in 2005 list\n \n       for J in Non_Imp_File_Names_05'Range loop\n-         if Name_Buffer (1 .. 8) = Non_Imp_File_Names_05 (J).Fname then\n+         if Buffer = Non_Imp_File_Names_05 (J).Fname then\n             return Ada_2005_Unit;\n          end if;\n       end loop;\n \n       --  See if name is in 2012 list\n \n       for J in Non_Imp_File_Names_12'Range loop\n-         if Name_Buffer (1 .. 8) = Non_Imp_File_Names_12 (J).Fname then\n+         if Buffer = Non_Imp_File_Names_12 (J).Fname then\n             return Ada_2012_Unit;\n          end if;\n       end loop;\n \n       --  Only remaining special possibilities are children of System.RPC and\n       --  System.Garlic and special files of the form System.Aux...\n \n-      Get_Name_String (Unit_Name (U));\n-\n-      if Name_Len > 12\n-        and then Name_Buffer (1 .. 11) = \"system.rpc.\"\n-      then\n-         return Ada_95_Unit;\n-      end if;\n-\n-      if Name_Len > 15\n-        and then Name_Buffer (1 .. 14) = \"system.garlic.\"\n-      then\n-         return Ada_95_Unit;\n-      end if;\n-\n-      if Name_Len > 11\n-        and then Name_Buffer (1 .. 10) = \"system.aux\"\n+      if File (1 .. 5) = \"s-rpc\"\n+        or else File (1 .. 5) = \"s-gar\"\n+        or else File (1 .. 5) = \"s-aux\"\n       then\n          return Ada_95_Unit;\n       end if;\n \n       --  All tests failed, this is definitely an implementation unit. See if\n       --  we have an alternative name.\n \n-      Get_Name_String (Fname);\n-\n-      if Name_Len in 11 .. 12\n-        and then Name_Buffer (1 .. 2) = \"s-\"\n-        and then Name_Buffer (Name_Len - 3 .. Name_Len) = \".ads\"\n+      if File'Length in 11 .. 12\n+        and then File (1 .. 2) = \"s-\"\n+        and then File (File'Last - 3 .. File'Last) = \".ads\"\n       then\n          for J in Map_Array'Range loop\n-            if (Name_Len = 12 and then\n-                 Name_Buffer (3 .. 8) = Map_Array (J).Fname)\n+            if (File'Length = 12 and then\n+                 File (3 .. 8) = Map_Array (J).Fname)\n               or else\n-               (Name_Len = 11 and then\n-                 Name_Buffer (3 .. 7) = Map_Array (J).Fname (1 .. 5))\n+               (File'Length = 11 and then\n+                 File (3 .. 7) = Map_Array (J).Fname (1 .. 5))\n             then\n                Error_Msg_Strlen := Map_Array (J).Aname'Length;\n                Error_Msg_String (1 .. Error_Msg_Strlen) :=\n@@ -773,6 +755,16 @@ package body Impunit is\n       end if;\n \n       return Implementation_Unit;\n+   end Get_Kind_Of_File;\n+\n+   ----------------------\n+   -- Get_Kind_Of_Unit --\n+   ----------------------\n+\n+   function Get_Kind_Of_Unit (U : Unit_Number_Type) return Kind_Of_Unit is\n+   begin\n+      Get_Name_String (Unit_File_Name (U));\n+      return Get_Kind_Of_File (Name_Buffer (1 .. Name_Len));\n    end Get_Kind_Of_Unit;\n \n    -------------------"}, {"sha": "f4a11576848e0e027a4bd246dbc1e60469ff97eb", "filename": "gcc/ada/impunit.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fimpunit.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fimpunit.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.ads?ref=549cc9c2bcb93b5424c9a0967016d4e51e587311", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2000-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2000-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -62,11 +62,14 @@ package Impunit is\n    function Get_Kind_Of_Unit (U : Unit_Number_Type) return Kind_Of_Unit;\n    --  Given the unit number of a unit, this function determines the type\n    --  of the unit, as defined above. If the result is Implementation_Unit,\n-   --  then the name of a possible atlernative equivalent unit is placed in\n+   --  then the name of a possible alternative equivalent unit is placed in\n    --  Error_Msg_String/Slen on return. If there is no alternative name, or if\n    --  the result is not Implementation_Unit, then Error_Msg_Slen is zero on\n    --  return, indicating that no alternative name was found.\n \n+   function Get_Kind_Of_File (File : String) return Kind_Of_Unit;\n+   --  Same as Get_Kind_Of_Unit, for a given filename\n+\n    function Is_Known_Unit (Nam : Node_Id) return Boolean;\n    --  Nam is the possible name of a child unit, represented as a selected\n    --  component node. This function determines whether the name matches one of"}, {"sha": "60aeb28c9afe0176aa9007fdc1cf72457c03e62a", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=549cc9c2bcb93b5424c9a0967016d4e51e587311", "patch": "@@ -422,8 +422,9 @@ package Opt is\n    subtype Debug_Level_Value is Nat range 0 .. 3;\n    Debugger_Level : Debug_Level_Value := 0;\n    --  The value given to the -g parameter. The default value for -g with\n-   --  no value is 2. This is not currently used but is retained for possible\n-   --  future use.\n+   --  no value is 2. If no -g is specified, defaults to 0.\n+   --  Note that the generated code should never depend on this variable,\n+   --  since we want debug info to be non intrusive on the generate code.\n \n    Default_Exit_Status : Int := 0;\n    --  GNATBIND"}, {"sha": "a40baa59292c77eedfe2b324271b29b47fd9870f", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=549cc9c2bcb93b5424c9a0967016d4e51e587311", "patch": "@@ -334,6 +334,7 @@ package body Sem_Ch6 is\n           Handled_Statement_Sequence =>\n             Make_Handled_Sequence_Of_Statements (LocX,\n               Statements => New_List (Ret)));\n+      Set_Was_Expression_Function (New_Body);\n \n       --  If the expression completes a generic subprogram, we must create a\n       --  separate node for the body, because at instantiation the original"}, {"sha": "9e581e0fa52564682afffc6d26aa02f8c3f3e09b", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=549cc9c2bcb93b5424c9a0967016d4e51e587311", "patch": "@@ -6774,7 +6774,26 @@ package body Sem_Ch8 is\n             --  Prefix denotes an enclosing loop, block, or task, i.e. an\n             --  enclosing construct that is not a subprogram or accept.\n \n-            Find_Expanded_Name (N);\n+            --  A special case: a protected body may call an operation\n+            --  on an external object of the same type, in which case it\n+            --  is not an expanded name. If the prefix is the type itself,\n+            --  or the context is a single synchronized object it can only\n+            --  be interpreted as an expanded name.\n+\n+            if Is_Concurrent_Type (Etype (P_Name)) then\n+               if Is_Type (P_Name)\n+                  or else Present (Anonymous_Object (Etype (P_Name)))\n+               then\n+                  Find_Expanded_Name (N);\n+\n+               else\n+                  Analyze_Selected_Component (N);\n+                  return;\n+               end if;\n+\n+            else\n+               Find_Expanded_Name (N);\n+            end if;\n \n          elsif Ekind (P_Name) = E_Package then\n             Find_Expanded_Name (N);"}, {"sha": "b97fa587657fe90fe6191b23582035d3f7528929", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=549cc9c2bcb93b5424c9a0967016d4e51e587311", "patch": "@@ -3286,6 +3286,14 @@ package body Sinfo is\n       return Elist5 (N);\n    end Used_Operations;\n \n+   function Was_Expression_Function\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Subprogram_Body);\n+      return Flag18 (N);\n+   end Was_Expression_Function;\n+\n    function Was_Originally_Stub\n       (N : Node_Id) return Boolean is\n    begin\n@@ -6525,6 +6533,14 @@ package body Sinfo is\n       Set_Elist5 (N, Val);\n    end Set_Used_Operations;\n \n+   procedure Set_Was_Expression_Function\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Subprogram_Body);\n+      Set_Flag18 (N, Val);\n+   end Set_Was_Expression_Function;\n+\n    procedure Set_Was_Originally_Stub\n       (N : Node_Id; Val : Boolean := True) is\n    begin"}, {"sha": "4b18de97f920d2aa2e1dbbdc465a86a833d57f6f", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=549cc9c2bcb93b5424c9a0967016d4e51e587311", "patch": "@@ -2220,6 +2220,14 @@ package Sinfo is\n    --    on exit from the scope of the use_type_clause, in particular in the\n    --    case of Use_All_Type, when those operations several scopes.\n \n+   --  Was_Expression_Function (Flag18-Sem)\n+   --    Present in N_Subprogram_Body. True if the original source had an\n+   --    N_Expression_Function, which was converted to the N_Subprogram_Body\n+   --    by Analyze_Expression_Function. This is needed by ASIS to correctly\n+   --    recreate the expression function (for the instance body) when the\n+   --    completion of a generic function declaration is an expression\n+   --    function.\n+\n    --  Was_Originally_Stub (Flag13-Sem)\n    --    This flag is set in the node for a proper body that replaces stub.\n    --    During the analysis procedure, stubs in some situations get rewritten\n@@ -5212,6 +5220,7 @@ package Sinfo is\n       --  Is_Task_Master (Flag5-Sem)\n       --  Was_Originally_Stub (Flag13-Sem)\n       --  Has_Relative_Deadline_Pragma (Flag9-Sem)\n+      --  Was_Expression_Function (Flag18-Sem)\n \n       -------------------------\n       -- Expression Function --\n@@ -9795,6 +9804,9 @@ package Sinfo is\n    function Used_Operations\n      (N : Node_Id) return Elist_Id;   -- Elist5\n \n+   function Was_Expression_Function\n+     (N : Node_Id) return Boolean;    -- Flag18\n+\n    function Was_Originally_Stub\n      (N : Node_Id) return Boolean;    -- Flag13\n \n@@ -10830,6 +10842,9 @@ package Sinfo is\n    procedure Set_Used_Operations\n      (N : Node_Id; Val : Elist_Id);           -- Elist5\n \n+   procedure Set_Was_Expression_Function\n+     (N : Node_Id; Val : Boolean := True);    -- Flag18\n+\n    procedure Set_Was_Originally_Stub\n      (N : Node_Id; Val : Boolean := True);    -- Flag13\n \n@@ -12938,6 +12953,7 @@ package Sinfo is\n    pragma Inline (Variants);\n    pragma Inline (Visible_Declarations);\n    pragma Inline (Used_Operations);\n+   pragma Inline (Was_Expression_Function);\n    pragma Inline (Was_Originally_Stub);\n    pragma Inline (Withed_Body);\n \n@@ -13277,6 +13293,7 @@ package Sinfo is\n    pragma Inline (Set_Variant_Part);\n    pragma Inline (Set_Variants);\n    pragma Inline (Set_Visible_Declarations);\n+   pragma Inline (Set_Was_Expression_Function);\n    pragma Inline (Set_Was_Originally_Stub);\n    pragma Inline (Set_Withed_Body);\n "}, {"sha": "f1a27245afc599666c53274cd72e1689b3b0b50c", "filename": "gcc/ada/sinput.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fsinput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fsinput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.ads?ref=549cc9c2bcb93b5424c9a0967016d4e51e587311", "patch": "@@ -608,7 +608,7 @@ package Sinput is\n    function Num_Source_Lines (S : Source_File_Index) return Nat;\n    --  Returns the number of source lines (this is equivalent to reading\n    --  the value of Last_Source_Line, but returns Nat rather than a\n-   --  physical line number.\n+   --  physical line number).\n \n    procedure Register_Source_Ref_Pragma\n      (File_Name          : File_Name_Type;"}, {"sha": "99edf948928a41673e473d6bde96ee359fd3571a", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/549cc9c2bcb93b5424c9a0967016d4e51e587311/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=549cc9c2bcb93b5424c9a0967016d4e51e587311", "patch": "@@ -360,8 +360,11 @@ begin\n \n    --  Line for -gnato switch\n \n+   Write_Switch_Char (\"o0\");\n+   Write_Line (\"Disable overflow checking (on by default)\");\n+\n    Write_Switch_Char (\"o\");\n-   Write_Line (\"Enable overflow checking mode to CHECKED (off by default)\");\n+   Write_Line (\"Enable overflow checking in STRICT (-gnato1) mode (default)\");\n \n    --  Lines for -gnato? switches\n "}]}