{"sha": "640ef7149ec24b61b0a1dcb642d59cb29c7e9983", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQwZWY3MTQ5ZWMyNGI2MWIwYTFkY2I2NDJkNTljYjI5YzdlOTk4Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2020-03-03T16:48:54Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-10T13:34:56Z"}, "message": "[Ada] Remove Determine_License\n\n2020-06-10  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* scn.adb (Determine_License): Remove.", "tree": {"sha": "c2d10cd1cc9ad3401e87696eabae4fd34ed82cb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2d10cd1cc9ad3401e87696eabae4fd34ed82cb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/640ef7149ec24b61b0a1dcb642d59cb29c7e9983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/640ef7149ec24b61b0a1dcb642d59cb29c7e9983", "html_url": "https://github.com/Rust-GCC/gccrs/commit/640ef7149ec24b61b0a1dcb642d59cb29c7e9983", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/640ef7149ec24b61b0a1dcb642d59cb29c7e9983/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "948590aa2838a8b77dc8e48eb225312865303ce9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/948590aa2838a8b77dc8e48eb225312865303ce9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/948590aa2838a8b77dc8e48eb225312865303ce9"}], "stats": {"total": 160, "additions": 1, "deletions": 159}, "files": [{"sha": "408e31ff71b830299e3756044486c38d57f7cc1b", "filename": "gcc/ada/scn.adb", "status": "modified", "additions": 1, "deletions": 159, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/640ef7149ec24b61b0a1dcb642d59cb29c7e9983/gcc%2Fada%2Fscn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/640ef7149ec24b61b0a1dcb642d59cb29c7e9983/gcc%2Fada%2Fscn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscn.adb?ref=640ef7149ec24b61b0a1dcb642d59cb29c7e9983", "patch": "@@ -36,158 +36,11 @@ with Uintp;    use Uintp;\n \n package body Scn is\n \n-   use ASCII;\n-\n    Used_As_Identifier : array (Token_Type) of Boolean;\n    --  Flags set True if a given keyword is used as an identifier (used to\n    --  make sure that we only post an error message for incorrect use of a\n    --  keyword as an identifier once for a given keyword).\n \n-   function Determine_License return License_Type;\n-   --  Scan header of file and check that it has an appropriate GNAT-style\n-   --  header with a proper license statement. Returns GPL, Unrestricted,\n-   --  or Modified_GPL depending on header. If none of these, returns Unknown.\n-\n-   -----------------------\n-   -- Determine_License --\n-   -----------------------\n-\n-   function Determine_License return License_Type is\n-      GPL_Found : Boolean := False;\n-      Result    : License_Type;\n-\n-      function Contains (S : String) return Boolean;\n-      --  See if current comment contains successive non-blank characters\n-      --  matching the contents of S. If so leave Scan_Ptr unchanged and\n-      --  return True, otherwise leave Scan_Ptr unchanged and return False.\n-\n-      procedure Skip_EOL;\n-      --  Skip to line terminator character\n-\n-      --------------\n-      -- Contains --\n-      --------------\n-\n-      function Contains (S : String) return Boolean is\n-         CP : Natural;\n-         SP : Source_Ptr;\n-         SS : Source_Ptr;\n-\n-      begin\n-         --  Loop to check characters. This loop is terminated by end of\n-         --  line, and also we need to check for the EOF case, to take\n-         --  care of files containing only comments.\n-\n-         SP := Scan_Ptr;\n-         while Source (SP) /= CR and then\n-               Source (SP) /= LF and then\n-               Source (SP) /= EOF\n-         loop\n-            if Source (SP) = S (S'First) then\n-               SS := SP;\n-               CP := S'First;\n-\n-               loop\n-                  SS := SS + 1;\n-                  CP := CP + 1;\n-\n-                  if CP > S'Last then\n-                     return True;\n-                  end if;\n-\n-                  while Source (SS) = ' ' loop\n-                     SS := SS + 1;\n-                  end loop;\n-\n-                  exit when Source (SS) /= S (CP);\n-               end loop;\n-            end if;\n-\n-            SP := SP + 1;\n-         end loop;\n-\n-         return False;\n-      end Contains;\n-\n-      --------------\n-      -- Skip_EOL --\n-      --------------\n-\n-      procedure Skip_EOL is\n-      begin\n-         while Source (Scan_Ptr) /= CR\n-           and then Source (Scan_Ptr) /= LF\n-           and then Source (Scan_Ptr) /= EOF\n-         loop\n-            Scan_Ptr := Scan_Ptr + 1;\n-         end loop;\n-      end Skip_EOL;\n-\n-   --  Start of processing for Determine_License\n-\n-   begin\n-      loop\n-         if Source (Scan_Ptr) /= '-'\n-           or else Source (Scan_Ptr + 1) /= '-'\n-         then\n-            if GPL_Found then\n-               Result := GPL;\n-               exit;\n-            else\n-               Result := Unknown;\n-               exit;\n-            end if;\n-\n-         elsif Contains (\"Asaspecialexception\") then\n-            if GPL_Found then\n-               Result := Modified_GPL;\n-               exit;\n-            end if;\n-\n-         elsif Contains (\"GNUGeneralPublicLicense\") then\n-            GPL_Found := True;\n-\n-         elsif\n-             Contains\n-               (\"ThisspecificationisadaptedfromtheAdaSemanticInterface\")\n-           or else\n-             Contains\n-              (\"ThisspecificationisderivedfromtheAdaReferenceManual\")\n-         then\n-            Result := Unrestricted;\n-            exit;\n-         end if;\n-\n-         Skip_EOL;\n-\n-         Scanner.Check_End_Of_Line;\n-\n-         if Source (Scan_Ptr) /= EOF then\n-\n-            --  We have to take into account a degenerate case when the source\n-            --  file contains only comments and no Ada code.\n-\n-            declare\n-               Physical : Boolean;\n-\n-            begin\n-               Skip_Line_Terminators (Scan_Ptr, Physical);\n-\n-               --  If we are at start of physical line, update scan pointers\n-               --  to reflect the start of the new line.\n-\n-               if Physical then\n-                  Current_Line_Start       := Scan_Ptr;\n-                  Start_Column             := Scanner.Set_Start_Column;\n-                  First_Non_Blank_Location := Scan_Ptr;\n-               end if;\n-            end;\n-         end if;\n-      end loop;\n-\n-      return Result;\n-   end Determine_License;\n-\n    ----------------------------\n    -- Determine_Token_Casing --\n    ----------------------------\n@@ -203,10 +56,7 @@ package body Scn is\n \n    procedure Initialize_Scanner\n      (Unit  : Unit_Number_Type;\n-      Index : Source_File_Index)\n-   is\n-      GNAT_Hedr : constant Text_Buffer (1 .. 78) := (others => '-');\n-\n+      Index : Source_File_Index) is\n    begin\n       Scanner.Initialize_Scanner (Index);\n       Set_Unit (Index, Unit);\n@@ -218,14 +68,6 @@ package body Scn is\n \n       Set_Comes_From_Source_Default (True);\n \n-      --  Check license if GNAT type header possibly present\n-\n-      if Source_Last (Index) - Scan_Ptr > 80\n-        and then Source (Scan_Ptr .. Scan_Ptr + 77) = GNAT_Hedr\n-      then\n-         Set_License (Current_Source_File, Determine_License);\n-      end if;\n-\n       Check_For_BOM;\n \n       --  Because of the License stuff above, Scng.Initialize_Scanner cannot"}]}