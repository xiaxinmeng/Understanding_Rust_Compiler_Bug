{"sha": "d3bbfc593690e307c5c41885ebec8a7ecabb1a41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNiYmZjNTkzNjkwZTMwN2M1YzQxODg1ZWJlYzhhN2VjYWJiMWE0MQ==", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2018-07-16T14:09:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-07-16T14:09:49Z"}, "message": "[Ada] Fix spelling for compile-time-known\n\n2018-07-16  Gary Dismukes  <dismukes@adacore.com>\n\ngcc/ada/\n\n\t* sem_eval.adb: Fix spelling for compile-time-known.\n\nFrom-SVN: r262699", "tree": {"sha": "aa303d1b229fa29fc47ec27e17a2670a40c47ca5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa303d1b229fa29fc47ec27e17a2670a40c47ca5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3bbfc593690e307c5c41885ebec8a7ecabb1a41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3bbfc593690e307c5c41885ebec8a7ecabb1a41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3bbfc593690e307c5c41885ebec8a7ecabb1a41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3bbfc593690e307c5c41885ebec8a7ecabb1a41/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "705bcbfeeccd0217f1764e9669ae727960563d24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/705bcbfeeccd0217f1764e9669ae727960563d24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/705bcbfeeccd0217f1764e9669ae727960563d24"}], "stats": {"total": 40, "additions": 22, "deletions": 18}, "files": [{"sha": "f41cf4d1a3a8aa76c523e2bfb2895f9400f57427", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3bbfc593690e307c5c41885ebec8a7ecabb1a41/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3bbfc593690e307c5c41885ebec8a7ecabb1a41/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d3bbfc593690e307c5c41885ebec8a7ecabb1a41", "patch": "@@ -1,3 +1,7 @@\n+2018-07-16  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_eval.adb: Fix spelling for compile-time-known.\n+\n 2018-07-16  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_eval.adb (Compile_Time_Known_Value): Add a guard which prevents"}, {"sha": "a567143f4484f3a163725730833bf9ee11f4d5c2", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3bbfc593690e307c5c41885ebec8a7ecabb1a41/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3bbfc593690e307c5c41885ebec8a7ecabb1a41/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=d3bbfc593690e307c5c41885ebec8a7ecabb1a41", "patch": "@@ -104,7 +104,7 @@ package body Sem_Eval is\n    --  Used to convert unsigned (modular) values for folding logical ops\n \n    --  The following declarations are used to maintain a cache of nodes that\n-   --  have compile time known values. The cache is maintained only for\n+   --  have compile-time-known values. The cache is maintained only for\n    --  discrete types (the most common case), and is populated by calls to\n    --  Compile_Time_Known_Value and Expr_Value, but only used by Expr_Value\n    --  since it is possible for the status to change (in particular it is\n@@ -171,7 +171,7 @@ package body Sem_Eval is\n    --  result is No_Match, then it continues and checks the next element. If\n    --  the result is Match or Non_Static, this result is immediately given\n    --  as the result without checking the rest of the list. Expr can be of\n-   --  discrete, real, or string type and must be a compile time known value\n+   --  discrete, real, or string type and must be a compile-time-known value\n    --  (it is an error to make the call if these conditions are not met).\n \n    function Find_Universal_Operator_Type (N : Node_Id) return Entity_Id;\n@@ -231,7 +231,7 @@ package body Sem_Eval is\n \n    procedure Out_Of_Range (N : Node_Id);\n    --  This procedure is called if it is determined that node N, which appears\n-   --  in a non-static context, is a compile time known value which is outside\n+   --  in a non-static context, is a compile-time-known value which is outside\n    --  its range, i.e. the range of Etype. This is used in contexts where\n    --  this is an illegality if N is static, and should generate a warning\n    --  otherwise.\n@@ -840,7 +840,7 @@ package body Sem_Eval is\n \n       function Is_Same_Value (L, R : Node_Id) return Boolean;\n       --  Returns True iff L and R represent expressions that definitely have\n-      --  identical (but not necessarily compile time known) values Indeed the\n+      --  identical (but not necessarily compile-time-known) values Indeed the\n       --  caller is expected to have already dealt with the cases of compile\n       --  time known values, so these are not tested here.\n \n@@ -1043,7 +1043,7 @@ package body Sem_Eval is\n          then\n             return True;\n \n-         --  Or if they are compile time known and identical\n+         --  Or if they are compile-time-known and identical\n \n          elsif Compile_Time_Known_Value (Lf)\n                  and then\n@@ -1192,7 +1192,7 @@ package body Sem_Eval is\n             return Unknown;\n          end if;\n \n-      --  Case where comparison involves two compile time known values\n+      --  Case where comparison involves two compile-time-known values\n \n       elsif Compile_Time_Known_Value (L)\n               and then\n@@ -1515,7 +1515,7 @@ package body Sem_Eval is\n          end if;\n \n          --  Next attempt is to see if we have an entity compared with a\n-         --  compile time known value, where there is a current value\n+         --  compile-time-known value, where there is a current value\n          --  conditional for the entity which can tell us the result.\n \n          declare\n@@ -1667,7 +1667,7 @@ package body Sem_Eval is\n             return False;\n          end if;\n \n-         --  Otherwise check bounds for compile time known\n+         --  Otherwise check bounds for compile-time-known\n \n          if not Compile_Time_Known_Value (Type_Low_Bound (Typ)) then\n             return False;\n@@ -1731,15 +1731,15 @@ package body Sem_Eval is\n \n                   --  Guard against an illegal deferred constant whose full\n                   --  view is initialized with a reference to itself. Treat\n-                  --  this case as value not known at compile time.\n+                  --  this case as a value not known at compile time.\n \n                   if Is_Entity_Name (Val) and then Entity (Val) = Ent then\n                      return False;\n                   else\n                      return Compile_Time_Known_Value (Val);\n                   end if;\n \n-               --  Otherwise the constant does not have a compile time known\n+               --  Otherwise, the constant does not have a compile-time-known\n                --  value.\n \n                else\n@@ -1748,7 +1748,7 @@ package body Sem_Eval is\n             end if;\n          end;\n \n-      --  We have a value, see if it is compile time known\n+      --  We have a value, see if it is compile-time-known\n \n       else\n          --  Integer literals are worth storing in the cache\n@@ -1811,7 +1811,7 @@ package body Sem_Eval is\n             end if;\n          end;\n \n-      --  We have a value, see if it is compile time known\n+      --  We have a value, see if it is compile-time-known\n \n       else\n          if Compile_Time_Known_Value (Op) then\n@@ -2633,7 +2633,7 @@ package body Sem_Eval is\n                   if List_Length (Expressions (Arr)) >= Lin then\n                      Elm := Pick (Expressions (Arr), Lin);\n \n-                     --  If the resulting expression is compile time known,\n+                     --  If the resulting expression is compile-time-known,\n                      --  then we can rewrite the indexed component with this\n                      --  value, being sure to mark the result as non-static.\n                      --  We also reset the Sloc, in case this generates an\n@@ -4191,9 +4191,9 @@ package body Sem_Eval is\n       Val    : Uint;\n \n    begin\n-      --  If already in cache, then we know it's compile time known and we can\n+      --  If already in cache, then we know it's compile-time-known and we can\n       --  return the value that was previously stored in the cache since\n-      --  compile time known values cannot change.\n+      --  compile-time-known values cannot change.\n \n       if CV_Ent.N = N then\n          return CV_Ent.V;\n@@ -4708,7 +4708,7 @@ package body Sem_Eval is\n          end if;\n \n          --  If bounds not comparable at compile time, then the bounds of T2\n-         --  must be compile time known or we cannot answer the query.\n+         --  must be compile-time-known or we cannot answer the query.\n \n          if not Compile_Time_Known_Value (L2)\n            or else not Compile_Time_Known_Value (H2)\n@@ -6381,7 +6381,7 @@ package body Sem_Eval is\n \n       pragma Warnings (Off, Assume_Valid);\n       --  For now Assume_Valid is unreferenced since the current implementation\n-      --  always returns Unknown if N is not a compile time known value, but we\n+      --  always returns Unknown if N is not a compile-time-known value, but we\n       --  keep the parameter to allow for future enhancements in which we try\n       --  to get the information in the variable case as well.\n \n@@ -6414,7 +6414,7 @@ package body Sem_Eval is\n \n       --  Never known if this is a generic type, since the bounds of generic\n       --  types are junk. Note that if we only checked for static expressions\n-      --  (instead of compile time known values) below, we would not need this\n+      --  (instead of compile-time-known values) below, we would not need this\n       --  check, because values of a generic type can never be static, but they\n       --  can be known at compile time.\n "}]}