{"sha": "dfda198c74713f28f5159da31bcc52615e3c4423", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZkYTE5OGM3NDcxM2YyOGY1MTU5ZGEzMWJjYzUyNjE1ZTNjNDQyMw==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-09-02T14:01:51Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-09-02T14:01:51Z"}, "message": "[testsuite] Clean up effective_target cache.\n\n2015-09-02  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* lib/target-supports.exp (clear_effective_target_cache): New.\n\t(check_cached_effective_target): Update et_prop_list.\n\t* lib/asan-dg.exp (asan_finish): Call clear_effective_target_cache.\n\t* g++.dg/compat/compat.exp: Likewise.\n\t* g++.dg/compat/struct-layout-1.exp: Likewise.\n\t* lib/asan-dg.exp: Likewise.\n\t* lib/atomic-dg.exp: Likewise.\n\t* lib/cilk-plus-dg.exp: Likewise.\n\t* lib/clearcap.exp: Likewise.\n\t* lib/mpx-dg.exp: Likewise.\n\t* lib/tsan-dg.exp: Likewise.\n\t* lib/ubsan-dg.exp: Likewise.\n\nFrom-SVN: r227401", "tree": {"sha": "0902332df046d3d99992dd9a7bba90568f632e7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0902332df046d3d99992dd9a7bba90568f632e7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfda198c74713f28f5159da31bcc52615e3c4423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfda198c74713f28f5159da31bcc52615e3c4423", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfda198c74713f28f5159da31bcc52615e3c4423", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfda198c74713f28f5159da31bcc52615e3c4423/comments", "author": null, "committer": null, "parents": [{"sha": "d8e19f3114a751fd78aaef68e763f24d286b0f8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e19f3114a751fd78aaef68e763f24d286b0f8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e19f3114a751fd78aaef68e763f24d286b0f8c"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "8c7175f402963292cd4efd59d97a8039b6e3eda6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dfda198c74713f28f5159da31bcc52615e3c4423", "patch": "@@ -1,3 +1,18 @@\n+2015-09-02  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* lib/target-supports.exp (clear_effective_target_cache): New.\n+\t(check_cached_effective_target): Update et_prop_list.\n+\t* lib/asan-dg.exp (asan_finish): Call clear_effective_target_cache.\n+\t* g++.dg/compat/compat.exp: Likewise.\n+\t* g++.dg/compat/struct-layout-1.exp: Likewise.\n+\t* lib/asan-dg.exp: Likewise.\n+\t* lib/atomic-dg.exp: Likewise.\n+\t* lib/cilk-plus-dg.exp: Likewise.\n+\t* lib/clearcap.exp: Likewise.\n+\t* lib/mpx-dg.exp: Likewise.\n+\t* lib/tsan-dg.exp: Likewise.\n+\t* lib/ubsan-dg.exp: Likewise.\n+\n 2015-09-01  Kenneth Zadeck <zadeck@naturalbridge.com>\n         * gcc.c-torture/execute/ieee/20000320-1.c Fixed misplaced test case.\n "}, {"sha": "4c4b25f7e64a2dcb4bf1b325ad4e51e36699a721", "filename": "gcc/testsuite/g++.dg/compat/compat.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fcompat.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fcompat.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fcompat.exp?ref=dfda198c74713f28f5159da31bcc52615e3c4423", "patch": "@@ -78,6 +78,7 @@ proc compat-use-tst-compiler { } {\n \tset ALWAYS_CXXFLAGS $save_always_cxxflags\n \tset ld_library_path $save_ld_library_path\n \tset_ld_library_path_env_vars\n+\tclear_effective_target_cache\n     }\n }\n "}, {"sha": "097a731a6719656a9e9cd39680e60d61e8bff709", "filename": "gcc/testsuite/g++.dg/compat/struct-layout-1.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcompat%2Fstruct-layout-1.exp?ref=dfda198c74713f28f5159da31bcc52615e3c4423", "patch": "@@ -61,6 +61,7 @@ proc compat-use-alt-compiler { } {\n \tset ld_library_path $alt_ld_library_path\n \tset_ld_library_path_env_vars\n \trestore_gcc_exec_prefix_env_var\n+\tclear_effective_target_cache\n     }\n }\n "}, {"sha": "3ce264e21a33d6abdd1b684c8a3916e1ca04f700", "filename": "gcc/testsuite/lib/asan-dg.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2Flib%2Fasan-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2Flib%2Fasan-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fasan-dg.exp?ref=dfda198c74713f28f5159da31bcc52615e3c4423", "patch": "@@ -138,6 +138,7 @@ proc asan_finish { args } {\n     }\n     set ld_library_path $asan_saved_library_path\n     set_ld_library_path_env_vars\n+    clear_effective_target_cache\n }\n \n # Symbolize lines like"}, {"sha": "fe24127ac84ca39d37cffbe0cbc5ed71ba450cf3", "filename": "gcc/testsuite/lib/atomic-dg.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2Flib%2Fatomic-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2Flib%2Fatomic-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fatomic-dg.exp?ref=dfda198c74713f28f5159da31bcc52615e3c4423", "patch": "@@ -101,4 +101,5 @@ proc atomic_finish { args } {\n     } else {\n \tunset TEST_ALWAYS_FLAGS\n     }\n+    clear_effective_target_cache\n }"}, {"sha": "7f38f37f59f4c3b1449866c24c47a33655daa982", "filename": "gcc/testsuite/lib/cilk-plus-dg.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2Flib%2Fcilk-plus-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2Flib%2Fcilk-plus-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fcilk-plus-dg.exp?ref=dfda198c74713f28f5159da31bcc52615e3c4423", "patch": "@@ -101,4 +101,5 @@ proc cilkplus_finish { args } {\n     } else {\n \tunset TEST_ALWAYS_FLAGS\n     }\n+    clear_effective_target_cache\n }"}, {"sha": "3e2a88c8ba25c2c91bc083389066a93d1cbd72d6", "filename": "gcc/testsuite/lib/clearcap.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2Flib%2Fclearcap.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2Flib%2Fclearcap.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fclearcap.exp?ref=dfda198c74713f28f5159da31bcc52615e3c4423", "patch": "@@ -55,4 +55,5 @@ proc clearcap-finish { args } {\n     } else {\n \tunset TEST_ALWAYS_FLAGS\n     }\n+    clear_effective_target_cache\n }"}, {"sha": "b2bd40c2802f406441587ce0e9d6fe7112d37459", "filename": "gcc/testsuite/lib/mpx-dg.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2Flib%2Fmpx-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2Flib%2Fmpx-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fmpx-dg.exp?ref=dfda198c74713f28f5159da31bcc52615e3c4423", "patch": "@@ -142,4 +142,5 @@ proc mpx_finish { args } {\n     }\n     set ld_library_path $mpx_saved_library_path\n     set_ld_library_path_env_vars\n+    clear_effective_target_cache\n }"}, {"sha": "3f54729f5a73a2d0001b03c9645b992268038282", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=dfda198c74713f28f5159da31bcc52615e3c4423", "patch": "@@ -117,19 +117,45 @@ proc current_target_name { } {\n \n proc check_cached_effective_target { prop args } {\n     global et_cache\n+    global et_prop_list\n \n     set target [current_target_name]\n     if {![info exists et_cache($prop,target)]\n \t|| $et_cache($prop,target) != $target} {\n \tverbose \"check_cached_effective_target $prop: checking $target\" 2\n \tset et_cache($prop,target) $target\n \tset et_cache($prop,value) [uplevel eval $args]\n+\tlappend et_prop_list $prop\n+\tverbose \"check_cached_effective_target cached list is now: $et_prop_list\" 2\n     }\n     set value $et_cache($prop,value)\n     verbose \"check_cached_effective_target $prop: returning $value for $target\" 2\n     return $value\n }\n \n+# Clear effective-target cache. This is useful after testing\n+# effective-target features and overriding TEST_ALWAYS_FLAGS and/or\n+# ALWAYS_CXXFLAGS.\n+# If one changes ALWAYS_CXXFLAGS or TEST_ALWAYS_FLAGS then they should\n+# do a clear_effective_target_cache at the end as the target cache can\n+# make decisions based upon the flags, and those decisions need to be\n+# redone when the flags change. An example of this is the\n+# asan_init/asan_finish pair.\n+\n+proc clear_effective_target_cache { } {\n+    global et_cache\n+    global et_prop_list\n+\n+    if {[info exists et_prop_list]} {\n+\tverbose \"clear_effective_target_cache: $et_prop_list\" 2\n+\tforeach prop $et_prop_list {\n+\t    unset et_cache($prop,value)\n+\t    unset et_cache($prop,target)\n+\t}\n+\tunset et_prop_list\n+    }\n+}\n+\n # Like check_compile, but delete the output file and return true if the\n # compiler printed no messages.\n proc check_no_compiler_messages_nocache {args} {"}, {"sha": "ff51fdf34f914fed8959e703164603dfd4749f22", "filename": "gcc/testsuite/lib/tsan-dg.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2Flib%2Ftsan-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2Flib%2Ftsan-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftsan-dg.exp?ref=dfda198c74713f28f5159da31bcc52615e3c4423", "patch": "@@ -149,4 +149,5 @@ proc tsan_finish { args } {\n     }\n     set ld_library_path $tsan_saved_library_path\n     set_ld_library_path_env_vars\n+    clear_effective_target_cache\n }"}, {"sha": "65799db0d93fe883e8752afcc12c80dd333bf275", "filename": "gcc/testsuite/lib/ubsan-dg.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2Flib%2Fubsan-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfda198c74713f28f5159da31bcc52615e3c4423/gcc%2Ftestsuite%2Flib%2Fubsan-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fubsan-dg.exp?ref=dfda198c74713f28f5159da31bcc52615e3c4423", "patch": "@@ -121,4 +121,5 @@ proc ubsan_finish { args } {\n     }\n     set ld_library_path $ubsan_saved_library_path\n     set_ld_library_path_env_vars\n+    clear_effective_target_cache\n }"}]}