{"sha": "6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI0YTg1YWQ2ZjQxYTBmMmYxYTEwOTE3ZGMzYjkzNjZjOWE1YzA1MQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-08-08T14:40:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-08T14:40:30Z"}, "message": "tree-call-cdce.c (check_pow): Simplify.\n\n2012-08-08  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-call-cdce.c (check_pow): Simplify.\n\t(gen_conditions_for_pow_int_base): Likewise.\n\t* tree-ssa-dom.c (propagate_rhs_into_lhs): Do not handle\n\tvirtual operands here.\n\t* tree-ssa-operands.c (get_name_decl): Remove unused function.\n\t* gimplify.c (gimple_regimplify_operands): Remove dead code.\n\t* tree-vrp.c (get_value_range): Move SSA_NAME_VAR access.\n\t* tree-parloops.c (create_phi_for_local_result): Use copy_ssa_name.\n\t* value-prof.c (gimple_ic): Use duplicate_ssa_name.\n\t(gimple_stringop_fixed_value): Likewise.\n\t* tree.c (needs_to_live_in_memory): Remove SSA name handling.\n\t* tree-stdarg.c (find_va_list_reference): Store SSA_NAME_VERSIONs\n\tin the bitmap alongside shifted DECL_UIDs.\n\t(va_list_counter_struct_op): Likewise.\n\t(va_list_ptr_read): Likewise.\n\t(va_list_ptr_write): Likewise.\n\t(check_va_list_escapes): Likewise.\n\t(check_all_va_list_escapes): Likewise.\n\t(execute_optimize_stdarg): Likewise.\n\t* tree-outof-ssa.c (insert_backedge_copies): Use copy_ssa_name.\n\nFrom-SVN: r190229", "tree": {"sha": "3b48e76184517cb4ee08b82df374d2a7e86ec1e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b48e76184517cb4ee08b82df374d2a7e86ec1e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3b1e1a029a93f57ad64209560f00c2ec1f24fdfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b1e1a029a93f57ad64209560f00c2ec1f24fdfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b1e1a029a93f57ad64209560f00c2ec1f24fdfe"}], "stats": {"total": 160, "additions": 71, "deletions": 89}, "files": [{"sha": "18e891b6dc53ba442750655c085369f8097142e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051", "patch": "@@ -1,3 +1,26 @@\n+2012-08-08  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-call-cdce.c (check_pow): Simplify.\n+\t(gen_conditions_for_pow_int_base): Likewise.\n+\t* tree-ssa-dom.c (propagate_rhs_into_lhs): Do not handle\n+\tvirtual operands here.\n+\t* tree-ssa-operands.c (get_name_decl): Remove unused function.\n+\t* gimplify.c (gimple_regimplify_operands): Remove dead code.\n+\t* tree-vrp.c (get_value_range): Move SSA_NAME_VAR access.\n+\t* tree-parloops.c (create_phi_for_local_result): Use copy_ssa_name.\n+\t* value-prof.c (gimple_ic): Use duplicate_ssa_name.\n+\t(gimple_stringop_fixed_value): Likewise.\n+\t* tree.c (needs_to_live_in_memory): Remove SSA name handling.\n+\t* tree-stdarg.c (find_va_list_reference): Store SSA_NAME_VERSIONs\n+\tin the bitmap alongside shifted DECL_UIDs.\n+\t(va_list_counter_struct_op): Likewise.\n+\t(va_list_ptr_read): Likewise.\n+\t(va_list_ptr_write): Likewise.\n+\t(check_va_list_escapes): Likewise.\n+\t(check_all_va_list_escapes): Likewise.\n+\t(execute_optimize_stdarg): Likewise.\n+\t* tree-outof-ssa.c (insert_backedge_copies): Use copy_ssa_name.\n+\n 2012-08-08  Richard Sandiford  <rdsandiford@googlemail.com>\n \t    H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "c704010436b4329a5e299810a019532e1a66cd0d", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051", "patch": "@@ -8363,7 +8363,7 @@ void\n gimple_regimplify_operands (gimple stmt, gimple_stmt_iterator *gsi_p)\n {\n   size_t i, num_ops;\n-  tree orig_lhs = NULL_TREE, lhs;\n+  tree lhs;\n   gimple_seq pre = NULL;\n   gimple post_stmt = NULL;\n   struct gimplify_ctx gctx;\n@@ -8429,7 +8429,6 @@ gimple_regimplify_operands (gimple stmt, gimple_stmt_iterator *gsi_p)\n \t and ASMs are executed before the LHS.  The ordering is not\n \t important for other statements.  */\n       num_ops = gimple_num_ops (stmt);\n-      orig_lhs = gimple_get_lhs (stmt);\n       for (i = num_ops; i > 0; i--)\n \t{\n \t  tree op = gimple_op (stmt, i - 1);\n@@ -8507,10 +8506,6 @@ gimple_regimplify_operands (gimple stmt, gimple_stmt_iterator *gsi_p)\n \t  if (need_temp)\n \t    {\n \t      tree temp = create_tmp_reg (TREE_TYPE (lhs), NULL);\n-\n-\t      if (TREE_CODE (orig_lhs) == SSA_NAME)\n-\t\torig_lhs = SSA_NAME_VAR (orig_lhs);\n-\n \t      if (gimple_in_ssa_p (cfun))\n \t\ttemp = make_ssa_name (temp, NULL);\n \t      gimple_set_lhs (stmt, temp);"}, {"sha": "c879548483b7729e52bab4ad9e743c857ad2ec57", "filename": "gcc/tree-call-cdce.c", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2Ftree-call-cdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2Ftree-call-cdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-call-cdce.c?ref=6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051", "patch": "@@ -203,7 +203,7 @@ check_pow (gimple pow_call)\n     }\n   else if (bc == SSA_NAME)\n     {\n-      tree base_val0, base_var, type;\n+      tree base_val0, type;\n       gimple base_def;\n       int bit_sz;\n \n@@ -217,11 +217,7 @@ check_pow (gimple pow_call)\n         return false;\n       base_val0 = gimple_assign_rhs1 (base_def);\n \n-      base_var = SSA_NAME_VAR (base_val0);\n-      if (!DECL_P  (base_var))\n-        return false;\n-\n-      type = TREE_TYPE (base_var);\n+      type = TREE_TYPE (base_val0);\n       if (TREE_CODE (type) != INTEGER_TYPE)\n         return false;\n       bit_sz = TYPE_PRECISION (type);\n@@ -448,7 +444,7 @@ gen_conditions_for_pow_int_base (tree base, tree expn,\n {\n   gimple base_def;\n   tree base_val0;\n-  tree base_var, int_type;\n+  tree int_type;\n   tree temp, tempn;\n   tree cst0;\n   gimple stmt1, stmt2;\n@@ -457,8 +453,7 @@ gen_conditions_for_pow_int_base (tree base, tree expn,\n \n   base_def = SSA_NAME_DEF_STMT (base);\n   base_val0 = gimple_assign_rhs1 (base_def);\n-  base_var = SSA_NAME_VAR (base_val0);\n-  int_type = TREE_TYPE (base_var);\n+  int_type = TREE_TYPE (base_val0);\n   bit_sz = TYPE_PRECISION (int_type);\n   gcc_assert (bit_sz > 0\n               && bit_sz <= MAX_BASE_INT_BIT_SIZE);"}, {"sha": "5d5d323a07b69da8180287ba6c4b72ab521b001c", "filename": "gcc/tree-outof-ssa.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2Ftree-outof-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2Ftree-outof-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-outof-ssa.c?ref=6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051", "patch": "@@ -1030,13 +1030,11 @@ insert_backedge_copies (void)\n \t{\n \t  gimple phi = gsi_stmt (gsi);\n \t  tree result = gimple_phi_result (phi);\n-\t  tree result_var;\n \t  size_t i;\n \n \t  if (!is_gimple_reg (result))\n \t    continue;\n \n-\t  result_var = SSA_NAME_VAR (result);\n \t  for (i = 0; i < gimple_phi_num_args (phi); i++)\n \t    {\n \t      tree arg = gimple_phi_arg_def (phi, i);\n@@ -1048,7 +1046,7 @@ insert_backedge_copies (void)\n \t\t needed.  */\n \t      if ((e->flags & EDGE_DFS_BACK)\n \t\t  && (TREE_CODE (arg) != SSA_NAME\n-\t\t      || SSA_NAME_VAR (arg) != result_var\n+\t\t      || SSA_NAME_VAR (arg) != SSA_NAME_VAR (result)\n \t\t      || trivially_conflicts_p (bb, result, arg)))\n \t\t{\n \t\t  tree name;\n@@ -1078,10 +1076,9 @@ insert_backedge_copies (void)\n \n \t\t  /* Create a new instance of the underlying variable of the\n \t\t     PHI result.  */\n-\t\t  stmt = gimple_build_assign (result_var,\n+\t\t  name = copy_ssa_name (result, NULL);\n+\t\t  stmt = gimple_build_assign (name,\n \t\t\t\t\t      gimple_phi_arg_def (phi, i));\n-\t\t  name = make_ssa_name (result_var, stmt);\n-\t\t  gimple_assign_set_lhs (stmt, name);\n \n \t\t  /* copy location if present.  */\n \t\t  if (gimple_phi_arg_has_location (phi, i))"}, {"sha": "4853e0702b6f51fcfa2500e70baeda3f2bbbe667", "filename": "gcc/tree-parloops.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2Ftree-parloops.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2Ftree-parloops.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-parloops.c?ref=6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051", "patch": "@@ -1008,9 +1008,7 @@ create_phi_for_local_result (void **slot, void *data)\n     e = EDGE_PRED (store_bb, 1);\n   else\n     e = EDGE_PRED (store_bb, 0);\n-  local_res\n-    = make_ssa_name (SSA_NAME_VAR (gimple_assign_lhs (reduc->reduc_stmt)),\n-\t\t     NULL);\n+  local_res = copy_ssa_name (gimple_assign_lhs (reduc->reduc_stmt), NULL);\n   locus = gimple_location (reduc->reduc_stmt);\n   new_phi = create_phi_node (local_res, store_bb);\n   add_phi_arg (new_phi, reduc->init, e, locus);"}, {"sha": "d2a41284a2f80a24cdfda648e01e09abffe4af8b", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051", "patch": "@@ -2687,33 +2687,22 @@ propagate_rhs_into_lhs (gimple stmt, tree lhs, tree rhs, bitmap interesting_name\n \t  /* Special cases to avoid useless calls into the folding\n \t     routines, operand scanning, etc.\n \n-\t     First, propagation into a PHI may cause the PHI to become\n+\t     Propagation into a PHI may cause the PHI to become\n \t     a degenerate, so mark the PHI as interesting.  No other\n-\t     actions are necessary.\n-\n-\t     Second, if we're propagating a virtual operand and the\n-\t     propagation does not change the underlying _DECL node for\n-\t     the virtual operand, then no further actions are necessary.  */\n-\t  if (gimple_code (use_stmt) == GIMPLE_PHI\n-\t      || (! is_gimple_reg (lhs)\n-\t\t  && TREE_CODE (rhs) == SSA_NAME\n-\t\t  && SSA_NAME_VAR (lhs) == SSA_NAME_VAR (rhs)))\n+\t     actions are necessary.  */\n+\t  if (gimple_code (use_stmt) == GIMPLE_PHI)\n \t    {\n+\t      tree result;\n+\n \t      /* Dump details.  */\n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t{\n \t\t  fprintf (dump_file, \"    Updated statement:\");\n \t\t  print_gimple_stmt (dump_file, use_stmt, 0, dump_flags);\n \t\t}\n \n-\t      /* Propagation into a PHI may expose new degenerate PHIs,\n-\t\t so mark the result of the PHI as interesting.  */\n-\t      if (gimple_code (use_stmt) == GIMPLE_PHI)\n-\t\t{\n-\t\t  tree result = get_lhs_or_phi_result (use_stmt);\n-\t\t  bitmap_set_bit (interesting_names, SSA_NAME_VERSION (result));\n-\t\t}\n-\n+\t      result = get_lhs_or_phi_result (use_stmt);\n+\t      bitmap_set_bit (interesting_names, SSA_NAME_VERSION (result));\n \t      continue;\n \t    }\n "}, {"sha": "cbadfd9ae809b2dba390209ce4b9c2c7ddbf66df", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051", "patch": "@@ -126,17 +126,6 @@ static void get_expr_operands (gimple, tree *, int);\n /* Number of functions with initialized ssa_operands.  */\n static int n_initialized = 0;\n \n-/* Return the DECL_UID of the base variable of T.  */\n-\n-static inline unsigned\n-get_name_decl (const_tree t)\n-{\n-  if (TREE_CODE (t) != SSA_NAME)\n-    return DECL_UID (t);\n-  else\n-    return DECL_UID (SSA_NAME_VAR (t));\n-}\n-\n \n /*  Return true if the SSA operands cache is active.  */\n "}, {"sha": "16c3bee6993646071547628a9d52cca3bc28cb94", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051", "patch": "@@ -266,11 +266,15 @@ find_va_list_reference (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n   tree var = *tp;\n \n   if (TREE_CODE (var) == SSA_NAME)\n-    var = SSA_NAME_VAR (var);\n-\n-  if (TREE_CODE (var) == VAR_DECL\n-      && bitmap_bit_p (va_list_vars, DECL_UID (var)))\n-    return var;\n+    {\n+      if (bitmap_bit_p (va_list_vars, SSA_NAME_VERSION (var)))\n+\treturn var;\n+    }\n+  else if (TREE_CODE (var) == VAR_DECL)\n+    {\n+      if (bitmap_bit_p (va_list_vars, DECL_UID (var) + num_ssa_names))\n+\treturn var;\n+    }\n \n   return NULL_TREE;\n }\n@@ -347,12 +351,12 @@ va_list_counter_struct_op (struct stdarg_info *si, tree ap, tree var,\n     return false;\n \n   if (TREE_CODE (var) != SSA_NAME\n-      || bitmap_bit_p (si->va_list_vars, DECL_UID (SSA_NAME_VAR (var))))\n+      || bitmap_bit_p (si->va_list_vars, SSA_NAME_VERSION (var)))\n     return false;\n \n   base = get_base_address (ap);\n   if (TREE_CODE (base) != VAR_DECL\n-      || !bitmap_bit_p (si->va_list_vars, DECL_UID (base)))\n+      || !bitmap_bit_p (si->va_list_vars, DECL_UID (base) + num_ssa_names))\n     return false;\n \n   if (TREE_OPERAND (ap, 1) == va_list_gpr_counter_field)\n@@ -371,13 +375,11 @@ static bool\n va_list_ptr_read (struct stdarg_info *si, tree ap, tree tem)\n {\n   if (TREE_CODE (ap) != VAR_DECL\n-      || !bitmap_bit_p (si->va_list_vars, DECL_UID (ap)))\n+      || !bitmap_bit_p (si->va_list_vars, DECL_UID (ap) + num_ssa_names))\n     return false;\n \n   if (TREE_CODE (tem) != SSA_NAME\n-      || bitmap_bit_p (si->va_list_vars,\n-\t\t       DECL_UID (SSA_NAME_VAR (tem)))\n-      || is_global_var (SSA_NAME_VAR (tem)))\n+      || bitmap_bit_p (si->va_list_vars, SSA_NAME_VERSION (tem)))\n     return false;\n \n   if (si->compute_sizes < 0)\n@@ -405,8 +407,8 @@ va_list_ptr_read (struct stdarg_info *si, tree ap, tree tem)\n \n   /* Note the temporary, as we need to track whether it doesn't escape\n      the current function.  */\n-  bitmap_set_bit (si->va_list_escape_vars,\n-\t\t  DECL_UID (SSA_NAME_VAR (tem)));\n+  bitmap_set_bit (si->va_list_escape_vars, SSA_NAME_VERSION (tem));\n+\n   return true;\n }\n \n@@ -423,11 +425,11 @@ va_list_ptr_write (struct stdarg_info *si, tree ap, tree tem2)\n   unsigned HOST_WIDE_INT increment;\n \n   if (TREE_CODE (ap) != VAR_DECL\n-      || !bitmap_bit_p (si->va_list_vars, DECL_UID (ap)))\n+      || !bitmap_bit_p (si->va_list_vars, DECL_UID (ap) + num_ssa_names))\n     return false;\n \n   if (TREE_CODE (tem2) != SSA_NAME\n-      || bitmap_bit_p (si->va_list_vars, DECL_UID (SSA_NAME_VAR (tem2))))\n+      || bitmap_bit_p (si->va_list_vars, SSA_NAME_VERSION (tem2)))\n     return false;\n \n   if (si->compute_sizes <= 0)\n@@ -459,23 +461,21 @@ check_va_list_escapes (struct stdarg_info *si, tree lhs, tree rhs)\n \n   if (TREE_CODE (rhs) == SSA_NAME)\n     {\n-      if (! bitmap_bit_p (si->va_list_escape_vars,\n-\t\t\t  DECL_UID (SSA_NAME_VAR (rhs))))\n+      if (! bitmap_bit_p (si->va_list_escape_vars, SSA_NAME_VERSION (rhs)))\n \treturn;\n     }\n   else if (TREE_CODE (rhs) == ADDR_EXPR\n \t   && TREE_CODE (TREE_OPERAND (rhs, 0)) == MEM_REF\n \t   && TREE_CODE (TREE_OPERAND (TREE_OPERAND (rhs, 0), 0)) == SSA_NAME)\n     {\n-      if (! bitmap_bit_p (si->va_list_escape_vars,\n-\t\t\t  DECL_UID (SSA_NAME_VAR (TREE_OPERAND\n-\t\t\t\t\t\t  (TREE_OPERAND (rhs, 0), 0)))))\n+      tree ptr = TREE_OPERAND (TREE_OPERAND (rhs, 0), 0);\n+      if (! bitmap_bit_p (si->va_list_escape_vars, SSA_NAME_VERSION (ptr)))\n \treturn;\n     }\n   else\n     return;\n \n-  if (TREE_CODE (lhs) != SSA_NAME || is_global_var (SSA_NAME_VAR (lhs)))\n+  if (TREE_CODE (lhs) != SSA_NAME)\n     {\n       si->va_list_escapes = true;\n       return;\n@@ -511,8 +511,7 @@ check_va_list_escapes (struct stdarg_info *si, tree lhs, tree rhs)\n       return;\n     }\n \n-  bitmap_set_bit (si->va_list_escape_vars,\n-\t\t  DECL_UID (SSA_NAME_VAR (lhs)));\n+  bitmap_set_bit (si->va_list_escape_vars, SSA_NAME_VERSION (lhs));\n }\n \n \n@@ -540,7 +539,7 @@ check_all_va_list_escapes (struct stdarg_info *si)\n \t  FOR_EACH_SSA_TREE_OPERAND (use, stmt, iter, SSA_OP_ALL_USES)\n \t    {\n \t      if (! bitmap_bit_p (si->va_list_escape_vars,\n-\t\t\t\t  DECL_UID (SSA_NAME_VAR (use))))\n+\t\t\t\t  SSA_NAME_VERSION (use)))\n \t\tcontinue;\n \n \t      if (is_gimple_assign (stmt))\n@@ -586,12 +585,12 @@ check_all_va_list_escapes (struct stdarg_info *si)\n \n \t\t      if (TREE_CODE (lhs) == SSA_NAME\n \t\t\t  && bitmap_bit_p (si->va_list_escape_vars,\n-\t\t\t\t\t   DECL_UID (SSA_NAME_VAR (lhs))))\n+\t\t\t\t\t   SSA_NAME_VERSION (lhs)))\n \t\t\tcontinue;\n \n \t\t      if (TREE_CODE (lhs) == VAR_DECL\n \t\t\t  && bitmap_bit_p (si->va_list_vars,\n-\t\t\t\t\t   DECL_UID (lhs)))\n+\t\t\t\t\t   DECL_UID (lhs) + num_ssa_names))\n \t\t\tcontinue;\n \t\t    }\n \t\t  else if (rhs_code == ADDR_EXPR\n@@ -601,7 +600,7 @@ check_all_va_list_escapes (struct stdarg_info *si)\n \t\t      tree lhs = gimple_assign_lhs (stmt);\n \n \t\t      if (bitmap_bit_p (si->va_list_escape_vars,\n-\t\t\t\t\tDECL_UID (SSA_NAME_VAR (lhs))))\n+\t\t\t\t\tSSA_NAME_VERSION (lhs)))\n \t\t\tcontinue;\n \t\t    }\n \t\t}\n@@ -722,7 +721,7 @@ execute_optimize_stdarg (void)\n \t      break;\n \t    }\n \n-\t  bitmap_set_bit (si.va_list_vars, DECL_UID (ap));\n+\t  bitmap_set_bit (si.va_list_vars, DECL_UID (ap) + num_ssa_names);\n \n \t  /* VA_START_BB and VA_START_AP will be only used if there is just\n \t     one va_start in the function.  */"}, {"sha": "5f7734f9ac8ae186709954d76b63692beac8754b", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051", "patch": "@@ -718,9 +718,9 @@ get_value_range (const_tree var)\n \n   /* If VAR is a default definition of a parameter, the variable can\n      take any value in VAR's type.  */\n-  sym = SSA_NAME_VAR (var);\n   if (SSA_NAME_IS_DEFAULT_DEF (var))\n     {\n+      sym = SSA_NAME_VAR (var);\n       if (TREE_CODE (sym) == PARM_DECL)\n \t{\n \t  /* Try to use the \"nonnull\" attribute to create ~[0, 0]"}, {"sha": "1811299ec3fed9fe6c9a0d7ecb63ca6a454e5659", "filename": "gcc/tree.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051", "patch": "@@ -10155,9 +10155,6 @@ range_in_array_bounds_p (tree ref)\n bool\n needs_to_live_in_memory (const_tree t)\n {\n-  if (TREE_CODE (t) == SSA_NAME)\n-    t = SSA_NAME_VAR (t);\n-\n   return (TREE_ADDRESSABLE (t)\n \t  || is_global_var (t)\n \t  || (TREE_CODE (t) == RESULT_DECL"}, {"sha": "702871ebc4dd81f4e968beef9aa902085e9a3395", "filename": "gcc/value-prof.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=6b4a85ad6f41a0f2f1a10917dc3b9366c9a5c051", "patch": "@@ -1276,10 +1276,10 @@ gimple_ic (gimple icall_stmt, struct cgraph_node *direct_call,\n       tree result = gimple_call_lhs (icall_stmt);\n       gimple phi = create_phi_node (result, join_bb);\n       gimple_call_set_lhs (icall_stmt,\n-\t\t\t   make_ssa_name (SSA_NAME_VAR (result), icall_stmt));\n+\t\t\t   duplicate_ssa_name (result, icall_stmt));\n       add_phi_arg (phi, gimple_call_lhs (icall_stmt), e_ij, UNKNOWN_LOCATION);\n       gimple_call_set_lhs (dcall_stmt,\n-\t\t\t   make_ssa_name (SSA_NAME_VAR (result), dcall_stmt));\n+\t\t\t   duplicate_ssa_name (result, dcall_stmt));\n       add_phi_arg (phi, gimple_call_lhs (dcall_stmt), e_dj, UNKNOWN_LOCATION);\n     }\n \n@@ -1507,10 +1507,10 @@ gimple_stringop_fixed_value (gimple vcall_stmt, tree icall_size, int prob,\n       tree result = gimple_call_lhs (vcall_stmt);\n       gimple phi = create_phi_node (result, join_bb);\n       gimple_call_set_lhs (vcall_stmt,\n-\t\t\t   make_ssa_name (SSA_NAME_VAR (result), vcall_stmt));\n+\t\t\t   duplicate_ssa_name (result, vcall_stmt));\n       add_phi_arg (phi, gimple_call_lhs (vcall_stmt), e_vj, UNKNOWN_LOCATION);\n       gimple_call_set_lhs (icall_stmt,\n-\t\t\t   make_ssa_name (SSA_NAME_VAR (result), icall_stmt));\n+\t\t\t   duplicate_ssa_name (result, icall_stmt));\n       add_phi_arg (phi, gimple_call_lhs (icall_stmt), e_ij, UNKNOWN_LOCATION);\n     }\n "}]}