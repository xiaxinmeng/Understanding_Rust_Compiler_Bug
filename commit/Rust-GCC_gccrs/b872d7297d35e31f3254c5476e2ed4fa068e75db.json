{"sha": "b872d7297d35e31f3254c5476e2ed4fa068e75db", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg3MmQ3Mjk3ZDM1ZTMxZjMyNTRjNTQ3NmUyZWQ0ZmEwNjhlNzVkYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2016-06-02T23:10:33Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2016-06-02T23:10:33Z"}, "message": "decl.c (xref_tag_1): Change pairs of errors to error + inform.\n\n/cp\n2016-06-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (xref_tag_1): Change pairs of errors to error + inform.\n\t(start_enum): Likewise.\n\t* parser.c (cp_parser_class_head): Likewise.\n\n/testsuite\n2016-06-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/cpp0x/forw_enum10.C: Adjust for dg-message vs dg-error.\n\t* g++.dg/cpp0x/forw_enum6.C: Likewise.\n\t* g++.dg/cpp0x/forw_enum8.C: Likewise.\n\t* g++.dg/cpp0x/override2.C: Likewise.\n\t* g++.dg/parse/crash5.C: Likewise.\n\t* g++.dg/parse/error16.C: Likewise.\n\t* g++.dg/parse/error27.C: Likewise.\n\t* g++.dg/template/qualttp15.C: Likewise.\n\t* g++.dg/template/redecl4.C: Likewise.\n\t* g++.old-deja/g++.other/crash39.C: Likewise.\n\t* g++.old-deja/g++.other/struct1.C: Likewise.\n\t* g++.old-deja/g++.pt/m9a.C: Likewise.\n\t* g++.old-deja/g++.pt/memclass10.C: Likewise.\n\nFrom-SVN: r237046", "tree": {"sha": "a365245cead53b4139687372ac8dba5ad3c9f1cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a365245cead53b4139687372ac8dba5ad3c9f1cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b872d7297d35e31f3254c5476e2ed4fa068e75db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b872d7297d35e31f3254c5476e2ed4fa068e75db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b872d7297d35e31f3254c5476e2ed4fa068e75db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b872d7297d35e31f3254c5476e2ed4fa068e75db/comments", "author": null, "committer": null, "parents": [{"sha": "e29525d3df727cf907194af2874d3eb5c774226c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e29525d3df727cf907194af2874d3eb5c774226c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e29525d3df727cf907194af2874d3eb5c774226c"}], "stats": {"total": 88, "additions": 55, "deletions": 33}, "files": [{"sha": "fba9aa9e0485818fe5533bc38bd887bfda6ecd2f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b872d7297d35e31f3254c5476e2ed4fa068e75db", "patch": "@@ -1,3 +1,9 @@\n+2016-06-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (xref_tag_1): Change pairs of errors to error + inform.\n+\t(start_enum): Likewise.\n+\t* parser.c (cp_parser_class_head): Likewise.\n+\n 2016-06-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/71372"}, {"sha": "cd7143b409cadbc4662ececedb92769d53ccb035", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b872d7297d35e31f3254c5476e2ed4fa068e75db", "patch": "@@ -12793,7 +12793,7 @@ xref_tag_1 (enum tag_types tag_code, tree name,\n \t       && CLASSTYPE_IS_TEMPLATE (t))\n \t{\n \t  error (\"redeclaration of %qT as a non-template\", t);\n-\t  error (\"previous declaration %q+D\", t);\n+\t  inform (location_of (t), \"previous declaration %qD\", t);\n \t  return error_mark_node;\n \t}\n \n@@ -13149,16 +13149,16 @@ start_enum (tree name, tree enumtype, tree underlying_type,\n \t{\n \t  error_at (input_location, \"scoped/unscoped mismatch \"\n \t\t    \"in enum %q#T\", enumtype);\n-\t  error_at (DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (enumtype)),\n-\t\t    \"previous definition here\");\n+\t  inform (DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (enumtype)),\n+\t\t  \"previous definition here\");\n \t  enumtype = error_mark_node;\n \t}\n       else if (ENUM_FIXED_UNDERLYING_TYPE_P (enumtype) != !! underlying_type)\n \t{\n \t  error_at (input_location, \"underlying type mismatch \"\n \t\t    \"in enum %q#T\", enumtype);\n-\t  error_at (DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (enumtype)),\n-\t\t    \"previous definition here\");\n+\t  inform (DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (enumtype)),\n+\t\t  \"previous definition here\");\n \t  enumtype = error_mark_node;\n \t}\n       else if (underlying_type && ENUM_UNDERLYING_TYPE (enumtype)\n@@ -13169,8 +13169,8 @@ start_enum (tree name, tree enumtype, tree underlying_type,\n \t{\n \t  error_at (input_location, \"different underlying type \"\n \t\t    \"in enum %q#T\", enumtype);\n-\t  error_at (DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (enumtype)),\n-\t\t    \"previous definition here\");\n+\t  inform (DECL_SOURCE_LOCATION (TYPE_MAIN_DECL (enumtype)),\n+\t\t  \"previous definition here\");\n \t  underlying_type = NULL_TREE;\n \t}\n     }"}, {"sha": "e01353d5dc1416437b627e49ac03797f9fa70a16", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=b872d7297d35e31f3254c5476e2ed4fa068e75db", "patch": "@@ -22008,8 +22008,8 @@ cp_parser_class_head (cp_parser* parser,\n     {\n       error_at (type_start_token->location, \"redefinition of %q#T\",\n \t\ttype);\n-      error_at (type_start_token->location, \"previous definition of %q+#T\",\n-\t\ttype);\n+      inform (location_of (type), \"previous definition of %q#T\",\n+\t      type);\n       type = NULL_TREE;\n       goto done;\n     }"}, {"sha": "7f659c8ec202cbc1490d1d25edcec8e6ef56de70", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b872d7297d35e31f3254c5476e2ed4fa068e75db", "patch": "@@ -1,3 +1,19 @@\n+2016-06-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/cpp0x/forw_enum10.C: Adjust for dg-message vs dg-error.\n+\t* g++.dg/cpp0x/forw_enum6.C: Likewise.\n+\t* g++.dg/cpp0x/forw_enum8.C: Likewise.\n+\t* g++.dg/cpp0x/override2.C: Likewise.\n+\t* g++.dg/parse/crash5.C: Likewise.\n+\t* g++.dg/parse/error16.C: Likewise.\n+\t* g++.dg/parse/error27.C: Likewise.\n+\t* g++.dg/template/qualttp15.C: Likewise.\n+\t* g++.dg/template/redecl4.C: Likewise.\n+\t* g++.old-deja/g++.other/crash39.C: Likewise.\n+\t* g++.old-deja/g++.other/struct1.C: Likewise.\n+\t* g++.old-deja/g++.pt/m9a.C: Likewise.\n+\t* g++.old-deja/g++.pt/memclass10.C: Likewise.\n+\n 2016-06-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/71372"}, {"sha": "3c4c3de6d6615746e89b31586930f3a351e4c7f9", "filename": "gcc/testsuite/g++.dg/cpp0x/forw_enum10.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum10.C?ref=b872d7297d35e31f3254c5476e2ed4fa068e75db", "patch": "@@ -3,7 +3,7 @@\n //This error is diagnosed at instantiation time\n template<typename T> struct S1\n {\n-    enum E : T;   // { dg-error \"previous definition\" }\n+    enum E : T;   // { dg-message \"previous definition\" }\n     enum E : int;     // { dg-error \"different underlying type\" }\n };\n template struct S1<short>; // { dg-message \"required from here\" }\n@@ -24,7 +24,7 @@ template struct S3<short,short>;\n \n template<typename T1, typename T2> struct S4\n {\n-    enum E : T1; // { dg-error \"previous definition\" }\n+    enum E : T1; // { dg-message \"previous definition\" }\n     enum E : T2; // { dg-error \"different underlying type\" }\n };\n template struct S4<short,char>; // { dg-message \"required from here\" }"}, {"sha": "01bf563bcddbde589db862527878f396f5feacd5", "filename": "gcc/testsuite/g++.dg/cpp0x/forw_enum6.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum6.C?ref=b872d7297d35e31f3254c5476e2ed4fa068e75db", "patch": "@@ -1,18 +1,18 @@\n // { dg-do compile { target c++11 } }\n \n-enum class E1 : int; // { dg-error \"previous definition\" }\n+enum class E1 : int; // { dg-message \"previous definition\" }\n enum E1 : int;  // { dg-error \"scoped/unscoped mismatch\" }\n \n-enum E2 : int; // { dg-error \"previous definition\" }\n+enum E2 : int; // { dg-message \"previous definition\" }\n enum class E2 : int;  // { dg-error \"scoped/unscoped mismatch\" }\n \n enum struct E3 : int;\n enum class E3 : int; //ok\n \n-enum class E4 : int; // { dg-error \"previous definition\" }\n+enum class E4 : int; // { dg-message \"previous definition\" }\n enum class E4 : long;  // { dg-error \"different underlying type\" }\n \n-enum E5 : int; // { dg-error \"previous definition\" }\n+enum E5 : int; // { dg-message \"previous definition\" }\n enum E5 : long;  // { dg-error \"different underlying type\" }\n \n enum E6 : int;"}, {"sha": "b84a759c6de55cf0978ee67e991a4f78fac189fb", "filename": "gcc/testsuite/g++.dg/cpp0x/forw_enum8.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fforw_enum8.C?ref=b872d7297d35e31f3254c5476e2ed4fa068e75db", "patch": "@@ -11,15 +11,15 @@ template struct S1<int>; //ok\n //This error is diagnosed at instantiation time\n template<typename T> struct S2\n {\n-    enum E : int;   // { dg-error \"previous definition\" }\n+    enum E : int;   // { dg-message \"previous definition\" }\n     enum E : T;     // { dg-error \"different underlying type\" }\n };\n template struct S2<short>; // { dg-message \"required from here\" }\n \n //This error is diagnosed at compilation time\n template<typename T> struct S3\n {\n-    enum E : int;   // { dg-error \"previous definition\" }\n+    enum E : int;   // { dg-message \"previous definition\" }\n     enum E : short; // { dg-error \"different underlying type\" }\n };\n "}, {"sha": "ab4dec486c666a4d1ed04a6c110167bd556d9a8f", "filename": "gcc/testsuite/g++.dg/cpp0x/override2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverride2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverride2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Foverride2.C?ref=b872d7297d35e31f3254c5476e2ed4fa068e75db", "patch": "@@ -38,7 +38,7 @@ int main()\n {\n   D3<B1> d;\n   D4<B2> d2;\n-  struct B2 final{}; // { dg-error \"previous definition\" }\n+  struct B2 final{}; // { dg-message \"previous definition\" }\n   B2 final; // { dg-error \"has a previous declaration|previously declared here\" }\n   B2 final2 = final;\n   struct B2 {}; // { dg-error \"redefinition\" }\n@@ -47,7 +47,7 @@ int main()\n   struct B2 final {}; // { dg-error \"redefinition\" }\n   struct B2 override {}; // { dg-error \"cannot specify 'override' for a class\" }\n   B2 override{}; // { dg-error \"redeclaration\" }\n-  struct foo final {}; // { dg-error \"previous definition\" }\n+  struct foo final {}; // { dg-message \"previous definition\" }\n   struct foo final {}; // { dg-error \"redefinition\" }\n   foo final; // { dg-error \"conflicting declaration\" }\n }"}, {"sha": "4a06173f07f54c39f88c3d3037085e0dc185aa35", "filename": "gcc/testsuite/g++.dg/parse/crash5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash5.C?ref=b872d7297d35e31f3254c5476e2ed4fa068e75db", "patch": "@@ -1,6 +1,6 @@\n // { dg-options \"-w\" }\n \n-class QString { // { dg-error \"previous definition\" }\n+class QString { // { dg-message \"previous definition\" }\n   QString (const QString & a); // { dg-message \"QString::QString|candidate expects\" }\n };\n "}, {"sha": "74db15c21052924034c957116615661e1d5ce181", "filename": "gcc/testsuite/g++.dg/parse/error16.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror16.C?ref=b872d7297d35e31f3254c5476e2ed4fa068e75db", "patch": "@@ -3,7 +3,7 @@\n \n struct A\n {\n-  struct B {}; // { dg-error \"10:previous definition of 'struct A::B'\" }\n+  struct B {}; // { dg-message \"10:previous definition of 'struct A::B'\" }\n };\n \n struct A::B{}; // { dg-error \"11:redefinition of 'struct A::B'\" }"}, {"sha": "a86834ef731bbb2eb7b8b5d120cec0df2b982597", "filename": "gcc/testsuite/g++.dg/parse/error27.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror27.C?ref=b872d7297d35e31f3254c5476e2ed4fa068e75db", "patch": "@@ -1,8 +1,8 @@\n // { dg-options \"-fshow-column -ansi -pedantic-errors -Wno-long-long\" }\n // PR c++/20152\n \n-struct KrSelectionMode {  virtual void init() = 0; }; // { dg-error \"8:previous definition of 'struct KrSelectionMode'\" }\n-struct KrKDESelectionMode : public KrSelectionMode { void init() { } }; // { dg-error \"8:previous definition of 'struct KrKDESelectionMode'\" }\n+struct KrSelectionMode {  virtual void init() = 0; }; // { dg-message \"8:previous definition of 'struct KrSelectionMode'\" }\n+struct KrKDESelectionMode : public KrSelectionMode { void init() { } }; // { dg-message \"8:previous definition of 'struct KrKDESelectionMode'\" }\n struct KrSelectionMode {  virtual void init() = 0; }; // { dg-error \"8:redefinition of 'struct KrSelectionMode'\" }\n struct KrKDESelectionMode : public KrSelectionMode { void init() { } }; // { dg-error \"8:redefinition of 'struct KrKDESelectionMode'\" }\n KrKDESelectionMode krKDESelectionMode;"}, {"sha": "9e8ce577b8f7409768c536ec0c2f747093d380c1", "filename": "gcc/testsuite/g++.dg/template/qualttp15.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fqualttp15.C?ref=b872d7297d35e31f3254c5476e2ed4fa068e75db", "patch": "@@ -12,7 +12,7 @@ template <template <class> class TT> struct X\n \tTT<int> y;\n };\n \n-template <class T> struct X<T::template B> // { dg-error \"previous\" }\n+template <class T> struct X<T::template B> // { dg-message \"previous\" }\n {\n \tT z;\n };"}, {"sha": "5638bde413db63c06792ea7138c82a3c71ee0aa5", "filename": "gcc/testsuite/g++.dg/template/redecl4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fredecl4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fredecl4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fredecl4.C?ref=b872d7297d35e31f3254c5476e2ed4fa068e75db", "patch": "@@ -1,5 +1,5 @@\n // PR c++/28710\n // { dg-do compile }\n \n-template<int> union A;  // { dg-error \"previous\" }\n+template<int> union A;  // { dg-message \"previous\" }\n struct A;               // { dg-error \"non-template\" }"}, {"sha": "248476946fc755e33ad5eff98d1fd7673bb6cc53", "filename": "gcc/testsuite/g++.old-deja/g++.other/crash39.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcrash39.C?ref=b872d7297d35e31f3254c5476e2ed4fa068e75db", "patch": "@@ -10,7 +10,7 @@ struct X\n {\n   ~X ();\n };\n-struct S { X a; };  // { dg-error \"\" } previous defn\n+struct S { X a; };  // { dg-message \"\" } previous defn\n struct S { X a; };  // { dg-error \"\" } redefinition\n \n void c1(S s)"}, {"sha": "a533bd4ab94ed4ea9753c103a87348268f49e0be", "filename": "gcc/testsuite/g++.old-deja/g++.other/struct1.C", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstruct1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstruct1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstruct1.C?ref=b872d7297d35e31f3254c5476e2ed4fa068e75db", "patch": "@@ -6,35 +6,35 @@\n // Duplicate definitions are wrong, we should just cough\n // politely, but we used to die horribly.\n \n-class Y // { dg-error \"\" } previous definition\n+class Y // { dg-message \"\" } previous definition\n {\n };\n class Y // { dg-error \"\" } redefinition\n {   \n };\n \n-template<class T> class X // { dg-error \"\" } previous definition\n+template<class T> class X // { dg-message \"\" } previous definition\n {\n };\n template<class T> class X // { dg-error \"\" } redefinition\n {   \n };\n \n-template<class T> class X<T *> // { dg-error \"\" } previous definition\n+template<class T> class X<T *> // { dg-message \"\" } previous definition\n {\n };\n template<class T> class X<T *> // { dg-error \"\" } redefinition\n {   \n };\n \n-template<> class X<int> // { dg-error \"\" } previous definition\n+template<> class X<int> // { dg-message \"\" } previous definition\n {\n };\n template<> class X<int> // { dg-error \"\" } redefinition\n {   \n };\n \n-template<> class X<int *> // { dg-error \"\" } previous definition\n+template<> class X<int *> // { dg-message \"\" } previous definition\n {\n };\n template<> class X<int *> // { dg-error \"\" } redefinition"}, {"sha": "c5b35cbde89f305601ef762b2b5f82a023b91ce6", "filename": "gcc/testsuite/g++.old-deja/g++.pt/m9a.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fm9a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fm9a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fm9a.C?ref=b872d7297d35e31f3254c5476e2ed4fa068e75db", "patch": "@@ -1,5 +1,5 @@\n // { dg-do assemble  }\n \n-struct A { A() { a = 1; } int a; }; // { dg-error \"\" } \n+struct A { A() { a = 1; } int a; }; // { dg-message \"\" } \n struct A { A() { a = 2; } int a; }; // { dg-error \"\" } \n A aavv;"}, {"sha": "17c7343efabdaeed0ee6afe32b39d946cd4807fb", "filename": "gcc/testsuite/g++.old-deja/g++.pt/memclass10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemclass10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b872d7297d35e31f3254c5476e2ed4fa068e75db/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemclass10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemclass10.C?ref=b872d7297d35e31f3254c5476e2ed4fa068e75db", "patch": "@@ -3,7 +3,7 @@\n struct S1\n {\n   template <class T>\n-  struct S2 {}; // { dg-error \"\" } previous definition\n+  struct S2 {}; // { dg-message \"\" } previous definition\n \n   template <class T>\n   struct S2 {}; // { dg-error \"\" } redefinition "}]}