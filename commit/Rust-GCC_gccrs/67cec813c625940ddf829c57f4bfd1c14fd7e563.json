{"sha": "67cec813c625940ddf829c57f4bfd1c14fd7e563", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdjZWM4MTNjNjI1OTQwZGRmODI5YzU3ZjRiZmQxYzE0ZmQ3ZTU2Mw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-11-03T06:44:47Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2008-11-03T06:44:47Z"}, "message": "re PR fortran/37445 (Host-associated proc not found if same-name generic is use-associated)\n\n2008-11-03  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/37445\n\t* resolve.c (resolve_actual_arglist ): Correct comparison of\n\tFL_VARIABLE with e->expr_type.\n\t(resolve_call): Check that host association is correct.\n\t(resolve_actual_arglist ): Remove return is old_sym is use\n\tassociated.  Only reparse expression if old and new symbols\n\thave different types.\n\n\tPR fortran/PR35769\n\t* resolve.c (gfc_resolve_assign_in_forall): Change error to a\n\twarning.\n\n2008-11-03  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/37445\n\t* gfortran.dg/host_assoc_call_3.f90: New test.\n\t* gfortran.dg/host_assoc_call_4.f90: New test.\n\t* gfortran.dg/host_assoc_function_4.f90: New test.\n\nFrom-SVN: r141543", "tree": {"sha": "38c4f22cc0df72560dabf9a32280ae9e19eced9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38c4f22cc0df72560dabf9a32280ae9e19eced9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67cec813c625940ddf829c57f4bfd1c14fd7e563", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67cec813c625940ddf829c57f4bfd1c14fd7e563", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67cec813c625940ddf829c57f4bfd1c14fd7e563", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67cec813c625940ddf829c57f4bfd1c14fd7e563/comments", "author": null, "committer": null, "parents": [{"sha": "15426fdc53ed6924184279368b106798677ca407", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15426fdc53ed6924184279368b106798677ca407", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15426fdc53ed6924184279368b106798677ca407"}], "stats": {"total": 177, "additions": 167, "deletions": 10}, "files": [{"sha": "9017b792b37b763703190d7ff24b81e0f50764ee", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67cec813c625940ddf829c57f4bfd1c14fd7e563/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67cec813c625940ddf829c57f4bfd1c14fd7e563/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=67cec813c625940ddf829c57f4bfd1c14fd7e563", "patch": "@@ -1,3 +1,17 @@\n+2008-11-03  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/37445\n+\t* resolve.c (resolve_actual_arglist ): Correct comparison of\n+\tFL_VARIABLE with e->expr_type.\n+\t(resolve_call): Check that host association is correct.\n+\t(resolve_actual_arglist ): Remove return is old_sym is use\n+\tassociated.  Only reparse expression if old and new symbols\n+\thave different types.\n+\n+\tPR fortran/PR35769\n+\t* resolve.c (gfc_resolve_assign_in_forall): Change error to a\n+\twarning.\n+\n 2008-11-01  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/36426"}, {"sha": "4774b0bdb960a7432392d9a2b793c8f6a555d0ba", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67cec813c625940ddf829c57f4bfd1c14fd7e563/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67cec813c625940ddf829c57f4bfd1c14fd7e563/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=67cec813c625940ddf829c57f4bfd1c14fd7e563", "patch": "@@ -1105,7 +1105,7 @@ resolve_actual_arglist (gfc_actual_arglist *arg, procedure_type ptype,\n \t  continue;\n \t}\n \n-      if (e->expr_type == FL_VARIABLE\n+      if (e->expr_type == EXPR_VARIABLE\n \t    && e->symtree->n.sym->attr.generic\n \t    && no_formal_args\n \t    && count_specific_procs (e) != 1)\n@@ -2857,7 +2857,7 @@ resolve_call (gfc_code *c)\n {\n   gfc_try t;\n   procedure_type ptype = PROC_INTRINSIC;\n-  gfc_symbol *csym;\n+  gfc_symbol *csym, *sym;\n   bool no_formal_args;\n \n   csym = c->symtree ? c->symtree->n.sym : NULL;\n@@ -2869,6 +2869,20 @@ resolve_call (gfc_code *c)\n       return FAILURE;\n     }\n \n+  if (csym && gfc_current_ns->parent && csym->ns != gfc_current_ns)\n+    {\n+      gfc_find_symbol (csym->name, gfc_current_ns, 1, &sym);\n+      if (sym && csym != sym\n+\t      && sym->ns == gfc_current_ns\n+\t      && sym->attr.flavor == FL_PROCEDURE\n+\t      && sym->attr.contained)\n+\t{\n+\t  sym->refs++;\n+\t  csym = sym;\n+\t  c->symtree->n.sym = sym;\n+\t}\n+    }\n+\n   /* If external, check for usage.  */\n   if (csym && is_external_proc (csym))\n     resolve_global_procedure (csym, &c->loc, 1);\n@@ -4248,14 +4262,12 @@ check_host_association (gfc_expr *e)\n \n   old_sym = e->symtree->n.sym;\n \n-  if (old_sym->attr.use_assoc)\n-    return retval;\n-\n   if (gfc_current_ns->parent\n \t&& old_sym->ns != gfc_current_ns)\n     {\n       gfc_find_symbol (old_sym->name, gfc_current_ns, 1, &sym);\n       if (sym && old_sym != sym\n+\t      && sym->ts.type == old_sym->ts.type\n \t      && sym->attr.flavor == FL_PROCEDURE\n \t      && sym->attr.contained)\n \t{\n@@ -6117,12 +6129,14 @@ gfc_resolve_assign_in_forall (gfc_code *code, int nvar, gfc_expr **var_expr)\n       else\n \t{\n \t  /* If one of the FORALL index variables doesn't appear in the\n-\t     assignment target, then there will be a many-to-one\n-\t     assignment.  */\n+\t     assignment variable, then there could be a many-to-one\n+\t     assignment.  Emit a warning rather than an error because the\n+\t     mask could be resolving this problem.  */\n \t  if (find_forall_index (code->expr, forall_index, 0) == FAILURE)\n-\t    gfc_error (\"The FORALL with index '%s' cause more than one \"\n-\t\t       \"assignment to this object at %L\",\n-\t\t       var_expr[n]->symtree->name, &code->expr->where);\n+\t    gfc_warning (\"The FORALL with index '%s' is not used on the \"\n+\t\t\t \"left side of the assignment at %L and so might \"\n+\t\t\t \"cause multiple assignment to this object\",\n+\t\t\t var_expr[n]->symtree->name, &code->expr->where);\n \t}\n     }\n }"}, {"sha": "760908456e49b2ed680e2da73a5a137e67ff7bd0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67cec813c625940ddf829c57f4bfd1c14fd7e563/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67cec813c625940ddf829c57f4bfd1c14fd7e563/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=67cec813c625940ddf829c57f4bfd1c14fd7e563", "patch": "@@ -1,3 +1,10 @@\n+2008-11-03  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/37445\n+\t* gfortran.dg/host_assoc_call_3.f90: New test.\n+\t* gfortran.dg/host_assoc_call_4.f90: New test.\n+\t* gfortran.dg/host_assoc_function_4.f90: New test.\n+\n 2008-11-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/37542"}, {"sha": "6646270e5ac551e194bb257482484a0206adb5a8", "filename": "gcc/testsuite/gfortran.dg/host_assoc_call_3.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67cec813c625940ddf829c57f4bfd1c14fd7e563/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_call_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67cec813c625940ddf829c57f4bfd1c14fd7e563/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_call_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_call_3.f90?ref=67cec813c625940ddf829c57f4bfd1c14fd7e563", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do compile }\n+!\n+! PR fortran/37445, in which the contained 'putaline' would be\n+! ignored and no specific interface found in the generic version.\n+!\n+! Contributed by Norman S Clerman < clerman@fuse.net>\n+!\n+MODULE M1\n+  INTERFACE putaline\n+    MODULE PROCEDURE S1,S2\n+  END INTERFACE\n+CONTAINS\n+  SUBROUTINE S1(I)\n+  END SUBROUTINE\n+  SUBROUTINE S2(F)\n+  END SUBROUTINE\n+END MODULE\n+\n+MODULE M2\n+  USE M1\n+CONTAINS\n+  SUBROUTINE S3\n+    integer :: check = 0\n+    CALL putaline()\n+    if (check .ne. 1) call abort\n+    CALL putaline(\"xx\")\n+    if (check .ne. 2) call abort\n+!  CALL putaline(1.0) ! => this now causes an error, as it should \n+  CONTAINS\n+    SUBROUTINE putaline(x)\n+      character, optional :: x\n+      if (present(x)) then\n+        check = 2\n+      else\n+        check = 1\n+      end if\n+    END SUBROUTINE\n+  END SUBROUTINE\n+END MODULE\n+\n+  USE M2\n+  CALL S3\n+END\n+! { dg-final { cleanup-modules \"M1 M2\" } }"}, {"sha": "f97a644e688650b1429ba530ae4d2ca90cafe939", "filename": "gcc/testsuite/gfortran.dg/host_assoc_call_4.f90", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67cec813c625940ddf829c57f4bfd1c14fd7e563/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_call_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67cec813c625940ddf829c57f4bfd1c14fd7e563/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_call_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_call_4.f90?ref=67cec813c625940ddf829c57f4bfd1c14fd7e563", "patch": "@@ -0,0 +1,48 @@\n+! { dg-do compile }\n+!\n+! PR fortran/37445, in which the first version of the fix regressed on the \n+! calls to GetBasicElementData; picking up the local GetBasicElementData instead.\n+!\n+! Contributed by Norman S Clerman < clerman@fuse.net>\n+! and reduced by Tobias Burnus <burnus@gcc.gnu.org>\n+!\n+MODULE ErrElmnt\n+  IMPLICIT NONE\n+  TYPE :: TErrorElement\n+    integer :: i\n+  end type TErrorElement\n+contains\n+  subroutine GetBasicData ( AnElement, ProcedureName, ErrorNumber,    &\n+                            Level, Message, ReturnStat)\n+    type (TErrorElement) :: AnElement\n+    character (*, 1), optional ::       &\n+      ProcedureName\n+    integer (4), optional :: ErrorNumber\n+    character (*, 1), optional :: Level\n+    character (*, 1), optional :: Message\n+    integer (4), optional :: ReturnStat\n+  end subroutine GetBasicData\n+end module ErrElmnt\n+\n+MODULE ErrorMod\n+  USE ErrElmnt, only: GetBasicElementData => GetBasicData , TErrorElement\n+  IMPLICIT NONE\n+contains\n+  subroutine GetBasicData ()\n+    integer (4) :: CallingStat, LocalErrorNum\n+    character (20, 1) :: LocalErrorMessage\n+    character (20, 1) :: LocalProcName\n+    character (20, 1) :: Locallevel\n+    type (TErrorElement) :: AnElement\n+    call GetBasicElementData (AnElement, LocalProcName, LocalErrorNum, LocalLevel, LocalErrorMessage, CallingStat)\n+  end subroutine GetBasicData\n+  SUBROUTINE WH_ERR ()\n+    integer (4) :: ErrorNumber, CallingStat\n+    character (20, 1) :: ProcedureName\n+    character (20, 1) :: ErrorLevel\n+    character (20, 1) :: ErrorMessage\n+    type (TErrorElement) :: TargetElement\n+    call GetBasicElementData (TargetElement, ProcedureName, ErrorNumber, ErrorLevel, ErrorMessage, CallingStat)\n+  end subroutine WH_ERR\n+end module ErrorMod\n+! { dg-final { cleanup-modules \"ErrElmnt ErrorMod\" } }"}, {"sha": "799eb0078709ad3e8cb2f8c0daf1d8c0c7941ead", "filename": "gcc/testsuite/gfortran.dg/host_assoc_function_4.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67cec813c625940ddf829c57f4bfd1c14fd7e563/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_function_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67cec813c625940ddf829c57f4bfd1c14fd7e563/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_function_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_function_4.f90?ref=67cec813c625940ddf829c57f4bfd1c14fd7e563", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do run }\n+!\n+! PR fortran/37445, in which the contained 's1' would be\n+! ignored and the use+host associated version used.\n+!\n+! Contributed by Norman S Clerman < clerman@fuse.net>\n+!\n+MODULE M1\n+CONTAINS\n+  integer function S1 ()\n+    s1 = 0\n+  END function\n+END MODULE\n+\n+MODULE M2\n+  USE M1\n+CONTAINS\n+  SUBROUTINE S2\n+    if (s1 () .ne. 1) call abort\n+  CONTAINS\n+    integer function S1 ()\n+      s1 = 1\n+    END function\n+  END SUBROUTINE\n+END MODULE\n+\n+  USE M2\n+  CALL S2\n+END\n+! { dg-final { cleanup-modules \"M1 M2\" } }"}]}