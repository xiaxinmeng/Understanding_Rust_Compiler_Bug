{"sha": "7869fe47b3a1b1ea8ecc628860c4996bb5857f37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg2OWZlNDdiM2ExYjFlYThlY2M2Mjg4NjBjNDk5NmJiNTg1N2YzNw==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2005-07-13T09:38:44Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2005-07-13T09:38:44Z"}, "message": "re PR rtl-optimization/20376 (The missed-optimization of general induction variables in the new rtl-level loop optimizer cause performance degradation.)\n\n\tPR rtl-optimization/20376\n\t* toplev.c (process_options): Enable -fweb and -frename-registers when\n\tunrolling.\n\t* doc/invoke.texi: Update the information about when -fweb and\n\t-frename-registers are enabled.\n\nFrom-SVN: r101961", "tree": {"sha": "46cadb0d2b158517b4c06e56835052187efbef3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46cadb0d2b158517b4c06e56835052187efbef3c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7869fe47b3a1b1ea8ecc628860c4996bb5857f37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7869fe47b3a1b1ea8ecc628860c4996bb5857f37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7869fe47b3a1b1ea8ecc628860c4996bb5857f37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7869fe47b3a1b1ea8ecc628860c4996bb5857f37/comments", "author": null, "committer": null, "parents": [{"sha": "fe83f5439acb1ce8d12d46e991e88aecf5d7c6dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe83f5439acb1ce8d12d46e991e88aecf5d7c6dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe83f5439acb1ce8d12d46e991e88aecf5d7c6dc"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "fcef3d2081393f4485f1014382f3fcf74aaa5eca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7869fe47b3a1b1ea8ecc628860c4996bb5857f37/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7869fe47b3a1b1ea8ecc628860c4996bb5857f37/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7869fe47b3a1b1ea8ecc628860c4996bb5857f37", "patch": "@@ -1,3 +1,11 @@\n+2005-07-12  Zdenek Dvorak  <dvorakz@suse.cz>\n+\n+\tPR rtl-optimization/20376\n+\t* toplev.c (process_options): Enable -fweb and -frename-registers when\n+\tunrolling.\n+\t* doc/invoke.texi: Update the information about when -fweb and\n+\t-frename-registers are enabled.\n+\n 2005-07-12  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR tree-opt/21840"}, {"sha": "ba355c0d04632afc0e7deb7a559e54239c927114", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7869fe47b3a1b1ea8ecc628860c4996bb5857f37/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7869fe47b3a1b1ea8ecc628860c4996bb5857f37/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7869fe47b3a1b1ea8ecc628860c4996bb5857f37", "patch": "@@ -5017,8 +5017,7 @@ the loop is entered.  This usually makes programs run more slowly.\n @opindex -fsplit-ivs-in-unroller\n Enables expressing of values of induction variables in later iterations\n of the unrolled loop using the value in the first iteration.  This breaks\n-long dependency chains, thus improving efficiency of the scheduling passes\n-(for best results, @option{-fweb} should be used as well).\n+long dependency chains, thus improving efficiency of the scheduling passes.\n \n Combination of @option{-fweb} and CSE is often sufficient to obtain the\n same effect.  However in cases the loop body is more complicated than\n@@ -5260,9 +5259,7 @@ passes, such as CSE, loop optimizer and trivial dead code remover.  It can,\n however, make debugging impossible, since variables will no longer stay in a\n ``home register''.\n \n-Enabled at levels @option{-O2}, @option{-O3}, @option{-Os},\n-on targets where the default format for debugging information supports\n-variable tracking.\n+Enabled by default with @option{-funroll-loops}.\n \n @item -fwhole-program\n @opindex fwhole-program\n@@ -5524,7 +5521,7 @@ debug information format adopted by the target, however, it can\n make debugging impossible, since variables will no longer stay in\n a ``home register''.\n \n-Not enabled by default at any level because it has known bugs.\n+Enabled by default with @option{-funroll-loops}.\n \n @item -ftracer\n @opindex ftracer\n@@ -5538,9 +5535,10 @@ Enabled with @option{-fprofile-use}.\n @opindex funroll-loops\n Unroll loops whose number of iterations can be determined at compile time or\n upon entry to the loop.  @option{-funroll-loops} implies\n-@option{-frerun-cse-after-loop}.  It also turns on complete loop peeling\n-(i.e.@: complete removal of loops with small constant number of iterations).\n-This option makes code larger, and may or may not make it run faster.\n+@option{-frerun-cse-after-loop}, @option{-fweb} and @option{-frename-registers}. \n+It also turns on complete loop peeling (i.e.@: complete removal of loops with\n+small constant number of iterations).  This option makes code larger, and may\n+or may not make it run faster.\n \n Enabled with @option{-fprofile-use}.\n "}, {"sha": "0250c97d41798aee060fae723cebe069812a1bce", "filename": "gcc/toplev.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7869fe47b3a1b1ea8ecc628860c4996bb5857f37/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7869fe47b3a1b1ea8ecc628860c4996bb5857f37/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=7869fe47b3a1b1ea8ecc628860c4996bb5857f37", "patch": "@@ -1530,9 +1530,15 @@ process_options (void)\n   if (flag_unroll_all_loops)\n     flag_unroll_loops = 1;\n \n-  /* The loop unrolling code assumes that cse will be run after loop.  */\n+  /* The loop unrolling code assumes that cse will be run after loop.\n+     Also enable -fweb and -frename-registers that help scheduling\n+     the unrolled loop.  */\n   if (flag_unroll_loops || flag_peel_loops)\n-    flag_rerun_cse_after_loop = 1;\n+    {\n+      flag_rerun_cse_after_loop = 1;\n+      flag_web = 1;\n+      flag_rename_registers = 1;\n+    }\n \n   /* If explicitly asked to run new loop optimizer, switch off the old\n      one.  */"}]}