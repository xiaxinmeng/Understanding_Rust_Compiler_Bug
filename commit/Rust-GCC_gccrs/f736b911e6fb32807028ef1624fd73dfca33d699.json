{"sha": "f736b911e6fb32807028ef1624fd73dfca33d699", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjczNmI5MTFlNmZiMzI4MDcwMjhlZjE2MjRmZDczZGZjYTMzZDY5OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2015-11-09T09:19:19Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2015-11-09T09:19:19Z"}, "message": "Add hook for modifying debug info for address spaces\n\n        * dwarf2out.c (modified_type_die): Pass the address space number\n        through TARGET_ADDR_SPACE_DEBUG to produce the dwarf address class.\n        * target.def (TARGET_ADDR_SPACE_DEBUG): New.\n        * targhooks.c (default_addr_space_debug): New.\n        * targhooks.h (default_addr_space_debug): Declare.\n        * doc/tm.texi.in (TARGET_ADDR_SPACE_DEBUG): Mark it.\n        * doc/tm.texi: Rebuild.\n\nFrom-SVN: r230000", "tree": {"sha": "3998331b05016b3ed00e47dcd1382849d5f9a05f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3998331b05016b3ed00e47dcd1382849d5f9a05f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f736b911e6fb32807028ef1624fd73dfca33d699", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f736b911e6fb32807028ef1624fd73dfca33d699", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f736b911e6fb32807028ef1624fd73dfca33d699", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f736b911e6fb32807028ef1624fd73dfca33d699/comments", "author": null, "committer": null, "parents": [{"sha": "6626f97034083631b76c3db092f4bf1156d9d078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6626f97034083631b76c3db092f4bf1156d9d078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6626f97034083631b76c3db092f4bf1156d9d078"}], "stats": {"total": 80, "additions": 61, "deletions": 19}, "files": [{"sha": "9a91cf8700c0003f04eea64a721c5a9e51734b3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f736b911e6fb32807028ef1624fd73dfca33d699/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f736b911e6fb32807028ef1624fd73dfca33d699/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f736b911e6fb32807028ef1624fd73dfca33d699", "patch": "@@ -1,5 +1,13 @@\n 2015-11-09  Richard Henderson  <rth@redhat.com>\n \n+\t* dwarf2out.c (modified_type_die): Pass the address space number\n+\tthrough TARGET_ADDR_SPACE_DEBUG to produce the dwarf address class.\n+\t* target.def (TARGET_ADDR_SPACE_DEBUG): New.\n+\t* targhooks.c (default_addr_space_debug): New.\n+\t* targhooks.h (default_addr_space_debug): Declare.\n+\t* doc/tm.texi.in (TARGET_ADDR_SPACE_DEBUG): Mark it.\n+\t* doc/tm.texi: Rebuild.\n+\n \t* gimple.c (check_loadstore): Return false when 0 is a valid address.\n \t* fold-const.c (const_unop) [ADDR_SPACE_CONVERT_EXPR]: Do not fold\n \tnull when 0 is valid in the source address space."}, {"sha": "5609a98a4308bfc9b3fe25b4edfde529db991101", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f736b911e6fb32807028ef1624fd73dfca33d699/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f736b911e6fb32807028ef1624fd73dfca33d699/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=f736b911e6fb32807028ef1624fd73dfca33d699", "patch": "@@ -10379,6 +10379,11 @@ guaranteed that one of the two address spaces is a subset of the other,\n as determined by the @code{TARGET_ADDR_SPACE_SUBSET_P} target hook.\n @end deftypefn\n \n+@deftypefn {Target Hook} int TARGET_ADDR_SPACE_DEBUG (addr_space_t @var{as})\n+Define this to define how the address space is encoded in dwarf.\n+The result is the value to be used with @code{DW_AT_address_class}.\n+@end deftypefn\n+\n @node Misc\n @section Miscellaneous Parameters\n @cindex parameters, miscellaneous"}, {"sha": "96ca063a3918b82f6c6c41022fd08ef7ae813038", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f736b911e6fb32807028ef1624fd73dfca33d699/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f736b911e6fb32807028ef1624fd73dfca33d699/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=f736b911e6fb32807028ef1624fd73dfca33d699", "patch": "@@ -7459,6 +7459,8 @@ c_register_addr_space (\"__ea\", ADDR_SPACE_EA);\n \n @hook TARGET_ADDR_SPACE_CONVERT\n \n+@hook TARGET_ADDR_SPACE_DEBUG\n+\n @node Misc\n @section Miscellaneous Parameters\n @cindex parameters, miscellaneous"}, {"sha": "f184750091051d970818fc64615d8913be418227", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f736b911e6fb32807028ef1624fd73dfca33d699/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f736b911e6fb32807028ef1624fd73dfca33d699/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f736b911e6fb32807028ef1624fd73dfca33d699", "patch": "@@ -10899,29 +10899,39 @@ modified_type_die (tree type, int cv_quals, dw_die_ref context_die)\n \t    mod_type_die = d;\n \t  }\n     }\n-  else if (code == POINTER_TYPE)\n+  else if (code == POINTER_TYPE || code == REFERENCE_TYPE)\n     {\n-      mod_type_die = new_die (DW_TAG_pointer_type, mod_scope, type);\n-      add_AT_unsigned (mod_type_die, DW_AT_byte_size,\n-\t\t       simple_type_size_in_bits (type) / BITS_PER_UNIT);\n-      item_type = TREE_TYPE (type);\n-      if (!ADDR_SPACE_GENERIC_P (TYPE_ADDR_SPACE (item_type)))\n-\tadd_AT_unsigned (mod_type_die, DW_AT_address_class,\n-\t\t\t TYPE_ADDR_SPACE (item_type));\n-    }\n-  else if (code == REFERENCE_TYPE)\n-    {\n-      if (TYPE_REF_IS_RVALUE (type) && dwarf_version >= 4)\n-\tmod_type_die = new_die (DW_TAG_rvalue_reference_type, mod_scope,\n-\t\t\t\ttype);\n-      else\n-\tmod_type_die = new_die (DW_TAG_reference_type, mod_scope, type);\n+      dwarf_tag tag = DW_TAG_pointer_type;\n+      if (code == REFERENCE_TYPE)\n+\t{\n+\t  if (TYPE_REF_IS_RVALUE (type) && dwarf_version >= 4)\n+\t    tag = DW_TAG_rvalue_reference_type;\n+\t  else\n+\t    tag = DW_TAG_reference_type;\n+\t}\n+      mod_type_die = new_die (tag, mod_scope, type);\n+\n       add_AT_unsigned (mod_type_die, DW_AT_byte_size,\n \t\t       simple_type_size_in_bits (type) / BITS_PER_UNIT);\n       item_type = TREE_TYPE (type);\n-      if (!ADDR_SPACE_GENERIC_P (TYPE_ADDR_SPACE (item_type)))\n-\tadd_AT_unsigned (mod_type_die, DW_AT_address_class,\n-\t\t\t TYPE_ADDR_SPACE (item_type));\n+\n+      addr_space_t as = TYPE_ADDR_SPACE (item_type);\n+      if (!ADDR_SPACE_GENERIC_P (as))\n+\t{\n+\t  int action = targetm.addr_space.debug (as);\n+\t  if (action >= 0)\n+\t    {\n+\t      /* Positive values indicate an address_class.  */\n+\t      add_AT_unsigned (mod_type_die, DW_AT_address_class, action);\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Negative values indicate an (inverted) segment base reg.  */\n+\t      dw_loc_descr_ref d\n+\t\t= one_reg_loc_descriptor (~action, VAR_INIT_STATUS_INITIALIZED);\n+\t      add_AT_loc (mod_type_die, DW_AT_segment, d);\n+\t    }\n+\t}\n     }\n   else if (code == INTEGER_TYPE\n \t   && TREE_TYPE (type) != NULL_TREE"}, {"sha": "0f7d3e5effb513eff3da3ca428c7d649537ecf78", "filename": "gcc/target.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f736b911e6fb32807028ef1624fd73dfca33d699/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f736b911e6fb32807028ef1624fd73dfca33d699/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=f736b911e6fb32807028ef1624fd73dfca33d699", "patch": "@@ -3244,6 +3244,14 @@ as determined by the @code{TARGET_ADDR_SPACE_SUBSET_P} target hook.\",\n  rtx, (rtx op, tree from_type, tree to_type),\n  default_addr_space_convert)\n \n+/* Function to encode an address space into dwarf.  */\n+DEFHOOK\n+(debug,\n+ \"Define this to define how the address space is encoded in dwarf.\\n\\\n+The result is the value to be used with @code{DW_AT_address_class}.\",\n+ int, (addr_space_t as),\n+ default_addr_space_debug)\n+\n HOOK_VECTOR_END (addr_space)\n \n #undef HOOK_PREFIX"}, {"sha": "c810525be9207e54ecc7b7589731ec08cd492285", "filename": "gcc/targhooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f736b911e6fb32807028ef1624fd73dfca33d699/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f736b911e6fb32807028ef1624fd73dfca33d699/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=f736b911e6fb32807028ef1624fd73dfca33d699", "patch": "@@ -1277,6 +1277,14 @@ default_addr_space_zero_address_valid (addr_space_t as ATTRIBUTE_UNUSED)\n   return false;\n }\n \n+/* The default hook for debugging the address space is to return the\n+   address space number to indicate DW_AT_address_class.  */\n+int\n+default_addr_space_debug (addr_space_t as)\n+{\n+  return as;\n+}\n+\n /* The default hook for TARGET_ADDR_SPACE_CONVERT. This hook should never be\n    called for targets with only a generic address space.  */\n "}, {"sha": "8747f958535ea352c692230a93811ec33d2fd162", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f736b911e6fb32807028ef1624fd73dfca33d699/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f736b911e6fb32807028ef1624fd73dfca33d699/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=f736b911e6fb32807028ef1624fd73dfca33d699", "patch": "@@ -178,6 +178,7 @@ extern rtx default_addr_space_legitimize_address (rtx, rtx, machine_mode,\n \t\t\t\t\t\t  addr_space_t);\n extern bool default_addr_space_subset_p (addr_space_t, addr_space_t);\n extern bool default_addr_space_zero_address_valid (addr_space_t);\n+extern int default_addr_space_debug (addr_space_t);\n extern rtx default_addr_space_convert (rtx, tree, tree);\n extern unsigned int default_case_values_threshold (void);\n extern bool default_have_conditional_execution (void);"}]}