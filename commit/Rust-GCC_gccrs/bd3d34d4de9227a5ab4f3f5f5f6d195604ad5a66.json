{"sha": "bd3d34d4de9227a5ab4f3f5f5f6d195604ad5a66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQzZDM0ZDRkZTkyMjdhNWFiNGYzZjVmNWY2ZDE5NTYwNGFkNWE2Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2012-10-26T06:37:28Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-10-26T06:37:28Z"}, "message": "lra-constraints.c (process_address): Describe the kinds of address that we might see.\n\ngcc/\n\t* lra-constraints.c (process_address): Describe the kinds of address\n\tthat we might see.\n\nFrom-SVN: r192833", "tree": {"sha": "c5582be058d3b257376792e87da1ea63a2bc145d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5582be058d3b257376792e87da1ea63a2bc145d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd3d34d4de9227a5ab4f3f5f5f6d195604ad5a66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd3d34d4de9227a5ab4f3f5f5f6d195604ad5a66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd3d34d4de9227a5ab4f3f5f5f6d195604ad5a66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd3d34d4de9227a5ab4f3f5f5f6d195604ad5a66/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a202e60986930df96c5db13b3890bfea7ae1d981", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a202e60986930df96c5db13b3890bfea7ae1d981", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a202e60986930df96c5db13b3890bfea7ae1d981"}], "stats": {"total": 57, "additions": 44, "deletions": 13}, "files": [{"sha": "bf5748529993d925484949fac0a2a34a46b671ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d34d4de9227a5ab4f3f5f5f6d195604ad5a66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d34d4de9227a5ab4f3f5f5f6d195604ad5a66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd3d34d4de9227a5ab4f3f5f5f6d195604ad5a66", "patch": "@@ -1,3 +1,8 @@\n+2012-10-26  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* lra-constraints.c (process_address): Describe the kinds of address\n+\tthat we might see.\n+\n 2012-10-25  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* lra-int.h (lra_assert): Redefine it gcc_checking_assert."}, {"sha": "fad1bbd3d465e45af2622f606bf09189c5f70877", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd3d34d4de9227a5ab4f3f5f5f6d195604ad5a66/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd3d34d4de9227a5ab4f3f5f5f6d195604ad5a66/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=bd3d34d4de9227a5ab4f3f5f5f6d195604ad5a66", "patch": "@@ -2494,8 +2494,23 @@ equiv_address_substitution (struct address *ad, rtx *addr_loc,\n   return change_p;\n }\n \n-/* Major function to make reloads for address in operand NOP.  Add to\n-   reloads to the list *BEFORE and *AFTER.  We might need to add\n+/* Major function to make reloads for an address in operand NOP.\n+   The supported cases are:\n+\n+   1) an address that existed before LRA started, at which point it must\n+      have been valid.  These addresses are subject to elimination and\n+      may have become invalid due to the elimination offset being out\n+      of range.\n+\n+   2) an address created by forcing a constant to memory (force_const_to_mem).\n+      The initial form of these addresses might not be valid, and it is this\n+      function's job to make them valid.\n+\n+   3) a frame address formed from a register and a (possibly zero)\n+      constant offset.  As above, these addresses might not be valid\n+      and this function must make them so.\n+\n+   Add reloads to the lists *BEFORE and *AFTER.  We might need to add\n    reloads to *AFTER because of inc/dec, {pre, post} modify in the\n    address.  Return true for any RTL change.  */\n static bool\n@@ -2557,9 +2572,19 @@ process_address (int nop, rtx *before, rtx *after)\n       && process_addr_reg (ad.index_reg_loc, before, NULL, INDEX_REG_CLASS))\n     change_p = true;\n \n-  /* The address was valid before LRA.  We only change its form if the\n-     address has a displacement, so if it has no displacement it must\n-     still be valid.  */\n+  /* There are three cases where the shape of *ADDR_LOC may now be invalid:\n+\n+     1) the original address was valid, but either elimination or\n+\tequiv_address_substitution applied a displacement that made\n+\tit invalid.\n+\n+     2) the address is an invalid symbolic address created by\n+\tforce_const_to_mem.\n+\n+     3) the address is a frame address with an invalid offset.\n+\n+     All these cases involve a displacement, so there is no point\n+     revalidating when there is no displacement.  */\n   if (ad.disp_loc == NULL)\n     return change_p;\n \n@@ -2594,9 +2619,8 @@ process_address (int nop, rtx *before, rtx *after)\n   if (ok_p)\n     return change_p;\n \n-  /* Addresses were legitimate before LRA.  So if the address has\n-     two registers than it can have two of them.  We should also\n-     not worry about scale for the same reason.\t */\n+  /* Any index existed before LRA started, so we can assume that the\n+     presence and shape of the index is valid.  */\n   push_to_sequence (*before);\n   if (ad.base_reg_loc == NULL)\n     {\n@@ -2611,7 +2635,7 @@ process_address (int nop, rtx *before, rtx *after)\n \t    rtx insn;\n \t    rtx last = get_last_insn ();\n \n-\t    /* disp => lo_sum (new_base, disp)\t*/\n+\t    /* disp => lo_sum (new_base, disp), case (2) above.  */\n \t    insn = emit_insn (gen_rtx_SET\n \t\t\t      (VOIDmode, new_reg,\n \t\t\t       gen_rtx_HIGH (Pmode, copy_rtx (*ad.disp_loc))));\n@@ -2633,14 +2657,15 @@ process_address (int nop, rtx *before, rtx *after)\n #endif\n \t  if (code < 0)\n \t    {\n-\t      /* disp => new_base  */\n+\t      /* disp => new_base, case (2) above.  */\n \t      lra_emit_move (new_reg, *ad.disp_loc);\n \t      *ad.disp_loc = new_reg;\n \t    }\n \t}\n       else\n \t{\n-\t  /* index * scale + disp => new base + index * scale  */\n+\t  /* index * scale + disp => new base + index * scale,\n+\t     case (1) above.  */\n \t  enum reg_class cl = base_reg_class (mode, as, SCRATCH, SCRATCH);\n \n \t  lra_assert (INDEX_REG_CLASS != NO_REGS);\n@@ -2654,7 +2679,7 @@ process_address (int nop, rtx *before, rtx *after)\n     }\n   else if (ad.index_reg_loc == NULL)\n     {\n-      /* base + disp => new base  */\n+      /* base + disp => new base, cases (1) and (3) above.  */\n       /* Another option would be to reload the displacement into an\n \t index register.  However, postreload has code to optimize\n \t address reloads that have the same base and different\n@@ -2665,7 +2690,8 @@ process_address (int nop, rtx *before, rtx *after)\n     }\n   else\n     {\n-      /* base + scale * index + disp => new base + scale * index  */\n+      /* base + scale * index + disp => new base + scale * index,\n+\t case (1) above.  */\n       new_reg = base_plus_disp_to_reg (mode, as, &ad);\n       *addr_loc = gen_rtx_PLUS (Pmode, new_reg, *ad.index_loc);\n     }"}]}