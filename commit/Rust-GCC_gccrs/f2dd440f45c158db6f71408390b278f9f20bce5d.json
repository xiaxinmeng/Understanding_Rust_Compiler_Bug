{"sha": "f2dd440f45c158db6f71408390b278f9f20bce5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJkZDQ0MGY0NWMxNThkYjZmNzE0MDgzOTBiMjc4ZjlmMjBiY2U1ZA==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-08-16T22:24:30Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-08-16T22:24:30Z"}, "message": "re PR target/23376 (ICE on GCC 4.x with -O1 -funroll-loops -fvariable-expansion-in-unroller)\n\n\tPR target/23376\n\t* loop-unroll.c (analyze_insn_to_expand_var): Make sure that\n\tforce_operand will work later on using have_insn_for.\n\nFrom-SVN: r103181", "tree": {"sha": "bacd32891aff883427b4cdbc6749fb801f19932d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bacd32891aff883427b4cdbc6749fb801f19932d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2dd440f45c158db6f71408390b278f9f20bce5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2dd440f45c158db6f71408390b278f9f20bce5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2dd440f45c158db6f71408390b278f9f20bce5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2dd440f45c158db6f71408390b278f9f20bce5d/comments", "author": null, "committer": null, "parents": [{"sha": "196f5a8dcd804b909caf88455c775393dd15fa65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/196f5a8dcd804b909caf88455c775393dd15fa65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/196f5a8dcd804b909caf88455c775393dd15fa65"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "54cea246995d12a9bdbc72b3d275fd99eeb7cc51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2dd440f45c158db6f71408390b278f9f20bce5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2dd440f45c158db6f71408390b278f9f20bce5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f2dd440f45c158db6f71408390b278f9f20bce5d", "patch": "@@ -1,3 +1,9 @@\n+2005-08-16  Steven Bosscher  <stevenb@suse.de>\n+\n+\tPR target/23376\n+\t* loop-unroll.c (analyze_insn_to_expand_var): Make sure that\n+\tforce_operand will work later on using have_insn_for.\n+\n 2005-08-16  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \t* fold-const.c (tree_expr_nonnegative_p): Regroup cases."}, {"sha": "87f6e123dd6c888acc255d1cf3ac17c4bd06186b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2dd440f45c158db6f71408390b278f9f20bce5d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2dd440f45c158db6f71408390b278f9f20bce5d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=f2dd440f45c158db6f71408390b278f9f20bce5d", "patch": "@@ -22,7 +22,7 @@\n \t* trans-stmt.c (gfc_trans_arithmetic_if): Optimized in case of equal\n \tlabels.\n \n-2005-09-11  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+2005-08-11  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \t    Steven Bosscher  <stevenb@suse.de>\n \n \tPR libfortran/20006"}, {"sha": "4cabfd58504911d184e50164aab7bda5131eb1cf", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2dd440f45c158db6f71408390b278f9f20bce5d/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2dd440f45c158db6f71408390b278f9f20bce5d/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=f2dd440f45c158db6f71408390b278f9f20bce5d", "patch": "@@ -1574,7 +1574,19 @@ analyze_insn_to_expand_var (struct loop *loop, rtx insn)\n       && GET_CODE (src) != MINUS\n       && GET_CODE (src) != MULT)\n     return NULL;\n-  \n+\n+  /* Hmm, this is a bit paradoxical.  We know that INSN is a valid insn\n+     in MD.  But if there is no optab to generate the insn, we can not\n+     perform the variable expansion.  This can happen if an MD provides\n+     an insn but not a named pattern to generate it, for example to avoid\n+     producing code that needs additional mode switches like for x87/mmx.\n+\n+     So we check have_insn_for which looks for an optab for the operation\n+     in SRC.  If it doesn't exist, we can't perform the expansion even\n+     though INSN is valid.  */\n+  if (!have_insn_for (GET_CODE (src), GET_MODE (src)))\n+    return NULL;\n+\n   if (!XEXP (src, 0))\n     return NULL;\n   "}, {"sha": "96be244e0c204091aa0428c0034d230fadc54294", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2dd440f45c158db6f71408390b278f9f20bce5d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2dd440f45c158db6f71408390b278f9f20bce5d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f2dd440f45c158db6f71408390b278f9f20bce5d", "patch": "@@ -1,3 +1,8 @@\n+2005-08-16  Steven Bosscher  <stevenb@suse.de>\n+\n+\tPR target/23376\n+\t* gcc.target/x86_64/pr23376.c: New test.\n+\n 2005-08-16  Ian Lance Taylor  <ian@airs.com>\n \n \tPR c++/23337"}, {"sha": "ba60399f9579e4ae2cfbc74be494d9ed5465689c", "filename": "gcc/testsuite/gcc.target/x86_64/pr23376.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2dd440f45c158db6f71408390b278f9f20bce5d/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fpr23376.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2dd440f45c158db6f71408390b278f9f20bce5d/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fpr23376.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fpr23376.c?ref=f2dd440f45c158db6f71408390b278f9f20bce5d", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -funroll-loops -fvariable-expansion-in-unroller\" } */\n+\n+typedef int __m64 __attribute__ ((__vector_size__ (8)));\n+typedef int __v2si __attribute__ ((__vector_size__ (8)));\n+\n+static __inline __m64 __attribute__((__always_inline__))\n+_mm_add_pi32 (__m64 __m1, __m64 __m2)\n+{\n+  return (__m64) __builtin_ia32_paddd ((__v2si)__m1, (__v2si)__m2);\n+}\n+\n+__m64\n+simple_block_diff_up_mmx_4 (const int width, __m64 ref1)\n+{\n+  __m64 sum;\n+  int count = width >>1;\n+  while (count--)\n+    sum = _mm_add_pi32 (sum, ref1);\n+  return sum;\n+}"}]}