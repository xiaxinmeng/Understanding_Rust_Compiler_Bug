{"sha": "63bdc3ea178016154ce60cd850dae027f0f54329", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNiZGMzZWExNzgwMTYxNTRjZTYwY2Q4NTBkYWUwMjdmMGY1NDMyOQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2008-05-28T13:05:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-28T13:05:46Z"}, "message": "exp_fixd.adb (Build_Multiply): Correct one-off error in computing size\n\n2008-05-28  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_fixd.adb (Build_Multiply): Correct one-off error in computing\n\tsize\n\nFrom-SVN: r136079", "tree": {"sha": "0afcceb1974e75ac5c4ba1988596a089a647f41c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0afcceb1974e75ac5c4ba1988596a089a647f41c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63bdc3ea178016154ce60cd850dae027f0f54329", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63bdc3ea178016154ce60cd850dae027f0f54329", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63bdc3ea178016154ce60cd850dae027f0f54329", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63bdc3ea178016154ce60cd850dae027f0f54329/comments", "author": null, "committer": null, "parents": [{"sha": "71a555b3b9c9d741380db25fd2fdc47211b5ecdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a555b3b9c9d741380db25fd2fdc47211b5ecdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71a555b3b9c9d741380db25fd2fdc47211b5ecdf"}], "stats": {"total": 21, "additions": 6, "deletions": 15}, "files": [{"sha": "b2e05c3c43d9a8055367b3ad9e2079d85c516d87", "filename": "gcc/ada/exp_fixd.adb", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63bdc3ea178016154ce60cd850dae027f0f54329/gcc%2Fada%2Fexp_fixd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63bdc3ea178016154ce60cd850dae027f0f54329/gcc%2Fada%2Fexp_fixd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_fixd.adb?ref=63bdc3ea178016154ce60cd850dae027f0f54329", "patch": "@@ -103,7 +103,7 @@ package body Exp_Fixd is\n    function Build_Multiply (N : Node_Id; L, R : Node_Id) return Node_Id;\n    --  Builds an N_Op_Multiply node from the given left and right operand\n    --  expressions, using the source location from Sloc (N). The operands are\n-   --  either both Universal_Real, in which case Build_Divide differs from\n+   --  either both Universal_Real, in which case Build_Multiply differs from\n    --  Make_Op_Multiply only in that the Etype of the resulting node is set (to\n    --  Universal_Real), or they can be integer types. In this case the integer\n    --  types need not be the same, and Build_Multiply chooses a type long\n@@ -623,25 +623,17 @@ package body Exp_Fixd is\n          --  the effective size of an operand is the RM_Size of the operand.\n          --  But a special case arises with operands whose size is known at\n          --  compile time. In this case, we can use the actual value of the\n-         --  operand to get its size if it would fit in 8 or 16 bits.\n-\n-         --  Note: if both operands are known at compile time (can that\n-         --  happen?) and both were equal to the power of 2, then we would\n-         --  be one bit off in this test, so for the left operand, we only\n-         --  go up to the power of 2 - 1. This ensures that we do not get\n-         --  this anomalous case, and in practice the right operand is by\n-         --  far the more likely one to be the constant.\n+         --  operand to get its size if it would fit signed in 8 or 16 bits.\n \n          Left_Size := UI_To_Int (RM_Size (Left_Type));\n \n          if Compile_Time_Known_Value (L) then\n             declare\n                Val : constant Uint := Expr_Value (L);\n-\n             begin\n-               if Val < Int'(2 ** 8) then\n+               if Val < Int'(2 ** 7) then\n                   Left_Size := 8;\n-               elsif Val < Int'(2 ** 16) then\n+               elsif Val < Int'(2 ** 15) then\n                   Left_Size := 16;\n                end if;\n             end;\n@@ -652,11 +644,10 @@ package body Exp_Fixd is\n          if Compile_Time_Known_Value (R) then\n             declare\n                Val : constant Uint := Expr_Value (R);\n-\n             begin\n-               if Val <= Int'(2 ** 8) then\n+               if Val <= Int'(2 ** 7) then\n                   Right_Size := 8;\n-               elsif Val <= Int'(2 ** 16) then\n+               elsif Val <= Int'(2 ** 15) then\n                   Right_Size := 16;\n                end if;\n             end;"}]}