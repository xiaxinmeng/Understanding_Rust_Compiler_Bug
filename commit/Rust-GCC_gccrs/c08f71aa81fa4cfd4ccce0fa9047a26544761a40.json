{"sha": "c08f71aa81fa4cfd4ccce0fa9047a26544761a40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA4ZjcxYWE4MWZhNGNmZDRjY2NlMGZhOTA0N2EyNjU0NDc2MWE0MA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.co.uk", "date": "2003-05-17T21:59:25Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2003-05-17T21:59:25Z"}, "message": "defaults.h (TARGET_CPU_CPP_BUILTINS, [...]): Remove.\n\n\t* defaults.h (TARGET_CPU_CPP_BUILTINS, CPP_PREDEFINES): Remove.\n\t* gcc.c (cpp_predefines): Remove.\n\t(cpp_unique_options, do_spec_1): Remove handling of CPP_PREDEFINES.\n\t(static_specs): Remove predefines.\n\t* system.h: Poison CPP_PREDEFINES.\n\t* config/freebsd.h, config/openbsd.h, config/ptx4.h, config/svr3.h,\n\tconfig/svr4.h, doc/tm.texi: Remove references to CPP_PREDEFINES.\n\nFrom-SVN: r66917", "tree": {"sha": "d049f6092630b5b6b48b664495c81ab3f4c78867", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d049f6092630b5b6b48b664495c81ab3f4c78867"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c08f71aa81fa4cfd4ccce0fa9047a26544761a40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c08f71aa81fa4cfd4ccce0fa9047a26544761a40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c08f71aa81fa4cfd4ccce0fa9047a26544761a40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/comments", "author": {"login": "neilb-xx", "id": 160762, "node_id": "MDQ6VXNlcjE2MDc2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/160762?v=4", "gravatar_id": "", "url": "https://api.github.com/users/neilb-xx", "html_url": "https://github.com/neilb-xx", "followers_url": "https://api.github.com/users/neilb-xx/followers", "following_url": "https://api.github.com/users/neilb-xx/following{/other_user}", "gists_url": "https://api.github.com/users/neilb-xx/gists{/gist_id}", "starred_url": "https://api.github.com/users/neilb-xx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/neilb-xx/subscriptions", "organizations_url": "https://api.github.com/users/neilb-xx/orgs", "repos_url": "https://api.github.com/users/neilb-xx/repos", "events_url": "https://api.github.com/users/neilb-xx/events{/privacy}", "received_events_url": "https://api.github.com/users/neilb-xx/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7fbe4047277456f5afaaa9fa6ff13e77499d853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7fbe4047277456f5afaaa9fa6ff13e77499d853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7fbe4047277456f5afaaa9fa6ff13e77499d853"}], "stats": {"total": 260, "additions": 14, "deletions": 246}, "files": [{"sha": "504a57b9070c80cac86c68c87a83a8467fc0336b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c08f71aa81fa4cfd4ccce0fa9047a26544761a40", "patch": "@@ -1,3 +1,13 @@\n+2003-05-17  Neil Booth  <neil@daikokuya.co.uk>\n+\n+\t* defaults.h (TARGET_CPU_CPP_BUILTINS, CPP_PREDEFINES): Remove.\n+\t* gcc.c (cpp_predefines): Remove.\n+\t(cpp_unique_options, do_spec_1): Remove handling of CPP_PREDEFINES.\n+\t(static_specs): Remove predefines.\n+\t* system.h: Poison CPP_PREDEFINES.\n+\t* config/freebsd.h, config/openbsd.h, config/ptx4.h, config/svr3.h,\n+\tconfig/svr4.h, doc/tm.texi: Remove references to CPP_PREDEFINES.\n+\n 2003-05-17  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* config/m68k/hp320.h, config/m68k/linux.h, config/m68k/m68k-none.h,"}, {"sha": "8ddc4886b337173f526a21b6ecf8489b9b346c36", "filename": "gcc/config/freebsd.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/gcc%2Fconfig%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/gcc%2Fconfig%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd.h?ref=c08f71aa81fa4cfd4ccce0fa9047a26544761a40", "patch": "@@ -41,9 +41,6 @@ Boston, MA 02111-1307, USA.  */\n #undef  WORD_SWITCH_TAKES_ARG\n #define WORD_SWITCH_TAKES_ARG(STR) (FBSD_WORD_SWITCH_TAKES_ARG(STR))\n \n-#undef  CPP_PREDEFINES\n-/* Obsolete, do not define it. */\n-\n #undef  TARGET_OS_CPP_BUILTINS\n #define TARGET_OS_CPP_BUILTINS() FBSD_TARGET_OS_CPP_BUILTINS()\n "}, {"sha": "7eeb8fef06f1a8cfd21c70c2f5849fed8cc582fc", "filename": "gcc/config/openbsd.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/gcc%2Fconfig%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/gcc%2Fconfig%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fopenbsd.h?ref=c08f71aa81fa4cfd4ccce0fa9047a26544761a40", "patch": "@@ -130,9 +130,6 @@ Boston, MA 02111-1307, USA.  */\n \f\n /* Runtime target specification.  */\n \n-/* You must redefine CPP_PREDEFINES in any arch specific file.  */\n-#undef CPP_PREDEFINES\n-\n /* Implicit calls to library routines.  */\n \n /* Use memcpy and memset instead of bcopy and bzero.  */"}, {"sha": "0c83d984a5e666b97d55dbe65a8b05a702bd1fc6", "filename": "gcc/config/ptx4.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/gcc%2Fconfig%2Fptx4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/gcc%2Fconfig%2Fptx4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fptx4.h?ref=c08f71aa81fa4cfd4ccce0fa9047a26544761a40", "patch": "@@ -62,12 +62,6 @@ Boston, MA 02111-1307, USA.\n   && strcmp (STR, \"Tdata\") && strcmp (STR, \"Ttext\")\t\\\n   && strcmp (STR, \"Tbss\"))\n \n-/* You should redefine CPP_PREDEFINES in any file which includes this one.\n-   The definition should be appropriate for the type of target system\n-   involved, and it should include any -A (assertion) options which are\n-   appropriate for the given target system.  */\n-#undef CPP_PREDEFINES\n-\n /* Provide an ASM_SPEC appropriate for svr4.  Here we try to support as\n    many of the specialized svr4 assembler options as seems reasonable,\n    given that there are certain options which we can't (or shouldn't)"}, {"sha": "7fa2b4b9079056b336aec2d1cb5ca1b8a3a76e89", "filename": "gcc/config/svr3.h", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/gcc%2Fconfig%2Fsvr3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/gcc%2Fconfig%2Fsvr3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr3.h?ref=c08f71aa81fa4cfd4ccce0fa9047a26544761a40", "patch": "@@ -30,13 +30,6 @@ Boston, MA 02111-1307, USA.\n \n \t#include \"?????.h\"\n \t#include \"svr3.h\"\n-\n-   followed by any really system-specific defines (or overrides of\n-   defines) which you find that you need.  For example, CPP_PREDEFINES\n-   is defined here with only the defined -Dunix and -DSVR3.  You should\n-   probably override that in your target-specific ?????svr3.h file\n-   with a set of defines that includes these, but also contains an\n-   appropriate define for the type of hardware that you are targeting.\n */\n \n /* Define a symbol indicating that we are using svr3.h.  */\n@@ -46,14 +39,7 @@ Boston, MA 02111-1307, USA.\n    environment and assembler syntax we are targeting for.  */\n #define SVR3_target\n \n-/* Cpp, assembler, linker, library, and startfile spec's.  */\n-\n-/* You should redefine CPP_PREDEFINES in any file which includes this one.\n-   The definition should be appropriate for the type of target system\n-   involved, and it should include any -A (assertion) options which are\n-   appropriate for the given target system.  */\n-\n-#undef CPP_PREDEFINES\n+/* Assembler, linker, library, and startfile spec's.  */\n \n /* Output at beginning of assembler file.  */\n /* The .file command should always begin the output.  */"}, {"sha": "3f85e944dee4ab64ce58685c4023a9ddd3827713", "filename": "gcc/config/svr4.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/gcc%2Fconfig%2Fsvr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/gcc%2Fconfig%2Fsvr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr4.h?ref=c08f71aa81fa4cfd4ccce0fa9047a26544761a40", "patch": "@@ -28,11 +28,7 @@ Boston, MA 02111-1307, USA.\n    where MACHINE is replaced by the name of the basic hardware that you\n    are targeting for.  Then, in the file MACHINE/svr4.h, put any really\n    system-specific defines (or overrides of defines) which you find that\n-   you need.  For example, CPP_PREDEFINES is defined here with only the\n-   defined -Dunix and -DSVR4.  You should probably override that in your\n-   target-specific MACHINE/svr4.h file with a set of defines that\n-   includes these, but also contains an appropriate define for the type\n-   of hardware that you are targeting.\n+   you need.\n */\n \n /* Define a symbol indicating that we are using svr4.h.  */\n@@ -59,12 +55,6 @@ Boston, MA 02111-1307, USA.\n   && strcmp (STR, \"Tdata\") && strcmp (STR, \"Ttext\")\t\\\n   && strcmp (STR, \"Tbss\"))\n \n-/* You should redefine CPP_PREDEFINES in any file which includes this one.\n-   The definition should be appropriate for the type of target system\n-   involved, and it should include any -A (assertion) options which are\n-   appropriate for the given target system.  */\n-#undef CPP_PREDEFINES\n-\n /* Provide an ASM_SPEC appropriate for svr4.  Here we try to support as\n    many of the specialized svr4 assembler options as seems reasonable,\n    given that there are certain options which we can't (or shouldn't)"}, {"sha": "5f72bfd2b817d9d7a0384965862b1615f1d360d3", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=c08f71aa81fa4cfd4ccce0fa9047a26544761a40", "patch": "@@ -47,17 +47,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #  define TARGET_ESC 033\n #endif\n \n-/* When removal of CPP_PREDEFINES is complete, TARGET_CPU_CPP_BULITINS\n-   can also be removed from here.  */\n #ifndef TARGET_OS_CPP_BUILTINS\n # define TARGET_OS_CPP_BUILTINS()\n #endif\n-#ifndef TARGET_CPU_CPP_BUILTINS\n-# define TARGET_CPU_CPP_BUILTINS()\n-#endif\n-#ifndef CPP_PREDEFINES\n-# define CPP_PREDEFINES \"\"\n-#endif\n \n /* Store in OUTPUT a string (made with alloca) containing an\n    assembler-name for a local static variable or function named NAME."}, {"sha": "8b22dbc2a0b027ce066cab73fb26e9bc13652e6c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c08f71aa81fa4cfd4ccce0fa9047a26544761a40", "patch": "@@ -650,40 +650,11 @@ variable @code{flag_iso} can be used.  The function-like macro\n @code{preprocessing_trad_p()} can be used to check for traditional\n preprocessing.\n \n-With @code{TARGET_OS_CPP_BUILTINS} this macro obsoletes the\n-@code{CPP_PREDEFINES} target macro.\n-\n @findex TARGET_OS_CPP_BUILTINS\n @item TARGET_OS_CPP_BUILTINS()\n Similarly to @code{TARGET_CPU_CPP_BUILTINS} but this macro is optional\n and is used for the target operating system instead.\n \n-With @code{TARGET_CPU_CPP_BUILTINS} this macro obsoletes the\n-@code{CPP_PREDEFINES} target macro.\n-\n-@findex CPP_PREDEFINES\n-@item CPP_PREDEFINES\n-Define this to be a string constant containing @option{-D} options to\n-define the predefined macros that identify this machine and system.\n-These macros will be predefined unless the @option{-ansi} option (or a\n-@option{-std} option for strict ISO C conformance) is specified.\n-\n-In addition, a parallel set of macros are predefined, whose names are\n-made by appending @samp{__} at the beginning and at the end.  These\n-@samp{__} macros are permitted by the ISO standard, so they are\n-predefined regardless of whether @option{-ansi} or a @option{-std} option\n-is specified.\n-\n-For example, on the Sun, one can use the following value:\n-\n-@smallexample\n-\"-Dmc68000 -Dsun -Dunix\"\n-@end smallexample\n-\n-The result is to define the macros @code{__mc68000__}, @code{__sun__}\n-and @code{__unix__} unconditionally, and the macros @code{mc68000},\n-@code{sun} and @code{unix} provided @option{-ansi} is not specified.\n-\n @findex extern int target_flags\n @item extern int target_flags;\n This declaration should be present."}, {"sha": "093742866da32212bf7662c26555d4b7788cd6ba", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 170, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=c08f71aa81fa4cfd4ccce0fa9047a26544761a40", "patch": "@@ -448,11 +448,6 @@ or with constant text in a single argument.\n \texcept that %g, %u, and %U do not currently support additional\n \tSUFFIX characters following %O as they would following, for\n \texample, `.o'.\n- %p\tsubstitutes the standard macro predefinitions for the\n-\tcurrent target machine.  Use this when running cpp.\n- %P\tlike %p, but puts `__' before and after the name of each macro.\n-\t(Except macros that already have __.)\n-\tThis is for ANSI C.\n  %I\tSubstitute any of -iprefix (made from GCC_EXEC_PREFIX), -isysroot\n \t(made from TARGET_SYSTEM_ROOT), and -isystem (made from COMPILER_PATH\n \tand -B options) as necessary.\n@@ -701,7 +696,6 @@ proper position among the other output files.  */\n \n static const char *asm_debug;\n static const char *cpp_spec = CPP_SPEC;\n-static const char *cpp_predefines = CPP_PREDEFINES;\n static const char *cc1_spec = CC1_SPEC;\n static const char *cc1plus_spec = CC1PLUS_SPEC;\n static const char *link_gcc_c_sequence_spec = LINK_GCC_C_SEQUENCE_SPEC;\n@@ -740,8 +734,7 @@ static const char *cpp_unique_options =\n  %{MMD:-MMD %{!o:%b.d}%{o*:%.d%*}}\\\n  %{M} %{MM} %{MF*} %{MG} %{MP} %{MQ*} %{MT*}\\\n  %{!E:%{!M:%{!MM:%{MD|MMD:%{o*:-MQ %*}}}}}\\\n- %{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n- %{remap} %{g3:-dD} %{H} %C %{D*&U*&A*} %{i*} %Z %i\\\n+ %{trigraphs} %{remap} %{g3:-dD} %{H} %C %{D*&U*&A*} %{i*} %Z %i\\\n  %{E|M|MM:%W{o*}}\";\n \n /* This contains cpp options which are common with cc1_options and are passed\n@@ -1467,7 +1460,6 @@ static struct spec_list static_specs[] =\n   INIT_STATIC_SPEC (\"libgcc\",\t\t\t&libgcc_spec),\n   INIT_STATIC_SPEC (\"startfile\",\t\t&startfile_spec),\n   INIT_STATIC_SPEC (\"switches_need_spaces\",\t&switches_need_spaces),\n-  INIT_STATIC_SPEC (\"predefines\",\t\t&cpp_predefines),\n   INIT_STATIC_SPEC (\"cross_compile\",\t\t&cross_compile),\n   INIT_STATIC_SPEC (\"version\",\t\t\t&compiler_version),\n   INIT_STATIC_SPEC (\"multilib\",\t\t\t&multilib_select),\n@@ -4968,167 +4960,6 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t      }\n \t    break;\n \n-\t  case 'p':\n-\t    {\n-\t      char *x = (char *) alloca (strlen (cpp_predefines) + 1);\n-\t      char *buf = x;\n-\t      const char *y;\n-\n-\t      /* Copy all of the -D options in CPP_PREDEFINES into BUF.  */\n-\t      y = cpp_predefines;\n-\t      while (*y != 0)\n-\t\t{\n-\t\t  if (! strncmp (y, \"-D\", 2))\n-\t\t    /* Copy the whole option.  */\n-\t\t    while (*y && *y != ' ' && *y != '\\t')\n-\t\t      *x++ = *y++;\n-\t\t  else if (*y == ' ' || *y == '\\t')\n-\t\t    /* Copy whitespace to the result.  */\n-\t\t    *x++ = *y++;\n-\t\t  /* Don't copy other options.  */\n-\t\t  else\n-\t\t    y++;\n-\t\t}\n-\n-\t      *x = 0;\n-\n-\t      value = do_spec_1 (buf, 0, NULL);\n-\t      if (value != 0)\n-\t\treturn value;\n-\t    }\n-\t    break;\n-\n-\t  case 'P':\n-\t    {\n-\t      char *x = (char *) alloca (strlen (cpp_predefines) * 4 + 1);\n-\t      char *buf = x;\n-\t      const char *y;\n-\n-\t      /* Copy all of CPP_PREDEFINES into BUF,\n-\t\t but force them all into the reserved name space if they\n-\t\t aren't already there.  The reserved name space is all\n-\t\t identifiers beginning with two underscores or with one\n-\t\t underscore and a capital letter.  We do the forcing by\n-\t\t adding up to two underscores to the beginning and end\n-\t\t of each symbol. e.g. mips, _mips, mips_, and _mips_ all\n-\t\t become __mips__.  */\n-\t      y = cpp_predefines;\n-\t      while (*y != 0)\n-\t\t{\n-\t\t  if (! strncmp (y, \"-D\", 2))\n-\t\t    {\n-\t\t      int flag = 0;\n-\n-\t\t      *x++ = *y++;\n-\t\t      *x++ = *y++;\n-\n-\t\t      if (*y != '_'\n-\t\t\t  || (*(y + 1) != '_'\n-\t\t\t      && ! ISUPPER ((unsigned char) *(y + 1))))\n-\t\t\t{\n-\t\t\t  /* Stick __ at front of macro name.  */\n-\t\t\t  if (*y != '_')\n-\t\t\t    *x++ = '_';\n-\t\t\t  *x++ = '_';\n-\t\t\t  /* Arrange to stick __ at the end as well.  */\n-\t\t\t  flag = 1;\n-\t\t\t}\n-\n-\t\t      /* Copy the macro name.  */\n-\t\t      while (*y && *y != '=' && *y != ' ' && *y != '\\t')\n-\t\t\t*x++ = *y++;\n-\n-\t\t      if (flag)\n-\t\t\t{\n-\t\t\t  if (x[-1] != '_')\n-\t\t\t    {\n-\t\t\t      if (x[-2] != '_')\n-\t\t\t\t*x++ = '_';\n-\t\t\t      *x++ = '_';\n-\t\t\t    }\n-\t\t\t}\n-\n-\t\t      /* Copy the value given, if any.  */\n-\t\t      while (*y && *y != ' ' && *y != '\\t')\n-\t\t\t*x++ = *y++;\n-\t\t    }\n-\t\t  else if (*y == ' ' || *y == '\\t')\n-\t\t    /* Copy whitespace to the result.  */\n-\t\t    *x++ = *y++;\n-\t\t  /* Don't copy -A options  */\n-\t\t  else\n-\t\t    y++;\n-\t\t}\n-\t      *x++ = ' ';\n-\n-\t      /* Copy all of CPP_PREDEFINES into BUF,\n-\t\t but put __ after every -D.  */\n-\t      y = cpp_predefines;\n-\t      while (*y != 0)\n-\t\t{\n-\t\t  if (! strncmp (y, \"-D\", 2))\n-\t\t    {\n-\t\t      y += 2;\n-\n-\t\t      if (*y != '_'\n-\t\t\t  || (*(y + 1) != '_'\n-\t\t\t      && ! ISUPPER ((unsigned char) *(y + 1))))\n-\t\t\t{\n-\t\t\t  /* Stick -D__ at front of macro name.  */\n-\t\t\t  *x++ = '-';\n-\t\t\t  *x++ = 'D';\n-\t\t\t  if (*y != '_')\n-\t\t\t    *x++ = '_';\n-\t\t\t  *x++ = '_';\n-\n-\t\t\t  /* Copy the macro name.  */\n-\t\t\t  while (*y && *y != '=' && *y != ' ' && *y != '\\t')\n-\t\t\t    *x++ = *y++;\n-\n-\t\t\t  /* Copy the value given, if any.  */\n-\t\t\t  while (*y && *y != ' ' && *y != '\\t')\n-\t\t\t    *x++ = *y++;\n-\t\t\t}\n-\t\t      else\n-\t\t\t{\n-\t\t\t  /* Do not copy this macro - we have just done it before */\n-\t\t\t  while (*y && *y != ' ' && *y != '\\t')\n-\t\t\t    y++;\n-\t\t\t}\n-\t\t    }\n-\t\t  else if (*y == ' ' || *y == '\\t')\n-\t\t    /* Copy whitespace to the result.  */\n-\t\t    *x++ = *y++;\n-\t\t  /* Don't copy -A options.  */\n-\t\t  else\n-\t\t    y++;\n-\t\t}\n-\t      *x++ = ' ';\n-\n-\t      /* Copy all of the -A options in CPP_PREDEFINES into BUF.  */\n-\t      y = cpp_predefines;\n-\t      while (*y != 0)\n-\t\t{\n-\t\t  if (! strncmp (y, \"-A\", 2))\n-\t\t    /* Copy the whole option.  */\n-\t\t    while (*y && *y != ' ' && *y != '\\t')\n-\t\t      *x++ = *y++;\n-\t\t  else if (*y == ' ' || *y == '\\t')\n-\t\t    /* Copy whitespace to the result.  */\n-\t\t    *x++ = *y++;\n-\t\t  /* Don't copy other options.  */\n-\t\t  else\n-\t\t    y++;\n-\t\t}\n-\n-\t      *x = 0;\n-\n-\t      value = do_spec_1 (buf, 0, NULL);\n-\t      if (value != 0)\n-\t\treturn value;\n-\t    }\n-\t    break;\n-\n \t  case 'R':\n \t    /* We assume there is a directory\n \t       separator at the end of this string.  */"}, {"sha": "f839f6411c6d505124e09e95875cc2ad6934aa5f", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c08f71aa81fa4cfd4ccce0fa9047a26544761a40/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=c08f71aa81fa4cfd4ccce0fa9047a26544761a40", "patch": "@@ -628,7 +628,7 @@ typedef char _Bool;\n /* Other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have\n    been used.  */\n- #pragma GCC poison INT_ASM_OP ASM_OUTPUT_EH_REGION_BEG\t\t\t   \\\n+ #pragma GCC poison INT_ASM_OP ASM_OUTPUT_EH_REGION_BEG CPP_PREDEFINES\t   \\\n \tASM_OUTPUT_EH_REGION_END ASM_OUTPUT_LABELREF_AS_INT\t\t   \\\n \tDOESNT_NEED_UNWINDER EH_TABLE_LOOKUP OBJC_SELECTORS_WITHOUT_LABELS \\\n \tOMIT_EH_TABLE EASY_DIV_EXPR IMPLICIT_FIX_EXPR\t\t\t   \\"}]}