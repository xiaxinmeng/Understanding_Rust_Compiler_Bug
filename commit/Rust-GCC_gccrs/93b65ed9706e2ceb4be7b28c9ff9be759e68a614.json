{"sha": "93b65ed9706e2ceb4be7b28c9ff9be759e68a614", "node_id": "C_kwDOANBUbNoAKDkzYjY1ZWQ5NzA2ZTJjZWI0YmU3YjI4YzlmZjliZTc1OWU2OGE2MTQ", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-04-20T20:02:52Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-04-21T14:18:10Z"}, "message": "c++: wrong error with constexpr COMPOUND_EXPR [PR105321]\n\nHere we issue a bogus error for the first assert in the test.  Therein\nwe have\n\n<retval> = (void) (VIEW_CONVERT_EXPR<bool>(yes) || handle_error ());, VIEW_CONVERT_EXPR<int>(value);\n\nwhich has a COMPOUND_EXPR, so we get to cxx_eval_constant_expression\n<case COMPOUND_EXPR>.  The problem here is that we call\n\n7044             /* Check that the LHS is constant and then discard it.  */\n7045             cxx_eval_constant_expression (ctx, op0,\n7046                                           true, non_constant_p, overflow_p,\n7047                                           jump_target);\n\nwhere lval is always true, so the PARM_DECL 'yes' is not evaluated into\nits value.\n\nFixed by always passing false for 'lval' in cxx_eval_logical_expression;\nthere's no case where we actually expect an lvalue from a TRUTH_*.\n\n\tPR c++/105321\n\ngcc/cp/ChangeLog:\n\n\t* constexpr.cc (cxx_eval_logical_expression): Always pass false for lval\n\tto cxx_eval_constant_expression.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/constexpr-105321.C: New test.", "tree": {"sha": "1c9ee3ccf843c0333d7c46427067da094ba9c041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c9ee3ccf843c0333d7c46427067da094ba9c041"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93b65ed9706e2ceb4be7b28c9ff9be759e68a614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93b65ed9706e2ceb4be7b28c9ff9be759e68a614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93b65ed9706e2ceb4be7b28c9ff9be759e68a614", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93b65ed9706e2ceb4be7b28c9ff9be759e68a614/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c049f638da4f7b32b11e4d895184e0960bae5291", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c049f638da4f7b32b11e4d895184e0960bae5291", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c049f638da4f7b32b11e4d895184e0960bae5291"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "fa65290e9383136836a09b9d396ebb780b5bdd90", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b65ed9706e2ceb4be7b28c9ff9be759e68a614/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b65ed9706e2ceb4be7b28c9ff9be759e68a614/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=93b65ed9706e2ceb4be7b28c9ff9be759e68a614", "patch": "@@ -4566,19 +4566,18 @@ cxx_eval_bit_cast (const constexpr_ctx *ctx, tree t, bool *non_constant_p,\n static tree\n cxx_eval_logical_expression (const constexpr_ctx *ctx, tree t,\n                              tree bailout_value, tree continue_value,\n-\t\t\t     bool lval,\n-\t\t\t     bool *non_constant_p, bool *overflow_p)\n+\t\t\t     bool, bool *non_constant_p, bool *overflow_p)\n {\n   tree r;\n   tree lhs = cxx_eval_constant_expression (ctx, TREE_OPERAND (t, 0),\n-\t\t\t\t\t   lval,\n-\t\t\t\t\t   non_constant_p, overflow_p);\n+\t\t\t\t\t   /*lval*/false, non_constant_p,\n+\t\t\t\t\t   overflow_p);\n   VERIFY_CONSTANT (lhs);\n   if (tree_int_cst_equal (lhs, bailout_value))\n     return lhs;\n   gcc_assert (tree_int_cst_equal (lhs, continue_value));\n   r = cxx_eval_constant_expression (ctx, TREE_OPERAND (t, 1),\n-\t\t\t\t    lval, non_constant_p,\n+\t\t\t\t    /*lval*/false, non_constant_p,\n \t\t\t\t    overflow_p);\n   VERIFY_CONSTANT (r);\n   return r;"}, {"sha": "adb6830ff22a7816dedad89ae938cbeff449d987", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-105321.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93b65ed9706e2ceb4be7b28c9ff9be759e68a614/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-105321.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93b65ed9706e2ceb4be7b28c9ff9be759e68a614/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-105321.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-105321.C?ref=93b65ed9706e2ceb4be7b28c9ff9be759e68a614", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/105321\n+// { dg-do compile { target c++11 } }\n+\n+bool handle_error();\n+\n+constexpr int echo(int value, bool yes = true) noexcept\n+{\n+    return (yes || handle_error()), value;\n+}\n+\n+static_assert(echo(10) == 10, \"\");\n+\n+constexpr int echo2(int value, bool no = false) noexcept\n+{\n+    return (!no || handle_error()), value;\n+}\n+\n+static_assert(echo2(10) == 10, \"\");"}]}