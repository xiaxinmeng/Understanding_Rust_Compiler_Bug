{"sha": "88e6fdcbfb67eb63bdc7f0bf81e43d098a16cba4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhlNmZkY2JmYjY3ZWI2M2JkYzdmMGJmODFlNDNkMDk4YTE2Y2JhNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-09-14T23:23:17Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-09-14T23:23:17Z"}, "message": "recog.h (struct recog_data): Make dup_num...\n\n        * recog.h (struct recog_data): Make dup_num, operand_address_p,\n        n_operands, n_dups, n_alternatives `char' instead of `unsigned char'.\n        (struct insn_data): Likewise with n_operands, n_dups,\n        n_alternatives, output_format.\n        * regclass.c (scan_one_insn): Cast n_operands to int before\n        arithmetic inside comparison.\n\nFrom-SVN: r29413", "tree": {"sha": "90fc3d83b06445a99964e9388ae95062502885c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90fc3d83b06445a99964e9388ae95062502885c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88e6fdcbfb67eb63bdc7f0bf81e43d098a16cba4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e6fdcbfb67eb63bdc7f0bf81e43d098a16cba4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88e6fdcbfb67eb63bdc7f0bf81e43d098a16cba4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e6fdcbfb67eb63bdc7f0bf81e43d098a16cba4/comments", "author": null, "committer": null, "parents": [{"sha": "5a26ca07ef033e76fdc04106cc9d28cefebe3ea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a26ca07ef033e76fdc04106cc9d28cefebe3ea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a26ca07ef033e76fdc04106cc9d28cefebe3ea6"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "62d9e51cb7dba7d255edd9bc2ad5c4bbae188632", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e6fdcbfb67eb63bdc7f0bf81e43d098a16cba4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e6fdcbfb67eb63bdc7f0bf81e43d098a16cba4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88e6fdcbfb67eb63bdc7f0bf81e43d098a16cba4", "patch": "@@ -1,3 +1,12 @@\n+Tue Sep 14 16:20:24 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* recog.h (struct recog_data): Make dup_num, operand_address_p,\n+\tn_operands, n_dups, n_alternatives `char' instead of `unsigned char'.\n+\t(struct insn_data): Likewise with n_operands, n_dups, \n+\tn_alternatives, output_format.\n+\t* regclass.c (scan_one_insn): Cast n_operands to int before\n+\tarithmetic inside comparison.\n+\n Tue Sep 14 15:13:36 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* toplev.c (compile_function): Unconditionally emit nop."}, {"sha": "869bb31455c0f5836da1334d3d651c78a85788d6", "filename": "gcc/recog.h", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e6fdcbfb67eb63bdc7f0bf81e43d098a16cba4/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e6fdcbfb67eb63bdc7f0bf81e43d098a16cba4/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=88e6fdcbfb67eb63bdc7f0bf81e43d098a16cba4", "patch": "@@ -156,21 +156,31 @@ struct recog_data\n \n   /* Gives the operand number that was duplicated in the Nth\n      duplicate-appearance of an operand.  */\n-  unsigned char dup_num[MAX_DUP_OPERANDS];\n+  char dup_num[MAX_DUP_OPERANDS];\n \n #ifndef REGISTER_CONSTRAINTS\n   /* Nonzero if operand N should be an address.  */\n-  unsigned char operand_address_p[MAX_RECOG_OPERANDS];\n+  char operand_address_p[MAX_RECOG_OPERANDS];\n #endif\n \n+  /* ??? Note that these are `char' instead of `unsigned char' to (try to)\n+     avoid certain lossage from K&R C, wherein `unsigned char' default \n+     promotes to `unsigned int' instead of `int' as in ISO C.  As of 1999,\n+     the most common places to bootstrap from K&R C are SunOS and HPUX,\n+     both of which have signed characters by default.  The only other\n+     supported natives that have both K&R C and unsigned characters are\n+     ROMP and Irix 3, and neither have been seen for a while, but do\n+     continue to consider unsignedness when performing arithmetic inside\n+     a comparison.  */\n+\n   /* The number of operands of the insn.  */\n-  unsigned char n_operands;\n+  char n_operands;\n \n   /* The number of MATCH_DUPs in the insn.  */\n-  unsigned char n_dups;\n+  char n_dups;\n \n   /* The number of alternatives in the constraints for the insn.  */\n-  unsigned char n_alternatives;\n+  char n_alternatives;\n };\n \n extern struct recog_data recog_data;\n@@ -225,10 +235,10 @@ struct insn_data\n   insn_gen_fn genfun;\n   const struct insn_operand_data *operand;\n \n-  unsigned char n_operands;\n-  unsigned char n_dups;\n-  unsigned char n_alternatives;\n-  unsigned char output_format;\n+  char n_operands;\n+  char n_dups;\n+  char n_alternatives;\n+  char output_format;\n };\n \n extern const struct insn_data insn_data[];"}, {"sha": "1963a95a474016ffa47df85de0054904e0ef897c", "filename": "gcc/regclass.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e6fdcbfb67eb63bdc7f0bf81e43d098a16cba4/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e6fdcbfb67eb63bdc7f0bf81e43d098a16cba4/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=88e6fdcbfb67eb63bdc7f0bf81e43d098a16cba4", "patch": "@@ -901,7 +901,7 @@ scan_one_insn (insn, pass)\n      have been initialized.  We must do this even if one operand\n      is a constant--see addsi3 in m68k.md.  */\n \n-  for (i = 0; i < recog_data.n_operands - 1; i++)\n+  for (i = 0; i < (int) recog_data.n_operands - 1; i++)\n     if (constraints[i][0] == '%')\n       {\n \tconst char *xconstraints[MAX_RECOG_OPERANDS];"}]}