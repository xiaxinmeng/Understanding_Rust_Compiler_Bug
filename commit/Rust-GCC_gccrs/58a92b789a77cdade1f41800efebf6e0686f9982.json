{"sha": "58a92b789a77cdade1f41800efebf6e0686f9982", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThhOTJiNzg5YTc3Y2RhZGUxZjQxODAwZWZlYmY2ZTA2ODZmOTk4Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-10T18:00:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-29T18:34:05Z"}, "message": "c++: ICE with anonymous union [PR97974]\n\nWhile working on the GCC 11 patch, it occurred to me that we could move\nthe errors about invalid members from finish_struct_anon_r to here, so we\nproperly get a diagnostic in g++.law/union4.C.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/97974\n\t* class.c (finish_struct_anon_r): Drop complain parm.\n\tRemove non-field diagnostic.\n\t(finish_struct_anon): Adjust.\n\t* decl.c (fixup_anonymous_aggr): Move non-field diagnostic here.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/97974\n\t* g++.old-deja/g++.law/union4.C: Add expected diagnostic.", "tree": {"sha": "480dac0f25d2e61c62b283b6090bb9c5ddf78588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/480dac0f25d2e61c62b283b6090bb9c5ddf78588"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58a92b789a77cdade1f41800efebf6e0686f9982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a92b789a77cdade1f41800efebf6e0686f9982", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58a92b789a77cdade1f41800efebf6e0686f9982", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a92b789a77cdade1f41800efebf6e0686f9982/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9fc64d8120937c5c37e1cacb2f55ae196e8897d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9fc64d8120937c5c37e1cacb2f55ae196e8897d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9fc64d8120937c5c37e1cacb2f55ae196e8897d"}], "stats": {"total": 81, "additions": 44, "deletions": 37}, "files": [{"sha": "d693b4386682d486809bd239506004499bb12d54", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a92b789a77cdade1f41800efebf6e0686f9982/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a92b789a77cdade1f41800efebf6e0686f9982/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=58a92b789a77cdade1f41800efebf6e0686f9982", "patch": "@@ -3023,7 +3023,7 @@ warn_hidden (tree t)\n /* Recursive helper for finish_struct_anon.  */\n \n static void\n-finish_struct_anon_r (tree field, bool complain)\n+finish_struct_anon_r (tree field)\n {\n   for (tree elt = TYPE_FIELDS (TREE_TYPE (field)); elt; elt = DECL_CHAIN (elt))\n     {\n@@ -3039,34 +3039,6 @@ finish_struct_anon_r (tree field, bool complain)\n \t      || TYPE_UNNAMED_P (TREE_TYPE (elt))))\n \tcontinue;\n \n-      if (complain\n-\t  && (TREE_CODE (elt) != FIELD_DECL\n-\t      || (TREE_PRIVATE (elt) || TREE_PROTECTED (elt))))\n-\t{\n-\t  /* We already complained about static data members in\n-\t     finish_static_data_member_decl.  */\n-\t  if (!VAR_P (elt))\n-\t    {\n-\t      auto_diagnostic_group d;\n-\t      if (permerror (DECL_SOURCE_LOCATION (elt),\n-\t\t\t     TREE_CODE (TREE_TYPE (field)) == UNION_TYPE\n-\t\t\t     ? \"%q#D invalid; an anonymous union may \"\n-\t\t\t     \"only have public non-static data members\"\n-\t\t\t     : \"%q#D invalid; an anonymous struct may \"\n-\t\t\t     \"only have public non-static data members\", elt))\n-\t\t{\n-\t\t  static bool hint;\n-\t\t  if (flag_permissive && !hint)\n-\t\t    {\n-\t\t      hint = true;\n-\t\t      inform (DECL_SOURCE_LOCATION (elt),\n-\t\t\t      \"this flexibility is deprecated and will be \"\n-\t\t\t      \"removed\");\n-\t\t    }\n-\t\t}\n-\t    }\n-\t}\n-\n       TREE_PRIVATE (elt) = TREE_PRIVATE (field);\n       TREE_PROTECTED (elt) = TREE_PROTECTED (field);\n \n@@ -3084,7 +3056,7 @@ finish_struct_anon_r (tree field, bool complain)\n \t int j=A().i;  */\n       if (DECL_NAME (elt) == NULL_TREE\n \t  && ANON_AGGR_TYPE_P (TREE_TYPE (elt)))\n-\tfinish_struct_anon_r (elt, /*complain=*/false);\n+\tfinish_struct_anon_r (elt);\n     }\n }\n \n@@ -3103,7 +3075,7 @@ finish_struct_anon (tree t)\n \n       if (DECL_NAME (field) == NULL_TREE\n \t  && ANON_AGGR_TYPE_P (TREE_TYPE (field)))\n-\tfinish_struct_anon_r (field, /*complain=*/true);\n+\tfinish_struct_anon_r (field);\n     }\n }\n "}, {"sha": "e51c1b09652ca6a9b8fc8c5ee7be74bc03135aee", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 40, "deletions": 5, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a92b789a77cdade1f41800efebf6e0686f9982/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a92b789a77cdade1f41800efebf6e0686f9982/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=58a92b789a77cdade1f41800efebf6e0686f9982", "patch": "@@ -5005,12 +5005,47 @@ fixup_anonymous_aggr (tree t)\n   TYPE_HAS_COPY_ASSIGN (t) = 0;\n   TYPE_HAS_CONST_COPY_ASSIGN (t) = 0;\n \n-  /* Splice the implicitly generated functions out of TYPE_FIELDS.  */\n+  /* Splice the implicitly generated functions out of TYPE_FIELDS and diagnose\n+     invalid members.  */\n   for (tree probe, *prev_p = &TYPE_FIELDS (t); (probe = *prev_p);)\n-    if (TREE_CODE (probe) == FUNCTION_DECL && DECL_ARTIFICIAL (probe))\n-      *prev_p = DECL_CHAIN (probe);\n-    else\n-      prev_p = &DECL_CHAIN (probe);\n+    {\n+      if (TREE_CODE (probe) == FUNCTION_DECL && DECL_ARTIFICIAL (probe))\n+\t*prev_p = DECL_CHAIN (probe);\n+      else\n+\tprev_p = &DECL_CHAIN (probe);\n+\n+      if (DECL_ARTIFICIAL (probe)\n+\t  && (!DECL_IMPLICIT_TYPEDEF_P (probe)\n+\t      || TYPE_ANON_P (TREE_TYPE (probe))))\n+\tcontinue;\n+\n+      if (TREE_CODE (probe) != FIELD_DECL\n+\t  || (TREE_PRIVATE (probe) || TREE_PROTECTED (probe)))\n+\t{\n+\t  /* We already complained about static data members in\n+\t     finish_static_data_member_decl.  */\n+\t  if (!VAR_P (probe))\n+\t    {\n+\t      auto_diagnostic_group d;\n+\t      if (permerror (DECL_SOURCE_LOCATION (probe),\n+\t\t\t     TREE_CODE (t) == UNION_TYPE\n+\t\t\t     ? \"%q#D invalid; an anonymous union may \"\n+\t\t\t     \"only have public non-static data members\"\n+\t\t\t     : \"%q#D invalid; an anonymous struct may \"\n+\t\t\t     \"only have public non-static data members\", probe))\n+\t\t{\n+\t\t  static bool hint;\n+\t\t  if (flag_permissive && !hint)\n+\t\t    {\n+\t\t      hint = true;\n+\t\t      inform (DECL_SOURCE_LOCATION (probe),\n+\t\t\t      \"this flexibility is deprecated and will be \"\n+\t\t\t      \"removed\");\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+      }\n \n   /* Splice all functions out of CLASSTYPE_MEMBER_VEC.  */\n   vec<tree,va_gc>* vec = CLASSTYPE_MEMBER_VEC (t);"}, {"sha": "ec30d1e3a13653fcae7ed369d45d4a2303e41ee7", "filename": "gcc/testsuite/g++.old-deja/g++.law/union4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58a92b789a77cdade1f41800efebf6e0686f9982/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Funion4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58a92b789a77cdade1f41800efebf6e0686f9982/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Funion4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Funion4.C?ref=58a92b789a77cdade1f41800efebf6e0686f9982", "patch": "@@ -7,7 +7,7 @@\n // Message-ID: <m0pA49A-0000LdC@piano.veritas.com>\n \n static union {\n-        struct SS {\n+        struct SS {\t\t// { dg-error \"anonymous union\" }\n                 int ss;\n         };\n };// { dg-error \"no members\" }"}]}