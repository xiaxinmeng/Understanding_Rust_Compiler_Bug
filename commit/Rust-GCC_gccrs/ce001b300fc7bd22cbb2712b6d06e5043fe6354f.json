{"sha": "ce001b300fc7bd22cbb2712b6d06e5043fe6354f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2UwMDFiMzAwZmM3YmQyMmNiYjI3MTJiNmQwNmU1MDQzZmU2MzU0Zg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-30T17:42:04Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-30T17:42:04Z"}, "message": "Use if-constexpr instead of overloading for customization point\n\nThis combines two of the std::ranges::swap.operator() overloads into a\nsingle function template. Using if-constexpr to choose between\nimplementations should give the compiler less work to do than using\noverloading.\n\n\t* include/std/concepts (std::ranges::swap): Use a single overload for\n\tthe non-array cases, and switch using if-constexpr.\n\nFrom-SVN: r277635", "tree": {"sha": "b2683f18d18e9fffb66104d9f990fc5557782463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2683f18d18e9fffb66104d9f990fc5557782463"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce001b300fc7bd22cbb2712b6d06e5043fe6354f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce001b300fc7bd22cbb2712b6d06e5043fe6354f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce001b300fc7bd22cbb2712b6d06e5043fe6354f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce001b300fc7bd22cbb2712b6d06e5043fe6354f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "411679568b2e3b1ca9b84673c430f2fdc9360368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/411679568b2e3b1ca9b84673c430f2fdc9360368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/411679568b2e3b1ca9b84673c430f2fdc9360368"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "059976e9f6f3d1bce428012f74cb2fb062f63c73", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce001b300fc7bd22cbb2712b6d06e5043fe6354f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce001b300fc7bd22cbb2712b6d06e5043fe6354f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ce001b300fc7bd22cbb2712b6d06e5043fe6354f", "patch": "@@ -1,5 +1,8 @@\n 2019-10-30  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/concepts (std::ranges::swap): Use a single overload for\n+\tthe non-array cases, and switch using if-constexpr.\n+\n \t* include/bits/stl_iterator.h (__normal_iterator::iterator_concept):\n \tGuard with __cpp_lib_concepts macro.\n "}, {"sha": "c4acfd2e212f1830b4e52a46cd06c4565633adcc", "filename": "libstdc++-v3/include/std/concepts", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce001b300fc7bd22cbb2712b6d06e5043fe6354f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce001b300fc7bd22cbb2712b6d06e5043fe6354f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fconcepts?ref=ce001b300fc7bd22cbb2712b6d06e5043fe6354f", "patch": "@@ -173,12 +173,37 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       struct _Swap\n       {\n+      private:\n+\ttemplate<typename _Tp, typename _Up>\n+\t  static constexpr bool\n+\t  _S_noexcept()\n+\t  {\n+\t    if constexpr (__adl_swap<_Tp, _Up>)\n+\t      return noexcept(swap(std::declval<_Tp>(), std::declval<_Up>()));\n+\t    else\n+\t      return is_nothrow_move_constructible_v<remove_reference_t<_Tp>>\n+\t\t   && is_nothrow_move_assignable_v<remove_reference_t<_Tp>>;\n+\t  }\n+\n+      public:\n \ttemplate<typename _Tp, typename _Up>\n \t  requires __adl_swap<_Tp, _Up>\n+\t  || (same_as<_Tp, _Up> && is_lvalue_reference_v<_Tp>\n+\t      && move_constructible<remove_reference_t<_Tp>>\n+\t      && assignable_from<_Tp, remove_reference_t<_Tp>>)\n \t  constexpr void\n \t  operator()(_Tp&& __t, _Up&& __u) const\n-\t  noexcept(noexcept(swap(std::declval<_Tp>(), std::declval<_Up>())))\n-\t  { swap(static_cast<_Tp&&>(__t), static_cast<_Up&&>(__u)); }\n+\t  noexcept(_S_noexcept<_Tp, _Up>())\n+\t  {\n+\t    if constexpr (__adl_swap<_Tp, _Up>)\n+\t      swap(static_cast<_Tp&&>(__t), static_cast<_Up&&>(__u));\n+\t    else\n+\t      {\n+\t\tauto __tmp = static_cast<remove_reference_t<_Tp>&&>(__t);\n+\t\t__t = static_cast<remove_reference_t<_Tp>&&>(__u);\n+\t\t__u = static_cast<remove_reference_t<_Tp>&&>(__tmp);\n+\t      }\n+\t  }\n \n \ttemplate<typename _Tp, typename _Up, size_t _Num>\n \t  requires requires(const _Swap& __swap, _Tp& __e1, _Up& __e2) {\n@@ -191,19 +216,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    for (size_t __n = 0; __n < _Num; ++__n)\n \t      (*this)(__e1[__n], __e2[__n]);\n \t  }\n-\n-\ttemplate<typename _Tp>\n-\t  requires (!__adl_swap<_Tp&, _Tp&>\n-\t    && move_constructible<_Tp> && assignable_from<_Tp&, _Tp>)\n-\t  constexpr void\n-\t  operator()(_Tp& __e1, _Tp& __e2) const\n-\t  noexcept(is_nothrow_move_constructible_v<_Tp>\n-\t\t   && is_nothrow_move_assignable_v<_Tp>)\n-\t  {\n-\t    _Tp __tmp = static_cast<_Tp&&>(__e1);\n-\t    __e1 = static_cast<_Tp&&>(__e2);\n-\t    __e2 = static_cast<_Tp&&>(__tmp);\n-\t  }\n       };\n     } // namespace __cust_swap\n "}]}