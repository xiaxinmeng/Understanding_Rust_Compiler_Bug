{"sha": "7a388ee4530a1924bd3e0100078e5179bf5ee18c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2EzODhlZTQ1MzBhMTkyNGJkM2UwMTAwMDc4ZTUxNzliZjVlZTE4Yw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-01-03T01:12:56Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-01-03T01:12:56Z"}, "message": "pr16194.c: We now output error on all three functions, not just first one.\n\n\n\t* gcc.dg/pr16194.c: We now output error on all three functions, not just\n\tfirst one.\n\n\t* cgraph.c: Include tree-flow.h\n\t(cgraph_add_new-function): Handle IPA_SSA mode; execute\n\tearly_local_passes.\n\t* cgraph.h (enum cgraph_state): Add CGRAPH_STATE_IPA_SSA.\n\t* tree-pass.h (pass_all_early_optimizations): Declare.\n\t* cgraphunit.c (cgraph_process_new_functions): Add IPA_SSA; execute\n\tearly_local_passes.\n\t(cgraph_analyze_function): Do early_local_passes.\n\t* tree-mudflap.c (mf_decl_cache_locals, mf_build_check_statement_for):\n\tDo not add referenced vars.\n\t* tree-optimize.c (gate_all_optimizations): Do not execute when not in\n\tSSA form.\n\t(gate_all_early_local_passes): New gate.\n\t(pass_early_local_passes): Use new gate.\n\t(execute_early_local_optimizations): New functions.\n\t(gate_all_early_optimizations): New gate.\n\t(pass_all_early_optimizations): New pass.\n\t(execute_free_datastructures): Free SSA only when initialized.\n\t(gate_init_datastructures): Init only when optimizing.\n\t(tree_lowering_passes): Do early local passes when called late.\n\t* tree-profile.c (do_tree_profiling): Don't profile functions added\n\tlate.\n\t(do_early_tree_profiling, pass_early_tree_profile): Kill.\n\t* tree-cfg.c (update_modified_stmts): Do not update when operands are\n\tnot active.\n\t* passes.c (init_optimizations_passes): Reorder so we go into SSA\n\tduring early_local_passes.\n\t* Makefile.in (cgraph.o): Add dependency on tree-flow.h.\n\nFrom-SVN: r120373", "tree": {"sha": "8220e38043cf20d1777f9ce1815232f73e5df606", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8220e38043cf20d1777f9ce1815232f73e5df606"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a388ee4530a1924bd3e0100078e5179bf5ee18c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a388ee4530a1924bd3e0100078e5179bf5ee18c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a388ee4530a1924bd3e0100078e5179bf5ee18c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a388ee4530a1924bd3e0100078e5179bf5ee18c/comments", "author": null, "committer": null, "parents": [{"sha": "93251c58a654a013e1033e7d497faa4a74b20618", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93251c58a654a013e1033e7d497faa4a74b20618", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93251c58a654a013e1033e7d497faa4a74b20618"}], "stats": {"total": 186, "additions": 144, "deletions": 42}, "files": [{"sha": "8879773e93c54c0023b6551d5b495307adfc6715", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a388ee4530a1924bd3e0100078e5179bf5ee18c", "patch": "@@ -1,3 +1,35 @@\n+2007-01-02  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cgraph.c: Include tree-flow.h\n+\t(cgraph_add_new-function): Handle IPA_SSA mode; execute\n+\tearly_local_passes.\n+\t* cgraph.h (enum cgraph_state): Add CGRAPH_STATE_IPA_SSA.\n+\t* tree-pass.h (pass_all_early_optimizations): Declare.\n+\t* cgraphunit.c (cgraph_process_new_functions): Add IPA_SSA; execute\n+\tearly_local_passes.\n+\t(cgraph_analyze_function): Do early_local_passes.\n+\t* tree-mudflap.c (mf_decl_cache_locals, mf_build_check_statement_for):\n+\tDo not add referenced vars.\n+\t* tree-optimize.c (gate_all_optimizations): Do not execute when not in\n+\tSSA form.\n+\t(gate_all_early_local_passes): New gate.\n+\t(pass_early_local_passes): Use new gate.\n+\t(execute_early_local_optimizations): New functions.\n+\t(gate_all_early_optimizations): New gate.\n+\t(pass_all_early_optimizations): New pass.\n+\t(execute_free_datastructures): Free SSA only when initialized.\n+\t(gate_init_datastructures): Init only when optimizing.\n+\t(tree_lowering_passes): Do early local passes when called late.\n+\t* tree-profile.c (do_tree_profiling): Don't profile functions added\n+\tlate.\n+\t(do_early_tree_profiling, pass_early_tree_profile): Kill.\n+\t* tree-cfg.c (update_modified_stmts): Do not update when operands are\n+\tnot active.\n+\t* passes.c (init_optimizations_passes): Reorder so we go into SSA\n+\tduring early_local_passes.\n+\t* Makefile.in (cgraph.o): Add dependency on tree-flow.h.\n+\n+\n 2007-01-02  Carlos O'Donell  <carlos@codesourcery.com>\n \n \t* Makefile.in: Update copyright year."}, {"sha": "f14088b86cfdcb6a49cb9a8eec871b30e52cef7b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=7a388ee4530a1924bd3e0100078e5179bf5ee18c", "patch": "@@ -2293,7 +2293,7 @@ simplify-rtx.o : simplify-rtx.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n cgraph.o : cgraph.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    langhooks.h toplev.h $(FLAGS_H) $(GGC_H) $(TARGET_H) $(CGRAPH_H) \\\n    gt-cgraph.h output.h intl.h $(BASIC_BLOCK_H) debug.h $(HASHTAB_H) \\\n-   $(TREE_INLINE_H) $(VARRAY_H) $(TREE_DUMP_H)\n+   $(TREE_INLINE_H) $(VARRAY_H) $(TREE_DUMP_H) $(TREE_FLOW_H)\n cgraphunit.o : cgraphunit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(TREE_INLINE_H) toplev.h $(FLAGS_H) $(GGC_H) \\\n    $(TARGET_H) $(CGRAPH_H) intl.h pointer-set.h $(FUNCTION_H) $(TREE_GIMPLE_H) \\"}, {"sha": "1baed252439195ce4917a1f32e91e08da53b7dd4", "filename": "gcc/cgraph.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=7a388ee4530a1924bd3e0100078e5179bf5ee18c", "patch": "@@ -83,6 +83,7 @@ The callgraph:\n #include \"intl.h\"\n #include \"tree-gimple.h\"\n #include \"tree-dump.h\"\n+#include \"tree-flow.h\"\n \n static void cgraph_node_remove_callers (struct cgraph_node *node);\n static inline void cgraph_edge_remove_caller (struct cgraph_edge *e);\n@@ -942,6 +943,7 @@ cgraph_add_new_function (tree fndecl, bool lowered)\n         break;\n \n       case CGRAPH_STATE_IPA:\n+      case CGRAPH_STATE_IPA_SSA:\n       case CGRAPH_STATE_EXPANSION:\n \t/* Bring the function into finalized state and enqueue for later\n \t   analyzing and compilation.  */\n@@ -963,6 +965,10 @@ cgraph_add_new_function (tree fndecl, bool lowered)\n \ttree_register_cfg_hooks ();\n \tif (!lowered)\n           tree_lowering_passes (fndecl);\n+\tbitmap_obstack_initialize (NULL);\n+\tif (!gimple_in_ssa_p (DECL_STRUCT_FUNCTION (fndecl)) && optimize)\n+\t  execute_pass_list (pass_early_local_passes.sub);\n+\tbitmap_obstack_release (NULL);\n \ttree_rest_of_compilation (fndecl);\n \tpop_cfun ();\n \tcurrent_function_decl = NULL;"}, {"sha": "6f2d3be9a90c24c2d02ec0353e09e14321fc98ee", "filename": "gcc/cgraph.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=7a388ee4530a1924bd3e0100078e5179bf5ee18c", "patch": "@@ -260,6 +260,8 @@ enum cgraph_state\n   CGRAPH_STATE_CONSTRUCTION,\n   /* Callgraph is built and IPA passes are being run.  */\n   CGRAPH_STATE_IPA,\n+  /* Callgraph is built and all functions are transformed to SSA form.  */\n+  CGRAPH_STATE_IPA_SSA,\n   /* Functions are now ordered and being passed to RTL expanders.  */\n   CGRAPH_STATE_EXPANSION,\n   /* All cgraph expansion is done.  */"}, {"sha": "22727203186f4d85df3b79a2c0116bac4b0f7dae", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=7a388ee4530a1924bd3e0100078e5179bf5ee18c", "patch": "@@ -294,6 +294,7 @@ cgraph_process_new_functions (void)\n \t  break;\n \n \tcase CGRAPH_STATE_IPA:\n+\tcase CGRAPH_STATE_IPA_SSA:\n \t  /* When IPA optimization already started, do all essential\n \t     transformations that has been already performed on the whole\n \t     cgraph but not on this function.  */\n@@ -313,6 +314,12 @@ cgraph_process_new_functions (void)\n \t  initialize_inline_failed (node);\n \t  if (flag_really_no_inline && !node->local.disregard_inline_limits)\n \t     node->local.inlinable = 0;\n+\t  if ((cgraph_state == CGRAPH_STATE_IPA_SSA\n+\t      && !gimple_in_ssa_p (DECL_STRUCT_FUNCTION (fndecl)))\n+\t      /* When not optimizing, be sure we run early local passes anyway\n+\t\t to expand OMP.  */\n+\t      || !optimize)\n+\t    execute_pass_list (pass_early_local_passes.sub);\n \t  free_dominance_info (CDI_POST_DOMINATORS);\n \t  free_dominance_info (CDI_DOMINATORS);\n \t  pop_cfun ();\n@@ -877,6 +884,15 @@ cgraph_analyze_function (struct cgraph_node *node)\n     node->local.inlinable = 0;\n   /* Inlining characteristics are maintained by the cgraph_mark_inline.  */\n   node->global.insns = node->local.self_insns;\n+  if (!flag_unit_at_a_time)\n+    {\n+      bitmap_obstack_initialize (NULL);\n+      tree_register_cfg_hooks ();\n+      execute_pass_list (pass_early_local_passes.sub);\n+      free_dominance_info (CDI_POST_DOMINATORS);\n+      free_dominance_info (CDI_DOMINATORS);\n+      bitmap_obstack_release (NULL);\n+    }\n \n   node->analyzed = true;\n   pop_cfun ();"}, {"sha": "d40f84e26882fc2a382b66042a7564a8b43d8587", "filename": "gcc/passes.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=7a388ee4530a1924bd3e0100078e5179bf5ee18c", "patch": "@@ -461,19 +461,28 @@ init_optimization_passes (void)\n   NEXT_PASS (pass_lower_complex_O0);\n   NEXT_PASS (pass_lower_vector);\n   NEXT_PASS (pass_warn_function_return);\n-  NEXT_PASS (pass_early_tree_profile);\n   *p = NULL;\n \n   p = &pass_early_local_passes.sub;\n   NEXT_PASS (pass_tree_profile);\n   NEXT_PASS (pass_cleanup_cfg);\n+  NEXT_PASS (pass_init_datastructures);\n+  NEXT_PASS (pass_expand_omp);\n+  NEXT_PASS (pass_all_early_optimizations);\n   NEXT_PASS (pass_rebuild_cgraph_edges);\n   *p = NULL;\n \n+  p = &pass_all_early_optimizations.sub;\n+  NEXT_PASS (pass_referenced_vars);\n+  NEXT_PASS (pass_reset_cc_flags);\n+  NEXT_PASS (pass_build_ssa);\n+  NEXT_PASS (pass_early_warn_uninitialized);\n+  NEXT_PASS (pass_cleanup_cfg);\n+\n+  *p = NULL;\n+\n   p = &all_passes;\n   NEXT_PASS (pass_fixup_cfg);\n-  NEXT_PASS (pass_init_datastructures);\n-  NEXT_PASS (pass_expand_omp);\n   NEXT_PASS (pass_all_optimizations);\n   NEXT_PASS (pass_warn_function_noreturn);\n   NEXT_PASS (pass_free_datastructures);\n@@ -485,10 +494,7 @@ init_optimization_passes (void)\n   *p = NULL;\n \n   p = &pass_all_optimizations.sub;\n-  NEXT_PASS (pass_referenced_vars);\n-  NEXT_PASS (pass_reset_cc_flags);\n   NEXT_PASS (pass_create_structure_vars);\n-  NEXT_PASS (pass_build_ssa);\n   NEXT_PASS (pass_may_alias);\n   NEXT_PASS (pass_return_slot);\n   NEXT_PASS (pass_rename_ssa_copies);"}, {"sha": "135b506d3321726d69a973bbaee592a3dc2c49ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a388ee4530a1924bd3e0100078e5179bf5ee18c", "patch": "@@ -1,3 +1,8 @@\n+2007-01-02  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.dg/pr16194.c: We now output error on all three functions, not just\n+\tfirst one.\n+\n 2007-01-02  Manuel Lopez-Ibanez <manu@gcc.gnu.org>\n \n \tPR c/19977"}, {"sha": "313f0eaa30df20ba9ae42836071f3b190a1eba86", "filename": "gcc/testsuite/gcc.dg/pr16194.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr16194.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr16194.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr16194.c?ref=7a388ee4530a1924bd3e0100078e5179bf5ee18c", "patch": "@@ -56,12 +56,12 @@ void bug (void)\n void bug2 (void)\n {\n   register char* dst ASMDECL;\n-  __asm__ (\"\": :\"g\"(*dst) CLOBBER_LIST);\n+  __asm__ (\"\": :\"g\"(*dst) CLOBBER_LIST); /* { dg-error \"conflict\" } */\n }\n \n void\n foo (void)\n {\n   register struct C *dst ASMDECL;\n-  __asm__ (\"\" : \"=g\"(dst->c.b[1].a) INP_CLOBBER_LIST);\n+  __asm__ (\"\" : \"=g\"(dst->c.b[1].a) INP_CLOBBER_LIST); /* { dg-error \"conflict\" } */\n }"}, {"sha": "5be07cb07c545957657717bdb1164d34155b20f7", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 63, "deletions": 6, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=7a388ee4530a1924bd3e0100078e5179bf5ee18c", "patch": "@@ -57,8 +57,9 @@ static bool\n gate_all_optimizations (void)\n {\n   return (optimize >= 1\n-\t  /* Don't bother doing anything if the program has errors.  */\n-\t  && !(errorcount || sorrycount));\n+\t  /* Don't bother doing anything if the program has errors. \n+\t     We have to pass down the queue if we already went into SSA */\n+\t  && (!(errorcount || sorrycount) || gimple_in_ssa_p (cfun)));\n }\n \n struct tree_opt_pass pass_all_optimizations =\n@@ -78,10 +79,19 @@ struct tree_opt_pass pass_all_optimizations =\n   0\t\t\t\t\t/* letter */\n };\n \n+/* Gate: execute, or not, all of the non-trivial optimizations.  */\n+\n+static bool\n+gate_all_early_local_passes (void)\n+{\n+\t  /* Don't bother doing anything if the program has errors.  */\n+  return (!errorcount && !sorrycount);\n+}\n+\n struct tree_opt_pass pass_early_local_passes =\n {\n-  NULL,\t\t\t\t\t/* name */\n-  gate_all_optimizations,\t\t/* gate */\n+  \"early_local_cleanups\",\t\t/* name */\n+  gate_all_early_local_passes,\t\t/* gate */\n   NULL,\t\t\t\t\t/* execute */\n   NULL,\t\t\t\t\t/* sub */\n   NULL,\t\t\t\t\t/* next */\n@@ -95,6 +105,41 @@ struct tree_opt_pass pass_early_local_passes =\n   0\t\t\t\t\t/* letter */\n };\n \n+static unsigned int\n+execute_early_local_optimizations (void)\n+{\n+  if (flag_unit_at_a_time)\n+    cgraph_state = CGRAPH_STATE_IPA_SSA;\n+  return 0;\n+}\n+\n+/* Gate: execute, or not, all of the non-trivial optimizations.  */\n+\n+static bool\n+gate_all_early_optimizations (void)\n+{\n+  return (optimize >= 1\n+\t  /* Don't bother doing anything if the program has errors.  */\n+\t  && !(errorcount || sorrycount));\n+}\n+\n+struct tree_opt_pass pass_all_early_optimizations =\n+{\n+  \"early_optimizations\",\t\t/* name */\n+  gate_all_early_optimizations,\t\t/* gate */\n+  execute_early_local_optimizations,\t/* execute */\n+  NULL,\t\t\t\t\t/* sub */\n+  NULL,\t\t\t\t\t/* next */\n+  0,\t\t\t\t\t/* static_pass_number */\n+  0,\t\t\t\t\t/* tv_id */\n+  0,\t\t\t\t\t/* properties_required */\n+  0,\t\t\t\t\t/* properties_provided */\n+  0,\t\t\t\t\t/* properties_destroyed */\n+  0,\t\t\t\t\t/* todo_flags_start */\n+  0,\t\t\t\t\t/* todo_flags_finish */\n+  0\t\t\t\t\t/* letter */\n+};\n+\n /* Pass: cleanup the CFG just before expanding trees to RTL.\n    This is just a round of label cleanups and case node grouping\n    because after the tree optimizers have run such cleanups may\n@@ -170,7 +215,8 @@ execute_free_datastructures (void)\n \n   /* Remove the ssa structures.  Do it here since this includes statement\n      annotations that need to be intact during disband_implicit_edges.  */\n-  delete_tree_ssa ();\n+  if (cfun->gimple_df)\n+    delete_tree_ssa ();\n   return 0;\n }\n \n@@ -376,10 +422,18 @@ execute_init_datastructures (void)\n   return 0;\n }\n \n+/* Gate: initialize or not the SSA datastructures.  */\n+\n+static bool\n+gate_init_datastructures (void)\n+{\n+  return (optimize >= 1);\n+}\n+\n struct tree_opt_pass pass_init_datastructures =\n {\n   NULL,\t\t\t\t\t/* name */\n-  NULL,\t\t\t\t\t/* gate */\n+  gate_init_datastructures,\t\t/* gate */\n   execute_init_datastructures,\t\t/* execute */\n   NULL,\t\t\t\t\t/* sub */\n   NULL,\t\t\t\t\t/* next */\n@@ -403,7 +457,10 @@ tree_lowering_passes (tree fn)\n   tree_register_cfg_hooks ();\n   bitmap_obstack_initialize (NULL);\n   execute_pass_list (all_lowering_passes);\n+  if (optimize && cgraph_global_info_ready)\n+    execute_pass_list (pass_early_local_passes.sub);\n   free_dominance_info (CDI_POST_DOMINATORS);\n+  free_dominance_info (CDI_DOMINATORS);\n   compact_blocks ();\n   current_function_decl = saved_current_function_decl;\n   bitmap_obstack_release (NULL);"}, {"sha": "01a0c7dfcff8557e08412e43abc4b58130593b81", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=7a388ee4530a1924bd3e0100078e5179bf5ee18c", "patch": "@@ -314,6 +314,7 @@ extern struct tree_opt_pass pass_ipa_pure_const;\n extern struct tree_opt_pass pass_ipa_type_escape;\n extern struct tree_opt_pass pass_ipa_pta;\n extern struct tree_opt_pass pass_early_local_passes;\n+extern struct tree_opt_pass pass_all_early_optimizations;\n \n extern struct tree_opt_pass pass_all_optimizations;\n extern struct tree_opt_pass pass_cleanup_cfg_post_optimizing;"}, {"sha": "3ff39f34aec36af7d51608bc3f8e577ef09399ca", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a388ee4530a1924bd3e0100078e5179bf5ee18c/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=7a388ee4530a1924bd3e0100078e5179bf5ee18c", "patch": "@@ -237,6 +237,10 @@ do_tree_profiling (void)\n static unsigned int\n tree_profiling (void)\n {\n+  /* Don't profile functions produced at destruction time, particularly\n+     the gcov datastructure initializer.  */\n+  if (cgraph_state == CGRAPH_STATE_FINISHED)\n+    return 0;\n   branch_prob ();\n   if (flag_branch_probabilities\n       && flag_profile_values\n@@ -267,33 +271,6 @@ struct tree_opt_pass pass_tree_profile =\n   0\t\t\t\t\t/* letter */\n };\n \n-/* Return 1 if tree-based profiling is in effect, else 0.\n-   If it is, set up hooks for tree-based profiling.\n-   Gate for pass_tree_profile.  */\n-\n-static bool\n-do_early_tree_profiling (void)\n-{\n-  return (do_tree_profiling () && (!flag_unit_at_a_time || !optimize));\n-}\n-\n-struct tree_opt_pass pass_early_tree_profile = \n-{\n-  \"early_tree_profile\",\t\t\t/* name */\n-  do_early_tree_profiling,\t\t/* gate */\n-  tree_profiling,\t\t\t/* execute */\n-  NULL,\t\t\t\t\t/* sub */\n-  NULL,\t\t\t\t\t/* next */\n-  0,\t\t\t\t\t/* static_pass_number */\n-  TV_BRANCH_PROB,\t\t\t/* tv_id */\n-  PROP_gimple_leh | PROP_cfg,\t\t/* properties_required */\n-  PROP_gimple_leh | PROP_cfg,\t\t/* properties_provided */\n-  0,\t\t\t\t\t/* properties_destroyed */\n-  0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_verify_stmts,\t\t\t/* todo_flags_finish */\n-  0\t\t\t\t\t/* letter */\n-};\n-\n struct profile_hooks tree_profile_hooks =\n {\n   tree_init_edge_profiler,      /* init_edge_profiler */"}]}