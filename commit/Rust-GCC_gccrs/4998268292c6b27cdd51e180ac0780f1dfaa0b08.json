{"sha": "4998268292c6b27cdd51e180ac0780f1dfaa0b08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk5ODI2ODI5MmM2YjI3Y2RkNTFlMTgwYWMwNzgwZjFkZmFhMGIwOA==", "commit": {"author": {"name": "John Wehle", "email": "john@feith.com", "date": "2000-08-18T02:41:58Z"}, "committer": {"name": "John Wehle", "email": "wehle@gcc.gnu.org", "date": "2000-08-18T02:41:58Z"}, "message": "alias.c (true_dependence, [...]): A read involving a label_ref or the constant pool doesn't create a dependency.\n\n\t* alias.c (true_dependence, write_dependence_p): A read\n\tinvolving a label_ref or the constant pool doesn't create\n\ta dependency.\n\n\t* rtl.h (unchanging): Improve documentation.\n\nFrom-SVN: r35771", "tree": {"sha": "af730819a32f206d6a1042985debacae42c99c19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af730819a32f206d6a1042985debacae42c99c19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4998268292c6b27cdd51e180ac0780f1dfaa0b08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4998268292c6b27cdd51e180ac0780f1dfaa0b08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4998268292c6b27cdd51e180ac0780f1dfaa0b08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4998268292c6b27cdd51e180ac0780f1dfaa0b08/comments", "author": {"login": "jlwehle", "id": 46985578, "node_id": "MDQ6VXNlcjQ2OTg1NTc4", "avatar_url": "https://avatars.githubusercontent.com/u/46985578?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlwehle", "html_url": "https://github.com/jlwehle", "followers_url": "https://api.github.com/users/jlwehle/followers", "following_url": "https://api.github.com/users/jlwehle/following{/other_user}", "gists_url": "https://api.github.com/users/jlwehle/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlwehle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlwehle/subscriptions", "organizations_url": "https://api.github.com/users/jlwehle/orgs", "repos_url": "https://api.github.com/users/jlwehle/repos", "events_url": "https://api.github.com/users/jlwehle/events{/privacy}", "received_events_url": "https://api.github.com/users/jlwehle/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "889e5964f263e0aa95663bebb10c176ee79d9402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/889e5964f263e0aa95663bebb10c176ee79d9402", "html_url": "https://github.com/Rust-GCC/gccrs/commit/889e5964f263e0aa95663bebb10c176ee79d9402"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "e7705dc9c9306ef2d6a4fa63410cbd5299f5c0fe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4998268292c6b27cdd51e180ac0780f1dfaa0b08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4998268292c6b27cdd51e180ac0780f1dfaa0b08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4998268292c6b27cdd51e180ac0780f1dfaa0b08", "patch": "@@ -1,3 +1,11 @@\n+Thu Aug 17 22:40:05 EDT 2000  John Wehle  (john@feith.com)\n+\n+\t* alias.c (true_dependence, write_dependence_p): A read\n+\tinvolving a label_ref or the constant pool doesn't create\n+\ta dependency.\n+\n+\t* rtl.h (unchanging): Improve documentation.\n+\n 2000-08-17  Rodney Brown  <RodneyBrown@mynd.com>\n \n \t* cse.c (insert_regs): Remove unused `regno'."}, {"sha": "ae8663845ab98f78a0ed3a383e5ddc5261d9ed6b", "filename": "gcc/alias.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4998268292c6b27cdd51e180ac0780f1dfaa0b08/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4998268292c6b27cdd51e180ac0780f1dfaa0b08/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=4998268292c6b27cdd51e180ac0780f1dfaa0b08", "patch": "@@ -1566,6 +1566,7 @@ true_dependence (mem, mem_mode, x, varies)\n      int (*varies) PARAMS ((rtx));\n {\n   register rtx x_addr, mem_addr;\n+  rtx base;\n \n   if (MEM_VOLATILE_P (x) && MEM_VOLATILE_P (mem))\n     return 1;\n@@ -1583,6 +1584,12 @@ true_dependence (mem, mem_mode, x, varies)\n   if (RTX_UNCHANGING_P (x) && ! RTX_UNCHANGING_P (mem))\n     return 0;\n \n+  base = find_base_term (x);\n+  if (base && (GET_CODE (base) == LABEL_REF\n+\t       || (GET_CODE (base) == SYMBOL_REF\n+\t\t   && CONSTANT_POOL_ADDRESS_P (base))))\n+    return 0;\n+\n   if (mem_mode == VOIDmode)\n     mem_mode = GET_MODE (mem);\n \n@@ -1627,6 +1634,7 @@ write_dependence_p (mem, x, writep)\n {\n   rtx x_addr, mem_addr;\n   rtx fixed_scalar;\n+  rtx base;\n \n   if (MEM_VOLATILE_P (x) && MEM_VOLATILE_P (mem))\n     return 1;\n@@ -1637,8 +1645,18 @@ write_dependence_p (mem, x, writep)\n   /* If MEM is an unchanging read, then it can't possibly conflict with\n      the store to X, because there is at most one store to MEM, and it must\n      have occurred somewhere before MEM.  */\n-  if (!writep && RTX_UNCHANGING_P (mem))\n-    return 0;\n+  if (! writep)\n+    {\n+      if (RTX_UNCHANGING_P (mem))\n+\treturn 0;\n+\n+      base = find_base_term (mem);\n+      if (base && (GET_CODE (base) == LABEL_REF\n+\t\t   || (GET_CODE (base) == SYMBOL_REF\n+\t\t       && CONSTANT_POOL_ADDRESS_P (base))))\n+\treturn 0;\n+    }\n+\n \n   x_addr = get_addr (XEXP (x, 0));\n   mem_addr = get_addr (XEXP (mem, 0));"}, {"sha": "a882cf6f4fe26d62d520a936c12ebf22608e2820", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4998268292c6b27cdd51e180ac0780f1dfaa0b08/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4998268292c6b27cdd51e180ac0780f1dfaa0b08/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=4998268292c6b27cdd51e180ac0780f1dfaa0b08", "patch": "@@ -116,9 +116,10 @@ typedef struct rtx_def\n   /* 1 in an INSN if it can call another function.\n      LINK_COST_FREE in an INSN_LIST.  */\n   unsigned int call : 1;\n-  /* 1 in a MEM or REG if value of this expression will never change\n-     during the current function, even though it is not\n-     manifestly constant.\n+  /* 1 in a REG if value of this expression will never change during\n+     the current function, even though it is not manifestly constant.\n+     1 in a MEM if contents of memory are constant.  This does not\n+     necessarily mean that the value of this expression is constant.\n      1 in a SUBREG if it is from a promoted variable that is unsigned.\n      1 in a SYMBOL_REF if it addresses something in the per-function\n      constants pool."}]}