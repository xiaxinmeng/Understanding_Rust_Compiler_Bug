{"sha": "3536d406b5a5d065dcfc43b434f99118eab96fa9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUzNmQ0MDZiNWE1ZDA2NWRjZmM0M2I0MzRmOTkxMThlYWI5NmZhOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-02-10T13:55:33Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-02-10T13:55:33Z"}, "message": "re PR ada/16592 (Ada tools don't use the newly built shared libraries)\n\n\t* s-asthan-vms.adb: Removed.\n\n\t* s-asthan-vms-alpha.adb: Added.\n\n\t* Makefile.in [VMS] (LN,LN_S): Define as cp -p\n\tRename s-asthan-vms.adb to s-asthan-vms-alpha.adb.\n\t[VMS]: Add translations for g-enblsp.adb.\n\t(LIBGNAT_SRCS): Add seh_init.c.\n\t(LIBGNAT_OBJS): Add seh_init.o.\n\n\tPR ada/16592\n\n\tLink all gnat tools with -static-libgcc, since\n\t-shared-libgcc is now used by default on some systems (e.g. linux with\n\trecent binutils).\n\tRemove references to Makefile.prolog/generic, no longer used.\n\nFrom-SVN: r94818", "tree": {"sha": "4f18be3936ec6825008bb86ac3b69e6eee9863f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f18be3936ec6825008bb86ac3b69e6eee9863f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3536d406b5a5d065dcfc43b434f99118eab96fa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3536d406b5a5d065dcfc43b434f99118eab96fa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3536d406b5a5d065dcfc43b434f99118eab96fa9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3536d406b5a5d065dcfc43b434f99118eab96fa9/comments", "author": null, "committer": null, "parents": [{"sha": "e06a584e59c7268af77d09945bd50edd85435295", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e06a584e59c7268af77d09945bd50edd85435295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e06a584e59c7268af77d09945bd50edd85435295"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "1e6e5350f3ddc9d973bc2804e2851348d49e3838", "filename": "gcc/ada/Makefile.in", "status": "modified", "additions": 40, "deletions": 40, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3536d406b5a5d065dcfc43b434f99118eab96fa9/gcc%2Fada%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3536d406b5a5d065dcfc43b434f99118eab96fa9/gcc%2Fada%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.in?ref=3536d406b5a5d065dcfc43b434f99118eab96fa9", "patch": "@@ -163,6 +163,7 @@ GCC_CFLAGS = $(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS)\n program_transform_name =\n objdir = .\n \n+target_alias=@target_alias@\n target=@target@\n xmake_file = @xmake_file@\n tmake_file = @tmake_file@\n@@ -1174,6 +1175,8 @@ ifeq ($(strip $(filter-out alpha% ia64 dec hp vms% openvms% alphavms%,$(host))),\n \n soext  = .exe\n hyphen = _\n+LN = cp -p\n+LN_S = cp -p\n \n ifeq ($(strip $(filter-out ia64 hp vms% openvms%,$(targ))),)\n AR = iar\n@@ -1188,6 +1191,7 @@ endif\n ifeq ($(strip $(filter-out alpha% ia64 dec hp vms% openvms% alphavms%,$(targ))),)\n ifeq ($(strip $(filter-out ia64 hp vms% openvms%,$(targ))),)\n   LIBGNAT_TARGET_PAIRS_AUX1 = \\\n+  g-enblsp.adb<g-enblsp-vms-ia64.adb \\\n   s-auxdec.ads<s-auxdec-vms_64.ads \\\n   s-crtl.ads<s-crtl-vms.ads \\\n   s-osinte.adb<s-osinte-vms-ia64.adb \\\n@@ -1196,6 +1200,8 @@ ifeq ($(strip $(filter-out ia64 hp vms% openvms%,$(targ))),)\n else\n ifeq ($(strip $(filter-out alpha% dec vms% openvms% alphavms%,$(targ))),)\n   LIBGNAT_TARGET_PAIRS_AUX1 = \\\n+  g-enblsp.adb<g-enblsp-vms-alpha.adb \\\n+  s-asthan.adb<s-asthan-vms-alpha.adb \\\n   s-crtl.ads<s-crtl-vms.ads \\\n   s-osinte.adb<s-osinte-vms.adb \\\n   s-osinte.ads<s-osinte-vms.ads \\\n@@ -1227,7 +1233,6 @@ endif\n   i-cstrea.adb<i-cstrea-vms.adb \\\n   i-cpp.adb<i-cpp-vms.adb \\\n   interfac.ads<interfac-vms.ads \\\n-  s-asthan.adb<s-asthan-vms.adb \\\n   s-inmaop.adb<s-inmaop-vms.adb \\\n   s-interr.adb<s-interr-vms.adb \\\n   s-intman.adb<s-intman-vms.adb \\\n@@ -1262,7 +1267,7 @@ endif\n   EXTRA_GNATRTL_TASKING_OBJS=s-tpopde.o\n   EXTRA_GNATTOOLS = \\\n      ../../gnatlbr$(exeext) \\\n-     ,,/../gnatsym$(exeext)\n+     ../../gnatsym$(exeext)\n   # This command transforms (YYYYMMDD) into YY,MMDD\n   GSMATCH_VERSION := $(shell grep \"^ *Gnat_Static_Version_String\" $(fsrcpfx)gnatvsn.ads | sed -e 's/.*(\\(.*\\)).*/\\1/' -e 's/\\(..\\)\\(..\\)\\(....\\)/\\2,\\3/')\n   TOOLS_LIBS_LO := --for-linker=sys\\\\$$\\$$library:trace.exe\n@@ -1334,7 +1339,6 @@ ifeq ($(strip $(filter-out powerpc% linux%,$(arch) $(osys))),)\n   GMEM_LIB = gmemlib\n   PREFIX_OBJS = $(PREFIX_REAL_OBJS)\n   LIBRARY_VERSION := $(LIB_VERSION)\n-\n endif\n \n ifeq ($(strip $(filter-out %ia64 linux%,$(arch) $(osys))),)\n@@ -1448,12 +1452,12 @@ endif\n # subdirectory and copied.\n LIBGNAT_SRCS = ada.h adaint.c adaint.h argv.c cio.c cstreams.c \\\n   errno.c exit.c cal.c ctrl_c.c \\\n-  raise.h raise.c sysdep.c aux-io.c init.c \\\n+  raise.h raise.c sysdep.c aux-io.c init.c seh_init.c \\\n   final.c tracebak.c tb-alvms.c tb-alvxw.c expect.c mkdir.c socket.c gsocket.h \\\n   $(EXTRA_LIBGNAT_SRCS)\n \n LIBGNAT_OBJS = adaint.o argv.o cio.o cstreams.o ctrl_c.o errno.o exit.o \\\n-  raise.o sysdep.o aux-io.o init.o cal.o final.o \\\n+  raise.o sysdep.o aux-io.o init.o seh_init.o cal.o final.o \\\n   tracebak.o expect.o mkdir.o socket.o $(EXTRA_LIBGNAT_OBJS)\n \n # NOTE ??? - when the -I option for compiling Ada code is made to work,\n@@ -1474,8 +1478,7 @@ GNATRTL_OBJS = $(GNATRTL_NONTASKING_OBJS) $(GNATRTL_TASKING_OBJS) \\\n ADA_INCLUDE_SRCS =\\\n  ada.ads calendar.ads directio.ads gnat.ads interfac.ads ioexcept.ads \\\n  machcode.ads text_io.ads unchconv.ads unchdeal.ads \\\n- sequenio.ads system.ads Makefile.prolog Makefile.generic \\\n- memtrack.adb \\\n+ sequenio.ads system.ads Makefile.adalib memtrack.adb \\\n  a-*.adb a-*.ads g-*.ad? i-*.ad? \\\n  s-[a-o]*.adb s-[p-z]*.adb \\\n  s-[a-o]*.ads s-[p-z]*.ads\n@@ -1497,6 +1500,8 @@ TOOLS_FLAGS_TO_PASS=\t\t\\\n \t\"GNATLINK=$(GNATLINK)\"\t\\\n \t\"GNATBIND=$(GNATBIND)\"\n \n+GCC_LINK=\"$(CC) -static-libgcc $(ADA_INCLUDES)\"\n+\n # Build directory for the tools. Let's copy the target-dependent\n # sources using the same mechanism as for gnatlib. The other sources are \n # accessed using the vpath directive below\n@@ -1574,91 +1579,82 @@ gnattools4: ../stamp-tools\n ../../gnatchop$(exeext): ../stamp-tools\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gnatchop --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatchop \n-\t$(GNATLINK) -v gnatchop -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" \\\n-\t\t$(TOOLS_LIBS)\n+\t$(GNATLINK) -v gnatchop -o $@ --GCC=$(GCC_LINK) $(TOOLS_LIBS)\n \n ../../gnat$(exeext): ../stamp-tools\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gnatcmd --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatcmd \n-\t$(GNATLINK) -v gnatcmd -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" $(TOOLS_LIBS)\n+\t$(GNATLINK) -v gnatcmd -o $@ --GCC=$(GCC_LINK) $(TOOLS_LIBS)\n \n ../../gnatkr$(exeext): ../stamp-tools\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gnatkr --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatkr \n-\t$(GNATLINK) -v gnatkr -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" $(TOOLS_LIBS)\n+\t$(GNATLINK) -v gnatkr -o $@ --GCC=$(GCC_LINK) $(TOOLS_LIBS)\n \n ../../gnatls$(exeext): ../stamp-tools\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gnatls --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatls \n-\t$(GNATLINK) -v gnatls -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" $(TOOLS_LIBS)\n+\t$(GNATLINK) -v gnatls -o $@ --GCC=$(GCC_LINK) $(TOOLS_LIBS)\n \n ../../gnatname$(exeext): ../stamp-tools\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gnatname --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatname \n-\t$(GNATLINK) -v gnatname -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" \\\n-\t\t    $(TOOLS_LIBS)\n+\t$(GNATLINK) -v gnatname -o $@ --GCC=$(GCC_LINK) $(TOOLS_LIBS)\n \n ../../gprmake$(exeext): ../stamp-tools\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gprmake --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gprmake\n-\t$(GNATLINK) -v gprmake -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" \\\n-\t\t    $(TOOLS_LIBS)\n+\t$(GNATLINK) -v gprmake -o $@ --GCC=$(GCC_LINK) $(TOOLS_LIBS)\n \n ../../gnatprep$(exeext): ../stamp-tools\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gnatprep --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatprep \n-\t$(GNATLINK) -v gnatprep -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" \\\n-\t\t    $(TOOLS_LIBS)\n+\t$(GNATLINK) -v gnatprep -o $@ --GCC=$(GCC_LINK) $(TOOLS_LIBS)\n \n ../../gnatxref$(exeext): ../stamp-tools\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gnatxref --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatxref \n-\t$(GNATLINK) -v gnatxref -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" \\\n-\t\t    $(TOOLS_LIBS)\n+\t$(GNATLINK) -v gnatxref -o $@ --GCC=$(GCC_LINK) $(TOOLS_LIBS)\n \n ../../gnatfind$(exeext): ../stamp-tools\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gnatfind --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatfind \n-\t$(GNATLINK) -v gnatfind -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" \\\n-\t\t    $(TOOLS_LIBS)\n+\t$(GNATLINK) -v gnatfind -o $@ --GCC=$(GCC_LINK) $(TOOLS_LIBS)\n \n ../../gnatclean$(exeext): ../stamp-tools\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gnatclean --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatclean\n-\t$(GNATLINK) -v gnatclean -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" \\\n-\t            $(TOOLS_LIBS)\n+\t$(GNATLINK) -v gnatclean -o $@ --GCC=$(GCC_LINK) $(TOOLS_LIBS)\n \n ../../gnatsym$(exeext): ../stamp-tools\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gnatsym --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatsym\n-\t$(GNATLINK) -v gnatsym -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" \\\n-                    $(TOOLS_LIBS)\n+\t$(GNATLINK) -v gnatsym -o $@ --GCC=$(GCC_LINK) $(TOOLS_LIBS)\n \n ../../gnatdll$(exeext): ../stamp-tools\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gnatdll --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) $(GNATBIND_FLAGS) gnatdll\n-\t$(GNATLINK) -v gnatdll -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" \\\n-\t\t$(TOOLS_LIBS)\n+\t$(GNATLINK) -v gnatdll -o $@ --GCC=$(GCC_LINK) $(TOOLS_LIBS)\n \n ../../vxaddr2line$(exeext): ../stamp-tools\n \t$(GNATMAKE) -c  $(ADA_INCLUDES) vxaddr2line --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) vxaddr2line \n-\t$(GNATLINK) -v vxaddr2line -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" $(CLIB)\n+\t$(GNATLINK) -v vxaddr2line -o $@ --GCC=$(GCC_LINK) $(CLIB)\n \n gnatmake-re: ../stamp-tools link.o\n \t$(GNATMAKE) $(ADA_INCLUDES) -u sdefault --GCC=\"$(CC) $(MOST_ADA_FLAGS)\"\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gnatmake --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatmake \n \t$(GNATLINK) -v gnatmake -o ../../gnatmake$(exeext) \\\n-\t\t--GCC=\"$(CC) $(ADA_INCLUDES)\" $(TOOLS_LIBS)\n+\t\t--GCC=$(GCC_LINK) $(TOOLS_LIBS)\n \n # Note the use of the \"mv\" command in order to allow gnatlink to be linked with\n # with the former version of gnatlink itself which cannot override itself.\n gnatlink-re: ../stamp-tools link.o\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gnatlink --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatlink \n \t$(GNATLINK) -v gnatlink -o ../../gnatlinknew$(exeext) \\\n-\t\t    --GCC=\"$(CC) $(ADA_INCLUDES)\" $(TOOLS_LIBS)\n+\t\t    --GCC=$(GCC_LINK) $(TOOLS_LIBS)\n \t$(MV)  ../../gnatlinknew$(exeext)  ../../gnatlink$(exeext)\n   \n # Needs to be built with CC=gcc\n@@ -1695,15 +1691,10 @@ install-gnatlib: ../stamp-gnatlib\n #\tdeleting the right one.\n \t-$(MKDIR) $(DESTDIR)$(ADA_RTL_OBJ_DIR)\n \t-$(MKDIR) $(DESTDIR)$(ADA_INCLUDE_DIR)\n-\t-$(MKDIR) $(DESTDIR)$(ADA_SHARE_MAKE_DIR)\n \t$(RMDIR) $(DESTDIR)$(ADA_RTL_OBJ_DIR)\n \t$(RMDIR) $(DESTDIR)$(ADA_INCLUDE_DIR)\n-\t$(RMDIR) $(DESTDIR)$(ADA_SHARE_MAKE_DIR)\n \t-$(MKDIR) $(DESTDIR)$(ADA_RTL_OBJ_DIR)\n \t-$(MKDIR) $(DESTDIR)$(ADA_INCLUDE_DIR)\n-\t-$(MKDIR) $(DESTDIR)$(ADA_SHARE_MAKE_DIR)\n-\t-$(INSTALL_DATA) rts/Makefile.prolog $(DESTDIR)$(ADA_SHARE_MAKE_DIR)\n-\t-$(INSTALL_DATA) rts/Makefile.generic $(DESTDIR)$(ADA_SHARE_MAKE_DIR)\n \tfor file in rts/*.ali; do \\\n \t    $(INSTALL_DATA_DATE) $$file $(DESTDIR)$(ADA_RTL_OBJ_DIR); \\\n \tdone\n@@ -1987,7 +1978,6 @@ b_gnatm.o : b_gnatm.c\n \n ADA_INCLUDE_DIR = $(libsubdir)/adainclude\n ADA_RTL_OBJ_DIR = $(libsubdir)/adalib\n-ADA_SHARE_MAKE_DIR = $(prefix)/share/gnat\n \n # force no sibling call optimization on s-traceb.o so the number of stack\n # frames to be skipped when computing a call chain is not modified by\n@@ -2043,14 +2033,25 @@ mkdir.o   : mkdir.c\n socket.o  : socket.c gsocket.h\n sysdep.o  : sysdep.c\n \n-cio.o     : cio.c \n+gen-soccon: gen-soccon.c gsocket.h\n+\t$(CC) $(ALL_CFLAGS) $(ADA_CFLAGS) $(RT_FLAGS) \\\n+\t\t$(ALL_CPPFLAGS) $(INCLUDES) -DTARGET=\\\"$(target_alias)\\\" \\\n+\t\t$< $(OUTPUT_OPTION)\n+\n+cio.o     : cio.c\n \t$(CC) -c $(ALL_CFLAGS) $(ADA_CFLAGS) $(RT_FLAGS) \\\n \t         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n init.o    : init.c ada.h types.h raise.h\n \t$(CC) -c $(ALL_CFLAGS) $(ADA_CFLAGS) $(RT_FLAGS) \\\n \t         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n+# No optimization to compile this file as optimizations (-O1 or above) breaks\n+# the SEH handling on Windows. The reasons are not clear.\n+seh_init.o : seh_init.c raise.h\n+\t$(CC) -c $(ALL_CFLAGS) $(ADA_CFLAGS) $(RT_FLAGS) -O0 \\\n+\t         $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n+\n raise.o   : raise.c raise.h\n \t$(CC) -c $(ALL_CFLAGS) $(ADA_CFLAGS) $(RT_FLAGS) \\\n \t\t $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n@@ -2072,5 +2073,4 @@ force:\n ../../gnatlbr$(exeext): ../../prefix.o\n \t$(GNATMAKE) -c $(ADA_INCLUDES) gnatlbr --GCC=\"$(CC) $(ALL_ADAFLAGS)\"\n \t$(GNATBIND) $(ADA_INCLUDES) $(GNATBIND_FLAGS) gnatlbr\n-\t$(GNATLINK) -v gnatlbr -o $@ --GCC=\"$(CC) $(ADA_INCLUDES)\" \\\n-\t\t$(TOOLS_LIBS)\n+\t$(GNATLINK) -v gnatlbr -o $@ --GCC=$(GCC_LINK) $(TOOLS_LIBS)"}, {"sha": "5f2de7030b7d2a92e2a81d6bea0c2db68a78a68f", "filename": "gcc/ada/s-asthan-vms-alpha.adb", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3536d406b5a5d065dcfc43b434f99118eab96fa9/gcc%2Fada%2Fs-asthan-vms-alpha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3536d406b5a5d065dcfc43b434f99118eab96fa9/gcc%2Fada%2Fs-asthan-vms-alpha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-asthan-vms-alpha.adb?ref=3536d406b5a5d065dcfc43b434f99118eab96fa9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1996-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1996-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --", "previous_filename": "gcc/ada/s-asthan-vms.adb"}]}