{"sha": "71e3d1970c00a74be16c0f5a3fcaced359077135", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFlM2QxOTcwYzAwYTc0YmUxNmMwZjVhM2ZjYWNlZDM1OTA3NzEzNQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2020-08-23T14:21:08Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2020-09-17T18:13:13Z"}, "message": "Add DWARF5 variants of assembly scan tests that use DW_FORM_implicit_const\n\nSome DWARF tests scan the assembly output looking for constant values.\nWhen using DWARF5 those constants might use DW_FORM_implicit_const,\nwhich are output (in the comments) after the attribute instead of\nbefore. To make sure these tests work introduce a -gdwarf-5 variant\nof these tests and explicitly use -gdwarf-2 for the original.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/debug/dwarf2/inline2.c: Add -gdwarf-2.\n\t* g++.dg/debug/dwarf2/inline-var-1.C: Likewise.\n\t* gcc.dg/debug/dwarf2/pr41445-5.c: Likewise.\n\t* gcc.dg/debug/dwarf2/pr41445-6.c: Likewise.\n\t* gcc.dg/debug/dwarf2/inline6.c: New variant with -gdwarf-5.\n\t* g++.dg/debug/dwarf2/inline-var-3.C: Likewise.\n\t* gcc.dg/debug/dwarf2/pr41445-7.c: Likewise.\n\t* gcc.dg/debug/dwarf2/pr41445-8.c: Likewise.", "tree": {"sha": "0b8e2531078c897dad1349c83761f85f81b9231c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b8e2531078c897dad1349c83761f85f81b9231c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71e3d1970c00a74be16c0f5a3fcaced359077135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71e3d1970c00a74be16c0f5a3fcaced359077135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71e3d1970c00a74be16c0f5a3fcaced359077135", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71e3d1970c00a74be16c0f5a3fcaced359077135/comments", "author": null, "committer": null, "parents": [{"sha": "ee7aa7e7b9d490c9c929edfd4d4a730df2f0052d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee7aa7e7b9d490c9c929edfd4d4a730df2f0052d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee7aa7e7b9d490c9c929edfd4d4a730df2f0052d"}], "stats": {"total": 135, "additions": 131, "deletions": 4}, "files": [{"sha": "9a88e28cbe0ff460f87680b94e7ee0b9a070a7a5", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/inline-var-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e3d1970c00a74be16c0f5a3fcaced359077135/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Finline-var-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e3d1970c00a74be16c0f5a3fcaced359077135/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Finline-var-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Finline-var-1.C?ref=71e3d1970c00a74be16c0f5a3fcaced359077135", "patch": "@@ -1,5 +1,5 @@\n // { dg-do compile { target c++17 } }\n-// { dg-options \"-O -g -dA -gno-strict-dwarf -fno-eliminate-unused-debug-symbols\" }\n+// { dg-options \"-O -gdwarf-2 -dA -gno-strict-dwarf -fno-eliminate-unused-debug-symbols\" }\n // { dg-require-weak \"\" }\n // { dg-final { scan-assembler-times \"0x3\\[^\\n\\r]* DW_AT_inline\" 6 { xfail *-*-aix* } } }\n // { dg-final { scan-assembler-times \"0x1\\[^\\n\\r]* DW_AT_inline\" 2 { xfail *-*-aix* } } }"}, {"sha": "52ed5b6912fdba748863e04194310f27e74137e5", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/inline-var-3.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e3d1970c00a74be16c0f5a3fcaced359077135/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Finline-var-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e3d1970c00a74be16c0f5a3fcaced359077135/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Finline-var-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Finline-var-3.C?ref=71e3d1970c00a74be16c0f5a3fcaced359077135", "patch": "@@ -0,0 +1,29 @@\n+// DWARF5 variant of inline-var-1.C\n+// { dg-do compile { target c++17 } }\n+// { dg-options \"-O -gdwarf-5 -dA -gno-strict-dwarf -fno-eliminate-unused-debug-symbols\" }\n+// { dg-require-weak \"\" }\n+// { dg-final { scan-assembler-times \" DW_AT_inline \\\\(0x3\\\\)\" 2 { xfail *-*-aix* } } }\n+// { dg-final { scan-assembler-times \"0x3\\[^\\n\\r]* DW_AT_inline\" 4 { xfail *-*-aix* } } }\n+// { dg-final { scan-assembler-times \"0x1\\[^\\n\\r]* DW_AT_inline\" 2 { xfail *-*-aix* } } }\n+// { dg-final { scan-assembler-times \" DW_AT_declaration\" 6 { xfail *-*-aix* } } }\n+// { dg-final { scan-assembler-times \" DW_AT_specification\" 6 { xfail *-*-aix* } } }\n+// { dg-final { scan-assembler-times \" DW_AT_\\[^\\n\\r]*linkage_name\" 7 { xfail *-*-aix* } } }\n+\n+inline int a;\n+struct S\n+{\n+  static inline double b = 4.0;\n+  static constexpr int c = 2;\n+  static constexpr inline char d = 3;\n+} s;\n+template <int N>\n+inline int e = N;\n+int &f = e<2>;\n+template <int N>\n+struct T\n+{\n+  static inline double g = 4.0;\n+  static constexpr int h = 2;\n+  static inline constexpr char i = 3;\n+};\n+T<5> t;"}, {"sha": "9c36450ae2de7326bb1cc4091bce2d6bd5c2bbda", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/inline2.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e3d1970c00a74be16c0f5a3fcaced359077135/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Finline2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e3d1970c00a74be16c0f5a3fcaced359077135/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Finline2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Finline2.c?ref=71e3d1970c00a74be16c0f5a3fcaced359077135", "patch": "@@ -14,7 +14,9 @@\n   properly nested DW_TAG_inlined_subroutine DIEs for third, second and first.\n */\n \n-/* { dg-options \"-O -g3 -gdwarf -dA -fgnu89-inline\" } */\n+/* Explicitly use dwarf-2 because dwarf-5 might use DW_FORM_implicit_const\n+   which is hard to scan for. */\n+/* { dg-options \"-O -g3 -gdwarf-2 -dA -fgnu89-inline\" } */\n /* { dg-do compile } */\n \n /* There are 6 inlined subroutines:"}, {"sha": "03013f11bca80327664063493d5fe4cd25af5f8a", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/inline6.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e3d1970c00a74be16c0f5a3fcaced359077135/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Finline6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e3d1970c00a74be16c0f5a3fcaced359077135/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Finline6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Finline6.c?ref=71e3d1970c00a74be16c0f5a3fcaced359077135", "patch": "@@ -0,0 +1,69 @@\n+/* DWARF5 variant of inline2.\n+   Origin: PR debug/37801\n+\n+  Abstract instances (DW_TAG_subroutines having the DW_AT_inline attribute)\n+  of second and first were having a DW_TAG_lexical_block DIE wrongly\n+  representing the inlined calls to third (in second) and to\n+  second (in first). At the same time, main didn't have children\n+  DW_TAG_inlined_subroutine DIEs representing the inlined calls to\n+  first, second and third.\n+\n+  The ideal goal here is to test that we have no superfluous\n+  DW_TAG_lexical_block DIE anymore, that abstract instances DIEs have\n+  no descendant DIE with a DW_AT_abstract_origin attribute, and that main has\n+  properly nested DW_TAG_inlined_subroutine DIEs for third, second and first.\n+*/\n+\n+/* Explicitly use dwarf-5 which uses DW_FORM_implicit_const.  */\n+/* { dg-options \"-O -g3 -gdwarf-5 -dA -fgnu89-inline\" } */\n+/* { dg-do compile } */\n+\n+/* There are 6 inlined subroutines:\n+   - One for each subroutine inlined into main, that's 3.\n+   - One for earch subroutine inline into the out of line instances\n+     of third, second and first.  */\n+/* { dg-final { scan-assembler-times \"\\\\(DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_inlined_subroutine\" 6 } } */\n+\n+/* We should have no DW_TAG_lexical_block DIEs, all inline instances\n+   should have the first subblock elided to match the abstract instance\n+   layout.  */\n+/* { dg-final { scan-assembler-times \"\\\\(DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_lexical_block\" 0 } } */\n+\n+\n+/* There are 3 DW_AT_inline attributes: one per abstract inline instance.\n+   The value of the attribute must be 0x3, meaning the function was\n+   actually inlined.  */\n+/* { dg-final { scan-assembler-times  \" DW_AT_inline \\\\(0x3\\\\)\" 3 } } */\n+\n+volatile int *a;\n+\n+inline void\n+third (int arg3)\n+{\n+  int var3 = arg3;\n+  a[0] = var3;\n+}\n+\n+inline void\n+second (int arg2)\n+{\n+  int var2 = arg2;\n+  third (var2+1);\n+}\n+\n+inline void\n+first (int arg1)\n+{\n+  int var1 = arg1;\n+  second (var1+1);\n+}\n+\n+int\n+main ()\n+{\n+  int some_int = 1;\n+  first (some_int);\n+  return 0;\n+}\n+\n+"}, {"sha": "80300ec22e87c32b6a4168b5e87724a0da9af5db", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/pr41445-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e3d1970c00a74be16c0f5a3fcaced359077135/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e3d1970c00a74be16c0f5a3fcaced359077135/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-5.c?ref=71e3d1970c00a74be16c0f5a3fcaced359077135", "patch": "@@ -2,7 +2,7 @@\n /* Test that token after multi-line function-like macro use\n    gets correct locus even when preprocessing separately.  */\n /* { dg-do compile } */\n-/* { dg-options \"-save-temps -gdwarf -O0 -dA -fno-merge-debug-strings\" } */\n+/* { dg-options \"-save-temps -gdwarf-2 -O0 -dA -fno-merge-debug-strings\" } */\n \n #define A(x) vari x\n #define vari(x)"}, {"sha": "fbf033758b6b2916d972e7a406f56cf96193c821", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/pr41445-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e3d1970c00a74be16c0f5a3fcaced359077135/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e3d1970c00a74be16c0f5a3fcaced359077135/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-6.c?ref=71e3d1970c00a74be16c0f5a3fcaced359077135", "patch": "@@ -1,6 +1,6 @@\n /* PR preprocessor/41445 */\n /* { dg-do compile } */\n-/* { dg-options \"-gdwarf -O0 -dA -fno-merge-debug-strings\" } */\n+/* { dg-options \"-gdwarf-2 -O0 -dA -fno-merge-debug-strings\" } */\n \n #include \"pr41445-5.c\"\n "}, {"sha": "0e0de822d806810684ab3cdd42822b24168f8f8b", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/pr41445-7.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e3d1970c00a74be16c0f5a3fcaced359077135/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e3d1970c00a74be16c0f5a3fcaced359077135/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-7.c?ref=71e3d1970c00a74be16c0f5a3fcaced359077135", "patch": "@@ -0,0 +1,16 @@\n+/* PR preprocessor/41445 DWARF5 variant */\n+/* Test that token after multi-line function-like macro use\n+   gets correct locus even when preprocessing separately.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -gdwarf-5 -O0 -dA -fno-merge-debug-strings\" } */\n+\n+#define A(x) vari x\n+#define vari(x)\n+#define B , varj\n+int A(B) ;\n+\n+/*  We want to check that both vari and varj have the same line\n+    number.  */\n+\n+/* { dg-final { scan-assembler \"DW_TAG_variable\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\\"vari\\[^\\\\r\\\\n\\]*DW_AT_name(\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*DW_AT_)*\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\[^\\\\r\\\\n\\]*DW_AT_decl_line \\\\((0xa|10)\\\\)\" } } */\n+/* { dg-final { scan-assembler \"DW_TAG_variable\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\\"varj\\[^\\\\r\\\\n\\]*DW_AT_name(\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*DW_AT_)*\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\[^\\\\r\\\\n\\]*DW_AT_decl_line \\\\((0xa|10)\\\\)\" } } */"}, {"sha": "3a6eeb530968ee0e0e7c7ca34551ee2b2d61827d", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/pr41445-8.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e3d1970c00a74be16c0f5a3fcaced359077135/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e3d1970c00a74be16c0f5a3fcaced359077135/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr41445-8.c?ref=71e3d1970c00a74be16c0f5a3fcaced359077135", "patch": "@@ -0,0 +1,11 @@\n+/* PR preprocessor/41445 DWARF5 variant*/\n+/* { dg-do compile } */\n+/* { dg-options \"-gdwarf-5 -O0 -dA -fno-merge-debug-strings\" } */\n+\n+#include \"pr41445-5.c\"\n+\n+/*  We want to check that both vari and varj have the same line\n+    number.  */\n+\n+/* { dg-final { scan-assembler \"DW_TAG_variable\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\\"vari\\[^\\\\r\\\\n\\]*DW_AT_name(\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*DW_AT_)*\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\[^\\\\r\\\\n\\]*DW_AT_decl_line \\\\((0xa|10)\\\\)\" } } */\n+/* { dg-final { scan-assembler \"DW_TAG_variable\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\\"varj\\[^\\\\r\\\\n\\]*DW_AT_name(\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*DW_AT_)*\\[^\\\\r\\\\n\\]*\\[\\\\r\\\\n\\]+\\[^\\\\r\\\\n\\]*\\[^\\\\r\\\\n\\]*DW_AT_decl_line \\\\((0xa|10)\\\\)\" } } */"}]}