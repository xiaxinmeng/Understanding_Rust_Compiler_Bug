{"sha": "377afcd5beb350a1b7cd07b0a868a766345073e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc3YWZjZDViZWIzNTBhMWI3Y2QwN2IwYTg2OGE3NjYzNDUwNzNlMA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-08-27T12:18:24Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-08-27T12:18:24Z"}, "message": "Fix probability for bit-tests.\n\n2018-08-27  Martin Liska  <mliska@suse.cz>\n\n\t* tree-switch-conversion.c (bit_test_cluster::find_bit_tests):\n        Add new argument to bit_test_cluster constructor.\n\t(bit_test_cluster::emit): Set bits really number of values\n        handlel by a test.\n\t(bit_test_cluster::hoist_edge_and_branch_if_true): Add\n        probability argument.\n\t* tree-switch-conversion.h (struct bit_test_cluster):\n        Add m_handles_entire_switch.\n2018-08-27  Martin Liska  <mliska@suse.cz>\n\n\t* gcc.dg/tree-ssa/switch-2.c: New test.\n\nFrom-SVN: r263878", "tree": {"sha": "cbc9beace64c77f4308af6ab49a52a1edc6b67a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbc9beace64c77f4308af6ab49a52a1edc6b67a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/377afcd5beb350a1b7cd07b0a868a766345073e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/377afcd5beb350a1b7cd07b0a868a766345073e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/377afcd5beb350a1b7cd07b0a868a766345073e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/377afcd5beb350a1b7cd07b0a868a766345073e0/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dbdfaaba50c5d7d85c1e64751988d00114fd7d6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbdfaaba50c5d7d85c1e64751988d00114fd7d6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbdfaaba50c5d7d85c1e64751988d00114fd7d6b"}], "stats": {"total": 98, "additions": 82, "deletions": 16}, "files": [{"sha": "698f677aa7e90b7e2fd638cfc1105abf256a7f3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377afcd5beb350a1b7cd07b0a868a766345073e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377afcd5beb350a1b7cd07b0a868a766345073e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=377afcd5beb350a1b7cd07b0a868a766345073e0", "patch": "@@ -1,3 +1,14 @@\n+2018-08-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* tree-switch-conversion.c (bit_test_cluster::find_bit_tests):\n+        Add new argument to bit_test_cluster constructor.\n+\t(bit_test_cluster::emit): Set bits really number of values\n+        handlel by a test.\n+\t(bit_test_cluster::hoist_edge_and_branch_if_true): Add\n+        probability argument.\n+\t* tree-switch-conversion.h (struct bit_test_cluster):\n+        Add m_handles_entire_switch.\n+\n 2018-08-27  Martin Liska  <mliska@suse.cz>\n \n         PR tree-optimization/86702"}, {"sha": "f20f43a5df892128cf0c6de1e80993762f679156", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377afcd5beb350a1b7cd07b0a868a766345073e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377afcd5beb350a1b7cd07b0a868a766345073e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=377afcd5beb350a1b7cd07b0a868a766345073e0", "patch": "@@ -1,3 +1,7 @@\n+2018-08-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.dg/tree-ssa/switch-2.c: New test.\n+\n 2018-08-27  Richard Biener  <rguenther@suse.de>\n \n \t* g++.dg/torture/20180705-1.C: New testcase."}, {"sha": "710825dc2572d69e93c9cc899e34b8b96590a8cb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/switch-2.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377afcd5beb350a1b7cd07b0a868a766345073e0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fswitch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377afcd5beb350a1b7cd07b0a868a766345073e0/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fswitch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fswitch-2.c?ref=377afcd5beb350a1b7cd07b0a868a766345073e0", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile { target { { x86_64-*-* aarch64-*-* ia64-*-* powerpc64-*-* } && lp64 } } } */\n+/* { dg-options \"-O2 -fdump-tree-switchlower1\" } */\n+\n+int global;\n+\n+int foo (int x)\n+{\n+  switch (x) {\n+    case 0:\n+    case 10:\n+      return 1;\n+    case 20:\n+    case 30:\n+    case 62:\n+      return 2;\n+    case 1000:\n+    case 1010:\n+    case 1025 ... 1030:\n+      return 1;\n+    default:\n+      return 0;\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump \";; GIMPLE switch case clusters: BT:0-62 BT:1000-1030\" \"switchlower1\" } } */"}, {"sha": "47acb0c8ae884e15000128200848be0c92c5a094", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377afcd5beb350a1b7cd07b0a868a766345073e0/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377afcd5beb350a1b7cd07b0a868a766345073e0/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=377afcd5beb350a1b7cd07b0a868a766345073e0", "patch": "@@ -1279,12 +1279,16 @@ bit_test_cluster::find_bit_tests (vec<cluster *> &clusters)\n     return clusters.copy ();\n \n   /* Find and build the clusters.  */\n-  for (int end = l;;)\n+  for (unsigned end = l;;)\n     {\n       int start = min[end].m_start;\n \n       if (is_beneficial (clusters, start, end - 1))\n-\toutput.safe_push (new bit_test_cluster (clusters, start, end - 1));\n+\t{\n+\t  bool entire = start == 0 && end == clusters.length ();\n+\t  output.safe_push (new bit_test_cluster (clusters, start, end - 1,\n+\t\t\t\t\t\t  entire));\n+\t}\n       else\n \tfor (int i = end - 1; i >=  start; i--)\n \t  output.safe_push (clusters[i]);\n@@ -1434,6 +1438,7 @@ bit_test_cluster::emit (tree index_expr, tree index_type,\n   tree minval = get_low ();\n   tree maxval = get_high ();\n   tree range = int_const_binop (MINUS_EXPR, maxval, minval);\n+  unsigned HOST_WIDE_INT bt_range = get_range (minval, maxval);\n \n   /* Go through all case labels, and collect the case labels, profile\n      counts, and other information we need to build the branch tests.  */\n@@ -1452,11 +1457,11 @@ bit_test_cluster::emit (tree index_expr, tree index_type,\n \t  test[k].mask = wi::zero (prec);\n \t  test[k].target_bb = n->m_case_bb;\n \t  test[k].label = n->m_case_label_expr;\n-\t  test[k].bits = 1;\n+\t  test[k].bits = 0;\n \t  count++;\n \t}\n-      else\n-\ttest[k].bits++;\n+\n+      test[k].bits += n->get_range (n->get_low (), n->get_high ());\n \n       lo = tree_to_uhwi (int_const_binop (MINUS_EXPR, n->get_low (), minval));\n       if (n->get_high () == NULL_TREE)\n@@ -1513,14 +1518,20 @@ bit_test_cluster::emit (tree index_expr, tree index_type,\n \t\t\t\t  /*simple=*/true, NULL_TREE,\n \t\t\t\t  /*before=*/true, GSI_SAME_STMT);\n \n-  /* if (idx > range) goto default */\n-  range = force_gimple_operand_gsi (&gsi,\n+  if (m_handles_entire_switch)\n+    {\n+      /* if (idx > range) goto default */\n+      range\n+\t= force_gimple_operand_gsi (&gsi,\n \t\t\t\t    fold_convert (unsigned_index_type, range),\n \t\t\t\t    /*simple=*/true, NULL_TREE,\n \t\t\t\t    /*before=*/true, GSI_SAME_STMT);\n-  tmp = fold_build2 (GT_EXPR, boolean_type_node, idx, range);\n-  basic_block new_bb = hoist_edge_and_branch_if_true (&gsi, tmp, default_bb);\n-  gsi = gsi_last_bb (new_bb);\n+      tmp = fold_build2 (GT_EXPR, boolean_type_node, idx, range);\n+      basic_block new_bb\n+\t= hoist_edge_and_branch_if_true (&gsi, tmp, default_bb,\n+\t\t\t\t\t profile_probability::unlikely ());\n+      gsi = gsi_last_bb (new_bb);\n+    }\n \n   /* csui = (1 << (word_mode) idx) */\n   csui = make_ssa_name (word_type_node);\n@@ -1533,25 +1544,32 @@ bit_test_cluster::emit (tree index_expr, tree index_type,\n   gsi_insert_before (&gsi, shift_stmt, GSI_SAME_STMT);\n   update_stmt (shift_stmt);\n \n+  profile_probability prob = profile_probability::always ();\n+\n   /* for each unique set of cases:\n        if (const & csui) goto target  */\n   for (k = 0; k < count; k++)\n     {\n+      prob = profile_probability::always ().apply_scale (test[k].bits,\n+\t\t\t\t\t\t\t bt_range);\n+      bt_range -= test[k].bits;\n       tmp = wide_int_to_tree (word_type_node, test[k].mask);\n       tmp = fold_build2 (BIT_AND_EXPR, word_type_node, csui, tmp);\n       tmp = force_gimple_operand_gsi (&gsi, tmp,\n \t\t\t\t      /*simple=*/true, NULL_TREE,\n \t\t\t\t      /*before=*/true, GSI_SAME_STMT);\n       tmp = fold_build2 (NE_EXPR, boolean_type_node, tmp, word_mode_zero);\n-      new_bb = hoist_edge_and_branch_if_true (&gsi, tmp, test[k].target_bb);\n+      basic_block new_bb\n+\t= hoist_edge_and_branch_if_true (&gsi, tmp, test[k].target_bb, prob);\n       gsi = gsi_last_bb (new_bb);\n     }\n \n   /* We should have removed all edges now.  */\n   gcc_assert (EDGE_COUNT (gsi_bb (gsi)->succs) == 0);\n \n   /* If nothing matched, go to the default label.  */\n-  make_edge (gsi_bb (gsi), default_bb, EDGE_FALLTHRU);\n+  edge e = make_edge (gsi_bb (gsi), default_bb, EDGE_FALLTHRU);\n+  e->probability = profile_probability::always ();\n }\n \n /* Split the basic block at the statement pointed to by GSIP, and insert\n@@ -1571,14 +1589,16 @@ bit_test_cluster::emit (tree index_expr, tree index_type,\n \n basic_block\n bit_test_cluster::hoist_edge_and_branch_if_true (gimple_stmt_iterator *gsip,\n-\t\t\t\t\t\t tree cond, basic_block case_bb)\n+\t\t\t\t\t\t tree cond, basic_block case_bb,\n+\t\t\t\t\t\t profile_probability prob)\n {\n   tree tmp;\n   gcond *cond_stmt;\n   edge e_false;\n   basic_block new_bb, split_bb = gsi_bb (*gsip);\n \n   edge e_true = make_edge (split_bb, case_bb, EDGE_TRUE_VALUE);\n+  e_true->probability = prob;\n   gcc_assert (e_true->src == split_bb);\n \n   tmp = force_gimple_operand_gsi (gsip, cond, /*simple=*/true, NULL,"}, {"sha": "726d54ad912b6fa97f3ec5bce4d5a1c8451b8a81", "filename": "gcc/tree-switch-conversion.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/377afcd5beb350a1b7cd07b0a868a766345073e0/gcc%2Ftree-switch-conversion.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/377afcd5beb350a1b7cd07b0a868a766345073e0/gcc%2Ftree-switch-conversion.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.h?ref=377afcd5beb350a1b7cd07b0a868a766345073e0", "patch": "@@ -329,8 +329,10 @@ This transformation was contributed by Roger Sayle, see this e-mail:\n struct bit_test_cluster: public group_cluster\n {\n   /* Constructor.  */\n-  bit_test_cluster (vec<cluster *> &clusters, unsigned start, unsigned end)\n-  :group_cluster (clusters, start, end)\n+  bit_test_cluster (vec<cluster *> &clusters, unsigned start, unsigned end,\n+\t\t    bool handles_entire_switch)\n+  :group_cluster (clusters, start, end),\n+  m_handles_entire_switch (handles_entire_switch)\n   {}\n \n   cluster_type\n@@ -396,7 +398,11 @@ struct bit_test_cluster: public group_cluster\n    Returns the newly created basic block.  */\n   static basic_block hoist_edge_and_branch_if_true (gimple_stmt_iterator *gsip,\n \t\t\t\t\t\t    tree cond,\n-\t\t\t\t\t\t    basic_block case_bb);\n+\t\t\t\t\t\t    basic_block case_bb,\n+\t\t\t\t\t\t    profile_probability prob);\n+\n+  /* True when the jump table handles an entire switch statement.  */\n+  bool m_handles_entire_switch;\n \n   /* Maximum number of different basic blocks that can be handled by\n      a bit test.  */"}]}