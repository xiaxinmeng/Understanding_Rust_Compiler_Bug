{"sha": "5b02f0e0046d946792d7e05b569cb6d2c54442ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWIwMmYwZTAwNDZkOTQ2NzkyZDdlMDViNTY5Y2I2ZDJjNTQ0NDJlZQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-07-08T19:49:08Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-07-08T19:49:08Z"}, "message": "c-decl.c (pop_scope): Do not set DECL_CONTEXT on file-scope decls when...\n\n\t* c-decl.c (pop_scope): Do not set DECL_CONTEXT on file-scope\n\tdecls when there is only one input translation unit.\n\t* langhooks.c (lhd_set_decl_assembler_name): Partially revert\n\tchange of 2004-07-05; do not treat declarations with\n\tDECL_CONTEXT a TRANSLATION_UNIT_DECL specially.\n\t* opts.c (cur_in_fname): Delete.\n\t* opts.h: Likewise.\n\t* tree.c: Revert changes of 2004-07-05; no special treatment\n\tfor TRANSLATION_UNIT_DECLs.\n\t* Makefile.in (tree.o): Update dependencies.\n\nFrom-SVN: r84306", "tree": {"sha": "4da42eccc0c6c979a20a5bd52c246aa67107bf03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4da42eccc0c6c979a20a5bd52c246aa67107bf03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b02f0e0046d946792d7e05b569cb6d2c54442ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b02f0e0046d946792d7e05b569cb6d2c54442ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b02f0e0046d946792d7e05b569cb6d2c54442ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b02f0e0046d946792d7e05b569cb6d2c54442ee/comments", "author": null, "committer": null, "parents": [{"sha": "95bcca470502e25b79b4b7820732d706bc7317aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95bcca470502e25b79b4b7820732d706bc7317aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95bcca470502e25b79b4b7820732d706bc7317aa"}], "stats": {"total": 92, "additions": 37, "deletions": 55}, "files": [{"sha": "6297458a2f3f0befdbbdb740cec31fcdd2f86b3d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b02f0e0046d946792d7e05b569cb6d2c54442ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b02f0e0046d946792d7e05b569cb6d2c54442ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b02f0e0046d946792d7e05b569cb6d2c54442ee", "patch": "@@ -1,3 +1,16 @@\n+2004-07-08  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* c-decl.c (pop_scope): Do not set DECL_CONTEXT on file-scope\n+\tdecls when there is only one input translation unit.\n+\t* langhooks.c (lhd_set_decl_assembler_name): Partially revert\n+\tchange of 2004-07-05; do not treat declarations with\n+\tDECL_CONTEXT a TRANSLATION_UNIT_DECL specially.\n+\t* opts.c (cur_in_fname): Delete.\n+\t* opts.h: Likewise.\n+\t* tree.c: Revert changes of 2004-07-05; no special treatment\n+\tfor TRANSLATION_UNIT_DECLs.\n+\t* Makefile.in (tree.o): Update dependencies.\n+\n 2004-07-08  Roger Sayle  <roger@eyesopen.com>\n \n \t* builtins.c (fold_builtin_strcpy): Merge functionality from\n@@ -69,7 +82,7 @@\n \t* tree-ssa-ccp.c (get_rhs, set_rhs): Reorg to use switch.\n \n 2004-07-08  Paolo Bonzini  <bonzini@gnu.org>\n-            Jakub Jelinek  <jakub@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.c (override_options): Enable\n \tSSE prefetches with -mtune, as long as we are\n@@ -118,7 +131,7 @@\n \tOBJ_TYPE_REF_OBJECT.\n \n 2004-07-08  Joseph S. Myers  <jsm@polyomino.org.uk>\n-            Neil Booth  <neil@daikokuya.co.uk>\n+\t    Neil Booth  <neil@daikokuya.co.uk>\n \n \tPR c/2511\n \tPR c/3325\n@@ -148,7 +161,7 @@\n \n 2004-07-08  Andrew Pinski  <apinski@apple.com>\n \n-\t* Makefile.in (libbackend.o): Add -combine to the gcc \n+\t* Makefile.in (libbackend.o): Add -combine to the gcc\n \tcommand line.\n \n 2004-07-08  Nick Clifton  <nickc@redhat.com>\n@@ -158,7 +171,7 @@\n \n 2004-07-08  Richard Henderson  <rth@redhat.com>\n \n-\t* except.c (expand_eh_region_start, expand_eh_region_end, \n+\t* except.c (expand_eh_region_start, expand_eh_region_end,\n \texpand_eh_handler, expand_eh_region_end_cleanup,\n \texpand_start_all_catch, expand_start_catch, expand_end_catch,\n \texpand_end_all_catch, expand_eh_region_end_allowed,\n@@ -172,7 +185,7 @@\n \t(stack_block_stack, expand_goto_internal, expand_fixup, expand_fixups,\n \tfixup_gotos, save_stack_pointer, expand_decl_cleanup,\n \texpand_decl_cleanup_eh, expand_cleanups, start_cleanup_deferral,\n-\tend_cleanup_deferral, last_cleanup_this_contour, \n+\tend_cleanup_deferral, last_cleanup_this_contour,\n \tcontaining_blocks_have_cleanups_or_stack_level,\n \tany_pending_cleanups): Remove.\n \t(expand_null_return_1): Take no arguments.\n@@ -185,8 +198,8 @@\n \t* function.c (expand_function_end): Likewise.\n \t* expr.c (store_expr, expand_expr_real_1): Likewise.\n \t(safe_from_p): Don't handle WITH_CLEANUP_EXPR, CLEANUP_POINT_EXPR.\n-\t(expand_expr_real_1): Don't handle WITH_CLEANUP_EXPR, \n-\tCLEANUP_POINT_EXPR, TARGET_EXPR, TRY_CATCH_EXPR, CATCH_EXPR, \n+\t(expand_expr_real_1): Don't handle WITH_CLEANUP_EXPR,\n+\tCLEANUP_POINT_EXPR, TARGET_EXPR, TRY_CATCH_EXPR, CATCH_EXPR,\n \tEH_FILTER_EXPR, TRY_FINALLY_EXPR, GOTO_SUBROUTINE_EXPR.\n \t* fold-const.c (fold_checksum_tree): Use first_rtl_op.\n \t* gengtype.c (adjust_field_tree_exp): Remove rtl op handling.\n@@ -714,7 +727,7 @@\n 2004-07-07  Mike Stump  <mrs@apple.com>\n \n \t* darwin.h (ASM_OUTPUT_LABELREF): Fix -fno-leading-underscore.\n-\t* darwin.c (machopic_non_lazy_ptr_name, machopic_stub_name) \n+\t* darwin.c (machopic_non_lazy_ptr_name, machopic_stub_name)\n \t(machopic_finish): Likewise.\n \n 2004-07-07  Richard Henderson  <rth@redhat.com>\n@@ -906,13 +919,13 @@\n \tPR target/16143\n \t* config/ia64/ia64.c (ia64_dfa_new_cycle): Reset DFA state for asm\n \tinsn.\n-\t\n+\n 2004-07-06  Kazuhiro Inaoka  <inaoka.kazuhiro@renesas.com>\n \n \tPR target/1679.\n \t* config/m32r/m32r.c (m32r_function_symbol): New function:\n \tGenerate a symbol name RTX with the correct m32r specific flags\n-\tset. \n+\tset.\n \t(block_move_call): Use new function to generate correct symbol.\n \t* config/m32r/m32r-protos.h: Add prototype for new funcion.\n \t* config/m32r/m32r.h (INITIALIZE_TRAMPOLINE): Use the new\n@@ -942,7 +955,7 @@\n 2004-07-07  Nick Clifton  <nickc@redhat.com>\n \n \t* config/fr30/fr30.c (fr30_setup_incoming_varargs): Change\n-\targuments to match TARGET_SETUP_INCOMING_VARARGS prototype. \n+\targuments to match TARGET_SETUP_INCOMING_VARARGS prototype.\n \n 2004-07-07  Nathan Sidwell  <nathan@codesourcery.com>\n \n@@ -1119,7 +1132,7 @@\n \t(find_var_from_fn): New function.\n \t(variably_modified_type_p): Add arg and call new function.\n \t* tree.h (variably_modified_type_p): Add extra arg.\n-\t\n+\n 2004-07-05  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sparc.md (nonlocal_goto): Remove disabled code."}, {"sha": "f4acac219918984bcdf5b6e804279522b795c480", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b02f0e0046d946792d7e05b569cb6d2c54442ee/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b02f0e0046d946792d7e05b569cb6d2c54442ee/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=5b02f0e0046d946792d7e05b569cb6d2c54442ee", "patch": "@@ -1569,7 +1569,7 @@ langhooks.o : langhooks.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H)\n    $(LANGHOOKS_DEF_H) $(FLAGS_H) $(GGC_H) diagnostic.h\n tree.o : tree.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) $(FLAGS_H) function.h \\\n    toplev.h $(GGC_H) $(HASHTAB_H) $(TARGET_H) output.h $(TM_P_H) langhooks.h \\\n-   real.h gt-tree.h tree-iterator.h $(BASIC_BLOCK_H) $(TREE_FLOW_H) opts.h\n+   real.h gt-tree.h tree-iterator.h $(BASIC_BLOCK_H) $(TREE_FLOW_H)\n tree-dump.o: tree-dump.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(C_TREE_H) $(FLAGS_H) langhooks.h toplev.h output.h c-pragma.h $(RTL_H) \\\n    $(GGC_H) $(EXPR_H) $(SPLAY_TREE_H) $(TREE_DUMP_H) tree-iterator.h"}, {"sha": "68617bd76a5d2b26ba17d6f4af7e81c96539253e", "filename": "gcc/c-decl.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b02f0e0046d946792d7e05b569cb6d2c54442ee/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b02f0e0046d946792d7e05b569cb6d2c54442ee/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=5b02f0e0046d946792d7e05b569cb6d2c54442ee", "patch": "@@ -760,10 +760,12 @@ pop_scope (void)\n \t      TREE_CHAIN (p) = BLOCK_VARS (block);\n \t      BLOCK_VARS (block) = p;\n \t    }\n-\t  /* If this is the file scope, must set DECL_CONTEXT on\n-\t     these.  Do so even for externals, so that\n-\t     same_translation_unit_p works.  */\n-\t  if (scope == file_scope)\n+\t  /* If this is the file scope, and we are processing more\n+\t     than one translation unit in this compilation, set\n+\t     DECL_CONTEXT of each decl to the TRANSLATION_UNIT_DECL.\n+\t     This makes same_translation_unit_p work, and causes\n+\t     static declarations to be given disambiguating suffixes.  */\n+\t  if (scope == file_scope && num_in_fnames > 1)\n \t    DECL_CONTEXT (p) = context;\n \n \t  /* Fall through.  */"}, {"sha": "1400a6c9786172b745ebc35a67e08ee35702614a", "filename": "gcc/langhooks.c", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b02f0e0046d946792d7e05b569cb6d2c54442ee/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b02f0e0046d946792d7e05b569cb6d2c54442ee/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=5b02f0e0046d946792d7e05b569cb6d2c54442ee", "patch": "@@ -179,31 +179,15 @@ lhd_set_decl_assembler_name (tree decl)\n \n          Can't use just the variable's own name for a variable whose\n \t scope is less than the whole compilation.  Concatenate a\n-\t distinguishing number.  If the decl is at block scope, the\n-\t number assigned is the DECL_UID; if the decl is at file\n-\t scope, the number is the DECL_UID of the surrounding\n-\t TRANSLATION_UNIT_DECL, except for the T_U_D with UID 0.\n-\t Those (the file-scope internal-linkage declarations from the\n-\t first input file) get no suffix, which is consistent with\n-\t what has historically been done for file-scope declarations\n-\t with internal linkage.  */\n-      if (TREE_PUBLIC (decl)\n-\t  || DECL_CONTEXT (decl) == NULL_TREE\n-\t  || (TREE_CODE (DECL_CONTEXT (decl)) == TRANSLATION_UNIT_DECL\n-\t      && DECL_UID (DECL_CONTEXT (decl)) == 0))\n+\t distinguishing number - we use the DECL_UID.  */\n+      if (TREE_PUBLIC (decl) || DECL_CONTEXT (decl) == NULL_TREE)\n \tSET_DECL_ASSEMBLER_NAME (decl, DECL_NAME (decl));\n       else\n \t{\n \t  const char *name = IDENTIFIER_POINTER (DECL_NAME (decl));\n \t  char *label;\n-\t  unsigned int uid;\n \n-\t  if (TREE_CODE (DECL_CONTEXT (decl)) == TRANSLATION_UNIT_DECL)\n-\t    uid = DECL_UID (DECL_CONTEXT (decl));\n-\t  else\n-\t    uid = DECL_UID (decl);\n-\n-\t  ASM_FORMAT_PRIVATE_NAME (label, name, uid);\n+\t  ASM_FORMAT_PRIVATE_NAME (label, name, DECL_UID (decl));\n \t  SET_DECL_ASSEMBLER_NAME (decl, get_identifier (label));\n \t}\n     }"}, {"sha": "5a4873c80ce3c54f0a013cf367f4d8d3d148d2b8", "filename": "gcc/opts.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b02f0e0046d946792d7e05b569cb6d2c54442ee/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b02f0e0046d946792d7e05b569cb6d2c54442ee/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=5b02f0e0046d946792d7e05b569cb6d2c54442ee", "patch": "@@ -92,7 +92,6 @@ static bool flag_peel_loops_set, flag_branch_probabilities_set;\n /* Input file names.  */\n const char **in_fnames;\n unsigned num_in_fnames;\n-unsigned cur_in_fname;\n \n static size_t find_opt (const char *, int);\n static int common_handle_option (size_t scode, const char *arg, int value);"}, {"sha": "17b2bca3f84fc6e0f41bc913fc13089fa64ca69a", "filename": "gcc/opts.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b02f0e0046d946792d7e05b569cb6d2c54442ee/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b02f0e0046d946792d7e05b569cb6d2c54442ee/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=5b02f0e0046d946792d7e05b569cb6d2c54442ee", "patch": "@@ -57,8 +57,4 @@ extern const char **in_fnames;\n \n extern unsigned num_in_fnames;\n \n-/* Current input filename index.  */\n-\n-extern unsigned cur_in_fname;\n-\n #endif"}, {"sha": "5e95ab60895b6fd09923c3387178918ff18e174a", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b02f0e0046d946792d7e05b569cb6d2c54442ee/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b02f0e0046d946792d7e05b569cb6d2c54442ee/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=5b02f0e0046d946792d7e05b569cb6d2c54442ee", "patch": "@@ -48,7 +48,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tree-iterator.h\"\n #include \"basic-block.h\"\n #include \"tree-flow.h\"\n-#include \"opts.h\"\n \n /* obstack.[ch] explicitly declined to prototype this.  */\n extern int _obstack_allocated_p (struct obstack *h, void *obj);\n@@ -310,10 +309,7 @@ make_node_stat (enum tree_code code MEM_STAT_DECL)\n       DECL_USER_ALIGN (t) = 0;\n       DECL_IN_SYSTEM_HEADER (t) = in_system_header;\n       DECL_SOURCE_LOCATION (t) = input_location;\n-      if (code == TRANSLATION_UNIT_DECL)\n-\tDECL_UID (t) = cur_in_fname;\n-      else\n-\tDECL_UID (t) = next_decl_uid++;\n+      DECL_UID (t) = next_decl_uid++;\n \n       /* We have not yet computed the alias set for this declaration.  */\n       DECL_POINTER_ALIAS_SET (t) = -1;\n@@ -386,7 +382,7 @@ copy_node_stat (tree node MEM_STAT_DECL)\n   TREE_VISITED (t) = 0;\n   t->common.ann = 0;\n \n-  if (TREE_CODE_CLASS (code) == 'd' && code != TRANSLATION_UNIT_DECL)\n+  if (TREE_CODE_CLASS (code) == 'd')\n     DECL_UID (t) = next_decl_uid++;\n   else if (TREE_CODE_CLASS (code) == 't')\n     {\n@@ -5363,14 +5359,6 @@ make_or_reuse_type (unsigned size, int unsignedp)\n void\n build_common_tree_nodes (int signed_char)\n {\n-  /* This function is called after command line parsing is complete,\n-     but before any DECL nodes should have been created.  Therefore,\n-     now is the appropriate time to adjust next_decl_uid so that the\n-     range 0 .. num_in_fnames-1 is reserved for TRANSLATION_UNIT_DECLs.  */\n-  if (next_decl_uid)\n-    abort ();\n-  next_decl_uid = num_in_fnames;\n-\n   error_mark_node = make_node (ERROR_MARK);\n   TREE_TYPE (error_mark_node) = error_mark_node;\n "}]}