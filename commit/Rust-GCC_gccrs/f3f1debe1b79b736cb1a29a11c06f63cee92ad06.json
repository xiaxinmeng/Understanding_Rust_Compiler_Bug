{"sha": "f3f1debe1b79b736cb1a29a11c06f63cee92ad06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNmMWRlYmUxYjc5YjczNmNiMWEyOWExMWMwNmY2M2NlZTkyYWQwNg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2020-07-13T20:29:56Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-20T07:21:30Z"}, "message": "[Ada] Ada_2020: Further code cleanup for container aggregates\n\ngcc/ada/\n\n\t* exp_aggr.adb (Expand_Iterated_Component): Reorganize code to\n\tensure that Loop_Id is properly initialized on all paths, and\n\tremove code duplication.", "tree": {"sha": "49149bac72599b5cd1f75f29692a10ad773f22bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49149bac72599b5cd1f75f29692a10ad773f22bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3f1debe1b79b736cb1a29a11c06f63cee92ad06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f1debe1b79b736cb1a29a11c06f63cee92ad06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3f1debe1b79b736cb1a29a11c06f63cee92ad06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f1debe1b79b736cb1a29a11c06f63cee92ad06/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "797c14b5cd592ee5ded30f4c002a18e8a76de7d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/797c14b5cd592ee5ded30f4c002a18e8a76de7d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/797c14b5cd592ee5ded30f4c002a18e8a76de7d9"}], "stats": {"total": 69, "additions": 37, "deletions": 32}, "files": [{"sha": "7bdd11bf3a0ba4dc38648eeffc01bf98484aa213", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 37, "deletions": 32, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f1debe1b79b736cb1a29a11c06f63cee92ad06/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f1debe1b79b736cb1a29a11c06f63cee92ad06/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=f3f1debe1b79b736cb1a29a11c06f63cee92ad06", "patch": "@@ -6905,6 +6905,7 @@ package body Exp_Aggr is\n          L_Range            : Node_Id;\n          L_Iteration_Scheme : Node_Id;\n          Loop_Stat          : Node_Id;\n+         Params             : List_Id;\n          Stats              : List_Id;\n \n       begin\n@@ -6936,31 +6937,39 @@ package body Exp_Aggr is\n                    Loop_Parameter_Specification =>\n                      Loop_Parameter_Specification (Comp));\n                Loop_Id :=\n-                  Make_Defining_Identifier (Loc,\n-                    Chars => Chars (Defining_Identifier\n-                               (Loop_Parameter_Specification (Comp))));\n+                 Make_Defining_Identifier (Loc,\n+                   Chars => Chars (Defining_Identifier\n+                              (Loop_Parameter_Specification (Comp))));\n                Set_Defining_Identifier\n-                  (Loop_Parameter_Specification\n-                     (L_Iteration_Scheme), Loop_Id);\n+                 (Loop_Parameter_Specification\n+                    (L_Iteration_Scheme), Loop_Id);\n             end if;\n+         else\n \n-         elsif Present (Iterator_Specification (Comp)) then\n-            L_Iteration_Scheme :=\n-              Make_Iteration_Scheme (Loc,\n-                Iterator_Specification => Iterator_Specification (Comp));\n+            --  Iterated_Component_Association.\n \n-         else\n-            L_Range := Relocate_Node (First (Discrete_Choices (Comp)));\n             Loop_Id :=\n               Make_Defining_Identifier (Loc,\n                 Chars => Chars (Defining_Identifier (Comp)));\n \n-            L_Iteration_Scheme :=\n-              Make_Iteration_Scheme (Loc,\n-                Loop_Parameter_Specification =>\n-                  Make_Loop_Parameter_Specification (Loc,\n-                    Defining_Identifier => Loop_Id,\n-                    Discrete_Subtype_Definition => L_Range));\n+            if Present (Iterator_Specification (Comp)) then\n+               L_Iteration_Scheme :=\n+                 Make_Iteration_Scheme (Loc,\n+                   Iterator_Specification => Iterator_Specification (Comp));\n+\n+            else\n+               --  Loop_Parameter_Specifcation is parsed with a choice list.\n+               --  where the range is the first (and only) choice.\n+\n+               L_Range := Relocate_Node (First (Discrete_Choices (Comp)));\n+\n+               L_Iteration_Scheme :=\n+                 Make_Iteration_Scheme (Loc,\n+                   Loop_Parameter_Specification =>\n+                     Make_Loop_Parameter_Specification (Loc,\n+                       Defining_Identifier => Loop_Id,\n+                       Discrete_Subtype_Definition => L_Range));\n+            end if;\n          end if;\n \n          --  Build insertion statement. For a positional aggregate, only the\n@@ -6983,23 +6992,19 @@ package body Exp_Aggr is\n             --  possibly with a specified key_expression.\n \n             if Present (Key_Expr) then\n-               Stats := New_List\n-                 (Make_Procedure_Call_Statement (Loc,\n-                    Name => New_Occurrence_Of (Entity (Add_Named_Subp), Loc),\n-                    Parameter_Associations =>\n-                      New_List (New_Occurrence_Of (Temp, Loc),\n-                        New_Copy_Tree (Key_Expr),\n-                        New_Copy_Tree (Expr))));\n-\n+               Params := New_List (New_Occurrence_Of (Temp, Loc),\n+                            New_Copy_Tree (Key_Expr),\n+                            New_Copy_Tree (Expr));\n             else\n-               Stats := New_List\n-                 (Make_Procedure_Call_Statement (Loc,\n-                    Name => New_Occurrence_Of (Entity (Add_Named_Subp), Loc),\n-                    Parameter_Associations =>\n-                      New_List (New_Occurrence_Of (Temp, Loc),\n-                        New_Occurrence_Of (Loop_Id, Loc),\n-                        New_Copy_Tree (Expr))));\n+               Params := New_List (New_Occurrence_Of (Temp, Loc),\n+                            New_Occurrence_Of (Loop_Id, Loc),\n+                            New_Copy_Tree (Expr));\n             end if;\n+\n+            Stats := New_List\n+              (Make_Procedure_Call_Statement (Loc,\n+                 Name => New_Occurrence_Of (Entity (Add_Named_Subp), Loc),\n+                 Parameter_Associations => Params));\n          end if;\n \n          Loop_Stat :=  Make_Implicit_Loop_Statement"}]}