{"sha": "7c9577becf922e261c901a1108ee0cb58aa73d58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M5NTc3YmVjZjkyMmUyNjFjOTAxYTExMDhlZTBjYjU4YWE3M2Q1OA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-08-09T17:28:39Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-08-09T17:28:39Z"}, "message": "gimple.c (gimple_build_call_1): Deal with FUNCTION_DECL fn.\n\n2008-08-09  Richard Guenther  <rguenther@suse.de>\n\n\t* gimple.c (gimple_build_call_1): Deal with FUNCTION_DECL fn.\n\t* gimple.h (gimple_call_fn): Adjust comment.\n\t(gimple_call_set_fndecl): New function.\n\t(gimple_call_fndecl): Adjust for GIMPLE_CALL no\n\tlonger having bare FUNCTION_DECL operand.\n\t(gimple_call_return_type): Likewise.\n\t* tree-cfg.c (verify_stmt): Verify function operand of a GIMPLE_CALL.\n\n\t* value-prof.c (gimple_divmod_fixed_value): Do not emit labels.\n\t(gimple_mod_pow2): Likewise.\n\t(gimple_mod_subtract): Likewise.\n\t(gimple_ic): Likewise.\n\t(gimple_stringop_fixed_value): Likewise.\n\t(gimple_indirect_call_to_profile): Fix for GIMPLE_CALL no\n\tlonger having bare FUNCTION_DECL operand.\n\t* ipa-cp.c (ipcp_update_callgraph): Use gimple_call_set_fndecl.\n\t* omp-low.c (optimize_omp_library_calls): Likewise.\n\t* cgraphunit.c (update_call_expr): Likewise.\n\t* tree-ssa-math-opts.c (execute_cse_reciprocals): Likewise.\n\t(execute_convert_to_rsqrt): Likewise.\n\t* cfgexpand.c (gimple_to_tree): Simplify.\n\t(release_stmt_tree): Fix for GIMPLE_CALL no longer having\n\tbare FUNCTION_DECL operand.\n\t* tree-nested.c (init_tmp_var_with_call): Use gimple_call_return_type.\n\t(convert_gimple_call): Use gimple_call_fndecl.\n\t* c-common.c (c_warn_unused_result): Likewise.\n\n\t* gcc.dg/tree-ssa/inline-2.c: New testcase.\n\nFrom-SVN: r138907", "tree": {"sha": "e96c21c1520a969a3ed3dd84fdd1dadfb5821f86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e96c21c1520a969a3ed3dd84fdd1dadfb5821f86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c9577becf922e261c901a1108ee0cb58aa73d58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c9577becf922e261c901a1108ee0cb58aa73d58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c9577becf922e261c901a1108ee0cb58aa73d58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c9577becf922e261c901a1108ee0cb58aa73d58/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6cccc200142d9a9d1dbafa0d0a1d8ec2cb0b2c14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cccc200142d9a9d1dbafa0d0a1d8ec2cb0b2c14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cccc200142d9a9d1dbafa0d0a1d8ec2cb0b2c14"}], "stats": {"total": 185, "additions": 101, "deletions": 84}, "files": [{"sha": "71a8477cf571a3facf7eb41f7ba35d92f508f3b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c9577becf922e261c901a1108ee0cb58aa73d58", "patch": "@@ -1,3 +1,32 @@\n+2008-08-09  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimple.c (gimple_build_call_1): Deal with FUNCTION_DECL fn.\n+\t* gimple.h (gimple_call_fn): Adjust comment.\n+\t(gimple_call_set_fndecl): New function.\n+\t(gimple_call_fndecl): Adjust for GIMPLE_CALL no\n+\tlonger having bare FUNCTION_DECL operand.\n+\t(gimple_call_return_type): Likewise.\n+\t* tree-cfg.c (verify_stmt): Verify function operand of a GIMPLE_CALL.\n+\n+\t* value-prof.c (gimple_divmod_fixed_value): Do not emit labels.\n+\t(gimple_mod_pow2): Likewise.\n+\t(gimple_mod_subtract): Likewise.\n+\t(gimple_ic): Likewise.\n+\t(gimple_stringop_fixed_value): Likewise.\n+\t(gimple_indirect_call_to_profile): Fix for GIMPLE_CALL no\n+\tlonger having bare FUNCTION_DECL operand.\n+\t* ipa-cp.c (ipcp_update_callgraph): Use gimple_call_set_fndecl.\n+\t* omp-low.c (optimize_omp_library_calls): Likewise.\n+\t* cgraphunit.c (update_call_expr): Likewise.\n+\t* tree-ssa-math-opts.c (execute_cse_reciprocals): Likewise.\n+\t(execute_convert_to_rsqrt): Likewise.\n+\t* cfgexpand.c (gimple_to_tree): Simplify.\n+\t(release_stmt_tree): Fix for GIMPLE_CALL no longer having\n+\tbare FUNCTION_DECL operand.\n+\t* tree-nested.c (init_tmp_var_with_call): Use gimple_call_return_type.\n+\t(convert_gimple_call): Use gimple_call_fndecl.\n+\t* c-common.c (c_warn_unused_result): Likewise.\n+\n 2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c/17880"}, {"sha": "59da62f7ecc8d0864ac35dc21ebe6a62402047bd", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=7c9577becf922e261c901a1108ee0cb58aa73d58", "patch": "@@ -7546,15 +7546,8 @@ c_warn_unused_result (gimple_seq seq)\n \t  /* This is a naked call, as opposed to a GIMPLE_CALL with an\n \t     LHS.  All calls whose value is ignored should be\n \t     represented like this.  Look for the attribute.  */\n-\t  fdecl = gimple_call_fn (g);\n-\t  if (TREE_CODE (fdecl) == FUNCTION_DECL)\n-\t    ftype = TREE_TYPE (fdecl);\n-\t  else\n-\t    {\n-\t      ftype = TREE_TYPE (fdecl);\n-\t      /* Look past pointer-to-function to the function type itself.  */\n-\t      ftype = TREE_TYPE (ftype);\n-\t    }\n+\t  fdecl = gimple_call_fndecl (g);\n+\t  ftype = TREE_TYPE (TREE_TYPE (gimple_call_fn (g)));\n \n \t  if (lookup_attribute (\"warn_unused_result\", TYPE_ATTRIBUTES (ftype)))\n \t    {"}, {"sha": "ac228f9b79fc23bc3e722cae072d298fc95e1ed4", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=7c9577becf922e261c901a1108ee0cb58aa73d58", "patch": "@@ -216,16 +216,8 @@ gimple_to_tree (gimple stmt)\n         \n \tt = build_vl_exp (CALL_EXPR, gimple_call_num_args (stmt) + 3);\n \n-        fn = gimple_call_fn (stmt);\n-        if (TREE_CODE (fn) == FUNCTION_DECL)\n-          CALL_EXPR_FN (t) = build1 (ADDR_EXPR,\n-                                     build_pointer_type (TREE_TYPE (fn)),\n-                                     fn);\n-        else\n-          CALL_EXPR_FN (t) = fn;\n-        \n+        CALL_EXPR_FN (t) = gimple_call_fn (stmt);\n         TREE_TYPE (t) = gimple_call_return_type (stmt);\n-\n \tCALL_EXPR_STATIC_CHAIN (t) = gimple_call_chain (stmt);\n \n \tfor (i = 0; i < gimple_call_num_args (stmt); i++)\n@@ -253,7 +245,9 @@ gimple_to_tree (gimple stmt)\n \n         /* Record the original call statement, as it may be used\n            to retrieve profile information during expansion.  */\n-\tif (TREE_CODE (fn) == FUNCTION_DECL && DECL_BUILT_IN (fn))\n+\n+\tif ((fn = gimple_call_fndecl (stmt)) != NULL_TREE\n+\t    && DECL_BUILT_IN (fn))\n \t  {\n \t    ann = get_tree_common_ann (t);\n \t    ann->stmt = stmt;\n@@ -368,15 +362,11 @@ release_stmt_tree (gimple stmt, tree stmt_tree)\n     case GIMPLE_CALL:\n       if (gimple_call_lhs (stmt))\n \t{\n-\t  if (TREE_CODE (gimple_call_fn (stmt)) == FUNCTION_DECL)\n-\t    ggc_free (CALL_EXPR_FN (TREE_OPERAND (stmt_tree, 1)));\n \t  ann = tree_common_ann (TREE_OPERAND (stmt_tree, 1));\n \t  if (ann)\n \t    ggc_free (ann);\n \t  ggc_free (TREE_OPERAND (stmt_tree, 1));\n \t}\n-      else if (TREE_CODE (gimple_call_fn (stmt)) == FUNCTION_DECL)\n-\tggc_free (CALL_EXPR_FN (stmt_tree));\n       break;\n     default:\n       break;"}, {"sha": "ae3dee417da59c468e4d24935c74842e9e906b4c", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=7c9577becf922e261c901a1108ee0cb58aa73d58", "patch": "@@ -1420,7 +1420,7 @@ update_call_expr (struct cgraph_node *new_version)\n \n   /* Update the call expr on the edges to call the new version.  */\n   for (e = new_version->callers; e; e = e->next_caller)\n-    gimple_call_set_fn (e->call_stmt, new_version->decl);\n+    gimple_call_set_fndecl (e->call_stmt, new_version->decl);\n }\n \n "}, {"sha": "6e8971f4ec17a27eba524dd4aee2af38832b6d99", "filename": "gcc/gimple.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=7c9577becf922e261c901a1108ee0cb58aa73d58", "patch": "@@ -285,6 +285,8 @@ static inline gimple\n gimple_build_call_1 (tree fn, unsigned nargs)\n {\n   gimple s = gimple_build_with_ops (GIMPLE_CALL, 0, nargs + 3);\n+  if (TREE_CODE (fn) == FUNCTION_DECL)\n+    fn = build_fold_addr_expr (fn);\n   gimple_set_op (s, 1, fn);\n   return s;\n }"}, {"sha": "3799e062b37ecc33e53c34293e49edb0b76df781", "filename": "gcc/gimple.h", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=7c9577becf922e261c901a1108ee0cb58aa73d58", "patch": "@@ -1905,7 +1905,7 @@ gimple_call_set_lhs (gimple gs, tree lhs)\n \n \n /* Return the tree node representing the function called by call\n-   statement GS.  This may or may not be a FUNCTION_DECL node.  */\n+   statement GS.  */\n \n static inline tree\n gimple_call_fn (const_gimple gs)\n@@ -1937,15 +1937,31 @@ gimple_call_set_fn (gimple gs, tree fn)\n }\n \n \n+/* Set FNDECL to be the function called by call statement GS.  */\n+\n+static inline void\n+gimple_call_set_fndecl (gimple gs, tree decl)\n+{\n+  GIMPLE_CHECK (gs, GIMPLE_CALL);\n+  gcc_assert (TREE_CODE (decl) == FUNCTION_DECL);\n+  gimple_set_op (gs, 1, build_fold_addr_expr (decl));\n+}\n+\n+\n /* If a given GIMPLE_CALL's callee is a FUNCTION_DECL, return it.\n    Otherwise return NULL.  This function is analogous to\n    get_callee_fndecl in tree land.  */\n \n static inline tree\n gimple_call_fndecl (const_gimple gs)\n {\n-  tree decl = gimple_call_fn (gs);\n-  return (TREE_CODE (decl) == FUNCTION_DECL) ? decl : NULL_TREE;\n+  tree addr = gimple_call_fn (gs);\n+  if (TREE_CODE (addr) == ADDR_EXPR)\n+    {\n+      gcc_assert (TREE_CODE (TREE_OPERAND (addr, 0)) == FUNCTION_DECL);\n+      return TREE_OPERAND (addr, 0);\n+    }\n+  return NULL_TREE;\n }\n \n \n@@ -1957,9 +1973,9 @@ gimple_call_return_type (const_gimple gs)\n   tree fn = gimple_call_fn (gs);\n   tree type = TREE_TYPE (fn);\n \n-  /* See through pointers.  */\n-  if (POINTER_TYPE_P (type))\n-    type = TREE_TYPE (type);\n+  /* See through the pointer.  */\n+  gcc_assert (POINTER_TYPE_P (type));\n+  type = TREE_TYPE (type);\n \n   gcc_assert (TREE_CODE (type) == FUNCTION_TYPE\n \t      || TREE_CODE (type) == METHOD_TYPE);"}, {"sha": "a129a74c7ffd3f510bcaf4927b43d57179a9b5e2", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=7c9577becf922e261c901a1108ee0cb58aa73d58", "patch": "@@ -809,7 +809,7 @@ ipcp_update_callgraph (void)\n \t    if (ipcp_need_redirect_p (cs))\n \t      {\n \t\tcgraph_redirect_edge_callee (cs, orig_callee);\n-\t\tgimple_call_set_fn (cs->call_stmt, orig_callee->decl);\n+\t\tgimple_call_set_fndecl (cs->call_stmt, orig_callee->decl);\n \t      }\n \t  }\n     }"}, {"sha": "d6c5500319aa6442bdfdb12b3facc48e03ed3d33", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=7c9577becf922e261c901a1108ee0cb58aa73d58", "patch": "@@ -3222,7 +3222,7 @@ optimize_omp_library_calls (gimple entry_stmt)\n \t\t   != TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (built_in))))\n \t      continue;\n \n-\t    gimple_call_set_fn (call, build_fold_addr_expr (built_in));\n+\t    gimple_call_set_fndecl (call, built_in);\n \t  }\n       }\n }"}, {"sha": "4c98fca979f7c620a586061e005dac2a810b2a0e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c9577becf922e261c901a1108ee0cb58aa73d58", "patch": "@@ -1,3 +1,7 @@\n+2008-08-09  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/inline-2.c: New testcase.\n+\n 2008-08-09  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR c/17880"}, {"sha": "8a7b9070de5b5d865432ab0c3781d402d19def8a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/inline-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Finline-2.c?ref=7c9577becf922e261c901a1108ee0cb58aa73d58", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do link } */\n+/* { dg-options \"-O\" } */\n+\n+/* When optimized we expect the call to foo () in bar to be inlined\n+   and the call to link_error optimized away.  */\n+\n+extern void link_error (void);\n+int __attribute__((always_inline)) foo(void) { return 0; }\n+\n+int main()\n+{\n+  int (*fn)(void) = foo;\n+  if (fn())\n+    link_error ();\n+  return 0;\n+}\n+"}, {"sha": "99978efe35b7b496530ab765a5f6c987260ad162", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=7c9577becf922e261c901a1108ee0cb58aa73d58", "patch": "@@ -3810,9 +3810,17 @@ verify_stmt (gimple_stmt_iterator *gsi)\n      didn't see a function declaration before the call.  */\n   if (is_gimple_call (stmt))\n     {\n-      tree decl = gimple_call_fn (stmt);\n+      tree decl;\n \n-      if (TREE_CODE (decl) == FUNCTION_DECL \n+      if (!is_gimple_call_addr (gimple_call_fn (stmt)))\n+\t{\n+\t  error (\"invalid function in call statement\");\n+\t  return true;\n+\t}\n+\n+      decl = gimple_call_fndecl (stmt);\n+      if (decl\n+\t  && TREE_CODE (decl) == FUNCTION_DECL\n \t  && DECL_LOOPING_CONST_OR_PURE_P (decl)\n \t  && (!DECL_PURE_P (decl))\n \t  && (!TREE_READONLY (decl)))"}, {"sha": "cfa1dd4b1eef0c3e212df3e5e1b12b0bb3057975", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=7c9577becf922e261c901a1108ee0cb58aa73d58", "patch": "@@ -363,8 +363,7 @@ init_tmp_var_with_call (struct nesting_info *info, gimple_stmt_iterator *gsi,\n {\n   tree t;\n \n-  t = create_tmp_var_for (info, TREE_TYPE (TREE_TYPE (gimple_call_fn (call))),\n-                          NULL);\n+  t = create_tmp_var_for (info, gimple_call_return_type (call), NULL);\n   gimple_call_set_lhs (call, t);\n   if (! gsi_end_p (*gsi))\n     gimple_set_location (call, gimple_location (gsi_stmt (*gsi)));\n@@ -1851,8 +1850,8 @@ convert_gimple_call (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n   switch (gimple_code (stmt))\n     {\n     case GIMPLE_CALL:\n-      decl = gimple_call_fn (stmt);\n-      if (TREE_CODE (decl) != FUNCTION_DECL)\n+      decl = gimple_call_fndecl (stmt);\n+      if (!decl)\n \tbreak;\n       target_context = decl_function_context (decl);\n       if (target_context && !DECL_NO_STATIC_CHAIN (decl))"}, {"sha": "844ec9d1ad0cca60c10718fc57846a2947d5df31", "filename": "gcc/tree-ssa-math-opts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Ftree-ssa-math-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Ftree-ssa-math-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-math-opts.c?ref=7c9577becf922e261c901a1108ee0cb58aa73d58", "patch": "@@ -533,7 +533,7 @@ execute_cse_reciprocals (void)\n \t\t  if (!fndecl)\n \t\t    continue;\n \n-\t\t  gimple_call_set_fn (stmt1, fndecl);\n+\t\t  gimple_call_set_fndecl (stmt1, fndecl);\n \t\t  update_stmt (stmt1);\n \n \t\t  gimple_assign_set_rhs_code (stmt, MULT_EXPR);\n@@ -840,7 +840,7 @@ execute_convert_to_rsqrt (void)\n \t\t  fold_stmt_inplace (stmt1);\n \t\t  update_stmt (stmt1);\n \n-\t\t  gimple_call_set_fn (stmt, fndecl);\n+\t\t  gimple_call_set_fndecl (stmt, fndecl);\n \t\t  update_stmt (stmt);\n \t\t}\n \t    }"}, {"sha": "7f776ccaf890ad10e52de07043a3a62da0eec333", "filename": "gcc/value-prof.c", "status": "modified", "additions": 3, "deletions": 44, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c9577becf922e261c901a1108ee0cb58aa73d58/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=7c9577becf922e261c901a1108ee0cb58aa73d58", "patch": "@@ -541,10 +541,8 @@ static tree\n gimple_divmod_fixed_value (gimple stmt, tree value, int prob, gcov_type count,\n \t\t\t   gcov_type all)\n {\n-  gimple stmt1, stmt2, stmt3, label1, label2;\n+  gimple stmt1, stmt2, stmt3;\n   tree tmp1, tmp2, tmpv;\n-  tree label_decl1 = create_artificial_label ();\n-  tree label_decl2 = create_artificial_label ();\n   gimple bb1end, bb2end, bb3end;\n   basic_block bb, bb2, bb3, bb4;\n   tree optype, op1, op2;\n@@ -573,17 +571,13 @@ gimple_divmod_fixed_value (gimple stmt, tree value, int prob, gcov_type count,\n   bb1end = stmt3;\n \n   tmp2 = create_tmp_var (optype, \"PROF\");\n-  label1 = gimple_build_label (label_decl1);\n   stmt1 = gimple_build_assign_with_ops (gimple_assign_rhs_code (stmt), tmp2,\n \t\t\t\t\top1, tmpv);\n-  gsi_insert_before (&gsi, label1, GSI_SAME_STMT);\n   gsi_insert_before (&gsi, stmt1, GSI_SAME_STMT);\n   bb2end = stmt1;\n \n-  label2 = gimple_build_label (label_decl2);\n   stmt1 = gimple_build_assign_with_ops (gimple_assign_rhs_code (stmt), tmp2,\n \t\t\t\t\top1, op2);\n-  gsi_insert_before (&gsi, label2, GSI_SAME_STMT);\n   gsi_insert_before (&gsi, stmt1, GSI_SAME_STMT);\n   bb3end = stmt1;\n \n@@ -702,9 +696,6 @@ gimple_mod_pow2 (gimple stmt, int prob, gcov_type count, gcov_type all)\n {\n   gimple stmt1, stmt2, stmt3, stmt4;\n   tree tmp2, tmp3;\n-  tree label_decl1 = create_artificial_label ();\n-  tree label_decl2 = create_artificial_label ();\n-  gimple label1, label2;\n   gimple bb1end, bb2end, bb3end;\n   basic_block bb, bb2, bb3, bb4;\n   tree optype, op1, op2;\n@@ -736,16 +727,12 @@ gimple_mod_pow2 (gimple stmt, int prob, gcov_type count, gcov_type all)\n   bb1end = stmt4;\n \n   /* tmp2 == op2-1 inherited from previous block.  */\n-  label1 = gimple_build_label (label_decl1);\n   stmt1 = gimple_build_assign_with_ops (BIT_AND_EXPR, result, op1, tmp2);\n-  gsi_insert_before (&gsi, label1, GSI_SAME_STMT);\n   gsi_insert_before (&gsi, stmt1, GSI_SAME_STMT);\n   bb2end = stmt1;\n \n-  label2 = gimple_build_label (label_decl2);\n   stmt1 = gimple_build_assign_with_ops (gimple_assign_rhs_code (stmt), result,\n \t\t\t\t\top1, op2);\n-  gsi_insert_before (&gsi, label2, GSI_SAME_STMT);\n   gsi_insert_before (&gsi, stmt1, GSI_SAME_STMT);\n   bb3end = stmt1;\n \n@@ -861,10 +848,6 @@ gimple_mod_subtract (gimple stmt, int prob1, int prob2, int ncounts,\n {\n   gimple stmt1, stmt2, stmt3;\n   tree tmp1;\n-  tree label_decl1 = create_artificial_label ();\n-  tree label_decl2 = create_artificial_label ();\n-  tree label_decl3 = create_artificial_label ();\n-  gimple label1, label2, label3;\n   gimple bb1end, bb2end = NULL, bb3end;\n   basic_block bb, bb2, bb3, bb4;\n   tree optype, op1, op2;\n@@ -894,26 +877,19 @@ gimple_mod_subtract (gimple stmt, int prob1, int prob2, int ncounts,\n \n   if (ncounts)\t/* Assumed to be 0 or 1 */\n     {\n-      label1 = gimple_build_label (label_decl1);\n       stmt1 = gimple_build_assign_with_ops (MINUS_EXPR, result, result, tmp1);\n       stmt2 = gimple_build_cond (LT_EXPR, result, tmp1, NULL_TREE, NULL_TREE);\n-      gsi_insert_before (&gsi, label1, GSI_SAME_STMT);\n       gsi_insert_before (&gsi, stmt1, GSI_SAME_STMT);\n       gsi_insert_before (&gsi, stmt2, GSI_SAME_STMT);\n       bb2end = stmt2;\n     }\n \n   /* Fallback case. */\n-  label2 = gimple_build_label (label_decl2);\n   stmt1 = gimple_build_assign_with_ops (gimple_assign_rhs_code (stmt), result,\n \t\t\t\t\tresult, tmp1);\n-  gsi_insert_before (&gsi, label2, GSI_SAME_STMT);\n   gsi_insert_before (&gsi, stmt1, GSI_SAME_STMT);\n   bb3end = stmt1;\n \n-  label3 = gimple_build_label (label_decl3);\n-  gsi_insert_before (&gsi, label3, GSI_SAME_STMT);\n-\n   /* Fix CFG. */\n   /* Edge e23 connects bb2 to bb3, etc. */\n   /* However block 3 is optional; if it is not there, references\n@@ -1098,9 +1074,6 @@ gimple_ic (gimple stmt, gimple call, struct cgraph_node *direct_call,\n {\n   gimple stmt1, stmt2, stmt3;\n   tree tmp1, tmpv, tmp;\n-  tree label_decl1 = create_artificial_label ();\n-  tree label_decl2 = create_artificial_label ();\n-  gimple label1, label2;\n   gimple bb1end, bb2end, bb3end;\n   basic_block bb, bb2, bb3, bb4;\n   tree optype = build_pointer_type (void_type_node);\n@@ -1124,16 +1097,11 @@ gimple_ic (gimple stmt, gimple call, struct cgraph_node *direct_call,\n   gsi_insert_before (&gsi, stmt3, GSI_SAME_STMT);\n   bb1end = stmt3;\n \n-  label1 = gimple_build_label (label_decl1);\n   stmt1 = gimple_copy (stmt);\n   gimple_call_set_fn (stmt,\n \t\t      build_addr (direct_call->decl, current_function_decl));\n-  gsi_insert_before (&gsi, label1, GSI_SAME_STMT);\n   gsi_insert_before (&gsi, stmt1, GSI_SAME_STMT);\n   bb2end = stmt1;\n-\n-  label2 = gimple_build_label (label_decl2);\n-  gsi_insert_before (&gsi, label2, GSI_SAME_STMT);\n   bb3end = stmt;\n \n   /* Fix CFG. */\n@@ -1287,9 +1255,6 @@ gimple_stringop_fixed_value (gimple stmt, tree value, int prob, gcov_type count,\n {\n   gimple stmt1, stmt2, stmt3;\n   tree tmp1, tmpv;\n-  tree label_decl1 = create_artificial_label ();\n-  tree label_decl2 = create_artificial_label ();\n-  gimple label1, label2;\n   gimple bb1end, bb2end;\n   basic_block bb, bb2, bb3, bb4;\n   edge e12, e13, e23, e24, e34;\n@@ -1325,17 +1290,13 @@ gimple_stringop_fixed_value (gimple stmt, tree value, int prob, gcov_type count,\n   gsi_insert_before (&gsi, stmt3, GSI_SAME_STMT);\n   bb1end = stmt3;\n \n-  label1 = gimple_build_label (label_decl1);\n   stmt1 = gimple_copy (stmt);\n   gimple_call_set_arg (stmt1, 2, value);\n-  gsi_insert_before (&gsi, label1, GSI_SAME_STMT);\n   gsi_insert_before (&gsi, stmt1, GSI_SAME_STMT);\n   region = lookup_stmt_eh_region (stmt);\n   if (region >= 0)\n     add_stmt_to_eh_region (stmt1, region);\n   bb2end = stmt1;\n-  label2 = gimple_build_label (label_decl2);\n-  gsi_insert_before (&gsi, label2, GSI_SAME_STMT);\n \n   /* Fix CFG. */\n   /* Edge e23 connects bb2 to bb3, etc. */\n@@ -1581,13 +1542,11 @@ gimple_indirect_call_to_profile (gimple stmt, histogram_values *values)\n {\n   tree callee;\n \n-  if (gimple_code (stmt) != GIMPLE_CALL)\n+  if (gimple_code (stmt) != GIMPLE_CALL\n+      || gimple_call_fndecl (stmt) != NULL_TREE)\n     return;\n \n   callee = gimple_call_fn (stmt);\n-  \n-  if (TREE_CODE (callee) == FUNCTION_DECL)\n-    return;\n \n   VEC_reserve (histogram_value, heap, *values, 3);\n "}]}