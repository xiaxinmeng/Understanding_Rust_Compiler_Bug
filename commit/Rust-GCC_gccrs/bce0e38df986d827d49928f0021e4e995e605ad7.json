{"sha": "bce0e38df986d827d49928f0021e4e995e605ad7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNlMGUzOGRmOTg2ZDgyN2Q0OTkyOGYwMDIxZTRlOTk1ZTYwNWFkNw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-05-24T21:58:37Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-05-24T21:58:37Z"}, "message": "* configure: Regenerate.\n\nFrom-SVN: r223635", "tree": {"sha": "64aff5b4d0cece840afc2aeaf28ebe5089367c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64aff5b4d0cece840afc2aeaf28ebe5089367c13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bce0e38df986d827d49928f0021e4e995e605ad7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce0e38df986d827d49928f0021e4e995e605ad7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bce0e38df986d827d49928f0021e4e995e605ad7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bce0e38df986d827d49928f0021e4e995e605ad7/comments", "author": null, "committer": null, "parents": [{"sha": "98ce5ba507a0411527b17120c5b5006edaa9e4f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ce5ba507a0411527b17120c5b5006edaa9e4f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ce5ba507a0411527b17120c5b5006edaa9e4f5"}], "stats": {"total": 98, "additions": 32, "deletions": 66}, "files": [{"sha": "726c2eeebc3bade64c3d8239ac1ab5d9ac2420a2", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce0e38df986d827d49928f0021e4e995e605ad7/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce0e38df986d827d49928f0021e4e995e605ad7/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=bce0e38df986d827d49928f0021e4e995e605ad7", "patch": "@@ -1,9 +1,12 @@\n+2015-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* configure: Regenerate.\n+\n 2015-05-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* configure.ac: Include config/sjlj.m4.\n \tRemove manual SJLJ check, add GCC_CHECK_SJLJ_EXCEPTIONS and adjust.\n \t* include/config.h.in: Regenerate.\n-\t* configure: Likewise.\n \t* exception.cc: Replace SJLJ_EXCEPTIONS by __USING_SJLJ_EXCEPTIONS__.\n \t* stacktrace.cc: Likewise.\n \t* include/default-signal.h: Likewise."}, {"sha": "0f31b0b2524f28c50971b08c1cb3ec65b251184b", "filename": "libjava/configure", "status": "modified", "additions": 28, "deletions": 65, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bce0e38df986d827d49928f0021e4e995e605ad7/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bce0e38df986d827d49928f0021e4e995e605ad7/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=bce0e38df986d827d49928f0021e4e995e605ad7", "patch": "@@ -950,7 +950,6 @@ enable_reduced_reflection\n with_win32_nlsapi\n enable_gc_debug\n enable_interpreter\n-enable_sjlj_exceptions\n enable_java_net\n with_libffi\n enable_jvmpi\n@@ -1645,8 +1644,6 @@ Optional Features:\n                           building portions of libgcj\n   --enable-gc-debug       include full support for pointer backtracing etc.\n   --enable-interpreter    enable interpreter\n-  --enable-sjlj-exceptions\n-                          force use of builtin_setjmp for exceptions\n   --disable-java-net      disable java.net\n   --disable-jvmpi         disable JVMPI support\n   --enable-java-gc=TYPE   choose garbage collector (default is boehm)\n@@ -13392,7 +13389,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 13395 \"configure\"\n+#line 13392 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -13498,7 +13495,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 13501 \"configure\"\n+#line 13498 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -19482,70 +19479,36 @@ else\n fi\n \n \n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for exception model to use\" >&5\n-$as_echo_n \"checking for exception model to use... \" >&6; }\n-ac_ext=cpp\n-ac_cpp='$CXXCPP $CPPFLAGS'\n-ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n-ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n-ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n-\n-# Check whether --enable-sjlj-exceptions was given.\n-if test \"${enable_sjlj_exceptions+set}\" = set; then :\n-  enableval=$enable_sjlj_exceptions; :\n+# If we are not using SJLJ exceptions, and this host does not have support\n+# for unwinding from a signal handler, enable checked dereferences and divides.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether the compiler is configured for setjmp/longjmp exceptions\" >&5\n+$as_echo_n \"checking whether the compiler is configured for setjmp/longjmp exceptions... \" >&6; }\n+if test \"${ac_cv_sjlj_exceptions+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n else\n-  cat > conftest.$ac_ext << EOF\n-#line 19498 \"configure\"\n-struct S { ~S(); };\n-void bar();\n-void foo()\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#ifdef __USING_SJLJ_EXCEPTIONS__\n+          this will fail\n+          #endif\n+int\n+main ()\n {\n-  S s;\n-  bar();\n+int i;\n+  ;\n+  return 0;\n }\n-EOF\n-old_CXXFLAGS=\"$CXXFLAGS\"\n-CXXFLAGS=-S\n-if { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_compile\\\"\"; } >&5\n-  (eval $ac_compile) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; then\n-  if grep _Unwind_SjLj_Resume conftest.s >/dev/null 2>&1 ; then\n-    enable_sjlj_exceptions=yes\n-  elif grep _Unwind_Resume conftest.s >/dev/null 2>&1 ; then\n-    enable_sjlj_exceptions=no\n-  elif grep __cxa_end_cleanup conftest.s >/dev/null 2>&1 ; then\n-    # ARM EH ABI.\n-    enable_sjlj_exceptions=no\n-  fi\n-fi\n-CXXFLAGS=\"$old_CXXFLAGS\"\n-rm -f conftest*\n-fi\n-\n-if test x$enable_sjlj_exceptions = xyes; then\n-\n-$as_echo \"#define SJLJ_EXCEPTIONS 1\" >>confdefs.h\n-\n-  ac_exception_model_name=sjlj\n-elif test x$enable_sjlj_exceptions = xno; then\n-  ac_exception_model_name=\"call frame\"\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_cv_sjlj_exceptions=no\n else\n-  as_fn_error \"unable to detect exception model\" \"$LINENO\" 5\n+  ac_cv_sjlj_exceptions=yes\n fi\n-ac_ext=c\n-ac_cpp='$CPP $CPPFLAGS'\n-ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n-ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n-ac_compiler_gnu=$ac_cv_c_compiler_gnu\n-\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_exception_model_name\" >&5\n-$as_echo \"$ac_exception_model_name\" >&6; }\n-\n-# If we are non using SJLJ exceptions, and this host does not have support\n-# for unwinding from a signal handler, enable checked dereferences and divides.\n-if test $can_unwind_signal = no && test $enable_sjlj_exceptions = no; then\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sjlj_exceptions\" >&5\n+$as_echo \"$ac_cv_sjlj_exceptions\" >&6; }\n+if test $ac_cv_sjlj_exceptions = no && test $can_unwind_signal = no; then\n   CHECKREFSPEC=-fcheck-references\n   DIVIDESPEC=-fuse-divide-subroutine\n   EXCEPTIONSPEC=\n@@ -24455,7 +24418,7 @@ case \"${host}\" in\n esac\n \n # If we're using sjlj exceptions, forget what we just learned.\n-if test \"$enable_sjlj_exceptions\" = yes; then\n+if test \"$ac_cv_sjlj_exceptions\" = yes; then\n    SIGNAL_HANDLER=include/default-signal.h\n    SIGNAL_HANDLER_AUX=\n fi"}]}