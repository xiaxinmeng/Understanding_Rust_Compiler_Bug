{"sha": "8de68eb37c7275735a8deb78f44fe6535b9462ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRlNjhlYjM3YzcyNzU3MzVhOGRlYjc4ZjQ0ZmU2NTM1Yjk0NjJlYw==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-06-04T12:13:23Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-07-08T13:34:23Z"}, "message": "[Ada] Remove Unknown_ functions\n\ngcc/ada/\n\n\t* einfo-utils.ads, einfo-utils.adb (Unknown_Alignment,\n\tUnknown_Component_Bit_Offset, Unknown_Component_Size,\n\tUnknown_Esize, Unknown_Normalized_First_Bit,\n\tUnknown_Normalized_Position, Unknown_Normalized_Position_Max,\n\tUnknown_RM_Size): Remove these functions.\n\t* exp_pakd.adb, exp_util.adb, fe.h, freeze.adb, layout.adb,\n\trepinfo.adb, sem_ch13.adb, sem_ch3.adb, sem_util.adb: Remove\n\tcalls to these functions; do \"not Known_...\" instead.\n\t* gcc-interface/decl.c, gcc-interface/trans.c\n\t(Unknown_Alignment, Unknown_Component_Size, Unknown_Esize,\n\tUnknown_RM_Size): Remove calls to these functions; do\n\t\"!Known_...\" instead.", "tree": {"sha": "7e9051ca7a37b9839d585862f2ae50ff47501f3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e9051ca7a37b9839d585862f2ae50ff47501f3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8de68eb37c7275735a8deb78f44fe6535b9462ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de68eb37c7275735a8deb78f44fe6535b9462ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8de68eb37c7275735a8deb78f44fe6535b9462ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de68eb37c7275735a8deb78f44fe6535b9462ec/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d743233ad29c03b5c65cfaf802d7c91f7fcc32c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d743233ad29c03b5c65cfaf802d7c91f7fcc32c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d743233ad29c03b5c65cfaf802d7c91f7fcc32c"}], "stats": {"total": 183, "additions": 50, "deletions": 133}, "files": [{"sha": "21d7bfb504e5fd66eae87ea0fce0932d149497fe", "filename": "gcc/ada/einfo-utils.adb", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Feinfo-utils.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Feinfo-utils.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo-utils.adb?ref=8de68eb37c7275735a8deb78f44fe6535b9462ec", "patch": "@@ -597,46 +597,6 @@ package body Einfo.Utils is\n         and then not Is_Generic_Type (E);\n    end Known_Static_RM_Size;\n \n-   function Unknown_Alignment                     (E : Entity_Id) return B is\n-   begin\n-      return not Known_Alignment (E);\n-   end Unknown_Alignment;\n-\n-   function Unknown_Component_Bit_Offset          (E : Entity_Id) return B is\n-   begin\n-      return not Known_Component_Bit_Offset (E);\n-   end Unknown_Component_Bit_Offset;\n-\n-   function Unknown_Component_Size                (E : Entity_Id) return B is\n-   begin\n-      return not Known_Component_Size (E);\n-   end Unknown_Component_Size;\n-\n-   function Unknown_Esize                         (E : Entity_Id) return B is\n-   begin\n-      return not Known_Esize (E);\n-   end Unknown_Esize;\n-\n-   function Unknown_Normalized_First_Bit          (E : Entity_Id) return B is\n-   begin\n-      return not Known_Normalized_First_Bit (E);\n-   end Unknown_Normalized_First_Bit;\n-\n-   function Unknown_Normalized_Position           (E : Entity_Id) return B is\n-   begin\n-      return not Known_Normalized_Position (E);\n-   end Unknown_Normalized_Position;\n-\n-   function Unknown_Normalized_Position_Max       (E : Entity_Id) return B is\n-   begin\n-      return not Known_Normalized_Position_Max (E);\n-   end Unknown_Normalized_Position_Max;\n-\n-   function Unknown_RM_Size                       (E : Entity_Id) return B is\n-   begin\n-      return not Known_RM_Size (E);\n-   end Unknown_RM_Size;\n-\n    --------------------\n    -- Address_Clause --\n    --------------------"}, {"sha": "dbf3ad6eb329f150104f26ee7db19871e5ff3aad", "filename": "gcc/ada/einfo-utils.ads", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Feinfo-utils.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Feinfo-utils.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo-utils.ads?ref=8de68eb37c7275735a8deb78f44fe6535b9462ec", "patch": "@@ -314,12 +314,11 @@ package Einfo.Utils is\n    -- Type Representation Attribute Predicates --\n    ----------------------------------------------\n \n-   --  These predicates test the setting of the indicated attribute. If the\n-   --  value has been set, then Known is True, and Unknown is False. If no\n-   --  value is set, then Known is False and Unknown is True. The Known_Static\n-   --  predicate is true only if the value is set (Known) and is set to a\n-   --  compile time known value. Note that in the case of Alignment and\n-   --  Normalized_First_Bit, dynamic values are not possible, so we do not\n+   --  These predicates test the setting of the indicated attribute. The\n+   --  Known predicate is True if and only if the value has been set. The\n+   --  Known_Static predicate is True only if the value is set (Known) and is\n+   --  set to a compile time known value. Note that in the case of Alignment\n+   --  and Normalized_First_Bit, dynamic values are not possible, so we do not\n    --  need a separate Known_Static calls in these cases. The not set (unknown)\n    --  values are as follows:\n \n@@ -364,15 +363,6 @@ package Einfo.Utils is\n    function Known_Static_Normalized_Position_Max  (E : Entity_Id) return B;\n    function Known_Static_RM_Size                  (E : Entity_Id) return B;\n \n-   function Unknown_Alignment                     (E : Entity_Id) return B;\n-   function Unknown_Component_Bit_Offset          (E : Entity_Id) return B;\n-   function Unknown_Component_Size                (E : Entity_Id) return B;\n-   function Unknown_Esize                         (E : Entity_Id) return B;\n-   function Unknown_Normalized_First_Bit          (E : Entity_Id) return B;\n-   function Unknown_Normalized_Position           (E : Entity_Id) return B;\n-   function Unknown_Normalized_Position_Max       (E : Entity_Id) return B;\n-   function Unknown_RM_Size                       (E : Entity_Id) return B;\n-\n    pragma Inline (Known_Alignment);\n    pragma Inline (Known_Component_Bit_Offset);\n    pragma Inline (Known_Component_Size);\n@@ -390,15 +380,6 @@ package Einfo.Utils is\n    pragma Inline (Known_Static_Normalized_Position_Max);\n    pragma Inline (Known_Static_RM_Size);\n \n-   pragma Inline (Unknown_Alignment);\n-   pragma Inline (Unknown_Component_Bit_Offset);\n-   pragma Inline (Unknown_Component_Size);\n-   pragma Inline (Unknown_Esize);\n-   pragma Inline (Unknown_Normalized_First_Bit);\n-   pragma Inline (Unknown_Normalized_Position);\n-   pragma Inline (Unknown_Normalized_Position_Max);\n-   pragma Inline (Unknown_RM_Size);\n-\n    ---------------------------------------------------\n    -- Access to Subprograms in Subprograms_For_Type --\n    ---------------------------------------------------"}, {"sha": "47919fc6e791bb002b395fc6bd83b4b647bcabcc", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=8de68eb37c7275735a8deb78f44fe6535b9462ec", "patch": "@@ -563,11 +563,11 @@ package body Exp_Pakd is\n          --  Do not reset RM_Size if already set, as happens in the case of\n          --  a modular type.\n \n-         if Unknown_Esize (PAT) then\n+         if not Known_Esize (PAT) then\n             Set_Esize (PAT, PASize);\n          end if;\n \n-         if Unknown_RM_Size (PAT) then\n+         if not Known_RM_Size (PAT) then\n             Set_RM_Size (PAT, PASize);\n          end if;\n "}, {"sha": "258404132315867e86b7e2ee9907e91e775e8173", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=8de68eb37c7275735a8deb78f44fe6535b9462ec", "patch": "@@ -9048,7 +9048,7 @@ package body Exp_Util is\n \n                if Target_Strict_Alignment\n                  and then Known_Alignment (Ptyp)\n-                 and then (Unknown_Alignment (Styp)\n+                 and then (not Known_Alignment (Styp)\n                             or else Alignment (Styp) > Alignment (Ptyp))\n                then\n                   return True;\n@@ -9072,7 +9072,7 @@ package body Exp_Util is\n                begin\n                   if Present (Component_Clause (Field))\n                     and then\n-                      (Unknown_Alignment (Styp)\n+                      (not Known_Alignment (Styp)\n                         or else\n                          (Component_Bit_Offset (Field) mod\n                            (System_Storage_Unit * Alignment (Styp))) /= 0)"}, {"sha": "d7ab361b715193751ac641063ef9fb37dd7f4ee4", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=8de68eb37c7275735a8deb78f44fe6535b9462ec", "patch": "@@ -636,30 +636,6 @@ B Known_Static_Normalized_Position_Max  (Entity_Id E);\n #define Known_Static_RM_Size einfo__utils__known_static_rm_size\n B Known_Static_RM_Size                  (Entity_Id E);\n \n-#define Unknown_Alignment einfo__utils__unknown_alignment\n-B Unknown_Alignment                     (Entity_Id E);\n-\n-#define Unknown_Component_Bit_Offset einfo__utils__unknown_component_bit_offset\n-B Unknown_Component_Bit_Offset          (Entity_Id E);\n-\n-#define Unknown_Component_Size einfo__utils__unknown_component_size\n-B Unknown_Component_Size                (Entity_Id E);\n-\n-#define Unknown_Esize einfo__utils__unknown_esize\n-B Unknown_Esize                         (Entity_Id E);\n-\n-#define Unknown_Normalized_First_Bit einfo__utils__unknown_normalized_first_bit\n-B Unknown_Normalized_First_Bit          (Entity_Id E);\n-\n-#define Unknown_Normalized_Position einfo__utils__unknown_normalized_position\n-B Unknown_Normalized_Position           (Entity_Id E);\n-\n-#define Unknown_Normalized_Position_Max einfo__utils__unknown_normalized_position_max\n-B Unknown_Normalized_Position_Max       (Entity_Id E);\n-\n-#define Unknown_RM_Size einfo__utils__unknown_rm_size\n-B Unknown_RM_Size                       (Entity_Id E);\n-\n #define Is_Discrete_Or_Fixed_Point_Type einfo__utils__is_discrete_or_fixed_point_type\n B Is_Discrete_Or_Fixed_Point_Type     (E Id);\n "}, {"sha": "12d10ee82bfce61f8c07584c2d4b5aebe9c0963a", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=8de68eb37c7275735a8deb78f44fe6535b9462ec", "patch": "@@ -857,7 +857,7 @@ package body Freeze is\n \n          --  Set size if not set already\n \n-         elsif Unknown_RM_Size (T) then\n+         elsif not Known_RM_Size (T) then\n             Set_RM_Size (T, S);\n          end if;\n       end Set_Small_Size;\n@@ -1043,7 +1043,7 @@ package body Freeze is\n                   if not Is_Constrained (T)\n                     and then\n                       No (Discriminant_Default_Value (First_Discriminant (T)))\n-                    and then Unknown_RM_Size (T)\n+                    and then not Known_RM_Size (T)\n                   then\n                      return False;\n                   end if;\n@@ -3480,7 +3480,7 @@ package body Freeze is\n          else\n             --  Acquire alignment from base type\n \n-            if Unknown_Alignment (Arr) then\n+            if not Known_Alignment (Arr) then\n                Set_Alignment (Arr, Alignment (Base_Type (Arr)));\n                Adjust_Esize_Alignment (Arr);\n             end if;\n@@ -8632,7 +8632,7 @@ package body Freeze is\n \n       --  If Esize of a subtype has not previously been set, set it now\n \n-      if Unknown_Esize (Typ) then\n+      if not Known_Esize (Typ) then\n          Atype := Ancestor_Subtype (Typ);\n \n          if Present (Atype) then\n@@ -9127,7 +9127,7 @@ package body Freeze is\n \n       --  Set Esize to calculated size if not set already\n \n-      if Unknown_Esize (Typ) then\n+      if not Known_Esize (Typ) then\n          Init_Esize (Typ, Actual_Size);\n       end if;\n "}, {"sha": "b09e20dc06e98c2f427f9a44c635e832b1e2739d", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=8de68eb37c7275735a8deb78f44fe6535b9462ec", "patch": "@@ -444,7 +444,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \n   /* The RM size must be specified for all discrete and fixed-point types.  */\n   gcc_assert (!(Is_In_Discrete_Or_Fixed_Point_Kind (kind)\n-\t\t&& Unknown_RM_Size (gnat_entity)));\n+\t\t&& !Known_RM_Size (gnat_entity)));\n \n   /* If we get here, it means we have not yet done anything with this entity.\n      If we are not defining it, it must be a type or an entity that is defined\n@@ -2324,7 +2324,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \n \t/* If Component_Size is not already specified, annotate it with the\n \t   size of the component.  */\n-\tif (Unknown_Component_Size (gnat_entity))\n+\tif (!Known_Component_Size (gnat_entity))\n \t  Set_Component_Size (gnat_entity,\n                               annotate_value (TYPE_SIZE (comp_type)));\n \n@@ -4369,7 +4369,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n       set_rm_size (RM_Size (gnat_entity), gnu_type, gnat_entity);\n \n       /* Back-annotate the alignment of the type if not already set.  */\n-      if (Unknown_Alignment (gnat_entity))\n+      if (!Known_Alignment (gnat_entity))\n \t{\n \t  unsigned int double_align, align;\n \t  bool is_capped_double, align_clause;\n@@ -4395,7 +4395,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t}\n \n       /* Likewise for the size, if any.  */\n-      if (Unknown_Esize (gnat_entity) && TYPE_SIZE (gnu_type))\n+      if (!Known_Esize (gnat_entity) && TYPE_SIZE (gnu_type))\n \t{\n \t  tree gnu_size = TYPE_SIZE (gnu_type);\n \n@@ -4428,7 +4428,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \n \t      /* If there is neither size clause nor representation clause, the\n \t\t sizes need to be adjusted.  */\n-\t      if (Unknown_RM_Size (gnat_entity)\n+\t      if (!Known_RM_Size (gnat_entity)\n \t\t  && !VOID_TYPE_P (gnu_type)\n \t\t  && (!TYPE_FIELDS (gnu_type)\n \t\t      || integer_zerop (bit_position (TYPE_FIELDS (gnu_type)))))\n@@ -4448,7 +4448,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t      Set_Esize (gnat_entity, annotate_value (gnu_size));\n \n \t      /* Tagged types are Strict_Alignment so RM_Size = Esize.  */\n-\t      if (Unknown_RM_Size (gnat_entity))\n+\t      if (!Known_RM_Size (gnat_entity))\n \t\tSet_RM_Size (gnat_entity, Esize (gnat_entity));\n \t    }\n \n@@ -4458,7 +4458,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t}\n \n       /* Likewise for the RM size, if any.  */\n-      if (Unknown_RM_Size (gnat_entity) && TYPE_SIZE (gnu_type))\n+      if (!Known_RM_Size (gnat_entity) && TYPE_SIZE (gnu_type))\n \tSet_RM_Size (gnat_entity, annotate_value (rm_size (gnu_type)));\n \n       /* If we are at global level, GCC applied variable_size to the size but\n@@ -4723,11 +4723,11 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t   && !TYPE_IS_DUMMY_P (TREE_TYPE (gnu_decl))\n \t   && Present (gnat_annotate_type))\n     {\n-      if (Unknown_Alignment (gnat_entity))\n+      if (!Known_Alignment (gnat_entity))\n \tSet_Alignment (gnat_entity, Alignment (gnat_annotate_type));\n-      if (Unknown_Esize (gnat_entity))\n+      if (!Known_Esize (gnat_entity))\n \tSet_Esize (gnat_entity, Esize (gnat_annotate_type));\n-      if (Unknown_RM_Size (gnat_entity))\n+      if (!Known_RM_Size (gnat_entity))\n \tSet_RM_Size (gnat_entity, RM_Size (gnat_annotate_type));\n     }\n \n@@ -8686,7 +8686,7 @@ annotate_object (Entity_Id gnat_entity, tree gnu_type, tree size, bool by_ref)\n \tgnu_type = TREE_TYPE (gnu_type);\n     }\n \n-  if (Unknown_Esize (gnat_entity))\n+  if (!Known_Esize (gnat_entity))\n     {\n       if (TREE_CODE (gnu_type) == RECORD_TYPE\n \t  && TYPE_CONTAINS_TEMPLATE_P (gnu_type))\n@@ -8698,7 +8698,7 @@ annotate_object (Entity_Id gnat_entity, tree gnu_type, tree size, bool by_ref)\n \tSet_Esize (gnat_entity, annotate_value (size));\n     }\n \n-  if (Unknown_Alignment (gnat_entity))\n+  if (!Known_Alignment (gnat_entity))\n     Set_Alignment (gnat_entity,\n \t\t   UI_From_Int (TYPE_ALIGN (gnu_type) / BITS_PER_UNIT));\n }"}, {"sha": "8f8bc700f91e46762e0d77a7731741173c31a57c", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=8de68eb37c7275735a8deb78f44fe6535b9462ec", "patch": "@@ -9273,13 +9273,13 @@ process_freeze_entity (Node_Id gnat_node)\n       gnu_new = gnat_to_gnu_entity (full_view, NULL_TREE, true);\n \n       /* Propagate back-annotations from full view to partial view.  */\n-      if (Unknown_Alignment (gnat_entity))\n+      if (!Known_Alignment (gnat_entity))\n \tSet_Alignment (gnat_entity, Alignment (full_view));\n \n-      if (Unknown_Esize (gnat_entity))\n+      if (!Known_Esize (gnat_entity))\n \tSet_Esize (gnat_entity, Esize (full_view));\n \n-      if (Unknown_RM_Size (gnat_entity))\n+      if (!Known_RM_Size (gnat_entity))\n \tSet_RM_Size (gnat_entity, RM_Size (full_view));\n \n       /* The above call may have defined this entity (the simplest example"}, {"sha": "f716488a59c53819dd8b67ff7722707dbf0f64f3", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=8de68eb37c7275735a8deb78f44fe6535b9462ec", "patch": "@@ -77,7 +77,7 @@ package body Layout is\n    begin\n       --  Nothing to do if size unknown\n \n-      if Unknown_Esize (E) then\n+      if not Known_Esize (E) then\n          return;\n       end if;\n \n@@ -119,7 +119,7 @@ package body Layout is\n       --  Now we have the size set, it must be a multiple of the alignment\n       --  nothing more we can do here if the alignment is unknown here.\n \n-      if Unknown_Alignment (E) then\n+      if not Known_Alignment (E) then\n          return;\n       end if;\n \n@@ -404,7 +404,7 @@ package body Layout is\n          --  it now to a copy of the Esize if the Esize is set.\n \n          else\n-            if Known_Esize (E) and then Unknown_RM_Size (E) then\n+            if Known_Esize (E) and then not Known_RM_Size (E) then\n                Set_RM_Size (E, Esize (E));\n             end if;\n          end if;\n@@ -425,15 +425,15 @@ package body Layout is\n                PAT : constant Entity_Id := Packed_Array_Impl_Type (E);\n \n             begin\n-               if Unknown_Esize (E) then\n+               if not Known_Esize (E) then\n                   Set_Esize     (E, Esize     (PAT));\n                end if;\n \n-               if Unknown_RM_Size (E) then\n+               if not Known_RM_Size (E) then\n                   Set_RM_Size   (E, RM_Size   (PAT));\n                end if;\n \n-               if Unknown_Alignment (E) then\n+               if not Known_Alignment (E) then\n                   Set_Alignment (E, Alignment (PAT));\n                end if;\n             end;\n@@ -446,7 +446,7 @@ package body Layout is\n          --  gave up because, in this case, the object size is not a multiple\n          --  of the alignment and, therefore, cannot be the component size.\n \n-         if Ekind (E) = E_Array_Type and then Unknown_Component_Size (E) then\n+         if Ekind (E) = E_Array_Type and then not Known_Component_Size (E) then\n             declare\n                CT : constant Entity_Id := Component_Type (E);\n \n@@ -478,7 +478,7 @@ package body Layout is\n \n          if Is_Array_Type (E)\n            and then not Is_Packed (E)\n-           and then Unknown_Alignment (E)\n+           and then not Known_Alignment (E)\n            and then Known_Alignment (Component_Type (E))\n            and then Known_Static_Component_Size (E)\n            and then Known_Static_Esize (Component_Type (E))\n@@ -529,10 +529,10 @@ package body Layout is\n                   --  explicitly by the user. In that case, also do not set\n                   --  Esize.\n \n-                  if Unknown_RM_Size (E) or else RM_Size (E) = Siz then\n+                  if not Known_RM_Size (E) or else RM_Size (E) = Siz then\n                      Set_RM_Size (E, Siz);\n \n-                     if Unknown_Esize (E) then\n+                     if not Known_Esize (E) then\n                         Siz := ((Siz + (Abits - 1)) / Abits) * Abits;\n                         Set_Esize (E, Siz);\n                      end if;\n@@ -576,7 +576,7 @@ package body Layout is\n          --  arrays when passed to subprogram parameters (see special test\n          --  in Exp_Ch6.Expand_Actuals).\n \n-         if not Is_Packed (E) and then Unknown_Alignment (E) then\n+         if not Is_Packed (E) and then not Known_Alignment (E) then\n             if Known_Static_Component_Size (E)\n               and then Component_Size (E) = 1\n             then\n@@ -748,7 +748,7 @@ package body Layout is\n \n          if Known_Static_Esize (E) then\n             Siz := Esize (E);\n-         elsif Unknown_Esize (E) and then Known_Static_RM_Size (E) then\n+         elsif not Known_Esize (E) and then Known_Static_RM_Size (E) then\n             Siz := RM_Size (E);\n          else\n             return;\n@@ -853,7 +853,7 @@ package body Layout is\n \n                         if Calign > Align\n                           and then\n-                            (Unknown_Esize (Comp)\n+                            (not Known_Esize (Comp)\n                               or else (Known_Static_Esize (Comp)\n                                         and then\n                                        Esize (Comp) = Calign * SSU))\n@@ -1020,7 +1020,7 @@ package body Layout is\n          --  If alignment is currently not set, then we can safely set it to\n          --  this new calculated value.\n \n-         if Unknown_Alignment (E) then\n+         if not Known_Alignment (E) then\n             Init_Alignment (E, A);\n \n          --  Cases where we have inherited an alignment"}, {"sha": "3cc1f939a321eab0b5f040a0b442537b74801648", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=8de68eb37c7275735a8deb78f44fe6535b9462ec", "patch": "@@ -1031,7 +1031,7 @@ package body Repinfo is\n                   --  whose position is not specified have starting normalized\n                   --  bit position of zero.\n \n-                  if Unknown_Normalized_First_Bit (Comp)\n+                  if not Known_Normalized_First_Bit (Comp)\n                     and then not Is_Packed (Ent)\n                   then\n                      Set_Normalized_First_Bit (Comp, Uint_0);\n@@ -1044,7 +1044,7 @@ package body Repinfo is\n \n                   --  Complete annotation in case not done\n \n-                  if Unknown_Normalized_First_Bit (Comp) then\n+                  if not Known_Normalized_First_Bit (Comp) then\n                      Set_Normalized_Position  (Comp, Npos);\n                      Set_Normalized_First_Bit (Comp, Fbit);\n                   end if;\n@@ -1202,7 +1202,7 @@ package body Repinfo is\n          --  No_Uint, not Uint_0. Really everyone should use No_Uint???\n \n          elsif List_Representation_Info < 3\n-           or else (Esize (Ent) /= Uint_0 and then Unknown_Esize (Ent))\n+           or else (Esize (Ent) /= Uint_0 and then not Known_Esize (Ent))\n          then\n             Write_Unknown_Val;\n "}, {"sha": "0359625465d44df885d3ca230110c71571147b8c", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=8de68eb37c7275735a8deb78f44fe6535b9462ec", "patch": "@@ -12370,7 +12370,7 @@ package body Sem_Ch13 is\n       --  length (it may for example be appropriate to round up the size\n       --  to some convenient boundary, based on alignment considerations, etc).\n \n-      if Unknown_RM_Size (Rectype)\n+      if not Known_RM_Size (Rectype)\n         and then Hbit + 1 <= 32\n         and then not Strict_Alignment (Rectype)\n       then"}, {"sha": "29664920f82d84f061c3af2e4b2cd014a926526b", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=8de68eb37c7275735a8deb78f44fe6535b9462ec", "patch": "@@ -16824,7 +16824,7 @@ package body Sem_Ch3 is\n       Set_Etype (Derived_Type, Implicit_Base);\n       Set_Size_Info         (Derived_Type, Parent_Type);\n \n-      if Unknown_RM_Size (Derived_Type) then\n+      if not Known_RM_Size (Derived_Type) then\n          Set_RM_Size (Derived_Type, RM_Size (Parent_Type));\n       end if;\n "}, {"sha": "9cd5d14b0c51debfe035f7cec4755271261b235a", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de68eb37c7275735a8deb78f44fe6535b9462ec/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=8de68eb37c7275735a8deb78f44fe6535b9462ec", "patch": "@@ -11825,7 +11825,7 @@ package body Sem_Util is\n             if Default = Known_Compatible\n               or else\n                 (Etype (Obj) = Etype (Expr)\n-                  and then (Unknown_Alignment (Obj)\n+                  and then (not Known_Alignment (Obj)\n                              or else\n                                Alignment (Obj) = Alignment (Etype (Obj))))\n             then\n@@ -12070,7 +12070,7 @@ package body Sem_Util is\n       --  do it when there is an address clause since we can do more if the\n       --  alignment is known.\n \n-      if Unknown_Alignment (Obj) then\n+      if not Known_Alignment (Obj) then\n          Set_Alignment (Obj, Alignment (Etype (Obj)));\n       end if;\n "}]}