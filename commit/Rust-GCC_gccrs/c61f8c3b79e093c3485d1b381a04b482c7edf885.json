{"sha": "c61f8c3b79e093c3485d1b381a04b482c7edf885", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYxZjhjM2I3OWUwOTNjMzQ4NWQxYjM4MWEwNGI0ODJjN2VkZjg4NQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-10-18T10:59:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-10-18T10:59:55Z"}, "message": "lto-streamer.h (enum LTO_tags): Add LTO_integer_cst.\n\n2012-10-18  Richard Guenther  <rguenther@suse.de>\n\n\t* lto-streamer.h (enum LTO_tags): Add LTO_integer_cst.\n\t* lto-streamer-in.c (lto_input_tree): Use it.\n\t* lto-streamer-out.c (lto_output_tree): Likewise, for\n\t!TREE_OVERFLOW integer constants only.\n\t* tree-streamer-in.c (unpack_ts_int_cst_value_fields): New function.\n\t(unpack_value_fields): Call it.\n\t(streamer_read_integer_cst): Simplify.\n\t* tree-streamer-out.c (pack_ts_int_cst_value_fields): New function.\n\t(streamer_pack_tree_bitfields): Call it.\n\t(streamer_write_integer_cst): Adjust.\n\nFrom-SVN: r192559", "tree": {"sha": "ca0e67dc21d055b07a4151f583dd237d2349044d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca0e67dc21d055b07a4151f583dd237d2349044d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c61f8c3b79e093c3485d1b381a04b482c7edf885", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61f8c3b79e093c3485d1b381a04b482c7edf885", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c61f8c3b79e093c3485d1b381a04b482c7edf885", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c61f8c3b79e093c3485d1b381a04b482c7edf885/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "595fefee5d18e9a08f2e7b1be156be4ace719a6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/595fefee5d18e9a08f2e7b1be156be4ace719a6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/595fefee5d18e9a08f2e7b1be156be4ace719a6f"}], "stats": {"total": 82, "additions": 56, "deletions": 26}, "files": [{"sha": "607205a2754b9b06268a84b9c2d493baa7b30273", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61f8c3b79e093c3485d1b381a04b482c7edf885/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61f8c3b79e093c3485d1b381a04b482c7edf885/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c61f8c3b79e093c3485d1b381a04b482c7edf885", "patch": "@@ -1,3 +1,16 @@\n+2012-10-18  Richard Guenther  <rguenther@suse.de>\n+\n+\t* lto-streamer.h (enum LTO_tags): Add LTO_integer_cst.\n+\t* lto-streamer-in.c (lto_input_tree): Use it.\n+\t* lto-streamer-out.c (lto_output_tree): Likewise, for\n+\t!TREE_OVERFLOW integer constants only.\n+\t* tree-streamer-in.c (unpack_ts_int_cst_value_fields): New function.\n+\t(unpack_value_fields): Call it.\n+\t(streamer_read_integer_cst): Simplify.\n+\t* tree-streamer-out.c (pack_ts_int_cst_value_fields): New function.\n+\t(streamer_pack_tree_bitfields): Call it.\n+\t(streamer_write_integer_cst): Adjust.\n+\n 2012-10-17  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n \t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n "}, {"sha": "15905f859a48ac5fa4826272933097422b18cb4f", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61f8c3b79e093c3485d1b381a04b482c7edf885/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61f8c3b79e093c3485d1b381a04b482c7edf885/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=c61f8c3b79e093c3485d1b381a04b482c7edf885", "patch": "@@ -1086,9 +1086,9 @@ lto_input_tree (struct lto_input_block *ib, struct data_in *data_in)\n \t the code and class.  */\n       result = streamer_get_builtin_tree (ib, data_in);\n     }\n-  else if (tag == lto_tree_code_to_tag (INTEGER_CST))\n+  else if (tag == LTO_integer_cst)\n     {\n-      /* For integer constants we only need the type and its hi/low\n+      /* For shared integer constants we only need the type and its hi/low\n \t words.  */\n       result = streamer_read_integer_cst (ib, data_in);\n     }"}, {"sha": "806045b52bf9ef97c00ceb97823e55a29a1a7012", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61f8c3b79e093c3485d1b381a04b482c7edf885/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61f8c3b79e093c3485d1b381a04b482c7edf885/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=c61f8c3b79e093c3485d1b381a04b482c7edf885", "patch": "@@ -372,9 +372,10 @@ lto_output_tree (struct output_block *ob, tree expr,\n       return;\n     }\n \n-  /* INTEGER_CST nodes are special because they need their original type\n+  /* Shared INTEGER_CST nodes are special because they need their original type\n      to be materialized by the reader (to implement TYPE_CACHED_VALUES).  */\n-  if (TREE_CODE (expr) == INTEGER_CST)\n+  if (TREE_CODE (expr) == INTEGER_CST\n+      && !TREE_OVERFLOW (expr))\n     {\n       streamer_write_integer_cst (ob, expr, ref_p);\n       return;"}, {"sha": "c9d13aea4dac79269c5f3ee1446a6cb9d1bc7265", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61f8c3b79e093c3485d1b381a04b482c7edf885/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61f8c3b79e093c3485d1b381a04b482c7edf885/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=c61f8c3b79e093c3485d1b381a04b482c7edf885", "patch": "@@ -175,6 +175,9 @@ enum LTO_tags\n   /* An MD or NORMAL builtin.  Only the code and class are streamed out.  */\n   LTO_builtin_decl,\n \n+  /* Shared INTEGER_CST node.  */\n+  LTO_integer_cst,\n+\n   /* Function body.  */\n   LTO_function,\n "}, {"sha": "f573659edd1a256738da9b0bafa10d0c51125c23", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61f8c3b79e093c3485d1b381a04b482c7edf885/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61f8c3b79e093c3485d1b381a04b482c7edf885/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=c61f8c3b79e093c3485d1b381a04b482c7edf885", "patch": "@@ -140,6 +140,17 @@ unpack_ts_base_value_fields (struct bitpack_d *bp, tree expr)\n }\n \n \n+/* Unpack all the non-pointer fields of the TS_INT_CST structure of\n+   expression EXPR from bitpack BP.  */\n+\n+static void\n+unpack_ts_int_cst_value_fields (struct bitpack_d *bp, tree expr)\n+{\n+  TREE_INT_CST_LOW (expr) = (unsigned) bp_unpack_var_len_unsigned (bp);\n+  TREE_INT_CST_HIGH (expr) = (unsigned) bp_unpack_var_len_int (bp);\n+}\n+\n+\n /* Unpack all the non-pointer fields of the TS_REAL_CST structure of\n    expression EXPR from bitpack BP.  */\n \n@@ -416,6 +427,9 @@ unpack_value_fields (struct data_in *data_in, struct bitpack_d *bp, tree expr)\n      the types and sizes of each of the fields being packed.  */\n   unpack_ts_base_value_fields (bp, expr);\n \n+  if (CODE_CONTAINS_STRUCT (code, TS_INT_CST))\n+    unpack_ts_int_cst_value_fields (bp, expr);\n+\n   if (CODE_CONTAINS_STRUCT (code, TS_REAL_CST))\n     unpack_ts_real_cst_value_fields (bp, expr);\n \n@@ -1012,25 +1026,10 @@ streamer_read_tree_body (struct lto_input_block *ib, struct data_in *data_in,\n tree\n streamer_read_integer_cst (struct lto_input_block *ib, struct data_in *data_in)\n {\n-  tree result, type;\n-  HOST_WIDE_INT low, high;\n-  bool overflow_p;\n-\n-  type = stream_read_tree (ib, data_in);\n-  overflow_p = (streamer_read_uchar (ib) != 0);\n-  low = streamer_read_uhwi (ib);\n-  high = streamer_read_uhwi (ib);\n-  result = build_int_cst_wide (type, low, high);\n-\n-  /* If the original constant had overflown, build a replica of RESULT to\n-     avoid modifying the shared constant returned by build_int_cst_wide.  */\n-  if (overflow_p)\n-    {\n-      result = copy_node (result);\n-      TREE_OVERFLOW (result) = 1;\n-    }\n-\n-  return result;\n+  tree type = stream_read_tree (ib, data_in);\n+  unsigned HOST_WIDE_INT low = streamer_read_uhwi (ib);\n+  HOST_WIDE_INT high = streamer_read_hwi (ib);\n+  return build_int_cst_wide (type, low, high);\n }\n \n "}, {"sha": "1f0eb55ec44101c54277dfbece46f16435aed47b", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c61f8c3b79e093c3485d1b381a04b482c7edf885/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c61f8c3b79e093c3485d1b381a04b482c7edf885/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=c61f8c3b79e093c3485d1b381a04b482c7edf885", "patch": "@@ -112,6 +112,17 @@ pack_ts_base_value_fields (struct bitpack_d *bp, tree expr)\n }\n \n \n+/* Pack all the non-pointer fields of the TS_INTEGER_CST structure of\n+   expression EXPR into bitpack BP.  */\n+\n+static void\n+pack_ts_int_cst_value_fields (struct bitpack_d *bp, tree expr)\n+{\n+  bp_pack_var_len_unsigned (bp, TREE_INT_CST_LOW (expr));\n+  bp_pack_var_len_int (bp, TREE_INT_CST_HIGH (expr));\n+}\n+\n+\n /* Pack all the non-pointer fields of the TS_REAL_CST structure of\n    expression EXPR into bitpack BP.  */\n \n@@ -373,6 +384,9 @@ streamer_pack_tree_bitfields (struct output_block *ob,\n      the types and sizes of each of the fields being packed.  */\n   pack_ts_base_value_fields (bp, expr);\n \n+  if (CODE_CONTAINS_STRUCT (code, TS_INT_CST))\n+    pack_ts_int_cst_value_fields (bp, expr);\n+\n   if (CODE_CONTAINS_STRUCT (code, TS_REAL_CST))\n     pack_ts_real_cst_value_fields (bp, expr);\n \n@@ -935,9 +949,9 @@ streamer_write_tree_header (struct output_block *ob, tree expr)\n void\n streamer_write_integer_cst (struct output_block *ob, tree cst, bool ref_p)\n {\n-  streamer_write_record_start (ob, lto_tree_code_to_tag (INTEGER_CST));\n+  gcc_assert (!TREE_OVERFLOW (cst));\n+  streamer_write_record_start (ob, LTO_integer_cst);\n   stream_write_tree (ob, TREE_TYPE (cst), ref_p);\n-  streamer_write_char_stream (ob->main_stream, TREE_OVERFLOW_P (cst));\n   streamer_write_uhwi (ob, TREE_INT_CST_LOW (cst));\n-  streamer_write_uhwi (ob, TREE_INT_CST_HIGH (cst));\n+  streamer_write_hwi (ob, TREE_INT_CST_HIGH (cst));\n }"}]}