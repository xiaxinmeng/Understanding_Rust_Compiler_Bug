{"sha": "6970fcc83eae5053ffc876d8f8fb75f9ccb4159c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk3MGZjYzgzZWFlNTA1M2ZmYzg3NmQ4ZjhmYjc1ZjljY2I0MTU5Yw==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2005-09-22T19:00:24Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2005-09-22T19:00:24Z"}, "message": "re PR fortran/23516 (IMAG is not a generic function when implicit none is declared)\n\nPR fortran/23516\n* intrinsic.c (add_function): Add IMAG, IMAGPART, and REALPART\n  intrinsics.\n* intrinsic.h: Prototypes for gfc_simplify_realpart and\n  gfc_resolve_realpart.\n* intrinsic.texi: Document intrinsic procedures.\n* simplify.c (gfc_simplify_realpart): New function.\n* irseolve.c (gfc_resolve_realpart): New function.\n\nFrom-SVN: r104537", "tree": {"sha": "0e209b98ef1ee23b4f92afccfcca714e10b4f7c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e209b98ef1ee23b4f92afccfcca714e10b4f7c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6970fcc83eae5053ffc876d8f8fb75f9ccb4159c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6970fcc83eae5053ffc876d8f8fb75f9ccb4159c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6970fcc83eae5053ffc876d8f8fb75f9ccb4159c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6970fcc83eae5053ffc876d8f8fb75f9ccb4159c/comments", "author": null, "committer": null, "parents": [{"sha": "e9931b5b67e02b934eb8d69c1728b831bde7d0a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9931b5b67e02b934eb8d69c1728b831bde7d0a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9931b5b67e02b934eb8d69c1728b831bde7d0a6"}], "stats": {"total": 115, "additions": 115, "deletions": 0}, "files": [{"sha": "e6c8da192ad5075bba91ee96d2475e5df5ca646e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6970fcc83eae5053ffc876d8f8fb75f9ccb4159c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6970fcc83eae5053ffc876d8f8fb75f9ccb4159c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6970fcc83eae5053ffc876d8f8fb75f9ccb4159c", "patch": "@@ -1,3 +1,14 @@\n+2005-09-22  Steven G. Kargl  <kargls@comcast.net>\n+\n+\tPR fortran/23516\n+\t* intrinsic.c (add_function): Add IMAG, IMAGPART, and REALPART\n+\tintrinsics.\n+\t* intrinsic.h: Prototypes for gfc_simplify_realpart and\n+\tgfc_resolve_realpart.\n+\t* intrinsic.texi: Document intrinsic procedures.\n+\t* simplify.c (gfc_simplify_realpart): New function.\n+\t* irseolve.c (gfc_resolve_realpart): New function.\n+\n 2005-09-21  Erik Edelmann  <erik.edelmann@iki.fi>\n \n \tPR fortran/19929"}, {"sha": "be23556b39ec86ef48fbcdb2f649dc8c9230982f", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6970fcc83eae5053ffc876d8f8fb75f9ccb4159c/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6970fcc83eae5053ffc876d8f8fb75f9ccb4159c/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=6970fcc83eae5053ffc876d8f8fb75f9ccb4159c", "patch": "@@ -949,10 +949,14 @@ add_functions (void)\n \t     gfc_check_fn_c, gfc_simplify_aimag, gfc_resolve_aimag,\n \t     z, BT_COMPLEX, dz, REQUIRED);\n \n+  make_alias (\"imag\", GFC_STD_GNU);\n+  make_alias (\"imagpart\", GFC_STD_GNU);\n+\n   add_sym_1 (\"dimag\", 1, 1, BT_REAL, dd, GFC_STD_GNU, \n \t     NULL, gfc_simplify_aimag, gfc_resolve_aimag, \n \t     z, BT_COMPLEX, dd, REQUIRED);\n \n+\n   make_generic (\"aimag\", GFC_ISYM_AIMAG, GFC_STD_F77);\n \n   add_sym_2 (\"aint\", 1, 1, BT_REAL, dr, GFC_STD_F77,\n@@ -1813,6 +1817,11 @@ add_functions (void)\n \t     gfc_check_real, gfc_simplify_real, gfc_resolve_real,\n \t     a, BT_UNKNOWN, dr, REQUIRED, kind, BT_INTEGER, di, OPTIONAL);\n \n+  /* This provides compatibility with g77.  */\n+  add_sym_1 (\"realpart\", 1, 0, BT_REAL, dr, GFC_STD_GNU,\n+\t     gfc_check_fn_c, gfc_simplify_realpart, gfc_resolve_realpart,\n+\t     a, BT_UNKNOWN, dr, REQUIRED);\n+\n   add_sym_1 (\"float\", 1, 0, BT_REAL, dr, GFC_STD_F77,\n \t     NULL, gfc_simplify_float, NULL,\n \t     a, BT_INTEGER, di, REQUIRED);"}, {"sha": "c405ccedba2f3750101f0eca6f33642c3dcdbd21", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6970fcc83eae5053ffc876d8f8fb75f9ccb4159c/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6970fcc83eae5053ffc876d8f8fb75f9ccb4159c/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=6970fcc83eae5053ffc876d8f8fb75f9ccb4159c", "patch": "@@ -233,6 +233,7 @@ gfc_expr *gfc_simplify_precision (gfc_expr *);\n gfc_expr *gfc_simplify_radix (gfc_expr *);\n gfc_expr *gfc_simplify_range (gfc_expr *);\n gfc_expr *gfc_simplify_real (gfc_expr *, gfc_expr *);\n+gfc_expr *gfc_simplify_realpart (gfc_expr *);\n gfc_expr *gfc_simplify_repeat (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_reshape (gfc_expr *, gfc_expr *, gfc_expr *,\n \t\t\t\tgfc_expr *);\n@@ -345,6 +346,7 @@ void gfc_resolve_not (gfc_expr *, gfc_expr *);\n void gfc_resolve_pack (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_product (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_real (gfc_expr *, gfc_expr *, gfc_expr *);\n+void gfc_resolve_realpart (gfc_expr *, gfc_expr *);\n void gfc_resolve_rename (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_repeat (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_reshape (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *,"}, {"sha": "2043c282e8eea5a6fdd449462b2380b1c8707b2f", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6970fcc83eae5053ffc876d8f8fb75f9ccb4159c/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6970fcc83eae5053ffc876d8f8fb75f9ccb4159c/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=6970fcc83eae5053ffc876d8f8fb75f9ccb4159c", "patch": "@@ -89,6 +89,7 @@ and editing.  All contributions and corrections are strongly encouraged.\n * @code{FNUM}:          FNUM,      File number function\n * @code{LOG}:           LOG,       Logarithm function\n * @code{LOG10}:         LOG10,     Base 10 logarithm function \n+* @code{REAL}:          REAL,      Convert to real type \n * @code{SQRT}:          SQRT,      Square-root function\n * @code{SIN}:           SIN,       Sine function\n * @code{SINH}:          SINH,      Hyperbolic sine function\n@@ -402,11 +403,16 @@ end program test_adjustr\n @section @code{AIMAG} --- Imaginary part of complex number  \n @findex @code{AIMAG} intrinsic\n @findex @code{DIMAG} intrinsic\n+@findex @code{IMAG} intrinsic\n+@findex @code{IMAGPART} intrinsic\n @cindex Imaginary part\n \n @table @asis\n @item @emph{Description}:\n @code{AIMAG(Z)} yields the imaginary part of complex argument @code{Z}.\n+The @code{IMAG(Z)} and @code{IMAGPART(Z)} intrinsic functions are provided\n+for compatibility with @command{g77}, and their use in new code is \n+strongly discouraged.\n \n @item @emph{Option}:\n f95, gnu\n@@ -441,6 +447,8 @@ end program test_aimag\n @multitable @columnfractions .24 .24 .24 .24\n @item Name            @tab Argument            @tab Return type       @tab Option\n @item @code{DIMAG(Z)} @tab @code{COMPLEX(8) Z} @tab @code{REAL(8)}    @tab f95, gnu\n+@item @code{IMAG(Z)}  @tab @code{COMPLEX(*) Z} @tab @code{REAL(*)}    @tab gnu\n+@item @code{IMAGPART(Z)} @tab @code{COMPLEX(*) Z} @tab @code{REAL(*)} @tab gnu\n @end multitable\n @end table\n \n@@ -2821,6 +2829,64 @@ end program test_log10\n @end table\n \n \n+@node REAL\n+@section @code{REAL} --- Convert to real type \n+@findex @code{REAL} intrinsic\n+@findex @code{REALPART} intrinsic\n+@cindex true values\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{REAL(X [, KIND])} converts its argument @var{X} to a real type.  The\n+@code{REALPART(X)} function is provided for compatibility with @command{g77},\n+and its use is strongly discouraged.\n+\n+@item @emph{Option}:\n+f95, gnu\n+\n+@item @emph{Class}:\n+transformational function\n+\n+@item @emph{Syntax}:\n+@multitable @columnfractions .30 .80\n+@item @code{X = REAL(X)}\n+@item @code{X = REAL(X, KIND)}\n+@item @code{X = REALPART(Z)}\n+@end multitable\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .80\n+@item @var{X} @tab shall be @code{INTEGER(*)}, @code{REAL(*)}, or  \n+@code{COMPLEX(*)}.\n+@item @var{KIND}  @tab (Optional) @var{KIND} shall be a scalar integer.\n+@end multitable\n+\n+@item @emph{Return value}:\n+These functions return the a @code{REAL(*)} variable or array under\n+the following rules: \n+\n+@table @asis\n+@item (A)\n+@code{REAL(X)} is converted to a default real type if @var{X} is an \n+integer or real variable.\n+@item (B)\n+@code{REAL(X)} is converted to a real type with the kind type parameter\n+of @var{X} if @var{X} is a complex variable.\n+@item (C)\n+@code{REAL(X, KIND)} is converted to a real type with kind type\n+parameter @var{KIND} if @var{X} is a complex, integer, or real\n+variable.\n+@end table\n+\n+@item @emph{Example}:\n+@smallexample\n+program test_real\n+  complex :: x = (1.0, 2.0)\n+  print *, real(x), real(x,8), realpart(x)\n+  end program test_real\n+@end smallexample\n+@end table\n+\n \n @node SIN\n @section @code{SIN} --- Sine function "}, {"sha": "dda6acbf5df26abe70bc1cdada53ad91e13c8d4d", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6970fcc83eae5053ffc876d8f8fb75f9ccb4159c/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6970fcc83eae5053ffc876d8f8fb75f9ccb4159c/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=6970fcc83eae5053ffc876d8f8fb75f9ccb4159c", "patch": "@@ -1151,6 +1151,17 @@ gfc_resolve_real (gfc_expr * f, gfc_expr * a, gfc_expr * kind)\n }\n \n \n+void\n+gfc_resolve_realpart (gfc_expr * f, gfc_expr * a)\n+{\n+  f->ts.type = BT_REAL;\n+  f->ts.kind = a->ts.kind;\n+  f->value.function.name =\n+    gfc_get_string (\"__real_%d_%c%d\", f->ts.kind,\n+\t\t    gfc_type_letter (a->ts.type), a->ts.kind);\n+}\n+\n+\n void\n gfc_resolve_rename (gfc_expr * f, gfc_expr * p1 ATTRIBUTE_UNUSED,\n \t            gfc_expr * p2 ATTRIBUTE_UNUSED)"}, {"sha": "7c9a6dcf205e0e854e6862bd5e252bfc1d9a3e14", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6970fcc83eae5053ffc876d8f8fb75f9ccb4159c/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6970fcc83eae5053ffc876d8f8fb75f9ccb4159c/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=6970fcc83eae5053ffc876d8f8fb75f9ccb4159c", "patch": "@@ -372,6 +372,7 @@ gfc_simplify_adjustr (gfc_expr * e)\n gfc_expr *\n gfc_simplify_aimag (gfc_expr * e)\n {\n+\n   gfc_expr *result;\n \n   if (e->expr_type != EXPR_CONSTANT)\n@@ -2591,6 +2592,21 @@ gfc_simplify_real (gfc_expr * e, gfc_expr * k)\n   return range_check (result, \"REAL\");\n }\n \n+\n+gfc_expr *\n+gfc_simplify_realpart (gfc_expr * e)\n+{\n+  gfc_expr *result;\n+\n+  if (e->expr_type != EXPR_CONSTANT)\n+    return NULL;\n+\n+  result = gfc_constant_result (BT_REAL, e->ts.kind, &e->where);\n+  mpfr_set (result->value.real, e->value.complex.r, GFC_RND_MODE);\n+\n+  return range_check (result, \"REALPART\");\n+}\n+\n gfc_expr *\n gfc_simplify_repeat (gfc_expr * e, gfc_expr * n)\n {"}]}