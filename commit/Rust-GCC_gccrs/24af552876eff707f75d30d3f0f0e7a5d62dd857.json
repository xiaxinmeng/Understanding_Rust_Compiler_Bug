{"sha": "24af552876eff707f75d30d3f0f0e7a5d62dd857", "node_id": "C_kwDOANBUbNoAKDI0YWY1NTI4NzZlZmY3MDdmNzVkMzBkM2YwZjBlN2E1ZDYyZGQ4NTc", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2023-04-11T21:29:03Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2023-04-12T13:07:20Z"}, "message": "Don't use ANY PHI equivalences in range-on-entry.\n\nPR 108139 dissallows PHI equivalencies in the on-entry calculator, but\nit was only checking if the equivlaence was a PHI.  In this case, NAME\nitself is a PHI with an equivlaence caused by an undefined value, so we\nalso need to check that case.  Unfortunately this un-fixes 101912.\n\n\tPR tree-optimization/109462\n\tgcc/\n\t* gimple-range-cache.cc (ranger_cache::fill_block_cache): Don't\n\tcheck for equivalences if NAME is a phi node.\n\n\tgcc/testsuite/\n\t* gcc.dg/uninit-pr101912.c: XFAIL the warning.", "tree": {"sha": "4539e782839b1fb4302ff3854e36fc2ec0d60477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4539e782839b1fb4302ff3854e36fc2ec0d60477"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24af552876eff707f75d30d3f0f0e7a5d62dd857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24af552876eff707f75d30d3f0f0e7a5d62dd857", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24af552876eff707f75d30d3f0f0e7a5d62dd857", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24af552876eff707f75d30d3f0f0e7a5d62dd857/comments", "author": null, "committer": null, "parents": [{"sha": "9f10b4957ca6058d1a801c5e4bfe11bf159da809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f10b4957ca6058d1a801c5e4bfe11bf159da809", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f10b4957ca6058d1a801c5e4bfe11bf159da809"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "3b52f1e734ccb587f96a655f94a354ee384eedd1", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24af552876eff707f75d30d3f0f0e7a5d62dd857/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24af552876eff707f75d30d3f0f0e7a5d62dd857/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=24af552876eff707f75d30d3f0f0e7a5d62dd857", "patch": "@@ -1218,7 +1218,9 @@ ranger_cache::fill_block_cache (tree name, basic_block bb, basic_block def_bb)\n \t  fprintf (dump_file, \"\\n\");\n \t}\n       // See if any equivalences can refine it.\n-      if (m_oracle)\n+      // PR 109462, like 108139 below, a one way equivalence introduced\n+      // by a PHI node can also be through the definition side.  Disallow it.\n+      if (m_oracle && !is_a<gphi *> (SSA_NAME_DEF_STMT (name)))\n \t{\n \t  tree equiv_name;\n \t  relation_kind rel;"}, {"sha": "62cd2a0c73e1fc42aea59e773d877e52204ad917", "filename": "gcc/testsuite/gcc.dg/uninit-pr101912.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24af552876eff707f75d30d3f0f0e7a5d62dd857/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr101912.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24af552876eff707f75d30d3f0f0e7a5d62dd857/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr101912.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr101912.c?ref=24af552876eff707f75d30d3f0f0e7a5d62dd857", "patch": "@@ -11,7 +11,7 @@ tzloadbody (void)\n   for (int i = 0; i < n; i++)\n     {\n       int corr = getint ();\n-      if (corr < 1 || (corr == 1 && !(leapcnt == 0 || (prevcorr < corr ? corr == prevcorr + 1 : (corr == prevcorr || corr == prevcorr - 1))))) /* { dg-bogus \"uninitialized\" } */\n+      if (corr < 1 || (corr == 1 && !(leapcnt == 0 || (prevcorr < corr ? corr == prevcorr + 1 : (corr == prevcorr || corr == prevcorr - 1))))) /* { dg-bogus \"uninitialized\" \"pr101912\" { xfail *-*-* } } */\n \treturn -1;\n \n       prevcorr = corr;"}]}