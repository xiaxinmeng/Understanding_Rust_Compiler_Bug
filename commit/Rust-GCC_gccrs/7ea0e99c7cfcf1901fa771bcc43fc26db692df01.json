{"sha": "7ea0e99c7cfcf1901fa771bcc43fc26db692df01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VhMGU5OWM3Y2ZjZjE5MDFmYTc3MWJjYzQzZmMyNmRiNjkyZGYwMQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-13T18:04:22Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-13T18:04:22Z"}, "message": "1750a-protos.h: New file.\n\n\t* 1750a-protos.h: New file.\n\n\t* 1750a.c: Include tm_p.h.  Add static prototypes.  Fix compile\n\ttime warnings.\n\n\t* 1750a.h: Move prototypes to 1750a-protos.h.  Fix compile time\n\twarnings.\n\n\t* 1750a.md: Likewise.\n\nFrom-SVN: r31394", "tree": {"sha": "b17be2d9d69b949818b2e4939a9bbd1a273188a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b17be2d9d69b949818b2e4939a9bbd1a273188a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ea0e99c7cfcf1901fa771bcc43fc26db692df01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ea0e99c7cfcf1901fa771bcc43fc26db692df01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ea0e99c7cfcf1901fa771bcc43fc26db692df01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ea0e99c7cfcf1901fa771bcc43fc26db692df01/comments", "author": null, "committer": null, "parents": [{"sha": "ff82ca233eb0b833fc48a073332b3c03c806c807", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff82ca233eb0b833fc48a073332b3c03c806c807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff82ca233eb0b833fc48a073332b3c03c806c807"}], "stats": {"total": 157, "additions": 112, "deletions": 45}, "files": [{"sha": "ab29a6f0a73aaf3939036d90329df4bab2b20bd8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea0e99c7cfcf1901fa771bcc43fc26db692df01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea0e99c7cfcf1901fa771bcc43fc26db692df01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ea0e99c7cfcf1901fa771bcc43fc26db692df01", "patch": "@@ -1,3 +1,15 @@\n+2000-01-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* 1750a-protos.h: New file.\n+\n+\t* 1750a.c: Include tm_p.h.  Add static prototypes.  Fix compile\n+\ttime warnings.\n+\t\n+\t* 1750a.h: Move prototypes to 1750a-protos.h.  Fix compile time\n+\twarnings.\n+\t\n+\t* 1750a.md: Likewise.\n+\n 2000-01-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* a29k-protos.h: New file."}, {"sha": "604f97ff1be1f4bb4afc8c513c29ecb3eb906291", "filename": "gcc/config/1750a/1750a-protos.h", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea0e99c7cfcf1901fa771bcc43fc26db692df01/gcc%2Fconfig%2F1750a%2F1750a-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea0e99c7cfcf1901fa771bcc43fc26db692df01/gcc%2Fconfig%2F1750a%2F1750a-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a-protos.h?ref=7ea0e99c7cfcf1901fa771bcc43fc26db692df01", "patch": "@@ -0,0 +1,45 @@\n+/* Definitions of target machine for GNU compiler.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+   Contributed by O.M.Kellogg, DASA (oliver.kellogg@space.otn.dasa.de)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 1, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifdef RTX_CODE\n+#ifdef TREE_CODE\n+extern struct rtx_def *function_arg PARAMS ((int, enum machine_mode, tree, int));\n+#endif /* TREE_CODE */\n+extern const char *movcnt_regno_adjust PARAMS ((rtx *));\n+extern const char *mod_regno_adjust PARAMS ((const char *, rtx *));\n+extern void notice_update_cc PARAMS ((rtx));\n+extern double get_double PARAMS ((rtx));\n+extern int memop_valid PARAMS ((rtx));\n+extern int mov_memory_operand PARAMS ((rtx, enum machine_mode));\n+extern int small_nonneg_const PARAMS ((rtx, enum machine_mode));\n+extern int zero_operand PARAMS ((rtx, enum machine_mode));\n+extern int b_mode_operand PARAMS ((rtx));\n+extern int unsigned_comparison_operator PARAMS ((rtx));\n+extern int next_cc_user_is_unsigned PARAMS ((rtx));\n+extern void print_operand PARAMS ((FILE *, rtx, int));\n+extern void print_operand_address PARAMS ((FILE *, rtx));\n+#endif /* RTX_CODE */\n+\n+extern char *float_label PARAMS ((int, double));\n+extern const char *branch_or_jump PARAMS ((const char *, int));\n+extern int find_jmplbl PARAMS ((int));\n+extern int one_bit_set_p PARAMS ((int));\n+extern void check_section PARAMS ((enum section));"}, {"sha": "27e0444e5a0a72ca48c3ef92bf7884e21cb95859", "filename": "gcc/config/1750a/1750a.c", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea0e99c7cfcf1901fa771bcc43fc26db692df01/gcc%2Fconfig%2F1750a%2F1750a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea0e99c7cfcf1901fa771bcc43fc26db692df01/gcc%2Fconfig%2F1750a%2F1750a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.c?ref=7ea0e99c7cfcf1901fa771bcc43fc26db692df01", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for MIL-STD-1750.\n-   Copyright (C) 1994, 1995, 1996, 1997, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 95-99, 2000 Free Software Foundation, Inc.\n    Contributed by O.M.Kellogg, DASA (kellogg@space.otn.dasa.de)\n \n This file is part of GNU CC.\n@@ -30,17 +30,21 @@ Boston, MA 02111-1307, USA.  */\n #include \"conditions.h\"\n #include \"real.h\"\n #include \"regs.h\"\n+#include \"output.h\"\n+#include \"tm_p.h\"\n \n struct datalabel_array datalbl[DATALBL_ARRSIZ];\n int datalbl_ndx = -1;\n struct jumplabel_array jmplbl[JMPLBL_ARRSIZ];\n int jmplbl_ndx = -1;\n int label_pending = 0, program_counter = 0;\n enum section current_section = Normal;\n-char *sectname[4] =\n+const char *const sectname[4] =\n {\"Init\", \"Normal\", \"Konst\", \"Static\"};\n \n-int\n+static int which_bit PARAMS ((int));\n+\n+void\n notice_update_cc (exp)\n      rtx exp;\n {\n@@ -106,7 +110,7 @@ function_arg (cum, mode, type, named)\n      int cum;\n      enum machine_mode mode;\n      tree type;\n-     int named;\n+     int named ATTRIBUTE_UNUSED;\n {\n   int size;\n \n@@ -141,16 +145,15 @@ get_double (x)\n \n char *\n float_label (code, value)\n-     char code;\n+     int code;\n      double value;\n {\n-  int i = 1;\n   static char label[32];\n   char *p;\n \n   label[0] = code;\n   p = label + 1;\n-  sprintf (p, \"%lf\", value);\n+  sprintf (p, \"%f\", value);\n   while (*p)\n     {\n       *p = (*p == '+') ? 'p' :\n@@ -161,7 +164,7 @@ float_label (code, value)\n }\n \n \n-char *\n+const char *\n movcnt_regno_adjust (op)\n      rtx *op;\n {\n@@ -192,13 +195,13 @@ movcnt_regno_adjust (op)\n   return outstr;\n }\n \n-char *\n+const char *\n mod_regno_adjust (instr, op)\n-     char *instr;\n+     const char *instr;\n      rtx *op;\n {\n   static char outstr[40];\n-  char *r = (!strncmp (instr, \"dvr\", 3) ? \"r\" : \"\");\n+  const char *r = (!strncmp (instr, \"dvr\", 3) ? \"r\" : \"\");\n   int modregno_gcc = REGNO (op[3]), modregno_1750 = REGNO (op[0]) + 1;\n \n   if (modregno_gcc == modregno_1750\n@@ -263,7 +266,7 @@ memop_valid (op)\n int\n mov_memory_operand (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   return (GET_CODE (op) == MEM && GET_CODE (XEXP (op, 0)) == REG);\n }\n@@ -272,7 +275,7 @@ mov_memory_operand (op, mode)\n int\n small_nonneg_const (op, mode)\n      rtx op;\n-     enum machine_mode mode;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (op) == CONST_INT && INTVAL (op) >= 0 && INTVAL (op) <= 15)\n     return 1;\n@@ -337,9 +340,9 @@ find_jmplbl (labelnum)\n   return -1;\n }\n \n-char *\n+const char *\n branch_or_jump (condition, targetlabel_number)\n-     char *condition;\n+     const char *condition;\n      int targetlabel_number;\n {\n   static char buf[30];\n@@ -422,6 +425,7 @@ static int addr_inc;\n    'w' for int - 16\n */\n \n+void\n print_operand (file, x, letter)\n      FILE *file;\n      rtx x;\n@@ -474,7 +478,7 @@ print_operand (file, x, letter)\n /*    {\n \tdouble value = get_double (x);\n \tchar fltstr[32];\n-\tsprintf (fltstr, \"%lf\", value);\n+\tsprintf (fltstr, \"%f\", value);\n \n \tif (letter == 'D' || letter == 'E')\n \t  {\n@@ -508,7 +512,7 @@ print_operand (file, x, letter)\n \t    if (!found)\n \t      {\n \t\tfprintf (stderr,\n-\t\t   \"float value %lfnot found upon label reference\\n\", value);\n+\t\t   \"float value %f not found upon label reference\\n\", value);\n \t\tstrcpy (datalbl[i = ++datalbl_ndx].value, fltstr);\n \t\tdatalbl[i].name = float_label (letter, value);\n \t\tdatalbl[i].size = (letter == 'G') ? 3 : 2;\n@@ -523,29 +527,31 @@ print_operand (file, x, letter)\n \t  fprintf (file, \" %s  ;P_O cst_dbl \", fltstr);\n       }\n  */\n-      fprintf (file, \"%lf\", get_double (x));\n+      fprintf (file, \"%f\", get_double (x));\n       break;\n \n     case CONST_INT:\n       if (letter == 'J')\n-\tfprintf (file, \"%d\", -INTVAL (x));\n+\tfprintf (file, HOST_WIDE_INT_PRINT_DEC, -INTVAL (x));\n       else if (letter == 'b')\n         fprintf (file, \"%d\", which_bit (INTVAL (x)));\n       else if (letter == 'B')\n         fprintf (file, \"%d\", which_bit (~INTVAL (x)));\n       else if (letter == 'w')\n-\tfprintf (file, \"%d\", INTVAL (x) - 16);\n+\tfprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (x) - 16);\n       else\n-\tfprintf (file, \"%d\", INTVAL (x));\n+\tfprintf (file, HOST_WIDE_INT_PRINT_DEC, INTVAL (x));\n       break;\n \n     case CODE_LABEL:\n       fprintf (file, \"L%d\", XINT (x, 3));\n       break;\n \n     case CALL:\n-      fprintf (file, \"CALL nargs=%d, func is either '%s' or '%s'\",\n-       XEXP (x, 1), XSTR (XEXP (XEXP (x, 0), 1), 0), XSTR (XEXP (x, 0), 1));\n+      fprintf (file, \"CALL nargs=\");\n+      fprintf (file, HOST_PTR_PRINTF, XEXP (x, 1));\n+      fprintf (file, \", func is either '%s' or '%s'\",\n+\t       XSTR (XEXP (XEXP (x, 0), 1), 0), XSTR (XEXP (x, 0), 1));\n       break;\n \n     case PLUS:\n@@ -586,6 +592,7 @@ print_operand (file, x, letter)\n   addr_inc = 0;\n }\n \n+void\n print_operand_address (file, addr)\n      FILE *file;\n      rtx addr;\n@@ -716,7 +723,7 @@ one_bit_set_p (x)\n  * Return the number of the least significant bit set, using the  same\n  * convention for bit numbering as in the MIL-STD-1750 sb instruction.\n  */\n-int\n+static int\n which_bit (x)\n      int x;\n {"}, {"sha": "882bd68c2c13de673b42c54002ae6d5e2af46184", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea0e99c7cfcf1901fa771bcc43fc26db692df01/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea0e99c7cfcf1901fa771bcc43fc26db692df01/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=7ea0e99c7cfcf1901fa771bcc43fc26db692df01", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler.\n-   Copyright (C) 1994, 95-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 95-99, 2000 Free Software Foundation, Inc.\n    Contributed by O.M.Kellogg, DASA (oliver.kellogg@space.otn.dasa.de)\n \n This file is part of GNU CC.\n@@ -65,12 +65,7 @@ extern struct datalabel_array datalbl[];\n extern struct jumplabel_array jmplbl[];\n extern int datalbl_ndx, jmplbl_ndx, label_pending, program_counter;\n extern enum section current_section;\n-extern char *sectname[4];\n-extern char *float_label();\n-extern struct rtx_def *function_arg ();\n-extern char *movcnt_regno_adjust ();\n-extern char *mod_regno_adjust ();\n-extern char *branch_or_jump ();\n+extern const char *const sectname[4];\n #endif\n /*--------------------------------------------------------------------*/\n \n@@ -329,7 +324,7 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n    1750 \"index\" (remember, in the *GCC* sense!) regs are R12 through R15. \n    The only 1750 register not usable as BASE_REG is R0. */\n \n-#define REG_CLASS_CONTENTS  {0, 0x0004, 0x0003, 0xf000, 0xfffe, 0xffff}\n+#define REG_CLASS_CONTENTS  { {0}, {0x0004}, {0x0003}, {0xf000}, {0xfffe}, {0xffff} }\n \n /* The same information, inverted:\n    Return the class number of the smallest class containing\n@@ -725,11 +720,11 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n    */\n \n #define REGNO_OK_FOR_BASE_P(REGNO)  \\\n- ((REGNO) > 0 && (REGNO) <= 15 ||   \\\n-  reg_renumber[REGNO] > 0 && reg_renumber[REGNO] <= 15)\n+ (((REGNO) > 0 && (REGNO) <= 15) ||   \\\n+  (reg_renumber[REGNO] > 0 && reg_renumber[REGNO] <= 15))\n #define REGNO_OK_FOR_INDEX_P(REGNO) \\\n- ((REGNO) >= 12 && (REGNO) <= 15 || \\\n-  reg_renumber[REGNO] >= 12 && reg_renumber[REGNO] <= 15)\n+ (((REGNO) >= 12 && (REGNO) <= 15) || \\\n+  (reg_renumber[REGNO] >= 12 && reg_renumber[REGNO] <= 15))\n \n /* Now macros that check whether X is a register and also,\n    strictly, whether it is in a specified class.  */\n@@ -945,7 +940,7 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n    else\t\t\t\t\t\t\t\t\t\\\n \tp = main_input_filename;\t\t\t\t\t\\\n    strcpy(name,p);\t\t\t\t\t\t\t\\\n-   if (p = (char *)strchr(name,'.'))\t\t\t\t\t\\\n+   if ((p = (char *)strchr(name,'.')))\t\t\t\t\t\\\n \t*p = '\\0';\t\t\t\t\t\t\t\\\n    fprintf(FILE,\"\\tname %s\\n\",name); \t\t\t\t\t\\\n    fprintf(FILE,\"\\tnolist\\n\\tinclude \\\"ms1750.inc\\\"\\n\\tlist\\n\\n\");\t\\\n@@ -1002,7 +997,7 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n \tfprintf(asm_out_file,\"\\tkonst\\n\");\t\t\t\\\n \tcurrent_section = Konst;\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n-    check_section(sect)\t\t\t\t\t\t\\\n+    void check_section(sect)\t\t\t\t\t\\\n \t enum section sect;\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n         if (current_section != sect) {\t\t\t\t\\\n@@ -1164,10 +1159,10 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n   do {\t\t\t\t\t\t\t\t\\\n       if (label_pending) {\t\t\t\t\t\\\n \t label_pending = 0;\t\t\t\t\t\\\n-         sprintf (datalbl[datalbl_ndx].value, \"%lf\", (double) VALUE); \\\n+         sprintf (datalbl[datalbl_ndx].value, \"%f\", (double) VALUE); \\\n       }\t\t\t\t\t\t\t\t\\\n       datalbl[datalbl_ndx].size += 2;\t\t\t\t\\\n-      fprintf (FILE, \"\\tdataf\\t%lf\\n\",VALUE);\t\t\t\\\n+      fprintf (FILE, \"\\tdataf\\t%f\\n\",VALUE);\t\t\t\\\n   } while(0)\n \n /* This is how to output an assembler line defining a 1750A `double'\n@@ -1177,10 +1172,10 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n   do {\t\t\t\t\t\t\t\t\\\n       if (label_pending) {\t\t\t\t\t\\\n \t label_pending = 0;\t\t\t\t\t\\\n-         sprintf (datalbl[datalbl_ndx].value, \"%lf\", VALUE);\t\\\n+         sprintf (datalbl[datalbl_ndx].value, \"%f\", VALUE);\t\\\n       }\t\t\t\t\t\t\t\t\\\n       datalbl[datalbl_ndx].size += 3;\t\t\t\t\\\n-      fprintf(FILE,\"\\tdataef\\t%lf\\n\",VALUE);\t\t\t\\\n+      fprintf(FILE,\"\\tdataef\\t%f\\n\",VALUE);\t\t\t\\\n   } while (0)\n \n /* This is how to output an assembler line defining a string constant.  */\n@@ -1250,13 +1245,13 @@ enum reg_class { NO_REGS, R2, R0_1, INDEX_REGS, BASE_REGS, ALL_REGS, LIM_REG_CLA\n    It need not be very fast code.  */\n \n #define ASM_OUTPUT_REG_PUSH(FILE,REGNO)  \\\n-  fprintf (FILE, \"\\tPSHM R%s,R%s\\n\", reg_names[REGNO])\n+  fprintf (FILE, \"\\tPSHM R%s,R%s\\n\", reg_names[REGNO], \"FIXME: missing arg\")\n \n /* This is how to output an insn to pop a register from the stack.\n    It need not be very fast code.  */\n \n #define ASM_OUTPUT_REG_POP(FILE,REGNO)  \\\n-\tfprintf (FILE, \"\\tPOPM R%s,R%s\\n\", reg_names[REGNO])\n+\tfprintf (FILE, \"\\tPOPM R%s,R%s\\n\", reg_names[REGNO], \"FIXME: missing arg\")\n \n /* This is how to output an element of a case-vector that is absolute. */\n "}, {"sha": "358253f760cf68c0f6b6a85dc5a0e9937719ea6b", "filename": "gcc/config/1750a/1750a.md", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ea0e99c7cfcf1901fa771bcc43fc26db692df01/gcc%2Fconfig%2F1750a%2F1750a.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ea0e99c7cfcf1901fa771bcc43fc26db692df01/gcc%2Fconfig%2F1750a%2F1750a.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.md?ref=7ea0e99c7cfcf1901fa771bcc43fc26db692df01", "patch": "@@ -1,6 +1,6 @@\n ;;- Machine description for GNU compiler\n ;;- MIL-STD-1750A version.\n-;; Copyright (C) 1994, 95, 96, 97, 98, 1999 Free Software Foundation, Inc.\n+;; Copyright (C) 1994, 95-99, 2000 Free Software Foundation, Inc.\n ;; Contributed by O.M.Kellogg, DASA (oliver.kellogg@space.otn.dasa.de).\n \n ;; This file is part of GNU CC.\n@@ -173,6 +173,8 @@\n \t   return \\\"ucr.m %0,%1\\\";\n \t case 4:\n \t   return \\\"uc.m %0,%1\\\";\n+\t default:\n+\t   abort();\n \t }\n      else\n        switch (which_alternative)\n@@ -187,6 +189,8 @@\n \t   return \\\"cr   r%0,r%1\\\";\n \t case 4:\n \t   return \\\"c    r%0,%1\\\";\n+\t default:\n+\t   abort();\n \t }\n    } \")\n \n@@ -497,6 +501,8 @@\n           return \\\"incm %2,%0\\\";\n         case 6:\n           return \\\"decm %J2,%0\\\";\n+\tdefault:\n+\t  abort();\n       } \")\n \n ;; double integer\n@@ -605,6 +611,8 @@\n         return \\\"m   r%0,%2\\\";\n       case 2:\n         return \\\"mim r%0,%2\\\";\n+      default:\n+        abort();\n       }\n   \")\n "}]}