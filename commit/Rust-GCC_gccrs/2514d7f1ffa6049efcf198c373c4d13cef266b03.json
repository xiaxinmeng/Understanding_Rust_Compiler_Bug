{"sha": "2514d7f1ffa6049efcf198c373c4d13cef266b03", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUxNGQ3ZjFmZmE2MDQ5ZWZjZjE5OGMzNzNjNGQxM2NlZjI2NmIwMw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2012-07-25T19:32:48Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2012-07-25T19:32:48Z"}, "message": "re PR libstdc++/54075 ([4.7.1] unordered_map insert still slower than 4.6.2)\n\n2012-07-25  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\tPR libstdc++/54075\n\t* include/bits/hashtable.h\n\t(_Hashtable<>::_Hashtable(_InputIterator, _InputIterator,\n\tsize_type, ...): Remove std::max usage to guarantee that hashtable\n\tstate is consistent with hash policy state.\n\t(_Hashtable<>::rehash): Likewise. Set _M_prev_resize to 0 to avoid\n\tthe hashtable to be shrinking on next insertion.\n\t* testsuite/23_containers/unordered_set/modifiers/reserve.cc: New.\n\t* testsuite/23_containers/unordered_multiset/modifiers/reserve.cc: New.\n\t* testsuite/23_containers/unordered_map/modifiers/reserve.cc: New.\n\t* testsuite/23_containers/unordered_multimap/modifiers/reserve.cc: New.\n\nFrom-SVN: r189863", "tree": {"sha": "68aefb11e267b8b894dec8ab1bc6c6da96a9fae8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68aefb11e267b8b894dec8ab1bc6c6da96a9fae8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2514d7f1ffa6049efcf198c373c4d13cef266b03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2514d7f1ffa6049efcf198c373c4d13cef266b03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2514d7f1ffa6049efcf198c373c4d13cef266b03", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2514d7f1ffa6049efcf198c373c4d13cef266b03/comments", "author": null, "committer": null, "parents": [{"sha": "933a2c39fd3778d46305894d55fca0dd584acefa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/933a2c39fd3778d46305894d55fca0dd584acefa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/933a2c39fd3778d46305894d55fca0dd584acefa"}], "stats": {"total": 232, "additions": 223, "deletions": 9}, "files": [{"sha": "a56f1e77f2fb9428810771d1bb901e4a4b8d9106", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2514d7f1ffa6049efcf198c373c4d13cef266b03/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2514d7f1ffa6049efcf198c373c4d13cef266b03/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2514d7f1ffa6049efcf198c373c4d13cef266b03", "patch": "@@ -1,3 +1,17 @@\n+2012-07-25  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/54075\n+\t* include/bits/hashtable.h\n+\t(_Hashtable<>::_Hashtable(_InputIterator, _InputIterator,\n+\tsize_type, ...): Remove std::max usage to guarantee that hashtable\n+\tstate is consistent with hash policy state.\n+\t(_Hashtable<>::rehash): Likewise. Set _M_prev_resize to 0 to avoid\n+\tthe hashtable to be shrinking on next insertion.\n+\t* testsuite/23_containers/unordered_set/modifiers/reserve.cc: New.\n+\t* testsuite/23_containers/unordered_multiset/modifiers/reserve.cc: New.\n+\t* testsuite/23_containers/unordered_map/modifiers/reserve.cc: New.\n+\t* testsuite/23_containers/unordered_multimap/modifiers/reserve.cc: New.\n+\n 2012-07-20  Chip Salzenberg  <chip@pobox.com>\n \t    Jonathan Wakely  <jwakely.gcc@gmail.com>\n "}, {"sha": "2faf0b3bd889b87250b3c235424a7dc1df769668", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2514d7f1ffa6049efcf198c373c4d13cef266b03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2514d7f1ffa6049efcf198c373c4d13cef266b03/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=2514d7f1ffa6049efcf198c373c4d13cef266b03", "patch": "@@ -803,11 +803,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_element_count(0),\n \t_M_rehash_policy()\n       {\n-\t_M_bucket_count = std::max(_M_rehash_policy._M_next_bkt(__bucket_hint),\n-\t\t\t\t   _M_rehash_policy.\n-\t\t\t\t   _M_bkt_for_elements(__detail::\n-\t\t\t\t\t\t       __distance_fw(__f,\n-\t\t\t\t\t\t\t\t     __l)));\n+\t_M_bucket_count =\n+\t  _M_rehash_policy._M_bkt_for_elements(__detail::__distance_fw(__f,\n+\t\t\t\t\t\t\t\t       __l));\n+\tif (_M_bucket_count <= __bucket_hint)\n+\t  _M_bucket_count = _M_rehash_policy._M_next_bkt(__bucket_hint);\n \n \t// We don't want the rehash policy to ask for the hashtable to\n \t// shrink on the first insertion so we need to reset its\n@@ -1609,10 +1609,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     rehash(size_type __n)\n     {\n       const __rehash_state& __saved_state = _M_rehash_policy._M_state();\n-      _M_rehash(std::max(_M_rehash_policy._M_next_bkt(__n),\n-\t\t\t _M_rehash_policy._M_bkt_for_elements(_M_element_count\n-\t\t\t\t\t\t\t      + 1)),\n-\t\t__saved_state);\n+      std::size_t __buckets\n+\t= _M_rehash_policy._M_bkt_for_elements(_M_element_count + 1);\n+      if (__buckets <= __n)\n+\t__buckets = _M_rehash_policy._M_next_bkt(__n);\n+\n+      if (__buckets != _M_bucket_count)\n+\t{\n+\t  _M_rehash(__buckets, __saved_state);\n+\n+\t  // We don't want the rehash policy to ask for the hashtable to shrink\n+\t  // on the next insertion so we need to reset its previous resize\n+\t  // level.\n+\t  _M_rehash_policy._M_prev_resize = 0;\n+\t}\n     }\n \n   template<typename _Key, typename _Value,"}, {"sha": "1c6d1bc4a84f1fcaf2f074b2f61037904c970e5a", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/modifiers/reserve.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2514d7f1ffa6049efcf198c373c4d13cef266b03/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fmodifiers%2Freserve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2514d7f1ffa6049efcf198c373c4d13cef266b03/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fmodifiers%2Freserve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fmodifiers%2Freserve.cc?ref=2514d7f1ffa6049efcf198c373c4d13cef266b03", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+\n+bool test __attribute__((unused)) = true;\n+\n+void test01()\n+{\n+  const int N = 1000;\n+\n+  typedef std::unordered_map<int, int> Map;\n+  Map m;\n+  m.reserve(N);\n+\n+  std::size_t bkts = m.bucket_count();\n+  for (int i = 0; i != N; ++i)\n+    {\n+      m.insert(std::make_pair(i, i));\n+      // As long as we insert less than the reserved number of elements we\n+      // shouldn't experiment any rehash.\n+      VERIFY( m.bucket_count() == bkts );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "44a59189aed8157bea24f67cd8ff93cc249f6d93", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/modifiers/reserve.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2514d7f1ffa6049efcf198c373c4d13cef266b03/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fmodifiers%2Freserve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2514d7f1ffa6049efcf198c373c4d13cef266b03/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fmodifiers%2Freserve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fmodifiers%2Freserve.cc?ref=2514d7f1ffa6049efcf198c373c4d13cef266b03", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+\n+bool test __attribute__((unused)) = true;\n+\n+void test01()\n+{\n+  const int N = 1000;\n+\n+  typedef std::unordered_multimap<int, int> MMap;\n+  MMap m;\n+  m.reserve(N * 2);\n+\n+  std::size_t bkts = m.bucket_count();\n+  for (int i = 0; i != N; ++i)\n+    {\n+      m.insert(std::make_pair(i, i));\n+      m.insert(std::make_pair(i, i));\n+      // As long as we insert less than the reserved number of elements we\n+      // shouldn't experiment any rehash.\n+      VERIFY( m.bucket_count() == bkts );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "6106b3336ff51f27dfed9265224e87833ee60409", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/modifiers/reserve.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2514d7f1ffa6049efcf198c373c4d13cef266b03/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fmodifiers%2Freserve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2514d7f1ffa6049efcf198c373c4d13cef266b03/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fmodifiers%2Freserve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fmodifiers%2Freserve.cc?ref=2514d7f1ffa6049efcf198c373c4d13cef266b03", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_set>\n+#include <testsuite_hooks.h>\n+\n+bool test __attribute__((unused)) = true;\n+\n+void test01()\n+{\n+  const int N = 1000;\n+\n+  typedef std::unordered_multiset<int> MSet;\n+  MSet s;\n+  s.reserve(N * 2);\n+\n+  std::size_t bkts = s.bucket_count();\n+  for (int i = 0; i != N; ++i)\n+    {\n+      s.insert(i);\n+      s.insert(i);\n+      // As long as we insert less than the reserved number of elements we\n+      // shouldn't experiment any rehash.\n+      VERIFY( s.bucket_count() == bkts );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "aba6f771d8198ac2d13f1c501c6f8c5c827c45af", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/modifiers/reserve.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2514d7f1ffa6049efcf198c373c4d13cef266b03/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fmodifiers%2Freserve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2514d7f1ffa6049efcf198c373c4d13cef266b03/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fmodifiers%2Freserve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fmodifiers%2Freserve.cc?ref=2514d7f1ffa6049efcf198c373c4d13cef266b03", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_set>\n+#include <testsuite_hooks.h>\n+\n+bool test __attribute__((unused)) = true;\n+\n+void test01()\n+{\n+  const int N = 1000;\n+\n+  typedef std::unordered_set<int> Set;\n+  Set s;\n+  s.reserve(N);\n+\n+  std::size_t bkts = s.bucket_count();\n+  for (int i = 0; i != N; ++i)\n+    {\n+      s.insert(i);\n+      // As long as we insert less than the reserved number of elements we\n+      // shouldn't experiment any rehash.\n+      VERIFY( s.bucket_count() == bkts );\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}