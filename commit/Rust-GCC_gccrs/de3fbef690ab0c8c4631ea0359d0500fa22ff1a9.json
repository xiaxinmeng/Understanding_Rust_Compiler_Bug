{"sha": "de3fbef690ab0c8c4631ea0359d0500fa22ff1a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUzZmJlZjY5MGFiMGM4YzQ2MzFlYTAzNTlkMDUwMGZhMjJmZjFhOQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-01-31T18:05:37Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-01-31T18:05:37Z"}, "message": "re PR c++/67273 (Incorrect -Wshadow warning with generic lambdas)\n\n\tPR c++/67273\n\tPR c++/79253\n\t* pt.c: (instantiate_decl): Push to top level when current\n\tfunction scope doesn't match.  Only push lmabda scope stack when\n\tpushing to top.\n\n\tPR c++/67273\n\tPR c++/79253\n\t* g++.dg/cpp1y/pr67273.C: New.\n\t* g++.dg/cpp1y/pr79253.C: New.\n\nFrom-SVN: r245067", "tree": {"sha": "f62703550f7fe7d4d981807650c925ba802fa29a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f62703550f7fe7d4d981807650c925ba802fa29a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de3fbef690ab0c8c4631ea0359d0500fa22ff1a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de3fbef690ab0c8c4631ea0359d0500fa22ff1a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de3fbef690ab0c8c4631ea0359d0500fa22ff1a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de3fbef690ab0c8c4631ea0359d0500fa22ff1a9/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a5bac38b5dadab15477a9beb3c888a888539a26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a5bac38b5dadab15477a9beb3c888a888539a26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a5bac38b5dadab15477a9beb3c888a888539a26"}], "stats": {"total": 79, "additions": 71, "deletions": 8}, "files": [{"sha": "78a5725dc6d0f6c84428f736b4dccc72f35b23d7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3fbef690ab0c8c4631ea0359d0500fa22ff1a9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3fbef690ab0c8c4631ea0359d0500fa22ff1a9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=de3fbef690ab0c8c4631ea0359d0500fa22ff1a9", "patch": "@@ -1,5 +1,11 @@\n 2017-01-31  Nathan Sidwell  <nathan@acm.org>\n \n+\tPR c++/67273\n+\tPR c++/79253\n+\t* pt.c: (instantiate_decl): Push to top level when current\n+\tfunction scope doesn't match.  Only push lmabda scope stack when\n+\tpushing to top.\n+\n \t* cp-tree.h (instantiate_decl): Make defer_ok bool.\n \t* pt.c: Fix instantiate_decl calls to pass true/false not 0/1\n \t(instantiate_decl): Simplify and reorder state saving and restoration."}, {"sha": "c69c27063e86a62d54637ad33f4b1d7aeeb3a069", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3fbef690ab0c8c4631ea0359d0500fa22ff1a9/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3fbef690ab0c8c4631ea0359d0500fa22ff1a9/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=de3fbef690ab0c8c4631ea0359d0500fa22ff1a9", "patch": "@@ -22666,20 +22666,21 @@ instantiate_decl (tree d, bool defer_ok, bool expl_inst_class_mem_p)\n \tgoto out;\n     }\n \n-  bool nested;\n+  bool push_to_top, nested;\n   tree fn_context;\n   fn_context = decl_function_context (d);\n-  nested = (current_function_decl != NULL_TREE);\n+  nested = current_function_decl != NULL_TREE;\n+  push_to_top = !(nested && fn_context == current_function_decl);\n+\n   vec<tree> omp_privatization_save;\n   if (nested)\n     save_omp_privatization_clauses (omp_privatization_save);\n \n-  if (!fn_context)\n+  if (push_to_top)\n     push_to_top_level ();\n   else\n     {\n-      if (nested)\n-\tpush_function_context ();\n+      push_function_context ();\n       cp_unevaluated_operand = 0;\n       c_inhibit_evaluation_warnings = 0;\n     }\n@@ -22756,7 +22757,7 @@ instantiate_decl (tree d, bool defer_ok, bool expl_inst_class_mem_p)\n \tblock = push_stmt_list ();\n       else\n \t{\n-\t  if (LAMBDA_FUNCTION_P (d))\n+\t  if (push_to_top && LAMBDA_FUNCTION_P (d))\n \t    {\n \t      /* When instantiating a lambda's templated function\n \t\t operator, we need to push the non-lambda class scope\n@@ -22849,9 +22850,9 @@ instantiate_decl (tree d, bool defer_ok, bool expl_inst_class_mem_p)\n   /* We're not deferring instantiation any more.  */\n   TI_PENDING_TEMPLATE_FLAG (DECL_TEMPLATE_INFO (d)) = 0;\n \n-  if (!fn_context)\n+  if (push_to_top)\n     pop_from_top_level ();\n-  else if (nested)\n+  else\n     pop_function_context ();\n \n   if (nested)"}, {"sha": "922fe645755a1b484e5f0bf612142a6e606e0e86", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3fbef690ab0c8c4631ea0359d0500fa22ff1a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3fbef690ab0c8c4631ea0359d0500fa22ff1a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=de3fbef690ab0c8c4631ea0359d0500fa22ff1a9", "patch": "@@ -1,3 +1,10 @@\n+2017-01-31  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/67273\n+\tPR c++/79253\n+\t* g++.dg/cpp1y/pr67273.C: New.\n+\t* g++.dg/cpp1y/pr79253.C: New.\n+\n 2017-01-31  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/79264"}, {"sha": "d2bc0350212a3bce455cf3a35f20db80b3b946d5", "filename": "gcc/testsuite/g++.dg/cpp1y/pr67273.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3fbef690ab0c8c4631ea0359d0500fa22ff1a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr67273.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3fbef690ab0c8c4631ea0359d0500fa22ff1a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr67273.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr67273.C?ref=de3fbef690ab0c8c4631ea0359d0500fa22ff1a9", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile { target c++14 } }\n+// { dg-additional-options \"-Wshadow\" }\n+\n+// pr67273 bogus warning about shadowing.\n+\n+\n+template <typename T> void Foo (T &&lambda)\n+{\n+  int ARG = 2;\n+  lambda (1);\n+}\n+\n+void Baz ()\n+{\n+  Foo ([] (auto &&ARG) {});\n+}"}, {"sha": "b15efe8873f47b682396892c978dafa8fe0ba53f", "filename": "gcc/testsuite/g++.dg/cpp1y/pr79253.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de3fbef690ab0c8c4631ea0359d0500fa22ff1a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79253.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de3fbef690ab0c8c4631ea0359d0500fa22ff1a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79253.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr79253.C?ref=de3fbef690ab0c8c4631ea0359d0500fa22ff1a9", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile { target c++14 } }\n+// PR 79253 ICE instantiating lambda body.\n+\n+template <typename> struct A;\n+template <typename = A<int>> class B {};\n+template <class T, class U, class V> void foo (U, V) { T (0, 0); }\n+struct C {};\n+template <template <bool, bool, bool> class F, class>\n+void\n+bar ()\n+{\n+  F<0, 0, 0>::baz;\n+}\n+struct G { int l; };\n+template <int, int, int> struct E : C\n+{\n+  E (int, int) : e (0)\n+  {\n+    auto &m = this->m ();\n+    auto c = [&] { m.l; };\n+  }\n+  G &m ();\n+  int e;\n+};\n+struct D\n+{\n+  void\n+  baz () { bar<F, B<>>; }\n+  template <bool, bool, bool> struct F\n+  {\n+    static B<> baz () { foo<E<0, 0, 0>> (0, 0); }\n+  };\n+};"}]}