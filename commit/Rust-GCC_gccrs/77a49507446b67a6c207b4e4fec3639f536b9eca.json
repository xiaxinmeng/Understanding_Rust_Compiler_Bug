{"sha": "77a49507446b67a6c207b4e4fec3639f536b9eca", "node_id": "C_kwDOANBUbNoAKDc3YTQ5NTA3NDQ2YjY3YTZjMjA3YjRlNGZlYzM2MzlmNTM2YjllY2E", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-09T17:17:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-09T17:17:25Z"}, "message": "Merge #999\n\n999: Refactor ABI options as part of HIR function qualifiers r=philberty a=philberty\n\nThis is a refactor to cleanup HIR::ExternBlock and HIR::FunctionQualifiers\r\nto have an enum of ABI options to improve the error handling.\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "52943494a01142af6b28be1dc46ee6cc29929d81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52943494a01142af6b28be1dc46ee6cc29929d81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77a49507446b67a6c207b4e4fec3639f536b9eca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiKOElCRBK7hj4Ov3rIwAA74gIABNKrcAtqrwzA502DG/v4dHC\n217mDjsG95/wVpF4NNp/zIHVXn3sGXUilf65q8M3S1zw00BqLvLRgRRuOvdE2vLb\nLjAPDXu4xu5Ir1nJrKVufc9w5zsN6/sNmzH5B3H2f4GwB3hNjhYnmEE+mINr2KNj\ndqFUD90z9OeatTWTy9zMkVrOxbzG4HAyC1mgfS2AF5phDOvdveRlXIMWHp+ax0PU\nGM0VRVjHjEv4KaPjWeRZjA394rFklVeMsIq5r9T8YRwhFyUrbdzJXfJMn82oSqV+\n0Qri2wITQiLY/TnLZxXPcBSdIfvcgKsNull9djIRT7woA6L8Z10BUigeFkmmklk=\n=OZwC\n-----END PGP SIGNATURE-----\n", "payload": "tree 52943494a01142af6b28be1dc46ee6cc29929d81\nparent 39c04258300be68a36b80f2f23929a97e8af1865\nparent 749a419a2e92bab004b7be7addbfab0cae5357e0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1646846245 +0000\ncommitter GitHub <noreply@github.com> 1646846245 +0000\n\nMerge #999\n\n999: Refactor ABI options as part of HIR function qualifiers r=philberty a=philberty\n\nThis is a refactor to cleanup HIR::ExternBlock and HIR::FunctionQualifiers\r\nto have an enum of ABI options to improve the error handling.\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a49507446b67a6c207b4e4fec3639f536b9eca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77a49507446b67a6c207b4e4fec3639f536b9eca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a49507446b67a6c207b4e4fec3639f536b9eca/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39c04258300be68a36b80f2f23929a97e8af1865", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39c04258300be68a36b80f2f23929a97e8af1865", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39c04258300be68a36b80f2f23929a97e8af1865"}, {"sha": "749a419a2e92bab004b7be7addbfab0cae5357e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/749a419a2e92bab004b7be7addbfab0cae5357e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/749a419a2e92bab004b7be7addbfab0cae5357e0"}], "stats": {"total": 115, "additions": 54, "deletions": 61}, "files": [{"sha": "a279088cd874df5ff3d220df6612b344be9113fc", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a49507446b67a6c207b4e4fec3639f536b9eca/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a49507446b67a6c207b4e4fec3639f536b9eca/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=77a49507446b67a6c207b4e4fec3639f536b9eca", "patch": "@@ -484,25 +484,20 @@ struct SelfParam\n // Qualifiers for function, i.e. const, unsafe, extern etc.\n struct FunctionQualifiers\n {\n-public:\n-  /* Whether the function is neither const nor async, const only, or async\n-   * only. */\n-\n private:\n   AsyncConstStatus const_status;\n   bool has_unsafe;\n   bool has_extern;\n-  std::string extern_abi; // e.g. extern \"C\" fn() -> i32 {}\n-  // TODO: maybe ensure that extern_abi only exists if extern exists?\n-\n-  // should this store location info?\n+  std::string extern_abi;\n+  Location locus;\n \n public:\n-  FunctionQualifiers (AsyncConstStatus const_status, bool has_unsafe,\n-\t\t      bool has_extern = false,\n+  FunctionQualifiers (Location locus, AsyncConstStatus const_status,\n+\t\t      bool has_unsafe, bool has_extern = false,\n \t\t      std::string extern_abi = std::string ())\n     : const_status (const_status), has_unsafe (has_unsafe),\n-      has_extern (has_extern), extern_abi (std::move (extern_abi))\n+      has_extern (has_extern), extern_abi (std::move (extern_abi)),\n+      locus (locus)\n   {\n     if (!this->extern_abi.empty ())\n       {\n@@ -517,6 +512,9 @@ struct FunctionQualifiers\n   bool is_unsafe () const { return has_unsafe; }\n   bool is_extern () const { return has_extern; }\n   std::string get_extern_abi () const { return extern_abi; }\n+  bool has_abi () const { return !extern_abi.empty (); }\n+\n+  Location get_locus () const { return locus; }\n };\n \n // A function parameter\n@@ -723,7 +721,7 @@ class Method : public InherentImplItem, public TraitImplItem\n   // Creates an error state method.\n   static Method create_error ()\n   {\n-    return Method (\"\", FunctionQualifiers (NONE, true),\n+    return Method (\"\", FunctionQualifiers (Location (), NONE, true),\n \t\t   std::vector<std::unique_ptr<GenericParam>> (),\n \t\t   SelfParam::create_error (), std::vector<FunctionParam> (),\n \t\t   nullptr, WhereClause::create_empty (), nullptr,"}, {"sha": "2f007eddc28cd713cce07cb9cae812f281e412ce", "filename": "gcc/rust/hir/rust-ast-lower-item.h", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a49507446b67a6c207b4e4fec3639f536b9eca/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a49507446b67a6c207b4e4fec3639f536b9eca/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-item.h?ref=77a49507446b67a6c207b4e4fec3639f536b9eca", "patch": "@@ -800,15 +800,23 @@ class ASTLoweringItem : public ASTLoweringBase\n \textern_items.push_back (std::unique_ptr<HIR::ExternalItem> (lowered));\n       }\n \n+    ABI abi = ABI::RUST;\n+    if (extern_block.has_abi ())\n+      {\n+\tconst std::string &extern_abi = extern_block.get_abi ();\n+\tabi = get_abi_from_string (extern_abi);\n+\tif (abi == ABI::UNKNOWN)\n+\t  rust_error_at (extern_block.get_locus (), \"unknown ABI option\");\n+      }\n+\n     auto crate_num = mappings->get_current_crate ();\n     Analysis::NodeMapping mapping (crate_num, extern_block.get_node_id (),\n \t\t\t\t   mappings->get_next_hir_id (crate_num),\n \t\t\t\t   mappings->get_next_localdef_id (crate_num));\n \n     HIR::ExternBlock *hir_extern_block\n-      = new HIR::ExternBlock (mapping, extern_block.get_abi (),\n-\t\t\t      std::move (extern_items), std::move (vis),\n-\t\t\t      extern_block.get_inner_attrs (),\n+      = new HIR::ExternBlock (mapping, abi, std::move (extern_items),\n+\t\t\t      std::move (vis), extern_block.get_inner_attrs (),\n \t\t\t      extern_block.get_outer_attrs (),\n \t\t\t      extern_block.get_locus ());\n "}, {"sha": "d9ce9aa6e7c6bb9f7424c77354250fdc1e9b1d7e", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a49507446b67a6c207b4e4fec3639f536b9eca/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a49507446b67a6c207b4e4fec3639f536b9eca/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=77a49507446b67a6c207b4e4fec3639f536b9eca", "patch": "@@ -602,11 +602,17 @@ ASTLoweringBase::lower_qualifiers (const AST::FunctionQualifiers &qualifiers)\n     = qualifiers.is_unsafe () ? Unsafety::Unsafe : Unsafety::Normal;\n   bool has_extern = qualifiers.is_extern ();\n \n-  // FIXME turn this into the Rust::ABI enum\n-  std::string extern_abi = qualifiers.get_extern_abi ();\n+  ABI abi = ABI::RUST;\n+  if (qualifiers.has_abi ())\n+    {\n+      const std::string &extern_abi = qualifiers.get_extern_abi ();\n+      abi = get_abi_from_string (extern_abi);\n+      if (has_extern && abi == ABI::UNKNOWN)\n+\trust_error_at (qualifiers.get_locus (), \"unknown ABI option\");\n+    }\n \n   return HIR::FunctionQualifiers (qualifiers.get_const_status (), unsafety,\n-\t\t\t\t  has_extern, extern_abi);\n+\t\t\t\t  has_extern, abi);\n }\n \n void"}, {"sha": "051e503d05312973fa2bfea9fbe346842982b16f", "filename": "gcc/rust/hir/tree/rust-hir-full-test.cc", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a49507446b67a6c207b4e4fec3639f536b9eca/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a49507446b67a6c207b4e4fec3639f536b9eca/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-test.cc?ref=77a49507446b67a6c207b4e4fec3639f536b9eca", "patch": "@@ -1030,10 +1030,7 @@ ExternBlock::as_string () const\n   std::string str = VisItem::as_string ();\n \n   str += \"extern \";\n-  if (has_abi ())\n-    {\n-      str += \"\\\"\" + abi + \"\\\" \";\n-    }\n+  str += \"\\\"\" + get_string_from_abi (abi) + \"\\\" \";\n \n   // inner attributes\n   str += \"\\n inner attributes: \";\n@@ -2058,10 +2055,7 @@ FunctionQualifiers::as_string () const\n   if (has_extern)\n     {\n       str += \"extern\";\n-      if (extern_abi != \"\")\n-\t{\n-\t  str += \" \\\"\" + extern_abi + \"\\\"\";\n-\t}\n+      str += \" \\\"\" + get_string_from_abi (abi) + \"\\\"\";\n     }\n \n   return str;"}, {"sha": "6d65837d966f155b5bf2259e577b3d0bc4b07410", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a49507446b67a6c207b4e4fec3639f536b9eca/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a49507446b67a6c207b4e4fec3639f536b9eca/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=77a49507446b67a6c207b4e4fec3639f536b9eca", "patch": "@@ -19,6 +19,7 @@\n #ifndef RUST_HIR_ITEM_H\n #define RUST_HIR_ITEM_H\n \n+#include \"rust-abi.h\"\n #include \"rust-ast-full-decls.h\"\n #include \"rust-common.h\"\n #include \"rust-hir.h\"\n@@ -481,28 +482,22 @@ struct FunctionQualifiers\n   AsyncConstStatus const_status;\n   Unsafety unsafety;\n   bool has_extern;\n-  std::string extern_abi; // e.g. extern \"C\" fn() -> i32 {}\n-  // TODO: maybe ensure that extern_abi only exists if extern exists?\n+  ABI abi;\n \n public:\n   FunctionQualifiers (AsyncConstStatus const_status, Unsafety unsafety,\n-\t\t      bool has_extern = false,\n-\t\t      std::string extern_abi = std::string ())\n+\t\t      bool has_extern, ABI abi)\n     : const_status (const_status), unsafety (unsafety), has_extern (has_extern),\n-      extern_abi (std::move (extern_abi))\n-  {\n-    if (!this->extern_abi.empty ())\n-      {\n-\t// having extern is required; not having it is an implementation error\n-\tgcc_assert (has_extern);\n-      }\n-  }\n+      abi (abi)\n+  {}\n \n   std::string as_string () const;\n \n   AsyncConstStatus get_status () const { return const_status; }\n \n   bool is_const () const { return const_status == AsyncConstStatus::CONST_FN; }\n+\n+  ABI get_abi () const { return abi; }\n };\n \n // A function parameter\n@@ -3082,15 +3077,9 @@ class ExternalFunctionItem : public ExternalItem\n // An extern block HIR node\n class ExternBlock : public VisItem\n {\n-  // bool has_abi;\n-  std::string abi;\n-\n-  // bool has_inner_attrs;\n+  ABI abi;\n   AST::AttrVec inner_attrs;\n-\n-  // bool has_extern_items;\n   std::vector<std::unique_ptr<ExternalItem>> extern_items;\n-\n   Location locus;\n \n public:\n@@ -3102,17 +3091,14 @@ class ExternBlock : public VisItem\n   // Returns whether extern block has extern items.\n   bool has_extern_items () const { return !extern_items.empty (); }\n \n-  // Returns whether extern block has ABI name.\n-  bool has_abi () const { return !abi.empty (); }\n-\n-  std::string get_abi () const { return abi; }\n+  ABI get_abi () const { return abi; }\n \n-  ExternBlock (Analysis::NodeMapping mappings, std::string abi,\n+  ExternBlock (Analysis::NodeMapping mappings, ABI abi,\n \t       std::vector<std::unique_ptr<ExternalItem>> extern_items,\n \t       Visibility vis, AST::AttrVec inner_attrs,\n \t       AST::AttrVec outer_attrs, Location locus)\n     : VisItem (std::move (mappings), std::move (vis), std::move (outer_attrs)),\n-      abi (std::move (abi)), inner_attrs (std::move (inner_attrs)),\n+      abi (abi), inner_attrs (std::move (inner_attrs)),\n       extern_items (std::move (extern_items)), locus (locus)\n   {}\n "}, {"sha": "db738289b0228d545b750c6808b00fb3641b235c", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a49507446b67a6c207b4e4fec3639f536b9eca/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a49507446b67a6c207b4e4fec3639f536b9eca/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=77a49507446b67a6c207b4e4fec3639f536b9eca", "patch": "@@ -2620,13 +2620,13 @@ AST::FunctionQualifiers\n Parser<ManagedTokenSource>::parse_function_qualifiers ()\n {\n   AsyncConstStatus const_status = NONE;\n-  // bool has_const = false;\n   bool has_unsafe = false;\n   bool has_extern = false;\n   std::string abi;\n \n   // Check in order of const, unsafe, then extern\n   const_TokenPtr t = lexer.peek_token ();\n+  Location locus = t->get_locus ();\n   switch (t->get_id ())\n     {\n     case CONST:\n@@ -2662,7 +2662,7 @@ Parser<ManagedTokenSource>::parse_function_qualifiers ()\n \t}\n     }\n \n-  return AST::FunctionQualifiers (const_status, has_unsafe, has_extern,\n+  return AST::FunctionQualifiers (locus, const_status, has_unsafe, has_extern,\n \t\t\t\t  std::move (abi));\n }\n "}, {"sha": "1722d16e4a9b3789b050833f838316499cbe1f08", "filename": "gcc/rust/typecheck/rust-hir-type-check-implitem.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a49507446b67a6c207b4e4fec3639f536b9eca/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a49507446b67a6c207b4e4fec3639f536b9eca/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-implitem.h?ref=77a49507446b67a6c207b4e4fec3639f536b9eca", "patch": "@@ -127,17 +127,11 @@ class TypeCheckTopLevelExternItem : public TypeCheckBase\n \t\t\t      function.get_item_name ()),\n       function.get_locus ()};\n \n-    auto abi = get_abi_from_string (parent.get_abi ());\n-    if (abi == ABI::UNKNOWN)\n-      {\n-\trust_error_at (parent.get_locus (), \"unknown abi\");\n-      }\n-\n     auto fnType = new TyTy::FnType (function.get_mappings ().get_hirid (),\n \t\t\t\t    function.get_mappings ().get_defid (),\n \t\t\t\t    function.get_item_name (), ident, flags,\n-\t\t\t\t    abi, std::move (params), ret_type,\n-\t\t\t\t    std::move (substitutions));\n+\t\t\t\t    parent.get_abi (), std::move (params),\n+\t\t\t\t    ret_type, std::move (substitutions));\n \n     context->insert_type (function.get_mappings (), fnType);\n   }"}, {"sha": "a4b6241dc159c396577aaf904b762cf45501b504", "filename": "gcc/testsuite/rust/compile/abi-options1.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a49507446b67a6c207b4e4fec3639f536b9eca/gcc%2Ftestsuite%2Frust%2Fcompile%2Fabi-options1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a49507446b67a6c207b4e4fec3639f536b9eca/gcc%2Ftestsuite%2Frust%2Fcompile%2Fabi-options1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fabi-options1.rs?ref=77a49507446b67a6c207b4e4fec3639f536b9eca", "patch": "@@ -0,0 +1,7 @@\n+extern \"foobar\" {\n+    // { dg-error \"unknown ABI option\" \"\" { target *-*-* } .-1 }\n+    fn printf(s: *const i8, ...);\n+}\n+\n+pub extern \"baz\" fn test() {}\n+// { dg-error \"unknown ABI option\" \"\" { target *-*-* } .-1 }"}]}