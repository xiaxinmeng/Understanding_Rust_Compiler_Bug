{"sha": "b2ed71b61a5f8a7d8c001516af6997d3fcaff403", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJlZDcxYjYxYTVmOGE3ZDhjMDAxNTE2YWY2OTk3ZDNmY2FmZjQwMw==", "commit": {"author": {"name": "Ben Elliston", "email": "bje@au.ibm.com", "date": "2009-04-28T04:56:47Z"}, "committer": {"name": "Ben Elliston", "email": "bje@gcc.gnu.org", "date": "2009-04-28T04:56:47Z"}, "message": "revert: re PR c++/35652 (offset warning should be given in the front-end)\n\nRevert:\n\tPR c++/35652\n\t2009-03-27  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n\ngcc/\n\t* builtins.c (c_strlen): Do not warn here.\n\t* c-typeck.c (build_binary_op): Adjust calls to pointer_int_sum.\n\t* c-common.c (pointer_int_sum): Take an explicit location.\n\tWarn about offsets out of bounds.\n\t* c-common.h (pointer_int_sum): Adjust declaration.\n\ncp/\n\t* typeck.c (cp_pointer_sum): Adjust call to pointer_int_sum.\n\ntestsuite/\n\t* gcc.dg/pr35652.C: New.\n\t* g++.dg/warn/pr35652.C: New.\n\t* gcc.dg/format/plus-1.c: Adjust message.\n\nFrom-SVN: r146870", "tree": {"sha": "a7b2e8cf678fd319d296b231776140e3a5a093d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7b2e8cf678fd319d296b231776140e3a5a093d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2ed71b61a5f8a7d8c001516af6997d3fcaff403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2ed71b61a5f8a7d8c001516af6997d3fcaff403", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2ed71b61a5f8a7d8c001516af6997d3fcaff403", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/comments", "author": null, "committer": null, "parents": [{"sha": "903db43579c8059fb643086c5492e7c58f702bfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903db43579c8059fb643086c5492e7c58f702bfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/903db43579c8059fb643086c5492e7c58f702bfe"}], "stats": {"total": 136, "additions": 50, "deletions": 86}, "files": [{"sha": "153e71b4f33040ac5d65fbba4b8c7acdf11b3a6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2ed71b61a5f8a7d8c001516af6997d3fcaff403", "patch": "@@ -1,3 +1,16 @@\n+2009-04-28  Ben Elliston  <bje@au.ibm.com>\n+\n+\tPR c++/35652\n+\tRevert:\n+\n+\t2009-03-27  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* builtins.c (c_strlen): Do not warn here.\n+\t* c-typeck.c (build_binary_op): Adjust calls to pointer_int_sum.\n+\t* c-common.c (pointer_int_sum): Take an explicit location.\n+\tWarn about offsets out of bounds.\n+\t* c-common.h (pointer_int_sum): Adjust declaration.\n+\n 2009-04-27  Ian Lance Taylor  <iant@google.com>\n \n \t* collect2.c (is_ctor_dtor): Change type of ret field in struct"}, {"sha": "067e3116faf266d98de457a26caf25d3e34b6a74", "filename": "gcc/builtins.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b2ed71b61a5f8a7d8c001516af6997d3fcaff403", "patch": "@@ -479,13 +479,16 @@ c_strlen (tree src, int only_value)\n   else\n     offset = tree_low_cst (offset_node, 0);\n \n-  /* If the offset is known to be out of bounds, the front-end should\n-     have warned already. We call strlen at runtime.  \n-\n-     ??? Perhaps we should turn this into an assert and force\n-     front-ends to define offsets whtin boundaries.  */\n+  /* If the offset is known to be out of bounds, warn, and call strlen at\n+     runtime.  */\n   if (offset < 0 || offset > max)\n     {\n+     /* Suppress multiple warnings for propagated constant strings.  */\n+      if (! TREE_NO_WARNING (src))\n+        {\n+          warning (0, \"offset outside bounds of constant string\");\n+          TREE_NO_WARNING (src) = 1;\n+        }\n       return NULL_TREE;\n     }\n "}, {"sha": "7ee7a091963e442f16777f9dfaa4391a674487f0", "filename": "gcc/c-common.c", "status": "modified", "additions": 4, "deletions": 30, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=b2ed71b61a5f8a7d8c001516af6997d3fcaff403", "patch": "@@ -3767,8 +3767,7 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n    of pointer PTROP and integer INTOP.  */\n \n tree\n-pointer_int_sum (location_t location, enum tree_code resultcode,\n-\t\t tree ptrop, tree intop)\n+pointer_int_sum (enum tree_code resultcode, tree ptrop, tree intop)\n {\n   tree size_exp, ret;\n \n@@ -3777,19 +3776,19 @@ pointer_int_sum (location_t location, enum tree_code resultcode,\n \n   if (TREE_CODE (TREE_TYPE (result_type)) == VOID_TYPE)\n     {\n-      pedwarn (location, pedantic ? OPT_pedantic : OPT_Wpointer_arith, \n+      pedwarn (input_location, pedantic ? OPT_pedantic : OPT_Wpointer_arith, \n \t       \"pointer of type %<void *%> used in arithmetic\");\n       size_exp = integer_one_node;\n     }\n   else if (TREE_CODE (TREE_TYPE (result_type)) == FUNCTION_TYPE)\n     {\n-      pedwarn (location, pedantic ? OPT_pedantic : OPT_Wpointer_arith, \n+      pedwarn (input_location, pedantic ? OPT_pedantic : OPT_Wpointer_arith, \n \t       \"pointer to a function used in arithmetic\");\n       size_exp = integer_one_node;\n     }\n   else if (TREE_CODE (TREE_TYPE (result_type)) == METHOD_TYPE)\n     {\n-      pedwarn (location, pedantic ? OPT_pedantic : OPT_Wpointer_arith, \n+      pedwarn (input_location, pedantic ? OPT_pedantic : OPT_Wpointer_arith, \n \t       \"pointer to member function used in arithmetic\");\n       size_exp = integer_one_node;\n     }\n@@ -3852,31 +3851,6 @@ pointer_int_sum (location_t location, enum tree_code resultcode,\n   if (resultcode == MINUS_EXPR)\n     intop = fold_build1 (NEGATE_EXPR, sizetype, intop);\n \n-  if (TREE_CODE (intop) == INTEGER_CST)\n-    {\n-      tree offset_node;\n-      tree string_cst = string_constant (ptrop, &offset_node);\n-\n-      if (string_cst != 0 \n-\t  && !(offset_node && TREE_CODE (offset_node) != INTEGER_CST))\n-\t{\n-\t  HOST_WIDE_INT max = TREE_STRING_LENGTH (string_cst);\n-\t  HOST_WIDE_INT offset;\n-\t  if (offset_node == 0)\n-\t    offset = 0;\n-\t  else if (! host_integerp (offset_node, 0))\n-\t    offset = -1;\n-\t  else\n-\t    offset = tree_low_cst (offset_node, 0);\n-\n-\t  offset = offset + tree_low_cst (intop, 0);\n-\t  if (offset < 0 || offset > max)\n-\t    warning_at (location, 0,\n-\t\t\t\"offset %<%wd%> outside bounds of constant string\",\n-\t\t\ttree_low_cst (intop, 0));\n-\t}\n-    }\n-\n   ret = fold_build2 (POINTER_PLUS_EXPR, result_type, ptrop, intop);\n \n   fold_undefer_and_ignore_overflow_warnings ();"}, {"sha": "616273ad5c19825e8dedda3a9da05218f98bbb2f", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=b2ed71b61a5f8a7d8c001516af6997d3fcaff403", "patch": "@@ -817,7 +817,7 @@ extern tree shorten_binary_op (tree result_type, tree op0, tree op1, bool bitwis\n    and, if so, perhaps change them both back to their original type.  */\n extern tree shorten_compare (tree *, tree *, tree *, enum tree_code *);\n \n-extern tree pointer_int_sum (location_t, enum tree_code, tree, tree);\n+extern tree pointer_int_sum (enum tree_code, tree, tree);\n \n /* Add qualifiers to a type, in the fashion for C.  */\n extern tree c_build_qualified_type (tree, int);"}, {"sha": "88eb96a5bdb8c8eb000439933b37c8ee42bba1aa", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=b2ed71b61a5f8a7d8c001516af6997d3fcaff403", "patch": "@@ -8882,12 +8882,12 @@ build_binary_op (location_t location, enum tree_code code,\n       /* Handle the pointer + int case.  */\n       if (code0 == POINTER_TYPE && code1 == INTEGER_TYPE)\n \t{\n-\t  ret = pointer_int_sum (location, PLUS_EXPR, op0, op1);\n+\t  ret = pointer_int_sum (PLUS_EXPR, op0, op1);\n \t  goto return_build_binary_op;\n \t}\n       else if (code1 == POINTER_TYPE && code0 == INTEGER_TYPE)\n \t{\n-\t  ret = pointer_int_sum (location, PLUS_EXPR, op1, op0);\n+\t  ret = pointer_int_sum (PLUS_EXPR, op1, op0);\n \t  goto return_build_binary_op;\n \t}\n       else\n@@ -8906,7 +8906,7 @@ build_binary_op (location_t location, enum tree_code code,\n       /* Handle pointer minus int.  Just like pointer plus int.  */\n       else if (code0 == POINTER_TYPE && code1 == INTEGER_TYPE)\n \t{\n-\t  ret = pointer_int_sum (location, MINUS_EXPR, op0, op1);\n+\t  ret = pointer_int_sum (MINUS_EXPR, op0, op1);\n \t  goto return_build_binary_op;\n \t}\n       else"}, {"sha": "710484b582efb69829da480ba88460dd1ba55ecf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b2ed71b61a5f8a7d8c001516af6997d3fcaff403", "patch": "@@ -1,3 +1,12 @@\n+2009-04-28  Ben Elliston  <bje@au.ibm.com>\n+\n+\tPR c++/35652\n+\tRevert:\n+\n+\t2009-03-27  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* typeck.c (cp_pointer_sum): Adjust call to pointer_int_sum.\n+\n 2009-04-27  Ian Lance Taylor  <iant@google.com>\n \n \t* semantics.c (finish_omp_clauses): Change type of c_kind to enum"}, {"sha": "5486c546b6810487d79667de9a75923fafcfb437", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b2ed71b61a5f8a7d8c001516af6997d3fcaff403", "patch": "@@ -4054,7 +4054,7 @@ cp_pointer_int_sum (enum tree_code resultcode, tree ptrop, tree intop)\n      pointer_int_sum() anyway.  */\n   complete_type (TREE_TYPE (res_type));\n \n-  return pointer_int_sum (input_location, resultcode, ptrop,\n+  return pointer_int_sum (resultcode, ptrop,\n \t\t\t  fold_if_not_in_template (intop));\n }\n "}, {"sha": "777922bcbea8b68540a995fe6f6e62774a5d29c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b2ed71b61a5f8a7d8c001516af6997d3fcaff403", "patch": "@@ -1,3 +1,14 @@\n+2009-04-28  Ben Elliston  <bje@au.ibm.com>\n+\n+\tPR c++/35652\n+\tRevert:\n+\n+\t2009-03-27  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n+\n+\t* gcc.dg/pr35652.C: New.\n+\t* g++.dg/warn/pr35652.C: New.\n+\t* gcc.dg/format/plus-1.c: Adjust message.\n+\n 2009-04-27  DJ Delorie  <dj@redhat.com>\n \n \t* lib/target-supports.exp (check_effective_target_double64): New."}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/testsuite/g++.dg/warn/pr35652.C", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr35652.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr35652.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpr35652.C?ref=b2ed71b61a5f8a7d8c001516af6997d3fcaff403", "patch": "@@ -1,30 +0,0 @@\n-// PR c++/35652: wrong location and duplicated warning.\n-// { dg-do compile }\n-// { dg-options \"-fshow-column\" }\n-#include <string>\n-int foo() {\n-  // blank line padding, could also be code...\n-  //\n-  //\n-  //\n-  //\n-  //\n-  //\n-  //\n-  //\n-  //\n-  std::string s = \"\";\n-  s += 'x' + \"y\";  // { dg-warning \"14:offset '120' outside bounds of constant string\" }\n-  // { dg-bogus \"offset '120' outside bounds of constant string.*offset '120' outside bounds of constant string\" \"duplicated\" { target *-*-* } 17 }\n-}\n-\n-int bar()\n-{\n-  const char *s = 'z' + \"y\"; /* { dg-warning \"25:offset '122' outside bounds of constant string\" } */\n-}\n-\n-int g()\n-{\n-  char str[2];\n-  const char *p = str + sizeof(str);\n-}"}, {"sha": "02a213d417dc1dc99d65bc7d941c5be0bfcf883a", "filename": "gcc/testsuite/gcc.dg/format/plus-1.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fplus-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fplus-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fplus-1.c?ref=b2ed71b61a5f8a7d8c001516af6997d3fcaff403", "patch": "@@ -15,9 +15,6 @@ foo (int i)\n   printf (3 + \"%d\\n\");\t\t/* { dg-warning \"zero-length\" \"zero-length string\" } */\n   printf (\"%d\\n\" + i, i);\t/* { dg-warning \"not a string\" \"non-constant addend\" } */\n   printf (\"%d\\n\" + 10);\t\t/* { dg-warning \"not a string\" \"too large addend\" } */\n-                                /* { dg-warning \"offset '10' outside bounds of constant string\" \"offset\" { target *-*-* } 17 } */\n   printf (\"%d\\n\" - 1, i);\t/* { dg-warning \"not a string\" \"minus constant\" } */\n-                                /* { dg-warning \"offset '-1' outside bounds of constant string\" \"offset\" { target *-*-* } 19 } */\n   printf (\"%d\\n\" + -1, i);\t/* { dg-warning \"not a string\" \"negative addend\" } */\n-                                /* { dg-warning \"offset '-1' outside bounds of constant string\" \"offset\" { target *-*-* } 21 } */\n }"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/testsuite/gcc.dg/pr35652.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35652.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2ed71b61a5f8a7d8c001516af6997d3fcaff403/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35652.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35652.c?ref=b2ed71b61a5f8a7d8c001516af6997d3fcaff403", "patch": "@@ -1,13 +0,0 @@\n-/* PR c++/35652: wrong location and duplicated warning.\n- { dg-do compile }\n- { dg-options \"\" } */\n-int bar()\n-{\n-  const char *s = 'z' + \"y\"; /* { dg-warning \"offset '122' outside bounds of constant string\" } */\n-}\n-\n-int g()\n-{\n-  char str[2];\n-  const char *p = str + sizeof(str);\n-}"}]}