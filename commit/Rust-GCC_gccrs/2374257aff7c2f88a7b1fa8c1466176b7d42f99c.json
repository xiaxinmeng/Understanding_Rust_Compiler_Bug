{"sha": "2374257aff7c2f88a7b1fa8c1466176b7d42f99c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM3NDI1N2FmZjdjMmY4OGE3YjFmYThjMTQ2NjE3NmI3ZDQyZjk5Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-11-05T19:17:00Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-11-05T19:17:00Z"}, "message": "trans.c (Subprogram_Body_to_gnu): For a function with copy-in/copy-out parameters and which returns by invisible...\n\n\t* gcc-interface/trans.c (Subprogram_Body_to_gnu): For a function with\n\tcopy-in/copy-out parameters and which returns by invisible reference,\n\tdo not create the variable for the return value; instead, manually\n\tgenerate the indirect copy out statements on exit.\n\t(gnat_to_gnu) <N_Simple_Return_Statement>: Adjust accordingly and build\n\ta simple indirect assignment for the return value.\n\nFrom-SVN: r217155", "tree": {"sha": "136fe8c9cc145da8d36ce16196a61a8380086f0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/136fe8c9cc145da8d36ce16196a61a8380086f0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2374257aff7c2f88a7b1fa8c1466176b7d42f99c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2374257aff7c2f88a7b1fa8c1466176b7d42f99c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2374257aff7c2f88a7b1fa8c1466176b7d42f99c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2374257aff7c2f88a7b1fa8c1466176b7d42f99c/comments", "author": null, "committer": null, "parents": [{"sha": "6c52b7dfc45578bd8470a3b6297ef3b04fd35926", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c52b7dfc45578bd8470a3b6297ef3b04fd35926", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c52b7dfc45578bd8470a3b6297ef3b04fd35926"}], "stats": {"total": 150, "additions": 120, "deletions": 30}, "files": [{"sha": "c4b8640153335feef4705b533b66ad0f915c895c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2374257aff7c2f88a7b1fa8c1466176b7d42f99c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2374257aff7c2f88a7b1fa8c1466176b7d42f99c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2374257aff7c2f88a7b1fa8c1466176b7d42f99c", "patch": "@@ -1,3 +1,12 @@\n+2014-11-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Subprogram_Body_to_gnu): For a function with\n+\tcopy-in/copy-out parameters and which returns by invisible reference,\n+\tdo not create the variable for the return value; instead, manually\n+\tgenerate the indirect copy out statements on exit.\n+\t(gnat_to_gnu) <N_Simple_Return_Statement>: Adjust accordingly and build\n+\ta simple indirect assignment for the return value.\n+\n 2014-11-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Record_Type>: For a"}, {"sha": "01c9234e166a10ab0011ce874704d1c7d6a7d0bd", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 59, "deletions": 30, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2374257aff7c2f88a7b1fa8c1466176b7d42f99c/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2374257aff7c2f88a7b1fa8c1466176b7d42f99c/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=2374257aff7c2f88a7b1fa8c1466176b7d42f99c", "patch": "@@ -3547,13 +3547,12 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n   gnu_result_decl = DECL_RESULT (gnu_subprog_decl);\n   gnu_subprog_type = TREE_TYPE (gnu_subprog_decl);\n   gnu_cico_list = TYPE_CI_CO_LIST (gnu_subprog_type);\n-  if (gnu_cico_list)\n-    gnu_return_var_elmt = value_member (void_type_node, gnu_cico_list);\n+  if (gnu_cico_list && TREE_VALUE (gnu_cico_list) == void_type_node)\n+    gnu_return_var_elmt = gnu_cico_list;\n \n   /* If the function returns by invisible reference, make it explicit in the\n-     function body.  See gnat_to_gnu_entity, E_Subprogram_Type case.\n-     Handle the explicit case here and the copy-in/copy-out case below.  */\n-  if (TREE_ADDRESSABLE (gnu_subprog_type) && !gnu_return_var_elmt)\n+     function body.  See gnat_to_gnu_entity, E_Subprogram_Type case.  */\n+  if (TREE_ADDRESSABLE (gnu_subprog_type))\n     {\n       TREE_TYPE (gnu_result_decl)\n \t= build_reference_type (TREE_TYPE (gnu_result_decl));\n@@ -3573,9 +3572,10 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n \n   begin_subprog_body (gnu_subprog_decl);\n \n-  /* If there are In Out or Out parameters, we need to ensure that the return\n-     statement properly copies them out.  We do this by making a new block and\n-     converting any return into a goto to a label at the end of the block.  */\n+  /* If there are copy-in/copy-out parameters, we need to ensure that they are\n+     properly copied out by the return statement.  We do this by making a new\n+     block and converting any return into a goto to a label at the end of the\n+     block.  */\n   if (gnu_cico_list)\n     {\n       tree gnu_return_var = NULL_TREE;\n@@ -3586,19 +3586,14 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n       start_stmt_group ();\n       gnat_pushlevel ();\n \n-      /* If this is a function with In Out or Out parameters, we also need a\n-\t variable for the return value to be placed.  */\n-      if (gnu_return_var_elmt)\n+      /* If this is a function with copy-in/copy-out parameters and which does\n+\t not return by invisible reference, we also need a variable for the\n+\t return value to be placed.  */\n+      if (gnu_return_var_elmt && !TREE_ADDRESSABLE (gnu_subprog_type))\n \t{\n \t  tree gnu_return_type\n \t    = TREE_TYPE (TREE_PURPOSE (gnu_return_var_elmt));\n \n-\t  /* If the function returns by invisible reference, make it\n-\t     explicit in the function body.  See gnat_to_gnu_entity,\n-\t     E_Subprogram_Type case.  */\n-\t  if (TREE_ADDRESSABLE (gnu_subprog_type))\n-\t    gnu_return_type = build_reference_type (gnu_return_type);\n-\n \t  gnu_return_var\n \t    = create_var_decl (get_identifier (\"RETVAL\"), NULL_TREE,\n \t\t\t       gnu_return_type, NULL_TREE, false, false,\n@@ -3693,22 +3688,54 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n      the label and copy statement.  */\n   if (gnu_cico_list)\n     {\n-      tree gnu_retval;\n+      const Node_Id gnat_end_label\n+\t= End_Label (Handled_Statement_Sequence (gnat_node));\n \n       gnu_return_var_stack->pop ();\n \n       add_stmt (gnu_result);\n       add_stmt (build1 (LABEL_EXPR, void_type_node,\n \t\t\tgnu_return_label_stack->last ()));\n \n-      if (list_length (gnu_cico_list) == 1)\n-\tgnu_retval = TREE_VALUE (gnu_cico_list);\n+      /* If this is a function which returns by invisible reference, the\n+\t return value has already been dealt with at the return statements,\n+\t so we only need to indirectly copy out the parameters.  */\n+      if (TREE_ADDRESSABLE (gnu_subprog_type))\n+\t{\n+\t  tree gnu_ret_deref\n+\t    = build_unary_op (INDIRECT_REF, NULL_TREE, gnu_result_decl);\n+\t  tree t;\n+\n+\t  gcc_assert (TREE_VALUE (gnu_cico_list) == void_type_node);\n+\n+\t  for (t = TREE_CHAIN (gnu_cico_list); t; t = TREE_CHAIN (t))\n+\t    {\n+\t      tree gnu_field_deref\n+\t\t= build_component_ref (gnu_ret_deref, NULL_TREE,\n+\t\t\t\t       TREE_PURPOSE (t), true);\n+\t      gnu_result = build2 (MODIFY_EXPR, void_type_node,\n+\t\t\t\t   gnu_field_deref, TREE_VALUE (t));\n+\t      add_stmt_with_node (gnu_result, gnat_end_label);\n+\t    }\n+\t}\n+\n+      /* Otherwise, if this is a procedure or a function which does not return\n+\t by invisible reference, we can do a direct block-copy out.  */\n       else\n-\tgnu_retval = build_constructor_from_list (TREE_TYPE (gnu_subprog_type),\n-\t\t\t\t\t\t  gnu_cico_list);\n+\t{\n+\t  tree gnu_retval;\n+\n+\t  if (list_length (gnu_cico_list) == 1)\n+\t    gnu_retval = TREE_VALUE (gnu_cico_list);\n+\t  else\n+\t    gnu_retval\n+\t      = build_constructor_from_list (TREE_TYPE (gnu_subprog_type),\n+\t\t\t\t\t     gnu_cico_list);\n+\n+\t  gnu_result = build_return_expr (gnu_result_decl, gnu_retval);\n+\t  add_stmt_with_node (gnu_result, gnat_end_label);\n+\t}\n \n-      add_stmt_with_node (build_return_expr (gnu_result_decl, gnu_retval),\n-\t\t\t  End_Label (Handled_Statement_Sequence (gnat_node)));\n       gnat_poplevel ();\n       gnu_result = end_stmt_group ();\n     }\n@@ -6539,9 +6566,11 @@ gnat_to_gnu (Node_Id gnat_node)\n \t  {\n \t    tree gnu_subprog_type = TREE_TYPE (current_function_decl);\n \n-\t    /* If this function has copy-in/copy-out parameters, get the real\n-\t       object for the return.  See Subprogram_to_gnu.  */\n-\t    if (TYPE_CI_CO_LIST (gnu_subprog_type))\n+\t    /* If this function has copy-in/copy-out parameters parameters and\n+\t       doesn't return by invisible reference, get the real object for\n+\t       the return.  See Subprogram_Body_to_gnu.  */\n+\t    if (TYPE_CI_CO_LIST (gnu_subprog_type)\n+\t\t&& !TREE_ADDRESSABLE (gnu_subprog_type))\n \t      gnu_ret_obj = gnu_return_var_stack->last ();\n \t    else\n \t      gnu_ret_obj = DECL_RESULT (current_function_decl);\n@@ -6615,8 +6644,8 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\ttree gnu_ret_deref\n \t\t  = build_unary_op (INDIRECT_REF, TREE_TYPE (gnu_ret_val),\n \t\t\t\t    gnu_ret_obj);\n-\t\tgnu_result = build_binary_op (MODIFY_EXPR, NULL_TREE,\n-\t\t\t\t\t      gnu_ret_deref, gnu_ret_val);\n+\t\tgnu_result = build2 (MODIFY_EXPR, void_type_node,\n+\t\t\t\t     gnu_ret_deref, gnu_ret_val);\n \t\tadd_stmt_with_node (gnu_result, gnat_node);\n \t\tgnu_ret_val = NULL_TREE;\n \t      }\n@@ -6629,7 +6658,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t   that label.  The return proper will be handled elsewhere.  */\n \tif (gnu_return_label_stack->last ())\n \t  {\n-\t    if (gnu_ret_obj)\n+\t    if (gnu_ret_val)\n \t      add_stmt (build_binary_op (MODIFY_EXPR, NULL_TREE, gnu_ret_obj,\n \t\t\t\t\t gnu_ret_val));\n "}, {"sha": "c699ce31b4fda897ed72debe6d97e334f2e4d56c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2374257aff7c2f88a7b1fa8c1466176b7d42f99c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2374257aff7c2f88a7b1fa8c1466176b7d42f99c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2374257aff7c2f88a7b1fa8c1466176b7d42f99c", "patch": "@@ -1,3 +1,8 @@\n+2014-11-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/discr42.adb: New test.\n+\t* gnat.dg/discr42_pkg.ad[sb]: New helper.\n+\n 2014-11-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/specs/private2.ads: New test."}, {"sha": "e3380b889bafcda9b4068b696da2b32f4801d322", "filename": "gcc/testsuite/gnat.dg/discr42.adb", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2374257aff7c2f88a7b1fa8c1466176b7d42f99c/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr42.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2374257aff7c2f88a7b1fa8c1466176b7d42f99c/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr42.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr42.adb?ref=2374257aff7c2f88a7b1fa8c1466176b7d42f99c", "patch": "@@ -0,0 +1,22 @@\n+-- { dg-do run }\n+\n+with Discr42_Pkg; use Discr42_Pkg;\n+\n+procedure Discr42 is\n+\n+  R : Rec;\n+  Pos : Natural := 1;\n+\n+begin\n+\n+  R := F (Pos);\n+\n+  if Pos /= 2 then\n+    raise Program_Error;\n+  end if;\n+\n+  if R /= (D => True, N => 4) then\n+    raise Program_Error;\n+  end if;\n+\n+end;"}, {"sha": "8ec584c8ca303b60cc6e89a09a8ced071daf66a8", "filename": "gcc/testsuite/gnat.dg/discr42_pkg.adb", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2374257aff7c2f88a7b1fa8c1466176b7d42f99c/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr42_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2374257aff7c2f88a7b1fa8c1466176b7d42f99c/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr42_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr42_pkg.adb?ref=2374257aff7c2f88a7b1fa8c1466176b7d42f99c", "patch": "@@ -0,0 +1,13 @@\n+package body Discr42_Pkg is\n+\n+   function F (Pos : in out Natural) return Rec is\n+   begin\n+      Pos := Pos + 1;\n+      if Pos > 1 then\n+        return (D => True, N => Pos * 2);\n+      else\n+        return (D => False);\n+      end if;\n+   end;\n+\n+end Discr42_Pkg;"}, {"sha": "b9bef43037c04b0472a2eb0721911ecf423f7e8c", "filename": "gcc/testsuite/gnat.dg/discr42_pkg.ads", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2374257aff7c2f88a7b1fa8c1466176b7d42f99c/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr42_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2374257aff7c2f88a7b1fa8c1466176b7d42f99c/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr42_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr42_pkg.ads?ref=2374257aff7c2f88a7b1fa8c1466176b7d42f99c", "patch": "@@ -0,0 +1,12 @@\n+package Discr42_Pkg is\n+\n+   type Rec (D : Boolean := False) is record\n+      case D is\n+         when True  => N : Natural;\n+         when False => null;\n+      end case;\n+   end record;\n+\n+   function F (Pos : in out Natural) return Rec;\n+\n+end Discr42_Pkg;"}]}