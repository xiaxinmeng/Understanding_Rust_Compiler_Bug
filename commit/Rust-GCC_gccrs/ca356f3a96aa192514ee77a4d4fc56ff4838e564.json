{"sha": "ca356f3a96aa192514ee77a4d4fc56ff4838e564", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EzNTZmM2E5NmFhMTkyNTE0ZWU3N2E0ZDRmYzU2ZmY0ODM4ZTU2NA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2000-10-09T14:04:33Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2000-10-09T14:04:33Z"}, "message": "arm.c (thumb_expand_movstrqi): Rewrite to support SSA form.\n\n* arm.c (thumb_expand_movstrqi): Rewrite to support SSA form.\n(thumb_output_move_mem_multiple): Support new insn format.\n* arm.md (movmem12b): Use SSA compatible format.\n(movmem8b): Likewise.\n\nFrom-SVN: r36809", "tree": {"sha": "3c687159d6c0586766ed1b3c72559f33d4462fb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c687159d6c0586766ed1b3c72559f33d4462fb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca356f3a96aa192514ee77a4d4fc56ff4838e564", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca356f3a96aa192514ee77a4d4fc56ff4838e564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca356f3a96aa192514ee77a4d4fc56ff4838e564", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca356f3a96aa192514ee77a4d4fc56ff4838e564/comments", "author": null, "committer": null, "parents": [{"sha": "cca0a211c156a81a0c6b46c002d75ce87ae9c512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cca0a211c156a81a0c6b46c002d75ce87ae9c512", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cca0a211c156a81a0c6b46c002d75ce87ae9c512"}], "stats": {"total": 93, "additions": 52, "deletions": 41}, "files": [{"sha": "202993af9a795461a466a8e5dc8ea6dff7a731dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca356f3a96aa192514ee77a4d4fc56ff4838e564/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca356f3a96aa192514ee77a4d4fc56ff4838e564/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca356f3a96aa192514ee77a4d4fc56ff4838e564", "patch": "@@ -1,3 +1,10 @@\n+2000-10-09  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.c (thumb_expand_movstrqi): Rewrite to support SSA form.\n+\t(thumb_output_move_mem_multiple): Support new insn format.\n+\t* arm.md (movmem12b): Use SSA compatible format.\n+\t(movmem8b): Likewise.\n+\n 2000-10-09  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm.md (predicable): New attribute, default to \"no\"."}, {"sha": "0e3e767952b42bcf6b95a430dadbdf495929cc41", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca356f3a96aa192514ee77a4d4fc56ff4838e564/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca356f3a96aa192514ee77a4d4fc56ff4838e564/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ca356f3a96aa192514ee77a4d4fc56ff4838e564", "patch": "@@ -9543,38 +9543,38 @@ thumb_output_move_mem_multiple (n, operands)\n   switch (n)\n     {\n     case 2:\n-      if (REGNO (operands[2]) > REGNO (operands[3]))\n+      if (REGNO (operands[4]) > REGNO (operands[5]))\n \t{\n-\t  tmp = operands[2];\n-\t  operands[2] = operands[3];\n-\t  operands[3] = tmp;\n+\t  tmp = operands[4];\n+\t  operands[4] = operands[5];\n+\t  operands[5] = tmp;\n \t}\n-      output_asm_insn (\"ldmia\\t%1!, {%2, %3}\", operands);\n-      output_asm_insn (\"stmia\\t%0!, {%2, %3}\", operands);\n+      output_asm_insn (\"ldmia\\t%1!, {%4, %5}\", operands);\n+      output_asm_insn (\"stmia\\t%0!, {%4, %5}\", operands);\n       break;\n \n     case 3:\n-      if (REGNO (operands[2]) > REGNO (operands[3]))\n+      if (REGNO (operands[4]) > REGNO (operands[5]))\n \t{\n-\t  tmp = operands[2];\n-\t  operands[2] = operands[3];\n-\t  operands[3] = tmp;\n+\t  tmp = operands[4];\n+\t  operands[4] = operands[5];\n+\t  operands[5] = tmp;\n \t}\n-      if (REGNO (operands[3]) > REGNO (operands[4]))\n+      if (REGNO (operands[5]) > REGNO (operands[6]))\n \t{\n-\t  tmp = operands[3];\n-\t  operands[3] = operands[4];\n-\t  operands[4] = tmp;\n+\t  tmp = operands[5];\n+\t  operands[5] = operands[6];\n+\t  operands[6] = tmp;\n \t}\n-      if (REGNO (operands[2]) > REGNO (operands[3]))\n+      if (REGNO (operands[4]) > REGNO (operands[5]))\n \t{\n-\t  tmp = operands[2];\n-\t  operands[2] = operands[3];\n-\t  operands[3] = tmp;\n+\t  tmp = operands[4];\n+\t  operands[4] = operands[5];\n+\t  operands[5] = tmp;\n \t}\n       \n-      output_asm_insn (\"ldmia\\t%1!, {%2, %3, %4}\", operands);\n-      output_asm_insn (\"stmia\\t%0!, {%2, %3, %4}\", operands);\n+      output_asm_insn (\"ldmia\\t%1!, {%4, %5, %6}\", operands);\n+      output_asm_insn (\"stmia\\t%0!, {%4, %5, %6}\", operands);\n       break;\n \n     default:\n@@ -9597,13 +9597,13 @@ thumb_expand_movstrqi (operands)\n \n   while (len >= 12)\n     {\n-      emit_insn (gen_movmem12b (out, in));\n+      emit_insn (gen_movmem12b (out, in, out, in));\n       len -= 12;\n     }\n   \n   if (len >= 8)\n     {\n-      emit_insn (gen_movmem8b (out, in));\n+      emit_insn (gen_movmem8b (out, in, out, in));\n       len -= 8;\n     }\n   "}, {"sha": "93f9901c77a3b0525aa1babf5cf3f9b5229c4f6b", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca356f3a96aa192514ee77a4d4fc56ff4838e564/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca356f3a96aa192514ee77a4d4fc56ff4838e564/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=ca356f3a96aa192514ee77a4d4fc56ff4838e564", "patch": "@@ -5298,17 +5298,19 @@\n ;; Block-move insns\n \n (define_insn \"movmem12b\"\n-  [(set (mem:SI (match_operand:SI 0 \"register_operand\" \"+&l\"))\n-\t(mem:SI (match_operand:SI 1 \"register_operand\" \"+&l\")))\n-   (set (mem:SI (plus:SI (match_dup 0) (const_int 4)))\n-\t(mem:SI (plus:SI (match_dup 1) (const_int 4))))\n-   (set (mem:SI (plus:SI (match_dup 0) (const_int 8)))\n-\t(mem:SI (plus:SI (match_dup 1) (const_int 8))))\n-   (set (match_dup 0) (plus:SI (match_dup 0) (const_int 12)))\n-   (set (match_dup 1) (plus:SI (match_dup 1) (const_int 12)))\n-   (clobber (match_scratch:SI 2 \"=&l\"))\n-   (clobber (match_scratch:SI 3 \"=&l\"))\n-   (clobber (match_scratch:SI 4 \"=&l\"))]\n+  [(set (mem:SI (match_operand:SI 2 \"register_operand\" \"0\"))\n+\t(mem:SI (match_operand:SI 3 \"register_operand\" \"1\")))\n+   (set (mem:SI (plus:SI (match_dup 2) (const_int 4)))\n+\t(mem:SI (plus:SI (match_dup 3) (const_int 4))))\n+   (set (mem:SI (plus:SI (match_dup 2) (const_int 8)))\n+\t(mem:SI (plus:SI (match_dup 3) (const_int 8))))\n+   (set (match_operand:SI 0 \"register_operand\" \"=l\")\n+\t(plus:SI (match_dup 2) (const_int 12)))\n+   (set (match_operand:SI 1 \"register_operand\" \"=l\")\n+\t(plus:SI (match_dup 3) (const_int 12)))\n+   (clobber (match_scratch:SI 4 \"=&l\"))\n+   (clobber (match_scratch:SI 5 \"=&l\"))\n+   (clobber (match_scratch:SI 6 \"=&l\"))]\n   \"TARGET_THUMB\"\n   \"* return thumb_output_move_mem_multiple (3, operands);\"\n   [(set_attr \"length\" \"4\")\n@@ -5318,14 +5320,16 @@\n )\n \n (define_insn \"movmem8b\"\n-  [(set (mem:SI (match_operand:SI 0 \"register_operand\" \"+&l\"))\n-\t(mem:SI (match_operand:SI 1 \"register_operand\" \"+&l\")))\n-   (set (mem:SI (plus:SI (match_dup 0) (const_int 4)))\n-\t(mem:SI (plus:SI (match_dup 1) (const_int 4))))\n-   (set (match_dup 0) (plus:SI (match_dup 0) (const_int 8)))\n-   (set (match_dup 1) (plus:SI (match_dup 1) (const_int 8)))\n-   (clobber (match_scratch:SI 2 \"=&l\"))\n-   (clobber (match_scratch:SI 3 \"=&l\"))]\n+  [(set (mem:SI (match_operand:SI 2 \"register_operand\" \"0\"))\n+\t(mem:SI (match_operand:SI 3 \"register_operand\" \"1\")))\n+   (set (mem:SI (plus:SI (match_dup 2) (const_int 4)))\n+\t(mem:SI (plus:SI (match_dup 3) (const_int 4))))\n+   (set (match_operand:SI 0 \"register_operand\" \"=l\")\n+\t(plus:SI (match_dup 2) (const_int 8)))\n+   (set (match_operand:SI 1 \"register_operand\" \"=l\")\n+\t(plus:SI (match_dup 3) (const_int 8)))\n+   (clobber (match_scratch:SI 4 \"=&l\"))\n+   (clobber (match_scratch:SI 5 \"=&l\"))]\n   \"TARGET_THUMB\"\n   \"* return thumb_output_move_mem_multiple (2, operands);\"\n   [(set_attr \"length\" \"4\")"}]}