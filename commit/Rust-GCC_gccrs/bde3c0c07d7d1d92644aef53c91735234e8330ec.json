{"sha": "bde3c0c07d7d1d92644aef53c91735234e8330ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRlM2MwYzA3ZDdkMWQ5MjY0NGFlZjUzYzkxNzM1MjM0ZTgzMzBlYw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-04-26T17:04:37Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-04-26T17:04:37Z"}, "message": "c-parse.in (yyoverflow): Revert.\n\n        * c-parse.in (yyoverflow): Revert.\n        * parse.y (yyoverflow): Revert.\n\nFrom-SVN: r52794", "tree": {"sha": "7cf30765ef4a2b66b363199785d8e7f3112f845d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cf30765ef4a2b66b363199785d8e7f3112f845d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bde3c0c07d7d1d92644aef53c91735234e8330ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde3c0c07d7d1d92644aef53c91735234e8330ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bde3c0c07d7d1d92644aef53c91735234e8330ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bde3c0c07d7d1d92644aef53c91735234e8330ec/comments", "author": null, "committer": null, "parents": [{"sha": "5276df1857226e7309b25a002daed2d8ef90802d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5276df1857226e7309b25a002daed2d8ef90802d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5276df1857226e7309b25a002daed2d8ef90802d"}], "stats": {"total": 77, "additions": 8, "deletions": 69}, "files": [{"sha": "8b23b5f8ca4cf41069318c3c49f07e4cd67ca300", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde3c0c07d7d1d92644aef53c91735234e8330ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde3c0c07d7d1d92644aef53c91735234e8330ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bde3c0c07d7d1d92644aef53c91735234e8330ec", "patch": "@@ -1,3 +1,7 @@\n+2002-04-26  Richard Henderson  <rth@redhat.com>\n+\n+        * c-parse.in (yyoverflow): Revert.\n+\n 2002-04-26  David Edelsohn  <edelsohn@gnu.org>\n \t    Richard Henderson  <rth@redhat.com>\n "}, {"sha": "ff279a1007942f4e956b6dba51fc801edfa1f3cf", "filename": "gcc/c-parse.in", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde3c0c07d7d1d92644aef53c91735234e8330ec/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde3c0c07d7d1d92644aef53c91735234e8330ec/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=bde3c0c07d7d1d92644aef53c91735234e8330ec", "patch": "@@ -61,41 +61,6 @@ end ifobjc\n \n /* Like YYERROR but do call yyerror.  */\n #define YYERROR1 { yyerror (\"syntax error\"); YYERROR; }\n-\n-/* Like the default stack expander, except (1) use realloc when possible,\n-   and (2) impose no hard maxiumum on stack size.  */\n-#define yyoverflow(MSG, SS, SSSIZE, VS, VSSIZE, YYSSZ)\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  size_t newsize;\t\t\t\t\t\t\t\\\n-  short *newss;\t\t\t\t\t\t\t\t\\\n-  YYSTYPE *newvs;\t\t\t\t\t\t\t\\\n-  newsize = *(YYSSZ) *= 2;\t\t\t\t\t\t\\\n-  if (yyfree_stacks)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      newss = (short *)\t\t\t\t\t\t\t\\\n-\treally_call_realloc (*(SS), newsize * sizeof (short));\t\t\\\n-      newvs = (YYSTYPE *)\t\t\t\t\t\t\\\n-\treally_call_realloc (*(VS), newsize * sizeof (YYSTYPE));\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      newss = (short *) really_call_malloc (newsize * sizeof (short));\t\\\n-      if (newss)\t\t\t\t\t\t\t\\\n-        memcpy (newss, *(SS), (SSSIZE));\t\t\t\t\\\n-      newvs = (YYSTYPE *) really_call_malloc (newsize * sizeof (YYSTYPE)); \\\n-      if (newvs)\t\t\t\t\t\t\t\\\n-        memcpy (newvs, *(VS), (VSSIZE));\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  if (!newss || !newvs)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      yyerror (MSG);\t\t\t\t\t\t\t\\\n-      return 2;\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  yyfree_stacks = 1;\t\t\t\t\t\t\t\\\n-  *(SS) = newss;\t\t\t\t\t\t\t\\\n-  *(VS) = newvs;\t\t\t\t\t\t\t\\\n-} while (0)\n-\n %}\n \n %start program"}, {"sha": "e8aa22ae1c90472ad8fe3865d0319f9f7918f16a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde3c0c07d7d1d92644aef53c91735234e8330ec/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde3c0c07d7d1d92644aef53c91735234e8330ec/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bde3c0c07d7d1d92644aef53c91735234e8330ec", "patch": "@@ -1,3 +1,7 @@\n+2002-04-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* parse.y (yyoverflow): Revert.\n+\n 2002-04-26  Richard Henderson  <rth@redhat.com>\n \n \tPR c/3581"}, {"sha": "0f963619495a188366f07fedd85c5fedf9fa9e1e", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bde3c0c07d7d1d92644aef53c91735234e8330ec/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bde3c0c07d7d1d92644aef53c91735234e8330ec/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=bde3c0c07d7d1d92644aef53c91735234e8330ec", "patch": "@@ -48,40 +48,6 @@ extern struct obstack permanent_obstack;\n /* Like YYERROR but do call yyerror.  */\n #define YYERROR1 { yyerror (\"syntax error\"); YYERROR; }\n \n-/* Like the default stack expander, except (1) use realloc when possible,\n-   and (2) impose no hard maxiumum on stack size.  */\n-#define yyoverflow(MSG, SS, SSSIZE, VS, VSSIZE, YYSSZ)\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\t\\\n-  size_t newsize;\t\t\t\t\t\t\t\\\n-  short *newss;\t\t\t\t\t\t\t\t\\\n-  YYSTYPE *newvs;\t\t\t\t\t\t\t\\\n-  newsize = *(YYSSZ) *= 2;\t\t\t\t\t\t\\\n-  if (yyfree_stacks)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      newss = (short *)\t\t\t\t\t\t\t\\\n-\treally_call_realloc (*(SS), newsize * sizeof (short));\t\t\\\n-      newvs = (YYSTYPE *)\t\t\t\t\t\t\\\n-\treally_call_realloc (*(VS), newsize * sizeof (YYSTYPE));\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      newss = (short *) really_call_malloc (newsize * sizeof (short));\t\\\n-      if (newss)\t\t\t\t\t\t\t\\\n-        memcpy (newss, *(SS), (SSSIZE));\t\t\t\t\\\n-      newvs = (YYSTYPE *) really_call_malloc (newsize * sizeof (YYSTYPE)); \\\n-      if (newvs)\t\t\t\t\t\t\t\\\n-        memcpy (newvs, *(VS), (VSSIZE));\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  if (!newss || !newvs)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      yyerror (MSG);\t\t\t\t\t\t\t\\\n-      return 2;\t\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  yyfree_stacks = 1;\t\t\t\t\t\t\t\\\n-  *(SS) = newss;\t\t\t\t\t\t\t\\\n-  *(VS) = newvs;\t\t\t\t\t\t\t\\\n-} while (0)\n-\n #define OP0(NODE) (TREE_OPERAND (NODE, 0))\n #define OP1(NODE) (TREE_OPERAND (NODE, 1))\n "}]}