{"sha": "afdd220a0ccf9d5a689b6aceccd8327213a51b9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZkZDIyMGEwY2NmOWQ1YTY4OWI2YWNlY2NkODMyNzIxM2E1MWI5Yg==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-13T00:16:23Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-08-13T00:16:23Z"}, "message": "Daily bump.", "tree": {"sha": "96a1b3a4431d65fbeec2bb125eb18e1df99a2faa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96a1b3a4431d65fbeec2bb125eb18e1df99a2faa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afdd220a0ccf9d5a689b6aceccd8327213a51b9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afdd220a0ccf9d5a689b6aceccd8327213a51b9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afdd220a0ccf9d5a689b6aceccd8327213a51b9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afdd220a0ccf9d5a689b6aceccd8327213a51b9b/comments", "author": null, "committer": null, "parents": [{"sha": "32c69a56981bd72a52b7d234a2936020f97909d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32c69a56981bd72a52b7d234a2936020f97909d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32c69a56981bd72a52b7d234a2936020f97909d1"}], "stats": {"total": 192, "additions": 191, "deletions": 1}, "files": [{"sha": "56ee7d467d703e44b592044b90a2ec64aa896a16", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afdd220a0ccf9d5a689b6aceccd8327213a51b9b/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afdd220a0ccf9d5a689b6aceccd8327213a51b9b/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=afdd220a0ccf9d5a689b6aceccd8327213a51b9b", "patch": "@@ -1,3 +1,7 @@\n+2020-08-12  Senthil Kumar Selvaraj  <saaadhu@gcc.gnu.org>\n+\n+\t* MAINTAINERS: Update my email address.\n+\n 2020-07-30  Joe Ramsay  <joe.ramsay@arm.com>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "676585fdb37fee16c98fdc1083dcf329bddb9b81", "filename": "gcc/ChangeLog", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afdd220a0ccf9d5a689b6aceccd8327213a51b9b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afdd220a0ccf9d5a689b6aceccd8327213a51b9b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=afdd220a0ccf9d5a689b6aceccd8327213a51b9b", "patch": "@@ -1,3 +1,82 @@\n+2020-08-12  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/96558\n+\t* config/i386/i386.md (peephole2): Only reorder register clearing\n+\tinstructions to allow use of xor for general registers.\n+\n+2020-08-12  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/96482\n+\t* ipa-cp.c (ipcp_bits_lattice::meet_with_1): Drop value bits\n+\tfor bits that are unknown.\n+\t(ipcp_bits_lattice::set_to_constant): Likewise.\n+\t* tree-ssa-ccp.c (get_default_value): Add sanity check that\n+\tIPA CP bit info has all bits set to zero in bits that\n+\tare unknown.\n+\n+2020-08-12  Peixin Qiao  <qiaopeixin@huawei.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_function_value): Add if\n+\tcondition to check ag_mode after entering if condition of\n+\taarch64_vfp_is_call_or_return_candidate. If TARGET_FLOAT is\n+\tset as false by -mgeneral-regs-only, report the diagnostic\n+\tinformation of -mgeneral-regs-only imcompatible with the use\n+\tof fp/simd register(s).\n+\n+2020-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96535\n+\t* toplev.c (process_options): Move flag_unroll_loops and\n+\tflag_cunroll_grow_size handling from here to ...\n+\t* opts.c (finish_options): ... here.  For flag_cunroll_grow_size,\n+\tdon't check for AUTODETECT_VALUE, but instead check\n+\topts_set->x_flag_cunroll_grow_size.\n+\t* common.opt (funroll-completely-grow-size): Default to 0.\n+\t* config/rs6000/rs6000.c (TARGET_OVERRIDE_OPTIONS_AFTER_CHANGE):\n+\tRedefine.\n+\t(rs6000_override_options_after_change): New function.\n+\t(rs6000_option_override_internal): Call it.  Move there the\n+\tflag_cunroll_grow_size, unroll_only_small_loops and\n+\tflag_rename_registers handling.\n+\n+2020-08-12  Tom de Vries  <tdevries@suse.de>\n+\n+\t* config/nvptx/nvptx.c (nvptx_assemble_decl_begin): Make elt_size an\n+\tunsigned HOST_WIDE_INT.  Print init_frag.remaining using\n+\tHOST_WIDE_INT_PRINT_UNSIGNED.\n+\n+2020-08-12  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (peephole2): Reduce unnecessary\n+\tregister shuffling produced by register allocation.\n+\n+2020-08-12  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* ipa-fnsummary.c (evaluate_conditions_for_known_args): Use vec<>\n+\tinstead of std::vector<>.\n+\t(evaluate_properties_for_edge): Same.\n+\t(ipa_fn_summary_t::duplicate): Same.\n+\t(estimate_ipcp_clone_size_and_time): Same.\n+\t* vec.h (<T, A, vl_embed>::embedded_size): Change vec_embedded\n+\ttype to contain a char[].\n+\n+2020-08-12  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR target/96308\n+\t* config/s390/s390.c (s390_cannot_force_const_mem): Reject an\n+\tunary minus for everything not being a numeric constant.\n+\t(legitimize_tls_address): Move a NEG out of the CONST rtx.\n+\n+2020-08-12  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR target/96456\n+\t* config/s390/s390.h (TARGET_NONSIGNALING_VECTOR_COMPARE_OK): New\n+\tmacro.\n+\t* config/s390/vector.md (vcond_comparison_operator): Use new macro\n+\tfor the check.\n+\n 2020-08-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/96539"}, {"sha": "faeb40f4ca83a987a54408fa51c7c5523f8d37c1", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afdd220a0ccf9d5a689b6aceccd8327213a51b9b/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afdd220a0ccf9d5a689b6aceccd8327213a51b9b/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=afdd220a0ccf9d5a689b6aceccd8327213a51b9b", "patch": "@@ -1 +1 @@\n-20200812\n+20200813"}, {"sha": "fd771c03d11c4eead32a8a0c2fb270678a3994d4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afdd220a0ccf9d5a689b6aceccd8327213a51b9b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afdd220a0ccf9d5a689b6aceccd8327213a51b9b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=afdd220a0ccf9d5a689b6aceccd8327213a51b9b", "patch": "@@ -1,3 +1,13 @@\n+2020-08-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.h: Add OMP_LIST_NONTEMPORAL.\n+\t* dump-parse-tree.c (show_omp_clauses): Dump it\n+\t* openmp.c (enum omp_mask1): Add OMP_CLAUSE_NOTEMPORAL.\n+\t(OMP_SIMD_CLAUSES): Add it.\n+\t(gfc_match_omp_clauses): Match nontemporal clause.\n+\t* trans-openmp.c (gfc_trans_omp_clauses): Process\n+\tnontemporal clause.\n+\n 2020-08-10  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/96556"}, {"sha": "8daa6fdd268e4e31d94f2c0459707474fa528f29", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afdd220a0ccf9d5a689b6aceccd8327213a51b9b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afdd220a0ccf9d5a689b6aceccd8327213a51b9b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=afdd220a0ccf9d5a689b6aceccd8327213a51b9b", "patch": "@@ -1,3 +1,71 @@\n+2020-08-12  Roger Sayle  <roger@nextmovesoftware.com>\n+\t    Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/96558\n+\t* gcc.dg/pr96558.c: New test.\n+\n+2020-08-12  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/96482\n+\t* gcc.dg/ipa/pr96482.c: New test.\n+\n+2020-08-12  Peixin Qiao  <qiaopeixin@huawei.com>\n+\n+\t* gcc.target/aarch64/mgeneral-regs_1.c: Add the comment that\n+\t-mgeneral-regs-only is compatible with the use of vector type\n+\tused in the test case.\n+\n+2020-08-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/nontemporal-1.f90: New test.\n+\t* gfortran.dg/gomp/nontemporal-2.f90: New test.\n+\n+2020-08-12  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gcc.target/nvptx/ia64-sync-1.c: New test.\n+\t* gcc.target/nvptx/ia64-sync-2.c: New test.\n+\t* gcc.target/nvptx/ia64-sync-3.c: New test.\n+\t* gcc.target/nvptx/ia64-sync-4.c: New test.\n+\n+2020-08-12  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\tPR testsuite/96519\n+\t* gcc.dg/ia64-sync-5.c (AC, init_qi, test_qi): Change element type to\n+\tsigned char.\n+\n+2020-08-12  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR testsuite/96566\n+\t* lib/target-supports.exp (check_effective_target_large_initializer):\n+\tNew proc.\n+\t* gcc.dg/builtin-object-size-21.c: Require large_initializer.\n+\t* gcc.dg/strlenopt-55.c: Same.\n+\n+2020-08-12  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/stack-protector-1.c: Adapt code to Cortex-M\n+\trestrictions.\n+\n+2020-08-12  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/multilib.exp: Fix parameter passing for gcc_opts.\n+\n+2020-08-12  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR target/96308\n+\t* g++.dg/pr96308.C: New test.\n+\n+2020-08-12  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR target/96456\n+\t* gcc.target/s390/pr96456.c: New test.\n+\n+2020-08-12  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/96525\n+\t* gcc.target/powerpc/pr96493.c: Make it a link test when no\n+\tpower10_hw.  Require power10_ok.\n+\n 2020-08-11  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* g++.dg/opt/flifetime-dse2.C: Remove AIX xfail."}, {"sha": "a248b7f9c55e416a4b6aef26a56344ceecd5ee1e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afdd220a0ccf9d5a689b6aceccd8327213a51b9b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afdd220a0ccf9d5a689b6aceccd8327213a51b9b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=afdd220a0ccf9d5a689b6aceccd8327213a51b9b", "patch": "@@ -1,3 +1,32 @@\n+2020-08-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/85828\n+\t* include/bits/basic_string.h (operator=(basic_string&&)): Check\n+\tfor self-move before copying with char_traits::copy.\n+\t* include/bits/hashtable.h (operator=(_Hashtable&&)): Check for\n+\tself-move.\n+\t* include/bits/stl_deque.h (_M_move_assign1(deque&&, false_type)):\n+\tCheck for equal allocators.\n+\t* include/bits/stl_list.h (_M_move_assign(list&&, true_type)):\n+\tCall clear() instead of _M_clear().\n+\t* include/debug/formatter.h (__msg_self_move_assign): Change\n+\tcomment.\n+\t* include/debug/macros.h (__glibcxx_check_self_move_assign):\n+\t(_GLIBCXX_DEBUG_VERIFY): Remove.\n+\t* include/debug/safe_container.h (operator=(_Safe_container&&)):\n+\tRemove assertion check for safe move and make it well-defined.\n+\t* include/debug/safe_iterator.h (operator=(_Safe_iterator&&)):\n+\tRemove assertion check for self-move.\n+\t* include/debug/safe_local_iterator.h\n+\t(operator=(_Safe_local_iterator&&)): Likewise.\n+\t* testsuite/21_strings/basic_string/cons/char/self_move.cc: New test.\n+\t* testsuite/23_containers/deque/cons/self_move.cc: New test.\n+\t* testsuite/23_containers/forward_list/cons/self_move.cc: New test.\n+\t* testsuite/23_containers/list/cons/self_move.cc: New test.\n+\t* testsuite/23_containers/set/cons/self_move.cc: New test.\n+\t* testsuite/23_containers/unordered_set/cons/self_move.cc: New test.\n+\t* testsuite/23_containers/vector/cons/self_move.cc: New test.\n+\n 2020-08-11  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/91620"}]}