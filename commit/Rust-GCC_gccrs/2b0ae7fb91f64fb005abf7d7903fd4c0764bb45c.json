{"sha": "2b0ae7fb91f64fb005abf7d7903fd4c0764bb45c", "node_id": "C_kwDOANBUbNoAKDJiMGFlN2ZiOTFmNjRmYjAwNWFiZjdkNzkwM2ZkNGMwNzY0YmI0NWM", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-11-26T16:13:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-11-28T20:51:53Z"}, "message": "c++: simple-requirement starting with 'typename' [PR101733]\n\nUsually a requirement starting with 'typename' is a type-requirement, but it\nmight be a simple-requirement such as a functional cast to a typename-type.\n\n\tPR c++/101733\n\ngcc/cp/ChangeLog:\n\n\t* parser.cc (cp_parser_requirement): Parse tentatively for the\n\t'typename' case.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-requires32.C: New test.", "tree": {"sha": "6de19e3c1a6fc3c61e2069b3940d9c1c919319f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6de19e3c1a6fc3c61e2069b3940d9c1c919319f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b0ae7fb91f64fb005abf7d7903fd4c0764bb45c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b0ae7fb91f64fb005abf7d7903fd4c0764bb45c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b0ae7fb91f64fb005abf7d7903fd4c0764bb45c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b0ae7fb91f64fb005abf7d7903fd4c0764bb45c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "297bbe2d0dea083344e66e3e72fa791b5855a3de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/297bbe2d0dea083344e66e3e72fa791b5855a3de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/297bbe2d0dea083344e66e3e72fa791b5855a3de"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "a13fbe41309ec4ab12a5e72c5afe303d4da2acb0", "filename": "gcc/cp/parser.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b0ae7fb91f64fb005abf7d7903fd4c0764bb45c/gcc%2Fcp%2Fparser.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b0ae7fb91f64fb005abf7d7903fd4c0764bb45c/gcc%2Fcp%2Fparser.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.cc?ref=2b0ae7fb91f64fb005abf7d7903fd4c0764bb45c", "patch": "@@ -30737,7 +30737,20 @@ cp_parser_requirement (cp_parser *parser)\n   if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))\n     return cp_parser_compound_requirement (parser);\n   else if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TYPENAME))\n-    return cp_parser_type_requirement (parser);\n+    {\n+      /* It's probably a type-requirement.  */\n+      cp_parser_parse_tentatively (parser);\n+      tree req = cp_parser_type_requirement (parser);\n+      if (cp_parser_parse_definitely (parser))\n+\treturn req;\n+      /* No, maybe it's something like typename T::type(); */\n+      cp_parser_parse_tentatively (parser);\n+      req = cp_parser_simple_requirement (parser);\n+      if (cp_parser_parse_definitely (parser))\n+\treturn req;\n+      /* Non-tentative for the error.  */\n+      return cp_parser_type_requirement (parser);\n+    }\n   else if (cp_lexer_next_token_is_keyword (parser->lexer, RID_REQUIRES))\n     return cp_parser_nested_requirement (parser);\n   else"}, {"sha": "117b8920787ee4ad6b86765bba2088fad999c5a2", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires32.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b0ae7fb91f64fb005abf7d7903fd4c0764bb45c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b0ae7fb91f64fb005abf7d7903fd4c0764bb45c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires32.C?ref=2b0ae7fb91f64fb005abf7d7903fd4c0764bb45c", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/101733\n+// { dg-do compile { target c++20 } }\n+\n+template<class T>\n+requires requires {\n+    typename T::type;\n+    (typename T::type()); // (1)\n+    T::type();            // (2)\n+    typename T::type();   // (3)\n+}\n+void f(T) { }"}]}