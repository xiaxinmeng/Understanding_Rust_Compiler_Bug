{"sha": "910450c13f863770bb095264d2ad17b47befce48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEwNDUwYzEzZjg2Mzc3MGJiMDk1MjY0ZDJhZDE3YjQ3YmVmY2U0OA==", "commit": {"author": {"name": "Feng Wang", "email": "fengwang@nudt.edu.cn", "date": "2005-10-25T14:06:22Z"}, "committer": {"name": "Feng Wang", "email": "fengwang@gcc.gnu.org", "date": "2005-10-25T14:06:22Z"}, "message": "re PR fortran/22290 (Optimize Assigned GOTO to cause error with -O1 or higher)\n\n\n2005-10-25  Feng Wang  <fengwang@nudt.edu.cn>\n\n\tPR fortran/22290\n\t* trans-decl.c (gfc_add_assign_aux_vars): New function. Add two\n\tauxiliary variables.\n\t(gfc_get_symbol_decl): Use it when a variable, including dummy\n\targument, is assigned a label.\n\t(gfc_trans_assign_aux_var): New function. Set initial value of\n\tthe auxiliary variable explicitly.\n\t(gfc_trans_deferred_vars): Use it.\n\t* trans-stmt.c (gfc_conv_label_variable): Handle dummy argument.\n\n2005-10-25  Feng Wang  <fengwang@nudt.edu.cn>\n\n\tPR fortran/22290\n\t* gfortran.dg/assign_5.f90: New test.\n\t* gfortran.dg/assign_6.f: New test.\n\nFrom-SVN: r105887", "tree": {"sha": "e12dd319f2cc0587bce5949c803cad264e174183", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e12dd319f2cc0587bce5949c803cad264e174183"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/910450c13f863770bb095264d2ad17b47befce48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/910450c13f863770bb095264d2ad17b47befce48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/910450c13f863770bb095264d2ad17b47befce48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/910450c13f863770bb095264d2ad17b47befce48/comments", "author": null, "committer": null, "parents": [{"sha": "a22056479c1ec82073209cb070e310f3bddc7a59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a22056479c1ec82073209cb070e310f3bddc7a59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a22056479c1ec82073209cb070e310f3bddc7a59"}], "stats": {"total": 133, "additions": 116, "deletions": 17}, "files": [{"sha": "353e51558b8f8286481c904b7072f4ad0a6c16ae", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910450c13f863770bb095264d2ad17b47befce48/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910450c13f863770bb095264d2ad17b47befce48/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=910450c13f863770bb095264d2ad17b47befce48", "patch": "@@ -1,3 +1,15 @@\n+2005-10-25  Feng Wang  <fengwang@nudt.edu.cn>\n+\n+\tPR fortran/22290\n+\t* trans-decl.c (gfc_add_assign_aux_vars): New function. Add two\n+\tauxiliary variables.\n+\t(gfc_get_symbol_decl): Use it when a variable, including dummy\n+\targument, is assigned a label.\n+\t(gfc_trans_assign_aux_var): New function. Set initial value of\n+\tthe auxiliary variable explicitly.\n+\t(gfc_trans_deferred_vars): Use it.\n+\t* trans-stmt.c (gfc_conv_label_variable): Handle dummy argument.\n+\n 2005-10-24  Asher Langton  <langton2@llnl.gov>\n \n \tPR fortran/17031"}, {"sha": "15d9006d3d7b45d2ce41f04f2f839da24054237f", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 70, "deletions": 17, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910450c13f863770bb095264d2ad17b47befce48/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910450c13f863770bb095264d2ad17b47befce48/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=910450c13f863770bb095264d2ad17b47befce48", "patch": "@@ -723,6 +723,39 @@ gfc_create_string_length (gfc_symbol * sym)\n   return sym->ts.cl->backend_decl;\n }\n \n+/* If a variable is assigned a label, we add another two auxiliary\n+   variables.  */\n+\n+static void\n+gfc_add_assign_aux_vars (gfc_symbol * sym)\n+{\n+  tree addr;\n+  tree length;\n+  tree decl;\n+\n+  gcc_assert (sym->backend_decl);\n+\n+  decl = sym->backend_decl;\n+  gfc_allocate_lang_decl (decl);\n+  GFC_DECL_ASSIGN (decl) = 1;\n+  length = build_decl (VAR_DECL, create_tmp_var_name (sym->name),\n+\t\t       gfc_charlen_type_node);\n+  addr = build_decl (VAR_DECL, create_tmp_var_name (sym->name),\n+\t\t     pvoid_type_node);\n+  gfc_finish_var_decl (length, sym);\n+  gfc_finish_var_decl (addr, sym);\n+  /*  STRING_LENGTH is also used as flag. Less than -1 means that\n+      ASSIGN_ADDR can not be used. Equal -1 means that ASSIGN_ADDR is the\n+      target label's address. Otherwise, value is the length of a format string\n+      and ASSIGN_ADDR is its address.  */\n+  if (TREE_STATIC (length))\n+    DECL_INITIAL (length) = build_int_cst (NULL_TREE, -2);\n+  else\n+    gfc_defer_symbol_init (sym);\n+\n+  GFC_DECL_STRING_LEN (decl) = length;\n+  GFC_DECL_ASSIGN_ADDR (decl) = addr;\n+}\n \n /* Return the decl for a gfc_symbol, create it if it doesn't already\n    exist.  */\n@@ -780,6 +813,10 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n \t}\n \n       TREE_USED (sym->backend_decl) = 1;\n+      if (sym->attr.assign && GFC_DECL_ASSIGN (sym->backend_decl) == 0)\n+\t{\n+\t  gfc_add_assign_aux_vars (sym);\n+\t}\n       return sym->backend_decl;\n     }\n \n@@ -826,22 +863,6 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n \n   gfc_finish_var_decl (decl, sym);\n \n-  if (sym->attr.assign)\n-    {\n-      gfc_allocate_lang_decl (decl);\n-      GFC_DECL_ASSIGN (decl) = 1;\n-      length = gfc_create_var (gfc_charlen_type_node, sym->name);\n-      GFC_DECL_STRING_LEN (decl) = length;\n-      GFC_DECL_ASSIGN_ADDR (decl) = gfc_create_var (pvoid_type_node, sym->name);\n-      /* TODO: Need to check we don't change TREE_STATIC (decl) later.  */\n-      TREE_STATIC (length) = TREE_STATIC (decl);\n-      /*  STRING_LENGTH is also used as flag. Less than -1 means that\n-          ASSIGN_ADDR can not be used. Equal -1 means that ASSIGN_ADDR is the\n-          target label's address. Other value is the length of format string\n-          and ASSIGN_ADDR is the address of format string.  */\n-      DECL_INITIAL (length) = build_int_cst (NULL_TREE, -2);\n-    }\n-\n   if (sym->ts.type == BT_CHARACTER)\n     {\n       /* Character variables need special handling.  */\n@@ -866,6 +887,11 @@ gfc_get_symbol_decl (gfc_symbol * sym)\n     }\n   sym->backend_decl = decl;\n \n+  if (sym->attr.assign)\n+    {\n+      gfc_add_assign_aux_vars (sym);\n+    }\n+\n   if (TREE_STATIC (decl) && !sym->attr.use_assoc)\n     {\n       /* Add static initializer.  */\n@@ -2105,12 +2131,32 @@ gfc_trans_auto_character_variable (gfc_symbol * sym, tree fnbody)\n   return gfc_finish_block (&body);\n }\n \n+/* Set the initial value of ASSIGN statement auxiliary variable explicitly.  */\n+\n+static tree\n+gfc_trans_assign_aux_var (gfc_symbol * sym, tree fnbody)\n+{\n+  stmtblock_t body;\n+\n+  gcc_assert (sym->backend_decl);\n+  gfc_start_block (&body);\n+\n+  /* Set the initial value to length. See the comments in\n+     function gfc_add_assign_aux_vars in this file.  */\n+  gfc_add_modify_expr (&body, GFC_DECL_STRING_LEN (sym->backend_decl),\n+\t\t       build_int_cst (NULL_TREE, -2));\n+\n+  gfc_add_expr_to_block (&body, fnbody);\n+  return gfc_finish_block (&body);\n+}\n+\n \n /* Generate function entry and exit code, and add it to the function body.\n    This includes:\n     Allocation and initialization of array variables.\n     Allocation of character string variables.\n-    Initialization and possibly repacking of dummy arrays.  */\n+    Initialization and possibly repacking of dummy arrays.\n+    Initialization of ASSIGN statement auxiliary variable.  */\n \n static tree\n gfc_trans_deferred_vars (gfc_symbol * proc_sym, tree fnbody)\n@@ -2211,6 +2257,13 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, tree fnbody)\n \t    fnbody = gfc_trans_auto_character_variable (sym, fnbody);\n \t  gfc_set_backend_locus (&loc);\n \t}\n+      else if (sym->attr.assign)\n+\t{\n+\t  gfc_get_backend_locus (&loc);\n+\t  gfc_set_backend_locus (&sym->declared_at);\n+\t  fnbody = gfc_trans_assign_aux_var (sym, fnbody);\n+\t  gfc_set_backend_locus (&loc);\n+\t}\n       else\n \tgcc_unreachable ();\n     }"}, {"sha": "f0fefdc3580f4b0847460badb5b7d24baf186470", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910450c13f863770bb095264d2ad17b47befce48/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910450c13f863770bb095264d2ad17b47befce48/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=910450c13f863770bb095264d2ad17b47befce48", "patch": "@@ -91,6 +91,9 @@ gfc_conv_label_variable (gfc_se * se, gfc_expr * expr)\n   /* Deals with variable in common block. Get the field declaration.  */\n   if (TREE_CODE (se->expr) == COMPONENT_REF)\n     se->expr = TREE_OPERAND (se->expr, 1);\n+  /* Deals with dummy argument. Get the parameter declaration.  */\n+  else if (TREE_CODE (se->expr) == INDIRECT_REF)\n+    se->expr = TREE_OPERAND (se->expr, 0);\n }\n \n /* Translate a label assignment statement.  */"}, {"sha": "6039e88e932ed38aeb09d9237052d36ef823a544", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910450c13f863770bb095264d2ad17b47befce48/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910450c13f863770bb095264d2ad17b47befce48/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=910450c13f863770bb095264d2ad17b47befce48", "patch": "@@ -1,3 +1,9 @@\n+2005-10-25  Feng Wang  <fengwang@nudt.edu.cn>\n+\n+\tPR fortran/22290\n+\t* gfortran.dg/assign_5.f90: New test.\n+\t* gfortran.dg/assign_6.f: New test.\n+\n 2005-10-25  Uros Bizjak  <uros@kss-loka.si>\n \n \t* g++.dg/other/i386-1.C: Include i386-cpuid.h.  Pass if"}, {"sha": "632bd0917ee6362a3f7e3f38a6933ed17df4cbb8", "filename": "gcc/testsuite/gfortran.dg/assign_5.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910450c13f863770bb095264d2ad17b47befce48/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910450c13f863770bb095264d2ad17b47befce48/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_5.f90?ref=910450c13f863770bb095264d2ad17b47befce48", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do run }\n+! Assign a label to a dummy argument.\n+! Option passed to avoid excess errors from obsolete warning\n+! { dg-options \"-w\" }\n+\n+subroutine s1 (a)\n+integer a\n+assign 777 to a\n+go to a\n+777 continue\n+end\n+program test\n+call s1 (1)\n+end\n+"}, {"sha": "135546b142bfaeda9e4e86448df8a26c7cce4f97", "filename": "gcc/testsuite/gfortran.dg/assign_6.f", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910450c13f863770bb095264d2ad17b47befce48/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_6.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910450c13f863770bb095264d2ad17b47befce48/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_6.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassign_6.f?ref=910450c13f863770bb095264d2ad17b47befce48", "patch": "@@ -0,0 +1,10 @@\n+C { dg-do run }\n+C Option passed to avoid excess errors from obsolete warning\n+C { dg-options \"-w\" }\n+C PR22290\n+\n+      integer nz\n+      assign 93 to nz\n+      go to nz,(93)\n+  93  continue\n+      end"}]}