{"sha": "907ea3795591b85e2f4cf1c45a4cd8c1bd783892", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA3ZWEzNzk1NTkxYjg1ZTJmNGNmMWM0NWE0Y2Q4YzFiZDc4Mzg5Mg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-11T18:03:23Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-11T18:03:23Z"}, "message": "aarch64: Add support for unpacked SVE ABD\n\nThis patch adds support for unpacked SVE SABD and UABD.\nIt also rewrites the patterns so that they match as combine\npatterns without the need for REG_EQUAL notes.  Finally,\nthere was no pattern for merging with the second input,\nwhich can be handled by reversing the operands.\n\nThe type suffix needs to be taken from the element size rather\nthan the container size.\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (<su>abd<mode>_3): Extend from\n\tSVE_FULL_I to SVE_I.\n\t(*aarch64_cond_<su>abd<mode>_2): Likewise.\n\t(*aarch64_cond_<su>abd<mode>_any): Likewise.\n\t(@aarch64_pred_<su>abd<mode>): Likewise.  Use UNSPEC_PRED_X\n\tfor the max and min but not for the minus.\n\t(*aarch64_cond_<su>abd<mode>_3): New pattern.\n\ngcc/testsuite/\n\t* g++.target/aarch64/sve/abd_1.C: New test.\n\t* g++.target/aarch64/sve/cond_abd_1.C: Likewise.\n\t* g++.target/aarch64/sve/cond_abd_2.C: Likewise.\n\t* g++.target/aarch64/sve/cond_abd_3.C: Likewise.\n\t* g++.target/aarch64/sve/cond_abd_4.C: Likewise.", "tree": {"sha": "49c9854e3c9031ba64aecb8425b4bc66661a505e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49c9854e3c9031ba64aecb8425b4bc66661a505e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/907ea3795591b85e2f4cf1c45a4cd8c1bd783892", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907ea3795591b85e2f4cf1c45a4cd8c1bd783892", "html_url": "https://github.com/Rust-GCC/gccrs/commit/907ea3795591b85e2f4cf1c45a4cd8c1bd783892", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907ea3795591b85e2f4cf1c45a4cd8c1bd783892/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f8b0bba0359419fd453f31519420d6d69fdf710", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8b0bba0359419fd453f31519420d6d69fdf710", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f8b0bba0359419fd453f31519420d6d69fdf710"}], "stats": {"total": 350, "additions": 317, "deletions": 33}, "files": [{"sha": "8083749a07ebcb3075b8b5d3d62e12d271237e73", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 67, "deletions": 33, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907ea3795591b85e2f4cf1c45a4cd8c1bd783892/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907ea3795591b85e2f4cf1c45a4cd8c1bd783892/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=907ea3795591b85e2f4cf1c45a4cd8c1bd783892", "patch": "@@ -3973,10 +3973,10 @@\n \n ;; Unpredicated integer absolute difference.\n (define_expand \"<su>abd<mode>_3\"\n-  [(use (match_operand:SVE_FULL_I 0 \"register_operand\"))\n-   (USMAX:SVE_FULL_I\n-     (match_operand:SVE_FULL_I 1 \"register_operand\")\n-     (match_operand:SVE_FULL_I 2 \"register_operand\"))]\n+  [(use (match_operand:SVE_I 0 \"register_operand\"))\n+   (USMAX:SVE_I\n+     (match_operand:SVE_I 1 \"register_operand\")\n+     (match_operand:SVE_I 2 \"register_operand\"))]\n   \"TARGET_SVE\"\n   {\n     rtx pred = aarch64_ptrue_reg (<VPRED>mode);\n@@ -3988,17 +3988,20 @@\n \n ;; Predicated integer absolute difference.\n (define_insn \"@aarch64_pred_<su>abd<mode>\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_FULL_I\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (minus:SVE_FULL_I\n-\t     (USMAX:SVE_FULL_I\n-\t       (match_operand:SVE_FULL_I 2 \"register_operand\" \"%0, w\")\n-\t       (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\"))\n-\t     (<max_opp>:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(minus:SVE_I\n+\t  (unspec:SVE_I\n+\t    [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t     (USMAX:SVE_I\n+\t       (match_operand:SVE_I 2 \"register_operand\" \"%0, w\")\n+\t       (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))]\n+\t    UNSPEC_PRED_X)\n+\t  (unspec:SVE_I\n+\t    [(match_dup 1)\n+\t     (<max_opp>:SVE_I\n \t       (match_dup 2)\n-\t       (match_dup 3)))]\n-\t  UNSPEC_PRED_X))]\n+\t       (match_dup 3))]\n+\t    UNSPEC_PRED_X)))]\n   \"TARGET_SVE\"\n   \"@\n    <su>abd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n@@ -4033,19 +4036,19 @@\n \n ;; Predicated integer absolute difference, merging with the first input.\n (define_insn_and_rewrite \"*aarch64_cond_<su>abd<mode>_2\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n-\t   (minus:SVE_FULL_I\n-\t     (unspec:SVE_FULL_I\n+\t   (minus:SVE_I\n+\t     (unspec:SVE_I\n \t       [(match_operand 4)\n-\t\t(USMAX:SVE_FULL_I\n-\t\t  (match_operand:SVE_FULL_I 2 \"register_operand\" \"0, w\")\n-\t\t  (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, w\"))]\n+\t\t(USMAX:SVE_I\n+\t\t  (match_operand:SVE_I 2 \"register_operand\" \"0, w\")\n+\t\t  (match_operand:SVE_I 3 \"register_operand\" \"w, w\"))]\n \t       UNSPEC_PRED_X)\n-\t     (unspec:SVE_FULL_I\n+\t     (unspec:SVE_I\n \t       [(match_operand 5)\n-\t\t(<max_opp>:SVE_FULL_I\n+\t\t(<max_opp>:SVE_I\n \t\t  (match_dup 2)\n \t\t  (match_dup 3))]\n \t       UNSPEC_PRED_X))\n@@ -4062,25 +4065,56 @@\n   [(set_attr \"movprfx\" \"*,yes\")]\n )\n \n+;; Predicated integer absolute difference, merging with the second input.\n+(define_insn_and_rewrite \"*aarch64_cond_<su>abd<mode>_3\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (minus:SVE_I\n+\t     (unspec:SVE_I\n+\t       [(match_operand 4)\n+\t\t(USMAX:SVE_I\n+\t\t  (match_operand:SVE_I 2 \"register_operand\" \"w, w\")\n+\t\t  (match_operand:SVE_I 3 \"register_operand\" \"0, w\"))]\n+\t       UNSPEC_PRED_X)\n+\t     (unspec:SVE_I\n+\t       [(match_operand 5)\n+\t\t(<max_opp>:SVE_I\n+\t\t  (match_dup 2)\n+\t\t  (match_dup 3))]\n+\t       UNSPEC_PRED_X))\n+\t   (match_dup 3)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\"\n+  \"@\n+   <su>abd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %2.<Vetype>\n+   movprfx\\t%0, %3\\;<su>abd\\t%0.<Vetype>, %1/m, %0.<Vetype>, %2.<Vetype>\"\n+  \"&& (!CONSTANT_P (operands[4]) || !CONSTANT_P (operands[5]))\"\n+  {\n+    operands[4] = operands[5] = CONSTM1_RTX (<VPRED>mode);\n+  }\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n ;; Predicated integer absolute difference, merging with an independent value.\n (define_insn_and_rewrite \"*aarch64_cond_<su>abd<mode>_any\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=&w, &w, &w, &w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=&w, &w, &w, &w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl, Upl\")\n-\t   (minus:SVE_FULL_I\n-\t     (unspec:SVE_FULL_I\n+\t   (minus:SVE_I\n+\t     (unspec:SVE_I\n \t       [(match_operand 5)\n-\t\t(USMAX:SVE_FULL_I\n-\t\t  (match_operand:SVE_FULL_I 2 \"register_operand\" \"0, w, w, w, w\")\n-\t\t  (match_operand:SVE_FULL_I 3 \"register_operand\" \"w, 0, w, w, w\"))]\n+\t\t(USMAX:SVE_I\n+\t\t  (match_operand:SVE_I 2 \"register_operand\" \"0, w, w, w, w\")\n+\t\t  (match_operand:SVE_I 3 \"register_operand\" \"w, 0, w, w, w\"))]\n \t       UNSPEC_PRED_X)\n-\t     (unspec:SVE_FULL_I\n+\t     (unspec:SVE_I\n \t       [(match_operand 6)\n-\t\t(<max_opp>:SVE_FULL_I\n+\t\t(<max_opp>:SVE_I\n \t\t  (match_dup 2)\n \t\t  (match_dup 3))]\n \t       UNSPEC_PRED_X))\n-\t   (match_operand:SVE_FULL_I 4 \"aarch64_simd_reg_or_zero\" \"Dz, Dz, Dz, 0, w\")]\n+\t   (match_operand:SVE_I 4 \"aarch64_simd_reg_or_zero\" \"Dz, Dz, Dz, 0, w\")]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\n    && !rtx_equal_p (operands[2], operands[4])"}, {"sha": "0facf58ad10eafc8d19e09085c297cae4b9d4af5", "filename": "gcc/testsuite/g++.target/aarch64/sve/abd_1.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907ea3795591b85e2f4cf1c45a4cd8c1bd783892/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fabd_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907ea3795591b85e2f4cf1c45a4cd8c1bd783892/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fabd_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fabd_1.C?ref=907ea3795591b85e2f4cf1c45a4cd8c1bd783892", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_reg (TYPE a, TYPE b) \\\n+  { \\\n+    return (a > b ? a : b) - (a < b ? a : b); \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (int8_t, 32)\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (int8_t, 64)\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (int16_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (int8_t, 128)\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (int16_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (int32_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */"}, {"sha": "a93d1d1fd99ce8d6d3ad0d8129c58fd5f7dc7595", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_abd_1.C", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907ea3795591b85e2f4cf1c45a4cd8c1bd783892/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_abd_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907ea3795591b85e2f4cf1c45a4cd8c1bd783892/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_abd_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_abd_1.C?ref=907ea3795591b85e2f4cf1c45a4cd8c1bd783892", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_reg (TYPE a, TYPE b, TYPE c) \\\n+  { \\\n+    return c == 0 ? (a > b ? a : b) - (a < b ? a : b) : a; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (int8_t, 32)\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (int8_t, 64)\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (int16_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (int8_t, 128)\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (int16_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (int32_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x0\\]\\n[^L]*\\tsabd\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x0\\]\\n[^L]*\\tsabd\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\]\\n[^L]*\\tsabd\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x0\\]\\n[^L]*\\tsabd\\t\\1\\.h, p[0-7]/m, \\1\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\]\\n[^L]*\\tsabd\\t\\1\\.h, p[0-7]/m, \\1\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\]\\n[^L]*\\tsabd\\t\\1\\.s, p[0-7]/m, \\1\\.s, z[0-9]+\\.s\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x1\\]\\n[^L]*\\tsabd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, \\1\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x1\\]\\n[^L]*\\tsabd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, \\1\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\]\\n[^L]*\\tsabd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, \\1\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x1\\]\\n[^L]*\\tsabd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, \\1\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\]\\n[^L]*\\tsabd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, \\1\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\]\\n[^L]*\\tsabd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, \\1\\.s\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x0\\]\\n[^L]*\\tuabd\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x0\\]\\n[^L]*\\tuabd\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\]\\n[^L]*\\tuabd\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x0\\]\\n[^L]*\\tuabd\\t\\1\\.h, p[0-7]/m, \\1\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\]\\n[^L]*\\tuabd\\t\\1\\.h, p[0-7]/m, \\1\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\]\\n[^L]*\\tuabd\\t\\1\\.s, p[0-7]/m, \\1\\.s, z[0-9]+\\.s\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x1\\]\\n[^L]*\\tuabd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, \\1\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x1\\]\\n[^L]*\\tuabd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, \\1\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\]\\n[^L]*\\tuabd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, \\1\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x1\\]\\n[^L]*\\tuabd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, \\1\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\]\\n[^L]*\\tuabd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, \\1\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\]\\n[^L]*\\tuabd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, \\1\\.s\\n} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "ad6304aaaf8f5f1ffceadf470c71149983eb83fc", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_abd_2.C", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907ea3795591b85e2f4cf1c45a4cd8c1bd783892/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_abd_2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907ea3795591b85e2f4cf1c45a4cd8c1bd783892/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_abd_2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_abd_2.C?ref=907ea3795591b85e2f4cf1c45a4cd8c1bd783892", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_reg (TYPE a, TYPE b, TYPE c) \\\n+  { \\\n+    return c == 0 ? (a > b ? a : b) - (a < b ? a : b) : b; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (int8_t, 32)\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (int8_t, 64)\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (int16_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (int8_t, 128)\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (int16_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (int32_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x1\\]\\n[^L]*\\tsabd\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x1\\]\\n[^L]*\\tsabd\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\]\\n[^L]*\\tsabd\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x1\\]\\n[^L]*\\tsabd\\t\\1\\.h, p[0-7]/m, \\1\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\]\\n[^L]*\\tsabd\\t\\1\\.h, p[0-7]/m, \\1\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\]\\n[^L]*\\tsabd\\t\\1\\.s, p[0-7]/m, \\1\\.s, z[0-9]+\\.s\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x0\\]\\n[^L]*\\tsabd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, \\1\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x0\\]\\n[^L]*\\tsabd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, \\1\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\]\\n[^L]*\\tsabd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, \\1\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x0\\]\\n[^L]*\\tsabd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, \\1\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\]\\n[^L]*\\tsabd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, \\1\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\]\\n[^L]*\\tsabd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, \\1\\.s\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x1\\]\\n[^L]*\\tuabd\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x1\\]\\n[^L]*\\tuabd\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\]\\n[^L]*\\tuabd\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x1\\]\\n[^L]*\\tuabd\\t\\1\\.h, p[0-7]/m, \\1\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\]\\n[^L]*\\tuabd\\t\\1\\.h, p[0-7]/m, \\1\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x1\\]\\n[^L]*\\tuabd\\t\\1\\.s, p[0-7]/m, \\1\\.s, z[0-9]+\\.s\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x0\\]\\n[^L]*\\tuabd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, \\1\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x0\\]\\n[^L]*\\tuabd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, \\1\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\]\\n[^L]*\\tuabd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, \\1\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x0\\]\\n[^L]*\\tuabd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, \\1\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\]\\n[^L]*\\tuabd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, \\1\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x0\\]\\n[^L]*\\tuabd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, \\1\\.s\\n} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "29a8d2f4f77f9f14738726c65c227b2ffe1d8476", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_abd_3.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907ea3795591b85e2f4cf1c45a4cd8c1bd783892/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_abd_3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907ea3795591b85e2f4cf1c45a4cd8c1bd783892/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_abd_3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_abd_3.C?ref=907ea3795591b85e2f4cf1c45a4cd8c1bd783892", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_reg (TYPE a, TYPE b, TYPE c) \\\n+  { \\\n+    return c == 0 ? (a > b ? a : b) - (a < b ? a : b) : c; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (int8_t, 32)\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (int8_t, 64)\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (int16_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (int8_t, 128)\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (int16_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (int32_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x2\\]\\n[^L]*\\tsabd\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x2\\]\\n[^L]*\\tsabd\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2\\]\\n[^L]*\\tsabd\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x2\\]\\n[^L]*\\tsabd\\t\\1\\.h, p[0-7]/m, \\1\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2\\]\\n[^L]*\\tsabd\\t\\1\\.h, p[0-7]/m, \\1\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2\\]\\n[^L]*\\tsabd\\t\\1\\.s, p[0-7]/m, \\1\\.s, z[0-9]+\\.s\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.h, p[0-7]/z, \\[x2\\]\\n[^L]*\\tuabd\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x2\\]\\n[^L]*\\tuabd\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1b\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2\\]\\n[^L]*\\tuabd\\t\\1\\.b, p[0-7]/m, \\1\\.b, z[0-9]+\\.b\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.s, p[0-7]/z, \\[x2\\]\\n[^L]*\\tuabd\\t\\1\\.h, p[0-7]/m, \\1\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2\\]\\n[^L]*\\tuabd\\t\\1\\.h, p[0-7]/m, \\1\\.h, z[0-9]+\\.h\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+)\\.d, p[0-7]/z, \\[x2\\]\\n[^L]*\\tuabd\\t\\1\\.s, p[0-7]/m, \\1\\.s, z[0-9]+\\.s\\n} } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "b415731565283ebeb91ee52cedbc89a83591b54a", "filename": "gcc/testsuite/g++.target/aarch64/sve/cond_abd_4.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/907ea3795591b85e2f4cf1c45a4cd8c1bd783892/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_abd_4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/907ea3795591b85e2f4cf1c45a4cd8c1bd783892/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_abd_4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fcond_abd_4.C?ref=907ea3795591b85e2f4cf1c45a4cd8c1bd783892", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_OP(TYPE) \\\n+  TYPE \\\n+  test##_##TYPE##_reg (TYPE a, TYPE b, TYPE c) \\\n+  { \\\n+    return c == 1 ? (a > b ? a : b) - (a < b ? a : b) : 0; \\\n+  }\n+\n+#define TEST_TYPE(TYPE, SIZE) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_OP (TYPE##SIZE)\n+\n+TEST_TYPE (int8_t, 32)\n+TEST_TYPE (uint8_t, 32)\n+\n+TEST_TYPE (int8_t, 64)\n+TEST_TYPE (uint8_t, 64)\n+TEST_TYPE (int16_t, 64)\n+TEST_TYPE (uint16_t, 64)\n+\n+TEST_TYPE (int8_t, 128)\n+TEST_TYPE (uint8_t, 128)\n+TEST_TYPE (int16_t, 128)\n+TEST_TYPE (uint16_t, 128)\n+TEST_TYPE (int32_t, 128)\n+TEST_TYPE (uint32_t, 128)\n+\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tsabd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuabd\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.b, p[0-7]/z, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.h, p[0-7]/z, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tmovprfx\\tz[0-9]+\\.s, p[0-7]/z, z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}]}