{"sha": "0d9e23f4eee0ad4c8932e099cbed6233106fe0bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ5ZTIzZjRlZWUwYWQ0Yzg5MzJlMDk5Y2JlZDYyMzMxMDZmZTBiZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-01-11T18:24:46Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-01-11T18:24:46Z"}, "message": "mn10300: fp insn cleanup\n\nDelete integer-mode abssf2, negsf2; these will be handled\nby the middle-end now.  Delete unnecessary expanders.\n\nFrom-SVN: r168673", "tree": {"sha": "bb4b74e85d41ca85b513c76179d7427bf14e7b36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb4b74e85d41ca85b513c76179d7427bf14e7b36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d9e23f4eee0ad4c8932e099cbed6233106fe0bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d9e23f4eee0ad4c8932e099cbed6233106fe0bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d9e23f4eee0ad4c8932e099cbed6233106fe0bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d9e23f4eee0ad4c8932e099cbed6233106fe0bf/comments", "author": null, "committer": null, "parents": [{"sha": "c157b3f0d29f77e54a83a97eb4835668c25dd9a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c157b3f0d29f77e54a83a97eb4835668c25dd9a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c157b3f0d29f77e54a83a97eb4835668c25dd9a5"}], "stats": {"total": 217, "additions": 27, "deletions": 190}, "files": [{"sha": "ddcb3bc826f963168edcade692bb0be76242df4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d9e23f4eee0ad4c8932e099cbed6233106fe0bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d9e23f4eee0ad4c8932e099cbed6233106fe0bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d9e23f4eee0ad4c8932e099cbed6233106fe0bf", "patch": "@@ -1,5 +1,10 @@\n 2011-01-11  Richard Henderson  <rth@redhat.com>\n \n+\t* config/mn10300/mn10300.md (absdf2, negdf2): Remove.\n+\t(abssf2, negsf2): Define only for hardware fp.\n+\t(sqrtsf2): Reformat.\n+\t(addsf3, subsf3, mulsf3): Merge expander and insn.\n+\n \t* config/mn10300/mn10300.h (ARG_PIONTER_CFA_OFFSET): New.\n \t(DEBUGGER_AUTO_OFFSET): Remove.\n \t(DEBUGGER_ARG_OFFSET): Remove."}, {"sha": "3a266960ffea78de12a4c234ff7a9510ab7e0bcb", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 22, "deletions": 190, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d9e23f4eee0ad4c8932e099cbed6233106fe0bf/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d9e23f4eee0ad4c8932e099cbed6233106fe0bf/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=0d9e23f4eee0ad4c8932e099cbed6233106fe0bf", "patch": "@@ -2577,74 +2577,8 @@\n ;; ----------------------------------------------------------------------\n ;; FP INSTRUCTIONS\n ;; ----------------------------------------------------------------------\n-;;\n-;; The mn103 series does not have floating point instructions, but since\n-;; FP values are held in integer regs, we can clear the high bit easily\n-;; which gives us an efficient inline floating point absolute value.\n-;;\n-;; Similarly for negation of a FP value.\n-;;\n-\n-(define_expand \"absdf2\"\n-  [(set (match_operand:DF         0 \"register_operand\")\n-        (abs:DF (match_operand:DF 1 \"register_operand\")))]\n-  \"\"\n-  \"\n-{\n-  rtx target, result, insns;\n-\n-  start_sequence ();\n-  target = operand_subword (operands[0], 1, 1, DFmode);\n-  result = expand_binop (SImode, and_optab,\n-\t\t\t operand_subword_force (operands[1], 1, DFmode),\n-\t\t\t GEN_INT (0x7fffffff), target, 0, OPTAB_WIDEN);\n-\n-  gcc_assert (result);\n-\n-  if (result != target)\n-    emit_move_insn (result, target);\n-\n-  emit_move_insn (operand_subword (operands[0], 0, 1, DFmode),\n-\t\t  operand_subword_force (operands[1], 0, DFmode));\n-\n-  insns = get_insns ();\n-  end_sequence ();\n-\n-  emit_insn (insns);\n-  DONE;\n-}\")\n-\n-(define_expand \"abssf2\"\n-  [(set (match_operand:SF         0 \"register_operand\")\n-        (abs:SF (match_operand:SF 1 \"register_operand\")))]\n-  \"\"\n-  \"\n-{\n-  rtx result;\n-  rtx target;\n-\n-  if (TARGET_AM33_2)\n-    {\n-      emit_insn (gen_abssf2_am33_2 (operands[0], operands[1]));\n-      DONE;\n-    }\n-\n-  target = operand_subword_force (operands[0], 0, SFmode);\n-  result = expand_binop (SImode, and_optab,\n-\t\t\t operand_subword_force (operands[1], 0, SFmode),\n-\t\t\t GEN_INT (0x7fffffff), target, 0, OPTAB_WIDEN);\n-  gcc_assert (result);\n \n-  if (result != target)\n-    emit_move_insn (result, target);\n-\n-  /* Make a place for REG_EQUAL.  */\n-  emit_move_insn (operands[0], operands[0]);\n-  DONE;\n-}\")\n-\n-\n-(define_insn \"abssf2_am33_2\"\n+(define_insn \"abssf2\"\n   [(set (match_operand:SF         0 \"register_operand\" \"=f,f\")\n \t(abs:SF (match_operand:SF 1 \"register_operand\" \"0,?f\")))]\n   \"TARGET_AM33_2\"\n@@ -2655,67 +2589,7 @@\n \t\t\t\t       (const_int 17) (const_int 14)))]\n )\n \n-(define_expand \"negdf2\"\n-  [(set (match_operand:DF         0 \"register_operand\")\n-        (neg:DF (match_operand:DF 1 \"register_operand\")))]\n-  \"\"\n-  \"\n-{\n-  rtx target, result, insns;\n-\n-  start_sequence ();\n-  target = operand_subword (operands[0], 1, 1, DFmode);\n-  result = expand_binop (SImode, xor_optab,\n-\t\t\t operand_subword_force (operands[1], 1, DFmode),\n-\t\t\t GEN_INT (trunc_int_for_mode (0x80000000, SImode)),\n-\t\t\t target, 0, OPTAB_WIDEN);\n-\n-  gcc_assert (result);\n-\n-  if (result != target)\n-    emit_move_insn (result, target);\n-\n-  emit_move_insn (operand_subword (operands[0], 0, 1, DFmode),\n-\t\t  operand_subword_force (operands[1], 0, DFmode));\n-\n-  insns = get_insns ();\n-  end_sequence ();\n-\n-  emit_insn (insns);\n-  DONE;\n-}\")\n-\n-(define_expand \"negsf2\"\n-  [(set (match_operand:SF         0 \"register_operand\")\n-        (neg:SF (match_operand:SF 1 \"register_operand\")))]\n-  \"\"\n-  \"\n-{\n-  rtx result;\n-  rtx target;\n-\n-  if (TARGET_AM33_2)\n-    {\n-      emit_insn (gen_negsf2_am33_2 (operands[0], operands[1]));\n-      DONE;\n-    }\n-\n-  target = operand_subword_force (operands[0], 0, SFmode);\n-  result = expand_binop (SImode, xor_optab,\n-\t\t\t operand_subword_force (operands[1], 0, SFmode),\n-\t\t\t GEN_INT (trunc_int_for_mode (0x80000000, SImode)),\n-\t\t\t target, 0, OPTAB_WIDEN);\n-  gcc_assert (result);\n-\n-  if (result != target)\n-    emit_move_insn (result, target);\n-\n-  /* Make a place for REG_EQUAL.  */\n-  emit_move_insn (operands[0], operands[0]);\n-  DONE;\n-}\")\n-\n-(define_insn \"negsf2_am33_2\"\n+(define_insn \"negsf2\"\n   [(set (match_operand:SF         0 \"register_operand\" \"=f,f\")\n \t(neg:SF (match_operand:SF 1 \"register_operand\" \"0,?f\")))]\n   \"TARGET_AM33_2\"\n@@ -2727,27 +2601,22 @@\n )\n \n (define_expand \"sqrtsf2\"\n-  [(parallel [(set (match_operand:SF          0 \"register_operand\" \"\")\n-\t\t   (sqrt:SF (match_operand:SF 1 \"register_operand\" \"\")))\n-\t      (clobber (reg:CC_FLOAT CC_REG))\n-\t     ])\n-  ]\n+  [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t(sqrt:SF (match_operand:SF 1 \"register_operand\" \"\")))]\n   \"TARGET_AM33_2 && flag_unsafe_math_optimizations\"\n-  \"\n-  {\n-    rtx scratch = gen_reg_rtx (SFmode);\n-    emit_insn (gen_rsqrtsf2 (scratch, operands[1], CONST1_RTX (SFmode)));\n-    emit_insn (gen_divsf3 (operands[0], force_reg (SFmode, CONST1_RTX (SFmode)),\n-\t\t\t   scratch));\n-    DONE;\n-  }\")\n+{\n+  rtx scratch = gen_reg_rtx (SFmode);\n+  emit_insn (gen_rsqrtsf2 (scratch, operands[1], CONST1_RTX (SFmode)));\n+  emit_insn (gen_divsf3 (operands[0], force_reg (SFmode, CONST1_RTX (SFmode)),\n+\t\t\t scratch));\n+  DONE;\n+})\n \n (define_insn \"rsqrtsf2\"\n   [(set (match_operand:SF                  0 \"register_operand\" \"=f,f\")\n \t(div:SF (match_operand:SF          2 \"const_1f_operand\" \"F,F\")\n \t\t(sqrt:SF (match_operand:SF 1 \"register_operand\" \"0,?f\"))))\n-   (clobber (reg:CC_FLOAT CC_REG))\n-  ]\n+   (clobber (reg:CC_FLOAT CC_REG))]\n   \"TARGET_AM33_2\"\n   \"@\n    frsqrt %0\n@@ -2756,22 +2625,11 @@\n \t\t\t\t       (const_int 4753) (const_int 2327)))]\n )\n \n-(define_expand \"addsf3\"\n-  [(parallel [(set (match_operand:SF          0 \"register_operand\")\n-\t\t   (plus:SF (match_operand:SF 1 \"register_operand\")\n-\t\t\t    (match_operand:SF 2 \"nonmemory_operand\")))\n-\t      (clobber (reg:CC_FLOAT CC_REG))])\n-  ]\n-  \"TARGET_AM33_2\"\n-  \"\"\n-)\n-\n-(define_insn \"*addsf3_internal\"\n+(define_insn \"addsf3\"\n   [(set (match_operand:SF          0 \"register_operand\" \"=f,f\")\n \t(plus:SF (match_operand:SF 1 \"register_operand\" \"%0,f\")\n \t\t (match_operand:SF 2 \"nonmemory_operand\" \"f,?fF\")))\n-   (clobber (reg:CC_FLOAT CC_REG))\n-  ]\n+   (clobber (reg:CC_FLOAT CC_REG))]\n   \"TARGET_AM33_2\"\n   \"@\n    fadd %2, %0\n@@ -2781,26 +2639,14 @@\n \t\t\t\t\t(const_int 17) (const_int 14))\n \t\t\t  (if_then_else (eq_attr \"cpu\" \"am34\")\n \t\t\t\t\t(const_int 17) (const_int 25))\n-\t\t\t ])\n-  ]\n-)\n-\n-(define_expand \"subsf3\"\n-  [(parallel [(set (match_operand:SF           0 \"register_operand\")\n-\t\t   (minus:SF (match_operand:SF 1 \"register_operand\")\n-\t\t\t     (match_operand:SF 2 \"nonmemory_operand\")))\n-\t      (clobber (reg:CC_FLOAT CC_REG))])\n-  ]\n-  \"TARGET_AM33_2\"\n-  \"\"\n+\t\t\t ])]\n )\n \n-(define_insn \"*subsf3_internal\"\n+(define_insn \"subsf3\"\n   [(set (match_operand:SF           0 \"register_operand\" \"=f,f\")\n \t(minus:SF (match_operand:SF 1 \"register_operand\" \"0,f\")\n \t\t  (match_operand:SF 2 \"nonmemory_operand\" \"f,?fF\")))\n-   (clobber (reg:CC_FLOAT CC_REG))\n-  ]\n+   (clobber (reg:CC_FLOAT CC_REG))]\n   \"TARGET_AM33_2\"\n   \"@\n    fsub %2, %0\n@@ -2810,21 +2656,10 @@\n \t\t\t\t\t(const_int 17) (const_int 14))\n \t\t\t  (if_then_else (eq_attr \"cpu\" \"am34\")\n \t\t\t\t\t(const_int 17) (const_int 25))\n-\t\t\t ])\n-  ]\n+\t\t\t ])]\n )\n \n-(define_expand \"mulsf3\"\n-  [(parallel [(set (match_operand:SF          0 \"register_operand\")\n-\t\t   (mult:SF (match_operand:SF 1 \"register_operand\")\n-\t\t\t    (match_operand:SF 2 \"nonmemory_operand\")))\n-\t      (clobber (reg:CC_FLOAT CC_REG))])\n-  ]\n-  \"TARGET_AM33_2\"\n-  \"\"\n-)\n-\n-(define_insn \"*mulsf3_internal\"\n+(define_insn \"mulsf3\"\n   [(set (match_operand:SF          0 \"register_operand\" \"=f,f\")\n \t(mult:SF (match_operand:SF 1 \"register_operand\" \"%0,f\")\n \t\t (match_operand:SF 2 \"nonmemory_operand\" \"f,?fF\")))\n@@ -2839,16 +2674,14 @@\n \t\t\t\t\t(const_int 17) (const_int 14))\n \t\t\t  (if_then_else (eq_attr \"cpu\" \"am34\")\n \t\t\t\t\t(const_int 17) (const_int 25))\n-\t\t\t ])\n-  ]\n+\t\t\t ])]\n )\n \n (define_insn \"divsf3\"\n   [(set (match_operand:SF         0 \"register_operand\" \"=f,f\")\n \t(div:SF (match_operand:SF 1 \"register_operand\"  \"0,f\")\n \t\t(match_operand:SF 2 \"nonmemory_operand\" \"f,?fF\")))\n-   (clobber (reg:CC_FLOAT CC_REG))\n-  ]\n+   (clobber (reg:CC_FLOAT CC_REG))]\n   \"TARGET_AM33_2\"\n   \"@\n    fdiv %2, %0\n@@ -2858,8 +2691,7 @@\n \t\t\t\t\t(const_int 2531) (const_int 1216))\n \t\t\t  (if_then_else (eq_attr \"cpu\" \"am34\")\n \t\t\t\t\t(const_int 2531) (const_int 1317))\n-\t\t\t ])\n-  ]\n+\t\t\t ])]\n )\n \n (define_insn \"fmasf4\""}]}