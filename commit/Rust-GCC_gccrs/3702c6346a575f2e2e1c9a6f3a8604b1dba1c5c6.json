{"sha": "3702c6346a575f2e2e1c9a6f3a8604b1dba1c5c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzcwMmM2MzQ2YTU3NWYyZTJlMWM5YTZmM2E4NjA0YjFkYmExYzVjNg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@merlin.codesourcery.com", "date": "2001-05-30T11:34:26Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2001-05-30T11:34:26Z"}, "message": "[multiple changes]\n\n2001-05-29  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n\n      * include/c_std/bits/std_cstdlib.h:: Move C99 thingies to __gnu_cxx::.\n      * include/c_std/bits/std_cwchar.h (__gnu_cxx): Likewise.\n\n2001-05-27  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n\n      * include/c_std/bits/std_cmath.h: Move C99 functions in __gnu_cxx::.\n      * include/c_std/bits/std_cstdlib.h: Same.\n      * include/c_std/bits/std_cwchar.h: Same.\n\nFrom-SVN: r42707", "tree": {"sha": "fc2910508e52529de793d53be8556aa2f568e4a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc2910508e52529de793d53be8556aa2f568e4a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3702c6346a575f2e2e1c9a6f3a8604b1dba1c5c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3702c6346a575f2e2e1c9a6f3a8604b1dba1c5c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3702c6346a575f2e2e1c9a6f3a8604b1dba1c5c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3702c6346a575f2e2e1c9a6f3a8604b1dba1c5c6/comments", "author": null, "committer": null, "parents": [{"sha": "e97c94888969b416c239fcaa027770d9b0157323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e97c94888969b416c239fcaa027770d9b0157323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e97c94888969b416c239fcaa027770d9b0157323"}], "stats": {"total": 116, "additions": 64, "deletions": 52}, "files": [{"sha": "10f98d6ba6e676a5ec3f5bb030f3fade749dbea1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3702c6346a575f2e2e1c9a6f3a8604b1dba1c5c6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3702c6346a575f2e2e1c9a6f3a8604b1dba1c5c6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3702c6346a575f2e2e1c9a6f3a8604b1dba1c5c6", "patch": "@@ -1,3 +1,14 @@\n+2001-05-29  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n+ \n+       * include/c_std/bits/std_cstdlib.h:: Move C99 thingies to __gnu_cxx::. \n+       * include/c_std/bits/std_cwchar.h (__gnu_cxx): Likewise.\n+ \n+2001-05-27  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n+\n+       * include/c_std/bits/std_cmath.h: Move C99 functions in __gnu_cxx::.\n+       * include/c_std/bits/std_cstdlib.h: Same.\n+       * include/c_std/bits/std_cwchar.h: Same.\n+\n 2001-05-30  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* docs/html/17_intro/howto.html: Update link."}, {"sha": "32a79d01431e865c722794a0374d0f089185fec6", "filename": "libstdc++-v3/include/c_std/bits/std_cmath.h", "status": "modified", "additions": 38, "deletions": 37, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3702c6346a575f2e2e1c9a6f3a8604b1dba1c5c6/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3702c6346a575f2e2e1c9a6f3a8604b1dba1c5c6/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h?ref=3702c6346a575f2e2e1c9a6f3a8604b1dba1c5c6", "patch": "@@ -572,9 +572,9 @@ namespace std\n \n #if _GLIBCPP_USE_C99\n // These are possible macros imported from C99-land. For strict\n-// conformance, remove possible C99-injected names from the\n-// global namespace, and sequester them in the c99 namespace. \n-namespace c99\n+// conformance, remove possible C99-injected names from the global\n+// namespace, and sequester them in the __gnu_cxx extension namespace. \n+namespace __gnu_cxx\n {\n   template<typename _Tp>\n     int \n@@ -602,32 +602,33 @@ namespace c99\n \n   template<typename _Tp>\n     int \n-    __capture_isgreater(_Tp __f1, _Tp __f2) { return isgreater(__f1, __f2); }\n+    __capture_isgreater(_Tp __f1, _Tp __f2)\n+    { return isgreater(__f1, __f2); }\n \n- template<typename _Tp>\n-    int \n-    __capture_isgreaterequal(_Tp __f1, _Tp __f2) \n-    { return isgreaterequal(__f1, __f2); }\n+  template<typename _Tp>\n+     int \n+     __capture_isgreaterequal(_Tp __f1, _Tp __f2) \n+     { return isgreaterequal(__f1, __f2); }\n \n- template<typename _Tp>\n-    int \n-    __capture_isless(_Tp __f1, _Tp __f2) { return isless(__f1, __f2); }\n+  template<typename _Tp>\n+     int \n+     __capture_isless(_Tp __f1, _Tp __f2) { return isless(__f1, __f2); }\n \n- template<typename _Tp>\n-    int \n-    __capture_islessequal(_Tp __f1, _Tp __f2) \n-    { return islessequal(__f1, __f2); }\n+  template<typename _Tp>\n+     int \n+     __capture_islessequal(_Tp __f1, _Tp __f2) \n+     { return islessequal(__f1, __f2); }\n \n- template<typename _Tp>\n-    int \n-    __capture_islessgreater(_Tp __f1, _Tp __f2) \n-    { return islessgreater(__f1, __f2); }\n+  template<typename _Tp>\n+     int \n+     __capture_islessgreater(_Tp __f1, _Tp __f2) \n+     { return islessgreater(__f1, __f2); }\n \n- template<typename _Tp>\n-    int \n-    __capture_isunordered(_Tp __f1, _Tp __f2) \n-    { return isunordered(__f1, __f2); }\n-} // namespace c99\n+  template<typename _Tp>\n+     int \n+     __capture_isunordered(_Tp __f1, _Tp __f2) \n+     { return isunordered(__f1, __f2); }\n+} // namespace __gnu_cxx\n #endif\n \n #undef fpclassify\n@@ -644,7 +645,7 @@ namespace c99\n #undef isunordered\n \n #if _GLIBCPP_USE_C99\n-namespace c99\n+namespace __gnu_cxx\n {\n   template<typename _Tp>\n     int\n@@ -701,18 +702,18 @@ namespace c99\n \n namespace std\n {\n-  using c99::fpclassify;\n-  using c99::isfinite;\n-  using c99::isinf;\n-  using c99::isnan;\n-  using c99::isnormal;\n-  using c99::signbit;\n-  using c99::isgreater;\n-  using c99::isgreaterequal;\n-  using c99::isless;\n-  using c99::islessequal;\n-  using c99::islessgreater;\n-  using c99::isunordered;\n+  using __gnu_cxx::fpclassify;\n+  using __gnu_cxx::isfinite;\n+  using __gnu_cxx::isinf;\n+  using __gnu_cxx::isnan;\n+  using __gnu_cxx::isnormal;\n+  using __gnu_cxx::signbit;\n+  using __gnu_cxx::isgreater;\n+  using __gnu_cxx::isgreaterequal;\n+  using __gnu_cxx::isless;\n+  using __gnu_cxx::islessequal;\n+  using __gnu_cxx::islessgreater;\n+  using __gnu_cxx::isunordered;\n }\n #endif\n   "}, {"sha": "32475da09c63d3143ffcb962dce1ed694bbca411", "filename": "libstdc++-v3/include/c_std/bits/std_cstdlib.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3702c6346a575f2e2e1c9a6f3a8604b1dba1c5c6/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3702c6346a575f2e2e1c9a6f3a8604b1dba1c5c6/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdlib.h?ref=3702c6346a575f2e2e1c9a6f3a8604b1dba1c5c6", "patch": "@@ -126,7 +126,7 @@ namespace std\n } // namespace std\n \n #if _GLIBCPP_USE_C99\n-namespace c99\n+namespace __gnu_cxx\n {\n   using ::lldiv_t;\n \n@@ -151,20 +151,20 @@ namespace c99\n #ifdef _GLIBCPP_HAVE_STRTOLD\n   extern \"C\" long double strtold(const char*, char**); \n #endif\n-} // namespace c99\n+} // namespace __gnu_cxx\n \n namespace std\n {\n-  using c99::lldiv_t;\n-  using c99::abs;\n-  //using c99::llabs; // XXX ???\n-  using c99::div;\n-  using c99::lldiv;\n-  using c99::atoll;\n-  using c99::strtoll;\n-  using c99::strtoull;\n+  using __gnu_cxx::lldiv_t;\n+  using __gnu_cxx::abs;\n+  //using __gnu_cxx::llabs; // XXX ???\n+  using __gnu_cxx::div;\n+  using __gnu_cxx::lldiv;\n+  using __gnu_cxx::atoll;\n+  using __gnu_cxx::strtoll;\n+  using __gnu_cxx::strtoull;\n #ifdef _GLIBCPP_HAVE_STRTOLD\n-  using c99::strtold;\n+  using __gnu_cxx::strtold;\n #endif\n }\n #endif"}, {"sha": "b8f99ecf7d628c7e089146ef0e74d351258fe518", "filename": "libstdc++-v3/include/c_std/bits/std_cwchar.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3702c6346a575f2e2e1c9a6f3a8604b1dba1c5c6/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3702c6346a575f2e2e1c9a6f3a8604b1dba1c5c6/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h?ref=3702c6346a575f2e2e1c9a6f3a8604b1dba1c5c6", "patch": "@@ -205,7 +205,7 @@ namespace std\n }\n \n #if _GLIBCPP_USE_C99\n-namespace c99\n+namespace __gnu_cxx\n {\n   extern \"C\" long double wcstold(const wchar_t*, wchar_t**); \n   extern \"C\" long long int wcstoll(const wchar_t*, wchar_t**, int); \n@@ -214,9 +214,9 @@ namespace c99\n \n namespace std\n {\n-  using c99::wcstold;\n-  using c99::wcstoll;\n-  using c99::wcstoull;\n+  using __gnu_cxx::wcstold;\n+  using __gnu_cxx::wcstoll;\n+  using __gnu_cxx::wcstoull;\n }\n #endif\n "}]}