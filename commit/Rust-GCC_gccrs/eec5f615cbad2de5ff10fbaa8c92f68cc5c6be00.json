{"sha": "eec5f615cbad2de5ff10fbaa8c92f68cc5c6be00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVjNWY2MTVjYmFkMmRlNWZmMTBmYmFhOGM5MmY2OGNjNWM2YmUwMA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-06-25T20:33:28Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-06-25T20:33:28Z"}, "message": "PR tree-optimization/85700 - Spurious -Wstringop-truncation warning with strncat\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/85700\n\t* gimple-fold.c (gimple_fold_builtin_strncat): Adjust comment.\n\t* tree-ssa-strlen.c (is_strlen_related_p): Handle integer subtraction.\n\t(maybe_diag_stxncpy_trunc): Distinguish strncat from strncpy.\n\ngcc/testsuite/ChangeLog:\n\n\tPR tree-optimization/85700\n\t* gcc.dg/Wstringop-truncation-4.c: New test.\n\nFrom-SVN: r262110", "tree": {"sha": "6d97fc1ae9f1316ba96cf9579500332267bb075a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d97fc1ae9f1316ba96cf9579500332267bb075a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eec5f615cbad2de5ff10fbaa8c92f68cc5c6be00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eec5f615cbad2de5ff10fbaa8c92f68cc5c6be00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eec5f615cbad2de5ff10fbaa8c92f68cc5c6be00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eec5f615cbad2de5ff10fbaa8c92f68cc5c6be00/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2bcd87a7b5bf793a00e99a5d7fdef4277afa7dc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bcd87a7b5bf793a00e99a5d7fdef4277afa7dc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bcd87a7b5bf793a00e99a5d7fdef4277afa7dc6"}], "stats": {"total": 167, "additions": 127, "deletions": 40}, "files": [{"sha": "5334c36708d55b35ce2a8148a165499107f5a39c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec5f615cbad2de5ff10fbaa8c92f68cc5c6be00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec5f615cbad2de5ff10fbaa8c92f68cc5c6be00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eec5f615cbad2de5ff10fbaa8c92f68cc5c6be00", "patch": "@@ -1,3 +1,10 @@\n+2018-06-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/85700\n+\t* gimple-fold.c (gimple_fold_builtin_strncat): Adjust comment.\n+\t* tree-ssa-strlen.c (is_strlen_related_p): Handle integer subtraction.\n+\t(maybe_diag_stxncpy_trunc): Distinguish strncat from strncpy.\n+\n 2018-06-25  Martin Sebor  <msebor@redhat.com>\n \n \t* doc/extend.texi (Zero-length arrays): Update and clarify."}, {"sha": "b02593596bfb66a9dd9272c8459c4a5c7aa9e883", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec5f615cbad2de5ff10fbaa8c92f68cc5c6be00/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec5f615cbad2de5ff10fbaa8c92f68cc5c6be00/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=eec5f615cbad2de5ff10fbaa8c92f68cc5c6be00", "patch": "@@ -2051,10 +2051,12 @@ gimple_fold_builtin_strncat (gimple_stmt_iterator *gsi)\n   if (!nowarn && cmpsrc == 0)\n     {\n       tree fndecl = gimple_call_fndecl (stmt);\n-\n-      /* To avoid certain truncation the specified bound should also\n-\t not be equal to (or less than) the length of the source.  */\n       location_t loc = gimple_location (stmt);\n+\n+      /* To avoid possible overflow the specified bound should also\n+\t not be equal to the length of the source, even when the size\n+\t of the destination is unknown (it's not an uncommon mistake\n+\t to specify as the bound to strncpy the length of the source).  */\n       if (warning_at (loc, OPT_Wstringop_overflow_,\n \t\t      \"%G%qD specified bound %E equals source length\",\n \t\t      stmt, fndecl, len))"}, {"sha": "46064749e3fadf0ea4d8730716e2b1e70d6a1f6b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec5f615cbad2de5ff10fbaa8c92f68cc5c6be00/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec5f615cbad2de5ff10fbaa8c92f68cc5c6be00/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eec5f615cbad2de5ff10fbaa8c92f68cc5c6be00", "patch": "@@ -1,3 +1,8 @@\n+2018-06-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/85700\n+\t* gcc.dg/Wstringop-truncation-4.c: New test.\n+\n 2018-06-25  Fritz Reese  <fritzoreese@gmail.com>\n \n \tPR fortran/82972"}, {"sha": "f3948637d1035c397e1f352e65cf5001f89e99b8", "filename": "gcc/testsuite/gcc.dg/Wstringop-truncation-4.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec5f615cbad2de5ff10fbaa8c92f68cc5c6be00/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-truncation-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec5f615cbad2de5ff10fbaa8c92f68cc5c6be00/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-truncation-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-truncation-4.c?ref=eec5f615cbad2de5ff10fbaa8c92f68cc5c6be00", "patch": "@@ -0,0 +1,63 @@\n+/* PR tree-optimization/85700 - Spurious -Wstringop-truncation warning\n+   with strncat\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wno-stringop-overflow -Wstringop-truncation -ftrack-macro-expansion=0\" } */\n+\n+#define NOIPA __attribute__ ((noipa))\n+#define strncat __builtin_strncat\n+#define strlen __builtin_strlen\n+\n+extern char a4[4], b4[4], ax[];\n+\n+NOIPA void cat_a4_s1_1 (void)\n+{\n+  /* There is no truncation here but since the bound of 1 equals\n+     the length of the source string it's likely a mistake that\n+     could cause overflow so it's diagnosed by -Wstringop-overflow */\n+  strncat (a4, \"1\", 1);\n+}\n+\n+NOIPA void cat_a4_s1_2 (void)\n+{\n+  strncat (a4, \"1\", 2);\n+}\n+\n+NOIPA void cat_a4_s1_3 (void)\n+{\n+  strncat (a4, \"1\", 3);\n+}\n+\n+NOIPA void cat_a4_s1_4 (void)\n+{\n+  /* There is no truncation here but since the bound of 1 equals\n+     the length of the source string it's likely a mistake that\n+     could cause overflow so it's diagnosed by -Wstringop-overflow */\n+  strncat (a4, \"1\", 4);\n+}\n+\n+NOIPA void cat_a4_s1_5 (void)\n+{\n+  /* A bound in excess of the destination size is diagnosed by\n+     -Wstringop-overflow.  */\n+  strncat (a4, \"1\", 5);\n+}\n+\n+NOIPA void cat_a4_s1_dlen (void)\n+{\n+  strncat (a4, \"1\", sizeof a4 - strlen (a4) - 1);\n+}\n+\n+NOIPA void cat_a4_s2_dlen (void)\n+{\n+  strncat (a4, \"12\", sizeof a4 - strlen (a4) - 1);  /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" } */\n+}\n+\n+NOIPA void cat_a4_b4_dlen (void)\n+{\n+  strncat (a4, b4, sizeof a4 - strlen (a4) - 1);  /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" } */\n+}\n+\n+NOIPA void cat_ax_b4_dlen (void)\n+{\n+  strncat (ax, b4, 32 - strlen (ax) - 1);  /* { dg-bogus \"\\\\\\[-Wstringop-truncation]\" } */\n+}"}, {"sha": "2da82a878e3e6b2b21a26f7121b46cc6a8d3866f", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 47, "deletions": 37, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eec5f615cbad2de5ff10fbaa8c92f68cc5c6be00/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eec5f615cbad2de5ff10fbaa8c92f68cc5c6be00/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=eec5f615cbad2de5ff10fbaa8c92f68cc5c6be00", "patch": "@@ -2014,6 +2014,12 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n \n       gcall *call = as_a <gcall *> (stmt);\n \n+      /* Set to true for strncat whose bound is derived from the length\n+\t of the destination (the expected usage pattern).  */\n+      bool cat_dstlen_bounded = false;\n+      if (DECL_FUNCTION_CODE (func) == BUILT_IN_STRNCAT)\n+\tcat_dstlen_bounded = is_strlen_related_p (dst, cnt);\n+\n       if (lenrange[0] == cntrange[1] && cntrange[0] == cntrange[1])\n \treturn warning_n (callloc, OPT_Wstringop_truncation,\n \t\t\t  cntrange[0].to_uhwi (),\n@@ -2024,46 +2030,50 @@ maybe_diag_stxncpy_trunc (gimple_stmt_iterator gsi, tree src, tree cnt)\n \t\t\t  \"copying %E bytes from a string of the same \"\n \t\t\t  \"length\",\n \t\t\t  call, func, cnt);\n-      else if (wi::geu_p (lenrange[0], cntrange[1]))\n-\t{\n-\t  /* The shortest string is longer than the upper bound of\n-\t     the count so the truncation is certain.  */\n-\t  if (cntrange[0] == cntrange[1])\n-\t    return warning_n (callloc, OPT_Wstringop_truncation,\n-\t\t\t      cntrange[0].to_uhwi (),\n-\t\t\t      \"%G%qD output truncated copying %E byte \"\n-\t\t\t      \"from a string of length %wu\",\n-\t\t\t      \"%G%qD output truncated copying %E bytes \"\n-\t\t\t      \"from a string of length %wu\",\n-\t\t\t      call, func, cnt, lenrange[0].to_uhwi ());\n-\n-\t  return warning_at (callloc, OPT_Wstringop_truncation,\n-\t\t\t     \"%G%qD output truncated copying between %wu \"\n-\t\t\t     \"and %wu bytes from a string of length %wu\",\n-\t\t\t     call, func, cntrange[0].to_uhwi (),\n-\t\t\t     cntrange[1].to_uhwi (), lenrange[0].to_uhwi ());\n-\t}\n-      else if (wi::geu_p (lenrange[1], cntrange[1]))\n+      else if (!cat_dstlen_bounded)\n \t{\n-\t  /* The longest string is longer than the upper bound of\n-\t     the count so the truncation is possible.  */\n-\t  if (cntrange[0] == cntrange[1])\n-\t    return warning_n (callloc, OPT_Wstringop_truncation,\n-\t\t\t      cntrange[0].to_uhwi (),\n-\t\t\t      \"%G%qD output may be truncated copying %E \"\n-\t\t\t      \"byte from a string of length %wu\",\n-\t\t\t      \"%G%qD output may be truncated copying %E \"\n-\t\t\t      \"bytes from a string of length %wu\",\n-\t\t\t      call, func, cnt, lenrange[1].to_uhwi ());\n-\n-\t  return warning_at (callloc, OPT_Wstringop_truncation,\n-\t\t\t     \"%G%qD output may be truncated copying between %wu \"\n-\t\t\t     \"and %wu bytes from a string of length %wu\",\n-\t\t\t     call, func, cntrange[0].to_uhwi (),\n-\t\t\t     cntrange[1].to_uhwi (), lenrange[1].to_uhwi ());\n+\t  if (wi::geu_p (lenrange[0], cntrange[1]))\n+\t    {\n+\t      /* The shortest string is longer than the upper bound of\n+\t\t the count so the truncation is certain.  */\n+\t      if (cntrange[0] == cntrange[1])\n+\t\treturn warning_n (callloc, OPT_Wstringop_truncation,\n+\t\t\t\t  cntrange[0].to_uhwi (),\n+\t\t\t\t  \"%G%qD output truncated copying %E byte \"\n+\t\t\t\t  \"from a string of length %wu\",\n+\t\t\t\t  \"%G%qD output truncated copying %E bytes \"\n+\t\t\t\t  \"from a string of length %wu\",\n+\t\t\t\t  call, func, cnt, lenrange[0].to_uhwi ());\n+\n+\t      return warning_at (callloc, OPT_Wstringop_truncation,\n+\t\t\t\t \"%G%qD output truncated copying between %wu \"\n+\t\t\t\t \"and %wu bytes from a string of length %wu\",\n+\t\t\t\t call, func, cntrange[0].to_uhwi (),\n+\t\t\t\t cntrange[1].to_uhwi (), lenrange[0].to_uhwi ());\n+\t    }\n+\t  else if (wi::geu_p (lenrange[1], cntrange[1]))\n+\t    {\n+\t      /* The longest string is longer than the upper bound of\n+\t\t the count so the truncation is possible.  */\n+\t      if (cntrange[0] == cntrange[1])\n+\t\treturn warning_n (callloc, OPT_Wstringop_truncation,\n+\t\t\t\t  cntrange[0].to_uhwi (),\n+\t\t\t\t  \"%G%qD output may be truncated copying %E \"\n+\t\t\t\t  \"byte from a string of length %wu\",\n+\t\t\t\t  \"%G%qD output may be truncated copying %E \"\n+\t\t\t\t  \"bytes from a string of length %wu\",\n+\t\t\t\t  call, func, cnt, lenrange[1].to_uhwi ());\n+\n+\t      return warning_at (callloc, OPT_Wstringop_truncation,\n+\t\t\t\t \"%G%qD output may be truncated copying between \"\n+\t\t\t\t \"%wu and %wu bytes from a string of length %wu\",\n+\t\t\t\t call, func, cntrange[0].to_uhwi (),\n+\t\t\t\t cntrange[1].to_uhwi (), lenrange[1].to_uhwi ());\n+\t    }\n \t}\n \n-      if (cntrange[0] != cntrange[1]\n+      if (!cat_dstlen_bounded\n+\t  && cntrange[0] != cntrange[1]\n \t  && wi::leu_p (cntrange[0], lenrange[0])\n \t  && wi::leu_p (cntrange[1], lenrange[0] + 1))\n \t{"}]}