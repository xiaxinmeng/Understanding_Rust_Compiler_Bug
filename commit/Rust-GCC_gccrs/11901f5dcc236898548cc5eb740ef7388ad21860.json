{"sha": "11901f5dcc236898548cc5eb740ef7388ad21860", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE5MDFmNWRjYzIzNjg5ODU0OGNjNWViNzQwZWY3Mzg4YWQyMTg2MA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-10-22T18:52:19Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-10-22T18:52:19Z"}, "message": "stmt.c (asm_op_is_mem_input): Remove.\n\n\t* stmt.c (asm_op_is_mem_input): Remove.\n\t* tree.h: Remove the corresponding prototype.\n\nFrom-SVN: r89467", "tree": {"sha": "12e190b7c0e92e83b6314752bb11cc322fe26157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12e190b7c0e92e83b6314752bb11cc322fe26157"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11901f5dcc236898548cc5eb740ef7388ad21860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11901f5dcc236898548cc5eb740ef7388ad21860", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11901f5dcc236898548cc5eb740ef7388ad21860", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11901f5dcc236898548cc5eb740ef7388ad21860/comments", "author": null, "committer": null, "parents": [{"sha": "82338042c07755238fa608567247e53fd844ec91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82338042c07755238fa608567247e53fd844ec91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82338042c07755238fa608567247e53fd844ec91"}], "stats": {"total": 33, "additions": 5, "deletions": 28}, "files": [{"sha": "8c9726c47c37e682ee54ba592f32a8fa0a80bcfb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11901f5dcc236898548cc5eb740ef7388ad21860/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11901f5dcc236898548cc5eb740ef7388ad21860/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=11901f5dcc236898548cc5eb740ef7388ad21860", "patch": "@@ -1,3 +1,8 @@\n+2004-10-22  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* stmt.c (asm_op_is_mem_input): Remove.\n+\t* tree.h: Remove the corresponding prototype.\n+\n 2004-10-22  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-gimple.c (is_gimple_constructor_elt): Remove."}, {"sha": "4aa242e6435ddacc7a6600c74d9bf996946aa957", "filename": "gcc/stmt.c", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11901f5dcc236898548cc5eb740ef7388ad21860/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11901f5dcc236898548cc5eb740ef7388ad21860/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=11901f5dcc236898548cc5eb740ef7388ad21860", "patch": "@@ -558,33 +558,6 @@ parse_input_constraint (const char **constraint_p, int input_num,\n   return true;\n }\n \n-/* INPUT is one of the input operands from EXPR, an ASM_EXPR.  Returns true\n-   if it is an operand which must be passed in memory (i.e. an \"m\"\n-   constraint), false otherwise.  */\n-\n-bool\n-asm_op_is_mem_input (tree input, tree expr)\n-{\n-  const char *constraint = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (input)));\n-  tree outputs = ASM_OUTPUTS (expr);\n-  int noutputs = list_length (outputs);\n-  const char **constraints\n-    = (const char **) alloca ((noutputs) * sizeof (const char *));\n-  int i = 0;\n-  bool allows_mem, allows_reg;\n-  tree t;\n-\n-  /* Collect output constraints.  */\n-  for (t = outputs; t ; t = TREE_CHAIN (t), i++)\n-    constraints[i] = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (t)));\n-\n-  /* We pass 0 for input_num, ninputs and ninout; they are only used for\n-     error checking which will be done at expand time.  */\n-  parse_input_constraint (&constraint, 0, 0, noutputs, 0, constraints,\n-\t\t\t  &allows_mem, &allows_reg);\n-  return (!allows_reg && allows_mem);\n-}\n-\n /* Check for overlap between registers marked in CLOBBERED_REGS and\n    anything inappropriate in DECL.  Emit error and return TRUE for error,\n    FALSE for ok.  */"}, {"sha": "e0a8fc758527f33695b9d7eb334923e06ece2b54", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11901f5dcc236898548cc5eb740ef7388ad21860/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11901f5dcc236898548cc5eb740ef7388ad21860/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=11901f5dcc236898548cc5eb740ef7388ad21860", "patch": "@@ -3740,7 +3740,6 @@ extern bool parse_input_constraint (const char **, int, int, int, int,\n \t\t\t\t    const char * const *, bool *, bool *);\n extern void expand_asm_operands (tree, tree, tree, tree, int, location_t);\n extern void expand_asm_expr (tree);\n-extern bool asm_op_is_mem_input (tree, tree);\n extern tree resolve_asm_operand_names (tree, tree, tree);\n extern void expand_case (tree);\n extern void expand_decl (tree);"}]}