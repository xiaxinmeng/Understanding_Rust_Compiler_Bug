{"sha": "e656fbc820265bdab84bdc2ab6c4e32a4713ea1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY1NmZiYzgyMDI2NWJkYWI4NGJkYzJhYjZjNGUzMmE0NzEzZWExZQ==", "commit": {"author": {"name": "Matthew Wahab", "email": "matthew.wahab@arm.com", "date": "2015-08-26T13:33:54Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2015-08-26T13:33:54Z"}, "message": "arm-arches.def: Replace single value flags with an initializer built from ARM_FSET_MAKE_CPU1.\n\n2015-08-26  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* config/arm/arm-arches.def: Replace single value flags with\n\tan initializer built from ARM_FSET_MAKE_CPU1.\n\t* config/arm/arm-cores.def: Likewise.\n\t* config/arm/arm.c: (all_cores): Remove ARM_FSET_MAKE_CPU1\n\tderivation from the ARM_CORE macro definition, use the given value\n\tinstead.\n\t(all_architectures): Remove ARM_FSET_MAKE_CPU1 derivation from the\n\tARM_ARCH macro definition, use the given value instead.\n\nFrom-SVN: r227219", "tree": {"sha": "f181d83e51553db04f332c3e275c860619cd7dc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f181d83e51553db04f332c3e275c860619cd7dc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e656fbc820265bdab84bdc2ab6c4e32a4713ea1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e656fbc820265bdab84bdc2ab6c4e32a4713ea1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e656fbc820265bdab84bdc2ab6c4e32a4713ea1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e656fbc820265bdab84bdc2ab6c4e32a4713ea1e/comments", "author": null, "committer": null, "parents": [{"sha": "23b9ccbe5bfd7e97e4d9b103892258f789aacda1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23b9ccbe5bfd7e97e4d9b103892258f789aacda1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23b9ccbe5bfd7e97e4d9b103892258f789aacda1"}], "stats": {"total": 280, "additions": 146, "deletions": 134}, "files": [{"sha": "8f92283fe39ee51e0d782e16aeaac6241dc1d8eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e656fbc820265bdab84bdc2ab6c4e32a4713ea1e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e656fbc820265bdab84bdc2ab6c4e32a4713ea1e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e656fbc820265bdab84bdc2ab6c4e32a4713ea1e", "patch": "@@ -1,3 +1,14 @@\n+2015-08-26  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* config/arm/arm-arches.def: Replace single value flags with\n+\tan initializer built from ARM_FSET_MAKE_CPU1.\n+\t* config/arm/arm-cores.def: Likewise.\n+\t* config/arm/arm.c: (all_cores): Remove ARM_FSET_MAKE_CPU1\n+\tderivation from the ARM_CORE macro definition, use the given value\n+\tinstead.\n+\t(all_architectures): Remove ARM_FSET_MAKE_CPU1 derivation from the\n+\tARM_ARCH macro definition, use the given value instead.\n+\n 2015-08-26  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* config/arm/arm-builtins.c (def_mbuiltin): Test all flags in a"}, {"sha": "ddf6c3c330f91640d647d266f3d0e2350e7b986a", "filename": "gcc/config/arm/arm-arches.def", "status": "modified", "additions": 32, "deletions": 31, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e656fbc820265bdab84bdc2ab6c4e32a4713ea1e/gcc%2Fconfig%2Farm%2Farm-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e656fbc820265bdab84bdc2ab6c4e32a4713ea1e/gcc%2Fconfig%2Farm%2Farm-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-arches.def?ref=e656fbc820265bdab84bdc2ab6c4e32a4713ea1e", "patch": "@@ -23,39 +23,40 @@\n \n    The NAME is the name of the architecture, represented as a string\n    constant.  The CORE is the identifier for a core representative of\n-   this architecture.  ARCH is the architecture revision.  FLAGS are\n-   the flags implied by the architecture.\n+   this architecture.  ARCH is the architecture revision.  FLAGS is\n+   the set of feature flags implied by the architecture.\n \n    genopt.sh assumes no whitespace up to the first \",\" in each entry.  */\n \n-ARM_ARCH(\"armv2\",   arm2,       2,   FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2)\n-ARM_ARCH(\"armv2a\",  arm2,       2,   FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2)\n-ARM_ARCH(\"armv3\",   arm6,       3,   FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3)\n-ARM_ARCH(\"armv3m\",  arm7m,      3M,  FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3M)\n-ARM_ARCH(\"armv4\",   arm7tdmi,   4,   FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH4)\n+ARM_ARCH(\"armv2\",   arm2,       2,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2))\n+ARM_ARCH(\"armv2a\",  arm2,       2,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2))\n+ARM_ARCH(\"armv3\",   arm6,       3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3))\n+ARM_ARCH(\"armv3m\",  arm7m,      3M,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3M))\n+ARM_ARCH(\"armv4\",   arm7tdmi,   4,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH4))\n /* Strictly, FL_MODE26 is a permitted option for v4t, but there are no\n    implementations that support it, so we will leave it out for now.  */\n-ARM_ARCH(\"armv4t\",  arm7tdmi,   4T,  FL_CO_PROC |             FL_FOR_ARCH4T)\n-ARM_ARCH(\"armv5\",   arm10tdmi,  5,   FL_CO_PROC |             FL_FOR_ARCH5)\n-ARM_ARCH(\"armv5t\",  arm10tdmi,  5T,  FL_CO_PROC |             FL_FOR_ARCH5T)\n-ARM_ARCH(\"armv5e\",  arm1026ejs, 5E,  FL_CO_PROC |             FL_FOR_ARCH5E)\n-ARM_ARCH(\"armv5te\", arm1026ejs, 5TE, FL_CO_PROC |             FL_FOR_ARCH5TE)\n-ARM_ARCH(\"armv6\",   arm1136js,  6,   FL_CO_PROC |             FL_FOR_ARCH6)\n-ARM_ARCH(\"armv6j\",  arm1136js,  6J,  FL_CO_PROC |             FL_FOR_ARCH6J)\n-ARM_ARCH(\"armv6k\",  mpcore,\t6K,  FL_CO_PROC |             FL_FOR_ARCH6K)\n-ARM_ARCH(\"armv6z\",  arm1176jzs, 6Z,  FL_CO_PROC |             FL_FOR_ARCH6Z)\n-ARM_ARCH(\"armv6kz\", arm1176jzs, 6KZ, FL_CO_PROC |             FL_FOR_ARCH6KZ)\n-ARM_ARCH(\"armv6zk\", arm1176jzs, 6KZ, FL_CO_PROC |             FL_FOR_ARCH6KZ)\n-ARM_ARCH(\"armv6t2\", arm1156t2s, 6T2, FL_CO_PROC |             FL_FOR_ARCH6T2)\n-ARM_ARCH(\"armv6-m\", cortexm1,\t6M,\t\t\t      FL_FOR_ARCH6M)\n-ARM_ARCH(\"armv6s-m\", cortexm1,\t6M,\t\t\t      FL_FOR_ARCH6M)\n-ARM_ARCH(\"armv7\",   cortexa8,\t7,   FL_CO_PROC |\t      FL_FOR_ARCH7)\n-ARM_ARCH(\"armv7-a\", cortexa8,\t7A,  FL_CO_PROC |\t      FL_FOR_ARCH7A)\n-ARM_ARCH(\"armv7ve\", cortexa8,\t7A,  FL_CO_PROC |\t      FL_FOR_ARCH7VE)\n-ARM_ARCH(\"armv7-r\", cortexr4,\t7R,  FL_CO_PROC |\t      FL_FOR_ARCH7R)\n-ARM_ARCH(\"armv7-m\", cortexm3,\t7M,  FL_CO_PROC |\t      FL_FOR_ARCH7M)\n-ARM_ARCH(\"armv7e-m\", cortexm4,  7EM, FL_CO_PROC |\t      FL_FOR_ARCH7EM)\n-ARM_ARCH(\"armv8-a\", cortexa53,  8A,  FL_CO_PROC |             FL_FOR_ARCH8A)\n-ARM_ARCH(\"armv8-a+crc\",cortexa53, 8A,FL_CO_PROC | FL_CRC32  | FL_FOR_ARCH8A)\n-ARM_ARCH(\"iwmmxt\",  iwmmxt,     5TE, FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT)\n-ARM_ARCH(\"iwmmxt2\", iwmmxt2,    5TE, FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2)\n+ARM_ARCH(\"armv4t\",  arm7tdmi,   4T,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH4T))\n+ARM_ARCH(\"armv5\",   arm10tdmi,  5,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH5))\n+ARM_ARCH(\"armv5t\",  arm10tdmi,  5T,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH5T))\n+ARM_ARCH(\"armv5e\",  arm1026ejs, 5E,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH5E))\n+ARM_ARCH(\"armv5te\", arm1026ejs, 5TE,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH5TE))\n+ARM_ARCH(\"armv6\",   arm1136js,  6,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH6))\n+ARM_ARCH(\"armv6j\",  arm1136js,  6J,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH6J))\n+ARM_ARCH(\"armv6k\",  mpcore,\t6K,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH6K))\n+ARM_ARCH(\"armv6z\",  arm1176jzs, 6Z,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH6Z))\n+ARM_ARCH(\"armv6kz\", arm1176jzs, 6KZ,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH6KZ))\n+ARM_ARCH(\"armv6zk\", arm1176jzs, 6KZ,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH6KZ))\n+ARM_ARCH(\"armv6t2\", arm1156t2s, 6T2,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH6T2))\n+ARM_ARCH(\"armv6-m\", cortexm1,\t6M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M))\n+ARM_ARCH(\"armv6s-m\", cortexm1,\t6M,\tARM_FSET_MAKE_CPU1 (FL_FOR_ARCH6M))\n+ARM_ARCH(\"armv7\",   cortexa8,\t7,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |\t      FL_FOR_ARCH7))\n+ARM_ARCH(\"armv7-a\", cortexa8,\t7A,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |\t      FL_FOR_ARCH7A))\n+ARM_ARCH(\"armv7ve\", cortexa8,\t7A,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |\t      FL_FOR_ARCH7VE))\n+ARM_ARCH(\"armv7-r\", cortexr4,\t7R,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |\t      FL_FOR_ARCH7R))\n+ARM_ARCH(\"armv7-m\", cortexm3,\t7M,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |\t      FL_FOR_ARCH7M))\n+ARM_ARCH(\"armv7e-m\", cortexm4,  7EM,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |\t      FL_FOR_ARCH7EM))\n+ARM_ARCH(\"armv8-a\", cortexa53,  8A,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC |             FL_FOR_ARCH8A))\n+ARM_ARCH(\"armv8-a+crc\",cortexa53, 8A,   ARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_CRC32  | FL_FOR_ARCH8A))\n+ARM_ARCH(\"iwmmxt\",  iwmmxt,     5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT))\n+ARM_ARCH(\"iwmmxt2\", iwmmxt2,    5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2))\n+"}, {"sha": "4c35200b3f8a768047f22aa205671509a484fb3b", "filename": "gcc/config/arm/arm-cores.def", "status": "modified", "additions": 101, "deletions": 101, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e656fbc820265bdab84bdc2ab6c4e32a4713ea1e/gcc%2Fconfig%2Farm%2Farm-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e656fbc820265bdab84bdc2ab6c4e32a4713ea1e/gcc%2Fconfig%2Farm%2Farm-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cores.def?ref=e656fbc820265bdab84bdc2ab6c4e32a4713ea1e", "patch": "@@ -33,7 +33,7 @@\n    The TUNE_IDENT is the name of the core for which scheduling decisions\n    should be made, represented as an identifier.\n    ARCH is the architecture revision implemented by the chip.\n-   FLAGS are the bitwise-or of the traits that apply to that core.\n+   FLAGS is the set of feature flags of that core.\n    This need not include flags implied by the architecture.\n    COSTS is the name of the rtx_costs routine to use.\n \n@@ -43,134 +43,134 @@\n    Some tools assume no whitespace up to the first \",\" in each entry.  */\n \n /* V2/V2A Architecture Processors */\n-ARM_CORE(\"arm2\",\tarm2, arm2,\t2, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2, slowmul)\n-ARM_CORE(\"arm250\",\tarm250, arm250,\t2, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2, slowmul)\n-ARM_CORE(\"arm3\",\tarm3, arm3,\t2, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2, slowmul)\n+ARM_CORE(\"arm2\",\tarm2, arm2,\t2,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2), slowmul)\n+ARM_CORE(\"arm250\",\tarm250, arm250,\t2,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2), slowmul)\n+ARM_CORE(\"arm3\",\tarm3, arm3,\t2,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH2), slowmul)\n \n /* V3 Architecture Processors */\n-ARM_CORE(\"arm6\",\tarm6, arm6,\t\t3, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3, slowmul)\n-ARM_CORE(\"arm60\",\tarm60, arm60,\t\t3, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3, slowmul)\n-ARM_CORE(\"arm600\",\tarm600, arm600,\t\t3, FL_CO_PROC | FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n-ARM_CORE(\"arm610\",\tarm610, arm610,\t\t3, FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n-ARM_CORE(\"arm620\",\tarm620, arm620,\t\t3, FL_CO_PROC | FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n-ARM_CORE(\"arm7\",\tarm7, arm7,\t\t3, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3, slowmul)\n-ARM_CORE(\"arm7d\",\tarm7d, arm7d,\t\t3, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3, slowmul)\n-ARM_CORE(\"arm7di\",\tarm7di, arm7di,\t\t3, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3, slowmul)\n-ARM_CORE(\"arm70\",\tarm70, arm70,\t\t3, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3, slowmul)\n-ARM_CORE(\"arm700\",\tarm700, arm700,\t\t3, FL_CO_PROC | FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n-ARM_CORE(\"arm700i\",\tarm700i, arm700i,\t3, FL_CO_PROC | FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n-ARM_CORE(\"arm710\",\tarm710, arm710,\t\t3, FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n-ARM_CORE(\"arm720\",\tarm720, arm720,\t\t3, FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n-ARM_CORE(\"arm710c\",\tarm710c, arm710c,\t3, FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n-ARM_CORE(\"arm7100\",\tarm7100, arm7100,\t3, FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n-ARM_CORE(\"arm7500\",\tarm7500, arm7500,\t3, FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n+ARM_CORE(\"arm6\",\tarm6, arm6,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm60\",\tarm60, arm60,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm600\",\tarm600, arm600,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm610\",\tarm610, arm610,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm620\",\tarm620, arm620,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm7\",\tarm7, arm7,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm7d\",\tarm7d, arm7d,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm7di\",\tarm7di, arm7di,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm70\",\tarm70, arm70,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm700\",\tarm700, arm700,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm700i\",\tarm700i, arm700i,\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm710\",\tarm710, arm710,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm720\",\tarm720, arm720,\t\t3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm710c\",\tarm710c, arm710c,\t3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm7100\",\tarm7100, arm7100,\t3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n+ARM_CORE(\"arm7500\",\tarm7500, arm7500,\t3,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n /* Doesn't have an external co-proc, but does have embedded fpa. */\n-ARM_CORE(\"arm7500fe\", arm7500fe, arm7500fe,\t3, FL_CO_PROC | FL_MODE26 | FL_WBUF | FL_FOR_ARCH3, slowmul)\n+ARM_CORE(\"arm7500fe\", arm7500fe, arm7500fe,\t3,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_WBUF | FL_FOR_ARCH3), slowmul)\n \n /* V3M Architecture Processors */\n /* arm7m doesn't exist on its own, but only with D, (\"and\", and I), but\n    those don't alter the code, so arm7m is sometimes used.  */\n-ARM_CORE(\"arm7m\",   arm7m, arm7m,\t3M, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3M, fastmul)\n-ARM_CORE(\"arm7dm\",  arm7dm, arm7dm,\t3M, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3M, fastmul)\n-ARM_CORE(\"arm7dmi\", arm7dmi, arm7dmi,\t3M, FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3M, fastmul)\n+ARM_CORE(\"arm7m\",   arm7m, arm7m,\t3M,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3M), fastmul)\n+ARM_CORE(\"arm7dm\",  arm7dm, arm7dm,\t3M,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3M), fastmul)\n+ARM_CORE(\"arm7dmi\", arm7dmi, arm7dmi,\t3M,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_MODE26 | FL_FOR_ARCH3M), fastmul)\n \n /* V4 Architecture Processors */\n-ARM_CORE(\"arm8\",          arm8, arm8,\t\t\t4, FL_MODE26 | FL_LDSCHED | FL_FOR_ARCH4, fastmul)\n-ARM_CORE(\"arm810\",        arm810, arm810,\t\t4, FL_MODE26 | FL_LDSCHED | FL_FOR_ARCH4, fastmul)\n-ARM_CORE(\"strongarm\",     strongarm, strongarm,\t\t4, FL_MODE26 | FL_LDSCHED | FL_STRONG | FL_FOR_ARCH4, strongarm)\n-ARM_CORE(\"strongarm110\",  strongarm110, strongarm110,\t4, FL_MODE26 | FL_LDSCHED | FL_STRONG | FL_FOR_ARCH4, strongarm)\n-ARM_CORE(\"strongarm1100\", strongarm1100, strongarm1100, 4, FL_MODE26 | FL_LDSCHED | FL_STRONG | FL_FOR_ARCH4, strongarm)\n-ARM_CORE(\"strongarm1110\", strongarm1110, strongarm1110, 4, FL_MODE26 | FL_LDSCHED | FL_STRONG | FL_FOR_ARCH4, strongarm)\n-ARM_CORE(\"fa526\",         fa526, fa526,\t\t\t4, FL_LDSCHED | FL_FOR_ARCH4, fastmul)\n-ARM_CORE(\"fa626\",         fa626, fa626,\t\t\t4, FL_LDSCHED | FL_FOR_ARCH4, fastmul)\n+ARM_CORE(\"arm8\",          arm8, arm8,\t\t\t4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_LDSCHED | FL_FOR_ARCH4), fastmul)\n+ARM_CORE(\"arm810\",        arm810, arm810,\t\t4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_LDSCHED | FL_FOR_ARCH4), fastmul)\n+ARM_CORE(\"strongarm\",     strongarm, strongarm,\t\t4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_LDSCHED | FL_STRONG | FL_FOR_ARCH4), strongarm)\n+ARM_CORE(\"strongarm110\",  strongarm110, strongarm110,\t4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_LDSCHED | FL_STRONG | FL_FOR_ARCH4), strongarm)\n+ARM_CORE(\"strongarm1100\", strongarm1100, strongarm1100, 4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_LDSCHED | FL_STRONG | FL_FOR_ARCH4), strongarm)\n+ARM_CORE(\"strongarm1110\", strongarm1110, strongarm1110, 4,\tARM_FSET_MAKE_CPU1 (FL_MODE26 | FL_LDSCHED | FL_STRONG | FL_FOR_ARCH4), strongarm)\n+ARM_CORE(\"fa526\",         fa526, fa526,\t\t\t4,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH4), fastmul)\n+ARM_CORE(\"fa626\",         fa626, fa626,\t\t\t4,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH4), fastmul)\n \n /* V4T Architecture Processors */\n-ARM_CORE(\"arm7tdmi\",\tarm7tdmi, arm7tdmi,\t4T, FL_CO_PROC | FL_FOR_ARCH4T, fastmul)\n-ARM_CORE(\"arm7tdmi-s\",\tarm7tdmis, arm7tdmis,\t4T, FL_CO_PROC | FL_FOR_ARCH4T, fastmul)\n-ARM_CORE(\"arm710t\",\tarm710t, arm710t,\t4T, FL_WBUF | FL_FOR_ARCH4T,    fastmul)\n-ARM_CORE(\"arm720t\",\tarm720t, arm720t,\t4T, FL_WBUF | FL_FOR_ARCH4T,    fastmul)\n-ARM_CORE(\"arm740t\",\tarm740t, arm740t,\t4T, FL_WBUF | FL_FOR_ARCH4T,    fastmul)\n-ARM_CORE(\"arm9\",\tarm9, arm9,\t\t4T, FL_LDSCHED | FL_FOR_ARCH4T, fastmul)\n-ARM_CORE(\"arm9tdmi\",\tarm9tdmi, arm9tdmi,\t4T, FL_LDSCHED | FL_FOR_ARCH4T, fastmul)\n-ARM_CORE(\"arm920\",\tarm920, arm920,\t\t4T, FL_LDSCHED | FL_FOR_ARCH4T, fastmul)\n-ARM_CORE(\"arm920t\",\tarm920t, arm920t,\t4T, FL_LDSCHED | FL_FOR_ARCH4T, fastmul)\n-ARM_CORE(\"arm922t\",\tarm922t, arm922t,\t4T, FL_LDSCHED | FL_FOR_ARCH4T, fastmul)\n-ARM_CORE(\"arm940t\",\tarm940t, arm940t,\t4T, FL_LDSCHED | FL_FOR_ARCH4T, fastmul)\n-ARM_CORE(\"ep9312\",\tep9312, ep9312,\t\t4T, FL_LDSCHED | FL_FOR_ARCH4T, fastmul)\n+ARM_CORE(\"arm7tdmi\",\tarm7tdmi, arm7tdmi,\t4T,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm7tdmi-s\",\tarm7tdmis, arm7tdmis,\t4T,\tARM_FSET_MAKE_CPU1 (FL_CO_PROC | FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm710t\",\tarm710t, arm710t,\t4T,\tARM_FSET_MAKE_CPU1 (FL_WBUF | FL_FOR_ARCH4T),    fastmul)\n+ARM_CORE(\"arm720t\",\tarm720t, arm720t,\t4T,\tARM_FSET_MAKE_CPU1 (FL_WBUF | FL_FOR_ARCH4T),    fastmul)\n+ARM_CORE(\"arm740t\",\tarm740t, arm740t,\t4T,\tARM_FSET_MAKE_CPU1 (FL_WBUF | FL_FOR_ARCH4T),    fastmul)\n+ARM_CORE(\"arm9\",\tarm9, arm9,\t\t4T,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm9tdmi\",\tarm9tdmi, arm9tdmi,\t4T,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm920\",\tarm920, arm920,\t\t4T,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm920t\",\tarm920t, arm920t,\t4T,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm922t\",\tarm922t, arm922t,\t4T,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"arm940t\",\tarm940t, arm940t,\t4T,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH4T), fastmul)\n+ARM_CORE(\"ep9312\",\tep9312, ep9312,\t\t4T,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH4T), fastmul)\n \n /* V5T Architecture Processors */\n-ARM_CORE(\"arm10tdmi\",\tarm10tdmi, arm10tdmi,\t5T, FL_LDSCHED | FL_FOR_ARCH5T, fastmul)\n-ARM_CORE(\"arm1020t\",\tarm1020t, arm1020t,\t5T, FL_LDSCHED | FL_FOR_ARCH5T, fastmul)\n+ARM_CORE(\"arm10tdmi\",\tarm10tdmi, arm10tdmi,\t5T,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5T), fastmul)\n+ARM_CORE(\"arm1020t\",\tarm1020t, arm1020t,\t5T,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5T), fastmul)\n \n /* V5TE Architecture Processors */\n-ARM_CORE(\"arm9e\",\tarm9e, arm9e,\t\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, 9e)\n-ARM_CORE(\"arm946e-s\",\tarm946es, arm946es,\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, 9e)\n-ARM_CORE(\"arm966e-s\",\tarm966es, arm966es,\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, 9e)\n-ARM_CORE(\"arm968e-s\",\tarm968es, arm968es,\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, 9e)\n-ARM_CORE(\"arm10e\",\tarm10e, arm10e,\t\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, fastmul)\n-ARM_CORE(\"arm1020e\",\tarm1020e, arm1020e,\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, fastmul)\n-ARM_CORE(\"arm1022e\",\tarm1022e, arm1022e,\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, fastmul)\n-ARM_CORE(\"xscale\",\txscale, xscale,\t\t5TE, FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_FOR_ARCH5TE, xscale)\n-ARM_CORE(\"iwmmxt\",\tiwmmxt, iwmmxt,\t\t5TE, FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_IWMMXT | FL_FOR_ARCH5TE, xscale)\n-ARM_CORE(\"iwmmxt2\",\tiwmmxt2, iwmmxt2,\t5TE, FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2 | FL_FOR_ARCH5TE, xscale)\n-ARM_CORE(\"fa606te\",\tfa606te, fa606te,\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, 9e)\n-ARM_CORE(\"fa626te\",\tfa626te, fa626te,\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, 9e)\n-ARM_CORE(\"fmp626\",\tfmp626, fmp626,\t\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, 9e)\n-ARM_CORE(\"fa726te\",\tfa726te, fa726te,\t5TE, FL_LDSCHED | FL_FOR_ARCH5TE, fa726te)\n+ARM_CORE(\"arm9e\",\tarm9e, arm9e,\t\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"arm946e-s\",\tarm946es, arm946es,\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"arm966e-s\",\tarm966es, arm966es,\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"arm968e-s\",\tarm968es, arm968es,\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"arm10e\",\tarm10e, arm10e,\t\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), fastmul)\n+ARM_CORE(\"arm1020e\",\tarm1020e, arm1020e,\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), fastmul)\n+ARM_CORE(\"arm1022e\",\tarm1022e, arm1022e,\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), fastmul)\n+ARM_CORE(\"xscale\",\txscale, xscale,\t\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_FOR_ARCH5TE), xscale)\n+ARM_CORE(\"iwmmxt\",\tiwmmxt, iwmmxt,\t\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_IWMMXT | FL_FOR_ARCH5TE), xscale)\n+ARM_CORE(\"iwmmxt2\",\tiwmmxt2, iwmmxt2,\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_STRONG | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2 | FL_FOR_ARCH5TE), xscale)\n+ARM_CORE(\"fa606te\",\tfa606te, fa606te,\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"fa626te\",\tfa626te, fa626te,\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"fmp626\",\tfmp626, fmp626,\t\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), 9e)\n+ARM_CORE(\"fa726te\",\tfa726te, fa726te,\t5TE,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TE), fa726te)\n \n /* V5TEJ Architecture Processors */\n-ARM_CORE(\"arm926ej-s\",\tarm926ejs, arm926ejs,\t5TEJ, FL_LDSCHED | FL_FOR_ARCH5TEJ, 9e)\n-ARM_CORE(\"arm1026ej-s\",\tarm1026ejs, arm1026ejs,\t5TEJ, FL_LDSCHED | FL_FOR_ARCH5TEJ, 9e)\n+ARM_CORE(\"arm926ej-s\",\tarm926ejs, arm926ejs,\t5TEJ,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TEJ), 9e)\n+ARM_CORE(\"arm1026ej-s\",\tarm1026ejs, arm1026ejs,\t5TEJ,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH5TEJ), 9e)\n \n /* V6 Architecture Processors */\n-ARM_CORE(\"arm1136j-s\",\t\tarm1136js, arm1136js,\t\t6J,  FL_LDSCHED | FL_FOR_ARCH6J, 9e)\n-ARM_CORE(\"arm1136jf-s\",\t\tarm1136jfs, arm1136jfs,\t\t6J,  FL_LDSCHED | FL_VFPV2 | FL_FOR_ARCH6J, 9e)\n-ARM_CORE(\"arm1176jz-s\",\t\tarm1176jzs, arm1176jzs,\t\t6KZ, FL_LDSCHED | FL_FOR_ARCH6KZ, 9e)\n-ARM_CORE(\"arm1176jzf-s\",\tarm1176jzfs, arm1176jzfs,\t6KZ, FL_LDSCHED | FL_VFPV2 | FL_FOR_ARCH6KZ, 9e)\n-ARM_CORE(\"mpcorenovfp\",\t\tmpcorenovfp, mpcorenovfp,\t6K,  FL_LDSCHED | FL_FOR_ARCH6K, 9e)\n-ARM_CORE(\"mpcore\",\t\tmpcore, mpcore,\t\t\t6K,  FL_LDSCHED | FL_VFPV2 | FL_FOR_ARCH6K, 9e)\n-ARM_CORE(\"arm1156t2-s\",\t\tarm1156t2s, arm1156t2s,\t\t6T2, FL_LDSCHED | FL_FOR_ARCH6T2, v6t2)\n-ARM_CORE(\"arm1156t2f-s\",\tarm1156t2fs, arm1156t2fs,\t6T2, FL_LDSCHED | FL_VFPV2 | FL_FOR_ARCH6T2, v6t2)\n+ARM_CORE(\"arm1136j-s\",\t\tarm1136js, arm1136js,\t\t6J,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH6J), 9e)\n+ARM_CORE(\"arm1136jf-s\",\t\tarm1136jfs, arm1136jfs,\t\t6J,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_VFPV2 | FL_FOR_ARCH6J), 9e)\n+ARM_CORE(\"arm1176jz-s\",\t\tarm1176jzs, arm1176jzs,\t\t6KZ,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH6KZ), 9e)\n+ARM_CORE(\"arm1176jzf-s\",\tarm1176jzfs, arm1176jzfs,\t6KZ,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_VFPV2 | FL_FOR_ARCH6KZ), 9e)\n+ARM_CORE(\"mpcorenovfp\",\t\tmpcorenovfp, mpcorenovfp,\t6K,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH6K), 9e)\n+ARM_CORE(\"mpcore\",\t\tmpcore, mpcore,\t\t\t6K,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_VFPV2 | FL_FOR_ARCH6K), 9e)\n+ARM_CORE(\"arm1156t2-s\",\t\tarm1156t2s, arm1156t2s,\t\t6T2,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH6T2), v6t2)\n+ARM_CORE(\"arm1156t2f-s\",\tarm1156t2fs, arm1156t2fs,\t6T2,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_VFPV2 | FL_FOR_ARCH6T2), v6t2)\n \n /* V6M Architecture Processors */\n-ARM_CORE(\"cortex-m1\",\t\tcortexm1, cortexm1,\t\t6M, FL_LDSCHED | FL_FOR_ARCH6M, v6m)\n-ARM_CORE(\"cortex-m0\",\t\tcortexm0, cortexm0,\t\t6M, FL_LDSCHED | FL_FOR_ARCH6M, v6m)\n-ARM_CORE(\"cortex-m0plus\",\tcortexm0plus, cortexm0plus,\t6M, FL_LDSCHED | FL_FOR_ARCH6M, v6m)\n+ARM_CORE(\"cortex-m1\",\t\tcortexm1, cortexm1,\t\t6M,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH6M), v6m)\n+ARM_CORE(\"cortex-m0\",\t\tcortexm0, cortexm0,\t\t6M,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH6M), v6m)\n+ARM_CORE(\"cortex-m0plus\",\tcortexm0plus, cortexm0plus,\t6M,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH6M), v6m)\n \n /* V6M Architecture Processors for small-multiply implementations.  */\n-ARM_CORE(\"cortex-m1.small-multiply\",\tcortexm1smallmultiply, cortexm1,\t6M, FL_LDSCHED | FL_SMALLMUL | FL_FOR_ARCH6M, v6m)\n-ARM_CORE(\"cortex-m0.small-multiply\",\tcortexm0smallmultiply, cortexm0,\t6M, FL_LDSCHED | FL_SMALLMUL | FL_FOR_ARCH6M, v6m)\n-ARM_CORE(\"cortex-m0plus.small-multiply\",cortexm0plussmallmultiply, cortexm0plus,6M, FL_LDSCHED | FL_SMALLMUL | FL_FOR_ARCH6M, v6m)\n+ARM_CORE(\"cortex-m1.small-multiply\",\tcortexm1smallmultiply, cortexm1,\t6M,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_SMALLMUL | FL_FOR_ARCH6M), v6m)\n+ARM_CORE(\"cortex-m0.small-multiply\",\tcortexm0smallmultiply, cortexm0,\t6M,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_SMALLMUL | FL_FOR_ARCH6M), v6m)\n+ARM_CORE(\"cortex-m0plus.small-multiply\",cortexm0plussmallmultiply, cortexm0plus,6M,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_SMALLMUL | FL_FOR_ARCH6M), v6m)\n \n /* V7 Architecture Processors */\n-ARM_CORE(\"generic-armv7-a\",\tgenericv7a, genericv7a,\t\t7A,  FL_LDSCHED | FL_FOR_ARCH7A, cortex)\n-ARM_CORE(\"cortex-a5\",\t\tcortexa5, cortexa5,\t\t7A,  FL_LDSCHED | FL_FOR_ARCH7A, cortex_a5)\n-ARM_CORE(\"cortex-a7\",\t\tcortexa7, cortexa7,\t\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A, cortex_a7)\n-ARM_CORE(\"cortex-a8\",\t\tcortexa8, cortexa8,\t\t7A,  FL_LDSCHED | FL_FOR_ARCH7A, cortex_a8)\n-ARM_CORE(\"cortex-a9\",\t\tcortexa9, cortexa9,\t\t7A,  FL_LDSCHED | FL_FOR_ARCH7A, cortex_a9)\n-ARM_CORE(\"cortex-a12\",\t\tcortexa12, cortexa17,\t\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A, cortex_a12)\n-ARM_CORE(\"cortex-a15\",\t\tcortexa15, cortexa15,\t\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A, cortex_a15)\n-ARM_CORE(\"cortex-a17\",\t\tcortexa17, cortexa17,\t\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A, cortex_a12)\n-ARM_CORE(\"cortex-r4\",\t\tcortexr4, cortexr4,\t\t7R,  FL_LDSCHED | FL_FOR_ARCH7R, cortex)\n-ARM_CORE(\"cortex-r4f\",\t\tcortexr4f, cortexr4f,\t\t7R,  FL_LDSCHED | FL_FOR_ARCH7R, cortex)\n-ARM_CORE(\"cortex-r5\",\t\tcortexr5, cortexr5,\t\t7R,  FL_LDSCHED | FL_ARM_DIV | FL_FOR_ARCH7R, cortex)\n-ARM_CORE(\"cortex-r7\",\t\tcortexr7, cortexr7,\t\t7R,  FL_LDSCHED | FL_ARM_DIV | FL_FOR_ARCH7R, cortex)\n-ARM_CORE(\"cortex-m7\",\t\tcortexm7, cortexm7,\t\t7EM, FL_LDSCHED | FL_NO_VOLATILE_CE | FL_FOR_ARCH7EM, cortex_m7)\n-ARM_CORE(\"cortex-m4\",\t\tcortexm4, cortexm4,\t\t7EM, FL_LDSCHED | FL_FOR_ARCH7EM, v7m)\n-ARM_CORE(\"cortex-m3\",\t\tcortexm3, cortexm3,\t\t7M,  FL_LDSCHED | FL_FOR_ARCH7M, v7m)\n-ARM_CORE(\"marvell-pj4\",\t\tmarvell_pj4, marvell_pj4,\t7A,  FL_LDSCHED | FL_FOR_ARCH7A, marvell_pj4)\n+ARM_CORE(\"generic-armv7-a\",\tgenericv7a, genericv7a,\t\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH7A), cortex)\n+ARM_CORE(\"cortex-a5\",\t\tcortexa5, cortexa5,\t\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH7A), cortex_a5)\n+ARM_CORE(\"cortex-a7\",\t\tcortexa7, cortexa7,\t\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a7)\n+ARM_CORE(\"cortex-a8\",\t\tcortexa8, cortexa8,\t\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH7A), cortex_a8)\n+ARM_CORE(\"cortex-a9\",\t\tcortexa9, cortexa9,\t\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH7A), cortex_a9)\n+ARM_CORE(\"cortex-a12\",\t\tcortexa12, cortexa17,\t\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a12)\n+ARM_CORE(\"cortex-a15\",\t\tcortexa15, cortexa15,\t\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a15)\n+ARM_CORE(\"cortex-a17\",\t\tcortexa17, cortexa17,\t\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a12)\n+ARM_CORE(\"cortex-r4\",\t\tcortexr4, cortexr4,\t\t7R,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH7R), cortex)\n+ARM_CORE(\"cortex-r4f\",\t\tcortexr4f, cortexr4f,\t\t7R,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH7R), cortex)\n+ARM_CORE(\"cortex-r5\",\t\tcortexr5, cortexr5,\t\t7R,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_ARM_DIV | FL_FOR_ARCH7R), cortex)\n+ARM_CORE(\"cortex-r7\",\t\tcortexr7, cortexr7,\t\t7R,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_ARM_DIV | FL_FOR_ARCH7R), cortex)\n+ARM_CORE(\"cortex-m7\",\t\tcortexm7, cortexm7,\t\t7EM,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_NO_VOLATILE_CE | FL_FOR_ARCH7EM), cortex_m7)\n+ARM_CORE(\"cortex-m4\",\t\tcortexm4, cortexm4,\t\t7EM,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH7EM), v7m)\n+ARM_CORE(\"cortex-m3\",\t\tcortexm3, cortexm3,\t\t7M,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH7M), v7m)\n+ARM_CORE(\"marvell-pj4\",\t\tmarvell_pj4, marvell_pj4,\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH7A), marvell_pj4)\n \n /* V7 big.LITTLE implementations */\n-ARM_CORE(\"cortex-a15.cortex-a7\", cortexa15cortexa7, cortexa7,\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A, cortex_a15)\n-ARM_CORE(\"cortex-a17.cortex-a7\", cortexa17cortexa7, cortexa7,\t7A,  FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A, cortex_a12)\n+ARM_CORE(\"cortex-a15.cortex-a7\", cortexa15cortexa7, cortexa7,\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a15)\n+ARM_CORE(\"cortex-a17.cortex-a7\", cortexa17cortexa7, cortexa7,\t7A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_THUMB_DIV | FL_ARM_DIV | FL_FOR_ARCH7A), cortex_a12)\n \n /* V8 Architecture Processors */\n-ARM_CORE(\"cortex-a53\",\tcortexa53, cortexa53,\t8A, FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A, cortex_a53)\n-ARM_CORE(\"cortex-a57\",\tcortexa57, cortexa57,\t8A, FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A, cortex_a57)\n-ARM_CORE(\"cortex-a72\",\tcortexa72, cortexa57,\t8A, FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A, cortex_a57)\n-ARM_CORE(\"exynos-m1\",\texynosm1,  cortexa57,\t8A, FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A, cortex_a57)\n-ARM_CORE(\"xgene1\",      xgene1,    xgene1,      8A, FL_LDSCHED | FL_FOR_ARCH8A,            xgene1)\n+ARM_CORE(\"cortex-a53\",\tcortexa53, cortexa53,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a53)\n+ARM_CORE(\"cortex-a57\",\tcortexa57, cortexa57,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n+ARM_CORE(\"cortex-a72\",\tcortexa72, cortexa57,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n+ARM_CORE(\"exynos-m1\",\texynosm1,  cortexa57,\t8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n+ARM_CORE(\"xgene1\",      xgene1,    xgene1,      8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_FOR_ARCH8A),            xgene1)\n \n /* V8 big.LITTLE implementations */\n-ARM_CORE(\"cortex-a57.cortex-a53\", cortexa57cortexa53, cortexa53, 8A,  FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A, cortex_a57)\n-ARM_CORE(\"cortex-a72.cortex-a53\", cortexa72cortexa53, cortexa53, 8A,  FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A, cortex_a57)\n+ARM_CORE(\"cortex-a57.cortex-a53\", cortexa57cortexa53, cortexa53, 8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)\n+ARM_CORE(\"cortex-a72.cortex-a53\", cortexa72cortexa53, cortexa53, 8A,\tARM_FSET_MAKE_CPU1 (FL_LDSCHED | FL_CRC32 | FL_FOR_ARCH8A), cortex_a57)"}, {"sha": "fa4e083adfe215b5820237f3cc6b449dbdefc778", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e656fbc820265bdab84bdc2ab6c4e32a4713ea1e/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e656fbc820265bdab84bdc2ab6c4e32a4713ea1e/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=e656fbc820265bdab84bdc2ab6c4e32a4713ea1e", "patch": "@@ -2197,7 +2197,7 @@ static const struct processors all_cores[] =\n   /* ARM Cores */\n #define ARM_CORE(NAME, X, IDENT, ARCH, FLAGS, COSTS) \\\n   {NAME, IDENT, #ARCH, BASE_ARCH_##ARCH,\t  \\\n-   ARM_FSET_MAKE_CPU1 (FLAGS), &arm_##COSTS##_tune},\n+   FLAGS, &arm_##COSTS##_tune},\n #include \"arm-cores.def\"\n #undef ARM_CORE\n   {NULL, arm_none, NULL, BASE_ARCH_0, ARM_FSET_EMPTY, NULL}\n@@ -2210,7 +2210,7 @@ static const struct processors all_architectures[] =\n      from the core.  */\n \n #define ARM_ARCH(NAME, CORE, ARCH, FLAGS) \\\n-  {NAME, CORE, #ARCH, BASE_ARCH_##ARCH, ARM_FSET_MAKE_CPU1 (FLAGS), NULL},\n+  {NAME, CORE, #ARCH, BASE_ARCH_##ARCH, FLAGS, NULL},\n #include \"arm-arches.def\"\n #undef ARM_ARCH\n   {NULL, arm_none, NULL, BASE_ARCH_0, ARM_FSET_EMPTY, NULL}"}]}