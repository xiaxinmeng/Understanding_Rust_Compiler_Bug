{"sha": "6fbec038f7a7ddf29f074943611b53210d17c40c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZiZWMwMzhmN2E3ZGRmMjlmMDc0OTQzNjExYjUzMjEwZDE3YzQwYw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-02-03T19:55:43Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-12-02T00:42:50Z"}, "message": "Use SHF_GNU_RETAIN to preserve symbol definitions\n\nIn assemly code, the section flag 'R' sets the SHF_GNU_RETAIN flag to\nindicate that the section must be preserved by the linker.\n\nAdd SECTION_RETAIN to indicate a section should be retained by the linker\nand set SECTION_RETAIN on section for the preserved symbol if assembler\nsupports SHF_GNU_RETAIN.  All retained symbols are placed in separate\nsections with\n\n\t.section .data.rel.local.preserved_symbol,\"awR\"\npreserved_symbol:\n...\n\t.section .data.rel.local,\"aw\"\nnot_preserved_symbol:\n...\n\nto avoid\n\n\t.section .data.rel.local,\"awR\"\npreserved_symbol:\n...\nnot_preserved_symbol:\n...\n\nwhich places not_preserved_symbol definition in the SHF_GNU_RETAIN\nsection.\n\ngcc/\n\n2020-12-01  H.J. Lu  <hjl.tools@gmail.com>\n\n\t* configure.ac (HAVE_GAS_SHF_GNU_RETAIN): New.  Define 1 if\n\tthe assembler supports marking sections with SHF_GNU_RETAIN flag.\n\t* output.h (SECTION_RETAIN): New.  Defined as 0x4000000.\n\t(SECTION_MACH_DEP): Changed from 0x4000000 to 0x8000000.\n\t(default_unique_section): Add a bool argument.\n\t* varasm.c (get_section): Set SECTION_RETAIN for the preserved\n\tsymbol with HAVE_GAS_SHF_GNU_RETAIN.\n\t(resolve_unique_section): Used named section for the preserved\n\tsymbol if assembler supports SHF_GNU_RETAIN.\n\t(get_variable_section): Handle the preserved common symbol with\n\tHAVE_GAS_SHF_GNU_RETAIN.\n\t(default_elf_asm_named_section): Require the full declaration and\n\tuse the 'R' flag for SECTION_RETAIN.\n\t* config.in: Regenerated.\n\t* configure: Likewise.\n\t* doc/sourcebuild.texi: Document R_flag_in_section.\n\ngcc/testsuite/\n\n2020-12-01  H.J. Lu  <hjl.tools@gmail.com>\n\t    Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* c-c++-common/attr-used.c: Check the 'R' flag.\n\t* c-c++-common/attr-used-2.c: Likewise.\n\t* c-c++-common/attr-used-3.c: New test.\n\t* c-c++-common/attr-used-4.c: Likewise.\n\t* gcc.c-torture/compile/attr-used-retain-1.c: Likewise.\n\t* gcc.c-torture/compile/attr-used-retain-2.c: Likewise.\n\t* lib/target-supports.exp\n\t(check_effective_target_R_flag_in_section): New proc.", "tree": {"sha": "17b1d7fb7010085b8d79deab1e4a07edf51ddf9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17b1d7fb7010085b8d79deab1e4a07edf51ddf9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fbec038f7a7ddf29f074943611b53210d17c40c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fbec038f7a7ddf29f074943611b53210d17c40c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fbec038f7a7ddf29f074943611b53210d17c40c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fbec038f7a7ddf29f074943611b53210d17c40c/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "670f5095e4aacc30099f6b73c1e67c06df76f36b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/670f5095e4aacc30099f6b73c1e67c06df76f36b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/670f5095e4aacc30099f6b73c1e67c06df76f36b"}], "stats": {"total": 209, "additions": 205, "deletions": 4}, "files": [{"sha": "b6e041d311eef73abc0caf6f376afa3f28543994", "filename": "gcc/config.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=6fbec038f7a7ddf29f074943611b53210d17c40c", "patch": "@@ -1386,6 +1386,13 @@\n #endif\n \n \n+/* Define 0/1 if your assembler supports marking sections with SHF_GNU_RETAIN\n+   flag. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_GAS_SHF_GNU_RETAIN\n+#endif\n+\n+\n /* Define 0/1 if your assembler supports marking sections with SHF_MERGE flag.\n    */\n #ifndef USED_FOR_TARGET"}, {"sha": "747822208f2517256a1da1a1d5566c8c20aafe15", "filename": "gcc/configure", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=6fbec038f7a7ddf29f074943611b53210d17c40c", "patch": "@@ -24430,6 +24430,57 @@ cat >>confdefs.h <<_ACEOF\n _ACEOF\n \n \n+# Test if the assembler supports the section flag 'R' for specifying\n+# section with SHF_GNU_RETAIN.\n+case \"${target}\" in\n+  # Solaris may use GNU assembler with Solairs ld.  Even if GNU\n+  # assembler supports the section flag 'R', it doesn't mean that\n+  # Solairs ld supports it.\n+  *-*-solaris2*)\n+    gcc_cv_as_shf_gnu_retain=no\n+    ;;\n+  *)\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for section 'R' flag\" >&5\n+$as_echo_n \"checking assembler for section 'R' flag... \" >&6; }\n+if ${gcc_cv_as_shf_gnu_retain+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_shf_gnu_retain=no\n+    if test $in_tree_gas = yes; then\n+    if test $in_tree_gas_is_elf = yes \\\n+  && test $gcc_cv_gas_vers -ge `expr \\( \\( 2 \\* 1000 \\) + 36 \\) \\* 1000 + 0`\n+  then gcc_cv_as_shf_gnu_retain=yes\n+fi\n+  elif test x$gcc_cv_as != x; then\n+    $as_echo '.section .foo,\"awR\",%progbits\n+.byte 0' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags --fatal-warnings -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_shf_gnu_retain=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_shf_gnu_retain\" >&5\n+$as_echo \"$gcc_cv_as_shf_gnu_retain\" >&6; }\n+\n+\n+    ;;\n+esac\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_GAS_SHF_GNU_RETAIN `if test $gcc_cv_as_shf_gnu_retain = yes; then echo 1; else echo 0; fi`\n+_ACEOF\n+\n+\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for section merging support\" >&5\n $as_echo_n \"checking assembler for section merging support... \" >&6; }\n if ${gcc_cv_as_shf_merge+:} false; then :"}, {"sha": "478d0d6f238c1a587c3f07c936da96232472f09a", "filename": "gcc/configure.ac", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=6fbec038f7a7ddf29f074943611b53210d17c40c", "patch": "@@ -3330,6 +3330,26 @@ AC_DEFINE_UNQUOTED(HAVE_GAS_SECTION_EXCLUDE,\n   [`if test $gcc_cv_as_section_exclude_e = yes || test $gcc_cv_as_section_exclude_hash = yes; then echo 1; else echo 0; fi`],\n [Define if your assembler supports specifying the exclude section flag.])\n \n+# Test if the assembler supports the section flag 'R' for specifying\n+# section with SHF_GNU_RETAIN.\n+case \"${target}\" in\n+  # Solaris may use GNU assembler with Solairs ld.  Even if GNU\n+  # assembler supports the section flag 'R', it doesn't mean that\n+  # Solairs ld supports it.\n+  *-*-solaris2*)\n+    gcc_cv_as_shf_gnu_retain=no\n+    ;;\n+  *)\n+    gcc_GAS_CHECK_FEATURE([section 'R' flag], gcc_cv_as_shf_gnu_retain,\n+      [elf,2,36,0], [--fatal-warnings],\n+      [.section .foo,\"awR\",%progbits\n+.byte 0])\n+    ;;\n+esac\n+AC_DEFINE_UNQUOTED(HAVE_GAS_SHF_GNU_RETAIN,\n+  [`if test $gcc_cv_as_shf_gnu_retain = yes; then echo 1; else echo 0; fi`],\n+  [Define 0/1 if your assembler supports marking sections with SHF_GNU_RETAIN flag.])\n+\n gcc_GAS_CHECK_FEATURE(section merging support, gcc_cv_as_shf_merge,\n  [elf,2,12,0], [--fatal-warnings],\n  [.section .rodata.str, \"aMS\", @progbits, 1])"}, {"sha": "55538c3586b4a421b0e250b669f250f9b330b139", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=6fbec038f7a7ddf29f074943611b53210d17c40c", "patch": "@@ -2462,6 +2462,9 @@ Target supports wide characters.\n @subsubsection Other attributes\n \n @table @code\n+@item R_flag_in_section\n+Target supports the 'R' flag in .section directive in assembly inputs.\n+\n @item automatic_stack_alignment\n Target supports automatic stack alignment.\n "}, {"sha": "729c52099e6b6fa0362e7b9fdf6728ec7874ad24", "filename": "gcc/output.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=6fbec038f7a7ddf29f074943611b53210d17c40c", "patch": "@@ -381,7 +381,11 @@ extern void no_asm_to_stream (FILE *);\n #define SECTION_COMMON   0x800000\t/* contains common data */\n #define SECTION_RELRO\t 0x1000000\t/* data is readonly after relocation processing */\n #define SECTION_EXCLUDE  0x2000000\t/* discarded by the linker */\n-#define SECTION_MACH_DEP 0x4000000\t/* subsequent bits reserved for target */\n+#define SECTION_RETAIN\t 0x4000000\t/* retained by the linker.  */\n+\n+/* NB: The maximum SECTION_MACH_DEP is 0x10000000 since AVR needs 4 bits\n+   in SECTION_MACH_DEP.  */\n+#define SECTION_MACH_DEP 0x8000000\t/* subsequent bits reserved for target */\n \n /* This SECTION_STYLE is used for unnamed sections that we can switch\n    to using a special assembler directive.  */"}, {"sha": "eef2519643fbae016948271c5b177a2bf74f3d81", "filename": "gcc/testsuite/c-c++-common/attr-used-2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-2.c?ref=6fbec038f7a7ddf29f074943611b53210d17c40c", "patch": "@@ -9,3 +9,4 @@ void foo()\n }\n \n /* { dg-final { scan-assembler \"xyzzy\" } } */\n+/* { dg-final { scan-assembler \"\\.data.*,\\\"awR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "ca64197929c7f59116efb81156eb14008a4316fc", "filename": "gcc/testsuite/c-c++-common/attr-used-3.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-3.c?ref=6fbec038f7a7ddf29f074943611b53210d17c40c", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -O2 -fcommon\" } */\n+\n+static int xyzzy __attribute__((__used__)); \n+\n+/* { dg-final { scan-assembler \"xyzzy\" } } */\n+/* { dg-final { scan-assembler \",\\\"awR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "1cbc4c703e9e5a598f2c212381dfb21285acd475", "filename": "gcc/testsuite/c-c++-common/attr-used-4.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used-4.c?ref=6fbec038f7a7ddf29f074943611b53210d17c40c", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -O2 -fcommon\" } */\n+\n+int xyzzy __attribute__((__used__)); \n+\n+/* { dg-final { scan-assembler \"xyzzy\" } } */\n+/* { dg-final { scan-assembler \",\\\"awR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "2036533c959beb3fe14b5b827aa231c6fe9dba68", "filename": "gcc/testsuite/c-c++-common/attr-used.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fattr-used.c?ref=6fbec038f7a7ddf29f074943611b53210d17c40c", "patch": "@@ -11,3 +11,4 @@ static void function_declaration_after(void) __attribute__((__used__));\n \n /* { dg-final { scan-assembler \"function_declaration_before\" } } */\n /* { dg-final { scan-assembler \"function_declaration_after\" } } */\n+/* { dg-final { scan-assembler \"\\.text.*,\\\"axR\\\"\" { target R_flag_in_section } } } */"}, {"sha": "5f6cbca6e33857fbf331b6c6233524addbd59bb1", "filename": "gcc/testsuite/gcc.c-torture/compile/attr-used-retain-1.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-used-retain-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-used-retain-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-used-retain-1.c?ref=6fbec038f7a7ddf29f074943611b53210d17c40c", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target R_flag_in_section } */\n+/* { dg-final { scan-assembler \".text.*,\\\"axR\\\"\" } } */\n+/* { dg-final { scan-assembler \".bss.*,\\\"awR\\\"\" } } */\n+/* { dg-final { scan-assembler \".data.*,\\\"awR\\\"\" } } */\n+/* { dg-final { scan-assembler \".rodata.*,\\\"aR\\\"\" } } */\n+/* { dg-final { scan-assembler \".data.used_foo_sec,\\\"awR\\\"\" } } */\n+\n+void __attribute__((used)) used_fn (void) { }\n+void unused_fn (void) { }\n+void __attribute__((hot,used)) used_hot_fn (void) { }\n+void __attribute__((hot)) unused_hot_fn (void) { }\n+void __attribute__((cold,used)) used_cold_fn (void) { }\n+void __attribute__((cold)) unused_cold_fn (void) { }\n+int __attribute__((used)) used_bss = 0;\n+int __attribute__((used)) used_data = 1;\n+const int __attribute__((used)) used_rodata = 2;\n+int __attribute__((used)) used_comm;\n+static int __attribute__((used)) used_lcomm;\n+\n+int unused_bss = 0;\n+int unused_data = 1;\n+const int unused_rodata = 2;\n+int unused_comm;\n+static int unused_lcomm;\n+\n+/* Test switching back to the retained sections.  */\n+void __attribute__((used)) used_fn2 (void) { }\n+int __attribute__((used)) used_bss2 = 0;\n+int __attribute__((used)) used_data2 = 1;\n+const int __attribute__((used)) used_rodata2 = 2;\n+int __attribute__((used)) used_comm2;\n+static int __attribute__((used)) used_lcomm2;\n+\n+int __attribute__((used,section(\".data.used_foo_sec\"))) used_foo = 2;"}, {"sha": "be5f3917ac80cf7020440fa87c66f11c47a4a618", "filename": "gcc/testsuite/gcc.c-torture/compile/attr-used-retain-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-used-retain-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-used-retain-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fattr-used-retain-2.c?ref=6fbec038f7a7ddf29f074943611b53210d17c40c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target R_flag_in_section } */\n+/* { dg-final { scan-assembler \".text.used_fn,\\\"axR\\\"\" } } */\n+/* { dg-final { scan-assembler \".text.used_fn2,\\\"axR\\\"\" } } */\n+/* { dg-final { scan-assembler \".bss.used_bss,\\\"awR\\\"\" } } */\n+/* { dg-final { scan-assembler \".bss.used_bss2,\\\"awR\\\"\" } } */\n+/* { dg-final { scan-assembler \".data.used_data,\\\"awR\\\"\" } } */\n+/* { dg-final { scan-assembler \".data.used_data2,\\\"awR\\\"\" } } */\n+/* { dg-final { scan-assembler \".rodata.used_rodata,\\\"aR\\\"\" } } */\n+/* { dg-final { scan-assembler \".rodata.used_rodata2,\\\"aR\\\"\" } } */\n+/* { dg-final { scan-assembler \".bss.used_lcomm,\\\"awR\\\"\" { target arm-*-* } } } */\n+/* { dg-final { scan-assembler \".bss.used_lcomm2,\\\"awR\\\"\" { target arm-*-* } } } */\n+/* { dg-final { scan-assembler \".data.used_foo_sec,\\\"awR\\\"\" } } */\n+/* { dg-options \"-ffunction-sections -fdata-sections\" } */\n+\n+#include \"attr-used-retain-1.c\""}, {"sha": "9d0a25d77e579bdf5b4a7127583385a3c71fcc81", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=6fbec038f7a7ddf29f074943611b53210d17c40c", "patch": "@@ -10662,3 +10662,43 @@ proc check_effective_target_no_fsanitize_address {} {\n     }\n     return 0;\n }\n+\n+# Return 1 if this target supports 'R' flag in .section directive, 0\n+# otherwise.  Cache the result.\n+\n+proc check_effective_target_R_flag_in_section { } {\n+    global tool\n+    global GCC_UNDER_TEST\n+\n+    # Need auto-host.h to check linker support.\n+    if { ![file exists ../../auto-host.h ] } {\n+\treturn 0\n+    }\n+\n+    return [check_cached_effective_target R_flag_in_section {\n+\n+\tset src pie[pid].c\n+\tset obj pie[pid].o\n+\n+\tset f [open $src \"w\"]\n+\tputs $f \"#include \\\"../../auto-host.h\\\"\"\n+\tputs $f \"#if HAVE_GAS_SHF_GNU_RETAIN == 0\"\n+\tputs $f \"# error Assembler does not support 'R' flag in .section directive.\"\n+\tputs $f \"#endif\"\n+\tclose $f\n+\n+\tverbose \"check_effective_target_R_flag_in_section compiling testfile $src\" 2\n+\tset lines [${tool}_target_compile $src $obj assembly \"\"]\n+\n+\tfile delete $src\n+\tfile delete $obj\n+\n+\tif [string match \"\" $lines] then {\n+\t    verbose \"check_effective_target_R_flag_in_section testfile compilation passed\" 2\n+\t    return 1\n+\t} else {\n+\t    verbose \"check_effective_target_R_flag_in_section testfile compilation failed\" 2\n+\t    return 0\n+\t}\n+    }]\n+}"}, {"sha": "6c13f528f7b839c236cab104b7d8a73cfd1c4cec", "filename": "gcc/varasm.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fbec038f7a7ddf29f074943611b53210d17c40c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=6fbec038f7a7ddf29f074943611b53210d17c40c", "patch": "@@ -289,6 +289,10 @@ get_section (const char *name, unsigned int flags, tree decl,\n   slot = section_htab->find_slot_with_hash (name, htab_hash_string (name),\n \t\t\t\t\t    INSERT);\n   flags |= SECTION_NAMED;\n+  if (HAVE_GAS_SHF_GNU_RETAIN\n+      && decl != nullptr\n+      && DECL_PRESERVE_P (decl))\n+    flags |= SECTION_RETAIN;\n   if (*slot == NULL)\n     {\n       sect = ggc_alloc<section> ();\n@@ -469,6 +473,7 @@ resolve_unique_section (tree decl, int reloc ATTRIBUTE_UNUSED,\n   if (DECL_SECTION_NAME (decl) == NULL\n       && targetm_common.have_named_sections\n       && (flag_function_or_data_sections\n+\t  || (HAVE_GAS_SHF_GNU_RETAIN && DECL_PRESERVE_P (decl))\n \t  || DECL_COMDAT_GROUP (decl)))\n     {\n       targetm.asm_out.unique_section (decl, reloc);\n@@ -1207,7 +1212,8 @@ get_variable_section (tree decl, bool prefer_noswitch_p)\n   if (vnode)\n     vnode->get_constructor ();\n \n-  if (DECL_COMMON (decl))\n+  if (DECL_COMMON (decl)\n+      && !(HAVE_GAS_SHF_GNU_RETAIN && DECL_PRESERVE_P (decl)))\n     {\n       /* If the decl has been given an explicit section name, or it resides\n \t in a non-generic address space, then it isn't common, and shouldn't\n@@ -6745,9 +6751,10 @@ default_elf_asm_named_section (const char *name, unsigned int flags,\n \n   /* If we have already declared this section, we can use an\n      abbreviated form to switch back to it -- unless this section is\n-     part of a COMDAT groups, in which case GAS requires the full\n-     declaration every time.  */\n+     part of a COMDAT groups or with SHF_GNU_RETAIN, in which case GAS\n+     requires the full declaration every time.  */\n   if (!(HAVE_COMDAT_GROUP && (flags & SECTION_LINKONCE))\n+      && !(flags & SECTION_RETAIN)\n       && (flags & SECTION_DECLARED))\n     {\n       fprintf (asm_out_file, \"\\t.section\\t%s\\n\", name);\n@@ -6780,6 +6787,8 @@ default_elf_asm_named_section (const char *name, unsigned int flags,\n \t*f++ = TLS_SECTION_ASM_FLAG;\n       if (HAVE_COMDAT_GROUP && (flags & SECTION_LINKONCE))\n \t*f++ = 'G';\n+      if (flags & SECTION_RETAIN)\n+\t*f++ = 'R';\n #ifdef MACH_DEP_SECTION_ASM_FLAG\n       if (flags & SECTION_MACH_DEP)\n \t*f++ = MACH_DEP_SECTION_ASM_FLAG;"}]}