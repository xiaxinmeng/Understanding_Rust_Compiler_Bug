{"sha": "f25605acef7d9246e7e9e11a5826cdce854ccd00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI1NjA1YWNlZjdkOTI0NmU3ZTllMTFhNTgyNmNkY2U4NTRjY2QwMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-08-30T12:11:09Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-08-30T12:11:09Z"}, "message": "* lib/f-torture.exp: Remove.\n\nFrom-SVN: r86760", "tree": {"sha": "5f14328519dab653e2f9b42a1a093cd8756c379b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f14328519dab653e2f9b42a1a093cd8756c379b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f25605acef7d9246e7e9e11a5826cdce854ccd00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f25605acef7d9246e7e9e11a5826cdce854ccd00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f25605acef7d9246e7e9e11a5826cdce854ccd00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f25605acef7d9246e7e9e11a5826cdce854ccd00/comments", "author": null, "committer": null, "parents": [{"sha": "68760aeea98c8c39f968f6be3206bf858bb0a908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68760aeea98c8c39f968f6be3206bf858bb0a908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68760aeea98c8c39f968f6be3206bf858bb0a908"}], "stats": {"total": 337, "additions": 4, "deletions": 333}, "files": [{"sha": "193974b986749e46718abb23b31399e5c4ac5a37", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f25605acef7d9246e7e9e11a5826cdce854ccd00/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f25605acef7d9246e7e9e11a5826cdce854ccd00/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f25605acef7d9246e7e9e11a5826cdce854ccd00", "patch": "@@ -1,3 +1,7 @@\n+2004-08-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* lib/f-torture.exp: Remove.\n+\n 2004-08-29  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR rtl-optimization/16590"}, {"sha": "88e8773a07a4d22b39c446455ed3992642136e57", "filename": "gcc/testsuite/lib/f-torture.exp", "status": "removed", "additions": 0, "deletions": 333, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68760aeea98c8c39f968f6be3206bf858bb0a908/gcc%2Ftestsuite%2Flib%2Ff-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68760aeea98c8c39f968f6be3206bf858bb0a908/gcc%2Ftestsuite%2Flib%2Ff-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ff-torture.exp?ref=68760aeea98c8c39f968f6be3206bf858bb0a908", "patch": "@@ -1,333 +0,0 @@\n-# Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000 Free Software Foundation, Inc.\n-\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 2 of the License, or\n-# (at your option) any later version.\n-# \n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-# \n-# You should have received a copy of the GNU General Public License\n-# along with this program; if not, write to the Free Software\n-# Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n-\n-# Please email any bugs, comments, and/or additions to this file to:\n-# bug-dejagnu@gnu.org.\n-\n-# This file was written by Rob Savoye. (rob@cygnus.com)\n-\n-# The default option list can be overridden by\n-# TORTURE_OPTIONS=\"{ { list1 } ... { listN } }\"\n-\n-if ![info exists TORTURE_OPTIONS] {\n-    set TORTURE_OPTIONS [list \\\n-\t{ -O0 } { -O1 } { -O2 } \\\n-\t{ -O2 -fomit-frame-pointer -finline-functions } \\\n-\t{ -O2 -fomit-frame-pointer -finline-functions -funroll-loops } \\\n-\t{ -O2 -fomit-frame-pointer -finline-functions -funroll-all-loops } \\\n-\t{ -O3 -g } \\\n-\t{ -Os }]\n-}\n-\n-\n-# Split TORTURE_OPTIONS into two choices: one for testcases with loops and\n-# one for testcases without loops.\n-\n-set torture_with_loops $TORTURE_OPTIONS\n-set torture_without_loops \"\"\n-foreach option $TORTURE_OPTIONS {\n-    if ![string match \"*loop*\" $option] {\n-\tlappend torture_without_loops $option\n-    }\n-}\n-\n-#\n-# f-torture-compile -- runs the Tege C-torture test\n-#\n-# SRC is the full pathname of the testcase.\n-# OPTION is the specific compiler flag we're testing (eg: -O2).\n-#\n-proc f-torture-compile { src option } {\n-    global output\n-    global srcdir tmpdir\n-    global host_triplet\n-\n-    set output \"$tmpdir/[file tail [file rootname $src]].o\"\n-\n-    regsub \"^$srcdir/?\" $src \"\" testcase\n-    # If we couldn't rip $srcdir out of `src' then just do the best we can.\n-    # The point is to reduce the unnecessary noise in the logs.  Don't strip\n-    # out too much because different testcases with the same name can confuse\n-    # `test-tool'.\n-    if [string match \"/*\" $testcase] {\n-\tset testcase \"[file tail [file dirname $src]]/[file tail $src]\"\n-    }\n-\n-    verbose \"Testing $testcase, $option\" 1\n-\n-    # Run the compiler and analyze the results.\n-    set options \"\"\n-    lappend options \"additional_flags=-w $option\"\n-\n-    set comp_output [g77_target_compile \"$src\" \"$output\" object $options];\n-    \n-    # Set a few common compiler messages.\n-    set fatal_signal \"*77*: Internal compiler error: program*got fatal signal\"\n- \n-    if [string match \"$fatal_signal 6\" $comp_output] then {\n-\tg77_fail $testcase \"Got Signal 6, $option\"\n-\tremote_file build delete $output\n-\treturn\n-    }\n-\n-    if [string match \"$fatal_signal 11\" $comp_output] then {\n-\tg77_fail $testcase \"Got Signal 11, $option\"\n-\tremote_file build delete $output\n-\treturn\n-    }\n-\n-    # Prune warnings we know are unwanted.\n-    set comp_output [prune_warnings $comp_output]\n-\n-    # We shouldn't get these because of -w, but just in case.\n-    if [string match \"*77*:*warning:*\" $comp_output] then {\n-\twarning \"$testcase: (with warnings) $option\"\n-\tsend_log \"$comp_output\\n\"\n-\tunresolved \"$testcase, $option\"\n-\tremote_file build delete $output\n-\treturn\n-    }\n-\n-    set unsupported_message [g77_check_unsupported_p $comp_output]\n-    if { $unsupported_message != \"\" } {\n-\tunsupported \"$testcase: $unsupported_message\"\n-\tremote_file build delete $output\n-\treturn\n-    }\n-\n-    # remove any leftover LF/CR to make sure any output is legit\n-    regsub -all -- \"\\[\\r\\n\\]*\" $comp_output \"\" comp_output\n-    # If any message remains, we fail.\n-    if ![string match \"\" $comp_output] then {\n-\tg77_fail $testcase $option\n-\tremote_file build delete $output\n-\treturn\n-    }\n-\n-    g77_pass $testcase $option\n-    remote_file build delete $output\n-}\n-\n-#\n-# f-torture-execute -- utility to compile and execute a testcase\n-#\n-# SRC is the full pathname of the testcase.\n-#\n-# If the testcase has an associated .x file, we source that to run the\n-# test instead.  We use .x so that we don't lengthen the existing filename\n-# to more than 14 chars.\n-#\n-proc f-torture-execute { src } {\n-    global tmpdir tool srcdir output compiler_conditional_xfail_data\n-\n-    # Check for alternate driver.\n-    if [file exists [file rootname $src].x] {\n-\tverbose \"Using alternate driver [file rootname [file tail $src]].x\" 2\n-\tset done_p 0\n-\tcatch \"set done_p \\[source [file rootname $src].x\\]\"\n-\tif { $done_p } {\n-\t    return\n-\t}\n-    }\n-   \n-    # Look for a loop within the source code - if we don't find one,\n-    # don't pass -funroll[-all]-loops.\n-    global torture_with_loops torture_without_loops\n-    if [expr [search_for_re $src \"do *\\[0-9\\]\"]+[search_for_re $src \"end *do\"]] then {\n-\tset option_list $torture_with_loops\n-    } else {\n-\tset option_list $torture_without_loops\n-    }\n-\n-    set executable $tmpdir/[file tail [file rootname $src].x]\n-\n-    regsub \"^$srcdir/?\" $src \"\" testcase\n-    # If we couldn't rip $srcdir out of `src' then just do the best we can.\n-    # The point is to reduce the unnecessary noise in the logs.  Don't strip\n-    # out too much because different testcases with the same name can confuse\n-    # `test-tool'.\n-    if [string match \"/*\" $testcase] {\n-\tset testcase \"[file tail [file dirname $src]]/[file tail $src]\"\n-    }\n-\n-    foreach option $option_list {\n-\t# torture_{compile,execute}_xfail are set by the .x script\n-\t# (if present)\n-\tif [info exists torture_compile_xfail] {\n-\t    setup_xfail $torture_compile_xfail\n-\t}\n-\n-\t# torture_execute_before_{compile,execute} can be set by the .x script\n-\t# (if present)\n-\tif [info exists torture_eval_before_compile] {\n-            set ignore_me [eval $torture_eval_before_compile]\n-\t}\n-\n-\tremote_file build delete $executable\n-\tverbose \"Testing $testcase, $option\" 1\n-\n-\tset options \"\"\n-\tlappend options \"additional_flags=-w $option\"\n-\tset comp_output [g77_target_compile \"$src\" \"$executable\" executable $options];\n-\n-\t# Set a few common compiler messages.\n-\tset fatal_signal \"*77*: Internal compiler error: program*got fatal signal\"\n-\t\n-\tif [string match \"$fatal_signal 6\" $comp_output] then {\n-\t    g77_fail $testcase \"Got Signal 6, $option\"\n-\t    remote_file build delete $executable\n-\t    continue\n-\t}\n-\t\n-\tif [string match \"$fatal_signal 11\" $comp_output] then {\n-\t    g77_fail $testcase \"Got Signal 11, $option\"\n-\t    remote_file build delete $executable\n-\t    continue\n-\t}\n-\t\n-\t# We shouldn't get these because of -w, but just in case.\n-\tif [string match \"*77*:*warning:*\" $comp_output] then {\n-\t    warning \"$testcase: (with warnings) $option\"\n-\t    send_log \"$comp_output\\n\"\n-\t    unresolved \"$testcase, $option\"\n-\t    remote_file build delete $executable\n-\t    continue\n-\t}\n-\t\n-\tset comp_output [prune_warnings $comp_output]\n-\t\n-\tset unsupported_message [g77_check_unsupported_p $comp_output]\n-\n-\tif { $unsupported_message != \"\" } {\n-\t    unsupported \"$testcase: $unsupported_message\"\n-\t    continue\n-\t} elseif ![file exists $executable] {\n-\t    if ![is3way] {\n-\t\tfail \"$testcase compilation, $option\"\n-\t\tuntested \"$testcase execution, $option\"\n-\t\tcontinue\n-\t    } else {\n-\t\t# FIXME: since we can't test for the existance of a remote\n-\t\t# file without short of doing an remote file list, we assume\n-\t\t# that since we got no output, it must have compiled.\n-\t\tpass \"$testcase compilation, $option\"\t\t\n-\t    }\n-\t} else {\n-\t    pass \"$testcase compilation, $option\"\n-\t}\n-\n-\t# See if this source file uses \"long long\" types, if it does, and\n-\t# no_long_long is set, skip execution of the test.\n-\tif [target_info exists no_long_long] then {\n-\t    if [expr [search_for_re $src \"integer\\*8\"]] then {\n-\t\tuntested \"$testcase execution, $option\"\n-\t\tcontinue\n-\t    }\n-\t}\n-\n-\tif [info exists torture_execute_xfail] {\n-\t    setup_xfail $torture_execute_xfail\n-\t}\n-\n-\tif [info exists torture_eval_before_execute] {\n-            set ignore_me [eval $torture_eval_before_execute]\n-\t}\n-\n-\tset result [g77_load \"$executable\" \"\" \"\"]\n-\tset status [lindex $result 0];\n-\tset output [lindex $result 1];\n-        if { $status == \"pass\" } {\n-\t    remote_file build delete $executable\n-        }\n-\t$status \"$testcase execution, $option\"\n-    }\n-}\n-\n-#\n-# search_for_re -- looks for a case-insensitive regexp match in a file\n-#\n-proc search_for_re { file pattern } {\n-    set fd [open $file r]\n-    while { [gets $fd cur_line]>=0 } {\n-\tif [regexp -nocase -- \"$pattern\" $cur_line] then {\n-\t    close $fd\n-\t    return 1\n-\t}\n-    }\n-    close $fd\n-    return 0\n-}\n-\n-#\n-# f-torture -- the f-torture testcase source file processor\n-#\n-# This runs compilation only tests (no execute tests).\n-# SRC is the full pathname of the testcase, or just a file name in which case\n-# we prepend $srcdir/$subdir.\n-#\n-# If the testcase has an associated .x file, we source that to run the\n-# test instead.  We use .x so that we don't lengthen the existing filename\n-# to more than 14 chars.\n-#\n-proc f-torture { args } {\n-    global srcdir subdir compiler_conditional_xfail_data\n-\n-    set src [lindex $args 0];\n-    if { [llength $args] > 1 } {\n-\tset options [lindex $args 1];\n-    } else {\n-\tset options \"\"\n-    }\n-\n-    # Prepend $srdir/$subdir if missing.\n-    if ![string match \"*/*\" $src] {\n-\tset src \"$srcdir/$subdir/$src\"\n-    }\n-\n-    # Check for alternate driver.\n-    if [file exists [file rootname $src].x] {\n-\tverbose \"Using alternate driver [file rootname [file tail $src]].x\" 2\n-\tset done_p 0\n-\tcatch \"set done_p \\[source [file rootname $src].x\\]\"\n-\tif { $done_p } {\n-\t    return\n-\t}\n-    }\n-   \n-    # Look for a loop within the source code - if we don't find one,\n-    # don't pass -funroll[-all]-loops.\n-    global torture_with_loops torture_without_loops\n-    if [expr [search_for_re $src \"do *\\[0-9\\]\"]+[search_for_re $src \"end *do\"]] then {\n-\tset option_list $torture_with_loops\n-    } else {\n-\tset option_list $torture_without_loops\n-    }\n-\n-    # loop through all the options\n-    foreach option $option_list {\n-\t# torture_compile_xfail is set by the .x script (if present)\n-\tif [info exists torture_compile_xfail] {\n-\t    setup_xfail $torture_compile_xfail\n-\t}\n-\n-\t# torture_execute_before_compile is set by the .x script (if present)\n-\tif [info exists torture_eval_before_compile] {\n-            set ignore_me [eval $torture_eval_before_compile]\n-\t}\n-\n-\tf-torture-compile $src \"$option $options\"\n-    }\n-}"}]}