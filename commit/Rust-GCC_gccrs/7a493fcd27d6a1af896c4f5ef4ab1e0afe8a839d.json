{"sha": "7a493fcd27d6a1af896c4f5ef4ab1e0afe8a839d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E0OTNmY2QyN2Q2YTFhZjg5NmM0ZjVlZjRhYjFlMGFmZThhODM5ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-10T10:46:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-10T10:46:09Z"}, "message": "rtlanal: Another fix for VOIDmode MEMs [PR98601]\n\nThis is a sequel to the PR85022 changes, inline-asm can (unfortunately)\nintroduce VOIDmode MEMs and in PR85022 they have been changed so that\nwe don't pretend we know their size (as opposed to assuming they have\nzero size).\n\nThis time we ICE in rtx_addr_can_trap_p_1 because it assumes that\nall memory but BLKmode has known size.  The patch just treats VOIDmode\nMEMs like BLKmode in that regard.  And, the STRICT_ALIGNMENT change\nis needed because VOIDmode has GET_MODE_SIZE of 0 and we don't want to\ncheck if something is a multiple of 0.\n\n2021-04-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/98601\n\t* rtlanal.c (rtx_addr_can_trap_p_1): Allow in assert unknown size\n\tnot just for BLKmode, but also for VOIDmode.  For STRICT_ALIGNMENT\n\tunaligned_mems handle VOIDmode like BLKmode.\n\n\t* gcc.dg/torture/pr98601.c: New test.", "tree": {"sha": "2addf0167454ac74f3d0c04c4205517d79a568e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2addf0167454ac74f3d0c04c4205517d79a568e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a493fcd27d6a1af896c4f5ef4ab1e0afe8a839d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a493fcd27d6a1af896c4f5ef4ab1e0afe8a839d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a493fcd27d6a1af896c4f5ef4ab1e0afe8a839d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a493fcd27d6a1af896c4f5ef4ab1e0afe8a839d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c9744fb3bf2fbf7cec5722f4b187eb553d98280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c9744fb3bf2fbf7cec5722f4b187eb553d98280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c9744fb3bf2fbf7cec5722f4b187eb553d98280"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "c35386bccbdb921b04db8f6a6f82ec37d4c3c675", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a493fcd27d6a1af896c4f5ef4ab1e0afe8a839d/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a493fcd27d6a1af896c4f5ef4ab1e0afe8a839d/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=7a493fcd27d6a1af896c4f5ef4ab1e0afe8a839d", "patch": "@@ -464,12 +464,17 @@ rtx_addr_can_trap_p_1 (const_rtx x, poly_int64 offset, poly_int64 size,\n \t\t       machine_mode mode, bool unaligned_mems)\n {\n   enum rtx_code code = GET_CODE (x);\n-  gcc_checking_assert (mode == BLKmode || known_size_p (size));\n+  gcc_checking_assert (mode == BLKmode\n+\t\t       || mode == VOIDmode\n+\t\t       || known_size_p (size));\n   poly_int64 const_x1;\n \n   /* The offset must be a multiple of the mode size if we are considering\n      unaligned memory references on strict alignment machines.  */\n-  if (STRICT_ALIGNMENT && unaligned_mems && mode != BLKmode)\n+  if (STRICT_ALIGNMENT\n+      && unaligned_mems\n+      && mode != BLKmode\n+      && mode != VOIDmode)\n     {\n       poly_int64 actual_offset = offset;\n "}, {"sha": "ee9d076c02deee61cf49fa51e137470703241e0d", "filename": "gcc/testsuite/gcc.dg/torture/pr98601.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a493fcd27d6a1af896c4f5ef4ab1e0afe8a839d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98601.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a493fcd27d6a1af896c4f5ef4ab1e0afe8a839d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98601.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98601.c?ref=7a493fcd27d6a1af896c4f5ef4ab1e0afe8a839d", "patch": "@@ -0,0 +1,14 @@\n+/* PR rtl-optimization/98601 */\n+/* { dg-do compile } */\n+\n+void\n+foo (void *p)\n+{\n+  asm (\"\" : \"=m\" (*p));\t\t\t/* { dg-warning \"dereferencing 'void \\\\*' pointer\" } */\n+}\n+\n+void\n+bar (void *p)\n+{\n+  asm volatile (\"\" : : \"m\" (*p));\t/* { dg-warning \"dereferencing 'void \\\\*' pointer\" } */\n+}"}]}