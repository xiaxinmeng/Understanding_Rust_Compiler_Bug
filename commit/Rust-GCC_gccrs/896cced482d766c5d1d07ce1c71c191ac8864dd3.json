{"sha": "896cced482d766c5d1d07ce1c71c191ac8864dd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk2Y2NlZDQ4MmQ3NjZjNWQxZDA3Y2UxYzcxYzE5MWFjODg2NGRkMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-04-04T17:46:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-04-04T17:46:06Z"}, "message": "tree.h (sizetype_tab[2], [...]): Merge all of these into a single struct, with additional [us]sizetype entries.\n\n* tree.h (sizetype_tab[2], sbitsizetype, ubitsizetype): Merge all\nof these into a single struct, with additional [us]sizetype entries.\n* stor-layout.c (set_sizetype): Initialize [us]sizetype.\n* fold-const.c (size_int_wide): Don't rely on sizetype_tab being\nan array.\n\nFrom-SVN: r18994", "tree": {"sha": "732571c84a2af807ac7242046fc7cc2b2ae49b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/732571c84a2af807ac7242046fc7cc2b2ae49b19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/896cced482d766c5d1d07ce1c71c191ac8864dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896cced482d766c5d1d07ce1c71c191ac8864dd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/896cced482d766c5d1d07ce1c71c191ac8864dd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/896cced482d766c5d1d07ce1c71c191ac8864dd3/comments", "author": null, "committer": null, "parents": [{"sha": "8983c7160410e7b865cd27a02b34fa506c8c2620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8983c7160410e7b865cd27a02b34fa506c8c2620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8983c7160410e7b865cd27a02b34fa506c8c2620"}], "stats": {"total": 63, "additions": 48, "deletions": 15}, "files": [{"sha": "4cd6303c7930e12ae2568b655ce1f0766e5141ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896cced482d766c5d1d07ce1c71c191ac8864dd3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896cced482d766c5d1d07ce1c71c191ac8864dd3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=896cced482d766c5d1d07ce1c71c191ac8864dd3", "patch": "@@ -1,3 +1,11 @@\n+Sat Apr  4 17:42:05 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* tree.h (sizetype_tab[2], sbitsizetype, ubitsizetype): Merge all\n+\tof these into a single struct, with additional [us]sizetype entries.\n+\t* stor-layout.c (set_sizetype): Initialize [us]sizetype.\n+\t* fold-const.c (size_int_wide): Don't rely on sizetype_tab being\n+\tan array.\n+\n Sat Apr  4 17:04:41 1998  Richard Henderson  <rth@cygnus.com>\n \n \t* configure.in (alpha-*-linux-*): Undo tm_file changes from gcc2 merge."}, {"sha": "afdd26b679d85d28b411f0a3392ba51c6a7fcc2e", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896cced482d766c5d1d07ce1c71c191ac8864dd3/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896cced482d766c5d1d07ce1c71c191ac8864dd3/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=896cced482d766c5d1d07ce1c71c191ac8864dd3", "patch": "@@ -1444,14 +1444,14 @@ size_int_wide (number, high, bit_p)\n       /* Make this a permanent node.  */\n       end_temporary_allocation ();\n       t = build_int_2 (number, 0);\n-      TREE_TYPE (t) = sizetype_tab[bit_p];\n+      TREE_TYPE (t) = bit_p ? bitsizetype : sizetype;\n       size_table[number][bit_p] = t;\n       pop_obstacks ();\n     }\n   else\n     {\n       t = build_int_2 (number, high);\n-      TREE_TYPE (t) = sizetype_tab[bit_p];\n+      TREE_TYPE (t) = bit_p ? bitsizetype : sizetype;\n       TREE_OVERFLOW (t) = TREE_CONSTANT_OVERFLOW (t) = force_fit_type (t, 0);\n     }\n   return t;"}, {"sha": "365826d1727007ced6d6b10bc03a1ccc372ce8c0", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896cced482d766c5d1d07ce1c71c191ac8864dd3/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896cced482d766c5d1d07ce1c71c191ac8864dd3/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=896cced482d766c5d1d07ce1c71c191ac8864dd3", "patch": "@@ -32,10 +32,9 @@ Boston, MA 02111-1307, USA.  */\n #define CEIL(x,y) (((x) + (y) - 1) / (y))\n \n /* Data type for the expressions representing sizes of data types.\n-   It is the first integer type laid out.\n-   In C, this is int.  */\n+   It is the first integer type laid out.  */\n \n-tree sizetype_tab[2], sbitsizetype, ubitsizetype;\n+struct sizetype_tab sizetype_tab;\n \n /* An integer constant with value 0 whose type is sizetype.  */\n \n@@ -1103,14 +1102,14 @@ make_unsigned_type (precision)\n   return type;\n }\n \n-/* Set sizetype to TYPE, and initialize *bitsizetype accordingly.\n+/* Set sizetype to TYPE, and initialize *sizetype accordingly.\n    Also update the type of any standard type's sizes made so far.  */\n \n void\n set_sizetype (type)\n      tree type;\n {\n-  int precision = TYPE_PRECISION (type);\n+  int oprecision = TYPE_PRECISION (type), precision;\n \n   sizetype = type;\n \n@@ -1124,18 +1123,32 @@ set_sizetype (type)\n   if (! bitsizetype)\n     bitsizetype = make_node (INTEGER_TYPE);\n \n-  precision += BITS_PER_UNIT_LOG + 1;\n+  precision = oprecision + BITS_PER_UNIT_LOG + 1;\n   /* However, when cross-compiling from a 32 bit to a 64 bit host,\n      we are limited to 64 bit precision.  */\n   if (precision > 2 * HOST_BITS_PER_WIDE_INT)\n     precision = 2 * HOST_BITS_PER_WIDE_INT;\n   TYPE_PRECISION (bitsizetype) = precision;\n-  (TREE_UNSIGNED (type) ? fixup_unsigned_type : fixup_signed_type)\n-    (bitsizetype);\n+  if (TREE_UNSIGNED (type))\n+    fixup_unsigned_type (bitsizetype);\n+  else\n+    fixup_signed_type (bitsizetype);\n   layout_type (bitsizetype);\n \n-  sbitsizetype = make_signed_type (precision);\n-  ubitsizetype = make_unsigned_type (precision);\n+  if (TREE_UNSIGNED (type))\n+    {\n+      usizetype = sizetype;\n+      ubitsizetype = bitsizetype;\n+      ssizetype = make_signed_type (oprecision);\n+      sbitsizetype = make_signed_type (precision);\n+    }\n+  else\n+    {\n+      ssizetype = sizetype;\n+      sbitsizetype = bitsizetype;\n+      usizetype = make_unsigned_type (oprecision);\n+      ubitsizetype = make_unsigned_type (precision);\n+    }\n }\n \n /* Set the extreme values of TYPE based on its precision in bits,"}, {"sha": "667cab951c3c701eafeaef70c0b332e6daf381aa", "filename": "gcc/tree.h", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/896cced482d766c5d1d07ce1c71c191ac8864dd3/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/896cced482d766c5d1d07ce1c71c191ac8864dd3/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=896cced482d766c5d1d07ce1c71c191ac8864dd3", "patch": "@@ -1435,9 +1435,21 @@ extern void put_pending_sizes\t\tPROTO((tree));\n    + (BITS_PER_UNIT > 8) + (BITS_PER_UNIT > 16) + (BITS_PER_UNIT > 32) \\\n    + (BITS_PER_UNIT > 64) + (BITS_PER_UNIT > 128) + (BITS_PER_UNIT > 256))\n \n-extern tree sizetype_tab[2], sbitsizetype, ubitsizetype;\n-#define sizetype sizetype_tab[0]\n-#define bitsizetype sizetype_tab[1]\n+struct sizetype_tab\n+{\n+  tree xsizetype, xbitsizetype;\n+  tree ssizetype, usizetype;\n+  tree sbitsizetype, ubitsizetype;\n+};\n+\n+extern struct sizetype_tab sizetype_tab;\n+\n+#define sizetype sizetype_tab.xsizetype\n+#define bitsizetype sizetype_tab.xbitsizetype\n+#define ssizetype sizetype_tab.ssizetype\n+#define usizetype sizetype_tab.usizetype\n+#define sbitsizetype sizetype_tab.sbitsizetype\n+#define ubitsizetype sizetype_tab.ubitsizetype\n \n /* If nonzero, an upper limit on alignment of structure fields, in bits. */\n extern int maximum_field_alignment;"}]}