{"sha": "ed03c6cdbb986180b009fe365d03542a9597bb3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQwM2M2Y2RiYjk4NjE4MGIwMDlmZTM2NWQwMzU0MmE5NTk3YmIzYw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "1999-04-06T22:13:57Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-04-06T22:13:57Z"}, "message": "pdp11.c (simple_memory_operand): Add default case in switch.\n\n        * pdp11.c (simple_memory_operand): Add default case in switch.\n        * pdp11.h (TARGET_SWITCHES): Add help strings.\n        (NOTICE_UPDATE_CC): Don't include excess argument to format.\n        (ASM_OUTPUT_DOUBLE_INT): Remove.\n\nFrom-SVN: r26227", "tree": {"sha": "bc810a47f06b18eb75de61d77ccfcc92ede919c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc810a47f06b18eb75de61d77ccfcc92ede919c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed03c6cdbb986180b009fe365d03542a9597bb3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed03c6cdbb986180b009fe365d03542a9597bb3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed03c6cdbb986180b009fe365d03542a9597bb3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed03c6cdbb986180b009fe365d03542a9597bb3c/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "34487bf85731112fd68f579b0cb1c888c71ebfef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34487bf85731112fd68f579b0cb1c888c71ebfef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34487bf85731112fd68f579b0cb1c888c71ebfef"}], "stats": {"total": 100, "additions": 56, "deletions": 44}, "files": [{"sha": "253418d409bbd174dcb4f6cdb59783c815390d62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed03c6cdbb986180b009fe365d03542a9597bb3c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed03c6cdbb986180b009fe365d03542a9597bb3c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed03c6cdbb986180b009fe365d03542a9597bb3c", "patch": "@@ -1,3 +1,10 @@\n+1999-04-06  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* pdp11.c (simple_memory_operand): Add default case in switch.\n+\t* pdp11.h (TARGET_SWITCHES): Add help strings.\n+\t(NOTICE_UPDATE_CC): Don't include excess argument to format.\n+\t(ASM_OUTPUT_DOUBLE_INT): Remove.\n+\n Tue Apr  6 22:09:40 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* expr.c (expand_builtin_setjmp): Put setjmp return label on"}, {"sha": "61da8c4e8c76232fb1f9fef0f057c17aaf9cafa6", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed03c6cdbb986180b009fe365d03542a9597bb3c/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed03c6cdbb986180b009fe365d03542a9597bb3c/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=ed03c6cdbb986180b009fe365d03542a9597bb3c", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for gcc2 for pdp11.\n-   Copyright (C) 1994, 1995, 1996, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1995, 1996, 1997, 1999 Free Software Foundation, Inc.\n    Contributed by Michael K. Gschwind (mike@vlsivie.tuwien.ac.at).\n \n This file is part of GNU CC.\n@@ -1089,6 +1089,9 @@ int simple_memory_operand(op, mode)\n       case PLUS:\n \t/* X(R0) - extra cost */\n \treturn 0;\n+\n+      default:\n+\tbreak;\n     }\n     \n     return FALSE;"}, {"sha": "c8f6cd075442db42f6d0d2038c2f1787e82066af", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 45, "deletions": 43, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed03c6cdbb986180b009fe365d03542a9597bb3c/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed03c6cdbb986180b009fe365d03542a9597bb3c/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=ed03c6cdbb986180b009fe365d03542a9597bb3c", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for the pdp-11\n-   Copyright (C) 1994, 1995, 1996, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1995, 1996, 1998, 1999 Free Software Foundation, Inc.\n    Contributed by Michael K. Gschwind (mike@vlsivie.tuwien.ac.at).\n \n This file is part of GNU CC.\n@@ -61,50 +61,51 @@ int simple_memory_operand ();\n extern int target_flags;\n \n /* Macro to define tables used to set the flags.\n-   This is a list in braces of pairs in braces,\n-   each pair being { \"NAME\", VALUE }\n-   where VALUE is the bits to set or minus the bits to clear.\n+   This is a list in braces of triplets in braces,\n+   each triplet being { \"NAME\", VALUE, DOC }\n+   where VALUE is the bits to set or minus the bits to clear and DOC\n+   is the documentation for --help (NULL if intentionally undocumented).\n    An empty string NAME is used to identify the default VALUE.  */\n \n #define TARGET_SWITCHES  \\\n-{   { \"fpu\", 1},\t\t\\\n-    { \"soft-float\", -1},       \t\\\n-/* return float result in ac0 */\\\n-    { \"ac0\", 2},\t\t\\\n-    { \"no-ac0\", -2},\t\t\\\n-/* is 11/40 */\t\t\t\\\n-    { \"40\", 4},\t\t\t\\\n-    { \"no-40\", -4},\t\t\\\n-/* is 11/45 */\t\t\t\\\n-    { \"45\", 8},\t\t\t\\\n-    { \"no-45\", -8},\t\t\\\n-/* is 11/10 */\t\t\t\\\n-    { \"10\", -12},\t\t\\\n-/* use movstrhi for bcopy */\t\\\n-    { \"bcopy\", 16},\t\t\\\n-    { \"bcopy-builtin\", -16},\t\\\n-/* use 32 bit for int */\t\\\n-    { \"int32\", 32},\t\t\\\n-    { \"no-int16\", 32},\t\t\\\n-    { \"int16\", -32},\t\t\\\n-    { \"no-int32\", -32},\t\t\\\n-/* use 32 bit for float */\t\\\n-    { \"float32\", 64},\t\t\\\n-    { \"no-float64\", 64},\t\\\n-    { \"float64\", -64},\t\t\\\n-    { \"no-float32\", -64},\t\\\n+{   { \"fpu\", 1, \"Use hardware floating point\" },\t\t\\\n+    { \"soft-float\", -1, \"Do not use hardware floating point\" }, \\\n+/* return float result in ac0 */\t\t\t\t\\\n+    { \"ac0\", 2, \"Return floating point results in ac0\" },\t\\\n+    { \"no-ac0\", -2, \"Return floating point results in memory\" },\\\n+/* is 11/40 */\t\t\t\t\t\t\t\\\n+    { \"40\", 4, \"Generate code for an 11/40\" },\t\t\t\\\n+    { \"no-40\", -4, \"\" },\t\t\t\t\t\\\n+/* is 11/45 */\t\t\t\t\t\t\t\\\n+    { \"45\", 8, \"Generate code for an 11/45\" },\t\t\t\\\n+    { \"no-45\", -8, \"\" },\t\t\t\t\t\\\n+/* is 11/10 */\t\t\t\t\t\t\t\\\n+    { \"10\", -12, \"Generate code for an 11/10\" },\t\t\\\n+/* use movstrhi for bcopy */\t\t\t\t\t\\\n+    { \"bcopy\", 16, NULL },\t\t\t\t\t\\\n+    { \"bcopy-builtin\", -16, NULL },\t\t\t\t\\\n+/* use 32 bit for int */\t\t\t\t\t\\\n+    { \"int32\", 32, \"Use 32 bit int\" },\t\t\t\t\\\n+    { \"no-int16\", 32, \"Use 32 bit int\" },\t\t\t\\\n+    { \"int16\", -32, \"Use 16 bit int\" },\t\t\t\t\\\n+    { \"no-int32\", -32, \"Use 16 bit int\" },\t\t\t\\\n+/* use 32 bit for float */\t\t\t\t\t\\\n+    { \"float32\", 64, \"Use 32 bit float\" },\t\t\t\\\n+    { \"no-float64\", 64, \"Use 32 bit float\" },\t\t\t\\\n+    { \"float64\", -64, \"Use 64 bit float\" },\t\t\t\\\n+    { \"no-float32\", -64, \"Use 64 bit float\" },\t\t\t\\\n /* allow abshi pattern? - can trigger \"optimizations\" which make code SLOW! */\\\n-    { \"abshi\", 128},\t\t\\\n-    { \"no-abshi\", -128},\t\\\n+    { \"abshi\", 128, NULL },\t\t\t\t\t\\\n+    { \"no-abshi\", -128, NULL },\t\t\t\t\t\\\n /* is branching expensive - on a PDP, it's actually really cheap */ \\\n /* this is just to play around and check what code gcc generates */ \\\n-    { \"branch-expensive\", 256}, \\\n-    { \"branch-cheap\", -256},\t\\\n-/* split instruction and data memory? */ \\\n-    { \"split\", 1024 },\t\t\\\n-    { \"no-split\", -1024 },\t\\\n+    { \"branch-expensive\", 256, NULL }, \t\t\t\t\\\n+    { \"branch-cheap\", -256, NULL },\t\t\t\t\\\n+/* split instruction and data memory? */ \t\t\t\\\n+    { \"split\", 1024, \"Target has split I&D\" },\t\t\t\\\n+    { \"no-split\", -1024, \"Target does not have split I&D\" },\t\\\n /* default */\t\t\t\\\n-    { \"\", TARGET_DEFAULT}\t\\\n+    { \"\", TARGET_DEFAULT, NULL}\t\\\n }\n \n #define TARGET_DEFAULT (1 | 8 | 128)\n@@ -398,7 +399,7 @@ enum reg_class { NO_REGS, MUL_REGS, GENERAL_REGS, LOAD_FPU_REGS, NO_LOAD_FPU_REG\n    This is an initializer for a vector of HARD_REG_SET\n    of length N_REG_CLASSES.  */\n \n-#define REG_CLASS_CONTENTS {0, 0x00aa, 0x00ff, 0x0f00, 0x3000, 0x3f00, 0x3fff}\n+#define REG_CLASS_CONTENTS {{0}, {0x00aa}, {0x00ff}, {0x0f00}, {0x3000}, {0x3f00}, {0x3fff}}\n \n /* The same information, inverted:\n    Return the class number of the smallest class containing\n@@ -1024,8 +1025,11 @@ extern struct rtx_def *cc0_reg_rtx;\n     { /* all bets are off */ CC_STATUS_INIT; }\t\t\t\\\n   if (cc_status.value1 && GET_CODE (cc_status.value1) == REG\t\\\n       && cc_status.value2\t\t\t\t\t\\\n-      && reg_overlap_mentioned_p (cc_status.value1, cc_status.value2))\t\\\n-    printf (\"here!\\n\", cc_status.value2 = 0);\t\t\t\\\n+      && reg_overlap_mentioned_p (cc_status.value1, cc_status.value2)) \\\n+    { \t\t\t\t\t\t\t\t\\\n+      printf (\"here!\\n\");\t\t\t\t\t\\\n+      cc_status.value2 = 0;\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n }\n \f\n /* Control the assembler format that we output.  */\n@@ -1250,8 +1254,6 @@ fprintf (FILE, \"$help$: . = .+8 ; space for tmp moves!\\n\")\t\\\n #define ASM_IDENTIFY_GCC(FILE)\t\t\t\\\n     fprintf(FILE, \"gcc_compiled:\\n\")\n \n-#define ASM_OUTPUT_DOUBLE_INT(a,b)\tfprintf(a,\"%d\", b)\n-\n /* trampoline - how should i do it in separate i+d ? \n    have some allocate_trampoline magic??? \n "}]}