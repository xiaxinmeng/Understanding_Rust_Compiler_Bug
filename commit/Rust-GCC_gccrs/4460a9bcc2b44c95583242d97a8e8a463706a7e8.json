{"sha": "4460a9bcc2b44c95583242d97a8e8a463706a7e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ2MGE5YmNjMmI0NGM5NTU4MzI0MmQ5N2E4ZThhNDYzNzA2YTdlOA==", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2014-01-20T13:47:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T13:47:41Z"}, "message": "exp_spark.adb (Expand_SPARK_Call): Remove procedure.\n\n2014-01-20  Yannick Moy  <moy@adacore.com>\n\n\t* exp_spark.adb (Expand_SPARK_Call): Remove procedure.\n\t* opt.adb, opt.ads (Full_Expander_Active): Remove function.\n\t* checks.adb, exp_ch6.adb, exp_ch9.adb, exp_disp.adb, sem_aggr.adb,\n\t* sem_ch10.adb, sem_ch5.adb, sem_ch6.adb, sem_ch8.adb, sem_ch9.adb,\n\t* sem_disp.adb, sem_res.adb Replace Full_Expander_Active by\n\tExpander_Active.\n\n2014-01-20  Yannick Moy  <moy@adacore.com>\n\n\t* sinfo.ads Update documentation of GNATprove mode.\n\nFrom-SVN: r206806", "tree": {"sha": "20cedaea80ab6c277371fd6f8f8dad11295e175f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20cedaea80ab6c277371fd6f8f8dad11295e175f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4460a9bcc2b44c95583242d97a8e8a463706a7e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4460a9bcc2b44c95583242d97a8e8a463706a7e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4460a9bcc2b44c95583242d97a8e8a463706a7e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4460a9bcc2b44c95583242d97a8e8a463706a7e8/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5da7a97f59ad934df6fd6ab1aca0a48571ae399", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5da7a97f59ad934df6fd6ab1aca0a48571ae399"}], "stats": {"total": 197, "additions": 75, "deletions": 122}, "files": [{"sha": "c40e7e7c33afc91f6ea3323a2319811c1f49983e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4460a9bcc2b44c95583242d97a8e8a463706a7e8", "patch": "@@ -1,3 +1,16 @@\n+2014-01-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* exp_spark.adb (Expand_SPARK_Call): Remove procedure.\n+\t* opt.adb, opt.ads (Full_Expander_Active): Remove function.\n+\t* checks.adb, exp_ch6.adb, exp_ch9.adb, exp_disp.adb, sem_aggr.adb,\n+\t* sem_ch10.adb, sem_ch5.adb, sem_ch6.adb, sem_ch8.adb, sem_ch9.adb,\n+\t* sem_disp.adb, sem_res.adb Replace Full_Expander_Active by\n+\tExpander_Active.\n+\n+2014-01-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* sinfo.ads Update documentation of GNATprove mode.\n+\n 2014-01-20  Yannick Moy  <moy@adacore.com>\n \n \t* adabkend.adb, ali-util.adb, errout.adb, exp_ch7.adb,"}, {"sha": "4801c126e9fed7bc34e000ff1e7d49758c205707", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=4460a9bcc2b44c95583242d97a8e8a463706a7e8", "patch": "@@ -478,7 +478,7 @@ package body Checks is\n       --  are cases (e.g. with pragma Debug) where generating the checks\n       --  can cause real trouble).\n \n-      if not Full_Expander_Active then\n+      if not Expander_Active then\n          return;\n       end if;\n \n@@ -960,7 +960,7 @@ package body Checks is\n \n          if Backend_Overflow_Checks_On_Target\n            or else not Do_Overflow_Check (N)\n-           or else not Full_Expander_Active\n+           or else not Expander_Active\n            or else (Present (Parent (N))\n                      and then Nkind (Parent (N)) = N_Type_Conversion\n                      and then Integer_Promotion_Possible (Parent (N)))\n@@ -1419,7 +1419,7 @@ package body Checks is\n       --  Nothing to do if discriminant checks are suppressed or else no code\n       --  is to be generated\n \n-      if not Full_Expander_Active\n+      if not Expander_Active\n         or else Discriminant_Checks_Suppressed (T_Typ)\n       then\n          return;\n@@ -1732,7 +1732,7 @@ package body Checks is\n \n       --  Proceed here in SUPPRESSED or CHECKED modes\n \n-      if Full_Expander_Active\n+      if Expander_Active\n         and then not Backend_Divide_Checks_On_Target\n         and then Check_Needed (Right, Division_Check)\n       then\n@@ -1803,7 +1803,7 @@ package body Checks is\n       Right : constant Node_Id    := Right_Opnd (N);\n \n    begin\n-      if Full_Expander_Active\n+      if Expander_Active\n         and then not Backend_Divide_Checks_On_Target\n         and then Check_Needed (Right, Division_Check)\n       then\n@@ -1914,7 +1914,7 @@ package body Checks is\n       --  the frontend to expand these checks, which are dealt with directly\n       --  in the formal verification backend.\n \n-      if not Full_Expander_Active then\n+      if not Expander_Active then\n          return;\n       end if;\n \n@@ -2945,7 +2945,7 @@ package body Checks is\n          or else (not Length_Checks_Suppressed (Target_Typ));\n \n    begin\n-      if not Full_Expander_Active then\n+      if not Expander_Active then\n          return;\n       end if;\n \n@@ -3052,7 +3052,7 @@ package body Checks is\n          or else (not Range_Checks_Suppressed (Target_Typ));\n \n    begin\n-      if not Full_Expander_Active or else not Checks_On then\n+      if not Expander_Active or else not Checks_On then\n          return;\n       end if;\n \n@@ -6290,7 +6290,7 @@ package body Checks is\n       --  enhanced to check for an always True value in the condition and to\n       --  generate a compilation warning???\n \n-      if not Full_Expander_Active or else not Checks_On then\n+      if not Expander_Active or else not Checks_On then\n          return;\n       end if;\n \n@@ -8321,7 +8321,7 @@ package body Checks is\n    --  Start of processing for Selected_Length_Checks\n \n    begin\n-      if not Full_Expander_Active then\n+      if not Expander_Active then\n          return Ret_Result;\n       end if;\n \n@@ -8871,7 +8871,7 @@ package body Checks is\n    --  Start of processing for Selected_Range_Checks\n \n    begin\n-      if not Full_Expander_Active then\n+      if not Expander_Active then\n          return Ret_Result;\n       end if;\n "}, {"sha": "d43d02b379ec63459ccdcf1341364e52fb7dffb4", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=4460a9bcc2b44c95583242d97a8e8a463706a7e8", "patch": "@@ -9603,7 +9603,7 @@ package body Exp_Ch6 is\n       --  may end up with a call that is neither resolved to an entity, nor\n       --  an indirect call.\n \n-      if not Full_Expander_Active then\n+      if not Expander_Active then\n          return False;\n       end if;\n "}, {"sha": "cdc154332760ee6537ad259a0fc4996213402123", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=4460a9bcc2b44c95583242d97a8e8a463706a7e8", "patch": "@@ -5813,7 +5813,7 @@ package body Exp_Ch9 is\n       Ldecl2 : Node_Id;\n \n    begin\n-      if Full_Expander_Active then\n+      if Expander_Active then\n \n          --  If we have no handled statement sequence, we may need to build\n          --  a dummy sequence consisting of a null statement. This can be\n@@ -6123,7 +6123,7 @@ package body Exp_Ch9 is\n       --  barrier just as a protected function, and discard the protected\n       --  version of it because it is never called.\n \n-      if Full_Expander_Active then\n+      if Expander_Active then\n          B_F := Build_Barrier_Function (N, Ent, Prot);\n          Func := Barrier_Function (Ent);\n          Set_Corresponding_Spec (B_F, Func);\n@@ -6161,7 +6161,7 @@ package body Exp_Ch9 is\n          --  condition does not reference any of the generated renamings\n          --  within the function.\n \n-         if Full_Expander_Active and then Scope (Entity (Cond)) /= Func then\n+         if Expander_Active and then Scope (Entity (Cond)) /= Func then\n             Set_Declarations (B_F, Empty_List);\n          end if;\n \n@@ -12497,7 +12497,7 @@ package body Exp_Ch9 is\n          Error_Msg_CRT (\"protected body\", N);\n          return;\n \n-      elsif Full_Expander_Active then\n+      elsif Expander_Active then\n \n          --  Associate discriminals with the first subprogram or entry body to\n          --  be expanded."}, {"sha": "b4c56accb0f8830d5add8cf45e1d996d142ff38d", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=4460a9bcc2b44c95583242d97a8e8a463706a7e8", "patch": "@@ -696,7 +696,7 @@ package body Exp_Disp is\n       --  Expand_Dispatching_Call is called directly from the semantics,\n       --  so we only proceed if the expander is active.\n \n-      if not Full_Expander_Active\n+      if not Expander_Active\n \n         --  And there is no need to expand the call if we are compiling under\n         --  restriction No_Dispatching_Calls; the semantic analyzer has"}, {"sha": "e3e875cd4319a20758a878c534322c1ba915efa5", "filename": "gcc/ada/exp_spark.adb", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fexp_spark.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fexp_spark.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_spark.adb?ref=4460a9bcc2b44c95583242d97a8e8a463706a7e8", "patch": "@@ -27,7 +27,6 @@ with Atree;    use Atree;\n with Einfo;    use Einfo;\n with Exp_Dbug; use Exp_Dbug;\n with Exp_Util; use Exp_Util;\n-with Sem_Aux;  use Sem_Aux;\n with Sem_Res;  use Sem_Res;\n with Sem_Util; use Sem_Util;\n with Sinfo;    use Sinfo;\n@@ -38,10 +37,6 @@ package body Exp_SPARK is\n    -- Local Subprograms --\n    -----------------------\n \n-   procedure Expand_SPARK_Call (N : Node_Id);\n-   --  This procedure contains common processing for function and procedure\n-   --  calls: replacement of renaming by subprogram renamed\n-\n    procedure Expand_SPARK_N_Object_Renaming_Declaration (N : Node_Id);\n    --  Perform name evaluation for a renamed object\n \n@@ -71,9 +66,6 @@ package body Exp_SPARK is\n               N_Subprogram_Body     =>\n             Qualify_Entity_Names (N);\n \n-         when N_Subprogram_Call     =>\n-            Expand_SPARK_Call (N);\n-\n          when N_Expanded_Name |\n               N_Identifier    =>\n             Expand_Potential_Renaming (N);\n@@ -88,36 +80,6 @@ package body Exp_SPARK is\n       end case;\n    end Expand_SPARK;\n \n-   -----------------------\n-   -- Expand_SPARK_Call --\n-   -----------------------\n-\n-   procedure Expand_SPARK_Call (N : Node_Id) is\n-   begin\n-      --  If the subprogram is a renaming, replace it in the call with the name\n-      --  of the actual subprogram being called. We distinguish renamings from\n-      --  inherited primitive operations, which both have an Alias component,\n-      --  by looking at the parent node of the entity. The entity for a\n-      --  renaming has the function or procedure specification node as\n-      --  parent, while an inherited primitive operation has the derived\n-      --  type declaration as parent.\n-\n-      if Nkind (Name (N)) in N_Has_Entity\n-        and then Present (Entity (Name (N)))\n-      then\n-         declare\n-            E : constant Entity_Id := Entity (Name (N));\n-         begin\n-            if Nkind_In (Parent (E), N_Function_Specification,\n-                                     N_Procedure_Specification)\n-              and then Present (Alias (E))\n-            then\n-               Set_Entity (Name (N), Ultimate_Alias (E));\n-            end if;\n-         end;\n-      end if;\n-   end Expand_SPARK_Call;\n-\n    ------------------------------------------------\n    -- Expand_SPARK_N_Object_Renaming_Declaration --\n    ------------------------------------------------"}, {"sha": "0f65614811bce9d89040401e036e1fec85d27304", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=4460a9bcc2b44c95583242d97a8e8a463706a7e8", "patch": "@@ -38,15 +38,6 @@ package body Opt is\n    SU : constant := Storage_Unit;\n    --  Shorthand for System.Storage_Unit\n \n-   --------------------------\n-   -- Full_Expander_Active --\n-   --------------------------\n-\n-   function Full_Expander_Active return Boolean is\n-   begin\n-      return Expander_Active;\n-   end Full_Expander_Active;\n-\n    ----------------------------------\n    -- Register_Opt_Config_Switches --\n    ----------------------------------"}, {"sha": "2365abd73fe79fcb5599015ec4d867ca6b62bec9", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=4460a9bcc2b44c95583242d97a8e8a463706a7e8", "patch": "@@ -1939,9 +1939,6 @@ package Opt is\n    --  this flag, see package Expander. Indeed this flag might more logically\n    --  be in the spec of Expander, but it is referenced by Errout, and it\n    --  really seems wrong for Errout to depend on Expander.\n-   --\n-   --  Note: for many purposes, it is more appropriate to test the flag\n-   --  Full_Expander_Active, which also checks that SPARK mode is not active.\n \n    Static_Dispatch_Tables : Boolean := True;\n    --  This flag indicates if the backend supports generation of statically\n@@ -2023,15 +2020,6 @@ package Opt is\n    --  for integers are limited to the strict minimum with this option. Set by\n    --  debug flag -gnatd.D.\n \n-   function Full_Expander_Active return Boolean;\n-   pragma Inline (Full_Expander_Active);\n-   --  Returns the value of (Expander_Active and not SPARK_Mode). This \"flag\"\n-   --  indicates that expansion is fully active, that is, not in the reduced\n-   --  mode for SPARK (True) or that expansion is either deactivated, or active\n-   --  in the reduced mode for SPARK (False). For more information on full\n-   --  expansion, see package Expander. For more information on reduced\n-   --  SPARK expansion, see package Exp_SPARK.\n-\n private\n \n    --  The following type is used to save and restore settings of switches in"}, {"sha": "73ebeeb7204f2fe01320ef8a276483a251a4e2aa", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=4460a9bcc2b44c95583242d97a8e8a463706a7e8", "patch": "@@ -1700,7 +1700,7 @@ package body Sem_Aggr is\n             --  performed safely.\n \n             if Single_Elmt\n-              or else not Full_Expander_Active\n+              or else not Expander_Active\n               or else In_Spec_Expression\n             then\n                Analyze_And_Resolve (Expr, Component_Typ);"}, {"sha": "b83bf12fb329304fcebfdcf45f37ad15d3e579ff", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=4460a9bcc2b44c95583242d97a8e8a463706a7e8", "patch": "@@ -2393,7 +2393,7 @@ package body Sem_Ch10 is\n          --  expansion is active, because the context may be generic and the\n          --  flag not defined yet.\n \n-         if Full_Expander_Active then\n+         if Expander_Active then\n             Insert_After (N,\n               Make_Assignment_Statement (Loc,\n                 Name =>"}, {"sha": "b0d59e3de4823820399cbe4d1f31f52fb8f53cad", "filename": "gcc/ada/sem_ch5.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fsem_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fsem_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch5.adb?ref=4460a9bcc2b44c95583242d97a8e8a463706a7e8", "patch": "@@ -2739,7 +2739,7 @@ package body Sem_Ch5 is\n \n       if No (Iter)\n         or else No (Iterator_Specification (Iter))\n-        or else not Full_Expander_Active\n+        or else not Expander_Active\n       then\n          if Present (Iter)\n            and then Present (Iterator_Specification (Iter))"}, {"sha": "6e1c250ceafa0cb7c2c4cf8340519544f5c1765f", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=4460a9bcc2b44c95583242d97a8e8a463706a7e8", "patch": "@@ -3200,7 +3200,7 @@ package body Sem_Ch6 is\n       --  body may be the rewritting of an expression function, and we need to\n       --  verify that the original node is in the source.\n \n-      if Full_Expander_Active\n+      if Expander_Active\n         and then Comes_From_Source (Original_Node (N))\n         and then Present (Prot_Typ)\n         and then Present (Spec_Id)\n@@ -11447,7 +11447,7 @@ package body Sem_Ch6 is\n                --  parameter block, and it is this local variable that may\n                --  require an actual subtype.\n \n-               if Full_Expander_Active then\n+               if Expander_Active then\n                   Decl := Build_Actual_Subtype (T, Renamed_Object (Formal));\n                else\n                   Decl := Build_Actual_Subtype (T, Formal);\n@@ -11486,7 +11486,7 @@ package body Sem_Ch6 is\n             end if;\n \n             if Nkind (N) = N_Accept_Statement\n-              and then Full_Expander_Active\n+              and then Expander_Active\n             then\n                Set_Actual_Subtype (Renamed_Object (Formal),\n                  Defining_Identifier (Decl));"}, {"sha": "98adb1ddafd15407107db6dfa7a9288908c7cc99", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=4460a9bcc2b44c95583242d97a8e8a463706a7e8", "patch": "@@ -2203,7 +2203,7 @@ package body Sem_Ch8 is\n \n          if Is_Actual\n            and then Is_Abstract_Subprogram (Formal_Spec)\n-           and then Full_Expander_Active\n+           and then Expander_Active\n          then\n             declare\n                Stream_Prim : Entity_Id;"}, {"sha": "316a1634b419aa220dc5e7e1db307e7956b777bd", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=4460a9bcc2b44c95583242d97a8e8a463706a7e8", "patch": "@@ -1326,7 +1326,7 @@ package body Sem_Ch9 is\n       --  for the discriminals and privals and finally a declaration for the\n       --  entry family index (if applicable).\n \n-      if Full_Expander_Active\n+      if Expander_Active\n         and then Is_Protected_Type (P_Type)\n       then\n          Install_Private_Data_Declarations\n@@ -2142,7 +2142,7 @@ package body Sem_Ch9 is\n \n            --  Also skip if expander is not active\n \n-           and then Full_Expander_Active\n+           and then Expander_Active\n          then\n             Expand_N_Protected_Type_Declaration (N);\n             Process_Full_View (N, T, Def_Id);\n@@ -2990,7 +2990,7 @@ package body Sem_Ch9 is\n \n            --  Also skip if expander is not active\n \n-           and then Full_Expander_Active\n+           and then Expander_Active\n          then\n             Expand_N_Task_Type_Declaration (N);\n             Process_Full_View (N, T, Def_Id);"}, {"sha": "bf4fa8f037983493305d124db5ad2c034d0101a1", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=4460a9bcc2b44c95583242d97a8e8a463706a7e8", "patch": "@@ -1264,7 +1264,7 @@ package body Sem_Disp is\n             --  emitted after those tables are built, to prevent access before\n             --  elaboration in gigi.\n \n-            if Body_Is_Last_Primitive and then Full_Expander_Active then\n+            if Body_Is_Last_Primitive and then Expander_Active then\n                declare\n                   Subp_Body : constant Node_Id := Unit_Declaration_Node (Subp);\n                   Elmt      : Elmt_Id;"}, {"sha": "9ebb0bc20ddc97a25fe8a065f8b0e9f523691b2a", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=4460a9bcc2b44c95583242d97a8e8a463706a7e8", "patch": "@@ -1762,7 +1762,7 @@ package body Sem_Res is\n    --  Start of processing for Replace_Actual_Discriminants\n \n    begin\n-      if not Full_Expander_Active then\n+      if not Expander_Active then\n          return;\n       end if;\n \n@@ -2033,7 +2033,7 @@ package body Sem_Res is\n                   --  If we are generating code in distributed mode, perform\n                   --  semantic checks against corresponding remote entities.\n \n-                  if Full_Expander_Active\n+                  if Expander_Active\n                     and then Get_PCS_Name /= Name_No_DSA\n                   then\n                      Check_Subtype_Conformant\n@@ -3608,7 +3608,7 @@ package body Sem_Res is\n             elsif Nkind (A) = N_Function_Call\n               and then Is_Limited_Record (Etype (F))\n               and then not Is_Constrained (Etype (F))\n-              and then Full_Expander_Active\n+              and then Expander_Active\n               and then (Is_Controlled (Etype (F)) or else Has_Task (Etype (F)))\n             then\n                Establish_Transient_Scope (A, Sec_Stack => False);\n@@ -3624,7 +3624,7 @@ package body Sem_Res is\n \n             elsif Nkind (A) = N_Op_Concat\n               and then Nkind (N) = N_Procedure_Call_Statement\n-              and then Full_Expander_Active\n+              and then Expander_Active\n               and then\n                 not (Is_Intrinsic_Subprogram (Nam)\n                       and then Chars (Nam) = Name_Asm)\n@@ -3687,7 +3687,7 @@ package body Sem_Res is\n                      --  be removed in the expansion of the wrapped construct.\n \n                      if (Is_Controlled (DDT) or else Has_Task (DDT))\n-                       and then Full_Expander_Active\n+                       and then Expander_Active\n                      then\n                         Establish_Transient_Scope (A, Sec_Stack => False);\n                      end if;\n@@ -5756,7 +5756,7 @@ package body Sem_Res is\n       then\n          null;\n \n-      elsif Full_Expander_Active\n+      elsif Expander_Active\n         and then Is_Type (Etype (Nam))\n         and then Requires_Transient_Scope (Etype (Nam))\n         and then\n@@ -6836,7 +6836,7 @@ package body Sem_Res is\n       --  Protected functions can return on the secondary stack, in which\n       --  case we must trigger the transient scope mechanism.\n \n-      elsif Full_Expander_Active\n+      elsif Expander_Active\n         and then Requires_Transient_Scope (Etype (Nam))\n       then\n          Establish_Transient_Scope (N, Sec_Stack => True);\n@@ -7139,7 +7139,7 @@ package body Sem_Res is\n \n          --  Why the Expander_Active test here ???\n \n-         if Full_Expander_Active\n+         if Expander_Active\n            and then\n              (Ekind_In (T, E_Anonymous_Access_Type,\n                            E_Anonymous_Access_Subprogram_Type)\n@@ -7551,7 +7551,7 @@ package body Sem_Res is\n       --  We must preserve the original entity in a generic setting, so that\n       --  the legality of the operation can be verified in an instance.\n \n-      if not Full_Expander_Active then\n+      if not Expander_Active then\n          return;\n       end if;\n \n@@ -8670,7 +8670,7 @@ package body Sem_Res is\n       --  transformation while analyzing generic units, as type information\n       --  would be lost when reanalyzing the constant node in the instance.\n \n-      if Is_Discrete_Type (Typ) and then Full_Expander_Active then\n+      if Is_Discrete_Type (Typ) and then Expander_Active then\n          if Is_OK_Static_Expression (L) then\n             Fold_Uint  (L, Expr_Value (L), Is_Static_Expression (L));\n          end if;\n@@ -9022,7 +9022,7 @@ package body Sem_Res is\n       --  helpful for coverage analysis. However this should not happen in\n       --  generics.\n \n-      if Full_Expander_Active then\n+      if Expander_Active then\n          declare\n             Reloc_L : constant Node_Id := Relocate_Node (L);\n          begin\n@@ -9877,7 +9877,7 @@ package body Sem_Res is\n       --  expression coincides with the target type.\n \n       if Ada_Version >= Ada_2005\n-        and then Full_Expander_Active\n+        and then Expander_Active\n         and then Operand_Typ /= Target_Typ\n       then\n          declare\n@@ -10387,7 +10387,7 @@ package body Sem_Res is\n       --  premature (e.g. if the slice is within a transient scope). This needs\n       --  to be done only if expansion is enabled.\n \n-      elsif Full_Expander_Active then\n+      elsif Expander_Active then\n          Ensure_Defined (Typ => Slice_Subtype, N => N);\n       end if;\n    end Set_Slice_Subtype;"}, {"sha": "173ae54df41c152d24dd3ff3f0402216c2a30fc8", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4460a9bcc2b44c95583242d97a8e8a463706a7e8/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=4460a9bcc2b44c95583242d97a8e8a463706a7e8", "patch": "@@ -508,47 +508,46 @@ package Sinfo is\n    --      simply ignore these nodes, since they are not relevant to the task\n    --      of back annotating representation information.\n \n-   ----------------\n-   -- SPARK Mode --\n-   ----------------\n+   --------------------\n+   -- GNATprove Mode --\n+   --------------------\n \n-   --  When a file is compiled in SPARK mode (-gnatd.F), a very light expansion\n-   --  is performed and the analysis must generate a tree in a form that meets\n-   --  additional requirements.\n+   --  When a file is compiled in GNATprove mode (-gnatd.F), a very light\n+   --  expansion is performed and the analysis must generate a tree in a\n+   --  form that meets additional requirements.\n \n-   --  The SPARK expansion does two transformations of the tree, that cannot be\n-   --  postponed after the frontend semantic analysis:\n+   --  This light expansion does two transformations of the tree, that cannot\n+   --  be postponed after the frontend semantic analysis:\n \n-   --    1. Replace renamings by renamed (object/subprogram). This requires\n+   --    1. Replace object renamings by renamed object. This requires\n    --       introducing temporaries at the point of the renaming, which must be\n    --       properly analyzed.\n \n    --    2. Fully qualify entity names. This is needed to generate suitable\n    --       local effects/call-graphs in ALI files, with the completely\n    --       qualified names (in particular the suffix to distinguish homonyms).\n \n-   --  The tree after SPARK expansion should be fully analyzed semantically,\n-   --  which sometimes requires the insertion of semantic pre-analysis, for\n-   --  example for subprogram contracts and pragma check/assert. In particular,\n-   --  all expression must have their proper type, and semantic links should be\n-   --  set between tree nodes (partial to full view, etc.) Some kinds of nodes\n-   --  should be either absent, or can be ignored by the formal verification\n-   --  backend:\n+   --  The tree after this light expansion should be fully analyzed\n+   --  semantically, which sometimes requires the insertion of semantic\n+   --  pre-analysis, for example for subprogram contracts and pragma\n+   --  check/assert. In particular, all expression must have their proper type,\n+   --  and semantic links should be set between tree nodes (partial to full\n+   --  view, etc.) Some kinds of nodes should be either absent, or can be\n+   --  ignored by the formal verification backend:\n \n    --      N_Object_Renaming_Declaration: can be ignored safely\n-   --      N_Expression_Function:         absent (rewitten)\n+   --      N_Expression_Function:         absent (rewritten)\n    --      N_Expression_With_Actions:     absent (not generated)\n \n    --  SPARK cross-references are generated from the regular cross-references\n    --  (used for browsing and code understanding) and additional references\n    --  collected during semantic analysis, in particular on all dereferences.\n    --  These SPARK cross-references are output in a separate section of ALI\n    --  files, as described in spark_xrefs.adb. They are the basis for the\n-   --  computation of data dependences in the formal verification backend.\n-   --  This implies that all cross-references should be generated in this mode,\n-   --  even those that would not make sense from a user point-of-view, and that\n-   --  cross-references that do not lead to data dependences for subprograms\n-   --  can be safely ignored.\n+   --  computation of data dependences in GNATprove. This implies that all\n+   --  cross-references should be generated in this mode, even those that would\n+   --  not make sense from a user point-of-view, and that cross-references that\n+   --  do not lead to data dependences for subprograms can be safely ignored.\n \n    ------------------------\n    -- Common Flag Fields --"}]}