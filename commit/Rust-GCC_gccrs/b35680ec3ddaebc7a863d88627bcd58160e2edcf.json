{"sha": "b35680ec3ddaebc7a863d88627bcd58160e2edcf", "node_id": "C_kwDOANBUbNoAKGIzNTY4MGVjM2RkYWViYzdhODYzZDg4NjI3YmNkNTgxNjBlMmVkY2Y", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-12-02T11:25:05Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-12-02T11:25:05Z"}, "message": "Daily bump.", "tree": {"sha": "b5c93feb9b60d1c4865f409f5bfce3867df478fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5c93feb9b60d1c4865f409f5bfce3867df478fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b35680ec3ddaebc7a863d88627bcd58160e2edcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b35680ec3ddaebc7a863d88627bcd58160e2edcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b35680ec3ddaebc7a863d88627bcd58160e2edcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b35680ec3ddaebc7a863d88627bcd58160e2edcf/comments", "author": null, "committer": null, "parents": [{"sha": "b3237a2c6847993f92218b65f96ece9831a8bfb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3237a2c6847993f92218b65f96ece9831a8bfb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3237a2c6847993f92218b65f96ece9831a8bfb0"}], "stats": {"total": 515, "additions": 514, "deletions": 1}, "files": [{"sha": "b349a15edbf5fbb4d7bc3ebb87e073327bc54666", "filename": "gcc/ChangeLog", "status": "modified", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b35680ec3ddaebc7a863d88627bcd58160e2edcf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b35680ec3ddaebc7a863d88627bcd58160e2edcf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b35680ec3ddaebc7a863d88627bcd58160e2edcf", "patch": "@@ -1,3 +1,158 @@\n+2022-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/106577\n+\t* config/i386/i386-expand.cc (ix86_vector_duplicate_value): Save/restore\n+\trecog_data around recog_memoized calls.\n+\n+2022-12-02  Michael Collison  <collison@rivosinc.com>\n+\n+\t* match.pd ((x & 0x1) == 0) ? y : z <op> y\n+\t-> (-(typeof(y))(x & 0x1) & z) <op> y.\n+\n+2022-12-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107946\n+\t* params.opt (-param=max-unswitch-depth=): New.\n+\t* doc/invoke.texi (--param=max-unswitch-depth): Document.\n+\t* tree-ssa-loop-unswitch.cc (init_loop_unswitch_info): Honor\n+\t--param=max-unswitch-depth\n+\n+2022-12-02  Eric Gallager  <egallager@gcc.gnu.org>\n+\n+\tPR bootstrap/59447\n+\t* configure: Regenerate.\n+\t* configure.ac: Document --with-dwarf2 flag as also\n+\tapplying to later DWARF standards.\n+\t* doc/install.texi: Likewise.\n+\n+2022-12-02  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/107934\n+\t* config/i386/i386.md (extendbfsf2_1): Change type from\n+\tsseishft to sseishft1.\n+\n+2022-12-01  Alex Coplan  <alex.coplan@arm.com>\n+\n+\t* varasm.cc (assemble_variable): Fix type confusion bug when\n+\tchecking for \".vtable_map_vars\" section.\n+\n+2022-12-01  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-v.cc (emit_pred_op): Adapt for mask mode.\n+\t* config/riscv/vector.md: Remove Tail && make policy operand for mask mode mov.\n+\n+2022-12-01  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/riscv-protos.h (enum vlmul_type): New enum.\n+\t(get_vlmul): New function.\n+\t(get_ratio): Ditto.\n+\t* config/riscv/riscv-v.cc (struct mode_vtype_group): New struct.\n+\t(ENTRY): Adapt for attributes.\n+\t(enum vlmul_type): New enum.\n+\t(get_vlmul): New function.\n+\t(get_ratio): New function.\n+\t* config/riscv/riscv-vector-switch.def (ENTRY): Adapt for attributes.\n+\t* config/riscv/riscv.cc (ENTRY): Ditto.\n+\t* config/riscv/vector.md (false,true): Add attributes.\n+\n+2022-12-01  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* config/riscv/constraints.md (Wdm): New constraint.\n+\t* config/riscv/predicates.md (direct_broadcast_operand): New predicate.\n+\t* config/riscv/riscv-protos.h (RVV_VLMAX): New macro.\n+\t(emit_pred_op): Refine function.\n+\t* config/riscv/riscv-selftests.cc (run_const_vector_selftests): New function.\n+\t(run_broadcast_selftests): Ditto.\n+\t(BROADCAST_TEST): New tests.\n+\t(riscv_run_selftests): More tests.\n+\t* config/riscv/riscv-v.cc (emit_pred_move): Refine function.\n+\t(emit_vlmax_vsetvl): Ditto.\n+\t(emit_pred_op): Ditto.\n+\t(expand_const_vector): New function.\n+\t(legitimize_move): Add constant vector support.\n+\t* config/riscv/riscv.cc (riscv_print_operand): New asm print rule for const vector.\n+\t* config/riscv/riscv.h (X0_REGNUM): New macro.\n+\t* config/riscv/vector-iterators.md: New attribute.\n+\t* config/riscv/vector.md (vec_duplicate<mode>): New pattern.\n+\t(@pred_broadcast<mode>): New pattern.\n+\n+2022-12-01  Paul-Antoine Arras  <pa@codesourcery.com>\n+\n+\t* config/gcn/gcn-opts.h (TARGET_FIJI): -march=fiji.\n+\t(TARGET_VEGA10): -march=gfx900.\n+\t(TARGET_VEGA20): -march=gfx906.\n+\t(TARGET_GFX908): -march=gfx908.\n+\t(TARGET_GFX90a): -march=gfx90a.\n+\t* config/gcn/gcn.h (TARGET_CPU_CPP_BUILTINS): Define a builtin that\n+\tuniquely maps to '-march'.\n+\n+2022-12-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107937\n+\t* gimple-predicate-analysis.h (predicate::is_true): New.\n+\t(predicate::is_false): Likewise.\n+\t(predicate::empty_val): Likewise.\n+\t(uninit_analysis::uninit_analysis): Properly initialize\n+\tdef_preds.\n+\t* gimple-predicate-analysis.cc (simplify_1b): Indicate\n+\twhether the chain became empty.\n+\t(predicate::simplify): Release emptied chain before removing it.\n+\t(predicate::normalize): Replace temporary object with assertion.\n+\t(uninit_analysis::is_use_guarded): Deal with predicates\n+\tthat simplify to true/false.\n+\n+2022-12-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107935\n+\t* tree-ssa-sccvn.cc (visit_phi): Honor forced VARYING on\n+\tbackedges.\n+\n+2022-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/107627\n+\t* config/i386/i386.md (*concat<mode><dwi>3_1, *concat<mode><dwi>3_2):\n+\tFor operands which are zero_extend arguments allow memory if\n+\toutput operand is a register.\n+\t(*concat<mode><dwi>3_3, *concat<mode><dwi>3_4): Likewise.  If\n+\tboth input operands are memory, use early clobber on output operand.\n+\t* config/i386/i386-expand.cc (split_double_concat): Deal with corner\n+\tcases where one input is memory and the other is not and the address\n+\tof the memory input uses a register we'd overwrite before loading\n+\tthe memory into a register.\n+\n+2022-12-01  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\t* config/rs6000/rs6000-call.cc (swap_endian_selector_for_mode):\n+\tCorrects comments of this function and make them clear.\n+\n+2022-12-01  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/107863\n+\t* config/i386/i386-expand.cc (ix86_expand_vec_set_builtin):\n+\tConvert op1 to target mode whenever mode mismatch.\n+\n+2022-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106626\n+\t* diagnostic-path.h\n+\t(diagnostic_path::get_first_event_in_a_function): New decl.\n+\t* diagnostic.cc (diagnostic_path::get_first_event_in_a_function):\n+\tNew.\n+\t(diagnostic_path::interprocedural_p): Ignore leading events that\n+\tare outside of any function.\n+\n+2022-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* Makefile.in (ANALYZER_OBJS): Add analyzer/bounds-checking.o.\n+\n+2022-12-01  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\tPR target/100866\n+\t* config/rs6000/rs6000-call.cc (swap_endian_selector_for_mode):\n+\tGenerate permute index directly for little endian targets.\n+\t* config/rs6000/vsx.md (revb_<mode>): Call vprem directly with\n+\tcorresponding permute indexes.\n+\n 2022-11-30  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/pa.md (addvdi3): Force operand 2 to a register."}, {"sha": "c7106babaa035cb3cae67ee45834085d6887a9a8", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b35680ec3ddaebc7a863d88627bcd58160e2edcf/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b35680ec3ddaebc7a863d88627bcd58160e2edcf/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=b35680ec3ddaebc7a863d88627bcd58160e2edcf", "patch": "@@ -1 +1 @@\n-20221201\n+20221202"}, {"sha": "e9c804bc8aef04f058f8dba8ace571b2ac7b6122", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b35680ec3ddaebc7a863d88627bcd58160e2edcf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b35680ec3ddaebc7a863d88627bcd58160e2edcf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b35680ec3ddaebc7a863d88627bcd58160e2edcf", "patch": "@@ -1,3 +1,44 @@\n+2022-12-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.cc (get_storage_model_access): Strip any type\n+\tconversion around the node before looking into it.\n+\n+2022-12-01  Steve Baird  <baird@adacore.com>\n+\n+\t* sem_ch13.adb\n+\t(Validate_Aspect_Aggregate): Reject illegal case where none of\n+\tAdd_Named, Add_Unnamed, and Assign_Indexed are specified.\n+\n+2022-12-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/gnat_ugn/gnat_and_program_execution.rst (Non-Symbolic\n+\tTraceback): Add compilation line.\n+\t(Symbolic Traceback): Remove obsolete stuff.\n+\t* doc/gnat_ugn/gnat_utility_programs.rst (gnatsymbolize): Adjust.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2022-12-01  Ronan Desplanques  <desplanques@adacore.com>\n+\n+\t* lib-xref.adb (Generate_Reference): Fix misphrasing in comment.\n+\n+2022-12-01  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute, Attribute_Address): In the case\n+\twhere the attribute's prefix is a dereference of a value of an\n+\taccess type that has aspect Designated_Storage_Model (or a\n+\trenaming of such a dereference), set the attribute's type to the\n+\tcorresponding Storage_Model_Type's associated address type rather\n+\tthan System.Address.\n+\n+2022-12-01  Ronan Desplanques  <desplanques@adacore.com>\n+\n+\t* doc/gnat_rm/the_gnat_library.rst: Fix minor issues.\n+\t* gnat_rm.texi: Regenerate.\n+\n+2022-12-01  Josue Nava Bello  <nava@adacore.com>\n+\n+\t* doc/share/conf.py: minor updates\n+\n 2022-11-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* libgnat/g-traceb.ads: Minor tweaks in the commentary."}, {"sha": "921b052af95ef8e6e0628e37295a83d02edd032f", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b35680ec3ddaebc7a863d88627bcd58160e2edcf/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b35680ec3ddaebc7a863d88627bcd58160e2edcf/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=b35680ec3ddaebc7a863d88627bcd58160e2edcf", "patch": "@@ -1,3 +1,127 @@\n+2022-12-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107948\n+\t* region-model-manager.cc\n+\t(region_model_manager::maybe_fold_binop): Fold (0 - VAL) to -VAL.\n+\t* region-model.cc (region_model::eval_condition): Handle e.g.\n+\t\"-X <= 0\" as equivalent to X >= 0\".\n+\n+2022-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106626\n+\t* bounds-checking.cc\n+\t(symbolic_past_the_end::describe_final_event): Delete, moving to\n+\tsymbolic_buffer_overflow::describe_final_event and\n+\tsymbolic_buffer_over_read::describe_final_event, eliminating\n+\tcomposition of text strings via \"byte_str\" and \"m_dir_str\".\n+\t(symbolic_past_the_end::m_dir_str): Delete field.\n+\t(symbolic_buffer_overflow::symbolic_buffer_overflow): Drop\n+\tm_dir_str.\n+\t(symbolic_buffer_overflow::describe_final_event): New, as noted\n+\tabove.\n+\t(symbolic_buffer_over_read::symbolic_buffer_overflow): Drop\n+\tm_dir_str.\n+\t(symbolic_buffer_over_read::describe_final_event): New, as noted\n+\tabove.\n+\n+2022-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* bounds-checking.cc (class out_of_bounds): Split out from...\n+\t(class concrete_out_of_bounds): New abstract subclass.\n+\t(class past_the_end): Rename to...\n+\t(class concrete_past_the_end): ...this, and make a subclass of\n+\tconcrete_out_of_bounds.\n+\t(class buffer_overflow): Rename to...\n+\t(class concrete_buffer_overflow): ...this, and make a subclass of\n+\tconcrete_past_the_end.\n+\t(class buffer_over_read): Rename to...\n+\t(class concrete_buffer_over_read): ...this, and make a subclass of\n+\tconcrete_past_the_end.\n+\t(class buffer_underwrite): Rename to...\n+\t(class concrete_buffer_underwrite): ...this, and make a subclass\n+\tof concrete_out_of_bounds.\n+\t(class buffer_under_read): Rename to...\n+\t(class concrete_buffer_under_read): ...this, and make a subclass\n+\tof concrete_out_of_bounds.\n+\t(class symbolic_past_the_end): Convert to a subclass of\n+\tout_of_bounds.\n+\t(symbolic_buffer_overflow::get_kind): New.\n+\t(symbolic_buffer_over_read::get_kind): New.\n+\t(region_model::check_region_bounds): Update for renamings.\n+\t* engine.cc (impl_sm_context::set_next_state): Eliminate\n+\t\"new_ctxt\", passing NULL to get_rvalue instead.\n+\t(impl_sm_context::warn): Likewise.\n+\n+2022-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106626\n+\t* bounds-checking.cc (out_of_bounds::get_memory_space): New.\n+\t(buffer_overflow::emit): Use it.\n+\t(class buffer_overread): Rename to...\n+\t(class buffer_over_read): ...this.\n+\t(buffer_over_read::emit): Specify which memory space the read is\n+\tfrom, where known.  Change \"overread\" to \"over-read\".\n+\t(class buffer_underflow): Rename to...\n+\t(class buffer_underwrite): ...this.\n+\t(buffer_underwrite::emit): Specify which memory space the write is\n+\tto, where known.  Change \"underflow\" to \"underwrite\".\n+\t(class buffer_underread): Rename to...\n+\t(class buffer_under_read): Rename to...\n+\t(buffer_under_read::emit): Specify which memory space the read is\n+\tfrom, where known.  Change \"underread\" to \"under-read\".\n+\t(symbolic_past_the_end::get_memory_space): New.\n+\t(symbolic_buffer_overflow::emit): Use it.\n+\t(class symbolic_buffer_overread): Rename to...\n+\t(class symbolic_buffer_over_read): ...this.\n+\t(symbolic_buffer_over_read::emit): Specify which memory space the\n+\tread is from, where known.  Change \"overread\" to \"over-read\".\n+\t(region_model::check_symbolic_bounds): Update for class renaming.\n+\t(region_model::check_region_bounds): Likewise.\n+\n+2022-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106626\n+\t* bounds-checking.cc (out_of_bounds::maybe_describe_array_bounds):\n+\tNew.\n+\t(buffer_overflow::emit): Call maybe_describe_array_bounds.\n+\t(buffer_overread::emit): Likewise.\n+\t(buffer_underflow::emit): Likewise.\n+\t(buffer_underread::emit): Likewise.\n+\n+2022-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106626\n+\t* bounds-checking.cc (buffer_overflow::emit): Use inform_n.\n+\tUpdate wording to clarify that we're talking about the size of\n+\tthe bad access, rather than its position.\n+\t(buffer_overread::emit): Likewise.\n+\n+2022-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* bounds-checking.cc: New file, taken from region-model.cc.\n+\t* region-model.cc (class out_of_bounds): Move to\n+\tbounds-checking.cc.\n+\t(class past_the_end): Likewise.\n+\t(class buffer_overflow): Likewise.\n+\t(class buffer_overread): Likewise.\n+\t(class buffer_underflow): Likewise.\n+\t(class buffer_underread): Likewise.\n+\t(class symbolic_past_the_end): Likewise.\n+\t(class symbolic_buffer_overflow): Likewise.\n+\t(class symbolic_buffer_overread): Likewise.\n+\t(region_model::check_symbolic_bounds): Likewise.\n+\t(maybe_get_integer_cst_tree): Likewise.\n+\t(region_model::check_region_bounds): Likewise.\n+\t* region-model.h: Add comment.\n+\n+2022-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107928\n+\t* sm-fd.cc (fd_state_machine::on_bind): Handle m_constant_fd in\n+\tthe \"success\" outcome.\n+\t(fd_state_machine::on_connect): Likewise.\n+\t* sm-fd.dot: Add \"constant_fd\" state and its transitions.\n+\n 2022-11-30  David Malcolm  <dmalcolm@redhat.com>\n \n \t* region-model-impl-calls.cc (class kf_fgets): Move to sm-file.cc."}, {"sha": "9ca32b16a344aa59eea2145675261cb7ef850c91", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b35680ec3ddaebc7a863d88627bcd58160e2edcf/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b35680ec3ddaebc7a863d88627bcd58160e2edcf/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=b35680ec3ddaebc7a863d88627bcd58160e2edcf", "patch": "@@ -1,3 +1,10 @@\n+2022-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/84469\n+\t* c-omp.cc (c_omp_is_loop_iterator): For range for with structured\n+\tbinding return TREE_VEC_LENGTH (d->declv) even if decl is equal\n+\tto any of the structured binding decls.\n+\n 2022-11-30  Iskander Shakirzyanov  <iskander@ispras.ru>\n \t    Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n "}, {"sha": "bccd9023e4cb124d514d771c10c0d1f7c91d866d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b35680ec3ddaebc7a863d88627bcd58160e2edcf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b35680ec3ddaebc7a863d88627bcd58160e2edcf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b35680ec3ddaebc7a863d88627bcd58160e2edcf", "patch": "@@ -1,3 +1,39 @@\n+2022-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/84469\n+\t* parser.cc (cp_convert_omp_range_for): After do_auto_deduction if\n+\t!processing_template_decl call cp_finish_decomp with\n+\tprocessing_template_decl temporarily incremented.\n+\n+2022-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/84469\n+\t* parser.cc (do_range_for_auto_deduction): Add DECOMP_FIRST_NAME\n+\tand DECOMP_CNT arguments.  Call cp_finish_decomp if DECL\n+\tis a structured binding.\n+\t(cp_parser_range_for): Adjust do_range_for_auto_deduction caller.\n+\t(cp_convert_omp_range_for): Likewise.\n+\n+2022-12-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/107539\n+\t* constraint.cc (norm_hasher::hash, norm_hasher::equal): Set\n+\tcomparing_specializations.\n+\t(sat_hasher::hash, sat_hasher::equal): Likewise.\n+\t* cp-tree.h (atom_hasher::hash, atom_hasher::equal): Likewise.\n+\t* pt.cc (ctp_hasher::hash, ctp_hasher::equal): Likewise.\n+\n+2022-12-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* Make-lang.in: Remove extra object dependency.\n+\n+2022-12-01  Jason Merrill  <jason@redhat.com>\n+\n+\t* contracts.cc (remove_contract_attributes): Actually prepend\n+\tto the list.\n+\t* pt.cc (tsubst_contract): Only look for a postcondition if type is\n+\tnonnull.\n+\n 2022-11-30  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/107542"}, {"sha": "b16bc0bd194330a048e16b92b29a8e40fed5892a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b35680ec3ddaebc7a863d88627bcd58160e2edcf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b35680ec3ddaebc7a863d88627bcd58160e2edcf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b35680ec3ddaebc7a863d88627bcd58160e2edcf", "patch": "@@ -1,3 +1,145 @@\n+2022-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/106577\n+\t* gcc.target/i386/pr106577.c: New test.\n+\n+2022-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/84469\n+\t* g++.dg/gomp/for-21.C (f3, f6, f9): Adjust expected diagnostics.\n+\t* g++.dg/gomp/for-22.C: New test.\n+\n+2022-12-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/84469\n+\t* g++.dg/cpp1z/decomp56.C: New test.\n+\t* g++.dg/gomp/pr84469.C: New test.\n+\n+2022-12-02  Michael Collison  <collison@rivosinc.com>\n+\n+\t* gcc.dg/tree-ssa/branchless-cond.c: New test.\n+\n+2022-12-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107948\n+\t* gcc.dg/analyzer/feasibility-pr107948.c: New test.\n+\n+2022-12-02  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/string-ops-concat-pair.c: New test.\n+\t* gcc.dg/analyzer/string-ops-dup.c: New test.\n+\n+2022-12-02  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr107934.c: New test.\n+\n+2022-12-02  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/107539\n+\t* g++.dg/template/canon-type-19.C: New test.\n+\n+2022-12-01  Ju-Zhe Zhong  <juzhe.zhong@rivai.ai>\n+\n+\t* gcc.target/riscv/rvv/base/dup-1.c: New test.\n+\t* gcc.target/riscv/rvv/base/dup-2.c: New test.\n+\n+2022-12-01  Christophe Lyon  <christophe.lyon@arm.com>\n+\n+\t* gcc.target/arm/simd/mve-compare-1.c: Update.\n+\t* gcc.target/arm/simd/mve-compare-scalar-1.c: Update.\n+\t* gcc.target/arm/simd/mve-vabs.c: Update.\n+\t* gcc.target/arm/simd/mve-vadd-1.c: Update.\n+\t* gcc.target/arm/simd/mve-vadd-scalar-1.c: Update.\n+\t* gcc.target/arm/simd/mve-vcmp.c: Update.\n+\t* gcc.target/arm/simd/pr101325.c: Update.\n+\n+2022-12-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107937\n+\t* gcc.dg/pr107937.c: New testcase.\n+\n+2022-12-01  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/107935\n+\t* gcc.dg/torture/pr107935.c: New testcase.\n+\n+2022-12-01  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/107627\n+\t* gcc.target/i386/pr107627-1.c: New test.\n+\t* gcc.target/i386/pr107627-2.c: New test.\n+\n+2022-12-01  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr107863.c: New test.\n+\n+2022-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106626\n+\t* gcc.dg/analyzer/out-of-bounds-multiline-1.c: New test.\n+\n+2022-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106626\n+\t* gcc.dg/analyzer/call-summaries-2.c: Update expected results.\n+\t* gcc.dg/analyzer/out-of-bounds-1.c: Likewise.\n+\t* gcc.dg/analyzer/out-of-bounds-2.c: Likewise.\n+\t* gcc.dg/analyzer/out-of-bounds-3.c: Likewise.\n+\t* gcc.dg/analyzer/out-of-bounds-4.c: Likewise.\n+\t* gcc.dg/analyzer/out-of-bounds-5.c: Likewise.\n+\t* gcc.dg/analyzer/out-of-bounds-container_of.c: Likewise.\n+\t* gcc.dg/analyzer/out-of-bounds-read-char-arr.c: Likewise.  Rename\n+\tfunctions from \"int_arr_\" to \"char_arr_\".\n+\t* gcc.dg/analyzer/out-of-bounds-read-int-arr.c: Update expected\n+\tresults.\n+\t* gcc.dg/analyzer/out-of-bounds-read-struct-arr.c: New test.\n+\t* gcc.dg/analyzer/out-of-bounds-write-char-arr.c: Update expected\n+\tresults.  Rename functions from \"int_arr_\" to \"char_arr_\".\n+\t* gcc.dg/analyzer/out-of-bounds-write-int-arr.c: Update expected\n+\tresults.\n+\t* gcc.dg/analyzer/out-of-bounds-write-struct-arr.c: New test.\n+\t* gcc.dg/analyzer/pr101962.c: Update expected results.\n+\t* gcc.dg/analyzer/realloc-5.c: Update expected results.\n+\t* gcc.dg/analyzer/zlib-3.c: Update expected results.\n+\n+2022-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106626\n+\t* gcc.dg/analyzer/call-summaries-2.c: Add dg-message for expected\n+\tnote about valid indexes.\n+\t* gcc.dg/analyzer/out-of-bounds-1.c: Likewise, fixing up existing\n+\tdg-message directives.\n+\t* gcc.dg/analyzer/out-of-bounds-write-char-arr.c: Likewise.\n+\t* gcc.dg/analyzer/out-of-bounds-write-int-arr.c: Likewise.\n+\n+2022-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106626\n+\t* gcc.dg/analyzer/out-of-bounds-read-char-arr.c: Update for\n+\tchanges to expected wording.\n+\t* gcc.dg/analyzer/out-of-bounds-read-int-arr.c: Likewise.\n+\t* gcc.dg/analyzer/out-of-bounds-write-char-arr.c: Likewise.\n+\t* gcc.dg/analyzer/out-of-bounds-write-int-arr.c: Likewise.\n+\n+2022-12-01  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/107928\n+\t* gcc.dg/analyzer/fd-bind-pr107928.c: New test.\n+\t* gcc.dg/analyzer/fd-connect-pr107928.c: New test.\n+\t* gcc.dg/analyzer/fd-stream-socket-active-open.c\n+\t(test_active_open_from_connect_constant): New, adapted from\n+\ttest_active_open_from_connect.\n+\t* gcc.dg/analyzer/fd-stream-socket-passive-open.c\n+\t(test_passive_open_from_bind_constant): New, adapted from\n+\ttest_passive_open_from_bind.\n+\t(test_passive_open_from_listen_constant): New, adapted from\n+\ttest_passive_open_from_listen.\n+\n+2022-12-01  Haochen Gui  <guihaoc@gcc.gnu.org>\n+\n+\tPR target/100866\n+\t* gcc.target/powerpc/pr100866-1.c: New.\n+\n 2022-11-30  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/aarch64/mops_5.c: New test."}, {"sha": "4ddb404752e424730b7cf977f71fcf2c79346d7c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b35680ec3ddaebc7a863d88627bcd58160e2edcf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b35680ec3ddaebc7a863d88627bcd58160e2edcf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b35680ec3ddaebc7a863d88627bcd58160e2edcf", "patch": "@@ -1,3 +1,11 @@\n+2022-12-02  Bj\u00f6rn Sch\u00e4pers  <bjoern@hazardy.de>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/stacktrace (stacktrace_entry::_S_err_handler): New\n+\tstatic function.\n+\t(stacktrace_entry, basic_stacktrace): Pass &_S_err_handler to\n+\tall calls to libbacktrace.\n+\n 2022-11-29  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/107852"}]}