{"sha": "afd88205d8a95ccea9ba77fd23f0258025fcc249", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZkODgyMDVkOGE5NWNjZWE5YmE3N2ZkMjNmMDI1ODAyNWZjYzI0OQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2009-12-21T19:00:34Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-12-21T19:00:34Z"}, "message": "atomic: Update to N3000.\n\n2009-12-20  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/std/atomic: Update to N3000.\n\t* include/bits/atomic_0.h: Same.\n\t* include/bits/atomic_2.h: Same.\n\t* include/c_global/cstdatomic: Move...\n\t* include/bits/atomic_base.h: ...here.\n\t* include/c_compatibility/stdatomic.h: Just include atomic_base.h.\n\t* include/precompiled/stdc++.h: Adjust includes.\n\t* include/Makefile.am: Adjust files.\n\t* include/Makefile.in: Regenerate.\n\t* include/std/future: Adjust.\n\t* src/atomic.cc: Adjust, adjust exports for compatibility.\n\t* src/compatibility.cc: Move C++0x stuff...\n\t* src/compatibility-c++0x.cc: ...here.\n\n\t* doc/xml/manual/using.xml: Update.\n\t* doc/xml/manual/status_cxx200x.xml: Update.\n\t* doc/doxygen/user.cfg.in: Update.\n\n\t* testsuite/29_atomics/atomic_address/cons/assign_neg.cc: Same.\n\t* testsuite/29_atomics/atomic_address/cons/single_value.cc: Same.\n\t* testsuite/29_atomics/atomic_address/cons/copy_neg.cc: Same.\n\t* testsuite/29_atomics/atomic_address/cons/default.cc: Same.\n\t* testsuite/29_atomics/atomic_address/cons/aggregate.cc: Same.\n\t* testsuite/29_atomics/atomic_address/requirements/\n\tstandard_layout.cc: Same.\n\t* testsuite/29_atomics/atomic_address/requirements/trivial.cc: Same.\n\t* testsuite/29_atomics/atomic_integral/cons/assign_neg.cc: Same.\n\t* testsuite/29_atomics/atomic_integral/cons/single_value.cc: Same.\n\t* testsuite/29_atomics/atomic_integral/cons/copy_neg.cc: Same.\n\t* testsuite/29_atomics/atomic_integral/cons/default.cc: Same.\n\t* testsuite/29_atomics/atomic_integral/cons/copy_list.cc: Same.\n\t* testsuite/29_atomics/atomic_integral/cons/direct_list.cc: Same.\n\t* testsuite/29_atomics/atomic_integral/requirements/\n\tstandard_layout.cc: Same.\n\t* testsuite/29_atomics/atomic_integral/requirements/trivial.cc: Same.\n\t* testsuite/29_atomics/atomic_integral/operators/increment_neg.cc: Same.\n\t* testsuite/29_atomics/atomic_integral/operators/\n\tintegral_assignment.cc: Same.\n\t* testsuite/29_atomics/atomic_integral/operators/bitwise_neg.cc: Same.\n\t* testsuite/29_atomics/atomic_integral/operators/decrement_neg.cc: Same.\n\t* testsuite/29_atomics/atomic_integral/operators/increment.cc: Same.\n\t* testsuite/29_atomics/atomic_integral/operators/bitwise.cc: Same.\n\t* testsuite/29_atomics/atomic_integral/operators/decrement.cc: Same.\n\t* testsuite/29_atomics/atomic_integral/operators/\n\tintegral_conversion.cc: Same.\n\t* testsuite/29_atomics/atomic_flag/cons/assign_neg.cc: Same.\n\t* testsuite/29_atomics/atomic_flag/cons/copy_neg.cc: Same.\n\t* testsuite/29_atomics/atomic_flag/cons/default.cc: Same.\n\t* testsuite/29_atomics/atomic_flag/cons/aggregate.cc: Same.\n\t* testsuite/29_atomics/atomic_flag/requirements/\n\tstandard_layout.cc: Same.\n\t* testsuite/29_atomics/atomic_flag/requirements/trivial.cc: Same.\n\t* testsuite/29_atomics/atomic_flag/clear/1.cc: Same.\n\t* testsuite/29_atomics/atomic_flag/test_and_set/explicit.c\n\t* testsuite/29_atomics/atomic_flag/test_and_set/explicit.cc: Same.\n\t* testsuite/29_atomics/atomic_flag/test_and_set/implicit.c\n\t* testsuite/29_atomics/atomic_flag/test_and_set/implicit.cc: Same.\n\t* testsuite/29_atomics/headers/stdatomic.h/functions.c\n\t* testsuite/29_atomics/atomic/cons/assign_neg.cc: Same.\n\t* testsuite/29_atomics/atomic/cons/single_value.cc: Same.\n\t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Same.\n\t* testsuite/29_atomics/atomic/cons/default.cc: Same.\n\t* testsuite/29_atomics/atomic/cons/copy_list.cc: Same.\n\t* testsuite/29_atomics/atomic/cons/direct_list.cc: Same.\n\t* testsuite/29_atomics/atomic/requirements/explicit_instantiation/\n\t1.cc: Same.\n\t* testsuite/29_atomics/atomic/requirements/base_classes.cc: Same.\n\t* testsuite/29_atomics/atomic/operators/integral_assignment.cc: Same.\n\t* testsuite/29_atomics/atomic/operators/integral_conversion.cc: Same.\n\t* testsuite/util/testsuite_common_types.h: Adjust.\n\n\t* testsuite/29_atomics/headers/cstdatomic: Move and adjust...\n\t* testsuite/29_atomics/headers/atomic: ...here.\n\t* testsuite/29_atomics/headers/atomic/types_std_c++0x.cc: Same.\n\t* testsuite/29_atomics/headers/atomic/functions_std_c++0x.cc: Same.\n\t* testsuite/29_atomics/headers/atomic/std_c++0x_neg.cc: Same.\n\t* testsuite/29_atomics/headers/atomic/macros.cc: Same.\n\n\t* testsuite/29_atomics/headers/atomic/types_std_c++0x_neg.cc: Add.\n\t* testsuite/29_atomics/atomic/cons/user_pod.cc: Add.\n\nFrom-SVN: r155377", "tree": {"sha": "79f5ade61a5285c7735d351c9622e56ae1486b77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79f5ade61a5285c7735d351c9622e56ae1486b77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afd88205d8a95ccea9ba77fd23f0258025fcc249", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd88205d8a95ccea9ba77fd23f0258025fcc249", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afd88205d8a95ccea9ba77fd23f0258025fcc249", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afd88205d8a95ccea9ba77fd23f0258025fcc249/comments", "author": null, "committer": null, "parents": [{"sha": "dcc1e1fab49e2b2d000b22f0053c0ffe53c44b14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcc1e1fab49e2b2d000b22f0053c0ffe53c44b14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcc1e1fab49e2b2d000b22f0053c0ffe53c44b14"}], "stats": {"total": 1812, "additions": 1001, "deletions": 811}, "files": [{"sha": "50840c71a62ea26ccc1b05109d83eb47e24ff6f3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -1,3 +1,86 @@\n+2009-12-20  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/std/atomic: Update to N3000.\n+\t* include/bits/atomic_0.h: Same.\n+\t* include/bits/atomic_2.h: Same.\n+\t* include/c_global/cstdatomic: Move...\n+\t* include/bits/atomic_base.h: ...here.\n+\t* include/c_compatibility/stdatomic.h: Just include atomic_base.h.\n+\t* include/precompiled/stdc++.h: Adjust includes.\n+\t* include/Makefile.am: Adjust files.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/std/future: Adjust.\n+\t* src/atomic.cc: Adjust, adjust exports for compatibility.\n+\t* src/compatibility.cc: Move C++0x stuff...\n+\t* src/compatibility-c++0x.cc: ...here.\n+\n+\t* doc/xml/manual/using.xml: Update.\n+\t* doc/xml/manual/status_cxx200x.xml: Update.\n+\t* doc/doxygen/user.cfg.in: Update.\n+\n+\t* testsuite/29_atomics/atomic_address/cons/assign_neg.cc: Same.\n+\t* testsuite/29_atomics/atomic_address/cons/single_value.cc: Same.\n+\t* testsuite/29_atomics/atomic_address/cons/copy_neg.cc: Same.\n+\t* testsuite/29_atomics/atomic_address/cons/default.cc: Same.\n+\t* testsuite/29_atomics/atomic_address/cons/aggregate.cc: Same.\n+\t* testsuite/29_atomics/atomic_address/requirements/\n+\tstandard_layout.cc: Same.\n+\t* testsuite/29_atomics/atomic_address/requirements/trivial.cc: Same.\n+\t* testsuite/29_atomics/atomic_integral/cons/assign_neg.cc: Same.\n+\t* testsuite/29_atomics/atomic_integral/cons/single_value.cc: Same.\n+\t* testsuite/29_atomics/atomic_integral/cons/copy_neg.cc: Same.\n+\t* testsuite/29_atomics/atomic_integral/cons/default.cc: Same.\n+\t* testsuite/29_atomics/atomic_integral/cons/copy_list.cc: Same.\n+\t* testsuite/29_atomics/atomic_integral/cons/direct_list.cc: Same.\n+\t* testsuite/29_atomics/atomic_integral/requirements/\n+\tstandard_layout.cc: Same.\n+\t* testsuite/29_atomics/atomic_integral/requirements/trivial.cc: Same.\n+\t* testsuite/29_atomics/atomic_integral/operators/increment_neg.cc: Same.\n+\t* testsuite/29_atomics/atomic_integral/operators/\n+\tintegral_assignment.cc: Same.\n+\t* testsuite/29_atomics/atomic_integral/operators/bitwise_neg.cc: Same.\n+\t* testsuite/29_atomics/atomic_integral/operators/decrement_neg.cc: Same.\n+\t* testsuite/29_atomics/atomic_integral/operators/increment.cc: Same.\n+\t* testsuite/29_atomics/atomic_integral/operators/bitwise.cc: Same.\n+\t* testsuite/29_atomics/atomic_integral/operators/decrement.cc: Same.\n+\t* testsuite/29_atomics/atomic_integral/operators/\n+\tintegral_conversion.cc: Same.\n+\t* testsuite/29_atomics/atomic_flag/cons/assign_neg.cc: Same.\n+\t* testsuite/29_atomics/atomic_flag/cons/copy_neg.cc: Same.\n+\t* testsuite/29_atomics/atomic_flag/cons/default.cc: Same.\n+\t* testsuite/29_atomics/atomic_flag/cons/aggregate.cc: Same.\n+\t* testsuite/29_atomics/atomic_flag/requirements/\n+\tstandard_layout.cc: Same.\n+\t* testsuite/29_atomics/atomic_flag/requirements/trivial.cc: Same.\n+\t* testsuite/29_atomics/atomic_flag/clear/1.cc: Same.\n+\t* testsuite/29_atomics/atomic_flag/test_and_set/explicit.c\n+\t* testsuite/29_atomics/atomic_flag/test_and_set/explicit.cc: Same.\n+\t* testsuite/29_atomics/atomic_flag/test_and_set/implicit.c\n+\t* testsuite/29_atomics/atomic_flag/test_and_set/implicit.cc: Same.\n+\t* testsuite/29_atomics/headers/stdatomic.h/functions.c\n+\t* testsuite/29_atomics/atomic/cons/assign_neg.cc: Same.\n+\t* testsuite/29_atomics/atomic/cons/single_value.cc: Same.\n+\t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Same.\n+\t* testsuite/29_atomics/atomic/cons/default.cc: Same.\n+\t* testsuite/29_atomics/atomic/cons/copy_list.cc: Same.\n+\t* testsuite/29_atomics/atomic/cons/direct_list.cc: Same.\n+\t* testsuite/29_atomics/atomic/requirements/explicit_instantiation/\n+\t1.cc: Same.\n+\t* testsuite/29_atomics/atomic/requirements/base_classes.cc: Same.\n+\t* testsuite/29_atomics/atomic/operators/integral_assignment.cc: Same.\n+\t* testsuite/29_atomics/atomic/operators/integral_conversion.cc: Same.\n+\t* testsuite/util/testsuite_common_types.h: Adjust.\n+\n+\t* testsuite/29_atomics/headers/cstdatomic: Move and adjust...\n+\t* testsuite/29_atomics/headers/atomic: ...here.\n+\t* testsuite/29_atomics/headers/atomic/types_std_c++0x.cc: Same.\n+\t* testsuite/29_atomics/headers/atomic/functions_std_c++0x.cc: Same.\n+\t* testsuite/29_atomics/headers/atomic/std_c++0x_neg.cc: Same.\n+\t* testsuite/29_atomics/headers/atomic/macros.cc: Same.\n+\n+\t* testsuite/29_atomics/headers/atomic/types_std_c++0x_neg.cc: Add.\n+\t* testsuite/29_atomics/atomic/cons/user_pod.cc: Add.\n+\n 2009-12-18  Jimmy Guo  <jguo@yahoo-inc.com>\n \n \tPR libstdc++/40088"}, {"sha": "34795fa0a901bcad5e5c07fa7e906d0f891b7efd", "filename": "libstdc++-v3/doc/doxygen/user.cfg.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fuser.cfg.in?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -580,6 +580,7 @@ INPUT                  = @srcdir@/doc/doxygen/doxygroups.cc \\\n                          @srcdir@/libsupc++/typeinfo \\\n                          include/algorithm \\\n                          include/array \\\n+                         include/atomic \\\n                          include/bitset \\\n                          include/chrono \\\n                          include/complex \\\n@@ -635,7 +636,6 @@ INPUT                  = @srcdir@/doc/doxygen/doxygroups.cc \\\n                          include/csetjmp \\\n                          include/csignal \\\n                          include/cstdarg \\\n-                         include/cstdatomic \\\n                          include/cstdbool \\\n                          include/cstddef \\\n                          include/cstdint \\"}, {"sha": "b7c0fac9431b89685ada3a19ecd69f33dc89c8b4", "filename": "libstdc++-v3/doc/xml/manual/status_cxx200x.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx200x.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx200x.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx200x.xml?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -2200,7 +2200,7 @@ particular release.\n     </row>\n     <row>\n       <entry>29.2</entry>\n-      <entry>Header <code>&lt;cstdatomic&gt;</code> synopsis</entry>\n+      <entry>Header <code>&lt;atomic&gt;</code> synopsis</entry>\n       <entry>Y</entry>\n       <entry></entry>\n     </row>"}, {"sha": "cab3d0bf91dd2e8a5b24231355a2816c8df4b22f", "filename": "libstdc++-v3/doc/xml/manual/using.xml", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -329,24 +329,23 @@ mode, i.e. <literal>-std=c++0x</literal> or <literal>-std=gnu++0x</literal>.\n <entry><filename class=\"headerfile\">csetjmp</filename></entry>\n <entry><filename class=\"headerfile\">csignal</filename></entry>\n <entry><filename class=\"headerfile\">cstdarg</filename></entry>\n-<entry><filename class=\"headerfile\">cstdatomic</filename></entry>\n+<entry><filename class=\"headerfile\">cstdbool</filename></entry>\n </row>\n <row>\n-<entry><filename class=\"headerfile\">cstdbool</filename></entry>\n <entry><filename class=\"headerfile\">cstddef</filename></entry>\n <entry><filename class=\"headerfile\">cstdint</filename></entry>\n <entry><filename class=\"headerfile\">cstdlib</filename></entry>\n <entry><filename class=\"headerfile\">cstdio</filename></entry>\n+<entry><filename class=\"headerfile\">cstring</filename></entry>\n </row>\n <row>\n-<entry><filename class=\"headerfile\">cstring</filename></entry>\n <entry><filename class=\"headerfile\">ctgmath</filename></entry>\n <entry><filename class=\"headerfile\">ctime</filename></entry>\n <entry><filename class=\"headerfile\">cuchar</filename></entry>\n <entry><filename class=\"headerfile\">cwchar</filename></entry>\n+<entry><filename class=\"headerfile\">cwctype</filename></entry>\n </row>\n <row>\n-<entry><filename class=\"headerfile\">cwctype</filename></entry>\n <entry><filename class=\"headerfile\">stdatomic.h</filename></entry>\n </row>\n "}, {"sha": "69f90a43367e1b7ea1a2099f918ab219993869c8", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -29,6 +29,7 @@ std_builddir = .\n std_headers = \\\n \t${std_srcdir}/algorithm \\\n \t${std_srcdir}/array \\\n+\t${std_srcdir}/atomic \\\n \t${std_srcdir}/bitset \\\n \t${std_srcdir}/c++0x_warning.h \\\n \t${std_srcdir}/chrono \\\n@@ -78,6 +79,7 @@ bits_builddir = ./bits\n bits_headers = \\\n         ${bits_srcdir}/algorithmfwd.h \\\n \t${bits_srcdir}/allocator.h \\\n+\t${bits_srcdir}/atomic_base.h \\\n \t${bits_srcdir}/atomicfwd_c.h \\\n \t${bits_srcdir}/atomicfwd_cxx.h \\\n \t${bits_srcdir}/atomic_0.h \\\n@@ -641,7 +643,6 @@ c_base_headers = \\\n \t${c_base_srcdir}/csetjmp \\\n \t${c_base_srcdir}/csignal \\\n \t${c_base_srcdir}/cstdarg \\\n-\t${c_base_srcdir}/cstdatomic \\\n \t${c_base_srcdir}/cstdbool \\\n \t${c_base_srcdir}/cstddef \\\n \t${c_base_srcdir}/cstdint \\"}, {"sha": "1a25e1e0f99607da0f5ddaffb617c4fa5d9a2d19", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -271,6 +271,7 @@ std_builddir = .\n std_headers = \\\n \t${std_srcdir}/algorithm \\\n \t${std_srcdir}/array \\\n+\t${std_srcdir}/atomic \\\n \t${std_srcdir}/bitset \\\n \t${std_srcdir}/c++0x_warning.h \\\n \t${std_srcdir}/chrono \\\n@@ -320,6 +321,7 @@ bits_builddir = ./bits\n bits_headers = \\\n         ${bits_srcdir}/algorithmfwd.h \\\n \t${bits_srcdir}/allocator.h \\\n+\t${bits_srcdir}/atomic_base.h \\\n \t${bits_srcdir}/atomicfwd_c.h \\\n \t${bits_srcdir}/atomicfwd_cxx.h \\\n \t${bits_srcdir}/atomic_0.h \\\n@@ -881,7 +883,6 @@ c_base_headers = \\\n \t${c_base_srcdir}/csetjmp \\\n \t${c_base_srcdir}/csignal \\\n \t${c_base_srcdir}/cstdarg \\\n-\t${c_base_srcdir}/cstdatomic \\\n \t${c_base_srcdir}/cstdbool \\\n \t${c_base_srcdir}/cstddef \\\n \t${c_base_srcdir}/cstdint \\"}, {"sha": "a39de4a79269779ba2594367653d20529d3549a3", "filename": "libstdc++-v3/include/bits/atomic_0.h", "status": "modified", "additions": 66, "deletions": 73, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_0.h?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -42,38 +42,38 @@ namespace __atomic0\n \n   // Implementation specific defines.\n #define _ATOMIC_LOAD_(__a, __x)\t\t\t\t\t\t   \\\n-  ({ volatile __typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t   \\\n-    volatile __atomic_flag_base* __g = __atomic_flag_for_address(__p);     \\\n+  ({__typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t   \t\t   \\\n+    __atomic_flag_base* __g = __atomic_flag_for_address(__p);\t  \t   \\\n     __atomic_flag_wait_explicit(__g, __x);\t\t\t\t   \\\n     __typeof__ _ATOMIC_MEMBER_ __r = *__p;\t\t\t\t   \\\n     atomic_flag_clear_explicit(__g, __x);\t\t       \t\t   \\\n     __r; })\n \n #define _ATOMIC_STORE_(__a, __m, __x)\t\t\t\t\t   \\\n-  ({ volatile __typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t   \\\n+  ({__typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t   \t\t   \\\n     __typeof__(__m) __v = (__m);\t\t\t       \t\t   \\\n-    volatile __atomic_flag_base* __g = __atomic_flag_for_address(__p);     \\\n+    __atomic_flag_base* __g = __atomic_flag_for_address(__p);\t  \t   \\\n     __atomic_flag_wait_explicit(__g, __x);\t\t\t\t   \\\n     *__p = __v;\t\t\t\t\t\t\t\t   \\\n     atomic_flag_clear_explicit(__g, __x);\t\t       \t\t   \\\n     __v; })\n \n #define _ATOMIC_MODIFY_(__a, __o, __m, __x)\t\t\t\t   \\\n-  ({ volatile __typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t   \\\n+  ({__typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t   \t\t   \\\n     __typeof__(__m) __v = (__m);\t\t\t       \t\t   \\\n-    volatile __atomic_flag_base* __g = __atomic_flag_for_address(__p);     \\\n+    __atomic_flag_base* __g = __atomic_flag_for_address(__p);\t  \t   \\\n     __atomic_flag_wait_explicit(__g, __x);\t\t\t\t   \\\n     __typeof__ _ATOMIC_MEMBER_ __r = *__p;\t\t\t\t   \\\n     *__p __o __v;\t\t\t\t\t       \t\t   \\\n     atomic_flag_clear_explicit(__g, __x);\t\t       \t\t   \\\n     __r; })\n \n #define _ATOMIC_CMPEXCHNG_(__a, __e, __m, __x)\t\t\t\t   \\\n-  ({ volatile __typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t   \\\n+  ({__typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t   \t\t   \\\n     __typeof__(__e) __q = (__e);\t\t\t       \t\t   \\\n     __typeof__(__m) __v = (__m);\t\t\t       \t\t   \\\n     bool __r;\t\t\t\t\t\t       \t\t   \\\n-    volatile __atomic_flag_base* __g = __atomic_flag_for_address(__p);     \\\n+    __atomic_flag_base* __g = __atomic_flag_for_address(__p);\t   \t   \\\n     __atomic_flag_wait_explicit(__g, __x);\t\t\t\t   \\\n     __typeof__ _ATOMIC_MEMBER_ __t__ = *__p;\t\t       \t\t   \\\n     if (__t__ == *__q) { *__p = __v; __r = true; }\t\t\t   \\\n@@ -87,16 +87,16 @@ namespace __atomic0\n     atomic_flag() = default;\n     ~atomic_flag() = default;\n     atomic_flag(const atomic_flag&) = delete;\n-    atomic_flag& operator=(const atomic_flag&) = delete;\n+    atomic_flag& operator=(const atomic_flag&) volatile = delete;\n \n     // Conversion to ATOMIC_FLAG_INIT.\n     atomic_flag(bool __i): __atomic_flag_base({ __i }) { }\n \n     bool\n-    test_and_set(memory_order __m = memory_order_seq_cst) volatile;\n+    test_and_set(memory_order __m = memory_order_seq_cst);\n \n     void\n-    clear(memory_order __m = memory_order_seq_cst) volatile;\n+    clear(memory_order __m = memory_order_seq_cst);\n   };\n \n   /// 29.4.2, address types\n@@ -109,16 +109,16 @@ namespace __atomic0\n     atomic_address() = default;\n     ~atomic_address() = default;\n     atomic_address(const atomic_address&) = delete;\n-    atomic_address& operator=(const atomic_address&) = delete;\n+    atomic_address& operator=(const atomic_address&) volatile = delete;\n \n     atomic_address(void* __v) { _M_i = __v; }\n \n     bool\n-    is_lock_free() const volatile\n+    is_lock_free() const\n     { return false; }\n \n     void\n-    store(void* __v, memory_order __m = memory_order_seq_cst) volatile\n+    store(void* __v, memory_order __m = memory_order_seq_cst)\n     {\n       __glibcxx_assert(__m != memory_order_acquire);\n       __glibcxx_assert(__m != memory_order_acq_rel);\n@@ -127,20 +127,20 @@ namespace __atomic0\n     }\n \n     void*\n-    load(memory_order __m = memory_order_seq_cst) const volatile\n+    load(memory_order __m = memory_order_seq_cst) const\n     {\n       __glibcxx_assert(__m != memory_order_release);\n       __glibcxx_assert(__m != memory_order_acq_rel);\n       return _ATOMIC_LOAD_(this, __m);\n     }\n \n     void*\n-    exchange(void* __v, memory_order __m = memory_order_seq_cst) volatile\n+    exchange(void* __v, memory_order __m = memory_order_seq_cst)\n     { return _ATOMIC_MODIFY_(this, =, __v, __m); }\n \n     bool\n     compare_exchange_weak(void*& __v1, void* __v2, memory_order __m1,\n-\t\t\t  memory_order __m2) volatile\n+\t\t\t  memory_order __m2)\n     {\n       __glibcxx_assert(__m2 != memory_order_release);\n       __glibcxx_assert(__m2 != memory_order_acq_rel);\n@@ -150,15 +150,15 @@ namespace __atomic0\n \n     bool\n     compare_exchange_weak(void*& __v1, void* __v2,\n-\t\t\t  memory_order __m = memory_order_seq_cst) volatile\n+\t\t\t  memory_order __m = memory_order_seq_cst)\n     {\n       return compare_exchange_weak(__v1, __v2, __m,\n \t\t\t\t   __calculate_memory_order(__m));\n     }\n \n     bool\n     compare_exchange_strong(void*& __v1, void* __v2, memory_order __m1,\n-\t\t\t    memory_order __m2) volatile\n+\t\t\t    memory_order __m2)\n     {\n       __glibcxx_assert(__m2 != memory_order_release);\n       __glibcxx_assert(__m2 != memory_order_acq_rel);\n@@ -168,17 +168,17 @@ namespace __atomic0\n \n     bool\n     compare_exchange_strong(void*& __v1, void* __v2,\n-\t\t\t  memory_order __m = memory_order_seq_cst) volatile\n+\t\t\t  memory_order __m = memory_order_seq_cst)\n     {\n       return compare_exchange_strong(__v1, __v2, __m,\n \t\t\t\t     __calculate_memory_order(__m));\n     }\n \n     void*\n-    fetch_add(ptrdiff_t __d, memory_order __m = memory_order_seq_cst) volatile\n+    fetch_add(ptrdiff_t __d, memory_order __m = memory_order_seq_cst)\n     {\n-      void* volatile* __p = &(_M_i);\n-      volatile __atomic_flag_base* __g = __atomic_flag_for_address(__p);\n+      void** __p = &(_M_i);\n+      __atomic_flag_base* __g = __atomic_flag_for_address(__p);\n       __atomic_flag_wait_explicit(__g, __m);\n       void* __r = *__p;\n       *__p = (void*)((char*)(*__p) + __d);\n@@ -187,33 +187,33 @@ namespace __atomic0\n     }\n \n     void*\n-    fetch_sub(ptrdiff_t __d, memory_order __m = memory_order_seq_cst) volatile\n+    fetch_sub(ptrdiff_t __d, memory_order __m = memory_order_seq_cst)\n     {\n-      void* volatile* __p = &(_M_i);\n-      volatile __atomic_flag_base* __g = __atomic_flag_for_address(__p);\n+      void** __p = &(_M_i);\n+      __atomic_flag_base* __g = __atomic_flag_for_address(__p);\n       __atomic_flag_wait_explicit(__g, __m);\n       void* __r = *__p;\n       *__p = (void*)((char*)(*__p) - __d);\n       atomic_flag_clear_explicit(__g, __m);\n       return __r;\n     }\n \n-    operator void*() const volatile\n+    operator void*() const\n     { return load(); }\n \n     void*\n-    operator=(void* __v) // XXX volatile\n+    operator=(void* __v)\n     {\n       store(__v);\n       return __v;\n     }\n \n     void*\n-    operator+=(ptrdiff_t __d) volatile\n+    operator+=(ptrdiff_t __d)\n     { return fetch_add(__d) + __d; }\n \n     void*\n-    operator-=(ptrdiff_t __d) volatile\n+    operator-=(ptrdiff_t __d)\n     { return fetch_sub(__d) - __d; }\n   };\n \n@@ -252,64 +252,63 @@ namespace __atomic0\n       __atomic_base() = default;\n       ~__atomic_base() = default;\n       __atomic_base(const __atomic_base&) = delete;\n-      __atomic_base& operator=(const __atomic_base&) = delete;\n+      __atomic_base& operator=(const __atomic_base&) volatile = delete;\n \n       // Requires __integral_type convertible to _M_base._M_i.\n       __atomic_base(__integral_type __i) { _M_i = __i; }\n \n-      operator __integral_type() const volatile\n+      operator __integral_type() const\n       { return load(); }\n \n       __integral_type\n-      operator=(__integral_type __i) // XXX volatile\n+      operator=(__integral_type __i)\n       {\n \tstore(__i);\n \treturn __i;\n       }\n \n       __integral_type\n-      operator++(int) volatile\n+      operator++(int)\n       { return fetch_add(1); }\n \n       __integral_type\n-      operator--(int) volatile\n+      operator--(int)\n       { return fetch_sub(1); }\n \n       __integral_type\n-      operator++() volatile\n+      operator++()\n       { return fetch_add(1) + 1; }\n \n       __integral_type\n-      operator--() volatile\n+      operator--()\n       { return fetch_sub(1) - 1; }\n \n       __integral_type\n-      operator+=(__integral_type __i) volatile\n+      operator+=(__integral_type __i)\n       { return fetch_add(__i) + __i; }\n \n       __integral_type\n-      operator-=(__integral_type __i) volatile\n+      operator-=(__integral_type __i)\n       { return fetch_sub(__i) - __i; }\n \n       __integral_type\n-      operator&=(__integral_type __i) volatile\n+      operator&=(__integral_type __i)\n       { return fetch_and(__i) & __i; }\n \n       __integral_type\n-      operator|=(__integral_type __i) volatile\n+      operator|=(__integral_type __i)\n       { return fetch_or(__i) | __i; }\n \n       __integral_type\n-      operator^=(__integral_type __i) volatile\n+      operator^=(__integral_type __i)\n       { return fetch_xor(__i) ^ __i; }\n \n       bool\n-      is_lock_free() const volatile\n+      is_lock_free() const\n       { return false; }\n \n       void\n-      store(__integral_type __i,\n-\t    memory_order __m = memory_order_seq_cst) volatile\n+      store(__integral_type __i, memory_order __m = memory_order_seq_cst)\n       {\n \t__glibcxx_assert(__m != memory_order_acquire);\n \t__glibcxx_assert(__m != memory_order_acq_rel);\n@@ -318,21 +317,20 @@ namespace __atomic0\n       }\n \n       __integral_type\n-      load(memory_order __m = memory_order_seq_cst) const volatile\n+      load(memory_order __m = memory_order_seq_cst) const\n       {\n \t__glibcxx_assert(__m != memory_order_release);\n \t__glibcxx_assert(__m != memory_order_acq_rel);\n \treturn _ATOMIC_LOAD_(this, __m);\n       }\n \n       __integral_type\n-      exchange(__integral_type __i,\n-\t       memory_order __m = memory_order_seq_cst) volatile\n+      exchange(__integral_type __i, memory_order __m = memory_order_seq_cst)\n       { return _ATOMIC_MODIFY_(this, =, __i, __m); }\n \n       bool\n       compare_exchange_weak(__integral_type& __i1, __integral_type __i2,\n-\t\t\t    memory_order __m1, memory_order __m2) volatile\n+\t\t\t    memory_order __m1, memory_order __m2)\n       {\n \t__glibcxx_assert(__m2 != memory_order_release);\n \t__glibcxx_assert(__m2 != memory_order_acq_rel);\n@@ -342,15 +340,15 @@ namespace __atomic0\n \n       bool\n       compare_exchange_weak(__integral_type& __i1, __integral_type __i2,\n-\t\t\t    memory_order __m = memory_order_seq_cst) volatile\n+\t\t\t    memory_order __m = memory_order_seq_cst)\n       {\n \treturn compare_exchange_weak(__i1, __i2, __m,\n \t\t\t\t     __calculate_memory_order(__m));\n       }\n \n       bool\n       compare_exchange_strong(__integral_type& __i1, __integral_type __i2,\n-\t\t\t      memory_order __m1, memory_order __m2) volatile\n+\t\t\t      memory_order __m1, memory_order __m2)\n       {\n \t__glibcxx_assert(__m2 != memory_order_release);\n \t__glibcxx_assert(__m2 != memory_order_acq_rel);\n@@ -360,35 +358,30 @@ namespace __atomic0\n \n       bool\n       compare_exchange_strong(__integral_type& __i1, __integral_type __i2,\n-\t\t\t      memory_order __m = memory_order_seq_cst) volatile\n+\t\t\t      memory_order __m = memory_order_seq_cst)\n       {\n \treturn compare_exchange_strong(__i1, __i2, __m,\n \t\t\t\t       __calculate_memory_order(__m));\n       }\n \n       __integral_type\n-      fetch_add(__integral_type __i,\n-\t\tmemory_order __m = memory_order_seq_cst) volatile\n+      fetch_add(__integral_type __i, memory_order __m = memory_order_seq_cst)\n       { return _ATOMIC_MODIFY_(this, +=, __i, __m); }\n \n       __integral_type\n-      fetch_sub(__integral_type __i,\n-\t\tmemory_order __m = memory_order_seq_cst) volatile\n+      fetch_sub(__integral_type __i, memory_order __m = memory_order_seq_cst)\n       { return _ATOMIC_MODIFY_(this, -=, __i, __m); }\n \n       __integral_type\n-      fetch_and(__integral_type __i,\n-\t\tmemory_order __m = memory_order_seq_cst) volatile\n+      fetch_and(__integral_type __i, memory_order __m = memory_order_seq_cst)\n       { return _ATOMIC_MODIFY_(this, &=, __i, __m); }\n \n       __integral_type\n-      fetch_or(__integral_type __i,\n-\t       memory_order __m = memory_order_seq_cst) volatile\n+      fetch_or(__integral_type __i, memory_order __m = memory_order_seq_cst)\n       { return _ATOMIC_MODIFY_(this, |=, __i, __m); }\n \n       __integral_type\n-      fetch_xor(__integral_type __i,\n-\t\tmemory_order __m = memory_order_seq_cst) volatile\n+      fetch_xor(__integral_type __i, memory_order __m = memory_order_seq_cst)\n       { return _ATOMIC_MODIFY_(this, ^=, __i, __m); }\n     };\n \n@@ -404,52 +397,52 @@ namespace __atomic0\n     atomic_bool() = default;\n     ~atomic_bool() = default;\n     atomic_bool(const atomic_bool&) = delete;\n-    atomic_bool& operator=(const atomic_bool&) = delete;\n+    atomic_bool& operator=(const atomic_bool&) volatile = delete;\n \n     atomic_bool(bool __i) : _M_base(__i) { }\n \n     bool\n-    operator=(bool __i) // XXX volatile\n+    operator=(bool __i)\n     { return _M_base.operator=(__i); }\n \n-    operator bool() const volatile\n+    operator bool() const\n     { return _M_base.load(); }\n \n     bool\n-    is_lock_free() const volatile\n+    is_lock_free() const\n     { return _M_base.is_lock_free(); }\n \n     void\n-    store(bool __i, memory_order __m = memory_order_seq_cst) volatile\n+    store(bool __i, memory_order __m = memory_order_seq_cst)\n     { _M_base.store(__i, __m); }\n \n     bool\n-    load(memory_order __m = memory_order_seq_cst) const volatile\n+    load(memory_order __m = memory_order_seq_cst) const\n     { return _M_base.load(__m); }\n \n     bool\n-    exchange(bool __i, memory_order __m = memory_order_seq_cst) volatile\n+    exchange(bool __i, memory_order __m = memory_order_seq_cst)\n     { return _M_base.exchange(__i, __m); }\n \n     bool\n     compare_exchange_weak(bool& __i1, bool __i2, memory_order __m1,\n-\t\t\t  memory_order __m2) volatile\n+\t\t\t  memory_order __m2)\n     { return _M_base.compare_exchange_weak(__i1, __i2, __m1, __m2); }\n \n     bool\n     compare_exchange_weak(bool& __i1, bool __i2,\n-\t\t\t  memory_order __m = memory_order_seq_cst) volatile\n+\t\t\t  memory_order __m = memory_order_seq_cst)\n     { return _M_base.compare_exchange_weak(__i1, __i2, __m); }\n \n     bool\n     compare_exchange_strong(bool& __i1, bool __i2, memory_order __m1,\n-\t\t\t    memory_order __m2) volatile\n+\t\t\t    memory_order __m2)\n     { return _M_base.compare_exchange_strong(__i1, __i2, __m1, __m2); }\n \n \n     bool\n     compare_exchange_strong(bool& __i1, bool __i2,\n-\t\t\t    memory_order __m = memory_order_seq_cst) volatile\n+\t\t\t    memory_order __m = memory_order_seq_cst)\n     { return _M_base.compare_exchange_strong(__i1, __i2, __m); }\n   };\n "}, {"sha": "fa6c0d5b9d6a1c70c9b80b77c58157dba075a25a", "filename": "libstdc++-v3/include/bits/atomic_2.h", "status": "modified", "additions": 54, "deletions": 56, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_2.h?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -49,13 +49,13 @@ namespace __atomic2\n     atomic_flag() = default;\n     ~atomic_flag() = default;\n     atomic_flag(const atomic_flag&) = delete;\n-    atomic_flag& operator=(const atomic_flag&) = delete;\n+    atomic_flag& operator=(const atomic_flag&) volatile = delete;\n \n     // Conversion to ATOMIC_FLAG_INIT.\n     atomic_flag(bool __i): __atomic_flag_base({ __i }) { }\n \n     bool\n-    test_and_set(memory_order __m = memory_order_seq_cst) volatile\n+    test_and_set(memory_order __m = memory_order_seq_cst)\n     {\n       // Redundant synchronize if built-in for lock is a full barrier.\n       if (__m != memory_order_acquire && __m != memory_order_acq_rel)\n@@ -64,7 +64,7 @@ namespace __atomic2\n     }\n \n     void\n-    clear(memory_order __m = memory_order_seq_cst) volatile\n+    clear(memory_order __m = memory_order_seq_cst)\n     {\n       __glibcxx_assert(__m != memory_order_consume);\n       __glibcxx_assert(__m != memory_order_acquire);\n@@ -87,16 +87,16 @@ namespace __atomic2\n     atomic_address() = default;\n     ~atomic_address() = default;\n     atomic_address(const atomic_address&) = delete;\n-    atomic_address& operator=(const atomic_address&) = delete;\n+    atomic_address& operator=(const atomic_address&) volatile = delete;\n \n     atomic_address(void* __v) { _M_i = __v; }\n \n     bool\n-    is_lock_free() const volatile\n+    is_lock_free() const\n     { return true; }\n \n     void\n-    store(void* __v, memory_order __m = memory_order_seq_cst) volatile\n+    store(void* __v, memory_order __m = memory_order_seq_cst)\n     {\n       __glibcxx_assert(__m != memory_order_acquire);\n       __glibcxx_assert(__m != memory_order_acq_rel);\n@@ -114,7 +114,7 @@ namespace __atomic2\n     }\n \n     void*\n-    load(memory_order __m = memory_order_seq_cst) const volatile\n+    load(memory_order __m = memory_order_seq_cst) const\n     {\n       __glibcxx_assert(__m != memory_order_release);\n       __glibcxx_assert(__m != memory_order_acq_rel);\n@@ -126,28 +126,28 @@ namespace __atomic2\n     }\n \n     void*\n-    exchange(void* __v, memory_order __m = memory_order_seq_cst) volatile\n+    exchange(void* __v, memory_order __m = memory_order_seq_cst)\n     {\n       // XXX built-in assumes memory_order_acquire.\n       return __sync_lock_test_and_set(&_M_i, __v);\n     }\n \n     bool\n     compare_exchange_weak(void*& __v1, void* __v2, memory_order __m1,\n-\t\t\t  memory_order __m2) volatile\n+\t\t\t  memory_order __m2)\n     { return compare_exchange_strong(__v1, __v2, __m1, __m2); }\n \n     bool\n     compare_exchange_weak(void*& __v1, void* __v2,\n-\t\t\t  memory_order __m = memory_order_seq_cst) volatile\n+\t\t\t  memory_order __m = memory_order_seq_cst)\n     {\n       return compare_exchange_weak(__v1, __v2, __m,\n \t\t\t\t   __calculate_memory_order(__m));\n     }\n \n     bool\n     compare_exchange_strong(void*& __v1, void* __v2, memory_order __m1,\n-\t\t\t    memory_order __m2) volatile\n+\t\t\t    memory_order __m2)\n     {\n       __glibcxx_assert(__m2 != memory_order_release);\n       __glibcxx_assert(__m2 != memory_order_acq_rel);\n@@ -163,36 +163,36 @@ namespace __atomic2\n \n     bool\n     compare_exchange_strong(void*& __v1, void* __v2,\n-\t\t\t  memory_order __m = memory_order_seq_cst) volatile\n+\t\t\t  memory_order __m = memory_order_seq_cst)\n     {\n       return compare_exchange_strong(__v1, __v2, __m,\n \t\t\t\t     __calculate_memory_order(__m));\n     }\n \n     void*\n-    fetch_add(ptrdiff_t __d, memory_order __m = memory_order_seq_cst) volatile\n+    fetch_add(ptrdiff_t __d, memory_order __m = memory_order_seq_cst)\n     { return __sync_fetch_and_add(&_M_i, __d); }\n \n     void*\n-    fetch_sub(ptrdiff_t __d, memory_order __m = memory_order_seq_cst) volatile\n+    fetch_sub(ptrdiff_t __d, memory_order __m = memory_order_seq_cst)\n     { return __sync_fetch_and_sub(&_M_i, __d); }\n \n-    operator void*() const volatile\n+    operator void*() const\n     { return load(); }\n \n     void*\n-    operator=(void* __v) // XXX volatile\n+    operator=(void* __v)\n     {\n       store(__v);\n       return __v;\n     }\n \n     void*\n-    operator+=(ptrdiff_t __d) volatile\n+    operator+=(ptrdiff_t __d)\n     { return __sync_add_and_fetch(&_M_i, __d); }\n \n     void*\n-    operator-=(ptrdiff_t __d) volatile\n+    operator-=(ptrdiff_t __d)\n     { return __sync_sub_and_fetch(&_M_i, __d); }\n   };\n \n@@ -230,64 +230,63 @@ namespace __atomic2\n       __atomic_base() = default;\n       ~__atomic_base() = default;\n       __atomic_base(const __atomic_base&) = delete;\n-      __atomic_base& operator=(const __atomic_base&) = delete;\n+      __atomic_base& operator=(const __atomic_base&) volatile = delete;\n \n       // Requires __integral_type convertible to _M_base._M_i.\n       __atomic_base(__integral_type __i) { _M_i = __i; }\n \n-      operator __integral_type() const volatile\n+      operator __integral_type() const\n       { return load(); }\n \n       __integral_type\n-      operator=(__integral_type __i) // XXX volatile\n+      operator=(__integral_type __i)\n       {\n \tstore(__i);\n \treturn __i;\n       }\n \n       __integral_type\n-      operator++(int) volatile\n+      operator++(int)\n       { return fetch_add(1); }\n \n       __integral_type\n-      operator--(int) volatile\n+      operator--(int)\n       { return fetch_sub(1); }\n \n       __integral_type\n-      operator++() volatile\n+      operator++()\n       { return __sync_add_and_fetch(&_M_i, 1); }\n \n       __integral_type\n-      operator--() volatile\n+      operator--()\n       { return __sync_sub_and_fetch(&_M_i, 1); }\n \n       __integral_type\n-      operator+=(__integral_type __i) volatile\n+      operator+=(__integral_type __i)\n       { return __sync_add_and_fetch(&_M_i, __i); }\n \n       __integral_type\n-      operator-=(__integral_type __i) volatile\n+      operator-=(__integral_type __i)\n       { return __sync_sub_and_fetch(&_M_i, __i); }\n \n       __integral_type\n-      operator&=(__integral_type __i) volatile\n+      operator&=(__integral_type __i)\n       { return __sync_and_and_fetch(&_M_i, __i); }\n \n       __integral_type\n-      operator|=(__integral_type __i) volatile\n+      operator|=(__integral_type __i)\n       { return __sync_or_and_fetch(&_M_i, __i); }\n \n       __integral_type\n-      operator^=(__integral_type __i) volatile\n+      operator^=(__integral_type __i)\n       { return __sync_xor_and_fetch(&_M_i, __i); }\n \n       bool\n-      is_lock_free() const volatile\n+      is_lock_free() const\n       { return true; }\n \n       void\n-      store(__integral_type __i,\n-\t    memory_order __m = memory_order_seq_cst) volatile\n+      store(__integral_type __i, memory_order __m = memory_order_seq_cst)\n       {\n \t__glibcxx_assert(__m != memory_order_acquire);\n \t__glibcxx_assert(__m != memory_order_acq_rel);\n@@ -305,7 +304,7 @@ namespace __atomic2\n       }\n \n       __integral_type\n-      load(memory_order __m = memory_order_seq_cst) const volatile\n+      load(memory_order __m = memory_order_seq_cst) const \n       {\n \t__glibcxx_assert(__m != memory_order_release);\n \t__glibcxx_assert(__m != memory_order_acq_rel);\n@@ -317,29 +316,28 @@ namespace __atomic2\n       }\n \n       __integral_type\n-      exchange(__integral_type __i,\n-\t       memory_order __m = memory_order_seq_cst) volatile\n+      exchange(__integral_type __i, memory_order __m = memory_order_seq_cst)\n       {\n \t// XXX built-in assumes memory_order_acquire.\n \treturn __sync_lock_test_and_set(&_M_i, __i);\n       }\n \n       bool\n       compare_exchange_weak(__integral_type& __i1, __integral_type __i2,\n-\t\t\t    memory_order __m1, memory_order __m2) volatile\n+\t\t\t    memory_order __m1, memory_order __m2)\n       { return compare_exchange_strong(__i1, __i2, __m1, __m2); }\n \n       bool\n       compare_exchange_weak(__integral_type& __i1, __integral_type __i2,\n-\t\t\t    memory_order __m = memory_order_seq_cst) volatile\n+\t\t\t    memory_order __m = memory_order_seq_cst)\n       {\n \treturn compare_exchange_weak(__i1, __i2, __m,\n \t\t\t\t     __calculate_memory_order(__m));\n       }\n \n       bool\n       compare_exchange_strong(__integral_type& __i1, __integral_type __i2,\n-\t\t\t      memory_order __m1, memory_order __m2) volatile\n+\t\t\t      memory_order __m1, memory_order __m2) \n       {\n \t__glibcxx_assert(__m2 != memory_order_release);\n \t__glibcxx_assert(__m2 != memory_order_acq_rel);\n@@ -355,35 +353,35 @@ namespace __atomic2\n \n       bool\n       compare_exchange_strong(__integral_type& __i1, __integral_type __i2,\n-\t\t\t      memory_order __m = memory_order_seq_cst) volatile\n+\t\t\t      memory_order __m = memory_order_seq_cst)\n       {\n \treturn compare_exchange_strong(__i1, __i2, __m,\n \t\t\t\t       __calculate_memory_order(__m));\n       }\n \n       __integral_type\n       fetch_add(__integral_type __i,\n-\t\tmemory_order __m = memory_order_seq_cst) volatile\n+\t\tmemory_order __m = memory_order_seq_cst)\n       { return __sync_fetch_and_add(&_M_i, __i); }\n \n       __integral_type\n       fetch_sub(__integral_type __i,\n-\t\tmemory_order __m = memory_order_seq_cst) volatile\n+\t\tmemory_order __m = memory_order_seq_cst) \n       { return __sync_fetch_and_sub(&_M_i, __i); }\n \n       __integral_type\n       fetch_and(__integral_type __i,\n-\t\tmemory_order __m = memory_order_seq_cst) volatile\n+\t\tmemory_order __m = memory_order_seq_cst) \n       { return __sync_fetch_and_and(&_M_i, __i); }\n \n       __integral_type\n       fetch_or(__integral_type __i,\n-\t       memory_order __m = memory_order_seq_cst) volatile\n+\t       memory_order __m = memory_order_seq_cst) \n       { return __sync_fetch_and_or(&_M_i, __i); }\n \n       __integral_type\n       fetch_xor(__integral_type __i,\n-\t\tmemory_order __m = memory_order_seq_cst) volatile\n+\t\tmemory_order __m = memory_order_seq_cst)\n       { return __sync_fetch_and_xor(&_M_i, __i); }\n     };\n \n@@ -399,52 +397,52 @@ namespace __atomic2\n     atomic_bool() = default;\n     ~atomic_bool() = default;\n     atomic_bool(const atomic_bool&) = delete;\n-    atomic_bool& operator=(const atomic_bool&) = delete;\n+    atomic_bool& operator=(const atomic_bool&) volatile = delete;\n \n     atomic_bool(bool __i) : _M_base(__i) { }\n \n     bool\n-    operator=(bool __i) // XXX volatile\n+    operator=(bool __i)\n     { return _M_base.operator=(__i); }\n \n-    operator bool() const volatile\n+    operator bool() const \n     { return _M_base.load(); }\n \n     bool\n-    is_lock_free() const volatile\n+    is_lock_free() const\n     { return _M_base.is_lock_free(); }\n \n     void\n-    store(bool __i, memory_order __m = memory_order_seq_cst) volatile\n+    store(bool __i, memory_order __m = memory_order_seq_cst)\n     { _M_base.store(__i, __m); }\n \n     bool\n-    load(memory_order __m = memory_order_seq_cst) const volatile\n+    load(memory_order __m = memory_order_seq_cst) const\n     { return _M_base.load(__m); }\n \n     bool\n-    exchange(bool __i, memory_order __m = memory_order_seq_cst) volatile\n+    exchange(bool __i, memory_order __m = memory_order_seq_cst)\n     { return _M_base.exchange(__i, __m); }\n \n     bool\n     compare_exchange_weak(bool& __i1, bool __i2, memory_order __m1,\n-\t\t\t  memory_order __m2) volatile\n+\t\t\t  memory_order __m2)\n     { return _M_base.compare_exchange_weak(__i1, __i2, __m1, __m2); }\n \n     bool\n     compare_exchange_weak(bool& __i1, bool __i2,\n-\t\t\t  memory_order __m = memory_order_seq_cst) volatile\n+\t\t\t  memory_order __m = memory_order_seq_cst)\n     { return _M_base.compare_exchange_weak(__i1, __i2, __m); }\n \n     bool\n     compare_exchange_strong(bool& __i1, bool __i2, memory_order __m1,\n-\t\t\t    memory_order __m2) volatile\n+\t\t\t    memory_order __m2)\n     { return _M_base.compare_exchange_strong(__i1, __i2, __m1, __m2); }\n \n \n     bool\n     compare_exchange_strong(bool& __i1, bool __i2,\n-\t\t\t    memory_order __m = memory_order_seq_cst) volatile\n+\t\t\t    memory_order __m = memory_order_seq_cst)\n     { return _M_base.compare_exchange_strong(__i1, __i2, __m); }\n   };\n } // namespace __atomic2"}, {"sha": "454699f8175b142fa17e01df20edda324ab618a2", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "added", "additions": 224, "deletions": 0, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -0,0 +1,224 @@\n+// -*- C++ -*- compatibility header.\n+\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+/** @file bits/atomic_base.h\n+ *  This is a Standard C++ Library header.\n+ */\n+\n+#include <bits/c++config.h>\n+#include <stddef.h>\n+#include <stdbool.h> // XXX need to define bool w/o stdbool.h in tr1/cstdbool\n+\n+#ifndef _GLIBCXX_ATOMIC_BASE_H\n+#define _GLIBCXX_ATOMIC_BASE_H 1\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+_GLIBCXX_BEGIN_EXTERN_C\n+\n+  /**\n+   * @defgroup atomics Atomics\n+   *\n+   * Components for performing atomic operations.\n+   * @{\n+   */\n+\n+  /// Enumeration for memory_order\n+  typedef enum memory_order\n+    {\n+      memory_order_relaxed,\n+      memory_order_consume,\n+      memory_order_acquire,\n+      memory_order_release,\n+      memory_order_acq_rel,\n+      memory_order_seq_cst\n+    } memory_order;\n+\n+  // Base for atomic_flag.\n+  typedef struct __atomic_flag_base\n+  {\n+    bool _M_i;\n+  } __atomic_flag_base;\n+\n+#define ATOMIC_FLAG_INIT { false }\n+\n+  /// 29.2 Lock-free Property\n+#if defined(_GLIBCXX_ATOMIC_BUILTINS_1) && defined(_GLIBCXX_ATOMIC_BUILTINS_2) \\\n+  && defined(_GLIBCXX_ATOMIC_BUILTINS_4) && defined(_GLIBCXX_ATOMIC_BUILTINS_8)\n+# define _GLIBCXX_ATOMIC_PROPERTY 2\n+# define _GLIBCXX_ATOMIC_NAMESPACE __atomic2\n+#elif defined(_GLIBCXX_ATOMIC_BUILTINS_1)\n+# define _GLIBCXX_ATOMIC_PROPERTY 1\n+# define _GLIBCXX_ATOMIC_NAMESPACE __atomic1\n+#else\n+# define _GLIBCXX_ATOMIC_PROPERTY 0\n+# define _GLIBCXX_ATOMIC_NAMESPACE __atomic0\n+#endif\n+\n+#define ATOMIC_INTEGRAL_LOCK_FREE _GLIBCXX_ATOMIC_PROPERTY\n+#define ATOMIC_ADDRESS_LOCK_FREE _GLIBCXX_ATOMIC_PROPERTY\n+\n+  // Switch atomic integral base types based on C or C++.  In\n+  // addition, for \"C\" only provide type-generic macros for atomic\n+  // operations. (As C++ accomplishes the same thing with sets of\n+  // overloaded functions.\n+#ifdef __cplusplus\n+  inline namespace _GLIBCXX_ATOMIC_NAMESPACE { }\n+# include <bits/atomicfwd_cxx.h>\n+#else\n+# include <bits/atomicfwd_c.h>\n+#endif\n+\n+  // Typedefs for other atomic integral types.\n+  typedef atomic_schar \t\tatomic_int_least8_t;\n+  typedef atomic_uchar \t\tatomic_uint_least8_t;\n+  typedef atomic_short \t\tatomic_int_least16_t;\n+  typedef atomic_ushort \tatomic_uint_least16_t;\n+  typedef atomic_int \t\tatomic_int_least32_t;\n+  typedef atomic_uint \t\tatomic_uint_least32_t;\n+  typedef atomic_llong \t\tatomic_int_least64_t;\n+  typedef atomic_ullong \tatomic_uint_least64_t;\n+\n+  typedef atomic_schar \t\tatomic_int_fast8_t;\n+  typedef atomic_uchar \t\tatomic_uint_fast8_t;\n+  typedef atomic_short \t\tatomic_int_fast16_t;\n+  typedef atomic_ushort \tatomic_uint_fast16_t;\n+  typedef atomic_int \t\tatomic_int_fast32_t;\n+  typedef atomic_uint \t\tatomic_uint_fast32_t;\n+  typedef atomic_llong \t\tatomic_int_fast64_t;\n+  typedef atomic_ullong \tatomic_uint_fast64_t;\n+\n+  typedef atomic_long \t\tatomic_intptr_t;\n+  typedef atomic_ulong \t\tatomic_uintptr_t;\n+\n+  typedef atomic_long \t\tatomic_ssize_t;\n+  typedef atomic_ulong \t\tatomic_size_t;\n+\n+  typedef atomic_llong \t\tatomic_intmax_t;\n+  typedef atomic_ullong \tatomic_uintmax_t;\n+\n+  typedef atomic_long \t\tatomic_ptrdiff_t;\n+\n+  // Accessor functions for base atomic_flag type.\n+  bool\n+  atomic_flag_test_and_set_explicit(__atomic_flag_base*, memory_order)\n+  _GLIBCXX_NOTHROW;\n+\n+  inline bool\n+  atomic_flag_test_and_set(__atomic_flag_base* __a)\n+  { return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); }\n+\n+  void\n+  atomic_flag_clear_explicit(__atomic_flag_base*, memory_order)\n+  _GLIBCXX_NOTHROW;\n+\n+  inline void\n+  atomic_flag_clear(__atomic_flag_base* __a)\n+  { atomic_flag_clear_explicit(__a, memory_order_seq_cst); }\n+\n+  void\n+  __atomic_flag_wait_explicit(__atomic_flag_base*, memory_order)\n+  _GLIBCXX_NOTHROW;\n+\n+  _GLIBCXX_CONST __atomic_flag_base*\n+  __atomic_flag_for_address(const void* __z) _GLIBCXX_NOTHROW;\n+\n+  // Implementation specific defines.\n+#define _ATOMIC_LOAD_(__a, __x)\t\t\t\t\t\t\\\n+  ({__typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t\t\t\\\n+    atomic_flag* __g = __atomic_flag_for_address(__p); \t\t\t\\\n+    __atomic_flag_wait_explicit(__g, __x);\t\t\t\t\\\n+    __typeof__ _ATOMIC_MEMBER_ __r = *__p;\t\t\t\t\\\n+    atomic_flag_clear_explicit(__g, __x);\t\t       \t\t\\\n+    __r; })\n+\n+#define _ATOMIC_STORE_(__a, __m, __x)\t\t\t\t\t\\\n+  ({__typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t\t\t\\\n+    __typeof__(__m) __v = (__m);\t\t\t       \t\t\\\n+    atomic_flag* __g = __atomic_flag_for_address(__p); \t\t\t\\\n+    __atomic_flag_wait_explicit(__g, __x);\t\t\t\t\\\n+    *__p = __v;\t\t\t\t\t\t\t\t\\\n+    atomic_flag_clear_explicit(__g, __x);\t\t       \t\t\\\n+    __v; })\n+\n+#define _ATOMIC_MODIFY_(__a, __o, __m, __x)\t\t\t\t\\\n+  ({__typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t\t\t\\\n+    __typeof__(__m) __v = (__m);\t\t\t       \t\t\\\n+    atomic_flag* __g = __atomic_flag_for_address(__p); \t\t\t\\\n+    __atomic_flag_wait_explicit(__g, __x);\t\t\t\t\\\n+    __typeof__ _ATOMIC_MEMBER_ __r = *__p;\t\t\t\t\\\n+    *__p __o __v;\t\t\t\t\t       \t\t\\\n+    atomic_flag_clear_explicit(__g, __x);\t\t       \t\t\\\n+    __r; })\n+\n+#define _ATOMIC_CMPEXCHNG_(__a, __e, __m, __x)\t\t\t\t\\\n+  ({__typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t\t\t\\\n+    __typeof__(__e) __q = (__e);\t\t\t       \t\t\\\n+    __typeof__(__m) __v = (__m);\t\t\t       \t\t\\\n+    bool __r;\t\t\t\t\t\t       \t\t\\\n+    atomic_flag* __g = __atomic_flag_for_address(__p); \t\t\t\\\n+    __atomic_flag_wait_explicit(__g, __x);\t\t\t\t\\\n+    __typeof__ _ATOMIC_MEMBER_ __t__ = *__p;\t\t       \t\t\\\n+    if (__t__ == *__q) { *__p = __v; __r = true; }\t\t\t\\\n+    else { *__q = __t__; __r = false; }\t\t       \t\t\t\\\n+    atomic_flag_clear_explicit(__g, __x);\t\t       \t\t\\\n+    __r; })\n+\n+  // @} group atomics\n+\n+_GLIBCXX_END_EXTERN_C\n+_GLIBCXX_END_NAMESPACE\n+\n+// Inject into global namespace.\n+#ifdef __cplusplus\n+\n+#include <atomic>\n+\n+using std::memory_order;\n+using std::memory_order_relaxed;\n+using std::memory_order_consume;\n+using std::memory_order_acquire;\n+using std::memory_order_release;\n+using std::memory_order_acq_rel;\n+using std::memory_order_seq_cst;\n+using std::atomic_flag;\n+using std::atomic_bool;\n+using std::atomic_char;\n+using std::atomic_schar;\n+using std::atomic_uchar;\n+using std::atomic_short;\n+using std::atomic_ushort;\n+using std::atomic_int;\n+using std::atomic_uint;\n+using std::atomic_long;\n+using std::atomic_ulong;\n+using std::atomic_llong;\n+using std::atomic_ullong;\n+using std::atomic_wchar_t;\n+using std::atomic_char16_t;\n+using std::atomic_char32_t;\n+using std::atomic_address;\n+using std::atomic;\n+#endif\n+\n+#endif"}, {"sha": "1b24b494f1136970a88c034eddfe07694cf93664", "filename": "libstdc++-v3/include/c_compatibility/stdatomic.h", "status": "modified", "additions": 2, "deletions": 186, "changes": 188, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdatomic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdatomic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_compatibility%2Fstdatomic.h?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -26,196 +26,12 @@\n  *  This is a Standard C++ Library header.\n  */\n \n-#include <bits/c++config.h>\n-#include <stddef.h>\n-#include <stdbool.h> // XXX need to define bool w/o stdbool.h in tr1/cstdbool\n+#include <bits/atomic_base.h>\n \n #ifndef _GLIBCXX_STDATOMIC_H\n #define _GLIBCXX_STDATOMIC_H 1\n \n-_GLIBCXX_BEGIN_NAMESPACE(std)\n-_GLIBCXX_BEGIN_EXTERN_C\n-\n-  /**\n-   * @defgroup atomics Atomics\n-   *\n-   * Components for performing atomic operations.\n-   * @{\n-   */\n-\n-  /// Enumeration for memory_order\n-  typedef enum memory_order \n-    {\n-      memory_order_relaxed, \n-      memory_order_consume, \n-      memory_order_acquire, \n-      memory_order_release,\n-      memory_order_acq_rel, \n-      memory_order_seq_cst\n-    } memory_order;\n-\n-  // Base for atomic_flag.\n-  typedef struct __atomic_flag_base\n-  {\n-    bool _M_i;\n-  } __atomic_flag_base;\n-\n-#define ATOMIC_FLAG_INIT { false } \n-\n-  /// 29.2 Lock-free Property\n-#if defined(_GLIBCXX_ATOMIC_BUILTINS_1) && defined(_GLIBCXX_ATOMIC_BUILTINS_2) \\\n-  && defined(_GLIBCXX_ATOMIC_BUILTINS_4) && defined(_GLIBCXX_ATOMIC_BUILTINS_8)\n-# define _GLIBCXX_ATOMIC_PROPERTY 2\n-# define _GLIBCXX_ATOMIC_NAMESPACE __atomic2\n-#elif defined(_GLIBCXX_ATOMIC_BUILTINS_1)\n-# define _GLIBCXX_ATOMIC_PROPERTY 1\n-# define _GLIBCXX_ATOMIC_NAMESPACE __atomic1\n-#else\n-# define _GLIBCXX_ATOMIC_PROPERTY 0\n-# define _GLIBCXX_ATOMIC_NAMESPACE __atomic0\n-#endif\n-\n-#define ATOMIC_INTEGRAL_LOCK_FREE _GLIBCXX_ATOMIC_PROPERTY\n-#define ATOMIC_ADDRESS_LOCK_FREE _GLIBCXX_ATOMIC_PROPERTY\n-\n-  // Switch atomic integral base types based on C or C++.  In\n-  // addition, for \"C\" only provide type-generic macros for atomic\n-  // operations. (As C++ accomplishes the same thing with sets of\n-  // overloaded functions.\n-#ifdef __cplusplus\n-  inline namespace _GLIBCXX_ATOMIC_NAMESPACE { }\n-# include <bits/atomicfwd_cxx.h>\n-#else\n-# include <bits/atomicfwd_c.h>\n-#endif\n-  \n-  // Typedefs for other atomic integral types.\n-  typedef atomic_schar \t\tatomic_int_least8_t;\n-  typedef atomic_uchar \t\tatomic_uint_least8_t;\n-  typedef atomic_short \t\tatomic_int_least16_t;\n-  typedef atomic_ushort \tatomic_uint_least16_t;\n-  typedef atomic_int \t\tatomic_int_least32_t;\n-  typedef atomic_uint \t\tatomic_uint_least32_t;\n-  typedef atomic_llong \t\tatomic_int_least64_t;\n-  typedef atomic_ullong \tatomic_uint_least64_t;\n-\n-  typedef atomic_schar \t\tatomic_int_fast8_t;\n-  typedef atomic_uchar \t\tatomic_uint_fast8_t;\n-  typedef atomic_short \t\tatomic_int_fast16_t;\n-  typedef atomic_ushort \tatomic_uint_fast16_t;\n-  typedef atomic_int \t\tatomic_int_fast32_t;\n-  typedef atomic_uint \t\tatomic_uint_fast32_t;\n-  typedef atomic_llong \t\tatomic_int_fast64_t;\n-  typedef atomic_ullong \tatomic_uint_fast64_t;\n-\n-  typedef atomic_long \t\tatomic_intptr_t;\n-  typedef atomic_ulong \t\tatomic_uintptr_t;\n-\n-  typedef atomic_long \t\tatomic_ssize_t;\n-  typedef atomic_ulong \t\tatomic_size_t;\n-\n-  typedef atomic_llong \t\tatomic_intmax_t;\n-  typedef atomic_ullong \tatomic_uintmax_t;\n-\n-  typedef atomic_long \t\tatomic_ptrdiff_t;\n-\n-  // Accessor functions for base atomic_flag type.\n-  bool \n-  atomic_flag_test_and_set_explicit(volatile __atomic_flag_base*, memory_order) _GLIBCXX_NOTHROW;\n-\n-  inline bool \n-  atomic_flag_test_and_set(volatile __atomic_flag_base* __a)\n-  { return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); }\n-  \n-  void \n-  atomic_flag_clear_explicit(volatile __atomic_flag_base*, memory_order) _GLIBCXX_NOTHROW;\n-\n-  inline void \n-  atomic_flag_clear(volatile __atomic_flag_base* __a)\n-  { atomic_flag_clear_explicit(__a, memory_order_seq_cst); }\n-\n-  void \n-  __atomic_flag_wait_explicit(volatile __atomic_flag_base*, memory_order) _GLIBCXX_NOTHROW;\n-  \n-  _GLIBCXX_CONST volatile __atomic_flag_base* \n-  __atomic_flag_for_address(const volatile void* __z) _GLIBCXX_NOTHROW;\n-\n-  // Implementation specific defines.\n-#define _ATOMIC_LOAD_(__a, __x)\t\t\t\t\t\t\\\n-  ({ volatile __typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t\\\n-     volatile atomic_flag* __g = __atomic_flag_for_address(__p); \t\\\n-    __atomic_flag_wait_explicit(__g, __x);\t\t\t\t\\\n-    __typeof__ _ATOMIC_MEMBER_ __r = *__p;\t\t\t\t\\\n-    atomic_flag_clear_explicit(__g, __x);\t\t       \t\t\\\n-    __r; })\n-\n-#define _ATOMIC_STORE_(__a, __m, __x)\t\t\t\t\t\\\n-  ({ volatile __typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t\\\n-    __typeof__(__m) __v = (__m);\t\t\t       \t\t\\\n-    volatile atomic_flag* __g = __atomic_flag_for_address(__p); \t\\\n-    __atomic_flag_wait_explicit(__g, __x);\t\t\t\t\\\n-    *__p = __v;\t\t\t\t\t\t\t\t\\\n-    atomic_flag_clear_explicit(__g, __x);\t\t       \t\t\\\n-    __v; })\n-\n-#define _ATOMIC_MODIFY_(__a, __o, __m, __x)\t\t\t\t\\\n-  ({ volatile __typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t\\\n-    __typeof__(__m) __v = (__m);\t\t\t       \t\t\\\n-    volatile atomic_flag* __g = __atomic_flag_for_address(__p); \t\\\n-    __atomic_flag_wait_explicit(__g, __x);\t\t\t\t\\\n-    __typeof__ _ATOMIC_MEMBER_ __r = *__p;\t\t\t\t\\\n-    *__p __o __v;\t\t\t\t\t       \t\t\\\n-    atomic_flag_clear_explicit(__g, __x);\t\t       \t\t\\\n-    __r; })\n-\n-#define _ATOMIC_CMPEXCHNG_(__a, __e, __m, __x)\t\t\t\t\\\n-  ({ volatile __typeof__ _ATOMIC_MEMBER_* __p = &_ATOMIC_MEMBER_;\t\\\n-    __typeof__(__e) __q = (__e);\t\t\t       \t\t\\\n-    __typeof__(__m) __v = (__m);\t\t\t       \t\t\\\n-    bool __r;\t\t\t\t\t\t       \t\t\\\n-    volatile atomic_flag* __g = __atomic_flag_for_address(__p); \t\\\n-    __atomic_flag_wait_explicit(__g, __x);\t\t\t\t\\\n-    __typeof__ _ATOMIC_MEMBER_ __t__ = *__p;\t\t       \t\t\\\n-    if (__t__ == *__q) { *__p = __v; __r = true; }\t\t\t\\\n-    else { *__q = __t__; __r = false; }\t\t       \t\t\t\\\n-    atomic_flag_clear_explicit(__g, __x);\t\t       \t\t\\\n-    __r; })\n-\n-  // @} group atomics\n-\n-_GLIBCXX_END_EXTERN_C\n-_GLIBCXX_END_NAMESPACE\n-\n-// Inject into global namespace.\n-#ifdef __cplusplus\n-\n-#include <cstdatomic>\n-\n-using std::memory_order;\n-using std::memory_order_relaxed;\n-using std::memory_order_consume;\n-using std::memory_order_acquire;\n-using std::memory_order_release;\n-using std::memory_order_acq_rel;\n-using std::memory_order_seq_cst;\n-using std::atomic_flag;\n-using std::atomic_bool;\n-using std::atomic_char;\n-using std::atomic_schar;\n-using std::atomic_uchar;\n-using std::atomic_short;\n-using std::atomic_ushort;\n-using std::atomic_int;\n-using std::atomic_uint;\n-using std::atomic_long;\n-using std::atomic_ulong;\n-using std::atomic_llong;\n-using std::atomic_ullong;\n-using std::atomic_wchar_t;\n-using std::atomic_char16_t;\n-using std::atomic_char32_t;\n-using std::atomic_address;\n-using std::atomic;\n+#ifdef _GLIBCXX_NAMESPACE_C\n #endif\n \n #endif"}, {"sha": "c19c9384be0f9a17aa5d44ab009c27bd4499ca88", "filename": "libstdc++-v3/include/precompiled/stdc++.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fstdc%2B%2B.h?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -53,7 +53,6 @@\n #include <ccomplex>\n #include <cfenv>\n #include <cinttypes>\n-#include <cstdatomic>\n #include <cstdbool>\n #include <cstdint>\n #include <ctgmath>\n@@ -97,6 +96,7 @@\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n #include <array>\n+#include <atomic>\n #include <chrono>\n #include <condition_variable>\n #include <forward_list>"}, {"sha": "de75b433ee971541d114dac936d7874bdb436b68", "filename": "libstdc++-v3/include/std/atomic", "status": "renamed", "additions": 248, "deletions": 265, "changes": 513, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fatomic?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -23,29 +23,23 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file cstdatomic\n- *  This is a Standard C++ Library file.  You should @c \\#include this file\n- *  in your programs, rather than any of the \"*.h\" implementation files.\n- *\n- *  This is the C++ version of the Standard C Library header @c stdatomic.h,\n- *  and its contents are (mostly) the same as that header, but are all\n- *  contained in the namespace @c std (except for names which are defined\n- *  as macros in C).\n+/** @file atomic\n+ *  This is a Standard C++ Library header.\n  */\n \n // Based on \"C++ Atomic Types and Operations\" by Hans Boehm and Lawrence Crowl.\n // http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2427.html\n \n-#ifndef _GLIBCXX_STDATOMIC\n-#define _GLIBCXX_STDATOMIC 1\n+#ifndef _GLIBCXX_ATOMIC\n+#define _GLIBCXX_ATOMIC 1\n \n #pragma GCC system_header\n \n #ifndef __GXX_EXPERIMENTAL_CXX0X__\n # include <c++0x_warning.h>\n #endif\n \n-#include <stdatomic.h>\n+#include <bits/atomic_base.h>\n #include <cstddef>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n@@ -57,7 +51,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   /// kill_dependency\n   template<typename _Tp>\n-    inline _Tp \n+    inline _Tp\n     kill_dependency(_Tp __y)\n     {\n       _Tp ret(__y);\n@@ -76,10 +70,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   //\n   // Three nested namespaces for atomic implementation details.\n-  // \n+  //\n   // The nested namespace inlined into std:: is determined by the value\n   // of the _GLIBCXX_ATOMIC_PROPERTY macro and the resulting\n-  // ATOMIC_*_LOCK_FREE macros. See file stdatomic.h.\n+  // ATOMIC_*_LOCK_FREE macros. See file atomic_base.h.\n   //\n   // 0 == __atomic0 == Never lock-free\n   // 1 == __atomic1 == Best available, sometimes lock-free\n@@ -99,117 +93,115 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       atomic() = default;\n       ~atomic() = default;\n       atomic(const atomic&) = delete;\n-      atomic& operator=(const atomic&) = delete;\n+      atomic& operator=(const atomic&) volatile = delete;\n \n       atomic(_Tp __i) : _M_i(__i) { }\n \n-      operator _Tp() const volatile;\n+      operator _Tp() const;\n \n-      _Tp \n-      operator=(_Tp __i) volatile { store(__i); return __i; }\n+      _Tp\n+      operator=(_Tp __i) { store(__i); return __i; }\n \n-      bool \n+      bool\n       is_lock_free() const volatile;\n \n-      void \n+      void\n       store(_Tp, memory_order = memory_order_seq_cst) volatile;\n \n-      _Tp \n+      _Tp\n       load(memory_order = memory_order_seq_cst) const volatile;\n \n-      _Tp \n+      _Tp\n       exchange(_Tp __i, memory_order = memory_order_seq_cst) volatile;\n \n-      bool \n+      bool\n       compare_exchange_weak(_Tp&, _Tp, memory_order, memory_order) volatile;\n \n-      bool \n+      bool\n       compare_exchange_strong(_Tp&, _Tp, memory_order, memory_order) volatile;\n \n-      bool \n-      compare_exchange_weak(_Tp&, _Tp, \n+      bool\n+      compare_exchange_weak(_Tp&, _Tp,\n \t\t\t    memory_order = memory_order_seq_cst) volatile;\n \n-      bool \n-      compare_exchange_strong(_Tp&, _Tp, \n+      bool\n+      compare_exchange_strong(_Tp&, _Tp,\n \t\t\t      memory_order = memory_order_seq_cst) volatile;\n     };\n \n \n   /// Partial specialization for pointer types.\n-  template<typename _Tp> \n+  template<typename _Tp>\n     struct atomic<_Tp*> : atomic_address\n     {\n       atomic() = default;\n       ~atomic() = default;\n       atomic(const atomic&) = delete;\n-      atomic& operator=(const atomic&) = delete;\n+      atomic& operator=(const atomic&) volatile = delete;\n \n       atomic(_Tp* __v) : atomic_address(__v) { }\n \n-      void \n-      store(_Tp*, memory_order = memory_order_seq_cst) volatile;\n+      void\n+      store(_Tp*, memory_order = memory_order_seq_cst);\n \n-      _Tp* \n-      load(memory_order = memory_order_seq_cst) const volatile;\n+      _Tp*\n+      load(memory_order = memory_order_seq_cst) const;\n \n-      _Tp* \n-      exchange(_Tp*, memory_order = memory_order_seq_cst) volatile;\n+      _Tp*\n+      exchange(_Tp*, memory_order = memory_order_seq_cst);\n \n-      bool \n-      compare_exchange_weak(_Tp*&, _Tp*, memory_order, memory_order) volatile;\n+      bool\n+      compare_exchange_weak(_Tp*&, _Tp*, memory_order, memory_order);\n \n-      bool \n-      compare_exchange_strong(_Tp*&, _Tp*, memory_order, memory_order) volatile;\n+      bool\n+      compare_exchange_strong(_Tp*&, _Tp*, memory_order, memory_order);\n \n-      bool \n-      compare_exchange_weak(_Tp*&, _Tp*, \n-\t\t\t    memory_order = memory_order_seq_cst) volatile;\n+      bool\n+      compare_exchange_weak(_Tp*&, _Tp*, memory_order = memory_order_seq_cst);\n \n-      bool \n-      compare_exchange_strong(_Tp*&, _Tp*, \n-\t\t\t      memory_order = memory_order_seq_cst) volatile;\n+      bool\n+      compare_exchange_strong(_Tp*&, _Tp*, memory_order = memory_order_seq_cst);\n \n-      _Tp* \n-      fetch_add(ptrdiff_t, memory_order = memory_order_seq_cst) volatile;\n+      _Tp*\n+      fetch_add(ptrdiff_t, memory_order = memory_order_seq_cst);\n \n-      _Tp* \n-      fetch_sub(ptrdiff_t, memory_order = memory_order_seq_cst) volatile;\n+      _Tp*\n+      fetch_sub(ptrdiff_t, memory_order = memory_order_seq_cst);\n \n-      operator _Tp*() const volatile\n+      operator _Tp*() const\n       { return load(); }\n \n-      _Tp* \n-      operator=(_Tp* __v) volatile \n-      { \n-\tstore(__v); \n-\treturn __v; \n+      _Tp*\n+      operator=(_Tp* __v)\n+      {\n+\tstore(__v);\n+\treturn __v;\n       }\n \n-      _Tp* \n-      operator++(int) volatile { return fetch_add(1); }\n+      _Tp*\n+      operator++(int) { return fetch_add(1); }\n \n-      _Tp* \n-      operator--(int) volatile { return fetch_sub(1); }\n+      _Tp*\n+      operator--(int) { return fetch_sub(1); }\n \n-      _Tp* \n-      operator++() volatile { return fetch_add(1) + 1; }\n+      _Tp*\n+      operator++() { return fetch_add(1) + 1; }\n \n-      _Tp* \n-      operator--() volatile { return fetch_sub(1) - 1; }\n+      _Tp*\n+      operator--() { return fetch_sub(1) - 1; }\n \n-      _Tp* \n-      operator+=(ptrdiff_t __d) volatile \n+      _Tp*\n+      operator+=(ptrdiff_t __d)\n       { return fetch_add(__d) + __d; }\n \n-      _Tp* \n-      operator-=(ptrdiff_t __d) volatile \n+      _Tp*\n+      operator-=(ptrdiff_t __d)\n       { return fetch_sub(__d) - __d; }\n     };\n \n \n   /// Explicit specialization for void*\n-  template<> \n+  template<>\n     struct atomic<void*> : public atomic_address\n     {\n       typedef void* \t\t\t__integral_type;\n@@ -218,7 +210,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       atomic() = default;\n       ~atomic() = default;\n       atomic(const atomic&) = delete;\n-      atomic& operator=(const atomic&) = delete;\n+      atomic& operator=(const atomic&) volatile = delete;\n \n       atomic(__integral_type __i) : __base_type(__i) { }\n \n@@ -227,7 +219,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// Explicit specialization for bool.\n-  template<> \n+  template<>\n     struct atomic<bool> : public atomic_bool\n     {\n       typedef bool \t\t\t__integral_type;\n@@ -236,7 +228,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       atomic() = default;\n       ~atomic() = default;\n       atomic(const atomic&) = delete;\n-      atomic& operator=(const atomic&) = delete;\n+      atomic& operator=(const atomic&) volatile = delete;\n \n       atomic(__integral_type __i) : __base_type(__i) { }\n \n@@ -245,7 +237,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// Explicit specialization for char.\n-  template<> \n+  template<>\n     struct atomic<char> : public atomic_char\n     {\n       typedef char \t\t\t__integral_type;\n@@ -254,7 +246,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       atomic() = default;\n       ~atomic() = default;\n       atomic(const atomic&) = delete;\n-      atomic& operator=(const atomic&) = delete;\n+      atomic& operator=(const atomic&) volatile = delete;\n \n       atomic(__integral_type __i) : __base_type(__i) { }\n \n@@ -263,16 +255,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// Explicit specialization for signed char.\n-  template<> \n+  template<>\n     struct atomic<signed char> : public atomic_schar\n-    { \n+    {\n       typedef signed char \t\t__integral_type;\n       typedef atomic_schar \t\t__base_type;\n \n       atomic() = default;\n       ~atomic() = default;\n       atomic(const atomic&) = delete;\n-      atomic& operator=(const atomic&) = delete;\n+      atomic& operator=(const atomic&) volatile = delete;\n \n       atomic(__integral_type __i) : __base_type(__i) { }\n \n@@ -281,7 +273,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// Explicit specialization for unsigned char.\n-  template<> \n+  template<>\n     struct atomic<unsigned char> : public atomic_uchar\n     {\n       typedef unsigned char \t\t__integral_type;\n@@ -290,7 +282,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       atomic() = default;\n       ~atomic() = default;\n       atomic(const atomic&) = delete;\n-      atomic& operator=(const atomic&) = delete;\n+      atomic& operator=(const atomic&) volatile = delete;\n \n       atomic(__integral_type __i) : __base_type(__i) { }\n \n@@ -299,7 +291,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// Explicit specialization for short.\n-  template<> \n+  template<>\n     struct atomic<short> : public atomic_short\n     {\n       typedef short \t\t\t__integral_type;\n@@ -308,7 +300,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       atomic() = default;\n       ~atomic() = default;\n       atomic(const atomic&) = delete;\n-      atomic& operator=(const atomic&) = delete;\n+      atomic& operator=(const atomic&) volatile = delete;\n \n       atomic(__integral_type __i) : __base_type(__i) { }\n \n@@ -317,7 +309,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// Explicit specialization for unsigned short.\n-  template<> \n+  template<>\n     struct atomic<unsigned short> : public atomic_ushort\n     {\n       typedef unsigned short \t      \t__integral_type;\n@@ -326,7 +318,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       atomic() = default;\n       ~atomic() = default;\n       atomic(const atomic&) = delete;\n-      atomic& operator=(const atomic&) = delete;\n+      atomic& operator=(const atomic&) volatile = delete;\n \n       atomic(__integral_type __i) : __base_type(__i) { }\n \n@@ -335,7 +327,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// Explicit specialization for int.\n-  template<> \n+  template<>\n     struct atomic<int> : atomic_int\n     {\n       typedef int \t\t\t__integral_type;\n@@ -344,7 +336,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       atomic() = default;\n       ~atomic() = default;\n       atomic(const atomic&) = delete;\n-      atomic& operator=(const atomic&) = delete;\n+      atomic& operator=(const atomic&) volatile = delete;\n \n       atomic(__integral_type __i) : __base_type(__i) { }\n \n@@ -353,7 +345,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// Explicit specialization for unsigned int.\n-  template<> \n+  template<>\n     struct atomic<unsigned int> : public atomic_uint\n     {\n       typedef unsigned int\t\t__integral_type;\n@@ -362,7 +354,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       atomic() = default;\n       ~atomic() = default;\n       atomic(const atomic&) = delete;\n-      atomic& operator=(const atomic&) = delete;\n+      atomic& operator=(const atomic&) volatile = delete;\n \n       atomic(__integral_type __i) : __base_type(__i) { }\n \n@@ -371,7 +363,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// Explicit specialization for long.\n-  template<> \n+  template<>\n     struct atomic<long> : public atomic_long\n     {\n       typedef long \t\t\t__integral_type;\n@@ -380,7 +372,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       atomic() = default;\n       ~atomic() = default;\n       atomic(const atomic&) = delete;\n-      atomic& operator=(const atomic&) = delete;\n+      atomic& operator=(const atomic&) volatile = delete;\n \n       atomic(__integral_type __i) : __base_type(__i) { }\n \n@@ -389,7 +381,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// Explicit specialization for unsigned long.\n-  template<> \n+  template<>\n     struct atomic<unsigned long> : public atomic_ulong\n     {\n       typedef unsigned long \t\t__integral_type;\n@@ -398,7 +390,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       atomic() = default;\n       ~atomic() = default;\n       atomic(const atomic&) = delete;\n-      atomic& operator=(const atomic&) = delete;\n+      atomic& operator=(const atomic&) volatile = delete;\n \n       atomic(__integral_type __i) : __base_type(__i) { }\n \n@@ -407,7 +399,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// Explicit specialization for long long.\n-  template<> \n+  template<>\n     struct atomic<long long> : public atomic_llong\n     {\n       typedef long long \t\t__integral_type;\n@@ -416,7 +408,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       atomic() = default;\n       ~atomic() = default;\n       atomic(const atomic&) = delete;\n-      atomic& operator=(const atomic&) = delete;\n+      atomic& operator=(const atomic&) volatile = delete;\n \n       atomic(__integral_type __i) : __base_type(__i) { }\n \n@@ -425,7 +417,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// Explicit specialization for unsigned long long.\n-  template<> \n+  template<>\n     struct atomic<unsigned long long> : public atomic_ullong\n     {\n       typedef unsigned long long       \t__integral_type;\n@@ -434,7 +426,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       atomic() = default;\n       ~atomic() = default;\n       atomic(const atomic&) = delete;\n-      atomic& operator=(const atomic&) = delete;\n+      atomic& operator=(const atomic&) volatile = delete;\n \n       atomic(__integral_type __i) : __base_type(__i) { }\n \n@@ -443,7 +435,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// Explicit specialization for wchar_t.\n-  template<> \n+  template<>\n     struct atomic<wchar_t> : public atomic_wchar_t\n     {\n       typedef wchar_t \t\t\t__integral_type;\n@@ -452,7 +444,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       atomic() = default;\n       ~atomic() = default;\n       atomic(const atomic&) = delete;\n-      atomic& operator=(const atomic&) = delete;\n+      atomic& operator=(const atomic&) volatile = delete;\n \n       atomic(__integral_type __i) : __base_type(__i) { }\n \n@@ -461,7 +453,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// Explicit specialization for char16_t.\n-  template<> \n+  template<>\n     struct atomic<char16_t> : public atomic_char16_t\n     {\n       typedef char16_t \t\t\t__integral_type;\n@@ -470,7 +462,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       atomic() = default;\n       ~atomic() = default;\n       atomic(const atomic&) = delete;\n-      atomic& operator=(const atomic&) = delete;\n+      atomic& operator=(const atomic&) volatile = delete;\n \n       atomic(__integral_type __i) : __base_type(__i) { }\n \n@@ -479,7 +471,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     };\n \n   /// Explicit specialization for char32_t.\n-  template<> \n+  template<>\n     struct atomic<char32_t> : public atomic_char32_t\n     {\n       typedef char32_t \t\t\t__integral_type;\n@@ -488,7 +480,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       atomic() = default;\n       ~atomic() = default;\n       atomic(const atomic&) = delete;\n-      atomic& operator=(const atomic&) = delete;\n+      atomic& operator=(const atomic&) volatile = delete;\n \n       atomic(__integral_type __i) : __base_type(__i) { }\n \n@@ -498,212 +490,207 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n \n   template<typename _Tp>\n-    _Tp* \n-    atomic<_Tp*>::load(memory_order __m) const volatile\n+    _Tp*\n+    atomic<_Tp*>::load(memory_order __m) const\n     { return static_cast<_Tp*>(atomic_address::load(__m)); }\n \n   template<typename _Tp>\n-    _Tp* \n-    atomic<_Tp*>::exchange(_Tp* __v, memory_order __m) volatile\n+    _Tp*\n+    atomic<_Tp*>::exchange(_Tp* __v, memory_order __m)\n     { return static_cast<_Tp*>(atomic_address::exchange(__v, __m)); }\n \n   template<typename _Tp>\n-    bool \n-    atomic<_Tp*>::compare_exchange_weak(_Tp*& __r, _Tp* __v, memory_order __m1, \n-\t\t\t\t\tmemory_order __m2) volatile\n-    { \n+    bool\n+    atomic<_Tp*>::compare_exchange_weak(_Tp*& __r, _Tp* __v, memory_order __m1,\n+\t\t\t\t\tmemory_order __m2)\n+    {\n       void** __vr = reinterpret_cast<void**>(&__r);\n       void* __vv = static_cast<void*>(__v);\n-      return atomic_address::compare_exchange_weak(*__vr, __vv, __m1, __m2); \n+      return atomic_address::compare_exchange_weak(*__vr, __vv, __m1, __m2);\n     }\n \n   template<typename _Tp>\n-    bool \n-    atomic<_Tp*>::compare_exchange_strong(_Tp*& __r, _Tp* __v, \n+    bool\n+    atomic<_Tp*>::compare_exchange_strong(_Tp*& __r, _Tp* __v,\n \t\t\t\t\t  memory_order __m1,\n-\t\t\t\t\t  memory_order __m2) volatile\n-    { \n+\t\t\t\t\t  memory_order __m2)\n+    {\n       void** __vr = reinterpret_cast<void**>(&__r);\n       void* __vv = static_cast<void*>(__v);\n-      return atomic_address::compare_exchange_strong(*__vr, __vv, __m1, __m2); \n+      return atomic_address::compare_exchange_strong(*__vr, __vv, __m1, __m2);\n     }\n \n   template<typename _Tp>\n-    bool \n+    bool\n     atomic<_Tp*>::compare_exchange_weak(_Tp*& __r, _Tp* __v,\n-\t\t\t\t\tmemory_order __m) volatile\n-    { \n-      return compare_exchange_weak(__r, __v, __m, \n+\t\t\t\t\tmemory_order __m)\n+    {\n+      return compare_exchange_weak(__r, __v, __m,\n \t\t\t\t   __calculate_memory_order(__m));\n     }\n \n   template<typename _Tp>\n-    bool \n+    bool\n     atomic<_Tp*>::compare_exchange_strong(_Tp*& __r, _Tp* __v,\n-\t\t\t\t\tmemory_order __m) volatile\n-    { \n+\t\t\t\t\tmemory_order __m)\n+    {\n       return compare_exchange_strong(__r, __v, __m,\n \t\t\t\t     __calculate_memory_order(__m));\n     }\n \n   template<typename _Tp>\n-    _Tp* \n-    atomic<_Tp*>::fetch_add(ptrdiff_t __d, memory_order __m) volatile\n-    { \n+    _Tp*\n+    atomic<_Tp*>::fetch_add(ptrdiff_t __d, memory_order __m)\n+    {\n       void* __p = atomic_fetch_add_explicit(this, sizeof(_Tp) * __d, __m);\n       return static_cast<_Tp*>(__p);\n     }\n \n   template<typename _Tp>\n-    _Tp* \n-    atomic<_Tp*>::fetch_sub(ptrdiff_t __d, memory_order __m) volatile\n-    { \n-      void* __p = atomic_fetch_sub_explicit(this, sizeof(_Tp) * __d, __m); \n-      return static_cast<_Tp*>(__p);    \n+    _Tp*\n+    atomic<_Tp*>::fetch_sub(ptrdiff_t __d, memory_order __m)\n+    {\n+      void* __p = atomic_fetch_sub_explicit(this, sizeof(_Tp) * __d, __m);\n+      return static_cast<_Tp*>(__p);\n     }\n \n   // Convenience function definitions, atomic_flag.\n-  inline bool \n-  atomic_flag_test_and_set_explicit(volatile atomic_flag* __a, memory_order __m)\n+  inline bool\n+  atomic_flag_test_and_set_explicit(atomic_flag* __a, memory_order __m)\n   { return __a->test_and_set(__m); }\n \n-  inline void \n-  atomic_flag_clear_explicit(volatile atomic_flag* __a, memory_order __m)\n+  inline void\n+  atomic_flag_clear_explicit(atomic_flag* __a, memory_order __m)\n   { return __a->clear(__m); }\n \n \n   // Convenience function definitions, atomic_address.\n-  inline bool \n-  atomic_is_lock_free(const volatile atomic_address* __a)\n+  inline bool\n+  atomic_is_lock_free(const atomic_address* __a)\n   { return __a->is_lock_free(); }\n \n-  inline void \n-  atomic_store(volatile atomic_address* __a, void* __v)\n+  inline void\n+  atomic_store(atomic_address* __a, void* __v)\n   { __a->store(__v); }\n \n-  inline void \n-  atomic_store_explicit(volatile atomic_address* __a, void* __v, \n-\t\t\tmemory_order __m)\n+  inline void\n+  atomic_store_explicit(atomic_address* __a, void* __v, memory_order __m)\n   { __a->store(__v, __m); }\n \n-  inline void* \n-  atomic_load(const volatile atomic_address* __a)\n+  inline void*\n+  atomic_load(const atomic_address* __a)\n   { return __a->load(); }\n \n-  inline void* \n-  atomic_load_explicit(const volatile atomic_address* __a, memory_order __m)\n+  inline void*\n+  atomic_load_explicit(const atomic_address* __a, memory_order __m)\n   { return __a->load(__m); }\n \n-  inline void* \n-  atomic_exchange(volatile atomic_address* __a, void* __v)\n+  inline void*\n+  atomic_exchange(atomic_address* __a, void* __v)\n   { return __a->exchange(__v); }\n \n-  inline void* \n-  atomic_exchange_explicit(volatile atomic_address* __a, void* __v, \n-\t\t\t   memory_order __m)\n+  inline void*\n+  atomic_exchange_explicit(atomic_address* __a, void* __v, memory_order __m)\n   { return __a->exchange(__v, __m); }\n \n-  inline bool \n-  atomic_compare_exchange_weak(volatile atomic_address* __a, \n-\t\t\t       void** __v1, void* __v2)\n-  { \n-    return __a->compare_exchange_weak(*__v1, __v2, memory_order_seq_cst, \n-\t\t\t\t      memory_order_seq_cst); \n+  inline bool\n+  atomic_compare_exchange_weak(atomic_address* __a, void** __v1, void* __v2)\n+  {\n+    return __a->compare_exchange_weak(*__v1, __v2, memory_order_seq_cst,\n+\t\t\t\t      memory_order_seq_cst);\n   }\n \n-  inline bool \n-  atomic_compare_exchange_strong(volatile atomic_address* __a, \n+  inline bool\n+  atomic_compare_exchange_strong(atomic_address* __a,\n \t\t\t       void** __v1, void* __v2)\n-  { \n-    return __a->compare_exchange_strong(*__v1, __v2, memory_order_seq_cst, \n-\t\t\t\t      memory_order_seq_cst); \n+  {\n+    return __a->compare_exchange_strong(*__v1, __v2, memory_order_seq_cst,\n+\t\t\t\t      memory_order_seq_cst);\n   }\n \n-  inline bool \n-  atomic_compare_exchange_weak_explicit(volatile atomic_address* __a, \n-\t\t\t\t\tvoid** __v1, void* __v2, \n+  inline bool\n+  atomic_compare_exchange_weak_explicit(atomic_address* __a,\n+\t\t\t\t\tvoid** __v1, void* __v2,\n \t\t\t\t\tmemory_order __m1, memory_order __m2)\n   { return __a->compare_exchange_weak(*__v1, __v2, __m1, __m2); }\n \n-  inline bool \n-  atomic_compare_exchange_strong_explicit(volatile atomic_address* __a, \n-\t\t\t\t\tvoid** __v1, void* __v2, \n-\t\t\t\t\tmemory_order __m1, memory_order __m2)\n+  inline bool\n+  atomic_compare_exchange_strong_explicit(atomic_address* __a,\n+\t\t\t\t\t  void** __v1, void* __v2,\n+\t\t\t\t\t  memory_order __m1, memory_order __m2)\n   { return __a->compare_exchange_strong(*__v1, __v2, __m1, __m2); }\n \n-  inline void* \n-  atomic_fetch_add_explicit(volatile atomic_address* __a, ptrdiff_t __d, \n+  inline void*\n+  atomic_fetch_add_explicit(atomic_address* __a, ptrdiff_t __d,\n \t\t\t    memory_order __m)\n   { return __a->fetch_add(__d, __m); }\n \n-  inline void* \n-  atomic_fetch_add(volatile atomic_address* __a, ptrdiff_t __d)\n+  inline void*\n+  atomic_fetch_add(atomic_address* __a, ptrdiff_t __d)\n   { return __a->fetch_add(__d); }\n \n-  inline void* \n-  atomic_fetch_sub_explicit(volatile atomic_address* __a, ptrdiff_t __d, \n+  inline void*\n+  atomic_fetch_sub_explicit(atomic_address* __a, ptrdiff_t __d,\n \t\t\t    memory_order __m)\n   { return __a->fetch_sub(__d, __m); }\n \n-  inline void* \n-  atomic_fetch_sub(volatile atomic_address* __a, ptrdiff_t __d)\n+  inline void*\n+  atomic_fetch_sub(atomic_address* __a, ptrdiff_t __d)\n   { return __a->fetch_sub(__d); }\n \n \n   // Convenience function definitions, atomic_bool.\n-  inline bool \n-  atomic_is_lock_free(const volatile atomic_bool* __a)\n+  inline bool\n+  atomic_is_lock_free(const atomic_bool* __a)\n   { return __a->is_lock_free(); }\n \n-  inline void \n-  atomic_store(volatile atomic_bool* __a, bool __i)\n+  inline void\n+  atomic_store(atomic_bool* __a, bool __i)\n   { __a->store(__i); }\n \n-  inline void \n-  atomic_store_explicit(volatile atomic_bool* __a, bool __i, memory_order __m)\n+  inline void\n+  atomic_store_explicit(atomic_bool* __a, bool __i, memory_order __m)\n   { __a->store(__i, __m); }\n \n-  inline bool \n-  atomic_load(const volatile atomic_bool* __a)\n+  inline bool\n+  atomic_load(const atomic_bool* __a)\n   { return __a->load(); }\n \n-  inline bool \n-  atomic_load_explicit(const volatile atomic_bool* __a, memory_order __m)\n+  inline bool\n+  atomic_load_explicit(const atomic_bool* __a, memory_order __m)\n   { return __a->load(__m); }\n \n-  inline bool \n-  atomic_exchange(volatile atomic_bool* __a, bool __i)\n+  inline bool\n+  atomic_exchange(atomic_bool* __a, bool __i)\n   { return __a->exchange(__i); }\n \n-  inline bool \n-  atomic_exchange_explicit(volatile atomic_bool* __a, bool __i, \n-\t\t\t   memory_order __m)\n+  inline bool\n+  atomic_exchange_explicit(atomic_bool* __a, bool __i, memory_order __m)\n   { return __a->exchange(__i, __m); }\n \n-  inline bool \n-  atomic_compare_exchange_weak(volatile atomic_bool* __a, bool* __i1, bool __i2)\n-  { \n-    return __a->compare_exchange_weak(*__i1, __i2, memory_order_seq_cst, \n-\t\t\t\t      memory_order_seq_cst); \n+  inline bool\n+  atomic_compare_exchange_weak(atomic_bool* __a, bool* __i1, bool __i2)\n+  {\n+    return __a->compare_exchange_weak(*__i1, __i2, memory_order_seq_cst,\n+\t\t\t\t      memory_order_seq_cst);\n   }\n \n-  inline bool \n-  atomic_compare_exchange_strong(volatile atomic_bool* __a, \n-\t\t\t\t bool* __i1, bool __i2)\n-  { \n-    return __a->compare_exchange_strong(*__i1, __i2, memory_order_seq_cst, \n-\t\t\t\t\tmemory_order_seq_cst); \n+  inline bool\n+  atomic_compare_exchange_strong(atomic_bool* __a, bool* __i1, bool __i2)\n+  {\n+    return __a->compare_exchange_strong(*__i1, __i2, memory_order_seq_cst,\n+\t\t\t\t\tmemory_order_seq_cst);\n   }\n \n-  inline bool \n-  atomic_compare_exchange_weak_explicit(volatile atomic_bool* __a, bool* __i1, \n-\t\t\t\t\tbool __i2, memory_order __m1, \n+  inline bool\n+  atomic_compare_exchange_weak_explicit(atomic_bool* __a, bool* __i1,\n+\t\t\t\t\tbool __i2, memory_order __m1,\n \t\t\t\t\tmemory_order __m2)\n   { return __a->compare_exchange_weak(*__i1, __i2, __m1, __m2); }\n \n-  inline bool \n-  atomic_compare_exchange_strong_explicit(volatile atomic_bool* __a, \n-\t\t\t\t\t  bool* __i1, bool __i2, \n+  inline bool\n+  atomic_compare_exchange_strong_explicit(atomic_bool* __a,\n+\t\t\t\t\t  bool* __i1, bool __i2,\n \t\t\t\t\t  memory_order __m1, memory_order __m2)\n   { return __a->compare_exchange_strong(*__i1, __i2, __m1, __m2); }\n \n@@ -712,137 +699,133 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   // Free standing functions. Template argument should be constricted\n   // to intergral types as specified in the standard.\n   template<typename _ITp>\n-    inline void \n-    atomic_store_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i, \n-\t\t\t  memory_order __m)\n+    inline void\n+    atomic_store_explicit(__atomic_base<_ITp>* __a, _ITp __i, memory_order __m)\n     { __a->store(__i, __m); }\n \n   template<typename _ITp>\n     inline _ITp\n-    atomic_load_explicit(const volatile __atomic_base<_ITp>* __a, \n-\t\t\t memory_order __m)\n-    { return __a->load(__m); } \n+    atomic_load_explicit(const __atomic_base<_ITp>* __a, memory_order __m)\n+    { return __a->load(__m); }\n \n   template<typename _ITp>\n-    inline _ITp \n-    atomic_exchange_explicit(volatile __atomic_base<_ITp>* __a, \n-\t\t\t     _ITp __i, memory_order __m)\n-    { return __a->exchange(__i, __m); } \n+    inline _ITp\n+    atomic_exchange_explicit(__atomic_base<_ITp>* __a, _ITp __i,\n+\t\t\t     memory_order __m)\n+    { return __a->exchange(__i, __m); }\n \n   template<typename _ITp>\n-    inline bool \n-    atomic_compare_exchange_weak_explicit(volatile __atomic_base<_ITp>* __a, \n-\t\t\t\t\t  _ITp* __i1, _ITp __i2, \n+    inline bool\n+    atomic_compare_exchange_weak_explicit(__atomic_base<_ITp>* __a,\n+\t\t\t\t\t  _ITp* __i1, _ITp __i2,\n \t\t\t\t\t  memory_order __m1, memory_order __m2)\n     { return __a->compare_exchange_weak(*__i1, __i2, __m1, __m2); }\n \n   template<typename _ITp>\n-    inline bool \n-    atomic_compare_exchange_strong_explicit(volatile __atomic_base<_ITp>* __a, \n-\t\t\t\t\t    _ITp* __i1, _ITp __i2, \n-\t\t\t\t\t    memory_order __m1, \n+    inline bool\n+    atomic_compare_exchange_strong_explicit(__atomic_base<_ITp>* __a,\n+\t\t\t\t\t    _ITp* __i1, _ITp __i2,\n+\t\t\t\t\t    memory_order __m1,\n \t\t\t\t\t    memory_order __m2)\n     { return __a->compare_exchange_strong(*__i1, __i2, __m1, __m2); }\n \n   template<typename _ITp>\n-    inline _ITp \n-    atomic_fetch_add_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i, \n+    inline _ITp\n+    atomic_fetch_add_explicit(__atomic_base<_ITp>* __a, _ITp __i,\n \t\t\t      memory_order __m)\n     { return __a->fetch_add(__i, __m); }\n \n   template<typename _ITp>\n-    inline _ITp \n-    atomic_fetch_sub_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i, \n+    inline _ITp\n+    atomic_fetch_sub_explicit(__atomic_base<_ITp>* __a, _ITp __i,\n \t\t\t      memory_order __m)\n     { return __a->fetch_sub(__i, __m); }\n \n   template<typename _ITp>\n-    inline _ITp \n-    atomic_fetch_and_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i, \n+    inline _ITp\n+    atomic_fetch_and_explicit(__atomic_base<_ITp>* __a, _ITp __i,\n \t\t\t      memory_order __m)\n     { return __a->fetch_and(__i, __m); }\n \n   template<typename _ITp>\n-    inline _ITp \n-    atomic_fetch_or_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i,\n+    inline _ITp\n+    atomic_fetch_or_explicit(__atomic_base<_ITp>* __a, _ITp __i,\n \t\t\t     memory_order __m)\n     { return __a->fetch_or(__i, __m); }\n \n   template<typename _ITp>\n-    inline _ITp \n-    atomic_fetch_xor_explicit(volatile __atomic_base<_ITp>* __a, _ITp __i, \n+    inline _ITp\n+    atomic_fetch_xor_explicit(__atomic_base<_ITp>* __a, _ITp __i,\n \t\t\t      memory_order __m)\n     { return __a->fetch_xor(__i, __m); }\n \n   template<typename _ITp>\n-    inline bool \n-    atomic_is_lock_free(const volatile __atomic_base<_ITp>* __a)\n+    inline bool\n+    atomic_is_lock_free(const __atomic_base<_ITp>* __a)\n     { return __a->is_lock_free(); }\n \n   template<typename _ITp>\n-    inline void \n-    atomic_store(volatile __atomic_base<_ITp>* __a, _ITp __i)\n+    inline void\n+    atomic_store(__atomic_base<_ITp>* __a, _ITp __i)\n     { atomic_store_explicit(__a, __i, memory_order_seq_cst); }\n \n   template<typename _ITp>\n-    inline _ITp \n-    atomic_load(const volatile __atomic_base<_ITp>* __a)\n+    inline _ITp\n+    atomic_load(const __atomic_base<_ITp>* __a)\n     { return atomic_load_explicit(__a, memory_order_seq_cst); }\n \n   template<typename _ITp>\n-    inline _ITp \n-    atomic_exchange(volatile __atomic_base<_ITp>* __a, _ITp __i)\n+    inline _ITp\n+    atomic_exchange(__atomic_base<_ITp>* __a, _ITp __i)\n     { return atomic_exchange_explicit(__a, __i, memory_order_seq_cst); }\n \n   template<typename _ITp>\n-    inline bool \n-    atomic_compare_exchange_weak(volatile __atomic_base<_ITp>* __a,\n+    inline bool\n+    atomic_compare_exchange_weak(__atomic_base<_ITp>* __a,\n \t\t\t\t _ITp* __i1, _ITp __i2)\n-    { \n-      return atomic_compare_exchange_weak_explicit(__a, __i1, __i2, \n+    {\n+      return atomic_compare_exchange_weak_explicit(__a, __i1, __i2,\n \t\t\t\t\t\t   memory_order_seq_cst,\n-\t\t\t\t\t\t   memory_order_seq_cst); \n+\t\t\t\t\t\t   memory_order_seq_cst);\n     }\n \n   template<typename _ITp>\n-    inline bool \n-    atomic_compare_exchange_strong(volatile __atomic_base<_ITp>* __a, \n+    inline bool\n+    atomic_compare_exchange_strong(__atomic_base<_ITp>* __a,\n \t\t\t\t   _ITp* __i1, _ITp __i2)\n-    { \n-      return atomic_compare_exchange_strong_explicit(__a, __i1, __i2, \n+    {\n+      return atomic_compare_exchange_strong_explicit(__a, __i1, __i2,\n \t\t\t\t\t\t     memory_order_seq_cst,\n-\t\t\t\t\t\t     memory_order_seq_cst); \n+\t\t\t\t\t\t     memory_order_seq_cst);\n     }\n \n   template<typename _ITp>\n-    inline _ITp \n-    atomic_fetch_add(volatile __atomic_base<_ITp>* __a, _ITp __i)\n+    inline _ITp\n+    atomic_fetch_add(__atomic_base<_ITp>* __a, _ITp __i)\n     { return atomic_fetch_add_explicit(__a, __i, memory_order_seq_cst); }\n \n   template<typename _ITp>\n-    inline _ITp \n-    atomic_fetch_sub(volatile __atomic_base<_ITp>* __a, _ITp __i)\n+    inline _ITp\n+    atomic_fetch_sub(__atomic_base<_ITp>* __a, _ITp __i)\n     { return atomic_fetch_sub_explicit(__a, __i, memory_order_seq_cst); }\n \n   template<typename _ITp>\n-    inline _ITp \n-    atomic_fetch_and(volatile __atomic_base<_ITp>* __a, _ITp __i)\n+    inline _ITp\n+    atomic_fetch_and(__atomic_base<_ITp>* __a, _ITp __i)\n     { return atomic_fetch_and_explicit(__a, __i, memory_order_seq_cst); }\n \n   template<typename _ITp>\n-    inline _ITp \n-    atomic_fetch_or(volatile __atomic_base<_ITp>* __a, _ITp __i)\n+    inline _ITp\n+    atomic_fetch_or(__atomic_base<_ITp>* __a, _ITp __i)\n     { return atomic_fetch_or_explicit(__a, __i, memory_order_seq_cst); }\n \n   template<typename _ITp>\n-    inline _ITp \n-    atomic_fetch_xor(volatile __atomic_base<_ITp>* __a, _ITp __i)\n+    inline _ITp\n+    atomic_fetch_xor(__atomic_base<_ITp>* __a, _ITp __i)\n     { return atomic_fetch_xor_explicit(__a, __i, memory_order_seq_cst); }\n \n   // @} group atomics\n \n _GLIBCXX_END_NAMESPACE\n \n #endif\n-\n-", "previous_filename": "libstdc++-v3/include/c_global/cstdatomic"}, {"sha": "44f2ec83e58c28ee98a5b8e3f68671ec93c02feb", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -41,7 +41,7 @@\n #include <condition_variable>\n #include <system_error>\n #include <exception>\n-#include <cstdatomic>\n+#include <atomic>\n #include <bits/functexcept.h>\n \n namespace std"}, {"sha": "bff8fa98c647b2834fc9bb5d04e5563dc7174b38", "filename": "libstdc++-v3/src/atomic.cc", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Fsrc%2Fatomic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Fsrc%2Fatomic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fatomic.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -24,7 +24,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include \"gstdint.h\"\n-#include <cstdatomic>\n+#include <atomic>\n #include <mutex>\n \n #define LOGSIZE 4\n@@ -40,7 +40,7 @@ namespace\n   }\n #endif\n \n-  std::__atomic_flag_base volatile flag_table[ 1 << LOGSIZE ] =\n+  std::__atomic_flag_base flag_table[ 1 << LOGSIZE ] =\n     {\n       ATOMIC_FLAG_INIT, ATOMIC_FLAG_INIT, ATOMIC_FLAG_INIT, ATOMIC_FLAG_INIT,\n       ATOMIC_FLAG_INIT, ATOMIC_FLAG_INIT, ATOMIC_FLAG_INIT, ATOMIC_FLAG_INIT,\n@@ -54,7 +54,7 @@ namespace std\n   namespace __atomic0\n   {\n     bool\n-    atomic_flag::test_and_set(memory_order) volatile\n+    atomic_flag::test_and_set(memory_order)\n     {\n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n       lock_guard<mutex> __lock(get_atomic_mutex());\n@@ -65,7 +65,7 @@ namespace std\n     }\n \n     void\n-    atomic_flag::clear(memory_order) volatile\n+    atomic_flag::clear(memory_order)\n     {\n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n       lock_guard<mutex> __lock(get_atomic_mutex());\n@@ -77,31 +77,31 @@ namespace std\n   extern \"C\"\n   {\n     bool\n-    atomic_flag_test_and_set_explicit(volatile __atomic_flag_base* __a,\n+    atomic_flag_test_and_set_explicit(__atomic_flag_base* __a,\n \t\t\t\t      memory_order __m) throw ()\n     {\n-      volatile atomic_flag* d = static_cast<volatile atomic_flag*>(__a);\n+      atomic_flag* d = static_cast<volatile atomic_flag*>(__a);\n       return d->test_and_set(__m);\n     }\n \n     void\n-    atomic_flag_clear_explicit(volatile __atomic_flag_base* __a,\n+    atomic_flag_clear_explicit(__atomic_flag_base* __a,\n \t\t\t       memory_order __m) throw ()\n     {\n-      volatile atomic_flag* d = static_cast<volatile atomic_flag*>(__a);\n+      atomic_flag* d = static_cast<volatile atomic_flag*>(__a);\n       return d->clear(__m);\n     }\n \n     void\n-    __atomic_flag_wait_explicit(volatile __atomic_flag_base* __a,\n+    __atomic_flag_wait_explicit(__atomic_flag_base* __a,\n \t\t\t\tmemory_order __x) throw ()\n     {\n       while (atomic_flag_test_and_set_explicit(__a, __x))\n \t{ };\n     }\n \n-    volatile __atomic_flag_base*\n-    __atomic_flag_for_address(const volatile void* __z) throw ()\n+    __atomic_flag_base*\n+    __atomic_flag_for_address(const void* __z) throw ()\n     {\n       uintptr_t __u = reinterpret_cast<uintptr_t>(__z);\n       __u += (__u >> 2) + (__u << 4);\n@@ -114,3 +114,24 @@ namespace std\n     }\n   } // extern \"C\"\n } // namespace std\n+\n+\n+// XXX GLIBCXX_ABI Deprecated\n+// gcc-4.5.0\n+// <atomic> signature changes\n+\n+// The rename syntax for default exported names is\n+//   asm (\".symver name1,exportedname@GLIBCXX_3.4\")\n+//   asm (\".symver name2,exportedname@@GLIBCXX_3.4.5\")\n+// In the future, GLIBCXX_ABI > 6 should remove all uses of\n+// _GLIBCXX_*_SYMVER macros in this file.\n+\n+#define _GLIBCXX_ASM_SYMVER(cur, old, version) \\\n+   asm (\".symver \" #cur \",\" #old \"@@\" #version);\n+\n+#if defined(_GLIBCXX_SYMVER_GNU) && defined(PIC) \\\n+    && defined(_GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE)\n+_GLIBCXX_ASM_SYMVER(_ZNSt9__atomic011atomic_flag5clearESt12memory_order, _ZNVSt9__atomic011atomic_flag5clearESt12memory_order, GLIBCXX_3.4.11)\n+\n+_GLIBCXX_ASM_SYMVER(_ZNSt9__atomic011atomic_flag12test_and_setESt12memory_order, _ZNVSt9__atomic011atomic_flag12test_and_setESt12memory_order, GLIBCXX_3.4.11)\n+#endif"}, {"sha": "5d6e5ddc14f241f9e93d6f5a402b854471a0fabc", "filename": "libstdc++-v3/src/compatibility-c++0x.cc", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility-c%2B%2B0x.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -33,9 +33,23 @@\n \n namespace std\n {\n+  // gcc-4.4.0\n+  // <mutex> exported std::lock_error\n+#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n+  class lock_error : public exception\n+  {\n+  public:\n+    virtual const char*\n+    _GLIBCXX_CONST what() const throw();\n+  };\n+\n+  const char*\n+  lock_error::what() const throw()\n+  { return \"std::lock_error\"; }\n+#endif\n+\n   // We need these due to the symbols exported since GLIBCXX_3.4.10.\n   // See libstdc++/41662 for details.\n-\n   template<typename _Tp>\n     struct hash : public std::unary_function<_Tp, size_t>\n     {"}, {"sha": "41071d23b8117c5350682fdbd58ed93c563527f8", "filename": "libstdc++-v3/src/compatibility.cc", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -513,25 +513,6 @@ extern __attribute__((used, weak)) const void * const _ZTIPKe[4]\n       (void *) _ZTSPKe, (void *) 1L, (void *) _ZTIe };\n #endif // _GLIBCXX_LONG_DOUBLE_COMPAT\n \n-// gcc-4.4.0\n-// <mutex> exported std::lock_error\n-#if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n-namespace std\n-{\n-  class lock_error : public exception\n-  {\n-  public:\n-    virtual const char*\n-    _GLIBCXX_CONST what() const throw();\n-  };\n-\n-  const char*\n-  lock_error::what() const throw()\n-  { return \"std::lock_error\"; }\n-}\n-#endif\n-\n-\n #ifdef _GLIBCXX_SYMVER_DARWIN\n #if (defined(__ppc__) || defined(__ppc64__)) && defined(PIC)\n /* __eprintf shouldn't have been made visible from libstdc++, or"}, {"sha": "8769fa6ee9f90be1d9da7a0fe2a765d63a114fb0", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/assign_neg.cc", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fassign_neg.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -18,8 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n int main()\n@@ -30,19 +29,19 @@ int main()\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 521 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 239 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 257 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 275 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 293 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 311 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 329 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 347 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 365 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 383 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 401 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 419 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 437 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 455 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 473 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 491 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 231 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 249 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 267 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 285 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 303 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 321 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 339 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 357 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 375 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 393 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 411 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 429 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 447 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 465 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 483 }\n // { dg-excess-errors \"In member function\" }"}, {"sha": "142a5a14951f735bbdb2f7d6562bfe6ef216ca47", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/copy_list.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_list.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -17,14 +17,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n int main()\n {\n   __gnu_test::copy_list_initializable test;\n-  __gnu_cxx::typelist::apply_generator(test, __gnu_test::atomics_tl(), \n+  __gnu_cxx::typelist::apply_generator(test, __gnu_test::atomics_tl(),\n \t\t\t\t       __gnu_test::integral_types::type());\n   return 0;\n }"}, {"sha": "7f7cfd0e65bba50f96fbb41c0f7b253ac103b6f9", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/copy_neg.cc", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fcopy_neg.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -18,8 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n int main()\n@@ -29,20 +28,20 @@ int main()\n   return 0;\n }\n \n-// { dg-error \"used here\" \"\" { target *-*-* } 560 } \n-// { dg-error \"deleted function\" \"\" { target *-*-* } 238 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 256 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 274 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 292 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 310 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 328 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 346 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 364 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 382 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 400 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 418 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 436 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 454 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 472 }\n-// { dg-error \"deleted function\" \"\" { target *-*-* } 490 }\n+// { dg-error \"used here\" \"\" { target *-*-* } 560 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 248 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 266 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 284 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 302 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 320 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 338 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 356 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 374 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 230 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 410 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 428 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 446 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 464 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 482 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 392 }\n // { dg-excess-errors \"In member function\" }"}, {"sha": "bdad02b4737a7dde5aa6ada68c9409a7a3bb789c", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/default.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fdefault.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -17,8 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n int main()"}, {"sha": "b6ac8e1b93db6be0fb2bccef4cb4024e8ea0913c", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/direct_list.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fdirect_list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fdirect_list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fdirect_list.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -17,14 +17,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n int main()\n {\n   __gnu_test::direct_list_initializable test;\n-  __gnu_cxx::typelist::apply_generator(test, __gnu_test::atomics_tl(), \n+  __gnu_cxx::typelist::apply_generator(test, __gnu_test::atomics_tl(),\n \t\t\t\t       __gnu_test::integral_types::type());\n   return 0;\n }"}, {"sha": "755782034ac0b47cc2c70c2d13e4a45a4867c4ba", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/single_value.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fsingle_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fsingle_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fsingle_value.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -17,14 +17,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n int main()\n {\n   __gnu_test::single_value_constructible test;\n-  __gnu_cxx::typelist::apply_generator(test, __gnu_test::atomics_tl(), \n+  __gnu_cxx::typelist::apply_generator(test, __gnu_test::atomics_tl(),\n \t\t\t\t       __gnu_test::integral_types::type());\n   return 0;\n }"}, {"sha": "4ace9f0cd63977b1fae5698ddbc30f14195828ea", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/cons/user_pod.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fuser_pod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fuser_pod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Fcons%2Fuser_pod.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -0,0 +1,39 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do link { xfail *-*-* } }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <atomic>\n+\n+struct dwordp\n+{\n+  int* p1;\n+  int* p2;\n+};\n+\n+void atomics()\n+{\n+  std::atomic<dwordp> a;\n+  bool b = a.is_lock_free(); // { dg-excess-errors \"undefined reference to\" }\n+}\n+\n+int main()\n+{\n+  atomics();\n+  return 0;\n+}"}, {"sha": "6acf7c84711ae6c4b837630c26eaedc930e08158", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/operators/integral_assignment.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2Fintegral_assignment.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2Fintegral_assignment.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2Fintegral_assignment.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -17,15 +17,14 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_hooks.h>\n #include <testsuite_common_types.h>\n \n int main()\n {\n   __gnu_test::integral_assignable test;\n-  __gnu_cxx::typelist::apply_generator(test, __gnu_test::atomics_tl(), \n+  __gnu_cxx::typelist::apply_generator(test, __gnu_test::atomics_tl(),\n \t\t\t\t       __gnu_test::integral_types::type());\n   return 0;\n }"}, {"sha": "1c9c768d57d4e8ed062511e3f8b21d3914d77ec0", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/operators/integral_conversion.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2Fintegral_conversion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2Fintegral_conversion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2Fintegral_conversion.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -17,15 +17,14 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_hooks.h>\n #include <testsuite_common_types.h>\n \n int main()\n {\n   __gnu_test::integral_convertable test;\n-  __gnu_cxx::typelist::apply_generator(test, __gnu_test::atomics_tl(), \n+  __gnu_cxx::typelist::apply_generator(test, __gnu_test::atomics_tl(),\n \t\t\t\t       __gnu_test::integral_types::type());\n   return 0;\n }"}, {"sha": "946f833d1f2c8f1f42d70ca31e2e185cb2222d53", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/requirements/base_classes.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Frequirements%2Fbase_classes.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -18,14 +18,14 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n void test01()\n {\n   // Check for required base class.\n   __gnu_test::has_required_base_class test;\n-  __gnu_cxx::typelist::apply_generator(test, \n-\t\t\t\t       __gnu_test::atomic_integrals::type(), \n-                                       __gnu_test::atomics_tl());\n+  __gnu_cxx::typelist::apply_generator(test,\n+\t\t\t\t       __gnu_test::atomic_integrals::type(),\n+\t\t\t\t       __gnu_test::atomics_tl());\n }"}, {"sha": "72bd5dd3a97b7cad15dbf27aa5a4947f2cbb3f4f", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/requirements/explicit_instantiation/1.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Frequirements%2Fexplicit_instantiation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Frequirements%2Fexplicit_instantiation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Frequirements%2Fexplicit_instantiation%2F1.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -18,10 +18,9 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n // This file tests explicit instantiation of basic_string\n \n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_character.h>\n \n template class std::atomic<__gnu_test::pod_char>;"}, {"sha": "fa35b9cb20801cfd9270fc1c0987a7a2768fd6cb", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_address/cons/aggregate.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Faggregate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Faggregate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Faggregate.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -18,8 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n \n int main()\n {"}, {"sha": "0ec1321e116c3485840cbba262c6ccfdba82de2e", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_address/cons/assign_neg.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fassign_neg.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -18,8 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n \n void test01()\n {\n@@ -29,5 +28,5 @@ void test01()\n   test_type t2;\n   t1 = t2;\n }\n-// { dg-error \"used here\" \"\" { target *-*-* } 30 } \n-// { dg-excess-errors \"deleted function\" } \n+// { dg-error \"used here\" \"\" { target *-*-* } 29 }\n+// { dg-excess-errors \"deleted function\" }"}, {"sha": "4ede58ff8bd8573a3a62ad006c07d3395a89e735", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_address/cons/copy_neg.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fcopy_neg.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -18,8 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n \n void test01()\n {\n@@ -28,5 +27,5 @@ void test01()\n   test_type t1;\n   test_type t2(t1);\n }\n-// { dg-error \"used here\" \"\" { target *-*-* } 29 } \n-// { dg-excess-errors \"deleted function\" } \n+// { dg-error \"used here\" \"\" { target *-*-* } 28 }\n+// { dg-excess-errors \"deleted function\" }"}, {"sha": "7e08ebb6254ef47dd39ec56bd800014f57b5eaed", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_address/cons/default.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fdefault.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -17,8 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n \n int main()\n {"}, {"sha": "7a2e94977a7c9c46a53fea12e6ed4909c372fed3", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_address/cons/single_value.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fsingle_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fsingle_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Fcons%2Fsingle_value.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -17,8 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n \n int main()\n {"}, {"sha": "cbabc1e3eb7aac1116cf4855304f5d0178be5f2e", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_address/requirements/standard_layout.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Frequirements%2Fstandard_layout.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Frequirements%2Fstandard_layout.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Frequirements%2Fstandard_layout.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -18,8 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n void test01()"}, {"sha": "00960802c4f2d9fccf7babfef55b1fa1c0b3ea7c", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_address/requirements/trivial.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Frequirements%2Ftrivial.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Frequirements%2Ftrivial.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_address%2Frequirements%2Ftrivial.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -18,8 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n void test01()"}, {"sha": "36dc5fcf4b6f6c2710008f8e6b5044b2812acc8b", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/clear/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fclear%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fclear%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fclear%2F1.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -17,7 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_hooks.h>\n \n int main()"}, {"sha": "1ad8bc4d4452daadfa95f1a656350e068a280636", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/cons/aggregate.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Faggregate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Faggregate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Faggregate.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -1,5 +1,5 @@\n // { dg-options \"-std=gnu++0x\" }\n-// { dg-do compile } \n+// { dg-do compile }\n \n // Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n@@ -18,8 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n \n int main()\n {"}, {"sha": "924add880cf97cb44e01f0d903e8bc8ed4233b0e", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/cons/assign_neg.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fassign_neg.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -18,8 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n \n void test01()\n {\n@@ -29,5 +28,5 @@ void test01()\n   test_type t2;\n   t1 = t2;\n }\n-// { dg-error \"used here\" \"\" { target *-*-* } 30 } \n-// { dg-excess-errors \"deleted function\" } \n+// { dg-error \"used here\" \"\" { target *-*-* } 29 }\n+// { dg-excess-errors \"deleted function\" }"}, {"sha": "22cea6a391637d49373a7afd3e3d5c79b9baa793", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/cons/copy_neg.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fcopy_neg.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -18,8 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n \n void test01()\n {\n@@ -28,5 +27,5 @@ void test01()\n   test_type t1;\n   test_type t2(t1);\n }\n-// { dg-error \"used here\" \"\" { target *-*-* } 29 } \n-// { dg-excess-errors \"deleted function\" } \n+// { dg-error \"used here\" \"\" { target *-*-* } 28 }\n+// { dg-excess-errors \"deleted function\" }"}, {"sha": "38b6544e3d5e390db1768dada021920d62134493", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/cons/default.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Fcons%2Fdefault.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -17,8 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n \n int main()\n {"}, {"sha": "362b8d46a9337d07c6229295ebf5c8ab7a8bff7d", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/requirements/standard_layout.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Frequirements%2Fstandard_layout.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Frequirements%2Fstandard_layout.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Frequirements%2Fstandard_layout.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -18,8 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n void test01()"}, {"sha": "41e275c299633e8bfc95cfeb7cdd139637a06f30", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/requirements/trivial.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Frequirements%2Ftrivial.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Frequirements%2Ftrivial.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Frequirements%2Ftrivial.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -18,8 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n void test01()"}, {"sha": "025fdcb08e5659c38a9c0537d5eb6655a7019c84", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/test_and_set/explicit.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fexplicit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fexplicit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fexplicit.c?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -17,7 +17,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <stdatomic.h>\n \n int main()"}, {"sha": "ef69e02dea58ccf06a4b49c536490c0ce584f48c", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/test_and_set/explicit.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fexplicit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fexplicit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fexplicit.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -17,8 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n \n int main()\n {"}, {"sha": "1ab92948416fb280e0245b958c17b8b622147b40", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/test_and_set/implicit.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fimplicit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fimplicit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fimplicit.c?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -17,7 +17,6 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n #include <stdatomic.h>\n \n int main()"}, {"sha": "825174d390f950651829489173f6dc1309d37bd4", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_flag/test_and_set/implicit.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fimplicit.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fimplicit.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_flag%2Ftest_and_set%2Fimplicit.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -17,8 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n \n int main()\n {"}, {"sha": "d21e30c3310ee30369be16979ecd7abadaa9ba21", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/cons/assign_neg.cc", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fassign_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fassign_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fassign_neg.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -18,24 +18,23 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n int main()\n {\n   __gnu_test::assignable test;\n-  __gnu_cxx::typelist::apply_generator(test, \n+  __gnu_cxx::typelist::apply_generator(test,\n \t\t\t\t       __gnu_test::atomic_integrals::type());\n   return 0;\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 521 }\n-// { dg-excess-errors \"deleted function\" } \n-// { dg-excess-errors \"deleted function\" } \n-// { dg-error \"instantiated from\" \"\" { target *-*-* } 29 } \n-// { dg-error \"instantiated from\" \"\" { target *-*-* } 528 } \n-// { dg-error \"instantiated from\" \"\" { target *-*-* } 170 } \n+// { dg-excess-errors \"deleted function\" }\n+// { dg-excess-errors \"deleted function\" }\n+// { dg-error \"instantiated from\" \"\" { target *-*-* } 28 }\n+// { dg-error \"instantiated from\" \"\" { target *-*-* } 528 }\n+// { dg-error \"instantiated from\" \"\" { target *-*-* } 170 }\n // { dg-error \"instantiated from\" \"\" { target *-*-* } 399 }\n-// { dg-error \"instantiated from\" \"\" { target *-*-* } 168 }  \n+// { dg-error \"instantiated from\" \"\" { target *-*-* } 168 }\n // { dg-excess-errors \"In member function\" }"}, {"sha": "f2456360ef34c6b767cad775b36add8bcb879ee7", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/cons/copy_list.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fcopy_list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fcopy_list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fcopy_list.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -17,8 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n int main()"}, {"sha": "be0580a46b295f0f9920362001169fbd5ea443b2", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/cons/copy_neg.cc", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fcopy_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fcopy_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fcopy_neg.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -18,24 +18,23 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n int main()\n {\n   __gnu_test::copy_constructible test;\n-  __gnu_cxx::typelist::apply_generator(test, \n+  __gnu_cxx::typelist::apply_generator(test,\n \t\t\t\t       __gnu_test::atomic_integrals::type());\n   return 0;\n }\n \n // { dg-error \"used here\" \"\" { target *-*-* } 560 }\n-// { dg-excess-errors \"deleted function\" } \n-// { dg-excess-errors \"deleted function\" } \n-// { dg-error \"instantiated from\" \"\" { target *-*-* } 29 } \n-// { dg-error \"instantiated from\" \"\" { target *-*-* } 566 } \n-// { dg-error \"instantiated from\" \"\" { target *-*-* } 170 } \n+// { dg-excess-errors \"deleted function\" }\n+// { dg-excess-errors \"deleted function\" }\n+// { dg-error \"instantiated from\" \"\" { target *-*-* } 28 }\n+// { dg-error \"instantiated from\" \"\" { target *-*-* } 566 }\n+// { dg-error \"instantiated from\" \"\" { target *-*-* } 170 }\n // { dg-error \"instantiated from\" \"\" { target *-*-* } 399 }\n-// { dg-error \"instantiated from\" \"\" { target *-*-* } 168 }  \n+// { dg-error \"instantiated from\" \"\" { target *-*-* } 168 }\n // { dg-excess-errors \"In member function\" }"}, {"sha": "613e935c84310b420d99b225eac32b8e07906a05", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/cons/default.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fdefault.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -17,8 +17,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n int main()"}, {"sha": "3e8f9c3f8bee2e8d7e8b8b675018e36386d8a859", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/cons/direct_list.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fdirect_list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fdirect_list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fdirect_list.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -17,15 +17,14 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n int main()\n {\n   __gnu_test::direct_list_initializable test;\n-  __gnu_cxx::typelist::apply_generator(test, \n-\t\t\t\t       __gnu_test::atomic_integrals::type(), \n+  __gnu_cxx::typelist::apply_generator(test,\n+\t\t\t\t       __gnu_test::atomic_integrals::type(),\n \t\t\t\t       __gnu_test::integral_types::type());\n   return 0;\n }"}, {"sha": "8787a1596e70f86c5db5a7a31b972dc70002a79a", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/cons/single_value.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fsingle_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fsingle_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Fcons%2Fsingle_value.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -17,15 +17,14 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n int main()\n {\n   __gnu_test::single_value_constructible test;\n-  __gnu_cxx::typelist::apply_generator(test, \n-\t\t\t\t       __gnu_test::atomic_integrals::type(), \n+  __gnu_cxx::typelist::apply_generator(test,\n+\t\t\t\t       __gnu_test::atomic_integrals::type(),\n \t\t\t\t       __gnu_test::integral_types::type());\n   return 0;\n }"}, {"sha": "99940b8d293834493da23445ad138211ec97508c", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/operators/bitwise.cc", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fbitwise.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fbitwise.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fbitwise.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -1,25 +1,24 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n // -*- C++ -*-\n- \n+\n // Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n- \n+\n // This library is free software; you can redistribute it and/or\n // modify it under the terms of the GNU General Public License as\n // published by the Free Software Foundation; either version 3, or (at\n // your option) any later version.\n- \n+\n // This library is distributed in the hope that it will be useful, but\n // WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n // General Public License for more details.\n- \n+\n // You should have received a copy of the GNU General Public License\n // along with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n- \n- \n-#include <cstdatomic>\n+\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n int main()"}, {"sha": "c7a5dc3098ea4416c1bd2e7aed3e2e7f12edfec3", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/operators/bitwise_neg.cc", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fbitwise_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fbitwise_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fbitwise_neg.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -1,25 +1,24 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n // -*- C++ -*-\n- \n+\n // Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n- \n+\n // This library is free software; you can redistribute it and/or\n // modify it under the terms of the GNU General Public License as\n // published by the Free Software Foundation; either version 3, or (at\n // your option) any later version.\n- \n+\n // This library is distributed in the hope that it will be useful, but\n // WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n // General Public License for more details.\n- \n+\n // You should have received a copy of the GNU General Public License\n // along with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n- \n- \n-#include <cstdatomic>\n+\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n int main()"}, {"sha": "fd26644124edd3be1a90e59f34f097814b4c1655", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/operators/decrement.cc", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fdecrement.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fdecrement.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fdecrement.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -1,25 +1,24 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n // -*- C++ -*-\n- \n+\n // Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n- \n+\n // This library is free software; you can redistribute it and/or\n // modify it under the terms of the GNU General Public License as\n // published by the Free Software Foundation; either version 3, or (at\n // your option) any later version.\n- \n+\n // This library is distributed in the hope that it will be useful, but\n // WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n // General Public License for more details.\n- \n+\n // You should have received a copy of the GNU General Public License\n // along with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n- \n- \n-#include <cstdatomic>\n+\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n int main()"}, {"sha": "59598283df1dc5ef02f167c560d5853dc7a55502", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/operators/decrement_neg.cc", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fdecrement_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fdecrement_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fdecrement_neg.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -1,25 +1,24 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n // -*- C++ -*-\n- \n+\n // Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n- \n+\n // This library is free software; you can redistribute it and/or\n // modify it under the terms of the GNU General Public License as\n // published by the Free Software Foundation; either version 3, or (at\n // your option) any later version.\n- \n+\n // This library is distributed in the hope that it will be useful, but\n // WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n // General Public License for more details.\n- \n+\n // You should have received a copy of the GNU General Public License\n // along with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n- \n- \n-#include <cstdatomic>\n+\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n int main()"}, {"sha": "e1e8690976beb1fe638ca5dbee530e66f06647c4", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/operators/increment.cc", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fincrement.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fincrement.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fincrement.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -1,25 +1,24 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n // -*- C++ -*-\n- \n+\n // Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n- \n+\n // This library is free software; you can redistribute it and/or\n // modify it under the terms of the GNU General Public License as\n // published by the Free Software Foundation; either version 3, or (at\n // your option) any later version.\n- \n+\n // This library is distributed in the hope that it will be useful, but\n // WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n // General Public License for more details.\n- \n+\n // You should have received a copy of the GNU General Public License\n // along with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n- \n- \n-#include <cstdatomic>\n+\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n int main()"}, {"sha": "9cff37774ecd28bdbeef69b3e4fac82fb9697f7a", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/operators/increment_neg.cc", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fincrement_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fincrement_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fincrement_neg.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -1,25 +1,24 @@\n // { dg-options \"-std=gnu++0x\" }\n // { dg-do compile }\n // -*- C++ -*-\n- \n+\n // Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n- \n+\n // This library is free software; you can redistribute it and/or\n // modify it under the terms of the GNU General Public License as\n // published by the Free Software Foundation; either version 3, or (at\n // your option) any later version.\n- \n+\n // This library is distributed in the hope that it will be useful, but\n // WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n // General Public License for more details.\n- \n+\n // You should have received a copy of the GNU General Public License\n // along with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n- \n- \n-#include <cstdatomic>\n+\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n int main()"}, {"sha": "728b53a1626a87cd5424969d51ec3eca0b3402c9", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/operators/integral_assignment.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fintegral_assignment.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fintegral_assignment.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fintegral_assignment.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -17,16 +17,15 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_hooks.h>\n #include <testsuite_common_types.h>\n \n int main()\n {\n   __gnu_test::integral_assignable test;\n   __gnu_cxx::typelist::apply_generator(test,\n-\t\t\t\t       __gnu_test::atomic_integrals::type(), \n+\t\t\t\t       __gnu_test::atomic_integrals::type(),\n \t\t\t\t       __gnu_test::integral_types::type());\n   return 0;\n }"}, {"sha": "ab642f3e6896deb76c1c7d41cf9eff6dde52376f", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/operators/integral_conversion.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fintegral_conversion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fintegral_conversion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Foperators%2Fintegral_conversion.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -17,16 +17,15 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_hooks.h>\n #include <testsuite_common_types.h>\n \n int main()\n {\n   __gnu_test::integral_convertable test;\n   __gnu_cxx::typelist::apply_generator(test,\n-\t\t\t\t       __gnu_test::atomic_integrals::type(), \n+\t\t\t\t       __gnu_test::atomic_integrals::type(),\n \t\t\t\t       __gnu_test::integral_types::type());\n   return 0;\n }"}, {"sha": "66e231b8413147733d7f2b3fd9e0250301ce200d", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/requirements/standard_layout.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Frequirements%2Fstandard_layout.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Frequirements%2Fstandard_layout.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Frequirements%2Fstandard_layout.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -19,13 +19,13 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n void test01()\n {\n   // Check for standard layout requirements\n   __gnu_test::standard_layout test;\n-  __gnu_cxx::typelist::apply_generator(test, \n+  __gnu_cxx::typelist::apply_generator(test,\n \t\t\t\t       __gnu_test::atomic_integrals::type());\n }"}, {"sha": "f75fcb0e4fd764b2b407a2ce7ea82a254311b9b5", "filename": "libstdc++-v3/testsuite/29_atomics/atomic_integral/requirements/trivial.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Frequirements%2Ftrivial.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Frequirements%2Ftrivial.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic_integral%2Frequirements%2Ftrivial.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -18,13 +18,12 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-\n-#include <cstdatomic>\n+#include <atomic>\n #include <testsuite_common_types.h>\n \n void test01()\n {\n   __gnu_test::has_trivial_cons_dtor test;\n-  __gnu_cxx::typelist::apply_generator(test, \n+  __gnu_cxx::typelist::apply_generator(test,\n \t\t\t\t       __gnu_test::atomic_integrals::type());\n }"}, {"sha": "7af4369aa9315b6f910b6c1cf7013df0b6848c80", "filename": "libstdc++-v3/testsuite/29_atomics/headers/atomic/functions_std_c++0x.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Ffunctions_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Ffunctions_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Ffunctions_std_c%2B%2B0x.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -18,7 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-#include <cstdatomic>\n+#include <atomic>\n \n namespace gnu\n {", "previous_filename": "libstdc++-v3/testsuite/29_atomics/headers/cstdatomic/functions_std_c++0x.cc"}, {"sha": "c0419c9b8d8de434c6e6f215512e313f2c3fd083", "filename": "libstdc++-v3/testsuite/29_atomics/headers/atomic/macros.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Fmacros.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Fmacros.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Fmacros.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -18,7 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-#include <cstdatomic>\n+#include <atomic>\n \n namespace gnu\n {", "previous_filename": "libstdc++-v3/testsuite/29_atomics/headers/cstdatomic/macros.cc"}, {"sha": "e76ff8ed53c9904c7ad8164a03e4dd03de565bfb", "filename": "libstdc++-v3/testsuite/29_atomics/headers/atomic/std_c++0x_neg.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Fstd_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Fstd_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Fstd_c%2B%2B0x_neg.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -18,7 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-#include <cstdatomic>  // { dg-excess-errors \"In file included from\" }\n+#include <atomic>  // { dg-excess-errors \"In file included from\" }\n \n // { dg-error \"upcoming ISO\" \"\" { target *-*-* } 31 } \n ", "previous_filename": "libstdc++-v3/testsuite/29_atomics/headers/cstdatomic/std_c++0x_neg.cc"}, {"sha": "ce1e04359ad18e2851e8076452b159713566314f", "filename": "libstdc++-v3/testsuite/29_atomics/headers/atomic/types_std_c++0x.cc", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Ftypes_std_c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Ftypes_std_c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Ftypes_std_c%2B%2B0x.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -18,7 +18,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-#include <cstdatomic>\n+#include <atomic>\n \n void test01()\n {", "previous_filename": "libstdc++-v3/testsuite/29_atomics/headers/cstdatomic/types_std_c++0x.cc"}, {"sha": "cbdb5e6fcb223ea0c23929d0e0cb23b7a3c78ce9", "filename": "libstdc++-v3/testsuite/29_atomics/headers/atomic/types_std_c++0x_neg.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Ftypes_std_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Ftypes_std_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fatomic%2Ftypes_std_c%2B%2B0x_neg.cc?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -0,0 +1,78 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <atomic>\n+\n+void test01()\n+{\n+  // Not global scoped, only namespace std.\n+  using memory_order;\n+  using memory_order_relaxed;\n+  using memory_order_consume;\n+  using memory_order_acquire;\n+  using memory_order_release;\n+  using memory_order_acq_rel;\n+  using memory_order_seq_cst;\n+\n+  using atomic_flag;\n+\n+  using atomic_bool;\n+  using atomic_char;\n+  using atomic_schar;\n+  using atomic_uchar;\n+  using atomic_short;\n+  using atomic_ushort;\n+  using atomic_int;\n+  using atomic_uint;\n+  using atomic_long;\n+  using atomic_ulong;\n+  using atomic_llong;\n+  using atomic_ullong;\n+  using atomic_wchar_t;\n+  using atomic_char16_t;\n+  using atomic_char32_t;\n+\n+  using atomic_address;\n+}\n+\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 26 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 27 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 28 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 29 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 30 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 31 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 32 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 34 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 36 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 37 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 38 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 39 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 40 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 41 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 42 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 43 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 44 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 45 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 46 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 47 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 48 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 49 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 50 }\n+// { dg-error \"expected nested-name-specifier\" \"\" { target *-*-* } 52 }"}, {"sha": "d56937678e2be72f2994e9c0f18cd3ae88462fbd", "filename": "libstdc++-v3/testsuite/29_atomics/headers/stdatomic.h/functions.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fstdatomic.h%2Ffunctions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fstdatomic.h%2Ffunctions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fheaders%2Fstdatomic.h%2Ffunctions.c?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -22,8 +22,8 @@\n \n int main()\n {\n-  volatile atomic_flag f;\n-  volatile atomic_flag* p = &f;\n+  atomic_flag f;\n+  atomic_flag* p = &f;\n   memory_order m = memory_order_relaxed;\n \n   // For position only."}, {"sha": "ac2684ad09b981ed7328ac1e916f0511a135c96b", "filename": "libstdc++-v3/testsuite/util/testsuite_common_types.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afd88205d8a95ccea9ba77fd23f0258025fcc249/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_common_types.h?ref=afd88205d8a95ccea9ba77fd23f0258025fcc249", "patch": "@@ -44,7 +44,7 @@\n #include <tr1/unordered_set>\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n-#include <cstdatomic>\n+#include <atomic>\n #include <type_traits>\n #endif\n "}]}