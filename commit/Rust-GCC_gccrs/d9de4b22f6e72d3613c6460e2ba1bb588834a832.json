{"sha": "d9de4b22f6e72d3613c6460e2ba1bb588834a832", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDlkZTRiMjJmNmU3MmQzNjEzYzY0NjBlMmJhMWJiNTg4ODM0YTgzMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-01-26T23:07:38Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-01-26T23:07:38Z"}, "message": "atomicity.h: Remove tricky .subsetion bits.\n\n\n2001-01-25  Richard Henderson  <rth@redhat.com>\n\n\t* config/cpu/alpha/bits/atomicity.h: Remove tricky .subsetion\n\tbits. Fixes Tru64 build issues.\n\nFrom-SVN: r39290", "tree": {"sha": "5f33a23104f3af11b3477a766f9adb0332ec4abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f33a23104f3af11b3477a766f9adb0332ec4abe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9de4b22f6e72d3613c6460e2ba1bb588834a832", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9de4b22f6e72d3613c6460e2ba1bb588834a832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9de4b22f6e72d3613c6460e2ba1bb588834a832", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9de4b22f6e72d3613c6460e2ba1bb588834a832/comments", "author": null, "committer": null, "parents": [{"sha": "f86f42a8ffc8ecf366aaa07e0512bebf2af91c9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f86f42a8ffc8ecf366aaa07e0512bebf2af91c9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f86f42a8ffc8ecf366aaa07e0512bebf2af91c9e"}], "stats": {"total": 83, "additions": 37, "deletions": 46}, "files": [{"sha": "4306078899e79e1343991fa5a8e6e582089f9cc0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9de4b22f6e72d3613c6460e2ba1bb588834a832/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9de4b22f6e72d3613c6460e2ba1bb588834a832/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d9de4b22f6e72d3613c6460e2ba1bb588834a832", "patch": "@@ -1,3 +1,8 @@\n+2001-01-25  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/cpu/alpha/bits/atomicity.h: Remove tricky .subsetion\n+\tbits. Fixes Tru64 build issues.\n+\t\n 2001-01-25  Michael Sokolov  <msokolov@ivan.Harhan.ORG>\n \n \t* acinclude.m4 (GLIBCPP_CHECK_GNU_MAKE): Bourne shell portability bug"}, {"sha": "d2f67bb71a9b62753c73230b23dfee6fc4f9cff7", "filename": "libstdc++-v3/config/cpu/alpha/bits/atomicity.h", "status": "modified", "additions": 32, "deletions": 46, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9de4b22f6e72d3613c6460e2ba1bb588834a832/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fbits%2Fatomicity.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9de4b22f6e72d3613c6460e2ba1bb588834a832/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fbits%2Fatomicity.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fcpu%2Falpha%2Fbits%2Fatomicity.h?ref=d9de4b22f6e72d3613c6460e2ba1bb588834a832", "patch": "@@ -1,5 +1,5 @@\n /* Low-level functions for atomic operations.  Alpha version.\n-   Copyright (C) 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n \n    The GNU C Library is free software; you can redistribute it and/or\n@@ -20,6 +20,11 @@\n #ifndef _BITS_ATOMICITY_H\n #define _BITS_ATOMICITY_H\t1\n \n+/* @@@ With gas we can play nice .subsection games to get the\n+   non-predicted branch pointing forward.  But Digital assemblers\n+   don't understand those directives.  This isn't a terribly\n+   important issue, so just ignore it.  */\n+\n typedef int _Atomic_word;\n \n static inline _Atomic_word\n@@ -29,20 +34,14 @@ __exchange_and_add (volatile _Atomic_word* __mem, int __val)\n   register int __result, __tmp;\n \n   __asm__ __volatile__ (\n-\t\"/* Inline exchange & add */\\n\"\n-\t\"1:\\t\"\n-\t\"ldl_l\t%0,%3\\n\\t\"\n-\t\"addl\t%0,%4,%1\\n\\t\"\n-\t\"stl_c\t%1,%2\\n\\t\"\n-\t\"beq\t%1,2f\\n\"\n-\t\".subsection 1\\n\"\n-\t\"2:\\t\"\n-\t\"br\t1b\\n\"\n-\t\".previous\\n\\t\"\n-\t\"mb\\n\\t\"\n-\t\"/* End exchange & add */\"\n-\t: \"=&r\"(__result), \"=&r\"(__tmp), \"=m\"(*__mem)\n-\t: \"m\" (*__mem), \"r\"(__val));\n+      \"\\n$Lxadd_%=:\\n\\t\"\n+      \"ldl_l  %0,%3\\n\\t\"\n+      \"addl   %0,%4,%1\\n\\t\"\n+      \"stl_c  %1,%2\\n\\t\"\n+      \"beq    %1,$Lxadd_%=\\n\\t\"\n+      \"mb\"\n+      : \"=&r\"(__result), \"=&r\"(__tmp), \"=m\"(*__mem)\n+      : \"m\" (*__mem), \"r\"(__val));\n \n   return __result;\n }\n@@ -54,20 +53,14 @@ __atomic_add (volatile _Atomic_word* __mem, int __val)\n   register _Atomic_word __result;\n \n   __asm__ __volatile__ (\n-\t\"/* Inline exchange & add */\\n\"\n-\t\"1:\\t\"\n-\t\"ldl_l\t%0,%2\\n\\t\"\n-\t\"addl\t%0,%3,%0\\n\\t\"\n-\t\"stl_c\t%0,%1\\n\\t\"\n-\t\"beq\t%0,2f\\n\\t\"\n-\t\".subsection 1\\n\"\n-\t\"2:\\t\"\n-\t\"br\t1b\\n\"\n-\t\".previous\\n\\t\"\n-\t\"mb\\n\\t\"\n-\t\"/* End exchange & add */\"\n-\t: \"=&r\"(__result), \"=m\"(*__mem)\n-\t: \"m\" (*__mem), \"r\"(__val));\n+      \"\\n$Ladd_%=:\\n\\t\"\n+      \"ldl_l  %0,%2\\n\\t\"\n+      \"addl   %0,%3,%0\\n\\t\"\n+      \"stl_c  %0,%1\\n\\t\"\n+      \"beq    %0,$Ladd_%=\\n\\t\"\n+      \"mb\"\n+      : \"=&r\"(__result), \"=m\"(*__mem)\n+      : \"m\" (*__mem), \"r\"(__val));\n }\n \n static inline int\n@@ -77,23 +70,16 @@ __compare_and_swap (volatile long *__p, long __oldval, long __newval)\n   int __ret;\n \n   __asm__ __volatile__ (\n-\t\"/* Inline compare & swap */\\n\"\n-\t\"1:\\t\"\n-\t\"ldq_l\t%0,%4\\n\\t\"\n-\t\"cmpeq\t%0,%2,%0\\n\\t\"\n-\t\"beq\t%0,3f\\n\\t\"\n-\t\"mov\t%3,%0\\n\\t\"\n-\t\"stq_c\t%0,%1\\n\\t\"\n-\t\"beq\t%0,2f\\n\\t\"\n-\t\".subsection 1\\n\"\n-\t\"2:\\t\"\n-\t\"br\t1b\\n\"\n-\t\".previous\\n\\t\"\n-\t\"3:\\t\"\n-\t\"mb\\n\\t\"\n-\t\"/* End compare & swap */\"\n-\t: \"=&r\"(__ret), \"=m\"(*__p)\n-\t: \"r\"(__oldval), \"r\"(__newval), \"m\"(*__p));\n+      \"\\n$Lcas_%=:\\n\\t\"\n+      \"ldq_l  %0,%4\\n\\t\"\n+      \"cmpeq  %0,%2,%0\\n\\t\"\n+      \"beq    %0,3f\\n\\t\"\n+      \"mov    %3,%0\\n\\t\"\n+      \"stq_c  %0,%1\\n\\t\"\n+      \"beq    %0,$Lcas_%=\\n\\t\"\n+      \"mb\"\n+      : \"=&r\"(__ret), \"=m\"(*__p)\n+      : \"r\"(__oldval), \"r\"(__newval), \"m\"(*__p));\n \n   return __ret;\n }"}]}