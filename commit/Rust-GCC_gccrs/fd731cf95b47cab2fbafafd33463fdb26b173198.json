{"sha": "fd731cf95b47cab2fbafafd33463fdb26b173198", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ3MzFjZjk1YjQ3Y2FiMmZiYWZhZmQzMzQ2M2ZkYjI2YjE3MzE5OA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2014-10-24T11:51:19Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2014-10-24T11:51:19Z"}, "message": "vbsl.c: New file.\n\n2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vbsl.c: New file.\n\nFrom-SVN: r216654", "tree": {"sha": "1b30808b5c12f3c24812361fe0832097a8dd504e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b30808b5c12f3c24812361fe0832097a8dd504e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd731cf95b47cab2fbafafd33463fdb26b173198", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd731cf95b47cab2fbafafd33463fdb26b173198", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd731cf95b47cab2fbafafd33463fdb26b173198", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd731cf95b47cab2fbafafd33463fdb26b173198/comments", "author": null, "committer": null, "parents": [{"sha": "3a453a5cff214aaf901da09d6b5da5298a22eb4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a453a5cff214aaf901da09d6b5da5298a22eb4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a453a5cff214aaf901da09d6b5da5298a22eb4d"}], "stats": {"total": 128, "additions": 128, "deletions": 0}, "files": [{"sha": "40ebc757bed7b5217ebcd4b79776e39c3c2f832f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd731cf95b47cab2fbafafd33463fdb26b173198/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd731cf95b47cab2fbafafd33463fdb26b173198/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd731cf95b47cab2fbafafd33463fdb26b173198", "patch": "@@ -1,3 +1,7 @@\n+2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vbsl.c: New file.\n+\n 2014-10-24  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vaddw.c: New file."}, {"sha": "bb17f0a9649beedaf0c054679b3efc1a86463c35", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vbsl.c", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd731cf95b47cab2fbafafd33463fdb26b173198/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvbsl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd731cf95b47cab2fbafafd33463fdb26b173198/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvbsl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvbsl.c?ref=fd731cf95b47cab2fbafafd33463fdb26b173198", "patch": "@@ -0,0 +1,124 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf2, 0xf2, 0xf2, 0xf2,\n+\t\t\t\t       0xf6, 0xf6, 0xf6, 0xf6 };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfff0, 0xfff0, 0xfff2, 0xfff2 };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffff0, 0xfffffff0 };\n+VECT_VAR_DECL(expected,int,64,1) [] = { 0xfffffffffffffffd };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xf3, 0xf3, 0xf3, 0xf3,\n+\t\t\t\t\t0xf7, 0xf7, 0xf7, 0xf7 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xfff0, 0xfff0, 0xfff2, 0xfff2 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xfffffff0, 0xfffffff0 };\n+VECT_VAR_DECL(expected,uint,64,1) [] = { 0xfffffff1 };\n+VECT_VAR_DECL(expected,poly,8,8) [] = { 0xf3, 0xf3, 0xf3, 0xf3,\n+\t\t\t\t\t0xf7, 0xf7, 0xf7, 0xf7 };\n+VECT_VAR_DECL(expected,poly,16,4) [] = { 0xfff0, 0xfff0, 0xfff2, 0xfff2 };\n+VECT_VAR_DECL(expected,hfloat,32,2) [] = { 0xc1800004, 0xc1700004 };\n+VECT_VAR_DECL(expected,int,8,16) [] = { 0xf2, 0xf2, 0xf2, 0xf2,\n+\t\t\t\t\t0xf6, 0xf6, 0xf6, 0xf6,\n+\t\t\t\t\t0xf2, 0xf2, 0xf2, 0xf2,\n+\t\t\t\t\t0xf6, 0xf6, 0xf6, 0xf6 };\n+VECT_VAR_DECL(expected,int,16,8) [] = { 0xfff0, 0xfff0, 0xfff2, 0xfff2,\n+\t\t\t\t\t0xfff4, 0xfff4, 0xfff6, 0xfff6 };\n+VECT_VAR_DECL(expected,int,32,4) [] = { 0xfffffff0, 0xfffffff0,\n+\t\t\t\t\t0xfffffff2, 0xfffffff2 };\n+VECT_VAR_DECL(expected,int,64,2) [] = { 0xfffffffffffffffd,\n+\t\t\t\t\t0xfffffffffffffffd };\n+VECT_VAR_DECL(expected,uint,8,16) [] = { 0xf3, 0xf3, 0xf3, 0xf3,\n+\t\t\t\t\t 0xf7, 0xf7, 0xf7, 0xf7,\n+\t\t\t\t\t 0xf3, 0xf3, 0xf3, 0xf3,\n+\t\t\t\t\t 0xf7, 0xf7, 0xf7, 0xf7 };\n+VECT_VAR_DECL(expected,uint,16,8) [] = { 0xfff0, 0xfff0, 0xfff2, 0xfff2,\n+\t\t\t\t\t 0xfff4, 0xfff4, 0xfff6, 0xfff6 };\n+VECT_VAR_DECL(expected,uint,32,4) [] = { 0xfffffff0, 0xfffffff0,\n+\t\t\t\t\t 0xfffffff2, 0xfffffff2 };\n+VECT_VAR_DECL(expected,uint,64,2) [] = { 0xfffffff1,\n+\t\t\t\t\t 0xfffffff1 };\n+VECT_VAR_DECL(expected,poly,8,16) [] = { 0xf3, 0xf3, 0xf3, 0xf3,\n+\t\t\t\t\t 0xf7, 0xf7, 0xf7, 0xf7,\n+\t\t\t\t\t 0xf3, 0xf3, 0xf3, 0xf3,\n+\t\t\t\t\t 0xf7, 0xf7, 0xf7, 0xf7 };\n+VECT_VAR_DECL(expected,poly,16,8) [] = { 0xfff0, 0xfff0, 0xfff2, 0xfff2,\n+\t\t\t\t\t 0xfff4, 0xfff4, 0xfff6, 0xfff6 };\n+VECT_VAR_DECL(expected,hfloat,32,4) [] = { 0xc1800001, 0xc1700001,\n+\t\t\t\t\t   0xc1600001, 0xc1500001 };\n+\n+#define TEST_MSG \"VBSL/VBSLQ\"\n+void exec_vbsl (void)\n+{\n+  /* Basic test: y=vbsl(unsigned_vec,x1,x2), then store the result.  */\n+#define TEST_VBSL(T3, Q, T1, T2, W, N)\t\t\t\t\t\\\n+  VECT_VAR(vector_res, T1, W, N) =\t\t\t\t\t\\\n+    vbsl##Q##_##T2##W(VECT_VAR(vector_first, T3, W, N),\t\t\t\\\n+\t\t      VECT_VAR(vector, T1, W, N),\t\t\t\\\n+\t\t      VECT_VAR(vector2, T1, W, N));\t\t\t\\\n+  vst1##Q##_##T2##W(VECT_VAR(result, T1, W, N), VECT_VAR(vector_res, T1, W, N))\n+\n+  DECL_VARIABLE_ALL_VARIANTS(vector);\n+  DECL_VARIABLE_ALL_VARIANTS(vector2);\n+  DECL_VARIABLE_ALL_VARIANTS(vector_res);\n+\n+  DECL_VARIABLE_UNSIGNED_VARIANTS(vector_first);\n+\n+  clean_results ();\n+\n+  TEST_MACRO_ALL_VARIANTS_2_5(VLOAD, vector, buffer);\n+  VLOAD(vector, buffer, , float, f, 32, 2);\n+  VLOAD(vector, buffer, q, float, f, 32, 4);\n+\n+  /* Choose init value arbitrarily, will be used for vector\n+     comparison. As we want different values for each type variant, we\n+     can't use generic initialization macros.  */\n+  VDUP(vector2, , int, s, 8, 8, -10);\n+  VDUP(vector2, , int, s, 16, 4, -14);\n+  VDUP(vector2, , int, s, 32, 2, -30);\n+  VDUP(vector2, , int, s, 64, 1, -33);\n+  VDUP(vector2, , uint, u, 8, 8, 0xF3);\n+  VDUP(vector2, , uint, u, 16, 4, 0xFFF2);\n+  VDUP(vector2, , uint, u, 32, 2, 0xFFFFFFF0);\n+  VDUP(vector2, , uint, u, 64, 1, 0xFFFFFFF3);\n+  VDUP(vector2, , float, f, 32, 2, -30.3f);\n+  VDUP(vector2, , poly, p, 8, 8, 0xF3);\n+  VDUP(vector2, , poly, p, 16, 4, 0xFFF2);\n+\n+  VDUP(vector2, q, int, s, 8, 16, -10);\n+  VDUP(vector2, q, int, s, 16, 8, -14);\n+  VDUP(vector2, q, int, s, 32, 4, -30);\n+  VDUP(vector2, q, int, s, 64, 2, -33);\n+  VDUP(vector2, q, uint, u, 8, 16, 0xF3);\n+  VDUP(vector2, q, uint, u, 16, 8, 0xFFF2);\n+  VDUP(vector2, q, uint, u, 32, 4, 0xFFFFFFF0);\n+  VDUP(vector2, q, uint, u, 64, 2, 0xFFFFFFF3);\n+  VDUP(vector2, q, poly, p, 8, 16, 0xF3);\n+  VDUP(vector2, q, poly, p, 16, 8, 0xFFF2);\n+  VDUP(vector2, q, float, f, 32, 4, -30.4f);\n+\n+  VDUP(vector_first, , uint, u, 8, 8, 0xF4);\n+  VDUP(vector_first, , uint, u, 16, 4, 0xFFF6);\n+  VDUP(vector_first, , uint, u, 32, 2, 0xFFFFFFF2);\n+  VDUP(vector_first, , uint, u, 64, 1, 0xFFFFFFF2);\n+  VDUP(vector_first, q, uint, u, 8, 16, 0xF4);\n+  VDUP(vector_first, q, uint, u, 16, 8, 0xFFF6);\n+  VDUP(vector_first, q, uint, u, 32, 4, 0xFFFFFFF2);\n+  VDUP(vector_first, q, uint, u, 64, 2, 0xFFFFFFF2);\n+\n+  /* Execute the tests.  */\n+  TEST_MACRO_ALL_VARIANTS_1_5(TEST_VBSL, uint);\n+  TEST_VBSL(uint, , poly, p, 8, 8);\n+  TEST_VBSL(uint, , poly, p, 16, 4);\n+  TEST_VBSL(uint, q, poly, p, 8, 16);\n+  TEST_VBSL(uint, q, poly, p, 16, 8);\n+  TEST_VBSL(uint, , float, f, 32, 2);\n+  TEST_VBSL(uint, q, float, f, 32, 4);\n+\n+  CHECK_RESULTS (TEST_MSG, \"\");\n+}\n+\n+int main (void)\n+{\n+  exec_vbsl ();\n+  return 0;\n+}"}]}