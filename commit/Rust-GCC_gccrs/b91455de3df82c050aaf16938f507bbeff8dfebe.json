{"sha": "b91455de3df82c050aaf16938f507bbeff8dfebe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkxNDU1ZGUzZGY4MmMwNTBhYWYxNjkzOGY1MDdiYmVmZjhkZmViZQ==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@rr.iij4u.or.jp", "date": "2001-06-04T00:20:46Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-06-04T00:20:46Z"}, "message": "sh.c (print_operand_address, [...]): Call mark_constant_pool_use before output_addr_const.\n\n* gcc/config/sh/sh.c (print_operand_address, print_operand): Call\nmark_constant_pool_use before output_addr_const.\n(struct pool_node): New field wend.\n(add_constant): Note a sequence of constants that are referenced\nby a given label.\n(pool_window_label, pool_window_last): New variables.\n(dump_table): Emit a unspec_volatile representing the end of a\nsequence of constants.\n(mark_constant_pool_use): New function.\n* gcc/config/sh/sh.md (UNSPECV_WINDOW_END): New constant.\n(consttable_2): Add the second operand which flags whether\nthis consttable entry was used or not.\n(consttable_4, consttable_8, consttable_sf, consttable_df):\nLikewise.\n(consttable_window_end): New insn.\n\nFrom-SVN: r42841", "tree": {"sha": "3423a948c000012cdd67abb72ce6f87c613e24b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3423a948c000012cdd67abb72ce6f87c613e24b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b91455de3df82c050aaf16938f507bbeff8dfebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b91455de3df82c050aaf16938f507bbeff8dfebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b91455de3df82c050aaf16938f507bbeff8dfebe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b91455de3df82c050aaf16938f507bbeff8dfebe/comments", "author": {"login": "kazkojima", "id": 14949970, "node_id": "MDQ6VXNlcjE0OTQ5OTcw", "avatar_url": "https://avatars.githubusercontent.com/u/14949970?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kazkojima", "html_url": "https://github.com/kazkojima", "followers_url": "https://api.github.com/users/kazkojima/followers", "following_url": "https://api.github.com/users/kazkojima/following{/other_user}", "gists_url": "https://api.github.com/users/kazkojima/gists{/gist_id}", "starred_url": "https://api.github.com/users/kazkojima/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kazkojima/subscriptions", "organizations_url": "https://api.github.com/users/kazkojima/orgs", "repos_url": "https://api.github.com/users/kazkojima/repos", "events_url": "https://api.github.com/users/kazkojima/events{/privacy}", "received_events_url": "https://api.github.com/users/kazkojima/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5d9669fd547e91ddfacd59c2012ecd26fd6cb906", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d9669fd547e91ddfacd59c2012ecd26fd6cb906", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d9669fd547e91ddfacd59c2012ecd26fd6cb906"}], "stats": {"total": 209, "additions": 182, "deletions": 27}, "files": [{"sha": "0bdd10cf71a2ebd7b367b19c05d7d9c6e7b7f7f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91455de3df82c050aaf16938f507bbeff8dfebe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91455de3df82c050aaf16938f507bbeff8dfebe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b91455de3df82c050aaf16938f507bbeff8dfebe", "patch": "@@ -1,3 +1,21 @@\n+2001-06-03  kaz Kojima  <kkojima@rr.iij4u.or.jp>\n+\n+\t* gcc/config/sh/sh.c (print_operand_address, print_operand): Call\n+\tmark_constant_pool_use before output_addr_const.\n+\t(struct pool_node): New field wend.\n+\t(add_constant): Note a sequence of constants that are referenced\n+\tby a given label.\n+\t(pool_window_label, pool_window_last): New variables.\n+\t(dump_table): Emit a unspec_volatile representing the end of a\n+\tsequence of constants.\n+\t(mark_constant_pool_use): New function.\n+\t* gcc/config/sh/sh.md (UNSPECV_WINDOW_END): New constant.\n+\t(consttable_2): Add the second operand which flags whether\n+\tthis consttable entry was used or not.\n+\t(consttable_4, consttable_8, consttable_sf, consttable_df):\n+\tLikewise.\n+\t(consttable_window_end): New insn.\n+\n 2001-06-03  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* insn-addr.h (INSN_ADDRESSES_NEW): Make insn_uid__ unsigned."}, {"sha": "0c18256131ad35feb7ebc2bec39714752d1e9374", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 126, "deletions": 13, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91455de3df82c050aaf16938f507bbeff8dfebe/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91455de3df82c050aaf16938f507bbeff8dfebe/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=b91455de3df82c050aaf16938f507bbeff8dfebe", "patch": "@@ -147,6 +147,7 @@ static void push_regs PARAMS ((int, int));\n static int calc_live_regs PARAMS ((int *, int *));\n static void mark_use PARAMS ((rtx, rtx *));\n static HOST_WIDE_INT rounded_frame_size PARAMS ((int));\n+static rtx mark_constant_pool_use PARAMS ((rtx));\n \f\n /* Print the operand address in x to the stream.  */\n \n@@ -201,6 +202,7 @@ print_operand_address (stream, x)\n       break;\n \n     default:\n+      x = mark_constant_pool_use (x);\n       output_addr_const (stream, x);\n       break;\n     }\n@@ -261,6 +263,7 @@ print_operand (stream, x, code)\n \tfprintf (stream, \"\\n\\tnop\");\n       break;\n     case 'O':\n+      x = mark_constant_pool_use (x);\n       output_addr_const (stream, x);\n       break;\n     case 'R':\n@@ -1932,6 +1935,7 @@ typedef struct\n {\n   rtx value;\t\t\t/* Value in table.  */\n   rtx label;\t\t\t/* Label of value.  */\n+  rtx wend;\t\t\t/* End of window.  */\n   enum machine_mode mode;\t/* Mode of value.  */\n } pool_node;\n \n@@ -1942,6 +1946,8 @@ typedef struct\n #define MAX_POOL_SIZE (1020/4)\n static pool_node pool_vector[MAX_POOL_SIZE];\n static int pool_size;\n+static rtx pool_window_label;\n+static int pool_window_last;\n \n /* ??? If we need a constant in HImode which is the truncated value of a\n    constant we need in SImode, we could combine the two entries thus saving\n@@ -1962,7 +1968,7 @@ add_constant (x, mode, last_value)\n      rtx last_value;\n {\n   int i;\n-  rtx lab;\n+  rtx lab, new, ref, newref;\n \n   /* First see if we've already got it.  */\n   for (i = 0; i < pool_size; i++)\n@@ -1977,15 +1983,25 @@ add_constant (x, mode, last_value)\n \t    }\n \t  if (rtx_equal_p (x, pool_vector[i].value))\n \t    {\n-\t      lab = 0;\n+\t      lab = new = 0;\n \t      if (! last_value\n \t\t  || ! i\n \t\t  || ! rtx_equal_p (last_value, pool_vector[i-1].value))\n \t\t{\n-\t\t  lab = pool_vector[i].label;\n-\t\t  if (! lab)\n-\t\t    pool_vector[i].label = lab = gen_label_rtx ();\n+\t\t  new = gen_label_rtx ();\n+\t\t  LABEL_REFS (new) = pool_vector[i].label;\n+\t\t  pool_vector[i].label = lab = new;\n \t\t}\n+\t      if (lab && pool_window_label)\n+\t\t{\n+\t\t  newref = gen_rtx_LABEL_REF (VOIDmode, pool_window_label);\n+\t\t  ref = pool_vector[pool_window_last].wend;\n+\t\t  LABEL_NEXTREF (newref) = ref;\n+\t\t  pool_vector[pool_window_last].wend = newref;\n+\t\t}\n+\t      if (new)\n+\t\tpool_window_label = new;\n+\t      pool_window_last = i;\n \t      return lab;\n \t    }\n \t}\n@@ -1999,6 +2015,17 @@ add_constant (x, mode, last_value)\n     lab = gen_label_rtx ();\n   pool_vector[pool_size].mode = mode;\n   pool_vector[pool_size].label = lab;\n+  pool_vector[pool_size].wend = NULL_RTX;\n+  if (lab && pool_window_label)\n+    {\n+      newref = gen_rtx_LABEL_REF (VOIDmode, pool_window_label);\n+      ref = pool_vector[pool_window_last].wend;\n+      LABEL_NEXTREF (newref) = ref;\n+      pool_vector[pool_window_last].wend = newref;\n+    }\n+  if (lab)\n+    pool_window_label = lab;\n+  pool_window_last = pool_size;\n   pool_size++;\n   return lab;\n }\n@@ -2011,6 +2038,7 @@ dump_table (scan)\n {\n   int i;\n   int need_align = 1;\n+  rtx lab, ref;\n \n   /* Do two passes, first time dump out the HI sized constants.  */\n \n@@ -2025,8 +2053,15 @@ dump_table (scan)\n \t      scan = emit_insn_after (gen_align_2 (), scan);\n \t      need_align = 0;\n \t    }\n-\t  scan = emit_label_after (p->label, scan);\n-\t  scan = emit_insn_after (gen_consttable_2 (p->value), scan);\n+\t  for (lab = p->label; lab; lab = LABEL_REFS (lab))\n+\t    scan = emit_label_after (lab, scan);\n+\t  scan = emit_insn_after (gen_consttable_2 (p->value, const0_rtx),\n+\t\t\t\t  scan);\n+\t  for (ref = p->wend; ref; ref = LABEL_NEXTREF (ref))\n+\t    {\n+\t      lab = XEXP (ref, 0);\n+\t      scan = emit_insn_after (gen_consttable_window_end (lab), scan);\n+\t    }\n \t}\n     }\n \n@@ -2048,9 +2083,10 @@ dump_table (scan)\n \t      scan = emit_label_after (gen_label_rtx (), scan);\n \t      scan = emit_insn_after (gen_align_4 (), scan);\n \t    }\n-\t  if (p->label)\n-\t    scan = emit_label_after (p->label, scan);\n-\t  scan = emit_insn_after (gen_consttable_4 (p->value), scan);\n+\t  for (lab = p->label; lab; lab = LABEL_REFS (lab))\n+\t    scan = emit_label_after (lab, scan);\n+\t  scan = emit_insn_after (gen_consttable_4 (p->value, const0_rtx),\n+\t\t\t\t  scan);\n \t  break;\n \tcase DFmode:\n \tcase DImode:\n@@ -2060,19 +2096,31 @@ dump_table (scan)\n \t      scan = emit_label_after (gen_label_rtx (), scan);\n \t      scan = emit_insn_after (gen_align_4 (), scan);\n \t    }\n-\t  if (p->label)\n-\t    scan = emit_label_after (p->label, scan);\n-\t  scan = emit_insn_after (gen_consttable_8 (p->value), scan);\n+\t  for (lab = p->label; lab; lab = LABEL_REFS (lab))\n+\t    scan = emit_label_after (lab, scan);\n+\t  scan = emit_insn_after (gen_consttable_8 (p->value, const0_rtx),\n+\t\t\t\t  scan);\n \t  break;\n \tdefault:\n \t  abort ();\n \t  break;\n \t}\n+\n+      if (p->mode != HImode)\n+\t{\n+\t  for (ref = p->wend; ref; ref = LABEL_NEXTREF (ref))\n+\t    {\n+\t      lab = XEXP (ref, 0);\n+\t      scan = emit_insn_after (gen_consttable_window_end (lab), scan);\n+\t    }\n+\t}\n     }\n \n   scan = emit_insn_after (gen_consttable_end (), scan);\n   scan = emit_barrier_after (scan);\n   pool_size = 0;\n+  pool_window_label = NULL_RTX;\n+  pool_window_last = 0;\n }\n \n /* Return non-zero if constant would be an ok source for a\n@@ -5386,3 +5434,68 @@ legitimize_pic_address (orig, mode, reg)\n     }\n   return orig;\n }\n+\n+/* Mark the use of a constant in the literal table. If the constant\n+   has multiple labels, make it unique.  */\n+static rtx mark_constant_pool_use (x)\n+     rtx x;\n+{\n+  rtx insn, lab, pattern;\n+\n+  if (x == NULL)\n+    return x;\n+\n+  switch (GET_CODE (x))\n+    {\n+    case LABEL_REF:\n+      x = XEXP (x, 0);\n+    case CODE_LABEL:\n+      break;\n+    default:\n+      return x;\n+    }\n+\n+  /* Get the first label in the list of labels for the same constant\n+     and delete another labels in the list.  */\n+  lab = x;\n+  for (insn = PREV_INSN (x); insn; insn = PREV_INSN (insn))\n+    {\n+      if (GET_CODE (insn) != CODE_LABEL\n+\t  || LABEL_REFS (insn) != NEXT_INSN (insn))\n+\tbreak;\n+      lab = insn;\n+    }\n+\n+  for (insn = LABEL_REFS (lab); insn; insn = LABEL_REFS (insn))\n+    INSN_DELETED_P (insn) = 1;\n+\n+  /* Mark constants in a window.  */\n+  for (insn = NEXT_INSN (x); insn; insn = NEXT_INSN (insn))\n+    {\n+      if (GET_CODE (insn) != INSN)\n+\tcontinue;\n+\n+      pattern = PATTERN (insn);\n+      if (GET_CODE (pattern) != UNSPEC_VOLATILE)\n+\tcontinue;\n+\n+      switch (XINT (pattern, 1))\n+\t{\n+\tcase UNSPECV_CONST2:\n+\tcase UNSPECV_CONST4:\n+\tcase UNSPECV_CONST8:\n+\t  XVECEXP (pattern, 0, 1) = const1_rtx;\n+\t  break;\n+\tcase UNSPECV_WINDOW_END:\n+\t  if (XVECEXP (pattern, 0, 0) == x)\n+\t    return lab;\n+\t  break;\n+\tcase UNSPECV_CONST_END:\n+\t  return lab;\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+\n+  return lab;\n+}"}, {"sha": "d1cde714753bd74d9f61fc217cae5c7bc5a2ce04", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b91455de3df82c050aaf16938f507bbeff8dfebe/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b91455de3df82c050aaf16938f507bbeff8dfebe/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=b91455de3df82c050aaf16938f507bbeff8dfebe", "patch": "@@ -117,6 +117,7 @@\n   (UNSPECV_CONST2\t2)\n   (UNSPECV_CONST4\t4)\n   (UNSPECV_CONST8\t6)\n+  (UNSPECV_WINDOW_END\t10)\n   (UNSPECV_CONST_END\t11)\n ])  \n \n@@ -4120,12 +4121,14 @@\n ; 2 byte integer in line\n \n (define_insn \"consttable_2\"\n- [(unspec_volatile [(match_operand:SI 0 \"general_operand\" \"=g\")]\n+ [(unspec_volatile [(match_operand:SI 0 \"general_operand\" \"=g\")\n+\t\t    (match_operand 1 \"\" \"\")]\n \t\t   UNSPECV_CONST2)]\n  \"\"\n  \"*\n {\n-  assemble_integer (operands[0], 2, 1);\n+  if (operands[1] != const0_rtx)\n+    assemble_integer (operands[0], 2, 1);\n   return \\\"\\\";\n }\"\n  [(set_attr \"length\" \"2\")\n@@ -4134,12 +4137,14 @@\n ; 4 byte integer in line\n \n (define_insn \"consttable_4\"\n- [(unspec_volatile [(match_operand:SI 0 \"general_operand\" \"=g\")]\n+ [(unspec_volatile [(match_operand:SI 0 \"general_operand\" \"=g\")\n+\t\t    (match_operand 1 \"\" \"\")]\n \t\t   UNSPECV_CONST4)]\n  \"\"\n  \"*\n {\n-  assemble_integer (operands[0], 4, 1);\n+  if (operands[1] != const0_rtx)\n+    assemble_integer (operands[0], 4, 1);\n   return \\\"\\\";\n }\"\n  [(set_attr \"length\" \"4\")\n@@ -4148,12 +4153,14 @@\n ; 8 byte integer in line\n \n (define_insn \"consttable_8\"\n- [(unspec_volatile [(match_operand:SI 0 \"general_operand\" \"=g\")]\n+ [(unspec_volatile [(match_operand:SI 0 \"general_operand\" \"=g\")\n+\t\t    (match_operand 1 \"\" \"\")]\n \t\t   UNSPECV_CONST8)]\n  \"\"\n  \"*\n {\n-  assemble_integer (operands[0], 8, 1);\n+  if (operands[1] != const0_rtx)\n+    assemble_integer (operands[0], 8, 1);\n   return \\\"\\\";\n }\"\n  [(set_attr \"length\" \"8\")\n@@ -4162,14 +4169,18 @@\n ; 4 byte floating point\n \n (define_insn \"consttable_sf\"\n- [(unspec_volatile [(match_operand:SF 0 \"general_operand\" \"=g\")]\n+ [(unspec_volatile [(match_operand:SF 0 \"general_operand\" \"=g\")\n+\t\t    (match_operand 1 \"\" \"\")]\n \t\t   UNSPECV_CONST4)]\n  \"\"\n  \"*\n {\n-  union real_extract u;\n-  memcpy (&u, &CONST_DOUBLE_LOW (operands[0]), sizeof u);\n-  assemble_real (u.d, SFmode);\n+  if (operands[1] != const0_rtx)\n+    {\n+      union real_extract u;\n+      memcpy (&u, &CONST_DOUBLE_LOW (operands[0]), sizeof u);\n+      assemble_real (u.d, SFmode);\n+    }\n   return \\\"\\\";\n }\"\n  [(set_attr \"length\" \"4\")\n@@ -4178,14 +4189,18 @@\n ; 8 byte floating point\n \n (define_insn \"consttable_df\"\n- [(unspec_volatile [(match_operand:DF 0 \"general_operand\" \"=g\")]\n+ [(unspec_volatile [(match_operand:DF 0 \"general_operand\" \"=g\")\n+\t\t    (match_operand 1 \"\" \"\")]\n \t\t   UNSPECV_CONST8)]\n  \"\"\n  \"*\n {\n-  union real_extract u;\n-  memcpy (&u, &CONST_DOUBLE_LOW (operands[0]), sizeof u);\n-  assemble_real (u.d, DFmode);\n+  if (operands[1] != const0_rtx)\n+    {\n+      union real_extract u;\n+      memcpy (&u, &CONST_DOUBLE_LOW (operands[0]), sizeof u);\n+      assemble_real (u.d, DFmode);\n+    }\n   return \\\"\\\";\n }\"\n  [(set_attr \"length\" \"8\")\n@@ -4231,6 +4246,15 @@\n   \"* return output_jump_label_table ();\"\n   [(set_attr \"in_delay_slot\" \"no\")])\n \n+; emitted at the end of the window in the literal table.\n+\n+(define_insn \"consttable_window_end\"\n+  [(unspec_volatile [(match_operand 0 \"\" \"\")] UNSPECV_WINDOW_END)]\n+  \"\"\n+  \"\"\n+  [(set_attr \"length\" \"0\")\n+   (set_attr \"in_delay_slot\" \"no\")])\n+\n ;; -------------------------------------------------------------------------\n ;; Misc\n ;; -------------------------------------------------------------------------"}]}