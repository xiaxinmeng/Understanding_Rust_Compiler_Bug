{"sha": "9b44f5d907f60d7a02ebef69d235ab48ed5eadd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI0NGY1ZDkwN2Y2MGQ3YTAyZWJlZjY5ZDIzNWFiNDhlZDVlYWRkNQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2012-08-03T14:43:09Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2012-08-03T14:43:09Z"}, "message": "re PR middle-end/54146 (Very slow compile with attribute((flatten)))\n\n\tPR tree-optimization/54146\n\t* cfgexpand.c (add_scope_conflicts_1): Use bitmap_ior_into.\n\t(add_scope_conflicts): Iterate in RPO order.\n\t(add_stack_protection_conflicts): Iterate over the other triangle.\n\t(fini_vars_expansion): Clear stack_vars_sorted.\n\nFrom-SVN: r190126", "tree": {"sha": "0acd6e083bdf5f15806c19d466acea6b8e12926a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0acd6e083bdf5f15806c19d466acea6b8e12926a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b44f5d907f60d7a02ebef69d235ab48ed5eadd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b44f5d907f60d7a02ebef69d235ab48ed5eadd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b44f5d907f60d7a02ebef69d235ab48ed5eadd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b44f5d907f60d7a02ebef69d235ab48ed5eadd5/comments", "author": null, "committer": null, "parents": [{"sha": "4e7c4b7301cfb6f74e398b9e86f63fadd4d82665", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e7c4b7301cfb6f74e398b9e86f63fadd4d82665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e7c4b7301cfb6f74e398b9e86f63fadd4d82665"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "193c2d3b5b151153296fbd30f81fe10bf3edc189", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b44f5d907f60d7a02ebef69d235ab48ed5eadd5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b44f5d907f60d7a02ebef69d235ab48ed5eadd5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b44f5d907f60d7a02ebef69d235ab48ed5eadd5", "patch": "@@ -1,4 +1,12 @@\n-2012-08-03 Marc Glisse <marc.glisse@inria.fr>\n+2012-08-03  Michael Matz  <matz@suse.de>\n+\n+\tPR tree-optimization/54146\n+\t* cfgexpand.c (add_scope_conflicts_1): Use bitmap_ior_into.\n+\t(add_scope_conflicts): Iterate in RPO order.\n+\t(add_stack_protection_conflicts): Iterate over the other triangle.\n+\t(fini_vars_expansion): Clear stack_vars_sorted.\n+\n+2012-08-03  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR tree-optimization/30318\n \t* double-int.c (mul_double_wide_with_sign): New function."}, {"sha": "9bf6af64224c1fda41a5cf63457a0e29b80db166", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b44f5d907f60d7a02ebef69d235ab48ed5eadd5/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b44f5d907f60d7a02ebef69d235ab48ed5eadd5/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=9b44f5d907f60d7a02ebef69d235ab48ed5eadd5", "patch": "@@ -429,10 +429,10 @@ add_scope_conflicts_1 (basic_block bb, bitmap work, bool for_conflict)\n \t      unsigned i;\n \t      EXECUTE_IF_SET_IN_BITMAP (work, 0, i, bi)\n \t\t{\n-\t\t  unsigned j;\n-\t\t  bitmap_iterator bj;\n-\t\t  EXECUTE_IF_SET_IN_BITMAP (work, i + 1, j, bj)\n-\t\t    add_stack_var_conflict (i, j);\n+\t\t  struct stack_var *a = &stack_vars[i];\n+\t\t  if (!a->conflicts)\n+\t\t    a->conflicts = BITMAP_ALLOC (NULL);\n+\t\t  bitmap_ior_into (a->conflicts, work);\n \t\t}\n \t      visit = visit_conflict;\n \t    }\n@@ -450,6 +450,8 @@ add_scope_conflicts (void)\n   basic_block bb;\n   bool changed;\n   bitmap work = BITMAP_ALLOC (NULL);\n+  int *rpo;\n+  int n_bbs;\n \n   /* We approximate the live range of a stack variable by taking the first\n      mention of its name as starting point(s), and by the end-of-scope\n@@ -464,13 +466,19 @@ add_scope_conflicts (void)\n   FOR_ALL_BB (bb)\n     bb->aux = BITMAP_ALLOC (NULL);\n \n+  rpo = XNEWVEC (int, last_basic_block);\n+  n_bbs = pre_and_rev_post_order_compute (NULL, rpo, false);\n+\n   changed = true;\n   while (changed)\n     {\n+      int i;\n       changed = false;\n-      FOR_EACH_BB (bb)\n+      for (i = 0; i < n_bbs; i++)\n \t{\n-\t  bitmap active = (bitmap)bb->aux;\n+\t  bitmap active;\n+\t  bb = BASIC_BLOCK (rpo[i]);\n+\t  active = (bitmap)bb->aux;\n \t  add_scope_conflicts_1 (bb, work, false);\n \t  if (bitmap_ior_into (active, work))\n \t    changed = true;\n@@ -480,6 +488,7 @@ add_scope_conflicts (void)\n   FOR_EACH_BB (bb)\n     add_scope_conflicts_1 (bb, work, true);\n \n+  free (rpo);\n   BITMAP_FREE (work);\n   FOR_ALL_BB (bb)\n     BITMAP_FREE (bb->aux);\n@@ -1344,7 +1353,7 @@ add_stack_protection_conflicts (void)\n   for (i = 0; i < n; ++i)\n     {\n       unsigned char ph_i = phase[i];\n-      for (j = 0; j < i; ++j)\n+      for (j = i + 1; j < n; ++j)\n \tif (ph_i != phase[j])\n \t  add_stack_var_conflict (i, j);\n     }\n@@ -1393,6 +1402,7 @@ fini_vars_expansion (void)\n   XDELETEVEC (stack_vars);\n   XDELETEVEC (stack_vars_sorted);\n   stack_vars = NULL;\n+  stack_vars_sorted = NULL;\n   stack_vars_alloc = stack_vars_num = 0;\n   pointer_map_destroy (decl_to_stack_part);\n   decl_to_stack_part = NULL;"}]}