{"sha": "aa2046c41feedde364b54351b44ac6b9fb16017e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWEyMDQ2YzQxZmVlZGRlMzY0YjU0MzUxYjQ0YWM2YjlmYjE2MDE3ZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-09-21T16:16:24Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-09-21T16:16:24Z"}, "message": "jcf-parse.c (get_constant): Decode from IEEE no matter what the target format.\n\n        * jcf-parse.c (get_constant): Decode from IEEE no matter\n        what the target format.\n\nFrom-SVN: r57389", "tree": {"sha": "0e57cc18734dbf546de8e8e5c5c79e0fa50b5b22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e57cc18734dbf546de8e8e5c5c79e0fa50b5b22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa2046c41feedde364b54351b44ac6b9fb16017e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2046c41feedde364b54351b44ac6b9fb16017e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa2046c41feedde364b54351b44ac6b9fb16017e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa2046c41feedde364b54351b44ac6b9fb16017e/comments", "author": null, "committer": null, "parents": [{"sha": "3dc85dfb4af5543dc2b997d19e4c33260e58983b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dc85dfb4af5543dc2b997d19e4c33260e58983b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dc85dfb4af5543dc2b997d19e4c33260e58983b"}], "stats": {"total": 57, "additions": 27, "deletions": 30}, "files": [{"sha": "45776e6e95c01400e65f604385d6bc5522895dd3", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2046c41feedde364b54351b44ac6b9fb16017e/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2046c41feedde364b54351b44ac6b9fb16017e/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=aa2046c41feedde364b54351b44ac6b9fb16017e", "patch": "@@ -1,3 +1,8 @@\n+2002-09-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* jcf-parse.c (get_constant): Decode from IEEE no matter \n+\twhat the target format.\n+\n 2002-09-20  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* ChangeLog: Follow spelling conventions."}, {"sha": "f4bcd998c698a53c94db27c59ba2f1afc0b3f731", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 22, "deletions": 30, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa2046c41feedde364b54351b44ac6b9fb16017e/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa2046c41feedde364b54351b44ac6b9fb16017e/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=aa2046c41feedde364b54351b44ac6b9fb16017e", "patch": "@@ -292,41 +292,33 @@ get_constant (jcf, index)\n       }\n \n     case CONSTANT_Float:\n-      /* ??? Even more ideal would be to import the number using the\n-\t IEEE decode routines, then use whatever format the target\n-\t actually uses.  This would enable Java on VAX to kind work.  */\n-      if (TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT)\n-\t{\n-\t  jint num = JPOOL_INT(jcf, index);\n-\t  long buf = num;\n-\t  REAL_VALUE_TYPE d;\n-\t  real_from_target (&d, &buf, SFmode);\n-\t  value = build_real (float_type_node, d);\n-\t  break;\n-\t}\n-      else\n-\tgoto bad;\n+      {\n+\tjint num = JPOOL_INT(jcf, index);\n+\tlong buf = num;\n+\tREAL_VALUE_TYPE d;\n+\n+\treal_from_target_fmt (&d, &buf, &ieee_single_format);\n+\tvalue = build_real (float_type_node, d);\n+\tbreak;\n+      }\n \n     case CONSTANT_Double:\n-      if (TARGET_FLOAT_FORMAT == IEEE_FLOAT_FORMAT)\n-\t{\n-\t  long buf[2], lo, hi;\n-\t  REAL_VALUE_TYPE d;\n+      {\n+\tlong buf[2], lo, hi;\n+\tREAL_VALUE_TYPE d;\n \n-\t  hi = JPOOL_UINT (jcf, index);\n-\t  lo = JPOOL_UINT (jcf, index+1);\n+\thi = JPOOL_UINT (jcf, index);\n+\tlo = JPOOL_UINT (jcf, index+1);\n \n-\t  if (FLOAT_WORDS_BIG_ENDIAN)\n-\t    buf[0] = hi, buf[1] = lo;\n-\t  else\n-\t    buf[0] = lo, buf[1] = hi;\n+\tif (FLOAT_WORDS_BIG_ENDIAN)\n+\t  buf[0] = hi, buf[1] = lo;\n+\telse\n+\t  buf[0] = lo, buf[1] = hi;\n \n-\t  real_from_target (&d, buf, DFmode);\n-\t  value = build_real (double_type_node, d);\n-\t  break;\n-\t}\n-      else\n-\tgoto bad;\n+\treal_from_target_fmt (&d, &buf, &ieee_double_format);\n+\tvalue = build_real (double_type_node, d);\n+\tbreak;\n+      }\n \n     case CONSTANT_String:\n       {"}]}