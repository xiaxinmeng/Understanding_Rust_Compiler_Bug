{"sha": "6f4f1a507979b0a6839ccea1d34b8ee1dc83b18e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY0ZjFhNTA3OTc5YjBhNjgzOWNjZWExZDM0YjhlZTFkYzgzYjE4ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-03-18T13:36:16Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-03-18T13:36:16Z"}, "message": "tree-data-ref.h (struct access_matrix): Remove.\n\n2015-03-18  Richard Biener  <rguenther@suse.de>\n\n\t* tree-data-ref.h (struct access_matrix): Remove.\n\t(AM_LOOP_NEST, AM_NB_INDUCTION_VARS, AM_PARAMETERS, AM_MATRIX,\n\tAM_NB_PARAMETERS, AM_CONST_COLUMN_INDEX, AM_NB_COLUMNS,\n\tAM_GET_SUBSCRIPT_ACCESS_VECTOR, AM_GET_ACCESS_MATRIX_ELEMENT): Likewise.\n\t(am_vector_index_for_loop): Likewise.\n\t(struct data_reference): Remove access_matrix member.\n\t(DR_ACCESS_MATRIX): Remove.\n\t(lambda_vector_new): Add comment.\n\t(lambda_matrix_new): Use XOBNEWVEC.\n\nFrom-SVN: r221488", "tree": {"sha": "091a9feb8f0e17a8170200bbf6bbfcb780215153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/091a9feb8f0e17a8170200bbf6bbfcb780215153"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f4f1a507979b0a6839ccea1d34b8ee1dc83b18e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4f1a507979b0a6839ccea1d34b8ee1dc83b18e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f4f1a507979b0a6839ccea1d34b8ee1dc83b18e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4f1a507979b0a6839ccea1d34b8ee1dc83b18e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9538c95bb185a04a86a993c4332b7f19aca95f1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9538c95bb185a04a86a993c4332b7f19aca95f1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9538c95bb185a04a86a993c4332b7f19aca95f1e"}], "stats": {"total": 81, "additions": 15, "deletions": 66}, "files": [{"sha": "2399f1800c2325c01936c8b633e34e58754aa92b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4f1a507979b0a6839ccea1d34b8ee1dc83b18e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4f1a507979b0a6839ccea1d34b8ee1dc83b18e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f4f1a507979b0a6839ccea1d34b8ee1dc83b18e", "patch": "@@ -1,3 +1,15 @@\n+2015-03-18  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-data-ref.h (struct access_matrix): Remove.\n+\t(AM_LOOP_NEST, AM_NB_INDUCTION_VARS, AM_PARAMETERS, AM_MATRIX,\n+\tAM_NB_PARAMETERS, AM_CONST_COLUMN_INDEX, AM_NB_COLUMNS,\n+\tAM_GET_SUBSCRIPT_ACCESS_VECTOR, AM_GET_ACCESS_MATRIX_ELEMENT): Likewise.\n+\t(am_vector_index_for_loop): Likewise.\n+\t(struct data_reference): Remove access_matrix member.\n+\t(DR_ACCESS_MATRIX): Remove.\n+\t(lambda_vector_new): Add comment.\n+\t(lambda_matrix_new): Use XOBNEWVEC.\n+\n 2015-03-18  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-loop-ch.c (pass_data_ch): Remove TODO_cleanup_cfg."}, {"sha": "edb3b562b8a255790c67c18d9b0b623299773532", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 3, "deletions": 66, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f4f1a507979b0a6839ccea1d34b8ee1dc83b18e/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f4f1a507979b0a6839ccea1d34b8ee1dc83b18e/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=6f4f1a507979b0a6839ccea1d34b8ee1dc83b18e", "patch": "@@ -100,66 +100,7 @@ typedef int *lambda_vector;\n    all vectors are the same length).  */\n typedef lambda_vector *lambda_matrix;\n \n-/* Each vector of the access matrix represents a linear access\n-   function for a subscript.  First elements correspond to the\n-   leftmost indices, ie. for a[i][j] the first vector corresponds to\n-   the subscript in \"i\".  The elements of a vector are relative to\n-   the loop nests in which the data reference is considered,\n-   i.e. the vector is relative to the SCoP that provides the context\n-   in which this data reference occurs.\n \n-   For example, in\n-\n-   | loop_1\n-   |    loop_2\n-   |      a[i+3][2*j+n-1]\n-\n-   if \"i\" varies in loop_1 and \"j\" varies in loop_2, the access\n-   matrix with respect to the loop nest {loop_1, loop_2} is:\n-\n-   | loop_1  loop_2  param_n  cst\n-   |   1       0        0      3\n-   |   0       2        1     -1\n-\n-   whereas the access matrix with respect to loop_2 considers \"i\" as\n-   a parameter:\n-\n-   | loop_2  param_i  param_n  cst\n-   |   0       1         0      3\n-   |   2       0         1     -1\n-*/\n-struct access_matrix\n-{\n-  vec<loop_p> loop_nest;\n-  int nb_induction_vars;\n-  vec<tree> parameters;\n-  vec<lambda_vector, va_gc> *matrix;\n-};\n-\n-#define AM_LOOP_NEST(M) (M)->loop_nest\n-#define AM_NB_INDUCTION_VARS(M) (M)->nb_induction_vars\n-#define AM_PARAMETERS(M) (M)->parameters\n-#define AM_MATRIX(M) (M)->matrix\n-#define AM_NB_PARAMETERS(M) (AM_PARAMETERS (M)).length ()\n-#define AM_CONST_COLUMN_INDEX(M) (AM_NB_INDUCTION_VARS (M) + AM_NB_PARAMETERS (M))\n-#define AM_NB_COLUMNS(M) (AM_NB_INDUCTION_VARS (M) + AM_NB_PARAMETERS (M) + 1)\n-#define AM_GET_SUBSCRIPT_ACCESS_VECTOR(M, I) AM_MATRIX (M)[I]\n-#define AM_GET_ACCESS_MATRIX_ELEMENT(M, I, J) AM_GET_SUBSCRIPT_ACCESS_VECTOR (M, I)[J]\n-\n-/* Return the column in the access matrix of LOOP_NUM.  */\n-\n-static inline int\n-am_vector_index_for_loop (struct access_matrix *access_matrix, int loop_num)\n-{\n-  int i;\n-  loop_p l;\n-\n-  for (i = 0; AM_LOOP_NEST (access_matrix).iterate (i, &l); i++)\n-    if (l->num == loop_num)\n-      return i;\n-\n-  gcc_unreachable ();\n-}\n \n struct data_reference\n {\n@@ -183,9 +124,6 @@ struct data_reference\n \n   /* Alias information for the data reference.  */\n   struct dr_alias alias;\n-\n-  /* Matrix representation for the data access functions.  */\n-  struct access_matrix *access_matrix;\n };\n \n #define DR_STMT(DR)                (DR)->stmt\n@@ -202,7 +140,6 @@ struct data_reference\n #define DR_STEP(DR)                (DR)->innermost.step\n #define DR_PTR_INFO(DR)            (DR)->alias.ptr_info\n #define DR_ALIGNED_TO(DR)          (DR)->innermost.aligned_to\n-#define DR_ACCESS_MATRIX(DR)       (DR)->access_matrix\n \n typedef struct data_reference *data_reference_p;\n \n@@ -560,6 +497,7 @@ lambda_vector_gcd (lambda_vector vector, int size)\n static inline lambda_vector\n lambda_vector_new (int size)\n {\n+  /* ???  We shouldn't abuse the GC allocator here.  */\n   return ggc_cleared_vec_alloc<int> (size);\n }\n \n@@ -611,11 +549,10 @@ lambda_matrix_new (int m, int n, struct obstack *lambda_obstack)\n   lambda_matrix mat;\n   int i;\n \n-  mat = (lambda_matrix) obstack_alloc (lambda_obstack,\n-\t\t\t\t       sizeof (lambda_vector *) * m);\n+  mat = XOBNEWVEC (lambda_obstack, lambda_vector, m);\n \n   for (i = 0; i < m; i++)\n-    mat[i] = lambda_vector_new (n);\n+    mat[i] = XOBNEWVEC (lambda_obstack, int, n);\n \n   return mat;\n }"}]}