{"sha": "e361d18df77ed06994441e0b0d0c33409ede5b63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM2MWQxOGRmNzdlZDA2OTk0NDQxZTBiMGQwYzMzNDA5ZWRlNWI2Mw==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2013-04-22T19:14:22Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2013-04-22T19:14:22Z"}, "message": "re PR fortran/53685 (surprising warns about transfer with explicit character range)\n\n2013-04-22  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/53685\n\tPR fortran/57022\n\t* check.c (gfc_calculate_transfer_sizes): Fix for array-valued SOURCE\n\texpressions.\n\t* simplify.c (gfc_simplify_sizeof,gfc_simplify_storage_size): Get rid\n\tof special treatment for EXPR_ARRAY.\n\t* target-memory.h (gfc_element_size): New prototype.\n\t* target-memory.c (size_array): Remove.\n\t(gfc_element_size): New function.\n\t(gfc_target_expr_size): Modified to always return the full size of the\n\texpression.\n\n\n2013-04-22  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/53685\n\tPR fortran/57022\n\t* gfortran.dg/transfer_check_4.f90: New.\n\nFrom-SVN: r198155", "tree": {"sha": "c9169197a1c8013e938b0c13132d766b4bcffb84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9169197a1c8013e938b0c13132d766b4bcffb84"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e361d18df77ed06994441e0b0d0c33409ede5b63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e361d18df77ed06994441e0b0d0c33409ede5b63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e361d18df77ed06994441e0b0d0c33409ede5b63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e361d18df77ed06994441e0b0d0c33409ede5b63/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cefb0898ebc75fefdd2cf93d39e6ccbb1aa7ee51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cefb0898ebc75fefdd2cf93d39e6ccbb1aa7ee51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cefb0898ebc75fefdd2cf93d39e6ccbb1aa7ee51"}], "stats": {"total": 144, "additions": 97, "deletions": 47}, "files": [{"sha": "95c448bef4d9b3d28ce5f9bec13acb0c95d2a055", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e361d18df77ed06994441e0b0d0c33409ede5b63/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e361d18df77ed06994441e0b0d0c33409ede5b63/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e361d18df77ed06994441e0b0d0c33409ede5b63", "patch": "@@ -1,3 +1,17 @@\n+2013-04-22  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/53685\n+\tPR fortran/57022\n+\t* check.c (gfc_calculate_transfer_sizes): Fix for array-valued SOURCE\n+\texpressions.\n+\t* simplify.c (gfc_simplify_sizeof,gfc_simplify_storage_size): Get rid\n+\tof special treatment for EXPR_ARRAY.\n+\t* target-memory.h (gfc_element_size): New prototype.\n+\t* target-memory.c (size_array): Remove.\n+\t(gfc_element_size): New function.\n+\t(gfc_target_expr_size): Modified to always return the full size of the\n+\texpression.\n+\n 2013-04-20  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/56907"}, {"sha": "e531deb147a75e48718a11b81a8669cb020fd11f", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e361d18df77ed06994441e0b0d0c33409ede5b63/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e361d18df77ed06994441e0b0d0c33409ede5b63/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=e361d18df77ed06994441e0b0d0c33409ede5b63", "patch": "@@ -4446,8 +4446,6 @@ gfc_calculate_transfer_sizes (gfc_expr *source, gfc_expr *mold, gfc_expr *size,\n \t\t\t      size_t *result_length_p)\n {\n   size_t result_elt_size;\n-  mpz_t tmp;\n-  gfc_expr *mold_element;\n \n   if (source->expr_type == EXPR_FUNCTION)\n     return false;\n@@ -4456,20 +4454,12 @@ gfc_calculate_transfer_sizes (gfc_expr *source, gfc_expr *mold, gfc_expr *size,\n     return false;\n \n   /* Calculate the size of the source.  */\n-  if (source->expr_type == EXPR_ARRAY\n-      && !gfc_array_size (source, &tmp))\n-    return false;\n-\n   *source_size = gfc_target_expr_size (source);\n   if (*source_size == 0)\n     return false;\n \n-  mold_element = mold->expr_type == EXPR_ARRAY\n-\t\t ? gfc_constructor_first (mold->value.constructor)->expr\n-\t\t : mold;\n-\n   /* Determine the size of the element.  */\n-  result_elt_size = gfc_target_expr_size (mold_element);\n+  result_elt_size = gfc_element_size (mold);\n   if (result_elt_size == 0)\n     return false;\n "}, {"sha": "02505dbf0ebb8346419c3b399b4fdad83bfdbd18", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e361d18df77ed06994441e0b0d0c33409ede5b63/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e361d18df77ed06994441e0b0d0c33409ede5b63/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=e361d18df77ed06994441e0b0d0c33409ede5b63", "patch": "@@ -5674,14 +5674,6 @@ gfc_simplify_sizeof (gfc_expr *x)\n \t\t\t\t  &x->where);\n   mpz_set_si (result->value.integer, gfc_target_expr_size (x));\n \n-  /* gfc_target_expr_size already takes the array size for array constructors\n-     into account.  */\n-  if (x->rank && x->expr_type != EXPR_ARRAY)\n-    {\n-      mpz_mul (result->value.integer, result->value.integer, array_size);\n-      mpz_clear (array_size);\n-    }\n-\n   return result;\n }\n \n@@ -5694,7 +5686,6 @@ gfc_simplify_storage_size (gfc_expr *x,\n {\n   gfc_expr *result = NULL;\n   int k;\n-  size_t elt_size;\n \n   if (x->ts.type == BT_CLASS || x->ts.deferred)\n     return NULL;\n@@ -5708,17 +5699,10 @@ gfc_simplify_storage_size (gfc_expr *x,\n   if (k == -1)\n     return &gfc_bad_expr;\n \n-  if (x->expr_type == EXPR_ARRAY)\n-    {\n-      gfc_constructor *c = gfc_constructor_first (x->value.constructor);\n-      elt_size = gfc_target_expr_size (c->expr);\n-    }\n-  else\n-    elt_size = gfc_target_expr_size (x);\n-\n   result = gfc_get_constant_expr (BT_INTEGER, gfc_index_integer_kind,\n \t\t\t\t  &x->where);\n-  mpz_set_si (result->value.integer, elt_size);\n+\n+  mpz_set_si (result->value.integer, gfc_element_size (x));\n \n   mpz_mul_ui (result->value.integer, result->value.integer, BITS_PER_UNIT);\n   return result;"}, {"sha": "21b44ae482ffcb674556d58cae9e8287be115418", "filename": "gcc/fortran/target-memory.c", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e361d18df77ed06994441e0b0d0c33409ede5b63/gcc%2Ffortran%2Ftarget-memory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e361d18df77ed06994441e0b0d0c33409ede5b63/gcc%2Ffortran%2Ftarget-memory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.c?ref=e361d18df77ed06994441e0b0d0c33409ede5b63", "patch": "@@ -35,16 +35,6 @@ along with GCC; see the file COPYING3.  If not see\n /* --------------------------------------------------------------- */ \n /* Calculate the size of an expression.  */\n \n-static size_t\n-size_array (gfc_expr *e)\n-{\n-  mpz_t array_size;\n-  gfc_constructor *c = gfc_constructor_first (e->value.constructor);\n-  size_t elt_size = gfc_target_expr_size (c->expr);\n-\n-  gfc_array_size (e, &array_size);\n-  return (size_t)mpz_get_ui (array_size) * elt_size;\n-}\n \n static size_t\n size_integer (int kind)\n@@ -82,16 +72,14 @@ size_character (int length, int kind)\n }\n \n \n+/* Return the size of a single element of the given expression.\n+   Identical to gfc_target_expr_size for scalars.  */\n+\n size_t\n-gfc_target_expr_size (gfc_expr *e)\n+gfc_element_size (gfc_expr *e)\n {\n   tree type;\n \n-  gcc_assert (e != NULL);\n-\n-  if (e->expr_type == EXPR_ARRAY)\n-    return size_array (e);\n-\n   switch (e->ts.type)\n     {\n     case BT_INTEGER:\n@@ -133,12 +121,36 @@ gfc_target_expr_size (gfc_expr *e)\n \treturn size;\n       }\n     default:\n-      gfc_internal_error (\"Invalid expression in gfc_target_expr_size.\");\n+      gfc_internal_error (\"Invalid expression in gfc_element_size.\");\n       return 0;\n     }\n }\n \n \n+/* Return the size of an expression in its target representation.  */\n+\n+size_t\n+gfc_target_expr_size (gfc_expr *e)\n+{\n+  mpz_t tmp;\n+  size_t asz;\n+\n+  gcc_assert (e != NULL);\n+\n+  if (e->rank)\n+    {\n+      if (gfc_array_size (e, &tmp))\n+\tasz = mpz_get_ui (tmp);\n+      else\n+\tasz = 0;\n+    }\n+  else\n+    asz = 1;\n+\n+  return asz * gfc_element_size (e);\n+}\n+\n+\n /* The encode_* functions export a value into a buffer, and \n    return the number of bytes of the buffer that have been\n    used.  */"}, {"sha": "100321a2b7a46af8f218f34363ee17204dad7052", "filename": "gcc/fortran/target-memory.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e361d18df77ed06994441e0b0d0c33409ede5b63/gcc%2Ffortran%2Ftarget-memory.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e361d18df77ed06994441e0b0d0c33409ede5b63/gcc%2Ffortran%2Ftarget-memory.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftarget-memory.h?ref=e361d18df77ed06994441e0b0d0c33409ede5b63", "patch": "@@ -24,7 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Convert a BOZ to REAL or COMPLEX.  */\n bool gfc_convert_boz (gfc_expr *, gfc_typespec *);\n \n-/* Return the size of an expression in its target representation.  */\n+size_t gfc_element_size (gfc_expr *);\n size_t gfc_target_expr_size (gfc_expr *);\n \n /* Write a constant expression in binary form to a target buffer.  */"}, {"sha": "d6be55c605fdc9de9b524574d9a6504cc829de6e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e361d18df77ed06994441e0b0d0c33409ede5b63/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e361d18df77ed06994441e0b0d0c33409ede5b63/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e361d18df77ed06994441e0b0d0c33409ede5b63", "patch": "@@ -1,3 +1,9 @@\n+2013-04-22  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/53685\n+\tPR fortran/57022\n+\t* gfortran.dg/transfer_check_4.f90: New.\n+\n 2013-04-22  Marek Polacek  <polacek@redhat.com>\n \n \tPR sanitizer/56990"}, {"sha": "030d3454909ef4df87de6e878a5edf407552b346", "filename": "gcc/testsuite/gfortran.dg/transfer_check_4.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e361d18df77ed06994441e0b0d0c33409ede5b63/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_check_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e361d18df77ed06994441e0b0d0c33409ede5b63/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_check_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_check_4.f90?ref=e361d18df77ed06994441e0b0d0c33409ede5b63", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do compile }\n+! { dg-options \"-Wall\" }\n+\n+! PR 57022: [4.7/4.8/4.9 Regression] Inappropriate warning for use of TRANSFER with arrays\n+! Contributed by William Clodius <wclodius@los-alamos.net>\n+\n+subroutine transfers (test)\n+\n+  use, intrinsic :: iso_fortran_env\n+  \n+  integer, intent(in) :: test\n+\n+  integer(int8)  :: test8(8)  = 0\n+  integer(int16) :: test16(4) = 0\n+  integer(int32) :: test32(2) = 0\n+  integer(int64) :: test64    = 0\n+\n+  select case(test)\n+  case(0)\n+    test64 = transfer(test8, test64)\n+  case(1)\n+    test64 = transfer(test16, test64)\n+  case(2)\n+    test64 = transfer(test32, test64)\n+  case(3)\n+    test8  = transfer(test64, test8, 8)\n+  case(4)\n+    test16 = transfer(test64, test16, 4)\n+  case(5)\n+    test32 = transfer(test64, test32, 2)\n+  end select\n+\n+end subroutine\n+\n+\n+! PR 53685: surprising warns about transfer with explicit character range\n+! Contributed by Jos de Kloe <kloedej@knmi.nl>\n+\n+subroutine mytest(byte_array,val)\n+  integer, parameter :: r8_ = Selected_Real_Kind(15,307)  ! = real*8\n+  character(len=1), dimension(16), intent(in) :: byte_array\n+  real(r8_),intent(out) :: val\n+  val = transfer(byte_array(1:8),val)    \n+end subroutine"}]}