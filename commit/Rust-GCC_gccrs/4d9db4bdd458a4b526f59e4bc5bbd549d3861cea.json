{"sha": "4d9db4bdd458a4b526f59e4bc5bbd549d3861cea", "node_id": "C_kwDOANBUbNoAKDRkOWRiNGJkZDQ1OGE0YjUyNmY1OWU0YmM1YmJkNTQ5ZDM4NjFjZWE", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-12-12T15:21:39Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2022-12-12T15:21:39Z"}, "message": "middle-end: simplify complex if expressions where comparisons are inverse of one another.\n\nThis optimizes the following sequence\n\n  ((a < b) & c) | ((a >= b) & d)\n\ninto\n\n  (a < b ? c : d) & 1\n\nfor scalar and on vector we can omit the & 1.\n\nAlso recognizes\n\n  (-(a < b) & c) | (-(a >= b) & d)\n\ninto\n\n  a < b ? c : d\n\nThis changes the code generation from\n\nzoo2:\n\tcmp     w0, w1\n\tcset    w0, lt\n\tcset    w1, ge\n\tand     w0, w0, w2\n\tand     w1, w1, w3\n\torr     w0, w0, w1\n\tret\n\ninto\n\n\tcmp\tw0, w1\n\tcsel\tw0, w2, w3, lt\n\tand\tw0, w0, 1\n\tret\n\nand significantly reduces the number of selects we have to do in the vector\ncode.\n\ngcc/ChangeLog:\n\n\t* match.pd: Add new rule.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/if-compare_1.c: New test.\n\t* gcc.target/aarch64/if-compare_2.c: New test.", "tree": {"sha": "e358bee89eb086f37e9d44026954d0eaaff5ef58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e358bee89eb086f37e9d44026954d0eaaff5ef58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d9db4bdd458a4b526f59e4bc5bbd549d3861cea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d9db4bdd458a4b526f59e4bc5bbd549d3861cea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d9db4bdd458a4b526f59e4bc5bbd549d3861cea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d9db4bdd458a4b526f59e4bc5bbd549d3861cea/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "594264e9bcb592b8edc4b50b5d9be5eb34c1d6d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/594264e9bcb592b8edc4b50b5d9be5eb34c1d6d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/594264e9bcb592b8edc4b50b5d9be5eb34c1d6d7"}], "stats": {"total": 198, "additions": 198, "deletions": 0}, "files": [{"sha": "c48fe2d6bf20d84fc349259e8a370c7acc4cda9a", "filename": "gcc/match.pd", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9db4bdd458a4b526f59e4bc5bbd549d3861cea/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9db4bdd458a4b526f59e4bc5bbd549d3861cea/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=4d9db4bdd458a4b526f59e4bc5bbd549d3861cea", "patch": "@@ -1906,6 +1906,61 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (if (INTEGRAL_TYPE_P (type))\n   (bit_and @0 @1)))\n \n+(for cmp (tcc_comparison)\n+     icmp (inverted_tcc_comparison)\n+ /* Fold (((a < b) & c) | ((a >= b) & d)) into (a < b ? c : d) & 1.  */\n+ (simplify\n+  (bit_ior\n+   (bit_and:c (convert? (cmp@0  @01 @02)) @3)\n+   (bit_and:c (convert? (icmp@4 @01 @02)) @5))\n+    (if (INTEGRAL_TYPE_P (type)\n+\t /* The scalar version has to be canonicalized after vectorization\n+\t    because it makes unconditional loads conditional ones, which\n+\t    means we lose vectorization because the loads may trap.  */\n+\t && canonicalize_math_after_vectorization_p ())\n+     (bit_and (cond @0 @3 @5) { build_one_cst (type); })))\n+\n+ /* Fold ((-(a < b) & c) | (-(a >= b) & d)) into a < b ? c : d.  This is\n+    canonicalized further and we recognize the conditional form:\n+    (a < b ? c : 0) | (a >= b ? d : 0) into a < b ? c : d.  */\n+ (simplify\n+  (bit_ior\n+   (cond (cmp@0  @01 @02) @3 zerop)\n+   (cond (icmp@4 @01 @02) @5 zerop))\n+    (if (INTEGRAL_TYPE_P (type)\n+\t /* The scalar version has to be canonicalized after vectorization\n+\t    because it makes unconditional loads conditional ones, which\n+\t    means we lose vectorization because the loads may trap.  */\n+\t && canonicalize_math_after_vectorization_p ())\n+    (cond @0 @3 @5)))\n+\n+ /* Vector Fold (((a < b) & c) | ((a >= b) & d)) into a < b ? c : d. \n+    and ((~(a < b) & c) | (~(a >= b) & d)) into a < b ? c : d.  */\n+ (simplify\n+  (bit_ior\n+   (bit_and:c (vec_cond:s (cmp@0 @6 @7) @4 @5) @2)\n+   (bit_and:c (vec_cond:s (icmp@1 @6 @7) @4 @5) @3))\n+    (if (integer_zerop (@5))\n+     (switch\n+      (if (integer_onep (@4))\n+       (bit_and (vec_cond @0 @2 @3) @4))\n+\t(if (integer_minus_onep (@4))\n+\t (vec_cond @0 @2 @3)))\n+    (if (integer_zerop (@4))\n+     (switch\n+      (if (integer_onep (@5))\n+       (bit_and (vec_cond @0 @3 @2) @5))\n+      (if (integer_minus_onep (@5))\n+       (vec_cond @0 @3 @2))))))\n+\n+ /* Scalar Vectorized Fold ((-(a < b) & c) | (-(a >= b) & d))\n+    into a < b ? d : c.  */\n+ (simplify\n+  (bit_ior\n+   (vec_cond:s (cmp@0 @4 @5) @2 integer_zerop)\n+   (vec_cond:s (icmp@1 @4 @5) @3 integer_zerop))\n+    (vec_cond @0 @2 @3)))\n+\n /* Transform X & -Y into X * Y when Y is { 0 or 1 }.  */\n (simplify\n  (bit_and:c (convert? (negate zero_one_valued_p@0)) @1)"}, {"sha": "53bbd779a30e1a30e0ce0e4e5eaf589bfaf570fe", "filename": "gcc/testsuite/gcc.target/aarch64/if-compare_1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9db4bdd458a4b526f59e4bc5bbd549d3861cea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fif-compare_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9db4bdd458a4b526f59e4bc5bbd549d3861cea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fif-compare_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fif-compare_1.c?ref=4d9db4bdd458a4b526f59e4bc5bbd549d3861cea", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-O -save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" { target { le } } } } */\n+\n+extern void abort ();\n+\n+/*\n+**zoo1:\n+**\tcmp\tw0, w1\n+**\tcsel\tw0, w2, w3, lt\n+**\tand\tw0, w0, 1\n+**\tret\n+*/\n+__attribute((noipa, noinline))\n+int zoo1 (int a, int b, int c, int d)\n+{\n+   return ((a < b) & c) | ((a >= b) & d);\n+}\n+\n+/*\n+**zoo2:\n+**\tcmp\tw0, w1\n+**\tcsel\tw0, w2, w3, lt\n+**\tret\n+*/\n+__attribute((noipa, noinline))\n+int zoo2 (int a, int b, int c, int d)\n+{\n+   return (-(a < b) & c) | (-(a >= b) & d);\n+}\n+\n+int main ()\n+{\n+  if (zoo1 (-3, 3, 5, 8) != 1)\n+    abort ();\n+\n+  if (zoo1 (3, -3, 5, 8) != 0)\n+    abort ();\n+\n+  if (zoo2 (-3, 3, 5, 8) != 5)\n+    abort ();\n+\n+  if (zoo2 (3, -3, 5, 8) != 8)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "14988abac45989578b198f28c7c0ea203959c08b", "filename": "gcc/testsuite/gcc.target/aarch64/if-compare_2.c", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d9db4bdd458a4b526f59e4bc5bbd549d3861cea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fif-compare_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d9db4bdd458a4b526f59e4bc5bbd549d3861cea/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fif-compare_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fif-compare_2.c?ref=4d9db4bdd458a4b526f59e4bc5bbd549d3861cea", "patch": "@@ -0,0 +1,96 @@\n+/* { dg-do run } */\n+/* { dg-additional-options \"-O3 -std=c99 -save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" \"\" { target { le } } } } */\n+\n+#pragma GCC target \"+nosve\"\n+\n+#include <string.h>\n+\n+typedef int v4si __attribute__ ((vector_size (16)));\n+\n+/*\n+**foo1:\n+**\tcmgt\tv0.4s, v1.4s, v0.4s\n+**\tbsl\tv0.16b, v2.16b, v3.16b\n+**\tret\n+*/\n+v4si foo1 (v4si a, v4si b, v4si c, v4si d) {\n+    return ((a < b) & c) | ((a >= b) & d);\n+}\n+\n+/*\n+**foo2:\n+**\tcmgt\tv0.4s, v1.4s, v0.4s\n+**\tbsl\tv0.16b, v3.16b, v2.16b\n+**\tret\n+*/\n+v4si foo2 (v4si a, v4si b, v4si c, v4si d) {\n+    return (~(a < b) & c) | (~(a >= b) & d);\n+}\n+\n+\n+/**\n+**bar1:\n+**...\n+**\tcmge\tv[0-9]+.4s, v[0-9]+.4s, v[0-9]+.4s\n+**\tbsl\tv[0-9]+.16b, v[0-9]+.16b, v[0-9]+.16b\n+**\tand\tv[0-9]+.16b, v[0-9]+.16b, v[0-9]+.16b\n+**...\n+*/\n+void bar1 (int * restrict a, int * restrict b, int * restrict c,\n+\t  int * restrict d, int * restrict res, int n)\n+{\n+  for (int i = 0; i < (n & -4); i++)\n+    res[i] = ((a[i] < b[i]) & c[i]) | ((a[i] >= b[i]) & d[i]);\n+}\n+\n+/**\n+**bar2:\n+**...\n+**\tcmge\tv[0-9]+.4s, v[0-9]+.4s, v[0-9]+.4s\n+**\tbsl\tv[0-9]+.16b, v[0-9]+.16b, v[0-9]+.16b\n+**...\n+*/\n+void bar2 (int * restrict a, int * restrict b, int * restrict c,\n+\t  int * restrict d, int * restrict res, int n)\n+{\n+  for (int i = 0; i < (n & -4); i++)\n+    res[i] = (-(a[i] < b[i]) & c[i]) | (-(a[i] >= b[i]) & d[i]);\n+}\n+\n+extern void abort ();\n+\n+int main ()\n+{\n+\n+  v4si a = { -3, -3, -3, -3 };\n+  v4si b = { 3, 3, 3, 3 };\n+  v4si c = { 5, 5, 5, 5 };\n+  v4si d = { 8, 8, 8, 8 };\n+\n+  v4si res1 = foo1 (a, b, c, d);\n+  if (memcmp (&res1, &c, 16UL) != 0)\n+    abort ();\n+\n+  v4si res2 = foo2 (a, b, c, d);\n+  if (memcmp (&res2, &d, 16UL) != 0)\n+   abort ();\n+\n+  int ar[4] = { -3, -3, -3, -3 };\n+  int br[4] = { 3, 3, 3, 3 };\n+  int cr[4] = { 5, 5, 5, 5 };\n+  int dr[4] = { 8, 8, 8, 8 };\n+\n+  int exp1[4] = { 1, 1, 1, 1 };\n+  int res3[4];\n+  bar1 ((int*)&ar, (int*)&br, (int*)&cr, (int*)&dr, (int*)&res3, 4);\n+  if (memcmp (&res3, &exp1, 16UL) != 0)\n+    abort ();\n+\n+  int res4[4];\n+  bar2 ((int*)&ar, (int*)&br, (int*)&cr, (int*)&dr, (int*)&res4, 4);\n+  if (memcmp (&res4, &cr, 16UL) != 0)\n+    abort ();\n+\n+  return 0;\n+}"}]}