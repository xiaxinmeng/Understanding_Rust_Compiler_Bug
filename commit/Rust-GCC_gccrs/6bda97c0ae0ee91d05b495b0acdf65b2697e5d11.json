{"sha": "6bda97c0ae0ee91d05b495b0acdf65b2697e5d11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJkYTk3YzBhZTBlZTkxZDA1YjQ5NWIwYWNkZjY1YjI2OTdlNWQxMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-08-21T11:51:17Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-08-21T11:51:17Z"}, "message": "Tabify 2017-08-21  Richard Biener  <rguenther@suse.de> entry\n\nFrom-SVN: r251222", "tree": {"sha": "b70af6f1d2bcfa41074bac74aadeacf6591bd126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b70af6f1d2bcfa41074bac74aadeacf6591bd126"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bda97c0ae0ee91d05b495b0acdf65b2697e5d11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bda97c0ae0ee91d05b495b0acdf65b2697e5d11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bda97c0ae0ee91d05b495b0acdf65b2697e5d11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bda97c0ae0ee91d05b495b0acdf65b2697e5d11/comments", "author": null, "committer": null, "parents": [{"sha": "c34960677437197ee2859b243cf185c7f873c83b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c34960677437197ee2859b243cf185c7f873c83b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c34960677437197ee2859b243cf185c7f873c83b"}], "stats": {"total": 182, "additions": 91, "deletions": 91}, "files": [{"sha": "afc4514644d1dbe6f3a00b5626142ec74205be2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 91, "deletions": 91, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bda97c0ae0ee91d05b495b0acdf65b2697e5d11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bda97c0ae0ee91d05b495b0acdf65b2697e5d11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6bda97c0ae0ee91d05b495b0acdf65b2697e5d11", "patch": "@@ -7,130 +7,130 @@\n \n 2017-08-21  Richard Biener  <rguenther@suse.de>\n \n-        * debug.h (struct gcc_debug_hooks): Add die_ref_for_decl and\n-        register_external_die hooks.\n-        (debug_false_tree_charstarstar_uhwistar): Declare.\n-        (debug_nothing_tree_charstar_uhwi): Likewise.\n-        * debug.c (do_nothing_debug_hooks): Adjust.\n-        (debug_false_tree_charstarstar_uhwistar): New do nothing.\n-        (debug_nothing_tree_charstar_uhwi): Likewise.\n-        * dbxout.c (dbx_debug_hooks): Adjust.\n-        (xcoff_debug_hooks): Likewise.\n-        * sdbout.c (sdb_debug_hooks): Likewise.\n-        * vmsdbgout.c (vmsdbg_debug_hooks): Likewise.\n-        * dwarf2out.c (macinfo_label_base): New global.\n+\t* debug.h (struct gcc_debug_hooks): Add die_ref_for_decl and\n+\tregister_external_die hooks.\n+\t(debug_false_tree_charstarstar_uhwistar): Declare.\n+\t(debug_nothing_tree_charstar_uhwi): Likewise.\n+\t* debug.c (do_nothing_debug_hooks): Adjust.\n+\t(debug_false_tree_charstarstar_uhwistar): New do nothing.\n+\t(debug_nothing_tree_charstar_uhwi): Likewise.\n+\t* dbxout.c (dbx_debug_hooks): Adjust.\n+\t(xcoff_debug_hooks): Likewise.\n+\t* sdbout.c (sdb_debug_hooks): Likewise.\n+\t* vmsdbgout.c (vmsdbg_debug_hooks): Likewise.\n+\t* dwarf2out.c (macinfo_label_base): New global.\n \t(dwarf2out_register_external_die): New function for the\n \tregister_external_die hook.\n-        (dwarf2out_die_ref_for_decl): Likewise for die_ref_for_decl.\n-        (dwarf2_debug_hooks): Use them.\n-        (dwarf2_lineno_debug_hooks): Adjust.\n-        (struct die_struct): Add with_offset flag.\n-        (DEBUG_LTO_DWO_INFO_SECTION, DEBUG_LTO_INFO_SECTION,\n-        DEBUG_LTO_DWO_ABBREV_SECTION, DEBUG_LTO_ABBREV_SECTION,\n-        DEBUG_LTO_DWO_MACINFO_SECTION, DEBUG_LTO_MACINFO_SECTION,\n-        DEBUG_LTO_DWO_MACRO_SECTION, DEBUG_LTO_MACRO_SECTION,\n-        DEBUG_LTO_LINE_SECTION, DEBUG_LTO_DWO_STR_OFFSETS_SECTION,\n-        DEBUG_LTO_STR_DWO_SECTION, DEBUG_STR_LTO_SECTION): New macros\n-        defining section names for the early LTO debug variants.\n+\t(dwarf2out_die_ref_for_decl): Likewise for die_ref_for_decl.\n+\t(dwarf2_debug_hooks): Use them.\n+\t(dwarf2_lineno_debug_hooks): Adjust.\n+\t(struct die_struct): Add with_offset flag.\n+\t(DEBUG_LTO_DWO_INFO_SECTION, DEBUG_LTO_INFO_SECTION,\n+\tDEBUG_LTO_DWO_ABBREV_SECTION, DEBUG_LTO_ABBREV_SECTION,\n+\tDEBUG_LTO_DWO_MACINFO_SECTION, DEBUG_LTO_MACINFO_SECTION,\n+\tDEBUG_LTO_DWO_MACRO_SECTION, DEBUG_LTO_MACRO_SECTION,\n+\tDEBUG_LTO_LINE_SECTION, DEBUG_LTO_DWO_STR_OFFSETS_SECTION,\n+\tDEBUG_LTO_STR_DWO_SECTION, DEBUG_STR_LTO_SECTION): New macros\n+\tdefining section names for the early LTO debug variants.\n \t(reset_indirect_string): New helper.\n-        (add_AT_external_die_ref): Helper for dwarf2out_register_external_die.\n-        (print_dw_val): Add support for offsetted symbol references.\n+\t(add_AT_external_die_ref): Helper for dwarf2out_register_external_die.\n+\t(print_dw_val): Add support for offsetted symbol references.\n \t(get_ultimate_context): Split out from is_cxx.\n \t(is_cxx): Use get_ultimate_context.\n \t(is_fortran): Add decl overload.\n-        (compute_comp_unit_symbol): Split out worker from\n+\t(compute_comp_unit_symbol): Split out worker from\n \tcompute_section_prefix.\n-        (compute_section_prefix): Call compute_comp_unit_symbol and\n+\t(compute_section_prefix): Call compute_comp_unit_symbol and\n \tset comdat_type_p here.\n-        (output_die): Skip DIE symbol output for the LTO added one.\n-        Handle DIE symbol references with offset.\n-        (output_comp_unit): Guard section name mangling properly.\n-        For LTO debug sections emit a symbol at the section beginning\n-        which we use to refer to its DIEs.\n-        (add_abstract_origin_attribute): For DIEs registered via\n-        dwarf2out_register_external_die directly refer to the early\n-        DIE rather than indirectly through the shadow one we created.\n+\t(output_die): Skip DIE symbol output for the LTO added one.\n+\tHandle DIE symbol references with offset.\n+\t(output_comp_unit): Guard section name mangling properly.\n+\tFor LTO debug sections emit a symbol at the section beginning\n+\twhich we use to refer to its DIEs.\n+\t(add_abstract_origin_attribute): For DIEs registered via\n+\tdwarf2out_register_external_die directly refer to the early\n+\tDIE rather than indirectly through the shadow one we created.\n \tRemove obsolete call to dwarf2out_abstract_function for\n \tnon-function/block origins.\n-        (gen_array_type_die): When generating early LTO debug do\n-        not emit DW_AT_string_length.\n-        (gen_formal_parameter_die): Do not re-create DIEs for PARM_DECLs\n-        late when in LTO.  As suggested place a gcc_unreachable for\n+\t(gen_array_type_die): When generating early LTO debug do\n+\tnot emit DW_AT_string_length.\n+\t(gen_formal_parameter_die): Do not re-create DIEs for PARM_DECLs\n+\tlate when in LTO.  As suggested place a gcc_unreachable for\n \tthe DECL_ABSTRACT_P case.\n-        (gen_subprogram_die): Avoid another specification DIE\n-        for early built declarations/definitions for the late LTO case.\n-        (gen_variable_die): Add type references for late duplicated VLA dies\n-        when in late LTO.\n-        (gen_inlined_subroutine_die): Do not call dwarf2out_abstract_function,\n-        we have the abstract instance already.\n-        (process_scope_var): Adjust decl DIE contexts in LTO which\n-        first puts them in limbo.\n-        (gen_decl_die): Do not generate type DIEs late apart from\n-        types for VLAs or for decls we do not yet have a DIE.  Do not\n+\t(gen_subprogram_die): Avoid another specification DIE\n+\tfor early built declarations/definitions for the late LTO case.\n+\t(gen_variable_die): Add type references for late duplicated VLA dies\n+\twhen in late LTO.\n+\t(gen_inlined_subroutine_die): Do not call dwarf2out_abstract_function,\n+\twe have the abstract instance already.\n+\t(process_scope_var): Adjust decl DIE contexts in LTO which\n+\tfirst puts them in limbo.\n+\t(gen_decl_die): Do not generate type DIEs late apart from\n+\ttypes for VLAs or for decls we do not yet have a DIE.  Do not\n \tcall dwarf2out_abstract_function late.\n-        (dwarf2out_early_global_decl): Make sure to create DIEs\n-        for abstract instances of a decl first.\n-        (dwarf2out_late_global_decl): Adjust comment.\n-        (output_macinfo_op): With multiple macro sections use\n+\t(dwarf2out_early_global_decl): Make sure to create DIEs\n+\tfor abstract instances of a decl first.\n+\t(dwarf2out_late_global_decl): Adjust comment.\n+\t(output_macinfo_op): With multiple macro sections use\n \tmacinfo_label_base to distinguish labels.\n-        (output_macinfo): Likewise.  Update macinfo_label_base.\n+\t(output_macinfo): Likewise.  Update macinfo_label_base.\n \tPass in the line info label.\n \t(note_variable_value_in_expr): When generating LTO resolve\n \tall variable values here by generating DIEs as needed.\n-        (init_sections_and_labels): Add early LTO debug flag parameter\n-        and generate different sections and names if set.  Add generation\n-        counter for the labels so we can have multiple of them.\n-        (reset_dies): Helper to allow DIEs to be output multiple times.\n-        (dwarf2out_finish): When outputting DIEs to the fat part of an\n+\t(init_sections_and_labels): Add early LTO debug flag parameter\n+\tand generate different sections and names if set.  Add generation\n+\tcounter for the labels so we can have multiple of them.\n+\t(reset_dies): Helper to allow DIEs to be output multiple times.\n+\t(dwarf2out_finish): When outputting DIEs to the fat part of an\n \tLTO object first reset DIEs.\n-        (dwarf2out_early_finish): Output early DIEs when generating LTO.\n+\t(dwarf2out_early_finish): Output early DIEs when generating LTO.\n \t(modified_type_die): Check for decl_ultimate_origin being self\n \tbefore recursing.\n \t(gen_type_die_with_usage): Likewise.\n \t(gen_typedef_die): Allow decl_ultimate_origin being self.\n-        (set_decl_abstract_flags): Remove.\n-        (set_block_abstract_flags): Likewise.\n-        (dwarf2out_abstract_function): Treat the early generated DIEs\n-        as the abstract copy and only add DW_AT_inline and\n-        DW_AT_artificial here and call set_decl_origin_self.\n+\t(set_decl_abstract_flags): Remove.\n+\t(set_block_abstract_flags): Likewise.\n+\t(dwarf2out_abstract_function): Treat the early generated DIEs\n+\tas the abstract copy and only add DW_AT_inline and\n+\tDW_AT_artificial here and call set_decl_origin_self.\n \tIf the DIE has an abstract origin don't do anything.\n \t* tree.c (free_lang_data): Build a dummy TRANSLATION_UNIT_DECL\n \tif we have none yet (Go fails to build one, PR78628).\n \t(variably_modified_type_p): Prevent endless recursion for Ada\n \tcyclic pointer types.\n-        * lto-streamer-in.c: Include debug.h.\n-        (dref_queue): New global.\n-        (lto_read_tree_1): Stream in DIE references.\n-        (lto_input_tree): Register DIE references.\n+\t* lto-streamer-in.c: Include debug.h.\n+\t(dref_queue): New global.\n+\t(lto_read_tree_1): Stream in DIE references.\n+\t(lto_input_tree): Register DIE references.\n \t(input_function): Stream DECL_DEBUG_ARGS.\n-        * lto-streamer-out.c: Include debug.h.\n-        (lto_write_tree_1): Output DIE references.\n-        (DFS::DFS_write_tree_body): Follow DECL_ABSTRACT_ORIGIN.\n+\t* lto-streamer-out.c: Include debug.h.\n+\t(lto_write_tree_1): Output DIE references.\n+\t(DFS::DFS_write_tree_body): Follow DECL_ABSTRACT_ORIGIN.\n \tForce a TRANSLATION_UNIT_DECL DECL_CONTEXT for file-scope decls.\n \t(output_function): Stream DECL_DEBUG_ARGS.\n-        * tree-streamer-in.c (lto_input_ts_decl_common_tree_pointers):\n-        Stream DECL_ABSTRACT_ORIGIN.\n-        * tree-streamer-out.c (write_ts_decl_common_tree_pointers): Likewise.\n+\t* tree-streamer-in.c (lto_input_ts_decl_common_tree_pointers):\n+\tStream DECL_ABSTRACT_ORIGIN.\n+\t* tree-streamer-out.c (write_ts_decl_common_tree_pointers): Likewise.\n \t(write_ts_decl_minimal_tree_pointers): Force a TRANSLATION_UNIT_DECL\n \tDECL_CONTEXT for file-scope decls.\n-        * lto-streamer.h (struct dref_entry): Declare.\n-        (dref_queue): Likewise.\n+\t* lto-streamer.h (struct dref_entry): Declare.\n+\t(dref_queue): Likewise.\n \t* cfgexpand.c (pass_expand::execute): Do not call the\n \toutlining_inline_function hook here.\n-        * lto-wrapper.c (debug_obj): New global.\n-        (tool_cleanup): Unlink it if required.\n-        (debug_objcopy): New function.\n-        (run_gcc): Handle early debug sections in the IL files by\n-        extracting them to separate files, partially linkin them and\n-        feeding the result back as result to the linker.\n-        * config/darwin.h (DEBUG_LTO_INFO_SECTION, DEBUG_LTO_ABBREV_SECTION,\n-        DEBUG_LTO_MACINFO_SECTION, DEBUG_LTO_LINE_SECTION,\n-        DEBUG_STR_LTO_SECTION, DEBUG_LTO_MACRO_SECTION): Put early debug\n-        sections into a separate segment.\n-        * config/darwin.c (darwin_asm_named_section): Handle __GNU_DWARF_LTO\n-        segments.\n-        (darwin_asm_dwarf_section): Likewise.\n-        (darwin_asm_output_dwarf_offset): Likewise.\n+\t* lto-wrapper.c (debug_obj): New global.\n+\t(tool_cleanup): Unlink it if required.\n+\t(debug_objcopy): New function.\n+\t(run_gcc): Handle early debug sections in the IL files by\n+\textracting them to separate files, partially linkin them and\n+\tfeeding the result back as result to the linker.\n+\t* config/darwin.h (DEBUG_LTO_INFO_SECTION, DEBUG_LTO_ABBREV_SECTION,\n+\tDEBUG_LTO_MACINFO_SECTION, DEBUG_LTO_LINE_SECTION,\n+\tDEBUG_STR_LTO_SECTION, DEBUG_LTO_MACRO_SECTION): Put early debug\n+\tsections into a separate segment.\n+\t* config/darwin.c (darwin_asm_named_section): Handle __GNU_DWARF_LTO\n+\tsegments.\n+\t(darwin_asm_dwarf_section): Likewise.\n+\t(darwin_asm_output_dwarf_offset): Likewise.\n \t* config/i386/i386.c (make_resolver_func): Set DECL_IGNORED_P.\n \n 2017-08-21  Richard Sandiford  <richard.sandiford@linaro.org>"}]}