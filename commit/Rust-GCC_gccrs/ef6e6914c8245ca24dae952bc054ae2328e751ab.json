{"sha": "ef6e6914c8245ca24dae952bc054ae2328e751ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY2ZTY5MTRjODI0NWNhMjRkYWU5NTJiYzA1NGFlMjMyOGU3NTFhYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-11-26T15:37:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-11-26T15:37:35Z"}, "message": "re PR tree-optimization/88182 (ICE in vectorizable_reduction, at tree-vect-loop.c:6465)\n\n2018-11-26  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/88182\n\t* tree-vect-loop.c (vectorizable_reduction): Pick up single\n\tcorrect reduc_def_info.\n\t* tree-vect-slp.c (vect_analyze_slp_instance): Set\n\tSTMT_VINFO_REDUC_DEF of the first stmt.\n\n\tlibgomp/\n\t* testsuite/libgomp.c++/pr88182.C: New testcase.\n\nFrom-SVN: r266467", "tree": {"sha": "99a95accf31970bfb7c5ca83ed8d9a15a5e4db6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99a95accf31970bfb7c5ca83ed8d9a15a5e4db6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef6e6914c8245ca24dae952bc054ae2328e751ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6e6914c8245ca24dae952bc054ae2328e751ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef6e6914c8245ca24dae952bc054ae2328e751ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef6e6914c8245ca24dae952bc054ae2328e751ab/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c393c7482fa7c6953f256724e8c6bd282d404e7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c393c7482fa7c6953f256724e8c6bd282d404e7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c393c7482fa7c6953f256724e8c6bd282d404e7c"}], "stats": {"total": 86, "additions": 69, "deletions": 17}, "files": [{"sha": "b68fdad91ad4e144930e1d2adac187ecfc672b78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e6914c8245ca24dae952bc054ae2328e751ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e6914c8245ca24dae952bc054ae2328e751ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef6e6914c8245ca24dae952bc054ae2328e751ab", "patch": "@@ -1,3 +1,11 @@\n+2018-11-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88182\n+\t* tree-vect-loop.c (vectorizable_reduction): Pick up single\n+\tcorrect reduc_def_info.\n+\t* tree-vect-slp.c (vect_analyze_slp_instance): Set\n+\tSTMT_VINFO_REDUC_DEF of the first stmt.\n+\n 2018-11-26  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* doc/invoke.texi: Document z14/arch12 -march option."}, {"sha": "9589a8eeb5ceb4848e78ff07b80cc7059a819a15", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e6914c8245ca24dae952bc054ae2328e751ab/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e6914c8245ca24dae952bc054ae2328e751ab/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=ef6e6914c8245ca24dae952bc054ae2328e751ab", "patch": "@@ -6223,7 +6223,14 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n      The last use is the reduction variable.  In case of nested cycle this\n      assumption is not true: we use reduc_index to record the index of the\n      reduction variable.  */\n-  stmt_vec_info reduc_def_info = NULL;\n+  stmt_vec_info reduc_def_info;\n+  if (orig_stmt_info)\n+    reduc_def_info = STMT_VINFO_REDUC_DEF (orig_stmt_info);\n+  else\n+    reduc_def_info = STMT_VINFO_REDUC_DEF (stmt_info);\n+  gcc_assert (reduc_def_info);\n+  gphi *reduc_def_phi = as_a <gphi *> (reduc_def_info->stmt);\n+  tree reduc_def = PHI_RESULT (reduc_def_phi);\n   int reduc_index = -1;\n   for (i = 0; i < op_type; i++)\n     {\n@@ -6236,9 +6243,9 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\t\t\t\t  &def_stmt_info);\n       dt = dts[i];\n       gcc_assert (is_simple_use);\n-      if (dt == vect_reduction_def)\n+      if (dt == vect_reduction_def\n+\t  && ops[i] == reduc_def)\n \t{\n-\t  reduc_def_info = def_stmt_info;\n \t  reduc_index = i;\n \t  continue;\n \t}\n@@ -6259,10 +6266,10 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n           && !(dt == vect_nested_cycle && nested_cycle))\n \treturn false;\n \n-      if (dt == vect_nested_cycle)\n+      if (dt == vect_nested_cycle\n+\t  && ops[i] == reduc_def)\n \t{\n \t  found_nested_cycle_def = true;\n-\t  reduc_def_info = def_stmt_info;\n \t  reduc_index = i;\n \t}\n \n@@ -6298,20 +6305,8 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t\t\t     \"in-order reduction chain without SLP.\\n\");\n \t  return false;\n \t}\n-\n-      if (orig_stmt_info)\n-\treduc_def_info = STMT_VINFO_REDUC_DEF (orig_stmt_info);\n-      else\n-\treduc_def_info = STMT_VINFO_REDUC_DEF (stmt_info);\n     }\n \n-  if (! reduc_def_info)\n-    return false;\n-\n-  gphi *reduc_def_phi = dyn_cast <gphi *> (reduc_def_info->stmt);\n-  if (!reduc_def_phi)\n-    return false;\n-\n   if (!(reduc_index == -1\n \t|| dts[reduc_index] == vect_reduction_def\n \t|| dts[reduc_index] == vect_nested_cycle"}, {"sha": "4267cc9a92afc48d0a633dd2d8b82456bf3d271d", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e6914c8245ca24dae952bc054ae2328e751ab/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e6914c8245ca24dae952bc054ae2328e751ab/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=ef6e6914c8245ca24dae952bc054ae2328e751ab", "patch": "@@ -1952,6 +1952,8 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \t transform the node.  In the reduction analysis phase only the last\n \t element of the chain is marked as reduction.  */\n       STMT_VINFO_DEF_TYPE (stmt_info) = vect_reduction_def;\n+      STMT_VINFO_REDUC_DEF (vect_orig_stmt (stmt_info))\n+\t= STMT_VINFO_REDUC_DEF (vect_orig_stmt (scalar_stmts.last ()));\n     }\n   else\n     {"}, {"sha": "706835541e469befff899ece3f98bdf1aa413565", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e6914c8245ca24dae952bc054ae2328e751ab/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e6914c8245ca24dae952bc054ae2328e751ab/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=ef6e6914c8245ca24dae952bc054ae2328e751ab", "patch": "@@ -1,3 +1,8 @@\n+2018-11-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/88182\n+\t* testsuite/libgomp.c++/pr88182.C: New testcase.\n+\n 2018-11-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR bootstrap/88106"}, {"sha": "2e3ac69c5fc8ed6c7cebb7ebde31fab4763d7582", "filename": "libgomp/testsuite/libgomp.c++/pr88182.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef6e6914c8245ca24dae952bc054ae2328e751ab/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr88182.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef6e6914c8245ca24dae952bc054ae2328e751ab/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr88182.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c%2B%2B%2Fpr88182.C?ref=ef6e6914c8245ca24dae952bc054ae2328e751ab", "patch": "@@ -0,0 +1,42 @@\n+// { dg-do run }\n+// { dg-options \"-O -fopenmp -ftree-loop-if-convert -fno-ssa-phiopt\" }\n+\n+#pragma omp declare simd simdlen(4) notinbranch\n+__attribute__((noinline)) int\n+foo (double c1, double c2)\n+{\n+  double z1 = c1, z2 = c2;\n+  int res = 100, i;\n+\n+  for (i = 0; i < 5; i++)\n+    {\n+      res = (z1 * z1 + z2 * z2 > 4.0) ? (i < res ? i : res) : res;\n+      z1 = c1 + z1 * z1 - z2 * z2;\n+      z2 = c2 + 2.0 * z1 * z2;\n+      c1 += 0.5;\n+      c2 += 0.5;\n+    }\n+  return res;\n+}\n+\n+__attribute__((noinline, noclone)) void\n+bar (double *x, double *y)\n+{\n+  asm volatile (\"\" : : \"rm\" (x), \"rm\" (y) : \"memory\");\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  double c[4] = { 0.0, 1.0, 0.0, 1.0 };\n+  double d[4] = { 0.0, 1.0, 2.0, 0.0 };\n+  int e[4];\n+  bar (c, d);\n+#pragma omp simd safelen(4)\n+  for (i = 0; i < 4; i++)\n+    e[i] = foo (c[i], d[i]);\n+  if (e[0] != 3 || e[1] != 1 || e[2] != 1 || e[3] != 2)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}