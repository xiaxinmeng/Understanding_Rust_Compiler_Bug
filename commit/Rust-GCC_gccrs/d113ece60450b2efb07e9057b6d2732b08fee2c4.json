{"sha": "d113ece60450b2efb07e9057b6d2732b08fee2c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDExM2VjZTYwNDUwYjJlZmIwN2U5MDU3YjZkMjczMmIwOGZlZTJjNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-14T11:00:45Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-14T11:00:45Z"}, "message": "[AArch64] Use SVE UXT[BHW] as a form of predicated AND\n\nUXTB, UXTH and UXTW are equivalent to predicated ANDs with the constants\n0xff, 0xffff and 0xffffffff respectively.  This patch uses them in the\npatterns for IFN_COND_AND.\n\n2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_print_operand): Allow %e to\n\ttake the equivalent mask, as well as a bit count.\n\t* config/aarch64/predicates.md (aarch64_sve_uxtb_immediate)\n\t(aarch64_sve_uxth_immediate, aarch64_sve_uxt_immediate)\n\t(aarch64_sve_pred_and_operand): New predicates.\n\t* config/aarch64/iterators.md (sve_pred_int_rhs2_operand): New\n\tcode attribute.\n\t* config/aarch64/aarch64-sve.md\n\t(cond_<SVE_INT_BINARY:optab><SVE_I:mode>): Use it.\n\t(*cond_uxt<mode>_2, *cond_uxt<mode>_any): New patterns.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/cond_uxt_1.c: New test.\n\t* gcc.target/aarch64/sve/cond_uxt_1_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_uxt_2.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_uxt_2_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_uxt_3.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_uxt_3_run.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_uxt_4.c: Likewise.\n\t* gcc.target/aarch64/sve/cond_uxt_4_run.c: Likewise.\n\nFrom-SVN: r274479", "tree": {"sha": "7cb08921e0414ae8773c1c4a22a4dfa895f4611f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7cb08921e0414ae8773c1c4a22a4dfa895f4611f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d113ece60450b2efb07e9057b6d2732b08fee2c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d113ece60450b2efb07e9057b6d2732b08fee2c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d113ece60450b2efb07e9057b6d2732b08fee2c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d113ece60450b2efb07e9057b6d2732b08fee2c4/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5e16983cd1bd6dd6eca1b939c3c8859f0c6c866"}], "stats": {"total": 403, "additions": 386, "deletions": 17}, "files": [{"sha": "3413b57db2935cebb45a96a45eafe023b3e5ff1c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d113ece60450b2efb07e9057b6d2732b08fee2c4", "patch": "@@ -1,3 +1,16 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_print_operand): Allow %e to\n+\ttake the equivalent mask, as well as a bit count.\n+\t* config/aarch64/predicates.md (aarch64_sve_uxtb_immediate)\n+\t(aarch64_sve_uxth_immediate, aarch64_sve_uxt_immediate)\n+\t(aarch64_sve_pred_and_operand): New predicates.\n+\t* config/aarch64/iterators.md (sve_pred_int_rhs2_operand): New\n+\tcode attribute.\n+\t* config/aarch64/aarch64-sve.md\n+\t(cond_<SVE_INT_BINARY:optab><SVE_I:mode>): Use it.\n+\t(*cond_uxt<mode>_2, *cond_uxt<mode>_any): New patterns.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/aarch64-sve.md"}, {"sha": "a79757e9bf1c363e49c6944fffa12b2b7fad6da8", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=d113ece60450b2efb07e9057b6d2732b08fee2c4", "patch": "@@ -54,6 +54,7 @@\n ;;\n ;; == Unary arithmetic\n ;; ---- [INT] General unary arithmetic corresponding to rtx codes\n+;; ---- [INT] Zero extension\n ;; ---- [INT] Logical inverse\n ;; ---- [FP] General unary arithmetic corresponding to unspecs\n ;; ---- [PRED] Inverse\n@@ -1493,6 +1494,58 @@\n   [(set_attr \"movprfx\" \"*,yes,yes\")]\n )\n \n+;; -------------------------------------------------------------------------\n+;; ---- [INT] Zero extension\n+;; -------------------------------------------------------------------------\n+;; Includes:\n+;; - UXTB\n+;; - UXTH\n+;; - UXTW\n+;; -------------------------------------------------------------------------\n+\n+;; Match UXT[BHW] as a conditional AND of a constant, merging with the\n+;; first input.\n+(define_insn \"*cond_uxt<mode>_2\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t   (and:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"0, w\")\n+\t     (match_operand:SVE_I 3 \"aarch64_sve_uxt_immediate\"))\n+\t   (match_dup 2)]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE\"\n+  \"@\n+   uxt%e3\\t%0.<Vetype>, %1/m, %0.<Vetype>\n+   movprfx\\t%0, %2\\;uxt%e3\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n+  [(set_attr \"movprfx\" \"*,yes\")]\n+)\n+\n+;; Match UXT[BHW] as a conditional AND of a constant, merging with an\n+;; independent value.\n+;;\n+;; The earlyclobber isn't needed for the first alternative, but omitting\n+;; it would only help the case in which operands 2 and 4 are the same,\n+;; which is handled above rather than here.  Marking all the alternatives\n+;; as early-clobber helps to make the instruction more regular to the\n+;; register allocator.\n+(define_insn \"*cond_uxt<mode>_any\"\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=&w, ?&w, ?&w\")\n+\t(unspec:SVE_I\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl\")\n+\t   (and:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"w, w, w\")\n+\t     (match_operand:SVE_I 3 \"aarch64_sve_uxt_immediate\"))\n+\t   (match_operand:SVE_I 4 \"aarch64_simd_reg_or_zero\" \"0, Dz, w\")]\n+\t  UNSPEC_SEL))]\n+  \"TARGET_SVE && !rtx_equal_p (operands[2], operands[4])\"\n+  \"@\n+   uxt%e3\\t%0.<Vetype>, %1/m, %2.<Vetype>\n+   movprfx\\t%0.<Vetype>, %1/z, %2.<Vetype>\\;uxt%e3\\t%0.<Vetype>, %1/m, %2.<Vetype>\n+   movprfx\\t%0, %4\\;uxt%e3\\t%0.<Vetype>, %1/m, %2.<Vetype>\"\n+  [(set_attr \"movprfx\" \"*,yes,yes\")]\n+)\n+\n ;; -------------------------------------------------------------------------\n ;; ---- [INT] Logical inverse\n ;; -------------------------------------------------------------------------\n@@ -1794,7 +1847,7 @@\n \t  [(match_operand:<VPRED> 1 \"register_operand\")\n \t   (SVE_INT_BINARY:SVE_I\n \t     (match_operand:SVE_I 2 \"register_operand\")\n-\t     (match_operand:SVE_I 3 \"register_operand\"))\n+\t     (match_operand:SVE_I 3 \"<sve_pred_int_rhs2_operand>\"))\n \t   (match_operand:SVE_I 4 \"aarch64_simd_reg_or_zero\")]\n \t  UNSPEC_SEL))]\n   \"TARGET_SVE\""}, {"sha": "8e392257be92dd543b2c3f6c096fb15c2fc040b7", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=d113ece60450b2efb07e9057b6d2732b08fee2c4", "patch": "@@ -8328,7 +8328,8 @@ sizetochar (int size)\n      'D':\t\tTake the duplicated element in a vector constant\n \t\t\tand print it as an unsigned integer, in decimal.\n      'e':\t\tPrint the sign/zero-extend size as a character 8->b,\n-\t\t\t16->h, 32->w.\n+\t\t\t16->h, 32->w.  Can also be used for masks:\n+\t\t\t0xff->b, 0xffff->h, 0xffffffff->w.\n      'I':\t\tIf the operand is a duplicated vector constant,\n \t\t\treplace it with the duplicated scalar.  If the\n \t\t\toperand is then a floating-point constant, replace\n@@ -8399,27 +8400,22 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n \n     case 'e':\n       {\n-\tint n;\n-\n-\tif (!CONST_INT_P (x)\n-\t    || (n = exact_log2 (INTVAL (x) & ~7)) <= 0)\n+\tx = unwrap_const_vec_duplicate (x);\n+\tif (!CONST_INT_P (x))\n \t  {\n \t    output_operand_lossage (\"invalid operand for '%%%c'\", code);\n \t    return;\n \t  }\n \n-\tswitch (n)\n+\tHOST_WIDE_INT val = INTVAL (x);\n+\tif ((val & ~7) == 8 || val == 0xff)\n+\t  fputc ('b', f);\n+\telse if ((val & ~7) == 16 || val == 0xffff)\n+\t  fputc ('h', f);\n+\telse if ((val & ~7) == 32 || val == 0xffffffff)\n+\t  fputc ('w', f);\n+\telse\n \t  {\n-\t  case 3:\n-\t    fputc ('b', f);\n-\t    break;\n-\t  case 4:\n-\t    fputc ('h', f);\n-\t    break;\n-\t  case 5:\n-\t    fputc ('w', f);\n-\t    break;\n-\t  default:\n \t    output_operand_lossage (\"invalid operand for '%%%c'\", code);\n \t    return;\n \t  }"}, {"sha": "3642ba114a3bb3c908362304daec2ff8784f6f12", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=d113ece60450b2efb07e9057b6d2732b08fee2c4", "patch": "@@ -1525,6 +1525,20 @@\n \t\t\t\t  (umax \"D\")\n \t\t\t\t  (umin \"D\")])\n \n+;; The predicate to use for the second input operand in a cond_<optab><mode>\n+;; pattern.\n+(define_code_attr sve_pred_int_rhs2_operand\n+  [(plus \"register_operand\")\n+   (minus \"register_operand\")\n+   (mult \"register_operand\")\n+   (smax \"register_operand\")\n+   (umax \"register_operand\")\n+   (smin \"register_operand\")\n+   (umin \"register_operand\")\n+   (and \"aarch64_sve_pred_and_operand\")\n+   (ior \"register_operand\")\n+   (xor \"register_operand\")])\n+\n ;; -------------------------------------------------------------------\n ;; Int Iterators.\n ;; -------------------------------------------------------------------"}, {"sha": "1a47708c327d1a86cba5c21e62f3b21680d30c58", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=d113ece60450b2efb07e9057b6d2732b08fee2c4", "patch": "@@ -606,11 +606,26 @@\n   (and (match_code \"const,const_vector\")\n        (match_test \"aarch64_sve_inc_dec_immediate_p (op)\")))\n \n+(define_predicate \"aarch64_sve_uxtb_immediate\"\n+  (and (match_code \"const_vector\")\n+       (match_test \"GET_MODE_UNIT_BITSIZE (GET_MODE (op)) > 8\")\n+       (match_test \"aarch64_const_vec_all_same_int_p (op, 0xff)\")))\n+\n+(define_predicate \"aarch64_sve_uxth_immediate\"\n+  (and (match_code \"const_vector\")\n+       (match_test \"GET_MODE_UNIT_BITSIZE (GET_MODE (op)) > 16\")\n+       (match_test \"aarch64_const_vec_all_same_int_p (op, 0xffff)\")))\n+\n (define_predicate \"aarch64_sve_uxtw_immediate\"\n   (and (match_code \"const_vector\")\n        (match_test \"GET_MODE_UNIT_BITSIZE (GET_MODE (op)) > 32\")\n        (match_test \"aarch64_const_vec_all_same_int_p (op, 0xffffffff)\")))\n \n+(define_predicate \"aarch64_sve_uxt_immediate\"\n+  (ior (match_operand 0 \"aarch64_sve_uxtb_immediate\")\n+       (match_operand 0 \"aarch64_sve_uxth_immediate\")\n+       (match_operand 0 \"aarch64_sve_uxtw_immediate\")))\n+\n (define_predicate \"aarch64_sve_logical_immediate\"\n   (and (match_code \"const,const_vector\")\n        (match_test \"aarch64_sve_bitmask_immediate_p (op)\")))\n@@ -670,6 +685,10 @@\n        (match_operand 0 \"aarch64_sve_sub_arith_immediate\")\n        (match_operand 0 \"aarch64_sve_inc_dec_immediate\")))\n \n+(define_predicate \"aarch64_sve_pred_and_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_operand 0 \"aarch64_sve_uxt_immediate\")))\n+\n (define_predicate \"aarch64_sve_logical_operand\"\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"aarch64_sve_logical_immediate\")))"}, {"sha": "70f44b767bccfc044f5de630ef92d0a1a306dfaa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d113ece60450b2efb07e9057b6d2732b08fee2c4", "patch": "@@ -1,3 +1,14 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/cond_uxt_1.c: New test.\n+\t* gcc.target/aarch64/sve/cond_uxt_1_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_uxt_2.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_uxt_2_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_uxt_3.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_uxt_3_run.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_uxt_4.c: Likewise.\n+\t* gcc.target/aarch64/sve/cond_uxt_4_run.c: Likewise.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/cond_convert_1.c: New test."}, {"sha": "05641199e1590aded0dbcba259a6532b513b61e4", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_uxt_1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_1.c?ref=d113ece60450b2efb07e9057b6d2732b08fee2c4", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define NUM_ELEMS(TYPE) (320 / sizeof (TYPE))\n+\n+#define DEF_LOOP(TYPE, CONST)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##CONST##_##TYPE (TYPE *restrict r, TYPE *restrict a,\t\\\n+\t\t\t TYPE *restrict b)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); ++i)\t\t\t\\\n+      r[i] = a[i] > 20 ? b[i] & CONST : b[i];\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\\\n+  T (uint16_t, 0xff)\t\t\t\\\n+\t\t\t\t\t\\\n+  T (uint32_t, 0xff)\t\t\t\\\n+  T (uint32_t, 0xffff)\t\t\t\\\n+\t\t\t\t\t\\\n+  T (uint64_t, 0xff)\t\t\t\\\n+  T (uint64_t, 0xffff)\t\t\t\\\n+  T (uint64_t, 0xffffffff)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+\\.h), p[0-7]/z, \\[x2,[^L]*\\tuxtb\\t\\1, p[0-7]/m, \\1\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+\\.s), p[0-7]/z, \\[x2,[^L]*\\tuxtb\\t\\1, p[0-7]/m, \\1\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+\\.s), p[0-7]/z, \\[x2,[^L]*\\tuxth\\t\\1, p[0-7]/m, \\1\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1d\\t(z[0-9]+\\.d), p[0-7]/z, \\[x2,[^L]*\\tuxtb\\t\\1, p[0-7]/m, \\1\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1d\\t(z[0-9]+\\.d), p[0-7]/z, \\[x2,[^L]*\\tuxth\\t\\1, p[0-7]/m, \\1\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1d\\t(z[0-9]+\\.d), p[0-7]/z, \\[x2,[^L]*\\tuxtw\\t\\1, p[0-7]/m, \\1\\n} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "685f39478d66e2290eaba61fbffea795c1e95520", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_uxt_1_run.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_1_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_1_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_1_run.c?ref=d113ece60450b2efb07e9057b6d2732b08fee2c4", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_uxt_1.c\"\n+\n+#define TEST_LOOP(TYPE, CONST)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    TYPE r[NUM_ELEMS (TYPE)];\t\t\t\t\\\n+    TYPE a[NUM_ELEMS (TYPE)];\t\t\t\t\\\n+    TYPE b[NUM_ELEMS (TYPE)];\t\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); ++i)\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+    test_##CONST##_##TYPE (r, a, b);\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); ++i)\t\t\\\n+      if (r[i] != (a[i] > 20 ? b[i] & CONST : b[i]))\t\\\n+\t__builtin_abort ();\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "c900498a0dfef7a5ac6c8c827a5a95f5ad44d2d5", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_uxt_2.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_2.c?ref=d113ece60450b2efb07e9057b6d2732b08fee2c4", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define NUM_ELEMS(TYPE) (320 / sizeof (TYPE))\n+\n+#define DEF_LOOP(TYPE, CONST)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##CONST##_##TYPE (TYPE *restrict r, TYPE *restrict a,\t\\\n+\t\t\t TYPE *restrict b)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); ++i)\t\t\t\\\n+      r[i] = a[i] > 20 ? b[i] & CONST : a[i];\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\\\n+  T (uint16_t, 0xff)\t\t\t\\\n+\t\t\t\t\t\\\n+  T (uint32_t, 0xff)\t\t\t\\\n+  T (uint32_t, 0xffff)\t\t\t\\\n+\t\t\t\t\t\\\n+  T (uint64_t, 0xff)\t\t\t\\\n+  T (uint64_t, 0xffff)\t\t\t\\\n+  T (uint64_t, 0xffffffff)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler {\\tld1h\\t(z[0-9]+\\.h), p[0-7]/z, \\[x1,[^L]*\\tld1h\\t(z[0-9]+\\.h), p[0-7]/z, \\[x2,[^L]*\\tuxtb\\t\\1, p[0-7]/m, \\2\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+\\.s), p[0-7]/z, \\[x1,[^L]*\\tld1w\\t(z[0-9]+\\.s), p[0-7]/z, \\[x2,[^L]*\\tuxtb\\t\\1, p[0-7]/m, \\2\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1w\\t(z[0-9]+\\.s), p[0-7]/z, \\[x1,[^L]*\\tld1w\\t(z[0-9]+\\.s), p[0-7]/z, \\[x2,[^L]*\\tuxth\\t\\1, p[0-7]/m, \\2\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tld1d\\t(z[0-9]+\\.d), p[0-7]/z, \\[x1,[^L]*\\tld1d\\t(z[0-9]+\\.d), p[0-7]/z, \\[x2,[^L]*\\tuxtb\\t\\1, p[0-7]/m, \\2\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1d\\t(z[0-9]+\\.d), p[0-7]/z, \\[x1,[^L]*\\tld1d\\t(z[0-9]+\\.d), p[0-7]/z, \\[x2,[^L]*\\tuxth\\t\\1, p[0-7]/m, \\2\\n} } } */\n+/* { dg-final { scan-assembler {\\tld1d\\t(z[0-9]+\\.d), p[0-7]/z, \\[x1,[^L]*\\tld1d\\t(z[0-9]+\\.d), p[0-7]/z, \\[x2,[^L]*\\tuxtw\\t\\1, p[0-7]/m, \\2\\n} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz} } } */\n+/* { dg-final { scan-assembler-not {\\tmovprfx\\t} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "75679cdf9a36fea871bf2bfac28efece5d19c46b", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_uxt_2_run.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_2_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_2_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_2_run.c?ref=d113ece60450b2efb07e9057b6d2732b08fee2c4", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_uxt_2.c\"\n+\n+#define TEST_LOOP(TYPE, CONST)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    TYPE r[NUM_ELEMS (TYPE)];\t\t\t\t\\\n+    TYPE a[NUM_ELEMS (TYPE)];\t\t\t\t\\\n+    TYPE b[NUM_ELEMS (TYPE)];\t\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); ++i)\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+    test_##CONST##_##TYPE (r, a, b);\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); ++i)\t\t\\\n+      if (r[i] != (a[i] > 20 ? b[i] & CONST : a[i]))\t\\\n+\t__builtin_abort ();\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "cf1fd0029150881f03c7f4a5b793696121557dc6", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_uxt_3.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_3.c?ref=d113ece60450b2efb07e9057b6d2732b08fee2c4", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define NUM_ELEMS(TYPE) (320 / sizeof (TYPE))\n+\n+#define DEF_LOOP(TYPE, CONST)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##CONST##_##TYPE (TYPE *restrict r, TYPE *restrict a,\t\\\n+\t\t\t TYPE *restrict b)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); ++i)\t\t\t\\\n+      r[i] = a[i] > 20 ? b[i] & CONST : 127;\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\\\n+  T (uint16_t, 0xff)\t\t\t\\\n+\t\t\t\t\t\\\n+  T (uint32_t, 0xff)\t\t\t\\\n+  T (uint32_t, 0xffff)\t\t\t\\\n+\t\t\t\t\t\\\n+  T (uint64_t, 0xff)\t\t\t\\\n+  T (uint64_t, 0xffff)\t\t\t\\\n+  T (uint64_t, 0xffffffff)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler {\\tmovprfx\\t(z[0-9]+), z[0-9]+\\n\\tuxtb\\t\\1\\.h, p[0-7]/m, z[0-9]+\\.h\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tmovprfx\\t(z[0-9]+), z[0-9]+\\n\\tuxtb\\t\\1\\.s, p[0-7]/m, z[0-9]+\\.s\\n} } } */\n+/* { dg-final { scan-assembler {\\tmovprfx\\t(z[0-9]+), z[0-9]+\\n\\tuxth\\t\\1\\.s, p[0-7]/m, z[0-9]+\\.s\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tmovprfx\\t(z[0-9]+), z[0-9]+\\n\\tuxtb\\t\\1\\.d, p[0-7]/m, z[0-9]+\\.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmovprfx\\t(z[0-9]+), z[0-9]+\\n\\tuxth\\t\\1\\.d, p[0-7]/m, z[0-9]+\\.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmovprfx\\t(z[0-9]+), z[0-9]+\\n\\tuxtw\\t\\1\\.d, p[0-7]/m, z[0-9]+\\.d\\n} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tmov\\tz[^\\n]*z} } } */\n+/* { dg-final { scan-assembler-not {\\tsel\\t} } } */"}, {"sha": "3d33d3a39c656d0efb7e66fef6f8823411a815d9", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_uxt_3_run.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_3_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_3_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_3_run.c?ref=d113ece60450b2efb07e9057b6d2732b08fee2c4", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_uxt_3.c\"\n+\n+#define TEST_LOOP(TYPE, CONST)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    TYPE r[NUM_ELEMS (TYPE)];\t\t\t\t\\\n+    TYPE a[NUM_ELEMS (TYPE)];\t\t\t\t\\\n+    TYPE b[NUM_ELEMS (TYPE)];\t\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); ++i)\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+    test_##CONST##_##TYPE (r, a, b);\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); ++i)\t\t\\\n+      if (r[i] != (a[i] > 20 ? b[i] & CONST : 127))\t\\\n+\t__builtin_abort ();\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}, {"sha": "25c664780cc585162aff6f1ba81743ce2c8e1671", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_uxt_4.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_4.c?ref=d113ece60450b2efb07e9057b6d2732b08fee2c4", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#define NUM_ELEMS(TYPE) (320 / sizeof (TYPE))\n+\n+#define DEF_LOOP(TYPE, CONST)\t\t\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\t\\\n+  test_##CONST##_##TYPE (TYPE *restrict r, TYPE *restrict a,\t\\\n+\t\t\t TYPE *restrict b)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); ++i)\t\t\t\\\n+      r[i] = a[i] > 20 ? b[i] & CONST : 0;\t\t\t\\\n+  }\n+\n+#define TEST_ALL(T)\t\t\t\\\n+  T (uint16_t, 0xff)\t\t\t\\\n+\t\t\t\t\t\\\n+  T (uint32_t, 0xff)\t\t\t\\\n+  T (uint32_t, 0xffff)\t\t\t\\\n+\t\t\t\t\t\\\n+  T (uint64_t, 0xff)\t\t\t\\\n+  T (uint64_t, 0xffff)\t\t\t\\\n+  T (uint64_t, 0xffffffff)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler {\\tmovprfx\\t(z[0-9]+\\.h), (p[0-7])/z, z[0-9]+\\.h\\n\\tuxtb\\t\\1, \\2/m, z[0-9]+\\.h\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tmovprfx\\t(z[0-9]+\\.s), (p[0-7])/z, z[0-9]+\\.s\\n\\tuxtb\\t\\1, \\2/m, z[0-9]+\\.s\\n} } } */\n+/* { dg-final { scan-assembler {\\tmovprfx\\t(z[0-9]+\\.s), (p[0-7])/z, z[0-9]+\\.s\\n\\tuxth\\t\\1, \\2/m, z[0-9]+\\.s\\n} } } */\n+\n+/* { dg-final { scan-assembler {\\tmovprfx\\t(z[0-9]+\\.d), (p[0-7])/z, z[0-9]+\\.d\\n\\tuxtb\\t\\1, \\2/m, z[0-9]+\\.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmovprfx\\t(z[0-9]+\\.d), (p[0-7])/z, z[0-9]+\\.d\\n\\tuxth\\t\\1, \\2/m, z[0-9]+\\.d\\n} } } */\n+/* { dg-final { scan-assembler {\\tmovprfx\\t(z[0-9]+\\.d), (p[0-7])/z, z[0-9]+\\.d\\n\\tuxtw\\t\\1, \\2/m, z[0-9]+\\.d\\n} } } */"}, {"sha": "f3c4374bab1d972c63828a37a11c476a147f1b2a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/cond_uxt_4_run.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_4_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d113ece60450b2efb07e9057b6d2732b08fee2c4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_4_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fcond_uxt_4_run.c?ref=d113ece60450b2efb07e9057b6d2732b08fee2c4", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do run { target { aarch64_sve_hw } } } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include \"cond_uxt_4.c\"\n+\n+#define TEST_LOOP(TYPE, CONST)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\\\n+    TYPE r[NUM_ELEMS (TYPE)];\t\t\t\t\\\n+    TYPE a[NUM_ELEMS (TYPE)];\t\t\t\t\\\n+    TYPE b[NUM_ELEMS (TYPE)];\t\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); ++i)\t\t\\\n+      {\t\t\t\t\t\t\t\\\n+\ta[i] = (i & 1 ? i : 3 * i);\t\t\t\\\n+\tb[i] = (i >> 4) << (i & 15);\t\t\t\\\n+\tasm volatile (\"\" ::: \"memory\");\t\t\t\\\n+      }\t\t\t\t\t\t\t\\\n+    test_##CONST##_##TYPE (r, a, b);\t\t\t\\\n+    for (int i = 0; i < NUM_ELEMS (TYPE); ++i)\t\t\\\n+      if (r[i] != (a[i] > 20 ? b[i] & CONST : 0))\t\\\n+\t__builtin_abort ();\t\t\t\t\\\n+  }\n+\n+int main ()\n+{\n+  TEST_ALL (TEST_LOOP)\n+  return 0;\n+}"}]}