{"sha": "85f5e2b68d38861a759736546ce55cff62538193", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVmNWUyYjY4ZDM4ODYxYTc1OTczNjU0NmNlNTVjZmY2MjUzODE5Mw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-07-23T21:15:35Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1992-07-23T21:15:35Z"}, "message": "Do not emit insns to compare two constants.\n\nFrom-SVN: r1677", "tree": {"sha": "e02736bf287e9b87e644b040442e7d9246578c7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e02736bf287e9b87e644b040442e7d9246578c7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85f5e2b68d38861a759736546ce55cff62538193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85f5e2b68d38861a759736546ce55cff62538193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85f5e2b68d38861a759736546ce55cff62538193", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85f5e2b68d38861a759736546ce55cff62538193/comments", "author": null, "committer": null, "parents": [{"sha": "5a13dfdd5117158f6783903a77a5c7ab2ea8c7d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a13dfdd5117158f6783903a77a5c7ab2ea8c7d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a13dfdd5117158f6783903a77a5c7ab2ea8c7d7"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "82f31aea6261b6c965a9e05639cff60b2589ed2e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85f5e2b68d38861a759736546ce55cff62538193/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85f5e2b68d38861a759736546ce55cff62538193/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=85f5e2b68d38861a759736546ce55cff62538193", "patch": "@@ -421,7 +421,7 @@ large_int (op, mode)\n      rtx op;\n      enum machine_mode mode;\n {\n-  long value;\n+  HOST_WIDE_INT value;\n \n   if (GET_CODE (op) != CONST_INT)\n     return FALSE;\n@@ -1608,7 +1608,7 @@ gen_int_relational (test_code, result, cmp0, cmp1, p_invert)\n   if ((GET_CODE (cmp0) == REG || GET_CODE (cmp0) == SUBREG)\n       && GET_CODE (cmp1) == CONST_INT)\n     {\n-      int value = INTVAL (cmp1);\n+      HOST_WIDE_INT value = INTVAL (cmp1);\n       rtx truth = (rtx)0;\n \n       if (test == ITEST_GEU && value == 0)\n@@ -1675,7 +1675,7 @@ gen_int_relational (test_code, result, cmp0, cmp1, p_invert)\n \n   if (GET_CODE (cmp1) == CONST_INT)\n     {\n-      int value = INTVAL (cmp1);\n+      HOST_WIDE_INT value = INTVAL (cmp1);\n       if (value < p_info->const_low || value > p_info->const_high)\n \tcmp1 = force_reg (SImode, cmp1);\n     }\n@@ -1833,7 +1833,42 @@ gen_conditional_branch (operands, test_code)\n       }\n       break;\n     }\n-  \n+\n+  /* Handle always true or always false cases directly */\n+  if (GET_CODE (cmp0) == CONST_INT && GET_CODE (cmp1) == CONST_INT)\n+    {\n+      HOST_WIDE_INT sval0 = INTVAL (cmp0);\n+      HOST_WIDE_INT sval1 = INTVAL (cmp1);\n+      unsigned long uval0 = sval0;\n+      unsigned long uval1 = sval1;\n+      int truth\t\t  = 0;\n+\n+      switch (test_code)\n+\t{\n+\tdefault:\n+\t  goto fail;\n+\n+\tcase EQ:  truth = (sval0 == sval1); break;\n+\tcase NE:  truth = (sval0 != sval1); break;\n+\tcase GT:  truth = (sval0 >  sval1); break;\n+\tcase GE:  truth = (sval0 >= sval1); break;\n+\tcase LT:  truth = (sval0 <  sval1); break;\n+\tcase LE:  truth = (sval0 <= sval1); break;\n+\tcase GTU: truth = (uval0 >  uval1); break;\n+\tcase GEU: truth = (uval0 >= uval1); break;\n+\tcase LTU: truth = (uval0 <  uval1); break;\n+\tcase LEU: truth = (uval0 <= uval1); break;\n+\t}\n+\n+      if (invert)\n+\ttruth = ! truth;\n+\n+      if (truth)\n+\temit_jump_insn (gen_rtx (SET, VOIDmode, pc_rtx, label1));\n+\n+      return;\n+    }\n+\n   /* Generate the jump */\n   if (invert)\n     {"}]}