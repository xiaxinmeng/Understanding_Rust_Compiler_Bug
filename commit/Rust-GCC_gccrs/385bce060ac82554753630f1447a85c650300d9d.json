{"sha": "385bce060ac82554753630f1447a85c650300d9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg1YmNlMDYwYWM4MjU1NDc1MzYzMGYxNDQ3YTg1YzY1MDMwMGQ5ZA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-09-07T04:10:10Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-09-07T04:10:10Z"}, "message": "re PR c++/11867 (static_cast ignores ambiguity)\n\n\tPR c++/11687\n\t* call.c (standard_conversion): Improve comments.\n\t(perform_direct_initialization): Make sure we return an expression\n\tof the correct type.\n\t* typeck.c (build_static_cast): Check for ambiguity and\n\taccessibility when performing conversions.\n\n\tPR c++/11687\n\t* g++.dg/expr/static_cast5.C: New test.\n\nFrom-SVN: r71157", "tree": {"sha": "36da4e4899471215b1c1ed86f5a20bf2d7365607", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36da4e4899471215b1c1ed86f5a20bf2d7365607"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/385bce060ac82554753630f1447a85c650300d9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/385bce060ac82554753630f1447a85c650300d9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/385bce060ac82554753630f1447a85c650300d9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/385bce060ac82554753630f1447a85c650300d9d/comments", "author": null, "committer": null, "parents": [{"sha": "ef8f74d66da4c6034217dfe1147bb24e0193ef80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8f74d66da4c6034217dfe1147bb24e0193ef80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef8f74d66da4c6034217dfe1147bb24e0193ef80"}], "stats": {"total": 84, "additions": 64, "deletions": 20}, "files": [{"sha": "1c8fef025733c3bcfb72d9e2c48d73b02695937a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385bce060ac82554753630f1447a85c650300d9d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385bce060ac82554753630f1447a85c650300d9d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=385bce060ac82554753630f1447a85c650300d9d", "patch": "@@ -1,3 +1,12 @@\n+2003-09-06  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/11687\n+\t* call.c (standard_conversion): Improve comments.\n+\t(perform_direct_initialization): Make sure we return an expression\n+\tof the correct type.\n+\t* typeck.c (build_static_cast): Check for ambiguity and\n+\taccessibility when performing conversions.\n+\n 2003-09-06  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* cp-tree.h (add_binding): Remove declaration."}, {"sha": "bc7e3b8ab5bd0a72cff7f40a99764990f9210150", "filename": "gcc/cp/call.c", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385bce060ac82554753630f1447a85c650300d9d/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385bce060ac82554753630f1447a85c650300d9d/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=385bce060ac82554753630f1447a85c650300d9d", "patch": "@@ -701,16 +701,25 @@ standard_conversion (tree to, tree from, tree expr)\n \t    }\n \t}\n       else if (IS_AGGR_TYPE (TREE_TYPE (from))\n-\t       && IS_AGGR_TYPE (TREE_TYPE (to)))\n+\t       && IS_AGGR_TYPE (TREE_TYPE (to))\n+\t       /* [conv.ptr]\n+\t\t  \n+\t          An rvalue of type \"pointer to cv D,\" where D is a\n+\t\t  class type, can be converted to an rvalue of type\n+\t\t  \"pointer to cv B,\" where B is a base class (clause\n+\t\t  _class.derived_) of D.  If B is an inaccessible\n+\t\t  (clause _class.access_) or ambiguous\n+\t\t  (_class.member.lookup_) base class of D, a program\n+\t\t  that necessitates this conversion is ill-formed.  */\n+\t       /* Therefore, we use DERIVED_FROM_P, and not\n+\t\t  ACESSIBLY_UNIQUELY_DERIVED_FROM_P, in this test.  */\n+\t       && DERIVED_FROM_P (TREE_TYPE (to), TREE_TYPE (from)))\n \t{\n-\t  if (DERIVED_FROM_P (TREE_TYPE (to), TREE_TYPE (from)))\n-\t    {\n-\t      from = \n-\t\tcp_build_qualified_type (TREE_TYPE (to),\n-\t\t\t\t\t cp_type_quals (TREE_TYPE (from)));\n-\t      from = build_pointer_type (from);\n-\t      conv = build_conv (PTR_CONV, from, conv);\n-\t    }\n+\t  from = \n+\t    cp_build_qualified_type (TREE_TYPE (to),\n+\t\t\t\t     cp_type_quals (TREE_TYPE (from)));\n+\t  from = build_pointer_type (from);\n+\t  conv = build_conv (PTR_CONV, from, conv);\n \t}\n \n       if (tcode == POINTER_TYPE)\n@@ -5970,10 +5979,13 @@ perform_direct_initialization_if_possible (tree type, tree expr)\n      the overload resolution is ambiguous, the initialization is\n      ill-formed.  */\n   if (CLASS_TYPE_P (type))\n-    return build_special_member_call (NULL_TREE, complete_ctor_identifier,\n-\t\t\t\t      build_tree_list (NULL_TREE, expr),\n-\t\t\t\t      TYPE_BINFO (type),\n-\t\t\t\t      LOOKUP_NORMAL);\n+    {\n+      expr = build_special_member_call (NULL_TREE, complete_ctor_identifier,\n+\t\t\t\t\tbuild_tree_list (NULL_TREE, expr),\n+\t\t\t\t\tTYPE_BINFO (type),\n+\t\t\t\t\tLOOKUP_NORMAL);\n+      return build_cplus_new (type, expr);\n+    }\n   conv = implicit_conversion (type, TREE_TYPE (expr), expr,\n \t\t\t      LOOKUP_NORMAL);\n   if (!conv || ICS_BAD_FLAG (conv))"}, {"sha": "8b391b8448d8513b1e340f3b303fb1808152a2ba", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385bce060ac82554753630f1447a85c650300d9d/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385bce060ac82554753630f1447a85c650300d9d/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=385bce060ac82554753630f1447a85c650300d9d", "patch": "@@ -4427,12 +4427,13 @@ build_static_cast (tree type, tree expr)\n \t\t\t\t\t  (TREE_TYPE (type))))\n       && at_least_as_qualified_p (TREE_TYPE (type), intype))\n     {\n-      /* At this point we have checked all of the conditions except\n-\t that B is not a virtual base class of D.  That will be\n-\t checked by build_base_path.  */\n-      tree base = lookup_base (TREE_TYPE (type), intype, ba_any, NULL);\n+      /* There is a standard conversion from \"D*\" to \"B*\" even if \"B\"\n+\t is ambiguous or inaccessible.  Therefore, we ask lookup_base\n+\t to check these conditions.  */\n+      tree base = lookup_base (TREE_TYPE (type), intype, ba_check, NULL);\n \n-      /* Convert from B* to D*.  */\n+      /* Convert from \"B*\" to \"D*\".  This function will check that \"B\"\n+\t is not a virtual base of \"D\".  */\n       expr = build_base_path (MINUS_EXPR, build_address (expr), \n \t\t\t      base, /*nonnull=*/false);\n       /* Convert the pointer to a reference -- but then remember that\n@@ -4491,8 +4492,8 @@ build_static_cast (tree type, tree expr)\n       tree base;\n \n       check_for_casting_away_constness (intype, type, \"static_cast\");\n-      base = lookup_base (TREE_TYPE (type), TREE_TYPE (intype), \n-\t\t\t  ba_check | ba_quiet, NULL);\n+      base = lookup_base (TREE_TYPE (type), TREE_TYPE (intype), ba_check, \n+\t\t\t  NULL);\n       return build_base_path (MINUS_EXPR, expr, base, /*nonnull=*/false);\n     }\n   "}, {"sha": "d5b929a674dbc94979b213e5efee9be4d1c77fc2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385bce060ac82554753630f1447a85c650300d9d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385bce060ac82554753630f1447a85c650300d9d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=385bce060ac82554753630f1447a85c650300d9d", "patch": "@@ -1,3 +1,8 @@\n+2003-09-06  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/11687\n+\t* g++.dg/expr/static_cast5.C: New test.\n+\n 2003-09-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/11794"}, {"sha": "1a51f15167728afa07063d813a7124659b0513ab", "filename": "gcc/testsuite/g++.dg/expr/static_cast5.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/385bce060ac82554753630f1447a85c650300d9d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstatic_cast5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/385bce060ac82554753630f1447a85c650300d9d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstatic_cast5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fexpr%2Fstatic_cast5.C?ref=385bce060ac82554753630f1447a85c650300d9d", "patch": "@@ -0,0 +1,17 @@\n+void ambig()\n+{\n+  struct A {};\n+  struct B : A {};\n+  struct C : A {};\n+  struct D : B, C {};\n+\n+  D d;\n+  A* ap = static_cast<B*> (&d);\n+  D* db = static_cast<D*> (ap); // { dg-error \"\" }\n+  \n+  D& dr1 = static_cast<D&> (*ap); // { dg-error \"\" }\n+  \n+  A& ar = static_cast<C&> (d);\n+  D& dr = static_cast<D&> (ar);  // { dg-error \"\" }\n+}\n+"}]}