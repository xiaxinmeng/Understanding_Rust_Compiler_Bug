{"sha": "4f38fa8ce5b39d0a04f9d76c6f3844734fc4837b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGYzOGZhOGNlNWIzOWQwYTA0ZjlkNzZjNmYzODQ0NzM0ZmM0ODM3Yg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-03-12T12:38:47Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-03-12T12:38:47Z"}, "message": "re PR libstdc++/56557 (Link error about `std::fstream' or `std::stringstream' with `-flto' and `-rdynamic' options)\n\n\tPR lto/56557\n\t* lto-streamer-out.c (output_symbol_p): Skip references from\n\tconstructors of external variables.\n\nFrom-SVN: r196613", "tree": {"sha": "00ec5d59f0f58c60fd301a2a96110ce4ee19f789", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00ec5d59f0f58c60fd301a2a96110ce4ee19f789"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f38fa8ce5b39d0a04f9d76c6f3844734fc4837b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f38fa8ce5b39d0a04f9d76c6f3844734fc4837b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f38fa8ce5b39d0a04f9d76c6f3844734fc4837b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f38fa8ce5b39d0a04f9d76c6f3844734fc4837b/comments", "author": null, "committer": null, "parents": [{"sha": "c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5c5ba89acc96e48bf6eed87489fcda3efcd7fc3"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "9acbb52eb0ade7de0e30f8bcd10382c712202028", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f38fa8ce5b39d0a04f9d76c6f3844734fc4837b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f38fa8ce5b39d0a04f9d76c6f3844734fc4837b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f38fa8ce5b39d0a04f9d76c6f3844734fc4837b", "patch": "@@ -1,3 +1,9 @@\n+2013-03-11  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR lto/56557\n+\t* lto-streamer-out.c (output_symbol_p): Skip references from\n+\tconstructors of external variables.\n+\n 2013-03-11  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/56571"}, {"sha": "b205092f597b0c0219f69e7d737d935cb95cb84b", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f38fa8ce5b39d0a04f9d76c6f3844734fc4837b/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f38fa8ce5b39d0a04f9d76c6f3844734fc4837b/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=4f38fa8ce5b39d0a04f9d76c6f3844734fc4837b", "patch": "@@ -1265,17 +1265,36 @@ bool\n output_symbol_p (symtab_node node)\n {\n   struct cgraph_node *cnode;\n-  struct ipa_ref *ref;\n-\n   if (!symtab_real_symbol_p (node))\n     return false;\n   /* We keep external functions in symtab for sake of inlining\n      and devirtualization.  We do not want to see them in symbol table as\n-     references.  */\n+     references unless they are really used.  */\n   cnode = dyn_cast <cgraph_node> (node);\n-  if (cnode && DECL_EXTERNAL (cnode->symbol.decl))\n-    return (cnode->callers\n-\t    || ipa_ref_list_referring_iterate (&cnode->symbol.ref_list, 0, ref));\n+  if (cnode && DECL_EXTERNAL (cnode->symbol.decl)\n+      && cnode->callers)\n+    return true;\n+\n+ /* Ignore all references from external vars initializers - they are not really\n+    part of the compilation unit until they are used by folding.  Some symbols,\n+    like references to external construction vtables can not be referred to at all.\n+    We decide this at can_refer_decl_in_current_unit_p.  */\n+ if (DECL_EXTERNAL (node->symbol.decl))\n+    {\n+      int i;\n+      struct ipa_ref *ref;\n+      for (i = 0; ipa_ref_list_referring_iterate (&node->symbol.ref_list,\n+\t\t\t\t\t          i, ref); i++)\n+\t{\n+\t  if (ref->use == IPA_REF_ALIAS)\n+\t    continue;\n+          if (is_a <cgraph_node> (ref->referring))\n+\t    return true;\n+\t  if (!DECL_EXTERNAL (ref->referring->symbol.decl))\n+\t    return true;\n+\t}\n+      return false;\n+    }\n   return true;\n }\n "}]}