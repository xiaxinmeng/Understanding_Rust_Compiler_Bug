{"sha": "87aeea25837515cf31c8783238419e6e6936290d", "node_id": "C_kwDOANBUbNoAKDg3YWVlYTI1ODM3NTE1Y2YzMWM4NzgzMjM4NDE5ZTZlNjkzNjI5MGQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-20T15:42:12Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-02-22T15:17:36Z"}, "message": "Refactor lang item mappings enum into its own header", "tree": {"sha": "523921013fcc6640f5be4d3fccef4ac584528fe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/523921013fcc6640f5be4d3fccef4ac584528fe3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87aeea25837515cf31c8783238419e6e6936290d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87aeea25837515cf31c8783238419e6e6936290d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87aeea25837515cf31c8783238419e6e6936290d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87aeea25837515cf31c8783238419e6e6936290d/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "265c223766f1f4525558d086ccc46bd49f7b26e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265c223766f1f4525558d086ccc46bd49f7b26e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/265c223766f1f4525558d086ccc46bd49f7b26e0"}], "stats": {"total": 564, "additions": 295, "deletions": 269}, "files": [{"sha": "9bac328ee0fc3f7eee13823dfb694f97ff0354fa", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 1, "deletions": 269, "changes": 270, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87aeea25837515cf31c8783238419e6e6936290d/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87aeea25837515cf31c8783238419e6e6936290d/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=87aeea25837515cf31c8783238419e6e6936290d", "patch": "@@ -25,279 +25,11 @@\n #include \"rust-canonical-path.h\"\n #include \"rust-ast-full-decls.h\"\n #include \"rust-hir-full-decls.h\"\n-#include \"operator.h\"\n+#include \"rust-lang-item.h\"\n \n namespace Rust {\n namespace Analysis {\n \n-// https://github.com/rust-lang/rust/blob/master/library/core/src/ops/arith.rs\n-class RustLangItem\n-{\n-public:\n-  enum ItemType\n-  {\n-    ADD,\n-    SUBTRACT,\n-    MULTIPLY,\n-    DIVIDE,\n-    REMAINDER,\n-    BITAND,\n-    BITOR,\n-    BITXOR,\n-    SHL,\n-    SHR,\n-\n-    NEGATION,\n-    NOT,\n-\n-    ADD_ASSIGN,\n-    SUB_ASSIGN,\n-    MUL_ASSIGN,\n-    DIV_ASSIGN,\n-    REM_ASSIGN,\n-    BITAND_ASSIGN,\n-    BITOR_ASSIGN,\n-    BITXOR_ASSIGN,\n-    SHL_ASSIGN,\n-    SHR_ASSIGN,\n-\n-    DEREF,\n-    DEREF_MUT,\n-\n-    UNKNOWN,\n-  };\n-\n-  static ItemType Parse (const std::string &item)\n-  {\n-    if (item.compare (\"add\") == 0)\n-      {\n-\treturn ItemType::ADD;\n-      }\n-    else if (item.compare (\"sub\") == 0)\n-      {\n-\treturn ItemType::SUBTRACT;\n-      }\n-    else if (item.compare (\"mul\") == 0)\n-      {\n-\treturn ItemType::MULTIPLY;\n-      }\n-    else if (item.compare (\"div\") == 0)\n-      {\n-\treturn ItemType::DIVIDE;\n-      }\n-    else if (item.compare (\"rem\") == 0)\n-      {\n-\treturn ItemType::REMAINDER;\n-      }\n-    else if (item.compare (\"bitand\") == 0)\n-      {\n-\treturn ItemType::BITAND;\n-      }\n-    else if (item.compare (\"bitor\") == 0)\n-      {\n-\treturn ItemType::BITOR;\n-      }\n-    else if (item.compare (\"bitxor\") == 0)\n-      {\n-\treturn ItemType::BITXOR;\n-      }\n-    else if (item.compare (\"shl\") == 0)\n-      {\n-\treturn ItemType::SHL;\n-      }\n-    else if (item.compare (\"shr\") == 0)\n-      {\n-\treturn ItemType::SHR;\n-      }\n-    else if (item.compare (\"neg\") == 0)\n-      {\n-\treturn ItemType::NEGATION;\n-      }\n-    else if (item.compare (\"not\") == 0)\n-      {\n-\treturn ItemType::NOT;\n-      }\n-    else if (item.compare (\"add_assign\") == 0)\n-      {\n-\treturn ItemType::ADD_ASSIGN;\n-      }\n-    else if (item.compare (\"sub_assign\") == 0)\n-      {\n-\treturn ItemType::SUB_ASSIGN;\n-      }\n-    else if (item.compare (\"mul_assign\") == 0)\n-      {\n-\treturn ItemType::MUL_ASSIGN;\n-      }\n-    else if (item.compare (\"div_assign\") == 0)\n-      {\n-\treturn ItemType::DIV_ASSIGN;\n-      }\n-    else if (item.compare (\"rem_assign\") == 0)\n-      {\n-\treturn ItemType::REM_ASSIGN;\n-      }\n-    else if (item.compare (\"bitand_assign\") == 0)\n-      {\n-\treturn ItemType::BITAND_ASSIGN;\n-      }\n-    else if (item.compare (\"bitor_assign\") == 0)\n-      {\n-\treturn ItemType::BITOR_ASSIGN;\n-      }\n-    else if (item.compare (\"bitxor_assign\") == 0)\n-      {\n-\treturn ItemType::BITXOR_ASSIGN;\n-      }\n-    else if (item.compare (\"shl_assign\") == 0)\n-      {\n-\treturn ItemType::SHL_ASSIGN;\n-      }\n-    else if (item.compare (\"shr_assign\") == 0)\n-      {\n-\treturn ItemType::SHR_ASSIGN;\n-      }\n-    else if (item.compare (\"deref\") == 0)\n-      {\n-\treturn ItemType::DEREF;\n-      }\n-    else if (item.compare (\"deref_mut\") == 0)\n-      {\n-\treturn ItemType::DEREF_MUT;\n-      }\n-\n-    return ItemType::UNKNOWN;\n-  }\n-\n-  static std::string ToString (ItemType type)\n-  {\n-    switch (type)\n-      {\n-      case ADD:\n-\treturn \"add\";\n-      case SUBTRACT:\n-\treturn \"sub\";\n-      case MULTIPLY:\n-\treturn \"mul\";\n-      case DIVIDE:\n-\treturn \"div\";\n-      case REMAINDER:\n-\treturn \"rem\";\n-      case BITAND:\n-\treturn \"bitand\";\n-      case BITOR:\n-\treturn \"bitor\";\n-      case BITXOR:\n-\treturn \"bitxor\";\n-      case SHL:\n-\treturn \"shl\";\n-      case SHR:\n-\treturn \"shr\";\n-      case NEGATION:\n-\treturn \"neg\";\n-      case NOT:\n-\treturn \"not\";\n-      case ADD_ASSIGN:\n-\treturn \"add_assign\";\n-      case SUB_ASSIGN:\n-\treturn \"sub_assign\";\n-      case MUL_ASSIGN:\n-\treturn \"mul_assign\";\n-      case DIV_ASSIGN:\n-\treturn \"div_assign\";\n-      case REM_ASSIGN:\n-\treturn \"rem_assign\";\n-      case BITAND_ASSIGN:\n-\treturn \"bitand_assign\";\n-      case BITOR_ASSIGN:\n-\treturn \"bitor_assign\";\n-      case BITXOR_ASSIGN:\n-\treturn \"bitxor_assign\";\n-      case SHL_ASSIGN:\n-\treturn \"shl_assign\";\n-      case SHR_ASSIGN:\n-\treturn \"shr_assign\";\n-      case DEREF:\n-\treturn \"deref\";\n-      case DEREF_MUT:\n-\treturn \"deref_mut\";\n-\n-      case UNKNOWN:\n-\treturn \"<UNKNOWN>\";\n-      }\n-    return \"<UNKNOWN>\";\n-  }\n-\n-  static ItemType OperatorToLangItem (ArithmeticOrLogicalOperator op)\n-  {\n-    switch (op)\n-      {\n-      case ArithmeticOrLogicalOperator::ADD:\n-\treturn ItemType::ADD;\n-      case ArithmeticOrLogicalOperator::SUBTRACT:\n-\treturn ItemType::SUBTRACT;\n-      case ArithmeticOrLogicalOperator::MULTIPLY:\n-\treturn ItemType::MULTIPLY;\n-      case ArithmeticOrLogicalOperator::DIVIDE:\n-\treturn ItemType::DIVIDE;\n-      case ArithmeticOrLogicalOperator::MODULUS:\n-\treturn ItemType::REMAINDER;\n-      case ArithmeticOrLogicalOperator::BITWISE_AND:\n-\treturn ItemType::BITAND;\n-      case ArithmeticOrLogicalOperator::BITWISE_OR:\n-\treturn ItemType::BITOR;\n-      case ArithmeticOrLogicalOperator::BITWISE_XOR:\n-\treturn ItemType::BITXOR;\n-      case ArithmeticOrLogicalOperator::LEFT_SHIFT:\n-\treturn ItemType::SHL;\n-      case ArithmeticOrLogicalOperator::RIGHT_SHIFT:\n-\treturn ItemType::SHR;\n-      }\n-    return ItemType::UNKNOWN;\n-  }\n-\n-  static ItemType\n-  CompoundAssignmentOperatorToLangItem (ArithmeticOrLogicalOperator op)\n-  {\n-    switch (op)\n-      {\n-      case ArithmeticOrLogicalOperator::ADD:\n-\treturn ItemType::ADD_ASSIGN;\n-      case ArithmeticOrLogicalOperator::SUBTRACT:\n-\treturn ItemType::SUB_ASSIGN;\n-      case ArithmeticOrLogicalOperator::MULTIPLY:\n-\treturn ItemType::MUL_ASSIGN;\n-      case ArithmeticOrLogicalOperator::DIVIDE:\n-\treturn ItemType::DIV_ASSIGN;\n-      case ArithmeticOrLogicalOperator::MODULUS:\n-\treturn ItemType::REM_ASSIGN;\n-      case ArithmeticOrLogicalOperator::BITWISE_AND:\n-\treturn ItemType::BITAND_ASSIGN;\n-      case ArithmeticOrLogicalOperator::BITWISE_OR:\n-\treturn ItemType::BITOR_ASSIGN;\n-      case ArithmeticOrLogicalOperator::BITWISE_XOR:\n-\treturn ItemType::BITXOR_ASSIGN;\n-      case ArithmeticOrLogicalOperator::LEFT_SHIFT:\n-\treturn ItemType::SHL_ASSIGN;\n-      case ArithmeticOrLogicalOperator::RIGHT_SHIFT:\n-\treturn ItemType::SHR_ASSIGN;\n-      }\n-    return ItemType::UNKNOWN;\n-  }\n-\n-  static ItemType NegationOperatorToLangItem (NegationOperator op)\n-  {\n-    switch (op)\n-      {\n-      case NegationOperator::NEGATE:\n-\treturn ItemType::NEGATION;\n-      case NegationOperator::NOT:\n-\treturn ItemType::NOT;\n-      }\n-    return ItemType::UNKNOWN;\n-  }\n-};\n-\n class NodeMapping\n {\n public:"}, {"sha": "abf210d1c46359fd786ed95152af021edf97f751", "filename": "gcc/rust/util/rust-lang-item.h", "status": "added", "additions": 294, "deletions": 0, "changes": 294, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87aeea25837515cf31c8783238419e6e6936290d/gcc%2Frust%2Futil%2Frust-lang-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87aeea25837515cf31c8783238419e6e6936290d/gcc%2Frust%2Futil%2Frust-lang-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-lang-item.h?ref=87aeea25837515cf31c8783238419e6e6936290d", "patch": "@@ -0,0 +1,294 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"rust-system.h\"\n+#include \"operator.h\"\n+\n+namespace Rust {\n+namespace Analysis {\n+\n+// https://github.com/rust-lang/rust/blob/master/library/core/src/ops/arith.rs\n+class RustLangItem\n+{\n+public:\n+  enum ItemType\n+  {\n+    ADD,\n+    SUBTRACT,\n+    MULTIPLY,\n+    DIVIDE,\n+    REMAINDER,\n+    BITAND,\n+    BITOR,\n+    BITXOR,\n+    SHL,\n+    SHR,\n+\n+    NEGATION,\n+    NOT,\n+\n+    ADD_ASSIGN,\n+    SUB_ASSIGN,\n+    MUL_ASSIGN,\n+    DIV_ASSIGN,\n+    REM_ASSIGN,\n+    BITAND_ASSIGN,\n+    BITOR_ASSIGN,\n+    BITXOR_ASSIGN,\n+    SHL_ASSIGN,\n+    SHR_ASSIGN,\n+\n+    DEREF,\n+    DEREF_MUT,\n+\n+    UNKNOWN,\n+  };\n+\n+  static ItemType Parse (const std::string &item)\n+  {\n+    if (item.compare (\"add\") == 0)\n+      {\n+\treturn ItemType::ADD;\n+      }\n+    else if (item.compare (\"sub\") == 0)\n+      {\n+\treturn ItemType::SUBTRACT;\n+      }\n+    else if (item.compare (\"mul\") == 0)\n+      {\n+\treturn ItemType::MULTIPLY;\n+      }\n+    else if (item.compare (\"div\") == 0)\n+      {\n+\treturn ItemType::DIVIDE;\n+      }\n+    else if (item.compare (\"rem\") == 0)\n+      {\n+\treturn ItemType::REMAINDER;\n+      }\n+    else if (item.compare (\"bitand\") == 0)\n+      {\n+\treturn ItemType::BITAND;\n+      }\n+    else if (item.compare (\"bitor\") == 0)\n+      {\n+\treturn ItemType::BITOR;\n+      }\n+    else if (item.compare (\"bitxor\") == 0)\n+      {\n+\treturn ItemType::BITXOR;\n+      }\n+    else if (item.compare (\"shl\") == 0)\n+      {\n+\treturn ItemType::SHL;\n+      }\n+    else if (item.compare (\"shr\") == 0)\n+      {\n+\treturn ItemType::SHR;\n+      }\n+    else if (item.compare (\"neg\") == 0)\n+      {\n+\treturn ItemType::NEGATION;\n+      }\n+    else if (item.compare (\"not\") == 0)\n+      {\n+\treturn ItemType::NOT;\n+      }\n+    else if (item.compare (\"add_assign\") == 0)\n+      {\n+\treturn ItemType::ADD_ASSIGN;\n+      }\n+    else if (item.compare (\"sub_assign\") == 0)\n+      {\n+\treturn ItemType::SUB_ASSIGN;\n+      }\n+    else if (item.compare (\"mul_assign\") == 0)\n+      {\n+\treturn ItemType::MUL_ASSIGN;\n+      }\n+    else if (item.compare (\"div_assign\") == 0)\n+      {\n+\treturn ItemType::DIV_ASSIGN;\n+      }\n+    else if (item.compare (\"rem_assign\") == 0)\n+      {\n+\treturn ItemType::REM_ASSIGN;\n+      }\n+    else if (item.compare (\"bitand_assign\") == 0)\n+      {\n+\treturn ItemType::BITAND_ASSIGN;\n+      }\n+    else if (item.compare (\"bitor_assign\") == 0)\n+      {\n+\treturn ItemType::BITOR_ASSIGN;\n+      }\n+    else if (item.compare (\"bitxor_assign\") == 0)\n+      {\n+\treturn ItemType::BITXOR_ASSIGN;\n+      }\n+    else if (item.compare (\"shl_assign\") == 0)\n+      {\n+\treturn ItemType::SHL_ASSIGN;\n+      }\n+    else if (item.compare (\"shr_assign\") == 0)\n+      {\n+\treturn ItemType::SHR_ASSIGN;\n+      }\n+    else if (item.compare (\"deref\") == 0)\n+      {\n+\treturn ItemType::DEREF;\n+      }\n+    else if (item.compare (\"deref_mut\") == 0)\n+      {\n+\treturn ItemType::DEREF_MUT;\n+      }\n+\n+    return ItemType::UNKNOWN;\n+  }\n+\n+  static std::string ToString (ItemType type)\n+  {\n+    switch (type)\n+      {\n+      case ADD:\n+\treturn \"add\";\n+      case SUBTRACT:\n+\treturn \"sub\";\n+      case MULTIPLY:\n+\treturn \"mul\";\n+      case DIVIDE:\n+\treturn \"div\";\n+      case REMAINDER:\n+\treturn \"rem\";\n+      case BITAND:\n+\treturn \"bitand\";\n+      case BITOR:\n+\treturn \"bitor\";\n+      case BITXOR:\n+\treturn \"bitxor\";\n+      case SHL:\n+\treturn \"shl\";\n+      case SHR:\n+\treturn \"shr\";\n+      case NEGATION:\n+\treturn \"neg\";\n+      case NOT:\n+\treturn \"not\";\n+      case ADD_ASSIGN:\n+\treturn \"add_assign\";\n+      case SUB_ASSIGN:\n+\treturn \"sub_assign\";\n+      case MUL_ASSIGN:\n+\treturn \"mul_assign\";\n+      case DIV_ASSIGN:\n+\treturn \"div_assign\";\n+      case REM_ASSIGN:\n+\treturn \"rem_assign\";\n+      case BITAND_ASSIGN:\n+\treturn \"bitand_assign\";\n+      case BITOR_ASSIGN:\n+\treturn \"bitor_assign\";\n+      case BITXOR_ASSIGN:\n+\treturn \"bitxor_assign\";\n+      case SHL_ASSIGN:\n+\treturn \"shl_assign\";\n+      case SHR_ASSIGN:\n+\treturn \"shr_assign\";\n+      case DEREF:\n+\treturn \"deref\";\n+      case DEREF_MUT:\n+\treturn \"deref_mut\";\n+\n+      case UNKNOWN:\n+\treturn \"<UNKNOWN>\";\n+      }\n+    return \"<UNKNOWN>\";\n+  }\n+\n+  static ItemType OperatorToLangItem (ArithmeticOrLogicalOperator op)\n+  {\n+    switch (op)\n+      {\n+      case ArithmeticOrLogicalOperator::ADD:\n+\treturn ItemType::ADD;\n+      case ArithmeticOrLogicalOperator::SUBTRACT:\n+\treturn ItemType::SUBTRACT;\n+      case ArithmeticOrLogicalOperator::MULTIPLY:\n+\treturn ItemType::MULTIPLY;\n+      case ArithmeticOrLogicalOperator::DIVIDE:\n+\treturn ItemType::DIVIDE;\n+      case ArithmeticOrLogicalOperator::MODULUS:\n+\treturn ItemType::REMAINDER;\n+      case ArithmeticOrLogicalOperator::BITWISE_AND:\n+\treturn ItemType::BITAND;\n+      case ArithmeticOrLogicalOperator::BITWISE_OR:\n+\treturn ItemType::BITOR;\n+      case ArithmeticOrLogicalOperator::BITWISE_XOR:\n+\treturn ItemType::BITXOR;\n+      case ArithmeticOrLogicalOperator::LEFT_SHIFT:\n+\treturn ItemType::SHL;\n+      case ArithmeticOrLogicalOperator::RIGHT_SHIFT:\n+\treturn ItemType::SHR;\n+      }\n+    return ItemType::UNKNOWN;\n+  }\n+\n+  static ItemType\n+  CompoundAssignmentOperatorToLangItem (ArithmeticOrLogicalOperator op)\n+  {\n+    switch (op)\n+      {\n+      case ArithmeticOrLogicalOperator::ADD:\n+\treturn ItemType::ADD_ASSIGN;\n+      case ArithmeticOrLogicalOperator::SUBTRACT:\n+\treturn ItemType::SUB_ASSIGN;\n+      case ArithmeticOrLogicalOperator::MULTIPLY:\n+\treturn ItemType::MUL_ASSIGN;\n+      case ArithmeticOrLogicalOperator::DIVIDE:\n+\treturn ItemType::DIV_ASSIGN;\n+      case ArithmeticOrLogicalOperator::MODULUS:\n+\treturn ItemType::REM_ASSIGN;\n+      case ArithmeticOrLogicalOperator::BITWISE_AND:\n+\treturn ItemType::BITAND_ASSIGN;\n+      case ArithmeticOrLogicalOperator::BITWISE_OR:\n+\treturn ItemType::BITOR_ASSIGN;\n+      case ArithmeticOrLogicalOperator::BITWISE_XOR:\n+\treturn ItemType::BITXOR_ASSIGN;\n+      case ArithmeticOrLogicalOperator::LEFT_SHIFT:\n+\treturn ItemType::SHL_ASSIGN;\n+      case ArithmeticOrLogicalOperator::RIGHT_SHIFT:\n+\treturn ItemType::SHR_ASSIGN;\n+      }\n+    return ItemType::UNKNOWN;\n+  }\n+\n+  static ItemType NegationOperatorToLangItem (NegationOperator op)\n+  {\n+    switch (op)\n+      {\n+      case NegationOperator::NEGATE:\n+\treturn ItemType::NEGATION;\n+      case NegationOperator::NOT:\n+\treturn ItemType::NOT;\n+      }\n+    return ItemType::UNKNOWN;\n+  }\n+};\n+\n+} // namespace Analysis\n+} // namespace Rust"}]}