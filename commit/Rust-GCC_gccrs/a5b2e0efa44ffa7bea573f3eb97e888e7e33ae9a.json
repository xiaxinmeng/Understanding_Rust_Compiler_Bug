{"sha": "a5b2e0efa44ffa7bea573f3eb97e888e7e33ae9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTViMmUwZWZhNDRmZmE3YmVhNTczZjNlYjk3ZTg4OGU3ZTMzYWU5YQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-08-05T08:24:58Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-08-05T08:24:58Z"}, "message": "i386.c (ix86_decompose_address): Check for SI_REG using REGNO of base_reg directly.\n\n\t* config/i386/i386.c (ix86_decompose_address): Check for SI_REG\n\tusing REGNO of base_reg directly.\n\nFrom-SVN: r162899", "tree": {"sha": "3db37e0787984f3724d9bda83b4f08395da48f7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3db37e0787984f3724d9bda83b4f08395da48f7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5b2e0efa44ffa7bea573f3eb97e888e7e33ae9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b2e0efa44ffa7bea573f3eb97e888e7e33ae9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5b2e0efa44ffa7bea573f3eb97e888e7e33ae9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b2e0efa44ffa7bea573f3eb97e888e7e33ae9a/comments", "author": null, "committer": null, "parents": [{"sha": "5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1fd3469feb271afea5f336a7b9dcfc1df19d44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f1fd3469feb271afea5f336a7b9dcfc1df19d44"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "3456501c8f91450dab745e1ee3a32956554eaceb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b2e0efa44ffa7bea573f3eb97e888e7e33ae9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b2e0efa44ffa7bea573f3eb97e888e7e33ae9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5b2e0efa44ffa7bea573f3eb97e888e7e33ae9a", "patch": "@@ -1,3 +1,8 @@\n+2010-08-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_decompose_address): Check for SI_REG\n+\tusing REGNO of base_reg directly.\n+\n 2010-08-05  Jie Zhang  <jie@codesourcery.com>\n \n \tPR tree-optimization/45144\n@@ -33,7 +38,7 @@\n \n \t* config/i386/i386.h (struct machine_frame_state): Rename from\n \tmachine_cfa_state.  Add members tracking SP and FP regardless\n-\tof the current CFA register.  \n+\tof the current CFA register.\n \t(ix86_cfa_state): Remove.\n \t* config/i386/i386.c (struct ix86_frame): Add reg_save_offset\n \tand sse_reg_save_offset members.\n@@ -138,7 +143,7 @@\n \t* tree-ssa-propagate.h (struct prop_value_d, prop_value_t): Move ...\n \t* tree-ssa-ccp.c: ... here.\n \t* tree-ssa-copy.c: ... and here.\n-\t* tree-ssa-propagate.h (enum value_range_type, struct value_range_d, \n+\t* tree-ssa-propagate.h (enum value_range_type, struct value_range_d,\n \tvalue_range_t): Move ...\n \t* tree-vrp.c: ... here.\n \t* tree-ssa-propagate.h (ssa_prop_get_value_fn): New typedef."}, {"sha": "dd81825863760c53b83763283e87ca72fca055de", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5b2e0efa44ffa7bea573f3eb97e888e7e33ae9a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5b2e0efa44ffa7bea573f3eb97e888e7e33ae9a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a5b2e0efa44ffa7bea573f3eb97e888e7e33ae9a", "patch": "@@ -10417,8 +10417,7 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n      to test cfun for being non-NULL. */\n   if (TARGET_K6 && cfun && optimize_function_for_speed_p (cfun)\n       && base_reg && !index_reg && !disp\n-      && REG_P (base_reg)\n-      && REGNO_REG_CLASS (REGNO (base_reg)) == SIREG)\n+      && REG_P (base_reg) && REGNO (base_reg) == SI_REG)\n     disp = const0_rtx;\n \n   /* Special case: encode reg+reg instead of reg*2.  */"}]}