{"sha": "3d36d470d88228da1aef65bc90c4d7ff873a701f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2QzNmQ0NzBkODgyMjhkYTFhZWY2NWJjOTBjNGQ3ZmY4NzNhNzAxZg==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2014-10-13T17:47:20Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2014-10-13T17:47:20Z"}, "message": "rs6000.h (DBX_REGISTER_NUMBER): Pass format argument to rs6000_dbx_register_number.\n\n\t* config/rs6000/rs6000.h (DBX_REGISTER_NUMBER): Pass format argument\n\tto rs6000_dbx_register_number.\n\t(DWARF_FRAME_REGNUM): Redefine as identity map.\n\t(DWARF2_FRAME_REG_OUT): Call rs6000_dbx_register_number.\n\t* config/rs6000/rs6000-protos.h (rs6000_dbx_register_number): Update.\n\t* config/rs6000/rs6000.c (rs6000_dbx_register_number): Add format\n\targument to handle .debug_frame and .eh_frame directly.  Always\n\ttranslate SPE high register numbers.  Add special treatment for CR,\n\tbut only in .debug_frame.  Respect RS6000_USE_DWARF_NUMBERING.\n\n\t* config/rs6000/sysv.h (DBX_REGISTER_NUMBER): Do not undefine.\n\t* config/rs6000/freebsd.h (DBX_REGISTER_NUMBER): Remove.\n\t(RS6000_USE_DWARF_NUMBERING): Define.\n\t* config/rs6000/freebsd64.h (DBX_REGISTER_NUMBER): Remove.\n\t(RS6000_USE_DWARF_NUMBERING): Define.\n\t* config/rs6000/netbsd.h (DBX_REGISTER_NUMBER): Remove.\n\t(RS6000_USE_DWARF_NUMBERING): Define.\n\t* config/rs6000/lynx.h (DBX_REGISTER_NUMBER): Remove.\n\t(RS6000_USE_DWARF_NUMBERING): Define.\n\t* config/rs6000/aix.h (RS6000_USE_DWARF_NUMBERING): Define.\n\t* config/rs6000/darwin.h (RS6000_USE_DWARF_NUMBERING): Define.\n\nFrom-SVN: r216157", "tree": {"sha": "155eaf70053944534dcd0ee9153e7df7d2486ba5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/155eaf70053944534dcd0ee9153e7df7d2486ba5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d36d470d88228da1aef65bc90c4d7ff873a701f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d36d470d88228da1aef65bc90c4d7ff873a701f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d36d470d88228da1aef65bc90c4d7ff873a701f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d36d470d88228da1aef65bc90c4d7ff873a701f/comments", "author": null, "committer": null, "parents": [{"sha": "d91684adfb1f30f338ef9ec975ed788006fb88cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d91684adfb1f30f338ef9ec975ed788006fb88cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d91684adfb1f30f338ef9ec975ed788006fb88cb"}], "stats": {"total": 97, "additions": 74, "deletions": 23}, "files": [{"sha": "61990be970c68304bcbbe5c4f3a5ba55bf80c223", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3d36d470d88228da1aef65bc90c4d7ff873a701f", "patch": "@@ -1,3 +1,27 @@\n+2014-10-13  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* config/rs6000/rs6000.h (DBX_REGISTER_NUMBER): Pass format argument\n+\tto rs6000_dbx_register_number.\n+\t(DWARF_FRAME_REGNUM): Redefine as identity map.\n+\t(DWARF2_FRAME_REG_OUT): Call rs6000_dbx_register_number.\n+\t* config/rs6000/rs6000-protos.h (rs6000_dbx_register_number): Update.\n+\t* config/rs6000/rs6000.c (rs6000_dbx_register_number): Add format\n+\targument to handle .debug_frame and .eh_frame directly.  Always\n+\ttranslate SPE high register numbers.  Add special treatment for CR,\n+\tbut only in .debug_frame.  Respect RS6000_USE_DWARF_NUMBERING.\n+\n+\t* config/rs6000/sysv.h (DBX_REGISTER_NUMBER): Do not undefine.\n+\t* config/rs6000/freebsd.h (DBX_REGISTER_NUMBER): Remove.\n+\t(RS6000_USE_DWARF_NUMBERING): Define.\n+\t* config/rs6000/freebsd64.h (DBX_REGISTER_NUMBER): Remove.\n+\t(RS6000_USE_DWARF_NUMBERING): Define.\n+\t* config/rs6000/netbsd.h (DBX_REGISTER_NUMBER): Remove.\n+\t(RS6000_USE_DWARF_NUMBERING): Define.\n+\t* config/rs6000/lynx.h (DBX_REGISTER_NUMBER): Remove.\n+\t(RS6000_USE_DWARF_NUMBERING): Define.\n+\t* config/rs6000/aix.h (RS6000_USE_DWARF_NUMBERING): Define.\n+\t* config/rs6000/darwin.h (RS6000_USE_DWARF_NUMBERING): Define.\n+\n 2014-10-13  Evgeny Stupachenko  <evstupac@gmail.com>\n \n \t* config/i386/i386.c (ix86_address_cost): Lower cost for"}, {"sha": "037ef577a333ce16795e0134e7f4f47e13ca6847", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=3d36d470d88228da1aef65bc90c4d7ff873a701f", "patch": "@@ -223,3 +223,7 @@\n \n /* Static stack checking is supported by means of probes.  */\n #define STACK_CHECK_STATIC_BUILTIN 1\n+\n+/* Use standard DWARF numbering for DWARF debugging information.  */\n+#define RS6000_USE_DWARF_NUMBERING\n+"}, {"sha": "06bd853c4c669af58389bc8a2b0803c0bcc080ac", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=3d36d470d88228da1aef65bc90c4d7ff873a701f", "patch": "@@ -424,3 +424,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* So far, there is no rs6000_fold_builtin, if one is introduced, then\n    this will need to be modified similar to the x86 case.  */\n #define TARGET_FOLD_BUILTIN SUBTARGET_FOLD_BUILTIN\n+\n+/* Use standard DWARF numbering for DWARF debugging information.  */\n+#define RS6000_USE_DWARF_NUMBERING\n+"}, {"sha": "131b122846bb12785b41b7d1fd089b3e0e5773e5", "filename": "gcc/config/rs6000/freebsd.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2Fconfig%2Frs6000%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2Fconfig%2Frs6000%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffreebsd.h?ref=3d36d470d88228da1aef65bc90c4d7ff873a701f", "patch": "@@ -73,6 +73,7 @@\n #define RELOCATABLE_NEEDS_FIXUP \\\n   (rs6000_isa_flags & rs6000_isa_flags_explicit & OPTION_MASK_RELOCATABLE)\n \n-#define DBX_REGISTER_NUMBER(REGNO) rs6000_dbx_register_number (REGNO)\n+/* Use standard DWARF numbering for DWARF debugging information.  */\n+#define RS6000_USE_DWARF_NUMBERING\n \n #define POWERPC_FREEBSD"}, {"sha": "1a69aea9f86df72a8f30adba3e9c3638a37b7ebf", "filename": "gcc/config/rs6000/freebsd64.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h?ref=3d36d470d88228da1aef65bc90c4d7ff873a701f", "patch": "@@ -362,7 +362,8 @@ extern int dot_symbols;\n /* The default value isn't sufficient in 64-bit mode.  */\n #define STACK_CHECK_PROTECT (TARGET_64BIT ? 16 * 1024 : 12 * 1024)\n \n-#define DBX_REGISTER_NUMBER(REGNO) rs6000_dbx_register_number (REGNO)\n+/* Use standard DWARF numbering for DWARF debugging information.  */\n+#define RS6000_USE_DWARF_NUMBERING\n \n /* PowerPC64 Linux word-aligns FP doubles when -malign-power is given.  */\n #undef  ADJUST_FIELD_ALIGN"}, {"sha": "f6652003dbb320ac74f6b7f1cb529fc6dd9a2e2e", "filename": "gcc/config/rs6000/lynx.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2Fconfig%2Frs6000%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2Fconfig%2Frs6000%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flynx.h?ref=3d36d470d88228da1aef65bc90c4d7ff873a701f", "patch": "@@ -99,7 +99,8 @@\n #undef HAVE_AS_TLS\n #define HAVE_AS_TLS 0\n \n-#define DBX_REGISTER_NUMBER(REGNO) rs6000_dbx_register_number (REGNO)\n+/* Use standard DWARF numbering for DWARF debugging information.  */\n+#define RS6000_USE_DWARF_NUMBERING\n \n #ifdef CRT_BEGIN\n /* This function is part of crtbegin*.o which is at the beginning of"}, {"sha": "7290375fe83bb62c454594b1b49b1439f8b52740", "filename": "gcc/config/rs6000/netbsd.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2Fconfig%2Frs6000%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2Fconfig%2Frs6000%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fnetbsd.h?ref=3d36d470d88228da1aef65bc90c4d7ff873a701f", "patch": "@@ -87,4 +87,6 @@\n   { \"netbsd_endfile_spec\",\tNETBSD_ENDFILE_SPEC },\n \n \n-#define DBX_REGISTER_NUMBER(REGNO) rs6000_dbx_register_number (REGNO)\n+/* Use standard DWARF numbering for DWARF debugging information.  */\n+#define RS6000_USE_DWARF_NUMBERING\n+"}, {"sha": "04ddfa9fd93783dd6718c8af31dbe00c016fb439", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=3d36d470d88228da1aef65bc90c4d7ff873a701f", "patch": "@@ -188,7 +188,7 @@ extern int rs6000_trampoline_size (void);\n extern alias_set_type get_TOC_alias_set (void);\n extern void rs6000_emit_prologue (void);\n extern void rs6000_emit_load_toc_table (int);\n-extern unsigned int rs6000_dbx_register_number (unsigned int);\n+extern unsigned int rs6000_dbx_register_number (unsigned int, unsigned int);\n extern void rs6000_emit_epilogue (int);\n extern void rs6000_emit_eh_reg_restore (rtx, rtx);\n extern const char * output_isel (rtx *);"}, {"sha": "912fe3d5c874e93206c5dbe05c1e851924c1a7c1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=3d36d470d88228da1aef65bc90c4d7ff873a701f", "patch": "@@ -31579,17 +31579,40 @@ rs6000_init_dwarf_reg_sizes_extra (tree address)\n     }\n }\n \n-/* Map internal gcc register numbers to DWARF2 register numbers.  */\n+/* Map internal gcc register numbers to debug format register numbers.\n+   FORMAT specifies the type of debug register number to use:\n+     0 -- debug information, except for frame-related sections\n+     1 -- DWARF .debug_frame section\n+     2 -- DWARF .eh_frame section  */\n \n unsigned int\n-rs6000_dbx_register_number (unsigned int regno)\n+rs6000_dbx_register_number (unsigned int regno, unsigned int format)\n {\n-  if (regno <= 63 || write_symbols != DWARF2_DEBUG)\n+  /* We never use the GCC internal number for SPE high registers.\n+     Those are mapped to the 1200..1231 range for all debug formats.  */\n+  if (SPE_HIGH_REGNO_P (regno))\n+    return regno - FIRST_SPE_HIGH_REGNO + 1200;\n+\n+  /* Except for the above, we use the internal number for non-DWARF\n+     debug information, and also for .eh_frame.  */\n+  if ((format == 0 && write_symbols != DWARF2_DEBUG) || format == 2)\n+    return regno;\n+\n+  /* On some platforms, we use the standard DWARF register\n+     numbering for .debug_info and .debug_frame.  */\n+#ifdef RS6000_USE_DWARF_NUMBERING\n+  if (regno <= 63)\n     return regno;\n   if (regno == LR_REGNO)\n     return 108;\n   if (regno == CTR_REGNO)\n     return 109;\n+  /* Special handling for CR for .debug_frame: rs6000_emit_prologue has\n+     translated any combination of CR2, CR3, CR4 saves to a save of CR2.\n+     The actual code emitted saves the whole of CR, so we map CR2_REGNO\n+     to the DWARF reg for CR.  */\n+  if (format == 1 && regno == CR2_REGNO)\n+    return 64;\n   if (CR_REGNO_P (regno))\n     return regno - CR0_REGNO + 86;\n   if (regno == CA_REGNO)\n@@ -31604,8 +31627,7 @@ rs6000_dbx_register_number (unsigned int regno)\n     return 99;\n   if (regno == SPEFSCR_REGNO)\n     return 612;\n-  if (SPE_HIGH_REGNO_P (regno))\n-    return regno - FIRST_SPE_HIGH_REGNO + 1200;\n+#endif\n   return regno;\n }\n "}, {"sha": "f343d7a4b4a6e1e42de0434b35e7f10e88aff6fe", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=3d36d470d88228da1aef65bc90c4d7ff873a701f", "patch": "@@ -947,23 +947,16 @@ enum data_align { align_abi, align_opt, align_both };\n   ((r) >= 1200 ? ((r) - 1200 + (DWARF_FRAME_REGISTERS - 32)) : (r))\n \n /* Use standard DWARF numbering for DWARF debugging information.  */\n-#define DBX_REGISTER_NUMBER(REGNO) rs6000_dbx_register_number (REGNO)\n+#define DBX_REGISTER_NUMBER(REGNO) rs6000_dbx_register_number ((REGNO), 0)\n \n /* Use gcc hard register numbering for eh_frame.  */\n-#define DWARF_FRAME_REGNUM(REGNO) \\\n-  (SPE_HIGH_REGNO_P (REGNO) ? ((REGNO) - FIRST_SPE_HIGH_REGNO + 1200) : (REGNO))\n+#define DWARF_FRAME_REGNUM(REGNO) (REGNO)\n \n /* Map register numbers held in the call frame info that gcc has\n    collected using DWARF_FRAME_REGNUM to those that should be output in\n-   .debug_frame and .eh_frame.  We continue to use gcc hard reg numbers\n-   for .eh_frame, but use the numbers mandated by the various ABIs for\n-   .debug_frame.  rs6000_emit_prologue has translated any combination of\n-   CR2, CR3, CR4 saves to a save of CR2.  The actual code emitted saves\n-   the whole of CR, so we map CR2_REGNO to the DWARF reg for CR.  */\n-#define DWARF2_FRAME_REG_OUT(REGNO, FOR_EH)\t\\\n-  ((FOR_EH) ? (REGNO)\t\t\t\t\\\n-   : (REGNO) == CR2_REGNO ? 64\t\t\t\\\n-   : DBX_REGISTER_NUMBER (REGNO))\n+   .debug_frame and .eh_frame.  */\n+#define DWARF2_FRAME_REG_OUT(REGNO, FOR_EH) \\\n+  rs6000_dbx_register_number ((REGNO), (FOR_EH)? 2 : 1)\n \n /* 1 for registers that have pervasive standard uses\n    and are not available for the register allocator."}, {"sha": "64c5516e67728a68e3725b52c629adfaf14e7680", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d36d470d88228da1aef65bc90c4d7ff873a701f/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=3d36d470d88228da1aef65bc90c4d7ff873a701f", "patch": "@@ -949,4 +949,3 @@ ncrtn.o%s\"\n /* This target uses the sysv4.opt file.  */\n #define TARGET_USES_SYSV4_OPT 1\n \n-#undef DBX_REGISTER_NUMBER"}]}