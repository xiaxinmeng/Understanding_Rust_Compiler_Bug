{"sha": "74cab21a4ba7605ea5ebf1910eba4db2852cd75a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRjYWIyMWE0YmE3NjA1ZWE1ZWJmMTkxMGViYTRkYjI4NTJjZDc1YQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-11-20T11:41:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-11-20T11:41:57Z"}, "message": "exp_ch6.adb (Make_Build_In_Place_Call_In_Assignment): Declare NEW_EXPR local variable and attach the temporary to it.\n\n2011-11-20  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Assignment):\n\tDeclare NEW_EXPR local variable and attach the\n\ttemporary to it.  Set Is_Known_Non_Null on the temporary.\n\t(Make_Build_In_Place_Call_In_Object_Declaration): Likewise.\n\t* exp_util.adb (Remove_Side_Effects): Set Is_Known_Non_Null on\n\tthe temporary created to hold the 'Reference of the expression,\n\tif any.\n\t* checks.adb (Install_Null_Excluding_Check): Bail out for the\n\tGet_Current_Excep.all.all idiom generated by the expander.\n\nFrom-SVN: r181529", "tree": {"sha": "5f5d1a77edd05aad05f51a5a22f62a33e92189e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f5d1a77edd05aad05f51a5a22f62a33e92189e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74cab21a4ba7605ea5ebf1910eba4db2852cd75a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74cab21a4ba7605ea5ebf1910eba4db2852cd75a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74cab21a4ba7605ea5ebf1910eba4db2852cd75a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74cab21a4ba7605ea5ebf1910eba4db2852cd75a/comments", "author": null, "committer": null, "parents": [{"sha": "088b91c76fe3051e27fc07243e51dd79b4c7547a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/088b91c76fe3051e27fc07243e51dd79b4c7547a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/088b91c76fe3051e27fc07243e51dd79b4c7547a"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "35a2096ca37e3a82374a9ac4c18d68a401ce8aa7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cab21a4ba7605ea5ebf1910eba4db2852cd75a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cab21a4ba7605ea5ebf1910eba4db2852cd75a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=74cab21a4ba7605ea5ebf1910eba4db2852cd75a", "patch": "@@ -1,3 +1,15 @@\n+2011-11-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Assignment):\n+\tDeclare NEW_EXPR local variable and attach the\n+\ttemporary to it.  Set Is_Known_Non_Null on the temporary.\n+\t(Make_Build_In_Place_Call_In_Object_Declaration): Likewise.\n+\t* exp_util.adb (Remove_Side_Effects): Set Is_Known_Non_Null on\n+\tthe temporary created to hold the 'Reference of the expression,\n+\tif any.\n+\t* checks.adb (Install_Null_Excluding_Check): Bail out for the\n+\tGet_Current_Excep.all.all idiom generated by the expander.\n+\n 2011-11-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (struct language_function): Add GNAT_RET."}, {"sha": "e6d8bf996efcb0fd7ce297fecfcc80da9421abb3", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cab21a4ba7605ea5ebf1910eba4db2852cd75a/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cab21a4ba7605ea5ebf1910eba4db2852cd75a/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=74cab21a4ba7605ea5ebf1910eba4db2852cd75a", "patch": "@@ -5673,6 +5673,22 @@ package body Checks is\n          return;\n       end if;\n \n+      --  No check needed for the Get_Current_Excep.all.all idiom generated by\n+      --  the expander within exception handlers, since we know that the value\n+      --  can never be null.\n+\n+      --  Is this really the right way to do this? Normally we generate such\n+      --  code in the expander with checks off, and that's how we suppress this\n+      --  kind of junk check ???\n+\n+      if Nkind (N) = N_Function_Call\n+        and then Nkind (Name (N)) = N_Explicit_Dereference\n+        and then Nkind (Prefix (Name (N))) = N_Identifier\n+        and then Is_RTE (Entity (Prefix (Name (N))), RE_Get_Current_Excep)\n+      then\n+         return;\n+      end if;\n+\n       --  Otherwise install access check\n \n       Insert_Action (N,"}, {"sha": "f3d915de74acdc7f7cce8686e87995310eabca76", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cab21a4ba7605ea5ebf1910eba4db2852cd75a/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cab21a4ba7605ea5ebf1910eba4db2852cd75a/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=74cab21a4ba7605ea5ebf1910eba4db2852cd75a", "patch": "@@ -7954,6 +7954,7 @@ package body Exp_Ch6 is\n       Obj_Id       : Entity_Id;\n       Ptr_Typ      : Entity_Id;\n       Ptr_Typ_Decl : Node_Id;\n+      New_Expr     : Node_Id;\n       Result_Subt  : Entity_Id;\n       Target       : Node_Id;\n \n@@ -8035,14 +8036,17 @@ package body Exp_Ch6 is\n       --  Finally, create an access object initialized to a reference to the\n       --  function call.\n \n-      Obj_Id := Make_Temporary (Loc, 'R');\n+      New_Expr := Make_Reference (Loc, Relocate_Node (Func_Call));\n+\n+      Obj_Id := Make_Temporary (Loc, 'R', New_Expr);\n       Set_Etype (Obj_Id, Ptr_Typ);\n+      Set_Is_Known_Non_Null (Obj_Id);\n \n       Obj_Decl :=\n         Make_Object_Declaration (Loc,\n           Defining_Identifier => Obj_Id,\n           Object_Definition   => New_Reference_To (Ptr_Typ, Loc),\n-          Expression => Make_Reference (Loc, Relocate_Node (Func_Call)));\n+          Expression          => New_Expr);\n       Insert_After_And_Analyze (Ptr_Typ_Decl, Obj_Decl);\n \n       Rewrite (Assign, Make_Null_Statement (Loc));\n@@ -8301,6 +8305,7 @@ package body Exp_Ch6 is\n \n       Def_Id := Make_Temporary (Loc, 'R', New_Expr);\n       Set_Etype (Def_Id, Ref_Type);\n+      Set_Is_Known_Non_Null (Def_Id);\n \n       Insert_After_And_Analyze (Ptr_Typ_Decl,\n         Make_Object_Declaration (Loc,"}, {"sha": "56a6f20ed1902bee90c72e6f3c69886fc9e6b16f", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74cab21a4ba7605ea5ebf1910eba4db2852cd75a/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74cab21a4ba7605ea5ebf1910eba4db2852cd75a/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=74cab21a4ba7605ea5ebf1910eba4db2852cd75a", "patch": "@@ -6712,6 +6712,7 @@ package body Exp_Util is\n                New_Exp := E;\n             else\n                New_Exp := Make_Reference (Loc, E);\n+               Set_Is_Known_Non_Null (Def_Id);\n             end if;\n          end if;\n "}]}