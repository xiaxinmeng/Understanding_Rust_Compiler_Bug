{"sha": "dac45b5c091237cb7e8f723e75b3897a8f763432", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFjNDViNWMwOTEyMzdjYjdlOGY3MjNlNzViMzg5N2E4Zjc2MzQzMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-10-11T19:55:21Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-10-11T19:55:21Z"}, "message": "re PR c++/5661 (Gcc 3.0.3 Seg faults compiling bad code)\n\n\tPR c++/5661\n\t* cp-tree.h (variably_modified_type_p): New function.\n\t(grokdeclarator) Tighten check for variably modified types as\n\tfields.\n\t* pt.c (convert_template_argument): Do not allow variably modified\n\ttypes as template arguments.\n\t* tree.c (variably_modified_type_p): New function.\n\n\tPR c++/5661\n\t* g++.dg/ext/vlm1.C: New test.\n\t* g++.dg/ext/vlm2.C: Likewise.\n\nFrom-SVN: r58060", "tree": {"sha": "4a570b2a83e5295f39745305c4a521b00d6df0f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a570b2a83e5295f39745305c4a521b00d6df0f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dac45b5c091237cb7e8f723e75b3897a8f763432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dac45b5c091237cb7e8f723e75b3897a8f763432", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dac45b5c091237cb7e8f723e75b3897a8f763432", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dac45b5c091237cb7e8f723e75b3897a8f763432/comments", "author": null, "committer": null, "parents": [{"sha": "46dd38849ba39f228f467edab38cfd60e6809b6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46dd38849ba39f228f467edab38cfd60e6809b6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46dd38849ba39f228f467edab38cfd60e6809b6e"}], "stats": {"total": 136, "additions": 123, "deletions": 13}, "files": [{"sha": "5704c900663998934bbbd816fc2f4d9e5beed1fe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dac45b5c091237cb7e8f723e75b3897a8f763432/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dac45b5c091237cb7e8f723e75b3897a8f763432/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dac45b5c091237cb7e8f723e75b3897a8f763432", "patch": "@@ -11,6 +11,14 @@\n \n 2002-10-11  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/5661\n+\t* cp-tree.h (variably_modified_type_p): New function.\n+\t(grokdeclarator) Tighten check for variably modified types as\n+\tfields.\n+\t* pt.c (convert_template_argument): Do not allow variably modified\n+\ttypes as template arguments.\n+\t* tree.c (variably_modified_type_p): New function.\t\n+\n \t* NEWS: Document removal of \"new X = ...\" extension.\n \t* class.c (initialize_array): Set TREE_HAS_CONSTRUCTOR on\n \tbrace-enclosed initializers."}, {"sha": "d3d064a0dadc948d18d5bb827768d8d7268528d3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dac45b5c091237cb7e8f723e75b3897a8f763432/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dac45b5c091237cb7e8f723e75b3897a8f763432/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=dac45b5c091237cb7e8f723e75b3897a8f763432", "patch": "@@ -4179,6 +4179,7 @@ extern tree cxx_unsave_expr_now\t\t\tPARAMS ((tree));\n extern tree cxx_maybe_build_cleanup\t\tPARAMS ((tree));\n extern void init_tree\t\t\t        PARAMS ((void));\n extern int pod_type_p\t\t\t\tPARAMS ((tree));\n+extern bool variably_modified_type_p            (tree);\n extern int zero_init_p\t\t\t\tPARAMS ((tree));\n extern tree canonical_type_variant              PARAMS ((tree));\n extern void unshare_base_binfos\t\t\tPARAMS ((tree));"}, {"sha": "4401954adcbab8a6913d9e3f8c08b121eac405f4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dac45b5c091237cb7e8f723e75b3897a8f763432/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dac45b5c091237cb7e8f723e75b3897a8f763432/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=dac45b5c091237cb7e8f723e75b3897a8f763432", "patch": "@@ -10928,19 +10928,6 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \n \t    type = create_array_type_for_decl (dname, type, size);\n \n-\t    /* VLAs never work as fields.  */\n-\t    if (decl_context == FIELD && !processing_template_decl\n-\t\t&& TREE_CODE (type) == ARRAY_TYPE\n-\t\t&& TYPE_DOMAIN (type) != NULL_TREE\n-\t\t&& !TREE_CONSTANT (TYPE_MAX_VALUE (TYPE_DOMAIN (type))))\n-\t      {\n-\t\terror (\"size of member `%D' is not constant\", dname);\n-\t\t/* Proceed with arbitrary constant size, so that offset\n-\t\t   computations don't get confused.  */\n-\t\ttype = create_array_type_for_decl (dname, TREE_TYPE (type),\n-\t\t\t\t\t\t   integer_one_node);\n-\t      }\n-\n \t    ctype = NULL_TREE;\n \t  }\n \t  break;\n@@ -11420,6 +11407,14 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n       type = error_mark_node;\n     }\n \n+  if (decl_context == FIELD \n+      && !processing_template_decl \n+      && variably_modified_type_p (type))\n+    {\n+      error (\"data member may not have variably modified type `%T'\", type);\n+      type = error_mark_node;\n+    }\n+\n   if (explicitp == 1 || (explicitp && friendp))\n     {\n       /* [dcl.fct.spec] The explicit specifier shall only be used in"}, {"sha": "ceff84f0a06583d1ab698a4e97c9215ae4674050", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dac45b5c091237cb7e8f723e75b3897a8f763432/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dac45b5c091237cb7e8f723e75b3897a8f763432/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=dac45b5c091237cb7e8f723e75b3897a8f763432", "patch": "@@ -3467,6 +3467,16 @@ convert_template_argument (parm, arg, args, complain, i, in_decl)\n \t\t       val, t);\n \t\t  return error_mark_node;\n \t\t}\n+\n+\t      /* In order to avoid all sorts of complications, we do\n+\t\t not allow variably-modified types as template\n+\t\t arguments.  */\n+\t      if (variably_modified_type_p (val))\n+\t\t{\n+\t\t  error (\"template-argument `%T' is a variably modified type\",\n+\t\t\t val);\n+\t\t  return error_mark_node;\n+\t\t}\n \t    }\n \t}\n     }"}, {"sha": "ddc1ce1001ae7b6ce98feddc2605d4f9c8cc632c", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dac45b5c091237cb7e8f723e75b3897a8f763432/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dac45b5c091237cb7e8f723e75b3897a8f763432/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=dac45b5c091237cb7e8f723e75b3897a8f763432", "patch": "@@ -1958,6 +1958,72 @@ pod_type_p (t)\n   return 1;\n }\n \n+/* Returns true if T is a variably modified type, in the sense of\n+   C99.\n+\n+   In C99, a struct type is never variably modified because a VLA may\n+   not appear as a structure member.  However, in GNU C code like:\n+    \n+     struct S { int i[f()]; };\n+\n+   is valid.  Even though GNU C++ does not allow that, this function\n+   may sometimes be used in the C front end, so it treats any type\n+   with variable size in the same way that C99 treats VLAs.\n+\n+   In particular, a variably modified type is one that involves a type\n+   with variable size.  */\n+\n+bool\n+variably_modified_type_p (tree type)\n+{\n+  /* If TYPE itself has variable size, it is variably modified.  \n+\n+     We do not yet have a representation of the C99 '[*]' syntax.\n+     When a representation is chosen, this function should be modified\n+     to test for that case as well.  */\n+  if (TYPE_SIZE (type) \n+      && TYPE_SIZE (type) != error_mark_node\n+      && TREE_CODE (TYPE_SIZE (type)) != INTEGER_CST)\n+    return true;\n+\n+  /* If TYPE is a pointer or reference, it is variably modified if and\n+     only if the type pointed to is variably modified.  */\n+  if (TYPE_PTR_P (type)\n+      || TREE_CODE (type) == REFERENCE_TYPE)\n+    return variably_modified_type_p (TREE_TYPE (type));\n+  \n+  /* If TYPE is an array, it is variably modified if the array\n+     elements are.  (Note that the VLA case has alredy been checked\n+     above).  */\n+  if (TREE_CODE (type) == ARRAY_TYPE)\n+    return variably_modified_type_p (TREE_TYPE (type));\n+\n+  /* If TYPE is a pointer-to-member, it is variably modified if either\n+     the class or the member are variably modified.  */\n+  if (TYPE_PTRMEM_P (type) || TYPE_PTRMEMFUNC_P (type))\n+    return (variably_modified_type_p (TYPE_PTRMEM_CLASS_TYPE (type))\n+\t    || variably_modified_type_p (TYPE_PTRMEM_POINTED_TO_TYPE (type)));\n+\n+  /* If TYPE Is a function type, it is variably modified if any of the\n+     parameters or the return type are variably modified.  */\n+  if (TREE_CODE (type) == FUNCTION_TYPE\n+      || TREE_CODE (type) == METHOD_TYPE)\n+    {\n+      tree parm;\n+\n+      if (variably_modified_type_p (TREE_TYPE (type)))\n+\treturn true;\n+      for (parm = TYPE_ARG_TYPES (type); \n+\t   parm && parm != void_list_node; \n+\t   parm = TREE_CHAIN (parm))\n+\tif (variably_modified_type_p (TREE_VALUE (parm)))\n+\t  return true;\n+    }\n+\n+  /* All other types are not variably modified.  */\n+  return false;\n+}\n+\n /* Returns 1 iff zero initialization of type T means actually storing\n    zeros in it.  */\n "}, {"sha": "f04daad57d380701f8e7b98b4fbb4c71af14a46e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dac45b5c091237cb7e8f723e75b3897a8f763432/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dac45b5c091237cb7e8f723e75b3897a8f763432/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dac45b5c091237cb7e8f723e75b3897a8f763432", "patch": "@@ -1,5 +1,9 @@\n 2002-10-11  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/5661\n+\t* g++.dg/ext/vlm1.C: New test.\n+\t* g++.dg/ext/vlm2.C: Likewise.\n+\t\n \t* g++.dg/init/array1.C: Remove invalid braces.\n \t* g++.dg/init/brace1.C: New test.\n \t* g++.dg/init/copy2.C: Likewise."}, {"sha": "61628e6bba48949610040e702a8550f0ada60598", "filename": "gcc/testsuite/g++.dg/ext/vlm1.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dac45b5c091237cb7e8f723e75b3897a8f763432/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvlm1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dac45b5c091237cb7e8f723e75b3897a8f763432/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvlm1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvlm1.C?ref=dac45b5c091237cb7e8f723e75b3897a8f763432", "patch": "@@ -0,0 +1,13 @@\n+// { dg-options \"\" }\n+\n+template <class T> struct A {};\n+ \n+struct B {\n+  static const int s;\n+  A<int[s]> a; // { dg-error \"variably modified|no type\" }\n+};\n+ \n+const int B::s=16;\n+ \n+B b;\n+ "}, {"sha": "3a0b335262c1bff59b52479ba0b390e04eda366c", "filename": "gcc/testsuite/g++.dg/ext/vlm2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dac45b5c091237cb7e8f723e75b3897a8f763432/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvlm2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dac45b5c091237cb7e8f723e75b3897a8f763432/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvlm2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvlm2.C?ref=dac45b5c091237cb7e8f723e75b3897a8f763432", "patch": "@@ -0,0 +1,13 @@\n+// { dg-options \"\" }\n+\n+int n;\n+\n+struct Y\n+{\n+  void f () {\n+    typedef int X[n];\n+    struct Z {\n+      X x; // { dg-error \"variably modified\" }\n+    };\n+  }\n+};"}]}