{"sha": "8976d513cc7e285ef043df4766efada449216eec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk3NmQ1MTNjYzdlMjg1ZWYwNDNkZjQ3NjZlZmFkYTQ0OTIxNmVlYw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-12-03T10:35:12Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-12-03T10:35:12Z"}, "message": "re PR fortran/45159 (Unnecessary temporaries)\n\n2010-12-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/45159\n\t* dependency.c (check_section_vs_section):  Pre-calculate\n\tthe relationship between the strides and the relationship\n\tbetween the start values.  Use an integer constant one for\n\tthat purpose.\n\tForward dependencies for positive strides apply for where\n\tthe lhs start <= rhs start and lhs stride <= rhs stride\n\tand vice versa for negative stride.  No need to compare\n\tend expressions in either case (assume no bounds violation).\n\n2010-12-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/45159\n\t* gfortran.dg/dependency_38.f90:  New test.\n\nFrom-SVN: r167413", "tree": {"sha": "9a5ce24417a6f1a45ba00b75518c778dfe427e49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a5ce24417a6f1a45ba00b75518c778dfe427e49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8976d513cc7e285ef043df4766efada449216eec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8976d513cc7e285ef043df4766efada449216eec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8976d513cc7e285ef043df4766efada449216eec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8976d513cc7e285ef043df4766efada449216eec/comments", "author": null, "committer": null, "parents": [{"sha": "272cec5de2c65fe12365a56080038a35ddc6c180", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/272cec5de2c65fe12365a56080038a35ddc6c180", "html_url": "https://github.com/Rust-GCC/gccrs/commit/272cec5de2c65fe12365a56080038a35ddc6c180"}], "stats": {"total": 128, "additions": 81, "deletions": 47}, "files": [{"sha": "36b2ef26d1d800abdbd06a1d66efdf9a76d0ab44", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8976d513cc7e285ef043df4766efada449216eec/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8976d513cc7e285ef043df4766efada449216eec/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8976d513cc7e285ef043df4766efada449216eec", "patch": "@@ -1,3 +1,15 @@\n+2010-12-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/45159\n+\t* dependency.c (check_section_vs_section):  Pre-calculate\n+\tthe relationship between the strides and the relationship\n+\tbetween the start values.  Use an integer constant one for\n+\tthat purpose.\n+\tForward dependencies for positive strides apply for where\n+\tthe lhs start <= rhs start and lhs stride <= rhs stride\n+\tand vice versa for negative stride.  No need to compare\n+\tend expressions in either case (assume no bounds violation).\n+\n 2010-12-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* trans-array.c (gfc_could_be_alias):  Handle BT_CLASS"}, {"sha": "77e8df72b68d5a7717963412174e5efac6676388", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 50, "deletions": 47, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8976d513cc7e285ef043df4766efada449216eec/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8976d513cc7e285ef043df4766efada449216eec/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=8976d513cc7e285ef043df4766efada449216eec", "patch": "@@ -1071,8 +1071,10 @@ check_section_vs_section (gfc_array_ref *l_ar, gfc_array_ref *r_ar, int n)\n   gfc_expr *r_stride;\n   gfc_expr *r_lower;\n   gfc_expr *r_upper;\n+  gfc_expr *one_expr;\n   int r_dir;\n-  bool identical_strides;\n+  int stride_comparison;\n+  int start_comparison;\n \n   /* If they are the same range, return without more ado.  */\n   if (gfc_is_same_range (l_ar, r_ar, n, 0))\n@@ -1126,22 +1128,24 @@ check_section_vs_section (gfc_array_ref *l_ar, gfc_array_ref *r_ar, int n)\n   if (l_dir == 0 || r_dir == 0)\n     return GFC_DEP_OVERLAP;\n \n-  /* Determine if the strides are equal.  */\n+  /* Determine the relationship between the strides.  Set stride_comparison to\n+     -2 if the dependency cannot be determined\n+     -1 if l_stride < r_stride\n+      0 if l_stride == r_stride\n+      1 if l_stride > r_stride\n+     as determined by gfc_dep_compare_expr.  */\n \n-  if (l_stride)\n-    {\n-      if (r_stride)\n-\tidentical_strides = gfc_dep_compare_expr (l_stride, r_stride) == 0;\n-      else\n-\tidentical_strides = gfc_expr_is_one (l_stride, 0) == 1;\n-    }\n+  one_expr = gfc_get_int_expr (gfc_index_integer_kind, NULL, 1);\n+\n+  stride_comparison = gfc_dep_compare_expr (l_stride ? l_stride : one_expr,\n+\t\t\t\t\t    r_stride ? r_stride : one_expr);\n+\n+  if (l_start && r_start)\n+    start_comparison = gfc_dep_compare_expr (l_start, r_start);\n   else\n-    {\n-      if (r_stride)\n-\tidentical_strides = gfc_expr_is_one (r_stride, 0) == 1;\n-      else\n-\tidentical_strides = true;\n-    }\n+    start_comparison = -2;\n+      \n+  gfc_free (one_expr);\n \n   /* Determine LHS upper and lower bounds.  */\n   if (l_dir == 1)\n@@ -1237,61 +1241,60 @@ check_section_vs_section (gfc_array_ref *l_ar, gfc_array_ref *r_ar, int n)\n \n #undef IS_CONSTANT_INTEGER\n \n-  /* Check for forward dependencies x:y vs. x+1:z.  */\n-  if (l_dir == 1 && r_dir == 1\n-      && l_start && r_start && gfc_dep_compare_expr (l_start, r_start) == -1\n-      && l_end && r_end && gfc_dep_compare_expr (l_end, r_end) == -1)\n-    {\n-      if (identical_strides)\n-\treturn GFC_DEP_FORWARD;\n-    }\n+  /* Check for forward dependencies x:y vs. x+1:z and x:y:z vs. x:y:z+1. */\n \n-  /* Check for forward dependencies x:y:-1 vs. x-1:z:-1.  */\n-  if (l_dir == -1 && r_dir == -1\n-      && l_start && r_start && gfc_dep_compare_expr (l_start, r_start) == 1\n-      && l_end && r_end && gfc_dep_compare_expr (l_end, r_end) == 1)\n-    {\n-      if (identical_strides)\n-\treturn GFC_DEP_FORWARD;\n-    }\n+  if (l_dir == 1 && r_dir == 1 &&\n+      (start_comparison == 0 || start_comparison == -1)\n+      && (stride_comparison == 0 || stride_comparison == -1))\n+\t  return GFC_DEP_FORWARD;\n \n+  /* Check for forward dependencies x:y:-1 vs. x-1:z:-1 and\n+     x:y:-1 vs. x:y:-2.  */\n+  if (l_dir == -1 && r_dir == -1 && \n+      (start_comparison == 0 || start_comparison == 1)\n+      && (stride_comparison == 0 || stride_comparison == 1))\n+    return GFC_DEP_FORWARD;\n \n-  if (identical_strides)\n+  if (stride_comparison == 0 || stride_comparison == -1)\n     {\n-\n       if (l_start && IS_ARRAY_EXPLICIT (l_ar->as))\n \t{\n \n-\t  /* Check for a(low:y:s) vs. a(z:a:s) where a has a lower bound\n+\t  /* Check for a(low:y:s) vs. a(z:x:s) or\n+\t     a(low:y:s) vs. a(z:x:s+1) where a has a lower bound\n \t     of low, which is always at least a forward dependence.  */\n \n \t  if (r_dir == 1\n \t      && gfc_dep_compare_expr (l_start, l_ar->as->lower[n]) == 0)\n \t    return GFC_DEP_FORWARD;\n+\t}\n+    }\n \n-\t  /* Check for a(high:y:-s) vs. a(z:a:-s) where a has a higher bound\n+  if (stride_comparison == 0 || stride_comparison == 1)\n+    {\n+      if (l_start && IS_ARRAY_EXPLICIT (l_ar->as))\n+\t{\n+      \n+\t  /* Check for a(high:y:-s) vs. a(z:x:-s) or\n+\t     a(high:y:-s vs. a(z:x:-s-1) where a has a higher bound\n \t     of high, which is always at least a forward dependence.  */\n \n \t  if (r_dir == -1\n \t      && gfc_dep_compare_expr (l_start, l_ar->as->upper[n]) == 0)\n \t    return GFC_DEP_FORWARD;\n \t}\n+    }\n \n+\n+  if (stride_comparison == 0)\n+    {\n       /* From here, check for backwards dependencies.  */\n-      /* x:y vs. x+1:z.  */\n-      if (l_dir == 1 && r_dir == 1\n-\t    && l_start && r_start\n-\t    && gfc_dep_compare_expr (l_start, r_start) == 1\n-\t    && l_end && r_end\n-\t    && gfc_dep_compare_expr (l_end, r_end) == 1)\n+      /* x+1:y vs. x:z.  */\n+      if (l_dir == 1 && r_dir == 1  && start_comparison == 1)\n \treturn GFC_DEP_BACKWARD;\n \n-      /* x:y:-1 vs. x-1:z:-1.  */\n-      if (l_dir == -1 && r_dir == -1\n-\t    && l_start && r_start\n-\t    && gfc_dep_compare_expr (l_start, r_start) == -1\n-\t    && l_end && r_end\n-\t    && gfc_dep_compare_expr (l_end, r_end) == -1)\n+      /* x-1:y:-1 vs. x:z:-1.  */\n+      if (l_dir == -1 && r_dir == -1 && start_comparison == -1)\n \treturn GFC_DEP_BACKWARD;\n     }\n "}, {"sha": "10295b2cbd9029ce1b56bf1e8ce78b61ca92a59e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8976d513cc7e285ef043df4766efada449216eec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8976d513cc7e285ef043df4766efada449216eec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8976d513cc7e285ef043df4766efada449216eec", "patch": "@@ -1,3 +1,8 @@\n+2010-12-02  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/45159\n+\t* gfortran.dg/dependency_38.f90:  New test.\n+\n 2010-12-02  Ian Lance Taylor  <iant@google.com>\n \n \t* lib/go.exp: New file."}, {"sha": "60cb2ad1b7bde47fb05f4b4e924b44b00ec630f8", "filename": "gcc/testsuite/gfortran.dg/dependency_38.f90", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8976d513cc7e285ef043df4766efada449216eec/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_38.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8976d513cc7e285ef043df4766efada449216eec/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_38.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_38.f90?ref=8976d513cc7e285ef043df4766efada449216eec", "patch": "@@ -0,0 +1,14 @@\n+! { dg-do compile }\n+! { dg-options \"-Warray-temporaries\" }\n+! PR 45159 - No temporary should be created for this.\n+program main\n+  integer a(100)\n+  a(10:16:2) = a(10:16:2)\n+  a(10:16:2) = a(10:19:3)\n+  a(10:18:2) = a(12:20:2)\n+  a(1:10) = a(2:20:2)\n+  a(16:10:-2) = a(16:10:-2)\n+  a(19:10:-1) = a(19:1:-2)\n+  a(19:10:-1) = a(18:9:-1)\n+  a(19:11:-1) = a(18:2:-2)\n+end program main"}]}