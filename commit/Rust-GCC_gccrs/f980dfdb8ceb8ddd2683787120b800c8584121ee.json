{"sha": "f980dfdb8ceb8ddd2683787120b800c8584121ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk4MGRmZGI4Y2ViOGRkZDI2ODM3ODcxMjBiODAwYzg1ODQxMjFlZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-02-07T14:48:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-02-07T14:48:39Z"}, "message": "re PR debug/56154 (Bad .debug_loc generated for some code)\n\n\tPR debug/56154\n\t* dwarf2out.c (dwarf2_debug_hooks): Set end_function hook to\n\tdwarf2out_end_function.\n\t(in_first_function_p, maybe_at_text_label_p,\n\tfirst_loclabel_num_not_at_text_label): New variables.\n\t(dwarf2out_var_location): In the first function find out\n\tlowest loclabel_num N where .LVLN is known not to be equal\n\tto .Ltext0.\n\t(find_empty_loc_ranges_at_text_label, dwarf2out_end_function): New\n\tfunctions.\n\n\t* gcc.dg/guality/pr56154-1.c: New test.\n\t* gcc.dg/guality/pr56154-2.c: New test.\n\t* gcc.dg/guality/pr56154-3.c: New test.\n\t* gcc.dg/guality/pr56154-4.c: New test.\n\t* gcc.dg/guality/pr56154-aux.c: New file.\n\nFrom-SVN: r195850", "tree": {"sha": "a4ce57d3fa3394419c28e38309ee4f749ee5cf2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4ce57d3fa3394419c28e38309ee4f749ee5cf2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f980dfdb8ceb8ddd2683787120b800c8584121ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f980dfdb8ceb8ddd2683787120b800c8584121ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f980dfdb8ceb8ddd2683787120b800c8584121ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f980dfdb8ceb8ddd2683787120b800c8584121ee/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fcf0430bda26a50f1279cb09e8bd8ecfdfa687d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcf0430bda26a50f1279cb09e8bd8ecfdfa687d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcf0430bda26a50f1279cb09e8bd8ecfdfa687d6"}], "stats": {"total": 267, "additions": 266, "deletions": 1}, "files": [{"sha": "a1ad36186850e6a00142da75b50ab8ce7845a2db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f980dfdb8ceb8ddd2683787120b800c8584121ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f980dfdb8ceb8ddd2683787120b800c8584121ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f980dfdb8ceb8ddd2683787120b800c8584121ee", "patch": "@@ -1,3 +1,16 @@\n+2013-02-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/56154\n+\t* dwarf2out.c (dwarf2_debug_hooks): Set end_function hook to\n+\tdwarf2out_end_function.\n+\t(in_first_function_p, maybe_at_text_label_p,\n+\tfirst_loclabel_num_not_at_text_label): New variables.\n+\t(dwarf2out_var_location): In the first function find out\n+\tlowest loclabel_num N where .LVLN is known not to be equal\n+\tto .Ltext0.\n+\t(find_empty_loc_ranges_at_text_label, dwarf2out_end_function): New\n+\tfunctions.\n+\n 2013-02-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR rtl-optimization/56178"}, {"sha": "13c31ad005f4dcd82574bb26373435b4b9d459b3", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 102, "deletions": 1, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f980dfdb8ceb8ddd2683787120b800c8584121ee/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f980dfdb8ceb8ddd2683787120b800c8584121ee/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=f980dfdb8ceb8ddd2683787120b800c8584121ee", "patch": "@@ -2351,6 +2351,7 @@ static void dwarf2out_imported_module_or_decl_1 (tree, tree, tree,\n static void dwarf2out_abstract_function (tree);\n static void dwarf2out_var_location (rtx);\n static void dwarf2out_begin_function (tree);\n+static void dwarf2out_end_function (unsigned int);\n static void dwarf2out_set_name (tree, tree);\n \n /* The debug hooks structure.  */\n@@ -2378,7 +2379,7 @@ const struct gcc_debug_hooks dwarf2_debug_hooks =\n #endif\n   dwarf2out_end_epilogue,\n   dwarf2out_begin_function,\n-  debug_nothing_int,\t\t/* end_function */\n+  dwarf2out_end_function,\t/* end_function */\n   dwarf2out_function_decl,\t/* function_decl */\n   dwarf2out_global_decl,\n   dwarf2out_type_decl,\t\t/* type_decl */\n@@ -20627,6 +20628,14 @@ dwarf2out_set_name (tree decl, tree name)\n     add_name_attribute (die, dname);\n }\n \n+/* True if before or during processing of the first function being emitted.  */\n+static bool in_first_function_p = true;\n+/* True if loc_note during dwarf2out_var_location call might still be\n+   before first real instruction at address equal to .Ltext0.  */\n+static bool maybe_at_text_label_p = true;\n+/* One above highest N where .LVLN label might be equal to .Ltext0 label.  */\n+static unsigned int first_loclabel_num_not_at_text_label;\n+\n /* Called by the final INSN scan whenever we see a var location.  We\n    use it to drop labels in the right places, and throw the location in\n    our lookup table.  */\n@@ -20734,6 +20743,45 @@ dwarf2out_var_location (rtx loc_note)\n       ASM_OUTPUT_DEBUG_LABEL (asm_out_file, \"LVL\", loclabel_num);\n       loclabel_num++;\n       last_label = ggc_strdup (loclabel);\n+      /* See if loclabel might be equal to .Ltext0.  If yes,\n+\t bump first_loclabel_num_not_at_text_label.  */\n+      if (!have_multiple_function_sections\n+\t  && in_first_function_p\n+\t  && maybe_at_text_label_p)\n+\t{\n+\t  static rtx last_start;\n+\t  rtx insn;\n+\t  for (insn = loc_note; insn; insn = previous_insn (insn))\n+\t    if (insn == last_start)\n+\t      break;\n+\t    else if (!NONDEBUG_INSN_P (insn))\n+\t      continue;\n+\t    else\n+\t      {\n+\t\trtx body = PATTERN (insn);\n+\t\tif (GET_CODE (body) == USE || GET_CODE (body) == CLOBBER)\n+\t\t  continue;\n+\t\t/* Inline asm could occupy zero bytes.  */\n+\t\telse if (GET_CODE (body) == ASM_INPUT\n+\t\t\t || asm_noperands (body) >= 0)\n+\t\t  continue;\n+#ifdef HAVE_attr_length\n+\t\telse if (get_attr_min_length (insn) == 0)\n+\t\t  continue;\n+#endif\n+\t\telse\n+\t\t  {\n+\t\t    /* Assume insn has non-zero length.  */\n+\t\t    maybe_at_text_label_p = false;\n+\t\t    break;\n+\t\t  }\n+\t      }\n+\t  if (maybe_at_text_label_p)\n+\t    {\n+\t      last_start = loc_note;\n+\t      first_loclabel_num_not_at_text_label = loclabel_num;\n+\t    }\n+\t}\n     }\n \n   if (!var_loc_p)\n@@ -20903,6 +20951,59 @@ dwarf2out_begin_function (tree fun)\n   set_cur_line_info_table (sec);\n }\n \n+/* Helper function of dwarf2out_end_function, called only after emitting\n+   the very first function into assembly.  Check if some .debug_loc range\n+   might end with a .LVL* label that could be equal to .Ltext0.\n+   In that case we must force using absolute addresses in .debug_loc ranges,\n+   because this range could be .LVLN-.Ltext0 .. .LVLM-.Ltext0 for\n+   .LVLN == .LVLM == .Ltext0, thus 0 .. 0, which is a .debug_loc\n+   list terminator.\n+   Set have_multiple_function_sections to true in that case and\n+   terminate htab traversal.  */\n+\n+static int\n+find_empty_loc_ranges_at_text_label (void **slot, void *)\n+{\n+  var_loc_list *entry;\n+  struct var_loc_node *node;\n+\n+  entry = (var_loc_list *) *slot;\n+  node = entry->first;\n+  if (node && node->next && node->next->label)\n+    {\n+      unsigned int i;\n+      const char *label = node->next->label;\n+      char loclabel[MAX_ARTIFICIAL_LABEL_BYTES];\n+\n+      for (i = 0; i < first_loclabel_num_not_at_text_label; i++)\n+\t{\n+\t  ASM_GENERATE_INTERNAL_LABEL (loclabel, \"LVL\", i);\n+\t  if (strcmp (label, loclabel) == 0)\n+\t    {\n+\t      have_multiple_function_sections = true;\n+\t      return 0;\n+\t    }\n+\t}\n+    }\n+  return 1;\n+}\n+\n+/* Hook called after emitting a function into assembly.\n+   This does something only for the very first function emitted.  */\n+\n+static void\n+dwarf2out_end_function (unsigned int)\n+{\n+  if (in_first_function_p\n+      && !have_multiple_function_sections\n+      && first_loclabel_num_not_at_text_label\n+      && decl_loc_table)\n+    htab_traverse (decl_loc_table, find_empty_loc_ranges_at_text_label,\n+\t\t   NULL);\n+  in_first_function_p = false;\n+  maybe_at_text_label_p = false;\n+}\n+\n /* Add OPCODE+VAL as an entry at the end of the opcode array in TABLE.  */\n \n static void"}, {"sha": "c024e08c444415121b9660d840f615d9a28982e2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f980dfdb8ceb8ddd2683787120b800c8584121ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f980dfdb8ceb8ddd2683787120b800c8584121ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f980dfdb8ceb8ddd2683787120b800c8584121ee", "patch": "@@ -1,5 +1,12 @@\n 2013-02-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR debug/56154\n+\t* gcc.dg/guality/pr56154-1.c: New test.\n+\t* gcc.dg/guality/pr56154-2.c: New test.\n+\t* gcc.dg/guality/pr56154-3.c: New test.\n+\t* gcc.dg/guality/pr56154-4.c: New test.\n+\t* gcc.dg/guality/pr56154-aux.c: New file.\n+\n \tPR tree-optimization/55789\n \t* g++.dg/ipa/inline-3.C: Use cleanup-ipa-dump instead of\n \tcleanup-tree-dump."}, {"sha": "4f02bc96e219b77424eeea7b61df31f8257633d2", "filename": "gcc/testsuite/gcc.dg/guality/pr56154-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f980dfdb8ceb8ddd2683787120b800c8584121ee/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr56154-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f980dfdb8ceb8ddd2683787120b800c8584121ee/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr56154-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr56154-1.c?ref=f980dfdb8ceb8ddd2683787120b800c8584121ee", "patch": "@@ -0,0 +1,29 @@\n+/* PR debug/56154 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+/* { dg-additional-sources \"pr56154-aux.c\" } */\n+\n+#include \"../nop.h\"\n+\n+union U { int a, b; };\n+volatile int z;\n+\n+__attribute__((noinline, noclone)) int\n+foo (int fd, union U x)\n+{\n+  int result = x.a != 0;\n+  if (fd != 0)\n+    result = x.a == 0;\n+  asm (NOP : : : \"memory\");\t  /* { dg-final { gdb-test pr56154-1.c:17 \"x.a\" \"4\" } } */\n+  z = x.a;\n+  x.a = 6;\n+  asm (NOP : : : \"memory\");\t  /* { dg-final { gdb-test pr56154-1.c:20 \"x.a\" \"6\" } } */\n+  return result;\n+}\n+\n+void\n+test_main (void)\n+{\n+  union U u = { .a = 4 };\n+  foo (0, u);\n+}"}, {"sha": "6c1d5d977f8c4ec8b40f7c3cd3dbf1c7397df9d6", "filename": "gcc/testsuite/gcc.dg/guality/pr56154-2.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f980dfdb8ceb8ddd2683787120b800c8584121ee/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr56154-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f980dfdb8ceb8ddd2683787120b800c8584121ee/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr56154-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr56154-2.c?ref=f980dfdb8ceb8ddd2683787120b800c8584121ee", "patch": "@@ -0,0 +1,39 @@\n+/* PR debug/56154 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+/* { dg-additional-sources \"pr56154-aux.c\" } */\n+\n+#include \"../nop.h\"\n+\n+extern void abort (void);\n+\n+__attribute__((noinline, noclone)) int\n+foo (int x)\n+{\n+  asm (\"\");\n+  x++;\n+  asm (\"\");\n+  x++;\n+  asm (\"\");\n+  x++;\n+  asm (\"\");\n+  x++;\n+  asm (\"\");\n+  x++;\n+  asm (\"\");\n+  x++;\n+  asm (\"\");\n+  x++;\n+  asm (\"\");\n+  x++;\n+  asm (NOP : : : \"memory\");\n+  asm (NOP : : : \"memory\");\t/* { dg-final { gdb-test pr56154-2.c:30 \"x\" \"28\" } } */\n+  return x;\n+}\n+\n+void\n+test_main (void)\n+{\n+  if (foo (20) != 28)\n+    abort ();\n+}"}, {"sha": "095dce9f656d55649d14433e3d45bde5e3485e56", "filename": "gcc/testsuite/gcc.dg/guality/pr56154-3.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f980dfdb8ceb8ddd2683787120b800c8584121ee/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr56154-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f980dfdb8ceb8ddd2683787120b800c8584121ee/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr56154-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr56154-3.c?ref=f980dfdb8ceb8ddd2683787120b800c8584121ee", "patch": "@@ -0,0 +1,31 @@\n+/* PR debug/56154 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+/* { dg-additional-sources \"pr56154-aux.c\" } */\n+\n+#include \"../nop.h\"\n+\n+extern void abort (void);\n+\n+__attribute__((noinline, noclone)) int\n+foo (int x)\n+{\n+  x++;\n+  x++;\n+  x++;\n+  x++;\n+  x++;\n+  x++;\n+  x++;\n+  x++;\n+  asm (NOP : : : \"memory\");\n+  asm (NOP : : : \"memory\");\t/* { dg-final { gdb-test pr56154-3.c:22 \"x\" \"28\" } } */\n+  return x;\n+}\n+\n+void\n+test_main (void)\n+{\n+  if (foo (20) != 28)\n+    abort ();\n+}"}, {"sha": "bfe7338d62c9665f31a4c90d9e2897153f2b5be2", "filename": "gcc/testsuite/gcc.dg/guality/pr56154-4.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f980dfdb8ceb8ddd2683787120b800c8584121ee/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr56154-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f980dfdb8ceb8ddd2683787120b800c8584121ee/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr56154-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr56154-4.c?ref=f980dfdb8ceb8ddd2683787120b800c8584121ee", "patch": "@@ -0,0 +1,34 @@\n+/* PR debug/56154 */\n+/* { dg-do run } */\n+/* { dg-options \"-g\" } */\n+/* { dg-additional-sources \"pr56154-aux.c\" } */\n+\n+#include \"../nop.h\"\n+\n+extern void abort (void);\n+\n+volatile int z;\n+\n+__attribute__((noinline, noclone)) int\n+foo (int x)\n+{\n+  z = 6;\n+  x++;\n+  x++;\n+  x++;\n+  x++;\n+  x++;\n+  x++;\n+  x++;\n+  x++;\n+  asm (NOP : : : \"memory\");\n+  asm (NOP : : : \"memory\");\t/* { dg-final { gdb-test pr56154-4.c:25 \"x\" \"28\" } } */\n+  return x;\n+}\n+\n+void\n+test_main (void)\n+{\n+  if (foo (20) != 28)\n+    abort ();\n+}"}, {"sha": "131173cb3f35fdd2660ccfdc9fb947965abdcfc5", "filename": "gcc/testsuite/gcc.dg/guality/pr56154-aux.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f980dfdb8ceb8ddd2683787120b800c8584121ee/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr56154-aux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f980dfdb8ceb8ddd2683787120b800c8584121ee/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr56154-aux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr56154-aux.c?ref=f980dfdb8ceb8ddd2683787120b800c8584121ee", "patch": "@@ -0,0 +1,11 @@\n+/* PR debug/56154 */\n+/* { dg-do compile } */\n+\n+extern void test_main (void);\n+\n+int\n+main ()\n+{\n+  test_main ();\n+  return 0;\n+}"}]}