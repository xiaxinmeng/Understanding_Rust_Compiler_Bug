{"sha": "8cb6a77590957942e124b34e0bb0827d1404f341", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNiNmE3NzU5MDk1Nzk0MmUxMjRiMzRlMGJiMDgyN2QxNDA0ZjM0MQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-10-09T17:17:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-10-09T17:17:19Z"}, "message": "decl.c (grok_ctor_properties): Use DECL_SOURCE_LOCATION.\n\n/cp\n2019-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (grok_ctor_properties): Use DECL_SOURCE_LOCATION.\n\t* typeck.c (cp_build_binary_op): Use the op_location_t argument\n\tin many error messages.\n\n/testsuite\n2019-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* c-c++-common/Waddress-1.c: Test locations too.\n\t* c-c++-common/Wpointer-compare-1.c: Likewise.\n\t* c-c++-common/Wshift-count-negative-1.c: Likewise.\n\t* c-c++-common/Wshift-count-overflow-1.c: Likewise.\n\t* c-c++-common/Wshift-negative-value-1.c: Likewise.\n\t* c-c++-common/Wshift-negative-value-2.c: Likewise.\n\t* c-c++-common/Wshift-negative-value-5.c: Likewise.\n\t* c-c++-common/pr48418.c: Likewise.\n\t* c-c++-common/pr65830.c: Likewise.\n\t* c-c++-common/pr69764.c: Likewise.\n\t* g++.dg/cpp0x/constexpr-array-ptr10.C: Likewise.\n\t* g++.dg/cpp0x/nullptr37.C: Likewise.\n\t* g++.dg/template/crash126.C: Likewise.\n\t* g++.dg/template/crash129.C: Likewise.\n\t* g++.dg/warn/Wextra-3.C: Likewise.\n\t* g++.dg/warn/Wfloat-equal-1.C: Likewise.\n\t* g++.dg/warn/Wstring-literal-comparison-1.C: Likewise.\n\t* g++.dg/warn/Wstring-literal-comparison-2.C: Likewise.\n\t* g++.dg/warn/pointer-integer-comparison.C: Likewise.\n\t* g++.old-deja/g++.jason/crash8.C: Likewise.\n\nFrom-SVN: r276763", "tree": {"sha": "8365e428846695ba8bdf5434f8cda6bbfbd5a1aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8365e428846695ba8bdf5434f8cda6bbfbd5a1aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cb6a77590957942e124b34e0bb0827d1404f341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cb6a77590957942e124b34e0bb0827d1404f341", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cb6a77590957942e124b34e0bb0827d1404f341", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cb6a77590957942e124b34e0bb0827d1404f341/comments", "author": null, "committer": null, "parents": [{"sha": "cc386cf23346d7cf78493390c4fe1e3ca4f171e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc386cf23346d7cf78493390c4fe1e3ca4f171e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc386cf23346d7cf78493390c4fe1e3ca4f171e6"}], "stats": {"total": 349, "additions": 194, "deletions": 155}, "files": [{"sha": "d75ea5dc44386c52a27d603e08c2fae28370af98", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -1,3 +1,9 @@\n+2019-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (grok_ctor_properties): Use DECL_SOURCE_LOCATION.\n+\t* typeck.c (cp_build_binary_op): Use the op_location_t argument\n+\tin many error messages.\n+\n 2019-10-08  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/92001"}, {"sha": "72c02afa1058cf3dea9e2f5ebc4d1ab514bf068b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -13738,7 +13738,8 @@ grok_ctor_properties (const_tree ctype, const_tree decl)\n \t or implicitly defined), there's no need to worry about their\n \t existence.  Theoretically, they should never even be\n \t instantiated, but that's hard to forestall.  */\n-      error (\"invalid constructor; you probably meant %<%T (const %T&)%>\",\n+      error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\"invalid constructor; you probably meant %<%T (const %T&)%>\",\n \t\tctype, ctype);\n       return false;\n     }"}, {"sha": "1d9e9b8d05d48577269fb9720c394a7a106d3960", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 45, "deletions": 36, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -4475,7 +4475,8 @@ cp_build_binary_op (const op_location_t &location,\n       if (t != error_mark_node)\n \t{\n \t  if (complain & tf_error)\n-\t    permerror (input_location, \"assuming cast to type %qT from overloaded function\",\n+\t    permerror (location,\n+\t\t       \"assuming cast to type %qT from overloaded function\",\n \t\t       TREE_TYPE (t));\n \t  op0 = t;\n \t}\n@@ -4486,7 +4487,8 @@ cp_build_binary_op (const op_location_t &location,\n       if (t != error_mark_node)\n \t{\n \t  if (complain & tf_error)\n-\t    permerror (input_location, \"assuming cast to type %qT from overloaded function\",\n+\t    permerror (location,\n+\t\t       \"assuming cast to type %qT from overloaded function\",\n \t\t       TREE_TYPE (t));\n \t  op1 = t;\n \t}\n@@ -4809,16 +4811,16 @@ cp_build_binary_op (const op_location_t &location,\n \t\t{\n \t\t  if ((complain & tf_warning)\n \t\t      && c_inhibit_evaluation_warnings == 0)\n-\t\t    warning (OPT_Wshift_count_negative,\n-\t\t\t     \"right shift count is negative\");\n+\t\t    warning_at (location, OPT_Wshift_count_negative,\n+\t\t\t\t\"right shift count is negative\");\n \t\t}\n \t      else\n \t\t{\n \t\t  if (compare_tree_int (const_op1, TYPE_PRECISION (type0)) >= 0\n \t\t      && (complain & tf_warning)\n \t\t      && c_inhibit_evaluation_warnings == 0)\n-\t\t    warning (OPT_Wshift_count_overflow,\n-\t\t\t     \"right shift count >= width of type\");\n+\t\t    warning_at (location, OPT_Wshift_count_overflow,\n+\t\t\t\t\"right shift count >= width of type\");\n \t\t}\n \t    }\n \t  /* Avoid converting op1 to result_type later.  */\n@@ -4856,24 +4858,24 @@ cp_build_binary_op (const op_location_t &location,\n \t      && tree_int_cst_sgn (const_op0) < 0\n \t      && (complain & tf_warning)\n \t      && c_inhibit_evaluation_warnings == 0)\n-\t    warning (OPT_Wshift_negative_value,\n-\t\t     \"left shift of negative value\");\n+\t    warning_at (location, OPT_Wshift_negative_value,\n+\t\t\t\"left shift of negative value\");\n \t  if (TREE_CODE (const_op1) == INTEGER_CST)\n \t    {\n \t      if (tree_int_cst_lt (const_op1, integer_zero_node))\n \t\t{\n \t\t  if ((complain & tf_warning)\n \t\t      && c_inhibit_evaluation_warnings == 0)\n-\t\t    warning (OPT_Wshift_count_negative,\n-\t\t\t     \"left shift count is negative\");\n+\t\t    warning_at (location, OPT_Wshift_count_negative,\n+\t\t\t\t\"left shift count is negative\");\n \t\t}\n \t      else if (compare_tree_int (const_op1,\n \t\t\t\t\t TYPE_PRECISION (type0)) >= 0)\n \t\t{\n \t\t  if ((complain & tf_warning)\n \t\t      && c_inhibit_evaluation_warnings == 0)\n-\t\t    warning (OPT_Wshift_count_overflow,\n-\t\t\t     \"left shift count >= width of type\");\n+\t\t    warning_at (location, OPT_Wshift_count_overflow,\n+\t\t\t\t\"left shift count >= width of type\");\n \t\t}\n \t      else if (TREE_CODE (const_op0) == INTEGER_CST\n \t\t       && (complain & tf_warning))\n@@ -4920,8 +4922,9 @@ cp_build_binary_op (const op_location_t &location,\n       if ((complain & tf_warning)\n \t  && c_inhibit_evaluation_warnings == 0\n \t  && (FLOAT_TYPE_P (type0) || FLOAT_TYPE_P (type1)))\n-\twarning (OPT_Wfloat_equal,\n-\t\t \"comparing floating-point with %<==%> or %<!=%> is unsafe\");\n+\twarning_at (location, OPT_Wfloat_equal,\n+\t\t    \"comparing floating-point with %<==%> \"\n+\t\t    \"or %<!=%> is unsafe\");\n       if (complain & tf_warning)\n \t{\n \t  tree stripped_orig_op0 = tree_strip_any_location_wrapper (orig_op0);\n@@ -4930,8 +4933,9 @@ cp_build_binary_op (const op_location_t &location,\n \t       && !integer_zerop (cp_fully_fold (op1)))\n \t      || (TREE_CODE (stripped_orig_op1) == STRING_CST\n \t\t  && !integer_zerop (cp_fully_fold (op0))))\n-\t    warning (OPT_Waddress, \"comparison with string literal results \"\n-\t\t     \"in unspecified behavior\");\n+\t    warning_at (location, OPT_Waddress,\n+\t\t\t\"comparison with string literal results in \"\n+\t\t\t\"unspecified behavior\");\n \t}\n \n       build_type = boolean_type_node;\n@@ -4955,11 +4959,11 @@ cp_build_binary_op (const op_location_t &location,\n \t  if (char_type_p (TREE_TYPE (orig_op1)))\n \t    {\n \t      auto_diagnostic_group d;\n-\t      if (warning (OPT_Wpointer_compare,\n-\t\t\t     \"comparison between pointer and zero character \"\n-\t\t\t     \"constant\"))\n-\t\tinform (input_location,\n-\t\t\t  \"did you mean to dereference the pointer?\");\n+\t      if (warning_at (location, OPT_Wpointer_compare,\n+\t\t\t      \"comparison between pointer and zero character \"\n+\t\t\t      \"constant\"))\n+\t\tinform (location,\n+\t\t\t\"did you mean to dereference the pointer?\");\n \t    }\n \t  warn_for_null_address (location, op0, complain);\n \t}\n@@ -4978,10 +4982,10 @@ cp_build_binary_op (const op_location_t &location,\n \t  if (char_type_p (TREE_TYPE (orig_op0)))\n \t    {\n \t      auto_diagnostic_group d;\n-\t      if (warning (OPT_Wpointer_compare,\n+\t      if (warning_at (location, OPT_Wpointer_compare,\n \t\t\t     \"comparison between pointer and zero character \"\n \t\t\t     \"constant\"))\n-\t\tinform (input_location,\n+\t\tinform (location,\n \t\t\t\"did you mean to dereference the pointer?\");\n \t    }\n \t  warn_for_null_address (location, op1, complain);\n@@ -4996,16 +5000,18 @@ cp_build_binary_op (const op_location_t &location,\n       else if (code0 == POINTER_TYPE && code1 == INTEGER_TYPE)\n \t{\n \t  result_type = type0;\n-\t  if (complain & tf_error) \n-            permerror (input_location, \"ISO C++ forbids comparison between pointer and integer\");\n+\t  if (complain & tf_error)\n+\t    permerror (location, \"ISO C++ forbids comparison between \"\n+\t\t       \"pointer and integer\");\n           else\n             return error_mark_node;\n \t}\n       else if (code0 == INTEGER_TYPE && code1 == POINTER_TYPE)\n \t{\n \t  result_type = type1;\n \t  if (complain & tf_error)\n-\t    permerror (input_location, \"ISO C++ forbids comparison between pointer and integer\");\n+\t    permerror (location, \"ISO C++ forbids comparison between \"\n+\t\t       \"pointer and integer\");\n           else\n             return error_mark_node;\n \t}\n@@ -5191,8 +5197,9 @@ cp_build_binary_op (const op_location_t &location,\n \t  || TREE_CODE (orig_op1) == STRING_CST)\n \t{\n \t  if (complain & tf_warning)\n-\t    warning (OPT_Waddress, \"comparison with string literal results \"\n-\t\t\t\t   \"in unspecified behavior\");\n+\t    warning_at (location, OPT_Waddress,\n+\t\t\t\"comparison with string literal results \"\n+\t\t\t\"in unspecified behavior\");\n \t}\n \n       if (code0 == VECTOR_TYPE && code1 == VECTOR_TYPE)\n@@ -5267,15 +5274,15 @@ cp_build_binary_op (const op_location_t &location,\n \t{\n \t  result_type = type0;\n \t  if (extra_warnings && (complain & tf_warning))\n-\t    warning (OPT_Wextra,\n-\t\t     \"ordered comparison of pointer with integer zero\");\n+\t    warning_at (location, OPT_Wextra,\n+\t\t\t\"ordered comparison of pointer with integer zero\");\n \t}\n       else if (code1 == POINTER_TYPE && null_ptr_cst_p (orig_op0))\n \t{\n \t  result_type = type1;\n \t  if (extra_warnings && (complain & tf_warning))\n-\t    warning (OPT_Wextra,\n-\t\t     \"ordered comparison of pointer with integer zero\");\n+\t    warning_at (location, OPT_Wextra,\n+\t\t\t\"ordered comparison of pointer with integer zero\");\n \t}\n       else if (null_ptr_cst_p (orig_op0) && null_ptr_cst_p (orig_op1))\n \t/* One of the operands must be of nullptr_t type.  */\n@@ -5284,16 +5291,18 @@ cp_build_binary_op (const op_location_t &location,\n \t{\n \t  result_type = type0;\n \t  if (complain & tf_error)\n-\t    permerror (input_location, \"ISO C++ forbids comparison between pointer and integer\");\n-          else\n+\t    permerror (location, \"ISO C++ forbids comparison between \"\n+\t\t       \"pointer and integer\");\n+\t  else\n             return error_mark_node;\n \t}\n       else if (code0 == INTEGER_TYPE && code1 == POINTER_TYPE)\n \t{\n \t  result_type = type1;\n \t  if (complain & tf_error)\n-\t    permerror (input_location, \"ISO C++ forbids comparison between pointer and integer\");\n-          else\n+\t    permerror (location, \"ISO C++ forbids comparison between \"\n+\t\t       \"pointer and integer\");\n+\t  else\n             return error_mark_node;\n \t}\n "}, {"sha": "26a3fcce24337beb5382b77d045e0da0d01f1715", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -1,3 +1,26 @@\n+2019-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* c-c++-common/Waddress-1.c: Test locations too.\n+\t* c-c++-common/Wpointer-compare-1.c: Likewise.\n+\t* c-c++-common/Wshift-count-negative-1.c: Likewise.\n+\t* c-c++-common/Wshift-count-overflow-1.c: Likewise.\n+\t* c-c++-common/Wshift-negative-value-1.c: Likewise.\n+\t* c-c++-common/Wshift-negative-value-2.c: Likewise.\n+\t* c-c++-common/Wshift-negative-value-5.c: Likewise.\n+\t* c-c++-common/pr48418.c: Likewise.\n+\t* c-c++-common/pr65830.c: Likewise.\n+\t* c-c++-common/pr69764.c: Likewise.\n+\t* g++.dg/cpp0x/constexpr-array-ptr10.C: Likewise.\n+\t* g++.dg/cpp0x/nullptr37.C: Likewise.\n+\t* g++.dg/template/crash126.C: Likewise.\n+\t* g++.dg/template/crash129.C: Likewise.\n+\t* g++.dg/warn/Wextra-3.C: Likewise.\n+\t* g++.dg/warn/Wfloat-equal-1.C: Likewise.\n+\t* g++.dg/warn/Wstring-literal-comparison-1.C: Likewise.\n+\t* g++.dg/warn/Wstring-literal-comparison-2.C: Likewise.\n+\t* g++.dg/warn/pointer-integer-comparison.C: Likewise.\n+\t* g++.old-deja/g++.jason/crash8.C: Likewise.\n+\n 2019-10-09  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/vect/vect-outer-call-1.c: New testcase."}, {"sha": "9790a3198818f96df0c26cced6ce414d5a1347fe", "filename": "gcc/testsuite/c-c++-common/Waddress-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWaddress-1.c?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -8,8 +8,8 @@ int\n foo ()\n {\n   return \"foo1\" != (void *) 0\t/* { dg-bogus \"comparison with string literal results in unspecified behavior\" } */\n-\t && \"foo2\" != (const char *) ((void *) 0)\t/* { dg-bogus \"comparison with string literal results in unspecified behavior\" } */\n-\t && \"foo3\" != (const char *) ((void *) (10 - 10))\t/* { dg-bogus \"comparison with string literal results in unspecified behavior\" } */\n-\t && \"foo4\" != (const char *) ((void *) (&e - &e))\t/* { dg-warning \"comparison with string literal results in unspecified behavior\" \"\" { target c } } */\n-\t && \"foo5\" != \"foo6\";\t/* { dg-warning \"comparison with string literal results in unspecified behavior\" } */\n+    && \"foo2\" != (const char *) ((void *) 0)\t/* { dg-bogus \"comparison with string literal results in unspecified behavior\" } */\n+    && \"foo3\" != (const char *) ((void *) (10 - 10))\t/* { dg-bogus \"comparison with string literal results in unspecified behavior\" } */\n+    && \"foo4\" != (const char *) ((void *) (&e - &e))\t/* { dg-warning \"15:comparison with string literal results in unspecified behavior\" \"\" { target c } } */\n+    && \"foo5\" != \"foo6\";\t/* { dg-warning \"15:comparison with string literal results in unspecified behavior\" } */\n }"}, {"sha": "808a0fd51a7a1101131c6f27e211749f6abdeb55", "filename": "gcc/testsuite/c-c++-common/Wpointer-compare-1.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWpointer-compare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWpointer-compare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWpointer-compare-1.c?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -8,25 +8,25 @@ f1 (int *p, int **q)\n {\n   int r = 0;\n \n-  r += p == '\\0'; /* { dg-warning \"comparison between pointer and zero character\" } */\n-  r += p == L'\\0'; /* { dg-warning \"comparison between pointer and zero character\" } */\n-  r += p != '\\0'; /* { dg-warning \"comparison between pointer and zero character\" } */\n-  r += p != L'\\0'; /* { dg-warning \"comparison between pointer and zero character\" } */\n+  r += p == '\\0'; /* { dg-warning \"10:comparison between pointer and zero character\" } */\n+  r += p == L'\\0'; /* { dg-warning \"10:comparison between pointer and zero character\" } */\n+  r += p != '\\0'; /* { dg-warning \"10:comparison between pointer and zero character\" } */\n+  r += p != L'\\0'; /* { dg-warning \"10:comparison between pointer and zero character\" } */\n \n-  r += '\\0' == p; /* { dg-warning \"comparison between pointer and zero character\" } */\n-  r += L'\\0' == p; /* { dg-warning \"comparison between pointer and zero character\" } */\n-  r += '\\0' != p; /* { dg-warning \"comparison between pointer and zero character\" } */\n-  r += L'\\0' != p; /* { dg-warning \"comparison between pointer and zero character\" } */\n+  r += '\\0' == p; /* { dg-warning \"13:comparison between pointer and zero character\" } */\n+  r += L'\\0' == p; /* { dg-warning \"14:comparison between pointer and zero character\" } */\n+  r += '\\0' != p; /* { dg-warning \"13:comparison between pointer and zero character\" } */\n+  r += L'\\0' != p; /* { dg-warning \"14:comparison between pointer and zero character\" } */\n \n-  r += q == '\\0'; /* { dg-warning \"comparison between pointer and zero character\" } */\n-  r += q == L'\\0'; /* { dg-warning \"comparison between pointer and zero character\" } */\n-  r += q != '\\0'; /* { dg-warning \"comparison between pointer and zero character\" } */\n-  r += q != L'\\0'; /* { dg-warning \"comparison between pointer and zero character\" } */\n+  r += q == '\\0'; /* { dg-warning \"10:comparison between pointer and zero character\" } */\n+  r += q == L'\\0'; /* { dg-warning \"10:comparison between pointer and zero character\" } */\n+  r += q != '\\0'; /* { dg-warning \"10:comparison between pointer and zero character\" } */\n+  r += q != L'\\0'; /* { dg-warning \"10:comparison between pointer and zero character\" } */\n \n-  r += '\\0' == q; /* { dg-warning \"comparison between pointer and zero character\" } */\n-  r += L'\\0' == q; /* { dg-warning \"comparison between pointer and zero character\" } */\n-  r += '\\0' != q; /* { dg-warning \"comparison between pointer and zero character\" } */\n-  r += L'\\0' != q; /* { dg-warning \"comparison between pointer and zero character\" } */\n+  r += '\\0' == q; /* { dg-warning \"13:comparison between pointer and zero character\" } */\n+  r += L'\\0' == q; /* { dg-warning \"14:comparison between pointer and zero character\" } */\n+  r += '\\0' != q; /* { dg-warning \"13:comparison between pointer and zero character\" } */\n+  r += L'\\0' != q; /* { dg-warning \"14:comparison between pointer and zero character\" } */\n \n   return r;\n }\n@@ -55,11 +55,11 @@ f3 (int *p)\n {\n   int r = 0;\n \n-  r += p == (char) 0; /* { dg-warning \"comparison between pointer and zero character\" } */\n-  r += p != (char) 0; /* { dg-warning \"comparison between pointer and zero character\" } */\n+  r += p == (char) 0; /* { dg-warning \"10:comparison between pointer and zero character\" } */\n+  r += p != (char) 0; /* { dg-warning \"10:comparison between pointer and zero character\" } */\n \n-  r += (char) 0 == p; /* { dg-warning \"comparison between pointer and zero character\" } */\n-  r += (char) 0 != p; /* { dg-warning \"comparison between pointer and zero character\" } */\n+  r += (char) 0 == p; /* { dg-warning \"17:comparison between pointer and zero character\" } */\n+  r += (char) 0 != p; /* { dg-warning \"17:comparison between pointer and zero character\" } */\n \n   return r;\n }"}, {"sha": "6807b9853391c88ffa267ad6a914db4bec07725a", "filename": "gcc/testsuite/c-c++-common/Wshift-count-negative-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-count-negative-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-count-negative-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-count-negative-1.c?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -3,6 +3,6 @@\n \n void foo()\n {\n-  unsigned i1 = 1U << -1; /* { dg-warning \"left shift count is negative\" } */\n-  unsigned i2 = 1U >> -1; /* { dg-warning \"right shift count is negative\" } */\n+  unsigned i1 = 1U << -1; /* { dg-warning \"20:left shift count is negative\" } */\n+  unsigned i2 = 1U >> -1; /* { dg-warning \"20:right shift count is negative\" } */\n }"}, {"sha": "47225e4aacb040ae94329d2396e84352dcc8a05a", "filename": "gcc/testsuite/c-c++-common/Wshift-count-overflow-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-count-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-count-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-count-overflow-1.c?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -3,6 +3,6 @@\n \n void foo()\n {\n-  unsigned i1 = 1U << (sizeof(unsigned) * __CHAR_BIT__); /* { dg-warning \"left shift count >= width of type\" } */\n-  unsigned i2 = 1U >> (sizeof(unsigned) * __CHAR_BIT__); /* { dg-warning \"right shift count >= width of type\" } */\n+  unsigned i1 = 1U << (sizeof(unsigned) * __CHAR_BIT__); /* { dg-warning \"20:left shift count >= width of type\" } */\n+  unsigned i2 = 1U >> (sizeof(unsigned) * __CHAR_BIT__); /* { dg-warning \"20:right shift count >= width of type\" } */\n }"}, {"sha": "d58d8b9b0029e8f848de96c19c107af3f92a06b6", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-1.c?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -6,7 +6,7 @@\n enum E {\n   A = 0 << 1,\n   B = 1 << 1,\n-  C = -1 << 1, /* { dg-warning \"left shift of negative value|not an integer constant\" } */\n+  C = -1 << 1, /* { dg-warning \"10:left shift of negative value|not an integer constant\" } */\n   /* { dg-error \"left operand of shift expression\" \"shift\" { target c++ } .-1 } */\n   D = 0 >> 1,\n   E = 1 >> 1,\n@@ -23,10 +23,10 @@ left (int x)\n   int r = 0;\n   r += z << x;\n   r += o << x;\n-  r += m << x; /* { dg-warning \"left shift of negative value\" } */\n+  r += m << x; /* { dg-warning \"10:left shift of negative value\" } */\n   r += 0 << x;\n   r += 1 << x;\n-  r += -1 << x; /* { dg-warning \"left shift of negative value\" } */\n+  r += -1 << x; /* { dg-warning \"11:left shift of negative value\" } */\n   r += -1U << x;\n   return r;\n }"}, {"sha": "9f435e8958d0a5a1d2c9dd946fe3b47d2f3418f8", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-2.c?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -6,7 +6,7 @@\n enum E {\n   A = 0 << 1,\n   B = 1 << 1,\n-  C = -1 << 1, /* { dg-warning \"left shift of negative value\" } */\n+  C = -1 << 1, /* { dg-warning \"10:left shift of negative value\" } */\n   /* { dg-error \"not an integer constant\" \"no constant\" { target c++ } .-1 } */\n   /* { dg-error \"left operand of shift expression\" \"shift\" { target c++ } .-2 } */\n   D = 0 >> 1,\n@@ -24,10 +24,10 @@ left (int x)\n   int r = 0;\n   r += z << x;\n   r += o << x;\n-  r += m << x; /* { dg-warning \"left shift of negative value\" } */\n+  r += m << x; /* { dg-warning \"10:left shift of negative value\" } */\n   r += 0 << x;\n   r += 1 << x;\n-  r += -1 << x; /* { dg-warning \"left shift of negative value\" } */\n+  r += -1 << x; /* { dg-warning \"11:left shift of negative value\" } */\n   r += -1U << x;\n   return r;\n }"}, {"sha": "3c3e74cf89a5dd453d1a26a94f1d41022bcc8b7b", "filename": "gcc/testsuite/c-c++-common/Wshift-negative-value-5.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWshift-negative-value-5.c?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -7,7 +7,7 @@\n enum E {\n   A = 0 << 1,\n   B = 1 << 1,\n-  C = -1 << 1, /* { dg-warning \"left shift of negative value\" } */\n+  C = -1 << 1, /* { dg-warning \"10:left shift of negative value\" } */\n   D = 0 >> 1,\n   E = 1 >> 1,\n   F = -1 >> 1\n@@ -23,10 +23,10 @@ left (int x)\n   int r = 0;\n   r += z << x;\n   r += o << x;\n-  r += m << x; /* { dg-warning \"left shift of negative value\" } */\n+  r += m << x; /* { dg-warning \"10:left shift of negative value\" } */\n   r += 0 << x;\n   r += 1 << x;\n-  r += -1 << x; /* { dg-warning \"left shift of negative value\" } */\n+  r += -1 << x; /* { dg-warning \"11:left shift of negative value\" } */\n   r += -1U << x;\n   return r;\n }"}, {"sha": "173285449bfcaaba5d311086935d6843f8d30aeb", "filename": "gcc/testsuite/c-c++-common/pr48418.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr48418.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr48418.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr48418.c?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -8,13 +8,13 @@ foo (int x)\n   const int a = sizeof (int) * __CHAR_BIT__;\n   const int b = -7;\n   int c = 0;\n-  c += x << a;\t\t\t\t   /* { dg-warning \"left shift count >= width of type\" } */\n-  c += x << b;\t\t\t\t   /* { dg-warning \"left shift count is negative\" } */\n-  c += x << (sizeof (int) * __CHAR_BIT__); /* { dg-warning \"left shift count >= width of type\" } */\n-  c += x << -7;\t\t\t\t   /* { dg-warning \"left shift count is negative\" } */\n-  c += x >> a;\t\t\t\t   /* { dg-warning \"right shift count >= width of type\" } */\n-  c += x >> b;\t\t\t\t   /* { dg-warning \"right shift count is negative\" } */\n-  c += x >> (sizeof (int) * __CHAR_BIT__); /* { dg-warning \"right shift count >= width of type\" } */\n-  c += x >> -7;\t\t\t\t   /* { dg-warning \"right shift count is negative\" } */\n+  c += x << a;\t\t\t\t   /* { dg-warning \"10:left shift count >= width of type\" } */\n+  c += x << b;\t\t\t\t   /* { dg-warning \"10:left shift count is negative\" } */\n+  c += x << (sizeof (int) * __CHAR_BIT__); /* { dg-warning \"10:left shift count >= width of type\" } */\n+  c += x << -7;\t\t\t\t   /* { dg-warning \"10:left shift count is negative\" } */\n+  c += x >> a;\t\t\t\t   /* { dg-warning \"10:right shift count >= width of type\" } */\n+  c += x >> b;\t\t\t\t   /* { dg-warning \"10:right shift count is negative\" } */\n+  c += x >> (sizeof (int) * __CHAR_BIT__); /* { dg-warning \"10:right shift count >= width of type\" } */\n+  c += x >> -7;\t\t\t\t   /* { dg-warning \"10:right shift count is negative\" } */\n   return c;\n }"}, {"sha": "73eb97cff9e5e8701ca072db020f26687c6c68f5", "filename": "gcc/testsuite/c-c++-common/pr65830.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr65830.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr65830.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr65830.c?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -8,9 +8,9 @@ foo (int x)\n   const int a = sizeof (int) * __CHAR_BIT__;\n   const int b = -7;\n   int c = 0;\n-  c += x << a;\t/* { dg-bogus \"left shift count >= width of type\" } */\n-  c += x << b;\t/* { dg-bogus \"left shift count is negative\" } */\n-  c += x >> a;\t/* { dg-bogus \"right shift count >= width of type\" } */\n-  c += x >> b;  /* { dg-bogus \"right shift count is negative\" } */\n+  c += x << a;\t/* { dg-bogus \"10:left shift count >= width of type\" } */\n+  c += x << b;\t/* { dg-bogus \"10:left shift count is negative\" } */\n+  c += x >> a;\t/* { dg-bogus \"10:right shift count >= width of type\" } */\n+  c += x >> b;  /* { dg-bogus \"10:right shift count is negative\" } */\n   return c;\n }"}, {"sha": "146f25858507641be1669b8e446c72d7ca9e685b", "filename": "gcc/testsuite/c-c++-common/pr69764.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69764.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69764.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr69764.c?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -4,35 +4,35 @@\n unsigned char\n fn1 (unsigned char a)\n {\n-  return a >> ~6;\t/* { dg-warning \"right shift count is negative\" } */\n+  return a >> ~6;\t/* { dg-warning \"12:right shift count is negative\" } */\n }\n \n unsigned short\n fn2 (unsigned short a)\n {\n-  return a >> ~6;\t/* { dg-warning \"right shift count is negative\" } */\n+  return a >> ~6;\t/* { dg-warning \"12:right shift count is negative\" } */\n }\n \n unsigned int\n fn3 (unsigned int a)\n {\n-  return a >> ~6;\t/* { dg-warning \"right shift count is negative\" } */\n+  return a >> ~6;\t/* { dg-warning \"12:right shift count is negative\" } */\n }\n \n unsigned char\n fn4 (unsigned char a)\n {\n-  return a >> 0xff03;\t/* { dg-warning \"right shift count >= width of type\" } */\n+  return a >> 0xff03;\t/* { dg-warning \"12:right shift count >= width of type\" } */\n }\n \n unsigned short\n fn5 (unsigned short a)\n {\n-  return a >> 0xff03;\t/* { dg-warning \"right shift count >= width of type\" } */\n+  return a >> 0xff03;\t/* { dg-warning \"12:right shift count >= width of type\" } */\n }\n \n unsigned int\n fn6 (unsigned int a)\n {\n-  return a >> 0xff03;\t/* { dg-warning \"right shift count >= width of type\" } */\n+  return a >> 0xff03;\t/* { dg-warning \"12:right shift count >= width of type\" } */\n }"}, {"sha": "b1d47cf2cbd2d630629971b377fd8627ff4a583e", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-array-ptr10.C", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array-ptr10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array-ptr10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array-ptr10.C?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -19,18 +19,18 @@ constexpr int *p0 = &i;\n constexpr bool b0  = p0;        // { dg-warning \"address of .A::i.\" }\n constexpr bool b1  = p0 == 0;   // { dg-warning \"address of .A::i.\" }\n constexpr bool b2  = p0 != 0;   // { dg-warning \"address of .A::i.\" }\n-constexpr bool b3  = p0 <  0;   // { dg-warning \"ordered comparison\" }\n-constexpr bool b4  = p0 <= 0;   // { dg-warning \"ordered comparison\" }\n-constexpr bool b5  = p0 >  0;   // { dg-warning \"ordered comparison\" }\n-constexpr bool b6  = p0 >= 0;   // { dg-warning \"ordered comparison\" }\n+constexpr bool b3  = p0 <  0;   // { dg-warning \"25:ordered comparison\" }\n+constexpr bool b4  = p0 <= 0;   // { dg-warning \"25:ordered comparison\" }\n+constexpr bool b5  = p0 >  0;   // { dg-warning \"25:ordered comparison\" }\n+constexpr bool b6  = p0 >= 0;   // { dg-warning \"25:ordered comparison\" }\n \n constexpr bool b7  = !p0;       // { dg-warning \"address of .A::i.\" }\n constexpr bool b8  = 0 == p0;   // { dg-warning \"address of .A::i.\" }\n constexpr bool b9  = 0 != p0;   // { dg-warning \"address of .A::i.\" }\n-constexpr bool b10 = 0 <  p0;   // { dg-warning \"ordered comparison\" }\n-constexpr bool b11 = 0 <= p0;   // { dg-warning \"ordered comparison\" }\n-constexpr bool b12 = 0 >  p0;   // { dg-warning \"ordered comparison\" }\n-constexpr bool b13 = 0 >= p0;   // { dg-warning \"ordered comparison\" }\n+constexpr bool b10 = 0 <  p0;   // { dg-warning \"24:ordered comparison\" }\n+constexpr bool b11 = 0 <= p0;   // { dg-warning \"24:ordered comparison\" }\n+constexpr bool b12 = 0 >  p0;   // { dg-warning \"24:ordered comparison\" }\n+constexpr bool b13 = 0 >= p0;   // { dg-warning \"24:ordered comparison\" }\n \n }\n "}, {"sha": "6bcc8e81e200a854f6ef2eeb80f854977782b554", "filename": "gcc/testsuite/g++.dg/cpp0x/nullptr37.C", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnullptr37.C?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -6,41 +6,41 @@ f1 (int *p, int **q)\n {\n   int r = 0;\n \n-  r += p == '\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += p == L'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += p == u'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += p == U'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += p != '\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += p != L'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += p != u'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += p != U'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += p == '\\0'; // { dg-error \"10:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += p == L'\\0'; // { dg-error \"10:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += p == u'\\0'; // { dg-error \"10:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += p == U'\\0'; // { dg-error \"10:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += p != '\\0'; // { dg-error \"10:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += p != L'\\0'; // { dg-error \"10:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += p != u'\\0'; // { dg-error \"10:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += p != U'\\0'; // { dg-error \"10:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n \n-  r += '\\0' == p; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += L'\\0' == p; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += u'\\0' == p; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += U'\\0' == p; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += '\\0' != p; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += L'\\0' != p; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += u'\\0' != p; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += U'\\0' != p; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += '\\0' == p; // { dg-error \"13:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += L'\\0' == p; // { dg-error \"14:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += u'\\0' == p; // { dg-error \"14:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += U'\\0' == p; // { dg-error \"14:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += '\\0' != p; // { dg-error \"13:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += L'\\0' != p; // { dg-error \"14:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += u'\\0' != p; // { dg-error \"14:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += U'\\0' != p; // { dg-error \"14:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n \n-  r += q == '\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += q == L'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += q == u'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += q == U'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += q != '\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += q != L'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += q != u'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += q != U'\\0'; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += q == '\\0'; // { dg-error \"10:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += q == L'\\0'; // { dg-error \"10:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += q == u'\\0'; // { dg-error \"10:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += q == U'\\0'; // { dg-error \"10:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += q != '\\0'; // { dg-error \"10:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += q != L'\\0'; // { dg-error \"10:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += q != u'\\0'; // { dg-error \"10:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += q != U'\\0'; // { dg-error \"10:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n \n-  r += '\\0' == q; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += L'\\0' == q; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += u'\\0' == q; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += U'\\0' == q; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += '\\0' != q; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += L'\\0' != q; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += u'\\0' != q; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += U'\\0' != q; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += '\\0' == q; // { dg-error \"13:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += L'\\0' == q; // { dg-error \"14:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += u'\\0' == q; // { dg-error \"14:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += U'\\0' == q; // { dg-error \"14:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += '\\0' != q; // { dg-error \"13:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += L'\\0' != q; // { dg-error \"14:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += u'\\0' != q; // { dg-error \"14:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += U'\\0' != q; // { dg-error \"14:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n \n   return r;\n }\n@@ -68,11 +68,11 @@ f3 (int *p)\n {\n   int r = 0;\n \n-  r += p == (char) 0; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += p != (char) 0; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += p == (char) 0; // { dg-error \"10:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += p != (char) 0; // { dg-error \"10:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n \n-  r += (char) 0 == p; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n-  r += (char) 0 != p; // { dg-error \"ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += (char) 0 == p; // { dg-error \"17:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n+  r += (char) 0 != p; // { dg-error \"17:ISO C\\\\+\\\\+ forbids comparison between pointer and integer\" }\n \n   return r;\n }"}, {"sha": "892bc45353e570eb695da3997bf8c8545d0bd1fd", "filename": "gcc/testsuite/g++.dg/template/crash126.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash126.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash126.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash126.C?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -4,7 +4,7 @@ template < class T, class > struct A\n {\n   A ();\n   A (A &);\n-  A (A < T, T >);  // { dg-error \"invalid constructor\" }\n+  A (A < T, T >);  // { dg-error \"3:invalid constructor\" }\n };\n \n void f () "}, {"sha": "3bb9e573fedbddce766c710b2d3b91143847a661", "filename": "gcc/testsuite/g++.dg/template/crash129.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash129.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash129.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash129.C?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -1,5 +1,5 @@\n // PR c++/79626\n \n template <class a, class> struct b\n-{ b(); b(b &); b(b< a, a >); };  // { dg-error \"invalid constructor\" }\n+{ b(); b(b &); b(b< a, a >); };  // { dg-error \"16:invalid constructor\" }\n int c(b< int, int >(b< int, int >());  // { dg-error \"\" }"}, {"sha": "1bf2a6e49777024999e08c3e04d7668dce7845f5", "filename": "gcc/testsuite/g++.dg/warn/Wextra-3.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWextra-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWextra-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWextra-3.C?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -3,7 +3,7 @@\n \n extern void* p;\n \n-int f1() { return ( p <  0 ? 1 : 0 ); } // { dg-warning \"ordered comparison\" }\n-int f2() { return ( p <= 0 ? 1 : 0 ); } // { dg-warning \"ordered comparison\" }\n-int f3() { return ( p >  0 ? 1 : 0 ); } // { dg-warning \"ordered comparison\" }\n-int f4() { return ( p >= 0 ? 1 : 0 ); } // { dg-warning \"ordered comparison\" }\n+int f1() { return ( p <  0 ? 1 : 0 ); } // { dg-warning \"23:ordered comparison\" }\n+int f2() { return ( p <= 0 ? 1 : 0 ); } // { dg-warning \"23:ordered comparison\" }\n+int f3() { return ( p >  0 ? 1 : 0 ); } // { dg-warning \"23:ordered comparison\" }\n+int f4() { return ( p >= 0 ? 1 : 0 ); } // { dg-warning \"23:ordered comparison\" }"}, {"sha": "1da04886665de74f15b747698fe3abcb1eae9c12", "filename": "gcc/testsuite/g++.dg/warn/Wfloat-equal-1.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWfloat-equal-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWfloat-equal-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWfloat-equal-1.C?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -4,7 +4,7 @@\n \n double a, b;\n _Complex double c, d;\n-int f(void) { return a == b; } /* { dg-warning \"comparing floating-point\" } */\n-int g(void) { return c == d; } /* { dg-warning \"comparing floating-point\" } */\n-int h(void) { return a != b; } /* { dg-warning \"comparing floating-point\" } */\n-int i(void) { return c != d; } /* { dg-warning \"comparing floating-point\" } */\n+int f(void) { return a == b; } /* { dg-warning \"24:comparing floating-point\" } */\n+int g(void) { return c == d; } /* { dg-warning \"24:comparing floating-point\" } */\n+int h(void) { return a != b; } /* { dg-warning \"24:comparing floating-point\" } */\n+int i(void) { return c != d; } /* { dg-warning \"24:comparing floating-point\" } */"}, {"sha": "866364277ac822e6db21fd35d79e5710c4531701", "filename": "gcc/testsuite/g++.dg/warn/Wstring-literal-comparison-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstring-literal-comparison-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstring-literal-comparison-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstring-literal-comparison-1.C?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -4,7 +4,7 @@\n \n int test1(char *ptr)\n {\n-  return ptr == \"foo\";  /* { dg-warning \"comparison with string\" } */\n+  return ptr == \"foo\";  /* { dg-warning \"14:comparison with string\" } */\n }\n \n int test2()"}, {"sha": "fed4c5a37e86dfa6c3f431b22ebcd58ccfb9cd8a", "filename": "gcc/testsuite/g++.dg/warn/Wstring-literal-comparison-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstring-literal-comparison-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstring-literal-comparison-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWstring-literal-comparison-2.C?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -4,7 +4,7 @@\n \n int test1(char *ptr)\n {\n-  return ptr == \"foo\";  /* { dg-warning \"comparison with string\" } */\n+  return ptr == \"foo\";  /* { dg-warning \"14:comparison with string\" } */\n }\n \n int test2()"}, {"sha": "a0683ca37462d5d4d72c7e19656ebeda19d9a0b8", "filename": "gcc/testsuite/g++.dg/warn/pointer-integer-comparison.C", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpointer-integer-comparison.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpointer-integer-comparison.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fpointer-integer-comparison.C?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -3,24 +3,24 @@\n \n int foo (int i, void *p)\n {\n-  if (i == p) // { dg-warning \"ISO C.. forbids comparison between pointer and integer\" }\n+  if (i == p) // { dg-warning \"9:ISO C.. forbids comparison between pointer and integer\" }\n     return 0;\n-  else if (i != p) // { dg-warning \"ISO C.. forbids comparison between pointer and integer\" }\n+  else if (i != p) // { dg-warning \"14:ISO C.. forbids comparison between pointer and integer\" }\n     return 1;\n }\n \n int bar (int i, void *p)\n {\n-  if (i < p) // { dg-warning \"ISO C.. forbids comparison between pointer and integer\" }\n+  if (i < p) // { dg-warning \"9:ISO C.. forbids comparison between pointer and integer\" }\n     return 0;\n-  else if (i >= p) // { dg-warning \"ISO C.. forbids comparison between pointer and integer\" }\n+  else if (i >= p) // { dg-warning \"14:ISO C.. forbids comparison between pointer and integer\" }\n     return 1;\n }\n \n int baz (int i, void *p)\n {\n-  if (i <= p) // { dg-warning \"ISO C.. forbids comparison between pointer and integer\" }\n+  if (i <= p) // { dg-warning \"9:ISO C.. forbids comparison between pointer and integer\" }\n     return 0;\n-  else if (i > p) // { dg-warning \"ISO C.. forbids comparison between pointer and integer\" }\n+  else if (i > p) // { dg-warning \"14:ISO C.. forbids comparison between pointer and integer\" }\n     return 1;\n }"}, {"sha": "317627a69410ae0a66807f2dd9aeb715faf011e4", "filename": "gcc/testsuite/g++.old-deja/g++.jason/crash8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cb6a77590957942e124b34e0bb0827d1404f341/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash8.C?ref=8cb6a77590957942e124b34e0bb0827d1404f341", "patch": "@@ -1,7 +1,7 @@\n // { dg-do assemble  }\n struct A {\n   A();\n-  A(A);\t\t\t\t// { dg-error \"\" } copy ctor must take reference\n+  A(A);\t\t\t\t// { dg-error \"3:invalid constructor\" } copy ctor must take reference\n };\n int main()\n {"}]}