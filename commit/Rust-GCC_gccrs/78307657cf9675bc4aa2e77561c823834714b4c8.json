{"sha": "78307657cf9675bc4aa2e77561c823834714b4c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgzMDc2NTdjZjk2NzViYzRhYTJlNzc1NjFjODIzODM0NzE0YjRjOA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-11-28T12:22:04Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-11-28T12:22:04Z"}, "message": "re PR tree-optimization/92645 (Hand written vector code is 450 times slower when compiled with GCC compared to Clang)\n\n2019-11-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/92645\n\t* tree-ssa-forwprop.c (get_bit_field_ref_def): Also handle\n\tconversions inside a mode class.  Remove restriction on\n\tpreserving the element size.\n\t(simplify_vector_constructor): Deal with the above and for\n\tidentity permutes also try using VEC_UNPACK_[FLOAT_]LO_EXPR\n\tand VEC_PACK_TRUNC_EXPR.\n\n\t* gcc.target/i386/pr92645-4.c: New testcase.\n\nFrom-SVN: r278806", "tree": {"sha": "6de9c129106da4f2ae45eead1fcf8d68f7438fa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6de9c129106da4f2ae45eead1fcf8d68f7438fa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78307657cf9675bc4aa2e77561c823834714b4c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78307657cf9675bc4aa2e77561c823834714b4c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78307657cf9675bc4aa2e77561c823834714b4c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78307657cf9675bc4aa2e77561c823834714b4c8/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "09f8027ce58fb2162fc6577cc7777409cfd06014", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09f8027ce58fb2162fc6577cc7777409cfd06014", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09f8027ce58fb2162fc6577cc7777409cfd06014"}], "stats": {"total": 167, "additions": 154, "deletions": 13}, "files": [{"sha": "d4a66fd0e58e5a1d86a6157dc9ed5c9dc4d79f5d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78307657cf9675bc4aa2e77561c823834714b4c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78307657cf9675bc4aa2e77561c823834714b4c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78307657cf9675bc4aa2e77561c823834714b4c8", "patch": "@@ -1,3 +1,13 @@\n+2019-11-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92645\n+\t* tree-ssa-forwprop.c (get_bit_field_ref_def): Also handle\n+\tconversions inside a mode class.  Remove restriction on\n+\tpreserving the element size.\n+\t(simplify_vector_constructor): Deal with the above and for\n+\tidentity permutes also try using VEC_UNPACK_[FLOAT_]LO_EXPR\n+\tand VEC_PACK_TRUNC_EXPR.\n+\n 2019-11-28  Georg-Johann Lay  <avr@gjlay.de>\n \n \tMust use push insn to pass varargs arguments of DFmode because"}, {"sha": "a0fdcd5d9de397b7e14709e9892be63302ce4b22", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78307657cf9675bc4aa2e77561c823834714b4c8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78307657cf9675bc4aa2e77561c823834714b4c8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=78307657cf9675bc4aa2e77561c823834714b4c8", "patch": "@@ -1,3 +1,8 @@\n+2019-11-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/92645\n+\t* gcc.target/i386/pr92645-4.c: New testcase.\n+\n 2019-11-28  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/arm/asm-flag-4.c: Use -mfloat-abi=softfp."}, {"sha": "788a97ed1178fd890090dc9c1b69ee6269f53ff5", "filename": "gcc/testsuite/gcc.target/i386/pr92645-4.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78307657cf9675bc4aa2e77561c823834714b4c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92645-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78307657cf9675bc4aa2e77561c823834714b4c8/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92645-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92645-4.c?ref=78307657cf9675bc4aa2e77561c823834714b4c8", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx2 -fdump-tree-optimized -Wno-psabi\" } */\n+\n+typedef unsigned int u32v4 __attribute__((vector_size(16)));\n+typedef unsigned short u16v16 __attribute__((vector_size(32)));\n+typedef unsigned char u8v16 __attribute__((vector_size(16)));\n+\n+union vec128 {\n+  u8v16 u8;\n+  u32v4 u32;\n+};\n+\n+#define memcpy __builtin_memcpy\n+\n+static u16v16 zxt(u8v16 x)\n+{\n+  return (u16v16) {\n+    x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7],\n+    x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15]\n+  };\n+}\n+\n+static u8v16 narrow(u16v16 x)\n+{\n+  return (u8v16) {\n+    x[0], x[1], x[2], x[3], x[4], x[5], x[6], x[7],\n+    x[8], x[9], x[10], x[11], x[12], x[13], x[14], x[15]\n+  };\n+}\n+\n+void f(char *dst, char *src, unsigned long n, unsigned c)\n+{\n+  unsigned ia = 255 - (c >> 24);\n+  ia += ia >> 7;\n+\n+  union vec128 c4 = {0}, ia16 = {0};\n+  c4.u32 += c;\n+  ia16.u8 += (unsigned char)ia;\n+\n+  u16v16 c16 = (zxt(c4.u8) << 8) + 128;\n+\n+  for (; n; src += 16, dst += 16, n -= 4) {\n+    union vec128 s;\n+    memcpy(&s, src, sizeof s);\n+    s.u8 = narrow((zxt(s.u8)*zxt(ia16.u8) + c16) >> 8);\n+    memcpy(dst, &s, sizeof s);\n+  }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vec_unpack_lo\" 3 \"optimized\" } } */\n+/* We're missing an opportunity to, after later optimizations, combine\n+   a uniform CTOR with a vec_unpack_lo_expr to a CTOR on a converted\n+   element.  */\n+/* { dg-final { scan-tree-dump-times \"vec_unpack_lo\" 2 \"optimized\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"VEC_PACK_TRUNC\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"BIT_FIELD_REF\" 2 \"optimized\" } } */"}, {"sha": "b275a637347495a260f826bd690741e0c3b5a329", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 83, "deletions": 13, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78307657cf9675bc4aa2e77561c823834714b4c8/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78307657cf9675bc4aa2e77561c823834714b4c8/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=78307657cf9675bc4aa2e77561c823834714b4c8", "patch": "@@ -2004,16 +2004,12 @@ get_bit_field_ref_def (tree val, enum tree_code &conv_code)\n     return NULL_TREE;\n   enum tree_code code = gimple_assign_rhs_code (def_stmt);\n   if (code == FLOAT_EXPR\n-      || code == FIX_TRUNC_EXPR)\n+      || code == FIX_TRUNC_EXPR\n+      || CONVERT_EXPR_CODE_P (code))\n     {\n       tree op1 = gimple_assign_rhs1 (def_stmt);\n       if (conv_code == ERROR_MARK)\n-\t{\n-\t  if (maybe_ne (GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (val))),\n-\t\t\tGET_MODE_SIZE (TYPE_MODE (TREE_TYPE (op1)))))\n-\t    return NULL_TREE;\n-\t  conv_code = code;\n-\t}\n+\tconv_code = code;\n       else if (conv_code != code)\n \treturn NULL_TREE;\n       if (TREE_CODE (op1) != SSA_NAME)\n@@ -2078,9 +2074,8 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \t  && VECTOR_TYPE_P (TREE_TYPE (ref))\n \t  && useless_type_conversion_p (TREE_TYPE (op1),\n \t\t\t\t\tTREE_TYPE (TREE_TYPE (ref)))\n-\t  && known_eq (bit_field_size (op1), elem_size)\n \t  && constant_multiple_p (bit_field_offset (op1),\n-\t\t\t\t  elem_size, &elem)\n+\t\t\t\t  bit_field_size (op1), &elem)\n \t  && TYPE_VECTOR_SUBPARTS (TREE_TYPE (ref)).is_constant (&refnelts))\n \t{\n \t  unsigned int j;\n@@ -2153,7 +2148,83 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n       if (conv_code != ERROR_MARK\n \t  && !supportable_convert_operation (conv_code, type, conv_src_type,\n \t\t\t\t\t     &conv_code))\n-\treturn false;\n+\t{\n+\t  /* Only few targets implement direct conversion patterns so try\n+\t     some simple special cases via VEC_[UN]PACK[_FLOAT]_LO_EXPR.  */\n+\t  optab optab;\n+\t  tree halfvectype, dblvectype;\n+\t  if (CONVERT_EXPR_CODE_P (conv_code)\n+\t      && (2 * TYPE_PRECISION (TREE_TYPE (TREE_TYPE (orig[0])))\n+\t\t  == TYPE_PRECISION (TREE_TYPE (type)))\n+\t      && mode_for_vector (as_a <scalar_mode>\n+\t\t\t\t  (TYPE_MODE (TREE_TYPE (TREE_TYPE (orig[0])))),\n+\t\t\t\t  nelts * 2).exists ()\n+\t      && (dblvectype\n+\t\t  = build_vector_type (TREE_TYPE (TREE_TYPE (orig[0])),\n+\t\t\t\t       nelts * 2))\n+\t      && (optab = optab_for_tree_code (FLOAT_TYPE_P (TREE_TYPE (type))\n+\t\t\t\t\t       ? VEC_UNPACK_FLOAT_LO_EXPR\n+\t\t\t\t\t       : VEC_UNPACK_LO_EXPR,\n+\t\t\t\t\t       dblvectype,\n+\t\t\t\t\t       optab_default))\n+\t      && (optab_handler (optab, TYPE_MODE (dblvectype))\n+\t\t  != CODE_FOR_nothing))\n+\t    {\n+\t      gimple_seq stmts = NULL;\n+\t      tree dbl;\n+\t      if (refnelts == nelts)\n+\t\t{\n+\t\t  /* ???  Paradoxical subregs don't exist, so insert into\n+\t\t     the lower half of a wider zero vector.  */\n+\t\t  dbl = gimple_build (&stmts, BIT_INSERT_EXPR, dblvectype,\n+\t\t\t\t      build_zero_cst (dblvectype), orig[0],\n+\t\t\t\t      bitsize_zero_node);\n+\t\t}\n+\t      else if (refnelts == 2 * nelts)\n+\t\tdbl = orig[0];\n+\t      else\n+\t\tdbl = gimple_build (&stmts, BIT_FIELD_REF, dblvectype,\n+\t\t\t\t    orig[0], TYPE_SIZE (dblvectype),\n+\t\t\t\t    bitsize_zero_node);\n+\t      gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+\t      gimple_assign_set_rhs_with_ops (gsi,\n+\t\t\t\t\t      FLOAT_TYPE_P (TREE_TYPE (type))\n+\t\t\t\t\t      ? VEC_UNPACK_FLOAT_LO_EXPR\n+\t\t\t\t\t      : VEC_UNPACK_LO_EXPR,\n+\t\t\t\t\t      dbl);\n+\t    }\n+\t  else if (CONVERT_EXPR_CODE_P (conv_code)\n+\t\t   && (TYPE_PRECISION (TREE_TYPE (TREE_TYPE (orig[0])))\n+\t\t       == 2 * TYPE_PRECISION (TREE_TYPE (type)))\n+\t\t   && mode_for_vector (as_a <scalar_mode>\n+\t\t\t\t         (TYPE_MODE\n+\t\t\t\t\t   (TREE_TYPE (TREE_TYPE (orig[0])))),\n+\t\t\t\t       nelts / 2).exists ()\n+\t\t   && (halfvectype\n+\t\t         = build_vector_type (TREE_TYPE (TREE_TYPE (orig[0])),\n+\t\t\t\t\t      nelts / 2))\n+\t\t   && (optab = optab_for_tree_code (VEC_PACK_TRUNC_EXPR,\n+\t\t\t\t\t\t    halfvectype,\n+\t\t\t\t\t\t    optab_default))\n+\t\t   && (optab_handler (optab, TYPE_MODE (halfvectype))\n+\t\t       != CODE_FOR_nothing))\n+\t    {\n+\t      gimple_seq stmts = NULL;\n+\t      tree low = gimple_build (&stmts, BIT_FIELD_REF, halfvectype,\n+\t\t\t\t       orig[0], TYPE_SIZE (halfvectype),\n+\t\t\t\t       bitsize_zero_node);\n+\t      tree hig = gimple_build (&stmts, BIT_FIELD_REF, halfvectype,\n+\t\t\t\t       orig[0], TYPE_SIZE (halfvectype),\n+\t\t\t\t       TYPE_SIZE (halfvectype));\n+\t      gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n+\t      gimple_assign_set_rhs_with_ops (gsi, VEC_PACK_TRUNC_EXPR,\n+\t\t\t\t\t      low, hig);\n+\t    }\n+\t  else\n+\t    return false;\n+\t  update_stmt (gsi_stmt (*gsi));\n+\t  return true;\n+\t}\n       if (nelts != refnelts)\n \t{\n \t  gassign *lowpart\n@@ -2178,9 +2249,8 @@ simplify_vector_constructor (gimple_stmt_iterator *gsi)\n \t\t       ? perm_type\n \t\t       : build_vector_type (TREE_TYPE (perm_type), nelts));\n       if (conv_code != ERROR_MARK\n-\t  && (!supportable_convert_operation (conv_code, type, conv_src_type,\n-\t\t\t\t\t      &conv_code)\n-\t      || conv_code == CALL_EXPR))\n+\t  && !supportable_convert_operation (conv_code, type, conv_src_type,\n+\t\t\t\t\t     &conv_code))\n \treturn false;\n \n       /* Now that we know the number of elements of the source build the"}]}