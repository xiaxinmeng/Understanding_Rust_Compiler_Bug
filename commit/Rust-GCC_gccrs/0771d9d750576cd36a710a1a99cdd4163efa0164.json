{"sha": "0771d9d750576cd36a710a1a99cdd4163efa0164", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc3MWQ5ZDc1MDU3NmNkMzZhNzEwYTFhOTljZGQ0MTYzZWZhMDE2NA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-07-07T21:53:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-07-07T21:53:58Z"}, "message": "re PR c++/49663 ([C++0x] ICE in lookup_base)\n\n\tPR c++/49663\n\t* pt.c (push_deduction_access_scope): Preserve\n\tprocessing_template_decl across push_to_top_level.\n\tAnd revert:\n\t* class.c (pushclass): Accept NULL argument.\n\t(popclass): Deal with popping null class.\n\t* pt.c (push_access_scope, pop_access_scope): Use them rather than\n\tpush_to_top_level/pop_from_top_level.\n\t* name-lookup.c (lookup_name_real_1): Check current_class_type.\n\nFrom-SVN: r176013", "tree": {"sha": "225d7cd1863805212f54357b70b2849d0160340a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/225d7cd1863805212f54357b70b2849d0160340a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0771d9d750576cd36a710a1a99cdd4163efa0164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0771d9d750576cd36a710a1a99cdd4163efa0164", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0771d9d750576cd36a710a1a99cdd4163efa0164", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0771d9d750576cd36a710a1a99cdd4163efa0164/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ceeb79a48e25f19f6242e1ac281883a07dd1d2f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceeb79a48e25f19f6242e1ac281883a07dd1d2f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceeb79a48e25f19f6242e1ac281883a07dd1d2f1"}], "stats": {"total": 113, "additions": 92, "deletions": 21}, "files": [{"sha": "b926ec947a2e9c47023f2083af0245cc2f37ba15", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0771d9d750576cd36a710a1a99cdd4163efa0164/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0771d9d750576cd36a710a1a99cdd4163efa0164/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0771d9d750576cd36a710a1a99cdd4163efa0164", "patch": "@@ -1,3 +1,15 @@\n+2011-07-07  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49663\n+\t* pt.c (push_deduction_access_scope): Preserve\n+\tprocessing_template_decl across push_to_top_level.\n+\tAnd revert:\n+\t* class.c (pushclass): Accept NULL argument.\n+\t(popclass): Deal with popping null class.\n+\t* pt.c (push_access_scope, pop_access_scope): Use them rather than\n+\tpush_to_top_level/pop_from_top_level.\n+\t* name-lookup.c (lookup_name_real_1): Check current_class_type.\n+\n 2011-07-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/49644"}, {"sha": "7de104d4bc764ef23a56c63a806629311e6da714", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0771d9d750576cd36a710a1a99cdd4163efa0164/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0771d9d750576cd36a710a1a99cdd4163efa0164/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=0771d9d750576cd36a710a1a99cdd4163efa0164", "patch": "@@ -6125,9 +6125,6 @@ restore_class_cache (void)\n    So that we may avoid calls to lookup_name, we cache the _TYPE\n    nodes of local TYPE_DECLs in the TREE_TYPE field of the name.\n \n-   For use by push_access_scope, we allow TYPE to be null to temporarily\n-   push out of class scope.  This does not actually change binding levels.\n-\n    For multiple inheritance, we perform a two-pass depth-first search\n    of the type lattice.  */\n \n@@ -6136,6 +6133,8 @@ pushclass (tree type)\n {\n   class_stack_node_t csn;\n \n+  type = TYPE_MAIN_VARIANT (type);\n+\n   /* Make sure there is enough room for the new entry on the stack.  */\n   if (current_class_depth + 1 >= current_class_stack_size)\n     {\n@@ -6154,15 +6153,6 @@ pushclass (tree type)\n   csn->hidden = 0;\n   current_class_depth++;\n \n-  if (type == NULL_TREE)\n-    {\n-      current_class_name = current_class_type = NULL_TREE;\n-      csn->hidden = true;\n-      return;\n-    }\n-\n-  type = TYPE_MAIN_VARIANT (type);\n-\n   /* Now set up the new type.  */\n   current_class_name = TYPE_NAME (type);\n   if (TREE_CODE (current_class_name) == TYPE_DECL)\n@@ -6207,11 +6197,7 @@ invalidate_class_lookup_cache (void)\n void\n popclass (void)\n {\n-  if (current_class_type)\n-    poplevel_class ();\n-  else\n-    gcc_assert (current_class_depth\n-\t\t&& current_class_stack[current_class_depth - 1].hidden);\n+  poplevel_class ();\n \n   current_class_depth--;\n   current_class_name = current_class_stack[current_class_depth].name;"}, {"sha": "06726da74ea8ea14a382f62b6b35949e6803a2be", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0771d9d750576cd36a710a1a99cdd4163efa0164/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0771d9d750576cd36a710a1a99cdd4163efa0164/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=0771d9d750576cd36a710a1a99cdd4163efa0164", "patch": "@@ -4473,7 +4473,7 @@ lookup_name_real_1 (tree name, int prefer_type, int nonclass, bool block_p,\n   /* Conversion operators are handled specially because ordinary\n      unqualified name lookup will not find template conversion\n      operators.  */\n-  if (IDENTIFIER_TYPENAME_P (name) && current_class_type)\n+  if (IDENTIFIER_TYPENAME_P (name))\n     {\n       struct cp_binding_level *level;\n "}, {"sha": "2c64dd4a4c6aaeba1975d977f2cf9e0052288a2b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0771d9d750576cd36a710a1a99cdd4163efa0164/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0771d9d750576cd36a710a1a99cdd4163efa0164/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0771d9d750576cd36a710a1a99cdd4163efa0164", "patch": "@@ -214,7 +214,7 @@ push_access_scope (tree t)\n   else if (DECL_CLASS_SCOPE_P (t))\n     push_nested_class (DECL_CONTEXT (t));\n   else\n-    pushclass (NULL_TREE);\n+    push_to_top_level ();\n \n   if (TREE_CODE (t) == FUNCTION_DECL)\n     {\n@@ -239,7 +239,7 @@ pop_access_scope (tree t)\n   if (DECL_FRIEND_CONTEXT (t) || DECL_CLASS_SCOPE_P (t))\n     pop_nested_class ();\n   else\n-    popclass ();\n+    pop_from_top_level ();\n }\n \n /* Do any processing required when DECL (a member template\n@@ -13843,7 +13843,13 @@ static void\n push_deduction_access_scope (tree tmpl)\n {\n   if (cxx_dialect >= cxx0x)\n-    push_access_scope (DECL_TEMPLATE_RESULT (tmpl));\n+    {\n+      int ptd = processing_template_decl;\n+      push_access_scope (DECL_TEMPLATE_RESULT (tmpl));\n+      /* Preserve processing_template_decl across push_to_top_level.  */\n+      if (ptd && !processing_template_decl)\n+\t++processing_template_decl;\n+    }\n   else\n     push_deferring_access_checks (dk_no_check);\n }"}, {"sha": "6e17a559e24b0cd17bc91de673b4ba1ad6b15799", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0771d9d750576cd36a710a1a99cdd4163efa0164/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0771d9d750576cd36a710a1a99cdd4163efa0164/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0771d9d750576cd36a710a1a99cdd4163efa0164", "patch": "@@ -1,3 +1,8 @@\n+2011-07-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49663\n+\t* g++.dg/cpp0x/regress/regress4.C: New.\n+\n 2011-07-07  Mikael Morin  <mikael.morin@sfr.fr>\n \n \tPR fortran/49648"}, {"sha": "b56263ae5ae08b2fbad7380497a4d6b5d62d2d51", "filename": "gcc/testsuite/g++.dg/cpp0x/regress/regress4.C", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0771d9d750576cd36a710a1a99cdd4163efa0164/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fregress4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0771d9d750576cd36a710a1a99cdd4163efa0164/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fregress4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fregress%2Fregress4.C?ref=0771d9d750576cd36a710a1a99cdd4163efa0164", "patch": "@@ -0,0 +1,62 @@\n+// PR c++/49663\n+// { dg-options -std=c++0x }\n+\n+struct Nosm\n+{\n+    int m_R;\n+};\n+\n+namespace dx {\n+\n+    struct onc\n+    {\n+        typedef void(*Cb)();\n+\n+        onc(Cb cb);\n+    };\n+\n+    struct grac\n+    {\n+        template<class Derived> static void once();\n+    };\n+\n+    template<class Derived>\n+        struct tonc : onc\n+        {\n+            tonc() : onc(&grac::once<Derived>) {}\n+\n+            static Derived& get();\n+        };\n+\n+    template<class Derived> void grac::once()\n+    {\n+        tonc<Derived>::get().h();\n+    }\n+}\n+\n+namespace\n+{\n+    template<typename T, int = sizeof(&T::m_R)>\n+        struct has_R { };\n+\n+    template<typename T>\n+        inline void\n+        setR(T* m, has_R<T>* = 0)\n+        { }\n+\n+    inline void setR(...) { }\n+}\n+\n+template<typename M>\n+    struct Qmi\n+    : dx::tonc<Qmi<M> >\n+    {\n+        void h()\n+        {\n+            setR(&msg);\n+        }\n+\n+        M msg;\n+    };\n+\n+Qmi<Nosm> x;"}]}