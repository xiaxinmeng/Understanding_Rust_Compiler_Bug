{"sha": "3e78185c79c148cbf594b57b036b0de1f9d206ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U3ODE4NWM3OWMxNDhjYmY1OTRiNTdiMDM2YjBkZTFmOWQyMDZhYw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-07-03T19:00:52Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-07-03T19:00:52Z"}, "message": "re PR objc/24867 (many N^2 loops in objc frontend)\n\n\tPR objc/24867\n\t* objc-act.c (build_sized_array_type): New function.\n\t(add_objc_string): Use it.\n\t(generate_protocol_list): Likewise.\n\t(generate_objc_image_info): Likewise.\n\t(add_field_decl): New function.\n\t(objc_build_struct): Use a VEC rather than building a TREE_LIST.\n\t(generate_struct_by_value_array): Use add_field_decl.\n\t(build_objc_symtab_template): Likewise.\n\t(build_module_descriptor): Likewise.\n\t(build_objc_exception_stuff): Likewise.\n\t(build_protocol_template): Likewise.\n\t(build_method_prototype_list_template): Likewise.\n\t(build_method_prototype_template): Likewise.\n\t(build_category_template): Likewise.\n\t(build_selector_template): Likewise.\n\t(build_class_template): Likewise.\n\t(build_super_template): Likewise.\n\t(build_ivar_template): Likewise.\n\t(build_ivar_list_template): Likewise.\n\t(build_method_list_template): Likewise.\n\t(build_method_template): Likewise.\n\nFrom-SVN: r161777", "tree": {"sha": "4d11868208a9735a39a0d6ae9bd5569f8f9f9192", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d11868208a9735a39a0d6ae9bd5569f8f9f9192"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e78185c79c148cbf594b57b036b0de1f9d206ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e78185c79c148cbf594b57b036b0de1f9d206ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e78185c79c148cbf594b57b036b0de1f9d206ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e78185c79c148cbf594b57b036b0de1f9d206ac/comments", "author": null, "committer": null, "parents": [{"sha": "7c4f0041b0e872a979e20dd8192af178ecf733de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c4f0041b0e872a979e20dd8192af178ecf733de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c4f0041b0e872a979e20dd8192af178ecf733de"}], "stats": {"total": 407, "additions": 172, "deletions": 235}, "files": [{"sha": "9505d7eacb687401ab6b45e6027b374c4b9cbb24", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e78185c79c148cbf594b57b036b0de1f9d206ac/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e78185c79c148cbf594b57b036b0de1f9d206ac/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=3e78185c79c148cbf594b57b036b0de1f9d206ac", "patch": "@@ -1,3 +1,28 @@\n+2010-07-03  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\tPR objc/24867\n+\t* objc-act.c (build_sized_array_type): New function.\n+\t(add_objc_string): Use it.\n+\t(generate_protocol_list): Likewise.\n+\t(generate_objc_image_info): Likewise.\n+\t(add_field_decl): New function.\n+\t(objc_build_struct): Use a VEC rather than building a TREE_LIST.\n+\t(generate_struct_by_value_array): Use add_field_decl.\n+\t(build_objc_symtab_template): Likewise.\n+\t(build_module_descriptor): Likewise.\n+\t(build_objc_exception_stuff): Likewise.\n+\t(build_protocol_template): Likewise.\n+\t(build_method_prototype_list_template): Likewise.\n+\t(build_method_prototype_template): Likewise.\n+\t(build_category_template): Likewise.\n+\t(build_selector_template): Likewise.\n+\t(build_class_template): Likewise.\n+\t(build_super_template): Likewise.\n+\t(build_ivar_template): Likewise.\n+\t(build_ivar_list_template): Likewise.\n+\t(build_method_list_template): Likewise.\n+\t(build_method_template): Likewise.\n+\n 2010-06-28  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* objc-act.c: Do not include except.h."}, {"sha": "af4aa8e583fae452ff7c7ee1ecb680eab6080ace", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 147, "deletions": 235, "changes": 382, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e78185c79c148cbf594b57b036b0de1f9d206ac/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e78185c79c148cbf594b57b036b0de1f9d206ac/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=3e78185c79c148cbf594b57b036b0de1f9d206ac", "patch": "@@ -442,6 +442,25 @@ objc_finish_struct (tree type, tree fieldlist)\n \t\t\tobjc_struct_info);\n }\n \n+static tree\n+build_sized_array_type (tree base_type, int size)\n+{\n+  tree index_type = build_index_type (build_int_cst (NULL_TREE, size - 1));\n+  return build_array_type (base_type, index_type);\n+}\n+\n+static tree\n+add_field_decl (tree type, const char *name, tree **chain)\n+{\n+  tree field = create_field_decl (type, name);\n+\n+  if (*chain != NULL)\n+    **chain = field;\n+  *chain = &TREE_CHAIN (field);\n+\n+  return field;\n+}\n+\n /* Some platforms pass small structures through registers versus\n    through an invisible pointer.  Determine at what size structure is\n    the transition point between the two possibilities.  */\n@@ -450,7 +469,7 @@ static void\n generate_struct_by_value_array (void)\n {\n   tree type;\n-  tree field_decl, field_decl_chain;\n+  tree decls;\n   int i, j;\n   int aggregate_in_mem[32];\n   int found = 0;\n@@ -459,23 +478,20 @@ generate_struct_by_value_array (void)\n   for (i = 1; i < 32; i++)\n     {\n       char buffer[5];\n+      tree *chain = NULL;\n \n       /* Create an unnamed struct that has `i' character components */\n       type = objc_start_struct (NULL_TREE);\n \n       strcpy (buffer, \"c1\");\n-      field_decl = create_field_decl (char_type_node,\n-\t\t\t\t      buffer);\n-      field_decl_chain = field_decl;\n+      decls = add_field_decl (char_type_node, buffer, &chain);\n \n       for (j = 1; j < i; j++)\n \t{\n \t  sprintf (buffer, \"c%d\", j + 1);\n-\t  field_decl = create_field_decl (char_type_node,\n-\t\t\t\t\t  buffer);\n-\t  chainon (field_decl_chain, field_decl);\n+\t  add_field_decl (char_type_node, buffer, &chain);\n \t}\n-      objc_finish_struct (type, field_decl_chain);\n+      objc_finish_struct (type, decls);\n \n       aggregate_in_mem[i] = aggregate_value_p (type, 0);\n       if (!aggregate_in_mem[i])\n@@ -824,7 +840,9 @@ objc_build_struct (tree klass, tree fields, tree super_name)\n   tree name = CLASS_NAME (klass);\n   tree s = objc_start_struct (name);\n   tree super = (super_name ? xref_tag (RECORD_TYPE, super_name) : NULL_TREE);\n-  tree t, objc_info = NULL_TREE;\n+  tree t;\n+  VEC(tree,heap) *objc_info = NULL;\n+  int i;\n \n   if (super)\n     {\n@@ -882,9 +900,7 @@ objc_build_struct (tree klass, tree fields, tree super_name)\n \t  INIT_TYPE_OBJC_INFO (t);\n \t  TYPE_OBJC_INTERFACE (t) = klass;\n \t}\n-      objc_info\n-\t= chainon (objc_info,\n-\t\t   build_tree_list (NULL_TREE, TYPE_OBJC_INFO (t)));\n+      VEC_safe_push (tree, heap, objc_info, TYPE_OBJC_INFO (t));\n     }\n \n   /* Point the struct at its related Objective-C class.  */\n@@ -893,13 +909,13 @@ objc_build_struct (tree klass, tree fields, tree super_name)\n \n   s = objc_finish_struct (s, fields);\n \n-  for (t = TYPE_NEXT_VARIANT (s); t;\n-       t = TYPE_NEXT_VARIANT (t), objc_info = TREE_CHAIN (objc_info))\n+  for (i = 0, t = TYPE_NEXT_VARIANT (s); t; t = TYPE_NEXT_VARIANT (t), i++)\n     {\n-      TYPE_OBJC_INFO (t) = TREE_VALUE (objc_info);\n+      TYPE_OBJC_INFO (t) = VEC_index (tree, objc_info, i);\n       /* Replace the IDENTIFIER_NODE with an actual @interface.  */\n       TYPE_OBJC_INTERFACE (t) = klass;\n     }\n+  VEC_free (tree, heap, objc_info);\n \n   /* Use TYPE_BINFO structures to point at the super class, if any.  */\n   objc_xref_basetypes (s, super);\n@@ -2105,43 +2121,32 @@ objc_build_constructor (tree type, VEC(constructor_elt,gc) *elts)\n static void\n build_objc_symtab_template (void)\n {\n-  tree field_decl, field_decl_chain;\n+  tree fields, *chain = NULL;\n \n   objc_symtab_template = objc_start_struct (get_identifier (UTAG_SYMTAB));\n \n   /* long sel_ref_cnt; */\n-  field_decl = create_field_decl (long_integer_type_node, \"sel_ref_cnt\");\n-  field_decl_chain = field_decl;\n+  fields = add_field_decl (long_integer_type_node, \"sel_ref_cnt\", &chain);\n \n   /* SEL *refs; */\n-  field_decl = create_field_decl (build_pointer_type (objc_selector_type),\n-\t\t\t\t  \"refs\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (build_pointer_type (objc_selector_type), \"refs\", &chain);\n \n   /* short cls_def_cnt; */\n-  field_decl = create_field_decl (short_integer_type_node, \"cls_def_cnt\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (short_integer_type_node, \"cls_def_cnt\", &chain);\n \n   /* short cat_def_cnt; */\n-  field_decl = create_field_decl (short_integer_type_node,\n-\t\t\t\t  \"cat_def_cnt\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (short_integer_type_node, \"cat_def_cnt\", &chain);\n \n   if (imp_count || cat_count || !flag_next_runtime)\n     {\n       /* void *defs[imp_count + cat_count (+ 1)]; */\n       /* NB: The index is one less than the size of the array.  */\n-      int index = imp_count + cat_count\n-\t\t+ (flag_next_runtime? -1: 0);\n-      field_decl = create_field_decl\n-\t\t   (build_array_type\n-\t\t    (ptr_type_node,\n-\t\t     build_index_type (build_int_cst (NULL_TREE, index))),\n-\t\t    \"defs\");\n-      chainon (field_decl_chain, field_decl);\n+      int index = imp_count + cat_count + (flag_next_runtime ? -1: 0);\n+      tree array_type = build_sized_array_type (ptr_type_node, index + 1);\n+      add_field_decl (array_type, \"defs\", &chain);\n     }\n \n-  objc_finish_struct (objc_symtab_template, field_decl_chain);\n+  objc_finish_struct (objc_symtab_template, fields);\n }\n \n /* Create the initial value for the `defs' field of _objc_symtab.\n@@ -2336,7 +2341,7 @@ init_module_descriptor (tree type)\n static void\n build_module_descriptor (void)\n {\n-  tree field_decl, field_decl_chain;\n+  tree decls, *chain = NULL;\n \n #ifdef OBJCPLUS\n   push_lang_context (lang_name_c); /* extern \"C\" */\n@@ -2345,26 +2350,20 @@ build_module_descriptor (void)\n   objc_module_template = objc_start_struct (get_identifier (UTAG_MODULE));\n \n   /* long version; */\n-  field_decl = create_field_decl (long_integer_type_node, \"version\");\n-  field_decl_chain = field_decl;\n+  decls = add_field_decl (long_integer_type_node, \"version\", &chain);\n \n   /* long size; */\n-  field_decl = create_field_decl (long_integer_type_node, \"size\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (long_integer_type_node, \"size\", &chain);\n \n   /* char *name; */\n-  field_decl = create_field_decl (string_type_node, \"name\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (string_type_node, \"name\", &chain);\n \n   /* struct _objc_symtab *symtab; */\n-  field_decl\n-    = create_field_decl (build_pointer_type\n-\t\t\t (xref_tag (RECORD_TYPE,\n-\t\t\t\t    get_identifier (UTAG_SYMTAB))),\n-\t\t\t \"symtab\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (build_pointer_type (xref_tag (RECORD_TYPE,\n+\t\t\t\t\t\tget_identifier (UTAG_SYMTAB))),\n+\t\t  \"symtab\", &chain);\n \n-  objc_finish_struct (objc_module_template, field_decl_chain);\n+  objc_finish_struct (objc_module_template, decls);\n \n   /* Create an instance of \"_objc_module\".  */\n   UOBJC_MODULES_decl = start_var_decl (objc_module_template, \"_OBJC_MODULES\");\n@@ -2881,11 +2880,7 @@ add_objc_string (tree ident, enum string_section section)\n \n   decl = build_objc_string_decl (section);\n \n-  type = build_array_type\n-\t (char_type_node,\n-\t  build_index_type\n-\t  (build_int_cst (NULL_TREE,\n-\t\t\t  IDENTIFIER_LENGTH (ident))));\n+  type = build_sized_array_type (char_type_node, IDENTIFIER_LENGTH (ident) + 1);\n   decl = start_var_decl (type, IDENTIFIER_POINTER (DECL_NAME (decl)));\n   string_expr = my_build_string (IDENTIFIER_LENGTH (ident) + 1,\n \t\t\t\t IDENTIFIER_POINTER (ident));\n@@ -4067,26 +4062,22 @@ objc_build_synchronized (location_t start_locus, tree mutex, tree body)\n static void\n build_next_objc_exception_stuff (void)\n {\n-  tree field_decl, field_decl_chain, index, temp_type;\n+  tree decls, temp_type, *chain = NULL;\n \n   objc_exception_data_template\n     = objc_start_struct (get_identifier (UTAG_EXCDATA));\n \n   /* int buf[OBJC_JBLEN]; */\n \n-  index = build_index_type (build_int_cst (NULL_TREE, OBJC_JBLEN - 1));\n-  field_decl = create_field_decl (build_array_type (integer_type_node, index),\n-\t\t\t\t  \"buf\");\n-  field_decl_chain = field_decl;\n+  temp_type = build_sized_array_type (integer_type_node, OBJC_JBLEN);\n+  decls = add_field_decl (temp_type, \"buf\", &chain);\n \n   /* void *pointers[4]; */\n \n-  index = build_index_type (build_int_cst (NULL_TREE, 4 - 1));\n-  field_decl = create_field_decl (build_array_type (ptr_type_node, index),\n-\t\t\t\t  \"pointers\");\n-  chainon (field_decl_chain, field_decl);\n+  temp_type = build_sized_array_type (ptr_type_node, 4);\n+  add_field_decl (temp_type, \"pointers\", &chain);\n \n-  objc_finish_struct (objc_exception_data_template, field_decl_chain);\n+  objc_finish_struct (objc_exception_data_template, decls);\n \n   /* int _setjmp(...); */\n   /* If the user includes <setjmp.h>, this shall be superseded by\n@@ -4225,39 +4216,29 @@ build_private_template (tree klass)\n static void\n build_protocol_template (void)\n {\n-  tree field_decl, field_decl_chain;\n+  tree ptype, decls, *chain = NULL;\n \n   objc_protocol_template = objc_start_struct (get_identifier (UTAG_PROTOCOL));\n \n   /* struct _objc_class *isa; */\n-  field_decl = create_field_decl (build_pointer_type\n-\t\t\t\t  (xref_tag (RECORD_TYPE,\n-\t\t\t\t\t     get_identifier (UTAG_CLASS))),\n-\t\t\t\t  \"isa\");\n-  field_decl_chain = field_decl;\n+  ptype = build_pointer_type (xref_tag (RECORD_TYPE,\n+\t\t\t\t\tget_identifier (UTAG_CLASS)));\n+  decls = add_field_decl (ptype, \"isa\", &chain);\n \n   /* char *protocol_name; */\n-  field_decl = create_field_decl (string_type_node, \"protocol_name\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (string_type_node, \"protocol_name\", &chain);\n \n   /* struct _objc_protocol **protocol_list; */\n-  field_decl = create_field_decl (build_pointer_type\n-\t\t\t\t  (build_pointer_type\n-\t\t\t\t   (objc_protocol_template)),\n-\t\t\t\t  \"protocol_list\");\n-  chainon (field_decl_chain, field_decl);\n+  ptype = build_pointer_type (build_pointer_type (objc_protocol_template));\n+  add_field_decl (ptype, \"protocol_list\", &chain);\n \n   /* struct _objc__method_prototype_list *instance_methods; */\n-  field_decl = create_field_decl (objc_method_proto_list_ptr,\n-\t\t\t\t  \"instance_methods\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (objc_method_proto_list_ptr, \"instance_methods\", &chain);\n \n   /* struct _objc__method_prototype_list *class_methods; */\n-  field_decl = create_field_decl (objc_method_proto_list_ptr,\n-\t\t\t\t  \"class_methods\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (objc_method_proto_list_ptr, \"class_methods\", &chain);\n \n-  objc_finish_struct (objc_protocol_template, field_decl_chain);\n+  objc_finish_struct (objc_protocol_template, decls);\n }\n \n static tree\n@@ -4297,25 +4278,20 @@ static tree\n build_method_prototype_list_template (tree list_type, int size)\n {\n   tree objc_ivar_list_record;\n-  tree field_decl, field_decl_chain;\n+  tree array_type, decls, *chain = NULL;\n \n   /* Generate an unnamed struct definition.  */\n \n   objc_ivar_list_record = objc_start_struct (NULL_TREE);\n \n   /* int method_count; */\n-  field_decl = create_field_decl (integer_type_node, \"method_count\");\n-  field_decl_chain = field_decl;\n+  decls = add_field_decl (integer_type_node, \"method_count\", &chain);\n \n   /* struct objc_method method_list[]; */\n-  field_decl = create_field_decl (build_array_type\n-\t\t\t\t  (list_type,\n-\t\t\t\t   build_index_type\n-\t\t\t\t   (build_int_cst (NULL_TREE, size - 1))),\n-\t\t\t\t  \"method_list\");\n-  chainon (field_decl_chain, field_decl);\n+  array_type = build_sized_array_type (list_type, size);\n+  add_field_decl (array_type, \"method_list\", &chain);\n \n-  objc_finish_struct (objc_ivar_list_record, field_decl_chain);\n+  objc_finish_struct (objc_ivar_list_record, decls);\n \n   return objc_ivar_list_record;\n }\n@@ -4324,19 +4300,17 @@ static tree\n build_method_prototype_template (void)\n {\n   tree proto_record;\n-  tree field_decl, field_decl_chain;\n+  tree decls, *chain = NULL;\n \n   proto_record = objc_start_struct (get_identifier (UTAG_METHOD_PROTOTYPE));\n \n   /* SEL _cmd; */\n-  field_decl = create_field_decl (objc_selector_type, \"_cmd\");\n-  field_decl_chain = field_decl;\n+  decls = add_field_decl (objc_selector_type, \"_cmd\", &chain);\n \n   /* char *method_types; */\n-  field_decl = create_field_decl (string_type_node, \"method_types\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (string_type_node, \"method_types\", &chain);\n \n-  objc_finish_struct (proto_record, field_decl_chain);\n+  objc_finish_struct (proto_record, decls);\n \n   return proto_record;\n }\n@@ -4821,36 +4795,27 @@ build_protocol_initializer (tree type, tree protocol_name,\n static void\n build_category_template (void)\n {\n-  tree field_decl, field_decl_chain;\n+  tree ptype, decls, *chain = NULL;\n \n   objc_category_template = objc_start_struct (get_identifier (UTAG_CATEGORY));\n \n   /* char *category_name; */\n-  field_decl = create_field_decl (string_type_node, \"category_name\");\n-  field_decl_chain = field_decl;\n+  decls = add_field_decl (string_type_node, \"category_name\", &chain);\n \n   /* char *class_name; */\n-  field_decl = create_field_decl (string_type_node, \"class_name\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (string_type_node, \"class_name\", &chain);\n \n   /* struct _objc_method_list *instance_methods; */\n-  field_decl = create_field_decl (objc_method_list_ptr,\n-\t\t\t\t  \"instance_methods\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (objc_method_list_ptr, \"instance_methods\", &chain);\n \n   /* struct _objc_method_list *class_methods; */\n-  field_decl = create_field_decl (objc_method_list_ptr,\n-\t\t\t\t  \"class_methods\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (objc_method_list_ptr, \"class_methods\", &chain);\n \n   /* struct _objc_protocol **protocol_list; */\n-  field_decl = create_field_decl (build_pointer_type\n-\t\t\t\t  (build_pointer_type\n-\t\t\t\t   (objc_protocol_template)),\n-\t\t\t\t  \"protocol_list\");\n-  chainon (field_decl_chain, field_decl);\n+  ptype = build_pointer_type (build_pointer_type (objc_protocol_template));\n+  add_field_decl (ptype, \"protocol_list\", &chain);\n \n-  objc_finish_struct (objc_category_template, field_decl_chain);\n+  objc_finish_struct (objc_category_template, decls);\n }\n \n /* struct _objc_selector {\n@@ -4861,19 +4826,17 @@ build_category_template (void)\n static void\n build_selector_template (void)\n {\n-  tree field_decl, field_decl_chain;\n+  tree decls, *chain = NULL;\n \n   objc_selector_template = objc_start_struct (get_identifier (UTAG_SELECTOR));\n \n   /* SEL sel_id; */\n-  field_decl = create_field_decl (objc_selector_type, \"sel_id\");\n-  field_decl_chain = field_decl;\n+  decls = add_field_decl (objc_selector_type, \"sel_id\", &chain);\n \n   /* char *sel_type; */\n-  field_decl = create_field_decl (string_type_node, \"sel_type\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (string_type_node, \"sel_type\", &chain);\n \n-  objc_finish_struct (objc_selector_template, field_decl_chain);\n+  objc_finish_struct (objc_selector_template, decls);\n }\n \n /* struct _objc_class {\n@@ -4907,102 +4870,76 @@ build_selector_template (void)\n static void\n build_class_template (void)\n {\n-  tree field_decl, field_decl_chain;\n+  tree ptype, decls, *chain = NULL;\n \n   objc_class_template = objc_start_struct (get_identifier (UTAG_CLASS));\n \n   /* struct _objc_class *isa; */\n-  field_decl = create_field_decl (build_pointer_type (objc_class_template),\n-\t\t\t\t  \"isa\");\n-  field_decl_chain = field_decl;\n+  decls = add_field_decl (build_pointer_type (objc_class_template),\n+\t\t\t  \"isa\", &chain);\n \n   /* struct _objc_class *super_class; */\n-  field_decl = create_field_decl (build_pointer_type (objc_class_template),\n-\t\t\t\t  \"super_class\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (build_pointer_type (objc_class_template),\n+\t\t  \"super_class\", &chain);\n \n   /* char *name; */\n-  field_decl = create_field_decl (string_type_node, \"name\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (string_type_node, \"name\", &chain);\n \n   /* long version; */\n-  field_decl = create_field_decl (long_integer_type_node, \"version\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (long_integer_type_node, \"version\", &chain);\n \n   /* long info; */\n-  field_decl = create_field_decl (long_integer_type_node, \"info\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (long_integer_type_node, \"info\", &chain);\n \n   /* long instance_size; */\n-  field_decl = create_field_decl (long_integer_type_node, \"instance_size\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (long_integer_type_node, \"instance_size\", &chain);\n \n   /* struct _objc_ivar_list *ivars; */\n-  field_decl = create_field_decl (objc_ivar_list_ptr,\n-\t\t\t\t  \"ivars\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (objc_ivar_list_ptr,\"ivars\", &chain);\n \n   /* struct _objc_method_list *methods; */\n-  field_decl = create_field_decl (objc_method_list_ptr,\n-\t\t\t\t  \"methods\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (objc_method_list_ptr, \"methods\", &chain);\n \n   if (flag_next_runtime)\n     {\n       /* struct objc_cache *cache; */\n-      field_decl = create_field_decl (build_pointer_type\n-\t\t\t\t      (xref_tag (RECORD_TYPE,\n-\t\t\t\t\t\t get_identifier\n-\t\t\t\t\t\t (\"objc_cache\"))),\n-\t\t\t\t      \"cache\");\n-      chainon (field_decl_chain, field_decl);\n+      ptype = build_pointer_type (xref_tag (RECORD_TYPE,\n+\t\t\t\t\t    get_identifier (\"objc_cache\")));\n+      add_field_decl (ptype, \"cache\", &chain);\n     }\n   else\n     {\n       /* struct sarray *dtable; */\n-      field_decl = create_field_decl (build_pointer_type\n-\t\t\t\t      (xref_tag (RECORD_TYPE,\n-\t\t\t\t\t\t get_identifier\n-\t\t\t\t\t\t (\"sarray\"))),\n-\t\t\t\t      \"dtable\");\n-      chainon (field_decl_chain, field_decl);\n+      ptype = build_pointer_type(xref_tag (RECORD_TYPE,\n+\t\t\t\t\t   get_identifier (\"sarray\")));\n+      add_field_decl (ptype, \"dtable\", &chain);\n \n       /* struct objc_class *subclass_list; */\n-      field_decl = create_field_decl (build_pointer_type\n-\t\t\t\t      (objc_class_template),\n-\t\t\t\t      \"subclass_list\");\n-      chainon (field_decl_chain, field_decl);\n+      ptype = build_pointer_type (objc_class_template);\n+      add_field_decl (ptype, \"subclass_list\", &chain);\n \n       /* struct objc_class *sibling_class; */\n-      field_decl = create_field_decl (build_pointer_type\n-\t\t\t\t      (objc_class_template),\n-\t\t\t\t      \"sibling_class\");\n-      chainon (field_decl_chain, field_decl);\n+      ptype = build_pointer_type (objc_class_template);\n+      add_field_decl (ptype, \"sibling_class\", &chain);\n     }\n \n   /* struct _objc_protocol **protocol_list; */\n-  field_decl = create_field_decl (build_pointer_type\n-\t\t\t\t  (build_pointer_type\n-\t\t\t\t   (xref_tag (RECORD_TYPE,\n-\t\t\t\t\t     get_identifier\n-\t\t\t\t\t     (UTAG_PROTOCOL)))),\n-\t\t\t\t  \"protocol_list\");\n-  chainon (field_decl_chain, field_decl);\n+  ptype = build_pointer_type (build_pointer_type\n+\t\t\t      (xref_tag (RECORD_TYPE,\n+\t\t\t\t\t get_identifier (UTAG_PROTOCOL))));\n+  add_field_decl (ptype, \"protocol_list\", &chain);\n \n   if (flag_next_runtime)\n     {\n       /* void *sel_id; */\n-      field_decl = create_field_decl (build_pointer_type (void_type_node),\n-\t\t\t\t      \"sel_id\");\n-      chainon (field_decl_chain, field_decl);\n+      add_field_decl (build_pointer_type (void_type_node), \"sel_id\", &chain);\n     }\n \n   /* void *gc_object_type; */\n-  field_decl = create_field_decl (build_pointer_type (void_type_node),\n-\t\t\t\t  \"gc_object_type\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (build_pointer_type (void_type_node),\n+\t\t  \"gc_object_type\", &chain);\n \n-  objc_finish_struct (objc_class_template, field_decl_chain);\n+  objc_finish_struct (objc_class_template, decls);\n }\n \n /* Generate appropriate forward declarations for an implementation.  */\n@@ -5101,20 +5038,18 @@ check_ivars (tree inter, tree imp)\n static void\n build_super_template (void)\n {\n-  tree field_decl, field_decl_chain;\n+  tree decls, *chain = NULL;\n \n   objc_super_template = objc_start_struct (get_identifier (UTAG_SUPER));\n \n   /* struct _objc_object *self; */\n-  field_decl = create_field_decl (objc_object_type, \"self\");\n-  field_decl_chain = field_decl;\n+  decls = add_field_decl (objc_object_type, \"self\", &chain);\n \n   /* struct _objc_class *super_class; */\n-  field_decl = create_field_decl (build_pointer_type (objc_class_template),\n-\t\t\t\t  \"super_class\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (build_pointer_type (objc_class_template),\n+\t\t  \"super_class\", &chain);\n \n-  objc_finish_struct (objc_super_template, field_decl_chain);\n+  objc_finish_struct (objc_super_template, decls);\n }\n \n /* struct _objc_ivar {\n@@ -5127,24 +5062,21 @@ static tree\n build_ivar_template (void)\n {\n   tree objc_ivar_id, objc_ivar_record;\n-  tree field_decl, field_decl_chain;\n+  tree decls, *chain = NULL;\n \n   objc_ivar_id = get_identifier (UTAG_IVAR);\n   objc_ivar_record = objc_start_struct (objc_ivar_id);\n \n   /* char *ivar_name; */\n-  field_decl = create_field_decl (string_type_node, \"ivar_name\");\n-  field_decl_chain = field_decl;\n+  decls = add_field_decl (string_type_node, \"ivar_name\", &chain);\n \n   /* char *ivar_type; */\n-  field_decl = create_field_decl (string_type_node, \"ivar_type\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (string_type_node, \"ivar_type\", &chain);\n \n   /* int ivar_offset; */\n-  field_decl = create_field_decl (integer_type_node, \"ivar_offset\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (integer_type_node, \"ivar_offset\", &chain);\n \n-  objc_finish_struct (objc_ivar_record, field_decl_chain);\n+  objc_finish_struct (objc_ivar_record, decls);\n \n   return objc_ivar_record;\n }\n@@ -5158,23 +5090,18 @@ static tree\n build_ivar_list_template (tree list_type, int size)\n {\n   tree objc_ivar_list_record;\n-  tree field_decl, field_decl_chain;\n+  tree array_type, decls, *chain = NULL;\n \n   objc_ivar_list_record = objc_start_struct (NULL_TREE);\n \n   /* int ivar_count; */\n-  field_decl = create_field_decl (integer_type_node, \"ivar_count\");\n-  field_decl_chain = field_decl;\n+  decls = add_field_decl (integer_type_node, \"ivar_count\", &chain);\n \n   /* struct objc_ivar ivar_list[]; */\n-  field_decl = create_field_decl (build_array_type\n-\t\t\t\t  (list_type,\n-\t\t\t\t   build_index_type\n-\t\t\t\t   (build_int_cst (NULL_TREE, size - 1))),\n-\t\t\t\t  \"ivar_list\");\n-  chainon (field_decl_chain, field_decl);\n+  array_type = build_sized_array_type (list_type, size);\n+  add_field_decl (array_type, \"ivar_list\", &chain);\n \n-  objc_finish_struct (objc_ivar_list_record, field_decl_chain);\n+  objc_finish_struct (objc_ivar_list_record, decls);\n \n   return objc_ivar_list_record;\n }\n@@ -5189,28 +5116,21 @@ static tree\n build_method_list_template (tree list_type, int size)\n {\n   tree objc_ivar_list_record;\n-  tree field_decl, field_decl_chain;\n+  tree array_type, decls, *chain = NULL;\n \n   objc_ivar_list_record = objc_start_struct (NULL_TREE);\n \n   /* struct _objc__method_prototype_list *method_next; */\n-  field_decl = create_field_decl (objc_method_proto_list_ptr,\n-\t\t\t\t  \"method_next\");\n-  field_decl_chain = field_decl;\n+  decls = add_field_decl (objc_method_proto_list_ptr, \"method_next\", &chain);\n \n   /* int method_count; */\n-  field_decl = create_field_decl (integer_type_node, \"method_count\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (integer_type_node, \"method_count\", &chain);\n \n   /* struct objc_method method_list[]; */\n-  field_decl = create_field_decl (build_array_type\n-\t\t\t\t  (list_type,\n-\t\t\t\t   build_index_type\n-\t\t\t\t   (build_int_cst (NULL_TREE, size - 1))),\n-\t\t\t\t  \"method_list\");\n-  chainon (field_decl_chain, field_decl);\n+  array_type = build_sized_array_type (list_type, size);\n+  add_field_decl (array_type, \"method_list\", &chain);\n \n-  objc_finish_struct (objc_ivar_list_record, field_decl_chain);\n+  objc_finish_struct (objc_ivar_list_record, decls);\n \n   return objc_ivar_list_record;\n }\n@@ -5386,24 +5306,20 @@ static tree\n build_method_template (void)\n {\n   tree _SLT_record;\n-  tree field_decl, field_decl_chain;\n+  tree decls, *chain = NULL;\n \n   _SLT_record = objc_start_struct (get_identifier (UTAG_METHOD));\n \n   /* SEL _cmd; */\n-  field_decl = create_field_decl (objc_selector_type, \"_cmd\");\n-  field_decl_chain = field_decl;\n+  decls = add_field_decl (objc_selector_type, \"_cmd\", &chain);\n \n   /* char *method_types; */\n-  field_decl = create_field_decl (string_type_node, \"method_types\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (string_type_node, \"method_types\", &chain);\n \n   /* void *_imp; */\n-  field_decl = create_field_decl (build_pointer_type (void_type_node),\n-\t\t\t\t  \"_imp\");\n-  chainon (field_decl_chain, field_decl);\n+  add_field_decl (build_pointer_type (void_type_node), \"_imp\", &chain);\n \n-  objc_finish_struct (_SLT_record, field_decl_chain);\n+  objc_finish_struct (_SLT_record, decls);\n \n   return _SLT_record;\n }\n@@ -5511,7 +5427,7 @@ generate_dispatch_tables (void)\n static tree\n generate_protocol_list (tree i_or_p)\n {\n-  tree refs_decl, lproto, e, plist;\n+  tree array_type, ptype, refs_decl, lproto, e, plist;\n   int size = 0;\n   const char *ref_name;\n   VEC(constructor_elt,gc) *v = NULL;\n@@ -5559,11 +5475,9 @@ generate_protocol_list (tree i_or_p)\n   else\n     abort ();\n \n-  refs_decl = start_var_decl\n-\t      (build_array_type\n-\t       (build_pointer_type (objc_protocol_template),\n-\t\tbuild_index_type (build_int_cst (NULL_TREE, size + 2))),\n-\t       ref_name);\n+  ptype = build_pointer_type (objc_protocol_template);\n+  array_type = build_sized_array_type (ptype, size + 3);\n+  refs_decl = start_var_decl (array_type, ref_name);\n \n   finish_var_decl (refs_decl,\n                    objc_build_constructor (TREE_TYPE (refs_decl), v));\n@@ -9495,11 +9409,9 @@ generate_objc_image_info (void)\n     = ((flag_replace_objc_classes && imp_list ? 1 : 0)\n        | (flag_objc_gc ? 2 : 0));\n   VEC(constructor_elt,gc) *v = NULL;\n+  tree array_type = build_sized_array_type (integer_type_node, 2);\n \n-  decl = start_var_decl (build_array_type\n-\t\t\t (integer_type_node,\n-\t\t\t  build_index_type (build_int_cst (NULL_TREE, 2 - 1))),\n-\t\t\t \"_OBJC_IMAGE_INFO\");\n+  decl = start_var_decl (array_type, \"_OBJC_IMAGE_INFO\");\n \n   CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, 0));\n   CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, flags));"}]}