{"sha": "4c334e0e4ff05d3a7ca9ebb832428c446cd0ae8d", "node_id": "C_kwDOANBUbNoAKDRjMzM0ZTBlNGZmMDVkM2E3Y2E5ZWJiODMyNDI4YzQ0NmNkMGFlOGQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-09T15:42:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-06-09T15:42:31Z"}, "message": "c++: Fix up ICE on __builtin_shufflevector constexpr evaluation [PR105871]\n\nAs the following testcase shows, BIT_FIELD_REF result doesn't have to have\njust integral type, it can also have vector type.  And in that case\ncxx_eval_bit_field_ref just ICEs on it because it is unprepared for that\ncase, creates the initial value with build_int_cst (sure, that one could be\neasily replaced with build_zero_cst) and then expects it can through shifts,\nands and ors come up with the final value, but that doesn't work for\nvectors.\n\nWe already call fold_ternary if whole is a VECTOR_CST, this patch does the\nsame if the result doesn't have integral type.  And, there is no guarantee\nfold_ternary will succeed and the callers certainly don't expect NULL\nbeing returned, so it also diagnoses those as non-constant and returns\noriginal t in that case.\n\n2022-06-09  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/105871\n\t* constexpr.cc (cxx_eval_bit_field_ref): For BIT_FIELD_REF with\n\tnon-integral result type use fold_ternary too like for BIT_FIELD_REFs\n\tfrom VECTOR_CST.  If fold_ternary returns NULL, diagnose non-constant\n\texpression, set *non_constant_p and return t, instead of returning\n\tNULL.\n\n\t* g++.dg/pr105871.C: New test.", "tree": {"sha": "3ba894c246f00c0e29db3dad41431cbf14c6c2fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ba894c246f00c0e29db3dad41431cbf14c6c2fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c334e0e4ff05d3a7ca9ebb832428c446cd0ae8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c334e0e4ff05d3a7ca9ebb832428c446cd0ae8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c334e0e4ff05d3a7ca9ebb832428c446cd0ae8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c334e0e4ff05d3a7ca9ebb832428c446cd0ae8d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "702a11ade2e87515a7dda1d1c028217bfe28e609", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/702a11ade2e87515a7dda1d1c028217bfe28e609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/702a11ade2e87515a7dda1d1c028217bfe28e609"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "fd7f8c0fb888573d91caf52687cb74e7f123163b", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c334e0e4ff05d3a7ca9ebb832428c446cd0ae8d/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c334e0e4ff05d3a7ca9ebb832428c446cd0ae8d/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=4c334e0e4ff05d3a7ca9ebb832428c446cd0ae8d", "patch": "@@ -4198,9 +4198,16 @@ cxx_eval_bit_field_ref (const constexpr_ctx *ctx, tree t,\n   if (*non_constant_p)\n     return t;\n \n-  if (TREE_CODE (whole) == VECTOR_CST)\n-    return fold_ternary (BIT_FIELD_REF, TREE_TYPE (t), whole,\n-\t\t\t TREE_OPERAND (t, 1), TREE_OPERAND (t, 2));\n+  if (TREE_CODE (whole) == VECTOR_CST || !INTEGRAL_TYPE_P (TREE_TYPE (t)))\n+    {\n+      if (tree r = fold_ternary (BIT_FIELD_REF, TREE_TYPE (t), whole,\n+\t\t\t\t TREE_OPERAND (t, 1), TREE_OPERAND (t, 2)))\n+\treturn r;\n+      if (!ctx->quiet)\n+\terror (\"%qE is not a constant expression\", orig_whole);\n+      *non_constant_p = true;\n+      return t;\n+    }\n \n   start = TREE_OPERAND (t, 2);\n   istart = tree_to_shwi (start);"}, {"sha": "3623c1d1366369c8962e519f5902915d1780f7ec", "filename": "gcc/testsuite/g++.dg/pr105871.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c334e0e4ff05d3a7ca9ebb832428c446cd0ae8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr105871.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c334e0e4ff05d3a7ca9ebb832428c446cd0ae8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr105871.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr105871.C?ref=4c334e0e4ff05d3a7ca9ebb832428c446cd0ae8d", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/105871\n+// { dg-do compile }\n+// { dg-options \"-Wno-psabi\" }\n+\n+typedef __attribute__((__vector_size__ ( 1))) unsigned char U;\n+typedef __attribute__((__vector_size__ (16))) unsigned char V;\n+\n+U\n+foo (void)\n+{\n+  return __builtin_shufflevector ((U){}, (V){}, 0);\n+}"}]}