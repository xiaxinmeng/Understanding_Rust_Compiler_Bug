{"sha": "5720c450fab749664b32dbcd14d0a66f8ba57e5f", "node_id": "C_kwDOANBUbNoAKDU3MjBjNDUwZmFiNzQ5NjY0YjMyZGJjZDE0ZDBhNjZmOGJhNTdlNWY", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-10-25T09:00:46Z"}, "committer": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-10-28T01:51:00Z"}, "message": "AVX512FP16: Optimize _Float16 reciprocal for div and sqrt\n\nFor _Float16 type, add insn and expanders to optimize x / y to\nx * rcp (y), and x / sqrt (y) to x * rsqrt (y).\nAs Half float only have minor precision difference between div and\nmul * rcp, there is no need for Newton-Rhapson approximation.\n\ngcc/ChangeLog:\n\n\t* config/i386/i386.c (use_rsqrt_p): Add mode parameter, enable\n\t  HFmode rsqrt without TARGET_SSE_MATH.\n\t(ix86_optab_supported_p): Refactor rint, adjust floor, ceil,\n\tbtrunc condition to be restricted by -ftrapping-math, adjust\n\tuse_rsqrt_p function call.\n\t* config/i386/i386.md (rcphf2): New define_insn.\n\t(rsqrthf2): Likewise.\n\t* config/i386/sse.md (div<mode>3): Change VF2H to VF2.\n\t(div<mode>3): New expander for HF mode.\n\t(rsqrt<mode>2): Likewise.\n\t(*avx512fp16_vmrcpv8hf2): New define_insn for rpad pass.\n\t(*avx512fp16_vmrsqrtv8hf2): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-recip-1.c: New test.\n\t* gcc.target/i386/avx512fp16-recip-2.c: Ditto.\n\t* gcc.target/i386/pr102464.c: Add -fno-trapping-math.", "tree": {"sha": "e8a0e1d2079122f76df5dc6142558b3f7b3d5c49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8a0e1d2079122f76df5dc6142558b3f7b3d5c49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5720c450fab749664b32dbcd14d0a66f8ba57e5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5720c450fab749664b32dbcd14d0a66f8ba57e5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5720c450fab749664b32dbcd14d0a66f8ba57e5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5720c450fab749664b32dbcd14d0a66f8ba57e5f/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04a2cf3fd65c21e9099edea462c22446fa72d398", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a2cf3fd65c21e9099edea462c22446fa72d398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a2cf3fd65c21e9099edea462c22446fa72d398"}], "stats": {"total": 278, "additions": 258, "deletions": 20}, "files": [{"sha": "c5789365d3bba1f9713c19c83cb8a6a84d2e72d0", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720c450fab749664b32dbcd14d0a66f8ba57e5f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720c450fab749664b32dbcd14d0a66f8ba57e5f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5720c450fab749664b32dbcd14d0a66f8ba57e5f", "patch": "@@ -18905,9 +18905,10 @@ ix86_vectorize_builtin_scatter (const_tree vectype,\n    1.0/sqrt.  */\n \n static bool\n-use_rsqrt_p ()\n+use_rsqrt_p (machine_mode mode)\n {\n-  return (TARGET_SSE && TARGET_SSE_MATH\n+  return ((mode == HFmode\n+\t   || (TARGET_SSE && TARGET_SSE_MATH))\n \t  && flag_finite_math_only\n \t  && !flag_trapping_math\n \t  && flag_unsafe_math_optimizations);\n@@ -23603,29 +23604,27 @@ ix86_optab_supported_p (int op, machine_mode mode1, machine_mode,\n       return opt_type == OPTIMIZE_FOR_SPEED;\n \n     case rint_optab:\n-      if (mode1 == HFmode)\n-\treturn true;\n-      else if (SSE_FLOAT_MODE_P (mode1)\n-\t       && TARGET_SSE_MATH\n-\t       && !flag_trapping_math\n-\t       && !TARGET_SSE4_1)\n+      if (SSE_FLOAT_MODE_P (mode1)\n+\t  && TARGET_SSE_MATH\n+\t  && !flag_trapping_math\n+\t  && !TARGET_SSE4_1\n+\t  && mode1 != HFmode)\n \treturn opt_type == OPTIMIZE_FOR_SPEED;\n       return true;\n \n     case floor_optab:\n     case ceil_optab:\n     case btrunc_optab:\n-      if (mode1 == HFmode)\n-\treturn true;\n-      else if (SSE_FLOAT_MODE_P (mode1)\n-\t       && TARGET_SSE_MATH\n-\t       && !flag_trapping_math\n-\t       && TARGET_SSE4_1)\n+      if (((SSE_FLOAT_MODE_P (mode1)\n+\t    && TARGET_SSE_MATH\n+\t    && TARGET_SSE4_1)\n+\t   || mode1 == HFmode)\n+\t  && !flag_trapping_math)\n \treturn true;\n       return opt_type == OPTIMIZE_FOR_SPEED;\n \n     case rsqrt_optab:\n-      return opt_type == OPTIMIZE_FOR_SPEED && use_rsqrt_p ();\n+      return opt_type == OPTIMIZE_FOR_SPEED && use_rsqrt_p (mode1);\n \n     default:\n       return true;"}, {"sha": "11535df5425192f182c1bc47651643cff9ea0c2d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720c450fab749664b32dbcd14d0a66f8ba57e5f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720c450fab749664b32dbcd14d0a66f8ba57e5f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=5720c450fab749664b32dbcd14d0a66f8ba57e5f", "patch": "@@ -8417,11 +8417,27 @@\n \t\t(match_operand:XF 2 \"register_operand\")))]\n   \"TARGET_80387\")\n \n+/* There is no more precision loss than Newton-Rhapson approximation\n+  when using HFmode rcp/rsqrt, so do the transformation directly under\n+  TARGET_RECIP_DIV and fast-math.  */\n (define_expand \"divhf3\"\n   [(set (match_operand:HF 0 \"register_operand\")\n \t(div:HF (match_operand:HF 1 \"register_operand\")\n \t\t   (match_operand:HF 2 \"nonimmediate_operand\")))]\n-  \"TARGET_AVX512FP16\")\n+  \"TARGET_AVX512FP16\"\n+{\n+  if (TARGET_RECIP_DIV\n+      && optimize_insn_for_speed_p ()\n+      && flag_finite_math_only && !flag_trapping_math\n+      && flag_unsafe_math_optimizations)\n+    {\n+      rtx op = gen_reg_rtx (HFmode);\n+      operands[2] = force_reg (HFmode, operands[2]);\n+      emit_insn (gen_rcphf2 (op, operands[2]));\n+      emit_insn (gen_mulhf3 (operands[0], operands[1], op));\n+      DONE;\n+    }\n+})\n \n (define_expand \"div<mode>3\"\n   [(set (match_operand:MODEF 0 \"register_operand\")\n@@ -16973,6 +16989,19 @@\n \t    ]\n \t    (symbol_ref \"true\")))])\n \n+(define_insn \"rcphf2\"\n+  [(set (match_operand:HF 0 \"register_operand\" \"=v,v\")\n+\t(unspec:HF [(match_operand:HF 1 \"nonimmediate_operand\" \"v,m\")]\n+\t\t   UNSPEC_RCP))]\n+  \"TARGET_AVX512FP16\"\n+  \"@\n+   vrcpsh\\t{%d1, %0|%0, %d1}\n+   vrcpsh\\t{%1, %d0|%d0, %1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"HF\")\n+   (set_attr \"avx_partial_xmm_update\" \"false,true\")])\n+\n (define_insn \"*fop_xf_1_i387\"\n   [(set (match_operand:XF 0 \"register_operand\" \"=f,f\")\n \t(match_operator:XF 3 \"binary_fp_operator\"\n@@ -17230,6 +17259,19 @@\n   DONE;\n })\n \n+(define_insn \"rsqrthf2\"\n+  [(set (match_operand:HF 0 \"register_operand\" \"=v,v\")\n+\t(unspec:HF [(match_operand:HF 1 \"nonimmediate_operand\" \"v,m\")]\n+\t\t   UNSPEC_RSQRT))]\n+  \"TARGET_AVX512FP16\"\n+  \"@\n+   vrsqrtsh\\t{%d1, %0|%0, %d1}\n+   vrsqrtsh\\t{%1, %d0|%d0, %1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"avx_partial_xmm_update\" \"false,true\")\n+   (set_attr \"mode\" \"HF\")])\n+\n (define_insn \"sqrthf2\"\n   [(set (match_operand:HF 0 \"register_operand\" \"=v,v\")\n \t(sqrt:HF"}, {"sha": "4685ac9a1cd9b1530289a454ffc7e4e61edf9e42", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 60, "deletions": 3, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720c450fab749664b32dbcd14d0a66f8ba57e5f/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720c450fab749664b32dbcd14d0a66f8ba57e5f/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=5720c450fab749664b32dbcd14d0a66f8ba57e5f", "patch": "@@ -2306,11 +2306,33 @@\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n (define_expand \"div<mode>3\"\n-  [(set (match_operand:VF2H 0 \"register_operand\")\n-\t(div:VF2H (match_operand:VF2H 1 \"register_operand\")\n-\t\t  (match_operand:VF2H 2 \"vector_operand\")))]\n+  [(set (match_operand:VF2 0 \"register_operand\")\n+\t(div:VF2 (match_operand:VF2 1 \"register_operand\")\n+\t\t  (match_operand:VF2 2 \"vector_operand\")))]\n   \"TARGET_SSE2\")\n \n+(define_expand \"div<mode>3\"\n+  [(set (match_operand:VF_AVX512FP16VL 0 \"register_operand\")\n+\t(div:VF_AVX512FP16VL\n+\t  (match_operand:VF_AVX512FP16VL 1 \"register_operand\")\n+\t  (match_operand:VF_AVX512FP16VL 2 \"vector_operand\")))]\n+  \"TARGET_AVX512FP16\"\n+{\n+  /* Transform HF vector div to vector mul/rcp.  */\n+  if (GET_MODE_INNER (<MODE>mode) == HFmode\n+      && TARGET_RECIP_VEC_DIV\n+      && optimize_insn_for_speed_p ()\n+      && flag_finite_math_only && !flag_trapping_math\n+      && flag_unsafe_math_optimizations)\n+    {\n+      rtx op = gen_reg_rtx (<MODE>mode);\n+      operands[2] = force_reg (<MODE>mode, operands[2]);\n+      emit_insn (gen_avx512fp16_rcp<mode>2 (op, operands[2]));\n+      emit_insn (gen_mul<mode>3 (operands[0], operands[1], op));\n+      DONE;\n+    }\n+})\n+\n (define_expand \"div<mode>3\"\n   [(set (match_operand:VF1 0 \"register_operand\")\n \t(div:VF1 (match_operand:VF1 1 \"register_operand\")\n@@ -2433,6 +2455,20 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"HF\")])\n \n+(define_insn \"*avx512fp16_vmrcpv8hf2\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_merge:V8HF\n+\t  (vec_duplicate:V8HF\n+\t    (unspec:HF [(match_operand:HF 1 \"nonimmediate_operand\" \"vm\")]\n+\t\t\t UNSPEC_RCP))\n+\t  (match_operand:V8HF 2 \"register_operand\" \"v\")\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512FP16\"\n+  \"vrcpsh\\t{%1, %2, %0|%0, %2, %w1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"HF\")])\n+\n (define_insn \"<mask_codefor>rcp14<mode><mask_name>\"\n   [(set (match_operand:VF_AVX512VL 0 \"register_operand\" \"=v\")\n \t(unspec:VF_AVX512VL\n@@ -2558,6 +2594,13 @@\n   DONE;\n })\n \n+(define_expand \"rsqrt<mode>2\"\n+  [(set (match_operand:VF_AVX512FP16VL 0 \"register_operand\")\n+\t(unspec:VF_AVX512FP16VL\n+\t  [(match_operand:VF_AVX512FP16VL 1 \"vector_operand\")]\n+\t  UNSPEC_RSQRT))]\n+  \"TARGET_AVX512FP16\")\n+\n (define_insn \"<sse>_rsqrt<mode>2\"\n   [(set (match_operand:VF1_128_256 0 \"register_operand\" \"=x\")\n \t(unspec:VF1_128_256\n@@ -2666,6 +2709,20 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"HF\")])\n \n+(define_insn \"*avx512fp16_vmrsqrtv8hf2\"\n+  [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n+\t(vec_merge:V8HF\n+\t  (vec_duplicate:V8HF\n+\t    (unspec:HF [(match_operand:HF 1 \"nonimmediate_operand\" \"vm\")]\n+\t\t       UNSPEC_RSQRT))\n+\t  (match_operand:V8HF 2 \"register_operand\" \"v\")\n+\t  (const_int 1)))]\n+  \"TARGET_AVX512FP16\"\n+  \"vrsqrtsh\\t{%1, %2, %0<mask_scalar_operand3>|%0<mask_scalar_operand3>, %2, %w1}\"\n+  [(set_attr \"type\" \"sse\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"HF\")])\n+\n (define_expand \"cond_<code><mode>\"\n   [(set (match_operand:VFH 0 \"register_operand\")\n \t(vec_merge:VFH"}, {"sha": "bc7cbbc11b9b69699b34acd4f71c885cbd51bc10", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-recip-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720c450fab749664b32dbcd14d0a66f8ba57e5f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-recip-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720c450fab749664b32dbcd14d0a66f8ba57e5f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-recip-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-recip-1.c?ref=5720c450fab749664b32dbcd14d0a66f8ba57e5f", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -mavx512fp16 -mavx512vl -ffast-math\" } */\n+/* { dg-final { scan-assembler \"vrcpsh.*\\n.*vmulsh\" } } */\n+/* { dg-final { scan-assembler \"vrcpph.*\\n.*vmulph\" } } */\n+/* { dg-final { scan-assembler \"vrsqrtsh.*\\n.*vmulsh\" } } */\n+/* { dg-final { scan-assembler \"vrsqrtph.*\\n.*vmulph\" } } */\n+/* { dg-final { scan-assembler-not \"vsqrtsh\" } } */\n+/* { dg-final { scan-assembler-not \"vsqrtph\" } } */\n+/* { dg-final { scan-assembler-not \"vdivsh\" } } */\n+/* { dg-final { scan-assembler-not \"vdivph\" } } */\n+\n+#define FAST_ATTR \\\n+  __attribute__((noinline, noclone, optimize(\"fast-math\"), target(\"recip\")))\n+\n+_Float16 FAST_ATTR\n+scalar_hf_rcp_fast (_Float16 a, _Float16 b)\n+{\n+  return a / b;\n+}\n+\n+_Float16 FAST_ATTR\n+scalar_hf_rsqrt_fast (_Float16 a, _Float16 b)\n+{\n+  return a / __builtin_sqrtf16 (b);\n+}\n+\n+void FAST_ATTR\n+vector_hf_rcp_fast (_Float16 * restrict a, _Float16 * restrict b,\n+\t\t    _Float16 * restrict c, int n)\n+{\n+  int i;\n+  for (i = 0; i < n; i++)\n+    c[i] = a[i] / b[i];\n+}\n+\n+void FAST_ATTR\n+vector_hf_rsqrt_fast (_Float16 * restrict a, _Float16 * restrict b,\n+\t\t    _Float16 * restrict c, int n)\n+{\n+  int i;\n+  for (i = 0; i < n; i++)\n+    c[i] = a[i] / __builtin_sqrtf16(b[i]);\n+}"}, {"sha": "ed7e0a2225fb7fc23fca527337087beb86d8c916", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-recip-2.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720c450fab749664b32dbcd14d0a66f8ba57e5f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-recip-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720c450fab749664b32dbcd14d0a66f8ba57e5f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-recip-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-recip-2.c?ref=5720c450fab749664b32dbcd14d0a66f8ba57e5f", "patch": "@@ -0,0 +1,97 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O3 -mavx512fp16 -mavx512vl -ffast-math\" } */\n+\n+static void recip_op_test (void);\n+#define DO_TEST recip_op_test\n+#define AVX512FP16\n+#define AVX512VL\n+#include \"avx512f-check.h\"\n+#include \"avx512fp16-recip-1.c\"\n+\n+_Float16 a[32], b[32], vexp[32], vref[32], sa, sb, sexp, sref;\n+\n+#define NO_FAST_ATTR  \\\n+  __attribute__((noinline, noclone, \\\n+\t\t optimize(\"fast-math,trapping-math\")))\n+\n+_Float16 NO_FAST_ATTR\n+scalar_hf_rcp_no_fast (_Float16 a, _Float16 b)\n+{\n+  return a / b;\n+}\n+\n+_Float16 NO_FAST_ATTR\n+scalar_hf_rsqrt_no_fast (_Float16 a, _Float16 b)\n+{\n+  return a / __builtin_sqrtf16 (b);\n+}\n+\n+void NO_FAST_ATTR\n+vector_hf_rcp_no_fast (_Float16 * restrict a, _Float16 * restrict b,\n+\t\t    _Float16 * restrict c, int n)\n+{\n+  int i;\n+  for (i = 0; i < n; i++)\n+    c[i] = a[i] / b[i];\n+}\n+\n+void NO_FAST_ATTR\n+vector_hf_rsqrt_no_fast (_Float16 * restrict a, _Float16 * restrict b,\n+\t\t    _Float16 * restrict c, int n)\n+{\n+  int i;\n+  for (i = 0; i < n; i++)\n+    c[i] = a[i] / __builtin_sqrtf16 (b[i]);\n+}\n+\n+void init()\n+{\n+  int i;\n+  sa = 3.75;\n+  sb = 6.25;\n+  sexp = sref = 2.75;\n+  for (i = 0; i < 32; i++)\n+    {\n+      a[i] = i + 0.5; \n+      b[i] = i * 1.5;\n+      vexp[i] = vref[i] = 2.75 * i;\n+    }\n+}\n+\n+int check_cond(void *a, void *b, int size)\n+{\n+  int i;\n+  unsigned short *pa = (unsigned short *)a,\n+\t\t *pb = (unsigned short *)b;\n+  for (i = 0; i < size; i++)\n+    if (pa[i] != pb[i])\n+      return 0;\n+  return 1;\n+}\n+\n+static void recip_op_test()\n+{\n+  init ();\n+  sexp = scalar_hf_rcp_fast (sa, sb);\n+  sref = scalar_hf_rcp_no_fast (sa, sb);\n+  if (!check_cond (&sexp, &sref, 1))\n+    abort ();\n+\n+  init ();\n+  sexp = scalar_hf_rsqrt_fast (sa, sb);\n+  sref = scalar_hf_rsqrt_no_fast (sa, sb);\n+  if (!check_cond (&sexp, &sref, 1))\n+    abort ();\n+\n+  init ();\n+  vector_hf_rcp_fast (a, b, vexp, 32);\n+  vector_hf_rcp_no_fast (a, b, vref, 32);\n+  if (!check_cond (vexp, vref, 1))\n+    abort ();\n+\n+  init ();\n+  vector_hf_rsqrt_fast (a, b, vexp, 32);\n+  vector_hf_rsqrt_no_fast (a, b, vref, 32);\n+  if (!check_cond (vexp, vref, 1))\n+    abort ();\n+}"}, {"sha": "7e1fbdccf02aa60edbb3353739fd262a26c7169b", "filename": "gcc/testsuite/gcc.target/i386/pr102464.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5720c450fab749664b32dbcd14d0a66f8ba57e5f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102464.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5720c450fab749664b32dbcd14d0a66f8ba57e5f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102464.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr102464.c?ref=5720c450fab749664b32dbcd14d0a66f8ba57e5f", "patch": "@@ -1,6 +1,6 @@\n /* PR target/102464.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -mavx512fp16\" } */\n+/* { dg-options \"-O2 -mavx512fp16 -fno-trapping-math\" } */\n \n #define FOO(FUNC,SUFFIX)                       \\\n   _Float16                                     \\"}]}