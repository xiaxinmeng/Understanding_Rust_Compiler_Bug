{"sha": "75f758a703924184fc07b01a138bb6f0028d077c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVmNzU4YTcwMzkyNDE4NGZjMDdiMDFhMTM4YmI2ZjAwMjhkMDc3Yw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-04-29T08:19:55Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-04-29T08:36:00Z"}, "message": "d: Merge bug fix from upstream dmd 06160ccae\n\nAdds classKind information to the front-end AST, which in turn allows us\nto fix code generation of type names for extern(C) and extern(C++)\nstructs and classes.  Inspecting such types inside a debugger now just\nworks without the need to 'cast(module_name.cxx_type)'.\n\ngcc/d/ChangeLog:\n\n\t* d-codegen.cc (d_decl_context): Don't include module in the name of\n\tclass and struct types that aren't extern(D).", "tree": {"sha": "9b90b2c92161b246f7acd4494c5b1a2a3e4f1d09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b90b2c92161b246f7acd4494c5b1a2a3e4f1d09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75f758a703924184fc07b01a138bb6f0028d077c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75f758a703924184fc07b01a138bb6f0028d077c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75f758a703924184fc07b01a138bb6f0028d077c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75f758a703924184fc07b01a138bb6f0028d077c/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d81bc2af7d2700888e414eb5a322ff5f5b0df0bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d81bc2af7d2700888e414eb5a322ff5f5b0df0bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d81bc2af7d2700888e414eb5a322ff5f5b0df0bb"}], "stats": {"total": 114, "additions": 87, "deletions": 27}, "files": [{"sha": "9550a6d581f2e78c012bb42b53ebdf231c654eb3", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=75f758a703924184fc07b01a138bb6f0028d077c", "patch": "@@ -1,3 +1,8 @@\n+2020-04-29  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-codegen.cc (d_decl_context): Don't include module in the name of\n+\tclass and struct types that aren't extern(D).\n+\n 2020-04-27  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/94777"}, {"sha": "b4927a2de10503c80f7c5fa385eb22ad436e8350", "filename": "gcc/d/d-codegen.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Fd%2Fd-codegen.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Fd%2Fd-codegen.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-codegen.cc?ref=75f758a703924184fc07b01a138bb6f0028d077c", "patch": "@@ -66,6 +66,7 @@ d_decl_context (Dsymbol *dsym)\n {\n   Dsymbol *parent = dsym;\n   Declaration *decl = dsym->isDeclaration ();\n+  AggregateDeclaration *ad = dsym->isAggregateDeclaration ();\n \n   while ((parent = parent->toParent2 ()))\n     {\n@@ -74,7 +75,8 @@ d_decl_context (Dsymbol *dsym)\n \t but only for extern(D) symbols.  */\n       if (parent->isModule ())\n \t{\n-\t  if (decl != NULL && decl->linkage != LINKd)\n+\t  if ((decl != NULL && decl->linkage != LINKd)\n+\t      || (ad != NULL && ad->classKind != ClassKind::d))\n \t    return NULL_TREE;\n \n \t  return build_import_decl (parent);"}, {"sha": "a2699d39842c86b4b355d2995be42816eebd16b2", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=75f758a703924184fc07b01a138bb6f0028d077c", "patch": "@@ -1,4 +1,4 @@\n-f8a1a515346b16ebbd9da56a908540cbef1ee582\n+06160ccaed7af7955d169024f417c43beb7a8f9f\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "da4a039852258e7d7d674780071fabfcc1cbdb1f", "filename": "gcc/d/dmd/aggregate.h", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Fd%2Fdmd%2Faggregate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Fd%2Fdmd%2Faggregate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Faggregate.h?ref=75f758a703924184fc07b01a138bb6f0028d077c", "patch": "@@ -71,6 +71,19 @@ FuncDeclaration *buildDtor(AggregateDeclaration *ad, Scope *sc);\n FuncDeclaration *buildInv(AggregateDeclaration *ad, Scope *sc);\n FuncDeclaration *search_toString(StructDeclaration *sd);\n \n+struct ClassKind\n+{\n+    enum Type\n+    {\n+        /// the class is a d(efault) class\n+        d,\n+        /// the class is a C++ interface\n+        cpp,\n+        /// the class is an Objective-C class/interface\n+        objc,\n+    };\n+};\n+\n class AggregateDeclaration : public ScopeDsymbol\n {\n public:\n@@ -84,6 +97,8 @@ class AggregateDeclaration : public ScopeDsymbol\n     Dsymbol *deferred;          // any deferred semantic2() or semantic3() symbol\n     bool isdeprecated;          // true if deprecated\n \n+    ClassKind::Type classKind;  // specifies the linkage type\n+\n     /* !=NULL if is nested\n      * pointing to the dsymbol that directly enclosing it.\n      * 1. The function that enclosing it (nested struct and class)\n@@ -274,8 +289,6 @@ class ClassDeclaration : public AggregateDeclaration\n \n     TypeInfoClassDeclaration *vclassinfo;       // the ClassInfo object for this ClassDeclaration\n     bool com;                           // true if this is a COM class (meaning it derives from IUnknown)\n-    bool cpp;                           // true if this is a C++ interface\n-    bool isobjc;                        // true if this is an Objective-C class/interface\n     bool isscope;                       // true if this is a scope class\n     Abstract isabstract;                // 0: fwdref, 1: is abstract class, 2: not abstract\n     int inuse;                          // to prevent recursive attempts"}, {"sha": "a2009a604a56bd8f7eaa4a84cff80fc6da0ec7f4", "filename": "gcc/d/dmd/dclass.c", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Fd%2Fdmd%2Fdclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Fd%2Fdmd%2Fdclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdclass.c?ref=75f758a703924184fc07b01a138bb6f0028d077c", "patch": "@@ -240,12 +240,10 @@ ClassDeclaration::ClassDeclaration(Loc loc, Identifier *id, BaseClasses *basecla\n     }\n \n     com = false;\n-    cpp = false;\n     isscope = false;\n     isabstract = ABSfwdref;\n     inuse = 0;\n     baseok = BASEOKnone;\n-    isobjc = false;\n     cpp_type_info_ptr_sym = NULL;\n }\n \n@@ -389,7 +387,7 @@ void ClassDeclaration::semantic(Scope *sc)\n         userAttribDecl = sc->userAttribDecl;\n \n         if (sc->linkage == LINKcpp)\n-            cpp = true;\n+            classKind = ClassKind::cpp;\n         if (sc->linkage == LINKobjc)\n             objc()->setObjc(this);\n     }\n@@ -555,7 +553,7 @@ void ClassDeclaration::semantic(Scope *sc)\n         baseok = BASEOKdone;\n \n         // If no base class, and this is not an Object, use Object as base class\n-        if (!baseClass && ident != Id::Object && !cpp)\n+        if (!baseClass && ident != Id::Object && !isCPPclass())\n         {\n             if (!object || object->errors)\n                 badObjectDotD(this);\n@@ -583,7 +581,7 @@ void ClassDeclaration::semantic(Scope *sc)\n             if (baseClass->isCOMclass())\n                 com = true;\n             if (baseClass->isCPPclass())\n-                cpp = true;\n+                classKind = ClassKind::cpp;\n             if (baseClass->isscope)\n                 isscope = true;\n             enclosing = baseClass->enclosing;\n@@ -600,7 +598,7 @@ void ClassDeclaration::semantic(Scope *sc)\n             // then this is a COM interface too.\n             if (b->sym->isCOMinterface())\n                 com = true;\n-            if (cpp && !b->sym->isCPPinterface())\n+            if (isCPPclass() && !b->sym->isCPPinterface())\n             {\n                 ::error(loc, \"C++ class '%s' cannot implement D interface '%s'\",\n                     toPrettyChars(), b->sym->toPrettyChars());\n@@ -675,7 +673,7 @@ void ClassDeclaration::semantic(Scope *sc)\n         // initialize vtbl\n         if (baseClass)\n         {\n-            if (cpp && baseClass->vtbl.dim == 0)\n+            if (isCPPclass() && baseClass->vtbl.dim == 0)\n             {\n                 error(\"C++ base class %s needs at least one virtual function\", baseClass->toChars());\n             }\n@@ -1087,7 +1085,7 @@ void ClassDeclaration::finalizeSize()\n \n         alignsize = baseClass->alignsize;\n         structsize = baseClass->structsize;\n-        if (cpp && global.params.isWindows)\n+        if (isCPPclass() && global.params.isWindows)\n             structsize = (structsize + alignsize - 1) & ~(alignsize - 1);\n     }\n     else if (isInterfaceDeclaration())\n@@ -1102,7 +1100,7 @@ void ClassDeclaration::finalizeSize()\n     {\n         alignsize = Target::ptrsize;\n         structsize = Target::ptrsize;      // allow room for __vptr\n-        if (!cpp)\n+        if (!isCPPclass())\n             structsize += Target::ptrsize; // allow room for __monitor\n     }\n \n@@ -1299,7 +1297,7 @@ bool ClassDeclaration::isCOMinterface() const\n \n bool ClassDeclaration::isCPPclass() const\n {\n-    return cpp;\n+    return classKind == ClassKind::cpp;\n }\n \n bool ClassDeclaration::isCPPinterface() const\n@@ -1378,7 +1376,7 @@ bool ClassDeclaration::isAbstract()\n \n int ClassDeclaration::vtblOffset() const\n {\n-    return cpp ? 0 : 1;\n+    return classKind == ClassKind::cpp ? 0 : 1;\n }\n \n /****************************************\n@@ -1405,7 +1403,7 @@ InterfaceDeclaration::InterfaceDeclaration(Loc loc, Identifier *id, BaseClasses\n     if (id == Id::IUnknown)     // IUnknown is the root of all COM interfaces\n     {\n         com = true;\n-        cpp = true;             // IUnknown is also a C++ interface\n+        classKind = ClassKind::cpp; // IUnknown is also a C++ interface\n     }\n }\n \n@@ -1422,9 +1420,9 @@ Scope *InterfaceDeclaration::newScope(Scope *sc)\n     Scope *sc2 = ClassDeclaration::newScope(sc);\n     if (com)\n         sc2->linkage = LINKwindows;\n-    else if (cpp)\n+    else if (classKind == ClassKind::cpp)\n         sc2->linkage = LINKcpp;\n-    else if (isobjc)\n+    else if (classKind == ClassKind::objc)\n         sc2->linkage = LINKobjc;\n     return sc2;\n }\n@@ -1523,7 +1521,7 @@ void InterfaceDeclaration::semantic(Scope *sc)\n         }\n \n         if (!baseclasses->dim && sc->linkage == LINKcpp)\n-            cpp = true;\n+            classKind = ClassKind::cpp;\n         if (sc->linkage == LINKobjc)\n             objc()->setObjc(this);\n \n@@ -1605,7 +1603,7 @@ void InterfaceDeclaration::semantic(Scope *sc)\n             if (b->sym->isCOMinterface())\n                 com = true;\n             if (b->sym->isCPPinterface())\n-                cpp = true;\n+                classKind = ClassKind::cpp;\n         }\n \n         interfaceSemantic(sc);\n@@ -1817,7 +1815,7 @@ bool InterfaceDeclaration::isCOMinterface() const\n \n bool InterfaceDeclaration::isCPPinterface() const\n {\n-    return cpp;\n+    return classKind == ClassKind::cpp;\n }\n \n /*******************************************"}, {"sha": "2ad6af2d4104bc5fbc9236d5d46c0683bf7584be", "filename": "gcc/d/dmd/declaration.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Fd%2Fdmd%2Fdeclaration.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Fd%2Fdmd%2Fdeclaration.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdeclaration.c?ref=75f758a703924184fc07b01a138bb6f0028d077c", "patch": "@@ -2174,7 +2174,7 @@ Expression *VarDeclaration::callScopeDtor(Scope *)\n \n             // Destroying C++ scope classes crashes currently. Since C++ class dtors are not currently supported, simply do not run dtors for them.\n             // See https://issues.dlang.org/show_bug.cgi?id=13182\n-            if (cd->cpp)\n+            if (cd->isCPPclass())\n             {\n                 break;\n             }"}, {"sha": "0a33cc23935595826d55945630491e6c569d9ece", "filename": "gcc/d/dmd/dstruct.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Fd%2Fdmd%2Fdstruct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Fd%2Fdmd%2Fdstruct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdstruct.c?ref=75f758a703924184fc07b01a138bb6f0028d077c", "patch": "@@ -194,6 +194,7 @@ AggregateDeclaration::AggregateDeclaration(Loc loc, Identifier *id)\n     sizeok = SIZEOKnone;        // size not determined yet\n     deferred = NULL;\n     isdeprecated = false;\n+    classKind = ClassKind::d;\n     inv = NULL;\n     aggNew = NULL;\n     aggDelete = NULL;\n@@ -1071,6 +1072,9 @@ void StructDeclaration::semantic(Scope *sc)\n         if (storage_class & STCabstract)\n             error(\"structs, unions cannot be abstract\");\n         userAttribDecl = sc->userAttribDecl;\n+\n+        if (sc->linkage == LINKcpp)\n+            classKind = ClassKind::cpp;\n     }\n     else if (symtab && !scx)\n     {"}, {"sha": "621405eef3e27bf55612d69380ad6cd89b62d819", "filename": "gcc/d/dmd/func.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Fd%2Fdmd%2Ffunc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Fd%2Fdmd%2Ffunc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ffunc.c?ref=75f758a703924184fc07b01a138bb6f0028d077c", "patch": "@@ -876,7 +876,7 @@ void FuncDeclaration::semantic(Scope *sc)\n \n                 /* These quirky conditions mimic what VC++ appears to do\n                  */\n-                if (global.params.mscoff && cd->cpp &&\n+                if (global.params.mscoff && cd->isCPPclass() &&\n                     cd->baseClass && cd->baseClass->vtbl.dim)\n                 {\n                     /* if overriding an interface function, then this is not\n@@ -902,7 +902,7 @@ void FuncDeclaration::semantic(Scope *sc)\n                 {\n                     //printf(\"\\tintroducing function %s\\n\", toChars());\n                     introducing = 1;\n-                    if (cd->cpp && Target::reverseCppOverloads)\n+                    if (cd->isCPPclass() && Target::reverseCppOverloads)\n                     {\n                         // with dmc, overloaded functions are grouped and in reverse order\n                         vtblIndex = (int)cd->vtbl.dim;"}, {"sha": "e1ff5e9913bab3d9c508cfb4faada7ac1886dfc7", "filename": "gcc/d/dmd/opover.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Fd%2Fdmd%2Fopover.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Fd%2Fdmd%2Fopover.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fopover.c?ref=75f758a703924184fc07b01a138bb6f0028d077c", "patch": "@@ -962,7 +962,7 @@ Expression *op_overload(Expression *e, Scope *sc)\n                 ClassDeclaration *cd1 = t1->isClassHandle();\n                 ClassDeclaration *cd2 = t2->isClassHandle();\n \n-                if (!(cd1->cpp || cd2->cpp))\n+                if (!(cd1->isCPPclass() || cd2->isCPPclass()))\n                 {\n                     /* Rewrite as:\n                      *      .object.opEquals(e1, e2)"}, {"sha": "535893feffbe95cb679ebca27ec9d3f5bc40c1b3", "filename": "gcc/d/dmd/traits.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Fd%2Fdmd%2Ftraits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Fd%2Fdmd%2Ftraits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Ftraits.c?ref=75f758a703924184fc07b01a138bb6f0028d077c", "patch": "@@ -1135,12 +1135,32 @@ Expression *semanticTraits(TraitsExp *e, Scope *sc)\n         {\n             Dsymbol *s = getDsymbol(o);\n             Declaration *d = NULL;\n-            if (!s || (d = s->isDeclaration()) == NULL)\n+            AggregateDeclaration *ad = NULL;\n+            if (!s || ((d = s->isDeclaration()) == NULL\n+                       && (ad = s->isAggregateDeclaration()) == NULL))\n             {\n                 e->error(\"argument to `__traits(getLinkage, %s)` is not a declaration\", o->toChars());\n                 return new ErrorExp();\n             }\n-            link = d->linkage;\n+            if (d != NULL)\n+                link = d->linkage;\n+            else\n+            {\n+                switch (ad->classKind)\n+                {\n+                    case ClassKind::d:\n+                        link = LINKd;\n+                        break;\n+                    case ClassKind::cpp:\n+                        link = LINKcpp;\n+                        break;\n+                    case ClassKind::objc:\n+                        link = LINKobjc;\n+                        break;\n+                    default:\n+                        assert(0);\n+                }\n+            }\n         }\n         const char *linkage = linkageToChars(link);\n         StringExp *se = new StringExp(e->loc, const_cast<char *>(linkage));"}, {"sha": "d67c5b96d5a983e38cc86c5cdb8f9b0b85fadce5", "filename": "gcc/testsuite/gdc.test/compilable/test17419.d", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17419.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75f758a703924184fc07b01a138bb6f0028d077c/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17419.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest17419.d?ref=75f758a703924184fc07b01a138bb6f0028d077c", "patch": "@@ -35,3 +35,21 @@ void bar()\n     void nested() { }\n     static assert(__traits(getLinkage, typeof(&nested)) == \"D\");\n }\n+\n+class FooD {}\n+interface FooDInterface {}\n+extern (C++) class FooCpp {}\n+extern (C++) struct FooCppStruct {}\n+extern (C++) interface FooCppInterface {}\n+\n+static assert(__traits(getLinkage, FooD) == \"D\");\n+static assert(__traits(getLinkage, FooDInterface) == \"D\");\n+static assert(__traits(getLinkage, FooCpp) == \"C++\");\n+static assert(__traits(getLinkage, FooCppStruct) == \"C++\");\n+static assert(__traits(getLinkage, FooCppInterface) == \"C++\");\n+\n+version (D_ObjectiveC)\n+{\n+    extern (Objective-C) interface FooObjC {}\n+    static assert(__traits(getLinkage, FooObjC) == \"Objective-C\");\n+}"}]}