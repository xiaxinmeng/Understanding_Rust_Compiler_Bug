{"sha": "9d3dd2185651c0a70919f6f3a35841cab68a81a6", "node_id": "C_kwDOANBUbNoAKDlkM2RkMjE4NTY1MWMwYTcwOTE5ZjZmM2EzNTg0MWNhYjY4YTgxYTY", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-28T00:16:58Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-06-28T00:16:58Z"}, "message": "Daily bump.", "tree": {"sha": "ca033db79714d038dc6ab55b848e23293a2fd9fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca033db79714d038dc6ab55b848e23293a2fd9fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d3dd2185651c0a70919f6f3a35841cab68a81a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d3dd2185651c0a70919f6f3a35841cab68a81a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d3dd2185651c0a70919f6f3a35841cab68a81a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d3dd2185651c0a70919f6f3a35841cab68a81a6/comments", "author": null, "committer": null, "parents": [{"sha": "3b21c21f3f5726823e19728fdd1571a14aae0fb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b21c21f3f5726823e19728fdd1571a14aae0fb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b21c21f3f5726823e19728fdd1571a14aae0fb3"}], "stats": {"total": 383, "additions": 382, "deletions": 1}, "files": [{"sha": "b96547a61193e7068ef81e603b869d5238b0c3b6", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3dd2185651c0a70919f6f3a35841cab68a81a6/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3dd2185651c0a70919f6f3a35841cab68a81a6/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=9d3dd2185651c0a70919f6f3a35841cab68a81a6", "patch": "@@ -1,3 +1,8 @@\n+2022-06-27  Tom de Vries  <tdevries@suse.de>\n+\n+\t* configure.ac: Build libiberty pic variant for gdbserver.\n+\t* configure: Regenerate.\n+\n 2022-06-26  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* configure: Regenerate."}, {"sha": "d9950637577a2430d46ab1ae9a9d26ecb05e0685", "filename": "gcc/ChangeLog", "status": "modified", "additions": 229, "deletions": 0, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3dd2185651c0a70919f6f3a35841cab68a81a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3dd2185651c0a70919f6f3a35841cab68a81a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d3dd2185651c0a70919f6f3a35841cab68a81a6", "patch": "@@ -1,3 +1,232 @@\n+2022-06-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* genmatch.cc: Add \"final\" and \"override\" to various vfunc\n+\timplementations, removing redundant \"virtual\" as appropriate.\n+\t* gensupport.cc: Likewise.\n+\t* gimple-range-cache.h: Likewise.\n+\t* ipa-icf-gimple.h: Likewise.\n+\t* ipa-icf.h: Likewise.\n+\t* read-md.h: Likewise.\n+\t* read-rtl-function.cc: Likewise.\n+\t* tree-ssa-loop-ch.cc: Likewise.\n+\t* tree-ssa-sccvn.cc: Likewise.\n+\n+2022-06-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* config/i386/i386-features.h: Add \"final\" and \"override\" to\n+\tscalar_chain vfunc implementations as appropriate.\n+\n+2022-06-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* tree-switch-conversion.h: Add \"final\" and \"override\" to cluster\n+\tvfunc implementations as appropriate.\n+\n+2022-06-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* expr.cc: Add \"final\" and \"override\" to op_by_pieces_d vfunc\n+\timplementations as appropriate.\n+\n+2022-06-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* compare-elim.cc: Add \"final\" and \"override\" to dom_walker vfunc\n+\timplementations, removing redundant \"virtual\" as appropriate.\n+\t* gimple-ssa-strength-reduction.cc: Likewise.\n+\t* ipa-prop.cc: Likewise.\n+\t* rtl-ssa/blocks.cc: Likewise.\n+\t* tree-into-ssa.cc: Likewise.\n+\t* tree-ssa-dom.cc: Likewise.\n+\t* tree-ssa-math-opts.cc: Likewise.\n+\t* tree-ssa-phiopt.cc: Likewise.\n+\t* tree-ssa-propagate.cc: Likewise.\n+\t* tree-ssa-sccvn.cc: Likewise.\n+\t* tree-ssa-strlen.cc: Likewise.\n+\t* tree-ssa-uncprop.cc: Likewise.\n+\n+2022-06-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* adjust-alignment.cc: Add \"final\" and \"override\" to opt_pass\n+\tvfunc implementations, removing redundant \"virtual\" as\n+\tappropriate.\n+\t* asan.cc: Likewise.\n+\t* auto-inc-dec.cc: Likewise.\n+\t* auto-profile.cc: Likewise.\n+\t* bb-reorder.cc: Likewise.\n+\t* cfgcleanup.cc: Likewise.\n+\t* cfgexpand.cc: Likewise.\n+\t* cfgrtl.cc: Likewise.\n+\t* cgraphbuild.cc: Likewise.\n+\t* combine-stack-adj.cc: Likewise.\n+\t* combine.cc: Likewise.\n+\t* compare-elim.cc: Likewise.\n+\t* config/i386/i386-features.cc: Likewise.\n+\t* coroutine-passes.cc: Likewise.\n+\t* cprop.cc: Likewise.\n+\t* cse.cc: Likewise.\n+\t* dce.cc: Likewise.\n+\t* df-core.cc: Likewise.\n+\t* dse.cc: Likewise.\n+\t* dwarf2cfi.cc: Likewise.\n+\t* early-remat.cc: Likewise.\n+\t* except.cc: Likewise.\n+\t* final.cc: Likewise.\n+\t* function.cc: Likewise.\n+\t* fwprop.cc: Likewise.\n+\t* gcse.cc: Likewise.\n+\t* gimple-harden-conditionals.cc: Likewise.\n+\t* gimple-if-to-switch.cc: Likewise.\n+\t* gimple-isel.cc: Likewise.\n+\t* gimple-laddress.cc: Likewise.\n+\t* gimple-loop-interchange.cc: Likewise.\n+\t* gimple-loop-jam.cc: Likewise.\n+\t* gimple-loop-versioning.cc: Likewise.\n+\t* gimple-low.cc: Likewise.\n+\t* gimple-ssa-backprop.cc: Likewise.\n+\t* gimple-ssa-evrp.cc: Likewise.\n+\t* gimple-ssa-isolate-paths.cc: Likewise.\n+\t* gimple-ssa-nonnull-compare.cc: Likewise.\n+\t* gimple-ssa-split-paths.cc: Likewise.\n+\t* gimple-ssa-store-merging.cc: Likewise.\n+\t* gimple-ssa-strength-reduction.cc: Likewise.\n+\t* gimple-ssa-warn-access.cc: Likewise.\n+\t* gimple-ssa-warn-alloca.cc: Likewise.\n+\t* gimple-ssa-warn-restrict.cc: Likewise.\n+\t* gimple-warn-recursion.cc: Likewise.\n+\t* graphite.cc: Likewise.\n+\t* ifcvt.cc: Likewise.\n+\t* init-regs.cc: Likewise.\n+\t* ipa-comdats.cc: Likewise.\n+\t* ipa-cp.cc: Likewise.\n+\t* ipa-devirt.cc: Likewise.\n+\t* ipa-fnsummary.cc: Likewise.\n+\t* ipa-free-lang-data.cc: Likewise.\n+\t* ipa-icf.cc: Likewise.\n+\t* ipa-inline.cc: Likewise.\n+\t* ipa-modref.cc: Likewise.\n+\t* ipa-profile.cc: Likewise.\n+\t* ipa-pure-const.cc: Likewise.\n+\t* ipa-reference.cc: Likewise.\n+\t* ipa-split.cc: Likewise.\n+\t* ipa-sra.cc: Likewise.\n+\t* ipa-visibility.cc: Likewise.\n+\t* ipa.cc: Likewise.\n+\t* ira.cc: Likewise.\n+\t* jump.cc: Likewise.\n+\t* loop-init.cc: Likewise.\n+\t* lower-subreg.cc: Likewise.\n+\t* mode-switching.cc: Likewise.\n+\t* modulo-sched.cc: Likewise.\n+\t* multiple_target.cc: Likewise.\n+\t* omp-expand.cc: Likewise.\n+\t* omp-low.cc: Likewise.\n+\t* omp-oacc-kernels-decompose.cc: Likewise.\n+\t* omp-oacc-neuter-broadcast.cc: Likewise.\n+\t* omp-offload.cc: Likewise.\n+\t* omp-simd-clone.cc: Likewise.\n+\t* passes.cc: Likewise.\n+\t* postreload-gcse.cc: Likewise.\n+\t* postreload.cc: Likewise.\n+\t* predict.cc: Likewise.\n+\t* recog.cc: Likewise.\n+\t* ree.cc: Likewise.\n+\t* reg-stack.cc: Likewise.\n+\t* regcprop.cc: Likewise.\n+\t* reginfo.cc: Likewise.\n+\t* regrename.cc: Likewise.\n+\t* reorg.cc: Likewise.\n+\t* sancov.cc: Likewise.\n+\t* sanopt.cc: Likewise.\n+\t* sched-rgn.cc: Likewise.\n+\t* stack-ptr-mod.cc: Likewise.\n+\t* store-motion.cc: Likewise.\n+\t* tracer.cc: Likewise.\n+\t* trans-mem.cc: Likewise.\n+\t* tree-call-cdce.cc: Likewise.\n+\t* tree-cfg.cc: Likewise.\n+\t* tree-cfgcleanup.cc: Likewise.\n+\t* tree-complex.cc: Likewise.\n+\t* tree-eh.cc: Likewise.\n+\t* tree-emutls.cc: Likewise.\n+\t* tree-if-conv.cc: Likewise.\n+\t* tree-into-ssa.cc: Likewise.\n+\t* tree-loop-distribution.cc: Likewise.\n+\t* tree-nrv.cc: Likewise.\n+\t* tree-object-size.cc: Likewise.\n+\t* tree-parloops.cc: Likewise.\n+\t* tree-predcom.cc: Likewise.\n+\t* tree-profile.cc: Likewise.\n+\t* tree-sra.cc: Likewise.\n+\t* tree-ssa-ccp.cc: Likewise.\n+\t* tree-ssa-copy.cc: Likewise.\n+\t* tree-ssa-dce.cc: Likewise.\n+\t* tree-ssa-dom.cc: Likewise.\n+\t* tree-ssa-dse.cc: Likewise.\n+\t* tree-ssa-forwprop.cc: Likewise.\n+\t* tree-ssa-ifcombine.cc: Likewise.\n+\t* tree-ssa-loop-ch.cc: Likewise.\n+\t* tree-ssa-loop-im.cc: Likewise.\n+\t* tree-ssa-loop-ivcanon.cc: Likewise.\n+\t* tree-ssa-loop-prefetch.cc: Likewise.\n+\t* tree-ssa-loop-split.cc: Likewise.\n+\t* tree-ssa-loop-unswitch.cc: Likewise.\n+\t* tree-ssa-loop.cc: Likewise.\n+\t* tree-ssa-math-opts.cc: Likewise.\n+\t* tree-ssa-phiopt.cc: Likewise.\n+\t* tree-ssa-phiprop.cc: Likewise.\n+\t* tree-ssa-pre.cc: Likewise.\n+\t* tree-ssa-reassoc.cc: Likewise.\n+\t* tree-ssa-sccvn.cc: Likewise.\n+\t* tree-ssa-sink.cc: Likewise.\n+\t* tree-ssa-strlen.cc: Likewise.\n+\t* tree-ssa-structalias.cc: Likewise.\n+\t* tree-ssa-uncprop.cc: Likewise.\n+\t* tree-ssa-uninit.cc: Likewise.\n+\t* tree-ssanames.cc: Likewise.\n+\t* tree-stdarg.cc: Likewise.\n+\t* tree-switch-conversion.cc: Likewise.\n+\t* tree-tailcall.cc: Likewise.\n+\t* tree-vect-generic.cc: Likewise.\n+\t* tree-vectorizer.cc: Likewise.\n+\t* tree-vrp.cc: Likewise.\n+\t* tsan.cc: Likewise.\n+\t* ubsan.cc: Likewise.\n+\t* var-tracking.cc: Likewise.\n+\t* vtable-verify.cc: Likewise.\n+\t* web.cc: Likewise.\n+\n+2022-06-27  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* config/gcn/gcn.md (*movbi): Remove assembler bug workarounds.\n+\t(jump): Likewise.\n+\t(movdi_symbol_save_scc): Likewise.\n+\n+2022-06-27  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR rtl-optimization/7061\n+\t* config/i386/i386.md (*highpartdisi2): New define_insn_and_split.\n+\n+2022-06-27  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR tree-optimization/94026\n+\t* match.pd (((X << C1) & C2) eq/ne C3): New simplification.\n+\t(((X >> C1) & C2) eq/ne C3): Likewise.\n+\n+2022-06-27  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\t* statistics.cc: Include tree.h.\n+\t(get_function_name): New function.\n+\t(statistics_fini_pass_2): Call get_function_name instead of\n+\tcurrent_function_name.\n+\t(statistics_counter_event): Call get_function_name instead of\n+\tfunction_name.\n+\t(statistics_histogram_event): Likewise.\n+\n+2022-06-27  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/xtensa.md:\n+\tSuppress unnecessary emitting nop insn in the split patterns for\n+\tinteger/FP constant synthesis, and add new peephole2 pattern that\n+\tfolds such synthesized additions.\n+\n 2022-06-25  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* tree-ssa-dom.cc (dom_jt_state): Pass ranger to constructor"}, {"sha": "73287f27b0a66d7cd65faec3a49605639dc1c56b", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3dd2185651c0a70919f6f3a35841cab68a81a6/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3dd2185651c0a70919f6f3a35841cab68a81a6/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=9d3dd2185651c0a70919f6f3a35841cab68a81a6", "patch": "@@ -1 +1 @@\n-20220627\n+20220628"}, {"sha": "d7bdd16f7bd1793588697daf2db9d8da83260530", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3dd2185651c0a70919f6f3a35841cab68a81a6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3dd2185651c0a70919f6f3a35841cab68a81a6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9d3dd2185651c0a70919f6f3a35841cab68a81a6", "patch": "@@ -1,3 +1,16 @@\n+2022-06-27  Sergei Trofimovich  <siarheit@google.com>\n+\n+\tPR c++/106102\n+\t* mapper-client.cc: Include <memory> via \"system.h\".\n+\t* mapper-resolver.cc: Ditto.\n+\t* module.cc: Ditto.\n+\n+2022-06-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* cxx-pretty-print.h: Add \"final\" and \"override\" to various vfunc\n+\timplementations, removing redundant \"virtual\" as appropriate.\n+\t* module.cc: Likewise.\n+\n 2022-06-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/87729"}, {"sha": "fc6124657631496f77d459c4c096d997ce8bf276", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3dd2185651c0a70919f6f3a35841cab68a81a6/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3dd2185651c0a70919f6f3a35841cab68a81a6/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=9d3dd2185651c0a70919f6f3a35841cab68a81a6", "patch": "@@ -1,3 +1,8 @@\n+2022-06-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* lto-dump.cc: Add \"final\" and \"override\" to various vfunc\n+\timplementations, removing redundant \"virtual\" as appropriate.\n+\n 2022-05-16  Martin Liska  <mliska@suse.cz>\n \n \t* lto-common.cc (lto_resolution_read): Use ARRAY_SIZE."}, {"sha": "c88004e8d44137e8eda28aaffa316237a5ac2487", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3dd2185651c0a70919f6f3a35841cab68a81a6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3dd2185651c0a70919f6f3a35841cab68a81a6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9d3dd2185651c0a70919f6f3a35841cab68a81a6", "patch": "@@ -1,3 +1,39 @@\n+2022-06-27  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/89197\n+\t* g++.dg/cpp0x/initlist130.C: New test.\n+\n+2022-06-27  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_global_constructor):\n+\tRemove amdgcn.\n+\n+2022-06-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/106070\n+\t* gcc.dg/torture/pr106070.c: Use unsigned long long instead of\n+\tunsigned long and -1ULL instead of 0xffffffffffffffff, deobcuscate\n+\tand improve formatting.\n+\n+2022-06-27  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gcc.dg/atomic/c11-atomic-exec-4.c: Call sched_yield.\n+\t* gcc.dg/atomic/c11-atomic-exec-5.c: Likewise.\n+\t* gcc.dg/atomic/pr80640-2.c: Likewise.\n+\t* gcc.dg/atomic/pr80640.c: Likewise.\n+\t* gcc.dg/atomic/pr81316.c: Likewise.\n+\t* gcc.dg/di-sync-multithread.c: Likewise.\n+\n+2022-06-27  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR rtl-optimization/7061\n+\t* gcc.target/i386/pr7061-2.c: Update to look for shufps.\n+\n+2022-06-27  Roger Sayle  <roger@nextmovesoftware.com>\n+\n+\tPR tree-optimization/94026\n+\t* gcc.dg/pr94026.c: New test case.\n+\n 2022-06-26  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/105691"}, {"sha": "59766c6e7cf42060de34edc96e4a847abf563a8a", "filename": "libbacktrace/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3dd2185651c0a70919f6f3a35841cab68a81a6/libbacktrace%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3dd2185651c0a70919f6f3a35841cab68a81a6/libbacktrace%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libbacktrace%2FChangeLog?ref=9d3dd2185651c0a70919f6f3a35841cab68a81a6", "patch": "@@ -1,3 +1,8 @@\n+2022-06-27  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* configure.ac: Use grep instead of fgrep.\n+\t* configure, Makefile.in: Regenerate.\n+\n 2022-05-28  Ian Lance Taylor  <iant@golang.org>\n \n \tPR libbacktrace/105721"}, {"sha": "e4b21c8bb0c4e38be558d06e5329e2407f62d438", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3dd2185651c0a70919f6f3a35841cab68a81a6/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3dd2185651c0a70919f6f3a35841cab68a81a6/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=9d3dd2185651c0a70919f6f3a35841cab68a81a6", "patch": "@@ -1,3 +1,9 @@\n+2022-06-27  Sergei Trofimovich  <siarheit@google.com>\n+\n+\tPR c++/106102\n+\t* libcc1plugin.cc: Include <memory> via \"system.h\".\n+\t* libcp1plugin.cc: Ditto.\n+\n 2022-06-01  David Seifert  <soap@gentoo.org>\n \n \tPR plugins/95648"}, {"sha": "07ab5faac4ac045ac1ebb53a50cc1e5e6c53f369", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3dd2185651c0a70919f6f3a35841cab68a81a6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3dd2185651c0a70919f6f3a35841cab68a81a6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9d3dd2185651c0a70919f6f3a35841cab68a81a6", "patch": "@@ -1,3 +1,76 @@\n+2022-06-27  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* testsuite/20_util/to_chars/long_double.cc: Use cmath\n+\tlong double overloads for nexttoward and ldexp.\n+\n+2022-06-27  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* testsuite/experimental/simd/standard_abi_usable.cc: Require\n+\tcmath support.\n+\t* testsuite/experimental/simd/standard_abi_usable_2.cc:\n+\tLikewise.\n+\n+2022-06-27  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* testsuite/26_numerics/complex/proj.cc: Skip test in the\n+\tcircumstances in which the implementation of proj is known to\n+\tbe broken.\n+\n+2022-06-27  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* src/c++17/fs_dir.cc (dir_and_pathname): Use dirfd if\n+\t_GLIBCXX_HAVE_OPENAT.\n+\n+2022-06-27  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* testsuite/27_io/filesystem/iterators/recursive_directory_iterator.cc\n+\t(test06): Don't create symlinks when NO_SYMLINKS is defined.\n+\n+2022-06-27  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* testsuite/lib/dg-options.exp (add_options_for_net_ts):\n+\tAdd -Wl,--gc-sections for RTEMS targets.\n+\t* testsuite/experimental/net/timer/waitable/dest.cc: Link-time\n+\txfail on RTEMS.\n+\t* testsuite/experimental/net/timer/waitable/ops.cc: Likewise.\n+\t* testsuite/experimental/net/internet/resolver/ops/lookup.cc:\n+\tExecution-time xfail on RTEMS.\n+\t* testsuite/experimental/net/internet/resolver/ops/reverse.cc:\n+\tLikewise.\n+\n+2022-06-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/ext/mt_allocator/22309_thread.cc: Include <string>.\n+\n+2022-06-27  Joel Brobecker  <brobecker@adacore.com>\n+\t    Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/util/testsuite_fs.h (__gnu_test::nonexistent_path):\n+\tAlways include a counter in the filename returned.\n+\n+2022-06-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/move_only_function.h (_Never_valueless_alt):\n+\tDefine partial specialization for std::move_only_function.\n+\n+2022-06-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/variant (_Build_FUN::_S_fun): Define fallback case\n+\tas deleted.\n+\t(__accepted_index, _Extra_visit_slot_needed): Replace class\n+\ttemplates with variable templates.\n+\n+2022-06-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_path.h (__is_path_iter_src): Replace class\n+\ttemplate with variable template.\n+\n+2022-06-27  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/chrono.h (is_clock_v): Define to false.\n+\t(is_clock_v<T>): Define partial specialization for true cases.\n+\t(is_clock): Define in terms of is_clock_v.\n+\n 2022-06-24  Xi Ruoyao  <xry111@xry111.site>\n \n \t* scripts/extract_symvers.in: Use grep -E instead of egrep."}, {"sha": "aac3ae34b22dc908cc754f279f7ac0e8704d5be3", "filename": "lto-plugin/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d3dd2185651c0a70919f6f3a35841cab68a81a6/lto-plugin%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d3dd2185651c0a70919f6f3a35841cab68a81a6/lto-plugin%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/lto-plugin%2FChangeLog?ref=9d3dd2185651c0a70919f6f3a35841cab68a81a6", "patch": "@@ -1,3 +1,12 @@\n+2022-06-27  Martin Liska  <mliska@suse.cz>\n+\n+\t* lto-plugin.c (plugin_lock): New lock.\n+\t(claim_file_handler): Use mutex for critical section.\n+\t(onload): Initialize mutex.\n+\t* configure.ac: Check for pthread.h.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\n 2022-06-20  Martin Liska  <mliska@suse.cz>\n \n \t* lto-plugin.c (struct plugin_file_info): Add skip_file flag."}]}