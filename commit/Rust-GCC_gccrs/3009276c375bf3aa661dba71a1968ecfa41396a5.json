{"sha": "3009276c375bf3aa661dba71a1968ecfa41396a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzAwOTI3NmMzNzViZjNhYTY2MWRiYTcxYTE5NjhlY2ZhNDEzOTZhNQ==", "commit": {"author": {"name": "Pedro Alves", "email": "pedro@codesourcery.com", "date": "2010-04-24T00:55:41Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2010-04-24T00:55:41Z"}, "message": "filenames.h (IS_DIR_SEPARATOR_1): Rename from IS_DIR_SEPARATOR...\n\n2010-04-23  Pedro Alves  <pedro@codesourcery.com>\n\ninclude/\n* filenames.h (IS_DIR_SEPARATOR_1): Rename from IS_DIR_SEPARATOR,\nalways define it independently of host, add `dos_based' parameter,\nand handle it.\n(HAS_DRIVE_SPEC_1): Rename from HAS_DRIVE_SPEC, always define it\nindependently of host, add `dos_based' parameter, and handle it.\n(IS_ABSOLUTE_PATH_1): Rename from IS_ABSOLUTE_PATH, always define\nit independently of host, add `dos_based' parameter, and handle\nit.\n(IS_DOS_DIR_SEPARATOR, IS_DOS_ABSOLUTE_PATH)\n(IS_UNIX_DIR_SEPARATOR, IS_UNIX_ABSOLUTE_PATH)\n(HAS_DOS_DRIVE_SPEC): New.\n(HAS_DRIVE_SPEC): Reimplement on top of HAS_DRIVE_SPEC_1.\n(IS_DIR_SEPARATOR): Reimplement on top of IS_DIR_SEPARATOR_1.\n(IS_ABSOLUTE_PATH): Reimplement on top of IS_ABSOLUTE_PATH_1.\n* libiberty.h (dos_lbasename, unix_lbasename): Declare.\n\nlibiberty/\n* lbasename.c (lbasename): Split into ...\n(unix_lbasename, dos_basename): ... these.\n(lbasename): ... and reimplement on top of them.\n* Makefile.in (lbasename.o): Add dependency on\n$(INCDIR)/filenames.h.\n\nFrom-SVN: r158681", "tree": {"sha": "69200e3764b98a3e99f34a5565afb55749e7ce70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69200e3764b98a3e99f34a5565afb55749e7ce70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3009276c375bf3aa661dba71a1968ecfa41396a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3009276c375bf3aa661dba71a1968ecfa41396a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3009276c375bf3aa661dba71a1968ecfa41396a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3009276c375bf3aa661dba71a1968ecfa41396a5/comments", "author": null, "committer": null, "parents": [{"sha": "5b29e4f6dde3163cf40ee14282008d6566281d6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b29e4f6dde3163cf40ee14282008d6566281d6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b29e4f6dde3163cf40ee14282008d6566281d6a"}], "stats": {"total": 119, "additions": 94, "deletions": 25}, "files": [{"sha": "5c01852a529cb40c3e4d07cebe3790a5e25adaec", "filename": "include/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3009276c375bf3aa661dba71a1968ecfa41396a5/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3009276c375bf3aa661dba71a1968ecfa41396a5/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=3009276c375bf3aa661dba71a1968ecfa41396a5", "patch": "@@ -1,3 +1,21 @@\n+2010-04-23  Pedro Alves  <pedro@codesourcery.com>\n+\n+\t* filenames.h (IS_DIR_SEPARATOR_1): Rename from IS_DIR_SEPARATOR,\n+\talways define it independently of host, add `dos_based' parameter,\n+\tand handle it.\n+\t(HAS_DRIVE_SPEC_1): Rename from HAS_DRIVE_SPEC, always define it\n+\tindependently of host, add `dos_based' parameter, and handle it.\n+\t(IS_ABSOLUTE_PATH_1): Rename from IS_ABSOLUTE_PATH, always define\n+\tit independently of host, add `dos_based' parameter, and handle\n+\tit.\n+\t(IS_DOS_DIR_SEPARATOR, IS_DOS_ABSOLUTE_PATH)\n+\t(IS_UNIX_DIR_SEPARATOR, IS_UNIX_ABSOLUTE_PATH)\n+\t(HAS_DOS_DRIVE_SPEC): New.\n+\t(HAS_DRIVE_SPEC): Reimplement on top of HAS_DRIVE_SPEC_1.\n+\t(IS_DIR_SEPARATOR): Reimplement on top of IS_DIR_SEPARATOR_1.\n+\t(IS_ABSOLUTE_PATH): Reimplement on top of IS_ABSOLUTE_PATH_1.\n+\t* libiberty.h (dos_lbasename, unix_lbasename): Declare.\n+\n 2010-04-20  Nick Clifton  <nickc@redhat.com>\n \n \t* sha1.h: Update copyright notice to use GPLv3."}, {"sha": "ff4e5ac6e75d433dbc6b452ac213be6b96a50278", "filename": "include/filenames.h", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3009276c375bf3aa661dba71a1968ecfa41396a5/include%2Ffilenames.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3009276c375bf3aa661dba71a1968ecfa41396a5/include%2Ffilenames.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Ffilenames.h?ref=3009276c375bf3aa661dba71a1968ecfa41396a5", "patch": "@@ -31,34 +31,46 @@ extern \"C\" {\n #endif\n \n #if defined(__MSDOS__) || defined(_WIN32) || defined(__OS2__) || defined (__CYGWIN__)\n-\n-#ifndef HAVE_DOS_BASED_FILE_SYSTEM\n-#define HAVE_DOS_BASED_FILE_SYSTEM 1\n+#  ifndef HAVE_DOS_BASED_FILE_SYSTEM\n+#    define HAVE_DOS_BASED_FILE_SYSTEM 1\n+#  endif\n+#  define PATH_SEPARATOR ';'\n+#  define HAS_DRIVE_SPEC(f) HAS_DOS_DRIVE_SPEC (f)\n+#  define IS_DIR_SEPARATOR(c) IS_DOS_DIR_SEPARATOR (c)\n+#  define IS_ABSOLUTE_PATH(f) IS_DOS_ABSOLUTE_PATH (f)\n+#else /* not DOSish */\n+#  define PATH_SEPARATOR ':'\n+#  define HAS_DRIVE_SPEC(f) (0)\n+#  define IS_DIR_SEPARATOR(c) IS_UNIX_DIR_SEPARATOR (c)\n+#  define IS_ABSOLUTE_PATH(f) IS_UNIX_ABSOLUTE_PATH (f)\n #endif\n \n-#define IS_DIR_SEPARATOR(c)\t((c) == '/' || (c) == '\\\\')\n+#define IS_DIR_SEPARATOR_1(dos_based, c)\t\t\t\t\\\n+  (((c) == '/')\t\t\t\t\t\t\t\t\\\n+   || (((c) == '\\\\') && (dos_based)))\n \n-#define HAS_DRIVE_SPEC(f)\t(((f)[0]) && ((f)[1] == ':'))\n+#define HAS_DRIVE_SPEC_1(dos_based, f)\t\t\t\\\n+  ((f)[0] && ((f)[1] == ':') && (dos_based))\n \n /* Remove the drive spec from F, assuming HAS_DRIVE_SPEC (f).\n    The result is a pointer to the remainder of F.  */\n #define STRIP_DRIVE_SPEC(f)\t((f) + 2)\n \n-/* Note that IS_ABSOLUTE_PATH accepts d:foo as well, although it is\n-   only semi-absolute.  This is because the users of IS_ABSOLUTE_PATH\n-   want to know whether to prepend the current working directory to\n-   a file name, which should not be done with a name like d:foo.  */\n-#define IS_ABSOLUTE_PATH(f)\t(IS_DIR_SEPARATOR((f)[0]) || HAS_DRIVE_SPEC(f))\n-\n-#else  /* not DOSish */\n-\n-#define IS_DIR_SEPARATOR(c)\t((c) == '/')\n-#define IS_ABSOLUTE_PATH(f)\t(IS_DIR_SEPARATOR((f)[0]))\n-\n-#define HAS_DRIVE_SPEC(f)\t(0)\n-#define STRIP_DRIVE_SPEC(f)\t(f)\n-\n-#endif /* not DOSish */\n+#define IS_DOS_DIR_SEPARATOR(c) IS_DIR_SEPARATOR_1 (1, c)\n+#define IS_DOS_ABSOLUTE_PATH(f) IS_ABSOLUTE_PATH_1 (1, f)\n+#define HAS_DOS_DRIVE_SPEC(f) HAS_DRIVE_SPEC_1 (1, f)\n+\n+#define IS_UNIX_DIR_SEPARATOR(c) IS_DIR_SEPARATOR_1 (0, c)\n+#define IS_UNIX_ABSOLUTE_PATH(f) IS_ABSOLUTE_PATH_1 (0, f)\n+\n+/* Note that when DOS_BASED is true, IS_ABSOLUTE_PATH accepts d:foo as\n+   well, although it is only semi-absolute.  This is because the users\n+   of IS_ABSOLUTE_PATH want to know whether to prepend the current\n+   working directory to a file name, which should not be done with a\n+   name like d:foo.  */\n+#define IS_ABSOLUTE_PATH_1(dos_based, f)\t\t \\\n+  (IS_DIR_SEPARATOR_1 (dos_based, (f)[0])\t\t \\\n+   || HAS_DRIVE_SPEC_1 (dos_based, f))\n \n extern int filename_cmp (const char *s1, const char *s2);\n #define FILENAME_CMP(s1, s2)\tfilename_cmp(s1, s2)"}, {"sha": "b320b18e98bfea3f2499223672b4c87e9d9746f1", "filename": "include/libiberty.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3009276c375bf3aa661dba71a1968ecfa41396a5/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3009276c375bf3aa661dba71a1968ecfa41396a5/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=3009276c375bf3aa661dba71a1968ecfa41396a5", "patch": "@@ -116,6 +116,17 @@ extern char *basename (const char *);\n \n extern const char *lbasename (const char *);\n \n+/* Same, but assumes DOS semantics (drive name, backslash is also a\n+   dir separator) regardless of host.  */\n+\n+extern const char *dos_lbasename (const char *);\n+\n+/* Same, but assumes Unix semantics (absolute paths always start with\n+   a slash, only forward slash is accepted as dir separator)\n+   regardless of host.  */\n+\n+extern const char *unix_lbasename (const char *);\n+\n /* A well-defined realpath () that is always compiled in.  */\n \n extern char *lrealpath (const char *);"}, {"sha": "cf4cdc45aa5517cdf287a014d9e28e805c92b71d", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3009276c375bf3aa661dba71a1968ecfa41396a5/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3009276c375bf3aa661dba71a1968ecfa41396a5/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=3009276c375bf3aa661dba71a1968ecfa41396a5", "patch": "@@ -1,3 +1,11 @@\n+2010-04-23  Pedro Alves  <pedro@codesourcery.com>\n+\n+\t* lbasename.c (lbasename): Split into ...\n+\t(unix_lbasename, dos_basename): ... these.\n+\t(lbasename): ... and reimplement on top of them.\n+\t* Makefile.in (lbasename.o): Add dependency on\n+\t$(INCDIR)/filenames.h.\n+\n 2010-04-07  Jakub Jelinek  <jakub@redhat.com>\n \n \t* regex.c (byte_re_match_2_internal): Avoid set but not used"}, {"sha": "fbce3cd24b6df9d46e04508d2b8487a6e915e205", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3009276c375bf3aa661dba71a1968ecfa41396a5/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3009276c375bf3aa661dba71a1968ecfa41396a5/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=3009276c375bf3aa661dba71a1968ecfa41396a5", "patch": "@@ -724,7 +724,7 @@ $(CONFIGURED_OFILES): stamp-picdir\n \n ./lbasename.o: $(srcdir)/lbasename.c config.h $(INCDIR)/ansidecl.h \\\n \t$(INCDIR)/filenames.h $(INCDIR)/libiberty.h \\\n-\t$(INCDIR)/safe-ctype.h\n+\t$(INCDIR)/safe-ctype.h $(INCDIR)/filenames.h\n \tif [ x\"$(PICFLAG)\" != x ]; then \\\n \t  $(COMPILE.c) $(PICFLAG) $(srcdir)/lbasename.c -o pic/$@; \\\n \telse true; fi"}, {"sha": "ed1dd1fdee89e654e9e7dc0af37492069bd63cb4", "filename": "libiberty/lbasename.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3009276c375bf3aa661dba71a1968ecfa41396a5/libiberty%2Flbasename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3009276c375bf3aa661dba71a1968ecfa41396a5/libiberty%2Flbasename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Flbasename.c?ref=3009276c375bf3aa661dba71a1968ecfa41396a5", "patch": "@@ -46,19 +46,39 @@ and a path ending in @code{/} returns the empty string after it.\n #include \"filenames.h\"\n \n const char *\n-lbasename (const char *name)\n+unix_lbasename (const char *name)\n+{\n+  const char *base;\n+\n+  for (base = name; *name; name++)\n+    if (IS_UNIX_DIR_SEPARATOR (*name))\n+      base = name + 1;\n+\n+  return base;\n+}\n+\n+const char *\n+dos_lbasename (const char *name)\n {\n   const char *base;\n \n-#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n   /* Skip over a possible disk name.  */\n   if (ISALPHA (name[0]) && name[1] == ':') \n     name += 2;\n-#endif\n \n   for (base = name; *name; name++)\n-    if (IS_DIR_SEPARATOR (*name))\n+    if (IS_DOS_DIR_SEPARATOR (*name))\n       base = name + 1;\n \n   return base;\n }\n+\n+const char *\n+lbasename (const char *name)\n+{\n+#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n+  return dos_lbasename (name);\n+#else\n+  return unix_lbasename (name);\n+#endif\n+}"}]}