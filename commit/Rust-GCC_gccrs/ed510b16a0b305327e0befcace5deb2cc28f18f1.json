{"sha": "ed510b16a0b305327e0befcace5deb2cc28f18f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ1MTBiMTZhMGIzMDUzMjdlMGJlZmNhY2U1ZGViMmNjMjhmMThmMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-06-27T10:26:06Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-06-27T10:26:06Z"}, "message": "gimple.h (gimple_return_retbnd): Delete.\n\n\t* gimple.h (gimple_return_retbnd): Delete.\n\t(gimple_return_set_retbnd): Likewise.\n\t* cgraphunit.c (cgraph_node::expand_thunk): Remove call to\n\tgimple_return_set_retbnd.\n\t* gimple-pretty-print.c (dump_gimple_return): Remove call to\n\tgimple_return_retbnd and adjust.\n\t* tree-inline.h (struct copy_body_data): Remove retbnd field.\n\t* tree-inline.c (remap_gimple_stmt): Remove handling of retbnd.\n\tExplicitly return NULL in a couple more cases.  Move assertion\n\ton debug statements and remove unreachable code.\n\t(reset_debug_binding): Do not test id->retbnd.\n\t(expand_call_inline): Do not set it.\n\nFrom-SVN: r262181", "tree": {"sha": "403b740f71ddce039cf19e3d7a3abbf59d6a183d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/403b740f71ddce039cf19e3d7a3abbf59d6a183d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed510b16a0b305327e0befcace5deb2cc28f18f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed510b16a0b305327e0befcace5deb2cc28f18f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed510b16a0b305327e0befcace5deb2cc28f18f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed510b16a0b305327e0befcace5deb2cc28f18f1/comments", "author": null, "committer": null, "parents": [{"sha": "1765b0231029c0479ddcf5d54e8f4882c5feda94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1765b0231029c0479ddcf5d54e8f4882c5feda94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1765b0231029c0479ddcf5d54e8f4882c5feda94"}], "stats": {"total": 86, "additions": 26, "deletions": 60}, "files": [{"sha": "b9be9d55325714279c014299d82ed4707cf38850", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed510b16a0b305327e0befcace5deb2cc28f18f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed510b16a0b305327e0befcace5deb2cc28f18f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed510b16a0b305327e0befcace5deb2cc28f18f1", "patch": "@@ -1,3 +1,18 @@\n+2018-06-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gimple.h (gimple_return_retbnd): Delete.\n+\t(gimple_return_set_retbnd): Likewise.\n+\t* cgraphunit.c (cgraph_node::expand_thunk): Remove call to\n+\tgimple_return_set_retbnd.\n+\t* gimple-pretty-print.c (dump_gimple_return): Remove call to\n+\tgimple_return_retbnd and adjust.\n+\t* tree-inline.h (struct copy_body_data): Remove retbnd field.\n+\t* tree-inline.c (remap_gimple_stmt): Remove handling of retbnd.\n+\tExplicitly return NULL in a couple more cases.  Move assertion\n+\ton debug statements and remove unreachable code.\n+\t(reset_debug_binding): Do not test id->retbnd.\n+\t(expand_call_inline): Do not set it.\n+\n 2018-06-27  Rasmus Villemoes  <rv@rasmusvillemoes.dk>\n \n \t* configure.ac: Add --disable-gcov option."}, {"sha": "3c811c412c3f1de221c5fbab811ed0a4fbbac346", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed510b16a0b305327e0befcace5deb2cc28f18f1/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed510b16a0b305327e0befcace5deb2cc28f18f1/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=ed510b16a0b305327e0befcace5deb2cc28f18f1", "patch": "@@ -1803,7 +1803,6 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n       int i;\n       tree resdecl;\n       tree restmp = NULL;\n-      tree resbnd = NULL;\n \n       gcall *call;\n       greturn *ret;\n@@ -1994,7 +1993,6 @@ cgraph_node::expand_thunk (bool output_asm_thunks, bool force_gimple_thunk)\n \t    ret = gimple_build_return (restmp);\n \t  else\n \t    ret = gimple_build_return (resdecl);\n-\t  gimple_return_set_retbnd (ret, resbnd);\n \n \t  gsi_insert_after (&bsi, ret, GSI_NEW_STMT);\n \t}"}, {"sha": "19cdb40d73a5226033297f311f7bdeb716c8c07d", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed510b16a0b305327e0befcace5deb2cc28f18f1/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed510b16a0b305327e0befcace5deb2cc28f18f1/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=ed510b16a0b305327e0befcace5deb2cc28f18f1", "patch": "@@ -645,12 +645,11 @@ static void\n dump_gimple_return (pretty_printer *buffer, greturn *gs, int spc,\n \t\t    dump_flags_t flags)\n {\n-  tree t, t2;\n+  tree t;\n \n   t = gimple_return_retval (gs);\n-  t2 = gimple_return_retbnd (gs);\n   if (flags & TDF_RAW)\n-    dump_gimple_fmt (buffer, spc, flags, \"%G <%T %T>\", gs, t, t2);\n+    dump_gimple_fmt (buffer, spc, flags, \"%G <%T>\", gs, t);\n   else\n     {\n       pp_string (buffer, \"return\");\n@@ -659,11 +658,6 @@ dump_gimple_return (pretty_printer *buffer, greturn *gs, int spc,\n \t  pp_space (buffer);\n \t  dump_generic_node (buffer, t, spc, flags, false);\n \t}\n-      if (t2)\n-\t{\n-\t  pp_string (buffer, \", \");\n-\t  dump_generic_node (buffer, t2, spc, flags, false);\n-\t}\n       pp_semicolon (buffer);\n     }\n }"}, {"sha": "32e1908c534e255dd661630de3c9aac9f6d9071d", "filename": "gcc/gimple.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed510b16a0b305327e0befcace5deb2cc28f18f1/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed510b16a0b305327e0befcace5deb2cc28f18f1/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=ed510b16a0b305327e0befcace5deb2cc28f18f1", "patch": "@@ -6198,26 +6198,6 @@ gimple_return_set_retval (greturn *gs, tree retval)\n }\n \n \n-/* Return the return bounds for GIMPLE_RETURN GS.  */\n-\n-static inline tree\n-gimple_return_retbnd (const gimple *gs)\n-{\n-  GIMPLE_CHECK (gs, GIMPLE_RETURN);\n-  return gimple_op (gs, 1);\n-}\n-\n-\n-/* Set RETVAL to be the return bounds for GIMPLE_RETURN GS.  */\n-\n-static inline void\n-gimple_return_set_retbnd (gimple *gs, tree retval)\n-{\n-  GIMPLE_CHECK (gs, GIMPLE_RETURN);\n-  gimple_set_op (gs, 1, retval);\n-}\n-\n-\n /* Returns true when the gimple statement STMT is any of the OMP types.  */\n \n #define CASE_GIMPLE_OMP\t\t\t\t\\"}, {"sha": "c39a8457e001c13ba0d681ccc76171d1cfcd82d5", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed510b16a0b305327e0befcace5deb2cc28f18f1/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed510b16a0b305327e0befcace5deb2cc28f18f1/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=ed510b16a0b305327e0befcace5deb2cc28f18f1", "patch": "@@ -1382,35 +1382,24 @@ remap_gimple_stmt (gimple *stmt, copy_body_data *id)\n       && (gimple_debug_nonbind_marker_p (stmt)\n \t  ? !DECL_STRUCT_FUNCTION (id->dst_fn)->debug_nonbind_markers\n \t  : !opt_for_fn (id->dst_fn, flag_var_tracking_assignments)))\n-    return stmts;\n+    return NULL;\n \n   /* Begin by recognizing trees that we'll completely rewrite for the\n      inlining context.  Our output for these trees is completely\n-     different from out input (e.g. RETURN_EXPR is deleted, and morphs\n+     different from our input (e.g. RETURN_EXPR is deleted and morphs\n      into an edge).  Further down, we'll handle trees that get\n      duplicated and/or tweaked.  */\n \n-  /* When requested, GIMPLE_RETURNs should be transformed to just the\n+  /* When requested, GIMPLE_RETURN should be transformed to just the\n      contained GIMPLE_ASSIGN.  The branch semantics of the return will\n      be handled elsewhere by manipulating the CFG rather than the\n      statement.  */\n   if (gimple_code (stmt) == GIMPLE_RETURN && id->transform_return_to_modify)\n     {\n       tree retval = gimple_return_retval (as_a <greturn *> (stmt));\n-      tree retbnd = gimple_return_retbnd (stmt);\n-      tree bndslot = id->retbnd;\n-\n-      if (retbnd && bndslot)\n-\t{\n-\t  gimple *bndcopy = gimple_build_assign (bndslot, retbnd);\n-\t  memset (&wi, 0, sizeof (wi));\n-\t  wi.info = id;\n-\t  walk_gimple_op (bndcopy, remap_gimple_op_r, &wi);\n-\t  gimple_seq_add_stmt (&stmts, bndcopy);\n-\t}\n \n       /* If we're returning something, just turn that into an\n-\t assignment into the equivalent of the original RESULT_DECL.\n+\t assignment to the equivalent of the original RESULT_DECL.\n \t If RETVAL is just the result decl, the result decl has\n \t already been set (e.g. a recent \"foo (&result_decl, ...)\");\n \t just toss the entire GIMPLE_RETURN.  */\n@@ -1427,7 +1416,7 @@ remap_gimple_stmt (gimple *stmt, copy_body_data *id)\n \t  skip_first = true;\n \t}\n       else\n-\treturn stmts;\n+\treturn NULL;\n     }\n   else if (gimple_has_substatements (stmt))\n     {\n@@ -1668,7 +1657,6 @@ remap_gimple_stmt (gimple *stmt, copy_body_data *id)\n \t  gimple_seq_add_stmt (&stmts, copy);\n \t  return stmts;\n \t}\n-      gcc_checking_assert (!is_gimple_debug (stmt));\n \n       /* Create a new deep copy of the statement.  */\n       copy = gimple_copy (stmt);\n@@ -1754,8 +1742,7 @@ remap_gimple_stmt (gimple *stmt, copy_body_data *id)\n \t  }\n     }\n \n-  /* If STMT has a block defined, map it to the newly constructed\n-     block.  */\n+  /* If STMT has a block defined, map it to the newly constructed block.  */\n   if (gimple_block (copy))\n     {\n       tree *n;\n@@ -1764,12 +1751,8 @@ remap_gimple_stmt (gimple *stmt, copy_body_data *id)\n       gimple_set_block (copy, *n);\n     }\n \n-  if (gimple_debug_bind_p (copy) || gimple_debug_source_bind_p (copy)\n-      || gimple_debug_nonbind_marker_p (copy))\n-    {\n-      gimple_seq_add_stmt (&stmts, copy);\n-      return stmts;\n-    }\n+  /* Debug statements ought to be rebuilt and not copied.  */\n+  gcc_checking_assert (!is_gimple_debug (copy));\n \n   /* Remap all the operands in COPY.  */\n   memset (&wi, 0, sizeof (wi));\n@@ -4274,7 +4257,7 @@ reset_debug_binding (copy_body_data *id, tree srcvar, gimple_seq *bindings)\n   if (!VAR_P (*remappedvarp))\n     return;\n \n-  if (*remappedvarp == id->retvar || *remappedvarp == id->retbnd)\n+  if (*remappedvarp == id->retvar)\n     return;\n \n   tree tvar = target_for_debug_bind (*remappedvarp);\n@@ -4834,7 +4817,6 @@ expand_call_inline (basic_block bb, gimple *stmt, copy_body_data *id)\n \n   id->block = NULL_TREE;\n   id->retvar = NULL_TREE;\n-  id->retbnd = NULL_TREE;\n   successfully_inlined = true;\n \n  egress:"}, {"sha": "faeca2fec3eddcb00479094340c06299bcfbe97f", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed510b16a0b305327e0befcace5deb2cc28f18f1/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed510b16a0b305327e0befcace5deb2cc28f18f1/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=ed510b16a0b305327e0befcace5deb2cc28f18f1", "patch": "@@ -63,9 +63,6 @@ struct copy_body_data\n   /* The VAR_DECL for the return value.  */\n   tree retvar;\n \n-  /* The VAR_DECL for the return bounds.  */\n-  tree retbnd;\n-\n   /* Assign statements that need bounds copy.  */\n   vec<gimple *> assign_stmts;\n "}]}