{"sha": "88ce9dc38a0590608dd036e08758b478f8ca429c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhjZTlkYzM4YTA1OTA2MDhkZDAzNmUwODc1OGI0NzhmOGNhNDI5Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-05-12T18:52:51Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-05-12T18:52:51Z"}, "message": "re PR target/80723 (FAIL gcc.target/i386/cadd.c scan assembler sbb)\n\n\tPR target/80723\n\t* config/i386/i386.c (ix86_rtx_cost) [case PLUS]: Ignore the\n\tcost of adding a carry flag for ADC instruction.\n\t[case MINUS]: Ignore the cost of subtracting a carry flag\n\tfor SBB instruction.\n\nFrom-SVN: r247991", "tree": {"sha": "0fae5c62139cd17defd0553bc7128f24b2c2e1bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fae5c62139cd17defd0553bc7128f24b2c2e1bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88ce9dc38a0590608dd036e08758b478f8ca429c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88ce9dc38a0590608dd036e08758b478f8ca429c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88ce9dc38a0590608dd036e08758b478f8ca429c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88ce9dc38a0590608dd036e08758b478f8ca429c/comments", "author": null, "committer": null, "parents": [{"sha": "b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b76f15500970fd9b00ae4c6979fbe1b4ab7ed126"}], "stats": {"total": 37, "additions": 33, "deletions": 4}, "files": [{"sha": "cc9f7a32be98da3312b6e2ff5433d3bd3ef37ef4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ce9dc38a0590608dd036e08758b478f8ca429c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ce9dc38a0590608dd036e08758b478f8ca429c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88ce9dc38a0590608dd036e08758b478f8ca429c", "patch": "@@ -1,3 +1,11 @@\n+2017-05-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/80723\n+\t* config/i386/i386.c (ix86_rtx_cost) [case PLUS]: Ignore the\n+\tcost of adding a carry flag for ADC instruction.\n+\t[case MINUS]: Ignore the cost of subtracting a carry flag\n+\tfor SBB instruction.\n+\n 2017-05-12  Steven Munroe  <munroesj@gcc.gnu.org>\n \n \t* config.gcc (powerpc*-*-*): Add bmi2intrin.h, bmiintrin.h,\n@@ -8,7 +16,7 @@\n \n 2017-05-12  Jeff Law  <law@redhat.com>\n \n-\t* tree-vrp.c (vrp_dom_walker::before_dom_childern): Push unwinding\n+\t* tree-vrp.c (vrp_dom_walker::before_dom_children): Push unwinding\n \tmarkers.\n \n 2017-05-12  Peter Bergner  <bergner@vnet.ibm.com>"}, {"sha": "b5bdcd636089561d048e8c2fad4b26cbdb03c6ad", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88ce9dc38a0590608dd036e08758b478f8ca429c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88ce9dc38a0590608dd036e08758b478f8ca429c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=88ce9dc38a0590608dd036e08758b478f8ca429c", "patch": "@@ -40913,9 +40913,16 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n \t    }\n \t  else if (GET_CODE (XEXP (x, 0)) == PLUS)\n \t    {\n-\t      *total = cost->lea;\n-\t      *total += rtx_cost (XEXP (XEXP (x, 0), 0), mode,\n-\t\t\t\t  outer_code, opno, speed);\n+\t      /* Add with carry, ignore the cost of adding a carry flag.  */\n+\t      if (ix86_carry_flag_operator (XEXP (XEXP (x, 0), 0), mode))\n+\t\t*total = cost->add;\n+\t      else\n+\t\t{\n+\t\t  *total = cost->lea;\n+\t\t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), mode,\n+\t\t\t\t      outer_code, opno, speed);\n+\t\t}\n+\n \t      *total += rtx_cost (XEXP (XEXP (x, 0), 1), mode,\n \t\t\t\t  outer_code, opno, speed);\n \t      *total += rtx_cost (XEXP (x, 1), mode,\n@@ -40926,6 +40933,20 @@ ix86_rtx_costs (rtx x, machine_mode mode, int outer_code_i, int opno,\n       /* FALLTHRU */\n \n     case MINUS:\n+      /* Subtract with borrow, ignore the cost of subtracting a carry flag.  */\n+      if (GET_MODE_CLASS (mode) == MODE_INT\n+\t  && GET_MODE_SIZE (mode) <= UNITS_PER_WORD\n+\t  && GET_CODE (XEXP (x, 0)) == MINUS\n+\t  && ix86_carry_flag_operator (XEXP (XEXP (x, 0), 1), mode))\n+\t{\n+\t  *total = cost->add;\n+\t  *total += rtx_cost (XEXP (XEXP (x, 0), 0), mode,\n+\t\t\t      outer_code, opno, speed);\n+\t  *total += rtx_cost (XEXP (x, 1), mode,\n+\t\t\t      outer_code, opno, speed);\n+\t  return true;\n+\t}\n+\n       if (SSE_FLOAT_MODE_P (mode) && TARGET_SSE_MATH)\n \t{\n \t  /* ??? SSE cost should be used here.  */"}]}