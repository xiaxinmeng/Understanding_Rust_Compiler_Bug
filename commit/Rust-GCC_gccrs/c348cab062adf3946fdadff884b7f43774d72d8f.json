{"sha": "c348cab062adf3946fdadff884b7f43774d72d8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM0OGNhYjA2MmFkZjM5NDZmZGFkZmY4ODRiN2Y0Mzc3NGQ3MmQ4Zg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-07T18:43:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-07T18:43:40Z"}, "message": "[AArch64] Fix ICEs in aarch64_print_operand\n\nThree related regression fixes:\n\n- We can't use asserts like:\n\n    gcc_assert (GET_MODE_SIZE (mode) == 16);\n\n  in aarch64_print_operand because it could trigger for invalid user input.\n\n- The output_operand_lossage in aarch64_print_address_internal:\n\n    output_operand_lossage (\"invalid operand for '%%%c'\", op);\n\n  wasn't right because \"op\" is an rtx_code enum rather than the\n  prefix character.\n\n- aarch64_print_operand_address shouldn't call output_operand_lossage\n  (because it doesn't have a prefix code) but instead fall back to\n  output_addr_const.\n\n2017-12-05  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_print_address_internal): Return\n\ta bool success value.  Don't call output_operand_lossage here.\n\t(aarch64_print_ldpstp_address): Return a bool success value.\n\t(aarch64_print_operand_address): Call output_addr_const if\n\taarch64_print_address_internal fails.\n\t(aarch64_print_operand): Don't assert that the mode is 16 bytes for\n\t'y'; call output_operand_lossage instead.  Call output_operand_lossage\n\tif aarch64_print_ldpstp_address fails.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/asm-2.c: New test.\n\t* gcc.target/aarch64/asm-3.c: Likewise.\n\nFrom-SVN: r255481", "tree": {"sha": "92bd80b3ea4488a4ef1d0b49290f617f3f264c06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92bd80b3ea4488a4ef1d0b49290f617f3f264c06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c348cab062adf3946fdadff884b7f43774d72d8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c348cab062adf3946fdadff884b7f43774d72d8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c348cab062adf3946fdadff884b7f43774d72d8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c348cab062adf3946fdadff884b7f43774d72d8f/comments", "author": null, "committer": null, "parents": [{"sha": "63570af0b58a3c354723bc78b75d76dbb0750f47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63570af0b58a3c354723bc78b75d76dbb0750f47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63570af0b58a3c354723bc78b75d76dbb0750f47"}], "stats": {"total": 90, "additions": 63, "deletions": 27}, "files": [{"sha": "7cf988956b7055260c04d6b75c8605db70573f65", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c348cab062adf3946fdadff884b7f43774d72d8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c348cab062adf3946fdadff884b7f43774d72d8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c348cab062adf3946fdadff884b7f43774d72d8f", "patch": "@@ -1,3 +1,14 @@\n+2017-12-07  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* config/aarch64/aarch64.c (aarch64_print_address_internal): Return\n+\ta bool success value.  Don't call output_operand_lossage here.\n+\t(aarch64_print_ldpstp_address): Return a bool success value.\n+\t(aarch64_print_operand_address): Call output_addr_const if\n+\taarch64_print_address_internal fails.\n+\t(aarch64_print_operand): Don't assert that the mode is 16 bytes for\n+\t'y'; call output_operand_lossage instead.  Call output_operand_lossage\n+\tif aarch64_print_ldpstp_address fails.\n+\n 2017-12-07  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree-vector-builder.h"}, {"sha": "83d86071312a25789dc40f4f236fec5260d04c87", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c348cab062adf3946fdadff884b7f43774d72d8f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c348cab062adf3946fdadff884b7f43774d72d8f/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=c348cab062adf3946fdadff884b7f43774d72d8f", "patch": "@@ -150,7 +150,7 @@ static bool aarch64_builtin_support_vector_misalignment (machine_mode mode,\n \t\t\t\t\t\t\t bool is_packed);\n static machine_mode\n aarch64_simd_container_mode (scalar_mode mode, unsigned width);\n-static void aarch64_print_ldpstp_address (FILE *f, machine_mode mode, rtx x);\n+static bool aarch64_print_ldpstp_address (FILE *, machine_mode, rtx);\n \n /* Major revision number of the ARM Architecture implemented by the target.  */\n unsigned aarch64_architecture_version;\n@@ -5600,22 +5600,21 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n       {\n \tmachine_mode mode = GET_MODE (x);\n \n-\tif (GET_CODE (x) != MEM)\n+\tif (GET_CODE (x) != MEM\n+\t    || (code == 'y' && GET_MODE_SIZE (mode) != 16))\n \t  {\n \t    output_operand_lossage (\"invalid operand for '%%%c'\", code);\n \t    return;\n \t  }\n \n \tif (code == 'y')\n-\t  {\n-\t    /* LDP/STP which uses a single double-width memory operand.\n-\t       Adjust the mode to appear like a typical LDP/STP.\n-\t       Currently this is supported for 16-byte accesses only.  */\n-\t    gcc_assert (GET_MODE_SIZE (mode) == 16);\n-\t    mode = DFmode;\n-\t  }\n+\t  /* LDP/STP which uses a single double-width memory operand.\n+\t     Adjust the mode to appear like a typical LDP/STP.\n+\t     Currently this is supported for 16-byte accesses only.  */\n+\t  mode = DFmode;\n \n-\taarch64_print_ldpstp_address (f, mode, XEXP (x, 0));\n+\tif (!aarch64_print_ldpstp_address (f, mode, XEXP (x, 0)))\n+\t  output_operand_lossage (\"invalid operand prefix '%%%c'\", code);\n       }\n       break;\n \n@@ -5628,7 +5627,7 @@ aarch64_print_operand (FILE *f, rtx x, int code)\n /* Print address 'x' of a memory access with mode 'mode'.\n    'op' is the context required by aarch64_classify_address.  It can either be\n    MEM for a normal memory access or PARALLEL for LDP/STP.  */\n-static void\n+static bool\n aarch64_print_address_internal (FILE *f, machine_mode mode, rtx x, RTX_CODE op)\n {\n   struct aarch64_address_info addr;\n@@ -5645,7 +5644,7 @@ aarch64_print_address_internal (FILE *f, machine_mode mode, rtx x, RTX_CODE op)\n \telse\n \t  asm_fprintf (f, \"[%s, %wd]\", reg_names [REGNO (addr.base)],\n \t\t       INTVAL (addr.offset));\n-\treturn;\n+\treturn true;\n \n       case ADDRESS_REG_REG:\n \tif (addr.shift == 0)\n@@ -5654,7 +5653,7 @@ aarch64_print_address_internal (FILE *f, machine_mode mode, rtx x, RTX_CODE op)\n \telse\n \t  asm_fprintf (f, \"[%s, %s, lsl %u]\", reg_names [REGNO (addr.base)],\n \t\t       reg_names [REGNO (addr.offset)], addr.shift);\n-\treturn;\n+\treturn true;\n \n       case ADDRESS_REG_UXTW:\n \tif (addr.shift == 0)\n@@ -5663,7 +5662,7 @@ aarch64_print_address_internal (FILE *f, machine_mode mode, rtx x, RTX_CODE op)\n \telse\n \t  asm_fprintf (f, \"[%s, w%d, uxtw %u]\", reg_names [REGNO (addr.base)],\n \t\t       REGNO (addr.offset) - R0_REGNUM, addr.shift);\n-\treturn;\n+\treturn true;\n \n       case ADDRESS_REG_SXTW:\n \tif (addr.shift == 0)\n@@ -5672,35 +5671,35 @@ aarch64_print_address_internal (FILE *f, machine_mode mode, rtx x, RTX_CODE op)\n \telse\n \t  asm_fprintf (f, \"[%s, w%d, sxtw %u]\", reg_names [REGNO (addr.base)],\n \t\t       REGNO (addr.offset) - R0_REGNUM, addr.shift);\n-\treturn;\n+\treturn true;\n \n       case ADDRESS_REG_WB:\n \tswitch (GET_CODE (x))\n \t  {\n \t  case PRE_INC:\n \t    asm_fprintf (f, \"[%s, %d]!\", reg_names [REGNO (addr.base)],\n \t\t\t GET_MODE_SIZE (mode));\n-\t    return;\n+\t    return true;\n \t  case POST_INC:\n \t    asm_fprintf (f, \"[%s], %d\", reg_names [REGNO (addr.base)],\n \t\t\t GET_MODE_SIZE (mode));\n-\t    return;\n+\t    return true;\n \t  case PRE_DEC:\n \t    asm_fprintf (f, \"[%s, -%d]!\", reg_names [REGNO (addr.base)],\n \t\t\t GET_MODE_SIZE (mode));\n-\t    return;\n+\t    return true;\n \t  case POST_DEC:\n \t    asm_fprintf (f, \"[%s], -%d\", reg_names [REGNO (addr.base)],\n \t\t\t GET_MODE_SIZE (mode));\n-\t    return;\n+\t    return true;\n \t  case PRE_MODIFY:\n \t    asm_fprintf (f, \"[%s, %wd]!\", reg_names [REGNO (addr.base)],\n \t\t\t INTVAL (addr.offset));\n-\t    return;\n+\t    return true;\n \t  case POST_MODIFY:\n \t    asm_fprintf (f, \"[%s], %wd\", reg_names [REGNO (addr.base)],\n \t\t\t INTVAL (addr.offset));\n-\t    return;\n+\t    return true;\n \t  default:\n \t    break;\n \t  }\n@@ -5710,28 +5709,29 @@ aarch64_print_address_internal (FILE *f, machine_mode mode, rtx x, RTX_CODE op)\n \tasm_fprintf (f, \"[%s, #:lo12:\", reg_names [REGNO (addr.base)]);\n \toutput_addr_const (f, addr.offset);\n \tasm_fprintf (f, \"]\");\n-\treturn;\n+\treturn true;\n \n       case ADDRESS_SYMBOLIC:\n \toutput_addr_const (f, x);\n-\treturn;\n+\treturn true;\n       }\n \n-  output_operand_lossage (\"invalid operand for '%%%c'\", op);\n+  return false;\n }\n \n /* Print address 'x' of a LDP/STP with mode 'mode'.  */\n-static void\n+static bool\n aarch64_print_ldpstp_address (FILE *f, machine_mode mode, rtx x)\n {\n-  aarch64_print_address_internal (f, mode, x, PARALLEL);\n+  return aarch64_print_address_internal (f, mode, x, PARALLEL);\n }\n \n /* Print address 'x' of a memory access with mode 'mode'.  */\n static void\n aarch64_print_operand_address (FILE *f, machine_mode mode, rtx x)\n {\n-  aarch64_print_address_internal (f, mode, x, MEM);\n+  if (!aarch64_print_address_internal (f, mode, x, MEM))\n+    output_addr_const (f, x);\n }\n \n bool"}, {"sha": "3a22f217a174c5e70638d4b78c4f9f05cbc646a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c348cab062adf3946fdadff884b7f43774d72d8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c348cab062adf3946fdadff884b7f43774d72d8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c348cab062adf3946fdadff884b7f43774d72d8f", "patch": "@@ -1,3 +1,8 @@\n+2017-12-07  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* gcc.target/aarch64/asm-2.c: New test.\n+\t* gcc.target/aarch64/asm-3.c: Likewise.\n+\n 2017-12-07  Bin Cheng  <bin.cheng@arm.com>\n \t    Richard Biener  <rguenther@suse.de>\n "}, {"sha": "3f978f5b2347405c8637529442af537f409a59bd", "filename": "gcc/testsuite/gcc.target/aarch64/asm-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c348cab062adf3946fdadff884b7f43774d72d8f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c348cab062adf3946fdadff884b7f43774d72d8f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-2.c?ref=c348cab062adf3946fdadff884b7f43774d72d8f", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int x;\n+\n+void\n+f (void)\n+{\n+  asm volatile (\"%a0\" :: \"X\" (&x));\n+}"}, {"sha": "75317bddb4a5f871dfcfd8c81ba0414a9689a0d1", "filename": "gcc/testsuite/gcc.target/aarch64/asm-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c348cab062adf3946fdadff884b7f43774d72d8f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c348cab062adf3946fdadff884b7f43774d72d8f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fasm-3.c?ref=c348cab062adf3946fdadff884b7f43774d72d8f", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int x;\n+\n+void\n+f (void)\n+{\n+  asm volatile (\"%y0\" :: \"X\" (x)); /* { dg-error \"invalid\" } */\n+}"}]}