{"sha": "0bdf7869bf1de3549de62e49901ebcea8578f5d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJkZjc4NjliZjFkZTM1NDlkZTYyZTQ5OTAxZWJjZWE4NTc4ZjVkMw==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2001-10-08T21:03:34Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2001-10-08T21:03:34Z"}, "message": "URLDecoder.java: Remerge with Classpath\n\n\t* java/net/URLDecoder.java: Remerge with Classpath\n\t* java/net/URLEncoder.java: Merge with Classpath\n\nFrom-SVN: r46098", "tree": {"sha": "1c973fd835c141156e93314f4a94116ab0a74675", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c973fd835c141156e93314f4a94116ab0a74675"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bdf7869bf1de3549de62e49901ebcea8578f5d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bdf7869bf1de3549de62e49901ebcea8578f5d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bdf7869bf1de3549de62e49901ebcea8578f5d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bdf7869bf1de3549de62e49901ebcea8578f5d3/comments", "author": null, "committer": null, "parents": [{"sha": "63dd08e60d2bab6157046442633c49a2021239c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63dd08e60d2bab6157046442633c49a2021239c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63dd08e60d2bab6157046442633c49a2021239c8"}], "stats": {"total": 302, "additions": 232, "deletions": 70}, "files": [{"sha": "ff7bbf64988c7229e3fbb45c5a4d2952716a620f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bdf7869bf1de3549de62e49901ebcea8578f5d3/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bdf7869bf1de3549de62e49901ebcea8578f5d3/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=0bdf7869bf1de3549de62e49901ebcea8578f5d3", "patch": "@@ -1,3 +1,8 @@\n+2001-10-07  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/net/URLDecoder.java: Remerge with Classpath\n+\t* java/net/URLEncoder.java: Merge with Classpath\n+\n 2001-10-08  Tom Tromey  <tromey@redhat.com>\n \n \tFix for PR libgcj/4481:"}, {"sha": "9c51bc03b5cdd0b8d0abc5759fdf6c3316edb401", "filename": "libjava/java/net/URLDecoder.java", "status": "modified", "additions": 98, "deletions": 23, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bdf7869bf1de3549de62e49901ebcea8578f5d3/libjava%2Fjava%2Fnet%2FURLDecoder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bdf7869bf1de3549de62e49901ebcea8578f5d3/libjava%2Fjava%2Fnet%2FURLDecoder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLDecoder.java?ref=0bdf7869bf1de3549de62e49901ebcea8578f5d3", "patch": "@@ -28,56 +28,131 @@\n \n import java.io.UnsupportedEncodingException;\n \n-/**\n-  * This utility class contains one static method that converts a \n+ /**\n+  * This utility class contains static methods that converts a \n   * string encoded in the x-www-form-urlencoded format to the original\n-  * text.  The x-www-form-urlencoded format \n-  * replaces certain disallowed characters with\n-  * encoded equivalents.  All upper case and lower case letters in the\n-  * US alphabet remain as is, the space character (' ') is replaced with\n-  * '+' sign, and all other characters are converted to a \"%XX\" format\n-  * where XX is the hexadecimal representation of that character.  Note\n-  * that since unicode characters are 16 bits, and this method encodes only\n-  * 8 bits of information, the lower 8 bits of the character are used.\n+  * text.  The x-www-form-urlencoded format replaces certain disallowed\n+  * characters with encoded equivalents.  All upper case and lower case\n+  * letters in the US alphabet remain as is, the space character (' ')\n+  * is replaced with '+' sign, and all other characters are converted to a\n+  * \"%XX\" format where XX is the hexadecimal representation of that character\n+  * in a given character encoding (default is \"UTF-8\").\n   * <p>\n   * This method is very useful for decoding strings sent to CGI scripts\n   *\n-  * Written using on-line Java Platform 1.2 API Specification.\n+  * Written using on-line Java Platform 1.2/1.4 API Specification.\n   * Status:  Believed complete and correct.\n   *\n   * @since 1.2\n   *\n   * @author Warren Levy <warrenl@cygnus.com>\n   * @author Aaron M. Renn (arenn@urbanophile.com) (documentation comments)\n-  * @date April 22, 1999.\n+  * @author Mark Wielaard (mark@klomp.org)\n   */\n public class URLDecoder\n {\n-/**\n+ /**\n   * This method translates the passed in string from x-www-form-urlencoded\n-  * format and returns it.\n+  * format using the default encoding \"UTF-8\" to decode the hex encoded\n+  * unsafe characters.\n   *\n-  * @param source The String to convert\n+  * @param s the String to convert\n   *\n-  * @return The converted String\n+  * @return the converted String\n   */\n   public static String decode(String s)\n   {\n+    try\n+      {\n+\treturn decode(s, \"UTF-8\");\n+      }\n+    catch (UnsupportedEncodingException uee)\n+      {\n+\t// Should never happen since UTF-8 encoding should always be supported\n+\treturn s;\n+      }\n+  }\n+\n+ /**\n+  * This method translates the passed in string from x-www-form-urlencoded\n+  * format using the given character encoding to decode the hex encoded\n+  * unsafe characters.\n+  * <p>\n+  * This implementation will decode the string even if it contains\n+  * unsafe characters (characters that should have been encoded) or if the\n+  * two characters following a % do not represent a hex encoded byte.\n+  * In those cases the unsafe character or the % character will be added\n+  * verbatim to the decoded result.\n+  *\n+  * @param s the String to convert\n+  * @param encoding the character encoding to use the decode the hex encoded\n+  *        unsafe characters\n+  *\n+  * @return the converted String\n+  *\n+  * @since 1.4\n+  */\n+  public static String decode(String s, String encoding)\n+    throws UnsupportedEncodingException\n+  {\n+    StringBuffer result = new StringBuffer();\n+\n+    // First convert all '+' characters to spaces.\n     String str = s.replace('+', ' ');\n-    String result = \"\";\n+    \n+    // Then go through the whole string looking for byte encoded characters\n     int i;\n     int start = 0;\n+    byte[] bytes = null;\n+    int length = str.length();\n     while ((i = str.indexOf('%', start)) >= 0)\n       {\n-\tresult = result + str.substring(start, i) +\n-\t\t (char) Integer.parseInt(str.substring(i + 1, i + 3), 16);\n-\tstart = i + 3;\n+\t// Add all non-encoded characters to the result buffer\n+\tresult.append(str.substring(start, i));\n+\tstart = i;\n+\n+\t// Get all consecutive encoded bytes\n+\twhile ((i+2 < length) && (str.charAt(i) == '%'))\n+\t  i += 3;\n+\n+\t// Decode all these bytes\n+\tif ((bytes == null) || (bytes.length < ((i-start)/3)))\n+\t  bytes = new byte[((i-start)/3)];\n+\n+\tint index = 0;\n+\ttry\n+\t  {\n+\t    while (start < i)\n+\t      {\n+\t\tString sub = str.substring(start + 1, start + 3);\n+\t\tbytes[index] = (byte)Integer.parseInt(sub, 16);\n+\t\tindex++;\n+\t\tstart += 3;\n+\t      }\n+\t  }\n+\tcatch (NumberFormatException nfe)\n+\t  {\n+\t    // One of the hex encoded strings was bad\n+\t  }\n+\n+\t// Add the bytes as characters according to the given encoding\n+\tresult.append(new String(bytes, 0, index, encoding));\n+\n+\t// Make sure we skip to just after a % sign\n+\t// There might not have been enough encoded characters after the %\n+\t// or the hex chars were not actually hex chars (NumberFormatException)\n+\tif (start < length && s.charAt(start) == '%')\n+\t  {\n+\t    result.append('%');\n+\t    start++;\n+\t  }\n       }\n \n+    // Add any characters left\n     if (start < str.length())\n-      result = result + str.substring(start);\n+      result.append(str.substring(start));\n \n-    return result;\n+    return result.toString();\n   }\n-} // class URLDecoder\n \n+} // class URLDecoder"}, {"sha": "f39b30070d49386b05edbc35dd5b13526742f3ef", "filename": "libjava/java/net/URLEncoder.java", "status": "modified", "additions": 129, "deletions": 47, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bdf7869bf1de3549de62e49901ebcea8578f5d3/libjava%2Fjava%2Fnet%2FURLEncoder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bdf7869bf1de3549de62e49901ebcea8578f5d3/libjava%2Fjava%2Fnet%2FURLEncoder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLEncoder.java?ref=0bdf7869bf1de3549de62e49901ebcea8578f5d3", "patch": "@@ -1,71 +1,153 @@\n-// URLEncoder.java - Provides a method for encoding strings according to\n-//\t\t     application/x-www-form-urlencoded MIME type.\n+/* URLEncoder.java -- Class to convert strings to a properly encoded URL\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n package java.net;\n-import java.io.UnsupportedEncodingException;\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date April 22, 1999.\n- */\n+import java.io.UnsupportedEncodingException;\n \n /**\n- * Written using on-line Java Platform 1.2 API Specification, as well\n+ * Written using on-line Java Platform 1.2/1.4 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n  */\n \n+ /**\n+  * This utility class contains static methods that converts a \n+  * string into a fully encoded URL string in x-www-form-urlencoded\n+  * format.  This format replaces certain disallowed characters with\n+  * encoded equivalents.  All upper case and lower case letters in the\n+  * US alphabet remain as is, the space character (' ') is replaced with\n+  * '+' sign, and all other characters are converted to a \"%XX\" format\n+  * where XX is the hexadecimal representation of that character in a\n+  * certain encoding (by default \"UTF-8\").\n+  * <p>\n+  * This method is very useful for encoding strings to be sent to CGI scripts\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  * @author Mark Wielaard (mark@klomp.org)\n+  */\n public class URLEncoder\n {\n-  // This method, per the JCL, is conservative in that it encodes\n-  // some \"allowable\" characters as % triplets.\n+  /**\n+   * This method translates the passed in string into x-www-form-urlencoded\n+   * format using the standard \"UTF-8\" character encoding to hex-encode the\n+   * unsafe characters.\n+   *\n+   * @param s The String to convert\n+   *\n+   * @return The converted String\n+   */\n   public static String encode(String s)\n   {\n-    // Get the bytes in ISO-Latin-1 (i.e. 8859_1) per the JCL.\n-    // Even though it is the default in most cases, it's specified here\n-    // just in case System.getProperty(\"file.encoding\") is not \"8859_1\".\n-    String result = \"\";\n     try\n       {\n-\tbyte[] buf = s.getBytes(\"8859_1\");\n-\tint start = 0;\n-\tfor (int i = 0; i < buf.length; i++)\n-\t  // For efficiency, check the byte in order of most likely\n-\t  // possibility so as to minimize the number of comparisons.\n-\t  // Hence, exclude all the alphanumeric & allowed special chars first.\n-\t  if ((buf[i] >= 'a' && buf[i] <= 'z') ||\n-\t      (buf[i] >= 'A' && buf[i] <= 'Z') ||\n-\t      (buf[i] >= '0' && buf[i] <= '9') ||\n-\t      buf[i] == '-' || buf[i] == '_' || buf[i] == '.' || buf[i] == '*')\n-\t    ; // This is the most likely case so exclude first for efficiency.\n-\t  else if (buf[i] == ' ')\n-\t    buf[i] = (byte) '+';  // Replace space char with plus symbol.\n-\t  else\n-\t    {\n-\t      result = result + new String(buf, start, i - start, \"8859_1\") +\n-\t\t\t\"%\" + Integer.toHexString(((int) buf[i]) & 0xFF);\n-\t      start = i + 1;\n-\t    }\n-\n-\t// Append remainder of allowable chars from the string, if any.\n-\tif (start < buf.length)\n-\t  result = result +\n-\t\t   new String(buf, start, buf.length - start, \"8859_1\");\n+        return encode(s, \"UTF-8\");\n       }\n-    catch (UnsupportedEncodingException ex)\n+    catch (UnsupportedEncodingException uee)\n       {\n-\t// This should never happen as \"8859_1\" is the default encoding.\n+        // Should never happen since UTF-8 should always be supported\n \treturn s;\n       }\n+  }\n+\n+  /**\n+   * This method translates the passed in string into x-www-form-urlencoded\n+   * format using the character encoding to hex-encode the unsafe characters.\n+   *\n+   * @param s The String to convert\n+   * @param encoding The encoding to use for unsafe characters\n+   *\n+   * @return The converted String\n+   *\n+   * @since 1.4\n+   */\n+  public static String encode(String s, String encoding)\n+    throws UnsupportedEncodingException\n+  {\n+    StringBuffer result = new StringBuffer();\n+    int length = s.length();\n+    int start = 0;\n+    int i = 0;\n \n-    return result;\n+    while (true)\n+    {\n+      while ( i < length && isSafe(s.charAt(i)) )\n+\ti++;\n+\n+      // Safe character can just be added\n+      result.append(s.substring(start, i));\n+\n+      // Are we done?\n+      if (i >= length)\n+\treturn result.toString();\n+      else if (s.charAt(i) == ' ')\n+        {\n+\t  result.append('+');  // Replace space char with plus symbol.\n+\t  i++;\n+\t}\n+      else\n+\t{\n+\t  // Get all unsafe characters\n+\t  start = i;\n+\t  char c;\n+\t  while ( i < length && (c = s.charAt(i)) != ' ' && !isSafe(c) )\n+\t    i++;\n+\n+\t  // Convert them to %XY encoded strings\n+\t  String unsafe = s.substring(start,i);\n+\t  byte bytes[] = unsafe.getBytes(encoding);\n+\t  for (int j = 0; j < bytes.length; j++)\n+\t    {\n+\t      result.append('%');\n+\t      result.append(Integer.toHexString(((int) bytes[j]) & 0xFF));\n+\t    }\n+\t}\n+      start = i;\n+    }\n   }\n-}\n+\n+  /**\n+   * Private static method that returns true if the given char is either\n+   * a uppercase or lowercase letter from 'a' till 'z', or a digit froim\n+   * '0' till '9', or one of the characters '-', '_', '.' or '*'. Such\n+   * 'safe' character don't have to be url encoded.\n+   */\n+  private static boolean isSafe(char c)\n+  {\n+    return  ((c >= 'a' && c <= 'z') ||\n+\t     (c >= 'A' && c <= 'Z') ||\n+\t     (c >= '0' && c <= '9') ||\n+\t     c == '-' || c == '_' || c == '.' || c == '*');\n+  }\n+\n+  /**\n+   * Private constructor that does nothing. Included to avoid a default\n+   * public constructor being created by the compiler.\n+   */\n+  private URLEncoder() { }\n+\n+} // class URLEncoder"}]}