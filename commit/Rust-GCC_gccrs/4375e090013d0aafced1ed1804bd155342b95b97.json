{"sha": "4375e090013d0aafced1ed1804bd155342b95b97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM3NWUwOTAwMTNkMGFhZmNlZDFlZDE4MDRiZDE1NTM0MmI5NWI5Nw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-08-23T02:51:23Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-08-23T02:51:23Z"}, "message": "iq2000.c: Follow spelling conventions.\n\n\t* config/iq2000/iq2000.c: Follow spelling conventions.\n\t* config/iq2000/iq2000.h: Likewise.\n\t* config/mn10300/mn10300.c: Likewise.\n\nFrom-SVN: r70726", "tree": {"sha": "c654dfbfdb68ab670449fc8f01dff52f0515df92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c654dfbfdb68ab670449fc8f01dff52f0515df92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4375e090013d0aafced1ed1804bd155342b95b97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4375e090013d0aafced1ed1804bd155342b95b97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4375e090013d0aafced1ed1804bd155342b95b97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4375e090013d0aafced1ed1804bd155342b95b97/comments", "author": null, "committer": null, "parents": [{"sha": "a36b8cb8400c579cc03b9c83d031166f62b9c2a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a36b8cb8400c579cc03b9c83d031166f62b9c2a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a36b8cb8400c579cc03b9c83d031166f62b9c2a9"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "527d14ce9b32d4b4857c514d6cd588ff21d31fc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4375e090013d0aafced1ed1804bd155342b95b97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4375e090013d0aafced1ed1804bd155342b95b97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4375e090013d0aafced1ed1804bd155342b95b97", "patch": "@@ -1,3 +1,9 @@\n+2003-08-22  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/iq2000/iq2000.c: Follow spelling conventions.\n+\t* config/iq2000/iq2000.h: Likewise.\n+\t* config/mn10300/mn10300.c: Likewise.\n+\n 2003-08-22  Jason Eckhardt  <jle@rice.edu>\n \n \t* config/i860/i860.c (output_move_double): Don't set latehalf"}, {"sha": "e54f495f3353f8c130909ae1c2f69e9f8e2dd390", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4375e090013d0aafced1ed1804bd155342b95b97/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4375e090013d0aafced1ed1804bd155342b95b97/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=4375e090013d0aafced1ed1804bd155342b95b97", "patch": "@@ -420,7 +420,7 @@ iq2000_reg_mode_ok_for_base_p (rtx reg,\n }\n \n /* Return a nonzero value if XINSN is a legitimate address for a\n-   memory operand of the indicated MODE.  STRICT is non-zero if this\n+   memory operand of the indicated MODE.  STRICT is nonzero if this\n    function is called during reload.  */\n \n int\n@@ -1195,7 +1195,7 @@ gen_conditional_branch (rtx operands[], enum rtx_code test_code)\n \t  test_code = NE;\n \t}\n       else if (GET_CODE (cmp1) == CONST_INT && INTVAL (cmp1) != 0)\n-\t/* We don't want to build a comparison against a non-zero\n+\t/* We don't want to build a comparison against a nonzero\n \t   constant.  */\n \tcmp1 = force_reg (mode, cmp1);\n \n@@ -2525,7 +2525,7 @@ iq2000_can_use_return_insn (void)\n   return compute_frame_size (get_frame_size ()) == 0;\n }\n \f\n-/* Returns non-zero if X contains a SYMBOL_REF.  */\n+/* Returns nonzero if X contains a SYMBOL_REF.  */\n \n static int\n symbolic_expression_p (rtx x)\n@@ -2679,11 +2679,11 @@ iq2000_adjust_insn_length (rtx insn, int length)\n    INSN is the branch instruction.  OPERANDS[0] is the condition.\n    OPERANDS[1] is the target of the branch.  OPERANDS[2] is the target\n    of the first operand to the condition.  If TWO_OPERANDS_P is\n-   non-zero the comparison takes two operands; OPERANDS[3] will be the\n+   nonzero the comparison takes two operands; OPERANDS[3] will be the\n    second operand.\n \n-   If INVERTED_P is non-zero we are to branch if the condition does\n-   not hold.  If FLOAT_P is non-zero this is a floating-point comparison.\n+   If INVERTED_P is nonzero we are to branch if the condition does\n+   not hold.  If FLOAT_P is nonzero this is a floating-point comparison.\n \n    LENGTH is the length (in bytes) of the sequence we are to generate.\n    That tells us whether to generate a simple conditional branch, or a\n@@ -2696,7 +2696,7 @@ iq2000_output_conditional_branch (rtx insn, rtx *operands, int two_operands_p,\n   static char buffer[200];\n   /* The kind of comparison we are doing.  */\n   enum rtx_code code = GET_CODE (operands[0]);\n-  /* Non-zero if the opcode for the comparison needs a `z' indicating\n+  /* Nonzero if the opcode for the comparison needs a `z' indicating\n      that it is a comparision against zero.  */\n   int need_z_p;\n   /* A string to use in the assembly output to represent the first\n@@ -2721,7 +2721,7 @@ iq2000_output_conditional_branch (rtx insn, rtx *operands, int two_operands_p,\n \t subtract B from A and then look at the sign bit.  But, if we\n \t are doing an unsigned comparison, and B is zero, we don't\n \t have to do the subtraction.  Instead, we can just check to\n-\t see if A is non-zero.  Thus, we change the CODE here to\n+\t see if A is nonzero.  Thus, we change the CODE here to\n \t reflect the simpler comparison operation.  */\n       switch (code)\n \t{"}, {"sha": "677fee600c6e061e86c4f190ffa5ab3d70924acd", "filename": "gcc/config/iq2000/iq2000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4375e090013d0aafced1ed1804bd155342b95b97/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4375e090013d0aafced1ed1804bd155342b95b97/gcc%2Fconfig%2Fiq2000%2Fiq2000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.h?ref=4375e090013d0aafced1ed1804bd155342b95b97", "patch": "@@ -1250,7 +1250,7 @@ extern void\t\tsbss_section (void);\n \n /* Certain machines have the property that some registers cannot be\n    copied to some other registers without using memory.  Define this\n-   macro on those machines to be a C expression that is non-zero if\n+   macro on those machines to be a C expression that is nonzero if\n    objects of mode MODE in registers of CLASS1 can only be copied to\n    registers of class CLASS2 by storing a register of CLASS1 into\n    memory and loading that memory location into a register of CLASS2."}, {"sha": "3e14de3764397b3c8230065c341ec8dbe8ea4c5c", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4375e090013d0aafced1ed1804bd155342b95b97/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4375e090013d0aafced1ed1804bd155342b95b97/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=4375e090013d0aafced1ed1804bd155342b95b97", "patch": "@@ -695,7 +695,7 @@ expand_prologue ()\n #define SIZE_FMOV_SP(S,N) (SIZE_FMOV_SP_ ((unsigned HOST_WIDE_INT)(S), (N)))\n \n       /* Consider alternative save_sp_merge only if we don't need the\n-\t frame pointer and size is non-zero.  */\n+\t frame pointer and size is nonzero.  */\n       if (! frame_pointer_needed && size)\n \t{\n \t  /* Insn: add -(size + 4 * num_regs_to_save), sp.  */\n@@ -750,7 +750,7 @@ expand_prologue ()\n \t}\n \n       /* Consider alternative save_a0_merge only if we don't need a\n-\t frame pointer, size is non-zero and the user hasn't\n+\t frame pointer, size is nonzero and the user hasn't\n \t changed the calling conventions of a0.  */\n       if (! frame_pointer_needed && size\n \t  && call_used_regs[FIRST_ADDRESS_REGNUM]\n@@ -1855,7 +1855,7 @@ legitimize_pic_address (orig, reg)\n }\n \n /* Return zero if X references a SYMBOL_REF or LABEL_REF whose symbol\n-   isn't protected by a PIC unspec; non-zero otherwise.  */\n+   isn't protected by a PIC unspec; nonzero otherwise.  */\n int\n legitimate_pic_operand_p (x)\n      rtx x;"}]}