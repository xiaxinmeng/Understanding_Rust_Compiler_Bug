{"sha": "6a52ccb3b897320a90cc86709249db167605a42f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE1MmNjYjNiODk3MzIwYTkwY2M4NjcwOTI0OWRiMTY3NjA1YTQyZg==", "commit": {"author": {"name": "Alexander Potapenko", "email": "glider@google.com", "date": "2013-02-11T22:36:23Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2013-02-11T22:36:23Z"}, "message": "re PR sanitizer/55617 (static constructors are not being instrumented correctly on darwin)\n\n2013-02-11  Alexander Potapenko <glider@google.com>\n\t    Jack Howarth  <howarth@bromo.med.uc.edu>\n\t    Jakub Jelinek  <jakub@redhat.com>\n\n\tPR sanitizer/55617\n\t* config/darwin.c (cdtor_record): Rename ctor_record.\n\t(sort_cdtor_records): Rename sort_ctor_records.\n\t(finalize_dtors): New routine to sort destructors by\n\tpriority before use in assemble_integer.\n\t(machopic_asm_out_destructor): Use finalize_dtors if needed.\n\ntestsuite:\n2013-02-11  Alexander Potapenko <glider@google.com>\n\t    Jack Howarth  <howarth@bromo.med.uc.edu>\n\t    Jakub Jelinek  <jakub@redhat.com>\n\n\tPR sanitizer/55617\n\t* g++.dg/asan/pr55617.C: Run on all targets.\n\nCo-Authored-By: Jack Howarth <howarth@bromo.med.uc.edu>\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r195956", "tree": {"sha": "4c88f130401ee1abfa6d0b6727716bc58e18cfcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c88f130401ee1abfa6d0b6727716bc58e18cfcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a52ccb3b897320a90cc86709249db167605a42f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a52ccb3b897320a90cc86709249db167605a42f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a52ccb3b897320a90cc86709249db167605a42f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a52ccb3b897320a90cc86709249db167605a42f/comments", "author": {"login": "ramosian-glider", "id": 912627, "node_id": "MDQ6VXNlcjkxMjYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/912627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ramosian-glider", "html_url": "https://github.com/ramosian-glider", "followers_url": "https://api.github.com/users/ramosian-glider/followers", "following_url": "https://api.github.com/users/ramosian-glider/following{/other_user}", "gists_url": "https://api.github.com/users/ramosian-glider/gists{/gist_id}", "starred_url": "https://api.github.com/users/ramosian-glider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ramosian-glider/subscriptions", "organizations_url": "https://api.github.com/users/ramosian-glider/orgs", "repos_url": "https://api.github.com/users/ramosian-glider/repos", "events_url": "https://api.github.com/users/ramosian-glider/events{/privacy}", "received_events_url": "https://api.github.com/users/ramosian-glider/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "913bd57d50235b3af93b6dbefbc9d94cd1fd5005", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/913bd57d50235b3af93b6dbefbc9d94cd1fd5005", "html_url": "https://github.com/Rust-GCC/gccrs/commit/913bd57d50235b3af93b6dbefbc9d94cd1fd5005"}], "stats": {"total": 84, "additions": 61, "deletions": 23}, "files": [{"sha": "1337da89195a402bdd6ae50e585e7dd809591204", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a52ccb3b897320a90cc86709249db167605a42f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a52ccb3b897320a90cc86709249db167605a42f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a52ccb3b897320a90cc86709249db167605a42f", "patch": "@@ -1,3 +1,14 @@\n+2013-02-11  Alexander Potapenko <glider@google.com>\n+\t    Jack Howarth  <howarth@bromo.med.uc.edu>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/55617\n+\t* config/darwin.c (cdtor_record): Rename ctor_record.\n+\t(sort_cdtor_records): Rename sort_ctor_records.\n+\t(finalize_dtors): New routine to sort destructors by\n+\tpriority before use in assemble_integer.\n+\t(machopic_asm_out_destructor): Use finalize_dtors if needed.\n+\n 2013-02-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR rtl-optimization/56275"}, {"sha": "a049a5d079623647d2a0262080ee3efa4d31f552", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 42, "deletions": 22, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a52ccb3b897320a90cc86709249db167605a42f/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a52ccb3b897320a90cc86709249db167605a42f/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=6a52ccb3b897320a90cc86709249db167605a42f", "patch": "@@ -83,13 +83,14 @@ along with GCC; see the file COPYING3.  If not see\n    kernel) the stubs might still be required, and this will be set true.  */\n int darwin_emit_branch_islands = false;\n \n-typedef struct GTY(()) ctor_record {\n+typedef struct GTY(()) cdtor_record {\n   rtx symbol;\n-  int priority;\t\t/* constructor priority */\n+  int priority;\t\t/* [con/de]structor priority */\n   int position;\t\t/* original position */\n-} ctor_record;\n+} cdtor_record;\n \n-static GTY(()) vec<ctor_record, va_gc> *ctors = NULL;\n+static GTY(()) vec<cdtor_record, va_gc> *ctors = NULL;\n+static GTY(()) vec<cdtor_record, va_gc> *dtors = NULL;\n \n /* A flag to determine whether we are running c++ or obj-c++.  This has to be\n    settable from non-c-family contexts too (i.e. we can't use the c_dialect_\n@@ -1716,62 +1717,79 @@ machopic_select_rtx_section (enum machine_mode mode, rtx x,\n void\n machopic_asm_out_constructor (rtx symbol, int priority ATTRIBUTE_UNUSED)\n {\n-  ctor_record new_elt = {symbol, priority, vec_safe_length (ctors)};\n+  cdtor_record new_elt = {symbol, priority, vec_safe_length (ctors)};\n \n   vec_safe_push (ctors, new_elt);\n \n   if (! MACHOPIC_INDIRECT)\n     fprintf (asm_out_file, \".reference .constructors_used\\n\");\n }\n \n+void\n+machopic_asm_out_destructor (rtx symbol, int priority ATTRIBUTE_UNUSED)\n+{\n+  cdtor_record new_elt = {symbol, priority, vec_safe_length (dtors)};\n+\n+  vec_safe_push (dtors, new_elt);\n+\n+  if (! MACHOPIC_INDIRECT)\n+    fprintf (asm_out_file, \".reference .destructors_used\\n\");\n+}\n+\n static int\n-sort_ctor_records (const void * a, const void * b)\n+sort_cdtor_records (const void * a, const void * b)\n {\n-  const ctor_record *ca = (const ctor_record *)a;\n-  const ctor_record *cb = (const ctor_record *)b;\n-  if (ca->priority > cb->priority)\n+  const cdtor_record *cda = (const cdtor_record *)a;\n+  const cdtor_record *cdb = (const cdtor_record *)b;\n+  if (cda->priority > cdb->priority)\n     return 1;\n-  if (ca->priority < cb->priority)\n+  if (cda->priority < cdb->priority)\n     return -1;\n-  if (ca->position > cb->position)\n+  if (cda->position > cdb->position)\n     return 1;\n-  if (ca->position < cb->position)\n+  if (cda->position < cdb->position)\n     return -1;\n   return 0;\n }\n \n static void \n-finalize_ctors()\n+finalize_ctors ()\n {\n   unsigned int i;\n-  ctor_record *elt;\n+  cdtor_record *elt;\n  \n   if (MACHOPIC_INDIRECT)\n     switch_to_section (darwin_sections[mod_init_section]);\n   else\n     switch_to_section (darwin_sections[constructor_section]);\n \n   if (vec_safe_length (ctors) > 1)\n-    ctors->qsort (sort_ctor_records);\n+    ctors->qsort (sort_cdtor_records);\n   FOR_EACH_VEC_SAFE_ELT (ctors, i, elt)\n     {\n       assemble_align (POINTER_SIZE);\n       assemble_integer (elt->symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n     }\n }\n \n-void\n-machopic_asm_out_destructor (rtx symbol, int priority ATTRIBUTE_UNUSED)\n+static void\n+finalize_dtors ()\n {\n+  unsigned int i;\n+  cdtor_record *elt;\n+\n   if (MACHOPIC_INDIRECT)\n     switch_to_section (darwin_sections[mod_term_section]);\n   else\n     switch_to_section (darwin_sections[destructor_section]);\n-  assemble_align (POINTER_SIZE);\n-  assemble_integer (symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n \n-  if (! MACHOPIC_INDIRECT)\n-    fprintf (asm_out_file, \".reference .destructors_used\\n\");\n+  if (vec_safe_length (dtors) > 1)\n+    dtors->qsort (sort_cdtor_records);\n+  FOR_EACH_VEC_SAFE_ELT (dtors, i, elt)\n+    {\n+      assemble_align (POINTER_SIZE);\n+      assemble_integer (elt->symbol, POINTER_SIZE / BITS_PER_UNIT, POINTER_SIZE, 1);\n+    }\n }\n \n void\n@@ -2804,7 +2822,9 @@ void\n darwin_file_end (void)\n {\n   if (!vec_safe_is_empty (ctors))\n-    finalize_ctors();\n+    finalize_ctors ();\n+  if (!vec_safe_is_empty (dtors))\n+    finalize_dtors ();\n   machopic_finish (asm_out_file);\n   if (strcmp (lang_hooks.name, \"GNU C++\") == 0)\n     {"}, {"sha": "034bbd2d619a8bd304e0967444356e2e1f8c592d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a52ccb3b897320a90cc86709249db167605a42f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a52ccb3b897320a90cc86709249db167605a42f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6a52ccb3b897320a90cc86709249db167605a42f", "patch": "@@ -1,3 +1,10 @@\n+2013-02-11  Alexander Potapenko <glider@google.com>\n+\t    Jack Howarth  <howarth@bromo.med.uc.edu>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/55617\n+\t* g++.dg/asan/pr55617.C: Run on all targets.\n+\n 2013-02-11  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR rtl-optimization/56275"}, {"sha": "02f0daea1ea19ae5afdd10b37d37caa1335f549f", "filename": "gcc/testsuite/g++.dg/asan/pr55617.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a52ccb3b897320a90cc86709249db167605a42f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fpr55617.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a52ccb3b897320a90cc86709249db167605a42f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fpr55617.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fasan%2Fpr55617.C?ref=6a52ccb3b897320a90cc86709249db167605a42f", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do run { target { i?86-*-darwin* x86_64-*-darwin* } } }\n+// { dg-do run }\n \n struct c18 { \n   virtual void bar() { }"}]}