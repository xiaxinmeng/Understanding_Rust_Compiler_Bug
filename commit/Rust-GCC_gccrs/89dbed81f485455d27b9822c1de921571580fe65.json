{"sha": "89dbed81f485455d27b9822c1de921571580fe65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlkYmVkODFmNDg1NDU1ZDI3Yjk4MjJjMWRlOTIxNTcxNTgwZmU2NQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-09-10T15:09:39Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-09-10T15:09:39Z"}, "message": "bb-reorder.c, [...]: Fix comment typos.\n\n\t* bb-reorder.c, c-common.c, c-incpath.c, c-typeck.c,\n\tgenrecog.c, lambda-code.c, mips-tdump.c, mips-tfile.c,\n\tpasses.c, tree-data-ref.c, tree-data-ref.h, tree-mudflap.c,\n\ttree-scalar-evolution.c, tree-ssa-copyrename.c,\n\ttree-ssa-live.c, tree-ssa-live.h: Fix comment typos.\n\nFrom-SVN: r87302", "tree": {"sha": "eba8a248439b41ccd8953fe4272dee8155596f4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eba8a248439b41ccd8953fe4272dee8155596f4d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89dbed81f485455d27b9822c1de921571580fe65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89dbed81f485455d27b9822c1de921571580fe65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89dbed81f485455d27b9822c1de921571580fe65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89dbed81f485455d27b9822c1de921571580fe65/comments", "author": null, "committer": null, "parents": [{"sha": "094e84faf02b3bc9c09cfadf76110965176d688f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/094e84faf02b3bc9c09cfadf76110965176d688f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/094e84faf02b3bc9c09cfadf76110965176d688f"}], "stats": {"total": 56, "additions": 32, "deletions": 24}, "files": [{"sha": "982b268b6d5471d00c4cadd1ee2cbc1c3537fa2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89dbed81f485455d27b9822c1de921571580fe65/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89dbed81f485455d27b9822c1de921571580fe65/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89dbed81f485455d27b9822c1de921571580fe65", "patch": "@@ -1,3 +1,11 @@\n+2004-09-10  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* bb-reorder.c, c-common.c, c-incpath.c, c-typeck.c,\n+\tgenrecog.c, lambda-code.c, mips-tdump.c, mips-tfile.c,\n+\tpasses.c, tree-data-ref.c, tree-data-ref.h, tree-mudflap.c,\n+\ttree-scalar-evolution.c, tree-ssa-copyrename.c,\n+\ttree-ssa-live.c, tree-ssa-live.h: Fix comment typos.\n+\n 2004-09-10  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/frv/frv.md (UNSPEC_MASACCS, UNSPEC_MDASACCS): New constants."}, {"sha": "11db0c58bd848d0e7015c5a3ad02a8a2fa0ad532", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=89dbed81f485455d27b9822c1de921571580fe65", "patch": "@@ -517,7 +517,7 @@ find_traces_1_round (int branch_th, int exec_th, gcov_type count_th,\n \t      freq = EDGE_FREQUENCY (e);\n \n \t      /* Edge that cannot be fallthru or improbable or infrequent\n-\t\t successor (ie. it is unsuitable successor).  */\n+\t\t successor (i.e. it is unsuitable successor).  */\n \t      if (!(e->flags & EDGE_CAN_FALLTHRU) || (e->flags & EDGE_COMPLEX)\n \t\t  || prob < branch_th || freq < exec_th || e->count < count_th)\n \t\tcontinue;"}, {"sha": "2b13588c85a5a3037d425c5e2db9aca690573c48", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=89dbed81f485455d27b9822c1de921571580fe65", "patch": "@@ -1441,14 +1441,14 @@ check_case_value (tree value)\n }\n \f\n /* See if the case values LOW and HIGH are in the range of the original\n-   type (ie. before the default conversion to int) of the switch testing\n+   type (i.e. before the default conversion to int) of the switch testing\n    expression.\n    TYPE is the promoted type of the testing expression, and ORIG_TYPE is\n    the type before promoting it.  CASE_LOW_P is a pointer to the lower\n    bound of the case label, and CASE_HIGH_P is the upper bound or NULL\n    if the case is not a case range.\n    The caller has to make sure that we are not called with NULL for\n-   CASE_LOW_P (ie. the default case).\n+   CASE_LOW_P (i.e. the default case).\n    Returns true if the case label is in range of ORIG_TYPE (satured or\n    untouched) or false if the label is out of range.  */\n "}, {"sha": "1a985f9c9aa16c05f769ef2a8f2dcdf580a2b824", "filename": "gcc/c-incpath.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Fc-incpath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Fc-incpath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-incpath.c?ref=89dbed81f485455d27b9822c1de921571580fe65", "patch": "@@ -128,7 +128,7 @@ add_standard_paths (const char *sysroot, const char *iprefix, int cxx_stdinc)\n   if (iprefix && (len = cpp_GCC_INCLUDE_DIR_len) != 0)\n     {\n       /* Look for directories that start with the standard prefix.\n-\t \"Translate\" them, ie. replace /usr/local/lib/gcc... with\n+\t \"Translate\" them, i.e. replace /usr/local/lib/gcc... with\n \t IPREFIX and search them first.  */\n       for (p = cpp_include_defaults; p->fname; p++)\n \t{"}, {"sha": "b06085d8c2c60a841e778fb8455fc3257f265387", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=89dbed81f485455d27b9822c1de921571580fe65", "patch": "@@ -6409,7 +6409,7 @@ struct c_switch {\n   /* The SWITCH_STMT being built.  */\n   tree switch_stmt;\n \n-  /* The original type of the testing expression, ie. before the\n+  /* The original type of the testing expression, i.e. before the\n      default conversion is applied.  */\n   tree orig_type;\n "}, {"sha": "64cd905b0caab8c05322ec07daa7095819519234", "filename": "gcc/genrecog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=89dbed81f485455d27b9822c1de921571580fe65", "patch": "@@ -992,7 +992,7 @@ add_to_sequence (rtx pattern, struct decision_head *last, const char *position,\n \tif (allows_const_int)\n \t  mode = VOIDmode;\n \n-\t/* Accept the operand, ie. record it in `operands'.  */\n+\t/* Accept the operand, i.e. record it in `operands'.  */\n \ttest = new_decision_test (DT_accept_op, &place);\n \ttest->u.opno = XINT (pattern, 0);\n "}, {"sha": "21bea190574275193190c3493638523ff926a043", "filename": "gcc/lambda-code.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Flambda-code.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Flambda-code.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flambda-code.c?ref=89dbed81f485455d27b9822c1de921571580fe65", "patch": "@@ -1931,7 +1931,7 @@ lambda_vector_lexico_pos (lambda_vector v, unsigned n)\n    matrix T is legal when applied to a loop nest with a set of\n    lexicographically non-negative distance vectors RDG if and only if\n    for each vector d in RDG, (T.d >= 0) is lexicographically positive.\n-   ie.: if and only if it transforms the lexicographically positive\n+   i.e.: if and only if it transforms the lexicographically positive\n    distance vectors to lexicographically positive vectors.  Note that\n    a unimodular matrix must transform the zero vector (and only it) to\n    the zero vector.\" S.Muchnick.  */"}, {"sha": "cb3669a0d7179a665fb3e8675d0050f7c40dfc72", "filename": "gcc/mips-tdump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Fmips-tdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Fmips-tdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tdump.c?ref=89dbed81f485455d27b9822c1de921571580fe65", "patch": "@@ -122,7 +122,7 @@ typedef enum st {\n   st_Enum\t= stEnum,\t/* enum */\n #endif\n   st_Str\t= stStr,\t/* string */\n-  st_Number\t= stNumber,\t/* pure number (ie. 4 NOR 2+2) */\n+  st_Number\t= stNumber,\t/* pure number (i.e. 4 NOR 2+2) */\n   st_Expr\t= stExpr,\t/* 2+2 vs. 4 */\n   st_Type\t= stType,\t/* post-coercion SER */\n   st_Max\t= stMax\t\t/* max type+1 */"}, {"sha": "4adc662a5c2a088b6af4ea5c85ae48c0c402e2a5", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=89dbed81f485455d27b9822c1de921571580fe65", "patch": "@@ -737,7 +737,7 @@ typedef enum st {\n   st_StaticProc\t= stStaticProc,\t/* load time only static procs */\n   st_Constant\t= stConstant,\t/* const */\n   st_Str\t= stStr,\t/* string */\n-  st_Number\t= stNumber,\t/* pure number (ie. 4 NOR 2+2) */\n+  st_Number\t= stNumber,\t/* pure number (i.e. 4 NOR 2+2) */\n   st_Expr\t= stExpr,\t/* 2+2 vs. 4 */\n   st_Type\t= stType,\t/* post-coercion SER */\n   st_Max\t= stMax\t\t/* max type+1 */"}, {"sha": "9b4e7838624e6779965e7aa6647249ed1c08a443", "filename": "gcc/passes.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=89dbed81f485455d27b9822c1de921571580fe65", "patch": "@@ -407,7 +407,7 @@ rest_of_handle_stack_regs (void)\n }\n #endif\n \n-/* Track the variables, ie. compute where the variable is stored at each position in function.  */\n+/* Track the variables, i.e. compute where the variable is stored at each position in function.  */\n static void\n rest_of_handle_variable_tracking (void)\n {\n@@ -1570,7 +1570,7 @@ rest_of_clean_state (void)\n    after all tree passes have finished for a single function, and we\n    have expanded the function body from trees to RTL.\n    Once we are here, we have decided that we're supposed to output\n-   that function, ie. that we should write assembler code for it.\n+   that function, i.e. that we should write assembler code for it.\n \n    We run a series of low-level passes here on the function's RTL\n    representation.  Each pass is called via a rest_of_* function.  */"}, {"sha": "3436c3d33d2455090c10bb1806a5dfddc6b62668", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=89dbed81f485455d27b9822c1de921571580fe65", "patch": "@@ -492,8 +492,8 @@ dump_data_dependence_direction (FILE *file,\n \n /* Given an ARRAY_REF node REF, records its access functions.\n    Example: given A[i][3], record in ACCESS_FNS the opnd1 function,\n-   ie. the constant \"3\", then recursively call the function on opnd0,\n-   ie. the ARRAY_REF \"A[i]\".  The function returns the base name:\n+   i.e. the constant \"3\", then recursively call the function on opnd0,\n+   i.e. the ARRAY_REF \"A[i]\".  The function returns the base name:\n    \"A\".  */\n \n static tree\n@@ -958,7 +958,7 @@ analyze_subscript_affine_affine (tree chrec_a,\n      For answering to the question: \"Is there a dependence?\" we have\n      to prove that there exists a solution to the Diophantine\n      equation, and that the solution is in the iteration domain,\n-     ie. the solution is positive or zero, and that the solution\n+     i.e. the solution is positive or zero, and that the solution\n      happens before the upper bound loop.nb_iterations.  Otherwise\n      there is no dependence.  This function outputs a description of\n      the iterations that hold the intersections.  */\n@@ -1049,7 +1049,7 @@ analyze_subscript_affine_affine (tree chrec_a,\n       if (!tree_fold_divides_p (integer_type_node, gcd_alpha_beta, gamma))\n \t{\n \t  /* The \"gcd-test\" has determined that there is no integer\n-\t     solution, ie. there is no dependence.  */\n+\t     solution, i.e. there is no dependence.  */\n \t  *overlaps_a = chrec_known;\n \t  *overlaps_b = chrec_known;\n \t}\n@@ -1717,7 +1717,7 @@ compute_affine_dependence (struct data_dependence_relation *ddr)\n \n /* Compute a subset of the data dependence relation graph.  Don't\n    compute read-read relations, and avoid the computation of the\n-   opposite relation, ie. when AB has been computed, don't compute BA.\n+   opposite relation, i.e. when AB has been computed, don't compute BA.\n    DATAREFS contains a list of data references, and the result is set\n    in DEPENDENCE_RELATIONS.  */\n "}, {"sha": "8caafa43ffd1dfae1239afdfab546aeab8252a86", "filename": "gcc/tree-data-ref.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Ftree-data-ref.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Ftree-data-ref.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.h?ref=89dbed81f485455d27b9822c1de921571580fe65", "patch": "@@ -86,7 +86,7 @@ struct subscript\n   \n   /* Distance from the iteration that access a conflicting element in\n      A to the iteration that access this same conflicting element in\n-     B.  The distance is a tree scalar expression, ie. a constant or a\n+     B.  The distance is a tree scalar expression, i.e. a constant or a\n      symbolic expression, but certainly not a chrec function.  */\n   tree distance;\n };"}, {"sha": "18cddf8d4fe5c456b5a72d90b81dd7387c4110d7", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=89dbed81f485455d27b9822c1de921571580fe65", "patch": "@@ -634,7 +634,7 @@ mf_build_check_statement_for (tree addr, tree size,\n      The lowered GIMPLE tree representing this code is in the statement\n      list starting at 'head'.\n \n-     We can insert this now in the current basic block, ie. the one that\n+     We can insert this now in the current basic block, i.e. the one that\n      the statement we're instrumenting was originally in.  */\n   bsi = bsi_last (cond_bb);\n   for (tsi = head; ! tsi_end_p (tsi); tsi_next (&tsi))"}, {"sha": "48da0d25575bb8fa30e19fb19162407ff9055c59", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=89dbed81f485455d27b9822c1de921571580fe65", "patch": "@@ -1367,7 +1367,7 @@ follow_ssa_edge_in_condition_phi_branch (int i,\n     }\n \n   /* This case occurs when one of the condition branches sets \n-     the variable to a constant: ie. a phi-node like\n+     the variable to a constant: i.e. a phi-node like\n      \"a_2 = PHI <a_7(5), 2(6)>;\".  \n \t \n      FIXME:  This case have to be refined correctly: \n@@ -1491,7 +1491,7 @@ follow_ssa_edge (struct loop *loop,\n \treturn true;\n \t  \n       /* Otherwise, the evolution of the HALTING_PHI depends\n-\t on the evolution of another loop-phi-node, ie. the\n+\t on the evolution of another loop-phi-node, i.e. the\n \t evolution function is a higher degree polynomial.  */\n       if (def_loop == loop)\n \treturn false;\n@@ -1564,7 +1564,7 @@ analyze_evolution_in_loop (tree loop_phi_node,\n \t      \n       /* When it is impossible to go back on the same\n \t loop_phi_node by following the ssa edges, the\n-\t evolution is represented by a peeled chrec, ie. the\n+\t evolution is represented by a peeled chrec, i.e. the\n \t first iteration, EV_FN has the value INIT_COND, then\n \t all the other iterations it has the value of ARG.  \n \t For the moment, PEELED_CHREC nodes are not built.  */"}, {"sha": "4f95d20e56965d1f4ec8b6fdfc604201e6dcd4b3", "filename": "gcc/tree-ssa-copyrename.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Ftree-ssa-copyrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Ftree-ssa-copyrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copyrename.c?ref=89dbed81f485455d27b9822c1de921571580fe65", "patch": "@@ -48,7 +48,7 @@ extern void rename_ssa_copies (void);\n \n    Each copy is examined to determine if it is possible to rename the base\n    variable of one of the operands to the same variable as the other operand.\n-   ie.\n+   i.e.\n    T.3_5 = <blah>\n    a_1 = T.3_5\n "}, {"sha": "3c4825ef03c45b307e00658b1e4a93ba4bfa15e4", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=89dbed81f485455d27b9822c1de921571580fe65", "patch": "@@ -133,7 +133,7 @@ var_union (var_map map, tree var1, tree var2)\n       if (map->compact_to_partition)\n         p2 = map->compact_to_partition[p2];\n \n-      /* If there is no root_var set, or its not a user variable, set the\n+      /* If there is no root_var set, or it's not a user variable, set the\n \t root_var to this one.  */\n       if (!root_var || (DECL_P (root_var) && DECL_IGNORED_P (root_var)))\n         {"}, {"sha": "5bba958088c5a213a3be0660e03230abaf3c8cee", "filename": "gcc/tree-ssa-live.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Ftree-ssa-live.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89dbed81f485455d27b9822c1de921571580fe65/gcc%2Ftree-ssa-live.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.h?ref=89dbed81f485455d27b9822c1de921571580fe65", "patch": "@@ -130,7 +130,7 @@ static inline tree version_to_var (var_map map, int version)\n  \n \n /* Given VAR, return the partition number in MAP which contains it.  \n-   NO_PARTITION is returned if its not in any partition.  */\n+   NO_PARTITION is returned if it's not in any partition.  */\n \n static inline int\n var_to_partition (var_map map, tree var)"}]}