{"sha": "fd073021172d998008743739661bb570a174f76e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQwNzMwMjExNzJkOTk4MDA4NzQzNzM5NjYxYmI1NzBhMTc0Zjc2ZQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-04-23T13:47:27Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-04-23T13:47:27Z"}, "message": "(cmphi): Fixed when next CC user is unsigned.\n\n(mov[hq]i-[23]): New patterns for mem-indirect moves.\n(movhf,movtqf): Corrected.\n\nFrom-SVN: r13963", "tree": {"sha": "fdd069eaa4a5156a8cc713c48549cc961134fb11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdd069eaa4a5156a8cc713c48549cc961134fb11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd073021172d998008743739661bb570a174f76e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd073021172d998008743739661bb570a174f76e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd073021172d998008743739661bb570a174f76e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd073021172d998008743739661bb570a174f76e/comments", "author": null, "committer": null, "parents": [{"sha": "31c21e0c02df97119c81c4e6838f66ac814cf675", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31c21e0c02df97119c81c4e6838f66ac814cf675", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31c21e0c02df97119c81c4e6838f66ac814cf675"}], "stats": {"total": 87, "additions": 82, "deletions": 5}, "files": [{"sha": "72fa0b38f471a4b1feb48859f79856826dcfbde2", "filename": "gcc/config/1750a/1750a.md", "status": "modified", "additions": 82, "deletions": 5, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd073021172d998008743739661bb570a174f76e/gcc%2Fconfig%2F1750a%2F1750a.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd073021172d998008743739661bb570a174f76e/gcc%2Fconfig%2F1750a%2F1750a.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.md?ref=fd073021172d998008743739661bb570a174f76e", "patch": "@@ -195,9 +195,21 @@\n         (compare (match_operand:HI 0 \"general_operand\" \"r,r\")\n                  (match_operand:HI 1 \"general_operand\" \"r,m\")))]\n   \"\"\n-  \"@\n-    dcr r%0,r%1\n-    dc  r%0,%1 \")\n+  \"*\n+   {\n+     if (next_cc_user_is_unsigned (insn))\n+       {\n+         if (which_alternative == 0)\n+\t   return \\\"ducr.m %0,%1\\\";\n+\t return \\\"duc.m %0,%1\\\";\n+       }\n+     else\n+       {\n+         if (which_alternative == 0)\n+           return \\\"dcr r%0,r%1\\\";\n+         return \\\"dc  r%0,%1\\\";\n+       }\n+   } \")\n \n (define_insn \"cmphf\"\n  [(set (cc0)\n@@ -317,6 +329,23 @@\n \n ;; 16-bit moves\n \n+; memory indirect to reg\n+(define_insn \"\"\n+  [(set (match_operand:QI 0 \"register_operand\" \"=r\")\n+        (mem:QI (match_operand 1 \"memory_operand\"  \"m\")))]\n+  \"\"\n+  \"li   r%0,%1\")\n+\n+; reg/const to memory indirect\n+(define_insn \"\"\n+  [(set (mem:QI (match_operand 0 \"memory_operand\" \"=m,m\"))\n+        (match_operand:QI 1 \"nonmemory_operand\"  \"r,K\"))]\n+  \"\"\n+  \"@\n+     sti  r%1,%0\n+     stci %1,%0\")\n+\n+; general case\n (define_insn \"movqi\"\n   [(set (match_operand:QI 0 \"general_operand\" \"=r,r,r,r,r,r,m,m\")\n         (match_operand:QI 1 \"general_operand\"  \"O,I,J,i,r,m,r,K\"))]\n@@ -333,6 +362,21 @@\n \n ;; 32-bit moves\n \n+; memory indirect to reg\n+(define_insn \"\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n+        (mem:HI (match_operand 1 \"memory_operand\"  \"m\")))]\n+  \"\"\n+  \"dli  r%0,%1\")\n+\n+; reg to memory indirect\n+(define_insn \"\"\n+  [(set (mem:HI (match_operand 0 \"memory_operand\" \"=m\"))\n+        (match_operand:HI 1 \"register_operand\"  \"r\"))]\n+  \"\"\n+  \"dsti r%1,%0\")\n+\n+; general case\n (define_insn \"\"\n   [(set (match_operand:HI 0 \"general_operand\" \"=r,r,r,r,r,m,m\")\n         (match_operand:HI 1 \"general_operand\"  \"O,I,J,r,m,r,K\"))]\n@@ -368,7 +412,7 @@\n \n ;; Single-Float moves\n \n-(define_insn \"movhf\"\n+(define_insn \"\"\n   [(set (match_operand:HF 0 \"general_operand\" \"=r,r,m,m\")\n         (match_operand:HF 1 \"general_operand\"  \"r,m,r,G\"))]\n   \"\"\n@@ -378,10 +422,27 @@\n     dst  r%1,%0\n     stc  0,%0   \\;stc 0,%A0 \")\n \n+(define_expand \"movhf\"\n+  [(set (match_operand:HF 0 \"general_operand\" \"\")\n+        (match_operand:HF 1 \"general_operand\" \"\"))]\n+  \"\"\n+  \"\n+   {\n+     enum rtx_code op1code = GET_CODE (operands[1]);\n+     if (GET_CODE (operands[0]) == MEM)\n+       {\n+         if (op1code == MEM || (op1code == CONST_DOUBLE\n+             && !rtx_equal_p (operands[1], CONST0_RTX (HFmode))))\n+\t   operands[1] = force_reg (HFmode, operands[1]);\n+       }\n+     else if (op1code == CONST_DOUBLE)\n+       operands[1] = force_const_mem (HFmode, operands[1]);\n+   }\")\n+\n \n ;; Longfloat moves\n \n-(define_insn \"movtqf\"\n+(define_insn \"\"\n   [(set (match_operand:TQF 0 \"general_operand\" \"=r,r,m\")\n         (match_operand:TQF 1 \"general_operand\"  \"r,m,r\"))]\n   \"\"\n@@ -390,6 +451,22 @@\n     efl  r%0,%1\n     efst r%1,%0 \")\n \n+(define_expand \"movtqf\"\n+  [(set (match_operand:TQF 0 \"general_operand\" \"\")\n+        (match_operand:TQF 1 \"general_operand\" \"\"))]\n+  \"\"\n+  \"\n+   {\n+     enum rtx_code op1code = GET_CODE (operands[1]);\n+     if (GET_CODE (operands[0]) == MEM)\n+       {\n+         if (op1code == MEM || op1code == CONST_DOUBLE)\n+\t   operands[1] = force_reg (TQFmode, operands[1]);\n+       }\n+     else if (op1code == CONST_DOUBLE)\n+       operands[1] = force_const_mem (TQFmode, operands[1]);\n+   }\")\n+\n \n ;; add instructions \n "}]}