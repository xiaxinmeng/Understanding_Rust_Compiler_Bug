{"sha": "c83bd37c9d8859d4e8dc6d1f021c6e8b8ffabb99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgzYmQzN2M5ZDg4NTlkNGU4ZGM2ZDFmMDIxYzZlOGI4ZmZhYmI5OQ==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2008-03-12T15:33:45Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2008-03-12T15:33:45Z"}, "message": "re PR rtl-optimization/34522 (inefficient code for long long multiply when only low bits are needed)\n\n2008-03-12  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR tree-opt/35422\n\t* fold-const.c (fold_unary) <NOP_EXPR>: Distribute a narrowing\n\tconversion to the operands of a multiplication.\n\ntestsuite:\n2008-03-12  Paolo Bonzini  <bonzini@gnu.org>\n\n\tPR tree-opt/35422\n\t* gcc.dg/vect/slp-7.c: Change target keywords required for vectorizing\n\tthird loop.\n\t* gcc.target/i386/pr35422.c: New.\n\nFrom-SVN: r133144", "tree": {"sha": "c1959cceb74dfe8a50fb7fa66a39bd956922bdbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1959cceb74dfe8a50fb7fa66a39bd956922bdbb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c83bd37c9d8859d4e8dc6d1f021c6e8b8ffabb99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c83bd37c9d8859d4e8dc6d1f021c6e8b8ffabb99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c83bd37c9d8859d4e8dc6d1f021c6e8b8ffabb99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c83bd37c9d8859d4e8dc6d1f021c6e8b8ffabb99/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "70fef63aef8a841f20cfa08c88da9ca871a3c8f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70fef63aef8a841f20cfa08c88da9ca871a3c8f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70fef63aef8a841f20cfa08c88da9ca871a3c8f3"}], "stats": {"total": 53, "additions": 50, "deletions": 3}, "files": [{"sha": "dfdbfc26a198d61cd0db2716c45751499ea34cfe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83bd37c9d8859d4e8dc6d1f021c6e8b8ffabb99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83bd37c9d8859d4e8dc6d1f021c6e8b8ffabb99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c83bd37c9d8859d4e8dc6d1f021c6e8b8ffabb99", "patch": "@@ -1,3 +1,9 @@\n+2008-03-12  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR tree-opt/35422\n+\t* fold-const.c (fold_unary) <NOP_EXPR>: Distribute a narrowing\n+\tconversion to the operands of a multiplication.\n+\n 2008-03-12  Richard Guenther  <rguenther@suse.de>\n \n \t* Makefile.in (OBJS-common): Add tree-ssa-phiprop.o"}, {"sha": "7cf132b21799e9fa37be7f5d36a8dd723a41ad7c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83bd37c9d8859d4e8dc6d1f021c6e8b8ffabb99/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83bd37c9d8859d4e8dc6d1f021c6e8b8ffabb99/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=c83bd37c9d8859d4e8dc6d1f021c6e8b8ffabb99", "patch": "@@ -7926,6 +7926,26 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t    return fold_build1 (BIT_NOT_EXPR, type, fold_convert (type, tem));\n \t}\n \n+      /* Convert (T1)(X * Y) into (T1)X * (T1)Y if T1 is narrower than the\n+\t type of X and Y (integer types only).  */\n+      if (INTEGRAL_TYPE_P (type)\n+\t  && TREE_CODE (op0) == MULT_EXPR\n+\t  && INTEGRAL_TYPE_P (TREE_TYPE (op0))\n+\t  && TYPE_PRECISION (type) < TYPE_PRECISION (TREE_TYPE (op0)))\n+\t{\n+\t  /* Be careful not to introduce new overflows.  */\n+\t  tree mult_type;\n+          if (TYPE_OVERFLOW_WRAPS (type))\n+\t    mult_type = type;\n+\t  else\n+\t    mult_type = unsigned_type_for (type);\n+\t  \n+\t  tem = fold_build2 (MULT_EXPR, mult_type,\n+\t\t\t     fold_convert (mult_type, TREE_OPERAND (op0, 0)),\n+\t\t\t     fold_convert (mult_type, TREE_OPERAND (op0, 1)));\n+\t  return fold_convert (type, tem);\n+\t}\n+\n       tem = fold_convert_const (code, type, op0);\n       return tem ? tem : NULL_TREE;\n "}, {"sha": "a313f021e2174eaf67e0b1156144f9006b0a3faa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83bd37c9d8859d4e8dc6d1f021c6e8b8ffabb99/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83bd37c9d8859d4e8dc6d1f021c6e8b8ffabb99/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c83bd37c9d8859d4e8dc6d1f021c6e8b8ffabb99", "patch": "@@ -1,3 +1,10 @@\n+2008-03-12  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\tPR tree-opt/35422\n+\t* gcc.dg/vect/slp-7.c: Change target keywords required for vectorizing\n+\tthird loop.\n+\t* gcc.target/i386/pr35422.c: New.\n+\n 2008-03-11  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \tPR tree-opt/35403"}, {"sha": "f000fc9059fb452c4d5d901f7059ae6238e6a95c", "filename": "gcc/testsuite/gcc.dg/vect/slp-7.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83bd37c9d8859d4e8dc6d1f021c6e8b8ffabb99/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83bd37c9d8859d4e8dc6d1f021c6e8b8ffabb99/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fslp-7.c?ref=c83bd37c9d8859d4e8dc6d1f021c6e8b8ffabb99", "patch": "@@ -120,8 +120,9 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\"  {target {  vect_strided &&  vect_int_mult  } } } }*/\n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  {target  { ! {  vect_strided && vect_int_mult } } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\"  } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 3 loops\" 1 \"vect\"  { target { vect_unpack && vect_int_mult } } } }*/\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\"  { target { ! { vect_unpack && vect_int_mult } } } } }*/\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 3 \"vect\"  { target { vect_unpack && vect_int_mult } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 2 \"vect\"  { target { ! { vect_unpack && vect_int_mult } } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n  "}, {"sha": "d5e66aefc93351d59797a6b0320fd6455c1275ba", "filename": "gcc/testsuite/gcc.target/i386/pr34522.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83bd37c9d8859d4e8dc6d1f021c6e8b8ffabb99/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr34522.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83bd37c9d8859d4e8dc6d1f021c6e8b8ffabb99/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr34522.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr34522.c?ref=c83bd37c9d8859d4e8dc6d1f021c6e8b8ffabb99", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-options \"-O2\" } */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+\n+int test(long long a, long long b)\n+{\n+        return a * b;\n+}\n+\n+/* Check that we did not spill anything.  This is all that is needed\n+   to qualify the generated code as \"decent\"...  */\n+\n+/* { dg-final { scan-assembler-not \"%e[sd]i\" } } */"}]}