{"sha": "37b37199ab988909eede4c33ad23f032fe9ffb77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzdiMzcxOTlhYjk4ODkwOWVlZGU0YzMzYWQyM2YwMzJmZTlmZmI3Nw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-02-17T08:04:29Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-02-17T08:04:29Z"}, "message": "tree.c (tree_node_kind_names, [...]): Qualify a char* with the `const' keyword.\n\n        * tree.c (tree_node_kind_names, print_obstack_name,\n        get_identifier, maybe_get_identifier, build_string,\n        build_expr_wfl, is_attribute_p, lookup_attribute,\n        print_obstack_statistics, get_file_function_name_long, tree_check,\n        tree_class_check, expr_check): Qualify a char* with the `const'\n        keyword.\n        * tree.h (get_identifier, maybe_get_identifier, build_string,\n        build_expr_wfl, is_attribute_p, lookup_attribute,\n        print_obstack_statistics, print_obstack_name, tree_check,\n        tree_class_check, expr_check): Likewise.\n\nFrom-SVN: r25261", "tree": {"sha": "a2915ddf4014c38148872d1fd218543421cfcba4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2915ddf4014c38148872d1fd218543421cfcba4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37b37199ab988909eede4c33ad23f032fe9ffb77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b37199ab988909eede4c33ad23f032fe9ffb77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37b37199ab988909eede4c33ad23f032fe9ffb77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b37199ab988909eede4c33ad23f032fe9ffb77/comments", "author": null, "committer": null, "parents": [{"sha": "7e57923cfc5fcf0182f8732dc7185edd270e6b6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e57923cfc5fcf0182f8732dc7185edd270e6b6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e57923cfc5fcf0182f8732dc7185edd270e6b6a"}], "stats": {"total": 76, "additions": 47, "deletions": 29}, "files": [{"sha": "0ad15e7a5897f1f4d7bb1aa846fc428b6e21e5ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b37199ab988909eede4c33ad23f032fe9ffb77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b37199ab988909eede4c33ad23f032fe9ffb77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=37b37199ab988909eede4c33ad23f032fe9ffb77", "patch": "@@ -1,3 +1,17 @@\n+Wed Feb 17 10:56:24 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* tree.c (tree_node_kind_names, print_obstack_name,\n+ \tget_identifier, maybe_get_identifier, build_string,\n+ \tbuild_expr_wfl, is_attribute_p, lookup_attribute,\n+ \tprint_obstack_statistics, get_file_function_name_long, tree_check,\n+ \ttree_class_check, expr_check): Qualify a char* with the `const'\n+ \tkeyword.\n+\n+\t* tree.h (get_identifier, maybe_get_identifier, build_string,\n+\tbuild_expr_wfl, is_attribute_p, lookup_attribute,\n+\tprint_obstack_statistics, print_obstack_name, tree_check,\n+\ttree_class_check, expr_check): Likewise.\n+\n Tue Feb 16 21:29:38 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* i386/freebsd-elf.h, i386/gas.h, i386/linux.h: Fix minor spacing"}, {"sha": "80b679598821247521850748c16d5e9fb3fc3295", "filename": "gcc/tree.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b37199ab988909eede4c33ad23f032fe9ffb77/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b37199ab988909eede4c33ad23f032fe9ffb77/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=37b37199ab988909eede4c33ad23f032fe9ffb77", "patch": "@@ -225,7 +225,7 @@ int tree_node_counts[(int)all_kinds];\n int tree_node_sizes[(int)all_kinds];\n int id_string_size = 0;\n \n-char *tree_node_kind_names[] = {\n+const char *tree_node_kind_names[] = {\n   \"decls\",\n   \"types\",\n   \"blocks\",\n@@ -743,10 +743,10 @@ void\n print_obstack_name (object, file, prefix)\n      char *object;\n      FILE *file;\n-     char *prefix;\n+     const char *prefix;\n {\n   struct obstack *obstack = NULL;\n-  char *obstack_name = NULL;\n+  const char *obstack_name = NULL;\n   struct function *p;\n \n   for (p = outer_function_chain; p; p = p->next)\n@@ -1241,7 +1241,7 @@ copy_list (list)\n \n tree\n get_identifier (text)\n-     register char *text;\n+     register const char *text;\n {\n   register int hi;\n   register int i;\n@@ -1304,7 +1304,7 @@ get_identifier (text)\n \n tree\n maybe_get_identifier (text)\n-     register char *text;\n+     register const char *text;\n {\n   register int hi;\n   register int i;\n@@ -1502,7 +1502,7 @@ build_real_from_int_cst (type, i)\n tree\n build_string (len, str)\n      int len;\n-     char *str;\n+     const char *str;\n {\n   /* Put the string in saveable_obstack since it will be placed in the RTL\n      for an \"asm\" statement and will also be kept around a while if\n@@ -3220,10 +3220,10 @@ build_block (vars, tags, subblocks, supercontext, chain)\n tree\n build_expr_wfl (node, file, line, col)\n      tree node;\n-     char *file;\n+     const char *file;\n      int line, col;\n {\n-  static char *last_file = 0;\n+  static const char *last_file = 0;\n   static tree  last_filenode = NULL_TREE;\n   register tree wfl = make_node (EXPR_WITH_FILE_LOCATION);\n \n@@ -3432,7 +3432,7 @@ valid_machine_attribute (attr_name, attr_args, decl, type)\n \n int\n is_attribute_p (attr, ident)\n-     char *attr;\n+     const char *attr;\n      tree ident;\n {\n   int ident_len, attr_len;\n@@ -3477,7 +3477,7 @@ is_attribute_p (attr, ident)\n \n tree\n lookup_attribute (attr_name, list)\n-     char *attr_name;\n+     const char *attr_name;\n      tree list;\n {\n   tree l;\n@@ -4730,7 +4730,7 @@ print_inline_obstack_statistics ()\n \n void\n print_obstack_statistics (str, o)\n-     char *str;\n+     const char *str;\n      struct obstack *o;\n {\n   struct _obstack_chunk *chunk = o->chunk;\n@@ -4855,7 +4855,7 @@ append_random_chars (template)\n \n tree\n get_file_function_name_long (type)\n-     char *type;\n+     const char *type;\n {\n   char *buf;\n   register char *p;\n@@ -4867,8 +4867,8 @@ get_file_function_name_long (type)\n       /* We don't have anything that we know to be unique to this translation\n \t unit, so use what we do have and throw in some randomness.  */\n \n-      char *name = weak_global_object_name;\n-      char *file = main_input_filename;\n+      const char *name = weak_global_object_name;\n+      const char *file = main_input_filename;\n \n       if (! name)\n \tname = \"\";\n@@ -5038,7 +5038,7 @@ tree\n tree_check (node, code, file, line, nofatal)\n      tree node;\n      enum tree_code code;\n-     char *file;\n+     const char *file;\n      int line;\n      int nofatal;\n {\n@@ -5058,7 +5058,7 @@ tree\n tree_class_check (node, cl, file, line, nofatal)\n      tree node;\n      char cl;\n-     char *file;\n+     const char *file;\n      int line;\n      int nofatal;\n {\n@@ -5077,7 +5077,7 @@ tree\n expr_check (node, ignored, file, line, nofatal)\n      tree node;\n      int ignored;\n-     char *file;\n+     const char *file;\n      int line;\n      int nofatal;\n {"}, {"sha": "9965a2efb01fbafd0b08f94b73d0a6b33d94748a", "filename": "gcc/tree.h", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37b37199ab988909eede4c33ad23f032fe9ffb77/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37b37199ab988909eede4c33ad23f032fe9ffb77/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=37b37199ab988909eede4c33ad23f032fe9ffb77", "patch": "@@ -1416,13 +1416,13 @@ extern tree make_tree_vec\t\tPROTO((int));\n /* Return the (unique) IDENTIFIER_NODE node for a given name.\n    The name is supplied as a char *.  */\n \n-extern tree get_identifier\t\tPROTO((char *));\n+extern tree get_identifier\t\tPROTO((const char *));\n \n /* If an identifier with the name TEXT (a null-terminated string) has\n    previously been referred to, return that node; otherwise return\n    NULL_TREE.  */\n \n-extern tree maybe_get_identifier\tPROTO((char *));\n+extern tree maybe_get_identifier\tPROTO((const char *));\n \n /* Construct various types of nodes.  */\n \n@@ -1437,14 +1437,14 @@ extern tree build_int_2_wide\t\tPROTO((HOST_WIDE_INT, HOST_WIDE_INT));\n extern tree build_real\t\t\tPROTO((tree, REAL_VALUE_TYPE));\n extern tree build_real_from_int_cst \tPROTO((tree, tree));\n extern tree build_complex\t\tPROTO((tree, tree, tree));\n-extern tree build_string\t\tPROTO((int, char *));\n+extern tree build_string\t\tPROTO((int, const char *));\n extern tree build1\t\t\tPROTO((enum tree_code, tree, tree));\n extern tree build_tree_list\t\tPROTO((tree, tree));\n extern tree build_decl_list\t\tPROTO((tree, tree));\n extern tree build_expr_list\t\tPROTO((tree, tree));\n extern tree build_decl\t\t\tPROTO((enum tree_code, tree, tree));\n extern tree build_block\t\t\tPROTO((tree, tree, tree, tree, tree));\n-extern tree build_expr_wfl              PROTO((tree, char *, int, int));\n+extern tree build_expr_wfl              PROTO((tree, const char *, int, int));\n \n /* Construct various nodes representing data types.  */\n \n@@ -1509,12 +1509,12 @@ extern int valid_machine_attribute\tPROTO((tree, tree, tree, tree));\n /* Given a tree node and a string, return non-zero if the tree node is\n    a valid attribute name for the string.  */\n \n-extern int is_attribute_p\t\tPROTO((char *, tree));\n+extern int is_attribute_p\t\tPROTO((const char *, tree));\n \n /* Given an attribute name and a list of attributes, return the list element\n    of the attribute or NULL_TREE if not found.  */\n \n-extern tree lookup_attribute\t\tPROTO((char *, tree));\n+extern tree lookup_attribute\t\tPROTO((const char *, tree));\n \n /* Given two attributes lists, return a list of their union.  */\n \n@@ -1897,7 +1897,7 @@ extern void (*incomplete_decl_finalize_hook)\tPROTO((tree));\n /* In tree.c */\n extern char *perm_calloc\t\t\tPROTO((int, long));\n extern tree get_file_function_name\t\tPROTO((int));\n-extern tree get_file_function_name_long \tPROTO((char *));\n+extern tree get_file_function_name_long \tPROTO((const char *));\n extern tree get_set_constructor_bits\t\tPROTO((tree, char *, int));\n extern tree get_set_constructor_bytes\t\tPROTO((tree,\n \t\t\t\t\t\t       unsigned char *, int));\n@@ -2153,9 +2153,10 @@ extern void rtl_in_current_obstack\tPROTO ((void));\n extern void rtl_in_saveable_obstack\tPROTO ((void));\n extern void init_tree_codes\t\tPROTO ((void));\n extern void dump_tree_statistics\tPROTO ((void));\n-extern void print_obstack_statistics\tPROTO ((char *, struct obstack *));\n+extern void print_obstack_statistics\tPROTO ((const char *,\n+\t\t\t\t\t\tstruct obstack *));\n #ifdef BUFSIZ\n-extern void print_obstack_name\t\tPROTO ((char *, FILE *, char *));\n+extern void print_obstack_name\t\tPROTO ((char *, FILE *, const char *));\n #endif\n extern void expand_function_end\t\tPROTO ((char *, int, int));\n extern void expand_function_start\tPROTO ((tree, int));\n@@ -2165,9 +2166,12 @@ extern void start_identifier_warnings\tPROTO ((void));\n extern void gcc_obstack_init\t\tPROTO ((struct obstack *));\n extern void init_obstacks\t\tPROTO ((void));\n extern void obfree\t\t\tPROTO ((char *));\n-extern tree tree_check                  PROTO ((tree, enum tree_code, char*, int, int));\n-extern tree tree_class_check            PROTO ((tree, char, char*, int, int));\n-extern tree expr_check                  PROTO ((tree, int, char*, int, int));\n+extern tree tree_check                  PROTO ((tree, enum tree_code,\n+\t\t\t\t\t\tconst char *, int, int));\n+extern tree tree_class_check            PROTO ((tree, char, const char *,\n+\t\t\t\t\t\tint, int));\n+extern tree expr_check                  PROTO ((tree, int, const char *,\n+\t\t\t\t\t\tint, int));\n \n /* In function.c */\n extern void setjmp_protect_args\t\tPROTO ((void));"}]}