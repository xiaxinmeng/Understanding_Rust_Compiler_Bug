{"sha": "4b01bd1658cc87a0d9a674606b4ae78a3b4594fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIwMWJkMTY1OGNjODdhMGQ5YTY3NDYwNmI0YWU3OGEzYjQ1OTRmZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2000-12-21T01:11:31Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-12-21T01:11:31Z"}, "message": "rtl.h (REG_NON_LOCAL_GOTO): New.\n\n        * rtl.h (REG_NON_LOCAL_GOTO): New.\n        * rtl.c (reg_note_name): Update.\n        * stmt.c (expand_goto): Emit a REG_NON_LOCAL_GOTO note.\n        * builtins.c (expand_builtin_longjmp): Likewise.\n        * flow.c (make_edges): Check for REG_NON_LOCAL_GOTO and do\n        not emit an edge.\n\nFrom-SVN: r38408", "tree": {"sha": "ffba52aed7e19dec753b233566b9ab484e11d29e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffba52aed7e19dec753b233566b9ab484e11d29e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/comments", "author": null, "committer": null, "parents": [{"sha": "1e248ee3875e64165a8a5c928e175603be975ffa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e248ee3875e64165a8a5c928e175603be975ffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e248ee3875e64165a8a5c928e175603be975ffa"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "724c8cca3000eee57470b474b2bb142bdfacd9b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b01bd1658cc87a0d9a674606b4ae78a3b4594fe", "patch": "@@ -1,3 +1,12 @@\n+2000-12-20  Richard Henderson  <rth@redhat.com>\n+\n+\t* rtl.h (REG_NON_LOCAL_GOTO): New.\n+\t* rtl.c (reg_note_name): Update.\n+\t* stmt.c (expand_goto): Emit a REG_NON_LOCAL_GOTO note.\n+\t* builtins.c (expand_builtin_longjmp): Likewise.\n+\t* flow.c (make_edges): Check for REG_NON_LOCAL_GOTO and do\n+\tnot emit an edge.\n+\n 2000-12-20  Marek Michalkiewicz  <marekm@linux.org.pl>\n \n \t* config/avr/avr.c (out_movsi_r_mr, out_movsi_mr_r, out_movhi_mr_r):"}, {"sha": "3d74681429848d1711f2c61f0a566b85f71bd578", "filename": "gcc/builtins.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=4b01bd1658cc87a0d9a674606b4ae78a3b4594fe", "patch": "@@ -649,7 +649,7 @@ void\n expand_builtin_longjmp (buf_addr, value)\n      rtx buf_addr, value;\n {\n-  rtx fp, lab, stack;\n+  rtx fp, lab, stack, insn;\n   enum machine_mode sa_mode = STACK_SAVEAREA_MODE (SAVE_NONLOCAL);\n \n   if (setjmp_alias_set == -1)\n@@ -706,6 +706,18 @@ expand_builtin_longjmp (buf_addr, value)\n \t  emit_indirect_jump (lab);\n \t}\n     }\n+\n+  /* Search backwards and mark the jump insn as a non-local goto.\n+     Note that this precludes the use of __builtin_longjmp to a\n+     __builtin_setjmp target in the same function.  However, we've\n+     already cautioned the user that these functions are for\n+     internal exception handling use only.  */\n+  for (insn = get_last_insn ();\n+       GET_CODE (insn) != JUMP_INSN;\n+       insn = PREV_INSN (insn))\n+    continue;\n+  REG_NOTES (insn) = alloc_EXPR_LIST (REG_NON_LOCAL_GOTO, const0_rtx,\n+\t\t\t\t      REG_NOTES (insn));\n }\n \n /* Get a MEM rtx for expression EXP which is the address of an operand"}, {"sha": "61371177437c9c79981c269d111582d06401fe4a", "filename": "gcc/flow.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=4b01bd1658cc87a0d9a674606b4ae78a3b4594fe", "patch": "@@ -1094,12 +1094,17 @@ make_edges (label_value_list)\n \t{\n \t  rtx tmp;\n \n+\t  /* Recognize a non-local goto as a branch outside the\n+\t     current function.  */\n+\t  if (find_reg_note (insn, REG_NON_LOCAL_GOTO, NULL_RTX))\n+\t    ;\n+\n \t  /* ??? Recognize a tablejump and do the right thing.  */\n-\t  if ((tmp = JUMP_LABEL (insn)) != NULL_RTX\n-\t      && (tmp = NEXT_INSN (tmp)) != NULL_RTX\n-\t      && GET_CODE (tmp) == JUMP_INSN\n-\t      && (GET_CODE (PATTERN (tmp)) == ADDR_VEC\n-\t\t  || GET_CODE (PATTERN (tmp)) == ADDR_DIFF_VEC))\n+\t  else if ((tmp = JUMP_LABEL (insn)) != NULL_RTX\n+\t\t   && (tmp = NEXT_INSN (tmp)) != NULL_RTX\n+\t\t   && GET_CODE (tmp) == JUMP_INSN\n+\t\t   && (GET_CODE (PATTERN (tmp)) == ADDR_VEC\n+\t\t       || GET_CODE (PATTERN (tmp)) == ADDR_DIFF_VEC))\n \t    {\n \t      rtvec vec;\n \t      int j;"}, {"sha": "f463a02d9163f9d68e725ecc01277b23e5312bf1", "filename": "gcc/rtl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=4b01bd1658cc87a0d9a674606b4ae78a3b4594fe", "patch": "@@ -288,7 +288,8 @@ const char * const reg_note_name[] =\n   \"REG_LABEL\", \"REG_DEP_ANTI\", \"REG_DEP_OUTPUT\", \"REG_BR_PROB\",\n   \"REG_EXEC_COUNT\", \"REG_NOALIAS\", \"REG_SAVE_AREA\", \"REG_BR_PRED\",\n   \"REG_FRAME_RELATED_EXPR\", \"REG_EH_CONTEXT\", \"REG_EH_REGION\",\n-  \"REG_EH_RETHROW\", \"REG_SAVE_NOTE\", \"REG_MAYBE_DEAD\", \"REG_NORETURN\"\n+  \"REG_EH_RETHROW\", \"REG_SAVE_NOTE\", \"REG_MAYBE_DEAD\", \"REG_NORETURN\",\n+  \"REG_NON_LOCAL_GOTO\"\n };\n \n static htab_t md_constants;"}, {"sha": "397ea98040e483bc76817d4f6dc1e7b979c49e1b", "filename": "gcc/rtl.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=4b01bd1658cc87a0d9a674606b4ae78a3b4594fe", "patch": "@@ -549,7 +549,11 @@ enum reg_note\n   REG_MAYBE_DEAD,\n \n   /* Indicates that a call does not return.  */\n-  REG_NORETURN\n+  REG_NORETURN,\n+\n+  /* Indicates that an indirect jump is a non-local goto instead of a \n+     computed goto.  */\n+  REG_NON_LOCAL_GOTO\n };\n \n /* The base value for branch probability notes.  */"}, {"sha": "7489613fa40576b119f39305d8ead2a4eb7344e0", "filename": "gcc/stmt.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b01bd1658cc87a0d9a674606b4ae78a3b4594fe/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=4b01bd1658cc87a0d9a674606b4ae78a3b4594fe", "patch": "@@ -783,7 +783,7 @@ expand_goto (label)\n     {\n       struct function *p = find_function_data (context);\n       rtx label_ref = gen_rtx_LABEL_REF (Pmode, label_rtx (label));\n-      rtx handler_slot, static_chain, save_area;\n+      rtx handler_slot, static_chain, save_area, insn;\n       tree link;\n \n       /* Find the corresponding handler slot for this label.  */\n@@ -836,6 +836,15 @@ expand_goto (label)\n \t  emit_insn (gen_rtx_USE (VOIDmode, stack_pointer_rtx));\n \t  emit_indirect_jump (handler_slot);\n \t}\n+\n+      /* Search backwards to the jump insn and mark it as a \n+\t non-local goto.  */\n+      for (insn = get_last_insn ();\n+\t   GET_CODE (insn) != JUMP_INSN; \n+\t   insn = PREV_INSN (insn))\n+\tcontinue;\n+      REG_NOTES (insn) = alloc_EXPR_LIST (REG_NON_LOCAL_GOTO, const0_rtx,\n+\t\t\t\t\t  REG_NOTES (insn));\n     }\n   else\n     expand_goto_internal (label, label_rtx (label), NULL_RTX);"}]}