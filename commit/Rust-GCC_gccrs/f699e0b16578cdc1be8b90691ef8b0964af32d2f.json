{"sha": "f699e0b16578cdc1be8b90691ef8b0964af32d2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY5OWUwYjE2NTc4Y2RjMWJlOGI5MDY5MWVmOGIwOTY0YWYzMmQyZg==", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-02-12T13:43:41Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2021-02-12T13:43:41Z"}, "message": "Fortran: Fix rank of assumed-rank array [PR99043]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/99043\n\t* trans-expr.c (gfc_conv_procedure_call): Don't reset\n\trank of assumed-rank array.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/99043\n\t* gfortran.dg/assumed_rank_20.f90: New test.", "tree": {"sha": "bff8b9e827100b7fe3a7a6f05c6edb9951776969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bff8b9e827100b7fe3a7a6f05c6edb9951776969"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f699e0b16578cdc1be8b90691ef8b0964af32d2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f699e0b16578cdc1be8b90691ef8b0964af32d2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f699e0b16578cdc1be8b90691ef8b0964af32d2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f699e0b16578cdc1be8b90691ef8b0964af32d2f/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cc886bf4279461b8931c4ca544185a85cd69f26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cc886bf4279461b8931c4ca544185a85cd69f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cc886bf4279461b8931c4ca544185a85cd69f26"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "103cb31c6643a94c3650c015d129d7badc4e2bc0", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f699e0b16578cdc1be8b90691ef8b0964af32d2f/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f699e0b16578cdc1be8b90691ef8b0964af32d2f/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=f699e0b16578cdc1be8b90691ef8b0964af32d2f", "patch": "@@ -6403,9 +6403,10 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \n \t      /* Unallocated allocatable arrays and unassociated pointer arrays\n \t\t need their dtype setting if they are argument associated with\n-\t\t assumed rank dummies.  */\n+\t\t assumed rank dummies, unless already assumed rank.  */\n \t      if (!sym->attr.is_bind_c && e && fsym && fsym->as\n-\t\t  && fsym->as->type == AS_ASSUMED_RANK)\n+\t\t  && fsym->as->type == AS_ASSUMED_RANK\n+\t\t  && e->rank != -1)\n \t\t{\n \t\t  if (gfc_expr_attr (e).pointer\n \t\t      || gfc_expr_attr (e).allocatable)"}, {"sha": "10ad1fc8e89db038f45e3636db80d8cfde240f17", "filename": "gcc/testsuite/gfortran.dg/assumed_rank_20.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f699e0b16578cdc1be8b90691ef8b0964af32d2f/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_20.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f699e0b16578cdc1be8b90691ef8b0964af32d2f/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_20.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassumed_rank_20.f90?ref=f699e0b16578cdc1be8b90691ef8b0964af32d2f", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+!\n+! PR fortran/99043\n+!\n+module assumed_rank_module\n+    implicit none\n+    private\n+\n+    public :: rank_of_pointer_level1\n+contains\n+    subroutine rank_of_pointer_level1(ap,aa)\n+        real, dimension(..), intent(in), pointer :: ap\n+        real, dimension(..), intent(in), allocatable :: aa\n+        if (rank(ap) /= 3) stop 1\n+        if (rank(aa) /= 3) stop 2\n+        call rank_of_pointer_level2(ap, aa)\n+    end subroutine rank_of_pointer_level1\n+\n+    subroutine rank_of_pointer_level2(ap,aa)\n+        real, dimension(..), intent(in), pointer :: ap\n+        real, dimension(..), intent(in), allocatable :: aa\n+\n+        if (rank(ap) /= 3) stop 3\n+        if (rank(aa) /= 3) stop 4\n+    end subroutine rank_of_pointer_level2\n+end module assumed_rank_module\n+\n+program assumed_rank\n+    use :: assumed_rank_module, only : rank_of_pointer_level1\n+    implicit none\n+    real, dimension(:,:,:), pointer :: ap\n+    real, dimension(:,:,:), allocatable :: aa\n+\n+    ap => null()\n+    call rank_of_pointer_level1(ap, aa)\n+end program assumed_rank"}]}