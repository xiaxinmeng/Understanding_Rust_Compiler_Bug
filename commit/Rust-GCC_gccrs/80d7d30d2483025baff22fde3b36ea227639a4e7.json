{"sha": "80d7d30d2483025baff22fde3b36ea227639a4e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBkN2QzMGQyNDgzMDI1YmFmZjIyZmRlM2IzNmVhMjI3NjM5YTRlNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-11-27T21:25:58Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-11-27T21:25:58Z"}, "message": "compiler: add '$' to names in expression export data\n    \n    For inlined function bodies we're going to need to refer to variables,\n    so change the existing export data to add a '$' to names that look\n    like identifiers: true, false, nil, convert.\n    \n    While we're here drop an unnecessary space character after operators.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/150067\n\nFrom-SVN: r266529", "tree": {"sha": "abd27ec71178b8971e095339295317307192a8e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abd27ec71178b8971e095339295317307192a8e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80d7d30d2483025baff22fde3b36ea227639a4e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80d7d30d2483025baff22fde3b36ea227639a4e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80d7d30d2483025baff22fde3b36ea227639a4e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80d7d30d2483025baff22fde3b36ea227639a4e7/comments", "author": null, "committer": null, "parents": [{"sha": "010211394dc2da35487ee0ce9e9f6cb13f343051", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/010211394dc2da35487ee0ce9e9f6cb13f343051", "html_url": "https://github.com/Rust-GCC/gccrs/commit/010211394dc2da35487ee0ce9e9f6cb13f343051"}], "stats": {"total": 75, "additions": 51, "deletions": 24}, "files": [{"sha": "3f87798749c568265341dcbd83d6b5f477719eac", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d7d30d2483025baff22fde3b36ea227639a4e7/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d7d30d2483025baff22fde3b36ea227639a4e7/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=80d7d30d2483025baff22fde3b36ea227639a4e7", "patch": "@@ -1,4 +1,4 @@\n-6e0974fc6c9aa6ef19f72fbb5698e4b3734a4220\n+ce81aad0e3d53215e2c0f1f060c7fd6219e6fb23\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "c33f66989eaebbe0bbf2138e2056186bd0c3b0ee", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d7d30d2483025baff22fde3b36ea227639a4e7/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d7d30d2483025baff22fde3b36ea227639a4e7/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=80d7d30d2483025baff22fde3b36ea227639a4e7", "patch": "@@ -1610,7 +1610,7 @@ class Boolean_expression : public Expression\n \n   void\n   do_export(Export_function_body* efb) const\n-  { efb->write_c_string(this->val_ ? \"true\" : \"false\"); }\n+  { efb->write_c_string(this->val_ ? \"$true\" : \"$false\"); }\n \n   void\n   do_dump_expression(Ast_dump_context* ast_dump_context) const\n@@ -1651,6 +1651,8 @@ Boolean_expression::do_determine_type(const Type_context* context)\n Expression*\n Boolean_expression::do_import(Import_expression* imp, Location loc)\n {\n+  if (imp->version() >= EXPORT_FORMAT_V3)\n+    imp->require_c_string(\"$\");\n   if (imp->peek_char() == 't')\n     {\n       imp->require_c_string(\"true\");\n@@ -3162,7 +3164,7 @@ class Nil_expression : public Expression\n \n   void\n   do_export(Export_function_body* efb) const\n-  { efb->write_c_string(\"nil\"); }\n+  { efb->write_c_string(\"$nil\"); }\n \n   void\n   do_dump_expression(Ast_dump_context* ast_dump_context) const\n@@ -3174,6 +3176,8 @@ class Nil_expression : public Expression\n Expression*\n Nil_expression::do_import(Import_expression* imp, Location loc)\n {\n+  if (imp->version() >= EXPORT_FORMAT_V3)\n+    imp->require_c_string(\"$\");\n   imp->require_c_string(\"nil\");\n   return Expression::make_nil(loc);\n }\n@@ -3613,7 +3617,7 @@ Type_conversion_expression::do_get_backend(Translate_context* context)\n void\n Type_conversion_expression::do_export(Export_function_body* efb) const\n {\n-  efb->write_c_string(\"convert(\");\n+  efb->write_c_string(\"$convert(\");\n   efb->write_type(this->type_);\n   efb->write_c_string(\", \");\n   this->expr_->export_expression(efb);\n@@ -3625,7 +3629,7 @@ Type_conversion_expression::do_export(Export_function_body* efb) const\n Expression*\n Type_conversion_expression::do_import(Import_expression* imp, Location loc)\n {\n-  imp->require_c_string(\"convert(\");\n+  imp->require_c_string(\"$convert(\");\n   Type* type = imp->read_type();\n   imp->require_c_string(\", \");\n   Expression* val = Expression::import_expression(imp, loc);\n@@ -4612,16 +4616,16 @@ Unary_expression::do_export(Export_function_body* efb) const\n   switch (this->op_)\n     {\n     case OPERATOR_PLUS:\n-      efb->write_c_string(\"+ \");\n+      efb->write_c_string(\"+\");\n       break;\n     case OPERATOR_MINUS:\n-      efb->write_c_string(\"- \");\n+      efb->write_c_string(\"-\");\n       break;\n     case OPERATOR_NOT:\n-      efb->write_c_string(\"! \");\n+      efb->write_c_string(\"!\");\n       break;\n     case OPERATOR_XOR:\n-      efb->write_c_string(\"^ \");\n+      efb->write_c_string(\"^\");\n       break;\n     case OPERATOR_AND:\n     case OPERATOR_MULT:\n@@ -4654,7 +4658,8 @@ Unary_expression::do_import(Import_expression* imp, Location loc)\n     default:\n       go_unreachable();\n     }\n-  imp->require_c_string(\" \");\n+  if (imp->version() < EXPORT_FORMAT_V3)\n+    imp->require_c_string(\" \");\n   Expression* expr = Expression::import_expression(imp, loc);\n   return Expression::make_unary(op, expr, loc);\n }\n@@ -12959,7 +12964,7 @@ Struct_construction_expression::do_get_backend(Translate_context* context)\n void\n Struct_construction_expression::do_export(Export_function_body* efb) const\n {\n-  efb->write_c_string(\"convert(\");\n+  efb->write_c_string(\"$convert(\");\n   efb->write_type(this->type_);\n   for (Expression_list::const_iterator pv = this->vals()->begin();\n        pv != this->vals()->end();\n@@ -13192,7 +13197,7 @@ Array_construction_expression::get_constructor(Translate_context* context,\n void\n Array_construction_expression::do_export(Export_function_body* efb) const\n {\n-  efb->write_c_string(\"convert(\");\n+  efb->write_c_string(\"$convert(\");\n   efb->write_type(this->type_);\n   if (this->vals() != NULL)\n     {\n@@ -13709,7 +13714,7 @@ Map_construction_expression::do_get_backend(Translate_context* context)\n void\n Map_construction_expression::do_export(Export_function_body* efb) const\n {\n-  efb->write_c_string(\"convert(\");\n+  efb->write_c_string(\"$convert(\");\n   efb->write_type(this->type_);\n   for (Expression_list::const_iterator pv = this->vals_->begin();\n        pv != this->vals_->end();\n@@ -16141,14 +16146,15 @@ Expression*\n Expression::import_expression(Import_expression* imp, Location loc)\n {\n   int c = imp->peek_char();\n-  if (imp->match_c_string(\"- \")\n-      || imp->match_c_string(\"! \")\n-      || imp->match_c_string(\"^ \"))\n+  if (c == '+' || c == '-' || c == '!' || c == '^')\n     return Unary_expression::do_import(imp, loc);\n   else if (c == '(')\n     return Binary_expression::do_import(imp, loc);\n-  else if (imp->match_c_string(\"true\")\n-\t   || imp->match_c_string(\"false\"))\n+  else if (imp->match_c_string(\"$true\")\n+\t   || imp->match_c_string(\"$false\")\n+\t   || (imp->version() < EXPORT_FORMAT_V3\n+\t       && (imp->match_c_string(\"true\")\n+\t\t   || imp->match_c_string(\"false\"))))\n     return Boolean_expression::do_import(imp, loc);\n   else if (c == '\"')\n     return String_expression::do_import(imp, loc);\n@@ -16157,9 +16163,13 @@ Expression::import_expression(Import_expression* imp, Location loc)\n       // This handles integers, floats and complex constants.\n       return Integer_expression::do_import(imp, loc);\n     }\n-  else if (imp->match_c_string(\"nil\"))\n+  else if (imp->match_c_string(\"$nil\")\n+\t   || (imp->version() < EXPORT_FORMAT_V3\n+\t       && imp->match_c_string(\"nil\")))\n     return Nil_expression::do_import(imp, loc);\n-  else if (imp->match_c_string(\"convert\"))\n+  else if (imp->match_c_string(\"$convert\")\n+\t   || (imp->version() < EXPORT_FORMAT_V3\n+\t       && imp->match_c_string(\"convert\")))\n     return Type_conversion_expression::do_import(imp, loc);\n   else\n     {"}, {"sha": "948cdf7552faf790176c92ad422eec66e0994210", "filename": "gcc/go/gofrontend/import.h", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d7d30d2483025baff22fde3b36ea227639a4e7/gcc%2Fgo%2Fgofrontend%2Fimport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d7d30d2483025baff22fde3b36ea227639a4e7/gcc%2Fgo%2Fgofrontend%2Fimport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.h?ref=80d7d30d2483025baff22fde3b36ea227639a4e7", "patch": "@@ -71,6 +71,10 @@ class Import_expression\n   // Read a type.\n   virtual Type*\n   read_type() = 0;\n+\n+  // Return the version number of the export data we're reading.\n+  virtual Export_data_version\n+  version() const = 0;\n };\n \n // This class manages importing Go declarations.\n@@ -253,6 +257,10 @@ class Import : public Import_expression\n   advance(size_t skip)\n   { this->stream_->advance(skip); }\n \n+  // Return the version number of the export data we're reading.\n+  Export_data_version\n+  version() const { return this->version_; }\n+\n   // Skip a semicolon if using an older version.\n   void\n   require_semicolon_if_old_version()\n@@ -381,10 +389,6 @@ class Import : public Import_expression\n     return true;\n   }\n \n-  // Return the version number of the export data we're reading.\n-  Export_data_version\n-  version() const { return this->version_; }\n-\n   // The general IR.\n   Gogo* gogo_;\n   // The stream from which to read import data.\n@@ -638,6 +642,10 @@ class Import_function_body : public Import_expression\n   Type*\n   read_type();\n \n+  Export_data_version\n+  version() const\n+  { return this->imp_->version(); }\n+\n   // Implement Import_expression.\n   Import_function_body*\n   ifb()"}, {"sha": "6f010105d7ed599b69b6f238094bd6b2fbfea00c", "filename": "libgo/go/go/internal/gccgoimporter/parser.go", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80d7d30d2483025baff22fde3b36ea227639a4e7/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Fparser.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80d7d30d2483025baff22fde3b36ea227639a4e7/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Fparser.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fgo%2Finternal%2Fgccgoimporter%2Fparser.go?ref=80d7d30d2483025baff22fde3b36ea227639a4e7", "patch": "@@ -282,6 +282,15 @@ func (p *parser) parseConversion(pkg *types.Package) (val constant.Value, typ ty\n // ConstValue     = string | \"false\" | \"true\" | [\"-\"] (int [\"'\"] | FloatOrComplex) | Conversion .\n // FloatOrComplex = float [\"i\" | (\"+\"|\"-\") float \"i\"] .\n func (p *parser) parseConstValue(pkg *types.Package) (val constant.Value, typ types.Type) {\n+\t// v3 changed to $false, $true, $convert, to avoid confusion\n+\t// with variable names in inline function bodies.\n+\tif p.tok == '$' {\n+\t\tp.next()\n+\t\tif p.tok != scanner.Ident {\n+\t\t\tp.errorf(\"expected identifer after '$', got %s (%q)\", scanner.TokenString(p.tok), p.lit)\n+\t\t}\n+\t}\n+\n \tswitch p.tok {\n \tcase scanner.String:\n \t\tstr := p.parseString()"}]}