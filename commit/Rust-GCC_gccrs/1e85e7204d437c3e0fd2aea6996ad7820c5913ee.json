{"sha": "1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU4NWU3MjA0ZDQzN2MzZTBmZDJhZWE2OTk2YWQ3ODIwYzU5MTNlZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-10-14T11:59:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-10-14T11:59:47Z"}, "message": "re PR c++/44561 (using nullptr_t with -flto/-fwhopr causes ICE: tree code 'lang_type' is not supported in gimple streams)\n\n2010-10-14  Richard Guenther  <rguenther@suse.de>\n\n\tPR lto/44561\n\t* tree.def (NULLPTR_TYPE): New tree code.\n\t* dbxout.c (dbxout_type): Handle NULLPTR_TYPE.\n\t* dwarf2out.c (is_base_type): Likewise.\n\t(gen_type_die_with_usage): Likewise.\n\t* sdbout.c (plain_type_1): Likewise.\n\t* tree.c (build_int_cst_wide): Likewise.\n\t* gimple.c (gimple_types_compatible_p_1): NULLPTR_TYPE types\n\tare equal.\n\n\tcp/\n\t* cp-tree.h (NULLPTR_TYPE_P): Adjust.\n\t* decl.c (cxx_init_decl_processing): Build a NULLPTR_TYPE node,\n\tuse build_int_cst.\n\t* error.c (dump_type): Handle NULLPTR_TYPE.\n\t(dump_type_prefix): Likewise.\n\t(dump_type_suffix): Likewise.\n\t* mangle.c (write_type): Likewise.\n\t* name-lookup.c (arg_assoc_type): Likewise.\n\t* rtti.c (typeinfo_in_lib_p): Likewise.\n\t* pt.c (tsubst): Likewise.\n\n\t* g++.dg/lto/20101010-3_0.C: New testcase.\n\t* g++.dg/lto/20101010-4_0.C: Likewise.\n\nFrom-SVN: r165462", "tree": {"sha": "4a7d9fe94ac20b96bfc133ea6e4ddea9e9aeaede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a7d9fe94ac20b96bfc133ea6e4ddea9e9aeaede"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a16ced220ff332c70645ad5f9ad2e247f5a50581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a16ced220ff332c70645ad5f9ad2e247f5a50581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a16ced220ff332c70645ad5f9ad2e247f5a50581"}], "stats": {"total": 103, "additions": 83, "deletions": 20}, "files": [{"sha": "640d05eccaed08f81c29912dd05003349b5c2815", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "patch": "@@ -1,3 +1,15 @@\n+2010-10-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/44561\n+\t* tree.def (NULLPTR_TYPE): New tree code.\n+\t* dbxout.c (dbxout_type): Handle NULLPTR_TYPE.\n+\t* dwarf2out.c (is_base_type): Likewise.\n+\t(gen_type_die_with_usage): Likewise.\n+\t* sdbout.c (plain_type_1): Likewise.\n+\t* tree.c (build_int_cst_wide): Likewise.\n+\t* gimple.c (gimple_types_compatible_p_1): NULLPTR_TYPE types\n+\tare equal.\n+\n 2010-10-14  Joseph Myers  <joseph@codesourcery.com>\n \n \t* params.c (params_finished): New."}, {"sha": "ea6f0f528f9aacabb737fafafae843ef6ce2df4e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "patch": "@@ -1,3 +1,17 @@\n+2010-10-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/44561\n+\t* cp-tree.h (NULLPTR_TYPE_P): Adjust.\n+\t* decl.c (cxx_init_decl_processing): Build a NULLPTR_TYPE node,\n+\tuse build_int_cst.\n+\t* error.c (dump_type): Handle NULLPTR_TYPE.\n+\t(dump_type_prefix): Likewise.\n+\t(dump_type_suffix): Likewise.\n+\t* mangle.c (write_type): Likewise.\n+\t* name-lookup.c (arg_assoc_type): Likewise.\n+\t* rtti.c (typeinfo_in_lib_p): Likewise.\n+\t* pt.c (tsubst): Likewise.\n+\n 2010-10-13  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/45984"}, {"sha": "626e452fadd88fd72877fb8b6d0d92ca88453276", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "patch": "@@ -3051,9 +3051,7 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n    || TREE_CODE (TYPE) == COMPLEX_TYPE)\n \n /* True iff TYPE is cv decltype(nullptr).  */\n-#define NULLPTR_TYPE_P(TYPE)\t\t\t\t\\\n-  (TREE_CODE (TYPE) == LANG_TYPE\t\t\t\\\n-   && TYPE_MAIN_VARIANT (TYPE) == nullptr_type_node)\n+#define NULLPTR_TYPE_P(TYPE) (TREE_CODE (TYPE) == NULLPTR_TYPE)\n \n /* [basic.types]\n "}, {"sha": "55e231b0fe4950e9d5d68c06e6d226bb43420732", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "patch": "@@ -3552,15 +3552,14 @@ cxx_init_decl_processing (void)\n     global_delete_fndecl = push_cp_library_fn (DELETE_EXPR, deltype);\n     push_cp_library_fn (VEC_DELETE_EXPR, deltype);\n \n-    nullptr_type_node = make_node (LANG_TYPE);\n+    nullptr_type_node = make_node (NULLPTR_TYPE);\n     TYPE_SIZE (nullptr_type_node) = bitsize_int (GET_MODE_BITSIZE (ptr_mode));\n     TYPE_SIZE_UNIT (nullptr_type_node) = size_int (GET_MODE_SIZE (ptr_mode));\n     TYPE_UNSIGNED (nullptr_type_node) = 1;\n     TYPE_PRECISION (nullptr_type_node) = GET_MODE_BITSIZE (ptr_mode);\n     SET_TYPE_MODE (nullptr_type_node, Pmode);\n     record_builtin_type (RID_MAX, \"decltype(nullptr)\", nullptr_type_node);\n-    nullptr_node = make_node (INTEGER_CST);\n-    TREE_TYPE (nullptr_node) = nullptr_type_node;\n+    nullptr_node = build_int_cst (nullptr_type_node, 0);\n   }\n \n   abort_fndecl"}, {"sha": "3b5cf0acec1c2014daf6ae8675052ee14f3f0d12", "filename": "gcc/cp/error.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "patch": "@@ -500,6 +500,10 @@ dump_type (tree t, int flags)\n       pp_cxx_right_paren (cxx_pp);\n       break;\n \n+    case NULLPTR_TYPE:\n+      pp_string (cxx_pp, \"std::nullptr_t\");\n+      break;\n+\n     default:\n       pp_unsupported_tree (cxx_pp, t);\n       /* Fall through to error.  */\n@@ -728,6 +732,7 @@ dump_type_prefix (tree t, int flags)\n     case DECLTYPE_TYPE:\n     case TYPE_PACK_EXPANSION:\n     case FIXED_POINT_TYPE:\n+    case NULLPTR_TYPE:\n       dump_type (t, flags);\n       pp_base (cxx_pp)->padding = pp_before;\n       break;\n@@ -830,6 +835,7 @@ dump_type_suffix (tree t, int flags)\n     case DECLTYPE_TYPE:\n     case TYPE_PACK_EXPANSION:\n     case FIXED_POINT_TYPE:\n+    case NULLPTR_TYPE:\n       break;\n \n     default:"}, {"sha": "6bab30958aa9777b71aecba1ca0c3a50ba3f7f05", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "patch": "@@ -1943,17 +1943,16 @@ write_type (tree type)\n               write_char ('E');\n               break;\n \n+\t    case NULLPTR_TYPE:\n+\t      write_string (\"Dn\");\n+\t      break;\n+\n \t    case TYPEOF_TYPE:\n \t      sorry (\"mangling typeof, use decltype instead\");\n \t      break;\n \n \t    case LANG_TYPE:\n-\t      if (NULLPTR_TYPE_P (type))\n-\t\t{\n-\t\t  write_string (\"Dn\");\n-\t\t  break;\n-\t\t}\n-\t      /* else fall through.  */\n+\t      /* fall through.  */\n \n \t    default:\n \t      gcc_unreachable ();"}, {"sha": "8b2e542e8a40a8c8867ebef3e831c9b94b26347d", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "patch": "@@ -4932,6 +4932,7 @@ arg_assoc_type (struct arg_lookup *k, tree type)\n     case BOOLEAN_TYPE:\n     case FIXED_POINT_TYPE:\n     case DECLTYPE_TYPE:\n+    case NULLPTR_TYPE:\n       return false;\n     case RECORD_TYPE:\n       if (TYPE_PTRMEMFUNC_P (type))\n@@ -4963,7 +4964,6 @@ arg_assoc_type (struct arg_lookup *k, tree type)\n       return false;\n     case LANG_TYPE:\n       gcc_assert (type == unknown_type_node\n-\t\t  || NULLPTR_TYPE_P (type)\n \t\t  || type == init_list_type_node);\n       return false;\n     case TYPE_PACK_EXPANSION:"}, {"sha": "a365603f52751bfef4e337cb66a5a19ecb0a8f1c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "patch": "@@ -10097,6 +10097,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n     case COMPLEX_TYPE:\n     case VECTOR_TYPE:\n     case BOOLEAN_TYPE:\n+    case NULLPTR_TYPE:\n     case LANG_TYPE:\n       return t;\n "}, {"sha": "da56d4d7bac1f924f5609a410ed0ba95fa4221de", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "patch": "@@ -1051,12 +1051,11 @@ typeinfo_in_lib_p (tree type)\n     case BOOLEAN_TYPE:\n     case REAL_TYPE:\n     case VOID_TYPE:\n+    case NULLPTR_TYPE:\n       return true;\n \n     case LANG_TYPE:\n-      if (NULLPTR_TYPE_P (type))\n-\treturn true;\n-      /* else fall through.  */\n+      /* fall through.  */\n \n     default:\n       return false;"}, {"sha": "c9ca04d197e0ff6f2690e364cbb564542fa54c50", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "patch": "@@ -1863,6 +1863,7 @@ dbxout_type (tree type, int full)\n   switch (TREE_CODE (type))\n     {\n     case VOID_TYPE:\n+    case NULLPTR_TYPE:\n     case LANG_TYPE:\n       /* For a void type, just define it as itself; i.e., \"5=5\".\n \t This makes us consider it defined"}, {"sha": "47d98f328e7858f5ae90657a4f0fd132ed8ebc6b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "patch": "@@ -12611,6 +12611,7 @@ is_base_type (tree type)\n     case METHOD_TYPE:\n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n+    case NULLPTR_TYPE:\n     case OFFSET_TYPE:\n     case LANG_TYPE:\n     case VECTOR_TYPE:\n@@ -20215,6 +20216,7 @@ gen_type_die_with_usage (tree type, dw_die_ref context_die,\n       /* No DIEs needed for fundamental types.  */\n       break;\n \n+    case NULLPTR_TYPE:\n     case LANG_TYPE:\n       /* Just use DW_TAG_unspecified_type.  */\n       {"}, {"sha": "fca78037a0a8044d079562e62e6b6f2aafe35030", "filename": "gcc/gimple.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "patch": "@@ -3661,6 +3661,10 @@ gimple_types_compatible_p_1 (tree t1, tree t2, enum gtc_mode mode,\n \tgoto different_types;\n       }\n \n+    case NULLPTR_TYPE:\n+      /* There is only one decltype(nullptr).  */\n+      goto same_types;\n+\n     case INTEGER_TYPE:\n     case BOOLEAN_TYPE:\n       {"}, {"sha": "53075acdcb7318128a850649bc92ce2a8df2eb1e", "filename": "gcc/sdbout.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "patch": "@@ -495,6 +495,7 @@ plain_type_1 (tree type, int level)\n   switch (TREE_CODE (type))\n     {\n     case VOID_TYPE:\n+    case NULLPTR_TYPE:\n       return T_VOID;\n     case BOOLEAN_TYPE:\n     case INTEGER_TYPE:"}, {"sha": "de4fe20a24c7f33a284e316d51c2805a6b3eef61", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "patch": "@@ -1,3 +1,9 @@\n+2010-10-14  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/44561\n+\t* g++.dg/lto/20101010-3_0.C: New testcase.\n+\t* g++.dg/lto/20101010-4_0.C: Likewise.\n+\n 2010-10-14  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* objc.dg/pr45878.m: Update to include NSConstantString interface"}, {"sha": "ed3b8d6bc8e2cb1edda13c2f900ff535b431f15c", "filename": "gcc/testsuite/g++.dg/lto/20101010-3_0.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20101010-3_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20101010-3_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20101010-3_0.C?ref=1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "patch": "@@ -0,0 +1,5 @@\n+// { dg-lto-do link }\n+// { dg-lto-options { \"-flto -std=c++0x\" } }\n+\n+decltype(nullptr) a;\n+int main() { return 0; }"}, {"sha": "01beb2167c0425459d6314f427681e481004135e", "filename": "gcc/testsuite/g++.dg/lto/20101010-4_0.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20101010-4_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20101010-4_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2F20101010-4_0.C?ref=1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "patch": "@@ -0,0 +1,9 @@\n+// { dg-lto-do link }\n+// { dg-lto-options { { -std=c++0x -flto -r -nostdlib } { -std=c++0x -flto -g -r -nostdlib } } }\n+\n+typedef decltype(nullptr) nullptr_t;\n+class shared_ptr {\n+public:\n+    shared_ptr(nullptr_t __p);\n+};\n+shared_ptr p = nullptr;"}, {"sha": "4d505b7f1ad25f77cd5c5df41bbdf8d736f7b3fd", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "patch": "@@ -1178,6 +1178,10 @@ build_int_cst_wide (tree type, unsigned HOST_WIDE_INT low, HOST_WIDE_INT hi)\n \n   switch (TREE_CODE (type))\n     {\n+    case NULLPTR_TYPE:\n+      gcc_assert (hi == 0 && low == 0);\n+      /* Fallthru.  */\n+\n     case POINTER_TYPE:\n     case REFERENCE_TYPE:\n       /* Cache NULL pointer.  */"}, {"sha": "24729e8180d4895fd5f101706746c640481175cf", "filename": "gcc/tree.def", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e85e7204d437c3e0fd2aea6996ad7820c5913ee/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=1e85e7204d437c3e0fd2aea6996ad7820c5913ee", "patch": "@@ -162,15 +162,18 @@ DEFTREECODE (REAL_TYPE, \"real_type\", tcc_type, 0)\n    The TREE_TYPE points to the node for the type pointed to.  */\n DEFTREECODE (POINTER_TYPE, \"pointer_type\", tcc_type, 0)\n \n+/* A reference is like a pointer except that it is coerced\n+   automatically to the value it points to.  Used in C++.  */\n+DEFTREECODE (REFERENCE_TYPE, \"reference_type\", tcc_type, 0)\n+\n+/* The C++ decltype(nullptr) type.  */\n+DEFTREECODE (NULLPTR_TYPE, \"nullptr_type\", tcc_type, 0)\n+\n /* _Fract and _Accum types in Embedded-C.  Different fixed-point types\n    are distinguished by machine mode and by the TYPE_SIZE and the\n    TYPE_PRECISION.  */\n DEFTREECODE (FIXED_POINT_TYPE, \"fixed_point_type\", tcc_type, 0)\n \n-/* A reference is like a pointer except that it is coerced\n-   automatically to the value it points to.  Used in C++.  */\n-DEFTREECODE (REFERENCE_TYPE, \"reference_type\", tcc_type, 0)\n-\n /* The ordering of the following codes is optimized for the checking\n    macros in tree.h.  Changing the order will degrade the speed of the\n    compiler.  COMPLEX_TYPE, VECTOR_TYPE, ARRAY_TYPE.  */"}]}