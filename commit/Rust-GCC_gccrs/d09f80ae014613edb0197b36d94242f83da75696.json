{"sha": "d09f80ae014613edb0197b36d94242f83da75696", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDA5ZjgwYWUwMTQ2MTNlZGIwMTk3YjM2ZDk0MjQyZjgzZGE3NTY5Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-04-10T00:42:37Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-04-10T01:19:11Z"}, "message": "compiler: look up composite literal keys in the global namespace\n\nA composite literal key may not have a global definition, so\nGogo::define_global_names may not see it.  In order to correctly\nhandle the case in which a predeclared identifier is used as a\ncomposite literal key, do an explicit check of the global namespace.\n\nTest case is https://golang.org/cl/227783.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/227784", "tree": {"sha": "944e48f5ccdc38f45b244820bae48df0006b86c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/944e48f5ccdc38f45b244820bae48df0006b86c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d09f80ae014613edb0197b36d94242f83da75696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d09f80ae014613edb0197b36d94242f83da75696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d09f80ae014613edb0197b36d94242f83da75696", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d09f80ae014613edb0197b36d94242f83da75696/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fef3d8b4a072757a0a4970b3ce566c354de150d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fef3d8b4a072757a0a4970b3ce566c354de150d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fef3d8b4a072757a0a4970b3ce566c354de150d3"}], "stats": {"total": 16, "additions": 12, "deletions": 4}, "files": [{"sha": "b3cc9ecb9d16dff284f7043e7d1fe49ceda8893e", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09f80ae014613edb0197b36d94242f83da75696/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09f80ae014613edb0197b36d94242f83da75696/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=d09f80ae014613edb0197b36d94242f83da75696", "patch": "@@ -1,4 +1,4 @@\n-4a31d064fd6996f64b620104e849292af8f25e12\n+b31fbf7d8f23508cfbd578c5c44b13eefd8f359e\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "deac87448f33e42f7ddf7c9ae7ce890487839a14", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d09f80ae014613edb0197b36d94242f83da75696/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d09f80ae014613edb0197b36d94242f83da75696/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=d09f80ae014613edb0197b36d94242f83da75696", "patch": "@@ -16032,9 +16032,17 @@ Composite_literal_key_expression::do_lower(Gogo* gogo, Named_object*,\n   Named_object* no = gogo->lookup(this->name_, NULL);\n   if (no == NULL)\n     {\n-      go_error_at(this->location(), \"reference to undefined name %qs\",\n-\t\t  Gogo::message_name(this->name_).c_str());\n-      return Expression::make_error(this->location());\n+      // Gogo::lookup doesn't look in the global namespace, and names\n+      // used in composite literal keys aren't seen by\n+      // Gogo::define_global_names, so we have to look in the global\n+      // namespace ourselves.\n+      no = gogo->lookup_global(Gogo::unpack_hidden_name(this->name_).c_str());\n+      if (no == NULL)\n+\t{\n+\t  go_error_at(this->location(), \"reference to undefined name %qs\",\n+\t\t      Gogo::message_name(this->name_).c_str());\n+\t  return Expression::make_error(this->location());\n+\t}\n     }\n   return Expression::make_unknown_reference(no, this->location());\n }"}]}