{"sha": "9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "node_id": "C_kwDOANBUbNoAKDljYmNiNzRkNzFkNDAyYmZhMjBkMWE3ZGVmNmEwZWVhNWU1N2Q1MjU", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-04-30T06:54:22Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-05-17T16:12:25Z"}, "message": "Add AST::AttrInputMacro\n\ngcc/rust/ChangeLog:\n\n\t* ast/rust-ast-dump.cc\n\t(Dump::visit): Add AttrInputMacro visitor.\n\t* ast/rust-ast-dump.h:\n\t(Dump::visit): Likewise.\n\t* ast/rust-ast-full-decls.h\n\t(class AttrInputMacro): New.\n\t* ast/rust-ast-collector.cc\n\t(TokenCollector::visit):\n\tAdd and call out to AttrInputMacro visitor.\n\t* ast/rust-ast-collector.h:\n\t(TokenCollector::visit): Add AttrInputMacro visitor.\n\t* ast/rust-ast-visitor.h:\n\t(ASTVisitor::visit): Likewise.\n\t* ast/rust-ast.cc\n\t(AttrInputMacro::accept_vis): New.\n\t(AttrInputMacro::as_string): New.\n\t(AttrInputMacro::AttrInputMacro): New.\n\t(AttrInputMacro::operator=): New.\n\t* ast/rust-ast.h:\n\t(AttrInput::AttrInputType::MACRO): New.\n\t* ast/rust-expr.h\n\t(class AttrInputMacro): New.\n\t* checks/errors/rust-feature-gate.h:\n\t(FeatureGate::visit): Add AttrInputMacro visitor.\n\t* expand/rust-cfg-strip.cc\n\t(CfgStrip::visit): Likewise.\n\t* expand/rust-cfg-strip.h:\n\t(CfgStrip::visit): Likewise.\n\t* expand/rust-expand-visitor.cc\n\t(ExpandVisitor::visit): Likewise.\n\t* expand/rust-expand-visitor.h:\n\t(ExpandVisitor::visit): Likewise.\n\t* hir/rust-ast-lower-base.cc\n\t(ASTLoweringBase::visit): Likewise.\n\t* hir/rust-ast-lower-base.h:\n\t(ASTLoweringBase::visit): Likewise.\n\t* resolve/rust-ast-resolve-base.cc\n\t(ResolverBase::visit): Likewise.\n\t* resolve/rust-ast-resolve-base.h:\n\t(ResolverBase::visit): Likewise.\n\t* resolve/rust-early-name-resolver.cc\n\t(EarlyNameResolver::visit): Likewise.\n\t* resolve/rust-early-name-resolver.h:\n\t(EarlyNameResolver::visit): Likewise.\n\t* util/rust-attributes.cc\n\t(AttributeChecker::visit): Likewise.\n\t(check_doc_attribute): Handle AttrInputType::MACRO.\n\t* util/rust-attributes.h:\n\t(AttributeChecker::visit): Add AttrInputMacro visitor.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "42e2af1b19f89bc7f4eaba43185474877d759110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42e2af1b19f89bc7f4eaba43185474877d759110"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d98e5aaa62bb1dfdc3ce73d05d03eaa6c875164a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d98e5aaa62bb1dfdc3ce73d05d03eaa6c875164a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d98e5aaa62bb1dfdc3ce73d05d03eaa6c875164a"}], "stats": {"total": 120, "additions": 120, "deletions": 0}, "files": [{"sha": "45a76094499097deb5d4be5fa618220ff14a3773", "filename": "gcc/rust/ast/rust-ast-collector.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fast%2Frust-ast-collector.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fast%2Frust-ast-collector.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-collector.cc?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -170,6 +170,10 @@ TokenCollector::visit (Attribute &attrib)\n \t    visit (static_cast<AttrInputLiteral &> (attrib.get_attr_input ()));\n \t    break;\n \t  }\n+\t  case AST::AttrInput::AttrInputType::MACRO: {\n+\t    visit (static_cast<AttrInputMacro &> (attrib.get_attr_input ()));\n+\t    break;\n+\t  }\n \t  case AST::AttrInput::AttrInputType::META_ITEM: {\n \t    visit (static_cast<AttrInputMetaItemContainer &> (\n \t      attrib.get_attr_input ()));\n@@ -839,6 +843,13 @@ TokenCollector::visit (AttrInputLiteral &literal)\n   visit (literal.get_literal ());\n }\n \n+void\n+TokenCollector::visit (AttrInputMacro &macro)\n+{\n+  tokens.push_back (Rust::Token::make (EQUAL, Location ()));\n+  visit (macro.get_macro ());\n+}\n+\n void\n TokenCollector::visit (MetaItemLitExpr &item)\n {"}, {"sha": "e1857977a0355555526f55423c763593e00a96be", "filename": "gcc/rust/ast/rust-ast-collector.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fast%2Frust-ast-collector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fast%2Frust-ast-collector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-collector.h?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -149,6 +149,7 @@ class TokenCollector : public ASTVisitor\n   // rust-expr.h\n   void visit (LiteralExpr &expr);\n   void visit (AttrInputLiteral &attr_input);\n+  void visit (AttrInputMacro &attr_input);\n   void visit (MetaItemLitExpr &meta_item);\n   void visit (MetaItemPathLit &meta_item);\n   void visit (BorrowExpr &expr);"}, {"sha": "c00ed650ba7de78359beacf7ea9b1d09841ed156", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -514,6 +514,10 @@ void\n Dump::visit (AttrInputLiteral &)\n {}\n \n+void\n+Dump::visit (AttrInputMacro &)\n+{}\n+\n void\n Dump::visit (MetaItemLitExpr &)\n {}"}, {"sha": "a3deced411214c217afc659cafde88e5cbb2c594", "filename": "gcc/rust/ast/rust-ast-dump.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fast%2Frust-ast-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fast%2Frust-ast-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.h?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -137,6 +137,7 @@ class Dump : public ASTVisitor\n   // rust-expr.h\n   void visit (LiteralExpr &expr);\n   void visit (AttrInputLiteral &attr_input);\n+  void visit (AttrInputMacro &attr_input);\n   void visit (MetaItemLitExpr &meta_item);\n   void visit (MetaItemPathLit &meta_item);\n   void visit (BorrowExpr &expr);"}, {"sha": "64b9b3d5f0569902bf4ee6115daf1a858f8a42c3", "filename": "gcc/rust/ast/rust-ast-full-decls.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fast%2Frust-ast-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-decls.h?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -77,6 +77,7 @@ class QualifiedPathInType;\n class ExprWithBlock;\n class LiteralExpr;\n class AttrInputLiteral;\n+class AttrInputMacro;\n class MetaItemLitExpr;\n class MetaItemPathLit;\n class OperatorExpr;"}, {"sha": "7b41863b3640e02d2b163e29496b201ee4a8f2f9", "filename": "gcc/rust/ast/rust-ast-visitor.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fast%2Frust-ast-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-visitor.h?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -66,6 +66,7 @@ class ASTVisitor\n   // rust-expr.h\n   virtual void visit (LiteralExpr &expr) = 0;\n   virtual void visit (AttrInputLiteral &attr_input) = 0;\n+  virtual void visit (AttrInputMacro &attr_input) = 0;\n   virtual void visit (MetaItemLitExpr &meta_item) = 0;\n   virtual void visit (MetaItemPathLit &meta_item) = 0;\n   virtual void visit (BorrowExpr &expr) = 0;"}, {"sha": "9a5335959ff585fcdea7f2fa18407aaf6a65aacd", "filename": "gcc/rust/ast/rust-ast.cc", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fast%2Frust-ast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fast%2Frust-ast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.cc?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -3266,6 +3266,12 @@ AttrInputMetaItemContainer::as_string () const\n   return str + \")\";\n }\n \n+std::string\n+AttrInputMacro::as_string () const\n+{\n+  return \" = \" + macro->as_string ();\n+}\n+\n /* Override that calls the function recursively on all items contained within\n  * the module. */\n void\n@@ -4220,6 +4226,18 @@ BlockExpr::strip_tail_expr ()\n     }\n }\n \n+// needed here because \"rust-expr.h\" doesn't include \"rust-macro.h\"\n+AttrInputMacro::AttrInputMacro (const AttrInputMacro &oth)\n+  : macro (oth.macro->clone_macro_invocation_impl ())\n+{}\n+\n+void\n+AttrInputMacro::operator= (const AttrInputMacro &oth)\n+{\n+  macro = std::unique_ptr<MacroInvocation> (\n+    oth.macro->clone_macro_invocation_impl ());\n+}\n+\n /* Visitor implementations - these are short but inlining can't happen anyway\n  * due to virtual functions and I didn't want to make the ast header includes\n  * any longer than they already are. */\n@@ -4266,6 +4284,12 @@ AttrInputLiteral::accept_vis (ASTVisitor &vis)\n   vis.visit (*this);\n }\n \n+void\n+AttrInputMacro::accept_vis (ASTVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n void\n MetaItemLitExpr::accept_vis (ASTVisitor &vis)\n {"}, {"sha": "56207bdb5319cb5da6055f66dbb57af949ce50b5", "filename": "gcc/rust/ast/rust-ast.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fast%2Frust-ast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fast%2Frust-ast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast.h?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -597,6 +597,7 @@ class AttrInput : public Visitable\n   enum AttrInputType\n   {\n     LITERAL,\n+    MACRO,\n     META_ITEM,\n     TOKEN_TREE,\n   };"}, {"sha": "2b23c24672392721a51b08ec6d7217e1c2194a76", "filename": "gcc/rust/ast/rust-expr.h", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fast%2Frust-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fast%2Frust-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-expr.h?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -139,6 +139,48 @@ class AttrInputLiteral : public AttrInput\n   }\n };\n \n+// Like an AttrInputLiteral, but stores a MacroInvocation\n+class AttrInputMacro : public AttrInput\n+{\n+  std::unique_ptr<MacroInvocation> macro;\n+\n+public:\n+  AttrInputMacro (std::unique_ptr<MacroInvocation> macro)\n+    : macro (std::move (macro))\n+  {}\n+\n+  AttrInputMacro (const AttrInputMacro &oth);\n+\n+  AttrInputMacro (AttrInputMacro &&oth) : macro (std::move (oth.macro)) {}\n+\n+  void operator= (const AttrInputMacro &oth);\n+\n+  void operator= (AttrInputMacro &&oth) { macro = std::move (oth.macro); }\n+\n+  std::string as_string () const override;\n+\n+  void accept_vis (ASTVisitor &vis) override;\n+\n+  // assuming this can't be a cfg predicate\n+  bool check_cfg_predicate (const Session &) const override { return false; }\n+\n+  // assuming this is like AttrInputLiteral\n+  bool is_meta_item () const override { return false; }\n+\n+  std::unique_ptr<MacroInvocation> &get_macro () { return macro; }\n+\n+  AttrInputType get_attr_input_type () const final override\n+  {\n+    return AttrInput::AttrInputType::MACRO;\n+  }\n+\n+protected:\n+  AttrInputMacro *clone_attr_input_impl () const override\n+  {\n+    return new AttrInputMacro (*this);\n+  }\n+};\n+\n /* literal expr only meta item inner - TODO possibly replace with inheritance of\n  * LiteralExpr itself? */\n class MetaItemLitExpr : public MetaItemInner"}, {"sha": "5ce0571a2ce46a1c1d7b5877dfa57753a7051155", "filename": "gcc/rust/checks/errors/rust-feature-gate.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-feature-gate.h?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -48,6 +48,7 @@ class FeatureGate : public AST::ASTVisitor\n   void visit (AST::QualifiedPathInType &path) override {}\n   void visit (AST::LiteralExpr &expr) override {}\n   void visit (AST::AttrInputLiteral &attr_input) override {}\n+  void visit (AST::AttrInputMacro &attr_input) override {}\n   void visit (AST::MetaItemLitExpr &meta_item) override {}\n   void visit (AST::MetaItemPathLit &meta_item) override {}\n   void visit (AST::BorrowExpr &expr) override {}"}, {"sha": "f9d98c0f24d13e70810ec45353f0affcc44bb7a4", "filename": "gcc/rust/expand/rust-cfg-strip.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fexpand%2Frust-cfg-strip.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fexpand%2Frust-cfg-strip.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-cfg-strip.cc?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -604,6 +604,11 @@ CfgStrip::visit (AST::AttrInputLiteral &)\n   // shouldn't require?\n }\n void\n+CfgStrip::visit (AST::AttrInputMacro &)\n+{\n+  // shouldn't require?\n+}\n+void\n CfgStrip::visit (AST::MetaItemLitExpr &)\n {\n   // shouldn't require?"}, {"sha": "7235bfa5a0e38b8f17f2863c8fff74c439ca6337", "filename": "gcc/rust/expand/rust-cfg-strip.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fexpand%2Frust-cfg-strip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fexpand%2Frust-cfg-strip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-cfg-strip.h?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -81,6 +81,7 @@ class CfgStrip : public AST::ASTVisitor\n \n   void visit (AST::LiteralExpr &expr) override;\n   void visit (AST::AttrInputLiteral &) override;\n+  void visit (AST::AttrInputMacro &) override;\n   void visit (AST::MetaItemLitExpr &) override;\n   void visit (AST::MetaItemPathLit &) override;\n   void visit (AST::BorrowExpr &expr) override;"}, {"sha": "be1a7a4225f9c32a9173a742a310b806fd736e7b", "filename": "gcc/rust/expand/rust-expand-visitor.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.cc?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -323,6 +323,12 @@ void\n ExpandVisitor::visit (AST::AttrInputLiteral &)\n {}\n \n+void\n+ExpandVisitor::visit (AST::AttrInputMacro &macro)\n+{\n+  rust_sorry_at (Location (), \"macros in attributes not supported\");\n+}\n+\n void\n ExpandVisitor::visit (AST::MetaItemLitExpr &)\n {}"}, {"sha": "21677ec9002cc3ab9d087642429b00ba65dcc08e", "filename": "gcc/rust/expand/rust-expand-visitor.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-expand-visitor.h?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -166,6 +166,7 @@ class ExpandVisitor : public AST::ASTVisitor\n \n   void visit (AST::LiteralExpr &expr) override;\n   void visit (AST::AttrInputLiteral &) override;\n+  void visit (AST::AttrInputMacro &) override;\n   void visit (AST::MetaItemLitExpr &) override;\n   void visit (AST::MetaItemPathLit &) override;\n   void visit (AST::BorrowExpr &expr) override;"}, {"sha": "d7c6a3c49dc43ec103bb7b859b8b45c8491dac29", "filename": "gcc/rust/hir/rust-ast-lower-base.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.cc?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -87,6 +87,9 @@ void\n ASTLoweringBase::visit (AST::AttrInputLiteral &)\n {}\n void\n+ASTLoweringBase::visit (AST::AttrInputMacro &)\n+{}\n+void\n ASTLoweringBase::visit (AST::MetaItemLitExpr &)\n {}\n void"}, {"sha": "c8d2c27edb53eb0b594b4cd6f98bb6f467928fb7", "filename": "gcc/rust/hir/rust-ast-lower-base.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower-base.h?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -94,6 +94,7 @@ class ASTLoweringBase : public AST::ASTVisitor\n   // rust-expr.h\n   virtual void visit (AST::LiteralExpr &expr);\n   virtual void visit (AST::AttrInputLiteral &attr_input);\n+  virtual void visit (AST::AttrInputMacro &attr_input);\n   virtual void visit (AST::MetaItemLitExpr &meta_item);\n   virtual void visit (AST::MetaItemPathLit &meta_item);\n   virtual void visit (AST::BorrowExpr &expr);"}, {"sha": "3bd7e4a6a025632fa518af0c7bf6e51bd88eafd7", "filename": "gcc/rust/resolve/rust-ast-resolve-base.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.cc?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -106,6 +106,10 @@ void\n ResolverBase::visit (AST::AttrInputLiteral &)\n {}\n \n+void\n+ResolverBase::visit (AST::AttrInputMacro &)\n+{}\n+\n void\n ResolverBase::visit (AST::MetaItemLitExpr &)\n {}"}, {"sha": "bef7f3dd298966a6e96b81250cde05fc56b7cdc1", "filename": "gcc/rust/resolve/rust-ast-resolve-base.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-base.h?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -48,6 +48,7 @@ class ResolverBase : public AST::ASTVisitor\n   void visit (AST::QualifiedPathInType &);\n   void visit (AST::LiteralExpr &);\n   void visit (AST::AttrInputLiteral &);\n+  void visit (AST::AttrInputMacro &);\n   void visit (AST::MetaItemLitExpr &);\n   void visit (AST::MetaItemPathLit &);\n   void visit (AST::BorrowExpr &);"}, {"sha": "00f661f14ec7de4d17c2e98a8464b11fce44e8e9", "filename": "gcc/rust/resolve/rust-early-name-resolver.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.cc?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -221,6 +221,10 @@ void\n EarlyNameResolver::visit (AST::AttrInputLiteral &)\n {}\n \n+void\n+EarlyNameResolver::visit (AST::AttrInputMacro &)\n+{}\n+\n void\n EarlyNameResolver::visit (AST::MetaItemLitExpr &)\n {}"}, {"sha": "44d1a1819dbb8ea83b3e1768316d67742c7e1fc3", "filename": "gcc/rust/resolve/rust-early-name-resolver.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-early-name-resolver.h?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -142,6 +142,7 @@ class EarlyNameResolver : public AST::ASTVisitor\n   virtual void visit (AST::QualifiedPathInType &path);\n   virtual void visit (AST::LiteralExpr &expr);\n   virtual void visit (AST::AttrInputLiteral &attr_input);\n+  virtual void visit (AST::AttrInputMacro &attr_input);\n   virtual void visit (AST::MetaItemLitExpr &meta_item);\n   virtual void visit (AST::MetaItemPathLit &meta_item);\n   virtual void visit (AST::BorrowExpr &expr);"}, {"sha": "19fab508320ae0e29d449ca1c8f5005d1152ee18", "filename": "gcc/rust/util/rust-attributes.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Futil%2Frust-attributes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Futil%2Frust-attributes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.cc?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -163,6 +163,7 @@ check_doc_attribute (const AST::Attribute &attribute)\n   switch (attribute.get_attr_input ().get_attr_input_type ())\n     {\n     case AST::AttrInput::LITERAL:\n+    case AST::AttrInput::MACRO:\n     case AST::AttrInput::META_ITEM:\n       break;\n       // FIXME: Handle them as well\n@@ -280,6 +281,10 @@ void\n AttributeChecker::visit (AST::AttrInputLiteral &)\n {}\n \n+void\n+AttributeChecker::visit (AST::AttrInputMacro &)\n+{}\n+\n void\n AttributeChecker::visit (AST::MetaItemLitExpr &)\n {}"}, {"sha": "806ea785d3a18907c45ea84468c67b9b297f9565", "filename": "gcc/rust/util/rust-attributes.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Futil%2Frust-attributes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cbcb74d71d402bfa20d1a7def6a0eea5e57d525/gcc%2Frust%2Futil%2Frust-attributes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.h?ref=9cbcb74d71d402bfa20d1a7def6a0eea5e57d525", "patch": "@@ -113,6 +113,7 @@ class AttributeChecker : public AST::ASTVisitor\n   // rust-expr.h\n   void visit (AST::LiteralExpr &expr);\n   void visit (AST::AttrInputLiteral &attr_input);\n+  void visit (AST::AttrInputMacro &attr_input);\n   void visit (AST::MetaItemLitExpr &meta_item);\n   void visit (AST::MetaItemPathLit &meta_item);\n   void visit (AST::BorrowExpr &expr);"}]}