{"sha": "da571fdab9871ff28cc385a9a1fa25d698162ca1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE1NzFmZGFiOTg3MWZmMjhjYzM4NWE5YTFmYTI1ZDY5ODE2MmNhMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-29T12:14:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-29T12:14:08Z"}, "message": "match.pd: Merge address comparison patterns and make them handle some more cases.\n\n2015-07-29  Richard Biener  <rguenther@suse.de>\n\n\t* match.pd: Merge address comparison patterns and make them\n\thandle some more cases.\n\nFrom-SVN: r226345", "tree": {"sha": "99107cade2dc44fb05c50498b106ec4d1289103d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99107cade2dc44fb05c50498b106ec4d1289103d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da571fdab9871ff28cc385a9a1fa25d698162ca1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da571fdab9871ff28cc385a9a1fa25d698162ca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da571fdab9871ff28cc385a9a1fa25d698162ca1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da571fdab9871ff28cc385a9a1fa25d698162ca1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c56f494f748440295cb1536871778153cd7c8335", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c56f494f748440295cb1536871778153cd7c8335", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c56f494f748440295cb1536871778153cd7c8335"}], "stats": {"total": 86, "additions": 48, "deletions": 38}, "files": [{"sha": "ed752fc9e5a4dd741e1d12e33642cd3874bb6f02", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da571fdab9871ff28cc385a9a1fa25d698162ca1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da571fdab9871ff28cc385a9a1fa25d698162ca1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=da571fdab9871ff28cc385a9a1fa25d698162ca1", "patch": "@@ -1,3 +1,8 @@\n+2015-07-29  Richard Biener  <rguenther@suse.de>\n+\n+\t* match.pd: Merge address comparison patterns and make them\n+\thandle some more cases.\n+\n 2015-07-29  Richard Biener  <rguenther@suse.de>\n \n \t* genmatch.c (c_expr::gen_transform): Error on unknown captures."}, {"sha": "bc38c22b39a4badd0ce8a6ba673e3e1cc955632b", "filename": "gcc/match.pd", "status": "modified", "additions": 43, "deletions": 38, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da571fdab9871ff28cc385a9a1fa25d698162ca1/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da571fdab9871ff28cc385a9a1fa25d698162ca1/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=da571fdab9871ff28cc385a9a1fa25d698162ca1", "patch": "@@ -1802,26 +1802,6 @@ along with GCC; see the file COPYING3.  If not see\n   (cmp (convert?@3 (bit_xor @0 INTEGER_CST@1)) INTEGER_CST@2)\n   (if (tree_nop_conversion_p (TREE_TYPE (@3), TREE_TYPE (@0)))\n    (cmp @0 (bit_xor @1 (convert @2)))))\n-   \n- /* If this is an equality comparison of the address of two non-weak,\n-    unaliased symbols neither of which are extern (since we do not\n-    have access to attributes for externs), then we know the result.  */\n- (simplify\n-  (cmp (convert? addr@0) (convert? addr@1))\n-  (if (DECL_P (TREE_OPERAND (@0, 0))\n-       && DECL_P (TREE_OPERAND (@1, 0)))\n-   (if (decl_in_symtab_p (TREE_OPERAND (@0, 0))\n-\t&& decl_in_symtab_p (TREE_OPERAND (@1, 0)))\n-    (with\n-     {\n-       int equal = symtab_node::get_create (TREE_OPERAND (@0, 0))\n-           ->equal_address_to (symtab_node::get_create (TREE_OPERAND (@1, 0)));\n-     }\n-     (if (equal != 2)\n-      { constant_boolean_node (equal\n-\t\t\t       ? cmp == EQ_EXPR : cmp != EQ_EXPR, type); }))\n-    (if (TREE_OPERAND (@0, 0) != TREE_OPERAND (@1, 0))\n-     { constant_boolean_node (cmp == EQ_EXPR ? false : true, type); }))))\n \n  (simplify\n   (cmp (convert? addr@0) integer_zerop)\n@@ -1834,7 +1814,7 @@ along with GCC; see the file COPYING3.  If not see\n    enough to make fold_stmt not regress when not dispatching to fold_binary.  */\n (for cmp (simple_comparison)\n  (simplify\n-  (cmp (convert? addr@0) (convert? addr@1))\n+  (cmp (convert?@2 addr@0) (convert? addr@1))\n   (with\n    {\n      HOST_WIDE_INT off0, off1;\n@@ -1851,23 +1831,48 @@ along with GCC; see the file COPYING3.  If not see\n          base1 = TREE_OPERAND (base1, 0);\n        }\n    }\n-   (if (base0 && base1\n-\t&& operand_equal_p (base0, base1, 0)\n-\t&& (cmp == EQ_EXPR || cmp == NE_EXPR\n-\t    || POINTER_TYPE_OVERFLOW_UNDEFINED))\n-    (switch\n-     (if (cmp == EQ_EXPR)\n-      { constant_boolean_node (off0 == off1, type); })\n-     (if (cmp == NE_EXPR)\n-      { constant_boolean_node (off0 != off1, type); })\n-     (if (cmp == LT_EXPR)\n-      { constant_boolean_node (off0 < off1, type); })\n-     (if (cmp == LE_EXPR)\n-      { constant_boolean_node (off0 <= off1, type); })\n-     (if (cmp == GE_EXPR)\n-      { constant_boolean_node (off0 >= off1, type); })\n-     (if (cmp == GT_EXPR)\n-      { constant_boolean_node (off0 > off1, type); }))))))\n+   (if (base0 && base1)\n+    (with\n+     {\n+       int equal;\n+       if (decl_in_symtab_p (base0)\n+\t   && decl_in_symtab_p (base1))\n+         equal = symtab_node::get_create (base0)\n+\t           ->equal_address_to (symtab_node::get_create (base1));\n+       else\n+         equal = operand_equal_p (base0, base1, 0);\n+     }\n+     (if (equal == 1\n+\t  && (cmp == EQ_EXPR || cmp == NE_EXPR\n+\t      /* If the offsets are equal we can ignore overflow.  */\n+\t      || off0 == off1\n+\t      || POINTER_TYPE_OVERFLOW_UNDEFINED\n+\t      /* Or if we compare using pointers to decls.  */\n+\t      || (POINTER_TYPE_P (TREE_TYPE (@2))\n+\t\t  && DECL_P (base0))))\n+      (switch\n+       (if (cmp == EQ_EXPR)\n+\t{ constant_boolean_node (off0 == off1, type); })\n+       (if (cmp == NE_EXPR)\n+\t{ constant_boolean_node (off0 != off1, type); })\n+       (if (cmp == LT_EXPR)\n+\t{ constant_boolean_node (off0 < off1, type); })\n+       (if (cmp == LE_EXPR)\n+\t{ constant_boolean_node (off0 <= off1, type); })\n+       (if (cmp == GE_EXPR)\n+\t{ constant_boolean_node (off0 >= off1, type); })\n+       (if (cmp == GT_EXPR)\n+\t{ constant_boolean_node (off0 > off1, type); }))\n+      (if (equal == 0\n+\t   && DECL_P (base0) && DECL_P (base1)\n+\t   /* If we compare this as integers require equal offset.  */\n+\t   && (!INTEGRAL_TYPE_P (TREE_TYPE (@2))\n+\t       || off0 == off1))\n+       (switch\n+\t(if (cmp == EQ_EXPR)\n+\t { constant_boolean_node (false, type); })\n+\t(if (cmp == NE_EXPR)\n+\t { constant_boolean_node (true, type); })))))))))\n \n /* Non-equality compare simplifications from fold_binary  */\n (for cmp (lt gt le ge)"}]}