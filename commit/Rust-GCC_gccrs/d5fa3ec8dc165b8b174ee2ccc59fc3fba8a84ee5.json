{"sha": "d5fa3ec8dc165b8b174ee2ccc59fc3fba8a84ee5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVmYTNlYzhkYzE2NWI4YjE3NGVlMmNjYzU5ZmMzZmJhOGE4NGVlNQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2006-04-25T15:00:53Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2006-04-25T15:00:53Z"}, "message": "varasm.c (align_variable): New function.\n\n\t* varasm.c (align_variable): New function.\n\t(get_block_for_decl): Apply align_variable to DECL before\n\tcalculating section information.\n\t(assemble_variable): Split out alignment computation.\n\nFrom-SVN: r113250", "tree": {"sha": "764200d5372f4cabc3699e005d7a9557816ed396", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/764200d5372f4cabc3699e005d7a9557816ed396"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5fa3ec8dc165b8b174ee2ccc59fc3fba8a84ee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5fa3ec8dc165b8b174ee2ccc59fc3fba8a84ee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5fa3ec8dc165b8b174ee2ccc59fc3fba8a84ee5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5fa3ec8dc165b8b174ee2ccc59fc3fba8a84ee5/comments", "author": null, "committer": null, "parents": [{"sha": "495db1a1155904059e4239dc124c85717245d761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/495db1a1155904059e4239dc124c85717245d761", "html_url": "https://github.com/Rust-GCC/gccrs/commit/495db1a1155904059e4239dc124c85717245d761"}], "stats": {"total": 91, "additions": 54, "deletions": 37}, "files": [{"sha": "cfec97c927c7b6e66b139f0ea8f9d7f96284fe57", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5fa3ec8dc165b8b174ee2ccc59fc3fba8a84ee5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5fa3ec8dc165b8b174ee2ccc59fc3fba8a84ee5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d5fa3ec8dc165b8b174ee2ccc59fc3fba8a84ee5", "patch": "@@ -1,3 +1,10 @@\n+2006-04-25  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* varasm.c (align_variable): New function.\n+\t(get_block_for_decl): Apply align_variable to DECL before\n+\tcalculating section information.\n+\t(assemble_variable): Split out alignment computation.\n+\n 2006-04-25  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* expmed.c (store_bit_field): Handle paradoxical subregs on big endian"}, {"sha": "f0b521ca8e54a75765875b69be31ce3e7a6f6199", "filename": "gcc/varasm.c", "status": "modified", "additions": 47, "deletions": 37, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5fa3ec8dc165b8b174ee2ccc59fc3fba8a84ee5/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5fa3ec8dc165b8b174ee2ccc59fc3fba8a84ee5/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=d5fa3ec8dc165b8b174ee2ccc59fc3fba8a84ee5", "patch": "@@ -828,6 +828,48 @@ bss_initializer_p (tree decl)\n \t      && initializer_zerop (DECL_INITIAL (decl))));\n }\n \n+/* Compute the alignment of variable specified by DECL.\n+   DONT_OUTPUT_DATA is from assemble_variable.  */\n+\n+static void\n+align_variable (tree decl, bool dont_output_data)\n+{\n+  unsigned int align = DECL_ALIGN (decl);\n+\n+  /* In the case for initialing an array whose length isn't specified,\n+     where we have not yet been able to do the layout,\n+     figure out the proper alignment now.  */\n+  if (dont_output_data && DECL_SIZE (decl) == 0\n+      && TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE)\n+    align = MAX (align, TYPE_ALIGN (TREE_TYPE (TREE_TYPE (decl))));\n+\n+  /* Some object file formats have a maximum alignment which they support.\n+     In particular, a.out format supports a maximum alignment of 4.  */\n+  if (align > MAX_OFILE_ALIGNMENT)\n+    {\n+      warning (0, \"alignment of %q+D is greater than maximum object \"\n+               \"file alignment.  Using %d\", decl,\n+\t       MAX_OFILE_ALIGNMENT/BITS_PER_UNIT);\n+      align = MAX_OFILE_ALIGNMENT;\n+    }\n+\n+  /* On some machines, it is good to increase alignment sometimes.  */\n+  if (! DECL_USER_ALIGN (decl))\n+    {\n+#ifdef DATA_ALIGNMENT\n+      align = DATA_ALIGNMENT (TREE_TYPE (decl), align);\n+#endif\n+#ifdef CONSTANT_ALIGNMENT\n+      if (DECL_INITIAL (decl) != 0 && DECL_INITIAL (decl) != error_mark_node)\n+\talign = CONSTANT_ALIGNMENT (DECL_INITIAL (decl), align);\n+#endif\n+    }\n+\n+  /* Reset the alignment in case we have made it tighter, so we can benefit\n+     from it in get_pointer_alignment.  */\n+  DECL_ALIGN (decl) = align;\n+}\n+\n /* Return the section into which the given VAR_DECL or CONST_DECL\n    should be placed.  PREFER_NOSWITCH_P is true if a noswitch\n    section should be used wherever possible.  */\n@@ -899,6 +941,8 @@ get_block_for_decl (tree decl)\n \n   /* Find out which section should contain DECL.  We cannot put it into\n      an object block if it requires a standalone definition.  */\n+  if (TREE_CODE (decl) == VAR_DECL)\n+      align_variable (decl, 0);\n   sect = get_variable_section (decl, true);\n   if (SECTION_STYLE (sect) == SECTION_NOSWITCH)\n     return NULL;\n@@ -1683,7 +1727,6 @@ assemble_variable (tree decl, int top_level ATTRIBUTE_UNUSED,\n \t\t   int at_end ATTRIBUTE_UNUSED, int dont_output_data)\n {\n   const char *name;\n-  unsigned int align;\n   rtx decl_rtl, symbol;\n   section *sect;\n \n@@ -1764,41 +1807,8 @@ assemble_variable (tree decl, int top_level ATTRIBUTE_UNUSED,\n \n   /* Compute the alignment of this data.  */\n \n-  align = DECL_ALIGN (decl);\n-\n-  /* In the case for initialing an array whose length isn't specified,\n-     where we have not yet been able to do the layout,\n-     figure out the proper alignment now.  */\n-  if (dont_output_data && DECL_SIZE (decl) == 0\n-      && TREE_CODE (TREE_TYPE (decl)) == ARRAY_TYPE)\n-    align = MAX (align, TYPE_ALIGN (TREE_TYPE (TREE_TYPE (decl))));\n-\n-  /* Some object file formats have a maximum alignment which they support.\n-     In particular, a.out format supports a maximum alignment of 4.  */\n-  if (align > MAX_OFILE_ALIGNMENT)\n-    {\n-      warning (0, \"alignment of %q+D is greater than maximum object \"\n-               \"file alignment.  Using %d\", decl,\n-\t       MAX_OFILE_ALIGNMENT/BITS_PER_UNIT);\n-      align = MAX_OFILE_ALIGNMENT;\n-    }\n-\n-  /* On some machines, it is good to increase alignment sometimes.  */\n-  if (! DECL_USER_ALIGN (decl))\n-    {\n-#ifdef DATA_ALIGNMENT\n-      align = DATA_ALIGNMENT (TREE_TYPE (decl), align);\n-#endif\n-#ifdef CONSTANT_ALIGNMENT\n-      if (DECL_INITIAL (decl) != 0 && DECL_INITIAL (decl) != error_mark_node)\n-\talign = CONSTANT_ALIGNMENT (DECL_INITIAL (decl), align);\n-#endif\n-    }\n-\n-  /* Reset the alignment in case we have made it tighter, so we can benefit\n-     from it in get_pointer_alignment.  */\n-  DECL_ALIGN (decl) = align;\n-  set_mem_align (decl_rtl, align);\n+  align_variable (decl, dont_output_data);\n+  set_mem_align (decl_rtl, DECL_ALIGN (decl));\n \n   if (TREE_PUBLIC (decl))\n     maybe_assemble_visibility (decl);\n@@ -1834,7 +1844,7 @@ assemble_variable (tree decl, int top_level ATTRIBUTE_UNUSED,\n   else\n     {\n       switch_to_section (sect);\n-      if (align > BITS_PER_UNIT)\n+      if (DECL_ALIGN (decl) > BITS_PER_UNIT)\n \tASM_OUTPUT_ALIGN (asm_out_file, floor_log2 (DECL_ALIGN_UNIT (decl)));\n       assemble_variable_contents (decl, name, dont_output_data);\n     }"}]}