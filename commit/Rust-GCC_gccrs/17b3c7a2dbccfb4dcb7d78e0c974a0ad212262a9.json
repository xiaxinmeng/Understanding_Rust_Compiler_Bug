{"sha": "17b3c7a2dbccfb4dcb7d78e0c974a0ad212262a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdiM2M3YTJkYmNjZmI0ZGNiN2Q3OGUwYzk3NGEwYWQyMTIyNjJhOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-07-29T07:10:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-07-29T07:10:21Z"}, "message": "re PR c++/49808 (GCC adds an address-of somewhere!)\n\n\tPR c++/49808\n\t* pt.c (tsubst) [TEMPLATE_PARM_INDEX]: Call convert_from_reference.\n\t(convert_nontype_argument, tsubst_template_arg): Handle its output.\n\nFrom-SVN: r176916", "tree": {"sha": "0c7f40afebdcb16dd3bc1da94958d723f3244a58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c7f40afebdcb16dd3bc1da94958d723f3244a58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17b3c7a2dbccfb4dcb7d78e0c974a0ad212262a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17b3c7a2dbccfb4dcb7d78e0c974a0ad212262a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17b3c7a2dbccfb4dcb7d78e0c974a0ad212262a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17b3c7a2dbccfb4dcb7d78e0c974a0ad212262a9/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d7d50baf7dbd0d5cb6c16951007726b8cc7f66d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7d50baf7dbd0d5cb6c16951007726b8cc7f66d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d7d50baf7dbd0d5cb6c16951007726b8cc7f66d"}], "stats": {"total": 77, "additions": 56, "deletions": 21}, "files": [{"sha": "d6330bb5a6146454264f99e09479fd84f51c4b88", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b3c7a2dbccfb4dcb7d78e0c974a0ad212262a9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b3c7a2dbccfb4dcb7d78e0c974a0ad212262a9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=17b3c7a2dbccfb4dcb7d78e0c974a0ad212262a9", "patch": "@@ -1,3 +1,9 @@\n+2011-07-28  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49808\n+\t* pt.c (tsubst) [TEMPLATE_PARM_INDEX]: Call convert_from_reference.\n+\t(convert_nontype_argument, tsubst_template_arg): Handle its output.\n+\n 2011-07-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/49813"}, {"sha": "a3cd9568d23a3e59ca058e4a6af41bca56f60c95", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b3c7a2dbccfb4dcb7d78e0c974a0ad212262a9/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b3c7a2dbccfb4dcb7d78e0c974a0ad212262a9/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=17b3c7a2dbccfb4dcb7d78e0c974a0ad212262a9", "patch": "@@ -5556,41 +5556,45 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n      function). We just strip everything and get to the arg.\n      See g++.old-deja/g++.oliva/template4.C and g++.dg/template/nontype9.C\n      for examples.  */\n-  if (TREE_CODE (expr) == NOP_EXPR)\n+  if (TYPE_REF_OBJ_P (type) || TYPE_REFFN_P (type))\n     {\n-      if (TYPE_REF_OBJ_P (type) || TYPE_REFFN_P (type))\n+      tree probe_type, probe = expr;\n+      if (REFERENCE_REF_P (probe))\n+\tprobe = TREE_OPERAND (probe, 0);\n+      probe_type = TREE_TYPE (probe);\n+      if (TREE_CODE (probe) == NOP_EXPR)\n \t{\n \t  /* ??? Maybe we could use convert_from_reference here, but we\n \t     would need to relax its constraints because the NOP_EXPR\n \t     could actually change the type to something more cv-qualified,\n \t     and this is not folded by convert_from_reference.  */\n-\t  tree addr = TREE_OPERAND (expr, 0);\n-\t  gcc_assert (TREE_CODE (expr_type) == REFERENCE_TYPE);\n+\t  tree addr = TREE_OPERAND (probe, 0);\n+\t  gcc_assert (TREE_CODE (probe_type) == REFERENCE_TYPE);\n \t  gcc_assert (TREE_CODE (addr) == ADDR_EXPR);\n \t  gcc_assert (TREE_CODE (TREE_TYPE (addr)) == POINTER_TYPE);\n \t  gcc_assert (same_type_ignoring_top_level_qualifiers_p\n-\t\t      (TREE_TYPE (expr_type),\n+\t\t      (TREE_TYPE (probe_type),\n \t\t       TREE_TYPE (TREE_TYPE (addr))));\n \n \t  expr = TREE_OPERAND (addr, 0);\n \t  expr_type = TREE_TYPE (expr);\n \t}\n+    }\n \n-      /* We could also generate a NOP_EXPR(ADDR_EXPR()) when the\n-\t parameter is a pointer to object, through decay and\n-\t qualification conversion. Let's strip everything.  */\n-      else if (TYPE_PTROBV_P (type))\n-\t{\n-\t  STRIP_NOPS (expr);\n-\t  gcc_assert (TREE_CODE (expr) == ADDR_EXPR);\n-\t  gcc_assert (TREE_CODE (TREE_TYPE (expr)) == POINTER_TYPE);\n-\t  /* Skip the ADDR_EXPR only if it is part of the decay for\n-\t     an array. Otherwise, it is part of the original argument\n-\t     in the source code.  */\n-\t  if (TREE_CODE (TREE_TYPE (TREE_OPERAND (expr, 0))) == ARRAY_TYPE)\n-\t    expr = TREE_OPERAND (expr, 0);\n-\t  expr_type = TREE_TYPE (expr);\n-\t}\n+  /* We could also generate a NOP_EXPR(ADDR_EXPR()) when the\n+     parameter is a pointer to object, through decay and\n+     qualification conversion. Let's strip everything.  */\n+  else if (TREE_CODE (expr) == NOP_EXPR && TYPE_PTROBV_P (type))\n+    {\n+      STRIP_NOPS (expr);\n+      gcc_assert (TREE_CODE (expr) == ADDR_EXPR);\n+      gcc_assert (TREE_CODE (TREE_TYPE (expr)) == POINTER_TYPE);\n+      /* Skip the ADDR_EXPR only if it is part of the decay for\n+\t an array. Otherwise, it is part of the original argument\n+\t in the source code.  */\n+      if (TREE_CODE (TREE_TYPE (TREE_OPERAND (expr, 0))) == ARRAY_TYPE)\n+\texpr = TREE_OPERAND (expr, 0);\n+      expr_type = TREE_TYPE (expr);\n     }\n \n   /* [temp.arg.nontype]/5, bullet 1\n@@ -8941,6 +8945,10 @@ tsubst_template_arg (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t       /*integral_constant_expression_p=*/true);\n       if (!(complain & tf_warning))\n \t--c_inhibit_evaluation_warnings;\n+      /* Preserve the raw-reference nature of T.  */\n+      if (TREE_TYPE (t) && TREE_CODE (TREE_TYPE (t)) == REFERENCE_TYPE\n+\t  && REFERENCE_REF_P (r))\n+\tr = TREE_OPERAND (r, 0);\n     }\n   return r;\n }\n@@ -10981,7 +10989,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t      }\n \t    else\n \t      /* TEMPLATE_TEMPLATE_PARM or TEMPLATE_PARM_INDEX.  */\n-\t      return unshare_expr (arg);\n+\t      return convert_from_reference (unshare_expr (arg));\n \t  }\n \n \tif (level == 1)"}, {"sha": "c825d3bade048fc6dd99e17d5820069b9218945f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b3c7a2dbccfb4dcb7d78e0c974a0ad212262a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b3c7a2dbccfb4dcb7d78e0c974a0ad212262a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17b3c7a2dbccfb4dcb7d78e0c974a0ad212262a9", "patch": "@@ -1,3 +1,8 @@\n+2011-07-28  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49808\n+\t* g++.dg/template/nontype24.C: New.\n+\n 2011-07-28  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR rtl-optimization/47958"}, {"sha": "57fbe430e1c9c165b62b0117d7d2b44c5eb2d7d1", "filename": "gcc/testsuite/g++.dg/template/nontype24.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17b3c7a2dbccfb4dcb7d78e0c974a0ad212262a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17b3c7a2dbccfb4dcb7d78e0c974a0ad212262a9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype24.C?ref=17b3c7a2dbccfb4dcb7d78e0c974a0ad212262a9", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/49808\n+\n+template <class X, X g>\n+struct A\n+{\n+  A() { float r = g(0); }\n+};\n+\n+struct f_t\n+{\n+  float operator() (float) const { return 1; }\n+};\n+\n+f_t f;\n+\n+A<f_t&, f> x;"}]}