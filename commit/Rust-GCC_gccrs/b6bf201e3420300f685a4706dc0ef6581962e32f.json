{"sha": "b6bf201e3420300f685a4706dc0ef6581962e32f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZiZjIwMWUzNDIwMzAwZjY4NWE0NzA2ZGMwZWY2NTgxOTYyZTMyZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-02-09T13:18:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-02-09T13:18:15Z"}, "message": "tree-streamer.h (streamer_pack_tree_bitfields): Remove.\n\n2015-02-09  Richard Biener  <rguenther@suse.de>\n\n\t* tree-streamer.h (streamer_pack_tree_bitfields): Remove.\n\t(streamer_write_tree_bitfields): Declare.\n\t* tree-streamer-in.c (unpack_ts_base_value_fields): Inline,\n\tproperly unpack padding.\n\t(unpack_value_fields): Inline ...\n\t(streamer_read_tree_bitfields): ... here.\n\t* tree-streamer-out.c (pack_ts_base_value_fields): Inline\n\tand properly add padding bits.\n\t(streamer_pack_tree_bitfields): Fold into ...\n\t(streamer_write_tree_bitfields): ... this new function,\n\texposing the bitpack object.\n\t* lto-streamer-out.c (lto_write_tree_1): Call\n\tstreamer_write_tree_bitfields.\n\nFrom-SVN: r220540", "tree": {"sha": "2de8a54c507a8559e8a96f20f92c86c2abcff2ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2de8a54c507a8559e8a96f20f92c86c2abcff2ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6bf201e3420300f685a4706dc0ef6581962e32f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6bf201e3420300f685a4706dc0ef6581962e32f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6bf201e3420300f685a4706dc0ef6581962e32f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6bf201e3420300f685a4706dc0ef6581962e32f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ddc5ffe9c2061ff5dba6545de658e6541269fdab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc5ffe9c2061ff5dba6545de658e6541269fdab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddc5ffe9c2061ff5dba6545de658e6541269fdab"}], "stats": {"total": 176, "additions": 94, "deletions": 82}, "files": [{"sha": "2b548126b1e468ad61d9dc7e2515a239d1374c96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bf201e3420300f685a4706dc0ef6581962e32f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bf201e3420300f685a4706dc0ef6581962e32f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6bf201e3420300f685a4706dc0ef6581962e32f", "patch": "@@ -1,3 +1,19 @@\n+2015-02-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-streamer.h (streamer_pack_tree_bitfields): Remove.\n+\t(streamer_write_tree_bitfields): Declare.\n+\t* tree-streamer-in.c (unpack_ts_base_value_fields): Inline,\n+\tproperly unpack padding.\n+\t(unpack_value_fields): Inline ...\n+\t(streamer_read_tree_bitfields): ... here.\n+\t* tree-streamer-out.c (pack_ts_base_value_fields): Inline\n+\tand properly add padding bits.\n+\t(streamer_pack_tree_bitfields): Fold into ...\n+\t(streamer_write_tree_bitfields): ... this new function,\n+\texposing the bitpack object.\n+\t* lto-streamer-out.c (lto_write_tree_1): Call\n+\tstreamer_write_tree_bitfields.\n+\n 2015-02-09  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/54000"}, {"sha": "0c27c9d73d87983e22879075c1f6e94da966d5f4", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bf201e3420300f685a4706dc0ef6581962e32f/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bf201e3420300f685a4706dc0ef6581962e32f/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=b6bf201e3420300f685a4706dc0ef6581962e32f", "patch": "@@ -385,9 +385,7 @@ lto_write_tree_1 (struct output_block *ob, tree expr, bool ref_p)\n {\n   /* Pack all the non-pointer fields in EXPR into a bitpack and write\n      the resulting bitpack.  */\n-  bitpack_d bp = bitpack_create (ob->main_stream);\n-  streamer_pack_tree_bitfields (ob, &bp, expr);\n-  streamer_write_bitpack (&bp);\n+  streamer_write_tree_bitfields (ob, expr);\n \n   /* Write all the pointer fields in EXPR.  */\n   streamer_write_tree_body (ob, expr, ref_p);"}, {"sha": "9b7dd91cb06f2b9d0c362f9a42379f7d5d178792", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 44, "deletions": 52, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bf201e3420300f685a4706dc0ef6581962e32f/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bf201e3420300f685a4706dc0ef6581962e32f/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=b6bf201e3420300f685a4706dc0ef6581962e32f", "patch": "@@ -123,7 +123,7 @@ streamer_read_chain (struct lto_input_block *ib, struct data_in *data_in)\n /* Unpack all the non-pointer fields of the TS_BASE structure of\n    expression EXPR from bitpack BP.  */\n \n-static void\n+static inline void\n unpack_ts_base_value_fields (struct bitpack_d *bp, tree expr)\n {\n   /* Note that the code for EXPR has already been unpacked to create EXPR in\n@@ -158,6 +158,8 @@ unpack_ts_base_value_fields (struct bitpack_d *bp, tree expr)\n   TREE_STATIC (expr) = (unsigned) bp_unpack_value (bp, 1);\n   if (TREE_CODE (expr) != TREE_BINFO)\n     TREE_PRIVATE (expr) = (unsigned) bp_unpack_value (bp, 1);\n+  else\n+    bp_unpack_value (bp, 1);\n   TREE_PROTECTED (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TREE_DEPRECATED (expr) = (unsigned) bp_unpack_value (bp, 1);\n   if (TYPE_P (expr))\n@@ -166,9 +168,12 @@ unpack_ts_base_value_fields (struct bitpack_d *bp, tree expr)\n       TYPE_ADDR_SPACE (expr) = (unsigned) bp_unpack_value (bp, 8);\n     }\n   else if (TREE_CODE (expr) == SSA_NAME)\n-    SSA_NAME_IS_DEFAULT_DEF (expr) = (unsigned) bp_unpack_value (bp, 1);\n+    {\n+      SSA_NAME_IS_DEFAULT_DEF (expr) = (unsigned) bp_unpack_value (bp, 1);\n+      bp_unpack_value (bp, 8);\n+    }\n   else\n-    bp_unpack_value (bp, 1);\n+    bp_unpack_value (bp, 9);\n }\n \n \n@@ -456,115 +461,102 @@ unpack_ts_omp_clause_value_fields (struct data_in *data_in,\n     }\n }\n \n-/* Unpack all the non-pointer fields in EXPR into a bit pack.  */\n \n-static void\n-unpack_value_fields (struct data_in *data_in, struct bitpack_d *bp, tree expr)\n+/* Read all the language-independent bitfield values for EXPR from IB.\n+   Return the partially unpacked bitpack so the caller can unpack any other\n+   bitfield values that the writer may have written.  */\n+\n+struct bitpack_d\n+streamer_read_tree_bitfields (struct lto_input_block *ib,\n+\t\t\t      struct data_in *data_in, tree expr)\n {\n   enum tree_code code;\n+  struct bitpack_d bp;\n \n-  code = TREE_CODE (expr);\n+  /* Read the bitpack of non-pointer values from IB.  */\n+  bp = streamer_read_bitpack (ib);\n+\n+  /* The first word in BP contains the code of the tree that we\n+     are about to read.  */\n+  code = (enum tree_code) bp_unpack_value (&bp, 16);\n+  lto_tag_check (lto_tree_code_to_tag (code),\n+\t\t lto_tree_code_to_tag (TREE_CODE (expr)));\n \n   /* Note that all these functions are highly sensitive to changes in\n      the types and sizes of each of the fields being packed.  */\n-  unpack_ts_base_value_fields (bp, expr);\n+  unpack_ts_base_value_fields (&bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_INT_CST))\n-    unpack_ts_int_cst_value_fields (bp, expr);\n+    unpack_ts_int_cst_value_fields (&bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_REAL_CST))\n-    unpack_ts_real_cst_value_fields (bp, expr);\n+    unpack_ts_real_cst_value_fields (&bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_FIXED_CST))\n-    unpack_ts_fixed_cst_value_fields (bp, expr);\n+    unpack_ts_fixed_cst_value_fields (&bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_MINIMAL))\n-    DECL_SOURCE_LOCATION (expr) = stream_input_location (bp, data_in);\n+    DECL_SOURCE_LOCATION (expr) = stream_input_location (&bp, data_in);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_COMMON))\n-    unpack_ts_decl_common_value_fields (bp, expr);\n+    unpack_ts_decl_common_value_fields (&bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_WRTL))\n-    unpack_ts_decl_wrtl_value_fields (bp, expr);\n+    unpack_ts_decl_wrtl_value_fields (&bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_WITH_VIS))\n-    unpack_ts_decl_with_vis_value_fields (bp, expr);\n+    unpack_ts_decl_with_vis_value_fields (&bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_FUNCTION_DECL))\n-    unpack_ts_function_decl_value_fields (bp, expr);\n+    unpack_ts_function_decl_value_fields (&bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TYPE_COMMON))\n-    unpack_ts_type_common_value_fields (bp, expr);\n+    unpack_ts_type_common_value_fields (&bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_EXP))\n     {\n-      SET_EXPR_LOCATION (expr, stream_input_location (bp, data_in));\n+      SET_EXPR_LOCATION (expr, stream_input_location (&bp, data_in));\n       if (code == MEM_REF\n \t  || code == TARGET_MEM_REF)\n \t{\n \t  MR_DEPENDENCE_CLIQUE (expr)\n-\t    = (unsigned)bp_unpack_value (bp, sizeof (short) * 8);\n+\t    = (unsigned)bp_unpack_value (&bp, sizeof (short) * 8);\n \t  if (MR_DEPENDENCE_CLIQUE (expr) != 0)\n \t    MR_DEPENDENCE_BASE (expr)\n-\t      = (unsigned)bp_unpack_value (bp, sizeof (short) * 8);\n+\t      = (unsigned)bp_unpack_value (&bp, sizeof (short) * 8);\n \t}\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_BLOCK))\n-    unpack_ts_block_value_fields (data_in, bp, expr);\n+    unpack_ts_block_value_fields (data_in, &bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TRANSLATION_UNIT_DECL))\n-    unpack_ts_translation_unit_decl_value_fields (data_in, bp, expr);\n+    unpack_ts_translation_unit_decl_value_fields (data_in, &bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n-    cl_optimization_stream_in (bp, TREE_OPTIMIZATION (expr));\n+    cl_optimization_stream_in (&bp, TREE_OPTIMIZATION (expr));\n \n   if (CODE_CONTAINS_STRUCT (code, TS_BINFO))\n     {\n-      unsigned HOST_WIDE_INT length = bp_unpack_var_len_unsigned (bp);\n+      unsigned HOST_WIDE_INT length = bp_unpack_var_len_unsigned (&bp);\n       if (length > 0)\n \tvec_safe_grow (BINFO_BASE_ACCESSES (expr), length);\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n     {\n-      unsigned HOST_WIDE_INT length = bp_unpack_var_len_unsigned (bp);\n+      unsigned HOST_WIDE_INT length = bp_unpack_var_len_unsigned (&bp);\n       if (length > 0)\n \tvec_safe_grow (CONSTRUCTOR_ELTS (expr), length);\n     }\n \n #ifndef ACCEL_COMPILER\n   if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION))\n-    cl_target_option_stream_in (data_in, bp, TREE_TARGET_OPTION (expr));\n+    cl_target_option_stream_in (data_in, &bp, TREE_TARGET_OPTION (expr));\n #endif\n \n   if (code == OMP_CLAUSE)\n-    unpack_ts_omp_clause_value_fields (data_in, bp, expr);\n-}\n-\n-\n-/* Read all the language-independent bitfield values for EXPR from IB.\n-   Return the partially unpacked bitpack so the caller can unpack any other\n-   bitfield values that the writer may have written.  */\n-\n-struct bitpack_d\n-streamer_read_tree_bitfields (struct lto_input_block *ib,\n-\t\t\t      struct data_in *data_in, tree expr)\n-{\n-  enum tree_code code;\n-  struct bitpack_d bp;\n-\n-  /* Read the bitpack of non-pointer values from IB.  */\n-  bp = streamer_read_bitpack (ib);\n-\n-  /* The first word in BP contains the code of the tree that we\n-     are about to read.  */\n-  code = (enum tree_code) bp_unpack_value (&bp, 16);\n-  lto_tag_check (lto_tree_code_to_tag (code),\n-\t\t lto_tree_code_to_tag (TREE_CODE (expr)));\n-\n-  /* Unpack all the value fields from BP.  */\n-  unpack_value_fields (data_in, &bp, expr);\n+    unpack_ts_omp_clause_value_fields (data_in, &bp, expr);\n \n   return bp;\n }"}, {"sha": "36102ed32a73021dabd65781d557b25fab587f09", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bf201e3420300f685a4706dc0ef6581962e32f/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bf201e3420300f685a4706dc0ef6581962e32f/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=b6bf201e3420300f685a4706dc0ef6581962e32f", "patch": "@@ -92,7 +92,7 @@ write_identifier (struct output_block *ob,\n /* Pack all the non-pointer fields of the TS_BASE structure of\n    expression EXPR into bitpack BP.  */\n \n-static void\n+static inline void\n pack_ts_base_value_fields (struct bitpack_d *bp, tree expr)\n {\n   bp_pack_value (bp, TREE_CODE (expr), 16);\n@@ -129,6 +129,8 @@ pack_ts_base_value_fields (struct bitpack_d *bp, tree expr)\n   bp_pack_value (bp, TREE_STATIC (expr), 1);\n   if (TREE_CODE (expr) != TREE_BINFO)\n     bp_pack_value (bp, TREE_PRIVATE (expr), 1);\n+  else\n+    bp_pack_value (bp, 0, 1);\n   bp_pack_value (bp, TREE_PROTECTED (expr), 1);\n   bp_pack_value (bp, TREE_DEPRECATED (expr), 1);\n   if (TYPE_P (expr))\n@@ -137,9 +139,12 @@ pack_ts_base_value_fields (struct bitpack_d *bp, tree expr)\n       bp_pack_value (bp, TYPE_ADDR_SPACE (expr), 8);\n     }\n   else if (TREE_CODE (expr) == SSA_NAME)\n-    bp_pack_value (bp, SSA_NAME_IS_DEFAULT_DEF (expr), 1);\n+    {\n+      bp_pack_value (bp, SSA_NAME_IS_DEFAULT_DEF (expr), 1);\n+      bp_pack_value (bp, 0, 8);\n+    }\n   else\n-    bp_pack_value (bp, 0, 1);\n+    bp_pack_value (bp, 0, 9);\n }\n \n \n@@ -417,78 +422,80 @@ pack_ts_omp_clause_value_fields (struct output_block *ob,\n /* Pack all the bitfields in EXPR into a bit pack.  */\n \n void\n-streamer_pack_tree_bitfields (struct output_block *ob,\n-\t\t\t      struct bitpack_d *bp, tree expr)\n+streamer_write_tree_bitfields (struct output_block *ob, tree expr)\n {\n+  bitpack_d bp = bitpack_create (ob->main_stream);\n   enum tree_code code;\n \n   code = TREE_CODE (expr);\n \n   /* Note that all these functions are highly sensitive to changes in\n      the types and sizes of each of the fields being packed.  */\n-  pack_ts_base_value_fields (bp, expr);\n+  pack_ts_base_value_fields (&bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_INT_CST))\n-    pack_ts_int_cst_value_fields (bp, expr);\n+    pack_ts_int_cst_value_fields (&bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_REAL_CST))\n-    pack_ts_real_cst_value_fields (bp, expr);\n+    pack_ts_real_cst_value_fields (&bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_FIXED_CST))\n-    pack_ts_fixed_cst_value_fields (bp, expr);\n+    pack_ts_fixed_cst_value_fields (&bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_MINIMAL))\n-    stream_output_location (ob, bp, DECL_SOURCE_LOCATION (expr));\n+    stream_output_location (ob, &bp, DECL_SOURCE_LOCATION (expr));\n \n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_COMMON))\n-    pack_ts_decl_common_value_fields (bp, expr);\n+    pack_ts_decl_common_value_fields (&bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_WRTL))\n-    pack_ts_decl_wrtl_value_fields (bp, expr);\n+    pack_ts_decl_wrtl_value_fields (&bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_WITH_VIS))\n-    pack_ts_decl_with_vis_value_fields (bp, expr);\n+    pack_ts_decl_with_vis_value_fields (&bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_FUNCTION_DECL))\n-    pack_ts_function_decl_value_fields (bp, expr);\n+    pack_ts_function_decl_value_fields (&bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TYPE_COMMON))\n-    pack_ts_type_common_value_fields (bp, expr);\n+    pack_ts_type_common_value_fields (&bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_EXP))\n     {\n-      stream_output_location (ob, bp, EXPR_LOCATION (expr));\n+      stream_output_location (ob, &bp, EXPR_LOCATION (expr));\n       if (code == MEM_REF\n \t  || code == TARGET_MEM_REF)\n \t{\n-\t  bp_pack_value (bp, MR_DEPENDENCE_CLIQUE (expr), sizeof (short) * 8);\n+\t  bp_pack_value (&bp, MR_DEPENDENCE_CLIQUE (expr), sizeof (short) * 8);\n \t  if (MR_DEPENDENCE_CLIQUE (expr) != 0)\n-\t    bp_pack_value (bp, MR_DEPENDENCE_BASE (expr), sizeof (short) * 8);\n+\t    bp_pack_value (&bp, MR_DEPENDENCE_BASE (expr), sizeof (short) * 8);\n \t}\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_BLOCK))\n-    pack_ts_block_value_fields (ob, bp, expr);\n+    pack_ts_block_value_fields (ob, &bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TRANSLATION_UNIT_DECL))\n-    pack_ts_translation_unit_decl_value_fields (ob, bp, expr);\n+    pack_ts_translation_unit_decl_value_fields (ob, &bp, expr);\n \n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n-    cl_optimization_stream_out (bp, TREE_OPTIMIZATION (expr));\n+    cl_optimization_stream_out (&bp, TREE_OPTIMIZATION (expr));\n \n   if (CODE_CONTAINS_STRUCT (code, TS_BINFO))\n-    bp_pack_var_len_unsigned (bp, vec_safe_length (BINFO_BASE_ACCESSES (expr)));\n+    bp_pack_var_len_unsigned (&bp, vec_safe_length (BINFO_BASE_ACCESSES (expr)));\n \n   if (CODE_CONTAINS_STRUCT (code, TS_CONSTRUCTOR))\n-    bp_pack_var_len_unsigned (bp, CONSTRUCTOR_NELTS (expr));\n+    bp_pack_var_len_unsigned (&bp, CONSTRUCTOR_NELTS (expr));\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION)\n       /* Don't stream these when passing things to a different target.  */\n       && !lto_stream_offload_p)\n-    cl_target_option_stream_out (ob, bp, TREE_TARGET_OPTION (expr));\n+    cl_target_option_stream_out (ob, &bp, TREE_TARGET_OPTION (expr));\n \n   if (code == OMP_CLAUSE)\n-    pack_ts_omp_clause_value_fields (ob, bp, expr);\n+    pack_ts_omp_clause_value_fields (ob, &bp, expr);\n+\n+  streamer_write_bitpack (&bp);\n }\n \n "}, {"sha": "5c3acb60994bce32238906fffc5309ed5089cadf", "filename": "gcc/tree-streamer.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6bf201e3420300f685a4706dc0ef6581962e32f/gcc%2Ftree-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6bf201e3420300f685a4706dc0ef6581962e32f/gcc%2Ftree-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer.h?ref=b6bf201e3420300f685a4706dc0ef6581962e32f", "patch": "@@ -85,8 +85,7 @@ void streamer_write_string_cst (struct output_block *,\n \t\t\t\tstruct lto_output_stream *, tree);\n void streamer_write_chain (struct output_block *, tree, bool);\n void streamer_write_tree_header (struct output_block *, tree);\n-void streamer_pack_tree_bitfields (struct output_block *, struct bitpack_d *,\n-\t\t\t\t   tree);\n+void streamer_write_tree_bitfields (struct output_block *, tree);\n void streamer_write_tree_body (struct output_block *, tree, bool);\n void streamer_write_integer_cst (struct output_block *, tree, bool);\n void streamer_write_builtin (struct output_block *, tree);"}]}