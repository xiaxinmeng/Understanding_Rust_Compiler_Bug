{"sha": "e99776d82aca5ed5ee7bbe2ad2f5f6191017110b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk5Nzc2ZDgyYWNhNWVkNWVlN2JiZTJhZDJmNWY2MTkxMDE3MTEwYg==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-12-23T19:46:04Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-23T19:46:04Z"}, "message": "In libobjc/: 2010-12-23 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2010-12-23  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* init.c (create_tree_of_subclasses_inherited_from): Updated\n\tDEBUG_PRINTF messages.\n\t(__objc_tree_insert_class): Same.\n\t(__objc_send_load_using_method_list): Same.\n\t(__objc_send_load): Same.\n\t(__objc_exec_class): Same.  In particular, do not print the module\n\tname since it is no longer used.\n\t* sendmsg.c (__objc_send_initialize): Added DEBUG_PRINTFs for\n\ttracking +initialize calls.\n\t(__objc_update_dispatch_table_for_class): Added DEBUG_PRINTFs for\n\ttracking updates of dispatch tables.\n\t(__objc_install_dispatch_table_for_class): Same.\n\nFrom-SVN: r168215", "tree": {"sha": "3aafd904f591d11ee7e3e13ede0d71bc9505612d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3aafd904f591d11ee7e3e13ede0d71bc9505612d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e99776d82aca5ed5ee7bbe2ad2f5f6191017110b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e99776d82aca5ed5ee7bbe2ad2f5f6191017110b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e99776d82aca5ed5ee7bbe2ad2f5f6191017110b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e99776d82aca5ed5ee7bbe2ad2f5f6191017110b/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bd29eba228a2d866aac76c013d0425b28e8f08e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd29eba228a2d866aac76c013d0425b28e8f08e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd29eba228a2d866aac76c013d0425b28e8f08e1"}], "stats": {"total": 87, "additions": 66, "deletions": 21}, "files": [{"sha": "fbeaf3fa57167fb2fa6b4696a5faa59c5a966099", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e99776d82aca5ed5ee7bbe2ad2f5f6191017110b/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e99776d82aca5ed5ee7bbe2ad2f5f6191017110b/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=e99776d82aca5ed5ee7bbe2ad2f5f6191017110b", "patch": "@@ -1,3 +1,18 @@\n+2010-12-23  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* init.c (create_tree_of_subclasses_inherited_from): Updated\n+\tDEBUG_PRINTF messages.\n+\t(__objc_tree_insert_class): Same.\n+\t(__objc_send_load_using_method_list): Same.\n+\t(__objc_send_load): Same.\n+\t(__objc_exec_class): Same.  In particular, do not print the module\n+\tname since it is no longer used.\n+\t* sendmsg.c (__objc_send_initialize): Added DEBUG_PRINTFs for\n+\ttracking +initialize calls.\n+\t(__objc_update_dispatch_table_for_class): Added DEBUG_PRINTFs for\n+\ttracking updates of dispatch tables.\n+\t(__objc_install_dispatch_table_for_class): Same.\n+\t\n 2010-12-23  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* Makefile.in (libobjc$(libsuffix).la): Link with -Wc,-shared-libgcc."}, {"sha": "c94d9c843e150e58a56a8c662631be79a6bb0174", "filename": "libobjc/init.c", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e99776d82aca5ed5ee7bbe2ad2f5f6191017110b/libobjc%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e99776d82aca5ed5ee7bbe2ad2f5f6191017110b/libobjc%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Finit.c?ref=e99776d82aca5ed5ee7bbe2ad2f5f6191017110b", "patch": "@@ -24,6 +24,10 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n+/* Uncommented the following line to enable debug logging.  Use this\n+   only while debugging the runtime.  */\n+/* #define DEBUG 1 */\n+\n #include \"objc-private/common.h\"\n #include \"objc-private/error.h\"\n #include \"objc/runtime.h\"\n@@ -196,7 +200,7 @@ create_tree_of_subclasses_inherited_from (Class bottom_class, Class upper)\n     superclass = Nil;\n \n   DEBUG_PRINTF (\"create_tree_of_subclasses_inherited_from:\");\n-  DEBUG_PRINTF (\"bottom_class = %s, upper = %s\\n\",\n+  DEBUG_PRINTF (\" bottom_class = %s, upper = %s\\n\",\n \t\t(bottom_class ? bottom_class->name : NULL),\n \t\t(upper ? upper->name : NULL));\n \n@@ -232,7 +236,7 @@ __objc_tree_insert_class (objc_class_tree *tree, Class class)\n   else if (class == tree->class)\n     {\n       /* `class' has been already inserted.  */\n-      DEBUG_PRINTF (\"1. class %s was previously inserted\\n\", class->name);\n+      DEBUG_PRINTF (\" 1. class %s was previously inserted\\n\", class->name);\n       return tree;\n     }\n   else if (class_superclass_of_class (class) == tree->class)\n@@ -249,7 +253,7 @@ __objc_tree_insert_class (objc_class_tree *tree, Class class)\n \t     the tree.  */\n \t  if (((objc_class_tree *) list->head)->class == class)\n \t    {\n-\t      DEBUG_PRINTF (\"2. class %s was previously inserted\\n\",\n+\t      DEBUG_PRINTF (\" 2. class %s was previously inserted\\n\",\n \t\t\t    class->name);\n \t      return tree;\n \t    }\n@@ -261,7 +265,7 @@ __objc_tree_insert_class (objc_class_tree *tree, Class class)\n       node = objc_calloc (1, sizeof (objc_class_tree));\n       node->class = class;\n       tree->subclasses = list_cons (node, tree->subclasses);\n-      DEBUG_PRINTF (\"3. class %s inserted\\n\", class->name);\n+      DEBUG_PRINTF (\" 3. class %s inserted\\n\", class->name);\n       return tree;\n     }\n   else\n@@ -287,7 +291,7 @@ __objc_tree_insert_class (objc_class_tree *tree, Class class)\n \t         since nothing has been changed.  */\n \t      subclasses->head\n \t\t  = __objc_tree_insert_class (subclasses->head, class);\n- \t      DEBUG_PRINTF (\"4. class %s inserted\\n\", class->name);\n+ \t      DEBUG_PRINTF (\" 4. class %s inserted\\n\", class->name);\n \t      return tree;\n \t    }\n \t}\n@@ -299,7 +303,7 @@ __objc_tree_insert_class (objc_class_tree *tree, Class class)\n \tobjc_class_tree *new_tree\n \t  = create_tree_of_subclasses_inherited_from (class, tree->class);\n \ttree->subclasses = list_cons (new_tree, tree->subclasses);\n- \tDEBUG_PRINTF (\"5. class %s inserted\\n\", class->name);\n+ \tDEBUG_PRINTF (\" 5. class %s inserted\\n\", class->name);\n \treturn tree;\n       }\n     }\n@@ -414,10 +418,10 @@ __objc_send_load_using_method_list (struct objc_method_list *method_list, Class\n \t\t\t mth->method_imp,\n \t\t\t mth->method_imp);\n \t  \n-\t  DEBUG_PRINTF (\"sending +load in class: %s\\n\", class->name);\n-\t  \n \t  /* Call +load.  */\n+\t  DEBUG_PRINTF (\" begin of [%s +load]\\n\", class->name);\n \t  (*mth->method_imp) ((id)class, mth->method_name);\n+\t  DEBUG_PRINTF (\" end of [%s +load]\\n\", class->name);\n \n \t  break;\n \t}\n@@ -433,6 +437,7 @@ __objc_send_load (objc_class_tree *tree,\n   Class class = tree->class;\n   struct objc_method_list *method_list = class->class_pointer->methods;\n \n+  DEBUG_PRINTF (\"+load: need to send load to class '%s'\\n\", class->name);\n   __objc_send_load_using_method_list (method_list, class);\n }\n \n@@ -578,7 +583,7 @@ __objc_exec_class (struct objc_module *module)\n \n   int i;\n \n-  DEBUG_PRINTF (\"received module: %s\\n\", module->name);\n+  DEBUG_PRINTF (\"\\n__objc_exec_class (%p) - start processing module...\\n\", module);\n \n   /* Check gcc version.  */\n   init_check_module_version (module);\n@@ -615,11 +620,13 @@ __objc_exec_class (struct objc_module *module)\n \n   /* Replace referenced selectors from names to SELs.  */\n   if (selectors)\n-    __objc_register_selectors_from_module (selectors);\n+    {\n+      DEBUG_PRINTF (\" registering selectors\\n\");\n+      __objc_register_selectors_from_module (selectors);\n+    }\n \n   /* Parse the classes in the load module and gather selector\n      information.  */\n-  DEBUG_PRINTF (\"gathering selectors from module: %s\\n\", module->name);\n   for (i = 0; i < symtab->cls_def_cnt; ++i)\n     {\n       Class class = (Class) symtab->defs[i];\n@@ -628,7 +635,7 @@ __objc_exec_class (struct objc_module *module)\n       /* Make sure we have what we think.  */\n       assert (CLS_ISCLASS (class));\n       assert (CLS_ISMETA (class->class_pointer));\n-      DEBUG_PRINTF (\"phase 1, processing class: %s\\n\", class->name);\n+      DEBUG_PRINTF (\" installing class '%s'\\n\", class->name);\n \n       /* Initialize the subclass list to be NULL.  In some cases it\n \t isn't and this crashes the program.  */\n@@ -653,10 +660,7 @@ __objc_exec_class (struct objc_module *module)\n \t methods.  */\n       if (class)\n \t{\n-\t  DEBUG_PRINTF (\"processing categories from (module,object): %s, %s\\n\",\n-\t\t\tmodule->name,\n-\t\t\tclass->name);\n-\n+\t  DEBUG_PRINTF (\" installing category '%s (%s)'\\n\", category->class_name, category->category_name);\n \t  /* Do instance methods.  */\n \t  if (category->instance_methods)\n \t    class_add_method_list (class, category->instance_methods);\n@@ -678,6 +682,7 @@ __objc_exec_class (struct objc_module *module)\n \t}\n       else\n \t{\n+\t  DEBUG_PRINTF (\" delaying installation of category '%s (%s)'\\n\", category->class_name, category->category_name);\n \t  /* The object to which the category methods belong can't be\n \t     found.  Save the information.  */\n \t  unclaimed_categories = list_cons (category, unclaimed_categories);\n@@ -698,9 +703,7 @@ __objc_exec_class (struct objc_module *module)\n       \n       if (class)\n \t{\n-\t  DEBUG_PRINTF (\"attaching stored categories to object: %s\\n\",\n-\t\t\tclass->name);\n-\t  \n+\t  DEBUG_PRINTF (\" installing (delayed) category '%s (%s)'\\n\", category->class_name, category->category_name);\n \t  list_remove_head (cell);\n \t  \n \t  if (category->instance_methods)\n@@ -740,9 +743,14 @@ __objc_exec_class (struct objc_module *module)\n      \"resolving the class links\" at this point, which will setup all\n      the class/superclass pointers.  */\n   if (!unresolved_classes && objc_getClass (\"Object\"))\n-    __objc_resolve_class_links ();\n+    {\n+      DEBUG_PRINTF (\" resolving class links\\n\");\n+      __objc_resolve_class_links ();\n+    }\n \n   objc_mutex_unlock (__objc_runtime_mutex);\n+\n+  DEBUG_PRINTF (\"__objc_exec_class (%p) - finished processing module...\\n\\n\", module);\n }\n \n /* This function needs to be called with the objc_runtime_mutex\n@@ -865,6 +873,7 @@ __objc_call_load_callback (struct objc_module *module)\n \t  if (!objc_hash_is_key_in_hash (duplicate_classes, class))\n \t    {\n \t      /* Call the _objc_load_callback for this class.  */\n+\t      DEBUG_PRINTF (\" calling the load callback for class '%s'\\n\", class->name);\n \t      _objc_load_callback (class, 0);\n \t    }\n \t}\n@@ -877,6 +886,8 @@ __objc_call_load_callback (struct objc_module *module)\n \t  struct objc_category *category = symtab->defs[i + symtab->cls_def_cnt];\n \t  Class class = objc_getClass (category->class_name);\n \t  \n+\t  DEBUG_PRINTF (\" calling the load callback for category '%s (%s)'\\n\",\n+\t\t\tcategory->class_name, category->category_name);\n \t  _objc_load_callback (class, category);\n \t}\n     }\n@@ -924,6 +935,7 @@ __objc_init_class (Class class)\n     {\n       /* The module contains a duplicate class.  Remember it so that\n \t we will ignore it later.  */\n+      DEBUG_PRINTF (\" duplicate class '%s' - will be ignored\\n\", class->name);\n       objc_hash_add (&duplicate_classes, class, class);\n       return NO;\n     }"}, {"sha": "0cb375db39ba0113a3f8aa48c426a58fb01f6152", "filename": "libobjc/sendmsg.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e99776d82aca5ed5ee7bbe2ad2f5f6191017110b/libobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e99776d82aca5ed5ee7bbe2ad2f5f6191017110b/libobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsendmsg.c?ref=e99776d82aca5ed5ee7bbe2ad2f5f6191017110b", "patch": "@@ -23,6 +23,9 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n+/* Uncommented the following line to enable debug logging.  Use this\n+   only while debugging the runtime.  */\n+/* #define DEBUG 1 */\n \n /* FIXME: This file has no business including tm.h.  */\n /* FIXME: This should be using libffi instead of __builtin_apply\n@@ -543,6 +546,7 @@ __objc_send_initialize (Class class)\n \n   if (! CLS_ISINITIALIZED (class))\n     {\n+      DEBUG_PRINTF (\"+initialize: need to initialize class '%s'\\n\", class->name);\n       CLS_SETINITIALIZED (class);\n       CLS_SETINITIALIZED (class->class_pointer);\n \n@@ -579,7 +583,17 @@ __objc_send_initialize (Class class)\n \t    method_list = method_list->method_next;\n \t  }\n \tif (imp)\n-\t  (*imp) ((id) class, op);\n+\t  {\n+\t    DEBUG_PRINTF (\" begin of [%s +initialize]\\n\", class->name);\n+\t    (*imp) ((id) class, op);\n+\t    DEBUG_PRINTF (\" end of [%s +initialize]\\n\", class->name);\n+\t  }\n+#ifdef DEBUG\n+\telse\n+\t  {\n+\t    DEBUG_PRINTF (\" class '%s' has no +initialize method\\n\", class->name);\t    \n+\t  }\n+#endif\n       }\n     }\n }\n@@ -621,6 +635,8 @@ __objc_install_dispatch_table_for_class (Class class)\n      re-compute all class links.  */\n   if (! CLS_ISRESOLV (class))\n     __objc_resolve_class_links ();\n+\n+  DEBUG_PRINTF (\"__objc_install_dispatch_table_for_class (%s)\\n\", class->name);\n   \n   super = class->super_class;\n \n@@ -650,6 +666,8 @@ __objc_update_dispatch_table_for_class (Class class)\n   if (class->dtable == __objc_uninstalled_dtable) \n     return;\n \n+  DEBUG_PRINTF (\" _objc_update_dispatch_table_for_class (%s)\\n\", class->name);\n+\n   objc_mutex_lock (__objc_runtime_mutex);\n \n   arr = class->dtable;"}]}