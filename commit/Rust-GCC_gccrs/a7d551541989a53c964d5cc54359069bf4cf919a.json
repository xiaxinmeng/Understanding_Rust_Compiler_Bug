{"sha": "a7d551541989a53c964d5cc54359069bf4cf919a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdkNTUxNTQxOTg5YTUzYzk2NGQ1Y2M1NDM1OTA2OWJmNGNmOTE5YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-03-31T06:32:46Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-03-31T06:32:46Z"}, "message": "re PR middle-end/80163 (ICE on hopefully valid code)\n\n\tPR middle-end/80163\n\t* varasm.c (initializer_constant_valid_p_1): Disallow sign-extending\n\tconversions to integer types wider than word and pointer.\n\n\t* gcc.dg/pr80163.c: New test.\n\nFrom-SVN: r246607", "tree": {"sha": "fea535e8d66f9e488a837e68fe8734100a548f95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fea535e8d66f9e488a837e68fe8734100a548f95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7d551541989a53c964d5cc54359069bf4cf919a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d551541989a53c964d5cc54359069bf4cf919a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7d551541989a53c964d5cc54359069bf4cf919a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d551541989a53c964d5cc54359069bf4cf919a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "005f12bf67e60ada0757470be80fe69799a83ebc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/005f12bf67e60ada0757470be80fe69799a83ebc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/005f12bf67e60ada0757470be80fe69799a83ebc"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "65aaca777060a3712576615b8b2182a21c3f0b5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d551541989a53c964d5cc54359069bf4cf919a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d551541989a53c964d5cc54359069bf4cf919a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7d551541989a53c964d5cc54359069bf4cf919a", "patch": "@@ -1,5 +1,9 @@\n 2017-03-31  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/80163\n+\t* varasm.c (initializer_constant_valid_p_1): Disallow sign-extending\n+\tconversions to integer types wider than word and pointer.\n+\n \tPR debug/80025\n \t* cselib.h (rtx_equal_for_cselib_1): Add depth argument.\n \t(rtx_equal_for_cselib_p): Pass 0 to it."}, {"sha": "af79d42596fca23a80fd22972febfb0ac89b4a45", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d551541989a53c964d5cc54359069bf4cf919a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d551541989a53c964d5cc54359069bf4cf919a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a7d551541989a53c964d5cc54359069bf4cf919a", "patch": "@@ -1,5 +1,8 @@\n 2017-03-31  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/80163\n+\t* gcc.dg/pr80163.c: New test.\n+\n \tPR debug/80025\n \t* gcc.dg/torture/pr80025.c: New test.\n "}, {"sha": "37a7abd1181d888fc9329e23858b2e487e99b1af", "filename": "gcc/testsuite/gcc.dg/pr80163.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d551541989a53c964d5cc54359069bf4cf919a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80163.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d551541989a53c964d5cc54359069bf4cf919a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80163.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr80163.c?ref=a7d551541989a53c964d5cc54359069bf4cf919a", "patch": "@@ -0,0 +1,22 @@\n+/* PR middle-end/80163 */\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O0\" } */\n+\n+void bar (void);\n+\n+__int128_t *\n+foo (void)\n+{\n+a:\n+  bar ();\n+b:;\n+  static __int128_t d = (long) &&a - (long) &&b;\t/* { dg-error \"initializer element is not computable at load time\" } */\n+  return &d;\n+}\n+\n+__int128_t *\n+baz (void)\n+{\n+  static __int128_t d = (long) (3 * 4);\n+  return &d;\n+}"}, {"sha": "05e48a5b894b1e35e8f8a286022798e92894b734", "filename": "gcc/varasm.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d551541989a53c964d5cc54359069bf4cf919a/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d551541989a53c964d5cc54359069bf4cf919a/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=a7d551541989a53c964d5cc54359069bf4cf919a", "patch": "@@ -4472,8 +4472,15 @@ initializer_constant_valid_p_1 (tree value, tree endtype, tree *cache)\n \t  return initializer_constant_valid_p_1 (src, endtype, cache);\n \n \t/* Allow conversions between other integer types only if\n-\t   explicit value.  */\n-\tif (INTEGRAL_TYPE_P (dest_type) && INTEGRAL_TYPE_P (src_type))\n+\t   explicit value.  Don't allow sign-extension to a type larger\n+\t   than word and pointer, there aren't relocations that would\n+\t   allow to sign extend it to a wider type.  */\n+\tif (INTEGRAL_TYPE_P (dest_type)\n+\t    && INTEGRAL_TYPE_P (src_type)\n+\t    && (TYPE_UNSIGNED (src_type)\n+\t\t|| TYPE_PRECISION (dest_type) <= TYPE_PRECISION (src_type)\n+\t\t|| TYPE_PRECISION (dest_type) <= BITS_PER_WORD\n+\t\t|| TYPE_PRECISION (dest_type) <= POINTER_SIZE))\n \t  {\n \t    tree inner = initializer_constant_valid_p_1 (src, endtype, cache);\n \t    if (inner == null_pointer_node)"}]}