{"sha": "7dd4b4a326f53acd8294359ff1cdc3670e475b50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RkNGI0YTMyNmY1M2FjZDgyOTQzNTlmZjFjZGMzNjcwZTQ3NWI1MA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-03-21T10:12:20Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-03-21T10:12:20Z"}, "message": "i386.md (pushqi1): New.\n\n\t* i386.md (pushqi1): New.\n\t* i386-protos.h (x86_64_general_operand, x86_64_szext_general_operand,\n\tx86_64_nonmemory_operand, x86_64_szext_nonmemory_operand,\n\tx86_64_immediate_operand, x86_64_immediate_operand,\n\tx86_64_zext_immediate_operand): Declare.\n\t* i386.c (x86_64_general_operand, x86_64_szext_general_operand,\n\tx86_64_nonmemory_operand, x86_64_szext_nonmemory_operand,\n\tx86_64_immediate_operand, x86_64_immediate_operand,\n\tx86_64_zext_immediate_operand): define.\n\t* i386.h (PREDICATE_CODES): Add new predicates.\n\nFrom-SVN: r40689", "tree": {"sha": "ea93eadbb253ba5d921196ca5225cea7579c090c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea93eadbb253ba5d921196ca5225cea7579c090c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7dd4b4a326f53acd8294359ff1cdc3670e475b50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dd4b4a326f53acd8294359ff1cdc3670e475b50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dd4b4a326f53acd8294359ff1cdc3670e475b50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dd4b4a326f53acd8294359ff1cdc3670e475b50/comments", "author": null, "committer": null, "parents": [{"sha": "49073def1b0e35e3ae7551553f50da9ac7e54d29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49073def1b0e35e3ae7551553f50da9ac7e54d29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49073def1b0e35e3ae7551553f50da9ac7e54d29"}], "stats": {"total": 144, "additions": 143, "deletions": 1}, "files": [{"sha": "90ab3876c3808bd6dafbd072ef9d440ae4aa8560", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd4b4a326f53acd8294359ff1cdc3670e475b50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd4b4a326f53acd8294359ff1cdc3670e475b50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7dd4b4a326f53acd8294359ff1cdc3670e475b50", "patch": "@@ -1,4 +1,17 @@\n-Wed Mar 21 10:25:13 CET 2001  Jan Hubicka  <jh@use.cz>\n+Wed Mar 21 10:53:57 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.md (pushqi1): New.\n+\t* i386-protos.h (x86_64_general_operand, x86_64_szext_general_operand,\n+\tx86_64_nonmemory_operand, x86_64_szext_nonmemory_operand,\n+\tx86_64_immediate_operand, x86_64_immediate_operand,\n+\tx86_64_zext_immediate_operand): Declare.\n+\t* i386.c (x86_64_general_operand, x86_64_szext_general_operand,\n+\tx86_64_nonmemory_operand, x86_64_szext_nonmemory_operand,\n+\tx86_64_immediate_operand, x86_64_immediate_operand,\n+\tx86_64_zext_immediate_operand): define.\n+\t* i386.h (PREDICATE_CODES): Add new predicates.\n+\n+Wed Mar 21 10:25:13 CET 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.md (pophi1, popqi1, pushqi1): Remove.\n "}, {"sha": "aaa239491a31dc1ba3f45ba357d6ebf36a1426a9", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd4b4a326f53acd8294359ff1cdc3670e475b50/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd4b4a326f53acd8294359ff1cdc3670e475b50/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=7dd4b4a326f53acd8294359ff1cdc3670e475b50", "patch": "@@ -43,6 +43,12 @@ extern int standard_80387_constant_p PARAMS ((rtx));\n extern int standard_sse_constant_p PARAMS ((rtx));\n extern int symbolic_reference_mentioned_p PARAMS ((rtx));\n \n+extern int x86_64_general_operand PARAMS ((rtx, enum machine_mode));\n+extern int x86_64_szext_general_operand PARAMS ((rtx, enum machine_mode));\n+extern int x86_64_nonmemory_operand PARAMS ((rtx, enum machine_mode));\n+extern int x86_64_szext_nonmemory_operand PARAMS ((rtx, enum machine_mode));\n+extern int x86_64_immediate_operand PARAMS ((rtx, enum machine_mode));\n+extern int x86_64_zext_immediate_operand PARAMS ((rtx, enum machine_mode));\n extern int const_int_1_operand PARAMS ((rtx, enum machine_mode));\n extern int symbolic_operand PARAMS ((rtx, enum machine_mode));\n extern int pic_symbolic_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "91dee40cf96551a53f295fad97fd96f72b367761", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd4b4a326f53acd8294359ff1cdc3670e475b50/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd4b4a326f53acd8294359ff1cdc3670e475b50/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7dd4b4a326f53acd8294359ff1cdc3670e475b50", "patch": "@@ -1127,6 +1127,101 @@ function_arg (cum, mode, type, named)\n }\n \f\n \n+/* Return nonzero if OP is general operand representable on x86_64.  */\n+\n+int\n+x86_64_general_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (!TARGET_64BIT)\n+    return general_operand (op, mode);\n+  if (nonimmediate_operand (op, mode))\n+    return 1;\n+  return x86_64_sign_extended_value (op);\n+}\n+\n+/* Return nonzero if OP is general operand representable on x86_64\n+   as eighter sign extended or zero extended constant.  */\n+\n+int\n+x86_64_szext_general_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (!TARGET_64BIT)\n+    return general_operand (op, mode);\n+  if (nonimmediate_operand (op, mode))\n+    return 1;\n+  return x86_64_sign_extended_value (op) || x86_64_zero_extended_value (op);\n+}\n+\n+/* Return nonzero if OP is nonmemory operand representable on x86_64.  */\n+\n+int\n+x86_64_nonmemory_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (!TARGET_64BIT)\n+    return nonmemory_operand (op, mode);\n+  if (register_operand (op, mode))\n+    return 1;\n+  return x86_64_sign_extended_value (op);\n+}\n+\n+/* Return nonzero if OP is nonmemory operand acceptable by movabs patterns.  */\n+\n+int\n+x86_64_movabs_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (!TARGET_64BIT || !flag_pic)\n+    return nonmemory_operand (op, mode);\n+  if (register_operand (op, mode) || x86_64_sign_extended_value (op))\n+    return 1;\n+  if (CONSTANT_P (op) && !symbolic_reference_mentioned_p (op))\n+    return 1;\n+  return 0;\n+}\n+\n+/* Return nonzero if OP is nonmemory operand representable on x86_64.  */\n+\n+int\n+x86_64_szext_nonmemory_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (!TARGET_64BIT)\n+    return nonmemory_operand (op, mode);\n+  if (register_operand (op, mode))\n+    return 1;\n+  return x86_64_sign_extended_value (op) || x86_64_zero_extended_value (op);\n+}\n+\n+/* Return nonzero if OP is immediate operand representable on x86_64.  */\n+\n+int\n+x86_64_immediate_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  if (!TARGET_64BIT)\n+    return immediate_operand (op, mode);\n+  return x86_64_sign_extended_value (op);\n+}\n+\n+/* Return nonzero if OP is immediate operand representable on x86_64.  */\n+\n+int\n+x86_64_zext_immediate_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  return x86_64_zero_extended_value (op);\n+}\n+\n /* Return nonzero if OP is (const_int 1), else return zero.  */\n \n int"}, {"sha": "697f2213fbe6d059877ea1fe46fb27d0b2c4b6d3", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd4b4a326f53acd8294359ff1cdc3670e475b50/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd4b4a326f53acd8294359ff1cdc3670e475b50/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=7dd4b4a326f53acd8294359ff1cdc3670e475b50", "patch": "@@ -3022,6 +3022,20 @@ do { long l;\t\t\t\t\t\t\\\n /* Define the codes that are matched by predicates in i386.c.  */\n \n #define PREDICATE_CODES\t\t\t\t\t\t\t\\\n+  {\"x86_64_immediate_operand\", {CONST_INT, SUBREG, REG,\t\t\t\\\n+\t\t\t\tSYMBOL_REF, LABEL_REF, CONST}},\t\t\\\n+  {\"x86_64_nonmemory_operand\", {CONST_INT, SUBREG, REG,\t\t\t\\\n+\t\t\t\tSYMBOL_REF, LABEL_REF, CONST}},\t\t\\\n+  {\"x86_64_movabs_operand\", {CONST_INT, SUBREG, REG,\t\t\t\\\n+\t\t\t\tSYMBOL_REF, LABEL_REF, CONST}},\t\t\\\n+  {\"x86_64_szext_nonmemory_operand\", {CONST_INT, SUBREG, REG,\t\t\\\n+\t\t\t\t     SYMBOL_REF, LABEL_REF, CONST}},\t\\\n+  {\"x86_64_general_operand\", {CONST_INT, SUBREG, REG, MEM,\t\t\\\n+\t\t\t      SYMBOL_REF, LABEL_REF, CONST}},\t\t\\\n+  {\"x86_64_szext_general_operand\", {CONST_INT, SUBREG, REG, MEM,\t\\\n+\t\t\t\t   SYMBOL_REF, LABEL_REF, CONST}},\t\\\n+  {\"x86_64_zext_immediate_operand\", {CONST_INT, CONST_DOUBLE, CONST,\t\\\n+\t\t\t\t       SYMBOL_REF, LABEL_REF}},\t\t\\\n   {\"const_int_1_operand\", {CONST_INT}},\t\t\t\t\t\\\n   {\"symbolic_operand\", {SYMBOL_REF, LABEL_REF, CONST}},\t\t\t\\\n   {\"aligned_operand\", {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\t\\"}, {"sha": "77392fe0e1950356630644ec4f1a48e439a37828", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7dd4b4a326f53acd8294359ff1cdc3670e475b50/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7dd4b4a326f53acd8294359ff1cdc3670e475b50/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7dd4b4a326f53acd8294359ff1cdc3670e475b50", "patch": "@@ -1858,6 +1858,20 @@\n   \"\"\n   \"ix86_expand_move (QImode, operands); DONE;\")\n \n+;; emit_push_insn when it calls move_by_pieces requires an insn to\n+;; \"push a byte\".  But actually we use pushw, which has the effect\n+;; of rounding the amount pushed up to a halfword.\n+\n+(define_insn \"*pushqi2\"\n+  [(set (match_operand:QI 0 \"push_operand\" \"=X,X\")\n+\t(match_operand:QI 1 \"nonmemory_no_elim_operand\" \"n,r\"))]\n+  \"!TARGET_64BIT\"\n+  \"@\n+   push{w}\\\\t{|word ptr }%1\n+   push{w}\\\\t%w1\"\n+  [(set_attr \"type\" \"push\")\n+   (set_attr \"mode\" \"HI\")])\n+\n ;; Situation is quite tricky about when to choose full sized (SImode) move\n ;; over QImode moves.  For Q_REG -> Q_REG move we use full size only for\n ;; partial register dependency machines (such as AMD Athlon), where QImode"}]}