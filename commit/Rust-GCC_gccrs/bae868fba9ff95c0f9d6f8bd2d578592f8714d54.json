{"sha": "bae868fba9ff95c0f9d6f8bd2d578592f8714d54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmFlODY4ZmJhOWZmOTVjMGY5ZDZmOGJkMmQ1Nzg1OTJmODcxNGQ1NA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2012-02-17T13:38:15Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2012-02-17T13:38:15Z"}, "message": "Disable gthreads on Solaris 8/9 (PR libstdc++/52189)\n\n\tPR libstdc++/52189\n\t* acinclude.m4 (GLIBCXX_CHECK_GTHREADS): Handle\n\t--enable-libstdcxx-threads.\n\tDisable on Solaris 8/9 with symbol versioning.\n\t* configure.ac (GLIBCXX_CHECK_GTHREADS): Move after\n\tGLIBCXX_ENABLE_SYMVERS.\n\t* configure: Regenerate.\n\t* doc/xml/manual/configure.xml (--enable-libstdcxx-threads): Explain.\n\nFrom-SVN: r184335", "tree": {"sha": "a835e12160cb96250445b0ea605d5f915eb666e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a835e12160cb96250445b0ea605d5f915eb666e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bae868fba9ff95c0f9d6f8bd2d578592f8714d54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae868fba9ff95c0f9d6f8bd2d578592f8714d54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bae868fba9ff95c0f9d6f8bd2d578592f8714d54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae868fba9ff95c0f9d6f8bd2d578592f8714d54/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b5912b10130d5ac5c766835d1d6f80323130bed9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5912b10130d5ac5c766835d1d6f80323130bed9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5912b10130d5ac5c766835d1d6f80323130bed9"}], "stats": {"total": 318, "additions": 203, "deletions": 115}, "files": [{"sha": "a9d47ed0735263c9396694b19f9a7335bd0baa05", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae868fba9ff95c0f9d6f8bd2d578592f8714d54/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae868fba9ff95c0f9d6f8bd2d578592f8714d54/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bae868fba9ff95c0f9d6f8bd2d578592f8714d54", "patch": "@@ -1,3 +1,14 @@\n+2012-02-17  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR libstdc++/52189\n+\t* acinclude.m4 (GLIBCXX_CHECK_GTHREADS): Handle\n+\t--enable-libstdcxx-threads.\n+\tDisable on Solaris 8/9 with symbol versioning.\n+\t* configure.ac (GLIBCXX_CHECK_GTHREADS): Move after\n+\tGLIBCXX_ENABLE_SYMVERS.\n+\t* configure: Regenerate.\n+\t* doc/xml/manual/configure.xml (--enable-libstdcxx-threads): Explain.\n+\n 2012-02-15  DJ Delorie  <dj@redhat.com>\n \n \t* src/c++98/locale.cc (locale::facet::_S_get_c_locale): Fix typo."}, {"sha": "e7ffacc19e37fe2433534e9267166d813f9d2dd6", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae868fba9ff95c0f9d6f8bd2d578592f8714d54/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae868fba9ff95c0f9d6f8bd2d578592f8714d54/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=bae868fba9ff95c0f9d6f8bd2d578592f8714d54", "patch": "@@ -3328,7 +3328,14 @@ dnl Check if gthread implementation defines the types and functions\n dnl required by the c++0x thread library.  Conforming gthread\n dnl implementations can define __GTHREADS_CXX0X to enable use with c++0x.\n dnl\n+dnl GLIBCXX_ENABLE_SYMVERS must be done before this.\n+dnl\n AC_DEFUN([GLIBCXX_CHECK_GTHREADS], [\n+  GLIBCXX_ENABLE(libstdcxx-threads,auto,,[enable C++11 threads support])\n+\n+  if test x$enable_libstdcxx_threads = xauto || \n+     test x$enable_libstdcxx_threads = xyes; then\n+\n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n \n@@ -3367,7 +3374,28 @@ AC_DEFUN([GLIBCXX_CHECK_GTHREADS], [\n       #ifndef __GTHREADS_CXX0X\n       #error\n       #endif\n-    ], [ac_has_gthreads=yes], [ac_has_gthreads=no])\n+    ], [case $target_os in\n+\t  # gthreads support breaks symbol versioning on Solaris 8/9 (PR\n+\t  # libstdc++/52189).\n+          solaris2.[[89]]*)\n+\t    if test x$enable_symvers = xno; then\n+\t      ac_has_gthreads=yes\n+\t    elif test x$enable_libstdcxx_threads = xyes; then\n+\t      AC_MSG_WARN([You have requested C++11 threads support, but])\n+\t      AC_MSG_WARN([this breaks symbol versioning.])\n+\t      ac_has_gthreads=yes\n+\t    else\n+\t      ac_has_gthreads=no\n+\t    fi\n+\t    ;;\n+\t  *)\n+\t    ac_has_gthreads=yes\n+\t    ;;\n+        esac],\n+       [ac_has_gthreads=no])\n+  else\n+    ac_has_gthreads=no\n+  fi\n \n   AC_MSG_RESULT([$ac_has_gthreads])\n "}, {"sha": "07b2a84e8d9dedd5bee026786a5318ac772d298b", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 153, "deletions": 111, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae868fba9ff95c0f9d6f8bd2d578592f8714d54/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae868fba9ff95c0f9d6f8bd2d578592f8714d54/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=bae868fba9ff95c0f9d6f8bd2d578592f8714d54", "patch": "@@ -868,6 +868,7 @@ with_system_libunwind\n enable_linux_futex\n enable_symvers\n enable_libstdcxx_visibility\n+enable_libstdcxx_threads\n with_gxx_include_dir\n enable_version_specific_runtime_libs\n '\n@@ -1558,6 +1559,8 @@ Optional Features:\n                           [default=yes]\n   --enable-libstdcxx-visibility\n                           enables visibility safe usage [default=yes]\n+  --enable-libstdcxx-threads\n+                          enable C++11 threads support [default=auto]\n   --enable-version-specific-runtime-libs\n                           Specify that runtime libraries should be installed\n                           in a compiler-specific directory\n@@ -11492,7 +11495,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11495 \"configure\"\n+#line 11498 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11598,7 +11601,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11601 \"configure\"\n+#line 11604 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14956,7 +14959,7 @@ fi\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 14959 \"configure\"\n+#line 14962 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -15291,7 +15294,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15294 \"configure\"\n+#line 15297 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15326,7 +15329,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15329 \"configure\"\n+#line 15332 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15361,7 +15364,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15364 \"configure\"\n+#line 15367 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15397,7 +15400,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15400 \"configure\"\n+#line 15403 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -15477,7 +15480,7 @@ $as_echo \"$as_me: WARNING: Performance of certain classes will degrade as a resu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15480 \"configure\"\n+#line 15483 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -15519,7 +15522,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15522 \"configure\"\n+#line 15525 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -15553,7 +15556,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15556 \"configure\"\n+#line 15559 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -19816,107 +19819,6 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n-# For gthread support\n-\n-\n-  ac_ext=cpp\n-ac_cpp='$CXXCPP $CPPFLAGS'\n-ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n-ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n-ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n-\n-\n-  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n-  CXXFLAGS=\"$CXXFLAGS -fno-exceptions \\\n-\t-I${toplevel_srcdir}/libgcc -I${toplevel_builddir}/libgcc\"\n-\n-  target_thread_file=`$CXX -v 2>&1 | sed -n 's/^Thread model: //p'`\n-  case $target_thread_file in\n-    posix)\n-      CXXFLAGS=\"$CXXFLAGS -DSUPPORTS_WEAK -DGTHREAD_USE_WEAK -D_PTHREADS\"\n-  esac\n-\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether it can be safely assumed that mutex_timedlock is available\" >&5\n-$as_echo_n \"checking whether it can be safely assumed that mutex_timedlock is available... \" >&6; }\n-\n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-#include <unistd.h>\n-int\n-main ()\n-{\n-\n-      // In case of POSIX threads check _POSIX_TIMEOUTS.\n-      #if (defined(_PTHREADS) \\\n-\t  && (!defined(_POSIX_TIMEOUTS) || _POSIX_TIMEOUTS <= 0))\n-      #error\n-      #endif\n-\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_cxx_try_compile \"$LINENO\"; then :\n-  ac_gthread_use_mutex_timedlock=1\n-else\n-  ac_gthread_use_mutex_timedlock=0\n-fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-\n-\n-cat >>confdefs.h <<_ACEOF\n-#define _GTHREAD_USE_MUTEX_TIMEDLOCK $ac_gthread_use_mutex_timedlock\n-_ACEOF\n-\n-\n-  if test $ac_gthread_use_mutex_timedlock = 1 ; then res_mutex_timedlock=yes ;\n-  else res_mutex_timedlock=no ; fi\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $res_mutex_timedlock\" >&5\n-$as_echo \"$res_mutex_timedlock\" >&6; }\n-\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for gthreads library\" >&5\n-$as_echo_n \"checking for gthreads library... \" >&6; }\n-\n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-#include \"gthr.h\"\n-int\n-main ()\n-{\n-\n-      #ifndef __GTHREADS_CXX0X\n-      #error\n-      #endif\n-\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_cxx_try_compile \"$LINENO\"; then :\n-  ac_has_gthreads=yes\n-else\n-  ac_has_gthreads=no\n-fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_has_gthreads\" >&5\n-$as_echo \"$ac_has_gthreads\" >&6; }\n-\n-  if test x\"$ac_has_gthreads\" = x\"yes\"; then\n-\n-$as_echo \"#define _GLIBCXX_HAS_GTHREADS 1\" >>confdefs.h\n-\n-  fi\n-\n-  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n-  ac_ext=c\n-ac_cpp='$CPP $CPPFLAGS'\n-ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n-ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n-ac_compiler_gnu=$ac_cv_c_compiler_gnu\n-\n-\n-\n \n   ac_fn_c_check_header_mongrel \"$LINENO\" \"locale.h\" \"ac_cv_header_locale_h\" \"$ac_includes_default\"\n if test \"x$ac_cv_header_locale_h\" = x\"\"yes; then :\n@@ -65556,6 +65458,146 @@ done\n \n \n \n+# For gthread support.  Depends on GLIBCXX_ENABLE_SYMVERS.\n+\n+   # Check whether --enable-libstdcxx-threads was given.\n+if test \"${enable_libstdcxx_threads+set}\" = set; then :\n+  enableval=$enable_libstdcxx_threads;\n+      case \"$enableval\" in\n+       yes|no) ;;\n+       *) as_fn_error \"Argument to enable/disable libstdcxx-threads must be yes or no\" \"$LINENO\" 5 ;;\n+      esac\n+\n+else\n+  enable_libstdcxx_threads=auto\n+fi\n+\n+\n+\n+  if test x$enable_libstdcxx_threads = xauto ||\n+     test x$enable_libstdcxx_threads = xyes; then\n+\n+\n+  ac_ext=cpp\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -fno-exceptions \\\n+\t-I${toplevel_srcdir}/libgcc -I${toplevel_builddir}/libgcc\"\n+\n+  target_thread_file=`$CXX -v 2>&1 | sed -n 's/^Thread model: //p'`\n+  case $target_thread_file in\n+    posix)\n+      CXXFLAGS=\"$CXXFLAGS -DSUPPORTS_WEAK -DGTHREAD_USE_WEAK -D_PTHREADS\"\n+  esac\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether it can be safely assumed that mutex_timedlock is available\" >&5\n+$as_echo_n \"checking whether it can be safely assumed that mutex_timedlock is available... \" >&6; }\n+\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <unistd.h>\n+int\n+main ()\n+{\n+\n+      // In case of POSIX threads check _POSIX_TIMEOUTS.\n+      #if (defined(_PTHREADS) \\\n+\t  && (!defined(_POSIX_TIMEOUTS) || _POSIX_TIMEOUTS <= 0))\n+      #error\n+      #endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  ac_gthread_use_mutex_timedlock=1\n+else\n+  ac_gthread_use_mutex_timedlock=0\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define _GTHREAD_USE_MUTEX_TIMEDLOCK $ac_gthread_use_mutex_timedlock\n+_ACEOF\n+\n+\n+  if test $ac_gthread_use_mutex_timedlock = 1 ; then res_mutex_timedlock=yes ;\n+  else res_mutex_timedlock=no ; fi\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $res_mutex_timedlock\" >&5\n+$as_echo \"$res_mutex_timedlock\" >&6; }\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for gthreads library\" >&5\n+$as_echo_n \"checking for gthreads library... \" >&6; }\n+\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include \"gthr.h\"\n+int\n+main ()\n+{\n+\n+      #ifndef __GTHREADS_CXX0X\n+      #error\n+      #endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  case $target_os in\n+\t  # gthreads support breaks symbol versioning on Solaris 8/9 (PR\n+\t  # libstdc++/52189).\n+          solaris2.[89]*)\n+\t    if test x$enable_symvers = xno; then\n+\t      ac_has_gthreads=yes\n+\t    elif test x$enable_libstdcxx_threads = xyes; then\n+\t      { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: You have requested C++11 threads support, but\" >&5\n+$as_echo \"$as_me: WARNING: You have requested C++11 threads support, but\" >&2;}\n+\t      { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: this breaks symbol versioning.\" >&5\n+$as_echo \"$as_me: WARNING: this breaks symbol versioning.\" >&2;}\n+\t      ac_has_gthreads=yes\n+\t    else\n+\t      ac_has_gthreads=no\n+\t    fi\n+\t    ;;\n+\t  *)\n+\t    ac_has_gthreads=yes\n+\t    ;;\n+        esac\n+else\n+  ac_has_gthreads=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  else\n+    ac_has_gthreads=no\n+  fi\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_has_gthreads\" >&5\n+$as_echo \"$ac_has_gthreads\" >&6; }\n+\n+  if test x\"$ac_has_gthreads\" = x\"yes\"; then\n+\n+$as_echo \"#define _GLIBCXX_HAS_GTHREADS 1\" >>confdefs.h\n+\n+  fi\n+\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n+\n # Define documentation rules conditionally.\n \n # See if makeinfo has been installed and is modern enough"}, {"sha": "81b523f0342665127706eb01b3ae34e821711e09", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae868fba9ff95c0f9d6f8bd2d578592f8714d54/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae868fba9ff95c0f9d6f8bd2d578592f8714d54/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=bae868fba9ff95c0f9d6f8bd2d578592f8714d54", "patch": "@@ -165,9 +165,6 @@ GLIBCXX_CHECK_GETTIMEOFDAY\n # NB: The default is [no], because otherwise it requires linking.\n GLIBCXX_ENABLE_LIBSTDCXX_TIME([no])\n \n-# For gthread support\n-GLIBCXX_CHECK_GTHREADS\n-\n AC_LC_MESSAGES\n \n # For hardware_concurrency\n@@ -336,6 +333,9 @@ GLIBCXX_CONDITIONAL(GLIBCXX_LDBL_COMPAT, test $ac_ldbl_compat = yes)\n # This depends on GLIBCXX_ENABLE_SYMVERS and GLIBCXX_IS_NATIVE.\n GLIBCXX_CONFIGURE_TESTSUITE\n \n+# For gthread support.  Depends on GLIBCXX_ENABLE_SYMVERS.\n+GLIBCXX_CHECK_GTHREADS\n+\n # Define documentation rules conditionally.\n \n # See if makeinfo has been installed and is modern enough"}, {"sha": "727d886d316968a5f2bb03e09af90fde8c1cbd18", "filename": "libstdc++-v3/doc/xml/manual/configure.xml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bae868fba9ff95c0f9d6f8bd2d578592f8714d54/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bae868fba9ff95c0f9d6f8bd2d578592f8714d54/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fconfigure.xml?ref=bae868fba9ff95c0f9d6f8bd2d578592f8714d54", "patch": "@@ -161,6 +161,13 @@\n      </para>\n  </listitem></varlistentry>\n \n+ <varlistentry><term><code>--enable-libstdcxx-threads</code></term>\n+ <listitem><para>Enable C++11 threads support.  If not explicitly specified,\n+        the  configure process enables it if possible.  It defaults to 'off'\n+\ton Solaris 8 and 9, where it would break symbol versioning.   This\n+\toption can change the library ABI.\n+     </para>\n+ </listitem></varlistentry>\n \n  <varlistentry><term><code>--enable-libstdcxx-time</code></term>\n  <listitem><para>This is an abbreviated form of"}]}