{"sha": "c28408b78417c388b52a53720ae2fd512514881f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI4NDA4Yjc4NDE3YzM4OGI1MmE1MzcyMGFlMmZkNTEyNTE0ODgxZg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2010-06-18T08:17:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-18T08:17:48Z"}, "message": "sem_res.adb (Analyze_Indexed_Component, [...]): Warn on assigning to packed atomic component.\n\n2010-06-18  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_res.adb (Analyze_Indexed_Component, Analyze_Selected_Component):\n\tWarn on assigning to packed atomic component.\n\n2010-06-18  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_util.ads: Minor reformatting\n\t* einfo.ads, einfo.adb: Minor doc clarification (scope of decls in\n\tExpression_With_Actions).\n\t* snames.ads-tmpl: Minor comment fix\n\n2010-06-18  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb (Diagnose_Multiple_Pragmas): New procedure\n\t(Set_Imported): Use Import_Interface_Present to control message output\n\t* sinfo.ads, sinfo.adb (Import_Interface_Present): New flag\n\t* gnat_rm.texi: Document that we can have pragma Import and pragma\n\tInterface for the same subprogram.\n\n2010-06-18  Robert Dewar  <dewar@adacore.com>\n\n\t* lib-xref.adb (Generate_Reference): Fix bad reference to\n\tHas_Pragma_Unreferenced (clients should always use Has_Unreferenced).\n\nFrom-SVN: r160961", "tree": {"sha": "d309003bdfd9d9d3a82344a05f01f0e6c83f5a3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d309003bdfd9d9d3a82344a05f01f0e6c83f5a3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c28408b78417c388b52a53720ae2fd512514881f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c28408b78417c388b52a53720ae2fd512514881f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c28408b78417c388b52a53720ae2fd512514881f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c28408b78417c388b52a53720ae2fd512514881f/comments", "author": null, "committer": null, "parents": [{"sha": "8ccfe1ab7947a51e92a7646ebed1f31e821d6437", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ccfe1ab7947a51e92a7646ebed1f31e821d6437", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ccfe1ab7947a51e92a7646ebed1f31e821d6437"}], "stats": {"total": 319, "additions": 299, "deletions": 20}, "files": [{"sha": "5075e1b12f62b196554f04f1cdf540e470da24ca", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c28408b78417c388b52a53720ae2fd512514881f", "patch": "@@ -1,3 +1,28 @@\n+2010-06-18  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_res.adb (Analyze_Indexed_Component, Analyze_Selected_Component):\n+\tWarn on assigning to packed atomic component.\n+\n+2010-06-18  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.ads: Minor reformatting\n+\t* einfo.ads, einfo.adb: Minor doc clarification (scope of decls in\n+\tExpression_With_Actions).\n+\t* snames.ads-tmpl: Minor comment fix\n+\n+2010-06-18  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb (Diagnose_Multiple_Pragmas): New procedure\n+\t(Set_Imported): Use Import_Interface_Present to control message output\n+\t* sinfo.ads, sinfo.adb (Import_Interface_Present): New flag\n+\t* gnat_rm.texi: Document that we can have pragma Import and pragma\n+\tInterface for the same subprogram.\n+\n+2010-06-18  Robert Dewar  <dewar@adacore.com>\n+\n+\t* lib-xref.adb (Generate_Reference): Fix bad reference to\n+\tHas_Pragma_Unreferenced (clients should always use Has_Unreferenced).\n+\n 2010-06-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (set_gnu_expr_location_from_node): New static"}, {"sha": "005823145cbbf09a967a25ed22fa5992179212a2", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=c28408b78417c388b52a53720ae2fd512514881f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "6c4dde715919973c2734f6209c1d1adb29c6fe96", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=c28408b78417c388b52a53720ae2fd512514881f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -5209,7 +5209,7 @@ package Einfo is\n    --    Spec_PPC_List                       (Node24)\n    --    Interface_Alias                     (Node25)\n    --    Static_Initialization               (Node26)   (init_proc only)\n-   --    Overridden_Operation                (Node26)\n+   --    Overridden_Operation                (Node26)   (never for init proc)\n    --    Wrapped_Entity                      (Node27)   (non-generic case only)\n    --    Extra_Formals                       (Node28)\n    --    Body_Needed_For_SAL                 (Flag40)"}, {"sha": "0cbe160af7bd57d9f9530600928297dbc1495d40", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=c28408b78417c388b52a53720ae2fd512514881f", "patch": "@@ -2856,7 +2856,12 @@ the standard Ada pragma @code{Import}.  It is provided for compatibility\n with Ada 83.  The definition is upwards compatible both with pragma\n @code{Interface} as defined in the Ada 83 Reference Manual, and also\n with some extended implementations of this pragma in certain Ada 83\n-implementations.\n+implementations.  The only difference between pragma @code{Interface}\n+and pragma @code{Import} is that there is special circuitry to allow\n+both pragmas to appear for the same subprogram entity (normally it\n+is illegal to have multiple @code{Import} pragmas. This is useful in\n+maintaining Ada 83/Ada 95 compatibility and is compatible with other\n+Ada 83 compilers.\n \n @node Pragma Interface_Name\n @unnumberedsec Pragma Interface_Name"}, {"sha": "987d178e1c9e4451016696bcd2df05f7674bac71", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=c28408b78417c388b52a53720ae2fd512514881f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1998-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -666,7 +666,7 @@ package body Lib.Xref is\n          --  Check for pragma Unreferenced given and reference is within\n          --  this source unit (occasion for possible warning to be issued).\n \n-         if Has_Pragma_Unreferenced (E)\n+         if Has_Unreferenced (E)\n            and then In_Same_Extended_Unit (E, N)\n          then\n             --  A reference as a named parameter in a call does not count"}, {"sha": "bcc416b1a3a0b7bc1d82cbc075766f043737c521", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 179, "deletions": 3, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=c28408b78417c388b52a53720ae2fd512514881f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2346,12 +2346,176 @@ package body Sem_Prag is\n          Cname     : Name_Id;\n          Comp_Unit : Unit_Number_Type;\n \n+         procedure Diagnose_Multiple_Pragmas (S : Entity_Id);\n+         --  Called if we have more than one Export/Import/Convention pragma.\n+         --  This is generally illegal, but we have a special case of allowing\n+         --  Import and Interface to coexist if they specify the convention in\n+         --  a consistent manner. We are allowed to do this, since Interface is\n+         --  an implementation defined pragma, and we choose to do it since we\n+         --  know Rational allows this combination. S is the entity id of the\n+         --  subprogram in question. This procedure also sets the special flag\n+         --  Import_Interface_Present in both pragmas in the case where we do\n+         --  have matching Import and Interface pragmas.\n+\n          procedure Set_Convention_From_Pragma (E : Entity_Id);\n          --  Set convention in entity E, and also flag that the entity has a\n          --  convention pragma. If entity is for a private or incomplete type,\n          --  also set convention and flag on underlying type. This procedure\n          --  also deals with the special case of C_Pass_By_Copy convention.\n \n+         -------------------------------\n+         -- Diagnose_Multiple_Pragmas --\n+         -------------------------------\n+\n+         procedure Diagnose_Multiple_Pragmas (S : Entity_Id) is\n+            Pdec : constant Node_Id := Declaration_Node (S);\n+            Decl : Node_Id;\n+            Err  : Boolean;\n+\n+            function Same_Convention (Decl : Node_Id) return Boolean;\n+            --  Decl is a pragma node. This function returns True if this\n+            --  pragma has a first argument that is an identifier with a\n+            --  Chars field corresponding to the Convention_Id C.\n+\n+            function Same_Name (Decl : Node_Id) return Boolean;\n+            --  Decl is a pragma node. This function returns True if this\n+            --  pragma has a second argument that is an identifier with a\n+            --  Chars field that matches the Chars of the current subprogram.\n+\n+            ---------------------\n+            -- Same_Convention --\n+            ---------------------\n+\n+            function Same_Convention (Decl : Node_Id) return Boolean is\n+               Arg1 : constant Node_Id :=\n+                        First (Pragma_Argument_Associations (Decl));\n+\n+            begin\n+               if Present (Arg1) then\n+                  declare\n+                     Arg : constant Node_Id := Get_Pragma_Arg (Arg1);\n+                  begin\n+                     if Nkind (Arg) = N_Identifier\n+                       and then Is_Convention_Name (Chars (Arg))\n+                       and then Get_Convention_Id (Chars (Arg)) = C\n+                     then\n+                        return True;\n+                     end if;\n+                  end;\n+               end if;\n+\n+               return False;\n+            end Same_Convention;\n+\n+            ---------------\n+            -- Same_Name --\n+            ---------------\n+\n+            function Same_Name (Decl : Node_Id) return Boolean is\n+               Arg1 : constant Node_Id :=\n+                        First (Pragma_Argument_Associations (Decl));\n+               Arg2 : Node_Id;\n+\n+            begin\n+               if No (Arg1) then\n+                  return False;\n+               end if;\n+\n+               Arg2 := Next (Arg1);\n+\n+               if No (Arg2) then\n+                  return False;\n+               end if;\n+\n+               declare\n+                  Arg : constant Node_Id := Get_Pragma_Arg (Arg2);\n+               begin\n+                  if Nkind (Arg) = N_Identifier\n+                    and then Chars (Arg) = Chars (S)\n+                  then\n+                     return True;\n+                  end if;\n+               end;\n+\n+               return False;\n+            end Same_Name;\n+\n+         --  Start of processing for Diagnose_Multiple_Pragmas\n+\n+         begin\n+            Err := True;\n+\n+            --  Definitely give message if we have Convention/Export here\n+\n+            if Prag_Id = Pragma_Convention or else Prag_Id = Pragma_Export then\n+               null;\n+\n+               --  If we have an Import or Export, scan back from pragma to\n+               --  find any previous pragma applying to the same procedure.\n+               --  The scan will be terminated by the start of the list, or\n+               --  hitting the subprogram declaration. This won't allow one\n+               --  pragma to appear in the public part and one in the private\n+               --  part, but that seems very unlikely in practice.\n+\n+            else\n+               Decl := Prev (N);\n+               while Present (Decl) and then Decl /= Pdec loop\n+\n+                  --  Look for pragma with same name as us\n+\n+                  if Nkind (Decl) = N_Pragma\n+                    and then Same_Name (Decl)\n+                  then\n+                     --  Give error if same as our pragma or Export/Convention\n+\n+                     if Pragma_Name (Decl) = Name_Export\n+                          or else\n+                        Pragma_Name (Decl) = Name_Convention\n+                          or else\n+                        Pragma_Name (Decl) = Pragma_Name (N)\n+                     then\n+                        exit;\n+\n+                     --  Case of Import/Interface or the other way round\n+\n+                     elsif Pragma_Name (Decl) = Name_Interface\n+                             or else\n+                           Pragma_Name (Decl) = Name_Import\n+                     then\n+                        --  Here we know that we have Import and Interface. It\n+                        --  doesn't matter which way round they are. See if\n+                        --  they specify the same convention. If so, all OK,\n+                        --  and set special flags to stop other messages\n+\n+                        if Same_Convention (Decl) then\n+                           Set_Import_Interface_Present (N);\n+                           Set_Import_Interface_Present (Decl);\n+                           Err := False;\n+\n+                        --  If different conventions, special message\n+\n+                        else\n+                           Error_Msg_Sloc := Sloc (Decl);\n+                           Error_Pragma_Arg\n+                             (\"convention differs from that given#\", Arg1);\n+                           return;\n+                        end if;\n+                     end if;\n+                  end if;\n+\n+                  Next (Decl);\n+               end loop;\n+            end if;\n+\n+            --  Give message if needed if we fall through those tests\n+\n+            if Err then\n+               Error_Pragma_Arg\n+                 (\"at most one Convention/Export/Import pragma is allowed\",\n+                  Arg2);\n+            end if;\n+         end Diagnose_Multiple_Pragmas;\n+\n          --------------------------------\n          -- Set_Convention_From_Pragma --\n          --------------------------------\n@@ -2545,8 +2709,7 @@ package body Sem_Prag is\n          end if;\n \n          if Has_Convention_Pragma (E) then\n-            Error_Pragma_Arg\n-              (\"at most one Convention/Export/Import pragma is allowed\", Arg2);\n+            Diagnose_Multiple_Pragmas (E);\n \n          elsif Convention (E) = Convention_Protected\n            or else Ekind (Scope (E)) = E_Protected_Type\n@@ -4674,8 +4837,19 @@ package body Sem_Prag is\n          --  Error message if already imported or exported\n \n          if Is_Exported (E) or else Is_Imported (E) then\n+\n+            --  Error if being set Exported twice\n+\n             if Is_Exported (E) then\n                Error_Msg_NE (\"entity& was previously exported\", N, E);\n+\n+            --  OK if Import/Interface case\n+\n+            elsif Import_Interface_Present (N) then\n+               goto OK;\n+\n+            --  Error if being set Imported twice\n+\n             else\n                Error_Msg_NE (\"entity& was previously imported\", N, E);\n             end if;\n@@ -4704,6 +4878,8 @@ package body Sem_Prag is\n                Set_Is_Statically_Allocated (E);\n             end if;\n          end if;\n+\n+         <<OK>> null;\n       end Set_Imported;\n \n       -------------------------"}, {"sha": "7ae5fab45a555db609aea69fb71306c89e609da8", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=c28408b78417c388b52a53720ae2fd512514881f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -6635,6 +6635,24 @@ package body Sem_Res is\n          Warn_On_Suspicious_Index (Name, First (Expressions (N)));\n          Eval_Indexed_Component (N);\n       end if;\n+\n+      --  If the array type is atomic, and is packed, and we are in a left side\n+      --  context, then this is worth a warning, since we have a situation\n+      --  where the access to the component may cause extra read/writes of\n+      --  the atomic array object, which could be considered unexpected.\n+\n+      if Nkind (N) = N_Indexed_Component\n+        and then (Is_Atomic (Array_Type)\n+                   or else (Is_Entity_Name (Prefix (N))\n+                             and then Is_Atomic (Entity (Prefix (N)))))\n+        and then Is_Bit_Packed_Array (Array_Type)\n+        and then Is_LHS (N)\n+      then\n+         Error_Msg_N (\"?assignment to component of packed atomic array\",\n+                      Prefix (N));\n+         Error_Msg_N (\"?\\may cause unexpected accesses to atomic object\",\n+                      Prefix (N));\n+      end if;\n    end Resolve_Indexed_Component;\n \n    -----------------------------\n@@ -7715,7 +7733,6 @@ package body Sem_Res is\n \n                   Comp := Next_Entity (Comp);\n                end loop;\n-\n             end if;\n \n             Get_Next_Interp (I, It);\n@@ -7784,6 +7801,23 @@ package body Sem_Res is\n       --  Note: No Eval processing is required, because the prefix is of a\n       --  record type, or protected type, and neither can possibly be static.\n \n+      --  If the array type is atomic, and is packed, and we are in a left side\n+      --  context, then this is worth a warning, since we have a situation\n+      --  where the access to the component may cause extra read/writes of\n+      --  the atomic array object, which could be considered unexpected.\n+\n+      if Nkind (N) = N_Selected_Component\n+        and then (Is_Atomic (T)\n+                   or else (Is_Entity_Name (Prefix (N))\n+                             and then Is_Atomic (Entity (Prefix (N)))))\n+        and then Is_Packed (T)\n+        and then Is_LHS (N)\n+      then\n+         Error_Msg_N (\"?assignment to component of packed atomic record\",\n+                      Prefix (N));\n+         Error_Msg_N (\"?\\may cause unexpected accesses to atomic object\",\n+                      Prefix (N));\n+      end if;\n    end Resolve_Selected_Component;\n \n    -------------------"}, {"sha": "806cbcf8c8747102a6a05fae185c1cb46d56b969", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=c28408b78417c388b52a53720ae2fd512514881f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -712,7 +712,7 @@ package Sem_Util is\n    --  by a derived type declarations.\n \n    function Is_LHS (N : Node_Id) return Boolean;\n-   --  Returns True iff N is used as Name in an assignment statement.\n+   --  Returns True iff N is used as Name in an assignment statement\n \n    function Is_Library_Level_Entity (E : Entity_Id) return Boolean;\n    --  A library-level declaration is one that is accessible from Standard,"}, {"sha": "382968ca81ce1aa63e70befe2fe0ef63b750a8bb", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=c28408b78417c388b52a53720ae2fd512514881f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1557,6 +1557,14 @@ package body Sinfo is\n       return Flag16 (N);\n    end Interface_Present;\n \n+   function Import_Interface_Present\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Pragma);\n+      return Flag16 (N);\n+   end Import_Interface_Present;\n+\n    function In_Present\n       (N : Node_Id) return Boolean is\n    begin\n@@ -4461,6 +4469,14 @@ package body Sinfo is\n       Set_Flag16 (N, Val);\n    end Set_Interface_Present;\n \n+   procedure Set_Import_Interface_Present\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Pragma);\n+      Set_Flag16 (N, Val);\n+   end Set_Import_Interface_Present;\n+\n    procedure Set_In_Present\n       (N : Node_Id; Val : Boolean := True) is\n    begin"}, {"sha": "705530c75688a31b00a51c8c1af731c5c9cd2586", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=c28408b78417c388b52a53720ae2fd512514881f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1172,6 +1172,11 @@ package Sinfo is\n    --    'Address or 'Tag attribute. ???There are other implicit with clauses\n    --    as well.\n \n+   --  Import_Interface_Present (Flag16-Sem)\n+   --     This flag is set in an Interface or Import pragma if a matching\n+   --     pragma of the other kind is also present. This is used to avoid\n+   --     generating some unwanted error messages.\n+\n    --  Includes_Infinities (Flag11-Sem)\n    --    This flag is present in N_Range nodes. It is set for the range of\n    --    unconstrained float types defined in Standard, which include not only\n@@ -1999,6 +2004,7 @@ package Sinfo is\n       --  Pragma_Identifier (Node4)\n       --  Next_Rep_Item (Node5-Sem)\n       --  Pragma_Enabled (Flag5-Sem)\n+      --  Import_Interface_Present (Flag16-Sem)\n \n       --  Note: we should have a section on what pragmas are passed on to\n       --  the back end to be processed. This section should note that pragma\n@@ -6620,14 +6626,22 @@ package Sinfo is\n       --  actions associated with the right hand operand.\n \n       --  The N_Expression_With_Actions node represents an expression with\n-      --  an associated set of actions (which are executable statements).\n+      --  an associated set of actions (which are executable statements and\n+      --  declarations, as might occur in a handled statement sequence).\n+\n       --  The required semantics is that the set of actions is executed in\n       --  the order in which it appears just before the expression is\n       --  evaluated (and these actions must only be executed if the value\n       --  of the expression is evaluated). The node is considered to be\n       --  a subexpression, whose value is the value of the Expression after\n       --  executing all the actions.\n \n+      --  Note: if the actions contain declarations, then these declarations\n+      --  maybe referenced with in the expression. It is thus appropriate for\n+      --  the back end to create a scope that encompasses the construct (any\n+      --  declarations within the actions will definitely not be referenced\n+      --  once elaboration of the construct is completed).\n+\n       --  Sprint syntax:  do\n       --                    action;\n       --                    action;\n@@ -8151,6 +8165,9 @@ package Sinfo is\n    function Implicit_With\n      (N : Node_Id) return Boolean;    -- Flag16\n \n+   function Import_Interface_Present\n+     (N : Node_Id) return Boolean;    -- Flag16\n+\n    function In_Present\n      (N : Node_Id) return Boolean;    -- Flag15\n \n@@ -9078,6 +9095,9 @@ package Sinfo is\n    procedure Set_Implicit_With\n      (N : Node_Id; Val : Boolean := True);    -- Flag16\n \n+   procedure Set_Import_Interface_Present\n+     (N : Node_Id; Val : Boolean := True);    -- Flag16\n+\n    procedure Set_In_Present\n      (N : Node_Id; Val : Boolean := True);    -- Flag15\n \n@@ -11384,6 +11404,7 @@ package Sinfo is\n    pragma Inline (Interface_List);\n    pragma Inline (Interface_Present);\n    pragma Inline (Includes_Infinities);\n+   pragma Inline (Import_Interface_Present);\n    pragma Inline (In_Present);\n    pragma Inline (Inherited_Discriminant);\n    pragma Inline (Instance_Spec);\n@@ -11689,6 +11710,7 @@ package Sinfo is\n    pragma Inline (Set_Includes_Infinities);\n    pragma Inline (Set_Interface_List);\n    pragma Inline (Set_Interface_Present);\n+   pragma Inline (Set_Import_Interface_Present);\n    pragma Inline (Set_In_Present);\n    pragma Inline (Set_Inherited_Discriminant);\n    pragma Inline (Set_Instance_Spec);"}, {"sha": "546e83c79160da55dc6bc1abfe47c42cd418c96e", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28408b78417c388b52a53720ae2fd512514881f/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=c28408b78417c388b52a53720ae2fd512514881f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                             T e m p l a t e                              --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1690,9 +1690,10 @@ package Snames is\n    --  call this function with a name that is not the name of a attribute.\n \n    function Get_Convention_Id (N : Name_Id) return Convention_Id;\n-   --  Returns Id of language convention corresponding to given name. It is an\n-   --  to call this function with a name that is not the name of a convention,\n-   --  or one previously given in a call to Record_Convention_Identifier.\n+   --  Returns Id of language convention corresponding to given name. It is\n+   --  an error to call this function with a name that is not the name of a\n+   --  convention, or one that has been previously recorded using a call to\n+   --  Record_Convention_Identifier.\n \n    function Get_Convention_Name (C : Convention_Id) return Name_Id;\n    --  Returns the name of language convention corresponding to given"}]}