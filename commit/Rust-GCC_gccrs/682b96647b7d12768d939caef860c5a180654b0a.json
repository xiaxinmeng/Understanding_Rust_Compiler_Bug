{"sha": "682b96647b7d12768d939caef860c5a180654b0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgyYjk2NjQ3YjdkMTI3NjhkOTM5Y2FlZjg2MGM1YTE4MDY1NGIwYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-12-10T16:47:27Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-12-10T16:47:27Z"}, "message": "valarray-inst.cc (__gslice_to_index): Optimize performance.\n\n2006-12-10  Paolo Carlini  <pcarlini@suse.de>\n\n\t* src/valarray-inst.cc (__gslice_to_index): Optimize performance.\n\t* testsuite/performance/26_numerics/valarray_gslice_to_index.cc: New.\n\nFrom-SVN: r119707", "tree": {"sha": "7fd7fa72e48ee1143ac5c6dfad07ac9a8bc90824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fd7fa72e48ee1143ac5c6dfad07ac9a8bc90824"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/682b96647b7d12768d939caef860c5a180654b0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/682b96647b7d12768d939caef860c5a180654b0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/682b96647b7d12768d939caef860c5a180654b0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/682b96647b7d12768d939caef860c5a180654b0a/comments", "author": null, "committer": null, "parents": [{"sha": "932ad4d9b55020d2395caa9a278697974bb600ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/932ad4d9b55020d2395caa9a278697974bb600ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/932ad4d9b55020d2395caa9a278697974bb600ce"}], "stats": {"total": 105, "additions": 81, "deletions": 24}, "files": [{"sha": "a1f612946a1cb5fe0f9d61fb25a1941973a9df21", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682b96647b7d12768d939caef860c5a180654b0a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682b96647b7d12768d939caef860c5a180654b0a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=682b96647b7d12768d939caef860c5a180654b0a", "patch": "@@ -1,3 +1,8 @@\n+2006-12-10  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* src/valarray-inst.cc (__gslice_to_index): Optimize performance.\n+\t* testsuite/performance/26_numerics/valarray_gslice_to_index.cc: New.\n+\n 2006-12-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/util/testsuite_hooks.cc (set_memory_limits): Don't set"}, {"sha": "aa8deb1183efbf24327434ff9441a23fc3ec6325", "filename": "libstdc++-v3/src/valarray-inst.cc", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682b96647b7d12768d939caef860c5a180654b0a/libstdc%2B%2B-v3%2Fsrc%2Fvalarray-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682b96647b7d12768d939caef860c5a180654b0a/libstdc%2B%2B-v3%2Fsrc%2Fvalarray-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fvalarray-inst.cc?ref=682b96647b7d12768d939caef860c5a180654b0a", "patch": "@@ -1,6 +1,7 @@\n // Explicit instantiation file.\n \n-// Copyright (C) 2001, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -69,40 +70,34 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n                     const valarray<size_t>& __s, valarray<size_t>& __i)\n   {\n     // There are as much as dimensions as there are strides.\n-    size_t __n = __l.size();\n+    const size_t __n = __l.size();\n \n-    // Get a buffer to hold current multi-index as we go through\n-    // the gslice for the purpose of computing its linear-image.\n-    size_t* const __t = static_cast<size_t*>\n-      (__builtin_alloca(__n * sizeof (size_t)));\n-    __valarray_fill(__t, __n, size_t(0));\n+    // Holds current multi-index as we go through the gslice for the\n+    // purpose of computing its linear-image.\n+    valarray<size_t> __t(__l);\n \n     // Note that this should match the product of all numbers appearing\n     // in __l which describes the multidimensional sizes of the\n-    // the generalized slice.\n+    // generalized slice.\n     const size_t __z = __i.size();\n-    \n+\n     for (size_t __j = 0; __j < __z; ++__j)\n       {\n-        // Compute the linear-index image of (t_0, ... t_{n-1}).\n-        // Normaly, we should use inner_product<>(), but we do it the\n-        // the hard way here to avoid link-time can of worms.\n-        size_t __a = __o;\n-        for (size_t __k = 0; __k < __n; ++__k)\n-          __a += __s[__k] * __t[__k];\n+\t// Compute the linear-index image of (t_0, ... t_{n-1}).\n+\t__i[__j] = __o;\n \n-        __i[__j] = __a;\n+\t--__t[__n - 1];\n+\t__o += __s[__n - 1];\n \n         // Process the next multi-index.  The loop ought to be\n-        // backward since we're making a lexicagraphical visit.\n-        ++__t[__n - 1];\n-        for (size_t __k2 = __n - 1; __k2; --__k2)\n+        // backward since we're making a lexicographical visit.\n+        for (size_t __k2 = __n - 1; __k2 && !__t[__k2]; --__k2)\n           {\n-            if (__t[__k2] >= __l[__k2])\n-              {\n-                __t[__k2] = 0;\n-                ++__t[__k2 - 1];\n-              }\n+\t    __o -= __s[__k2] * __l[__k2];\n+\t    __t[__k2] = __l[__k2];\n+\n+\t    --__t[__k2 - 1];\n+\t    __o += __s[__k2 - 1];\n           }\n       }\n   }"}, {"sha": "42805ba044d83611b5ef1a49c08ac21236c44e7b", "filename": "libstdc++-v3/testsuite/performance/26_numerics/valarray_gslice_to_index.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/682b96647b7d12768d939caef860c5a180654b0a/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F26_numerics%2Fvalarray_gslice_to_index.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/682b96647b7d12768d939caef860c5a180654b0a/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F26_numerics%2Fvalarray_gslice_to_index.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F26_numerics%2Fvalarray_gslice_to_index.cc?ref=682b96647b7d12768d939caef860c5a180654b0a", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <valarray>\n+#include <testsuite_performance.h>\n+\n+int main()\n+{\n+  using namespace std;\n+  using namespace __gnu_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+\n+  valarray<double> va(1000000);\n+  \n+  for (int i = 0; i < 1000000; ++i)\n+    va[i] = i;\n+\n+  size_t lengthvalues[] = { 10, 10, 10, 10, 10, 10 };\n+  size_t stridevalues[] = { 1, 1, 1, 1, 1, 1 };\n+\n+  valarray<size_t> lengths(lengthvalues, 6);\n+  valarray<size_t> stride(stridevalues, 6);\n+\n+  start_counters(time, resource);\n+  for (int j = 0; j < 1000; ++j)\n+    va[gslice(0, lengths, stride)];\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"\", time, resource);\n+\n+  return 0;\n+}"}]}