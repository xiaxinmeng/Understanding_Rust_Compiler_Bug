{"sha": "d52225bef5e22e41c5f3d8aad00d9b99f11fc797", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUyMjI1YmVmNWUyMmU0MWM1ZjNkOGFhZDAwZDliOTlmMTFmYzc5Nw==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-09-21T01:42:53Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-09-21T01:42:53Z"}, "message": "tree-ssa-structalias.c (get_constraint_for_component_ref): Add argument.\n\n2005-09-20  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-ssa-structalias.c (get_constraint_for_component_ref): Add\n\targument.  Allow and set any offset if needs_anyoffset is passed\n\tin.\n\t(get_constraint_for): Add argument here too.\n\tPass it down.\n\t(do_structure_copy): Pass NULL to get_constraint_for.\n\t(handle_ptr_arith): Ditto.\n\t(find_func_aliases): Ditto.\n\nFrom-SVN: r104476", "tree": {"sha": "d019d0c3ba272a554ee57509ef139be5b3e7f42f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d019d0c3ba272a554ee57509ef139be5b3e7f42f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d52225bef5e22e41c5f3d8aad00d9b99f11fc797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d52225bef5e22e41c5f3d8aad00d9b99f11fc797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d52225bef5e22e41c5f3d8aad00d9b99f11fc797", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d52225bef5e22e41c5f3d8aad00d9b99f11fc797/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8df091218f71e7e1804b08ee5d0b9e031be0c262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8df091218f71e7e1804b08ee5d0b9e031be0c262", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8df091218f71e7e1804b08ee5d0b9e031be0c262"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "5c82551dd37d2d01e2f91bac51d54a69b77e7f6a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52225bef5e22e41c5f3d8aad00d9b99f11fc797/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52225bef5e22e41c5f3d8aad00d9b99f11fc797/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d52225bef5e22e41c5f3d8aad00d9b99f11fc797", "patch": "@@ -1,3 +1,14 @@\n+2005-09-20  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-ssa-structalias.c (get_constraint_for_component_ref): Add\n+\targument.  Allow and set any offset if needs_anyoffset is passed\n+\tin.\n+\t(get_constraint_for): Add argument here too.\n+\tPass it down.\n+\t(do_structure_copy): Pass NULL to get_constraint_for.\n+\t(handle_ptr_arith): Ditto.\n+\t(find_func_aliases): Ditto.\n+\n 2005-09-20  J\"orn Rennecke <joern.rennecke@st.com>\n \n \tPR rtl-optimization/23898"}, {"sha": "a1c0f05b0b1f0a1dd47c9e2198c68931485d1d83", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d52225bef5e22e41c5f3d8aad00d9b99f11fc797/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d52225bef5e22e41c5f3d8aad00d9b99f11fc797/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=d52225bef5e22e41c5f3d8aad00d9b99f11fc797", "patch": "@@ -161,7 +161,7 @@ Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n \n static bool use_field_sensitive = true;\n static unsigned int create_variable_info_for (tree, const char *);\n-static struct constraint_expr get_constraint_for (tree);\n+static struct constraint_expr get_constraint_for (tree, bool *);\n static void build_constraint_graph (void);\n \n static bitmap_obstack ptabitmap_obstack;\n@@ -2008,7 +2008,7 @@ offset_overlaps_with_access (const unsigned HOST_WIDE_INT fieldpos,\n /* Given a COMPONENT_REF T, return the constraint_expr for it.  */\n \n static struct constraint_expr\n-get_constraint_for_component_ref (tree t)\n+get_constraint_for_component_ref (tree t, bool *needs_anyoffset)\n {\n   struct constraint_expr result;\n   HOST_WIDE_INT bitsize;\n@@ -2039,7 +2039,7 @@ get_constraint_for_component_ref (tree t)\n  \n   t = get_inner_reference (t, &bitsize, &bitpos, &offset, &mode,\n \t\t\t   &unsignedp, &volatilep, false);\n-  result = get_constraint_for (t);\n+  result = get_constraint_for (t, needs_anyoffset);\n \n   /* This can also happen due to weird offsetof type macros.  */\n   if (TREE_CODE (t) != ADDR_EXPR && result.type == ADDRESSOF)\n@@ -2051,6 +2051,11 @@ get_constraint_for_component_ref (tree t)\n     {\n       result.offset = bitpos;\n     }\t\n+  else if (needs_anyoffset)\n+    {\n+      result.offset = 0;\n+      *needs_anyoffset = true; \n+    }\n   else\n     {\n       result.var = anything_id;\n@@ -2131,7 +2136,7 @@ do_deref (struct constraint_expr cons)\n /* Given a tree T, return the constraint expression for it.  */\n \n static struct constraint_expr\n-get_constraint_for (tree t)\n+get_constraint_for (tree t, bool *need_anyoffset)\n {\n   struct constraint_expr temp;\n \n@@ -2168,7 +2173,7 @@ get_constraint_for (tree t)\n \t  {\n \t  case ADDR_EXPR:\n \t    {\n-\t      temp = get_constraint_for (TREE_OPERAND (t, 0));\n+\t      temp = get_constraint_for (TREE_OPERAND (t, 0), need_anyoffset);\n \t       if (temp.type == DEREF)\n \t\t temp.type = SCALAR;\n \t       else\n@@ -2215,13 +2220,13 @@ get_constraint_for (tree t)\n \t  {\n \t  case INDIRECT_REF:\n \t    {\n-\t      temp = get_constraint_for (TREE_OPERAND (t, 0));\n+\t      temp = get_constraint_for (TREE_OPERAND (t, 0), need_anyoffset);\n \t      temp = do_deref (temp);\n \t      return temp;\n \t    }\n \t  case ARRAY_REF:\n \t  case COMPONENT_REF:\n-\t    temp = get_constraint_for_component_ref (t);\n+\t    temp = get_constraint_for_component_ref (t, need_anyoffset);\n \t    return temp;\n \t  default:\n \t    {\n@@ -2246,7 +2251,7 @@ get_constraint_for (tree t)\n \t\t Anything else, we see through */\n \t      if (!(POINTER_TYPE_P (TREE_TYPE (t))\n \t\t    && ! POINTER_TYPE_P (TREE_TYPE (op))))\n-\t\treturn get_constraint_for (op);\n+\t\treturn get_constraint_for (op, need_anyoffset);\n \n \t      /* FALLTHRU  */\n \t    }\n@@ -2264,7 +2269,7 @@ get_constraint_for (tree t)\n \tswitch (TREE_CODE (t))\n \t  {\n \t  case PHI_NODE:\t   \n-\t    return get_constraint_for (PHI_RESULT (t));\n+\t    return get_constraint_for (PHI_RESULT (t), need_anyoffset);\n \t  case SSA_NAME:\n \t    return get_constraint_exp_from_ssa_var (t);\n \t  default:\n@@ -2413,8 +2418,8 @@ do_structure_copy (tree lhsop, tree rhsop)\n   unsigned HOST_WIDE_INT lhssize;\n   unsigned HOST_WIDE_INT rhssize;\n \n-  lhs = get_constraint_for (lhsop);  \n-  rhs = get_constraint_for (rhsop);\n+  lhs = get_constraint_for (lhsop, NULL);  \n+  rhs = get_constraint_for (rhsop, NULL);\n   \n   /* If we have special var = x, swap it around.  */\n   if (lhs.var <= integer_id && !(get_varinfo (rhs.var)->is_special_var))\n@@ -2750,7 +2755,7 @@ handle_ptr_arith (struct constraint_expr lhs, tree expr)\n   op0 = TREE_OPERAND (expr, 0);\n   op1 = TREE_OPERAND (expr, 1);\n \n-  base = get_constraint_for (op0);\n+  base = get_constraint_for (op0, NULL);\n \n   offset.var = anyoffset_id;\n   offset.type = ADDRESSOF;\n@@ -2788,10 +2793,10 @@ find_func_aliases (tree t, struct alias_info *ai)\n \t{\n \t  int i;\n \n-\t  lhs = get_constraint_for (PHI_RESULT (t));\n+\t  lhs = get_constraint_for (PHI_RESULT (t), NULL);\n \t  for (i = 0; i < PHI_NUM_ARGS (t); i++)\n \t    {\n-\t      rhs = get_constraint_for (PHI_ARG_DEF (t, i));\n+\t      rhs = get_constraint_for (PHI_ARG_DEF (t, i), NULL);\n \t      process_constraint (new_constraint (lhs, rhs));\n \t    }\n \t}\n@@ -2816,7 +2821,7 @@ find_func_aliases (tree t, struct alias_info *ai)\n \t      || ref_contains_indirect_ref (lhsop)\n \t      || TREE_CODE (rhsop) == CALL_EXPR)\n \t    {\n-\t      lhs = get_constraint_for (lhsop);\n+\t      lhs = get_constraint_for (lhsop, NULL);\n \t      switch (TREE_CODE_CLASS (TREE_CODE (rhsop)))\n \t\t{\n \t\t  /* RHS that consist of unary operations,\n@@ -2829,15 +2834,16 @@ find_func_aliases (tree t, struct alias_info *ai)\n \t\t  case tcc_expression:\n \t\t  case tcc_unary:\n \t\t      {\n-\t\t\trhs = get_constraint_for (rhsop);\n+\t\t\tbool need_anyoffset = false;\n+\t\t\trhs = get_constraint_for (rhsop, &need_anyoffset);\n \t\t\tprocess_constraint (new_constraint (lhs, rhs));\n \n \t\t\t/* When taking the address of an aggregate\n \t\t\t   type, from the LHS we can access any field\n \t\t\t   of the RHS.  */\n-\t\t\tif (rhs.type == ADDRESSOF\n+\t\t\tif (need_anyoffset || (rhs.type == ADDRESSOF\n \t\t\t    && !(get_varinfo (rhs.var)->is_special_var)\n-\t\t\t    && AGGREGATE_TYPE_P (TREE_TYPE (TREE_TYPE (rhsop))))\n+\t\t\t    && AGGREGATE_TYPE_P (TREE_TYPE (TREE_TYPE (rhsop)))))\n \t\t\t  {\n \t\t\t    rhs.var = anyoffset_id;\n \t\t\t    rhs.type = ADDRESSOF;\n@@ -2866,7 +2872,7 @@ find_func_aliases (tree t, struct alias_info *ai)\n \t\t    for (i = 0; i < TREE_CODE_LENGTH (TREE_CODE (rhsop)); i++)\n \t\t      {\n \t\t\ttree op = TREE_OPERAND (rhsop, i);\n-\t\t\trhs = get_constraint_for (op);\n+\t\t\trhs = get_constraint_for (op, NULL);\n \t\t\tprocess_constraint (new_constraint (lhs, rhs));\n \t\t      }\n \t\t}      "}]}