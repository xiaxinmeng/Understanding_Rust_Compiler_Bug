{"sha": "d97f3bca6eec50ac4ec007d731d345db3e560c52", "node_id": "C_kwDOANBUbNoAKGQ5N2YzYmNhNmVlYzUwYWM0ZWMwMDdkNzMxZDM0NWRiM2U1NjBjNTI", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-06-24T17:41:41Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-06-24T18:49:58Z"}, "message": "d: Merge upstream dmd 529110f66, druntime 148608b7.\n\nD front-end changes:\n\n    - Import latest bug fixes to mainline.\n\ngcc/d/ChangeLog:\n\n\t* dmd/MERGE: Merge upstream dmd 529110f66.\n\t* decl.cc (DeclVisitor::visit (TupleDeclaration *)): Update for new\n\tfront-end interface.\n\t* types.cc (layout_aggregate_members): Likewise.\n\nlibphobos/ChangeLog:\n\n\t* libdruntime/MERGE: Merge upstream druntime 148608b7.", "tree": {"sha": "b96c7e4a976986b4a8d755479a808db9bbb8b80c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b96c7e4a976986b4a8d755479a808db9bbb8b80c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d97f3bca6eec50ac4ec007d731d345db3e560c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97f3bca6eec50ac4ec007d731d345db3e560c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d97f3bca6eec50ac4ec007d731d345db3e560c52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d97f3bca6eec50ac4ec007d731d345db3e560c52/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0ad48527c314a1e9354b7c26718b56ed4abc92c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ad48527c314a1e9354b7c26718b56ed4abc92c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0ad48527c314a1e9354b7c26718b56ed4abc92c"}], "stats": {"total": 690, "additions": 464, "deletions": 226}, "files": [{"sha": "b82e2d55c133a8d8bd44dc04c87a8e209b71e2ad", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -225,9 +225,9 @@ class DeclVisitor : public Visitor\n \tRootObject *o = (*d->objects)[i];\n \tif (o->dyncast () == DYNCAST_EXPRESSION)\n \t  {\n-\t    DsymbolExp *de = ((Expression *) o)->isDsymbolExp ();\n-\t    if (de != NULL && de->s->isDeclaration ())\n-\t      this->build_dsymbol (de->s);\n+\t    VarExp *ve = ((Expression *) o)->isVarExp ();\n+\t    if (ve)\n+\t      this->build_dsymbol (ve->var);\n \t  }\n       }\n   }"}, {"sha": "f5c42f0ff004b45a7dcf596085680c53c546dcf3", "filename": "gcc/d/dmd/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2FMERGE?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -1,4 +1,4 @@\n-6203135dcf0112d3211add0cbfb22fecc5df1af4\n+529110f66d7d301d62d943a4e4482edaddeb46ea\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/dmd repository."}, {"sha": "fe6e1e344b98eca40553095ddc156e5ffdea5271", "filename": "gcc/d/dmd/canthrow.d", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fcanthrow.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fcanthrow.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcanthrow.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -270,18 +270,7 @@ private CT Dsymbol_canThrow(Dsymbol s, FuncDeclaration func, bool mustNotThrow)\n     }\n     else if (auto td = s.isTupleDeclaration())\n     {\n-        for (size_t i = 0; i < td.objects.dim; i++)\n-        {\n-            RootObject o = (*td.objects)[i];\n-            if (o.dyncast() == DYNCAST.expression)\n-            {\n-                Expression eo = cast(Expression)o;\n-                if (auto se = eo.isDsymbolExp())\n-                {\n-                    result |= Dsymbol_canThrow(se.s, func, mustNotThrow);\n-                }\n-            }\n-        }\n+        td.foreachVar(&symbolDg);\n     }\n     return result;\n }"}, {"sha": "dff76345fa5909370ecea191a0a31d88959d438f", "filename": "gcc/d/dmd/cparse.d", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fcparse.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fcparse.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fcparse.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -2413,11 +2413,19 @@ final class CParser(AST) : Parser!AST\n                 if (scw & scwx)\n                     error(\"duplicate storage class\");\n                 scw |= scwx;\n+                // C11 6.7.1-2 At most one storage-class may be given, except that\n+                // _Thread_local may appear with static or extern.\n                 const scw2 = scw & (SCW.xstatic | SCW.xextern | SCW.xauto | SCW.xregister | SCW.xtypedef);\n                 if (scw2 & (scw2 - 1) ||\n-                    scw & (SCW.xauto | SCW.xregister) && scw & (SCW.xinline | SCW.x_Noreturn))\n+                    scw & (SCW.x_Thread_local) && scw & (SCW.xauto | SCW.xregister | SCW.xtypedef))\n                 {\n-                    error(\"conflicting storage class\");\n+                    error(\"multiple storage classes in declaration specifiers\");\n+                    scw &= ~scwx;\n+                }\n+                if (level == LVL.local &&\n+                    scw & (SCW.x_Thread_local) && scw & (SCW.xinline | SCW.x_Noreturn))\n+                {\n+                    error(\"`inline` and `_Noreturn` function specifiers not allowed for `_Thread_local`\");\n                     scw &= ~scwx;\n                 }\n                 if (level & (LVL.parameter | LVL.prototype) &&\n@@ -2964,7 +2972,8 @@ final class CParser(AST) : Parser!AST\n                 cparseGnuAttributes(specifier);\n             if (specifier.mod & MOD.xconst)\n                 t = toConst(t);\n-            auto param = new AST.Parameter(STC.parameter, t, id, null, null);\n+            auto param = new AST.Parameter(specifiersToSTC(LVL.parameter, specifier),\n+                                           t, id, null, null);\n             parameters.push(param);\n             if (token.value == TOK.rightParenthesis)\n                 break;\n@@ -4630,6 +4639,15 @@ final class CParser(AST) : Parser!AST\n                     stc = AST.STC.extern_ | AST.STC.gshared;\n                 else if (specifier.scw & SCW.xstatic)\n                     stc = AST.STC.gshared;\n+                else if (specifier.scw & SCW.xregister)\n+                    stc = AST.STC.register;\n+            }\n+            else if (level == LVL.parameter)\n+            {\n+                if (specifier.scw & SCW.xregister)\n+                    stc = AST.STC.register | AST.STC.parameter;\n+                else\n+                    stc = AST.STC.parameter;\n             }\n             else if (level == LVL.member)\n             {\n@@ -5138,6 +5156,7 @@ final class CParser(AST) : Parser!AST\n         if (!defines || defines.length < 10)  // minimum length of a #define line\n             return;\n         const length = defines.length;\n+        defines.writeByte(0);\n         auto slice = defines.peekChars()[0 .. length];\n         resetDefineLines(slice);                // reset lexer\n \n@@ -5234,12 +5253,15 @@ final class CParser(AST) : Parser!AST\n                 }\n                 skipToNextLine();\n             }\n-            else if (n.value != TOK.endOfLine)\n+            else\n             {\n-                skipToNextLine();\n+                scan(&n);\n+                if (n.value != TOK.endOfLine)\n+                {\n+                    skipToNextLine();\n+                }\n             }\n             nextDefineLine();\n-            assert(p - slice.ptr <= length);\n         }\n     }\n "}, {"sha": "ffb33d379dbdf0fc7e7e07aa3c0c752ffe981623", "filename": "gcc/d/dmd/declaration.d", "status": "modified", "additions": 39, "deletions": 24, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fdeclaration.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fdeclaration.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdeclaration.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -656,23 +656,46 @@ extern (C++) final class TupleDeclaration : Declaration\n     override bool needThis()\n     {\n         //printf(\"TupleDeclaration::needThis(%s)\\n\", toChars());\n-        for (size_t i = 0; i < objects.dim; i++)\n+        return isexp ? foreachVar((s) { return s.needThis(); }) != 0 : false;\n+    }\n+\n+    /***********************************************************\n+     * Calls dg(Dsymbol) for each Dsymbol, which should be a VarDeclaration\n+     * inside VarExp (isexp == true).\n+     * Params:\n+     *    dg = delegate to call for each Dsymbol\n+     */\n+    extern (D) void foreachVar(scope void delegate(Dsymbol) dg)\n+    {\n+        assert(isexp);\n+        foreach (o; *objects)\n         {\n-            RootObject o = (*objects)[i];\n-            if (o.dyncast() == DYNCAST.expression)\n-            {\n-                Expression e = cast(Expression)o;\n-                if (DsymbolExp ve = e.isDsymbolExp())\n-                {\n-                    Declaration d = ve.s.isDeclaration();\n-                    if (d && d.needThis())\n-                    {\n-                        return true;\n-                    }\n-                }\n-            }\n+            if (auto e = o.isExpression())\n+                if (auto ve = e.isVarExp())\n+                    dg(ve.var);\n         }\n-        return false;\n+    }\n+\n+    /***********************************************************\n+     * Calls dg(Dsymbol) for each Dsymbol, which should be a VarDeclaration\n+     * inside VarExp (isexp == true).\n+     * If dg returns !=0, stops and returns that value else returns 0.\n+     * Params:\n+     *    dg = delegate to call for each Dsymbol\n+     * Returns:\n+     *    last value returned by dg()\n+     */\n+    extern (D) int foreachVar(scope int delegate(Dsymbol) dg)\n+    {\n+        assert(isexp);\n+        foreach (o; *objects)\n+        {\n+            if (auto e = o.isExpression())\n+                if (auto ve = e.isVarExp())\n+                    if(auto ret = dg(ve.var))\n+                        return ret;\n+        }\n+        return 0;\n     }\n \n     override inout(TupleDeclaration) isTupleDeclaration() inout\n@@ -1142,15 +1165,7 @@ extern (C++) class VarDeclaration : Declaration\n             // If this variable was really a tuple, set the offsets for the tuple fields\n             TupleDeclaration v2 = aliassym.isTupleDeclaration();\n             assert(v2);\n-            for (size_t i = 0; i < v2.objects.dim; i++)\n-            {\n-                RootObject o = (*v2.objects)[i];\n-                assert(o.dyncast() == DYNCAST.expression);\n-                Expression e = cast(Expression)o;\n-                assert(e.op == EXP.dSymbol);\n-                DsymbolExp se = e.isDsymbolExp();\n-                se.s.setFieldOffset(ad, fieldState, isunion);\n-            }\n+            v2.foreachVar((s) { s.setFieldOffset(ad, fieldState, isunion); });\n             return;\n         }\n "}, {"sha": "5841a252454597cb532800c8500597a58d1bd79a", "filename": "gcc/d/dmd/dinterpret.d", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fdinterpret.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fdinterpret.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdinterpret.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -2306,16 +2306,12 @@ public:\n                 result = null;\n \n                 // Reserve stack space for all tuple members\n-                if (!td.objects)\n-                    return;\n-                foreach (o; *td.objects)\n+                td.foreachVar((s)\n                 {\n-                    Expression ex = isExpression(o);\n-                    DsymbolExp ds = ex ? ex.isDsymbolExp() : null;\n-                    VarDeclaration v2 = ds ? ds.s.isVarDeclaration() : null;\n+                    VarDeclaration v2 = s.isVarDeclaration();\n                     assert(v2);\n                     if (v2.isDataseg() && !v2.isCTFE())\n-                        continue;\n+                        return 0;\n \n                     ctfeGlobals.stack.push(v2);\n                     if (v2._init)\n@@ -2325,7 +2321,7 @@ public:\n                         {\n                             einit = interpretRegion(ie.exp, istate, goal);\n                             if (exceptionOrCant(einit))\n-                                return;\n+                                return 1;\n                         }\n                         else if (v2._init.isVoidInitializer())\n                         {\n@@ -2335,11 +2331,12 @@ public:\n                         {\n                             e.error(\"declaration `%s` is not yet implemented in CTFE\", e.toChars());\n                             result = CTFEExp.cantexp;\n-                            return;\n+                            return 1;\n                         }\n                         setValue(v2, einit);\n                     }\n-                }\n+                    return 0;\n+                });\n                 return;\n             }\n             if (v.isStatic())"}, {"sha": "25794e2c21d1985e9bfa76411dfcb581a5843c63", "filename": "gcc/d/dmd/dmangle.d", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fdmangle.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fdmangle.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdmangle.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -371,10 +371,20 @@ public:\n         if (ta.isnogc)\n             buf.writestring(\"Ni\");\n \n-        if (ta.isreturn && !ta.isreturninferred)\n-            buf.writestring(\"Nj\");\n-        else if (ta.isScopeQual && !ta.isscopeinferred)\n-            buf.writestring(\"Nl\");\n+        // `return scope` must be in that order\n+        if (ta.isreturnscope && !ta.isreturninferred)\n+        {\n+            buf.writestring(\"NjNl\");\n+        }\n+        else\n+        {\n+            // when return ref, the order is `scope return`\n+            if (ta.isScopeQual && !ta.isscopeinferred)\n+                buf.writestring(\"Nl\");\n+\n+            if (ta.isreturn && !ta.isreturninferred)\n+                buf.writestring(\"Nj\");\n+        }\n \n         if (ta.islive)\n             buf.writestring(\"Nm\");"}, {"sha": "11a51f10e99f39108e61abaec5785adc75205c1a", "filename": "gcc/d/dmd/dsymbolsem.d", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fdsymbolsem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fdsymbolsem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdsymbolsem.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -647,7 +647,7 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n                 else\n                     ti = dsym._init ? dsym._init.syntaxCopy() : null;\n \n-                StorageClass storage_class = STC.temp | STC.local | dsym.storage_class;\n+                StorageClass storage_class = STC.temp | dsym.storage_class;\n                 if ((dsym.storage_class & STC.parameter) && (arg.storageClass & STC.parameter))\n                     storage_class |= arg.storageClass;\n                 auto v = new VarDeclaration(dsym.loc, arg.type, id, ti, storage_class);\n@@ -656,15 +656,7 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n \n                 v.dsymbolSemantic(sc);\n \n-                if (sc.scopesym)\n-                {\n-                    //printf(\"adding %s to %s\\n\", v.toChars(), sc.scopesym.toChars());\n-                    if (sc.scopesym.members)\n-                        // Note this prevents using foreach() over members, because the limits can change\n-                        sc.scopesym.members.push(v);\n-                }\n-\n-                Expression e = new DsymbolExp(dsym.loc, v);\n+                Expression e = new VarExp(dsym.loc, v);\n                 (*exps)[i] = e;\n             }\n             auto v2 = new TupleDeclaration(dsym.loc, dsym.ident, exps);\n@@ -728,6 +720,11 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n             else if (!dsym.type.hasPointers())\n             {\n                 dsym.storage_class &= ~STC.scope_;     // silently ignore; may occur in generic code\n+                // https://issues.dlang.org/show_bug.cgi?id=23168\n+                if (dsym.storage_class & STC.returnScope)\n+                {\n+                    dsym.storage_class &= ~(STC.return_ | STC.returnScope);\n+                }\n             }\n         }\n \n@@ -3208,10 +3205,19 @@ private extern(C++) final class DsymbolSemanticVisitor : Visitor\n                 sc.stc |= STC.scope_;\n \n             // If 'this' has no pointers, remove 'scope' as it has no meaning\n+            // Note: this is already covered by semantic of `VarDeclaration` and `TypeFunction`,\n+            // but existing code relies on `hasPointers()` being called here to resolve forward references:\n+            // https://github.com/dlang/dmd/pull/14232#issuecomment-1162906573\n             if (sc.stc & STC.scope_ && ad && ad.isStructDeclaration() && !ad.type.hasPointers())\n             {\n                 sc.stc &= ~STC.scope_;\n                 tf.isScopeQual = false;\n+                if (tf.isreturnscope)\n+                {\n+                    sc.stc &= ~(STC.return_ | STC.returnScope);\n+                    tf.isreturn = false;\n+                    tf.isreturnscope = false;\n+                }\n             }\n \n             sc.linkage = funcdecl._linkage;\n@@ -6840,7 +6846,12 @@ bool determineFields(AggregateDeclaration ad)\n             return 1;\n \n         if (v.aliassym)\n-            return 0;   // If this variable was really a tuple, skip it.\n+        {\n+            // If this variable was really a tuple, process each element.\n+            if (auto tup = v.aliassym.isTupleDeclaration())\n+                return tup.foreachVar(tv => tv.apply(&func, ad));\n+            return 0;\n+        }\n \n         if (v.storage_class & (STC.static_ | STC.extern_ | STC.tls | STC.gshared | STC.manifest | STC.ctfe | STC.templateparameter))\n             return 0;"}, {"sha": "c570068f7d6edc410243fab73e858214d7b230fe", "filename": "gcc/d/dmd/dtoh.d", "status": "modified", "additions": 65, "deletions": 63, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fdtoh.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fdtoh.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fdtoh.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -873,7 +873,11 @@ public:\n         // Tuple field are expanded into multiple VarDeclarations\n         // (we'll visit them later)\n         if (vd.type && vd.type.isTypeTuple())\n+        {\n+            assert(vd.aliassym);\n+            vd.toAlias().accept(this);\n             return;\n+        }\n \n         if (vd.originalType && vd.type == AST.Type.tsize_t)\n             origType = vd.originalType;\n@@ -1263,41 +1267,38 @@ public:\n             size_t varCount;\n             bool first = true;\n             buf.level++;\n-            foreach (m; *sd.members)\n+            foreach (vd; sd.fields)\n             {\n-                if (auto vd = m.isVarDeclaration())\n-                {\n-                    if (!memberField(vd))\n-                        continue;\n-                    varCount++;\n+                if (!memberField(vd) || vd.overlapped)\n+                    continue;\n+                varCount++;\n \n-                    if (!vd._init && !vd.type.isTypeBasic() && !vd.type.isTypePointer && !vd.type.isTypeStruct &&\n-                        !vd.type.isTypeClass && !vd.type.isTypeDArray && !vd.type.isTypeSArray)\n-                    {\n-                        continue;\n-                    }\n-                    if (vd._init && vd._init.isVoidInitializer())\n-                        continue;\n+                if (!vd._init && !vd.type.isTypeBasic() && !vd.type.isTypePointer && !vd.type.isTypeStruct &&\n+                    !vd.type.isTypeClass && !vd.type.isTypeDArray && !vd.type.isTypeSArray)\n+                {\n+                    continue;\n+                }\n+                if (vd._init && vd._init.isVoidInitializer())\n+                    continue;\n \n-                    if (first)\n-                    {\n-                        buf.writestringln(\" :\");\n-                        first = false;\n-                    }\n-                    else\n-                    {\n-                        buf.writestringln(\",\");\n-                    }\n-                    writeIdentifier(vd, true);\n-                    buf.writeByte('(');\n+                if (first)\n+                {\n+                    buf.writestringln(\" :\");\n+                    first = false;\n+                }\n+                else\n+                {\n+                    buf.writestringln(\",\");\n+                }\n+                writeIdentifier(vd, true);\n+                buf.writeByte('(');\n \n-                    if (vd._init)\n-                    {\n-                        auto e = AST.initializerToExpression(vd._init);\n-                        printExpressionFor(vd.type, e, true);\n-                    }\n-                    buf.printf(\")\");\n+                if (vd._init)\n+                {\n+                    auto e = AST.initializerToExpression(vd._init);\n+                    printExpressionFor(vd.type, e, true);\n                 }\n+                buf.printf(\")\");\n             }\n             buf.level--;\n             buf.writenl();\n@@ -1308,49 +1309,43 @@ public:\n             {\n                 buf.printf(\"%s(\", sd.ident.toChars());\n                 first = true;\n-                foreach (m; *sd.members)\n+                foreach (vd; sd.fields)\n                 {\n-                    if (auto vd = m.isVarDeclaration())\n+                    if (!memberField(vd) || vd.overlapped)\n+                        continue;\n+                    if (!first)\n+                        buf.writestring(\", \");\n+                    assert(vd.type);\n+                    assert(vd.ident);\n+                    typeToBuffer(vd.type, vd, true);\n+                    // Don't print default value for first parameter to not clash\n+                    // with the default ctor defined above\n+                    if (!first)\n                     {\n-                        if (!memberField(vd))\n-                            continue;\n-                        if (!first)\n-                            buf.writestring(\", \");\n-                        assert(vd.type);\n-                        assert(vd.ident);\n-                        typeToBuffer(vd.type, vd, true);\n-                        // Don't print default value for first parameter to not clash\n-                        // with the default ctor defined above\n-                        if (!first)\n-                        {\n-                            buf.writestring(\" = \");\n-                            printExpressionFor(vd.type, findDefaultInitializer(vd));\n-                        }\n-                        first = false;\n+                        buf.writestring(\" = \");\n+                        printExpressionFor(vd.type, findDefaultInitializer(vd));\n                     }\n+                    first = false;\n                 }\n                 buf.writestring(\") :\");\n                 buf.level++;\n                 buf.writenl();\n \n                 first = true;\n-                foreach (m; *sd.members)\n+                foreach (vd; sd.fields)\n                 {\n-                    if (auto vd = m.isVarDeclaration())\n-                    {\n-                        if (!memberField(vd))\n-                            continue;\n-\n-                        if (first)\n-                            first = false;\n-                        else\n-                            buf.writestringln(\",\");\n-\n-                        writeIdentifier(vd, true);\n-                        buf.writeByte('(');\n-                        writeIdentifier(vd, true);\n-                        buf.writeByte(')');\n-                    }\n+                    if (!memberField(vd) || vd.overlapped)\n+                        continue;\n+\n+                    if (first)\n+                        first = false;\n+                    else\n+                        buf.writestringln(\",\");\n+\n+                    writeIdentifier(vd, true);\n+                    buf.writeByte('(');\n+                    writeIdentifier(vd, true);\n+                    buf.writeByte(')');\n                 }\n                 buf.writenl();\n                 buf.writestringln(\"{}\");\n@@ -1663,6 +1658,13 @@ public:\n         assert(false, \"This node type should be handled in the EnumDeclaration\");\n     }\n \n+    override void visit(AST.TupleDeclaration tup)\n+    {\n+        debug (Debug_DtoH) mixin(traceVisit!tup);\n+\n+        tup.foreachVar((s) { s.accept(this); });\n+    }\n+\n     /**\n      * Prints a member/parameter/variable declaration into `buf`.\n      *"}, {"sha": "397a41b33b7266e621fcafc620ef7aa967588f2f", "filename": "gcc/d/dmd/expression.d", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fexpression.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fexpression.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpression.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -348,14 +348,16 @@ int expandAliasThisTuples(Expressions* exps, size_t starti = 0)\n         if (TupleDeclaration td = exp.isAliasThisTuple)\n         {\n             exps.remove(u);\n-            foreach (i, o; *td.objects)\n+            size_t i;\n+            td.foreachVar((s)\n             {\n-                auto d = o.isExpression().isDsymbolExp().s.isDeclaration();\n+                auto d = s.isDeclaration();\n                 auto e = new DotVarExp(exp.loc, exp, d);\n                 assert(d.type);\n                 e.type = d.type;\n                 exps.insert(u + i, e);\n-            }\n+                ++i;\n+            });\n             version (none)\n             {\n                 printf(\"expansion ->\\n\");"}, {"sha": "99e003b1856ed1d4ac189b07a86337b750972c33", "filename": "gcc/d/dmd/expressionsem.d", "status": "modified", "additions": 81, "deletions": 23, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fexpressionsem.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fexpressionsem.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fexpressionsem.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -6004,10 +6004,10 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n             return setError();\n         se = se.toUTF8(sc);\n \n-        auto namez = se.toStringz().ptr;\n+        auto namez = se.toStringz();\n         if (!global.filePath)\n         {\n-            e.error(\"need `-J` switch to import text file `%s`\", namez);\n+            e.error(\"need `-J` switch to import text file `%s`\", namez.ptr);\n             return setError();\n         }\n \n@@ -6036,8 +6036,8 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n             return setError();\n         }\n \n-        auto name = FileName.searchPath(global.filePath, namez, false);\n-        if (!name)\n+        auto resolvedNamez = FileName.searchPath(global.filePath, namez, false);\n+        if (!resolvedNamez)\n         {\n             e.error(\"file `%s` cannot be found or not in a path specified with `-J`\", se.toChars());\n             e.errorSupplemental(\"Path(s) searched (as provided by `-J`):\");\n@@ -6051,11 +6051,11 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n             return setError();\n         }\n \n-        sc._module.contentImportedFiles.push(name);\n+        sc._module.contentImportedFiles.push(resolvedNamez.ptr);\n         if (global.params.verbose)\n         {\n             const slice = se.peekString();\n-            message(\"file      %.*s\\t(%s)\", cast(int)slice.length, slice.ptr, name);\n+            message(\"file      %.*s\\t(%s)\", cast(int)slice.length, slice.ptr, resolvedNamez.ptr);\n         }\n         if (global.params.moduleDeps.buffer !is null)\n         {\n@@ -6072,27 +6072,27 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n                 ob.writestring(\"string : \");\n             ob.write(se.peekString());\n             ob.writestring(\" (\");\n-            escapePath(ob, name);\n+            escapePath(ob, resolvedNamez.ptr);\n             ob.writestring(\")\");\n             ob.writenl();\n         }\n         if (global.params.makeDeps.doOutput)\n         {\n-            global.params.makeDeps.files.push(name);\n+            global.params.makeDeps.files.push(resolvedNamez.ptr);\n         }\n \n         {\n-            auto fileName = FileName(name.toDString);\n+            auto fileName = FileName(resolvedNamez);\n             if (auto fmResult = global.fileManager.lookup(fileName))\n             {\n                 se = new StringExp(e.loc, fmResult);\n             }\n             else\n             {\n-                auto readResult = File.read(name.toDString);\n+                auto readResult = File.read(resolvedNamez);\n                 if (!readResult.success)\n                 {\n-                    e.error(\"cannot read file `%s`\", name);\n+                    e.error(\"cannot read file `%s`\", resolvedNamez.ptr);\n                     return setError();\n                 }\n                 else\n@@ -6963,18 +6963,8 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n             exp.error(\"cannot take address of `%s`\", exp.e1.toChars());\n             return setError();\n         }\n-        if (auto dve = exp.e1.isDotVarExp())\n-        {\n-            /* https://issues.dlang.org/show_bug.cgi?id=22749\n-             * Error about taking address of any bit-field, regardless of\n-             * whether SCOPE.Cfile is set.\n-             */\n-            if (auto bf = dve.var.isBitFieldDeclaration())\n-            {\n-                exp.error(\"cannot take address of bit-field `%s`\", bf.toChars());\n-                return setError();\n-            }\n-        }\n+        if (!checkAddressable(exp, sc))\n+            return setError();\n \n         bool hasOverloads;\n         if (auto f = isFuncAddress(exp, &hasOverloads))\n@@ -8323,6 +8313,11 @@ private extern (C++) final class ExpressionSemanticVisitor : Visitor\n             t1b = t1b.castMod(tv1.mod);\n             exp.e1.type = t1b;\n         }\n+        if (t1b.ty == Tsarray || t1b.ty == Tarray)\n+        {\n+            if (!checkAddressable(exp, sc))\n+                return setError();\n+        }\n \n         /* Run semantic on e2\n          */\n@@ -13152,6 +13147,69 @@ bool checkAddressVar(Scope* sc, Expression exp, VarDeclaration v)\n     return true;\n }\n \n+/**************************************\n+ * This check ensures that the object in `exp` can have its address taken, or\n+ * issue a diagnostic error.\n+ * Params:\n+ *      e = expression to check\n+ *      sc = context\n+ * Returns:\n+ *      true if the expression is addressable\n+ */\n+bool checkAddressable(Expression e, Scope* sc)\n+{\n+    Expression ex = e;\n+    while (true)\n+    {\n+        switch (ex.op)\n+        {\n+            case EXP.dotVariable:\n+                // https://issues.dlang.org/show_bug.cgi?id=22749\n+                // Error about taking address of any bit-field, regardless of\n+                // whether SCOPE.Cfile is set.\n+                if (auto bf = ex.isDotVarExp().var.isBitFieldDeclaration())\n+                {\n+                    e.error(\"cannot take address of bit-field `%s`\", bf.toChars());\n+                    return false;\n+                }\n+                goto case EXP.cast_;\n+\n+            case EXP.index:\n+                ex = ex.isBinExp().e1;\n+                continue;\n+\n+            case EXP.address:\n+            case EXP.array:\n+            case EXP.cast_:\n+                ex = ex.isUnaExp().e1;\n+                continue;\n+\n+            case EXP.variable:\n+                if (sc.flags & SCOPE.Cfile)\n+                {\n+                    // C11 6.5.3.2: A variable that has its address taken cannot be\n+                    // stored in a register.\n+                    // C11 6.3.2.1: An array that has its address computed with `[]`\n+                    // or cast to an lvalue pointer cannot be stored in a register.\n+                    if (ex.isVarExp().var.storage_class & STC.register)\n+                    {\n+                        if (e.isIndexExp())\n+                            e.error(\"cannot index through register variable `%s`\", ex.toChars());\n+                        else\n+                            e.error(\"cannot take address of register variable `%s`\", ex.toChars());\n+                        return false;\n+                    }\n+                }\n+                break;\n+\n+            default:\n+                break;\n+        }\n+        break;\n+    }\n+    return true;\n+}\n+\n \n /*******************************\n  * Checks the attributes of a function."}, {"sha": "63281b5760cbdcacf6158faf541393fe171515de", "filename": "gcc/d/dmd/foreachvar.d", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fforeachvar.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fforeachvar.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fforeachvar.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -75,19 +75,7 @@ void foreachVar(Expression e, void delegate(VarDeclaration) dgVar)\n             if (!v)\n                 return;\n             if (TupleDeclaration td = v.toAlias().isTupleDeclaration())\n-            {\n-                if (!td.objects)\n-                    return;\n-                foreach (o; *td.objects)\n-                {\n-                    Expression ex = isExpression(o);\n-                    DsymbolExp s = ex ? ex.isDsymbolExp() : null;\n-                    assert(s);\n-                    VarDeclaration v2 = s.s.isVarDeclaration();\n-                    assert(v2);\n-                    dgVar(v2);\n-                }\n-            }\n+                td.foreachVar((s) { dgVar(s.isVarDeclaration()); });\n             else\n                 dgVar(v);\n             Dsymbol s = v.toAlias();"}, {"sha": "afec5ef1ead6f75c6b2f32bd48fa80593565e13f", "filename": "gcc/d/dmd/importc.d", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fimportc.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fimportc.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fimportc.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -81,10 +81,14 @@ Expression arrayFuncConv(Expression e, Scope* sc)\n     auto t = e.type.toBasetype();\n     if (auto ta = t.isTypeDArray())\n     {\n+        if (!checkAddressable(e, sc))\n+            return ErrorExp.get();\n         e = e.castTo(sc, ta.next.pointerTo());\n     }\n     else if (auto ts = t.isTypeSArray())\n     {\n+        if (!checkAddressable(e, sc))\n+            return ErrorExp.get();\n         e = e.castTo(sc, ts.next.pointerTo());\n     }\n     else if (t.isTypeFunction())"}, {"sha": "5ff73c983f098faf74efec4a27e1e4465208b26e", "filename": "gcc/d/dmd/ob.d", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fob.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fob.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fob.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -1407,16 +1407,7 @@ void genKill(ref ObState obstate, ObNode* ob)\n                     }\n                     else if (auto td = s.isTupleDeclaration())\n                     {\n-                        foreach (o; *td.objects)\n-                        {\n-                            if (auto eo = o.isExpression())\n-                            {\n-                                if (auto se = eo.isDsymbolExp())\n-                                {\n-                                    Dsymbol_visit(se.s);\n-                                }\n-                            }\n-                        }\n+                        td.foreachVar(&Dsymbol_visit);\n                     }\n                 }\n \n@@ -2107,16 +2098,7 @@ void checkObErrors(ref ObState obstate)\n                     }\n                     else if (auto td = s.isTupleDeclaration())\n                     {\n-                        foreach (o; *td.objects)\n-                        {\n-                            if (auto eo = o.isExpression())\n-                            {\n-                                if (auto se = eo.isDsymbolExp())\n-                                {\n-                                    Dsymbol_visit(se.s);\n-                                }\n-                            }\n-                        }\n+                        td.foreachVar(&Dsymbol_visit);\n                     }\n                 }\n "}, {"sha": "4e3fd533c18e9503d4a2af4dc68fb25c3535f896", "filename": "gcc/d/dmd/parse.d", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fparse.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fparse.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fparse.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -5877,7 +5877,8 @@ LagainStc:\n             {\n                 if (isDeclaration(&token, NeedDeclaratorId.mustIfDstyle, TOK.reserved, null))\n                     goto Ldeclaration;\n-                if (peekNext() == TOK.leftParenthesis)\n+                const tv = peekNext();\n+                if (tv == TOK.leftParenthesis)\n                 {\n                     // mixin(string)\n                     AST.Expression e = parseAssignExp();\n@@ -5893,6 +5894,14 @@ LagainStc:\n                     }\n                     break;\n                 }\n+                else if (tv == TOK.template_)\n+                {\n+                    // mixin template\n+                    nextToken();\n+                    AST.Dsymbol d = parseTemplateDeclaration(true);\n+                    s = new AST.ExpStatement(loc, d);\n+                    break;\n+                }\n                 AST.Dsymbol d = parseMixin();\n                 s = new AST.ExpStatement(loc, d);\n                 if (flags & ParseStatementFlags.scope_)"}, {"sha": "226141d4608e53b5e29823c808b55a68bed2cd6a", "filename": "gcc/d/dmd/root/filename.d", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Froot%2Ffilename.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Froot%2Ffilename.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Froot%2Ffilename.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -734,16 +734,15 @@ nothrow:\n      * Returns:\n      *  index of the first reserved character in path if found, size_t.max otherwise\n      */\n-    extern (D) static size_t findReservedChar(const(char)* name) pure @nogc\n+    extern (D) static size_t findReservedChar(const(char)[] name) pure @nogc @safe\n     {\n         version (Windows)\n         {\n-            size_t idx = 0;\n             // According to https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\n             // the following characters are not allowed in path: < > : \" | ? *\n-            for (const(char)* p = name; *p; p++, idx++)\n+            foreach (idx; 0 .. name.length)\n             {\n-                char c = *p;\n+                char c = name[idx];\n                 if (c == '<' || c == '>' || c == ':' || c == '\"' || c == '|' || c == '?' || c == '*')\n                 {\n                     return idx;\n@@ -784,21 +783,21 @@ nothrow:\n      * Returns:\n      *  true if path contains '..' reference to parent directory\n      */\n-    extern (D) static bool refersToParentDir(const(char)* name) pure @nogc\n+    extern (D) static bool refersToParentDir(const(char)[] name) pure @nogc @safe\n     {\n-        if (name[0] == '.' && name[1] == '.' && (!name[2] || isDirSeparator(name[2])))\n+        size_t s = 0;\n+        foreach (i; 0 .. name.length)\n         {\n-            return true;\n-        }\n-\n-        for (const(char)* p = name; *p; p++)\n-        {\n-            char c = *p;\n-            if (isDirSeparator(c) && p[1] == '.' && p[2] == '.' && (!p[3] || isDirSeparator(p[3])))\n+            if (isDirSeparator(name[i]))\n             {\n-                return true;\n+                if (name[s..i] == \"..\")\n+                    return true;\n+                s = i + 1;\n             }\n         }\n+        if (name[s..$] == \"..\")\n+            return true;\n+\n         return false;\n     }\n     unittest"}, {"sha": "bf18a2140fb188f0aa3d8489cdfd0e07c8d2022d", "filename": "gcc/d/dmd/semantic2.d", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fsemantic2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fsemantic2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fsemantic2.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -677,6 +677,11 @@ private extern(C++) final class Semantic2Visitor : Visitor\n     {\n         visit(cast(AggregateDeclaration) cd);\n     }\n+\n+    override void visit(TupleDeclaration td)\n+    {\n+        td.foreachVar((s) { s.accept(this); });\n+    }\n }\n \n /**"}, {"sha": "c5d7667fefc5e3bafaa120ef61567e9b1cc78088", "filename": "gcc/d/dmd/semantic3.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fsemantic3.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Fdmd%2Fsemantic3.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdmd%2Fsemantic3.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -483,7 +483,7 @@ private extern(C++) final class Semantic3Visitor : Visitor\n                     if ((funcdecl.flags & FUNCFLAG.inferScope) && !(fparam.storageClass & STC.scope_))\n                         stc |= STC.maybescope;\n \n-                    stc |= fparam.storageClass & (STC.IOR | STC.return_ | STC.scope_ | STC.lazy_ | STC.final_ | STC.TYPECTOR | STC.nodtor | STC.returnScope);\n+                    stc |= fparam.storageClass & (STC.IOR | STC.return_ | STC.scope_ | STC.lazy_ | STC.final_ | STC.TYPECTOR | STC.nodtor | STC.returnScope | STC.register);\n                     v.storage_class = stc;\n                     v.dsymbolSemantic(sc2);\n                     if (!sc2.insert(v))"}, {"sha": "38cc7f5111c0f1b74f24bf1730f4ce8a3286bac7", "filename": "gcc/d/types.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Fd%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Ftypes.cc?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -392,10 +392,10 @@ layout_aggregate_members (Dsymbols *members, tree context, bool inherited_p)\n \t\t  RootObject *ro = (*td->objects)[j];\n \t\t  gcc_assert (ro->dyncast () == DYNCAST_EXPRESSION);\n \t\t  Expression *e = (Expression *) ro;\n-\t\t  gcc_assert (e->op == EXP::dSymbol);\n-\t\t  DsymbolExp *se = e->isDsymbolExp ();\n+\t\t  gcc_assert (e->op == EXP::variable);\n+\t\t  VarExp *ve = e->isVarExp ();\n \n-\t\t  tmembers.push (se->s);\n+\t\t  tmembers.push (ve->var);\n \t\t}\n \n \t      fields += layout_aggregate_members (&tmembers, context,"}, {"sha": "a4c6ce4ce2caeb6a3422bc2effdaaa46e39f3232", "filename": "gcc/testsuite/gdc.test/compilable/dtoh_AnonDeclaration.d", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdtoh_AnonDeclaration.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdtoh_AnonDeclaration.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdtoh_AnonDeclaration.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -61,9 +61,21 @@ struct S final\n         int32_t innerPrivate;\n         int32_t innerBar;\n     };\n-    S()\n+    S() :\n+        y(),\n+        z(),\n+        outerPrivate(),\n+        innerPrivate(),\n+        innerBar()\n     {\n     }\n+    S(int32_t y, double z = NAN, int32_t outerPrivate = 0, int32_t innerPrivate = 0, int32_t innerBar = 0) :\n+        y(y),\n+        z(z),\n+        outerPrivate(outerPrivate),\n+        innerPrivate(innerPrivate),\n+        innerBar(innerBar)\n+        {}\n };\n \n extern void foo();"}, {"sha": "2e36c7d02be86feae5ba01880eaa99b824ce510c", "filename": "gcc/testsuite/gdc.test/compilable/dtoh_StructDeclaration.d", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdtoh_StructDeclaration.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdtoh_StructDeclaration.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdtoh_StructDeclaration.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -173,12 +173,16 @@ struct A final\n \n     A() :\n         a(),\n-        s()\n+        s(),\n+        x(),\n+        y()\n     {\n     }\n-    A(int32_t a, S s = S()) :\n+    A(int32_t a, S s = S(), int32_t x = 0, int32_t y = 0) :\n         a(a),\n-        s(s)\n+        s(s),\n+        x(x),\n+        y(y)\n         {}\n };\n \n@@ -196,11 +200,13 @@ private:\n     char smallarray[1$?:32=u|64=LLU$];\n public:\n     Array() :\n-        length()\n+        length(),\n+        data()\n     {\n     }\n-    Array(uint32_t length) :\n-        length(length)\n+    Array(uint32_t length, _d_dynamicArray< char > data = {}) :\n+        length(length),\n+        data(data)\n         {}\n };\n "}, {"sha": "1ed63180dda709fb0aeced860c0d04807b39db69", "filename": "gcc/testsuite/gdc.test/compilable/dtoh_TemplateDeclaration.d", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdtoh_TemplateDeclaration.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdtoh_TemplateDeclaration.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdtoh_TemplateDeclaration.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -219,9 +219,13 @@ struct ImportedBuffer final\n {\n     typedef ActualBuffer Buffer;\n     ActualBuffer buffer2;\n-    ImportedBuffer()\n+    ImportedBuffer() :\n+        buffer2()\n     {\n     }\n+    ImportedBuffer(ActualBuffer buffer2) :\n+        buffer2(buffer2)\n+        {}\n };\n ---\n */"}, {"sha": "fda9efa5d3435753533d09a07fc34e4011bec7ef", "filename": "gcc/testsuite/gdc.test/compilable/dtoh_mangling.d", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdtoh_mangling.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdtoh_mangling.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdtoh_mangling.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -64,9 +64,15 @@ struct HasMangleMember final\n     int32_t someAttrC;\n     int32_t someAttrCpp;\n     void hasDefaultVar(int32_t i = someAttrC);\n-    HasMangleMember()\n+    HasMangleMember() :\n+        someAttrC(),\n+        someAttrCpp()\n     {\n     }\n+    HasMangleMember(int32_t someAttrC, int32_t someAttrCpp = 0) :\n+        someAttrC(someAttrC),\n+        someAttrCpp(someAttrCpp)\n+        {}\n };\n \n extern \"C\" void hasDefaultVar(int32_t i = someVarC);"}, {"sha": "dc07c7b8f8b7e24a59bea05d7cef0cd6975b8b43", "filename": "gcc/testsuite/gdc.test/compilable/dtoh_protection.d", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdtoh_protection.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdtoh_protection.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Fdtoh_protection.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -50,9 +50,21 @@ protected:\n private:\n     int32_t e;\n public:\n-    S1()\n+    S1() :\n+        a(),\n+        b(),\n+        c(),\n+        d(),\n+        e()\n     {\n     }\n+    S1(int32_t a, int32_t b = 0, int32_t c = 0, int32_t d = 0, int32_t e = 0) :\n+        a(a),\n+        b(b),\n+        c(c),\n+        d(d),\n+        e(e)\n+        {}\n };\n \n class S2 final\n@@ -102,10 +114,12 @@ public:\n     public:\n         int32_t publicInner;\n         PublicInnerStruct() :\n+            privateInner(),\n             publicInner()\n         {\n         }\n-        PublicInnerStruct(int32_t publicInner) :\n+        PublicInnerStruct(int32_t privateInner, int32_t publicInner = 0) :\n+            privateInner(privateInner),\n             publicInner(publicInner)\n             {}\n     };\n@@ -118,10 +132,12 @@ private:\n     public:\n         int32_t publicInner;\n         PrivateInnerClass() :\n+            privateInner(),\n             publicInner()\n         {\n         }\n-        PrivateInnerClass(int32_t publicInner) :\n+        PrivateInnerClass(int32_t privateInner, int32_t publicInner = 0) :\n+            privateInner(privateInner),\n             publicInner(publicInner)\n             {}\n     };\n@@ -142,9 +158,13 @@ private:\n \n public:\n     typedef PrivateInnerEnum PublicAlias;\n-    Outer()\n+    Outer() :\n+        privateOuter()\n     {\n     }\n+    Outer(int32_t privateOuter) :\n+        privateOuter(privateOuter)\n+        {}\n };\n ---\n */"}, {"sha": "61a4ff3b6dc6595ae3c2ed149582b600a287f3dc", "filename": "gcc/testsuite/gdc.test/compilable/test23168.d", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23168.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23168.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23168.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -0,0 +1,30 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23168\n+// Issue 23168 - [DIP1000] return scope wrongly rewritten for structs with no indirections\n+\n+@safe:\n+struct Ptr\n+{\n+    int* fun() return scope { return null; }\n+}\n+\n+int* funf(ref return scope Ptr p) { return null; }\n+\n+int* use()\n+{\n+    Ptr ptr;\n+    return ptr.fun;\n+    return funf(ptr);\n+}\n+\n+// Prevent forward reference 'regression'\n+// See https://github.com/dlang/dmd/pull/14232#issuecomment-1162906573\n+struct S\n+{\n+    void f() scope {}\n+    alias x = _get_value;\n+\n+    static if (true)\n+        int _get_value() {return 3;}\n+    else\n+        int _get_value() {return 4;}\n+}"}, {"sha": "6237661a923ae904b80fdac66e7738f22a62e376", "filename": "gcc/testsuite/gdc.test/compilable/test23169.d", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23169.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23169.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftest23169.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -0,0 +1,14 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23169\n+// Issue 23169 - [DIP1000] Mangling does not distinguish return and return scope\n+\n+struct Ptr\n+{\n+\tint* impl;\n+\tvoid* fun0() return scope {return impl;}\n+\tvoid* fun1() scope return {return impl;}\n+\tvoid* fun2() return {return &this;}\n+}\n+\n+static assert(Ptr.fun0.mangleof == \"_D9test231693Ptr4fun0MFNjNlZPv\");\n+static assert(Ptr.fun1.mangleof == \"_D9test231693Ptr4fun1MFNlNjZPv\");\n+static assert(Ptr.fun2.mangleof == \"_D9test231693Ptr4fun2MFNjZPv\");"}, {"sha": "cef1575e901ea3a344586828c4741ce8af7b6e2b", "filename": "gcc/testsuite/gdc.test/compilable/testparse.d", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftestparse.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftestparse.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Fcompilable%2Ftestparse.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -191,3 +191,13 @@ void test22019()\n             break;\n     }\n }\n+\n+/***************************************************/\n+// https://issues.dlang.org/show_bug.cgi?id=23205\n+\n+void test23205()\n+{\n+    mixin template tpl() { int x; }\n+    mixin tpl!();\n+    x = 123;\n+}"}, {"sha": "1cbacfc9279d0f8410d26c56dff9c00a0225d9da", "filename": "gcc/testsuite/gdc.test/runnable/test23010.d", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest23010.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest23010.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.test%2Frunnable%2Ftest23010.d?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -0,0 +1,43 @@\n+// https://issues.dlang.org/show_bug.cgi?id=23010\n+\n+alias AliasSeq(T...) = T;\n+\n+mixin template faz() {\n+    alias T = AliasSeq!(int);\n+    T bar = 12345;\n+\n+    void write1() {\n+        assert(bar[0] == 12345);\n+    }\n+\n+    AliasSeq!(string, float) foo = AliasSeq!(\"qwerty\", 1.25f);\n+\n+    void write2() {\n+        assert(foo == AliasSeq!(\"qwerty\", 1.25f));\n+        foo = AliasSeq!(\"asdfg\", 2.5f); // this even crashed before\n+        assert(foo == AliasSeq!(\"asdfg\", 2.5f));\n+    }\n+}\n+\n+void main() {\n+    mixin faz!();\n+    write1;\n+    write2;\n+    fun;\n+}\n+\n+// Testing static symbol generation ('toobj.d' changes)\n+\n+static AliasSeq!(int, string) tup;\n+\n+void fun()\n+{\n+    auto v = tup;\n+\n+    struct S(T...) {\n+        static T b;\n+    }\n+\n+    alias T = S!(int, float);\n+    auto p = T.b;\n+}"}, {"sha": "2fc1bc1cf6a576b527954190b7c6880b6425e528", "filename": "libphobos/libdruntime/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d97f3bca6eec50ac4ec007d731d345db3e560c52/libphobos%2Flibdruntime%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d97f3bca6eec50ac4ec007d731d345db3e560c52/libphobos%2Flibdruntime%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMERGE?ref=d97f3bca6eec50ac4ec007d731d345db3e560c52", "patch": "@@ -1,4 +1,4 @@\n-e150cca179515ce5113e828aac94c20c0b983b7c\n+148608b7935c3f9a4ea3a26f74cb90cd07efc91c\n \n The first line of this file holds the git revision number of the last\n merge done from the dlang/druntime repository."}]}