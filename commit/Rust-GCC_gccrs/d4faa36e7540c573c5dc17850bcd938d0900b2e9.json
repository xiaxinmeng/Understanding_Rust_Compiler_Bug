{"sha": "d4faa36e7540c573c5dc17850bcd938d0900b2e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRmYWEzNmU3NTQwYzU3M2M1ZGMxNzg1MGJjZDkzOGQwOTAwYjJlOQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-06-06T04:25:58Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-06-09T19:19:43Z"}, "message": "Fix PR 100925: Limit some a?CST1:CST2 optimizations to intergal types only\n\nThe problem here is with offset (and pointer) types is we produce\na negative expression when this optimization hits.\nIt is easier to disable this optimization for all non-integeral types\ninstead of finding an integer type which is the same precission as the\ntype to do the negative expression on it.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/100925\n\t* match.pd (a ? CST1 : CST2): Limit transformations\n\tthat would produce a negative to integeral types only.\n\tChange !POINTER_TYPE_P to INTEGRAL_TYPE_P also.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/torture/pr100925.C: New test.", "tree": {"sha": "af39bfd8f989e69c6500ca2c01ee2d140994db8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af39bfd8f989e69c6500ca2c01ee2d140994db8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4faa36e7540c573c5dc17850bcd938d0900b2e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4faa36e7540c573c5dc17850bcd938d0900b2e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4faa36e7540c573c5dc17850bcd938d0900b2e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4faa36e7540c573c5dc17850bcd938d0900b2e9/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87e1eecaa0d96c46eab948960904fee618f926c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e1eecaa0d96c46eab948960904fee618f926c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e1eecaa0d96c46eab948960904fee618f926c4"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "bf22bc3a198afdae741628b2b91807758e1dd386", "filename": "gcc/match.pd", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4faa36e7540c573c5dc17850bcd938d0900b2e9/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4faa36e7540c573c5dc17850bcd938d0900b2e9/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=d4faa36e7540c573c5dc17850bcd938d0900b2e9", "patch": "@@ -3733,10 +3733,10 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     (if (integer_onep (@1))\n      (convert (convert:boolean_type_node @0)))\n     /* a ? -1 : 0 -> -a. */\n-    (if (integer_all_onesp (@1))\n+    (if (INTEGRAL_TYPE_P (type) && integer_all_onesp (@1))\n      (negate (convert (convert:boolean_type_node @0))))\n     /* a ? powerof2cst : 0 -> a << (log2(powerof2cst)) */\n-    (if (!POINTER_TYPE_P (type) && integer_pow2p (@1))\n+    (if (INTEGRAL_TYPE_P (type) && integer_pow2p (@1))\n      (with {\n        tree shift = build_int_cst (integer_type_node, tree_log2 (@1));\n       }\n@@ -3750,10 +3750,10 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n      (if (integer_onep (@2))\n       (convert (bit_xor (convert:boolean_type_node @0) { booltrue; } )))\n      /* a ? -1 : 0 -> -(!a). */\n-     (if (integer_all_onesp (@2))\n+     (if (INTEGRAL_TYPE_P (type) && integer_all_onesp (@2))\n       (negate (convert (bit_xor (convert:boolean_type_node @0) { booltrue; } ))))\n      /* a ? powerof2cst : 0 -> (!a) << (log2(powerof2cst)) */\n-     (if (!POINTER_TYPE_P (type) && integer_pow2p (@2))\n+     (if (INTEGRAL_TYPE_P (type) &&  integer_pow2p (@2))\n       (with {\n \ttree shift = build_int_cst (integer_type_node, tree_log2 (@2));\n        }"}, {"sha": "de13950dca0a9c05328c149a10571f921cc7b8b5", "filename": "gcc/testsuite/g++.dg/torture/pr100925.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4faa36e7540c573c5dc17850bcd938d0900b2e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr100925.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4faa36e7540c573c5dc17850bcd938d0900b2e9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr100925.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr100925.C?ref=d4faa36e7540c573c5dc17850bcd938d0900b2e9", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile }\n+\n+struct QScopedPointerDeleter {\n+  static void cleanup(int *);\n+};\n+class QScopedPointer {\n+  typedef int *QScopedPointer::*RestrictedBool;\n+\n+public:\n+  operator RestrictedBool() { return d ? nullptr : &QScopedPointer::d; }\n+  void reset() {\n+    if (d)\n+      QScopedPointerDeleter::cleanup(d);\n+  }\n+  int *d;\n+};\n+class DOpenGLPaintDevicePrivate {\n+public:\n+  QScopedPointer fbo;\n+} DOpenGLPaintDeviceresize_d;\n+void DOpenGLPaintDeviceresize() {\n+  if (DOpenGLPaintDeviceresize_d.fbo)\n+    DOpenGLPaintDeviceresize_d.fbo.reset();\n+}"}]}