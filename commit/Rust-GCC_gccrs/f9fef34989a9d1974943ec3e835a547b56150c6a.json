{"sha": "f9fef34989a9d1974943ec3e835a547b56150c6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlmZWYzNDk4OWE5ZDE5NzQ5NDNlYzNlODM1YTU0N2I1NjE1MGM2YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-07-19T20:48:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-07-19T20:48:25Z"}, "message": "re PR rtl-optimization/53942 (unable to find a register to spill in class 'CREG')\n\n\tPR rtl-optimization/53942\n\t* function.c (assign_parm_setup_reg): Avoid zero/sign extension\n\tdirectly from likely spilled non-fixed hard registers, move them\n\tto pseudo first.\n\n\t* gcc.dg/pr53942.c: New test.\n\nFrom-SVN: r189681", "tree": {"sha": "0b64e6d9e88dfbc57439877cbb5bccdfdbdd43ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b64e6d9e88dfbc57439877cbb5bccdfdbdd43ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9fef34989a9d1974943ec3e835a547b56150c6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9fef34989a9d1974943ec3e835a547b56150c6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9fef34989a9d1974943ec3e835a547b56150c6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9fef34989a9d1974943ec3e835a547b56150c6a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fdb45c0cc3c8be240927799dfca7b297b177cc7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdb45c0cc3c8be240927799dfca7b297b177cc7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdb45c0cc3c8be240927799dfca7b297b177cc7d"}], "stats": {"total": 65, "additions": 63, "deletions": 2}, "files": [{"sha": "a14b3d91fd55494ff87f4dbc8705c8117e826d8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fef34989a9d1974943ec3e835a547b56150c6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fef34989a9d1974943ec3e835a547b56150c6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f9fef34989a9d1974943ec3e835a547b56150c6a", "patch": "@@ -1,3 +1,10 @@\n+2012-07-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/53942\n+\t* function.c (assign_parm_setup_reg): Avoid zero/sign extension\n+\tdirectly from likely spilled non-fixed hard registers, move them\n+\tto pseudo first.\n+\n 2012-07-19  Steve Ellcey  <sellcey@mips.com>\n \n \t* config/mips/mips.c (mips_set_mips16_mode): Clear SYNCI_MASK in"}, {"sha": "f1e0b2d3ebac0dec6b86ca4c6ead808bacca7339", "filename": "gcc/function.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fef34989a9d1974943ec3e835a547b56150c6a/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fef34989a9d1974943ec3e835a547b56150c6a/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=f9fef34989a9d1974943ec3e835a547b56150c6a", "patch": "@@ -2987,11 +2987,26 @@ assign_parm_setup_reg (struct assign_parm_data_all *all, tree parm,\n \t  && insn_operand_matches (icode, 1, op1))\n \t{\n \t  enum rtx_code code = unsignedp ? ZERO_EXTEND : SIGN_EXTEND;\n-\t  rtx insn, insns;\n+\t  rtx insn, insns, t = op1;\n \t  HARD_REG_SET hardregs;\n \n \t  start_sequence ();\n-\t  insn = gen_extend_insn (op0, op1, promoted_nominal_mode,\n+\t  /* If op1 is a hard register that is likely spilled, first\n+\t     force it into a pseudo, otherwise combiner might extend\n+\t     its lifetime too much.  */\n+\t  if (GET_CODE (t) == SUBREG)\n+\t    t = SUBREG_REG (t);\n+\t  if (REG_P (t)\n+\t      && HARD_REGISTER_P (t)\n+\t      && ! TEST_HARD_REG_BIT (fixed_reg_set, REGNO (t))\n+\t      && targetm.class_likely_spilled_p (REGNO_REG_CLASS (REGNO (t))))\n+\t    {\n+\t      t = gen_reg_rtx (GET_MODE (op1));\n+\t      emit_move_insn (t, op1);\n+\t    }\n+\t  else\n+\t    t = op1;\n+\t  insn = gen_extend_insn (op0, t, promoted_nominal_mode,\n \t\t\t\t  data->passed_mode, unsignedp);\n \t  emit_insn (insn);\n \t  insns = get_insns ();"}, {"sha": "d3a7c88f688a3aa878f560b6d5db9cd3da9809ae", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fef34989a9d1974943ec3e835a547b56150c6a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fef34989a9d1974943ec3e835a547b56150c6a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f9fef34989a9d1974943ec3e835a547b56150c6a", "patch": "@@ -1,3 +1,8 @@\n+2012-07-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR rtl-optimization/53942\n+\t* gcc.dg/pr53942.c: New test.\n+\n 2012-07-19  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/54021"}, {"sha": "6a51d2673dd7313c21312ce4b09cdda12798c819", "filename": "gcc/testsuite/gcc.dg/pr53942.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9fef34989a9d1974943ec3e835a547b56150c6a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53942.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9fef34989a9d1974943ec3e835a547b56150c6a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53942.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53942.c?ref=f9fef34989a9d1974943ec3e835a547b56150c6a", "patch": "@@ -0,0 +1,34 @@\n+/* PR rtl-optimization/53942 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-additional-options \"-mtune=pentium2\" { target { { i?86-*-* x86_64-*-* } && ia32 } } } */\n+\n+struct S\n+{\n+  unsigned short w[3];\n+  unsigned int x, y;\n+};\n+\n+struct S *baz (void);\n+\n+__attribute__ ((noinline))\n+static unsigned char\n+foo (struct S *x, unsigned char y)\n+{\n+  unsigned char c = 0;\n+  unsigned char v = x->w[0];\n+  c |= v;\n+  v = ((x->w[1]) & (1 << y)) ? 1 : 0;\n+  c |= v << 1;\n+  v = ((x->w[2]) & 0xff) & (1 << y);\n+  c |= v << 2;\n+  return c;\n+}\n+\n+void\n+bar (void)\n+{\n+  struct S *s = baz ();\n+  s->x = foo (s, 6);\n+  s->y = foo (s, 7);\n+}"}]}