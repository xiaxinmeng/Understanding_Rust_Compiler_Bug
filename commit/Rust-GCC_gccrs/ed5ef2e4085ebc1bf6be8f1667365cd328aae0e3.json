{"sha": "ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ1ZWYyZTQwODVlYmMxYmY2YmU4ZjE2NjczNjVjZDMyOGFhZTBlMw==", "commit": {"author": {"name": "Cary Coutant", "email": "ccoutant@google.com", "date": "2009-06-17T23:54:40Z"}, "committer": {"name": "Cary Coutant", "email": "ccoutant@gcc.gnu.org", "date": "2009-06-17T23:54:40Z"}, "message": "dbxout.c (dbxout_source_line): Add is_stmt parameter.\n\n\t* dbxout.c (dbxout_source_line): Add is_stmt parameter.\n\tChange caller.\n\t* debug.c (struct gcc_debug_hooks): Change placeholder for\n\tsource_line hook.\n\t(debug_nothing_int_charstar_int): Replaced by...\n\t(debug_nothing_int_charstar_int_bool): ...this.\n\t* debug.h (struct gcc_debug_hooks): Add is_stmt parameter to\n\tsource_line prototype.\n\t(debug_nothing_int_charstar_int): Replaced by...\n\t(debug_nothing_int_charstar_int_bool): ...this.\n\t* defaults.h (SUPPORTS_DISCRIMINATOR): New constant.\n\t* dwarf2out.c (dwarf2out_source_line): Add is_stmt parameter.\n\tOutput is_stmt operand when necessary.\n\t* final.c (last_is_stmt): New variable.\n\t(final_start_function): Initialize last_is_stmt.\n\t(final_scan_insn): Pass is_stmt to source_line debug hook.\n\t(notice_source_line): Add is_stmt parameter.\n\t* sdbout.c (sdbout_source_line): Add is_stmt parameter.\n\t* vmsdbgout.c (vmsdbgout_source_line): Add is_stmt parameter.\n\tChange callers.\n\t* xcoffout.c (xcoffout_source_line): Add is_stmt parameter.\n\t* xcoffout.h (xcoffout_source_line): Add is_stmt parameter.\n\nFrom-SVN: r148635", "tree": {"sha": "f03a2d8d3edb0a313d09132edfa2cdab7229e22b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f03a2d8d3edb0a313d09132edfa2cdab7229e22b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/comments", "author": null, "committer": null, "parents": [{"sha": "b0f43ca013f71384e43d32bf4062df250528627f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0f43ca013f71384e43d32bf4062df250528627f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0f43ca013f71384e43d32bf4062df250528627f"}], "stats": {"total": 133, "additions": 97, "deletions": 36}, "files": [{"sha": "5b02ed1de95ae04d73835c984295a09658d126d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3", "patch": "@@ -1,3 +1,28 @@\n+2009-06-17  Cary Coutant  <ccoutant@google.com>\n+\n+\t* dbxout.c (dbxout_source_line): Add is_stmt parameter.\n+\tChange caller.\n+\t* debug.c (struct gcc_debug_hooks): Change placeholder for\n+\tsource_line hook.\n+\t(debug_nothing_int_charstar_int): Replaced by...\n+\t(debug_nothing_int_charstar_int_bool): ...this.\n+\t* debug.h (struct gcc_debug_hooks): Add is_stmt parameter to\n+\tsource_line prototype.\n+\t(debug_nothing_int_charstar_int): Replaced by...\n+\t(debug_nothing_int_charstar_int_bool): ...this.\n+\t* defaults.h (SUPPORTS_DISCRIMINATOR): New constant.\n+\t* dwarf2out.c (dwarf2out_source_line): Add is_stmt parameter.\n+\tOutput is_stmt operand when necessary.\n+\t* final.c (last_is_stmt): New variable.\n+\t(final_start_function): Initialize last_is_stmt.\n+\t(final_scan_insn): Pass is_stmt to source_line debug hook.\n+\t(notice_source_line): Add is_stmt parameter.\n+\t* sdbout.c (sdbout_source_line): Add is_stmt parameter.\n+\t* vmsdbgout.c (vmsdbgout_source_line): Add is_stmt parameter.\n+\tChange callers.\n+\t* xcoffout.c (xcoffout_source_line): Add is_stmt parameter.\n+\t* xcoffout.h (xcoffout_source_line): Add is_stmt parameter.\n+\n 2009-06-17  Ian Lance Taylor  <iant@google.com>\n \n \t* expr.c (struct move_by_pieces_d): Rename from move_by_pieces."}, {"sha": "ffb2ac2ef7b0aafad8275f0d3ad294b8f4ccb2b6", "filename": "gcc/dbxout.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3", "patch": "@@ -333,7 +333,7 @@ static void dbxout_handle_pch (unsigned);\n /* The debug hooks structure.  */\n #if defined (DBX_DEBUGGING_INFO)\n \n-static void dbxout_source_line (unsigned int, const char *, int);\n+static void dbxout_source_line (unsigned int, const char *, int, bool);\n static void dbxout_begin_prologue (unsigned int, const char *);\n static void dbxout_source_file (const char *);\n static void dbxout_function_end (tree);\n@@ -1265,7 +1265,7 @@ dbxout_begin_prologue (unsigned int lineno, const char *filename)\n   /* pre-increment the scope counter */\n   scope_labelno++;\n \n-  dbxout_source_line (lineno, filename, 0);\n+  dbxout_source_line (lineno, filename, 0, true);\n   /* Output function begin block at function scope, referenced \n      by dbxout_block, dbxout_source_line and dbxout_function_end.  */\n   emit_pending_bincls_if_required ();\n@@ -1277,7 +1277,8 @@ dbxout_begin_prologue (unsigned int lineno, const char *filename)\n \n static void\n dbxout_source_line (unsigned int lineno, const char *filename,\n-                    int discriminator ATTRIBUTE_UNUSED)\n+                    int discriminator ATTRIBUTE_UNUSED,\n+                    bool is_stmt ATTRIBUTE_UNUSED)\n {\n   dbxout_source_file (filename);\n "}, {"sha": "df69fd5eb8236b74d2bda31896b89a9d14369845", "filename": "gcc/debug.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2Fdebug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2Fdebug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.c?ref=ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3", "patch": "@@ -34,7 +34,7 @@ const struct gcc_debug_hooks do_nothing_debug_hooks =\n   debug_nothing_int_int,\t         /* begin_block */\n   debug_nothing_int_int,\t         /* end_block */\n   debug_true_const_tree,\t         /* ignore_block */\n-  debug_nothing_int_charstar_int,\t /* source_line */\n+  debug_nothing_int_charstar_int_bool,\t /* source_line */\n   debug_nothing_int_charstar,\t         /* begin_prologue */\n   debug_nothing_int_charstar,\t         /* end_prologue */\n   debug_nothing_int_charstar,\t         /* end_epilogue */\n@@ -104,9 +104,10 @@ debug_nothing_int_charstar (unsigned int line ATTRIBUTE_UNUSED,\n }\n \n void\n-debug_nothing_int_charstar_int (unsigned int line ATTRIBUTE_UNUSED,\n-\t\t\t        const char *text ATTRIBUTE_UNUSED,\n-\t\t\t        int discriminator ATTRIBUTE_UNUSED)\n+debug_nothing_int_charstar_int_bool (unsigned int line ATTRIBUTE_UNUSED,\n+\t\t\t             const char *text ATTRIBUTE_UNUSED,\n+\t\t\t             int discriminator ATTRIBUTE_UNUSED,\n+\t\t\t             bool is_stmt ATTRIBUTE_UNUSED)\n {\n }\n "}, {"sha": "de525fec2cd065d5127f4de38231498fd8fcf80a", "filename": "gcc/debug.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3", "patch": "@@ -61,11 +61,10 @@ struct gcc_debug_hooks\n \n   /* Record a source file location at (FILE, LINE, DISCRIMINATOR).  */\n   void (* source_line) (unsigned int line, const char *file,\n-                        int discriminator);\n+                        int discriminator, bool is_stmt);\n \n   /* Called at start of prologue code.  LINE is the first line in the\n-     function.  This has been given the same prototype as source_line,\n-     so that the source_line hook can be substituted if appropriate.  */\n+     function.  */\n   void (* begin_prologue) (unsigned int line, const char *file);\n \n   /* Called at end of prologue code.  LINE is the first line in the\n@@ -142,7 +141,8 @@ extern const struct gcc_debug_hooks *debug_hooks;\n extern void debug_nothing_void (void);\n extern void debug_nothing_charstar (const char *);\n extern void debug_nothing_int_charstar (unsigned int, const char *);\n-extern void debug_nothing_int_charstar_int (unsigned int, const char *, int);\n+extern void debug_nothing_int_charstar_int_bool (unsigned int, const char *,\n+                                                 int, bool);\n extern void debug_nothing_int (unsigned int);\n extern void debug_nothing_int_int (unsigned int, unsigned int);\n extern void debug_nothing_tree (tree);"}, {"sha": "a4b870ef45f5a04026ced431c40d618dbfaf9d09", "filename": "gcc/defaults.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3", "patch": "@@ -255,6 +255,16 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n #endif\n \n+/* This determines whether or not we support the discriminator\n+   attribute in the .loc directive.  */\n+#ifndef SUPPORTS_DISCRIMINATOR\n+#ifdef HAVE_GAS_DISCRIMINATOR\n+#define SUPPORTS_DISCRIMINATOR 1\n+#else\n+#define SUPPORTS_DISCRIMINATOR 0\n+#endif\n+#endif\n+\n /* This determines whether or not we support link-once semantics.  */\n #ifndef SUPPORTS_ONE_ONLY\n #ifdef MAKE_DECL_ONE_ONLY"}, {"sha": "81be71845e49b20cadd1a835eece28f2ffb583d6", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3", "patch": "@@ -91,7 +91,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"input.h\"\n \n #ifdef DWARF2_DEBUGGING_INFO\n-static void dwarf2out_source_line (unsigned int, const char *, int);\n+static void dwarf2out_source_line (unsigned int, const char *, int, bool);\n \n static rtx last_var_location_insn;\n #endif\n@@ -3637,7 +3637,7 @@ dwarf2out_begin_prologue (unsigned int line ATTRIBUTE_UNUSED,\n      prologue case, not the eh frame case.  */\n #ifdef DWARF2_DEBUGGING_INFO\n   if (file)\n-    dwarf2out_source_line (line, file, 0);\n+    dwarf2out_source_line (line, file, 0, true);\n #endif\n \n   if (dwarf2out_do_cfi_asm ())\n@@ -16283,8 +16283,10 @@ dwarf2out_begin_function (tree fun)\n \n static void\n dwarf2out_source_line (unsigned int line, const char *filename,\n-                       int discriminator ATTRIBUTE_UNUSED)\n+                       int discriminator, bool is_stmt)\n {\n+  static bool last_is_stmt = true;\n+\n   if (debug_info_level >= DINFO_LEVEL_NORMAL\n       && line != 0)\n     {\n@@ -16301,10 +16303,13 @@ dwarf2out_source_line (unsigned int line, const char *filename,\n \t{\n \t  /* Emit the .loc directive understood by GNU as.  */\n \t  fprintf (asm_out_file, \"\\t.loc %d %d 0\", file_num, line);\n-#ifdef HAVE_GAS_DISCRIMINATOR\n-\t  if (discriminator != 0)\n+\t  if (is_stmt != last_is_stmt)\n+\t    {\n+\t      fprintf (asm_out_file, \" is_stmt %d\", is_stmt ? 1 : 0);\n+\t      last_is_stmt = is_stmt;\n+\t    }\n+\t  if (SUPPORTS_DISCRIMINATOR && discriminator != 0)\n \t    fprintf (asm_out_file, \" discriminator %d\", discriminator);\n-#endif /* HAVE_GAS_DISCRIMINATOR */\n \t  fputc ('\\n', asm_out_file);\n \n \t  /* Indicate that line number info exists.  */"}, {"sha": "3de72811401b5eb9060e69732030201021e05017", "filename": "gcc/final.c", "status": "modified", "additions": 27, "deletions": 10, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3", "patch": "@@ -213,7 +213,7 @@ static int asm_insn_count (rtx);\n #endif\n static void profile_function (FILE *);\n static void profile_after_prologue (FILE *);\n-static bool notice_source_line (rtx);\n+static bool notice_source_line (rtx, bool *);\n static rtx walk_alter_subreg (rtx *, bool *);\n static void output_asm_name (void);\n static void output_alternate_entry_point (FILE *, rtx);\n@@ -2089,6 +2089,7 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \trtx body = PATTERN (insn);\n \tint insn_code_number;\n \tconst char *templ;\n+\tbool is_stmt;\n \n #ifdef HAVE_conditional_execution\n \t/* Reset this early so it is correct for ASM statements.  */\n@@ -2190,11 +2191,12 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t  }\n \t/* Output this line note if it is the first or the last line\n \t   note in a row.  */\n-\tif (notice_source_line (insn))\n+\tif (notice_source_line (insn, &is_stmt))\n \t  {\n \t    (*debug_hooks->source_line) (last_linenum,\n \t                                 last_filename,\n-\t                                 last_discriminator);\n+\t                                 last_discriminator,\n+\t                                 is_stmt);\n \t  }\n \n \tif (GET_CODE (body) == ASM_INPUT)\n@@ -2698,10 +2700,12 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n   return NEXT_INSN (insn);\n }\n \f\n-/* Return whether a source line note needs to be emitted before INSN.  */\n+/* Return whether a source line note needs to be emitted before INSN.\n+   Sets IS_STMT to TRUE if the line should be marked as a possible\n+   breakpoint location.  */\n \n static bool\n-notice_source_line (rtx insn)\n+notice_source_line (rtx insn, bool *is_stmt)\n {\n   const char *filename;\n   int linenum;\n@@ -2717,20 +2721,33 @@ notice_source_line (rtx insn)\n       linenum = insn_line (insn);\n     }\n \n-  if (filename\n-      && (force_source_line\n-\t  || filename != last_filename\n-\t  || last_linenum != linenum\n-\t  || last_discriminator != discriminator))\n+  if (filename == NULL)\n+    return false;\n+\n+  if (force_source_line\n+      || filename != last_filename\n+      || last_linenum != linenum)\n     {\n       force_source_line = false;\n       last_filename = filename;\n       last_linenum = linenum;\n       last_discriminator = discriminator;\n+      *is_stmt = true;\n       high_block_linenum = MAX (last_linenum, high_block_linenum);\n       high_function_linenum = MAX (last_linenum, high_function_linenum);\n       return true;\n     }\n+\n+  if (SUPPORTS_DISCRIMINATOR && last_discriminator != discriminator)\n+    {\n+      /* If the discriminator changed, but the line number did not,\n+         output the line table entry with is_stmt false so the\n+         debugger does not treat this as a breakpoint location.  */\n+      last_discriminator = discriminator;\n+      *is_stmt = false;\n+      return true;\n+    }\n+\n   return false;\n }\n \f"}, {"sha": "0e1cf18dfb23ddd91327c813efd1e61d5b514b97", "filename": "gcc/sdbout.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3", "patch": "@@ -117,7 +117,7 @@ static void sdbout_start_source_file\t(unsigned int, const char *);\n static void sdbout_end_source_file\t(unsigned int);\n static void sdbout_begin_block\t\t(unsigned int, unsigned int);\n static void sdbout_end_block\t\t(unsigned int, unsigned int);\n-static void sdbout_source_line\t\t(unsigned int, const char *, int);\n+static void sdbout_source_line\t\t(unsigned int, const char *, int, bool);\n static void sdbout_end_epilogue\t\t(unsigned int, const char *);\n static void sdbout_global_decl\t\t(tree);\n #ifndef MIPS_DEBUGGING_INFO\n@@ -1542,7 +1542,8 @@ sdbout_end_block (unsigned int line, unsigned int n ATTRIBUTE_UNUSED)\n \n static void\n sdbout_source_line (unsigned int line, const char *filename ATTRIBUTE_UNUSED,\n-                    int discriminator ATTRIBUTE_UNUSED)\n+                    int discriminator ATTRIBUTE_UNUSED,\n+                    bool is_stmt ATTRIBUTE_UNUSED)\n {\n   /* COFF relative line numbers must be positive.  */\n   if ((int) line > sdb_begin_function_line)"}, {"sha": "917121a38025aaf73496e4c44880ded8d42cf1ba", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3", "patch": "@@ -173,7 +173,7 @@ static void vmsdbgout_end_source_file (unsigned int);\n static void vmsdbgout_begin_block (unsigned int, unsigned int);\n static void vmsdbgout_end_block (unsigned int, unsigned int);\n static bool vmsdbgout_ignore_block (const_tree);\n-static void vmsdbgout_source_line (unsigned int, const char *, int);\n+static void vmsdbgout_source_line (unsigned int, const char *, int, bool);\n static void vmsdbgout_begin_prologue (unsigned int, const char *);\n static void vmsdbgout_end_prologue (unsigned int, const char *);\n static void vmsdbgout_end_function (unsigned int);\n@@ -1297,7 +1297,7 @@ vmsdbgout_end_prologue (unsigned int line, const char *file)\n       ASM_OUTPUT_LABEL (asm_out_file, label);\n \n       /* VMS PCA expects every PC range to correlate to some line and file.  */\n-      vmsdbgout_source_line (line, file, 0);\n+      vmsdbgout_source_line (line, file, 0, true);\n     }\n }\n \n@@ -1331,7 +1331,7 @@ vmsdbgout_end_epilogue (unsigned int line, const char *file)\n       ASM_OUTPUT_LABEL (asm_out_file, label);\n \n       /* VMS PCA expects every PC range to correlate to some line and file.  */\n-      vmsdbgout_source_line (line, file, 0);\n+      vmsdbgout_source_line (line, file, 0, true);\n     }\n }\n \n@@ -1534,10 +1534,10 @@ lookup_filename (const char *file_name)\n \n static void\n vmsdbgout_source_line (register unsigned line, register const char *filename,\n-                       int discriminator)\n+                       int discriminator, bool is_stmt)\n {\n   if (write_symbols == VMS_AND_DWARF2_DEBUG)\n-    (*dwarf2_debug_hooks.source_line) (line, filename, discriminator);\n+    (*dwarf2_debug_hooks.source_line) (line, filename, discriminator, is_stmt);\n \n   if (debug_info_level >= DINFO_LEVEL_TERSE)\n     {"}, {"sha": "0f13486ad1e2c0b28adb26be7291419eba0a21ef", "filename": "gcc/xcoffout.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2Fxcoffout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2Fxcoffout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.c?ref=ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3", "patch": "@@ -322,7 +322,8 @@ xcoffout_source_file (FILE *file, const char *filename, int inline_p)\n \n void\n xcoffout_source_line (unsigned int line, const char *filename,\n-                      int discriminator ATTRIBUTE_UNUSED)\n+                      int discriminator ATTRIBUTE_UNUSED,\n+                      bool is_stmt ATTRIBUTE_UNUSED)\n {\n   bool inline_p = (strcmp (xcoff_current_function_file, filename) != 0\n \t\t   || (int) line < xcoff_begin_function_line);"}, {"sha": "124c106a8b50ed56cb091a628596fc7c8664b58d", "filename": "gcc/xcoffout.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2Fxcoffout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3/gcc%2Fxcoffout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fxcoffout.h?ref=ed5ef2e4085ebc1bf6be8f1667365cd328aae0e3", "patch": "@@ -182,4 +182,4 @@ extern void xcoffout_end_function (unsigned int);\n extern void xcoffout_end_block (unsigned, unsigned);\n extern int xcoff_assign_fundamental_type_number (tree);\n extern void xcoffout_declare_function (FILE *, tree, const char *);\n-extern void xcoffout_source_line (unsigned int, const char *, int);\n+extern void xcoffout_source_line (unsigned int, const char *, int, bool);"}]}