{"sha": "3f8b69de79b62b2295851937aafbccf3f0fefefb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y4YjY5ZGU3OWI2MmIyMjk1ODUxOTM3YWFmYmNjZjNmMGZlZmVmYg==", "commit": {"author": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1996-08-14T23:46:53Z"}, "committer": {"name": "Torbjorn Granlund", "email": "tege@gnu.org", "date": "1996-08-14T23:46:53Z"}, "message": "(expand_return): In code for doing scc with jumps,\n\nstick to default handling if we have corresponding scc pattern.\n\nFrom-SVN: r12641", "tree": {"sha": "15de8732d22332b6f4cd644eccab9d9afc2b7832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15de8732d22332b6f4cd644eccab9d9afc2b7832"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f8b69de79b62b2295851937aafbccf3f0fefefb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8b69de79b62b2295851937aafbccf3f0fefefb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f8b69de79b62b2295851937aafbccf3f0fefefb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f8b69de79b62b2295851937aafbccf3f0fefefb/comments", "author": null, "committer": null, "parents": [{"sha": "3aba034bf009e4590f14aa2c00a1107dd229e391", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aba034bf009e4590f14aa2c00a1107dd229e391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aba034bf009e4590f14aa2c00a1107dd229e391"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "5ebadb5f21cf1d90a926b76ae8ac408a5062061e", "filename": "gcc/stmt.c", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f8b69de79b62b2295851937aafbccf3f0fefefb/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f8b69de79b62b2295851937aafbccf3f0fefefb/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=3f8b69de79b62b2295851937aafbccf3f0fefefb", "patch": "@@ -2734,29 +2734,51 @@ expand_return (retval)\n     {\n       /* If this is  return x == y;  then generate\n \t if (x == y) return 1; else return 0;\n-\t if we can do it with explicit return insns and\n-\t branches are cheap.  */\n+\t if we can do it with explicit return insns and branches are cheap,\n+\t but not if we have the corresponding scc insn.  */\n+      int has_scc = 0;\n       if (retval_rhs)\n \tswitch (TREE_CODE (retval_rhs))\n \t  {\n \t  case EQ_EXPR:\n+#ifdef HAVE_seq\n+\t    has_scc = HAVE_seq;\n+#endif\n \t  case NE_EXPR:\n+#ifdef HAVE_sne\n+\t    has_scc = HAVE_sne;\n+#endif\n \t  case GT_EXPR:\n+#ifdef HAVE_sgt\n+\t    has_scc = HAVE_sgt;\n+#endif\n \t  case GE_EXPR:\n+#ifdef HAVE_sge\n+\t    has_scc = HAVE_sge;\n+#endif\n \t  case LT_EXPR:\n+#ifdef HAVE_slt\n+\t    has_scc = HAVE_slt;\n+#endif\n \t  case LE_EXPR:\n+#ifdef HAVE_sle\n+\t    has_scc = HAVE_sle;\n+#endif\n \t  case TRUTH_ANDIF_EXPR:\n \t  case TRUTH_ORIF_EXPR:\n \t  case TRUTH_AND_EXPR:\n \t  case TRUTH_OR_EXPR:\n \t  case TRUTH_NOT_EXPR:\n \t  case TRUTH_XOR_EXPR:\n-\t    op0 = gen_label_rtx ();\n-\t    jumpifnot (retval_rhs, op0);\n-\t    expand_value_return (const1_rtx);\n-\t    emit_label (op0);\n-\t    expand_value_return (const0_rtx);\n-\t    return;\n+\t    if (! has_scc)\n+\t      {\n+\t\top0 = gen_label_rtx ();\n+\t\tjumpifnot (retval_rhs, op0);\n+\t\texpand_value_return (const1_rtx);\n+\t\temit_label (op0);\n+\t\texpand_value_return (const0_rtx);\n+\t\treturn;\n+\t      }\n \t  }\n     }\n #endif /* HAVE_return */"}]}