{"sha": "c0d8623ce5aa6d92c2e6c62e1bee66272a011f59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBkODYyM2NlNWFhNmQ5MmMyZTZjNjJlMWJlZTY2MjcyYTAxMWY1OQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-05-19T18:46:37Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-05-19T19:08:38Z"}, "message": "PR c++/94923 - False positive -Wclass-memaccess with trivially copyable std::optional\n\ngcc/cp/ChangeLog:\n\n\tPR c++/94923\n\t* call.c ((maybe_warn_class_memaccess): Use is_byte_access_type.\n\t* cp-tree.h (is_dummy_object): Return bool.\n\t(is_byte_access_type): Declare new function.\n\t* tree.c (is_dummy_object): Return bool.\n\t(is_byte_access_type): Define new function.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/94923\n\t* g++.dg/Wclass-memaccess.C: Add tests for std::byte.", "tree": {"sha": "9a06c22b9fce1deb3cad47574a8bc3e1f5c3d4f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a06c22b9fce1deb3cad47574a8bc3e1f5c3d4f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0d8623ce5aa6d92c2e6c62e1bee66272a011f59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0d8623ce5aa6d92c2e6c62e1bee66272a011f59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0d8623ce5aa6d92c2e6c62e1bee66272a011f59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0d8623ce5aa6d92c2e6c62e1bee66272a011f59/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed63c387aa0bc1846082524455a6ff1fcec40f9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed63c387aa0bc1846082524455a6ff1fcec40f9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed63c387aa0bc1846082524455a6ff1fcec40f9d"}], "stats": {"total": 219, "additions": 183, "deletions": 36}, "files": [{"sha": "87d1ce76bc8f899a0ab58a075b1eae5d6ef87cab", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d8623ce5aa6d92c2e6c62e1bee66272a011f59/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d8623ce5aa6d92c2e6c62e1bee66272a011f59/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c0d8623ce5aa6d92c2e6c62e1bee66272a011f59", "patch": "@@ -1,3 +1,12 @@\n+2020-05-18  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/94923\n+\t* call.c ((maybe_warn_class_memaccess): Use is_byte_access_type.\n+\t* cp-tree.h (is_dummy_object): Return bool.\n+\t(is_byte_access_type): Declare new function.\n+\t* tree.c (is_dummy_object): Return bool.\n+\t(is_byte_access_type): Define new function.\n+\n 2020-05-19  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/87847"}, {"sha": "d8582883917bdd71cd2b3ce3b7c4cad95ef93168", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d8623ce5aa6d92c2e6c62e1bee66272a011f59/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d8623ce5aa6d92c2e6c62e1bee66272a011f59/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c0d8623ce5aa6d92c2e6c62e1bee66272a011f59", "patch": "@@ -9509,7 +9509,7 @@ maybe_warn_class_memaccess (location_t loc, tree fndecl,\n \n       else if (!trivial\n \t       && !VOID_TYPE_P (srctype)\n-\t       && !char_type_p (TYPE_MAIN_VARIANT (srctype))\n+\t       && !is_byte_access_type (srctype)\n \t       && !same_type_ignoring_top_level_qualifiers_p (desttype,\n \t\t\t\t\t\t\t      srctype))\n \t{\n@@ -9522,7 +9522,7 @@ maybe_warn_class_memaccess (location_t loc, tree fndecl,\n \t}\n       else if (fld\n \t       && !VOID_TYPE_P (srctype)\n-\t       && !char_type_p (TYPE_MAIN_VARIANT (srctype))\n+\t       && !is_byte_access_type (srctype)\n \t       && !same_type_ignoring_top_level_qualifiers_p (desttype,\n \t\t\t\t\t\t\t      srctype))\n \t{"}, {"sha": "31c30ff87b3d2e481fd338261d1a1f5cc8dcb824", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d8623ce5aa6d92c2e6c62e1bee66272a011f59/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d8623ce5aa6d92c2e6c62e1bee66272a011f59/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c0d8623ce5aa6d92c2e6c62e1bee66272a011f59", "patch": "@@ -7460,7 +7460,8 @@ extern tree no_linkage_check\t\t\t(tree, bool);\n extern void debug_binfo\t\t\t\t(tree);\n extern tree build_dummy_object\t\t\t(tree);\n extern tree maybe_dummy_object\t\t\t(tree, tree *);\n-extern int is_dummy_object\t\t\t(const_tree);\n+extern bool is_dummy_object\t\t\t(const_tree);\n+extern bool is_byte_access_type\t\t\t(tree);\n extern const struct attribute_spec cxx_attribute_table[];\n extern tree make_ptrmem_cst\t\t\t(tree, tree);\n extern tree cp_build_type_attribute_variant     (tree, tree);"}, {"sha": "7588c9248dda4192255a5054f715f238230c96a4", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d8623ce5aa6d92c2e6c62e1bee66272a011f59/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d8623ce5aa6d92c2e6c62e1bee66272a011f59/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=c0d8623ce5aa6d92c2e6c62e1bee66272a011f59", "patch": "@@ -1062,13 +1062,7 @@ build_cplus_array_type (tree elt_type, tree index_type)\n     }\n   else\n     {\n-      bool typeless_storage\n-\t= (elt_type == unsigned_char_type_node\n-\t   || elt_type == signed_char_type_node\n-\t   || elt_type == char_type_node\n-\t   || (TREE_CODE (elt_type) == ENUMERAL_TYPE\n-\t       && TYPE_CONTEXT (elt_type) == std_node\n-\t       && !strcmp (\"byte\", TYPE_NAME_STRING (elt_type))));\n+      bool typeless_storage = is_byte_access_type (elt_type);\n       t = build_array_type (elt_type, index_type, typeless_storage);\n     }\n \n@@ -4047,7 +4041,7 @@ maybe_dummy_object (tree type, tree* binfop)\n \n /* Returns 1 if OB is a placeholder object, or a pointer to one.  */\n \n-int\n+bool\n is_dummy_object (const_tree ob)\n {\n   if (INDIRECT_REF_P (ob))\n@@ -4056,6 +4050,20 @@ is_dummy_object (const_tree ob)\n \t  && TREE_OPERAND (ob, 0) == void_node);\n }\n \n+/* Returns true if TYPE is a character type or std::byte.  */\n+\n+bool\n+is_byte_access_type (tree type)\n+{\n+  type = TYPE_MAIN_VARIANT (type);\n+  if (char_type_p (type))\n+    return true;\n+\n+  return (TREE_CODE (type) == ENUMERAL_TYPE\n+\t  && TYPE_CONTEXT (type) == std_node\n+\t  && !strcmp (\"byte\", TYPE_NAME_STRING (type)));\n+}\n+\n /* Returns 1 iff type T is something we want to treat as a scalar type for\n    the purpose of deciding whether it is trivial/POD/standard-layout.  */\n "}, {"sha": "0e54d3916da6af61d2ac5e7993a406a24b11de1b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d8623ce5aa6d92c2e6c62e1bee66272a011f59/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d8623ce5aa6d92c2e6c62e1bee66272a011f59/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c0d8623ce5aa6d92c2e6c62e1bee66272a011f59", "patch": "@@ -188,6 +188,11 @@\n \t* g++.dg/cpp1z/constexpr-if34.C: New test.\n \t* g++.dg/cpp2a/is-constant-evaluated10.C: New test.\n \n+2020-05-18  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c++/94923\n+\t* g++.dg/Wclass-memaccess.C: Add tests for std::byte.\n+\n 2020-05-18  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/92815"}, {"sha": "57573b37dcb25c601f523ab744d6df2017c3110e", "filename": "gcc/testsuite/g++.dg/Wclass-memaccess.C", "status": "modified", "additions": 149, "deletions": 25, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0d8623ce5aa6d92c2e6c62e1bee66272a011f59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWclass-memaccess.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0d8623ce5aa6d92c2e6c62e1bee66272a011f59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWclass-memaccess.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2FWclass-memaccess.C?ref=c0d8623ce5aa6d92c2e6c62e1bee66272a011f59", "patch": "@@ -14,6 +14,15 @@ void* memset (void*, int, size_t);\n void* realloc (void*, size_t);\n }\n \n+namespace std {\n+\n+#if __cplusplus >= 201103L\n+enum class byte: unsigned char { };\n+#else\n+typedef unsigned char byte;\n+#endif\n+}\n+\n /* Ordinary bzcopy and bzero aren't recognized as special.  */\n #define bcopy __builtin_bcopy\n #define bzero __builtin_bzero\n@@ -180,7 +189,8 @@ void TrivialAccess::test_member (const TrivialAccess *q, int i)\n struct HasDefault { char a[4]; HasDefault (); };\n \n void test (HasDefault *p, const HasDefault &x,\n-\t   void *q, const unsigned char *s, const int ia[])\n+\t   void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -208,21 +218,25 @@ void test (HasDefault *p, const HasDefault &x,\n   T (bcopy, (q, p, n));\n   T (bcopy, (s, p, sizeof *p));\n   T (bcopy, (s, p, n));\n+  T (bcopy, (b, p, n));\n \n   T (memcpy, (p, q, sizeof *p));\n   T (memcpy, (p, q, n));\n   T (memcpy, (p, s, sizeof *p));\n   T (memcpy, (p, s, n));\n+  T (memcpy, (p, b, n));\n \n   T (memmove, (p, q, sizeof *p));\n   T (memmove, (p, q, n));\n   T (memmove, (p, s, sizeof *p));\n   T (memmove, (p, s, n));\n+  T (memmove, (p, b, n));\n \n   T (mempcpy, (p, q, sizeof *p));\n   T (mempcpy, (p, q, n));\n   T (mempcpy, (p, s, sizeof *p));\n   T (mempcpy, (p, s, n));\n+  T (mempcpy, (p, b, n));\n \n   // ...but partial copies are diagnosed.\n   T (memcpy, (p, &x, 1));   // { dg-warning \"writing to an object of a non-trivial type .struct HasDefault. leaves 3 bytes unchanged\" } */\n@@ -259,7 +273,8 @@ struct HasTemplateDefault\n };\n \n void test (HasTemplateDefault *p, const HasTemplateDefault &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -275,21 +290,25 @@ void test (HasTemplateDefault *p, const HasTemplateDefault &x,\n   T (bcopy, (&x, p, sizeof *p));\n   T (bcopy, (q, p, sizeof *p));\n   T (bcopy, (s, p, sizeof *p));\n+  T (bcopy, (b, p, sizeof *p));\n   T (bcopy, (ia, p, sizeof *p));    // { dg-warning \"bcopy\" }\n \n   T (memcpy, (p, &x, sizeof *p));\n   T (memcpy, (p, q, sizeof *p));\n   T (memcpy, (p, s, sizeof *p));\n+  T (memcpy, (p, b, sizeof *p));\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));\n   T (memmove, (p, q, sizeof *p));\n   T (memmove, (p, s, sizeof *p));\n+  T (memmove, (p, b, sizeof *p));\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));\n   T (mempcpy, (p, q, sizeof *p));\n   T (mempcpy, (p, s, sizeof *p));\n+  T (mempcpy, (p, b, sizeof *p));\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -309,7 +328,8 @@ void test (HasTemplateDefault *p, const HasTemplateDefault &x,\n struct HasCopy { int i; HasCopy (const HasCopy&); };\n \n void test (HasCopy *p, const HasCopy &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -327,21 +347,25 @@ void test (HasCopy *p, const HasCopy &x,\n   T (bcopy, (&x, p, sizeof *p));    // { dg-warning \"bcopy\" }\n   T (bcopy, (q, p, sizeof *p));     // { dg-warning \"bcopy\" }\n   T (bcopy, (s, p, sizeof *p));     // { dg-warning \"bcopy\" }\n+  T (bcopy, (b, p, sizeof *p));     // { dg-warning \"bcopy\" }\n   T (bcopy, (ia, p, sizeof *p));    // { dg-warning \"bcopy\" }\n \n   T (memcpy, (p, &x, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -385,7 +409,8 @@ private:\n };\n \n void test (HasPrivateCopy *p, const HasPrivateCopy &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -403,16 +428,19 @@ void test (HasPrivateCopy *p, const HasPrivateCopy &x,\n   T (memcpy, (p, &x, sizeof *p));   // { dg-warning \".void\\\\* memcpy(\\[^\\n\\r\\]*). writing to an object of non-trivially copyable type .struct HasPrivateCopy.; use copy-assignment instead\" }\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -430,7 +458,8 @@ void test (HasPrivateCopy *p, const HasPrivateCopy &x,\n struct HasDtor { int i; ~HasDtor (); };\n \n void test (HasDtor *p, const HasDtor &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -449,16 +478,19 @@ void test (HasDtor *p, const HasDtor &x,\n   T (memcpy, (p, &x, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -481,7 +513,8 @@ struct HasDeletedDtor\n };\n \n void test (HasDeletedDtor *p, const HasDeletedDtor &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -494,16 +527,19 @@ void test (HasDeletedDtor *p, const HasDeletedDtor &x,\n   T (memcpy, (p, &x, sizeof *p));\n   T (memcpy, (p, q, sizeof *p));\n   T (memcpy, (p, s, sizeof *p));\n+  T (memcpy, (p, b, sizeof *p));\n   T (memcpy, (p, ia, sizeof *p));\n \n   T (memmove, (p, &x, sizeof *p));\n   T (memmove, (p, q, sizeof *p));\n   T (memmove, (p, s, sizeof *p));\n+  T (memmove, (p, b, sizeof *p));\n   T (memmove, (p, ia, sizeof *p));\n \n   T (mempcpy, (p, &x, sizeof *p));\n   T (mempcpy, (p, q, sizeof *p));\n   T (mempcpy, (p, s, sizeof *p));\n+  T (mempcpy, (p, b, sizeof *p));\n   T (mempcpy, (p, ia, sizeof *p));\n \n   // Reallocating is diagnosed.\n@@ -527,7 +563,8 @@ private:\n };\n \n void test (HasPrivateDtor *p, const HasPrivateDtor &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -540,16 +577,19 @@ void test (HasPrivateDtor *p, const HasPrivateDtor &x,\n   T (memcpy, (p, &x, sizeof *p));   // { dg-warning \"writing to an object of non-trivially copyable type .struct HasPrivateDtor.; use copy-assignment or copy-initialization instead\" }\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is diagnosed.\n@@ -567,7 +607,8 @@ void test (HasPrivateDtor *p, const HasPrivateDtor &x,\n struct HasCopyAssign { void operator= (HasCopyAssign&); };\n \n void test (HasCopyAssign *p, const HasCopyAssign &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -584,16 +625,19 @@ void test (HasCopyAssign *p, const HasCopyAssign &x,\n   T (memcpy, (p, &x, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -620,7 +664,8 @@ struct HasMoveAssign\n };\n \n void test (HasMoveAssign *p, const HasMoveAssign &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -637,16 +682,19 @@ void test (HasMoveAssign *p, const HasMoveAssign &x,\n   T (memcpy, (p, &x, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -678,7 +726,8 @@ struct TrivialCopyHasMoveAssign\n };\n \n void test (TrivialCopyHasMoveAssign *p, const TrivialCopyHasMoveAssign &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -695,16 +744,19 @@ void test (TrivialCopyHasMoveAssign *p, const TrivialCopyHasMoveAssign &x,\n   T (memcpy, (p, &x, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -733,7 +785,8 @@ struct TrivialMoveNontrivialCopyAssign\n \n void test (TrivialMoveNontrivialCopyAssign *p,\n \t   const TrivialMoveNontrivialCopyAssign &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -750,16 +803,19 @@ void test (TrivialMoveNontrivialCopyAssign *p,\n   T (memcpy, (p, &x, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -784,7 +840,8 @@ struct TrivialAssignRefOverload {\n };\n \n void test (TrivialAssignRefOverload *p, const TrivialAssignRefOverload &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -797,16 +854,19 @@ void test (TrivialAssignRefOverload *p, const TrivialAssignRefOverload &x,\n   T (memcpy, (p, &x, sizeof *p));\n   T (memcpy, (p, q, sizeof *p));\n   T (memcpy, (p, s, sizeof *p));\n+  T (memcpy, (p, b, sizeof *p));\n   T (memcpy, (p, ia, sizeof *p));\n \n   T (memmove, (p, &x, sizeof *p));\n   T (memmove, (p, q, sizeof *p));\n   T (memmove, (p, s, sizeof *p));\n+  T (memmove, (p, b, sizeof *p));\n   T (memmove, (p, ia, sizeof *p));\n \n   T (mempcpy, (p, &x, sizeof *p));\n   T (mempcpy, (p, q, sizeof *p));\n   T (mempcpy, (p, s, sizeof *p));\n+  T (mempcpy, (p, b, sizeof *p));\n   T (mempcpy, (p, ia, sizeof *p));\n \n   T (q = realloc, (p, 1));\n@@ -831,7 +891,8 @@ struct TrivialAssignCstRefOverload {\n \n void test (TrivialAssignCstRefOverload *p,\n \t   const TrivialAssignCstRefOverload &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -844,16 +905,19 @@ void test (TrivialAssignCstRefOverload *p,\n   T (memcpy, (p, &x, sizeof *p));\n   T (memcpy, (p, q, sizeof *p));\n   T (memcpy, (p, s, sizeof *p));\n+  T (memcpy, (p, b, sizeof *p));\n   T (memcpy, (p, ia, sizeof *p));\n \n   T (memmove, (p, &x, sizeof *p));\n   T (memmove, (p, q, sizeof *p));\n   T (memmove, (p, s, sizeof *p));\n+  T (memmove, (p, b, sizeof *p));\n   T (memmove, (p, ia, sizeof *p));\n \n   T (mempcpy, (p, &x, sizeof *p));\n   T (mempcpy, (p, q, sizeof *p));\n   T (mempcpy, (p, s, sizeof *p));\n+  T (mempcpy, (p, b, sizeof *p));\n   T (mempcpy, (p, ia, sizeof *p));\n \n   T (q = realloc, (p, 1));\n@@ -875,7 +939,8 @@ struct TrivialRefHasVolRefAssign\n \n void test (TrivialRefHasVolRefAssign *p,\n \t   const TrivialRefHasVolRefAssign &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -892,16 +957,19 @@ void test (TrivialRefHasVolRefAssign *p,\n   T (memcpy, (p, &x, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -922,7 +990,8 @@ struct HasVolRefAssign {\n };\n \n void test (HasVolRefAssign *p, const HasVolRefAssign &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -939,16 +1008,19 @@ void test (HasVolRefAssign *p, const HasVolRefAssign &x,\n   T (memcpy, (p, &x, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -967,7 +1039,8 @@ void test (HasVolRefAssign *p, const HasVolRefAssign &x,\n struct HasVirtuals { int i; virtual void foo (); };\n \n void test (HasVirtuals *p, const HasVirtuals &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -983,16 +1056,19 @@ void test (HasVirtuals *p, const HasVirtuals &x,\n   T (memcpy, (p, &x, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is the same as calling memcpy.\n@@ -1012,7 +1088,8 @@ void test (HasVirtuals *p, const HasVirtuals &x,\n struct HasConstData { const char a[4]; };\n \n void test (HasConstData *p, const HasConstData &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -1037,16 +1114,19 @@ void test (HasConstData *p, const HasConstData &x,\n   // { dg-warning \"writing to an object of type .struct HasConstData. with no trivial copy-assignment\" \"c++ 98\" { target { c++98_only } } .-1 }\n   T (memcpy, (p, q, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is not diagnosed except in C++ 98 due to a bug.\n@@ -1066,7 +1146,8 @@ void test (HasConstData *p, const HasConstData &x,\n struct HasReference { int &ci; };\n \n void test (HasReference *p, const HasReference &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -1098,17 +1179,21 @@ void test (HasReference *p, const HasReference &x,\n   T (memcpy, (p, q, n));            // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, n));            // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, b, n));            // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, n));           // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, &x, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, &x, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n \n   // Reallocating is not diagnosed because a type with a reference\n@@ -1132,7 +1217,8 @@ void test (HasReference *p, const HasReference &x,\n struct HasMemDataPtr { int HasMemDataPtr::*p; };\n \n void test (HasMemDataPtr *p, const HasMemDataPtr &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -1155,17 +1241,21 @@ void test (HasMemDataPtr *p, const HasMemDataPtr &x,\n   T (memcpy, (p, q, n));\n   T (memcpy, (p, s, sizeof *p));\n   T (memcpy, (p, s, n));\n+  T (memcpy, (p, b, sizeof *p));\n+  T (memcpy, (p, b, n));\n   T (memcpy, (p, ia, sizeof *p));\n   T (memcpy, (p, ia, n));\n \n   T (memmove, (p, &x, sizeof *p));\n   T (memmove, (p, q, sizeof *p));\n   T (memmove, (p, s, sizeof *p));\n+  T (memmove, (p, b, sizeof *p));\n   T (memmove, (p, ia, sizeof *p));\n \n   T (mempcpy, (p, &x, sizeof *p));\n   T (mempcpy, (p, q, sizeof *p));\n   T (mempcpy, (p, s, sizeof *p));\n+  T (mempcpy, (p, b, sizeof *p));\n   T (mempcpy, (p, ia, sizeof *p));\n \n   // Reallocating is the same as calling memcpy.\n@@ -1185,7 +1275,8 @@ void test (HasMemDataPtr *p, const HasMemDataPtr &x,\n struct HasSomePrivateData { char a[2]; private: char b[2]; };\n \n void test (HasSomePrivateData *p, const HasSomePrivateData &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -1206,6 +1297,7 @@ void test (HasSomePrivateData *p, const HasSomePrivateData &x,\n   T (memcpy, (p, &x, n));\n   T (memcpy, (p, q, sizeof *p));\n   T (memcpy, (p, s, sizeof *p));\n+  T (memcpy, (p, b, sizeof *p));\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, n));           // { dg-warning \"memcpy\" }\n \n@@ -1214,6 +1306,7 @@ void test (HasSomePrivateData *p, const HasSomePrivateData &x,\n   T (memmove, (p, &x, n));\n   T (memmove, (p, q, sizeof *p));\n   T (memmove, (p, s, sizeof *p));\n+  T (memmove, (p, b, sizeof *p));\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, n));          // { dg-warning \"memmove\" }\n \n@@ -1224,6 +1317,8 @@ void test (HasSomePrivateData *p, const HasSomePrivateData &x,\n   T (mempcpy, (p, q, n));\n   T (mempcpy, (p, s, sizeof *p));\n   T (mempcpy, (p, s, n));\n+  T (mempcpy, (p, b, sizeof *p));\n+  T (mempcpy, (p, b, n));\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, n));          // { dg-warning \"mempcpy\" }\n \n@@ -1246,7 +1341,8 @@ void test (HasSomePrivateData *p, const HasSomePrivateData &x,\n struct HasSomeProtectedData { char a[2]; protected: char b[2]; };\n \n void test (HasSomeProtectedData *p, const HasSomeProtectedData &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -1267,6 +1363,7 @@ void test (HasSomeProtectedData *p, const HasSomeProtectedData &x,\n   T (memcpy, (p, &x, n));\n   T (memcpy, (p, q, sizeof *p));\n   T (memcpy, (p, s, sizeof *p));\n+  T (memcpy, (p, b, sizeof *p));\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, n));           // { dg-warning \"memcpy\" }\n \n@@ -1275,6 +1372,7 @@ void test (HasSomeProtectedData *p, const HasSomeProtectedData &x,\n   T (memmove, (p, &x, n));\n   T (memmove, (p, q, sizeof *p));\n   T (memmove, (p, s, sizeof *p));\n+  T (memmove, (p, b, sizeof *p));\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, n));          // { dg-warning \"memmove\" }\n \n@@ -1285,6 +1383,8 @@ void test (HasSomeProtectedData *p, const HasSomeProtectedData &x,\n   T (mempcpy, (p, q, n));\n   T (mempcpy, (p, s, sizeof *p));\n   T (mempcpy, (p, s, n));\n+  T (mempcpy, (p, b, sizeof *p));\n+  T (mempcpy, (p, b, n));\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, n));          // { dg-warning \"mempcpy\" }\n \n@@ -1307,7 +1407,8 @@ void test (HasSomeProtectedData *p, const HasSomeProtectedData &x,\n struct HasAllPrivateData { private: char a[4]; };\n \n void test (HasAllPrivateData *p, const HasAllPrivateData &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -1328,6 +1429,7 @@ void test (HasAllPrivateData *p, const HasAllPrivateData &x,\n   T (memcpy, (p, &x, n));\n   T (memcpy, (p, q, sizeof *p));\n   T (memcpy, (p, s, sizeof *p));\n+  T (memcpy, (p, b, sizeof *p));\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, n));           // { dg-warning \"memcpy\" }\n \n@@ -1336,6 +1438,7 @@ void test (HasAllPrivateData *p, const HasAllPrivateData &x,\n   T (memmove, (p, &x, n));\n   T (memmove, (p, q, sizeof *p));\n   T (memmove, (p, s, sizeof *p));\n+  T (memmove, (p, b, sizeof *p));\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, n));          // { dg-warning \"memmove\" }\n \n@@ -1346,6 +1449,8 @@ void test (HasAllPrivateData *p, const HasAllPrivateData &x,\n   T (mempcpy, (p, q, n));\n   T (mempcpy, (p, s, sizeof *p));\n   T (mempcpy, (p, s, n));\n+  T (mempcpy, (p, b, sizeof *p));\n+  T (mempcpy, (p, b, n));\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, n));          // { dg-warning \"mempcpy\" }\n \n@@ -1368,7 +1473,8 @@ void test (HasAllPrivateData *p, const HasAllPrivateData &x,\n struct HasAllProtectedData { protected: char a[4]; };\n \n void test (HasAllProtectedData *p, const HasAllProtectedData &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -1389,6 +1495,7 @@ void test (HasAllProtectedData *p, const HasAllProtectedData &x,\n   T (memcpy, (p, &x, n));\n   T (memcpy, (p, q, sizeof *p));\n   T (memcpy, (p, s, sizeof *p));\n+  T (memcpy, (p, b, sizeof *p));\n   T (memcpy, (p, ia, sizeof *p));   // { dg-warning \"memcpy\" }\n   T (memcpy, (p, ia, n));           // { dg-warning \"memcpy\" }\n \n@@ -1397,6 +1504,7 @@ void test (HasAllProtectedData *p, const HasAllProtectedData &x,\n   T (memmove, (p, &x, n));\n   T (memmove, (p, q, sizeof *p));\n   T (memmove, (p, s, sizeof *p));\n+  T (memmove, (p, b, sizeof *p));\n   T (memmove, (p, ia, sizeof *p));  // { dg-warning \"memmove\" }\n   T (memmove, (p, ia, n));          // { dg-warning \"memmove\" }\n \n@@ -1407,6 +1515,8 @@ void test (HasAllProtectedData *p, const HasAllProtectedData &x,\n   T (mempcpy, (p, q, n));\n   T (mempcpy, (p, s, sizeof *p));\n   T (mempcpy, (p, s, n));\n+  T (mempcpy, (p, b, sizeof *p));\n+  T (mempcpy, (p, b, n));\n   T (mempcpy, (p, ia, sizeof *p));  // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, ia, n));          // { dg-warning \"mempcpy\" }\n \n@@ -1432,7 +1542,8 @@ private:\n };\n \n void test (HasDefaultPrivateAssign *p, const HasDefaultPrivateAssign &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -1462,16 +1573,22 @@ void test (HasDefaultPrivateAssign *p, const HasDefaultPrivateAssign &x,\n   T (memcpy, (p, q, n));            // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, n));            // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, b, n));            // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, q, n));           // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, n));           // { dg-warning \"memmove\" }\n+  T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, b, n));           // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, n));           // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, n));           // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, b, n));           // { dg-warning \"mempcpy\" }\n \n   // Same for partial copies are diagnosed.\n   T (memcpy, (p, &x, 1));   // { dg-warning \"writing to an object of type .struct HasDefaultPrivateAssign. with (deleted|no trivial) copy-assignment\" } */\n@@ -1503,7 +1620,8 @@ private:\n };\n \n void test (HasDefaultDeletedAssign *p, const HasDefaultDeletedAssign &x,\n-\t   const void *q, const unsigned char *s, const int ia[])\n+\t   const void *q, const unsigned char *s, const std::byte *b,\n+\t   const int ia[])\n {\n   const int i = *ia;\n   const size_t n = *ia;\n@@ -1533,16 +1651,22 @@ void test (HasDefaultDeletedAssign *p, const HasDefaultDeletedAssign &x,\n   T (memcpy, (p, q, n));            // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, sizeof *p));    // { dg-warning \"memcpy\" }\n   T (memcpy, (p, s, n));            // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, b, sizeof *p));    // { dg-warning \"memcpy\" }\n+  T (memcpy, (p, b, n));            // { dg-warning \"memcpy\" }\n \n   T (memmove, (p, q, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, q, n));           // { dg-warning \"memmove\" }\n   T (memmove, (p, s, sizeof *p));   // { dg-warning \"memmove\" }\n   T (memmove, (p, s, n));           // { dg-warning \"memmove\" }\n+  T (memmove, (p, b, sizeof *p));   // { dg-warning \"memmove\" }\n+  T (memmove, (p, b, n));           // { dg-warning \"memmove\" }\n \n   T (mempcpy, (p, q, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, q, n));           // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, sizeof *p));   // { dg-warning \"mempcpy\" }\n   T (mempcpy, (p, s, n));           // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, b, sizeof *p));   // { dg-warning \"mempcpy\" }\n+  T (mempcpy, (p, b, n));           // { dg-warning \"mempcpy\" }\n \n   // Same for partial copies are diagnosed.\n   T (memcpy, (p, &x, 1));   // { dg-warning \"writing to an object of type .struct HasDefaultDeletedAssign. with (deleted|no trivial) copy-assignment\" } */"}]}