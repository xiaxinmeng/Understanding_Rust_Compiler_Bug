{"sha": "40f1d2ab2662c2ed41707a2126ea0c5c9e028653", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBmMWQyYWIyNjYyYzJlZDQxNzA3YTIxMjZlYTBjNWM5ZTAyODY1Mw==", "commit": {"author": {"name": "Kirill Yukhin", "email": "kirill.yukhin@intel.com", "date": "2015-09-23T07:08:56Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2015-09-23T07:08:56Z"}, "message": "AVX-512. Add kshift[lr][bwdq]. Fix iterator.\n\ngcc/\n\t* config/i386/i386.md (define_code_attr mshift): New.\n\t(define_mode_iterator SWI1248_AVX512BW): Rename ...\n\t(SWI1248_AVX512BW): ... to this. Make QI enabled for TARGET_AVX512DQ\n\tonly.\n\t(define_insn \"*k<logic><mode>\"): Use new iterator name.\n\t(define_insn \"*<mshift><mode>3\"): New.\n\nFrom-SVN: r228034", "tree": {"sha": "ef404d1d522ae3fd925e48cd4969845561f3afc2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef404d1d522ae3fd925e48cd4969845561f3afc2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40f1d2ab2662c2ed41707a2126ea0c5c9e028653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f1d2ab2662c2ed41707a2126ea0c5c9e028653", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f1d2ab2662c2ed41707a2126ea0c5c9e028653", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f1d2ab2662c2ed41707a2126ea0c5c9e028653/comments", "author": null, "committer": null, "parents": [{"sha": "0c6126b47da9afbd99e5a353297b577ed2cdd09f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6126b47da9afbd99e5a353297b577ed2cdd09f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c6126b47da9afbd99e5a353297b577ed2cdd09f"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "0cc98c7febd64165d8e5602061765ed344704278", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f1d2ab2662c2ed41707a2126ea0c5c9e028653/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f1d2ab2662c2ed41707a2126ea0c5c9e028653/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40f1d2ab2662c2ed41707a2126ea0c5c9e028653", "patch": "@@ -1,3 +1,12 @@\n+2015-09-23  Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+\t* config/i386/i386.md (define_code_attr mshift): New.\n+\t(define_mode_iterator SWI1248_AVX512BW): Rename ...\n+\t(SWI1248_AVX512BW): ... to this. Make QI enabled for TARGET_AVX512DQ\n+\tonly.\n+\t(define_insn \"*k<logic><mode>\"): Use new iterator name.\n+\t(define_insn \"*<mshift><mode>3\"): New.\n+\n 2015-09-23  Mikhail Maltsev  <maltsevm@gmail.com>\n \n \tPR middle-end/67649"}, {"sha": "c0911d443dea9fc09253f229bc63925a042378b0", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f1d2ab2662c2ed41707a2126ea0c5c9e028653/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f1d2ab2662c2ed41707a2126ea0c5c9e028653/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=40f1d2ab2662c2ed41707a2126ea0c5c9e028653", "patch": "@@ -893,6 +893,9 @@\n (define_code_attr shift [(ashift \"sll\") (lshiftrt \"shr\") (ashiftrt \"sar\")])\n (define_code_attr vshift [(ashift \"sll\") (lshiftrt \"srl\") (ashiftrt \"sra\")])\n \n+;; Mask variant left right mnemonics\n+(define_code_attr mshift [(ashift \"shiftl\") (lshiftrt \"shiftr\")])\n+\n ;; Mapping of rotate operators\n (define_code_iterator any_rotate [rotate rotatert])\n \n@@ -935,9 +938,9 @@\n ;; All integer modes.\n (define_mode_iterator SWI1248x [QI HI SI DI])\n \n-;; All integer modes with AVX512BW.\n-(define_mode_iterator SWI1248_AVX512BW\n-  [QI HI (SI \"TARGET_AVX512BW\") (DI \"TARGET_AVX512BW\")])\n+;; All integer modes with AVX512BW/DQ.\n+(define_mode_iterator SWI1248_AVX512BWDQ\n+  [(QI \"TARGET_AVX512DQ\") HI (SI \"TARGET_AVX512BW\") (DI \"TARGET_AVX512BW\")])\n \n ;; All integer modes without QImode.\n (define_mode_iterator SWI248x [HI SI DI])\n@@ -7841,9 +7844,9 @@\n \t\t\t    (match_dup 2)))])\n \n (define_insn \"*k<logic><mode>\"\n-  [(set (match_operand:SWI1248_AVX512BW 0 \"mask_reg_operand\" \"=k\")\n-\t(any_logic:SWI1248_AVX512BW (match_operand:SWI1248_AVX512BW 1 \"mask_reg_operand\" \"k\")\n-\t\t\t  (match_operand:SWI1248_AVX512BW 2 \"mask_reg_operand\" \"k\")))]\n+  [(set (match_operand:SWI1248_AVX512BWDQ 0 \"mask_reg_operand\" \"=k\")\n+\t(any_logic:SWI1248_AVX512BWDQ (match_operand:SWI1248_AVX512BWDQ 1 \"mask_reg_operand\" \"k\")\n+\t\t\t  (match_operand:SWI1248_AVX512BWDQ 2 \"mask_reg_operand\" \"k\")))]\n   \"TARGET_AVX512F\"\n   {\n     if (!TARGET_AVX512DQ && <MODE>mode == QImode)\n@@ -9358,6 +9361,15 @@\n ;; shift pair, instead using moves and sign extension for counts greater\n ;; than 31.\n \n+(define_insn \"*<mshift><mode>3\"\n+  [(set (match_operand:SWI1248_AVX512BWDQ 0 \"register_operand\" \"=k\")\n+\t(any_lshift:SWI1248_AVX512BWDQ (match_operand:SWI1248_AVX512BWDQ 1 \"register_operand\" \"k\")\n+\t\t\t\t       (match_operand:QI 2 \"immediate_operand\" \"i\")))]\n+  \"TARGET_AVX512F\"\n+  \"k<mshift><mskmodesuffix> %2, %1, %0|%0, %1, %2\"\n+  [(set_attr \"type\" \"msklog\")\n+   (set_attr \"prefix\" \"vex\")])\n+\n (define_expand \"ashl<mode>3\"\n   [(set (match_operand:SDWIM 0 \"<shift_operand>\")\n \t(ashift:SDWIM (match_operand:SDWIM 1 \"<ashl_input_operand>\")"}]}