{"sha": "5b599df4d10201f3a83dbbaece526a2a22b49f18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI1OTlkZjRkMTAyMDFmM2E4M2RiYmFlY2U1MjZhMmEyMmI0OWYxOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-23T06:31:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-23T06:31:57Z"}, "message": "[multiple changes]\n\n2010-06-23  Jose Ruiz  <ruiz@adacore.com>\n\n\t* a-reatim.adb, a-retide.adb: Move the initialization of the tasking\n\trun time from Ada.Real_Time.Delays to Ada.Real_Time. This way, calls to\n\tClock (without delays) use a run time which is properly initialized.\n\n2010-06-23  Vincent Celier  <celier@adacore.com>\n\n\t* make.adb: Do not set Check_Readonly_Files when setting Must_Compile,\n\twhen -f -u and a main is specified on the command line. However,\n\tattempt to compile even when the ALI file is read-only when\n\tMust_Compile is True.\n\n2010-06-23  Thomas Quinot  <quinot@adacore.com>\n\n\t* checks.adb, g-pehage.adb, cstand.adb: Minor code factorization.\n\nFrom-SVN: r161248", "tree": {"sha": "894847d28e65a7dd99ebd10c39fd1215e393b7d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/894847d28e65a7dd99ebd10c39fd1215e393b7d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b599df4d10201f3a83dbbaece526a2a22b49f18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b599df4d10201f3a83dbbaece526a2a22b49f18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b599df4d10201f3a83dbbaece526a2a22b49f18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b599df4d10201f3a83dbbaece526a2a22b49f18/comments", "author": null, "committer": null, "parents": [{"sha": "b4d7b435e067d9f3df49ee3ed0a5cf4d6b09f8e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d7b435e067d9f3df49ee3ed0a5cf4d6b09f8e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4d7b435e067d9f3df49ee3ed0a5cf4d6b09f8e8"}], "stats": {"total": 102, "additions": 56, "deletions": 46}, "files": [{"sha": "edecef66f7ac78bd8266b1e3d7302a5195fd82be", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b599df4d10201f3a83dbbaece526a2a22b49f18/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b599df4d10201f3a83dbbaece526a2a22b49f18/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5b599df4d10201f3a83dbbaece526a2a22b49f18", "patch": "@@ -1,3 +1,20 @@\n+2010-06-23  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* a-reatim.adb, a-retide.adb: Move the initialization of the tasking\n+\trun time from Ada.Real_Time.Delays to Ada.Real_Time. This way, calls to\n+\tClock (without delays) use a run time which is properly initialized.\n+\n+2010-06-23  Vincent Celier  <celier@adacore.com>\n+\n+\t* make.adb: Do not set Check_Readonly_Files when setting Must_Compile,\n+\twhen -f -u and a main is specified on the command line. However,\n+\tattempt to compile even when the ALI file is read-only when\n+\tMust_Compile is True.\n+\n+2010-06-23  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* checks.adb, g-pehage.adb, cstand.adb: Minor code factorization.\n+\n 2010-06-23  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_ch3.adb (Add_Internal_Interface_Entities): Generate internal"}, {"sha": "026c28941a03774bb7ec5ad46fef750a2ba15da8", "filename": "gcc/ada/a-reatim.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b599df4d10201f3a83dbbaece526a2a22b49f18/gcc%2Fada%2Fa-reatim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b599df4d10201f3a83dbbaece526a2a22b49f18/gcc%2Fada%2Fa-reatim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-reatim.adb?ref=5b599df4d10201f3a83dbbaece526a2a22b49f18", "patch": "@@ -32,7 +32,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with System.OS_Primitives;\n+with System.Tasking;\n \n package body Ada.Real_Time is\n \n@@ -245,5 +245,9 @@ package body Ada.Real_Time is\n    end To_Time_Span;\n \n begin\n-   System.OS_Primitives.Initialize;\n+   --  Ensure that the tasking run time is initialized when using clock and/or\n+   --  delay operations. The initialization routine has the required machinery\n+   --  to prevent multiple calls to Initialize.\n+\n+   System.Tasking.Initialize;\n end Ada.Real_Time;"}, {"sha": "ecc61f6913a299eb228cfa4de9c325fa19ffbc65", "filename": "gcc/ada/a-retide.adb", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b599df4d10201f3a83dbbaece526a2a22b49f18/gcc%2Fada%2Fa-retide.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b599df4d10201f3a83dbbaece526a2a22b49f18/gcc%2Fada%2Fa-retide.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-retide.adb?ref=5b599df4d10201f3a83dbbaece526a2a22b49f18", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---         Copyright (C) 1992-2009, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2010, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -75,10 +75,4 @@ package body Ada.Real_Time.Delays is\n       return To_Duration (Time_Span (T));\n    end To_Duration;\n \n-begin\n-   --  Ensure that the tasking run time is initialized when using delay\n-   --  operations. The initialization routine has the required machinery to\n-   --  prevent multiple calls to Initialize.\n-\n-   System.Tasking.Initialize;\n end Ada.Real_Time.Delays;"}, {"sha": "59270e875a92fd539a5b476864c646102d314608", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b599df4d10201f3a83dbbaece526a2a22b49f18/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b599df4d10201f3a83dbbaece526a2a22b49f18/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=5b599df4d10201f3a83dbbaece526a2a22b49f18", "patch": "@@ -3351,7 +3351,7 @@ package body Checks is\n                         Indx := Next_Index (Indx);\n                      end loop;\n \n-                     --  if The index type is a formal type, or derived from\n+                     --  If the index type is a formal type or derived from\n                      --  one, the bounds are not static.\n \n                      if Is_Generic_Type (Root_Type (Etype (Indx))) then\n@@ -3378,8 +3378,8 @@ package body Checks is\n \n                            --  For constrained arrays, the minimum value for\n                            --  Length is taken from the actual value of the\n-                           --  bounds, since the index will be exactly of\n-                           --  this subtype.\n+                           --  bounds, since the index will be exactly of this\n+                           --  subtype.\n \n                            if Is_Constrained (Atyp) then\n                               Lor := UI_Max (Uint_0, UL - LU + 1);\n@@ -3395,7 +3395,7 @@ package body Checks is\n                   end;\n \n                --  No special handling for other attributes\n-               --  Probably more opportunities exist here ???\n+               --  Probably more opportunities exist here???\n \n                when others =>\n                   OK1 := False;\n@@ -3416,33 +3416,31 @@ package body Checks is\n             Hir := No_Uint;\n       end case;\n \n-      --  At this stage, if OK1 is true, then we know that the actual\n-      --  result of the computed expression is in the range Lor .. Hir.\n-      --  We can use this to restrict the possible range of results.\n+      --  At this stage, if OK1 is true, then we know that the actual result of\n+      --  the computed expression is in the range Lor .. Hir. We can use this\n+      --  to restrict the possible range of results.\n \n       if OK1 then\n \n-         --  If the refined value of the low bound is greater than the\n-         --  type high bound, then reset it to the more restrictive\n-         --  value. However, we do NOT do this for the case of a modular\n-         --  type where the possible upper bound on the value is above the\n-         --  base type high bound, because that means the result could wrap.\n+         --  If the refined value of the low bound is greater than the type\n+         --  high bound, then reset it to the more restrictive value. However,\n+         --  we do NOT do this for the case of a modular type where the\n+         --  possible upper bound on the value is above the base type high\n+         --  bound, because that means the result could wrap.\n \n          if Lor > Lo\n-           and then not (Is_Modular_Integer_Type (Typ)\n-                           and then Hir > Hbound)\n+           and then not (Is_Modular_Integer_Type (Typ) and then Hir > Hbound)\n          then\n             Lo := Lor;\n          end if;\n \n-         --  Similarly, if the refined value of the high bound is less\n-         --  than the value so far, then reset it to the more restrictive\n-         --  value. Again, we do not do this if the refined low bound is\n-         --  negative for a modular type, since this would wrap.\n+         --  Similarly, if the refined value of the high bound is less than the\n+         --  value so far, then reset it to the more restrictive value. Again,\n+         --  we do not do this if the refined low bound is negative for a\n+         --  modular type, since this would wrap.\n \n          if Hir < Hi\n-           and then not (Is_Modular_Integer_Type (Typ)\n-                          and then Lor < Uint_0)\n+           and then not (Is_Modular_Integer_Type (Typ) and then Lor < Uint_0)\n          then\n             Hi := Hir;\n          end if;\n@@ -3456,8 +3454,8 @@ package body Checks is\n       Determine_Range_Cache_Hi (Cindex) := Hi;\n       return;\n \n-   --  If any exception occurs, it means that we have some bug in the compiler\n-   --  possibly triggered by a previous error, or by some unforseen peculiar\n+   --  If any exception occurs, it means that we have some bug in the compiler,\n+   --  possibly triggered by a previous error, or by some unforeseen peculiar\n    --  occurrence. However, this is only an optimization attempt, so there is\n    --  really no point in crashing the compiler. Instead we just decide, too\n    --  bad, we can't figure out a range in this case after all."}, {"sha": "9f9332b72419a662566f5e062fc69b8d9649836f", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b599df4d10201f3a83dbbaece526a2a22b49f18/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b599df4d10201f3a83dbbaece526a2a22b49f18/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=5b599df4d10201f3a83dbbaece526a2a22b49f18", "patch": "@@ -324,7 +324,8 @@ package body CStand is\n       --  Procedure to declare given entity as an exception\n \n       procedure Pack_String_Type (String_Type : Entity_Id);\n-      --  Generate proper tree for pragma Pack that applies to given type\n+      --  Generate proper tree for pragma Pack that applies to given type, and\n+      --  mark type as having the pragma.\n \n       ---------------------\n       -- Build_Exception --\n@@ -359,6 +360,7 @@ package body CStand is\n       begin\n          Append (Prag, Decl_S);\n          Record_Rep_Item (String_Type, Prag);\n+         Set_Has_Pragma_Pack (String_Type, True);\n       end Pack_String_Type;\n \n    --  Start of processing for Create_Standard\n@@ -714,7 +716,6 @@ package body CStand is\n       Set_Component_Size  (Standard_String, Uint_8);\n       Init_Size_Align     (Standard_String);\n       Set_Alignment       (Standard_String, Uint_1);\n-      Set_Has_Pragma_Pack (Standard_String, True);\n       Pack_String_Type    (Standard_String);\n \n       --  On targets where a storage unit is larger than a byte (such as AAMP),\n@@ -758,7 +759,6 @@ package body CStand is\n       Set_Component_Type  (Standard_Wide_String, Standard_Wide_Character);\n       Set_Component_Size  (Standard_Wide_String, Uint_16);\n       Init_Size_Align     (Standard_Wide_String);\n-      Set_Has_Pragma_Pack (Standard_Wide_String, True);\n       Pack_String_Type    (Standard_Wide_String);\n \n       --  Set index type of Wide_String\n@@ -796,7 +796,6 @@ package body CStand is\n       Set_Component_Size   (Standard_Wide_Wide_String, Uint_32);\n       Init_Size_Align      (Standard_Wide_Wide_String);\n       Set_Is_Ada_2005_Only (Standard_Wide_Wide_String);\n-      Set_Has_Pragma_Pack  (Standard_Wide_Wide_String, True);\n       Pack_String_Type     (Standard_Wide_Wide_String);\n \n       --  Set index type of Wide_Wide_String"}, {"sha": "f64ee4cf693486ff60c7ff3dc7d6719d868c084e", "filename": "gcc/ada/g-pehage.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b599df4d10201f3a83dbbaece526a2a22b49f18/gcc%2Fada%2Fg-pehage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b599df4d10201f3a83dbbaece526a2a22b49f18/gcc%2Fada%2Fg-pehage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-pehage.adb?ref=5b599df4d10201f3a83dbbaece526a2a22b49f18", "patch": "@@ -146,7 +146,7 @@ package body GNAT.Perfect_Hash_Generators is\n    --  leading spaces if required by width W.\n \n    function Trim_Trailing_Nuls (Str : String) return String;\n-   --  Return Str, but with trailing NUL characters removed.\n+   --  Return Str with trailing NUL characters removed\n \n    Output : File_Descriptor renames GNAT.OS_Lib.Standout;\n    --  Shortcuts"}, {"sha": "fe157b0d9fe2b1e44ed05ea241315b44640059af", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b599df4d10201f3a83dbbaece526a2a22b49f18/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b599df4d10201f3a83dbbaece526a2a22b49f18/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=5b599df4d10201f3a83dbbaece526a2a22b49f18", "patch": "@@ -2448,8 +2448,8 @@ package body Make is\n       --  Info on the mapping file\n \n       Need_To_Check_Standard_Library : Boolean :=\n-                                         Check_Readonly_Files\n-                                           and not Unique_Compile;\n+                                         (Check_Readonly_Files or Must_Compile)\n+                                           and Unique_Compile;\n \n       procedure Add_Process\n         (Pid           : Process_Id;\n@@ -2905,7 +2905,7 @@ package body Make is\n \n          begin\n             if Is_Predefined_File_Name (Fname, False) then\n-               if Check_Readonly_Files then\n+               if Check_Readonly_Files or else Must_Compile then\n                   Comp_Args (Comp_Args'First + 2 .. Comp_Last + 1) :=\n                     Comp_Args (Comp_Args'First + 1 .. Comp_Last);\n                   Comp_Last := Comp_Last + 1;\n@@ -3103,7 +3103,7 @@ package body Make is\n                         if Is_Marked (Sfile, Source_Index) then\n                            Debug_Msg (\"Skipping marked file:\", Sfile);\n \n-                        elsif not Check_Readonly_Files\n+                        elsif not (Check_Readonly_Files or Must_Compile)\n                           and then Is_Internal_File_Name (Sfile, False)\n                         then\n                            Debug_Msg (\"Skipping internal file:\", Sfile);\n@@ -3283,16 +3283,15 @@ package body Make is\n                Executable_Obsolete := True;\n             end if;\n \n-            In_Lib_Dir := not Check_Readonly_Files\n-                            and then Full_Lib_File /= No_File\n-                            and then In_Ada_Lib_Dir (Full_Lib_File);\n+            In_Lib_Dir := Full_Lib_File /= No_File\n+                          and then In_Ada_Lib_Dir (Full_Lib_File);\n \n             --  Since the following requires a system call, we precompute it\n             --  when needed.\n \n             if not In_Lib_Dir then\n                if Full_Lib_File /= No_File\n-                 and then not Check_Readonly_Files\n+                 and then not (Check_Readonly_Files or else Must_Compile)\n                then\n                   Get_Name_String (Full_Lib_File);\n                   Name_Buffer (Name_Len + 1) := ASCII.NUL;\n@@ -3334,7 +3333,7 @@ package body Make is\n                --  Source and library files can be located but are internal\n                --  files.\n \n-            elsif not Check_Readonly_Files\n+            elsif not (Check_Readonly_Files or else Must_Compile)\n               and then Full_Lib_File /= No_File\n               and then Is_Internal_File_Name (Source_File, False)\n             then\n@@ -5196,7 +5195,6 @@ package body Make is\n         and then not Unique_Compile_All_Projects\n         and then Main_On_Command_Line\n       then\n-         Check_Readonly_Files := True;\n          Must_Compile := True;\n       end if;\n "}]}