{"sha": "2578a3870ef849dc77e98796600181b64ae4fd61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU3OGEzODcwZWY4NDlkYzc3ZTk4Nzk2NjAwMTgxYjY0YWU0ZmQ2MQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-09-17T14:57:34Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-09-17T14:57:34Z"}, "message": "PR c/102245: Disable sign-changing optimization for shifts by zero.\n\nRespecting Jakub's suggestion that it may be better to warn-on-valid for\n\"if (x << 0)\" as the author might have intended \"if (x < 0)\" [which will\nalso warn when x is _Bool], the simplest way to resolve this regression\nis to disable the recently added fold transformation for shifts by zero;\nthese will be optimized later (elsewhere).  Guarding against integer_zerop\nis the simplest of three alternatives; the second being to only apply\nthis transformation to GIMPLE and not GENERIC, and the third (potentially)\nbeing to explicitly handle shifts by zero here, with an (if cond then else),\noptimizing the expression to a convert, but awkwardly duplicating a\nmore general transformation earlier in match.pd's shift simplifications.\n\n2021-09-17  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR c/102245\n\t* match.pd (shift optimizations): Disable recent sign-changing\n\toptimization for shifts by zero, these will be folded later.\n\ngcc/testsuite/ChangeLog\n\tPR c/102245\n\t* gcc.dg/Wint-in-bool-context-4.c: New test case.", "tree": {"sha": "9f2347340d8588d96b01f059e809b7219f94156e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f2347340d8588d96b01f059e809b7219f94156e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2578a3870ef849dc77e98796600181b64ae4fd61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2578a3870ef849dc77e98796600181b64ae4fd61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2578a3870ef849dc77e98796600181b64ae4fd61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2578a3870ef849dc77e98796600181b64ae4fd61/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a60524de103288347dd193937059e4e77c64079", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a60524de103288347dd193937059e4e77c64079", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a60524de103288347dd193937059e4e77c64079"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "097ed2e5dffdbfffaf3241acfefd691dae53584a", "filename": "gcc/match.pd", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2578a3870ef849dc77e98796600181b64ae4fd61/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2578a3870ef849dc77e98796600181b64ae4fd61/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=2578a3870ef849dc77e98796600181b64ae4fd61", "patch": "@@ -3401,13 +3401,15 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n      (cmp @0 @2)))))\n \n /* Both signed and unsigned lshift produce the same result, so use\n-   the form that minimizes the number of conversions.  */\n+   the form that minimizes the number of conversions.  Postpone this\n+   transformation until after shifts by zero have been folded.  */\n (simplify\n  (convert (lshift:s@0 (convert:s@1 @2) INTEGER_CST@3))\n  (if (INTEGRAL_TYPE_P (type)\n       && tree_nop_conversion_p (type, TREE_TYPE (@0))\n       && INTEGRAL_TYPE_P (TREE_TYPE (@2))\n-      && TYPE_PRECISION (TREE_TYPE (@2)) <= TYPE_PRECISION (type))\n+      && TYPE_PRECISION (TREE_TYPE (@2)) <= TYPE_PRECISION (type)\n+      && !integer_zerop (@3))\n   (lshift (convert @2) @3)))\n \n /* Simplifications of conversions.  */"}, {"sha": "0e96dd7bd7c896f052e950437acc34cfd9d69f0f", "filename": "gcc/testsuite/gcc.dg/Wint-in-bool-context-4.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2578a3870ef849dc77e98796600181b64ae4fd61/gcc%2Ftestsuite%2Fgcc.dg%2FWint-in-bool-context-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2578a3870ef849dc77e98796600181b64ae4fd61/gcc%2Ftestsuite%2Fgcc.dg%2FWint-in-bool-context-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWint-in-bool-context-4.c?ref=2578a3870ef849dc77e98796600181b64ae4fd61", "patch": "@@ -0,0 +1,35 @@\n+/* PR c/102245 */\n+/* { dg-options \"-Wint-in-bool-context\" } */\n+/* { dg-do compile } */\n+\n+_Bool test1(_Bool x)\n+{\n+  return !(x << 0);  /* { dg-warning \"boolean context\" } */\n+}\n+\n+_Bool test2(_Bool x)\n+{\n+  return !(x << 1);  /* { dg-warning \"boolean context\" } */\n+}\n+\n+_Bool test3(_Bool x, int y)\n+{\n+  return !(x << y);  /* { dg-warning \"boolean context\" } */\n+}\n+\n+_Bool test4(int x, int y)\n+{\n+  return !(x << y);  /* { dg-warning \"boolean context\" } */\n+}\n+\n+_Bool test5(int x, int y)\n+{\n+  return !((x << y) << 0);  /* { dg-warning \"boolean context\" } */\n+}\n+\n+int test6(_Bool x)\n+{\n+  int v = 0;\n+  return (v & ~1L) | (1L & (x << 0));  /* { dg-bogus \"boolean context\" } */\n+}\n+"}]}