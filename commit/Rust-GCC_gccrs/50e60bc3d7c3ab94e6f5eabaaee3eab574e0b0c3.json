{"sha": "50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBlNjBiYzNkN2MzYWI5NGU2ZjVlYWJhYWVlM2VhYjU3NGUwYjBjMw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-08-02T17:01:13Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-08-02T17:01:13Z"}, "message": "c-common.h: Prototype min_precision and c_build_qualified_type here...\n\n\t* c-common.h: Prototype min_precision and c_build_qualified_type here...\n\t* c-tree.h: ... not here.\n\t* errors.h: Prototype fancy_abort.\n\n\t* emit-rtl.c (gen_lowpart_common): Move variable 'c' into\n\tHOST_BITS_PER_WIDE_INT == 64 ifdef block.\n\t* regrename.c (regrename_optimize): Make control flow explicit.\n\t(replace_reg_in_block): Initialize reg_use to 0.\n\n\t* i386.c (legitimate_address_p): Rename error label to\n\treport_error to avoid namespace clash.\n\ncp:\n\t* cp-tree.h: Don't prototype min_precision here.\n\t(my_friendly_assert): Cast expression to void.\n\t* semantics.c (do_poplevel): Initialize scope_stmts.\n\nf:\n\t* expr.c (ffeexpr_finished_): Cast signed side of ?:\n\texpression to bool.\n\njava:\n\t* class.c (build_dtable_decl): Initialize dummy.\n\nintl:\n\t* dcgettext.c (find_msg): Initialize act before loop.\n\t(guess_category_value): Add dummy uses of both parameters.\n\t* localealias.c (read_alias_file): Cast arg of strchr to char *.\n\nFrom-SVN: r35427", "tree": {"sha": "33e626ecf7d173a341ab289bdd457e7b358a8650", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33e626ecf7d173a341ab289bdd457e7b358a8650"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/comments", "author": null, "committer": null, "parents": [{"sha": "3f954fc3f38a0fd76f8107b75f0f0b5936a29fd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f954fc3f38a0fd76f8107b75f0f0b5936a29fd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f954fc3f38a0fd76f8107b75f0f0b5936a29fd9"}], "stats": {"total": 150, "additions": 94, "deletions": 56}, "files": [{"sha": "5c7d740f5a3fbca7c1124df8c3d9f8bbf8cae403", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "patch": "@@ -1,3 +1,17 @@\n+2000-08-02  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* c-common.h: Prototype min_precision and c_build_qualified_type here...\n+\t* c-tree.h: ... not here.\n+\t* errors.h: Prototype fancy_abort.\n+\n+\t* emit-rtl.c (gen_lowpart_common): Move variable 'c' into\n+\tHOST_BITS_PER_WIDE_INT == 64 ifdef block.\n+\t* regrename.c (regrename_optimize): Make control flow explicit.\n+\t(replace_reg_in_block): Initialize reg_use to 0.\n+\n+\t* i386.c (legitimate_address_p): Rename error label to\n+\treport_error to avoid namespace clash.\n+\n 2000-08-02  Kazu Hirata  <kazu@hxi.com>\n \n \t* fold-const.c: Fix formatting."}, {"sha": "a7675dda05fc71cb78b4970f5f3b56a0f59581e0", "filename": "gcc/c-common.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "patch": "@@ -260,6 +260,11 @@ extern tree truthvalue_conversion\t\tPARAMS ((tree));\n extern tree type_for_mode\t\t\tPARAMS ((enum machine_mode, int));\n extern tree type_for_size\t\t\tPARAMS ((unsigned, int));\n \n+extern unsigned int min_precision\t\tPARAMS ((tree, int));\n+\n+/* Add qualifiers to a type, in the fashion for C.  */\n+extern tree c_build_qualified_type              PARAMS ((tree, int));\n+\n /* Build tree nodes and builtin functions common to both C and C++ language\n    frontends.  */\n extern void c_common_nodes_and_builtins\t\tPARAMS ((int, int, int));"}, {"sha": "21236078dc7875ff743b6075908f2a90dcce7def", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "patch": "@@ -151,16 +151,12 @@ extern void c_parse_init\t\t\tPARAMS ((void));\n /* in c-aux-info.c */\n extern void gen_aux_info_record                 PARAMS ((tree, int, int, int));\n \n-/* In c-common.c */\n-extern unsigned int min_precision\t\tPARAMS ((tree, int));\n-\n /* in c-convert.c */\n extern tree convert                             PARAMS ((tree, tree));\n \n /* in c-decl.c */\n extern tree build_enumerator                    PARAMS ((tree, tree));\n-/* Add qualifiers to a type, in the fashion for C.  */\n-extern tree c_build_qualified_type              PARAMS ((tree, int));\n+\n #define c_build_type_variant(TYPE, CONST_P, VOLATILE_P)\t\t  \\\n   c_build_qualified_type (TYPE, \t\t\t\t  \\\n \t\t\t  ((CONST_P) ? TYPE_QUAL_CONST : 0) |\t  \\"}, {"sha": "e8e984a8f38925ee36fc8cb351465e373d36e80d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "patch": "@@ -2396,7 +2396,7 @@ legitimate_address_p (mode, addr, strict)\n   if (! ix86_decompose_address (addr, &parts))\n     {\n       reason = \"decomposition failed\";\n-      goto error;\n+      goto report_error;\n     }\n \n   base = parts.base;\n@@ -2417,20 +2417,20 @@ legitimate_address_p (mode, addr, strict)\n       if (GET_CODE (base) != REG)\n \t{\n \t  reason = \"base is not a register\";\n-\t  goto error;\n+\t  goto report_error;\n \t}\n \n       if (GET_MODE (base) != Pmode)\n \t{\n \t  reason = \"base is not in Pmode\";\n-\t  goto error;\n+\t  goto report_error;\n \t}\n \n       if ((strict && ! REG_OK_FOR_BASE_STRICT_P (base))\n \t  || (! strict && ! REG_OK_FOR_BASE_NONSTRICT_P (base)))\n \t{\n \t  reason = \"base is not valid\";\n-\t  goto error;\n+\t  goto report_error;\n \t}\n     }\n \n@@ -2447,20 +2447,20 @@ legitimate_address_p (mode, addr, strict)\n       if (GET_CODE (index) != REG)\n \t{\n \t  reason = \"index is not a register\";\n-\t  goto error;\n+\t  goto report_error;\n \t}\n \n       if (GET_MODE (index) != Pmode)\n \t{\n \t  reason = \"index is not in Pmode\";\n-\t  goto error;\n+\t  goto report_error;\n \t}\n \n       if ((strict && ! REG_OK_FOR_INDEX_STRICT_P (index))\n \t  || (! strict && ! REG_OK_FOR_INDEX_NONSTRICT_P (index)))\n \t{\n \t  reason = \"index is not valid\";\n-\t  goto error;\n+\t  goto report_error;\n \t}\n     }\n \n@@ -2471,13 +2471,13 @@ legitimate_address_p (mode, addr, strict)\n       if (!index)\n \t{\n \t  reason = \"scale without index\";\n-\t  goto error;\n+\t  goto report_error;\n \t}\n \n       if (scale != 2 && scale != 4 && scale != 8)\n \t{\n \t  reason = \"scale is not a valid multiplier\";\n-\t  goto error;\n+\t  goto report_error;\n \t}\n     }\n \n@@ -2489,21 +2489,21 @@ legitimate_address_p (mode, addr, strict)\n       if (!CONSTANT_ADDRESS_P (disp))\n \t{\n \t  reason = \"displacement is not constant\";\n-\t  goto error;\n+\t  goto report_error;\n \t}\n \n       if (GET_CODE (disp) == CONST_DOUBLE)\n \t{\n \t  reason = \"displacement is a const_double\";\n-\t  goto error;\n+\t  goto report_error;\n \t}\n \n       if (flag_pic && SYMBOLIC_CONST (disp))\n \t{\n \t  if (! legitimate_pic_address_disp_p (disp))\n \t    {\n \t      reason = \"displacement is an invalid pic construct\";\n-\t      goto error;\n+\t      goto report_error;\n \t    }\n \n           /* This code used to verify that a symbolic pic displacement\n@@ -2519,7 +2519,7 @@ legitimate_address_p (mode, addr, strict)\n \t         return *(&a+i);\n \t       }\n \n-\t     This code nonsential, but results in addressing\n+\t     This code is nonsensical, but results in addressing\n \t     GOT table with pic_offset_table_rtx base.  We can't\n \t     just refuse it easilly, since it gets matched by\n \t     \"addsi3\" pattern, that later gets split to lea in the\n@@ -2534,7 +2534,7 @@ legitimate_address_p (mode, addr, strict)\n \t      || (base != NULL_RTX || index != NULL_RTX))\n \t    {\n \t      reason = \"displacement is an invalid half-pic reference\";\n-\t      goto error;\n+\t      goto report_error;\n \t    }\n \t}\n     }\n@@ -2544,7 +2544,7 @@ legitimate_address_p (mode, addr, strict)\n     fprintf (stderr, \"Success.\\n\");\n   return TRUE;\n \n-error:\n+report_error:\n   if (TARGET_DEBUG_ADDR)\n     {\n       fprintf (stderr, \"Error: %s\\n\", reason);"}, {"sha": "84b1cab45a99c0c2f1f51cf6ffe1cf3da984b166", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "patch": "@@ -1,3 +1,9 @@\n+2000-08-02  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* cp-tree.h: Don't prototype min_precision here.\n+\t(my_friendly_assert): Cast expression to void.\n+\t* semantics.c (do_poplevel): Initialize scope_stmts.\n+\n 2000-08-02  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (DECL_NEEDED_P): Tweak."}, {"sha": "ec2646c806f83264d78074dddceb4fe8b6c800a5", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "patch": "@@ -3246,7 +3246,6 @@ extern tree convert_and_check\t\t\tPARAMS ((tree, tree));\n extern void overflow_warning\t\t\tPARAMS ((tree));\n extern void unsigned_conversion_warning\t\tPARAMS ((tree, tree));\n extern void c_apply_type_quals_to_decl          PARAMS ((int, tree));\n-extern unsigned int min_precision\t\tPARAMS ((tree, int));\n \n /* Read the rest of the current #-directive line.  */\n #if USE_CPPLIB\n@@ -4628,7 +4627,7 @@ extern void friendly_abort\t\t\tPARAMS ((int, const char *,\n \n #define my_friendly_abort(N) \\\n   friendly_abort (N, __FILE__, __LINE__, __FUNCTION__)\n-#define my_friendly_assert(EXP, N) \\\n+#define my_friendly_assert(EXP, N) (void) \\\n  (((EXP) == 0) ? (friendly_abort (N, __FILE__, __LINE__, __FUNCTION__), 0) : 0)\n \n extern tree store_init_value\t\t\tPARAMS ((tree, tree));"}, {"sha": "066f6756b679e1b3f2665e0781d40ca21c2f7085", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "patch": "@@ -140,7 +140,7 @@ do_poplevel ()\n \n   if (stmts_are_full_exprs_p ())\n     {\n-      tree scope_stmts;\n+      tree scope_stmts = NULL_TREE;\n \n       if (!processing_template_decl)\n \tscope_stmts = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0);"}, {"sha": "122c58570eae4af438cd077a73511ad54873f284", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "patch": "@@ -931,7 +931,6 @@ gen_lowpart_common (mode, x)\n       REAL_VALUE_TYPE r;\n       long i[4];  /* Only the low 32 bits of each 'long' are used.  */\n       int endian = WORDS_BIG_ENDIAN ? 1 : 0;\n-      int c;\n \n       REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n       switch (GET_MODE (x))\n@@ -959,16 +958,20 @@ gen_lowpart_common (mode, x)\n #if HOST_BITS_PER_WIDE_INT == 32\n       return immed_double_const (i[endian], i[1-endian], mode);\n #else\n-      if (HOST_BITS_PER_WIDE_INT != 64)\n-\tabort();\n-      for (c = 0; c < 4; c++)\n-\ti[c] &= 0xffffffffL;\n+      {\n+\tint c;\n+\n+\tif (HOST_BITS_PER_WIDE_INT != 64)\n+\t  abort();\n+\tfor (c = 0; c < 4; c++)\n+\t  i[c] &= 0xffffffffL;\n       \n-      return immed_double_const (i[endian*3] | \n-\t\t\t\t (((HOST_WIDE_INT) i[1+endian]) << 32),\n-\t\t\t\t i[2-endian] |\n-\t\t\t\t (((HOST_WIDE_INT) i[3-endian*3]) << 32),\n-\t\t\t\t mode);\n+\treturn immed_double_const (i[endian*3] | \n+\t\t\t\t   (((HOST_WIDE_INT) i[1+endian]) << 32),\n+\t\t\t\t   i[2-endian] |\n+\t\t\t\t   (((HOST_WIDE_INT) i[3-endian*3]) << 32),\n+\t\t\t\t   mode);\n+      }\n #endif\n     }\n #endif /* ifndef REAL_ARITHMETIC */"}, {"sha": "e782d2012afc205658f5d220ef2259d4f5e979d4", "filename": "gcc/errors.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Ferrors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Ferrors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ferrors.h?ref=50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "patch": "@@ -29,6 +29,8 @@ extern void warning PARAMS ((const char *format, ...)) ATTRIBUTE_PRINTF_1;\n extern void error   PARAMS ((const char *format, ...)) ATTRIBUTE_PRINTF_1;\n extern void fatal   PARAMS ((const char *format, ...))\n     ATTRIBUTE_PRINTF_1 ATTRIBUTE_NORETURN;\n+extern void fancy_abort PARAMS ((const char *file, int line, const char *func))\n+    ATTRIBUTE_NORETURN;\n \n extern int have_error;\n extern const char *progname;"}, {"sha": "504d5cb6b9695218fb02e27d83bd27c4a353c02f", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "patch": "@@ -1,3 +1,8 @@\n+2000-08-02  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* expr.c (ffeexpr_finished_): Cast signed side of ?:\n+\texpression to bool.\n+\n 2000-07-31  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* lang-specs.h: Rename cpp to cpp0 and/or tradcpp to tradcpp0."}, {"sha": "2a46a9dbddb04636554beb9b88f0024c81baecee", "filename": "gcc/f/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Ff%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Ff%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fexpr.c?ref=50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "patch": "@@ -13162,7 +13162,7 @@ ffeexpr_finished_ (ffelexToken t)\n \t  error = (expr == NULL)\n \t    || ((ffeinfo_rank (info) != 0) ?\n \t\tffe_is_pedantic ()\t/* F77 C5. */\n-\t\t: (ffeinfo_kindtype (info) != ffecom_label_kind ()))\n+\t\t: (bool) (ffeinfo_kindtype (info) != ffecom_label_kind ()))\n \t    || (ffebld_op (expr) != FFEBLD_opSYMTER);\n \t  break;\n "}, {"sha": "48d0d7069acd975e2faeca18c8968f249a861aab", "filename": "gcc/intl/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fintl%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fintl%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintl%2FChangeLog?ref=50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "patch": "@@ -1,4 +1,11 @@\n+2000-08-02  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* dcgettext.c (find_msg): Initialize act before loop.\n+\t(guess_category_value): Add dummy uses of both parameters.\n+\t* localealias.c (read_alias_file): Cast arg of strchr to char *.\n+\n 2000-06-06  Philipp Thomas  <pthomas@suse.de>\n+\n \t* Makefile.in: Add -DIN_GCC to DEFS, add appropriate -I switches.\n \t* dcgettext.c: Define _GNU_SOURCE before any system header is\n \tincluded. Guard getcwd declaration with HAVE_DECL_GETCWD."}, {"sha": "a830f1de12425db91fc2c584235cb435de4bc35b", "filename": "gcc/intl/dcgettext.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fintl%2Fdcgettext.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fintl%2Fdcgettext.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintl%2Fdcgettext.c?ref=50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "patch": "@@ -455,6 +455,7 @@ find_msg (domain_file, msgid)\n   /* Now we try the default method:  binary search in the sorted\n      array of messages.  */\n   bottom = 0;\n+  act = 0;\n   top = domain->nstrings;\n   while (bottom < top)\n     {\n@@ -547,6 +548,8 @@ guess_category_value (category, categoryname)\n      const char *categoryname;\n {\n   const char *retval;\n+  (void) category;  /* shut up compiler */\n+  (void) categoryname;  /* ditto */\n \n   /* The highest priority value is the `LANGUAGE' environment\n      variable.  This is a GNU extension.  */"}, {"sha": "513cdc78e39c3de38f1c180f32dc1bfb83f4d4c1", "filename": "gcc/intl/localealias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fintl%2Flocalealias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fintl%2Flocalealias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintl%2Flocalealias.c?ref=50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "patch": "@@ -257,7 +257,7 @@ read_alias_file (fname, fname_len)\n \n       /* Possibly not the whole line fits into the buffer.  Ignore\n \t the rest of the line.  */\n-      if (strchr (buf, '\\n') == NULL)\n+      if (strchr ((char *)buf, '\\n') == NULL)\n \t{\n \t  char altbuf[BUFSIZ];\n \t  do"}, {"sha": "26762bdf51adc10d8508b127aeb84075505cfcdc", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "patch": "@@ -1,3 +1,7 @@\n+2000-08-02  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* class.c (build_dtable_decl): Initialize dummy.\n+\n 2000-07-27  Tom Tromey  <tromey@cygnus.com>\n             Anthony Green  <green@cygnus.com>\n \t    Alexandre Petit-Bianco  <apbianco@cygnus.com>"}, {"sha": "7cd6e666ac007cbe3c48d4982be91090ce4cecd9", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "patch": "@@ -1698,7 +1698,7 @@ build_dtable_decl (type)\n      TYPE. */\n   if (current_class == type)\n     {\n-      tree dummy, aomt, n;\n+      tree dummy = NULL_TREE, aomt, n;\n \n       dtype = make_node (RECORD_TYPE);\n       PUSH_FIELD (dtype, dummy, \"class\", class_ptr_type);"}, {"sha": "b29046bffefc4abfebc37656a6934bca829a46b6", "filename": "gcc/regrename.c", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=50e60bc3d7c3ab94e6f5eabaaee3eab574e0b0c3", "patch": "@@ -347,32 +347,26 @@ regrename_optimize ()\n \t\t\tif (consider_available (reg_use, avail_reg,\n \t\t\t\t\t\t&avail_regs, rc, &du,\n \t\t\t\t\t\tdef_idx[def]))\n-\t\t\t  break;\n+\t\t\t  goto found_avail_reg;\n \t\t      }\n \n-\t\t    if (ar_idx == FIRST_PSEUDO_REGISTER)\n+\t\t    if (rtl_dump_file)\n \t\t      {\n-\t\t\tif (rtl_dump_file)\n-\t\t\t  {\n-\t\t\t    fprintf (rtl_dump_file,\n-\t\t\t\t     \"Register %s in class %s\",\n-\t\t\t\t     reg_names[r], reg_class_names[rc]);\n-\t\t\t    fprintf (rtl_dump_file,\n-\t\t\t\t     \" in insn %d\",\n-\t\t\t\t     INSN_UID (VARRAY_RTX (uid_ruid,\n-\t\t\t\t\t\t\t   def_idx[def])));\n-\n-\t\t\t    if (TEST_BIT (du.require_call_save_reg,\n-\t\t\t\t\t  def_idx[def]))\n-\t\t\t      fprintf (rtl_dump_file, \" crosses a call\");\n+\t\t\tfprintf (rtl_dump_file, \"Register %s in class %s\",\n+\t\t\t\t reg_names[r], reg_class_names[rc]);\n+\t\t\tfprintf (rtl_dump_file, \" in insn %d\",\n+\t\t\t\t INSN_UID (VARRAY_RTX (uid_ruid,\n+\t\t\t\t\t\t       def_idx[def])));\n \n-\t\t\t    fprintf (rtl_dump_file,\n-\t\t\t\t     \". No available registers\\n\");\n-\t\t\t  }\n+\t\t\tif (TEST_BIT (du.require_call_save_reg,\n+\t\t\t\t      def_idx[def]))\n+\t\t\t  fprintf (rtl_dump_file, \" crosses a call\");\n \n-\t\t\tgoto try_next_def;\n+\t\t\tfprintf (rtl_dump_file, \". No available registers\\n\");\n \t\t      }\n+\t\t    goto try_next_def;\n \n+\t\t  found_avail_reg:\n \t\t    SET_HARD_REG_BIT (renamed_regs, avail_reg);\n \t\t    CLEAR_HARD_REG_BIT (avail_regs, avail_reg);\n \n@@ -530,7 +524,7 @@ replace_reg_in_block (du, uid_ruid, def, reg_def, avail_reg)\n   unsigned int r = REGNO (reg_def);\n   rtx death_note;\n   rtx reg_notes;\n-  rtx reg_use;\n+  rtx reg_use = 0;\n   rtx new_reg = gen_rtx_REG (GET_MODE (reg_def), avail_reg);\n \n   rr_replace_reg (PATTERN (VARRAY_RTX (*uid_ruid, def)), reg_def, new_reg,"}]}