{"sha": "73ae6eb572515ad627b575a7fbdfdd47a4368e1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNhZTZlYjU3MjUxNWFkNjI3YjU3NWE3ZmJkZmRkNDdhNDM2OGUxYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-30T17:24:48Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-30T17:41:12Z"}, "message": "libstdc++: Use __is_same instead of __is_same_as\n\nPR 92271 added __is_same as another spelling of __is_same_as. Since\nClang also spells it __is_same, let's just use that consistently.\n\nIt appears that Intel icc sets __GNUC__ to 10, but only supports\n__is_same_as. If we only use __is_same for __GNUC__ >= 11 then we won't\nbreak icc again (it looks like we broke previous versions of icc when we\nstarted using __is_same_as).\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/c++config (_GLIBCXX_HAVE_BUILTIN_IS_SAME):\n\tDefine for GCC 11 or when !__is_identifier(__is_same).\n\t(_GLIBCXX_BUILTIN_IS_SAME_AS): Remove.\n\t* include/std/type_traits (is_same, is_same_v): Replace uses\n\tof _GLIBCXX_BUILTIN_IS_SAME_AS.", "tree": {"sha": "aaed6e14092cf913cfc5defb44616e24a5b0a8ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aaed6e14092cf913cfc5defb44616e24a5b0a8ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73ae6eb572515ad627b575a7fbdfdd47a4368e1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73ae6eb572515ad627b575a7fbdfdd47a4368e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73ae6eb572515ad627b575a7fbdfdd47a4368e1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73ae6eb572515ad627b575a7fbdfdd47a4368e1c/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "091ddcc1b2199cdf8146fb00cf55ef9162e237b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091ddcc1b2199cdf8146fb00cf55ef9162e237b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/091ddcc1b2199cdf8146fb00cf55ef9162e237b9"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "2e6c880ad95a1cc1dfdead2bbcfb977960172ac5", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73ae6eb572515ad627b575a7fbdfdd47a4368e1c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73ae6eb572515ad627b575a7fbdfdd47a4368e1c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=73ae6eb572515ad627b575a7fbdfdd47a4368e1c", "patch": "@@ -658,10 +658,12 @@ namespace std\n # define _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP 1\n # define _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE 1\n # define _GLIBCXX_HAVE_BUILTIN_LAUNDER 1\n-# define _GLIBCXX_BUILTIN_IS_SAME_AS(T, U) __is_same_as(T, U)\n # if __GNUC__ >= 9\n #  define _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED 1\n # endif\n+# if __GNUC__ >= 11\n+#  define _GLIBCXX_HAVE_BUILTIN_IS_SAME 1\n+# endif\n #elif defined(__is_identifier) && defined(__has_builtin)\n // For non-GNU compilers:\n # if ! __is_identifier(__has_unique_object_representations)\n@@ -677,7 +679,7 @@ namespace std\n #  define _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED 1\n # endif\n # if ! __is_identifier(__is_same)\n-#  define _GLIBCXX_BUILTIN_IS_SAME_AS(T, U) __is_same(T, U)\n+#  define _GLIBCXX_HAVE_BUILTIN_IS_SAME 1\n # endif\n #endif // GCC\n "}, {"sha": "9994c9ae3d731c598118f474d67077693e822b70", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73ae6eb572515ad627b575a7fbdfdd47a4368e1c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73ae6eb572515ad627b575a7fbdfdd47a4368e1c/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=73ae6eb572515ad627b575a7fbdfdd47a4368e1c", "patch": "@@ -1394,14 +1394,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_same\n   template<typename _Tp, typename _Up>\n     struct is_same\n-#ifdef _GLIBCXX_BUILTIN_IS_SAME_AS\n-    : public integral_constant<bool, _GLIBCXX_BUILTIN_IS_SAME_AS(_Tp, _Up)>\n+#ifdef _GLIBCXX_HAVE_BUILTIN_IS_SAME\n+    : public integral_constant<bool, __is_same(_Tp, _Up)>\n #else\n     : public false_type\n #endif\n     { };\n \n-#ifndef _GLIBCXX_BUILTIN_IS_SAME_AS\n+#ifndef _GLIBCXX_HAVE_BUILTIN_IS_SAME\n   template<typename _Tp>\n     struct is_same<_Tp, _Tp>\n     : public true_type\n@@ -3215,9 +3215,9 @@ template <typename _Tp>\n   inline constexpr size_t rank_v = rank<_Tp>::value;\n template <typename _Tp, unsigned _Idx = 0>\n   inline constexpr size_t extent_v = extent<_Tp, _Idx>::value;\n-#ifdef _GLIBCXX_BUILTIN_IS_SAME_AS\n+#ifdef _GLIBCXX_HAVE_BUILTIN_IS_SAME\n template <typename _Tp, typename _Up>\n-  inline constexpr bool is_same_v = _GLIBCXX_BUILTIN_IS_SAME_AS(_Tp, _Up);\n+  inline constexpr bool is_same_v = __is_same(_Tp, _Up);\n #else\n template <typename _Tp, typename _Up>\n   inline constexpr bool is_same_v = std::is_same<_Tp, _Up>::value;"}]}