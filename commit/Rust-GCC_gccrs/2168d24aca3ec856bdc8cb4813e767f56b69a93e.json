{"sha": "2168d24aca3ec856bdc8cb4813e767f56b69a93e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE2OGQyNGFjYTNlYzg1NmJkYzhjYjQ4MTNlNzY3ZjU2YjY5YTkzZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-05T19:54:38Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-05T19:54:38Z"}, "message": "Makefile.in (ggc-simple.o): Depend on varray.h.\n\n\t* Makefile.in (ggc-simple.o): Depend on varray.h.\n\t(rtl.o): Depend on ggc.h.\n\t(genattrtab.o): Depend on ggc.h.\n\t(print-tree.o): Likewise.\n\t(fold-const.o): Likewise.\n\t* emit-rtl.c (sequence_element_free_list): Remove, and all references.\n\t(make_insn_raw): Don't cache insns when GC'ing.\n\t(emit_insn_before): Likewise.\n\t(emit_insn_after): Likewise.\n\t(emit_insn): Likewise.\n\t(start_sequence): Use xmalloc to allocate the sequence_stack.\n\t(end_sequence): Add free to free it.\n\t(gen_sequence): Don't cache insns when GC'ing.\n\t(clear_emit_caches): Don't use sequence_element_free_list.\n\t(init_emit): Use xcalloc, not xmalloc+bzero.\n\t* fold-const.c (size_int_wide): Kill the cache, when GC'ing.\n\t* function.c (pop_function_context_from): Use free to free the\n\tfixup_var_refs_queue.\n\t(put_reg_into_stack): Allocate it with xmalloc.\n\t* genattrtab.c: Include ggc.h.\n\t(operate_exp): Don't use obstack_free when GC'ing.\n\t(simplify_cond): Likewise.\n\t(simplify_text_exp): Likewise.\n\t(optimize_attrs): Likewise.\n\t* gengenrtl.c (gendef): Use ggc_alloc_rtx to allocate RTL, when\n\tGC'ing.\n\t(gencode): Generate a #include for ggc.h.\n\t* ggc-callbacks.c (ggc_p): Define it to zero.\n\t* ggc-none.c (ggc_p): Likewise.\n\t* ggc-simple.c: Include varray.h.\n\t(ggc_mark_tree_varray): New function.\n\t(ggc_add_tree_varray_root): Likewise.\n\t(ggc_mark_tree_varray_ptr): Likewise.\n\t* ggc.h (ggc_p): Declare.\n\t(varray_head_tag): Likewise.\n\t(ggc_add_tree_varray_root): Declare.\n\t* print-tree.c (print_node): Don't check for TREE_PERMANENT\n\tinconsistencies when GC'ing.\n\t* rtl.c: Include ggc.h.\n\t(rtvec_alloc): Use ggc_alloc_rtvec when GC'ing.\n\t(rtx_alloc): Use ggc_alloc_rtx when GC'ing.\n\t(rtx_free): Don't call obstack_free when GC'ing.\n\t* toplev.c (rest_of_compilation): Call ggc_collect after every\n\tpass, if GC'ing.\n\t* tree.c (push_obstacks): Do nothing, if GC'ing.\n\t(pop_obstacks_nochange): Likewise.\n\t(pop_obstacks): Likewise.\n\t(make_node): Use ggc_alloc_tree when GC'ing.\n\t(copy_node): Likewise.\n\t(get_identifier): Use ggc_alloc_string when GC'ing.\n\t(build_string): Likewise.\n\t(make_tree_vec): Use ggc_alloc_tree when GC'ing.\n\t(tree_cons): Likewise.\n\t(build1): Likewise.\n\t(type_hash_canon): Don't call obstack_free when GC'ing.\n\nFrom-SVN: r29131", "tree": {"sha": "ea6cf6a58829228360b2871229cd307b52850d7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea6cf6a58829228360b2871229cd307b52850d7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2168d24aca3ec856bdc8cb4813e767f56b69a93e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2168d24aca3ec856bdc8cb4813e767f56b69a93e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2168d24aca3ec856bdc8cb4813e767f56b69a93e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2168d24aca3ec856bdc8cb4813e767f56b69a93e/comments", "author": null, "committer": null, "parents": [{"sha": "76292ef82fd062fbd0dc047d90e9d1e3a7545c93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76292ef82fd062fbd0dc047d90e9d1e3a7545c93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76292ef82fd062fbd0dc047d90e9d1e3a7545c93"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "5a3211f64feb51f02fe83c085815a8ce8e316e6c", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2168d24aca3ec856bdc8cb4813e767f56b69a93e/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2168d24aca3ec856bdc8cb4813e767f56b69a93e/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=2168d24aca3ec856bdc8cb4813e767f56b69a93e", "patch": "@@ -242,7 +242,12 @@ gendef (f, format)\n \n   /* See rtx_alloc in rtl.c for comments.  */\n   fprintf (f, \"{\\n\");\n-  fprintf (f, \"  rtx rt = obstack_alloc_rtx (sizeof (struct rtx_def) + %d * sizeof (rtunion));\\n\",\n+  fprintf (f, \"  rtx rt;\\n\");\n+  fprintf (f, \"  if (ggc_p)\\n\");\n+  fprintf (f, \"    rt = ggc_alloc_rtx (%d);\\n\", \n+\t   (int) strlen (format));\n+  fprintf (f, \"  else\\n\");\n+  fprintf (f, \"    rt = obstack_alloc_rtx (sizeof (struct rtx_def) + %d * sizeof (rtunion));\\n\",\n \t   (int) strlen (format) - 1);\n \n   fprintf (f, \"  PUT_CODE (rt, code);\\n\");\n@@ -301,7 +306,8 @@ gencode (f)\n   fputs (\"#include \\\"config.h\\\"\\n\", f);\n   fputs (\"#include \\\"system.h\\\"\\n\", f);\n   fputs (\"#include \\\"obstack.h\\\"\\n\", f);\n-  fputs (\"#include \\\"rtl.h\\\"\\n\\n\", f);\n+  fputs (\"#include \\\"rtl.h\\\"\\n\", f);\n+  fputs (\"#include \\\"ggc.h\\\"\\n\\n\", f);\n   fputs (\"extern struct obstack *rtl_obstack;\\n\\n\", f);\n   fputs (\"static rtx obstack_alloc_rtx PROTO((int length));\\n\", f);\n   fputs (\"static rtx obstack_alloc_rtx (length)\\n\", f);"}]}