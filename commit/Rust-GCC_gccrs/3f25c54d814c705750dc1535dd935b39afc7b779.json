{"sha": "3f25c54d814c705750dc1535dd935b39afc7b779", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YyNWM1NGQ4MTRjNzA1NzUwZGMxNTM1ZGQ5MzViMzlhZmM3Yjc3OQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T08:26:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T08:26:13Z"}, "message": "[multiple changes]\n\n2009-04-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* a-calend.adb: Remove types char_Pointer, int, tm and tm_Pointer.\n\t(localtime_tzoff): This routine no longer accepts an actual of type\n\ttm_Pointer.\n\t(UTC_Time_Offset): Remove local variable Secs_TM.\n\n\t* sysdep.c (__gnat_localtime_tzoff): This routine no longer accepts an\n\tactual of type struct tm*. Add local variable of type struct tm for all\n\ttargets that provide localtime_r and need to invoke it.\n\n2009-04-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* s-oscons-tmplt.c, g-socket.adb, g-socket.ads\n\t(GNAT.Sockets.Resolve_Error): Add case of EPIPE\n\tAdd case of EAGAIN for platforms where it is not equal to EWOULDBLOCK\n\nFrom-SVN: r146369", "tree": {"sha": "bd81a0aab892d56ae076ec2454b8fbf55ef392a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd81a0aab892d56ae076ec2454b8fbf55ef392a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f25c54d814c705750dc1535dd935b39afc7b779", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f25c54d814c705750dc1535dd935b39afc7b779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f25c54d814c705750dc1535dd935b39afc7b779", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f25c54d814c705750dc1535dd935b39afc7b779/comments", "author": null, "committer": null, "parents": [{"sha": "8dbf3473b19d7579acb40e4f0342d4a1c055e4d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dbf3473b19d7579acb40e4f0342d4a1c055e4d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dbf3473b19d7579acb40e4f0342d4a1c055e4d5"}], "stats": {"total": 172, "additions": 100, "deletions": 72}, "files": [{"sha": "b9463f6a4d39de9fb4c0f110c9bc897a27a62d2d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f25c54d814c705750dc1535dd935b39afc7b779/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f25c54d814c705750dc1535dd935b39afc7b779/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3f25c54d814c705750dc1535dd935b39afc7b779", "patch": "@@ -1,3 +1,20 @@\n+2009-04-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* a-calend.adb: Remove types char_Pointer, int, tm and tm_Pointer.\n+\t(localtime_tzoff): This routine no longer accepts an actual of type\n+\ttm_Pointer.\n+\t(UTC_Time_Offset): Remove local variable Secs_TM.\n+\n+\t* sysdep.c (__gnat_localtime_tzoff): This routine no longer accepts an\n+\tactual of type struct tm*. Add local variable of type struct tm for all\n+\ttargets that provide localtime_r and need to invoke it.\n+\n+2009-04-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* s-oscons-tmplt.c, g-socket.adb, g-socket.ads\n+\t(GNAT.Sockets.Resolve_Error): Add case of EPIPE\n+\tAdd case of EAGAIN for platforms where it is not equal to EWOULDBLOCK\n+\n 2009-04-20  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb: Minor reformatting"}, {"sha": "9aa88521b90570594ff90f1a4a559a58f9555788", "filename": "gcc/ada/a-calend.adb", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f25c54d814c705750dc1535dd935b39afc7b779/gcc%2Fada%2Fa-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f25c54d814c705750dc1535dd935b39afc7b779/gcc%2Fada%2Fa-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend.adb?ref=3f25c54d814c705750dc1535dd935b39afc7b779", "patch": "@@ -1474,39 +1474,15 @@ package body Ada.Calendar is\n \n       Nanos_In_56_Years : constant := (14 * 366 + 42 * 365) * Nanos_In_Day;\n \n-      --  Base C types. There is no point dragging in Interfaces.C just for\n-      --  these four types.\n-\n-      type char_Pointer is access Character;\n-      subtype int is Integer;\n       subtype long is Long_Integer;\n       type long_Pointer is access all long;\n \n-      --  The Ada equivalent of struct tm and type time_t\n-\n-      type tm is record\n-         tm_sec    : int;           --  seconds after the minute (0 .. 60)\n-         tm_min    : int;           --  minutes after the hour (0 .. 59)\n-         tm_hour   : int;           --  hours since midnight (0 .. 24)\n-         tm_mday   : int;           --  day of the month (1 .. 31)\n-         tm_mon    : int;           --  months since January (0 .. 11)\n-         tm_year   : int;           --  years since 1900\n-         tm_wday   : int;           --  days since Sunday (0 .. 6)\n-         tm_yday   : int;           --  days since January 1 (0 .. 365)\n-         tm_isdst  : int;           --  Daylight Savings Time flag (-1 .. 1)\n-         tm_gmtoff : long;          --  offset from UTC in seconds\n-         tm_zone   : char_Pointer;  --  timezone abbreviation\n-      end record;\n-\n-      type tm_Pointer is access all tm;\n-\n       subtype time_t is long;\n       type time_t_Pointer is access all time_t;\n \n       procedure localtime_tzoff\n-       (C   : time_t_Pointer;\n-        res : tm_Pointer;\n-        off : long_Pointer);\n+       (timer : time_t_Pointer;\n+        off   : long_Pointer);\n       pragma Import (C, localtime_tzoff, \"__gnat_localtime_tzoff\");\n       --  This is a lightweight wrapper around the system library function\n       --  localtime_r. Parameter 'off' captures the UTC offset which is either\n@@ -1522,7 +1498,6 @@ package body Ada.Calendar is\n          Date_N   : Time_Rep;\n          Offset   : aliased long;\n          Secs_T   : aliased time_t;\n-         Secs_TM  : aliased tm;\n \n       begin\n          Date_N := Time_Rep (Date);\n@@ -1568,7 +1543,6 @@ package body Ada.Calendar is\n \n          localtime_tzoff\n            (Secs_T'Unchecked_Access,\n-            Secs_TM'Unchecked_Access,\n             Offset'Unchecked_Access);\n \n          return Offset;"}, {"sha": "784d0626bad5dc989f042cd2c12696f172641f06", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f25c54d814c705750dc1535dd935b39afc7b779/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f25c54d814c705750dc1535dd935b39afc7b779/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=3f25c54d814c705750dc1535dd935b39afc7b779", "patch": "@@ -1681,6 +1681,17 @@ package body GNAT.Sockets is\n          end case;\n       end if;\n \n+      --  Special case: EAGAIN may be the same value as EWOULDBLOCK, so we\n+      --  can't include it in the case statement below.\n+\n+      pragma Warnings (Off);\n+      --  Condition \"EAGAIN /= EWOULDBLOCK\" is known at compile time\n+\n+      if EAGAIN /= EWOULDBLOCK and then Error_Value = EAGAIN then\n+         return Resource_Temporarily_Unavailable;\n+      end if;\n+      pragma Warnings (On);\n+\n       case Error_Value is\n          when ENOERROR        => return Success;\n          when EACCES          => return Permission_Denied;\n@@ -1716,6 +1727,7 @@ package body GNAT.Sockets is\n          when ENOTSOCK        => return Socket_Operation_On_Non_Socket;\n          when EOPNOTSUPP      => return Operation_Not_Supported;\n          when EPFNOSUPPORT    => return Protocol_Family_Not_Supported;\n+         when EPIPE           => return Broken_Pipe;\n          when EPROTONOSUPPORT => return Protocol_Not_Supported;\n          when EPROTOTYPE      => return Protocol_Wrong_Type_For_Socket;\n          when ESHUTDOWN       => return\n@@ -1724,10 +1736,9 @@ package body GNAT.Sockets is\n          when ETIMEDOUT       => return Connection_Timed_Out;\n          when ETOOMANYREFS    => return Too_Many_References;\n          when EWOULDBLOCK     => return Resource_Temporarily_Unavailable;\n-         when others          => null;\n-      end case;\n \n-      return Cannot_Resolve_Error;\n+         when others          => return Cannot_Resolve_Error;\n+      end case;\n    end Resolve_Error;\n \n    -----------------------"}, {"sha": "f8dd6bfecfca6ce69e9e409f86729d98aaf36fff", "filename": "gcc/ada/g-socket.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f25c54d814c705750dc1535dd935b39afc7b779/gcc%2Fada%2Fg-socket.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f25c54d814c705750dc1535dd935b39afc7b779/gcc%2Fada%2Fg-socket.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.ads?ref=3f25c54d814c705750dc1535dd935b39afc7b779", "patch": "@@ -603,6 +603,9 @@ package GNAT.Sockets is\n    --  brackets and a string describing the error code.\n \n    --  The name of the enumeration constant documents the error condition\n+   --  Note that on some platforms, a single error value is used for both\n+   --  EWOULDBLOCK and EAGAIN. Both errors are therefore always reported as\n+   --  Resource_Temporarily_Unavailable.\n \n    type Error_Type is\n      (Success,\n@@ -644,6 +647,7 @@ package GNAT.Sockets is\n       Connection_Timed_Out,\n       Too_Many_References,\n       Resource_Temporarily_Unavailable,\n+      Broken_Pipe,\n       Unknown_Host,\n       Host_Name_Lookup_Failure,\n       Non_Recoverable_Error,"}, {"sha": "e6e1849154292e2bafa6e190ff17bcb07be8b9fa", "filename": "gcc/ada/s-oscons-tmplt.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f25c54d814c705750dc1535dd935b39afc7b779/gcc%2Fada%2Fs-oscons-tmplt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f25c54d814c705750dc1535dd935b39afc7b779/gcc%2Fada%2Fs-oscons-tmplt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-oscons-tmplt.c?ref=3f25c54d814c705750dc1535dd935b39afc7b779", "patch": "@@ -451,6 +451,11 @@ CND(ENOTSOCK, \"Operation on non socket\")\n #endif\n CND(EOPNOTSUPP, \"Operation not supported\")\n \n+#ifndef EPIPE\n+# define EPIPE -1\n+#endif\n+CND(EPIPE, \"Broken pipe\")\n+\n #ifndef EPFNOSUPPORT\n # define EPFNOSUPPORT -1\n #endif"}, {"sha": "8a227b42037d9d98699780b388ad6d3883943fde", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 58, "deletions": 41, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f25c54d814c705750dc1535dd935b39afc7b779/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f25c54d814c705750dc1535dd935b39afc7b779/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=3f25c54d814c705750dc1535dd935b39afc7b779", "patch": "@@ -743,26 +743,53 @@ extern void (*Unlock_Task) (void);\n \n /* Reentrant localtime for Windows and OS/2. */\n \n-extern struct tm *\n-__gnat_localtime_tzoff (const time_t *, struct tm *, long *);\n+extern void\n+__gnat_localtime_tzoff (const time_t *, long *);\n \n-struct tm *\n-__gnat_localtime_tzoff (const time_t *timer, struct tm *tp, long *off)\n+static const unsigned long long w32_epoch_offset = 11644473600ULL;\n+void\n+__gnat_localtime_tzoff (const time_t *timer, long *off)\n {\n-  DWORD dwRet;\n-  struct tm *tmp;\n+  union\n+  {\n+    FILETIME ft_time;\n+    unsigned long long ull_time;\n+  } utc_time, local_time;\n+\n+  SYSTEMTIME utc_sys_time, local_sys_time;\n   TIME_ZONE_INFORMATION tzi;\n \n+  BOOL  status = 1;\n+  DWORD tzi_status;\n+\n   (*Lock_Task) ();\n-  tmp = localtime (timer);\n-  memcpy (tp, tmp, sizeof (struct tm));\n-  dwRet = GetTimeZoneInformation (&tzi);\n-  *off = tzi.Bias;\n-  if (tp->tm_isdst > 0)\n-    *off = *off + tzi.DaylightBias;\n-  *off = *off * -60;\n+\n+  /* First convert unix time_t structure to windows FILETIME format.  */\n+  utc_time.ull_time = ((unsigned long long) *timer + w32_epoch_offset)\n+                      * 10000000ULL;\n+\n+  tzi_status = GetTimeZoneInformation (&tzi);\n+\n+  /* If GetTimeZoneInformation does not return a value between 0 and 2 then\n+     it means that we were not able to retrieve timezone informations.\n+     Note that we cannot use here FileTimeToLocalFileTime as Windows will use\n+     in always in this case the current timezone setting. As suggested on\n+     MSDN we use the following three system calls to get the right information.\n+     Note also that starting with Windows Vista new functions are provided to\n+     get timezone settings that depend on the year. We cannot use them as we\n+     still support Windows XP and Windows 2003.  */\n+  status = (tzi_status >= 0 && tzi_status <= 2)\n+     && FileTimeToSystemTime (&utc_time.ft_time, &utc_sys_time)\n+     && SystemTimeToTzSpecificLocalTime (&tzi, &utc_sys_time, &local_sys_time)\n+     && SystemTimeToFileTime (&local_sys_time, &local_time.ft_time);\n+\n+  if (!status)\n+     /* An error occurs so return invalid_tzoff.  */\n+     *off = __gnat_invalid_tzoff;\n+  else\n+     *off = (long) ((local_time.ull_time - utc_time.ull_time) / 10000000ULL);\n+\n   (*Unlock_Task) ();\n-  return tp;\n }\n \n #else\n@@ -774,16 +801,14 @@ __gnat_localtime_tzoff (const time_t *timer, struct tm *tp, long *off)\n    spec is required. Only use when ___THREADS_POSIX4ad4__ is defined,\n    the Lynx convention when building against the legacy API. */\n \n-extern struct tm *\n-__gnat_localtime_tzoff (const time_t *, struct tm *, long *);\n+extern void\n+__gnat_localtime_tzoff (const time_t *, long *);\n \n-struct tm *\n-__gnat_localtime_tzoff (const time_t *timer, struct tm *tp, long *off)\n+void\n+__gnat_localtime_tzoff (const time_t *timer, long *off)\n {\n   /* Treat all time values in GMT */\n-  localtime_r (tp, timer);\n   *off = 0;\n-  return NULL;\n }\n \n #else\n@@ -795,28 +820,21 @@ __gnat_localtime_tzoff (const time_t *timer, struct tm *tp, long *off)\n \n /* All other targets provide a standard localtime_r */\n \n-extern struct tm *\n-__gnat_localtime_tzoff (const time_t *, struct tm *, long *);\n+extern void\n+__gnat_localtime_tzoff (const time_t *, long *);\n \n-struct tm *\n-__gnat_localtime_tzoff (const time_t *timer, struct tm *tp, long *off)\n+void\n+__gnat_localtime_tzoff (const time_t *timer, long *off)\n {\n-   localtime_r (timer, tp);\n+   struct tm tp;\n+   localtime_r (timer, &tp);\n \n /* AIX, HPUX, SGI Irix, Sun Solaris */\n #if defined (_AIX) || defined (__hpux__) || defined (sgi) || defined (sun)\n-  /* The contents of external variable \"timezone\" may not always be\n-     initialized. Instead of returning an incorrect offset, treat the local\n-     time zone as 0 (UTC). The value of 28 hours is the maximum valid offset\n-     allowed by Ada.Calendar.Time_Zones. */\n-  if ((timezone < -28 * 3600) || (timezone > 28 * 3600))\n-    *off = 0;\n-  else\n-  {\n-    *off = (long) -timezone;\n-    if (tp->tm_isdst > 0)\n-      *off = *off + 3600;\n-   }\n+   *off = (long) -timezone;\n+   if (tp.tm_isdst > 0)\n+     *off = *off + 3600;\n+\n /* Lynx - Treat all time values in GMT */\n #elif defined (__Lynx__)\n   *off = 0;\n@@ -850,17 +868,16 @@ __gnat_localtime_tzoff (const time_t *timer, struct tm *tp, long *off)\n   }\n }\n \n-/* Darwin, Free BSD, Linux, Tru64, where there exists a component tm_gmtoff\n-   in struct tm */\n+/* Darwin, Free BSD, Linux, Tru64, where component tm_gmtoff is present in\n+   struct tm */\n #elif defined (__APPLE__) || defined (__FreeBSD__) || defined (linux) ||\\\n      (defined (__alpha__) && defined (__osf__)) || defined (__GLIBC__)\n-  *off = tp->tm_gmtoff;\n+  *off = tp.tm_gmtoff;\n \n /* All other platforms: Treat all time values in GMT */\n #else\n   *off = 0;\n #endif\n-   return NULL;\n }\n \n #endif"}]}