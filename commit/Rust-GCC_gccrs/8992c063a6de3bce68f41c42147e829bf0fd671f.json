{"sha": "8992c063a6de3bce68f41c42147e829bf0fd671f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk5MmMwNjNhNmRlM2JjZTY4ZjQxYzQyMTQ3ZTgyOWJmMGZkNjcxZg==", "commit": {"author": {"name": "Mark Wielaard", "email": "mjw@redhat.com", "date": "2011-05-04T06:59:09Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2011-05-04T06:59:09Z"}, "message": "Remove unused debug_str_hash_forced from dwarf2out.\n\n    * dwarf2out.c (debug_str_hash_forced): Removed.\n    (gen_label_for_indirect_string): Removed.\n    (get_debug_string_label): Removed.\n    (AT_string_form): Generate label directly.\n    (output_indirect_string): Test indirect_string_node for\n    DW_FORM_strp instead of checking label and refcount.\n    (prune_indirect_string): Removed.\n    (prune_unused_types): Don't check debug_str_hash_forced or\n    call prune_indirect_string.\n\nFrom-SVN: r173355", "tree": {"sha": "76fc7a9c1184bd54a6eb60887b7770a1001f7ef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76fc7a9c1184bd54a6eb60887b7770a1001f7ef2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8992c063a6de3bce68f41c42147e829bf0fd671f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8992c063a6de3bce68f41c42147e829bf0fd671f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8992c063a6de3bce68f41c42147e829bf0fd671f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8992c063a6de3bce68f41c42147e829bf0fd671f/comments", "author": null, "committer": null, "parents": [{"sha": "4868e6ea1e3a2c095bc6615475299dd7d1e1e5a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4868e6ea1e3a2c095bc6615475299dd7d1e1e5a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4868e6ea1e3a2c095bc6615475299dd7d1e1e5a0"}], "stats": {"total": 74, "additions": 18, "deletions": 56}, "files": [{"sha": "f316172752e85bc8979ea3d32fc5d7491acc0c13", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8992c063a6de3bce68f41c42147e829bf0fd671f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8992c063a6de3bce68f41c42147e829bf0fd671f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8992c063a6de3bce68f41c42147e829bf0fd671f", "patch": "@@ -1,3 +1,15 @@\n+2011-05-03  Mark Wielaard  <mjw@redhat.com>\n+\n+\t* dwarf2out.c (debug_str_hash_forced): Removed.\n+\t(gen_label_for_indirect_string): Removed.\n+\t(get_debug_string_label): Removed.\n+\t(AT_string_form): Generate label directly.\n+\t(output_indirect_string): Test indirect_string_node for\n+\tDW_FORM_strp instead of checking label and refcount.\n+\t(prune_indirect_string): Removed.\n+\t(prune_unused_types): Don't check debug_str_hash_forced or\n+\tcall prune_indirect_string.\n+\n 2011-05-04  Alexandre Oliva  <aoliva@redhat.com>\n \n \tPR other/48093"}, {"sha": "382d9183d907871e3cebe8c66b3614dc6e1976ea", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 6, "deletions": 56, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8992c063a6de3bce68f41c42147e829bf0fd671f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8992c063a6de3bce68f41c42147e829bf0fd671f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=8992c063a6de3bce68f41c42147e829bf0fd671f", "patch": "@@ -433,10 +433,6 @@ struct GTY(()) indirect_string_node {\n \n static GTY ((param_is (struct indirect_string_node))) htab_t debug_str_hash;\n \n-/* True if the compilation unit has location entries that reference\n-   debug strings.  */\n-static GTY(()) bool debug_str_hash_forced = false;\n-\n static GTY(()) int dw2_string_counter;\n static GTY(()) unsigned long dwarf2out_cfi_label_num;\n \n@@ -7676,37 +7672,6 @@ add_AT_string (dw_die_ref die, enum dwarf_attribute attr_kind, const char *str)\n   add_dwarf_attr (die, &attr);\n }\n \n-/* Create a label for an indirect string node, ensuring it is going to\n-   be output, unless its reference count goes down to zero.  */\n-\n-static inline void\n-gen_label_for_indirect_string (struct indirect_string_node *node)\n-{\n-  char label[32];\n-\n-  if (node->label)\n-    return;\n-\n-  ASM_GENERATE_INTERNAL_LABEL (label, \"LASF\", dw2_string_counter);\n-  ++dw2_string_counter;\n-  node->label = xstrdup (label);\n-}\n-\n-/* Create a SYMBOL_REF rtx whose value is the initial address of a\n-   debug string STR.  */\n-\n-static inline rtx\n-get_debug_string_label (const char *str)\n-{\n-  struct indirect_string_node *node = find_AT_string (str);\n-\n-  debug_str_hash_forced = true;\n-\n-  gen_label_for_indirect_string (node);\n-\n-  return gen_rtx_SYMBOL_REF (Pmode, node->label);\n-}\n-\n static inline const char *\n AT_string (dw_attr_ref a)\n {\n@@ -7722,6 +7687,7 @@ AT_string_form (dw_attr_ref a)\n {\n   struct indirect_string_node *node;\n   unsigned int len;\n+  char label[32];\n \n   gcc_assert (a && AT_class (a) == dw_val_class_str);\n \n@@ -7744,7 +7710,9 @@ AT_string_form (dw_attr_ref a)\n       && (len - DWARF_OFFSET_SIZE) * node->refcount <= len))\n     return node->form = DW_FORM_string;\n \n-  gen_label_for_indirect_string (node);\n+  ASM_GENERATE_INTERNAL_LABEL (label, \"LASF\", dw2_string_counter);\n+  ++dw2_string_counter;\n+  node->label = xstrdup (label);\n \n   return node->form = DW_FORM_strp;\n }\n@@ -23069,7 +23037,7 @@ output_indirect_string (void **h, void *v ATTRIBUTE_UNUSED)\n {\n   struct indirect_string_node *node = (struct indirect_string_node *) *h;\n \n-  if (node->label && node->refcount)\n+  if (node->form == DW_FORM_strp)\n     {\n       switch_to_section (debug_str_section);\n       ASM_OUTPUT_LABEL (asm_out_file, node->label);\n@@ -23386,21 +23354,6 @@ prune_unused_types_prune (dw_die_ref die)\n   } while (c != die->die_child);\n }\n \n-/* A helper function for dwarf2out_finish called through\n-   htab_traverse.  Clear .debug_str strings that we haven't already\n-   decided to emit.  */\n-\n-static int\n-prune_indirect_string (void **h, void *v ATTRIBUTE_UNUSED)\n-{\n-  struct indirect_string_node *node = (struct indirect_string_node *) *h;\n-\n-  if (!node->label || !node->refcount)\n-    htab_clear_slot (debug_str_hash, h);\n-\n-  return 1;\n-}\n-\n /* Remove dies representing declarations that we never use.  */\n \n static void\n@@ -23441,10 +23394,7 @@ prune_unused_types (void)\n   for (i = 0; VEC_iterate (dw_die_ref, base_types, i, base_type); i++)\n     prune_unused_types_mark (base_type, 1);\n \n-  /* Get rid of nodes that aren't marked; and update the string counts.  */\n-  if (debug_str_hash && debug_str_hash_forced)\n-    htab_traverse (debug_str_hash, prune_indirect_string, NULL);\n-  else if (debug_str_hash)\n+  if (debug_str_hash)\n     htab_empty (debug_str_hash);\n   prune_unused_types_prune (comp_unit_die ());\n   for (node = limbo_die_list; node; node = node->next)"}]}