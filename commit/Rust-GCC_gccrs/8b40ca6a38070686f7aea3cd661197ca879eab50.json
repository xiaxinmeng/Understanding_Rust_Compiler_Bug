{"sha": "8b40ca6a38070686f7aea3cd661197ca879eab50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI0MGNhNmEzODA3MDY4NmY3YWVhM2NkNjYxMTk3Y2E4NzllYWI1MA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2015-08-28T20:46:43Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2015-08-28T20:46:43Z"}, "message": "re PR fortran/53668 (Cray-pointer diagnostic enhancement)\n\n\tPR fortran/53668\n\n\t* intrinsic.c (add_functions, add_subroutines): Remove resolution\n\tfunctions for FREE and MALLOC.\n\t* intrinsic.h (gfc_resolve_malloc, gfc_resolve_free): Remove.\n\t* iresolve.c (gfc_resolve_malloc, gfc_resolve_free): Remove.\n\t* trans-intrinsic.c (conv_intrinsic_free,\n\tgfc_conv_intrinsic_malloc): New functions.\n\n\t* intrinsics/malloc.c: Adapt comments.\n\nFrom-SVN: r227311", "tree": {"sha": "0cc3b76b4a34aabc245c4c35deaea7eeae0bd64b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cc3b76b4a34aabc245c4c35deaea7eeae0bd64b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b40ca6a38070686f7aea3cd661197ca879eab50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b40ca6a38070686f7aea3cd661197ca879eab50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b40ca6a38070686f7aea3cd661197ca879eab50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b40ca6a38070686f7aea3cd661197ca879eab50/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a2b17c9ddcb00d54aae6de4a5f2367488c400ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a2b17c9ddcb00d54aae6de4a5f2367488c400ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a2b17c9ddcb00d54aae6de4a5f2367488c400ca"}], "stats": {"total": 107, "additions": 66, "deletions": 41}, "files": [{"sha": "24def1b486286e8be0fe3230b21c946d0ce87f4a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b40ca6a38070686f7aea3cd661197ca879eab50/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b40ca6a38070686f7aea3cd661197ca879eab50/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8b40ca6a38070686f7aea3cd661197ca879eab50", "patch": "@@ -1,3 +1,13 @@\n+2015-08-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/53668\n+\t* intrinsic.c (add_functions, add_subroutines): Remove resolution\n+\tfunctions for FREE and MALLOC.\n+\t* intrinsic.h (gfc_resolve_malloc, gfc_resolve_free): Remove.\n+\t* iresolve.c (gfc_resolve_malloc, gfc_resolve_free): Remove.\n+\t* trans-intrinsic.c (conv_intrinsic_free,\n+\tgfc_conv_intrinsic_malloc): New functions.\n+\n 2015-08-24  Louis Krupp <louis.krupp@zoho.com>\n \n \tPR fortran/62536"}, {"sha": "b46a5b21b79ae44e8c3bd303413ad5de5bac9b9b", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b40ca6a38070686f7aea3cd661197ca879eab50/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b40ca6a38070686f7aea3cd661197ca879eab50/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=8b40ca6a38070686f7aea3cd661197ca879eab50", "patch": "@@ -2298,7 +2298,7 @@ add_functions (void)\n   make_generic (\"lstat\", GFC_ISYM_LSTAT, GFC_STD_GNU);\n \n   add_sym_1 (\"malloc\", GFC_ISYM_MALLOC, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER, ii,\n-\t     GFC_STD_GNU, gfc_check_malloc, NULL, gfc_resolve_malloc,\n+\t     GFC_STD_GNU, gfc_check_malloc, NULL, NULL,\n \t     sz, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"malloc\", GFC_ISYM_MALLOC, GFC_STD_GNU);\n@@ -3433,7 +3433,7 @@ add_subroutines (void)\n \t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   add_sym_1s (\"free\", GFC_ISYM_FREE, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t      gfc_check_free, NULL, gfc_resolve_free,\n+\t      gfc_check_free, NULL, NULL,\n \t      ptr, BT_INTEGER, ii, REQUIRED, INTENT_INOUT);\n \n   add_sym_4s (\"fseek\", GFC_ISYM_FSEEK, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,"}, {"sha": "4e91b822b227adcd9563b3253ebb19a523ef1c6a", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b40ca6a38070686f7aea3cd661197ca879eab50/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b40ca6a38070686f7aea3cd661197ca879eab50/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=8b40ca6a38070686f7aea3cd661197ca879eab50", "patch": "@@ -522,7 +522,6 @@ void gfc_resolve_log (gfc_expr *, gfc_expr *);\n void gfc_resolve_log10 (gfc_expr *, gfc_expr *);\n void gfc_resolve_logical (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_lstat (gfc_expr *, gfc_expr *, gfc_expr *);\n-void gfc_resolve_malloc (gfc_expr *, gfc_expr *);\n void gfc_resolve_matmul (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_max (gfc_expr *, gfc_actual_arglist *);\n void gfc_resolve_maxloc (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n@@ -605,7 +604,6 @@ void gfc_resolve_exit (gfc_code *);\n void gfc_resolve_fdate_sub (gfc_code *);\n void gfc_resolve_fe_runtime_error (gfc_code *);\n void gfc_resolve_flush (gfc_code *);\n-void gfc_resolve_free (gfc_code *);\n void gfc_resolve_fseek_sub (gfc_code *);\n void gfc_resolve_fstat_sub (gfc_code *);\n void gfc_resolve_ftell_sub (gfc_code *);"}, {"sha": "7503f18374914cce90793ecd2a1e95f0e9f971c9", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b40ca6a38070686f7aea3cd661197ca879eab50/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b40ca6a38070686f7aea3cd661197ca879eab50/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=8b40ca6a38070686f7aea3cd661197ca879eab50", "patch": "@@ -1504,25 +1504,6 @@ gfc_resolve_logical (gfc_expr *f, gfc_expr *a, gfc_expr *kind)\n }\n \n \n-void\n-gfc_resolve_malloc (gfc_expr *f, gfc_expr *size)\n-{\n-  if (size->ts.kind < gfc_index_integer_kind)\n-    {\n-      gfc_typespec ts;\n-      gfc_clear_ts (&ts);\n-\n-      ts.type = BT_INTEGER;\n-      ts.kind = gfc_index_integer_kind;\n-      gfc_convert_type_warn (size, &ts, 2, 0);\n-    }\n-\n-  f->ts.type = BT_INTEGER;\n-  f->ts.kind = gfc_index_integer_kind;\n-  f->value.function.name = gfc_get_string (PREFIX (\"malloc\"));\n-}\n-\n-\n void\n gfc_resolve_matmul (gfc_expr *f, gfc_expr *a, gfc_expr *b)\n {\n@@ -3385,23 +3366,6 @@ gfc_resolve_flush (gfc_code *c)\n }\n \n \n-void\n-gfc_resolve_free (gfc_code *c)\n-{\n-  gfc_typespec ts;\n-  gfc_expr *n;\n-  gfc_clear_ts (&ts);\n-\n-  ts.type = BT_INTEGER;\n-  ts.kind = gfc_index_integer_kind;\n-  n = c->ext.actual->expr;\n-  if (n->ts.kind != ts.kind)\n-    gfc_convert_type (n, &ts, 2);\n-\n-  c->resolved_sym = gfc_get_intrinsic_sub_symbol (PREFIX (\"free\"));\n-}\n-\n-\n void\n gfc_resolve_ctime_sub (gfc_code *c)\n {"}, {"sha": "554469efff0e96f2d0b85ad1c20b646eeb6e7776", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b40ca6a38070686f7aea3cd661197ca879eab50/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b40ca6a38070686f7aea3cd661197ca879eab50/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=8b40ca6a38070686f7aea3cd661197ca879eab50", "patch": "@@ -2657,6 +2657,27 @@ gfc_conv_intrinsic_fdate (gfc_se * se, gfc_expr * expr)\n }\n \n \n+/* Generate a direct call to free() for the FREE subroutine.  */\n+\n+static tree\n+conv_intrinsic_free (gfc_code *code)\n+{\n+  stmtblock_t block;\n+  gfc_se argse;\n+  tree arg, call;\n+\n+  gfc_init_se (&argse, NULL);\n+  gfc_conv_expr (&argse, code->ext.actual->expr);\n+  arg = fold_convert (ptr_type_node, argse.expr);\n+\n+  gfc_init_block (&block);\n+  call = build_call_expr_loc (input_location,\n+\t\t\t      builtin_decl_explicit (BUILT_IN_FREE), 1, arg);\n+  gfc_add_expr_to_block (&block, call);\n+  return gfc_finish_block (&block);\n+}\n+\n+\n /* Call the SYSTEM_CLOCK library functions, handling the type and kind\n    conversions.  */\n \n@@ -7648,6 +7669,22 @@ gfc_conv_ieee_arithmetic_function (gfc_se * se, gfc_expr * expr)\n }\n \n \n+/* Generate a direct call to malloc() for the MALLOC intrinsic.  */\n+\n+static void\n+gfc_conv_intrinsic_malloc (gfc_se * se, gfc_expr * expr)\n+{\n+  tree arg, res, restype;\n+\n+  gfc_conv_intrinsic_function_args (se, expr, &arg, 1);\n+  arg = fold_convert (size_type_node, arg);\n+  res = build_call_expr_loc (input_location,\n+\t\t\t     builtin_decl_explicit (BUILT_IN_MALLOC), 1, arg);\n+  restype = gfc_typenode_for_spec (&expr->ts);\n+  se->expr = fold_convert (restype, res);\n+}\n+\n+\n /* Generate code for an intrinsic function.  Some map directly to library\n    calls, others get special handling.  In some cases the name of the function\n    used depends on the type specifiers.  */\n@@ -8078,6 +8115,10 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_strcmp (se, expr, LT_EXPR);\n       break;\n \n+    case GFC_ISYM_MALLOC:\n+      gfc_conv_intrinsic_malloc (se, expr);\n+      break;\n+\n     case GFC_ISYM_MASKL:\n       gfc_conv_intrinsic_mask (se, expr, 1);\n       break;\n@@ -8267,7 +8308,6 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n     case GFC_ISYM_JN2:\n     case GFC_ISYM_LINK:\n     case GFC_ISYM_LSTAT:\n-    case GFC_ISYM_MALLOC:\n     case GFC_ISYM_MATMUL:\n     case GFC_ISYM_MCLOCK:\n     case GFC_ISYM_MCLOCK8:\n@@ -9536,6 +9576,10 @@ gfc_conv_intrinsic_subroutine (gfc_code *code)\n       res = conv_co_collective (code);\n       break;\n \n+    case GFC_ISYM_FREE:\n+      res = conv_intrinsic_free (code);\n+      break;\n+\n     case GFC_ISYM_SYSTEM_CLOCK:\n       res = conv_intrinsic_system_clock (code);\n       break;"}, {"sha": "a0b70ed4c35317c7c908bf8f8d90c84df0d5b84a", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b40ca6a38070686f7aea3cd661197ca879eab50/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b40ca6a38070686f7aea3cd661197ca879eab50/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=8b40ca6a38070686f7aea3cd661197ca879eab50", "patch": "@@ -1,3 +1,8 @@\n+2015-08-28  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/53668\n+\t* intrinsics/malloc.c: Adapt comments.\n+\n 2015-08-28  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* configure.ac: Auto-detect newlib function support unless we"}, {"sha": "9ffd18fd9f0e63377fa400058a3be5c00652e008", "filename": "libgfortran/intrinsics/malloc.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b40ca6a38070686f7aea3cd661197ca879eab50/libgfortran%2Fintrinsics%2Fmalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b40ca6a38070686f7aea3cd661197ca879eab50/libgfortran%2Fintrinsics%2Fmalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fmalloc.c?ref=8b40ca6a38070686f7aea3cd661197ca879eab50", "patch": "@@ -27,6 +27,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include <stdlib.h>\n \n \n+/* The runtime MALLOC and FREE are kept here until the libgfortran ABI\n+   is broken.  The front-end now emits direct calls to the GCC's malloc()\n+   and free() built-ins.  */\n+\n extern void PREFIX(free) (void **);\n export_proto_np(PREFIX(free));\n "}]}