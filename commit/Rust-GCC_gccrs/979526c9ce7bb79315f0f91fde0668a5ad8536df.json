{"sha": "979526c9ce7bb79315f0f91fde0668a5ad8536df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc5NTI2YzljZTdiYjc5MzE1ZjBmOTFmZGUwNjY4YTVhZDg1MzZkZg==", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2019-07-18T14:10:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-07-18T14:10:51Z"}, "message": "demangle.h (rust_is_mangled): Move to libiberty/rust-demangle.h.\n\ninclude/\n\t* demangle.h (rust_is_mangled): Move to libiberty/rust-demangle.h.\n\t(rust_demangle_sym): Move to libiberty/rust-demangle.h.\nlibiberty/\n\t* cplus-dem.c: Include rust-demangle.h.\n\t* rust-demangle.c: Include rust-demangle.h.\n\t* rust-demangle.h: New file.\n\nFrom-SVN: r273573", "tree": {"sha": "91ff03abd3ad2e5a27536751f4427b45857ff943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91ff03abd3ad2e5a27536751f4427b45857ff943"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/979526c9ce7bb79315f0f91fde0668a5ad8536df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/979526c9ce7bb79315f0f91fde0668a5ad8536df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/979526c9ce7bb79315f0f91fde0668a5ad8536df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/979526c9ce7bb79315f0f91fde0668a5ad8536df/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "24990170d318194b265c2fc76d93965275da462c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24990170d318194b265c2fc76d93965275da462c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24990170d318194b265c2fc76d93965275da462c"}], "stats": {"total": 76, "additions": 58, "deletions": 18}, "files": [{"sha": "a4f3fe5d5cefe3b5b1a43df60288c64133d889ab", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979526c9ce7bb79315f0f91fde0668a5ad8536df/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979526c9ce7bb79315f0f91fde0668a5ad8536df/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=979526c9ce7bb79315f0f91fde0668a5ad8536df", "patch": "@@ -1,3 +1,8 @@\n+2019-07-18  Eduard-Mihai Burtescu  <eddyb@lyken.rs>\n+\n+\t* demangle.h (rust_is_mangled): Move to libiberty/rust-demangle.h.\n+\t(rust_demangle_sym): Move to libiberty/rust-demangle.h.\n+\n 2019-06-18  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* gomp-constants.h (enum gomp_map_kind): Fix description of"}, {"sha": "06c32571d5ce09590f367bb187c83eb373f4fa92", "filename": "include/demangle.h", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979526c9ce7bb79315f0f91fde0668a5ad8536df/include%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979526c9ce7bb79315f0f91fde0668a5ad8536df/include%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdemangle.h?ref=979526c9ce7bb79315f0f91fde0668a5ad8536df", "patch": "@@ -159,24 +159,6 @@ ada_demangle (const char *mangled, int options);\n extern char *\n dlang_demangle (const char *mangled, int options);\n \n-/* Returns non-zero iff MANGLED is a rust mangled symbol.  MANGLED must\n-   already have been demangled through cplus_demangle_v3.  If this function\n-   returns non-zero then MANGLED can be demangled (in-place) using\n-   RUST_DEMANGLE_SYM.  */\n-extern int\n-rust_is_mangled (const char *mangled);\n-\n-/* Demangles SYM (in-place) if RUST_IS_MANGLED returned non-zero for SYM.\n-   If RUST_IS_MANGLED returned zero for SYM then RUST_DEMANGLE_SYM might\n-   replace characters that cannot be demangled with '?' and might truncate\n-   SYM.  After calling RUST_DEMANGLE_SYM SYM might be shorter, but never\n-   larger.  */\n-extern void\n-rust_demangle_sym (char *sym);\n-\n-/* Demangles MANGLED if it was GNU_V3 and then RUST mangled, otherwise\n-   returns NULL. Uses CPLUS_DEMANGLE_V3, RUST_IS_MANGLED and\n-   RUST_DEMANGLE_SYM.  Returns a new string that is owned by the caller.  */\n extern char *\n rust_demangle (const char *mangled, int options);\n "}, {"sha": "af242573a4258e98f17ea13a1bbaa4e01e27d883", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979526c9ce7bb79315f0f91fde0668a5ad8536df/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979526c9ce7bb79315f0f91fde0668a5ad8536df/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=979526c9ce7bb79315f0f91fde0668a5ad8536df", "patch": "@@ -1,3 +1,9 @@\n+2019-07-18  Eduard-Mihai Burtescu  <eddyb@lyken.rs>\n+\n+\t* cplus-dem.c: Include rust-demangle.h.\n+\t* rust-demangle.c: Include rust-demangle.h.\n+\t* rust-demangle.h: New file.\n+\n 2019-05-31  Michael Forney  <mforney@mforney.org>\n \n \t* cp-demangle.c: Don't define CP_DYNAMIC_ARRAYS if __STDC_NO_VLA__"}, {"sha": "a39e2bf2ed46eaaee01a95b363b46a70be31fc9f", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979526c9ce7bb79315f0f91fde0668a5ad8536df/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979526c9ce7bb79315f0f91fde0668a5ad8536df/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=979526c9ce7bb79315f0f91fde0668a5ad8536df", "patch": "@@ -52,6 +52,7 @@ void * realloc ();\n #define CURRENT_DEMANGLING_STYLE options\n \n #include \"libiberty.h\"\n+#include \"rust-demangle.h\"\n \n enum demangling_styles current_demangling_style = auto_demangling;\n "}, {"sha": "2302db45b6fbce2798721298f64149a3d3cb68ef", "filename": "libiberty/rust-demangle.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979526c9ce7bb79315f0f91fde0668a5ad8536df/libiberty%2Frust-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979526c9ce7bb79315f0f91fde0668a5ad8536df/libiberty%2Frust-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Frust-demangle.c?ref=979526c9ce7bb79315f0f91fde0668a5ad8536df", "patch": "@@ -47,6 +47,7 @@ extern void *memset(void *s, int c, size_t n);\n \n #include <demangle.h>\n #include \"libiberty.h\"\n+#include \"rust-demangle.h\"\n \n \n /* Mangled Rust symbols look like this:"}, {"sha": "abf4c6cde559bc45e3020d86e5c811b46e8f6e05", "filename": "libiberty/rust-demangle.h", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/979526c9ce7bb79315f0f91fde0668a5ad8536df/libiberty%2Frust-demangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/979526c9ce7bb79315f0f91fde0668a5ad8536df/libiberty%2Frust-demangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Frust-demangle.h?ref=979526c9ce7bb79315f0f91fde0668a5ad8536df", "patch": "@@ -0,0 +1,45 @@\n+/* Internal demangler interface for the Rust programming language.\n+   Copyright (C) 2016-2019 Free Software Foundation, Inc.\n+   Written by David Tolnay (dtolnay@gmail.com).\n+\n+This file is part of the libiberty library.\n+Libiberty is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Library General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU Library General Public\n+License, the Free Software Foundation gives you unlimited permission\n+to link the compiled version of this file into combinations with other\n+programs, and to distribute those combinations without any restriction\n+coming from the use of this file.  (The Library Public License\n+restrictions do apply in other respects; for example, they cover\n+modification of the file, and distribution when not linked into a\n+combined executable.)\n+\n+Libiberty is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public\n+License along with libiberty; see the file COPYING.LIB.\n+If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* This file provides some definitions shared by cplus-dem.c and\n+   rust-demangle.c.  It should not be included by any other files.  */\n+\n+/* Returns non-zero iff MANGLED is a rust mangled symbol.  MANGLED must\n+   already have been demangled through cplus_demangle_v3.  If this function\n+   returns non-zero then MANGLED can be demangled (in-place) using\n+   RUST_DEMANGLE_SYM.  */\n+extern int\n+rust_is_mangled (const char *mangled);\n+\n+/* Demangles SYM (in-place) if RUST_IS_MANGLED returned non-zero for SYM.\n+   If RUST_IS_MANGLED returned zero for SYM then RUST_DEMANGLE_SYM might\n+   replace characters that cannot be demangled with '?' and might truncate\n+   SYM.  After calling RUST_DEMANGLE_SYM SYM might be shorter, but never\n+   larger.  */\n+extern void\n+rust_demangle_sym (char *sym);"}]}