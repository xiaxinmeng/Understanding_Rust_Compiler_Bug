{"sha": "fafe34f91a12944c20cd13bd403ee2111ed19ff7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFmZTM0ZjkxYTEyOTQ0YzIwY2QxM2JkNDAzZWUyMTExZWQxOWZmNw==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2009-01-03T00:31:39Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2009-01-03T00:31:39Z"}, "message": "re PR tree-optimization/35805 ([ira] error in start_allocno_priorities, at ira-color.c:1806)\n\n2009-01-02  Kenneth Zadeck <zadeck@naturalbridge.com>\n\n\tPR rtl-optimization/35805\n\t* df-problems.c (df_lr_finalize): Add recursive call to resolve lr\n\tproblem if fast dce is able to remove any instructions.\n\t* dce.c (dce_process_block): Fix dump message.\n\nFrom-SVN: r143027", "tree": {"sha": "acfc015900a56222cebb9128e55478b27fa44d40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acfc015900a56222cebb9128e55478b27fa44d40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fafe34f91a12944c20cd13bd403ee2111ed19ff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fafe34f91a12944c20cd13bd403ee2111ed19ff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fafe34f91a12944c20cd13bd403ee2111ed19ff7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fafe34f91a12944c20cd13bd403ee2111ed19ff7/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ede37fed4a47c959ab369d5028609c0c1a16e00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ede37fed4a47c959ab369d5028609c0c1a16e00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ede37fed4a47c959ab369d5028609c0c1a16e00"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "ba31727eaf17a61459160a08ced64ad175778fa2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafe34f91a12944c20cd13bd403ee2111ed19ff7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafe34f91a12944c20cd13bd403ee2111ed19ff7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fafe34f91a12944c20cd13bd403ee2111ed19ff7", "patch": "@@ -1,3 +1,10 @@\n+2009-01-02  Kenneth Zadeck <zadeck@naturalbridge.com>\n+\n+\tPR rtl-optimization/35805\n+\t* df-problems.c (df_lr_finalize): Add recursive call to resolve lr\n+\tproblem if fast dce is able to remove any instructions.\n+\t* dce.c (dce_process_block): Fix dump message.\n+\t\n 2009-01-02  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR 33649"}, {"sha": "08a0f5048e34f8e26f342c9eb7d813d54e95ef71", "filename": "gcc/dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafe34f91a12944c20cd13bd403ee2111ed19ff7/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafe34f91a12944c20cd13bd403ee2111ed19ff7/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=fafe34f91a12944c20cd13bd403ee2111ed19ff7", "patch": "@@ -601,7 +601,7 @@ dce_process_block (basic_block bb, bool redo_out, bitmap au)\n \n   if (dump_file)\n     {\n-      fprintf (dump_file, \"processing block %d live out = \", bb->index);\n+      fprintf (dump_file, \"processing block %d lr out = \", bb->index);\n       df_print_regset (dump_file, DF_LR_OUT (bb));\n     }\n "}, {"sha": "0bfef8a08eb9fd254bce8cfd8cd8637df5719584", "filename": "gcc/df-problems.c", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fafe34f91a12944c20cd13bd403ee2111ed19ff7/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fafe34f91a12944c20cd13bd403ee2111ed19ff7/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=fafe34f91a12944c20cd13bd403ee2111ed19ff7", "patch": "@@ -1001,25 +1001,34 @@ df_lr_transfer_function (int bb_index)\n /* Run the fast dce as a side effect of building LR.  */\n \n static void\n-df_lr_finalize (bitmap all_blocks ATTRIBUTE_UNUSED)\n+df_lr_finalize (bitmap all_blocks)\n {\n+  df_lr->solutions_dirty = false;\n   if (df->changeable_flags & DF_LR_RUN_DCE)\n     {\n       run_fast_df_dce ();\n-      if (df_lr->problem_data && df_lr->solutions_dirty)\n+\n+      /* If dce deletes some instructions, we need to recompute the lr\n+\t solution before proceeding further.  The problem is that fast\n+\t dce is a pessimestic dataflow algorithm.  In the case where\n+\t it deletes a statement S inside of a loop, the uses inside of\n+\t S may not be deleted from the dataflow solution because they\n+\t were carried around the loop.  While it is conservatively\n+\t correct to leave these extra bits, the standards of df\n+\t require that we maintain the best possible (least fixed\n+\t point) solution.  The only way to do that is to redo the\n+\t iteration from the beginning.  See PR35805 for an\n+\t example.  */\n+      if (df_lr->solutions_dirty)\n \t{\n-\t  /* If we are here, then it is because we are both verifying\n-\t  the solution and the dce changed the function.  In that case\n-\t  the verification info built will be wrong.  So we leave the\n-\t  dirty flag true so that the verifier will skip the checking\n-\t  part and just clean up.*/\n-\t  df_lr->solutions_dirty = true;\n+\t  df_clear_flags (DF_LR_RUN_DCE);\n+\t  df_lr_alloc (all_blocks);\n+\t  df_lr_local_compute (all_blocks);\n+\t  df_worklist_dataflow (df_lr, all_blocks, df->postorder, df->n_blocks);\n+\t  df_lr_finalize (all_blocks);\n+\t  df_set_flags (DF_LR_RUN_DCE);\n \t}\n-      else\n-\tdf_lr->solutions_dirty = false;\n     }\n-  else\n-    df_lr->solutions_dirty = false;\n }\n \n "}]}