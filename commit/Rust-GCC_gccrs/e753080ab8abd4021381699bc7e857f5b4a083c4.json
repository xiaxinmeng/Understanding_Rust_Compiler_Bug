{"sha": "e753080ab8abd4021381699bc7e857f5b4a083c4", "node_id": "C_kwDOANBUbNoAKGU3NTMwODBhYjhhYmQ0MDIxMzgxNjk5YmM3ZTg1N2Y1YjRhMDgzYzQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-03T20:39:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-03T20:39:16Z"}, "message": "range-op: Handle op?.undefined_p () in op[12]_range of comparisons [PR108647]\n\nAs mentioned in the PR, we ICE because lhs is singleton [0, 0]\nor [1, 1] but op2 (or in other cases op1) is undefined and op?.*_bound ()\nICEs on those because there are no pairs for UNDEFINED.\n\nThe following patch makes us set r to varying or return false in those\ncases.\n\n2023-02-03  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/108647\n\t* range-op.cc (operator_equal::op1_range,\n\toperator_not_equal::op1_range): Don't test op2 bound\n\tequality if op2.undefined_p (), instead set_varying.\n\t(operator_lt::op1_range, operator_le::op1_range,\n\toperator_gt::op1_range, operator_ge::op1_range): Return false if\n\top2.undefined_p ().\n\t(operator_lt::op2_range, operator_le::op2_range,\n\toperator_gt::op2_range, operator_ge::op2_range): Return false if\n\top1.undefined_p ().\n\n\t* g++.dg/torture/pr108647.C: New test.", "tree": {"sha": "2dce453e7284aa14f77445f510f1ba1cd534cf45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dce453e7284aa14f77445f510f1ba1cd534cf45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e753080ab8abd4021381699bc7e857f5b4a083c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e753080ab8abd4021381699bc7e857f5b4a083c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e753080ab8abd4021381699bc7e857f5b4a083c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e753080ab8abd4021381699bc7e857f5b4a083c4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76f7f0eddcb7c418d1ec3dea3e2341ca99097301", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76f7f0eddcb7c418d1ec3dea3e2341ca99097301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76f7f0eddcb7c418d1ec3dea3e2341ca99097301"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "5c67bce6d3aab81ad3186b902e09d6a96878d9bb", "filename": "gcc/range-op.cc", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e753080ab8abd4021381699bc7e857f5b4a083c4/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e753080ab8abd4021381699bc7e857f5b4a083c4/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=e753080ab8abd4021381699bc7e857f5b4a083c4", "patch": "@@ -642,7 +642,8 @@ operator_equal::op1_range (irange &r, tree type,\n     case BRS_FALSE:\n       // If the result is false, the only time we know anything is\n       // if OP2 is a constant.\n-      if (wi::eq_p (op2.lower_bound(), op2.upper_bound()))\n+      if (!op2.undefined_p ()\n+\t  && wi::eq_p (op2.lower_bound(), op2.upper_bound()))\n \t{\n \t  r = op2;\n \t  r.invert ();\n@@ -755,7 +756,8 @@ operator_not_equal::op1_range (irange &r, tree type,\n     case BRS_TRUE:\n       // If the result is true, the only time we know anything is if\n       // OP2 is a constant.\n-      if (wi::eq_p (op2.lower_bound(), op2.upper_bound()))\n+      if (!op2.undefined_p ()\n+\t  && wi::eq_p (op2.lower_bound(), op2.upper_bound()))\n \t{\n \t  r = op2;\n \t  r.invert ();\n@@ -920,6 +922,9 @@ operator_lt::op1_range (irange &r, tree type,\n \t\t\tconst irange &op2,\n \t\t\trelation_trio) const\n {\n+  if (op2.undefined_p ())\n+    return false;\n+\n   switch (get_bool_state (r, lhs, type))\n     {\n     case BRS_TRUE:\n@@ -942,6 +947,9 @@ operator_lt::op2_range (irange &r, tree type,\n \t\t\tconst irange &op1,\n \t\t\trelation_trio) const\n {\n+  if (op1.undefined_p ())\n+    return false;\n+\n   switch (get_bool_state (r, lhs, type))\n     {\n     case BRS_TRUE:\n@@ -1031,6 +1039,9 @@ operator_le::op1_range (irange &r, tree type,\n \t\t\tconst irange &op2,\n \t\t\trelation_trio) const\n {\n+  if (op2.undefined_p ())\n+    return false;\n+\n   switch (get_bool_state (r, lhs, type))\n     {\n     case BRS_TRUE:\n@@ -1053,6 +1064,9 @@ operator_le::op2_range (irange &r, tree type,\n \t\t\tconst irange &op1,\n \t\t\trelation_trio) const\n {\n+  if (op1.undefined_p ())\n+    return false;\n+\n   switch (get_bool_state (r, lhs, type))\n     {\n     case BRS_TRUE:\n@@ -1141,6 +1155,9 @@ operator_gt::op1_range (irange &r, tree type,\n \t\t\tconst irange &lhs, const irange &op2,\n \t\t\trelation_trio) const\n {\n+  if (op2.undefined_p ())\n+    return false;\n+\n   switch (get_bool_state (r, lhs, type))\n     {\n     case BRS_TRUE:\n@@ -1163,6 +1180,9 @@ operator_gt::op2_range (irange &r, tree type,\n \t\t\tconst irange &op1,\n \t\t\trelation_trio) const\n {\n+  if (op1.undefined_p ())\n+    return false;\n+\n   switch (get_bool_state (r, lhs, type))\n     {\n     case BRS_TRUE:\n@@ -1252,6 +1272,9 @@ operator_ge::op1_range (irange &r, tree type,\n \t\t\tconst irange &op2,\n \t\t\trelation_trio) const\n {\n+  if (op2.undefined_p ())\n+    return false;\n+\n   switch (get_bool_state (r, lhs, type))\n     {\n     case BRS_TRUE:\n@@ -1274,6 +1297,9 @@ operator_ge::op2_range (irange &r, tree type,\n \t\t\tconst irange &op1,\n \t\t\trelation_trio) const\n {\n+  if (op1.undefined_p ())\n+    return false;\n+\n   switch (get_bool_state (r, lhs, type))\n     {\n     case BRS_TRUE:"}, {"sha": "abdb92a81317bd063097234901fa19e026638a52", "filename": "gcc/testsuite/g++.dg/torture/pr108647.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e753080ab8abd4021381699bc7e857f5b4a083c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr108647.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e753080ab8abd4021381699bc7e857f5b4a083c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr108647.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr108647.C?ref=e753080ab8abd4021381699bc7e857f5b4a083c4", "patch": "@@ -0,0 +1,25 @@\n+// PR tree-optimization/108647\n+// { dg-do compile }\n+\n+bool a;\n+int b, c;\n+\n+inline const bool &\n+foo (bool &e, const bool &f)\n+{\n+  return f < e ? f : e;\n+}\n+\n+void\n+bar (signed char e, bool *f, bool *h, bool *g)\n+{\n+  for (;;)\n+    if (g)\n+      for (signed char j = 0; j < 6;\n+\t   j += ((f[0] & c ? g[0] : int(0 >= e))\n+\t\t ? 0 : foo (g[0], g[0] > h[0]) + 1))\n+\t{\n+\t  a = 0;\n+\t  b = 0;\n+\t}\n+}"}]}