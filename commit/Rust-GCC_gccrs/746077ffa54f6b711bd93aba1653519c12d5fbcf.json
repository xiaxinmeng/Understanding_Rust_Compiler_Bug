{"sha": "746077ffa54f6b711bd93aba1653519c12d5fbcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ2MDc3ZmZhNTRmNmI3MTFiZDkzYWJhMTY1MzUxOWMxMmQ1ZmJjZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2005-10-02T09:05:45Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2005-10-02T09:05:45Z"}, "message": "* tree-stdarg.c (execute_optimize_stdarg): Process PHI nodes too.\n\nFrom-SVN: r104865", "tree": {"sha": "86f300dd419cffeeb646b4417b1ddf2fd0d638f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86f300dd419cffeeb646b4417b1ddf2fd0d638f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/746077ffa54f6b711bd93aba1653519c12d5fbcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/746077ffa54f6b711bd93aba1653519c12d5fbcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/746077ffa54f6b711bd93aba1653519c12d5fbcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/746077ffa54f6b711bd93aba1653519c12d5fbcf/comments", "author": null, "committer": null, "parents": [{"sha": "e3fe057d20acfadc61b4d7d92a65a53d0963e4c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3fe057d20acfadc61b4d7d92a65a53d0963e4c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3fe057d20acfadc61b4d7d92a65a53d0963e4c9"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "b431efa2ee5921d1b9f18b0f1c0c49fe0411a8b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/746077ffa54f6b711bd93aba1653519c12d5fbcf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/746077ffa54f6b711bd93aba1653519c12d5fbcf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=746077ffa54f6b711bd93aba1653519c12d5fbcf", "patch": "@@ -1,3 +1,7 @@\n+2005-10-01  Richard Henderson  <rth@redhat.com>\n+\n+\t* tree-stdarg.c (execute_optimize_stdarg): Process PHI nodes too.\n+\n 2005-10-01  Mark Mitchell  <mark@codesourcery.com>\n \n \t* config/arm/unknown-elf.h (LINK_GCC_C_SEQUENCE_SPEC): Define"}, {"sha": "287e3bbc7714a12c69f783fdcc71d472dd61c978", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/746077ffa54f6b711bd93aba1653519c12d5fbcf/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/746077ffa54f6b711bd93aba1653519c12d5fbcf/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=746077ffa54f6b711bd93aba1653519c12d5fbcf", "patch": "@@ -624,6 +624,7 @@ execute_optimize_stdarg (void)\n   va_list_simple_ptr = POINTER_TYPE_P (va_list_type_node)\n \t\t       && (TREE_TYPE (va_list_type_node) == void_type_node\n \t\t\t   || TREE_TYPE (va_list_type_node) == char_type_node);\n+  gcc_assert (is_gimple_reg_type (va_list_type_node) == va_list_simple_ptr);\n \n   FOR_EACH_BB (bb)\n     {\n@@ -742,6 +743,50 @@ execute_optimize_stdarg (void)\n \n       si.compute_sizes = -1;\n       si.bb = bb;\n+\n+      /* For va_list_simple_ptr, we have to check PHI nodes too.  We treat\n+\t them as assignments for the purpose of escape analysis.  This is\n+\t not needed for non-simple va_list because virtual phis don't perform\n+\t any real data movement.  */\n+      if (va_list_simple_ptr)\n+\t{\n+\t  tree phi, lhs, rhs;\n+\t  use_operand_p uop;\n+\t  ssa_op_iter soi;\n+\n+\t  for (phi = phi_nodes (bb); phi; phi = PHI_CHAIN (phi))\n+\t    {\n+\t      lhs = PHI_RESULT (phi);\n+\n+\t      if (!is_gimple_reg (lhs))\n+\t\tcontinue;\n+\n+\t      FOR_EACH_PHI_ARG (uop, phi, soi, SSA_OP_USE)\n+\t\t{\n+\t\t  rhs = USE_FROM_PTR (uop);\n+\t\t  if (va_list_ptr_read (&si, rhs, lhs))\n+\t\t    continue;\n+\t\t  else if (va_list_ptr_write (&si, lhs, rhs))\n+\t\t    continue;\n+\t\t  else\n+\t\t    check_va_list_escapes (&si, lhs, rhs);\n+\n+\t\t  if (si.va_list_escapes\n+\t\t      || walk_tree (&phi, find_va_list_reference,\n+\t\t\t\t    si.va_list_vars, NULL))\n+\t\t    {\n+\t\t      if (dump_file && (dump_flags & TDF_DETAILS))\n+\t\t\t{\n+\t\t\t  fputs (\"va_list escapes in \", dump_file);\n+\t\t\t  print_generic_expr (dump_file, phi, dump_flags);\n+\t\t\t  fputc ('\\n', dump_file);\n+\t\t\t}\n+\t\t      va_list_escapes = true;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+\n       for (i = bsi_start (bb);\n \t   !bsi_end_p (i) && !va_list_escapes;\n \t   bsi_next (&i))"}]}