{"sha": "1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ1YmE5OGMyYTA4NTNmN2FlM2M2OGNhOWE2N2FhOTg0ZTcwNWMwOQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2009-09-16T16:38:49Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2009-09-16T16:38:49Z"}, "message": "dfp.exp: Use appropriate default options.\n\n\t* gcc.dg/dfp/dfp.exp: Use appropriate default options.\n\t* gcc.dg/dfp/dfp-dbg.h: New; define FAILURE, FINISH.\n\t* gcc.dg/dfp/cast-bad.c: Use default options.\n\t* gcc.dg/dfp/compare-rel-const.c: Ditto.\n\t* gcc.dg/dfp/composite-type.c: Ditto.\n\t* gcc.dg/dfp/constants.c: Ditto.\n\t* gcc.dg/dfp/constants-hex.c: Ditto.\n\t* gcc.dg/dfp/constants-pedantic.c: Ditto.\n\t* gcc.dg/dfp/convert-bfp-fold.c: Ditto.\n\t* gcc.dg/dfp/convert-dfp-fold.c: Ditto.\n\t* gcc.dg/dfp/convert-int-max-fold.c: Ditto.\n\t* gcc.dg/dfp/ctypes.c: Ditto.\n\t* gcc.dg/dfp/ddmode-ice.c: Ditto.\n\t* gcc.dg/dfp/dec-eval-method-2.c: Ditto.\n\t* gcc.dg/dfp/float-constant-double.c: Ditto.\n\t* gcc.dg/dfp/keywords-pedantic.c: Ditto.\n\t* gcc.dg/dfp/keywords-reserved.c: Ditto.\n\t* gcc.dg/dfp/modes.c: Ditto.\n\t* gcc.dg/dfp/operator-bitwise.c: Ditto.\n\t* gcc.dg/dfp/pr31344.c: Ditto.\n\t* gcc.dg/dfp/pr31385.c: Ditto.\n\t* gcc.dg/dfp/pr33466.c: Ditto.\n\t* gcc.dg/dfp/pr35620.c: Ditto.\n\t* gcc.dg/dfp/pr37435.c: Ditto.\n\t* gcc.dg/dfp/pr39986.c: Ditto.\n\t* gcc.dg/dfp/pragma-float-const-decimal64-1.c: Ditto.\n\t* gcc.dg/dfp/pragma-float-const-decimal64-2.c: Ditto.\n\t* gcc.dg/dfp/pragma-float-const-decimal64-3.c: Ditto.\n\t* gcc.dg/dfp/pragma-float-const-decimal64-4.c: Ditto.\n\t* gcc.dg/dfp/pragma-float-const-decimal64-7.c: Ditto.\n\t* gcc.dg/dfp/pragma-float-const-decimal64-8.c: Ditto.\n\t* gcc.dg/dfp/typespec.c: Ditto.\n\t* gcc.dg/dfp/usual-arith-conv-bad.c: Ditto.\n\t* gcc.dg/dfp/usual-arith-conv-bad-2.c: Ditto.\n\t* gcc.dg/dfp/usual-arith-conv-const.c: Ditto.\n\t* gcc.dg/dfp/Wbad-function-cast-1.c: Ditto.\n\t* gcc.dg/dfp/Wtraditional-conversion-2.c: Ditto.\n\t* gcc.dg/dfp/wtr-conversion-1.c: Ditto.\n\t* gcc.dg/dfp/compare-eq.h: Define custom debug macros.\n\t* gcc.dg/dfp/compare-rel.h: Ditto.\n\t* gcc.dg/dfp/compare-special.h: Ditto.\n\t* gcc.dg/dfp/convert.h: Ditto.\n\t* gcc.dg/dfp/fe-check.h: Ditto.\n\t* gcc.dg/dfp/call-by-value.c: Use default options and\n\t  debug macros.\n\t* gcc.dg/dfp/cast.c: Ditto.\n\t* gcc.dg/dfp/compare-eq-const.c: Ditto.\n\t* gcc.dg/dfp/compare-eq-d32.c: Ditto.\n\t* gcc.dg/dfp/compare-eq-d64.c: Ditto.\n\t* gcc.dg/dfp/compare-eq-d128.c: Ditto.\n\t* gcc.dg/dfp/compare-eq-dfp.c: Ditto.\n\t* gcc.dg/dfp/compare-rel-d32.c: Ditto.\n\t* gcc.dg/dfp/compare-rel-d64.c: Ditto.\n\t* gcc.dg/dfp/compare-rel-d128.c: Ditto.\n\t* gcc.dg/dfp/compare-rel-dfp.c: Ditto.\n\t* gcc.dg/dfp/compare-special-d32.c: Ditto.\n\t* gcc.dg/dfp/compare-special-d64.c: Ditto.\n\t* gcc.dg/dfp/compare-special-d128.c: Ditto.\n\t* gcc.dg/dfp/constants-zero.c: Ditto.\n\t* gcc.dg/dfp/convert-bfp-2.c: Ditto.\n\t* gcc.dg/dfp/convert-bfp-3.c: Ditto.\n\t* gcc.dg/dfp/convert-bfp-4.c: Ditto.\n\t* gcc.dg/dfp/convert-bfp-5.c: Ditto.\n\t* gcc.dg/dfp/convert-bfp-6.c: Ditto.\n\t* gcc.dg/dfp/convert-bfp-7.c: Ditto.\n\t* gcc.dg/dfp/convert-bfp-8.c: Ditto.\n\t* gcc.dg/dfp/convert-bfp-9.c: Ditto.\n\t* gcc.dg/dfp/convert-bfp-10.c: Ditto.\n\t* gcc.dg/dfp/convert-bfp-11.c: Ditto.\n\t* gcc.dg/dfp/convert-bfp-12.c: Ditto.\n\t* gcc.dg/dfp/convert-bfp-13.c: Ditto.\n\t* gcc.dg/dfp/convert-bfp-14.c: Ditto.\n\t* gcc.dg/dfp/convert-bfp.c: Ditto.\n\t* gcc.dg/dfp/convert-complex.c: Ditto.\n\t* gcc.dg/dfp/convert-dfp.c: Ditto.\n\t* gcc.dg/dfp/convert-dfp-fold-2.c: Ditto.\n\t* gcc.dg/dfp/convert-dfp-round.c: Ditto.\n\t* gcc.dg/dfp/convert-int.c: Ditto.\n\t* gcc.dg/dfp/convert-int-fold.c: Ditto.\n\t* gcc.dg/dfp/convert-int-max.c: Ditto.\n\t* gcc.dg/dfp/convert-int-saturate.c: Ditto.\n\t* gcc.dg/dfp/decfloat-constants.c: Ditto.\n\t* gcc.dg/dfp/fe-binop.c: Ditto.\n\t* gcc.dg/dfp/fe-convert-1.c: Ditto.\n\t* gcc.dg/dfp/fe-convert-2.c: Ditto.\n\t* gcc.dg/dfp/fe-convert-3.c: Ditto.\n\t* gcc.dg/dfp/func-array.c: Ditto.\n\t* gcc.dg/dfp/func-deref.c: Ditto.\n\t* gcc.dg/dfp/func-mixed.c: Ditto.\n\t* gcc.dg/dfp/func-pointer.c: Ditto.\n\t* gcc.dg/dfp/func-scalar.c: Ditto.\n\t* gcc.dg/dfp/func-struct.c: Ditto.\n\t* gcc.dg/dfp/func-vararg-alternate.h: Ditto.\n\t* gcc.dg/dfp/func-vararg-alternate-d32.c: Ditto.\n\t* gcc.dg/dfp/func-vararg-alternate-d64.c: Ditto.\n\t* gcc.dg/dfp/func-vararg-alternate-d128.c: Ditto.\n\t* gcc.dg/dfp/func-vararg-alternate-d128-2.c: Ditto.\n\t* gcc.dg/dfp/func-vararg-dfp.c: Ditto.\n\t* gcc.dg/dfp/func-vararg-mixed.c: Ditto.\n\t* gcc.dg/dfp/func-vararg-mixed-2.c: Ditto.\n\t* gcc.dg/dfp/func-vararg-size0.c: Ditto.\n\t* gcc.dg/dfp/inf-1.c: Ditto.\n\t* gcc.dg/dfp/loop-index.c: Ditto.\n\t* gcc.dg/dfp/nan-1.c: Ditto.\n\t* gcc.dg/dfp/nan-2.c: Ditto.\n\t* gcc.dg/dfp/operator-arith-fold.c: Ditto.\n\t* gcc.dg/dfp/operator-assignment.c: Ditto.\n\t* gcc.dg/dfp/operator-comma.c: Ditto.\n\t* gcc.dg/dfp/operator-cond.c: Ditto.\n\t* gcc.dg/dfp/operator-logical.c: Ditto.\n\t* gcc.dg/dfp/operator-unary.c: Ditto.\n\t* gcc.dg/dfp/pr36800.c: Ditto.\n\t* gcc.dg/dfp/pr39034.c: Ditto.\n\t* gcc.dg/dfp/pr39035.c: Ditto.\n\t* gcc.dg/dfp/pr39902.c: Ditto.\n\t* gcc.dg/dfp/signbit-1.c: Ditto.\n\t* gcc.dg/dfp/signbit-2.c: Ditto.\n\t* gcc.dg/dfp/struct-layout-1.c: Ditto.\n\t* gcc.dg/dfp/union-init.c: Ditto.\n\t* gcc.dg/dfp/usual-arith-conv.c: Ditto.\n\nFrom-SVN: r151764", "tree": {"sha": "b186ecf9103c186dbd9e4041fb8e7f55a775b386", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b186ecf9103c186dbd9e4041fb8e7f55a775b386"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/comments", "author": null, "committer": null, "parents": [{"sha": "fe663f4e45fc2041ede2b6011fa43b3bd621a70d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe663f4e45fc2041ede2b6011fa43b3bd621a70d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe663f4e45fc2041ede2b6011fa43b3bd621a70d"}], "stats": {"total": 1389, "additions": 529, "deletions": 860}, "files": [{"sha": "7b240a8c65a926dd023caa8eebeaf02e617a8685", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,3 +1,126 @@\n+2009-09-16  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* gcc.dg/dfp/dfp.exp: Use appropriate default options.\n+\t* gcc.dg/dfp/dfp-dbg.h: New; define FAILURE, FINISH.\n+\t* gcc.dg/dfp/cast-bad.c: Use default options.\n+\t* gcc.dg/dfp/compare-rel-const.c: Ditto.\n+\t* gcc.dg/dfp/composite-type.c: Ditto.\n+\t* gcc.dg/dfp/constants.c: Ditto.\n+\t* gcc.dg/dfp/constants-hex.c: Ditto.\n+\t* gcc.dg/dfp/constants-pedantic.c: Ditto.\n+\t* gcc.dg/dfp/convert-bfp-fold.c: Ditto.\n+\t* gcc.dg/dfp/convert-dfp-fold.c: Ditto.\n+\t* gcc.dg/dfp/convert-int-max-fold.c: Ditto.\n+\t* gcc.dg/dfp/ctypes.c: Ditto.\n+\t* gcc.dg/dfp/ddmode-ice.c: Ditto.\n+\t* gcc.dg/dfp/dec-eval-method-2.c: Ditto.\n+\t* gcc.dg/dfp/float-constant-double.c: Ditto.\n+\t* gcc.dg/dfp/keywords-pedantic.c: Ditto.\n+\t* gcc.dg/dfp/keywords-reserved.c: Ditto.\n+\t* gcc.dg/dfp/modes.c: Ditto.\n+\t* gcc.dg/dfp/operator-bitwise.c: Ditto.\n+\t* gcc.dg/dfp/pr31344.c: Ditto.\n+\t* gcc.dg/dfp/pr31385.c: Ditto.\n+\t* gcc.dg/dfp/pr33466.c: Ditto.\n+\t* gcc.dg/dfp/pr35620.c: Ditto.\n+\t* gcc.dg/dfp/pr37435.c: Ditto.\n+\t* gcc.dg/dfp/pr39986.c: Ditto.\n+\t* gcc.dg/dfp/pragma-float-const-decimal64-1.c: Ditto.\n+\t* gcc.dg/dfp/pragma-float-const-decimal64-2.c: Ditto.\n+\t* gcc.dg/dfp/pragma-float-const-decimal64-3.c: Ditto.\n+\t* gcc.dg/dfp/pragma-float-const-decimal64-4.c: Ditto.\n+\t* gcc.dg/dfp/pragma-float-const-decimal64-7.c: Ditto.\n+\t* gcc.dg/dfp/pragma-float-const-decimal64-8.c: Ditto.\n+\t* gcc.dg/dfp/typespec.c: Ditto.\n+\t* gcc.dg/dfp/usual-arith-conv-bad.c: Ditto.\n+\t* gcc.dg/dfp/usual-arith-conv-bad-2.c: Ditto.\n+\t* gcc.dg/dfp/usual-arith-conv-const.c: Ditto.\n+\t* gcc.dg/dfp/Wbad-function-cast-1.c: Ditto.\n+\t* gcc.dg/dfp/Wtraditional-conversion-2.c: Ditto.\n+\t* gcc.dg/dfp/wtr-conversion-1.c: Ditto.\n+\t* gcc.dg/dfp/compare-eq.h: Define custom debug macros.\n+\t* gcc.dg/dfp/compare-rel.h: Ditto.\n+\t* gcc.dg/dfp/compare-special.h: Ditto.\n+\t* gcc.dg/dfp/convert.h: Ditto.\n+\t* gcc.dg/dfp/fe-check.h: Ditto.\n+\t* gcc.dg/dfp/call-by-value.c: Use default options and\n+\t  debug macros.\n+\t* gcc.dg/dfp/cast.c: Ditto.\n+\t* gcc.dg/dfp/compare-eq-const.c: Ditto.\n+\t* gcc.dg/dfp/compare-eq-d32.c: Ditto.\n+\t* gcc.dg/dfp/compare-eq-d64.c: Ditto.\n+\t* gcc.dg/dfp/compare-eq-d128.c: Ditto.\n+\t* gcc.dg/dfp/compare-eq-dfp.c: Ditto.\n+\t* gcc.dg/dfp/compare-rel-d32.c: Ditto.\n+\t* gcc.dg/dfp/compare-rel-d64.c: Ditto.\n+\t* gcc.dg/dfp/compare-rel-d128.c: Ditto.\n+\t* gcc.dg/dfp/compare-rel-dfp.c: Ditto.\n+\t* gcc.dg/dfp/compare-special-d32.c: Ditto.\n+\t* gcc.dg/dfp/compare-special-d64.c: Ditto.\n+\t* gcc.dg/dfp/compare-special-d128.c: Ditto.\n+\t* gcc.dg/dfp/constants-zero.c: Ditto.\n+\t* gcc.dg/dfp/convert-bfp-2.c: Ditto.\n+\t* gcc.dg/dfp/convert-bfp-3.c: Ditto.\n+\t* gcc.dg/dfp/convert-bfp-4.c: Ditto.\n+\t* gcc.dg/dfp/convert-bfp-5.c: Ditto.\n+\t* gcc.dg/dfp/convert-bfp-6.c: Ditto.\n+\t* gcc.dg/dfp/convert-bfp-7.c: Ditto.\n+\t* gcc.dg/dfp/convert-bfp-8.c: Ditto.\n+\t* gcc.dg/dfp/convert-bfp-9.c: Ditto.\n+\t* gcc.dg/dfp/convert-bfp-10.c: Ditto.\n+\t* gcc.dg/dfp/convert-bfp-11.c: Ditto.\n+\t* gcc.dg/dfp/convert-bfp-12.c: Ditto.\n+\t* gcc.dg/dfp/convert-bfp-13.c: Ditto.\n+\t* gcc.dg/dfp/convert-bfp-14.c: Ditto.\n+\t* gcc.dg/dfp/convert-bfp.c: Ditto.\n+\t* gcc.dg/dfp/convert-complex.c: Ditto.\n+\t* gcc.dg/dfp/convert-dfp.c: Ditto.\n+\t* gcc.dg/dfp/convert-dfp-fold-2.c: Ditto.\n+\t* gcc.dg/dfp/convert-dfp-round.c: Ditto.\n+\t* gcc.dg/dfp/convert-int.c: Ditto.\n+\t* gcc.dg/dfp/convert-int-fold.c: Ditto.\n+\t* gcc.dg/dfp/convert-int-max.c: Ditto.\n+\t* gcc.dg/dfp/convert-int-saturate.c: Ditto.\n+\t* gcc.dg/dfp/decfloat-constants.c: Ditto.\n+\t* gcc.dg/dfp/fe-binop.c: Ditto.\n+\t* gcc.dg/dfp/fe-convert-1.c: Ditto.\n+\t* gcc.dg/dfp/fe-convert-2.c: Ditto.\n+\t* gcc.dg/dfp/fe-convert-3.c: Ditto.\n+\t* gcc.dg/dfp/func-array.c: Ditto.\n+\t* gcc.dg/dfp/func-deref.c: Ditto.\n+\t* gcc.dg/dfp/func-mixed.c: Ditto.\n+\t* gcc.dg/dfp/func-pointer.c: Ditto.\n+\t* gcc.dg/dfp/func-scalar.c: Ditto.\n+\t* gcc.dg/dfp/func-struct.c: Ditto.\n+\t* gcc.dg/dfp/func-vararg-alternate.h: Ditto.\n+\t* gcc.dg/dfp/func-vararg-alternate-d32.c: Ditto.\n+\t* gcc.dg/dfp/func-vararg-alternate-d64.c: Ditto.\n+\t* gcc.dg/dfp/func-vararg-alternate-d128.c: Ditto.\n+\t* gcc.dg/dfp/func-vararg-alternate-d128-2.c: Ditto.\n+\t* gcc.dg/dfp/func-vararg-dfp.c: Ditto.\n+\t* gcc.dg/dfp/func-vararg-mixed.c: Ditto.\n+\t* gcc.dg/dfp/func-vararg-mixed-2.c: Ditto.\n+\t* gcc.dg/dfp/func-vararg-size0.c: Ditto.\n+\t* gcc.dg/dfp/inf-1.c: Ditto.\n+\t* gcc.dg/dfp/loop-index.c: Ditto.\n+\t* gcc.dg/dfp/nan-1.c: Ditto.\n+\t* gcc.dg/dfp/nan-2.c: Ditto.\n+\t* gcc.dg/dfp/operator-arith-fold.c: Ditto.\n+\t* gcc.dg/dfp/operator-assignment.c: Ditto.\n+\t* gcc.dg/dfp/operator-comma.c: Ditto.\n+\t* gcc.dg/dfp/operator-cond.c: Ditto.\n+\t* gcc.dg/dfp/operator-logical.c: Ditto.\n+\t* gcc.dg/dfp/operator-unary.c: Ditto.\n+\t* gcc.dg/dfp/pr36800.c: Ditto.\n+\t* gcc.dg/dfp/pr39034.c: Ditto.\n+\t* gcc.dg/dfp/pr39035.c: Ditto.\n+\t* gcc.dg/dfp/pr39902.c: Ditto.\n+\t* gcc.dg/dfp/signbit-1.c: Ditto.\n+\t* gcc.dg/dfp/signbit-2.c: Ditto.\n+\t* gcc.dg/dfp/struct-layout-1.c: Ditto.\n+\t* gcc.dg/dfp/union-init.c: Ditto.\n+\t* gcc.dg/dfp/usual-arith-conv.c: Ditto.\n+\n 2009-09-16  Michael Matz  <matz@suse.de>\n \n \tPR fortran/41212"}, {"sha": "99d8f0655d7134c49a56d23a37af68ee24523064", "filename": "gcc/testsuite/gcc.dg/dfp/Wbad-function-cast-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2FWbad-function-cast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2FWbad-function-cast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2FWbad-function-cast-1.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -2,7 +2,7 @@\n /* Based on gcc.dg/Wbad-function-cast-1.c.  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -Wbad-function-cast\" } */\n+/* { dg-options \"-Wbad-function-cast\" } */\n \n int if1(void);\n char if2(void);"}, {"sha": "2436afc8ae54ab85af22c7170566bdcc9201db38", "filename": "gcc/testsuite/gcc.dg/dfp/Wtraditional-conversion-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2FWtraditional-conversion-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2FWtraditional-conversion-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2FWtraditional-conversion-2.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -2,7 +2,7 @@\n    (based on gcc.dg/Wtraditional-conversion-2.c).  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -Wtraditional-conversion\" } */\n+/* { dg-options \"-Wtraditional-conversion\" } */\n \n void fsi(signed int);\n void fd32(_Decimal32);"}, {"sha": "74aec53aefb286bb3def54e0a6fd8abdd482854c", "filename": "gcc/testsuite/gcc.dg/dfp/call-by-value.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcall-by-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcall-by-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcall-by-value.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,11 +1,9 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* C99 6.9.1(9) Function definitions; parameter has automatic storage.\n \n    Test that actual parameters are passed by value and that modifications\n    made within functions are lost on function return.  */\n \n-extern void abort (void);\n+#include \"dfp-dbg.h\"\n \n int foo32 (_Decimal32 z)\n {\n@@ -31,15 +29,15 @@ main ()\n \n   foo32 (d32);\n   if (d32 != 1.1df)\n-    abort ();\n+    FAILURE\n \n   foo64 (d64);\n   if (d64 != 1.2dd)\n-    abort ();\n+    FAILURE\n \n   foo128 (d128);\n   if (d128 != 1.3dl)\n-    abort ();\n+    FAILURE\n \n-  return 0;\n+  FINISH\n }"}, {"sha": "e9e31ff306763037b10ebb0cd4b21d5c3bd8cee7", "filename": "gcc/testsuite/gcc.dg/dfp/cast-bad.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast-bad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast-bad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast-bad.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n \n /* C99 6.5.4 Cast operators.\n    Test invalid casts involving decimal float.  */"}, {"sha": "b6585d70c8b4fbc8a4b2bae3fbd71194c5360106", "filename": "gcc/testsuite/gcc.dg/dfp/cast.c", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcast.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,17 +1,7 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* C99 6.5.4 Cast operators.\n    Test valid casts involving decimal float.  */\n \n-extern void abort (void);\n-int failcnt;\n-                                                                                \n-#ifdef DBG\n-extern int printf (const char *, ...);\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#include \"dfp-dbg.h\"\n \n _Decimal32 d32;\n _Decimal64 d64;\n@@ -81,8 +71,5 @@ main (void)\n   if (d128 != (_Decimal128) d)\n     FAILURE\n \n-  if (failcnt != 0)\n-    abort ();\n-\n-  return 0;\n+  FINISH\n }"}, {"sha": "0c9ff200b2816e7cb080028bd062a870f6272571", "filename": "gcc/testsuite/gcc.dg/dfp/compare-eq-const.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-const.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,8 +1,8 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* C99 6.5.9 Equality operators.\n    Compare decimal float constants against each other. */\n \n+#include \"dfp-dbg.h\"\n+\n extern void link_error (void);\n \n int\n@@ -24,5 +24,5 @@ main ()\n   if (1.4dd + 1.4dd + 1.4dd != 4.2dd)\n     link_error ();\n \n-  return 0;\n+  FINISH\n }"}, {"sha": "79fcac3195e99a16feaba66509c0890916528fd1", "filename": "gcc/testsuite/gcc.dg/dfp/compare-eq-d128.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-d128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-d128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-d128.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-std=gnu99 -O0\" } */\n+/* { dg-options \"-O0\" } */\n \n /* C99 6.5.9 Equality operators.\n    Compare decimal float values against each other at runtime.  */\n@@ -9,5 +9,6 @@\n int main ()\n {\n   test_compares ();\n-  return 0;\n+\n+  FINISH\n }"}, {"sha": "6b1a4c6d7c43159084d94b45f943357d9a1074b1", "filename": "gcc/testsuite/gcc.dg/dfp/compare-eq-d32.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-d32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-d32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-d32.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-std=gnu99 -O0\" } */\n+/* { dg-options \"-O0\" } */\n \n /* C99 6.5.9 Equality operators.\n    Compare decimal float values against each other at runtime.  */\n@@ -9,5 +9,6 @@\n int main ()\n {\n   test_compares ();\n-  return 0;\n+\n+  FINISH\n }"}, {"sha": "f1b463ebe6a07c092d91fd76236c5ecf7ea12aa7", "filename": "gcc/testsuite/gcc.dg/dfp/compare-eq-d64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-d64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-d64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-d64.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-std=gnu99 -O0\" } */\n+/* { dg-options \"-O0\" } */\n \n /* C99 6.5.9 Equality operators.\n    Compare decimal float values against each other at runtime.  */\n@@ -9,5 +9,6 @@\n int main ()\n {\n   test_compares ();\n-  return 0;\n+\n+  FINISH\n }"}, {"sha": "79a5691ebfc23da13e259e8de258e93858179ee1", "filename": "gcc/testsuite/gcc.dg/dfp/compare-eq-dfp.c", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-dfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-dfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq-dfp.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,19 +1,9 @@\n-/* { dg-options \"-std=gnu99 -O0\" } */\n+/* { dg-options \"-O0\" } */\n \n /* C99 6.5.9 Equality operators.\n    Compare decimal float values against variables of different types.  */\n \n-extern void abort (void);\n-static int failcnt;\n-\n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#include \"dfp-dbg.h\"\n \n _Decimal32 d32;\n _Decimal64 d64;\n@@ -59,7 +49,5 @@ main ()\n \n   compare_dfp ();\n \n-  if (failcnt)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "830b3289bdef1f49736b240d4f9e03e92e82de3d", "filename": "gcc/testsuite/gcc.dg/dfp/compare-eq.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-eq.h?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -2,19 +2,18 @@\n    are not affected by rounding.  */\n \n #include <stdlib.h>\n-\n-static int failcnt;\n+#include \"dfp-dbg.h\"\n \n #define PASTE2(A,B) A ## B\n #define PASTE(A,B) PASTE2(A,B)\n \n+#undef FAILURE\n #ifdef DBG\n-#include <stdio.h>\n #define FAILURE(OP,KIND) \\\n   { printf (\"failed at line %d: %s for %s values\\n\", __LINE__, OP, KIND); \\\n-    failcnt++; }\n+    failures++; }\n #else\n-#define FAILURE(OP,KIND) abort ();\n+#define FAILURE(OP,KIND) __builtin_abort ();\n #endif\n \n #ifndef WIDTH\n@@ -90,7 +89,4 @@ test_compares (void)\n   if (! (x != zero))  FAILURE (\"!=\", \"greater\")\n   if (! (y != m_one)) FAILURE (\"!=\", \"greater\")\n   if (! (z != m_two)) FAILURE (\"!=\", \"greater\")\n-\n-  if (failcnt)\n-    abort ();\n }"}, {"sha": "8e99b4466dc7304a35ccdc76caa86c7d51e2641e", "filename": "gcc/testsuite/gcc.dg/dfp/compare-rel-const.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-const.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,3 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* C99 6.5.8 Relational operators.\n    Compare decimal float constants against each other. */\n "}, {"sha": "38c931a02075023d2165deed519b443d11d48917", "filename": "gcc/testsuite/gcc.dg/dfp/compare-rel-d128.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-d128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-d128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-d128.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-std=gnu99 -O0\" } */\n+/* { dg-options \"-O0\" } */\n \n /* C99 6.5.8 Relational operators.\n    Compare decimal float values against each other at runtime.  */\n@@ -10,5 +10,5 @@ int\n main ()\n {\n   test_compares ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "04128aab924db6915c0bc13490dc27ddf188946d", "filename": "gcc/testsuite/gcc.dg/dfp/compare-rel-d32.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-d32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-d32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-d32.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-std=gnu99 -O0\" } */\n+/* { dg-options \"-O0\" } */\n \n /* C99 6.5.8 Relational operators.\n    Compare decimal float values against each other at runtime.  */\n@@ -10,5 +10,5 @@ int\n main ()\n {\n   test_compares ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "92f904a8154c2790e458ca3fc6567ede7f9b48a9", "filename": "gcc/testsuite/gcc.dg/dfp/compare-rel-d64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-d64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-d64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-d64.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-std=gnu99 -O0\" } */\n+/* { dg-options \"-O0\" } */\n \n /* C99 6.5.8 Relational operators.\n    Compare decimal float values against each other at runtime.  */\n@@ -10,5 +10,5 @@ int\n main ()\n {\n   test_compares ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "59cc203530698f54f48c61adcd3028d67ae56795", "filename": "gcc/testsuite/gcc.dg/dfp/compare-rel-dfp.c", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-dfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-dfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel-dfp.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,19 +1,9 @@\n-/* { dg-options \"-std=gnu99 -O0\" } */\n+/* { dg-options \"-O0\" } */\n \n /* C99 6.5.8 Relational operators.\n    Compare decimal float values against variables of different types.  */\n \n-extern void abort (void);\n-static int failcnt;\n-\n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#include \"dfp-dbg.h\"\n \n _Decimal32 d32;\n _Decimal64 d64;\n@@ -59,7 +49,5 @@ main ()\n \n   compare_dfp ();\n \n-  if (failcnt)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "7840108142d355bd02bc44aeaebd5461bec727f5", "filename": "gcc/testsuite/gcc.dg/dfp/compare-rel.h", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-rel.h?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -2,21 +2,20 @@\n    are not affected by rounding.  */\n \n #include <stdlib.h>\n+#include \"dfp-dbg.h\"\n \n-static int failcnt;\n-\n-#define PASTE2(A,B) A ## B\n-#define PASTE(A,B) PASTE2(A,B)\n-\n+#undef FAILURE\n #ifdef DBG\n-#include <stdio.h>\n #define FAILURE(OP,KIND) \\\n   { printf (\"failed at line %d: %s for %s values\\n\", __LINE__, OP, KIND); \\\n-    failcnt++; }\n+    failures++; }\n #else\n-#define FAILURE(OP,KIND) abort ();\n+#define FAILURE(OP,KIND) __builtin_abort ();\n #endif\n \n+#define PASTE2(A,B) A ## B\n+#define PASTE(A,B) PASTE2(A,B)\n+\n #ifndef WIDTH\n #error define WIDTH as decimal float size in bytes\n #endif\n@@ -130,7 +129,4 @@ test_compares (void)\n   if (y > one)        FAILURE (\">\", \"greater\")\n   if (z > zero)       FAILURE (\">\", \"greater\")\n   if (z > one)        FAILURE (\">\", \"greater\")\n-\n-  if (failcnt)\n-    abort ();\n }"}, {"sha": "d1f5bc5edd4f3aed5f5a2353c5ec27b6b3c13a34", "filename": "gcc/testsuite/gcc.dg/dfp/compare-special-d128.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special-d128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special-d128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special-d128.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-std=gnu99 -O0\" } */\n+/* { dg-options \"-O0\" } */\n \n /* C99 6.5.8 Relational operators.\n    C99 6.5.9 Equality operators.\n@@ -11,5 +11,5 @@ int\n main ()\n {\n   test_compares ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "377c65a5bb78403cdbc3bc4c99bab738c1a88ec3", "filename": "gcc/testsuite/gcc.dg/dfp/compare-special-d32.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special-d32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special-d32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special-d32.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-std=gnu99 -O0\" } */\n+/* { dg-options \"-O0\" } */\n \n /* C99 6.5.8 Relational operators.\n    C99 6.5.9 Equality operators.\n@@ -11,5 +11,5 @@ int\n main ()\n {\n   test_compares ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "16154eff32305f38bd3f4351744e0152faa9a2e4", "filename": "gcc/testsuite/gcc.dg/dfp/compare-special-d64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special-d64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special-d64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special-d64.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-std=gnu99 -O0\" } */\n+/* { dg-options \"-O0\" } */\n \n /* C99 6.5.8 Relational operators.\n    C99 6.5.9 Equality operators.\n@@ -11,5 +11,5 @@ int\n main ()\n {\n   test_compares ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "9c27d126c29b056860d0c5af19795a93380bccb0", "filename": "gcc/testsuite/gcc.dg/dfp/compare-special.h", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcompare-special.h?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,19 +1,19 @@\n /* Basic test of runtime relational comparisons using NaNs and infinities.  */\n \n #include <stdlib.h>\n-\n-static int failcnt;\n+#include \"dfp-dbg.h\"\n \n #define PASTE2(A,B) A ## B\n #define PASTE(A,B) PASTE2(A,B)\n \n+/* Override FAILURE from dfp-dbg.h with one that provides additional info.  */\n+#undef FAILURE\n #ifdef DBG\n-#include <stdio.h>\n #define FAILURE(OP,KIND) \\\n   { printf (\"failed at line %d: %s for %s values\\n\", __LINE__, OP, KIND); \\\n-    failcnt++; }\n+    failures++; }\n #else\n-#define FAILURE(OP,KIND) abort ();\n+#define FAILURE(OP,KIND) __builtin_abort ();\n #endif\n \n #ifndef WIDTH\n@@ -281,7 +281,4 @@ test_compares (void)\n   if (!(y != m_inf)) FAILURE (\"!=\", \"inf\")\n   if (!(z != inf))   FAILURE (\"!=\", \"inf\")\n   if (z != m_inf)    FAILURE (\"!=\", \"inf\")\n-\n-  if (failcnt)\n-    abort ();\n }"}, {"sha": "508ebbd5e29d043b827bafd1822a7f87bb597308", "filename": "gcc/testsuite/gcc.dg/dfp/composite-type.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcomposite-type.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcomposite-type.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fcomposite-type.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -O -Wall\" } */\n+/* { dg-options \"-O -Wall\" } */\n \n /* C99 6.2.7: Compatible type and composite type.  */\n "}, {"sha": "980eae012a8dfb9ba2d33ce3786584fd91d1e8ff", "filename": "gcc/testsuite/gcc.dg/dfp/constants-hex.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-hex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-hex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-hex.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n \n /* N1150 6: Constants.\n    C99 6.4.4.2: Floating constants."}, {"sha": "be81b0fc44a5236a38e43c0ca546cc69c1127606", "filename": "gcc/testsuite/gcc.dg/dfp/constants-pedantic.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-pedantic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-pedantic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-pedantic.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,9 +1,11 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -pedantic\" } */\n+/* { dg-options \"-pedantic\" } */\n \n /* N1150 6: Constants.\n    C99 6.4.4.2: Floating constants.  */\n \n+#include \"dfp-dbg.h\"\n+\n _Decimal32 a = 1.1df;\t\t/* { dg-warning \"GCC extension|ISO C\" } */\n _Decimal32 b = -.003DF;\t\t/* { dg-warning \"GCC extension|ISO C\" } */\n _Decimal64 c = 11e-1dl;\t\t/* { dg-warning \"GCC extension|ISO C\" } */"}, {"sha": "64b0054d2d3bac662d6344fdd2537b72cee29789", "filename": "gcc/testsuite/gcc.dg/dfp/constants-zero.c", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-zero.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-zero.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants-zero.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,10 +1,10 @@\n-/* { dg-options \"-std=gnu99 -O0\" } */\n+/* { dg-options \"-O0\" } */\n \n /* Decimal float values can have significant trailing zeroes.  This is\n    true for zero values as well.  Check that various representations of\n    zero are handled correctly when specified as literal constants.  */\n \n-extern void abort (void);\n+#include \"dfp-dbg.h\"\n \n int big_endian;\n \n@@ -58,74 +58,74 @@ void\n dpd_tests (void)\n {\n   if (! compare32 (0.DF, 0x22500000U))\n-    abort ();\n+    FAILURE\n   if (! compare32 (-0.DF, 0xa2500000U))\n-    abort ();\n+    FAILURE\n   if (! compare32 (0.E-4DF, 0x22100000U))\n-    abort ();\n+    FAILURE\n   if (! compare32 (0.E-7DF, 0x21e00000U))\n-    abort ();\n+    FAILURE\n   if (! compare32 (0.E+3DF, 0x22800000U))\n-    abort ();\n+    FAILURE\n \n   if (! compare64 (0.DD, 0x2238000000000000ULL))\n-    abort ();\n+    FAILURE\n   if (! compare64 (-0.DD, 0xa238000000000000ULL))\n-    abort ();\n+    FAILURE\n   if (! compare64 (0.E-6DD, 0x2220000000000000ULL))\n-    abort ();\n+    FAILURE\n   if (! compare64 (0.E-7DD, 0x221c000000000000ULL))\n-    abort ();\n+    FAILURE\n   if (! compare64 (0.E+2DD, 0x2240000000000000ULL))\n-    abort ();\n+    FAILURE\n \n   if (! compare128 (0.DL, 0x2208000000000000ULL, 0x0000000000000000ULL))\n-    abort ();\n+    FAILURE\n   if (! compare128 (-0.DL, 0xa208000000000000ULL, 0x0000000000000000ULL))\n-    abort ();\n+    FAILURE\n   if (! compare128 (0.E-3DL, 0x2207400000000000ULL, 0x0000000000000000ULL))\n-    abort ();\n+    FAILURE\n   if (! compare128 (0.E-8DL, 0x2206000000000000ULL, 0x0000000000000000ULL))\n-    abort ();\n+    FAILURE\n   if (! compare128 (0.E+2DL, 0x2208800000000000ULL, 0x0000000000000000ULL))\n-    abort ();\n+    FAILURE\n }\n \n void\n bid_tests (void)\n {\n   if (! compare32 (0.DF, 0x32800000U))\n-    abort ();\n+    FAILURE\n   if (! compare32 (-0.DF, 0xb2800000U))\n-    abort ();\n+    FAILURE\n   if (! compare32 (0.E-4DF, 0x30800000U))\n-    abort ();\n+    FAILURE\n   if (! compare32 (0.E-7DF, 0x2f000000U))\n-    abort ();\n+    FAILURE\n   if (! compare32 (0.E+3DF, 0x34000000U))\n-    abort ();\n+    FAILURE\n \n   if (! compare64 (0.DD, 0x31c0000000000000ULL))\n-    abort ();\n+    FAILURE\n   if (! compare64 (-0.DD, 0xb1c0000000000000ULL))\n-    abort ();\n+    FAILURE\n   if (! compare64 (0.E-6DD, 0x3100000000000000ULL))\n-    abort ();\n+    FAILURE\n   if (! compare64 (0.E-7DD, 0x30e0000000000000ULL))\n-    abort ();\n+    FAILURE\n   if (! compare64 (0.E+2DD, 0x3200000000000000ULL))\n-    abort ();\n+    FAILURE\n \n   if (! compare128 (0.DL, 0x3040000000000000ULL, 0x0000000000000000ULL))\n-    abort ();\n+    FAILURE\n   if (! compare128 (-0.DL, 0xb040000000000000ULL, 0x0000000000000000ULL))\n-    abort ();\n+    FAILURE\n   if (! compare128 (0.E-3DL, 0x303a000000000000ULL, 0x0000000000000000ULL))\n-    abort ();\n+    FAILURE\n   if (! compare128 (0.E-8DL, 0x3030000000000000ULL, 0x0000000000000000ULL))\n-    abort ();\n+    FAILURE\n   if (! compare128 (0.E+2DL, 0x3044000000000000ULL, 0x0000000000000000ULL))\n-    abort ();\n+    FAILURE\n }\n \n int\n@@ -138,7 +138,7 @@ main ()\n   if ((sizeof (_Decimal64) != sizeof (long long))\n       || (sizeof (_Decimal128) != 2 * sizeof (long long))\n       || (sizeof (_Decimal32) != sizeof (_Decimal32)))\n-    abort ();\n+    FAILURE\n \n   u32.d = 1.DF;\n \n@@ -153,7 +153,7 @@ main ()\n        bid_tests ();\n     }\n   else\n-    abort ();\t\t/* unknown format; test problem  */\n+    FAILURE\t\t/* unknown format; test problem  */\n \n-  return 0;\n+  FINISH\n }"}, {"sha": "bb61ea3352b90b9d193b3ba06d76324401f9a2df", "filename": "gcc/testsuite/gcc.dg/dfp/constants.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconstants.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n \n /* N1150 6: Constants.\n    C99 6.4.4.2: Floating constants.  */"}, {"sha": "743eb293c55c93397592ab44c14efef23ef069a8", "filename": "gcc/testsuite/gcc.dg/dfp/convert-bfp-10.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-10.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,3 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* This test assumes IEEE float and double.  */\n \n #define __STDC_WANT_DEC_FP__\n@@ -108,7 +106,5 @@ main ()\n   convert_246 ();\n   convert_247 ();\n \n-  if (failcnt != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "d16919f81ac9a2da33fcb3922fa7fc559a041ba9", "filename": "gcc/testsuite/gcc.dg/dfp/convert-bfp-11.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-11.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,4 +1,3 @@\n-/* { dg-options \"-std=gnu99\" } */\n /* { dg-skip-if \"\" { ! \"powerpc*-*-linux*\" } { \"*\" } { \"\" } } */\n \n /* Test decimal float conversions to and from IBM 128-bit long double. \n@@ -55,7 +54,5 @@ main ()\n   convert_311 ();\n   convert_312 ();\n \n-  if (failcnt != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "7a909552afc537926618d0a1a8e1ee530daa669b", "filename": "gcc/testsuite/gcc.dg/dfp/convert-bfp-12.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-12.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,9 +1,7 @@\n /* Test for bug where fold wrongly removed conversions to double and\n    replaced them by conversions to float.  */\n-/* { dg-options \"-std=gnu99\" } */\n \n-extern void abort (void);\n-extern void exit (int);\n+#include \"dfp-dbg.h\"\n \n volatile float f = __builtin_inff ();\n volatile _Decimal32 d32 = 1e40DF;\n@@ -12,6 +10,7 @@ int\n main (void)\n {\n   if ((double) f == (double) d32)\n-    abort ();\n-  exit (0);\n+    FAILURE\n+\n+  FINISH\n }"}, {"sha": "259cc745ce3114a5e6cb3b15d7893863208f1146", "filename": "gcc/testsuite/gcc.dg/dfp/convert-bfp-13.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-13.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,9 +1,7 @@\n /* Test for bug where fold changed binary operation to decimal\n    depending on typedefs.  */\n-/* { dg-options \"-std=gnu99\" } */\n \n-extern void abort (void);\n-extern void exit (int);\n+#include \"dfp-dbg.h\"\n \n volatile double d = 1.2345675;\n \n@@ -15,6 +13,6 @@ main (void)\n   _Decimal32 a = (d * d);\n   d32 b = (d * d);\n   if (a != b)\n-    abort ();\n-  exit (0);\n+    FAILURE\n+  FINISH\n }"}, {"sha": "858c92980b5c7e269abd738b854e7b52c9925ae5", "filename": "gcc/testsuite/gcc.dg/dfp/convert-bfp-14.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-14.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,9 +1,7 @@\n /* Test for bug where fold narrowed decimal floating-point\n    operations.  */\n-/* { dg-options \"-std=gnu99\" } */\n \n-extern void abort (void);\n-extern void exit (int);\n+#include \"dfp-dbg.h\"\n \n volatile _Decimal32 f = 1.23456DF;\n volatile _Decimal64 d = 1.23456DD;\n@@ -12,6 +10,6 @@ int\n main (void)\n {\n   if ((double)((_Decimal64)f * (_Decimal64)f) != (double)(d * d))\n-    abort ();\n-  exit (0);\n+    FAILURE\n+  FINISH\n }"}, {"sha": "463d27f355f3f309e245e34f76618cbc5a86c1c6", "filename": "gcc/testsuite/gcc.dg/dfp/convert-bfp-2.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-2.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,3 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* This test assumes IEEE float and double.  It also tests long double\n    but makes no assumption about its size or range of values.  */\n \n@@ -31,7 +29,5 @@ main ()\n   CALL_VALID_ALL (t6)\n   CALL_VALID_ALL (t7)\n \n-  if (failcnt != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "3e1d9d57a77319596c7bdcf9cb63f2490aaad2ed", "filename": "gcc/testsuite/gcc.dg/dfp/convert-bfp-3.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-3.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,3 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* This test assumes IEEE float and double.  It also tests long double\n    but makes no assumption about its size or range of values.  */\n \n@@ -19,7 +17,5 @@ main ()\n {\n   CALL_ZEROES_ALL (t)\n \n-  if (failcnt != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "b97b9c6cb0866e5dea3eaf0a9dff889fc14d750c", "filename": "gcc/testsuite/gcc.dg/dfp/convert-bfp-4.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-4.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,3 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* This test assumes IEEE float and double.  It also tests long double\n    but makes no assumption about its size or range of values.  */\n \n@@ -19,7 +17,5 @@ main ()\n {\n   CALL_INF_ALL (t)\n \n-  if (failcnt != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "ada2d352cca21ddb67f96d5bd54760034bfd8247", "filename": "gcc/testsuite/gcc.dg/dfp/convert-bfp-5.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-5.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,3 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* This test assumes IEEE float and double.  It also tests long double\n    but makes no assumption about its size or range of values.  */\n \n@@ -19,7 +17,5 @@ main ()\n {\n   CALL_NAN_ALL (t)\n \n-  if (failcnt != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "64198a95f2ad01ed50c8fadc6bba4fc4cb91de58", "filename": "gcc/testsuite/gcc.dg/dfp/convert-bfp-6.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-6.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,5 @@\n /* { dg-xfail-run-if \"\" { lax_strtofp } \"*\" \"\" } */\n-/* { dg-options \"-std=gnu99 -w\" } */\n+/* { dg-options \"-w\" } */\n \n /* This test assumes IEEE float and double.  */\n \n@@ -174,7 +174,5 @@ main ()\n       convert_364 ();\n     }\n \n-  if (failcnt != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "f51d696cee60edc8244c871ea75a8a7da61fbfcc", "filename": "gcc/testsuite/gcc.dg/dfp/convert-bfp-7.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-7.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-std=gnu99 -w\" } */\n+/* { dg-options \"-w\" } */\n \n /* This test assumes IEEE float and double.  */\n \n@@ -79,7 +79,5 @@ main ()\n   convert_351 ();\n   convert_352 ();\n \n-  if (failcnt != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "532bd8613146e1dd074357a26cbc04482aa5a6b6", "filename": "gcc/testsuite/gcc.dg/dfp/convert-bfp-8.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-8.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-std=gnu99 -w\" } */\n+/* { dg-options \"-w\" } */\n \n /* This test assumes IEEE float and double.  */\n \n@@ -67,7 +67,5 @@ main ()\n   convert_443 ();\n   convert_444 ();\n \n-  if (failcnt != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "e609087525abb4be75d8f6b74c7da5360833b300", "filename": "gcc/testsuite/gcc.dg/dfp/convert-bfp-9.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-9.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,5 @@\n /* { dg-xfail-run-if \"\" { lax_strtofp } \"*\" \"\" } */\n-/* { dg-options \"-std=gnu99 -w\" } */\n+/* { dg-options \"-w\" } */\n \n /* This test assumes IEEE float and double.  */\n \n@@ -188,7 +188,5 @@ main ()\n   convert_419 ();\n   convert_420 ();\n \n-  if (failcnt != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "41a04febf6188808373d1fb0f869e0f12989ce57", "filename": "gcc/testsuite/gcc.dg/dfp/convert-bfp-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp-fold.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-std=gnu99 -O2\" } */\n+/* { dg-options \"-O2\" } */\n \n /* N1150 5.2 Conversions among decimal floating types and between\n    decimal floating types and generic floating types."}, {"sha": "710538d467bd5827b4a37d4a4d50e565207b5af9", "filename": "gcc/testsuite/gcc.dg/dfp/convert-bfp.c", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-bfp.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,23 +1,12 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* N1150 5.2 Conversions among decimal floating types and between\n    decimal floating types and generic floating types.\n    C99 6.3.1.5(4) Conversions, arithmetic operands, real floating types.  */\n \n /* Long double isn't supported yet at runtime, so disable those checks.  */\n \n-extern void abort (void);\n-static int failcnt;\n-static int skip_long_double;\n+#include \"dfp-dbg.h\"\n \n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+static int skip_long_double;\n \n volatile _Decimal32 d32;\n volatile _Decimal64 d64;\n@@ -138,8 +127,5 @@ main ()\n       || df > (2.9802322387695312e-08 + 0.00000000001))\n     FAILURE\n \n-  if (failcnt != 0)\n-    abort ();\n-\n-  return 0;\n+  FINISH\n }"}, {"sha": "76eef87cb7c24e3869de9e9c21dd14662c1b589e", "filename": "gcc/testsuite/gcc.dg/dfp/convert-complex.c", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-complex.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -3,17 +3,7 @@\n /* N1150 5.3 Conversions between decimal floating and complex.\n    C99 6.3.1.7 Conversions, arithmetic operands, real and complex.  */\n \n-extern void abort(void);\n-static int failcnt;\n-\n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#include \"dfp-dbg.h\"\n \n int\n main ()\n@@ -124,8 +114,5 @@ main ()\n   if (d128 != 0.0625DL)\n     FAILURE\n \n-  if (failcnt != 0)\n-    abort ();\n-\n-  return 0;\n+  FINISH\n }"}, {"sha": "073f7abc4a625190ef1e487420bf6cb371eeaf91", "filename": "gcc/testsuite/gcc.dg/dfp/convert-dfp-fold-2.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp-fold-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp-fold-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp-fold-2.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,9 +1,7 @@\n /* Test for bug where fold narrowed decimal floating-point\n    operations.  */\n-/* { dg-options \"-std=gnu99\" } */\n \n-extern void abort (void);\n-extern void exit (int);\n+#include \"dfp-dbg.h\"\n \n volatile _Decimal32 f = 1.23456DF;\n volatile _Decimal64 d = 1.23456DD;\n@@ -12,6 +10,6 @@ int\n main (void)\n {\n   if ((_Decimal128)((_Decimal64)f * (_Decimal64)f) != (_Decimal128)(d * d))\n-    abort ();\n-  exit (0);\n+    FAILURE\n+  FINISH\n }"}, {"sha": "349fb3545ecf8ce7b0daabe99b621a455c4c2b1e", "filename": "gcc/testsuite/gcc.dg/dfp/convert-dfp-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp-fold.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-std=gnu99 -O2\" } */\n+/* { dg-options \"-O2\" } */\n \n /* N1150 5.2 Conversions among decimal floating types and between\n    decimal floating types and generic floating types."}, {"sha": "e3781bfc9679e8f5f0f1e7689c2d66899d6c6d77", "filename": "gcc/testsuite/gcc.dg/dfp/convert-dfp-round.c", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp-round.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp-round.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp-round.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-O0 -std=gnu99\" } */\n+/* { dg-options \"-O0\" } */\n /* { dg-skip-if \"test is for emulation\" { hard_dfp } { \"*\" } { \"\" } } */\n \n /* N1150 5.2: Conversions among decimal floating types and between\n@@ -12,20 +12,9 @@\n    Normally this would not be part of compiler testing, but conversions\n    are currently handled in libgcc via decNumber.  */\n \n+#include \"dfp-dbg.h\"\n #include \"dfp-round.h\"\n \n-extern void abort (void);\n-static int failcnt = 0;\n-\n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n-\n _Decimal32 d32;\n _Decimal64 d64;\n _Decimal128 d128;\n@@ -131,7 +120,5 @@ main ()\n   if (!do_d128_to_d64 (-1.1111111111111125dl, -1.111111111111112dd)) FAILURE\n   if (!do_d128_to_d64 (-1.1111111111111135dl, -1.111111111111113dd)) FAILURE\n   \n-  if (failcnt)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "d52ba51b0beaeb03d7e8c3510b0d646a6bcb85bd", "filename": "gcc/testsuite/gcc.dg/dfp/convert-dfp.c", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-dfp.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-std=gnu99 -O0\" } */\n+/* { dg-options \"-O0\" } */\n \n /* N1150 5.2 Conversions among decimal floating types and between\n    decimal floating types and generic floating types.\n@@ -10,20 +10,9 @@\n #define __STDC_WANT_DEC_FP__ 1\n #endif\n \n+#include \"dfp-dbg.h\"\n #include <float.h>\n \n-extern void abort (void);\n-static int failcnt;\n-\n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n-\n volatile _Decimal32 d32;\n volatile _Decimal64 d64;\n volatile _Decimal128 d128;\n@@ -101,8 +90,5 @@ main ()\n   if (d64 != __builtin_infd64())\n     FAILURE\n \n-  if (failcnt != 0)\n-    abort ();\n-\n-  return 0;\n+  FINISH\n }"}, {"sha": "ae0945b0d5d4acf0a5f4f2f1bba677d856064caf", "filename": "gcc/testsuite/gcc.dg/dfp/convert-int-fold.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-fold.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,9 +1,13 @@\n-/* { dg-options \"-std=gnu99 -O2\" } */\n+/* { dg-options \"-O2\" } */\n \n /* N1150 5.1 Conversion between decimal floating integer.\n    C99 6.3.1.4(1a) New.\n    These should all be folded at compile time.  */\n \n+#include \"dfp-dbg.h\"\n+\n+#define BOOL _Bool\n+\n extern void link_error (void);\n \n int\n@@ -18,11 +22,11 @@ main ()\n   int si;\n   long sl;\n   long long sll;\n-  _Bool b;\n+  BOOL b;\n \n   /* C99 Section 6.7.2 Type specifiers.  Type _Bool is \n      mentioned in this section.  Conversions between \n-     _Bool and DFP types.  */\n+     BOOL and DFP types.  */\n \n   /* Decimal float to unsigned integer.  */\n   d32 = 456.789df;\n@@ -61,7 +65,7 @@ main ()\n \n   /* Decimal float to signed integer.  */\n \n-  /* Decimal float to _Bool.  */\n+  /* Decimal float to BOOL.  */\n   d32 = 1.23df;\n   d64 = -3.4dd;\n   d128 = 0.00003dl;\n@@ -146,7 +150,7 @@ main ()\n   if (d128 != -1234567.dl)\n     link_error ();\n \n-  /* _Bool to decimal float.  */\n+  /* BOOL to decimal float.  */\n   d32 = 0.0DF;\n   d64 = 0.0DD;\n   d128 = 0.0DL;"}, {"sha": "9abbbbb6078e54e93d402783dbae7a9b96023b47", "filename": "gcc/testsuite/gcc.dg/dfp/convert-int-max-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-max-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-max-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-max-fold.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-std=gnu99 -O2\" } */\n+/* { dg-options \"-O2 -w\" } */\n \n /* N1150 5.1 Conversions from decimal float to integer.  */\n "}, {"sha": "724627d376303ec1ef18cc3b470564cce6491dd7", "filename": "gcc/testsuite/gcc.dg/dfp/convert-int-max.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-max.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-max.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-max.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,20 +1,12 @@\n-/* { dg-options \"-std=gnu99 -O0\" } */\n+/* { dg-options \"-O0 -w\" } */\n \n /* N1150 5.1 Conversions from decimal float to integer.  */\n \n /* Test decimal float to integer conversions for values at the limit of\n    what will fit into the destination type.  This assumes 32-bit int and\n    64-bit long long (there's a check for that below).  */\n \n-extern void abort (void);\n-int failcnt;\n-\n-#ifdef DBG\n-extern int printf (const char *, ...);\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#include \"dfp-dbg.h\"\n \n volatile _Decimal32 d32;\n volatile _Decimal64 d64;\n@@ -150,7 +142,5 @@ main ()\n \n   doit ();\n \n-  if (failcnt != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "c92502d56ad2068aa91bd11947af7fc9597c5aaf", "filename": "gcc/testsuite/gcc.dg/dfp/convert-int-saturate.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-saturate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-saturate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int-saturate.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,3 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* N1150 5.1 Conversion between decimal floating integer.\n    C99 6.3.1.4(1a) New.\n    Test integer saturation.  */\n@@ -8,11 +6,10 @@\n #define __STDC_WANT_DEC_FP__ 1\n #endif\n \n+#include \"dfp-dbg.h\"\n #include <float.h>\n #include <limits.h>\n \n-extern void abort (void);\n-\n volatile _Decimal32 d32;\n volatile _Decimal64 d64;\n volatile _Decimal128 d128;\n@@ -28,40 +25,40 @@ main ()\n   /* Unsigned.  */\n   usi = DEC32_MAX;  /* { dg-warning \"overflow in implicit constant conversion\" } */\n   if (usi != UINT_MAX)\n-    abort ();\n+    FAILURE\n \n   usi = DEC64_MAX;  /* { dg-warning \"overflow in implicit constant conversion\" } */\n   if (usi != UINT_MAX)\n-    abort ();\n+    FAILURE\n \n   usi = DEC128_MAX; /* { dg-warning \"overflow in implicit constant conversion\" } */\n   if (usi != UINT_MAX)\n-    abort ();\n+    FAILURE\n \n   /* Signed.  */\n   si = DEC32_MAX;\t/* { dg-warning \"overflow in implicit constant conversion\" } */\n   if (si != INT_MAX)\n-    abort ();\n+    FAILURE\n \n   si = DEC64_MAX;   /* { dg-warning \"overflow in implicit constant conversion\" } */\n   if (si != INT_MAX)\n-    abort ();\n+    FAILURE\n \n   si = DEC128_MAX;  /* { dg-warning \"overflow in implicit constant conversion\" } */\n   if (si != INT_MAX)\n-    abort ();\n+    FAILURE\n \n   si = - DEC32_MAX; /* { dg-warning \"overflow in implicit constant conversion\" } */\n   if (si != INT_MIN)\n-    abort ();\n+    FAILURE\n \n   si = - DEC64_MAX; /* { dg-warning \"overflow in implicit constant conversion\" } */\n   if (si != INT_MIN)\n-    abort ();\n+    FAILURE\n \n   si = - DEC128_MAX; /* { dg-warning \"overflow in implicit constant conversion\" } */\n   if (si != INT_MIN)\n-    abort ();\n+    FAILURE\n \n-  return 0;\n+  FINISH\n }"}, {"sha": "0c2d79386041b49b6d8151ae4e77eb26bca4ab2a", "filename": "gcc/testsuite/gcc.dg/dfp/convert-int.c", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert-int.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,17 +1,11 @@\n-/* { dg-options \"-std=gnu99 -O0\" } */\n+/* { dg-options \"-O0\" } */\n \n /* N1150 5.1 Conversion between decimal floating types and integer.\n    C99 6.3.1.4(1a) New.  */\n \n-extern void abort (void);\n-int failcnt;\n+#include \"dfp-dbg.h\"\n \n-#ifdef DBG\n-extern int printf (const char *, ...);\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#define BOOL _Bool\n \n _Decimal32 d32;\n _Decimal64 d64;\n@@ -22,7 +16,7 @@ unsigned long long ull;\n int si;\n long sl;\n long long sll;\n-_Bool b;\n+BOOL b;\n \n void\n init_dfp_1 (void)\n@@ -68,7 +62,7 @@ main ()\n {\n   /* C99 Section 6.7.2 Type specifiers.  Type _Bool is \n      mentioned in this section.  Conversions between \n-     _Bool and DFP types.  */\n+     BOOL and DFP types.  */\n \n   /* Decimal float to unsigned integer.  */\n   init_dfp_1 ();\n@@ -105,7 +99,7 @@ main ()\n \n   /* Decimal float to signed integer.  */\n \n-  /* Decimal float to _Bool.  */\n+  /* Decimal float to BOOL.  */\n   init_dfp_2 ();\n \n   b = d32;\n@@ -184,7 +178,7 @@ main ()\n   if (d128 != -1234567.dl)\n     FAILURE\n \n-  /* _Bool to decimal float.  */\n+  /* BOOL to decimal float.  */\n   init_dfp_3 ();\n   \n   b = d32;\n@@ -197,8 +191,5 @@ main ()\n   if (b)\n     FAILURE\n \n-  if (failcnt != 0)\n-    abort ();\n-\n-  return 0;\n+  FINISH\n }"}, {"sha": "304164ff6278c32e2840cc46299b6e965088c800", "filename": "gcc/testsuite/gcc.dg/dfp/convert.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fconvert.h?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,4 @@\n-extern void abort (void);\n-static int failcnt = 0;\n+#include \"dfp-dbg.h\"\n \n /* Macros are set up to skip using long double, which doesn't necessarily\n    map to TF mode.  If there's a reason to skip those for a test, the\n@@ -8,14 +7,16 @@ static int failcnt = 0;\n #define USE_TF 1\n #endif\n \n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n+/* Provide more information with FAILURE than what is available with\n+   the version of that macro in dfp-dbg.h.  */\n+\n+#undef FAILURE\n #if defined(DBG) || defined(DBG2)\n #include <stdio.h>\n #define FAILURE(NUM) \\\n-  { printf (\"failed for test %s\\n\", NUM); failcnt++; }\n+  { printf (\"failed for test %s\\n\", NUM); failures++; }\n #else\n-#define FAILURE(N) abort ();\n+#define FAILURE(N) __builtin_abort ();\n #endif\n \n /* This is useful when modifying the test to make sure that tests are"}, {"sha": "ca8fe954e5e0bfd469cbd4bd9d750aa093716020", "filename": "gcc/testsuite/gcc.dg/dfp/ctypes.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fctypes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fctypes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fctypes.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n \n /* N1150 3: Decimal floating types.\n    C99 6.7.2: Type specifiers  */"}, {"sha": "19f3038010be98ef8eec5cc9533f02031c628299", "filename": "gcc/testsuite/gcc.dg/dfp/ddmode-ice.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fddmode-ice.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fddmode-ice.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fddmode-ice.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -O1\" } */\n+/* { dg-options \"-O1\" } */\n \n /* This used to result in an ICE.  */\n "}, {"sha": "b87f159bf3b63dbf2391c099946dee722598f11b", "filename": "gcc/testsuite/gcc.dg/dfp/dec-eval-method-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdec-eval-method-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdec-eval-method-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdec-eval-method-2.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -D__STDC_WANT_DEC_FP__\" } */\n+/* { dg-options \"-D__STDC_WANT_DEC_FP__\" } */\n                                                                                 \n /* N1107 4: Characteristics of decimal floating types <float.h>.\n    C99 5.2.4.2.2a[2] (New)."}, {"sha": "c72933f4233105b9c749b79ff46e3fe4b35c3730", "filename": "gcc/testsuite/gcc.dg/dfp/decfloat-constants.c", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdecfloat-constants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdecfloat-constants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdecfloat-constants.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,3 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* N1150 4: Characteristics of decimal floating types <float.h>.\n    C99 5.2.4.2.2a[3]: New.\n \n@@ -11,20 +9,9 @@\n #define __STDC_WANT_DEC_FP__ 1\n #endif\n \n+#include \"dfp-dbg.h\"\n #include <float.h>\n \n-extern void abort (void);\n-static int failcnt;\n-\n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n-\n int main ()\n {\n   if (DEC32_MANT_DIG != 7) FAILURE\n@@ -56,8 +43,5 @@ int main ()\n   if (DEC128_SUBNORMAL_MIN != 0.000000000000000000000000000000001E-6143DL)\n     FAILURE\n \n-  if (failcnt != 0)\n-    abort ();\n-\n-  return 0;\n+  FINISH\n }"}, {"sha": "a32afa96bae5c1cedad8c7e8e0ceeb4a2a736b8e", "filename": "gcc/testsuite/gcc.dg/dfp/dfp-dbg.h", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdfp-dbg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdfp-dbg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdfp-dbg.h?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -0,0 +1,10 @@\n+int failures;\n+\n+#ifdef DBG\n+extern int printf (const char *, ...);\n+#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failures++; }\n+#define FINISH if (failures != 0) __builtin_abort (); return 0;\n+#else\n+#define FAILURE __builtin_abort ();\n+#define FINISH return 0;\n+#endif"}, {"sha": "3881ea667c8c1e484ef38ab527cfe8a5a7738ebf", "filename": "gcc/testsuite/gcc.dg/dfp/dfp.exp", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdfp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdfp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fdfp.exp?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -37,12 +37,14 @@ if { ![check_effective_target_dfprt] } {\n }\n verbose \"dfp.exp: dg-do-what-default is ${dg-do-what-default}\" 2\n \n-# If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS\n-if ![info exists DEFAULT_CFLAGS] then {\n-    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+if [info exists DEFAULT_CFLAGS] then {\n+  set save_default_cflags DEFAULT_CFLAGS\n }\n \n+# If a testcase doesn't have special options, use these.\n+set DEFAULT_CFLAGS \"-std=gnu99\"\n+\n # Initialize `dg'.\n dg-init\n \n@@ -55,3 +57,6 @@ dg-finish\n \n set dg-do-what-default ${save-dg-do-what-default}\n verbose \"dfp.exp: dg-do-what-default is ${dg-do-what-default}\" 2\n+if [info exists save_default_cflags] {\n+  set DEFAULT_CFLAGS $save_default_cflags\n+}"}, {"sha": "eb0da1b2c6eaa258ad460ce3aefda54377c9f4b8", "filename": "gcc/testsuite/gcc.dg/dfp/fe-binop.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-binop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-binop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-binop.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,4 +1,3 @@\n-/* { dg-options \"-std=gnu99\" } */\n /* { dg-skip-if \"test is for emulation\" { hard_dfp } { \"*\" } { \"\" } } */\n \n /* Touch tests that check for raising appropriate exceptions for binary\n@@ -102,7 +101,5 @@ main ()\n   binop_501 ();\n   binop_502 ();\n \n-  if (failcnt != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "9c5f0ff8c5917e8d4b122e545e2004bcc24ec472", "filename": "gcc/testsuite/gcc.dg/dfp/fe-check.h", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-check.h?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -2,19 +2,17 @@\n    are raised for decimal float operations.  These tests are here to test\n    the software decimal float support in libgcc.  */\n \n+#include \"dfp-dbg.h\"\n #include \"dfp-except.h\"\n \n-extern void abort (void);\n-static int failcnt = 0;\n-\n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n #if defined(DBG) || defined(DBG2)\n #include <stdio.h>\n+#undef FAILURE\n #define FAILURE(NUM,KIND,EXCEPT) \\\n-  { printf (\"failed for test %d: %s %s\\n\", NUM, KIND, EXCEPT); failcnt++; }\n+  { printf (\"failed for test %d: %s %s\\n\", NUM, KIND, EXCEPT); failures++; }\n #else\n-#define FAILURE(N,K,E) abort ();\n+#undef FAILURE\n+#define FAILURE(N,K,E) __builtin_abort ();\n #endif\n \n /* This is useful when modifying the test to make sure that tests are"}, {"sha": "b6528029b40a5ad19481dabbf7f79322c75fb6d0", "filename": "gcc/testsuite/gcc.dg/dfp/fe-convert-1.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-convert-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-convert-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-convert-1.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,4 +1,3 @@\n-/* { dg-options \"-std=gnu99\" } */\n /* { dg-skip-if \"test is for emulation\" { hard_dfp } { \"*\" } { \"\" } } */\n \n /* Check that appropriate exceptions are raised for conversions involving\n@@ -37,7 +36,5 @@ main ()\n   convert_121 ();\n   convert_122 ();\n \n-  if (failcnt != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "4abce24c608c4e5d6965863233d5322cf8c1bf58", "filename": "gcc/testsuite/gcc.dg/dfp/fe-convert-2.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-convert-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-convert-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-convert-2.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,3 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* Check that appropriate exceptions are raised for BFP to DFP conversions.\n    The test only uses double and _Decimal32; tests for conversions to\n    _Decimal64 would need 128-bit long double.  */\n@@ -29,7 +27,5 @@ main ()\n   convert_104 ();\n   convert_105 ();\n \n-  if (failcnt != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "5938edb94e734afb42295b6c8d58b0626292a9da", "filename": "gcc/testsuite/gcc.dg/dfp/fe-convert-3.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-convert-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-convert-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffe-convert-3.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,3 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* Check that appropriate exceptions are raised for int to DFP conversions.  */\n \n #include \"fe-check.h\"\n@@ -43,7 +41,5 @@ main ()\n   convert_210 ();\n   convert_211 ();\n \n-  if (failcnt != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "52c5d7126655ae48c3650d7c4ba67b7febbee4ea", "filename": "gcc/testsuite/gcc.dg/dfp/float-constant-double.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffloat-constant-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffloat-constant-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffloat-constant-double.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n \n /* Constant float values of type double in <float.h> are suffixed with L\n    and cast to double so they can be used within code that uses pragma"}, {"sha": "6d158f35523c6ea74af82e6a50399864ada7967c", "filename": "gcc/testsuite/gcc.dg/dfp/func-array.c", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-array.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,19 +1,7 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* C99 6.5.2.2 Function calls.\n    Test passing array elements involving decimal floating point types. */\n \n-extern void abort (void);\n-static int failcnt;\n-\n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#include \"dfp-dbg.h\"\n \n /* A handful of functions that return the Nth _Decimal32 argument of\n    an incoming array.  */\n@@ -165,8 +153,5 @@ int main()\n   if (arg4_128 (d128) != 4.0dl) FAILURE\n   if (arg5_128 (d128) != 5.0dl) FAILURE\n \n-  if (failcnt != 0)\n-    abort ();\n-\n-  return 0;\n+  FINISH\n }"}, {"sha": "81a48a9f8e8b403914a1a9a34206388457ce8867", "filename": "gcc/testsuite/gcc.dg/dfp/func-deref.c", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-deref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-deref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-deref.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,20 +1,8 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* C99 6.5.2.2 Function calls.\n    Test scalar passing and return values involving decimal floating\n    point types and dereferenced pointers.  */\n \n-extern void abort (void);\n-static int failcnt;\n-\n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#include \"dfp-dbg.h\"\n \n /* A handful of functions that return their Nth _Decimal32\n    argument.  */\n@@ -213,8 +201,5 @@ main ()\n   if (arg5_128 (*pdl0, *pdl1, *pdl2, *pdl3, *pdl4, *pdl5) != 5.0dl)\n     FAILURE\n \n-  if (failcnt != 0)\n-    abort ();\n-\n-  return 0;\n+  FINISH\n }"}, {"sha": "6f7e2eb4157a48990115af65dd575d3d3aa101fe", "filename": "gcc/testsuite/gcc.dg/dfp/func-mixed.c", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-mixed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-mixed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-mixed.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,20 +1,10 @@\n-/* { dg-options \"-std=gnu99 -Wall\" } */\n+/* { dg-options \"-Wall\" } */\n \n /* C99 6.5.2.2 Function calls.\n    Test scalar passing and return values involving decimal floating\n    point types.  */\n \n-extern void abort (void);\n-static int failcnt;\n-\n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#include \"dfp-dbg.h\"\n \n /* A handful of functions that return their Nth _Decimal32\n    argument with mixed types in parameter list.  */\n@@ -180,8 +170,5 @@ main ()\n   if (arg4_128 (0, -1, 2.0f, 3.0, 4.0dl, 5.0l) != 4.0dl) FAILURE\n   if (arg5_128 (0, -1, 2.0f, 3.0, 4.0l, 5.0dl) != 5.0dl) FAILURE\n \n-  if (failcnt != 0)\n-    abort ();\n-\n-  return 0;\n+  FINISH\n }"}, {"sha": "cfdf2356c9d19f0f53581b575d848ada1acd5d29", "filename": "gcc/testsuite/gcc.dg/dfp/func-pointer.c", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-pointer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-pointer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-pointer.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,20 +1,8 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* C99 6.5.2.2 Function calls.\n    Test pointer argument passing and return values involving decimal floating\n    point types.  */\n \n-extern void abort (void);\n-static int failcnt;\n-\n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#include \"dfp-dbg.h\"\n \n /* A handful of functions that return their Nth pointer to Decimal32\n    argument.  */\n@@ -213,8 +201,5 @@ main ()\n   if (*arg5_128 (pdl0, pdl1, pdl2, pdl3, pdl4, pdl5) != 5.0dl)\n     FAILURE\n \n-  if (failcnt != 0)\n-    abort ();\n-\n-  return 0;\n+  FINISH\n }"}, {"sha": "370c21b20e2b5f197492dd4cc34d7be52b72cf0d", "filename": "gcc/testsuite/gcc.dg/dfp/func-scalar.c", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-scalar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-scalar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-scalar.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,20 +1,8 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* C99 6.5.2.2 Function calls.\n    Test scalar passing and return values involving decimal floating\n    point types.  */\n \n-extern void abort (void);\n-static int failcnt;\n-\n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#include \"dfp-dbg.h\"\n \n /* A handful of functions that return their Nth _Decimal32\n    argument.  */\n@@ -200,8 +188,5 @@ main ()\n   if (arg5_128 (0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl) != 5.0dl)\n     FAILURE\n \n-  if (failcnt != 0)\n-    abort ();\n-\n-  return 0;\n+  FINISH\n }"}, {"sha": "ad0224d6cadc086db0f44b8324134427d150a91f", "filename": "gcc/testsuite/gcc.dg/dfp/func-struct.c", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-struct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-struct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-struct.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,20 +1,8 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* C99 6.5.2.2 Function calls.\n    Test structure passing and return values involving decimal floating\n    point types.  */\n \n-extern void abort (void);\n-static int failcnt;\n-\n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#include \"dfp-dbg.h\"\n \n struct example\n {\n@@ -101,8 +89,5 @@ main ()\n   if (ptr_dummy1_field (&nums) != 'a') FAILURE\n   if (ptr_dummy2_field (&nums) != 'b') FAILURE\n \n-  if (failcnt != 0)\n-    abort ();\n-\n-  return 0;\n+  FINISH\n }"}, {"sha": "2960c357adef6872646dd249c63605d7872a31dc", "filename": "gcc/testsuite/gcc.dg/dfp/func-vararg-alternate-d128-2.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d128-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d128-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d128-2.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n-/* { dg-options \"-std=gnu99 -mpreferred-stack-boundary=2\" } */\n+/* { dg-options \"-mpreferred-stack-boundary=2\" } */\n \n /* Simple test of vararg passing for problematic types with and without\n    double values passed between them.  */\n@@ -17,5 +17,6 @@ int\n main ()\n {\n   doit ();\n-  return 0;\n+\n+  FINISH\n }"}, {"sha": "8d452eadc38fb04ae13e7ea849b0b4e9832c29d8", "filename": "gcc/testsuite/gcc.dg/dfp/func-vararg-alternate-d128.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d128.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,3 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* Simple test of vararg passing for problematic types with and without\n    double values passed between them.  */\n \n@@ -16,5 +14,6 @@ int\n main ()\n {\n   doit ();\n-  return 0;\n+\n+  FINISH\n }"}, {"sha": "651b7e8c50fddcc717e26d58811d7733d77554c4", "filename": "gcc/testsuite/gcc.dg/dfp/func-vararg-alternate-d32.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d32.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,3 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* Simple test of vararg passing for problematic types with and without\n    double values passed between them.  */\n \n@@ -16,5 +14,6 @@ int\n main ()\n {\n   doit ();\n-  return 0;\n+\n+  FINISH\n }"}, {"sha": "86b475d2ada5bec7b8a1e50e32ab7eb19a16d621", "filename": "gcc/testsuite/gcc.dg/dfp/func-vararg-alternate-d64.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate-d64.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,3 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* Simple test of vararg passing for problematic types with and without\n    double values passed between them.  */\n \n@@ -16,5 +14,6 @@ int\n main ()\n {\n   doit ();\n-  return 0;\n+\n+  FINISH\n }"}, {"sha": "8dbb5093fe2565c648b08f1660dd6c3139798aff", "filename": "gcc/testsuite/gcc.dg/dfp/func-vararg-alternate.h", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-alternate.h?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,14 +1,9 @@\n /* Simple test of vararg passing for problematic types with and without\n    double values passed between them.  */\n \n+#include \"dfp-dbg.h\"\n #include <stdarg.h>\n-#ifdef DBG\n-#include <stdio.h>\n-#endif\n \n-extern void abort (void);\n-\n-int failcnt;\n DTYPE a[10];\n double b[10];\n \n@@ -28,6 +23,7 @@ compare (double r, double s, int *p, int *q, int n, int line)\n       {\n \tint j;\n \n+\tfailures++;\n \tprintf (\"line %-3d\", line);\n \tfor (j = 0; j < n; j++)\n \t  printf (\"  %08x\", p[j]);\n@@ -39,7 +35,7 @@ compare (double r, double s, int *p, int *q, int n, int line)\n \treturn;\n       }\n #else\n-      abort ();\n+      __builtin_abort ();\n #endif\n }\n \n@@ -102,7 +98,7 @@ doit ()\n       printf (\"test error: INTS = %d, sizeof (DTYPE) =  %d\\n\",\n \t      INTS, sizeof (DTYPE));\n #endif\n-      abort ();\n+      __builtin_abort ();\n     }\n \n   x = ONE / THREE;\n@@ -144,7 +140,4 @@ doit ()\n   u1.d = x; u2.d = a[0]; compare (1.5, b[0], u1.i, u2.i, INTS, __LINE__);\n   u1.d = y; u2.d = a[1]; compare (2.5, b[1], u1.i, u2.i, INTS, __LINE__);\n   u1.d = z; u2.d = a[2]; compare (3.5, b[2], u1.i, u2.i, INTS, __LINE__);\n-\n-  if (failcnt != 0)\n-    abort ();\n }"}, {"sha": "5add1f7fd383eba2840075e8f9350f6df581ff0e", "filename": "gcc/testsuite/gcc.dg/dfp/func-vararg-dfp.c", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-dfp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-dfp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-dfp.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,21 +1,8 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* C99 6.5.2.2 Function calls.\n    Test passing varargs of the decimal float types.  */\n \n #include <stdarg.h>\n-\n-extern void abort (void);\n-static int failcnt = 0;\n-                                                                                \n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#include \"dfp-dbg.h\"\n \n static _Decimal32\n vararg32 (unsigned arg, ...)\n@@ -104,7 +91,5 @@ int main()\n   if (vararg128 (5, 0.0dl, 1.0dl, 2.0dl, 3.0dl, 4.0dl, 5.0dl) != 5.0dl)\n     FAILURE\n \n-  if (failcnt != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "893cdae27ff0a5f85236edfdfbe63b04401a251f", "filename": "gcc/testsuite/gcc.dg/dfp/func-vararg-mixed-2.c", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-mixed-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-mixed-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-mixed-2.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,23 +1,12 @@\n /* { dg-do run { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n-/* { dg-options \"-std=gnu99 -mpreferred-stack-boundary=2\" } */\n+/* { dg-options \"-mpreferred-stack-boundary=2\" } */\n \n /* C99 6.5.2.2 Function calls.\n    Test passing varargs of the combination of decimal float types and\n    other types.  */\n \n #include <stdarg.h>\n-\n-extern void abort (void);\n-static int failcnt = 0;\n-                                                                                \n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#include \"dfp-dbg.h\"\n \n /* Supposing the list of varying number of arguments is:\n    unsigned int, _Decimal128, double, _Decimal32, _Decimal64.  */\n@@ -112,7 +101,5 @@ main ()\n   if (vararg_int (0, 0, 1.0dl, 2.0, 3.0df, 4.0dd) != 0) FAILURE\n   if (vararg_double (2, 0, 1.0dl, 2.0, 3.0df, 4.0dd) != 2.0) FAILURE\n \n-  if (failcnt != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "1669eaf959ae5e8072246787ac725328880ba79c", "filename": "gcc/testsuite/gcc.dg/dfp/func-vararg-mixed.c", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-mixed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-mixed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-mixed.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,22 +1,9 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* C99 6.5.2.2 Function calls.\n    Test passing varargs of the combination of decimal float types and\n    other types.  */\n \n #include <stdarg.h>\n-\n-extern void abort (void);\n-static int failcnt = 0;\n-                                                                                \n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#include \"dfp-dbg.h\"\n \n /* Supposing the list of varying number of arguments is:\n    unsigned int, _Decimal128, double, _Decimal32, _Decimal64.  */\n@@ -111,7 +98,5 @@ main ()\n   if (vararg_int (0, 0, 1.0dl, 2.0, 3.0df, 4.0dd) != 0) FAILURE\n   if (vararg_double (2, 0, 1.0dl, 2.0, 3.0df, 4.0dd) != 2.0) FAILURE\n \n-  if (failcnt != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "bc8b20fd48498a67a70259c4c972d083f9fbc078", "filename": "gcc/testsuite/gcc.dg/dfp/func-vararg-size0.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-size0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-size0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ffunc-vararg-size0.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,10 +1,7 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* C99 6.5.2.2 Function calls.  */\n \n #include <stdarg.h>\n-\n-extern void abort (void);\n+#include \"dfp-dbg.h\"\n \n struct S1\n {\n@@ -38,7 +35,7 @@ main ()\n   struct S1 a1[5];\n \n   if (check_var(5, 1.0, s1, 2LL, a1[2], a1[2]) == 0)\n-    abort ();\n+    FAILURE\n \n-  return 0;\n+  FINISH\n }"}, {"sha": "c4f8cd796101bd97ec0e0f2c983ca536a5bdc24a", "filename": "gcc/testsuite/gcc.dg/dfp/inf-1.c", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Finf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Finf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Finf-1.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,63 +1,61 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* N1150 4: Characteristics of decimal floating types (not explicit)\n    C99 5.2.4.2.2: Characteristics of floating types.\n    A few simple checks on arithmetic operations. */\n \n-extern void abort (void);\n+#include \"dfp-dbg.h\"\n \n int main()\n {\n   /* Assumes rounding mode. */\n   if (9999999.E90DF + 1.E90df != __builtin_infd32 ())\n-    abort ();\n+    FAILURE\n \n   if (!__builtin_isinfd32 (9999999.E90DF + 1.E90df))\n-    abort ();\n+    FAILURE\n \n   if (9.999999999999999E384dd + .000000000000001e384dd \n       != __builtin_infd32 ())\n-    abort ();\n+    FAILURE\n \n   if (-9999999.E90DF - 1.E90df != -__builtin_infd32 ())\n-    abort ();\n+    FAILURE\n \n   if (!__builtin_isinfd32 (9.999999999999999E384dd + .000000000000001e384dd))\n-    abort ();\n+    FAILURE\n \n   if (7.999999999999999999999999999999999E6144dl + 3.0E6144dl\n       != __builtin_infd32 ())\n-    abort ();\n+    FAILURE\n \n   if (__builtin_infd32 () * __builtin_infd32 () != __builtin_infd32 ())\n-    abort ();\n+    FAILURE\n \n   if (__builtin_infd32 () * 2 != __builtin_infd32 ())\n-    abort ();\n+    FAILURE\n \n   if (__builtin_infd64 () * -5 != -__builtin_infd32 ())\n-    abort ();\n+    FAILURE\n \n   if (!__builtin_isinfd128 (__builtin_infd32 () / 4))\n-    abort ();\n+    FAILURE\n \n   if (__builtin_infd64 () != __builtin_infd128 ())\n-    abort ();\n+    FAILURE\n \n   if (!__builtin_isinfd64 (__builtin_infd128 ()))\n-    abort ();\n+    FAILURE\n \n   if (__builtin_finited64 (__builtin_infd32 () * 4))\n-    abort ();\n+    FAILURE\n \n   if (!__builtin_finited128 (9.999999E90DL - 1.E90dd))\n-    abort ();\n+    FAILURE\n \n   if (__builtin_finited128 (__builtin_infd32 () *__builtin_infd128 ()))\n-    abort ();\n+    FAILURE\n \n   if (__builtin_finited32 (__builtin_nand32 (\"\")))\n-    abort ();\n-    \n-  return 0;\n+    FAILURE\n+\n+  FINISH\n }"}, {"sha": "bca51066be3780da753c43bcbc351265b582cf6a", "filename": "gcc/testsuite/gcc.dg/dfp/keywords-pedantic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-pedantic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-pedantic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-pedantic.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -pedantic\" } */\n+/* { dg-options \"-pedantic\" } */\n \n /* Decimal float is a GCC extension.  */\n "}, {"sha": "1117ae8d937dcc0242a1829becd6d960c7267420", "filename": "gcc/testsuite/gcc.dg/dfp/keywords-reserved.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-reserved.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-reserved.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fkeywords-reserved.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n \n /* N1150 3: Decimal floating types.\n    C99 6.4.1(2): Keywords."}, {"sha": "a944042a79b2f6eda16da2832e2c31ad6e6f139a", "filename": "gcc/testsuite/gcc.dg/dfp/loop-index.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Floop-index.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Floop-index.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Floop-index.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,9 +1,8 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* C99 6.8.5.2: The for statement.  */\n \n #include <stdio.h>\n #include <stdlib.h>\n+#include \"dfp-dbg.h\"\n \n void\n f32 (void)\n@@ -15,7 +14,7 @@ f32 (void)\n     i++;\n \n   if (i != 5)\n-    abort();\n+    FAILURE\n }\n \n void\n@@ -28,7 +27,7 @@ f64 (void)\n     i++;\n \n   if (i != 5)\n-    abort();\n+    FAILURE\n }\n \n void\n@@ -41,7 +40,7 @@ f128 (void)\n     i++;\n \n   if (i != 5)\n-    abort();\n+    FAILURE\n }\n \n int\n@@ -53,5 +52,6 @@ main ()\n   f64 ();\n   f128 ();\n   \n+  FINISH\n   return (0);\n }"}, {"sha": "09d4a15c264e52ccff71c4fe126e12a3c5ceae04", "filename": "gcc/testsuite/gcc.dg/dfp/modes.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fmodes.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n \n typedef float decimal32  __attribute__ ((mode (SD)));\n typedef float decimal64  __attribute__ ((mode (DD)));"}, {"sha": "8961777c79b45ad9a5c68bfb27fa7b501dd553d0", "filename": "gcc/testsuite/gcc.dg/dfp/nan-1.c", "status": "modified", "additions": 31, "deletions": 33, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fnan-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fnan-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fnan-1.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,108 +1,106 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* N1150 4: Characteristics of decimal floating types (not explicit)\n    C99 5.2.4.2.2: Characteristics of floating types.\n    A few simple checks on arithmetic operations. */\n \n-extern void abort (void);\n+#include \"dfp-dbg.h\"\n \n int main()\n {\n   /* Some possibly non-obvious tests, but most logical\n      operations on NaN return false, including NaN == NaN. */\n   if (__builtin_nand32(\"\") == __builtin_nand32(\"\"))\n-    abort();\n+    FAILURE\n \n   if (__builtin_nand64(\"\") == __builtin_nand64(\"\"))\n-    abort();\n+    FAILURE\n \n   if (__builtin_nand128(\"\") == __builtin_nand128(\"\"))\n-    abort();\n+    FAILURE\n   \n   if (!(__builtin_nand32(\"\") != __builtin_nand32(\"\")))\n-    abort();\n+    FAILURE\n \n   if (!(__builtin_nand64(\"\") != __builtin_nand64(\"\")))\n-    abort();\n+    FAILURE\n \n   if (!(__builtin_nand128(\"\") != __builtin_nand128(\"\")))\n-    abort();\n+    FAILURE\n \n   if (__builtin_nand32(\"\") > __builtin_nand32(\"\"))\n-    abort();\n+    FAILURE\n \n   if (__builtin_nand64(\"\") >= __builtin_nand64(\"\"))\n-    abort();\n+    FAILURE\n \n   if (__builtin_nand128(\"\") <  __builtin_nand128(\"\"))\n-    abort();\n+    FAILURE\n \n   if (-__builtin_nand128(\"\") <  +__builtin_nand128(\"\"))\n-    abort();\n+    FAILURE\n \n   /* 0.0/0.0 => NaN, but NaN != NaN.  */\n   if (0.0df/0.0dl == __builtin_nand32(\"\"))\n-    abort();\n+    FAILURE\n \n   /* 0.0 * INF => NaN.  */\n   if (!__builtin_isnand32 (0.0df * __builtin_infd32()))\n-    abort ();\n+    FAILURE\n \n   if (!__builtin_isnand64 (0.0dd * __builtin_infd64()))\n-    abort ();\n+    FAILURE\n \n   if (!__builtin_isnand128 (0.0dd * __builtin_infd128()))\n-    abort ();\n+    FAILURE\n \n   /* INF - INF => NaN.  */\n   if (!__builtin_isnand32 (__builtin_infd32() - __builtin_infd32()))\n-    abort ();\n+    FAILURE\n \n   if (!__builtin_isnand64 (__builtin_infd64() - __builtin_infd64()))\n-    abort ();\n+    FAILURE\n \n   if (!__builtin_isnand128 (__builtin_infd128() - __builtin_infd128()))\n-    abort ();\n+    FAILURE\n \n   /* INF/INF => NaN.  */\n   if (!__builtin_isnand32 (__builtin_infd32()/__builtin_infd32()) )\n-    abort ();\n+    FAILURE\n \n   if (!__builtin_isnand64 (__builtin_infd64()/__builtin_infd64()) )\n-    abort ();\n+    FAILURE\n \n   if (!__builtin_isnand128 (__builtin_infd128()/__builtin_infd128()) )\n-    abort ();\n+    FAILURE\n   \n   /* 0.0/0.0 => NaN, but NaN != NaN.  */\n   if ((0.0dd/0.0df) == (0.0dd/0.0df))\n-    abort();\n+    FAILURE\n \n   if (__builtin_nand32(\"\") <  __builtin_infd32())\n-    abort();\n+    FAILURE\n \n   if (__builtin_nand32(\"\") >=  __builtin_infd32())\n-    abort();\n+    FAILURE\n \n   /* Fixme: Add sqrtdf(-x.df) test when sqrt is supported. */\n \n   if (!__builtin_isnand32(__builtin_nand32(\"\")))\n-    abort();\n+    FAILURE\n \n   if (!__builtin_isnand64(__builtin_nand64(\"\")))\n-    abort();\n+    FAILURE\n \n   if (!__builtin_isnand128(__builtin_nand128(\"\")))\n-    abort();\n+    FAILURE\n \n   if (!__builtin_isnand128(8.0df * __builtin_nand128(\"\")))\n-    abort();\n+    FAILURE\n \n   if (!__builtin_isnand32(8.1dl - __builtin_nand32(\"\")))\n-    abort();\n+    FAILURE\n \n   if (!__builtin_isnand128(__builtin_nand64(\"\") + __builtin_nand128(\"\")))\n-    abort();\n+    FAILURE\n \n-  return 0;\n+  FINISH\n }"}, {"sha": "ec9d18e10000f2e370b7bcb09230389a3cac59af", "filename": "gcc/testsuite/gcc.dg/dfp/nan-2.c", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fnan-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fnan-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fnan-2.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,11 +1,9 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* N1150 4: Characteristics of decimal floating types (not explicit)\n    C99 5.2.4.2.2: Characteristics of floating types.\n    A few simple checks on arithmetic operations.  Based on nan-1.c with\n    the consideration of negative zero.  */\n \n-extern void abort (void);\n+#include \"dfp-dbg.h\"\n \n int main()\n {\n@@ -17,39 +15,39 @@ int main()\n      result.  */\n   d32 = 123.45f;\n   if (d32/-0.0df != -__builtin_infd32())\n-    abort();\n+    FAILURE\n   if (123.45df/-0.0df != -__builtin_infd32())\n-    abort();\n+    FAILURE\n   \n   d64 = 123.45f;\n   if (d64/-0.0dd != -__builtin_infd64())\n-    abort();\n+    FAILURE\n   if (123.45dd/-0.0dd !=  -__builtin_infd64())\n-    abort();\n+    FAILURE\n \n   d128 = 123.45f;\n   if (d128/-0.0dl != -__builtin_infd64())\n-    abort();\n+    FAILURE\n   if (123.45dl/-0.0dl != -__builtin_infd128())\n-    abort();\n+    FAILURE\n \n   d32 = 0.0df;\n   if (!__builtin_isnand32(-(d32/-0.0df)))\n-    abort();\n+    FAILURE\n   if (!__builtin_isnand32(-(0.0df/-0.0df)))\n-    abort();\n+    FAILURE\n \n   d64 = 0.0dd;\n   if (!__builtin_isnand64(-(d64/-0.0dd)))\n-    abort();\n+    FAILURE\n   if (!__builtin_isnand64(-(0.0dd/-0.0dd)))\n-    abort();\n+    FAILURE\n \n   d128 = 0.0dl;\n   if (!__builtin_isnand128(-(d128/-0.0dl)))\n-    abort();\n+    FAILURE\n   if (!__builtin_isnand128(-(0.0dl/-0.0dl)))\n-    abort();\n+    FAILURE\n \n-  return 0;\n+  FINISH\n }"}, {"sha": "65105899fb4f78e09d2b83949eab4ce8967f7335", "filename": "gcc/testsuite/gcc.dg/dfp/operator-arith-fold.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-arith-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-arith-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-arith-fold.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-std=gnu99 -O2\" } */\n+/* { dg-options \"-O2\" } */\n \n /* C99 6.5.5: Multiplicative operators.\n    C99 6.5.6: Additive operators.  */"}, {"sha": "faadf1e865094ad54287bea196cfb3bc3f3f08f8", "filename": "gcc/testsuite/gcc.dg/dfp/operator-assignment.c", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-assignment.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-assignment.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-assignment.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,21 +1,9 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* C99 6.5.16 Assignment operators.\n    Verify the compound assignment operator for decimal float types,\n    using it with other decimal float types, integers, and other binary\n    float types cast to decimal float types.  */\n \n-extern void abort (void);\n-static int failcnt;\n-\n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#include \"dfp-dbg.h\"\n \n #define OPERATE(OPRD1,OPRT,OPRD2,RLT)\t\t\\\n   if (( OPRD1 OPRT OPRD2 )!= RLT)\t\t\\\n@@ -64,8 +52,5 @@ main ()\n   DECIMAL_COMPOUND_ASSIGNMENT(64, d64);\n   DECIMAL_COMPOUND_ASSIGNMENT(128, d128);\n \n-  if (failcnt != 0)\n-    abort ();\n-\n-  return 0;\n+  FINISH\n }"}, {"sha": "f895a970578b3f87ac1820906b5e823bece679f1", "filename": "gcc/testsuite/gcc.dg/dfp/operator-bitwise.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-bitwise.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-bitwise.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-bitwise.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,14 +1,11 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n \n /* C99 6.5.10: Bitwise AND operator.\n    C99 6.5.11: Bitwise exclusive OR operator.\n    C99 6.5.12: Bitwise inclusive OR operator.\n \n    Test that these operators do not accept decimal float operands.  */\n \n-extern void abort (void);\n-\n #define OPERATE(OPRD1,OPRT,OPRD2)\t\t\\\n do\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\\"}, {"sha": "be6bf6f8cd1f4f266fc157208778bef29077a4b5", "filename": "gcc/testsuite/gcc.dg/dfp/operator-comma.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-comma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-comma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-comma.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,19 +1,9 @@\n-/* { dg-options \"-std=gnu99 -O0\" } */\n+/* { dg-options \"-O0\" } */\n \n /* C99 6.5.17: Comma operator.\n    Test with decimal float operands.  */\n \n-extern void abort (void);\n-static int failcnt = 0;\n-                                                                                \n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#include \"dfp-dbg.h\"\n \n volatile _Decimal32 d32a, d32b, d32c;\n volatile _Decimal64 d64a, d64b, d64c;\n@@ -53,5 +43,5 @@ main ()\n   if (d64a != 12.0dd)\n     FAILURE;\n \n-  return 0;\n+  FINISH\n }"}, {"sha": "140dd95074a805377b5e24eb0ce4818e82f21834", "filename": "gcc/testsuite/gcc.dg/dfp/operator-cond.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-cond.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-cond.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-cond.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,19 +1,9 @@\n-/* { dg-options \"-std=gnu99 -O0\" } */\n+/* { dg-options \"-O0\" } */\n \n /* C99 6.5.15 Conditional operator.\n    Test with decimal float operands.  */\n \n-extern void abort (void);\n-static int failcnt = 0;\n-                                                                                \n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#include \"dfp-dbg.h\"\n \n volatile _Decimal32 d32a, d32b, d32c;\n volatile _Decimal64 d64a, d64b, d64c;\n@@ -63,5 +53,5 @@ main ()\n   if (d128a != d128b)\n     FAILURE\n \n-  return 0;\n+  FINISH\n }"}, {"sha": "c784468c77aef0b8c13ca8467e8ba3271eb32d41", "filename": "gcc/testsuite/gcc.dg/dfp/operator-logical.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-logical.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-logical.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-logical.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,16 +1,14 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* C99 Logical AND operator.\n    C99 Logical OR operator.\n    Test with decimal float operands.  */\n \n-extern void abort (void);\n+#include \"dfp-dbg.h\"\n \n #define OPERATE(OPRD1,OPRT,OPRD2,RLT)\t\\\n do\t\t\t\t\t\\\n {\t\t\t\t\t\\\n   if (( (OPRD1) OPRT (OPRD2) )!= RLT)\t\\\n-    abort ();\t\t\t\t\\\n+    __builtin_abort ();\t\t\t\\\n } while (0)\n \n #define DECIMAL_LOGICAL_OR(OPRD)\t\\"}, {"sha": "65f0be074d97d3d000d6fde5ea050fec3b871c0d", "filename": "gcc/testsuite/gcc.dg/dfp/operator-unary.c", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-unary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-unary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Foperator-unary.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,35 +1,33 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* C99 6.5.3 Unary operators.  */\n \n-extern void abort (void);\n+#include \"dfp-dbg.h\"\n \n #define AUTO_INCREASE_DECREASE(TYPE,SUFFIX)   \t\t\\\n do                                            \t\t\\\n {                                             \t\t\\\n-  _Decimal##TYPE in_de_d##TYPE = 0.0##SUFFIX;         \t\\\n-  if (in_de_d##TYPE++) abort ();              \t\t\\\n-  if (--in_de_d##TYPE) abort ();              \t\t\\\n-  if (++in_de_d##TYPE == 0.0##SUFFIX) abort (); \t\\\n-  if (in_de_d##TYPE-- == 0.0##SUFFIX) abort (); \t\\\n+  _Decimal##TYPE in_de_d##TYPE = 0.0##SUFFIX;\t\t\\\n+  if (in_de_d##TYPE++) FAILURE\t\t\t\t\\\n+  if (--in_de_d##TYPE) FAILURE\t\t\t\t\\\n+  if (++in_de_d##TYPE == 0.0##SUFFIX) FAILURE\t\t\\\n+  if (in_de_d##TYPE-- == 0.0##SUFFIX) FAILURE\t\t\\\n } while(0)\n \n #define UNARY_OPERATOR(TYPE,SUFFIX)           \t\t\\\n do                                            \t\t\\\n {                                             \t\t\\\n- _Decimal##TYPE unary_d##TYPE = 1.0##SUFFIX;  \t\t\\\n+ _Decimal##TYPE unary_d##TYPE = 1.0##SUFFIX;\t\t\\\n  _Decimal##TYPE* unary_dp##TYPE;              \t\t\\\n  /*  & operator.  */                          \t\t\\\n  unary_dp##TYPE = &(unary_d##TYPE);           \t\t\\\n  /*  * operator.  */                          \t\t\\\n  unary_d##TYPE = *(unary_dp##TYPE);           \t\t\\\n  /*  - operator.  */                          \t\t\\\n  unary_d##TYPE = -unary_d##TYPE;              \t\t\\\n- if (unary_d##TYPE != -1.0##SUFFIX) abort ();         \t\\\n+ if (unary_d##TYPE != -1.0##SUFFIX) FAILURE\t\t\\\n  /*  + operator.  */                          \t\t\\\n  unary_d##TYPE = +unary_d##TYPE;              \t\t\\\n- if (unary_d##TYPE != -1.0##SUFFIX) abort ();         \t\\\n- if (!unary_d##TYPE) abort (); /*! operator.  */ \t\\\n+ if (unary_d##TYPE != -1.0##SUFFIX) FAILURE\t\t\\\n+ if (!unary_d##TYPE) FAILURE\t/*! operator.  */ \t\\\n } while (0)\n \n int\n@@ -46,9 +44,9 @@ main ()\n   UNARY_OPERATOR(128, DL);\n \n   /*  C99 6.5.3 Unary operators for zero values.  */\n-  if (- +0.df != -0.df) abort ();\n-  if (+ -0.df != -0.df) abort ();\n-  if (- -0.df != +0.df) abort ();\n+  if (- +0.df != -0.df) FAILURE\n+  if (+ -0.df != -0.df) FAILURE\n+  if (- -0.df != +0.df) FAILURE\n \n-  return 0;\n+  FINISH\n }"}, {"sha": "0f5e21ecdffd22fdbc7ea82908a7c9c227f797f9", "filename": "gcc/testsuite/gcc.dg/dfp/pr31344.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr31344.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr31344.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr31344.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=gnu99 -mtune=i386\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n-/* { dg-options \"-O -std=gnu99\" } */\n+/* { dg-options \"-O -mtune=i386\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+/* { dg-options \"-O\" } */\n \n typedef struct\n {"}, {"sha": "72f5f935f09557f6dd12c1ac1c21749f1cd5dfb5", "filename": "gcc/testsuite/gcc.dg/dfp/pr31385.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr31385.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr31385.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr31385.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -O2\" } */\n+/* { dg-options \"-O2\" } */\n \n typedef _Decimal32 fp_t;\n "}, {"sha": "e1cd76b74ff493ddd47cbf94c6ad681297098da9", "filename": "gcc/testsuite/gcc.dg/dfp/pr33466.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr33466.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr33466.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr33466.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n \n /* The suffix for a decimal float constant must use a single case.\n "}, {"sha": "08137cfb6d96d169240f1faaefa417e0a30a939a", "filename": "gcc/testsuite/gcc.dg/dfp/pr35620.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr35620.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr35620.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr35620.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -O2\" } */\n+/* { dg-options \"-O2\" } */\n \n extern void foo (_Decimal32);\n _Decimal32 *p;"}, {"sha": "76ff28c98155ba221a4525c1e6e3818b8ff42bd3", "filename": "gcc/testsuite/gcc.dg/dfp/pr36800.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr36800.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr36800.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr36800.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,32 +1,32 @@\n /* { dg-do run } */\n-/* { dg-options \"-std=gnu99\" } */\n \n #include <stdarg.h>\n-extern void abort (void);\n+#include \"dfp-dbg.h\"\n \n void\n f (int a, ...)\n {\n   va_list ap;\n   if (a != 0)\n-    abort ();\n+    FAILURE\n   va_start (ap, a);\n   if (va_arg (ap, _Decimal128) != 1.2DL)\n-    abort ();\n+    FAILURE\n   if (va_arg (ap, _Decimal128) != 2.34DL)\n-    abort ();\n+    FAILURE\n   if (va_arg (ap, _Decimal128) != 3.456DL)\n-    abort ();\n+    FAILURE\n   if (va_arg (ap, _Decimal128) != 4.567DL)\n-    abort ();\n+    FAILURE\n   if (va_arg (ap, double) != 5.125)\n-    abort ();\n+    FAILURE\n   va_end (ap);\n }\n \n int\n main (void)\n {\n   f (0, 1.2DL, 2.34DL, 3.456DL, 4.567DL, 5.125);\n-  return 0;\n+\n+  FINISH\n }"}, {"sha": "867fdd26bc49f4bc8ecc2b0110e14186803e91ee", "filename": "gcc/testsuite/gcc.dg/dfp/pr37435.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr37435.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr37435.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr37435.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile { target fpic } } */\n-/* { dg-options \"-std=gnu99 -O2 -fPIC\" } */\n+/* { dg-options \"-O2 -fPIC\" } */\n \n volatile _Decimal32 d;\n volatile int i;"}, {"sha": "2a7eedbdbe20dddbf269df6a067e7248c52dfb8f", "filename": "gcc/testsuite/gcc.dg/dfp/pr39034.c", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr39034.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr39034.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr39034.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,19 +1,10 @@\n /* { dg-do run } */\n-/* { dg-options \"-std=gnu99 -O\" } */\n+/* { dg-options \"-O\" } */\n \n /* DFP TR 24732 == WG14 / N1176, N1312 */\n /* Based on a test from Fred Tydeman.  */\n \n-extern void abort (void);\n-int failures = 0;\n-\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE(MSG) { printf (\"line %d: %s\\n\", __LINE__, MSG); failures++; }\n-#else\n-#define FAILURE(MSG) failures++;\n-#endif\n-\n+#include \"dfp-dbg.h\"\n \n /* Test runtime computations.  */\n \n@@ -25,9 +16,9 @@ runtime32 (void)\n   _Decimal32 d32 = (float)((v1/v2-v3) - (v4/v5-v6));\n \n   if (b32)\n-    FAILURE (\"runtime: b32 should be zero\")\n+    FAILURE\n   if (d32)\n-    FAILURE (\"runtime: d32 should be zero\")\n+    FAILURE\n }\n \n void\n@@ -38,9 +29,9 @@ runtime64 (void)\n   _Decimal64 d64 = (double)((v1/v2-v3) - (v4/v5-v6));\n \n   if (b64)\n-    FAILURE (\"runtime: b64 should be zero\")\n+    FAILURE\n   if (d64)\n-    FAILURE (\"runtime: d64 should be zero\")\n+    FAILURE\n }\n \n void\n@@ -52,9 +43,9 @@ runtime128 (void)\n   _Decimal128 d128 = (long double)((v1/v2-v3) - (v4/v5-v6));\n \n   if (b128)\n-    FAILURE (\"runtime: b128 should be zero\")\n+    FAILURE\n   if (d128)\n-    FAILURE (\"runtime: d128 should be zero\")\n+    FAILURE\n }\n \n /* Test constant folding.  */\n@@ -66,9 +57,9 @@ fold32 (void)\n   _Decimal32 b32 = (float)((28.f/3.f-9.f) - (31.f/3.f-10.f));\n \n   if (b32)\n-    FAILURE (\"fold: b32 should be zero\")\n+    FAILURE\n   if (d32)\n-    FAILURE (\"fold: d32 should be zero\")\n+    FAILURE\n }\n \n void\n@@ -78,9 +69,9 @@ fold64 (void)\n   _Decimal64 d64 = (double)((28./3.-9.) - (31./3.-10.));\n \n   if (b64)\n-    FAILURE (\"fold: b64 should be zero\")\n+    FAILURE\n   if (d64)\n-    FAILURE (\"fold: d64 should be zero\")\n+    FAILURE\n }\n \n void\n@@ -90,9 +81,9 @@ fold128 (void)\n   _Decimal128 d128 = (long double)((28./3.-9.) - (31./3.-10.));\n \n   if (b128)\n-    FAILURE (\"fold: b128 should be zero\")\n+    FAILURE\n   if (d128)\n-    FAILURE (\"fold: d128 should be zero\")\n+    FAILURE\n }\n \n int\n@@ -105,7 +96,5 @@ main ()\n   fold64 ();\n   fold128 ();\n \n-  if (failures != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "2c9e8b386ed491894853f51cd3c42f76380e70bb", "filename": "gcc/testsuite/gcc.dg/dfp/pr39035.c", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr39035.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr39035.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr39035.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,18 +1,10 @@\n /* { dg-do run } */\n-/* { dg-options \"-std=gnu99 -O\" } */\n+/* { dg-options \"-O\" } */\n \n /* DFP TR 24732 == WG14 / N1176, N1312 */\n /* Based on a test from Fred Tydeman.  */\n \n-extern void abort (void);\n-int failures = 0;\n-\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE(MSG) { printf (\"line %d: %s\\n\", __LINE__, MSG); failures++; }\n-#else\n-#define FAILURE(MSG) failures++;\n-#endif\n+#include \"dfp-dbg.h\"\n \n /* Test runtime computations.  */\n \n@@ -22,7 +14,7 @@ runtime32 (void)\n   volatile _Decimal32 d;\n   d = 0.0DF;\n   if (d)\n-    FAILURE (\"0.0DF should be zero\")\n+    FAILURE\n }\n \n void\n@@ -31,7 +23,7 @@ runtime64 (void)\n   volatile _Decimal64 d;\n   d = 0.0DD;\n   if (d)\n-    FAILURE (\"0.0DD should be zero\")\n+    FAILURE\n }\n \n void\n@@ -40,28 +32,28 @@ runtime128 (void)\n   volatile _Decimal128 d;\n   d = 0.0DL;\n   if (d)\n-    FAILURE (\"0.0DL should be zero\")\n+    FAILURE\n }\n \n void\n fold32 (void)\n {\n   if (0.0DF)\n-    FAILURE (\"0.0DF should be zero\")\n+    FAILURE\n }\n \n void\n fold64 (void)\n {\n   if (0.0DD)\n-    FAILURE (\"0.0DD should be zero\")\n+    FAILURE\n }\n \n void\n fold128 (void)\n {\n   if (0.0DL)\n-    FAILURE (\"0.0DL should be zero\")\n+    FAILURE\n }\n \n int\n@@ -75,7 +67,5 @@ main(void)\n   fold64 ();\n   fold128 ();\n \n-  if (failures != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "847069966e327e772f5e7fbe6b450b17aa55fa91", "filename": "gcc/testsuite/gcc.dg/dfp/pr39902.c", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr39902.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr39902.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr39902.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,18 +1,8 @@\n-/* { dg-options \"--std=gnu99\" } */\n-\n /* Check that optimizations like (x * 1) to x, or (x * -1) to -x,\n    do not apply to decimal float computations where trailing zeroes\n    are significant.  */\n \n-extern void abort (void);\n-int failcnt;\n-\n-#ifdef DBG\n-extern int printf (const char *, ...);\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#include \"dfp-dbg.h\"\n \n #define COMPARE32(A,B) \\\n   A.i == B.i\n@@ -232,8 +222,5 @@ main (void)\n   doit64 ();\n   doit128 ();\n \n-  if (failcnt != 0)\n-    abort ();\n-\n-  return 0;\n+  FINISH\n }"}, {"sha": "04ff2b623e03442b8eb7f3c1a79c851164de0d07", "filename": "gcc/testsuite/gcc.dg/dfp/pr39986.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr39986.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr39986.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpr39986.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n \n /* Check that the compiler generates the correct decimal float constants.  */\n "}, {"sha": "62d85b6d349bb0092d7b0dc10ec841f37aa25777", "filename": "gcc/testsuite/gcc.dg/dfp/pragma-float-const-decimal64-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-1.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -Wall\" } */\n+/* { dg-options \"-Wall\" } */\n \n /* N1312 7.1.1: The FLOAT_CONST_DECIMAL64 pragma.\n    C99 6.4.4.2a (New)."}, {"sha": "8bc49f771065c197927f3fe8d7d8c3a9f3fec499", "filename": "gcc/testsuite/gcc.dg/dfp/pragma-float-const-decimal64-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-2.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -Wall\" } */\n+/* { dg-options \"-Wall\" } */\n \n /* N1312 7.1.1: The FLOAT_CONST_DECIMAL64 pragma.\n    C99 6.4.4.2a (New)."}, {"sha": "195998670356aebf7bf8ea14e29037c25f1b9eac", "filename": "gcc/testsuite/gcc.dg/dfp/pragma-float-const-decimal64-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-3.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -Wall\" } */\n+/* { dg-options \"-Wall\" } */\n \n /* N1312 7.1.1: The FLOAT_CONST_DECIMAL64 pragma.\n    C99 6.4.4.2a (New).  */"}, {"sha": "af0398daf798ddf147975372155113bf10fe5d54", "filename": "gcc/testsuite/gcc.dg/dfp/pragma-float-const-decimal64-4.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-4.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n \n /* N1312 7.1.1: The FLOAT_CONST_DECIMAL64 pragma.\n    C99 6.4.4.2a (New)."}, {"sha": "55e0d661c038c1546ebd0a3d03c7c7245ef7e556", "filename": "gcc/testsuite/gcc.dg/dfp/pragma-float-const-decimal64-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-7.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -Wall\" } */\n+/* { dg-options \"-Wall\" } */\n \n /* N1312 7.1.1: The FLOAT_CONST_DECIMAL64 pragma.\n    C99 6.4.4.2a (New)."}, {"sha": "39d38c1d8f0f95d843bc0582e0d4b804753f09eb", "filename": "gcc/testsuite/gcc.dg/dfp/pragma-float-const-decimal64-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fpragma-float-const-decimal64-8.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -Wall\" } */\n+/* { dg-options \"-Wall\" } */\n \n /* N1312 7.1.1: The FLOAT_CONST_DECIMAL64 pragma.\n    C99 6.4.4.2a (New)."}, {"sha": "d83d2a48ed7e1b43d35fa50018328dd1c565a1f5", "filename": "gcc/testsuite/gcc.dg/dfp/signbit-1.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fsignbit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fsignbit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fsignbit-1.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,16 +1,8 @@\n-/* { dg-options \"-O0 -std=gnu99\" } */\n+/* { dg-options \"-O0\" } */\n \n /* Decimal float versions of __builtin_signbit.  */\n \n-extern void abort (void);\n-int failures;\n-\n-#ifdef DBG\n-extern int printf (const char *, ...);\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failures++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#include \"dfp-dbg.h\"\n \n #define CHECK32(D,I) \\\n   if ((__builtin_signbitd32 (D) != 0) != I) FAILURE\n@@ -44,7 +36,5 @@ main ()\n   td = 0.0dl;  CHECK128 (td, 0)\n   td = -0.0dl; CHECK128 (td, 1)\n \n-  if (failures != 0)\n-    abort ();\n-  return 0;\n+  FINISH\n }"}, {"sha": "e7d3f0405e734eb7c0ad0d22bb95ebac3d8605a1", "filename": "gcc/testsuite/gcc.dg/dfp/signbit-2.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fsignbit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fsignbit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fsignbit-2.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,9 +1,9 @@\n-/* { dg-options \"-O0 -std=gnu99\" } */\n+/* { dg-options \"-O0\" } */\n \n /* Check that the compiler uses builtins for signbit; if not the link\n    will fail because library functions are in libm.  */\n \n-extern void abort (void);\n+#include \"dfp-dbg.h\"\n \n volatile _Decimal32 sd = 2.3df;\n volatile _Decimal64 dd = -4.5dd;\n@@ -22,12 +22,12 @@ extern int signbitd128 (_Decimal128);\n int\n main ()\n {\n-  if (signbitf (f) != 0) abort ();\n-  if (signbit (d) == 0) abort ();\n-  if (signbitl (ld) != 0) abort ();\n-  if (signbitd32 (sd) != 0) abort ();\n-  if (signbitd64 (dd) == 0) abort ();\n-  if (signbitd128 (tf) != 0) abort ();\n+  if (signbitf (f) != 0) FAILURE\n+  if (signbit (d) == 0) FAILURE\n+  if (signbitl (ld) != 0) FAILURE\n+  if (signbitd32 (sd) != 0) FAILURE\n+  if (signbitd64 (dd) == 0) FAILURE\n+  if (signbitd128 (tf) != 0) FAILURE\n \n-  return 0;\n+  FINISH\n }"}, {"sha": "2a9d7304fd17a9297a60abd842c89054a49c39e6", "filename": "gcc/testsuite/gcc.dg/dfp/struct-layout-1.c", "status": "modified", "additions": 2, "deletions": 22, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fstruct-layout-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fstruct-layout-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fstruct-layout-1.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,8 +1,5 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n #include <stdarg.h>\n-\n-extern void abort (void);\n+#include \"dfp-dbg.h\"\n \n struct S1\n {\n@@ -39,20 +36,6 @@ struct S5\n   } a;\n };\n \n-static int failcnt = 0;\n-\n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE do                             \\\n-{ printf (\"failed at line %d\\n\", __LINE__);    \\\n-  failcnt++;                                   \\\n-}while(0)\n-#else\n-#define FAILURE abort ()\n-#endif\n-\n int check_var (int z, ...)\n {\n   long long result;\n@@ -84,8 +67,5 @@ int main ()\n   if (check_var (2, s5, 2LL) == 0)\n     FAILURE;\n \n-  if (failcnt)\n-    abort ();\n-\n-  return 0;\n+  FINISH\n }"}, {"sha": "a4545d5d921b8702ab3226bed3804c7e78a03fd7", "filename": "gcc/testsuite/gcc.dg/dfp/typespec.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ftypespec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ftypespec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Ftypespec.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,7 +1,6 @@\n /* Test for valid and invalid combinations of type specifiers.\n    Based off gcc.dg/test-spec-1.c */\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n \n typedef char type;\n void _Decimal32 *x0;  /* { dg-error \"\" \"void _Decimal32\" } */"}, {"sha": "6896ece99b202b12b9d17491ba7ef52c2d3457a8", "filename": "gcc/testsuite/gcc.dg/dfp/union-init.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Funion-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Funion-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Funion-init.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,8 +1,6 @@\n-/* { dg-options \"-std=gnu99\" } */\n-\n /* Cast to union is a GNU C extension.  */\n \n-extern void abort (void);\n+#include \"dfp-dbg.h\"\n \n union u\n {\n@@ -30,10 +28,10 @@ int main ()\n   double d;\n   \n   if (u1.d128 != 0.0dl)\n-    abort ();\n+    FAILURE\n \n   if (u2.d128 != 4.2dl)\n-    abort ();\n+    FAILURE\n \n   /* cast decimal floating point to union type.  */\n   d128 = 1.23dl;\n@@ -42,19 +40,19 @@ int main ()\n \n   u4 = (union u) d128;\n   if (u4.d128 != 1.23dl)\n-    abort ();\n+    FAILURE\n   \n   u4 = (union u) d;\n   if (u4.d != 3.25)\n-    abort ();\n+    FAILURE\n \n   n1 = (union n) d64;\n   if (n1.d64 != 4.56dd)\n-    abort ();\n+    FAILURE\n   \n   n1 = (union n)d;\n   if (n1.d != 3.25)\n-    abort ();\n+    FAILURE\n \n-  return 0;\n+  FINISH\n }"}, {"sha": "7bd0f64f136616032256ec7ec6a145d99d00b348", "filename": "gcc/testsuite/gcc.dg/dfp/usual-arith-conv-bad-2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv-bad-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv-bad-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv-bad-2.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n \n /* This used to result in an ICE.  */\n "}, {"sha": "e14c7b20a12c44d12973b1bfef47e0e0022d2f55", "filename": "gcc/testsuite/gcc.dg/dfp/usual-arith-conv-bad.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv-bad.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv-bad.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv-bad.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n \n /* N1150 5.4: Usual arithmetic conversions.\n    C99 6.3.1.8[1] (New)."}, {"sha": "0d39a24bb65f9ee244d5d4d9d7c8bfabadfe9815", "filename": "gcc/testsuite/gcc.dg/dfp/usual-arith-conv-const.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv-const.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,5 +1,4 @@\n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99\" } */\n \n /* Test various conversions involving decimal floating types. */\n "}, {"sha": "baff06bc175838802de359d22c435c442f09ae9c", "filename": "gcc/testsuite/gcc.dg/dfp/usual-arith-conv.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fusual-arith-conv.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -1,22 +1,12 @@\n-/* { dg-options \"-std=gnu99 -O0\" } */\n+/* { dg-options \"-O0\" } */\n \n /* N1150 5.4: Usual arithmetic conversions.\n    C99 6.3.1.8[1] (New).\n \n    Test arithmetic operators with different decimal float types, and\n    between decimal float types and integer types.  */\n \n-extern void abort (void);\n-static int failcnt = 0;\n-                                                                                \n-/* Support compiling the test to report individual failures; default is\n-   to abort as soon as a check fails.  */\n-#ifdef DBG\n-#include <stdio.h>\n-#define FAILURE { printf (\"failed at line %d\\n\", __LINE__); failcnt++; }\n-#else\n-#define FAILURE abort ();\n-#endif\n+#include \"dfp-dbg.h\"\n \n volatile _Decimal32 d32a, d32b, d32c;\n volatile _Decimal64 d64a, d64b, d64c;\n@@ -123,5 +113,5 @@ main ()\n   if (d128a != d128c / 2.0dl)\n     FAILURE\n \n-  return 0;\n+  FINISH\n }"}, {"sha": "2b50fe6a56ee28640574ac4969dd45e8e4a88182", "filename": "gcc/testsuite/gcc.dg/dfp/wtr-conversion-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fwtr-conversion-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fwtr-conversion-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fwtr-conversion-1.c?ref=1d5ba98c2a0853f7ae3c68ca9a67aa984e705c09", "patch": "@@ -3,7 +3,7 @@\n    Based on gcc.dg/wtr-conversion-1.c  */\n \n /* { dg-do compile } */\n-/* { dg-options \"-std=gnu99 -Wtraditional\" } */\n+/* { dg-options \"-Wtraditional\" } */\n \n extern void foo_i (int);\n extern void foo_f (float);"}]}