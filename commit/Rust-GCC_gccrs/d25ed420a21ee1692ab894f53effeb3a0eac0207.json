{"sha": "d25ed420a21ee1692ab894f53effeb3a0eac0207", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI1ZWQ0MjBhMjFlZTE2OTJhYjg5NGY1M2VmZmViM2EwZWFjMDIwNw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@cygnus.com", "date": "2000-04-26T00:09:52Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-04-26T00:09:52Z"}, "message": "mn10300.h (REG_CLASS_FROM_LETTER): Return EXTENDED_REGS only if TARGET_AM33.\n\n* config/mn10300/mn10300.h (REG_CLASS_FROM_LETTER): Return\nEXTENDED_REGS only if TARGET_AM33.\n* config/mn10300/mn10300.md (movsi, addsi): Avoid exposing\nSP_REGS to register allocation and reloading unless absolutely\nnecessary.\n(movsi3): Remove special-case of adding non-constants to SP.\n\nFrom-SVN: r33429", "tree": {"sha": "8cca2db811f9b54c02369de2f0b5d68fbfa581cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cca2db811f9b54c02369de2f0b5d68fbfa581cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d25ed420a21ee1692ab894f53effeb3a0eac0207", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d25ed420a21ee1692ab894f53effeb3a0eac0207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d25ed420a21ee1692ab894f53effeb3a0eac0207", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d25ed420a21ee1692ab894f53effeb3a0eac0207/comments", "author": null, "committer": null, "parents": [{"sha": "86cf1cbd5f7e4cf869bb8b02867fd074caef8694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86cf1cbd5f7e4cf869bb8b02867fd074caef8694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86cf1cbd5f7e4cf869bb8b02867fd074caef8694"}], "stats": {"total": 36, "additions": 17, "deletions": 19}, "files": [{"sha": "4be14940535b4fbabc797fb44579840eb19a5a03", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25ed420a21ee1692ab894f53effeb3a0eac0207/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25ed420a21ee1692ab894f53effeb3a0eac0207/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d25ed420a21ee1692ab894f53effeb3a0eac0207", "patch": "@@ -1,3 +1,12 @@\n+2000-04-25  Alexandre Oliva  <aoliva@cygnus.com>\n+\n+\t* config/mn10300/mn10300.h (REG_CLASS_FROM_LETTER): Return\n+\tEXTENDED_REGS only if TARGET_AM33.\n+\t* config/mn10300/mn10300.md (movsi, addsi): Avoid exposing\n+\tSP_REGS to register allocation and reloading unless absolutely\n+\tnecessary.\n+\t(movsi3): Remove special-case of adding non-constants to SP.\n+\n 2000-04-25  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* aclocal.m4 (gcc_AC_NEED_DECLARATION): This macro now requires"}, {"sha": "f7371550ab9af447b94c0362f4c70e8f20065dd5", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25ed420a21ee1692ab894f53effeb3a0eac0207/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25ed420a21ee1692ab894f53effeb3a0eac0207/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=d25ed420a21ee1692ab894f53effeb3a0eac0207", "patch": "@@ -287,8 +287,10 @@ enum reg_class {\n #define REG_CLASS_FROM_LETTER(C) \\\n   ((C) == 'd' ? DATA_REGS : \\\n    (C) == 'a' ? ADDRESS_REGS : \\\n+   (C) == 'y' ? SP_REGS : \\\n+   ! TARGET_AM33 ? NO_REGS : \\\n    (C) == 'x' ? EXTENDED_REGS : \\\n-   (C) == 'y' ? SP_REGS : NO_REGS)\n+   NO_REGS)\n \n /* Macros to check register numbers against specific register classes.  */\n "}, {"sha": "17195b4c203b8ddc556bcf0bf7590545707c8469", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d25ed420a21ee1692ab894f53effeb3a0eac0207/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d25ed420a21ee1692ab894f53effeb3a0eac0207/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=d25ed420a21ee1692ab894f53effeb3a0eac0207", "patch": "@@ -296,9 +296,9 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\"\n-\t\t\t\t\"=dx,ax,dx,a,dxm,dxm,axm,axm,dx,dx,ax,ax,axR,y\")\n+\t\t\t\t\"=dx,ax,dx,a,dxm,dxm,axm,axm,dx,dx,ax,ax,axR,!*y\")\n \t(match_operand:SI 1 \"general_operand\"\n-\t\t\t\t\"0,0,I,I,dx,ax,dx,ax,dixm,aixm,dixm,aixm,xy,axR\"))]\n+\t\t\t\t\"0,0,I,I,dx,ax,dx,ax,dixm,aixm,dixm,aixm,!*y,axR\"))]\n   \"register_operand (operands[0], SImode)\n    || register_operand (operands[1], SImode)\"\n   \"*\n@@ -744,23 +744,10 @@\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"\")\n \t\t (match_operand:SI 2 \"nonmemory_operand\" \"\")))]\n   \"\"\n-  \"\n-{\n-  /* We can't add a variable amount directly to the stack pointer;\n-     so do so via a temporary register.  */\n-  if (operands[0] == stack_pointer_rtx\n-      && GET_CODE (operands[1]) != CONST_INT\n-      && GET_CODE (operands[2]) != CONST_INT)\n-   {\n-     rtx temp = gen_reg_rtx (SImode);\n-     emit_move_insn (temp, gen_rtx_PLUS (SImode, operands[1], operands[2]));\n-     emit_move_insn (operands[0], temp);\n-     DONE;\n-   }\n-}\")\n+  \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=dx,a,x,a,dax,xy,!dax\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=dx,a,x,a,dax,!*y,!dax\")\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,0,dax\")\n \t\t (match_operand:SI 2 \"nonmemory_operand\" \"J,J,L,L,daxi,i,dax\")))]\n   \"TARGET_AM33\"\n@@ -839,7 +826,7 @@\n   [(set_attr \"cc\" \"set_zn,none_0hit,set_zn,none_0hit,set_zn,none_0hit,set_zn\")])\n \n (define_insn \"\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=dx,a,a,dax,xy,!dax\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=dx,a,a,dax,!*y,!dax\")\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"%0,0,0,0,0,dax\")\n \t\t (match_operand:SI 2 \"nonmemory_operand\" \"J,J,L,daxi,i,dax\")))]\n   \"\""}]}