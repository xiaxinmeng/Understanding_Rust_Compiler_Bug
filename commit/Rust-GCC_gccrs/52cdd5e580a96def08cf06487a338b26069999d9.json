{"sha": "52cdd5e580a96def08cf06487a338b26069999d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJjZGQ1ZTU4MGE5NmRlZjA4Y2YwNjQ4N2EzMzhiMjYwNjk5OTlkOQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-03T02:30:30Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-03T02:30:30Z"}, "message": "(output_mem_loc_descriptor, output_loc_descriptor):\n\nCatch cases of bogus DECL_RTL values involving pseudo-regs (for all\ntarget systems) and print an annoying message if we ever see such a case.\n\nFrom-SVN: r2311", "tree": {"sha": "467f7323d09fd5a790152adb0319e4395df12130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/467f7323d09fd5a790152adb0319e4395df12130"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52cdd5e580a96def08cf06487a338b26069999d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52cdd5e580a96def08cf06487a338b26069999d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52cdd5e580a96def08cf06487a338b26069999d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52cdd5e580a96def08cf06487a338b26069999d9/comments", "author": null, "committer": null, "parents": [{"sha": "36ad49159d5e11f853f9ee5b929b61125e6807d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ad49159d5e11f853f9ee5b929b61125e6807d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36ad49159d5e11f853f9ee5b929b61125e6807d7"}], "stats": {"total": 35, "additions": 27, "deletions": 8}, "files": [{"sha": "65350842418f23c9032714008ef7ad4346739e05", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52cdd5e580a96def08cf06487a338b26069999d9/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52cdd5e580a96def08cf06487a338b26069999d9/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=52cdd5e580a96def08cf06487a338b26069999d9", "patch": "@@ -1474,11 +1474,11 @@ output_mem_loc_descriptor (rtl)\n \n \t/* Whenever a register number forms a part of the description of\n \t   the method for calculating the (dynamic) address of a memory\n-\t   resident object, Dwarf rules require the register number to\n+\t   resident object, DWARF rules require the register number to\n \t   be referred to as a \"base register\".  This distinction is not\n \t   based in any way upon what category of register the hardware\n \t   believes the given register belongs to.  This is strictly\n-\t   Dwarf terminology we're dealing with here.\n+\t   DWARF terminology we're dealing with here.  */\n \n \t   Note that in cases where the location of a memory-resident data\n \t   object could be expressed as:\n@@ -1489,12 +1489,21 @@ output_mem_loc_descriptor (rtl)\n \t   be OP_BASEREG (basereg).  This may look deceptively like the\n \t   object in question was allocated to a register (rather than\n \t   in memory) so DWARF consumers need to be aware of the subtle\n-\t   distinction between OP_REG and OP_BASEREG.\n-\t*/\n+\t   distinction between OP_REG and OP_BASEREG.  */\n \n \tASM_OUTPUT_DWARF_STACK_OP (asm_out_file, OP_BASEREG);\n-        ASM_OUTPUT_DWARF_DATA4 (asm_out_file,\n-\t\t\t\tDBX_REGISTER_NUMBER (REGNO (rtl)));\n+\t{\n+\t  register unsigned regno = REGNO (rtl);\n+\n+\t  if (regno >= FIRST_PSEUDO_REGISTER)\n+\t    {\n+\t      fprintf (stderr, \"%s: regno botch detected: dwarfout.c:%u\\n\",\n+\t\t       language_string, __LINE__);\n+\t      debug_rtx(rtl);\n+\t      regno = 0;\n+\t    }\n+\t  ASM_OUTPUT_DWARF_DATA4 (asm_out_file, DBX_REGISTER_NUMBER (regno));\n+\t}\n \tbreak;\n \n       case MEM:\n@@ -1549,8 +1558,18 @@ output_loc_descriptor (rtl)\n \n     case REG:\n \tASM_OUTPUT_DWARF_STACK_OP (asm_out_file, OP_REG);\n-        ASM_OUTPUT_DWARF_DATA4 (asm_out_file,\n-\t\t\t\tDBX_REGISTER_NUMBER (REGNO (rtl)));\n+\t{\n+\t  register unsigned regno = REGNO (rtl);\n+\n+\t  if (regno >= FIRST_PSEUDO_REGISTER)\n+\t    {\n+\t      fprintf (stderr, \"%s: regno botch detected: dwarfout.c:%u\\n\",\n+\t\t       language_string, __LINE__);\n+\t      debug_rtx(rtl);\n+\t      regno = 0;\n+\t    }\n+\t  ASM_OUTPUT_DWARF_DATA4 (asm_out_file, DBX_REGISTER_NUMBER (regno));\n+\t}\n \tbreak;\n \n     case MEM:"}]}