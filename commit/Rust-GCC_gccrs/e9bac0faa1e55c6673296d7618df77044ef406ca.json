{"sha": "e9bac0faa1e55c6673296d7618df77044ef406ca", "node_id": "C_kwDOANBUbNoAKGU5YmFjMGZhYTFlNTVjNjY3MzI5NmQ3NjE4ZGY3NzA0NGVmNDA2Y2E", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-08-05T07:42:58Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-06T07:14:20Z"}, "message": "[Ada] Correctly round Value attribute for floating point in more cases\n\nThis provides correct rounding in the IEEE 754 sense for the Value attribute\nof floating-point types in more cases, by switching from tables of powers of\n10 to tables of powers of 5 for precomputed values, thus making it possible\nto use a single divide for denormals and normalized numbers just above them.\n\nAlthough this significantly increases the size of the tables, object files\nfor them are still quite small (1, 2 and 4 KB respectively on x86-64).\n\ngcc/ada/\n\n\t* libgnat/s-powflt.ads (Powfive): New constant array.\n\t* libgnat/s-powlfl.ads (Powfive): Likewise.\n\t(Powfive_100): New constant.\n\t(Powfive_200): Likewise.\n\t(Powfive_300): Likewise.\n\t* libgnat/s-powllf.ads (Powfive): New constant array.\n\t(Powfive_100): New constant.\n\t(Powfive_200): Likewise.\n\t(Powfive_300): Likewise.\n\t* libgnat/s-valflt.ads (Impl): Replace Powten with Powfive and pass\n\tNull_Address for the address of large constants.\n\t* libgnat/s-vallfl.ads (Impl): Replace Powten with Powfive and pass\n\tthe address of large constants.\n\t* libgnat/s-valllf.ads (Impl): Likewise.\n\t* libgnat/s-valrea.ads (System.Val_Real): Replace Powten_Address\n\twith Powfive_Address and add Powfive_{1,2,3}00_Address parameters.\n\t* libgnat/s-valrea.adb (Is_Large_Type): New boolean constant.\n\t(Is_Very_Large_Type): Likewise.\n\t(Maxexp32): Change value of 10 to that of 5.\n\t(Maxexp64): Likewise.\n\t(Maxexp80): Likewise.\n\t(Integer_to_Real): Use a combination of tables of powers of 5 and\n\tscaling if the base is 10.\n\t(Large_Powten): Rename into...\n\t(Large_Powfive): ...this.  Add support for large constants.\n\t(Large_Powfive): New overloaded function for very large exponents.", "tree": {"sha": "8195ca78c40c933033f8b833a0d7025ba76d2d2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8195ca78c40c933033f8b833a0d7025ba76d2d2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9bac0faa1e55c6673296d7618df77044ef406ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9bac0faa1e55c6673296d7618df77044ef406ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9bac0faa1e55c6673296d7618df77044ef406ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9bac0faa1e55c6673296d7618df77044ef406ca/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b9bbdc362efe420633e43850092d01f467aa6d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9bbdc362efe420633e43850092d01f467aa6d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b9bbdc362efe420633e43850092d01f467aa6d8"}], "stats": {"total": 358, "additions": 304, "deletions": 54}, "files": [{"sha": "24e22c973ef5807fd7f665cbfc12c29b10e6259a", "filename": "gcc/ada/libgnat/s-powflt.ads", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9bac0faa1e55c6673296d7618df77044ef406ca/gcc%2Fada%2Flibgnat%2Fs-powflt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9bac0faa1e55c6673296d7618df77044ef406ca/gcc%2Fada%2Flibgnat%2Fs-powflt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-powflt.ads?ref=e9bac0faa1e55c6673296d7618df77044ef406ca", "patch": "@@ -29,17 +29,41 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package provides a powers of ten table used for real conversions\n+--  This package provides tables of powers used for real conversions\n \n package System.Powten_Flt is\n    pragma Pure;\n \n    Maxpow_Exact : constant := 10;\n-   --  Largest power of ten exactly representable with Float. It is equal to\n+   --  Largest power of five exactly representable with Float. It is equal to\n    --  floor (M * log 2 / log 5), when M is the size of the mantissa (24).\n+   --  It also works for any number of the form 5*(2**N) and in particular 10.\n \n    Maxpow : constant := Maxpow_Exact * 2;\n-   --  Largest power of ten exactly representable with a double Float\n+   --  Largest power of five exactly representable with double Float\n+\n+   Powfive : constant array (0 .. Maxpow, 1 .. 2) of Float :=\n+     [00 => [5.0**00, 0.0],\n+      01 => [5.0**01, 0.0],\n+      02 => [5.0**02, 0.0],\n+      03 => [5.0**03, 0.0],\n+      04 => [5.0**04, 0.0],\n+      05 => [5.0**05, 0.0],\n+      06 => [5.0**06, 0.0],\n+      07 => [5.0**07, 0.0],\n+      08 => [5.0**08, 0.0],\n+      09 => [5.0**09, 0.0],\n+      10 => [5.0**10, 0.0],\n+      11 => [5.0**11, 5.0**11 - Float'Machine (5.0**11)],\n+      12 => [5.0**12, 5.0**12 - Float'Machine (5.0**12)],\n+      13 => [5.0**13, 5.0**13 - Float'Machine (5.0**13)],\n+      14 => [5.0**14, 5.0**14 - Float'Machine (5.0**14)],\n+      15 => [5.0**15, 5.0**15 - Float'Machine (5.0**15)],\n+      16 => [5.0**16, 5.0**16 - Float'Machine (5.0**16)],\n+      17 => [5.0**17, 5.0**17 - Float'Machine (5.0**17)],\n+      18 => [5.0**18, 5.0**18 - Float'Machine (5.0**18)],\n+      19 => [5.0**19, 5.0**19 - Float'Machine (5.0**19)],\n+      20 => [5.0**20, 5.0**20 - Float'Machine (5.0**20)]];\n \n    Powten : constant array (0 .. Maxpow, 1 .. 2) of Float :=\n      [00 => [1.0E+00, 0.0],"}, {"sha": "a627c0c6a82dc57ea23f450960fda4bafbb5397e", "filename": "gcc/ada/libgnat/s-powlfl.ads", "status": "modified", "additions": 60, "deletions": 3, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9bac0faa1e55c6673296d7618df77044ef406ca/gcc%2Fada%2Flibgnat%2Fs-powlfl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9bac0faa1e55c6673296d7618df77044ef406ca/gcc%2Fada%2Flibgnat%2Fs-powlfl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-powlfl.ads?ref=e9bac0faa1e55c6673296d7618df77044ef406ca", "patch": "@@ -29,17 +29,74 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package provides a powers of ten table used for real conversions\n+--  This package provides tables of powers used for real conversions\n \n package System.Powten_LFlt is\n    pragma Pure;\n \n    Maxpow_Exact : constant := 22;\n-   --  Largest power of ten exactly representable with Long_Float. It is equal\n+   --  Largest power of five exactly representable with Long_Float. It is equal\n    --  to floor (M * log 2 / log 5), when M is the size of the mantissa (53).\n+   --  It also works for any number of the form 5*(2**N) and in particular 10.\n \n    Maxpow : constant := Maxpow_Exact * 2;\n-   --  Largest power of ten exactly representable with a double Long_Float\n+   --  Largest power of five exactly representable with double Long_Float\n+\n+   Powfive : constant array (0 .. Maxpow, 1 .. 2) of Long_Float :=\n+     [00 => [5.0**00, 0.0],\n+      01 => [5.0**01, 0.0],\n+      02 => [5.0**02, 0.0],\n+      03 => [5.0**03, 0.0],\n+      04 => [5.0**04, 0.0],\n+      05 => [5.0**05, 0.0],\n+      06 => [5.0**06, 0.0],\n+      07 => [5.0**07, 0.0],\n+      08 => [5.0**08, 0.0],\n+      09 => [5.0**09, 0.0],\n+      10 => [5.0**10, 0.0],\n+      11 => [5.0**11, 0.0],\n+      12 => [5.0**12, 0.0],\n+      13 => [5.0**13, 0.0],\n+      14 => [5.0**14, 0.0],\n+      15 => [5.0**15, 0.0],\n+      16 => [5.0**16, 0.0],\n+      17 => [5.0**17, 0.0],\n+      18 => [5.0**18, 0.0],\n+      19 => [5.0**19, 0.0],\n+      20 => [5.0**20, 0.0],\n+      21 => [5.0**21, 0.0],\n+      22 => [5.0**22, 0.0],\n+      23 => [5.0**23, 5.0**23 - Long_Float'Machine (5.0**23)],\n+      24 => [5.0**24, 5.0**24 - Long_Float'Machine (5.0**24)],\n+      25 => [5.0**25, 5.0**25 - Long_Float'Machine (5.0**25)],\n+      26 => [5.0**26, 5.0**26 - Long_Float'Machine (5.0**26)],\n+      27 => [5.0**27, 5.0**27 - Long_Float'Machine (5.0**27)],\n+      28 => [5.0**28, 5.0**28 - Long_Float'Machine (5.0**28)],\n+      29 => [5.0**29, 5.0**29 - Long_Float'Machine (5.0**29)],\n+      30 => [5.0**30, 5.0**30 - Long_Float'Machine (5.0**30)],\n+      31 => [5.0**31, 5.0**31 - Long_Float'Machine (5.0**31)],\n+      32 => [5.0**32, 5.0**32 - Long_Float'Machine (5.0**32)],\n+      33 => [5.0**33, 5.0**33 - Long_Float'Machine (5.0**33)],\n+      34 => [5.0**34, 5.0**34 - Long_Float'Machine (5.0**34)],\n+      35 => [5.0**35, 5.0**35 - Long_Float'Machine (5.0**35)],\n+      36 => [5.0**36, 5.0**36 - Long_Float'Machine (5.0**36)],\n+      37 => [5.0**37, 5.0**37 - Long_Float'Machine (5.0**37)],\n+      38 => [5.0**38, 5.0**38 - Long_Float'Machine (5.0**38)],\n+      39 => [5.0**39, 5.0**39 - Long_Float'Machine (5.0**39)],\n+      40 => [5.0**40, 5.0**40 - Long_Float'Machine (5.0**40)],\n+      41 => [5.0**41, 5.0**41 - Long_Float'Machine (5.0**41)],\n+      42 => [5.0**42, 5.0**42 - Long_Float'Machine (5.0**42)],\n+      43 => [5.0**43, 5.0**43 - Long_Float'Machine (5.0**43)],\n+      44 => [5.0**44, 5.0**44 - Long_Float'Machine (5.0**44)]];\n+\n+   Powfive_100 : constant array (1 .. 2) of Long_Float :=\n+     [5.0**100, 5.0**100 - Long_Float'Machine (5.0**100)];\n+\n+   Powfive_200 : constant array (1 .. 2) of Long_Float :=\n+     [5.0**200, 5.0**200 - Long_Float'Machine (5.0**200)];\n+\n+   Powfive_300 : constant array (1 .. 2) of Long_Float :=\n+     [5.0**300, 5.0**300 - Long_Float'Machine (5.0**300)];\n \n    Powten : constant array (0 .. Maxpow, 1 .. 2) of Long_Float :=\n      [00 => [1.0E+00, 0.0],"}, {"sha": "4b5f1ae199e53de2d0aa689121a0389550a4c461", "filename": "gcc/ada/libgnat/s-powllf.ads", "status": "modified", "additions": 70, "deletions": 3, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9bac0faa1e55c6673296d7618df77044ef406ca/gcc%2Fada%2Flibgnat%2Fs-powllf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9bac0faa1e55c6673296d7618df77044ef406ca/gcc%2Fada%2Flibgnat%2Fs-powllf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-powllf.ads?ref=e9bac0faa1e55c6673296d7618df77044ef406ca", "patch": "@@ -29,19 +29,86 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package provides a powers of ten table used for real conversions\n+--  This package provides tables of powers used for real conversions\n \n package System.Powten_LLF is\n    pragma Pure;\n \n    Maxpow_Exact : constant :=\n      (if Long_Long_Float'Machine_Mantissa = 64 then 27 else 22);\n-   --  Largest power of ten exactly representable with Long_Long_Float. It is\n+   --  Largest power of five exactly representable with Long_Long_Float. It is\n    --  equal to floor (M * log 2 / log 5), when M is the size of the mantissa\n    --  assumed to be either 64 for IEEE Extended or 53 for IEEE Double.\n+   --  It also works for any number of the form 5*(2**N) and in particular 10.\n \n    Maxpow : constant := Maxpow_Exact * 2;\n-   --  Largest power of ten exactly representable with a double Long_Long_Float\n+   --  Largest power of five exactly representable with double Long_Long_Float\n+\n+   Powfive : constant array (0 .. 54, 1 .. 2) of Long_Long_Float :=\n+     [00 => [5.0**00, 0.0],\n+      01 => [5.0**01, 0.0],\n+      02 => [5.0**02, 0.0],\n+      03 => [5.0**03, 0.0],\n+      04 => [5.0**04, 0.0],\n+      05 => [5.0**05, 0.0],\n+      06 => [5.0**06, 0.0],\n+      07 => [5.0**07, 0.0],\n+      08 => [5.0**08, 0.0],\n+      09 => [5.0**09, 0.0],\n+      10 => [5.0**10, 0.0],\n+      11 => [5.0**11, 0.0],\n+      12 => [5.0**12, 0.0],\n+      13 => [5.0**13, 0.0],\n+      14 => [5.0**14, 0.0],\n+      15 => [5.0**15, 0.0],\n+      16 => [5.0**16, 0.0],\n+      17 => [5.0**17, 0.0],\n+      18 => [5.0**18, 0.0],\n+      19 => [5.0**19, 0.0],\n+      20 => [5.0**20, 0.0],\n+      21 => [5.0**21, 0.0],\n+      22 => [5.0**22, 0.0],\n+      23 => [5.0**23, 5.0**23 - Long_Long_Float'Machine (5.0**23)],\n+      24 => [5.0**24, 5.0**24 - Long_Long_Float'Machine (5.0**24)],\n+      25 => [5.0**25, 5.0**25 - Long_Long_Float'Machine (5.0**25)],\n+      26 => [5.0**26, 5.0**26 - Long_Long_Float'Machine (5.0**26)],\n+      27 => [5.0**27, 5.0**27 - Long_Long_Float'Machine (5.0**27)],\n+      28 => [5.0**28, 5.0**28 - Long_Long_Float'Machine (5.0**28)],\n+      29 => [5.0**29, 5.0**29 - Long_Long_Float'Machine (5.0**29)],\n+      30 => [5.0**30, 5.0**30 - Long_Long_Float'Machine (5.0**30)],\n+      31 => [5.0**31, 5.0**31 - Long_Long_Float'Machine (5.0**31)],\n+      32 => [5.0**32, 5.0**32 - Long_Long_Float'Machine (5.0**32)],\n+      33 => [5.0**33, 5.0**33 - Long_Long_Float'Machine (5.0**33)],\n+      34 => [5.0**34, 5.0**34 - Long_Long_Float'Machine (5.0**34)],\n+      35 => [5.0**35, 5.0**35 - Long_Long_Float'Machine (5.0**35)],\n+      36 => [5.0**36, 5.0**36 - Long_Long_Float'Machine (5.0**36)],\n+      37 => [5.0**37, 5.0**37 - Long_Long_Float'Machine (5.0**37)],\n+      38 => [5.0**38, 5.0**38 - Long_Long_Float'Machine (5.0**38)],\n+      39 => [5.0**39, 5.0**39 - Long_Long_Float'Machine (5.0**39)],\n+      40 => [5.0**40, 5.0**40 - Long_Long_Float'Machine (5.0**40)],\n+      41 => [5.0**41, 5.0**41 - Long_Long_Float'Machine (5.0**41)],\n+      42 => [5.0**42, 5.0**42 - Long_Long_Float'Machine (5.0**42)],\n+      43 => [5.0**43, 5.0**43 - Long_Long_Float'Machine (5.0**43)],\n+      44 => [5.0**44, 5.0**44 - Long_Long_Float'Machine (5.0**44)],\n+      45 => [5.0**45, 5.0**45 - Long_Long_Float'Machine (5.0**45)],\n+      46 => [5.0**46, 5.0**46 - Long_Long_Float'Machine (5.0**46)],\n+      47 => [5.0**47, 5.0**47 - Long_Long_Float'Machine (5.0**47)],\n+      48 => [5.0**48, 5.0**48 - Long_Long_Float'Machine (5.0**48)],\n+      49 => [5.0**49, 5.0**49 - Long_Long_Float'Machine (5.0**49)],\n+      50 => [5.0**50, 5.0**50 - Long_Long_Float'Machine (5.0**50)],\n+      51 => [5.0**51, 5.0**51 - Long_Long_Float'Machine (5.0**51)],\n+      52 => [5.0**52, 5.0**52 - Long_Long_Float'Machine (5.0**52)],\n+      53 => [5.0**53, 5.0**53 - Long_Long_Float'Machine (5.0**53)],\n+      54 => [5.0**54, 5.0**54 - Long_Long_Float'Machine (5.0**54)]];\n+\n+   Powfive_100 : constant array (1 .. 2) of Long_Long_Float :=\n+     [5.0**100, 5.0**100 - Long_Long_Float'Machine (5.0**100)];\n+\n+   Powfive_200 : constant array (1 .. 2) of Long_Long_Float :=\n+     [5.0**200, 5.0**200 - Long_Long_Float'Machine (5.0**200)];\n+\n+   Powfive_300 : constant array (1 .. 2) of Long_Long_Float :=\n+     [5.0**300, 5.0**300 - Long_Long_Float'Machine (5.0**300)];\n \n    Powten : constant array (0 .. 54, 1 .. 2) of Long_Long_Float :=\n      [00 => [1.0E+00, 0.0],"}, {"sha": "cc8f583a8d13bbc26cba50bb1ce4c578f6fed7c4", "filename": "gcc/ada/libgnat/s-valflt.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9bac0faa1e55c6673296d7618df77044ef406ca/gcc%2Fada%2Flibgnat%2Fs-valflt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9bac0faa1e55c6673296d7618df77044ef406ca/gcc%2Fada%2Flibgnat%2Fs-valflt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valflt.ads?ref=e9bac0faa1e55c6673296d7618df77044ef406ca", "patch": "@@ -42,7 +42,10 @@ package System.Val_Flt is\n    package Impl is new Val_Real\n      (Float,\n       System.Powten_Flt.Maxpow,\n-      System.Powten_Flt.Powten'Address,\n+      System.Powten_Flt.Powfive'Address,\n+      System.Null_Address,\n+      System.Null_Address,\n+      System.Null_Address,\n       Unsigned_Types.Unsigned);\n \n    function Scan_Float"}, {"sha": "12be755049d3dcfd45d1b8fbf51484bf82dacab1", "filename": "gcc/ada/libgnat/s-vallfl.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9bac0faa1e55c6673296d7618df77044ef406ca/gcc%2Fada%2Flibgnat%2Fs-vallfl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9bac0faa1e55c6673296d7618df77044ef406ca/gcc%2Fada%2Flibgnat%2Fs-vallfl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-vallfl.ads?ref=e9bac0faa1e55c6673296d7618df77044ef406ca", "patch": "@@ -42,7 +42,10 @@ package System.Val_LFlt is\n    package Impl is new Val_Real\n      (Long_Float,\n       System.Powten_LFlt.Maxpow,\n-      System.Powten_LFlt.Powten'Address,\n+      System.Powten_LFlt.Powfive'Address,\n+      System.Powten_LFlt.Powfive_100'Address,\n+      System.Powten_LFlt.Powfive_200'Address,\n+      System.Powten_LFlt.Powfive_300'Address,\n       Unsigned_Types.Long_Long_Unsigned);\n \n    function Scan_Long_Float"}, {"sha": "80566c3331bed9940d1a15597c17959b5d3eadf2", "filename": "gcc/ada/libgnat/s-valllf.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9bac0faa1e55c6673296d7618df77044ef406ca/gcc%2Fada%2Flibgnat%2Fs-valllf.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9bac0faa1e55c6673296d7618df77044ef406ca/gcc%2Fada%2Flibgnat%2Fs-valllf.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valllf.ads?ref=e9bac0faa1e55c6673296d7618df77044ef406ca", "patch": "@@ -42,7 +42,10 @@ package System.Val_LLF is\n    package Impl is new Val_Real\n      (Long_Long_Float,\n       System.Powten_LLF.Maxpow,\n-      System.Powten_LLF.Powten'Address,\n+      System.Powten_LLF.Powfive'Address,\n+      System.Powten_LLF.Powfive_100'Address,\n+      System.Powten_LLF.Powfive_200'Address,\n+      System.Powten_LLF.Powfive_300'Address,\n       System.Unsigned_Types.Long_Long_Unsigned);\n \n    function Scan_Long_Long_Float"}, {"sha": "079c48b3785eec21f2eac89fff1ff834af77b45c", "filename": "gcc/ada/libgnat/s-valrea.adb", "status": "modified", "additions": 128, "deletions": 41, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9bac0faa1e55c6673296d7618df77044ef406ca/gcc%2Fada%2Flibgnat%2Fs-valrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9bac0faa1e55c6673296d7618df77044ef406ca/gcc%2Fada%2Flibgnat%2Fs-valrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valrea.adb?ref=e9bac0faa1e55c6673296d7618df77044ef406ca", "patch": "@@ -43,7 +43,11 @@ package body System.Val_Real is\n    pragma Assert (Num'Machine_Mantissa <= Uns'Size);\n    --  We need an unsigned type large enough to represent the mantissa\n \n+   Is_Large_Type : constant Boolean := Num'Machine_Mantissa >= 53;\n+   --  True if the floating-point type is at least IEEE Double\n+\n    Precision_Limit : constant Uns := 2**Num'Machine_Mantissa - 1;\n+   --  See below for the rationale\n \n    package Impl is new Value_R (Uns, 2, Precision_Limit, Round => False);\n \n@@ -55,18 +59,21 @@ package body System.Val_Real is\n \n    Maxexp32 : constant array (Base_T) of Positive :=\n      [2  => 127, 3 => 80,  4 => 63,  5 => 55,  6 => 49,\n-      7  => 45,  8 => 42,  9 => 40, 10 => 38, 11 => 37,\n+      7  => 45,  8 => 42,  9 => 40, 10 => 55, 11 => 37,\n       12 => 35, 13 => 34, 14 => 33, 15 => 32, 16 => 31];\n+   --  The actual value for 10 is 38 but we also use scaling for 10\n \n    Maxexp64 : constant array (Base_T) of Positive :=\n      [2  => 1023, 3 => 646,  4 => 511,  5 => 441,  6 => 396,\n-      7  => 364,  8 => 341,  9 => 323, 10 => 308, 11 => 296,\n+      7  => 364,  8 => 341,  9 => 323, 10 => 441, 11 => 296,\n       12 => 285, 13 => 276, 14 => 268, 15 => 262, 16 => 255];\n+   --  The actual value for 10 is 308 but we also use scaling for 10\n \n    Maxexp80 : constant array (Base_T) of Positive :=\n      [2  => 16383, 3 => 10337, 4 => 8191,  5 => 7056,  6 => 6338,\n-      7  => 5836,  8 => 5461,  9 => 5168, 10 => 4932, 11 => 4736,\n+      7  => 5836,  8 => 5461,  9 => 5168, 10 => 7056, 11 => 4736,\n       12 => 4570, 13 => 4427, 14 => 4303, 15 => 4193, 16 => 4095];\n+   --  The actual value for 10 is 4932 but we also use scaling for 10\n \n    package Double_Real is new System.Double_Real (Num);\n    use type Double_Real.Double_T;\n@@ -91,8 +98,11 @@ package body System.Val_Real is\n       Minus : Boolean) return Num;\n    --  Convert the real value from integer to real representation\n \n-   function Large_Powten (Exp : Natural) return Double_T;\n-   --  Return 10.0**Exp as a double number, where Exp > Maxpow\n+   function Large_Powfive (Exp : Natural) return Double_T;\n+   --  Return 5.0**Exp as a double number, where Exp > Maxpow\n+\n+   function Large_Powfive (Exp : Natural; S : out Natural) return Double_T;\n+   --  Return Num'Scaling (5.0**Exp, -S) as a double number where Exp > Maxexp\n \n    ---------------------\n    -- Integer_to_Real --\n@@ -177,13 +187,13 @@ package body System.Val_Real is\n \n                when 10 =>\n                   declare\n-                     Powten : constant array (0 .. Maxpow) of Double_T;\n-                     pragma Import (Ada, Powten);\n-                     for Powten'Address use Powten_Address;\n+                     Powfive : constant array (0 .. Maxpow) of Double_T;\n+                     pragma Import (Ada, Powfive);\n+                     for Powfive'Address use Powfive_Address;\n \n                   begin\n                      if DS <= Maxpow then\n-                        D_Val := Powten (DS) * V1 + V2;\n+                        D_Val := Powfive (DS) * Num'Scaling (V1, DS) + V2;\n                         S := Scale (2);\n \n                      else\n@@ -224,43 +234,46 @@ package body System.Val_Real is\n                   R_Val := Num'Scaling (Double_Real.To_Single (D_Val), S);\n                end;\n \n-            --  If the base is 10, use a double implementation for the sake\n-            --  of accuracy, to be removed when exponentiation is improved.\n-\n-            --  When the exponent is positive, we can do the computation\n-            --  directly because, if the exponentiation overflows, then\n-            --  the final value overflows as well. But when the exponent\n-            --  is negative, we may need to do it in two steps to avoid\n-            --  an artificial underflow.\n+            --  If the base is 10, we use a double implementation for the sake\n+            --  of accuracy combining powers of 5 and scaling attribute. Using\n+            --  this combination is better than using powers of 10 only because\n+            --  the Large_Powfive function may overflow only if the final value\n+            --  will also either overflow or underflow, thus making it possible\n+            --  to use a single division for the case of negative powers of 10.\n \n             when 10 =>\n                declare\n-                  Powten : constant array (0 .. Maxpow) of Double_T;\n-                  pragma Import (Ada, Powten);\n-                  for Powten'Address use Powten_Address;\n+                  Powfive : constant array (0 .. Maxpow) of Double_T;\n+                  pragma Import (Ada, Powfive);\n+                  for Powfive'Address use Powfive_Address;\n+\n+                  RS : Natural;\n \n                begin\n                   if S > 0 then\n                      if S <= Maxpow then\n-                        D_Val := D_Val * Powten (S);\n+                        D_Val := D_Val * Powfive (S);\n                      else\n-                        D_Val := D_Val * Large_Powten (S);\n+                        D_Val := D_Val * Large_Powfive (S);\n                      end if;\n \n                   else\n-                     if S < -Maxexp then\n-                        D_Val := D_Val / Large_Powten (Maxexp);\n-                        S := S + Maxexp;\n-                     end if;\n-\n                      if S >= -Maxpow then\n-                        D_Val := D_Val / Powten (-S);\n+                        D_Val := D_Val / Powfive (-S);\n+\n+                     --  For small types, typically IEEE Single, the trick\n+                     --  described above does not fully work.\n+\n+                     elsif not Is_Large_Type and then S < -Maxexp then\n+                        D_Val := D_Val / Large_Powfive (-S, RS);\n+                        S := S - RS;\n+\n                      else\n-                        D_Val := D_Val / Large_Powten (-S);\n+                        D_Val := D_Val / Large_Powfive (-S);\n                      end if;\n                   end if;\n \n-                  R_Val := Double_Real.To_Single (D_Val);\n+                  R_Val := Num'Scaling (Double_Real.To_Single (D_Val), S);\n                end;\n \n             --  Implementation for other bases with exponentiation\n@@ -302,33 +315,107 @@ package body System.Val_Real is\n       when Constraint_Error => Bad_Value (Str);\n    end Integer_to_Real;\n \n-   ------------------\n-   -- Large_Powten --\n-   ------------------\n+   -------------------\n+   -- Large_Powfive --\n+   -------------------\n \n-   function Large_Powten (Exp : Natural) return Double_T is\n-      Powten : constant array (0 .. Maxpow) of Double_T;\n-      pragma Import (Ada, Powten);\n-      for Powten'Address use Powten_Address;\n+   function Large_Powfive (Exp : Natural) return Double_T is\n+      Powfive : constant array (0 .. Maxpow) of Double_T;\n+      pragma Import (Ada, Powfive);\n+      for Powfive'Address use Powfive_Address;\n+\n+      Powfive_100 : constant Double_T;\n+      pragma Import (Ada, Powfive_100);\n+      for Powfive_100'Address use Powfive_100_Address;\n+\n+      Powfive_200 : constant Double_T;\n+      pragma Import (Ada, Powfive_200);\n+      for Powfive_200'Address use Powfive_200_Address;\n+\n+      Powfive_300 : constant Double_T;\n+      pragma Import (Ada, Powfive_300);\n+      for Powfive_300'Address use Powfive_300_Address;\n \n       R : Double_T;\n       E : Natural;\n \n    begin\n       pragma Assert (Exp > Maxpow);\n \n-      R := Powten (Maxpow);\n+      if Is_Large_Type and then Exp >= 300 then\n+         R := Powfive_300;\n+         E := Exp - 300;\n+\n+      elsif Is_Large_Type and then Exp >= 200 then\n+         R := Powfive_200;\n+         E := Exp - 200;\n+\n+      elsif Is_Large_Type and then Exp >= 100 then\n+         R := Powfive_100;\n+         E := Exp - 100;\n+\n+      else\n+         R := Powfive (Maxpow);\n+         E := Exp - Maxpow;\n+      end if;\n+\n+      while E > Maxpow loop\n+         R := R * Powfive (Maxpow);\n+         E := E - Maxpow;\n+      end loop;\n+\n+      R := R * Powfive (E);\n+\n+      return R;\n+   end Large_Powfive;\n+\n+   function Large_Powfive (Exp : Natural; S : out Natural) return Double_T is\n+      Maxexp : constant Positive :=\n+        (if    Num'Size = 32             then Maxexp32 (5)\n+         elsif Num'Size = 64             then Maxexp64 (5)\n+         elsif Num'Machine_Mantissa = 64 then Maxexp80 (5)\n+         else  raise Program_Error);\n+      --  Maximum exponent of 5 that can fit in Num\n+\n+      Powfive : constant array (0 .. Maxpow) of Double_T;\n+      pragma Import (Ada, Powfive);\n+      for Powfive'Address use Powfive_Address;\n+\n+      R : Double_T;\n+      E : Natural;\n+\n+   begin\n+      pragma Assert (Exp > Maxexp);\n+\n+      pragma Warnings (Off, \"-gnatw.a\");\n+      pragma Assert (not Is_Large_Type);\n+      pragma Warnings (On, \"-gnatw.a\");\n+\n+      R := Powfive (Maxpow);\n       E := Exp - Maxpow;\n \n+      --  If the exponent is not too large, then scale down the result so that\n+      --  its final value does not overflow but, if it's too large, then do not\n+      --  bother doing it since overflow is just fine. The scaling factor is -3\n+      --  for every power of 5 above the maximum, in other words division by 8.\n+\n+      if Exp - Maxexp <= Maxpow then\n+         S := 3 * (Exp - Maxexp);\n+         R.Hi := Num'Scaling (R.Hi, -S);\n+         R.Lo := Num'Scaling (R.Lo, -S);\n+      else\n+         S := 0;\n+      end if;\n+\n       while E > Maxpow loop\n-         R := R * Powten (Maxpow);\n+         R := R * Powfive (Maxpow);\n          E := E - Maxpow;\n       end loop;\n \n-      R := R * Powten (E);\n+      R := R * Powfive (E);\n \n       return R;\n-   end Large_Powten;\n+   end Large_Powfive;\n \n    ---------------\n    -- Scan_Real --"}, {"sha": "89be8d7219c8bc573327cf12c507ecc00cc5efe1", "filename": "gcc/ada/libgnat/s-valrea.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9bac0faa1e55c6673296d7618df77044ef406ca/gcc%2Fada%2Flibgnat%2Fs-valrea.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9bac0faa1e55c6673296d7618df77044ef406ca/gcc%2Fada%2Flibgnat%2Fs-valrea.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valrea.ads?ref=e9bac0faa1e55c6673296d7618df77044ef406ca", "patch": "@@ -38,7 +38,13 @@ generic\n \n    Maxpow : Positive;\n \n-   Powten_Address : System.Address;\n+   Powfive_Address : System.Address;\n+\n+   Powfive_100_Address : System.Address;\n+\n+   Powfive_200_Address : System.Address;\n+\n+   Powfive_300_Address : System.Address;\n \n    type Uns is mod <>;\n "}]}