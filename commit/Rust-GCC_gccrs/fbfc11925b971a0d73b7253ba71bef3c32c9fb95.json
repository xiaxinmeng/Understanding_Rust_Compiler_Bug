{"sha": "fbfc11925b971a0d73b7253ba71bef3c32c9fb95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJmYzExOTI1Yjk3MWEwZDczYjcyNTNiYTcxYmVmM2MzMmM5ZmI5NQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-07-21T07:10:36Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-07-21T07:10:36Z"}, "message": "diagnostic.c (trim_filename, [...]): Moved here from rtl.c.\n\n\t* diagnostic.c (trim_filename, fancy_abort): Moved here from\n\trtl.c.\n\t(fatal_function, set_fatal_function): Removed.\n\t(fatal): Don't prepare for or call the fatal_function.\n\t(diagnostic_lock, error_recursion): New.\n\t(diagnostic_for_decl, report_diagnostic): Guard against\n\tre-entering the error reporting routines.\n\t(fancy_abort): Assume function is not NULL.\n\n\t* errors.c (fancy_abort): New.  Assume function is not NULL.\n\t* tradcpp.c (fancy_abort): Assume function is not NULL.\n\n\t* system.h: Provide default definition of __FUNCTION__.\n\t* rtl.h: Use __FUNCTION__ not __PRETTY_FUNCTION__ throughout.\n\tAlways use __FUNCTION__ in definition of abort.\n\t* tree.h: Likewise.\n\t* varray.h: Likewise.\n\t* toplev.h: Likewise.  Don't prototype set_fatal_function.\n\nFrom-SVN: r35170", "tree": {"sha": "d19f337e85d3fb553f6806af5174bc4df981e7c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d19f337e85d3fb553f6806af5174bc4df981e7c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbfc11925b971a0d73b7253ba71bef3c32c9fb95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbfc11925b971a0d73b7253ba71bef3c32c9fb95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbfc11925b971a0d73b7253ba71bef3c32c9fb95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/comments", "author": null, "committer": null, "parents": [{"sha": "1b493b8185a04b875c99c0dc4ef63005bb5fc54b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b493b8185a04b875c99c0dc4ef63005bb5fc54b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b493b8185a04b875c99c0dc4ef63005bb5fc54b"}], "stats": {"total": 290, "additions": 156, "deletions": 134}, "files": [{"sha": "3991cd398af40c9b341065e048c8b690bddc3d4f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbfc11925b971a0d73b7253ba71bef3c32c9fb95", "patch": "@@ -1,3 +1,24 @@\n+2000-07-21  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* diagnostic.c (trim_filename, fancy_abort): Moved here from\n+\trtl.c.\n+\t(fatal_function, set_fatal_function): Removed.\n+\t(fatal): Don't prepare for or call the fatal_function.\n+\t(diagnostic_lock, error_recursion): New.\n+\t(diagnostic_for_decl, report_diagnostic): Guard against\n+\tre-entering the error reporting routines.\n+\t(fancy_abort): Assume function is not NULL.\n+\n+\t* errors.c (fancy_abort): New.  Assume function is not NULL.\n+\t* tradcpp.c (fancy_abort): Assume function is not NULL.\n+\n+\t* system.h: Provide default definition of __FUNCTION__.\n+\t* rtl.h: Use __FUNCTION__ not __PRETTY_FUNCTION__ throughout.\n+\tAlways use __FUNCTION__ in definition of abort.\n+\t* tree.h: Likewise.\n+\t* varray.h: Likewise.\n+\t* toplev.h: Likewise.  Don't prototype set_fatal_function.\n+\n 2000-07-20  Geoff Keating  <geoffk@cygnus.com>\n \n \t* config/rs6000/aix43.h (CPP_SPEC): Define __LONG_MAX__ correctly\n@@ -20,7 +41,7 @@\n \tHImode, and SFmode in 32-bit mode, and DFmode in 64-bit mode.\n \t* config/rs6000/sysv4.h (ASM_OUTPUT_SPECIAL_POOL_ENTRY_P): Add\n \tMODE parameter.  Put small constants in the TOC.\n-\t\n+\n \t* config/rs6000/rs6000.c (easy_fp_constant_p): All constants are\n \teasy in SImode.\n \t(rs6000_emit_move): When reload calls us with an illegitimate"}, {"sha": "3fb6f6b7f08481d11eb53dd1277b63eb317e2506", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 98, "deletions": 41, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=fbfc11925b971a0d73b7253ba71bef3c32c9fb95", "patch": "@@ -96,6 +96,9 @@ static void maybe_wrap_text PARAMS ((output_buffer *, const char *,\n static void clear_text_info PARAMS ((output_buffer *));\n static void clear_diagnostic_info PARAMS ((output_buffer *));\n \n+static void error_recursion PARAMS ((void)) ATTRIBUTE_NORETURN;\n+static const char *trim_filename PARAMS ((const char *));\n+\n extern int rtl_dump_and_exit;\n extern int inhibit_warnings;\n extern int warnings_are_errors;\n@@ -137,6 +140,10 @@ int diagnostic_message_length_per_line;\n /* Used to control every diagnostic message formatting.  Front-ends should\n    call set_message_prefixing_rule to set up their politics.  */\n static int current_prefixing_rule;\n+\n+/* Prevent recursion into the error handler.  */\n+static int diagnostic_lock;\n+\n \f\n /* Initialize the diagnostic message outputting machinery.  */\n \n@@ -900,20 +907,25 @@ diagnostic_for_decl (decl, msg, args_ptr, warn)\n {\n   output_state os;\n \n-  if (!count_error (warn))\n-    return;\n-  os = diagnostic_buffer->state;\n-  report_error_function (DECL_SOURCE_FILE (decl));\n-  output_set_prefix\n-    (diagnostic_buffer, context_as_prefix\n-     (DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl), warn));\n-  output_buffer_ptr_to_format_args (diagnostic_buffer) = args_ptr;\n-  output_buffer_text_cursor (diagnostic_buffer) = msg;\n-  format_with_decl (diagnostic_buffer, decl);\n-  finish_diagnostic ();\n-  output_destroy_prefix (diagnostic_buffer);\n+  if (diagnostic_lock++)\n+    error_recursion ();\n+\n+  if (count_error (warn))\n+    {\n+      os = diagnostic_buffer->state;\n+      report_error_function (DECL_SOURCE_FILE (decl));\n+      output_set_prefix\n+\t(diagnostic_buffer, context_as_prefix\n+\t (DECL_SOURCE_FILE (decl), DECL_SOURCE_LINE (decl), warn));\n+      output_buffer_ptr_to_format_args (diagnostic_buffer) = args_ptr;\n+      output_buffer_text_cursor (diagnostic_buffer) = msg;\n+      format_with_decl (diagnostic_buffer, decl);\n+      finish_diagnostic ();\n+      output_destroy_prefix (diagnostic_buffer);\n   \n-  diagnostic_buffer->state = os;\n+      diagnostic_buffer->state = os;\n+    }\n+  diagnostic_lock--;\n }\n \n \f\n@@ -1254,17 +1266,6 @@ error VPARAMS ((const char *msgid, ...))\n   va_end (ap);\n }\n \n-/* Set the function to call when a fatal error occurs.  */\n-\n-static void (*fatal_function) PARAMS ((const char *, va_list));\n-\n-void\n-set_fatal_function (f)\n-     void (*f) PARAMS ((const char *, va_list));\n-{\n-  fatal_function = f;\n-}\n-\n /* Report a fatal error at the current line number.  Allow a front end to\n    intercept the message.  */\n void\n@@ -1274,18 +1275,13 @@ fatal VPARAMS ((const char *msgid, ...))\n   const char *msgid;\n #endif\n   va_list ap;\n-  va_list args_for_fatal_msg;\n \n   VA_START (ap, msgid);\n \n #ifndef ANSI_PROTOTYPES\n   msgid = va_arg (ap, const char *);\n #endif\n-  va_copy (args_for_fatal_msg, ap);\n \n-  if (fatal_function != NULL)\n-    (*fatal_function) (_(msgid), args_for_fatal_msg);\n-  va_end (args_for_fatal_msg);\n   report_diagnostic (msgid, &ap, input_filename, lineno, 0);\n   va_end (ap);\n   exit (FATAL_EXIT_CODE);\n@@ -1482,16 +1478,77 @@ report_diagnostic (msg, args_ptr, file, line, warn)\n {\n   output_state os;\n \n-  if (!count_error (warn))\n-    return;\n-  os = diagnostic_buffer->state;\n-  diagnostic_msg = msg;\n-  diagnostic_args = args_ptr;\n-  report_error_function (file);\n-  output_set_prefix\n-    (diagnostic_buffer, context_as_prefix (file, line, warn));\n-  output_format (diagnostic_buffer);\n-  finish_diagnostic ();\n-  output_destroy_prefix (diagnostic_buffer);\n-  diagnostic_buffer->state = os;\n+  if (diagnostic_lock++)\n+    error_recursion ();\n+\n+  if (count_error (warn))\n+    {\n+      os = diagnostic_buffer->state;\n+      diagnostic_msg = msg;\n+      diagnostic_args = args_ptr;\n+      report_error_function (file);\n+      output_set_prefix\n+\t(diagnostic_buffer, context_as_prefix (file, line, warn));\n+      output_format (diagnostic_buffer);\n+      finish_diagnostic ();\n+      output_destroy_prefix (diagnostic_buffer);\n+      diagnostic_buffer->state = os;\n+    }\n+\n+  diagnostic_lock--;\n+}\n+\n+/* Inform the user that an error occurred while trying to report some\n+   other error.  This indicates catastrophic internal inconsistencies,\n+   so give up now.  But do try to flush out the previous error.  */\n+static void\n+error_recursion ()\n+{\n+  if (diagnostic_lock < 3)\n+    finish_diagnostic ();\n+\n+  fprintf (stderr,\n+\"Internal compiler error: Error reporting routines re-entered.\\n\\\n+Please submit a full bug report.\\n\\\n+See %s for instructions.\\n\", GCCBUGURL);\n+\n+  exit (FATAL_EXIT_CODE);\n+}\n+\n+/* Given a partial pathname as input, return another pathname that\n+   shares no directory elements with the pathname of __FILE__.  This\n+   is used by fancy_abort() to print `Internal compiler error in expr.c'\n+   instead of `Internal compiler error in ../../egcs/gcc/expr.c'.  */\n+static const char *\n+trim_filename (name)\n+     const char *name;\n+{\n+  static const char this_file[] = __FILE__;\n+  const char *p = name, *q = this_file;\n+\n+  while (*p == *q && *p != 0 && *q != 0) p++, q++;\n+  while (p > name && p[-1] != DIR_SEPARATOR\n+#ifdef DIR_SEPARATOR_2\n+\t && p[-1] != DIR_SEPARATOR_2\n+#endif\n+\t )\n+    p--;\n+\n+  return p;\n+}\n+\n+/* Report an internal compiler error in a friendly manner and without\n+   dumping core.  */\n+\n+void\n+fancy_abort (file, line, function)\n+     const char *file;\n+     int line;\n+     const char *function;\n+{\n+  fatal (\n+\"Internal compiler error in %s, at %s:%d\\n\\\n+Please submit a full bug report.\\n\\\n+See %s for instructions.\",\n+\t function, trim_filename (file), line, GCCBUGURL);\n }"}, {"sha": "8ccd7d0b2e0b5cbbf27e6e5862efcf6dd950ef2c", "filename": "gcc/errors.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/gcc%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/gcc%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ferrors.c?ref=fbfc11925b971a0d73b7253ba71bef3c32c9fb95", "patch": "@@ -104,3 +104,15 @@ fatal VPARAMS ((const char *format, ...))\n   fputc('\\n', stderr);\n   exit (FATAL_EXIT_CODE);\n }\n+\n+/* \"Fancy\" abort.  Reports where in the compiler someone gave up.\n+   This file is used only by build programs, so we're not as polite as\n+   the version in diagnostic.c.  */\n+void\n+fancy_abort (file, line, func)\n+     const char *file;\n+     int line;\n+     const char *func;\n+{\n+  fatal (\"ICE in %s, at %s:%d\", func, file, line);\n+}"}, {"sha": "91b38cb91fde78466713d21a4ca88d4dfb34794a", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 46, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=fbfc11925b971a0d73b7253ba71bef3c32c9fb95", "patch": "@@ -265,7 +265,7 @@ static void fatal_with_file_and_line PARAMS ((FILE *, const char *, ...))\n   ATTRIBUTE_PRINTF_2 ATTRIBUTE_NORETURN;\n static void fatal_expected_char PARAMS ((FILE *, int, int)) ATTRIBUTE_NORETURN;\n static void read_name\t\tPARAMS ((char *, FILE *));\n-static const char *trim_filename PARAMS ((const char *));\n+\n \f\n /* Allocate an rtx vector of N elements.\n    Store the length, and initialize all elements to zero.  */\n@@ -1196,48 +1196,3 @@ rtvec_check_failed_bounds (r, n, file, line, func)\n   fancy_abort (file, line, func);\n }\n #endif /* ENABLE_RTL_CHECKING */\n-\n-/* These are utility functions used by fatal-error functions all over the\n-   code.  rtl.c happens to be linked by all the programs that need them,\n-   so these are here.  In the future we want to break out all error handling\n-   to its own module.  */\n-\n-/* Given a partial pathname as input, return another pathname that\n-   shares no directory elements with the pathname of __FILE__.  This\n-   is used by fancy_abort() to print `Internal compiler error in expr.c'\n-   instead of `Internal compiler error in ../../egcs/gcc/expr.c'.  */\n-static const char *\n-trim_filename (name)\n-     const char *name;\n-{\n-  static const char this_file[] = __FILE__;\n-  const char *p = name, *q = this_file;\n-\n-  while (*p == *q && *p != 0 && *q != 0) p++, q++;\n-  while (p > name && p[-1] != DIR_SEPARATOR\n-#ifdef DIR_SEPARATOR_2\n-\t && p[-1] != DIR_SEPARATOR_2\n-#endif\n-\t )\n-    p--;\n-\n-  return p;\n-}\n-\n-/* Report an internal compiler error in a friendly manner and without\n-   dumping core.  */\n-\n-void\n-fancy_abort (file, line, function)\n-     const char *file;\n-     int line;\n-     const char *function;\n-{\n-  if (function == NULL)\n-    function = \"?\";\n-  fatal (\n-\"Internal compiler error in `%s', at %s:%d\\n\\\n-Please submit a full bug report.\\n\\\n-See %s for instructions.\",\n-\t function, trim_filename (file), line, GCCBUGURL);\n-}"}, {"sha": "cbe1b762199640753459b91b54b146e9736f0ee5", "filename": "gcc/rtl.h", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=fbfc11925b971a0d73b7253ba71bef3c32c9fb95", "patch": "@@ -223,45 +223,40 @@ typedef struct rtvec_def{\n (*({ rtx _rtx = (RTX); int _n = (N);\t\t\t\t\t\\\n      enum rtx_code _code = GET_CODE (_rtx);\t\t\t\t\\\n      if (_n < 0 || _n >= GET_RTX_LENGTH (_code))\t\t\t\\\n-       rtl_check_failed_bounds (_rtx, _n, __FILE__, __LINE__,\t\t\\\n-\t\t\t\t__PRETTY_FUNCTION__);\t\t\t\\\n+       rtl_check_failed_bounds (_rtx, _n, __FILE__, __LINE__, __FUNCTION__); \\\n      if (GET_RTX_FORMAT(_code)[_n] != C1)\t\t\t\t\\\n-       rtl_check_failed_type1 (_rtx, _n, C1, __FILE__, __LINE__,\t\\\n-\t\t\t       __PRETTY_FUNCTION__);\t\t\t\\\n+       rtl_check_failed_type1(_rtx, _n, C1, __FILE__, __LINE__, __FUNCTION__); \\\n      &_rtx->fld[_n]; }))\n \n #define RTL_CHECK2(RTX, N, C1, C2) __extension__\t\t\t\\\n (*({ rtx _rtx = (RTX); int _n = (N);\t\t\t\t\t\\\n      enum rtx_code _code = GET_CODE (_rtx);\t\t\t\t\\\n      if (_n < 0 || _n >= GET_RTX_LENGTH (_code))\t\t\t\\\n-       rtl_check_failed_bounds (_rtx, _n, __FILE__, __LINE__,\t\t\\\n-\t\t\t\t__PRETTY_FUNCTION__);\t\t\t\\\n+       rtl_check_failed_bounds (_rtx, _n, __FILE__, __LINE__, __FUNCTION__); \\\n      if (GET_RTX_FORMAT(_code)[_n] != C1\t\t\t\t\\\n \t && GET_RTX_FORMAT(_code)[_n] != C2)\t\t\t\t\\\n        rtl_check_failed_type2 (_rtx, _n, C1, C2, __FILE__, __LINE__,\t\\\n-\t\t\t       __PRETTY_FUNCTION__);\t\t\t\\\n+\t\t\t       __FUNCTION__);\t\t\t\t\\\n      &_rtx->fld[_n]; }))\n \n #define RTL_CHECKC1(RTX, N, C) __extension__\t\t\t\t\\\n (*({ rtx _rtx = (RTX); int _n = (N);\t\t\t\t\t\\\n      if (GET_CODE (_rtx) != C)\t\t\t\t\t\t\\\n-       rtl_check_failed_code1 (_rtx, C, __FILE__, __LINE__,\t\t\\\n-\t\t\t       __PRETTY_FUNCTION__);\t\t\t\\\n+       rtl_check_failed_code1 (_rtx, C, __FILE__, __LINE__, __FUNCTION__); \\\n      &_rtx->fld[_n]; }))\n \n #define RTL_CHECKC2(RTX, N, C1, C2) __extension__\t\t\t\\\n (*({ rtx _rtx = (RTX); int _n = (N);\t\t\t\t\t\\\n      enum rtx_code _code = GET_CODE (_rtx);\t\t\t\t\\\n      if (_code != C1 && _code != C2)\t\t\t\t\t\\\n-       rtl_check_failed_code2 (_rtx, C1, C2, __FILE__, __LINE__,\t\\\n-\t\t\t       __PRETTY_FUNCTION__);\t\t\t\\\n+       rtl_check_failed_code2(_rtx, C1, C2, __FILE__, __LINE__, __FUNCTION__); \\\n      &_rtx->fld[_n]; }))\n \n #define RTVEC_ELT(RTVEC, I) __extension__\t\t\t\t\\\n (*({ rtvec _rtvec = (RTVEC); int _i = (I);\t\t\t\t\\\n      if (_i < 0 || _i >= GET_NUM_ELEM (_rtvec))\t\t\t\t\\\n        rtvec_check_failed_bounds (_rtvec, _i, __FILE__, __LINE__,\t\\\n-\t\t\t\t  __PRETTY_FUNCTION__);\t\t\t\\\n+\t\t\t\t  __FUNCTION__);\t\t\t\\\n      &_rtvec->elem[_i]; }))\n \n extern void rtl_check_failed_bounds PARAMS ((rtx, int,\n@@ -1809,11 +1804,7 @@ extern int read_rtx_lineno;\n \n extern void fancy_abort PARAMS ((const char *, int, const char *))\n     ATTRIBUTE_NORETURN;\n-#if (GCC_VERSION >= 2007)\n-#define abort() fancy_abort (__FILE__, __LINE__, __PRETTY_FUNCTION__)\n-#else\n-#define abort() fancy_abort (__FILE__, __LINE__, 0)\n-#endif\n+#define abort() fancy_abort (__FILE__, __LINE__, __FUNCTION__)\n \n /* In alias.c */\n extern rtx canon_rtx                    PARAMS ((rtx));"}, {"sha": "5741d336b8b22112e306c5efc659a05a204aa8f2", "filename": "gcc/system.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=fbfc11925b971a0d73b7253ba71bef3c32c9fb95", "patch": "@@ -615,4 +615,9 @@ extern void abort PARAMS ((void));\n extern void *alloca (__SIZE_TYPE__);\n #endif\n \n+/* Various error reporting routines want to use __FUNCTION__.  */\n+#if (GCC_VERSION < 2007)\n+#define __FUNCTION__ \"?\"\n+#endif\n+\n #endif /* __GCC_SYSTEM_H__ */"}, {"sha": "d61c5bfcf8d2c62fa5d94b408d9b9413414bfcee", "filename": "gcc/toplev.h", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=fbfc11925b971a0d73b7253ba71bef3c32c9fb95", "patch": "@@ -57,17 +57,11 @@ extern void _fatal_insn\t\t\tPARAMS ((const char *,\n \t\t\t\t\t\tconst char *))\n   ATTRIBUTE_NORETURN;\n \n-#if (GCC_VERSION >= 2007)\n #define fatal_insn(msgid, insn) \\\n-\t_fatal_insn (msgid, insn, __FILE__, __LINE__, __PRETTY_FUNCTION__)\n+\t_fatal_insn (msgid, insn, __FILE__, __LINE__, __FUNCTION__)\n #define fatal_insn_not_found(insn) \\\n-\t_fatal_insn_not_found (insn, __FILE__, __LINE__, __PRETTY_FUNCTION__)\n-#else\n-#define fatal_insn(msgid, insn) \\\n-\t_fatal_insn (msgid, insn, __FILE__, __LINE__, 0)\n-#define fatal_insn_not_found(insn) \\\n-\t_fatal_insn_not_found (insn, __FILE__, __LINE__, 0)\n-#endif\n+\t_fatal_insn_not_found (insn, __FILE__, __LINE__, __FUNCTION__)\n+\n extern void warning\t\t\tPARAMS ((const char *, ...))\n \t\t\t\t\t\tATTRIBUTE_PRINTF_1;\n extern void error\t\t\tPARAMS ((const char *, ...))\n@@ -140,5 +134,4 @@ extern int sorrycount;\n \n extern const char *progname;\n \n-extern void set_fatal_function PARAMS ((void (*) (const char *, va_list)));\n #endif /* __GCC_TOPLEV_H */"}, {"sha": "66f4914821c2df04b8d4f5036a44dea8333937cf", "filename": "gcc/tradcpp.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/gcc%2Ftradcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/gcc%2Ftradcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftradcpp.c?ref=fbfc11925b971a0d73b7253ba71bef3c32c9fb95", "patch": "@@ -4249,10 +4249,7 @@ fancy_abort (line, func)\n      int line;\n      const char *func;\n {\n-  if (!func)\n-    func = \"?\";\n-  \n-  fatal (\"Internal error in \\\"%s\\\", at tradcpp.c:%d\\n\\\n+  fatal (\"Internal error in %s, at tradcpp.c:%d\\n\\\n Please submit a full bug report.\\n\\\n See %s for instructions.\", func, line, GCCBUGURL);\n }"}, {"sha": "7a73968fbff80d508ac5d4e898765b5b25145d61", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fbfc11925b971a0d73b7253ba71bef3c32c9fb95", "patch": "@@ -281,31 +281,27 @@ struct tree_common\n #define TREE_CHECK(t, code) __extension__\t\t\t\t\\\n ({  const tree __t = t;\t\t\t\t\t\t\t\\\n     if (TREE_CODE(__t) != (code))\t\t\t\t\t\\\n-      tree_check_failed (__t, code, __FILE__,\t\t\t\t\\\n-\t\t\t __LINE__, __PRETTY_FUNCTION__);\t\t\\\n+      tree_check_failed (__t, code, __FILE__, __LINE__, __FUNCTION__);\t\\\n     __t; })\n #define TREE_CLASS_CHECK(t, class) __extension__\t\t\t\\\n ({  const tree __t = t;\t\t\t\t\t\t\t\\\n     if (TREE_CODE_CLASS(TREE_CODE(__t)) != (class))\t\t\t\\\n-      tree_class_check_failed (__t, class, __FILE__,\t\t\t\\\n-\t\t\t       __LINE__, __PRETTY_FUNCTION__);\t\t\\\n+      tree_class_check_failed (__t, class, __FILE__, __LINE__, __FUNCTION__); \\\n     __t; })\n \n /* These checks have to be special cased.  */\n #define CST_OR_CONSTRUCTOR_CHECK(t) __extension__\t\t\t\\\n ({  const tree __t = t;\t\t\t\t\t\t\t\\\n     enum tree_code __c = TREE_CODE(__t);\t\t\t\t\\\n     if (__c != CONSTRUCTOR && TREE_CODE_CLASS(__c) != 'c')\t\t\\\n-      tree_check_failed (__t, CONSTRUCTOR, __FILE__,\t\t\t\\\n-\t\t\t __LINE__, __PRETTY_FUNCTION__);\t\t\\\n+      tree_check_failed (__t, CONSTRUCTOR, __FILE__, __LINE__, __FUNCTION__); \\\n     __t; })\n #define EXPR_CHECK(t) __extension__\t\t\t\t\t\\\n ({  const tree __t = t;\t\t\t\t\t\t\t\\\n     char __c = TREE_CODE_CLASS(TREE_CODE(__t));\t\t\t\t\\\n     if (__c != 'r' && __c != 's' && __c != '<'\t\t\t\t\\\n \t&& __c != '1' && __c != '2' && __c != 'e')\t\t\t\\\n-      tree_class_check_failed(__t, 'e', __FILE__,\t\t\t\\\n-\t\t\t      __LINE__, __PRETTY_FUNCTION__);\t\t\\\n+      tree_class_check_failed(__t, 'e', __FILE__, __LINE__, __FUNCTION__); \\\n     __t; })\n \n extern void tree_check_failed PARAMS ((const tree, enum tree_code,\n@@ -2876,8 +2872,4 @@ extern void dwarf2out_end_epilogue\tPARAMS ((void));\n \n extern void fancy_abort PARAMS ((const char *, int, const char *))\n     ATTRIBUTE_NORETURN;\n-#if (GCC_VERSION >= 2007)\n-#define abort() fancy_abort (__FILE__, __LINE__, __PRETTY_FUNCTION__)\n-#else\n-#define abort() fancy_abort (__FILE__, __LINE__, 0)\n-#endif\n+#define abort() fancy_abort (__FILE__, __LINE__, __FUNCTION__)"}, {"sha": "1456ffebe456d4d9a380dff2785429212a5c6a5f", "filename": "gcc/varray.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/gcc%2Fvarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbfc11925b971a0d73b7253ba71bef3c32c9fb95/gcc%2Fvarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.h?ref=fbfc11925b971a0d73b7253ba71bef3c32c9fb95", "patch": "@@ -180,8 +180,7 @@ extern void varray_check_failed PARAMS ((varray_type, size_t,\n (*({ varray_type _va = VA;\t\t\t\t\t\\\n      size_t _n = N; \t\t\t\t\t\t\\\n      if (_n >= _va->num_elements)\t\t\t\t\\\n-       varray_check_failed (_va, _n, __FILE__, __LINE__,\t\\\n-\t\t\t    __PRETTY_FUNCTION__);\t\t\\\n+       varray_check_failed (_va, _n, __FILE__, __LINE__, __FUNCTION__);\t\\\n      &_va->data.T[_n]; }))\n #else\n #define VARRAY_CHECK(VA, N, T) ((VA)->data.T[N])"}]}