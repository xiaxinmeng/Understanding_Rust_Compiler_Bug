{"sha": "76a2c904dff6263556807f1a3e39521bea73f76d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZhMmM5MDRkZmY2MjYzNTU2ODA3ZjFhM2UzOTUyMWJlYTczZjc2ZA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-15T18:45:20Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-11-15T18:45:20Z"}, "message": "sse.md (vec_pack_trunc_v2df): Optimize sequence for AVX.\n\n\t* config/i386/sse.md (vec_pack_trunc_v2df): Optimize sequence for AVX.\n\t(vec_pack_sfix_trunc_v2df): Ditto.\n\t(vec_pack_sfix_v2df): Ditto.\n\t(vec_pack_sfix_trunc_v4df): Generate fix_truncv4dfv4si2 and\n\tavx_vec_concatv8si patterns.\n\t(vec_pack_sfix_v4df): Generate avx_cvtpd2dq256 and\n\tavx_vec_concatv8si patterns.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/avx-floor-sfix-2-vec.c: New test.\n\t* gcc.target/i386/avx-ceil-sfix-2-vec.c: Ditto.\n\t* gcc.target/i386/avx-rint-sfix-2-vec.c: Ditto.\n\t* gcc.target/i386/avx-round-sfix-2-vec.c: Ditto.\n\nFrom-SVN: r181387", "tree": {"sha": "bc667d2621e3aa7fddbda489e9c417b2eedc661a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc667d2621e3aa7fddbda489e9c417b2eedc661a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76a2c904dff6263556807f1a3e39521bea73f76d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76a2c904dff6263556807f1a3e39521bea73f76d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76a2c904dff6263556807f1a3e39521bea73f76d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76a2c904dff6263556807f1a3e39521bea73f76d/comments", "author": null, "committer": null, "parents": [{"sha": "6bbb00938cd2301cd89a67c57be6ecacf79f66aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bbb00938cd2301cd89a67c57be6ecacf79f66aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bbb00938cd2301cd89a67c57be6ecacf79f66aa"}], "stats": {"total": 524, "additions": 486, "deletions": 38}, "files": [{"sha": "c3abba44a4d12fb6cd604676fcf7da1241920f4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=76a2c904dff6263556807f1a3e39521bea73f76d", "patch": "@@ -1,3 +1,13 @@\n+2011-11-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (vec_pack_trunc_v2df): Optimize sequence for AVX.\n+\t(vec_pack_sfix_trunc_v2df): Ditto.\n+\t(vec_pack_sfix_v2df): Ditto.\n+\t(vec_pack_sfix_trunc_v4df): Generate fix_truncv4dfv4si2 and\n+\tavx_vec_concatv8si patterns.\n+\t(vec_pack_sfix_v4df): Generate avx_cvtpd2dq256 and\n+\tavx_vec_concatv8si patterns.\n+\n 2011-11-15  Torvald Riegel  <triegel@redhat.com>\n \n \t* c-parser.c (c_parser_transaction_expression): Require parentheses\n@@ -35,7 +45,7 @@\n \t(avr_register_target_pragmas): New function. Register address\n \tspace __pgm.\n \t(avr_cpu_cpp_builtins): Add built-in define __PGM.\n-\t\n+\n \t* config/avr/avr.c: Include \"c-family/c-common.h\".\n \t(TARGET_LEGITIMATE_ADDRESS_P): Remove define.\n \t(TARGET_LEGITIMIZE_ADDRESS): Remove define.\n@@ -71,7 +81,7 @@\n \tcause (progmem or address space) when code wants to write to flash.\n \t(avr_section_type_flags): Unset section flag SECTION_BSS for\n \tdata in progmem.\n-\t\n+\n \t* config/avr/predicates.md (nop_general_operand): New predicate.\n \t(nox_general_operand): New predicate.\n \t* config/avr/avr.md (LPM_REGNO): New define_constant.\n@@ -82,7 +92,8 @@\n \tcreated MEM.\n \t(movqi_insn, *movhi, *movpsi, *movsi, *movsf): Change predicate #1\n \tto nox_general_operand.\n-\t(ashrqi3, ashrhi3, ashrsi3): Change predicate #1 to nop_general_operand.\n+\t(ashrqi3, ashrhi3, ashrsi3): Change predicate #1 to\n+\tnop_general_operand.\n \t(ashlqi3, *ashlqi3, ashlhi3, ashlsi3): Ditto.\n \t(lshrqi3, *lshrqi3, lshrhi3, lshrsi3): Ditto.\n \t(split-lpmx): New split.\n@@ -137,7 +148,8 @@\n \n 2011-11-14  Richard Henderson  <rth@redhat.com>\n \n-\t* config/rs6000/rs6000.c (emit_load_locked): Assert the mode is handled.\n+\t* config/rs6000/rs6000.c (emit_load_locked): Assert the mode is\n+\thandled.\n \t(emit_store_conditional): Likewise.\n \t(rs6000_pre_atomic_barrier, rs6000_post_atomic_barrier): New.\n \t(rs6000_adjust_atomic_subword): New."}, {"sha": "b8e821de90e86cbc9078e9b744a631536656d67a", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 67, "deletions": 32, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=76a2c904dff6263556807f1a3e39521bea73f76d", "patch": "@@ -3038,14 +3038,25 @@\n    (match_operand:V2DF 2 \"nonimmediate_operand\" \"\")]\n   \"TARGET_SSE2\"\n {\n-  rtx r1, r2;\n+  rtx tmp0, tmp1;\n+\n+  if (TARGET_AVX && !TARGET_PREFER_AVX128)\n+    {\n+      tmp0 = gen_reg_rtx (V4DFmode);\n+      tmp1 = force_reg (V2DFmode, operands[1]);\n \n-  r1 = gen_reg_rtx (V4SFmode);\n-  r2 = gen_reg_rtx (V4SFmode);\n+      emit_insn (gen_avx_vec_concatv4df (tmp0, tmp1, operands[2]));\n+      emit_insn (gen_avx_cvtpd2ps256 (operands[0], tmp0));\n+    }\n+  else\n+    {\n+      tmp0 = gen_reg_rtx (V4SFmode);\n+      tmp1 = gen_reg_rtx (V4SFmode);\n \n-  emit_insn (gen_sse2_cvtpd2ps (r1, operands[1]));\n-  emit_insn (gen_sse2_cvtpd2ps (r2, operands[2]));\n-  emit_insn (gen_sse_movlhps (operands[0], r1, r2));\n+      emit_insn (gen_sse2_cvtpd2ps (tmp0, operands[1]));\n+      emit_insn (gen_sse2_cvtpd2ps (tmp1, operands[2]));\n+      emit_insn (gen_sse_movlhps (operands[0], tmp0, tmp1));\n+    }\n   DONE;\n })\n \n@@ -3057,12 +3068,12 @@\n {\n   rtx r1, r2;\n \n-  r1 = gen_reg_rtx (V8SImode);\n-  r2 = gen_reg_rtx (V8SImode);\n+  r1 = gen_reg_rtx (V4SImode);\n+  r2 = gen_reg_rtx (V4SImode);\n \n-  emit_insn (gen_avx_cvttpd2dq256_2 (r1, operands[1]));\n-  emit_insn (gen_avx_cvttpd2dq256_2 (r2, operands[2]));\n-  emit_insn (gen_avx_vperm2f128v8si3 (operands[0], r1, r2, GEN_INT (0x20)));\n+  emit_insn (gen_fix_truncv4dfv4si2 (r1, operands[1]));\n+  emit_insn (gen_fix_truncv4dfv4si2 (r2, operands[2]));\n+  emit_insn (gen_avx_vec_concatv8si (operands[0], r1, r2));\n   DONE;\n })\n \n@@ -3072,16 +3083,28 @@\n    (match_operand:V2DF 2 \"nonimmediate_operand\" \"\")]\n   \"TARGET_SSE2\"\n {\n-  rtx r1, r2;\n+  rtx tmp0, tmp1;\n \n-  r1 = gen_reg_rtx (V4SImode);\n-  r2 = gen_reg_rtx (V4SImode);\n+  if (TARGET_AVX && !TARGET_PREFER_AVX128)\n+    {\n+      tmp0 = gen_reg_rtx (V4DFmode);\n+      tmp1 = force_reg (V2DFmode, operands[1]);\n \n-  emit_insn (gen_sse2_cvttpd2dq (r1, operands[1]));\n-  emit_insn (gen_sse2_cvttpd2dq (r2, operands[2]));\n-  emit_insn (gen_vec_interleave_lowv2di (gen_lowpart (V2DImode, operands[0]),\n-\t\t\t\t\t gen_lowpart (V2DImode, r1),\n-\t\t\t\t\t gen_lowpart (V2DImode, r2)));\n+      emit_insn (gen_avx_vec_concatv4df (tmp0, tmp1, operands[2]));\n+      emit_insn (gen_fix_truncv4dfv4si2 (operands[0], tmp0));\n+    }\n+  else\n+    {\n+      tmp0 = gen_reg_rtx (V4SImode);\n+      tmp1 = gen_reg_rtx (V4SImode);\n+\n+      emit_insn (gen_sse2_cvttpd2dq (tmp0, operands[1]));\n+      emit_insn (gen_sse2_cvttpd2dq (tmp1, operands[2]));\n+      emit_insn\n+       (gen_vec_interleave_lowv2di (gen_lowpart (V2DImode, operands[0]),\n+\t\t\t\t    gen_lowpart (V2DImode, tmp0),\n+\t\t\t\t    gen_lowpart (V2DImode, tmp1)));\n+    }\n   DONE;\n })\n \n@@ -3126,12 +3149,12 @@\n {\n   rtx r1, r2;\n \n-  r1 = gen_reg_rtx (V8SImode);\n-  r2 = gen_reg_rtx (V8SImode);\n+  r1 = gen_reg_rtx (V4SImode);\n+  r2 = gen_reg_rtx (V4SImode);\n \n-  emit_insn (gen_avx_cvtpd2dq256_2 (r1, operands[1]));\n-  emit_insn (gen_avx_cvtpd2dq256_2 (r2, operands[2]));\n-  emit_insn (gen_avx_vperm2f128v8si3 (operands[0], r1, r2, GEN_INT (0x20)));\n+  emit_insn (gen_avx_cvtpd2dq256 (r1, operands[1]));\n+  emit_insn (gen_avx_cvtpd2dq256 (r2, operands[2]));\n+  emit_insn (gen_avx_vec_concatv8si (operands[0], r1, r2));\n   DONE;\n })\n \n@@ -3141,16 +3164,28 @@\n    (match_operand:V2DF 2 \"nonimmediate_operand\" \"\")]\n   \"TARGET_SSE2\"\n {\n-  rtx r1, r2;\n+  rtx tmp0, tmp1;\n \n-  r1 = gen_reg_rtx (V4SImode);\n-  r2 = gen_reg_rtx (V4SImode);\n+  if (TARGET_AVX && !TARGET_PREFER_AVX128)\n+    {\n+      tmp0 = gen_reg_rtx (V4DFmode);\n+      tmp1 = force_reg (V2DFmode, operands[1]);\n \n-  emit_insn (gen_sse2_cvtpd2dq (r1, operands[1]));\n-  emit_insn (gen_sse2_cvtpd2dq (r2, operands[2]));\n-  emit_insn (gen_vec_interleave_lowv2di (gen_lowpart (V2DImode, operands[0]),\n-\t\t\t\t\t gen_lowpart (V2DImode, r1),\n-\t\t\t\t\t gen_lowpart (V2DImode, r2)));\n+      emit_insn (gen_avx_vec_concatv4df (tmp0, tmp1, operands[2]));\n+      emit_insn (gen_avx_cvtpd2dq256 (operands[0], tmp0));\n+    }\n+  else\n+    {\n+      tmp0 = gen_reg_rtx (V4SImode);\n+      tmp1 = gen_reg_rtx (V4SImode);\n+\n+      emit_insn (gen_sse2_cvtpd2dq (tmp0, operands[1]));\n+      emit_insn (gen_sse2_cvtpd2dq (tmp1, operands[2]));\n+      emit_insn\n+       (gen_vec_interleave_lowv2di (gen_lowpart (V2DImode, operands[0]),\n+\t\t\t\t    gen_lowpart (V2DImode, tmp0),\n+\t\t\t\t    gen_lowpart (V2DImode, tmp1)));\n+    }\n   DONE;\n })\n "}, {"sha": "876d91897cbb13171bd7ccca217091c5b1d35938", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=76a2c904dff6263556807f1a3e39521bea73f76d", "patch": "@@ -1,3 +1,10 @@\n+2011-11-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/avx-floor-sfix-2-vec.c: New test.\n+\t* gcc.target/i386/avx-ceil-sfix-2-vec.c: Ditto.\n+\t* gcc.target/i386/avx-rint-sfix-2-vec.c: Ditto.\n+\t* gcc.target/i386/avx-round-sfix-2-vec.c: Ditto.\n+\n 2011-11-15  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* lib/gcc-simulate-thread.exp (simulate-thread): Do not run on\n@@ -16,10 +23,10 @@\n \t* gcc.target/i386/avx-recip-vec.c: New test.\n \t* gcc.target/i386/avx-lrintf-vec.c: Ditto.\n \t* gcc.target/i386/avx-lrint-vec.c: Ditto.\n-\t* gcc.target/i386/avx-ceilf-vec.c: Include sse4_1-ceilf-vec.c.\n-\t* gcc.target/i386/avx-ceil-vec.c: Include sse4_1-ceil-vec.c.\n \t* gcc.target/i386/avx-floorf-vec.c: Include sse4_1-floorf-vec.c.\n \t* gcc.target/i386/avx-floor-vec.c: Include sse4_1-floor-vec.c.\n+\t* gcc.target/i386/avx-ceilf-vec.c: Include sse4_1-ceilf-vec.c.\n+\t* gcc.target/i386/avx-ceil-vec.c: Include sse4_1-ceil-vec.c.\n \t* gcc.target/i386/avx-rintf-vec.c: Include sse4_1-rintf-vec.c.\n \t* gcc.target/i386/avx-rint-vec.c: Include sse4_1-rint-vec.c.\n \t* gcc.target/i386/avx-roundf-vec.c: Include sse4_1-roundf-vec.c.\n@@ -45,6 +52,10 @@\n \t* gcc.target/i386/sse4_1-ceilf-sfix-vec.c: Ditto.\n \t* gcc.target/i386/avx-ceil-sfix-vec.c: Ditto.\n \t* gcc.target/i386/avx-ceilf-sfix-vec.c: Ditto.\n+\t* gcc.target/i386/sse4_1-rint-sfix-vec.c: Ditto.\n+\t* gcc.target/i386/sse4_1-rintf-sfix-vec.c: Ditto.\n+\t* gcc.target/i386/avx-rint-sfix-vec.c: Ditto.\n+\t* gcc.target/i386/avx-rintf-sfix-vec.c: Ditto.\n \t* gcc.target/i386/sse4_1-round-sfix-vec.c: Ditto.\n \t* gcc.target/i386/sse4_1-roundf-sfix-vec.c: Ditto.\n \t* gcc.target/i386/avx-round-sfix-vec.c: Ditto."}, {"sha": "bf48b80717bb3787f10b43b597d6eda3db75220a", "filename": "gcc/testsuite/gcc.target/i386/avx-ceil-sfix-2-vec.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceil-sfix-2-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceil-sfix-2-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-ceil-sfix-2-vec.c?ref=76a2c904dff6263556807f1a3e39521bea73f76d", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <math.h>\n+\n+extern double ceil (double);\n+\n+#define NUM 4\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+TEST (void)\n+{\n+  double a[NUM];\n+  int r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = (int) ceil (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != (int) ceil (a[i]))\n+      abort();\n+}"}, {"sha": "275199cf8f086bc67eb7cc7e4d211922c33cbf3c", "filename": "gcc/testsuite/gcc.target/i386/avx-floor-sfix-2-vec.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floor-sfix-2-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floor-sfix-2-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-floor-sfix-2-vec.c?ref=76a2c904dff6263556807f1a3e39521bea73f76d", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <math.h>\n+\n+extern double floor (double);\n+\n+#define NUM 4\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+TEST (void)\n+{\n+  double a[NUM];\n+  int r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = (int) floor (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != (int) floor (a[i]))\n+      abort();\n+}"}, {"sha": "9f273af5cbb1bd23216c650b27b99a33e13ba97c", "filename": "gcc/testsuite/gcc.target/i386/avx-rint-sfix-2-vec.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rint-sfix-2-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rint-sfix-2-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rint-sfix-2-vec.c?ref=76a2c904dff6263556807f1a3e39521bea73f76d", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <math.h>\n+\n+extern double rint (double);\n+\n+#define NUM 4\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+TEST (void)\n+{\n+  double a[NUM];\n+  int r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = (int) rint (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != (int) rint (a[i]))\n+      abort();\n+}"}, {"sha": "824f2eb7d528a1e8ebdf511e8d1fcbd7bec24af0", "filename": "gcc/testsuite/gcc.target/i386/avx-rint-sfix-vec.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rint-sfix-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rint-sfix-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rint-sfix-vec.c?ref=76a2c904dff6263556807f1a3e39521bea73f76d", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-rint-sfix-vec.c\""}, {"sha": "e5ddf790d75fd5f99c8bb77506c2d15254f22fcb", "filename": "gcc/testsuite/gcc.target/i386/avx-rintf-sfix-vec.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rintf-sfix-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rintf-sfix-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-rintf-sfix-vec.c?ref=76a2c904dff6263556807f1a3e39521bea73f76d", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-rintf-sfix-vec.c\""}, {"sha": "ddb46d9252a4176d2178b8ffa87eef57983d9a06", "filename": "gcc/testsuite/gcc.target/i386/avx-round-sfix-2-vec.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-round-sfix-2-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-round-sfix-2-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-round-sfix-2-vec.c?ref=76a2c904dff6263556807f1a3e39521bea73f76d", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"avx-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST avx_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <math.h>\n+\n+extern double round (double);\n+\n+#define NUM 4\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+TEST (void)\n+{\n+  double a[NUM];\n+  int r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = (int) round (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != (int) round (a[i]))\n+      abort();\n+}"}, {"sha": "d9c2fbf2d37da67eb87fae1c65338f872efb86ec", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-rint-sfix-vec.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rint-sfix-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rint-sfix-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rint-sfix-vec.c?ref=76a2c904dff6263556807f1a3e39521bea73f76d", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse4.1\" } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <math.h>\n+\n+extern double rint (double);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (double *src)\n+{\n+  int i, sign = 1;\n+  double f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+TEST (void)\n+{\n+  double a[NUM];\n+  int r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = (int) rint (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != (int) rint (a[i]))\n+      abort();\n+}"}, {"sha": "1d25f7669d53973cad328a2dc8fc756e1d867438", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-rintf-sfix-vec.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rintf-sfix-vec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a2c904dff6263556807f1a3e39521bea73f76d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rintf-sfix-vec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-rintf-sfix-vec.c?ref=76a2c904dff6263556807f1a3e39521bea73f76d", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ffast-math -ftree-vectorize -msse4.1\" } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-skip-if \"no M_PI\" { vxworks_kernel } } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <math.h>\n+\n+extern float rintf (float);\n+\n+#define NUM 64\n+\n+static void\n+__attribute__((__target__(\"fpmath=sse\")))\n+init_src (float *src)\n+{\n+  int i, sign = 1;\n+  float f = rand ();\n+\n+  for (i = 0; i < NUM; i++)\n+    {\n+      src[i] = (i + 1) * f * M_PI * sign;\n+      if (i < (NUM / 2))\n+\t{\n+          if ((i % 6) == 0)\n+\t    f = f * src[i];\n+        }\n+      else if (i == (NUM / 2))\n+\tf = rand ();\n+      else if ((i % 6) == 0)\n+\tf = 1 / (f * (i + 1) * src[i] * M_PI * sign);\n+      sign = -sign;\n+    }\n+}\n+\n+static void\n+__attribute__((__target__(\"fpmath=387\")))\n+TEST (void)\n+{\n+  float a[NUM];\n+  int r[NUM];\n+  int i;\n+\n+  init_src (a);\n+\n+  for (i = 0; i < NUM; i++)\n+    r[i] = (int) rintf (a[i]);\n+\n+  /* check results:  */\n+  for (i = 0; i < NUM; i++)\n+    if (r[i] != (int) rintf (a[i]))\n+      abort();\n+}"}]}