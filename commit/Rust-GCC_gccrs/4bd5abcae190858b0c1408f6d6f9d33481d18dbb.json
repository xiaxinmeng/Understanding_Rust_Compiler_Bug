{"sha": "4bd5abcae190858b0c1408f6d6f9d33481d18dbb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJkNWFiY2FlMTkwODU4YjBjMTQwOGY2ZDZmOWQzMzQ4MWQxOGRiYg==", "commit": {"author": {"name": "Sergey Melnikov", "email": "sergey.melnikov@intel.com", "date": "2012-07-25T10:33:20Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2012-07-25T10:33:20Z"}, "message": "i386.md (stack_protect_set): Disable the pattern for Android since Android libc (bionic) does not provide...\n\n2012-07-25 Sergey Melnikov <sergey.melnikov@intel.com>\n\n        * config/i386/i386.md (stack_protect_set): Disable the pattern\n        for Android since Android libc (bionic) does not provide random\n        value for stack protection guard at gs:0x14. Guard value\n        will be provided from external symbol (default implementation).\n        (stack_protect_set_<mode>): Likewise.\n        (stack_protect_test): Likewise.\n        (stack_protect_test_<mode>): Likewise.\n        * gcc/defaults.h: Define macro TARGET_HAS_BIONIC to 0 - target does\n        not have Bionic by default\n        * config/linux.h: Redefine macro TARGET_HAS_BIONIC to (OPTION_BIONIC)\n        Macro OPTION_BIONIC is defined in this file and provides Bionic\n        accessibility status\n\nFrom-SVN: r189840", "tree": {"sha": "216b626200bf26c09b3d85f9d9956d1ab5236774", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/216b626200bf26c09b3d85f9d9956d1ab5236774"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bd5abcae190858b0c1408f6d6f9d33481d18dbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd5abcae190858b0c1408f6d6f9d33481d18dbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bd5abcae190858b0c1408f6d6f9d33481d18dbb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bd5abcae190858b0c1408f6d6f9d33481d18dbb/comments", "author": null, "committer": null, "parents": [{"sha": "3e31cf28a45a40680b94f2d9775f854a466bf207", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e31cf28a45a40680b94f2d9775f854a466bf207", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e31cf28a45a40680b94f2d9775f854a466bf207"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "60314f5f6bf27fb59d31ce0dd43cedff211fd152", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd5abcae190858b0c1408f6d6f9d33481d18dbb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd5abcae190858b0c1408f6d6f9d33481d18dbb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4bd5abcae190858b0c1408f6d6f9d33481d18dbb", "patch": "@@ -1,3 +1,18 @@\n+2012-07-25 Sergey Melnikov <sergey.melnikov@intel.com>\n+\n+\t* config/i386/i386.md (stack_protect_set): Disable the pattern\n+\tfor Android since Android libc (bionic) does not provide random\n+\tvalue for stack protection guard at gs:0x14. Guard value\n+\twill be provided from external symbol (default implementation).\n+\t(stack_protect_set_<mode>): Likewise.\n+\t(stack_protect_test): Likewise.\n+\t(stack_protect_test_<mode>): Likewise.\n+\t* gcc/defaults.h: Define macro TARGET_HAS_BIONIC to 0 - target does\n+\tnot have Bionic by default\n+\t* config/linux.h: Redefine macro TARGET_HAS_BIONIC to (OPTION_BIONIC)\n+\tMacro OPTION_BIONIC is defined in this file and provides Bionic\n+\taccessibility status\n+\n 2012-07-25  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* gimple-pretty-print.c (gimple_dump_bb_buff): Call pp_flush."}, {"sha": "6a446a31ca089c0d5fd3b3e4ec1aba30a8c0d175", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd5abcae190858b0c1408f6d6f9d33481d18dbb/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd5abcae190858b0c1408f6d6f9d33481d18dbb/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=4bd5abcae190858b0c1408f6d6f9d33481d18dbb", "patch": "@@ -17677,7 +17677,7 @@\n (define_expand \"stack_protect_set\"\n   [(match_operand 0 \"memory_operand\")\n    (match_operand 1 \"memory_operand\")]\n-  \"\"\n+  \"!TARGET_HAS_BIONIC\"\n {\n   rtx (*insn)(rtx, rtx);\n \n@@ -17702,7 +17702,7 @@\n \t\t    UNSPEC_SP_SET))\n    (set (match_scratch:PTR 2 \"=&r\") (const_int 0))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"\"\n+  \"!TARGET_HAS_BIONIC\"\n   \"mov{<imodesuffix>}\\t{%1, %2|%2, %1}\\;mov{<imodesuffix>}\\t{%2, %0|%0, %2}\\;xor{l}\\t%k2, %k2\"\n   [(set_attr \"type\" \"multi\")])\n \n@@ -17720,7 +17720,7 @@\n   [(match_operand 0 \"memory_operand\")\n    (match_operand 1 \"memory_operand\")\n    (match_operand 2)]\n-  \"\"\n+  \"!TARGET_HAS_BIONIC\"\n {\n   rtx flags = gen_rtx_REG (CCZmode, FLAGS_REG);\n \n@@ -17750,7 +17750,7 @@\n \t\t     (match_operand:PTR 2 \"memory_operand\" \"m\")]\n \t\t    UNSPEC_SP_TEST))\n    (clobber (match_scratch:PTR 3 \"=&r\"))]\n-  \"\"\n+  \"!TARGET_HAS_BIONIC\"\n   \"mov{<imodesuffix>}\\t{%1, %3|%3, %1}\\;xor{<imodesuffix>}\\t{%2, %3|%3, %2}\"\n   [(set_attr \"type\" \"multi\")])\n "}, {"sha": "fb459e68028bb05dd073638b773d96bdc3f3521b", "filename": "gcc/config/linux.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd5abcae190858b0c1408f6d6f9d33481d18dbb/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd5abcae190858b0c1408f6d6f9d33481d18dbb/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=4bd5abcae190858b0c1408f6d6f9d33481d18dbb", "patch": "@@ -104,3 +104,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n /* Whether we have sincos that follows the GNU extension.  */\n #undef TARGET_HAS_SINCOS\n #define TARGET_HAS_SINCOS (OPTION_GLIBC || OPTION_BIONIC)\n+\n+/* Whether we have Bionic libc runtime */\n+#undef TARGET_HAS_BIONIC\n+#define TARGET_HAS_BIONIC (OPTION_BIONIC)"}, {"sha": "316a1c31928fc8aa94ef6b5faf1d4438bce97aff", "filename": "gcc/defaults.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bd5abcae190858b0c1408f6d6f9d33481d18dbb/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bd5abcae190858b0c1408f6d6f9d33481d18dbb/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=4bd5abcae190858b0c1408f6d6f9d33481d18dbb", "patch": "@@ -1054,6 +1054,11 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_HAS_SINCOS 0\n #endif\n \n+/* Determin whether the target runtime library is Bionic */\n+#ifndef TARGET_HAS_BIONIC\n+#define TARGET_HAS_BIONIC 0\n+#endif\n+\n /* Indicate that CLZ and CTZ are undefined at zero.  */\n #ifndef CLZ_DEFINED_VALUE_AT_ZERO\n #define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE)  0"}]}