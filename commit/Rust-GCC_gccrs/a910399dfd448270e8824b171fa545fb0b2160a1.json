{"sha": "a910399dfd448270e8824b171fa545fb0b2160a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkxMDM5OWRmZDQ0ODI3MGU4ODI0YjE3MWZhNTQ1ZmIwYjIxNjBhMQ==", "commit": {"author": {"name": "Lawrence Crowl", "email": "crowl@google.com", "date": "2012-06-19T01:30:31Z"}, "committer": {"name": "Lawrence Crowl", "email": "crowl@gcc.gnu.org", "date": "2012-06-19T01:30:31Z"}, "message": "The intent of the phases was to have a high-level but mutually exclusive accounting of compile time.\n\nThe intent of the phases was to have a high-level but mutually exclusive\naccounting of compile time.  We want to track compile time in a way that\ntells us which conceptual phases are taking the most time.  That intent\nis not currently satisfied.  This patch restores that intent.\n\nAdd code to verify that the sum of the phase times is less than the total\ntime, to detect when phases are overlapped.  A slight amount of leeway is\nrequired due to time jitters.  This verification is done as the last step\nin printing timevars so that any timevar information is not lost.\n\nRename the phases to be clearer about what they measure, so that they\nare less likely to be modified to be overlapping.  The primary example\nis to change TV_PHASE_GENERATE to TV_PHASE_LATE_ASM, meaning late work\non the assembly.  This name change avoids confusion n moving the timevar\nstart call after the call to lang_hooks.decls.final_write_globals, which\nprevents overlapping phases.\n\nEach implementation of lang_hooks.decls.final_write_globals, is responsible\nfor starting and stopping its own phases.  Each implementation currently has\na first phase of TV_PHASE_DEFERRED for front-end work deferred until after\nparsing is complete.  The second phase has been renamed from TV_PHASE_CGRAPH\nto TV_PHASE_OPT_GEN, to better reflect its use as the main optimization\nand generation phase.  This phase accounts for 70%-80% of compilation time\nduring bootstrap.  The third phase is TV_PHASE_DBGINFO, except in cp/decl2.c,\nwhere it is TV_PHASE_CHECK_DBGINFO because cc1plus mixes checking in with\ndebug info generation.  In langhooks.c, write_global_declarations was\nusing TV_PHASE_CHECK_DBGINFO, but it was doing no checking.  So, it now\nuses TV_PHASE_DBGINFO.\n\nThe changes to LTO are significant.  First, initialization now uses\nTV_PHASE_SETUP.  Reading files now uses TV_PHASE_STREAM_IN.  Writing files\nnow uses TV_PHASE_STREAM_OUT.  The remaining phase is TV_PHASE_OPT_GEN\n(formerly TV_PHASE_CGRAPH).  Finally, because LTO is treated as a front\nend, TV_PHASE_PARSING and TV_PARSE_GLOBAL active around it.  It is not\nparsing, and so those timers should not be active.  Rather than make all\nfront ends manage them, we turn them off as the first thing in LTO and turn\nthem back on as the last thing.\n\nTested on x86_64.\n\n\nIndex: gcc/ChangeLog\n\n2012-06-18  Lawrence Crowl  <crowl@google.com>\n\n\t* timevar.def (TV_PHASE_GENERATE): Rename to TV_PHASE_LATE_ASM.\n\t(TV_PHASE_CGRAPH): Rename to TV_PHASE_OPT_GEN.\n\t(TV_PHASE_STREAM_IN): New.\n\t(TV_PHASE_STREAM_OUT): New.\n\t* timevar.c (validate_phases): New.\n\t(timevar_print): Call validate_phases.\n\t* c-decl.c (c_write_global_declarations): Rename use of TV_PHASE_CGRAPH\n\tto TV_PHASE_OPT_GEN.\n\t* langhooks.c (write_global_declarations): Rename use of\n\tTV_PHASE_CGRAPH to TV_PHASE_OPT_GEN.  Use TV_PHASE_DBGINFO instead of\n\tTV_PHASE_CHECK_DBGINFO.\n\t* toplev.c (compile_file): Rename use of TV_PHASE_GENERATE to\n\tTV_PHASE_LATE_ASM.  Move start of TV_PHASE_LATE_ASM to after call to\n\tlang_hooks.decls.final_write_globals.\n\nIndex: gcc/cp/ChangeLog\n\n2012-06-18  Lawrence Crowl  <crowl@google.com>\n\n\t* decl2.c (cp_write_global_declarations): Rename use of TV_PHASE_CGRAPH\n\tto TV_PHASE_OPT_GEN.\n\nIndex: gcc/lto/ChangeLog\n\n2012-06-18  Lawrence Crowl  <crowl@google.com>\n\n        * lto.c (do_whole_program_analysis):  Rename use of TV_PHASE_CGRAPH to\n\tTV_PHASE_OPT_GEN.  Use new timevar TV_PHASE_STREAM_OUT around the call\n\tto lto_wpa_write_files.\n\t(lto_main):  Rename use of TV_PHASE_CGRAPH to TV_PHASE_OPT_GEN.  Move\n\tstart of TV_PHASE_OPT_GEN to include call to materialize_cgraph.  Use\n\tTV_PHASE_SETUP for the call to lto_init.  Use new timevar\n\tTV_PHASE_STREAM_IN around the call to read_cgraph_and_symbols.\n\tTurn TV_PHASE_PARSING off then back on again, because LTO is pretending\n\tto be a front end, but is not one.\n\nFrom-SVN: r188765", "tree": {"sha": "ed63d482b0f935843a41c0fe609e366f30e528ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed63d482b0f935843a41c0fe609e366f30e528ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a910399dfd448270e8824b171fa545fb0b2160a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a910399dfd448270e8824b171fa545fb0b2160a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a910399dfd448270e8824b171fa545fb0b2160a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a910399dfd448270e8824b171fa545fb0b2160a1/comments", "author": null, "committer": null, "parents": [{"sha": "1cc7e0d0c369120a75f323bb829679fa6e36c14d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc7e0d0c369120a75f323bb829679fa6e36c14d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cc7e0d0c369120a75f323bb829679fa6e36c14d"}], "stats": {"total": 158, "additions": 136, "deletions": 22}, "files": [{"sha": "0055ebf90b171937f06bfabca985466f30434e3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a910399dfd448270e8824b171fa545fb0b2160a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a910399dfd448270e8824b171fa545fb0b2160a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a910399dfd448270e8824b171fa545fb0b2160a1", "patch": "@@ -1,3 +1,20 @@\n+2012-06-18  Lawrence Crowl  <crowl@google.com>\n+\n+\t* timevar.def (TV_PHASE_GENERATE): Rename to TV_PHASE_LATE_ASM.\n+\t(TV_PHASE_CGRAPH): Rename to TV_PHASE_OPT_GEN.\n+\t(TV_PHASE_STREAM_IN): New.\n+\t(TV_PHASE_STREAM_OUT): New.\n+\t* timevar.c (validate_phases): New.\n+\t(timevar_print): Call validate_phases.\n+\t* c-decl.c (c_write_global_declarations): Rename use of TV_PHASE_CGRAPH\n+\tto TV_PHASE_OPT_GEN.\n+\t* langhooks.c (write_global_declarations): Rename use of\n+\tTV_PHASE_CGRAPH to TV_PHASE_OPT_GEN.  Use TV_PHASE_DBGINFO instead of\n+\tTV_PHASE_CHECK_DBGINFO.\n+\t* toplev.c (compile_file): Rename use of TV_PHASE_GENERATE to\n+\tTV_PHASE_LATE_ASM.  Move start of TV_PHASE_LATE_ASM to after call to\n+\tlang_hooks.decls.final_write_globals.\n+\n 2012-06-18  David Edelshn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/aix52.h (TARGET_EXTRA_BUILTINS): Define as 0."}, {"sha": "9622b1207d46a0369af26349b6988a68fb97409d", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a910399dfd448270e8824b171fa545fb0b2160a1/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a910399dfd448270e8824b171fa545fb0b2160a1/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=a910399dfd448270e8824b171fa545fb0b2160a1", "patch": "@@ -10101,13 +10101,13 @@ c_write_global_declarations (void)\n   c_write_global_declarations_1 (BLOCK_VARS (ext_block));\n \n   timevar_stop (TV_PHASE_DEFERRED);\n-  timevar_start (TV_PHASE_CGRAPH);\n+  timevar_start (TV_PHASE_OPT_GEN);\n \n   /* We're done parsing; proceed to optimize and emit assembly.\n      FIXME: shouldn't be the front end's responsibility to call this.  */\n   finalize_compilation_unit ();\n \n-  timevar_stop (TV_PHASE_CGRAPH);\n+  timevar_stop (TV_PHASE_OPT_GEN);\n   timevar_start (TV_PHASE_DBGINFO);\n \n   /* After cgraph has had a chance to emit everything that's going to"}, {"sha": "b45077525cc5981b41f9b918e6ae4cbb6be500cf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a910399dfd448270e8824b171fa545fb0b2160a1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a910399dfd448270e8824b171fa545fb0b2160a1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a910399dfd448270e8824b171fa545fb0b2160a1", "patch": "@@ -1,3 +1,8 @@\n+2012-06-18  Lawrence Crowl  <crowl@google.com>\n+\n+\t* decl2.c (cp_write_global_declarations): Rename use of TV_PHASE_CGRAPH\n+\tto TV_PHASE_OPT_GEN.\n+\n 2012-06-18  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* decl.c (finish_function): Remove code conditional on VMS_TARGET."}, {"sha": "d8c72606f2ec2a3283ff13dde0e41df59d7ff958", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a910399dfd448270e8824b171fa545fb0b2160a1/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a910399dfd448270e8824b171fa545fb0b2160a1/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=a910399dfd448270e8824b171fa545fb0b2160a1", "patch": "@@ -4019,11 +4019,11 @@ cp_write_global_declarations (void)\n   candidates = collect_candidates_for_java_method_aliases ();\n \n   timevar_stop (TV_PHASE_DEFERRED);\n-  timevar_start (TV_PHASE_CGRAPH);\n+  timevar_start (TV_PHASE_OPT_GEN);\n \n   finalize_compilation_unit ();\n \n-  timevar_stop (TV_PHASE_CGRAPH);\n+  timevar_stop (TV_PHASE_OPT_GEN);\n   timevar_start (TV_PHASE_CHECK_DBGINFO);\n \n   /* Now, issue warnings about static, but not defined, functions,"}, {"sha": "a34733f13b30ab4bc3ef0b022a3b62f5fa4c5db0", "filename": "gcc/langhooks.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a910399dfd448270e8824b171fa545fb0b2160a1/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a910399dfd448270e8824b171fa545fb0b2160a1/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=a910399dfd448270e8824b171fa545fb0b2160a1", "patch": "@@ -317,15 +317,15 @@ write_global_declarations (void)\n   check_global_declarations (vec, len);\n   timevar_stop (TV_PHASE_DEFERRED);\n \n-  timevar_start (TV_PHASE_CGRAPH);\n+  timevar_start (TV_PHASE_OPT_GEN);\n   /* This lang hook is dual-purposed, and also finalizes the\n      compilation unit.  */\n   finalize_compilation_unit ();\n-  timevar_stop (TV_PHASE_CGRAPH);\n+  timevar_stop (TV_PHASE_OPT_GEN);\n \n-  timevar_start (TV_PHASE_CHECK_DBGINFO);\n+  timevar_start (TV_PHASE_DBGINFO);\n   emit_debug_global_declarations (vec, len);\n-  timevar_stop (TV_PHASE_CHECK_DBGINFO);\n+  timevar_stop (TV_PHASE_DBGINFO);\n \n   /* Clean up.  */\n   free (vec);"}, {"sha": "3f025dc83630d35911d634eea4236388f4d62f2f", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a910399dfd448270e8824b171fa545fb0b2160a1/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a910399dfd448270e8824b171fa545fb0b2160a1/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=a910399dfd448270e8824b171fa545fb0b2160a1", "patch": "@@ -1,3 +1,15 @@\n+2012-06-18  Lawrence Crowl  <crowl@google.com>\n+\n+        * lto.c (do_whole_program_analysis):  Rename use of TV_PHASE_CGRAPH to\n+\tTV_PHASE_OPT_GEN.  Use new timevar TV_PHASE_STREAM_OUT around the call\n+\tto lto_wpa_write_files.\n+\t(lto_main):  Rename use of TV_PHASE_CGRAPH to TV_PHASE_OPT_GEN.  Move\n+\tstart of TV_PHASE_OPT_GEN to include call to materialize_cgraph.  Use\n+\tTV_PHASE_SETUP for the call to lto_init.  Use new timevar\n+\tTV_PHASE_STREAM_IN around the call to read_cgraph_and_symbols.\n+\tTurn TV_PHASE_PARSING off then back on again, because LTO is pretending\n+\tto be a front end, but is not one.\n+\n 2012-05-18  Jan Hubicka  <jh@suse.cz>\n \n \t* lto.c (lto_materialize_constructors_and_inits): Remove."}, {"sha": "df5c3df2ef3e4001677fed7af017cf686cd0b133", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a910399dfd448270e8824b171fa545fb0b2160a1/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a910399dfd448270e8824b171fa545fb0b2160a1/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=a910399dfd448270e8824b171fa545fb0b2160a1", "patch": "@@ -1935,7 +1935,8 @@ materialize_cgraph (void)\n static void\n do_whole_program_analysis (void)\n {\n-  timevar_start (TV_PHASE_CGRAPH);\n+  timevar_start (TV_PHASE_OPT_GEN);\n+\n   /* Note that since we are in WPA mode, materialize_cgraph will not\n      actually read in all the function bodies.  It only materializes\n      the decls and cgraph nodes so that analysis can be performed.  */\n@@ -1979,23 +1980,27 @@ do_whole_program_analysis (void)\n   else\n     lto_balanced_map ();\n \n+  timevar_stop (TV_PHASE_OPT_GEN);\n+  timevar_start (TV_PHASE_STREAM_OUT);\n+\n   if (!quiet_flag)\n     {\n       fprintf (stderr, \"\\nStreaming out\");\n       fflush (stderr);\n     }\n   lto_wpa_write_files ();\n-  ggc_collect ();\n   if (!quiet_flag)\n     fprintf (stderr, \"\\n\");\n \n+  timevar_stop (TV_PHASE_STREAM_OUT);\n+\n+  ggc_collect ();\n   if (post_ipa_mem_report)\n     {\n       fprintf (stderr, \"Memory consumption after IPA\\n\");\n       dump_memory_report (false);\n     }\n \n-  timevar_stop (TV_PHASE_CGRAPH);\n   /* Show the LTO report before launching LTRANS.  */\n   if (flag_lto_report)\n     print_lto_report ();\n@@ -2075,13 +2080,28 @@ lto_init (void)\n void\n lto_main (void)\n {\n+  /* LTO is called as a front end, even though it is not a front end.\n+     Because it is called as a front end, TV_PHASE_PARSING and\n+     TV_PARSE_GLOBAL are active, and we need to turn them off while\n+     doing LTO.  Later we turn them back on so they are active up in\n+     toplev.c.  */\n+  timevar_pop (TV_PARSE_GLOBAL);\n+  timevar_stop (TV_PHASE_PARSING);\n+\n+  timevar_start (TV_PHASE_SETUP);\n+\n   /* Initialize the LTO front end.  */\n   lto_init ();\n \n+  timevar_stop (TV_PHASE_SETUP);\n+  timevar_start (TV_PHASE_STREAM_IN);\n+\n   /* Read all the symbols and call graph from all the files in the\n      command line.  */\n   read_cgraph_and_symbols (num_in_fnames, in_fnames);\n \n+  timevar_stop (TV_PHASE_STREAM_IN);\n+\n   if (!seen_error ())\n     {\n       /* If WPA is enabled analyze the whole call graph and create an\n@@ -2091,13 +2111,15 @@ lto_main (void)\n \tdo_whole_program_analysis ();\n       else\n \t{\n+\t  timevar_start (TV_PHASE_OPT_GEN);\n+\n \t  materialize_cgraph ();\n \n \t  /* Let the middle end know that we have read and merged all of\n \t     the input files.  */ \n-\t  timevar_start (TV_PHASE_CGRAPH);\n \t  compile ();\n-\t  timevar_stop (TV_PHASE_CGRAPH);\n+\n+\t  timevar_stop (TV_PHASE_OPT_GEN);\n \n \t  /* FIXME lto, if the processes spawned by WPA fail, we miss\n \t     the chance to print WPA's report, so WPA will call\n@@ -2108,6 +2130,10 @@ lto_main (void)\n \t    print_lto_report ();\n \t}\n     }\n+\n+  /* Here we make LTO pretend to be a parser.  */\n+  timevar_start (TV_PHASE_PARSING);\n+  timevar_push (TV_PARSE_GLOBAL);\n }\n \n #include \"gt-lto-lto.h\""}, {"sha": "2d1fe72ce99d94cd73d62d1698c2e2f16e13e628", "filename": "gcc/timevar.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a910399dfd448270e8824b171fa545fb0b2160a1/gcc%2Ftimevar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a910399dfd448270e8824b171fa545fb0b2160a1/gcc%2Ftimevar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.c?ref=a910399dfd448270e8824b171fa545fb0b2160a1", "patch": "@@ -421,6 +421,57 @@ timevar_cond_stop (timevar_id_t timevar, bool running)\n }\n \n \n+/* Validate that phase times are consistent.  */\n+\n+static void\n+validate_phases (FILE *fp)\n+{\n+  unsigned int /* timevar_id_t */ id;\n+  struct timevar_time_def *total = &timevars[TV_TOTAL].elapsed;\n+  double phase_user = 0.0;\n+  double phase_sys = 0.0;\n+  double phase_wall = 0.0;\n+  unsigned phase_ggc_mem = 0;\n+  static char phase_prefix[] = \"phase \";\n+  const double tolerance = 1.000001;  /* One part in a million.  */\n+\n+  for (id = 0; id < (unsigned int) TIMEVAR_LAST; ++id)\n+    {\n+      struct timevar_def *tv = &timevars[(timevar_id_t) id];\n+\n+      /* Don't evaluate timing variables that were never used.  */\n+      if (!tv->used)\n+\tcontinue;\n+\n+      if (strncmp (tv->name, phase_prefix, sizeof phase_prefix - 1) == 0)\n+\t{\n+\t  phase_user += tv->elapsed.user;\n+\t  phase_sys += tv->elapsed.sys;\n+\t  phase_wall += tv->elapsed.wall;\n+\t  phase_ggc_mem += tv->elapsed.ggc_mem;\n+\t}\n+    }\n+\n+  if (phase_user > total->user * tolerance\n+      || phase_sys > total->sys * tolerance\n+      || phase_wall > total->wall * tolerance\n+      || phase_ggc_mem > total->ggc_mem * tolerance)\n+    {\n+\n+      fprintf (fp, \"Timing error: total of phase timers exceeds total time.\\n\");\n+      if (phase_user > total->user)\n+\tfprintf (fp, \"user    %24.18e > %24.18e\\n\", phase_user, total->user);\n+      if (phase_sys > total->sys)\n+\tfprintf (fp, \"sys     %24.18e > %24.18e\\n\", phase_sys, total->sys);\n+      if (phase_wall > total->wall)\n+\tfprintf (fp, \"wall    %24.18e > %24.18e\\n\", phase_wall, total->wall);\n+      if (phase_ggc_mem > total->ggc_mem)\n+\tfprintf (fp, \"ggc_mem %24u > %24u\\n\", phase_ggc_mem, total->ggc_mem);\n+      gcc_unreachable ();\n+    }\n+}\n+\n+\n /* Summarize timing variables to FP.  The timing variable TV_TOTAL has\n    a special meaning -- it's considered to be the total elapsed time,\n    for normalizing the others, and is displayed last.  */\n@@ -535,6 +586,8 @@ timevar_print (FILE *fp)\n \n #endif /* defined (HAVE_USER_TIME) || defined (HAVE_SYS_TIME)\n \t  || defined (HAVE_WALL_TIME) */\n+\n+  validate_phases (fp);\n }\n \n /* Prints a message to stderr stating that time elapsed in STR is"}, {"sha": "57d9e3f8fd7a9e670518baabe15c130c06afd786", "filename": "gcc/timevar.def", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a910399dfd448270e8824b171fa545fb0b2160a1/gcc%2Ftimevar.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a910399dfd448270e8824b171fa545fb0b2160a1/gcc%2Ftimevar.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.def?ref=a910399dfd448270e8824b171fa545fb0b2160a1", "patch": "@@ -33,13 +33,17 @@\n \n /* The total execution time.  */\n DEFTIMEVAR (TV_TOTAL                 , \"total time\")\n+/* The compiler phases.  These must be mutually exclusive.\n+   Ideally, they would sum to near the total time.  */\n DEFTIMEVAR (TV_PHASE_SETUP           , \"phase setup\")\n DEFTIMEVAR (TV_PHASE_PARSING         , \"phase parsing\")\n DEFTIMEVAR (TV_PHASE_DEFERRED        , \"phase lang. deferred\")\n-DEFTIMEVAR (TV_PHASE_CGRAPH          , \"phase cgraph\")\n+DEFTIMEVAR (TV_PHASE_OPT_GEN         , \"phase opt and generate\")\n DEFTIMEVAR (TV_PHASE_DBGINFO         , \"phase debug info\")\n DEFTIMEVAR (TV_PHASE_CHECK_DBGINFO   , \"phase check & debug info\")\n-DEFTIMEVAR (TV_PHASE_GENERATE        , \"phase generate\")\n+DEFTIMEVAR (TV_PHASE_LATE_ASM        , \"phase last asm\")\n+DEFTIMEVAR (TV_PHASE_STREAM_IN       , \"phase stream in\")\n+DEFTIMEVAR (TV_PHASE_STREAM_OUT      , \"phase stream out\")\n DEFTIMEVAR (TV_PHASE_FINALIZE        , \"phase finalize\")\n \n /* Concurrent timers, indicated by \"|\".  */"}, {"sha": "2eb75f1b9d68e7418e1524972afaa86a5fb10764", "filename": "gcc/toplev.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a910399dfd448270e8824b171fa545fb0b2160a1/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a910399dfd448270e8824b171fa545fb0b2160a1/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a910399dfd448270e8824b171fa545fb0b2160a1", "patch": "@@ -558,18 +558,15 @@ compile_file (void)\n   if (flag_syntax_only || flag_wpa)\n     return;\n \n-  timevar_start (TV_PHASE_GENERATE);\n-\n   ggc_protect_identifiers = false;\n \n   /* This must also call finalize_compilation_unit.  */\n   lang_hooks.decls.final_write_globals ();\n \n   if (seen_error ())\n-    {\n-      timevar_stop (TV_PHASE_GENERATE);\n-      return;\n-    }\n+    return;\n+\n+  timevar_start (TV_PHASE_LATE_ASM);\n \n   /* Compilation unit is finalized.  When producing non-fat LTO object, we are\n      basically finished.  */\n@@ -670,7 +667,7 @@ compile_file (void)\n      assembly file after this point.  */\n   targetm.asm_out.file_end ();\n \n-  timevar_stop (TV_PHASE_GENERATE);\n+  timevar_stop (TV_PHASE_LATE_ASM);\n }\n \n /* Print version information to FILE."}]}