{"sha": "1f6f3d15c62ea39da28c60064ffd61e0eb87abc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY2ZjNkMTVjNjJlYTM5ZGEyOGM2MDA2NGZmZDYxZTBlYjg3YWJjNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@airs.com", "date": "2005-09-25T03:05:57Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2005-09-25T03:05:57Z"}, "message": "convert.c (convert_to_integer): Don't test for ENUMERAL_TYPE in NEGATE_EXPR/BIT_NOT_EXPR case.\n\n\t* convert.c (convert_to_integer): Don't test for ENUMERAL_TYPE in\n\tNEGATE_EXPR/BIT_NOT_EXPR case.\n\nFrom-SVN: r104615", "tree": {"sha": "585707c17b131bfa3305c664f46a1124a7613b50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/585707c17b131bfa3305c664f46a1124a7613b50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f6f3d15c62ea39da28c60064ffd61e0eb87abc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6f3d15c62ea39da28c60064ffd61e0eb87abc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f6f3d15c62ea39da28c60064ffd61e0eb87abc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f6f3d15c62ea39da28c60064ffd61e0eb87abc5/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8028abd70df73eb9705ffeb1c5811d535940bfc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8028abd70df73eb9705ffeb1c5811d535940bfc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8028abd70df73eb9705ffeb1c5811d535940bfc5"}], "stats": {"total": 41, "additions": 17, "deletions": 24}, "files": [{"sha": "49321d41615009a40fa3d3cfda26614d601bcac3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6f3d15c62ea39da28c60064ffd61e0eb87abc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6f3d15c62ea39da28c60064ffd61e0eb87abc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f6f3d15c62ea39da28c60064ffd61e0eb87abc5", "patch": "@@ -1,3 +1,8 @@\n+2005-09-24  Ian Lance Taylor  <ian@airs.com>\n+\n+\t* convert.c (convert_to_integer): Don't test for ENUMERAL_TYPE in\n+\tNEGATE_EXPR/BIT_NOT_EXPR case.\n+\n 2005-09-24  Richard Henderson  <rth@redhat.com>\n \n \t* c-common.c (handle_mode_attribute): When not modifying in place,"}, {"sha": "5ddae361982ad43547b0a95d171bbf0e58a0811f", "filename": "gcc/convert.c", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f6f3d15c62ea39da28c60064ffd61e0eb87abc5/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f6f3d15c62ea39da28c60064ffd61e0eb87abc5/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=1f6f3d15c62ea39da28c60064ffd61e0eb87abc5", "patch": "@@ -620,30 +620,18 @@ convert_to_integer (tree type, tree expr)\n \t  /* This is not correct for ABS_EXPR,\n \t     since we must test the sign before truncation.  */\n \t  {\n-\t    tree typex = type;\n-\n-\t    /* Can't do arithmetic in enumeral types\n-\t       so use an integer type that will hold the values.  */\n-\t    if (TREE_CODE (typex) == ENUMERAL_TYPE)\n-\t      typex = lang_hooks.types.type_for_size\n-\t\t(TYPE_PRECISION (typex), TYPE_UNSIGNED (typex));\n-\n-\t    /* But now perhaps TYPEX is as wide as INPREC.\n-\t       In that case, do nothing special here.\n-\t       (Otherwise would recurse infinitely in convert.  */\n-\t    if (TYPE_PRECISION (typex) != inprec)\n-\t      {\n-\t\t/* Don't do unsigned arithmetic where signed was wanted,\n-\t\t   or vice versa.  */\n-\t\tif (TYPE_UNSIGNED (TREE_TYPE (expr)))\n-\t\t  typex = lang_hooks.types.unsigned_type (typex);\n-\t\telse\n-\t\t  typex = lang_hooks.types.signed_type (typex);\n-\t\treturn convert (type,\n-\t\t\t\tfold_build1 (ex_form, typex,\n-\t\t\t\t\t     convert (typex,\n-\t\t\t\t\t\t      TREE_OPERAND (expr, 0))));\n-\t      }\n+\t    tree typex;\n+\n+\t    /* Don't do unsigned arithmetic where signed was wanted,\n+\t       or vice versa.  */\n+\t    if (TYPE_UNSIGNED (TREE_TYPE (expr)))\n+\t      typex = lang_hooks.types.unsigned_type (type);\n+\t    else\n+\t      typex = lang_hooks.types.signed_type (type);\n+\t    return convert (type,\n+\t\t\t    fold_build1 (ex_form, typex,\n+\t\t\t\t\t convert (typex,\n+\t\t\t\t\t\t  TREE_OPERAND (expr, 0))));\n \t  }\n \n \tcase NOP_EXPR:"}]}