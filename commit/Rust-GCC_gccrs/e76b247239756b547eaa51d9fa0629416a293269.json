{"sha": "e76b247239756b547eaa51d9fa0629416a293269", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc2YjI0NzIzOTc1NmI1NDdlYWE1MWQ5ZmEwNjI5NDE2YTI5MzI2OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-09-07T01:02:46Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-09-07T01:02:46Z"}, "message": "PR c++/82053 - ICE with default argument in lambda in template\n\n\t* pt.c (tsubst_arg_types): Substitute default arguments for lambdas\n\tin templates.\n\t(retrieve_specialization): Use lambda_fn_in_template_p.\n\t* cp-tree.h: Declare it.\n\nFrom-SVN: r251826", "tree": {"sha": "21aace7cb949e949bd716497d52d15eb2dd4193d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21aace7cb949e949bd716497d52d15eb2dd4193d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e76b247239756b547eaa51d9fa0629416a293269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e76b247239756b547eaa51d9fa0629416a293269", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e76b247239756b547eaa51d9fa0629416a293269", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e76b247239756b547eaa51d9fa0629416a293269/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f4942d79564674324584b98f5081cdcae3c6daa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4942d79564674324584b98f5081cdcae3c6daa8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4942d79564674324584b98f5081cdcae3c6daa8"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "6c4a31d7850e902c4f1b7c39e79c8a2558123ad5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76b247239756b547eaa51d9fa0629416a293269/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76b247239756b547eaa51d9fa0629416a293269/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e76b247239756b547eaa51d9fa0629416a293269", "patch": "@@ -1,5 +1,11 @@\n 2017-09-06  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/82053 - ICE with default argument in lambda in template\n+\t* pt.c (tsubst_arg_types): Substitute default arguments for lambdas\n+\tin templates.\n+\t(retrieve_specialization): Use lambda_fn_in_template_p.\n+\t* cp-tree.h: Declare it.\n+\n \tPR c++/82070 - error with nested lambda capture\n \t* pt.c (tsubst_expr) [DECL_EXPR]: Register capture proxies with\n \tregister_local_specialization."}, {"sha": "a0e31d3d19d313dbbe7944e81bf17149e307069f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76b247239756b547eaa51d9fa0629416a293269/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76b247239756b547eaa51d9fa0629416a293269/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e76b247239756b547eaa51d9fa0629416a293269", "patch": "@@ -6821,6 +6821,7 @@ extern tree current_nonlambda_function\t\t(void);\n extern tree nonlambda_method_basetype\t\t(void);\n extern tree current_nonlambda_scope\t\t(void);\n extern bool generic_lambda_fn_p\t\t\t(tree);\n+extern bool lambda_fn_in_template_p\t\t(tree);\n extern void maybe_add_lambda_conv_op            (tree);\n extern bool is_lambda_ignored_entity            (tree);\n extern bool lambda_static_thunk_p\t\t(tree);"}, {"sha": "ec7bbc890c6b93a0e1126313ebad4939573b2254", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76b247239756b547eaa51d9fa0629416a293269/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76b247239756b547eaa51d9fa0629416a293269/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e76b247239756b547eaa51d9fa0629416a293269", "patch": "@@ -1193,16 +1193,8 @@ retrieve_specialization (tree tmpl, tree args, hashval_t hash)\n \n   /* Lambda functions in templates aren't instantiated normally, but through\n      tsubst_lambda_expr.  */\n-  if (LAMBDA_FUNCTION_P (tmpl))\n-    {\n-      bool generic = PRIMARY_TEMPLATE_P (tmpl);\n-      if (TMPL_PARMS_DEPTH (DECL_TEMPLATE_PARMS (tmpl)) > generic)\n-\treturn NULL_TREE;\n-\n-      /* But generic lambda functions are instantiated normally, once their\n-\t containing context is fully instantiated.  */\n-      gcc_assert (generic);\n-    }\n+  if (lambda_fn_in_template_p (tmpl))\n+    return NULL_TREE;\n \n   if (optimize_specialization_lookup_p (tmpl))\n     {\n@@ -12579,7 +12571,7 @@ tsubst_template_decl (tree t, tree args, tsubst_flags_t complain,\n bool\n lambda_fn_in_template_p (tree fn)\n {\n-  if (!LAMBDA_FUNCTION_P (fn))\n+  if (!fn || !LAMBDA_FUNCTION_P (fn))\n     return false;\n   tree closure = DECL_CONTEXT (fn);\n   return CLASSTYPE_TEMPLATE_INFO (closure) != NULL_TREE;\n@@ -13248,6 +13240,13 @@ tsubst_arg_types (tree arg_types,\n        done in build_over_call.  */\n     default_arg = TREE_PURPOSE (arg_types);\n \n+    /* Except that we do substitute default arguments under tsubst_lambda_expr,\n+       since the new op() won't have any associated template arguments for us\n+       to refer to later.  */\n+    if (lambda_fn_in_template_p (in_decl))\n+      default_arg = tsubst_copy_and_build (default_arg, args, complain, in_decl,\n+\t\t\t\t\t   false/*fn*/, false/*constexpr*/);\n+\n     if (default_arg && TREE_CODE (default_arg) == DEFAULT_ARG)\n       {\n         /* We've instantiated a template before its default arguments"}, {"sha": "f67dfee8fdf2e16735b94a1cb6e26f66763cf4da", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-defarg7.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e76b247239756b547eaa51d9fa0629416a293269/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-defarg7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e76b247239756b547eaa51d9fa0629416a293269/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-defarg7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-defarg7.C?ref=e76b247239756b547eaa51d9fa0629416a293269", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/82053\n+// { dg-do compile { target c++14 } }\n+\n+template<class T>\n+int fn() { return 42; }\n+\n+template<class T>\n+auto lam = [](int = fn<T>()){};\n+\n+int main()\n+{\n+  lam<int>();\n+}"}]}