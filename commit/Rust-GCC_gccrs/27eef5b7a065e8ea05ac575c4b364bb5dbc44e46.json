{"sha": "27eef5b7a065e8ea05ac575c4b364bb5dbc44e46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdlZWY1YjdhMDY1ZThlYTA1YWM1NzVjNGIzNjRiYjVkYmM0NGU0Ng==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2021-02-06T12:22:33Z"}, "committer": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2021-02-06T12:22:33Z"}, "message": "Rewrote MetaNameValueStr to store raw string rather than quoted string", "tree": {"sha": "12900dba5264146972f310a8943825a21f921b9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12900dba5264146972f310a8943825a21f921b9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27eef5b7a065e8ea05ac575c4b364bb5dbc44e46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27eef5b7a065e8ea05ac575c4b364bb5dbc44e46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27eef5b7a065e8ea05ac575c4b364bb5dbc44e46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27eef5b7a065e8ea05ac575c4b364bb5dbc44e46/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83ca72858469584de7d235054209dd214818ca1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83ca72858469584de7d235054209dd214818ca1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83ca72858469584de7d235054209dd214818ca1a"}], "stats": {"total": 58, "additions": 17, "deletions": 41}, "files": [{"sha": "47d6c89dd19077cf7c18d0cf4cfb270a58909878", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 15, "deletions": 40, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27eef5b7a065e8ea05ac575c4b364bb5dbc44e46/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27eef5b7a065e8ea05ac575c4b364bb5dbc44e46/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=27eef5b7a065e8ea05ac575c4b364bb5dbc44e46", "patch": "@@ -150,6 +150,15 @@ std::string append_attributes (std::vector<Attribute> attrs, AttrMode mode) {\n   return str;\n }\n \n+// Removes the beginning and end quotes of a quoted string. \n+std::string\n+unquote_string (std::string input) \n+{\n+  rust_assert (input.front () == '\"');\n+  rust_assert (input.back () == '\"');\n+  return input.substr (1, input.length () - 2);\n+}\n+\n std::string\n Crate::as_string () const\n {\n@@ -158,13 +167,10 @@ Crate::as_string () const\n   std::string str (\"Crate: \");\n   // add utf8bom and shebang\n   if (has_utf8bom)\n-    {\n       str += \"\\n has utf8bom\";\n-    }\n+\n   if (has_shebang)\n-    {\n       str += \"\\n has shebang\";\n-    }\n \n   // inner attributes\n   str += \"\\n inner attributes: \";\n@@ -177,9 +183,7 @@ Crate::as_string () const\n       /* note that this does not print them with \"inner attribute\" syntax -\n        * just the body */\n       for (const auto &attr : inner_attrs)\n-\t{\n \t  str += \"\\n  \" + attr.as_string ();\n-\t}\n     }\n \n   // items\n@@ -311,9 +315,7 @@ SimplePath::as_string () const\n {\n   std::string path;\n   if (has_opening_scope_resolution)\n-    {\n       path = \"::\";\n-    }\n \n   // crappy hack because doing proper for loop would be more code\n   bool first_time = true;\n@@ -377,9 +379,7 @@ VisItem::as_string () const\n     }\n \n   if (has_visibility ())\n-    {\n-      str = visibility.as_string () + \" \";\n-    }\n+      str += visibility.as_string () + \" \";\n \n   return str;\n }\n@@ -426,9 +426,7 @@ ModuleBodied::as_string () const\n       /* note that this does not print them with \"inner attribute\" syntax -\n        * just the body */\n       for (const auto &attr : inner_attrs)\n-\t{\n \t  str += \"\\n  \" + attr.as_string ();\n-\t}\n     }\n \n   // items\n@@ -474,9 +472,7 @@ StaticItem::as_string () const\n   str += indent_spaces (stay) + \"static\";\n \n   if (has_mut)\n-    {\n       str += \" mut\";\n-    }\n \n   str += \" \" + name;\n \n@@ -509,9 +505,7 @@ ExternCrate::as_string () const\n   str += \"extern crate \" + referenced_crate;\n \n   if (has_as_clause ())\n-    {\n       str += \" as \" + as_clause_name;\n-    }\n \n   return str;\n }\n@@ -556,20 +550,14 @@ TupleStruct::as_string () const\n   else\n     {\n       for (const auto &field : fields)\n-\t{\n \t  str += \"\\n  \" + field.as_string ();\n-\t}\n     }\n \n   str += \"\\n Where clause: \";\n   if (has_where_clause ())\n-    {\n       str += where_clause.as_string ();\n-    }\n   else\n-    {\n       str += \"none\";\n-    }\n \n   return str;\n }\n@@ -637,13 +625,9 @@ InherentImpl::as_string () const\n \n   str += \"\\n Where clause: \";\n   if (has_where_clause ())\n-    {\n       str += where_clause.as_string ();\n-    }\n   else\n-    {\n       str += \"none\";\n-    }\n \n   // inner attributes\n   str += \"\\n inner attributes: \";\n@@ -670,9 +654,7 @@ InherentImpl::as_string () const\n   else\n     {\n       for (const auto &item : impl_items)\n-\t{\n \t  str += \"\\n  \" + item->as_string ();\n-\t}\n     }\n \n   return str;\n@@ -775,13 +757,9 @@ StructStruct::as_string () const\n \n   str += \"\\n Where clause: \";\n   if (has_where_clause ())\n-    {\n       str += where_clause.as_string ();\n-    }\n   else\n-    {\n       str += \"none\";\n-    }\n \n   // struct fields\n   str += \"\\n Struct fields: \";\n@@ -796,9 +774,7 @@ StructStruct::as_string () const\n   else\n     {\n       for (const auto &field : fields)\n-\t{\n \t  str += \"\\n  \" + field.as_string ();\n-\t}\n     }\n \n   return str;\n@@ -950,13 +926,9 @@ Enum::as_string () const\n \n   str += \"\\n Where clause: \";\n   if (has_where_clause ())\n-    {\n       str += where_clause.as_string ();\n-    }\n   else\n-    {\n       str += \"none\";\n-    }\n \n   // items\n   str += \"\\n Items: \";\n@@ -4677,8 +4649,11 @@ MacroParser::parse_meta_item_inner ()\n \n \t  skip_token (2);\n \n+    // remove the quotes from the string value\n+    std::string raw_value = unquote_string (std::move (value));\n+\n \t  return std::unique_ptr<MetaNameValueStr> (\n-\t    new MetaNameValueStr (std::move (ident), std::move (value)));\n+\t    new MetaNameValueStr (std::move (ident), std::move (raw_value)));\n \t}\n       else\n \t{"}, {"sha": "e23be142b6e7951d1bf45acd0f319c6736bcb22c", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27eef5b7a065e8ea05ac575c4b364bb5dbc44e46/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27eef5b7a065e8ea05ac575c4b364bb5dbc44e46/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=27eef5b7a065e8ea05ac575c4b364bb5dbc44e46", "patch": "@@ -537,14 +537,15 @@ class MetaWord : public MetaItem\n class MetaNameValueStr : public MetaItem\n {\n   Identifier ident;\n+  // NOTE: str stored without quotes\n   std::string str;\n \n public:\n   MetaNameValueStr (Identifier ident, std::string str)\n     : ident (std::move (ident)), str (std::move (str))\n   {}\n \n-  std::string as_string () const override { return ident + \" = \" + str; }\n+  std::string as_string () const override { return ident + \" = \\\"\" + str + \"\\\"\"; }\n \n   void accept_vis (ASTVisitor &vis) override;\n "}]}