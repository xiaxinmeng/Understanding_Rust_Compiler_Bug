{"sha": "519a33f954fd71cb8b74053e168e23a1cb00d30b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE5YTMzZjk1NGZkNzFjYjhiNzQwNTNlMTY4ZTIzYTFjYjAwZDMwYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-14T16:36:00Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-14T16:36:00Z"}, "message": "c++: Fix thinko in enum_min_precision [PR61414]\n\nWhen backporting the PR61414 fix to 8.4, I've noticed that the caching\nof prec is actually broken, as it would fail to actually store the computed\nprecision into the hash_map's value and so next time we'd think the enum needs\n0 bits.\n\n2020-02-14  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/61414\n\t* class.c (enum_min_precision): Change prec type from int to int &.\n\n\t* g++.dg/cpp0x/enum39.C: New test.", "tree": {"sha": "219e1ea1d630741772019ad3bacd0fbfe168aa21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/219e1ea1d630741772019ad3bacd0fbfe168aa21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/519a33f954fd71cb8b74053e168e23a1cb00d30b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/519a33f954fd71cb8b74053e168e23a1cb00d30b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/519a33f954fd71cb8b74053e168e23a1cb00d30b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/519a33f954fd71cb8b74053e168e23a1cb00d30b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "515dd04260c6049110d7624eaf1b276929dcd9af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/515dd04260c6049110d7624eaf1b276929dcd9af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/515dd04260c6049110d7624eaf1b276929dcd9af"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "a3d904e7bbb0d4c9f5a43aa82822ea18c248a953", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519a33f954fd71cb8b74053e168e23a1cb00d30b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519a33f954fd71cb8b74053e168e23a1cb00d30b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=519a33f954fd71cb8b74053e168e23a1cb00d30b", "patch": "@@ -1,5 +1,8 @@\n 2020-02-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c++/61414\n+\t* class.c (enum_min_precision): Change prec type from int to int &.\n+\n \tPR libstdc++/92906\n \t* cp-tree.h (enum cp_tree_index): Add CPTI_FALLBACK_DFLOAT32_TYPE,\n \tCPTI_FALLBACK_DFLOAT64_TYPE and CPTI_FALLBACK_DFLOAT128_TYPE."}, {"sha": "a1fd1aa91ccbf1d1da81be5c9fff45abd47f3f29", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519a33f954fd71cb8b74053e168e23a1cb00d30b/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519a33f954fd71cb8b74053e168e23a1cb00d30b/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=519a33f954fd71cb8b74053e168e23a1cb00d30b", "patch": "@@ -3289,7 +3289,7 @@ enum_min_precision (tree type)\n     enum_to_min_precision = hash_map<tree, int>::create_ggc (37);\n \n   bool existed;\n-  int prec = enum_to_min_precision->get_or_insert (type, &existed);\n+  int &prec = enum_to_min_precision->get_or_insert (type, &existed);\n   if (existed)\n     return prec;\n "}, {"sha": "3059e238ff31c8c4275e4e67b5909618f79cb0d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519a33f954fd71cb8b74053e168e23a1cb00d30b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519a33f954fd71cb8b74053e168e23a1cb00d30b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=519a33f954fd71cb8b74053e168e23a1cb00d30b", "patch": "@@ -1,3 +1,8 @@\n+2020-02-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/61414\n+\t* g++.dg/cpp0x/enum39.C: New test.\n+\n 2020-02-14  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/93516"}, {"sha": "676cf8463de4864bd66534831f975951ad99d45d", "filename": "gcc/testsuite/g++.dg/cpp0x/enum39.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519a33f954fd71cb8b74053e168e23a1cb00d30b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519a33f954fd71cb8b74053e168e23a1cb00d30b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum39.C?ref=519a33f954fd71cb8b74053e168e23a1cb00d30b", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/61414\n+// { dg-do compile { target c++11 } }\n+\n+enum class E { E0 = -4, E1 = 3 };\n+enum F : unsigned { F0 = 0, F1 = 15 };\n+\n+struct S\n+{\n+  E a : 2;\t// { dg-warning \"'S::a' is too small to hold all values of 'enum class E'\" }\n+  E b : 2;\t// { dg-warning \"'S::b' is too small to hold all values of 'enum class E'\" }\n+  E c : 3;\t// { dg-bogus \"'S::c' is too small to hold all values of 'enum class E'\" }\n+  F d : 3;\t// { dg-warning \"'S::d' is too small to hold all values of 'enum F'\" }\n+  F e : 3;\t// { dg-warning \"'S::e' is too small to hold all values of 'enum F'\" }\n+  F f : 4;\t// { dg-bogus \"'S::f' is too small to hold all values of 'enum F'\" }\n+};"}]}