{"sha": "e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZiNmJmMDlkZDM0ZWQ5YTM1Y2JjN2QzN2QwZmRlMTg0OTQ1MGFhZA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2015-11-09T11:33:30Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2015-11-09T11:33:30Z"}, "message": "Support init priority on Solaris\n\n\tlibgcc:\n\t* config/ia64/crtbegin.S: Check HAVE_INITFINI_ARRAY_SUPPORT\n\tvalue.\n\t* config/ia64/crtend.S: Likewise.\n\n\tgcc:\n\t* acinclude.m4 (gcc_AC_INITFINI_ARRAY): Allow for differences in\n\tassembler syntax.\n\tSupport Solaris ld.\n\tDefine HAVE_INITFINI_ARRAY_SUPPORT as 0/1.\n\n\t* config/sol2.h (SUPPORTS_INIT_PRIORITY): Define to\n\tHAVE_INITFINI_ARRAY_SUPPORT.\n\t* config/initfini-array.h: Check HAVE_INITFINI_ARRAY_SUPPORT\n\tvalue.\n\n\t* configure.ac (gcc_cv_as_sparc_nobits): Remove.\n\t* config/sparc/sparc.c (sparc_solaris_elf_asm_named_section):\n\tDon't check HAVE_AS_SPARC_NOBITS.\n\tHeed SECTION_NOTYPE.\n\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\nFrom-SVN: r230013", "tree": {"sha": "9a09dfb3e59bf363b6034ae58ed47450b706338a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a09dfb3e59bf363b6034ae58ed47450b706338a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e1c78addb3eb56f659b47756e41e6e956d5c85ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1c78addb3eb56f659b47756e41e6e956d5c85ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1c78addb3eb56f659b47756e41e6e956d5c85ab"}], "stats": {"total": 290, "additions": 187, "deletions": 103}, "files": [{"sha": "4ebfc52354646e72bb2124c14c030dd4dc18ebde", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad", "patch": "@@ -1,3 +1,23 @@\n+2015-11-09  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* acinclude.m4 (gcc_AC_INITFINI_ARRAY): Allow for differences in\n+\tassembler syntax.\n+\tSupport Solaris ld.\n+\tDefine HAVE_INITFINI_ARRAY_SUPPORT as 0/1.\n+\n+\t* config/sol2.h (SUPPORTS_INIT_PRIORITY): Define to\n+\tHAVE_INITFINI_ARRAY_SUPPORT.\n+\t* config/initfini-array.h: Check HAVE_INITFINI_ARRAY_SUPPORT\n+\tvalue.\n+\n+\t* configure.ac (gcc_cv_as_sparc_nobits): Remove.\n+\t* config/sparc/sparc.c (sparc_solaris_elf_asm_named_section):\n+\tDon't check HAVE_AS_SPARC_NOBITS.\n+\tHeed SECTION_NOTYPE.\n+\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\n 2015-11-09  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR middle-end/68253"}, {"sha": "b8a4c28424d918650bf5ec8817ca0809b7e6ca05", "filename": "gcc/acinclude.m4", "status": "modified", "additions": 74, "deletions": 21, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/gcc%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/gcc%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Facinclude.m4?ref=e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad", "patch": "@@ -309,43 +309,96 @@ int (*fp) (void) __attribute__ ((section (\".init_array\"))) = foo;\n \t    gcc_cv_initfini_array=yes\n \t  fi\n \telif test x$gcc_cv_as != x -a x$gcc_cv_ld != x -a x$gcc_cv_objdump != x ; then\n-\t  cat > conftest.s <<\\EOF\n-.section .dtors,\"a\",%progbits\n+\t  case $target:$gas in\n+\t    *:yes)\n+\t      sh_flags='\"a\"'\n+\t      sh_type='%progbits'\n+\t      ;;\n+\t    i?86-*-solaris2*:no | x86_64-*-solaris2*:no)\n+\t      sh_flags='\"a\"'\n+\t      sh_type='@progbits'\n+\t      ;;\n+\t    sparc*-*-solaris2*:no)\n+\t      sh_flags='#alloc'\n+\t      sh_type='#progbits'\n+\t      sh_quote='\"'\n+\t      ;;\n+\t  esac\n+\t  case \"$target:$gnu_ld\" in\n+\t    *:yes)\n+\t      cat > conftest.s <<EOF\n+.section .dtors,$sh_flags,$sh_type\n .balign 4\n .byte 'A', 'A', 'A', 'A'\n-.section .ctors,\"a\",%progbits\n+.section .ctors,$sh_flags,$sh_type\n .balign 4\n .byte 'B', 'B', 'B', 'B'\n-.section .fini_array.65530,\"a\",%progbits\n+.section .fini_array.65530,$sh_flags,$sh_type\n .balign 4\n .byte 'C', 'C', 'C', 'C'\n-.section .init_array.65530,\"a\",%progbits\n+.section .init_array.65530,$sh_flags,$sh_type\n .balign 4\n .byte 'D', 'D', 'D', 'D'\n-.section .dtors.64528,\"a\",%progbits\n+.section .dtors.64528,$sh_flags,$sh_type\n .balign 4\n .byte 'E', 'E', 'E', 'E'\n-.section .ctors.64528,\"a\",%progbits\n+.section .ctors.64528,$sh_flags,$sh_type\n .balign 4\n .byte 'F', 'F', 'F', 'F'\n-.section .fini_array.01005,\"a\",%progbits\n+.section .fini_array.01005,$sh_flags,$sh_type\n .balign 4\n .byte 'G', 'G', 'G', 'G'\n-.section .init_array.01005,\"a\",%progbits\n+.section .init_array.01005,$sh_flags,$sh_type\n .balign 4\n .byte 'H', 'H', 'H', 'H'\n .text\n .globl _start\n _start:\n EOF\n-\t  if $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1 \\\n-\t     && $gcc_cv_ld -o conftest conftest.o > /dev/null 2>&1 \\\n-\t     && $gcc_cv_objdump -s -j .init_array conftest \\\n-\t\t| grep HHHHFFFFDDDDBBBB > /dev/null 2>&1 \\\n-\t     && $gcc_cv_objdump -s -j .fini_array conftest \\\n-\t\t| grep GGGGEEEECCCCAAAA > /dev/null 2>&1; then\n-\t    gcc_cv_initfini_array=yes\n-\t  fi\n+\t      if $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1 \\\n+\t         && $gcc_cv_ld -o conftest conftest.o > /dev/null 2>&1 \\\n+\t         && $gcc_cv_objdump -s -j .init_array conftest \\\n+\t\t    | grep HHHHFFFFDDDDBBBB > /dev/null 2>&1 \\\n+\t         && $gcc_cv_objdump -s -j .fini_array conftest \\\n+\t\t    | grep GGGGEEEECCCCAAAA > /dev/null 2>&1; then\n+\t        gcc_cv_initfini_array=yes\n+\t      fi\n+\t      ;;\n+\t    *-*-solaris2*:no)\n+\t      # When Solaris ld added constructor priority support, it was\n+\t      # decided to only handle .init_array.N/.fini_array.N since\n+\t      # there was no need for backwards compatibility with\n+\t      # .ctors.N/.dtors.N.  .ctors/.dtors remain as separate\n+\t      # sections with correct execution order resp. to\n+\t      # .init_array/.fini_array, while gld merges them into\n+\t      # .init_array/.fini_array.\n+\t      cat > conftest.s <<EOF\n+.section $sh_quote.fini_array.65530$sh_quote,$sh_flags,$sh_type\n+.align 4\n+.byte 'C', 'C', 'C', 'C'\n+.section $sh_quote.init_array.65530$sh_quote,$sh_flags,$sh_type\n+.align 4\n+.byte 'D', 'D', 'D', 'D'\n+.section $sh_quote.fini_array.01005$sh_quote,$sh_flags,$sh_type\n+.align 4\n+.byte 'G', 'G', 'G', 'G'\n+.section $sh_quote.init_array.01005$sh_quote,$sh_flags,$sh_type\n+.align 4\n+.byte 'H', 'H', 'H', 'H'\n+.text\n+.globl _start\n+_start:\n+EOF\n+\t      if $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1 \\\n+\t         && $gcc_cv_ld -o conftest conftest.o > /dev/null 2>&1 \\\n+\t         && $gcc_cv_objdump -s -j .init_array conftest \\\n+\t\t    | grep HHHHDDDD > /dev/null 2>&1 \\\n+\t         && $gcc_cv_objdump -s -j .fini_array conftest \\\n+\t\t    | grep GGGGCCCC > /dev/null 2>&1; then\n+\t        gcc_cv_initfini_array=yes\n+\t      fi\n+\t      ;;\n+\t    esac\n changequote(,)dnl\n \t  rm -f conftest conftest.*\n changequote([,])dnl\n@@ -375,10 +428,10 @@ changequote([,])dnl\n   fi])\n   enable_initfini_array=$gcc_cv_initfini_array\n ])\n-if test $enable_initfini_array = yes; then\n-  AC_DEFINE(HAVE_INITFINI_ARRAY_SUPPORT, 1,\n-    [Define .init_array/.fini_array sections are available and working.])\n-fi])\n+AC_DEFINE_UNQUOTED(HAVE_INITFINI_ARRAY_SUPPORT,\n+  [`if test $enable_initfini_array = yes; then echo 1; else echo 0; fi`],\n+  [Define 0/1 if .init_array/.fini_array sections are available and working.])\n+])\n \n dnl # _gcc_COMPUTE_GAS_VERSION\n dnl # Used by gcc_GAS_VERSION_GTE_IFELSE"}, {"sha": "eb1ea10603115ea341dd2f60b836410332b1c30c", "filename": "gcc/config.in", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad", "patch": "@@ -598,12 +598,6 @@\n #endif\n \n \n-/* Define to 1 if your assembler supports #nobits, 0 otherwise. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_AS_SPARC_NOBITS\n-#endif\n-\n-\n /* Define if your assembler and linker support unaligned PC relative relocs.\n    */\n #ifndef USED_FOR_TARGET\n@@ -1329,7 +1323,8 @@\n #endif\n \n \n-/* Define .init_array/.fini_array sections are available and working. */\n+/* Define 0/1 if .init_array/.fini_array sections are available and working.\n+   */\n #ifndef USED_FOR_TARGET\n #undef HAVE_INITFINI_ARRAY_SUPPORT\n #endif"}, {"sha": "59adedebf00dec73c2a7cd65e3e964cc565e355b", "filename": "gcc/config/initfini-array.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/gcc%2Fconfig%2Finitfini-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/gcc%2Fconfig%2Finitfini-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Finitfini-array.h?ref=e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad", "patch": "@@ -23,7 +23,7 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#ifdef HAVE_INITFINI_ARRAY_SUPPORT\n+#if HAVE_INITFINI_ARRAY_SUPPORT\n \n #define USE_INITFINI_ARRAY\n "}, {"sha": "6bf0599feaa06a69c1a6a80d74f36c20a74d3ff5", "filename": "gcc/config/sol2.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/gcc%2Fconfig%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/gcc%2Fconfig%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2.h?ref=e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad", "patch": "@@ -398,11 +398,9 @@ along with GCC; see the file COPYING3.  If not see\n #define NO_DBX_BNSYM_ENSYM 1\n #endif\n \n-#ifndef USE_GLD\n-/* The Solaris linker doesn't understand constructor priorities.  */\n+/* Enable constructor priorities if the configured linker supports it.  */\n #undef SUPPORTS_INIT_PRIORITY\n-#define SUPPORTS_INIT_PRIORITY 0\n-#endif\n+#define SUPPORTS_INIT_PRIORITY HAVE_INITFINI_ARRAY_SUPPORT\n \n /* Solaris has an implementation of __enable_execute_stack.  */\n #define HAVE_ENABLE_EXECUTE_STACK"}, {"sha": "28c2c63b6830407beb0379982242d36507636ba0", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad", "patch": "@@ -9868,14 +9868,12 @@ sparc_solaris_elf_asm_named_section (const char *name, unsigned int flags,\n   if (flags & SECTION_CODE)\n     fputs (\",#execinstr\", asm_out_file);\n \n-  /* Sun as only supports #nobits/#progbits since Solaris 10.  */\n-  if (HAVE_AS_SPARC_NOBITS)\n-    {\n-      if (flags & SECTION_BSS)\n-\tfputs (\",#nobits\", asm_out_file);\n-      else\n-\tfputs (\",#progbits\", asm_out_file);\n-    }\n+  if (flags & SECTION_NOTYPE)\n+    ;\n+  else if (flags & SECTION_BSS)\n+    fputs (\",#nobits\", asm_out_file);\n+  else\n+    fputs (\",#progbits\", asm_out_file);\n \n   fputc ('\\n', asm_out_file);\n }"}, {"sha": "de6cf13569ff18bcbe6726f1b60cfedad053e91b", "filename": "gcc/configure", "status": "modified", "additions": 74, "deletions": 53, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad", "patch": "@@ -22930,43 +22930,96 @@ fi\n \t    gcc_cv_initfini_array=yes\n \t  fi\n \telif test x$gcc_cv_as != x -a x$gcc_cv_ld != x -a x$gcc_cv_objdump != x ; then\n-\t  cat > conftest.s <<\\EOF\n-.section .dtors,\"a\",%progbits\n+\t  case $target:$gas in\n+\t    *:yes)\n+\t      sh_flags='\"a\"'\n+\t      sh_type='%progbits'\n+\t      ;;\n+\t    i?86-*-solaris2*:no | x86_64-*-solaris2*:no)\n+\t      sh_flags='\"a\"'\n+\t      sh_type='@progbits'\n+\t      ;;\n+\t    sparc*-*-solaris2*:no)\n+\t      sh_flags='#alloc'\n+\t      sh_type='#progbits'\n+\t      sh_quote='\"'\n+\t      ;;\n+\t  esac\n+\t  case \"$target:$gnu_ld\" in\n+\t    *:yes)\n+\t      cat > conftest.s <<EOF\n+.section .dtors,$sh_flags,$sh_type\n .balign 4\n .byte 'A', 'A', 'A', 'A'\n-.section .ctors,\"a\",%progbits\n+.section .ctors,$sh_flags,$sh_type\n .balign 4\n .byte 'B', 'B', 'B', 'B'\n-.section .fini_array.65530,\"a\",%progbits\n+.section .fini_array.65530,$sh_flags,$sh_type\n .balign 4\n .byte 'C', 'C', 'C', 'C'\n-.section .init_array.65530,\"a\",%progbits\n+.section .init_array.65530,$sh_flags,$sh_type\n .balign 4\n .byte 'D', 'D', 'D', 'D'\n-.section .dtors.64528,\"a\",%progbits\n+.section .dtors.64528,$sh_flags,$sh_type\n .balign 4\n .byte 'E', 'E', 'E', 'E'\n-.section .ctors.64528,\"a\",%progbits\n+.section .ctors.64528,$sh_flags,$sh_type\n .balign 4\n .byte 'F', 'F', 'F', 'F'\n-.section .fini_array.01005,\"a\",%progbits\n+.section .fini_array.01005,$sh_flags,$sh_type\n .balign 4\n .byte 'G', 'G', 'G', 'G'\n-.section .init_array.01005,\"a\",%progbits\n+.section .init_array.01005,$sh_flags,$sh_type\n .balign 4\n .byte 'H', 'H', 'H', 'H'\n .text\n .globl _start\n _start:\n EOF\n-\t  if $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1 \\\n-\t     && $gcc_cv_ld -o conftest conftest.o > /dev/null 2>&1 \\\n-\t     && $gcc_cv_objdump -s -j .init_array conftest \\\n-\t\t| grep HHHHFFFFDDDDBBBB > /dev/null 2>&1 \\\n-\t     && $gcc_cv_objdump -s -j .fini_array conftest \\\n-\t\t| grep GGGGEEEECCCCAAAA > /dev/null 2>&1; then\n-\t    gcc_cv_initfini_array=yes\n-\t  fi\n+\t      if $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1 \\\n+\t         && $gcc_cv_ld -o conftest conftest.o > /dev/null 2>&1 \\\n+\t         && $gcc_cv_objdump -s -j .init_array conftest \\\n+\t\t    | grep HHHHFFFFDDDDBBBB > /dev/null 2>&1 \\\n+\t         && $gcc_cv_objdump -s -j .fini_array conftest \\\n+\t\t    | grep GGGGEEEECCCCAAAA > /dev/null 2>&1; then\n+\t        gcc_cv_initfini_array=yes\n+\t      fi\n+\t      ;;\n+\t    *-*-solaris2*:no)\n+\t      # When Solaris ld added constructor priority support, it was\n+\t      # decided to only handle .init_array.N/.fini_array.N since\n+\t      # there was no need for backwards compatibility with\n+\t      # .ctors.N/.dtors.N.  .ctors/.dtors remain as separate\n+\t      # sections with correct execution order resp. to\n+\t      # .init_array/.fini_array, while gld merges them into\n+\t      # .init_array/.fini_array.\n+\t      cat > conftest.s <<EOF\n+.section $sh_quote.fini_array.65530$sh_quote,$sh_flags,$sh_type\n+.align 4\n+.byte 'C', 'C', 'C', 'C'\n+.section $sh_quote.init_array.65530$sh_quote,$sh_flags,$sh_type\n+.align 4\n+.byte 'D', 'D', 'D', 'D'\n+.section $sh_quote.fini_array.01005$sh_quote,$sh_flags,$sh_type\n+.align 4\n+.byte 'G', 'G', 'G', 'G'\n+.section $sh_quote.init_array.01005$sh_quote,$sh_flags,$sh_type\n+.align 4\n+.byte 'H', 'H', 'H', 'H'\n+.text\n+.globl _start\n+_start:\n+EOF\n+\t      if $gcc_cv_as -o conftest.o conftest.s > /dev/null 2>&1 \\\n+\t         && $gcc_cv_ld -o conftest conftest.o > /dev/null 2>&1 \\\n+\t         && $gcc_cv_objdump -s -j .init_array conftest \\\n+\t\t    | grep HHHHDDDD > /dev/null 2>&1 \\\n+\t         && $gcc_cv_objdump -s -j .fini_array conftest \\\n+\t\t    | grep GGGGCCCC > /dev/null 2>&1; then\n+\t        gcc_cv_initfini_array=yes\n+\t      fi\n+\t      ;;\n+\t    esac\n \t  rm -f conftest conftest.*\n \tfi\n \tcat confdefs.h - <<_ACEOF >conftest.$ac_ext\n@@ -23009,11 +23062,12 @@ $as_echo \"$gcc_cv_initfini_array\" >&6; }\n \n fi\n \n-if test $enable_initfini_array = yes; then\n \n-$as_echo \"#define HAVE_INITFINI_ARRAY_SUPPORT 1\" >>confdefs.h\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_INITFINI_ARRAY_SUPPORT `if test $enable_initfini_array = yes; then echo 1; else echo 0; fi`\n+_ACEOF\n+\n \n-fi\n \n # Check if we have .[us]leb128, and support symbol arithmetic with it.\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for .sleb128 and .uleb128\" >&5\n@@ -24667,39 +24721,6 @@ $as_echo \"#define HAVE_AS_REGISTER_PSEUDO_OP 1\" >>confdefs.h\n \n fi\n \n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for #nobits\" >&5\n-$as_echo_n \"checking assembler for #nobits... \" >&6; }\n-if test \"${gcc_cv_as_sparc_nobits+set}\" = set; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  gcc_cv_as_sparc_nobits=no\n-  if test x$gcc_cv_as != x; then\n-    $as_echo '.section \"nobits\",#alloc,#write,#nobits\n-       .section \"progbits\",#alloc,#write,#progbits' > conftest.s\n-    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n-  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n-  (eval $ac_try) 2>&5\n-  ac_status=$?\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; }; }\n-    then\n-\tgcc_cv_as_sparc_nobits=yes\n-    else\n-      echo \"configure: failed program was\" >&5\n-      cat conftest.s >&5\n-    fi\n-    rm -f conftest.o conftest.s\n-  fi\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_sparc_nobits\" >&5\n-$as_echo \"$gcc_cv_as_sparc_nobits\" >&6; }\n-\n-\n-cat >>confdefs.h <<_ACEOF\n-#define HAVE_AS_SPARC_NOBITS `if test $gcc_cv_as_sparc_nobits = yes; then echo 1; else echo 0; fi`\n-_ACEOF\n-\n-\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for -relax option\" >&5\n $as_echo_n \"checking assembler for -relax option... \" >&6; }\n if test \"${gcc_cv_as_sparc_relax+set}\" = set; then :"}, {"sha": "7670824e5a4d1a53d8a5b067a3947838f0f902ef", "filename": "gcc/configure.ac", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad", "patch": "@@ -3754,13 +3754,6 @@ AS_HELP_STRING([--disable-fix-cortex-a53-843419],\n       [AC_DEFINE(HAVE_AS_REGISTER_PSEUDO_OP, 1,\n \t\t[Define if your assembler supports .register.])])\n \n-    gcc_GAS_CHECK_FEATURE([@%:@nobits], gcc_cv_as_sparc_nobits,,,\n-      [.section \"nobits\",#alloc,#write,#nobits\n-       .section \"progbits\",#alloc,#write,#progbits])\n-    AC_DEFINE_UNQUOTED(HAVE_AS_SPARC_NOBITS,\n-      [`if test $gcc_cv_as_sparc_nobits = yes; then echo 1; else echo 0; fi`],\n-      [Define to 1 if your assembler supports #nobits, 0 otherwise.])\n-\n     gcc_GAS_CHECK_FEATURE([-relax option], gcc_cv_as_sparc_relax,,\n       [-relax], [.text],,\n       [AC_DEFINE(HAVE_AS_RELAX_OPTION, 1,"}, {"sha": "13ed813385763502c6e70f26a18c7098fdc5755d", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad", "patch": "@@ -1,3 +1,9 @@\n+2015-11-09  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* config/ia64/crtbegin.S: Check HAVE_INITFINI_ARRAY_SUPPORT\n+\tvalue.\n+\t* config/ia64/crtend.S: Likewise.\n+\n 2015-11-07  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* config/visium/lib2funcs.c (__set_trampoline_parity): Use"}, {"sha": "477b383f11272fe6439b1f3434056b049ec24d17", "filename": "libgcc/config/ia64/crtbegin.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/libgcc%2Fconfig%2Fia64%2Fcrtbegin.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/libgcc%2Fconfig%2Fia64%2Fcrtbegin.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Fcrtbegin.S?ref=e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad", "patch": "@@ -61,7 +61,7 @@ __dso_handle:\n \t.hidden __dso_handle\n \n \n-#ifdef HAVE_INITFINI_ARRAY_SUPPORT\n+#if HAVE_INITFINI_ARRAY_SUPPORT\n \n .section .fini_array, \"a\"\n \tdata8 @fptr(__do_global_dtors_aux)"}, {"sha": "d9c65c0765de7c54c8dd4be92e6e6cb1ba33ecf9", "filename": "libgcc/config/ia64/crtend.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/libgcc%2Fconfig%2Fia64%2Fcrtend.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad/libgcc%2Fconfig%2Fia64%2Fcrtend.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fia64%2Fcrtend.S?ref=e6b6bf09dd34ed9a35cbc7d37d0fde1849450aad", "patch": "@@ -39,7 +39,7 @@ __DTOR_END__:\n __JCR_END__:\n \tdata8\t0\n \n-#ifdef HAVE_INITFINI_ARRAY_SUPPORT\n+#if HAVE_INITFINI_ARRAY_SUPPORT\n \t.global __do_global_ctors_aux\n \t.hidden\t__do_global_ctors_aux\n #else /* !HAVE_INITFINI_ARRAY_SUPPORT */"}]}