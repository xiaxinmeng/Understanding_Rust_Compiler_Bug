{"sha": "b4f4233d52069bed9f8d639aab84e1663ca08a8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRmNDIzM2Q1MjA2OWJlZDlmOGQ2MzlhYWI4NGUxNjYzY2EwOGE4Yg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-03-12T17:19:22Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-03-12T17:19:22Z"}, "message": "lex.c (whitespace_cr): Compress consecutive calls to warning().\n\n2000-03-11  Gabriel Dos Reis  <gdr@codesourcery.com>\n\n        * lex.c (whitespace_cr): Compress consecutive calls to warning().\n        (do_identifier): Ditto for error().\n\n        * pt.c (convert_nontype_argument): Ditto for cp_error().\n        (convert_template_argument): Ditto for cp_pedwarn().\n\nFrom-SVN: r32492", "tree": {"sha": "835c707fd832fdeb30083c53ea10364ca2b8f2b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/835c707fd832fdeb30083c53ea10364ca2b8f2b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4f4233d52069bed9f8d639aab84e1663ca08a8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4f4233d52069bed9f8d639aab84e1663ca08a8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4f4233d52069bed9f8d639aab84e1663ca08a8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4f4233d52069bed9f8d639aab84e1663ca08a8b/comments", "author": null, "committer": null, "parents": [{"sha": "8be1ddcacc974c896a22785d7c833a3987a7c5e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8be1ddcacc974c896a22785d7c833a3987a7c5e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8be1ddcacc974c896a22785d7c833a3987a7c5e6"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "37be27878c642a81e4cf3475e752ce4b8619c9eb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f4233d52069bed9f8d639aab84e1663ca08a8b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f4233d52069bed9f8d639aab84e1663ca08a8b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b4f4233d52069bed9f8d639aab84e1663ca08a8b", "patch": "@@ -1,3 +1,11 @@\n+2000-03-11  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* lex.c (whitespace_cr): Compress consecutive calls to warning().\n+\t(do_identifier): Ditto for error().\n+\n+\t* pt.c (convert_nontype_argument): Ditto for cp_error().\n+\t(convert_template_argument): Ditto for cp_pedwarn().\n+\n 2000-03-11  Jason Merrill  <jason@casey.cygnus.com>\n \n \t* exception.cc (__check_null_eh_spec): New fn.\n@@ -1240,7 +1248,7 @@ Wed Jan 26 22:19:14 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \t(__class_type_info::do_find_public_subobj): Likewise.\n \t* tinfo2.cc (__dynamic_cast): Remap BOFF parameter.\t\n \n-2000-01-19  Gabriel Dos Reis  <gdr@codesourcery.coom>\n+2000-01-19  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* typeck.c (build_unary_op): Use cp_pedwarn, not pedwarn.\n \n@@ -1252,7 +1260,7 @@ Wed Jan 26 22:19:14 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \t* class.c (dump_class_hierarchy): Make format agree with argument;\n \tcast pointer to unsigned long and print with %lx.\n \t\n-2000-01-19  Gabriel Dos Reis  <gdr@codesourcery>\n+2000-01-19  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* decl2.c (lang_decode_option): Set default line-wrap length to 72.\n \t"}, {"sha": "35106dc1ba4f6d289faf8aff635ef22ec1547e45", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f4233d52069bed9f8d639aab84e1663ca08a8b/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f4233d52069bed9f8d639aab84e1663ca08a8b/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=b4f4233d52069bed9f8d639aab84e1663ca08a8b", "patch": "@@ -2183,8 +2183,7 @@ whitespace_cr (c)\n \t are undefined.  */\n       if (pedantic && !newline_warning)\n \t{\n-\t  warning (\"carriage return in source file\");\n-\t  warning (\"(we only warn about the first carriage return)\");\n+\t  warning (\"carriage return in source file (we only warn about the first carriage return)\");\n \t  newline_warning = 1;\n \t}\n       return 1;\n@@ -3495,8 +3494,7 @@ do_identifier (token, parsing, args)\n \n \t      if (! undeclared_variable_notice)\n \t\t{\n-\t\t  error (\"(Each undeclared identifier is reported only once\");\n-\t\t  error (\"for each function it appears in.)\");\n+\t\t  error (\"(Each undeclared identifier is reported only once for each function it appears in.)\");\n \t\t  undeclared_variable_notice = 1;\n \t\t}\n \t    }"}, {"sha": "4e5d05b69f840b89efd20b9a5164a62c6b3df394", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f4233d52069bed9f8d639aab84e1663ca08a8b/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f4233d52069bed9f8d639aab84e1663ca08a8b/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=b4f4233d52069bed9f8d639aab84e1663ca08a8b", "patch": "@@ -1,6 +1,7 @@\n \n /*  A Bison parser, made from parse.y\n-    by GNU Bison version 1.28  */\n+ by  GNU Bison version 1.27\n+  */\n \n #define YYBISON 1  /* Identify Bison output.  */\n \n@@ -4030,8 +4031,8 @@ static const short yycheck[] = {     4,\n     78,    79,    80,    81,    82,    83,    84,    85\n };\n /* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */\n-#line 3 \"/usr/lib/bison.simple\"\n-/* This file comes from bison-1.28.  */\n+#line 3 \"/BASE/dosreis/share/bison.simple\"\n+/* This file comes from bison-1.27.  */\n \n /* Skeleton output parser for bison,\n    Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.\n@@ -4244,7 +4245,7 @@ __yy_memcpy (char *to, char *from, unsigned int count)\n #endif\n #endif\n \f\n-#line 217 \"/usr/lib/bison.simple\"\n+#line 216 \"/BASE/dosreis/share/bison.simple\"\n \n /* The user can define YYPARSE_PARAM as the name of an argument to be passed\n    into yyparse.  The argument should have type void *.\n@@ -8229,7 +8230,7 @@ case 878:\n     break;}\n }\n    /* the action file gets copied in in place of this dollarsign */\n-#line 543 \"/usr/lib/bison.simple\"\n+#line 542 \"/BASE/dosreis/share/bison.simple\"\n \f\n   yyvsp -= yylen;\n   yyssp -= yylen;"}, {"sha": "a286f53283c8224abe240e9a08b23d8523861331", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4f4233d52069bed9f8d639aab84e1663ca08a8b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4f4233d52069bed9f8d639aab84e1663ca08a8b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b4f4233d52069bed9f8d639aab84e1663ca08a8b", "patch": "@@ -2742,9 +2742,8 @@ convert_nontype_argument (type, expr)\n \n       if (TREE_CODE (referent) == STRING_CST)\n \t{\n-\t  cp_error (\"string literal %E is not a valid template argument\", \n+\t  cp_error (\"string literal %E is not a valid template argument because it is the address of an object with static linkage\", \n \t\t    referent);\n-\t  error (\"because it is the address of an object with static linkage\");\n \t  return NULL_TREE;\n \t}\n \n@@ -3160,8 +3159,7 @@ convert_template_argument (parm, arg, args, complain, i, in_decl)\n   if (requires_type && ! is_type && TREE_CODE (arg) == SCOPE_REF\n       && TREE_CODE (TREE_OPERAND (arg, 0)) == TEMPLATE_TYPE_PARM)\n     {\n-      cp_pedwarn (\"to refer to a type member of a template parameter,\");\n-      cp_pedwarn (\"  use `typename %E'\", arg);\n+      cp_pedwarn (\"to refer to a type member of a template parameter, use `typename %E'\", arg);\n       \n       arg = make_typename_type (TREE_OPERAND (arg, 0),\n \t\t\t\tTREE_OPERAND (arg, 1),\n@@ -4300,10 +4298,8 @@ push_tinst_level (d)\n \treturn 0;\n \n       last_template_error_tick = tinst_level_tick;\n-      error (\"template instantiation depth exceeds maximum of %d\",\n-\t     max_tinst_depth);\n-      error (\" (use -ftemplate-depth-NN to increase the maximum)\");\n-      cp_error (\"  instantiating `%D'\", d);\n+      cp_error (\"template instantiation depth exceeds maximum of %d (use -ftemplate-depth-NN to increase the maximum) instantiating `%D'\",\n+\t     max_tinst_depth, d);\n \n       print_template_context (0);\n "}]}