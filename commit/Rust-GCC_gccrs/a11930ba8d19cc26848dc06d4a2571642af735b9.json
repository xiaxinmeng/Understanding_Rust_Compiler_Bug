{"sha": "a11930ba8d19cc26848dc06d4a2571642af735b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTExOTMwYmE4ZDE5Y2MyNjg0OGRjMDZkNGEyNTcxNjQyYWY3MzViOQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2010-10-19T01:28:50Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2010-10-19T01:28:50Z"}, "message": "io.h: Remove definition of the BT enumerator.\n\n2010-10-18  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\t* io/io.h: Remove definition of the BT enumerator.\n\t* libgfortran.h: Replace GFC_DTYPE enumerator with BT.\n\t* intrinsics/iso_c_generated_procs.c: Likewise\n\t* intrinsics/date_and_time.c: Likewise.\n\t* intrinsics/iso_c_binding.c: Likewise.\n\t* io/list_read.c: Likewise.\n\t* io/transfer.c: Likewise.\n\t* io/write.c: Likewise.\n\n2010-10-18  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\t* gfortran.h: Remove definition of bt enumerator.\n\t* libgfortran.h: Add bt enumerator type alighned with defintion.\n\tRemove the dtype enumerator, no longer used.\n\tpreviously given in libgfortran/io.h\n\t* trans-types.c: Use new bt enumerator.\n\t* trans-io.c: Likewise.\n\nFrom-SVN: r165675", "tree": {"sha": "57b515208fe72f75dd40e6e639f1fde700dcf61a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57b515208fe72f75dd40e6e639f1fde700dcf61a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a11930ba8d19cc26848dc06d4a2571642af735b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11930ba8d19cc26848dc06d4a2571642af735b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a11930ba8d19cc26848dc06d4a2571642af735b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a11930ba8d19cc26848dc06d4a2571642af735b9/comments", "author": null, "committer": null, "parents": [{"sha": "21016e43e2ead79d6dec8827a8c66339f467813b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21016e43e2ead79d6dec8827a8c66339f467813b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21016e43e2ead79d6dec8827a8c66339f467813b"}], "stats": {"total": 296, "additions": 118, "deletions": 178}, "files": [{"sha": "43360d8910893435464cfdb0f75f99028df76899", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11930ba8d19cc26848dc06d4a2571642af735b9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11930ba8d19cc26848dc06d4a2571642af735b9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a11930ba8d19cc26848dc06d4a2571642af735b9", "patch": "@@ -1,3 +1,12 @@\n+2010-10-18  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\t* gfortran.h: Remove definition of bt enumerator.\n+\t* libgfortran.h: Add bt enumerator type alighned with defintion.\n+\tRemove the dtype enumerator, no longer used.\n+\tpreviously given in libgfortran/io.h\n+\t* trans-types.c: Use new bt enumerator.\n+\t* trans-io.c: Likewise.\n+\n 2010-10-16  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* trans-io.c (gfc_build_io_library_fndecls):\n@@ -19,6 +28,7 @@\n \tthe iocall with the original version, otherwise the version\n \twith _WRITE.\n \t(transfer_array_desc):  Likewise.\n+\n 2010-10-15  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/45186"}, {"sha": "33c7ba6e1a5d50ce42bbf027df9f6e68f79f35c2", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11930ba8d19cc26848dc06d4a2571642af735b9/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11930ba8d19cc26848dc06d4a2571642af735b9/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=a11930ba8d19cc26848dc06d4a2571642af735b9", "patch": "@@ -139,14 +139,6 @@ typedef enum\n { FORM_FREE, FORM_FIXED, FORM_UNKNOWN }\n gfc_source_form;\n \n-/* Basic types.  BT_VOID is used by ISO C Binding so funcs like c_f_pointer\n-   can take any arg with the pointer attribute as a param.  */\n-typedef enum\n-{ BT_UNKNOWN = 1, BT_INTEGER, BT_REAL, BT_COMPLEX, BT_LOGICAL, BT_CHARACTER,\n-  BT_DERIVED, BT_CLASS, BT_PROCEDURE, BT_HOLLERITH, BT_VOID\n-}\n-bt;\n-\n /* Expression node types.  */\n typedef enum\n { EXPR_OP = 1, EXPR_FUNCTION, EXPR_CONSTANT, EXPR_VARIABLE,"}, {"sha": "85a73d8166c8e0058750bf34de6a664b166be0d2", "filename": "gcc/fortran/libgfortran.h", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11930ba8d19cc26848dc06d4a2571642af735b9/gcc%2Ffortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11930ba8d19cc26848dc06d4a2571642af735b9/gcc%2Ffortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flibgfortran.h?ref=a11930ba8d19cc26848dc06d4a2571642af735b9", "patch": "@@ -122,16 +122,11 @@ libgfortran_stat_codes;\n #define GFC_DTYPE_TYPE_MASK 0x38\n #define GFC_DTYPE_SIZE_SHIFT 6\n \n+/* Basic types.  BT_VOID is used by ISO C Binding so funcs like c_f_pointer\n+   can take any arg with the pointer attribute as a param.  These are also\n+   used in the run-time library for IO.  */\n typedef enum\n-{\n-  GFC_DTYPE_UNKNOWN = 0,\n-  GFC_DTYPE_INTEGER,\n-  /* TODO: recognize logical types.  */\n-  GFC_DTYPE_LOGICAL,\n-  GFC_DTYPE_REAL,\n-  GFC_DTYPE_COMPLEX,\n-  GFC_DTYPE_DERIVED,\n-  GFC_DTYPE_CHARACTER\n+{ BT_UNKNOWN = 0, BT_INTEGER, BT_LOGICAL, BT_REAL, BT_COMPLEX,\n+  BT_DERIVED, BT_CHARACTER, BT_CLASS, BT_PROCEDURE, BT_HOLLERITH, BT_VOID\n }\n-dtype;\n-\n+bt;"}, {"sha": "2ac3e5c11662f9694592ba654724ea81e425d358", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11930ba8d19cc26848dc06d4a2571642af735b9/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11930ba8d19cc26848dc06d4a2571642af735b9/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=a11930ba8d19cc26848dc06d4a2571642af735b9", "patch": "@@ -1572,33 +1572,7 @@ transfer_namelist_element (stmtblock_t * block, const char * var_name,\n     }\n   else\n     {\n-      itype = GFC_DTYPE_UNKNOWN;\n-\n-      switch (ts->type)\n-\n-\t{\n-\tcase BT_INTEGER:\n-\t  itype = GFC_DTYPE_INTEGER;\n-\t  break;\n-\tcase BT_LOGICAL:\n-\t  itype = GFC_DTYPE_LOGICAL;\n-\t  break;\n-\tcase BT_REAL:\n-\t  itype = GFC_DTYPE_REAL;\n-\t  break;\n-\tcase BT_COMPLEX:\n-\t  itype = GFC_DTYPE_COMPLEX;\n-\tbreak;\n-\tcase BT_DERIVED:\n-\t  itype = GFC_DTYPE_DERIVED;\n-\t  break;\n-\tcase BT_CHARACTER:\n-\t  itype = GFC_DTYPE_CHARACTER;\n-\t  break;\n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n-\n+      itype = ts->type;\n       dtype = IARG (itype << GFC_DTYPE_TYPE_SHIFT);\n     }\n "}, {"sha": "1ccba7a656d0185f518d9dd995b31310b94e7e66", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11930ba8d19cc26848dc06d4a2571642af735b9/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11930ba8d19cc26848dc06d4a2571642af735b9/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=a11930ba8d19cc26848dc06d4a2571642af735b9", "patch": "@@ -1319,28 +1319,28 @@ gfc_get_dtype (tree type)\n   switch (TREE_CODE (etype))\n     {\n     case INTEGER_TYPE:\n-      n = GFC_DTYPE_INTEGER;\n+      n = BT_INTEGER;\n       break;\n \n     case BOOLEAN_TYPE:\n-      n = GFC_DTYPE_LOGICAL;\n+      n = BT_LOGICAL;\n       break;\n \n     case REAL_TYPE:\n-      n = GFC_DTYPE_REAL;\n+      n = BT_REAL;\n       break;\n \n     case COMPLEX_TYPE:\n-      n = GFC_DTYPE_COMPLEX;\n+      n = BT_COMPLEX;\n       break;\n \n     /* We will never have arrays of arrays.  */\n     case RECORD_TYPE:\n-      n = GFC_DTYPE_DERIVED;\n+      n = BT_DERIVED;\n       break;\n \n     case ARRAY_TYPE:\n-      n = GFC_DTYPE_CHARACTER;\n+      n = BT_CHARACTER;\n       break;\n \n     default:"}, {"sha": "58a7a93bbcb6d5f2a48e53b4d2cfbfc029ecf44f", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11930ba8d19cc26848dc06d4a2571642af735b9/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11930ba8d19cc26848dc06d4a2571642af735b9/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=a11930ba8d19cc26848dc06d4a2571642af735b9", "patch": "@@ -1,3 +1,14 @@\n+2010-10-18  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\t* io/io.h: Remove definition of the BT enumerator.\n+\t* libgfortran.h: Replace GFC_DTYPE enumerator with BT.\n+\t* intrinsics/iso_c_generated_procs.c: Likewise\n+\t* intrinsics/date_and_time.c: Likewise.\n+\t* intrinsics/iso_c_binding.c: Likewise.\n+\t* io/list_read.c: Likewise.\n+\t* io/transfer.c: Likewise.\n+\t* io/write.c: Likewise.\n+\n 2010-10-16  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/20165"}, {"sha": "dea835b36f02843467845576c4cddba64acebf08", "filename": "libgfortran/intrinsics/date_and_time.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11930ba8d19cc26848dc06d4a2571642af735b9/libgfortran%2Fintrinsics%2Fdate_and_time.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11930ba8d19cc26848dc06d4a2571642af735b9/libgfortran%2Fintrinsics%2Fdate_and_time.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fdate_and_time.c?ref=a11930ba8d19cc26848dc06d4a2571642af735b9", "patch": "@@ -349,7 +349,7 @@ secnds (GFC_REAL_4 *x)\n   /* Make the INTEGER*4 array for passing to date_and_time.  */\n   gfc_array_i4 *avalues = internal_malloc_size (sizeof (gfc_array_i4));\n   avalues->data = &values[0];\n-  GFC_DESCRIPTOR_DTYPE (avalues) = ((GFC_DTYPE_REAL << GFC_DTYPE_TYPE_SHIFT)\n+  GFC_DESCRIPTOR_DTYPE (avalues) = ((BT_REAL << GFC_DTYPE_TYPE_SHIFT)\n \t\t\t\t        & GFC_DTYPE_TYPE_MASK) +\n \t\t\t\t    (4 << GFC_DTYPE_SIZE_SHIFT);\n "}, {"sha": "5baa14ca599d74fdeea6200c20c4c64746bc42a3", "filename": "libgfortran/intrinsics/iso_c_binding.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11930ba8d19cc26848dc06d4a2571642af735b9/libgfortran%2Fintrinsics%2Fiso_c_binding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11930ba8d19cc26848dc06d4a2571642af735b9/libgfortran%2Fintrinsics%2Fiso_c_binding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fiso_c_binding.c?ref=a11930ba8d19cc26848dc06d4a2571642af735b9", "patch": "@@ -65,7 +65,7 @@ ISO_C_BINDING_PREFIX (c_f_pointer) (void *c_ptr_in,\n       /* Put in the element size.  */\n       f_ptr_out->dtype = f_ptr_out->dtype | (elemSize << GFC_DTYPE_SIZE_SHIFT);\n \n-      /* Set the data type (e.g., GFC_DTYPE_INTEGER).  */\n+      /* Set the data type (e.g., BT_INTEGER).  */\n       f_ptr_out->dtype = f_ptr_out->dtype | (type << GFC_DTYPE_TYPE_SHIFT);\n     }\n   \n@@ -184,6 +184,6 @@ ISO_C_BINDING_PREFIX (c_f_pointer_d0) (void *c_ptr_in,\n     {\n       f_ptr_out->dtype = f_ptr_out->dtype & (~GFC_DTYPE_TYPE_MASK);\n       f_ptr_out->dtype = f_ptr_out->dtype\n-\t\t\t | (GFC_DTYPE_DERIVED << GFC_DTYPE_TYPE_SHIFT);\n+\t\t\t | (BT_DERIVED << GFC_DTYPE_TYPE_SHIFT);\n     }\n }"}, {"sha": "7172858255e40dcb3042a96cdb1664b2b14d5f07", "filename": "libgfortran/intrinsics/iso_c_generated_procs.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11930ba8d19cc26848dc06d4a2571642af735b9/libgfortran%2Fintrinsics%2Fiso_c_generated_procs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11930ba8d19cc26848dc06d4a2571642af735b9/libgfortran%2Fintrinsics%2Fiso_c_generated_procs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fiso_c_generated_procs.c?ref=a11930ba8d19cc26848dc06d4a2571642af735b9", "patch": "@@ -139,7 +139,7 @@ ISO_C_BINDING_PREFIX (c_f_pointer_i1) (void *c_ptr_in,\n {\n   /* Here we have an integer(kind=1).  */\n   ISO_C_BINDING_PREFIX (c_f_pointer) (c_ptr_in, f_ptr_out, shape,\n-\t\t\t\t      (int) GFC_DTYPE_INTEGER,\n+\t\t\t\t      (int) BT_INTEGER,\n \t\t\t\t      (int) sizeof (GFC_INTEGER_1));\n }\n #endif\n@@ -162,7 +162,7 @@ ISO_C_BINDING_PREFIX (c_f_pointer_i2) (void *c_ptr_in,\n {\n   /* Here we have an integer(kind=2).  */\n   ISO_C_BINDING_PREFIX (c_f_pointer) (c_ptr_in, f_ptr_out, shape,\n-\t\t\t\t      (int) GFC_DTYPE_INTEGER,\n+\t\t\t\t      (int) BT_INTEGER,\n \t\t\t\t      (int) sizeof (GFC_INTEGER_2));\n }\n #endif\n@@ -181,7 +181,7 @@ ISO_C_BINDING_PREFIX (c_f_pointer_i4) (void *c_ptr_in,\n {\n   /* Here we have an integer(kind=4).  */\n   ISO_C_BINDING_PREFIX (c_f_pointer) (c_ptr_in, f_ptr_out, shape,\n-\t\t\t\t      (int) GFC_DTYPE_INTEGER,\n+\t\t\t\t      (int) BT_INTEGER,\n \t\t\t\t      (int) sizeof (GFC_INTEGER_4));\n }\n #endif\n@@ -200,7 +200,7 @@ ISO_C_BINDING_PREFIX (c_f_pointer_i8) (void *c_ptr_in,\n {\n   /* Here we have an integer(kind=8).  */\n   ISO_C_BINDING_PREFIX (c_f_pointer) (c_ptr_in, f_ptr_out, shape,\n-\t\t\t\t      (int) GFC_DTYPE_INTEGER,\n+\t\t\t\t      (int) BT_INTEGER,\n \t\t\t\t      (int) sizeof (GFC_INTEGER_8));\n }\n #endif\n@@ -223,7 +223,7 @@ ISO_C_BINDING_PREFIX (c_f_pointer_i16) (void *c_ptr_in,\n {\n   /* Here we have an integer(kind=16).  */\n   ISO_C_BINDING_PREFIX (c_f_pointer) (c_ptr_in, f_ptr_out, shape,\n-\t\t\t\t      (int) GFC_DTYPE_INTEGER,\n+\t\t\t\t      (int) BT_INTEGER,\n \t\t\t\t      (int) sizeof (GFC_INTEGER_16));\n }\n #endif\n@@ -242,7 +242,7 @@ ISO_C_BINDING_PREFIX (c_f_pointer_r4) (void *c_ptr_in,\n {\n   /* Here we have an real(kind=4).  */\n   ISO_C_BINDING_PREFIX (c_f_pointer) (c_ptr_in, f_ptr_out, shape,\n-\t\t\t\t      (int) GFC_DTYPE_REAL,\n+\t\t\t\t      (int) BT_REAL,\n \t\t\t\t      (int) sizeof (GFC_REAL_4));\n }\n #endif\n@@ -261,7 +261,7 @@ ISO_C_BINDING_PREFIX (c_f_pointer_r8) (void *c_ptr_in,\n {\n   /* Here we have an real(kind=8).  */\n   ISO_C_BINDING_PREFIX (c_f_pointer) (c_ptr_in, f_ptr_out, shape,\n-\t\t\t\t      (int) GFC_DTYPE_REAL,\n+\t\t\t\t      (int) BT_REAL,\n \t\t\t\t      (int) sizeof (GFC_REAL_8));\n }\n #endif\n@@ -280,7 +280,7 @@ ISO_C_BINDING_PREFIX (c_f_pointer_r10) (void *c_ptr_in,\n {\n   /* Here we have an real(kind=10).  */\n   ISO_C_BINDING_PREFIX (c_f_pointer) (c_ptr_in, f_ptr_out, shape,\n-\t\t\t\t      (int) GFC_DTYPE_REAL,\n+\t\t\t\t      (int) BT_REAL,\n \t\t\t\t      (int) sizeof (GFC_REAL_10));\n }\n #endif\n@@ -299,7 +299,7 @@ ISO_C_BINDING_PREFIX (c_f_pointer_r16) (void *c_ptr_in,\n {\n   /* Here we have an real(kind=16).  */\n   ISO_C_BINDING_PREFIX (c_f_pointer) (c_ptr_in, f_ptr_out, shape,\n-\t\t\t\t      (int) GFC_DTYPE_REAL,\n+\t\t\t\t      (int) BT_REAL,\n \t\t\t\t      (int) sizeof (GFC_REAL_16));\n }\n #endif\n@@ -318,7 +318,7 @@ ISO_C_BINDING_PREFIX (c_f_pointer_c4) (void *c_ptr_in,\n {\n   /* Here we have an complex(kind=4).  */\n   ISO_C_BINDING_PREFIX (c_f_pointer) (c_ptr_in, f_ptr_out, shape,\n-\t\t\t\t      (int) GFC_DTYPE_COMPLEX,\n+\t\t\t\t      (int) BT_COMPLEX,\n \t\t\t\t      (int) sizeof (GFC_COMPLEX_4));\n }\n #endif\n@@ -337,7 +337,7 @@ ISO_C_BINDING_PREFIX (c_f_pointer_c8) (void *c_ptr_in,\n {\n   /* Here we have an complex(kind=8).  */\n   ISO_C_BINDING_PREFIX (c_f_pointer) (c_ptr_in, f_ptr_out, shape,\n-\t\t\t\t      (int) GFC_DTYPE_COMPLEX,\n+\t\t\t\t      (int) BT_COMPLEX,\n \t\t\t\t      (int) sizeof (GFC_COMPLEX_8));\n }\n #endif\n@@ -356,7 +356,7 @@ ISO_C_BINDING_PREFIX (c_f_pointer_c10) (void *c_ptr_in,\n {\n   /* Here we have an complex(kind=10).  */\n   ISO_C_BINDING_PREFIX (c_f_pointer) (c_ptr_in, f_ptr_out, shape,\n-\t\t\t\t      (int) GFC_DTYPE_COMPLEX,\n+\t\t\t\t      (int) BT_COMPLEX,\n \t\t\t\t      (int) sizeof (GFC_COMPLEX_10));\n }\n #endif\n@@ -375,7 +375,7 @@ ISO_C_BINDING_PREFIX (c_f_pointer_c16) (void *c_ptr_in,\n {\n   /* Here we have an complex(kind=16).  */\n   ISO_C_BINDING_PREFIX (c_f_pointer) (c_ptr_in, f_ptr_out, shape,\n-\t\t\t\t      (int) GFC_DTYPE_COMPLEX,\n+\t\t\t\t      (int) BT_COMPLEX,\n \t\t\t\t      (int) sizeof (GFC_COMPLEX_16));\n }\n #endif\n@@ -392,7 +392,7 @@ ISO_C_BINDING_PREFIX (c_f_pointer_s0) (void *c_ptr_in,\n {\n   /* Here we have a character string of len=1.  */\n   ISO_C_BINDING_PREFIX (c_f_pointer) (c_ptr_in, f_ptr_out, shape,\n-\t\t\t\t      (int) GFC_DTYPE_CHARACTER,\n+\t\t\t\t      (int) BT_CHARACTER,\n \t\t\t\t      (int) sizeof (char));\n }\n #endif\n@@ -409,7 +409,7 @@ ISO_C_BINDING_PREFIX (c_f_pointer_l1) (void *c_ptr_in,\n {\n   /* Here we have a logical of kind=1.\t*/\n   ISO_C_BINDING_PREFIX (c_f_pointer) (c_ptr_in, f_ptr_out, shape,\n-\t\t\t\t      (int) GFC_DTYPE_LOGICAL,\n+\t\t\t\t      (int) BT_LOGICAL,\n \t\t\t\t      (int) sizeof (GFC_LOGICAL_1));\n }\n #endif\n@@ -426,7 +426,7 @@ ISO_C_BINDING_PREFIX (c_f_pointer_l2) (void *c_ptr_in,\n {\n   /* Here we have a logical of kind=2.\t*/\n   ISO_C_BINDING_PREFIX (c_f_pointer) (c_ptr_in, f_ptr_out, shape,\n-\t\t\t\t      (int) GFC_DTYPE_LOGICAL,\n+\t\t\t\t      (int) BT_LOGICAL,\n \t\t\t\t      (int) sizeof (GFC_LOGICAL_2));\n }\n #endif\n@@ -443,7 +443,7 @@ ISO_C_BINDING_PREFIX (c_f_pointer_l4) (void *c_ptr_in,\n {\n   /* Here we have a logical of kind=4.\t*/\n   ISO_C_BINDING_PREFIX (c_f_pointer) (c_ptr_in, f_ptr_out, shape,\n-\t\t\t\t      (int) GFC_DTYPE_LOGICAL,\n+\t\t\t\t      (int) BT_LOGICAL,\n \t\t\t\t      (int) sizeof (GFC_LOGICAL_4));\n }\n #endif\n@@ -460,7 +460,7 @@ ISO_C_BINDING_PREFIX (c_f_pointer_l8) (void *c_ptr_in,\n {\n   /* Here we have a logical of kind=8.\t*/\n   ISO_C_BINDING_PREFIX (c_f_pointer) (c_ptr_in, f_ptr_out, shape,\n-\t\t\t\t      (int) GFC_DTYPE_LOGICAL,\n+\t\t\t\t      (int) BT_LOGICAL,\n \t\t\t\t      (int) sizeof (GFC_LOGICAL_8));\n }\n #endif"}, {"sha": "5089b6f78771624285db23b20243cbfc04051855", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11930ba8d19cc26848dc06d4a2571642af735b9/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11930ba8d19cc26848dc06d4a2571642af735b9/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=a11930ba8d19cc26848dc06d4a2571642af735b9", "patch": "@@ -34,14 +34,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include <setjmp.h>\n #include <gthr.h>\n \n-/* Basic types used in data transfers.  */\n-\n-typedef enum\n-{ BT_NULL, BT_INTEGER, BT_LOGICAL, BT_CHARACTER, BT_REAL,\n-  BT_COMPLEX\n-}\n-bt;\n-\n /* Forward declarations.  */\n struct st_parameter_dt;\n typedef struct stream stream;\n@@ -114,8 +106,8 @@ format_hash_entry;\n \n typedef struct namelist_type\n {\n-  /* Object type, stored as GFC_DTYPE_xxxx.  */\n-  dtype type;\n+  /* Object type.  */\n+  bt type;\n \n   /* Object name.  */\n   char * var_name;"}, {"sha": "113b469bfce0be586845ce6afd753124c0ebc428", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11930ba8d19cc26848dc06d4a2571642af735b9/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11930ba8d19cc26848dc06d4a2571642af735b9/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=a11930ba8d19cc26848dc06d4a2571642af735b9", "patch": "@@ -1668,7 +1668,7 @@ check_type (st_parameter_dt *dtp, bt type, int len)\n {\n   char message[100];\n \n-  if (dtp->u.p.saved_type != BT_NULL && dtp->u.p.saved_type != type)\n+  if (dtp->u.p.saved_type != BT_UNKNOWN && dtp->u.p.saved_type != type)\n     {\n       sprintf (message, \"Read type %s where %s was expected for item %d\",\n \t\t  type_name (dtp->u.p.saved_type), type_name (type),\n@@ -1678,7 +1678,7 @@ check_type (st_parameter_dt *dtp, bt type, int len)\n       return 1;\n     }\n \n-  if (dtp->u.p.saved_type == BT_NULL || dtp->u.p.saved_type == BT_CHARACTER)\n+  if (dtp->u.p.saved_type == BT_UNKNOWN || dtp->u.p.saved_type == BT_CHARACTER)\n     return 0;\n \n   if (dtp->u.p.saved_length != len)\n@@ -1771,7 +1771,7 @@ list_formatted_read_scalar (st_parameter_dt *dtp, volatile bt type, void *p,\n \t    finish_separator (dtp);\n         }\n \n-      dtp->u.p.saved_type = BT_NULL;\n+      dtp->u.p.saved_type = BT_UNKNOWN;\n       dtp->u.p.repeat_count = 1;\n     }\n \n@@ -1802,7 +1802,7 @@ list_formatted_read_scalar (st_parameter_dt *dtp, volatile bt type, void *p,\n       internal_error (&dtp->common, \"Bad type for list read\");\n     }\n \n-  if (dtp->u.p.saved_type != BT_CHARACTER && dtp->u.p.saved_type != BT_NULL)\n+  if (dtp->u.p.saved_type != BT_CHARACTER && dtp->u.p.saved_type != BT_UNKNOWN)\n     dtp->u.p.saved_length = size;\n \n   if ((dtp->common.flags & IOPARM_LIBRETURN_MASK) != IOPARM_LIBRETURN_OK)\n@@ -1853,8 +1853,11 @@ list_formatted_read_scalar (st_parameter_dt *dtp, volatile bt type, void *p,\n \t}\n       break;\n \n-    case BT_NULL:\n+    case BT_UNKNOWN:\n       break;\n+\n+    default:\n+      internal_error (&dtp->common, \"Bad type for list read\");\n     }\n \n   if (--dtp->u.p.repeat_count <= 0)\n@@ -2362,20 +2365,20 @@ nml_read_obj (st_parameter_dt *dtp, namelist_info * nl, index_type offset,\n   len = nl->len;\n   switch (nl->type)\n   {\n-    case GFC_DTYPE_INTEGER:\n-    case GFC_DTYPE_LOGICAL:\n+    case BT_INTEGER:\n+    case BT_LOGICAL:\n       dlen = len;\n       break;\n \n-    case GFC_DTYPE_REAL:\n+    case BT_REAL:\n       dlen = size_from_real_kind (len);\n       break;\n \n-    case GFC_DTYPE_COMPLEX:\n+    case BT_COMPLEX:\n       dlen = size_from_complex_kind (len);\n       break;\n \n-    case GFC_DTYPE_CHARACTER:\n+    case BT_CHARACTER:\n       dlen = chigh ? (chigh - clow + 1) : nl->string_length;\n       break;\n \n@@ -2407,40 +2410,37 @@ nml_read_obj (st_parameter_dt *dtp, namelist_info * nl, index_type offset,\n \t  if (dtp->u.p.input_complete)\n \t    return SUCCESS;\n \n-\t  /* BT_NULL (equivalent to GFC_DTYPE_UNKNOWN) falls through\n-\t     for nulls and is detected at default: of switch block.  */\n-\n-\t  dtp->u.p.saved_type = BT_NULL;\n+\t  dtp->u.p.saved_type = BT_UNKNOWN;\n \t  free_saved (dtp);\n \n           switch (nl->type)\n \t  {\n-\t  case GFC_DTYPE_INTEGER:\n+\t  case BT_INTEGER:\n \t      read_integer (dtp, len);\n               break;\n \n-\t  case GFC_DTYPE_LOGICAL:\n+\t  case BT_LOGICAL:\n \t      read_logical (dtp, len);\n               break;\n \n-\t  case GFC_DTYPE_CHARACTER:\n+\t  case BT_CHARACTER:\n \t      read_character (dtp, len);\n               break;\n \n-\t  case GFC_DTYPE_REAL:\n+\t  case BT_REAL:\n \t    /* Need to copy data back from the real location to the temp in order\n \t       to handle nml reads into arrays.  */\n \t    read_real (dtp, pdata, len);\n \t    memcpy (dtp->u.p.value, pdata, dlen);\n \t    break;\n \n-\t  case GFC_DTYPE_COMPLEX:\n+\t  case BT_COMPLEX:\n \t    /* Same as for REAL, copy back to temp.  */\n \t    read_complex (dtp, pdata, len, dlen);\n \t    memcpy (dtp->u.p.value, pdata, dlen);\n \t    break;\n \n-\t  case GFC_DTYPE_DERIVED:\n+\t  case BT_DERIVED:\n \t    obj_name_len = strlen (nl->var_name) + 1;\n \t    obj_name = get_mem (obj_name_len+1);\n \t    memcpy (obj_name, nl->var_name, obj_name_len-1);\n@@ -2500,15 +2500,12 @@ nml_read_obj (st_parameter_dt *dtp, namelist_info * nl, index_type offset,\n \t  return SUCCESS;\n \t}\n \n-      if (dtp->u.p.saved_type == BT_NULL)\n+      if (dtp->u.p.saved_type == BT_UNKNOWN)\n \t{\n \t  dtp->u.p.expanded_read = 0;\n \t  goto incr_idx;\n \t}\n \n-      /* Note the switch from GFC_DTYPE_type to BT_type at this point.\n-\t This comes about because the read functions return BT_types.  */\n-\n       switch (dtp->u.p.saved_type)\n       {\n \n@@ -2750,7 +2747,7 @@ nml_get_obj_data (st_parameter_dt *dtp, namelist_info **pprev_nl,\n \n   if (c == '%')\n     {\n-      if (nl->type != GFC_DTYPE_DERIVED)\n+      if (nl->type != BT_DERIVED)\n \t{\n \t  snprintf (nml_err_msg, nml_err_msg_size,\n \t\t    \"Attempt to get derived component for %s\", nl->var_name);\n@@ -2774,7 +2771,7 @@ nml_get_obj_data (st_parameter_dt *dtp, namelist_info **pprev_nl,\n   clow = 1;\n   chigh = 0;\n \n-  if (c == '(' && nl->type == GFC_DTYPE_CHARACTER)\n+  if (c == '(' && nl->type == BT_CHARACTER)\n     {\n       descriptor_dimension chd[1] = { {1, clow, nl->string_length} };\n       array_loop_spec ind[1] = { {1, clow, nl->string_length, 1} };\n@@ -2852,7 +2849,7 @@ nml_get_obj_data (st_parameter_dt *dtp, namelist_info **pprev_nl,\n      namelist_info if we have parsed a qualified derived type\n      component.  */\n \n-  if (nl->type == GFC_DTYPE_DERIVED)\n+  if (nl->type == BT_DERIVED)\n     nml_touch_nodes (nl);\n \n   if (first_nl)"}, {"sha": "e327eea8f8041c0620686c697dae9decd0356d2d", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 3, "deletions": 34, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11930ba8d19cc26848dc06d4a2571642af735b9/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11930ba8d19cc26848dc06d4a2571642af735b9/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=a11930ba8d19cc26848dc06d4a2571642af735b9", "patch": "@@ -1977,47 +1977,16 @@ transfer_array (st_parameter_dt *dtp, gfc_array_char *desc, int kind,\n   index_type count[GFC_MAX_DIMENSIONS];\n   index_type extent[GFC_MAX_DIMENSIONS];\n   index_type stride[GFC_MAX_DIMENSIONS];\n-  index_type stride0, rank, size, type, n;\n+  index_type stride0, rank, size, n;\n   size_t tsize;\n   char *data;\n   bt iotype;\n \n   if ((dtp->common.flags & IOPARM_LIBRETURN_MASK) != IOPARM_LIBRETURN_OK)\n     return;\n \n-  type = GFC_DESCRIPTOR_TYPE (desc);\n-  size = GFC_DESCRIPTOR_SIZE (desc);\n-\n-  /* FIXME: What a kludge: Array descriptors and the IO library use\n-     different enums for types.  */\n-  switch (type)\n-    {\n-    case GFC_DTYPE_UNKNOWN:\n-      iotype = BT_NULL;  /* Is this correct?  */\n-      break;\n-    case GFC_DTYPE_INTEGER:\n-      iotype = BT_INTEGER;\n-      break;\n-    case GFC_DTYPE_LOGICAL:\n-      iotype = BT_LOGICAL;\n-      break;\n-    case GFC_DTYPE_REAL:\n-      iotype = BT_REAL;\n-      break;\n-    case GFC_DTYPE_COMPLEX:\n-      iotype = BT_COMPLEX;\n-      break;\n-    case GFC_DTYPE_CHARACTER:\n-      iotype = BT_CHARACTER;\n-      size = charlen;\n-      break;\n-    case GFC_DTYPE_DERIVED:\n-      internal_error (&dtp->common,\n-\t\t\"Derived type I/O should have been handled via the frontend.\");\n-      break;\n-    default:\n-      internal_error (&dtp->common, \"transfer_array(): Bad type\");\n-    }\n+  iotype = (bt) GFC_DESCRIPTOR_TYPE (desc);\n+  size = iotype == BT_CHARACTER ? charlen : GFC_DESCRIPTOR_SIZE (desc);\n \n   rank = GFC_DESCRIPTOR_RANK (desc);\n   for (n = 0; n < rank; n++)"}, {"sha": "0a6aee1588e8d03a276d228d7d1e4b61d34a2e15", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11930ba8d19cc26848dc06d4a2571642af735b9/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11930ba8d19cc26848dc06d4a2571642af735b9/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=a11930ba8d19cc26848dc06d4a2571642af735b9", "patch": "@@ -1705,7 +1705,7 @@ nml_write_obj (st_parameter_dt *dtp, namelist_info * obj, index_type offset,\n   /* Write namelist variable names in upper case. If a derived type,\n      nothing is output.  If a component, base and base_name are set.  */\n \n-  if (obj->type != GFC_DTYPE_DERIVED)\n+  if (obj->type != BT_DERIVED)\n     {\n       namelist_write_newline (dtp);\n       write_character (dtp, \" \", 1, 1);\n@@ -1739,15 +1739,15 @@ nml_write_obj (st_parameter_dt *dtp, namelist_info * obj, index_type offset,\n   switch (obj->type)\n     {\n \n-    case GFC_DTYPE_REAL:\n+    case BT_REAL:\n       obj_size = size_from_real_kind (len);\n       break;\n \n-    case GFC_DTYPE_COMPLEX:\n+    case BT_COMPLEX:\n       obj_size = size_from_complex_kind (len);\n       break;\n \n-    case GFC_DTYPE_CHARACTER:\n+    case BT_CHARACTER:\n       obj_size = obj->string_length;\n       break;\n \n@@ -1783,7 +1783,7 @@ nml_write_obj (st_parameter_dt *dtp, namelist_info * obj, index_type offset,\n       /* Check for repeat counts of intrinsic types.  */\n \n       if ((elem_ctr < (nelem - 1)) &&\n-\t  (obj->type != GFC_DTYPE_DERIVED) &&\n+\t  (obj->type != BT_DERIVED) &&\n \t  !memcmp (p, (void*)(p + obj_size ), obj_size ))\n \t{\n \t  rep_ctr++;\n@@ -1808,15 +1808,15 @@ nml_write_obj (st_parameter_dt *dtp, namelist_info * obj, index_type offset,\n \t  switch (obj->type)\n \t    {\n \n-\t    case GFC_DTYPE_INTEGER:\n+\t    case BT_INTEGER:\n \t      write_integer (dtp, p, len);\n               break;\n \n-\t    case GFC_DTYPE_LOGICAL:\n+\t    case BT_LOGICAL:\n \t      write_logical (dtp, p, len);\n               break;\n \n-\t    case GFC_DTYPE_CHARACTER:\n+\t    case BT_CHARACTER:\n \t      tmp_delim = dtp->u.p.current_unit->delim_status;\n \t      if (dtp->u.p.nml_delim == '\"')\n \t\tdtp->u.p.current_unit->delim_status = DELIM_QUOTE;\n@@ -1826,17 +1826,17 @@ nml_write_obj (st_parameter_dt *dtp, namelist_info * obj, index_type offset,\n \t\tdtp->u.p.current_unit->delim_status = tmp_delim;\n               break;\n \n-\t    case GFC_DTYPE_REAL:\n+\t    case BT_REAL:\n \t      write_real (dtp, p, len);\n               break;\n \n-\t   case GFC_DTYPE_COMPLEX:\n+\t   case BT_COMPLEX:\n \t      dtp->u.p.no_leading_blank = 0;\n \t      num++;\n               write_complex (dtp, p, len, obj_size);\n               break;\n \n-\t    case GFC_DTYPE_DERIVED:\n+\t    case BT_DERIVED:\n \n \t      /* To treat a derived type, we need to build two strings:\n \t\t ext_name = the name, including qualifiers that prepends"}, {"sha": "cadd4367e4c259b1e1a59109a2ef2c9ef7ff3882", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a11930ba8d19cc26848dc06d4a2571642af735b9/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a11930ba8d19cc26848dc06d4a2571642af735b9/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=a11930ba8d19cc26848dc06d4a2571642af735b9", "patch": "@@ -418,68 +418,68 @@ typedef GFC_ARRAY_DESCRIPTOR (GFC_MAX_DIMENSIONS, GFC_LOGICAL_16) gfc_array_l16;\n \n #define GFC_DTYPE_TYPE_SIZE(desc) ((desc)->dtype & GFC_DTYPE_TYPE_SIZE_MASK)\n \n-#define GFC_DTYPE_INTEGER_1 ((GFC_DTYPE_INTEGER << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_INTEGER_1 ((BT_INTEGER << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_INTEGER_1) << GFC_DTYPE_SIZE_SHIFT))\n-#define GFC_DTYPE_INTEGER_2 ((GFC_DTYPE_INTEGER << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_INTEGER_2 ((BT_INTEGER << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_INTEGER_2) << GFC_DTYPE_SIZE_SHIFT))\n-#define GFC_DTYPE_INTEGER_4 ((GFC_DTYPE_INTEGER << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_INTEGER_4 ((BT_INTEGER << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_INTEGER_4) << GFC_DTYPE_SIZE_SHIFT))\n-#define GFC_DTYPE_INTEGER_8 ((GFC_DTYPE_INTEGER << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_INTEGER_8 ((BT_INTEGER << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_INTEGER_8) << GFC_DTYPE_SIZE_SHIFT))\n #ifdef HAVE_GFC_INTEGER_16\n-#define GFC_DTYPE_INTEGER_16 ((GFC_DTYPE_INTEGER << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_INTEGER_16 ((BT_INTEGER << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_INTEGER_16) << GFC_DTYPE_SIZE_SHIFT))\n #endif\n \n-#define GFC_DTYPE_LOGICAL_1 ((GFC_DTYPE_LOGICAL << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_LOGICAL_1 ((BT_LOGICAL << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_LOGICAL_1) << GFC_DTYPE_SIZE_SHIFT))\n-#define GFC_DTYPE_LOGICAL_2 ((GFC_DTYPE_LOGICAL << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_LOGICAL_2 ((BT_LOGICAL << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_LOGICAL_2) << GFC_DTYPE_SIZE_SHIFT))\n-#define GFC_DTYPE_LOGICAL_4 ((GFC_DTYPE_LOGICAL << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_LOGICAL_4 ((BT_LOGICAL << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_LOGICAL_4) << GFC_DTYPE_SIZE_SHIFT))\n-#define GFC_DTYPE_LOGICAL_8 ((GFC_DTYPE_LOGICAL << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_LOGICAL_8 ((BT_LOGICAL << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_LOGICAL_8) << GFC_DTYPE_SIZE_SHIFT))\n #ifdef HAVE_GFC_LOGICAL_16\n-#define GFC_DTYPE_LOGICAL_16 ((GFC_DTYPE_LOGICAL << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_LOGICAL_16 ((BT_LOGICAL << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_LOGICAL_16) << GFC_DTYPE_SIZE_SHIFT))\n #endif\n \n-#define GFC_DTYPE_REAL_4 ((GFC_DTYPE_REAL << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_REAL_4 ((BT_REAL << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_REAL_4) << GFC_DTYPE_SIZE_SHIFT))\n-#define GFC_DTYPE_REAL_8 ((GFC_DTYPE_REAL << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_REAL_8 ((BT_REAL << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_REAL_8) << GFC_DTYPE_SIZE_SHIFT))\n #ifdef HAVE_GFC_REAL_10\n-#define GFC_DTYPE_REAL_10  ((GFC_DTYPE_REAL << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_REAL_10  ((BT_REAL << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_REAL_10) << GFC_DTYPE_SIZE_SHIFT))\n #endif\n #ifdef HAVE_GFC_REAL_16\n-#define GFC_DTYPE_REAL_16 ((GFC_DTYPE_REAL << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_REAL_16 ((BT_REAL << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_REAL_16) << GFC_DTYPE_SIZE_SHIFT))\n #endif\n \n-#define GFC_DTYPE_COMPLEX_4 ((GFC_DTYPE_COMPLEX << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_COMPLEX_4 ((BT_COMPLEX << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_COMPLEX_4) << GFC_DTYPE_SIZE_SHIFT))\n-#define GFC_DTYPE_COMPLEX_8 ((GFC_DTYPE_COMPLEX << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_COMPLEX_8 ((BT_COMPLEX << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_COMPLEX_8) << GFC_DTYPE_SIZE_SHIFT))\n #ifdef HAVE_GFC_COMPLEX_10\n-#define GFC_DTYPE_COMPLEX_10 ((GFC_DTYPE_COMPLEX << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_COMPLEX_10 ((BT_COMPLEX << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_COMPLEX_10) << GFC_DTYPE_SIZE_SHIFT))\n #endif\n #ifdef HAVE_GFC_COMPLEX_16\n-#define GFC_DTYPE_COMPLEX_16 ((GFC_DTYPE_COMPLEX << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_COMPLEX_16 ((BT_COMPLEX << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_COMPLEX_16) << GFC_DTYPE_SIZE_SHIFT))\n #endif\n \n-#define GFC_DTYPE_DERIVED_1 ((GFC_DTYPE_DERIVED << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_DERIVED_1 ((BT_DERIVED << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_INTEGER_1) << GFC_DTYPE_SIZE_SHIFT))\n-#define GFC_DTYPE_DERIVED_2 ((GFC_DTYPE_DERIVED << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_DERIVED_2 ((BT_DERIVED << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_INTEGER_2) << GFC_DTYPE_SIZE_SHIFT))\n-#define GFC_DTYPE_DERIVED_4 ((GFC_DTYPE_DERIVED << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_DERIVED_4 ((BT_DERIVED << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_INTEGER_4) << GFC_DTYPE_SIZE_SHIFT))\n-#define GFC_DTYPE_DERIVED_8 ((GFC_DTYPE_DERIVED << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_DERIVED_8 ((BT_DERIVED << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_INTEGER_8) << GFC_DTYPE_SIZE_SHIFT))\n #ifdef HAVE_GFC_INTEGER_16\n-#define GFC_DTYPE_DERIVED_16 ((GFC_DTYPE_DERIVED << GFC_DTYPE_TYPE_SHIFT) \\\n+#define GFC_DTYPE_DERIVED_16 ((BT_DERIVED << GFC_DTYPE_TYPE_SHIFT) \\\n    | (sizeof(GFC_INTEGER_16) << GFC_DTYPE_SIZE_SHIFT))\n #endif\n "}]}