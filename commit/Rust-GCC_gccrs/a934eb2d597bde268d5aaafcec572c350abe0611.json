{"sha": "a934eb2d597bde268d5aaafcec572c350abe0611", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkzNGViMmQ1OTdiZGUyNjhkNWFhYWZjZWM1NzJjMzUwYWJlMDYxMQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2010-02-15T17:27:35Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-02-15T17:27:35Z"}, "message": "tm.texi (TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST): Document.\n\n\t* doc/tm.texi (TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST): Document.\n\t(TARGET_VECTORIZE_VECTOR_ALIGNMENT_REACHABLE): Likewise.\n\t(TARGET_VECTORIZE_BUILTIN_VEC_PERM): Likewise.\n\t(TARGET_VECTORIZE_BUILTIN_VEC_PERM_OK): Likewise.\n\n\t* doc/tm.texi (TARGET_VECTORIZE_BUILTIN_CONVERSION): Fix argument types.\n\n\t* doc/tm.texi (TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION):\n\tFix argument types.\n\n\t* doc/tm.texi (TARGET_SCHED_DFA_NEW_CYCLE): Add argument names.\n\tRewrite text to refer to the names.\n\nFrom-SVN: r156779", "tree": {"sha": "e871f50fbc9efdd845464093837905f17591e398", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e871f50fbc9efdd845464093837905f17591e398"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a934eb2d597bde268d5aaafcec572c350abe0611", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a934eb2d597bde268d5aaafcec572c350abe0611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a934eb2d597bde268d5aaafcec572c350abe0611", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a934eb2d597bde268d5aaafcec572c350abe0611/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "02edd2f6e9c389fdade17e42df81f84f7b6e5e94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02edd2f6e9c389fdade17e42df81f84f7b6e5e94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02edd2f6e9c389fdade17e42df81f84f7b6e5e94"}], "stats": {"total": 64, "additions": 49, "deletions": 15}, "files": [{"sha": "9b0682c897759a0a708d774dc17f63210c36e7d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a934eb2d597bde268d5aaafcec572c350abe0611/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a934eb2d597bde268d5aaafcec572c350abe0611/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a934eb2d597bde268d5aaafcec572c350abe0611", "patch": "@@ -1,3 +1,18 @@\n+2010-02-15  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* doc/tm.texi (TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST): Document.\n+\t(TARGET_VECTORIZE_VECTOR_ALIGNMENT_REACHABLE): Likewise.\n+\t(TARGET_VECTORIZE_BUILTIN_VEC_PERM): Likewise.\n+\t(TARGET_VECTORIZE_BUILTIN_VEC_PERM_OK): Likewise.\n+\n+\t* doc/tm.texi (TARGET_VECTORIZE_BUILTIN_CONVERSION): Fix argument types.\n+\n+\t* doc/tm.texi (TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION):\n+\tFix argument types.\n+\n+\t* doc/tm.texi (TARGET_SCHED_DFA_NEW_CYCLE): Add argument names.\n+\tRewrite text to refer to the names.\n+\n 2010-02-15  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* config/i386/i386-builtin-types.def"}, {"sha": "4de6e2dd2cdb0fe0b2c5945b10a61abf3a6fc0f3", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a934eb2d597bde268d5aaafcec572c350abe0611/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a934eb2d597bde268d5aaafcec572c350abe0611/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a934eb2d597bde268d5aaafcec572c350abe0611", "patch": "@@ -5684,25 +5684,44 @@ preserved (e.g.@: used only by a reduction computation). Otherwise, the\n @code{widen_mult_hi/lo} idioms will be used.\n @end deftypefn\n \n-@deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_CONVERSION (enum tree_code @var{code}, tree @var{type})\n+@deftypefn {Target Hook} int TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST (bool @var{runtime_test})\n+Returns the cost to be added to the overhead involved with executing \n+the vectorized version of a loop.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} bool TARGET_VECTORIZE_VECTOR_ALIGNMENT_REACHABLE (const_tree @var{type}, bool @var{is_packed})\n+Return true if vector alignment is reachable (by peeling N iterations) for the given type.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_VEC_PERM (tree @var{type}, tree *@var{mask_element_type})\n+Target builtin that implements vector permute.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} bool TARGET_VECTORIZE_BUILTIN_VEC_PERM_OK (tree @var{vec_type}, tree @var{mask})\n+Return true if a vector created for @code{builtin_vec_perm} is valid.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_CONVERSION (unsigned @var{code}, tree @var{type})\n This hook should return the DECL of a function that implements conversion of the\n input vector of type @var{type}.\n If @var{type} is an integral type, the result of the conversion is a vector of\n floating-point type of the same size.\n If @var{type} is a floating-point type, the result of the conversion is a vector\n of integral type of the same size.\n-@var{code} specifies how the conversion is to be applied\n+The value of @var{code} is one of the enumerators in @code{enum tree_code} and\n+specifies how the conversion is to be applied\n (truncation, rounding, etc.).\n \n If this hook is defined, the autovectorizer will use the\n @code{TARGET_VECTORIZE_BUILTIN_CONVERSION} target hook when vectorizing\n conversion. Otherwise, it will return @code{NULL_TREE}.\n @end deftypefn\n \n-@deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION (enum built_in_function @var{code}, tree @var{vec_type_out}, tree @var{vec_type_in})\n+@deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION (unsigned @var{code}, tree @var{vec_type_out}, tree @var{vec_type_in})\n This hook should return the decl of a function that implements the vectorized\n variant of the builtin function with builtin function code @var{code} or\n-@code{NULL_TREE} if such a function is not available.  The return type of\n+@code{NULL_TREE} if such a function is not available.  The value of @var{code}\n+is one of the enumerators in @code{enum built_in_function}.  The return type of\n the vectorized function shall be of vector type @var{vec_type_out} and the\n argument types should be @var{vec_type_in}.\n @end deftypefn\n@@ -6557,18 +6576,18 @@ be issued.\n The default is that any ready insns can be chosen to be issued.\n @end deftypefn\n \n-@deftypefn {Target Hook} int TARGET_SCHED_DFA_NEW_CYCLE (FILE *, int, rtx, int, int, int *)\n+@deftypefn {Target Hook} int TARGET_SCHED_DFA_NEW_CYCLE (FILE *@var{dump}, int @var{verbose}, rtx @var{insn}, int @var{last_clock}, int @var{clock}, int *@var{sort_p})\n \n-This hook is called by the insn scheduler before issuing insn passed\n-as the third parameter on given cycle.  If the hook returns nonzero,\n-the insn is not issued on given processors cycle.  Instead of that,\n-the processor cycle is advanced.  If the value passed through the last\n-parameter is zero, the insn ready queue is not sorted on the new cycle\n-start as usually.  The first parameter passes file for debugging\n-output.  The second one passes the scheduler verbose level of the\n-debugging output.  The forth and the fifth parameter values are\n-correspondingly processor cycle on which the previous insn has been\n-issued and the current processor cycle.\n+This hook is called by the insn scheduler before issuing @var{insn}\n+on cycle @var{clock}.  If the hook returns nonzero,\n+@var{insn} is not issued on this processor cycle.  Instead,\n+the processor cycle is advanced.  If *@var{sort_p}\n+is zero, the insn ready queue is not sorted on the new cycle\n+start as usually.  @var{dump} and @var{verbose} specify the file and\n+verbosity level to use for debugging output.\n+@var{last_clock} and @var{clock} are, respectively, the\n+processor cycle on which the previous insn has been issued,\n+and the current processor cycle.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_SCHED_IS_COSTLY_DEPENDENCE (struct _dep *@var{_dep}, int @var{cost}, int @var{distance})"}]}