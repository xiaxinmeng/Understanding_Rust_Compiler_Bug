{"sha": "53f00dde262894c19844a94404d7f7510f182e97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNmMDBkZGUyNjI4OTRjMTk4NDRhOTQ0MDRkN2Y3NTEwZjE4MmU5Nw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-07-15T06:09:38Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-07-15T06:09:38Z"}, "message": "i386.h (SHIFT_COUNT_TRUNCATED): Expand comment.\n\n\t* config/i386/i386.h (SHIFT_COUNT_TRUNCATED): Expand comment.\n\nFrom-SVN: r162206", "tree": {"sha": "d6003a76d887d189c78eb8ef67c27d70313ab707", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6003a76d887d189c78eb8ef67c27d70313ab707"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53f00dde262894c19844a94404d7f7510f182e97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53f00dde262894c19844a94404d7f7510f182e97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53f00dde262894c19844a94404d7f7510f182e97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53f00dde262894c19844a94404d7f7510f182e97/comments", "author": null, "committer": null, "parents": [{"sha": "8ffadef9522724304913886c7df86db26e46efc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ffadef9522724304913886c7df86db26e46efc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ffadef9522724304913886c7df86db26e46efc7"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "3a2e01b82caa4be92b7f44ce2a23c254d3dd6a2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f00dde262894c19844a94404d7f7510f182e97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f00dde262894c19844a94404d7f7510f182e97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53f00dde262894c19844a94404d7f7510f182e97", "patch": "@@ -1,10 +1,13 @@\n+2010-07-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (SHIFT_COUNT_TRUNCATED): Expand comment.\n+\n 2010-07-15  Magnus Granberg  <zorry@gentoo.org>\n \t    Kevin F. Quinn  <kevquinn@gentoo.org>\n \n-        * builtins.c (expand_builtin_init_trampoline): If\n-\t-Wtrampolines make a warning.\n-\t* common.opt:   Add -Wtrampolines.\n-        * doc/invoke.texi:      Add -Wtrampolines.\n+\t* builtins.c (expand_builtin_init_trampoline): Warn for -Wtrampolines.\n+\t* common.opt: Add -Wtrampolines.\n+\t* doc/invoke.texi: Add -Wtrampolines.\n \n 2010-07-15  Jie Zhang  <jie@codesourcery.com>\n \n@@ -84,8 +87,7 @@\n 2010-07-14  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* ira-int.h (struct ira_object): New.\n-\t(ira_object_t): New typedef.  Add DEF_VEC_P and DEF_VEC_ALLOC_P\n-\tfor it.\n+\t(ira_object_t): New typedef.  Add DEF_VEC_P and DEF_VEC_ALLOC_P for it.\n \t(struct ira_allocno): Remove members min, max,\n \tconflict_allocno_array, conflict_id, conflict_allocno_array_size,\n \tconflict_allocnos_num and conflict_vec_p.  Add new member object.\n@@ -114,9 +116,8 @@\n \t(ira_allocno_conflict_iter_init, ira_allocno_conflict_iter_cond):\n \tChanged to take into account that conflicts are now tracked for\n \tobjects.\n-\t* ira-conflicts.c (OBJECTS_CONFLICT_P): Renamed from\n-\tCONFLICT_ALLOCNO_P.  Args changed to accept ira_object_t.  All\n-\tuses changed.\n+\t* ira-conflicts.c (OBJECTS_CONFLICT_P): Renamed from CONFLICT_ALLOCNO_P.\n+\tArgs changed to accept ira_object_t.  All uses changed.\n \t(allocnos_conflict_p): New static function.\n \t(collected_conflict_objects): Renamed from collected_allocno_objects;\n \tnow a vector of ira_object_t.  All uses changed.\n@@ -149,7 +150,7 @@\n \tcompress_conflict_vecs, remove_low_level_allocnos, ira_flattening,\n \tsetup_min_max_allocno_live_range_point, allocno_range_compare_func,\n \tsetup_min_max_conflict_allocno_ids, ):  Likewise.\n-\t((add_to_conflicts): Renamed from add_to_allocno_conflicts, args changed\n+\t(add_to_conflicts): Renamed from add_to_allocno_conflicts, args changed\n \tto ira_object_t; all callers changed.\n \t(ira_add_conflict): Renamed from ira_add_allocno_conflict, args changed\n \tto ira_object_t, all callers changed.\n@@ -168,8 +169,8 @@\n \tdealing with objects.\n \t* ira.c (ira_bad_reload_regno_1): Adjusted for dealing with objects.\n \n-\t* ira-int.h (struct live_range): Rename allocno member to object and change\n-\ttype to ira_object_t.\n+\t* ira-int.h (struct live_range): Rename allocno member to object\n+\tand change type to ira_object_t.\n \t(struct ira_object): New member live_ranges.\n \t(struct ira_allocno): Remove member live_ranges.\n \t(ALLOCNO_LIVE_RANGES): Remove.\n@@ -183,8 +184,8 @@\n \tchanged to ira_object_t, all callers changed.\n \t(copy_live_range): Rename from copy_allocno_live_range, all callers\n \tchanged.\n-\t(ira_copy_live_range_list): Rename from ira_copy_allocno_live_range_list,\n-\tall callers changed.\n+\t(ira_copy_live_range_list): Rename from\n+\tira_copy_allocno_live_range_list, all callers changed.\n \t(ira_merge_live_ranges): Rename from ira_merge_allocno_live_range_list,\n \tall callers changed.\n \t(ira_live_ranges_intersect_p): Rename from\n@@ -408,8 +409,7 @@\n \t(can_copy_p): Remove can_copy_init_p.\n \t* target-globals.h (this_target_gcse): Declare.\n \t(target_globals): Add a gcse field.\n-\t(restore_target_globals): Copy the gcse field to\n-\tthis_target_gcse.\n+\t(restore_target_globals): Copy the gcse field to this_target_gcse.\n \t* target-globals.c: Include gcse.h.\n \t(default_target_globals): Initialize the gcse field.\n \t(save_target_globals): Likewise.\n@@ -665,9 +665,9 @@\n \n 2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n \n-\t* regs.h (target_regs): Add x_hard_regs_of_mode, x_contains_reg_of_mode,\n-\tx_move_cost, x_may_move_in_cost, x_may_move_out_cost and\n-\tx_last_mode_for_init_move_cost.\n+\t* regs.h (target_regs): Add x_hard_regs_of_mode,\n+\tx_contains_reg_of_mode, x_move_cost, x_may_move_in_cost,\n+\tx_may_move_out_cost and x_last_mode_for_init_move_cost.\n \t(have_regs_of_mode, contains_reg_of_mode, move_cost)\n \t(may_move_in_cost, may_move_out_cost): Redefine as macros.\n \t* reginfo.c (have_regs_of_mode, contains_reg_of_mode, move_cost)"}, {"sha": "b5c6b9ae2f9f7411e53c94bacd35198719263d5a", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53f00dde262894c19844a94404d7f7510f182e97/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53f00dde262894c19844a94404d7f7510f182e97/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=53f00dde262894c19844a94404d7f7510f182e97", "patch": "@@ -1815,10 +1815,11 @@ typedef struct ix86_args {\n \n #define CLEAR_RATIO(speed) ((speed) ? MIN (6, ix86_cost->move_ratio) : 2)\n \n-/* Define if shifts truncate the shift count\n-   which implies one can omit a sign-extension or zero-extension\n-   of a shift count.  */\n-/* On i386, shifts do truncate the count.  But bit opcodes don't.  */\n+/* Define if shifts truncate the shift count which implies one can\n+   omit a sign-extension or zero-extension of a shift count.\n+\n+   On i386, shifts do truncate the count.  But bit test instructions\n+   take the modulo of the bit offset operand.  */\n \n /* #define SHIFT_COUNT_TRUNCATED */\n "}]}