{"sha": "2ee70f5d161edd99a7af97d166b251bcf83cd91b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVlNzBmNWQxNjFlZGQ5OWE3YWY5N2QxNjZiMjUxYmNmODNjZDkxYg==", "commit": {"author": {"name": "Jos\u00e9 Rui Faustino de Sousa", "email": "jrfsousa@gmail.com", "date": "2020-06-11T13:15:25Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-06-11T13:16:37Z"}, "message": "PR95331 - Unlimited polymorphic arrays have wrong bounds.\n\nWhen iterating over a class array use the bounds provided by the\ntransformed descriptor (in sym->backend_decl) instead of the original\nbounds of the array (in the descriptor passed in the class _data)\nwhich are passed in se->expr.\n\nThe patch partially depends on the patch for PR52351 and PR85868, but\ndoes not seems to break anything by itself.\n\ngcc/fortran/ChangeLog:\n\n2020-06-11  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n\n\tPR fortran/95331\n\t* trans-array.c (gfc_conv_array_ref): For class array dummy\n\targuments use the transformed descriptor in sym->backend_decl\n\tinstead of the original descriptor.\n\ngcc/testsuite/ChangeLog:\n\n2020-06-11  Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n\n\tPR fortran/95331\n\t* gfortran.dg/PR95331.f90: New test.", "tree": {"sha": "7ea59277b453d7d8fe0720c0c83f5fbf2233f7f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ea59277b453d7d8fe0720c0c83f5fbf2233f7f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ee70f5d161edd99a7af97d166b251bcf83cd91b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee70f5d161edd99a7af97d166b251bcf83cd91b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ee70f5d161edd99a7af97d166b251bcf83cd91b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee70f5d161edd99a7af97d166b251bcf83cd91b/comments", "author": {"login": "jrfsousa", "id": 56982651, "node_id": "MDQ6VXNlcjU2OTgyNjUx", "avatar_url": "https://avatars.githubusercontent.com/u/56982651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrfsousa", "html_url": "https://github.com/jrfsousa", "followers_url": "https://api.github.com/users/jrfsousa/followers", "following_url": "https://api.github.com/users/jrfsousa/following{/other_user}", "gists_url": "https://api.github.com/users/jrfsousa/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrfsousa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrfsousa/subscriptions", "organizations_url": "https://api.github.com/users/jrfsousa/orgs", "repos_url": "https://api.github.com/users/jrfsousa/repos", "events_url": "https://api.github.com/users/jrfsousa/events{/privacy}", "received_events_url": "https://api.github.com/users/jrfsousa/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "19019cd3019bbce97bf342e8e574c184e76665b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19019cd3019bbce97bf342e8e574c184e76665b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19019cd3019bbce97bf342e8e574c184e76665b1"}], "stats": {"total": 176, "additions": 172, "deletions": 4}, "files": [{"sha": "54e1107c71193e12421d0a6731aa8164ef807a73", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee70f5d161edd99a7af97d166b251bcf83cd91b/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee70f5d161edd99a7af97d166b251bcf83cd91b/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=2ee70f5d161edd99a7af97d166b251bcf83cd91b", "patch": "@@ -3672,8 +3672,12 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_expr *expr,\n \t}\n     }\n \n+  decl = se->expr;\n+  if (IS_CLASS_ARRAY (sym) && sym->attr.dummy && ar->as->type != AS_DEFERRED)\n+    decl = sym->backend_decl;\n+\n   cst_offset = offset = gfc_index_zero_node;\n-  add_to_offset (&cst_offset, &offset, gfc_conv_array_offset (se->expr));\n+  add_to_offset (&cst_offset, &offset, gfc_conv_array_offset (decl));\n \n   /* Calculate the offsets from all the dimensions.  Make sure to associate\n      the final offset so that we form a chain of loop invariant summands.  */\n@@ -3694,7 +3698,7 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_expr *expr,\n \t  indexse.expr = save_expr (indexse.expr);\n \n \t  /* Lower bound.  */\n-\t  tmp = gfc_conv_array_lbound (se->expr, n);\n+\t  tmp = gfc_conv_array_lbound (decl, n);\n \t  if (sym->attr.temporary)\n \t    {\n \t      gfc_init_se (&tmpse, se);\n@@ -3718,7 +3722,7 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_expr *expr,\n \t     arrays.  */\n \t  if (n < ar->dimen - 1 || ar->as->type != AS_ASSUMED_SIZE)\n \t    {\n-\t      tmp = gfc_conv_array_ubound (se->expr, n);\n+\t      tmp = gfc_conv_array_ubound (decl, n);\n \t      if (sym->attr.temporary)\n \t\t{\n \t\t  gfc_init_se (&tmpse, se);\n@@ -3741,7 +3745,7 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_expr *expr,\n \t}\n \n       /* Multiply the index by the stride.  */\n-      stride = gfc_conv_array_stride (se->expr, n);\n+      stride = gfc_conv_array_stride (decl, n);\n       tmp = fold_build2_loc (input_location, MULT_EXPR, gfc_array_index_type,\n \t\t\t     indexse.expr, stride);\n \n@@ -3756,6 +3760,7 @@ gfc_conv_array_ref (gfc_se * se, gfc_array_ref * ar, gfc_expr *expr,\n   /* A pointer array component can be detected from its field decl. Fix\n      the descriptor, mark the resulting variable decl and pass it to\n      build_array_ref.  */\n+  decl = NULL_TREE;\n   if (get_CFI_desc (sym, expr, &decl, ar))\n     decl = build_fold_indirect_ref_loc (input_location, decl);\n   if (!expr->ts.deferred && !sym->attr.codimension"}, {"sha": "8024e79fed5b1ee4239c9ec5a08646d1d8528818", "filename": "gcc/testsuite/gfortran.dg/PR95331.f90", "status": "added", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee70f5d161edd99a7af97d166b251bcf83cd91b/gcc%2Ftestsuite%2Fgfortran.dg%2FPR95331.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee70f5d161edd99a7af97d166b251bcf83cd91b/gcc%2Ftestsuite%2Fgfortran.dg%2FPR95331.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FPR95331.f90?ref=2ee70f5d161edd99a7af97d166b251bcf83cd91b", "patch": "@@ -0,0 +1,163 @@\n+! { dg-do run }\n+!\n+! PR fortran/95331\n+! \n+\n+program main_p\n+  \n+  implicit none\n+\n+  integer, parameter :: n = 10\n+  integer, parameter :: m = 5\n+\n+  integer, parameter :: b = 3\n+  integer, parameter :: t = n+b-1\n+  \n+  integer, parameter :: l = 4\n+  integer, parameter :: u = 7\n+  integer, parameter :: s = 3\n+  integer, parameter :: e = (u-l)/s+1\n+  \n+  call test_f()\n+  call test_s()\n+  call test_p()\n+  call test_a()\n+  stop\n+\n+contains\n+\n+  subroutine test_f()\n+    integer :: x(n,n)\n+    integer :: y(b:t)\n+    integer :: i\n+    \n+    x = reshape([(i, i=1,n*n)], [n,n])\n+    y = x(:,m)\n+    call sub_s(x(:,m), y, n)\n+    call sub_s(y, x(:,m), n)\n+    return\n+  end subroutine test_f\n+  \n+  subroutine test_s()\n+    integer :: x(n,n)\n+    integer :: v(e)\n+    integer :: i\n+    \n+    x = reshape([(i, i=1,n*n)], [n,n])\n+    v = x(l:u:s,m)\n+    call sub_s(v, v, e)\n+    call sub_s(x(l:u:s,m), v, e)\n+    call sub_s(v, x(l:u:s,m), e)\n+    return\n+  end subroutine test_s\n+  \n+  subroutine test_p()\n+    integer,  target :: x(n,n)\n+    integer, pointer :: p(:)\n+    integer          :: v(e)\n+    integer          :: i\n+    \n+    x = reshape([(i, i=1,n*n)], [n,n])\n+    v = x(l:u:s,m)\n+    p => x(:,m)\n+    call sub_s(p(l:u:s), v, e)\n+    p => x(l:u:s,m)\n+    call sub_s(p, v, e)\n+    p(l:) => x(l:u:s,m)\n+    call sub_s(p, v, e)\n+    p(l:l+e-1) => x(l:u:s,m)\n+    call sub_s(p, v, e)\n+    allocate(p(n))\n+    p(:) = x(:,m)\n+    call sub_s(p(l:u:s), v, e)\n+    deallocate(p)\n+    allocate(p(e))\n+    p(:) = x(l:u:s,m)\n+    call sub_s(p, v, e)\n+    deallocate(p)\n+    allocate(p(l:l+e-1))\n+    p(:) = x(l:u:s,m)\n+    call sub_s(p, v, e)\n+    deallocate(p)\n+    allocate(p(l:l+e-1))\n+    p(l:) = x(l:u:s,m)\n+    call sub_s(p, v, e)\n+    deallocate(p)\n+    allocate(p(l:l+e-1))\n+    p(l:l+e-1) = x(l:u:s,m)\n+    call sub_s(p, v, e)\n+    deallocate(p)\n+    return\n+  end subroutine test_p\n+  \n+  subroutine test_a()\n+    integer              :: x(n,n)\n+    integer, allocatable :: a(:)\n+    integer              :: v(e)\n+    integer              :: i\n+    \n+    x = reshape([(i, i=1,n*n)], [n,n])\n+    v = x(l:u:s,m)\n+    a = x(:,m)\n+    call sub_s(a(l:u:s), v, e)\n+    deallocate(a)\n+    allocate(a(n))\n+    a(:) = x(:,m)\n+    call sub_s(a(l:u:s), v, e)\n+    deallocate(a)\n+    a = x(l:u:s,m)\n+    call sub_s(a, v, e)\n+    deallocate(a)\n+    allocate(a(e))\n+    a(:) = x(l:u:s,m)\n+    call sub_s(a, v, e)\n+    deallocate(a)\n+    allocate(a(l:l+e-1))\n+    a(:) = x(l:u:s,m)\n+    call sub_s(a, v, e)\n+    deallocate(a)\n+    allocate(a(l:l+e-1))\n+    a(l:) = x(l:u:s,m)\n+    call sub_s(a, v, e)\n+    deallocate(a)\n+    allocate(a(l:l+e-1))\n+    a(l:l+e-1) = x(l:u:s,m)\n+    call sub_s(a, v, e)\n+    deallocate(a)\n+    return\n+  end subroutine test_a\n+\n+  subroutine sub_s(a, b, n)\n+    class(*), intent(in) :: a(:)\n+    integer,  intent(in) :: b(:)\n+    integer,  intent(in) :: n\n+\n+    integer :: i\n+\n+    if(lbound(a, dim=1)/=1) stop 1001\n+    if(ubound(a, dim=1)/=n) stop 1002\n+    if(any(shape(a)/=[n]))  stop 1003\n+    if(size(a, dim=1)/=n)   stop 1004\n+    if(size(a)/=size(b))    stop 1005\n+    do i = 1, n\n+      call vrfy(a(i), b(i))\n+    end do\n+    return\n+  end subroutine sub_s\n+\n+  subroutine vrfy(a, b)\n+    class(*), intent(in) :: a\n+    integer,  intent(in) :: b\n+\n+    select type (a)\n+    type is (integer)\n+      !print *, a, b\n+      if(a/=b) stop 2001\n+    class default\n+      STOP 2002\n+    end select\n+    return\n+  end subroutine vrfy\n+\n+end program main_p\n+"}]}