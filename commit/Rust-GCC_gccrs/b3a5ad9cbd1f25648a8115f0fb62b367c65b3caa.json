{"sha": "b3a5ad9cbd1f25648a8115f0fb62b367c65b3caa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNhNWFkOWNiZDFmMjU2NDhhODExNWYwZmI2MmIzNjdjNjViM2NhYQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-02-15T20:26:02Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-02-15T20:26:02Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r326", "tree": {"sha": "77fa482206b5a010e0fc856fe532f68f303798b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77fa482206b5a010e0fc856fe532f68f303798b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3a5ad9cbd1f25648a8115f0fb62b367c65b3caa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3a5ad9cbd1f25648a8115f0fb62b367c65b3caa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3a5ad9cbd1f25648a8115f0fb62b367c65b3caa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3a5ad9cbd1f25648a8115f0fb62b367c65b3caa/comments", "author": null, "committer": null, "parents": [{"sha": "349860d8b970b0eefa8e92a01fe68aa94cb604f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/349860d8b970b0eefa8e92a01fe68aa94cb604f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/349860d8b970b0eefa8e92a01fe68aa94cb604f7"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "486459234999a080f9868736f7e7144b4ca8c10d", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3a5ad9cbd1f25648a8115f0fb62b367c65b3caa/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3a5ad9cbd1f25648a8115f0fb62b367c65b3caa/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=b3a5ad9cbd1f25648a8115f0fb62b367c65b3caa", "patch": "@@ -1034,7 +1034,7 @@ build_module_descriptor ()\n     return buf;\n   }\n #else /* NEXT_OBJC_RUNTIME */\n-  return \"__objcInit\";\n+  return 0;\n #endif /* NEXT_OBJC_RUNTIME */\n }\n \n@@ -4998,7 +4998,8 @@ finish_objc ()\n       /* Arrange for Objc data structures to be initialized at run time.  */\n \n       char *init_name = build_module_descriptor ();\n-      assemble_constructor (init_name);\n+      if (init_name)\n+\tassemble_constructor (init_name);\n     }\n \n   /* dump the string table last */\n@@ -5016,14 +5017,15 @@ finish_objc ()\n   for (chain = cls_ref_chain; chain; chain = TREE_CHAIN (chain))\n     {\n       tree decl;\n+\n #if 0 /* Grossly unportable.  */\n       sprintf (utlbuf, \".reference .objc_class_name_%s\",\n \t       IDENTIFIER_POINTER (TREE_VALUE (chain)));\n       assemble_asm (my_build_string (strlen (utlbuf) + 1, utlbuf));\n-#endif\n+#else\n       sprintf (utlbuf, \".objc_class_name_%s\",\n \t       IDENTIFIER_POINTER (TREE_VALUE (chain)));\n-      assemble_global (utlbuf);\n+#endif\n       /* Make a decl for this name, so we can use its address in a tree.  */\n       decl = build_decl (VAR_DECL, get_identifier (utlbuf), char_type_node);\n       TREE_EXTERNAL (decl) = 1;\n@@ -5032,6 +5034,9 @@ finish_objc ()\n       pushdecl (decl);\n       rest_of_decl_compilation (decl, 0, 0, 0);\n \n+      /* Make following constant read-only (why not)?  */\n+      text_section ();\n+\n       /* Output a constant to reference this address.  */\n       output_constant (build1 (ADDR_EXPR, string_type_node, decl),\n \t\t       int_size_in_bytes (string_type_node));\n@@ -5044,8 +5049,9 @@ finish_objc ()\n \n       if (TREE_CODE (impent->imp_context) == IMPLEMENTATION_TYPE)\n \t{\n-#if 0 /* Grossly unportable.  People should know better that to\n-\t assume such things about assembler syntax!  */\n+#if 0 /* Grossly unportable.\n+\t\t\t    People should know better than to assume\n+\t\t\t    such things about assembler syntax!  */\n \t  sprintf (utlbuf, \".objc_class_name_%s=0\",\n \t\t   IDENTIFIER_POINTER (CLASS_NAME (impent->imp_context)));\n \t  assemble_asm (my_build_string (strlen (utlbuf) + 1, utlbuf));"}]}