{"sha": "6eecb2932650cab7b3a19cce9e0cc90daf093f12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVlY2IyOTMyNjUwY2FiN2IzYTE5Y2NlOWUwY2M5MGRhZjA5M2YxMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-07-13T03:44:14Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-07-13T03:44:14Z"}, "message": "re PR go/81393 (Bootstrap failure on s390x-linux while building libgo against recent glibc)\n\n\tPR go/81393\n    syscall: don't use GETREGS/SETREGS on s390\n    \n    They were removed in recent glibc.\n    \n    Patch by Andreas Krebbel for GCC PR 81393.\n    \n    Reviewed-on: https://go-review.googlesource.com/48231\n\nFrom-SVN: r250174", "tree": {"sha": "f93911623579339a6644b40a2fd75d2f96731d2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f93911623579339a6644b40a2fd75d2f96731d2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eecb2932650cab7b3a19cce9e0cc90daf093f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eecb2932650cab7b3a19cce9e0cc90daf093f12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eecb2932650cab7b3a19cce9e0cc90daf093f12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eecb2932650cab7b3a19cce9e0cc90daf093f12/comments", "author": null, "committer": null, "parents": [{"sha": "258d772a7c2d7bfc234913775495f04820133d58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/258d772a7c2d7bfc234913775495f04820133d58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/258d772a7c2d7bfc234913775495f04820133d58"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "efa2c018dfb51d0f740de2ee6bb20282d1bca179", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eecb2932650cab7b3a19cce9e0cc90daf093f12/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eecb2932650cab7b3a19cce9e0cc90daf093f12/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=6eecb2932650cab7b3a19cce9e0cc90daf093f12", "patch": "@@ -1,4 +1,4 @@\n-12c65e8310956eb3cc412d9dc9f9e88cbd928c8e\n+9294e79fced202ade7eb236bbe78b766e7e0374f\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "8b005427eef1fe0c80a0741c613268b62851cf1b", "filename": "libgo/go/syscall/syscall_linux_s390.go", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eecb2932650cab7b3a19cce9e0cc90daf093f12/libgo%2Fgo%2Fsyscall%2Fsyscall_linux_s390.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eecb2932650cab7b3a19cce9e0cc90daf093f12/libgo%2Fgo%2Fsyscall%2Fsyscall_linux_s390.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsyscall_linux_s390.go?ref=6eecb2932650cab7b3a19cce9e0cc90daf093f12", "patch": "@@ -4,6 +4,8 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+// See the s390x version for why we don't use GETREGSET/SETREGSET\n+\n package syscall\n \n import \"unsafe\"\n@@ -12,10 +14,20 @@ func (r *PtraceRegs) PC() uint64 { return uint64(r.Psw.addr) }\n \n func (r *PtraceRegs) SetPC(pc uint64) { r.Psw.addr = uint32(pc) }\n \n-func PtraceGetRegs(pid int, regsout *PtraceRegs) (err error) {\n-\treturn ptrace(PTRACE_GETREGS, pid, 0, uintptr(unsafe.Pointer(regsout)))\n+func PtraceGetRegs(pid int, regs *PtraceRegs) (err error) {\n+\tparea := _ptrace_area{\n+\t\t_sizeof_ptrace_area,\n+\t\t0,\n+\t\tuint32(uintptr(unsafe.Pointer(regs))),\n+\t}\n+\treturn ptrace(PTRACE_PEEKUSR_AREA, pid, uintptr(unsafe.Pointer(&parea)), 0)\n }\n \n func PtraceSetRegs(pid int, regs *PtraceRegs) (err error) {\n-\treturn ptrace(PTRACE_SETREGS, pid, 0, uintptr(unsafe.Pointer(regs)))\n+\tparea := _ptrace_area{\n+\t\t_sizeof_ptrace_area,\n+\t\t0,\n+\t\tuint32(uintptr(unsafe.Pointer(regs))),\n+\t}\n+\treturn ptrace(PTRACE_POKEUSR_AREA, pid, uintptr(unsafe.Pointer(&parea)), 0)\n }"}, {"sha": "1767a6e5c616c9644df72b13686f50fc58c37495", "filename": "libgo/go/syscall/syscall_linux_s390x.go", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eecb2932650cab7b3a19cce9e0cc90daf093f12/libgo%2Fgo%2Fsyscall%2Fsyscall_linux_s390x.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eecb2932650cab7b3a19cce9e0cc90daf093f12/libgo%2Fgo%2Fsyscall%2Fsyscall_linux_s390x.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsyscall_linux_s390x.go?ref=6eecb2932650cab7b3a19cce9e0cc90daf093f12", "patch": "@@ -4,6 +4,23 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+// The PtraceRegs struct generated for go looks like this:\n+//\n+// type PtraceRegs struct\n+// {\n+//   Psw _psw_t;\n+//   Gprs [15+1]uint64;\n+//   Acrs [15+1]uint32;\n+//   Orig_gpr2 uint64;\n+//   Fp_regs _s390_fp_regs;\n+//   Per_info _per_struct;\n+//   Ieee_instruction_pointer uint64;\n+// }\n+//\n+// The GETREGSET/SETREGSET ptrace commands on S/390 only read/write\n+// the content up to Orig_gpr2.  Hence, we use\n+// PEEKUSR_AREA/POKEUSR_AREA like GDB does.\n+\n package syscall\n \n import \"unsafe\"\n@@ -12,10 +29,20 @@ func (r *PtraceRegs) PC() uint64 { return r.Psw.addr }\n \n func (r *PtraceRegs) SetPC(pc uint64) { r.Psw.addr = pc }\n \n-func PtraceGetRegs(pid int, regsout *PtraceRegs) (err error) {\n-\treturn ptrace(PTRACE_GETREGS, pid, 0, uintptr(unsafe.Pointer(regsout)))\n+func PtraceGetRegs(pid int, regs *PtraceRegs) (err error) {\n+\tparea := _ptrace_area{\n+\t\t_sizeof_ptrace_area,\n+\t\t0,\n+\t\tuint64(uintptr(unsafe.Pointer(regs))),\n+\t}\n+\treturn ptrace(PTRACE_PEEKUSR_AREA, pid, uintptr(unsafe.Pointer(&parea)), 0)\n }\n \n func PtraceSetRegs(pid int, regs *PtraceRegs) (err error) {\n-\treturn ptrace(PTRACE_SETREGS, pid, 0, uintptr(unsafe.Pointer(regs)))\n+\tparea := _ptrace_area{\n+\t\t_sizeof_ptrace_area,\n+\t\t0,\n+\t\tuint64(uintptr(unsafe.Pointer(regs))),\n+\t}\n+\treturn ptrace(PTRACE_POKEUSR_AREA, pid, uintptr(unsafe.Pointer(&parea)), 0)\n }"}]}