{"sha": "0dd4969120693e1040ff3cd2076571618baa616d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRkNDk2OTEyMDY5M2UxMDQwZmYzY2QyMDc2NTcxNjE4YmFhNjE2ZA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2012-11-01T20:55:51Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2012-11-01T20:55:51Z"}, "message": "hashtable_policy.h (__details::_Before_begin<>): New, combine a base node instance and an allocator.\n\n2012-11-01  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/hashtable_policy.h (__details::_Before_begin<>):\n\tNew, combine a base node instance and an allocator.\n\t* include/bits/hashtable.h (_Hashtable<>::_M_node_allocator): Remove.\n\t(_Hashtable<>::_M_before_begin): Rename into _M_bbegin and type\n\tmodified to __detail::_Before_begin<>.\n\t(_Hashtable<>::_M_node_allocator()): New, get the node allocator\n\tpart of _M_bbegin.\n\t(_Hashtable<>::_M_before_begin()): New, get the before begin node\n\tpart of _M_bbegin.\n\t(_Hashtable<>): Adapt to use latter.\n\nFrom-SVN: r193068", "tree": {"sha": "86f359d600cf3067b58ad7f417d463a291dfd3be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86f359d600cf3067b58ad7f417d463a291dfd3be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dd4969120693e1040ff3cd2076571618baa616d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dd4969120693e1040ff3cd2076571618baa616d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dd4969120693e1040ff3cd2076571618baa616d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dd4969120693e1040ff3cd2076571618baa616d/comments", "author": null, "committer": null, "parents": [{"sha": "647d030f8c0f9c31087f7580158b1c0cfeb6883b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/647d030f8c0f9c31087f7580158b1c0cfeb6883b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/647d030f8c0f9c31087f7580158b1c0cfeb6883b"}], "stats": {"total": 132, "additions": 88, "deletions": 44}, "files": [{"sha": "62cd691b53ce3ebe5e86bfb05c1d655e04ce93b1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dd4969120693e1040ff3cd2076571618baa616d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dd4969120693e1040ff3cd2076571618baa616d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0dd4969120693e1040ff3cd2076571618baa616d", "patch": "@@ -1,3 +1,16 @@\n+2012-11-01  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/hashtable_policy.h (__details::_Before_begin<>):\n+\tNew, combine a base node instance and an allocator.\n+\t* include/bits/hashtable.h (_Hashtable<>::_M_node_allocator): Remove.\n+\t(_Hashtable<>::_M_before_begin): Rename into _M_bbegin and type\n+\tmodified to __detail::_Before_begin<>.\n+\t(_Hashtable<>::_M_node_allocator()): New, get the node allocator\n+\tpart of _M_bbegin.\n+\t(_Hashtable<>::_M_before_begin()): New, get the before begin node\n+\tpart of _M_bbegin.\n+\t(_Hashtable<>): Adapt to use latter.\n+\n 2012-11-01  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/bits/forward_list.h (forward_list::assign): Dispatch to new"}, {"sha": "8ceacabce121f3e0ea3a8f8bf73483eef9d17548", "filename": "libstdc++-v3/include/bits/hashtable.h", "status": "modified", "additions": 57, "deletions": 44, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dd4969120693e1040ff3cd2076571618baa616d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dd4969120693e1040ff3cd2076571618baa616d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable.h?ref=0dd4969120693e1040ff3cd2076571618baa616d", "patch": "@@ -99,7 +99,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  Each _Hashtable data structure has:\n    *\n    *  - _Bucket[]       _M_buckets\n-   *  - _Hash_node_base _M_before_begin\n+   *  - _Hash_node_base _M_bbegin\n    *  - size_type       _M_bucket_count\n    *  - size_type       _M_element_count\n    *\n@@ -302,17 +302,31 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\t\t\t_Node_allocator_type;\n       typedef typename _Alloc::template rebind<__bucket_type>::other\n \t\t\t\t\t\t\t_Bucket_allocator_type;\n-      typedef typename _Alloc::template rebind<value_type>::other\n-\t\t\t\t\t\t\t_Value_allocator_type;\n \n+      using __before_begin = __detail::_Before_begin<_Node_allocator_type>;\n \n-      _Node_allocator_type\t_M_node_allocator;\n       __bucket_type*\t\t_M_buckets;\n       size_type\t\t\t_M_bucket_count;\n-      __node_base\t       \t_M_before_begin;\n+      __before_begin\t\t_M_bbegin;\n       size_type\t\t\t_M_element_count;\n       _RehashPolicy\t\t_M_rehash_policy;\n \n+      _Node_allocator_type&\n+      _M_node_allocator()\n+      { return _M_bbegin; }\n+\n+      const _Node_allocator_type&\n+      _M_node_allocator() const\n+      { return _M_bbegin; }\n+\n+      __node_base&\n+      _M_before_begin()\n+      { return _M_bbegin._M_node; }\n+\n+      const __node_base&\n+      _M_before_begin() const\n+      { return _M_bbegin._M_node; }\n+\n       template<typename... _Args>\n \t__node_type*\n \t_M_allocate_node(_Args&&... __args);\n@@ -337,7 +351,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       __node_type*\n       _M_begin() const\n-      { return static_cast<__node_type*>(_M_before_begin._M_nxt); }\n+      { return static_cast<__node_type*>(_M_before_begin()._M_nxt); }\n \n     public:\n       // Constructor, destructor, assignment, swap\n@@ -455,11 +469,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       allocator_type\n       get_allocator() const noexcept\n-      { return allocator_type(_M_node_allocator); }\n+      { return allocator_type(_M_node_allocator()); }\n \n       size_type\n       max_size() const noexcept\n-      { return _M_node_allocator.max_size(); }\n+      { return _M_node_allocator().max_size(); }\n \n       // Observers\n       key_equal\n@@ -685,15 +699,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t _H1, _H2, _Hash, _RehashPolicy, _Traits>::\n       _M_allocate_node(_Args&&... __args)\n       {\n-\t__node_type* __n = _M_node_allocator.allocate(1);\n+\t__node_type* __n = _M_node_allocator().allocate(1);\n \t__try\n \t  {\n-\t    _M_node_allocator.construct(__n, std::forward<_Args>(__args)...);\n+\t    _M_node_allocator().construct(__n, std::forward<_Args>(__args)...);\n \t    return __n;\n \t  }\n \t__catch(...)\n \t  {\n-\t    _M_node_allocator.deallocate(__n, 1);\n+\t    _M_node_allocator().deallocate(__n, 1);\n \t    __throw_exception_again;\n \t  }\n       }\n@@ -707,8 +721,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       _H1, _H2, _Hash, _RehashPolicy, _Traits>::\n     _M_deallocate_node(__node_type* __n)\n     {\n-      _M_node_allocator.destroy(__n);\n-      _M_node_allocator.deallocate(__n, 1);\n+      _M_node_allocator().destroy(__n);\n+      _M_node_allocator().deallocate(__n, 1);\n     }\n \n   template<typename _Key, typename _Value,\n@@ -738,7 +752,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       _H1, _H2, _Hash, _RehashPolicy, _Traits>::\n     _M_allocate_buckets(size_type __n)\n     {\n-      _Bucket_allocator_type __alloc(_M_node_allocator);\n+      _Bucket_allocator_type __alloc(_M_node_allocator());\n \n       __bucket_type* __p = __alloc.allocate(__n);\n       __builtin_memset(__p, 0, __n * sizeof(__bucket_type));\n@@ -754,7 +768,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t       _H1, _H2, _Hash, _RehashPolicy, _Traits>::\n     _M_deallocate_buckets(__bucket_type* __p, size_type __n)\n     {\n-      _Bucket_allocator_type __alloc(_M_node_allocator);\n+      _Bucket_allocator_type __alloc(_M_node_allocator());\n       __alloc.deallocate(__p, __n);\n     }\n \n@@ -786,8 +800,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : __hashtable_base(__exk, __h1, __h2, __h, __eq),\n       __map_base(),\n       __rehash_base(),\n-      _M_node_allocator(__a),\n       _M_bucket_count(0),\n+      _M_bbegin(__a),\n       _M_element_count(0),\n       _M_rehash_policy()\n     {\n@@ -815,8 +829,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : __hashtable_base(__exk, __h1, __h2, __h, __eq),\n \t__map_base(),\n \t__rehash_base(),\n-\t_M_node_allocator(__a),\n \t_M_bucket_count(0),\n+\t_M_bbegin(__a),\n \t_M_element_count(0),\n \t_M_rehash_policy()\n       {\n@@ -854,24 +868,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : __hashtable_base(__ht),\n       __map_base(__ht),\n       __rehash_base(__ht),\n-      _M_node_allocator(__ht._M_node_allocator),\n       _M_bucket_count(__ht._M_bucket_count),\n+      _M_bbegin(__ht._M_bbegin),\n       _M_element_count(__ht._M_element_count),\n       _M_rehash_policy(__ht._M_rehash_policy)\n     {\n       _M_buckets = _M_allocate_buckets(_M_bucket_count);\n       __try\n \t{\n-\t  if (!__ht._M_before_begin._M_nxt)\n+\t  if (!__ht._M_before_begin()._M_nxt)\n \t    return;\n \n \t  // First deal with the special first node pointed to by\n \t  // _M_before_begin.\n \t  const __node_type* __ht_n = __ht._M_begin();\n \t  __node_type* __this_n = _M_allocate_node(__ht_n->_M_v);\n \t  this->_M_copy_code(__this_n, __ht_n);\n-\t  _M_before_begin._M_nxt = __this_n;\n-\t  _M_buckets[_M_bucket_index(__this_n)] = &_M_before_begin;\n+\t  _M_before_begin()._M_nxt = __this_n;\n+\t  _M_buckets[_M_bucket_index(__this_n)] = &_M_before_begin();\n \n \t  // Then deal with other nodes.\n \t  __node_base* __prev_n = __this_n;\n@@ -904,20 +918,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : __hashtable_base(__ht),\n       __map_base(__ht),\n       __rehash_base(__ht),\n-      _M_node_allocator(std::move(__ht._M_node_allocator)),\n       _M_buckets(__ht._M_buckets),\n       _M_bucket_count(__ht._M_bucket_count),\n-      _M_before_begin(__ht._M_before_begin._M_nxt),\n+      _M_bbegin(std::move(__ht._M_bbegin)),\n       _M_element_count(__ht._M_element_count),\n       _M_rehash_policy(__ht._M_rehash_policy)\n     {\n       // Update, if necessary, bucket pointing to before begin that hasn't move.\n       if (_M_begin())\n-\t_M_buckets[_M_bucket_index(_M_begin())] = &_M_before_begin;\n+\t_M_buckets[_M_bucket_index(_M_begin())] = &_M_before_begin();\n       __ht._M_rehash_policy = _RehashPolicy();\n       __ht._M_bucket_count = __ht._M_rehash_policy._M_next_bkt(0);\n       __ht._M_buckets = __ht._M_allocate_buckets(__ht._M_bucket_count);\n-      __ht._M_before_begin._M_nxt = nullptr;\n+      __ht._M_before_begin()._M_nxt = nullptr;\n       __ht._M_element_count = 0;\n     }\n \n@@ -949,22 +962,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 431. Swapping containers with unequal allocators.\n-      std::__alloc_swap<_Node_allocator_type>::_S_do_it(_M_node_allocator,\n-\t\t\t\t\t\t\t__x._M_node_allocator);\n+      std::__alloc_swap<_Node_allocator_type>::_S_do_it(_M_node_allocator(),\n+\t\t\t\t\t\t\t__x._M_node_allocator());\n \n       std::swap(_M_rehash_policy, __x._M_rehash_policy);\n       std::swap(_M_buckets, __x._M_buckets);\n       std::swap(_M_bucket_count, __x._M_bucket_count);\n-      std::swap(_M_before_begin._M_nxt, __x._M_before_begin._M_nxt);\n+      std::swap(_M_before_begin()._M_nxt, __x._M_before_begin()._M_nxt);\n       std::swap(_M_element_count, __x._M_element_count);\n \n       // Fix buckets containing the _M_before_begin pointers that\n       // can't be swapped.\n       if (_M_begin())\n-\t_M_buckets[_M_bucket_index(_M_begin())] = &_M_before_begin;\n+\t_M_buckets[_M_bucket_index(_M_begin())] = &_M_before_begin();\n       if (__x._M_begin())\n \t__x._M_buckets[__x._M_bucket_index(__x._M_begin())]\n-\t  = &(__x._M_before_begin);\n+\t  = &(__x._M_before_begin());\n     }\n \n   template<typename _Key, typename _Value,\n@@ -1165,13 +1178,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  // The bucket is empty, the new node is inserted at the\n \t  // beginning of the singly linked list and the bucket will\n \t  // contain _M_before_begin pointer.\n-\t  __node->_M_nxt = _M_before_begin._M_nxt;\n-\t  _M_before_begin._M_nxt = __node;\n+\t  __node->_M_nxt = _M_before_begin()._M_nxt;\n+\t  _M_before_begin()._M_nxt = __node;\n \t  if (__node->_M_nxt)\n \t    // We must update former begin bucket that is pointing to\n \t    // _M_before_begin.\n \t    _M_buckets[_M_bucket_index(__node->_M_next())] = __node;\n-\t  _M_buckets[__bkt] = &_M_before_begin;\n+\t  _M_buckets[__bkt] = &_M_before_begin();\n \t}\n     }\n \n@@ -1193,8 +1206,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    _M_buckets[__next_bkt] = _M_buckets[__bkt];\n \n \t  // Second update before begin node if necessary\n-\t  if (&_M_before_begin == _M_buckets[__bkt])\n-\t    _M_before_begin._M_nxt = __next;\n+\t  if (&_M_before_begin() == _M_buckets[__bkt])\n+\t    _M_before_begin()._M_nxt = __next;\n \t  _M_buckets[__bkt] = nullptr;\n \t}\n     }\n@@ -1614,7 +1627,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_deallocate_nodes(_M_begin());\n       __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));\n       _M_element_count = 0;\n-      _M_before_begin._M_nxt = nullptr;\n+      _M_before_begin()._M_nxt = nullptr;\n     }\n \n   template<typename _Key, typename _Value,\n@@ -1677,17 +1690,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       __bucket_type* __new_buckets = _M_allocate_buckets(__n);\n       __node_type* __p = _M_begin();\n-      _M_before_begin._M_nxt = nullptr;\n+      _M_before_begin()._M_nxt = nullptr;\n       std::size_t __bbegin_bkt;\n       while (__p)\n \t{\n \t  __node_type* __next = __p->_M_next();\n \t  std::size_t __bkt = __hash_code_base::_M_bucket_index(__p, __n);\n \t  if (!__new_buckets[__bkt])\n \t    {\n-\t      __p->_M_nxt = _M_before_begin._M_nxt;\n-\t      _M_before_begin._M_nxt = __p;\n-\t      __new_buckets[__bkt] = &_M_before_begin;\n+\t      __p->_M_nxt = _M_before_begin()._M_nxt;\n+\t      _M_before_begin()._M_nxt = __p;\n+\t      __new_buckets[__bkt] = &_M_before_begin();\n \t      if (__p->_M_nxt)\n \t\t__new_buckets[__bbegin_bkt] = __p;\n \t      __bbegin_bkt = __bkt;\n@@ -1718,7 +1731,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __bucket_type* __new_buckets = _M_allocate_buckets(__n);\n \n       __node_type* __p = _M_begin();\n-      _M_before_begin._M_nxt = nullptr;\n+      _M_before_begin()._M_nxt = nullptr;\n       std::size_t __bbegin_bkt;\n       std::size_t __prev_bkt;\n       __node_type* __prev_p = nullptr;\n@@ -1763,9 +1776,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \t      if (!__new_buckets[__bkt])\n \t\t{\n-\t\t  __p->_M_nxt = _M_before_begin._M_nxt;\n-\t\t  _M_before_begin._M_nxt = __p;\n-\t\t  __new_buckets[__bkt] = &_M_before_begin;\n+\t\t  __p->_M_nxt = _M_before_begin()._M_nxt;\n+\t\t  _M_before_begin()._M_nxt = __p;\n+\t\t  __new_buckets[__bkt] = &_M_before_begin();\n \t\t  if (__p->_M_nxt)\n \t\t    __new_buckets[__bbegin_bkt] = __p;\n \t\t  __bbegin_bkt = __bkt;"}, {"sha": "259785d6f541bb585f9ff8894c0c324c7557fa25", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dd4969120693e1040ff3cd2076571618baa616d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dd4969120693e1040ff3cd2076571618baa616d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=0dd4969120693e1040ff3cd2076571618baa616d", "patch": "@@ -1708,6 +1708,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return true;\n     }\n \n+  /**\n+   * This type is to combine a _Hash_node_base instance with an allocator\n+   * instance through inheritance to benefit from EBO when possible.\n+   */\n+  template<typename _NodeAlloc>\n+    struct _Before_begin : public _NodeAlloc\n+    {\n+      _Hash_node_base _M_node;\n+\n+      _Before_begin(const _Before_begin&) = default;\n+      _Before_begin(_Before_begin&&) = default;\n+\n+      template<typename _Alloc>\n+\t_Before_begin(_Alloc&& __a)\n+\t  : _NodeAlloc(std::forward<_Alloc>(__a))\n+\t{ }\n+    };\n+\n  //@} hashtable-detail\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace __detail"}]}