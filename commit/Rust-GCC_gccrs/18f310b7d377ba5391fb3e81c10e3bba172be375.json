{"sha": "18f310b7d377ba5391fb3e81c10e3bba172be375", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThmMzEwYjdkMzc3YmE1MzkxZmIzZTgxYzEwZTNiYmExNzJiZTM3NQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-11-09T15:54:33Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-11-09T15:54:33Z"}, "message": "re PR libstdc++/34032 (-std=c++0x causes undeclared symbols errors on cygwin)\n\n2007-11-09  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/34032\n\t* acinclude.m4 ([GLIBCXX_ENABLE_C99], [GLIBCXX_CHECK_C99_TR1]):\n\tUse -std=c++98 instead of the default -std=gnu++98.\n\t* configure: Regenerate.\n\nFrom-SVN: r130047", "tree": {"sha": "aa8b68b6180c6bc37e6a51bf0590f7ce0a68aef6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa8b68b6180c6bc37e6a51bf0590f7ce0a68aef6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18f310b7d377ba5391fb3e81c10e3bba172be375", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18f310b7d377ba5391fb3e81c10e3bba172be375", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18f310b7d377ba5391fb3e81c10e3bba172be375", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18f310b7d377ba5391fb3e81c10e3bba172be375/comments", "author": null, "committer": null, "parents": [{"sha": "76e910c6b72b46e017d7be9a6494113ebae72f85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76e910c6b72b46e017d7be9a6494113ebae72f85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76e910c6b72b46e017d7be9a6494113ebae72f85"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "baea4ac38dd627d2c8f2eb71d3cae7d8165ac26d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f310b7d377ba5391fb3e81c10e3bba172be375/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f310b7d377ba5391fb3e81c10e3bba172be375/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=18f310b7d377ba5391fb3e81c10e3bba172be375", "patch": "@@ -1,3 +1,10 @@\n+2007-11-09  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/34032\n+\t* acinclude.m4 ([GLIBCXX_ENABLE_C99], [GLIBCXX_CHECK_C99_TR1]):\n+\tUse -std=c++98 instead of the default -std=gnu++98.\n+\t* configure: Regenerate.\n+\n 2007-11-08  Paolo Carlini  <pcarlini@suse.de>\n \n \t* config/io/basic_file_stdio.cc (fopen_mode): Add modes missing"}, {"sha": "b85a2a8f1a3367dbe68a60b52e09e85a930e0a89", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f310b7d377ba5391fb3e81c10e3bba172be375/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f310b7d377ba5391fb3e81c10e3bba172be375/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=18f310b7d377ba5391fb3e81c10e3bba172be375", "patch": "@@ -763,9 +763,13 @@ AC_DEFUN([GLIBCXX_ENABLE_C99], [\n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n \n-  # Use -fno-exceptions so that the C driver can link these tests without\n-  # hitting undefined references to personality routines.\n+  # Use -std=c++98 because the default (-std=gnu++98) leaves __STRICT_ANSI__\n+  # undefined and fake C99 facilities - like pre-standard snprintf - may be\n+  # spuriously enabled.\n+  # Long term, -std=c++0x could be even better, could manage to explicitely\n+  # request C99 facilities to the underlying C headers.\n   ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=c++98\"\n   ac_save_LIBS=\"$LIBS\"\n   ac_save_gcc_no_link=\"$gcc_no_link\"\n \n@@ -996,6 +1000,11 @@ AC_DEFUN([GLIBCXX_CHECK_C99_TR1], [\n   AC_LANG_SAVE\n   AC_LANG_CPLUSPLUS\n \n+  # Use -std=c++98 because the default (-std=gnu++98) leaves __STRICT_ANSI__\n+  # undefined and fake C99 facilities may be spuriously enabled.\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=c++98\"\n+\n   # Check for the existence of <complex.h> complex math functions used\n   # by tr1/complex.\n   AC_CHECK_HEADERS(complex.h, ac_has_complex_h=yes, ac_has_complex_h=no)\n@@ -1266,6 +1275,7 @@ AC_DEFUN([GLIBCXX_CHECK_C99_TR1], [\n   # Check for the existence of the <stdbool.h> header.\t\n   AC_CHECK_HEADERS(stdbool.h)\n \n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n   AC_LANG_RESTORE\n ])\n "}, {"sha": "5e57fd651c6e11bcf872357b51db5f9ca0bd7418", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f310b7d377ba5391fb3e81c10e3bba172be375/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f310b7d377ba5391fb3e81c10e3bba172be375/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=18f310b7d377ba5391fb3e81c10e3bba172be375", "patch": "@@ -15436,9 +15436,13 @@ ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ex\n ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n \n \n-  # Use -fno-exceptions so that the C driver can link these tests without\n-  # hitting undefined references to personality routines.\n+  # Use -std=c++98 because the default (-std=gnu++98) leaves __STRICT_ANSI__\n+  # undefined and fake C99 facilities - like pre-standard snprintf - may be\n+  # spuriously enabled.\n+  # Long term, -std=c++0x could be even better, could manage to explicitely\n+  # request C99 facilities to the underlying C headers.\n   ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=c++98\"\n   ac_save_LIBS=\"$LIBS\"\n   ac_save_gcc_no_link=\"$gcc_no_link\"\n \n@@ -17778,7 +17782,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n \n   # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 17781 \"configure\"\n+#line 17785 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -39527,6 +39531,11 @@ ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ex\n ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n \n \n+  # Use -std=c++98 because the default (-std=gnu++98) leaves __STRICT_ANSI__\n+  # undefined and fake C99 facilities may be spuriously enabled.\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=c++98\"\n+\n   # Check for the existence of <complex.h> complex math functions used\n   # by tr1/complex.\n \n@@ -40544,6 +40553,7 @@ fi\n done\n \n \n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n   ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'\n ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'"}]}