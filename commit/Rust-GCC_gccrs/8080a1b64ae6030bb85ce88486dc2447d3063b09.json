{"sha": "8080a1b64ae6030bb85ce88486dc2447d3063b09", "node_id": "C_kwDOANBUbNoAKDgwODBhMWI2NGFlNjAzMGJiODVjZTg4NDg2ZGMyNDQ3ZDMwNjNiMDk", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2022-10-04T21:42:56Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-04T13:47:22Z"}, "message": "ada: Generate host-side CUDA_Register_Function calls for device's adainit/adafinal\n\nTo invoke a device-side subprogram from the host (via a CUDA_execute pragma),\nthe subprogram also has to be registered by calling CUDA_Register_Function.\nThe host-side adainit and adafinal procedures need to invoke the corresponding\ndevice-side procedures, so corresponding CUDA_Register_Function calls need\nto be generated.\n\ngcc/ada/\n\n\t* bindgen.adb\n\t(Gen_CUDA_Init): Move existing loop body into a new local\n\tprocedure, Gen_CUDA_Register_Function_Call, and replace that loop\n\tbody with a call to this procedure. This first part is just\n\tsemantics-preserving refactoring. The second part is to add\n\tGen_CUDA_Register_Function_Call calls after the loop for the\n\tdevice-side adainit and adafinal procedures.", "tree": {"sha": "de7e873f6142c7f7409a71a45eee21f87592d41d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de7e873f6142c7f7409a71a45eee21f87592d41d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8080a1b64ae6030bb85ce88486dc2447d3063b09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8080a1b64ae6030bb85ce88486dc2447d3063b09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8080a1b64ae6030bb85ce88486dc2447d3063b09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8080a1b64ae6030bb85ce88486dc2447d3063b09/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "164cc7a501cfc3239f2146443c1ba486e773349c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/164cc7a501cfc3239f2146443c1ba486e773349c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/164cc7a501cfc3239f2146443c1ba486e773349c"}], "stats": {"total": 66, "additions": 49, "deletions": 17}, "files": [{"sha": "1daa03dd7b8adceefa3b9e60ace8550a4f8ee218", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 49, "deletions": 17, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8080a1b64ae6030bb85ce88486dc2447d3063b09/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8080a1b64ae6030bb85ce88486dc2447d3063b09/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=8080a1b64ae6030bb85ce88486dc2447d3063b09", "patch": "@@ -1374,6 +1374,41 @@ package body Bindgen is\n    -------------------\n \n    procedure Gen_CUDA_Init is\n+      --  Generate call to register one function\n+      procedure Gen_CUDA_Register_Function_Call\n+        (Kernel_Name   : String;\n+         Kernel_String : String;\n+         Kernel_Proc   : String);\n+\n+      -------------------------------------\n+      -- Gen_CUDA_Register_Function_Call --\n+      -------------------------------------\n+\n+      procedure Gen_CUDA_Register_Function_Call\n+        (Kernel_Name   : String;\n+         Kernel_String : String;\n+         Kernel_Proc   : String) is\n+      begin\n+         WBI (\"      \" & Kernel_String & \" :=\");\n+         WBI (\"        Interfaces.C.Strings.New_Char_Array (\"\"\"\n+               & Kernel_Name\n+               & \"\"\");\");\n+\n+         --  Generate call to CUDA runtime to register function.\n+         WBI (\"      CUDA_Register_Function (\");\n+         WBI (\"        Fat_Binary_Handle, \");\n+         WBI (\"        \" & Kernel_Proc & \"'Address,\");\n+         WBI (\"        \" & Kernel_String & \",\");\n+         WBI (\"        \" & Kernel_String & \",\");\n+         WBI (\"        -1,\");\n+         WBI (\"        System.Null_Address,\");\n+         WBI (\"        System.Null_Address,\");\n+         WBI (\"        System.Null_Address,\");\n+         WBI (\"        System.Null_Address,\");\n+         WBI (\"        System.Null_Address);\");\n+         WBI (\"\");\n+      end Gen_CUDA_Register_Function_Call;\n+\n    begin\n       if not Enable_CUDA_Expansion then\n          return;\n@@ -1404,26 +1439,23 @@ package body Bindgen is\n                Get_Name_String (CUDA_Kernels.Table (K).Kernel_Name);\n             --  Kernel_Name is the name of the kernel, after package expansion.\n          begin\n-            WBI (\"      \" & Kernel_String & \" :=\");\n-            WBI (\"        Interfaces.C.Strings.New_Char_Array (\"\"\"\n-                  & Kernel_Name\n-                  & \"\"\");\");\n-            --  Generate call to CUDA runtime to register function.\n-            WBI (\"      CUDA_Register_Function (\");\n-            WBI (\"        Fat_Binary_Handle, \");\n-            WBI (\"        \" & Kernel_Proc & \"'Address,\");\n-            WBI (\"        \" & Kernel_String & \",\");\n-            WBI (\"        \" & Kernel_String & \",\");\n-            WBI (\"        -1,\");\n-            WBI (\"        System.Null_Address,\");\n-            WBI (\"        System.Null_Address,\");\n-            WBI (\"        System.Null_Address,\");\n-            WBI (\"        System.Null_Address,\");\n-            WBI (\"        System.Null_Address);\");\n-            WBI (\"\");\n+            Gen_CUDA_Register_Function_Call\n+              (Kernel_Name   => Kernel_Name,\n+               Kernel_String => Kernel_String,\n+               Kernel_Proc   => Kernel_Proc);\n          end;\n       end loop;\n \n+      --  Register device-side Adainit and Adafinal\n+      Gen_CUDA_Register_Function_Call\n+        (Kernel_Name   => Device_Ada_Init_Link_Name,\n+         Kernel_String => \"Adainit_Name_String\",\n+         Kernel_Proc   => Device_Ada_Init_Subp_Name);\n+      Gen_CUDA_Register_Function_Call\n+        (Kernel_Name   => Device_Ada_Final_Link_Name,\n+         Kernel_String => \"Adafinal_Name_String\",\n+         Kernel_Proc   => Device_Ada_Final_Subp_Name);\n+\n       WBI (\"      CUDA_Register_Fat_Binary_End (Fat_Binary_Handle);\");\n \n       --  perform device (as opposed to host) elaboration"}]}