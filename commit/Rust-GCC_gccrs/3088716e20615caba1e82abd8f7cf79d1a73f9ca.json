{"sha": "3088716e20615caba1e82abd8f7cf79d1a73f9ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA4ODcxNmUyMDYxNWNhYmExZTgyYWJkOGY3Y2Y3OWQxYTczZjljYQ==", "commit": {"author": {"name": "Maxim Kuvyrkov", "email": "maxim@codesourcery.com", "date": "2012-07-21T00:01:40Z"}, "committer": {"name": "Maxim Kuvyrkov", "email": "mkuvyrkov@gcc.gnu.org", "date": "2012-07-21T00:01:40Z"}, "message": "mips.md (define_attr sync_*): Move before \"type\".\n\n\t* config/mips/mips.md (define_attr sync_*): Move before \"type\".\n\t(define_attr \"type\"): New values \"atomic\" and \"syncloop\".\n\t* config/mips/sync.md (atomic_exchange<mode>, atomic_fetch_add<mode>):\n\tSet \"type\" attribute.\n\t* config/mips/generic.md (generic_atomic, generic_syncloop):\n\tNew reservations.\n\t* gcc/config/mips/10000.md, gcc/config/mips/20kc.md,\n\t* gcc/config/mips/24k.md, gcc/config/mips/4130.md,\n        * gcc/config/mips/4k.md, gcc/config/mips/5400.md,\n\t* gcc/config/mips/5500.md, gcc/config/mips/5k.md,\n        * gcc/config/mips/7000.md, gcc/config/mips/74k.md,\n\t* gcc/config/mips/9000.md, gcc/config/mips/loongson2ef.md,\n\t* gcc/config/mips/loongson3a.md, gcc/config/mips/octeon.md,\n\t* gcc/config/mips/sb1.md, gcc/config/mips/sr71k.md,\n\t* gcc/config/mips/xlr.md: Handle \"atomic\" and \"syncloop\" types.\n\nFrom-SVN: r189734", "tree": {"sha": "1e9f6f349a379aa72be1a2ea9c28a1aaff156eb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e9f6f349a379aa72be1a2ea9c28a1aaff156eb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3088716e20615caba1e82abd8f7cf79d1a73f9ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3088716e20615caba1e82abd8f7cf79d1a73f9ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3088716e20615caba1e82abd8f7cf79d1a73f9ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3088716e20615caba1e82abd8f7cf79d1a73f9ca/comments", "author": null, "committer": null, "parents": [{"sha": "c1515facff18630fbd833b10fff9c742d5b371f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1515facff18630fbd833b10fff9c742d5b371f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1515facff18630fbd833b10fff9c742d5b371f3"}], "stats": {"total": 182, "additions": 111, "deletions": 71}, "files": [{"sha": "34c9ac6c7da0e27524f51e6be9822eeeabd9e339", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -1,3 +1,21 @@\n+2012-07-20  Maxim Kuvyrkov  <maxim@codesourcery.com>\n+\n+\t* config/mips/mips.md (define_attr sync_*): Move before \"type\".\n+\t(define_attr \"type\"): New values \"atomic\" and \"syncloop\".\n+\t* config/mips/sync.md (atomic_exchange<mode>, atomic_fetch_add<mode>):\n+\tSet \"type\" attribute.\n+\t* config/mips/generic.md (generic_atomic, generic_syncloop):\n+\tNew reservations.\n+\t* gcc/config/mips/10000.md, gcc/config/mips/20kc.md,\n+\t* gcc/config/mips/24k.md, gcc/config/mips/4130.md,\n+        * gcc/config/mips/4k.md, gcc/config/mips/5400.md,\n+\t* gcc/config/mips/5500.md, gcc/config/mips/5k.md,\n+        * gcc/config/mips/7000.md, gcc/config/mips/74k.md,\n+\t* gcc/config/mips/9000.md, gcc/config/mips/loongson2ef.md,\n+\t* gcc/config/mips/loongson3a.md, gcc/config/mips/octeon.md,\n+\t* gcc/config/mips/sb1.md, gcc/config/mips/sr71k.md,\n+\t* gcc/config/mips/xlr.md: Handle \"atomic\" and \"syncloop\" types.\n+\n 2012-07-20  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/sh.md: Group and sort shift related patterns."}, {"sha": "ae376b05a61a3142b708aedfa3c4a88606ace7ae", "filename": "gcc/config/mips/10000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F10000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F10000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F10000.md?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -247,5 +247,5 @@\n ;; Handle unknown/multi insns here (this is a guess).\n (define_insn_reservation \"r10k_unknown\" 1\n   (and (eq_attr \"cpu\" \"r10000\")\n-       (eq_attr \"type\" \"unknown,multi\"))\n+       (eq_attr \"type\" \"unknown,multi,atomic,syncloop\"))\n   \"r10k_alu1 + r10k_alu2\")"}, {"sha": "5c0088ce467182163755f6fa3e0bdda63464412b", "filename": "gcc/config/mips/20kc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F20kc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F20kc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F20kc.md?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -280,5 +280,5 @@\n ;; Force single-dispatch for unknown or multi.\n (define_insn_reservation \"r20kc_unknown\" 1 \n \t\t\t (and (eq_attr \"cpu\" \"20kc\")\n-\t\t\t      (eq_attr \"type\" \"unknown,multi\"))\n+\t\t\t      (eq_attr \"type\" \"unknown,multi,atomic,syncloop\"))\n \t\t\t \"r20kc_single_dispatch\")"}, {"sha": "bc4b45bad83266d33450bbe118be2ca8948b860a", "filename": "gcc/config/mips/24k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F24k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F24k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F24k.md?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -149,7 +149,7 @@\n ;;    scheduling via log links, but not used here).\n (define_insn_reservation \"r24k_int_unknown\" 0\n   (and (eq_attr \"cpu\" \"24kc,24kf2_1,24kf1_1\")\n-       (eq_attr \"type\" \"unknown\"))\n+       (eq_attr \"type\" \"unknown,atomic,syncloop\"))\n   \"r24k_iss\")\n \n "}, {"sha": "fd1001fde6826ff48ded05a0f52fe1d1a2e8c954", "filename": "gcc/config/mips/4130.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F4130.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F4130.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F4130.md?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -78,7 +78,7 @@\n \n (define_insn_reservation \"vr4130_multi\" 1\n   (and (eq_attr \"cpu\" \"r4130\")\n-       (eq_attr \"type\" \"multi,unknown\"))\n+       (eq_attr \"type\" \"multi,unknown,atomic,syncloop\"))\n   \"vr4130_alu1 + vr4130_alu2 + vr4130_dcache + vr4130_muldiv\")\n \n (define_insn_reservation \"vr4130_int\" 1"}, {"sha": "3733047f5af15a320e34cddb3a144afdda57c503", "filename": "gcc/config/mips/4k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F4k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F4k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F4k.md?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -149,5 +149,5 @@\n ;; Unknown or multi - single issue\n (define_insn_reservation \"r4k_unknown\" 1\n   (and (eq_attr \"cpu\" \"4kc,4kp\")\n-       (eq_attr \"type\" \"unknown,multi\"))\n+       (eq_attr \"type\" \"unknown,multi,atomic,syncloop\"))\n   \"r4k_ixu_arith+r4k_ixu_mpydiv\")"}, {"sha": "f85a311f2de1cb2e58dc03ed6668f8b6ad9acc6b", "filename": "gcc/config/mips/5400.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F5400.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F5400.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F5400.md?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -33,7 +33,7 @@\n \n (define_insn_reservation \"ir_vr54_unknown\" 1\n   (and (eq_attr \"cpu\" \"r5400\")\n-       (eq_attr \"type\" \"unknown\"))\n+       (eq_attr \"type\" \"unknown,atomic,syncloop\"))\n   \"vr54_dp0+vr54_dp1+vr54_mem+vr54_mac\")\n \n ;; Assume prediction fails."}, {"sha": "b254a9bec6713fd6b8a8a29f46d0a8ecd73e8b67", "filename": "gcc/config/mips/5500.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F5500.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F5500.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F5500.md?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -35,7 +35,7 @@\n \n (define_insn_reservation \"ir_vr55_unknown\" 1\n   (and (eq_attr \"cpu\" \"r5500\")\n-       (eq_attr \"type\" \"unknown\"))\n+       (eq_attr \"type\" \"unknown,atomic,syncloop\"))\n   \"vr55_dp0+vr55_dp1+vr55_mem+vr55_mac+vr55_fp+vr55_bru\")\n \n ;; Assume prediction fails."}, {"sha": "7a0689b2e43bfe1b98fedd03d8591d79617606eb", "filename": "gcc/config/mips/5k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F5k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F5k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F5k.md?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -127,7 +127,7 @@\n ;; Unknown or multi - single issue\n (define_insn_reservation \"r5k_int_unknown\" 1\n   (and (eq_attr \"cpu\" \"5kc,5kf\")\n-       (eq_attr \"type\" \"unknown,multi\"))\n+       (eq_attr \"type\" \"unknown,multi,atomic,syncloop\"))\n   \"r5k_ixu_arith+r5k_ixu_mpydiv\")\n \n "}, {"sha": "d7265f4fe80e9b939dd8175fa92ac30499c31a8e", "filename": "gcc/config/mips/7000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F7000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F7000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F7000.md?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -210,5 +210,5 @@\n ;; Force single-dispatch for unknown or multi.\n (define_insn_reservation \"rm7_unknown\" 1\n   (and (eq_attr \"cpu\" \"r7000\")\n-       (eq_attr \"type\" \"unknown,multi\"))\n+       (eq_attr \"type\" \"unknown,multi,atomic,syncloop\"))\n   \"rm7_single_dispatch\")"}, {"sha": "cd0a76da3449de21f282b51f96ffde067c65c799", "filename": "gcc/config/mips/74k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F74k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F74k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F74k.md?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -129,7 +129,7 @@\n ;;\n (define_insn_reservation \"r74k_unknown\" 1 \n   (and (eq_attr \"cpu\" \"74kc,74kf2_1,74kf1_1,74kf3_2\")\n-       (eq_attr \"type\" \"unknown\"))\n+       (eq_attr \"type\" \"unknown,atomic,syncloop\"))\n   \"r74k_alu\")\n \n (define_insn_reservation \"r74k_multi\" 10"}, {"sha": "09f55b4783c5064e7008cf461a48edbd7356a56c", "filename": "gcc/config/mips/9000.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F9000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2F9000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2F9000.md?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -147,5 +147,5 @@\n \n (define_insn_reservation \"rm9k_unknown\" 1\n   (and (eq_attr \"cpu\" \"r9000\")\n-       (eq_attr \"type\" \"unknown,multi\"))\n+       (eq_attr \"type\" \"unknown,multi,atomic,syncloop\"))\n   \"rm9k_m + rm9k_f_int + rm9k_any1 + rm9k_any2\")"}, {"sha": "c197ecff34edd79c8c43c0781f6f1d3f6e701853", "filename": "gcc/config/mips/generic.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2Fgeneric.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2Fgeneric.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fgeneric.md?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -103,3 +103,19 @@\n (define_insn_reservation \"generic_frecip_fsqrt_step\" 5\n   (eq_attr \"type\" \"frdiv1,frdiv2,frsqrt1,frsqrt2\")\n   \"alu\")\n+\n+(define_insn_reservation \"generic_atomic\" 10\n+  (eq_attr \"type\" \"atomic\")\n+  \"alu\")\n+\n+;; Sync loop consists of (in order)\n+;; (1) optional sync,\n+;; (2) LL instruction,\n+;; (3) branch and 1-2 ALU instructions,\n+;; (4) SC instruction,\n+;; (5) branch and ALU instruction.\n+;; The net result of this reservation is a big delay with a flush of\n+;; ALU pipeline.\n+(define_insn_reservation \"generic_sync_loop\" 40\n+  (eq_attr \"type\" \"syncloop\")\n+  \"alu*39\")"}, {"sha": "ef9dd3899a8a2965ac20737fa2b45d03d8dbe816", "filename": "gcc/config/mips/loongson2ef.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2Floongson2ef.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2Floongson2ef.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Floongson2ef.md?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -98,7 +98,7 @@\n ;; ls2_[f]alu{1,2}_turn_enabled units according to this attribute.\n ;; These instructions are used in mips.c: sched_ls2_dfa_post_advance_cycle.\n \n-(define_attr \"ls2_turn_type\" \"alu1,alu2,falu1,falu2,unknown\"\n+(define_attr \"ls2_turn_type\" \"alu1,alu2,falu1,falu2,unknown,atomic,syncloop\"\n   (const_string \"unknown\"))\n \n ;; Subscribe ls2_alu1_turn_enabled."}, {"sha": "f1f87629e21899c1a58918c836561602175bc58c", "filename": "gcc/config/mips/loongson3a.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2Floongson3a.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2Floongson3a.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Floongson3a.md?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -131,7 +131,7 @@\n ;; Force single-dispatch for unknown or multi.\n (define_insn_reservation \"ls3a_unknown\" 1\n   (and (eq_attr \"cpu\" \"loongson_3a\")\n-       (eq_attr \"type\" \"unknown,multi\"))\n+       (eq_attr \"type\" \"unknown,multi,atomic,syncloop\"))\n   \"ls3a_alu1 + ls3a_alu2 + ls3a_falu1 + ls3a_falu2 + ls3a_mem\")\n \n ;; End of DFA-based pipeline description for loongson_3a"}, {"sha": "b6b2beba596dc191702964c2457c91dfbcd5b85c", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 56, "deletions": 52, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -224,6 +224,57 @@\n \t (const_string \"yes\")]\n \t(const_string \"no\")))\n \n+;; Attributes describing a sync loop.  These loops have the form:\n+;;\n+;;       if (RELEASE_BARRIER == YES) sync\n+;;    1: OLDVAL = *MEM\n+;;       if ((OLDVAL & INCLUSIVE_MASK) != REQUIRED_OLDVAL) goto 2\n+;;         CMP  = 0 [delay slot]\n+;;       $TMP1 = OLDVAL & EXCLUSIVE_MASK\n+;;       $TMP2 = INSN1 (OLDVAL, INSN1_OP2)\n+;;       $TMP3 = INSN2 ($TMP2, INCLUSIVE_MASK)\n+;;       $AT |= $TMP1 | $TMP3\n+;;       if (!commit (*MEM = $AT)) goto 1.\n+;;         if (INSN1 != MOVE && INSN1 != LI) NEWVAL = $TMP3 [delay slot]\n+;;       CMP  = 1\n+;;       if (ACQUIRE_BARRIER == YES) sync\n+;;    2:\n+;;\n+;; where \"$\" values are temporaries and where the other values are\n+;; specified by the attributes below.  Values are specified as operand\n+;; numbers and insns are specified as enums.  If no operand number is\n+;; specified, the following values are used instead:\n+;;\n+;;    - OLDVAL: $AT\n+;;    - CMP: NONE\n+;;    - NEWVAL: $AT\n+;;    - INCLUSIVE_MASK: -1\n+;;    - REQUIRED_OLDVAL: OLDVAL & INCLUSIVE_MASK\n+;;    - EXCLUSIVE_MASK: 0\n+;;\n+;; MEM and INSN1_OP2 are required.\n+;;\n+;; Ideally, the operand attributes would be integers, with -1 meaning \"none\",\n+;; but the gen* programs don't yet support that.\n+(define_attr \"sync_mem\" \"none,0,1,2,3,4,5\" (const_string \"none\"))\n+(define_attr \"sync_oldval\" \"none,0,1,2,3,4,5\" (const_string \"none\"))\n+(define_attr \"sync_cmp\" \"none,0,1,2,3,4,5\" (const_string \"none\"))\n+(define_attr \"sync_newval\" \"none,0,1,2,3,4,5\" (const_string \"none\"))\n+(define_attr \"sync_inclusive_mask\" \"none,0,1,2,3,4,5\" (const_string \"none\"))\n+(define_attr \"sync_exclusive_mask\" \"none,0,1,2,3,4,5\" (const_string \"none\"))\n+(define_attr \"sync_required_oldval\" \"none,0,1,2,3,4,5\" (const_string \"none\"))\n+(define_attr \"sync_insn1_op2\" \"none,0,1,2,3,4,5\" (const_string \"none\"))\n+(define_attr \"sync_insn1\" \"move,li,addu,addiu,subu,and,andi,or,ori,xor,xori\"\n+  (const_string \"move\"))\n+(define_attr \"sync_insn2\" \"nop,and,xor,not\"\n+  (const_string \"nop\"))\n+;; Memory model specifier.\n+;; \"0\"-\"9\" values specify the operand that stores the memory model value.\n+;; \"10\" specifies MEMMODEL_ACQ_REL,\n+;; \"11\" specifies MEMMODEL_ACQUIRE.\n+(define_attr \"sync_memmodel\" \"\" (const_int 10))\n+\n+\n ;; Classification of each insn.\n ;; branch\tconditional branch\n ;; jump\t\tunconditional jump\n@@ -276,14 +327,16 @@\n ;; frsqrt1      floating point reciprocal square root step1\n ;; frsqrt2      floating point reciprocal square root step2\n ;; multi\tmultiword sequence (or user asm statements)\n+;; atomic\tatomic memory update instruction\n+;; syncloop\tmemory atomic operation implemented as a sync loop\n ;; nop\t\tno operation\n ;; ghost\tan instruction that produces no real code\n (define_attr \"type\"\n   \"unknown,branch,jump,call,load,fpload,fpidxload,store,fpstore,fpidxstore,\n    prefetch,prefetchx,condmove,mtc,mfc,mthi,mtlo,mfhi,mflo,const,arith,logical,\n    shift,slt,signext,clz,pop,trap,imul,imul3,imul3nc,imadd,idiv,idiv3,move,\n    fmove,fadd,fmul,fmadd,fdiv,frdiv,frdiv1,frdiv2,fabs,fneg,fcmp,fcvt,fsqrt,\n-   frsqrt,frsqrt1,frsqrt2,multi,nop,ghost\"\n+   frsqrt,frsqrt1,frsqrt2,multi,atomic,syncloop,nop,ghost\"\n   (cond [(eq_attr \"jal\" \"!unset\") (const_string \"call\")\n \t (eq_attr \"got\" \"load\") (const_string \"load\")\n \n@@ -322,7 +375,8 @@\n \t      (eq_attr \"dword_mode\" \"yes\"))\n \t   (const_string \"multi\")\n \t (eq_attr \"move_type\" \"move\") (const_string \"move\")\n-\t (eq_attr \"move_type\" \"const\") (const_string \"const\")]\n+\t (eq_attr \"move_type\" \"const\") (const_string \"const\")\n+\t (eq_attr \"sync_mem\" \"!none\") (const_string \"syncloop\")]\n \t;; We classify \"lui_movf\" as \"unknown\" rather than \"multi\"\n \t;; because we don't split it.  FIXME: we should split instead.\n \t(const_string \"unknown\")))\n@@ -346,56 +400,6 @@\n \t\t(const_string \"yes\")\n \t\t(const_string \"no\")))\n \n-;; Attributes describing a sync loop.  These loops have the form:\n-;;\n-;;       if (RELEASE_BARRIER == YES) sync\n-;;    1: OLDVAL = *MEM\n-;;       if ((OLDVAL & INCLUSIVE_MASK) != REQUIRED_OLDVAL) goto 2\n-;;         CMP  = 0 [delay slot]\n-;;       $TMP1 = OLDVAL & EXCLUSIVE_MASK\n-;;       $TMP2 = INSN1 (OLDVAL, INSN1_OP2)\n-;;       $TMP3 = INSN2 ($TMP2, INCLUSIVE_MASK)\n-;;       $AT |= $TMP1 | $TMP3\n-;;       if (!commit (*MEM = $AT)) goto 1.\n-;;         if (INSN1 != MOVE && INSN1 != LI) NEWVAL = $TMP3 [delay slot]\n-;;       CMP  = 1\n-;;       if (ACQUIRE_BARRIER == YES) sync\n-;;    2:\n-;;\n-;; where \"$\" values are temporaries and where the other values are\n-;; specified by the attributes below.  Values are specified as operand\n-;; numbers and insns are specified as enums.  If no operand number is\n-;; specified, the following values are used instead:\n-;;\n-;;    - OLDVAL: $AT\n-;;    - CMP: NONE\n-;;    - NEWVAL: $AT\n-;;    - INCLUSIVE_MASK: -1\n-;;    - REQUIRED_OLDVAL: OLDVAL & INCLUSIVE_MASK\n-;;    - EXCLUSIVE_MASK: 0\n-;;\n-;; MEM and INSN1_OP2 are required.\n-;;\n-;; Ideally, the operand attributes would be integers, with -1 meaning \"none\",\n-;; but the gen* programs don't yet support that.\n-(define_attr \"sync_mem\" \"none,0,1,2,3,4,5\" (const_string \"none\"))\n-(define_attr \"sync_oldval\" \"none,0,1,2,3,4,5\" (const_string \"none\"))\n-(define_attr \"sync_cmp\" \"none,0,1,2,3,4,5\" (const_string \"none\"))\n-(define_attr \"sync_newval\" \"none,0,1,2,3,4,5\" (const_string \"none\"))\n-(define_attr \"sync_inclusive_mask\" \"none,0,1,2,3,4,5\" (const_string \"none\"))\n-(define_attr \"sync_exclusive_mask\" \"none,0,1,2,3,4,5\" (const_string \"none\"))\n-(define_attr \"sync_required_oldval\" \"none,0,1,2,3,4,5\" (const_string \"none\"))\n-(define_attr \"sync_insn1_op2\" \"none,0,1,2,3,4,5\" (const_string \"none\"))\n-(define_attr \"sync_insn1\" \"move,li,addu,addiu,subu,and,andi,or,ori,xor,xori\"\n-  (const_string \"move\"))\n-(define_attr \"sync_insn2\" \"nop,and,xor,not\"\n-  (const_string \"nop\"))\n-;; Memory model specifier.\n-;; \"0\"-\"9\" values specify the operand that stores the memory model value.\n-;; \"10\" specifies MEMMODEL_ACQ_REL,\n-;; \"11\" specifies MEMMODEL_ACQUIRE.\n-(define_attr \"sync_memmodel\" \"\" (const_int 10))\n-\n ;; Length of instruction in bytes.\n (define_attr \"length\" \"\"\n    (cond [(and (eq_attr \"extended_mips16\" \"yes\")"}, {"sha": "2a57881f71d574668815d1674468daf8d44db7fb", "filename": "gcc/config/mips/octeon.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2Focteon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2Focteon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Focteon.md?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -133,5 +133,5 @@\n \n (define_insn_reservation \"octeon_unknown\" 1\n   (and (eq_attr \"cpu\" \"octeon,octeon2\")\n-       (eq_attr \"type\" \"unknown,multi\"))\n+       (eq_attr \"type\" \"unknown,multi,atomic,syncloop\"))\n   \"octeon_pipe0 + octeon_pipe1\")"}, {"sha": "f4c4f03b058813ed93db00bb55f1f3aafa9dde26", "filename": "gcc/config/mips/sb1.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2Fsb1.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2Fsb1.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsb1.md?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -108,7 +108,7 @@\n \n (define_insn_reservation \"ir_sb1_unknown\" 1\n   (and (eq_attr \"cpu\" \"sb1,sb1a\")\n-       (eq_attr \"type\" \"unknown,multi\"))\n+       (eq_attr \"type\" \"unknown,multi,atomic,syncloop\"))\n   \"sb1_ls0+sb1_ls1+sb1_ex0+sb1_ex1+sb1_fp0+sb1_fp1\")\n \n ;; predicted taken branch causes 2 cycle ifetch bubble.  predicted not"}, {"sha": "58013ca442528b2dca09dc48ddc5ad932a6540b6", "filename": "gcc/config/mips/sr71k.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2Fsr71k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2Fsr71k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsr71k.md?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -144,7 +144,7 @@\n \n (define_insn_reservation \"ir_sr70_unknown\" 1\n   (and (eq_attr \"cpu\" \"sr71000\")\n-       (eq_attr \"type\" \"unknown\"))\n+       (eq_attr \"type\" \"unknown,atomic,syncloop\"))\n   \"serial_dispatch\")\n \n "}, {"sha": "4c8dde92859d01155997db5bd29f40962e379b84", "filename": "gcc/config/mips/sync.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsync.md?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -654,7 +654,8 @@\n \t(unspec_volatile:GPR [(match_operand:GPR 2 \"register_operand\" \"0\")]\n \t UNSPEC_ATOMIC_EXCHANGE))]\n   \"ISA_HAS_SWAP\"\n-  \"swap<size>\\t%0,%b1\")\n+  \"swap<size>\\t%0,%b1\"\n+  [(set_attr \"type\" \"atomic\")])\n \n (define_expand \"atomic_fetch_add<mode>\"\n   [(match_operand:GPR 0 \"register_operand\")\n@@ -712,4 +713,5 @@\n \t\t    (match_operand:GPR 2 \"register_operand\" \"0\"))]\n \t UNSPEC_ATOMIC_FETCH_OP))]\n   \"ISA_HAS_LDADD\"\n-  \"ldadd<size>\\t%0,%b1\")\n+  \"ldadd<size>\\t%0,%b1\"\n+  [(set_attr \"type\" \"atomic\")])"}, {"sha": "14204694d5d0266c3815f903619d4c45f9e3394f", "filename": "gcc/config/mips/xlr.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2Fxlr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3088716e20615caba1e82abd8f7cf79d1a73f9ca/gcc%2Fconfig%2Fmips%2Fxlr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fxlr.md?ref=3088716e20615caba1e82abd8f7cf79d1a73f9ca", "patch": "@@ -31,7 +31,7 @@\n ;; Integer arithmetic instructions.\n (define_insn_reservation \"ir_xlr_alu\" 1\n   (and (eq_attr \"cpu\" \"xlr\") \n-       (eq_attr \"type\" \"move,arith,shift,clz,logical,signext,const,unknown,multi,nop,trap\"))\n+       (eq_attr \"type\" \"move,arith,shift,clz,logical,signext,const,unknown,multi,nop,trap,atomic,syncloop\"))\n   \"xlr_main_pipe\")\n \n ;; Integer arithmetic instructions."}]}