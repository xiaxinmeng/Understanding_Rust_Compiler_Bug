{"sha": "994037fc6c69f57bf0866e1d5de39adb08576e57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTk0MDM3ZmM2YzY5ZjU3YmYwODY2ZTFkNWRlMzlhZGIwODU3NmU1Nw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-06-16T08:33:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T08:33:46Z"}, "message": "atree.adb: (Elist*): Protect against uninitialized field\n\n2005-06-14  Robert Dewar  <dewar@adacore.com>\n\n\t* atree.adb: (Elist*): Protect against uninitialized field\n\nFrom-SVN: r101026", "tree": {"sha": "ba3c3dc841581c38264e379a9a4794c44aa3b1f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba3c3dc841581c38264e379a9a4794c44aa3b1f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/994037fc6c69f57bf0866e1d5de39adb08576e57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/994037fc6c69f57bf0866e1d5de39adb08576e57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/994037fc6c69f57bf0866e1d5de39adb08576e57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/994037fc6c69f57bf0866e1d5de39adb08576e57/comments", "author": null, "committer": null, "parents": [{"sha": "399e70e80d48330ed539b43f648741203d9a4f31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/399e70e80d48330ed539b43f648741203d9a4f31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/399e70e80d48330ed539b43f648741203d9a4f31"}], "stats": {"total": 93, "additions": 72, "deletions": 21}, "files": [{"sha": "a194aa15c6e4703cf69cf54e97ae55d60942e7f4", "filename": "gcc/ada/atree.adb", "status": "modified", "additions": 72, "deletions": 21, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/994037fc6c69f57bf0866e1d5de39adb08576e57/gcc%2Fada%2Fatree.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/994037fc6c69f57bf0866e1d5de39adb08576e57/gcc%2Fada%2Fatree.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.adb?ref=994037fc6c69f57bf0866e1d5de39adb08576e57", "patch": "@@ -2886,72 +2886,124 @@ package body Atree is\n       end List14;\n \n       function Elist2 (N : Node_Id) return Elist_Id is\n+         pragma Assert (N in Nodes.First .. Nodes.Last);\n+         Value : constant Union_Id := Nodes.Table (N).Field2;\n       begin\n-         return Elist_Id (Nodes.Table (N).Field2);\n+         if Value = 0 then\n+            return No_Elist;\n+         else\n+            return Elist_Id (Value);\n+         end if;\n       end Elist2;\n \n       function Elist3 (N : Node_Id) return Elist_Id is\n+         pragma Assert (N in Nodes.First .. Nodes.Last);\n+         Value : constant Union_Id := Nodes.Table (N).Field3;\n       begin\n-         return Elist_Id (Nodes.Table (N).Field3);\n+         if Value = 0 then\n+            return No_Elist;\n+         else\n+            return Elist_Id (Value);\n+         end if;\n       end Elist3;\n \n       function Elist4 (N : Node_Id) return Elist_Id is\n+         pragma Assert (N in Nodes.First .. Nodes.Last);\n+         Value : constant Union_Id := Nodes.Table (N).Field4;\n       begin\n-         return Elist_Id (Nodes.Table (N).Field4);\n+         if Value = 0 then\n+            return No_Elist;\n+         else\n+            return Elist_Id (Value);\n+         end if;\n       end Elist4;\n \n       function Elist8 (N : Node_Id) return Elist_Id is\n-      begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return Elist_Id (Nodes.Table (N + 1).Field8);\n+         Value : constant Union_Id := Nodes.Table (N + 1).Field8;\n+      begin\n+         if Value = 0 then\n+            return No_Elist;\n+         else\n+            return Elist_Id (Value);\n+         end if;\n       end Elist8;\n \n       function Elist13 (N : Node_Id) return Elist_Id is\n-      begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return Elist_Id (Nodes.Table (N + 2).Field6);\n+         Value : constant Union_Id := Nodes.Table (N + 2).Field6;\n+      begin\n+         if Value = 0 then\n+            return No_Elist;\n+         else\n+            return Elist_Id (Value);\n+         end if;\n       end Elist13;\n \n       function Elist15 (N : Node_Id) return Elist_Id is\n-      begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return Elist_Id (Nodes.Table (N + 2).Field8);\n+         Value : constant Union_Id := Nodes.Table (N + 2).Field8;\n+      begin\n+         if Value = 0 then\n+            return No_Elist;\n+         else\n+            return Elist_Id (Value);\n+         end if;\n       end Elist15;\n \n       function Elist16 (N : Node_Id) return Elist_Id is\n+         pragma Assert (Nkind (N) in N_Entity);\n          Value : constant Union_Id := Nodes.Table (N + 2).Field9;\n-\n       begin\n-         pragma Assert (Nkind (N) in N_Entity);\n          if Value = 0 then\n             return No_Elist;\n          else\n-            return Elist_Id (Nodes.Table (N + 2).Field9);\n+            return Elist_Id (Value);\n          end if;\n       end Elist16;\n \n       function Elist18 (N : Node_Id) return Elist_Id is\n-      begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return Elist_Id (Nodes.Table (N + 2).Field11);\n+         Value : constant Union_Id := Nodes.Table (N + 2).Field11;\n+      begin\n+         if Value = 0 then\n+            return No_Elist;\n+         else\n+            return Elist_Id (Value);\n+         end if;\n       end Elist18;\n \n       function Elist21 (N : Node_Id) return Elist_Id is\n-      begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return Elist_Id (Nodes.Table (N + 3).Field8);\n+         Value : constant Union_Id := Nodes.Table (N + 3).Field8;\n+      begin\n+         if Value = 0 then\n+            return No_Elist;\n+         else\n+            return Elist_Id (Value);\n+         end if;\n       end Elist21;\n \n       function Elist23 (N : Node_Id) return Elist_Id is\n-      begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return Elist_Id (Nodes.Table (N + 3).Field10);\n+         Value : constant Union_Id := Nodes.Table (N + 3).Field10;\n+      begin\n+         if Value = 0 then\n+            return No_Elist;\n+         else\n+            return Elist_Id (Value);\n+         end if;\n       end Elist23;\n \n       function Elist24 (N : Node_Id) return Elist_Id is\n-      begin\n          pragma Assert (Nkind (N) in N_Entity);\n-         return Elist_Id (Nodes.Table (N + 4).Field6);\n+         Value : constant Union_Id := Nodes.Table (N + 4).Field6;\n+      begin\n+         if Value = 0 then\n+            return No_Elist;\n+         else\n+            return Elist_Id (Value);\n+         end if;\n       end Elist24;\n \n       function Name1 (N : Node_Id) return Name_Id is\n@@ -3019,7 +3071,6 @@ package body Atree is\n       function Uint8 (N : Node_Id) return Uint is\n          pragma Assert (Nkind (N) in N_Entity);\n          U : constant Union_Id := Nodes.Table (N + 1).Field8;\n-\n       begin\n          if U = 0 then\n             return Uint_0;"}]}