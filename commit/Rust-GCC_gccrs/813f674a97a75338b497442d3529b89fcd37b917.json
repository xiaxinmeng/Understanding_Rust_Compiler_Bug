{"sha": "813f674a97a75338b497442d3529b89fcd37b917", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEzZjY3NGE5N2E3NTMzOGI0OTc0NDJkMzUyOWI4OWZjZDM3YjkxNw==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-22T01:44:35Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-22T01:44:35Z"}, "message": "Forgot to check in last time.\n\nFrom-SVN: r15620", "tree": {"sha": "8b2a651b2672a81b571a5a80f92451ea68e8fa8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b2a651b2672a81b571a5a80f92451ea68e8fa8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/813f674a97a75338b497442d3529b89fcd37b917", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/813f674a97a75338b497442d3529b89fcd37b917", "html_url": "https://github.com/Rust-GCC/gccrs/commit/813f674a97a75338b497442d3529b89fcd37b917", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/813f674a97a75338b497442d3529b89fcd37b917/comments", "author": null, "committer": null, "parents": [{"sha": "d5ff3a2ec51ec3b7c9e5012ad0770c367927dc47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5ff3a2ec51ec3b7c9e5012ad0770c367927dc47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5ff3a2ec51ec3b7c9e5012ad0770c367927dc47"}], "stats": {"total": 117, "additions": 17, "deletions": 100}, "files": [{"sha": "c6de5825861da3c6e1e919a06d9d2de5484f6396", "filename": "gcc/flow.c", "status": "modified", "additions": 17, "deletions": 100, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/813f674a97a75338b497442d3529b89fcd37b917/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/813f674a97a75338b497442d3529b89fcd37b917/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=813f674a97a75338b497442d3529b89fcd37b917", "patch": "@@ -249,7 +249,6 @@ static HARD_REG_SET elim_reg_set;\n \n /* Forward declarations */\n static void find_basic_blocks\t\tPROTO((rtx, rtx));\n-static int jmp_uses_reg_or_mem\t\tPROTO((rtx));\n static void mark_label_ref\t\tPROTO((rtx, rtx, int));\n static void life_analysis\t\tPROTO((rtx, int));\n void allocate_for_life_analysis\t\tPROTO((void));\n@@ -492,65 +491,33 @@ find_basic_blocks (f, nonlocal_label_list)\n       /* Find all indirect jump insns and mark them as possibly jumping to all\n \t the labels whose addresses are explicitly used.  This is because,\n \t when there are computed gotos, we can't tell which labels they jump\n-\t to, of all the possibilities.\n-\n-\t Tablejumps and casesi insns are OK and we can recognize them by\n-\t a (use (label_ref)).  */\n+\t to, of all the possibilities.  */\n \n       for (insn = f; insn; insn = NEXT_INSN (insn))\n-\tif (GET_CODE (insn) == JUMP_INSN)\n+\tif (computed_jump_p (insn))\n \t  {\n-\t    rtx pat = PATTERN (insn);\n-\t    int computed_jump = 0;\n-\n-\t    if (GET_CODE (pat) == PARALLEL)\n-\t      {\n-\t\tint len = XVECLEN (pat, 0);\n-\t\tint has_use_labelref = 0;\n-\n-\t\tfor (i = len - 1; i >= 0; i--)\n-\t\t  if (GET_CODE (XVECEXP (pat, 0, i)) == USE\n-\t\t      && (GET_CODE (XEXP (XVECEXP (pat, 0, i), 0))\n-\t\t\t  == LABEL_REF))\n-\t\t    has_use_labelref = 1;\n-\n-\t\tif (! has_use_labelref)\n-\t\t  for (i = len - 1; i >= 0; i--)\n-\t\t    if (GET_CODE (XVECEXP (pat, 0, i)) == SET\n-\t\t\t&& SET_DEST (XVECEXP (pat, 0, i)) == pc_rtx\n-\t\t\t&& jmp_uses_reg_or_mem (SET_SRC (XVECEXP (pat, 0, i))))\n-\t\t      computed_jump = 1;\n-\t      }\n-\t    else if (GET_CODE (pat) == SET\n-\t\t     && SET_DEST (pat) == pc_rtx\n-\t\t     && jmp_uses_reg_or_mem (SET_SRC (pat)))\n-\t      computed_jump = 1;\n-\t\t    \n-\t    if (computed_jump)\n+\t    if (label_value_list_marked_live == 0)\n \t      {\n-\t\tif (label_value_list_marked_live == 0)\n-\t\t  {\n-\t\t    label_value_list_marked_live = 1;\n-\n-\t\t    /* This could be made smarter by only considering\n-\t\t       these live, if the computed goto is live.  */\n+\t\tlabel_value_list_marked_live = 1;\n \n-\t\t    /* Don't delete the labels (in this function) that\n-\t\t       are referenced by non-jump instructions.  */\n+\t\t/* This could be made smarter by only considering\n+\t\t   these live, if the computed goto is live.  */\n \n-\t\t    for (x = label_value_list; x; x = XEXP (x, 1))\n-\t\t      if (! LABEL_REF_NONLOCAL_P (x))\n-\t\t\tblock_live[BLOCK_NUM (XEXP (x, 0))] = 1;\n-\t\t  }\n+\t\t/* Don't delete the labels (in this function) that\n+\t\t   are referenced by non-jump instructions.  */\n \n \t\tfor (x = label_value_list; x; x = XEXP (x, 1))\n-\t\t  mark_label_ref (gen_rtx (LABEL_REF, VOIDmode, XEXP (x, 0)),\n-\t\t\t\t  insn, 0);\n+\t\t  if (! LABEL_REF_NONLOCAL_P (x))\n+\t\t    block_live[BLOCK_NUM (XEXP (x, 0))] = 1;\n+\t      }\n \n-\t\tfor (x = forced_labels; x; x = XEXP (x, 1))\n-\t\t  mark_label_ref (gen_rtx (LABEL_REF, VOIDmode, XEXP (x, 0)),\n+\t    for (x = label_value_list; x; x = XEXP (x, 1))\n+\t      mark_label_ref (gen_rtx (LABEL_REF, VOIDmode, XEXP (x, 0)),\n+\t\t\t      insn, 0);\n+\n+\t    for (x = forced_labels; x; x = XEXP (x, 1))\n+\t      mark_label_ref (gen_rtx (LABEL_REF, VOIDmode, XEXP (x, 0)),\n \t\t\t      insn, 0);\n-\t      }\n \t  }\n \n       /* Find all call insns and mark them as possibly jumping\n@@ -769,56 +736,6 @@ find_basic_blocks (f, nonlocal_label_list)\n \f\n /* Subroutines of find_basic_blocks.  */\n \n-/* Return 1 if X, the SRC_SRC of  SET of (pc) contain a REG or MEM that is\n-   not in the constant pool and not in the condition of an IF_THEN_ELSE.  */\n-\n-static int\n-jmp_uses_reg_or_mem (x)\n-     rtx x;\n-{\n-  enum rtx_code code = GET_CODE (x);\n-  int i, j;\n-  char *fmt;\n-\n-  switch (code)\n-    {\n-    case CONST:\n-    case LABEL_REF:\n-    case PC:\n-      return 0;\n-\n-    case REG:\n-      return 1;\n-\n-    case MEM:\n-      return ! (GET_CODE (XEXP (x, 0)) == SYMBOL_REF\n-\t\t&& CONSTANT_POOL_ADDRESS_P (XEXP (x, 0)));\n-\n-    case IF_THEN_ELSE:\n-      return (jmp_uses_reg_or_mem (XEXP (x, 1))\n-\t      || jmp_uses_reg_or_mem (XEXP (x, 2)));\n-\n-    case PLUS:  case MINUS:  case MULT:\n-      return (jmp_uses_reg_or_mem (XEXP (x, 0))\n-\t      || jmp_uses_reg_or_mem (XEXP (x, 1)));\n-    }\n-\n-  fmt = GET_RTX_FORMAT (code);\n-  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n-    {\n-      if (fmt[i] == 'e'\n-\t  && jmp_uses_reg_or_mem (XEXP (x, i)))\n-\treturn 1;\n-\n-      if (fmt[i] == 'E')\n-\tfor (j = 0; j < XVECLEN (x, i); j++)\n-\t  if (jmp_uses_reg_or_mem (XVECEXP (x, i, j)))\n-\t    return 1;\n-    }\n-\n-  return 0;\n-}\n-\n /* Check expression X for label references;\n    if one is found, add INSN to the label's chain of references.\n "}]}