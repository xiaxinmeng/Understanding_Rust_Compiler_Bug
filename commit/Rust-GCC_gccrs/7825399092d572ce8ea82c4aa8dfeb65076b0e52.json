{"sha": "7825399092d572ce8ea82c4aa8dfeb65076b0e52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgyNTM5OTA5MmQ1NzJjZThlYTgyYzRhYThkZmViNjUwNzZiMGU1Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-22T07:42:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-22T07:42:18Z"}, "message": "libstdc++: Use correct argument type for __use_alloc, again [PR 96803]\n\nWhile backporting 5494edae83ad33c769bd1ebc98f0c492453a6417 I noticed\nthat it's still not correct. I made the allocator-extended constructor\nuse the right type for the uses-allocator construction detection, but I\nused an rvalue when it should be a const lvalue.\n\nThis should fix it properly this time.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/96803\n\t* include/std/tuple\n\t(_Tuple_impl(allocator_arg_t, Alloc, const _Tuple_impl<U...>&)):\n\tUse correct value category in __use_alloc call.\n\t* testsuite/20_util/tuple/cons/96803.cc: Check with constructors\n\tthat require correct value category to be used.", "tree": {"sha": "b67e14910d10e7fde6844489ceaf9915876b99bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b67e14910d10e7fde6844489ceaf9915876b99bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7825399092d572ce8ea82c4aa8dfeb65076b0e52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7825399092d572ce8ea82c4aa8dfeb65076b0e52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7825399092d572ce8ea82c4aa8dfeb65076b0e52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7825399092d572ce8ea82c4aa8dfeb65076b0e52/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d149962d6ac3c940fee95707cb6bafdb055e9bea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d149962d6ac3c940fee95707cb6bafdb055e9bea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d149962d6ac3c940fee95707cb6bafdb055e9bea"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "11ad1991108eea6684aaf47708ab0a13d9c6e7ae", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7825399092d572ce8ea82c4aa8dfeb65076b0e52/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7825399092d572ce8ea82c4aa8dfeb65076b0e52/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=7825399092d572ce8ea82c4aa8dfeb65076b0e52", "patch": "@@ -355,7 +355,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t    const _Tuple_impl<_Idx, _UHead, _UTails...>& __in)\n \t: _Inherited(__tag, __a,\n \t\t     _Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)),\n-\t  _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),\n+\t  _Base(__use_alloc<_Head, _Alloc, const _UHead&>(__a),\n \t\t_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))\n \t{ }\n "}, {"sha": "867a42150e00fca8d4934a071f99133c5b6d3e65", "filename": "libstdc++-v3/testsuite/20_util/tuple/cons/96803.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7825399092d572ce8ea82c4aa8dfeb65076b0e52/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F96803.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7825399092d572ce8ea82c4aa8dfeb65076b0e52/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F96803.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftuple%2Fcons%2F96803.cc?ref=7825399092d572ce8ea82c4aa8dfeb65076b0e52", "patch": "@@ -38,4 +38,25 @@ test01()\n   // std::tuple chooses wrong constructor for uses-allocator construction\n   std::tuple<int> o;\n   std::tuple<X> nok(std::allocator_arg, std::allocator<int>(), o);\n+\n+  std::tuple<int, int> oo;\n+  std::tuple<X, X> nn(std::allocator_arg, std::allocator<int>(), oo);\n+}\n+\n+struct Y\n+{\n+  using allocator_type = std::allocator<int>;\n+\n+  Y(const X&) { }\n+  Y(const X&, const allocator_type&) { }\n+\n+  Y(X&&) { }\n+  Y(std::allocator_arg_t, const allocator_type&, X&&) { }\n+};\n+\n+void\n+test02()\n+{\n+  std::tuple<X, X> o{1, 1};\n+  std::tuple<Y, Y> oo(std::allocator_arg, std::allocator<int>(), o);\n }"}]}