{"sha": "87b470b3635a5f8aaf9c6d4d21945d06d3379a6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdiNDcwYjM2MzVhNWY4YWFmOWM2ZDRkMjE5NDVkMDZkMzM3OWE2Yg==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-09-21T14:52:09Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-09-21T14:52:09Z"}, "message": "Handle lines encoded into several maps in linemap_position_for_loc_and_offset\n\nlinemap_position_for_loc_and_offset() tries to generate a location_t\nencoding a column offset from the current location, for example, point\nto a certain character inside a string. This is trivial to do when the\nnew location \"fits within\" the map of the original location. However,\nit may happen that the (long) line corresponding to the original\nlocation is encoded in several maps, thus the new location should\nactually be encoded in a subsequent map from the original location.\nThis patch detects this case and adjusts the map correspondingly.\n\n(This shows that the line-map representation is quite wasteful in this\ncase, because line-maps always start at column 0. That is, map[0]\nhighest location may encode up to line 8 column 80, then\nmap[1]->start_location starts encoding at line 8 column 0. Thus, there\nare two location_t values that point to the same source location.)\n\nlibcpp/ChangeLog:\n\n2015-09-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/66415\n\t* line-map.c (linemap_position_for_loc_and_offset): Handle the\n\tcase of long lines encoded in multiple maps.\n\ngcc/testsuite/ChangeLog:\n\n2015-09-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR c/66415\n\t* gcc.dg/cpp/pr66415-1.c: Test column number.\n\nFrom-SVN: r227975", "tree": {"sha": "d6ef29716f94168c6e65dfa60ed66087d0e70533", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6ef29716f94168c6e65dfa60ed66087d0e70533"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87b470b3635a5f8aaf9c6d4d21945d06d3379a6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87b470b3635a5f8aaf9c6d4d21945d06d3379a6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87b470b3635a5f8aaf9c6d4d21945d06d3379a6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87b470b3635a5f8aaf9c6d4d21945d06d3379a6b/comments", "author": null, "committer": null, "parents": [{"sha": "a49448515dfcb69928dc77213a2d2f5aa43ee01c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a49448515dfcb69928dc77213a2d2f5aa43ee01c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a49448515dfcb69928dc77213a2d2f5aa43ee01c"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "61c3b962782a79561c263e5a6c97fc4b13ddb928", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b470b3635a5f8aaf9c6d4d21945d06d3379a6b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b470b3635a5f8aaf9c6d4d21945d06d3379a6b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=87b470b3635a5f8aaf9c6d4d21945d06d3379a6b", "patch": "@@ -1,3 +1,8 @@\n+2015-09-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/66415\n+\t* gcc.dg/cpp/pr66415-1.c: Test column number.\n+\n 2015-09-21  Richard Biener  <rguenther@suse.de>\n \n \t* g++.dg/ext/attr-alias-3.C: Add -g."}, {"sha": "349ec4883fa21bfdfa9bdfd036404003143517cc", "filename": "gcc/testsuite/gcc.dg/cpp/pr66415-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b470b3635a5f8aaf9c6d4d21945d06d3379a6b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr66415-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b470b3635a5f8aaf9c6d4d21945d06d3379a6b/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr66415-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr66415-1.c?ref=87b470b3635a5f8aaf9c6d4d21945d06d3379a6b", "patch": "@@ -5,5 +5,5 @@\n void\n fn1 (void)\n {\n-  __builtin_printf                                (\"xxxxxxxxxxxxxxxxx%dxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"); /* { dg-warning \"format\" } */\n+  __builtin_printf                                (\"xxxxxxxxxxxxxxxxx%dxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"); /* { dg-warning \"71:format\" } */\n }"}, {"sha": "5cb23d032676240bfc50469d1611e14a16082d49", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b470b3635a5f8aaf9c6d4d21945d06d3379a6b/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b470b3635a5f8aaf9c6d4d21945d06d3379a6b/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=87b470b3635a5f8aaf9c6d4d21945d06d3379a6b", "patch": "@@ -1,3 +1,9 @@\n+2015-09-21  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR c/66415\n+\t* line-map.c (linemap_position_for_loc_and_offset): Handle the\n+\tcase of long lines encoded in multiple maps.\n+\n 2015-09-07  Marek Polacek  <polacek@redhat.com>\n \n \t* system.h (INTTYPE_MINIMUM): Rewrite to avoid shift warning."}, {"sha": "3d82e9bfca94e9b8ca3deac99d5e41588074d452", "filename": "libcpp/line-map.c", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87b470b3635a5f8aaf9c6d4d21945d06d3379a6b/libcpp%2Fline-map.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87b470b3635a5f8aaf9c6d4d21945d06d3379a6b/libcpp%2Fline-map.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fline-map.c?ref=87b470b3635a5f8aaf9c6d4d21945d06d3379a6b", "patch": "@@ -688,28 +688,34 @@ linemap_position_for_loc_and_offset (struct line_maps *set,\n   /* We find the real location and shift it.  */\n   loc = linemap_resolve_location (set, loc, LRK_SPELLING_LOCATION, &map);\n   /* The new location (loc + offset) should be higher than the first\n-     location encoded by MAP.\n-     FIXME: We used to linemap_assert_fails here and in the if below,\n-     but that led to PR66415.  So give up for now.  */\n-  if ((MAP_START_LOCATION (map) >= loc + offset))\n+     location encoded by MAP.  This can fail if the line information\n+     is messed up because of line directives (see PR66415).  */\n+  if (MAP_START_LOCATION (map) >= loc + offset)\n     return loc;\n \n+  linenum_type line = SOURCE_LINE (map, loc);\n+  unsigned int column = SOURCE_COLUMN (map, loc);\n+\n   /* If MAP is not the last line map of its set, then the new location\n      (loc + offset) should be less than the first location encoded by\n-     the next line map of the set.  */\n-  if (map != LINEMAPS_LAST_ORDINARY_MAP (set))\n-    if ((loc + offset >= MAP_START_LOCATION (&map[1])))\n-      return loc;\n+     the next line map of the set.  Otherwise, we try to encode the\n+     location in the next map.  */\n+  while (map != LINEMAPS_LAST_ORDINARY_MAP (set)\n+\t && loc + offset >= MAP_START_LOCATION (&map[1]))\n+    {\n+      map = &map[1];\n+      /* If the next map starts in a higher line, we cannot encode the\n+\t location there.  */\n+      if (line < ORDINARY_MAP_STARTING_LINE_NUMBER (map))\n+\treturn loc;\n+    }\n \n-  offset += SOURCE_COLUMN (map, loc);\n-  if (linemap_assert_fails\n-        (offset < (1u << map->column_bits)))\n+  offset += column;\n+  if (linemap_assert_fails (offset < (1u << map->column_bits)))\n     return loc;\n \n   source_location r = \n-    linemap_position_for_line_and_column (map,\n-\t\t\t\t\t  SOURCE_LINE (map, loc),\n-\t\t\t\t\t  offset);\n+    linemap_position_for_line_and_column (map, line, offset);\n   if (linemap_assert_fails (r <= set->highest_location)\n       || linemap_assert_fails (map == linemap_lookup (set, r)))\n     return loc;"}]}