{"sha": "58ad6b2802592f1448eed48e8ad4e0e87985cecb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThhZDZiMjgwMjU5MmYxNDQ4ZWVkNDhlOGFkNGUwZTg3OTg1Y2VjYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-25T10:31:37Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-23T10:05:42Z"}, "message": "First do add_noreturn_fake_exit_edges in connect_infinite_loops_to_exit\n\nMost callers of connect_infinite_loops_to_exit already do this but\nthe few that do not end up with extra exit edges.  The following\nmakes that consistent, also matching the post-dominance DFS walk code.\n\n2021-02-25  Richard Biener  <rguenther@suse.de>\n\n\t* cfganal.c (connect_infinite_loops_to_exit): First call\n\tadd_noreturn_fake_exit_edges.\n\t* ipa-sra.c (process_scan_results): Do not call the now redundant\n\tadd_noreturn_fake_exit_edges.\n\t* predict.c (tree_estimate_probability): Likewise.\n\t(rebuild_frequencies): Likewise.\n\t* store-motion.c (one_store_motion_pass): Likewise.", "tree": {"sha": "30b72ca9d3cf65ffb8a78916140aca0253359da6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30b72ca9d3cf65ffb8a78916140aca0253359da6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58ad6b2802592f1448eed48e8ad4e0e87985cecb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58ad6b2802592f1448eed48e8ad4e0e87985cecb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58ad6b2802592f1448eed48e8ad4e0e87985cecb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58ad6b2802592f1448eed48e8ad4e0e87985cecb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "500305a92ef85e6b87ad428a35221c62f4037b93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/500305a92ef85e6b87ad428a35221c62f4037b93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/500305a92ef85e6b87ad428a35221c62f4037b93"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "cec5abe30f96d2dc2a63c8fe295142ef992a6ff9", "filename": "gcc/cfganal.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ad6b2802592f1448eed48e8ad4e0e87985cecb/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ad6b2802592f1448eed48e8ad4e0e87985cecb/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=58ad6b2802592f1448eed48e8ad4e0e87985cecb", "patch": "@@ -582,9 +582,9 @@ add_noreturn_fake_exit_edges (void)\n       make_single_succ_edge (bb, EXIT_BLOCK_PTR_FOR_FN (cfun), EDGE_FAKE);\n }\n \n-/* This function adds a fake edge between any infinite loops to the\n-   exit block.  Some optimizations require a path from each node to\n-   the exit node.\n+/* This function adds a fake edge between any noreturn block and\n+   infinite loops to the exit block.  Some optimizations require a path\n+   from each node to the exit node.\n \n    See also Morgan, Figure 3.10, pp. 82-83.\n \n@@ -596,6 +596,10 @@ add_noreturn_fake_exit_edges (void)\n void\n connect_infinite_loops_to_exit (void)\n {\n+  /* First add fake exits to noreturn blocks, this is required to\n+     discover only truly infinite loops below.  */\n+  add_noreturn_fake_exit_edges ();\n+\n   /* Perform depth-first search in the reverse graph to find nodes\n      reachable from the exit block.  */\n   depth_first_search dfs;"}, {"sha": "7a89906cee637a55a18c482fa23b1e8c04e6a20c", "filename": "gcc/ipa-sra.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ad6b2802592f1448eed48e8ad4e0e87985cecb/gcc%2Fipa-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ad6b2802592f1448eed48e8ad4e0e87985cecb/gcc%2Fipa-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-sra.c?ref=58ad6b2802592f1448eed48e8ad4e0e87985cecb", "patch": "@@ -2394,7 +2394,6 @@ process_scan_results (cgraph_node *node, struct function *fun,\n \t    if (!pdoms_calculated)\n \t      {\n \t\tgcc_checking_assert (cfun);\n-\t\tadd_noreturn_fake_exit_edges ();\n \t\tconnect_infinite_loops_to_exit ();\n \t\tcalculate_dominance_info (CDI_POST_DOMINATORS);\n \t\tpdoms_calculated = true;"}, {"sha": "5d0cae5c4a4ee72a8df31d653ee4263ebb8b1eaf", "filename": "gcc/predict.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ad6b2802592f1448eed48e8ad4e0e87985cecb/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ad6b2802592f1448eed48e8ad4e0e87985cecb/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=58ad6b2802592f1448eed48e8ad4e0e87985cecb", "patch": "@@ -3106,7 +3106,6 @@ tree_estimate_probability (bool dry_run)\n {\n   basic_block bb;\n \n-  add_noreturn_fake_exit_edges ();\n   connect_infinite_loops_to_exit ();\n   /* We use loop_niter_by_eval, which requires that the loops have\n      preheaders.  */\n@@ -4289,7 +4288,6 @@ rebuild_frequencies (void)\n   if (profile_status_for_fn (cfun) == PROFILE_GUESSED)\n     {\n       loop_optimizer_init (0);\n-      add_noreturn_fake_exit_edges ();\n       mark_irreducible_loops ();\n       connect_infinite_loops_to_exit ();\n       estimate_bb_frequencies (true);"}, {"sha": "3f6e003219d29e5662f2efb21c8b1a9a04fbaff9", "filename": "gcc/store-motion.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58ad6b2802592f1448eed48e8ad4e0e87985cecb/gcc%2Fstore-motion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58ad6b2802592f1448eed48e8ad4e0e87985cecb/gcc%2Fstore-motion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstore-motion.c?ref=58ad6b2802592f1448eed48e8ad4e0e87985cecb", "patch": "@@ -1152,7 +1152,6 @@ one_store_motion_pass (void)\n \n   /* Now compute kill & transp vectors.  */\n   build_store_vectors ();\n-  add_noreturn_fake_exit_edges ();\n   connect_infinite_loops_to_exit ();\n \n   edge_list = pre_edge_rev_lcm (num_stores, st_transp, st_avloc,"}]}