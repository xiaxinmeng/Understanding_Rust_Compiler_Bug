{"sha": "0cb36c85ab0c9876dde207d5b93aad7398539c7e", "node_id": "C_kwDOANBUbNoAKDBjYjM2Yzg1YWIwYzk4NzZkZGUyMDdkNWI5M2FhZDczOTg1MzljN2U", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-12-02T09:21:25Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-12-06T13:58:48Z"}, "message": "ada: Fix spurious error in checking of SPARK elaboration\n\nThe problem is that the computation of early call regions skips freeze nodes\nbut scenarios involving procedures declared as actions of these freeze nodes\nare taken into account.  As a consequence if a subprogram body, typically of\nan expression function, is placed just after a freeze node, its early call\nregion depends on whether the construct just before the freeze node can be\npreelaborated or not; in other words, the legality of calls made from the\nactions of this freeze node to the subprogram depends on what happens ahead\nof the freeze node, which may be totally unrelated to the situation.\n\nThis change disables the ABE diagnostics in this case, as is done in a few\nother similar cases leading to bogus errors too.\n\ngcc/ada/\n\n\t* sem_elab.adb (Processing_In_State): Add Within_Freezing_Actions\n\tcomponent.\n\t(Process_Conditional_ABE_Call): Compute its value.\n\t(Process_Conditional_ABE_Call_SPARK): For a call and a target in\n\tthe main unit, do not emit any ABE diagnostics if the call occurs\n\tin a freezing actions context.", "tree": {"sha": "de01fe4ce5cafc7e9e510a7dc8b84684ec3a55e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de01fe4ce5cafc7e9e510a7dc8b84684ec3a55e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cb36c85ab0c9876dde207d5b93aad7398539c7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb36c85ab0c9876dde207d5b93aad7398539c7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cb36c85ab0c9876dde207d5b93aad7398539c7e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb36c85ab0c9876dde207d5b93aad7398539c7e/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea588d41f39428b0c3b02f016353dceb1aaaaa39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea588d41f39428b0c3b02f016353dceb1aaaaa39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea588d41f39428b0c3b02f016353dceb1aaaaa39"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "9bf8614fd5276b06761e1246386c084516c737cc", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cb36c85ab0c9876dde207d5b93aad7398539c7e/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cb36c85ab0c9876dde207d5b93aad7398539c7e/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=0cb36c85ab0c9876dde207d5b93aad7398539c7e", "patch": "@@ -881,6 +881,10 @@ package body Sem_Elab is\n       --  The subprogram body traversal mode. Once set, this value should not\n       --  be changed.\n \n+      Within_Freezing_Actions : Boolean := False;\n+      --  This flag is set when the Processing phase is currently examining a\n+      --  scenario which was reached from the actions of a freeze node.\n+\n       Within_Generic : Boolean := False;\n       --  This flag is set when the Processing phase is currently within a\n       --  generic unit.\n@@ -5353,6 +5357,7 @@ package body Sem_Elab is\n          Subp_Id   : constant Entity_Id     := Target (Call_Rep);\n          Subp_Rep  : constant Target_Rep_Id :=\n                        Target_Representation_Of (Subp_Id, In_State);\n+         Body_Decl : constant Node_Id       := Body_Declaration (Subp_Rep);\n          Subp_Decl : constant Node_Id       := Spec_Declaration (Subp_Rep);\n \n          SPARK_Rules_On : constant Boolean :=\n@@ -5452,6 +5457,16 @@ package body Sem_Elab is\n              or else not Elaboration_Warnings_OK (Call_Rep)\n              or else not Elaboration_Warnings_OK (Subp_Rep);\n \n+         --  The call occurs in freezing actions context when a prior scenario\n+         --  is already in that mode, or when the target is a subprogram whose\n+         --  body has been generated as a freezing action. Update the state of\n+         --  the Processing phase to reflect this.\n+\n+         New_In_State.Within_Freezing_Actions :=\n+           New_In_State.Within_Freezing_Actions\n+             or else (Present (Body_Decl)\n+                       and then Nkind (Parent (Body_Decl)) = N_Freeze_Entity);\n+\n          --  The call occurs in an initial condition context when a prior\n          --  scenario is already in that mode, or when the target is an\n          --  Initial_Condition procedure. Update the state of the Processing\n@@ -5502,7 +5517,7 @@ package body Sem_Elab is\n             In_State => New_In_State);\n \n          Traverse_Conditional_ABE_Body\n-           (N        => Body_Declaration (Subp_Rep),\n+           (N        => Body_Decl,\n             In_State => New_In_State);\n       end Process_Conditional_ABE_Call;\n \n@@ -5721,6 +5736,13 @@ package body Sem_Elab is\n             if In_State.Suppress_Warnings then\n                null;\n \n+            --  Do not emit any ABE diagnostics when the call occurs in a\n+            --  freezing actions context because this leads to incorrect\n+            --  diagnostics.\n+\n+            elsif In_State.Within_Freezing_Actions then\n+               null;\n+\n             --  Do not emit any ABE diagnostics when the call occurs in an\n             --  initial condition context because this leads to incorrect\n             --  diagnostics."}]}