{"sha": "fc6f1128ae603164aea6303ce2b3ed0b57e6a378", "node_id": "C_kwDOANBUbNoAKGZjNmYxMTI4YWU2MDMxNjRhZWE2MzAzY2UyYjNlZDBiNTdlNmEzNzg", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-13T21:59:13Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-01-14T10:14:25Z"}, "message": "libstdc++: Ignore cv-quals when std::allocator<void> constructs\n\nWhen I added the std::allocator_traits<std::allocator<void>>\nspecialization it broke code like this:\n\n  std::allocate_shared<const int>(std::allocator<void>());\n\nThe problem is that allocator_traits<allocator<void>>::construct(a, p)\nnow uses std::_Construct(p), which only does a static_cast<void*>(p) and\nso fails if the pointer has cv-quals.\n\nThis changes std::_Construct (and the related std::_Construct_novalue)\nto use a C-style cast to (void*) which matches the effects of the\n\"voidify\" helper in the C++20 standard.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_construct.h (_Construct, _Construct_novalue):\n\tAlso cast away cv-qualifiers when converting pointer to void.\n\t* testsuite/20_util/allocator/void.cc: Test construct function\n\twith cv-qualified types.", "tree": {"sha": "24e5f5da306c6f704772567d604faf1954daa2c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24e5f5da306c6f704772567d604faf1954daa2c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc6f1128ae603164aea6303ce2b3ed0b57e6a378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6f1128ae603164aea6303ce2b3ed0b57e6a378", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc6f1128ae603164aea6303ce2b3ed0b57e6a378", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc6f1128ae603164aea6303ce2b3ed0b57e6a378/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d67ba1dce9796bff177e52e2bbb68bfa2c69a884", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d67ba1dce9796bff177e52e2bbb68bfa2c69a884", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d67ba1dce9796bff177e52e2bbb68bfa2c69a884"}], "stats": {"total": 19, "additions": 17, "deletions": 2}, "files": [{"sha": "9531222809c64aba711fbcebb1eaa9092b6e1643", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f1128ae603164aea6303ce2b3ed0b57e6a378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f1128ae603164aea6303ce2b3ed0b57e6a378/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=fc6f1128ae603164aea6303ce2b3ed0b57e6a378", "patch": "@@ -116,7 +116,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return;\n \t}\n #endif\n-      ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...);\n+      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);\n     }\n #else\n   template<typename _T1, typename _T2>\n@@ -132,7 +132,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _T1>\n     inline void\n     _Construct_novalue(_T1* __p)\n-    { ::new(static_cast<void*>(__p)) _T1; }\n+    { ::new((void*)__p) _T1; }\n \n   template<typename _ForwardIterator>\n     _GLIBCXX20_CONSTEXPR void"}, {"sha": "5cdf0be012c0eac0cf4f67551e4aedbbe6a2f323", "filename": "libstdc++-v3/testsuite/20_util/allocator/void.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc6f1128ae603164aea6303ce2b3ed0b57e6a378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Fvoid.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc6f1128ae603164aea6303ce2b3ed0b57e6a378/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Fvoid.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator%2Fvoid.cc?ref=fc6f1128ae603164aea6303ce2b3ed0b57e6a378", "patch": "@@ -87,8 +87,23 @@ static_assert( std::is_same<std::allocator<void>::const_pointer, const void*>(),\n     \"const_pointer is const void*\" );\n #endif // C++20\n \n+void\n+test02()\n+{\n+  std::allocator<void> av;\n+  int* p = std::allocator<int>().allocate(1);\n+  const int* c = p;\n+  std::allocator_traits<std::allocator<void>>::construct(av, c, 0);\n+  volatile int* v = p;\n+  std::allocator_traits<std::allocator<void>>::construct(av, v, 0);\n+  const volatile int* cv = p;\n+  std::allocator_traits<std::allocator<void>>::construct(av, cv, 0);\n+  std::allocator<int>().deallocate(p, 1);\n+}\n+\n int\n main()\n {\n   test01();\n+  test02();\n }"}]}