{"sha": "21cf98f6e0308e8cbb6ef5e829e8452d2750d9bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFjZjk4ZjZlMDMwOGU4Y2JiNmVmNWU4MjllODQ1MmQyNzUwZDliYg==", "commit": {"author": {"name": "Ingo Proetel", "email": "proetel@aicas.com", "date": "2003-09-20T21:23:47Z"}, "committer": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2003-09-20T21:23:47Z"}, "message": "UnicastRef.java: make constructor public and check if serverobject is compatible in case client...\n\n2003-08-11  Ingo Proetel  <proetel@aicas.com>\n\n        * gnu/java/rmi/server/UnicastRef.java: make constructor public and check if serverobject\n        is compatible in case client and server are running in the same VM\n\t(remerged from Classpath on 2003-09-20)\n\nFrom-SVN: r71611", "tree": {"sha": "85aea3e1ebf8e7fffd044f8091ea790b5c604ccd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85aea3e1ebf8e7fffd044f8091ea790b5c604ccd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21cf98f6e0308e8cbb6ef5e829e8452d2750d9bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21cf98f6e0308e8cbb6ef5e829e8452d2750d9bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21cf98f6e0308e8cbb6ef5e829e8452d2750d9bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21cf98f6e0308e8cbb6ef5e829e8452d2750d9bb/comments", "author": {"login": "iproetel", "id": 895564, "node_id": "MDQ6VXNlcjg5NTU2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/895564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iproetel", "html_url": "https://github.com/iproetel", "followers_url": "https://api.github.com/users/iproetel/followers", "following_url": "https://api.github.com/users/iproetel/following{/other_user}", "gists_url": "https://api.github.com/users/iproetel/gists{/gist_id}", "starred_url": "https://api.github.com/users/iproetel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iproetel/subscriptions", "organizations_url": "https://api.github.com/users/iproetel/orgs", "repos_url": "https://api.github.com/users/iproetel/repos", "events_url": "https://api.github.com/users/iproetel/events{/privacy}", "received_events_url": "https://api.github.com/users/iproetel/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "94322bebd2c690aec09fe2424ed39fa7c6512cea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94322bebd2c690aec09fe2424ed39fa7c6512cea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94322bebd2c690aec09fe2424ed39fa7c6512cea"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "b0cc71f5b47dc5988e8d1305ae4cd87d8c3e5fa0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21cf98f6e0308e8cbb6ef5e829e8452d2750d9bb/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21cf98f6e0308e8cbb6ef5e829e8452d2750d9bb/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=21cf98f6e0308e8cbb6ef5e829e8452d2750d9bb", "patch": "@@ -1,3 +1,9 @@\n+2003-08-11  Ingo Proetel  <proetel@aicas.com>\n+\n+        * gnu/java/rmi/server/UnicastRef.java: make constructor public and check if serverobject  \n+        is compatible in case client and server are running in the same VM\n+\t(remerged from Classpath on 2003-09-20)\n+\n 2003-09-19  David Daney <ddaney@avtrex.com>\n \n \t* java/lang/ref/Reference.java (clear): Set referent to null and"}, {"sha": "aaec7a3b470d07fa6f308ba42bae151ca94ec224", "filename": "libjava/gnu/java/rmi/server/UnicastRef.java", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21cf98f6e0308e8cbb6ef5e829e8452d2750d9bb/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRef.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21cf98f6e0308e8cbb6ef5e829e8452d2750d9bb/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRef.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRef.java?ref=21cf98f6e0308e8cbb6ef5e829e8452d2750d9bb", "patch": "@@ -37,32 +37,24 @@\n \n package gnu.java.rmi.server;\n \n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutput;\n+import java.io.ObjectOutputStream;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n import java.rmi.Remote;\n import java.rmi.RemoteException;\n-import java.rmi.server.RemoteRef;\n-import java.rmi.server.RMISocketFactory;\n+import java.rmi.server.ObjID;\n+import java.rmi.server.Operation;\n import java.rmi.server.RMIClientSocketFactory;\n-import java.rmi.server.RMIServerSocketFactory;\n-import java.rmi.server.RemoteObject;\n import java.rmi.server.RemoteCall;\n-import java.rmi.server.UnicastRemoteObject;\n-import java.rmi.server.Operation;\n-import java.rmi.server.ObjID;\n+import java.rmi.server.RemoteObject;\n+import java.rmi.server.RemoteRef;\n import java.rmi.server.UID;\n-import java.lang.reflect.Method;\n-import java.io.ObjectOutput;\n-import java.io.ObjectInput;\n-import java.io.IOException;\n-import java.net.Socket;\n-import java.net.InetAddress;\n-import java.io.BufferedInputStream;\n-import java.io.BufferedOutputStream;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n-import java.io.DataInputStream;\n-import java.io.DataOutputStream;\n-\n-import java.lang.reflect.InvocationTargetException;\n \n public class UnicastRef\n \timplements RemoteRef, ProtocolConstants {\n@@ -73,8 +65,9 @@\n /**\n  * Used by serialization, and let subclass capable of having default constructor\n  */\n-//private \n-UnicastRef() {\n+// must be public otherwise java.rmi.RemoteObject cannot instantiate this class\n+// -- iP\n+public UnicastRef() {\n }\n \n public UnicastRef(ObjID objid, String host, int port, RMIClientSocketFactory csf) {\n@@ -90,7 +83,10 @@ public Object invoke(Remote obj, Method method, Object[] params, long opnum) thr\n     // Check if client and server are in the same VM, then local call can be used to\n     // replace remote call, but it's somewhat violating remote semantic.\n     Object svrobj = manager.serverobj;\n-    if(svrobj != null){\n+    \n+    // Make sure that the server object is compatible. It could be loaded from a different\n+    // classloader --iP\n+    if(svrobj != null && method.getDeclaringClass().isInstance(svrobj)){\n         //local call\n \t\tObject ret = null;\n \t\ttry{"}]}