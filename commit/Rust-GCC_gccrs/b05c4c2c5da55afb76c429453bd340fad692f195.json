{"sha": "b05c4c2c5da55afb76c429453bd340fad692f195", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA1YzRjMmM1ZGE1NWFmYjc2YzQyOTQ1M2JkMzQwZmFkNjkyZjE5NQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-06-30T08:32:34Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-06-30T08:56:06Z"}, "message": "gcc-changelog: support 'This revert commit' prefix.\n\ncontrib/ChangeLog:\n\n\t* gcc-changelog/git_check_commit.py: Print revision\n\tof original_info.\n\t* gcc-changelog/git_commit.py: Support Revert commits.", "tree": {"sha": "cc509c5f7efcdc024b753a2a94f7242b2bf78b8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc509c5f7efcdc024b753a2a94f7242b2bf78b8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b05c4c2c5da55afb76c429453bd340fad692f195", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl76/iYACgkQTcGC3A+n\nN4VIWAgAm5oMOuZZ24Nxz6kXZVpHoBCpJyVTJnYjbauoGthOhCCDEbzBQtJx6AlZ\nSJpRZffkrPzp6xo/o5u2gJ2tQH9Ns0QWZGaLh+mSq9rHQr94oO0gefUoeov0lXSm\nuNU+l7nhAzign4sZMUIVV26ralZTM4yjO5zAdAUu/kwOlXBUKlo9Tmmtwjh+90GP\nrTyotI0cnC0I0q0rimhfXnENlhras7wuTx8eWNRnuS938qRFDUu6owqolHDphEiR\n4LJSpwKOVqUzQuO/AwFBSgcXM4bqy2VLR5BfVu0+42DdKk8gjKsSPK0FxPpN3EQW\n6yTk1lyHZilYKq0gYyx3nSew6ElKtQ==\n=77e4\n-----END PGP SIGNATURE-----", "payload": "tree cc509c5f7efcdc024b753a2a94f7242b2bf78b8d\nparent de4676c923c85aba77020ad205873ed007f6c2df\nauthor Martin Liska <mliska@suse.cz> 1593505954 +0200\ncommitter Martin Liska <mliska@suse.cz> 1593507366 +0200\n\ngcc-changelog: support 'This revert commit' prefix.\n\ncontrib/ChangeLog:\n\n\t* gcc-changelog/git_check_commit.py: Print revision\n\tof original_info.\n\t* gcc-changelog/git_commit.py: Support Revert commits.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b05c4c2c5da55afb76c429453bd340fad692f195", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b05c4c2c5da55afb76c429453bd340fad692f195", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b05c4c2c5da55afb76c429453bd340fad692f195/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de4676c923c85aba77020ad205873ed007f6c2df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de4676c923c85aba77020ad205873ed007f6c2df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de4676c923c85aba77020ad205873ed007f6c2df"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "935425ef8132153e002298e2e9edb1fbf78305e3", "filename": "contrib/gcc-changelog/git_check_commit.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b05c4c2c5da55afb76c429453bd340fad692f195/contrib%2Fgcc-changelog%2Fgit_check_commit.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b05c4c2c5da55afb76c429453bd340fad692f195/contrib%2Fgcc-changelog%2Fgit_check_commit.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Fgit_check_commit.py?ref=b05c4c2c5da55afb76c429453bd340fad692f195", "patch": "@@ -37,7 +37,7 @@\n for git_commit in parse_git_revisions(args.git_path, args.revisions,\n                                       not args.non_strict_mode):\n     res = 'OK' if git_commit.success else 'FAILED'\n-    print('Checking %s: %s' % (git_commit.info.hexsha, res))\n+    print('Checking %s: %s' % (git_commit.original_info.hexsha, res))\n     if git_commit.success:\n         if args.print_changelog:\n             git_commit.print_output()"}, {"sha": "4d003ccf496a433108f2b345cc8bfb61fbeda0c5", "filename": "contrib/gcc-changelog/git_commit.py", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b05c4c2c5da55afb76c429453bd340fad692f195/contrib%2Fgcc-changelog%2Fgit_commit.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b05c4c2c5da55afb76c429453bd340fad692f195/contrib%2Fgcc-changelog%2Fgit_commit.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-changelog%2Fgit_commit.py?ref=b05c4c2c5da55afb76c429453bd340fad692f195", "patch": "@@ -159,6 +159,7 @@\n TAB_WIDTH = 8\n CO_AUTHORED_BY_PREFIX = 'co-authored-by: '\n CHERRY_PICK_PREFIX = '(cherry picked from commit '\n+REVERT_PREFIX = 'This reverts commit '\n \n REVIEW_PREFIXES = ('reviewed-by: ', 'reviewed-on: ', 'signed-off-by: ',\n                    'acked-by: ', 'tested-by: ', 'reported-by: ',\n@@ -256,6 +257,7 @@ def __init__(self, hexsha, date, author, lines, modified_files):\n \n class GitCommit:\n     def __init__(self, info, strict=True, commit_to_info_hook=None):\n+        self.original_info = info\n         self.info = info\n         self.message = None\n         self.changes = None\n@@ -265,8 +267,17 @@ def __init__(self, info, strict=True, commit_to_info_hook=None):\n         self.co_authors = []\n         self.top_level_prs = []\n         self.cherry_pick_commit = None\n+        self.revert_commit = None\n         self.commit_to_info_hook = commit_to_info_hook\n \n+        # Identify first if the commit is a Revert commit\n+        for line in self.info.lines:\n+            if line.startswith(REVERT_PREFIX):\n+                self.revert_commit = line[len(REVERT_PREFIX):].rstrip('.')\n+                break\n+        if self.revert_commit:\n+            self.info = self.commit_to_info_hook(self.revert_commit)\n+\n         project_files = [f for f in self.info.modified_files\n                          if self.is_changelog_filename(f[0])\n                          or f[0] in misc_files]\n@@ -625,6 +636,10 @@ def to_changelog_entries(self, use_commit_ts=False):\n                     timestamp = info.date.strftime(DATE_FORMAT)\n                 else:\n                     timestamp = current_timestamp\n+            elif self.revert_commit:\n+                timestamp = current_timestamp\n+                orig_date = self.original_info.date\n+                current_timestamp = orig_date.strftime(DATE_FORMAT)\n             elif not timestamp or use_commit_ts:\n                 timestamp = current_timestamp\n             authors = entry.authors if entry.authors else [self.info.author]\n@@ -633,10 +648,13 @@ def to_changelog_entries(self, use_commit_ts=False):\n                 if author not in authors:\n                     authors.append(author)\n \n-            if self.cherry_pick_commit:\n+            if self.cherry_pick_commit or self.revert_commit:\n                 output += self.format_authors_in_changelog([self.info.author],\n                                                            current_timestamp)\n-                output += '\\tBackported from master:\\n'\n+                if self.cherry_pick_commit:\n+                    output += '\\tBackported from master:\\n'\n+                else:\n+                    output += '\\tRevert:\\n'\n                 output += self.format_authors_in_changelog(authors,\n                                                            timestamp, '\\t')\n             else:"}]}