{"sha": "ad782bc910e236c900a322542621eab056551ddd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ3ODJiYzkxMGUyMzZjOTAwYTMyMjU0MjYyMWVhYjA1NjU1MWRkZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-05-03T19:18:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-05-03T19:18:40Z"}, "message": "mips.c (mips_isa_rev): New variable.\n\ngcc/\n\t* config/mips/mips.c (mips_isa_rev): New variable.\n\t(mips_set_architecture): Set it.\n\t* config/mips/mips.h (TARGET_CPU_CPP_BUILTINS): Set __mips_isa_rev\n\tfrom mips_isa_rev.\n\t(ISA_HAS_MUL3, ISA_HAS_FP_CONDMOVE, ISA_HAS_8CC, ISA_HAS_FP4)\n\t(ISA_HAS_PAIRED_SINGLE, ISA_HAS_MADD_MSUB, ISA_HAS_FP_RECIP_RSQRT)\n\t(ISA_HAS_CLZ_CLO, ISA_HAS_ROR, ISA_HAS_WSBH, ISA_HAS_PREFETCH)\n\t(ISA_HAS_SEB_SEH, ISA_HAS_EXT_INS, ISA_HAS_MXHC1)\n\t(ISA_HAS_HILO_INTERLOCKS, ISA_HAS_SYNCI, MIN_FPRS_PER_FMT): Reexpress\n\tconditions in terms of mips_isa_rev.\n\t(mips_isa_rev): Declare.\n\nFrom-SVN: r210038", "tree": {"sha": "04c824512d1d5bedb66923ca1097a5abe524db2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04c824512d1d5bedb66923ca1097a5abe524db2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad782bc910e236c900a322542621eab056551ddd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad782bc910e236c900a322542621eab056551ddd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad782bc910e236c900a322542621eab056551ddd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad782bc910e236c900a322542621eab056551ddd/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "45731f37b3b6b5d5b0621361826e1ea15691065a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45731f37b3b6b5d5b0621361826e1ea15691065a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45731f37b3b6b5d5b0621361826e1ea15691065a"}], "stats": {"total": 100, "additions": 43, "deletions": 57}, "files": [{"sha": "3fee375b2676ce9611f8681781c542a5524d0879", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad782bc910e236c900a322542621eab056551ddd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad782bc910e236c900a322542621eab056551ddd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ad782bc910e236c900a322542621eab056551ddd", "patch": "@@ -1,3 +1,17 @@\n+2014-05-03  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/mips.c (mips_isa_rev): New variable.\n+\t(mips_set_architecture): Set it.\n+\t* config/mips/mips.h (TARGET_CPU_CPP_BUILTINS): Set __mips_isa_rev\n+\tfrom mips_isa_rev.\n+\t(ISA_HAS_MUL3, ISA_HAS_FP_CONDMOVE, ISA_HAS_8CC, ISA_HAS_FP4)\n+\t(ISA_HAS_PAIRED_SINGLE, ISA_HAS_MADD_MSUB, ISA_HAS_FP_RECIP_RSQRT)\n+\t(ISA_HAS_CLZ_CLO, ISA_HAS_ROR, ISA_HAS_WSBH, ISA_HAS_PREFETCH)\n+\t(ISA_HAS_SEB_SEH, ISA_HAS_EXT_INS, ISA_HAS_MXHC1)\n+\t(ISA_HAS_HILO_INTERLOCKS, ISA_HAS_SYNCI, MIN_FPRS_PER_FMT): Reexpress\n+\tconditions in terms of mips_isa_rev.\n+\t(mips_isa_rev): Declare.\n+\n 2014-05-03  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/sh-mem.cc: Use tabs instead of spaces."}, {"sha": "29d0ac16102cf1b278d7758410923f7e2e51e158", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad782bc910e236c900a322542621eab056551ddd/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad782bc910e236c900a322542621eab056551ddd/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=ad782bc910e236c900a322542621eab056551ddd", "patch": "@@ -585,6 +585,10 @@ const struct mips_cpu_info *mips_tune_info;\n /* The ISA level associated with mips_arch.  */\n int mips_isa;\n \n+/* The ISA revision level.  This is 0 for MIPS I to V and N for\n+   MIPS{32,64}rN.  */\n+int mips_isa_rev;\n+\n /* The architecture selected by -mipsN, or null if -mipsN wasn't used.  */\n static const struct mips_cpu_info *mips_isa_option_info;\n \n@@ -16900,6 +16904,10 @@ mips_set_architecture (const struct mips_cpu_info *info)\n       mips_arch_info = info;\n       mips_arch = info->cpu;\n       mips_isa = info->isa;\n+      if (mips_isa < 32)\n+\tmips_isa_rev = 0;\n+      else\n+\tmips_isa_rev = (mips_isa & 31) + 1;\n     }\n }\n "}, {"sha": "6200ffc4e2c86bd71183b68064094730d33af952", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 21, "deletions": 57, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad782bc910e236c900a322542621eab056551ddd/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad782bc910e236c900a322542621eab056551ddd/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=ad782bc910e236c900a322542621eab056551ddd", "patch": "@@ -441,27 +441,26 @@ struct mips_cpu_info {\n       else if (ISA_MIPS32)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  builtin_define (\"__mips=32\");\t\t\t\t\t\\\n-\t  builtin_define (\"__mips_isa_rev=1\");\t\t\t\t\\\n \t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS32\");\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       else if (ISA_MIPS32R2)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  builtin_define (\"__mips=32\");\t\t\t\t\t\\\n-\t  builtin_define (\"__mips_isa_rev=2\");\t\t\t\t\\\n \t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS32\");\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       else if (ISA_MIPS64)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  builtin_define (\"__mips=64\");\t\t\t\t\t\\\n-\t  builtin_define (\"__mips_isa_rev=1\");\t\t\t\t\\\n \t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS64\");\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       else if (ISA_MIPS64R2)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  builtin_define (\"__mips=64\");\t\t\t\t\t\\\n-\t  builtin_define (\"__mips_isa_rev=2\");\t\t\t\t\\\n \t  builtin_define (\"_MIPS_ISA=_MIPS_ISA_MIPS64\");\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n+      if (mips_isa_rev > 0)\t\t\t\t\t\t\\\n+\tbuiltin_define_with_int_value (\"__mips_isa_rev\",\t\t\\\n+\t\t\t\t       mips_isa_rev);\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       switch (mips_abi)\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n@@ -816,10 +815,7 @@ struct mips_cpu_info {\n \t\t\t\t  || TARGET_MIPS7000\t\t\t\\\n \t\t\t\t  || TARGET_MIPS9000\t\t\t\\\n \t\t\t\t  || TARGET_MAD\t\t\t\t\\\n-\t\t\t\t  || ISA_MIPS32\t\t\t\t\\\n-\t\t\t\t  || ISA_MIPS32R2\t\t\t\\\n-\t\t\t\t  || ISA_MIPS64\t\t\t\t\\\n-\t\t\t\t  || ISA_MIPS64R2)\t\t\t\\\n+\t\t\t\t  || mips_isa_rev >= 1)\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has a three-operand multiplication instruction.  */\n@@ -850,10 +846,7 @@ struct mips_cpu_info {\n /* ISA has the floating-point conditional move instructions introduced\n    in mips4.  */\n #define ISA_HAS_FP_CONDMOVE\t((ISA_MIPS4\t\t\t\t\\\n-\t\t\t\t  || ISA_MIPS32\t\t\t\t\\\n-\t\t\t\t  || ISA_MIPS32R2\t\t\t\\\n-\t\t\t\t  || ISA_MIPS64\t\t\t\t\\\n-\t\t\t\t  || ISA_MIPS64R2)\t\t\t\\\n+\t\t\t\t  || mips_isa_rev >= 1)\t\t\t\\\n \t\t\t\t && !TARGET_MIPS5500\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n@@ -870,38 +863,30 @@ struct mips_cpu_info {\n \n /* ISA has the mips4 FP condition code instructions: FP-compare to CC,\n    branch on CC, and move (both FP and non-FP) on CC.  */\n-#define ISA_HAS_8CC\t\t(ISA_MIPS4\t\t\t\t\\\n-\t\t\t\t || ISA_MIPS32\t\t\t\t\\\n-\t\t\t\t || ISA_MIPS32R2\t\t\t\\\n-\t\t\t\t || ISA_MIPS64\t\t\t\t\\\n-\t\t\t\t || ISA_MIPS64R2)\n+#define ISA_HAS_8CC\t\t(ISA_MIPS4 || mips_isa_rev >= 1)\n \n /* This is a catch all for other mips4 instructions: indexed load, the\n    FP madd and msub instructions, and the FP recip and recip sqrt\n    instructions.  Note that this macro should only be used by other\n    ISA_HAS_* macros.  */\n #define ISA_HAS_FP4\t\t((ISA_MIPS4\t\t\t\t\\\n-\t\t\t\t  || ISA_MIPS32R2\t\t\t\\\n \t\t\t\t  || ISA_MIPS64\t\t\t\t\\\n-\t\t\t\t  || ISA_MIPS64R2)\t\t\t\\\n+\t\t\t\t  || mips_isa_rev >= 2)\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has floating-point indexed load and store instructions\n    (LWXC1, LDXC1, SWXC1 and SDXC1).  */\n #define ISA_HAS_LXC1_SXC1\tISA_HAS_FP4\n \n /* ISA has paired-single instructions.  */\n-#define ISA_HAS_PAIRED_SINGLE\t(ISA_MIPS32R2 || ISA_MIPS64 || ISA_MIPS64R2)\n+#define ISA_HAS_PAIRED_SINGLE\t(ISA_MIPS64 || mips_isa_rev >= 2)\n \n /* ISA has conditional trap instructions.  */\n #define ISA_HAS_COND_TRAP\t(!ISA_MIPS1\t\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has integer multiply-accumulate instructions, madd and msub.  */\n-#define ISA_HAS_MADD_MSUB\t(ISA_MIPS32\t\t\t\t\\\n-\t\t\t\t || ISA_MIPS32R2\t\t\t\\\n-\t\t\t\t || ISA_MIPS64\t\t\t\t\\\n-\t\t\t\t || ISA_MIPS64R2)\n+#define ISA_HAS_MADD_MSUB\t(mips_isa_rev >= 1)\n \n /* Integer multiply-accumulate instructions should be generated.  */\n #define GENERATE_MADD_MSUB\t(TARGET_IMADD && !TARGET_MIPS16)\n@@ -928,19 +913,14 @@ struct mips_cpu_info {\n \t\t\t\t(((ISA_HAS_FP4\t\t\t\t\\\n \t\t\t\t   && ((MODE) == SFmode\t\t\t\\\n \t\t\t\t       || ((TARGET_FLOAT64\t\t\\\n-\t\t\t\t\t    || ISA_MIPS32R2\t\t\\\n-\t\t\t\t\t    || ISA_MIPS64R2)\t\t\\\n+\t\t\t\t\t    || mips_isa_rev >= 2)\t\\\n \t\t\t\t\t   && (MODE) == DFmode)))\t\\\n \t\t\t\t  || (TARGET_SB1\t\t\t\\\n \t\t\t\t      && (MODE) == V2SFmode))\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has count leading zeroes/ones instruction (not implemented).  */\n-#define ISA_HAS_CLZ_CLO\t\t((ISA_MIPS32\t\t\t\t\\\n-\t\t\t\t  || ISA_MIPS32R2\t\t\t\\\n-\t\t\t\t  || ISA_MIPS64\t\t\t\t\\\n-\t\t\t\t  || ISA_MIPS64R2)\t\t\t\\\n-\t\t\t\t && !TARGET_MIPS16)\n+#define ISA_HAS_CLZ_CLO\t\t(mips_isa_rev >= 1 && !TARGET_MIPS16)\n \n /* ISA has three operand multiply instructions that put\n    the high part in an accumulator: mulhi or mulhiu.  */\n@@ -978,8 +958,7 @@ struct mips_cpu_info {\n \t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has the \"ror\" (rotate right) instructions.  */\n-#define ISA_HAS_ROR\t\t((ISA_MIPS32R2\t\t\t\t\\\n-\t\t\t\t  || ISA_MIPS64R2\t\t\t\\\n+#define ISA_HAS_ROR\t\t((mips_isa_rev >= 2\t\t\t\\\n \t\t\t\t  || TARGET_MIPS5400\t\t\t\\\n \t\t\t\t  || TARGET_MIPS5500\t\t\t\\\n \t\t\t\t  || TARGET_SR71K\t\t\t\\\n@@ -988,17 +967,13 @@ struct mips_cpu_info {\n \n /* ISA has the WSBH (word swap bytes within halfwords) instruction.\n    64-bit targets also provide DSBH and DSHD.  */\n-#define ISA_HAS_WSBH\t\t((ISA_MIPS32R2 || ISA_MIPS64R2)\t\t\\\n-\t\t\t\t && !TARGET_MIPS16)\n+#define ISA_HAS_WSBH\t\t(mips_isa_rev >= 2 && !TARGET_MIPS16)\n \n /* ISA has data prefetch instructions.  This controls use of 'pref'.  */\n #define ISA_HAS_PREFETCH\t((ISA_MIPS4\t\t\t\t\\\n \t\t\t\t  || TARGET_LOONGSON_2EF\t\t\\\n \t\t\t\t  || TARGET_MIPS5900\t\t\t\\\n-\t\t\t\t  || ISA_MIPS32\t\t\t\t\\\n-\t\t\t\t  || ISA_MIPS32R2\t\t\t\\\n-\t\t\t\t  || ISA_MIPS64\t\t\t\t\\\n-\t\t\t\t  || ISA_MIPS64R2)\t\t\t\\\n+\t\t\t\t  || mips_isa_rev >= 1)\t\t\t\\\n \t\t\t\t && !TARGET_MIPS16)\n \n /* ISA has data indexed prefetch instructions.  This controls use of\n@@ -1013,19 +988,13 @@ struct mips_cpu_info {\n #define ISA_HAS_TRUNC_W\t\t(!ISA_MIPS1)\n \n /* ISA includes the MIPS32r2 seb and seh instructions.  */\n-#define ISA_HAS_SEB_SEH\t\t((ISA_MIPS32R2\t\t\\\n-\t\t\t\t  || ISA_MIPS64R2)\t\\\n-\t\t\t\t && !TARGET_MIPS16)\n+#define ISA_HAS_SEB_SEH\t\t(mips_isa_rev >= 2 && !TARGET_MIPS16)\n \n /* ISA includes the MIPS32/64 rev 2 ext and ins instructions.  */\n-#define ISA_HAS_EXT_INS\t\t((ISA_MIPS32R2\t\t\\\n-\t\t\t\t  || ISA_MIPS64R2)\t\\\n-\t\t\t\t && !TARGET_MIPS16)\n+#define ISA_HAS_EXT_INS\t\t(mips_isa_rev >= 2 && !TARGET_MIPS16)\n \n /* ISA has instructions for accessing top part of 64-bit fp regs.  */\n-#define ISA_HAS_MXHC1\t\t(TARGET_FLOAT64\t\t\\\n-\t\t\t\t && (ISA_MIPS32R2\t\\\n-\t\t\t\t     || ISA_MIPS64R2))\n+#define ISA_HAS_MXHC1\t\t(TARGET_FLOAT64 && mips_isa_rev >= 2)\n \n /* ISA has lwxs instruction (load w/scaled index address.  */\n #define ISA_HAS_LWXS\t\t((TARGET_SMARTMIPS || TARGET_MICROMIPS) \\\n@@ -1078,18 +1047,13 @@ struct mips_cpu_info {\n    MIPS64 and later ISAs to have the interlocks, plus any specific\n    earlier-ISA CPUs for which CPU documentation declares that the\n    instructions are really interlocked.  */\n-#define ISA_HAS_HILO_INTERLOCKS\t(ISA_MIPS32\t\t\t\t\\\n-\t\t\t\t || ISA_MIPS32R2\t\t\t\\\n-\t\t\t\t || ISA_MIPS64\t\t\t\t\\\n-\t\t\t\t || ISA_MIPS64R2\t\t\t\\\n+#define ISA_HAS_HILO_INTERLOCKS\t(mips_isa_rev >= 1\t\t\t\\\n \t\t\t\t || TARGET_MIPS5500\t\t\t\\\n \t\t\t\t || TARGET_MIPS5900\t\t\t\\\n \t\t\t\t || TARGET_LOONGSON_2EF)\n \n /* ISA includes synci, jr.hb and jalr.hb.  */\n-#define ISA_HAS_SYNCI ((ISA_MIPS32R2\t\t\\\n-\t\t\t|| ISA_MIPS64R2)\t\\\n-\t\t       && !TARGET_MIPS16)\n+#define ISA_HAS_SYNCI (mips_isa_rev >= 2 && !TARGET_MIPS16)\n \n /* ISA includes sync.  */\n #define ISA_HAS_SYNC ((mips_isa >= 2 || TARGET_MIPS3900) && !TARGET_MIPS16)\n@@ -1349,8 +1313,7 @@ struct mips_cpu_info {\n /* The number of consecutive floating-point registers needed to store the\n    smallest format supported by the FPU.  */\n #define MIN_FPRS_PER_FMT \\\n-  (ISA_MIPS32 || ISA_MIPS32R2 || ISA_MIPS64 || ISA_MIPS64R2 \\\n-   ? 1 : MAX_FPRS_PER_FMT)\n+  (mips_isa_rev >= 1 ? 1 : MAX_FPRS_PER_FMT)\n \n /* The largest size of value that can be held in floating-point\n    registers and moved with a single instruction.  */\n@@ -2958,6 +2921,7 @@ extern const char *mips_hi_relocs[];\n extern enum processor mips_arch;        /* which cpu to codegen for */\n extern enum processor mips_tune;        /* which cpu to schedule for */\n extern int mips_isa;\t\t\t/* architectural level */\n+extern int mips_isa_rev;\n extern const struct mips_cpu_info *mips_arch_info;\n extern const struct mips_cpu_info *mips_tune_info;\n extern unsigned int mips_base_compression_flags;"}]}