{"sha": "925a448751fd6d7988db51070b585e4fd55766a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI1YTQ0ODc1MWZkNmQ3OTg4ZGI1MTA3MGI1ODVlNGZkNTU3NjZhMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2005-05-19T07:05:45Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2005-05-19T07:05:45Z"}, "message": "re PR target/19933 (Problem with define of HUGE_VAL in math_c99.)\n\nfixincludes/\n\tPR target/19933\n\tPR target/21315\n\t* inclhack.def: New fixes solaris_math_[1-9].\n\t* fixincl.x: Regenerate.\n\t* tests/base/iso/math_c99.h: New.\n\ngcc/testsuite/\n\t* gcc.dg/c99-math.h: New\n\t* gcc.dg/c99-math-float-1.c: New test.\n\t* gcc.dg/c99-math-double-1.c: Likewise.\n\t* gcc.dg/c99-math-long-double-1.c: Likewise.\n\nCo-Authored-By: Joseph Myers <joseph@codesourcery.com>\n\nFrom-SVN: r99953", "tree": {"sha": "b868266a6c9589956b7ebb466b05e348d7f83b8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b868266a6c9589956b7ebb466b05e348d7f83b8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/925a448751fd6d7988db51070b585e4fd55766a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/925a448751fd6d7988db51070b585e4fd55766a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/925a448751fd6d7988db51070b585e4fd55766a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/925a448751fd6d7988db51070b585e4fd55766a2/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a774cac8861957f4adfe4084e8ab4ee863f15d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a774cac8861957f4adfe4084e8ab4ee863f15d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a774cac8861957f4adfe4084e8ab4ee863f15d4"}], "stats": {"total": 940, "additions": 935, "deletions": 5}, "files": [{"sha": "de13766fa73d89abd575f5fc1b9376d89cd23f12", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925a448751fd6d7988db51070b585e4fd55766a2/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925a448751fd6d7988db51070b585e4fd55766a2/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=925a448751fd6d7988db51070b585e4fd55766a2", "patch": "@@ -1,3 +1,12 @@\n+2005-05-19  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+            Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR target/19933\n+\tPR target/21315\n+\t* inclhack.def: New fixes solaris_math_[1-9].\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/iso/math_c99.h: New.\n+\n 2005-05-19  Kelley Cook  <kcook@gcc.gnu.org>\n \n \t* aclocal.m4: Remove superfluous reference to accross.m4."}, {"sha": "9b39019fe6fa2335224107ef7bbe71563b476648", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 472, "deletions": 5, "changes": 477, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925a448751fd6d7988db51070b585e4fd55766a2/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925a448751fd6d7988db51070b585e4fd55766a2/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=925a448751fd6d7988db51070b585e4fd55766a2", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Saturday May  7, 2005 at 07:01:32 PM UTC\n+ * It has been AutoGen-ed  Thursday May 19, 2005 at 08:56:10 AM CEST\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT CVS-MERGE THIS FILE, EITHER Sat May  7 19:01:33 UTC 2005\n+/* DO NOT CVS-MERGE THIS FILE, EITHER Thu May 19 08:56:10 CEST 2005\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 179 fixup descriptions.\n+ * This file contains 188 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -4605,6 +4605,419 @@ static const char* apzSco_UtimePatch[] = {\n     \"(const char *, const struct utimbuf *);\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Math_1 fix\n+ */\n+tSCC zSolaris_Math_1Name[] =\n+     \"solaris_math_1\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Math_1List[] =\n+  \"|iso/math_c99.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzSolaris_Math_1Machs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Math_1Select0[] =\n+       \"@\\\\(#\\\\)math_c99.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zSolaris_Math_1Bypass0[] =\n+       \"__GNUC__\";\n+\n+#define    SOLARIS_MATH_1_TEST_CT  2\n+static tTestDesc aSolaris_Math_1Tests[] = {\n+  { TT_NEGREP,   zSolaris_Math_1Bypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zSolaris_Math_1Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Math_1\n+ */\n+static const char* apzSolaris_Math_1Patch[] = {\n+    \"format\",\n+    \"#define\\tHUGE_VA%1\\t(__builtin_huge_va%2())\",\n+    \"^#define[ \\t]+HUGE_VA([LF]+)[ \\t]+__builtin_huge_va([lf]+)\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Math_2 fix\n+ */\n+tSCC zSolaris_Math_2Name[] =\n+     \"solaris_math_2\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Math_2List[] =\n+  \"|iso/math_c99.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzSolaris_Math_2Machs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Math_2Select0[] =\n+       \"@\\\\(#\\\\)math_c99.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zSolaris_Math_2Bypass0[] =\n+       \"__GNUC__\";\n+\n+#define    SOLARIS_MATH_2_TEST_CT  2\n+static tTestDesc aSolaris_Math_2Tests[] = {\n+  { TT_NEGREP,   zSolaris_Math_2Bypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zSolaris_Math_2Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Math_2\n+ */\n+static const char* apzSolaris_Math_2Patch[] = {\n+    \"format\",\n+    \"#define\\tINFINITY\\t(__builtin_inff())\",\n+    \"^#define[ \\t]+INFINITY[ \\t]+__builtin_infinity\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Math_3 fix\n+ */\n+tSCC zSolaris_Math_3Name[] =\n+     \"solaris_math_3\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Math_3List[] =\n+  \"|iso/math_c99.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzSolaris_Math_3Machs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Math_3Select0[] =\n+       \"@\\\\(#\\\\)math_c99.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zSolaris_Math_3Bypass0[] =\n+       \"__GNUC__\";\n+\n+#define    SOLARIS_MATH_3_TEST_CT  2\n+static tTestDesc aSolaris_Math_3Tests[] = {\n+  { TT_NEGREP,   zSolaris_Math_3Bypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zSolaris_Math_3Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Math_3\n+ */\n+static const char* apzSolaris_Math_3Patch[] = {\n+    \"format\",\n+    \"#define\\tNAN\\t\\t(__builtin_nanf(\\\"\\\"))\",\n+    \"^#define[ \\t]+NAN[ \\t]+__builtin_nan\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Math_4 fix\n+ */\n+tSCC zSolaris_Math_4Name[] =\n+     \"solaris_math_4\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Math_4List[] =\n+  \"|iso/math_c99.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzSolaris_Math_4Machs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Math_4Select0[] =\n+       \"@\\\\(#\\\\)math_c99.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zSolaris_Math_4Bypass0[] =\n+       \"__GNUC__\";\n+\n+#define    SOLARIS_MATH_4_TEST_CT  2\n+static tTestDesc aSolaris_Math_4Tests[] = {\n+  { TT_NEGREP,   zSolaris_Math_4Bypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zSolaris_Math_4Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Math_4\n+ */\n+static const char* apzSolaris_Math_4Patch[] = {\n+    \"format\",\n+    \"#define\\tfpclassify(x) \\\\\\n\\\n+  __extension__ ({ __typeof(x) __x_fp = (x); \\\\\\n\\\n+\\t\\t   isnan(__x_fp) \\\\\\n\\\n+\\t\\t     ? FP_NAN \\\\\\n\\\n+\\t\\t     : isinf(__x_fp) \\\\\\n\\\n+\\t\\t       ? FP_INFINITE \\\\\\n\\\n+\\t\\t       : isnormal(__x_fp) \\\\\\n\\\n+\\t\\t\\t ? FP_NORMAL \\\\\\n\\\n+\\t\\t\\t : __x_fp == 0.0 \\\\\\n\\\n+\\t\\t\\t   ? FP_ZERO \\\\\\n\\\n+\\t\\t\\t   : FP_SUBNORMAL; })\",\n+    \"^#define[ \\t]+fpclassify\\\\(x\\\\)[ \\t]+__builtin_fpclassify\\\\(x\\\\)\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Math_5 fix\n+ */\n+tSCC zSolaris_Math_5Name[] =\n+     \"solaris_math_5\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Math_5List[] =\n+  \"|iso/math_c99.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzSolaris_Math_5Machs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Math_5Select0[] =\n+       \"@\\\\(#\\\\)math_c99.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zSolaris_Math_5Bypass0[] =\n+       \"__GNUC__\";\n+\n+#define    SOLARIS_MATH_5_TEST_CT  2\n+static tTestDesc aSolaris_Math_5Tests[] = {\n+  { TT_NEGREP,   zSolaris_Math_5Bypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zSolaris_Math_5Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Math_5\n+ */\n+static const char* apzSolaris_Math_5Patch[] = {\n+    \"format\",\n+    \"#define\\tisfinite(x) \\\\\\n\\\n+  __extension__ ({ __typeof (x) __x_f = (x); \\\\\\n\\\n+\\t\\t   __builtin_expect(!isnan(__x_f - __x_f), 1); })\",\n+    \"^#define[ \\t]+isfinite\\\\(x\\\\)[ \\t]+__builtin_isfinite\\\\(x\\\\)\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Math_6 fix\n+ */\n+tSCC zSolaris_Math_6Name[] =\n+     \"solaris_math_6\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Math_6List[] =\n+  \"|iso/math_c99.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzSolaris_Math_6Machs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Math_6Select0[] =\n+       \"@\\\\(#\\\\)math_c99.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zSolaris_Math_6Bypass0[] =\n+       \"__GNUC__\";\n+\n+#define    SOLARIS_MATH_6_TEST_CT  2\n+static tTestDesc aSolaris_Math_6Tests[] = {\n+  { TT_NEGREP,   zSolaris_Math_6Bypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zSolaris_Math_6Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Math_6\n+ */\n+static const char* apzSolaris_Math_6Patch[] = {\n+    \"format\",\n+    \"#define\\tisinf(x) \\\\\\n\\\n+  __extension__ ({ __typeof (x) __x_i = (x); \\\\\\n\\\n+\\t\\t   __builtin_expect(!isnan(__x_i) && !isfinite(__x_i), 0); })\",\n+    \"^#define[ \\t]+isinf\\\\(x\\\\)[ \\t]+__builtin_isinf\\\\(x\\\\)\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Math_7 fix\n+ */\n+tSCC zSolaris_Math_7Name[] =\n+     \"solaris_math_7\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Math_7List[] =\n+  \"|iso/math_c99.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzSolaris_Math_7Machs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Math_7Select0[] =\n+       \"@\\\\(#\\\\)math_c99.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zSolaris_Math_7Bypass0[] =\n+       \"__GNUC__\";\n+\n+#define    SOLARIS_MATH_7_TEST_CT  2\n+static tTestDesc aSolaris_Math_7Tests[] = {\n+  { TT_NEGREP,   zSolaris_Math_7Bypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zSolaris_Math_7Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Math_7\n+ */\n+static const char* apzSolaris_Math_7Patch[] = {\n+    \"format\",\n+    \"#define\\tisnormal(x) \\\\\\n\\\n+  __extension__ ({ __typeof(x) __x_n = (x); \\\\\\n\\\n+\\t\\t   if (__x_n < 0.0) __x_n = -__x_n; \\\\\\n\\\n+\\t\\t   __builtin_expect(isfinite(__x_n) \\\\\\n\\\n+\\t\\t\\t\\t    && (sizeof(__x_n) == sizeof(float) \\\\\\n\\\n+\\t\\t\\t\\t\\t  ? __x_n >= __FLT_MIN__ \\\\\\n\\\n+\\t\\t\\t\\t\\t  : sizeof(__x_n) == sizeof(long double) \\\\\\n\\\n+\\t\\t\\t\\t\\t    ? __x_n >= __LDBL_MIN__ \\\\\\n\\\n+\\t\\t\\t\\t\\t    : __x_n >= __DBL_MIN__), 1); })\",\n+    \"^#define[ \\t]+isnormal\\\\(x\\\\)[ \\t]+__builtin_isnormal\\\\(x\\\\)\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Math_8 fix\n+ */\n+tSCC zSolaris_Math_8Name[] =\n+     \"solaris_math_8\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Math_8List[] =\n+  \"|iso/math_c99.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzSolaris_Math_8Machs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Math_8Select0[] =\n+       \"@\\\\(#\\\\)math_c99.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zSolaris_Math_8Bypass0[] =\n+       \"__GNUC__\";\n+\n+#define    SOLARIS_MATH_8_TEST_CT  2\n+static tTestDesc aSolaris_Math_8Tests[] = {\n+  { TT_NEGREP,   zSolaris_Math_8Bypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zSolaris_Math_8Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Math_8\n+ */\n+static const char* apzSolaris_Math_8Patch[] = {\n+    \"format\",\n+    \"#define\\tsignbit(x)\\t(sizeof(x) == sizeof(float) \\\\\\n\\\n+\\t\\t\\t   ? __builtin_signbitf(x) \\\\\\n\\\n+\\t\\t\\t   : sizeof(x) == sizeof(long double) \\\\\\n\\\n+\\t\\t\\t     ? __builtin_signbitl(x) \\\\\\n\\\n+\\t\\t\\t     : __builtin_signbit(x))\",\n+    \"^#define[ \\t]+signbit\\\\(x\\\\)[ \\t]+__builtin_signbit\\\\(x\\\\)\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Math_9 fix\n+ */\n+tSCC zSolaris_Math_9Name[] =\n+     \"solaris_math_9\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Math_9List[] =\n+  \"|iso/math_c99.h|\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzSolaris_Math_9Machs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Math_9Select0[] =\n+       \"@\\\\(#\\\\)math_c99.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+\n+/*\n+ *  content bypass pattern - skip fix if pattern found\n+ */\n+tSCC zSolaris_Math_9Bypass0[] =\n+       \"__GNUC__\";\n+\n+#define    SOLARIS_MATH_9_TEST_CT  2\n+static tTestDesc aSolaris_Math_9Tests[] = {\n+  { TT_NEGREP,   zSolaris_Math_9Bypass0, (regex_t*)NULL },\n+  { TT_EGREP,    zSolaris_Math_9Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Math_9\n+ */\n+static const char* apzSolaris_Math_9Patch[] = {\n+    \"format\",\n+    \"#define\\t%1(x, y)%2__builtin_%1(x, y)\",\n+    \"^#define[ \\t]+([a-z]+)\\\\(x, y\\\\)([ \\t]+)\\\\(\\\\(x\\\\) __builtin_[a-z]+\\\\(y\\\\)\\\\)\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Solaris_Mutex_Init_1 fix\n@@ -7161,9 +7574,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          209\n+#define REGEX_COUNT          227\n #define MACH_LIST_SIZE_LIMIT 261\n-#define FIX_COUNT            179\n+#define FIX_COUNT            188\n \n /*\n  *  Enumerate the fixes\n@@ -7283,6 +7696,15 @@ typedef enum {\n     SCO_REGSET_FIXIDX,\n     SCO_STATIC_FUNC_FIXIDX,\n     SCO_UTIME_FIXIDX,\n+    SOLARIS_MATH_1_FIXIDX,\n+    SOLARIS_MATH_2_FIXIDX,\n+    SOLARIS_MATH_3_FIXIDX,\n+    SOLARIS_MATH_4_FIXIDX,\n+    SOLARIS_MATH_5_FIXIDX,\n+    SOLARIS_MATH_6_FIXIDX,\n+    SOLARIS_MATH_7_FIXIDX,\n+    SOLARIS_MATH_8_FIXIDX,\n+    SOLARIS_MATH_9_FIXIDX,\n     SOLARIS_MUTEX_INIT_1_FIXIDX,\n     SOLARIS_MUTEX_INIT_2_FIXIDX,\n     SOLARIS_SOCKET_FIXIDX,\n@@ -7921,6 +8343,51 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SCO_UTIME_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aSco_UtimeTests,   apzSco_UtimePatch, 0 },\n \n+  {  zSolaris_Math_1Name,    zSolaris_Math_1List,\n+     apzSolaris_Math_1Machs,\n+     SOLARIS_MATH_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Math_1Tests,   apzSolaris_Math_1Patch, 0 },\n+\n+  {  zSolaris_Math_2Name,    zSolaris_Math_2List,\n+     apzSolaris_Math_2Machs,\n+     SOLARIS_MATH_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Math_2Tests,   apzSolaris_Math_2Patch, 0 },\n+\n+  {  zSolaris_Math_3Name,    zSolaris_Math_3List,\n+     apzSolaris_Math_3Machs,\n+     SOLARIS_MATH_3_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Math_3Tests,   apzSolaris_Math_3Patch, 0 },\n+\n+  {  zSolaris_Math_4Name,    zSolaris_Math_4List,\n+     apzSolaris_Math_4Machs,\n+     SOLARIS_MATH_4_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Math_4Tests,   apzSolaris_Math_4Patch, 0 },\n+\n+  {  zSolaris_Math_5Name,    zSolaris_Math_5List,\n+     apzSolaris_Math_5Machs,\n+     SOLARIS_MATH_5_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Math_5Tests,   apzSolaris_Math_5Patch, 0 },\n+\n+  {  zSolaris_Math_6Name,    zSolaris_Math_6List,\n+     apzSolaris_Math_6Machs,\n+     SOLARIS_MATH_6_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Math_6Tests,   apzSolaris_Math_6Patch, 0 },\n+\n+  {  zSolaris_Math_7Name,    zSolaris_Math_7List,\n+     apzSolaris_Math_7Machs,\n+     SOLARIS_MATH_7_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Math_7Tests,   apzSolaris_Math_7Patch, 0 },\n+\n+  {  zSolaris_Math_8Name,    zSolaris_Math_8List,\n+     apzSolaris_Math_8Machs,\n+     SOLARIS_MATH_8_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Math_8Tests,   apzSolaris_Math_8Patch, 0 },\n+\n+  {  zSolaris_Math_9Name,    zSolaris_Math_9List,\n+     apzSolaris_Math_9Machs,\n+     SOLARIS_MATH_9_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Math_9Tests,   apzSolaris_Math_9Patch, 0 },\n+\n   {  zSolaris_Mutex_Init_1Name,    zSolaris_Mutex_Init_1List,\n      apzSolaris_Mutex_Init_1Machs,\n      SOLARIS_MUTEX_INIT_1_TEST_CT, FD_MACH_ONLY,"}, {"sha": "447997b14fb749fc0f85fa87e36d72cdc66565c3", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925a448751fd6d7988db51070b585e4fd55766a2/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925a448751fd6d7988db51070b585e4fd55766a2/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=925a448751fd6d7988db51070b585e4fd55766a2", "patch": "@@ -2564,6 +2564,176 @@ fix = {\n     test_text = \"extern int utime(const char *, struct utimbuf *);\";\n };\n \n+/*\n+ * Sun Solaris 10 defines several C99 math macros in terms of\n+ * builtins specific to the Studio compiler, in particular not\n+ * compatible with the GNU compiler.\n+ */\n+fix = {\n+    hackname = solaris_math_1;\n+    select = '@\\(#\\)math_c99.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+    bypass = \"__GNUC__\";\n+    files = iso/math_c99.h;\n+    c_fix = format;\n+    c_fix_arg = \"#define\\tHUGE_VA%1\\t(__builtin_huge_va%2())\";\n+    c_fix_arg = \"^#define[ \\t]+HUGE_VA([LF]+)[ \\t]+__builtin_huge_va([lf]+)\";\n+    test_text =\n+    '#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"'\"\\n\"\n+    \"#undef\tHUGE_VAL\\n\"\n+    \"#define\tHUGE_VAL\t__builtin_huge_val\\n\"\n+    \"#undef\tHUGE_VALF\\n\"\n+    \"#define\tHUGE_VALF\t__builtin_huge_valf\\n\"\n+    \"#undef\tHUGE_VALL\\n\"\n+    \"#define\tHUGE_VALL\t__builtin_huge_vall\";\n+};\n+\n+fix = {\n+    hackname = solaris_math_2;\n+    select = '@\\(#\\)math_c99.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+    bypass = \"__GNUC__\";\n+    files = iso/math_c99.h;\n+    c_fix = format;\n+    c_fix_arg = \"#define\\tINFINITY\\t(__builtin_inff())\";\n+    c_fix_arg = \"^#define[ \\t]+INFINITY[ \\t]+__builtin_infinity\";\n+    test_text =\n+    '#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"'\"\\n\"\n+    \"#undef\tINFINITY\\n\"\n+    \"#define\tINFINITY\t__builtin_infinity\";\n+};\n+\n+fix = {\n+    hackname = solaris_math_3;\n+    select = '@\\(#\\)math_c99.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+    bypass = \"__GNUC__\";\n+    files = iso/math_c99.h;\n+    c_fix = format;\n+    c_fix_arg = \"#define\\tNAN\\t\\t(__builtin_nanf(\\\"\\\"))\";\n+    c_fix_arg = \"^#define[ \\t]+NAN[ \\t]+__builtin_nan\";\n+    test_text =\n+    '#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"'\"\\n\"\n+    \"#undef\tNAN\\n\"\n+    \"#define\tNAN\t__builtin_nan\";\n+};\n+\n+fix = {\n+    hackname = solaris_math_4;\n+    select = '@\\(#\\)math_c99.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+    bypass = \"__GNUC__\";\n+    files = iso/math_c99.h;\n+    c_fix = format;\n+    c_fix_arg = \"#define\\tfpclassify(x) \\\\\\n\"\n+                \"  __extension__ ({ __typeof(x) __x_fp = (x); \\\\\\n\"\n+                \"\\t\\t   isnan(__x_fp) \\\\\\n\"\n+                \"\\t\\t     ? FP_NAN \\\\\\n\"\n+                \"\\t\\t     : isinf(__x_fp) \\\\\\n\"\n+                \"\\t\\t       ? FP_INFINITE \\\\\\n\"\n+                \"\\t\\t       : isnormal(__x_fp) \\\\\\n\"\n+                \"\\t\\t\\t ? FP_NORMAL \\\\\\n\"\n+                \"\\t\\t\\t : __x_fp == 0.0 \\\\\\n\"\n+                \"\\t\\t\\t   ? FP_ZERO \\\\\\n\"\n+                \"\\t\\t\\t   : FP_SUBNORMAL; })\";\n+    c_fix_arg = \"^#define[ \\t]+fpclassify\\\\(x\\\\)[ \\t]+__builtin_fpclassify\\\\(x\\\\)\";\n+    test_text =\n+    '#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"'\"\\n\"\n+    \"#undef\tfpclassify\\n\"\n+    \"#define\tfpclassify(x)\t__builtin_fpclassify(x)\";\n+};\n+\n+fix = {\n+    hackname = solaris_math_5;\n+    select = '@\\(#\\)math_c99.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+    bypass = \"__GNUC__\";\n+    files = iso/math_c99.h;\n+    c_fix = format;\n+    c_fix_arg = \"#define\\tisfinite(x) \\\\\\n\"\n+                \"  __extension__ ({ __typeof (x) __x_f = (x); \\\\\\n\"\n+                \"\\t\\t   __builtin_expect(!isnan(__x_f - __x_f), 1); })\";\n+    c_fix_arg = \"^#define[ \\t]+isfinite\\\\(x\\\\)[ \\t]+__builtin_isfinite\\\\(x\\\\)\";\n+    test_text =\n+    '#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"'\"\\n\"\n+    \"#undef\tisfinite\\n\"\n+    \"#define\tisfinite(x)\t__builtin_isfinite(x)\";\n+};\n+\n+fix = {\n+    hackname = solaris_math_6;\n+    select = '@\\(#\\)math_c99.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+    bypass = \"__GNUC__\";\n+    files = iso/math_c99.h;\n+    c_fix = format;\n+    c_fix_arg = \"#define\\tisinf(x) \\\\\\n\"\n+                \"  __extension__ ({ __typeof (x) __x_i = (x); \\\\\\n\"\n+                \"\\t\\t   __builtin_expect(!isnan(__x_i) && !isfinite(__x_i), 0); })\";\n+    c_fix_arg = \"^#define[ \\t]+isinf\\\\(x\\\\)[ \\t]+__builtin_isinf\\\\(x\\\\)\";\n+    test_text =\n+    '#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"'\"\\n\"\n+    \"#undef\tisinf\\n\"\n+    \"#define\tisinf(x)\t__builtin_isinf(x)\";\n+};\n+\n+fix = {\n+    hackname = solaris_math_7;\n+    select = '@\\(#\\)math_c99.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+    bypass = \"__GNUC__\";\n+    files = iso/math_c99.h;\n+    c_fix = format;\n+    c_fix_arg = \"#define\\tisnormal(x) \\\\\\n\"\n+                \"  __extension__ ({ __typeof(x) __x_n = (x); \\\\\\n\"\n+                \"\\t\\t   if (__x_n < 0.0) __x_n = -__x_n; \\\\\\n\"\n+                \"\\t\\t   __builtin_expect(isfinite(__x_n) \\\\\\n\"\n+                \"\\t\\t\\t\\t    && (sizeof(__x_n) == sizeof(float) \\\\\\n\"\n+                \"\\t\\t\\t\\t\\t  ? __x_n >= __FLT_MIN__ \\\\\\n\"\n+                \"\\t\\t\\t\\t\\t  : sizeof(__x_n) == sizeof(long double) \\\\\\n\"\n+                \"\\t\\t\\t\\t\\t    ? __x_n >= __LDBL_MIN__ \\\\\\n\"\n+                \"\\t\\t\\t\\t\\t    : __x_n >= __DBL_MIN__), 1); })\";\n+    c_fix_arg = \"^#define[ \\t]+isnormal\\\\(x\\\\)[ \\t]+__builtin_isnormal\\\\(x\\\\)\";\n+    test_text =\n+    '#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"'\"\\n\"\n+    \"#undef\tisnormal\\n\"\n+    \"#define\tisnormal(x)\t__builtin_isnormal(x)\";\n+};\n+\n+fix = {\n+    hackname = solaris_math_8;\n+    select = '@\\(#\\)math_c99.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+    bypass = \"__GNUC__\";\n+    files = iso/math_c99.h;\n+    c_fix = format;\n+    c_fix_arg = \"#define\\tsignbit(x)\\t(sizeof(x) == sizeof(float) \\\\\\n\"\n+                \"\\t\\t\\t   ? __builtin_signbitf(x) \\\\\\n\"\n+                \"\\t\\t\\t   : sizeof(x) == sizeof(long double) \\\\\\n\"\n+                \"\\t\\t\\t     ? __builtin_signbitl(x) \\\\\\n\"\n+                \"\\t\\t\\t     : __builtin_signbit(x))\";\n+    c_fix_arg = \"^#define[ \\t]+signbit\\\\(x\\\\)[ \\t]+__builtin_signbit\\\\(x\\\\)\";\n+    test_text =\n+    '#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"'\"\\n\"\n+    \"#undef\tsignbit\\n\"\n+    \"#define\tsignbit(x)\t__builtin_signbit(x)\";\n+};\n+\n+fix = {\n+    hackname = solaris_math_9;\n+    select = '@\\(#\\)math_c99.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+    bypass = \"__GNUC__\";\n+    files = iso/math_c99.h;\n+    c_fix = format;\n+    c_fix_arg = \"#define\\t%1(x, y)%2__builtin_%1(x, y)\";\n+    c_fix_arg = \"^#define[ \\t]+([a-z]+)\\\\(x, y\\\\)([ \\t]+)\\\\(\\\\(x\\\\) __builtin_[a-z]+\\\\(y\\\\)\\\\)\";\n+    test_text =\n+    '#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"'\"\\n\"\n+    \"#undef\tisgreater\\n\"\n+    \"#define\tisgreater(x, y)\t\t((x) __builtin_isgreater(y))\\n\"\n+    \"#undef\tisgreaterequal\\n\"\n+    \"#define\tisgreaterequal(x, y)\t((x) __builtin_isgreaterequal(y))\\n\"\n+    \"#undef\tisless\\n\"\n+    \"#define\tisless(x, y)\t\t((x) __builtin_isless(y))\\n\"\n+    \"#undef\tislessequal\\n\"\n+    \"#define\tislessequal(x, y)\t((x) __builtin_islessequal(y))\\n\"\n+    \"#undef\tislessgreater\\n\"\n+    \"#define\tislessgreater(x, y)\t((x) __builtin_islessgreater(y))\\n\"\n+    \"#undef\tisunordered\\n\"\n+    \"#define\tisunordered(x, y)\t((x) __builtin_isunordered(y))\";\n+};\n \n /*\n  *  Sun Solaris 2.5.1, 2.6 defines PTHREAD_{MUTEX|COND}_INITIALIZER"}, {"sha": "86b6c20504f75c85b7eda66c2d9cc4ba2028ddc9", "filename": "fixincludes/tests/base/iso/math_c99.h", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925a448751fd6d7988db51070b585e4fd55766a2/fixincludes%2Ftests%2Fbase%2Fiso%2Fmath_c99.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925a448751fd6d7988db51070b585e4fd55766a2/fixincludes%2Ftests%2Fbase%2Fiso%2Fmath_c99.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fiso%2Fmath_c99.h?ref=925a448751fd6d7988db51070b585e4fd55766a2", "patch": "@@ -0,0 +1,112 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/iso/math_c99.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( SOLARIS_MATH_1_CHECK )\n+#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"\n+#undef\tHUGE_VAL\n+#define\tHUGE_VAL\t(__builtin_huge_val())\n+#undef\tHUGE_VALF\n+#define\tHUGE_VALF\t(__builtin_huge_valf())\n+#undef\tHUGE_VALL\n+#define\tHUGE_VALL\t(__builtin_huge_vall())\n+#endif  /* SOLARIS_MATH_1_CHECK */\n+\n+\n+#if defined( SOLARIS_MATH_2_CHECK )\n+#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"\n+#undef\tINFINITY\n+#define\tINFINITY\t(__builtin_inff())\n+#endif  /* SOLARIS_MATH_2_CHECK */\n+\n+\n+#if defined( SOLARIS_MATH_3_CHECK )\n+#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"\n+#undef\tNAN\n+#define\tNAN\t\t(__builtin_nanf(\"\"))\n+#endif  /* SOLARIS_MATH_3_CHECK */\n+\n+\n+#if defined( SOLARIS_MATH_4_CHECK )\n+#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"\n+#undef\tfpclassify\n+#define\tfpclassify(x) \\\n+  __extension__ ({ __typeof(x) __x_fp = (x); \\\n+\t\t   isnan(__x_fp) \\\n+\t\t     ? FP_NAN \\\n+\t\t     : isinf(__x_fp) \\\n+\t\t       ? FP_INFINITE \\\n+\t\t       : isnormal(__x_fp) \\\n+\t\t\t ? FP_NORMAL \\\n+\t\t\t : __x_fp == 0.0 \\\n+\t\t\t   ? FP_ZERO \\\n+\t\t\t   : FP_SUBNORMAL; })\n+#endif  /* SOLARIS_MATH_4_CHECK */\n+\n+\n+#if defined( SOLARIS_MATH_5_CHECK )\n+#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"\n+#undef\tisfinite\n+#define\tisfinite(x) \\\n+  __extension__ ({ __typeof (x) __x_f = (x); \\\n+\t\t   __builtin_expect(!isnan(__x_f - __x_f), 1); })\n+#endif  /* SOLARIS_MATH_5_CHECK */\n+\n+\n+#if defined( SOLARIS_MATH_6_CHECK )\n+#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"\n+#undef\tisinf\n+#define\tisinf(x) \\\n+  __extension__ ({ __typeof (x) __x_i = (x); \\\n+\t\t   __builtin_expect(!isnan(__x_i) && !isfinite(__x_i), 0); })\n+#endif  /* SOLARIS_MATH_6_CHECK */\n+\n+\n+#if defined( SOLARIS_MATH_7_CHECK )\n+#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"\n+#undef\tisnormal\n+#define\tisnormal(x) \\\n+  __extension__ ({ __typeof(x) __x_n = (x); \\\n+\t\t   if (__x_n < 0.0) __x_n = -__x_n; \\\n+\t\t   __builtin_expect(isfinite(__x_n) \\\n+\t\t\t\t    && (sizeof(__x_n) == sizeof(float) \\\n+\t\t\t\t\t  ? __x_n >= __FLT_MIN__ \\\n+\t\t\t\t\t  : sizeof(__x_n) == sizeof(long double) \\\n+\t\t\t\t\t    ? __x_n >= __LDBL_MIN__ \\\n+\t\t\t\t\t    : __x_n >= __DBL_MIN__), 1); })\n+#endif  /* SOLARIS_MATH_7_CHECK */\n+\n+\n+#if defined( SOLARIS_MATH_8_CHECK )\n+#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"\n+#undef\tsignbit\n+#define\tsignbit(x)\t(sizeof(x) == sizeof(float) \\\n+\t\t\t   ? __builtin_signbitf(x) \\\n+\t\t\t   : sizeof(x) == sizeof(long double) \\\n+\t\t\t     ? __builtin_signbitl(x) \\\n+\t\t\t     : __builtin_signbit(x))\n+#endif  /* SOLARIS_MATH_8_CHECK */\n+\n+\n+#if defined( SOLARIS_MATH_9_CHECK )\n+#ident\t\"@(#)math_c99.h\t1.9\t04/11/01 SMI\"\n+#undef\tisgreater\n+#define\tisgreater(x, y)\t\t__builtin_isgreater(x, y)\n+#undef\tisgreaterequal\n+#define\tisgreaterequal(x, y)\t__builtin_isgreaterequal(x, y)\n+#undef\tisless\n+#define\tisless(x, y)\t\t__builtin_isless(x, y)\n+#undef\tislessequal\n+#define\tislessequal(x, y)\t__builtin_islessequal(x, y)\n+#undef\tislessgreater\n+#define\tislessgreater(x, y)\t__builtin_islessgreater(x, y)\n+#undef\tisunordered\n+#define\tisunordered(x, y)\t__builtin_isunordered(x, y)\n+#endif  /* SOLARIS_MATH_9_CHECK */"}, {"sha": "7b1f427551ac8cf987ebebffb76d7da8ea4f0ca7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925a448751fd6d7988db51070b585e4fd55766a2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925a448751fd6d7988db51070b585e4fd55766a2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=925a448751fd6d7988db51070b585e4fd55766a2", "patch": "@@ -1,3 +1,10 @@\n+2005-05-19  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/c99-math.h: New\n+\t* gcc.dg/c99-math-float-1.c: New test.\n+\t* gcc.dg/c99-math-double-1.c: Likewise.\n+\t* gcc.dg/c99-math-long-double-1.c: Likewise.\n+\n 2005-05-18  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.dg/tree-ssa/20031015-1.c: Expect one V_MUST_DEF."}, {"sha": "227b6e26cacab375b7ba15c33af8bdbca72ae5d4", "filename": "gcc/testsuite/gcc.dg/c99-math-double-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925a448751fd6d7988db51070b585e4fd55766a2/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math-double-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925a448751fd6d7988db51070b585e4fd55766a2/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math-double-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math-double-1.c?ref=925a448751fd6d7988db51070b585e4fd55766a2", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run { target *-*-solaris2.1[0-9]* } } */\r\n+/* { dg-options \"-std=c99 -O\" } */\r\n+\r\n+#include <math.h>\r\n+#include \"c99-math.h\"\r\n+\r\n+int main(void)\r\n+{\r\n+  double nan = NAN;\r\n+  double inf = INFINITY;\r\n+  double huge = HUGE_VAL;\r\n+  double norm = __DBL_MIN__;\r\n+  double zero = 0.0;\r\n+\r\n+  C99_MATH_TESTS (nan, inf, huge, norm, zero)\r\n+\r\n+  return 0;\r\n+}\r"}, {"sha": "9dd4e9a04837569af39ab1ce73767998c53a9d0e", "filename": "gcc/testsuite/gcc.dg/c99-math-float-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925a448751fd6d7988db51070b585e4fd55766a2/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math-float-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925a448751fd6d7988db51070b585e4fd55766a2/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math-float-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math-float-1.c?ref=925a448751fd6d7988db51070b585e4fd55766a2", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run { target *-*-solaris2.1[0-9]* } } */\r\n+/* { dg-options \"-std=c99 -O\" } */\r\n+\r\n+#include <math.h>\r\n+#include \"c99-math.h\"\r\n+\r\n+int main(void)\r\n+{\r\n+  float nan = NAN;\r\n+  float inf = INFINITY;\r\n+  float huge = HUGE_VALF;\r\n+  float norm = __FLT_MIN__;\r\n+  float zero = 0.0f;\r\n+\r\n+  C99_MATH_TESTS (nan, inf, huge, norm, zero)\r\n+\r\n+  return 0;\r\n+}\r"}, {"sha": "43d158854739c9822245c7a59573a363ac44659d", "filename": "gcc/testsuite/gcc.dg/c99-math-long-double-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925a448751fd6d7988db51070b585e4fd55766a2/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math-long-double-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925a448751fd6d7988db51070b585e4fd55766a2/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math-long-double-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math-long-double-1.c?ref=925a448751fd6d7988db51070b585e4fd55766a2", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run { target *-*-solaris2.1[0-9]* } } */\r\n+/* { dg-options \"-std=c99 -O\" } */\r\n+\r\n+#include <math.h>\r\n+#include \"c99-math.h\"\r\n+\r\n+int main(void)\r\n+{\r\n+  long double nan = NAN;\r\n+  long double inf = INFINITY;\r\n+  long double huge = HUGE_VALL;\r\n+  long double norm = __LDBL_MIN__;\r\n+  long double zero = 0.0l;\r\n+\r\n+  C99_MATH_TESTS (nan, inf, huge, norm, zero)\r\n+\r\n+  return 0;\r\n+}\r"}, {"sha": "a1e217c8ef3f1559e2972095e350a8956c03a418", "filename": "gcc/testsuite/gcc.dg/c99-math.h", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/925a448751fd6d7988db51070b585e4fd55766a2/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/925a448751fd6d7988db51070b585e4fd55766a2/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-math.h?ref=925a448751fd6d7988db51070b585e4fd55766a2", "patch": "@@ -0,0 +1,111 @@\n+#include <math.h>\r\n+\r\n+extern void abort(void);\r\n+\r\n+#define C99_MATH_TESTS(nan, inf, huge, norm, zero)\t\\\r\n+{\t\t\t\t\t\t\t\\\r\n+  if (fpclassify (nan) != FP_NAN)\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (fpclassify (inf) != FP_INFINITE)\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (fpclassify (huge) != FP_INFINITE)\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (fpclassify (norm) != FP_NORMAL)\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (fpclassify (zero) != FP_ZERO)\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (!isnan (nan))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (isnan (inf))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (isnan (huge))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (isnan (norm))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (isnan (zero))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (isinf (nan))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (!isinf (inf))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (!isinf (huge))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (isnan (norm))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (isinf (zero))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (isfinite (nan))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (isfinite (inf))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (isfinite (huge))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (!isfinite (norm))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (!isfinite (zero))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (isnormal (nan))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (isnormal (inf))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (isnormal (huge))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (!isnormal (norm))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (isnormal (zero))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (signbit (norm))\t\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (!signbit (-(norm)))\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (!isgreater ((inf), (norm)))\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (!isgreaterequal ((inf), (huge)))\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (!isless ((norm), (inf)))\t\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (!islessequal ((huge), (inf)))\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (!islessgreater ((inf), (norm)))\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+\t\t\t\t\t\t\t\\\r\n+  if (!isunordered ((nan), (norm)))\t\t\t\\\r\n+    abort ();\t\t\t\t\t\t\\\r\n+}\r"}]}