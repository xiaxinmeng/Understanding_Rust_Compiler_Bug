{"sha": "fa4a66d152dad4a1f08bc6119cba3c6922310dce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE0YTY2ZDE1MmRhZDRhMWYwOGJjNjExOWNiYTNjNjkyMjMxMGRjZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-07-19T01:36:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-07-19T01:36:58Z"}, "message": "* pt.c (instantiate_decl): Don't recheck substitutions.\n\nFrom-SVN: r189640", "tree": {"sha": "74614514f7139c57ecf605d372a64a51504c23eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74614514f7139c57ecf605d372a64a51504c23eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa4a66d152dad4a1f08bc6119cba3c6922310dce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa4a66d152dad4a1f08bc6119cba3c6922310dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa4a66d152dad4a1f08bc6119cba3c6922310dce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa4a66d152dad4a1f08bc6119cba3c6922310dce/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0e69fdf016311cb8570c43d8ec67e9d5cb2f2aeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e69fdf016311cb8570c43d8ec67e9d5cb2f2aeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e69fdf016311cb8570c43d8ec67e9d5cb2f2aeb"}], "stats": {"total": 33, "additions": 4, "deletions": 29}, "files": [{"sha": "9a3c65604ad2077c9e1e0f43adb4717f15f857d7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4a66d152dad4a1f08bc6119cba3c6922310dce/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4a66d152dad4a1f08bc6119cba3c6922310dce/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fa4a66d152dad4a1f08bc6119cba3c6922310dce", "patch": "@@ -1,3 +1,7 @@\n+2012-07-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* pt.c (instantiate_decl): Don't recheck substitutions.\n+\n 2012-07-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "0d253982233e7e4ae02d1f40c0efc929455bde1b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa4a66d152dad4a1f08bc6119cba3c6922310dce/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa4a66d152dad4a1f08bc6119cba3c6922310dce/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fa4a66d152dad4a1f08bc6119cba3c6922310dce", "patch": "@@ -18248,35 +18248,6 @@ instantiate_decl (tree d, int defer_ok,\n   if (TREE_CODE (d) == FUNCTION_DECL)\n     maybe_instantiate_noexcept (d);\n \n-  /* Recheck the substitutions to obtain any warning messages\n-     about ignoring cv qualifiers.  Don't do this for artificial decls,\n-     as it breaks the context-sensitive substitution for lambda op(). */\n-  if (!defer_ok && !DECL_ARTIFICIAL (d))\n-    {\n-      tree gen = DECL_TEMPLATE_RESULT (gen_tmpl);\n-      tree type = TREE_TYPE (gen);\n-\n-      /* Make sure that we can see identifiers, and compute access\n-\t correctly.  D is already the target FUNCTION_DECL with the\n-\t right context.  */\n-      push_access_scope (d);\n-\n-      if (TREE_CODE (gen) == FUNCTION_DECL)\n-\t{\n-\t  tsubst (DECL_ARGUMENTS (gen), gen_args, tf_warning_or_error, d);\n-          tsubst_exception_specification (type, gen_args, tf_warning_or_error,\n-                                          d, /*defer_ok*/true);\n-\t  /* Don't simply tsubst the function type, as that will give\n-\t     duplicate warnings about poor parameter qualifications.\n-\t     The function arguments are the same as the decl_arguments\n-\t     without the top level cv qualifiers.  */\n-\t  type = TREE_TYPE (type);\n-\t}\n-      tsubst (type, gen_args, tf_warning_or_error, d);\n-\n-      pop_access_scope (d);\n-    }\n-\n   /* Defer all other templates, unless we have been explicitly\n      forbidden from doing so.  */\n   if (/* If there is no definition, we cannot instantiate the"}]}