{"sha": "75a65e46517cd7066727757252447683657f45dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVhNjVlNDY1MTdjZDcwNjY3Mjc3NTcyNTI0NDc2ODM2NTdmNDVkZA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@codesourcery.com", "date": "2002-04-17T03:15:21Z"}, "committer": {"name": "David O'Brien", "email": "obrien@gcc.gnu.org", "date": "2002-04-17T03:15:21Z"}, "message": "Makefile.in (PROTO_OBJS): Add cppdefault.o.\n\n2002-04-17  Zack Weinberg  <zack@codesourcery.com>\n\t* Makefile.in (PROTO_OBJS): Add cppdefault.o.\n\t(protoize.o): Take $(PREPROCESSOR_DEFINES) off command line.\n\t(unprotoize.o): Ditto.  Build from protoize.c.  Define\n\tUNPROTOIZE on command line.\n\t* protoize.c: Include cppdefault.h.  Delete include_defaults.\n\t(in_system_include_dir): Use cpp_include_defaults (defined in\n\tcppdefault.o).\n\t* unprotoize.c: Delete file.\n\nApproved by:  rth\n              Message-ID: <20020415171022.A20025@redhat.com>\n\nFrom-SVN: r52402", "tree": {"sha": "529d506ab0cf6b6efa395229d048386eead82f2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/529d506ab0cf6b6efa395229d048386eead82f2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75a65e46517cd7066727757252447683657f45dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a65e46517cd7066727757252447683657f45dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75a65e46517cd7066727757252447683657f45dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75a65e46517cd7066727757252447683657f45dd/comments", "author": null, "committer": null, "parents": [{"sha": "650f0e9713527bea27162e7f73c5754f39df4e04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650f0e9713527bea27162e7f73c5754f39df4e04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/650f0e9713527bea27162e7f73c5754f39df4e04"}], "stats": {"total": 80, "additions": 19, "deletions": 61}, "files": [{"sha": "5c19dbe72dc273247a46fa3fe8fc82b185d32751", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a65e46517cd7066727757252447683657f45dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a65e46517cd7066727757252447683657f45dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75a65e46517cd7066727757252447683657f45dd", "patch": "@@ -1,3 +1,14 @@\n+2002-04-17  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* Makefile.in (PROTO_OBJS): Add cppdefault.o.\n+\t(protoize.o): Take $(PREPROCESSOR_DEFINES) off command line.\n+\t(unprotoize.o): Ditto.  Build from protoize.c.  Define\n+\tUNPROTOIZE on command line.\n+\t* protoize.c: Include cppdefault.h.  Delete include_defaults.\n+\t(in_system_include_dir): Use cpp_include_defaults (defined in\n+\tcppdefault.o).\n+\t* unprotoize.c: Delete file.\n+\n 2002-04-17  Aldy Hernandez  <aldyh@redhat.com>\n \n         * config/rs6000/altivec.h (vec_ld): Add array variants."}, {"sha": "1f7ad8157ca394dac7bb1d618f620dc4caf21950", "filename": "gcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a65e46517cd7066727757252447683657f45dd/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a65e46517cd7066727757252447683657f45dd/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=75a65e46517cd7066727757252447683657f45dd", "patch": "@@ -2021,7 +2021,7 @@ $(srcdir)/tradcif.c: $(srcdir)/tradcif.y\n \n proto: config.status protoize$(exeext) unprotoize$(exeext) SYSCALLS.c.X\n \n-PROTO_OBJS = intl.o version.o\n+PROTO_OBJS = intl.o version.o cppdefault.o\n \n protoize$(exeext): protoize.o $(PROTO_OBJS) $(LIBDEPS)\n \t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ protoize.o $(PROTO_OBJS) $(LIBS)\n@@ -2034,16 +2034,16 @@ protoize.o: protoize.c $(srcdir)/../include/getopt.h $(CONFIG_H) $(SYSTEM_H) \\\n \t(SHLIB_LINK='$(SHLIB_LINK)' \\\n \tSHLIB_MULTILIB='$(SHLIB_MULTILIB)'; \\\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t  $(DRIVER_DEFINES) $(PREPROCESSOR_DEFINES) \\\n+\t  $(DRIVER_DEFINES) \\\n \t  $(srcdir)/protoize.c $(OUTPUT_OPTION))\n \n-unprotoize.o: unprotoize.c protoize.c $(srcdir)/../include/getopt.h \\\n+unprotoize.o: protoize.c $(srcdir)/../include/getopt.h \\\n    $(CONFIG_H) $(SYSTEM_H) Makefile version.h\n \t(SHLIB_LINK='$(SHLIB_LINK)' \\\n \tSHLIB_MULTILIB='$(SHLIB_MULTILIB)'; \\\n-\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t  $(DRIVER_DEFINES) $(PREPROCESSOR_DEFINES) \\\n-\t  $(srcdir)/unprotoize.c $(OUTPUT_OPTION))\n+\t$(CC) -c -DUNPROTOIZE $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n+\t  $(DRIVER_DEFINES) \\\n+\t  $(srcdir)/protoize.c $(OUTPUT_OPTION))\n \n # This info describes the target machine, so compile with GCC just built.\n SYSCALLS.c.X: $(srcdir)/sys-types.h $(srcdir)/sys-protos.h $(GCC_PASSES) \\"}, {"sha": "3b710a5ac729d4e6a60cd0262a66c2313dba9186", "filename": "gcc/protoize.c", "status": "modified", "additions": 2, "deletions": 55, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75a65e46517cd7066727757252447683657f45dd/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75a65e46517cd7066727757252447683657f45dd/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=75a65e46517cd7066727757252447683657f45dd", "patch": "@@ -22,6 +22,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"config.h\"\n #include \"system.h\"\n #include \"intl.h\"\n+#include \"cppdefault.h\"\n \n #include <setjmp.h>\n #include <signal.h>\n@@ -194,60 +195,6 @@ static const unexpansion unexpansions[] = {\n \n static const int hash_mask = (HASH_TABLE_SIZE - 1);\n \n-/* Make a table of default system include directories\n-   just as it is done in cpp.  */\n-\n-static const struct default_include { const char *const fname; \n-\t\t\t const char *const component;\n-\t\t\t const int x1, x2; } include_defaults[]\n-#ifdef INCLUDE_DEFAULTS\n-  = INCLUDE_DEFAULTS;\n-#else\n-  = {\n-    /* Pick up GNU C++ specific include files.  */\n-    { GPLUSPLUS_INCLUDE_DIR, \"G++\", 1, 1 },\n-#ifdef CROSS_COMPILE\n-#ifdef GCC_INCLUDE_DIR\n-    /* This is the dir for fixincludes.  Put it just before\n-       the files that we fix.  */\n-    { GCC_INCLUDE_DIR, \"GCC\", 0, 0 },\n-#endif\n-#ifdef CROSS_INCLUDE_DIR\n-    /* For cross-compilation, this dir name is generated\n-       automatically in Makefile.in.  */\n-    { CROSS_INCLUDE_DIR, 0, 0, 0 },\n-#endif\n-#ifdef TOOL_INCLUDE_DIR\n-    /* This is another place that the target system's headers might be.  */\n-    { TOOL_INCLUDE_DIR, \"BINUTILS\", 0, 0 },\n-#endif\n-#else /* not CROSS_COMPILE */\n-#ifdef LOCAL_INCLUDE_DIR\n-    /* This should be /use/local/include and should come before\n-       the fixincludes-fixed header files.  */\n-    { LOCAL_INCLUDE_DIR, 0, 0, 1 },\n-#endif\n-#ifdef TOOL_INCLUDE_DIR\n-    /* This is here ahead of GCC_INCLUDE_DIR because assert.h goes here.\n-       Likewise, behind LOCAL_INCLUDE_DIR, where glibc puts its assert.h.  */\n-    { TOOL_INCLUDE_DIR, \"BINUTILS\", 0, 0 },\n-#endif\n-#ifdef GCC_INCLUDE_DIR\n-    /* This is the dir for fixincludes.  Put it just before\n-       the files that we fix.  */\n-    { GCC_INCLUDE_DIR, \"GCC\", 0, 0 },\n-#endif\n-    /* Some systems have an extra dir of include files.  */\n-#ifdef SYSTEM_INCLUDE_DIR\n-    { SYSTEM_INCLUDE_DIR, 0, 0, 0 },\n-#endif\n-#ifdef STANDARD_INCLUDE_DIR\n-    { STANDARD_INCLUDE_DIR, 0, 0, 0},\n-#endif\n-#endif /* not CROSS_COMPILE */\n-    { 0, 0, 0, 0}\n-    };\n-#endif /* no INCLUDE_DEFAULTS */\n \n /* Datatype for lists of directories or filenames.  */\n struct string_list\n@@ -754,7 +701,7 @@ in_system_include_dir (path)\n   if (! is_abspath (path))\n     abort ();\t\t/* Must be an absolutized filename.  */\n \n-  for (p = include_defaults; p->fname; p++)\n+  for (p = cpp_include_defaults; p->fname; p++)\n     if (!strncmp (path, p->fname, strlen (p->fname))\n \t&& IS_DIR_SEPARATOR (path[strlen (p->fname)]))\n       return 1;"}]}