{"sha": "0a4613f0c53a129aedcc1296a031b761b444e5d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGE0NjEzZjBjNTNhMTI5YWVkY2MxMjk2YTAzMWI3NjFiNDQ0ZTVkOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-10-11T21:45:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-11T21:45:34Z"}, "message": "iresolve.c (is_trig_resolved, [...]): Formatting fixes.\n\n\t* iresolve.c (is_trig_resolved, resolve_trig_call): Formatting fixes.\n\t* simplify.c (simplify_trig_call, degrees_f, radians_f,\n\tgfc_simplify_atrigd, gfc_simplify_cotan): Likewise.\n\nFrom-SVN: r241010", "tree": {"sha": "133618dfdbf189b993ed7cb45506c034c7047a67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/133618dfdbf189b993ed7cb45506c034c7047a67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a4613f0c53a129aedcc1296a031b761b444e5d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a4613f0c53a129aedcc1296a031b761b444e5d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a4613f0c53a129aedcc1296a031b761b444e5d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a4613f0c53a129aedcc1296a031b761b444e5d8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1fdf74c7c9cf637453783669ae0b5f6ff6af3b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fdf74c7c9cf637453783669ae0b5f6ff6af3b19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fdf74c7c9cf637453783669ae0b5f6ff6af3b19"}], "stats": {"total": 153, "additions": 77, "deletions": 76}, "files": [{"sha": "5c801b66ed03402729fe6f06ed0df75425607ee3", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4613f0c53a129aedcc1296a031b761b444e5d8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4613f0c53a129aedcc1296a031b761b444e5d8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=0a4613f0c53a129aedcc1296a031b761b444e5d8", "patch": "@@ -1,3 +1,9 @@\n+2016-10-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* iresolve.c (is_trig_resolved, resolve_trig_call): Formatting fixes.\n+\t* simplify.c (simplify_trig_call, degrees_f, radians_f,\n+\tgfc_simplify_atrigd, gfc_simplify_cotan): Likewise.\n+\n 2016-10-11  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/77942"}, {"sha": "078e47dbaa0ebad045981e9f760a6b4a84cd5bcb", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4613f0c53a129aedcc1296a031b761b444e5d8/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4613f0c53a129aedcc1296a031b761b444e5d8/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=0a4613f0c53a129aedcc1296a031b761b444e5d8", "patch": "@@ -685,8 +685,8 @@ is_trig_resolved (gfc_expr *f)\n {\n   /* We know we've already resolved the function if we see the lib call\n      starting with '__'.  */\n-  return f->value.function.name != NULL\n-    && 0 == strncmp (\"__\", f->value.function.name, 2);\n+  return (f->value.function.name != NULL\n+\t  && strncmp (\"__\", f->value.function.name, 2) == 0);\n }\n \n /* Return a shallow copy of the function expression f.  The original expression\n@@ -2744,28 +2744,26 @@ resolve_trig_call (gfc_expr *f, gfc_expr *x)\n {\n   switch (f->value.function.isym->id)\n     {\n-      case GFC_ISYM_ACOS:\n-\treturn gfc_resolve_acos (f, x);\n-      case GFC_ISYM_ASIN:\n-\treturn gfc_resolve_asin (f, x);\n-      case GFC_ISYM_ATAN:\n-\treturn gfc_resolve_atan (f, x);\n-      case GFC_ISYM_ATAN2:\n-\t/* NB. arg3 is unused for atan2 */\n-\treturn gfc_resolve_atan2 (f, x, NULL);\n-      case GFC_ISYM_COS:\n-\treturn gfc_resolve_cos (f, x);\n-      case GFC_ISYM_COTAN:\n-\treturn gfc_resolve_cotan (f, x);\n-      case GFC_ISYM_SIN:\n-\treturn gfc_resolve_sin (f, x);\n-      case GFC_ISYM_TAN:\n-\treturn gfc_resolve_tan (f, x);\n-      default:\n-\tbreak;\n-    }\n-\n-  gcc_unreachable ();\n+    case GFC_ISYM_ACOS:\n+      return gfc_resolve_acos (f, x);\n+    case GFC_ISYM_ASIN:\n+      return gfc_resolve_asin (f, x);\n+    case GFC_ISYM_ATAN:\n+      return gfc_resolve_atan (f, x);\n+    case GFC_ISYM_ATAN2:\n+      /* NB. arg3 is unused for atan2 */\n+      return gfc_resolve_atan2 (f, x, NULL);\n+    case GFC_ISYM_COS:\n+      return gfc_resolve_cos (f, x);\n+    case GFC_ISYM_COTAN:\n+      return gfc_resolve_cotan (f, x);\n+    case GFC_ISYM_SIN:\n+      return gfc_resolve_sin (f, x);\n+    case GFC_ISYM_TAN:\n+      return gfc_resolve_tan (f, x);\n+    default:\n+      gcc_unreachable ();\n+    }\n }\n \n /* Resolve degree trig function as trigd (x) = trig (radians (x)).  */"}, {"sha": "549d900538b1926418962f73688f22ebbcc83c13", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 49, "deletions": 52, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a4613f0c53a129aedcc1296a031b761b444e5d8/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a4613f0c53a129aedcc1296a031b761b444e5d8/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=0a4613f0c53a129aedcc1296a031b761b444e5d8", "patch": "@@ -1717,72 +1717,69 @@ simplify_trig_call (gfc_expr *icall)\n \n   /* The actual simplifiers will return NULL for non-constant x.  */\n   switch (func)\n-  {\n+    {\n     case GFC_ISYM_ACOS:\n-\treturn gfc_simplify_acos (x);\n+      return gfc_simplify_acos (x);\n     case GFC_ISYM_ASIN:\n-\treturn gfc_simplify_asin (x);\n+      return gfc_simplify_asin (x);\n     case GFC_ISYM_ATAN:\n-\treturn gfc_simplify_atan (x);\n+      return gfc_simplify_atan (x);\n     case GFC_ISYM_COS:\n-\treturn gfc_simplify_cos (x);\n+      return gfc_simplify_cos (x);\n     case GFC_ISYM_COTAN:\n-\treturn gfc_simplify_cotan (x);\n+      return gfc_simplify_cotan (x);\n     case GFC_ISYM_SIN:\n-\treturn gfc_simplify_sin (x);\n+      return gfc_simplify_sin (x);\n     case GFC_ISYM_TAN:\n-\treturn gfc_simplify_tan (x);\n+      return gfc_simplify_tan (x);\n     default:\n-\t break;\n-  }\n-\n-  gfc_internal_error (\"in simplify_trig_call(): Bad intrinsic\");\n-  return NULL;\n+      gfc_internal_error (\"in simplify_trig_call(): Bad intrinsic\");\n+    }\n }\n \n /* Convert a floating-point number from radians to degrees.  */\n \n static void\n degrees_f (mpfr_t x, mp_rnd_t rnd_mode)\n {\n-    mpfr_t tmp;\n-    mpfr_init (tmp);\n+  mpfr_t tmp;\n+  mpfr_init (tmp);\n \n-    /* Set x = x % 2pi to avoid offsets with large angles.  */\n-    mpfr_const_pi (tmp, rnd_mode);\n-    mpfr_mul_ui (tmp, tmp, 2, rnd_mode);\n-    mpfr_fmod (tmp, x, tmp, rnd_mode);\n+  /* Set x = x % 2pi to avoid offsets with large angles.  */\n+  mpfr_const_pi (tmp, rnd_mode);\n+  mpfr_mul_ui (tmp, tmp, 2, rnd_mode);\n+  mpfr_fmod (tmp, x, tmp, rnd_mode);\n \n-    /* Set x = x * 180.  */\n-    mpfr_mul_ui (x, x, 180, rnd_mode);\n+  /* Set x = x * 180.  */\n+  mpfr_mul_ui (x, x, 180, rnd_mode);\n \n-    /* Set x = x / pi.  */\n-    mpfr_const_pi (tmp, rnd_mode);\n-    mpfr_div (x, x, tmp, rnd_mode);\n+  /* Set x = x / pi.  */\n+  mpfr_const_pi (tmp, rnd_mode);\n+  mpfr_div (x, x, tmp, rnd_mode);\n \n-    mpfr_clear (tmp);\n+  mpfr_clear (tmp);\n }\n \n /* Convert a floating-point number from degrees to radians.  */\n \n static void\n radians_f (mpfr_t x, mp_rnd_t rnd_mode)\n {\n-    mpfr_t tmp;\n-    mpfr_init (tmp);\n+  mpfr_t tmp;\n+  mpfr_init (tmp);\n \n-    /* Set x = x % 360 to avoid offsets with large angles.  */\n-    mpfr_set_ui (tmp, 360, rnd_mode);\n-    mpfr_fmod (tmp, x, tmp, rnd_mode);\n+  /* Set x = x % 360 to avoid offsets with large angles.  */\n+  mpfr_set_ui (tmp, 360, rnd_mode);\n+  mpfr_fmod (tmp, x, tmp, rnd_mode);\n \n-    /* Set x = x * pi.  */\n-    mpfr_const_pi (tmp, rnd_mode);\n-    mpfr_mul (x, x, tmp, rnd_mode);\n+  /* Set x = x * pi.  */\n+  mpfr_const_pi (tmp, rnd_mode);\n+  mpfr_mul (x, x, tmp, rnd_mode);\n \n-    /* Set x = x / 180.  */\n-    mpfr_div_ui (x, x, 180, rnd_mode);\n+  /* Set x = x / 180.  */\n+  mpfr_div_ui (x, x, 180, rnd_mode);\n \n-    mpfr_clear (tmp);\n+  mpfr_clear (tmp);\n }\n \n \n@@ -1820,11 +1817,11 @@ gfc_simplify_atrigd (gfc_expr *icall)\n   result = simplify_trig_call (icall);\n \n   if (result && result->expr_type == EXPR_CONSTANT)\n-  {\n+    {\n       /* Convert constant to degrees after passing off to actual simplifier.  */\n       degrees_f (result->value.real, GFC_RND_MODE);\n       return result;\n-  }\n+    }\n \n   /* Let gfc_resolve_atrigd take care of the non-constant case.  */\n   return NULL;\n@@ -6403,22 +6400,22 @@ gfc_simplify_cotan (gfc_expr *x)\n \n   switch (x->ts.type)\n     {\n-      case BT_REAL:\n-\tmpfr_cot (result->value.real, x->value.real, GFC_RND_MODE);\n-\tbreak;\n+    case BT_REAL:\n+      mpfr_cot (result->value.real, x->value.real, GFC_RND_MODE);\n+      break;\n \n-      case BT_COMPLEX:\n-\t/* There is no builtin mpc_cot, so compute cot = cos / sin.  */\n-\tval = &result->value.complex;\n-\tmpc_init2 (swp, mpfr_get_default_prec ());\n-\tmpc_cos (swp, x->value.complex, GFC_MPC_RND_MODE);\n-\tmpc_sin (*val, x->value.complex, GFC_MPC_RND_MODE);\n-\tmpc_div (*val, swp, *val, GFC_MPC_RND_MODE);\n-\tmpc_clear (swp);\n-\tbreak;\n+    case BT_COMPLEX:\n+      /* There is no builtin mpc_cot, so compute cot = cos / sin.  */\n+      val = &result->value.complex;\n+      mpc_init2 (swp, mpfr_get_default_prec ());\n+      mpc_cos (swp, x->value.complex, GFC_MPC_RND_MODE);\n+      mpc_sin (*val, x->value.complex, GFC_MPC_RND_MODE);\n+      mpc_div (*val, swp, *val, GFC_MPC_RND_MODE);\n+      mpc_clear (swp);\n+      break;\n \n-      default:\n-\tgcc_unreachable ();\n+    default:\n+      gcc_unreachable ();\n     }\n \n   return range_check (result, \"COTAN\");"}]}