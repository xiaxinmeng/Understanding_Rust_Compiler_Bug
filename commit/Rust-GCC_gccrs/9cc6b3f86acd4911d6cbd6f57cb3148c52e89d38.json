{"sha": "9cc6b3f86acd4911d6cbd6f57cb3148c52e89d38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNjNmIzZjg2YWNkNDkxMWQ2Y2JkNmY1N2NiMzE0OGM1MmU4OWQzOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-07-07T13:12:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-07-07T13:12:55Z"}, "message": "sem_ch6.adb (Analyze_Subprogram_Body_Helper): Remove redundant test, adjust comments and formatting.\n\n2016-07-07  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Remove redundant test,\n\tadjust comments and formatting.\n\t* sem_prag.adb (Inlining_Not_Possible): Do not test Front_End_Inlining\n\there but...\n\t(Make_Inline): ...here before calling Inlining_Not_Possible instead.\n\t(Set_Inline_Flags): Remove useless test.\n\t(Analyze_Pragma) <Pragma_Inline>: Add comment about -gnatn switch.\n\nFrom-SVN: r238113", "tree": {"sha": "c1e148d15c303c815b28b52d4c2f3706b66bfcf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1e148d15c303c815b28b52d4c2f3706b66bfcf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cc6b3f86acd4911d6cbd6f57cb3148c52e89d38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cc6b3f86acd4911d6cbd6f57cb3148c52e89d38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cc6b3f86acd4911d6cbd6f57cb3148c52e89d38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cc6b3f86acd4911d6cbd6f57cb3148c52e89d38/comments", "author": null, "committer": null, "parents": [{"sha": "7119f1b1a43b6721cd95fe381378f92f699e967a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7119f1b1a43b6721cd95fe381378f92f699e967a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7119f1b1a43b6721cd95fe381378f92f699e967a"}], "stats": {"total": 63, "additions": 42, "deletions": 21}, "files": [{"sha": "711d888c6bd27e92ca9ef8777cb40b4a8e7c18a0", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc6b3f86acd4911d6cbd6f57cb3148c52e89d38/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc6b3f86acd4911d6cbd6f57cb3148c52e89d38/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9cc6b3f86acd4911d6cbd6f57cb3148c52e89d38", "patch": "@@ -1,3 +1,13 @@\n+2016-07-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Remove redundant test,\n+\tadjust comments and formatting.\n+\t* sem_prag.adb (Inlining_Not_Possible): Do not test Front_End_Inlining\n+\there but...\n+\t(Make_Inline): ...here before calling Inlining_Not_Possible instead.\n+\t(Set_Inline_Flags): Remove useless test.\n+\t(Analyze_Pragma) <Pragma_Inline>: Add comment about -gnatn switch.\n+\n 2016-07-07  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_prag.ads, sem_prag.adb (Build_Classwide_Expression): Include"}, {"sha": "4544e0b786154d16c2c139a5ca34dd2d52a12151", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc6b3f86acd4911d6cbd6f57cb3148c52e89d38/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc6b3f86acd4911d6cbd6f57cb3148c52e89d38/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=9cc6b3f86acd4911d6cbd6f57cb3148c52e89d38", "patch": "@@ -3731,7 +3731,7 @@ package body Sem_Ch6 is\n          return;\n       end if;\n \n-      --  Handle front-end inlining\n+      --  Handle inlining\n \n       --  Note: Normally we don't do any inlining if expansion is off, since\n       --  we won't generate code in any case. An exception arises in GNATprove\n@@ -3748,15 +3748,14 @@ package body Sem_Ch6 is\n \n          if not Back_End_Inlining then\n             if (Has_Pragma_Inline_Always (Spec_Id)\n-                  and then not Opt.Disable_FE_Inline_Always)\n-              or else\n-              (Has_Pragma_Inline (Spec_Id) and then Front_End_Inlining\n-                 and then not Opt.Disable_FE_Inline)\n+                 and then not Opt.Disable_FE_Inline_Always)\n+              or else (Front_End_Inlining\n+                        and then not Opt.Disable_FE_Inline)\n             then\n                Build_Body_To_Inline (N, Spec_Id);\n             end if;\n \n-         --  New implementation (relying on backend inlining)\n+         --  New implementation (relying on back-end inlining)\n \n          else\n             if Has_Pragma_Inline_Always (Spec_Id)"}, {"sha": "bcdef91f143d60cab116b8a94dff9bd32ab619c0", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 27, "deletions": 15, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cc6b3f86acd4911d6cbd6f57cb3148c52e89d38/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cc6b3f86acd4911d6cbd6f57cb3148c52e89d38/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=9cc6b3f86acd4911d6cbd6f57cb3148c52e89d38", "patch": "@@ -3932,7 +3932,7 @@ package body Sem_Prag is\n       --    Enabled:    inlining is requested/required for the subprogram\n \n       procedure Process_Inline (Status : Inline_Status);\n-      --  Common processing for Inline, Inline_Always and No_Inline. Parameter\n+      --  Common processing for No_Inline, Inline and Inline_Always. Parameter\n       --  indicates the inline status specified by the pragma.\n \n       procedure Process_Interface_Name\n@@ -8791,21 +8791,20 @@ package body Sem_Prag is\n          --  processing the arguments of the pragma.\n \n          procedure Make_Inline (Subp : Entity_Id);\n-         --  Subp is the defining unit name of the subprogram declaration. Set\n-         --  the flag, as well as the flag in the corresponding body, if there\n-         --  is one present.\n+         --  Subp is the defining unit name of the subprogram declaration. If\n+         --  the pragma is valid, call Set_Inline_Flags on Subp, as well as on\n+         --  the corresponding body, if there is one present.\n \n          procedure Set_Inline_Flags (Subp : Entity_Id);\n-         --  Sets Is_Inlined and Has_Pragma_Inline flags for Subp and also\n-         --  Has_Pragma_Inline_Always for the Inline_Always case.\n+         --  Set Has_Pragma_{No_Inline,Inline,Inline_Always} flag on Subp.\n+         --  Also set or clear Is_Inlined flag on Subp depending on Status.\n \n          function Inlining_Not_Possible (Subp : Entity_Id) return Boolean;\n          --  Returns True if it can be determined at this stage that inlining\n          --  is not possible, for example if the body is available and contains\n          --  exception handlers, we prevent inlining, since otherwise we can\n          --  get undefined symbols at link time. This function also emits a\n-         --  warning if front-end inlining is enabled and the pragma appears\n-         --  too late.\n+         --  warning if the pragma appears too late.\n          --\n          --  ??? is business with link symbols still valid, or does it relate\n          --  to front end ZCX which is being phased out ???\n@@ -8827,9 +8826,7 @@ package body Sem_Prag is\n             elsif Nkind (Decl) = N_Subprogram_Declaration\n               and then Present (Corresponding_Body (Decl))\n             then\n-               if Front_End_Inlining\n-                 and then Analyzed (Corresponding_Body (Decl))\n-               then\n+               if Analyzed (Corresponding_Body (Decl)) then\n                   Error_Msg_N (\"pragma appears too late, ignored??\", N);\n                   return True;\n \n@@ -8879,6 +8876,7 @@ package body Sem_Prag is\n             --  If inlining is not possible, for now do not treat as an error\n \n             elsif Status /= Suppressed\n+              and then Front_End_Inlining\n               and then Inlining_Not_Possible (Subp)\n             then\n                Applies := True;\n@@ -9048,9 +9046,7 @@ package body Sem_Prag is\n                   end if;\n                end if;\n \n-               if not Has_Pragma_Inline (Subp) then\n-                  Set_Has_Pragma_Inline (Subp);\n-               end if;\n+               Set_Has_Pragma_Inline (Subp);\n             end if;\n \n             --  Then adjust the Is_Inlined flag. It can never be set if the\n@@ -16398,7 +16394,23 @@ package body Sem_Prag is\n \n             if not GNATprove_Mode then\n \n-               --  Inline status is Enabled if inlining option is active\n+               --  Inline status is Enabled if option -gnatn is specified.\n+               --  However this status determines only the value of the\n+               --  Is_Inlined flag on the subprogram and does not prevent\n+               --  the pragma itself from being recorded for later use,\n+               --  in particular for a later modification of Is_Inlined\n+               --  independently of the -gnatn option.\n+\n+               --  In other words, if -gnatn is specified for a unit, then\n+               --  all Inline pragmas processed for the compilation of this\n+               --  unit, including those in the spec of other units, are\n+               --  activated, so subprograms will be inlined across units.\n+\n+               --  If -gnatn is not specified, no Inline pragma is activated\n+               --  here, which means that subprograms will not be inlined\n+               --  across units. The Is_Inlined flag will nevertheless be\n+               --  set later when bodies are analyzed, so subprograms will\n+               --  be inlined within the unit.\n \n                if Inline_Active then\n                   Process_Inline (Enabled);"}]}