{"sha": "410644c41a1b10798a0fe442c66f9bf582ecf067", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEwNjQ0YzQxYTFiMTA3OThhMGZlNDQyYzY2ZjliZjU4MmVjZjA2Nw==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-12-24T18:41:05Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-24T18:41:05Z"}, "message": "In libobjc/: 2010-12-24 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn libobjc/:\n2010-12-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc/runtime.h (class_addIvar): Updated documentation.  The\n\talignment is actually the log_2 of the alignment in bytes.\n\t* ivars.c (class_addIvar): Corresponding change to the\n\timplementation.\n\nIn gcc/testsuite/:\n2010-12-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* objc.dg/gnu-api-2-class.m: Updated test to pass log_2 of the\n\talignment to class_addIvar, instead of the alignment itself.\n\t* obj-c++.dg/gnu-api-2-class.mm: Same change.\n\nFrom-SVN: r168230", "tree": {"sha": "7562e7cd285a7a06e30ffabe52c2cf473a57ab9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7562e7cd285a7a06e30ffabe52c2cf473a57ab9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/410644c41a1b10798a0fe442c66f9bf582ecf067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410644c41a1b10798a0fe442c66f9bf582ecf067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410644c41a1b10798a0fe442c66f9bf582ecf067", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410644c41a1b10798a0fe442c66f9bf582ecf067/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5750872c618185a2f1161d24510ad2be8669338a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5750872c618185a2f1161d24510ad2be8669338a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5750872c618185a2f1161d24510ad2be8669338a"}], "stats": {"total": 88, "additions": 70, "deletions": 18}, "files": [{"sha": "2e68afa4f213a1475f7bd6e2ab4e457a0996dae9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410644c41a1b10798a0fe442c66f9bf582ecf067/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410644c41a1b10798a0fe442c66f9bf582ecf067/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=410644c41a1b10798a0fe442c66f9bf582ecf067", "patch": "@@ -1,3 +1,9 @@\n+2010-12-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc.dg/gnu-api-2-class.m: Updated test to pass log_2 of the\n+\talignment to class_addIvar, instead of the alignment itself.\n+\t* obj-c++.dg/gnu-api-2-class.mm: Same change.\n+\n 2010-12-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc.dg/gnu-api-2-sel.m: Updated for renaming of sel_getType to"}, {"sha": "18c3393fa1e905de4dae416135639712db301d7a", "filename": "gcc/testsuite/obj-c++.dg/gnu-api-2-class.mm", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410644c41a1b10798a0fe442c66f9bf582ecf067/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-class.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410644c41a1b10798a0fe442c66f9bf582ecf067/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-class.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-class.mm?ref=410644c41a1b10798a0fe442c66f9bf582ecf067", "patch": "@@ -62,6 +62,24 @@ @interface MySubClass (MySelf)\n - (id) mySelf;\n @end\n \n+/* Hack to calculate the log2 of a byte alignment.  */\n+unsigned char\n+log_2_of (unsigned int x)\n+{\n+  unsigned char result = 0;\n+\n+  /* We count how many times we need to divide by 2 before we reach 1.\n+     This algorithm is good enough for the small numbers (such as 8,\n+     16 or 64) that we have to deal with.  */\n+  while (x > 1)\n+    {\n+      x = x / 2;\n+      result++;\n+    }\n+\n+  return result;\n+}\n+\n int main ()\n {\n   /* Functions are tested in alphabetical order.  */\n@@ -74,15 +92,15 @@ int main ()\n       abort ();\n     \n     if (! class_addIvar (new_class, \"variable2_ivar\", sizeof (id),\n-\t\t\t __alignof__ (id), @encode (id)))\n+\t\t\t log_2_of (__alignof__ (id)), @encode (id)))\n       abort ();\n \n     if (! class_addIvar (new_class, \"variable3_ivar\", sizeof (unsigned char),\n-\t\t\t __alignof__ (unsigned char), @encode (unsigned char)))\n+\t\t\t log_2_of (__alignof__ (unsigned char)), @encode (unsigned char)))\n       abort ();\n \n     if (! class_addIvar (new_class, \"variable4_ivar\", sizeof (unsigned long),\n-\t\t\t __alignof__ (unsigned long), @encode (unsigned long)))\n+\t\t\t log_2_of (__alignof__ (unsigned long)), @encode (unsigned long)))\n       abort ();\n \n     objc_registerClassPair (new_class);    \n@@ -135,7 +153,7 @@ int main ()\n       abort ();\n     \n     if (! class_addIvar (new_class, \"variable_ivar\", sizeof (id),\n-\t\t\t __alignof__ (id), @encode (id)))\n+\t\t\t log_2_of (__alignof__ (id)), @encode (id)))\n       abort ();\n \n     if (! class_addMethod (new_class, @selector (setVariable:), method_getImplementation (method1),"}, {"sha": "3302fccbb17aeb628ddf247b676296a9a1969087", "filename": "gcc/testsuite/objc.dg/gnu-api-2-class.m", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410644c41a1b10798a0fe442c66f9bf582ecf067/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-class.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410644c41a1b10798a0fe442c66f9bf582ecf067/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-class.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-class.m?ref=410644c41a1b10798a0fe442c66f9bf582ecf067", "patch": "@@ -62,6 +62,24 @@ @interface MySubClass (MySelf)\n - (id) mySelf;\n @end\n \n+/* Hack to calculate the log2 of a byte alignment.  */\n+unsigned char\n+log_2_of (unsigned int x)\n+{\n+  unsigned char result = 0;\n+\n+  /* We count how many times we need to divide by 2 before we reach 1.\n+     This algorithm is good enough for the small numbers (such as 8,\n+     16 or 64) that we have to deal with.  */\n+  while (x > 1)\n+    {\n+      x = x / 2;\n+      result++;\n+    }\n+\n+  return result;\n+}\n+\n int main(int argc, void **args)\n {\n   /* Functions are tested in alphabetical order.  */\n@@ -74,15 +92,15 @@ int main(int argc, void **args)\n       abort ();\n     \n     if (! class_addIvar (new_class, \"variable2_ivar\", sizeof (id),\n-\t\t\t __alignof__ (id), @encode (id)))\n+\t\t\t log_2_of (__alignof__ (id)), @encode (id)))\n       abort ();\n \n     if (! class_addIvar (new_class, \"variable3_ivar\", sizeof (unsigned char),\n-\t\t\t __alignof__ (unsigned char), @encode (unsigned char)))\n+\t\t\t log_2_of (__alignof__ (unsigned char)), @encode (unsigned char)))\n       abort ();\n \n     if (! class_addIvar (new_class, \"variable4_ivar\", sizeof (unsigned long),\n-\t\t\t __alignof__ (unsigned long), @encode (unsigned long)))\n+\t\t\t log_2_of (__alignof__ (unsigned long)), @encode (unsigned long)))\n       abort ();\n \n     objc_registerClassPair (new_class);    \n@@ -135,7 +153,7 @@ int main(int argc, void **args)\n       abort ();\n     \n     if (! class_addIvar (new_class, \"variable_ivar\", sizeof (id),\n-\t\t\t __alignof__ (id), @encode (id)))\n+\t\t\t log_2_of (__alignof__ (id)), @encode (id)))\n       abort ();\n \n     if (! class_addMethod (new_class, @selector (setVariable:), method_getImplementation (method1),"}, {"sha": "d8f23f74c9a1c4c2d981b83696c5226ae87d4d87", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410644c41a1b10798a0fe442c66f9bf582ecf067/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410644c41a1b10798a0fe442c66f9bf582ecf067/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=410644c41a1b10798a0fe442c66f9bf582ecf067", "patch": "@@ -1,3 +1,10 @@\n+2010-12-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* objc/runtime.h (class_addIvar): Updated documentation.  The\n+\talignment is actually the log_2 of the alignment in bytes.\n+\t* ivars.c (class_addIvar): Corresponding change to the\n+\timplementation.\n+\t\n 2010-12-24  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc/runtime.h (sel_getType): Renamed to sel_getTypeEncoding to"}, {"sha": "6111a03ea165d11542d55b87c7214b80bc16e41d", "filename": "libobjc/ivars.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410644c41a1b10798a0fe442c66f9bf582ecf067/libobjc%2Fivars.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410644c41a1b10798a0fe442c66f9bf582ecf067/libobjc%2Fivars.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fivars.c?ref=410644c41a1b10798a0fe442c66f9bf582ecf067", "patch": "@@ -212,7 +212,7 @@ struct objc_ivar ** class_copyIvarList (Class class_, unsigned int *numberOfRetu\n \n BOOL\n class_addIvar (Class class_, const char * ivar_name, size_t size,\n-\t       unsigned char alignment, const char *type)\n+\t       unsigned char log_2_of_alignment, const char *type)\n {\n   struct objc_ivar_list *ivars;\n \n@@ -270,6 +270,7 @@ class_addIvar (Class class_, const char * ivar_name, size_t size,\n      size. */\n   {\n     struct objc_ivar *ivar = &(ivars->ivar_list[ivars->ivar_count - 1]);\n+    unsigned int alignment = 1 << log_2_of_alignment;\n     int misalignment;\n     \n     ivar->ivar_name = objc_malloc (strlen (ivar_name) + 1);"}, {"sha": "9332f7be0692cf080af88e5eb9083f3b646a50e4", "filename": "libobjc/objc/runtime.h", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/410644c41a1b10798a0fe442c66f9bf582ecf067/libobjc%2Fobjc%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/410644c41a1b10798a0fe442c66f9bf582ecf067/libobjc%2Fobjc%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fobjc%2Fruntime.h?ref=410644c41a1b10798a0fe442c66f9bf582ecf067", "patch": "@@ -352,14 +352,16 @@ objc_EXPORT Ivar * class_copyIvarList (Class class_, unsigned int *numberOfRetur\n    using objc_allocateClassPair() and has not been registered with the\n    runtime using objc_registerClassPair() yet.  You can not add\n    instance variables to classes already registered with the runtime.\n-   'size' is the size of the instance variable, 'alignment' the\n-   alignment, and 'type' the type encoding of the variable type.  You\n-   can use sizeof(), __alignof__() and @encode() to determine the\n-   right 'size', 'alignment' and 'type' for your instance variable.\n-   For example, to add an instance variable name \"my_variable\" and of\n-   type 'id', you can use:\n-\n-   class_addIvar (class, \"my_variable\", sizeof (id), __alignof__ (id), \n+   'size' is the size of the instance variable, 'log_2_of_alignment'\n+   the alignment as a power of 2 (so 0 means alignment to a 1 byte\n+   boundary, 1 means alignment to a 2 byte boundary, 2 means alignment\n+   to a 4 byte boundary, etc), and 'type' the type encoding of the\n+   variable type.  You can use sizeof(), log2(__alignof__()) and\n+   @encode() to determine the right 'size', 'alignment' and 'type' for\n+   your instance variable.  For example, to add an instance variable\n+   name \"my_variable\" and of type 'id', you can use:\n+\n+   class_addIvar (class, \"my_variable\", sizeof (id), log2 ( __alignof__ (id)),\n                   @encode (id));\n \n    Return YES if the variable was added, and NO if not.  In\n@@ -368,7 +370,7 @@ objc_EXPORT Ivar * class_copyIvarList (Class class_, unsigned int *numberOfRetur\n    'type' is NULL, or 'size' is 0.\n  */\n objc_EXPORT BOOL class_addIvar (Class class_, const char * ivar_name, size_t size,\n-\t\t\t\tunsigned char alignment, const char *type);\n+\t\t\t\tunsigned char log_2_of_alignment, const char *type);\n \n /* Return the name of the property.  Return NULL if 'property' is\n    NULL.  */"}]}