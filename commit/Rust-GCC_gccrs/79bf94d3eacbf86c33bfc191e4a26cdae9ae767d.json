{"sha": "79bf94d3eacbf86c33bfc191e4a26cdae9ae767d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzliZjk0ZDNlYWNiZjg2YzMzYmZjMTkxZTRhMjZjZGFlOWFlNzY3ZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-08-16T22:47:39Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-08-16T22:47:39Z"}, "message": "(fold...\n\n(fold, case EQ_EXPR): Re-enable converting signed MOD operations to\nunsigned when inside comparisons against zero, but only when the\nsecond operand of the MOD is an integral power of two.\n\nFrom-SVN: r5166", "tree": {"sha": "669de41aa81a66a2d1424c4fa4b2d06250244cb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/669de41aa81a66a2d1424c4fa4b2d06250244cb8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79bf94d3eacbf86c33bfc191e4a26cdae9ae767d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79bf94d3eacbf86c33bfc191e4a26cdae9ae767d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79bf94d3eacbf86c33bfc191e4a26cdae9ae767d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79bf94d3eacbf86c33bfc191e4a26cdae9ae767d/comments", "author": null, "committer": null, "parents": [{"sha": "41fe0b83ba0c830077b46e8386065204fcd4fd6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41fe0b83ba0c830077b46e8386065204fcd4fd6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41fe0b83ba0c830077b46e8386065204fcd4fd6e"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "9d5aecc57b024e0e5328da96a42ce033753d5d7d", "filename": "gcc/fold-const.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79bf94d3eacbf86c33bfc191e4a26cdae9ae767d/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79bf94d3eacbf86c33bfc191e4a26cdae9ae767d/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=79bf94d3eacbf86c33bfc191e4a26cdae9ae767d", "patch": "@@ -4224,20 +4224,17 @@ fold (expr)\n \t\t\t   arg1));\n \t}\n \n-      /* It would be nice to do this since it generates better code.\n-\t Unfortunately, it doesn't produce the correct result if the\n-\t first operand is negative.  */\n-#if 0\n       /* If this is an NE or EQ comparison of zero against the result of a\n-\t signed MOD operation, make the MOD operation unsigned since it\n-\t is simpler and equivalent.  */\n+\t signed MOD operation whose second operand is a power of 2, make\n+\t the MOD operation unsigned since it is simpler and equivalent.  */\n       if ((code == NE_EXPR || code == EQ_EXPR)\n \t  && integer_zerop (arg1)\n \t  && ! TREE_UNSIGNED (TREE_TYPE (arg0))\n \t  && (TREE_CODE (arg0) == TRUNC_MOD_EXPR\n \t      || TREE_CODE (arg0) == CEIL_MOD_EXPR\n \t      || TREE_CODE (arg0) == FLOOR_MOD_EXPR\n-\t      || TREE_CODE (arg0) == ROUND_MOD_EXPR))\n+\t      || TREE_CODE (arg0) == ROUND_MOD_EXPR)\n+\t  && integer_pow2p (TREE_OPERAND (arg0, 1)))\n \t{\n \t  tree newtype = unsigned_type (TREE_TYPE (arg0));\n \t  tree newmod = build (TREE_CODE (arg0), newtype,\n@@ -4246,7 +4243,6 @@ fold (expr)\n \n \t  return build (code, type, newmod, convert (newtype, arg1));\n \t}\n-#endif\n \n       /* If this is an NE comparison of zero with an AND of one, remove the\n \t comparison since the AND will give the correct value.  */"}]}