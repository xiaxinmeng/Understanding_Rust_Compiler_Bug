{"sha": "8241a41f2a3055cf85818dea5502a668d0881be8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI0MWE0MWYyYTMwNTVjZjg1ODE4ZGVhNTUwMmE2NjhkMDg4MWJlOA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-04T22:03:09Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-05-04T22:03:09Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r887", "tree": {"sha": "1bae2f02e6647a064cdb587786fb8cadad289c65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1bae2f02e6647a064cdb587786fb8cadad289c65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8241a41f2a3055cf85818dea5502a668d0881be8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8241a41f2a3055cf85818dea5502a668d0881be8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8241a41f2a3055cf85818dea5502a668d0881be8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8241a41f2a3055cf85818dea5502a668d0881be8/comments", "author": null, "committer": null, "parents": [{"sha": "c35827592d56dc7ffe2a5426536f9132c94afa62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c35827592d56dc7ffe2a5426536f9132c94afa62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c35827592d56dc7ffe2a5426536f9132c94afa62"}], "stats": {"total": 52, "additions": 37, "deletions": 15}, "files": [{"sha": "d176142c0f0d5beb74ae995ef73c201de75259c2", "filename": "gcc/protoize.c", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8241a41f2a3055cf85818dea5502a668d0881be8/gcc%2Fprotoize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8241a41f2a3055cf85818dea5502a668d0881be8/gcc%2Fprotoize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprotoize.c?ref=8241a41f2a3055cf85818dea5502a668d0881be8", "patch": "@@ -34,6 +34,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #ifndef __STDC__\n #define const\n+#define volatile\n #endif\n \n #include \"config.h\"\n@@ -147,8 +148,10 @@ extern int atoi ();\n extern int puts ();\n extern int fputs ();\n extern int fputc ();\n-#if 0 /* Causes trouble on some systems that define setjmp as a macro.  */\n+#ifndef setjmp\n extern int setjmp ();\n+#endif\n+#ifndef longjmp\n extern void longjmp ();\n #endif\n \n@@ -267,7 +270,7 @@ static const int hash_mask = (HASH_TABLE_SIZE - 1);\n #define LOCAL_INCLUDE_DIR \"/usr/local/include\"\n #endif\n \n-struct default_include { char *fname; int cplusplus; } include_defaults[]\n+struct default_include { const char *fname; int cplusplus; } include_defaults[]\n #ifdef INCLUDE_DEFAULTS\n   = INCLUDE_DEFAULTS;\n #else\n@@ -445,7 +448,7 @@ static int errors = 0;\n \n /* File name to use for running gcc.  Allows GCC 2 to be named\n    something other than gcc.  */\n-static char *compiler_file_name = \"gcc\";\n+static const char *compiler_file_name = \"gcc\";\n \n static int version_flag = 0;\t\t/* Print our version number.  */\n static int quiet_flag = 0;\t\t/* Don't print messages normally.  */\n@@ -643,13 +646,28 @@ xfree (p)\n static char *\n savestring (input, size)\n      const char *input;\n-     int size;\n+     unsigned size;\n {\n   char *output = (char *) xmalloc (size + 1);\n   strcpy (output, input);\n   return output;\n }\n \n+/* Make a copy of the concatenation of INPUT1 and INPUT2.  */\n+\n+static char *\n+savestring2 (input1, size1, input2, size2)\n+     const char *input1;\n+     unsigned size1;\n+     const char *input2;\n+     unsigned size2;\n+{\n+  char *output = (char *) xmalloc (size1 + size2 + 1);\n+  strcpy (output, input1);\n+  strcpy (&output[size1], input2);\n+  return output;\n+}\n+\n /* More 'friendly' abort that prints the line and file.\n    config.h can #define abort fancy_abort if you like that sort of thing.  */\n \n@@ -969,7 +987,7 @@ file_excluded_p (name)\n static struct string_list *\n string_list_cons (string, rest)\n      char *string;\n-     struct string_list *rest;      \n+     struct string_list *rest;\n {\n   struct string_list *temp\n     = (struct string_list *) xmalloc (sizeof (struct string_list));\n@@ -1363,12 +1381,13 @@ shortpath (cwd, filename)\n    we create a new file_info record to go with the filename, and we initialize\n    that record with some reasonable values.  */\n \n+/* FILENAME was const, but that causes a warning on AIX when calling stat.\n+   That is probably a bug in AIX, but might as well avoid the warning.  */\n+\n static file_info *\n find_file (filename, do_not_stat)\n      char *filename;\n      int do_not_stat;\n-/* FILENAME was const, but that causes a warning on AIX when calling stat.\n-   That is probably a bug in AIX, but might as well avoid the warning.  */\n {\n   hash_table_entry *hash_entry_p;\n \n@@ -1891,8 +1910,8 @@ munge_compile_params (params_list)\n {\n   /* Build up the contents in a temporary vector\n      that is so big that to has to be big enough.  */\n-  char **temp_params\n-    = (char **) alloca ((strlen (params_list) + 6) * sizeof (char *));\n+  const char **temp_params\n+    = (const char **) alloca ((strlen (params_list) + 6) * sizeof (char *));\n   int param_count = 0;\n   const char *param;\n \n@@ -1971,9 +1990,10 @@ gen_aux_info_file (base_filename)\n   compile_params[input_file_name_index] = shortpath (NULL, base_filename);\n   /* Add .X to source file name to get aux-info file name.  */\n   compile_params[aux_info_file_name_index]\n-    = dupnstr (compile_params[input_file_name_index],\n-\t       (2 + strlen (compile_params[input_file_name_index])));\n-  strcat (compile_params[aux_info_file_name_index], \".X\");\n+    = savestring2 (compile_params[input_file_name_index],\n+\t           strlen (compile_params[input_file_name_index]),\n+\t\t   \".X\",\n+\t\t   2);\n \n   if (!quiet_flag)\n     fprintf (stderr, \"%s: compiling `%s'\\n\",\n@@ -2543,10 +2563,12 @@ find_extern_def (head, user)\n \t\t\t shortpath (NULL, file), user->line,\n \t\t\t needed+7);\t/* Don't print \"extern \" */\n               }\n+#if 0\n             else\n               fprintf (stderr, \"%s: %d: warning: no extern definition for `%s'\\n\",\n \t\t       shortpath (NULL, file), user->line,\n \t\t       user->hash_entry->symbol);\n+#endif\n         }\n     }\n   return extern_def_p;\n@@ -2933,7 +2955,7 @@ other_variable_style_function (ansi_header)\n static void\n edit_fn_declaration (def_dec_p, clean_text_p)\n      const def_dec_info *def_dec_p;\n-     const char *VOLATILE clean_text_p;\n+     const char *volatile clean_text_p;\n {\n   const char *start_formals;\n   const char *end_formals;\n@@ -3948,7 +3970,7 @@ scan_for_missed_items (file_p)\n \t\t    /* If we make it here, then we did not know about this\n \t\t       function definition.  */\n \n-\t\t    fprintf (stderr, \"%s: %d: warning: `%s' was #if 0\\n\",\n+\t\t    fprintf (stderr, \"%s: %d: warning: `%s' excluded by preprocessing\\n\",\n \t\t\t     shortpath (NULL, file_p->hash_entry->symbol),\n \t\t\t     identify_lineno (id_start), func_name);\n \t\t    fprintf (stderr, \"%s: function definition not converted\\n\",\n@@ -4010,7 +4032,7 @@ edit_file (hp)\n           && !in_system_include_dir (convert_filename)\n #endif /* defined (UNPROTOIZE) */\n           )\n-        fprintf (stderr, \"%s: file `%s' not converted\\n\",\n+        fprintf (stderr, \"%s: `%s' not converted\\n\",\n \t\t pname, shortpath (NULL, convert_filename));\n       return;\n     }"}]}