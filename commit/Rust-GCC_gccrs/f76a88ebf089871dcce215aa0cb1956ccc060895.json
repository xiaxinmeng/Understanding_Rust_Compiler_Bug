{"sha": "f76a88ebf089871dcce215aa0cb1956ccc060895", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc2YTg4ZWJmMDg5ODcxZGNjZTIxNWFhMGNiMTk1NmNjYzA2MDg5NQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-14T02:17:11Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-02-17T07:20:36Z"}, "message": "analyzer: fix ICEs in region_model::get_lvalue_1 [PR 93388]\n\nThere have been various ICEs with -fanalyzer involving unhandled tree\ncodes in region_model::get_lvalue_1; PR analyzer/93388 reports various\nothers e.g. for IMAGPART_EXPR, REALPART_EXPR, and VIEW_CONVERT_EXPR seen\nwhen running the testsuite with -fanalyzer forcibly enabled.\n\nWhilst we could implement lvalue-handling in the region model for every\ntree code, for some of these we're straying far from my primary goal for\nGCC 10 of implementing a double-free checker for C.\n\nThis patch implements a fallback for unimplemented tree codes: create a\ndummy region, but mark the new state as being invalid, and stop\nexploring state along this path.  It also implements VIEW_CONVERT_EXPR.\n\nDoing so fixes the ICEs, whilst effectively turning off the analyzer\nalong code paths that use such tree codes.  Hopefully this compromise\nis sensible for GCC 10.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93388\n\t* engine.cc (impl_region_model_context::on_unknown_tree_code):\n\tNew.\n\t(exploded_graph::get_or_create_node): Reject invalid states.\n\t* exploded-graph.h\n\t(impl_region_model_context::on_unknown_tree_code): New decl.\n\t(point_and_state::point_and_state): Assert that the state is\n\tvalid.\n\t* program-state.cc (program_state::program_state): Initialize\n\tm_valid to true.\n\t(program_state::operator=): Copy m_valid.\n\t(program_state::program_state): Likewise for move constructor.\n\t(program_state::print): Print m_valid.\n\t(program_state::dump_to_pp): Likewise.\n\t* program-state.h (program_state::m_valid): New field.\n\t* region-model.cc (region_model::get_lvalue_1): Implement the\n\tdefault case by returning a new symbolic region and calling\n\tthe context's on_unknown_tree_code, rather than issuing an\n\tinternal_error.  Implement VIEW_CONVERT_EXPR.\n\t* region-model.h (region_model_context::on_unknown_tree_code): New\n\tvfunc.\n\t(test_region_model_context::on_unknown_tree_code): New.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93388\n\t* gcc.dg/analyzer/torture/20060625-1.c: New test.\n\t* gcc.dg/analyzer/torture/pr51628-30.c: New test.\n\t* gcc.dg/analyzer/torture/pr59037.c: New test.", "tree": {"sha": "4f8cb05de7bf355d548dc7ce2e8504730058c6bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f8cb05de7bf355d548dc7ce2e8504730058c6bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f76a88ebf089871dcce215aa0cb1956ccc060895", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76a88ebf089871dcce215aa0cb1956ccc060895", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f76a88ebf089871dcce215aa0cb1956ccc060895", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f76a88ebf089871dcce215aa0cb1956ccc060895/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0993ad65cc4e462223e9337d9b2d3b82a887c6c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0993ad65cc4e462223e9337d9b2d3b82a887c6c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0993ad65cc4e462223e9337d9b2d3b82a887c6c8"}], "stats": {"total": 132, "additions": 127, "deletions": 5}, "files": [{"sha": "d669c989ac119f20824a098ea40e249a331ab691", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=f76a88ebf089871dcce215aa0cb1956ccc060895", "patch": "@@ -1,3 +1,28 @@\n+2020-02-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93388\n+\t* engine.cc (impl_region_model_context::on_unknown_tree_code):\n+\tNew.\n+\t(exploded_graph::get_or_create_node): Reject invalid states.\n+\t* exploded-graph.h\n+\t(impl_region_model_context::on_unknown_tree_code): New decl.\n+\t(point_and_state::point_and_state): Assert that the state is\n+\tvalid.\n+\t* program-state.cc (program_state::program_state): Initialize\n+\tm_valid to true.\n+\t(program_state::operator=): Copy m_valid.\n+\t(program_state::program_state): Likewise for move constructor.\n+\t(program_state::print): Print m_valid.\n+\t(program_state::dump_to_pp): Likewise.\n+\t* program-state.h (program_state::m_valid): New field.\n+\t* region-model.cc (region_model::get_lvalue_1): Implement the\n+\tdefault case by returning a new symbolic region and calling\n+\tthe context's on_unknown_tree_code, rather than issuing an\n+\tinternal_error.  Implement VIEW_CONVERT_EXPR.\n+\t* region-model.h (region_model_context::on_unknown_tree_code): New\n+\tvfunc.\n+\t(test_region_model_context::on_unknown_tree_code): New.\n+\n 2020-02-17  David Malcolm  <dmalcolm@redhat.com>\n \n \t* sm-malloc.cc (malloc_diagnostic::describe_state_change): For"}, {"sha": "cd4ffe55dc5f8622732890c3159af2371b9b441a", "filename": "gcc/analyzer/engine.cc", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Fanalyzer%2Fengine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Fanalyzer%2Fengine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fengine.cc?ref=f76a88ebf089871dcce215aa0cb1956ccc060895", "patch": "@@ -684,6 +684,25 @@ impl_region_model_context::on_phi (const gphi *phi, tree rhs)\n     }\n }\n \n+/* Implementation of region_model_context::on_unknown_tree_code vfunc.\n+   Mark the new state as being invalid for further exploration.\n+   TODO(stage1): introduce a warning for when this occurs.  */\n+\n+void\n+impl_region_model_context::on_unknown_tree_code (path_var pv,\n+\t\t\t\t\t\t const dump_location_t &loc)\n+{\n+  logger * const logger = get_logger ();\n+  if (logger)\n+    logger->log (\"unhandled tree code: %qs in %qs at %s:%i\",\n+\t\t get_tree_code_name (TREE_CODE (pv.m_tree)),\n+\t\t loc.get_impl_location ().m_function,\n+\t\t loc.get_impl_location ().m_file,\n+\t\t loc.get_impl_location ().m_line);\n+  if (m_new_state)\n+    m_new_state->m_valid = false;\n+}\n+\n /* struct point_and_state.  */\n \n /* Assert that this object is sane.  */\n@@ -1845,6 +1864,15 @@ exploded_graph::get_or_create_node (const program_point &point,\n       logger->end_log_line ();\n     }\n \n+  /* Stop exploring paths for which we don't know how to effectively\n+     model the state.  */\n+  if (!state.m_valid)\n+    {\n+      if (logger)\n+\tlogger->log (\"invalid state; not creating node\");\n+      return NULL;\n+    }\n+\n   auto_cfun sentinel (point.get_function ());\n \n   state.validate (get_ext_state ());"}, {"sha": "614c37ce9afb74a86dd082d81eff1da3f371e203", "filename": "gcc/analyzer/exploded-graph.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Fanalyzer%2Fexploded-graph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Fanalyzer%2Fexploded-graph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fexploded-graph.h?ref=f76a88ebf089871dcce215aa0cb1956ccc060895", "patch": "@@ -76,6 +76,9 @@ class impl_region_model_context : public region_model_context\n \n   void on_phi (const gphi *phi, tree rhs) FINAL OVERRIDE;\n \n+  void on_unknown_tree_code (path_var pv,\n+\t\t\t     const dump_location_t &loc) FINAL OVERRIDE;\n+\n   exploded_graph *m_eg;\n   log_user m_logger;\n   const exploded_node *m_enode_for_diag;\n@@ -100,6 +103,9 @@ class point_and_state\n     m_state (state),\n     m_hash (m_point.hash () ^ m_state.hash ())\n   {\n+    /* We shouldn't be building point_and_states and thus exploded_nodes\n+       for states that aren't valid.  */\n+    gcc_assert (state.m_valid);\n   }\n \n   hashval_t hash () const"}, {"sha": "fb96e3c976bba3f4f0ad11bdcba27c2f124a1b8f", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=f76a88ebf089871dcce215aa0cb1956ccc060895", "patch": "@@ -573,7 +573,8 @@ sm_state_map::validate (const state_machine &sm,\n \n program_state::program_state (const extrinsic_state &ext_state)\n : m_region_model (new region_model ()),\n-  m_checker_states (ext_state.get_num_checkers ())\n+  m_checker_states (ext_state.get_num_checkers ()),\n+  m_valid (true)\n {\n   int num_states = ext_state.get_num_checkers ();\n   for (int i = 0; i < num_states; i++)\n@@ -584,7 +585,8 @@ program_state::program_state (const extrinsic_state &ext_state)\n \n program_state::program_state (const program_state &other)\n : m_region_model (new region_model (*other.m_region_model)),\n-  m_checker_states (other.m_checker_states.length ())\n+  m_checker_states (other.m_checker_states.length ()),\n+  m_valid (true)\n {\n   int i;\n   sm_state_map *smap;\n@@ -610,6 +612,8 @@ program_state::operator= (const program_state &other)\n   FOR_EACH_VEC_ELT (other.m_checker_states, i, smap)\n     m_checker_states.quick_push (smap->clone ());\n \n+  m_valid = other.m_valid;\n+\n   return *this;\n }\n \n@@ -626,6 +630,8 @@ program_state::program_state (program_state &&other)\n   FOR_EACH_VEC_ELT (other.m_checker_states, i, smap)\n     m_checker_states.quick_push (smap);\n   other.m_checker_states.truncate (0);\n+\n+  m_valid = other.m_valid;\n }\n #endif\n \n@@ -693,6 +699,11 @@ program_state::print (const extrinsic_state &ext_state,\n \t  pp_newline (pp);\n \t}\n     }\n+  if (!m_valid)\n+    {\n+      pp_printf (pp, \"invalid state\");\n+      pp_newline (pp);\n+    }\n }\n \n /* Dump a multiline representation of this state to PP.  */\n@@ -716,6 +727,12 @@ program_state::dump_to_pp (const extrinsic_state &ext_state,\n \t  pp_newline (pp);\n \t}\n     }\n+\n+  if (!m_valid)\n+    {\n+      pp_printf (pp, \"invalid state\");\n+      pp_newline (pp);\n+    }\n }\n \n /* Dump a multiline representation of this state to OUTF.  */"}, {"sha": "80df649f565378064e8c59b92f45ffab79502d2f", "filename": "gcc/analyzer/program-state.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Fanalyzer%2Fprogram-state.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Fanalyzer%2Fprogram-state.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.h?ref=f76a88ebf089871dcce215aa0cb1956ccc060895", "patch": "@@ -286,6 +286,11 @@ class program_state\n   /* TODO: lose the pointer here (const-correctness issues?).  */\n   region_model *m_region_model;\n   auto_delete_vec<sm_state_map> m_checker_states;\n+\n+  /* If false, then don't attempt to explore further states along this path.\n+     For use in \"handling\" lvalues for tree codes we haven't yet\n+     implemented.  */\n+  bool m_valid;\n };\n \n /* An abstract base class for use with for_each_state_change.  */"}, {"sha": "b67660cf864b776875fbe8666234fe8abb573624", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=f76a88ebf089871dcce215aa0cb1956ccc060895", "patch": "@@ -4641,9 +4641,19 @@ region_model::get_lvalue_1 (path_var pv, region_model_context *ctxt)\n   switch (TREE_CODE (expr))\n     {\n     default:\n-      internal_error (\"unhandled tree code in region_model::get_lvalue_1: %qs\",\n-\t\t      get_tree_code_name (TREE_CODE (expr)));\n-      gcc_unreachable ();\n+      {\n+\t/* If we see a tree code we we don't know how to handle, rather than\n+\t   ICE or generate bogus results, create a dummy region, and notify\n+\t   CTXT so that it can mark the new state as being not properly\n+\t   modelled.  The exploded graph can then stop exploring that path,\n+\t   since any diagnostics we might issue will have questionable\n+\t   validity.  */\n+\tregion_id new_rid\n+\t  = add_region (new symbolic_region (m_root_rid, NULL_TREE, false));\n+\tctxt->on_unknown_tree_code (pv, dump_location_t ());\n+\treturn new_rid;\n+      }\n+      break;\n \n     case ARRAY_REF:\n       {\n@@ -4750,6 +4760,13 @@ region_model::get_lvalue_1 (path_var pv, region_model_context *ctxt)\n \treturn cst_rid;\n       }\n       break;\n+\n+    case VIEW_CONVERT_EXPR:\n+      {\n+\ttree obj = TREE_OPERAND (expr, 0);\n+\treturn get_or_create_view (get_lvalue (obj, ctxt), TREE_TYPE (expr));\n+      };\n+      break;\n     }\n }\n "}, {"sha": "dc56d64a43bb6f1a408265884245ed9092c8ba97", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=f76a88ebf089871dcce215aa0cb1956ccc060895", "patch": "@@ -1937,6 +1937,11 @@ class region_model_context\n   /* Hooks for clients to be notified when a phi node is handled,\n      where RHS is the pertinent argument.  */\n   virtual void on_phi (const gphi *phi, tree rhs) = 0;\n+\n+  /* Hooks for clients to be notified when the region model doesn't\n+     know how to handle the tree code of PV at LOC.  */\n+  virtual void on_unknown_tree_code (path_var pv,\n+\t\t\t\t     const dump_location_t &loc) = 0;\n };\n \n /* A bundle of data for use when attempting to merge two region_model\n@@ -2118,6 +2123,13 @@ class test_region_model_context : public region_model_context\n   {\n   }\n \n+  void on_unknown_tree_code (path_var pv, const dump_location_t &)\n+    FINAL OVERRIDE\n+  {\n+    internal_error (\"unhandled tree code: %qs\",\n+\t\t    get_tree_code_name (TREE_CODE (pv.m_tree)));\n+  }\n+\n private:\n   /* Implicitly delete any diagnostics in the dtor.  */\n   auto_delete_vec<pending_diagnostic> m_diagnostics;"}, {"sha": "6c34e0bbe36a865d11befd0b3bbc7799b03084dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f76a88ebf089871dcce215aa0cb1956ccc060895", "patch": "@@ -1,3 +1,10 @@\n+2020-02-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93388\n+\t* gcc.dg/analyzer/torture/20060625-1.c: New test.\n+\t* gcc.dg/analyzer/torture/pr51628-30.c: New test.\n+\t* gcc.dg/analyzer/torture/pr59037.c: New test.\n+\n 2020-02-17  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/analyzer/malloc-1.c (test_48): New."}, {"sha": "2657a925a7aec1656c1d45383b8dbf2f2170a075", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/20060625-1.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2F20060625-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2F20060625-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2F20060625-1.c?ref=f76a88ebf089871dcce215aa0cb1956ccc060895", "patch": "@@ -0,0 +1 @@\n+#include \"../../../gcc.c-torture/compile/20060625-1.c\""}, {"sha": "4513e0f890c9d5498f1a2c8a7f54c95c12e267b2", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/pr51628-30.c", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr51628-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr51628-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr51628-30.c?ref=f76a88ebf089871dcce215aa0cb1956ccc060895", "patch": "@@ -0,0 +1,3 @@\n+/* { dg-additional-options \"-Wno-address-of-packed-member\" } */\n+\n+#include \"../../../c-c++-common/pr51628-30.c\""}, {"sha": "d01aaec8eea5f78b2ad5c034b8749f09df4e859f", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/pr59037.c", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr59037.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f76a88ebf089871dcce215aa0cb1956ccc060895/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr59037.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr59037.c?ref=f76a88ebf089871dcce215aa0cb1956ccc060895", "patch": "@@ -0,0 +1 @@\n+#include \"../../../c-c++-common/pr59037.c\""}]}