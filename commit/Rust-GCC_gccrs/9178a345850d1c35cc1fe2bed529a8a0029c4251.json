{"sha": "9178a345850d1c35cc1fe2bed529a8a0029c4251", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE3OGEzNDU4NTBkMWMzNWNjMWZlMmJlZDUyOWE4YTAwMjljNDI1MQ==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2012-05-04T08:05:52Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2012-05-04T08:05:52Z"}, "message": "collect2.c (may_unlink_output_file): New global.\n\n        * collect2.c (may_unlink_output_file): New global.\n        (maybe_unlink): Honor it.\n        * collect2.h: Add extern for it.\n        * tlink.c (do_tlink): Set it to true if the link succeeded.\n\nFrom-SVN: r187148", "tree": {"sha": "9b72ad775413c2a0a25e1d2594e350d5480b8620", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b72ad775413c2a0a25e1d2594e350d5480b8620"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9178a345850d1c35cc1fe2bed529a8a0029c4251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9178a345850d1c35cc1fe2bed529a8a0029c4251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9178a345850d1c35cc1fe2bed529a8a0029c4251", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9178a345850d1c35cc1fe2bed529a8a0029c4251/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b50ff8bbb379d7be46b3e516e02e4c9ed08d3c14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b50ff8bbb379d7be46b3e516e02e4c9ed08d3c14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b50ff8bbb379d7be46b3e516e02e4c9ed08d3c14"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "da6dede393c3cd48298aaffcb466ac8b24c173bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9178a345850d1c35cc1fe2bed529a8a0029c4251/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9178a345850d1c35cc1fe2bed529a8a0029c4251/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9178a345850d1c35cc1fe2bed529a8a0029c4251", "patch": "@@ -1,3 +1,10 @@\n+2012-05-04  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* collect2.c (may_unlink_output_file): New global.\n+\t(maybe_unlink): Honor it.\n+\t* collect2.h: Add extern for it.\n+\t* tlink.c (do_tlink): Set it to true if the link succeeded.\n+\n 2012-05-04  Olivier Hainque  <hainque@adacore.com>\n \n \t* gcc.c (eval_spec_function): Finalize/restore the current string"}, {"sha": "d0166a5b5af351ebe1addde91c6f4061c602568f", "filename": "gcc/collect2.c", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9178a345850d1c35cc1fe2bed529a8a0029c4251/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9178a345850d1c35cc1fe2bed529a8a0029c4251/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=9178a345850d1c35cc1fe2bed529a8a0029c4251", "patch": "@@ -237,6 +237,12 @@ static const char *target_system_root = TARGET_SYSTEM_ROOT;\n static const char *target_system_root = \"\";\n #endif\n \n+/* Whether we may unlink the output file, which should be set as soon as we\n+   know we have successfully produced it.  This is typically useful to prevent\n+   blindly attempting to unlink a read-only output that the target linker\n+   would leave untouched.  */\n+bool may_unlink_output_file = false;\n+\n /* Structure to hold all the directories in which to search for files to\n    execute.  */\n \n@@ -2095,15 +2101,22 @@ fork_execute (const char *prog, char **argv)\n   do_wait (prog, pex);\n }\n \f\n-/* Unlink a file unless we are debugging.  */\n+/* Unlink FILE unless we are debugging or this is the output_file\n+   and we may not unlink it.  */\n \n static void\n maybe_unlink (const char *file)\n {\n-  if (!debug)\n-    unlink_if_ordinary (file);\n-  else\n-    notice (\"[Leaving %s]\\n\", file);\n+  if (debug)\n+    {\n+      notice (\"[Leaving %s]\\n\", file);\n+      return;\n+    }\n+\n+  if (file == output_file && !may_unlink_output_file)\n+    return;\n+\n+  unlink_if_ordinary (file);\n }\n \n /* Call maybe_unlink on the NULL-terminated list, FILE_LIST.  */"}, {"sha": "d55198dce2363c074bffa3a68d3bfb0c9cd5a5a7", "filename": "gcc/collect2.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9178a345850d1c35cc1fe2bed529a8a0029c4251/gcc%2Fcollect2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9178a345850d1c35cc1fe2bed529a8a0029c4251/gcc%2Fcollect2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.h?ref=9178a345850d1c35cc1fe2bed529a8a0029c4251", "patch": "@@ -40,6 +40,7 @@ extern const char *c_file_name;\n extern struct obstack temporary_obstack;\n extern char *temporary_firstobj;\n extern bool vflag, debug;\n+extern bool may_unlink_output_file;\n \n extern void notice_translated (const char *, ...) ATTRIBUTE_PRINTF_1;\n extern void notice (const char *, ...) ATTRIBUTE_PRINTF_1;"}, {"sha": "c4c6afc0148b591994965becd5c62338216cc88d", "filename": "gcc/tlink.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9178a345850d1c35cc1fe2bed529a8a0029c4251/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9178a345850d1c35cc1fe2bed529a8a0029c4251/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=9178a345850d1c35cc1fe2bed529a8a0029c4251", "patch": "@@ -859,4 +859,10 @@ do_tlink (char **ld_argv, char **object_lst ATTRIBUTE_UNUSED)\n       error (\"ld returned %d exit status\", exit);\n       collect_exit (exit);\n     }\n+  else\n+    {\n+      /* We have just successfully produced an output file, so assume that we\n+\t may unlink it if need be for now on.  */ \n+      may_unlink_output_file = true;\n+    }\n }"}]}