{"sha": "6d67b4c74da3e8a09925f5821b6e9df3352f9934", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ2N2I0Yzc0ZGEzZThhMDk5MjVmNTgyMWI2ZTlkZjMzNTJmOTkzNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-08-15T11:39:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-08-15T11:39:52Z"}, "message": "double-int.h (double_int::from_unsigned): Rename to ...\n\n2012-08-15  Richard Guenther  <rguenther@suse.de>\n\n\t* double-int.h (double_int::from_unsigned): Rename to ...\n\t(double_int::from_uhwi): ... this.\n\t(double_int::from_signed): Rename to ...\n\t(double_int::from_shwi): ... this.\n\t(double_int::to_signed): Rename to ...\n\t(double_int::to_shwi): ... this.\n\t(double_int::to_unsigned): Rename to ...\n\t(double_int::to_uhwi): ... this.\n\t(double_int::fits_unsigned): Rename to ...\n\t(double_int::fits_uhwi): ... this.\n\t(double_int::fits_signed): Rename to ...\n\t(double_int::fits_shwi): ... this.\n\t(double_int::fits): Rename to ...\n\t(double_int::fits_hwi): ... this.\n\t* double-int.c: Likewise.\n\nFrom-SVN: r190410", "tree": {"sha": "18e509006bd9fc9d9db00f9058fc2e4c3bad8377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18e509006bd9fc9d9db00f9058fc2e4c3bad8377"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d67b4c74da3e8a09925f5821b6e9df3352f9934", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d67b4c74da3e8a09925f5821b6e9df3352f9934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d67b4c74da3e8a09925f5821b6e9df3352f9934", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d67b4c74da3e8a09925f5821b6e9df3352f9934/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "63ef63bfad608eae22d588156ce1150c993c9bd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63ef63bfad608eae22d588156ce1150c993c9bd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63ef63bfad608eae22d588156ce1150c993c9bd5"}], "stats": {"total": 74, "additions": 46, "deletions": 28}, "files": [{"sha": "177b5c6725ec8e9d6e97f72dfc60175a67f25c39", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d67b4c74da3e8a09925f5821b6e9df3352f9934/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d67b4c74da3e8a09925f5821b6e9df3352f9934/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d67b4c74da3e8a09925f5821b6e9df3352f9934", "patch": "@@ -1,3 +1,21 @@\n+2012-08-15  Richard Guenther  <rguenther@suse.de>\n+\n+\t* double-int.h (double_int::from_unsigned): Rename to ...\n+\t(double_int::from_uhwi): ... this.\n+\t(double_int::from_signed): Rename to ...\n+\t(double_int::from_shwi): ... this.\n+\t(double_int::to_signed): Rename to ...\n+\t(double_int::to_shwi): ... this.\n+\t(double_int::to_unsigned): Rename to ...\n+\t(double_int::to_uhwi): ... this.\n+\t(double_int::fits_unsigned): Rename to ...\n+\t(double_int::fits_uhwi): ... this.\n+\t(double_int::fits_signed): Rename to ...\n+\t(double_int::fits_shwi): ... this.\n+\t(double_int::fits): Rename to ...\n+\t(double_int::fits_hwi): ... this.\n+\t* double-int.c: Likewise.\n+\n 2012-08-15  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* timevar.def (TV_VARPOOL, TV_WHOPR_WPA_LTRANS_EXEC, TV_LIFE,"}, {"sha": "3a22d15f08cd72390c7cb72ee80665e709f86d6b", "filename": "gcc/double-int.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d67b4c74da3e8a09925f5821b6e9df3352f9934/gcc%2Fdouble-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d67b4c74da3e8a09925f5821b6e9df3352f9934/gcc%2Fdouble-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.c?ref=6d67b4c74da3e8a09925f5821b6e9df3352f9934", "patch": "@@ -716,7 +716,7 @@ double_int::sext (unsigned prec) const\n /* Returns true if CST fits in signed HOST_WIDE_INT.  */\n \n bool\n-double_int::fits_signed () const\n+double_int::fits_shwi () const\n {\n   const double_int &cst = *this;\n   if (cst.high == 0)\n@@ -731,12 +731,12 @@ double_int::fits_signed () const\n    unsigned HOST_WIDE_INT if UNS is true.  */\n \n bool\n-double_int::fits (bool uns) const\n+double_int::fits_hwi (bool uns) const\n {\n   if (uns)\n-    return this->fits_unsigned ();\n+    return this->fits_uhwi ();\n   else\n-    return this->fits_signed ();\n+    return this->fits_shwi ();\n }\n \n /* Returns A * B.  */"}, {"sha": "3d9aa2caa9deff76750e0e0b06da7d475c5d3768", "filename": "gcc/double-int.h", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d67b4c74da3e8a09925f5821b6e9df3352f9934/gcc%2Fdouble-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d67b4c74da3e8a09925f5821b6e9df3352f9934/gcc%2Fdouble-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdouble-int.h?ref=6d67b4c74da3e8a09925f5821b6e9df3352f9934", "patch": "@@ -60,8 +60,8 @@ typedef struct double_int\n      Second, the GCC conding conventions prefer explicit conversion,\n      and explicit conversion operators are not available until C++11.  */\n \n-  static double_int from_unsigned (unsigned HOST_WIDE_INT cst);\n-  static double_int from_signed (HOST_WIDE_INT cst);\n+  static double_int from_uhwi (unsigned HOST_WIDE_INT cst);\n+  static double_int from_shwi (HOST_WIDE_INT cst);\n \n   /* No copy assignment operator or destructor to keep the type a POD.  */\n \n@@ -83,14 +83,14 @@ typedef struct double_int\n \n   /* Conversion functions.  */\n \n-  HOST_WIDE_INT to_signed () const;\n-  unsigned HOST_WIDE_INT to_unsigned () const;\n+  HOST_WIDE_INT to_shwi () const;\n+  unsigned HOST_WIDE_INT to_uhwi () const;\n \n   /* Conversion query functions.  */\n \n-  bool fits_unsigned () const;\n-  bool fits_signed () const;\n-  bool fits (bool uns) const;\n+  bool fits_uhwi () const;\n+  bool fits_shwi () const;\n+  bool fits_hwi (bool uns) const;\n \n   /* Attribute query functions.  */\n \n@@ -186,7 +186,7 @@ typedef struct double_int\n    HOST_WIDE_INT are filled with the sign bit.  */\n \n inline\n-double_int double_int::from_signed (HOST_WIDE_INT cst)\n+double_int double_int::from_shwi (HOST_WIDE_INT cst)\n {\n   double_int r;\n   r.low = (unsigned HOST_WIDE_INT) cst;\n@@ -198,25 +198,25 @@ double_int double_int::from_signed (HOST_WIDE_INT cst)\n static inline double_int\n shwi_to_double_int (HOST_WIDE_INT cst)\n {\n-  return double_int::from_signed (cst);\n+  return double_int::from_shwi (cst);\n }\n \n /* Some useful constants.  */\n /* FIXME(crowl): Maybe remove after converting callers?\n    The problem is that a named constant would not be as optimizable,\n    while the functional syntax is more verbose.  */\n \n-#define double_int_minus_one (double_int::from_signed (-1))\n-#define double_int_zero (double_int::from_signed (0))\n-#define double_int_one (double_int::from_signed (1))\n-#define double_int_two (double_int::from_signed (2))\n-#define double_int_ten (double_int::from_signed (10))\n+#define double_int_minus_one (double_int::from_shwi (-1))\n+#define double_int_zero (double_int::from_shwi (0))\n+#define double_int_one (double_int::from_shwi (1))\n+#define double_int_two (double_int::from_shwi (2))\n+#define double_int_ten (double_int::from_shwi (10))\n \n /* Constructs double_int from unsigned integer CST.  The bits over the\n    precision of HOST_WIDE_INT are filled with zeros.  */\n \n inline\n-double_int double_int::from_unsigned (unsigned HOST_WIDE_INT cst)\n+double_int double_int::from_uhwi (unsigned HOST_WIDE_INT cst)\n {\n   double_int r;\n   r.low = cst;\n@@ -228,7 +228,7 @@ double_int double_int::from_unsigned (unsigned HOST_WIDE_INT cst)\n static inline double_int\n uhwi_to_double_int (unsigned HOST_WIDE_INT cst)\n {\n-  return double_int::from_unsigned (cst);\n+  return double_int::from_uhwi (cst);\n }\n \n inline double_int &\n@@ -270,7 +270,7 @@ double_int::operator -= (double_int b)\n    double_int::fits_signed.  */\n \n inline HOST_WIDE_INT\n-double_int::to_signed () const\n+double_int::to_shwi () const\n {\n   return (HOST_WIDE_INT) low;\n }\n@@ -279,14 +279,14 @@ double_int::to_signed () const\n static inline HOST_WIDE_INT\n double_int_to_shwi (double_int cst)\n {\n-  return cst.to_signed ();\n+  return cst.to_shwi ();\n }\n \n /* Returns value of CST as an unsigned number.  CST must satisfy\n    double_int::fits_unsigned.  */\n \n inline unsigned HOST_WIDE_INT\n-double_int::to_unsigned () const\n+double_int::to_uhwi () const\n {\n   return low;\n }\n@@ -295,13 +295,13 @@ double_int::to_unsigned () const\n static inline unsigned HOST_WIDE_INT\n double_int_to_uhwi (double_int cst)\n {\n-  return cst.to_unsigned ();\n+  return cst.to_uhwi ();\n }\n \n /* Returns true if CST fits in unsigned HOST_WIDE_INT.  */\n \n inline bool\n-double_int::fits_unsigned () const\n+double_int::fits_uhwi () const\n {\n   return high == 0;\n }\n@@ -310,7 +310,7 @@ double_int::fits_unsigned () const\n static inline bool\n double_int_fits_in_uhwi_p (double_int cst)\n {\n-  return cst.fits_unsigned ();\n+  return cst.fits_uhwi ();\n }\n \n /* Returns true if CST fits in signed HOST_WIDE_INT.  */\n@@ -319,14 +319,14 @@ double_int_fits_in_uhwi_p (double_int cst)\n inline bool\n double_int_fits_in_shwi_p (double_int cst)\n {\n-  return cst.fits_signed ();\n+  return cst.fits_shwi ();\n }\n \n /* FIXME(crowl): Remove after converting callers.  */\n inline bool\n double_int_fits_in_hwi_p (double_int cst, bool uns)\n {\n-  return cst.fits (uns);\n+  return cst.fits_hwi (uns);\n }\n \n /* The following operations perform arithmetics modulo 2^precision,"}]}