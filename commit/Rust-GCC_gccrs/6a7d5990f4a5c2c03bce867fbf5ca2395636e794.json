{"sha": "6a7d5990f4a5c2c03bce867fbf5ca2395636e794", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE3ZDU5OTBmNGE1YzJjMDNiY2U4NjdmYmY1Y2EyMzk1NjM2ZTc5NA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-03-17T22:26:25Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-03-17T22:26:25Z"}, "message": "pa.c (post_cint_operand): New function.\n\n\t* pa.c (post_cint_operand): New function.\n\t(hppa-can_use_return_insn_p): Newfunction.\n\nFrom-SVN: r3771", "tree": {"sha": "9c9e7bf01b4d0d494b886121e885c8cc7ab05020", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c9e7bf01b4d0d494b886121e885c8cc7ab05020"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a7d5990f4a5c2c03bce867fbf5ca2395636e794", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a7d5990f4a5c2c03bce867fbf5ca2395636e794", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a7d5990f4a5c2c03bce867fbf5ca2395636e794", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a7d5990f4a5c2c03bce867fbf5ca2395636e794/comments", "author": null, "committer": null, "parents": [{"sha": "d1399bd0ff3893bb9ebea7b977c7f3ec91b728b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1399bd0ff3893bb9ebea7b977c7f3ec91b728b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1399bd0ff3893bb9ebea7b977c7f3ec91b728b0"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "b99be99e36e60ddef147df01582059332da9d81d", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7d5990f4a5c2c03bce867fbf5ca2395636e794/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7d5990f4a5c2c03bce867fbf5ca2395636e794/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=6a7d5990f4a5c2c03bce867fbf5ca2395636e794", "patch": "@@ -301,6 +301,8 @@ arith11_operand (op, mode)\n \t  || (GET_CODE (op) == CONST_INT && INT_11_BITS (op)));\n }\n \n+/* A constant integer suitable for use in a PRE_MODIFY memory \n+   reference.  */\n int\n pre_cint_operand (op, mode)\n      rtx op;\n@@ -310,6 +312,17 @@ pre_cint_operand (op, mode)\n \t  && INTVAL (op) >= -0x2000 && INTVAL (op) < 0x10);\n }\n \n+/* A constant integer suitable for use in a POST_MODIFY memory \n+   reference.  */\n+int\n+post_cint_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode;\n+{\n+  return (GET_CODE (op) == CONST_INT\n+\t  && INTVAL (op) < 0x2000 && INTVAL (op) >= -0x10);\n+}\n+\n int\n arith_double_operand (op, mode)\n      rtx op;\n@@ -2063,6 +2076,23 @@ eligible_for_epilogue_delay (trial, slot)\n   return (get_attr_in_branch_delay (trial) == IN_BRANCH_DELAY_TRUE);\n }\n \n+/* This is only valid once reload has completed because it depends on\n+   knowing exactly how much (if any) frame there is and...\n+\n+   It's only valid if there is no frame marker to de-allocate and...\n+\n+   It's only valid if %r2 hasn't been saved into the caller's frame\n+   (we're not profiling and %r2 isn't live anywhere).  */\n+int\n+hppa_can_use_return_insn_p ()\n+{\n+  return (reload_completed\n+\t  && (compute_frame_size (get_frame_size (), 0) ? 0 : 1)\n+\t  && ! profile_flag\n+\t  && ! regs_ever_live[2]\n+\t  && ! frame_pointer_needed);\n+}\n+\n void\n emit_bcond_fp (code, operand0)\n      enum rtx_code code;"}]}