{"sha": "42d18a47a03df5e4705fab06f3d78f2c0c94ce10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJkMThhNDdhMDNkZjVlNDcwNWZhYjA2ZjNkNzhmMmMwYzk0Y2UxMA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-07-05T23:59:02Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-07-05T23:59:02Z"}, "message": "[multiple changes]\n\n\n\n2000-07-05  brent verner  <brent@rcfile.org>\n\n\t* testsuite/27_io/ifstream_members.cc (test01): Add tests.\n\t* testsuite/27_io/ofstream_members.cc (test01): Add tests.\n\t* config/c_io_libio.cc (__basic_file::open): Unset\n\t~_IO_DELETE_DONT_CLOSE.\n\n2000-07-05  Zack Weinberg  <zack@wolery.cumb.org>\n\n        * bits/gslice_array.h, bits/indirect_array.h, bits/mask_array.h,\n        bits/slice_array.h, bits/std_valarray.h, bits/valarray_meta.h:\n        Do not paste anything after 'operator' keyword.\n\nFrom-SVN: r34877", "tree": {"sha": "462b278e0f92f8b59b288b846426590ebd475381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/462b278e0f92f8b59b288b846426590ebd475381"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42d18a47a03df5e4705fab06f3d78f2c0c94ce10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42d18a47a03df5e4705fab06f3d78f2c0c94ce10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42d18a47a03df5e4705fab06f3d78f2c0c94ce10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/comments", "author": null, "committer": null, "parents": [{"sha": "0267da643718b603b07958ebde15cab7e8b36dc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0267da643718b603b07958ebde15cab7e8b36dc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0267da643718b603b07958ebde15cab7e8b36dc1"}], "stats": {"total": 126, "additions": 91, "deletions": 35}, "files": [{"sha": "665250aca0064330d16c1f5636eb092721fbeb02", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=42d18a47a03df5e4705fab06f3d78f2c0c94ce10", "patch": "@@ -1,3 +1,16 @@\n+2000-07-05  brent verner  <brent@rcfile.org> \n+\n+\t* testsuite/27_io/ifstream_members.cc (test01): Add tests.\n+\t* testsuite/27_io/ofstream_members.cc (test01): Add tests.\n+\t* config/c_io_libio.cc (__basic_file::open): Unset\n+\t~_IO_DELETE_DONT_CLOSE.\n+\n+2000-07-05  Zack Weinberg  <zack@wolery.cumb.org>\n+\t\n+        * bits/gslice_array.h, bits/indirect_array.h, bits/mask_array.h,\n+        bits/slice_array.h, bits/std_valarray.h, bits/valarray_meta.h:\n+        Do not paste anything after 'operator' keyword.\n+\n 2000-07-03  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* bits/std_memory.h: Revert."}, {"sha": "23a1f6d438bb2bd1d8eb8e134f6c020b32e7cc42", "filename": "libstdc++-v3/bits/gslice_array.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/libstdc%2B%2B-v3%2Fbits%2Fgslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/libstdc%2B%2B-v3%2Fbits%2Fgslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fgslice_array.h?ref=42d18a47a03df5e4705fab06f3d78f2c0c94ce10", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- gslice_array class.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -133,15 +133,15 @@ namespace std {\n #define _DEFINE_VALARRAY_OPERATOR(op, name)\t\t\t\t\\\n template<typename _Tp>\t\t\t\t\t\t\t\\\n inline void\t\t\t\t\t\t\t\t\\\n-gslice_array<_Tp>::operator##op##= (const valarray<_Tp>& __v) const\t\\\n+gslice_array<_Tp>::operator op##= (const valarray<_Tp>& __v) const\t\\\n {\t\t\t\t\t\t\t\t\t\\\n     _Array_augmented_##name (_M_array, _Array<size_t>(_M_index),\t\\\n                               _Array<_Tp> (__v), __v.size ());\t\t\\\n }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n template<typename _Tp> template<class E>        \t\t\t\\\n inline void \t\t\t\t\t\t\t\t\\\n-gslice_array<_Tp>::operator##op##= (const _Expr<E, _Tp>& __e) const\t\\\n+gslice_array<_Tp>::operator op##= (const _Expr<E, _Tp>& __e) const\t\\\n {\t\t\t\t\t\t\t\t\t\\\n     _Array_augmented_##name (_M_array, _Array<size_t>(_M_index), __e,\t\\\n                               _M_index.size());\t\t\t\t\\"}, {"sha": "1ad3b911f6b83cee08810153fdf756b8bfbe461c", "filename": "libstdc++-v3/bits/indirect_array.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/libstdc%2B%2B-v3%2Fbits%2Findirect_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/libstdc%2B%2B-v3%2Fbits%2Findirect_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Findirect_array.h?ref=42d18a47a03df5e4705fab06f3d78f2c0c94ce10", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- indirect_array class.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -126,14 +126,14 @@ namespace std {\n #define _DEFINE_VALARRAY_OPERATOR(op, name)\t\t\t\t\\\n template<typename _Tp>\t\t\t\t\t\t\t\\\n inline void\t\t\t\t\t\t\t\t\\\n-indirect_array<_Tp>::operator##op##= (const valarray<_Tp>& __v) const\t\\\n+indirect_array<_Tp>::operator op##= (const valarray<_Tp>& __v) const\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   _Array_augmented_##name (_M_array, _M_index, _Array<_Tp> (__v), _M_sz); \\\n }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n template<typename _Tp> template<class _Dom>\t\t\t\t\\\n inline void\t\t\t\t\t\t\t\t\\\n-indirect_array<_Tp>::operator##op##= (const _Expr<_Dom,_Tp>& __e) const \\\n+indirect_array<_Tp>::operator op##= (const _Expr<_Dom,_Tp>& __e) const \\\n {\t\t\t\t\t\t\t\t\t\\\n   _Array_augmented_##name (_M_array, _M_index, __e, _M_sz);\t\t\\\n }"}, {"sha": "5a15f7a5e9760698b426ffaf424d0e28869d06db", "filename": "libstdc++-v3/bits/mask_array.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/libstdc%2B%2B-v3%2Fbits%2Fmask_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/libstdc%2B%2B-v3%2Fbits%2Fmask_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fmask_array.h?ref=42d18a47a03df5e4705fab06f3d78f2c0c94ce10", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- mask_array class.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -125,15 +125,15 @@ namespace std {\n #define _DEFINE_VALARRAY_OPERATOR(op, name)\t\t\t\t\\\n template<typename _Tp>\t\t\t\t\t\t\t\\\n inline void\t\t\t\t\t\t\t\t\\\n-mask_array<_Tp>::operator##op##= (const valarray<_Tp>& __v) const\t\\\n+mask_array<_Tp>::operator op##= (const valarray<_Tp>& __v) const\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   _Array_augmented_##name (_M_array, _M_mask, \t\t\t\t\\\n                            _Array<_Tp> (__v), __v.size ());\t\t\\\n }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n template<typename _Tp> template<class E>\t\t\t\t\\\n inline void\t\t\t\t\t\t\t\t\\\n-mask_array<_Tp>::operator##op##= (const _Expr<E, _Tp>& __e) const\t\\\n+mask_array<_Tp>::operator op##= (const _Expr<E, _Tp>& __e) const\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   _Array_augmented_##name (_M_array, _M_mask, __e, __e.size ());\t\\\n }"}, {"sha": "4681cb590dc8539ce39bd68b1d5aaca096feca19", "filename": "libstdc++-v3/bits/slice_array.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/libstdc%2B%2B-v3%2Fbits%2Fslice_array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/libstdc%2B%2B-v3%2Fbits%2Fslice_array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fslice_array.h?ref=42d18a47a03df5e4705fab06f3d78f2c0c94ce10", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- slice_array class.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -126,14 +126,14 @@ namespace std {\n #define _DEFINE_VALARRAY_OPERATOR(op, name)\t\t\t\t\\\n template<typename _Tp>\t\t\t\t\t\t\t\\\n inline void\t\t\t\t\t\t\t\t\\\n-slice_array<_Tp>::operator##op##= (const valarray<_Tp>& __v) const\t\\\n+slice_array<_Tp>::operator op##= (const valarray<_Tp>& __v) const\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   _Array_augmented_##name (_M_array, _M_sz, _M_stride, _Array<_Tp> (__v));\\\n }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n template<typename _Tp> template<class _Dom>\t\t\t\t\\\n inline void\t\t\t\t\t\t\t\t\\\n-slice_array<_Tp>::operator##op##= (const _Expr<_Dom,_Tp>& __e) const\t\\\n+slice_array<_Tp>::operator op##= (const _Expr<_Dom,_Tp>& __e) const\t\\\n {\t\t\t\t\t\t\t\t\t\\\n     _Array_augmented_##name (_M_array, _M_stride, __e, _M_sz);\t\t\\\n }"}, {"sha": "63daf9fd6bdd409863ccb5ae66be172993ea13c6", "filename": "libstdc++-v3/bits/std_valarray.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/libstdc%2B%2B-v3%2Fbits%2Fstd_valarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/libstdc%2B%2B-v3%2Fbits%2Fstd_valarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fstd_valarray.h?ref=42d18a47a03df5e4705fab06f3d78f2c0c94ce10", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- valarray class.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -585,7 +585,7 @@ namespace std {\n #define _DEFINE_VALARRAY_UNARY_OPERATOR(_Op, _Name)                     \\\n   template<typename _Tp>\t\t\t\t\t\t\\\n   inline _Expr<_UnClos<_Name,_ValArray,_Tp>, _Tp>               \t\\\n-  valarray<_Tp>::operator##_Op() const\t\t\t\t\t\\\n+  valarray<_Tp>::operator _Op() const\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n       typedef _UnClos<_Name,_ValArray,_Tp> _Closure;\t                \\\n       return _Expr<_Closure, _Tp> (_Closure (*this));\t\t\t\\\n@@ -608,15 +608,15 @@ namespace std {\n #define _DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT(_Op, _Name)               \\\n   template<class _Tp>\t\t\t\t\t\t\t\\\n   inline valarray<_Tp> &\t\t\t\t\t\t\\\n-  valarray<_Tp>::operator##_Op##= (const _Tp &__t)\t\t\t\\\n+  valarray<_Tp>::operator _Op##= (const _Tp &__t)\t\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n       _Array_augmented_##_Name (_Array<_Tp>(_M_data), _M_size, __t);\t\\\n       return *this;\t\t\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   template<class _Tp>\t\t\t\t\t\t\t\\\n   inline valarray<_Tp> &\t\t\t\t\t\t\\\n-  valarray<_Tp>::operator##_Op##= (const valarray<_Tp> &__v)\t\t\\\n+  valarray<_Tp>::operator _Op##= (const valarray<_Tp> &__v)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n       _Array_augmented_##_Name (_Array<_Tp>(_M_data), _M_size, \t\t\\\n                                _Array<_Tp>(__v._M_data));\t\t\\\n@@ -645,7 +645,7 @@ namespace std {\n #define _DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(_Op, _Name)          \\\n   template<class _Tp> template<class _Dom>\t\t\t\t\\\n   inline valarray<_Tp> &\t\t\t\t\t\t\\\n-  valarray<_Tp>::operator##_Op##= (const _Expr<_Dom,_Tp> &__e)\t\t\\\n+  valarray<_Tp>::operator _Op##= (const _Expr<_Dom,_Tp> &__e)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n       _Array_augmented_##_Name (_Array<_Tp>(_M_data), __e, _M_size);\t\\\n       return *this;\t\t\t\t\t\t\t\\\n@@ -668,23 +668,23 @@ _DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(>>, shift_right)\n #define _DEFINE_BINARY_OPERATOR(_Op, _Name)\t\t\t\t\\\n   template<typename _Tp>\t\t\t\t\t\t\\\n   inline _Expr<_BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp>, _Tp>        \\\n-  operator##_Op (const valarray<_Tp> &__v, const valarray<_Tp> &__w)\t\\\n+  operator _Op (const valarray<_Tp> &__v, const valarray<_Tp> &__w)\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n       typedef _BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp> _Closure;     \\\n       return _Expr<_Closure, _Tp> (_Closure (__v, __w));\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   template<typename _Tp>\t\t\t\t\t\t\\\n   inline _Expr<_BinClos<_Name,_ValArray,_Constant,_Tp,_Tp>,_Tp>         \\\n-  operator##_Op (const valarray<_Tp> &__v, const _Tp &__t)\t\t\\\n+  operator _Op (const valarray<_Tp> &__v, const _Tp &__t)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n       typedef _BinClos<_Name,_ValArray,_Constant,_Tp,_Tp> _Closure;\t\\\n       return _Expr<_Closure, _Tp> (_Closure (__v, __t));\t        \\\n   }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   template<typename _Tp>\t\t\t\t\t\t\\\n   inline _Expr<_BinClos<_Name,_Constant,_ValArray,_Tp,_Tp>,_Tp>         \\\n-  operator##_Op (const _Tp &__t, const valarray<_Tp> &__v)\t\t\\\n+  operator _Op (const _Tp &__t, const valarray<_Tp> &__v)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n       typedef _BinClos<_Name,_Constant,_ValArray,_Tp,_Tp> _Closure;     \\\n       return _Expr<_Closure, _Tp> (_Closure (__t, __v));        \t\\\n@@ -706,23 +706,23 @@ _DEFINE_BINARY_OPERATOR(>>, _Shift_right)\n #define _DEFINE_LOGICAL_OPERATOR(_Op, _Name)\t\t\t\t\\\n   template<typename _Tp>\t\t\t\t\t\t\\\n   inline _Expr<_BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp>,bool>        \\\n-  operator##_Op (const valarray<_Tp> &__v, const valarray<_Tp> &__w)\t\\\n+  operator _Op (const valarray<_Tp> &__v, const valarray<_Tp> &__w)\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n       typedef _BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp> _Closure;     \\\n       return _Expr<_Closure, bool> (_Closure (__v, __w));               \\\n   }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   template<class _Tp>\t\t\t\t\t\t\t\\\n   inline _Expr<_BinClos<_Name,_ValArray,_Constant,_Tp,_Tp>,bool>        \\\n-  operator##_Op (const valarray<_Tp> &__v, const _Tp &__t)\t\t\\\n+  operator _Op (const valarray<_Tp> &__v, const _Tp &__t)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n       typedef _BinClos<_Name,_ValArray,_Constant,_Tp,_Tp> _Closure;     \\\n       return _Expr<_Closure, bool> (_Closure (__v, __t));       \t\\\n   }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   template<class _Tp>\t\t\t\t\t\t\t\\\n   inline _Expr<_BinClos<_Name,_Constant,_ValArray,_Tp,_Tp>,bool>        \\\n-  operator##_Op (const _Tp &__t, const valarray<_Tp> &__v)\t\t\\\n+  operator _Op (const _Tp &__t, const valarray<_Tp> &__v)\t\t\\\n   {\t\t\t\t\t\t\t\t\t\\\n       typedef _BinClos<_Name,_Constant,_ValArray,_Tp,_Tp> _Closure;     \\\n       return _Expr<_Closure, bool> (_Closure (__t, __v));\t        \\"}, {"sha": "c203d421e05f534fd6caa82d767293b03b2f057a", "filename": "libstdc++-v3/bits/valarray_meta.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/libstdc%2B%2B-v3%2Fbits%2Fvalarray_meta.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/libstdc%2B%2B-v3%2Fbits%2Fvalarray_meta.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fbits%2Fvalarray_meta.h?ref=42d18a47a03df5e4705fab06f3d78f2c0c94ce10", "patch": "@@ -1,6 +1,6 @@\n // The template and inlines for the -*- C++ -*- internal _Meta class.\n \n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -763,7 +763,7 @@ namespace std {\n #define _DEFINE_EXPR_UNARY_OPERATOR(_Op, _Name)                         \\\n template<class _Dom, typename _Tp>                                      \\\n inline _Expr<_UnClos<_Name,_Expr,_Dom>,_Tp>                             \\\n-_Expr<_Dom,_Tp>::operator##_Op () const                                 \\\n+_Expr<_Dom,_Tp>::operator _Op () const                                 \\\n {                                                                       \\\n     typedef _UnClos<_Name,_Expr,_Dom> _Closure;                         \\\n     return _Expr<_Closure,_Tp> (_Closure (this->_M_closure));           \\\n@@ -780,7 +780,7 @@ _Expr<_Dom,_Tp>::operator##_Op () const                                 \\\n template<class _Dom1, class _Dom2>\t\t\t\t\t\\\n inline _Expr<_BinClos<_Name,_Expr,_Expr,_Dom1,_Dom2>,                   \\\n              typename _Name<typename _Dom1::value_type>::result_type>   \\\n-operator##_Op (const _Expr<_Dom1,typename _Dom1::value_type>& __v,      \\\n+operator _Op (const _Expr<_Dom1,typename _Dom1::value_type>& __v,      \\\n               const _Expr<_Dom2,typename _Dom2::value_type>& __w)       \\\n {                                                                       \\\n     typedef typename _Dom1::value_type _Arg;                            \\\n@@ -792,7 +792,7 @@ operator##_Op (const _Expr<_Dom1,typename _Dom1::value_type>& __v,      \\\n template<class _Dom>                                                    \\\n inline _Expr<_BinClos<_Name,_Expr,_Constant,_Dom,typename _Dom::value_type>, \\\n              typename _Name<typename _Dom::value_type>::result_type>    \\\n-operator##_Op (const _Expr<_Dom,typename _Dom::value_type>& __v,        \\\n+operator _Op (const _Expr<_Dom,typename _Dom::value_type>& __v,        \\\n               const typename _Dom::value_type& __t)                     \\\n {                                                                       \\\n     typedef typename _Dom::value_type _Arg;                             \\\n@@ -804,7 +804,7 @@ operator##_Op (const _Expr<_Dom,typename _Dom::value_type>& __v,        \\\n template<class _Dom>                                                    \\\n inline _Expr<_BinClos<_Name,_Constant,_Expr,typename _Dom::value_type,_Dom>, \\\n              typename _Name<typename _Dom::value_type>::result_type>    \\\n-operator##_Op (const typename _Dom::value_type& __t,                    \\\n+operator _Op (const typename _Dom::value_type& __t,                    \\\n                const _Expr<_Dom,typename _Dom::value_type>& __v)        \\\n {                                                                       \\\n     typedef typename _Dom::value_type _Arg;                             \\\n@@ -816,7 +816,7 @@ operator##_Op (const typename _Dom::value_type& __t,                    \\\n template<class _Dom>                                                    \\\n inline _Expr<_BinClos<_Name,_Expr,_ValArray,_Dom,typename _Dom::value_type>, \\\n              typename _Name<typename _Dom::value_type>::result_type>    \\\n-operator##_Op (const _Expr<_Dom,typename _Dom::value_type>& __e,        \\\n+operator _Op (const _Expr<_Dom,typename _Dom::value_type>& __e,        \\\n                const valarray<typename _Dom::value_type>& __v)          \\\n {                                                                       \\\n     typedef typename _Dom::value_type _Arg;                             \\\n@@ -828,7 +828,7 @@ operator##_Op (const _Expr<_Dom,typename _Dom::value_type>& __e,        \\\n template<class _Dom>                                                    \\\n inline _Expr<_BinClos<_Name,_ValArray,_Expr,typename _Dom::value_type,_Dom>, \\\n              typename _Name<typename _Dom::value_type>::result_type>    \\\n-operator##_Op (const valarray<typename _Dom::value_type>& __v,          \\\n+operator _Op (const valarray<typename _Dom::value_type>& __v,          \\\n                const _Expr<_Dom,typename _Dom::value_type>& __e)        \\\n {                                                                       \\\n     typedef typename _Dom::value_type _Tp;                              \\\n@@ -853,7 +853,7 @@ operator##_Op (const valarray<typename _Dom::value_type>& __v,          \\\n #define _DEFINE_EXPR_RELATIONAL_OPERATOR(_Op, _Name)                    \\\n template<class _Dom1, class _Dom2>\t\t\t\t\t\\\n inline _Expr<_BinClos<_Name,_Expr,_Expr,_Dom1,_Dom2>, bool>             \\\n-operator##_Op (const _Expr<_Dom1,typename _Dom1::value_type>& __v,      \\\n+operator _Op (const _Expr<_Dom1,typename _Dom1::value_type>& __v,      \\\n               const _Expr<_Dom2,typename _Dom2::value_type>& __w)       \\\n {                                                                       \\\n     typedef typename _Dom1::value_type _Arg;                            \\\n@@ -864,7 +864,7 @@ operator##_Op (const _Expr<_Dom1,typename _Dom1::value_type>& __v,      \\\n template<class _Dom>                                                    \\\n inline _Expr<_BinClos<_Name,_Expr,_Constant,_Dom,typename _Dom::value_type>, \\\n              bool>                                                      \\\n-operator##_Op (const _Expr<_Dom,typename _Dom::value_type>& __v,        \\\n+operator _Op (const _Expr<_Dom,typename _Dom::value_type>& __v,        \\\n               const typename _Dom::value_type& __t)                     \\\n {                                                                       \\\n     typedef typename _Dom::value_type _Arg;                             \\\n@@ -875,7 +875,7 @@ operator##_Op (const _Expr<_Dom,typename _Dom::value_type>& __v,        \\\n template<class _Dom>                                                    \\\n inline _Expr<_BinClos<_Name,_Constant,_Expr,typename _Dom::value_type,_Dom>, \\\n              bool>                                                      \\\n-operator##_Op (const typename _Dom::value_type& __t,                    \\\n+operator _Op (const typename _Dom::value_type& __t,                    \\\n                const _Expr<_Dom,typename _Dom::value_type>& __v)        \\\n {                                                                       \\\n     typedef typename _Dom::value_type _Arg;                             \\\n@@ -886,7 +886,7 @@ operator##_Op (const typename _Dom::value_type& __t,                    \\\n template<class _Dom>                                                    \\\n inline _Expr<_BinClos<_Name,_Expr,_ValArray,_Dom,typename _Dom::value_type>, \\\n              bool>                                                      \\\n-operator##_Op (const _Expr<_Dom,typename _Dom::value_type>& __e,        \\\n+operator _Op (const _Expr<_Dom,typename _Dom::value_type>& __e,        \\\n                const valarray<typename _Dom::value_type>& __v)          \\\n {                                                                       \\\n     typedef typename _Dom::value_type _Tp;                              \\\n@@ -897,7 +897,7 @@ operator##_Op (const _Expr<_Dom,typename _Dom::value_type>& __e,        \\\n template<class _Dom>                                                    \\\n inline _Expr<_BinClos<_Name,_ValArray,_Expr,typename _Dom::value_type,_Dom>, \\\n              bool>                                                      \\\n-operator##_Op (const valarray<typename _Dom::value_type>& __v,          \\\n+operator _Op (const valarray<typename _Dom::value_type>& __v,          \\\n                const _Expr<_Dom,typename _Dom::value_type>& __e)        \\\n {                                                                       \\\n     typedef typename _Dom::value_type _Tp;                              \\"}, {"sha": "ebb696ed1df80099d76ff51eb746fd834d8a664d", "filename": "libstdc++-v3/config/c_io_libio.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fc_io_libio.cc?ref=42d18a47a03df5e4705fab06f3d78f2c0c94ce10", "patch": "@@ -152,6 +152,7 @@ namespace std {\n #if _G_HAVE_IO_FILE_OPEN\n \t__c_file_type* __f;\n \t__f = _IO_file_open(this, __name, __p_mode, __prot, __rw_mode, 0);\n+\t_flags &= ~_IO_DELETE_DONT_CLOSE;\n \t__retval = __f ? this: NULL;\n #else\n \tint __fd = ::open(__name, __p_mode, __prot);"}, {"sha": "79e683a9e5ccd0b27317700222c6cd308041bd8c", "filename": "libstdc++-v3/testsuite/27_io/ifstream_members.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fifstream_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fifstream_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fifstream_members.cc?ref=42d18a47a03df5e4705fab06f3d78f2c0c94ce10", "patch": "@@ -54,7 +54,28 @@ bool test00()\n   return test;\n }\n \n+// http://sourceware.cygnus.com/ml/libstdc++/2000-07/msg00004.html\n+bool test01()\n+{\n+  bool test = true;\n+  const int more_than_max_open_files = 8200;\n+  \n+  for(int i = 0; ++i < more_than_max_open_files;)\n+    {\n+      std::ifstream ifs(name_01);\n+      test &= static_cast<bool>(ifs);\n+    }\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+ \n+  return test;\n+}\n+\n+\n int main()\n {\n   test00();\n+  test01();\n }"}, {"sha": "76c5a1d5e7a6659ea94c391f543ccacd41cc172b", "filename": "libstdc++-v3/testsuite/27_io/ofstream_members.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fofstream_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42d18a47a03df5e4705fab06f3d78f2c0c94ce10/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fofstream_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fofstream_members.cc?ref=42d18a47a03df5e4705fab06f3d78f2c0c94ce10", "patch": "@@ -54,7 +54,28 @@ bool test00()\n   return test;\n }\n \n+\n+// http://sourceware.cygnus.com/ml/libstdc++/2000-07/msg00004.html\n+bool test01()\n+{\n+  bool test = true;\n+  const int more_than_max_open_files = 8200;\n+  \n+  for(int i = 0; ++i < more_than_max_open_files;)\n+    {\n+      std::ofstream ifs(name_02);\n+      test &= static_cast<bool>(ifs);\n+    }\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+ \n+  return test;\n+}\n+\n int main()\n {\n   test00();\n+  test01();\n }"}]}