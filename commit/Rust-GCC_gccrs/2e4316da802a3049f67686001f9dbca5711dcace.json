{"sha": "2e4316da802a3049f67686001f9dbca5711dcace", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU0MzE2ZGE4MDJhMzA0OWY2NzY4NjAwMWY5ZGJjYTU3MTFkY2FjZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2008-10-06T19:07:13Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-10-06T19:07:13Z"}, "message": "rs6000-protos.h (rs6000_output_addr_const_extra): Declare.\n\ngcc/\n\t* config/rs6000/rs6000-protos.h (rs6000_output_addr_const_extra):\n\tDeclare.\n\t* config/rs6000/rs6000.h (OUTPUT_ADDR_CONST_EXTRA): New macro.\n\t* config/rs6000/rs6000.md (UNSPEC_TOCREL): New constant.\n\t* config/rs6000/rs6000.c (constant_pool_expr_1): Delete.\n\t(constant_pool_expr_p): Use split_const and check the base.\n\t(toc_relative_expr_p): Likewise, checking for an UNSPEC_TOCREL\n\tinstead of a MINUS.\n\t(legitimate_constant_pool_address_p): Check toc_relative_p\n\tinstead of constant_pool_expr_p.\n\t(print_operand_address): Always use output_addr_const for\n\tconstant pool addresses.\n\t(rs6000_output_addr_const_extra): New function.\n\t(create_TOC_reference): Create an UNSPEC_TOCREL instead of\n\ta MINUS.\n\nFrom-SVN: r140910", "tree": {"sha": "ccf0ce9fa3c9617218e9f154f6b176a7969628ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccf0ce9fa3c9617218e9f154f6b176a7969628ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e4316da802a3049f67686001f9dbca5711dcace", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e4316da802a3049f67686001f9dbca5711dcace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e4316da802a3049f67686001f9dbca5711dcace", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e4316da802a3049f67686001f9dbca5711dcace/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3517d3a0870e7081d4ded0fa4cc590c602713a8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3517d3a0870e7081d4ded0fa4cc590c602713a8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3517d3a0870e7081d4ded0fa4cc590c602713a8c"}], "stats": {"total": 148, "additions": 67, "deletions": 81}, "files": [{"sha": "02cd9d8899fac203d8a358571114dffeec44d74c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4316da802a3049f67686001f9dbca5711dcace/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4316da802a3049f67686001f9dbca5711dcace/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e4316da802a3049f67686001f9dbca5711dcace", "patch": "@@ -1,3 +1,21 @@\n+2008-10-06  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/rs6000/rs6000-protos.h (rs6000_output_addr_const_extra):\n+\tDeclare.\n+\t* config/rs6000/rs6000.h (OUTPUT_ADDR_CONST_EXTRA): New macro.\n+\t* config/rs6000/rs6000.md (UNSPEC_TOCREL): New constant.\n+\t* config/rs6000/rs6000.c (constant_pool_expr_1): Delete.\n+\t(constant_pool_expr_p): Use split_const and check the base.\n+\t(toc_relative_expr_p): Likewise, checking for an UNSPEC_TOCREL\n+\tinstead of a MINUS.\n+\t(legitimate_constant_pool_address_p): Check toc_relative_p\n+\tinstead of constant_pool_expr_p.\n+\t(print_operand_address): Always use output_addr_const for\n+\tconstant pool addresses.\n+\t(rs6000_output_addr_const_extra): New function.\n+\t(create_TOC_reference): Create an UNSPEC_TOCREL instead of\n+\ta MINUS.\n+\n 2008-10-06  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR middle-end/37535"}, {"sha": "42e939bf741ea688fe2691c50fb57ffb8079e400", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4316da802a3049f67686001f9dbca5711dcace/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4316da802a3049f67686001f9dbca5711dcace/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=2e4316da802a3049f67686001f9dbca5711dcace", "patch": "@@ -77,6 +77,7 @@ extern int extract_ME (rtx);\n extern void rs6000_output_function_entry (FILE *, const char *);\n extern void print_operand (FILE *, rtx, int);\n extern void print_operand_address (FILE *, rtx);\n+extern bool rs6000_output_addr_const_extra (FILE *, rtx);\n extern enum rtx_code rs6000_reverse_condition (enum machine_mode,\n \t\t\t\t\t       enum rtx_code);\n extern void rs6000_emit_sCOND (enum rtx_code, rtx);"}, {"sha": "e6844dd2a0d90b4815b5443f4d39cc84c804074f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 41, "deletions": 81, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4316da802a3049f67686001f9dbca5711dcace/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4316da802a3049f67686001f9dbca5711dcace/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=2e4316da802a3049f67686001f9dbca5711dcace", "patch": "@@ -765,7 +765,6 @@ static void rs6000_emit_allocate_stack (HOST_WIDE_INT, int, int);\n static unsigned rs6000_hash_constant (rtx);\n static unsigned toc_hash_function (const void *);\n static int toc_hash_eq (const void *, const void *);\n-static int constant_pool_expr_1 (rtx, int *, int *);\n static bool constant_pool_expr_p (rtx);\n static bool legitimate_small_data_p (enum machine_mode, rtx);\n static bool legitimate_lo_sum_address_p (enum machine_mode, rtx, int);\n@@ -3505,58 +3504,28 @@ gpr_or_gpr_p (rtx op0, rtx op1)\n \f\n /* Subroutines of rs6000_legitimize_address and rs6000_legitimate_address.  */\n \n-static int\n-constant_pool_expr_1 (rtx op, int *have_sym, int *have_toc)\n-{\n-  switch (GET_CODE (op))\n-    {\n-    case SYMBOL_REF:\n-      if (RS6000_SYMBOL_REF_TLS_P (op))\n-\treturn 0;\n-      else if (CONSTANT_POOL_ADDRESS_P (op))\n-\t{\n-\t  if (ASM_OUTPUT_SPECIAL_POOL_ENTRY_P (get_pool_constant (op), Pmode))\n-\t    {\n-\t      *have_sym = 1;\n-\t      return 1;\n-\t    }\n-\t  else\n-\t    return 0;\n-\t}\n-      else if (! strcmp (XSTR (op, 0), toc_label_name))\n-\t{\n-\t  *have_toc = 1;\n-\t  return 1;\n-\t}\n-      else\n-\treturn 0;\n-    case PLUS:\n-    case MINUS:\n-      return (constant_pool_expr_1 (XEXP (op, 0), have_sym, have_toc)\n-\t      && constant_pool_expr_1 (XEXP (op, 1), have_sym, have_toc));\n-    case CONST:\n-      return constant_pool_expr_1 (XEXP (op, 0), have_sym, have_toc);\n-    case CONST_INT:\n-      return 1;\n-    default:\n-      return 0;\n-    }\n-}\n-\n static bool\n constant_pool_expr_p (rtx op)\n {\n-  int have_sym = 0;\n-  int have_toc = 0;\n-  return constant_pool_expr_1 (op, &have_sym, &have_toc) && have_sym;\n+  rtx base, offset;\n+\n+  split_const (op, &base, &offset);\n+  return (GET_CODE (base) == SYMBOL_REF\n+\t  && CONSTANT_POOL_ADDRESS_P (base)\n+\t  && ASM_OUTPUT_SPECIAL_POOL_ENTRY_P (get_pool_constant (base), Pmode));\n }\n \n bool\n toc_relative_expr_p (rtx op)\n {\n-  int have_sym = 0;\n-  int have_toc = 0;\n-  return constant_pool_expr_1 (op, &have_sym, &have_toc) && have_toc;\n+  rtx base, offset;\n+\n+  if (GET_CODE (op) != CONST)\n+    return false;\n+\n+  split_const (op, &base, &offset);\n+  return (GET_CODE (base) == UNSPEC\n+\t  && XINT (base, 1) == UNSPEC_TOCREL);\n }\n \n bool\n@@ -3566,7 +3535,7 @@ legitimate_constant_pool_address_p (rtx x)\n \t  && GET_CODE (x) == PLUS\n \t  && GET_CODE (XEXP (x, 0)) == REG\n \t  && (TARGET_MINIMAL_TOC || REGNO (XEXP (x, 0)) == TOC_REGISTER)\n-\t  && constant_pool_expr_p (XEXP (x, 1)));\n+\t  && toc_relative_expr_p (XEXP (x, 1)));\n }\n \n static bool\n@@ -12572,45 +12541,37 @@ print_operand_address (FILE *file, rtx x)\n #endif\n   else if (legitimate_constant_pool_address_p (x))\n     {\n-      if (TARGET_AIX && (!TARGET_ELF || !TARGET_MINIMAL_TOC))\n-\t{\n-\t  rtx contains_minus = XEXP (x, 1);\n-\t  rtx minus, symref;\n-\t  const char *name;\n-\n-\t  /* Find the (minus (sym) (toc)) buried in X, and temporarily\n-\t     turn it into (sym) for output_addr_const.  */\n-\t  while (GET_CODE (XEXP (contains_minus, 0)) != MINUS)\n-\t    contains_minus = XEXP (contains_minus, 0);\n-\n-\t  minus = XEXP (contains_minus, 0);\n-\t  symref = XEXP (minus, 0);\n-\t  gcc_assert (GET_CODE (XEXP (minus, 1)) == SYMBOL_REF);\n-\t  XEXP (contains_minus, 0) = symref;\n-\t  if (TARGET_ELF)\n-\t    {\n-\t      char *newname;\n-\n-\t      name = XSTR (symref, 0);\n-\t      newname = XALLOCAVEC (char, strlen (name) + sizeof (\"@toc\"));\n-\t      strcpy (newname, name);\n-\t      strcat (newname, \"@toc\");\n-\t      XSTR (symref, 0) = newname;\n-\t    }\n-\t  output_addr_const (file, XEXP (x, 1));\n-\t  if (TARGET_ELF)\n-\t    XSTR (symref, 0) = name;\n-\t  XEXP (contains_minus, 0) = minus;\n-\t}\n-      else\n-\toutput_addr_const (file, XEXP (x, 1));\n-\n+      output_addr_const (file, XEXP (x, 1));\n       fprintf (file, \"(%s)\", reg_names[REGNO (XEXP (x, 0))]);\n     }\n   else\n     gcc_unreachable ();\n }\n \f\n+/* Implement OUTPUT_ADDR_CONST_EXTRA for address X.  */\n+\n+bool\n+rs6000_output_addr_const_extra (FILE *file, rtx x)\n+{\n+  if (GET_CODE (x) == UNSPEC)\n+    switch (XINT (x, 1))\n+      {\n+      case UNSPEC_TOCREL:\n+\tx = XVECEXP (x, 0, 0);\n+\tgcc_assert (GET_CODE (x) == SYMBOL_REF);\n+\toutput_addr_const (file, x);\n+\tif (!TARGET_AIX || (TARGET_ELF && TARGET_MINIMAL_TOC))\n+\t  {\n+\t    putc ('-', file);\n+\t    assemble_name (file, toc_label_name);\n+\t  }\n+\telse if (TARGET_ELF)\n+\t  fputs (\"@toc\", file);\n+\treturn true;\n+      }\n+  return false;\n+}\n+\f\n /* Target hook for assembling integer objects.  The PowerPC version has\n    to handle fixup entries for relocatable code if RELOCATABLE_NEEDS_FIXUP\n    is defined.  It also needs to handle DI-mode objects on 64-bit\n@@ -15431,8 +15392,7 @@ create_TOC_reference (rtx symbol)\n   return gen_rtx_PLUS (Pmode,\n \t   gen_rtx_REG (Pmode, TOC_REGISTER),\n \t     gen_rtx_CONST (Pmode,\n-\t       gen_rtx_MINUS (Pmode, symbol,\n-\t\t gen_rtx_SYMBOL_REF (Pmode, toc_label_name))));\n+\t       gen_rtx_UNSPEC (Pmode, gen_rtvec (1, symbol), UNSPEC_TOCREL)));\n }\n \n /* If _Unwind_* has been called from within the same module,"}, {"sha": "79250c87b0714538476ae835bb8792a1f6a451af", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4316da802a3049f67686001f9dbca5711dcace/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4316da802a3049f67686001f9dbca5711dcace/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=2e4316da802a3049f67686001f9dbca5711dcace", "patch": "@@ -2352,6 +2352,12 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n \n #define PRINT_OPERAND_ADDRESS(FILE, ADDR) print_operand_address (FILE, ADDR)\n \n+#define OUTPUT_ADDR_CONST_EXTRA(STREAM, X, FAIL)\t\t\\\n+  do\t\t\t\t\t\t\t\t\\\n+    if (!rs6000_output_addr_const_extra (STREAM, X))\t\t\\\n+      goto FAIL;\t\t\t\t\t\t\\\n+  while (0)\n+\n /* uncomment for disabling the corresponding default options */\n /* #define  MACHINE_no_sched_interblock */\n /* #define  MACHINE_no_sched_speculative */"}, {"sha": "4146c4f56af1603ff0f2db62618baeaac80d7480", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4316da802a3049f67686001f9dbca5711dcace/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4316da802a3049f67686001f9dbca5711dcace/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=2e4316da802a3049f67686001f9dbca5711dcace", "patch": "@@ -99,6 +99,7 @@\n    (UNSPEC_DLMZB_CR\t\t46)\n    (UNSPEC_DLMZB_STRLEN\t\t47)\n    (UNSPEC_RSQRT\t\t48)\n+   (UNSPEC_TOCREL\t\t49)\n   ])\n \n ;;"}]}