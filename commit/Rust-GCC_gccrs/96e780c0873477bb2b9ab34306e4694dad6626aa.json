{"sha": "96e780c0873477bb2b9ab34306e4694dad6626aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZlNzgwYzA4NzM0NzdiYjJiOWFiMzQzMDZlNDY5NGRhZDY2MjZhYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-10-09T18:05:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-10-09T18:05:17Z"}, "message": "re PR c++/63437 ([C++14] Parenthesized \"movable but not copyable\" object doesn't compile in return statement)\n\n\tPR c++/63437\n\t* cp-tree.h (REF_PARENTHESIZED_P): Also allow INDIRECT_REF.\n\t* semantics.c (force_paren_expr): And set it.\n\t* typeck.c (check_return_expr): And handle it.\n\nFrom-SVN: r216042", "tree": {"sha": "ee1cf2b2501e26a4d1ab22ef58e0584d471a3fa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee1cf2b2501e26a4d1ab22ef58e0584d471a3fa7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96e780c0873477bb2b9ab34306e4694dad6626aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e780c0873477bb2b9ab34306e4694dad6626aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96e780c0873477bb2b9ab34306e4694dad6626aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96e780c0873477bb2b9ab34306e4694dad6626aa/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "94c4084cf009939db425be4f6552b7f29f8587b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94c4084cf009939db425be4f6552b7f29f8587b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94c4084cf009939db425be4f6552b7f29f8587b3"}], "stats": {"total": 63, "additions": 59, "deletions": 4}, "files": [{"sha": "744854855c668bb3e3f93f0360abd92f71d0ae0b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e780c0873477bb2b9ab34306e4694dad6626aa/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e780c0873477bb2b9ab34306e4694dad6626aa/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=96e780c0873477bb2b9ab34306e4694dad6626aa", "patch": "@@ -1,3 +1,10 @@\n+2014-10-09  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/63437\n+\t* cp-tree.h (REF_PARENTHESIZED_P): Also allow INDIRECT_REF.\n+\t* semantics.c (force_paren_expr): And set it.\n+\t* typeck.c (check_return_expr): And handle it.\n+\n 2014-10-09  Marc Glisse  <marc.glisse@inria.fr>\n \n \t* decl.c (grokdeclarator): constexpr only implies const in C++11."}, {"sha": "cdc892762f71ed1d9e290974d5bd6afb0ed77349", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e780c0873477bb2b9ab34306e4694dad6626aa/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e780c0873477bb2b9ab34306e4694dad6626aa/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=96e780c0873477bb2b9ab34306e4694dad6626aa", "patch": "@@ -101,7 +101,7 @@ c-common.h, not after.\n       TARGET_EXPR_DIRECT_INIT_P (in TARGET_EXPR)\n       FNDECL_USED_AUTO (in FUNCTION_DECL)\n       DECLTYPE_FOR_LAMBDA_PROXY (in DECLTYPE_TYPE)\n-      REF_PARENTHESIZED_P (in COMPONENT_REF, SCOPE_REF)\n+      REF_PARENTHESIZED_P (in COMPONENT_REF, INDIRECT_REF)\n       AGGR_INIT_ZERO_FIRST (in AGGR_INIT_EXPR)\n    3: (TREE_REFERENCE_EXPR) (in NON_LVALUE_EXPR) (commented-out).\n       ICS_BAD_FLAG (in _CONV)\n@@ -3059,11 +3059,12 @@ extern void decl_shadowed_for_var_insert (tree, tree);\n #define PAREN_STRING_LITERAL_P(NODE) \\\n   TREE_LANG_FLAG_0 (STRING_CST_CHECK (NODE))\n \n-/* Indicates whether a COMPONENT_REF has been parenthesized.  Currently\n-   only set some of the time in C++14 mode.  */\n+/* Indicates whether a COMPONENT_REF has been parenthesized, or an\n+   INDIRECT_REF comes from parenthesizing a VAR_DECL.  Currently only set\n+   some of the time in C++14 mode.  */\n \n #define REF_PARENTHESIZED_P(NODE) \\\n-  TREE_LANG_FLAG_2 (COMPONENT_REF_CHECK (NODE))\n+  TREE_LANG_FLAG_2 (TREE_CHECK2 ((NODE), COMPONENT_REF, INDIRECT_REF))\n \n /* Nonzero if this AGGR_INIT_EXPR provides for initialization via a\n    constructor call, rather than an ordinary function call.  */"}, {"sha": "ba09e72057340e87201300479de2df6ec6f9256f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e780c0873477bb2b9ab34306e4694dad6626aa/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e780c0873477bb2b9ab34306e4694dad6626aa/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=96e780c0873477bb2b9ab34306e4694dad6626aa", "patch": "@@ -1637,6 +1637,8 @@ force_paren_expr (tree expr)\n \t  bool rval = !!(kind & clk_rvalueref);\n \t  type = cp_build_reference_type (type, rval);\n \t  expr = build_static_cast (type, expr, tf_error);\n+\t  if (expr != error_mark_node)\n+\t    REF_PARENTHESIZED_P (expr) = true;\n \t}\n     }\n "}, {"sha": "b4e6824796b26b2ecb03a9794d221eccaf72e294", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e780c0873477bb2b9ab34306e4694dad6626aa/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e780c0873477bb2b9ab34306e4694dad6626aa/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=96e780c0873477bb2b9ab34306e4694dad6626aa", "patch": "@@ -8671,6 +8671,20 @@ check_return_expr (tree retval, bool *no_warning)\n       if (VOID_TYPE_P (functype))\n \treturn error_mark_node;\n \n+      /* If we had an id-expression obfuscated by force_paren_expr, we need\n+\t to undo it so we can try to treat it as an rvalue below.  */\n+      if (cxx_dialect >= cxx14\n+\t  && INDIRECT_REF_P (retval)\n+\t  && REF_PARENTHESIZED_P (retval))\n+\t{\n+\t  retval = TREE_OPERAND (retval, 0);\n+\t  while (TREE_CODE (retval) == NON_LVALUE_EXPR\n+\t\t || TREE_CODE (retval) == NOP_EXPR)\n+\t    retval = TREE_OPERAND (retval, 0);\n+\t  gcc_assert (TREE_CODE (retval) == ADDR_EXPR);\n+\t  retval = TREE_OPERAND (retval, 0);\n+\t}\n+\n       /* Under C++11 [12.8/32 class.copy], a returned lvalue is sometimes\n \t treated as an rvalue for the purposes of overload resolution to\n \t favor move constructors over copy constructors."}, {"sha": "809f2510099a402d4d81a2e324cf56efb95c9e85", "filename": "gcc/testsuite/g++.dg/cpp1y/paren1.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96e780c0873477bb2b9ab34306e4694dad6626aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fparen1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96e780c0873477bb2b9ab34306e4694dad6626aa/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fparen1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fparen1.C?ref=96e780c0873477bb2b9ab34306e4694dad6626aa", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/63437\n+// { dg-do compile { target c++11 } }\n+\n+struct X // movable but not copyable\n+{\n+    X() = default;\n+    X(X &&) = default;\n+\n+    X(const X &) = delete;\n+};\n+\n+X non_parenthesized()\n+{\n+    X x;\n+    return x; // works\n+}\n+\n+X parenthesized()\n+{\n+    X x;\n+    return (x); // error: use of deleted function 'X::X(const X&)'\n+}\n+\n+template <class T>\n+T parenthesized_t()\n+{\n+  T t;\n+  return (t);\n+}\n+\n+template X parenthesized_t<X>();"}]}