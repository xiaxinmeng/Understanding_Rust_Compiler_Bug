{"sha": "c513ecbf359898cc6304aa506b35e27b1422b82d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUxM2VjYmYzNTk4OThjYzYzMDRhYTUwNmIzNWUyN2IxNDIyYjgyZA==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2012-11-19T03:55:32Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2012-11-19T03:55:32Z"}, "message": "extend.texi: Use @smallexample consistently.\n\n2012-11-18  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/extend.texi: Use @smallexample consistently.  Add @noindent\n\twhen continuing a sentence or paragraph past an example.  Change\n\ttabs to spaces in examples.\n\nFrom-SVN: r193611", "tree": {"sha": "a2d5e54d899209de7686f209682179c8c43eaa43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2d5e54d899209de7686f209682179c8c43eaa43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c513ecbf359898cc6304aa506b35e27b1422b82d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c513ecbf359898cc6304aa506b35e27b1422b82d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c513ecbf359898cc6304aa506b35e27b1422b82d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c513ecbf359898cc6304aa506b35e27b1422b82d/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57bedc3c6b89276a574c94d05649ea6817a46c1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57bedc3c6b89276a574c94d05649ea6817a46c1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57bedc3c6b89276a574c94d05649ea6817a46c1a"}], "stats": {"total": 123, "additions": 88, "deletions": 35}, "files": [{"sha": "0efb46c2f8047ea1cda65e293a78fd6cc0aecabf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c513ecbf359898cc6304aa506b35e27b1422b82d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c513ecbf359898cc6304aa506b35e27b1422b82d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c513ecbf359898cc6304aa506b35e27b1422b82d", "patch": "@@ -1,3 +1,9 @@\n+2012-11-18  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/extend.texi: Use @smallexample consistently.  Add @noindent\n+\twhen continuing a sentence or paragraph past an example.  Change\n+\ttabs to spaces in examples.\n+\n 2012-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* doc/md.texi (extv@var{m}, extvmisalign@var{m}, extzv@var{m})"}, {"sha": "577643eee2f0cd09113a2c919a3dd7e55820177b", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 82, "deletions": 35, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c513ecbf359898cc6304aa506b35e27b1422b82d/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c513ecbf359898cc6304aa506b35e27b1422b82d/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=c513ecbf359898cc6304aa506b35e27b1422b82d", "patch": "@@ -339,6 +339,7 @@ serves as a jump table:\n static void *array[] = @{ &&foo, &&bar, &&hack @};\n @end smallexample\n \n+@noindent\n Then you can select a label with indexing, like this:\n \n @smallexample\n@@ -1280,7 +1281,7 @@ Objects in this address space are located in @code{.progmem.data}.\n \n @b{Example}\n \n-@example\n+@smallexample\n char my_read (const __flash char ** p)\n @{\n     /* p is a pointer to RAM that points to a pointer to flash.\n@@ -1301,15 +1302,15 @@ int main (void)\n    /* Return 17 by reading from flash memory */\n    return array[array[i]];\n @}\n-@end example\n+@end smallexample\n \n @noindent\n For each named address space supported by avr-gcc there is an equally\n named but uppercase built-in macro defined. \n The purpose is to facilitate testing if respective address space\n support is available or not:\n \n-@example\n+@smallexample\n #ifdef __FLASH\n const __flash int var = 1;\n \n@@ -1327,7 +1328,7 @@ int read_var (void)\n     return (int) pgm_read_word (&var);\n @}\n #endif /* __FLASH */\n-@end example\n+@end smallexample\n \n @noindent\n Notice that attribute @ref{AVR Variable Attributes,,@code{progmem}}\n@@ -1367,10 +1368,12 @@ as immediates into operands of instructions.\n @item\n The following code initializes a variable @code{pfoo}\n located in static storage with a 24-bit address:\n-@example\n+@smallexample\n extern const __memx char foo;\n const __memx void *pfoo = &foo;\n-@end example\n+@end smallexample\n+\n+@noindent\n Such code requires at least binutils 2.23, see\n @w{@uref{http://sourceware.org/PR13503,PR13503}}.\n \n@@ -1404,6 +1407,7 @@ belonging to another address space by qualifying the type with the\n extern int __ea i;\n @end smallexample\n \n+@noindent \n The compiler generates special code to access the variable @code{i}.\n It may use runtime library\n support, or generate special machine instructions to access that address\n@@ -1620,6 +1624,7 @@ example:\n #define debug(format, ...) fprintf (stderr, format, __VA_ARGS__)\n @end smallexample\n \n+@noindent\n Here @samp{@dots{}} is a @dfn{variable argument}.  In the invocation of\n such a macro, it represents the zero or more tokens until the closing\n parenthesis that ends the invocation, including any commas.  This set of\n@@ -1634,6 +1639,7 @@ argument.  Here is an example:\n #define debug(format, args...) fprintf (stderr, format, args)\n @end smallexample\n \n+@noindent\n This is in all ways equivalent to the ISO C example above, but arguably\n more readable and descriptive.\n \n@@ -1661,6 +1667,7 @@ used with the token paste operator, @samp{##}.  If instead you write\n #define debug(format, ...) fprintf (stderr, format, ## __VA_ARGS__)\n @end smallexample\n \n+@noindent\n and if the variable arguments are omitted or empty, the @samp{##}\n operator causes the preprocessor to remove the comma before it.  If you\n do provide some variable arguments in your macro invocation, GNU CPP\n@@ -2151,6 +2158,7 @@ void __f () @{ /* @r{Do something.} */; @}\n void f () __attribute__ ((weak, alias (\"__f\")));\n @end smallexample\n \n+@noindent\n defines @samp{f} to be a weak alias for @samp{__f}.  In C++, the\n mangled name for the target must be used.  It is an error if @samp{__f}\n is not defined in the same translation unit.\n@@ -2198,6 +2206,7 @@ void* my_calloc(size_t, size_t) __attribute__((alloc_size(1,2)))\n void my_realloc(void*, size_t) __attribute__((alloc_size(2)))\n @end smallexample\n \n+@noindent\n declares that @code{my_calloc} returns memory of the size given by\n the product of parameter 1 and 2 and that @code{my_realloc} returns memory\n of the size given by parameter 2.\n@@ -2324,6 +2333,7 @@ typedef int intfn ();\n extern const intfn square;\n @end smallexample\n \n+@noindent\n This approach does not work in GNU C++ from 2.6.0 on, since the language\n specifies that the @samp{const} must be attached to the return value.\n \n@@ -2762,13 +2772,15 @@ static void (*resolve_memcpy (void)) (void)\n @}\n @end smallexample\n \n+@noindent\n The exported header file declaring the function the user calls would\n contain:\n \n @smallexample\n extern void *memcpy (void *, const void *, size_t);\n @end smallexample\n \n+@noindent\n allowing the user to call this as a regular function, unaware of the\n implementation.  Finally, the indirect function needs to be defined in\n the same translation unit as the resolver function:\n@@ -3155,6 +3167,8 @@ optimized away, put\n @smallexample\n asm (\"\");\n @end smallexample\n+\n+@noindent\n (@pxref{Extended Asm}) in the called function, to serve as a special\n side-effect.\n \n@@ -3241,6 +3255,7 @@ typedef void voidfn ();\n volatile voidfn fatal;\n @end smallexample\n \n+@noindent\n This approach does not work in GNU C++.\n \n @item nothrow\n@@ -3981,6 +3996,7 @@ for some system calls.\n extern int foo () __attribute__((version_id (\"20040821\")));\n @end smallexample\n \n+@noindent\n Calls to @var{foo} are mapped to calls to @var{foo@{20040821@}}.\n \n @item visibility (\"@var{visibility_type}\")\n@@ -4104,6 +4120,7 @@ int foo ()\n @}\n @end smallexample\n \n+@noindent\n results in warning on line 5.\n \n @item weak\n@@ -4862,7 +4879,7 @@ of the data but not how this data is accessed.\n \n In order to read data located with the @code{progmem} attribute\n (inline) assembler must be used.\n-@example\n+@smallexample\n /* Use custom macros from @w{@uref{http://nongnu.org/avr-libc/user-manual,AVR-LibC}} */\n #include <avr/pgmspace.h> \n \n@@ -4874,7 +4891,7 @@ int read_var (int i)\n     /* Access var[] by accessor macro from avr/pgmspace.h */\n     return (int) pgm_read_word (& var[i]);\n @}\n-@end example\n+@end smallexample\n \n AVR is a Harvard architecture processor and data and read-only data\n normally resides in the data memory (RAM).\n@@ -4968,19 +4985,19 @@ memory-mapped peripherals.  If an address is specified, the variable\n is assigned that address, else it is not assigned an address (it is\n assumed some other module assigns an address).  Example:\n \n-@example\n+@smallexample\n int timer_count __attribute__((io(0x123)));\n-@end example\n+@end smallexample\n \n @item cb\n @itemx cb (@var{addr})\n Variables with the @code{cb} attribute are used to access the control\n bus, using special instructions.  @code{addr} indicates the control bus\n address.  Example:\n \n-@example\n+@smallexample\n int cpu_clock __attribute__((cb(0x123)));\n-@end example\n+@end smallexample\n \n @end table\n \n@@ -5051,6 +5068,7 @@ struct\n  @} t1;\n @end smallexample\n \n+@noindent\n The size of @code{t1} is 8 bytes with the zero-length bit-field.  If the\n zero-length bit-field were removed, @code{t1}'s size would be 4 bytes.\n \n@@ -5076,6 +5094,7 @@ struct\n  @} t3;\n @end smallexample\n \n+@noindent\n For @code{t2}, @code{bar} is placed at offset 2, rather than offset 1.\n Accordingly, the size of @code{t2} is 4.  For @code{t3}, the zero-length\n bit-field does not affect the alignment of @code{bar} or, as a result, the size\n@@ -5100,6 +5119,7 @@ struct\n  @} t4;\n @end smallexample\n \n+@noindent\n Here, @code{t4} takes up 4 bytes.\n @end enumerate\n \n@@ -5114,6 +5134,7 @@ struct\n  @} t5;\n @end smallexample\n \n+@noindent\n Here, @code{t5} takes up 2 bytes.\n @end enumerate\n @end table\n@@ -5343,6 +5364,7 @@ typedef union __attribute__ ((__transparent_union__))\n pid_t wait (wait_status_ptr_t);\n @end smallexample\n \n+@noindent\n This interface allows either @code{int *} or @code{union wait *}\n arguments to be passed, using the @code{int *} calling convention.\n The program can call @code{wait} with arguments of either type:\n@@ -5352,6 +5374,7 @@ int w1 () @{ int w; return wait (&w); @}\n int w2 () @{ union wait w; return wait (&w); @}\n @end smallexample\n \n+@noindent\n With this interface, @code{wait}'s implementation might look like this:\n \n @smallexample\n@@ -5434,6 +5457,7 @@ main (void)\n @}\n @end smallexample\n \n+@noindent\n If you replaced @code{short_a} with @code{short} in the variable\n declaration, the above program would abort when compiled with\n @option{-fstrict-aliasing}, which is on by default at @option{-O2} or\n@@ -5476,6 +5500,7 @@ __declspec(dllexport)\n C::C() @{@}\n @end smallexample\n \n+@noindent\n In this code, @code{C::C} is exported from the current DLL, but the\n virtual table for @code{C} is not exported.  (You can use\n @code{__attribute__} instead of @code{__declspec} if you prefer, but\n@@ -5740,6 +5765,7 @@ volatile int vobj;\n vobj = 1;\n @end smallexample\n \n+@noindent\n Unless @var{*ptr} and @var{vobj} can be aliased, it is not guaranteed\n that the write to @var{*ptr} occurs by the time the update\n of @var{vobj} happens.  If you need this guarantee, you must use\n@@ -6184,6 +6210,7 @@ int frob(int x)\n @}\n @end smallexample\n \n+@noindent\n In this (inefficient) example, the @code{frob} instruction sets the\n carry bit to indicate an error.  The @code{jc} instruction detects\n this and branches to the @code{error} label.  Finally, the output\n@@ -6214,6 +6241,7 @@ void doit(void)\n @}\n @end smallexample\n \n+@noindent\n In this (also inefficient) example, the @code{mfsr} instruction reads\n an address from some out-of-band machine register, and the following\n @code{jmp} instruction branches to that address.  The address read by\n@@ -6236,6 +6264,7 @@ does not in fact fall through.\n #define TRACE  TRACE1(__COUNTER__)\n @end smallexample\n \n+@noindent\n In this example (which in fact inspired the @code{asm goto} feature)\n we want on rare occasions to call the @code{trace} function; on other\n occasions we'd like to keep the overhead to the absolute minimum.\n@@ -6305,6 +6334,7 @@ use the input reg for an output reload.  Consider this example:\n asm (\"foo\" : \"=t\" (a) : \"f\" (b));\n @end smallexample\n \n+@noindent\n This asm says that input B is not popped by the asm, and that\n the asm pushes a result onto the reg-stack, i.e., the stack is one\n deeper after the asm than it was before.  But, it is possible that\n@@ -6353,6 +6383,7 @@ takes one input, which is internally popped, and produces two outputs.\n asm (\"fsincos\" : \"=t\" (cos), \"=u\" (sin) : \"0\" (inp));\n @end smallexample\n \n+@noindent\n This asm takes two inputs, which are popped by the @code{fyl2xp1} opcode,\n and replaces them with one output.  The user must code the @code{st(1)}\n clobber for reg-stack.c to know that @code{fyl2xp1} pops both inputs.\n@@ -6603,6 +6634,8 @@ assignment, for example @code{r0} below:\n register int *p1 asm (\"r0\") = @dots{};\n register int *p2 asm (\"r1\") = @dots{};\n @end smallexample\n+\n+@noindent\n In those cases, a solution is to use a temporary variable for\n each arbitrary expression.   @xref{Example of asm with clobbered asm reg}.\n \n@@ -6830,6 +6863,7 @@ types.  This should be done using an appropriate @code{typedef}:\n typedef int v4si __attribute__ ((vector_size (16)));\n @end smallexample\n \n+@noindent\n The @code{int} type specifies the base type, while the attribute specifies\n the vector size for the variable, measured in bytes.  For example, the\n declaration above causes the compiler to set the mode for the @code{v4si}\n@@ -6995,6 +7029,7 @@ This extension is sufficient such that\n #define offsetof(@var{type}, @var{member})  __builtin_offsetof (@var{type}, @var{member})\n @end smallexample\n \n+@noindent\n is a suitable definition of the @code{offsetof} macro.  In C++, @var{type}\n may be dependent.  In either case, @var{member} may consist of a single\n identifier, or a sequence of member accesses and array references.\n@@ -8302,6 +8337,7 @@ int f (int c, int v)\n @}\n @end smallexample\n \n+@noindent\n Because the @code{asm} statement unconditionally transfers control out\n of the function, control never reaches the end of the function\n body.  The @code{__builtin_unreachable} is in fact unreachable and\n@@ -8341,13 +8377,15 @@ if it is nonzero means misalignment offset.  For example:\n void *x = __builtin_assume_aligned (arg, 16);\n @end smallexample\n \n+@noindent\n means that the compiler can assume @code{x}, set to @code{arg}, is at least\n 16-byte aligned, while:\n \n @smallexample\n void *x = __builtin_assume_aligned (arg, 32, 8);\n @end smallexample\n \n+@noindent\n means that the compiler can assume for @code{x}, set to @code{arg}, that\n @code{(char *) x - 8} is 32-byte aligned.\n @end deftypefn\n@@ -11739,6 +11777,7 @@ does not work:\n   vec_add ((vector signed int)@{1, 2, 3, 4@}, foo);\n @end smallexample\n \n+@noindent\n Since @code{vec_add} is a macro, the vector constant in the example\n is treated as four separate arguments.  Wrap the entire argument in\n parentheses for this to work.\n@@ -14055,6 +14094,7 @@ does not work:\n   spu_add ((vector signed int)@{1, 2, 3, 4@}, foo);\n @end smallexample\n \n+@noindent\n Since @code{spu_add} is a macro, the vector constant in the example\n is treated as four separate arguments.  Wrap the entire argument in\n parentheses for this to work.\n@@ -14155,7 +14195,8 @@ unsigned __insn_@var{op} (...)\n \n @end smallexample\n \n-Where @var{op} is the name of the instruction.  Refer to the ISA manual\n+@noindent\n+where @var{op} is the name of the instruction.  Refer to the ISA manual\n for the complete list of instructions.\n \n GCC also provides intrinsics to directly access the network registers.\n@@ -14286,10 +14327,10 @@ compatibility with other compilers, but note that the common\n @code{1234H} numeric syntax is not supported (use @code{0x1234}\n instead).  Example:\n \n-@example\n+@smallexample\n #pragma ADDRESS port3 0x103\n char port3;\n-@end example\n+@end smallexample\n \n @end table\n \n@@ -14311,9 +14352,9 @@ Specifies which coprocessor registers are available to the register\n allocator.  @var{registers} may be a single register, register range\n separated by ellipses, or comma-separated list of those.  Example:\n \n-@example\n+@smallexample\n #pragma GCC coprocessor available $c0...$c10, $c28\n-@end example\n+@end smallexample\n \n @item GCC coprocessor call_saved @var{registers}\n @cindex pragma, coprocessor call_saved\n@@ -14322,9 +14363,9 @@ any function using them.  @var{registers} may be a single register,\n register range separated by ellipses, or comma-separated list of\n those.  Example:\n \n-@example\n+@smallexample\n #pragma GCC coprocessor call_saved $c4...$c6, $c31\n-@end example\n+@end smallexample\n \n @item GCC coprocessor subclass '(A|B|C|D)' = @var{registers}\n @cindex pragma, coprocessor subclass\n@@ -14333,11 +14374,11 @@ used by inline @code{asm} constructs.  @var{registers} may be a single\n register, register range separated by ellipses, or comma-separated\n list of those.  Example:\n \n-@example\n+@smallexample\n #pragma GCC coprocessor subclass 'B' = $c2, $c4, $c6\n \n asm (\"cpfoo %0\" : \"=B\" (x));\n-@end example\n+@end smallexample\n \n @item GCC disinterrupt @var{name} , @var{name} @dots{}\n @cindex pragma, disinterrupt\n@@ -14346,21 +14387,21 @@ for the duration of those functions.  If any functions so named\n are not encountered in the source, a warning is emitted that the pragma is\n not used.  Examples:\n \n-@example\n+@smallexample\n #pragma disinterrupt foo\n #pragma disinterrupt bar, grill\n int foo () @{ @dots{} @}\n-@end example\n+@end smallexample\n \n @item GCC call @var{name} , @var{name} @dots{}\n @cindex pragma, call\n For the named functions, the compiler always uses a register-indirect\n call model when calling the named functions.  Examples:\n \n-@example\n+@smallexample\n extern int foo ();\n #pragma call foo\n-@end example\n+@end smallexample\n \n @end table\n \n@@ -14577,11 +14618,11 @@ in effect), or @samp{ignored} if the diagnostic is to be ignored.\n @var{option} is a double quoted string that matches the command-line\n option.\n \n-@example\n+@smallexample\n #pragma GCC diagnostic warning \"-Wformat\"\n #pragma GCC diagnostic error \"-Wformat\"\n #pragma GCC diagnostic ignored \"-Wformat\"\n-@end example\n+@end smallexample\n \n Note that these pragmas override any command-line options.  GCC keeps\n track of the location of each pragma, and issues diagnostics according\n@@ -14596,17 +14637,17 @@ Causes GCC to remember the state of the diagnostics as of each\n @code{pop} has no matching @code{push}, the command-line options are\n restored.\n \n-@example\n+@smallexample\n #pragma GCC diagnostic error \"-Wuninitialized\"\n-  foo(a);\t\t\t/* error is given for this one */\n+  foo(a);                       /* error is given for this one */\n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Wuninitialized\"\n-  foo(b);\t\t\t/* no diagnostic for this one */\n+  foo(b);                       /* no diagnostic for this one */\n #pragma GCC diagnostic pop\n-  foo(c);\t\t\t/* error is given for this one */\n+  foo(c);                       /* error is given for this one */\n #pragma GCC diagnostic pop\n-  foo(d);\t\t\t/* depends on command-line options */\n-@end example\n+  foo(d);                       /* depends on command-line options */\n+@end smallexample\n \n @end table\n \n@@ -14634,6 +14675,7 @@ information.  For example,\n TODO(Remember to fix this)\n @end smallexample\n \n+@noindent\n prints @samp{/tmp/file.c:4: note: #pragma message:\n TODO - Remember to fix this}.\n \n@@ -14691,6 +14733,7 @@ For example:\n int x [X];\n @end smallexample\n \n+@noindent\n In this example, the definition of X as 1 is saved by @code{#pragma\n push_macro} and restored by @code{#pragma pop_macro}.\n \n@@ -14779,13 +14822,14 @@ struct @{\n @} foo;\n @end smallexample\n \n+@noindent\n In this example, you are able to access members of the unnamed\n union with code like @samp{foo.b}.  Note that only unnamed structs and\n unions are allowed, you may not have, for example, an unnamed\n @code{int}.\n \n You must never create such structures that cause ambiguous field definitions.\n-For example, this structure:\n+For example, in this structure:\n \n @smallexample\n struct @{\n@@ -14796,7 +14840,8 @@ struct @{\n @} foo;\n @end smallexample\n \n-It is ambiguous which @code{a} is being referred to with @samp{foo.a}.\n+@noindent\n+it is ambiguous which @code{a} is being referred to with @samp{foo.a}.\n The compiler gives errors for such constructs.\n \n @opindex fms-extensions\n@@ -14821,6 +14866,7 @@ extern void f1 (struct s1 *);\n void f2 (struct s2 *p) @{ f1 (p); @}\n @end smallexample\n \n+@noindent\n In the call to @code{f1} inside @code{f2}, the pointer @code{p} is\n converted into a pointer to the anonymous field.\n \n@@ -15529,6 +15575,7 @@ template ostream& operator <<\n                 (ostream&, const Foo<int>&);\n @end smallexample\n \n+@noindent\n for each of the instances you need, and create a template instantiation\n library from those.\n "}]}