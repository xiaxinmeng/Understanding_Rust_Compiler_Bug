{"sha": "d363e7bfe7fc5bf2e37e21ddb111422d6876e0c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM2M2U3YmZlN2ZjNWJmMmUzN2UyMWRkYjExMTQyMmQ2ODc2ZTBjMQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-01-02T07:02:50Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-01-02T07:02:50Z"}, "message": "decl.c (cp_missing_noreturn_ok_p): New.\n\n\t* decl.c (cp_missing_noreturn_ok_p): New.\n\t(init_decl_processing): Set lang_missing_noreturn_ok_p.\n\nFrom-SVN: r38613", "tree": {"sha": "6bc117e02c983fda955bea51fc59ad272bc0f5b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6bc117e02c983fda955bea51fc59ad272bc0f5b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d363e7bfe7fc5bf2e37e21ddb111422d6876e0c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d363e7bfe7fc5bf2e37e21ddb111422d6876e0c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d363e7bfe7fc5bf2e37e21ddb111422d6876e0c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d363e7bfe7fc5bf2e37e21ddb111422d6876e0c1/comments", "author": null, "committer": null, "parents": [{"sha": "21c7361e4047bdf15f384ae2bd9c9868063f8025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21c7361e4047bdf15f384ae2bd9c9868063f8025", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21c7361e4047bdf15f384ae2bd9c9868063f8025"}], "stats": {"total": 67, "additions": 41, "deletions": 26}, "files": [{"sha": "a3bf42dc18cdc1962d6d28be56991b1583d24dbe", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d363e7bfe7fc5bf2e37e21ddb111422d6876e0c1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d363e7bfe7fc5bf2e37e21ddb111422d6876e0c1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d363e7bfe7fc5bf2e37e21ddb111422d6876e0c1", "patch": "@@ -1,3 +1,8 @@\n+2001-01-02  Andreas Jaeger  <aj@suse.de>\n+\n+\t* decl.c (cp_missing_noreturn_ok_p): New.\n+\t(init_decl_processing): Set lang_missing_noreturn_ok_p.\n+\n 2000-12-29  Jakub Jelinek  <jakub@redhat.com>\n \n \t* decl.c (init_decl_processing): Fix sign of wchar_type_node.\n@@ -9,7 +14,7 @@\n \t* decl.c (store_bindings): Simplify.\n \t(pop_from_top_level): Likewise.\n \t* pt.c (overload_template_name): Remove.\n-\t(instantiate_decl): Don't call push_to_top_level if it's not \n+\t(instantiate_decl): Don't call push_to_top_level if it's not\n \tneeded.\n \n 2000-12-28  Mark Mitchell  <mark@codesourcery.com>\n@@ -45,7 +50,7 @@\n \t(fn_type_unification): Likewise.\n \t(type_unification_real): Succeed after checking 'len' args.\n \t(most_specialized_instantiation): Lose explicit_args parm.\n-\t* class.c (resolve_address_of_overloaded_function): Strip 'this', \n+\t* class.c (resolve_address_of_overloaded_function): Strip 'this',\n \tpass len.\n \n 2000-12-21  Jason Merrill  <jason@redhat.com>\n@@ -155,12 +160,12 @@\n \t* class.c (check_field_decls): Don't special case anonymous\n \tfields in error messages.\n \t(note_name_declared_in_class): Use %D on diagnostic.\n-\t\n+\n \t* tree.c (pod_type_p): Use strip_array_types.\n \t(cp_valid_lang_attribute): Likewise.\n \t* typeck.c (cp_type_quals): Strip arrays separately, to avoid\n \tmultiple evaluations.\n-\t(cp_has_mutable_p): Use strip_array_types.\t\n+\t(cp_has_mutable_p): Use strip_array_types.\n \n 2000-12-07  Nathan Sidwell  <nathan@codesourcery.com>\n \n@@ -233,7 +238,7 @@\n 2000-12-04  Jason Merrill  <jason@redhat.com>\n \n \t* mangle.c (write_type): Mangle VECTOR_TYPE with \"U8__vector\".\n-\t(write_builtin_type): Pass intSI_type_node and the like through \n+\t(write_builtin_type): Pass intSI_type_node and the like through\n \ttype_for_mode.\n \t* method.c (process_overload_item): Mangle VECTOR_TYPEs with 'o'.\n \tPass intSI_type_node and the like through type_for_mode.\n@@ -242,7 +247,7 @@\n \t* tree.c (walk_tree): Likewise.\n \t* error.c (dump_type): Likewise.\n \t(dump_type_prefix, dump_type_suffix): Don't bother with VECTOR_TYPE.\n-\t\n+\n \t* Make-lang.in: Tweak top comment for emacs.\n \t(cp/TAGS): Restore.\n \n@@ -259,7 +264,7 @@\n \n \t* error.c (dump_function_decl): Use DECL_VIRTUAL_P, not\n \tTYPE_POLYMORPHIC_P.\n-\t\n+\n \t* typeck.c (build_static_cast): Remove unused variable.\n \n 2000-12-01  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n@@ -402,7 +407,7 @@ Thu Nov 23 02:16:47 2000  J\"orn Rennecke <amylaar@redhat.com>\n \t* mangle.c (write_name): Use <unscoped-name> for names directly in\n \tfunction scope.\n \t(write_unscoped_name): Accept names directly in function scope.\n-\t\n+\n 2000-11-20  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* lex.c (rid_to_yy, RID_EXPORT): Make unique keyword."}, {"sha": "705a083c818583b50b7613392a3d94d25acecfbe", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d363e7bfe7fc5bf2e37e21ddb111422d6876e0c1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d363e7bfe7fc5bf2e37e21ddb111422d6876e0c1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d363e7bfe7fc5bf2e37e21ddb111422d6876e0c1", "patch": "@@ -1,6 +1,6 @@\n /* Process declarations and variables for C compiler.\n-   Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n+   2001  Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -173,6 +173,7 @@ static tree check_special_function_return_type\n static tree push_cp_library_fn PARAMS ((enum tree_code, tree));\n static tree build_cp_library_fn PARAMS ((tree, enum tree_code, tree));\n static void store_parm_decls PARAMS ((tree));\n+static int cp_missing_noreturn_ok_p PARAMS ((tree));\n \n #if defined (DEBUG_CP_BINDING_LEVELS)\n static void indent PARAMS ((void));\n@@ -502,7 +503,7 @@ struct binding_level\n \n #define current_binding_level\t\t\t\\\n   (cfun\t\t\t\t\t\t\\\n-   ? cp_function_chain->bindings   \t\t\\\n+   ? cp_function_chain->bindings\t\t\\\n    : scope_chain->bindings)\n \n /* The binding level of the current class, if any.  */\n@@ -6304,6 +6305,7 @@ init_decl_processing ()\n   mark_lang_status = &mark_cp_function_context;\n   lang_safe_from_p = &c_safe_from_p;\n   lang_dump_tree = &cp_dump_tree;\n+  lang_missing_noreturn_ok_p = &cp_missing_noreturn_ok_p;\n \n   cp_parse_init ();\n   init_decl2 ();\n@@ -6618,7 +6620,7 @@ init_decl_processing ()\n   }\n \n   abort_fndecl\n-    = build_library_fn_ptr ((flag_new_abi \n+    = build_library_fn_ptr ((flag_new_abi\n \t\t\t     ? \"__cxa_pure_virtual\"\n \t\t\t     : \"__pure_virtual\"),\n \t\t\t    void_ftype);\n@@ -8908,7 +8910,7 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n \t{\n \t  tree fns = TREE_OPERAND (orig_declarator, 0);\n \t  tree args = TREE_OPERAND (orig_declarator, 1);\n-\t  \n+\n \t  if (PROCESSING_REAL_TEMPLATE_DECL_P ())\n \t    {\n \t      /* Something like `template <class T> friend void f<T>()'.  */\n@@ -8928,7 +8930,7 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n                  up an operator_name or PFUNCNAME within the current class\n                  (see template_id in parse.y). If the current class contains\n                  such a name, we'll get a COMPONENT_REF here. Undo that. */\n-              \n+\n               my_friendly_assert (TREE_TYPE (TREE_OPERAND (fns, 0))\n                                   == current_class_type, 20001120);\n               fns = TREE_OPERAND (fns, 1);\n@@ -9177,7 +9179,7 @@ build_ptrmemfunc_type (type)\n \n   if (type == error_mark_node)\n     return type;\n-  \n+\n   /* If a canonical type already exists for this type, use it.  We use\n      this method instead of type_hash_canon, because it only does a\n      simple equality check on the list of field members.  */\n@@ -10379,10 +10381,10 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n       else if (RIDBIT_SETP (RID_TYPEDEF, specbits))\n \t;\n       else if (decl_context == FIELD\n- \t       /* C++ allows static class elements  */\n- \t       && RIDBIT_SETP (RID_STATIC, specbits))\n- \t/* C++ also allows inlines and signed and unsigned elements,\n- \t   but in those cases we don't come in here.  */\n+\t       /* C++ allows static class elements  */\n+\t       && RIDBIT_SETP (RID_STATIC, specbits))\n+\t/* C++ also allows inlines and signed and unsigned elements,\n+\t   but in those cases we don't come in here.  */\n \t;\n       else\n \t{\n@@ -10664,7 +10666,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t\t\tcp_error (\"constructors may not be `%s'\",\n \t\t\t\t  IDENTIFIER_POINTER (TREE_VALUE (quals)));\n \t\t\tquals = NULL_TREE;\n- \t\t      }\n+\t\t      }\n \t\t    {\n \t\t      RID_BIT_TYPE tmp_bits;\n \t\t      memcpy (&tmp_bits, &specbits, sizeof (RID_BIT_TYPE));\n@@ -10982,7 +10984,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t          {\n \t            incomplete_type_error (NULL_TREE, ctype);\n \t            return error_mark_node;\n-  \t\t  }\n+\t\t  }\n \n \t\tdeclarator = sname;\n \t      }\n@@ -11255,14 +11257,14 @@ friend declaration requires class-key, i.e. `friend %#T'\",\n \t  if (type != integer_type_node)\n \t    {\n \t      decl_type_access_control (TYPE_NAME (type));\n-\t      \n+\n \t      /* A friendly class?  */\n \t      if (current_class_type)\n \t\tmake_friend_class (current_class_type, TYPE_MAIN_VARIANT (type));\n \t      else\n \t\tcp_error (\"trying to make class `%T' a friend of global scope\",\n \t\t          type);\n-              \n+\n \t      type = void_type_node;\n \t    }\n \t}\n@@ -11980,10 +11982,10 @@ grokparms (first_parm)\n         break;\n \n       decl = grokdeclarator (TREE_VALUE (decl), TREE_PURPOSE (decl),\n-        \t\t     PARM, init != NULL_TREE, NULL_TREE);\n+\t\t     PARM, init != NULL_TREE, NULL_TREE);\n       if (! decl || TREE_TYPE (decl) == error_mark_node)\n         continue;\n-    \n+\n       type = TREE_TYPE (decl);\n       if (VOID_TYPE_P (type))\n         {\n@@ -11999,7 +12001,7 @@ grokparms (first_parm)\n \t  TREE_TYPE (decl) = error_mark_node;\n         }\n \n-      if (type != error_mark_node) \n+      if (type != error_mark_node)\n \t{\n \t  /* Top-level qualifiers on the parameters are\n \t     ignored for function types.  */\n@@ -14636,3 +14638,11 @@ identifier_global_value\t(t)\n {\n   return IDENTIFIER_GLOBAL_VALUE (t);\n }\n+\n+static int\n+cp_missing_noreturn_ok_p (decl)\n+     tree decl;\n+{\n+  /* A missing noreturn is ok for the `main' function.  */\n+  return MAIN_NAME_P (DECL_ASSEMBLER_NAME (decl));\n+}"}]}