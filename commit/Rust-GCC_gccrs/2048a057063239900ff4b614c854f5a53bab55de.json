{"sha": "2048a057063239900ff4b614c854f5a53bab55de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA0OGEwNTcwNjMyMzk5MDBmZjRiNjE0Yzg1NGY1YTUzYmFiNTVkZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-11-17T23:10:10Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-11-17T23:10:10Z"}, "message": "re PR target/59153 (ICE: in memory_address_length, at config/i386/i386.c:24617 with -O -flive-range-shrinkage -mdispatch-scheduler -march=bdver1)\n\n\tPR target/59153\n\t* config/i386/i386.c (ix86_address_subreg_operand): Do not\n\treject non-integer subregs.\n\t(ix86_decompose_address): Do not reject invalid CONST_INT RTXes.\n\tMove check for invalid x32 constant addresses ...\n\t(ix86_legitimate_address_p): ... here.\n\ntestsuite/ChangeLog:\n\n\tPR target/59153\n\t* gcc.target/i386/pr59153.c: New test.\n\nFrom-SVN: r204925", "tree": {"sha": "63ae8d2739f2aae60265940d46171f5f4753c36c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63ae8d2739f2aae60265940d46171f5f4753c36c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2048a057063239900ff4b614c854f5a53bab55de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2048a057063239900ff4b614c854f5a53bab55de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2048a057063239900ff4b614c854f5a53bab55de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2048a057063239900ff4b614c854f5a53bab55de/comments", "author": null, "committer": null, "parents": [{"sha": "cce9196f4d5173e382b8e31eae1671fa1f302188", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cce9196f4d5173e382b8e31eae1671fa1f302188", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cce9196f4d5173e382b8e31eae1671fa1f302188"}], "stats": {"total": 85, "additions": 48, "deletions": 37}, "files": [{"sha": "c854ffa01eadb62cb9e1e0087eecc3f2ed4b086c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2048a057063239900ff4b614c854f5a53bab55de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2048a057063239900ff4b614c854f5a53bab55de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2048a057063239900ff4b614c854f5a53bab55de", "patch": "@@ -1,3 +1,12 @@\n+2013-11-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/59153\n+\t* config/i386/i386.c (ix86_address_subreg_operand): Do not\n+\treject non-integer subregs.\n+\t(ix86_decompose_address): Do not reject invalid CONST_INT RTXes.\n+\tMove check for invalid x32 constant addresses ...\n+\t(ix86_legitimate_address_p): ... here.\n+\n 2011-11-17  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_frame_related): Add split_reg\n@@ -9,8 +18,8 @@\n \n 2013-11-17  Andrew MacLeod  <amacleod@redhat.com>\n \n-\t* gimple.h: Reorder prototypes to match .c declaration order, and remove\n-\tprotyotypes for functions not in gimple.c.\n+\t* gimple.h: Reorder prototypes to match .c declaration order, and\n+\tremove protyotypes for functions not in gimple.c.\n \t(LABEL): Move to tree-into-ssa.c.\n \t* gimple.c: Remove unused prototypes.\n \t(get_base_address): Move to tree.c.\n@@ -79,8 +88,7 @@\n \t(execute_expand_omp): Check flag_enable_cilkplus.\n \t(execute_lower_omp): Same.\n \t(diagnose_sb_0): Handle CILK_SIMD.\n-\t(diagnose_omp_structured_block_errors): Check\n-\tflag_enable_cilkplus.\n+\t(diagnose_omp_structured_block_errors): Check flag_enable_cilkplus.\n \t(setjmp_or_longjmp_p): New.\n \t(scan_omp_1_stmt): Error on setjmp/longjmp in a simd construct.\n \t* tree-pretty-print.c (dump_generic_node): Add case for CILK_SIMD.\n@@ -94,8 +102,7 @@\n \t(*altivec_vperm_<mode>_internal): Remove.\n \t(altivec_vperm_<mode>_uns): Revert earlier little endian change.\n \t(*altivec_vperm_<mode>_uns_internal): Remove.\n-\t* config/rs6000/vector.md (vec_realign_load_<mode>): Revise\n-\tcommentary.\n+\t* config/rs6000/vector.md (vec_realign_load_<mode>): Revise commentary.\n \n 2013-11-15  Jeff Law  <law@redhat.com>\n \n@@ -117,8 +124,7 @@\n \n 2013-11-15  James Greenhalgh  <james.greenhalgh@arm.com>\n \n-\t* config/aarch64/aarch64-simd.md: Remove simd_type from all\n-\tpatterns.\n+\t* config/aarch64/aarch64-simd.md: Remove simd_type from all patterns.\n \t* config/aarch64/aarch64.md: Likewise, correct \"type\" attribute\n \twhere it is incorrect or missing.\n \n@@ -150,8 +156,7 @@\n \t(compute_points_to_sets): Remove heap variable globalization.\n \t(ipa_escaped_pt): Adjust initializer.\n \t(pass_data_ipa_pta): Do not run TODO_update_ssa.\n-\t* gimple-pretty-print.c (pp_points_to_solution): Print split\n-\tflags.\n+\t* gimple-pretty-print.c (pp_points_to_solution): Print split flags.\n \t* tree-ssa-alias.c (dump_points_to_solution): Likewise.\n \n 2013-11-15  Richard Biener  <rguenther@suse.de>\n@@ -165,8 +170,7 @@\n \n 2013-11-15  Joseph Myers  <joseph@codesourcery.com>\n \n-\t* acinclude.m4 (GCC_GLIBC_VERSION_GTE_IFELSE): New configure\n-\tmacro.\n+\t* acinclude.m4 (GCC_GLIBC_VERSION_GTE_IFELSE): New configure macro.\n \t* configure.ac: Determine target_header_dir earlier.\n \t(--with-glibc-version): New configure option.\n \tUse GCC_GLIBC_VERSION_GTE_IFELSE in enable_gnu_unique_object,"}, {"sha": "f7e28a570bdf64eb56ccef52773d0a61ceb722d7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2048a057063239900ff4b614c854f5a53bab55de/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2048a057063239900ff4b614c854f5a53bab55de/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2048a057063239900ff4b614c854f5a53bab55de", "patch": "@@ -11785,9 +11785,6 @@ ix86_address_subreg_operand (rtx op)\n \n   mode = GET_MODE (op);\n \n-  if (GET_MODE_CLASS (mode) != MODE_INT)\n-    return false;\n-\n   /* Don't allow SUBREGs that span more than a word.  It can lead to spill\n      failures when the register is one word out of a two word structure.  */\n   if (GET_MODE_SIZE (mode) > UNITS_PER_WORD)\n@@ -11962,19 +11959,6 @@ ix86_decompose_address (rtx addr, struct ix86_address *out)\n       scale = 1 << scale;\n       retval = -1;\n     }\n-  else if (CONST_INT_P (addr))\n-    {\n-      if (!x86_64_immediate_operand (addr, VOIDmode))\n-\treturn 0;\n-\n-      /* Constant addresses are sign extended to 64bit, we have to\n-\t prevent addresses from 0x80000000 to 0xffffffff in x32 mode.  */\n-      if (TARGET_X32\n-\t  && val_signbit_known_set_p (SImode, INTVAL (addr)))\n-\treturn 0;\n-\n-      disp = addr;\n-    }\n   else\n     disp = addr;\t\t\t/* displacement */\n \n@@ -12706,6 +12690,12 @@ ix86_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n \t       && !x86_64_immediate_operand (disp, VOIDmode))\n \t/* Displacement is out of range.  */\n \treturn false;\n+      /* In x32 mode, constant addresses are sign extended to 64bit, so\n+\t we have to prevent addresses from 0x80000000 to 0xffffffff.  */\n+      else if (TARGET_X32 && !(index || base)\n+\t       && CONST_INT_P (disp)\n+\t       && val_signbit_known_set_p (SImode, INTVAL (disp)))\n+\treturn false;\n     }\n \n   /* Everything looks valid.  */"}, {"sha": "564ecf065cf4e9b7fb7b7eff769f7a7d2967dd3f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2048a057063239900ff4b614c854f5a53bab55de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2048a057063239900ff4b614c854f5a53bab55de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2048a057063239900ff4b614c854f5a53bab55de", "patch": "@@ -1,3 +1,8 @@\n+2013-11-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/59153\n+\t* gcc.target/i386/pr59153.c: New test.\n+\n 2013-11-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/59123\n@@ -125,7 +130,7 @@\n 2013-11-14  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/ssa-vrp-thread-1.c: Fix target selector.\n- \n+\n 2013-11-14  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gnat.dg/specs/addr1.ads: XFAIL on x32.\n@@ -166,7 +171,7 @@\n \n \tPR tree-optimization/59102\n \t* gcc.c-torture/compile/pr59102.c: New test.\n-\t \n+\n 2013-11-13  Tom de Vries  <tom@codesourcery.com>\n \n \t* gcc.dg/tail-merge-store.c: New test.\n@@ -250,8 +255,7 @@\n 2013-11-12  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc.dg/c90-thread-local-1.c, gcc.dg/c99-thread-local-1.c,\n-\tgcc.dg/c11-thread-local-1.c, gcc.dg/c11-thread-local-2.c: New\n-\ttests.\n+\tgcc.dg/c11-thread-local-1.c, gcc.dg/c11-thread-local-2.c: New tests.\n \t* gcc.dg/tls/diag-2.c, objc.dg/tls/diag-2.m: Update expected\n \tdiagnostics.\n \n@@ -277,7 +281,7 @@\n \tPR c++/57734\n \t* g++.dg/cpp0x/alias-decl-enum-1.C: New.\n \n-2013-11-11  Martin Liska\t<marxin.liska@gmail.com>\n+2013-11-11  Martin Liska  <marxin.liska@gmail.com>\n \n \t* gcc.dg/time-profiler-1.c: New test.\n \t* gcc.dg/time-profiler-2.c: Ditto.\n@@ -397,10 +401,10 @@\n \n \t* gcc.dg/tree-ssa/loop-39.c: New test.\n \n-        * gcc.dg/unroll_1.c: Add -fno-tree-vrp to dg-options.\n-        * gcc.dg/unroll_2.c: Likewise.\n-        * gcc.dg/unroll_3.c: Likewise.\n-        * gcc.dg/unroll_4.c: Likewise.\n+\t* gcc.dg/unroll_1.c: Add -fno-tree-vrp to dg-options.\n+\t* gcc.dg/unroll_2.c: Likewise.\n+\t* gcc.dg/unroll_3.c: Likewise.\n+\t* gcc.dg/unroll_4.c: Likewise.\n \t* gcc.dg/vrp90.c: New test.\n \n 2013-11-07  Paolo Carlini  <paolo.carlini@oracle.com>"}, {"sha": "262726a9453b9d1a89fe7a2ec270d76792db991f", "filename": "gcc/testsuite/gcc.target/i386/pr59153.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2048a057063239900ff4b614c854f5a53bab55de/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59153.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2048a057063239900ff4b614c854f5a53bab55de/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59153.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59153.c?ref=2048a057063239900ff4b614c854f5a53bab55de", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -flive-range-shrinkage -mdispatch-scheduler -march=bdver1\" } */\n+\n+int foo (float f)\n+{\n+  union\n+  {\n+    float f;\n+    int i;\n+  } z = { .f = f };\n+\n+  return z.i - 1;\n+}"}]}