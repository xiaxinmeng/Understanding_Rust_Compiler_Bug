{"sha": "bc8db8a122ca4449832e7bed6d3f49be60f4c75e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmM4ZGI4YTEyMmNhNDQ0OTgzMmU3YmVkNmQzZjQ5YmU2MGY0Yzc1ZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-03-01T08:57:14Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-03-01T08:57:14Z"}, "message": "h8300.c (print_operand): Support 16-bit constant addresses.\n\n\t* config/h8300/h8300.c (print_operand): Support 16-bit\n\tconstant addresses.\n\t* config/h8300/h8300.h (TINY_CONSTANT_ADDRESS_P): New.\n\nFrom-SVN: r50191", "tree": {"sha": "d6833c54680736ca3a849cce0ac9703d2c52420e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6833c54680736ca3a849cce0ac9703d2c52420e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc8db8a122ca4449832e7bed6d3f49be60f4c75e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc8db8a122ca4449832e7bed6d3f49be60f4c75e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc8db8a122ca4449832e7bed6d3f49be60f4c75e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc8db8a122ca4449832e7bed6d3f49be60f4c75e/comments", "author": null, "committer": null, "parents": [{"sha": "2631798ecafda62ffb5fa78823c9b38151a9a1d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2631798ecafda62ffb5fa78823c9b38151a9a1d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2631798ecafda62ffb5fa78823c9b38151a9a1d1"}], "stats": {"total": 59, "additions": 46, "deletions": 13}, "files": [{"sha": "d8e0b1f89adc7c3a4ab737e407f8b13ce541d365", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc8db8a122ca4449832e7bed6d3f49be60f4c75e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc8db8a122ca4449832e7bed6d3f49be60f4c75e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc8db8a122ca4449832e7bed6d3f49be60f4c75e", "patch": "@@ -1,3 +1,9 @@\n+2002-03-01  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/h8300/h8300.c (print_operand): Support 16-bit\n+\tconstant addresses.\n+\t* config/h8300/h8300.h (TINY_CONSTANT_ADDRESS_P): New.\n+\n 2002-02-28  Richard Henderson  <rth@redhat.com>\n \n \t* expmed.c (store_bit_field): Prevent generation of CONCATs;"}, {"sha": "b8e7d98cf0e31b1c25935b642378b432461c5493", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc8db8a122ca4449832e7bed6d3f49be60f4c75e/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc8db8a122ca4449832e7bed6d3f49be60f4c75e/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=bc8db8a122ca4449832e7bed6d3f49be60f4c75e", "patch": "@@ -1206,23 +1206,42 @@ print_operand (file, x, code)\n \tcase MEM:\n \t  {\n \t    rtx addr = XEXP (x, 0);\n+\t    int eightbit_ok = ((GET_CODE (addr) == SYMBOL_REF\n+\t\t\t\t&& SYMBOL_REF_FLAG (addr))\n+\t\t\t       || EIGHTBIT_CONSTANT_ADDRESS_P (addr));\n+\t    int tiny_ok = ((GET_CODE (addr) == SYMBOL_REF\n+\t\t\t    && TINY_DATA_NAME_P (XSTR (addr, 0)))\n+\t\t\t   || TINY_CONSTANT_ADDRESS_P (addr));\n \n \t    fprintf (file, \"@\");\n \t    output_address (addr);\n \n-\t    /* If this is an 'R' operand (reference into the 8-bit\n-\t       area), then specify a symbolic address as \"foo:8\",\n-\t       otherwise if operand is still in eight bit section, use\n-\t       \"foo:16\".  */\n-\t    if (GET_CODE (addr) == SYMBOL_REF\n-\t\t&& SYMBOL_REF_FLAG (addr))\n-\t      fprintf (file, (code == 'R' ? \":8\" : \":16\"));\n-\t    else if (GET_CODE (addr) == SYMBOL_REF\n-\t\t     && TINY_DATA_NAME_P (XSTR (addr, 0)))\n-\t      fprintf (file, \":16\");\n-\t    else if ((code == 'R')\n-\t\t     && EIGHTBIT_CONSTANT_ADDRESS_P (addr))\n-\t      fprintf (file, \":8\");\n+\t    /* We fall back from smaller addressing to larger\n+\t       addressing in various ways depending on CODE.  */\n+\t    switch (code)\n+\t      {\n+\t      case 'R':\n+\t\t/* Used for mov.b and bit operations.  */\n+\t\tif (eightbit_ok)\n+\t\t  {\n+\t\t    fprintf (file, \":8\");\n+\t\t    break;\n+\t\t  }\n+\n+\t\t/* Fall through.  We should not get here if we are\n+\t\t   processing bit operations on H8/300 or H8/300H\n+\t\t   because 'U' constraint does not allow bit\n+\t\t   operations on the tiny area on these machines.  */\n+\n+\t      case 'T':\n+\t      case 'S':\n+\t\t/* Used for mov.w and mov.l.  */\n+\t\tif (tiny_ok)\n+\t\t  fprintf (file, \":16\");\n+\t\tbreak;\n+\t      default:\n+\t\tbreak;\n+\t      }\n \t  }\n \t  break;\n "}, {"sha": "6175d310f306cb9abb17ba96ee787c4ff2df0368", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc8db8a122ca4449832e7bed6d3f49be60f4c75e/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc8db8a122ca4449832e7bed6d3f49be60f4c75e/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=bc8db8a122ca4449832e7bed6d3f49be60f4c75e", "patch": "@@ -860,6 +860,14 @@ struct cum_arg\n   (GET_CODE (X) == CONST_INT && TARGET_H8300H\t\t\\\n    && 0xffff00 <= INTVAL (X) && INTVAL (X) <= 0xffffff)\n \n+/* Nonzero if X is a constant address suitable as an 16-bit absolute\n+   on the H8/300H.  */\n+\n+#define TINY_CONSTANT_ADDRESS_P(X)\t\t\t\t\\\n+  (GET_CODE (X) == CONST_INT && TARGET_H8300H\t\t\t\\\n+   && ((0xff8000 <= INTVAL (X) && INTVAL (X) <= 0xffffff)\t\\\n+       || (0x000000 <= INTVAL (X) && INTVAL (X) <= 0x007fff)))\n+\n /* 'U' if valid for a bset destination;\n    i.e. a register, register indirect, or the eightbit memory region\n    (a SYMBOL_REF with an SYMBOL_REF_FLAG set)."}]}