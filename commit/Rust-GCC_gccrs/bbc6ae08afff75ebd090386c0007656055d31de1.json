{"sha": "bbc6ae08afff75ebd090386c0007656055d31de1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJjNmFlMDhhZmZmNzVlYmQwOTAzODZjMDAwNzY1NjA1NWQzMWRlMQ==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@cygnus.com", "date": "1999-09-28T17:11:44Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "1999-09-28T17:11:44Z"}, "message": "Fix the handling of inline, unresolved type references.\n\nFrom-SVN: r29695", "tree": {"sha": "a7ade4fbc1f0eaecf4fe3244b7a74f82f4810cc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7ade4fbc1f0eaecf4fe3244b7a74f82f4810cc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbc6ae08afff75ebd090386c0007656055d31de1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbc6ae08afff75ebd090386c0007656055d31de1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbc6ae08afff75ebd090386c0007656055d31de1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbc6ae08afff75ebd090386c0007656055d31de1/comments", "author": null, "committer": null, "parents": [{"sha": "d25cf6335ed1126882c7f2a25dc0565628daa60a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d25cf6335ed1126882c7f2a25dc0565628daa60a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d25cf6335ed1126882c7f2a25dc0565628daa60a"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "2fe62ff42b51b8cb5c19b4f51ec35af1ce447802", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbc6ae08afff75ebd090386c0007656055d31de1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbc6ae08afff75ebd090386c0007656055d31de1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbc6ae08afff75ebd090386c0007656055d31de1", "patch": "@@ -1,3 +1,16 @@\n+Tue Sep 28 16:43:14 1999  Nick Clifton  <nickc@cygnus.com>\n+\n+\t* dwarf2out.c (add_abstract_origin_attribute): Abort if\n+\torigin_die is NULL.\n+\t(gen_inlined_enumeration_type_die): Do not abort if the type has\n+\tnot been writeen out.\n+\t(gen_inlined_structure_type_die): Do not abort if the type has\n+\tnot been writeen out.\n+\t(gen_inlined_union_type_die): Do not abort if the type has\n+\tnot been writeen out.\n+\t(gen_tagged_type_instantiation_die): Do not abort if the type\n+\thas not been written out.\n+\n Tue Sep 28 14:33:47 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \n \t* c-decl.c (init_decl_processing): If MD_INIT_BUILTINS is defined,"}, {"sha": "74f9d6dc611b97aee73c4689ebb65aeb27fedaf1", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbc6ae08afff75ebd090386c0007656055d31de1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbc6ae08afff75ebd090386c0007656055d31de1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=bbc6ae08afff75ebd090386c0007656055d31de1", "patch": "@@ -7644,11 +7644,15 @@ add_abstract_origin_attribute (die, origin)\n      register tree origin;\n {\n   dw_die_ref origin_die = NULL;\n+\n   if (TREE_CODE_CLASS (TREE_CODE (origin)) == 'd')\n     origin_die = lookup_decl_die (origin);\n   else if (TREE_CODE_CLASS (TREE_CODE (origin)) == 't')\n     origin_die = lookup_type_die (origin);\n \n+  if (origin_die == NULL)\n+    abort ();\n+  \n   add_AT_die_ref (die, DW_AT_abstract_origin, origin_die);\n }\n \n@@ -8139,9 +8143,8 @@ gen_inlined_enumeration_type_die (type, context_die)\n {\n   register dw_die_ref type_die = new_die (DW_TAG_enumeration_type,\n \t\t\t\t\t  scope_die_for (type, context_die));\n-\n-  if (!TREE_ASM_WRITTEN (type))\n-    abort ();\n+  /* We do not check for TREE_ASM_WRITTEN (type) being set, as the type may\n+     be incomplete and such types are not marked.  */\n   add_abstract_origin_attribute (type_die, type);\n }\n \n@@ -8154,9 +8157,8 @@ gen_inlined_structure_type_die (type, context_die)\n {\n   register dw_die_ref type_die = new_die (DW_TAG_structure_type,\n \t\t\t\t\t  scope_die_for (type, context_die));\n-\n-  if (!TREE_ASM_WRITTEN (type))\n-    abort ();\n+  /* We do not check for TREE_ASM_WRITTEN (type) being set, as the type may\n+     be incomplete and such types are not marked.  */\n   add_abstract_origin_attribute (type_die, type);\n }\n \n@@ -8169,9 +8171,8 @@ gen_inlined_union_type_die (type, context_die)\n {\n   register dw_die_ref type_die = new_die (DW_TAG_union_type,\n \t\t\t\t\t  scope_die_for (type, context_die));\n-\n-  if (!TREE_ASM_WRITTEN (type))\n-    abort ();\n+  /* We do not check for TREE_ASM_WRITTEN (type) being set, as the type may\n+     be incomplete and such types are not marked.  */\n   add_abstract_origin_attribute (type_die, type);\n }\n \n@@ -9342,10 +9343,12 @@ gen_tagged_type_instantiation_die (type, context_die)\n      this type (i.e. without any const or volatile qualifiers) so make sure\n      that we have the main variant (i.e. the unqualified version) of this\n      type now.  */\n-  if (type != type_main_variant (type)\n-      || !TREE_ASM_WRITTEN (type))\n+  if (type != type_main_variant (type))\n     abort ();\n \n+  /* Do not check TREE_ASM_WRITTEN(type) as it may not be set if this is\n+     an instance of an unresolved type.  */\n+  \n   switch (TREE_CODE (type))\n     {\n     case ERROR_MARK:\n@@ -9702,8 +9705,8 @@ dwarf2out_decl (decl)\n          on within the current translation unit). So here we just ignore all\n          file-scope function declarations which are not also definitions.  If \n          and when the debugger needs to know something about these functions,\n-         it wil have to hunt around and find the DWARF information associated \n-         with the definition of the function. Note that we can't just check\n+         it will have to hunt around and find the DWARF information associated \n+         with the definition of the function.  Note that we can't just check\n          `DECL_EXTERNAL' to find out which FUNCTION_DECL nodes represent\n          definitions and which ones represent mere declarations.  We have to\n          check `DECL_INITIAL' instead. That's because the C front-end"}]}