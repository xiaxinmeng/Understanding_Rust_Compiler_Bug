{"sha": "d8d27d73b0c7057dc4b97bbbaa59dc411a7e2dfc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhkMjdkNzNiMGM3MDU3ZGM0Yjk3YmJiYWE1OWRjNDExYTdlMmRmYw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-01-16T23:40:04Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-01-16T23:40:04Z"}, "message": "CheckboxGroup.java: Merged with Classpath.\n\n\t* java/awt/CheckboxGroup.java: Merged with Classpath.\n\t* java/awt/Checkbox.java: Merged with Classpath.\n\nFrom-SVN: r48933", "tree": {"sha": "b177b2d72927ff7c8e9d111caa98f9d38de2768d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b177b2d72927ff7c8e9d111caa98f9d38de2768d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8d27d73b0c7057dc4b97bbbaa59dc411a7e2dfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d27d73b0c7057dc4b97bbbaa59dc411a7e2dfc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8d27d73b0c7057dc4b97bbbaa59dc411a7e2dfc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8d27d73b0c7057dc4b97bbbaa59dc411a7e2dfc/comments", "author": null, "committer": null, "parents": [{"sha": "a82484a6744dc72488e49dd8b858d62f12bc147e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a82484a6744dc72488e49dd8b858d62f12bc147e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a82484a6744dc72488e49dd8b858d62f12bc147e"}], "stats": {"total": 748, "additions": 515, "deletions": 233}, "files": [{"sha": "12721cfc6e125952c9466f938f295cbb24c27d45", "filename": "libjava/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d27d73b0c7057dc4b97bbbaa59dc411a7e2dfc/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d27d73b0c7057dc4b97bbbaa59dc411a7e2dfc/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=d8d27d73b0c7057dc4b97bbbaa59dc411a7e2dfc", "patch": "@@ -1,5 +1,8 @@\n 2002-01-16  Tom Tromey  <tromey@redhat.com>\n \n+\t* java/awt/CheckboxGroup.java: Merged with Classpath.\n+\t* java/awt/Checkbox.java: Merged with Classpath.\n+\n \t* java/awt/Dimension.java: Updated copyright.  Added javadoc from\n \tClasspath.\n \t* java/awt/Point.java: Updated copyright."}, {"sha": "60795ae7405addc1696913f6ffc4b09c4a1f7c37", "filename": "libjava/java/awt/Checkbox.java", "status": "modified", "additions": 359, "deletions": 176, "changes": 535, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d27d73b0c7057dc4b97bbbaa59dc411a7e2dfc/libjava%2Fjava%2Fawt%2FCheckbox.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d27d73b0c7057dc4b97bbbaa59dc411a7e2dfc/libjava%2Fjava%2Fawt%2FCheckbox.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCheckbox.java?ref=d8d27d73b0c7057dc4b97bbbaa59dc411a7e2dfc", "patch": "@@ -1,186 +1,369 @@\n-/* Copyright (C) 2000, 2001  Free Software Foundation\n+/* Checkbox.java -- An AWT checkbox widget\n+   Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt;\n-import java.awt.event.*;\n+\n import java.awt.peer.CheckboxPeer;\n+import java.awt.peer.ComponentPeer;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+import java.io.Serializable;\n \n-/** This class implements a component which has an on/off state.  Two\n+/**\n+ * This class implements a component which has an on/off state.  Two\n  * or more Checkboxes can be grouped by a CheckboxGroup.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  * @author Tom Tromey <tromey@redhat.com>\n- * @date December 25, 2000\n  */\n-public class Checkbox extends Component implements ItemSelectable\n-{\n-  /** Create a new checkbox.\n-   * @param label The checkbox label.  A null value is the same as \"\";\n-   *              this is the default.\n-   * @param state The initial check state; defaults to false.\n-   * @param group The CheckboxGroup.  Defaults to null.\n-   */\n-  public Checkbox ()\n-  {\n-    this (null, null, false);\n-  }\n-\n-  public Checkbox (String label)\n-  {\n-    this (label, null, false);\n-  }\n-\n-  public Checkbox (String label, boolean state)\n-  {\n-    this (label, null, state);\n-  }\n-\n-  public Checkbox (String label, boolean state, CheckboxGroup group)\n-  {\n-    this (label, group, state);\n-  }\n-\n-  public Checkbox (String label, CheckboxGroup group, boolean state)\n-  {\n-    this.label = label;\n-    this.group = group;\n-    this.state = state;\n-  }\n-\n-  /** Add a listener for item events.\n-   * @param listener The listener to add.\n-   */\n-  public synchronized void addItemListener (ItemListener listener)\n-  {\n-    listeners = AWTEventMulticaster.add (listeners, listener);\n-  }\n-\n-  /** This creates the component's peer.  */\n-  public void addNotify ()\n-  {\n-    if (peer == null)\n-      peer = getToolkit ().createCheckbox (this);\n-    super.addNotify ();\n-  }\n-\n-  /** Returns the current CheckboxGroup associated with this\n-   * Checkbox.  */\n-  public CheckboxGroup getCheckboxGroup ()\n-  {\n-    return group;\n-  }\n-\n-  /** Returns the current label; might be null.  */\n-  public String getLabel ()\n-  {\n-    return label;\n-  }\n-\n-  /** Returns this checkbox's label if this checkbox is selected.  */\n-  public Object[] getSelectedObjects ()\n-  {\n-    Object[] r;\n-    if (state)\n-      {\n-\tr = new Object[1];\n-\tr[0] = label;\n-      }\n-    else\n-      r = new Object[0];\n-    return r;\n-  }\n-\n-  /** Returns the current state of this checkbox.  */\n-  public boolean getState ()\n-  {\n-    return state;\n-  }\n-\n-  /** Generates a String representation of this Checkbox's state.  */\n-  protected String paramString ()\n-  {\n-    return (\"Checkbox[\"\n-\t    + \"state=\" + state + \",\"\n-\t    + \"label=\" + label + \",\"\n-\t    + \"group=\" + group + \"]\");\n-  }\n-\n-  /** Process an event for this Checkbox.\n-   * @param event The event the process.\n-   */\n-  protected void processEvent (AWTEvent event) \n-  {\n-    if (event instanceof ItemEvent)\n-      processItemEvent ((ItemEvent) event);\n-    else\n-      super.processEvent (event);\n-  }\n-\n-  /** Process an item event for this Checkbox.\n-   * @param event The ItemEvent to process\n-   */\n-  protected void processItemEvent (ItemEvent event)\n-  {\n-    if (listeners != null)\n-      listeners.itemStateChanged (event);\n-  }\n-\n-  /** Remove an item listener.\n-   * @param listener Item listener to remove.\n-   */\n-  public synchronized void removeItemListener (ItemListener listener)\n-  {\n-    listeners = AWTEventMulticaster.remove (listeners, listener);\n-  }\n-\n-  /** Set this checkbox's group.\n-   * @param group The new group.  null means remove the Checkbox from\n-   *              its group.\n-   */\n-  public void setCheckboxGroup (CheckboxGroup group)\n-  {\n-    this.group = group;\n-    if (peer != null)\n-      {\n-\tCheckboxPeer cp = (CheckboxPeer) peer;\n-\tcp.setCheckboxGroup (group);\n-      }\n-  }\n-\n-  /** Set the checkbox's label.\n-   * @param label The new label\n-   */\n-  public synchronized void setLabel (String label)\n-  {\n-    this.label = label;\n-    if (peer != null)\n-      {\n-\tCheckboxPeer cp = (CheckboxPeer) peer;\n-\t// FIXME: unclear what to do here; we err on the side of\n-\t// caution.\n-\tcp.setLabel (label == null ? \"\" : label);\n-      }\n-  }\n-\n-  /** Set the checkbox's state.\n-   * @param state The new state.\n-   */\n-  public void setState (boolean state)\n-  {\n-    this.state = state;\n-    if (peer != null)\n-      {\n-\tCheckboxPeer cp = (CheckboxPeer) peer;\n-\tcp.setState (state);\n-      }\n-  }\n-\n-  private ItemListener listeners;\n-\n-  String label;\n-  CheckboxGroup group;\n-  boolean state;\n+public class Checkbox extends Component implements ItemSelectable, Serializable\n+{\n+\n+// FIXME: Need readObject/writeObject for this.\n+\n+/*\n+ * Static Variables\n+ */\n+\n+// Serialization Constant\n+private static final long serialVersionUID = 7270714317450821763L;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * @serial The checkbox group for this checkbox.\n+  */\n+private CheckboxGroup group;\n+\n+/**\n+  * @serial The label on this checkbox.\n+  */\n+private String label;\n+\n+/**\n+  * @serial The state of this checkbox.\n+  */\n+private boolean state;\n+\n+// The list of listeners for this object.\n+private transient ItemListener item_listeners;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>Checkbox</code> with no label,\n+  * an initial state of off, and that is not part of any checkbox group.\n+  */\n+public \n+Checkbox()\n+{\n+  this(\"\", false, null);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>Checkbox</code> with the specified\n+  * label, an initial state of off, and that is not part of any checkbox\n+  * group.\n+  *\n+  * @param label The label for this checkbox.\n+  */\n+public\n+Checkbox(String label)\n+{\n+  this(label, false, null);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>Checkbox</code> with the specified\n+  * label and initial state, and that is not part of any checkbox\n+  * group.\n+  *\n+  * @param label The label for this checkbox.\n+  * @param state The initial state of the checkbox, <code>true</code> for\n+  * on, <code>false</code> for off.\n+  */\n+public\n+Checkbox(String label, boolean state)\n+{\n+  this(label, state, null);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>Checkbox</code> with the specified\n+  * label, initial state, and checkbox group.\n+  *\n+  * @param label The label for this checkbox.\n+  * @param group The checkbox group for this box, or <code>null</code>\n+  * if there is no checkbox group.\n+  * @param state The initial state of the checkbox, <code>true</code> for\n+  * on, <code>false</code> for off.\n+  */\n+public\n+Checkbox(String label, CheckboxGroup group, boolean state)\n+{\n+  this(label, state, group);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Initializes a new instance of <code>Checkbox</code> with the specified\n+  * label, initial state, and checkbox group.\n+  *\n+  * @param label The label for this checkbox.\n+  * @param state The initial state of the checkbox, <code>true</code> for\n+  * on, <code>false</code> for off.\n+  * @param group The checkbox group for this box, or <code>null</code>\n+  * if there is no checkbox group.\n+  */\n+public\n+Checkbox(String label, boolean state, CheckboxGroup group)\n+{\n+  this.label = label;\n+  this.state = state;\n+  this.group = group;\n+}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * Returns the label for this checkbox.\n+  *\n+  * @return The label for this checkbox.\n+  */\n+public String\n+getLabel()\n+{\n+  return(label);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the label for this checkbox to the specified value.\n+  *\n+  * @param label The new checkbox label.\n+  */\n+public synchronized void\n+setLabel(String label)\n+{\n+  this.label = label;\n+  if (peer != null)\n+    {\n+      CheckboxPeer cp = (CheckboxPeer) peer;\n+      cp.setLabel(label);\n+    }\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the state of this checkbox.\n+  *\n+  * @return The state of this checkbox, which will be <code>true</code> for\n+  * on and <code>false</code> for off.\n+  */\n+public boolean\n+getState()\n+{\n+  return(state);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets the state of this checkbox to the specified value.\n+  *\n+  * @param state The new state of the checkbox, which will be <code>true</code>\n+  * for on or <code>false</code> for off.\n+  */\n+public synchronized void\n+setState(boolean state)\n+{\n+  this.state = state;\n+  if (peer != null)\n+    {\n+      CheckboxPeer cp = (CheckboxPeer) peer;\n+      cp.setState (state);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns an array of length one containing the checkbox label if this\n+  * checkbox is selected.  Otherwise <code>null</code> is returned.\n+  *\n+  * @return The selection state of this checkbox.\n+  */\n+public Object[]\n+getSelectedObjects()\n+{\n+  if (state == false)\n+    return(null);\n+\n+  Object[] objs = new Object[1];\n+  objs[0] = label;\n+\n+  return(objs);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the checkbox group this object is a member of, if any.\n+  *\n+  * @return This object's checkbox group, of <code>null</code> if it is\n+  * not a member of any group.\n+  */\n+public CheckboxGroup\n+getCheckboxGroup()\n+{\n+  return(group);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Sets this object's checkbox group to the specified group.\n+  *\n+  * @param group The new checkbox group, or <code>null</code> to make this\n+  * object part of no checkbox group.\n+  */\n+public synchronized void\n+setCheckboxGroup(CheckboxGroup group)\n+{\n+  this.group = group;\n+  if (peer != null)\n+    {\n+      CheckboxPeer cp = (CheckboxPeer) peer;\n+      cp.setCheckboxGroup (group);\n+    }\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Creates this object's native peer.\n+  */\n+public void\n+addNotify()\n+{\n+  if (peer == null)\n+    peer = getToolkit ().createCheckbox (this);\n+  super.addNotify ();\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Adds a new listeners to the list of registered listeners for this object.\n+  *\n+  * @param listener The new listener to add.\n+  */\n+public synchronized void\n+addItemListener(ItemListener listener)\n+{\n+  item_listeners = AWTEventMulticaster.add(item_listeners, listener);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Removes a listener from the list of registered listeners for this object.\n+  *\n+  * @param listener The listener to remove.\n+  */\n+public synchronized void\n+removeItemListener(ItemListener listener)\n+{\n+  item_listeners = AWTEventMulticaster.remove(item_listeners, listener);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Processes this event by calling <code>processItemEvent()</code> if it\n+  * is any instance of <code>ItemEvent</code>.  Otherwise it is passed to\n+  * the superclass for processing.\n+  *\n+  * @param event The event to process.\n+  */\n+protected void\n+processEvent(AWTEvent event)\n+{\n+  if (event instanceof ItemEvent)\n+    processItemEvent((ItemEvent)event);\n+  else\n+    super.processEvent(event);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Processes this event by dispatching it to any registered listeners.\n+  *\n+  * @param event The <code>ItemEvent</code> to process.\n+  */\n+protected void\n+processItemEvent(ItemEvent event)\n+{\n+  if (item_listeners != null)\n+    item_listeners.itemStateChanged(event);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a debugging string for this object.\n+  */\n+protected String\n+paramString()\n+{\n+  return(getClass().getName() + \"[label=\" + label + \",state=\" + state\n+\t + \",group=\" + group + \"]\");\n+}\n+\n+} // class Checkbox "}, {"sha": "bc6ef4490ef54a16b4531441679614dbbe4f352d", "filename": "libjava/java/awt/CheckboxGroup.java", "status": "modified", "additions": 153, "deletions": 57, "changes": 210, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8d27d73b0c7057dc4b97bbbaa59dc411a7e2dfc/libjava%2Fjava%2Fawt%2FCheckboxGroup.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8d27d73b0c7057dc4b97bbbaa59dc411a7e2dfc/libjava%2Fjava%2Fawt%2FCheckboxGroup.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCheckboxGroup.java?ref=d8d27d73b0c7057dc4b97bbbaa59dc411a7e2dfc", "patch": "@@ -1,66 +1,162 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* CheckboxGroup.java -- A grouping class for checkboxes.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.awt;\n \n-import java.io.Serializable;\n+/**\n+  * This class if for combining checkboxes into groups so that only\n+  * one checkbox in the group can be selected at any one time.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Tom Tromey <tromey@redhat.com>\n+  */\n+public class CheckboxGroup implements java.io.Serializable\n+{\n+\n+/*\n+ * Static Variables\n+ */\n+\n+// Serialization constant\n+private static final long serialVersionUID = 3729780091441768983L;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Instance Variables\n+ */\n+\n+/**\n+  * @serial The currently selected checkbox.\n+  */\n+private Checkbox selectedCheckbox;\n+\n+/*************************************************************************/\n+\n+/*\n+ * Constructors\n+ */\n+\n+/**\n+  * Initializes a new instance of <code>CheckboxGroup</code>.\n+  */\n+public\n+CheckboxGroup()\n+{\n+}\n+\n+/*************************************************************************/\n \n-/** This class is used to groups checkbox components.\n- * @author Tom Tromey <tromey@redhat.com>\n- * @date December 25, 2000\n+/*\n+ * Instance Methods\n  */\n-public class CheckboxGroup implements Serializable\n+\n+/**\n+  * Returns the currently selected checkbox, or <code>null</code> if none\n+  * of the checkboxes in this group are selected.\n+  *\n+  * @return The selected checkbox.\n+  */\n+public Checkbox\n+getSelectedCheckbox()\n+{\n+  return(selectedCheckbox);\n+} \n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the currently selected checkbox, or <code>null</code> if none\n+  * of the checkboxes in this group are selected.\n+  *\n+  * @return The selected checkbox.\n+  *\n+  * @deprecated This method is deprecated in favor of \n+  * <code>getSelectedCheckbox()</code>.\n+  */\n+public Checkbox\n+getCurrent()\n+{\n+  return(selectedCheckbox);\n+} \n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified checkbox to be the selected on in this\n+  * group, and unsets all others.\n+  *\n+  * @param selectedCheckbox The new selected checkbox.\n+  */\n+public void\n+setSelectedCheckbox(Checkbox selectedCheckbox)\n {\n-  // Current set checkbox.\n-  Checkbox selectedCheckbox;\n-\n-  /** Create a new instance of CheckboxGroup.  */\n-  public CheckboxGroup ()\n-  {\n-  }\n-\n-  /** Returns the currently selected checkbox in the group.\n-   * @deprecated\n-   */\n-  public Checkbox getCurrent ()\n-  {\n-    return getSelectedCheckbox ();\n-  }\n-\n-  /** Returns the currently selected checkbox in the group.  */\n-  public Checkbox getSelectedCheckbox ()\n-  {\n-    return selectedCheckbox;\n-  }\n-\n-  /** Set the selected checkbox.\n-   * @deprecated\n-   */\n-  public synchronized void setCurrent (Checkbox checkbox)\n-  {\n-    setSelectedCheckbox (checkbox);\n-  }\n-\n-  /** Set the selected checkbox.  */\n-  public synchronized void setSelectedCheckbox (Checkbox checkbox)\n-  {\n-    if (checkbox != null && checkbox.group != this)\n-      return;\n-\n-    selectedCheckbox.setState (false);\n-    selectedCheckbox = checkbox;\n-    if (checkbox != null)\n-      checkbox.setState (true);\n-  }\n-\n-  /** Return String representation of this class and current Checkbox.  */\n-  public String toString ()\n-  {\n-    return \"[CheckboxGroup: \" + selectedCheckbox + \"]\";\n-  }\n+  if (this.selectedCheckbox != null)\n+    {\n+      if (this.selectedCheckbox.getCheckboxGroup() != this)\n+        return;\n+\n+      this.selectedCheckbox.setState(false);\n+    }\n+\n+  this.selectedCheckbox = selectedCheckbox;\n+  if (selectedCheckbox != null)\n+    selectedCheckbox.setState(true);\n }\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method sets the specified checkbox to be the selected on in this\n+  * group, and unsets all others.\n+  *\n+  * @param selectedCheckbox The new selected checkbox.\n+  *\n+  * @deprecated This method is deprecated in favor of\n+  * <code>setSelectedCheckbox()</code>.\n+  */\n+public void\n+setCurrent(Checkbox selectedCheckbox)\n+{\n+  setSelectedCheckbox(selectedCheckbox);\n+}\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns a string representation of this checkbox group.\n+  *\n+  * @return A string representation of this checkbox group.\n+  */\n+public String\n+toString()\n+{\n+  return(getClass().getName() + \"[selectedCheckbox=\" + selectedCheckbox + \"]\");\n+}\n+\n+} // class CheckboxGroup \n+"}]}