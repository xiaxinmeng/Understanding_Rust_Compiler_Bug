{"sha": "49ca372c8979cf67eef0408309c09d0a2fa52419", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDljYTM3MmM4OTc5Y2Y2N2VlZjA0MDgzMDljMDlkMGEyZmE1MjQxOQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-25T17:14:41Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-25T17:14:41Z"}, "message": "ip2k.c (TARGET_STRUCT_VALUE_RTX): New.\n\n\t* config/ip2k/ip2k.c (TARGET_STRUCT_VALUE_RTX): New.\n\t(TARGET_RETURN_IN_MEMORY): Likewise.\n\t(TARGET_SETUP_INCOMING_VARARGS): Likewise.\n\t(ip2k_return_in_memory): Likewise.\n\t(ip2k_setup_incoming_varargs): Likewise.\n\t* config/ip2k/ip2k.h (RETURN_IN_MEMORY): Remove.\n\t(STRUCT_VALUE): Likewise.\n\t(STRUCT_VALUE_INCOMING): Likewise.\n\t(SETUP_INCOMING_VARARGS): Likewise.\n\nFrom-SVN: r76566", "tree": {"sha": "8b90dc97ba36d389c96334d1840ad2fe66f1c8ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b90dc97ba36d389c96334d1840ad2fe66f1c8ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49ca372c8979cf67eef0408309c09d0a2fa52419", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ca372c8979cf67eef0408309c09d0a2fa52419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49ca372c8979cf67eef0408309c09d0a2fa52419", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49ca372c8979cf67eef0408309c09d0a2fa52419/comments", "author": null, "committer": null, "parents": [{"sha": "b069302cd278cf9eeb6861b3edc105baad575452", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b069302cd278cf9eeb6861b3edc105baad575452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b069302cd278cf9eeb6861b3edc105baad575452"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "fd6e414c34ad5557102e3fb9ac85f4df12d608ec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ca372c8979cf67eef0408309c09d0a2fa52419/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ca372c8979cf67eef0408309c09d0a2fa52419/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=49ca372c8979cf67eef0408309c09d0a2fa52419", "patch": "@@ -1,3 +1,15 @@\n+2004-01-25  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/ip2k/ip2k.c (TARGET_STRUCT_VALUE_RTX): New.\n+\t(TARGET_RETURN_IN_MEMORY): Likewise.\n+\t(TARGET_SETUP_INCOMING_VARARGS): Likewise.\n+\t(ip2k_return_in_memory): Likewise.\n+\t(ip2k_setup_incoming_varargs): Likewise.\n+\t* config/ip2k/ip2k.h (RETURN_IN_MEMORY): Remove.\n+\t(STRUCT_VALUE): Likewise.\n+\t(STRUCT_VALUE_INCOMING): Likewise.\n+\t(SETUP_INCOMING_VARARGS): Likewise.\n+\n 2004-01-25  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/avr/avr.c (TARGET_STRUCT_VALUE_RTX): New."}, {"sha": "53f71b38f1aac66c5a432dcfdf6c00a4df9edc1c", "filename": "gcc/config/ip2k/ip2k.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ca372c8979cf67eef0408309c09d0a2fa52419/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ca372c8979cf67eef0408309c09d0a2fa52419/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=49ca372c8979cf67eef0408309c09d0a2fa52419", "patch": "@@ -1,6 +1,6 @@\n /* Subroutines used for code generation on Ubicom IP2022\n    Communications Controller.\n-   Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc and Ubicom, Inc.\n \n    This file is part of GCC.\n@@ -81,6 +81,9 @@ static tree ip2k_handle_fndecl_attribute (tree *, tree, tree, int, bool *);\n static bool ip2k_rtx_costs (rtx, int, int, int *);\n static int ip2k_address_cost (rtx);\n static void ip2k_init_libfuncs (void);\n+static bool ip2k_return_in_memory (tree, tree);\n+static void ip2k_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t\t tree, int *, int);\n \n const struct attribute_spec ip2k_attribute_table[];\n \n@@ -112,6 +115,14 @@ const struct attribute_spec ip2k_attribute_table[];\n #undef TARGET_INIT_LIBFUNCS\n #define TARGET_INIT_LIBFUNCS ip2k_init_libfuncs\n \n+#undef TARGET_STRUCT_VALUE_RTX\n+#define TARGET_STRUCT_VALUE_RTX hook_rtx_tree_int_null\n+#undef TARGET_RETURN_IN_MEMORY\n+#define TARGET_RETURN_IN_MEMORY ip2k_return_in_memory\n+\n+#undef TARGET_SETUP_INCOMING_VARARGS\n+#define TARGET_SETUP_INCOMING_VARARGS ip2k_setup_incoming_varargs\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Prologue/Epilogue size in words.  */\n@@ -6184,3 +6195,19 @@ ip2k_unsigned_comparison_operator (rtx op, enum machine_mode mode)\n   return (comparison_operator (op, mode)\n           && unsigned_condition (GET_CODE (op)) == GET_CODE (op));\n }\n+\n+static bool\n+ip2k_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n+{\n+  return (TYPE_MODE (type) == BLKmode) ? int_size_in_bytes (type) > 8 : 0;\n+}\n+\n+static void\n+ip2k_setup_incoming_varargs (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n+\t\t\t     enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t\t     tree type ATTRIBUTE_UNUSED,\n+\t\t\t     int *pretend_arg_size,\n+\t\t\t     int second_time ATTRIBUTE_UNUSED)\n+{\n+  *pretend_arg_size = 0;\n+}"}, {"sha": "70eecdec2aaaeccac35c5c2224f3cc668768edc2", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49ca372c8979cf67eef0408309c09d0a2fa52419/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49ca372c8979cf67eef0408309c09d0a2fa52419/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=49ca372c8979cf67eef0408309c09d0a2fa52419", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GCC,\n    For Ubicom IP2022 Communications Controller\n \n-   Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Red Hat, Inc and Ubicom, Inc.\n \n This file is part of GCC.\n@@ -462,24 +462,13 @@ enum reg_class {\n \n #define FUNCTION_VALUE_REGNO_P(N) ((N) == REG_RESULT)\n \n-#define RETURN_IN_MEMORY(TYPE) \\\n-  ((TYPE_MODE (TYPE) == BLKmode) ? int_size_in_bytes (TYPE) > 8 : 0)\n-\n /* Indicate that large structures are passed by reference.  */\n #define FUNCTION_ARG_PASS_BY_REFERENCE(CUM,MODE,TYPE,NAMED)\t0\n \n #define DEFAULT_PCC_STRUCT_RETURN 0\n \n-#define STRUCT_VALUE 0\n-\n-#define STRUCT_VALUE_INCOMING 0\n-\n #define EPILOGUE_USES(REGNO) 0\n \n-#define SETUP_INCOMING_VARARGS(ARGS_SO_FAR,MODE,TYPE,\t\t\\\n-\t\t\t       PRETEND_ARGS_SIZE,SECOND_TIME)\t\\\n-  ((PRETEND_ARGS_SIZE) = (0))\n-\n \n /*  Hmmm.  We don't actually like constants as addresses - they always need\n     to be loaded to a register, except for function calls which take an"}]}