{"sha": "8456a4cd96823704beec0b863010cd0dcc8dd591", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ1NmE0Y2Q5NjgyMzcwNGJlZWMwYjg2MzAxMGNkMGRjYzhkZDU5MQ==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-02-18T23:27:00Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-04-28T20:13:23Z"}, "message": "aarch64: Use RTL builtins for vcvtx intrinsics\n\nRewrite vcvtx Neon intrinsics to use RTL builtins rather than inline\nassembly code, allowing for better scheduling and optimization.\n\ngcc/ChangeLog:\n\n2021-02-18  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add\n\tfloat_trunc_rodd builtin generator macros.\n\t* config/aarch64/aarch64-simd.md (aarch64_float_trunc_rodd_df):\n\tDefine.\n\t(aarch64_float_trunc_rodd_lo_v2sf): Define.\n\t(aarch64_float_trunc_rodd_hi_v4sf_le): Define.\n\t(aarch64_float_trunc_rodd_hi_v4sf_be): Define.\n\t(aarch64_float_trunc_rodd_hi_v4sf): Define.\n\t* config/aarch64/arm_neon.h (vcvtx_f32_f64): Use RTL builtin\n\tinstead of inline asm.\n\t(vcvtx_high_f32_f64): Likewise.\n\t(vcvtxd_f32_f64): Likewise.\n\t* config/aarch64/iterators.md: Add FCVTXN unspec.", "tree": {"sha": "1454de6f88c91bd867142e3be5dcbc20c5cd5338", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1454de6f88c91bd867142e3be5dcbc20c5cd5338"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8456a4cd96823704beec0b863010cd0dcc8dd591", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8456a4cd96823704beec0b863010cd0dcc8dd591", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8456a4cd96823704beec0b863010cd0dcc8dd591", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8456a4cd96823704beec0b863010cd0dcc8dd591/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4362c9c88d9092a6585cd061e5535cb2f0453d13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4362c9c88d9092a6585cd061e5535cb2f0453d13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4362c9c88d9092a6585cd061e5535cb2f0453d13"}], "stats": {"total": 80, "additions": 62, "deletions": 18}, "files": [{"sha": "f01a1b439e1fb67027932dbca56eca9826a203a0", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8456a4cd96823704beec0b863010cd0dcc8dd591/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8456a4cd96823704beec0b863010cd0dcc8dd591/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=8456a4cd96823704beec0b863010cd0dcc8dd591", "patch": "@@ -632,6 +632,10 @@\n   VAR1 (UNOP, float_extend_lo_,  0, FP, v4sf)\n   BUILTIN_VDF (UNOP, float_truncate_lo_, 0, FP)\n \n+  VAR1 (UNOP, float_trunc_rodd_, 0, FP, df)\n+  VAR1 (UNOP, float_trunc_rodd_lo_, 0, FP, v2sf)\n+  VAR1 (BINOP, float_trunc_rodd_hi_, 0, FP, v4sf)\n+\n   /* Implemented by aarch64_ld1<VALL_F16:mode>.  */\n   BUILTIN_VALL_F16 (LOAD1, ld1, 0, LOAD)\n   VAR1(STORE1P, ld1, 0, ALL, v2di)"}, {"sha": "72f429c75150c4b067ec5e8b9ca6ec514b5d74d8", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8456a4cd96823704beec0b863010cd0dcc8dd591/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8456a4cd96823704beec0b863010cd0dcc8dd591/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=8456a4cd96823704beec0b863010cd0dcc8dd591", "patch": "@@ -2981,6 +2981,60 @@\n \n ;; Float narrowing operations.\n \n+(define_insn \"aarch64_float_trunc_rodd_df\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=w\")\n+\t(unspec:SF [(match_operand:DF 1 \"register_operand\" \"w\")]\n+\t\tUNSPEC_FCVTXN))]\n+  \"TARGET_SIMD\"\n+  \"fcvtxn\\\\t%s0, %d1\"\n+  [(set_attr \"type\" \"neon_fp_cvt_narrow_d_q\")]\n+)\n+\n+(define_insn \"aarch64_float_trunc_rodd_lo_v2sf\"\n+  [(set (match_operand:V2SF 0 \"register_operand\" \"=w\")\n+\t(unspec:V2SF [(match_operand:V2DF 1 \"register_operand\" \"w\")]\n+\t\tUNSPEC_FCVTXN))]\n+  \"TARGET_SIMD\"\n+  \"fcvtxn\\\\t%0.2s, %1.2d\"\n+  [(set_attr \"type\" \"neon_fp_cvt_narrow_d_q\")]\n+)\n+\n+(define_insn \"aarch64_float_trunc_rodd_hi_v4sf_le\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+\t(vec_concat:V4SF\n+\t  (match_operand:V2SF 1 \"register_operand\" \"0\")\n+\t  (unspec:V2SF [(match_operand:V2DF 2 \"register_operand\" \"w\")]\n+\t\tUNSPEC_FCVTXN)))]\n+  \"TARGET_SIMD && !BYTES_BIG_ENDIAN\"\n+  \"fcvtxn2\\\\t%0.4s, %2.2d\"\n+  [(set_attr \"type\" \"neon_fp_cvt_narrow_d_q\")]\n+)\n+\n+(define_insn \"aarch64_float_trunc_rodd_hi_v4sf_be\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")\n+\t(vec_concat:V4SF\n+\t  (unspec:V2SF [(match_operand:V2DF 2 \"register_operand\" \"w\")]\n+\t\tUNSPEC_FCVTXN)\n+\t  (match_operand:V2SF 1 \"register_operand\" \"0\")))]\n+  \"TARGET_SIMD && BYTES_BIG_ENDIAN\"\n+  \"fcvtxn2\\\\t%0.4s, %2.2d\"\n+  [(set_attr \"type\" \"neon_fp_cvt_narrow_d_q\")]\n+)\n+\n+(define_expand \"aarch64_float_trunc_rodd_hi_v4sf\"\n+  [(match_operand:V4SF 0 \"register_operand\")\n+   (match_operand:V2SF 1 \"register_operand\")\n+   (match_operand:V2DF 2 \"register_operand\")]\n+  \"TARGET_SIMD\"\n+{\n+  rtx (*gen) (rtx, rtx, rtx) = BYTES_BIG_ENDIAN\n+\t\t\t     ? gen_aarch64_float_trunc_rodd_hi_v4sf_be\n+\t\t\t     : gen_aarch64_float_trunc_rodd_hi_v4sf_le;\n+  emit_insn (gen (operands[0], operands[1], operands[2]));\n+  DONE;\n+}\n+)\n+\n (define_insn \"aarch64_float_truncate_lo_<mode>\"\n   [(set (match_operand:VDF 0 \"register_operand\" \"=w\")\n       (float_truncate:VDF"}, {"sha": "4b8ec529f19826f28800741014de0c2ccff44e52", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8456a4cd96823704beec0b863010cd0dcc8dd591/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8456a4cd96823704beec0b863010cd0dcc8dd591/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=8456a4cd96823704beec0b863010cd0dcc8dd591", "patch": "@@ -7014,36 +7014,21 @@ __extension__ extern __inline float32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vcvtx_f32_f64 (float64x2_t __a)\n {\n-  float32x2_t __result;\n-  __asm__ (\"fcvtxn %0.2s,%1.2d\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_float_trunc_rodd_lo_v2sf (__a);\n }\n \n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vcvtx_high_f32_f64 (float32x2_t __a, float64x2_t __b)\n {\n-  float32x4_t __result;\n-  __asm__ (\"fcvtxn2 %0.4s,%1.2d\"\n-           : \"=w\"(__result)\n-           : \"w\" (__b), \"0\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_float_trunc_rodd_hi_v4sf (__a, __b);\n }\n \n __extension__ extern __inline float32_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vcvtxd_f32_f64 (float64_t __a)\n {\n-  float32_t __result;\n-  __asm__ (\"fcvtxn %s0,%d1\"\n-           : \"=w\"(__result)\n-           : \"w\"(__a)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_float_trunc_rodd_df (__a);\n }\n \n __extension__ extern __inline float32x2_t"}, {"sha": "3d66e6384f35c54ecd5255f7f376b54f9ba8dd7c", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8456a4cd96823704beec0b863010cd0dcc8dd591/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8456a4cd96823704beec0b863010cd0dcc8dd591/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=8456a4cd96823704beec0b863010cd0dcc8dd591", "patch": "@@ -861,6 +861,7 @@\n     UNSPEC_BFCVTN      ; Used in aarch64-simd.md.\n     UNSPEC_BFCVTN2     ; Used in aarch64-simd.md.\n     UNSPEC_BFCVT       ; Used in aarch64-simd.md.\n+    UNSPEC_FCVTXN\t; Used in aarch64-simd.md.\n ])\n \n ;; ------------------------------------------------------------------"}]}