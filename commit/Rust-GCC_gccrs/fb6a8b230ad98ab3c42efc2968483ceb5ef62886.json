{"sha": "fb6a8b230ad98ab3c42efc2968483ceb5ef62886", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI2YThiMjMwYWQ5OGFiM2M0MmVmYzI5Njg0ODNjZWI1ZWY2Mjg4Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-24T14:23:23Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-24T14:24:33Z"}, "message": "c++: P1937R2 - Fixing inconsistencies between const{expr,eval} functions\n\nThe following patch implements my understanding of P1937R2, though I wonder\nif https://eel.is/c++draft/expr.const#14.example-1 shouldn't have been\nalso either removed or adjusted by the P1937R2 paper.\n\n2020-02-24  Jakub Jelinek  <jakub@redhat.com>\n\n\tP1937R2 - Fixing inconsistencies between const{expr,eval} functions\n\t* call.c (build_over_call): Don't evaluate immediate functions in\n\tunevaluated operands.\n\n\t* g++.dg/ext/consteval1.C: Change dg-{message,error} into dg-bogus.\n\t* g++.dg/cpp2a/consteval6.C: Likewise.\n\t* g++.dg/cpp2a/consteval3.C: Change dg-error for unevaluated operands\n\tinto dg-bogus.", "tree": {"sha": "8a14c72ec40ebc1023260c067e1602c7f4a62d1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a14c72ec40ebc1023260c067e1602c7f4a62d1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb6a8b230ad98ab3c42efc2968483ceb5ef62886", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb6a8b230ad98ab3c42efc2968483ceb5ef62886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb6a8b230ad98ab3c42efc2968483ceb5ef62886", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb6a8b230ad98ab3c42efc2968483ceb5ef62886/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8566286eaeb9a977339df88212826150767f1203", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8566286eaeb9a977339df88212826150767f1203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8566286eaeb9a977339df88212826150767f1203"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "831c7177d6e18c91338f00744b8554c0ced4b506", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb6a8b230ad98ab3c42efc2968483ceb5ef62886/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb6a8b230ad98ab3c42efc2968483ceb5ef62886/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fb6a8b230ad98ab3c42efc2968483ceb5ef62886", "patch": "@@ -1,3 +1,9 @@\n+2020-02-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tP1937R2 - Fixing inconsistencies between const{expr,eval} functions\n+\t* call.c (build_over_call): Don't evaluate immediate functions in\n+\tunevaluated operands.\n+\n 2020-02-24  Jason Merrill  <jason@redhat.com>\n \n \tP0780R2: Resolve lambda init-capture pack grammar."}, {"sha": "ed5338adec904868e1fe41d8edfe3a036ae1f15c", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb6a8b230ad98ab3c42efc2968483ceb5ef62886/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb6a8b230ad98ab3c42efc2968483ceb5ef62886/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=fb6a8b230ad98ab3c42efc2968483ceb5ef62886", "patch": "@@ -8425,6 +8425,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \tcurrent_function_returns_abnormally = 1;\n       if (TREE_CODE (fn) == FUNCTION_DECL\n \t  && DECL_IMMEDIATE_FUNCTION_P (fn)\n+\t  && cp_unevaluated_operand == 0\n \t  && (current_function_decl == NULL_TREE\n \t      || !DECL_IMMEDIATE_FUNCTION_P (current_function_decl))\n \t  && (current_binding_level->kind != sk_function_parms\n@@ -9061,6 +9062,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n       tree fndecl = STRIP_TEMPLATE (TREE_OPERAND (fn, 0));\n       if (TREE_CODE (fndecl) == FUNCTION_DECL\n \t  && DECL_IMMEDIATE_FUNCTION_P (fndecl)\n+\t  && cp_unevaluated_operand == 0\n \t  && (current_function_decl == NULL_TREE\n \t      || !DECL_IMMEDIATE_FUNCTION_P (current_function_decl))\n \t  && (current_binding_level->kind != sk_function_parms"}, {"sha": "d92e40ec279b07cf6804868c4d935ee53d79e803", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb6a8b230ad98ab3c42efc2968483ceb5ef62886/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb6a8b230ad98ab3c42efc2968483ceb5ef62886/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fb6a8b230ad98ab3c42efc2968483ceb5ef62886", "patch": "@@ -1,3 +1,11 @@\n+2020-02-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tP1937R2 - Fixing inconsistencies between const{expr,eval} functions\n+\t* g++.dg/ext/consteval1.C: Change dg-{message,error} into dg-bogus.\n+\t* g++.dg/cpp2a/consteval6.C: Likewise.\n+\t* g++.dg/cpp2a/consteval3.C: Change dg-error for unevaluated operands\n+\tinto dg-bogus.\n+\n 2020-02-24  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \tPR lto/78353"}, {"sha": "edd3a7310b2ffd628ad8d8431ce4488f43eed712", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval3.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb6a8b230ad98ab3c42efc2968483ceb5ef62886/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb6a8b230ad98ab3c42efc2968483ceb5ef62886/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval3.C?ref=fb6a8b230ad98ab3c42efc2968483ceb5ef62886", "patch": "@@ -33,9 +33,9 @@ struct V { consteval int v = 5; };\t// { dg-error \"non-static data member 'v' dec\n struct W { consteval static int w; };\t// { dg-error \"static data member 'w' declared 'consteval'\" }\n int i = sizeof (&f6);\t\t\t// { dg-error \"taking address of an immediate function 'consteval int f6\\\\(int\\\\)'\" }\n using j = decltype (&f6);\t\t// { dg-error \"taking address of an immediate function 'consteval int f6\\\\(int\\\\)'\" }\n-int k = sizeof (f6 (d));\t\t// { dg-error \"the value of 'd' is not usable in a constant expression\" }\n-using l = decltype (f6 (d));\t\t// { dg-error \"the value of 'd' is not usable in a constant expression\" }\n-bool m = noexcept (f6 (d));\t\t// { dg-error \"the value of 'd' is not usable in a constant expression\" }\n+int k = sizeof (f6 (d));\t\t// { dg-bogus \"the value of 'd' is not usable in a constant expression\" }\n+using l = decltype (f6 (d));\t\t// { dg-bogus \"the value of 'd' is not usable in a constant expression\" }\n+bool m = noexcept (f6 (d));\t\t// { dg-bogus \"the value of 'd' is not usable in a constant expression\" }\n namespace std {\n using size_t = decltype (sizeof (0));\n }"}, {"sha": "cddb73dfaa2e589d03304b2e5a0bb6287e8c431b", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval6.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb6a8b230ad98ab3c42efc2968483ceb5ef62886/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb6a8b230ad98ab3c42efc2968483ceb5ef62886/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval6.C?ref=fb6a8b230ad98ab3c42efc2968483ceb5ef62886", "patch": "@@ -3,7 +3,7 @@\n \n struct A {\n   constexpr A () {}\n-  A (A const&) = delete;\t// { dg-message \"declared here\" }\n+  A (A const&) = delete;\t// { dg-bogus \"declared here\" }\n };\n \n template<typename T>\n@@ -19,8 +19,8 @@ consteval void\n bar ()\n {\n   T t;\n-  T u = t;\t// { dg-error \"use of deleted function\" }\n+  T u = t;\t// { dg-bogus \"use of deleted function\" }\n }\n \n using B = decltype (foo<A> ());\n-using C = decltype (bar<A> ());\t// { dg-message \"required from here\" }\n+using C = decltype (bar<A> ());\t// { dg-bogus \"required from here\" }"}, {"sha": "cf6f088a00f527b5bb069798c41df1795eb9b4ec", "filename": "gcc/testsuite/g++.dg/ext/consteval1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb6a8b230ad98ab3c42efc2968483ceb5ef62886/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconsteval1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb6a8b230ad98ab3c42efc2968483ceb5ef62886/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconsteval1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconsteval1.C?ref=fb6a8b230ad98ab3c42efc2968483ceb5ef62886", "patch": "@@ -2,5 +2,5 @@\n // { dg-options \"-std=c++2a\" }\n \n consteval int foo (int x) { return x; }\n-int d = 6;\t\t\t// { dg-message \"'int d' is not const\" }\n-bool e = __builtin_has_attribute (foo (d), packed);\t// { dg-error \"the value of 'd' is not usable in a constant expression\" }\n+int d = 6;\t\t\t// { dg-bogus \"'int d' is not const\" }\n+bool e = __builtin_has_attribute (foo (d), packed);\t// { dg-bogus \"the value of 'd' is not usable in a constant expression\" }"}]}