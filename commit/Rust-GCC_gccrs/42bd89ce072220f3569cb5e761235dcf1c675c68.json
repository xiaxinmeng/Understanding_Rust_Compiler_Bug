{"sha": "42bd89ce072220f3569cb5e761235dcf1c675c68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDJiZDg5Y2UwNzIyMjBmMzU2OWNiNWU3NjEyMzVkY2YxYzY3NWM2OA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2017-06-28T09:22:30Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2017-06-28T09:22:30Z"}, "message": "Simplify 3*x == 3*y for wrapping types\n\n2017-06-28  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* match.pd ((X & ~Y) | (~X & Y)): Generalize to + and ^.\n\t(x * C EQ/NE y * C): New transformation.\n\ngcc/testsuite/\n\t* gcc.dg/tree-ssa/addadd.c: Remove test duplicated in addadd-2.c.\n\t* gcc.dg/tree-ssa/mulcmp-1.c: New file.\n\nFrom-SVN: r249732", "tree": {"sha": "5fb4ca44d3407af3a15cbc4392d4ebc6933067b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fb4ca44d3407af3a15cbc4392d4ebc6933067b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42bd89ce072220f3569cb5e761235dcf1c675c68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42bd89ce072220f3569cb5e761235dcf1c675c68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42bd89ce072220f3569cb5e761235dcf1c675c68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42bd89ce072220f3569cb5e761235dcf1c675c68/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "883312dc79806f513275b72502231c751c14ff72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/883312dc79806f513275b72502231c751c14ff72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/883312dc79806f513275b72502231c751c14ff72"}], "stats": {"total": 52, "additions": 39, "deletions": 13}, "files": [{"sha": "51ce1bfb3482a5be2e9cff0c5fcf3ac5ad8e650e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42bd89ce072220f3569cb5e761235dcf1c675c68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42bd89ce072220f3569cb5e761235dcf1c675c68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42bd89ce072220f3569cb5e761235dcf1c675c68", "patch": "@@ -1,3 +1,8 @@\n+2017-06-28  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* match.pd ((X & ~Y) | (~X & Y)): Generalize to + and ^.\n+\t(x * C EQ/NE y * C): New transformation.\n+\n 2017-06-28  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* genmultilib (combination_space): Accept '+' in option names."}, {"sha": "ede5504bdf1deccd2a43c8fa115324be8825b7bf", "filename": "gcc/match.pd", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42bd89ce072220f3569cb5e761235dcf1c675c68/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42bd89ce072220f3569cb5e761235dcf1c675c68/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=42bd89ce072220f3569cb5e761235dcf1c675c68", "patch": "@@ -642,14 +642,15 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (minus (bit_and:cs @0 @1) (bit_and:cs @0 (bit_not @1)))\n   (minus @1 (bit_xor @0 @1)))\n \n-/* Simplify (X & ~Y) | (~X & Y) -> X ^ Y.  */\n-(simplify\n- (bit_ior (bit_and:c @0 (bit_not @1)) (bit_and:c (bit_not @0) @1))\n-  (bit_xor @0 @1))\n-(simplify\n- (bit_ior:c (bit_and @0 INTEGER_CST@2) (bit_and (bit_not @0) INTEGER_CST@1))\n- (if (wi::bit_not (@2) == @1)\n-  (bit_xor @0 @1)))\n+/* Simplify (X & ~Y) |^+ (~X & Y) -> X ^ Y.  */\n+(for op (bit_ior bit_xor plus)\n+ (simplify\n+  (op (bit_and:c @0 (bit_not @1)) (bit_and:c (bit_not @0) @1))\n+   (bit_xor @0 @1))\n+ (simplify\n+  (op:c (bit_and @0 INTEGER_CST@2) (bit_and (bit_not @0) INTEGER_CST@1))\n+  (if (wi::bit_not (@2) == @1)\n+   (bit_xor @0 @1))))\n \n /* PR53979: Transform ((a ^ b) | a) -> (a | b) */\n (simplify\n@@ -1097,6 +1098,16 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        && tree_expr_nonzero_p (@1))\n    (cmp @0 @2))))\n \n+/* For integral types with wrapping overflow and C odd fold\n+   x * C EQ/NE y * C into x EQ/NE y.  */\n+(for cmp (eq ne)\n+ (simplify\n+  (cmp (mult @0 INTEGER_CST@1) (mult @2 @1))\n+  (if (INTEGRAL_TYPE_P (TREE_TYPE (@1))\n+       && TYPE_OVERFLOW_WRAPS (TREE_TYPE (@0))\n+       && (TREE_INT_CST_LOW (@1) & 1) != 0)\n+   (cmp @0 @2))))\n+\n /* For integral types with undefined overflow and C != 0 fold\n    x * C RELOP y * C into:\n "}, {"sha": "2952d5cd5ef7cd291fb2b88340adbd30ab8c9612", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42bd89ce072220f3569cb5e761235dcf1c675c68/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42bd89ce072220f3569cb5e761235dcf1c675c68/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=42bd89ce072220f3569cb5e761235dcf1c675c68", "patch": "@@ -1,3 +1,8 @@\n+2017-06-28  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/tree-ssa/addadd.c: Remove test duplicated in addadd-2.c.\n+\t* gcc.dg/tree-ssa/mulcmp-1.c: New file.\n+\n 2017-06-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.target/i386/cmov7.c (sgn): Renamed to ..."}, {"sha": "454ec2a570db2f1fa555a81757894cb7df205d57", "filename": "gcc/testsuite/gcc.dg/tree-ssa/addadd.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42bd89ce072220f3569cb5e761235dcf1c675c68/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Faddadd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42bd89ce072220f3569cb5e761235dcf1c675c68/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Faddadd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Faddadd.c?ref=42bd89ce072220f3569cb5e761235dcf1c675c68", "patch": "@@ -23,11 +23,6 @@ int i(int x){\n   x += __INT_MAX__;\n   return x;\n }\n-typedef int S __attribute__((vector_size(16)));\n-void j(S*x){\n-  *x += __INT_MAX__;\n-  *x += __INT_MAX__;\n-}\n \n /* { dg-final { scan-tree-dump-times \" \\\\+ 24;\" 2 \"optimized\" } } */\n /* { dg-final { scan-tree-dump-times \"\\\\(unsigned int\\\\)\" 2 \"optimized\" } } */"}, {"sha": "6ff2ff5a388fbc0b1e7c81fcd65e6722ebcfefb6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/mulcmp-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42bd89ce072220f3569cb5e761235dcf1c675c68/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmulcmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42bd89ce072220f3569cb5e761235dcf1c675c68/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmulcmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fmulcmp-1.c?ref=42bd89ce072220f3569cb5e761235dcf1c675c68", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized-raw\" } */\n+\n+int f(unsigned a,unsigned b){\n+    a *= 3;\n+    b *= 3;\n+    return a == b;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"mult_expr\" \"optimized\" } } */"}]}