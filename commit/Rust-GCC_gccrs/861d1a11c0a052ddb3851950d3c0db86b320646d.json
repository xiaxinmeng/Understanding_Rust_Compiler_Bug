{"sha": "861d1a11c0a052ddb3851950d3c0db86b320646d", "node_id": "C_kwDOANBUbNoAKDg2MWQxYTExYzBhMDUyZGRiMzg1MTk1MGQzYzBkYjg2YjMyMDY0NmQ", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-10T00:17:21Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-09-10T00:17:21Z"}, "message": "Daily bump.", "tree": {"sha": "7c0360d20cbdfdf8fbe4773f2f4eb55efe6747d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c0360d20cbdfdf8fbe4773f2f4eb55efe6747d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/861d1a11c0a052ddb3851950d3c0db86b320646d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861d1a11c0a052ddb3851950d3c0db86b320646d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/861d1a11c0a052ddb3851950d3c0db86b320646d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861d1a11c0a052ddb3851950d3c0db86b320646d/comments", "author": null, "committer": null, "parents": [{"sha": "89afb2e86fcb29c559b2957fdcbea0d01740c49b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89afb2e86fcb29c559b2957fdcbea0d01740c49b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89afb2e86fcb29c559b2957fdcbea0d01740c49b"}], "stats": {"total": 310, "additions": 309, "deletions": 1}, "files": [{"sha": "c27e03a11787622422b99ffed4d3ea87e142b362", "filename": "gcc/ChangeLog", "status": "modified", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861d1a11c0a052ddb3851950d3c0db86b320646d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861d1a11c0a052ddb3851950d3c0db86b320646d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=861d1a11c0a052ddb3851950d3c0db86b320646d", "patch": "@@ -1,3 +1,119 @@\n+2022-09-09  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/xtensa.md: Rewrite the split pattern that performs\n+\tthe abovementioned process so that insns that overwrite clobbered\n+\tregister no longer need to be contiguous.\n+\t(DSC): Remove as no longer needed.\n+\n+2022-09-09  Takayuki 'January June' Suwa  <jjsuwa_sys3175@yahoo.co.jp>\n+\n+\t* config/xtensa/xtensa.cc (machine_function): New boolean member as\n+\ta flag that controls whether to emit the insns for stack pointer\n+\tadjustment inside of the pro/epilogue.\n+\t(xtensa_emit_adjust_stack_ptr): New function to share the common\n+\tcodes and to emit insns if not inhibited.\n+\t(xtensa_expand_epilogue): Change to use the function mentioned\n+\tabove when using the CALL0 ABI.\n+\t(xtensa_expand_prologue): Ditto.\n+\tAnd also change to set the inhibit flag used by\n+\txtensa_emit_adjust_stack_ptr() to true if the stack pointer is only\n+\tused for its own adjustment.\n+\n+2022-09-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* doc/invoke.texi (Static Analyzer Options): Add\n+\t-Wanalyzer-exposure-through-uninit-copy.\n+\n+2022-09-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* Makefile.in (ANALYZER_OBJS): Add\n+\tanalyzer/known-function-manager.o.\n+\n+2022-09-09  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* config/nvptx/mkoffload.cc (struct id_map): Add 'dim' member.\n+\t(record_id): Store func name without quotes, store dim separately.\n+\t(process): For GOMP_REQUIRES_REVERSE_OFFLOAD, check that -march is\n+\tat least sm_35, create '$offload_func_table' global array and init\n+\twith reverse-offload function addresses.\n+\t* config/nvptx/nvptx.cc (write_fn_proto_1, write_fn_proto): New\n+\tforce_public attribute to force .visible.\n+\t(nvptx_declare_function_name): For \"omp target\n+\tdevice_ancestor_nohost\" attribut, force .visible/TREE_PUBLIC.\n+\n+2022-09-09  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* config/gcn/mkoffload.cc (process_asm): Create .offload_func_table,\n+\tsimilar to pre-existing .offload_var_table.\n+\n+2022-09-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* ginclude/stddef.h [__STDC_VERSION__ > 201710L] (unreachable):\n+\tNew macro.\n+\n+2022-09-09  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR middle-end/106833\n+\t* tree.cc (verify_opaque_type): New function.\n+\t(verify_type): Call verify_opaque_type for OPAQUE_TYPE.\n+\n+2022-09-09  Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\n+\t* config/gcn/gcn-builtins.def (FABSVF, LDEXPVF, LDEXPV, FREXPVF_EXP,\n+\tFREXPVF_MANT, FREXPV_EXP, FREXPV_MANT): Add new builtins.\n+\t* config/gcn/gcn-protos.h (gcn_dconst1over2pi): New prototype.\n+\t* config/gcn/gcn-valu.md (MATH_UNOP_1OR2REG, MATH_UNOP_1REG,\n+\tMATH_UNOP_TRIG): New iterators.\n+\t(math_unop): New attributes.\n+\t(<math_unop><mode>2, <math_unop><mode>2<exec>,\n+\t<math_unop><mode>2, <math_unop><mode>2<exec>,\n+\t*<math_unop><mode>2_insn, *<math_unop><mode>2<exec>_insn,\n+\tldexp<mode>3, ldexp<mode>3<exec>,\n+\tfrexp<mode>_exp2, frexp<mode>_mant2,\n+\tfrexp<mode>_exp2<exec>, frexp<mode>_mant2<exec>): New instructions.\n+\t(<math_unop><mode>2, <math_unop><mode>2<exec>): New expanders.\n+\t* config/gcn/gcn.cc (init_ext_gcn_constants): Update definition of\n+\tdconst1over2pi.\n+\t(gcn_dconst1over2pi): New.\n+\t(gcn_builtin_type_index): Add entry for v64df type.\n+\t(v64df_type_node): New.\n+\t(gcn_init_builtin_types): Initialize v64df_type_node.\n+\t(gcn_expand_builtin_1): Expand new builtins to instructions.\n+\t(print_operand): Fix assembler output for 1/(2*PI) constant.\n+\t* config/gcn/gcn.md (unspec): Add new entries.\n+\n+2022-09-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106722\n+\t* tree-predcom.cc (ref_at_iteration): Do not associate the\n+\tconstant part of the offset into the MEM_REF offset\n+\toperand, across a non-zero offset.\n+\n+2022-09-09  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.cc (RISCV_USE_CUSTOMISED_MULTI_LIB):\n+\tMove forward for cover all all necessary functions for suppress\n+\tunused function warnings.\n+\t(riscv_multi_lib_check): Move forward, and tweak message to suppress\n+\t-Werror=format-diag warning.\n+\n+2022-09-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106881\n+\t* gimple-predicate-analysis.cc (simple_control_dep_chain):\n+\tAdd only non-fallthru edges and avoid the same set of edges\n+\tas compute_control_dep_chain_pdom does.\n+\n+2022-09-09  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n+\n+\t* doc/tm.texi.in (TARGET_OVERRIDES_FORMAT_ATTRIBUTES): Document requirement\n+\tof TARGET_OVERRIDES_FORMAT_ATTRIBUTES_COUNT being defined as well.\n+\t* doc/tm.texi: Regenerate.\n+\n+2022-09-09  Martin Liska  <mliska@suse.cz>\n+\n+\t* optc-save-gen.awk: Always compare array option values with memcmp.\n+\n 2022-09-08  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR c++/106838"}, {"sha": "9f94e785b026c46a66f54250d92e22baacead905", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861d1a11c0a052ddb3851950d3c0db86b320646d/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861d1a11c0a052ddb3851950d3c0db86b320646d/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=861d1a11c0a052ddb3851950d3c0db86b320646d", "patch": "@@ -1 +1 @@\n-20220909\n+20220910"}, {"sha": "0e3cc72aa6f35f5b93178e9a970276368498e92d", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861d1a11c0a052ddb3851950d3c0db86b320646d/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861d1a11c0a052ddb3851950d3c0db86b320646d/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=861d1a11c0a052ddb3851950d3c0db86b320646d", "patch": "@@ -1,3 +1,71 @@\n+2022-09-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.opt (Wanalyzer-exposure-through-uninit-copy): New.\n+\t* checker-path.cc (region_creation_event::region_creation_event):\n+\tAdd \"capacity\" and \"kind\" params.\n+\t(region_creation_event::get_desc): Generalize to different kinds\n+\tof event.\n+\t(checker_path::add_region_creation_event): Convert to...\n+\t(checker_path::add_region_creation_events): ...this.\n+\t* checker-path.h (enum rce_kind): New.\n+\t(region_creation_event::region_creation_event): Add \"capacity\" and\n+\t\"kind\" params.\n+\t(region_creation_event::m_capacity): New field.\n+\t(region_creation_event::m_rce_kind): New field.\n+\t(checker_path::add_region_creation_event): Convert to...\n+\t(checker_path::add_region_creation_events): ...this.\n+\t* diagnostic-manager.cc (diagnostic_manager::build_emission_path):\n+\tUpdate for multiple region creation events.\n+\t(diagnostic_manager::add_event_on_final_node): Likewise.\n+\t(diagnostic_manager::add_events_for_eedge): Likewise.\n+\t* region-model-impl-calls.cc (call_details::get_logger): New.\n+\t* region-model.cc: Define INCLUDE_MEMORY before including\n+\t\"system.h\".  Include \"gcc-rich-location.h\".\n+\t(class record_layout): New.\n+\t(class exposure_through_uninit_copy): New.\n+\t(contains_uninit_p): New.\n+\t(region_model::maybe_complain_about_infoleak): New.\n+\t* region-model.h (call_details::get_logger): New decl.\n+\t(region_model::maybe_complain_about_infoleak): New decl.\n+\t(region_model::mark_as_tainted): New decl.\n+\t* sm-taint.cc (region_model::mark_as_tainted): New.\n+\n+2022-09-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* analyzer.h (class known_function_manager): New forward decl.\n+\t(class known_function): New.\n+\t(plugin_analyzer_init_iface::register_known_function): New.\n+\t* engine.cc: Include \"analyzer/known-function-manager.h\".\n+\t(plugin_analyzer_init_impl::plugin_analyzer_init_impl): Add\n+\tknown_fn_mgr param.\n+\t(plugin_analyzer_init_impl::register_state_machine): Add\n+\tLOC_SCOPE.\n+\t(plugin_analyzer_init_impl::register_known_function): New.\n+\t(plugin_analyzer_init_impl::m_known_fn_mgr): New.\n+\t(impl_run_checkers): Update plugin callback invocation to use\n+\teng's known_function_manager.\n+\t* known-function-manager.cc: New file.\n+\t* known-function-manager.h: New file.\n+\t* region-model-manager.cc\n+\t(region_model_manager::region_model_manager): Pass logger to\n+\tm_known_fn_mgr's ctor.\n+\t* region-model.cc (region_model::update_for_zero_return): New.\n+\t(region_model::update_for_nonzero_return): New.\n+\t(maybe_simplify_upper_bound): New.\n+\t(region_model::maybe_get_copy_bounds): New.\n+\t(region_model::get_known_function): New.\n+\t(region_model::on_call_pre): Handle plugin-supplied known\n+\tfunctions.\n+\t* region-model.h: Include \"analyzer/known-function-manager.h\".\n+\t(region_model_manager::get_known_function_manager): New.\n+\t(region_model_manager::m_known_fn_mgr): New.\n+\t(call_details::get_model): New accessor.\n+\t(region_model::maybe_get_copy_bounds): New decl.\n+\t(region_model::update_for_zero_return): New decl.\n+\t(region_model::update_for_nonzero_return): New decl.\n+\t(region_model::get_known_function): New decl.\n+\t(region_model::get_known_function_manager): New.\n+\n 2022-09-08  Tim Lange  <mail@tim-lange.me>\n \n \tPR analyzer/106625"}, {"sha": "4144df58138f0dbf76296beb9c6baf270e2e6d05", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861d1a11c0a052ddb3851950d3c0db86b320646d/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861d1a11c0a052ddb3851950d3c0db86b320646d/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=861d1a11c0a052ddb3851950d3c0db86b320646d", "patch": "@@ -1,3 +1,7 @@\n+2022-09-09  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n+\n+\t* c-format.cc (convert_format_name_to_system_name): Fix warning.\n+\n 2022-09-07  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-common.cc (c_common_reswords): Use D_C2X instead of D_CXXONLY"}, {"sha": "4aac34fabe211e4ff690184ccd3531c9367ff97b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861d1a11c0a052ddb3851950d3c0db86b320646d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861d1a11c0a052ddb3851950d3c0db86b320646d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=861d1a11c0a052ddb3851950d3c0db86b320646d", "patch": "@@ -1,3 +1,62 @@\n+2022-09-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/analyzer_kernel_plugin.c: New test.\n+\t* gcc.dg/plugin/copy_from_user-1.c: New test.\n+\t* gcc.dg/plugin/infoleak-1.c: New test.\n+\t* gcc.dg/plugin/infoleak-2.c: New test.\n+\t* gcc.dg/plugin/infoleak-3.c: New test.\n+\t* gcc.dg/plugin/infoleak-CVE-2011-1078-1.c: New test.\n+\t* gcc.dg/plugin/infoleak-CVE-2011-1078-2.c: New test.\n+\t* gcc.dg/plugin/infoleak-CVE-2014-1446-1.c: New test.\n+\t* gcc.dg/plugin/infoleak-CVE-2017-18549-1.c: New test.\n+\t* gcc.dg/plugin/infoleak-CVE-2017-18550-1.c: New test.\n+\t* gcc.dg/plugin/infoleak-antipatterns-1.c: New test.\n+\t* gcc.dg/plugin/infoleak-fixit-1.c: New test.\n+\t* gcc.dg/plugin/infoleak-net-ethtool-ioctl.c: New test.\n+\t* gcc.dg/plugin/infoleak-vfio_iommu_type1.c: New test.\n+\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add\n+\tanalyzer_kernel_plugin.c and the new test cases.\n+\t* gcc.dg/plugin/taint-CVE-2011-0521-1-fixed.c: New test.\n+\t* gcc.dg/plugin/taint-CVE-2011-0521-1.c: New test.\n+\t* gcc.dg/plugin/taint-CVE-2011-0521-2-fixed.c: New test.\n+\t* gcc.dg/plugin/taint-CVE-2011-0521-2.c: New test.\n+\t* gcc.dg/plugin/taint-CVE-2011-0521-3-fixed.c: New test.\n+\t* gcc.dg/plugin/taint-CVE-2011-0521-3.c: New test.\n+\t* gcc.dg/plugin/taint-CVE-2011-0521-4.c: New test.\n+\t* gcc.dg/plugin/taint-CVE-2011-0521-5-fixed.c: New test.\n+\t* gcc.dg/plugin/taint-CVE-2011-0521-5.c: New test.\n+\t* gcc.dg/plugin/taint-CVE-2011-0521-6.c: New test.\n+\t* gcc.dg/plugin/taint-CVE-2011-0521.h: New test.\n+\t* gcc.dg/plugin/taint-antipatterns-1.c: New test.\n+\t* gcc.dg/plugin/test-uaccess.h: New header for tests.\n+\n+2022-09-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/plugin/analyzer_known_fns_plugin.c: New test plugin.\n+\t* gcc.dg/plugin/known-fns-1.c: New test.\n+\t* gcc.dg/plugin/plugin.exp (plugin_test_list): Add the new plugin\n+\tand test.\n+\n+2022-09-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/98247\n+\t* gcc.dg/analyzer/flexible-array-member-1.c: New test.\n+\n+2022-09-09  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c11-unreachable-1.c, gcc.dg/c2x-unreachable-1.c: New\n+\ttests.\n+\n+2022-09-09  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR middle-end/106833\n+\t* gcc.target/powerpc/pr106833.c: New test.\n+\n+2022-09-09  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/106722\n+\t* gcc.dg/torture/pr106892.c: New testcase.\n+\n 2022-09-08  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/106670"}, {"sha": "e78fc38a0ef1495a21bcc519665f6b68455b3386", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861d1a11c0a052ddb3851950d3c0db86b320646d/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861d1a11c0a052ddb3851950d3c0db86b320646d/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=861d1a11c0a052ddb3851950d3c0db86b320646d", "patch": "@@ -1,3 +1,31 @@\n+2022-09-09  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* plugin/plugin-nvptx.c (GOMP_OFFLOAD_load_image): Read offload\n+\tfunction address table '$offload_func_table' if rev_fn_table\n+\tis not NULL.\n+\n+2022-09-09  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* plugin/plugin-gcn.c (GOMP_OFFLOAD_load_image): Read\n+\t.offload_func_table to populate rev_fn_table when requested.\n+\n+2022-09-09  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* libgomp-plugin.h (GOMP_OFFLOAD_load_image): Add\n+\t'uint64_t **rev_fn_table' argument.\n+\t* oacc-host.c (host_load_image): Likewise.\n+\t* plugin/plugin-gcn.c (GOMP_OFFLOAD_load_image): Likewise;\n+\tcurrently unused.\n+\t* plugin/plugin-nvptx.c (GOMP_OFFLOAD_load_image): Likewise.\n+\t* target.c (gomp_load_image_to_device): Update call but pass\n+\tNULL for now.\n+\n+2022-09-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/106894\n+\t* env.c (initialize_env) <case PARSE_BIND>: Use char ** instead of\n+\tchar * for dest[1] initialization from params[1].  Formatting fixes.\n+\n 2022-09-08  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/106670"}, {"sha": "f33f0168a80fc194aea591edf8d9c297f7f8e99f", "filename": "liboffloadmic/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861d1a11c0a052ddb3851950d3c0db86b320646d/liboffloadmic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861d1a11c0a052ddb3851950d3c0db86b320646d/liboffloadmic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/liboffloadmic%2FChangeLog?ref=861d1a11c0a052ddb3851950d3c0db86b320646d", "patch": "@@ -1,3 +1,8 @@\n+2022-09-09  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* plugin/libgomp-plugin-intelmic.cpp (GOMP_OFFLOAD_load_image):\n+\tAdd (unused) uint64_t **rev_fn_table argument.\n+\n 2022-08-25  Martin Liska  <mliska@suse.cz>\n \n \t* configure: Regenerate."}, {"sha": "2e15013bd0aafcf0323437586f00a9cd7b406975", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/861d1a11c0a052ddb3851950d3c0db86b320646d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/861d1a11c0a052ddb3851950d3c0db86b320646d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=861d1a11c0a052ddb3851950d3c0db86b320646d", "patch": "@@ -1,3 +1,31 @@\n+2022-09-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/atomic_base.h (__atomic_impl::__compare_exchange):\n+\tRename __weak to __is_weak.\n+\t* testsuite/17_intro/names.cc: Add __weak and __strong.\n+\n+2022-09-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/106803\n+\t* include/std/ranges (views::_ZipTransform::operator()): Correct\n+\treturn type in the empty case.\n+\t(views::_AdjacentTransform::operator()): Likewise.\n+\n+2022-09-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/106798\n+\t* include/std/ranges (adjacent_view::_Iterator::_Iterator): Fix\n+\ttypo.\n+\t* testsuite/std/ranges/adaptors/adjacent/1.cc (test04): New test.\n+\n+2022-09-09  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/106766\n+\t* include/std/ranges (zip_view::_Iterator::operator-): Use\n+\t__to_unsigned_like instead of make_unsigned_t.\n+\t(zip_view::_Sentinel::operator-): Likewise.\n+\t* testsuite/std/ranges/zip/1.cc (test04): New test.\n+\n 2022-09-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* testsuite/util/testsuite_performance.h (__gnu_test::MallocInfo): New."}]}