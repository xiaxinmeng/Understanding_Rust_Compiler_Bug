{"sha": "bfe83ae38e871a2e4205ce63fd9d3247dff412bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZlODNhZTM4ZTg3MWEyZTQyMDVjZTYzZmQ5ZDMyNDdkZmY0MTJiZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-02-19T17:18:13Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-02-19T17:40:12Z"}, "message": "c++: Inform of CMI reads [PR 99166]\n\nWhen successfully reading a module CMI, the user gets no indication of\nwhere that CMI was located.  I originally didn't consider this a\nproblem -- the read was successful after all.  But it can make it\ndifficult to interact with build systems, particularly when caching\ncan be involved.  Grovelling over internal dump files is not really\nuseful to the user.  Hence this option, which is similar to the\n-flang-info-include-translate variants, and allows the user to ask for\nall, or specific module read notification.\n\n\tgcc/c-family/\n\t* c.opt (flang-info-module-read, flang-info-module-read=): New.\n\tgcc/\n\t* doc/invoke.texi (flang-info-module-read): Document.\n\tgcc/cp/\n\t* module.cc (note_cmis): New.\n\t(struct module_state): Add inform_read_p bit.\n\t(module_state::do_import): Inform of CMI location, if enabled.\n\t(init_modules): Canonicalize note_cmis entries.\n\t(handle_module_option): Handle -flang-info-module-read=FOO.\n\tgcc/testsuite/\n\t* g++.dg/modules/pr99166_a.X: New.\n\t* g++.dg/modules/pr99166_b.C: New.\n\t* g++.dg/modules/pr99166_c.C: New.\n\t* g++.dg/modules/pr99166_d.C: New.", "tree": {"sha": "8e723cf7a4017d46a7aa27d45cbb77972e7188e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e723cf7a4017d46a7aa27d45cbb77972e7188e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfe83ae38e871a2e4205ce63fd9d3247dff412bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfe83ae38e871a2e4205ce63fd9d3247dff412bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfe83ae38e871a2e4205ce63fd9d3247dff412bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfe83ae38e871a2e4205ce63fd9d3247dff412bd/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f86e187e12db14ad1cced26b9f8aafb06498e208", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f86e187e12db14ad1cced26b9f8aafb06498e208", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f86e187e12db14ad1cced26b9f8aafb06498e208"}], "stats": {"total": 99, "additions": 95, "deletions": 4}, "files": [{"sha": "3264c646ad3f6a3c44752c229f47f803c4ea9ec5", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe83ae38e871a2e4205ce63fd9d3247dff412bd/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe83ae38e871a2e4205ce63fd9d3247dff412bd/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=bfe83ae38e871a2e4205ce63fd9d3247dff412bd", "patch": "@@ -1752,6 +1752,14 @@ flang-info-include-translate=\n C++ Joined RejectNegative MissingArgError(missing header name)\n Note a #include translation of a specific header.\n \n+flang-info-module-read\n+C++ Var(note_module_read_yes)\n+Note Compiled Module Interface pathnames.\n+\n+flang-info-module-read=\n+C++ Joined RejectNegative MissingArgError(missing module name)\n+Note Compiled Module Interface pathname of a specific module or header-unit.\n+\n fmax-include-depth=\n C ObjC C++ ObjC++ Joined RejectNegative UInteger\n fmax-include-depth=<number> Set the maximum depth of the nested #include."}, {"sha": "691381bf99549052d298df2a2ed84bbfb336c129", "filename": "gcc/cp/module.cc", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe83ae38e871a2e4205ce63fd9d3247dff412bd/gcc%2Fcp%2Fmodule.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe83ae38e871a2e4205ce63fd9d3247dff412bd/gcc%2Fcp%2Fmodule.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmodule.cc?ref=bfe83ae38e871a2e4205ce63fd9d3247dff412bd", "patch": "@@ -317,6 +317,9 @@ version2string (unsigned version, verstr_t &out)\n /* Include files to note translation for.  */\n static vec<const char *, va_heap, vl_embed> *note_includes;\n \n+/* Modules to note CMI pathames.  */\n+static vec<const char *, va_heap, vl_embed> *note_cmis;\n+\n /* Traits to hash an arbitrary pointer.  Entries are not deletable,\n    and removal is a noop (removal needed upon destruction).  */\n template <typename T>\n@@ -3547,9 +3550,10 @@ class GTY((chain_next (\"%h.parent\"), for_user)) module_state {\n \t\t\t   do it again  */\n   bool call_init_p : 1; /* This module's global initializer needs\n \t\t\t   calling.  */\n+  bool inform_read_p : 1; /* Inform of a read.  */\n   /* Record extensions emitted or permitted.  */\n   unsigned extensions : SE_BITS;\n-  /* 12 bits used, 4 bits remain  */\n+  /* 13 bits used, 3 bits remain  */\n \n  public:\n   module_state (tree name, module_state *, bool);\n@@ -3782,6 +3786,8 @@ module_state::module_state (tree name, module_state *parent, bool partition)\n \n   partition_p = partition;\n \n+  inform_read_p = false;\n+\n   extensions = 0;\n   if (name && TREE_CODE (name) == STRING_CST)\n     {\n@@ -18634,6 +18640,8 @@ module_state::do_import (cpp_reader *reader, bool outermost)\n     {\n       const char *file = maybe_add_cmi_prefix (filename);\n       dump () && dump (\"CMI is %s\", file);\n+      if (note_module_read_yes || inform_read_p)\n+\tinform (loc, \"reading CMI %qs\", file);\n       fd = open (file, O_RDONLY | O_CLOEXEC | O_BINARY);\n       e = errno;\n     }\n@@ -19545,6 +19553,7 @@ init_modules (cpp_reader *reader)\n   headers = BITMAP_GGC_ALLOC ();\n \n   if (note_includes)\n+    /* Canonicalize header names.  */\n     for (unsigned ix = 0; ix != note_includes->length (); ix++)\n       {\n \tconst char *hdr = (*note_includes)[ix];\n@@ -19567,6 +19576,37 @@ init_modules (cpp_reader *reader)\n \t(*note_includes)[ix] = path;\n       }\n \n+  if (note_cmis)\n+    /* Canonicalize & mark module names.  */\n+    for (unsigned ix = 0; ix != note_cmis->length (); ix++)\n+      {\n+\tconst char *name = (*note_cmis)[ix];\n+\tsize_t len = strlen (name);\n+\n+\tbool is_system = name[0] == '<';\n+\tbool is_user = name[0] == '\"';\n+\tbool is_pathname = false;\n+\tif (!(is_system || is_user))\n+\t  for (unsigned ix = len; !is_pathname && ix--;)\n+\t    is_pathname = IS_DIR_SEPARATOR (name[ix]);\n+\tif (is_system || is_user || is_pathname)\n+\t  {\n+\t    if (len <= (is_pathname ? 0 : 2)\n+\t\t|| (!is_pathname && name[len-1] != (is_system ? '>' : '\"')))\n+\t      {\n+\t\terror (\"invalid header name %qs\", name);\n+\t\tcontinue;\n+\t      }\n+\t    else\n+\t      name = canonicalize_header_name (is_pathname ? nullptr : reader,\n+\t\t\t\t\t       0, is_pathname, name, len);\n+\t  }\n+\tif (auto module = get_module (name))\n+\t  module->inform_read_p = 1;\n+\telse\n+\t  error (\"invalid module name %qs\", name);\n+      }\n+\n   dump.push (NULL);\n \n   /* Determine lazy handle bound.  */\n@@ -19952,6 +19992,10 @@ handle_module_option (unsigned code, const char *str, int)\n       vec_safe_push (note_includes, str);\n       return true;\n \n+    case OPT_flang_info_module_read_:\n+      vec_safe_push (note_cmis, str);\n+      return true;\n+\n     default:\n       return false;\n     }"}, {"sha": "ea315f1be58a10bd435aa46fb310ba753480887f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe83ae38e871a2e4205ce63fd9d3247dff412bd/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe83ae38e871a2e4205ce63fd9d3247dff412bd/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=bfe83ae38e871a2e4205ce63fd9d3247dff412bd", "patch": "@@ -240,8 +240,9 @@ in the following sections.\n -fvisibility-inlines-hidden @gol\n -fvisibility-ms-compat @gol\n -fext-numeric-literals @gol\n--flang-info-include-translate@r{[}=@var{name}@r{]} @gol\n+-flang-info-include-translate@r{[}=@var{header}@r{]} @gol\n -flang-info-include-translate-not @gol\n+-flang-info-module-read@r{[}=@var{module}@r{]} @gol\n -stdlib=@var{libstdc++,libc++} @gol\n -Wabi-tag  -Wcatch-value  -Wcatch-value=@var{n} @gol\n -Wno-class-conversion  -Wclass-memaccess @gol\n@@ -3382,13 +3383,22 @@ is used when building the C++ library.)\n @itemx -flang-info-include-translate=@var{header}\n @opindex flang-info-include-translate\n @opindex flang-info-include-translate-not\n-Diagnose include translation events.  The first will note accepted\n+Inform of include translation events.  The first will note accepted\n include translations, the second will note declined include\n translations.  The @var{header} form will inform of include\n translations relating to that specific header.  If @var{header} is of\n the form @code{\"user\"} or @code{<system>} it will be resolved to a\n specific user or system header using the include path.\n \n+@item -flang-info-module-read\n+@itemx -flang-info-module-read=@var{module}\n+@opindex flang-info-module-read\n+Inform of Compiled Module Interface pathnames.  The first will note\n+all read CMI pathnames.  The @var{module} form will not reading a\n+specific module's CMI.  @var{module} may be a named module or a\n+header-unit (the latter indicated by either being a pathname containing\n+directory separators or enclosed in @code{<>} or @code{\"\"}).\n+\n @item -stdlib=@var{libstdc++,libc++}\n @opindex stdlib\n When G++ is configured to support this option, it allows specification of\n@@ -33050,9 +33060,15 @@ textual.  With an argument, queries about include translation of a\n header files with that particular trailing pathname are noted.  You\n may repeat this form to cover several different header files.  This\n option may be helpful in determining whether include translation is\n-happening---if it is working correctly, it'll behave as if it wasn't\n+happening---if it is working correctly, it behaves as if it isn't\n there at all.\n \n+The @option{-flang-info-module-read} option can be used to determine\n+where the compiler is reading a CMI from.  Without the option, the\n+compiler is silent when such a read is successful.  This option has an\n+optional argument, which will restrict the notification to just the\n+set of named modules or header units specified.\n+\n The @option{-Winvalid-imported-macros} option causes all imported macros\n to be resolved at the end of compilation.  Without this, imported\n macros are only resolved when expanded or (re)defined.  This option"}, {"sha": "ad7ce7edf45763faa497126367d8d2dab12b66e0", "filename": "gcc/testsuite/g++.dg/modules/pr99166_a.X", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe83ae38e871a2e4205ce63fd9d3247dff412bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_a.X", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe83ae38e871a2e4205ce63fd9d3247dff412bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_a.X", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_a.X?ref=bfe83ae38e871a2e4205ce63fd9d3247dff412bd", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/99166, diagnostic\n+// { dg-additional-options {-x c++-system-header iostream -fmodules-ts} }\n+\n+// { dg-prune-output {linker input file unused} }\n+\n+NO DO NOT COMPILE"}, {"sha": "64c5a8647ecd64312d9fd5a3073c835572a5f37d", "filename": "gcc/testsuite/g++.dg/modules/pr99166_b.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe83ae38e871a2e4205ce63fd9d3247dff412bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe83ae38e871a2e4205ce63fd9d3247dff412bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_b.C?ref=bfe83ae38e871a2e4205ce63fd9d3247dff412bd", "patch": "@@ -0,0 +1,7 @@\n+// { dg-additional-options {-fmodules-ts -flang-info-module-read=<iostream>} }\n+export module Foo;\n+import <iostream>;\n+\n+export void frob ();\n+\n+// { dg-regexp {In module imported at [^\\n]*pr99166_b.C:[0-9:]*\\n[^\\b]*iostream: note: reading CMI 'gcm.cache/[^[\\n]*iostream.gcm'\\n} }"}, {"sha": "d098f07279d01733d8fb7a861e82a8e2e66fff7b", "filename": "gcc/testsuite/g++.dg/modules/pr99166_c.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe83ae38e871a2e4205ce63fd9d3247dff412bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe83ae38e871a2e4205ce63fd9d3247dff412bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_c.C?ref=bfe83ae38e871a2e4205ce63fd9d3247dff412bd", "patch": "@@ -0,0 +1,4 @@\n+// { dg-additional-options {-fmodules-ts -flang-info-module-read=Foo} }\n+module Foo;\n+\n+// { dg-regexp {In module imported at [^\\n]*pr99166_c.C:[0-9:]*\\n[^\\b]*Foo: note: reading CMI 'gcm.cache/Foo.gcm'\\n} }"}, {"sha": "423053ec9ff94fa50d80677656788cd43a70bb16", "filename": "gcc/testsuite/g++.dg/modules/pr99166_d.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfe83ae38e871a2e4205ce63fd9d3247dff412bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_d.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfe83ae38e871a2e4205ce63fd9d3247dff412bd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_d.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99166_d.C?ref=bfe83ae38e871a2e4205ce63fd9d3247dff412bd", "patch": "@@ -0,0 +1,6 @@\n+// { dg-additional-options {-fmodules-ts -flang-info-module-read} }\n+import Foo;\n+\n+// { dg-regexp {In module imported at [^\\n]*pr99166_d.C:[0-9:]*\\n[^\\b]*Foo: note: reading CMI 'gcm.cache/Foo.gcm'\\n} }\n+\n+// { dg-regexp {In module imported at [^\\n]*pr99166_b.C:[0-9:]*,\\nof module Foo, imported at [^\\n]*pr99166_d.C:[0-9:]:\\n[^\\b]*iostream: note: reading CMI 'gcm.cache/[^[\\n]*iostream.gcm'\\n} }"}]}