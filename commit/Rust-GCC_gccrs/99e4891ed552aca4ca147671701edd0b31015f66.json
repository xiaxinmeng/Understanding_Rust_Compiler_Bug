{"sha": "99e4891ed552aca4ca147671701edd0b31015f66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTllNDg5MWVkNTUyYWNhNGNhMTQ3NjcxNzAxZWRkMGIzMTAxNWY2Ng==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-07-20T02:13:58Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-08-10T02:28:08Z"}, "message": "Using UNSPEC for vector compare to mask register.\n\nFor rtx like (eq:HI (V8SI 90) (V8SI 91)), cse will take it as a\nboolean value and try to do some optimization. But it is not true for\nvector compare, also other places in rtl passes hold the same\nassumption.\n\n2020-07-20  Hongtao Liu  <hongtao.liu@intel.com>\n\ngcc/\n\tPR target/96243\n\t* config/i386/i386-expand.c (ix86_expand_sse_cmp): Refine for\n\tmaskcmp.\n\t(ix86_expand_mask_vec_cmp): Change prototype.\n\t* config/i386/i386-protos.h (ix86_expand_mask_vec_cmp): Change prototype.\n\t* config/i386/i386.c (ix86_print_operand): Remove operand\n\tmodifier 'I'.\n\t* config/i386/sse.md\n\t(*<avx512>_cmp<mode>3<mask_scalar_merge_name><round_saeonly_name>): Deleted.\n\t(*<avx512>_cmp<mode>3<mask_scalar_merge_name>): Ditto.\n\t(*<avx512>_ucmp<mode>3<mask_scalar_merge_name>): Ditto.\n\t(*<avx512>_ucmp<mode>3<mask_scalar_merge_name>,\n\tavx512f_maskcmp<mode>3): Ditto.\n\ngcc/testsuite\n\t* gcc.target/i386/pr92865-1.c: Adjust testcase.", "tree": {"sha": "3820cd9371b5f8c93c9197e0bb7011c80bd20248", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3820cd9371b5f8c93c9197e0bb7011c80bd20248"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99e4891ed552aca4ca147671701edd0b31015f66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e4891ed552aca4ca147671701edd0b31015f66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99e4891ed552aca4ca147671701edd0b31015f66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99e4891ed552aca4ca147671701edd0b31015f66/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39984c4e61b02a09b2d6c995505ce65ac2f7d872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39984c4e61b02a09b2d6c995505ce65ac2f7d872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39984c4e61b02a09b2d6c995505ce65ac2f7d872"}], "stats": {"total": 138, "additions": 26, "deletions": 112}, "files": [{"sha": "1bd0df4daf460ee5fa963a555b244c23363833b1", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e4891ed552aca4ca147671701edd0b31015f66/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e4891ed552aca4ca147671701edd0b31015f66/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=99e4891ed552aca4ca147671701edd0b31015f66", "patch": "@@ -3480,6 +3480,13 @@ ix86_expand_sse_cmp (rtx dest, enum rtx_code code, rtx cmp_op0, rtx cmp_op1,\n       || (op_false && reg_overlap_mentioned_p (dest, op_false)))\n     dest = gen_reg_rtx (maskcmp ? cmp_mode : mode);\n \n+  if (maskcmp)\n+    {\n+      bool ok = ix86_expand_mask_vec_cmp (dest, code, cmp_op0, cmp_op1);\n+      gcc_assert (ok);\n+      return dest;\n+    }\n+\n   x = gen_rtx_fmt_ee (code, cmp_mode, cmp_op0, cmp_op1);\n \n   if (cmp_mode != mode && !maskcmp)\n@@ -3915,11 +3922,10 @@ ix86_cmp_code_to_pcmp_immediate (enum rtx_code code, machine_mode mode)\n /* Expand AVX-512 vector comparison.  */\n \n bool\n-ix86_expand_mask_vec_cmp (rtx operands[])\n+ix86_expand_mask_vec_cmp (rtx dest, enum rtx_code code, rtx cmp_op0, rtx cmp_op1)\n {\n-  machine_mode mask_mode = GET_MODE (operands[0]);\n-  machine_mode cmp_mode = GET_MODE (operands[2]);\n-  enum rtx_code code = GET_CODE (operands[1]);\n+  machine_mode mask_mode = GET_MODE (dest);\n+  machine_mode cmp_mode = GET_MODE (cmp_op0);\n   rtx imm = GEN_INT (ix86_cmp_code_to_pcmp_immediate (code, cmp_mode));\n   int unspec_code;\n   rtx unspec;\n@@ -3937,10 +3943,9 @@ ix86_expand_mask_vec_cmp (rtx operands[])\n       unspec_code = UNSPEC_PCMP;\n     }\n \n-  unspec = gen_rtx_UNSPEC (mask_mode, gen_rtvec (3, operands[2],\n-\t\t\t\t\t\t operands[3], imm),\n+  unspec = gen_rtx_UNSPEC (mask_mode, gen_rtvec (3, cmp_op0, cmp_op1, imm),\n \t\t\t   unspec_code);\n-  emit_insn (gen_rtx_SET (operands[0], unspec));\n+  emit_insn (gen_rtx_SET (dest, unspec));\n \n   return true;\n }"}, {"sha": "b6088f22d55908378bcacef77dea6ab0e284cc45", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e4891ed552aca4ca147671701edd0b31015f66/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e4891ed552aca4ca147671701edd0b31015f66/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=99e4891ed552aca4ca147671701edd0b31015f66", "patch": "@@ -143,7 +143,7 @@ extern bool ix86_expand_fp_movcc (rtx[]);\n extern bool ix86_expand_fp_vcond (rtx[]);\n extern bool ix86_expand_int_vcond (rtx[]);\n extern void ix86_expand_vec_perm (rtx[]);\n-extern bool ix86_expand_mask_vec_cmp (rtx[]);\n+extern bool ix86_expand_mask_vec_cmp (rtx, enum rtx_code, rtx, rtx);\n extern bool ix86_expand_int_vec_cmp (rtx[]);\n extern bool ix86_expand_fp_vec_cmp (rtx[]);\n extern void ix86_expand_sse_movcc (rtx, rtx, rtx, rtx);"}, {"sha": "10eb2dda3c7666b2de1af6ddf22b2bcdb5442010", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e4891ed552aca4ca147671701edd0b31015f66/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e4891ed552aca4ca147671701edd0b31015f66/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=99e4891ed552aca4ca147671701edd0b31015f66", "patch": "@@ -12409,7 +12409,6 @@ print_reg (rtx x, int code, FILE *file)\n    M -- print addr32 prefix for TARGET_X32 with VSIB address.\n    ! -- print NOTRACK prefix for jxx/call/ret instructions if required.\n    N -- print maskz if it's constant 0 operand.\n-   I -- print comparision predicate operand for sse cmp condition.\n  */\n \n void\n@@ -12639,40 +12638,6 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t    }\n \t  return;\n \n-\tcase 'I':\n-\t  if (ASSEMBLER_DIALECT == ASM_ATT)\n-\t    putc ('$', file);\n-\t  switch (GET_CODE (x))\n-\t    {\n-\t    case EQ:\n-\t      putc ('0', file);\n-\t      break;\n-\t    case NE:\n-\t      putc ('4', file);\n-\t      break;\n-\t    case GE:\n-\t    case GEU:\n-\t      putc ('5', file);\n-\t      break;\n-\t    case GT:\n-\t    case GTU:\n-\t      putc ('6', file);\n-\t      break;\n-\t    case LE:\n-\t    case LEU:\n-\t      putc ('2', file);\n-\t      break;\n-\t    case LT:\n-\t    case LTU:\n-\t      putc ('1', file);\n-\t      break;\n-\t    default:\n-\t      output_operand_lossage (\"operand is not a condition code, \"\n-\t\t\t\t      \"invalid operand code 'I'\");\n-\t      return;\n-\t    }\n-\t  return;\n-\n \tcase 'Y':\n \t  switch (GET_CODE (x))\n \t    {"}, {"sha": "ad8169f6f08ef28d56c721ec2d524726f34aa863", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 8, "deletions": 64, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e4891ed552aca4ca147671701edd0b31015f66/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e4891ed552aca4ca147671701edd0b31015f66/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=99e4891ed552aca4ca147671701edd0b31015f66", "patch": "@@ -2945,18 +2945,6 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"*<avx512>_cmp<mode>3<mask_scalar_merge_name><round_saeonly_name>\"\n-  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n-\t(match_operator:<avx512fmaskmode> 3 \"ix86_comparison_int_operator\"\n-\t  [(match_operand:VI48_AVX512VL 1 \"register_operand\" \"v\")\n-\t   (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\" \"<round_saeonly_constraint>\")]))]\n-  \"TARGET_AVX512F && <round_saeonly_mode512bit_condition>\"\n-  \"vpcmp<ssemodesuffix>\\t{%I3, <round_saeonly_mask_scalar_merge_op4>%2, %1, %0<mask_scalar_merge_operand4>|%0<mask_scalar_merge_operand4>, %1, %2<round_saeonly_mask_scalar_merge_op4>, %I3}\"\n-  [(set_attr \"type\" \"ssecmp\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n (define_insn \"<avx512>_cmp<mode>3<mask_scalar_merge_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n \t(unspec:<avx512fmaskmode>\n@@ -2971,18 +2959,6 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"*<avx512>_cmp<mode>3<mask_scalar_merge_name>\"\n-  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n-\t(match_operator:<avx512fmaskmode> 3 \"ix86_comparison_int_operator\"\n-\t  [(match_operand:VI12_AVX512VL 1 \"register_operand\" \"v\")\n-\t   (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\" \"vm\")]))]\n-  \"TARGET_AVX512BW\"\n-  \"vpcmp<ssemodesuffix>\\t{%I3, %2, %1, %0<mask_scalar_merge_operand4>|%0<mask_scalar_merge_operand4>, %1, %2, %I3}\"\n-  [(set_attr \"type\" \"ssecmp\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n (define_insn \"<avx512>_ucmp<mode>3<mask_scalar_merge_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n \t(unspec:<avx512fmaskmode>\n@@ -2997,18 +2973,6 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"*<avx512>_ucmp<mode>3<mask_scalar_merge_name>\"\n-  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n-\t(match_operator:<avx512fmaskmode> 3 \"ix86_comparison_uns_operator\"\n-\t  [(match_operand:VI12_AVX512VL 1 \"register_operand\" \"v\")\n-\t   (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\" \"vm\")]))]\n-  \"TARGET_AVX512BW\"\n-  \"vpcmpu<ssemodesuffix>\\t{%I3, %2, %1, %0<mask_scalar_merge_operand4>|%0<mask_scalar_merge_operand4>, %1, %2, %I3}\"\n-  [(set_attr \"type\" \"ssecmp\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n (define_insn \"<avx512>_ucmp<mode>3<mask_scalar_merge_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n \t(unspec:<avx512fmaskmode>\n@@ -3023,18 +2987,6 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"*<avx512>_ucmp<mode>3<mask_scalar_merge_name>\"\n-  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n-\t(match_operator:<avx512fmaskmode> 3 \"ix86_comparison_uns_operator\"\n-\t  [(match_operand:VI48_AVX512VL 1 \"register_operand\" \"v\")\n-\t   (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\" \"vm\")]))]\n-  \"TARGET_AVX512F\"\n-  \"vpcmpu<ssemodesuffix>\\t{%I3, %2, %1, %0<mask_scalar_merge_operand4>|%0<mask_scalar_merge_operand4>, %1, %2, %I3}\"\n-  [(set_attr \"type\" \"ssecmp\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n (define_insn \"avx512f_vmcmp<mode>3<round_saeonly_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n \t(and:<avx512fmaskmode>\n@@ -3069,18 +3021,6 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<ssescalarmode>\")])\n \n-(define_insn \"avx512f_maskcmp<mode>3\"\n-  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n-\t(match_operator:<avx512fmaskmode> 3 \"sse_comparison_operator\"\n-\t  [(match_operand:VF_AVX512VL 1 \"register_operand\" \"v\")\n-\t   (match_operand:VF_AVX512VL 2 \"nonimmediate_operand\" \"vm\")]))]\n-  \"TARGET_AVX512F\"\n-  \"vcmp%D3<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"type\" \"ssecmp\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n (define_insn \"<sse>_<unord>comi<round_saeonly_name>\"\n   [(set (reg:CCFP FLAGS_REG)\n \t(compare:CCFP\n@@ -3108,7 +3048,8 @@\n \t   (match_operand:V48_AVX512VL 3 \"nonimmediate_operand\")]))]\n   \"TARGET_AVX512F\"\n {\n-  bool ok = ix86_expand_mask_vec_cmp (operands);\n+  bool ok = ix86_expand_mask_vec_cmp (operands[0], GET_CODE (operands[1]),\n+\t\t\t\t      operands[2], operands[3]);\n   gcc_assert (ok);\n   DONE;\n })\n@@ -3120,7 +3061,8 @@\n \t   (match_operand:VI12_AVX512VL 3 \"nonimmediate_operand\")]))]\n   \"TARGET_AVX512BW\"\n {\n-  bool ok = ix86_expand_mask_vec_cmp (operands);\n+  bool ok = ix86_expand_mask_vec_cmp (operands[0], GET_CODE (operands[1]),\n+\t\t\t\t      operands[2], operands[3]);\n   gcc_assert (ok);\n   DONE;\n })\n@@ -3192,7 +3134,8 @@\n \t   (match_operand:VI48_AVX512VL 3 \"nonimmediate_operand\")]))]\n   \"TARGET_AVX512F\"\n {\n-  bool ok = ix86_expand_mask_vec_cmp (operands);\n+  bool ok = ix86_expand_mask_vec_cmp (operands[0], GET_CODE (operands[1]),\n+\t\t\t\t      operands[2], operands[3]);\n   gcc_assert (ok);\n   DONE;\n })\n@@ -3204,7 +3147,8 @@\n \t   (match_operand:VI12_AVX512VL 3 \"nonimmediate_operand\")]))]\n   \"TARGET_AVX512BW\"\n {\n-  bool ok = ix86_expand_mask_vec_cmp (operands);\n+  bool ok = ix86_expand_mask_vec_cmp (operands[0], GET_CODE (operands[1]),\n+\t\t\t\t      operands[2], operands[3]);\n   gcc_assert (ok);\n   DONE;\n })"}, {"sha": "8aeab6086264a1a528eb8254e7d5f14d4e4a746d", "filename": "gcc/testsuite/gcc.target/i386/pr92865-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99e4891ed552aca4ca147671701edd0b31015f66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92865-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99e4891ed552aca4ca147671701edd0b31015f66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92865-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr92865-1.c?ref=99e4891ed552aca4ca147671701edd0b31015f66", "patch": "@@ -1,12 +1,12 @@\n /* PR target/92865 */\n /* { dg-do compile } */\n-/* { dg-options \"-Ofast -mavx512f -mavx512bw -mxop\" } */\n+/* { dg-options \"-Ofast -mavx512bw -mxop\" } */\n /* { dg-final { scan-assembler-times \"vpcmp\\[bwdq\\]\\[\\t ]\" 4 } } */\n /* { dg-final { scan-assembler-times \"vpcmpu\\[bwdq\\]\\[\\t ]\" 4 } } */\n-/* { dg-final { scan-assembler-times \"vmovdq\\[au\\]8\\[\\t ]\" 4 } } */\n-/* { dg-final { scan-assembler-times \"vmovdq\\[au\\]16\\[\\t ]\" 4 } } *\n-/* { dg-final { scan-assembler-times \"vmovdq\\[au\\]32\\[\\t ]\" 4 } } */\n-/* { dg-final { scan-assembler-times \"vmovdq\\[au\\]64\\[\\t ]\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vmovdq\\[au\\]8\\[\\t ]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vmovdq\\[au\\]16\\[\\t ]\" 6 } } *\n+/* { dg-final { scan-assembler-times \"vmovdq\\[au\\]32\\[\\t ]\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vmovdq\\[au\\]64\\[\\t ]\" 6 } } */\n \n extern char arraysb[64];\n extern short arraysw[32];"}]}