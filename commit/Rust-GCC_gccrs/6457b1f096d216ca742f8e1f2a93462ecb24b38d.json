{"sha": "6457b1f096d216ca742f8e1f2a93462ecb24b38d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ1N2IxZjA5NmQyMTZjYTc0MmY4ZTFmMmE5MzQ2MmVjYjI0YjM4ZA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2018-07-18T18:31:59Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2018-07-18T18:31:59Z"}, "message": "re PR fortran/85599 (warn about short-circuiting of logical expressions for non-pure functions)\n\n2018-07-18  Janus Weil  <janus@gcc.gnu.org>\n\t    Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/85599\n\t* dump-parse-tree.c (show_attr): Add handling of implicit_pure.\n\t* frontend-passes.c (do_warn_function_elimination): Do not warn for\n\tpure functions.\n\t* gfortran.h: Add prototypes for gfc_pure_function and\n\tgfc_implicit_pure_function.\n\t* gfortran.texi: Add chapter on evaluation of logical expressions.\n\t* invoke.texi: Mention that -Wfunction-elimination is implied\n\tby -Wextra.\n\t* lang.opt: Make -Wextra imply -Wfunction-elimination.\n\t* resolve.c (pure_function): Rename to gfc_pure_function.\n\t(gfc_implicit_pure_function): New function.\n\t(check_pure_function): Use it here.\n\t(impure_function_callback): New function.\n\t(resolve_operator): Call it via gfc_expr_walker.\n\n\n2018-07-18  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/85599\n\t* gfortran.dg/function_optimize_5.f90: Add option\n\t'-faggressive-function-elimination' and update dg-warning clauses.\n\t* gfortran.dg/short_circuiting.f90: New test.\n\nCo-Authored-By: Thomas Koenig <tkoenig@gcc.gnu.org>\n\nFrom-SVN: r262860", "tree": {"sha": "e42854bbf767584ce4c287893b494c6154cdea1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e42854bbf767584ce4c287893b494c6154cdea1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6457b1f096d216ca742f8e1f2a93462ecb24b38d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6457b1f096d216ca742f8e1f2a93462ecb24b38d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6457b1f096d216ca742f8e1f2a93462ecb24b38d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6457b1f096d216ca742f8e1f2a93462ecb24b38d/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c56e97274f164e704e7f13dfe53531ced3cb24ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c56e97274f164e704e7f13dfe53531ced3cb24ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c56e97274f164e704e7f13dfe53531ced3cb24ca"}], "stats": {"total": 216, "additions": 192, "deletions": 24}, "files": [{"sha": "61abb96a9771496083931269fcc8547d17565c5c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6457b1f096d216ca742f8e1f2a93462ecb24b38d", "patch": "@@ -1,3 +1,22 @@\n+2018-07-18  Janus Weil  <janus@gcc.gnu.org>\n+\t    Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/85599\n+\t* dump-parse-tree.c (show_attr): Add handling of implicit_pure.\n+\t* frontend-passes.c (do_warn_function_elimination): Do not warn for\n+\tpure functions.\n+\t* gfortran.h: Add prototypes for gfc_pure_function and\n+\tgfc_implicit_pure_function.\n+\t* gfortran.texi: Add chapter on evaluation of logical expressions.\n+\t* invoke.texi: Mention that -Wfunction-elimination is implied\n+\tby -Wextra.\n+\t* lang.opt: Make -Wextra imply -Wfunction-elimination.\n+\t* resolve.c (pure_function): Rename to gfc_pure_function.\n+\t(gfc_implicit_pure_function): New function.\n+\t(check_pure_function): Use it here.\n+\t(impure_function_callback): New function.\n+\t(resolve_operator): Call it via gfc_expr_walker.\n+\n 2018-07-16  Fritz Reese  <fritzoreese@gmail.com>\n \n \tPR fortran/83184"}, {"sha": "2a28fa309869f58ec0d861a09f95337185338810", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=6457b1f096d216ca742f8e1f2a93462ecb24b38d", "patch": "@@ -716,6 +716,8 @@ show_attr (symbol_attribute *attr, const char * module)\n     fputs (\" ELEMENTAL\", dumpfile);\n   if (attr->pure)\n     fputs (\" PURE\", dumpfile);\n+  if (attr->implicit_pure)\n+    fputs (\" IMPLICIT_PURE\", dumpfile);\n   if (attr->recursive)\n     fputs (\" RECURSIVE\", dumpfile);\n "}, {"sha": "f9dcddcb156931533679ba84f55fdf30ac7c6e0b", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=6457b1f096d216ca742f8e1f2a93462ecb24b38d", "patch": "@@ -840,17 +840,22 @@ create_var (gfc_expr * e, const char *vname)\n static void\n do_warn_function_elimination (gfc_expr *e)\n {\n-  if (e->expr_type != EXPR_FUNCTION)\n-    return;\n-  if (e->value.function.esym)\n-    gfc_warning (OPT_Wfunction_elimination,\n-\t\t \"Removing call to function %qs at %L\",\n-\t\t e->value.function.esym->name, &(e->where));\n-  else if (e->value.function.isym)\n-    gfc_warning (OPT_Wfunction_elimination,\n-\t\t \"Removing call to function %qs at %L\",\n-\t\t e->value.function.isym->name, &(e->where));\n+  const char *name;\n+  if (e->expr_type == EXPR_FUNCTION\n+      && !gfc_pure_function (e, &name) && !gfc_implicit_pure_function (e))\n+   {\n+      if (name)\n+\t  gfc_warning (OPT_Wfunction_elimination,\n+\t\t      \"Removing call to impure function %qs at %L\", name,\n+\t\t      &(e->where));\n+      else\n+\t  gfc_warning (OPT_Wfunction_elimination,\n+\t\t      \"Removing call to impure function at %L\",\n+\t\t      &(e->where));\n+   }\n }\n+\n+\n /* Callback function for the code walker for doing common function\n    elimination.  This builds up the list of functions in the expression\n    and goes through them to detect duplicates, which it then replaces"}, {"sha": "e490fc75e4cc8655146c2be203d58c1c13821d42", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=6457b1f096d216ca742f8e1f2a93462ecb24b38d", "patch": "@@ -3275,6 +3275,8 @@ bool gfc_resolve_intrinsic (gfc_symbol *, locus *);\n bool gfc_explicit_interface_required (gfc_symbol *, char *, int);\n extern int gfc_do_concurrent_flag;\n const char* gfc_lookup_function_fuzzy (const char *, gfc_symtree *);\n+int gfc_pure_function (gfc_expr *e, const char **name);\n+int gfc_implicit_pure_function (gfc_expr *e);\n \n \n /* array.c */"}, {"sha": "d6bb7aae49478fdd233d79e3d068e327bfe8e0d4", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=6457b1f096d216ca742f8e1f2a93462ecb24b38d", "patch": "@@ -1177,6 +1177,7 @@ might in some way or another become visible to the programmer.\n @menu\n * KIND Type Parameters::\n * Internal representation of LOGICAL variables::\n+* Evaluation of logical expressions::\n * Thread-safety of the runtime library::\n * Data consistency and durability::\n * Files opened without an explicit ACTION= specifier::\n@@ -1251,6 +1252,19 @@ values: @code{1} for @code{.TRUE.} and @code{0} for\n See also @ref{Argument passing conventions} and @ref{Interoperability with C}.\n \n \n+@node Evaluation of logical expressions\n+@section Evaluation of logical expressions\n+\n+The Fortran standard does not require the compiler to evaluate all parts of an\n+expression, if they do not contribute to the final result.  For logical\n+expressions with @code{.AND.} or @code{.OR.} operators, in particular, GNU\n+Fortran will optimize out function calls (even to impure functions) if the\n+result of the expression can be established without them.  However, since not\n+all compilers do that, and such an optimization can potentially modify the\n+program flow and subsequent results, GNU Fortran throws warnings for such\n+situations with the @option{-Wfunction-elimination} flag.\n+\n+\n @node Thread-safety of the runtime library\n @section Thread-safety of the runtime library\n @cindex thread-safety, threads"}, {"sha": "093864b4097225a3630f1b8662cbbec81461368d", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=6457b1f096d216ca742f8e1f2a93462ecb24b38d", "patch": "@@ -1056,8 +1056,9 @@ off via @option{-Wno-align-commons}. See also @option{-falign-commons}.\n @opindex @code{Wfunction-elimination}\n @cindex function elimination\n @cindex warnings, function elimination\n-Warn if any calls to functions are eliminated by the optimizations\n+Warn if any calls to impure functions are eliminated by the optimizations\n enabled by the @option{-ffrontend-optimize} option.\n+This option is implied by @option{-Wextra}.\n \n @item -Wrealloc-lhs\n @opindex @code{Wrealloc-lhs}"}, {"sha": "2b7f2903761865dead2076210382f40d443df881", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=6457b1f096d216ca742f8e1f2a93462ecb24b38d", "patch": "@@ -250,7 +250,7 @@ Fortran Var(flag_warn_frontend_loop_interchange)\n Warn if loops have been interchanged.\n \n Wfunction-elimination\n-Fortran Warning Var(warn_function_elimination)\n+Fortran Warning Var(warn_function_elimination) LangEnabledBy(Fortran,Wextra)\n Warn about function call elimination.\n \n Wimplicit-interface"}, {"sha": "40fa02ded51d86a0385b2994a803b2ec8117c62b", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 64, "deletions": 5, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=6457b1f096d216ca742f8e1f2a93462ecb24b38d", "patch": "@@ -2941,8 +2941,8 @@ is_external_proc (gfc_symbol *sym)\n static int\n pure_stmt_function (gfc_expr *, gfc_symbol *);\n \n-static int\n-pure_function (gfc_expr *e, const char **name)\n+int\n+gfc_pure_function (gfc_expr *e, const char **name)\n {\n   int pure;\n   gfc_component *comp;\n@@ -2982,6 +2982,21 @@ pure_function (gfc_expr *e, const char **name)\n }\n \n \n+/* Check if the expression is a reference to an implicitly pure function.  */\n+\n+int\n+gfc_implicit_pure_function (gfc_expr *e)\n+{\n+  gfc_component *comp = gfc_get_proc_ptr_comp (e);\n+  if (comp)\n+    return gfc_implicit_pure (comp->ts.interface);\n+  else if (e->value.function.esym)\n+    return gfc_implicit_pure (e->value.function.esym);\n+  else\n+    return 0;\n+}\n+\n+\n static bool\n impure_stmt_fcn (gfc_expr *e, gfc_symbol *sym,\n \t\t int *f ATTRIBUTE_UNUSED)\n@@ -2996,7 +3011,7 @@ impure_stmt_fcn (gfc_expr *e, gfc_symbol *sym,\n \t|| e->symtree->n.sym->attr.proc == PROC_ST_FUNCTION)\n     return false;\n \n-  return pure_function (e, &name) ? false : true;\n+  return gfc_pure_function (e, &name) ? false : true;\n }\n \n \n@@ -3012,7 +3027,7 @@ pure_stmt_function (gfc_expr *e, gfc_symbol *sym)\n static bool check_pure_function (gfc_expr *e)\n {\n   const char *name = NULL;\n-  if (!pure_function (e, &name) && name)\n+  if (!gfc_pure_function (e, &name) && name)\n     {\n       if (forall_flag)\n \t{\n@@ -3034,7 +3049,8 @@ static bool check_pure_function (gfc_expr *e)\n \t\t     \"within a PURE procedure\", name, &e->where);\n \t  return false;\n \t}\n-      gfc_unset_implicit_pure (NULL);\n+      if (!gfc_implicit_pure_function (e))\n+\tgfc_unset_implicit_pure (NULL);\n     }\n   return true;\n }\n@@ -3822,6 +3838,41 @@ lookup_uop_fuzzy (const char *op, gfc_symtree *uop)\n }\n \n \n+/* Callback finding an impure function as an operand to an .and. or\n+   .or.  expression.  Remember the last function warned about to\n+   avoid double warnings when recursing.  */\n+\n+static int\n+impure_function_callback (gfc_expr **e, int *walk_subtrees ATTRIBUTE_UNUSED,\n+\t\t\t  void *data)\n+{\n+  gfc_expr *f = *e;\n+  const char *name;\n+  static gfc_expr *last = NULL;\n+  bool *found = (bool *) data;\n+\n+  if (f->expr_type == EXPR_FUNCTION)\n+    {\n+      *found = 1;\n+      if (f != last && !gfc_pure_function (f, &name)\n+\t  && !gfc_implicit_pure_function (f))\n+\t{\n+\t  if (name)\n+\t    gfc_warning (OPT_Wfunction_elimination,\n+\t\t\t \"Impure function %qs at %L might not be evaluated\",\n+\t\t\t name, &f->where);\n+\t  else\n+\t    gfc_warning (OPT_Wfunction_elimination,\n+\t\t\t \"Impure function at %L might not be evaluated\",\n+\t\t\t &f->where);\n+\t}\n+      last = f;\n+    }\n+\n+  return 0;\n+}\n+\n+\n /* Resolve an operator expression node.  This can involve replacing the\n    operation with a user defined function call.  */\n \n@@ -3930,6 +3981,14 @@ resolve_operator (gfc_expr *e)\n \t    gfc_convert_type (op1, &e->ts, 2);\n \t  else if (op2->ts.kind < e->ts.kind)\n \t    gfc_convert_type (op2, &e->ts, 2);\n+\n+\t  if (e->value.op.op == INTRINSIC_AND || e->value.op.op == INTRINSIC_OR)\n+\t    {\n+\t      /* Warn about short-circuiting\n+\t         with impure function as second operand.  */\n+\t      bool op2_f = false;\n+\t      gfc_expr_walker (&op2, impure_function_callback, &op2_f);\n+\t    }\n \t  break;\n \t}\n "}, {"sha": "95c58fb12f27c652ba8278c689d8ff2ab65d6e36", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6457b1f096d216ca742f8e1f2a93462ecb24b38d", "patch": "@@ -1,3 +1,10 @@\n+2018-07-18  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/85599\n+\t* gfortran.dg/function_optimize_5.f90: Add option\n+\t'-faggressive-function-elimination' and update dg-warning clauses.\n+\t* gfortran.dg/short_circuiting.f90: New test.\n+\n 2018-07-18  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/86190 - bogus -Wsign-conversion warning"}, {"sha": "e485ea0a2e02f07a4da4916fc389bbce7445644b", "filename": "gcc/testsuite/gfortran.dg/function_optimize_5.f90", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_optimize_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_optimize_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffunction_optimize_5.f90?ref=6457b1f096d216ca742f8e1f2a93462ecb24b38d", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-ffrontend-optimize -finline-matmul-limit=0 -Wfunction-elimination\" }\n+! { dg-options \"-ffrontend-optimize -faggressive-function-elimination -finline-matmul-limit=0 -Wfunction-elimination\" }\n ! Check the -ffrontend-optimize (in the absence of -O) and\n ! -Wfunction-elimination options.\n program main\n@@ -26,16 +26,16 @@ end function elem_impure\n \n   data a /2., 3., 5., 7./\n   data b /11., 13., 17., 23./\n-  write (unit=line, fmt='(4F7.2)') matmul(a,b)  & ! { dg-warning \"Removing call to function 'matmul'\" } \n+  write (unit=line, fmt='(4F7.2)') matmul(a,b)  &\n        & + matmul(a,b)\n-  z = sin(x) + 2.0 + sin(x)  ! { dg-warning \"Removing call to function 'sin'\" }\n+  z = sin(x) + 2.0 + sin(x)\n   print *,z\n-  x = ext_func(a) + 23 + ext_func(a)\n+  x = ext_func(a) + 23 + ext_func(a)  ! { dg-warning \"Removing call to impure function\" }\n   print *,d,x\n-  z = element(x) + element(x) ! { dg-warning \"Removing call to function 'element'\" }\n+  z = element(x) + element(x)\n   print *,z\n-  i = mypure(x) - mypure(x) ! { dg-warning \"Removing call to function 'mypure'\" }\n+  i = mypure(x) - mypure(x)\n   print *,i\n-  z = elem_impure(x) - elem_impure(x)\n+  z = elem_impure(x) - elem_impure(x)  ! { dg-warning \"Removing call to impure function\" }\n   print *,z\n end program main"}, {"sha": "44ff7e43eeb50802fe545039a5fe3170fc7e3659", "filename": "gcc/testsuite/gfortran.dg/short_circuiting.f90", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ftestsuite%2Fgfortran.dg%2Fshort_circuiting.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6457b1f096d216ca742f8e1f2a93462ecb24b38d/gcc%2Ftestsuite%2Fgfortran.dg%2Fshort_circuiting.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fshort_circuiting.f90?ref=6457b1f096d216ca742f8e1f2a93462ecb24b38d", "patch": "@@ -0,0 +1,59 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-Wextra\" }\n+!\n+! PR 85599: warn about short-circuiting of logical expressions for non-pure functions\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+module a\n+\n+   interface impl_pure_a\n+      module procedure impl_pure_a1\n+   end interface\n+\n+contains\n+\n+    logical function impl_pure_a1()\n+      impl_pure_a1 = .true.\n+   end function\n+\n+end module\n+\n+\n+program short_circuit\n+\n+   use a\n+\n+   logical :: flag\n+   flag = .false.\n+   flag = check() .and. flag\n+   flag = flag .and. check()        ! { dg-warning \"might not be evaluated\" }\n+   flag = flag .and. pure_check()\n+   flag = flag .and. impl_pure_1()\n+   flag = flag .and. impl_pure_2()\n+   flag = flag .and. impl_pure_a1()\n+   flag = flag .and. impl_pure_a()\n+\n+contains\n+\n+   logical function check()\n+      integer, save :: i = 1\n+      print *, \"check\", i\n+      i = i + 1\n+      check = .true.\n+   end function\n+\n+   logical pure function pure_check()\n+      pure_check = .true.\n+   end function\n+\n+   logical function impl_pure_1()\n+      impl_pure_1 = .true.\n+   end function\n+\n+   logical function impl_pure_2()\n+      impl_pure_2 = impl_pure_1()\n+   end function\n+\n+\n+end"}]}