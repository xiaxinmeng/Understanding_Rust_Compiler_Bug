{"sha": "28d08315ed4962e850886887085d35e135d6a34e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhkMDgzMTVlZDQ5NjJlODUwODg2ODg3MDg1ZDM1ZTEzNWQ2YTM0ZQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-12-09T09:17:24Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-12-09T09:17:24Z"}, "message": "re PR fortran/32129 (ICE: Procedure call with array-section-actual to scalar dummy)\n\n2007-12-09  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/32129\n\t* dump-parse-tree.c (gfc_show_expr_n): New function for\n\tdebugging.\n\t* gfortran.h : Add prototype for gfc_show_expr_n.\n\t* expr.c (simplify_constructor): Copy the constructor\n\texpression and try to simplify that.  If success, replace the\n\toriginal.  Otherwise discard the copy, keep going through\n\tthe structure and return success.\n\n\tPR fortran/31487\n\t* decl.c (build_struct): Pad out default initializers with\n\tspaces to the component character length.\n\n2007-12-09  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/32129\n\t* gfortran.dg/derived_comp_array_ref_6.f90: New test.\n\t* gfortran.dg/derived_comp_array_ref_7.f90: New test.\n\n\tPR fortran/31487\n\t* gfortran.dg/char_component_initializer_1.f90: New test.\n\nFrom-SVN: r130719", "tree": {"sha": "20e58b82c3459ec5c5b1e896dcce5b3ad27987fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20e58b82c3459ec5c5b1e896dcce5b3ad27987fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28d08315ed4962e850886887085d35e135d6a34e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d08315ed4962e850886887085d35e135d6a34e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28d08315ed4962e850886887085d35e135d6a34e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d08315ed4962e850886887085d35e135d6a34e/comments", "author": null, "committer": null, "parents": [{"sha": "4d19dfcf675fcdcb5bd690ef3f67c8daf0f019df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d19dfcf675fcdcb5bd690ef3f67c8daf0f019df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d19dfcf675fcdcb5bd690ef3f67c8daf0f019df"}], "stats": {"total": 143, "additions": 140, "deletions": 3}, "files": [{"sha": "4a02e5c2f05f2c31d5a5860203eb9a072fa793bb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d08315ed4962e850886887085d35e135d6a34e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d08315ed4962e850886887085d35e135d6a34e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=28d08315ed4962e850886887085d35e135d6a34e", "patch": "@@ -1,3 +1,18 @@\n+2007-12-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/32129\n+\t* dump-parse-tree.c (gfc_show_expr_n): New function for\n+\tdebugging.\n+\t* gfortran.h : Add prototype for gfc_show_expr_n.\n+\t* expr.c (simplify_constructor): Copy the constructor\n+\texpression and try to simplify that.  If success, replace the\n+\toriginal.  Otherwise discard the copy, keep going through\n+\tthe structure and return success.\n+\n+\tPR fortran/31487\n+\t* decl.c (build_struct): Pad out default initializers with\n+\tspaces to the component character length.\n+\n 2007-12-08  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/34342"}, {"sha": "584bb19b4a4677be32ecb3a46bb59936fb78feeb", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d08315ed4962e850886887085d35e135d6a34e/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d08315ed4962e850886887085d35e135d6a34e/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=28d08315ed4962e850886887085d35e135d6a34e", "patch": "@@ -1394,6 +1394,24 @@ build_struct (const char *name, gfc_charlen *cl, gfc_expr **init,\n     c->dimension = 1;\n   *as = NULL;\n \n+  /* Should this ever get more complicated, combine with similar section\n+     in add_init_expr_to_sym into a separate function.  */\n+  if (c->ts.type == BT_CHARACTER && !c->pointer && c->initializer)\n+    {\n+      int len = mpz_get_si (c->ts.cl->length->value.integer);\n+\n+      if (c->initializer->expr_type == EXPR_CONSTANT)\n+\tgfc_set_constant_character_len (len, c->initializer, false);\n+      else if (mpz_cmp (c->ts.cl->length->value.integer,\n+\t\t\tc->initializer->ts.cl->length->value.integer))\n+\t{\n+\t  gfc_constructor *ctor = c->initializer->value.constructor;\n+\t  for (;ctor ; ctor = ctor->next)\n+\t    if (ctor->expr->expr_type == EXPR_CONSTANT)\n+\t      gfc_set_constant_character_len (len, ctor->expr, true);\n+\t}\n+    }\n+\n   /* Check array components.  */\n   if (!c->dimension)\n     {"}, {"sha": "f9c92b272e6340af9457c34fcd59a5a387de7bd2", "filename": "gcc/fortran/dump-parse-tree.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d08315ed4962e850886887085d35e135d6a34e/gcc%2Ffortran%2Fdump-parse-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d08315ed4962e850886887085d35e135d6a34e/gcc%2Ffortran%2Fdump-parse-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdump-parse-tree.c?ref=28d08315ed4962e850886887085d35e135d6a34e", "patch": "@@ -540,6 +540,15 @@ gfc_show_expr (gfc_expr *p)\n     }\n }\n \n+/* Show an expression for diagnostic purposes. */\n+void\n+gfc_show_expr_n (const char * msg, gfc_expr *e)\n+{\n+  if (msg)\n+    gfc_status (msg);\n+  gfc_show_expr (e);\n+  gfc_status_char ('\\n');\n+}\n \n /* Show symbol attributes.  The flavor and intent are followed by\n    whatever single bit attributes are present.  */"}, {"sha": "255acb6f188d6ebe8e9bd5daff299c13a0477e9b", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d08315ed4962e850886887085d35e135d6a34e/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d08315ed4962e850886887085d35e135d6a34e/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=28d08315ed4962e850886887085d35e135d6a34e", "patch": "@@ -963,6 +963,8 @@ simplify_intrinsic_op (gfc_expr *p, int type)\n static try\n simplify_constructor (gfc_constructor *c, int type)\n {\n+  gfc_expr *p;\n+\n   for (; c; c = c->next)\n     {\n       if (c->iterator\n@@ -971,8 +973,21 @@ simplify_constructor (gfc_constructor *c, int type)\n \t      || gfc_simplify_expr (c->iterator->step, type) == FAILURE))\n \treturn FAILURE;\n \n-      if (c->expr && gfc_simplify_expr (c->expr, type) == FAILURE)\n-\treturn FAILURE;\n+      if (c->expr)\n+\t{\n+\t  /* Try and simplify a copy.  Replace the original if successful\n+\t     but keep going through the constructor at all costs.  Not\n+\t     doing so can make a dog's dinner of complicated things.  */\n+\t  p = gfc_copy_expr (c->expr);\n+\n+\t  if (gfc_simplify_expr (p, type) == FAILURE)\n+\t    {\n+\t      gfc_free_expr (p);\n+\t      continue;\n+\t    }\n+\n+\t  gfc_replace_expr (c->expr, p);\n+\t}\n     }\n \n   return SUCCESS;"}, {"sha": "f1fe872973565c8f9efb6f5732bb4f9ec33e632f", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d08315ed4962e850886887085d35e135d6a34e/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d08315ed4962e850886887085d35e135d6a34e/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=28d08315ed4962e850886887085d35e135d6a34e", "patch": "@@ -2359,6 +2359,7 @@ void gfc_show_components (gfc_symbol *);\n void gfc_show_constructor (gfc_constructor *);\n void gfc_show_equiv (gfc_equiv *);\n void gfc_show_expr (gfc_expr *);\n+void gfc_show_expr_n (const char *, gfc_expr *);\n void gfc_show_namelist (gfc_namelist *);\n void gfc_show_namespace (gfc_namespace *);\n void gfc_show_ref (gfc_ref *);"}, {"sha": "c56d1efa7ceac087c0c27ec884180880b47b729d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d08315ed4962e850886887085d35e135d6a34e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d08315ed4962e850886887085d35e135d6a34e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=28d08315ed4962e850886887085d35e135d6a34e", "patch": "@@ -1,4 +1,13 @@\n-2007-12-06  Tobias Burnus  <burnus@net-b.de>\n+2007-12-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/32129\n+\t* gfortran.dg/derived_comp_array_ref_6.f90: New test.\n+\t* gfortran.dg/derived_comp_array_ref_7.f90: New test.\n+\n+\tPR fortran/31487\n+\t* gfortran.dg/char_component_initializer_1.f90: New test.\n+\n+2007-12-09  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/34342\n \tPR fortran/34345"}, {"sha": "8642ddfca415c38db58001a73a4f23066eb57d02", "filename": "gcc/testsuite/gfortran.dg/char_component_initializer_1.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d08315ed4962e850886887085d35e135d6a34e/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_component_initializer_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d08315ed4962e850886887085d35e135d6a34e/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_component_initializer_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_component_initializer_1.f90?ref=28d08315ed4962e850886887085d35e135d6a34e", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do run }\n+! Check the fix for PR31487 in which the derived type default initializer\n+! would be padded out with nulls instead of spaces.\n+!\n+! Reported by Harald Anlauf <anlauf@gmx.de>\n+!\n+program gfcbug62\n+  implicit none\n+  character(len=16) ::    tdefi(2) = (/'0z1jan0000','1hr       '/)\n+  type t_ctl\n+     character(len=16) :: tdefi(2) = (/'0z1jan0000','1hr       '/)\n+  end type t_ctl\n+\n+  type(t_ctl) :: ctl\n+  integer     :: i,k\n+\n+  if (tdefi(1) .ne. ctl%tdefi(1)) call abort ()\n+end program gfcbug62"}, {"sha": "b8a2a819b5192d84c05e53e878b5f6d549af446d", "filename": "gcc/testsuite/gfortran.dg/derived_comp_array_ref_6.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d08315ed4962e850886887085d35e135d6a34e/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_comp_array_ref_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d08315ed4962e850886887085d35e135d6a34e/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_comp_array_ref_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_comp_array_ref_6.f90?ref=28d08315ed4962e850886887085d35e135d6a34e", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+! Check the fix for PR32129 in which the argument 'vec(vy(i, :))' was\n+! incorrectly simplified, resulting in an ICE and a missed error.\n+!\n+! Reported by Tobias Burnus <burnus@gcc.gnu.org>\n+!\n+    MODULE cdf_aux_mod\n+      TYPE :: the_distribution\n+        INTEGER :: parameters(1)\n+      END TYPE the_distribution\n+      TYPE (the_distribution), PARAMETER :: the_beta = the_distribution((/0/))\n+    CONTAINS\n+      SUBROUTINE set_bound(arg_name)\n+        INTEGER, INTENT (IN) :: arg_name\n+      END SUBROUTINE set_bound\n+    END MODULE cdf_aux_mod\n+    MODULE cdf_beta_mod\n+    CONTAINS\n+      SUBROUTINE cdf_beta()\n+        USE cdf_aux_mod\n+        INTEGER :: which\n+          which = 1\n+          CALL set_bound(the_beta%parameters(1:which)) ! { dg-error \"Type/rank mismatch\" }\n+      END SUBROUTINE cdf_beta\n+    END MODULE cdf_beta_mod\n+\n+! { dg-final { cleanup-modules \"cdf_aux_mod\" } }"}, {"sha": "890056589898636c666df0c15db78fa96150b669", "filename": "gcc/testsuite/gfortran.dg/derived_comp_array_ref_7.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d08315ed4962e850886887085d35e135d6a34e/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_comp_array_ref_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d08315ed4962e850886887085d35e135d6a34e/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_comp_array_ref_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_comp_array_ref_7.f90?ref=28d08315ed4962e850886887085d35e135d6a34e", "patch": "@@ -0,0 +1,25 @@\n+! { dg-do run }\n+! Check the fix for PR32129 #4 in which the argument 'vec(vy(i, :))' was\n+! incorrectly simplified, resulting in an ICE.\n+!\n+! Reported by Francois-Xavier Coudert <fxcoudert@gcc.gnu.org>\n+!\n+program testCode\n+  implicit none\n+  type vec\n+    real, dimension(2) :: coords\n+  end type\n+  integer :: i\n+  real, dimension(2,2), parameter :: vy = reshape ((/1,2,3,4/),(/2,2/))\n+  i = 1\n+  if (any (foo(vec(vy(i, :))) /= vy(i, :))) call abort ()\n+\n+contains\n+\n+  function foo (xin)\n+    type(vec) :: xin\n+    real, dimension (2) :: foo\n+    intent(in)  xin\n+    foo = xin%coords\n+  end function\n+end program"}]}