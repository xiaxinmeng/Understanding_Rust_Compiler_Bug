{"sha": "54f044ebbbdce8a6758b3fa7bdbd854632bc47b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRmMDQ0ZWJiYmRjZThhNjc1OGIzZmE3YmRiZDg1NDYzMmJjNDdiMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-06-24T17:48:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-06-24T17:48:16Z"}, "message": "re PR middle-end/44492 (auto-inc-dec pushes PRE_MODIFY/PRE_INC into inline asm operands)\n\n\tPR middle-end/44492\n\t* recog.h (struct recog_data): Add is_asm field.\n\t* recog.c (asm_operand_ok, constrain_operands): If neither < nor > is\n\tpresent in constraints of inline-asm operand and memory operand\n\tcontains {PRE,POST}_{INC,DEC,MODIFY}, return 0.\n\t(extract_insn): Initialize recog_data.is_asm.\n\t* doc/md.texi (Constraints): Document operand side-effect rules.\n\n\t* g++.dg/torture/pr44492.C: New test.\n\nFrom-SVN: r161328", "tree": {"sha": "342f106af8349c0f121d3e089e983f9d4013abf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/342f106af8349c0f121d3e089e983f9d4013abf1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54f044ebbbdce8a6758b3fa7bdbd854632bc47b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54f044ebbbdce8a6758b3fa7bdbd854632bc47b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54f044ebbbdce8a6758b3fa7bdbd854632bc47b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54f044ebbbdce8a6758b3fa7bdbd854632bc47b3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7d42abb94d423e65a2cbc7334b7ca81c3ff6f5f"}], "stats": {"total": 120, "additions": 117, "deletions": 3}, "files": [{"sha": "b6e3eed67190eb5d98f8211835f34690d3629fe9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f044ebbbdce8a6758b3fa7bdbd854632bc47b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f044ebbbdce8a6758b3fa7bdbd854632bc47b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54f044ebbbdce8a6758b3fa7bdbd854632bc47b3", "patch": "@@ -1,3 +1,13 @@\n+2010-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/44492\n+\t* recog.h (struct recog_data): Add is_asm field.\n+\t* recog.c (asm_operand_ok, constrain_operands): If neither < nor > is\n+\tpresent in constraints of inline-asm operand and memory operand\n+\tcontains {PRE,POST}_{INC,DEC,MODIFY}, return 0.\n+\t(extract_insn): Initialize recog_data.is_asm.\n+\t* doc/md.texi (Constraints): Document operand side-effect rules.\n+\n 2010-06-24  Andi Kleen  <ak@linux.intel.com>\n \n \t* c-parser.c (c_parser_conditional_expression):"}, {"sha": "46bd4f61112dca6c7a347b1e5efc613ba933d1f3", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f044ebbbdce8a6758b3fa7bdbd854632bc47b3/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f044ebbbdce8a6758b3fa7bdbd854632bc47b3/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=54f044ebbbdce8a6758b3fa7bdbd854632bc47b3", "patch": "@@ -1052,6 +1052,10 @@ an operand may be in a register, and which kinds of register; whether the\n operand can be a memory reference, and which kinds of address; whether the\n operand may be an immediate constant, and which possible values it may\n have.  Constraints can also require two operands to match.\n+Side-effects aren't allowed in operands of inline @code{asm}, unless\n+@samp{<} or @samp{>} constraints are used, because there is no guarantee\n+that the side-effects will happen exactly once in an instruction that can update\n+the addressing register.\n \n @ifset INTERNALS\n @menu\n@@ -1129,12 +1133,21 @@ would fit the @samp{m} constraint but not the @samp{o} constraint.\n @cindex @samp{<} in constraint\n @item @samp{<}\n A memory operand with autodecrement addressing (either predecrement or\n-postdecrement) is allowed.\n+postdecrement) is allowed.  In inline @code{asm} this constraint is only\n+allowed if the operand is used exactly once in an instruction that can\n+handle the side-effects.  Not using an operand with @samp{<} in constraint\n+string in the inline @code{asm} pattern at all or using it in multiple\n+instructions isn't valid, because the side-effects wouldn't be performed\n+or would be performed more than once.  Furthermore, on some targets\n+the operand with @samp{<} in constraint string must be accompanied by\n+special instruction suffixes like @code{%U0} instruction suffix on PowerPC\n+or @code{%P0} on IA-64.\n \n @cindex @samp{>} in constraint\n @item @samp{>}\n A memory operand with autoincrement addressing (either preincrement or\n-postincrement) is allowed.\n+postincrement) is allowed.  In inline @code{asm} the same restrictions\n+as for @samp{<} apply.\n \n @cindex @samp{r} in constraint\n @cindex registers in constraints"}, {"sha": "43f901f00060042dc454cdb91123033bed149661", "filename": "gcc/recog.c", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f044ebbbdce8a6758b3fa7bdbd854632bc47b3/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f044ebbbdce8a6758b3fa7bdbd854632bc47b3/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=54f044ebbbdce8a6758b3fa7bdbd854632bc47b3", "patch": "@@ -1601,14 +1601,17 @@ int\n asm_operand_ok (rtx op, const char *constraint, const char **constraints)\n {\n   int result = 0;\n+#ifdef AUTO_INC_DEC\n+  bool incdec_ok = false;\n+#endif\n \n   /* Use constrain_operands after reload.  */\n   gcc_assert (!reload_completed);\n \n   /* Empty constraint string is the same as \"X,...,X\", i.e. X for as\n      many alternatives as required to match the other operands.  */\n   if (*constraint == '\\0')\n-    return 1;\n+    result = 1;\n \n   while (*constraint)\n     {\n@@ -1685,6 +1688,9 @@ asm_operand_ok (rtx op, const char *constraint, const char **constraints)\n \t\t  || GET_CODE (XEXP (op, 0)) == PRE_DEC\n \t\t  || GET_CODE (XEXP (op, 0)) == POST_DEC))\n \t    result = 1;\n+#ifdef AUTO_INC_DEC\n+\t  incdec_ok = true;\n+#endif\n \t  break;\n \n \tcase '>':\n@@ -1693,6 +1699,9 @@ asm_operand_ok (rtx op, const char *constraint, const char **constraints)\n \t\t  || GET_CODE (XEXP (op, 0)) == PRE_INC\n \t\t  || GET_CODE (XEXP (op, 0)) == POST_INC))\n \t    result = 1;\n+#ifdef AUTO_INC_DEC\n+\t  incdec_ok = true;\n+#endif\n \t  break;\n \n \tcase 'E':\n@@ -1814,6 +1823,23 @@ asm_operand_ok (rtx op, const char *constraint, const char **constraints)\n \treturn 0;\n     }\n \n+#ifdef AUTO_INC_DEC\n+  /* For operands without < or > constraints reject side-effects.  */\n+  if (!incdec_ok && result && MEM_P (op))\n+    switch (GET_CODE (XEXP (op, 0)))\n+      {\n+      case PRE_INC:\n+      case POST_INC:\n+      case PRE_DEC:\n+      case POST_DEC:\n+      case PRE_MODIFY:\n+      case POST_MODIFY:\n+\treturn 0;\n+      default:\n+\tbreak;\n+      }\n+#endif\n+\n   return result;\n }\n \f\n@@ -2039,6 +2065,7 @@ extract_insn (rtx insn)\n   recog_data.n_operands = 0;\n   recog_data.n_alternatives = 0;\n   recog_data.n_dups = 0;\n+  recog_data.is_asm = false;\n \n   switch (GET_CODE (body))\n     {\n@@ -2085,6 +2112,7 @@ extract_insn (rtx insn)\n \t      while (*p)\n \t\trecog_data.n_alternatives += (*p++ == ',');\n \t    }\n+\t  recog_data.is_asm = true;\n \t  break;\n \t}\n       fatal_insn_not_found (insn);\n@@ -2699,6 +2727,30 @@ constrain_operands (int strict)\n \t\t    = recog_data.operand[funny_match[funny_match_index].this_op];\n \t\t}\n \n+#ifdef AUTO_INC_DEC\n+\t      /* For operands without < or > constraints reject side-effects.  */\n+\t      if (recog_data.is_asm)\n+\t\t{\n+\t\t  for (opno = 0; opno < recog_data.n_operands; opno++)\n+\t\t    if (MEM_P (recog_data.operand[opno]))\n+\t\t      switch (GET_CODE (XEXP (recog_data.operand[opno], 0)))\n+\t\t\t{\n+\t\t\tcase PRE_INC:\n+\t\t\tcase POST_INC:\n+\t\t\tcase PRE_DEC:\n+\t\t\tcase POST_DEC:\n+\t\t\tcase PRE_MODIFY:\n+\t\t\tcase POST_MODIFY:\n+\t\t\t  if (strchr (recog_data.constraints[opno], '<') == NULL\n+\t\t\t      || strchr (recog_data.constraints[opno], '>')\n+\t\t\t\t == NULL)\n+\t\t\t    return 0;\n+\t\t\t  break;\n+\t\t\tdefault:\n+\t\t\t  break;\n+\t\t\t}\n+\t\t}\n+#endif\n \t      return 1;\n \t    }\n \t}"}, {"sha": "71dba91fc0525cf9ccca2e9e49c847e06b76979a", "filename": "gcc/recog.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f044ebbbdce8a6758b3fa7bdbd854632bc47b3/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f044ebbbdce8a6758b3fa7bdbd854632bc47b3/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=54f044ebbbdce8a6758b3fa7bdbd854632bc47b3", "patch": "@@ -230,6 +230,9 @@ struct recog_data\n   /* The number of alternatives in the constraints for the insn.  */\n   char n_alternatives;\n \n+  /* True if insn is ASM_OPERANDS.  */\n+  bool is_asm;\n+\n   /* Specifies whether an insn alternative is enabled using the\n      `enabled' attribute in the insn pattern definition.  For back\n      ends not using the `enabled' attribute the array fields are"}, {"sha": "ef242f694c07f9bd45f7b3f661ab0d41e7324b49", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f044ebbbdce8a6758b3fa7bdbd854632bc47b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f044ebbbdce8a6758b3fa7bdbd854632bc47b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=54f044ebbbdce8a6758b3fa7bdbd854632bc47b3", "patch": "@@ -1,3 +1,8 @@\n+2010-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/44492\n+\t* g++.dg/torture/pr44492.C: New test.\n+\n 2010-06-24  Andi Kleen  <ak@linux.intel.com>\n \n         * c-c++-common/warn-omitted-condop.c: New."}, {"sha": "41669241e7e6edb898eb8e6d370b8cf7aba939d1", "filename": "gcc/testsuite/g++.dg/torture/pr44492.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54f044ebbbdce8a6758b3fa7bdbd854632bc47b3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr44492.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54f044ebbbdce8a6758b3fa7bdbd854632bc47b3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr44492.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr44492.C?ref=54f044ebbbdce8a6758b3fa7bdbd854632bc47b3", "patch": "@@ -0,0 +1,31 @@\n+// PR middle-end/44492\n+// { dg-do run }\n+\n+struct T { unsigned long p; };\n+struct S { T a, b, c; unsigned d; };\n+\n+__attribute__((noinline))\n+void\n+bar (const T &x, const T &y)\n+{\n+  if (x.p != 0x2348 || y.p != 0x2346)\n+    __builtin_abort ();\n+}\n+\n+__attribute__((noinline))\n+void\n+foo (S &s, T e)\n+{\n+  unsigned long a = e.p;\n+  unsigned long b = s.b.p;\n+  __asm__ volatile (\"\" : : \"rm\" (a), \"rm\" (b));\n+  bar (e, s.b);\n+}\n+\n+int\n+main ()\n+{\n+  S s = { { 0x2345 }, { 0x2346 }, { 0x2347 }, 6 };\n+  T t = { 0x2348 };\n+  foo (s, t);\n+}"}]}