{"sha": "df2f61000e93a5c300703c9f23af007c0621693f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGYyZjYxMDAwZTkzYTVjMzAwNzAzYzlmMjNhZjAwN2MwNjIxNjkzZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-09-06T15:56:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-09-06T15:56:20Z"}, "message": "re PR target/47025 (Dead stores in variadic functions not eliminated)\n\n2011-09-06  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/47025\n\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1): BUILT_IN_VA_END\n\tuses nothing.\n\t(call_may_clobber_ref_p_1): BUILT_IN_VA_END is a barrier like\n\tBUILT_IN_FREE.\n\t(stmt_kills_ref_p_1): BUILT_IN_VA_END kills what its argument\n\tdefinitely points to.\n\t* tree-ssa-structalias.c (find_func_aliases_for_builtin_call):\n\tBUILT_IN_VA_START doesn't let its va_list argument escape.\n\t* tree-ssa-dce.c (propagate_necessity): BUILT_IN_VA_END does\n\tnot make any previous stores necessary.\n\nFrom-SVN: r178601", "tree": {"sha": "fbde3337b79e868502c2f6f97441b602320dba10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbde3337b79e868502c2f6f97441b602320dba10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df2f61000e93a5c300703c9f23af007c0621693f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2f61000e93a5c300703c9f23af007c0621693f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df2f61000e93a5c300703c9f23af007c0621693f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2f61000e93a5c300703c9f23af007c0621693f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e972fd5281b7268411de938719ce150944100105", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e972fd5281b7268411de938719ce150944100105", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e972fd5281b7268411de938719ce150944100105"}], "stats": {"total": 67, "additions": 51, "deletions": 16}, "files": [{"sha": "f867f9767cecdbfed49cd54fd6e30faf4c059175", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2f61000e93a5c300703c9f23af007c0621693f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2f61000e93a5c300703c9f23af007c0621693f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df2f61000e93a5c300703c9f23af007c0621693f", "patch": "@@ -1,3 +1,17 @@\n+2011-09-06  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/47025\n+\t* tree-ssa-alias.c (ref_maybe_used_by_call_p_1): BUILT_IN_VA_END\n+\tuses nothing.\n+\t(call_may_clobber_ref_p_1): BUILT_IN_VA_END is a barrier like\n+\tBUILT_IN_FREE.\n+\t(stmt_kills_ref_p_1): BUILT_IN_VA_END kills what its argument\n+\tdefinitely points to.\n+\t* tree-ssa-structalias.c (find_func_aliases_for_builtin_call):\n+\tBUILT_IN_VA_START doesn't let its va_list argument escape.\n+\t* tree-ssa-dce.c (propagate_necessity): BUILT_IN_VA_END does\n+\tnot make any previous stores necessary.\n+\n 2011-09-06  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-inline.h (struct inline_summary): Move versionable flag..."}, {"sha": "10c529b114fe95e59574b0bc699c6b4aff5b21b7", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2f61000e93a5c300703c9f23af007c0621693f/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2f61000e93a5c300703c9f23af007c0621693f/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=df2f61000e93a5c300703c9f23af007c0621693f", "patch": "@@ -1254,6 +1254,7 @@ ref_maybe_used_by_call_p_1 (gimple call, ao_ref *ref)\n \tcase BUILT_IN_SINCOSF:\n \tcase BUILT_IN_SINCOSL:\n \tcase BUILT_IN_ASSUME_ALIGNED:\n+\tcase BUILT_IN_VA_END:\n \t  return false;\n \t/* __sync_* builtins and some OpenMP builtins act as threading\n \t   barriers.  */\n@@ -1518,6 +1519,7 @@ call_may_clobber_ref_p_1 (gimple call, ao_ref *ref)\n \t   the call has to serve as a barrier for moving loads and stores\n \t   across it.  */\n \tcase BUILT_IN_FREE:\n+\tcase BUILT_IN_VA_END:\n \t  {\n \t    tree ptr = gimple_call_arg (call, 0);\n \t    return ptr_deref_may_alias_ref_p_1 (ptr, ref);\n@@ -1763,10 +1765,23 @@ stmt_kills_ref_p_1 (gimple stmt, ao_ref *ref)\n \t\t\t      / BITS_PER_UNIT)))\n \t\t    return true;\n \t\t}\n+\t      break;\n+\t    }\n+\n+\t  case BUILT_IN_VA_END:\n+\t    {\n+\t      tree ptr = gimple_call_arg (stmt, 0);\n+\t      if (TREE_CODE (ptr) == ADDR_EXPR)\n+\t\t{\n+\t\t  tree base = ao_ref_base (ref);\n+\t\t  if (TREE_OPERAND (ptr, 0) == base)\n+\t\t    return true;\n+\t\t}\n+\t      break;\n \t    }\n+\n \t  default:;\n \t  }\n-\n     }\n   return false;\n }"}, {"sha": "c9ad3117eb8fc62604f2c40ab075cf43deaa518d", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2f61000e93a5c300703c9f23af007c0621693f/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2f61000e93a5c300703c9f23af007c0621693f/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=df2f61000e93a5c300703c9f23af007c0621693f", "patch": "@@ -836,6 +836,7 @@ propagate_necessity (struct edge_list *el)\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_MALLOC\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_CALLOC\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_FREE\n+\t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_VA_END\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_ALLOCA\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_STACK_SAVE\n \t\t      || DECL_FUNCTION_CODE (callee) == BUILT_IN_STACK_RESTORE"}, {"sha": "edfbd649d730d3942c232b622056bcab4b2b8422", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df2f61000e93a5c300703c9f23af007c0621693f/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df2f61000e93a5c300703c9f23af007c0621693f/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=df2f61000e93a5c300703c9f23af007c0621693f", "patch": "@@ -4187,27 +4187,32 @@ find_func_aliases_for_builtin_call (gimple t)\n \t mode as well.  */\n       case BUILT_IN_VA_START:\n \t{\n+\t  tree valist = gimple_call_arg (t, 0);\n+\t  struct constraint_expr rhs, *lhsp;\n+\t  unsigned i;\n+\t  get_constraint_for (valist, &lhsc);\n+\t  do_deref (&lhsc);\n+\t  /* The va_list gets access to pointers in variadic\n+\t     arguments.  Which we know in the case of IPA analysis\n+\t     and otherwise are just all nonlocal variables.  */\n \t  if (in_ipa_mode)\n \t    {\n-\t      tree valist = gimple_call_arg (t, 0);\n-\t      struct constraint_expr rhs, *lhsp;\n-\t      unsigned i;\n-\t      /* The va_list gets access to pointers in variadic\n-\t\t arguments.  */\n \t      fi = lookup_vi_for_tree (cfun->decl);\n-\t      gcc_assert (fi != NULL);\n-\t      get_constraint_for (valist, &lhsc);\n-\t      do_deref (&lhsc);\n \t      rhs = get_function_part_constraint (fi, ~0);\n \t      rhs.type = ADDRESSOF;\n-\t      FOR_EACH_VEC_ELT (ce_s, lhsc, i, lhsp)\n-\t\t  process_constraint (new_constraint (*lhsp, rhs));\n-\t      VEC_free (ce_s, heap, lhsc);\n-\t      /* va_list is clobbered.  */\n-\t      make_constraint_to (get_call_clobber_vi (t)->id, valist);\n-\t      return true;\n \t    }\n-\t  break;\n+\t  else\n+\t    {\n+\t      rhs.var = nonlocal_id;\n+\t      rhs.type = ADDRESSOF;\n+\t      rhs.offset = 0;\n+\t    }\n+\t  FOR_EACH_VEC_ELT (ce_s, lhsc, i, lhsp)\n+\t    process_constraint (new_constraint (*lhsp, rhs));\n+\t  VEC_free (ce_s, heap, lhsc);\n+\t  /* va_list is clobbered.  */\n+\t  make_constraint_to (get_call_clobber_vi (t)->id, valist);\n+\t  return true;\n \t}\n       /* va_end doesn't have any effect that matters.  */\n       case BUILT_IN_VA_END:"}]}