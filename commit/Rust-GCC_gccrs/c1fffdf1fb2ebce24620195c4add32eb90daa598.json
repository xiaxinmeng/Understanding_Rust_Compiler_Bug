{"sha": "c1fffdf1fb2ebce24620195c4add32eb90daa598", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFmZmZkZjFmYjJlYmNlMjQ2MjAxOTVjNGFkZDMyZWI5MGRhYTU5OA==", "commit": {"author": {"name": "Christian Bruel", "email": "christian.bruel@st.com", "date": "2015-10-26T09:50:37Z"}, "committer": {"name": "Christian Bruel", "email": "chrbr@gcc.gnu.org", "date": "2015-10-26T09:50:37Z"}, "message": "function.h (MINIMUM_METHOD_BOUNDARY): New macro.\n\n2015-10-26  Christian Bruel  <christian.bruel@st.com>\n\n\t* function.h (MINIMUM_METHOD_BOUNDARY): New macro.\n\t* cp/decl.c (grokfndecl): Set DECL_ALIGN with MINIMUM_METHOD_BOUNDARY.\n\t* cp/method.c (implicitly_declare_fn): Likewise.\n\t* cp/lambda.c (maybe_add_lambda_conv_op): Likewise. Remove VBIT setting.\n\t* java/class.c (add_method_1): Likewise.\n\nFrom-SVN: r229313", "tree": {"sha": "90a790213de81ca57c7114076a08cb59d61c9df3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90a790213de81ca57c7114076a08cb59d61c9df3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1fffdf1fb2ebce24620195c4add32eb90daa598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1fffdf1fb2ebce24620195c4add32eb90daa598", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1fffdf1fb2ebce24620195c4add32eb90daa598", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1fffdf1fb2ebce24620195c4add32eb90daa598/comments", "author": null, "committer": null, "parents": [{"sha": "5929c659186adc165b6cc32aab2890a1629d667a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5929c659186adc165b6cc32aab2890a1629d667a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5929c659186adc165b6cc32aab2890a1629d667a"}], "stats": {"total": 53, "additions": 23, "deletions": 30}, "files": [{"sha": "dbaaa9a4f17fc6dc4b26a7cdaa88c653cee552b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fffdf1fb2ebce24620195c4add32eb90daa598/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fffdf1fb2ebce24620195c4add32eb90daa598/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1fffdf1fb2ebce24620195c4add32eb90daa598", "patch": "@@ -1,3 +1,11 @@\n+2015-10-26  Christian Bruel  <christian.bruel@st.com>\n+\n+\t* function.h (MINIMUM_METHOD_BOUNDARY): New macro.\n+\t* cp/decl.c (grokfndecl): Set DECL_ALIGN with MINIMUM_METHOD_BOUNDARY.\n+\t* cp/method.c (implicitly_declare_fn): Likewise.\n+\t* cp/lambda.c (maybe_add_lambda_conv_op): Likewise. Remove VBIT setting.\n+\t* java/class.c (add_method_1): Likewise.\n+\n 2015-10-26  Richard Biener  <rguenther@suse.de>\n \n \t* alloc-pool.h (base_pool_allocator): Use placement new."}, {"sha": "2fb923f11bf63e6f78e526296bb6cdeab31f5a08", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fffdf1fb2ebce24620195c4add32eb90daa598/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fffdf1fb2ebce24620195c4add32eb90daa598/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c1fffdf1fb2ebce24620195c4add32eb90daa598", "patch": "@@ -7829,6 +7829,9 @@ grokfndecl (tree ctype,\n       parm = build_this_parm (type, quals);\n       DECL_CHAIN (parm) = parms;\n       parms = parm;\n+\n+      /* Allocate space to hold the vptr bit if needed.  */\n+      DECL_ALIGN (decl) = MINIMUM_METHOD_BOUNDARY;\n     }\n   DECL_ARGUMENTS (decl) = parms;\n   for (t = parms; t; t = DECL_CHAIN (t))\n@@ -7852,14 +7855,6 @@ grokfndecl (tree ctype,\n       break;\n     }\n \n-  /* If pointers to member functions use the least significant bit to\n-     indicate whether a function is virtual, ensure a pointer\n-     to this function will have that bit clear.  */\n-  if (TARGET_PTRMEMFUNC_VBIT_LOCATION == ptrmemfunc_vbit_in_pfn\n-      && TREE_CODE (type) == METHOD_TYPE\n-      && DECL_ALIGN (decl) < 2 * BITS_PER_UNIT)\n-    DECL_ALIGN (decl) = 2 * BITS_PER_UNIT;\n-\n   if (friendp\n       && TREE_CODE (orig_declarator) == TEMPLATE_ID_EXPR)\n     {"}, {"sha": "c1e747173eb51bad8d74d7a9582ae57f40c1f470", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fffdf1fb2ebce24620195c4add32eb90daa598/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fffdf1fb2ebce24620195c4add32eb90daa598/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=c1fffdf1fb2ebce24620195c4add32eb90daa598", "patch": "@@ -1006,11 +1006,7 @@ maybe_add_lambda_conv_op (tree type)\n   tree convfn = build_lang_decl (FUNCTION_DECL, name, fntype);\n   tree fn = convfn;\n   DECL_SOURCE_LOCATION (fn) = DECL_SOURCE_LOCATION (callop);\n-\n-  if (TARGET_PTRMEMFUNC_VBIT_LOCATION == ptrmemfunc_vbit_in_pfn\n-      && DECL_ALIGN (fn) < 2 * BITS_PER_UNIT)\n-    DECL_ALIGN (fn) = 2 * BITS_PER_UNIT;\n-\n+  DECL_ALIGN (fn) = MINIMUM_METHOD_BOUNDARY;\n   SET_OVERLOADED_OPERATOR_CODE (fn, TYPE_EXPR);\n   grokclassfn (type, fn, NO_SPECIAL);\n   set_linkage_according_to_type (type, fn);\n@@ -1042,9 +1038,6 @@ maybe_add_lambda_conv_op (tree type)\n   tree statfn = build_lang_decl (FUNCTION_DECL, name, stattype);\n   fn = statfn;\n   DECL_SOURCE_LOCATION (fn) = DECL_SOURCE_LOCATION (callop);\n-  if (TARGET_PTRMEMFUNC_VBIT_LOCATION == ptrmemfunc_vbit_in_pfn\n-      && DECL_ALIGN (fn) < 2 * BITS_PER_UNIT)\n-    DECL_ALIGN (fn) = 2 * BITS_PER_UNIT;\n   grokclassfn (type, fn, NO_SPECIAL);\n   set_linkage_according_to_type (type, fn);\n   rest_of_decl_compilation (fn, toplevel_bindings_p (), at_eof);"}, {"sha": "21eb32aedd7661e049773aa63af36f6b52353117", "filename": "gcc/cp/method.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fffdf1fb2ebce24620195c4add32eb90daa598/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fffdf1fb2ebce24620195c4add32eb90daa598/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=c1fffdf1fb2ebce24620195c4add32eb90daa598", "patch": "@@ -1849,13 +1849,8 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n       DECL_ASSIGNMENT_OPERATOR_P (fn) = 1;\n       SET_OVERLOADED_OPERATOR_CODE (fn, NOP_EXPR);\n     }\n-  \n-  /* If pointers to member functions use the least significant bit to\n-     indicate whether a function is virtual, ensure a pointer\n-     to this function will have that bit clear.  */\n-  if (TARGET_PTRMEMFUNC_VBIT_LOCATION == ptrmemfunc_vbit_in_pfn\n-      && DECL_ALIGN (fn) < 2 * BITS_PER_UNIT)\n-    DECL_ALIGN (fn) = 2 * BITS_PER_UNIT;\n+\n+  DECL_ALIGN (fn) = MINIMUM_METHOD_BOUNDARY;\n \n   /* Create the explicit arguments.  */\n   if (rhs_parm_type)"}, {"sha": "b2e4f7141c2a4b4fd253f7faa81154ab6e6f2fa1", "filename": "gcc/function.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fffdf1fb2ebce24620195c4add32eb90daa598/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fffdf1fb2ebce24620195c4add32eb90daa598/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=c1fffdf1fb2ebce24620195c4add32eb90daa598", "patch": "@@ -537,6 +537,13 @@ do {\t\t\t\t\t\t\t\t\\\n #define ASLK_REDUCE_ALIGN 1\n #define ASLK_RECORD_PAD 2\n \n+/* If pointers to member functions use the least significant bit to\n+   indicate whether a function is virtual, ensure a pointer\n+   to this function will have that bit clear.  */\n+#define MINIMUM_METHOD_BOUNDARY \\\n+  ((TARGET_PTRMEMFUNC_VBIT_LOCATION == ptrmemfunc_vbit_in_pfn)\t     \\\n+   ? MAX (FUNCTION_BOUNDARY, 2 * BITS_PER_UNIT) : FUNCTION_BOUNDARY)\n+\n \f\n \n extern void push_function_context (void);"}, {"sha": "8f1288f8584fc8826078c3a124f5d56bc5aab79f", "filename": "gcc/java/class.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1fffdf1fb2ebce24620195c4add32eb90daa598/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1fffdf1fb2ebce24620195c4add32eb90daa598/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=c1fffdf1fb2ebce24620195c4add32eb90daa598", "patch": "@@ -779,13 +779,8 @@ add_method_1 (tree this_class, int access_flags, tree name, tree function_type)\n   DECL_CHAIN (fndecl) = TYPE_METHODS (this_class);\n   TYPE_METHODS (this_class) = fndecl;\n \n-  /* If pointers to member functions use the least significant bit to\n-     indicate whether a function is virtual, ensure a pointer\n-     to this function will have that bit clear.  */\n-  if (TARGET_PTRMEMFUNC_VBIT_LOCATION == ptrmemfunc_vbit_in_pfn\n-      && !(access_flags & ACC_STATIC)\n-      && DECL_ALIGN (fndecl) < 2 * BITS_PER_UNIT)\n-    DECL_ALIGN (fndecl) = 2 * BITS_PER_UNIT;\n+  if (!(access_flags & ACC_STATIC))\n+    DECL_ALIGN (fndecl) = MINIMUM_METHOD_BOUNDARY;\n \n   /* Notice that this is a finalizer and update the class type\n      accordingly. This is used to optimize instance allocation. */"}]}