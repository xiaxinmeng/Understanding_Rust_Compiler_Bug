{"sha": "3d8dfcb4175dc4077e54e9cbf8e8db40881a9165", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Q4ZGZjYjQxNzVkYzQwNzdlNTRlOWNiZjhlOGRiNDA4ODFhOTE2NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-04-15T19:47:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-04-15T19:47:19Z"}, "message": "re PR c++/70685 (ICE: Segmentation fault)\n\n\tPR c++/70685\n\t* constexpr.c (get_fundef_copy): Handle null *slot.\n\nFrom-SVN: r235045", "tree": {"sha": "cff4e69b8367463bac38fc7eb3e2c9cd5dc89286", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cff4e69b8367463bac38fc7eb3e2c9cd5dc89286"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d8dfcb4175dc4077e54e9cbf8e8db40881a9165", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d8dfcb4175dc4077e54e9cbf8e8db40881a9165", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d8dfcb4175dc4077e54e9cbf8e8db40881a9165", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d8dfcb4175dc4077e54e9cbf8e8db40881a9165/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7b12f1f3ed87fc36cf837862fca8477513446b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7b12f1f3ed87fc36cf837862fca8477513446b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7b12f1f3ed87fc36cf837862fca8477513446b4"}], "stats": {"total": 81, "additions": 80, "deletions": 1}, "files": [{"sha": "ad7a246f2bd1d35bd0a0486b0279ea0a90624ed0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8dfcb4175dc4077e54e9cbf8e8db40881a9165/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8dfcb4175dc4077e54e9cbf8e8db40881a9165/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3d8dfcb4175dc4077e54e9cbf8e8db40881a9165", "patch": "@@ -1,5 +1,8 @@\n 2016-04-15  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/70685\n+\t* constexpr.c (get_fundef_copy): Handle null *slot.\n+\n \tPR c++/70505\n \t* pt.c (tsubst_baselink): Give the new TEMPLATE_ID_EXPR\n \tunknown_type_node, too."}, {"sha": "ae0c9739d8d6c1ebc504cdb04d0665d2c5a701cf", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8dfcb4175dc4077e54e9cbf8e8db40881a9165/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8dfcb4175dc4077e54e9cbf8e8db40881a9165/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=3d8dfcb4175dc4077e54e9cbf8e8db40881a9165", "patch": "@@ -998,7 +998,7 @@ get_fundef_copy (tree fun)\n \n   tree copy;\n   tree *slot = fundef_copies_table->get (fun);\n-  if (slot == NULL)\n+  if (slot == NULL || *slot == NULL_TREE)\n     {\n       copy = build_tree_list (NULL, NULL);\n       /* PURPOSE is body, VALUE is parms, TYPE is result.  */"}, {"sha": "f8a9aa0578c0593b7b58bcd1ce8396ad7cb6a2f6", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-hana1.C", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d8dfcb4175dc4077e54e9cbf8e8db40881a9165/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-hana1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d8dfcb4175dc4077e54e9cbf8e8db40881a9165/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-hana1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-hana1.C?ref=3d8dfcb4175dc4077e54e9cbf8e8db40881a9165", "patch": "@@ -0,0 +1,76 @@\n+// PR c++/70685\n+// { dg-do compile { target c++14 } }\n+\n+namespace std {\n+template <typename _Tp, _Tp __v> struct A { static constexpr _Tp value = __v;\n+};\n+typedef A<bool, false> false_type;\n+template <bool, typename _Iftrue, typename> using conditional_t = _Iftrue;\n+namespace hana {\n+template <typename> struct is_default : false_type {};\n+template <typename> struct tag_of;\n+struct deleted_implementation;\n+namespace detail {\n+namespace operators {\n+template <typename> struct adl {};\n+}\n+}\n+template <typename> struct B;\n+template <int v> struct G : std::A<int, v> {};\n+template <typename T, T v> G<v> integral_c;\n+template <int i> using int_ = G<i>;\n+template <int i> int_<i> int_c;\n+template <typename> struct C;\n+template <typename Tag> struct D {\n+  template <typename... X> auto operator()(X... x) {\n+    return C<Tag>::apply(x...);\n+  }\n+};\n+template <typename Tag> D<Tag> make;\n+template <typename> struct unpack_impl;\n+struct Foldable {\n+  using Tag = int;\n+  static constexpr int value = is_default<unpack_impl<Tag>>::value;\n+};\n+struct range_tag;\n+auto make_range = make<range_tag>;\n+template <typename> struct sum_impl;\n+template <typename> struct F;\n+template <typename M = B<int>> F<M> sum;\n+template <typename T, T, T To>\n+struct range : detail::operators::adl<range<T, 0, To>> {};\n+template <typename T, T From, T To> struct tag_of<range<T, From, To>> {\n+  using type = range_tag;\n+};\n+template <> struct C<range_tag> {\n+  template <typename From, typename To> static auto apply(From, To) {\n+    using T = int;\n+    constexpr T from(From::value);\n+    constexpr T to(To::value);\n+    return range<T, from, to>{};\n+  }\n+};\n+template <> struct sum_impl<range_tag> {\n+  template <typename I> static constexpr I sum_helper(I m, I n) {\n+    if (m == n)\n+      return 0;\n+    return sum_helper(0, 0);\n+  }\n+  template <typename T, T from, T to> static auto apply(range<T, from, to>) {\n+    integral_c<T, sum_helper(from, to - 1)>;\n+  }\n+};\n+template <typename> struct F {\n+  template <typename Xs> auto operator()(Xs xs) {\n+    using S = typename tag_of<Xs>::type;\n+    using Sum =\n+        conditional_t<Foldable::value, sum_impl<S>, deleted_implementation>;\n+    Sum::apply(xs);\n+  }\n+};\n+}\n+auto __hana_tmp_22 =\n+    (hana::sum<>(hana::make_range(hana::int_c<-3>, hana::int_c<-2>)),\n+     hana::sum<>(hana::make_range(hana::int_c<3>, hana::int_c<7>)),\n+     hana::int_c<6>);\n+}"}]}