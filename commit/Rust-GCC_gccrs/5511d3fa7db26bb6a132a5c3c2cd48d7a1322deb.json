{"sha": "5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUxMWQzZmE3ZGIyNmJiNmExMzJhNWMzYzJjZDQ4ZDdhMTMyMmRlYg==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2018-05-18T13:10:36Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2018-05-18T13:10:36Z"}, "message": "[arm][2/2] Remove support for -march=armv3 and older\n\nWe deprecated architecture versions earlier than Armv4T in GCC 6 [1].\nThis patch removes support for architectures lower than Armv4.\nThat is the -march values armv2, armv2a, armv3, armv3m are removed\nwith this patch.  I did not remove armv4 because it's a bit more\ninvolved code-wise and there has been some pushback on the implications\nfor -mcpu=strongarm support.\n\nRemoving armv3m and earlier though is pretty straightforward.\nThis allows us to get rid of the armv3m and mode32 feature bits\nin arm-cpus.in as they can be assumed to be universally available.\n\nConsequently the mcpu values arm2, arm250, arm3, arm6, arm60, arm600, arm610, arm620, arm7, arm7d, arm7di, arm70, arm700, arm700i, arm710, arm720, arm710c, arm7100, arm7500, arm7500fe, arm7m, arm7dm, arm7dm are now also removed.\n\nBootstrapped and tested on arm-none-linux-gnueabihf and on arm-none-eabi\nwith an aprofile multilib configuration (which builds quite a lot of library\nconfigurations).\n\n[1] https://gcc.gnu.org/gcc-6/changes.html#arm \n\n\t* config/arm/arm-cpus.in (armv3m, mode32): Delete features.\n\t(ARMv4): Update.\n\t(ARMv2, ARMv3, ARMv3m): Delete fgroups.\n\t(ARMv6m): Update.\n\t(armv2, armv2a, armv3, armv3m): Delete architectures.\n\t(arm2, arm250, arm3, arm6, arm60, arm600, arm610, arm620,\n\tarm7, arm7d, arm7di, arm70, arm700, arm700i, arm710, arm720,\n\tarm710c, arm7100, arm7500, arm7500fe, arm7m, arm7dm, arm7dmi):\n\tDelete cpus.\n\t* config/arm/arm.md (maddsidi4): Remove check for arm_arch3m.\n\t(*mulsidi3adddi): Likewise.\n\t(mulsidi3): Likewise.\n\t(*mulsidi3_nov6): Likewise.\n\t(umulsidi3): Likewise.\n\t(umulsidi3_nov6): Likewise.\n\t(umaddsidi4): Likewise.\n\t(*umulsidi3adddi): Likewise.\n\t(smulsi3_highpart): Likewise.\n\t(*smulsi3_highpart_nov6): Likewise.\n\t(umulsi3_highpart): Likewise.\n\t(*umulsi3_highpart_nov6): Likewise.\n\t* config/arm/arm.h (arm_arch3m): Delete.\n\t* config/arm/arm.c (arm_arch3m): Delete.\n\t(arm_option_override_internal): Update armv3-related comment.\n\t(arm_configure_build_target): Delete use of isa_bit_mode32.\n\t(arm_option_reconfigure_globals): Delete set of arm_ach3m.\n\t(arm_rtx_costs_internal): Delete check of arm_arch3m.\n\t* config/arm/arm-fixed.md (mulsq3): Delete check for arm_arch3m.\n\t(mulsa3): Likewise.\n\t(mulusa3): Likewise.\n\t* config/arm/arm-protos.h (arm_arch3m): Delete.\n\t* config/arm/arm-tables.opt: Regenerate.\n\t* config/arm/arm-tune.md: Likewise.\n\t* config/arm/t-arm-elf (all_early_nofp): Delete mentions of\n\tdeleted architectures.\n\n\t* gcc.target/arm/pr62554.c: Delete.\n\t* gcc.target/arm/pr69610-1.c: Likewise.\n\t* gcc.target/arm/pr69610-2.c: Likewise.\n\nFrom-SVN: r260363", "tree": {"sha": "1c09fd85000bc70bd0e1e69400bbe09c8566e48f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c09fd85000bc70bd0e1e69400bbe09c8566e48f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3f808d3f8b0fdecc0913e7d8dd30ad2f621abe3"}], "stats": {"total": 504, "additions": 130, "deletions": 374}, "files": [{"sha": "a20554eff622ae29428f0d1c3c35fe397697ed99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb", "patch": "@@ -1,3 +1,41 @@\n+2018-05-18  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm-cpus.in (armv3m, mode32): Delete features.\n+\t(ARMv4): Update.\n+\t(ARMv2, ARMv3, ARMv3m): Delete fgroups.\n+\t(ARMv6m): Update.\n+\t(armv2, armv2a, armv3, armv3m): Delete architectures.\n+\t(arm2, arm250, arm3, arm6, arm60, arm600, arm610, arm620,\n+\tarm7, arm7d, arm7di, arm70, arm700, arm700i, arm710, arm720,\n+\tarm710c, arm7100, arm7500, arm7500fe, arm7m, arm7dm, arm7dmi):\n+\tDelete cpus.\n+\t* config/arm/arm.md (maddsidi4): Remove check for arm_arch3m.\n+\t(*mulsidi3adddi): Likewise.\n+\t(mulsidi3): Likewise.\n+\t(*mulsidi3_nov6): Likewise.\n+\t(umulsidi3): Likewise.\n+\t(umulsidi3_nov6): Likewise.\n+\t(umaddsidi4): Likewise.\n+\t(*umulsidi3adddi): Likewise.\n+\t(smulsi3_highpart): Likewise.\n+\t(*smulsi3_highpart_nov6): Likewise.\n+\t(umulsi3_highpart): Likewise.\n+\t(*umulsi3_highpart_nov6): Likewise.\n+\t* config/arm/arm.h (arm_arch3m): Delete.\n+\t* config/arm/arm.c (arm_arch3m): Delete.\n+\t(arm_option_override_internal): Update armv3-related comment.\n+\t(arm_configure_build_target): Delete use of isa_bit_mode32.\n+\t(arm_option_reconfigure_globals): Delete set of arm_ach3m.\n+\t(arm_rtx_costs_internal): Delete check of arm_arch3m.\n+\t* config/arm/arm-fixed.md (mulsq3): Delete check for arm_arch3m.\n+\t(mulsa3): Likewise.\n+\t(mulusa3): Likewise.\n+\t* config/arm/arm-protos.h (arm_arch3m): Delete.\n+\t* config/arm/arm-tables.opt: Regenerate.\n+\t* config/arm/arm-tune.md: Likewise.\n+\t* config/arm/t-arm-elf (all_early_nofp): Delete mentions of\n+\tdeleted architectures.\n+\n 2018-05-18  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm-cpus.in (armv5, armv5e): Delete features."}, {"sha": "16a381c86b6a7947e424b29fe67812990519ada9", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 2, "deletions": 187, "changes": 189, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb", "patch": "@@ -48,15 +48,9 @@\n \n # Features - general convention: all lower case.\n \n-# Extended multiply\n-define feature armv3m\n-\n # 26-bit mode support\n define feature mode26\n \n-# 32-bit mode support\n-define feature mode32\n-\n # Architecture rel 4\n define feature armv4\n \n@@ -215,10 +209,7 @@ define fgroup ALL_FPU_INTERNAL\tvfpv2 vfpv3 vfpv4 fpv5 fp16conv fp_dbl ALL_SIMD_I\n # -mfpu support.\n define fgroup ALL_FP\tfp16 ALL_FPU_INTERNAL\n \n-define fgroup ARMv2       notm\n-define fgroup ARMv3       ARMv2 mode32\n-define fgroup ARMv3m      ARMv3 armv3m\n-define fgroup ARMv4       ARMv3m armv4\n+define fgroup ARMv4       armv4 notm\n define fgroup ARMv4t      ARMv4 thumb\n define fgroup ARMv5t      ARMv4t armv5t\n define fgroup ARMv5te     ARMv5t armv5te\n@@ -232,7 +223,7 @@ define fgroup ARMv6zk     ARMv6k\n define fgroup ARMv6t2     ARMv6 thumb2\n # This is suspect.  ARMv6-m doesn't really pull in any useful features\n # from ARMv5* or ARMv6.\n-define fgroup ARMv6m      mode32 armv3m armv4 thumb armv5t armv5te armv6 be8\n+define fgroup ARMv6m      armv4 thumb armv5t armv5te armv6 be8\n # This is suspect, the 'common' ARMv7 subset excludes the thumb2 'DSP' and\n # integer SIMD instructions that are in ARMv6T2.  */\n define fgroup ARMv7       ARMv6m thumb2 armv7\n@@ -279,34 +270,6 @@ define fgroup ALL_QUIRKS   quirk_no_volatile_ce quirk_armv6kz quirk_cm3_ldrd\n # end arch <name>\n #\n \n-begin arch armv2\n- tune for arm2\n- tune flags CO_PROC NO_MODE32\n- base 2\n- isa ARMv2 mode26\n-end arch armv2\n-\n-begin arch armv2a\n- tune for arm2\n- tune flags CO_PROC NO_MODE32\n- base 2\n- isa ARMv2 mode26\n-end arch armv2a\n-\n-begin arch armv3\n- tune for arm6\n- tune flags CO_PROC\n- base 3\n- isa ARMv3 mode26\n-end arch armv3\n-\n-begin arch armv3m\n- tune for arm7m\n- tune flags CO_PROC\n- base 3M\n- isa ARMv3m mode26\n-end arch armv3m\n-\n begin arch armv4\n  tune for arm7tdmi\n  tune flags CO_PROC\n@@ -675,154 +638,6 @@ end arch iwmmxt2\n # option must similarly have a distinct feature set.  Option aliases can be\n # added with the optalias statement\n \n-# V2/V2A Architecture Processors\n-begin cpu arm2\n- tune flags CO_PROC NO_MODE32\n- architecture armv2\n- costs slowmul\n-end cpu arm2\n-\n-begin cpu arm250\n- tune flags CO_PROC NO_MODE32\n- architecture armv2\n- costs slowmul\n-end cpu arm250\n-\n-begin cpu arm3\n- tune flags CO_PROC NO_MODE32\n- architecture armv2\n- costs slowmul\n-end cpu arm3\n-\n-\n-# V3 Architecture Processors\n-begin cpu arm6\n- tune flags CO_PROC\n- architecture armv3\n- costs slowmul\n-end cpu arm6\n-\n-begin cpu arm60\n- tune flags CO_PROC\n- architecture armv3\n- costs slowmul\n-end cpu arm60\n-\n-begin cpu arm600\n- tune flags CO_PROC WBUF\n- architecture armv3\n- costs slowmul\n-end cpu arm600\n-\n-begin cpu arm610\n- tune flags WBUF\n- architecture armv3\n- costs slowmul\n-end cpu arm610\n-\n-begin cpu arm620\n- tune flags CO_PROC WBUF\n- architecture armv3\n- costs slowmul\n-end cpu arm620\n-\n-begin cpu arm7\n- tune flags CO_PROC\n- architecture armv3\n- costs slowmul\n-end cpu arm7\n-\n-begin cpu arm7d\n- tune flags CO_PROC\n- architecture armv3\n- costs slowmul\n-end cpu arm7d\n-\n-begin cpu arm7di\n- tune flags CO_PROC\n- architecture armv3\n- costs slowmul\n-end cpu arm7di\n-\n-begin cpu arm70\n- tune flags CO_PROC\n- architecture armv3\n- costs slowmul\n-end cpu arm70\n-\n-begin cpu arm700\n- tune flags CO_PROC WBUF\n- architecture armv3\n- costs slowmul\n-end cpu arm700\n-\n-begin cpu arm700i\n- tune flags CO_PROC WBUF\n- architecture armv3\n- costs slowmul\n-end cpu arm700i\n-\n-begin cpu arm710\n- tune flags WBUF\n- architecture armv3\n- costs slowmul\n-end cpu arm710\n-\n-begin cpu arm720\n- tune flags WBUF\n- architecture armv3\n- costs slowmul\n-end cpu arm720\n-\n-begin cpu arm710c\n- tune flags WBUF\n- architecture armv3\n- costs slowmul\n-end cpu arm710c\n-\n-begin cpu arm7100\n- tune flags WBUF\n- architecture armv3\n- costs slowmul\n-end cpu arm7100\n-\n-begin cpu arm7500\n- tune flags WBUF\n- architecture armv3\n- costs slowmul\n-end cpu arm7500\n-\n-# Doesn't have an external co-proc, but does have embedded FPA\n-# (the FPA part is no-longer supported).\n-begin cpu arm7500fe\n- tune flags CO_PROC WBUF\n- architecture armv3\n- costs slowmul\n-end cpu arm7500fe\n-\n-\n-# V3M Architecture Processors\n-# arm7m doesn't exist on its own, but only with \"D\", (and \"I\"), but\n-# those don't alter the code, so arm7m is sometimes used.\n-begin cpu arm7m\n- tune flags CO_PROC\n- architecture armv3m\n- costs fastmul\n-end cpu arm7m\n-\n-begin cpu arm7dm\n- tune flags CO_PROC\n- architecture armv3m\n- costs fastmul\n-end cpu arm7dm\n-\n-begin cpu arm7dmi\n- tune flags CO_PROC\n- architecture armv3m\n- costs fastmul\n-end cpu arm7dmi\n-\n-\n # V4 Architecture Processors\n begin cpu arm8\n  tune flags LDSCHED"}, {"sha": "18a564bffd78c884e436e2d6de7c19c2fecb5e47", "filename": "gcc/config/arm/arm-fixed.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Fconfig%2Farm%2Farm-fixed.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Fconfig%2Farm%2Farm-fixed.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-fixed.md?ref=5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb", "patch": "@@ -137,7 +137,7 @@\n   [(set (match_operand:SQ 0 \"s_register_operand\" \"\")\n \t(mult:SQ (match_operand:SQ 1 \"s_register_operand\" \"\")\n \t\t (match_operand:SQ 2 \"s_register_operand\" \"\")))]\n-  \"TARGET_32BIT && arm_arch3m\"\n+  \"TARGET_32BIT\"\n {\n   rtx tmp1 = gen_reg_rtx (DImode);\n   rtx tmp2 = gen_reg_rtx (SImode);\n@@ -159,7 +159,7 @@\n   [(set (match_operand:SA 0 \"s_register_operand\" \"\")\n \t(mult:SA (match_operand:SA 1 \"s_register_operand\" \"\")\n \t\t (match_operand:SA 2 \"s_register_operand\" \"\")))]\n-  \"TARGET_32BIT && arm_arch3m\"\n+  \"TARGET_32BIT\"\n {\n   rtx tmp1 = gen_reg_rtx (DImode);\n   rtx tmp2 = gen_reg_rtx (SImode);\n@@ -178,7 +178,7 @@\n   [(set (match_operand:USA 0 \"s_register_operand\" \"\")\n \t(mult:USA (match_operand:USA 1 \"s_register_operand\" \"\")\n \t\t  (match_operand:USA 2 \"s_register_operand\" \"\")))]\n-  \"TARGET_32BIT && arm_arch3m\"\n+  \"TARGET_32BIT\"\n {\n   rtx tmp1 = gen_reg_rtx (DImode);\n   rtx tmp2 = gen_reg_rtx (SImode);"}, {"sha": "8537262ce644bbacd7a800c708bcd86eea93d2bd", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb", "patch": "@@ -379,9 +379,6 @@ extern bool arm_is_constant_pool_ref (rtx);\n    be used.  */\n extern unsigned int tune_flags;\n \n-/* Nonzero if this chip supports the ARM Architecture 3M extensions.  */\n-extern int arm_arch3m;\n-\n /* Nonzero if this chip supports the ARM Architecture 4 extensions.  */\n extern int arm_arch4;\n "}, {"sha": "0ffb4c86ca46718bbfaf65eb41ab8e87f924e903", "filename": "gcc/config/arm/arm-tables.opt", "status": "modified", "additions": 30, "deletions": 111, "changes": 141, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Fconfig%2Farm%2Farm-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Fconfig%2Farm%2Farm-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tables.opt?ref=5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb", "patch": "@@ -24,75 +24,6 @@ Enum\n Name(processor_type) Type(enum processor_type)\n Known ARM CPUs (for use with the -mcpu= and -mtune= options):\n \n-EnumValue\n-Enum(processor_type) String(arm2) Value( TARGET_CPU_arm2)\n-\n-EnumValue\n-Enum(processor_type) String(arm250) Value( TARGET_CPU_arm250)\n-\n-EnumValue\n-Enum(processor_type) String(arm3) Value( TARGET_CPU_arm3)\n-\n-EnumValue\n-Enum(processor_type) String(arm6) Value( TARGET_CPU_arm6)\n-\n-EnumValue\n-Enum(processor_type) String(arm60) Value( TARGET_CPU_arm60)\n-\n-EnumValue\n-Enum(processor_type) String(arm600) Value( TARGET_CPU_arm600)\n-\n-EnumValue\n-Enum(processor_type) String(arm610) Value( TARGET_CPU_arm610)\n-\n-EnumValue\n-Enum(processor_type) String(arm620) Value( TARGET_CPU_arm620)\n-\n-EnumValue\n-Enum(processor_type) String(arm7) Value( TARGET_CPU_arm7)\n-\n-EnumValue\n-Enum(processor_type) String(arm7d) Value( TARGET_CPU_arm7d)\n-\n-EnumValue\n-Enum(processor_type) String(arm7di) Value( TARGET_CPU_arm7di)\n-\n-EnumValue\n-Enum(processor_type) String(arm70) Value( TARGET_CPU_arm70)\n-\n-EnumValue\n-Enum(processor_type) String(arm700) Value( TARGET_CPU_arm700)\n-\n-EnumValue\n-Enum(processor_type) String(arm700i) Value( TARGET_CPU_arm700i)\n-\n-EnumValue\n-Enum(processor_type) String(arm710) Value( TARGET_CPU_arm710)\n-\n-EnumValue\n-Enum(processor_type) String(arm720) Value( TARGET_CPU_arm720)\n-\n-EnumValue\n-Enum(processor_type) String(arm710c) Value( TARGET_CPU_arm710c)\n-\n-EnumValue\n-Enum(processor_type) String(arm7100) Value( TARGET_CPU_arm7100)\n-\n-EnumValue\n-Enum(processor_type) String(arm7500) Value( TARGET_CPU_arm7500)\n-\n-EnumValue\n-Enum(processor_type) String(arm7500fe) Value( TARGET_CPU_arm7500fe)\n-\n-EnumValue\n-Enum(processor_type) String(arm7m) Value( TARGET_CPU_arm7m)\n-\n-EnumValue\n-Enum(processor_type) String(arm7dm) Value( TARGET_CPU_arm7dm)\n-\n-EnumValue\n-Enum(processor_type) String(arm7dmi) Value( TARGET_CPU_arm7dmi)\n-\n EnumValue\n Enum(processor_type) String(arm8) Value( TARGET_CPU_arm8)\n \n@@ -365,106 +296,94 @@ Name(arm_arch) Type(int)\n Known ARM architectures (for use with the -march= option):\n \n EnumValue\n-Enum(arm_arch) String(armv2) Value(0)\n-\n-EnumValue\n-Enum(arm_arch) String(armv2a) Value(1)\n-\n-EnumValue\n-Enum(arm_arch) String(armv3) Value(2)\n-\n-EnumValue\n-Enum(arm_arch) String(armv3m) Value(3)\n-\n-EnumValue\n-Enum(arm_arch) String(armv4) Value(4)\n+Enum(arm_arch) String(armv4) Value(0)\n \n EnumValue\n-Enum(arm_arch) String(armv4t) Value(5)\n+Enum(arm_arch) String(armv4t) Value(1)\n \n EnumValue\n-Enum(arm_arch) String(armv5t) Value(6)\n+Enum(arm_arch) String(armv5t) Value(2)\n \n EnumValue\n-Enum(arm_arch) String(armv5te) Value(7)\n+Enum(arm_arch) String(armv5te) Value(3)\n \n EnumValue\n-Enum(arm_arch) String(armv5tej) Value(8)\n+Enum(arm_arch) String(armv5tej) Value(4)\n \n EnumValue\n-Enum(arm_arch) String(armv6) Value(9)\n+Enum(arm_arch) String(armv6) Value(5)\n \n EnumValue\n-Enum(arm_arch) String(armv6j) Value(10)\n+Enum(arm_arch) String(armv6j) Value(6)\n \n EnumValue\n-Enum(arm_arch) String(armv6k) Value(11)\n+Enum(arm_arch) String(armv6k) Value(7)\n \n EnumValue\n-Enum(arm_arch) String(armv6z) Value(12)\n+Enum(arm_arch) String(armv6z) Value(8)\n \n EnumValue\n-Enum(arm_arch) String(armv6kz) Value(13)\n+Enum(arm_arch) String(armv6kz) Value(9)\n \n EnumValue\n-Enum(arm_arch) String(armv6zk) Value(14)\n+Enum(arm_arch) String(armv6zk) Value(10)\n \n EnumValue\n-Enum(arm_arch) String(armv6t2) Value(15)\n+Enum(arm_arch) String(armv6t2) Value(11)\n \n EnumValue\n-Enum(arm_arch) String(armv6-m) Value(16)\n+Enum(arm_arch) String(armv6-m) Value(12)\n \n EnumValue\n-Enum(arm_arch) String(armv6s-m) Value(17)\n+Enum(arm_arch) String(armv6s-m) Value(13)\n \n EnumValue\n-Enum(arm_arch) String(armv7) Value(18)\n+Enum(arm_arch) String(armv7) Value(14)\n \n EnumValue\n-Enum(arm_arch) String(armv7-a) Value(19)\n+Enum(arm_arch) String(armv7-a) Value(15)\n \n EnumValue\n-Enum(arm_arch) String(armv7ve) Value(20)\n+Enum(arm_arch) String(armv7ve) Value(16)\n \n EnumValue\n-Enum(arm_arch) String(armv7-r) Value(21)\n+Enum(arm_arch) String(armv7-r) Value(17)\n \n EnumValue\n-Enum(arm_arch) String(armv7-m) Value(22)\n+Enum(arm_arch) String(armv7-m) Value(18)\n \n EnumValue\n-Enum(arm_arch) String(armv7e-m) Value(23)\n+Enum(arm_arch) String(armv7e-m) Value(19)\n \n EnumValue\n-Enum(arm_arch) String(armv8-a) Value(24)\n+Enum(arm_arch) String(armv8-a) Value(20)\n \n EnumValue\n-Enum(arm_arch) String(armv8.1-a) Value(25)\n+Enum(arm_arch) String(armv8.1-a) Value(21)\n \n EnumValue\n-Enum(arm_arch) String(armv8.2-a) Value(26)\n+Enum(arm_arch) String(armv8.2-a) Value(22)\n \n EnumValue\n-Enum(arm_arch) String(armv8.3-a) Value(27)\n+Enum(arm_arch) String(armv8.3-a) Value(23)\n \n EnumValue\n-Enum(arm_arch) String(armv8.4-a) Value(28)\n+Enum(arm_arch) String(armv8.4-a) Value(24)\n \n EnumValue\n-Enum(arm_arch) String(armv8-m.base) Value(29)\n+Enum(arm_arch) String(armv8-m.base) Value(25)\n \n EnumValue\n-Enum(arm_arch) String(armv8-m.main) Value(30)\n+Enum(arm_arch) String(armv8-m.main) Value(26)\n \n EnumValue\n-Enum(arm_arch) String(armv8-r) Value(31)\n+Enum(arm_arch) String(armv8-r) Value(27)\n \n EnumValue\n-Enum(arm_arch) String(iwmmxt) Value(32)\n+Enum(arm_arch) String(iwmmxt) Value(28)\n \n EnumValue\n-Enum(arm_arch) String(iwmmxt2) Value(33)\n+Enum(arm_arch) String(iwmmxt2) Value(29)\n \n Enum\n Name(arm_fpu) Type(enum fpu_type)"}, {"sha": "877e3465147b8b829166b8c0f9c464ca38e0b73a", "filename": "gcc/config/arm/arm-tune.md", "status": "modified", "additions": 30, "deletions": 38, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Fconfig%2Farm%2Farm-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Fconfig%2Farm%2Farm-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tune.md?ref=5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb", "patch": "@@ -21,42 +21,34 @@\n ; <http://www.gnu.org/licenses/>.\n \n (define_attr \"tune\"\n-\t\"arm2,arm250,arm3,\n-\tarm6,arm60,arm600,\n-\tarm610,arm620,arm7,\n-\tarm7d,arm7di,arm70,\n-\tarm700,arm700i,arm710,\n-\tarm720,arm710c,arm7100,\n-\tarm7500,arm7500fe,arm7m,\n-\tarm7dm,arm7dmi,arm8,\n-\tarm810,strongarm,strongarm110,\n-\tstrongarm1100,strongarm1110,fa526,\n-\tfa626,arm7tdmi,arm7tdmis,\n-\tarm710t,arm720t,arm740t,\n-\tarm9,arm9tdmi,arm920,\n-\tarm920t,arm922t,arm940t,\n-\tep9312,arm10tdmi,arm1020t,\n-\tarm9e,arm946es,arm966es,\n-\tarm968es,arm10e,arm1020e,\n-\tarm1022e,xscale,iwmmxt,\n-\tiwmmxt2,fa606te,fa626te,\n-\tfmp626,fa726te,arm926ejs,\n-\tarm1026ejs,arm1136js,arm1136jfs,\n-\tarm1176jzs,arm1176jzfs,mpcorenovfp,\n-\tmpcore,arm1156t2s,arm1156t2fs,\n-\tcortexm1,cortexm0,cortexm0plus,\n-\tcortexm1smallmultiply,cortexm0smallmultiply,cortexm0plussmallmultiply,\n-\tgenericv7a,cortexa5,cortexa7,\n-\tcortexa8,cortexa9,cortexa12,\n-\tcortexa15,cortexa17,cortexr4,\n-\tcortexr4f,cortexr5,cortexr7,\n-\tcortexr8,cortexm7,cortexm4,\n-\tcortexm3,marvell_pj4,cortexa15cortexa7,\n-\tcortexa17cortexa7,cortexa32,cortexa35,\n-\tcortexa53,cortexa57,cortexa72,\n-\tcortexa73,exynosm1,xgene1,\n-\tcortexa57cortexa53,cortexa72cortexa53,cortexa73cortexa35,\n-\tcortexa73cortexa53,cortexa55,cortexa75,\n-\tcortexa75cortexa55,cortexm23,cortexm33,\n-\tcortexr52\"\n+\t\"arm8,arm810,strongarm,\n+\tstrongarm110,strongarm1100,strongarm1110,\n+\tfa526,fa626,arm7tdmi,\n+\tarm7tdmis,arm710t,arm720t,\n+\tarm740t,arm9,arm9tdmi,\n+\tarm920,arm920t,arm922t,\n+\tarm940t,ep9312,arm10tdmi,\n+\tarm1020t,arm9e,arm946es,\n+\tarm966es,arm968es,arm10e,\n+\tarm1020e,arm1022e,xscale,\n+\tiwmmxt,iwmmxt2,fa606te,\n+\tfa626te,fmp626,fa726te,\n+\tarm926ejs,arm1026ejs,arm1136js,\n+\tarm1136jfs,arm1176jzs,arm1176jzfs,\n+\tmpcorenovfp,mpcore,arm1156t2s,\n+\tarm1156t2fs,cortexm1,cortexm0,\n+\tcortexm0plus,cortexm1smallmultiply,cortexm0smallmultiply,\n+\tcortexm0plussmallmultiply,genericv7a,cortexa5,\n+\tcortexa7,cortexa8,cortexa9,\n+\tcortexa12,cortexa15,cortexa17,\n+\tcortexr4,cortexr4f,cortexr5,\n+\tcortexr7,cortexr8,cortexm7,\n+\tcortexm4,cortexm3,marvell_pj4,\n+\tcortexa15cortexa7,cortexa17cortexa7,cortexa32,\n+\tcortexa35,cortexa53,cortexa57,\n+\tcortexa72,cortexa73,exynosm1,\n+\txgene1,cortexa57cortexa53,cortexa72cortexa53,\n+\tcortexa73cortexa35,cortexa73cortexa53,cortexa55,\n+\tcortexa75,cortexa75cortexa55,cortexm23,\n+\tcortexm33,cortexr52\"\n \t(const (symbol_ref \"((enum attr_tune) arm_tune)\")))"}, {"sha": "4a5da7e45a7698bc052d423bef7ed8a4404164db", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb", "patch": "@@ -850,9 +850,6 @@ struct arm_build_target arm_active_target;\n /* The following are used in the arm.md file as equivalents to bits\n    in the above two flag variables.  */\n \n-/* Nonzero if this chip supports the ARM Architecture 3M extensions.  */\n-int arm_arch3m = 0;\n-\n /* Nonzero if this chip supports the ARM Architecture 4 extensions.  */\n int arm_arch4 = 0;\n \n@@ -3002,7 +2999,8 @@ arm_option_override_internal (struct gcc_options *opts,\n   if (TARGET_INTERWORK && !bitmap_bit_p (arm_active_target.isa, isa_bit_thumb))\n     {\n       /* The default is to enable interworking, so this warning message would\n-\t be confusing to users who have just compiled with, eg, -march=armv3.  */\n+\t be confusing to users who have just compiled with\n+\t eg, -march=armv4.  */\n       /* warning (0, \"ignoring -minterwork because target CPU does not support THUMB\"); */\n       opts->x_target_flags &= ~MASK_INTERWORK;\n     }\n@@ -3236,7 +3234,6 @@ arm_configure_build_target (struct arm_build_target *target,\n       if (TARGET_INTERWORK || TARGET_THUMB)\n \t{\n \t  bitmap_set_bit (sought_isa, isa_bit_thumb);\n-\t  bitmap_set_bit (sought_isa, isa_bit_mode32);\n \n \t  /* There are no ARM processors that support both APCS-26 and\n \t     interworking.  Therefore we forcibly remove MODE26 from\n@@ -3636,7 +3633,6 @@ arm_option_reconfigure_globals (void)\n \n   /* Initialize boolean versions of the architectural flags, for use\n      in the arm.md file.  */\n-  arm_arch3m = bitmap_bit_p (arm_active_target.isa, isa_bit_armv3m);\n   arm_arch4 = bitmap_bit_p (arm_active_target.isa, isa_bit_armv4);\n   arm_arch4t = arm_arch4 && bitmap_bit_p (arm_active_target.isa, isa_bit_thumb);\n   arm_arch5t =  bitmap_bit_p (arm_active_target.isa, isa_bit_armv5t);\n@@ -10005,8 +10001,7 @@ arm_rtx_costs_internal (rtx x, enum rtx_code code, enum rtx_code outer_code,\n \n       if (mode == DImode)\n \t{\n-\t  if (arm_arch3m\n-\t      && GET_CODE (XEXP (x, 0)) == MULT\n+\t  if (GET_CODE (XEXP (x, 0)) == MULT\n \t      && ((GET_CODE (XEXP (XEXP (x, 0), 0)) == ZERO_EXTEND\n \t\t   && GET_CODE (XEXP (XEXP (x, 0), 1)) == ZERO_EXTEND)\n \t\t  || (GET_CODE (XEXP (XEXP (x, 0), 0)) == SIGN_EXTEND\n@@ -10204,11 +10199,10 @@ arm_rtx_costs_internal (rtx x, enum rtx_code code, enum rtx_code outer_code,\n \n       if (mode == DImode)\n \t{\n-\t  if (arm_arch3m\n-\t      && ((GET_CODE (XEXP (x, 0)) == ZERO_EXTEND\n-\t\t   && GET_CODE (XEXP (x, 1)) == ZERO_EXTEND)\n-\t\t  || (GET_CODE (XEXP (x, 0)) == SIGN_EXTEND\n-\t\t      && GET_CODE (XEXP (x, 1)) == SIGN_EXTEND)))\n+\t  if ((GET_CODE (XEXP (x, 0)) == ZERO_EXTEND\n+\t\t&& GET_CODE (XEXP (x, 1)) == ZERO_EXTEND)\n+\t       || (GET_CODE (XEXP (x, 0)) == SIGN_EXTEND\n+\t\t   && GET_CODE (XEXP (x, 1)) == SIGN_EXTEND))\n \t    {\n \t      if (speed_p)\n \t\t*cost += extra_cost->mult[1].extend;"}, {"sha": "34894c090dd6eafeeddbb260f0b5ad2c29003581", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb", "patch": "@@ -399,9 +399,6 @@ enum base_architecture\n /* The major revision number of the ARM Architecture implemented by the target.  */\n extern enum base_architecture arm_base_arch;\n \n-/* Nonzero if this chip supports the ARM Architecture 3M extensions.  */\n-extern int arm_arch3m;\n-\n /* Nonzero if this chip supports the ARM Architecture 4 extensions.  */\n extern int arm_arch4;\n "}, {"sha": "361a02668b0cfc9780c68a1eaf4a56fdf69b3d9d", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb", "patch": "@@ -1754,7 +1754,7 @@\n \t  (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"\"))\n \t  (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"\")))\n \t (match_operand:DI 3 \"s_register_operand\" \"\")))]\n-  \"TARGET_32BIT && arm_arch3m\"\n+  \"TARGET_32BIT\"\n   \"\")\n \n (define_insn \"*mulsidi3adddi\"\n@@ -1764,7 +1764,7 @@\n \t  (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"%r\"))\n \t  (sign_extend:DI (match_operand:SI 3 \"s_register_operand\" \"r\")))\n \t (match_operand:DI 1 \"s_register_operand\" \"0\")))]\n-  \"TARGET_32BIT && arm_arch3m && !arm_arch6\"\n+  \"TARGET_32BIT && !arm_arch6\"\n   \"smlal%?\\\\t%Q0, %R0, %3, %2\"\n   [(set_attr \"type\" \"smlal\")\n    (set_attr \"predicable\" \"yes\")]\n@@ -1794,7 +1794,7 @@\n \t(mult:DI\n \t (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"\"))\n \t (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"\"))))]\n-  \"TARGET_32BIT && arm_arch3m\"\n+  \"TARGET_32BIT\"\n   \"\"\n )\n \n@@ -1803,7 +1803,7 @@\n \t(mult:DI\n \t (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"%r\"))\n \t (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r\"))))]\n-  \"TARGET_32BIT && arm_arch3m && !arm_arch6\"\n+  \"TARGET_32BIT && !arm_arch6\"\n   \"smull%?\\\\t%Q0, %R0, %1, %2\"\n   [(set_attr \"type\" \"smull\")\n    (set_attr \"predicable\" \"yes\")]\n@@ -1825,7 +1825,7 @@\n \t(mult:DI\n \t (zero_extend:DI (match_operand:SI 1 \"s_register_operand\" \"\"))\n \t (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"\"))))]\n-  \"TARGET_32BIT && arm_arch3m\"\n+  \"TARGET_32BIT\"\n   \"\"\n )\n \n@@ -1834,7 +1834,7 @@\n \t(mult:DI\n \t (zero_extend:DI (match_operand:SI 1 \"s_register_operand\" \"%r\"))\n \t (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r\"))))]\n-  \"TARGET_32BIT && arm_arch3m && !arm_arch6\"\n+  \"TARGET_32BIT && !arm_arch6\"\n   \"umull%?\\\\t%Q0, %R0, %1, %2\"\n   [(set_attr \"type\" \"umull\")\n    (set_attr \"predicable\" \"yes\")]\n@@ -1858,7 +1858,7 @@\n \t  (zero_extend:DI (match_operand:SI 1 \"s_register_operand\" \"\"))\n \t  (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"\")))\n \t (match_operand:DI 3 \"s_register_operand\" \"\")))]\n-  \"TARGET_32BIT && arm_arch3m\"\n+  \"TARGET_32BIT\"\n   \"\")\n \n (define_insn \"*umulsidi3adddi\"\n@@ -1868,7 +1868,7 @@\n \t  (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"%r\"))\n \t  (zero_extend:DI (match_operand:SI 3 \"s_register_operand\" \"r\")))\n \t (match_operand:DI 1 \"s_register_operand\" \"0\")))]\n-  \"TARGET_32BIT && arm_arch3m && !arm_arch6\"\n+  \"TARGET_32BIT && !arm_arch6\"\n   \"umlal%?\\\\t%Q0, %R0, %3, %2\"\n   [(set_attr \"type\" \"umlal\")\n    (set_attr \"predicable\" \"yes\")]\n@@ -1897,7 +1897,7 @@\n \t     (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"\")))\n \t    (const_int 32))))\n      (clobber (match_scratch:SI 3 \"\"))])]\n-  \"TARGET_32BIT && arm_arch3m\"\n+  \"TARGET_32BIT\"\n   \"\"\n )\n \n@@ -1910,7 +1910,7 @@\n \t   (sign_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r,r\")))\n \t  (const_int 32))))\n    (clobber (match_scratch:SI 3 \"=&r,&r\"))]\n-  \"TARGET_32BIT && arm_arch3m && !arm_arch6\"\n+  \"TARGET_32BIT && !arm_arch6\"\n   \"smull%?\\\\t%3, %0, %2, %1\"\n   [(set_attr \"type\" \"smull\")\n    (set_attr \"predicable\" \"yes\")]\n@@ -1941,7 +1941,7 @@\n \t      (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"\")))\n \t    (const_int 32))))\n      (clobber (match_scratch:SI 3 \"\"))])]\n-  \"TARGET_32BIT && arm_arch3m\"\n+  \"TARGET_32BIT\"\n   \"\"\n )\n \n@@ -1954,7 +1954,7 @@\n \t   (zero_extend:DI (match_operand:SI 2 \"s_register_operand\" \"r,r\")))\n \t  (const_int 32))))\n    (clobber (match_scratch:SI 3 \"=&r,&r\"))]\n-  \"TARGET_32BIT && arm_arch3m && !arm_arch6\"\n+  \"TARGET_32BIT && !arm_arch6\"\n   \"umull%?\\\\t%3, %0, %2, %1\"\n   [(set_attr \"type\" \"umull\")\n    (set_attr \"predicable\" \"yes\")]"}, {"sha": "3506b16e929fa30af90e0a1bf20653ed6a098eaa", "filename": "gcc/config/arm/t-arm-elf", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Fconfig%2Farm%2Ft-arm-elf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Fconfig%2Farm%2Ft-arm-elf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm-elf?ref=5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb", "patch": "@@ -39,7 +39,7 @@ v7ve_fps\t:= vfpv3-d16 vfpv3 vfpv3-d16-fp16 vfpv3-fp16 vfpv4 neon \\\n v8_fps\t\t:= simd fp16 crypto fp16+crypto dotprod fp16fml\n \n # We don't do anything special with these.  Pre-v4t probably doesn't work.\n-all_early_nofp\t:= armv2 armv2a armv3 armv3m armv4 armv4t armv5t\n+all_early_nofp\t:= armv4 armv4t armv5t\n \n all_early_arch\t:= armv5tej armv6 armv6j armv6k armv6z armv6kz \\\n \t\t   armv6zk armv6t2 iwmmxt iwmmxt2"}, {"sha": "612b97c8b0de33ac9d95339c51920eb3c68330bf", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb", "patch": "@@ -15904,9 +15904,7 @@ Permissible names are:\n @samp{iwmmxt} and @samp{iwmmxt2}.\n \n Additionally, the following architectures, which lack support for the\n-Thumb execution state, are recognized but support is deprecated:\n-@samp{armv2}, @samp{armv2a}, @samp{armv3}, @samp{armv3m},\n-@samp{armv4}.\n+Thumb execution state, are recognized but support is deprecated: @samp{armv4}.\n \n Many of the architectures support extensions.  These can be added by\n appending @samp{+@var{extension}} to the architecture name.  Extension"}, {"sha": "6f47ddc7c44bc4f40284c7739e1c3a563ecf4136", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5511d3fa7db26bb6a132a5c3c2cd48d7a1322deb", "patch": "@@ -1,3 +1,9 @@\n+2018-05-18  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/arm/pr62554.c: Delete.\n+\t* gcc.target/arm/pr69610-1.c: Likewise.\n+\t* gcc.target/arm/pr69610-2.c: Likewise.\n+\n 2018-05-18  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* gcc.target/arm/pr40887.c: Update comment."}]}