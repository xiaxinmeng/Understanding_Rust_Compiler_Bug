{"sha": "6dcd18b9aa78af93366156bb253d4bfaa89a3e8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmRjZDE4YjlhYTc4YWY5MzM2NjE1NmJiMjUzZDRiZmFhODlhM2U4ZA==", "commit": {"author": {"name": "David Daney", "email": "ddaney@avtrex.com", "date": "2005-03-15T16:46:51Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2005-03-15T16:46:51Z"}, "message": "natPlainSocketImplPosix.cc (read_helper): Handle count == 0 case.\n\n2005-03-15  David Daney  <ddaney@avtrex.com>\n\n\t* gnu/java/net/natPlainSocketImplPosix.cc (read_helper): Handle\n\tcount == 0 case.\n\n2005-03-15  David Daney  <ddaney@avtrex.com>\n\n\t* java/io/BufferedInputStream.java (available): Use 'in' instead\n\tof 'super' for underlying stream access.\n\t(close): Ditto.\n\t(read(byte[], int, int)): Ditto.\n\t(refill): Ditto.\n\t(skip): Call skip on underlying stream when possible.\n\nFrom-SVN: r96516", "tree": {"sha": "91fdc7ab4a90e289342eb60ae6b642f5dfe516af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91fdc7ab4a90e289342eb60ae6b642f5dfe516af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6dcd18b9aa78af93366156bb253d4bfaa89a3e8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dcd18b9aa78af93366156bb253d4bfaa89a3e8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dcd18b9aa78af93366156bb253d4bfaa89a3e8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dcd18b9aa78af93366156bb253d4bfaa89a3e8d/comments", "author": null, "committer": null, "parents": [{"sha": "4f51c6e7ca17e29ad16c1d346d26fa16e16df3ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f51c6e7ca17e29ad16c1d346d26fa16e16df3ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f51c6e7ca17e29ad16c1d346d26fa16e16df3ad"}], "stats": {"total": 43, "additions": 36, "deletions": 7}, "files": [{"sha": "59db600596f6daeb2f8486e5183d87e0affa50ee", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dcd18b9aa78af93366156bb253d4bfaa89a3e8d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dcd18b9aa78af93366156bb253d4bfaa89a3e8d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6dcd18b9aa78af93366156bb253d4bfaa89a3e8d", "patch": "@@ -1,3 +1,17 @@\n+2005-03-15  David Daney  <ddaney@avtrex.com>\n+\n+\t* gnu/java/net/natPlainSocketImplPosix.cc (read_helper): Handle\n+\tcount == 0 case.\n+\n+2005-03-15  David Daney  <ddaney@avtrex.com>\n+\n+\t* java/io/BufferedInputStream.java (available): Use 'in' instead\n+\tof 'super' for underlying stream access.\n+\t(close): Ditto.\n+\t(read(byte[], int, int)): Ditto.\n+\t(refill): Ditto.\n+\t(skip): Call skip on underlying stream when possible. \n+\n 2005-03-12  Andreas Tobler  <a.tobler@schweiz.ch>\n \n \t* stacktrace.cc (GetCallerInfo): Return nothing in case of"}, {"sha": "3f1dde9f5a2985b50b13d553d858f47219d54cb4", "filename": "libjava/gnu/java/net/natPlainSocketImplPosix.cc", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dcd18b9aa78af93366156bb253d4bfaa89a3e8d/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainSocketImplPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dcd18b9aa78af93366156bb253d4bfaa89a3e8d/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainSocketImplPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainSocketImplPosix.cc?ref=6dcd18b9aa78af93366156bb253d4bfaa89a3e8d", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2003, 2004  Free Software Foundation\n+/* Copyright (C) 2003, 2004, 2005  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -405,6 +405,11 @@ gnu::java::net::PlainSocketImpl$SocketInputStream::read(jbyteArray buffer, jint\n static jint\n read_helper (jint native_fd, jint timeout, jbyte *bytes, jint count)\n {\n+  // If zero bytes were requested, short circuit so that recv\n+  // doesn't signal EOF.\n+  if (count == 0)\n+    return 0;\n+    \n   // Do timeouts via select.\n   if (timeout > 0 && native_fd >= 0 && native_fd < FD_SETSIZE)\n     {"}, {"sha": "ce166b337f4aed9eac9117b24de5b96f85c26696", "filename": "libjava/java/io/BufferedInputStream.java", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6dcd18b9aa78af93366156bb253d4bfaa89a3e8d/libjava%2Fjava%2Fio%2FBufferedInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6dcd18b9aa78af93366156bb253d4bfaa89a3e8d/libjava%2Fjava%2Fio%2FBufferedInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FBufferedInputStream.java?ref=6dcd18b9aa78af93366156bb253d4bfaa89a3e8d", "patch": "@@ -158,7 +158,7 @@ public BufferedInputStream(InputStream in, int size)\n    */\n   public synchronized int available() throws IOException\n   {\n-    return count - pos + super.available();\n+    return count - pos + in.available();\n   }\n \n   /**\n@@ -173,7 +173,7 @@ public void close() throws IOException\n     buf = null;\n     pos = count = 0;\n     markpos = -1;\n-    super.close();\n+    in.close();\n   }\n \n   /**\n@@ -273,7 +273,7 @@ public synchronized int read(byte[] b, int off, int len) throws IOException\n     off += totalBytesRead;\n     len -= totalBytesRead;\n \n-    while (len > 0 && super.available() > 0 && refill())\n+    while (len > 0 && in.available() > 0 && refill())\n       {\n \tint remain = Math.min(count - pos, len);\n \tSystem.arraycopy(buf, pos, b, off, remain);\n@@ -327,8 +327,18 @@ public synchronized long skip(long n) throws IOException\n \n     while (n > 0L)\n       {\n-\tif (pos >= count && !refill())\n-          break;\n+\tif (pos >= count)\n+          {\n+            if (markpos == -1)\n+              {\n+                // Buffer is empty and no mark is set, skip on the\n+                // underlying stream.\n+                n -= in.skip(n);\n+                break;\n+              }\n+            else if (!refill())\n+              break;\n+          }\n \n \tint numread = (int) Math.min((long) (count - pos), n);\n \tpos += numread;\n@@ -369,7 +379,7 @@ boolean refill() throws IOException\n \tmarkpos = 0;\n       }\n \n-    int numread = super.read(buf, count, bufferSize);\n+    int numread = in.read(buf, count, bufferSize);\n \n     if (numread <= 0)\t// EOF\n       return false;"}]}