{"sha": "828839869831f7b3426b1924cb29b837237d019f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI4ODM5ODY5ODMxZjdiMzQyNmIxOTI0Y2IyOWI4MzcyMzdkMDE5Zg==", "commit": {"author": {"name": "Nicola Pero", "email": "nicola.pero@meta-innovation.com", "date": "2010-12-23T05:30:12Z"}, "committer": {"name": "Nicola Pero", "email": "nicola@gcc.gnu.org", "date": "2010-12-23T05:30:12Z"}, "message": "In gcc/testsuite/: 2010-12-23 Nicola Pero <nicola.pero@meta-innovation.com>\n\nIn gcc/testsuite/:\n2010-12-23  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* obj-c.dg/gnu-api-2-class.m: Test that class_addMethod() returns\n\tNO if the method is already implemented in the class.\n\t* obj-c++.dg/gnu-api-2-class.mm: Same change.\n\nIn libobjc/:\n2010-12-23  Nicola Pero  <nicola.pero@meta-innovation.com>\n\n\t* sendmsg.c (class_addMethod): Return NO if the method already\n\texists in the class.\n\nFrom-SVN: r168199", "tree": {"sha": "4c03d92f75f328d1525418507d7cd68c4f35720f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c03d92f75f328d1525418507d7cd68c4f35720f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/828839869831f7b3426b1924cb29b837237d019f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828839869831f7b3426b1924cb29b837237d019f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/828839869831f7b3426b1924cb29b837237d019f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/828839869831f7b3426b1924cb29b837237d019f/comments", "author": {"login": "Nico-31415", "id": 94470564, "node_id": "U_kgDOBaGBpA", "avatar_url": "https://avatars.githubusercontent.com/u/94470564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nico-31415", "html_url": "https://github.com/Nico-31415", "followers_url": "https://api.github.com/users/Nico-31415/followers", "following_url": "https://api.github.com/users/Nico-31415/following{/other_user}", "gists_url": "https://api.github.com/users/Nico-31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nico-31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nico-31415/subscriptions", "organizations_url": "https://api.github.com/users/Nico-31415/orgs", "repos_url": "https://api.github.com/users/Nico-31415/repos", "events_url": "https://api.github.com/users/Nico-31415/events{/privacy}", "received_events_url": "https://api.github.com/users/Nico-31415/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1e9402cb3d04add863c5f662b346c8f5f180ebb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e9402cb3d04add863c5f662b346c8f5f180ebb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e9402cb3d04add863c5f662b346c8f5f180ebb7"}], "stats": {"total": 80, "additions": 80, "deletions": 0}, "files": [{"sha": "7f0c770145f8bdb48122ca89e89e0fed018bc5e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828839869831f7b3426b1924cb29b837237d019f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828839869831f7b3426b1924cb29b837237d019f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=828839869831f7b3426b1924cb29b837237d019f", "patch": "@@ -1,3 +1,9 @@\n+2010-12-23  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* obj-c.dg/gnu-api-2-class.m: Test that class_addMethod() returns\n+\tNO if the method is already implemented in the class.\n+\t* obj-c++.dg/gnu-api-2-class.mm: Same change.\n+\n 2010-12-22  Sebastian Pop  <sebastian.pop@amd.com>\n \n \tPR tree-optimization/47019"}, {"sha": "da25663d171dcf5b6330b64f129b0853de48fd18", "filename": "gcc/testsuite/obj-c++.dg/gnu-api-2-class.mm", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828839869831f7b3426b1924cb29b837237d019f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-class.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828839869831f7b3426b1924cb29b837237d019f/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-class.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fgnu-api-2-class.mm?ref=828839869831f7b3426b1924cb29b837237d019f", "patch": "@@ -140,6 +140,12 @@ int main ()\n \t\t\t   method_getTypeEncoding (method2)))\n       abort ();\n \n+    /* Test that if the method already exists in the class,\n+       class_addMethod() returns NO.  */\n+    if (class_addMethod (new_class, @selector (variable), method_getImplementation (method2),\n+\t\t\t method_getTypeEncoding (method2)))\n+      abort ();\n+\n     objc_registerClassPair (new_class);    \n \n     /* Now, MySubClass2 is basically the same as MySubClass!  We'll\n@@ -152,6 +158,15 @@ int main ()\n       if ([o variable] != o)\n \tabort ();\n     }\n+\n+    /* Now, try that if you take an existing class and try to add an\n+       already existing method, class_addMethod returns NO.  This is\n+       subtly different from before, when 'new_class' was still in\n+       construction.  Now it's a real class and the libobjc internals\n+       differ between the two cases.  */\n+    if (class_addMethod (new_class, @selector (variable), method_getImplementation (method2),\n+\t\t\t method_getTypeEncoding (method2)))\n+      abort ();\n   }\n \n   std::cout << \"Testing class_addProtocol ()...\\n\";"}, {"sha": "d38d9c253dc3efbb91c1af8bde5a8272d6d61a48", "filename": "gcc/testsuite/objc.dg/gnu-api-2-class.m", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828839869831f7b3426b1924cb29b837237d019f/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-class.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828839869831f7b3426b1924cb29b837237d019f/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-class.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fgnu-api-2-class.m?ref=828839869831f7b3426b1924cb29b837237d019f", "patch": "@@ -140,6 +140,12 @@ int main(int argc, void **args)\n \t\t\t   method_getTypeEncoding (method2)))\n       abort ();\n \n+    /* Test that if the method already exists in the class,\n+       class_addMethod() returns NO.  */\n+    if (class_addMethod (new_class, @selector (variable), method_getImplementation (method2),\n+\t\t\t method_getTypeEncoding (method2)))\n+      abort ();\n+\n     objc_registerClassPair (new_class);    \n \n     /* Now, MySubClass2 is basically the same as MySubClass!  We'll\n@@ -152,6 +158,15 @@ int main(int argc, void **args)\n       if ([o variable] != o)\n \tabort ();\n     }\n+\n+    /* Now, try that if you take an existing class and try to add an\n+       already existing method, class_addMethod returns NO.  This is\n+       subtly different from before, when 'new_class' was still in\n+       construction.  Now it's a real class and the libobjc internals\n+       differ between the two cases.  */\n+    if (class_addMethod (new_class, @selector (variable), method_getImplementation (method2),\n+\t\t\t method_getTypeEncoding (method2)))\n+      abort ();\n   }\n \n   printf (\"Testing class_addProtocol ()...\\n\");"}, {"sha": "9922b53f709f15902d4c7dce1af13c62ced86cad", "filename": "libobjc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828839869831f7b3426b1924cb29b837237d019f/libobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828839869831f7b3426b1924cb29b837237d019f/libobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2FChangeLog?ref=828839869831f7b3426b1924cb29b837237d019f", "patch": "@@ -1,3 +1,8 @@\n+2010-12-23  Nicola Pero  <nicola.pero@meta-innovation.com>\n+\n+\t* sendmsg.c (class_addMethod): Return NO if the method already\n+\texists in the class.\n+\n 2010-12-22  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* init.c (duplicate_classes): New."}, {"sha": "983dd78d455727d8e8d55b30e310d3e7f114e1c4", "filename": "libobjc/sendmsg.c", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/828839869831f7b3426b1924cb29b837237d019f/libobjc%2Fsendmsg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/828839869831f7b3426b1924cb29b837237d019f/libobjc%2Fsendmsg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libobjc%2Fsendmsg.c?ref=828839869831f7b3426b1924cb29b837237d019f", "patch": "@@ -759,6 +759,45 @@ class_addMethod (Class class_, SEL selector, IMP implementation,\n   if (method_name == NULL)\n     return NO;\n \n+  /* If the method already exists in the class, return NO.  It is fine\n+     if the method already exists in the superclass; in that case, we\n+     are overriding it.  */\n+  if (CLS_IS_IN_CONSTRUCTION (class_))\n+    {\n+      /* The class only contains a list of methods; they have not been\n+\t registered yet, ie, the method_name of each of them is still\n+\t a string, not a selector.  Iterate manually over them to\n+\t check if we have already added the method.  */\n+      struct objc_method_list * method_list = class_->methods;\n+      while (method_list)\n+\t{\n+\t  int i;\n+\t  \n+\t  /* Search the method list.  */\n+\t  for (i = 0; i < method_list->method_count; ++i)\n+\t    {\n+\t      struct objc_method * method = &method_list->method_list[i];\n+\t      \n+\t      if (method->method_name\n+\t\t  && strcmp ((char *)method->method_name, method_name) == 0)\n+\t\treturn NO;\n+\t    }\n+\t  \n+\t  /* The method wasn't found.  Follow the link to the next list of\n+\t     methods.  */\n+\t  method_list = method_list->method_next;\n+\t}\n+      /* The method wasn't found.  It's a new one.  Go ahead and add\n+\t it.  */\n+    }\n+  else\n+    {\n+      /* Do the standard lookup.  This assumes the selectors are\n+\t mapped.  */\n+      if (search_for_method_in_list (class_->methods, selector))\n+\treturn NO;\n+    }\n+\n   method_list = (struct objc_method_list *)objc_calloc (1, sizeof (struct objc_method_list));\n   method_list->method_count = 1;\n "}]}