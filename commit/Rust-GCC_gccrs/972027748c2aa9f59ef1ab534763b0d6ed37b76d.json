{"sha": "972027748c2aa9f59ef1ab534763b0d6ed37b76d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTcyMDI3NzQ4YzJhYTlmNTllZjFhYjUzNDc2M2IwZDZlZDM3Yjc2ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-12-19T16:43:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-12-19T16:43:04Z"}, "message": "re PR middle-end/81914 (gcc 7.1 generates branch for code which was branchless in earlier gcc version)\n\n\tPR middle-end/81914\n\t* predict.c (zero_one_minusone): New function.\n\t(apply_return_prediction): Avoid return prediction for functions\n\treturning only -1, 0 and 1 values, unless they only return -1 and 0\n\tor 0 and 1.\n\nFrom-SVN: r255829", "tree": {"sha": "4b28276b4df98bc91aaec6e977cad6164d0e067c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b28276b4df98bc91aaec6e977cad6164d0e067c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/972027748c2aa9f59ef1ab534763b0d6ed37b76d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/972027748c2aa9f59ef1ab534763b0d6ed37b76d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/972027748c2aa9f59ef1ab534763b0d6ed37b76d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/972027748c2aa9f59ef1ab534763b0d6ed37b76d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "41bc2c0b217d727aa516978cac54594d00498411", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41bc2c0b217d727aa516978cac54594d00498411", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41bc2c0b217d727aa516978cac54594d00498411"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "31277b9a9f45af94cb397cc9d650d7a4824e43f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/972027748c2aa9f59ef1ab534763b0d6ed37b76d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/972027748c2aa9f59ef1ab534763b0d6ed37b76d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=972027748c2aa9f59ef1ab534763b0d6ed37b76d", "patch": "@@ -1,3 +1,11 @@\n+2017-12-18  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/81914\n+\t* predict.c (zero_one_minusone): New function.\n+\t(apply_return_prediction): Avoid return prediction for functions\n+\treturning only -1, 0 and 1 values, unless they only return -1 and 0\n+\tor 0 and 1.\n+\n 2017-12-19  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.c (legitimate_scaled_address_p): Clean"}, {"sha": "2de9d24183343dd8f6cd68790032134e44ec7877", "filename": "gcc/predict.c", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/972027748c2aa9f59ef1ab534763b0d6ed37b76d/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/972027748c2aa9f59ef1ab534763b0d6ed37b76d/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=972027748c2aa9f59ef1ab534763b0d6ed37b76d", "patch": "@@ -2639,6 +2639,64 @@ return_prediction (tree val, enum prediction *prediction)\n   return PRED_NO_PREDICTION;\n }\n \n+/* Return zero if phi result could have values other than -1, 0 or 1,\n+   otherwise return a bitmask, with bits 0, 1 and 2 set if -1, 0 and 1\n+   values are used or likely.  */\n+\n+static int\n+zero_one_minusone (gphi *phi, int limit)\n+{\n+  int phi_num_args = gimple_phi_num_args (phi);\n+  int ret = 0;\n+  for (int i = 0; i < phi_num_args; i++)\n+    {\n+      tree t = PHI_ARG_DEF (phi, i);\n+      if (TREE_CODE (t) != INTEGER_CST)\n+\tcontinue;\n+      wide_int w = wi::to_wide (t);\n+      if (w == -1)\n+\tret |= 1;\n+      else if (w == 0)\n+\tret |= 2;\n+      else if (w == 1)\n+\tret |= 4;\n+      else\n+\treturn 0;\n+    }\n+  for (int i = 0; i < phi_num_args; i++)\n+    {\n+      tree t = PHI_ARG_DEF (phi, i);\n+      if (TREE_CODE (t) == INTEGER_CST)\n+\tcontinue;\n+      if (TREE_CODE (t) != SSA_NAME)\n+\treturn 0;\n+      gimple *g = SSA_NAME_DEF_STMT (t);\n+      if (gimple_code (g) == GIMPLE_PHI && limit > 0)\n+\tif (int r = zero_one_minusone (as_a <gphi *> (g), limit - 1))\n+\t  {\n+\t    ret |= r;\n+\t    continue;\n+\t  }\n+      if (!is_gimple_assign (g))\n+\treturn 0;\n+      if (gimple_assign_cast_p (g))\n+\t{\n+\t  tree rhs1 = gimple_assign_rhs1 (g);\n+\t  if (TREE_CODE (rhs1) != SSA_NAME\n+\t      || !INTEGRAL_TYPE_P (TREE_TYPE (rhs1))\n+\t      || TYPE_PRECISION (TREE_TYPE (rhs1)) != 1\n+\t      || !TYPE_UNSIGNED (TREE_TYPE (rhs1)))\n+\t    return 0;\n+\t  ret |= (2 | 4);\n+\t  continue;\n+\t}\n+      if (TREE_CODE_CLASS (gimple_assign_rhs_code (g)) != tcc_comparison)\n+\treturn 0;\n+      ret |= (2 | 4);\n+    }\n+  return ret;\n+}\n+\n /* Find the basic block with return expression and look up for possible\n    return value trying to apply RETURN_PREDICTION heuristics.  */\n static void\n@@ -2676,6 +2734,19 @@ apply_return_prediction (void)\n   phi_num_args = gimple_phi_num_args (phi);\n   pred = return_prediction (PHI_ARG_DEF (phi, 0), &direction);\n \n+  /* Avoid the case where the function returns -1, 0 and 1 values and\n+     nothing else.  Those could be qsort etc. comparison functions\n+     where the negative return isn't less probable than positive.\n+     For this require that the function returns at least -1 or 1\n+     or -1 and a boolean value or comparison result, so that functions\n+     returning just -1 and 0 are treated as if -1 represents error value.  */\n+  if (INTEGRAL_TYPE_P (TREE_TYPE (return_val))\n+      && !TYPE_UNSIGNED (TREE_TYPE (return_val))\n+      && TYPE_PRECISION (TREE_TYPE (return_val)) > 1)\n+    if (int r = zero_one_minusone (phi, 3))\n+      if ((r & (1 | 4)) == (1 | 4))\n+\treturn;\n+\n   /* Avoid the degenerate case where all return values form the function\n      belongs to same category (ie they are all positive constants)\n      so we can hardly say something about them.  */"}]}