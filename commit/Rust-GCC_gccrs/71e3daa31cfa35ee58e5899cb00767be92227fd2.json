{"sha": "71e3daa31cfa35ee58e5899cb00767be92227fd2", "node_id": "C_kwDOANBUbNoAKDcxZTNkYWEzMWNmYTM1ZWU1OGU1ODk5Y2IwMDc2N2JlOTIyMjdmZDI", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-07-07T22:06:19Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-07-09T01:17:46Z"}, "message": "Fix tree-opt/PR106087: ICE with inline-asm with multiple output and assigned only static vars\n\nThe problem here is that when we mark the ssa name that was referenced in the now removed\ndead store (to a write only static variable), the inline-asm would also be removed\neven though it was defining another ssa name. This fixes the problem by checking\nto make sure that the statement was only defining one ssa name.\n\nCommitted as approved after a bootstrapped and tested on x86_64 with no regressions.\n\n\tPR tree-optimization/106087\n\ngcc/ChangeLog:\n\n\t* tree-ssa-dce.cc (simple_dce_from_worklist): Check\n\tto make sure the statement is only defining one operand.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.c-torture/compile/inline-asm-1.c: New test.", "tree": {"sha": "fa19f95177e47f1eefd2e95758fcac42be873d2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa19f95177e47f1eefd2e95758fcac42be873d2f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71e3daa31cfa35ee58e5899cb00767be92227fd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71e3daa31cfa35ee58e5899cb00767be92227fd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71e3daa31cfa35ee58e5899cb00767be92227fd2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71e3daa31cfa35ee58e5899cb00767be92227fd2/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fe604a2d93168c8d19db83edf8a7f806aa4fe69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fe604a2d93168c8d19db83edf8a7f806aa4fe69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fe604a2d93168c8d19db83edf8a7f806aa4fe69"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "0044cb761b687a3410c2318a3292ea6b51d4589d", "filename": "gcc/testsuite/gcc.c-torture/compile/inline-asm-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e3daa31cfa35ee58e5899cb00767be92227fd2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Finline-asm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e3daa31cfa35ee58e5899cb00767be92227fd2/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Finline-asm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Finline-asm-1.c?ref=71e3daa31cfa35ee58e5899cb00767be92227fd2", "patch": "@@ -0,0 +1,14 @@\n+/* PR tree-opt/106087,\n+   simple_dce_from_worklist would delete the\n+   inline-asm when it was still being referenced\n+   by the other ssa name. */\n+\n+static int t;\n+\n+int f(void)\n+{\n+  int tt, tt1;\n+  asm(\"\":\"=r\"(tt), \"=r\"(tt1));\n+  t = tt1;\n+  return tt;\n+}"}, {"sha": "daf0782b0e13e42e0d121791a1d0921c0edaaacb", "filename": "gcc/tree-ssa-dce.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71e3daa31cfa35ee58e5899cb00767be92227fd2/gcc%2Ftree-ssa-dce.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71e3daa31cfa35ee58e5899cb00767be92227fd2/gcc%2Ftree-ssa-dce.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.cc?ref=71e3daa31cfa35ee58e5899cb00767be92227fd2", "patch": "@@ -2061,6 +2061,13 @@ simple_dce_from_worklist (bitmap worklist)\n       if (gimple_has_side_effects (t))\n \tcontinue;\n \n+      /* The defining statement needs to be defining only this name.\n+\t ASM is the only statement that can define more than one\n+\t (non-virtual) name. */\n+      if (is_a<gasm *>(t)\n+\t  && !single_ssa_def_operand (t, SSA_OP_DEF))\n+\tcontinue;\n+\n       /* Don't remove statements that are needed for non-call\n \t eh to work.  */\n       if (stmt_unremovable_because_of_non_call_eh_p (cfun, t))"}]}