{"sha": "c575213d96da59a3b05244445ec948ebf0f36394", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzU3NTIxM2Q5NmRhNTlhM2IwNTI0NDQ0NWVjOTQ4ZWJmMGYzNjM5NA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-18T08:37:44Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-18T08:37:44Z"}, "message": "(PRINT_OPERAND): For `h', always use OPERAND_HIGH_ADJ_PART\neven for integer constant addresses.\n\nFrom-SVN: r2509", "tree": {"sha": "085831fba153ca7886c9b5f1e29c6dde3542264a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/085831fba153ca7886c9b5f1e29c6dde3542264a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c575213d96da59a3b05244445ec948ebf0f36394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c575213d96da59a3b05244445ec948ebf0f36394", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c575213d96da59a3b05244445ec948ebf0f36394", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c575213d96da59a3b05244445ec948ebf0f36394/comments", "author": null, "committer": null, "parents": [{"sha": "bc9aee2d4d2763c95a4c7a4124df18c38528e8fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc9aee2d4d2763c95a4c7a4124df18c38528e8fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc9aee2d4d2763c95a4c7a4124df18c38528e8fc"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "fcd385e23a2b816ed6d8665b017e48b48621d599", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c575213d96da59a3b05244445ec948ebf0f36394/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c575213d96da59a3b05244445ec948ebf0f36394/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=c575213d96da59a3b05244445ec948ebf0f36394", "patch": "@@ -1286,26 +1286,26 @@ extern unsigned long sfmode_constant_to_ulong ();\n   else if ((CODE) == 'm')\t\t\t\t\t\t\\\n     output_address (XEXP (X, 0));\t\t\t\t\t\\\n   else if ((CODE) == 'L')\t\t\t\t\t\t\\\n-    if (GET_CODE (X) == MEM)\t\t\t\t\t\t\\\n-      PRINT_OPERAND_PART (FILE, XEXP (X, 0), OPERAND_LOW_PART);\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      PRINT_OPERAND_PART (FILE, X, OPERAND_LOW_PART);\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (GET_CODE (X) == MEM)\t\t\t\t\t\t\\\n+\tPRINT_OPERAND_PART (FILE, XEXP (X, 0), OPERAND_LOW_PART);\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tPRINT_OPERAND_PART (FILE, X, OPERAND_LOW_PART);\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n   else if ((CODE) == 'H')\t\t\t\t\t\t\\\n-    if (GET_CODE (X) == MEM)\t\t\t\t\t\t\\\n-      PRINT_OPERAND_PART (FILE, XEXP (X, 0), OPERAND_HIGH_PART);\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      PRINT_OPERAND_PART (FILE, X, OPERAND_HIGH_PART);\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (GET_CODE (X) == MEM)\t\t\t\t\t\t\\\n+\tPRINT_OPERAND_PART (FILE, XEXP (X, 0), OPERAND_HIGH_PART);\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tPRINT_OPERAND_PART (FILE, X, OPERAND_HIGH_PART);\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n   else if ((CODE) == 'h')\t\t\t\t\t\t\\\n-    if (GET_CODE (X) == MEM)\t\t\t\t\t\t\\\n-      PRINT_OPERAND_PART (FILE, XEXP (X, 0),\t\t\t\t\\\n-\t\tconst_int_operand (XEXP (X, 0))\t\t\t\t\\\n-\t\t\t? OPERAND_HIGH_PART\t\t\t\t\\\n-\t\t\t: OPERAND_HIGH_ADJ_PART);\t\t\t\\\n-    else\t\t\t\t\t\t\t\t\\\n-      PRINT_OPERAND_PART (FILE, X, \t\t\t\t\t\\\n-\t\tconst_int_operand (X)\t\t\t\t\t\\\n-\t\t\t? OPERAND_HIGH_PART\t\t\t\t\\\n-\t\t\t: OPERAND_HIGH_ADJ_PART);\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (GET_CODE (X) == MEM)\t\t\t\t\t\t\\\n+\tPRINT_OPERAND_PART (FILE, XEXP (X, 0), OPERAND_HIGH_ADJ_PART);\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tPRINT_OPERAND_PART (FILE, X, OPERAND_HIGH_ADJ_PART);\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n   else if (GET_CODE (X) == MEM)\t\t\t\t\t\t\\\n     output_address (XEXP (X, 0));\t\t\t\t\t\\\n   else if ((CODE) == 'r' && (X) == const0_rtx)\t\t\t\t\\"}]}