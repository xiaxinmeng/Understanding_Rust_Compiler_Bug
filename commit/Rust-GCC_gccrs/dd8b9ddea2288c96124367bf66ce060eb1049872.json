{"sha": "dd8b9ddea2288c96124367bf66ce060eb1049872", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ4YjlkZGVhMjI4OGM5NjEyNDM2N2JmNjZjZTA2MGViMTA0OTg3Mg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-01-28T14:37:20Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2013-01-28T14:37:20Z"}, "message": "re PR fortran/53537 (Explicit IMPORT of renamed USE-associated symbol fails)\n\n2013-01-28  Tobias Burnus  <burnus@net-b.de>\n\t    Mikael Morin  <mikael@gcc.gnu.org>\n\n\tPR fortran/53537\n\t* symbol.c (gfc_find_sym_tree): Don't look for the symbol outside an\n\tinterface block.\n\t(gfc_get_ha_symtree): Let gfc_find_sym_tree lookup the parent namespace.\n\t* decl.c (gfc_match_data_decl): Ditto.\n\t(variable_decl): Remove undeclared type error.\n\t(gfc_match_import): Use renamed instead of original name.\n\n2013-01-28  Tobias Burnus  <burnus@net-b.de>\n\t    Mikael Morin  <mikael@gcc.gnu.org>\n\n\tPR fortran/53537\n\t* gfortran.dg/import2.f90: Adjust undeclared type error messages.\n\t* gfortran.dg/import8.f90: Likewise.\n\t* gfortran.dg/interface_derived_type_1.f90: Likewise.\n\t* gfortran.dg/import10.f90: New test.\n\t* gfortran.dg/import11.f90: Likewise\n\n\nCo-Authored-By: Mikael Morin <mikael@gcc.gnu.org>\n\nFrom-SVN: r195506", "tree": {"sha": "46bdc06e6d37edaa05bcf617578ec98dd1195a09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46bdc06e6d37edaa05bcf617578ec98dd1195a09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd8b9ddea2288c96124367bf66ce060eb1049872", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd8b9ddea2288c96124367bf66ce060eb1049872", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd8b9ddea2288c96124367bf66ce060eb1049872", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd8b9ddea2288c96124367bf66ce060eb1049872/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e63f158158a16d77dd34492534e13c1a5ca27943", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e63f158158a16d77dd34492534e13c1a5ca27943", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e63f158158a16d77dd34492534e13c1a5ca27943"}], "stats": {"total": 139, "additions": 95, "deletions": 44}, "files": [{"sha": "9cdc60366d0583030b3907559565ac5063a85b39", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd8b9ddea2288c96124367bf66ce060eb1049872/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd8b9ddea2288c96124367bf66ce060eb1049872/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=dd8b9ddea2288c96124367bf66ce060eb1049872", "patch": "@@ -1,3 +1,14 @@\n+2013-01-28  Tobias Burnus  <burnus@net-b.de>\n+\t    Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/53537\n+\t* symbol.c (gfc_find_sym_tree): Don't look for the symbol outside an\n+\tinterface block.\n+\t(gfc_get_ha_symtree): Let gfc_find_sym_tree lookup the parent namespace.\n+\t* decl.c (gfc_match_data_decl): Ditto.\n+\t(variable_decl): Remove undeclared type error.\n+\t(gfc_match_import): Use renamed instead of original name.\n+\n 2013-01-27 Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/55984"}, {"sha": "2a6342c681c45deae30f5f2c11c141afa69be4d8", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd8b9ddea2288c96124367bf66ce060eb1049872/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd8b9ddea2288c96124367bf66ce060eb1049872/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=dd8b9ddea2288c96124367bf66ce060eb1049872", "patch": "@@ -1979,30 +1979,6 @@ variable_decl (int elem)\n       goto cleanup;\n     }\n \n-  /* An interface body specifies all of the procedure's\n-     characteristics and these shall be consistent with those\n-     specified in the procedure definition, except that the interface\n-     may specify a procedure that is not pure if the procedure is\n-     defined to be pure(12.3.2).  */\n-  if ((current_ts.type == BT_DERIVED || current_ts.type == BT_CLASS)\n-      && gfc_current_ns->proc_name\n-      && gfc_current_ns->proc_name->attr.if_source == IFSRC_IFBODY\n-      && current_ts.u.derived->ns != gfc_current_ns)\n-    {\n-      gfc_symtree *st;\n-      st = gfc_find_symtree (gfc_current_ns->sym_root, current_ts.u.derived->name);\n-      if (!(current_ts.u.derived->attr.imported\n-\t\t&& st != NULL\n-\t\t&& gfc_find_dt_in_generic (st->n.sym) == current_ts.u.derived)\n-\t    && !gfc_current_ns->has_import_set)\n-\t{\n-\t    gfc_error (\"The type of '%s' at %C has not been declared within the \"\n-\t\t       \"interface\", name);\n-\t    m = MATCH_ERROR;\n-\t    goto cleanup;\n-\t}\n-    }\n-\n   if (check_function_name (name) == FAILURE)\n     {\n       m = MATCH_ERROR;\n@@ -3240,14 +3216,14 @@ gfc_match_import (void)\n \t      return MATCH_ERROR;\n \t    }\n \n-\t  if (gfc_find_symtree (gfc_current_ns->sym_root,name))\n+\t  if (gfc_find_symtree (gfc_current_ns->sym_root, name))\n \t    {\n \t      gfc_warning (\"'%s' is already IMPORTed from host scoping unit \"\n \t\t\t   \"at %C.\", name);\n \t      goto next_item;\n \t    }\n \n-\t  st = gfc_new_symtree (&gfc_current_ns->sym_root, sym->name);\n+\t  st = gfc_new_symtree (&gfc_current_ns->sym_root, name);\n \t  st->n.sym = sym;\n \t  sym->refs++;\n \t  sym->attr.imported = 1;\n@@ -3259,8 +3235,8 @@ gfc_match_import (void)\n \t\t lower-case name contains the associated generic function. */\n \t      st = gfc_new_symtree (&gfc_current_ns->sym_root,\n \t\t\tgfc_get_string (\"%c%s\",\n-\t\t\t\t(char) TOUPPER ((unsigned char) sym->name[0]),\n-\t\t\t\t&sym->name[1]));\n+\t\t\t\t(char) TOUPPER ((unsigned char) name[0]),\n+\t\t\t\t&name[1]));\n \t      st->n.sym = sym;\n \t      sym->refs++;\n \t      sym->attr.imported = 1;\n@@ -4315,7 +4291,7 @@ gfc_match_data_decl (void)\n \tgoto ok;\n \n       gfc_find_symbol (current_ts.u.derived->name,\n-\t\t       current_ts.u.derived->ns->parent, 1, &sym);\n+\t\t       current_ts.u.derived->ns, 1, &sym);\n \n       /* Any symbol that we find had better be a type definition\n \t which has its components defined.  */"}, {"sha": "b3321ec6c35e9a8c54ba738a7f04d76ec727aa3e", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd8b9ddea2288c96124367bf66ce060eb1049872/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd8b9ddea2288c96124367bf66ce060eb1049872/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=dd8b9ddea2288c96124367bf66ce060eb1049872", "patch": "@@ -2677,6 +2677,11 @@ gfc_find_sym_tree (const char *name, gfc_namespace *ns, int parent_flag,\n       if (!parent_flag)\n \tbreak;\n \n+      /* Don't escape an interface block.  */\n+      if (ns && !ns->has_import_set\n+          && ns->proc_name && ns->proc_name->attr.if_source == IFSRC_IFBODY)\n+\tbreak;\n+\n       ns = ns->parent;\n     }\n   while (ns != NULL);\n@@ -2835,17 +2840,14 @@ gfc_get_ha_sym_tree (const char *name, gfc_symtree **result)\n       return i;\n     }\n \n-  if (gfc_current_ns->parent != NULL)\n-    {\n-      i = gfc_find_sym_tree (name, gfc_current_ns->parent, 1, &st);\n-      if (i)\n-\treturn i;\n+  i = gfc_find_sym_tree (name, gfc_current_ns, 1, &st);\n+  if (i)\n+    return i;\n \n-      if (st != NULL)\n-\t{\n-\t  *result = st;\n-\t  return 0;\n-\t}\n+  if (st != NULL)\n+    {\n+      *result = st;\n+      return 0;\n     }\n \n   return gfc_get_sym_tree (name, gfc_current_ns, result, false);"}, {"sha": "b35c13282b0003b75194aeb87a9559e2b6d76afc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd8b9ddea2288c96124367bf66ce060eb1049872/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd8b9ddea2288c96124367bf66ce060eb1049872/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dd8b9ddea2288c96124367bf66ce060eb1049872", "patch": "@@ -1,3 +1,13 @@\n+2013-01-28  Tobias Burnus  <burnus@net-b.de>\n+\t    Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/53537\n+\t* gfortran.dg/import2.f90: Adjust undeclared type error messages.\n+\t* gfortran.dg/import8.f90: Likewise.\n+\t* gfortran.dg/interface_derived_type_1.f90: Likewise.\n+\t* gfortran.dg/import10.f90: New test.\n+\t* gfortran.dg/import11.f90: Likewise\n+\n 2013-01-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR testsuite/56053"}, {"sha": "dbe630a48a6d50187a77b20d1653644cbbaa653f", "filename": "gcc/testsuite/gfortran.dg/import10.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd8b9ddea2288c96124367bf66ce060eb1049872/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd8b9ddea2288c96124367bf66ce060eb1049872/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport10.f90?ref=dd8b9ddea2288c96124367bf66ce060eb1049872", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do compile }\n+!\n+! PR fortran/53537\n+! The use of WP in the ODE_DERIVATIVE interface used to be rejected because\n+! the symbol was imported under the original name DP.\n+!\n+! Original test case from Arjen Markus <arjen.markus@deltares.nl>\n+\n+module select_precision\n+    integer, parameter :: dp = kind(1.0)\n+end module select_precision\n+\n+module ode_types\n+    use select_precision, only: wp => dp\n+    implicit none\n+    interface\n+        subroutine ode_derivative(x)\n+            import   :: wp\n+            real(wp) :: x\n+        end subroutine ode_derivative\n+    end interface\n+end module ode_types\n+\n+"}, {"sha": "f2ac514543d2f30c188d097d81d230e92b6ff038", "filename": "gcc/testsuite/gfortran.dg/import11.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd8b9ddea2288c96124367bf66ce060eb1049872/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd8b9ddea2288c96124367bf66ce060eb1049872/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport11.f90?ref=dd8b9ddea2288c96124367bf66ce060eb1049872", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do compile }\n+!\n+! PR fortran/53537\n+! The definition of T1 in the interface used to be rejected because T3\n+! was imported under the original name T1.\n+\n+       MODULE MOD\n+         TYPE T1\n+           SEQUENCE\n+           integer :: j\n+         END TYPE t1\n+       END\n+       PROGRAM MAIN\n+         USE MOD, T3 => T1\n+         INTERFACE SUBR\n+           SUBROUTINE SUBR1(X,y)\n+             IMPORT :: T3\n+             type t1\n+!               sequence\n+!               integer :: i\n+             end type t1\n+             TYPE(T3) X\n+!             TYPE(T1) X\n+           END SUBROUTINE\n+         END INTERFACE SUBR\n+       END PROGRAM MAIN\n+\n+"}, {"sha": "9db21977daaed0dae0025b7726a959a98b151676", "filename": "gcc/testsuite/gfortran.dg/import2.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd8b9ddea2288c96124367bf66ce060eb1049872/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd8b9ddea2288c96124367bf66ce060eb1049872/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport2.f90?ref=dd8b9ddea2288c96124367bf66ce060eb1049872", "patch": "@@ -37,7 +37,7 @@ module testmod\n   interface\n     subroutine other(x,y)\n       import ! { dg-error \"Fortran 2003: IMPORT statement\" }\n-      type(modType) :: y ! { dg-error \"not been declared within the interface\" }\n+      type(modType) :: y ! { dg-error \"is being used before it is defined\" }\n       real(kind)    :: x ! { dg-error \"has not been declared\" }\n     end subroutine\n   end interface\n@@ -56,13 +56,13 @@ program foo\n   interface\n     subroutine bar(x,y)\n       import ! { dg-error \"Fortran 2003: IMPORT statement\" }\n-      type(myType) :: x ! { dg-error \"not been declared within the interface\" }\n+      type(myType) :: x ! { dg-error \"is being used before it is defined\" }\n       integer(dp)  :: y ! { dg-error \"has not been declared\" }\n     end subroutine bar\n     subroutine test(x)\n       import :: myType3 ! { dg-error \"Fortran 2003: IMPORT statement\" }\n       import myType3 ! { dg-error \"Fortran 2003: IMPORT statement\" }\n-      type(myType3) :: x ! { dg-error \"not been declared within the interface\" }\n+      type(myType3) :: x ! { dg-error \"is being used before it is defined\" }\n     end subroutine test\n   end interface\n "}, {"sha": "543b0a1d0fa4191bfe0bb7c0bf97932bf842814f", "filename": "gcc/testsuite/gfortran.dg/import8.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd8b9ddea2288c96124367bf66ce060eb1049872/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd8b9ddea2288c96124367bf66ce060eb1049872/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimport8.f90?ref=dd8b9ddea2288c96124367bf66ce060eb1049872", "patch": "@@ -12,7 +12,7 @@\n abstract interface\n     subroutine generic_desc(self)\n         ! <<< missing IMPORT \n-        class(Connection) :: self ! { dg-error \"has not been declared within the interface\" }\n+        class(Connection) :: self ! { dg-error \"is being used before it is defined\" }\n     end subroutine generic_desc\n end interface\n end"}, {"sha": "efd81fd674c2a9d3a1f0ce00b7e4c8c3e99f170f", "filename": "gcc/testsuite/gfortran.dg/interface_derived_type_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd8b9ddea2288c96124367bf66ce060eb1049872/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_derived_type_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd8b9ddea2288c96124367bf66ce060eb1049872/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_derived_type_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_derived_type_1.f90?ref=dd8b9ddea2288c96124367bf66ce060eb1049872", "patch": "@@ -13,7 +13,7 @@ module test\n   subroutine sim_1(func1,params)\n     interface\n       function func1(fparams)\n-        type(fcnparms) :: fparams ! { dg-error \"not been declared within the interface\" }\n+        type(fcnparms) :: fparams ! { dg-error \"is being used before it is defined\" }\n         real :: func1\n       end function func1\n     end interface"}]}