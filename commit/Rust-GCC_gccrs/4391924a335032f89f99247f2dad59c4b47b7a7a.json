{"sha": "4391924a335032f89f99247f2dad59c4b47b7a7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM5MTkyNGEzMzUwMzJmODlmOTkyNDdmMmRhZDU5YzRiNDdiN2E3YQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2010-07-12T19:02:55Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2010-07-12T19:02:55Z"}, "message": "Makefile.in (target-globals.o): Depend on $(CFGLOOP_H).\n\ngcc/\n\t* Makefile.in (target-globals.o): Depend on $(CFGLOOP_H).\n\t* cfgloop.h (target_cfgloop): New structure.\n\t(default_target_cfgloop): Declare.\n\t(this_target_cfgloop): Declare as a variable or define as a macro.\n\t(target_avail_regs, target_clobbered_regs, target_res_regs)\n\t(target_reg_cost, target_spill_cost): Redefine as macros.\n\t* cfgloopanal.c (default_target_cfgloop): New variable.\n\t(this_target_cfgloop): New conditional variable.\n\t(target_avail_regs, target_clobbered_regs, target_res_regs)\n\t(target_reg_cost, target_spill_cost): Delete.\n\t* target-globals.h (this_target_cfgloop): Declare.\n\t(target_globals): Add a cfgloop field.\n\t(restore_target_globals): Copy the cfgloop field to\n\tthis_target_cfgloop.\n\t* target-globals.c: Include cfgloop.h.\n\t(default_target_globals): Initialize the cfgloop field.\n\t(save_target_globals): Likewise.\n\nFrom-SVN: r162101", "tree": {"sha": "8d8e2175f8a02aff3689db8673741343a8f10fbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d8e2175f8a02aff3689db8673741343a8f10fbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4391924a335032f89f99247f2dad59c4b47b7a7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4391924a335032f89f99247f2dad59c4b47b7a7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4391924a335032f89f99247f2dad59c4b47b7a7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4391924a335032f89f99247f2dad59c4b47b7a7a/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d86796b627350ba83fcdf4e101805ae4edf08a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d86796b627350ba83fcdf4e101805ae4edf08a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d86796b627350ba83fcdf4e101805ae4edf08a6"}], "stats": {"total": 87, "additions": 67, "deletions": 20}, "files": [{"sha": "ece776f4f85bb1cb82aba2e448d648530448c33a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4391924a335032f89f99247f2dad59c4b47b7a7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4391924a335032f89f99247f2dad59c4b47b7a7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4391924a335032f89f99247f2dad59c4b47b7a7a", "patch": "@@ -1,3 +1,23 @@\n+2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* Makefile.in (target-globals.o): Depend on $(CFGLOOP_H).\n+\t* cfgloop.h (target_cfgloop): New structure.\n+\t(default_target_cfgloop): Declare.\n+\t(this_target_cfgloop): Declare as a variable or define as a macro.\n+\t(target_avail_regs, target_clobbered_regs, target_res_regs)\n+\t(target_reg_cost, target_spill_cost): Redefine as macros.\n+\t* cfgloopanal.c (default_target_cfgloop): New variable.\n+\t(this_target_cfgloop): New conditional variable.\n+\t(target_avail_regs, target_clobbered_regs, target_res_regs)\n+\t(target_reg_cost, target_spill_cost): Delete.\n+\t* target-globals.h (this_target_cfgloop): Declare.\n+\t(target_globals): Add a cfgloop field.\n+\t(restore_target_globals): Copy the cfgloop field to\n+\tthis_target_cfgloop.\n+\t* target-globals.c: Include cfgloop.h.\n+\t(default_target_globals): Initialize the cfgloop field.\n+\t(save_target_globals): Likewise.\n+\n 2010-07-12  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* regs.h (target_regs): Add x_direct_load, x_direct_store and"}, {"sha": "748b65397f4401e57642ec6a4cfd0a0a4095014d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4391924a335032f89f99247f2dad59c4b47b7a7a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4391924a335032f89f99247f2dad59c4b47b7a7a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4391924a335032f89f99247f2dad59c4b47b7a7a", "patch": "@@ -3483,7 +3483,7 @@ lower-subreg.o : lower-subreg.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n target-globals.o : target-globals.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) insn-config.h $(MACHMODE_H) $(GGC_H) $(TOPLEV_H) target-globals.h \\\n    $(FLAGS_H) $(REGS_H) $(RTL_H) reload.h expmed.h $(EXPR_H) $(OPTABS_H) \\\n-   $(LIBFUNCS_H)\n+   $(LIBFUNCS_H) $(CFGLOOP_H)\n \n $(out_object_file): $(out_file) $(CONFIG_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h insn-config.h conditions.h \\"}, {"sha": "535e256050d6ffdb93fba6ffcbaf4d05f49fe5fe", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4391924a335032f89f99247f2dad59c4b47b7a7a/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4391924a335032f89f99247f2dad59c4b47b7a7a/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=4391924a335032f89f99247f2dad59c4b47b7a7a", "patch": "@@ -625,12 +625,41 @@ fel_init (loop_iterator *li, loop_p *loop, unsigned flags)\n   }\n \n /* The properties of the target.  */\n+struct target_cfgloop {\n+  /* Number of available registers.  */\n+  unsigned x_target_avail_regs;\n \n-extern unsigned target_avail_regs;\n-extern unsigned target_clobbered_regs;\n-extern unsigned target_res_regs;\n-extern unsigned target_reg_cost [2];\n-extern unsigned target_spill_cost [2];\n+  /* Number of available registers that are call-clobbered.  */\n+  unsigned x_target_clobbered_regs;\n+\n+  /* Number of registers reserved for temporary expressions.  */\n+  unsigned x_target_res_regs;\n+\n+  /* The cost for register when there still is some reserve, but we are\n+     approaching the number of available registers.  */\n+  unsigned x_target_reg_cost[2];\n+\n+  /* The cost for register when we need to spill.  */\n+  unsigned x_target_spill_cost[2];\n+};\n+\n+extern struct target_cfgloop default_target_cfgloop;\n+#if SWITCHABLE_TARGET\n+extern struct target_cfgloop *this_target_cfgloop;\n+#else\n+#define this_target_cfgloop (&default_target_cfgloop)\n+#endif\n+\n+#define target_avail_regs \\\n+  (this_target_cfgloop->x_target_avail_regs)\n+#define target_clobbered_regs \\\n+  (this_target_cfgloop->x_target_clobbered_regs)\n+#define target_res_regs \\\n+  (this_target_cfgloop->x_target_res_regs)\n+#define target_reg_cost \\\n+  (this_target_cfgloop->x_target_reg_cost)\n+#define target_spill_cost \\\n+  (this_target_cfgloop->x_target_spill_cost)\n \n /* Register pressure estimation for induction variable optimizations & loop\n    invariant motion.  */"}, {"sha": "48a44d2a3f0f24d8b70b5a36a7f5962eca4a796e", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4391924a335032f89f99247f2dad59c4b47b7a7a/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4391924a335032f89f99247f2dad59c4b47b7a7a/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=4391924a335032f89f99247f2dad59c4b47b7a7a", "patch": "@@ -32,6 +32,11 @@ along with GCC; see the file COPYING3.  If not see\n #include \"graphds.h\"\n #include \"params.h\"\n \n+struct target_cfgloop default_target_cfgloop;\n+#if SWITCHABLE_TARGET\n+struct target_cfgloop *this_target_cfgloop = &default_target_cfgloop;\n+#endif\n+\n /* Checks whether BB is executed exactly once in each LOOP iteration.  */\n \n bool\n@@ -317,19 +322,6 @@ seq_cost (const_rtx seq, bool speed)\n   return cost;\n }\n \n-/* The properties of the target.  */\n-\n-unsigned target_avail_regs;\t/* Number of available registers.  */\n-unsigned target_clobbered_regs; /* Number of available registers that are\n-\t\t\t\t   call-clobbered.  */\n-unsigned target_res_regs;\t/* Number of registers reserved for temporary\n-\t\t\t\t   expressions.  */\n-unsigned target_reg_cost[2];\t/* The cost for register when there still\n-\t\t\t\t   is some reserve, but we are approaching\n-\t\t\t\t   the number of available registers.  */\n-unsigned target_spill_cost[2];\t/* The cost for register when we need\n-\t\t\t\t   to spill.  */\n-\n /* Initialize the constants for computing set costs.  */\n \n void"}, {"sha": "7a340322240f6275318d0889a0e5568938952a2a", "filename": "gcc/target-globals.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4391924a335032f89f99247f2dad59c4b47b7a7a/gcc%2Ftarget-globals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4391924a335032f89f99247f2dad59c4b47b7a7a/gcc%2Ftarget-globals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.c?ref=4391924a335032f89f99247f2dad59c4b47b7a7a", "patch": "@@ -35,6 +35,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"expr.h\"\n #include \"optabs.h\"\n #include \"libfuncs.h\"\n+#include \"cfgloop.h\"\n \n #if SWITCHABLE_TARGET\n struct target_globals default_target_globals = {\n@@ -45,7 +46,8 @@ struct target_globals default_target_globals = {\n   &default_target_reload,\n   &default_target_expmed,\n   &default_target_optabs,\n-  &default_target_libfuncs\n+  &default_target_libfuncs,\n+  &default_target_cfgloop\n };\n \n struct target_globals *\n@@ -62,6 +64,7 @@ save_target_globals (void)\n   g->expmed = XCNEW (struct target_expmed);\n   g->optabs = XCNEW (struct target_optabs);\n   g->libfuncs = ggc_alloc_cleared_target_libfuncs ();\n+  g->cfgloop = XCNEW (struct target_cfgloop);\n   restore_target_globals (g);\n   target_reinit ();\n   return g;"}, {"sha": "b90f1415ff4e108febcb3ccfc09ca3b2235639e1", "filename": "gcc/target-globals.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4391924a335032f89f99247f2dad59c4b47b7a7a/gcc%2Ftarget-globals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4391924a335032f89f99247f2dad59c4b47b7a7a/gcc%2Ftarget-globals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.h?ref=4391924a335032f89f99247f2dad59c4b47b7a7a", "patch": "@@ -29,6 +29,7 @@ extern struct target_reload *this_target_reload;\n extern struct target_expmed *this_target_expmed;\n extern struct target_optabs *this_target_optabs;\n extern struct target_libfuncs *this_target_libfuncs;\n+extern struct target_cfgloop *this_target_cfgloop;\n \n struct GTY(()) target_globals {\n   struct target_flag_state *GTY((skip)) flag_state;\n@@ -39,6 +40,7 @@ struct GTY(()) target_globals {\n   struct target_expmed *GTY((skip)) expmed;\n   struct target_optabs *GTY((skip)) optabs;\n   struct target_libfuncs *libfuncs;\n+  struct target_cfgloop *GTY((skip)) cfgloop;\n };\n \n extern struct target_globals default_target_globals;\n@@ -56,6 +58,7 @@ restore_target_globals (struct target_globals *g)\n   this_target_expmed = g->expmed;\n   this_target_optabs = g->optabs;\n   this_target_libfuncs = g->libfuncs;\n+  this_target_cfgloop = g->cfgloop;\n }\n #endif\n "}]}