{"sha": "18a6701e5b0d7eecd64751e17cfae5069a12745d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThhNjcwMWU1YjBkN2VlY2Q2NDc1MWUxN2NmYWU1MDY5YTEyNzQ1ZA==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2013-04-16T17:49:14Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2013-04-16T17:49:14Z"}, "message": "re PR target/56948 (PPC V2DI ICE when loading zero into GPRs)\n\n        PR target/56948\n        * config/rs6000/vsx.md (vsx_mov<mode>): Add j->r alternative.\n        (vsx_movti_64bit): Change j->wa to O->wa.  Add n->r alternative.\n        (vsx_movti_32bit): Change j->wa to O->wa.\n\nFrom-SVN: r198007", "tree": {"sha": "15baa72491c10de3e7d2faf41ce08e31334ed20c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15baa72491c10de3e7d2faf41ce08e31334ed20c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18a6701e5b0d7eecd64751e17cfae5069a12745d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18a6701e5b0d7eecd64751e17cfae5069a12745d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18a6701e5b0d7eecd64751e17cfae5069a12745d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18a6701e5b0d7eecd64751e17cfae5069a12745d/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "07c37b2fba70f106809feb253be848d4232252bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07c37b2fba70f106809feb253be848d4232252bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07c37b2fba70f106809feb253be848d4232252bb"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "7cb659c9cc60f52ed44c6d6280c439bb0c228333", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18a6701e5b0d7eecd64751e17cfae5069a12745d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18a6701e5b0d7eecd64751e17cfae5069a12745d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=18a6701e5b0d7eecd64751e17cfae5069a12745d", "patch": "@@ -1,3 +1,10 @@\n+2013-04-16  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\tPR target/56948\n+\t* config/rs6000/vsx.md (vsx_mov<mode>): Add j->r alternative.\n+\t(vsx_movti_64bit): Change j->wa to O->wa.  Add n->r alternative.\n+\t(vsx_movti_32bit): Change j->wa to O->wa.\n+\n 2013-04-16  Richard Biener  <rguenther@suse.de>\n \n \tPR rtl-optimization/56921"}, {"sha": "4adf6e5ac558bdd209c87420917dabc43f59a04e", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18a6701e5b0d7eecd64751e17cfae5069a12745d/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18a6701e5b0d7eecd64751e17cfae5069a12745d/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=18a6701e5b0d7eecd64751e17cfae5069a12745d", "patch": "@@ -207,8 +207,8 @@\n \n ;; VSX moves\n (define_insn \"*vsx_mov<mode>\"\n-  [(set (match_operand:VSX_M 0 \"nonimmediate_operand\" \"=Z,<VSr>,<VSr>,?Z,?wa,?wa,*Y,*r,*r,<VSr>,?wa,v,wZ,v\")\n-\t(match_operand:VSX_M 1 \"input_operand\" \"<VSr>,Z,<VSr>,wa,Z,wa,r,Y,r,j,j,W,v,wZ\"))]\n+  [(set (match_operand:VSX_M 0 \"nonimmediate_operand\" \"=Z,<VSr>,<VSr>,?Z,?wa,?wa,*Y,*r,*r,<VSr>,?wa,*r,v,wZ,v\")\n+\t(match_operand:VSX_M 1 \"input_operand\" \"<VSr>,Z,<VSr>,wa,Z,wa,r,Y,r,j,j,j,W,v,wZ\"))]\n   \"VECTOR_MEM_VSX_P (<MODE>mode)\n    && (register_operand (operands[0], <MODE>mode) \n        || register_operand (operands[1], <MODE>mode))\"\n@@ -238,23 +238,24 @@\n     case 6:\n     case 7:\n     case 8:\n+    case 11:\n       return \"#\";\n \n     case 9:\n     case 10:\n       return \"xxlxor %x0,%x0,%x0\";\n \n-    case 11:\n+    case 12:\n       return output_vec_const_move (operands);\n \n-    case 12:\n+    case 13:\n       gcc_assert (MEM_P (operands[0])\n \t\t  && GET_CODE (XEXP (operands[0], 0)) != PRE_INC\n \t\t  && GET_CODE (XEXP (operands[0], 0)) != PRE_DEC\n \t\t  && GET_CODE (XEXP (operands[0], 0)) != PRE_MODIFY);\n       return \"stvx %1,%y0\";\n \n-    case 13:\n+    case 14:\n       gcc_assert (MEM_P (operands[0])\n \t\t  && GET_CODE (XEXP (operands[0], 0)) != PRE_INC\n \t\t  && GET_CODE (XEXP (operands[0], 0)) != PRE_DEC\n@@ -265,14 +266,14 @@\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\" \"vecstore,vecload,vecsimple,vecstore,vecload,vecsimple,*,*,*,vecsimple,vecsimple,*,vecstore,vecload\")])\n+  [(set_attr \"type\" \"vecstore,vecload,vecsimple,vecstore,vecload,vecsimple,*,*,*,vecsimple,vecsimple,*,*,vecstore,vecload\")])\n \n ;; Unlike other VSX moves, allow the GPRs even for reloading, since a normal\n ;; use of TImode is for unions.  However for plain data movement, slightly\n ;; favor the vector loads\n (define_insn \"*vsx_movti_64bit\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=Z,wa,wa,wa,v, v,wZ,?Y,?r,?r\")\n-\t(match_operand:TI 1 \"input_operand\"        \"wa, Z,wa, j,W,wZ, v, r, Y, r\"))]\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=Z,wa,wa,wa,v, v,wZ,?Y,?r,?r,?r\")\n+\t(match_operand:TI 1 \"input_operand\"        \"wa, Z,wa, O,W,wZ, v, r, Y, r, n\"))]\n   \"TARGET_POWERPC64 && VECTOR_MEM_VSX_P (TImode)\n    && (register_operand (operands[0], TImode) \n        || register_operand (operands[1], TImode))\"\n@@ -303,18 +304,19 @@\n     case 7:\n     case 8:\n     case 9:\n+    case 10:\n       return \"#\";\n \n     default:\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"type\" \"vecstore,vecload,vecsimple,vecsimple,vecsimple,vecstore,vecload,*,*,*\")\n-   (set_attr \"length\" \"     4,      4,        4,       4,         8,       4,      4,8,8,8\")])\n+  [(set_attr \"type\" \"vecstore,vecload,vecsimple,vecsimple,vecsimple,vecstore,vecload,*,*,*,*\")\n+   (set_attr \"length\" \"     4,      4,        4,       4,         8,       4,      4,8,8,8,8\")])\n \n (define_insn \"*vsx_movti_32bit\"\n   [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=Z,wa,wa,wa,v, v,wZ,Q,Y,????r,????r,????r,r\")\n-\t(match_operand:TI 1 \"input_operand\"        \"wa, Z,wa, j,W,wZ, v,r,r,    Q,    Y,    r,n\"))]\n+\t(match_operand:TI 1 \"input_operand\"        \"wa, Z,wa, O,W,wZ, v,r,r,    Q,    Y,    r,n\"))]\n   \"! TARGET_POWERPC64 && VECTOR_MEM_VSX_P (TImode)\n    && (register_operand (operands[0], TImode)\n        || register_operand (operands[1], TImode))\""}]}