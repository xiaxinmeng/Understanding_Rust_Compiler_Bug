{"sha": "c0daa902837561b1c114bdee9e8cee5f8797e610", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBkYWE5MDI4Mzc1NjFiMWMxMTRiZGVlOWU4Y2VlNWY4Nzk3ZTYxMA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-03-02T13:46:06Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-03-02T13:46:06Z"}, "message": "configure.in: Added check for memory mapping of files.\n\n2003-03-02  Michael Koch  <konqueror@gmx.de>\n\n\t* configure.in: Added check for memory mapping of files.\n\t* configure: Regenerated.\n\t* config.h.in: Regenerated.\n\nFrom-SVN: r63661", "tree": {"sha": "d7d762ee236539f87e7e001bcce4be152772fd9b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d7d762ee236539f87e7e001bcce4be152772fd9b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0daa902837561b1c114bdee9e8cee5f8797e610", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0daa902837561b1c114bdee9e8cee5f8797e610", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0daa902837561b1c114bdee9e8cee5f8797e610", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0daa902837561b1c114bdee9e8cee5f8797e610/comments", "author": null, "committer": null, "parents": [{"sha": "23cdb4657f2e5695011a12cd407f56b3dc937e14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23cdb4657f2e5695011a12cd407f56b3dc937e14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23cdb4657f2e5695011a12cd407f56b3dc937e14"}], "stats": {"total": 279, "additions": 279, "deletions": 0}, "files": [{"sha": "f4aca75d329eb419069817a50ae7cf499051a331", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0daa902837561b1c114bdee9e8cee5f8797e610/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0daa902837561b1c114bdee9e8cee5f8797e610/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=c0daa902837561b1c114bdee9e8cee5f8797e610", "patch": "@@ -1,3 +1,9 @@\n+2003-03-02  Michael Koch  <konqueror@gmx.de>\n+\n+\t* configure.in: Added check for memory mapping of files.\n+\t* configure: Regenerated.\n+\t* config.h.in: Regenerated.\n+\n 2003-03-01  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* posix-threads.cc: Include <unistd.h> if HAVE_UNISTD_H is defined."}, {"sha": "af3a1b33e44e46941818ffc925680b5260dcde0b", "filename": "libjava/configure", "status": "modified", "additions": 266, "deletions": 0, "changes": 266, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0daa902837561b1c114bdee9e8cee5f8797e610/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0daa902837561b1c114bdee9e8cee5f8797e610/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=c0daa902837561b1c114bdee9e8cee5f8797e610", "patch": "@@ -8274,6 +8274,272 @@ EOF\n \n fi\n \n+for ac_hdr in unistd.h\n+do\n+ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n+echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n+echo \"configure:8268: checking for $ac_hdr\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  cat > conftest.$ac_ext <<EOF\n+#line 8273 \"configure\"\n+#include \"confdefs.h\"\n+#include <$ac_hdr>\n+EOF\n+ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n+{ (eval echo configure:8278: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n+if test -z \"$ac_err\"; then\n+  rm -rf conftest*\n+  eval \"ac_cv_header_$ac_safe=yes\"\n+else\n+  echo \"$ac_err\" >&5\n+  echo \"configure: failed program was:\" >&5\n+  cat conftest.$ac_ext >&5\n+  rm -rf conftest*\n+  eval \"ac_cv_header_$ac_safe=no\"\n+fi\n+rm -f conftest*\n+fi\n+if eval \"test \\\"`echo '$ac_cv_header_'$ac_safe`\\\" = yes\"; then\n+  echo \"$ac_t\"\"yes\" 1>&6\n+    ac_tr_hdr=HAVE_`echo $ac_hdr | sed 'y%abcdefghijklmnopqrstuvwxyz./-%ABCDEFGHIJKLMNOPQRSTUVWXYZ___%'`\n+  cat >> confdefs.h <<EOF\n+#define $ac_tr_hdr 1\n+EOF\n+ \n+else\n+  echo \"$ac_t\"\"no\" 1>&6\n+fi\n+done\n+\n+for ac_func in getpagesize\n+do\n+echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n+echo \"configure:8307: checking for $ac_func\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  cat > conftest.$ac_ext <<EOF\n+#line 8312 \"configure\"\n+#include \"confdefs.h\"\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char $ac_func(); below.  */\n+#include <assert.h>\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+/* We use char because int might match the return type of a gcc2\n+    builtin and then its argument prototype would still apply.  */\n+char $ac_func();\n+\n+int main() {\n+\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined (__stub_$ac_func) || defined (__stub___$ac_func)\n+choke me\n+#else\n+$ac_func();\n+#endif\n+\n+; return 0; }\n+EOF\n+if { (eval echo configure:8335: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+  rm -rf conftest*\n+  eval \"ac_cv_func_$ac_func=yes\"\n+else\n+  echo \"configure: failed program was:\" >&5\n+  cat conftest.$ac_ext >&5\n+  rm -rf conftest*\n+  eval \"ac_cv_func_$ac_func=no\"\n+fi\n+rm -f conftest*\n+fi\n+\n+if eval \"test \\\"`echo '$ac_cv_func_'$ac_func`\\\" = yes\"; then\n+  echo \"$ac_t\"\"yes\" 1>&6\n+    ac_tr_func=HAVE_`echo $ac_func | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`\n+  cat >> confdefs.h <<EOF\n+#define $ac_tr_func 1\n+EOF\n+ \n+else\n+  echo \"$ac_t\"\"no\" 1>&6\n+fi\n+done\n+\n+echo $ac_n \"checking for working mmap\"\"... $ac_c\" 1>&6\n+echo \"configure:8360: checking for working mmap\" >&5\n+if eval \"test \\\"`echo '$''{'ac_cv_func_mmap_fixed_mapped'+set}'`\\\" = set\"; then\n+  echo $ac_n \"(cached) $ac_c\" 1>&6\n+else\n+  if test \"$cross_compiling\" = yes; then\n+  ac_cv_func_mmap_fixed_mapped=no\n+else\n+  cat > conftest.$ac_ext <<EOF\n+#line 8368 \"configure\"\n+#include \"confdefs.h\"\n+\n+/* Thanks to Mike Haertel and Jim Avera for this test.\n+   Here is a matrix of mmap possibilities:\n+\tmmap private not fixed\n+\tmmap private fixed at somewhere currently unmapped\n+\tmmap private fixed at somewhere already mapped\n+\tmmap shared not fixed\n+\tmmap shared fixed at somewhere currently unmapped\n+\tmmap shared fixed at somewhere already mapped\n+   For private mappings, we should verify that changes cannot be read()\n+   back from the file, nor mmap's back from the file at a different\n+   address.  (There have been systems where private was not correctly\n+   implemented like the infamous i386 svr4.0, and systems where the\n+   VM page cache was not coherent with the filesystem buffer cache\n+   like early versions of FreeBSD and possibly contemporary NetBSD.)\n+   For shared mappings, we should conversely verify that changes get\n+   propogated back to all the places they're supposed to be.\n+\n+   Grep wants private fixed already mapped.\n+   The main things grep needs to know about mmap are:\n+   * does it exist and is it safe to write into the mmap'd area\n+   * how to use it (BSD variants)  */\n+#include <sys/types.h>\n+#include <fcntl.h>\n+#include <sys/mman.h>\n+\n+/* This mess was copied from the GNU getpagesize.h.  */\n+#ifndef HAVE_GETPAGESIZE\n+# ifdef HAVE_UNISTD_H\n+#  include <unistd.h>\n+# endif\n+\n+/* Assume that all systems that can run configure have sys/param.h.  */\n+# ifndef HAVE_SYS_PARAM_H\n+#  define HAVE_SYS_PARAM_H 1\n+# endif\n+\n+# ifdef _SC_PAGESIZE\n+#  define getpagesize() sysconf(_SC_PAGESIZE)\n+# else /* no _SC_PAGESIZE */\n+#  ifdef HAVE_SYS_PARAM_H\n+#   include <sys/param.h>\n+#   ifdef EXEC_PAGESIZE\n+#    define getpagesize() EXEC_PAGESIZE\n+#   else /* no EXEC_PAGESIZE */\n+#    ifdef NBPG\n+#     define getpagesize() NBPG * CLSIZE\n+#     ifndef CLSIZE\n+#      define CLSIZE 1\n+#     endif /* no CLSIZE */\n+#    else /* no NBPG */\n+#     ifdef NBPC\n+#      define getpagesize() NBPC\n+#     else /* no NBPC */\n+#      ifdef PAGESIZE\n+#       define getpagesize() PAGESIZE\n+#      endif /* PAGESIZE */\n+#     endif /* no NBPC */\n+#    endif /* no NBPG */\n+#   endif /* no EXEC_PAGESIZE */\n+#  else /* no HAVE_SYS_PARAM_H */\n+#   define getpagesize() 8192\t/* punt totally */\n+#  endif /* no HAVE_SYS_PARAM_H */\n+# endif /* no _SC_PAGESIZE */\n+\n+#endif /* no HAVE_GETPAGESIZE */\n+\n+#ifdef __cplusplus\n+extern \"C\" { void *malloc(unsigned); }\n+#else\n+char *malloc();\n+#endif\n+\n+int\n+main()\n+{\n+\tchar *data, *data2, *data3;\n+\tint i, pagesize;\n+\tint fd;\n+\n+\tpagesize = getpagesize();\n+\n+\t/*\n+\t * First, make a file with some known garbage in it.\n+\t */\n+\tdata = malloc(pagesize);\n+\tif (!data)\n+\t\texit(1);\n+\tfor (i = 0; i < pagesize; ++i)\n+\t\t*(data + i) = rand();\n+\tumask(0);\n+\tfd = creat(\"conftestmmap\", 0600);\n+\tif (fd < 0)\n+\t\texit(1);\n+\tif (write(fd, data, pagesize) != pagesize)\n+\t\texit(1);\n+\tclose(fd);\n+\n+\t/*\n+\t * Next, try to mmap the file at a fixed address which\n+\t * already has something else allocated at it.  If we can,\n+\t * also make sure that we see the same garbage.\n+\t */\n+\tfd = open(\"conftestmmap\", O_RDWR);\n+\tif (fd < 0)\n+\t\texit(1);\n+\tdata2 = malloc(2 * pagesize);\n+\tif (!data2)\n+\t\texit(1);\n+\tdata2 += (pagesize - ((int) data2 & (pagesize - 1))) & (pagesize - 1);\n+\tif (data2 != mmap(data2, pagesize, PROT_READ | PROT_WRITE,\n+\t    MAP_PRIVATE | MAP_FIXED, fd, 0L))\n+\t\texit(1);\n+\tfor (i = 0; i < pagesize; ++i)\n+\t\tif (*(data + i) != *(data2 + i))\n+\t\t\texit(1);\n+\n+\t/*\n+\t * Finally, make sure that changes to the mapped area\n+\t * do not percolate back to the file as seen by read().\n+\t * (This is a bug on some variants of i386 svr4.0.)\n+\t */\n+\tfor (i = 0; i < pagesize; ++i)\n+\t\t*(data2 + i) = *(data2 + i) + 1;\n+\tdata3 = malloc(pagesize);\n+\tif (!data3)\n+\t\texit(1);\n+\tif (read(fd, data3, pagesize) != pagesize)\n+\t\texit(1);\n+\tfor (i = 0; i < pagesize; ++i)\n+\t\tif (*(data + i) != *(data3 + i))\n+\t\t\texit(1);\n+\tclose(fd);\n+\tunlink(\"conftestmmap\");\n+\texit(0);\n+}\n+\n+EOF\n+if { (eval echo configure:8508: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+then\n+  ac_cv_func_mmap_fixed_mapped=yes\n+else\n+  echo \"configure: failed program was:\" >&5\n+  cat conftest.$ac_ext >&5\n+  rm -fr conftest*\n+  ac_cv_func_mmap_fixed_mapped=no\n+fi\n+rm -fr conftest*\n+fi\n+\n+fi\n+\n+echo \"$ac_t\"\"$ac_cv_func_mmap_fixed_mapped\" 1>&6\n+if test $ac_cv_func_mmap_fixed_mapped = yes; then\n+  cat >> confdefs.h <<\\EOF\n+#define HAVE_MMAP 1\n+EOF\n+\n+fi\n+\n \n for ac_prog in perl\n do"}, {"sha": "5093966c2d14f760da30b3388c94191ab39507fc", "filename": "libjava/configure.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0daa902837561b1c114bdee9e8cee5f8797e610/libjava%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0daa902837561b1c114bdee9e8cee5f8797e610/libjava%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.in?ref=c0daa902837561b1c114bdee9e8cee5f8797e610", "patch": "@@ -970,6 +970,7 @@ AC_TRY_COMPILE([#include <time.h>], [struct tm tim; tim.tm_gmtoff = 0;],\n           [AC_MSG_RESULT(no)])])])\n \n AC_FUNC_ALLOCA\n+AC_FUNC_MMAP\n \n AC_CHECK_PROGS(PERL, perl, false)\n "}, {"sha": "c6b376867f0a92ac31e30d06a6d9935bcf764adf", "filename": "libjava/include/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0daa902837561b1c114bdee9e8cee5f8797e610/libjava%2Finclude%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0daa902837561b1c114bdee9e8cee5f8797e610/libjava%2Finclude%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fconfig.h.in?ref=c0daa902837561b1c114bdee9e8cee5f8797e610", "patch": "@@ -13,6 +13,9 @@\n /* Define if you have <alloca.h> and it should be used (not on Ultrix).  */\n #undef HAVE_ALLOCA_H\n \n+/* Define if you have a working `mmap' system call.  */\n+#undef HAVE_MMAP\n+\n /* Define if you have <sys/wait.h> that is POSIX.1 compatible.  */\n #undef HAVE_SYS_WAIT_H\n \n@@ -217,6 +220,9 @@\n /* Define if you have the gethostname function.  */\n #undef HAVE_GETHOSTNAME\n \n+/* Define if you have the getpagesize function.  */\n+#undef HAVE_GETPAGESIZE\n+\n /* Define if you have the getpwuid_r function.  */\n #undef HAVE_GETPWUID_R\n "}]}