{"sha": "1c2b53ce8bbf5bbe1ddb13bb6005f432726518ae", "node_id": "C_kwDOANBUbNoAKDFjMmI1M2NlOGJiZjViYmUxZGRiMTNiYjYwMDVmNDMyNzI2NTE4YWU", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-10-27T04:37:01Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-10-27T18:37:12Z"}, "message": "Use simple_dce_from_worklist with match_simplify_replacement.\n\nThis is a simple patch to do some DCE after a successful\nmatch and simplify replacement in PHI-OPT. match and simplify\nlikes to generate some extra statements which should be cleaned\nup.\n\nOK? Bootstrapped and tested on x86_64-linux with no regressions.\n\nThanks,\nAndrew Pinski\n\ngcc/ChangeLog:\n\n\t* tree-ssa-phiopt.cc: Include tree-ssa-dce.h\n\t(replace_phi_edge_with_variable):\n\tNew argument, dce_ssa_names. Call simple_dce_from_worklist.\n\t(match_simplify_replacement): If we inserted a sequence,\n\tmark the lhs of the new sequence to be possible dce.\n\tAlways move the statement and mark the lhs (if it is a name)\n\tas possible to remove.", "tree": {"sha": "fc2510ab303f796544e3f2de3f61fb77afaea017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc2510ab303f796544e3f2de3f61fb77afaea017"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c2b53ce8bbf5bbe1ddb13bb6005f432726518ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c2b53ce8bbf5bbe1ddb13bb6005f432726518ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c2b53ce8bbf5bbe1ddb13bb6005f432726518ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c2b53ce8bbf5bbe1ddb13bb6005f432726518ae/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a33d623d2d3a78f5ef6f9e854946303e063eef63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a33d623d2d3a78f5ef6f9e854946303e063eef63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a33d623d2d3a78f5ef6f9e854946303e063eef63"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "996700baaf37efe223d9a289c931ddcf06bc1b25", "filename": "gcc/tree-ssa-phiopt.cc", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c2b53ce8bbf5bbe1ddb13bb6005f432726518ae/gcc%2Ftree-ssa-phiopt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c2b53ce8bbf5bbe1ddb13bb6005f432726518ae/gcc%2Ftree-ssa-phiopt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.cc?ref=1c2b53ce8bbf5bbe1ddb13bb6005f432726518ae", "patch": "@@ -53,6 +53,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple-match.h\"\n #include \"dbgcnt.h\"\n #include \"tree-ssa-propagate.h\"\n+#include \"tree-ssa-dce.h\"\n \n static unsigned int tree_ssa_phiopt_worker (bool, bool, bool);\n static bool two_value_replacement (basic_block, basic_block, edge, gphi *,\n@@ -74,7 +75,6 @@ static bool cond_store_replacement (basic_block, basic_block, edge, edge,\n \t\t\t\t    hash_set<tree> *);\n static bool cond_if_else_store_replacement (basic_block, basic_block, basic_block);\n static hash_set<tree> * get_non_trapping ();\n-static void replace_phi_edge_with_variable (basic_block, edge, gphi *, tree);\n static void hoist_adjacent_loads (basic_block, basic_block,\n \t\t\t\t  basic_block, basic_block);\n static bool gate_hoist_loads (void);\n@@ -402,7 +402,8 @@ tree_ssa_phiopt_worker (bool do_store_elim, bool do_hoist_loads, bool early_p)\n \n static void\n replace_phi_edge_with_variable (basic_block cond_block,\n-\t\t\t\tedge e, gphi *phi, tree new_tree)\n+\t\t\t\tedge e, gphi *phi, tree new_tree,\n+\t\t\t\tbitmap dce_ssa_names = auto_bitmap())\n {\n   basic_block bb = gimple_bb (phi);\n   gimple_stmt_iterator gsi;\n@@ -477,6 +478,8 @@ replace_phi_edge_with_variable (basic_block cond_block,\n \tgimple_cond_make_true (cond);\n     }\n \n+  simple_dce_from_worklist (dce_ssa_names);\n+\n   statistics_counter_event (cfun, \"Replace PHI with variable\", 1);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n@@ -986,6 +989,7 @@ match_simplify_replacement (basic_block cond_bb, basic_block middle_bb,\n   gimple_seq seq = NULL;\n   tree result;\n   gimple *stmt_to_move = NULL;\n+  auto_bitmap inserted_exprs;\n \n   /* Special case A ? B : B as this will always simplify to B. */\n   if (operand_equal_for_phi_arg_p (arg0, arg1))\n@@ -1060,27 +1064,40 @@ match_simplify_replacement (basic_block cond_bb, basic_block middle_bb,\n   gsi = gsi_last_bb (cond_bb);\n   /* Insert the sequence generated from gimple_simplify_phiopt.  */\n   if (seq)\n+    {\n+      // Mark the lhs of the new statements maybe for dce\n+      gimple_stmt_iterator gsi1 = gsi_start (seq);\n+      for (; !gsi_end_p (gsi1); gsi_next (&gsi1))\n+\t{\n+\t  gimple *stmt = gsi_stmt (gsi1);\n+\t  tree name = gimple_get_lhs (stmt);\n+\t  if (name && TREE_CODE (name) == SSA_NAME)\n+\t    bitmap_set_bit (inserted_exprs, SSA_NAME_VERSION (name));\n+\t}\n     gsi_insert_seq_before (&gsi, seq, GSI_CONTINUE_LINKING);\n+  }\n \n-  /* If there was a statement to move and the result of the statement\n-     is going to be used, move it to right before the original\n-     conditional.  */\n-  if (stmt_to_move\n-      && (gimple_assign_lhs (stmt_to_move) == result\n-\t  || !has_single_use (gimple_assign_lhs (stmt_to_move))))\n+  /* If there was a statement to move, move it to right before\n+     the original conditional.  */\n+  if (stmt_to_move)\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"statement un-sinked:\\n\");\n \t  print_gimple_stmt (dump_file, stmt_to_move, 0,\n \t\t\t   TDF_VOPS|TDF_MEMSYMS);\n \t}\n+\n+      tree name = gimple_get_lhs (stmt_to_move);\n+      // Mark the name to be renamed if there is one.\n+      if (name && TREE_CODE (name) == SSA_NAME)\n+\tbitmap_set_bit (inserted_exprs, SSA_NAME_VERSION (name));\n       gimple_stmt_iterator gsi1 = gsi_for_stmt (stmt_to_move);\n       gsi_move_before (&gsi1, &gsi);\n       reset_flow_sensitive_info (gimple_assign_lhs (stmt_to_move));\n     }\n \n-  replace_phi_edge_with_variable (cond_bb, e1, phi, result);\n+  replace_phi_edge_with_variable (cond_bb, e1, phi, result, inserted_exprs);\n \n   /* Add Statistic here even though replace_phi_edge_with_variable already\n      does it as we want to be able to count when match-simplify happens vs"}]}