{"sha": "a16ee37946f575365bb39d238863422465902054", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE2ZWUzNzk0NmY1NzUzNjViYjM5ZDIzODg2MzQyMjQ2NTkwMjA1NA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2014-09-25T06:07:15Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-09-25T06:07:15Z"}, "message": "check.c (check_co_collective): Renamed from\n\n2014-09-25  Tobias Burnus  <burnus@net-b.de>\n\ngcc/fortran\n        * check.c (check_co_collective): Renamed from\n        * check_co_minmaxsum,\n        handle co_reduce.\n        (gfc_check_co_minmax, gfc_check_co_sum): Update call.\n        (gfc_check_co_broadcast, gfc_check_co_reduce): New.\n        * gfortran.h (gfc_isym_id): Add GFC_ISYM_CO_BROADCAST and\n        GFC_ISYM_CO_REDUCE.\n        * intrinsic.c (add_subroutines): Add co_reduce and co_broadcast.\n        * intrinsic.h (gfc_check_co_broadcast, gfc_check_co_reduce): Add\n        proto types.\n        * intrinsic.texi (CO_BROADCAST): Add.\n        * trans.h (gfor_fndecl_co_broadcast): New.\n        * trans-decl.c (gfor_fndecl_co_broadcast): Ditto.\n        (gfc_build_builtin_function_decls): Add decl for it,\n        * trans-intrinsic.c (conv_co_collective): Renamed from\n        conv_co_minmaxsum. Handle co_reduce.\n        (gfc_conv_intrinsic_subroutine): Handle co_reduce.\n\ngcc/testsuite/\n        * gfortran.dg/coarray/collectives_3.f90: New.\n        * gfortran.dg/coarray_collectives_9.f90: New.\n        * gfortran.dg/coarray_collectives_10.f90: New.\n        * gfortran.dg/coarray_collectives_11.f90: New.\n        * gfortran.dg/coarray_collectives_12.f90: New.\n\nlibgfortran/\n        * caf/libcaf.h (_gfortran_caf_co_broadcast): New prototype.\n        * caf/single.c (_gfortran_caf_co_broadcast): New.\n\nFrom-SVN: r215579", "tree": {"sha": "ea6982429800a36515244a6e806f388dff9ccc3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea6982429800a36515244a6e806f388dff9ccc3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a16ee37946f575365bb39d238863422465902054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a16ee37946f575365bb39d238863422465902054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a16ee37946f575365bb39d238863422465902054", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a16ee37946f575365bb39d238863422465902054/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2bde8cac3724cd02c8114275f5c4688f25558859", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bde8cac3724cd02c8114275f5c4688f25558859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bde8cac3724cd02c8114275f5c4688f25558859"}], "stats": {"total": 515, "additions": 479, "deletions": 36}, "files": [{"sha": "8a781ad46b08c3cab4037c9f4e7b6928829a58b5", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16ee37946f575365bb39d238863422465902054/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16ee37946f575365bb39d238863422465902054/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a16ee37946f575365bb39d238863422465902054", "patch": "@@ -1,3 +1,22 @@\n+2014-09-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* check.c (check_co_collective): Renamed from check_co_minmaxsum,\n+\thandle co_reduce.\n+\t(gfc_check_co_minmax, gfc_check_co_sum): Update call.\n+\t(gfc_check_co_broadcast, gfc_check_co_reduce): New.\n+\t* gfortran.h (gfc_isym_id): Add GFC_ISYM_CO_BROADCAST and\n+\tGFC_ISYM_CO_REDUCE.\n+\t* intrinsic.c (add_subroutines): Add co_reduce and co_broadcast.\n+\t* intrinsic.h (gfc_check_co_broadcast, gfc_check_co_reduce): Add\n+\tproto types.\n+\t* intrinsic.texi (CO_BROADCAST): Add.\n+\t* trans.h (gfor_fndecl_co_broadcast): New.\n+\t* trans-decl.c (gfor_fndecl_co_broadcast): Ditto.\n+\t(gfc_build_builtin_function_decls): Add decl for it,\n+\t* trans-intrinsic.c (conv_co_collective): Renamed from\n+\tconv_co_minmaxsum. Handle co_reduce.\n+\t(gfc_conv_intrinsic_subroutine): Handle co_reduce.\n+\n 2014-09-23  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/63331"}, {"sha": "0a08c732790d44c0146ddbd3f615c4e781743626", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 69, "deletions": 13, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16ee37946f575365bb39d238863422465902054/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16ee37946f575365bb39d238863422465902054/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=a16ee37946f575365bb39d238863422465902054", "patch": "@@ -1414,8 +1414,8 @@ gfc_check_cmplx (gfc_expr *x, gfc_expr *y, gfc_expr *kind)\n \n \n static bool\n-check_co_minmaxsum (gfc_expr *a, gfc_expr *result_image, gfc_expr *stat,\n-\t\t    gfc_expr *errmsg)\n+check_co_collective (gfc_expr *a, gfc_expr *image_idx, gfc_expr *stat,\n+\t\t    gfc_expr *errmsg, bool co_reduce)\n {\n   if (!variable_check (a, 0, false))\n     return false;\n@@ -1424,6 +1424,7 @@ check_co_minmaxsum (gfc_expr *a, gfc_expr *result_image, gfc_expr *stat,\n \t\t\t\t \"INTENT(INOUT)\"))\n     return false;\n \n+  /* Fortran 2008, 12.5.2.4, paragraph 18.  */\n   if (gfc_has_vector_subscript (a))\n     {\n       gfc_error (\"Argument 'A' with INTENT(INOUT) at %L of the intrinsic \"\n@@ -1432,21 +1433,21 @@ check_co_minmaxsum (gfc_expr *a, gfc_expr *result_image, gfc_expr *stat,\n       return false;\n     }\n \n-  if (result_image != NULL)\n+  if (image_idx != NULL)\n     {\n-      if (!type_check (result_image, 1, BT_INTEGER))\n+      if (!type_check (image_idx, co_reduce ? 2 : 1, BT_INTEGER))\n \treturn false;\n-      if (!scalar_check (result_image, 1))\n+      if (!scalar_check (image_idx, co_reduce ? 2 : 1))\n \treturn false;\n     }\n \n   if (stat != NULL)\n     {\n-      if (!type_check (stat, 2, BT_INTEGER))\n+      if (!type_check (stat, co_reduce ? 3 : 2, BT_INTEGER))\n \treturn false;\n-      if (!scalar_check (stat, 2))\n+      if (!scalar_check (stat, co_reduce ? 3 : 2))\n \treturn false;\n-      if (!variable_check (stat, 2, false))\n+      if (!variable_check (stat, co_reduce ? 3 : 2, false))\n \treturn false;\n       if (stat->ts.kind != 4)\n \t{\n@@ -1458,11 +1459,11 @@ check_co_minmaxsum (gfc_expr *a, gfc_expr *result_image, gfc_expr *stat,\n \n   if (errmsg != NULL)\n     {\n-      if (!type_check (errmsg, 3, BT_CHARACTER))\n+      if (!type_check (errmsg, co_reduce ? 4 : 3, BT_CHARACTER))\n \treturn false;\n-      if (!scalar_check (errmsg, 3))\n+      if (!scalar_check (errmsg, co_reduce ? 4 : 3))\n \treturn false;\n-      if (!variable_check (errmsg, 3, false))\n+      if (!variable_check (errmsg, co_reduce ? 4 : 3, false))\n \treturn false;\n       if (errmsg->ts.kind != 1)\n \t{\n@@ -1483,6 +1484,61 @@ check_co_minmaxsum (gfc_expr *a, gfc_expr *result_image, gfc_expr *stat,\n }\n \n \n+bool\n+gfc_check_co_broadcast (gfc_expr *a, gfc_expr *source_image, gfc_expr *stat,\n+\t\t\tgfc_expr *errmsg)\n+{\n+  if (a->ts.type == BT_CLASS || gfc_expr_attr (a).alloc_comp)\n+    {\n+       gfc_error (\"Support for the A argument at %L which is polymorphic A \"\n+                  \"argument or has allocatable components is not yet \"\n+\t\t  \"implemented\", &a->where);\n+       return false;\n+    }\n+  return check_co_collective (a, source_image, stat, errmsg, false);\n+}\n+\n+\n+bool\n+gfc_check_co_reduce (gfc_expr *a, gfc_expr *op, gfc_expr *result_image,\n+\t\t     gfc_expr *stat, gfc_expr *errmsg)\n+{\n+  symbol_attribute attr;\n+\n+  if (a->ts.type == BT_CLASS)\n+    {\n+       gfc_error (\"The A argument at %L of CO_REDUCE shall not be polymorphic\",\n+\t\t  &a->where);\n+       return false;\n+    }\n+\n+  if (gfc_expr_attr (a).alloc_comp)\n+    {\n+       gfc_error (\"Support for the A argument at %L with allocatable components\"\n+                  \" is not yet implemented\", &a->where);\n+       return false;\n+    }\n+\n+  attr = gfc_expr_attr (op);\n+  if (!attr.pure || !attr.function)\n+    {\n+       gfc_error (\"OPERATOR argument at %L must be a PURE function\",\n+\t\t  &op->where);\n+       return false;\n+    }\n+\n+  if (!check_co_collective (a, result_image, stat, errmsg, true))\n+    return false;\n+\n+  /* FIXME: After J3/WG5 has decided what they actually exactly want, more\n+     checks such as same-argument checks have to be added, implemented and\n+     intrinsic.texi upated.  */\n+\n+  gfc_error(\"CO_REDUCE at %L is not yet implemented\", &a->where);\n+  return false;\n+}\n+\n+\n bool\n gfc_check_co_minmax (gfc_expr *a, gfc_expr *result_image, gfc_expr *stat,\n \t\t     gfc_expr *errmsg)\n@@ -1496,7 +1552,7 @@ gfc_check_co_minmax (gfc_expr *a, gfc_expr *result_image, gfc_expr *stat,\n \t\t  &a->where);\n        return false;\n     }\n-  return check_co_minmaxsum (a, result_image, stat, errmsg);\n+  return check_co_collective (a, result_image, stat, errmsg, false);\n }\n \n \n@@ -1506,7 +1562,7 @@ gfc_check_co_sum (gfc_expr *a, gfc_expr *result_image, gfc_expr *stat,\n {\n   if (!numeric_check (a, 0))\n     return false;\n-  return check_co_minmaxsum (a, result_image, stat, errmsg);\n+  return check_co_collective (a, result_image, stat, errmsg, false);\n }\n \n "}, {"sha": "f1c78cc810e2b99a4ca5765482de2fd38a9232da", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16ee37946f575365bb39d238863422465902054/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16ee37946f575365bb39d238863422465902054/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=a16ee37946f575365bb39d238863422465902054", "patch": "@@ -369,8 +369,10 @@ enum gfc_isym_id\n   GFC_ISYM_CHDIR,\n   GFC_ISYM_CHMOD,\n   GFC_ISYM_CMPLX,\n+  GFC_ISYM_CO_BROADCAST,\n   GFC_ISYM_CO_MAX,\n   GFC_ISYM_CO_MIN,\n+  GFC_ISYM_CO_REDUCE,\n   GFC_ISYM_CO_SUM,\n   GFC_ISYM_COMMAND_ARGUMENT_COUNT,\n   GFC_ISYM_COMPILER_OPTIONS,"}, {"sha": "9bc9b3cb9129b6d69467df91977c98a58906e376", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16ee37946f575365bb39d238863422465902054/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16ee37946f575365bb39d238863422465902054/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=a16ee37946f575365bb39d238863422465902054", "patch": "@@ -3294,6 +3294,14 @@ add_subroutines (void)\n   make_from_module();\n \n   /* Coarray collectives.  */\n+  add_sym_4s (\"co_broadcast\", GFC_ISYM_CO_BROADCAST, CLASS_IMPURE,\n+\t      BT_UNKNOWN, 0, GFC_STD_F2008_TS,\n+\t      gfc_check_co_broadcast, NULL, NULL,\n+\t      a, BT_REAL, dr, REQUIRED, INTENT_INOUT,\n+\t      \"source_image\", BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      stat, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n+\t      errmsg, BT_CHARACTER, dc, OPTIONAL, INTENT_OUT);\n+\n   add_sym_4s (\"co_max\", GFC_ISYM_CO_MAX, CLASS_IMPURE,\n \t      BT_UNKNOWN, 0, GFC_STD_F2008_TS,\n \t      gfc_check_co_minmax, NULL, NULL,\n@@ -3318,6 +3326,16 @@ add_subroutines (void)\n \t      stat, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n \t      errmsg, BT_CHARACTER, dc, OPTIONAL, INTENT_OUT);\n \n+  add_sym_5s (\"co_reduce\", GFC_ISYM_CO_REDUCE, CLASS_IMPURE,\n+\t      BT_UNKNOWN, 0, GFC_STD_F2008_TS,\n+\t      gfc_check_co_reduce, NULL, NULL,\n+\t      a, BT_REAL, dr, REQUIRED, INTENT_INOUT,\n+\t      \"operator\", BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      result_image, BT_INTEGER, di, OPTIONAL, INTENT_IN,\n+\t      stat, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n+\t      errmsg, BT_CHARACTER, dc, OPTIONAL, INTENT_OUT);\n+\n+\n   /* The following subroutine is internally used for coarray libray functions.\n      \"make_from_module\" makes it inaccessible for external users.  */\n   add_sym_2s (GFC_PREFIX (\"caf_send\"), GFC_ISYM_CAF_SEND, CLASS_IMPURE,"}, {"sha": "a6342e75f77ff69156bcca0563207d01776ea7f4", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16ee37946f575365bb39d238863422465902054/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16ee37946f575365bb39d238863422465902054/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=a16ee37946f575365bb39d238863422465902054", "patch": "@@ -53,8 +53,11 @@ bool gfc_check_chdir (gfc_expr *);\n bool gfc_check_chmod (gfc_expr *, gfc_expr *);\n bool gfc_check_cmplx (gfc_expr *, gfc_expr *, gfc_expr *);\n bool gfc_check_complex (gfc_expr *, gfc_expr *);\n+bool gfc_check_co_broadcast (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n bool gfc_check_co_minmax (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n bool gfc_check_co_sum (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n+bool gfc_check_co_reduce (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *,\n+\t\t\t  gfc_expr *);\n bool gfc_check_count (gfc_expr *, gfc_expr *, gfc_expr *);\n bool gfc_check_cshift (gfc_expr *, gfc_expr *, gfc_expr *);\n bool gfc_check_ctime (gfc_expr *);"}, {"sha": "4d884d737e9703977eb18b5dea0b92e28fc7ecb4", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16ee37946f575365bb39d238863422465902054/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16ee37946f575365bb39d238863422465902054/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=a16ee37946f575365bb39d238863422465902054", "patch": "@@ -95,6 +95,7 @@ Some basic guidelines for editing this document:\n * @code{CHDIR}:         CHDIR,     Change working directory\n * @code{CHMOD}:         CHMOD,     Change access permissions of files\n * @code{CMPLX}:         CMPLX,     Complex conversion function\n+* @code{CO_BROADCAST}:  CO_BROADCAST, Copy a value to all images the current set of images\n * @code{CO_MAX}:        CO_MAX,    Maximal value on the current set of images\n * @code{CO_MIN}:        CO_MIN,    Minimal value on the current set of images\n * @code{CO_SUM}:        CO_SUM,    Sum of values on the current set of images\n@@ -3291,6 +3292,59 @@ end program test_cmplx\n \n \n \n+@node CO_BROADCAST\n+@section @code{CO_BROADCAST} --- Copy a value to all images the current set of images\n+@fnindex CO_BROADCAST\n+@cindex Collectives, value broadcasting\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{CO_BROADCAST} copies the value of argument @var{A} on the image with\n+image index @code{SOURCE_IMAGE} to all images in the current team.  @var{A}\n+becomes defined as if by intrinsic assignment.  If the execution was\n+successful and @var{STAT} is present, it is assigned the value zero.  If the\n+execution failed, @var{STAT} gets assigned a nonzero value and, if present,\n+@var{ERRMSG} gets assigned a value describing the occurred error.\n+\n+@item @emph{Standard}:\n+Technical Specification (TS) 18508 or later\n+\n+@item @emph{Class}:\n+Collective subroutine\n+\n+@item @emph{Syntax}:\n+@code{CALL CO_BROADCAST(A, SOURCE_IMAGE [, STAT, ERRMSG])}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{A}            @tab INTENT(INOUT) argument; shall have the same\n+dynamic type and type paramters on all images of the current team. If it\n+is an array, it shall have the same shape on all images.\n+@item @var{SOURCE_IMAGE} @tab (optional) a scalar integer expression.\n+It shall have the same the same value on all images and refer to an\n+image of the current team.\n+@item @var{STAT}         @tab (optional) a scalar integer variable\n+@item @var{ERRMSG}       @tab (optional) a scalar character variable\n+@end multitable\n+\n+@item @emph{Example}:\n+@smallexample\n+program test\n+  integer :: val(3)\n+  if (this_image() == 1) then\n+    val = [1, 5, 3]\n+  end if\n+  call co_broadcast (val, source_image=1)\n+  print *, this_image, \":\", val\n+end program test\n+@end smallexample\n+\n+@item @emph{See also}:\n+@ref{CO_MAX}, @ref{CO_MIN}, @ref{CO_SUM}\n+@end table\n+\n+\n+\n @node CO_MAX\n @section @code{CO_MAX} --- Maximal value on the current set of images\n @fnindex CO_MAX\n@@ -3340,7 +3394,7 @@ end program test\n @end smallexample\n \n @item @emph{See also}:\n-@ref{CO_MIN}, @ref{CO_SUM}\n+@ref{CO_MIN}, @ref{CO_SUM}, @ref{CO_BROADCAST}\n @end table\n \n \n@@ -3394,7 +3448,7 @@ end program test\n @end smallexample\n \n @item @emph{See also}:\n-@ref{CO_MAX}, @ref{CO_SUM}\n+@ref{CO_MAX}, @ref{CO_SUM}, @ref{CO_BROADCAST}\n @end table\n \n \n@@ -3448,7 +3502,7 @@ end program test\n @end smallexample\n \n @item @emph{See also}:\n-@ref{CO_MAX}, @ref{CO_MIN}\n+@ref{CO_MAX}, @ref{CO_MIN}, @ref{CO_BROADCAST}\n @end table\n \n "}, {"sha": "718450430d3fa69e378db372c9cafe78df1bd141", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16ee37946f575365bb39d238863422465902054/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16ee37946f575365bb39d238863422465902054/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=a16ee37946f575365bb39d238863422465902054", "patch": "@@ -145,6 +145,7 @@ tree gfor_fndecl_caf_atomic_cas;\n tree gfor_fndecl_caf_atomic_op;\n tree gfor_fndecl_caf_lock;\n tree gfor_fndecl_caf_unlock;\n+tree gfor_fndecl_co_broadcast;\n tree gfor_fndecl_co_max;\n tree gfor_fndecl_co_min;\n tree gfor_fndecl_co_sum;\n@@ -3424,6 +3425,11 @@ gfc_build_builtin_function_decls (void)\n \tvoid_type_node, 6, pvoid_type_node, size_type_node, integer_type_node,\n \tpint_type, pchar_type_node, integer_type_node);\n \n+      gfor_fndecl_co_broadcast = gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"caf_co_broadcast\")), \"W.WW\",\n+\tvoid_type_node, 5, pvoid_type_node, integer_type_node,\n+\tpint_type, pchar_type_node, integer_type_node);\n+\n       gfor_fndecl_co_max = gfc_build_library_function_decl_with_spec (\n \tget_identifier (PREFIX(\"caf_co_max\")), \"W.WW\",\n \tvoid_type_node, 6, pvoid_type_node, integer_type_node,"}, {"sha": "0a3315d9cfab6dd9a4cf4450b7eef20251cf5c15", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16ee37946f575365bb39d238863422465902054/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16ee37946f575365bb39d238863422465902054/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=a16ee37946f575365bb39d238863422465902054", "patch": "@@ -8173,7 +8173,7 @@ gfc_walk_intrinsic_function (gfc_ss * ss, gfc_expr * expr,\n \n \n static tree\n-conv_co_minmaxsum (gfc_code *code)\n+conv_co_collective (gfc_code *code)\n {\n   gfc_se argse;\n   stmtblock_t block, post_block;\n@@ -8263,16 +8263,26 @@ conv_co_minmaxsum (gfc_code *code)\n     }\n \n   /* Generate the function call.  */\n-  if (code->resolved_isym->id == GFC_ISYM_CO_MAX)\n-    fndecl = gfor_fndecl_co_max;\n-  else if (code->resolved_isym->id == GFC_ISYM_CO_MIN)\n-    fndecl = gfor_fndecl_co_min;\n-  else if (code->resolved_isym->id == GFC_ISYM_CO_SUM)\n-    fndecl = gfor_fndecl_co_sum;\n-  else\n-    gcc_unreachable ();\n+  switch (code->resolved_isym->id)\n+    {\n+    case GFC_ISYM_CO_BROADCAST:\n+      fndecl = gfor_fndecl_co_broadcast;\n+      break;\n+    case GFC_ISYM_CO_MAX:\n+      fndecl = gfor_fndecl_co_max;\n+      break;\n+    case GFC_ISYM_CO_MIN:\n+      fndecl = gfor_fndecl_co_min;\n+      break;\n+    case GFC_ISYM_CO_SUM:\n+      fndecl = gfor_fndecl_co_sum;\n+      break;\n+    default: \n+      gcc_unreachable ();\n+    }\n \n-  if (code->resolved_isym->id == GFC_ISYM_CO_SUM)\n+  if (code->resolved_isym->id == GFC_ISYM_CO_SUM\n+      || code->resolved_isym->id == GFC_ISYM_CO_BROADCAST)\n     fndecl = build_call_expr_loc (input_location, fndecl, 5, array,\n \t\t\t\t  image_index, stat, errmsg, errmsg_len);\n   else\n@@ -8281,7 +8291,6 @@ conv_co_minmaxsum (gfc_code *code)\n   gfc_add_expr_to_block (&block, fndecl);\n   gfc_add_block_to_block (&block, &post_block);\n \n-  /* Add CALL to CO_SUM/MIN/MAX: array descriptor, vector descriptor, stat, errmsg, strlen, errmsglen */\n   return gfc_finish_block (&block);\n }\n \n@@ -8992,10 +9001,14 @@ gfc_conv_intrinsic_subroutine (gfc_code *code)\n       res = conv_caf_send (code);\n       break;\n \n+    case GFC_ISYM_CO_REDUCE:\n+      gcc_unreachable ();\n+      break;\n+    case GFC_ISYM_CO_BROADCAST:\n     case GFC_ISYM_CO_MIN:\n     case GFC_ISYM_CO_MAX:\n     case GFC_ISYM_CO_SUM:\n-      res = conv_co_minmaxsum (code);\n+      res = conv_co_collective (code);\n       break;\n \n     case GFC_ISYM_SYSTEM_CLOCK:"}, {"sha": "03136e609be94c2b3018cbdf47b8807ae540ddbb", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16ee37946f575365bb39d238863422465902054/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16ee37946f575365bb39d238863422465902054/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=a16ee37946f575365bb39d238863422465902054", "patch": "@@ -727,6 +727,7 @@ extern GTY(()) tree gfor_fndecl_caf_atomic_cas;\n extern GTY(()) tree gfor_fndecl_caf_atomic_op;\n extern GTY(()) tree gfor_fndecl_caf_lock;\n extern GTY(()) tree gfor_fndecl_caf_unlock;\n+extern GTY(()) tree gfor_fndecl_co_broadcast;\n extern GTY(()) tree gfor_fndecl_co_max;\n extern GTY(()) tree gfor_fndecl_co_min;\n extern GTY(()) tree gfor_fndecl_co_sum;"}, {"sha": "ef8faa3deeaf11b718b37bb8e798c6ad9eec688c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16ee37946f575365bb39d238863422465902054/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16ee37946f575365bb39d238863422465902054/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a16ee37946f575365bb39d238863422465902054", "patch": "@@ -1,3 +1,11 @@\n+2014-09-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/coarray/collectives_3.f90: New.\n+\t* gfortran.dg/coarray_collectives_9.f90: New.\n+\t* gfortran.dg/coarray_collectives_10.f90: New.\n+\t* gfortran.dg/coarray_collectives_11.f90: New.\n+\t* gfortran.dg/coarray_collectives_12.f90: New.\n+\n 2014-09-24  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/swaps-p8-17.c: New test."}, {"sha": "123a85702a594369bfcf74c1b6c1ca418da3a9f0", "filename": "gcc/testsuite/gfortran.dg/coarray/collectives_3.f90", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16ee37946f575365bb39d238863422465902054/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcollectives_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16ee37946f575365bb39d238863422465902054/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcollectives_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray%2Fcollectives_3.f90?ref=a16ee37946f575365bb39d238863422465902054", "patch": "@@ -0,0 +1,136 @@\n+! { dg-do run }\n+!\n+! CO_BROADCAST\n+!\n+program test\n+  implicit none\n+  intrinsic co_broadcast\n+\n+  type t\n+    integer :: i\n+    character(len=1) :: c\n+    real(8) :: x(3), y(3)\n+  end type t\n+\n+  integer :: i, j(10), stat\n+  complex :: a(5,5)\n+  character(kind=1, len=5) :: str1, errstr\n+  character(kind=4, len=8) :: str2(2)\n+  type(t) :: dt(4)\n+\n+  i = 1\n+  j = 55\n+  a = 99.0\n+  str1 = 1_\"XXXXX\"\n+  str2 = 4_\"YYYYYYYY\"\n+  dt = t(1, 'C', [1.,2.,3.], [3,3,3])\n+  errstr = \"ZZZZZ\"\n+\n+  if (this_image() == num_images()) then\n+    i = 2\n+    j = 66\n+    a = -99.0\n+    str1 = 1_\"abcd\"\n+    str2 = 4_\"12 3 4 5\"\n+    dt = t(-1, 'a', [3.,1.,8.], [99,24,5])\n+  end if\n+  sync all\n+\n+  call co_broadcast(i, source_image=num_images(), stat=stat, errmsg=errstr)\n+  if (stat /= 0) call abort()\n+  if (errstr /= \"ZZZZZ\") call abort()\n+  if (i /= 2) call abort()\n+\n+  call co_broadcast(j, source_image=num_images(), stat=stat, errmsg=errstr)\n+  if (stat /= 0) call abort()\n+  if (errstr /= \"ZZZZZ\") call abort()\n+  if (any (j /= 66)) call abort\n+\n+  call co_broadcast(a, source_image=num_images(), stat=stat, errmsg=errstr)\n+  if (stat /= 0) call abort()\n+  if (errstr /= \"ZZZZZ\") call abort()\n+  if (any (a /= -99.0)) call abort\n+\n+  call co_broadcast(str1, source_image=num_images(), stat=stat, errmsg=errstr)\n+  if (stat /= 0) call abort()\n+  if (errstr /= \"ZZZZZ\") call abort()\n+  if (str1 /= \"abcd\") call abort()\n+\n+  call co_broadcast(str2, source_image=num_images(), stat=stat, errmsg=errstr)\n+  if (stat /= 0) call abort()\n+  if (errstr /= \"ZZZZZ\") call abort()\n+  if (any (str2 /= 4_\"12 3 4 5\")) call abort\n+\n+  call co_broadcast(dt, source_image=num_images(), stat=stat, errmsg=errstr)\n+  if (stat /= 0) call abort()\n+  if (errstr /= \"ZZZZZ\") call abort()\n+  if (any (dt(:)%i /= -1)) call abort()\n+  if (any (dt(:)%c /= 'a')) call abort()\n+  if (any (dt(:)%x(1) /= 3.)) call abort()\n+  if (any (dt(:)%x(2) /= 1.)) call abort()\n+  if (any (dt(:)%x(3) /= 8.)) call abort()\n+  if (any (dt(:)%y(1) /= 99.)) call abort()\n+  if (any (dt(:)%y(2) /= 24.)) call abort()\n+  if (any (dt(:)%y(3) /= 5.)) call abort()\n+\n+  sync all\n+  dt = t(1, 'C', [1.,2.,3.], [3,3,3])\n+  sync all\n+  if (this_image() == num_images()) then\n+    str2 = 4_\"001122\"\n+    dt(2:4) = t(-2, 'i', [9.,2.,3.], [4,44,321])\n+  end if\n+\n+  call co_broadcast(str2(::2), source_image=num_images(), stat=stat, &\n+                    errmsg=errstr)\n+  if (stat /= 0) call abort()\n+  if (errstr /= \"ZZZZZ\") call abort()\n+  if (str2(1) /= 4_\"001122\") call abort()\n+  if (this_image() == num_images()) then\n+    if (str2(1) /= 4_\"001122\") call abort()\n+  else\n+    if (str2(2) /= 4_\"12 3 4 5\") call abort()\n+  end if\n+\n+  call co_broadcast(dt(2::2), source_image=num_images(), stat=stat, &\n+                    errmsg=errstr)\n+  if (stat /= 0) call abort()\n+  if (errstr /= \"ZZZZZ\") call abort()\n+  if (this_image() == num_images()) then\n+    if (any (dt(1:1)%i /= 1)) call abort()\n+    if (any (dt(1:1)%c /= 'C')) call abort()\n+    if (any (dt(1:1)%x(1) /= 1.)) call abort()\n+    if (any (dt(1:1)%x(2) /= 2.)) call abort()\n+    if (any (dt(1:1)%x(3) /= 3.)) call abort()\n+    if (any (dt(1:1)%y(1) /= 3.)) call abort()\n+    if (any (dt(1:1)%y(2) /= 3.)) call abort()\n+    if (any (dt(1:1)%y(3) /= 3.)) call abort()\n+\n+    if (any (dt(2:)%i /= -2)) call abort()\n+    if (any (dt(2:)%c /= 'i')) call abort()\n+    if (any (dt(2:)%x(1) /= 9.)) call abort()\n+    if (any (dt(2:)%x(2) /= 2.)) call abort()\n+    if (any (dt(2:)%x(3) /= 3.)) call abort()\n+    if (any (dt(2:)%y(1) /= 4.)) call abort()\n+    if (any (dt(2:)%y(2) /= 44.)) call abort()\n+    if (any (dt(2:)%y(3) /= 321.)) call abort()\n+  else\n+    if (any (dt(1::2)%i /= 1)) call abort()\n+    if (any (dt(1::2)%c /= 'C')) call abort()\n+    if (any (dt(1::2)%x(1) /= 1.)) call abort()\n+    if (any (dt(1::2)%x(2) /= 2.)) call abort()\n+    if (any (dt(1::2)%x(3) /= 3.)) call abort()\n+    if (any (dt(1::2)%y(1) /= 3.)) call abort()\n+    if (any (dt(1::2)%y(2) /= 3.)) call abort()\n+    if (any (dt(1::2)%y(3) /= 3.)) call abort()\n+\n+    if (any (dt(2::2)%i /= -2)) call abort()\n+    if (any (dt(2::2)%c /= 'i')) call abort()\n+    if (any (dt(2::2)%x(1) /= 9.)) call abort()\n+    if (any (dt(2::2)%x(2) /= 2.)) call abort()\n+    if (any (dt(2::2)%x(3) /= 3.)) call abort()\n+    if (any (dt(2::2)%y(1) /= 4.)) call abort()\n+    if (any (dt(2::2)%y(2) /= 44.)) call abort()\n+    if (any (dt(2::2)%y(3) /= 321.)) call abort()\n+  endif\n+end program test"}, {"sha": "906785caf54fe83a3913ae568d7e12e4f9600a83", "filename": "gcc/testsuite/gfortran.dg/coarray_collectives_10.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16ee37946f575365bb39d238863422465902054/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16ee37946f575365bb39d238863422465902054/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_10.f90?ref=a16ee37946f575365bb39d238863422465902054", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single -std=f2008\" }\n+!\n+!\n+! CO_REDUCE/CO_BROADCAST\n+!\n+program test\n+  implicit none\n+  intrinsic co_reduce ! { dg-error \"is not available in the current standard settings but new in TS 29113/TS 18508.\" }\n+  intrinsic co_broadcast ! { dg-error \"is not available in the current standard settings but new in TS 29113/TS 18508.\" }\n+end program test"}, {"sha": "b10ba62be9fbb2beb3961149b1932ad32cee0ec2", "filename": "gcc/testsuite/gfortran.dg/coarray_collectives_11.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16ee37946f575365bb39d238863422465902054/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16ee37946f575365bb39d238863422465902054/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_11.f90?ref=a16ee37946f575365bb39d238863422465902054", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original -fcoarray=single\" }\n+!\n+! CO_BROADCAST\n+!\n+program test\n+  implicit none\n+  intrinsic co_reduce\n+  integer :: stat1\n+  real :: val\n+  call co_broadcast(val, source_image=1, stat=stat1)\n+end program test\n+\n+! { dg-final { scan-tree-dump-times \"stat1 = 0;\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "e3ba9d8adba7100696705722d1ddca999c8aa7ba", "filename": "gcc/testsuite/gfortran.dg/coarray_collectives_12.f90", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16ee37946f575365bb39d238863422465902054/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16ee37946f575365bb39d238863422465902054/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_12.f90?ref=a16ee37946f575365bb39d238863422465902054", "patch": "@@ -0,0 +1,26 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original -fcoarray=lib\" }\n+!\n+! CO_SUM/CO_MIN/CO_MAX\n+!\n+program test\n+  implicit none\n+  intrinsic co_max\n+  integer :: stat1, stat2, stat3\n+  character(len=6) :: errmesg1\n+  character(len=7) :: errmesg2\n+  character(len=8) :: errmesg3\n+  real :: val1\n+  complex, allocatable :: val2(:)\n+  character(len=99) :: val3\n+  integer :: res\n+\n+  call co_broadcast(val1, source_image=num_images(), stat=stat1, errmsg=errmesg1)\n+  call co_broadcast(val2, source_image=4, stat=stat2, errmsg=errmesg2)\n+  call co_broadcast(val3, source_image=res,stat=stat3, errmsg=errmesg3)\n+end program test\n+\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_co_broadcast \\\\(&desc.., _gfortran_caf_num_images \\\\(0, -1\\\\), &stat1, errmesg1, 6\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_co_broadcast \\\\(&val2, 4, &stat2, errmesg2, 7\\\\);\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_caf_co_broadcast \\\\(&desc.., res, &stat3, errmesg3, 8\\\\);\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "90c09c50ad72fa97fbef99766570ad409a5ef72a", "filename": "gcc/testsuite/gfortran.dg/coarray_collectives_9.f90", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16ee37946f575365bb39d238863422465902054/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16ee37946f575365bb39d238863422465902054/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_collectives_9.f90?ref=a16ee37946f575365bb39d238863422465902054", "patch": "@@ -0,0 +1,62 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+!\n+!\n+! CO_BROADCAST/CO_REDUCE\n+!\n+program test\n+  implicit none\n+  intrinsic co_broadcast\n+  intrinsic co_reduce\n+  integer :: val, i\n+  integer :: vec(3), idx(3)\n+  character(len=30) :: errmsg\n+  integer(8) :: i8\n+  character(len=19, kind=4) :: msg4\n+\n+  interface\n+    pure function red_f(a, b)\n+      integer :: a, b, red_f\n+      intent(in) :: a, b\n+    end function red_f\n+    impure function red_f2(a, b)\n+      integer :: a, b, red_f\n+      intent(in) :: a, b\n+    end function red_f2\n+  end interface\n+\n+  call co_broadcast(\"abc\") ! { dg-error \"Missing actual argument 'source_image' in call to 'co_broadcast'\" }\n+  call co_reduce(\"abc\") ! { dg-error \"Missing actual argument 'operator' in call to 'co_reduce'\" }\n+  call co_broadcast(1, source_image=1) ! { dg-error \"'a' argument of 'co_broadcast' intrinsic at .1. must be a variable\" }\n+  call co_reduce(a=1, operator=red_f) ! { dg-error \"'a' argument of 'co_reduce' intrinsic at .1. must be a variable\" }\n+  call co_reduce(a=val, operator=red_f2) ! { dg-error \"OPERATOR argument at (1) must be a PURE function\" }\n+\n+  call co_broadcast(val, source_image=[1,2]) ! { dg-error \"must be a scalar\" }\n+  call co_broadcast(val, source_image=1.0) ! { dg-error \"must be INTEGER\" }\n+  call co_broadcast(val, 1, stat=[1,2]) ! { dg-error \"must be a scalar\" }\n+  call co_broadcast(val, 1, stat=1.0) ! { dg-error \"must be INTEGER\" }\n+  call co_broadcast(val, 1, stat=1) ! { dg-error \"must be a variable\" }\n+  call co_broadcast(val, stat=i, source_image=1) ! OK\n+  call co_broadcast(val, stat=i, errmsg=errmsg, source_image=1) ! OK\n+  call co_broadcast(val, stat=i, errmsg=[errmsg], source_image=1) ! { dg-error \"must be a scalar\" }\n+  call co_broadcast(val, stat=i, errmsg=5, source_image=1) ! { dg-error \"must be CHARACTER\" }\n+  call co_broadcast(val, 1, errmsg=\"abc\") ! { dg-error \"must be a variable\" }\n+  call co_broadcast(val, 1, stat=i8) ! { dg-error \"The stat= argument at .1. must be a kind=4 integer variable\" }\n+  call co_broadcast(val, 1, errmsg=msg4) ! { dg-error \"The errmsg= argument at .1. must be a default-kind character variable\" }\n+\n+  call co_reduce(val, red_f, result_image=[1,2]) ! { dg-error \"must be a scalar\" }\n+  call co_reduce(val, red_f, result_image=1.0) ! { dg-error \"must be INTEGER\" }\n+  call co_reduce(val, red_f, stat=[1,2]) ! { dg-error \"must be a scalar\" }\n+  call co_reduce(val, red_f, stat=1.0) ! { dg-error \"must be INTEGER\" }\n+  call co_reduce(val, red_f, stat=1) ! { dg-error \"must be a variable\" }\n+  call co_reduce(val, red_f, stat=i, result_image=1) ! OK\n+  call co_reduce(val, red_f, stat=i, errmsg=errmsg, result_image=1) ! OK\n+  call co_reduce(val, red_f, stat=i, errmsg=[errmsg], result_image=1) ! { dg-error \"must be a scalar\" }\n+  call co_reduce(val, red_f, stat=i, errmsg=5, result_image=1) ! { dg-error \"must be CHARACTER\" }\n+  call co_reduce(val, red_f, errmsg=\"abc\") ! { dg-error \"must be a variable\" }\n+  call co_reduce(val, red_f, stat=i8) ! { dg-error \"The stat= argument at .1. must be a kind=4 integer variable\" }\n+  call co_reduce(val, red_f, errmsg=msg4) ! { dg-error \"The errmsg= argument at .1. must be a default-kind character variable\" }\n+\n+  call co_broadcasr(vec(idx), 1) ! { dg-error \"Argument 'A' with INTENT\\\\(INOUT\\\\) at .1. of the intrinsic subroutine co_sum shall not have a vector subscript\" }\n+  call co_reduce(vec([1,3,2]), red_f) ! { dg-error \"Argument 'A' with INTENT\\\\(INOUT\\\\) at .1. of the intrinsic subroutine co_min shall not have a vector subscript\" }\n+end program test"}, {"sha": "71c15a962f64c7ff80808772760aa0d33145e607", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16ee37946f575365bb39d238863422465902054/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16ee37946f575365bb39d238863422465902054/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=a16ee37946f575365bb39d238863422465902054", "patch": "@@ -1,3 +1,8 @@\n+2014-09-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* caf/libcaf.h (_gfortran_caf_co_broadcast): New prototype.\n+\t* caf/single.c (_gfortran_caf_co_broadcast): New.\n+\n 2014-09-18  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \tPR libfortran/62768"}, {"sha": "ffd0980bf6742cd57f5bf1b7424be93acef18048", "filename": "libgfortran/caf/libcaf.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16ee37946f575365bb39d238863422465902054/libgfortran%2Fcaf%2Flibcaf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16ee37946f575365bb39d238863422465902054/libgfortran%2Fcaf%2Flibcaf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Flibcaf.h?ref=a16ee37946f575365bb39d238863422465902054", "patch": "@@ -106,12 +106,10 @@ void _gfortran_caf_error_stop_str (const char *, int32_t)\n      __attribute__ ((noreturn));\n void _gfortran_caf_error_stop (int32_t) __attribute__ ((noreturn));\n \n-void _gfortran_caf_co_sum (gfc_descriptor_t *, int, int *,\n-\t\t\t   char *, int);\n-void _gfortran_caf_co_min (gfc_descriptor_t *, int, int *, char *,\n-\t\t\t   int, int);\n-void _gfortran_caf_co_max (gfc_descriptor_t *, int, int *, char *,\n-\t\t\t   int, int);\n+void _gfortran_caf_co_broadcast (gfc_descriptor_t *, int, int *, char *, int);\n+void _gfortran_caf_co_sum (gfc_descriptor_t *, int, int *, char *, int);\n+void _gfortran_caf_co_min (gfc_descriptor_t *, int, int *, char *, int, int);\n+void _gfortran_caf_co_max (gfc_descriptor_t *, int, int *, char *, int, int);\n \n void _gfortran_caf_get (caf_token_t, size_t, int, gfc_descriptor_t *,\n                         caf_vector_t *, gfc_descriptor_t *, int, int, bool);"}, {"sha": "e264fc5066235e9ec925f75fc11553deba552782", "filename": "libgfortran/caf/single.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a16ee37946f575365bb39d238863422465902054/libgfortran%2Fcaf%2Fsingle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a16ee37946f575365bb39d238863422465902054/libgfortran%2Fcaf%2Fsingle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fcaf%2Fsingle.c?ref=a16ee37946f575365bb39d238863422465902054", "patch": "@@ -210,6 +210,16 @@ _gfortran_caf_error_stop (int32_t error)\n }\n \n \n+void\n+_gfortran_caf_co_broadcast (gfc_descriptor_t *a __attribute__ ((unused)),\n+\t\t\t    int source_image __attribute__ ((unused)),\n+\t\t\t    int *stat, char *errmsg __attribute__ ((unused)),\n+\t\t\t    int errmsg_len __attribute__ ((unused)))\n+{\n+  if (stat)\n+    *stat = 0;\n+}\n+\n void\n _gfortran_caf_co_sum (gfc_descriptor_t *a __attribute__ ((unused)),\n \t\t      int result_image __attribute__ ((unused)),\n@@ -224,7 +234,7 @@ void\n _gfortran_caf_co_min (gfc_descriptor_t *a __attribute__ ((unused)),\n \t\t      int result_image __attribute__ ((unused)),\n \t\t      int *stat, char *errmsg __attribute__ ((unused)),\n-\t\t      int src_len __attribute__ ((unused)),\n+\t\t      int a_len __attribute__ ((unused)),\n \t\t      int errmsg_len __attribute__ ((unused)))\n {\n   if (stat)\n@@ -235,7 +245,7 @@ void\n _gfortran_caf_co_max (gfc_descriptor_t *a __attribute__ ((unused)),\n \t\t      int result_image __attribute__ ((unused)),\n \t\t      int *stat, char *errmsg __attribute__ ((unused)),\n-\t\t      int src_len __attribute__ ((unused)),\n+\t\t      int a_len __attribute__ ((unused)),\n \t\t      int errmsg_len __attribute__ ((unused)))\n {\n   if (stat)"}]}