{"sha": "a8f5224e01e17cc067d904eba3e2a757936ed9bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YThmNTIyNGUwMWUxN2NjMDY3ZDkwNGViYTNlMmE3NTc5MzZlZDliYw==", "commit": {"author": {"name": "David Mosberger", "email": "davidm@hpl.hp.com", "date": "2004-10-27T22:44:07Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2004-10-27T22:44:07Z"}, "message": "IA-64 sibcall unwind bug, PR target/13158\n\nIA-64 sibcall unwind bug, PR target/13158\n* config/ia64/ia64.c (ia64_expand_epilogue): Set RTX_FRAME_RELATED_P on\nsibcall alloc instruction.\n(process_set): Handle sibcall alloc instruction.\n\nFrom-SVN: r89714", "tree": {"sha": "062751f1daed5c6fd11575018f198b93137d3a53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/062751f1daed5c6fd11575018f198b93137d3a53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8f5224e01e17cc067d904eba3e2a757936ed9bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8f5224e01e17cc067d904eba3e2a757936ed9bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8f5224e01e17cc067d904eba3e2a757936ed9bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8f5224e01e17cc067d904eba3e2a757936ed9bc/comments", "author": null, "committer": null, "parents": [{"sha": "09afda707e1b5869628246ce0d3df14b0007195a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09afda707e1b5869628246ce0d3df14b0007195a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09afda707e1b5869628246ce0d3df14b0007195a"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "53d9fc9ec0b6eccce6e631567b3c9d8194c7f810", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8f5224e01e17cc067d904eba3e2a757936ed9bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8f5224e01e17cc067d904eba3e2a757936ed9bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a8f5224e01e17cc067d904eba3e2a757936ed9bc", "patch": "@@ -1,3 +1,10 @@\n+2004-10-27  James E Wilson  <wilson@specifixinc.com>\n+\n+\tPR target/13158\n+\t* config/ia64/ia64.c (ia64_expand_epilogue): Set RTX_FRAME_RELATED_P on\n+\tsibcall alloc instruction.\n+\t(process_set): Handle sibcall alloc instruction.\n+\n 2004-10-27  Geoffrey Keating  <geoffk@apple.com>\n \n \t* doc/tm.texi (USE_SELECT_SECTION_FOR_FUNCTIONS): Document."}, {"sha": "39258f2e331cffa6c7eae4700bc313014d15e603", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8f5224e01e17cc067d904eba3e2a757936ed9bc/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8f5224e01e17cc067d904eba3e2a757936ed9bc/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=a8f5224e01e17cc067d904eba3e2a757936ed9bc", "patch": "@@ -2604,10 +2604,13 @@ ia64_expand_epilogue (int sibcall_p)\n \t preserve those input registers used as arguments to the sibling call.\n \t It is unclear how to compute that number here.  */\n       if (current_frame_info.n_input_regs != 0)\n-\temit_insn (gen_alloc (gen_rtx_REG (DImode, fp),\n-\t\t\t      const0_rtx, const0_rtx,\n-\t\t\t      GEN_INT (current_frame_info.n_input_regs),\n-\t\t\t      const0_rtx));\n+\t{\n+\t  rtx n_inputs = GEN_INT (current_frame_info.n_input_regs);\n+\t  insn = emit_insn (gen_alloc (gen_rtx_REG (DImode, fp),\n+\t\t\t\tconst0_rtx, const0_rtx,\n+\t\t\t\tn_inputs, const0_rtx));\n+\t  RTX_FRAME_RELATED_P (insn) = 1;\n+\t}\n     }\n }\n \n@@ -7290,13 +7293,24 @@ process_set (FILE *asm_out_file, rtx pat)\n     {\n       dest_regno = REGNO (dest);\n \n-      /* If this isn't the final destination for ar.pfs, the alloc\n-\t shouldn't have been marked frame related.  */\n-      if (dest_regno != current_frame_info.reg_save_ar_pfs)\n-\tabort ();\n-\n-      fprintf (asm_out_file, \"\\t.save ar.pfs, r%d\\n\",\n-\t       ia64_dbx_register_number (dest_regno));\n+      /* If this is the final destination for ar.pfs, then this must\n+\t be the alloc in the prologue.  */\n+      if (dest_regno == current_frame_info.reg_save_ar_pfs)\n+\tfprintf (asm_out_file, \"\\t.save ar.pfs, r%d\\n\",\n+\t\t ia64_dbx_register_number (dest_regno));\n+      else\n+\t{\n+\t  /* This must be an alloc before a sibcall.  We must drop the\n+\t     old frame info.  The easiest way to drop the old frame\n+\t     info is to ensure we had a \".restore sp\" directive\n+\t     followed by a new prologue.  If the procedure doesn't\n+\t     have a memory-stack frame, we'll issue a dummy \".restore\n+\t     sp\" now.  */\n+\t  if (current_frame_info.total_size == 0)\n+\t    /* if haven't done process_epilogue() yet, do it now */\n+\t    process_epilogue ();\n+\t  fprintf (asm_out_file, \"\\t.prologue\\n\");\n+\t}\n       return 1;\n     }\n "}]}