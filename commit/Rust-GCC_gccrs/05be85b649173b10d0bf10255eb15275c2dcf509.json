{"sha": "05be85b649173b10d0bf10255eb15275c2dcf509", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDViZTg1YjY0OTE3M2IxMGQwYmYxMDI1NWViMTUyNzVjMmRjZjUwOQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-05-04T14:26:43Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2020-05-04T14:35:24Z"}, "message": "Revert \"tree: Don't reuse types if TYPE_USER_ALIGN differ [PR94775]\"\n\nThis reverts commit 6318fe77395fc0dd59419bc4d69cd06ac0158e54.\n\n\tRevert:\n\t2020-04-30  Marek Polacek  <polacek@redhat.com>\n\n\tPR c++/94775\n\t* tree.c (check_base_type): Return true only if TYPE_USER_ALIGN match.\n\t(check_aligned_type): Check if TYPE_USER_ALIGN match.", "tree": {"sha": "62c616ef6bf58a7e256f7ea98a0107f0b54d9b91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62c616ef6bf58a7e256f7ea98a0107f0b54d9b91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05be85b649173b10d0bf10255eb15275c2dcf509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05be85b649173b10d0bf10255eb15275c2dcf509", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05be85b649173b10d0bf10255eb15275c2dcf509", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05be85b649173b10d0bf10255eb15275c2dcf509/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "367766f40a031ff064857681dc4da3309f0ce57d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/367766f40a031ff064857681dc4da3309f0ce57d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/367766f40a031ff064857681dc4da3309f0ce57d"}], "stats": {"total": 53, "additions": 10, "deletions": 43}, "files": [{"sha": "e6d102b13557e9adbd8808c440892fe1142abda4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05be85b649173b10d0bf10255eb15275c2dcf509/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05be85b649173b10d0bf10255eb15275c2dcf509/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=05be85b649173b10d0bf10255eb15275c2dcf509", "patch": "@@ -1,3 +1,12 @@\n+2020-05-04  Marek Polacek  <polacek@redhat.com>\n+\n+\tRevert:\n+\t2020-04-30  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/94775\n+\t* tree.c (check_base_type): Return true only if TYPE_USER_ALIGN match.\n+\t(check_aligned_type): Check if TYPE_USER_ALIGN match.\n+\n 2020-05-04  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/93891"}, {"sha": "0a18f637e0e510e65916ede189cf426e452f0658", "filename": "gcc/testsuite/g++.dg/warn/Warray-bounds-10.C", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/367766f40a031ff064857681dc4da3309f0ce57d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/367766f40a031ff064857681dc4da3309f0ce57d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWarray-bounds-10.C?ref=367766f40a031ff064857681dc4da3309f0ce57d", "patch": "@@ -1,40 +0,0 @@\n-// PR c++/94775\n-// { dg-do compile { target c++14 } }\n-// { dg-options \"-O2 -Warray-bounds\" }\n-\n-template <typename> using a = int;\n-template <bool, typename, typename> using b = int;\n-typedef char d;\n-template <long> using e = int;\n-template <int f, int q> struct h { using i = b<q, a<e<f>>, e<f>>; };\n-template <long f, bool g> using j = typename h<f, g>::i;\n-long ab, k, aj;\n-const d l[]{};\n-class m {\n-public:\n-  m(int);\n-};\n-class n {\n-  void ad() const;\n-  template <class ae> void o(long) const {\n-    using c __attribute__((aligned(1))) = const ae;\n-  }\n-  long p;\n-  template <class, class>\n-  auto s(unsigned long, unsigned long, unsigned long, unsigned long) const;\n-  template <bool = false> auto q(unsigned long, unsigned long) const;\n-};\n-template <class, class>\n-auto n::s(unsigned long, unsigned long, unsigned long, unsigned long t) const {\n-  o<d>(p);\n-  return t;\n-}\n-template <bool g> auto n::q(unsigned long p1, unsigned long p2) const {\n-  using r = j<4, false>;\n-  using ai = j<4, g>;\n-  return s<ai, r>(ab, k, p1, p2);\n-}\n-void n::ad() const {\n-  long f(l[aj]); // { dg-warning \"outside array bounds\" }\n-  m(q(8, f));\n-}"}, {"sha": "e451401822c8eed91976b62a47386459534e4eae", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05be85b649173b10d0bf10255eb15275c2dcf509/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05be85b649173b10d0bf10255eb15275c2dcf509/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=05be85b649173b10d0bf10255eb15275c2dcf509", "patch": "@@ -6493,8 +6493,7 @@ check_base_type (const_tree cand, const_tree base)\n \t\t\t        TYPE_ATTRIBUTES (base)))\n     return false;\n   /* Check alignment.  */\n-  if (TYPE_ALIGN (cand) == TYPE_ALIGN (base)\n-      && TYPE_USER_ALIGN (cand) == TYPE_USER_ALIGN (base))\n+  if (TYPE_ALIGN (cand) == TYPE_ALIGN (base))\n     return true;\n   /* Atomic types increase minimal alignment.  We must to do so as well\n      or we get duplicated canonical types. See PR88686.  */\n@@ -6529,7 +6528,6 @@ check_aligned_type (const_tree cand, const_tree base, unsigned int align)\n \t  && TYPE_CONTEXT (cand) == TYPE_CONTEXT (base)\n \t  /* Check alignment.  */\n \t  && TYPE_ALIGN (cand) == align\n-\t  && TYPE_USER_ALIGN (cand) == TYPE_USER_ALIGN (base)\n \t  && attribute_list_equal (TYPE_ATTRIBUTES (cand),\n \t\t\t\t   TYPE_ATTRIBUTES (base))\n \t  && check_lang_type (cand, base));"}]}