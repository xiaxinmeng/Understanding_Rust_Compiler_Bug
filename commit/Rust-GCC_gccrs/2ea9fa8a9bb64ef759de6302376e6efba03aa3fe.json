{"sha": "2ea9fa8a9bb64ef759de6302376e6efba03aa3fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVhOWZhOGE5YmI2NGVmNzU5ZGU2MzAyMzc2ZTZlZmJhMDNhYTNmZQ==", "commit": {"author": {"name": "Jerry Quinn", "email": "jlquinn@optonline.net", "date": "2009-10-30T12:20:38Z"}, "committer": {"name": "Jerry Quinn", "email": "jlquinn@gcc.gnu.org", "date": "2009-10-30T12:20:38Z"}, "message": "tinfo.cc (operator=(const type_info&)): Revert 153734.\n\n2009-10-30  Jerry Quinn  <jlquinn@optonline.net>\n\n\t* libsupc++/tinfo.cc (operator=(const type_info&)): Revert 153734.\n\t* libsupc++/typeinfo (type_info::name()): Likewise.\n\t* libsupc++/tinfo2.cc (before):  Likewise.\n\n2009-10-30  Jerry Quinn  <jlquinn@optonline.net>\n\n\t* mangle.c (mangle_type_string_for_rtti): Revert 153734.\n\t(needs_fake_anon): Likewise.\n\t(write_name): Likewise.\n\t(write_nested_name): Likewise.\n\t* cp-tree.h (mangle_type_string_for_rtti): Likewise.\n\t(get_anonymous_namespace): Likewise.\n\t* name-lookup.c (get_anonymous_namespace_name): Likewise.\n\t* rtti.c (tinfo_name): Likewise.\n\t(tinfo_base_init): Likewise.\n\nFrom-SVN: r153742", "tree": {"sha": "c8414dbd8e4600cf712301416289369549cd3f46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8414dbd8e4600cf712301416289369549cd3f46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe/comments", "author": {"login": "jlquinn", "id": 826841, "node_id": "MDQ6VXNlcjgyNjg0MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/826841?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jlquinn", "html_url": "https://github.com/jlquinn", "followers_url": "https://api.github.com/users/jlquinn/followers", "following_url": "https://api.github.com/users/jlquinn/following{/other_user}", "gists_url": "https://api.github.com/users/jlquinn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jlquinn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jlquinn/subscriptions", "organizations_url": "https://api.github.com/users/jlquinn/orgs", "repos_url": "https://api.github.com/users/jlquinn/repos", "events_url": "https://api.github.com/users/jlquinn/events{/privacy}", "received_events_url": "https://api.github.com/users/jlquinn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4b2d2c13d81f1b243838850fe98bbc6ccdfd77f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b2d2c13d81f1b243838850fe98bbc6ccdfd77f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b2d2c13d81f1b243838850fe98bbc6ccdfd77f2"}], "stats": {"total": 120, "additions": 73, "deletions": 47}, "files": [{"sha": "676b431b1ffd0363f4776f547db6d5463d65832e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2ea9fa8a9bb64ef759de6302376e6efba03aa3fe", "patch": "@@ -1,3 +1,15 @@\n+2009-10-30  Jerry Quinn  <jlquinn@optonline.net>\n+\n+\t* mangle.c (mangle_type_string_for_rtti): Revert 153734.\n+\t(needs_fake_anon): Likewise.\n+\t(write_name): Likewise.\n+\t(write_nested_name): Likewise.\n+\t* cp-tree.h (mangle_type_string_for_rtti): Likewise.\n+\t(get_anonymous_namespace): Likewise.\n+\t* name-lookup.c (get_anonymous_namespace_name): Likewise.\n+\t* rtti.c (tinfo_name): Likewise.\n+\t(tinfo_base_init): Likewise.\n+\n 2009-10-30  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/41863"}, {"sha": "5c51a6fd7b626ab50e4b36dc7f0716a7f408713f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2ea9fa8a9bb64ef759de6302376e6efba03aa3fe", "patch": "@@ -4517,6 +4517,7 @@ extern tree type_promotes_to\t\t\t(tree);\n extern tree perform_qualification_conversions\t(tree, tree);\n \n /* in name-lookup.c */\n+extern tree get_anonymous_namespace_name\t(void);\n extern tree pushdecl\t\t\t\t(tree);\n extern tree pushdecl_maybe_friend\t\t(tree, bool);\n extern void maybe_push_cleanup_level\t\t(tree);\n@@ -5298,7 +5299,7 @@ extern tree merge_exception_specifiers\t\t(tree, tree);\n /* in mangle.c */\n extern void init_mangle\t\t\t\t(void);\n extern void mangle_decl\t\t\t\t(tree);\n-extern const char *mangle_type_string\t\t(tree);\n+extern const char *mangle_type_string_for_rtti\t(tree);\n extern tree mangle_typeinfo_for_type\t\t(tree);\n extern tree mangle_typeinfo_string_for_type\t(tree);\n extern tree mangle_vtbl_for_type\t\t(tree);"}, {"sha": "874df748f81d513ad6c49b057d6f3245b8510354", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=2ea9fa8a9bb64ef759de6302376e6efba03aa3fe", "patch": "@@ -105,6 +105,10 @@ typedef struct GTY(()) globals {\n \n static GTY (()) globals G;\n \n+/* Whether or not to pretend that a static function is in an anonymous\n+   namespace.  */\n+static bool fake_anon_scope;\n+\n /* The obstack on which we build mangled names.  */\n static struct obstack *mangle_obstack;\n \n@@ -730,6 +734,20 @@ write_encoding (const tree decl)\n     }\n }\n \n+/* Since we now use strcmp to compare typeinfos on all targets because of\n+   the RTLD_LOCAL problem, we need to munge the typeinfo name used for\n+   local classes of static functions to fix g++.dg/abi/local1.C.  We do\n+   that by pretending that the function is in an anonymous namespace.  */\n+\n+static bool\n+needs_fake_anon (const_tree decl)\n+{\n+  /* Pretend there's an anonymous namespace right around a static\n+     function if we're mangling for RTTI.  */\n+  return (fake_anon_scope && !TREE_PUBLIC (decl)\n+\t  && TREE_CODE (decl) == FUNCTION_DECL);\n+}\n+\n /* Lambdas can have a bit more context for mangling, specifically VAR_DECL\n    or PARM_DECL context, which doesn't belong in DECL_CONTEXT.  */\n \n@@ -773,13 +791,18 @@ write_name (tree decl, const int ignore_local_scope)\n \n   context = decl_mangling_context (decl);\n \n+  gcc_assert (context != NULL_TREE);\n+\n+  /* If we need a fake anonymous namespace, force the nested name path.  */\n+  if (needs_fake_anon (decl) && context == global_namespace)\n+    context = error_mark_node;\n+\n   /* A decl in :: or ::std scope is treated specially.  The former is\n      mangled using <unscoped-name> or <unscoped-template-name>, the\n      latter with a special substitution.  Also, a name that is\n      directly in a local function scope is also mangled with\n      <unscoped-name> rather than a full <nested-name>.  */\n-  if (context == NULL\n-      || context == global_namespace\n+  if (context == global_namespace\n       || DECL_NAMESPACE_STD_P (context)\n       || (ignore_local_scope && TREE_CODE (context) == FUNCTION_DECL))\n     {\n@@ -797,6 +820,9 @@ write_name (tree decl, const int ignore_local_scope)\n     }\n   else\n     {\n+      if (context == error_mark_node)\n+\tcontext = global_namespace;\n+\n       /* Handle local names, unless we asked not to (that is, invoked\n \t under <local-name>, to handle only the part of the name under\n \t the local scope).  */\n@@ -809,10 +835,10 @@ write_name (tree decl, const int ignore_local_scope)\n \t     directly in that function's scope, either decl or one of\n \t     its enclosing scopes.  */\n \t  tree local_entity = decl;\n-\t  while (context != NULL && context != global_namespace)\n+\t  while (context != global_namespace)\n \t    {\n \t      /* Make sure we're always dealing with decls.  */\n-\t      if (context != NULL && TYPE_P (context))\n+\t      if (TYPE_P (context))\n \t\tcontext = TYPE_NAME (context);\n \t      /* Is this a function?  */\n \t      if (TREE_CODE (context) == FUNCTION_DECL\n@@ -857,7 +883,6 @@ write_unscoped_name (const tree decl)\n       /* If not, it should be either in the global namespace, or directly\n \t in a local function scope.  */\n       gcc_assert (context == global_namespace\n-\t\t  || context != NULL\n \t\t  || TREE_CODE (context) == FUNCTION_DECL);\n \n       write_unqualified_name (decl);\n@@ -929,6 +954,9 @@ write_nested_name (const tree decl)\n     {\n       /* No, just use <prefix>  */\n       write_prefix (DECL_CONTEXT (decl));\n+      if (needs_fake_anon (decl))\n+\t/* Pretend this static function is in an anonymous namespace.  */\n+\twrite_source_name (get_anonymous_namespace_name ());\n       write_unqualified_name (decl);\n     }\n   write_char ('E');\n@@ -2984,15 +3012,18 @@ mangle_decl (const tree decl)\n   SET_DECL_ASSEMBLER_NAME (decl, id);\n }\n \n-/* Generate the mangled representation of TYPE.  */\n+/* Generate the mangled representation of TYPE for the typeinfo name.  */\n \n const char *\n-mangle_type_string (const tree type)\n+mangle_type_string_for_rtti (const tree type)\n {\n   const char *result;\n \n   start_mangling (type);\n+  /* Mangle in a fake anonymous namespace if necessary.  */\n+  fake_anon_scope = true;\n   write_type (type);\n+  fake_anon_scope = false;\n   result = finish_mangling (/*warn=*/false);\n   if (DEBUG_MANGLE)\n     fprintf (stderr, \"mangle_type_string = '%s'\\n\\n\", result);"}, {"sha": "9a6991269f8f7853345c9df1bd70b34f37f52c6e", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=2ea9fa8a9bb64ef759de6302376e6efba03aa3fe", "patch": "@@ -62,19 +62,14 @@ static GTY(()) tree anonymous_namespace_name;\n \n /* Initialize anonymous_namespace_name if necessary, and return it.  */\n \n-static tree\n+tree\n get_anonymous_namespace_name (void)\n {\n   if (!anonymous_namespace_name)\n     {\n       /* The anonymous namespace has to have a unique name\n \t if typeinfo objects are being compared by name.  */\n-      if (! flag_weak || ! SUPPORTS_ONE_ONLY)\n-       anonymous_namespace_name = get_file_function_name (\"N\");\n-      else\n-       /* The demangler expects anonymous namespaces to be called\n-          something starting with '_GLOBAL__N_'.  */\n-       anonymous_namespace_name = get_identifier (\"_GLOBAL__N_1\");\n+      anonymous_namespace_name = get_file_function_name (\"N\");\n     }\n   return anonymous_namespace_name;\n }"}, {"sha": "8dde479a6c485e3627c83789509921ad08c9568a", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=2ea9fa8a9bb64ef759de6302376e6efba03aa3fe", "patch": "@@ -102,7 +102,7 @@ VEC(tree,gc) *unemitted_tinfo_decls;\n static GTY (()) VEC(tinfo_s,gc) *tinfo_descs;\n \n static tree ifnonnull (tree, tree);\n-static tree tinfo_name (tree, bool);\n+static tree tinfo_name (tree);\n static tree build_dynamic_cast_1 (tree, tree, tsubst_flags_t);\n static tree throw_bad_cast (void);\n static tree throw_bad_typeid (void);\n@@ -349,30 +349,16 @@ build_typeid (tree exp)\n   return exp;\n }\n \n-/* Generate the NTBS name of a type.  If MARK_PRIVATE, put a '*' in front so that\n-   comparisons will be done by pointer rather than string comparison.  */\n+/* Generate the NTBS name of a type.  */\n static tree\n-tinfo_name (tree type, bool mark_private)\n+tinfo_name (tree type)\n {\n   const char *name;\n-  int length;\n   tree name_string;\n \n-  name = mangle_type_string (type);\n-  length = strlen (name);\n-\n-  if (mark_private)\n-    {\n-      /* Inject '*' at beginning of name to force pointer comparison.  */\n-      char* buf = (char*) XALLOCAVEC (char, length + 1);\n-      buf[0] = '*';\n-      memcpy (buf + 1, name, length);\n-      name_string = build_string (length + 1, buf);\n-    }\n-  else\n-    name_string = build_string (length, name);\n-\n-  return fix_string_type (name_string);\n+  name = mangle_type_string_for_rtti (type);\n+  name_string = fix_string_type (build_string (strlen (name) + 1, name));\n+  return name_string;\n }\n \n /* Return a VAR_DECL for the internal ABI defined type_info object for\n@@ -853,12 +839,13 @@ tinfo_base_init (tinfo_s *ti, tree target)\n   tree vtable_ptr;\n \n   {\n-    tree name_name, name_string;\n+    tree name_name;\n \n     /* Generate the NTBS array variable.  */\n     tree name_type = build_cplus_array_type\n \t\t     (build_qualified_type (char_type_node, TYPE_QUAL_CONST),\n \t\t     NULL_TREE);\n+    tree name_string = tinfo_name (target);\n \n     /* Determine the name of the variable -- and remember with which\n        type it is associated.  */\n@@ -875,7 +862,6 @@ tinfo_base_init (tinfo_s *ti, tree target)\n     DECL_TINFO_P (name_decl) = 1;\n     set_linkage_according_to_type (target, name_decl);\n     import_export_decl (name_decl);\n-    name_string = tinfo_name (target, !TREE_PUBLIC (name_decl));\n     DECL_INITIAL (name_decl) = name_string;\n     mark_used (name_decl);\n     pushdecl_top_level_and_finish (name_decl, name_string);"}, {"sha": "a59710da9ef4198951e6a3ba5433c3b38a322eba", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2ea9fa8a9bb64ef759de6302376e6efba03aa3fe", "patch": "@@ -1,3 +1,9 @@\n+2009-10-30  Jerry Quinn  <jlquinn@optonline.net>\n+\n+\t* libsupc++/tinfo.cc (operator=(const type_info&)): Revert 153734.\n+\t* libsupc++/typeinfo (type_info::name()): Likewise.\n+\t* libsupc++/tinfo2.cc (before):  Likewise.\n+\n 2009-10-28  Jerry Quinn  <jlquinn@optonline.net>\n \n \t* libsupc++/tinfo.cc (operator=(const type_info&)): Compare by"}, {"sha": "1ce6f8f46ab8e5899acadd2bc4582e8eb525a35f", "filename": "libstdc++-v3/libsupc++/tinfo.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc?ref=2ea9fa8a9bb64ef759de6302376e6efba03aa3fe", "patch": "@@ -41,8 +41,7 @@ operator== (const std::type_info& arg) const\n #if __GXX_MERGED_TYPEINFO_NAMES\n   return name () == arg.name ();\n #else\n-  return (&arg == this)\n-    || (name ()[0] != '*' && (__builtin_strcmp (name (), arg.name ()) == 0));\n+  return (&arg == this) || (__builtin_strcmp (name (), arg.name ()) == 0);\n #endif\n }\n "}, {"sha": "4b01037f3b96cfb6610591732631a84b5d451178", "filename": "libstdc++-v3/libsupc++/tinfo2.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc?ref=2ea9fa8a9bb64ef759de6302376e6efba03aa3fe", "patch": "@@ -37,8 +37,7 @@ type_info::before (const type_info &arg) const\n #if __GXX_MERGED_TYPEINFO_NAMES\n   return name () < arg.name ();\n #else\n-  return (name ()[0] == '*') ? name () < arg.name ()\n-    :  __builtin_strcmp (name (), arg.name ()) < 0;\n+  return __builtin_strcmp (name (), arg.name ()) < 0;\n #endif\n }\n "}, {"sha": "4c470430deff29f162e11792579d98acfbdab1c4", "filename": "libstdc++-v3/libsupc++/typeinfo", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ea9fa8a9bb64ef759de6302376e6efba03aa3fe/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftypeinfo?ref=2ea9fa8a9bb64ef759de6302376e6efba03aa3fe", "patch": "@@ -94,7 +94,7 @@ namespace std\n     /** Returns an @e implementation-defined byte string; this is not\n      *  portable between compilers!  */\n     const char* name() const\n-    { return __name[0] == '*' ? __name + 1 : __name; }\n+    { return __name; }\n \n #if !__GXX_TYPEINFO_EQUALITY_INLINE\n     // In old abi, or when weak symbols are not supported, there can\n@@ -110,15 +110,12 @@ namespace std\n     // we can run into cases where type_info names aren't merged,\n     // so we still need to do string comparison.\n     bool before(const type_info& __arg) const\n-    { return (__name[0] == '*' && __arg.__name[0] == '*')\n-\t? __name < __arg.__name\n-\t: __builtin_strcmp (__name, __arg.__name) < 0; }\n+    { return __builtin_strcmp (__name, __arg.__name) < 0; }\n \n     bool operator==(const type_info& __arg) const\n     {\n       return ((__name == __arg.__name)\n-\t      || (__name[0] != '*' &&\n-\t\t  __builtin_strcmp (__name, __arg.__name) == 0));\n+\t      || __builtin_strcmp (__name, __arg.__name) == 0);\n     }\n   #else\n     // On some targets we can rely on type_info's NTBS being unique,"}]}