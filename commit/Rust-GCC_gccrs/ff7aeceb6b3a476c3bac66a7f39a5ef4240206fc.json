{"sha": "ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc", "node_id": "C_kwDOANBUbNoAKGZmN2FlY2ViNmIzYTQ3NmMzYmFjNjZhN2YzOWE1ZWY0MjQwMjA2ZmM", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-18T09:02:47Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-18T09:19:02Z"}, "message": "Ada: Revert filename changes in comments.\n\ngcc/ada/ChangeLog:\n\n\t* adaint.c: Revert filename changes in comments.\n\t* ctrl_c.c (dummy_handler): Likewise.\n\t* gsocket.h: Likewise.\n\t* init.c (__gnat_error_handler): Likewise.\n\t* libgnarl/s-intman.ads: Likewise.\n\t* libgnarl/s-osinte__android.ads: Likewise.\n\t* libgnarl/s-osinte__darwin.ads: Likewise.\n\t* libgnarl/s-osinte__hpux.ads: Likewise.\n\t* libgnarl/s-osinte__linux.ads: Likewise.\n\t* libgnarl/s-osinte__qnx.ads: Likewise.\n\t* libgnarl/s-taskin.ads: Likewise.\n\t* rtfinal.c: Likewise.", "tree": {"sha": "935407885c88a8d0f4441941272b9f18c6a9fb12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/935407885c88a8d0f4441941272b9f18c6a9fb12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "903e846578b8a97c311a6e120edbd116a8b3f992", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903e846578b8a97c311a6e120edbd116a8b3f992", "html_url": "https://github.com/Rust-GCC/gccrs/commit/903e846578b8a97c311a6e120edbd116a8b3f992"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "591d033fbca17373a02af768ea805b205ab21caf", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc", "patch": "@@ -172,7 +172,7 @@ extern \"C\" {\n \n #include \"mingw32.h\"\n \n-/* Current code page and CCS encoding to use, set in initialize.cc.  */\n+/* Current code page and CCS encoding to use, set in initialize.c.  */\n UINT __gnat_current_codepage;\n UINT __gnat_current_ccs_encoding;\n "}, {"sha": "eeec3e64f7088a2470ad1dfa76d36a1ad9c58340", "filename": "gcc/ada/ctrl_c.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Fctrl_c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Fctrl_c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fctrl_c.c?ref=ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc", "patch": "@@ -61,7 +61,7 @@ void __gnat_uninstall_int_handler (void);\n void\n dummy_handler () {}\n \n-/* Lives in init.cc.  */\n+/* Lives in init.c.  */\n extern void (*__gnat_ctrl_c_handler) (void);\n #endif\n "}, {"sha": "e7284a1ef4e5235f13d7cdea81b59c1edfbf2fa6", "filename": "gcc/ada/gsocket.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Fgsocket.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Fgsocket.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgsocket.h?ref=ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc", "patch": "@@ -246,7 +246,7 @@\n  *                     mutual exclusion\n  *\n  * See \"Handling of gethostbyname, gethostbyaddr, getservbyname and\n- * getservbyport\" in socket.cc for details.\n+ * getservbyport\" in socket.c for details.\n  */\n \n #if defined (HAVE_GETxxxBYyyy_R)"}, {"sha": "6b6ed5fb058c9cc09828ea422ae4b6520fc03f97", "filename": "gcc/ada/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finit.c?ref=ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc", "patch": "@@ -542,7 +542,7 @@ __gnat_error_handler (int sig, siginfo_t *si ATTRIBUTE_UNUSED, void *ucontext)\n \t before the faulting address is accessible.  Unfortunately, Linux\n \t seems to have no way of giving us the faulting address.\n \n-\t In old versions of init.cc, we had a test of the page before the\n+\t In old versions of init.c, we had a test of the page before the\n \t stack pointer:\n \n \t   ((volatile char *)"}, {"sha": "aef5a779f7555f78c741632d25ba4ebaebdbd201", "filename": "gcc/ada/libgnarl/s-intman.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Flibgnarl%2Fs-intman.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Flibgnarl%2Fs-intman.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-intman.ads?ref=ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc", "patch": "@@ -105,7 +105,7 @@ private\n      (C, Adjust_Context_For_Raise, \"__gnat_adjust_context_for_raise\");\n    --  Target specific hook performing adjustments to the signal's machine\n    --  context, to be called before an exception may be raised from a signal\n-   --  handler. This service is provided by init.cc, together with the\n+   --  handler. This service is provided by init.c, together with the\n    --  non-tasking signal handler.\n \n end System.Interrupt_Management;"}, {"sha": "f4434f68b2256f14c7517f242e754c220a2f17f5", "filename": "gcc/ada/libgnarl/s-osinte__android.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Flibgnarl%2Fs-osinte__android.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Flibgnarl%2Fs-osinte__android.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__android.ads?ref=ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc", "patch": "@@ -309,7 +309,7 @@ package System.OS_Interface is\n    --  The alternate signal stack for stack overflows\n \n    Alternate_Stack_Size : constant := 16 * 1024;\n-   --  This must be in keeping with init.cc:__gnat_alternate_stack\n+   --  This must be in keeping with init.c:__gnat_alternate_stack\n \n    Stack_Base_Available : constant Boolean := False;\n    --  Indicates whether the stack base is available on this target"}, {"sha": "1856ce9ee58ddc680679ec5cb59e419b1b051b64", "filename": "gcc/ada/libgnarl/s-osinte__darwin.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Flibgnarl%2Fs-osinte__darwin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Flibgnarl%2Fs-osinte__darwin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__darwin.ads?ref=ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc", "patch": "@@ -288,7 +288,7 @@ package System.OS_Interface is\n    --  The alternate signal stack for stack overflows\n \n    Alternate_Stack_Size : constant := 32 * 1024;\n-   --  This must be in keeping with init.cc:__gnat_alternate_stack\n+   --  This must be in keeping with init.c:__gnat_alternate_stack\n \n    Stack_Base_Available : constant Boolean := False;\n    --  Indicates whether the stack base is available on this target. This"}, {"sha": "feaedcc0654b890b1ecd5c0d3a097db5e22d6d4a", "filename": "gcc/ada/libgnarl/s-osinte__hpux.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Flibgnarl%2Fs-osinte__hpux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Flibgnarl%2Fs-osinte__hpux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__hpux.ads?ref=ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc", "patch": "@@ -293,7 +293,7 @@ package System.OS_Interface is\n    --  The alternate signal stack for stack overflows\n \n    Alternate_Stack_Size : constant := 128 * 1024;\n-   --  This must be in keeping with init.cc:__gnat_alternate_stack\n+   --  This must be in keeping with init.c:__gnat_alternate_stack\n \n    Stack_Base_Available : constant Boolean := False;\n    --  Indicates whether the stack base is available on this target"}, {"sha": "7c9e7ca4518ba3e593d72cfee2504e49fcc040f2", "filename": "gcc/ada/libgnarl/s-osinte__linux.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Flibgnarl%2Fs-osinte__linux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Flibgnarl%2Fs-osinte__linux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__linux.ads?ref=ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc", "patch": "@@ -331,7 +331,7 @@ package System.OS_Interface is\n    pragma Import (C, sigaltstack, \"sigaltstack\");\n \n    Alternate_Stack_Size : constant := 32 * 1024;\n-   --  This must be in keeping with init.cc:__gnat_alternate_stack\n+   --  This must be in keeping with init.c:__gnat_alternate_stack\n \n    Alternate_Stack : aliased char_array (1 .. Alternate_Stack_Size);\n    pragma Import (C, Alternate_Stack, \"__gnat_alternate_stack\");"}, {"sha": "c7a887abee27f32c73c2cac462f7f03419473784", "filename": "gcc/ada/libgnarl/s-osinte__qnx.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Flibgnarl%2Fs-osinte__qnx.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Flibgnarl%2Fs-osinte__qnx.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-osinte__qnx.ads?ref=ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc", "patch": "@@ -310,7 +310,7 @@ package System.OS_Interface is\n    --  sigaltstack in QNX\n \n    Alternate_Stack_Size : constant := 0;\n-   --  This must be kept in sync with init.cc:__gnat_alternate_stack\n+   --  This must be kept in sync with init.c:__gnat_alternate_stack\n \n    Stack_Base_Available : constant Boolean := False;\n    --  Indicates whether the stack base is available on this target"}, {"sha": "2e6a0bb3bcffd46609b67e958bc4481c66b1ddb1", "filename": "gcc/ada/libgnarl/s-taskin.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Flibgnarl%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Flibgnarl%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnarl%2Fs-taskin.ads?ref=ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc", "patch": "@@ -776,7 +776,7 @@ package System.Tasking is\n    Unspecified_Priority : constant Integer := -1;\n    --  Indicates that a task has an unspecified priority. This is hardcoded as\n    --  -1 rather than System.Priority'First - 1 as the value needs to be used\n-   --  in init.cc to specify that the main task has no specified priority.\n+   --  in init.c to specify that the main task has no specified priority.\n \n    Priority_Not_Boosted : constant Integer := System.Priority'First - 1;\n    --  Definition of Priority actually has to come from the RTS configuration"}, {"sha": "543e3a29f074f69114d2166d69329f99fc98869e", "filename": "gcc/ada/rtfinal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Frtfinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc/gcc%2Fada%2Frtfinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtfinal.c?ref=ff7aeceb6b3a476c3bac66a7f39a5ef4240206fc", "patch": "@@ -43,7 +43,7 @@ extern void __gnat_runtime_finalize (void);\n    Note that __gnat_runtime_finalize() is called in adafinal()   */\n \n extern int __gnat_rt_init_count;\n-/*  see initialize.cc  */\n+/*  see initialize.c  */\n \n #if defined (__MINGW32__)\n #include \"mingw32.h\""}]}