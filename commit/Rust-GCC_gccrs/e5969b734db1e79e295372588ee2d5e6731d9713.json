{"sha": "e5969b734db1e79e295372588ee2d5e6731d9713", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU5NjliNzM0ZGIxZTc5ZTI5NTM3MjU4OGVlMmQ1ZTY3MzFkOTcxMw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-08-30T14:44:50Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-08-30T14:44:50Z"}, "message": "utils.c (build_template): Deal with parameters passed by pointer to component of multi-dimensional arrays.\n\n\t* gcc-interface/utils.c (build_template): Deal with parameters\n\tpassed by pointer to component of multi-dimensional arrays.\n\nFrom-SVN: r275190", "tree": {"sha": "e5d4fcc2cf812aaaca70d32c45f3f96c02f4f3ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5d4fcc2cf812aaaca70d32c45f3f96c02f4f3ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5969b734db1e79e295372588ee2d5e6731d9713", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5969b734db1e79e295372588ee2d5e6731d9713", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5969b734db1e79e295372588ee2d5e6731d9713", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5969b734db1e79e295372588ee2d5e6731d9713/comments", "author": null, "committer": null, "parents": [{"sha": "37cf9302639271ff141d2ff7b4e29e60a401785c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37cf9302639271ff141d2ff7b4e29e60a401785c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37cf9302639271ff141d2ff7b4e29e60a401785c"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "463a47a6619b5a58972b3aad85353296635e0e1a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5969b734db1e79e295372588ee2d5e6731d9713/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5969b734db1e79e295372588ee2d5e6731d9713/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e5969b734db1e79e295372588ee2d5e6731d9713", "patch": "@@ -1,3 +1,8 @@\n+2019-08-30  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/utils.c (build_template): Deal with parameters\n+\tpassed by pointer to component of multi-dimensional arrays.\n+\n 2019-08-30  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (annotate_value) <CALL_EXPR>: Inline the call"}, {"sha": "020257668e044708c896c37d860d8bc278ed8cf4", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5969b734db1e79e295372588ee2d5e6731d9713/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5969b734db1e79e295372588ee2d5e6731d9713/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=e5969b734db1e79e295372588ee2d5e6731d9713", "patch": "@@ -3953,27 +3953,30 @@ build_template (tree template_type, tree array_type, tree expr)\n \t  && TYPE_HAS_ACTUAL_BOUNDS_P (array_type)))\n     bound_list = TYPE_ACTUAL_BOUNDS (array_type);\n \n-  /* First make the list for a CONSTRUCTOR for the template.  Go down the\n-     field list of the template instead of the type chain because this\n-     array might be an Ada array of arrays and we can't tell where the\n-     nested arrays stop being the underlying object.  */\n-\n-  for (field = TYPE_FIELDS (template_type); field;\n-       (bound_list\n-\t? (bound_list = TREE_CHAIN (bound_list))\n-\t: (array_type = TREE_TYPE (array_type))),\n+  /* First make the list for a CONSTRUCTOR for the template.  Go down\n+     the field list of the template instead of the type chain because\n+     this array might be an Ada array of array and we can't tell where\n+     the nested array stop being the underlying object.  */\n+  for (field = TYPE_FIELDS (template_type);\n+       field;\n        field = DECL_CHAIN (DECL_CHAIN (field)))\n     {\n       tree bounds, min, max;\n \n       /* If we have a bound list, get the bounds from there.  Likewise\n \t for an ARRAY_TYPE.  Otherwise, if expr is a PARM_DECL with\n-\t DECL_BY_COMPONENT_PTR_P, use the bounds of the field in the template.\n-\t This will give us a maximum range.  */\n+\t DECL_BY_COMPONENT_PTR_P, use the bounds of the field in the\n+\t template, but this will only give us a maximum range.  */\n       if (bound_list)\n-\tbounds = TREE_VALUE (bound_list);\n+\t{\n+\t  bounds = TREE_VALUE (bound_list);\n+\t  bound_list = TREE_CHAIN (bound_list);\n+\t}\n       else if (TREE_CODE (array_type) == ARRAY_TYPE)\n-\tbounds = TYPE_INDEX_TYPE (TYPE_DOMAIN (array_type));\n+\t{\n+\t  bounds = TYPE_INDEX_TYPE (TYPE_DOMAIN (array_type));\n+\t  array_type = TREE_TYPE (array_type);\n+\t}\n       else if (expr && TREE_CODE (expr) == PARM_DECL\n \t       && DECL_BY_COMPONENT_PTR_P (expr))\n \tbounds = TREE_TYPE (field);"}]}