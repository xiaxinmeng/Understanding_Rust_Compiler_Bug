{"sha": "ec81df7d4e83ddd28014e07e0eec7fe0e3559deb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM4MWRmN2Q0ZTgzZGRkMjgwMTRlMDdlMGVlYzdmZTBlMzU1OWRlYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-12-18T07:54:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-12-18T07:54:43Z"}, "message": "re PR middle-end/38533 (tree-ssa-reassoc.c increases register pressure several times)\n\n\tPR middle-end/38533\n\t* tree-ssa-reassoc.c (remove_visited_stmt_chain): New function.\n\t(rewrite_expr_tree): Add moved argument, move stmts together if\n\tneeded.  Call remove_visited_stmt_chain.\n\t(linearize_expr_tree): Don't move stmts here.\n\t(reassociate_bb): Call remove_visited_stmt_chain if num ops is 1.\n\tAdjust rewrite_expr_tree caller.\n\n\t* gcc.dg/tree-ssa/pr38533.c: New test.\n\t* gcc.c-torture/execute/pr38533.c: New test.\n\nFrom-SVN: r142807", "tree": {"sha": "b285e368e7c5678010a07f0b6719488e1e1f94b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b285e368e7c5678010a07f0b6719488e1e1f94b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec81df7d4e83ddd28014e07e0eec7fe0e3559deb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec81df7d4e83ddd28014e07e0eec7fe0e3559deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec81df7d4e83ddd28014e07e0eec7fe0e3559deb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec81df7d4e83ddd28014e07e0eec7fe0e3559deb/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9f68560cb5dd86f27ed0df035cc4821b39885887", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f68560cb5dd86f27ed0df035cc4821b39885887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f68560cb5dd86f27ed0df035cc4821b39885887"}], "stats": {"total": 122, "additions": 112, "deletions": 10}, "files": [{"sha": "a76282c09849c0b0bf2c48b49a5f738964f7f6eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec81df7d4e83ddd28014e07e0eec7fe0e3559deb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec81df7d4e83ddd28014e07e0eec7fe0e3559deb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec81df7d4e83ddd28014e07e0eec7fe0e3559deb", "patch": "@@ -1,5 +1,13 @@\n 2008-12-18  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/38533\n+\t* tree-ssa-reassoc.c (remove_visited_stmt_chain): New function.\n+\t(rewrite_expr_tree): Add moved argument, move stmts together if\n+\tneeded.  Call remove_visited_stmt_chain.\n+\t(linearize_expr_tree): Don't move stmts here.\n+\t(reassociate_bb): Call remove_visited_stmt_chain if num ops is 1.\n+\tAdjust rewrite_expr_tree caller.\n+\n \tPR middle-end/38505\n \t* tree-ssa.c (useless_type_conversion_p_1): Return\n \tfalse if inner_type is incomplete and outer_type is complete."}, {"sha": "640cf78646d1b3ff7b94605bc6fbe79449c217c8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec81df7d4e83ddd28014e07e0eec7fe0e3559deb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec81df7d4e83ddd28014e07e0eec7fe0e3559deb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec81df7d4e83ddd28014e07e0eec7fe0e3559deb", "patch": "@@ -1,5 +1,9 @@\n 2008-12-18  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/38533\n+\t* gcc.dg/tree-ssa/pr38533.c: New test.\n+\t* gcc.c-torture/execute/pr38533.c: New test.\n+\n \tPR middle-end/38505\n \t* gcc.c-torture/compile/pr38505.c: New test.\n "}, {"sha": "44eb5b87d41dff5cd3a55159c1a5db44f1999104", "filename": "gcc/testsuite/gcc.c-torture/execute/pr38533.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec81df7d4e83ddd28014e07e0eec7fe0e3559deb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr38533.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec81df7d4e83ddd28014e07e0eec7fe0e3559deb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr38533.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr38533.c?ref=ec81df7d4e83ddd28014e07e0eec7fe0e3559deb", "patch": "@@ -0,0 +1,21 @@\n+/* PR middle-end/38533 */\n+\n+#define A asm volatile (\"\" : \"=r\" (f) : \"0\" (0)); e |= f;\n+#define B A A A A A A A A A A A\n+#define C B B B B B B B B B B B\n+\n+int\n+foo (void)\n+{\n+  int e = 0, f;\n+  C C B B B B B A A A A A A\n+  return e;\n+}\n+\n+int\n+main (void)\n+{\n+  if (foo ())\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "e78722760472780928947365762a195e97589625", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr38533.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec81df7d4e83ddd28014e07e0eec7fe0e3559deb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr38533.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec81df7d4e83ddd28014e07e0eec7fe0e3559deb/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr38533.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr38533.c?ref=ec81df7d4e83ddd28014e07e0eec7fe0e3559deb", "patch": "@@ -0,0 +1,30 @@\n+/* PR middle-end/38533 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-reassoc1\" } */\n+\n+#define A asm volatile (\"\" : \"=r\" (f) : \"0\" (0)); e |= f;\n+#define B A A A A A A A A A A A\n+#define C B B B B B B B B B B B\n+\n+int\n+foo (void)\n+{\n+  int e = 0, f;\n+  C C B B B B B A A A A A A\n+  return e;\n+}\n+\n+int\n+main (void)\n+{\n+  if (foo ())\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* Verify that reassoc hasn't increased register pressure too much\n+   by moving all bitwise ors after the last __asm__.  There should\n+   be exactly 2 (first) __asm__ stmts with no intervening stmts,\n+   all others should have some bitwise or in between.  */\n+/* { dg-final { scan-tree-dump-times \"__asm__\\[^;\\n]*;\\n *__asm__\" 1 \"reassoc1\"} } */\n+/* { dg-final { cleanup-tree-dump \"reassoc1\" } } */"}, {"sha": "d539398c5c722295f310f887531bc3749a2062f8", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 49, "deletions": 10, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec81df7d4e83ddd28014e07e0eec7fe0e3559deb/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec81df7d4e83ddd28014e07e0eec7fe0e3559deb/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=ec81df7d4e83ddd28014e07e0eec7fe0e3559deb", "patch": "@@ -1265,13 +1265,36 @@ is_phi_for_stmt (gimple stmt, tree operand)\n   return false;\n }\n \n+/* Remove def stmt of VAR if VAR has zero uses and recurse\n+   on rhs1 operand if so.  */\n+\n+static void\n+remove_visited_stmt_chain (tree var)\n+{\n+  gimple stmt;\n+  gimple_stmt_iterator gsi;\n+\n+  while (1)\n+    {\n+      if (TREE_CODE (var) != SSA_NAME || !has_zero_uses (var))\n+\treturn;\n+      stmt = SSA_NAME_DEF_STMT (var);\n+      if (!gimple_visited_p (stmt))\n+\treturn;\n+      var = gimple_assign_rhs1 (stmt);\n+      gsi = gsi_for_stmt (stmt);\n+      gsi_remove (&gsi, true);\n+      release_defs (stmt);\n+    }\n+}\n+\n /* Recursively rewrite our linearized statements so that the operators\n    match those in OPS[OPINDEX], putting the computation in rank\n    order.  */\n \n static void\n rewrite_expr_tree (gimple stmt, unsigned int opindex,\n-\t\t   VEC(operand_entry_t, heap) * ops)\n+\t\t   VEC(operand_entry_t, heap) * ops, bool moved)\n {\n   tree rhs1 = gimple_assign_rhs1 (stmt);\n   tree rhs2 = gimple_assign_rhs2 (stmt);\n@@ -1348,6 +1371,8 @@ rewrite_expr_tree (gimple stmt, unsigned int opindex,\n \t  gimple_assign_set_rhs1 (stmt, oe1->op);\n \t  gimple_assign_set_rhs2 (stmt, oe2->op);\n \t  update_stmt (stmt);\n+\t  if (rhs1 != oe1->op && rhs1 != oe2->op)\n+\t    remove_visited_stmt_chain (rhs1);\n \n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {\n@@ -1367,6 +1392,24 @@ rewrite_expr_tree (gimple stmt, unsigned int opindex,\n \n   if (oe->op != rhs2)\n     {\n+      if (!moved)\n+\t{\n+\t  gimple_stmt_iterator gsinow, gsirhs1;\n+\t  gimple stmt1 = stmt, stmt2;\n+\t  unsigned int count;\n+\n+\t  gsinow = gsi_for_stmt (stmt);\n+\t  count = VEC_length (operand_entry_t, ops) - opindex - 2;\n+\t  while (count-- != 0)\n+\t    {\n+\t      stmt2 = SSA_NAME_DEF_STMT (gimple_assign_rhs1 (stmt1));\n+\t      gsirhs1 = gsi_for_stmt (stmt2);\n+\t      gsi_move_before (&gsirhs1, &gsinow);\n+\t      gsi_prev (&gsinow);\n+\t      stmt1 = stmt2;\n+\t    }\n+\t  moved = true;\n+\t}\n \n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n@@ -1385,7 +1428,7 @@ rewrite_expr_tree (gimple stmt, unsigned int opindex,\n     }\n   /* Recurse on the LHS of the binary operator, which is guaranteed to\n      be the non-leaf side.  */\n-  rewrite_expr_tree (SSA_NAME_DEF_STMT (rhs1), opindex + 1, ops);\n+  rewrite_expr_tree (SSA_NAME_DEF_STMT (rhs1), opindex + 1, ops, moved);\n }\n \n /* Transform STMT, which is really (A +B) + (C + D) into the left\n@@ -1561,7 +1604,6 @@ static void\n linearize_expr_tree (VEC(operand_entry_t, heap) **ops, gimple stmt,\n \t\t     bool is_associative, bool set_visited)\n {\n-  gimple_stmt_iterator gsinow, gsilhs;\n   tree binlhs = gimple_assign_rhs1 (stmt);\n   tree binrhs = gimple_assign_rhs2 (stmt);\n   gimple binlhsdef, binrhsdef;\n@@ -1642,9 +1684,6 @@ linearize_expr_tree (VEC(operand_entry_t, heap) **ops, gimple stmt,\n   gcc_assert (TREE_CODE (binrhs) != SSA_NAME\n \t      || !is_reassociable_op (SSA_NAME_DEF_STMT (binrhs),\n \t\t\t\t      rhscode, loop));\n-  gsinow = gsi_for_stmt (stmt);\n-  gsilhs = gsi_for_stmt (SSA_NAME_DEF_STMT (binlhs));\n-  gsi_move_before (&gsilhs, &gsinow);\n   linearize_expr_tree (ops, SSA_NAME_DEF_STMT (binlhs),\n \t\t       is_associative, set_visited);\n   add_to_ops_vec (ops, binrhs);\n@@ -1862,11 +1901,13 @@ reassociate_bb (basic_block bb)\n \t\t      fprintf (dump_file, \"Transforming \");\n \t\t      print_gimple_stmt (dump_file, stmt, 0, 0);\n \t\t    }\n-\t\t  \n+\n+\t\t  rhs1 = gimple_assign_rhs1 (stmt);\n \t\t  gimple_assign_set_rhs_from_tree (&gsi,\n \t\t\t\t\t\t   VEC_last (operand_entry_t,\n \t\t\t\t\t\t\t     ops)->op);\n \t\t  update_stmt (stmt);\n+\t\t  remove_visited_stmt_chain (rhs1);\n \n \t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t    {\n@@ -1875,9 +1916,7 @@ reassociate_bb (basic_block bb)\n \t\t    }\n \t\t}\n \t      else\n-\t\t{\n-\t\t  rewrite_expr_tree (stmt, 0, ops);\n-\t\t}\n+\t\trewrite_expr_tree (stmt, 0, ops, false);\n \n \t      VEC_free (operand_entry_t, heap, ops);\n \t    }"}]}