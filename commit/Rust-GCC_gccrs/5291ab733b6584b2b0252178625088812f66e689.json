{"sha": "5291ab733b6584b2b0252178625088812f66e689", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI5MWFiNzMzYjY1ODRiMmIwMjUyMTc4NjI1MDg4ODEyZjY2ZTY4OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-04-07T08:04:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-04-07T08:04:32Z"}, "message": "tree-affine.c (wide_int_ext_for_comb): Take type rather than aff_tree.\n\n2017-04-07  Richard Biener  <rguenther@suse.de>\n\n\t* tree-affine.c (wide_int_ext_for_comb): Take type rather\n\tthan aff_tree.\n\t(aff_combination_const): Adjust.\n\t(aff_combination_scale): Likewise.\n\t(aff_combination_add_elt): Likewise.\n\t(aff_combination_add_cst): Likewise.\n\t(aff_combination_convert): Likewise.\n\t(add_elt_to_tree): Likewise.  Remove unused argument.\n\t(aff_combination_to_tree): Adjust calls to add_elt_to_tree.\n\nFrom-SVN: r246755", "tree": {"sha": "04dfd94997841896f73e9acf886019cf0c4c35d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/04dfd94997841896f73e9acf886019cf0c4c35d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5291ab733b6584b2b0252178625088812f66e689", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5291ab733b6584b2b0252178625088812f66e689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5291ab733b6584b2b0252178625088812f66e689", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5291ab733b6584b2b0252178625088812f66e689/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ca92bdca07e3a3cac4885e6b0e1b30e50acae39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ca92bdca07e3a3cac4885e6b0e1b30e50acae39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ca92bdca07e3a3cac4885e6b0e1b30e50acae39"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "80ff2add49d0b3f5de6b9c40c47171c5532c12f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5291ab733b6584b2b0252178625088812f66e689/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5291ab733b6584b2b0252178625088812f66e689/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5291ab733b6584b2b0252178625088812f66e689", "patch": "@@ -1,3 +1,15 @@\n+2017-04-07  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-affine.c (wide_int_ext_for_comb): Take type rather\n+\tthan aff_tree.\n+\t(aff_combination_const): Adjust.\n+\t(aff_combination_scale): Likewise.\n+\t(aff_combination_add_elt): Likewise.\n+\t(aff_combination_add_cst): Likewise.\n+\t(aff_combination_convert): Likewise.\n+\t(add_elt_to_tree): Likewise.  Remove unused argument.\n+\t(aff_combination_to_tree): Adjust calls to add_elt_to_tree.\n+\n 2017-04-07  Sebastian Huber  <sebastian.huber@embedded-brains.de>\n \n \t* config/arm/arm.h (ARM_DEFAULT_SHORT_ENUMS): Provide default"}, {"sha": "30fff67b0054eb8ddbfc4c19f5425f5264cb7855", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5291ab733b6584b2b0252178625088812f66e689/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5291ab733b6584b2b0252178625088812f66e689/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=5291ab733b6584b2b0252178625088812f66e689", "patch": "@@ -34,9 +34,9 @@ along with GCC; see the file COPYING3.  If not see\n /* Extends CST as appropriate for the affine combinations COMB.  */\n \n widest_int\n-wide_int_ext_for_comb (const widest_int &cst, aff_tree *comb)\n+wide_int_ext_for_comb (const widest_int &cst, tree type)\n {\n-  return wi::sext (cst, TYPE_PRECISION (comb->type));\n+  return wi::sext (cst, TYPE_PRECISION (type));\n }\n \n /* Initializes affine combination COMB so that its value is zero in TYPE.  */\n@@ -59,7 +59,7 @@ void\n aff_combination_const (aff_tree *comb, tree type, const widest_int &cst)\n {\n   aff_combination_zero (comb, type);\n-  comb->offset = wide_int_ext_for_comb (cst, comb);;\n+  comb->offset = wide_int_ext_for_comb (cst, comb->type);;\n }\n \n /* Sets COMB to single element ELT.  */\n@@ -81,7 +81,7 @@ aff_combination_scale (aff_tree *comb, const widest_int &scale_in)\n {\n   unsigned i, j;\n \n-  widest_int scale = wide_int_ext_for_comb (scale_in, comb);\n+  widest_int scale = wide_int_ext_for_comb (scale_in, comb->type);\n   if (scale == 1)\n     return;\n \n@@ -91,11 +91,11 @@ aff_combination_scale (aff_tree *comb, const widest_int &scale_in)\n       return;\n     }\n \n-  comb->offset = wide_int_ext_for_comb (scale * comb->offset, comb);\n+  comb->offset = wide_int_ext_for_comb (scale * comb->offset, comb->type);\n   for (i = 0, j = 0; i < comb->n; i++)\n     {\n       widest_int new_coef\n-\t= wide_int_ext_for_comb (scale * comb->elts[i].coef, comb);\n+\t= wide_int_ext_for_comb (scale * comb->elts[i].coef, comb->type);\n       /* A coefficient may become zero due to overflow.  Remove the zero\n \t elements.  */\n       if (new_coef == 0)\n@@ -132,15 +132,15 @@ aff_combination_add_elt (aff_tree *comb, tree elt, const widest_int &scale_in)\n   unsigned i;\n   tree type;\n \n-  widest_int scale = wide_int_ext_for_comb (scale_in, comb);\n+  widest_int scale = wide_int_ext_for_comb (scale_in, comb->type);\n   if (scale == 0)\n     return;\n \n   for (i = 0; i < comb->n; i++)\n     if (operand_equal_p (comb->elts[i].val, elt, 0))\n       {\n \twidest_int new_coef\n-\t  = wide_int_ext_for_comb (comb->elts[i].coef + scale, comb);\n+\t  = wide_int_ext_for_comb (comb->elts[i].coef + scale, comb->type);\n \tif (new_coef != 0)\n \t  {\n \t    comb->elts[i].coef = new_coef;\n@@ -191,7 +191,7 @@ aff_combination_add_elt (aff_tree *comb, tree elt, const widest_int &scale_in)\n static void\n aff_combination_add_cst (aff_tree *c, const widest_int &cst)\n {\n-  c->offset = wide_int_ext_for_comb (c->offset + cst, c);\n+  c->offset = wide_int_ext_for_comb (c->offset + cst, c->type);\n }\n \n /* Adds COMB2 to COMB1.  */\n@@ -230,7 +230,7 @@ aff_combination_convert (aff_tree *comb, tree type)\n   if (TYPE_PRECISION (type) == TYPE_PRECISION (comb_type))\n     return;\n \n-  comb->offset = wide_int_ext_for_comb (comb->offset, comb);\n+  comb->offset = wide_int_ext_for_comb (comb->offset, comb->type);\n   for (i = j = 0; i < comb->n; i++)\n     {\n       if (comb->elts[i].coef == 0)\n@@ -374,15 +374,14 @@ tree_to_aff_combination (tree expr, tree type, aff_tree *comb)\n    combination COMB.  */\n \n static tree\n-add_elt_to_tree (tree expr, tree type, tree elt, const widest_int &scale_in,\n-\t\t aff_tree *comb ATTRIBUTE_UNUSED)\n+add_elt_to_tree (tree expr, tree type, tree elt, const widest_int &scale_in)\n {\n   enum tree_code code;\n   tree type1 = type;\n   if (POINTER_TYPE_P (type))\n     type1 = sizetype;\n \n-  widest_int scale = wide_int_ext_for_comb (scale_in, comb);\n+  widest_int scale = wide_int_ext_for_comb (scale_in, type);\n \n   if (scale == -1\n       && POINTER_TYPE_P (TREE_TYPE (elt)))\n@@ -466,11 +465,10 @@ aff_combination_to_tree (aff_tree *comb)\n   gcc_assert (comb->n == MAX_AFF_ELTS || comb->rest == NULL_TREE);\n \n   for (i = 0; i < comb->n; i++)\n-    expr = add_elt_to_tree (expr, type, comb->elts[i].val, comb->elts[i].coef,\n-\t\t\t    comb);\n+    expr = add_elt_to_tree (expr, type, comb->elts[i].val, comb->elts[i].coef);\n \n   if (comb->rest)\n-    expr = add_elt_to_tree (expr, type, comb->rest, 1, comb);\n+    expr = add_elt_to_tree (expr, type, comb->rest, 1);\n \n   /* Ensure that we get x - 1, not x + (-1) or x + 0xff..f if x is\n      unsigned.  */\n@@ -484,8 +482,7 @@ aff_combination_to_tree (aff_tree *comb)\n       off = comb->offset;\n       sgn = 1;\n     }\n-  return add_elt_to_tree (expr, type, wide_int_to_tree (type1, off), sgn,\n-\t\t\t  comb);\n+  return add_elt_to_tree (expr, type, wide_int_to_tree (type1, off), sgn);\n }\n \n /* Copies the tree elements of COMB to ensure that they are not shared.  */"}]}