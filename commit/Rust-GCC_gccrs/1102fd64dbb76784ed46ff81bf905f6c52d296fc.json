{"sha": "1102fd64dbb76784ed46ff81bf905f6c52d296fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEwMmZkNjRkYmI3Njc4NGVkNDZmZjgxYmY5MDVmNmM1MmQyOTZmYw==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2018-07-31T09:44:48Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2018-07-31T09:44:48Z"}, "message": "Improve specs processing to allow %* in function arguments\n\n2018-07-31  Olivier Hainque  <hainque@adacore.com>\n\n\t* gcc.c (handle_spec_function): Accept a soft_matched_part\n\targument, as do_spec_1.  Pass it down to ...\n\t(eval_spec_function): Accept a soft_matched_part argument,\n\tand pass it down to ...\n\t(do_spec_2): Accept a soft_matched_part argument, and pass\n\tit down to do_spec_1.\n\t(do_spec_1): Pass soft_matched_part to handle_spec_function.\n\t(handle_braces): Update call to handle_spec_function.\n\t(driver::set_up_specs): Update calls to do_spec_2.\n\t(compare_debug_dump_opt_spec_function): Likewise.\n\t(compare_debug_self_opt_spec_function): Likewise.\n\nFrom-SVN: r263087", "tree": {"sha": "01df7b448b42224660ce88c2de17c35bbc6c75f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01df7b448b42224660ce88c2de17c35bbc6c75f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1102fd64dbb76784ed46ff81bf905f6c52d296fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1102fd64dbb76784ed46ff81bf905f6c52d296fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1102fd64dbb76784ed46ff81bf905f6c52d296fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1102fd64dbb76784ed46ff81bf905f6c52d296fc/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f37866e818ab839e0db68be23e5a339e5e7c19dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f37866e818ab839e0db68be23e5a339e5e7c19dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f37866e818ab839e0db68be23e5a339e5e7c19dc"}], "stats": {"total": 65, "additions": 43, "deletions": 22}, "files": [{"sha": "3237566b91a4980056f1e80daa8d5d28994cb917", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1102fd64dbb76784ed46ff81bf905f6c52d296fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1102fd64dbb76784ed46ff81bf905f6c52d296fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1102fd64dbb76784ed46ff81bf905f6c52d296fc", "patch": "@@ -1,3 +1,17 @@\n+2018-07-31  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gcc.c (handle_spec_function): Accept a soft_matched_part\n+\targument, as do_spec_1.  Pass it down to ...\n+\t(eval_spec_function): Accept a soft_matched_part argument,\n+\tand pass it down to ...\n+\t(do_spec_2): Accept a soft_matched_part argument, and pass\n+\tit down to do_spec_1.\n+\t(do_spec_1): Pass soft_matched_part to handle_spec_function.\n+\t(handle_braces): Update call to handle_spec_function.\n+\t(driver::set_up_specs): Update calls to do_spec_2.\n+\t(compare_debug_dump_opt_spec_function): Likewise.\n+\t(compare_debug_self_opt_spec_function): Likewise.\n+\n 2018-07-31  Olivier Hainque  <hainque@adacore.com>\n \n \t* common.opt (nolibc): New option."}, {"sha": "780d4859ef33e4d58dd2e23d09b5153f3c3dad8a", "filename": "gcc/gcc.c", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1102fd64dbb76784ed46ff81bf905f6c52d296fc/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1102fd64dbb76784ed46ff81bf905f6c52d296fc/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=1102fd64dbb76784ed46ff81bf905f6c52d296fc", "patch": "@@ -355,12 +355,12 @@ static inline void mark_matching_switches (const char *, const char *, int);\n static inline void process_marked_switches (void);\n static const char *process_brace_body (const char *, const char *, const char *, int, int);\n static const struct spec_function *lookup_spec_function (const char *);\n-static const char *eval_spec_function (const char *, const char *);\n-static const char *handle_spec_function (const char *, bool *);\n+static const char *eval_spec_function (const char *, const char *, const char *);\n+static const char *handle_spec_function (const char *, bool *, const char *);\n static char *save_string (const char *, int);\n static void set_collect_gcc_options (void);\n static int do_spec_1 (const char *, int, const char *);\n-static int do_spec_2 (const char *);\n+static int do_spec_2 (const char *, const char *);\n static void do_option_spec (const char *, const char *);\n static void do_self_spec (const char *);\n static const char *find_file (const char *);\n@@ -4939,7 +4939,7 @@ do_spec (const char *spec)\n {\n   int value;\n \n-  value = do_spec_2 (spec);\n+  value = do_spec_2 (spec, NULL);\n \n   /* Force out any unfinished command.\n      If -pipe, this forces out the last command if it ended in `|'.  */\n@@ -4958,8 +4958,11 @@ do_spec (const char *spec)\n   return value;\n }\n \n+/* Process the spec SPEC, with SOFT_MATCHED_PART designating the current value\n+   of a matched * pattern which may be re-injected by way of %*.  */\n+\n static int\n-do_spec_2 (const char *spec)\n+do_spec_2 (const char *spec, const char *soft_matched_part)\n {\n   int result;\n \n@@ -4972,14 +4975,13 @@ do_spec_2 (const char *spec)\n   input_from_pipe = 0;\n   suffix_subst = NULL;\n \n-  result = do_spec_1 (spec, 0, NULL);\n+  result = do_spec_1 (spec, 0, soft_matched_part);\n \n   end_going_arg ();\n \n   return result;\n }\n \n-\n /* Process the given spec string and add any new options to the end\n    of the switches/n_switches array.  */\n \n@@ -5037,7 +5039,7 @@ do_self_spec (const char *spec)\n {\n   int i;\n \n-  do_spec_2 (spec);\n+  do_spec_2 (spec, NULL);\n   do_spec_1 (\" \", 0, NULL);\n \n   /* Mark %<S switches processed by do_self_spec to be ignored permanently.\n@@ -5877,7 +5879,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t    break;\n \n \t  case ':':\n-\t    p = handle_spec_function (p, NULL);\n+\t    p = handle_spec_function (p, NULL, soft_matched_part);\n \t    if (p == 0)\n \t      return -1;\n \t    break;\n@@ -6039,7 +6041,8 @@ lookup_spec_function (const char *name)\n /* Evaluate a spec function.  */\n \n static const char *\n-eval_spec_function (const char *func, const char *args)\n+eval_spec_function (const char *func, const char *args,\n+\t\t    const char *soft_matched_part)\n {\n   const struct spec_function *sf;\n   const char *funcval;\n@@ -6089,7 +6092,7 @@ eval_spec_function (const char *func, const char *args)\n      arguments.  */\n \n   alloc_args ();\n-  if (do_spec_2 (args) < 0)\n+  if (do_spec_2 (args, soft_matched_part) < 0)\n     fatal_error (input_location, \"error in args to spec function %qs\", func);\n \n   /* argbuf_index is an index for the next argument to be inserted, and\n@@ -6126,10 +6129,14 @@ eval_spec_function (const char *func, const char *args)\n    NULL if no processing is required.\n \n    If RETVAL_NONNULL is not NULL, then store a bool whether function\n-   returned non-NULL.  */\n+   returned non-NULL.\n+\n+   SOFT_MATCHED_PART holds the current value of a matched * pattern, which\n+   may be re-expanded with a %* as part of the function arguments.  */\n \n static const char *\n-handle_spec_function (const char *p, bool *retval_nonnull)\n+handle_spec_function (const char *p, bool *retval_nonnull,\n+\t\t      const char *soft_matched_part)\n {\n   char *func, *args;\n   const char *endp, *funcval;\n@@ -6172,7 +6179,7 @@ handle_spec_function (const char *p, bool *retval_nonnull)\n \n   /* p now points to just past the end of the spec function expression.  */\n \n-  funcval = eval_spec_function (func, args);\n+  funcval = eval_spec_function (func, args, soft_matched_part);\n   if (funcval != NULL && do_spec_1 (funcval, 0, NULL) < 0)\n     p = NULL;\n   if (retval_nonnull)\n@@ -6326,7 +6333,7 @@ handle_braces (const char *p)\n \t{\n \t  atom = NULL;\n \t  end_atom = NULL;\n-\t  p = handle_spec_function (p + 2, &a_matched);\n+\t  p = handle_spec_function (p + 2, &a_matched, NULL);\n \t}\n       else\n \t{\n@@ -7561,7 +7568,7 @@ driver::set_up_specs () const\n   /* Process sysroot_suffix_spec.  */\n   if (*sysroot_suffix_spec != 0\n       && !no_sysroot_suffix\n-      && do_spec_2 (sysroot_suffix_spec) == 0)\n+      && do_spec_2 (sysroot_suffix_spec, NULL) == 0)\n     {\n       if (argbuf.length () > 1)\n         error (\"spec failure: more than one arg to SYSROOT_SUFFIX_SPEC\");\n@@ -7585,7 +7592,7 @@ driver::set_up_specs () const\n   /* Process sysroot_hdrs_suffix_spec.  */\n   if (*sysroot_hdrs_suffix_spec != 0\n       && !no_sysroot_suffix\n-      && do_spec_2 (sysroot_hdrs_suffix_spec) == 0)\n+      && do_spec_2 (sysroot_hdrs_suffix_spec, NULL) == 0)\n     {\n       if (argbuf.length () > 1)\n         error (\"spec failure: more than one arg to SYSROOT_HEADERS_SUFFIX_SPEC\");\n@@ -7595,7 +7602,7 @@ driver::set_up_specs () const\n \n   /* Look for startfiles in the standard places.  */\n   if (*startfile_prefix_spec != 0\n-      && do_spec_2 (startfile_prefix_spec) == 0\n+      && do_spec_2 (startfile_prefix_spec, NULL) == 0\n       && do_spec_1 (\" \", 0, NULL) == 0)\n     {\n       const char *arg;\n@@ -9640,7 +9647,7 @@ compare_debug_dump_opt_spec_function (int arg,\n     fatal_error (input_location,\n \t\t \"too many arguments to %%:compare-debug-dump-opt\");\n \n-  do_spec_2 (\"%{fdump-final-insns=*:%*}\");\n+  do_spec_2 (\"%{fdump-final-insns=*:%*}\", NULL);\n   do_spec_1 (\" \", 0, NULL);\n \n   if (argbuf.length () > 0\n@@ -9658,13 +9665,13 @@ compare_debug_dump_opt_spec_function (int arg,\n \n       if (argbuf.length () > 0)\n \t{\n-\t  do_spec_2 (\"%{o*:%*}%{!o:%{!S:%b%O}%{S:%b.s}}\");\n+\t  do_spec_2 (\"%{o*:%*}%{!o:%{!S:%b%O}%{S:%b.s}}\", NULL);\n \t  ext = \".gkd\";\n \t}\n       else if (!compare_debug)\n \treturn NULL;\n       else\n-\tdo_spec_2 (\"%g.gkd\");\n+\tdo_spec_2 (\"%g.gkd\", NULL);\n \n       do_spec_1 (\" \", 0, NULL);\n \n@@ -9716,7 +9723,7 @@ compare_debug_self_opt_spec_function (int arg,\n   if (compare_debug >= 0)\n     return NULL;\n \n-  do_spec_2 (\"%{c|S:%{o*:%*}}\");\n+  do_spec_2 (\"%{c|S:%{o*:%*}}\", NULL);\n   do_spec_1 (\" \", 0, NULL);\n \n   if (argbuf.length () > 0)"}]}