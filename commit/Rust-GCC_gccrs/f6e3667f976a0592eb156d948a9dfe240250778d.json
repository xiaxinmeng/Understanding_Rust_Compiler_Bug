{"sha": "f6e3667f976a0592eb156d948a9dfe240250778d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZlMzY2N2Y5NzZhMDU5MmViMTU2ZDk0OGE5ZGZlMjQwMjUwNzc4ZA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2015-06-17T17:55:26Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "2015-06-17T17:55:26Z"}, "message": "tree-core.h (tree_target_option): Make opts field a pointer to a cl_target_option instead of an instance of the...\n\n\n2017-06-17  Andrew MacLeod  <amacleod@redhat.com>\n\n\t* tree-core.h (tree_target_option): Make opts field a pointer to a \n\tcl_target_option instead of an instance of the struct.\n\t* tree.h (TREE_TARGET_OPTION): Return the pointer, not an address of\n\tthe structure.\n\t* tree.c (make_node_stat ): Allocate a cl_target_option struct for \n\tTARGET_OPTION_NODE.\n\t(copy_node_stat): Allocate and copy struct cl_target_option.\n\nFrom-SVN: r224567", "tree": {"sha": "47ffd968873b970774f3d2d5fcd11f73725f8a54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47ffd968873b970774f3d2d5fcd11f73725f8a54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6e3667f976a0592eb156d948a9dfe240250778d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e3667f976a0592eb156d948a9dfe240250778d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6e3667f976a0592eb156d948a9dfe240250778d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e3667f976a0592eb156d948a9dfe240250778d/comments", "author": null, "committer": null, "parents": [{"sha": "21bdef94b1e8c178e932cb5b560726c2c8c00323", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21bdef94b1e8c178e932cb5b560726c2c8c00323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21bdef94b1e8c178e932cb5b560726c2c8c00323"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "868a70808a4576315dfcc4c0da58ff0fdfe17ce6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e3667f976a0592eb156d948a9dfe240250778d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e3667f976a0592eb156d948a9dfe240250778d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6e3667f976a0592eb156d948a9dfe240250778d", "patch": "@@ -1,3 +1,13 @@\n+2017-06-17  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* tree-core.h (tree_target_option): Make opts field a pointer to a \n+\tcl_target_option instead of an instance of the struct.\n+\t* tree.h (TREE_TARGET_OPTION): Return the pointer, not an address of\n+\tthe structure.\n+\t* tree.c (make_node_stat ): Allocate a cl_target_option struct for \n+\tTARGET_OPTION_NODE.\n+\t(copy_node_stat): Allocate and copy struct cl_target_option.\n+\n 2015-06-17  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* tree.h (merge_dllimport_decl_attributes, handle_dll_attribute):"}, {"sha": "58dc301b99097c1d38407d7d53794e33a81bc4f8", "filename": "gcc/tree-core.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e3667f976a0592eb156d948a9dfe240250778d/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e3667f976a0592eb156d948a9dfe240250778d/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=f6e3667f976a0592eb156d948a9dfe240250778d", "patch": "@@ -1676,7 +1676,7 @@ struct GTY(()) tree_target_option {\n   struct target_globals *globals;\n \n   /* The optimization options used by the user.  */\n-  struct cl_target_option opts;\n+  struct cl_target_option *opts;\n };\n \n /* Define the overall contents of a tree node."}, {"sha": "f6ab441ae03f1eb64fd1033c855a1ad4bcd67137", "filename": "gcc/tree.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e3667f976a0592eb156d948a9dfe240250778d/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e3667f976a0592eb156d948a9dfe240250778d/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f6e3667f976a0592eb156d948a9dfe240250778d", "patch": "@@ -1094,6 +1094,13 @@ make_node_stat (enum tree_code code MEM_STAT_DECL)\n \t}\n       break;\n \n+    case tcc_exceptional:\n+      if (code == TARGET_OPTION_NODE)\n+\t{\n+\t  TREE_TARGET_OPTION(t) = ggc_cleared_alloc<struct cl_target_option> ();\n+\t}\n+      break;\n+\n     default:\n       /* Other classes need no special treatment.  */\n       break;\n@@ -1175,6 +1182,12 @@ copy_node_stat (tree node MEM_STAT_DECL)\n \t  TYPE_CACHED_VALUES (t) = NULL_TREE;\n \t}\n     }\n+    else if (code == TARGET_OPTION_NODE)\n+      {\n+\tTREE_TARGET_OPTION (t) = ggc_alloc<struct cl_target_option>();\n+\tmemcpy (TREE_TARGET_OPTION (t), TREE_TARGET_OPTION (node),\n+\t\tsizeof (struct cl_target_option));\n+      }\n \n   return t;\n }"}, {"sha": "34b93681140d179ba3cec1e86c177c33a3b34fcb", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6e3667f976a0592eb156d948a9dfe240250778d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6e3667f976a0592eb156d948a9dfe240250778d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=f6e3667f976a0592eb156d948a9dfe240250778d", "patch": "@@ -2839,7 +2839,7 @@ extern vec<tree, va_gc> **decl_debug_args_insert (tree);\n extern tree build_optimization_node (struct gcc_options *opts);\n \n #define TREE_TARGET_OPTION(NODE) \\\n-  (&TARGET_OPTION_NODE_CHECK (NODE)->target_option.opts)\n+  (TARGET_OPTION_NODE_CHECK (NODE)->target_option.opts)\n \n #define TREE_TARGET_GLOBALS(NODE) \\\n   (TARGET_OPTION_NODE_CHECK (NODE)->target_option.globals)"}]}