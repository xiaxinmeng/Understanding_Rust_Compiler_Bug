{"sha": "5346f1b92df743f70430c535636ebf6156419a84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM0NmYxYjkyZGY3NDNmNzA0MzBjNTM1NjM2ZWJmNjE1NjQxOWE4NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-26T21:57:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-10-26T21:57:28Z"}, "message": "(enum st): Define st_Struct, st_Union, and st_Enum.\n\n(st_to_string): Handle them.\n(type_to_string): Add fdp argument; pass it to emit_aggregate.\n(print_symbol): Add fdp argument; pass it to type_to_string.\nHandle st_Struct, st_Union, and st_Enum.\n(emit_aggregate): Add fdp argument.  Handle opaque types.  Map through\nRFD entries.\n(print_file_desc): Pass FDR to print_symbol.\n(main): Pass null FDR to type_to_string.\n\nFrom-SVN: r10516", "tree": {"sha": "177707f4b7edb036e8960064e39e38bd3cf924f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/177707f4b7edb036e8960064e39e38bd3cf924f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5346f1b92df743f70430c535636ebf6156419a84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5346f1b92df743f70430c535636ebf6156419a84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5346f1b92df743f70430c535636ebf6156419a84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5346f1b92df743f70430c535636ebf6156419a84/comments", "author": null, "committer": null, "parents": [{"sha": "94f3f2cb2c12bb7f6374d6f473dd142ba51125ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94f3f2cb2c12bb7f6374d6f473dd142ba51125ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94f3f2cb2c12bb7f6374d6f473dd142ba51125ae"}], "stats": {"total": 88, "additions": 60, "deletions": 28}, "files": [{"sha": "36dfd150fa8911765d638f7c0d39ad798e76692a", "filename": "gcc/mips-tdump.c", "status": "modified", "additions": 60, "deletions": 28, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5346f1b92df743f70430c535636ebf6156419a84/gcc%2Fmips-tdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5346f1b92df743f70430c535636ebf6156419a84/gcc%2Fmips-tdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tdump.c?ref=5346f1b92df743f70430c535636ebf6156419a84", "patch": "@@ -1,5 +1,5 @@\n /* Read and manage MIPS symbol tables from object modules.\n-   Copyright (C) 1991, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1994, 1995 Free Software Foundation, Inc.\n    Contributed by hartzell@boulder.colorado.edu,\n    Rewritten by meissner@osf.org.\n \n@@ -144,6 +144,11 @@ typedef enum st {\n   st_StaticProc\t= stStaticProc,\t/* load time only static procs */\n   st_StaParam\t= stStaParam,\t/* Fortran static parameters */\n   st_Constant\t= stConstant,\t/* const */\n+#ifdef stStruct\n+  st_Struct\t= stStruct,\t/* struct */\n+  st_Union\t= stUnion,\t/* union */\n+  st_Enum\t= stEnum,\t/* enum */\n+#endif\n   st_Str\t= stStr,\t/* string */\n   st_Number\t= stNumber,\t/* pure number (ie. 4 NOR 2+2) */\n   st_Expr\t= stExpr,\t/* 2+2 vs. 4 */\n@@ -260,14 +265,14 @@ void  read_tfile\t__proto((void));\n void  print_global_hdr\t__proto((struct filehdr *));\n void  print_sym_hdr\t__proto((HDRR *));\n void  print_file_desc\t__proto((FDR *, int));\n-void  print_symbol\t__proto((SYMR *, int, char *, AUXU *, int));\n+void  print_symbol\t__proto((SYMR *, int, char *, AUXU *, int, FDR *));\n void  print_aux\t\t__proto((AUXU, int, int));\n-void  emit_aggregate\t__proto((char *, AUXU, AUXU, const char *));\n+void  emit_aggregate\t__proto((char *, AUXU, AUXU, const char *, FDR *));\n char *st_to_string\t__proto((st_t));\n char *sc_to_string\t__proto((sc_t));\n char *glevel_to_string\t__proto((glevel_t));\n char *lang_to_string\t__proto((lang_t));\n-char *type_to_string\t__proto((AUXU *, int));\n+char *type_to_string\t__proto((AUXU *, int, FDR *));\n \n #ifndef __alpha\n extern PTR_T\tmalloc\t__proto((size_t));\n@@ -409,6 +414,11 @@ st_to_string(symbol_type)\n     case st_StaticProc:\treturn \"StaticProc\";\n     case st_Constant:\treturn \"Constant\";\n     case st_StaParam:\treturn \"StaticParam\";\n+#ifdef stStruct\n+    case st_Struct:\treturn \"Struct\";\n+    case st_Union:\treturn \"Union\";\n+    case st_Enum:\treturn \"Enum\";\n+#endif\n     case st_Str:\treturn \"String\";\n     case st_Number:\treturn \"Number\";\n     case st_Expr:\treturn \"Expr\";\n@@ -441,9 +451,10 @@ glevel_to_string (g_level)\n /* Convert the type information to string format.  */\n \n char *\n-type_to_string (aux_ptr, index)\n+type_to_string (aux_ptr, index, fdp)\n      AUXU *aux_ptr;\n      int index;\n+     FDR *fdp;\n {\n   AUXU u;\n   struct qual {\n@@ -540,7 +551,7 @@ type_to_string (aux_ptr, index)\n \t 2nd word is file index if 1st word rfd is ST_RFDESCAPE.  */\n \n     case bt_Struct:\t\t/* Structure (Record) */\n-      emit_aggregate (p1, aux_ptr[index], aux_ptr[index+1], \"struct\");\n+      emit_aggregate (p1, aux_ptr[index], aux_ptr[index+1], \"struct\", fdp);\n       used_ptr[index] = 1;\n       if (aux_ptr[index].rndx.rfd == ST_RFDESCAPE)\n \tused_ptr[++index] = 1;\n@@ -553,7 +564,7 @@ type_to_string (aux_ptr, index)\n \t 2nd word is file index if 1st word rfd is ST_RFDESCAPE.  */\n \n     case bt_Union:\t\t/* Union */\n-      emit_aggregate (p1, aux_ptr[index], aux_ptr[index+1], \"union\");\n+      emit_aggregate (p1, aux_ptr[index], aux_ptr[index+1], \"union\", fdp);\n       used_ptr[index] = 1;\n       if (aux_ptr[index].rndx.rfd == ST_RFDESCAPE)\n \tused_ptr[++index] = 1;\n@@ -566,7 +577,7 @@ type_to_string (aux_ptr, index)\n \t 2nd word is file index if 1st word rfd is ST_RFDESCAPE.  */\n \n     case bt_Enum:\t\t/* Enumeration */\n-      emit_aggregate (p1, aux_ptr[index], aux_ptr[index+1], \"enum\");\n+      emit_aggregate (p1, aux_ptr[index], aux_ptr[index+1], \"enum\", fdp);\n       used_ptr[index] = 1;\n       if (aux_ptr[index].rndx.rfd == ST_RFDESCAPE)\n \tused_ptr[++index] = 1;\n@@ -882,12 +893,13 @@ print_sym_hdr (sym_ptr)\n /* Print out a symbol.  */\n \n void\n-print_symbol (sym_ptr, number, strbase, aux_base, ifd)\n+print_symbol (sym_ptr, number, strbase, aux_base, ifd, fdp)\n      SYMR *sym_ptr;\n      int number;\n      char *strbase;\n      AUXU *aux_base;\n      int ifd;\n+     FDR *fdp;\n {\n   sc_t storage_class = (sc_t) sym_ptr->sc;\n   st_t symbol_type   = (st_t) sym_ptr->st;\n@@ -955,7 +967,8 @@ print_symbol (sym_ptr, number, strbase, aux_base, ifd)\n \t  {\n \t    used_ptr[index] = used_ptr[index+1] = 1;\n \t    printf (\"      End+1 symbol: %-7ld   Type:  %s\\n\",\n-\t\t    aux_base[index].isym, type_to_string (aux_base, index+1));\n+\t\t    aux_base[index].isym,\n+\t\t    type_to_string (aux_base, index+1, fdp));\n \t  }\n \telse\t\t\t/* global symbol */\n \t  printf (\"      Local symbol: %ld\\n\", index);\n@@ -977,12 +990,20 @@ print_symbol (sym_ptr, number, strbase, aux_base, ifd)\n \t  }\n \tbreak;\n \n+#ifdef stStruct\n+      case st_Struct:\n+      case st_Union:\n+      case st_Enum:\n+\tprintf (\"      End+1 symbol: %lu\\n\", index);\n+\tbreak;\n+#endif\n+\n       default:\n \tif (!MIPS_IS_STAB (sym_ptr))\n \t  {\n \t    used_ptr[index] = 1;\n \t    printf (\"      Type: %s\\n\",\n-\t\t    type_to_string (aux_base, index));\n+\t\t    type_to_string (aux_base, index, fdp));\n \t  }\n \tbreak;\n       }\n@@ -1077,30 +1098,39 @@ print_aux (u, auxi, used)\n /* Write aggregate information to a string.  */\n \n void\n-emit_aggregate (string, u, u2, which)\n+emit_aggregate (string, u, u2, which, fdp)\n      char *string;\n      AUXU u;\n      AUXU u2;\n      const char *which;\n+     FDR *fdp;\n {\n-  int ifd = u.rndx.rfd;\n-  int index = u.rndx.index;\n-  int sym_base, ss_base;\n-  int name;\n+  unsigned int ifd = u.rndx.rfd;\n+  unsigned int index = u.rndx.index;\n+  const char *name;\n   \n   if (ifd == ST_RFDESCAPE)\n     ifd = u2.isym;\n-\n-  sym_base = file_desc[ifd].isymBase;\n-  ss_base  = file_desc[ifd].issBase;\n   \n-  name = (index == indexNil) ? 0 : l_symbols[index + sym_base].iss;\n+  /* An ifd of -1 is an opaque type.  An escaped index of 0 is a\n+     struct return type of a procedure compiled without -g.  */\n+  if (ifd == 0xffffffff\n+      || (u.rndx.rfd == ST_RFDESCAPE && index == 0))\n+    name = \"<undefined>\";\n+  else if (index == indexNil)\n+    name = \"<no name>\";\n+  else\n+    {\n+      if (fdp == 0 || sym_hdr.crfd == 0)\n+\tfdp = &file_desc[ifd];\n+      else\n+\tfdp = &file_desc[rfile_desc[fdp->rfdBase + ifd]];\n+      name = &l_strings[fdp->issBase + l_symbols[index + fdp->isymBase].iss];\n+    }\n+  \n   sprintf (string,\n-\t   \"%s %s { ifd = %d, index = %d }\",\n-\t   which,\n-\t   (name == 0) ? \"/* no name */\" : &l_strings[ ss_base + name ],\n-\t   ifd,\n-\t   index);\n+\t   \"%s %s { ifd = %u, index = %u }\",\n+\t   which, name, ifd, index);\n }\n \n \f\n@@ -1205,7 +1235,8 @@ print_file_desc (fdp, number)\n \t\t  symi - fdp->isymBase,\n \t\t  str_base,\n \t\t  aux_base,\n-\t\t  -1);\n+\t\t  -1,\n+\t\t  fdp);\n \n   if (want_scope && cur_scope != (scope_t *)0)\n     printf (\"\\n    Warning scope does not end at 0!\\n\");\n@@ -1524,7 +1555,8 @@ main (argc, argv)\n   for(i = 0; i < sym_hdr.iextMax; i++)\n     print_symbol (&e_symbols[i].asym, i, e_strings,\n \t\t  aux_symbols + file_desc[e_symbols[i].ifd].iauxBase,\n-\t\t  e_symbols[i].ifd);\n+\t\t  e_symbols[i].ifd,\n+\t\t  &file_desc[e_symbols[i].ifd]);\n \n   /*\n    * Print unused aux symbols now.\n@@ -1548,7 +1580,7 @@ main (argc, argv)\n \t\t      i,\n \t\t      (long) aux_symbols[i].isym,\n \t\t      (long) aux_symbols[i].isym,\n-\t\t      type_to_string (aux_symbols, i));\n+\t\t      type_to_string (aux_symbols, i, (FDR *) 0));\n \t    }\n \t}\n     }"}]}