{"sha": "bf1fc37bb4a3cab851e2acec811427d5243a22e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYxZmMzN2JiNGEzY2FiODUxZTJhY2VjODExNDI3ZDUyNDNhMjJlOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-25T22:07:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-25T22:07:02Z"}, "message": "libstdc++: Define and use chrono::is_clock for C++20\n\nFor C++20 the wait_until members of mutexes and condition variables are\nrequired to be ill-formed if given a clock that doesn't meet the\nrequirements for a clock type. To implement that requirement this patch\nadds static assertions using the chrono::is_clock trait, and defines\nthat trait.\n\nTo avoid expensive checks for the common cases, the trait (and\nassociated variable template) are explicitly specialized for the\nstandard clock types.\n\nThis also moves the filesystem::__file_clock type from <filesystem> to\n<chrono>, so that chrono::file_clock and chrono::file_time can be\ndefined in <chrono> as required.\n\n\t* include/bits/fs_fwd.h (filesystem::__file_clock): Move to ...\n\t* include/std/chrono (filesystem::__file_clock): Here.\n\t(filesystem::__file_clock::from_sys, filesystem::__file_clock::to_sys):\n\tDefine public member functions for C++20.\n\t(is_clock, is_clock_v): Define traits for C++20.\n\t* include/std/condition_variable (condition_variable::wait_until): Add\n\tcheck for valid clock.\n\t* include/std/future (_State_baseV2::wait_until): Likewise.\n\t* include/std/mutex (__timed_mutex_impl::_M_try_lock_until): Likewise.\n\t* include/std/shared_mutex (shared_timed_mutex::try_lock_shared_until):\n\tLikewise.\n\t* include/std/thread (this_thread::sleep_until): Likewise.\n\t* testsuite/30_threads/condition_variable/members/2.cc: Qualify\n\tslow_clock with new namespace.\n\t* testsuite/30_threads/condition_variable/members/clock_neg.cc: New\n\ttest.\n\t* testsuite/30_threads/condition_variable_any/members/clock_neg.cc:\n\tNew test.\n\t* testsuite/30_threads/future/members/clock_neg.cc: New test.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/3.cc:\n\tQualify slow_clock with new namespace.\n\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/\n\tclock_neg.cc: New test.\n\t* testsuite/30_threads/shared_future/members/clock_neg.cc: New\n\ttest.\n\t* testsuite/30_threads/shared_lock/locking/clock_neg.cc: New test.\n\t* testsuite/30_threads/shared_timed_mutex/try_lock_until/clock_neg.cc:\n\tNew test.\n\t* testsuite/30_threads/timed_mutex/try_lock_until/3.cc: Qualify\n\tslow_clock with new namespace.\n\t* testsuite/30_threads/timed_mutex/try_lock_until/4.cc: Likewise.\n\t* testsuite/30_threads/timed_mutex/try_lock_until/clock_neg.cc: New\n\ttest.\n\t* testsuite/30_threads/unique_lock/locking/clock_neg.cc: New test.\n\t* testsuite/std/time/traits/is_clock.cc: New test.\n\t* testsuite/util/slow_clock.h (slow_clock): Move to __gnu_test\n\tnamespace.", "tree": {"sha": "baa9ab1b47e7c91a5a682057b4e89197c3bd7feb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baa9ab1b47e7c91a5a682057b4e89197c3bd7feb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf1fc37bb4a3cab851e2acec811427d5243a22e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1fc37bb4a3cab851e2acec811427d5243a22e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf1fc37bb4a3cab851e2acec811427d5243a22e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1fc37bb4a3cab851e2acec811427d5243a22e9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe4b53b2e7e58d3bcf476a0a319b51a5a8c668a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe4b53b2e7e58d3bcf476a0a319b51a5a8c668a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe4b53b2e7e58d3bcf476a0a319b51a5a8c668a2"}], "stats": {"total": 906, "additions": 861, "deletions": 45}, "files": [{"sha": "95ac7c935c4a8e12659035b970f7a21c3b6e8ef6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -1,3 +1,43 @@\n+2020-03-25  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/fs_fwd.h (filesystem::__file_clock): Move to ...\n+\t* include/std/chrono (filesystem::__file_clock): Here.\n+\t(filesystem::__file_clock::from_sys, filesystem::__file_clock::to_sys):\n+\tDefine public member functions for C++20.\n+\t(is_clock, is_clock_v): Define traits for C++20.\n+\t* include/std/condition_variable (condition_variable::wait_until): Add\n+\tcheck for valid clock.\n+\t* include/std/future (_State_baseV2::wait_until): Likewise.\n+\t* include/std/mutex (__timed_mutex_impl::_M_try_lock_until): Likewise.\n+\t* include/std/shared_mutex (shared_timed_mutex::try_lock_shared_until):\n+\tLikewise.\n+\t* include/std/thread (this_thread::sleep_until): Likewise.\n+\t* testsuite/30_threads/condition_variable/members/2.cc: Qualify\n+\tslow_clock with new namespace.\n+\t* testsuite/30_threads/condition_variable/members/clock_neg.cc: New\n+\ttest.\n+\t* testsuite/30_threads/condition_variable_any/members/clock_neg.cc:\n+\tNew test.\n+\t* testsuite/30_threads/future/members/clock_neg.cc: New test.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/3.cc:\n+\tQualify slow_clock with new namespace.\n+\t* testsuite/30_threads/recursive_timed_mutex/try_lock_until/\n+\tclock_neg.cc: New test.\n+\t* testsuite/30_threads/shared_future/members/clock_neg.cc: New\n+\ttest.\n+\t* testsuite/30_threads/shared_lock/locking/clock_neg.cc: New test.\n+\t* testsuite/30_threads/shared_timed_mutex/try_lock_until/clock_neg.cc:\n+\tNew test.\n+\t* testsuite/30_threads/timed_mutex/try_lock_until/3.cc: Qualify\n+\tslow_clock with new namespace.\n+\t* testsuite/30_threads/timed_mutex/try_lock_until/4.cc: Likewise.\n+\t* testsuite/30_threads/timed_mutex/try_lock_until/clock_neg.cc: New\n+\ttest.\n+\t* testsuite/30_threads/unique_lock/locking/clock_neg.cc: New test.\n+\t* testsuite/std/time/traits/is_clock.cc: New test.\n+\t* testsuite/util/slow_clock.h (slow_clock): Move to __gnu_test\n+\tnamespace.\n+\n 2020-03-21  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/93245"}, {"sha": "6363eca867c22355d62ade980051096269afe91d", "filename": "libstdc++-v3/include/bits/fs_fwd.h", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_fwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_fwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_fwd.h?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -291,48 +291,6 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   operator^=(directory_options& __x, directory_options __y) noexcept\n   { return __x = __x ^ __y; }\n \n-  struct __file_clock\n-  {\n-    using duration                  = chrono::nanoseconds;\n-    using rep                       = duration::rep;\n-    using period                    = duration::period;\n-    using time_point                = chrono::time_point<__file_clock>;\n-    static constexpr bool is_steady = false;\n-\n-    static time_point\n-    now() noexcept\n-    { return _S_from_sys(chrono::system_clock::now()); }\n-\n-  private:\n-    using __sys_clock = chrono::system_clock;\n-\n-    // This clock's (unspecified) epoch is 2174-01-01 00:00:00 UTC.\n-    // A signed 64-bit duration with nanosecond resolution gives roughly\n-    // +/- 292 years, which covers the 1901-2446 date range for ext4.\n-    static constexpr chrono::seconds _S_epoch_diff{6437664000};\n-\n-  protected:\n-    // For internal use only\n-    template<typename _Dur>\n-      static\n-      chrono::time_point<__file_clock, _Dur>\n-      _S_from_sys(const chrono::time_point<__sys_clock, _Dur>& __t) noexcept\n-      {\n-\tusing __file_time = chrono::time_point<__file_clock, _Dur>;\n-\treturn __file_time{__t.time_since_epoch()} - _S_epoch_diff;\n-      }\n-\n-    // For internal use only\n-    template<typename _Dur>\n-      static\n-      chrono::time_point<__sys_clock, _Dur>\n-      _S_to_sys(const chrono::time_point<__file_clock, _Dur>& __t) noexcept\n-      {\n-\tusing __sys_time = chrono::time_point<__sys_clock, _Dur>;\n-\treturn __sys_time{__t.time_since_epoch()} + _S_epoch_diff;\n-      }\n-  };\n-\n   using file_time_type = __file_clock::time_point;\n \n   // operational functions"}, {"sha": "b1fa5b832956d047e399749a6d332368286eaa81", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -41,11 +41,18 @@\n #include <limits>\n #include <ctime>\n #include <bits/parse_numbers.h> // for literals support.\n+#if __cplusplus > 201703L\n+# include <concepts>\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+#if __cplusplus >= 201703L\n+  namespace filesystem { struct __file_clock; };\n+#endif\n+\n   /**\n    * @defgroup chrono Time\n    * @ingroup utilities\n@@ -237,6 +244,60 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         treat_as_floating_point<_Rep>::value;\n #endif // C++17\n \n+#if __cplusplus > 201703L\n+    template<typename _Tp>\n+      struct is_clock;\n+\n+    template<typename _Tp>\n+      inline constexpr bool is_clock_v = is_clock<_Tp>::value;\n+\n+#if __cpp_lib_concepts\n+    template<typename _Tp>\n+      struct is_clock : false_type\n+      { };\n+\n+    template<typename _Tp>\n+      requires requires {\n+\ttypename _Tp::rep;\n+\ttypename _Tp::period;\n+\ttypename _Tp::duration;\n+\ttypename _Tp::time_point::clock;\n+\ttypename _Tp::time_point::duration;\n+\t{ &_Tp::is_steady } -> same_as<const bool*>;\n+\t{ _Tp::now() } -> same_as<typename _Tp::time_point>;\n+\trequires same_as<typename _Tp::duration,\n+\t\t\t duration<typename _Tp::rep, typename _Tp::period>>;\n+\trequires same_as<typename _Tp::time_point::duration,\n+\t\t\t typename _Tp::duration>;\n+      }\n+      struct is_clock<_Tp> : true_type\n+      { };\n+#else\n+    template<typename _Tp, typename = void>\n+      struct __is_clock_impl : false_type\n+      { };\n+\n+    template<typename _Tp>\n+      struct __is_clock_impl<_Tp,\n+\t\t\t     void_t<typename _Tp::rep, typename _Tp::period,\n+\t\t\t\t    typename _Tp::duration,\n+\t\t\t\t    typename _Tp::time_point::duration,\n+\t\t\t\t    decltype(_Tp::is_steady),\n+\t\t\t\t    decltype(_Tp::now())>>\n+      : __and_<is_same<typename _Tp::duration,\n+\t\t       duration<typename _Tp::rep, typename _Tp::period>>,\n+\t       is_same<typename _Tp::time_point::duration,\n+\t\t       typename _Tp::duration>,\n+\t       is_same<decltype(&_Tp::is_steady), const bool*>,\n+\t       is_same<decltype(_Tp::now()), typename _Tp::time_point>>::type\n+      { };\n+\n+    template<typename _Tp>\n+      struct is_clock : __is_clock_impl<_Tp>::type\n+      { };\n+#endif\n+#endif // C++20\n+\n #if __cplusplus >= 201703L\n # define __cpp_lib_chrono 201611\n \n@@ -948,6 +1009,26 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     using high_resolution_clock = system_clock;\n \n     } // end inline namespace _V2\n+\n+#if __cplusplus > 201703L\n+    template<typename _Duration>\n+      using sys_time = time_point<system_clock, _Duration>;\n+    using sys_seconds = sys_time<seconds>;\n+\n+    using file_clock = ::std::filesystem::__file_clock;\n+\n+    template<typename _Duration>\n+      using file_time = time_point<file_clock, _Duration>;\n+\n+    template<> struct is_clock<system_clock> : true_type { };\n+    template<> struct is_clock<steady_clock> : true_type { };\n+    template<> struct is_clock<file_clock> : true_type { };\n+\n+    template<> inline constexpr bool is_clock_v<system_clock> = true;\n+    template<> inline constexpr bool is_clock_v<steady_clock> = true;\n+    template<> inline constexpr bool is_clock_v<file_clock> = true;\n+#endif // C++20\n+\n     // @}\n   } // namespace chrono\n \n@@ -1071,6 +1152,67 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     using namespace literals::chrono_literals;\n   } // namespace chrono\n \n+#if __cplusplus >= 201703L\n+  namespace filesystem\n+  {\n+    struct __file_clock\n+    {\n+      using duration                  = chrono::nanoseconds;\n+      using rep                       = duration::rep;\n+      using period                    = duration::period;\n+      using time_point                = chrono::time_point<__file_clock>;\n+      static constexpr bool is_steady = false;\n+\n+      static time_point\n+      now() noexcept\n+      { return _S_from_sys(chrono::system_clock::now()); }\n+\n+#if __cplusplus > 201703L\n+      template<typename _Dur>\n+\tstatic\n+\tchrono::file_time<_Dur>\n+\tfrom_sys(const chrono::sys_time<_Dur>& __t) noexcept\n+\t{ return _S_from_sys(__t); }\n+\n+      // For internal use only\n+      template<typename _Dur>\n+\tstatic\n+\tchrono::sys_time<_Dur>\n+\tto_sys(const chrono::file_time<_Dur>& __t) noexcept\n+\t{ return _S_to_sys(__t); }\n+#endif // C++20\n+\n+    private:\n+      using __sys_clock = chrono::system_clock;\n+\n+      // This clock's (unspecified) epoch is 2174-01-01 00:00:00 UTC.\n+      // A signed 64-bit duration with nanosecond resolution gives roughly\n+      // +/- 292 years, which covers the 1901-2446 date range for ext4.\n+      static constexpr chrono::seconds _S_epoch_diff{6437664000};\n+\n+    protected:\n+      // For internal use only\n+      template<typename _Dur>\n+\tstatic\n+\tchrono::time_point<__file_clock, _Dur>\n+\t_S_from_sys(const chrono::time_point<__sys_clock, _Dur>& __t) noexcept\n+\t{\n+\t  using __file_time = chrono::time_point<__file_clock, _Dur>;\n+\t  return __file_time{__t.time_since_epoch()} - _S_epoch_diff;\n+\t}\n+\n+      // For internal use only\n+      template<typename _Dur>\n+\tstatic\n+\tchrono::time_point<__sys_clock, _Dur>\n+\t_S_to_sys(const chrono::time_point<__file_clock, _Dur>& __t) noexcept\n+\t{\n+\t  using __sys_time = chrono::time_point<__sys_clock, _Dur>;\n+\t  return __sys_time{__t.time_since_epoch()} + _S_epoch_diff;\n+\t}\n+    };\n+  } // namespace filesystem\n+#endif // C++17\n #endif // C++14\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "cc7f99f6921d216ed6650e65fafcc1cf54e0115d", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -131,6 +131,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       wait_until(unique_lock<mutex>& __lock,\n \t\t const chrono::time_point<_Clock, _Duration>& __atime)\n       {\n+#if __cplusplus > 201703L\n+\tstatic_assert(chrono::is_clock_v<_Clock>);\n+#endif\n \tconst typename _Clock::time_point __c_entry = _Clock::now();\n \tconst __clock_t::time_point __s_entry = __clock_t::now();\n \tconst auto __delta = __atime - __c_entry;"}, {"sha": "97506a27e37c821134c90de9dbd95d8360aff396", "filename": "libstdc++-v3/include/std/future", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffuture?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -371,6 +371,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         future_status\n         wait_until(const chrono::time_point<_Clock, _Duration>& __abs)\n         {\n+#if __cplusplus > 201703L\n+\t  static_assert(chrono::is_clock_v<_Clock>);\n+#endif\n \t  // First, check if the future has been made ready.  Use acquire MO\n \t  // to synchronize with the thread that made it ready.\n \t  if (_M_status._M_load(memory_order_acquire) == _Status::__ready)"}, {"sha": "12b7e548d179c3a2cb0ed65b6e113031f11293f6", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -189,6 +189,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tbool\n \t_M_try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n \t{\n+#if __cplusplus > 201703L\n+\t  static_assert(chrono::is_clock_v<_Clock>);\n+#endif\n \t  // The user-supplied clock may not tick at the same rate as\n \t  // steady_clock, so we must loop in order to guarantee that\n \t  // the timeout has expired before returning false."}, {"sha": "414dce3a1b7589511ed40275d484d498d1b4662f", "filename": "libstdc++-v3/include/std/shared_mutex", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -554,6 +554,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       bool\n       try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)\n       {\n+#if __cplusplus > 201703L\n+\tstatic_assert(chrono::is_clock_v<_Clock>);\n+#endif\n \t// The user-supplied clock may not tick at the same rate as\n \t// steady_clock, so we must loop in order to guarantee that\n \t// the timeout has expired before returning false.\n@@ -639,6 +642,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       try_lock_shared_until(const chrono::time_point<_Clock,\n \t\t\t\t\t\t     _Duration>& __atime)\n       {\n+#if __cplusplus > 201703L\n+\tstatic_assert(chrono::is_clock_v<_Clock>);\n+#endif\n \t// The user-supplied clock may not tick at the same rate as\n \t// steady_clock, so we must loop in order to guarantee that\n \t// the timeout has expired before returning false."}, {"sha": "e1bba0cb29b321d0d1e5a25861bdf415883005b5", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -414,6 +414,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       inline void\n       sleep_until(const chrono::time_point<_Clock, _Duration>& __atime)\n       {\n+#if __cplusplus > 201703L\n+\tstatic_assert(chrono::is_clock_v<_Clock>);\n+#endif\n \tauto __now = _Clock::now();\n \tif (_Clock::is_steady)\n \t  {"}, {"sha": "c671804b4064c50747b69086e37a576a535fc7f1", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/members/2.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2F2.cc?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -55,6 +55,8 @@ void test01()\n \n void test01_alternate_clock()\n {\n+  using __gnu_test::slow_clock;\n+\n   try\n     {\n       std::condition_variable c1;"}, {"sha": "11b540f58c89f97498ceb4da4ce8f95bfb3900ad", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/members/clock_neg.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2Fclock_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2Fclock_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fmembers%2Fclock_neg.cc?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -0,0 +1,61 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <condition_variable>\n+\n+struct clok\n+{\n+  // no clok::rep or clok::period defined\n+  using duration = std::chrono::milliseconds;\n+  using time_point = std::chrono::time_point<clok>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+void\n+test01()\n+{\n+  std::mutex m;\n+  std::unique_lock<std::mutex> l(m);\n+  std::condition_variable cv;\n+  cv.wait_until(l, clok::now()); // { dg-error \"here\" }\n+}\n+\n+struct cloc\n+{\n+  using duration = std::chrono::milliseconds;\n+  using rep = duration::rep;\n+  using period = duration::period;\n+  // cloc::time_point::duration should be the same as cloc::duration:\n+  using time_point = std::chrono::time_point<cloc, std::chrono::seconds>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+void\n+test02()\n+{\n+  std::mutex m;\n+  std::unique_lock<std::mutex> l(m);\n+  std::condition_variable cv;\n+  cv.wait_until(l, cloc::now()); // { dg-error \"here\" }\n+}\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "4302363f407fa8f6e60a3209cc61bf4fc65051b8", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/members/clock_neg.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2Fclock_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2Fclock_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fmembers%2Fclock_neg.cc?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -0,0 +1,61 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <condition_variable>\n+\n+struct clok\n+{\n+  // no clok::rep or clok::period defined\n+  using duration = std::chrono::milliseconds;\n+  using time_point = std::chrono::time_point<clok>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+void\n+test01()\n+{\n+  std::mutex m;\n+  std::unique_lock<std::mutex> l(m);\n+  std::condition_variable_any cv;\n+  cv.wait_until(l, clok::now()); // { dg-error \"here\" }\n+}\n+\n+struct cloc\n+{\n+  using duration = std::chrono::milliseconds;\n+  using rep = duration::rep;\n+  using period = duration::period;\n+  // cloc::time_point::duration should be the same as cloc::duration:\n+  using time_point = std::chrono::time_point<cloc, std::chrono::seconds>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+void\n+test02()\n+{\n+  std::mutex m;\n+  std::unique_lock<std::mutex> l(m);\n+  std::condition_variable_any cv;\n+  cv.wait_until(l, cloc::now()); // { dg-error \"here\" }\n+}\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "a94d770fb62fe9c8e167b3612c20506a93c40e83", "filename": "libstdc++-v3/testsuite/30_threads/future/members/clock_neg.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fclock_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fclock_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ffuture%2Fmembers%2Fclock_neg.cc?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -0,0 +1,59 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <future>\n+\n+struct clok\n+{\n+  // no clok::rep or clok::period defined\n+  using duration = std::chrono::milliseconds;\n+  using time_point = std::chrono::time_point<clok>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+void\n+test01()\n+{\n+  std::promise<void> p;\n+  std::future<void> f = p.get_future();\n+  f.wait_until(clok::now()); // { dg-error \"here\" }\n+}\n+\n+struct cloc\n+{\n+  using duration = std::chrono::milliseconds;\n+  using rep = duration::rep;\n+  using period = duration::period;\n+  // cloc::time_point::duration should be the same as cloc::duration:\n+  using time_point = std::chrono::time_point<cloc, std::chrono::seconds>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+void\n+test02()\n+{\n+  std::promise<void> p;\n+  std::future<void> f = p.get_future();\n+  f.wait_until(cloc::now()); // { dg-error \"here\" }\n+}\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "120655ceb65084c771d663f8967421500093ef9f", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock_until/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2F3.cc?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -72,5 +72,5 @@ int main()\n {\n   test<std::chrono::system_clock>();\n   test<std::chrono::steady_clock>();\n-  test<slow_clock>();\n+  test<__gnu_test::slow_clock>();\n }"}, {"sha": "499e6675545c647fd1a9b0abb0255a5a4dc65194", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/try_lock_until/clock_neg.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2Fclock_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2Fclock_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Ftry_lock_until%2Fclock_neg.cc?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <mutex>\n+\n+struct clok\n+{\n+  // no clok::rep or clok::period defined\n+  using duration = std::chrono::milliseconds;\n+  using time_point = std::chrono::time_point<clok>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+void\n+test01()\n+{\n+  std::recursive_timed_mutex m;\n+  m.try_lock_until(clok::now()); // { dg-error \"here\" }\n+}\n+\n+struct cloc\n+{\n+  using duration = std::chrono::milliseconds;\n+  using rep = duration::rep;\n+  using period = duration::period;\n+  // cloc::time_point::duration should be the same as cloc::duration:\n+  using time_point = std::chrono::time_point<cloc, std::chrono::seconds>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+void\n+test02()\n+{\n+  std::recursive_timed_mutex m;\n+  m.try_lock_until(cloc::now()); // { dg-error \"here\" }\n+}\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "59f63cc1cf4723dcedb5181f4eaed7198c0f2e37", "filename": "libstdc++-v3/testsuite/30_threads/shared_future/members/clock_neg.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fclock_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fclock_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_future%2Fmembers%2Fclock_neg.cc?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -0,0 +1,59 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <future>\n+\n+struct clok\n+{\n+  // no clok::rep or clok::period defined\n+  using duration = std::chrono::milliseconds;\n+  using time_point = std::chrono::time_point<clok>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+void\n+test01()\n+{\n+  std::promise<void> p;\n+  std::shared_future<void> f = p.get_future();\n+  f.wait_until(clok::now()); // { dg-error \"here\" }\n+}\n+\n+struct cloc\n+{\n+  using duration = std::chrono::milliseconds;\n+  using rep = duration::rep;\n+  using period = duration::period;\n+  // cloc::time_point::duration should be the same as cloc::duration:\n+  using time_point = std::chrono::time_point<cloc, std::chrono::seconds>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+void\n+test02()\n+{\n+  std::promise<void> p;\n+  std::shared_future<void> f = p.get_future();\n+  f.wait_until(cloc::now()); // { dg-error \"here\" }\n+}\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "9a21a88ed600637ef009c8af92a4845777887a85", "filename": "libstdc++-v3/testsuite/30_threads/shared_lock/locking/clock_neg.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2Fclock_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2Fclock_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_lock%2Flocking%2Fclock_neg.cc?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -0,0 +1,59 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <shared_mutex>\n+\n+struct clok\n+{\n+  // no clok::rep or clok::period defined\n+  using duration = std::chrono::milliseconds;\n+  using time_point = std::chrono::time_point<clok>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+void\n+test01()\n+{\n+  std::shared_timed_mutex m;\n+  std::shared_lock<std::shared_timed_mutex> l(m, std::defer_lock);\n+  l.try_lock_until(clok::now()); // { dg-error \"here\" }\n+}\n+\n+struct cloc\n+{\n+  using duration = std::chrono::milliseconds;\n+  using rep = duration::rep;\n+  using period = duration::period;\n+  // cloc::time_point::duration should be the same as cloc::duration:\n+  using time_point = std::chrono::time_point<cloc, std::chrono::seconds>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+void\n+test02()\n+{\n+  std::shared_timed_mutex m;\n+  std::shared_lock<std::shared_timed_mutex> l(m, std::defer_lock);\n+  l.try_lock_until(cloc::now()); // { dg-error \"here\" }\n+}\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "23d4b9d9bbfa3ae0046c945887daa79590995f15", "filename": "libstdc++-v3/testsuite/30_threads/shared_timed_mutex/try_lock_until/clock_neg.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_timed_mutex%2Ftry_lock_until%2Fclock_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_timed_mutex%2Ftry_lock_until%2Fclock_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fshared_timed_mutex%2Ftry_lock_until%2Fclock_neg.cc?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <shared_mutex>\n+\n+struct clok\n+{\n+  // no clok::rep or clok::period defined\n+  using duration = std::chrono::milliseconds;\n+  using time_point = std::chrono::time_point<clok>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+void\n+test01()\n+{\n+  std::shared_timed_mutex m;\n+  m.try_lock_until(clok::now()); // { dg-error \"here\" }\n+}\n+\n+struct cloc\n+{\n+  using duration = std::chrono::milliseconds;\n+  using rep = duration::rep;\n+  using period = duration::period;\n+  // cloc::time_point::duration should be the same as cloc::duration:\n+  using time_point = std::chrono::time_point<cloc, std::chrono::seconds>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+void\n+test02()\n+{\n+  std::shared_timed_mutex m;\n+  m.try_lock_shared_until(cloc::now()); // { dg-error \"here\" }\n+}\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "ed5a6b0b8b7f9481fffb554547dee7130607e884", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_until/3.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F3.cc?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -72,5 +72,5 @@ int main()\n {\n   test<std::chrono::system_clock>();\n   test<std::chrono::steady_clock>();\n-  test<slow_clock>();\n+  test<__gnu_test::slow_clock>();\n }"}, {"sha": "a7a77d2294d48a0eb35b3b20a889d7b7bb639da4", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_until/4.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2F4.cc?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -64,5 +64,5 @@ int main()\n {\n   test<std::chrono::system_clock>();\n   test<std::chrono::steady_clock>();\n-  test<slow_clock>();\n+  test<__gnu_test::slow_clock>();\n }"}, {"sha": "a9c0132d99b6e1c99160723eb883c67a08794a4a", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/try_lock_until/clock_neg.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2Fclock_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2Fclock_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Ftry_lock_until%2Fclock_neg.cc?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <mutex>\n+\n+struct clok\n+{\n+  // no clok::rep or clok::period defined\n+  using duration = std::chrono::milliseconds;\n+  using time_point = std::chrono::time_point<clok>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+void\n+test01()\n+{\n+  std::timed_mutex m;\n+  m.try_lock_until(clok::now()); // { dg-error \"here\" }\n+}\n+\n+struct cloc\n+{\n+  using duration = std::chrono::milliseconds;\n+  using rep = duration::rep;\n+  using period = duration::period;\n+  // cloc::time_point::duration should be the same as cloc::duration:\n+  using time_point = std::chrono::time_point<cloc, std::chrono::seconds>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+void\n+test02()\n+{\n+  std::timed_mutex m;\n+  m.try_lock_until(cloc::now()); // { dg-error \"here\" }\n+}\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "c7ac9cdc466b83ffa806aeb9544d591bffa3651b", "filename": "libstdc++-v3/testsuite/30_threads/unique_lock/locking/clock_neg.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2Fclock_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2Fclock_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Funique_lock%2Flocking%2Fclock_neg.cc?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -0,0 +1,59 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <mutex>\n+\n+struct clok\n+{\n+  // no clok::rep or clok::period defined\n+  using duration = std::chrono::milliseconds;\n+  using time_point = std::chrono::time_point<clok>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+void\n+test01()\n+{\n+  std::timed_mutex m;\n+  std::unique_lock<std::timed_mutex> l(m, std::defer_lock);\n+  l.try_lock_until(clok::now()); // { dg-error \"here\" }\n+}\n+\n+struct cloc\n+{\n+  using duration = std::chrono::milliseconds;\n+  using rep = duration::rep;\n+  using period = duration::period;\n+  // cloc::time_point::duration should be the same as cloc::duration:\n+  using time_point = std::chrono::time_point<cloc, std::chrono::seconds>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+void\n+test02()\n+{\n+  std::recursive_timed_mutex m;\n+  std::unique_lock<std::recursive_timed_mutex> l(m, std::defer_lock);\n+  l.try_lock_until(cloc::now()); // { dg-error \"here\" }\n+}\n+\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 0 }"}, {"sha": "85f118253c3781cef0858e2409ab738ad1efd067", "filename": "libstdc++-v3/testsuite/std/time/traits/is_clock.cc", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Ftraits%2Fis_clock.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Ftraits%2Fis_clock.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Ftime%2Ftraits%2Fis_clock.cc?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -0,0 +1,124 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <chrono>\n+#include <slow_clock.h>\n+\n+namespace chrono = std::chrono;\n+\n+static_assert( chrono::is_clock<chrono::system_clock>::value );\n+static_assert( chrono::is_clock_v<chrono::system_clock> );\n+\n+static_assert( chrono::is_clock<chrono::high_resolution_clock>::value );\n+static_assert( chrono::is_clock_v<chrono::high_resolution_clock> );\n+\n+static_assert( chrono::is_clock<chrono::steady_clock>::value );\n+static_assert( chrono::is_clock_v<chrono::steady_clock> );\n+\n+static_assert(chrono::is_clock<chrono::file_clock>::value);\n+static_assert(chrono::is_clock_v<chrono::file_clock>);\n+\n+static_assert( chrono::is_clock<__gnu_test::slow_clock>::value );\n+static_assert( chrono::is_clock_v<__gnu_test::slow_clock> );\n+\n+static_assert( ! chrono::is_clock<int>::value );\n+static_assert( ! chrono::is_clock_v<int> );\n+\n+static_assert( ! chrono::is_clock<void>::value );\n+static_assert( ! chrono::is_clock_v<void> );\n+\n+struct not_a_clock_1\n+{\n+  using rep = int;\n+  using period = std::ratio<4, 2>;\n+  using duration = chrono::duration<long, period>; // different rep\n+  using time_point = chrono::time_point<not_a_clock_1>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+static_assert( ! chrono::is_clock<not_a_clock_1>::value );\n+static_assert( ! chrono::is_clock_v<not_a_clock_1> );\n+\n+struct not_a_clock_2\n+{\n+  using rep = int;\n+  using period = int; // not a std::ratio\n+  using duration = chrono::duration<rep>;\n+  using time_point = chrono::time_point<not_a_clock_2>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+static_assert( ! chrono::is_clock<not_a_clock_2>::value );\n+static_assert( ! chrono::is_clock_v<not_a_clock_2> );\n+\n+struct not_a_clock_3\n+{\n+  using rep = int;\n+  using period = std::ratio<1>;\n+  using duration = chrono::duration<rep>;\n+  // wrong duration:\n+  using time_point = chrono::time_point<not_a_clock_3, chrono::duration<long>>;\n+  static constexpr bool is_steady = false;\n+  static time_point now();\n+};\n+\n+static_assert( ! chrono::is_clock<not_a_clock_3>::value );\n+static_assert( ! chrono::is_clock_v<not_a_clock_3> );\n+\n+struct not_a_clock_4\n+{\n+  using rep = int;\n+  using period = std::ratio<1>;\n+  using duration = chrono::duration<rep>;\n+  using time_point = chrono::time_point<not_a_clock_4>;\n+  static constexpr int is_steady = 0; // not a const bool\n+  static time_point now();\n+};\n+\n+static_assert( ! chrono::is_clock<not_a_clock_4>::value );\n+static_assert( ! chrono::is_clock_v<not_a_clock_4> );\n+\n+struct not_a_clock_5\n+{\n+  using rep = int;\n+  using period = std::ratio<1>;\n+  using duration = chrono::duration<rep>;\n+  using time_point = chrono::time_point<not_a_clock_5>;\n+  static constexpr bool is_steady = false;\n+  static int now(); // wrong return type\n+};\n+\n+static_assert( ! chrono::is_clock<not_a_clock_5>::value );\n+static_assert( ! chrono::is_clock_v<not_a_clock_5> );\n+\n+struct not_a_clock_6\n+{\n+  using rep = int;\n+  using period = std::ratio<1>;\n+  using duration = chrono::duration<rep>;\n+  using time_point = chrono::time_point<not_a_clock_6>;\n+  const bool is_steady = false; // not static\n+  static time_point now();\n+};\n+\n+static_assert( ! chrono::is_clock<not_a_clock_6>::value );\n+static_assert( ! chrono::is_clock_v<not_a_clock_6> );"}, {"sha": "d1f4bbba8514c813e4ac3efb31db76f88971cd15", "filename": "libstdc++-v3/testsuite/util/slow_clock.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fslow_clock.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf1fc37bb4a3cab851e2acec811427d5243a22e9/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fslow_clock.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fslow_clock.h?ref=bf1fc37bb4a3cab851e2acec811427d5243a22e9", "patch": "@@ -22,6 +22,8 @@\n \n #include <chrono>\n \n+namespace __gnu_test\n+{\n struct slow_clock\n {\n   using rep = std::chrono::system_clock::rep;\n@@ -36,3 +38,4 @@ struct slow_clock\n     return time_point{real.time_since_epoch() / 3};\n   }\n };\n+}"}]}