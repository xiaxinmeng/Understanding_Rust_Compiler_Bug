{"sha": "045e472c6eebe085feb5d3b95666409b78ba2b5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQ1ZTQ3MmM2ZWViZTA4NWZlYjVkM2I5NTY2NjQwOWI3OGJhMmI1Yg==", "commit": {"author": {"name": "Greta Yorsh", "email": "greta.yorsh@arm.com", "date": "2013-04-05T17:05:03Z"}, "committer": {"name": "Greta Yorsh", "email": "gretay@gcc.gnu.org", "date": "2013-04-05T17:05:03Z"}, "message": "arm.md (negdi_extendsidi): New pattern.\n\n2013-04-05  Greta Yorsh  <Greta.Yorsh@arm.com>\n\ngcc/\n\t* config/arm/arm.md (negdi_extendsidi): New pattern.\n\t(negdi_zero_extendsidi): Likewise.\n\ngcc/testsuite\n\n\t* gcc.target/arm/negdi-1.c: New test.\n\t* gcc.target/arm/negdi-2.c: Likewise.\n\t* gcc.target/arm/negdi-3.c: Likewise.\n\t* gcc.target/arm/negdi-4.c: Likewise.\n\nFrom-SVN: r197526", "tree": {"sha": "88d13dd89c6dff412e90c30dd5eb0675a903cf66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88d13dd89c6dff412e90c30dd5eb0675a903cf66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/045e472c6eebe085feb5d3b95666409b78ba2b5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/045e472c6eebe085feb5d3b95666409b78ba2b5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/045e472c6eebe085feb5d3b95666409b78ba2b5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/045e472c6eebe085feb5d3b95666409b78ba2b5b/comments", "author": null, "committer": null, "parents": [{"sha": "adcef07c9bf0b575fd5d4cf1891a894bc4333a30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adcef07c9bf0b575fd5d4cf1891a894bc4333a30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adcef07c9bf0b575fd5d4cf1891a894bc4333a30"}], "stats": {"total": 145, "additions": 145, "deletions": 0}, "files": [{"sha": "09eb0000fc16f93cbe39e6676ee01c1a56837414", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045e472c6eebe085feb5d3b95666409b78ba2b5b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045e472c6eebe085feb5d3b95666409b78ba2b5b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=045e472c6eebe085feb5d3b95666409b78ba2b5b", "patch": "@@ -1,3 +1,8 @@\n+2013-04-05  Greta Yorsh  <Greta.Yorsh@arm.com>\n+\n+\t* config/arm/arm.md (negdi_extendsidi): New pattern.\n+\t(negdi_zero_extendsidi): Likewise.\n+\n 2013-04-05  Greta Yorsh  <Greta.Yorsh@arm.com>\n \n \t* config/arm/arm.md (andsi_iorsi3_notsi): Convert define_insn into"}, {"sha": "e7c34bde9510028b143c1bab97bbcabf581c52b2", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045e472c6eebe085feb5d3b95666409b78ba2b5b/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045e472c6eebe085feb5d3b95666409b78ba2b5b/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=045e472c6eebe085feb5d3b95666409b78ba2b5b", "patch": "@@ -4344,6 +4344,73 @@\n   \"TARGET_32BIT && TARGET_HARD_FLOAT && TARGET_VFP_DOUBLE\"\n   \"\")\n \n+;; Negate an extended 32-bit value.\n+(define_insn_and_split \"*negdi_extendsidi\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=r,&r,l,&l\")\n+\t(neg:DI (sign_extend:DI (match_operand:SI 1 \"s_register_operand\" \"0,r,0,l\"))))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_32BIT\"\n+  \"#\" ; rsb\\\\t%Q0, %1, #0\\;asr\\\\t%R0, %Q0, #31\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+  {\n+     operands[2] = gen_highpart (SImode, operands[0]);\n+     operands[0] = gen_lowpart (SImode, operands[0]);\n+     rtx tmp = gen_rtx_SET (VOIDmode,\n+                            operands[0],\n+                            gen_rtx_MINUS (SImode,\n+                                           const0_rtx,\n+                                           operands[1]));\n+     if (TARGET_ARM)\n+       {\n+         emit_insn (tmp);\n+       }\n+     else\n+       {\n+         /* Set the flags, to emit the short encoding in Thumb2.  */\n+         rtx flags = gen_rtx_SET (VOIDmode,\n+                                  gen_rtx_REG (CCmode, CC_REGNUM),\n+                                  gen_rtx_COMPARE (CCmode,\n+                                                   const0_rtx,\n+                                                   operands[1]));\n+         emit_insn (gen_rtx_PARALLEL (VOIDmode,\n+                                      gen_rtvec (2,\n+                                                 flags,\n+                                                 tmp)));\n+       }\n+       emit_insn (gen_rtx_SET (VOIDmode,\n+                              operands[2],\n+                              gen_rtx_ASHIFTRT (SImode,\n+                                                operands[0],\n+                                                GEN_INT (31))));\n+     DONE;\n+  }\n+  [(set_attr \"length\" \"8,8,4,4\")\n+   (set_attr \"arch\" \"a,a,t2,t2\")]\n+)\n+\n+(define_insn_and_split \"*negdi_zero_extendsidi\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=r,&r\")\n+\t(neg:DI (zero_extend:DI (match_operand:SI 1 \"s_register_operand\" \"0,r\"))))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_32BIT\"\n+  \"#\" ; \"rsbs\\\\t%Q0, %1, #0\\;sbc\\\\t%R0,%R0,%R0\"\n+      ;; Don't care what register is input to sbc,\n+      ;; since we just just need to propagate the carry.\n+  \"&& reload_completed\"\n+  [(parallel [(set (reg:CC CC_REGNUM)\n+                   (compare:CC (const_int 0) (match_dup 1)))\n+              (set (match_dup 0) (minus:SI (const_int 0) (match_dup 1)))])\n+   (set (match_dup 2) (minus:SI (minus:SI (match_dup 2) (match_dup 2))\n+                                (ltu:SI (reg:CC_C CC_REGNUM) (const_int 0))))]\n+  {\n+    operands[2] = gen_highpart (SImode, operands[0]);\n+    operands[0] = gen_lowpart (SImode, operands[0]);\n+  }\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8\")]   ;; length in thumb is 4\n+)\n+\n ;; abssi2 doesn't really clobber the condition codes if a different register\n ;; is being set.  To keep things simple, assume during rtl manipulations that\n ;; it does, but tell the final scan operator the truth.  Similarly for"}, {"sha": "b60003fbaf58e59fae586aeba5185d096ef28336", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045e472c6eebe085feb5d3b95666409b78ba2b5b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045e472c6eebe085feb5d3b95666409b78ba2b5b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=045e472c6eebe085feb5d3b95666409b78ba2b5b", "patch": "@@ -1,3 +1,10 @@\n+2013-04-05  Greta Yorsh  <Greta.Yorsh@arm.com>\n+\n+\t* gcc.target/arm/negdi-1.c: New test.\n+\t* gcc.target/arm/negdi-2.c: Likewise.\n+\t* gcc.target/arm/negdi-3.c: Likewise.\n+\t* gcc.target/arm/negdi-4.c: Likewise.\n+\n 2013-04-05  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* lib/target-supports.exp (add_options_for_arm_v8_neon):"}, {"sha": "c9bef049c4a467288e90c96abe1a34e2d1e028fc", "filename": "gcc/testsuite/gcc.target/arm/negdi-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045e472c6eebe085feb5d3b95666409b78ba2b5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnegdi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045e472c6eebe085feb5d3b95666409b78ba2b5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnegdi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnegdi-1.c?ref=045e472c6eebe085feb5d3b95666409b78ba2b5b", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-options \"-O2\" } */\n+\n+signed long long extendsidi_negsi (signed int x)\n+{\n+  return -x;\n+}\n+\n+/*\n+Expected output:\n+\trsb\tr0, r0, #0\n+\tmov\tr1, r0, asr #31\n+*/\n+/* { dg-final { scan-assembler-times \"rsb\" 1 { target { arm_nothumb } } } } */\n+/* { dg-final { scan-assembler-times \"negs\\\\t\" 1 { target { ! { arm_nothumb } } } } } */\n+/* { dg-final { scan-assembler-times \"asr\" 1 } } */"}, {"sha": "96bbcab337e54cdb072fc11f19cf412b56b463a5", "filename": "gcc/testsuite/gcc.target/arm/negdi-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045e472c6eebe085feb5d3b95666409b78ba2b5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnegdi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045e472c6eebe085feb5d3b95666409b78ba2b5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnegdi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnegdi-2.c?ref=045e472c6eebe085feb5d3b95666409b78ba2b5b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-options \"-O2\" } */\n+\n+signed long long zero_extendsidi_negsi (unsigned int x)\n+{\n+  return -x;\n+}\n+/*\n+Expected output:\n+\trsb\tr0, r0, #0\n+\tmov\tr1, #0\n+*/\n+/* { dg-final { scan-assembler-times \"rsb\\\\tr0, r0, #0\" 1 { target { arm_nothumb } } } } */\n+/* { dg-final { scan-assembler-times \"negs\\\\tr0, r0\" 1 { target { ! arm_nothumb } } } } */\n+/* { dg-final { scan-assembler-times \"mov\" 1 } } */"}, {"sha": "76ddf49fc0ddb8b0287b8e30f72962ea25d12438", "filename": "gcc/testsuite/gcc.target/arm/negdi-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045e472c6eebe085feb5d3b95666409b78ba2b5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnegdi-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045e472c6eebe085feb5d3b95666409b78ba2b5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnegdi-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnegdi-3.c?ref=045e472c6eebe085feb5d3b95666409b78ba2b5b", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-options \"-O2\" } */\n+\n+signed long long negdi_zero_extendsidi (unsigned int x)\n+{\n+  return -((signed long long) x);\n+}\n+/*\n+Expected output:\n+        rsbs    r0, r0, #0\n+        sbc     r1, r1, r1\n+*/\n+/* { dg-final { scan-assembler-times \"rsb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sbc\" 1 } } */\n+/* { dg-final { scan-assembler-times \"mov\" 0 } } */\n+/* { dg-final { scan-assembler-times \"rsc\" 0 } } */"}, {"sha": "dc3deaad5ada72d7549dd8be6bab3e26e826912e", "filename": "gcc/testsuite/gcc.target/arm/negdi-4.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/045e472c6eebe085feb5d3b95666409b78ba2b5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnegdi-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/045e472c6eebe085feb5d3b95666409b78ba2b5b/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnegdi-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fnegdi-4.c?ref=045e472c6eebe085feb5d3b95666409b78ba2b5b", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm32 } */\n+/* { dg-options \"-O2\" } */\n+\n+signed long long negdi_extendsidi (signed int x)\n+{\n+  return -((signed long long) x);\n+}\n+/*\n+Expected output:\n+        rsbs    r0, r0, #0\n+        mov     r1, r0, asr #31\n+*/\n+/* { dg-final { scan-assembler-times \"rsb\" 1 } } */\n+/* { dg-final { scan-assembler-times \"asr\" 1 } } */\n+/* { dg-final { scan-assembler-times \"rsc\" 0 } } */"}]}