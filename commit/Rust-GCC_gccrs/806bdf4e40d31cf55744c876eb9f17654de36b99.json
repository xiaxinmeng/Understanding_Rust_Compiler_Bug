{"sha": "806bdf4e40d31cf55744c876eb9f17654de36b99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA2YmRmNGU0MGQzMWNmNTU3NDRjODc2ZWI5ZjE3NjU0ZGUzNmI5OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-10-07T07:53:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-10-07T07:53:45Z"}, "message": "re PR tree-optimization/91975 (worse code for small array copy using pointer arithmetic than array indexing)\n\n2019-10-07  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/91975\n\t* tree-ssa-loop-ivcanon.c (constant_after_peeling): Consistently\n\thandle invariants.\n\n\t* g++.dg/tree-ssa/ivopts-3.C: Adjust.\n\t* gcc.dg/vect/vect-profile-1.c: Disable cunrolli.\n\t* gcc.dg/vect/vect-double-reduc-6.c: Disable unrolling of\n\tthe innermost loop.\n\t* gcc.dg/vect/vect-93.c: Likewise.\n\t* gcc.dg/vect/vect-105.c: Likewise.\n\t* gcc.dg/vect/pr79920.c: Likewise.\n\t* gcc.dg/vect/no-vfa-vect-102.c: Likewise.\n\t* gcc.dg/vect/no-vfa-vect-101.c: Likewise.\n\t* gcc.dg/vect/pr83202-1.c: Operate on a larger array.\n\t* gfortran.dg/vect/vect-8.f90: Likewise.\n\t* gcc.dg/tree-ssa/cunroll-2.c: Scan early unrolling dump instead\n\tof late one.\n\nFrom-SVN: r276645", "tree": {"sha": "6dc6ccd9075dc7a84dfda6fb6ba4c80c1786f6b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6dc6ccd9075dc7a84dfda6fb6ba4c80c1786f6b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/806bdf4e40d31cf55744c876eb9f17654de36b99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806bdf4e40d31cf55744c876eb9f17654de36b99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/806bdf4e40d31cf55744c876eb9f17654de36b99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/806bdf4e40d31cf55744c876eb9f17654de36b99/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e1f7c33aeaf33ca532fbef745bb4ab1e3b0aa3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e1f7c33aeaf33ca532fbef745bb4ab1e3b0aa3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e1f7c33aeaf33ca532fbef745bb4ab1e3b0aa3f"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "ef1eb5973cc85e4ac8bff76d9e6bf008be7101af", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=806bdf4e40d31cf55744c876eb9f17654de36b99", "patch": "@@ -1,3 +1,9 @@\n+2019-10-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91975\n+\t* tree-ssa-loop-ivcanon.c (constant_after_peeling): Consistently\n+\thandle invariants.\n+\n 2019-10-06  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* var-tracking.c (dataflow_set_clear_at_call): Hoist temporary"}, {"sha": "e8e006061ece95311a9a027fbda1504553f925aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=806bdf4e40d31cf55744c876eb9f17654de36b99", "patch": "@@ -1,3 +1,20 @@\n+2019-10-07  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91975\n+\t* g++.dg/tree-ssa/ivopts-3.C: Adjust.\n+\t* gcc.dg/vect/vect-profile-1.c: Disable cunrolli.\n+\t* gcc.dg/vect/vect-double-reduc-6.c: Disable unrolling of\n+\tthe innermost loop.\n+\t* gcc.dg/vect/vect-93.c: Likewise.\n+\t* gcc.dg/vect/vect-105.c: Likewise.\n+\t* gcc.dg/vect/pr79920.c: Likewise.\n+\t* gcc.dg/vect/no-vfa-vect-102.c: Likewise.\n+\t* gcc.dg/vect/no-vfa-vect-101.c: Likewise.\n+\t* gcc.dg/vect/pr83202-1.c: Operate on a larger array.\n+\t* gfortran.dg/vect/vect-8.f90: Likewise.\n+\t* gcc.dg/tree-ssa/cunroll-2.c: Scan early unrolling dump instead\n+\tof late one.\n+\n 2019-10-05  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/47045"}, {"sha": "6760a5b185176e781afb3dded2e09793b3cf7ba6", "filename": "gcc/testsuite/g++.dg/tree-ssa/ivopts-3.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fivopts-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fivopts-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fivopts-3.C?ref=806bdf4e40d31cf55744c876eb9f17654de36b99", "patch": "@@ -70,6 +70,8 @@ int main ( int , char** ) {\n     return 0;\n }\n \n-// Verify that on x86_64 and i?86 we use a single IV for the innermost loop\n+// Verify that on x86_64 and i?86 we unroll the innsermost loop and\n+// use three IVs for the then innermost loop\n \n-// { dg-final { scan-tree-dump \"Selected IV set for loop \\[0-9\\]* at \\[^ \\]*:64, 3 avg niters, 1 IVs\" \"ivopts\" { target x86_64-*-* i?86-*-* } } }\n+// { dg-final { scan-tree-dump \"Selected IV set for loop \\[0-9\\]* at \\[^ \\]*:63, 127 avg niters, 3 IVs\" \"ivopts\" { target x86_64-*-* i?86-*-* } } }\n+// { dg-final { scan-tree-dump-not \"Selected IV set for loop \\[0-9\\]* at \\[^ \\]*:64\" \"ivopts\" { target x86_64-*-* i?86-*-* } } }"}, {"sha": "ae3fec9974971a42f5c0e16f242fccd635738db9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/cunroll-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-2.c?ref=806bdf4e40d31cf55744c876eb9f17654de36b99", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -fdump-tree-cunroll-details\" } */\n+/* { dg-options \"-O3 -fdump-tree-cunrolli-details\" } */\n int a[2];\n int test2 (void);\n void\n@@ -14,4 +14,4 @@ test(int c)\n     }\n }\n /* We are not able to get rid of the final conditional because the loop has two exits.  */\n-/* { dg-final { scan-tree-dump \"loop with 1 iterations completely unrolled\" \"cunroll\"} } */\n+/* { dg-final { scan-tree-dump \"loop with 2 iterations completely unrolled\" \"cunrolli\"} } */"}, {"sha": "ce934279ddfe073a96ef8cd7e0d383ca979bda7a", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-101.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-101.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-101.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-101.c?ref=806bdf4e40d31cf55744c876eb9f17654de36b99", "patch": "@@ -22,6 +22,7 @@ int main1 (int x, int y) {\n   p = (struct extraction *) malloc (sizeof (struct extraction));\n \n   /* Not vectorizable: different unknown offset.  */\n+#pragma GCC unroll 0\n   for (i = 0; i < N; i++)\n     {\n       *((int *)p + x + i) = a[i];"}, {"sha": "d9e0529e73f0a566220020ad671f432f3e72299f", "filename": "gcc/testsuite/gcc.dg/vect/no-vfa-vect-102.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-vfa-vect-102.c?ref=806bdf4e40d31cf55744c876eb9f17654de36b99", "patch": "@@ -28,6 +28,7 @@ int main1 (int x, int y) {\n     }\n \n   /* Not vectorizable: distance 1.  */\n+#pragma GCC unroll 0\n   for (i = 0; i < N - 1; i++)\n     {\n        *((int *)p + x + i + 1) = *((int *)p + x + i);"}, {"sha": "38e0fef779a0b568c09ba826533e896bf671f998", "filename": "gcc/testsuite/gcc.dg/vect/pr79920.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr79920.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr79920.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr79920.c?ref=806bdf4e40d31cf55744c876eb9f17654de36b99", "patch": "@@ -14,6 +14,7 @@ compute_integral (double w_1[18])\n \n   for (int ip_1 = 0; ip_1 < 2; ++ip_1)\n     {\n+#pragma GCC unroll 0\n       for (int i_0 = 0; i_0 < 6; ++i_0)\n \tt33[ip_1][i_0] = ((w_1[i_0*3] * t32[ip_1][0])\n \t\t\t  + (w_1[i_0*3+2] * t32[ip_1][2]));"}, {"sha": "ac12f079839ba5b86efa8ba9ed3dc23bb48c40e7", "filename": "gcc/testsuite/gcc.dg/vect/pr83202-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr83202-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr83202-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr83202-1.c?ref=806bdf4e40d31cf55744c876eb9f17654de36b99", "patch": "@@ -1,9 +1,9 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target vect_double } */\n \n-void test(double data[8][8])\n+void test(double data[16][16])\n {\n-  for (int i = 0; i < 8; i++)\n+  for (int i = 0; i < 16; i++)\n     {\n       for (int j = 0; j < i; j+=4)\n \t{"}, {"sha": "17b6e89d8f69053b5825c859f3ab5c68c49b3a5d", "filename": "gcc/testsuite/gcc.dg/vect/vect-105.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-105.c?ref=806bdf4e40d31cf55744c876eb9f17654de36b99", "patch": "@@ -35,6 +35,7 @@ int main1 (int x) {\n   /* Vectorizable: distance > number of iterations.  */\n   for (i = 1; i < N; i++)\n   {\n+#pragma GCC unroll 0\n     for (j = 0; j < N; j++)\n     {\n        *((int *)p + x + i + j) = *((int *)p + x + i + j + 5);"}, {"sha": "c3e12783b2c47a4e296fd47cc9dc8e73b7ccebb0", "filename": "gcc/testsuite/gcc.dg/vect/vect-93.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-93.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-93.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-93.c?ref=806bdf4e40d31cf55744c876eb9f17654de36b99", "patch": "@@ -29,6 +29,7 @@ main1 (float *pa)\n \tabort ();\n     }\n \n+#pragma GCC unroll 0\n   for (i = 1; i <= N2; i++)\n     {\n       pa[i] = 3.0;"}, {"sha": "85aec1bf609582988f06826afb6b7ce77d6d83de", "filename": "gcc/testsuite/gcc.dg/vect/vect-double-reduc-6.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-double-reduc-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-double-reduc-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-double-reduc-6.c?ref=806bdf4e40d31cf55744c876eb9f17654de36b99", "patch": "@@ -19,6 +19,7 @@ foo ()\n     {\n       sum = 1;\n       for (j = 0; j < K; j++) \n+#pragma GCC unroll 0\n         for (i = 0; i < K; i++)\n           sum *= in[i+k][j];\n       out[k] = sum;"}, {"sha": "922f965806f92368fc6748cf4a61176620e8631b", "filename": "gcc/testsuite/gcc.dg/vect/vect-profile-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-profile-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-profile-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-profile-1.c?ref=806bdf4e40d31cf55744c876eb9f17654de36b99", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n /* { dg-require-effective-target vect_int } */\n-/* { dg-additional-options \"-fdump-tree-vect-details-blocks\" } */\n+/* { dg-additional-options \"-fdump-tree-vect-details-blocks -fdisable-tree-cunrolli\" } */\n \n /* At least one of these should correspond to a full vector.  */\n "}, {"sha": "386f7de4a7e46f0825aa0f8d7afc0142a1d52914", "filename": "gcc/testsuite/gfortran.dg/vect/vect-8.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-8.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-8.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-8.f90?ref=806bdf4e40d31cf55744c876eb9f17654de36b99", "patch": "@@ -247,7 +247,7 @@ SUBROUTINE kernel(tk)\n nl2= 2\n fw= 2.000D0\n   DO ky= 2,n\n-DO kx= 2,3\n+DO kx= 2,4\n     du1ky= u1(kx,ky+1,nl1)-u1(kx,ky-1,nl1)\n     du2ky= u2(kx,ky+1,nl1)-u2(kx,ky-1,nl1)\n     du3ky= u3(kx,ky+1,nl1)-u3(kx,ky-1,nl1)"}, {"sha": "d38959c3aa2bc363e72ff1e0e4acb2d4b3356aba", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/806bdf4e40d31cf55744c876eb9f17654de36b99/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=806bdf4e40d31cf55744c876eb9f17654de36b99", "patch": "@@ -195,9 +195,8 @@ constant_after_peeling (tree op, gimple *stmt, class loop *loop)\n   /* Induction variables are constants when defined in loop.  */\n   if (loop_containing_stmt (stmt) != loop)\n     return false;\n-  tree ev = analyze_scalar_evolution (loop, op);\n-  if (chrec_contains_undetermined (ev)\n-      || chrec_contains_symbols (ev))\n+  tree ev = instantiate_parameters (loop, analyze_scalar_evolution (loop, op));\n+  if (chrec_contains_undetermined (ev))\n     return false;\n   return true;\n }"}]}