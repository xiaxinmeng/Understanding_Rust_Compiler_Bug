{"sha": "2b63a3acfa4f49c2117b1c03287be7b5df20ebf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI2M2EzYWNmYTRmNDljMjExN2IxYzAzMjg3YmU3YjVkZjIwZWJmOA==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2014-09-24T18:30:34Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2014-09-24T18:30:34Z"}, "message": "Improve prepare_shrink_wrap to sink more instructions\n\n  gcc/\n    * shrink-wrap.c (move_insn_for_shrink_wrap): Add further check when\n    !REG_P (src) to release more instruction sink opportunities.\n\n  gcc/testsuite/\n    * gcc.target/aarch64/shrink_wrap_symbol_ref_1.c: New testcase.\n\nFrom-SVN: r215563", "tree": {"sha": "1e66f041f02df3ab34d92329d628325b4a11bc3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e66f041f02df3ab34d92329d628325b4a11bc3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b63a3acfa4f49c2117b1c03287be7b5df20ebf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b63a3acfa4f49c2117b1c03287be7b5df20ebf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b63a3acfa4f49c2117b1c03287be7b5df20ebf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b63a3acfa4f49c2117b1c03287be7b5df20ebf8/comments", "author": null, "committer": null, "parents": [{"sha": "8919453c16b36ebbcb48aec5464b8862503017b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8919453c16b36ebbcb48aec5464b8862503017b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8919453c16b36ebbcb48aec5464b8862503017b4"}], "stats": {"total": 82, "additions": 76, "deletions": 6}, "files": [{"sha": "fd6a7d32cb638731c21a0b02d9804b7208ffc9f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b63a3acfa4f49c2117b1c03287be7b5df20ebf8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b63a3acfa4f49c2117b1c03287be7b5df20ebf8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2b63a3acfa4f49c2117b1c03287be7b5df20ebf8", "patch": "@@ -1,3 +1,8 @@\n+2014-09-24  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* shrink-wrap.c (move_insn_for_shrink_wrap): Add further check when\n+\t!REG_P (src) to release more instruction sink opportunities.\n+\n 2014-09-24  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_register_move_cost): Add register"}, {"sha": "af23f0288d74730e11351915df91bd61f88fbaff", "filename": "gcc/shrink-wrap.c", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b63a3acfa4f49c2117b1c03287be7b5df20ebf8/gcc%2Fshrink-wrap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b63a3acfa4f49c2117b1c03287be7b5df20ebf8/gcc%2Fshrink-wrap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fshrink-wrap.c?ref=2b63a3acfa4f49c2117b1c03287be7b5df20ebf8", "patch": "@@ -53,6 +53,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"bb-reorder.h\"\n #include \"shrink-wrap.h\"\n #include \"regcprop.h\"\n+#include \"rtl-iter.h\"\n \n #ifdef HAVE_simple_return\n \n@@ -169,7 +170,9 @@ move_insn_for_shrink_wrap (basic_block bb, rtx_insn *insn,\n {\n   rtx set, src, dest;\n   bitmap live_out, live_in, bb_uses, bb_defs;\n-  unsigned int i, dregno, end_dregno, sregno, end_sregno;\n+  unsigned int i, dregno, end_dregno;\n+  unsigned int sregno = FIRST_PSEUDO_REGISTER;\n+  unsigned int end_sregno = FIRST_PSEUDO_REGISTER;\n   basic_block next_block;\n   edge live_edge;\n \n@@ -179,7 +182,34 @@ move_insn_for_shrink_wrap (basic_block bb, rtx_insn *insn,\n     return false;\n   src = SET_SRC (set);\n   dest = SET_DEST (set);\n-  if (!REG_P (dest) || !REG_P (src)\n+\n+  if (!REG_P (src))\n+    {\n+      unsigned int reg_num = 0;\n+      unsigned int nonconstobj_num = 0;\n+      rtx src_inner = NULL_RTX;\n+\n+      subrtx_var_iterator::array_type array;\n+      FOR_EACH_SUBRTX_VAR (iter, array, src, ALL)\n+\t{\n+\t  rtx x = *iter;\n+\t  if (REG_P (x))\n+\t    {\n+\t      reg_num++;\n+\t      src_inner = x;\n+\t    }\n+\t  else if (!CONSTANT_P (x) && OBJECT_P (x))\n+\t    nonconstobj_num++;\n+\t}\n+\n+      if (nonconstobj_num > 0\n+\t  || reg_num > 1)\n+\tsrc = NULL_RTX;\n+      else if (reg_num == 1)\n+\tsrc = src_inner;\n+    }\n+\n+  if (!REG_P (dest) || src == NULL_RTX\n       /* STACK or FRAME related adjustment might be part of prologue.\n \t So keep them in the entry block.  */\n       || dest == stack_pointer_rtx\n@@ -188,10 +218,13 @@ move_insn_for_shrink_wrap (basic_block bb, rtx_insn *insn,\n     return false;\n \n   /* Make sure that the source register isn't defined later in BB.  */\n-  sregno = REGNO (src);\n-  end_sregno = END_REGNO (src);\n-  if (overlaps_hard_reg_set_p (defs, GET_MODE (src), sregno))\n-    return false;\n+  if (REG_P (src))\n+    {\n+      sregno = REGNO (src);\n+      end_sregno = END_REGNO (src);\n+      if (overlaps_hard_reg_set_p (defs, GET_MODE (src), sregno))\n+\treturn false;\n+    }\n \n   /* Make sure that the destination register isn't referenced later in BB.  */\n   dregno = REGNO (dest);"}, {"sha": "ddf0c323a041ecafc48b1b5c7bba722f38fe1135", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b63a3acfa4f49c2117b1c03287be7b5df20ebf8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b63a3acfa4f49c2117b1c03287be7b5df20ebf8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b63a3acfa4f49c2117b1c03287be7b5df20ebf8", "patch": "@@ -1,3 +1,7 @@\n+2014-09-24  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/aarch64/shrink_wrap_symbol_ref_1.c: New testcase.\n+\n 2014-09-24  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/61405"}, {"sha": "dd3056d0aacafdf4c2f584dc9cde53888ca4f835", "filename": "gcc/testsuite/gcc.target/aarch64/shrink_wrap_symbol_ref_1.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b63a3acfa4f49c2117b1c03287be7b5df20ebf8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrink_wrap_symbol_ref_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b63a3acfa4f49c2117b1c03287be7b5df20ebf8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrink_wrap_symbol_ref_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fshrink_wrap_symbol_ref_1.c?ref=2b63a3acfa4f49c2117b1c03287be7b5df20ebf8", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-rtl-pro_and_epilogue\" } */\n+\n+extern char *asm_out_file;\n+extern void default_elf_asm_output_ascii (char *, const char *, int);\n+\n+void\n+assemble_string (const char *p, int size)\n+{\n+  int pos = 0;\n+  int maximum = 2000;\n+\n+  while (pos < size)\n+    {\n+      int thissize = size - pos;\n+\n+      if (thissize > maximum)\n+\tthissize = maximum;\n+\n+      default_elf_asm_output_ascii (asm_out_file, p, thissize);;\n+\n+      pos += thissize;\n+      p += thissize;\n+    }\n+}\n+\n+/* { dg-final { scan-rtl-dump \"Performing shrink-wrapping\" \"pro_and_epilogue\"  } } */\n+/* { dg-final { cleanup-rtl-dump \"pro_and_epilogue\" } } */"}]}