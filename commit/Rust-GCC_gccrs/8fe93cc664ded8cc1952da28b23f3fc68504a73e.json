{"sha": "8fe93cc664ded8cc1952da28b23f3fc68504a73e", "node_id": "C_kwDOANBUbNoAKDhmZTkzY2M2NjRkZWQ4Y2MxOTUyZGEyOGIyM2YzZmM2ODUwNGE3M2U", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2021-10-20T08:23:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-10-20T08:45:48Z"}, "message": "Avoid exception propagation during bootstrap\n\nThis addresses PR ada/100486, which is the bootstrap failure of GCC 11 for\n32-bit Windows in the MSYS setup.  The PR shows that we cannot rely on\nexception propagation being operational during the bootstrap, at least on\nthe 11 branch, so fix this by removing the problematic raise statement.\n\ngcc/ada/\n\tPR ada/100486\n\t* sem_prag.adb (Check_Valid_Library_Unit_Pragma): Do not raise an\n\texception as part of the bootstrap.", "tree": {"sha": "6abe9a6dbd5db638339298890fc84c96cb482fb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6abe9a6dbd5db638339298890fc84c96cb482fb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fe93cc664ded8cc1952da28b23f3fc68504a73e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fe93cc664ded8cc1952da28b23f3fc68504a73e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fe93cc664ded8cc1952da28b23f3fc68504a73e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fe93cc664ded8cc1952da28b23f3fc68504a73e/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c7abdf46fb7ac9a0c37f120feff3fcc3a752584f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7abdf46fb7ac9a0c37f120feff3fcc3a752584f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7abdf46fb7ac9a0c37f120feff3fcc3a752584f"}], "stats": {"total": 74, "additions": 69, "deletions": 5}, "files": [{"sha": "1e6397f87b8666731bb8c502a55ae1c78963d730", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 69, "deletions": 5, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fe93cc664ded8cc1952da28b23f3fc68504a73e/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fe93cc664ded8cc1952da28b23f3fc68504a73e/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=8fe93cc664ded8cc1952da28b23f3fc68504a73e", "patch": "@@ -4144,8 +4144,10 @@ package body Sem_Prag is\n       --  than library level instantiations these can appear in contexts which\n       --  would normally be invalid (they only apply to the original template\n       --  and to library level instantiations), and they are simply ignored,\n-      --  which is implemented by rewriting them as null statements and raising\n-      --  exception to terminate analysis.\n+      --  which is implemented by rewriting them as null statements and\n+      --  optionally raising Pragma_Exit to terminate analysis. An exception\n+      --  is not always raised to avoid exception propagation during the\n+      --  bootstrap, so all callers should check whether N has been rewritten.\n \n       procedure Check_Variant (Variant : Node_Id; UU_Typ : Entity_Id);\n       --  Check an Unchecked_Union variant for lack of nested variants and\n@@ -6652,8 +6654,14 @@ package body Sem_Prag is\n                Sindex := Source_Index (Current_Sem_Unit);\n \n                if Loc not in Source_First (Sindex) .. Source_Last (Sindex) then\n+                  --  We do not want to raise an exception here since this code\n+                  --  is part of the bootstrap path where we cannot rely on\n+                  --  exception proapgation working.\n+                  --  Instead the caller should check for N being rewritten as\n+                  --  a null statement.\n+                  --  This code triggers when compiling a-except.adb.\n+\n                   Rewrite (N, Make_Null_Statement (Loc));\n-                  raise Pragma_Exit;\n \n                --  If before first declaration, the pragma applies to the\n                --  enclosing unit, and the name if present must be this name.\n@@ -12719,6 +12727,13 @@ package body Sem_Prag is\n             Check_Ada_83_Warning;\n             Check_Valid_Library_Unit_Pragma;\n \n+            --  If N was rewritten as a null statement there is nothing more\n+            --  to do.\n+\n+            if Nkind (N) = N_Null_Statement then\n+               return;\n+            end if;\n+\n             Lib_Entity := Find_Lib_Unit_Name;\n \n             --  A pragma that applies to a Ghost entity becomes Ghost for the\n@@ -15967,6 +15982,13 @@ package body Sem_Prag is\n             Check_Ada_83_Warning;\n             Check_Valid_Library_Unit_Pragma;\n \n+            --  If N was rewritten as a null statement there is nothing more\n+            --  to do.\n+\n+            if Nkind (N) = N_Null_Statement then\n+               return;\n+            end if;\n+\n             Cunit_Node := Cunit (Current_Sem_Unit);\n             Cunit_Ent  := Cunit_Entity (Current_Sem_Unit);\n \n@@ -19650,6 +19672,13 @@ package body Sem_Prag is\n             GNAT_Pragma;\n             Check_Valid_Library_Unit_Pragma;\n \n+            --  If N was rewritten as a null statement there is nothing more\n+            --  to do.\n+\n+            if Nkind (N) = N_Null_Statement then\n+               return;\n+            end if;\n+\n             --  Must appear for a spec or generic spec\n \n             if Nkind (Unit (Cunit (Current_Sem_Unit))) not in\n@@ -21436,6 +21465,13 @@ package body Sem_Prag is\n             Check_Ada_83_Warning;\n             Check_Valid_Library_Unit_Pragma;\n \n+            --  If N was rewritten as a null statement there is nothing more\n+            --  to do.\n+\n+            if Nkind (N) = N_Null_Statement then\n+               return;\n+            end if;\n+\n             Ent := Find_Lib_Unit_Name;\n \n             --  A pragma that applies to a Ghost entity becomes Ghost for the\n@@ -22072,8 +22108,15 @@ package body Sem_Prag is\n \n             if Is_Wrapper_Package (Current_Scope) then\n                return;\n-            else\n-               Check_Valid_Library_Unit_Pragma;\n+            end if;\n+\n+            Check_Valid_Library_Unit_Pragma;\n+\n+            --  If N was rewritten as a null statement there is nothing more\n+            --  to do.\n+\n+            if Nkind (N) = N_Null_Statement then\n+               return;\n             end if;\n \n             Ent := Find_Lib_Unit_Name;\n@@ -22612,6 +22655,13 @@ package body Sem_Prag is\n             Check_Ada_83_Warning;\n             Check_Valid_Library_Unit_Pragma;\n \n+            --  If N was rewritten as a null statement there is nothing more\n+            --  to do.\n+\n+            if Nkind (N) = N_Null_Statement then\n+               return;\n+            end if;\n+\n             Cunit_Node := Cunit (Current_Sem_Unit);\n             K          := Nkind (Unit (Cunit_Node));\n             Cunit_Ent  := Cunit_Entity (Current_Sem_Unit);\n@@ -22651,6 +22701,13 @@ package body Sem_Prag is\n             Check_Ada_83_Warning;\n             Check_Valid_Library_Unit_Pragma;\n \n+            --  If N was rewritten as a null statement there is nothing more\n+            --  to do.\n+\n+            if Nkind (N) = N_Null_Statement then\n+               return;\n+            end if;\n+\n             Cunit_Node := Cunit (Current_Sem_Unit);\n             Cunit_Ent  := Cunit_Entity (Current_Sem_Unit);\n \n@@ -22847,6 +22904,13 @@ package body Sem_Prag is\n             Check_Ada_83_Warning;\n             Check_Valid_Library_Unit_Pragma;\n \n+            --  If N was rewritten as a null statement there is nothing more\n+            --  to do.\n+\n+            if Nkind (N) = N_Null_Statement then\n+               return;\n+            end if;\n+\n             Cunit_Node := Cunit (Current_Sem_Unit);\n             Cunit_Ent  := Cunit_Entity (Current_Sem_Unit);\n "}]}