{"sha": "71625f3dc600a9b363a02c996269a7e97d11c841", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE2MjVmM2RjNjAwYTliMzYzYTAyYzk5NjI2OWE3ZTk3ZDExYzg0MQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2005-06-10T01:44:59Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2005-06-10T01:44:59Z"}, "message": "linux.h (NO_PROFILE_COUNTERS): Define.\n\n\t* config/rs6000/linux.h (NO_PROFILE_COUNTERS): Define.\n\t* config/rs6000/linux64.h (NO_PROFILE_COUNTERS): Define as 1.\n\t* config/rs6000/rs6000.c (output_function_profiler): Obey\n\tNO_PROFILE_COUNTERS.  Handle TARGET_SECURE_PLT.  Use \"bcl 20,31\"\n\tfor -fPIC.  Delete save_lr and substitute its value into strings.\n\nFrom-SVN: r100814", "tree": {"sha": "ee2a5c2a0f9046974f3feece3f2d968b3247fd61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee2a5c2a0f9046974f3feece3f2d968b3247fd61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71625f3dc600a9b363a02c996269a7e97d11c841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71625f3dc600a9b363a02c996269a7e97d11c841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71625f3dc600a9b363a02c996269a7e97d11c841", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71625f3dc600a9b363a02c996269a7e97d11c841/comments", "author": null, "committer": null, "parents": [{"sha": "2e3f0db6f996d6b3d84955391263e9d035d58760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e3f0db6f996d6b3d84955391263e9d035d58760", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e3f0db6f996d6b3d84955391263e9d035d58760"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "b1fc45c604d055790ed32db0115b6d331ebdb0e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71625f3dc600a9b363a02c996269a7e97d11c841/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71625f3dc600a9b363a02c996269a7e97d11c841/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71625f3dc600a9b363a02c996269a7e97d11c841", "patch": "@@ -1,3 +1,11 @@\n+2005-06-10  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* config/rs6000/linux.h (NO_PROFILE_COUNTERS): Define.\n+\t* config/rs6000/linux64.h (NO_PROFILE_COUNTERS): Define as 1.\n+\t* config/rs6000/rs6000.c (output_function_profiler): Obey\n+\tNO_PROFILE_COUNTERS.  Handle TARGET_SECURE_PLT.  Use \"bcl 20,31\"\n+\tfor -fPIC.  Delete save_lr and substitute its value into strings.\n+\n 2005-06-09  Dale Johannesen  <dalej@apple.com>\n \n \t* config/i386/i386.c (optimization_options):  Make -fno-math-errno"}, {"sha": "c7edf500a7e38c8150c4ed67dfe2073f5d043561", "filename": "gcc/config/rs6000/linux.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71625f3dc600a9b363a02c996269a7e97d11c841/gcc%2Fconfig%2Frs6000%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71625f3dc600a9b363a02c996269a7e97d11c841/gcc%2Fconfig%2Frs6000%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux.h?ref=71625f3dc600a9b363a02c996269a7e97d11c841", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for PowerPC machines running Linux.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005\n    Free Software Foundation, Inc.\n    Contributed by Michael Meissner (meissner@cygnus.com).\n \n@@ -28,6 +28,9 @@\n    process.  */\n #define OS_MISSING_POWERPC64 1\n \n+/* We use glibc _mcount for profiling.  */\n+#define NO_PROFILE_COUNTERS 1\n+\n /* glibc has float and long double forms of math functions.  */\n #undef  TARGET_C99_FUNCTIONS\n #define TARGET_C99_FUNCTIONS 1"}, {"sha": "29e182522f85211ac94ae08d608bb2cd0c10e18d", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71625f3dc600a9b363a02c996269a7e97d11c841/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71625f3dc600a9b363a02c996269a7e97d11c841/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=71625f3dc600a9b363a02c996269a7e97d11c841", "patch": "@@ -207,7 +207,7 @@ extern int dot_symbols;\n #endif\n \n /* We use glibc _mcount for profiling.  */\n-#define NO_PROFILE_COUNTERS TARGET_64BIT\n+#define NO_PROFILE_COUNTERS 1\n #define PROFILE_HOOK(LABEL) \\\n   do { if (TARGET_64BIT) output_profile_hook (LABEL); } while (0)\n "}, {"sha": "95ed9e0b34e5bf06120217730992e0493bfc9abd", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71625f3dc600a9b363a02c996269a7e97d11c841/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71625f3dc600a9b363a02c996269a7e97d11c841/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=71625f3dc600a9b363a02c996269a7e97d11c841", "patch": "@@ -15433,38 +15433,53 @@ void\n output_function_profiler (FILE *file, int labelno)\n {\n   char buf[100];\n-  int save_lr = 8;\n \n   switch (DEFAULT_ABI)\n     {\n     default:\n       gcc_unreachable ();\n \n     case ABI_V4:\n-      save_lr = 4;\n       if (!TARGET_32BIT)\n \t{\n \t  warning (0, \"no profiling of 64-bit code for this ABI\");\n \t  return;\n \t}\n       ASM_GENERATE_INTERNAL_LABEL (buf, \"LP\", labelno);\n       fprintf (file, \"\\tmflr %s\\n\", reg_names[0]);\n-      if (flag_pic == 1)\n+      if (NO_PROFILE_COUNTERS)\n+\t{\n+\t  asm_fprintf (file, \"\\t{st|stw} %s,4(%s)\\n\",\n+\t\t       reg_names[0], reg_names[1]);\n+\t}\n+      else if (TARGET_SECURE_PLT && flag_pic)\n+\t{\n+\t  asm_fprintf (file, \"\\tbcl 20,31,1f\\n1:\\n\\t{st|stw} %s,4(%s)\\n\",\n+\t\t       reg_names[0], reg_names[1]);\n+\t  asm_fprintf (file, \"\\tmflr %s\\n\", reg_names[12]);\n+\t  asm_fprintf (file, \"\\t{cau|addis} %s,%s,\",\n+\t\t       reg_names[12], reg_names[12]);\n+\t  assemble_name (file, buf);\n+\t  asm_fprintf (file, \"-1b@ha\\n\\t{cal|la} %s,\", reg_names[0]);\n+\t  assemble_name (file, buf);\n+\t  asm_fprintf (file, \"-1b@l(%s)\\n\", reg_names[12]);\n+\t}\n+      else if (flag_pic == 1)\n \t{\n \t  fputs (\"\\tbl _GLOBAL_OFFSET_TABLE_@local-4\\n\", file);\n-\t  asm_fprintf (file, \"\\t{st|stw} %s,%d(%s)\\n\",\n-\t\t       reg_names[0], save_lr, reg_names[1]);\n+\t  asm_fprintf (file, \"\\t{st|stw} %s,4(%s)\\n\",\n+\t\t       reg_names[0], reg_names[1]);\n \t  asm_fprintf (file, \"\\tmflr %s\\n\", reg_names[12]);\n \t  asm_fprintf (file, \"\\t{l|lwz} %s,\", reg_names[0]);\n \t  assemble_name (file, buf);\n \t  asm_fprintf (file, \"@got(%s)\\n\", reg_names[12]);\n \t}\n       else if (flag_pic > 1)\n \t{\n-\t  asm_fprintf (file, \"\\t{st|stw} %s,%d(%s)\\n\",\n-\t\t       reg_names[0], save_lr, reg_names[1]);\n+\t  asm_fprintf (file, \"\\t{st|stw} %s,4(%s)\\n\",\n+\t\t       reg_names[0], reg_names[1]);\n \t  /* Now, we need to get the address of the label.  */\n-\t  fputs (\"\\tbl 1f\\n\\t.long \", file);\n+\t  fputs (\"\\tbcl 20,31,1f\\n\\t.long \", file);\n \t  assemble_name (file, buf);\n \t  fputs (\"-.\\n1:\", file);\n \t  asm_fprintf (file, \"\\tmflr %s\\n\", reg_names[11]);\n@@ -15478,8 +15493,8 @@ output_function_profiler (FILE *file, int labelno)\n \t  asm_fprintf (file, \"\\t{liu|lis} %s,\", reg_names[12]);\n \t  assemble_name (file, buf);\n \t  fputs (\"@ha\\n\", file);\n-\t  asm_fprintf (file, \"\\t{st|stw} %s,%d(%s)\\n\",\n-\t\t       reg_names[0], save_lr, reg_names[1]);\n+\t  asm_fprintf (file, \"\\t{st|stw} %s,4(%s)\\n\",\n+\t\t       reg_names[0], reg_names[1]);\n \t  asm_fprintf (file, \"\\t{cal|la} %s,\", reg_names[0]);\n \t  assemble_name (file, buf);\n \t  asm_fprintf (file, \"@l(%s)\\n\", reg_names[12]);"}]}