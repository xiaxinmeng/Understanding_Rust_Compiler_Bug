{"sha": "151effa22106a81f5835bb2dab7b95130f8fe2ef", "node_id": "C_kwDOANBUbNoAKDE1MWVmZmEyMjEwNmE4MWY1ODM1YmIyZGFiN2I5NTEzMGY4ZmUyZWY", "commit": {"author": {"name": "Dimitar Dimitrov", "email": "dimitar@dinux.eu", "date": "2022-08-22T18:49:21Z"}, "committer": {"name": "Dimitar Dimitrov", "email": "dimitar@dinux.eu", "date": "2022-08-22T19:29:07Z"}, "message": "pru: Add mov variants to load const -1\n\nUse the FILL instruction to efficiently load -1 constants.\n\ngcc/ChangeLog:\n\n\t* config/pru/pru.md (prumov<mode>, mov<mode>): Add\n\tvariants for loading -1 consts.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/pru/mov-m1.c: New test.\n\nSigned-off-by: Dimitar Dimitrov <dimitar@dinux.eu>", "tree": {"sha": "682589f6804e21a54aa28d4d5cfce170e3f085a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/682589f6804e21a54aa28d4d5cfce170e3f085a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/151effa22106a81f5835bb2dab7b95130f8fe2ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/151effa22106a81f5835bb2dab7b95130f8fe2ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/151effa22106a81f5835bb2dab7b95130f8fe2ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/151effa22106a81f5835bb2dab7b95130f8fe2ef/comments", "author": null, "committer": null, "parents": [{"sha": "10dd6dea95c5fc41c789c6506338e101e0590a02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10dd6dea95c5fc41c789c6506338e101e0590a02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10dd6dea95c5fc41c789c6506338e101e0590a02"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "02e11350a4dc1d684edeb8eb1a6ba2b31ae5421a", "filename": "gcc/config/pru/pru.md", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/151effa22106a81f5835bb2dab7b95130f8fe2ef/gcc%2Fconfig%2Fpru%2Fpru.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/151effa22106a81f5835bb2dab7b95130f8fe2ef/gcc%2Fconfig%2Fpru%2Fpru.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpru%2Fpru.md?ref=151effa22106a81f5835bb2dab7b95130f8fe2ef", "patch": "@@ -206,18 +206,19 @@\n ;;\n ;; Note: Assume that Program Mem (T constraint) can fit in 16 bits!\n (define_insn \"prumov<mode>\"\n-  [(set (match_operand:MOV32 0 \"nonimmediate_operand\" \"=m,r,r,r,r,r\")\n-\t(match_operand:MOV32 1 \"general_operand\"      \"r,m,r,T,J,iF\"))]\n+  [(set (match_operand:MOV32 0 \"nonimmediate_operand\" \"=m,r,r,r,r,r,r\")\n+\t(match_operand:MOV32 1 \"general_operand\"      \"r,m,r,T,J,Um,iF\"))]\n   \"\"\n   \"@\n     sb%B0o\\\\t%b1, %0, %S0\n     lb%B1o\\\\t%b0, %1, %S1\n     mov\\\\t%0, %1\n     ldi\\\\t%0, %%pmem(%1)\n     ldi\\\\t%0, %1\n+    fill\\\\t%0, 4\n     ldi32\\\\t%0, %1\"\n-  [(set_attr \"type\" \"st,ld,alu,alu,alu,alu\")\n-   (set_attr \"length\" \"4,4,4,4,4,8\")])\n+  [(set_attr \"type\" \"st,ld,alu,alu,alu,alu,alu\")\n+   (set_attr \"length\" \"4,4,4,4,4,4,8\")])\n \n \n ;; Separate pattern for 8 and 16 bit moves, since LDI32 pseudo instruction\n@@ -247,8 +248,8 @@\n ; Forcing DI reg alignment (akin to microblaze's HARD_REGNO_MODE_OK)\n ; does not seem efficient, and will violate TI ABI.\n (define_insn \"mov<mode>\"\n-  [(set (match_operand:MOV64 0 \"nonimmediate_operand\" \"=m,r,r,r,r,r\")\n-\t(match_operand:MOV64 1 \"general_operand\"      \"r,m,r,T,J,nF\"))]\n+  [(set (match_operand:MOV64 0 \"nonimmediate_operand\" \"=m,r,r,r,r,r,r\")\n+\t(match_operand:MOV64 1 \"general_operand\"      \"r,m,Um,r,T,J,nF\"))]\n   \"\"\n {\n   switch (which_alternative)\n@@ -258,25 +259,27 @@\n     case 1:\n       return \"lb%B1o\\\\t%b0, %1, %S1\";\n     case 2:\n+      return \"fill\\\\t%F0, 8\";\n+    case 3:\n       /* careful with overlapping source and destination regs.  */\n       gcc_assert (GP_REG_P (REGNO (operands[0])));\n       gcc_assert (GP_REG_P (REGNO (operands[1])));\n       if (REGNO (operands[0]) == (REGNO (operands[1]) + 4))\n \treturn \"mov\\\\t%N0, %N1\\;mov\\\\t%F0, %F1\";\n       else\n \treturn \"mov\\\\t%F0, %F1\\;mov\\\\t%N0, %N1\";\n-    case 3:\n-      return \"ldi\\\\t%F0, %%pmem(%1)\\;ldi\\\\t%N0, 0\";\n     case 4:\n-      return \"ldi\\\\t%F0, %1\\;ldi\\\\t%N0, 0\";\n+      return \"ldi\\\\t%F0, %%pmem(%1)\\;ldi\\\\t%N0, 0\";\n     case 5:\n+      return \"ldi\\\\t%F0, %1\\;ldi\\\\t%N0, 0\";\n+    case 6:\n       return \"ldi32\\\\t%F0, %w1\\;ldi32\\\\t%N0, %W1\";\n     default:\n       gcc_unreachable ();\n   }\n }\n-  [(set_attr \"type\" \"st,ld,alu,alu,alu,alu\")\n-   (set_attr \"length\" \"4,4,8,8,8,16\")])\n+  [(set_attr \"type\" \"st,ld,alu,alu,alu,alu,alu\")\n+   (set_attr \"length\" \"4,4,4,8,8,8,16\")])\n \n ;\n ; load_multiple pattern(s)."}, {"sha": "0b31020e101827afbab591c9fa87aa6cd8aaeb5d", "filename": "gcc/testsuite/gcc.target/pru/mov-m1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/151effa22106a81f5835bb2dab7b95130f8fe2ef/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmov-m1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/151effa22106a81f5835bb2dab7b95130f8fe2ef/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmov-m1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmov-m1.c?ref=151effa22106a81f5835bb2dab7b95130f8fe2ef", "patch": "@@ -0,0 +1,18 @@\n+/* Loading a register with constant -1 integer value.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+int\n+test_set_m1_si (void)\n+{\n+  /* { dg-final { scan-assembler \"fill\\\\tr14(.b0)?, 4\" } } */\n+  return -1;\n+}\n+\n+long long\n+test_set_m1_di (void)\n+{\n+  /* { dg-final { scan-assembler \"fill\\\\tr14(.b0)?, 8\" } } */\n+  return -1;\n+}"}]}