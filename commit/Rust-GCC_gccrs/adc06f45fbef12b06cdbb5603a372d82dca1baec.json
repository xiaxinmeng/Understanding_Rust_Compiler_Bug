{"sha": "adc06f45fbef12b06cdbb5603a372d82dca1baec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRjMDZmNDVmYmVmMTJiMDZjZGJiNTYwM2EzNzJkODJkY2ExYmFlYw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-04-05T21:22:40Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-04-05T21:22:40Z"}, "message": "PR c++/87145 - bogus error converting class type in template arg list.\n\n\t* pt.c (convert_nontype_argument): Don't call\n\tbuild_converted_constant_expr if it could involve calling a conversion\n\tfunction with a instantiation-dependent constructor as its argument.\n\n\t* g++.dg/cpp0x/constexpr-conv3.C: New test.\n\t* g++.dg/cpp0x/constexpr-conv4.C: New test.\n\nFrom-SVN: r270178", "tree": {"sha": "0215c743d4c6ee48f4fea2ddf91b7cde0e067dab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0215c743d4c6ee48f4fea2ddf91b7cde0e067dab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adc06f45fbef12b06cdbb5603a372d82dca1baec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adc06f45fbef12b06cdbb5603a372d82dca1baec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adc06f45fbef12b06cdbb5603a372d82dca1baec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adc06f45fbef12b06cdbb5603a372d82dca1baec/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6464d9b18207d381568b0a5b5a953286ccd2a5b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6464d9b18207d381568b0a5b5a953286ccd2a5b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6464d9b18207d381568b0a5b5a953286ccd2a5b6"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "f766f476f10fb4aca9584fc6d147907ebaa92aa3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adc06f45fbef12b06cdbb5603a372d82dca1baec/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adc06f45fbef12b06cdbb5603a372d82dca1baec/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=adc06f45fbef12b06cdbb5603a372d82dca1baec", "patch": "@@ -1,3 +1,10 @@\n+2019-04-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/87145 - bogus error converting class type in template arg list.\n+\t* pt.c (convert_nontype_argument): Don't call\n+\tbuild_converted_constant_expr if it could involve calling a conversion\n+\tfunction with a instantiation-dependent constructor as its argument.\n+\n 2019-04-05  Martin Sebor  <msebor@redhat.com>\n \n \tPR bootstrap/89980"}, {"sha": "f8001317bda58bef38b8556d77c82bbe4a3f64f2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adc06f45fbef12b06cdbb5603a372d82dca1baec/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adc06f45fbef12b06cdbb5603a372d82dca1baec/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=adc06f45fbef12b06cdbb5603a372d82dca1baec", "patch": "@@ -6837,6 +6837,19 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n       else if (INTEGRAL_OR_ENUMERATION_TYPE_P (type)\n \t       || cxx_dialect >= cxx17)\n \t{\n+\t  /* Calling build_converted_constant_expr might create a call to\n+\t     a conversion function with a value-dependent argument, which\n+\t     could invoke taking the address of a temporary representing\n+\t     the result of the conversion.  */\n+\t  if (COMPOUND_LITERAL_P (expr)\n+\t      && CONSTRUCTOR_IS_DEPENDENT (expr)\n+\t      && MAYBE_CLASS_TYPE_P (expr_type)\n+\t      && TYPE_HAS_CONVERSION (expr_type))\n+\t    {\n+\t      expr = build1 (IMPLICIT_CONV_EXPR, type, expr);\n+\t      IMPLICIT_CONV_EXPR_NONTYPE_ARG (expr) = true;\n+\t      return expr;\n+\t    }\n \t  /* C++17: A template-argument for a non-type template-parameter shall\n \t     be a converted constant expression (8.20) of the type of the\n \t     template-parameter.  */"}, {"sha": "b854b57507701a402679dbab2b5bc819c663d191", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adc06f45fbef12b06cdbb5603a372d82dca1baec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adc06f45fbef12b06cdbb5603a372d82dca1baec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=adc06f45fbef12b06cdbb5603a372d82dca1baec", "patch": "@@ -1,3 +1,9 @@\n+2019-04-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/87145 - bogus error converting class type in template arg list.\n+\t* g++.dg/cpp0x/constexpr-conv3.C: New test.\n+\t* g++.dg/cpp0x/constexpr-conv4.C: New test.\n+\n 2019-04-05  Martin Sebor  <msebor@redhat.com>\n \n \tPR bootstrap/89980"}, {"sha": "3f47c58cd2a24fe4e2550dcbbad14a35b0c756e9", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-conv3.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adc06f45fbef12b06cdbb5603a372d82dca1baec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-conv3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adc06f45fbef12b06cdbb5603a372d82dca1baec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-conv3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-conv3.C?ref=adc06f45fbef12b06cdbb5603a372d82dca1baec", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/87145\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T, T t> struct integral_constant {\n+  static constexpr T value = t;\n+};\n+\n+enum class Enum : unsigned {};\n+\n+struct Pod {\n+  unsigned val;\n+\n+  constexpr operator Enum() const {\n+    return static_cast<Enum>(val);\n+  }\n+};\n+\n+template<unsigned N>\n+constexpr void foo() {\n+  using Foo = integral_constant<Enum, Pod{N}>;\n+}\n+\n+int main() {\n+  foo<2>();\n+}"}, {"sha": "f4e3f00a585bd90c2808f8513edc89d5b984ada9", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-conv4.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adc06f45fbef12b06cdbb5603a372d82dca1baec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-conv4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adc06f45fbef12b06cdbb5603a372d82dca1baec/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-conv4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-conv4.C?ref=adc06f45fbef12b06cdbb5603a372d82dca1baec", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/87145\n+// { dg-do compile { target c++11 } }\n+\n+struct S {\n+  int val;\n+\n+  constexpr operator int() const {\n+    return static_cast<int>(val);\n+  }\n+};\n+\n+template<int N>\n+struct F { };\n+\n+template<unsigned N>\n+constexpr void foo() {\n+  F<int{N}> f;\n+  F<S{N}> f2;\n+}\n+\n+int\n+main()\n+{\n+  foo<2>();\n+}"}]}