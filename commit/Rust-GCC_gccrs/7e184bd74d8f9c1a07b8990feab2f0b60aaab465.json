{"sha": "7e184bd74d8f9c1a07b8990feab2f0b60aaab465", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2UxODRiZDc0ZDhmOWMxYTA3Yjg5OTBmZWFiMmYwYjYwYWFhYjQ2NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2013-01-24T22:50:43Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-01-24T22:50:43Z"}, "message": "i386.md (*movti_internal_rex64): Add (o,e) alternative.\n\n\t* config/i386/i386.md (*movti_internal_rex64): Add (o,e) alternative.\n\t(*movtf_internal_rex64): Add (!o,C) alternative\n\t(*movxf_internal_rex64): Ditto.\n\t(*movdf_internal_rex64): Add (?r,C) and (?m,C) alternatives.\n\nFrom-SVN: r195446", "tree": {"sha": "2bef631ccae6d2b3b274bb3f0364dd0225650110", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bef631ccae6d2b3b274bb3f0364dd0225650110"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e184bd74d8f9c1a07b8990feab2f0b60aaab465", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e184bd74d8f9c1a07b8990feab2f0b60aaab465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e184bd74d8f9c1a07b8990feab2f0b60aaab465", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e184bd74d8f9c1a07b8990feab2f0b60aaab465/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8eb03ce8dce2f4bd3ac2a43396ded5b13c002a43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eb03ce8dce2f4bd3ac2a43396ded5b13c002a43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eb03ce8dce2f4bd3ac2a43396ded5b13c002a43"}], "stats": {"total": 58, "additions": 35, "deletions": 23}, "files": [{"sha": "54a89affb986ebc2a13c39ddc43250ed94c71b35", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e184bd74d8f9c1a07b8990feab2f0b60aaab465/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e184bd74d8f9c1a07b8990feab2f0b60aaab465/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7e184bd74d8f9c1a07b8990feab2f0b60aaab465", "patch": "@@ -1,3 +1,10 @@\n+2012-01-24  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*movti_internal_rex64): Add (o,e) alternative.\n+\t(*movtf_internal_rex64): Add (!o,C) alternative\n+\t(*movxf_internal_rex64): Ditto.\n+\t(*movdf_internal_rex64): Add (?r,C) and (?m,C) alternatives.\n+\n 2013-01-24  Shenghou Ma  <minux.ma@gmail.com>\n \n \t* doc/invoke.texi: fix typo."}, {"sha": "9d0a4995fcc586360d0ecd5408f5c5c854b0454f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e184bd74d8f9c1a07b8990feab2f0b60aaab465/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e184bd74d8f9c1a07b8990feab2f0b60aaab465/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=7e184bd74d8f9c1a07b8990feab2f0b60aaab465", "patch": "@@ -1757,8 +1757,8 @@\n \t      (const_string \"OI\")))])\n \n (define_insn \"*movti_internal_rex64\"\n-  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=!r ,o,x,x ,m\")\n-\t(match_operand:TI 1 \"general_operand\"      \"riFo,r,C,xm,x\"))]\n+  [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=!r ,o ,x,x ,m\")\n+\t(match_operand:TI 1 \"general_operand\"      \"riFo,re,C,xm,x\"))]\n   \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (which_alternative)\n@@ -2106,7 +2106,7 @@\n   [(set (match_operand:SI 0 \"nonimmediate_operand\"\n \t\t\t\"=r,m ,*y,*y,?rm,?*y,*x,*x,?r ,m ,?*Yi,*x\")\n \t(match_operand:SI 1 \"general_operand\"\n-\t\t\t\"g ,re,C ,*y,*y ,rm ,C ,*x,*Yi,*x,r   ,m \"))]\n+\t\t\t\"g ,re,C ,*y,*y ,rm ,C ,*x,*Yi,*x,r   ,m\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -2189,8 +2189,8 @@\n \t   (const_string \"SI\")))])\n \n (define_insn \"*movhi_internal\"\n-  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,r,m\")\n-\t(match_operand:HI 1 \"general_operand\" \"r,rn,rm,rn\"))]\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r ,r ,m\")\n+\t(match_operand:HI 1 \"general_operand\"\t   \"r ,rn,rm,rn\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -2246,7 +2246,7 @@\n ;; partial register stall can be caused there.  Then we use movzx.\n (define_insn \"*movqi_internal\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=q,q ,q ,r,r ,?r,m\")\n-\t(match_operand:QI 1 \"general_operand\"      \" q,qn,qm,q,rn,qm,qn\"))]\n+\t(match_operand:QI 1 \"general_operand\"      \"q ,qn,qm,q,rn,qm,qn\"))]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n {\n   switch (get_attr_type (insn))\n@@ -2747,7 +2747,7 @@\n \n (define_insn \"*movtf_internal_rex64\"\n   [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=x,x ,m,?*r ,!o\")\n-\t(match_operand:TF 1 \"general_operand\"\t   \"C ,xm,x,*roF,*r\"))]\n+\t(match_operand:TF 1 \"general_operand\"\t   \"C ,xm,x,*roF,*rC\"))]\n   \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -2867,7 +2867,7 @@\n \n (define_insn \"*movxf_internal_rex64\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m,f,?Yx*r ,!o\")\n-\t(match_operand:XF 1 \"general_operand\"\t   \"fm,f,G,Yx*roF,Yx*r\"))]\n+\t(match_operand:XF 1 \"general_operand\"\t   \"fm,f,G,Yx*roF,Yx*rC\"))]\n   \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -2901,7 +2901,7 @@\n ;; Possible store forwarding (partial memory) stall in alternative 4.\n (define_insn \"*movxf_internal\"\n   [(set (match_operand:XF 0 \"nonimmediate_operand\" \"=f,m,f,?Yx*r ,!o\")\n-\t(match_operand:XF 1 \"general_operand\"\t   \"fm,f,G,Yx*roF,FYx*r\"))]\n+\t(match_operand:XF 1 \"general_operand\"\t   \"fm,f,G,Yx*roF,Yx*rF\"))]\n   \"!TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -2934,9 +2934,9 @@\n \n (define_insn \"*movdf_internal_rex64\"\n   [(set (match_operand:DF 0 \"nonimmediate_operand\"\n-\t\t\"=Yf*f,m   ,Yf*f,?r ,?m,?r,x,x,x,m,Yi,r \")\n+\t\t\"=Yf*f,m   ,Yf*f,?r,?m,?r,?r,x,x,x,m,Yi,r\")\n \t(match_operand:DF 1 \"general_operand\"\n-\t\t\"Yf*fm,Yf*f,G   ,rmC,rC,F ,C,x,m,x,r ,Yi\"))]\n+\t\t\"Yf*fm,Yf*f,G   ,rm,rC,C ,F ,C,x,m,x,r ,Yi\"))]\n   \"TARGET_64BIT && !(MEM_P (operands[0]) && MEM_P (operands[1]))\n    && (!can_create_pseudo_p ()\n        || (ix86_cmodel == CM_MEDIUM || ix86_cmodel == CM_LARGE)\n@@ -2962,14 +2962,17 @@\n       return \"mov{q}\\t{%1, %0|%0, %1}\";\n \n     case 5:\n-      return \"movabs{q}\\t{%1, %0|%0, %1}\";\n+      return \"mov{l}\\t{%1, %k0|%k0, %1}\";\n \n     case 6:\n-      return standard_sse_constant_opcode (insn, operands[1]);\n+      return \"movabs{q}\\t{%1, %0|%0, %1}\";\n \n     case 7:\n+      return standard_sse_constant_opcode (insn, operands[1]);\n+\n     case 8:\n     case 9:\n+    case 10:\n       switch (get_attr_mode (insn))\n \t{\n \tcase MODE_V2DF:\n@@ -2991,8 +2994,8 @@\n \t  gcc_unreachable ();\n \t}\n \n-    case 10:\n     case 11:\n+    case 12:\n       /* Handle broken assemblers that require movd instead of movq.  */\n       return \"%vmovd\\t{%1, %0|%0, %1}\";\n \n@@ -3003,24 +3006,24 @@\n   [(set (attr \"type\")\n \t(cond [(eq_attr \"alternative\" \"0,1,2\")\n \t\t (const_string \"fmov\")\n-\t       (eq_attr \"alternative\" \"3,4,5\")\n+\t       (eq_attr \"alternative\" \"3,4,5,6\")\n \t\t (const_string \"imov\")\n-\t       (eq_attr \"alternative\" \"6\")\n+\t       (eq_attr \"alternative\" \"7\")\n \t\t (const_string \"sselog1\")\n \t      ]\n \t      (const_string \"ssemov\")))\n    (set (attr \"modrm\")\n      (if_then_else\n-       (and (eq_attr \"alternative\" \"5\") (eq_attr \"type\" \"imov\"))\n+       (and (eq_attr \"alternative\" \"6\") (eq_attr \"type\" \"imov\"))\n \t (const_string \"0\")\n \t (const_string \"*\")))\n    (set (attr \"length_immediate\")\n      (if_then_else\n-       (and (eq_attr \"alternative\" \"5\") (eq_attr \"type\" \"imov\"))\n+       (and (eq_attr \"alternative\" \"6\") (eq_attr \"type\" \"imov\"))\n \t (const_string \"8\")\n \t (const_string \"*\")))\n    (set (attr \"prefix\")\n-     (if_then_else (eq_attr \"alternative\" \"0,1,2,3,4,5\")\n+     (if_then_else (eq_attr \"alternative\" \"0,1,2,3,4,5,6\")\n        (const_string \"orig\")\n        (const_string \"maybe_vex\")))\n    (set (attr \"prefix_data16\")\n@@ -3030,11 +3033,13 @@\n    (set (attr \"mode\")\n         (cond [(eq_attr \"alternative\" \"0,1,2\")\n \t\t (const_string \"DF\")\n-\t       (eq_attr \"alternative\" \"3,4,5,10,11\")\n+\t       (eq_attr \"alternative\" \"3,4,6,11,12\")\n \t\t (const_string \"DI\")\n+\t       (eq_attr \"alternative\" \"5\")\n+\t\t (const_string \"SI\")\n \n \t       /* xorps is one byte shorter for !TARGET_AVX.  */\n-\t       (eq_attr \"alternative\" \"6\")\n+\t       (eq_attr \"alternative\" \"7\")\n \t\t (cond [(match_test \"TARGET_AVX\")\n \t\t\t  (const_string \"V2DF\")\n \t\t\t(match_test \"optimize_function_for_size_p (cfun)\")\n@@ -3049,7 +3054,7 @@\n \t\t  chains, otherwise use short move to avoid extra work.\n \n \t\t  movaps encodes one byte shorter for !TARGET_AVX.  */\n-\t       (eq_attr \"alternative\" \"7\")\n+\t       (eq_attr \"alternative\" \"8\")\n \t\t (cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n \t\t\t  (const_string \"V4SF\")\n \t\t\t(match_test \"TARGET_SSE_PARTIAL_REG_DEPENDENCY\")\n@@ -3063,7 +3068,7 @@\n \t       /* For architectures resolving dependencies on register\n \t\t  parts we may avoid extra work to zero out upper part\n \t\t  of register.  */\n-\t       (eq_attr \"alternative\" \"8\")\n+\t       (eq_attr \"alternative\" \"9\")\n \t\t (if_then_else\n \t\t   (match_test \"TARGET_SSE_SPLIT_REGS\")\n \t\t   (const_string \"V1DF\")"}]}