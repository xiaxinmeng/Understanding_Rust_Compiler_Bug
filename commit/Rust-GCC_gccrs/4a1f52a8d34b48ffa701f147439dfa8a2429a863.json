{"sha": "4a1f52a8d34b48ffa701f147439dfa8a2429a863", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGExZjUyYThkMzRiNDhmZmE3MDFmMTQ3NDM5ZGZhOGEyNDI5YTg2Mw==", "commit": {"author": {"name": "Herman A.J. ten Brugge", "email": "Haj.Ten.Brugge@net.HCC.nl", "date": "2001-01-23T19:31:08Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2001-01-23T19:31:08Z"}, "message": "* c4x.c (c4x_r11_set_p): Calculate rtx code correctly.\n\nFrom-SVN: r39207", "tree": {"sha": "1b45d6b4de7689c20a50eed5fbe70acb4c39b94e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b45d6b4de7689c20a50eed5fbe70acb4c39b94e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a1f52a8d34b48ffa701f147439dfa8a2429a863", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a1f52a8d34b48ffa701f147439dfa8a2429a863", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a1f52a8d34b48ffa701f147439dfa8a2429a863", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a1f52a8d34b48ffa701f147439dfa8a2429a863/comments", "author": null, "committer": null, "parents": [{"sha": "c933c209ddf06f94796eeba7d6df75a001bd87fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c933c209ddf06f94796eeba7d6df75a001bd87fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c933c209ddf06f94796eeba7d6df75a001bd87fc"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "4812071c105509e02e76b51c45749752ed0e96b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a1f52a8d34b48ffa701f147439dfa8a2429a863/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a1f52a8d34b48ffa701f147439dfa8a2429a863/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a1f52a8d34b48ffa701f147439dfa8a2429a863", "patch": "@@ -1,3 +1,7 @@\n+2001-01-24  Herman A.J. ten Brugge <Haj.Ten.Brugge@net.HCC.nl>\n+\n+\t* c4x.c (c4x_r11_set_p): Calculate rtx code correctly.\n+\n 2001-01-23  Chris Demetriou  <cgd@sibyte.com>\n \t    Neil Booth  <neil@daikokuya.demon.co.uk>\n "}, {"sha": "36c0bb612496ba8578e0fcc39a8194bda3470790", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a1f52a8d34b48ffa701f147439dfa8a2429a863/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a1f52a8d34b48ffa701f147439dfa8a2429a863/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=4a1f52a8d34b48ffa701f147439dfa8a2429a863", "patch": "@@ -3363,17 +3363,15 @@ src_operand (op, mode)\n       || GET_CODE (op) == CONST)\n     return 0;\n \n-  /* If TARGET_EXPOSE_LDP is zero, allow direct memory access to\n-     symbolic addresses.  These will be rejected by\n-     GO_IF_LEGITIMATE_ADDRESS and fixed up by\n-     LEGITIMIZE_RELOAD_ADDRESS.  If TARGET_EXPOSE_LDP is nonzero,\n-     disallow direct memory access to symbolic addresses.  These\n-     should be converted to a HIGH/LO_SUM pair by the movqi expander.  */\n+  /* If TARGET_LOAD_DIRECT_MEMS is non-zero, disallow direct memory\n+     access to symbolic addresses.  These operands will get forced\n+     into a register and the movqi expander will generate a\n+     HIGH/LO_SUM pair if TARGET_EXPOSE_LDP is non-zero.  */\n   if (GET_CODE (op) == MEM\n       && ((GET_CODE (XEXP (op, 0)) == SYMBOL_REF\n \t   || GET_CODE (XEXP (op, 0)) == LABEL_REF\n \t   || GET_CODE (XEXP (op, 0)) == CONST)))\n-    return ! TARGET_EXPOSE_LDP && GET_MODE (op) == mode;\n+    return ! TARGET_LOAD_DIRECT_MEMS && GET_MODE (op) == mode;\n \n   return general_operand (op, mode);\n }\n@@ -4797,26 +4795,24 @@ static int\n c4x_r11_set_p(x)\n     rtx x;\n {\n-  RTX_CODE code;\n   rtx set;\n   int i, j;\n   const char *fmt;\n \n   if (x == 0)\n     return 0;\n \n-  code = GET_CODE (x);\n-  if (code == INSN && GET_CODE (PATTERN (x)) == SEQUENCE)\n+  if (INSN_P (x) && GET_CODE (PATTERN (x)) == SEQUENCE)\n     x = XVECEXP (PATTERN (x), 0, XVECLEN (PATTERN (x), 0) - 1);\n \n-  if (code == INSN && (set = single_set (x)))\n-    return c4x_r11_set_p (SET_DEST (set));\n+  if (INSN_P (x) && (set = single_set (x)))\n+    x = SET_DEST (set);\n \n-  if (code == REG && REGNO (x) == R11_REGNO)\n+  if (GET_CODE (x) == REG && REGNO (x) == R11_REGNO)\n     return 1;\n \n   fmt = GET_RTX_FORMAT (GET_CODE (x));\n-  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n+  for (i = GET_RTX_LENGTH (GET_CODE (x)) - 1; i >= 0; i--)\n     {\n       if (fmt[i] == 'e')\n \t{"}]}