{"sha": "5c3eacbbdb118b63ee65b1774a9d1b003afed908", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMzZWFjYmJkYjExOGI2M2VlNjViMTc3NGE5ZDFiMDAzYWZlZDkwOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-05-28T07:26:35Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-05-28T07:26:35Z"}, "message": "invoke.texi (SPARC Options): Document -mfix-ut699.\n\n\t* doc/invoke.texi (SPARC Options): Document -mfix-ut699.\n\t* builtins.c (expand_builtin_mathfn) <BUILT_IN_SQRT>: Try to widen the\n\tmode if the instruction isn't available in the original mode.\n\t* config/sparc/sparc.opt (mfix-ut699): New option.\n\t* config/sparc/sparc.md (muldf3_extend): Disable if -mfix-ut699.\n\t(divdf3): Turn into expander.\n\t(divdf3_nofix): New insn.\n\t(divdf3_fix): Likewise.\n\t(divsf3): Disable if -mfix-ut699.\n\t(sqrtdf2): Turn into expander.\n\t(sqrtdf2_nofix): New insn.\n\t(sqrtdf2_fix): Likewise.\n\t(sqrtsf2): Disable if -mfix-ut699.\n\nFrom-SVN: r199366", "tree": {"sha": "0690ee378a242808ef4348577f657b3c0e03b1f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0690ee378a242808ef4348577f657b3c0e03b1f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c3eacbbdb118b63ee65b1774a9d1b003afed908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c3eacbbdb118b63ee65b1774a9d1b003afed908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c3eacbbdb118b63ee65b1774a9d1b003afed908", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c3eacbbdb118b63ee65b1774a9d1b003afed908/comments", "author": null, "committer": null, "parents": [{"sha": "eb9b2285911d52a5db151c816b93883b79119a6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb9b2285911d52a5db151c816b93883b79119a6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb9b2285911d52a5db151c816b93883b79119a6f"}], "stats": {"total": 77, "additions": 69, "deletions": 8}, "files": [{"sha": "40ebbf3f83c5e6c4408b78f23b7ac3c23477e90d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3eacbbdb118b63ee65b1774a9d1b003afed908/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3eacbbdb118b63ee65b1774a9d1b003afed908/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c3eacbbdb118b63ee65b1774a9d1b003afed908", "patch": "@@ -1,3 +1,19 @@\n+2013-05-28  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* doc/invoke.texi (SPARC Options): Document -mfix-ut699.\n+\t* builtins.c (expand_builtin_mathfn) <BUILT_IN_SQRT>: Try to widen the\n+\tmode if the instruction isn't available in the original mode.\n+\t* config/sparc/sparc.opt (mfix-ut699): New option.\n+\t* config/sparc/sparc.md (muldf3_extend): Disable if -mfix-ut699.\n+\t(divdf3): Turn into expander.\n+\t(divdf3_nofix): New insn.\n+\t(divdf3_fix): Likewise.\n+\t(divsf3): Disable if -mfix-ut699.\n+\t(sqrtdf2): Turn into expander.\n+\t(sqrtdf2_nofix): New insn.\n+\t(sqrtdf2_fix): Likewise.\n+\t(sqrtsf2): Disable if -mfix-ut699.\n+\n 2013-05-27  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/57412"}, {"sha": "402bb1fb14762e1b50d6fa84abff8673845f0d74", "filename": "gcc/builtins.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3eacbbdb118b63ee65b1774a9d1b003afed908/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3eacbbdb118b63ee65b1774a9d1b003afed908/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=5c3eacbbdb118b63ee65b1774a9d1b003afed908", "patch": "@@ -1961,6 +1961,7 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n   tree fndecl = get_callee_fndecl (exp);\n   enum machine_mode mode;\n   bool errno_set = false;\n+  bool try_widening = false;\n   tree arg;\n \n   if (!validate_arglist (exp, REAL_TYPE, VOID_TYPE))\n@@ -1972,6 +1973,7 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n     {\n     CASE_FLT_FN (BUILT_IN_SQRT):\n       errno_set = ! tree_expr_nonnegative_p (arg);\n+      try_widening = true;\n       builtin_optab = sqrt_optab;\n       break;\n     CASE_FLT_FN (BUILT_IN_EXP):\n@@ -2028,8 +2030,10 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n   if (! flag_errno_math || ! HONOR_NANS (mode))\n     errno_set = false;\n \n-  /* Before working hard, check whether the instruction is available.  */\n-  if (optab_handler (builtin_optab, mode) != CODE_FOR_nothing\n+  /* Before working hard, check whether the instruction is available, but try\n+     to widen the mode for specific operations.  */\n+  if ((optab_handler (builtin_optab, mode) != CODE_FOR_nothing\n+       || (try_widening && !excess_precision_type (TREE_TYPE (exp))))\n       && (!errno_set || !optimize_insn_for_size_p ()))\n     {\n       rtx result = gen_reg_rtx (mode);"}, {"sha": "f710cc7b6b2edb33bd31f5dc5ad4357aee6ba4fe", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3eacbbdb118b63ee65b1774a9d1b003afed908/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3eacbbdb118b63ee65b1774a9d1b003afed908/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=5c3eacbbdb118b63ee65b1774a9d1b003afed908", "patch": "@@ -5499,7 +5499,7 @@\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n \t(mult:DF (float_extend:DF (match_operand:SF 1 \"register_operand\" \"f\"))\n \t\t (float_extend:DF (match_operand:SF 2 \"register_operand\" \"f\"))))]\n-  \"(TARGET_V8 || TARGET_V9) && TARGET_FPU\"\n+  \"(TARGET_V8 || TARGET_V9) && TARGET_FPU && !sparc_fix_ut699\"\n   \"fsmuld\\t%1, %2, %0\"\n   [(set_attr \"type\" \"fpmul\")\n    (set_attr \"fptype\" \"double\")])\n@@ -5528,20 +5528,37 @@\n   \"fdivq\\t%1, %2, %0\"\n   [(set_attr \"type\" \"fpdivd\")])\n \n-(define_insn \"divdf3\"\n+(define_expand \"divdf3\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n \t(div:DF (match_operand:DF 1 \"register_operand\" \"e\")\n \t\t(match_operand:DF 2 \"register_operand\" \"e\")))]\n   \"TARGET_FPU\"\n+  \"\")\n+\n+(define_insn \"*divdf3_nofix\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n+\t(div:DF (match_operand:DF 1 \"register_operand\" \"e\")\n+\t\t(match_operand:DF 2 \"register_operand\" \"e\")))]\n+  \"TARGET_FPU && !sparc_fix_ut699\"\n   \"fdivd\\t%1, %2, %0\"\n   [(set_attr \"type\" \"fpdivd\")\n    (set_attr \"fptype\" \"double\")])\n \n+(define_insn \"*divdf3_fix\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n+\t(div:DF (match_operand:DF 1 \"register_operand\" \"e\")\n+\t\t(match_operand:DF 2 \"register_operand\" \"e\")))]\n+  \"TARGET_FPU && sparc_fix_ut699\"\n+  \"fdivd\\t%1, %2, %0\\n\\tstd\\t%0, [%%sp-8]\"\n+  [(set_attr \"type\" \"fpdivd\")\n+   (set_attr \"fptype\" \"double\")\n+   (set_attr \"length\" \"2\")])\n+\n (define_insn \"divsf3\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(div:SF (match_operand:SF 1 \"register_operand\" \"f\")\n \t\t(match_operand:SF 2 \"register_operand\" \"f\")))]\n-  \"TARGET_FPU\"\n+  \"TARGET_FPU && !sparc_fix_ut699\"\n   \"fdivs\\t%1, %2, %0\"\n   [(set_attr \"type\" \"fpdivs\")])\n \n@@ -5742,18 +5759,33 @@\n   \"fsqrtq\\t%1, %0\"\n   [(set_attr \"type\" \"fpsqrtd\")])\n \n-(define_insn \"sqrtdf2\"\n+(define_expand \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n \t(sqrt:DF (match_operand:DF 1 \"register_operand\" \"e\")))]\n   \"TARGET_FPU\"\n+  \"\")\n+\n+(define_insn \"*sqrtdf2_nofix\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n+\t(sqrt:DF (match_operand:DF 1 \"register_operand\" \"e\")))]\n+  \"TARGET_FPU && !sparc_fix_ut699\"\n   \"fsqrtd\\t%1, %0\"\n   [(set_attr \"type\" \"fpsqrtd\")\n    (set_attr \"fptype\" \"double\")])\n \n+(define_insn \"*sqrtdf2_fix\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=e\")\n+\t(sqrt:DF (match_operand:DF 1 \"register_operand\" \"e\")))]\n+  \"TARGET_FPU && sparc_fix_ut699\"\n+  \"fsqrtd\\t%1, %0\\n\\tstd\\t%0, [%%sp-8]\"\n+  [(set_attr \"type\" \"fpsqrtd\")\n+   (set_attr \"fptype\" \"double\")\n+   (set_attr \"length\" \"2\")])\n+\n (define_insn \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n \t(sqrt:SF (match_operand:SF 1 \"register_operand\" \"f\")))]\n-  \"TARGET_FPU\"\n+  \"TARGET_FPU && !sparc_fix_ut699\"\n   \"fsqrts\\t%1, %0\"\n   [(set_attr \"type\" \"fpsqrts\")])\n "}, {"sha": "3b50c6c21f9d1e111194649a3fb6415a84f228a1", "filename": "gcc/config/sparc/sparc.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3eacbbdb118b63ee65b1774a9d1b003afed908/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3eacbbdb118b63ee65b1774a9d1b003afed908/gcc%2Fconfig%2Fsparc%2Fsparc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.opt?ref=5c3eacbbdb118b63ee65b1774a9d1b003afed908", "patch": "@@ -201,6 +201,10 @@ Target Report RejectNegative Var(sparc_fix_at697f)\n Enable workaround for single erratum of AT697F processor\n (corresponding to erratum #13 of AT697E processor)\n \n+mfix-ut699\n+Target Report RejectNegative Var(sparc_fix_ut699)\n+Enable workarounds for the FP errata of the UT699 processor\n+\n Mask(LONG_DOUBLE_128)\n ;; Use 128-bit long double\n "}, {"sha": "b0fff0db4def02ada9f2a98b9dd1d16c5843e8c6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c3eacbbdb118b63ee65b1774a9d1b003afed908/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c3eacbbdb118b63ee65b1774a9d1b003afed908/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5c3eacbbdb118b63ee65b1774a9d1b003afed908", "patch": "@@ -936,7 +936,7 @@ See RS/6000 and PowerPC Options.\n -mvis2  -mno-vis2  -mvis3  -mno-vis3 @gol\n -mcbcond -mno-cbcond @gol\n -mfmaf  -mno-fmaf  -mpopc  -mno-popc @gol\n--mfix-at697f}\n+-mfix-at697f -mfix-ut699}\n \n @emph{SPU Options}\n @gccoptlist{-mwarn-reloc -merror-reloc @gol\n@@ -19449,6 +19449,11 @@ later.\n @opindex mfix-at697f\n Enable the documented workaround for the single erratum of the Atmel AT697F\n processor (which corresponds to erratum #13 of the AT697E processor).\n+\n+@item -mfix-ut699\n+@opindex mfix-ut699\n+Enable the documented workarounds for the floating-point errata of the UT699\n+processor.\n @end table\n \n These @samp{-m} options are supported in addition to the above"}]}