{"sha": "b6eb7548cf927d541477146a195e2bdd25900012", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZlYjc1NDhjZjkyN2Q1NDE0NzcxNDZhMTk1ZTJiZGQyNTkwMDAxMg==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-11-14T11:42:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-11-14T11:42:05Z"}, "message": "[Ada] Use of Suppress_Initialization with pragma Thread_Local_Storage\n\nThis patch allows for aspect/pragma Suppress_Initialization to be an\nacceptable form of missing initialization with respect to the semantics\nof pragma Thread_Local_Storage.\n\n------------\n-- Source --\n------------\n\n--  gnat.adc\n\npragma Initialize_Scalars;\n\n--  pack.ads\n\nwith System;\n\npackage Pack is\n   Addr : System.Address\n      with Thread_Local_Storage, Suppress_Initialization;\nend Pack;\n\n-----------------\n-- Compilation --\n-----------------\n\n$ gcc -c pack.ads\n\n2018-11-14  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* freeze.adb (Check_Pragma_Thread_Local_Storage): New routine. A\n\tvariable with suppressed initialization has no initialization\n\tfor purposes of the pragma.\n\t(Freeze_Object_Declaration): Remove variable\n\tHas_Default_Initialization as it is no longer used. Use routine\n\tCheck_Pragma_Thread_Local_Storage to verify the semantics of\n\tpragma Thread_Local_Storage.\n\nFrom-SVN: r266129", "tree": {"sha": "6cde88a9fef0bb3fc1d1642579f857289fc5d019", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cde88a9fef0bb3fc1d1642579f857289fc5d019"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6eb7548cf927d541477146a195e2bdd25900012", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6eb7548cf927d541477146a195e2bdd25900012", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6eb7548cf927d541477146a195e2bdd25900012", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6eb7548cf927d541477146a195e2bdd25900012/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1fc75ecf626b05733544bf9f67fb59fcd7322395", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fc75ecf626b05733544bf9f67fb59fcd7322395", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fc75ecf626b05733544bf9f67fb59fcd7322395"}], "stats": {"total": 106, "additions": 73, "deletions": 33}, "files": [{"sha": "900d23a50d3ed92a091a57f34ca57aff4b6098cc", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6eb7548cf927d541477146a195e2bdd25900012/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6eb7548cf927d541477146a195e2bdd25900012/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b6eb7548cf927d541477146a195e2bdd25900012", "patch": "@@ -1,3 +1,13 @@\n+2018-11-14  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* freeze.adb (Check_Pragma_Thread_Local_Storage): New routine. A\n+\tvariable with suppressed initialization has no initialization\n+\tfor purposes of the pragma.\n+\t(Freeze_Object_Declaration): Remove variable\n+\tHas_Default_Initialization as it is no longer used. Use routine\n+\tCheck_Pragma_Thread_Local_Storage to verify the semantics of\n+\tpragma Thread_Local_Storage.\n+\n 2018-11-14  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_res.adb (Resolve_If_Expression): Verify that the subtypes"}, {"sha": "afb347969ca072fac6cd885501cb02181408ebeb", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 63, "deletions": 33, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6eb7548cf927d541477146a195e2bdd25900012/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6eb7548cf927d541477146a195e2bdd25900012/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=b6eb7548cf927d541477146a195e2bdd25900012", "patch": "@@ -2178,9 +2178,6 @@ package body Freeze is\n       Formal : Entity_Id;\n       Indx   : Node_Id;\n \n-      Has_Default_Initialization : Boolean := False;\n-      --  This flag gets set to true for a variable with default initialization\n-\n       Result : List_Id := No_List;\n       --  List of freezing actions, left at No_List if none\n \n@@ -3213,6 +3210,10 @@ package body Freeze is\n          --  wrap-around arithmetic might yield a meaningless value for the\n          --  length of the array, or its corresponding attribute.\n \n+         procedure Check_Pragma_Thread_Local_Storage (Var_Id : Entity_Id);\n+         --  Ensure that the initialization state of variable Var_Id subject to\n+         --  pragma Thread_Local_Storage satisfies the semantics of the pragma.\n+\n          -------------------------------\n          -- Check_Large_Modular_Array --\n          -------------------------------\n@@ -3292,6 +3293,58 @@ package body Freeze is\n             end if;\n          end Check_Large_Modular_Array;\n \n+         ---------------------------------------\n+         -- Check_Pragma_Thread_Local_Storage --\n+         ---------------------------------------\n+\n+         procedure Check_Pragma_Thread_Local_Storage (Var_Id : Entity_Id) is\n+            Decl : constant Node_Id := Declaration_Node (Var_Id);\n+            Expr : constant Node_Id := Expression (Decl);\n+\n+         begin\n+            --  A variable whose initialization is suppressed lacks default\n+            --  initialization.\n+\n+            if Suppress_Initialization (Var_Id) then\n+               null;\n+\n+            --  The variable has some form of initialization. Check whether it\n+            --  is compatible with the semantics of the pragma.\n+\n+            elsif Has_Init_Expression (Decl)\n+              and then Present (Expr)\n+              and then\n+\n+               --  The variable is initialized with \"null\"\n+\n+                (Nkind (Expr) = N_Null\n+                   or else\n+\n+               --  The variable is initialized with a static constant\n+\n+                 Is_OK_Static_Expression (Expr)\n+                   or else\n+\n+               --  The variable is initialized with a static aggregate\n+\n+                (Nkind (Expr) = N_Aggregate\n+                   and then Compile_Time_Known_Aggregate (Expr)))\n+            then\n+               null;\n+\n+            --  Otherwise the initialization of the variable violates the\n+            --  semantics of pragma Thread_Local_Storage.\n+\n+            else\n+               Error_Msg_NE\n+                 (\"Thread_Local_Storage variable& is improperly initialized\",\n+                  Decl, Var_Id);\n+               Error_Msg_NE\n+                 (\"\\only allowed initialization is explicit NULL, static \"\n+                  & \"expression or static aggregate\", Decl, Var_Id);\n+            end if;\n+         end Check_Pragma_Thread_Local_Storage;\n+\n          --  Local variables\n \n          Typ : constant Entity_Id := Etype (E);\n@@ -3420,42 +3473,19 @@ package body Freeze is\n                 (Needs_Simple_Initialization (Typ)\n                   and then not Is_Internal (E)))\n          then\n-            Has_Default_Initialization := True;\n             Check_Restriction\n               (No_Default_Initialization, Declaration_Node (E));\n          end if;\n \n-         --  Check that a Thread_Local_Storage variable does not have default\n-         --  initialization, and any explicit initialization must either be the\n-         --  null constant or a static constant.\n+         --  Ensure that a variable subject to pragma Thread_Local_Storage\n+         --\n+         --    * Lacks default initialization, or\n+         --\n+         --    * The initialization expression is either \"null\", a static\n+         --      constant, or a compile-time known aggregate.\n \n          if Has_Pragma_Thread_Local_Storage (E) then\n-            declare\n-               Decl : constant Node_Id := Declaration_Node (E);\n-            begin\n-               if Has_Default_Initialization\n-                 or else\n-                   (Has_Init_Expression (Decl)\n-                     and then\n-                      (No (Expression (Decl))\n-                        or else not\n-                          (Is_OK_Static_Expression (Expression (Decl))\n-                            or else Nkind (Expression (Decl)) = N_Null)))\n-               then\n-                  if Nkind (Expression (Decl)) = N_Aggregate\n-                    and then Compile_Time_Known_Aggregate (Expression (Decl))\n-                  then\n-                     null;\n-                  else\n-                     Error_Msg_NE\n-                       (\"Thread_Local_Storage variable& is improperly \"\n-                        & \"initialized\", Decl, E);\n-                     Error_Msg_NE\n-                       (\"\\only allowed initialization is explicit NULL, \"\n-                        & \"static expression or static aggregate\", Decl, E);\n-                  end if;\n-               end if;\n-            end;\n+            Check_Pragma_Thread_Local_Storage (E);\n          end if;\n \n          --  For imported objects, set Is_Public unless there is also an"}]}