{"sha": "7b14411a870638fb16f4a6052fcd64917ed1505d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IxNDQxMWE4NzA2MzhmYjE2ZjRhNjA1MmZjZDY0OTE3ZWQxNTA1ZA==", "commit": {"author": {"name": "Kazuhiro Inaoka", "email": "inaoka.kazuhiro@renesas.com", "date": "2004-06-15T10:01:34Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2004-06-15T10:01:34Z"}, "message": "m32r.h (RETURN_ADDR_RTX): Define.\n\n* config/m32r/m32r.h (RETURN_ADDR_RTX): Define.\n  (INCOMING_RETURN_ADDR_RTX): Define.\n* config/m32r/m32r-protos.h (m32r_return_addr): Added.\n* config/m32r/m32r.c (m32r_exppand_prologue): Changed for\n  __builtin_return_address(0).\n  (m32r_return_addr): Added for __builtin_return_address(0).\n  (m32r_reload_lr): Ditto.\n\nFrom-SVN: r83171", "tree": {"sha": "15d1fcdf998e2bd2b9a09d8af553a93971eb8703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15d1fcdf998e2bd2b9a09d8af553a93971eb8703"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b14411a870638fb16f4a6052fcd64917ed1505d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b14411a870638fb16f4a6052fcd64917ed1505d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b14411a870638fb16f4a6052fcd64917ed1505d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b14411a870638fb16f4a6052fcd64917ed1505d/comments", "author": null, "committer": null, "parents": [{"sha": "cf11c05cfd66a3dedc23dd4874e05380f118760d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf11c05cfd66a3dedc23dd4874e05380f118760d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf11c05cfd66a3dedc23dd4874e05380f118760d"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "e6038259986830db2a3e178e774d5f69365ff505", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14411a870638fb16f4a6052fcd64917ed1505d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14411a870638fb16f4a6052fcd64917ed1505d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7b14411a870638fb16f4a6052fcd64917ed1505d", "patch": "@@ -1,3 +1,13 @@\n+2004-06-15  Kazuhiro Inaoka  <inaoka.kazuhiro@renesas.com>\n+\n+\t* config/m32r/m32r.h (RETURN_ADDR_RTX): Define.\n+\t(INCOMING_RETURN_ADDR_RTX): Define.\n+\t* config/m32r/m32r-protos.h (m32r_return_addr): Added.\n+\t* config/m32r/m32r.c (m32r_exppand_prologue): Changed for\n+\t__builtin_return_address(0).\n+\t(m32r_return_addr): Added for __builtin_return_address(0).\n+\t(m32r_reload_lr): Ditto.\n+\n 2004-06-15  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* doc/install.texi (Prerequisites): Update libbanshee,\n@@ -5910,7 +5920,7 @@\n \t* config/arm/t-xscale-elf: Disable iwmmxt multilibs until they can\n \tbe safely built.\n \n-2004-04-16  Kazuhiro Inaoka <inaoka dot kazuhiro at renesas dot com>\n+2004-04-16  Kazuhiro Inaoka <inaoka.kazuhiro@renesas.com>\n \n \t* config/m32r/m32r.h (BIG_ENDIAN_BIT): Deleted to fix endian\n \tbug."}, {"sha": "4bc4c6c8ca71878d7531ba58dd413f26115a133c", "filename": "gcc/config/m32r/m32r-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14411a870638fb16f4a6052fcd64917ed1505d/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14411a870638fb16f4a6052fcd64917ed1505d/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h?ref=7b14411a870638fb16f4a6052fcd64917ed1505d", "patch": "@@ -58,6 +58,7 @@ extern int    m32r_not_same_reg (rtx, rtx);\n extern int    m32r_hard_regno_rename_ok (unsigned int, unsigned int);\n extern int    m32r_legitimate_pic_operand_p (rtx);\n extern rtx    m32r_legitimize_pic_address (rtx, rtx);\n+extern rtx    m32r_return_addr (int);\n \n #ifdef HAVE_MACHINE_MODES\n extern int    call_address_operand (rtx, Mmode);"}, {"sha": "6599dc64bbe267255bacc35e7e6cf5ecd88b7729", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14411a870638fb16f4a6052fcd64917ed1505d/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14411a870638fb16f4a6052fcd64917ed1505d/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=7b14411a870638fb16f4a6052fcd64917ed1505d", "patch": "@@ -1905,6 +1905,29 @@ m32r_compute_frame_size (int size)\t/* # of var. bytes allocated.  */\n /* The table we use to reference PIC data.  */\n static rtx global_offset_table;\n                                                                                 \n+static void\n+m32r_reload_lr (rtx sp, int size)\n+{\n+  rtx lr = gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM);\n+\n+  if (size == 0)\n+    emit_insn (gen_movsi (lr, gen_rtx_MEM (Pmode, sp)));\n+  else if (size <= 32768)\n+    emit_insn (gen_movsi (lr, gen_rtx_MEM (Pmode,\n+\t\t\t\t\t   gen_rtx_PLUS (Pmode, sp,\n+\t\t\t\t\t\t\t GEN_INT (size)))));\n+  else\n+    {   \n+      rtx tmp = gen_rtx_REG (Pmode, PROLOGUE_TMP_REGNUM);\n+\n+      emit_insn (gen_movsi (tmp, GEN_INT (size)));\n+      emit_insn (gen_addsi3 (tmp, tmp, sp));\n+      emit_insn (gen_movsi (lr, gen_rtx_MEM (Pmode, tmp)));\n+    }\n+\n+  emit_insn (gen_rtx_USE (VOIDmode, lr));\n+}\n+\n void\n m32r_load_pic_register (void)\n {\n@@ -1993,7 +2016,11 @@ m32r_expand_prologue (void)\n                                gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM)));\n                                                                                 \n   if (pic_reg_used)\n-    m32r_load_pic_register ();\n+    {\n+      m32r_load_pic_register ();\n+      m32r_reload_lr (stack_pointer_rtx,\n+                      (current_function_profile ? 0 : frame_size));\n+    }\n \n   if (current_function_profile && !pic_reg_used)\n     emit_insn (gen_blockage ());\n@@ -3052,3 +3079,12 @@ m32r_hard_regno_rename_ok (unsigned int old_reg ATTRIBUTE_UNUSED,\n \n   return 1;\n }\n+\n+rtx\n+m32r_return_addr (int count)\n+{\n+  if (count != 0)\n+    return const0_rtx;\n+  \n+  return get_hard_reg_initial_val (Pmode, RETURN_ADDR_REGNUM);\n+}"}, {"sha": "c20b0424bb0178999cda52ddaa48103997fabe8e", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b14411a870638fb16f4a6052fcd64917ed1505d/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b14411a870638fb16f4a6052fcd64917ed1505d/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=7b14411a870638fb16f4a6052fcd64917ed1505d", "patch": "@@ -1265,6 +1265,10 @@ L2:     .word STATIC\n /* Generate calls to memcpy, memcmp and memset.  */\n #define TARGET_MEM_FUNCTIONS\n \f\n+#define RETURN_ADDR_RTX(COUNT, FRAME) m32r_return_addr (COUNT)\n+\n+#define INCOMING_RETURN_ADDR_RTX   gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM)\n+\n /* Addressing modes, and classification of registers for them.  */\n \n /* Maximum number of registers that can appear in a valid memory address.  */"}]}