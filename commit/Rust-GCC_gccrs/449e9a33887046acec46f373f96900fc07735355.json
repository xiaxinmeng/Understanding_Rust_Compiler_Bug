{"sha": "449e9a33887046acec46f373f96900fc07735355", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ5ZTlhMzM4ODcwNDZhY2VjNDZmMzczZjk2OTAwZmMwNzczNTM1NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-10-22T20:42:06Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-10-22T20:42:06Z"}, "message": "Rename inchash::hash::add_wide_int\n\nThe name inchash::add_wide_int is a bit misleading, since it sounds\nlike it's hashing a wide_int.  This patch renames it to add_hwi instead.\n\n2017-10-22  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* inchash.h (inchash::hash::add_wide_int): Rename to...\n\t(inchash::hash::add_hwi): ...this.\n\t* ipa-devirt.c (hash_odr_vtable): Update accordingly.\n\t(polymorphic_call_target_hasher::hash): Likewise.\n\t* ipa-icf.c (sem_function::get_hash, sem_function::init): Likewise.\n\t(sem_item::add_expr, sem_item::add_type, sem_variable::get_hash)\n\t(sem_item_optimizer::update_hash_by_addr_refs): Likewise.\n\t* lto-streamer-out.c (hash_tree): Likewise.\n\t* optc-save-gen.awk: Likewise.\n\t* tree.c (add_expr): Likewise.\n\nFrom-SVN: r253987", "tree": {"sha": "083e08720c9922f43d59871a20fcc92f1efea89b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/083e08720c9922f43d59871a20fcc92f1efea89b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/449e9a33887046acec46f373f96900fc07735355", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/449e9a33887046acec46f373f96900fc07735355", "html_url": "https://github.com/Rust-GCC/gccrs/commit/449e9a33887046acec46f373f96900fc07735355", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/449e9a33887046acec46f373f96900fc07735355/comments", "author": null, "committer": null, "parents": [{"sha": "ef1e3836710e20fb399a72bda0bde0ba7a616078", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef1e3836710e20fb399a72bda0bde0ba7a616078", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef1e3836710e20fb399a72bda0bde0ba7a616078"}], "stats": {"total": 77, "additions": 45, "deletions": 32}, "files": [{"sha": "2e7eda147157c29d787963c9aa94f8470d0284b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/449e9a33887046acec46f373f96900fc07735355/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/449e9a33887046acec46f373f96900fc07735355/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=449e9a33887046acec46f373f96900fc07735355", "patch": "@@ -1,3 +1,16 @@\n+2017-10-22  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* inchash.h (inchash::hash::add_wide_int): Rename to...\n+\t(inchash::hash::add_hwi): ...this.\n+\t* ipa-devirt.c (hash_odr_vtable): Update accordingly.\n+\t(polymorphic_call_target_hasher::hash): Likewise.\n+\t* ipa-icf.c (sem_function::get_hash, sem_function::init): Likewise.\n+\t(sem_item::add_expr, sem_item::add_type, sem_variable::get_hash)\n+\t(sem_item_optimizer::update_hash_by_addr_refs): Likewise.\n+\t* lto-streamer-out.c (hash_tree): Likewise.\n+\t* optc-save-gen.awk: Likewise.\n+\t* tree.c (add_expr): Likewise.\n+\n 2017-10-22  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR target/52451"}, {"sha": "29e9e6d0513edb245584e4a747666e56e3cd047a", "filename": "gcc/inchash.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/449e9a33887046acec46f373f96900fc07735355/gcc%2Finchash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/449e9a33887046acec46f373f96900fc07735355/gcc%2Finchash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finchash.h?ref=449e9a33887046acec46f373f96900fc07735355", "patch": "@@ -58,7 +58,7 @@ class hash\n   }\n \n   /* Add HOST_WIDE_INT value V.  */\n-  void add_wide_int (HOST_WIDE_INT v)\n+  void add_hwi (HOST_WIDE_INT v)\n   {\n     val = iterative_hash_host_wide_int (v, val);\n   }"}, {"sha": "f03c7f099f73d078bcd668e2a7928f3b12f72711", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/449e9a33887046acec46f373f96900fc07735355/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/449e9a33887046acec46f373f96900fc07735355/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=449e9a33887046acec46f373f96900fc07735355", "patch": "@@ -373,7 +373,7 @@ hash_odr_vtable (const_tree t)\n       v = TREE_OPERAND (TREE_OPERAND (v, 0), 0);\n     }\n \n-  hstate.add_wide_int (IDENTIFIER_HASH_VALUE (DECL_ASSEMBLER_NAME (v)));\n+  hstate.add_hwi (IDENTIFIER_HASH_VALUE (DECL_ASSEMBLER_NAME (v)));\n   return hstate.end ();\n }\n \n@@ -2625,14 +2625,14 @@ polymorphic_call_target_hasher::hash (const polymorphic_call_target_d *odr_query\n {\n   inchash::hash hstate (odr_query->otr_token);\n \n-  hstate.add_wide_int (odr_query->type->id);\n+  hstate.add_hwi (odr_query->type->id);\n   hstate.merge_hash (TYPE_UID (odr_query->context.outer_type));\n-  hstate.add_wide_int (odr_query->context.offset);\n+  hstate.add_hwi (odr_query->context.offset);\n \n   if (odr_query->context.speculative_outer_type)\n     {\n       hstate.merge_hash (TYPE_UID (odr_query->context.speculative_outer_type));\n-      hstate.add_wide_int (odr_query->context.speculative_offset);\n+      hstate.add_hwi (odr_query->context.speculative_offset);\n     }\n   hstate.add_flag (odr_query->speculative);\n   hstate.add_flag (odr_query->context.maybe_in_construction);"}, {"sha": "3f6f432483b374404f62c7ce660a489ee7d1719e", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/449e9a33887046acec46f373f96900fc07735355/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/449e9a33887046acec46f373f96900fc07735355/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=449e9a33887046acec46f373f96900fc07735355", "patch": "@@ -286,11 +286,11 @@ sem_function::get_hash (void)\n \n       /* Add common features of declaration itself.  */\n       if (DECL_FUNCTION_SPECIFIC_TARGET (decl))\n-        hstate.add_wide_int\n+        hstate.add_hwi\n \t (cl_target_option_hash\n \t   (TREE_TARGET_OPTION (DECL_FUNCTION_SPECIFIC_TARGET (decl))));\n       if (DECL_FUNCTION_SPECIFIC_OPTIMIZATION (decl))\n-\thstate.add_wide_int\n+\thstate.add_hwi\n \t (cl_optimization_hash\n \t   (TREE_OPTIMIZATION (DECL_FUNCTION_SPECIFIC_OPTIMIZATION (decl))));\n       hstate.add_flag (DECL_CXX_CONSTRUCTOR_P (decl));\n@@ -1438,8 +1438,8 @@ sem_function::init (void)\n     {\n       cfg_checksum = 0;\n       inchash::hash hstate;\n-      hstate.add_wide_int (cnode->thunk.fixed_offset);\n-      hstate.add_wide_int (cnode->thunk.virtual_value);\n+      hstate.add_hwi (cnode->thunk.fixed_offset);\n+      hstate.add_hwi (cnode->thunk.virtual_value);\n       hstate.add_flag (cnode->thunk.this_adjusting);\n       hstate.add_flag (cnode->thunk.virtual_offset_p);\n       hstate.add_flag (cnode->thunk.add_pointer_bounds_args);\n@@ -1486,7 +1486,7 @@ sem_item::add_expr (const_tree exp, inchash::hash &hstate)\n \tunsigned HOST_WIDE_INT idx;\n \ttree value;\n \n-\thstate.add_wide_int (int_size_in_bytes (TREE_TYPE (exp)));\n+\thstate.add_hwi (int_size_in_bytes (TREE_TYPE (exp)));\n \n \tFOR_EACH_CONSTRUCTOR_VALUE (CONSTRUCTOR_ELTS (exp), idx, value)\n \t  if (value)\n@@ -1501,7 +1501,7 @@ sem_item::add_expr (const_tree exp, inchash::hash &hstate)\n     case VAR_DECL:\n     case CONST_DECL:\n     case PARM_DECL:\n-      hstate.add_wide_int (int_size_in_bytes (TREE_TYPE (exp)));\n+      hstate.add_hwi (int_size_in_bytes (TREE_TYPE (exp)));\n       break;\n     case MEM_REF:\n     case POINTER_PLUS_EXPR:\n@@ -1519,7 +1519,7 @@ sem_item::add_expr (const_tree exp, inchash::hash &hstate)\n       }\n       break;\n     CASE_CONVERT:\n-      hstate.add_wide_int (int_size_in_bytes (TREE_TYPE (exp)));\n+      hstate.add_hwi (int_size_in_bytes (TREE_TYPE (exp)));\n       return add_expr (TREE_OPERAND (exp, 0), hstate);\n     default:\n       break;\n@@ -1590,11 +1590,11 @@ sem_item::add_type (const_tree type, inchash::hash &hstate)\n \n \t  hstate2.add_int (nf);\n \t  hash = hstate2.end ();\n-\t  hstate.add_wide_int (hash);\n+\t  hstate.add_hwi (hash);\n \t  optimizer->m_type_hash_cache.put (type, hash);\n \t}\n       else\n-        hstate.add_wide_int (*val);\n+        hstate.add_hwi (*val);\n     }\n }\n \n@@ -2114,7 +2114,7 @@ sem_variable::get_hash (void)\n \n   hstate.add_int (456346417);\n   if (DECL_SIZE (decl) && tree_fits_shwi_p (DECL_SIZE (decl)))\n-    hstate.add_wide_int (tree_to_shwi (DECL_SIZE (decl)));\n+    hstate.add_hwi (tree_to_shwi (DECL_SIZE (decl)));\n   add_expr (ctor, hstate);\n   set_hash (hstate.end ());\n \n@@ -2726,7 +2726,7 @@ sem_item_optimizer::update_hash_by_addr_refs ()\n \n \t\tif (TYPE_NAME (class_type)\n \t\t     && DECL_ASSEMBLER_NAME_SET_P (TYPE_NAME (class_type)))\n-\t\t  hstate.add_wide_int\n+\t\t  hstate.add_hwi\n \t\t    (IDENTIFIER_HASH_VALUE\n \t\t       (DECL_ASSEMBLER_NAME (TYPE_NAME (class_type))));\n "}, {"sha": "f9f76775d0648e72c1692433b87128d828a9d71c", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/449e9a33887046acec46f373f96900fc07735355/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/449e9a33887046acec46f373f96900fc07735355/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=449e9a33887046acec46f373f96900fc07735355", "patch": "@@ -1030,10 +1030,10 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n   if (CODE_CONTAINS_STRUCT (code, TS_INT_CST))\n     {\n       int i;\n-      hstate.add_wide_int (TREE_INT_CST_NUNITS (t));\n-      hstate.add_wide_int (TREE_INT_CST_EXT_NUNITS (t));\n+      hstate.add_hwi (TREE_INT_CST_NUNITS (t));\n+      hstate.add_hwi (TREE_INT_CST_EXT_NUNITS (t));\n       for (i = 0; i < TREE_INT_CST_NUNITS (t); i++)\n-\thstate.add_wide_int (TREE_INT_CST_ELT (t, i));\n+\thstate.add_hwi (TREE_INT_CST_ELT (t, i));\n     }\n \n   if (CODE_CONTAINS_STRUCT (code, TS_REAL_CST))\n@@ -1058,7 +1058,7 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n \n   if (CODE_CONTAINS_STRUCT (code, TS_DECL_COMMON))\n     {\n-      hstate.add_wide_int (DECL_MODE (t));\n+      hstate.add_hwi (DECL_MODE (t));\n       hstate.add_flag (DECL_NONLOCAL (t));\n       hstate.add_flag (DECL_VIRTUAL_P (t));\n       hstate.add_flag (DECL_IGNORED_P (t));\n@@ -1151,7 +1151,7 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n \n   if (CODE_CONTAINS_STRUCT (code, TS_TYPE_COMMON))\n     {\n-      hstate.add_wide_int (TYPE_MODE (t));\n+      hstate.add_hwi (TYPE_MODE (t));\n       hstate.add_flag (TYPE_STRING_FLAG (t));\n       /* TYPE_NO_FORCE_BLK is private to stor-layout and need\n  \t no streaming.  */\n@@ -1181,10 +1181,10 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n   if (CODE_CONTAINS_STRUCT (code, TS_TARGET_OPTION)\n       /* We don't stream these when passing things to a different target.  */\n       && !lto_stream_offload_p)\n-    hstate.add_wide_int (cl_target_option_hash (TREE_TARGET_OPTION (t)));\n+    hstate.add_hwi (cl_target_option_hash (TREE_TARGET_OPTION (t)));\n \n   if (CODE_CONTAINS_STRUCT (code, TS_OPTIMIZATION))\n-    hstate.add_wide_int (cl_optimization_hash (TREE_OPTIMIZATION (t)));\n+    hstate.add_hwi (cl_optimization_hash (TREE_OPTIMIZATION (t)));\n \n   if (CODE_CONTAINS_STRUCT (code, TS_IDENTIFIER))\n     hstate.merge_hash (IDENTIFIER_HASH_VALUE (t));\n@@ -1312,7 +1312,7 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n \n   if (CODE_CONTAINS_STRUCT (code, TS_EXP))\n     {\n-      hstate.add_wide_int (TREE_OPERAND_LENGTH (t));\n+      hstate.add_hwi (TREE_OPERAND_LENGTH (t));\n       for (int i = 0; i < TREE_OPERAND_LENGTH (t); ++i)\n \tvisit (TREE_OPERAND (t, i));\n     }\n@@ -1336,7 +1336,7 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n     {\n       unsigned i;\n       tree index, value;\n-      hstate.add_wide_int (CONSTRUCTOR_NELTS (t));\n+      hstate.add_hwi (CONSTRUCTOR_NELTS (t));\n       FOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (t), i, index, value)\n \t{\n \t  visit (index);\n@@ -1349,7 +1349,7 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n       int i;\n       HOST_WIDE_INT val;\n \n-      hstate.add_wide_int (OMP_CLAUSE_CODE (t));\n+      hstate.add_hwi (OMP_CLAUSE_CODE (t));\n       switch (OMP_CLAUSE_CODE (t))\n \t{\n \tcase OMP_CLAUSE_DEFAULT:\n@@ -1374,7 +1374,7 @@ hash_tree (struct streamer_tree_cache_d *cache, hash_map<tree, hashval_t> *map,\n \t  val = 0;\n \t  break;\n \t}\n-      hstate.add_wide_int (val);\n+      hstate.add_hwi (val);\n       for (i = 0; i < omp_clause_num_ops[OMP_CLAUSE_CODE (t)]; i++)\n \tvisit (OMP_CLAUSE_OPERAND (t, i));\n       visit (OMP_CLAUSE_CHAIN (t));"}, {"sha": "7e734356ca7e3afd60d7ad782a3575c9e96383ce", "filename": "gcc/optc-save-gen.awk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/449e9a33887046acec46f373f96900fc07735355/gcc%2Foptc-save-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/449e9a33887046acec46f373f96900fc07735355/gcc%2Foptc-save-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-save-gen.awk?ref=449e9a33887046acec46f373f96900fc07735355", "patch": "@@ -678,7 +678,7 @@ for (i = 0; i < n_target_array; i++) {\n }\n for (i = 0; i < n_target_val; i++) {\n \tname = var_target_val[i]\n-\tprint \"  hstate.add_wide_int (ptr->\" name\");\";\n+\tprint \"  hstate.add_hwi (ptr->\" name\");\";\n }\n print \"  return hstate.end ();\";\n print \"}\";\n@@ -766,7 +766,7 @@ for (i = 0; i < n_opt_val; i++) {\n \tif (!var_opt_hash[i])\n \t\tcontinue;\n \tname = var_opt_val[i]\n-\tprint \"  hstate.add_wide_int (ptr->\" name\");\";\n+\tprint \"  hstate.add_hwi (ptr->\" name\");\";\n }\n print \"  return hstate.end ();\";\n print \"}\";"}, {"sha": "fa6fcb1da71fd425bcfe528b7132c26495b5b7fe", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/449e9a33887046acec46f373f96900fc07735355/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/449e9a33887046acec46f373f96900fc07735355/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=449e9a33887046acec46f373f96900fc07735355", "patch": "@@ -7073,7 +7073,7 @@ add_expr (const_tree t, inchash::hash &hstate, unsigned int flags)\n     case INTEGER_CST:\n       gcc_checking_assert (!(flags & OEP_ADDRESS_OF));\n       for (i = 0; i < TREE_INT_CST_EXT_NUNITS (t); i++)\n-\thstate.add_wide_int (TREE_INT_CST_ELT (t, i));\n+\thstate.add_hwi (TREE_INT_CST_ELT (t, i));\n       return;\n     case REAL_CST:\n       {\n@@ -7108,7 +7108,7 @@ add_expr (const_tree t, inchash::hash &hstate, unsigned int flags)\n       }\n     case SSA_NAME:\n       /* We can just compare by pointer.  */\n-      hstate.add_wide_int (SSA_NAME_VERSION (t));\n+      hstate.add_hwi (SSA_NAME_VERSION (t));\n       return;\n     case PLACEHOLDER_EXPR:\n       /* The node itself doesn't matter.  */\n@@ -7166,7 +7166,7 @@ add_expr (const_tree t, inchash::hash &hstate, unsigned int flags)\n       if (tclass == tcc_declaration)\n \t{\n \t  /* DECL's have a unique ID */\n-\t  hstate.add_wide_int (DECL_UID (t));\n+\t  hstate.add_hwi (DECL_UID (t));\n \t}\n       else if (tclass == tcc_comparison && !commutative_tree_code (code))\n \t{"}]}