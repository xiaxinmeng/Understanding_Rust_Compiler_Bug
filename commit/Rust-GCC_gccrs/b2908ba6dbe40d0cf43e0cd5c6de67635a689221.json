{"sha": "b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI5MDhiYTZkYmU0MGQwY2Y0M2UwY2Q1YzZkZTY3NjM1YTY4OTIyMQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-26T20:39:42Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-26T20:39:42Z"}, "message": "Remove DF_REF_INSN scaffolding\n\ngcc/\n2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n\n\t* df.h (df_dump_insn_problem_function): Strengthen first param of\n\tthis callback from const_rtx to const rtx_insn *.\n\t(struct df_insn_info): Strengthen field \"insn\" from rtx to\n\trtx_insn *.\n\t(DF_REF_INSN): Eliminate this function, reinstating the older\n\tmacro definition.\n\t(df_find_def): Strengthen param 1 from rtx to rtx_insn *.\n\t(df_reg_defined): Likewise.\n\t(df_find_use): Likewise.\n\t(df_reg_used): Likewise.\n\t(df_dump_insn_top): Strengthen param 1 from const_rtx to\n\tconst rtx_insn *.\n\t(df_dump_insn_bottom): Likewise.\n\t(df_insn_debug): Strengthen param 1 from rtx to rtx_insn *.\n\t(df_insn_debug_regno): Likewise.\n\t(debug_df_insn): Likewise.\n\t(df_rd_simulate_one_insn): Likewise for param 2.\n\t(df_word_lr_simulate_defs): Likewise for param 1.\n\t(df_word_lr_simulate_uses): Likewise.\n\t(df_md_simulate_one_insn): Likewise for param 2.\n\t(df_simulate_find_noclobber_defs): Likewise for param 1.\n\t(df_simulate_find_defs): Likewise.\n\t(df_simulate_defs): Likewise.\n\t(df_simulate_uses): Likewise.\n\t(df_simulate_one_insn_backwards): Likewise for param 2.\n\t(df_simulate_one_insn_forwards): Likewise.\n\t(df_uses_create): Likewise for param 2.\n\t(df_insn_create_insn_record): Likewise for param 1.\n\t(df_insn_delete): Likewise.\n\t(df_insn_rescan): Likewise.\n\t(df_insn_rescan_debug_internal): Likewise.\n\t(df_insn_change_bb): Likewise.\n\t(df_notes_rescan): Likewise.\n\t* rtl.h (remove_death): Likewise for param 2.\n\t(print_rtl_with_bb): Strengthen param 2 from const_rtx to\n\tconst rtx_insn *.\n\t* sched-int.h (reemit_notes): Strengthen param from rtx to\n\trtx_insn *.\n\t* valtrack.h (propagate_for_debug): Likewise for param 1.\n\n\t* cfgrtl.c (print_rtl_with_bb): Strengthen param \"rtx_first\" and\n\tlocal \"tmp_rtx\" from const_rtx to const rtx_insn *.\n\t* combine.c (remove_death): Strengthen param \"insn\" from rtx to\n\trtx_insn *.\n\t(move_deaths): Likewise for local \"where_dead\".\n\t* cse.c (delete_trivially_dead_insns): Introduce local\n\t\"bind_var_loc\" so that \"bind\" can be strengthened to an rtx_insn *.\n\t* df-core.c (df_find_def): Strengthen param \"insn\" from rtx to\n\trtx_insn *.\n\t(df_reg_defined): Likewise.\n\t(df_find_use): Likewise.\n\t(df_reg_used): Likewise.\n\t(df_dump_insn_problem_data): Strengthen param \"insn\" from\n\tconst_rtx to const rtx_insn *.\n\t(df_dump_insn_top): Likewise.\n\t(df_dump_insn_bottom): Likewise.\n\t(df_insn_debug): Strengthen param \"insn\" from rtx to rtx_insn *.\n\t(df_insn_debug_regno): Likewise.\n\t(debug_df_insn): Likewise.\n\t(DF_REF_INSN): Delete.\n\t* df-problems.c (df_rd_simulate_one_insn): Strengthen param \"insn\"\n\tfrom rtx to rtx_insn *.\n\t(df_chain_insn_top_dump): Strengthen param \"insn\" from\n\tconst_rtx to const rtx_insn *.\n\t(df_chain_insn_bottom_dump): Likewise.\n\t(df_word_lr_simulate_defs): Strengthen param \"insn\" from rtx to\n\trtx_insn *.\n\t(df_word_lr_simulate_uses): Likewise.\n\t(df_print_note): Likewise.\n\t(df_remove_dead_and_unused_notes): Likewise.\n\t(df_set_unused_notes_for_mw): Likewise.\n\t(df_set_dead_notes_for_mw): Likewise.\n\t(df_create_unused_note): Likewise.\n\t(df_simulate_find_defs): Likewise.\n\t(df_simulate_find_uses): Likewise.\n\t(df_simulate_find_noclobber_defs): Likewise.\n\t(df_simulate_defs): Likewise.\n\t(df_simulate_uses): Likewise.\n\t(df_simulate_one_insn_backwards): Likewise.\n\t(df_simulate_one_insn_forwards): Likewise.\n\t(df_md_simulate_one_insn): Likewise.\n\t* df-scan.c (df_uses_create): Likewise.\n\t(df_insn_create_insn_record): Likewise.\n\t(df_insn_delete): Likewise.\n\t(df_insn_rescan): Likewise.\n\t(df_insn_rescan_debug_internal): Likewise.\n\t(df_insn_change_bb): Likewise.\n\t(df_notes_rescan): Likewise.\n\t(df_refs_add_to_chains): Likewise.\n\t(df_insn_refs_verify): Likewise.\n\t* emit-rtl.c (set_insn_deleted): Add checked cast to rtx_insn *\n\twhen invoking df_insn_delete.\n\t(reorder_insns): Strengthen local \"x\" from rtx to rtx_insn *.\n\t(set_unique_reg_note): Add checked cast.\n\t* final.c (cleanup_subreg_operands): Likewise.\n\t* gcse.c (update_ld_motion_stores): Likewise, strengthening local\n\t\"insn\" from rtx to rtx_insn *.\n\t* haifa-sched.c (reemit_notes): Strengthen param \"insn\" and local\n\t\"last\" from rtx to rtx_insn *.\n\t* ira-emit.c (change_regs_in_insn): New function.\n\t(change_loop): Strengthen local \"insn\" from rtx to rtx_insn *.\n\tInvoke change_regs_in_insn rather than change_regs.\n\t* ira.c (update_equiv_regs): Strengthen locals \"insn\",\n\t\"init_insn\", \"new_insn\" from rtx to rtx_insn *.  Invoke\n\tfor_each_rtx_in_insn rather than for_each_rtx.\n\t* recog.c (confirm_change_group): Add checked casts.\n\t(peep2_update_life): Strengthen local \"x\" from rtx to rtx_insn *.\n\tAdd checked cast.\n\t(peep2_fill_buffer): Add checked cast.\n\t* rtlanal.c (remove_note): Likewise.\n\t* valtrack.c (propagate_for_debug): Strengthen param \"insn\" and\n\tlocals \"next\" \"end\" from rtx to rtx_insn *.\n\n/\n2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n\n\t* rtx-classes-status.txt (TODO): DF_REF_INSN is done.\n\nFrom-SVN: r214548", "tree": {"sha": "f1f8f5ea645933071854d5a1f896591b6d6c283b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1f8f5ea645933071854d5a1f896591b6d6c283b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f57aa6b04a190fdbacbe34d73b5414f44129c518", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f57aa6b04a190fdbacbe34d73b5414f44129c518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f57aa6b04a190fdbacbe34d73b5414f44129c518"}], "stats": {"total": 353, "additions": 241, "deletions": 112}, "files": [{"sha": "207b50f3be8a3e240acb6b0e74471abfb268a890", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -1,3 +1,7 @@\n+2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* rtx-classes-status.txt (TODO): DF_REF_INSN is done.\n+\n 2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n \n \t* rtx-classes-status.txt (TODO): SET_BB_HEAD, SET_BB_END,"}, {"sha": "ccbe5fc25f7176aa5cae0cdb6b9e8ef0d0626c7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -1,3 +1,118 @@\n+2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* df.h (df_dump_insn_problem_function): Strengthen first param of\n+\tthis callback from const_rtx to const rtx_insn *.\n+\t(struct df_insn_info): Strengthen field \"insn\" from rtx to\n+\trtx_insn *.\n+\t(DF_REF_INSN): Eliminate this function, reinstating the older\n+\tmacro definition.\n+\t(df_find_def): Strengthen param 1 from rtx to rtx_insn *.\n+\t(df_reg_defined): Likewise.\n+\t(df_find_use): Likewise.\n+\t(df_reg_used): Likewise.\n+\t(df_dump_insn_top): Strengthen param 1 from const_rtx to\n+\tconst rtx_insn *.\n+\t(df_dump_insn_bottom): Likewise.\n+\t(df_insn_debug): Strengthen param 1 from rtx to rtx_insn *.\n+\t(df_insn_debug_regno): Likewise.\n+\t(debug_df_insn): Likewise.\n+\t(df_rd_simulate_one_insn): Likewise for param 2.\n+\t(df_word_lr_simulate_defs): Likewise for param 1.\n+\t(df_word_lr_simulate_uses): Likewise.\n+\t(df_md_simulate_one_insn): Likewise for param 2.\n+\t(df_simulate_find_noclobber_defs): Likewise for param 1.\n+\t(df_simulate_find_defs): Likewise.\n+\t(df_simulate_defs): Likewise.\n+\t(df_simulate_uses): Likewise.\n+\t(df_simulate_one_insn_backwards): Likewise for param 2.\n+\t(df_simulate_one_insn_forwards): Likewise.\n+\t(df_uses_create): Likewise for param 2.\n+\t(df_insn_create_insn_record): Likewise for param 1.\n+\t(df_insn_delete): Likewise.\n+\t(df_insn_rescan): Likewise.\n+\t(df_insn_rescan_debug_internal): Likewise.\n+\t(df_insn_change_bb): Likewise.\n+\t(df_notes_rescan): Likewise.\n+\t* rtl.h (remove_death): Likewise for param 2.\n+\t(print_rtl_with_bb): Strengthen param 2 from const_rtx to\n+\tconst rtx_insn *.\n+\t* sched-int.h (reemit_notes): Strengthen param from rtx to\n+\trtx_insn *.\n+\t* valtrack.h (propagate_for_debug): Likewise for param 1.\n+\n+\t* cfgrtl.c (print_rtl_with_bb): Strengthen param \"rtx_first\" and\n+\tlocal \"tmp_rtx\" from const_rtx to const rtx_insn *.\n+\t* combine.c (remove_death): Strengthen param \"insn\" from rtx to\n+\trtx_insn *.\n+\t(move_deaths): Likewise for local \"where_dead\".\n+\t* cse.c (delete_trivially_dead_insns): Introduce local\n+\t\"bind_var_loc\" so that \"bind\" can be strengthened to an rtx_insn *.\n+\t* df-core.c (df_find_def): Strengthen param \"insn\" from rtx to\n+\trtx_insn *.\n+\t(df_reg_defined): Likewise.\n+\t(df_find_use): Likewise.\n+\t(df_reg_used): Likewise.\n+\t(df_dump_insn_problem_data): Strengthen param \"insn\" from\n+\tconst_rtx to const rtx_insn *.\n+\t(df_dump_insn_top): Likewise.\n+\t(df_dump_insn_bottom): Likewise.\n+\t(df_insn_debug): Strengthen param \"insn\" from rtx to rtx_insn *.\n+\t(df_insn_debug_regno): Likewise.\n+\t(debug_df_insn): Likewise.\n+\t(DF_REF_INSN): Delete.\n+\t* df-problems.c (df_rd_simulate_one_insn): Strengthen param \"insn\"\n+\tfrom rtx to rtx_insn *.\n+\t(df_chain_insn_top_dump): Strengthen param \"insn\" from\n+\tconst_rtx to const rtx_insn *.\n+\t(df_chain_insn_bottom_dump): Likewise.\n+\t(df_word_lr_simulate_defs): Strengthen param \"insn\" from rtx to\n+\trtx_insn *.\n+\t(df_word_lr_simulate_uses): Likewise.\n+\t(df_print_note): Likewise.\n+\t(df_remove_dead_and_unused_notes): Likewise.\n+\t(df_set_unused_notes_for_mw): Likewise.\n+\t(df_set_dead_notes_for_mw): Likewise.\n+\t(df_create_unused_note): Likewise.\n+\t(df_simulate_find_defs): Likewise.\n+\t(df_simulate_find_uses): Likewise.\n+\t(df_simulate_find_noclobber_defs): Likewise.\n+\t(df_simulate_defs): Likewise.\n+\t(df_simulate_uses): Likewise.\n+\t(df_simulate_one_insn_backwards): Likewise.\n+\t(df_simulate_one_insn_forwards): Likewise.\n+\t(df_md_simulate_one_insn): Likewise.\n+\t* df-scan.c (df_uses_create): Likewise.\n+\t(df_insn_create_insn_record): Likewise.\n+\t(df_insn_delete): Likewise.\n+\t(df_insn_rescan): Likewise.\n+\t(df_insn_rescan_debug_internal): Likewise.\n+\t(df_insn_change_bb): Likewise.\n+\t(df_notes_rescan): Likewise.\n+\t(df_refs_add_to_chains): Likewise.\n+\t(df_insn_refs_verify): Likewise.\n+\t* emit-rtl.c (set_insn_deleted): Add checked cast to rtx_insn *\n+\twhen invoking df_insn_delete.\n+\t(reorder_insns): Strengthen local \"x\" from rtx to rtx_insn *.\n+\t(set_unique_reg_note): Add checked cast.\n+\t* final.c (cleanup_subreg_operands): Likewise.\n+\t* gcse.c (update_ld_motion_stores): Likewise, strengthening local\n+\t\"insn\" from rtx to rtx_insn *.\n+\t* haifa-sched.c (reemit_notes): Strengthen param \"insn\" and local\n+\t\"last\" from rtx to rtx_insn *.\n+\t* ira-emit.c (change_regs_in_insn): New function.\n+\t(change_loop): Strengthen local \"insn\" from rtx to rtx_insn *.\n+\tInvoke change_regs_in_insn rather than change_regs.\n+\t* ira.c (update_equiv_regs): Strengthen locals \"insn\",\n+\t\"init_insn\", \"new_insn\" from rtx to rtx_insn *.  Invoke\n+\tfor_each_rtx_in_insn rather than for_each_rtx.\n+\t* recog.c (confirm_change_group): Add checked casts.\n+\t(peep2_update_life): Strengthen local \"x\" from rtx to rtx_insn *.\n+\tAdd checked cast.\n+\t(peep2_fill_buffer): Add checked cast.\n+\t* rtlanal.c (remove_note): Likewise.\n+\t* valtrack.c (propagate_for_debug): Strengthen param \"insn\" and\n+\tlocals \"next\" \"end\" from rtx to rtx_insn *.\n+\n 2014-08-26  David Malcolm  <dmalcolm@redhat.com>\n \n \t* sched-int.h (sched_init_insn_luid): Strengthen param 1 from rtx"}, {"sha": "0bc2399a953f820163c93313eaaf7c2db1fe3d8b", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -2128,9 +2128,9 @@ rtl_dump_bb (FILE *outf, basic_block bb, int indent, int flags)\n    in dumpfile.h.  */\n \n void\n-print_rtl_with_bb (FILE *outf, const_rtx rtx_first, int flags)\n+print_rtl_with_bb (FILE *outf, const rtx_insn *rtx_first, int flags)\n {\n-  const_rtx tmp_rtx;\n+  const rtx_insn *tmp_rtx;\n   if (rtx_first == 0)\n     fprintf (outf, \"(nil)\\n\");\n   else"}, {"sha": "546762b028382099ca010f293bf090f1c9b88683", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -12997,7 +12997,7 @@ mark_used_regs_combine (rtx x)\n    Return the note used to record the death, if there was one.  */\n \n rtx\n-remove_death (unsigned int regno, rtx insn)\n+remove_death (unsigned int regno, rtx_insn *insn)\n {\n   rtx note = find_regno_note (insn, REG_DEAD, regno);\n \n@@ -13028,7 +13028,7 @@ move_deaths (rtx x, rtx maybe_kill_insn, int from_luid, rtx_insn *to_insn,\n   if (code == REG)\n     {\n       unsigned int regno = REGNO (x);\n-      rtx where_dead = reg_stat[regno].last_death;\n+      rtx_insn *where_dead = reg_stat[regno].last_death;\n \n       /* Don't move the register if it gets killed in between from and to.  */\n       if (maybe_kill_insn && reg_set_p (x, maybe_kill_insn)"}, {"sha": "32efc47a37648816091bada024b7754aac58174a", "filename": "gcc/cse.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -7025,20 +7025,22 @@ delete_trivially_dead_insns (rtx_insn *insns, int nreg)\n \t\t  && !side_effects_p (SET_SRC (set))\n \t\t  && asm_noperands (PATTERN (insn)) < 0)\n \t\t{\n-\t\t  rtx dval, bind;\n+\t\t  rtx dval, bind_var_loc;\n+\t\t  rtx_insn *bind;\n \n \t\t  /* Create DEBUG_EXPR (and DEBUG_EXPR_DECL).  */\n \t\t  dval = make_debug_expr_from_rtl (SET_DEST (set));\n \n \t\t  /* Emit a debug bind insn before the insn in which\n \t\t     reg dies.  */\n-\t\t  bind = gen_rtx_VAR_LOCATION (GET_MODE (SET_DEST (set)),\n-\t\t\t\t\t       DEBUG_EXPR_TREE_DECL (dval),\n-\t\t\t\t\t       SET_SRC (set),\n-\t\t\t\t\t       VAR_INIT_STATUS_INITIALIZED);\n-\t\t  count_reg_usage (bind, counts + nreg, NULL_RTX, 1);\n-\n-\t\t  bind = emit_debug_insn_before (bind, insn);\n+\t\t  bind_var_loc =\n+\t\t    gen_rtx_VAR_LOCATION (GET_MODE (SET_DEST (set)),\n+\t\t\t\t\t  DEBUG_EXPR_TREE_DECL (dval),\n+\t\t\t\t\t  SET_SRC (set),\n+\t\t\t\t\t  VAR_INIT_STATUS_INITIALIZED);\n+\t\t  count_reg_usage (bind_var_loc, counts + nreg, NULL_RTX, 1);\n+\n+\t\t  bind = emit_debug_insn_before (bind_var_loc, insn);\n \t\t  df_insn_rescan (bind);\n \n \t\t  if (replacements == NULL)"}, {"sha": "4b7d660d90df29fd4d8c8b3cf17e2d7288adf3f3", "filename": "gcc/df-core.c", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -1984,7 +1984,7 @@ df_bb_regno_last_def_find (basic_block bb, unsigned int regno)\n    DF is the dataflow object.  */\n \n df_ref\n-df_find_def (rtx insn, rtx reg)\n+df_find_def (rtx_insn *insn, rtx reg)\n {\n   df_ref def;\n \n@@ -2003,7 +2003,7 @@ df_find_def (rtx insn, rtx reg)\n /* Return true if REG is defined in INSN, zero otherwise.  */\n \n bool\n-df_reg_defined (rtx insn, rtx reg)\n+df_reg_defined (rtx_insn *insn, rtx reg)\n {\n   return df_find_def (insn, reg) != NULL;\n }\n@@ -2013,7 +2013,7 @@ df_reg_defined (rtx insn, rtx reg)\n    DF is the dataflow object.  */\n \n df_ref\n-df_find_use (rtx insn, rtx reg)\n+df_find_use (rtx_insn *insn, rtx reg)\n {\n   df_ref use;\n \n@@ -2036,7 +2036,7 @@ df_find_use (rtx insn, rtx reg)\n /* Return true if REG is referenced in INSN, zero otherwise.  */\n \n bool\n-df_reg_used (rtx insn, rtx reg)\n+df_reg_used (rtx_insn *insn, rtx reg)\n {\n   return df_find_use (insn, reg) != NULL;\n }\n@@ -2262,7 +2262,7 @@ df_dump_bottom (basic_block bb, FILE *file)\n \n /* Dump information about INSN just before or after dumping INSN itself.  */\n static void\n-df_dump_insn_problem_data (const_rtx insn, FILE *file, bool top)\n+df_dump_insn_problem_data (const rtx_insn *insn, FILE *file, bool top)\n {\n   int i;\n \n@@ -2290,15 +2290,15 @@ df_dump_insn_problem_data (const_rtx insn, FILE *file, bool top)\n /* Dump information about INSN before dumping INSN itself.  */\n \n void\n-df_dump_insn_top (const_rtx insn, FILE *file)\n+df_dump_insn_top (const rtx_insn *insn, FILE *file)\n {\n   df_dump_insn_problem_data (insn,  file, /*top=*/true);\n }\n \n /* Dump information about INSN after dumping INSN itself.  */\n \n void\n-df_dump_insn_bottom (const_rtx insn, FILE *file)\n+df_dump_insn_bottom (const rtx_insn *insn, FILE *file)\n {\n   df_dump_insn_problem_data (insn,  file, /*top=*/false);\n }\n@@ -2389,13 +2389,13 @@ df_insn_uid_debug (unsigned int uid,\n \n \n DEBUG_FUNCTION void\n-df_insn_debug (rtx insn, bool follow_chain, FILE *file)\n+df_insn_debug (rtx_insn *insn, bool follow_chain, FILE *file)\n {\n   df_insn_uid_debug (INSN_UID (insn), follow_chain, file);\n }\n \n DEBUG_FUNCTION void\n-df_insn_debug_regno (rtx insn, FILE *file)\n+df_insn_debug_regno (rtx_insn *insn, FILE *file)\n {\n   struct df_insn_info *insn_info = DF_INSN_INFO_GET (insn);\n \n@@ -2454,7 +2454,7 @@ df_ref_debug (df_ref ref, FILE *file)\n /* Functions for debugging from GDB.  */\n \n DEBUG_FUNCTION void\n-debug_df_insn (rtx insn)\n+debug_df_insn (rtx_insn *insn)\n {\n   df_insn_debug (insn, true, stderr);\n   debug_rtx (insn);\n@@ -2502,9 +2502,3 @@ debug_df_chain (struct df_link *link)\n   df_chain_dump (link, stderr);\n   fputc ('\\n', stderr);\n }\n-\n-rtx_insn *DF_REF_INSN (df_ref ref)\n-{\n-  rtx insn = ref->base.insn_info->insn;\n-  return safe_as_a <rtx_insn *> (insn);\n-}"}, {"sha": "34b4f7e58a395d9c247efb41376882b224d40212", "filename": "gcc/df-problems.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -262,7 +262,7 @@ df_rd_simulate_artificial_defs_at_top (basic_block bb, bitmap local_rd)\n    LOCAL_RD.  */\n \n void\n-df_rd_simulate_one_insn (basic_block bb ATTRIBUTE_UNUSED, rtx insn,\n+df_rd_simulate_one_insn (basic_block bb ATTRIBUTE_UNUSED, rtx_insn *insn,\n \t\t\t bitmap local_rd)\n {\n   df_ref def;\n@@ -2198,7 +2198,7 @@ df_chain_bottom_dump (basic_block bb, FILE *file)\n }\n \n static void\n-df_chain_insn_top_dump (const_rtx insn, FILE *file)\n+df_chain_insn_top_dump (const rtx_insn *insn, FILE *file)\n {\n   if (df_chain_problem_p (DF_UD_CHAIN) && INSN_P (insn))\n     {\n@@ -2229,7 +2229,7 @@ df_chain_insn_top_dump (const_rtx insn, FILE *file)\n }\n \n static void\n-df_chain_insn_bottom_dump (const_rtx insn, FILE *file)\n+df_chain_insn_bottom_dump (const rtx_insn *insn, FILE *file)\n {\n   if (df_chain_problem_p (DF_DU_CHAIN) && INSN_P (insn))\n     {\n@@ -2668,7 +2668,7 @@ df_word_lr_add_problem (void)\n    an insn.  */\n \n bool\n-df_word_lr_simulate_defs (rtx insn, bitmap live)\n+df_word_lr_simulate_defs (rtx_insn *insn, bitmap live)\n {\n   bool changed = false;\n   df_ref def;\n@@ -2685,7 +2685,7 @@ df_word_lr_simulate_defs (rtx insn, bitmap live)\n /* Simulate the effects of the uses of INSN on LIVE.  */\n \n void\n-df_word_lr_simulate_uses (rtx insn, bitmap live)\n+df_word_lr_simulate_uses (rtx_insn *insn, bitmap live)\n {\n   df_ref use;\n \n@@ -2705,7 +2705,7 @@ df_note_alloc (bitmap all_blocks ATTRIBUTE_UNUSED)\n \n /* This is only used if REG_DEAD_DEBUGGING is in effect.  */\n static void\n-df_print_note (const char *prefix, rtx insn, rtx note)\n+df_print_note (const char *prefix, rtx_insn *insn, rtx note)\n {\n   if (dump_file)\n     {\n@@ -2739,7 +2739,7 @@ df_ignore_stack_reg (int regno ATTRIBUTE_UNUSED)\n /* Remove all of the REG_DEAD or REG_UNUSED notes from INSN.  */\n \n static void\n-df_remove_dead_and_unused_notes (rtx insn)\n+df_remove_dead_and_unused_notes (rtx_insn *insn)\n {\n   rtx *pprev = &REG_NOTES (insn);\n   rtx link = *pprev;\n@@ -2895,7 +2895,7 @@ df_whole_mw_reg_unused_p (struct df_mw_hardreg *mws,\n */\n \n static void\n-df_set_unused_notes_for_mw (rtx insn, struct df_mw_hardreg *mws,\n+df_set_unused_notes_for_mw (rtx_insn *insn, struct df_mw_hardreg *mws,\n \t\t\t    bitmap live, bitmap do_not_gen,\n \t\t\t    bitmap artificial_uses,\n \t\t\t    struct dead_debug_local *debug)\n@@ -2968,7 +2968,7 @@ df_whole_mw_reg_dead_p (struct df_mw_hardreg *mws,\n    register.  */\n \n static void\n-df_set_dead_notes_for_mw (rtx insn, struct df_mw_hardreg *mws,\n+df_set_dead_notes_for_mw (rtx_insn *insn, struct df_mw_hardreg *mws,\n \t\t\t  bitmap live, bitmap do_not_gen,\n \t\t\t  bitmap artificial_uses, bool *added_notes_p)\n {\n@@ -3025,7 +3025,7 @@ df_set_dead_notes_for_mw (rtx insn, struct df_mw_hardreg *mws,\n    LIVE.  Do not generate notes for registers in ARTIFICIAL_USES.  */\n \n static void\n-df_create_unused_note (rtx insn, df_ref def,\n+df_create_unused_note (rtx_insn *insn, df_ref def,\n \t\t       bitmap live, bitmap artificial_uses,\n \t\t       struct dead_debug_local *debug)\n {\n@@ -3357,7 +3357,7 @@ df_note_add_problem (void)\n /* Find the set of DEFs for INSN.  */\n \n void\n-df_simulate_find_defs (rtx insn, bitmap defs)\n+df_simulate_find_defs (rtx_insn *insn, bitmap defs)\n {\n   df_ref def;\n \n@@ -3368,7 +3368,7 @@ df_simulate_find_defs (rtx insn, bitmap defs)\n /* Find the set of uses for INSN.  This includes partial defs.  */\n \n static void\n-df_simulate_find_uses (rtx insn, bitmap uses)\n+df_simulate_find_uses (rtx_insn *insn, bitmap uses)\n {\n   df_ref def, use;\n   struct df_insn_info *insn_info = DF_INSN_INFO_GET (insn);\n@@ -3383,7 +3383,7 @@ df_simulate_find_uses (rtx insn, bitmap uses)\n /* Find the set of real DEFs, which are not clobbers, for INSN.  */\n \n void\n-df_simulate_find_noclobber_defs (rtx insn, bitmap defs)\n+df_simulate_find_noclobber_defs (rtx_insn *insn, bitmap defs)\n {\n   df_ref def;\n \n@@ -3396,7 +3396,7 @@ df_simulate_find_noclobber_defs (rtx insn, bitmap defs)\n /* Simulate the effects of the defs of INSN on LIVE.  */\n \n void\n-df_simulate_defs (rtx insn, bitmap live)\n+df_simulate_defs (rtx_insn *insn, bitmap live)\n {\n   df_ref def;\n \n@@ -3415,7 +3415,7 @@ df_simulate_defs (rtx insn, bitmap live)\n /* Simulate the effects of the uses of INSN on LIVE.  */\n \n void\n-df_simulate_uses (rtx insn, bitmap live)\n+df_simulate_uses (rtx_insn *insn, bitmap live)\n {\n   df_ref use;\n \n@@ -3476,7 +3476,7 @@ df_simulate_initialize_backwards (basic_block bb, bitmap live)\n /* Simulate the backwards effects of INSN on the bitmap LIVE.  */\n \n void\n-df_simulate_one_insn_backwards (basic_block bb, rtx insn, bitmap live)\n+df_simulate_one_insn_backwards (basic_block bb, rtx_insn *insn, bitmap live)\n {\n   if (!NONDEBUG_INSN_P (insn))\n     return;\n@@ -3539,7 +3539,7 @@ df_simulate_initialize_forwards (basic_block bb, bitmap live)\n /* Simulate the forwards effects of INSN on the bitmap LIVE.  */\n \n void\n-df_simulate_one_insn_forwards (basic_block bb, rtx insn, bitmap live)\n+df_simulate_one_insn_forwards (basic_block bb, rtx_insn *insn, bitmap live)\n {\n   rtx link;\n   if (! INSN_P (insn))\n@@ -4051,7 +4051,7 @@ df_md_simulate_artificial_defs_at_top (basic_block bb, bitmap local_md)\n    LOCAL_MD.  */\n \n void\n-df_md_simulate_one_insn (basic_block bb ATTRIBUTE_UNUSED, rtx insn,\n+df_md_simulate_one_insn (basic_block bb ATTRIBUTE_UNUSED, rtx_insn *insn,\n \t\t\t bitmap local_md)\n {\n   df_ref def;"}, {"sha": "e2aaf61a3ee1c0da9ff89067a35598dba7989936", "filename": "gcc/df-scan.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -109,9 +109,10 @@ static void df_ref_chain_delete_du_chain (df_ref);\n static void df_ref_chain_delete (df_ref);\n \n static void df_refs_add_to_chains (struct df_collection_rec *,\n-\t\t\t\t   basic_block, rtx, unsigned int);\n+\t\t\t\t   basic_block, rtx_insn *, unsigned int);\n \n-static bool df_insn_refs_verify (struct df_collection_rec *, basic_block, rtx, bool);\n+static bool df_insn_refs_verify (struct df_collection_rec *, basic_block,\n+\t\t\t\t rtx_insn *, bool);\n static void df_entry_block_defs_collect (struct df_collection_rec *, bitmap);\n static void df_exit_block_uses_collect (struct df_collection_rec *, bitmap);\n static void df_install_ref (df_ref, struct df_reg_info *,\n@@ -626,7 +627,7 @@ df_scan_blocks (void)\n    depending on whether LOC is inside PATTERN (INSN) or a note.  */\n \n void\n-df_uses_create (rtx *loc, rtx insn, int ref_flags)\n+df_uses_create (rtx *loc, rtx_insn *insn, int ref_flags)\n {\n   gcc_assert (!(ref_flags & ~DF_REF_IN_NOTE));\n   df_uses_record (NULL, loc, DF_REF_REG_USE,\n@@ -833,7 +834,7 @@ df_reg_chain_unlink (df_ref ref)\n    out.  */\n \n struct df_insn_info *\n-df_insn_create_insn_record (rtx insn)\n+df_insn_create_insn_record (rtx_insn *insn)\n {\n   struct df_scan_problem_data *problem_data\n     = (struct df_scan_problem_data *) df_scan->problem_data;\n@@ -941,7 +942,7 @@ df_insn_info_delete (unsigned int uid)\n    or marked for later in deferred mode.  */\n \n void\n-df_insn_delete (rtx insn)\n+df_insn_delete (rtx_insn *insn)\n {\n   unsigned int uid;\n   basic_block bb;\n@@ -1027,7 +1028,7 @@ df_free_collection_rec (struct df_collection_rec *collection_rec)\n /* Rescan INSN.  Return TRUE if the rescanning produced any changes.  */\n \n bool\n-df_insn_rescan (rtx insn)\n+df_insn_rescan (rtx_insn *insn)\n {\n   unsigned int uid = INSN_UID (insn);\n   struct df_insn_info *insn_info = NULL;\n@@ -1117,7 +1118,7 @@ df_insn_rescan (rtx insn)\n    dirty.  */\n \n bool\n-df_insn_rescan_debug_internal (rtx insn)\n+df_insn_rescan_debug_internal (rtx_insn *insn)\n {\n   unsigned int uid = INSN_UID (insn);\n   struct df_insn_info *insn_info;\n@@ -1763,7 +1764,7 @@ df_maybe_reorganize_def_refs (enum df_ref_order order)\n    instructions from one block to another.  */\n \n void\n-df_insn_change_bb (rtx insn, basic_block new_bb)\n+df_insn_change_bb (rtx_insn *insn, basic_block new_bb)\n {\n   basic_block old_bb = BLOCK_FOR_INSN (insn);\n   struct df_insn_info *insn_info;\n@@ -1944,7 +1945,7 @@ df_mw_hardreg_chain_delete_eq_uses (struct df_insn_info *insn_info)\n /* Rescan only the REG_EQUIV/REG_EQUAL notes part of INSN.  */\n \n void\n-df_notes_rescan (rtx insn)\n+df_notes_rescan (rtx_insn *insn)\n {\n   struct df_insn_info *insn_info;\n   unsigned int uid = INSN_UID (insn);\n@@ -2434,7 +2435,7 @@ df_install_mws (const vec<df_mw_hardreg_ptr, va_heap> *old_vec)\n \n static void\n df_refs_add_to_chains (struct df_collection_rec *collection_rec,\n-\t\t       basic_block bb, rtx insn, unsigned int flags)\n+\t\t       basic_block bb, rtx_insn *insn, unsigned int flags)\n {\n   if (insn)\n     {\n@@ -4135,7 +4136,7 @@ df_mws_verify (const vec<df_mw_hardreg_ptr, va_heap> *new_rec,\n static bool\n df_insn_refs_verify (struct df_collection_rec *collection_rec,\n \t\t     basic_block bb,\n-                     rtx insn,\n+                     rtx_insn *insn,\n \t\t     bool abort_if_fail)\n {\n   bool ret1, ret2, ret3, ret4;"}, {"sha": "0975dda1f0f08a752cf5a3b597ae1b719cb9a3cd", "filename": "gcc/df.h", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -239,7 +239,7 @@ typedef void (*df_dump_problem_function) (FILE *);\n typedef void (*df_dump_bb_problem_function) (basic_block, FILE *);\n \n /* Function to dump before or after an insn to FILE.  */\n-typedef void (*df_dump_insn_problem_function) (const_rtx, FILE *);\n+typedef void (*df_dump_insn_problem_function) (const rtx_insn *, FILE *);\n \n /* Function to dump top or bottom of basic block results to FILE.  */\n typedef void (*df_verify_solution_start) (void);\n@@ -421,7 +421,7 @@ typedef union df_ref_d *df_ref;\n /* One of these structures is allocated for every insn.  */\n struct df_insn_info\n {\n-  rtx insn;                     /* The insn this info comes from.  */\n+  rtx_insn *insn;\t        /* The insn this info comes from.  */\n   df_ref defs;\t                /* Head of insn-def chain.  */\n   df_ref uses;\t                /* Head of insn-use chain.  */\n   /* Head of insn-use chain for uses in REG_EQUAL/EQUIV notes.  */\n@@ -649,7 +649,7 @@ struct df_d\n \t\t\t: BLOCK_FOR_INSN (DF_REF_INSN (REF)))\n #define DF_REF_BBNO(REF) (DF_REF_BB (REF)->index)\n #define DF_REF_INSN_INFO(REF) ((REF)->base.insn_info)\n-extern rtx_insn *DF_REF_INSN (df_ref ref);\n+#define DF_REF_INSN(REF) ((REF)->base.insn_info->insn)\n #define DF_REF_INSN_UID(REF) (INSN_UID (DF_REF_INSN(REF)))\n #define DF_REF_CLASS(REF) ((REF)->base.cl)\n #define DF_REF_TYPE(REF) ((REF)->base.type)\n@@ -953,10 +953,10 @@ extern void df_check_cfg_clean (void);\n #endif\n extern df_ref df_bb_regno_first_def_find (basic_block, unsigned int);\n extern df_ref df_bb_regno_last_def_find (basic_block, unsigned int);\n-extern df_ref df_find_def (rtx, rtx);\n-extern bool df_reg_defined (rtx, rtx);\n-extern df_ref df_find_use (rtx, rtx);\n-extern bool df_reg_used (rtx, rtx);\n+extern df_ref df_find_def (rtx_insn *, rtx);\n+extern bool df_reg_defined (rtx_insn *, rtx);\n+extern df_ref df_find_use (rtx_insn *, rtx);\n+extern bool df_reg_used (rtx_insn *, rtx);\n extern void df_worklist_dataflow (struct dataflow *,bitmap, int *, int);\n extern void df_print_regset (FILE *file, bitmap r);\n extern void df_print_word_regset (FILE *file, bitmap r);\n@@ -965,15 +965,15 @@ extern void df_dump_region (FILE *);\n extern void df_dump_start (FILE *);\n extern void df_dump_top (basic_block, FILE *);\n extern void df_dump_bottom (basic_block, FILE *);\n-extern void df_dump_insn_top (const_rtx, FILE *);\n-extern void df_dump_insn_bottom (const_rtx, FILE *);\n+extern void df_dump_insn_top (const rtx_insn *, FILE *);\n+extern void df_dump_insn_bottom (const rtx_insn *, FILE *);\n extern void df_refs_chain_dump (df_ref, bool, FILE *);\n extern void df_regs_chain_dump (df_ref,  FILE *);\n-extern void df_insn_debug (rtx, bool, FILE *);\n-extern void df_insn_debug_regno (rtx, FILE *);\n+extern void df_insn_debug (rtx_insn *, bool, FILE *);\n+extern void df_insn_debug_regno (rtx_insn *, FILE *);\n extern void df_regno_debug (unsigned int, FILE *);\n extern void df_ref_debug (df_ref, FILE *);\n-extern void debug_df_insn (rtx);\n+extern void debug_df_insn (rtx_insn *);\n extern void debug_df_regno (unsigned int);\n extern void debug_df_reg (rtx);\n extern void debug_df_defno (unsigned int);\n@@ -991,7 +991,7 @@ extern void df_chain_dump (struct df_link *, FILE *);\n extern void df_print_bb_index (basic_block bb, FILE *file);\n extern void df_rd_add_problem (void);\n extern void df_rd_simulate_artificial_defs_at_top (basic_block, bitmap);\n-extern void df_rd_simulate_one_insn (basic_block, rtx, bitmap);\n+extern void df_rd_simulate_one_insn (basic_block, rtx_insn *, bitmap);\n extern void df_lr_add_problem (void);\n extern void df_lr_verify_transfer_functions (void);\n extern void df_live_verify_transfer_functions (void);\n@@ -1000,23 +1000,23 @@ extern void df_live_set_all_dirty (void);\n extern void df_chain_add_problem (unsigned int);\n extern void df_word_lr_add_problem (void);\n extern bool df_word_lr_mark_ref (df_ref, bool, bitmap);\n-extern bool df_word_lr_simulate_defs (rtx, bitmap);\n-extern void df_word_lr_simulate_uses (rtx, bitmap);\n+extern bool df_word_lr_simulate_defs (rtx_insn *, bitmap);\n+extern void df_word_lr_simulate_uses (rtx_insn *, bitmap);\n extern void df_word_lr_simulate_artificial_refs_at_top (basic_block, bitmap);\n extern void df_word_lr_simulate_artificial_refs_at_end (basic_block, bitmap);\n extern void df_note_add_problem (void);\n extern void df_md_add_problem (void);\n extern void df_md_simulate_artificial_defs_at_top (basic_block, bitmap);\n-extern void df_md_simulate_one_insn (basic_block, rtx, bitmap);\n-extern void df_simulate_find_noclobber_defs (rtx, bitmap);\n-extern void df_simulate_find_defs (rtx, bitmap);\n-extern void df_simulate_defs (rtx, bitmap);\n-extern void df_simulate_uses (rtx, bitmap);\n+extern void df_md_simulate_one_insn (basic_block, rtx_insn *, bitmap);\n+extern void df_simulate_find_noclobber_defs (rtx_insn *, bitmap);\n+extern void df_simulate_find_defs (rtx_insn *, bitmap);\n+extern void df_simulate_defs (rtx_insn *, bitmap);\n+extern void df_simulate_uses (rtx_insn *, bitmap);\n extern void df_simulate_initialize_backwards (basic_block, bitmap);\n-extern void df_simulate_one_insn_backwards (basic_block, rtx, bitmap);\n+extern void df_simulate_one_insn_backwards (basic_block, rtx_insn *, bitmap);\n extern void df_simulate_finalize_backwards (basic_block, bitmap);\n extern void df_simulate_initialize_forwards (basic_block, bitmap);\n-extern void df_simulate_one_insn_forwards (basic_block, rtx, bitmap);\n+extern void df_simulate_one_insn_forwards (basic_block, rtx_insn *, bitmap);\n extern void simulate_backwards_to_point (basic_block, regset, rtx);\n extern bool can_move_insns_across (rtx_insn *, rtx_insn *,\n \t\t\t\t   rtx_insn *, rtx_insn *,\n@@ -1029,20 +1029,20 @@ extern void df_scan_add_problem (void);\n extern void df_grow_reg_info (void);\n extern void df_grow_insn_info (void);\n extern void df_scan_blocks (void);\n-extern void df_uses_create (rtx *, rtx, int);\n-extern struct df_insn_info * df_insn_create_insn_record (rtx);\n-extern void df_insn_delete (rtx);\n+extern void df_uses_create (rtx *, rtx_insn *, int);\n+extern struct df_insn_info * df_insn_create_insn_record (rtx_insn *);\n+extern void df_insn_delete (rtx_insn *);\n extern void df_bb_refs_record (int, bool);\n-extern bool df_insn_rescan (rtx);\n-extern bool df_insn_rescan_debug_internal (rtx);\n+extern bool df_insn_rescan (rtx_insn *);\n+extern bool df_insn_rescan_debug_internal (rtx_insn *);\n extern void df_insn_rescan_all (void);\n extern void df_process_deferred_rescans (void);\n extern void df_recompute_luids (basic_block);\n-extern void df_insn_change_bb (rtx, basic_block);\n+extern void df_insn_change_bb (rtx_insn *, basic_block);\n extern void df_maybe_reorganize_use_refs (enum df_ref_order);\n extern void df_maybe_reorganize_def_refs (enum df_ref_order);\n extern void df_ref_change_reg_with_loc (int, int, rtx);\n-extern void df_notes_rescan (rtx);\n+extern void df_notes_rescan (rtx_insn *);\n extern void df_hard_reg_init (void);\n extern void df_update_entry_block_defs (void);\n extern void df_update_exit_block_uses (void);"}, {"sha": "0ab0db581d59612e64cd030f56ccfd8f42675bb6", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -4043,7 +4043,7 @@ void\n set_insn_deleted (rtx insn)\n {\n   if (INSN_P (insn))\n-    df_insn_delete (insn);\n+    df_insn_delete (as_a <rtx_insn *> (insn));\n   PUT_CODE (insn, NOTE);\n   NOTE_KIND (insn) = NOTE_INSN_DELETED;\n }\n@@ -4227,7 +4227,7 @@ reorder_insns (rtx_insn *from, rtx_insn *to, rtx_insn *after)\n   if (!BARRIER_P (after)\n       && (bb = BLOCK_FOR_INSN (after)))\n     {\n-      rtx x;\n+      rtx_insn *x;\n       df_set_bb_dirty (bb);\n \n       if (!BARRIER_P (from)\n@@ -5184,7 +5184,7 @@ set_unique_reg_note (rtx insn, enum reg_note kind, rtx datum)\n     {\n     case REG_EQUAL:\n     case REG_EQUIV:\n-      df_notes_rescan (insn);\n+      df_notes_rescan (as_a <rtx_insn *> (insn));\n       break;\n     default:\n       break;"}, {"sha": "ea3fec4904586ec977b4adbaa1ec2c082861a794", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -3106,7 +3106,7 @@ cleanup_subreg_operands (rtx insn)\n \t*recog_data.dup_loc[i] = walk_alter_subreg (recog_data.dup_loc[i], &changed);\n     }\n   if (changed)\n-    df_insn_rescan (insn);\n+    df_insn_rescan (as_a <rtx_insn *> (insn));\n }\n \n /* If X is a SUBREG, try to replace it with a REG or a MEM, based on"}, {"sha": "98b74ec2330b2d7b27dbc2e91d17c2aa2612ff9c", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -4092,7 +4092,7 @@ update_ld_motion_stores (struct expr * expr)\n \n       for ( ; list != NULL_RTX; list = XEXP (list, 1))\n \t{\n-\t  rtx insn = XEXP (list, 0);\n+\t  rtx_insn *insn = as_a <rtx_insn *> (XEXP (list, 0));\n \t  rtx pat = PATTERN (insn);\n \t  rtx src = SET_SRC (pat);\n \t  rtx reg = expr->reaching_reg;"}, {"sha": "bc46002ff6dc954529dea040043e8d9e7a9d1148", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -5223,9 +5223,10 @@ debug_ready_list (struct ready_list *ready)\n    NOTEs.  This is used for NOTE_INSN_EPILOGUE_BEG, so that sched-ebb\n    replaces the epilogue note in the correct basic block.  */\n void\n-reemit_notes (rtx insn)\n+reemit_notes (rtx_insn *insn)\n {\n-  rtx note, last = insn;\n+  rtx note;\n+  rtx_insn *last = insn;\n \n   for (note = REG_NOTES (insn); note; note = XEXP (note, 1))\n     {"}, {"sha": "a3bf41e984f4282d8c75bae910b13872337db5e4", "filename": "gcc/ira-emit.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fira-emit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fira-emit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-emit.c?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -301,6 +301,15 @@ change_regs (rtx *loc)\n   return result;\n }\n \n+static bool\n+change_regs_in_insn (rtx_insn **insn_ptr)\n+{\n+  rtx rtx = *insn_ptr;\n+  bool result = change_regs (&rtx);\n+  *insn_ptr = as_a <rtx_insn *> (rtx);\n+  return result;\n+}\n+\n /* Attach MOVE to the edge E.  The move is attached to the head of the\n    list if HEAD_P is TRUE.  */\n static void\n@@ -557,7 +566,8 @@ change_loop (ira_loop_tree_node_t node)\n   int regno;\n   bool used_p;\n   ira_allocno_t allocno, parent_allocno, *map;\n-  rtx insn, original_reg;\n+  rtx_insn *insn;\n+  rtx original_reg;\n   enum reg_class aclass, pclass;\n   ira_loop_tree_node_t parent;\n \n@@ -568,7 +578,7 @@ change_loop (ira_loop_tree_node_t node)\n       if (node->bb != NULL)\n \t{\n \t  FOR_BB_INSNS (node->bb, insn)\n-\t    if (INSN_P (insn) && change_regs (&insn))\n+\t    if (INSN_P (insn) && change_regs_in_insn (&insn))\n \t      {\n \t\tdf_insn_rescan (insn);\n \t\tdf_notes_rescan (insn);"}, {"sha": "7c184961d91687f8f9ba1bbed71c4fc4125ca8a6", "filename": "gcc/ira.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -3319,7 +3319,7 @@ static int recorded_label_ref;\n static int\n update_equiv_regs (void)\n {\n-  rtx insn;\n+  rtx_insn *insn;\n   basic_block bb;\n   int loop_depth;\n   bitmap cleared_regs;\n@@ -3345,7 +3345,8 @@ update_equiv_regs (void)\n   FOR_EACH_BB_FN (bb, cfun)\n     FOR_BB_INSNS (bb, insn)\n       if (NONDEBUG_INSN_P (insn))\n-\tfor_each_rtx (&insn, set_paradoxical_subreg, (void *) pdx_subregs);\n+\tfor_each_rtx_in_insn (&insn, set_paradoxical_subreg,\n+\t\t\t      (void *) pdx_subregs);\n \n   /* Scan the insns and find which registers have equivalences.  Do this\n      in a separate scan of the insns because (due to -fcse-follow-jumps)\n@@ -3616,7 +3617,8 @@ update_equiv_regs (void)\n \t  && ! contains_replace_regs (XEXP (dest, 0))\n \t  && ! pdx_subregs[regno])\n \t{\n-\t  rtx init_insn = XEXP (reg_equiv[regno].init_insns, 0);\n+\t  rtx_insn *init_insn =\n+\t    as_a <rtx_insn *> (XEXP (reg_equiv[regno].init_insns, 0));\n \t  if (validate_equiv_mem (init_insn, src, dest)\n \t      && ! memref_used_between_p (dest, init_insn, insn)\n \t      /* Attaching a REG_EQUIV note will fail if INIT_INSN has\n@@ -3737,7 +3739,7 @@ update_equiv_regs (void)\n \t\t     INSN.  Update the flow information.  */\n \t\t  else if (prev_nondebug_insn (insn) != equiv_insn)\n \t\t    {\n-\t\t      rtx new_insn;\n+\t\t      rtx_insn *new_insn;\n \n \t\t      new_insn = emit_insn_before (PATTERN (equiv_insn), insn);\n \t\t      REG_NOTES (new_insn) = REG_NOTES (equiv_insn);"}, {"sha": "32c573aa9f46f66a8b522749b0ce8a0b4092d122", "filename": "gcc/recog.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -500,13 +500,13 @@ confirm_change_group (void)\n       if (object)\n \t{\n \t  if (object != last_object && last_object && INSN_P (last_object))\n-\t    df_insn_rescan (last_object);\n+\t    df_insn_rescan (as_a <rtx_insn *> (last_object));\n \t  last_object = object;\n \t}\n     }\n \n   if (last_object && INSN_P (last_object))\n-    df_insn_rescan (last_object);\n+    df_insn_rescan (as_a <rtx_insn *> (last_object));\n   num_changes = 0;\n }\n \n@@ -3396,7 +3396,7 @@ static void\n peep2_update_life (basic_block bb, int match_len, rtx last, rtx prev)\n {\n   int i = peep2_buf_position (peep2_current + match_len + 1);\n-  rtx x;\n+  rtx_insn *x;\n   regset_head live;\n \n   INIT_REG_SET (&live);\n@@ -3405,7 +3405,7 @@ peep2_update_life (basic_block bb, int match_len, rtx last, rtx prev)\n   gcc_assert (peep2_current_count >= match_len + 1);\n   peep2_current_count -= match_len + 1;\n \n-  x = last;\n+  x = as_a <rtx_insn *> (last);\n   do\n     {\n       if (INSN_P (x))\n@@ -3461,7 +3461,7 @@ peep2_fill_buffer (basic_block bb, rtx insn, regset live)\n   COPY_REG_SET (peep2_insn_data[pos].live_before, live);\n   peep2_current_count++;\n \n-  df_simulate_one_insn_forwards (bb, insn, live);\n+  df_simulate_one_insn_forwards (bb, as_a <rtx_insn *> (insn), live);\n   return true;\n }\n "}, {"sha": "8d74d366186816aeacf8fb17bdf7ddb400aacf0c", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -3135,7 +3135,7 @@ extern bool validate_subreg (enum machine_mode, enum machine_mode,\n \n /* In combine.c  */\n extern unsigned int extended_count (const_rtx, enum machine_mode, int);\n-extern rtx remove_death (unsigned int, rtx);\n+extern rtx remove_death (unsigned int, rtx_insn *);\n extern void dump_combine_stats (FILE *);\n extern void dump_combine_total_stats (FILE *);\n extern rtx make_compound_operation (rtx, enum rtx_code);\n@@ -3199,7 +3199,7 @@ extern HOST_WIDE_INT find_args_size_adjust (rtx);\n extern int fixup_args_size_notes (rtx, rtx, int);\n \n /* In cfgrtl.c */\n-extern void print_rtl_with_bb (FILE *, const_rtx, int);\n+extern void print_rtl_with_bb (FILE *, const rtx_insn *, int);\n extern rtx_insn *duplicate_insn_chain (rtx_insn *, rtx_insn *);\n \n /* In expmed.c */"}, {"sha": "03ee94a5cd65f9119b06881c6412800d1896f2a0", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -2060,7 +2060,7 @@ remove_note (rtx insn, const_rtx note)\n     {\n     case REG_EQUAL:\n     case REG_EQUIV:\n-      df_notes_rescan (insn);\n+      df_notes_rescan (as_a <rtx_insn *> (insn));\n       break;\n     default:\n       break;"}, {"sha": "2b0eb92e59826b0214d85a2f1c4389b1026e310c", "filename": "gcc/sched-int.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -134,7 +134,7 @@ extern void sched_insns_finish (void);\n \n extern void *xrecalloc (void *, size_t, size_t, size_t);\n \n-extern void reemit_notes (rtx);\n+extern void reemit_notes (rtx_insn *);\n \n /* Functions in haifa-sched.c.  */\n extern int haifa_classify_insn (const_rtx);"}, {"sha": "aef38a52a858a47d0e8cc4ce9defa784cdda43ee", "filename": "gcc/valtrack.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fvaltrack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fvaltrack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvaltrack.c?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -177,10 +177,11 @@ propagate_for_debug_subst (rtx from, const_rtx old_rtx, void *data)\n    of THIS_BASIC_BLOCK.  */\n \n void\n-propagate_for_debug (rtx insn, rtx last, rtx dest, rtx src,\n+propagate_for_debug (rtx_insn *insn, rtx last, rtx dest, rtx src,\n \t\t     basic_block this_basic_block)\n {\n-  rtx next, loc, end = NEXT_INSN (BB_END (this_basic_block));\n+  rtx_insn *next, *end = NEXT_INSN (BB_END (this_basic_block));\n+  rtx loc;\n   rtx (*saved_rtl_hook_no_emit) (enum machine_mode, rtx);\n \n   struct rtx_subst_pair p;"}, {"sha": "60dcad5b3a15e23b6d505e5e9be6031715d2b8ab", "filename": "gcc/valtrack.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fvaltrack.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/gcc%2Fvaltrack.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvaltrack.h?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -149,7 +149,7 @@ extern int dead_debug_insert_temp (struct dead_debug_local *,\n \t\t\t\t   unsigned int uregno, rtx insn,\n \t\t\t\t   enum debug_temp_where);\n \n-extern void propagate_for_debug (rtx, rtx, rtx, rtx, basic_block);\n+extern void propagate_for_debug (rtx_insn *, rtx, rtx, rtx, basic_block);\n \n \n #endif /* GCC_VALTRACK_H */"}, {"sha": "52268fc45b83346d0ee986468ee43790ca30273d", "filename": "rtx-classes-status.txt", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/rtx-classes-status.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2908ba6dbe40d0cf43e0cd5c6de67635a689221/rtx-classes-status.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/rtx-classes-status.txt?ref=b2908ba6dbe40d0cf43e0cd5c6de67635a689221", "patch": "@@ -14,5 +14,4 @@ Phase 6: use extra rtx_def subclasses:             TODO\n \n TODO: \"Scaffolding\" to be removed\n =================================\n-* DF_REF_INSN\n * SET_NEXT_INSN, SET_PREV_INSN"}]}