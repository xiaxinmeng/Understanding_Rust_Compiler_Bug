{"sha": "d0d9aad78a3d64f1b0c5c7b7abcea05bc6bc82fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBkOWFhZDc4YTNkNjRmMWIwYzVjN2I3YWJjZWEwNWJjNmJjODJmZA==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2014-09-25T16:39:49Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2014-09-25T16:39:49Z"}, "message": "Improve live-in calculation for splitted block\n\n  gcc/\n    * shrink-wrap.c (move_insn_for_shrink_wrap): Initialize the live-in of new\n    created BB as the intersection of live-in from \"old_dest\" and live-out from\n    \"bb\".\n\n  gcc/testsuite/\n    * gcc.target/i386/shrink_wrap_1.c: New test.\n\nFrom-SVN: r215611", "tree": {"sha": "9ae8db227930d07ecc5041cb732fb3f6785b80c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ae8db227930d07ecc5041cb732fb3f6785b80c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0d9aad78a3d64f1b0c5c7b7abcea05bc6bc82fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0d9aad78a3d64f1b0c5c7b7abcea05bc6bc82fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0d9aad78a3d64f1b0c5c7b7abcea05bc6bc82fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0d9aad78a3d64f1b0c5c7b7abcea05bc6bc82fd/comments", "author": null, "committer": null, "parents": [{"sha": "0e9e0a218b8986711a627c3249d9cab17b9dc429", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e9e0a218b8986711a627c3249d9cab17b9dc429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e9e0a218b8986711a627c3249d9cab17b9dc429"}], "stats": {"total": 67, "additions": 65, "deletions": 2}, "files": [{"sha": "c3533ef2c15153c4296892eef38bc264af71961e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0d9aad78a3d64f1b0c5c7b7abcea05bc6bc82fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0d9aad78a3d64f1b0c5c7b7abcea05bc6bc82fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0d9aad78a3d64f1b0c5c7b7abcea05bc6bc82fd", "patch": "@@ -1,3 +1,9 @@\n+2014-09-25  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* shrink-wrap.c (move_insn_for_shrink_wrap): Initialize the live-in of\n+\tnew created BB as the intersection of live-in from \"old_dest\" and\n+\tlive-out from \"bb\".\n+\n 2014-09-25  Felix Yang  <felix.yang@huawei.com>\n \n \t* lra.c (lra_set_insn_recog_data): Fix typo in comment."}, {"sha": "bd4813c82ae42400b678b08da76f3fad994dddcf", "filename": "gcc/shrink-wrap.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0d9aad78a3d64f1b0c5c7b7abcea05bc6bc82fd/gcc%2Fshrink-wrap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0d9aad78a3d64f1b0c5c7b7abcea05bc6bc82fd/gcc%2Fshrink-wrap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fshrink-wrap.c?ref=d0d9aad78a3d64f1b0c5c7b7abcea05bc6bc82fd", "patch": "@@ -250,16 +250,21 @@ move_insn_for_shrink_wrap (basic_block bb, rtx_insn *insn,\n       if (!df_live)\n \treturn false;\n \n+      basic_block old_dest = live_edge->dest;\n       next_block = split_edge (live_edge);\n \n       /* We create a new basic block.  Call df_grow_bb_info to make sure\n \t all data structures are allocated.  */\n       df_grow_bb_info (df_live);\n-      bitmap_copy (df_get_live_in (next_block), df_get_live_out (bb));\n+\n+      bitmap_and (df_get_live_in (next_block), df_get_live_out (bb),\n+\t\t  df_get_live_in (old_dest));\n       df_set_bb_dirty (next_block);\n \n       /* We should not split more than once for a function.  */\n-      gcc_assert (!(*split_p));\n+      if (*split_p)\n+\treturn false;\n+\n       *split_p = true;\n     }\n "}, {"sha": "9c7c3c9169d7a497f0485a83782676560ea7eff0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0d9aad78a3d64f1b0c5c7b7abcea05bc6bc82fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0d9aad78a3d64f1b0c5c7b7abcea05bc6bc82fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0d9aad78a3d64f1b0c5c7b7abcea05bc6bc82fd", "patch": "@@ -1,3 +1,7 @@\n+2014-09-25  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* gcc.target/i386/shrink_wrap_1.c: New test.\n+\n 2014-09-25  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \tPR target/63335"}, {"sha": "47f24681243e228b1b232b7253add002d0b0f021", "filename": "gcc/testsuite/gcc.target/i386/shrink_wrap_1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0d9aad78a3d64f1b0c5c7b7abcea05bc6bc82fd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fshrink_wrap_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0d9aad78a3d64f1b0c5c7b7abcea05bc6bc82fd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fshrink_wrap_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fshrink_wrap_1.c?ref=d0d9aad78a3d64f1b0c5c7b7abcea05bc6bc82fd", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-rtl-pro_and_epilogue\" } */\n+\n+enum machine_mode\n+{\n+  FAKE_0,\n+  FAKE_1,\n+  FAKE_2,\n+  FAKE_3,\n+  FAKE_4,\n+  FAKE_5,\n+  NUM_MACHINE_MODES,\n+};\n+\n+typedef int *rtx;\n+typedef long unsigned int size_t;\n+extern unsigned char mode_size[NUM_MACHINE_MODES];\n+\n+extern rtx c_readstr (const char *, enum machine_mode);\n+extern rtx convert_to_mode (enum machine_mode, rtx, int);\n+extern rtx expand_mult (enum machine_mode, rtx, rtx, rtx, int);\n+extern rtx force_reg (enum machine_mode, rtx);\n+extern void *memset (void *__s, int __c, size_t __n);\n+\n+rtx\n+builtin_memset_gen_str (void *data, long offset __attribute__ ((__unused__)),\n+\t\t\tenum machine_mode mode)\n+{\n+  rtx target, coeff;\n+  size_t size;\n+  char *p;\n+\n+  size = ((unsigned short) (__builtin_constant_p (mode)\n+\t\t\t    ? mode_size_inline (mode) : mode_size[mode]));\n+  if (size == 1)\n+    return (rtx) data;\n+\n+  p = ((char *) __builtin_alloca(sizeof (char) * (size)));\n+  memset (p, 1, size);\n+  coeff = c_readstr (p, mode);\n+\n+  target = convert_to_mode (mode, (rtx) data, 1);\n+  target = expand_mult (mode, target, coeff, (rtx) 0, 1);\n+  return force_reg (mode, target);\n+}\n+\n+/* { dg-final { scan-rtl-dump \"Performing shrink-wrapping\" \"pro_and_epilogue\"  } } */\n+/* { dg-final { cleanup-rtl-dump \"pro_and_epilogue\" } } */"}]}