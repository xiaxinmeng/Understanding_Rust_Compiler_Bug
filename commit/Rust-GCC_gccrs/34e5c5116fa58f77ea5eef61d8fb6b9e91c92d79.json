{"sha": "34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRlNWM1MTE2ZmE1OGY3N2VhNWVlZjYxZDhmYjZiOWU5MWM5MmQ3OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-08-01T10:47:14Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-08-01T10:47:14Z"}, "message": "tree-ssa-pre.c (print_pre_expr): Handle NULL expr.\n\n2017-08-01  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-pre.c (print_pre_expr): Handle NULL expr.\n\t(compute_antic): Seed worklist with exit block predecessors.\n\t* cfganal.c (dfs_find_deadend): For a cycle return the source\n\tof the edge closing it.\n\n\t* gcc.dg/tree-ssa/ssa-dce-3.c: Adjust.\n\t* gcc.dg/tree-ssa/split-path-5.c: Remove case with just dead\n\tendless loop.\n\t* gcc.dg/uninit-23.c: Adjust.\n\nFrom-SVN: r250767", "tree": {"sha": "6180256fcd038c7f361f782de52817a7c47b4fb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6180256fcd038c7f361f782de52817a7c47b4fb4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "35c38fa674ab01152c743f421226f3cbc829cd94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35c38fa674ab01152c743f421226f3cbc829cd94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35c38fa674ab01152c743f421226f3cbc829cd94"}], "stats": {"total": 77, "additions": 40, "deletions": 37}, "files": [{"sha": "f48f0cc237966da0672591f881ca5dfc8505e4e5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79", "patch": "@@ -1,3 +1,10 @@\n+2017-08-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (print_pre_expr): Handle NULL expr.\n+\t(compute_antic): Seed worklist with exit block predecessors.\n+\t* cfganal.c (dfs_find_deadend): For a cycle return the source\n+\tof the edge closing it.\n+\n 2017-08-01  Tamar Christina  <tamar.christina@arm.com>\n \n \t* config/aarch64/aarch64.c"}, {"sha": "394d986c945a3d02ce8a8769859ce2ccba2c8fcb", "filename": "gcc/cfganal.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79", "patch": "@@ -737,31 +737,32 @@ post_order_compute (int *post_order, bool include_entry_exit,\n basic_block\n dfs_find_deadend (basic_block bb)\n {\n-  bitmap visited = BITMAP_ALLOC (NULL);\n+  auto_bitmap visited;\n+  basic_block next = bb;\n \n   for (;;)\n     {\n-      if (EDGE_COUNT (bb->succs) == 0\n-\t  || ! bitmap_set_bit (visited, bb->index))\n-        {\n-          BITMAP_FREE (visited);\n-          return bb;\n-        }\n+      if (EDGE_COUNT (next->succs) == 0)\n+\treturn next;\n+\n+      if (! bitmap_set_bit (visited, next->index))\n+\treturn bb;\n \n+      bb = next;\n       /* If we are in an analyzed cycle make sure to try exiting it.\n          Note this is a heuristic only and expected to work when loop\n \t fixup is needed as well.  */\n       if (! bb->loop_father\n \t  || ! loop_outer (bb->loop_father))\n-\tbb = EDGE_SUCC (bb, 0)->dest;\n+\tnext = EDGE_SUCC (bb, 0)->dest;\n       else\n \t{\n \t  edge_iterator ei;\n \t  edge e;\n \t  FOR_EACH_EDGE (e, ei, bb->succs)\n \t    if (loop_exit_edge_p (bb->loop_father, e))\n \t      break;\n-\t  bb = e ? e->dest : EDGE_SUCC (bb, 0)->dest;\n+\t  next = e ? e->dest : EDGE_SUCC (bb, 0)->dest;\n \t}\n     }\n "}, {"sha": "c901efbcef12bcd3f5f878b8a23ae5c7cd9429c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79", "patch": "@@ -1,3 +1,10 @@\n+2017-08-01  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-dce-3.c: Adjust.\n+\t* gcc.dg/tree-ssa/split-path-5.c: Remove case with just dead\n+\tendless loop.\n+\t* gcc.dg/uninit-23.c: Adjust.\n+\n 2017-08-01  Bin Cheng  <bin.cheng@arm.com>\n \n \t* gcc.dg/no-strict-overflow-7.c: Revise comment and test string."}, {"sha": "95aabdaf6be645c012457d1d04c732ce0ba11cda", "filename": "gcc/testsuite/gcc.dg/tree-ssa/split-path-5.c", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fsplit-path-5.c?ref=34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79", "patch": "@@ -41,20 +41,4 @@ bmhi_init (const char *pattern)\n     }\n }\n \n-char *\n-bmhi_search (const char *string, const int stringlen)\n-{\n-  int i, j;\n-  char *s;\n-  for (;;)\n-    {\n-      while (--j >= 0 && (\n-\t\t\t   {\n-\t\t\t   __typeof__ (s[j]) __x = (s[j]);\n-\t\t\t   ((((__ctype_ptr__ +\n-\t\t\t       sizeof (\"\"[__x]))[(int) (__x)]) &\n-\t\t\t     (01 | 02)) ==\n-\t\t\t    02) ? (int) __x - 'a' +\n-\t\t\t   'A' : (int) __x;}) == pat[j]);\n-}}\n-/* { dg-final { scan-tree-dump-times \"Duplicating join block\" 2 \"split-paths\" } } */\n+/* { dg-final { scan-tree-dump-times \"Duplicating join block\" 1 \"split-paths\" } } */"}, {"sha": "863aa79b4eb1cd74a7e9755089e27e84bcf54bd4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dce-3.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dce-3.c?ref=34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79", "patch": "@@ -26,9 +26,6 @@ int main(void)\n    by marking the j % 7 condition as useful.  See PR45178.  */\n \n /* We should eliminate the inner condition, but the loop must be preserved\n-   as it is infinite.  Therefore there should be just one phi node (for i):  */\n-/* { dg-final { scan-tree-dump-times \"PHI \" 1 \"cddce1\" { xfail *-*-* } } } */\n-\n-/* And one if (for the exit condition of the loop):  */\n-/* { dg-final { scan-tree-dump-times \"if \" 1 \"cddce1\" } } */\n-\n+   as it is infinite.  Therefore there should be just one goto and no PHI.  */\n+/* { dg-final { scan-tree-dump-times \"PHI \" 0 \"cddce1\" } } */\n+/* { dg-final { scan-tree-dump-times \"goto\" 1 \"cddce1\" } } */"}, {"sha": "d64eb7d2ee9c893e80aaa112c0adbf61a68c392d", "filename": "gcc/testsuite/gcc.dg/uninit-23.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-23.c?ref=34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79", "patch": "@@ -15,10 +15,10 @@ ql (void)\n       for (;;)\n       {\n         int *go;\n-        int *t4 = go;\n+        int *t4 = go; /* { dg-warning \"is used uninitialized\" } */\n \n  l1:\n-        *t4 = (*t4 != 0) ? 0 : 2; /* { dg-warning \"may be used uninitialized\" } */\n+        *t4 = (*t4 != 0) ? 0 : 2;\n       }\n \n     if (ij != 0)"}, {"sha": "eaadaad5db3554d33000afccdd15e653e743e89d", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=34e5c5116fa58f77ea5eef61d8fb6b9e91c92d79", "patch": "@@ -837,7 +837,7 @@ bitmap_set_and (bitmap_set_t dest, bitmap_set_t orig)\n     }\n }\n \n-/* Subtract all values and expressions contained in ORIG from DEST.  */\n+/* Subtract all expressions contained in ORIG from DEST.  */\n \n static bitmap_set_t\n bitmap_set_subtract (bitmap_set_t dest, bitmap_set_t orig)\n@@ -859,7 +859,7 @@ bitmap_set_subtract (bitmap_set_t dest, bitmap_set_t orig)\n   return result;\n }\n \n-/* Subtract all the values in bitmap set B from bitmap set A.  */\n+/* Subtract all values in bitmap set B from bitmap set A.  */\n \n static void\n bitmap_set_subtract_values (bitmap_set_t a, bitmap_set_t b)\n@@ -987,6 +987,11 @@ bitmap_value_insert_into_set (bitmap_set_t set, pre_expr expr)\n static void\n print_pre_expr (FILE *outfile, const pre_expr expr)\n {\n+  if (! expr)\n+    {\n+      fprintf (outfile, \"NULL\");\n+      return;\n+    }\n   switch (expr->kind)\n     {\n     case CONSTANT:\n@@ -2418,7 +2423,9 @@ compute_antic (void)\n   inverted_post_order_compute (&postorder);\n \n   auto_sbitmap worklist (last_basic_block_for_fn (cfun) + 1);\n-  bitmap_ones (worklist);\n+  bitmap_clear (worklist);\n+  FOR_EACH_EDGE (e, ei, EXIT_BLOCK_PTR_FOR_FN (cfun)->preds)\n+    bitmap_set_bit (worklist, e->src->index);\n   while (changed)\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))"}]}