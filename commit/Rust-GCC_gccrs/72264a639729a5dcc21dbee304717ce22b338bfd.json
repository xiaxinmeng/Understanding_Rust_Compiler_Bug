{"sha": "72264a639729a5dcc21dbee304717ce22b338bfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIyNjRhNjM5NzI5YTVkY2MyMWRiZWUzMDQ3MTdjZTIyYjMzOGJmZA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-07-17T14:44:45Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-08-05T13:23:03Z"}, "message": "<x86gprintrin.h>: Add pragma GCC target(\"general-regs-only\")\n\n1. Intrinsics in <x86gprintrin.h> only require GPR ISAs.  Add\n\n #if defined __MMX__ || defined __SSE__\n #pragma GCC push_options\n #pragma GCC target(\"general-regs-only\")\n #define __DISABLE_GENERAL_REGS_ONLY__\n #endif\n\nand\n\n #ifdef __DISABLE_GENERAL_REGS_ONLY__\n #undef __DISABLE_GENERAL_REGS_ONLY__\n #pragma GCC pop_options\n #endif /* __DISABLE_GENERAL_REGS_ONLY__ */\n\nto <x86gprintrin.h> to disable non-GPR ISAs so that they can be used in\nfunctions with __attribute__ ((target(\"general-regs-only\"))).\n2. When checking always_inline attribute, if callee only uses GPRs,\nignore MASK_80387 since enable MASK_80387 in caller has no impact on\ncallee inline.\n\ngcc/\n\n\tPR target/99744\n\t* config/i386/i386.c (ix86_can_inline_p): Ignore MASK_80387 if\n\tcallee only uses GPRs.\n\t* config/i386/ia32intrin.h: Revert commit 5463cee2770.\n\t* config/i386/serializeintrin.h: Revert commit 71958f740f1.\n\t* config/i386/x86gprintrin.h: Add\n\t#pragma GCC target(\"general-regs-only\") and #pragma GCC pop_options\n\tto disable non-GPR ISAs.\n\ngcc/testsuite/\n\n\tPR target/99744\n\t* gcc.target/i386/pr99744-3.c: New test.\n\t* gcc.target/i386/pr99744-4.c: Likewise.\n\t* gcc.target/i386/pr99744-5.c: Likewise.\n\t* gcc.target/i386/pr99744-6.c: Likewise.\n\t* gcc.target/i386/pr99744-7.c: Likewise.\n\t* gcc.target/i386/pr99744-8.c: Likewise.", "tree": {"sha": "73cabc983d20be9db8531a3138a5d66fc5756322", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73cabc983d20be9db8531a3138a5d66fc5756322"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72264a639729a5dcc21dbee304717ce22b338bfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72264a639729a5dcc21dbee304717ce22b338bfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72264a639729a5dcc21dbee304717ce22b338bfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72264a639729a5dcc21dbee304717ce22b338bfd/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c04bb6d93f3bd009800cb99e56c779a69d832691", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c04bb6d93f3bd009800cb99e56c779a69d832691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c04bb6d93f3bd009800cb99e56c779a69d832691"}], "stats": {"total": 481, "additions": 477, "deletions": 4}, "files": [{"sha": "aea224ab2359a5dacc35fdf376bff778f15afb83", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72264a639729a5dcc21dbee304717ce22b338bfd/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72264a639729a5dcc21dbee304717ce22b338bfd/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=72264a639729a5dcc21dbee304717ce22b338bfd", "patch": "@@ -554,7 +554,7 @@ ix86_can_inline_p (tree caller, tree callee)\n \n   /* Changes of those flags can be tolerated for always inlines. Lets hope\n      user knows what he is doing.  */\n-  const unsigned HOST_WIDE_INT always_inline_safe_mask\n+  unsigned HOST_WIDE_INT always_inline_safe_mask\n \t = (MASK_USE_8BIT_IDIV | MASK_ACCUMULATE_OUTGOING_ARGS\n \t    | MASK_NO_ALIGN_STRINGOPS | MASK_AVX256_SPLIT_UNALIGNED_LOAD\n \t    | MASK_AVX256_SPLIT_UNALIGNED_STORE | MASK_CLD\n@@ -579,6 +579,10 @@ ix86_can_inline_p (tree caller, tree callee)\n        && lookup_attribute (\"always_inline\",\n \t\t\t    DECL_ATTRIBUTES (callee)));\n \n+  /* If callee only uses GPRs, ignore MASK_80387.  */\n+  if (TARGET_GENERAL_REGS_ONLY_P (callee_opts->x_ix86_target_flags))\n+    always_inline_safe_mask |= MASK_80387;\n+\n   cgraph_node *callee_node = cgraph_node::get (callee);\n   /* Callee's isa options should be a subset of the caller's, i.e. a SSE4\n      function can inline a SSE2 function but a SSE2 function can't inline"}, {"sha": "df99220ee4f56eeec560e0e66f31246fc193b9b7", "filename": "gcc/config/i386/ia32intrin.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72264a639729a5dcc21dbee304717ce22b338bfd/gcc%2Fconfig%2Fi386%2Fia32intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72264a639729a5dcc21dbee304717ce22b338bfd/gcc%2Fconfig%2Fi386%2Fia32intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fia32intrin.h?ref=72264a639729a5dcc21dbee304717ce22b338bfd", "patch": "@@ -107,12 +107,22 @@ __rdpmc (int __S)\n #endif /* __iamcu__ */\n \n /* rdtsc */\n-#define __rdtsc()\t\t__builtin_ia32_rdtsc ()\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__rdtsc (void)\n+{\n+  return __builtin_ia32_rdtsc ();\n+}\n \n #ifndef __iamcu__\n \n /* rdtscp */\n-#define __rdtscp(a)\t\t__builtin_ia32_rdtscp (a)\n+extern __inline unsigned long long\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__rdtscp (unsigned int *__A)\n+{\n+  return __builtin_ia32_rdtscp (__A);\n+}\n \n #endif /* __iamcu__ */\n "}, {"sha": "89b5b94ea9bd53c16583be3c95b36adb8d27b08c", "filename": "gcc/config/i386/serializeintrin.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72264a639729a5dcc21dbee304717ce22b338bfd/gcc%2Fconfig%2Fi386%2Fserializeintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72264a639729a5dcc21dbee304717ce22b338bfd/gcc%2Fconfig%2Fi386%2Fserializeintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fserializeintrin.h?ref=72264a639729a5dcc21dbee304717ce22b338bfd", "patch": "@@ -34,7 +34,12 @@\n #define __DISABLE_SERIALIZE__\n #endif /* __SERIALIZE__ */\n \n-#define _serialize()\t__builtin_ia32_serialize ()\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_serialize (void)\n+{\n+  __builtin_ia32_serialize ();\n+}\n \n #ifdef __DISABLE_SERIALIZE__\n #undef __DISABLE_SERIALIZE__"}, {"sha": "b7fefa780a6e98b10695869a359c66973b72d0b3", "filename": "gcc/config/i386/x86gprintrin.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72264a639729a5dcc21dbee304717ce22b338bfd/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72264a639729a5dcc21dbee304717ce22b338bfd/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86gprintrin.h?ref=72264a639729a5dcc21dbee304717ce22b338bfd", "patch": "@@ -24,6 +24,12 @@\n #ifndef _X86GPRINTRIN_H_INCLUDED\n #define _X86GPRINTRIN_H_INCLUDED\n \n+#if defined __MMX__ || defined __SSE__\n+#pragma GCC push_options\n+#pragma GCC target(\"general-regs-only\")\n+#define __DISABLE_GENERAL_REGS_ONLY__\n+#endif\n+\n #include <ia32intrin.h>\n \n #ifndef __iamcu__\n@@ -255,4 +261,9 @@ _ptwrite32 (unsigned __B)\n \n #endif /* __iamcu__ */\n \n+#ifdef __DISABLE_GENERAL_REGS_ONLY__\n+#undef __DISABLE_GENERAL_REGS_ONLY__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_GENERAL_REGS_ONLY__ */\n+\n #endif /* _X86GPRINTRIN_H_INCLUDED.  */"}, {"sha": "6c505816ceb4100f0b429f462c37083635f82138", "filename": "gcc/testsuite/gcc.target/i386/pr99744-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72264a639729a5dcc21dbee304717ce22b338bfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72264a639729a5dcc21dbee304717ce22b338bfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-3.c?ref=72264a639729a5dcc21dbee304717ce22b338bfd", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mno-serialize\" } */\n+\n+#include <x86intrin.h>\n+\n+__attribute__ ((target(\"general-regs-only\")))\n+void\n+foo1 (void)\n+{\n+  _serialize ();\n+}\n+\n+/* { dg-error \"target specific option mismatch\" \"\" { target *-*-* } 0 } */"}, {"sha": "9196e62d95576df902b03e18085b50271773892d", "filename": "gcc/testsuite/gcc.target/i386/pr99744-4.c", "status": "added", "additions": 357, "deletions": 0, "changes": 357, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72264a639729a5dcc21dbee304717ce22b338bfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72264a639729a5dcc21dbee304717ce22b338bfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-4.c?ref=72264a639729a5dcc21dbee304717ce22b338bfd", "patch": "@@ -0,0 +1,357 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi -mbmi2 -mcldemote -mclflushopt -mclwb -mclzero -mcrc32 -menqcmd -mfsgsbase -mfxsr -mhreset -mlzcnt -mlwp -mmovdir64b -mmovdiri -mmwaitx -mpconfig -mpku -mpopcnt -mptwrite -mrdpid -mrdrnd -mrdseed -mrtm -msgx -mshstk -mtbm -mtsxldtrk -mxsave -mxsavec -mxsaveopt -mxsaves -mwaitpkg -mwbnoinvd\" } */\n+/* { dg-additional-options \"-muintr\" { target { ! ia32 } } }  */\n+\n+/* Test calling GPR intrinsics from functions with general-regs-only\n+   target attribute.  */\n+\n+#include <x86gprintrin.h>\n+\n+#define _CONCAT(x,y) x ## y\n+\n+#define test_0(func, type)\t\t\t\t\t\t\\\n+  __attribute__ ((target(\"general-regs-only\")))\t\t\t\t\\\n+  type _CONCAT(do_,func) (void)\t\t\t\t\t\t\\\n+  { return func (); }\n+\n+#define test_0_i1(func, type, imm)\t\t\t\t\t\\\n+  __attribute__ ((target(\"general-regs-only\")))\t\t\t\t\\\n+  type _CONCAT(do_,func) (void)\t\t\t\t\t\t\\\n+  { return func (imm); }\n+\n+#define test_1(func, type, op1_type)\t\t\t\t\t\\\n+  __attribute__ ((target(\"general-regs-only\")))\t\t\t\t\\\n+  type _CONCAT(do_,func) (op1_type A)\t\t\t\t\t\\\n+  { return func (A); }\n+\n+#define test_1_i1(func, type, op1_type, imm)\t\t\t\t\\\n+  __attribute__ ((target(\"general-regs-only\")))\t\t\t\t\\\n+  type _CONCAT(do_,func) (op1_type A)\t\t\t\t\t\\\n+  { return func (A, imm); }\n+\n+#define test_2(func, type, op1_type, op2_type)\t\t\t\t\\\n+  __attribute__ ((target(\"general-regs-only\")))\t\t\t\t\\\n+  type _CONCAT(do_,func) (op1_type A, op2_type B)\t\t\t\\\n+  { return func (A, B); }\n+\n+#define test_2_i1(func, type, op1_type, op2_type, imm)\t\t\t\\\n+  __attribute__ ((target(\"general-regs-only\")))\t\t\t\t\\\n+  type _CONCAT(do_,func) (op1_type A, op2_type B)\t\t\t\\\n+  { return func (A, B, imm); }\n+\n+#define test_3(func, type, op1_type, op2_type, op3_type)\t\t\\\n+  __attribute__ ((target(\"general-regs-only\")))\t\t\t\t\\\n+  type _CONCAT(do_,func) (op1_type A, op2_type B, op3_type C)\t\t\\\n+  { return func (A, B, C); }\n+\n+#define test_4(func, type, op1_type, op2_type, op3_type, op4_type)\t\\\n+  __attribute__ ((target(\"general-regs-only\")))\t\t\t\t\\\n+  type _CONCAT(do_,func) (op1_type A, op2_type B, op3_type C,\t\t\\\n+\t\t\t  op4_type D)\t\t\t\t\t\\\n+  { return func (A, B, C, D); }\n+\n+/* ia32intrin.h  */\n+test_1 (__bsfd, int, int)\n+test_1 (__bsrd, int, int)\n+test_1 (__bswapd, int, int)\n+test_1 (__popcntd, int, unsigned int)\n+test_2 (__rolb, unsigned char, unsigned char, int)\n+test_2 (__rolw, unsigned short, unsigned short, int)\n+test_2 (__rold, unsigned int, unsigned int, int)\n+test_2 (__rorb, unsigned char, unsigned char, int)\n+test_2 (__rorw, unsigned short, unsigned short, int)\n+test_2 (__rord, unsigned int, unsigned int, int)\n+\n+#ifndef __iamcu__\n+/* adxintrin.h */\n+test_4 (_subborrow_u32, unsigned char, unsigned char, unsigned int,\n+\tunsigned int, unsigned int *)\n+test_4 (_addcarry_u32, unsigned char, unsigned char, unsigned int,\n+\tunsigned int, unsigned int *)\n+test_4 (_addcarryx_u32, unsigned char, unsigned char, unsigned int,\n+\tunsigned int, unsigned int *)\n+\n+/* bmiintrin.h */\n+test_1 (__tzcnt_u16, unsigned short, unsigned short)\n+test_2 (__andn_u32, unsigned int, unsigned int, unsigned int)\n+test_2 (__bextr_u32, unsigned int, unsigned int, unsigned int)\n+test_3 (_bextr_u32, unsigned int, unsigned int, unsigned int,\n+\tunsigned int)\n+test_1 (__blsi_u32, unsigned int, unsigned int)\n+test_1 (_blsi_u32, unsigned int, unsigned int)\n+test_1 (__blsmsk_u32, unsigned int, unsigned int)\n+test_1 (_blsmsk_u32, unsigned int, unsigned int)\n+test_1 (__blsr_u32, unsigned int, unsigned int)\n+test_1 (_blsr_u32, unsigned int, unsigned int)\n+test_1 (__tzcnt_u32, unsigned int, unsigned int)\n+test_1 (_tzcnt_u32, unsigned int, unsigned int)\n+\n+/* bmi2intrin.h */\n+test_2 (_bzhi_u32, unsigned int, unsigned int, unsigned int)\n+test_2 (_pdep_u32, unsigned int, unsigned int, unsigned int)\n+test_2 (_pext_u32, unsigned int, unsigned int, unsigned int)\n+\n+/* cetintrin.h */\n+test_1 (_inc_ssp, void, unsigned int)\n+test_0 (_saveprevssp, void)\n+test_1 (_rstorssp, void, void *)\n+test_2 (_wrssd, void, unsigned int, void *)\n+test_2 (_wrussd, void, unsigned int, void *)\n+test_0 (_setssbsy, void)\n+test_1 (_clrssbsy, void, void *)\n+\n+/* cldemoteintrin.h */\n+test_1 (_cldemote, void, void *)\n+\n+/* clflushoptintrin.h */\n+test_1 (_mm_clflushopt, void, void *)\n+\n+/* clwbintrin.h */\n+test_1 (_mm_clwb, void, void *)\n+\n+/* clzerointrin.h */\n+test_1 (_mm_clzero, void, void *)\n+\n+/* enqcmdintrin.h */\n+test_2 (_enqcmd, int, void *, const void *)\n+test_2 (_enqcmds, int, void *, const void *)\n+\n+/* fxsrintrin.h */\n+test_1 (_fxsave, void, void *)\n+test_1 (_fxrstor, void, void *)\n+\n+/* hresetintrin.h */\n+test_1 (_hreset, void, unsigned int)\n+\n+/* ia32intrin.h  */\n+test_2 (__crc32b, unsigned int, unsigned char, unsigned char)\n+test_2 (__crc32w, unsigned int, unsigned short, unsigned short)\n+test_2 (__crc32d, unsigned int, unsigned int, unsigned int)\n+test_1 (__rdpmc, unsigned long long, int)\n+test_0 (__rdtsc, unsigned long long)\n+test_1 (__rdtscp, unsigned long long, unsigned int *)\n+test_0 (__pause, void)\n+\n+/* lzcntintrin.h */\n+test_1 (__lzcnt16, unsigned short, unsigned short)\n+test_1 (__lzcnt32, unsigned int, unsigned int)\n+test_1 (_lzcnt_u32, unsigned int, unsigned int)\n+\n+/* lwpintrin.h */\n+test_1 (__llwpcb, void, void *)\n+test_0 (__slwpcb, void *)\n+test_2_i1 (__lwpval32, void, unsigned int, unsigned int, 1)\n+test_2_i1 (__lwpins32, unsigned char, unsigned int, unsigned int, 1)\n+\n+/* movdirintrin.h */\n+test_2 (_directstoreu_u32, void, void *, unsigned int)\n+test_2 (_movdir64b, void, void *, const void *)\n+\n+/* mwaitxintrin.h */\n+test_3 (_mm_monitorx, void, void const *, unsigned int, unsigned int)\n+test_3 (_mm_mwaitx, void, unsigned int, unsigned int, unsigned int)\n+\n+/* pconfigintrin.h */\n+test_2 (_pconfig_u32, unsigned int, const unsigned int, size_t *)\n+\n+/* pkuintrin.h */\n+test_0 (_rdpkru_u32, unsigned int)\n+test_1 (_wrpkru, void, unsigned int)\n+\n+/* popcntintrin.h */\n+test_1 (_mm_popcnt_u32, int, unsigned int)\n+\n+/* rdseedintrin.h */\n+test_1 (_rdseed16_step, int, unsigned short *)\n+test_1 (_rdseed32_step, int, unsigned int *)\n+\n+/* rtmintrin.h */\n+test_0 (_xbegin, unsigned int)\n+test_0 (_xend, void)\n+test_0_i1 (_xabort, void, 1)\n+\n+/* sgxintrin.h */\n+test_2 (_encls_u32, unsigned int, const unsigned int, size_t *)\n+test_2 (_enclu_u32, unsigned int, const unsigned int, size_t *)\n+test_2 (_enclv_u32, unsigned int, const unsigned int, size_t *)\n+\n+/* tbmintrin.h */\n+test_1_i1 (__bextri_u32, unsigned int, unsigned int, 1)\n+test_1 (__blcfill_u32, unsigned int, unsigned int)\n+test_1 (__blci_u32, unsigned int, unsigned int)\n+test_1 (__blcic_u32, unsigned int, unsigned int)\n+test_1 (__blcmsk_u32, unsigned int, unsigned int)\n+test_1 (__blcs_u32, unsigned int, unsigned int)\n+test_1 (__blsfill_u32, unsigned int, unsigned int)\n+test_1 (__blsic_u32, unsigned int, unsigned int)\n+test_1 (__t1mskc_u32, unsigned int, unsigned int)\n+test_1 (__tzmsk_u32, unsigned int, unsigned int)\n+\n+/* tsxldtrkintrin.h */\n+test_0 (_xsusldtrk, void)\n+test_0 (_xresldtrk, void)\n+\n+/* x86gprintrin.h */\n+test_1 (_ptwrite32, void, unsigned int)\n+test_1 (_rdrand16_step, int, unsigned short *)\n+test_1 (_rdrand32_step, int, unsigned int *)\n+test_0 (_wbinvd, void)\n+\n+/* xtestintrin.h */\n+test_0 (_xtest, int)\n+\n+/* xsaveintrin.h */\n+test_2 (_xsave, void, void *, long long)\n+test_2 (_xrstor, void, void *, long long)\n+test_2 (_xsetbv, void, unsigned int, long long)\n+test_1 (_xgetbv, long long, unsigned int)\n+\n+/* xsavecintrin.h */\n+test_2 (_xsavec, void, void *, long long)\n+\n+/* xsaveoptintrin.h */\n+test_2 (_xsaveopt, void, void *, long long)\n+\n+/* xsavesintrin.h */\n+test_2 (_xsaves, void, void *, long long)\n+test_2 (_xrstors, void, void *, long long)\n+\n+/* wbnoinvdintrin.h */\n+test_0 (_wbnoinvd, void)\n+\n+#ifdef __x86_64__\n+/* adxintrin.h */\n+test_4 (_subborrow_u64, unsigned char, unsigned char,\n+\tunsigned long long, unsigned long long,\n+\tunsigned long long *)\n+test_4 (_addcarry_u64, unsigned char, unsigned char,\n+\tunsigned long long, unsigned long long,\n+\tunsigned long long *)\n+test_4 (_addcarryx_u64, unsigned char, unsigned char,\n+\tunsigned long long, unsigned long long,\n+\tunsigned long long *)\n+\n+/* bmiintrin.h */\n+test_2 (__andn_u64, unsigned long long, unsigned long long,\n+\tunsigned long long)\n+test_2 (__bextr_u64, unsigned long long, unsigned long long,\n+\tunsigned long long)\n+test_3 (_bextr_u64, unsigned long long, unsigned long long,\n+\tunsigned long long, unsigned long long)\n+test_1 (__blsi_u64, unsigned long long, unsigned long long)\n+test_1 (_blsi_u64, unsigned long long, unsigned long long)\n+test_1 (__blsmsk_u64, unsigned long long, unsigned long long)\n+test_1 (_blsmsk_u64, unsigned long long, unsigned long long)\n+test_1 (__blsr_u64, unsigned long long, unsigned long long)\n+test_1 (_blsr_u64, unsigned long long, unsigned long long)\n+test_1 (__tzcnt_u64, unsigned long long, unsigned long long)\n+test_1 (_tzcnt_u64, unsigned long long, unsigned long long)\n+\n+/* bmi2intrin.h */\n+test_2 (_bzhi_u64, unsigned long long, unsigned long long,\n+\tunsigned long long)\n+test_2 (_pdep_u64, unsigned long long, unsigned long long,\n+\tunsigned long long)\n+test_2 (_pext_u64, unsigned long long, unsigned long long,\n+\tunsigned long long)\n+test_3 (_mulx_u64, unsigned long long, unsigned long long,\n+\tunsigned long long, unsigned long long *)\n+\n+/* cetintrin.h */\n+test_0 (_get_ssp, unsigned long long)\n+test_2 (_wrssq, void, unsigned long long, void *)\n+test_2 (_wrussq, void, unsigned long long, void *)\n+\n+/* fxsrintrin.h */\n+test_1 (_fxsave64, void, void *)\n+test_1 (_fxrstor64, void, void *)\n+\n+/* ia32intrin.h  */\n+test_1 (__bsfq, int, long long)\n+test_1 (__bsrq, int, long long)\n+test_1 (__bswapq, long long, long long)\n+test_2 (__crc32q, unsigned long long, unsigned long long,\n+\tunsigned long long)\n+test_1 (__popcntq, long long, unsigned long long)\n+test_2 (__rolq, unsigned long long, unsigned long long, int)\n+test_2 (__rorq, unsigned long long, unsigned long long, int)\n+test_0 (__readeflags, unsigned long long)\n+test_1 (__writeeflags, void, unsigned int)\n+\n+/* lzcntintrin.h */\n+test_1 (__lzcnt64, unsigned long long, unsigned long long)\n+test_1 (_lzcnt_u64, unsigned long long, unsigned long long)\n+\n+/* lwpintrin.h */\n+test_2_i1 (__lwpval64, void, unsigned long long, unsigned int, 1)\n+test_2_i1 (__lwpins64, unsigned char, unsigned long long,\n+\t   unsigned int, 1)\n+\n+/* movdirintrin.h */\n+test_2 (_directstoreu_u64, void, void *, unsigned long long)\n+\n+/* popcntintrin.h */\n+test_1 (_mm_popcnt_u64, long long, unsigned long long)\n+\n+/* rdseedintrin.h */\n+test_1 (_rdseed64_step, int, unsigned long long *)\n+\n+/* tbmintrin.h */\n+test_1_i1 (__bextri_u64, unsigned long long, unsigned long long, 1)\n+test_1 (__blcfill_u64, unsigned long long, unsigned long long)\n+test_1 (__blci_u64, unsigned long long, unsigned long long)\n+test_1 (__blcic_u64, unsigned long long, unsigned long long)\n+test_1 (__blcmsk_u64, unsigned long long, unsigned long long)\n+test_1 (__blcs_u64, unsigned long long, unsigned long long)\n+test_1 (__blsfill_u64, unsigned long long, unsigned long long)\n+test_1 (__blsic_u64, unsigned long long, unsigned long long)\n+test_1 (__t1mskc_u64, unsigned long long, unsigned long long)\n+test_1 (__tzmsk_u64, unsigned long long, unsigned long long)\n+\n+/* uintrintrin.h */\n+test_0 (_clui, void)\n+test_1 (_senduipi, void, unsigned long long)\n+test_0 (_stui, void)\n+test_0 (_testui, unsigned char)\n+\n+/* x86gprintrin.h */\n+test_1 (_ptwrite64, void, unsigned long long)\n+test_0 (_readfsbase_u32, unsigned int)\n+test_0 (_readfsbase_u64, unsigned long long)\n+test_0 (_readgsbase_u32, unsigned int)\n+test_0 (_readgsbase_u64, unsigned long long)\n+test_1 (_rdrand64_step, int, unsigned long long *)\n+test_1 (_writefsbase_u32, void, unsigned int)\n+test_1 (_writefsbase_u64, void, unsigned long long)\n+test_1 (_writegsbase_u32, void, unsigned int)\n+test_1 (_writegsbase_u64, void, unsigned long long)\n+\n+/* xsaveintrin.h */\n+test_2 (_xsave64, void, void *, long long)\n+test_2 (_xrstor64, void, void *, long long)\n+\n+/* xsavecintrin.h */\n+test_2 (_xsavec64, void, void *, long long)\n+\n+/* xsaveoptintrin.h */\n+test_2 (_xsaveopt64, void, void *, long long)\n+\n+/* xsavesintrin.h */\n+test_2 (_xsaves64, void, void *, long long)\n+test_2 (_xrstors64, void, void *, long long)\n+\n+/* waitpkgintrin.h */\n+test_1 (_umonitor, void, void *)\n+test_2 (_umwait, unsigned char, unsigned int, unsigned long long)\n+test_2 (_tpause, unsigned char, unsigned int, unsigned long long)\n+\n+#else /* !__x86_64__ */\n+/* bmi2intrin.h */\n+test_3 (_mulx_u32, unsigned int, unsigned int, unsigned int,\n+\tunsigned int *)\n+\n+/* cetintrin.h */\n+test_0 (_get_ssp, unsigned int)\n+#endif /* __x86_64__ */\n+\n+#endif"}, {"sha": "9e40e5ef428dce866593a1108807c71b41b42da3", "filename": "gcc/testsuite/gcc.target/i386/pr99744-5.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72264a639729a5dcc21dbee304717ce22b338bfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72264a639729a5dcc21dbee304717ce22b338bfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-5.c?ref=72264a639729a5dcc21dbee304717ce22b338bfd", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mmwait\" } */\n+\n+/* Test calling MWAIT intrinsics from functions with general-regs-only\n+   target attribute.  */\n+\n+#include <x86gprintrin.h>\n+\n+#define _CONCAT(x,y) x ## y\n+\n+#define test_2(func, type, op1_type, op2_type)\t\t\t\t\\\n+  __attribute__ ((target(\"general-regs-only\")))\t\t\t\t\\\n+  type _CONCAT(do_,func) (op1_type A, op2_type B)\t\t\t\\\n+  { return func (A, B); }\n+\n+#define test_3(func, type, op1_type, op2_type, op3_type)\t\t\\\n+  __attribute__ ((target(\"general-regs-only\")))\t\t\t\t\\\n+  type _CONCAT(do_,func) (op1_type A, op2_type B, op3_type C)\t\t\\\n+  { return func (A, B, C); }\n+\n+#ifndef __iamcu__\n+/* mwaitintrin.h */\n+test_3 (_mm_monitor, void, void const *, unsigned int, unsigned int)\n+test_2 (_mm_mwait, void, unsigned int, unsigned int)\n+#endif"}, {"sha": "4025918a9c93afc12aa1b8c696dc16a4940b5943", "filename": "gcc/testsuite/gcc.target/i386/pr99744-6.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72264a639729a5dcc21dbee304717ce22b338bfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72264a639729a5dcc21dbee304717ce22b338bfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-6.c?ref=72264a639729a5dcc21dbee304717ce22b338bfd", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+#include <x86intrin.h>\n+\n+extern unsigned long long int curr_deadline;\n+extern void bar (void);\n+\n+void\n+foo1 (void)\n+{\n+  if (__rdtsc () < curr_deadline)\n+    return; \n+  bar ();\n+}\n+\n+void\n+foo2 (unsigned int *p)\n+{\n+  if (__rdtscp (p) < curr_deadline)\n+    return; \n+  bar ();\n+}"}, {"sha": "30b7ca05966599a9fcfb7771fdb6f9a3d05125f5", "filename": "gcc/testsuite/gcc.target/i386/pr99744-7.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72264a639729a5dcc21dbee304717ce22b338bfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72264a639729a5dcc21dbee304717ce22b338bfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-7.c?ref=72264a639729a5dcc21dbee304717ce22b338bfd", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mno-avx -Wno-psabi\" } */\n+\n+#include <x86intrin.h>\n+\n+void\n+foo (__m256 *x)\n+{\n+  x[0] = _mm256_sub_ps (x[1], x[2]);\n+}\n+\n+/* { dg-error \"target specific option mismatch\" \"\" { target *-*-* } 0 } */"}, {"sha": "115183eede6ebe5b237ffaf2afe8c0d4f498f6d8", "filename": "gcc/testsuite/gcc.target/i386/pr99744-8.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72264a639729a5dcc21dbee304717ce22b338bfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72264a639729a5dcc21dbee304717ce22b338bfd/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr99744-8.c?ref=72264a639729a5dcc21dbee304717ce22b338bfd", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -Wno-psabi\" } */\n+\n+#include <x86intrin.h>\n+\n+__attribute__((target (\"no-avx\")))\n+void\n+foo (__m256 *x)\n+{\n+  x[0] = _mm256_sub_ps (x[1], x[2]);\n+}\n+\n+/* { dg-error \"target specific option mismatch\" \"\" { target *-*-* } 0 } */"}]}