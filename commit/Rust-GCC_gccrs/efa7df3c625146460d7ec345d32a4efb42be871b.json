{"sha": "efa7df3c625146460d7ec345d32a4efb42be871b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZhN2RmM2M2MjUxNDY0NjBkN2VjMzQ1ZDMyYTRlZmI0MmJlODcxYg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-01-08T19:15:53Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-01-08T19:15:53Z"}, "message": "re PR target/64338 (ICE in swap_condition, at jump.c:628)\n\n\tPR target/64338\n\t* config/i386/i386.c (ix86_expand_int_movcc): Don't reverse\n\tcompare_code when it is unconditionally overwritten afterwards.\n\tUse ix86_reverse_condition instead of reverse_condition.  Don't\n\tchange code if *reverse_condition* returned UNKNOWN and don't\n\tswap ct/cf and negate diff in that case.\n\n\t* g++.dg/opt/pr64338.C: New test.\n\nFrom-SVN: r219356", "tree": {"sha": "bd442b28e990d27a0b5a6ca8e0848994e3eff3f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd442b28e990d27a0b5a6ca8e0848994e3eff3f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efa7df3c625146460d7ec345d32a4efb42be871b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa7df3c625146460d7ec345d32a4efb42be871b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efa7df3c625146460d7ec345d32a4efb42be871b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa7df3c625146460d7ec345d32a4efb42be871b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de35aa66b07a62a1c27f4b104577848fa8f7ec17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de35aa66b07a62a1c27f4b104577848fa8f7ec17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de35aa66b07a62a1c27f4b104577848fa8f7ec17"}], "stats": {"total": 74, "additions": 61, "deletions": 13}, "files": [{"sha": "ff6abddfe508cd0479e9730d434ce23543101e2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa7df3c625146460d7ec345d32a4efb42be871b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa7df3c625146460d7ec345d32a4efb42be871b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efa7df3c625146460d7ec345d32a4efb42be871b", "patch": "@@ -1,3 +1,12 @@\n+2015-01-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/64338\n+\t* config/i386/i386.c (ix86_expand_int_movcc): Don't reverse\n+\tcompare_code when it is unconditionally overwritten afterwards.\n+\tUse ix86_reverse_condition instead of reverse_condition.  Don't\n+\tchange code if *reverse_condition* returned UNKNOWN and don't\n+\tswap ct/cf and negate diff in that case.\n+\n 2015-01-08  Mike Stump  <mikestump@comcast.net>\n \n \t* tsan.c (pass_tsan::gate): Add no_sanitize_thread support."}, {"sha": "340348eafb07396482eeb8afc24afaef4c14ad46", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa7df3c625146460d7ec345d32a4efb42be871b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa7df3c625146460d7ec345d32a4efb42be871b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=efa7df3c625146460d7ec345d32a4efb42be871b", "patch": "@@ -20830,9 +20830,7 @@ ix86_expand_int_movcc (rtx operands[])\n       if (diff < 0)\n \t{\n \t  machine_mode cmp_mode = GET_MODE (op0);\n-\n-\t  std::swap (ct, cf);\n-\t  diff = -diff;\n+\t  enum rtx_code new_code;\n \n \t  if (SCALAR_FLOAT_MODE_P (cmp_mode))\n \t    {\n@@ -20842,13 +20840,15 @@ ix86_expand_int_movcc (rtx operands[])\n \t\t is not valid in general (we may convert non-trapping condition\n \t\t to trapping one), however on i386 we currently emit all\n \t\t comparisons unordered.  */\n-\t      compare_code = reverse_condition_maybe_unordered (compare_code);\n-\t      code = reverse_condition_maybe_unordered (code);\n+\t      new_code = reverse_condition_maybe_unordered (code);\n \t    }\n \t  else\n+\t    new_code = ix86_reverse_condition (code, cmp_mode);\n+\t  if (new_code != UNKNOWN)\n \t    {\n-\t      compare_code = reverse_condition (compare_code);\n-\t      code = reverse_condition (code);\n+\t      std::swap (ct, cf);\n+\t      diff = -diff;\n+\t      code = new_code;\n \t    }\n \t}\n \n@@ -20986,9 +20986,7 @@ ix86_expand_int_movcc (rtx operands[])\n \t  if (cf == 0)\n \t    {\n \t      machine_mode cmp_mode = GET_MODE (op0);\n-\n-\t      cf = ct;\n-\t      ct = 0;\n+\t      enum rtx_code new_code;\n \n \t      if (SCALAR_FLOAT_MODE_P (cmp_mode))\n \t\t{\n@@ -20998,14 +20996,21 @@ ix86_expand_int_movcc (rtx operands[])\n \t\t     that is not valid in general (we may convert non-trapping\n \t\t     condition to trapping one), however on i386 we currently\n \t\t     emit all comparisons unordered.  */\n-\t\t  code = reverse_condition_maybe_unordered (code);\n+\t\t  new_code = reverse_condition_maybe_unordered (code);\n \t\t}\n \t      else\n \t\t{\n-\t\t  code = reverse_condition (code);\n-\t\t  if (compare_code != UNKNOWN)\n+\t\t  new_code = ix86_reverse_condition (code, cmp_mode);\n+\t\t  if (compare_code != UNKNOWN && new_code != UNKNOWN)\n \t\t    compare_code = reverse_condition (compare_code);\n \t\t}\n+\n+\t      if (new_code != UNKNOWN)\n+\t\t{\n+\t\t  cf = ct;\n+\t\t  ct = 0;\n+\t\t  code = new_code;\n+\t\t}\n \t    }\n \n \t  if (compare_code != UNKNOWN)"}, {"sha": "4c67aa983febdb318403ca3bacfdb6e12fa514d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa7df3c625146460d7ec345d32a4efb42be871b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa7df3c625146460d7ec345d32a4efb42be871b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=efa7df3c625146460d7ec345d32a4efb42be871b", "patch": "@@ -1,3 +1,8 @@\n+2015-01-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/64338\n+\t* g++.dg/opt/pr64338.C: New test.\n+\n 2015-01-08  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/coarray/codimension_2b.f90: New file."}, {"sha": "699d38ccea145cf9e01806c6963f3a3ec46b346c", "filename": "gcc/testsuite/g++.dg/opt/pr64338.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa7df3c625146460d7ec345d32a4efb42be871b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr64338.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa7df3c625146460d7ec345d32a4efb42be871b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr64338.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr64338.C?ref=efa7df3c625146460d7ec345d32a4efb42be871b", "patch": "@@ -0,0 +1,29 @@\n+// PR target/64338\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+// { dg-additional-options \"-mtune=nehalem -march=i586\" { target { { i?86-*-* x86_64-*-* } && ia32 } } }\n+\n+enum O {};\n+struct A { A (); };\n+struct B { int fn1 (); };\n+struct C { struct D; D *fn2 (); void fn3 (); int fn4 (); };\n+struct F { void fn5 (const int & = 0); };\n+struct G { F *fn6 (); };\n+struct H { int h; };\n+struct C::D { friend class C; G *fn7 (); };\n+O a;\n+\n+void\n+C::fn3 ()\n+{\n+  int b = a;\n+  H c;\n+  if (b)\n+    fn2 ()->fn7 ()->fn6 ()->fn5 ();\n+  double d;\n+  if (fn4 ())\n+    d = c.h > 0;\n+  A e (b ? A () : A ());\n+  B f;\n+  f.fn1 () && d && fn2 ();\n+}"}]}