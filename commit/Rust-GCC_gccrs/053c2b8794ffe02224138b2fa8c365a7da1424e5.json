{"sha": "053c2b8794ffe02224138b2fa8c365a7da1424e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUzYzJiODc5NGZmZTAyMjI0MTM4YjJmYThjMzY1YTdkYTE0MjRlNQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2012-07-16T17:16:29Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2012-07-16T17:16:29Z"}, "message": "bswap-1.c: New testcase.\n\n2012-07-16  Andrew Pinski  <apinski@cavium.com>\n\n        * gcc.c-torture/execute/bswap-1.c: New testcase.\n        * gcc.c-torture/compile/unalign-1.c: New testcase.\n        * gcc.c-torture/compile/20120524-1.c: New testcase.\n        * gcc.c-torture/compile/20101216-1.c: New testcase.\n\nFrom-SVN: r189543", "tree": {"sha": "977f5c8ab489e7dcd1a5c378a56e4d9ea0e90159", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/977f5c8ab489e7dcd1a5c378a56e4d9ea0e90159"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/053c2b8794ffe02224138b2fa8c365a7da1424e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053c2b8794ffe02224138b2fa8c365a7da1424e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/053c2b8794ffe02224138b2fa8c365a7da1424e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/053c2b8794ffe02224138b2fa8c365a7da1424e5/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4cca007eaf3f87b785ee8bb28dcf7b2bbe4a5eaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cca007eaf3f87b785ee8bb28dcf7b2bbe4a5eaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cca007eaf3f87b785ee8bb28dcf7b2bbe4a5eaf"}], "stats": {"total": 109, "additions": 109, "deletions": 0}, "files": [{"sha": "12cf1cab2f16d45f99507843e3a2152f4740e1e7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053c2b8794ffe02224138b2fa8c365a7da1424e5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053c2b8794ffe02224138b2fa8c365a7da1424e5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=053c2b8794ffe02224138b2fa8c365a7da1424e5", "patch": "@@ -1,3 +1,10 @@\n+2012-07-16  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* gcc.c-torture/execute/bswap-1.c: New testcase.\n+\t* gcc.c-torture/compile/unalign-1.c: New testcase.\n+\t* gcc.c-torture/compile/20120524-1.c: New testcase.\n+\t* gcc.c-torture/compile/20101216-1.c: New testcase.\n+\n 2012-07-16  Dehao Chen  <dehao@google.com>\n \n \tRevert"}, {"sha": "0c58898c13f1987cfaebc7b6ae8fa95bba677529", "filename": "gcc/testsuite/gcc.c-torture/compile/20101216-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053c2b8794ffe02224138b2fa8c365a7da1424e5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20101216-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053c2b8794ffe02224138b2fa8c365a7da1424e5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20101216-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20101216-1.c?ref=053c2b8794ffe02224138b2fa8c365a7da1424e5", "patch": "@@ -0,0 +1,32 @@\n+typedef signed int __int32_t;\n+typedef unsigned int __uint32_t;\n+typedef union\n+{\n+  double value;\n+  struct\n+  {\n+    __uint32_t msw;\n+    __uint32_t lsw;\n+  } parts;\n+} ieee_double_shape_type;\n+two52= 4.50359962737049600000e+15,\n+w6 = -1.63092934096575273989e-03;\n+double sin_pi(double x)\n+{\n+ double y,z;\n+ __int32_t n,ix;\n+ieee_double_shape_type gh_u;\n+ gh_u.value = (x); \n+(ix) = gh_u.parts.msw;\n+                if(ix<0x43300000)\n+ z = y+two52;\n+ ieee_double_shape_type gl_u;\n+ gl_u.value = (z);\n+ (n) = gl_u.parts.lsw;\n+  n &= 1;\n+ switch (n)\n+ {\n+     case 0:\n+__kernel_sin();\n+     }\n+}"}, {"sha": "021756b052649183f424a7d112a8b8acd4230743", "filename": "gcc/testsuite/gcc.c-torture/compile/20120524-1.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053c2b8794ffe02224138b2fa8c365a7da1424e5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120524-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053c2b8794ffe02224138b2fa8c365a7da1424e5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120524-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20120524-1.c?ref=053c2b8794ffe02224138b2fa8c365a7da1424e5", "patch": "@@ -0,0 +1,4 @@\n+  char CJPAT_Packet[1508] = {};\n+void build_packet(int port, char *packet) {\n+            memcpy(packet, CJPAT_Packet, sizeof(CJPAT_Packet)); \n+}"}, {"sha": "350111fdff4112ebe4efae15cfde634353d4c02d", "filename": "gcc/testsuite/gcc.c-torture/compile/unalign-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053c2b8794ffe02224138b2fa8c365a7da1424e5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Funalign-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053c2b8794ffe02224138b2fa8c365a7da1424e5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Funalign-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Funalign-1.c?ref=053c2b8794ffe02224138b2fa8c365a7da1424e5", "patch": "@@ -0,0 +1,15 @@\n+typedef struct __attribute__ ((__packed__))\n+{\n+    char valueField[2];\n+} ptp_tlv_t;\n+typedef struct __attribute__ ((__packed__))\n+{\n+    char stepsRemoved;\n+    ptp_tlv_t tlv[1];\n+} ptp_message_announce_t;\n+int ptplib_send_announce(int sequenceId, int i)\n+{\n+    ptp_message_announce_t tx_packet;\n+    ((long long *)tx_packet.tlv[0].valueField)[sequenceId] = i;\n+    f(&tx_packet);\n+}"}, {"sha": "ff80c0559d43f59e053dfa4d732ea929393ec902", "filename": "gcc/testsuite/gcc.c-torture/execute/bswap-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/053c2b8794ffe02224138b2fa8c365a7da1424e5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbswap-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/053c2b8794ffe02224138b2fa8c365a7da1424e5/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbswap-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbswap-1.c?ref=053c2b8794ffe02224138b2fa8c365a7da1424e5", "patch": "@@ -0,0 +1,51 @@\n+/* Test __builtin_bswap64 . */\n+\n+unsigned long long g(unsigned long long a) __attribute__((noinline));\n+unsigned long long g(unsigned long long a)\n+{\n+  return __builtin_bswap64(a);\n+}\n+\n+\n+unsigned long long f(unsigned long long c)\n+{\n+  union {\n+    unsigned long long a;\n+    unsigned char b[8];\n+  } a, b;\n+  a.a = c;\n+  b.b[0] = a.b[7];\n+  b.b[1] = a.b[6];\n+  b.b[2] = a.b[5];\n+  b.b[3] = a.b[4];\n+  b.b[4] = a.b[3];\n+  b.b[5] = a.b[2];\n+  b.b[6] = a.b[1];\n+  b.b[7] = a.b[0];\n+  return b.a;\n+}\n+\n+int main(void)\n+{\n+  unsigned long long i;\n+  /* The rest of the testcase assumes 8 byte long long. */\n+  if (sizeof(i) != sizeof(char)*8)\n+    return 0;\n+  if (f(0x12) != g(0x12))\n+    __builtin_abort();\n+  if (f(0x1234) != g(0x1234))\n+    __builtin_abort();\n+  if (f(0x123456) != g(0x123456))\n+    __builtin_abort();\n+  if (f(0x12345678ull) != g(0x12345678ull))\n+    __builtin_abort();\n+  if (f(0x1234567890ull) != g(0x1234567890ull))\n+    __builtin_abort();\n+  if (f(0x123456789012ull) != g(0x123456789012ull))\n+    __builtin_abort();\n+  if (f(0x12345678901234ull) != g(0x12345678901234ull))\n+    __builtin_abort();\n+  if (f(0x1234567890123456ull) != g(0x1234567890123456ull))\n+    __builtin_abort();\n+  return 0;\n+}"}]}