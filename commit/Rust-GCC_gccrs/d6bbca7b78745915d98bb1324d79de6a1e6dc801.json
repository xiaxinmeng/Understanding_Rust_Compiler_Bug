{"sha": "d6bbca7b78745915d98bb1324d79de6a1e6dc801", "node_id": "C_kwDOANBUbNoAKGQ2YmJjYTdiNzg3NDU5MTVkOThiYjEzMjRkNzlkZTZhMWU2ZGM4MDE", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-11-22T16:54:34Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-11-22T16:57:35Z"}, "message": "gcn: Add __builtin_gcn_{get_stack_limit,first_call_this_thread_p}\n\nThe new builtins have been added for newlib to reduce dependency on\ncompiler-internal implementation choices of GCC in newlibs' getreent.c.\n\ngcc/ChangeLog:\n\n\t* config/gcn/gcn-builtins.def (FIRST_CALL_THIS_THREAD_P,\n\tGET_STACK_LIMIT): Add new builtins.\n\t* config/gcn/gcn.cc (gcn_expand_builtin_1): Expand them.\n\t* config/gcn/gcn.md (prologue_use): Add \"register_operand\" as\n\targ to match_operand.\n\t(prologue_use_di): New; DI insn_and_split variant of the former.\n\nCo-Authored-By: Andrew Stubbs <ams@codesourcery.com>", "tree": {"sha": "8cd4b4359517e7b6df2e5f2c56da7a11a29a9cc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cd4b4359517e7b6df2e5f2c56da7a11a29a9cc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6bbca7b78745915d98bb1324d79de6a1e6dc801", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6bbca7b78745915d98bb1324d79de6a1e6dc801", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6bbca7b78745915d98bb1324d79de6a1e6dc801", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6bbca7b78745915d98bb1324d79de6a1e6dc801/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac5054144bd2248e948842937448eb5f4ce36bfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac5054144bd2248e948842937448eb5f4ce36bfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac5054144bd2248e948842937448eb5f4ce36bfd"}], "stats": {"total": 89, "additions": 87, "deletions": 2}, "files": [{"sha": "f1cf30bbc94dc6d40ad009bf7ba12764a1e3d72e", "filename": "gcc/config/gcn/gcn-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6bbca7b78745915d98bb1324d79de6a1e6dc801/gcc%2Fconfig%2Fgcn%2Fgcn-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6bbca7b78745915d98bb1324d79de6a1e6dc801/gcc%2Fconfig%2Fgcn%2Fgcn-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn-builtins.def?ref=d6bbca7b78745915d98bb1324d79de6a1e6dc801", "patch": "@@ -160,8 +160,12 @@ DEF_BUILTIN (ACC_BARRIER, -1, \"acc_barrier\", B_INSN, _A1 (GCN_BTI_VOID),\n \n /* Kernel inputs.  */\n \n+DEF_BUILTIN (FIRST_CALL_THIS_THREAD_P, -1, \"first_call_this_thread_p\", B_INSN,\n+\t     _A1 (GCN_BTI_BOOL), gcn_expand_builtin_1)\n DEF_BUILTIN (KERNARG_PTR, -1, \"kernarg_ptr\", B_INSN, _A1 (GCN_BTI_VOIDPTR),\n \t     gcn_expand_builtin_1)\n+DEF_BUILTIN (GET_STACK_LIMIT, -1, \"get_stack_limit\", B_INSN,\n+\t     _A1 (GCN_BTI_VOIDPTR), gcn_expand_builtin_1)\n \n #undef _A1\n #undef _A2"}, {"sha": "ea9631e88230a3ecb1768b24cae93b98bf87f45f", "filename": "gcc/config/gcn/gcn.cc", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6bbca7b78745915d98bb1324d79de6a1e6dc801/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6bbca7b78745915d98bb1324d79de6a1e6dc801/gcc%2Fconfig%2Fgcn%2Fgcn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.cc?ref=d6bbca7b78745915d98bb1324d79de6a1e6dc801", "patch": "@@ -4493,6 +4493,45 @@ gcn_expand_builtin_1 (tree exp, rtx target, rtx /*subtarget */ ,\n       emit_insn (gen_gcn_wavefront_barrier ());\n       return target;\n \n+    case GCN_BUILTIN_GET_STACK_LIMIT:\n+      {\n+\t/* stackbase = (stack_segment_decr & 0x0000ffffffffffff)\n+\t\t\t+ stack_wave_offset);\n+\t   seg_size = dispatch_ptr->private_segment_size;\n+\t   stacklimit = stackbase + seg_size*64;\n+\t   with segsize = *(uint32_t *) ((char *) dispatch_ptr\n+\t\t\t\t       + 6*sizeof(int16_t) + 3*sizeof(int32_t));\n+\t   cf. struct hsa_kernel_dispatch_packet_s in the HSA doc.  */\n+\trtx ptr;\n+\tif (cfun->machine->args.reg[DISPATCH_PTR_ARG] >= 0\n+\t    && cfun->machine->args.reg[PRIVATE_SEGMENT_BUFFER_ARG] >= 0)\n+\t  {\n+\t    rtx size_rtx = gen_rtx_REG (DImode,\n+\t\t\t     cfun->machine->args.reg[DISPATCH_PTR_ARG]);\n+\t    size_rtx = gen_rtx_MEM (SImode,\n+\t\t\t\t    gen_rtx_PLUS (DImode, size_rtx,\n+\t\t\t\t\t\t  GEN_INT (6*2 + 3*4)));\n+\t    size_rtx = gen_rtx_MULT (SImode, size_rtx, GEN_INT (64));\n+\n+\t    ptr = gen_rtx_REG (DImode,\n+\t\t    cfun->machine->args.reg[PRIVATE_SEGMENT_BUFFER_ARG]);\n+\t    ptr = gen_rtx_AND (DImode, ptr, GEN_INT (0x0000ffffffffffff));\n+\t    ptr = gen_rtx_PLUS (DImode, ptr, size_rtx);\n+\t    if (cfun->machine->args.reg[PRIVATE_SEGMENT_WAVE_OFFSET_ARG] >= 0)\n+\t      {\n+\t\trtx off;\n+\t\toff = gen_rtx_REG (SImode,\n+\t\t      cfun->machine->args.reg[PRIVATE_SEGMENT_WAVE_OFFSET_ARG]);\n+\t\tptr = gen_rtx_PLUS (DImode, ptr, off);\n+\t      }\n+\t  }\n+\telse\n+\t  {\n+\t    ptr = gen_reg_rtx (DImode);\n+\t    emit_move_insn (ptr, const0_rtx);\n+\t  }\n+\treturn ptr;\n+      }\n     case GCN_BUILTIN_KERNARG_PTR:\n       {\n \trtx ptr;\n@@ -4506,7 +4545,36 @@ gcn_expand_builtin_1 (tree exp, rtx target, rtx /*subtarget */ ,\n \t  }\n \treturn ptr;\n       }\n-\n+    case GCN_BUILTIN_FIRST_CALL_THIS_THREAD_P:\n+      {\n+\t/* Stash a marker in the unused upper 16 bits of s[0:1] to indicate\n+\t   whether it was the first call.  */\n+\trtx result = gen_reg_rtx (BImode);\n+\temit_move_insn (result, const0_rtx);\n+\tif (cfun->machine->args.reg[PRIVATE_SEGMENT_BUFFER_ARG] >= 0)\n+\t  {\n+\t    rtx not_first = gen_label_rtx ();\n+\t    rtx reg = gen_rtx_REG (DImode,\n+\t\t\tcfun->machine->args.reg[PRIVATE_SEGMENT_BUFFER_ARG]);\n+\t    rtx cmp = force_reg (DImode,\n+\t\t\t\t gen_rtx_LSHIFTRT (DImode, reg, GEN_INT (48)));\n+\t    emit_insn (gen_cstoresi4 (result, gen_rtx_NE (BImode, cmp,\n+\t\t\t\t\t\t\t  GEN_INT(12345)),\n+\t\t\t\t      cmp, GEN_INT(12345)));\n+\t    emit_jump_insn (gen_cjump (not_first, gen_rtx_EQ (BImode, result,\n+\t\t\t\t\t\t\t      const0_rtx),\n+\t\t\t\t       result));\n+\t    emit_move_insn (reg,\n+\t      force_reg (DImode,\n+\t\tgen_rtx_IOR (DImode,\n+\t\t\t     gen_rtx_AND (DImode, reg,\n+\t\t\t\t\t  GEN_INT (0x0000ffffffffffffL)),\n+\t\t\t     GEN_INT (12345L << 48))));\n+\t    emit_insn (gen_prologue_use (reg));\n+\t    emit_label (not_first);\n+\t  }\n+\treturn result;\n+      }\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "a8b9c28d115b467c3ea0cd7fbf20a97257824246", "filename": "gcc/config/gcn/gcn.md", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6bbca7b78745915d98bb1324d79de6a1e6dc801/gcc%2Fconfig%2Fgcn%2Fgcn.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6bbca7b78745915d98bb1324d79de6a1e6dc801/gcc%2Fconfig%2Fgcn%2Fgcn.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fgcn%2Fgcn.md?ref=d6bbca7b78745915d98bb1324d79de6a1e6dc801", "patch": "@@ -692,11 +692,24 @@\n ;; {{{ Prologue/Epilogue\n \n (define_insn \"prologue_use\"\n-  [(unspec_volatile [(match_operand 0)] UNSPECV_PROLOGUE_USE)]\n+  [(unspec_volatile [(match_operand 0 \"register_operand\")] UNSPECV_PROLOGUE_USE)]\n   \"\"\n   \"\"\n   [(set_attr \"length\" \"0\")])\n \n+(define_insn_and_split \"prologue_use_di\"\n+  [(unspec_volatile [(match_operand:DI 0 \"register_operand\")] UNSPECV_PROLOGUE_USE)]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(unspec_volatile [(match_dup 0)] UNSPECV_PROLOGUE_USE)\n+   (unspec_volatile [(match_dup 1)] UNSPECV_PROLOGUE_USE)]\n+  {\n+    operands[1] = gcn_operand_part (DImode, operands[0], 1);\n+    operands[0] = gcn_operand_part (DImode, operands[0], 0);\n+  }\n+  [(set_attr \"length\" \"0\")])\n+\n (define_expand \"prologue\"\n   [(const_int 0)]\n   \"\""}]}