{"sha": "ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWRlMWEzODcyOTEzZGY1OWYzYTFmNDI5OWVjNWY2Yzc3MDZkM2I3Yg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-07-01T08:52:33Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-07-01T08:52:33Z"}, "message": "re PR c/1027 (slightly misleading printf format warning)\n\n\tPR c/1027\n\t* c-lang.c (c_initialize_diagnostics): Move from here ...\n\t* c-objc-common.c: ... to here.  Include \"c-pretty-print.h\".\n\t(c_tree_printer): Use pretty-printer to format %T.\n\t* c-pretty-print.c (pp_c_specifier_qualifier_list): Include space\n\tbefore '*' if not C++.\n\t(pp_c_direct_abstract_declarator): Don't try to print array upper\n\tbound for flexible array members.\n\t* c-tree.h: Include \"diagnostic.h\".\n\t(c_initialize_diagnostics): Declare.\n\t* objc/objc-lang.c (LANG_HOOKS_INITIALIZE_DIAGNOSTICS): Define.\n\t* c-format.c (format_type_warning): New function.  Improve\n\tdiagnostics for incorrect format argument types.\n\t(check_format_types): Use it.  Add two parameters.  Use the\n\tTYPE_MAIN_VARIANT of wanted_type.\n\t(check_format_info_main): Pass new parameters to\n\tcheck_format_types.\n\t(struct format_wanted_type): Update comment.\n\ntestsuite:\n\t* gcc.dg/Wswitch-enum.c, gcc.dg/Wswitch.c,\n\tgcc.dg/format/branch-1.c, gcc.dg/format/diag-1.c,\n\tgcc.dg/format/multattr-3.c, gcc.dg/format/xopen-1.c: Update\n\texpected warning text.\n\t* gcc.dg/format/diag-2.c: New test.\n\nFrom-SVN: r83965", "tree": {"sha": "5e14fad8701c2b2a0d71a2e08df216891b59d315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e14fad8701c2b2a0d71a2e08df216891b59d315"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d59c7b4bdca296330783083e285ec0fab406df28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d59c7b4bdca296330783083e285ec0fab406df28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d59c7b4bdca296330783083e285ec0fab406df28"}], "stats": {"total": 302, "additions": 190, "deletions": 112}, "files": [{"sha": "9ddb7a73368dd05dea7589fd0cb8fb7ed942e939", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "patch": "@@ -1,3 +1,24 @@\n+2004-07-01  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/1027\n+\t* c-lang.c (c_initialize_diagnostics): Move from here ...\n+\t* c-objc-common.c: ... to here.  Include \"c-pretty-print.h\".\n+\t(c_tree_printer): Use pretty-printer to format %T.\n+\t* c-pretty-print.c (pp_c_specifier_qualifier_list): Include space\n+\tbefore '*' if not C++.\n+\t(pp_c_direct_abstract_declarator): Don't try to print array upper\n+\tbound for flexible array members.\n+\t* c-tree.h: Include \"diagnostic.h\".\n+\t(c_initialize_diagnostics): Declare.\n+\t* objc/objc-lang.c (LANG_HOOKS_INITIALIZE_DIAGNOSTICS): Define.\n+\t* c-format.c (format_type_warning): New function.  Improve\n+\tdiagnostics for incorrect format argument types.\n+\t(check_format_types): Use it.  Add two parameters.  Use the\n+\tTYPE_MAIN_VARIANT of wanted_type.\n+\t(check_format_info_main): Pass new parameters to\n+\tcheck_format_types.\n+\t(struct format_wanted_type): Update comment.\n+\n 2004-07-01  Nick Clifton  <nickc@redhat.com>\n \n \t* target.h (struct gcc_target): Add new field to struct cxx:"}, {"sha": "98274ee649d10fbca908df23267b758e12b6bd7a", "filename": "gcc/c-format.c", "status": "modified", "additions": 88, "deletions": 70, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "patch": "@@ -488,12 +488,10 @@ typedef struct format_wanted_type\n   /* Whether the argument, dereferenced once, is read from and so\n      must not be a NULL pointer.  */\n   int reading_from_flag;\n-  /* If warnings should be of the form \"field precision is not type int\",\n-     the name to use (in this case \"field precision\"), otherwise NULL,\n-     for \"%s format, %s arg\" type messages.  If (in an extension), this\n-     is a pointer type, wanted_type_name should be set to include the\n-     terminating '*' characters of the type name to give a correct\n-     message.  */\n+  /* If warnings should be of the form \"field precision should have\n+     type 'int'\", the name to use (in this case \"field precision\"),\n+     otherwise NULL, for \"format expects type 'long'\" type\n+     messages.  */\n   const char *name;\n   /* The actual parameter to check against the wanted type.  */\n   tree param;\n@@ -1031,7 +1029,9 @@ static void finish_dollar_format_checking (format_check_results *, int);\n static const format_flag_spec *get_flag_spec (const format_flag_spec *,\n \t\t\t\t\t      int, const char *);\n \n-static void check_format_types (format_wanted_type *);\n+static void check_format_types (format_wanted_type *, const char *, int);\n+static void format_type_warning (const char *, const char *, int, tree,\n+\t\t\t\t int, const char *, tree, int);\n \n /* Decode a format type from a string, returning the type, or\n    format_type_error if not valid, in which case the caller should print an\n@@ -1667,6 +1667,7 @@ check_format_info_main (format_check_results *res,\n       const format_char_info *fci = NULL;\n       char flag_chars[256];\n       int aflag = 0;\n+      const char *format_start = format_chars;\n       if (*format_chars == 0)\n \t{\n \t  if (format_chars - orig_format_chars != format_length)\n@@ -2255,7 +2256,8 @@ check_format_info_main (format_check_results *res,\n \t}\n \n       if (first_wanted_type != 0)\n-\tcheck_format_types (first_wanted_type);\n+\tcheck_format_types (first_wanted_type, format_start,\n+\t\t\t    format_chars - format_start);\n \n     }\n }\n@@ -2264,7 +2266,8 @@ check_format_info_main (format_check_results *res,\n /* Check the argument types from a single format conversion (possibly\n    including width and precision arguments).  */\n static void\n-check_format_types (format_wanted_type *types)\n+check_format_types (format_wanted_type *types, const char *format_start,\n+\t\t    int format_length)\n {\n   for (; types != 0; types = types->next)\n     {\n@@ -2279,6 +2282,7 @@ check_format_types (format_wanted_type *types)\n       cur_type = TREE_TYPE (cur_param);\n       if (cur_type == error_mark_node)\n \tcontinue;\n+      orig_cur_type = cur_type;\n       char_type_flag = 0;\n       wanted_type = types->wanted_type;\n       arg_num = types->arg_num;\n@@ -2292,6 +2296,8 @@ check_format_types (format_wanted_type *types)\n       if (types->pointer_count == 0)\n \twanted_type = lang_hooks.types.type_promotes_to (wanted_type);\n \n+      wanted_type = TYPE_MAIN_VARIANT (wanted_type);\n+\n       STRIP_NOPS (cur_param);\n \n       /* Check the types of any additional pointer arguments\n@@ -2353,18 +2359,17 @@ check_format_types (format_wanted_type *types)\n \t    }\n \t  else\n \t    {\n-\t      if (types->pointer_count == 1)\n-\t\twarning (\"format argument is not a pointer (arg %d)\", arg_num);\n-\t      else\n-\t\twarning (\"format argument is not a pointer to a pointer (arg %d)\", arg_num);\n+\t      format_type_warning (types->name, format_start, format_length,\n+\t\t\t\t   wanted_type, types->pointer_count,\n+\t\t\t\t   types->wanted_type_name, orig_cur_type,\n+\t\t\t\t   arg_num);\n \t      break;\n \t    }\n \t}\n \n       if (i < types->pointer_count)\n \tcontinue;\n \n-      orig_cur_type = cur_type;\n       cur_type = TYPE_MAIN_VARIANT (cur_type);\n \n       /* Check whether the argument type is a character type.  This leniency\n@@ -2403,67 +2408,80 @@ check_format_types (format_wanted_type *types)\n \t  && char_type_flag)\n \tcontinue;\n       /* Now we have a type mismatch.  */\n-      {\n-\tconst char *this;\n-\tconst char *that;\n-\ttree tmp;\n-\n-\ttmp = TYPE_NAME (wanted_type);\n-\tif (TREE_CODE (tmp) == TYPE_DECL)\n-\t  tmp = DECL_NAME (tmp);\n-\tthis = IDENTIFIER_POINTER (tmp);\n-\n-\tthat = 0;\n-\tif (TYPE_NAME (orig_cur_type) != 0\n-\t    && TREE_CODE (orig_cur_type) != INTEGER_TYPE\n-\t    && !(TREE_CODE (orig_cur_type) == POINTER_TYPE\n-\t\t && TREE_CODE (TREE_TYPE (orig_cur_type)) == INTEGER_TYPE))\n-\t  {\n-\t    tmp = TYPE_NAME (orig_cur_type);\n-\t    if (TREE_CODE (tmp) == TYPE_DECL)\n-\t      tmp = DECL_NAME (tmp);\n-\t    if (tmp)\n-\t      that = IDENTIFIER_POINTER (tmp);\n-\t  }\n-\n-\t/* A nameless type can't possibly match what the format wants.\n-\t   So there will be a warning for it.\n-\t   Make up a string to describe vaguely what it is.  */\n-\tif (that == 0)\n-\t  {\n-\t    if (TREE_CODE (orig_cur_type) == POINTER_TYPE)\n-\t      that = _(\"pointer\");\n-\t    else\n-\t      that = _(\"different type\");\n-\t  }\n+      format_type_warning (types->name, format_start, format_length,\n+\t\t\t   wanted_type, types->pointer_count,\n+\t\t\t   types->wanted_type_name, orig_cur_type, arg_num);\n+    }\n+}\n \n-\t/* Make the warning better in case of mismatch of int vs long.  */\n-\tif (TREE_CODE (orig_cur_type) == INTEGER_TYPE\n-\t    && TREE_CODE (wanted_type) == INTEGER_TYPE\n-\t    && TYPE_PRECISION (orig_cur_type) == TYPE_PRECISION (wanted_type)\n-\t    && TYPE_NAME (orig_cur_type) != 0\n-\t    && TREE_CODE (TYPE_NAME (orig_cur_type)) == TYPE_DECL)\n-\t  that = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (orig_cur_type)));\n \n-\tif (strcmp (this, that) != 0)\n-\t  {\n-\t    /* There may be a better name for the format, e.g. size_t,\n-\t       but we should allow for programs with a perverse typedef\n-\t       making size_t something other than what the compiler\n-\t       thinks.  */\n-\t    if (types->wanted_type_name != 0\n-\t\t&& strcmp (types->wanted_type_name, that) != 0)\n-\t      this = types->wanted_type_name;\n-\t    if (types->name != 0)\n-\t      warning (\"%s is not type %s (arg %d)\", types->name, this,\n-\t\t       arg_num);\n-\t    else\n-\t      warning (\"%s format, %s arg (arg %d)\", this, that, arg_num);\n-\t  }\n-      }\n+/* Give a warning about a format argument of different type from that\n+   expected.  DESCR is a description such as \"field precision\", or\n+   NULL for an ordinary format.  For an ordinary format, FORMAT_START\n+   points to where the format starts in the format string and\n+   FORMAT_LENGTH is its length.  WANTED_TYPE is the type the argument\n+   should have after POINTER_COUNT pointer dereferences.\n+   WANTED_NAME_NAME is a possibly more friendly name of WANTED_TYPE,\n+   or NULL if the ordinary name of the type should be used.  ARG_TYPE\n+   is the type of the actual argument.  ARG_NUM is the number of that\n+   argument.  */\n+static void\n+format_type_warning (const char *descr, const char *format_start,\n+\t\t     int format_length, tree wanted_type, int pointer_count,\n+\t\t     const char *wanted_type_name, tree arg_type, int arg_num)\n+{\n+  char *p;\n+  /* If ARG_TYPE is a typedef with a misleading name (for example,\n+     size_t but not the standard size_t expected by printf %zu), avoid\n+     printing the typedef name.  */\n+  if (wanted_type_name\n+      && TYPE_NAME (arg_type)\n+      && TREE_CODE (TYPE_NAME (arg_type)) == TYPE_DECL\n+      && DECL_NAME (TYPE_NAME (arg_type))\n+      && !strcmp (wanted_type_name,\n+\t\t  lang_hooks.decl_printable_name (TYPE_NAME (arg_type), 2)))\n+    arg_type = TYPE_MAIN_VARIANT (arg_type);\n+  /* The format type and name exclude any '*' for pointers, so those\n+     must be formatted manually.  For all the types we currently have,\n+     this is adequate, but formats taking pointers to functions or\n+     arrays would require the full type to be built up in order to\n+     print it with %T.  */\n+  p = alloca (pointer_count + 2);\n+  if (pointer_count == 0)\n+    p[0] = 0;\n+  else if (c_dialect_cxx ())\n+    {\n+      memset (p, '*', pointer_count);\n+      p[pointer_count] = 0;\n+    }\n+  else\n+    {\n+      p[0] = ' ';\n+      memset (p + 1, '*', pointer_count);\n+      p[pointer_count + 1] = 0;\n+    }\n+  if (wanted_type_name)\n+    {\n+      if (descr)\n+\twarning (\"%s should have type %<%s%s%>, but argument %d has type %qT\",\n+\t\t descr, wanted_type_name, p, arg_num, arg_type);\n+      else\n+\twarning (\"format %q.*s expects type %<%s%s%>, but argument %d has type %qT\",\n+\t\t format_length, format_start, wanted_type_name, p,\n+\t\t arg_num, arg_type);\n+    }\n+  else\n+    {\n+      if (descr)\n+\twarning (\"%s should have type %<%T%s%>, but argument %d has type %qT\",\n+\t\t descr, wanted_type, p, arg_num, arg_type);\n+      else\n+\twarning (\"format %q.*s expects type %<%T%s%>, but argument %d has type %qT\",\n+\t\t format_length, format_start, wanted_type, p, arg_num, arg_type);\n     }\n }\n \n+\n /* Given a format_char_info array FCI, and a character C, this function\n    returns the index into the conversion_specs where that specifier's\n    data is located.  If the character isn't found it aborts.  */"}, {"sha": "14ffea6972be530d4c0439e3fc6cff8d7a6a8a83", "filename": "gcc/c-lang.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "patch": "@@ -34,8 +34,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"diagnostic.h\"\n #include \"c-pretty-print.h\"\n \n-static void c_initialize_diagnostics (diagnostic_context *);\n-\n enum c_language_kind c_language = clk_c;\n \n /* ### When changing hooks, consider if ObjC needs changing too!! ### */\n@@ -210,17 +208,5 @@ c_types_compatible_p (tree x, tree y)\n {\n     return comptypes (TYPE_MAIN_VARIANT (x), TYPE_MAIN_VARIANT (y));\n }\n-static void\n-c_initialize_diagnostics (diagnostic_context *context)\n-{\n-  pretty_printer *base = context->printer;\n-  c_pretty_printer *pp = xmalloc (sizeof (c_pretty_printer));\n-  memcpy (pp_base (pp), base, sizeof (pretty_printer));\n-  pp_c_pretty_printer_init (pp);\n-  context->printer = (pretty_printer *) pp;\n-\n-  /* It is safe to free this object because it was previously malloc()'d.  */\n-  free (base);\n-}\n \n #include \"gtype-c.h\""}, {"sha": "1ede9c337a67573c84bdd462ae1203f6fb0c9783", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "patch": "@@ -27,6 +27,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"insn-config.h\"\n #include \"integrate.h\"\n #include \"c-tree.h\"\n+#include \"c-pretty-print.h\"\n #include \"function.h\"\n #include \"flags.h\"\n #include \"toplev.h\"\n@@ -242,7 +243,10 @@ static bool\n c_tree_printer (pretty_printer *pp, text_info *text)\n {\n   tree t = va_arg (*text->args_ptr, tree);\n+  tree name;\n   const char *n = \"({anonymous})\";\n+  c_pretty_printer *cpp = (c_pretty_printer *) pp;\n+  pp->padding = pp_none;\n \n   switch (*text->format_spec)\n     {\n@@ -254,14 +258,22 @@ c_tree_printer (pretty_printer *pp, text_info *text)\n \n     case 'T':\n       if (TYPE_P (t))\n-\tt = TYPE_NAME (t);\n-      if (t && TREE_CODE (t) == TYPE_DECL)\n+\tname = TYPE_NAME (t);\n+      else\n+\tabort ();\n+      if (name && TREE_CODE (name) == TYPE_DECL)\n \t{\n-\t  if (DECL_NAME (t))\n-\t    n = lang_hooks.decl_printable_name (t, 2);\n+\t  if (DECL_NAME (name))\n+\t    pp_string (cpp, lang_hooks.decl_printable_name (name, 2));\n+\t  else\n+\t    pp_type_id (cpp, t);\n+\t  return true;\n+\t}\n+      else\n+\t{\n+\t  pp_type_id (cpp, t);\n+\t  return true;\n \t}\n-      else if (t)\n-\tn = IDENTIFIER_POINTER (t);\n       break;\n \n     case 'E':\n@@ -275,7 +287,7 @@ c_tree_printer (pretty_printer *pp, text_info *text)\n       return false;\n     }\n \n-  pp_string (pp, n);\n+  pp_string (cpp, n);\n   return true;\n }\n \n@@ -313,3 +325,16 @@ has_c_linkage (tree decl ATTRIBUTE_UNUSED)\n {\n   return true;\n }\n+\n+void\n+c_initialize_diagnostics (diagnostic_context *context)\n+{\n+  pretty_printer *base = context->printer;\n+  c_pretty_printer *pp = xmalloc (sizeof (c_pretty_printer));\n+  memcpy (pp_base (pp), base, sizeof (pretty_printer));\n+  pp_c_pretty_printer_init (pp);\n+  context->printer = (pretty_printer *) pp;\n+\n+  /* It is safe to free this object because it was previously malloc()'d.  */\n+  free (base);\n+}"}, {"sha": "e116f7f2984f488bef595cb01c6ae9ebf4a02446", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "patch": "@@ -384,6 +384,8 @@ pp_c_specifier_qualifier_list (c_pretty_printer *pp, tree t)\n             pp_c_whitespace (pp);\n             pp_c_left_paren (pp);\n           }\n+\telse if (!c_dialect_cxx ())\n+\t  pp_c_whitespace (pp);\n         pp_ptr_operator (pp, t);\n       }\n       break;\n@@ -487,7 +489,7 @@ pp_c_direct_abstract_declarator (c_pretty_printer *pp, tree t)\n \n     case ARRAY_TYPE:\n       pp_c_left_bracket (pp);\n-      if (TYPE_DOMAIN (t))\n+      if (TYPE_DOMAIN (t) && TYPE_MAX_VALUE (TYPE_DOMAIN (t)))\n         pp_expression (pp, TYPE_MAX_VALUE (TYPE_DOMAIN (t)));\n       pp_c_right_bracket (pp);\n       pp_direct_abstract_declarator (pp, TREE_TYPE (t));"}, {"sha": "23753027df11b0d8160966a66b17846412577a90", "filename": "gcc/c-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "patch": "@@ -23,6 +23,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define GCC_C_TREE_H\n \n #include \"c-common.h\"\n+#include \"diagnostic.h\"\n \n /* struct lang_identifier is private to c-decl.c, but langhooks.c needs to\n    know how big it is.  This is sanity-checked in c-decl.c.  */\n@@ -204,6 +205,7 @@ extern tree c_objc_common_truthvalue_conversion (tree expr);\n extern void c_objc_common_finish_file (void);\n extern int defer_fn (tree);\n extern bool c_warn_unused_global_decl (tree);\n+extern void c_initialize_diagnostics (diagnostic_context *);\n \n #define c_build_type_variant(TYPE, CONST_P, VOLATILE_P)\t\t  \\\n   c_build_qualified_type ((TYPE),\t\t\t\t  \\"}, {"sha": "b59a47b1bc0c3f91586b3c3e24015e727a73bce3", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "patch": "@@ -1,5 +1,5 @@\n /* Language-dependent hooks for Objective-C.\n-   Copyright 2001, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright 2001, 2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Ziemowit Laski  <zlaski@apple.com>\n \n This file is part of GCC.\n@@ -43,6 +43,8 @@ enum c_language_kind c_language = clk_objc;\n #define LANG_HOOKS_FINISH c_common_finish\n #undef LANG_HOOKS_INIT_OPTIONS\n #define LANG_HOOKS_INIT_OPTIONS c_common_init_options\n+#undef LANG_HOOKS_INITIALIZE_DIAGNOSTICS\n+#define LANG_HOOKS_INITIALIZE_DIAGNOSTICS c_initialize_diagnostics\n #undef LANG_HOOKS_HANDLE_OPTION\n #define LANG_HOOKS_HANDLE_OPTION c_common_handle_option\n #undef LANG_HOOKS_HANDLE_FILENAME"}, {"sha": "5ce65dada2dbb214c55e1e36cea90a1f5af69138", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "patch": "@@ -1,3 +1,12 @@\n+2004-07-01  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/1027\n+\t* gcc.dg/Wswitch-enum.c, gcc.dg/Wswitch.c,\n+\tgcc.dg/format/branch-1.c, gcc.dg/format/diag-1.c,\n+\tgcc.dg/format/multattr-3.c, gcc.dg/format/xopen-1.c: Update\n+\texpected warning text.\n+\t* gcc.dg/format/diag-2.c: New test.\n+\n 2004-07-01  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.c-torture/compile/20040323-1.c: XFAIL on Solaris 2."}, {"sha": "24fc26261e6d76d6ac8639f8e45d538acb999b18", "filename": "gcc/testsuite/gcc.dg/Wswitch-enum.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch-enum.c?ref=ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "patch": "@@ -50,13 +50,13 @@ foo (int i, int j, enum e ei, enum e ej, enum e ek, enum e el,\n     {\n     case e1: return 1;\n     case e2: return 2;\n-    case 3: return 3; /* { dg-warning \"case value `3' not in enumerated type `e'\" \"excess 3\" } */\n+    case 3: return 3; /* { dg-warning \"case value `3' not in enumerated type `enum e'\" \"excess 3\" } */\n     }\n   switch (ep)\n     {\n     case e1: return 1;\n     case e2: return 2;\n-    case 3: return 3; /* { dg-warning \"case value `3' not in enumerated type `e'\" \"excess 3\" } */\n+    case 3: return 3; /* { dg-warning \"case value `3' not in enumerated type `enum e'\" \"excess 3\" } */\n     default: break;\n     }\n   return 0;"}, {"sha": "9ba12d6d3c059927a9890249e2654ffc5388d62f", "filename": "gcc/testsuite/gcc.dg/Wswitch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWswitch.c?ref=ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "patch": "@@ -50,7 +50,7 @@ foo (int i, int j, enum e ei, enum e ej, enum e ek, enum e el,\n     {\n     case e1: return 1;\n     case e2: return 2;\n-    case 3: return 3; /* { dg-warning \"case value `3' not in enumerated type `e'\" \"excess 3\" } */\n+    case 3: return 3; /* { dg-warning \"case value `3' not in enumerated type `enum e'\" \"excess 3\" } */\n     }\n   switch (ep)\n     {"}, {"sha": "cdff9276281c3794ec3279ff82ecea8e8b7f15d6", "filename": "gcc/testsuite/gcc.dg/format/branch-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbranch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbranch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbranch-1.c?ref=ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "patch": "@@ -9,18 +9,18 @@ void\n foo (long l, int nfoo)\n {\n   printf ((nfoo > 1) ? \"%d foos\" : \"%d foo\", nfoo);\n-  printf ((l > 1) ? \"%d foos\" : \"%d foo\", l); /* { dg-warning \"int format\" \"wrong type in conditional expr\" } */\n-  printf ((l > 1) ? \"%ld foos\" : \"%d foo\", l); /* { dg-warning \"int format\" \"wrong type in conditional expr\" } */\n-  printf ((l > 1) ? \"%d foos\" : \"%ld foo\", l); /* { dg-warning \"int format\" \"wrong type in conditional expr\" } */\n+  printf ((l > 1) ? \"%d foos\" : \"%d foo\", l); /* { dg-warning \"int\" \"wrong type in conditional expr\" } */\n+  printf ((l > 1) ? \"%ld foos\" : \"%d foo\", l); /* { dg-warning \"int\" \"wrong type in conditional expr\" } */\n+  printf ((l > 1) ? \"%d foos\" : \"%ld foo\", l); /* { dg-warning \"int\" \"wrong type in conditional expr\" } */\n   /* Should allow one case to have extra arguments.  */\n   printf ((nfoo > 1) ? \"%d foos\" : \"1 foo\", nfoo);\n   printf ((nfoo > 1) ? \"many foos\" : \"1 foo\", nfoo); /* { dg-warning \"too many\" \"too many args in all branches\" } */\n   printf ((nfoo > 1) ? \"%d foos\" : \"\", nfoo);\n   printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"1 foo\" : \"no foos\"), nfoo);\n   printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"%d foo\" : \"%d foos\"), nfoo);\n-  printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"%d foo\" : \"%ld foos\"), nfoo); /* { dg-warning \"long int format\" \"wrong type\" } */\n-  printf ((nfoo > 1) ? \"%ld foos\" : ((nfoo > 0) ? \"%d foo\" : \"%d foos\"), nfoo); /* { dg-warning \"long int format\" \"wrong type\" } */\n-  printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"%ld foo\" : \"%d foos\"), nfoo); /* { dg-warning \"long int format\" \"wrong type\" } */\n+  printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"%d foo\" : \"%ld foos\"), nfoo); /* { dg-warning \"long int\" \"wrong type\" } */\n+  printf ((nfoo > 1) ? \"%ld foos\" : ((nfoo > 0) ? \"%d foo\" : \"%d foos\"), nfoo); /* { dg-warning \"long int\" \"wrong type\" } */\n+  printf ((nfoo > 1) ? \"%d foos\" : ((nfoo > 0) ? \"%ld foo\" : \"%d foos\"), nfoo); /* { dg-warning \"long int\" \"wrong type\" } */\n   /* Extra arguments to NULL should be complained about.  */\n   printf (NULL, \"foo\"); /* { dg-warning \"too many\" \"NULL extra args\" } */\n   /* { dg-warning \"null\" \"null format arg\" { target *-*-* } 25 } */"}, {"sha": "998e35b9b473a031bc902d86554821a6c2a856f0", "filename": "gcc/testsuite/gcc.dg/format/diag-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiag-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiag-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiag-1.c?ref=ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "patch": "@@ -12,7 +12,7 @@ foo (double d)\n   printf (\"%hhf\", d); /* { dg-warning \"hh\" \"%hhf warning\" } */\n   /* This should get a message referring to `ll', not to `q'.  */\n   printf (\"%llf\", d); /* { dg-warning \"ll\" \"%llf warning\" } */\n-  /* This should get a message referring to `size_t format', not to\n-     `unsigned int format' or similar.  */\n-  printf (\"%zu\", d); /* { dg-warning \"size_t format\" \"size_t format warning\" } */\n+  /* This should get a message referring to 'size_t', not to\n+     'unsigned int' or similar.  */\n+  printf (\"%zu\", d); /* { dg-warning \"size_t\" \"size_t format warning\" } */\n }"}, {"sha": "e7578d3f031e321eec9f046d0bb103ecd64655d6", "filename": "gcc/testsuite/gcc.dg/format/diag-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiag-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiag-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiag-2.c?ref=ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "patch": "@@ -0,0 +1,13 @@\n+/* Test for format diagnostics.  Proper type names (bug 1027).  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+void\n+foo (double d)\n+{\n+  printf (\"%s\", &d); /* { dg-warning \"char \\\\*\" \"correct arg type\" } */\n+  scanf (\"%zu\", &d); /* { dg-warning \"size_t \\\\*\" \"correct arg type\" } */\n+}"}, {"sha": "1d4979a4e747020f2ba1f56d692256ce0fbde33e", "filename": "gcc/testsuite/gcc.dg/format/multattr-3.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmultattr-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmultattr-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fmultattr-3.c?ref=ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "patch": "@@ -13,16 +13,16 @@ void\n foo (long l, int nfoo)\n {\n   printf (ngettext (\"%d foo\", \"%d foos\", nfoo), nfoo);\n-  printf (ngettext (\"%d foo\", \"%d foos\", l), l); /* { dg-warning \"int format\" \"wrong type in conditional expr\" } */\n-  printf (ngettext (\"%d foo\", \"%ld foos\", l), l); /* { dg-warning \"int format\" \"wrong type in conditional expr\" } */\n-  printf (ngettext (\"%ld foo\", \"%d foos\", l), l); /* { dg-warning \"int format\" \"wrong type in conditional expr\" } */\n+  printf (ngettext (\"%d foo\", \"%d foos\", l), l); /* { dg-warning \"int\" \"wrong type in conditional expr\" } */\n+  printf (ngettext (\"%d foo\", \"%ld foos\", l), l); /* { dg-warning \"int\" \"wrong type in conditional expr\" } */\n+  printf (ngettext (\"%ld foo\", \"%d foos\", l), l); /* { dg-warning \"int\" \"wrong type in conditional expr\" } */\n   /* Should allow one case to have extra arguments.  */\n   printf (ngettext (\"1 foo\", \"%d foos\", nfoo), nfoo);\n   printf (ngettext (\"1 foo\", \"many foos\", nfoo), nfoo); /* { dg-warning \"too many\" \"too many args in all branches\" } */\n   printf (ngettext (\"\", \"%d foos\", nfoo), nfoo);\n   printf (ngettext (\"1 foo\", (nfoo > 0) ? \"%d foos\" : \"no foos\", nfoo), nfoo);\n   printf (ngettext (\"%d foo\", (nfoo > 0) ? \"%d foos\" : \"no foos\", nfoo), nfoo);\n-  printf (ngettext (\"%ld foo\", (nfoo > 0) ? \"%d foos\" : \"no foos\", nfoo), nfoo); /* { dg-warning \"long int format\" \"wrong type\" } */\n-  printf (ngettext (\"%d foo\", (nfoo > 0) ? \"%ld foos\" : \"no foos\", nfoo), nfoo); /* { dg-warning \"long int format\" \"wrong type\" } */\n-  printf (ngettext (\"%d foo\", (nfoo > 0) ? \"%d foos\" : \"%ld foos\", nfoo), nfoo); /* { dg-warning \"long int format\" \"wrong type\" } */\n+  printf (ngettext (\"%ld foo\", (nfoo > 0) ? \"%d foos\" : \"no foos\", nfoo), nfoo); /* { dg-warning \"long int\" \"wrong type\" } */\n+  printf (ngettext (\"%d foo\", (nfoo > 0) ? \"%ld foos\" : \"no foos\", nfoo), nfoo); /* { dg-warning \"long int\" \"wrong type\" } */\n+  printf (ngettext (\"%d foo\", (nfoo > 0) ? \"%d foos\" : \"%ld foos\", nfoo), nfoo); /* { dg-warning \"long int\" \"wrong type\" } */\n }"}, {"sha": "9b098fb1ca3c4047b43689425144763a6a4f68c3", "filename": "gcc/testsuite/gcc.dg/format/xopen-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fxopen-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ede1a3872913df59f3a1f4299ec5f6c7706d3b7b/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fxopen-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fxopen-1.c?ref=ede1a3872913df59f3a1f4299ec5f6c7706d3b7b", "patch": "@@ -89,7 +89,7 @@ foo (int i, unsigned int u, wint_t lc, wchar_t *ls, int *ip, double d,\n   /* The use of operand number $ formats is an X/Open extension.  */\n   scanf (\"%1$d\", ip);\n   printf (\"%1$d\", i);\n-  printf (\"%1$d\", l); /* { dg-warning \"arg 2\" \"mismatched args with $ format\" } */\n+  printf (\"%1$d\", l); /* { dg-warning \"arg 2|argument 2\" \"mismatched args with $ format\" } */\n   printf (\"%3$*2$.*1$ld\", i2, i, l);\n   printf (\"%4$ld%7$ld%5$d%6$d%3$d%1$d%2$d\", i, i, i, l, i, i, l);\n   scanf (\"%4$ld%7$ld%5$d%6$d%3$d%1$d%2$d\", ip, ip, ip, lp, ip, ip, lp);"}]}