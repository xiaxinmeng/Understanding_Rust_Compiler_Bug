{"sha": "eb59e42800b805e0bcced98ad2383c66a5839acc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI1OWU0MjgwMGI4MDVlMGJjY2VkOThhZDIzODNjNjZhNTgzOWFjYw==", "commit": {"author": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2015-12-17T14:09:45Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2015-12-17T14:09:45Z"}, "message": "DWARF: add a language hook to override types in debugging information\n\nMany artificial types are introduced by GNAT in order to satisfy\nconstraints in GCC's internal trees or to generate optimal code.  These\nhide original types from sources and miss useful information in the\ndebugging information or add noise to it and make debugging confusing.\nThis change introduces a new language hook to give a chance to\nfront-ends to restore the source types in the debugging information.\n\nThis change also enhance the array descriptor language hook to handle\narray-wide bit/byte stride.  Some arrays may contain dynamically-sized\nobjects.  Debuggers need for these a hint to know the size allocated for\neach element, hence the need for the array-wide bit/byte stride.\n\nThe Ada front-end is enhanced to take advantage of both hooks when\n-fgnat-encodings=minimal, in order to keep compatibility with GDB.\n\ngcc/ada/ChangeLog:\n\n\t* gcc-interface/ada-tree.h (struct lang_type): Rename the t\n\tfield as t1 and add a t2 one.\n\t(get_lang_specific): New.\n\t(GET_TYPE_LANG_SPECIFIC): Refactor to use get_lang_specific.\n\t(SET_TYPE_LANG_SPECIFIC): Likewise.\n\t(GET_TYPE_LANG_SPECIFIC2): New macro.\n\t(SET_TYPE_LANG_SPECIFIC2): New macro.\n\t(TYPE_DEBUG_TYPE): New macro.\n\t(SET_TYPE_DEBUG_TYPE): New macro.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): When\n\t-fgnat-encodings=minimal, set padding types' debug type to the\n\tpadded one (i.e. strip ___PAD GNAT encodings) and set\n\tconstrained record subtypes's debug type to the base type.\n\t* gcc-interface/misc.c (gnat_print_type): Print debug types.\n\t(gnat_get_debug_type): New.\n\t(gnat_get_array_descr_info): When -fgnat-encodings=minimal, set\n\ta byte stride for arrays that contain a type whose debug type\n\thas variable length.\n\t(LANG_HOOKS_GET_DEBUG_TYPE): Redefine macro to implement the\n\tdebug type language hook.\n\t* gcc-interface/utils.c (maybe_pad_type): When\n\t-fgnat-encodings=minimal, set padding types' debug type to the\n\tpadded one.  Restore XVZ variables creation when\n\t-fgnat-encodings-minimal and use them to hold padding types'\n\tbyte size.  For library-level padding types, share this variable\n\tacross translation units.  Tag XVZ variables as artificial.\n\ngcc/ChangeLog:\n\n\t* langhooks.h (struct lang_hooks_for_types): Add a\n\tget_debug_type field.\n\t* langhooks-def.h (LANG_HOOKS_GET_DEBUG_TYPE): New macro.\n\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Initialize the\n\tget_debug_type field.\n\t* dwarf2out.h (struct array_descr_info): Add an array-wide\n\tstride field.\n\t* dwarf2out.c (modified_type_die): Invoke the get_debug_type\n\tlanguage hook, process its result instead, if any.\n\t(gen_descr_array_type_die): Add array-wide stride processing.\n\nFrom-SVN: r231763", "tree": {"sha": "1954e1f36ee22fe1453b3126d1e77a2db664d746", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1954e1f36ee22fe1453b3126d1e77a2db664d746"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb59e42800b805e0bcced98ad2383c66a5839acc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb59e42800b805e0bcced98ad2383c66a5839acc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb59e42800b805e0bcced98ad2383c66a5839acc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb59e42800b805e0bcced98ad2383c66a5839acc/comments", "author": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "986ccd2171a7fd8e7d221c2d0b49aad844da836f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/986ccd2171a7fd8e7d221c2d0b49aad844da836f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/986ccd2171a7fd8e7d221c2d0b49aad844da836f"}], "stats": {"total": 205, "additions": 176, "deletions": 29}, "files": [{"sha": "94b772607d0b1037cd0a623348b16caf3fcfe4a5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb59e42800b805e0bcced98ad2383c66a5839acc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb59e42800b805e0bcced98ad2383c66a5839acc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb59e42800b805e0bcced98ad2383c66a5839acc", "patch": "@@ -1,3 +1,16 @@\n+2015-12-17  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* langhooks.h (struct lang_hooks_for_types): Add a\n+\tget_debug_type field.\n+\t* langhooks-def.h (LANG_HOOKS_GET_DEBUG_TYPE): New macro.\n+\t(LANG_HOOKS_FOR_TYPES_INITIALIZER): Initialize the\n+\tget_debug_type field.\n+\t* dwarf2out.h (struct array_descr_info): Add an array-wide\n+\tstride field.\n+\t* dwarf2out.c (modified_type_die): Invoke the get_debug_type\n+\tlanguage hook, process its result instead, if any.\n+\t(gen_descr_array_type_die): Add array-wide stride processing.\n+\n 2015-12-17  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* debug.h (struct gcc_debug_hooks): Add a new size_function"}, {"sha": "8c6a56d7f1a4f7d9696c853be8e8b48d66d950bb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb59e42800b805e0bcced98ad2383c66a5839acc/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb59e42800b805e0bcced98ad2383c66a5839acc/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=eb59e42800b805e0bcced98ad2383c66a5839acc", "patch": "@@ -1,3 +1,32 @@\n+2015-12-17  Pierre-Marie de Rodat  <derodat@adacore.com>\n+\n+\t* gcc-interface/ada-tree.h (struct lang_type): Rename the t\n+\tfield as t1 and add a t2 one.\n+\t(get_lang_specific): New.\n+\t(GET_TYPE_LANG_SPECIFIC): Refactor to use get_lang_specific.\n+\t(SET_TYPE_LANG_SPECIFIC): Likewise.\n+\t(GET_TYPE_LANG_SPECIFIC2): New macro.\n+\t(SET_TYPE_LANG_SPECIFIC2): New macro.\n+\t(TYPE_DEBUG_TYPE): New macro.\n+\t(SET_TYPE_DEBUG_TYPE): New macro.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): When\n+\t-fgnat-encodings=minimal, set padding types' debug type to the\n+\tpadded one (i.e. strip ___PAD GNAT encodings) and set\n+\tconstrained record subtypes's debug type to the base type.\n+\t* gcc-interface/misc.c (gnat_print_type): Print debug types.\n+\t(gnat_get_debug_type): New.\n+\t(gnat_get_array_descr_info): When -fgnat-encodings=minimal, set\n+\ta byte stride for arrays that contain a type whose debug type\n+\thas variable length.\n+\t(LANG_HOOKS_GET_DEBUG_TYPE): Redefine macro to implement the\n+\tdebug type language hook.\n+\t* gcc-interface/utils.c (maybe_pad_type): When\n+\t-fgnat-encodings=minimal, set padding types' debug type to the\n+\tpadded one.  Restore XVZ variables creation when\n+\t-fgnat-encodings-minimal and use them to hold padding types'\n+\tbyte size.  For library-level padding types, share this variable\n+\tacross translation units.  Tag XVZ variables as artificial.\n+\n 2015-12-17  Pierre-Marie de Rodat  <derodat@adacore.com>\n \n \t* gcc-interface/decl.c (gnat_to_gnu_entity): Disable ___XVS GNAT"}, {"sha": "807da9d97cff3c387c50a19b64f9088fd9e767f5", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb59e42800b805e0bcced98ad2383c66a5839acc/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb59e42800b805e0bcced98ad2383c66a5839acc/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=eb59e42800b805e0bcced98ad2383c66a5839acc", "patch": "@@ -33,21 +33,21 @@ union GTY((desc (\"0\"),\n };\n \n /* Ada uses the lang_decl and lang_type fields to hold a tree.  */\n-struct GTY(()) lang_type { tree t; };\n+struct GTY(()) lang_type { tree t1; tree t2; };\n struct GTY(()) lang_decl { tree t; };\n \n-/* Macros to get and set the tree in TYPE_LANG_SPECIFIC.  */\n+extern struct lang_type *get_lang_specific (tree node);\n+\n+/* Macros to get and set the trees in TYPE_LANG_SPECIFIC.  */\n #define GET_TYPE_LANG_SPECIFIC(NODE) \\\n-  (TYPE_LANG_SPECIFIC (NODE) ? TYPE_LANG_SPECIFIC (NODE)->t : NULL_TREE)\n+  (TYPE_LANG_SPECIFIC (NODE) ? TYPE_LANG_SPECIFIC (NODE)->t1 : NULL_TREE)\n \n-#define SET_TYPE_LANG_SPECIFIC(NODE, X)\t\t\t \\\n-do {\t\t\t\t\t\t\t \\\n-  tree tmp = (X);\t\t\t\t\t \\\n-  if (!TYPE_LANG_SPECIFIC (NODE))\t\t\t \\\n-    TYPE_LANG_SPECIFIC (NODE)\t\t\t\t \\\n-      = ggc_alloc<struct lang_type> (); \\\n-  TYPE_LANG_SPECIFIC (NODE)->t = tmp;\t\t\t \\\n-} while (0)\n+#define SET_TYPE_LANG_SPECIFIC(NODE, X) (get_lang_specific (NODE)->t1 = (X))\n+\n+#define GET_TYPE_LANG_SPECIFIC2(NODE) \\\n+  (TYPE_LANG_SPECIFIC (NODE) ? TYPE_LANG_SPECIFIC (NODE)->t2 : NULL_TREE)\n+\n+#define SET_TYPE_LANG_SPECIFIC2(NODE, X) (get_lang_specific (NODE)->t2 = (X))\n \n /* Macros to get and set the tree in DECL_LANG_SPECIFIC.  */\n #define GET_DECL_LANG_SPECIFIC(NODE) \\\n@@ -351,6 +351,12 @@ do {\t\t\t\t\t\t   \\\n #define SET_TYPE_ADA_SIZE(NODE, X) \\\n   SET_TYPE_LANG_SPECIFIC (RECORD_OR_UNION_CHECK (NODE), X)\n \n+/* For types with TYPE_CAN_HAVE_DEBUG_TYPE_P, this is the type to use in\n+   debugging information.  */\n+#define TYPE_DEBUG_TYPE(NODE) \\\n+  GET_TYPE_LANG_SPECIFIC2(NODE)\n+#define SET_TYPE_DEBUG_TYPE(NODE, X) \\\n+  SET_TYPE_LANG_SPECIFIC2(NODE, X)\n \n /* Flags added to decl nodes.  */\n "}, {"sha": "385b720506a19fce621a201cab93c3d0c11339d1", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb59e42800b805e0bcced98ad2383c66a5839acc/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb59e42800b805e0bcced98ad2383c66a5839acc/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=eb59e42800b805e0bcced98ad2383c66a5839acc", "patch": "@@ -1846,6 +1846,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \n \t  gnu_type = make_node (RECORD_TYPE);\n \t  TYPE_NAME (gnu_type) = create_concat_name (gnat_entity, \"PAD\");\n+\t  if (gnat_encodings == DWARF_GNAT_ENCODINGS_MINIMAL)\n+\t    SET_TYPE_DEBUG_TYPE (gnu_type, gnu_field_type);\n \t  TYPE_PACKED (gnu_type) = 1;\n \t  TYPE_SIZE (gnu_type) = TYPE_SIZE (gnu_field_type);\n \t  TYPE_SIZE_UNIT (gnu_type) = TYPE_SIZE_UNIT (gnu_field_type);\n@@ -3277,6 +3279,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \n \t      gnu_type = make_node (RECORD_TYPE);\n \t      TYPE_NAME (gnu_type) = gnu_entity_name;\n+\t      if (gnat_encodings == DWARF_GNAT_ENCODINGS_MINIMAL)\n+\t\tSET_TYPE_DEBUG_TYPE (gnu_type, gnu_base_type);\n \t      TYPE_PACKED (gnu_type) = TYPE_PACKED (gnu_base_type);\n \t      TYPE_REVERSE_STORAGE_ORDER (gnu_type)\n \t\t= Reverse_Storage_Order (gnat_entity);"}, {"sha": "e9df63c1fc75d3c46e19be6e8d283127ea796bf1", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb59e42800b805e0bcced98ad2383c66a5839acc/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb59e42800b805e0bcced98ad2383c66a5839acc/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=eb59e42800b805e0bcced98ad2383c66a5839acc", "patch": "@@ -524,6 +524,10 @@ gnat_print_type (FILE *file, tree node, int indent)\n     default:\n       break;\n     }\n+\n+  if (TYPE_DEBUG_TYPE (node) != NULL_TREE)\n+    print_node_brief (file, \"debug type\", TYPE_DEBUG_TYPE (node),\n+\t\t      indent + 4);\n }\n \n /* Return the name to be printed for DECL.  */\n@@ -565,6 +569,15 @@ gnat_descriptive_type (const_tree type)\n     return NULL_TREE;\n }\n \n+/* Return the type to used for debugging information instead of TYPE, if any.\n+   NULL_TREE if TYPE is fine.  */\n+\n+static tree\n+gnat_get_debug_type (const_tree type)\n+{\n+  return TYPE_DEBUG_TYPE (type);\n+}\n+\n /* Return true if types T1 and T2 are identical for type hashing purposes.\n    Called only after doing all language independent checks.  At present,\n    this function is only called when both types are FUNCTION_TYPE.  */\n@@ -697,6 +710,33 @@ gnat_get_array_descr_info (const_tree type, struct array_descr_info *info)\n \n   info->element_type = TREE_TYPE (last_dimen);\n \n+  /* When arrays contain dynamically-sized elements, we usually wrap them in\n+     padding types, or we create constrained types for them.  Then, if such\n+     types are stripped in the debugging information output, the debugger needs\n+     a way to know the size that is reserved for each element.  This is why we\n+     emit a stride in such situations.  */\n+  if (gnat_encodings == DWARF_GNAT_ENCODINGS_MINIMAL)\n+    {\n+      tree source_element_type = info->element_type;\n+\n+      while (1)\n+\t{\n+\t  if (TYPE_DEBUG_TYPE (source_element_type) != NULL_TREE)\n+\t    source_element_type = TYPE_DEBUG_TYPE (source_element_type);\n+\t  else if (TYPE_IS_PADDING_P (source_element_type))\n+\t    source_element_type\n+\t      = TREE_TYPE (TYPE_FIELDS (source_element_type));\n+\t  else\n+\t    break;\n+\t}\n+\n+      if (TREE_CODE (TYPE_SIZE_UNIT (source_element_type)) != INTEGER_CST)\n+\t{\n+\t  info->stride = TYPE_SIZE_UNIT (info->element_type);\n+\t  info->stride_in_bits = false;\n+\t}\n+    }\n+\n   return true;\n }\n \n@@ -947,6 +987,17 @@ gnat_init_ts (void)\n   MARK_TS_TYPED (EXIT_STMT);\n }\n \n+/* Return the lang specific structure attached to NODE.  Allocate it (cleared)\n+   if needed.  */\n+\n+struct lang_type *\n+get_lang_specific (tree node)\n+{\n+  if (!TYPE_LANG_SPECIFIC (node))\n+    TYPE_LANG_SPECIFIC (node) = ggc_cleared_alloc<struct lang_type> ();\n+  return TYPE_LANG_SPECIFIC (node);\n+}\n+\n /* Definitions for our language-specific hooks.  */\n \n #undef  LANG_HOOKS_NAME\n@@ -999,6 +1050,8 @@ gnat_init_ts (void)\n #define LANG_HOOKS_GET_SUBRANGE_BOUNDS  gnat_get_subrange_bounds\n #undef  LANG_HOOKS_DESCRIPTIVE_TYPE\n #define LANG_HOOKS_DESCRIPTIVE_TYPE\tgnat_descriptive_type\n+#undef  LANG_HOOKS_GET_DEBUG_TYPE\n+#define LANG_HOOKS_GET_DEBUG_TYPE\tgnat_get_debug_type\n #undef  LANG_HOOKS_ATTRIBUTE_TABLE\n #define LANG_HOOKS_ATTRIBUTE_TABLE\tgnat_internal_attribute_table\n #undef  LANG_HOOKS_BUILTIN_FUNCTION"}, {"sha": "1816f3a9a264ab6fc9f8bb63771b843ae8db7256", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 25, "deletions": 17, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb59e42800b805e0bcced98ad2383c66a5839acc/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb59e42800b805e0bcced98ad2383c66a5839acc/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=eb59e42800b805e0bcced98ad2383c66a5839acc", "patch": "@@ -1278,6 +1278,8 @@ maybe_pad_type (tree type, tree size, unsigned int align,\n      type and name.  */\n   record = make_node (RECORD_TYPE);\n   TYPE_PADDING_P (record) = 1;\n+  if (gnat_encodings == DWARF_GNAT_ENCODINGS_MINIMAL)\n+    SET_TYPE_DEBUG_TYPE (record, type);\n \n   if (Present (gnat_entity))\n     TYPE_NAME (record) = create_concat_name (gnat_entity, \"PAD\");\n@@ -1348,10 +1350,8 @@ maybe_pad_type (tree type, tree size, unsigned int align,\n \n   /* Unless debugging information isn't being written for the input type,\n      write a record that shows what we are a subtype of and also make a\n-     variable that indicates our size, if still variable.  Don't do this if\n-     asked to output as few encodings as possible.  */\n-  if (gnat_encodings != DWARF_GNAT_ENCODINGS_MINIMAL\n-      && TREE_CODE (orig_size) != INTEGER_CST\n+     variable that indicates our size, if still variable.  */\n+  if (TREE_CODE (orig_size) != INTEGER_CST\n       && TYPE_NAME (record)\n       && TYPE_NAME (type)\n       && !(TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n@@ -1367,6 +1367,8 @@ maybe_pad_type (tree type, tree size, unsigned int align,\n \t  && TREE_CODE (size) != INTEGER_CST\n \t  && (definition || global_bindings_p ()))\n \t{\n+\t  /* Whether or not gnat_entity comes from source, this XVZ variable is\n+\t     is a compilation artifact.  */\n \t  size_unit\n \t    = create_var_decl (concat_name (name, \"XVZ\"), NULL_TREE, sizetype,\n \t\t\t      size_unit, true, global_bindings_p (),\n@@ -1375,19 +1377,25 @@ maybe_pad_type (tree type, tree size, unsigned int align,\n \t  TYPE_SIZE_UNIT (record) = size_unit;\n \t}\n \n-      tree marker = make_node (RECORD_TYPE);\n-      tree orig_name = TYPE_IDENTIFIER (type);\n-\n-      TYPE_NAME (marker) = concat_name (name, \"XVS\");\n-      finish_record_type (marker,\n-\t\t\t  create_field_decl (orig_name,\n-\t\t\t\t\t     build_reference_type (type),\n-\t\t\t\t\t     marker, NULL_TREE, NULL_TREE,\n-\t\t\t\t\t     0, 0),\n-\t\t\t  0, true);\n-      TYPE_SIZE_UNIT (marker) = size_unit;\n-\n-      add_parallel_type (record, marker);\n+      /* There is no need to show what we are a subtype of when outputting as\n+\t few encodings as possible: regular debugging infomation makes this\n+\t redundant.  */\n+      if (gnat_encodings != DWARF_GNAT_ENCODINGS_MINIMAL)\n+\t{\n+\t  tree marker = make_node (RECORD_TYPE);\n+\t  tree orig_name = TYPE_IDENTIFIER (type);\n+\n+\t  TYPE_NAME (marker) = concat_name (name, \"XVS\");\n+\t  finish_record_type (marker,\n+\t\t\t      create_field_decl (orig_name,\n+\t\t\t\t\t\t build_reference_type (type),\n+\t\t\t\t\t\t marker, NULL_TREE, NULL_TREE,\n+\t\t\t\t\t\t 0, 0),\n+\t\t\t      0, true);\n+\t  TYPE_SIZE_UNIT (marker) = size_unit;\n+\n+\t  add_parallel_type (record, marker);\n+\t}\n     }\n \n   rest_of_record_type_compilation (record);"}, {"sha": "800f283aa319b5f9741ffddf8893a9564e881732", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb59e42800b805e0bcced98ad2383c66a5839acc/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb59e42800b805e0bcced98ad2383c66a5839acc/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=eb59e42800b805e0bcced98ad2383c66a5839acc", "patch": "@@ -11084,6 +11084,14 @@ modified_type_die (tree type, int cv_quals, dw_die_ref context_die)\n   if (code == ERROR_MARK)\n     return NULL;\n \n+  if (lang_hooks.types.get_debug_type)\n+    {\n+      tree debug_type = lang_hooks.types.get_debug_type (type);\n+\n+      if (debug_type != NULL_TREE && debug_type != type)\n+\treturn modified_type_die (debug_type, cv_quals, context_die);\n+    }\n+\n   cv_quals &= cv_qual_mask;\n \n   /* Don't emit DW_TAG_restrict_type for DWARFv2, since it is a type\n@@ -19073,6 +19081,19 @@ gen_descr_array_type_die (tree type, struct array_descr_info *info,\n \t\t\t dw_scalar_form_constant\n \t\t\t | dw_scalar_form_exprloc\n \t\t\t | dw_scalar_form_reference, &context);\n+      if (info->stride)\n+\t{\n+\t  const enum dwarf_attribute attr\n+\t    = (info->stride_in_bits) ? DW_AT_bit_stride : DW_AT_byte_stride;\n+\t  const int forms\n+\t    = (info->stride_in_bits)\n+\t      ? dw_scalar_form_constant\n+\t      : (dw_scalar_form_constant\n+\t\t | dw_scalar_form_exprloc\n+\t\t | dw_scalar_form_reference);\n+\n+\t  add_scalar_info (array_die, attr, info->stride, forms, &context);\n+\t}\n     }\n \n   add_gnat_descriptive_type_attribute (array_die, type, context_die);"}, {"sha": "7f4a24d977d86eced807fa50b41476c783d43259", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb59e42800b805e0bcced98ad2383c66a5839acc/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb59e42800b805e0bcced98ad2383c66a5839acc/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=eb59e42800b805e0bcced98ad2383c66a5839acc", "patch": "@@ -325,6 +325,8 @@ struct array_descr_info\n   tree data_location;\n   tree allocated;\n   tree associated;\n+  tree stride;\n+  bool stride_in_bits;\n   struct array_descr_dimen\n     {\n       /* GCC uses sizetype for array indices, so lower_bound and upper_bound\n@@ -333,6 +335,9 @@ struct array_descr_info\n       tree bounds_type;\n       tree lower_bound;\n       tree upper_bound;\n+\n+      /* Only Fortran uses more than one dimension for array types.  For other\n+\t languages, the stride can be rather specified for the whole array.  */\n       tree stride;\n     } dimen[10];\n };"}, {"sha": "1eafed6155a092800b875466960f863c1f783feb", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb59e42800b805e0bcced98ad2383c66a5839acc/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb59e42800b805e0bcced98ad2383c66a5839acc/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=eb59e42800b805e0bcced98ad2383c66a5839acc", "patch": "@@ -176,6 +176,7 @@ extern tree lhd_make_node (enum tree_code);\n #define LANG_HOOKS_DESCRIPTIVE_TYPE\tNULL\n #define LANG_HOOKS_RECONSTRUCT_COMPLEX_TYPE reconstruct_complex_type\n #define LANG_HOOKS_ENUM_UNDERLYING_BASE_TYPE lhd_enum_underlying_base_type\n+#define LANG_HOOKS_GET_DEBUG_TYPE\tNULL\n \n #define LANG_HOOKS_FOR_TYPES_INITIALIZER { \\\n   LANG_HOOKS_MAKE_TYPE, \\\n@@ -195,7 +196,8 @@ extern tree lhd_make_node (enum tree_code);\n   LANG_HOOKS_GET_SUBRANGE_BOUNDS, \\\n   LANG_HOOKS_DESCRIPTIVE_TYPE, \\\n   LANG_HOOKS_RECONSTRUCT_COMPLEX_TYPE, \\\n-  LANG_HOOKS_ENUM_UNDERLYING_BASE_TYPE \\\n+  LANG_HOOKS_ENUM_UNDERLYING_BASE_TYPE, \\\n+  LANG_HOOKS_GET_DEBUG_TYPE \\\n }\n \n /* Declaration hooks.  */"}, {"sha": "e80993b8963907d56c62b34c15db00629f15a81a", "filename": "gcc/langhooks.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb59e42800b805e0bcced98ad2383c66a5839acc/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb59e42800b805e0bcced98ad2383c66a5839acc/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=eb59e42800b805e0bcced98ad2383c66a5839acc", "patch": "@@ -143,6 +143,12 @@ struct lang_hooks_for_types\n      type_for_size.  Used in dwarf2out.c to add a DW_AT_type base type\n      reference to a DW_TAG_enumeration.  */\n   tree (*enum_underlying_base_type) (const_tree);\n+\n+  /* Return a type to use in the debug info instead of TYPE, or NULL_TREE to\n+     keep TYPE.  This is useful to keep a single \"source type\" when the\n+     middle-end uses specialized types, for instance constrained discriminated\n+     types in Ada.  */\n+  tree (*get_debug_type) (const_tree);\n };\n \n /* Language hooks related to decls and the symbol table.  */"}]}