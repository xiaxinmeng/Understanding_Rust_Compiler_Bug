{"sha": "6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI1YzdlZTBkZjZiODc3ODBmMmZkNmYyYzU3NTlhMDRlNmVlZDFmZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-04T09:03:32Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-04T09:03:32Z"}, "message": "match.pd: Optimize (x < 0) != (y < 0) into (x ^ y) < 0 [PR94718]\n\nThe following patch (on top of the two other PR94718 patches) performs the\nactual optimization requested in the PR.\n\n2020-05-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/94718\n\t* match.pd ((X < 0) != (Y < 0) into (X ^ Y) < 0): New simplification.\n\n\t* gcc.dg/tree-ssa/pr94718-4.c: New test.\n\t* gcc.dg/tree-ssa/pr94718-5.c: New test.", "tree": {"sha": "ad20e71284b9b89bbcf272c547c50ab0d8c754f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad20e71284b9b89bbcf272c547c50ab0d8c754f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "496f4f884716ae061f771a62e44868a32dbd502f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/496f4f884716ae061f771a62e44868a32dbd502f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/496f4f884716ae061f771a62e44868a32dbd502f"}], "stats": {"total": 153, "additions": 153, "deletions": 0}, "files": [{"sha": "fae7ece376a525b5fc0d1686669b38cbdf4fe675", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe", "patch": "@@ -1,5 +1,8 @@\n 2020-05-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/94718\n+\t* match.pd ((X < 0) != (Y < 0) into (X ^ Y) < 0): New simplification.\n+\n \tPR tree-optimization/94718\n \t* match.pd (bitop (convert @0) (convert? @1)): For GIMPLE, if we can,\n \treplace two nop conversions on bit_{and,ior,xor} argument"}, {"sha": "9c1e23984d600089370ca59880bf0889383a3278", "filename": "gcc/match.pd", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe", "patch": "@@ -4358,6 +4358,30 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (cmp (bit_and:cs @0 @2) (bit_and:cs @1 @2))\n   (cmp (bit_and (bit_xor @0 @1) @2) { build_zero_cst (TREE_TYPE (@2)); })))\n \n+/* (X < 0) != (Y < 0) into (X ^ Y) < 0.\n+   (X >= 0) != (Y >= 0) into (X ^ Y) < 0.\n+   (X < 0) == (Y < 0) into (X ^ Y) >= 0.\n+   (X >= 0) == (Y >= 0) into (X ^ Y) >= 0.  */\n+(for cmp (eq ne)\n+     ncmp (ge lt)\n+ (for sgncmp (ge lt)\n+  (simplify\n+   (cmp (sgncmp @0 integer_zerop@2) (sgncmp @1 integer_zerop))\n+   (if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+\t&& !TYPE_UNSIGNED (TREE_TYPE (@0))\n+\t&& types_match (@0, @1))\n+    (ncmp (bit_xor @0 @1) @2)))))\n+/* (X < 0) == (Y >= 0) into (X ^ Y) < 0.\n+   (X < 0) != (Y >= 0) into (X ^ Y) >= 0.  */\n+(for cmp (eq ne)\n+     ncmp (lt ge)\n+ (simplify\n+  (cmp:c (lt @0 integer_zerop@2) (ge @1 integer_zerop))\n+   (if (ANY_INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+\t&& !TYPE_UNSIGNED (TREE_TYPE (@0))\n+\t&& types_match (@0, @1))\n+    (ncmp (bit_xor @0 @1) @2))))\n+\n /* If we have (A & C) == C where C is a power of 2, convert this into\n    (A & C) != 0.  Similarly for NE_EXPR.  */\n (for cmp (eq ne)"}, {"sha": "2fedff399fb7cfeb8e7eca2e6bec5c7837f1dadf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe", "patch": "@@ -1,5 +1,9 @@\n 2020-05-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/94718\n+\t* gcc.dg/tree-ssa/pr94718-4.c: New test.\n+\t* gcc.dg/tree-ssa/pr94718-5.c: New test.\n+\n \tPR tree-optimization/94718\n \t* gcc.dg/tree-ssa/pr94718-3.c: New test.\n "}, {"sha": "8b9c109a0e0bd040626a63389101185ed4daa754", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr94718-4.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94718-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94718-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94718-4.c?ref=6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe", "patch": "@@ -0,0 +1,61 @@\n+/* PR tree-optimization/94718 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-ipa-icf -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"= \\[xy]_\\[0-9]+\\\\\\(D\\\\\\) \\\\^ \\[xy]_\\[0-9]+\\\\\\(D\\\\\\);\" 8 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\[0-9]+ < 0;\" 8 \"optimized\" } } */\n+\n+int\n+f1 (int x, int y)\n+{\n+  return (x < 0) != (y < 0);\n+}\n+\n+int\n+f2 (int x, int y)\n+{\n+  return (x >= 0) != (y >= 0);\n+}\n+\n+int\n+f3 (int x, int y)\n+{\n+  return (x < 0) == (y >= 0);\n+}\n+\n+int\n+f4 (int x, int y)\n+{\n+  return (x >= 0) == (y < 0);\n+}\n+\n+int\n+f5 (int x, int y)\n+{\n+  int s = (x < 0);\n+  int t = (y < 0);\n+  return s != t;\n+}\n+\n+int\n+f6 (int x, int y)\n+{\n+  int s = (x >= 0);\n+  int t = (y >= 0);\n+  return s != t;\n+}\n+\n+int\n+f7 (int x, int y)\n+{\n+  int s = (x < 0);\n+  int t = (y >= 0);\n+  return s == t;\n+}\n+\n+int\n+f8 (int x, int y)\n+{\n+  int s = (x >= 0);\n+  int t = (y < 0);\n+  return s == t;\n+}"}, {"sha": "4bd373274992015101e6e102a911c30fff416507", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr94718-5.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94718-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94718-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr94718-5.c?ref=6b5c7ee0df6b87780f2fd6f2c5759a04e6eed1fe", "patch": "@@ -0,0 +1,61 @@\n+/* PR tree-optimization/94718 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-ipa-icf -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"= \\[xy]_\\[0-9]+\\\\\\(D\\\\\\) \\\\^ \\[xy]_\\[0-9]+\\\\\\(D\\\\\\);\" 8 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\[0-9]+ >= 0;\" 8 \"optimized\" } } */\n+\n+int\n+f1 (int x, int y)\n+{\n+  return (x < 0) == (y < 0);\n+}\n+\n+int\n+f2 (int x, int y)\n+{\n+  return (x >= 0) == (y >= 0);\n+}\n+\n+int\n+f3 (int x, int y)\n+{\n+  return (x < 0) != (y >= 0);\n+}\n+\n+int\n+f4 (int x, int y)\n+{\n+  return (x >= 0) != (y < 0);\n+}\n+\n+int\n+f5 (int x, int y)\n+{\n+  int s = (x < 0);\n+  int t = (y < 0);\n+  return s == t;\n+}\n+\n+int\n+f6 (int x, int y)\n+{\n+  int s = (x >= 0);\n+  int t = (y >= 0);\n+  return s == t;\n+}\n+\n+int\n+f7 (int x, int y)\n+{\n+  int s = (x < 0);\n+  int t = (y >= 0);\n+  return s != t;\n+}\n+\n+int\n+f8 (int x, int y)\n+{\n+  int s = (x >= 0);\n+  int t = (y < 0);\n+  return s != t;\n+}"}]}