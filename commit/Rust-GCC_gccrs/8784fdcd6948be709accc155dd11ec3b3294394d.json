{"sha": "8784fdcd6948be709accc155dd11ec3b3294394d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc4NGZkY2Q2OTQ4YmU3MDlhY2NjMTU1ZGQxMWVjM2IzMjk0Mzk0ZA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-05-06T20:00:03Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-05-06T20:00:03Z"}, "message": "cpphash.h: Remove conditional #define of __extension__.\n\ngcc:\n\t* cpphash.h: Remove conditional #define of __extension__.\n\t* rtl.h: Add __extension__ to RTL_CHECK1, RTL_CHECK2,\n\tRTL_CHECKC1, RTL_CHECKC2, and RTVEC_ELT macros\n\t(ENABLE_RTL_CHECKING only).\n\t* tree.h: Add __extension__ to TREE_CHECK, TREE_CLASS_CHECK,\n\tCST_OR_CONSTRUCTOR_CHECK, and EXPR_CHECK macros\n\t(ENABLE_TREE_CHECKING only).\n\t* varray.h: Add __extension__ to VARRAY_CHECK macro\n\t(ENABLE_CHECKING only).\n\ninclude:\n\t* ansidecl.h: #define __extension__ to nothing if\n\tGCC_VERSION < 2008.\n\nFrom-SVN: r33733", "tree": {"sha": "6f7e2ff75e7f61fbe2cbff3e77a3c645d858d240", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f7e2ff75e7f61fbe2cbff3e77a3c645d858d240"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8784fdcd6948be709accc155dd11ec3b3294394d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8784fdcd6948be709accc155dd11ec3b3294394d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8784fdcd6948be709accc155dd11ec3b3294394d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8784fdcd6948be709accc155dd11ec3b3294394d/comments", "author": null, "committer": null, "parents": [{"sha": "d44725ebf5cfe362e195c9f09e7e67dd02208759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d44725ebf5cfe362e195c9f09e7e67dd02208759", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d44725ebf5cfe362e195c9f09e7e67dd02208759"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "06f25313db3926acb3de68d8e0637355bef355b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8784fdcd6948be709accc155dd11ec3b3294394d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8784fdcd6948be709accc155dd11ec3b3294394d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8784fdcd6948be709accc155dd11ec3b3294394d", "patch": "@@ -1,3 +1,15 @@\n+2000-05-06  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+ \t* cpphash.h: Remove conditional #define of __extension__.\n+ \t* rtl.h: Add __extension__ to RTL_CHECK1, RTL_CHECK2,\n+ \tRTL_CHECKC1, RTL_CHECKC2, and RTVEC_ELT macros\n+ \t(ENABLE_RTL_CHECKING only).\n+ \t* tree.h: Add __extension__ to TREE_CHECK, TREE_CLASS_CHECK,\n+ \tCST_OR_CONSTRUCTOR_CHECK, and EXPR_CHECK macros\n+ \t(ENABLE_TREE_CHECKING only).\n+ \t* varray.h: Add __extension__ to VARRAY_CHECK macro\n+ \t(ENABLE_CHECKING only).\n+\n 2000-05-06  Richard Earnshaw (reanrsha@arm.com)\n \n \tUse new tail-calling mechanism on ARM."}, {"sha": "925aac7601f6ee8fe08b8b80961db9ace394e218", "filename": "gcc/cpphash.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8784fdcd6948be709accc155dd11ec3b3294394d/gcc%2Fcpphash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8784fdcd6948be709accc155dd11ec3b3294394d/gcc%2Fcpphash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.h?ref=8784fdcd6948be709accc155dd11ec3b3294394d", "patch": "@@ -25,13 +25,6 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n typedef unsigned char U_CHAR;\n #define U (const U_CHAR *)  /* Intended use: U\"string\" */\n \n-/* gcc 2.7.2 can't handle __extension__ const char array[] = { ... }.\n-   I don't know when this was added - be conservative, assume it only\n-   works in 2.95.  */\n-#if GCC_VERSION < 2095\n-#define __extension__\n-#endif\n-\n /* The structure of a node in the hash table.  The hash table\n    has entries for all tokens defined by #define commands (type T_MACRO),\n    plus some special tokens like __LINE__ (these each have their own"}, {"sha": "815cb0dc04117e72fc0bc755bc3843c5b7e9eb16", "filename": "gcc/rtl.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8784fdcd6948be709accc155dd11ec3b3294394d/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8784fdcd6948be709accc155dd11ec3b3294394d/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=8784fdcd6948be709accc155dd11ec3b3294394d", "patch": "@@ -219,7 +219,7 @@ typedef struct rtvec_def{\n #if defined ENABLE_RTL_CHECKING && (GCC_VERSION >= 2007)\n /* The bit with a star outside the statement expr and an & inside is\n    so that N can be evaluated only once.  */\n-#define RTL_CHECK1(RTX, N, C1)\t\t\t\t\t\t\\\n+#define RTL_CHECK1(RTX, N, C1) __extension__\t\t\t\t\\\n (*({ rtx _rtx = (RTX); int _n = (N);\t\t\t\t\t\\\n      enum rtx_code _code = GET_CODE (_rtx);\t\t\t\t\\\n      if (_n < 0 || _n >= GET_RTX_LENGTH (_code))\t\t\t\\\n@@ -230,7 +230,7 @@ typedef struct rtvec_def{\n \t\t\t       __PRETTY_FUNCTION__);\t\t\t\\\n      &_rtx->fld[_n]; }))\n \n-#define RTL_CHECK2(RTX, N, C1, C2)\t\t\t\t\t\\\n+#define RTL_CHECK2(RTX, N, C1, C2) __extension__\t\t\t\\\n (*({ rtx _rtx = (RTX); int _n = (N);\t\t\t\t\t\\\n      enum rtx_code _code = GET_CODE (_rtx);\t\t\t\t\\\n      if (_n < 0 || _n >= GET_RTX_LENGTH (_code))\t\t\t\\\n@@ -242,22 +242,22 @@ typedef struct rtvec_def{\n \t\t\t       __PRETTY_FUNCTION__);\t\t\t\\\n      &_rtx->fld[_n]; }))\n \n-#define RTL_CHECKC1(RTX, N, C)\t\t\t\t\t\t\\\n+#define RTL_CHECKC1(RTX, N, C) __extension__\t\t\t\t\\\n (*({ rtx _rtx = (RTX); int _n = (N);\t\t\t\t\t\\\n      if (GET_CODE (_rtx) != C)\t\t\t\t\t\t\\\n        rtl_check_failed_code1 (_rtx, C, __FILE__, __LINE__,\t\t\\\n \t\t\t       __PRETTY_FUNCTION__);\t\t\t\\\n      &_rtx->fld[_n]; }))\n \n-#define RTL_CHECKC2(RTX, N, C1, C2)\t\t\t\t\t\\\n+#define RTL_CHECKC2(RTX, N, C1, C2) __extension__\t\t\t\\\n (*({ rtx _rtx = (RTX); int _n = (N);\t\t\t\t\t\\\n      enum rtx_code _code = GET_CODE (_rtx);\t\t\t\t\\\n      if (_code != C1 && _code != C2)\t\t\t\t\t\\\n        rtl_check_failed_code2 (_rtx, C1, C2, __FILE__, __LINE__,\t\\\n \t\t\t       __PRETTY_FUNCTION__);\t\t\t\\\n      &_rtx->fld[_n]; }))\n \n-#define RTVEC_ELT(RTVEC, I)\t\t\t\t\t\t\\\n+#define RTVEC_ELT(RTVEC, I) __extension__\t\t\t\t\\\n (*({ rtvec _rtvec = (RTVEC); int _i = (I);\t\t\t\t\\\n      if (_i < 0 || _i >= GET_NUM_ELEM (_rtvec))\t\t\t\t\\\n        rtvec_check_failed_bounds (_rtvec, _i, __FILE__, __LINE__,\t\\"}, {"sha": "0bbf784e3c1f83a833699990dc42d9f0d4eda182", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8784fdcd6948be709accc155dd11ec3b3294394d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8784fdcd6948be709accc155dd11ec3b3294394d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=8784fdcd6948be709accc155dd11ec3b3294394d", "patch": "@@ -277,28 +277,28 @@ struct tree_common\n    is accessed incorrectly. The macros abort with a fatal error.  */\n #if defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 2007)\n \n-#define TREE_CHECK(t, code)\t\t\t\t\t\t\\\n+#define TREE_CHECK(t, code) __extension__\t\t\t\t\\\n ({  const tree __t = t;\t\t\t\t\t\t\t\\\n     if (TREE_CODE(__t) != (code))\t\t\t\t\t\\\n       tree_check_failed (__t, code, __FILE__,\t\t\t\t\\\n \t\t\t __LINE__, __PRETTY_FUNCTION__);\t\t\\\n     __t; })\n-#define TREE_CLASS_CHECK(t, class)\t\t\t\t\t\\\n+#define TREE_CLASS_CHECK(t, class) __extension__\t\t\t\\\n ({  const tree __t = t;\t\t\t\t\t\t\t\\\n     if (TREE_CODE_CLASS(TREE_CODE(__t)) != (class))\t\t\t\\\n       tree_class_check_failed (__t, class, __FILE__,\t\t\t\\\n \t\t\t       __LINE__, __PRETTY_FUNCTION__);\t\t\\\n     __t; })\n \n /* These checks have to be special cased.  */\n-#define CST_OR_CONSTRUCTOR_CHECK(t)\t\t\t\t\t\\\n+#define CST_OR_CONSTRUCTOR_CHECK(t) __extension__\t\t\t\\\n ({  const tree __t = t;\t\t\t\t\t\t\t\\\n     enum tree_code __c = TREE_CODE(__t);\t\t\t\t\\\n     if (__c != CONSTRUCTOR && TREE_CODE_CLASS(__c) != 'c')\t\t\\\n       tree_check_failed (__t, CONSTRUCTOR, __FILE__,\t\t\t\\\n \t\t\t __LINE__, __PRETTY_FUNCTION__);\t\t\\\n     __t; })\n-#define EXPR_CHECK(t)\t\t\t\t\t\t\t\\\n+#define EXPR_CHECK(t) __extension__\t\t\t\t\t\\\n ({  const tree __t = t;\t\t\t\t\t\t\t\\\n     char __c = TREE_CODE_CLASS(TREE_CODE(__t));\t\t\t\t\\\n     if (__c != 'r' && __c != 's' && __c != '<'\t\t\t\t\\"}, {"sha": "ad0741a305e0a4725083bfeaf1f5e19ebe5f4f14", "filename": "gcc/varray.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8784fdcd6948be709accc155dd11ec3b3294394d/gcc%2Fvarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8784fdcd6948be709accc155dd11ec3b3294394d/gcc%2Fvarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.h?ref=8784fdcd6948be709accc155dd11ec3b3294394d", "patch": "@@ -176,7 +176,7 @@ extern varray_type varray_grow\tPARAMS ((varray_type, size_t));\n extern void varray_check_failed PARAMS ((varray_type, size_t,\n \t\t\t\t\tconst char *, int,\n \t\t\t\t\tconst char *)) ATTRIBUTE_NORETURN;\n-#define VARRAY_CHECK(VA, N, T)\t\t\t\t\t\\\n+#define VARRAY_CHECK(VA, N, T) __extension__\t\t\t\\\n (*({ varray_type _va = VA;\t\t\t\t\t\\\n      size_t _n = N; \t\t\t\t\t\t\\\n      if (_n >= _va->num_elements)\t\t\t\t\\"}, {"sha": "3658cc4d4d137d5d2264bd6f7867f98cbe41055f", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8784fdcd6948be709accc155dd11ec3b3294394d/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8784fdcd6948be709accc155dd11ec3b3294394d/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=8784fdcd6948be709accc155dd11ec3b3294394d", "patch": "@@ -1,3 +1,8 @@\n+2000-05-06  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+ \t* ansidecl.h: #define __extension__ to nothing if\n+ \tGCC_VERSION < 2008.\n+\n 2000-05-04  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* demangle.h (demangler_engine): Constify."}, {"sha": "e7852c6845886a50eaf1a888ad1fd25ecc7c025f", "filename": "include/ansidecl.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8784fdcd6948be709accc155dd11ec3b3294394d/include%2Fansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8784fdcd6948be709accc155dd11ec3b3294394d/include%2Fansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fansidecl.h?ref=8784fdcd6948be709accc155dd11ec3b3294394d", "patch": "@@ -222,4 +222,11 @@ So instead we use the macro below and test it against specific values.  */\n #define ATTRIBUTE_PRINTF_5 ATTRIBUTE_PRINTF(5, 6)\n #endif /* ATTRIBUTE_PRINTF */\n \n+/* We use __extension__ in some places to suppress -pedantic warnings\n+   about GCC extensions.  This feature didn't work properly before\n+   gcc 2.8.  */\n+#if GCC_VERSION < 2008\n+#define __extension__\n+#endif\n+\n #endif\t/* ansidecl.h\t*/"}]}