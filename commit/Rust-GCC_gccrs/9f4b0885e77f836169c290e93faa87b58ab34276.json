{"sha": "9f4b0885e77f836169c290e93faa87b58ab34276", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY0YjA4ODVlNzdmODM2MTY5YzI5MGU5M2ZhYTg3YjU4YWIzNDI3Ng==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2018-01-23T09:55:37Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-01-23T09:55:37Z"}, "message": "predict.c (probably_never_executed): Only use precise profile info.\n\n\t* predict.c (probably_never_executed): Only use precise profile info.\n\t(compute_function_frequency): Skip after inlining hack since we now\n\thave quality checking.\n\nFrom-SVN: r256975", "tree": {"sha": "aab41c448f8a341f2b9981beba03fcff02e3202e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aab41c448f8a341f2b9981beba03fcff02e3202e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f4b0885e77f836169c290e93faa87b58ab34276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f4b0885e77f836169c290e93faa87b58ab34276", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f4b0885e77f836169c290e93faa87b58ab34276", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f4b0885e77f836169c290e93faa87b58ab34276/comments", "author": null, "committer": null, "parents": [{"sha": "dae3e97c81811d87cd9d58e68a85dda83676b7f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dae3e97c81811d87cd9d58e68a85dda83676b7f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dae3e97c81811d87cd9d58e68a85dda83676b7f4"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "747c3b48ab9fc185a19583792250aca63ba29410", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f4b0885e77f836169c290e93faa87b58ab34276/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f4b0885e77f836169c290e93faa87b58ab34276/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9f4b0885e77f836169c290e93faa87b58ab34276", "patch": "@@ -1,3 +1,9 @@\n+2018-01-23  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* predict.c (probably_never_executed): Only use precise profile info.\n+\t(compute_function_frequency): Skip after inlining hack since we now\n+\thave quality checking.\n+\n 2018-01-23  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* profile-count.h (profile_probability::very_unlikely,"}, {"sha": "724ba458db9c6bff6d3337e21801bc87035e06c4", "filename": "gcc/predict.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f4b0885e77f836169c290e93faa87b58ab34276/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f4b0885e77f836169c290e93faa87b58ab34276/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=9f4b0885e77f836169c290e93faa87b58ab34276", "patch": "@@ -212,7 +212,12 @@ probably_never_executed (struct function *fun,\n   gcc_checking_assert (fun);\n   if (count == profile_count::zero ())\n     return true;\n-  if (count.initialized_p () && profile_status_for_fn (fun) == PROFILE_READ)\n+  /* Do not trust adjusted counts.  This will make us to drop int cold section\n+     code with low execution count as a result of inlining. These low counts\n+     are not safe even with read profile and may lead us to dropping\n+     code which actually gets executed into cold section of binary that is not\n+     desirable.  */\n+  if (count.precise_p () && profile_status_for_fn (fun) == PROFILE_READ)\n     {\n       int unlikely_count_fraction = PARAM_VALUE (UNLIKELY_BB_COUNT_FRACTION);\n       if (count.apply_scale (unlikely_count_fraction, 1) >= profile_info->runs)\n@@ -3759,15 +3764,10 @@ compute_function_frequency (void)\n       return;\n     }\n \n-  /* Only first time try to drop function into unlikely executed.\n-     After inlining the roundoff errors may confuse us.\n-     Ipa-profile pass will drop functions only called from unlikely\n-     functions to unlikely and that is most of what we care about.  */\n-  if (!cfun->after_inlining)\n-    {\n-      node->frequency = NODE_FREQUENCY_UNLIKELY_EXECUTED;\n-      warn_function_cold (current_function_decl);\n-    }\n+  node->frequency = NODE_FREQUENCY_UNLIKELY_EXECUTED;\n+  warn_function_cold (current_function_decl);\n+  if (ENTRY_BLOCK_PTR_FOR_FN (cfun)->count.ipa() == profile_count::zero ())\n+    return;\n   FOR_EACH_BB_FN (bb, cfun)\n     {\n       if (maybe_hot_bb_p (cfun, bb))"}]}