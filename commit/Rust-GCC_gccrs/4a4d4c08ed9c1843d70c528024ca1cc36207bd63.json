{"sha": "4a4d4c08ed9c1843d70c528024ca1cc36207bd63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGE0ZDRjMDhlZDljMTg0M2Q3MGM1MjgwMjRjYTFjYzM2MjA3YmQ2Mw==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2010-01-20T22:57:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-01-20T22:57:20Z"}, "message": "re PR debug/42782 (VTA missed location: parameter via stack)\n\n\tPR debug/42782\n\t* var-tracking.c: Include tree-flow.h.\n\t(mem_dies_at_call): New.\n\t(dataflow_set_preserve_mem_locs): Use it.\n\t(dataflow_set_remove_mem_locs): Likewise.\n\t(dump_var): Renamed from dump_variable.  Adjust all callers.\n\t(dump_var_slot): Renamed from dump_variable_slot.  Likewise.\n\t* Makefile.in (var-tracking.o): Adjust deps.\n\n\t* gcc.dg/guality/pr42782.c: New.\n\nFrom-SVN: r156092", "tree": {"sha": "4088f82d6455c183fee2c4833a094934305ba26d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4088f82d6455c183fee2c4833a094934305ba26d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a4d4c08ed9c1843d70c528024ca1cc36207bd63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a4d4c08ed9c1843d70c528024ca1cc36207bd63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a4d4c08ed9c1843d70c528024ca1cc36207bd63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a4d4c08ed9c1843d70c528024ca1cc36207bd63/comments", "author": null, "committer": null, "parents": [{"sha": "50e87e30cdd8439fd7c6382f5c3c96653054b363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50e87e30cdd8439fd7c6382f5c3c96653054b363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50e87e30cdd8439fd7c6382f5c3c96653054b363"}], "stats": {"total": 110, "additions": 88, "deletions": 22}, "files": [{"sha": "b926d9ef7b37c85b230882b204e448e597868f4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4d4c08ed9c1843d70c528024ca1cc36207bd63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4d4c08ed9c1843d70c528024ca1cc36207bd63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a4d4c08ed9c1843d70c528024ca1cc36207bd63", "patch": "@@ -1,3 +1,14 @@\n+2010-01-20  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR debug/42782\n+\t* var-tracking.c: Include tree-flow.h.\n+\t(mem_dies_at_call): New.\n+\t(dataflow_set_preserve_mem_locs): Use it.\n+\t(dataflow_set_remove_mem_locs): Likewise.\n+\t(dump_var): Renamed from dump_variable.  Adjust all callers.\n+\t(dump_var_slot): Renamed from dump_variable_slot.  Likewise.\n+\t* Makefile.in (var-tracking.o): Adjust deps.\n+\n 2010-01-20  Joern Rennecke  <amylaar@spamcop.net>\n \n \t* doc/tm.texi (TARGET_SCHED_SET_SCHED_FLAGS): Fix argument list."}, {"sha": "c388586ed65bb58c0d99ae9d63b30b79c0076f25", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4d4c08ed9c1843d70c528024ca1cc36207bd63/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4d4c08ed9c1843d70c528024ca1cc36207bd63/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4a4d4c08ed9c1843d70c528024ca1cc36207bd63", "patch": "@@ -3024,7 +3024,8 @@ regstat.o : regstat.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n var-tracking.o : var-tracking.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(RTL_H) $(TREE_H) hard-reg-set.h insn-config.h reload.h $(FLAGS_H) \\\n    $(BASIC_BLOCK_H) output.h sbitmap.h alloc-pool.h $(FIBHEAP_H) $(HASHTAB_H) \\\n-   $(REGS_H) $(EXPR_H) $(TIMEVAR_H) $(TREE_PASS_H) cselib.h $(TARGET_H)\n+   $(REGS_H) $(EXPR_H) $(TIMEVAR_H) $(TREE_PASS_H) $(TREE_FLOW_H) \\\n+   cselib.h $(TARGET_H)\n profile.o : profile.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) output.h $(REGS_H) $(EXPR_H) $(FUNCTION_H) \\\n    $(TOPLEV_H) $(COVERAGE_H) $(TREE_FLOW_H) value-prof.h cfghooks.h \\"}, {"sha": "faf0f055187cfba9956e39d8574bd9b1e794caa7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4d4c08ed9c1843d70c528024ca1cc36207bd63/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4d4c08ed9c1843d70c528024ca1cc36207bd63/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4a4d4c08ed9c1843d70c528024ca1cc36207bd63", "patch": "@@ -1,3 +1,8 @@\n+2010-01-20  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\tPR debug/42782\n+\t* gcc.dg/guality/pr42782.c: New.\n+\n 2010-01-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/41788"}, {"sha": "6a880814aaf3af79e45ba3580ec366ec5523aac8", "filename": "gcc/testsuite/gcc.dg/guality/pr42782.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4d4c08ed9c1843d70c528024ca1cc36207bd63/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr42782.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4d4c08ed9c1843d70c528024ca1cc36207bd63/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr42782.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fpr42782.c?ref=4a4d4c08ed9c1843d70c528024ca1cc36207bd63", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-options \"-g\" } */\n+\n+#include \"guality.h\"\n+\n+void __attribute__ ((__noinline__))\n+g (void)\n+{\n+  asm volatile (\"\");\n+}\n+\n+int\n+f (int a)\n+{\n+  g ();\n+  GUALCHKVAL (a);\n+  return a;\n+}\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  f (argc + 2);\n+  f (argc + 5);\n+}"}, {"sha": "d3eee441a55a0012ce1f03c887a2a2a2ebfb7cfc", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 46, "deletions": 21, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a4d4c08ed9c1843d70c528024ca1cc36207bd63/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a4d4c08ed9c1843d70c528024ca1cc36207bd63/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=4a4d4c08ed9c1843d70c528024ca1cc36207bd63", "patch": "@@ -106,6 +106,7 @@\n #include \"expr.h\"\n #include \"timevar.h\"\n #include \"tree-pass.h\"\n+#include \"tree-flow.h\"\n #include \"cselib.h\"\n #include \"target.h\"\n \n@@ -446,8 +447,8 @@ static bool compute_bb_dataflow (basic_block);\n static void vt_find_locations (void);\n \n static void dump_attrs_list (attrs);\n-static int dump_variable_slot (void **, void *);\n-static void dump_variable (variable);\n+static int dump_var_slot (void **, void *);\n+static void dump_var (variable);\n static void dump_vars (htab_t);\n static void dump_dataflow_set (dataflow_set *);\n static void dump_dataflow_sets (void);\n@@ -3716,13 +3717,32 @@ find_mem_expr_in_1pdv (tree expr, rtx val, htab_t vars)\n   return where;\n }\n \n+/* Return TRUE if the value of MEM may vary across a call.  */\n+\n+static bool\n+mem_dies_at_call (rtx mem)\n+{\n+  tree expr = MEM_EXPR (mem);\n+  tree decl;\n+\n+  if (!expr)\n+    return true;\n+\n+  decl = get_base_address (expr);\n+\n+  if (!decl)\n+    return true;\n+\n+  if (!DECL_P (decl))\n+    return true;\n+\n+  return (may_be_aliased (decl)\n+\t  || (!TREE_READONLY (decl) && is_global_var (decl)));\n+}\n+\n /* Remove all MEMs from the location list of a hash table entry for a\n    one-part variable, except those whose MEM attributes map back to\n-   the variable itself, directly or within a VALUE.\n-\n-   ??? We could also preserve MEMs that reference stack slots that are\n-   annotated as not addressable.  This is arguably even more reliable\n-   than the current heuristic.  */\n+   the variable itself, directly or within a VALUE.  */\n \n static int\n dataflow_set_preserve_mem_locs (void **slot, void *data)\n@@ -3744,16 +3764,18 @@ dataflow_set_preserve_mem_locs (void **slot, void *data)\n \t{\n \t  for (loc = var->var_part[0].loc_chain; loc; loc = loc->next)\n \t    {\n-\t      /* We want to remove a MEM that doesn't refer to DECL.  */\n+\t      /* We want to remove dying MEMs that doesn't refer to\n+\t\t DECL.  */\n \t      if (GET_CODE (loc->loc) == MEM\n \t\t  && (MEM_EXPR (loc->loc) != decl\n-\t\t      || MEM_OFFSET (loc->loc)))\n+\t\t      || MEM_OFFSET (loc->loc))\n+\t\t  && !mem_dies_at_call (loc->loc))\n \t\tbreak;\n-\t      /* We want to move here a MEM that does refer to DECL.  */\n+\t      /* We want to move here MEMs that do refer to DECL.  */\n \t      else if (GET_CODE (loc->loc) == VALUE\n \t\t       && find_mem_expr_in_1pdv (decl, loc->loc,\n \t\t\t\t\t\t shared_hash_htab (set->vars)))\n-\t      break;\n+\t\tbreak;\n \t    }\n \n \t  if (!loc)\n@@ -3790,7 +3812,8 @@ dataflow_set_preserve_mem_locs (void **slot, void *data)\n \n \t  if (GET_CODE (loc->loc) != MEM\n \t      || (MEM_EXPR (loc->loc) == decl\n-\t\t  && MEM_OFFSET (loc->loc) == 0))\n+\t\t  && MEM_OFFSET (loc->loc) == 0)\n+\t      || !mem_dies_at_call (loc->loc))\n \t    {\n \t      if (old_loc != loc->loc && emit_notes)\n \t\t{\n@@ -3838,7 +3861,8 @@ dataflow_set_remove_mem_locs (void **slot, void *data)\n       if (var->refcount > 1 || shared_hash_shared (set->vars))\n \t{\n \t  for (loc = var->var_part[0].loc_chain; loc; loc = loc->next)\n-\t    if (GET_CODE (loc->loc) == MEM)\n+\t    if (GET_CODE (loc->loc) == MEM\n+\t\t&& mem_dies_at_call (loc->loc))\n \t      break;\n \n \t  if (!loc)\n@@ -3852,7 +3876,8 @@ dataflow_set_remove_mem_locs (void **slot, void *data)\n       for (locp = &var->var_part[0].loc_chain, loc = *locp;\n \t   loc; loc = *locp)\n \t{\n-\t  if (GET_CODE (loc->loc) != MEM)\n+\t  if (GET_CODE (loc->loc) != MEM\n+\t      || !mem_dies_at_call (loc->loc))\n \t    {\n \t      locp = &loc->next;\n \t      continue;\n@@ -4034,7 +4059,7 @@ dataflow_set_different_1 (void **slot, void *data)\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"dataflow difference found: removal of:\\n\");\n-\t  dump_variable (var1);\n+\t  dump_var (var1);\n \t}\n \n       /* Stop traversing the hash table.  */\n@@ -4048,8 +4073,8 @@ dataflow_set_different_1 (void **slot, void *data)\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n \t  fprintf (dump_file, \"dataflow difference found: old and new follow:\\n\");\n-\t  dump_variable (var1);\n-\t  dump_variable (var2);\n+\t  dump_var (var1);\n+\t  dump_var (var2);\n \t}\n \n       /* Stop traversing the hash table.  */\n@@ -5703,11 +5728,11 @@ dump_attrs_list (attrs list)\n /* Print the information about variable *SLOT to dump file.  */\n \n static int\n-dump_variable_slot (void **slot, void *data ATTRIBUTE_UNUSED)\n+dump_var_slot (void **slot, void *data ATTRIBUTE_UNUSED)\n {\n   variable var = (variable) *slot;\n \n-  dump_variable (var);\n+  dump_var (var);\n \n   /* Continue traversing the hash table.  */\n   return 1;\n@@ -5716,7 +5741,7 @@ dump_variable_slot (void **slot, void *data ATTRIBUTE_UNUSED)\n /* Print the information about variable VAR to dump file.  */\n \n static void\n-dump_variable (variable var)\n+dump_var (variable var)\n {\n   int i;\n   location_chain node;\n@@ -5763,7 +5788,7 @@ dump_vars (htab_t vars)\n   if (htab_elements (vars) > 0)\n     {\n       fprintf (dump_file, \"Variables:\\n\");\n-      htab_traverse (vars, dump_variable_slot, NULL);\n+      htab_traverse (vars, dump_var_slot, NULL);\n     }\n }\n "}]}