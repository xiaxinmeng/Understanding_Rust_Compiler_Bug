{"sha": "4f9664f71a5fceee103a188fd2cd8b70e1d6e584", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY5NjY0ZjcxYTVmY2VlZTEwM2ExODhmZDJjZDhiNzBlMWQ2ZTU4NA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2011-12-23T21:40:42Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2011-12-23T21:40:42Z"}, "message": "score.h (REGISTER_MOVE_COST, [...]): Remove.\n\n\t* config/score/score.h (REGISTER_MOVE_COST, MEMORY_MOVE_COST): Remove.\n\t* config/score/score-protos.h (score_register_move_cost): Remove.\n\t* config/score/score.c (TARGET_REGISTER_MOVE_COST): Define.\n\t(score_register_move_cost): Make static. Change arguments type from\n\tenum reg_class to reg_class_t.\n\nFrom-SVN: r182666", "tree": {"sha": "53c9ff900b40d8eb643b4ebfcd7675b2e4e181df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53c9ff900b40d8eb643b4ebfcd7675b2e4e181df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f9664f71a5fceee103a188fd2cd8b70e1d6e584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f9664f71a5fceee103a188fd2cd8b70e1d6e584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f9664f71a5fceee103a188fd2cd8b70e1d6e584", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f9664f71a5fceee103a188fd2cd8b70e1d6e584/comments", "author": null, "committer": null, "parents": [{"sha": "54eca047c7524a9cb61fe97c21b1d2157223b54a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54eca047c7524a9cb61fe97c21b1d2157223b54a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54eca047c7524a9cb61fe97c21b1d2157223b54a"}], "stats": {"total": 29, "additions": 16, "deletions": 13}, "files": [{"sha": "278464097e91c8e4d2182a6e4ec201b57398acb3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f9664f71a5fceee103a188fd2cd8b70e1d6e584/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f9664f71a5fceee103a188fd2cd8b70e1d6e584/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f9664f71a5fceee103a188fd2cd8b70e1d6e584", "patch": "@@ -1,3 +1,11 @@\n+2011-12-23  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/score/score.h (REGISTER_MOVE_COST, MEMORY_MOVE_COST): Remove.\n+\t* config/score/score-protos.h (score_register_move_cost): Remove.\n+\t* config/score/score.c (TARGET_REGISTER_MOVE_COST): Define.\n+\t(score_register_move_cost): Make static. Change arguments type from\n+\tenum reg_class to reg_class_t.\n+\n 2011-12-23  Jakub Jelinek  <jakub@redhat.com>\n \t    Richard Henderson  <rth@redhat.com>\n "}, {"sha": "8dbebcbe241f35c7da07aa8db9b16bfe4634d0cd", "filename": "gcc/config/score/score-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f9664f71a5fceee103a188fd2cd8b70e1d6e584/gcc%2Fconfig%2Fscore%2Fscore-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f9664f71a5fceee103a188fd2cd8b70e1d6e584/gcc%2Fconfig%2Fscore%2Fscore-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore-protos.h?ref=4f9664f71a5fceee103a188fd2cd8b70e1d6e584", "patch": "@@ -42,8 +42,6 @@ extern bool score_block_move (rtx* ops);\n extern int score_address_cost (rtx addr, bool speed);\n extern int score_address_p (enum machine_mode mode, rtx x, int strict);\n extern int score_reg_class (int regno);\n-extern int score_register_move_cost (enum machine_mode mode, enum reg_class to,\n-                                     enum reg_class from);\n extern int score_hard_regno_mode_ok (unsigned int, enum machine_mode);\n extern int score_const_ok_for_letter_p (HOST_WIDE_INT value, char c);\n extern int score_extra_constraint (rtx op, char c);"}, {"sha": "28a0265978b9286f383a5885ab594fc34b6e67c4", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f9664f71a5fceee103a188fd2cd8b70e1d6e584/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f9664f71a5fceee103a188fd2cd8b70e1d6e584/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=4f9664f71a5fceee103a188fd2cd8b70e1d6e584", "patch": "@@ -187,6 +187,9 @@ struct extern_list *extern_head = 0;\n #undef TARGET_TRAMPOLINE_INIT\n #define TARGET_TRAMPOLINE_INIT\t\tscore_trampoline_init\n \n+#undef TARGET_REGISTER_MOVE_COST\n+#define TARGET_REGISTER_MOVE_COST\tscore_register_move_cost\n+\n /* Return true if SYMBOL is a SYMBOL_REF and OFFSET + SYMBOL points\n    to the same object as SYMBOL.  */\n static int\n@@ -998,11 +1001,13 @@ score_legitimate_address_p (enum machine_mode mode, rtx x, bool strict)\n   return score_classify_address (&addr, mode, x, strict);\n }\n \n-/* Return a number assessing the cost of moving a register in class\n+/* Implement TARGET_REGISTER_MOVE_COST.\n+\n+   Return a number assessing the cost of moving a register in class\n    FROM to class TO. */\n-int\n+static int\n score_register_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n-                          enum reg_class from, enum reg_class to)\n+                          reg_class_t from, reg_class_t to)\n {\n   if (GR_REG_CLASS_P (from))\n     {"}, {"sha": "ced282d6382cff92469e46b52e22d9c9e347f562", "filename": "gcc/config/score/score.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f9664f71a5fceee103a188fd2cd8b70e1d6e584/gcc%2Fconfig%2Fscore%2Fscore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f9664f71a5fceee103a188fd2cd8b70e1d6e584/gcc%2Fconfig%2Fscore%2Fscore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.h?ref=4f9664f71a5fceee103a188fd2cd8b70e1d6e584", "patch": "@@ -601,14 +601,6 @@ typedef struct score_args\n #define REVERSIBLE_CC_MODE(MODE)        1\n \n /* Describing Relative Costs of Operations  */\n-/* Compute extra cost of moving data between one register class and another.  */\n-#define REGISTER_MOVE_COST(MODE, FROM, TO) \\\n-  score_register_move_cost (MODE, FROM, TO)\n-\n-/* Moves to and from memory are quite expensive */\n-#define MEMORY_MOVE_COST(MODE, CLASS, TO_P) \\\n-  (4 + memory_move_secondary_cost ((MODE), (CLASS), (TO_P)))\n-\n /* Try to generate sequences that don't involve branches.  */\n #define BRANCH_COST(speed_p, predictable_p) 2\n "}]}