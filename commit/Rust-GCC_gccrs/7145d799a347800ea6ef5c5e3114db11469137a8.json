{"sha": "7145d799a347800ea6ef5c5e3114db11469137a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE0NWQ3OTlhMzQ3ODAwZWE2ZWY1YzVlMzExNGRiMTE0NjkxMzdhOA==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-07-05T07:02:32Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-05T07:02:32Z"}, "message": "[Ada] Spurious error on aggregate with choice that is predicted subtype\n\nThis patch fixes a spurious error on a record aggregate for a variant\nrecord when a choice in the aggregate is given by a subtype with a\nstatic predicate. The same expansion mechanism for such a variant, used\nin case statements, must be used here as well.\n\n2019-07-05  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_util.adb (Encloing_Subprogram): If Enclosing_Dynamic_Scope\n\tis a loop, continue climbing the scope stack to find the\n\tenclosing subprogram.\n\t(Gather_Components): Handle properly a choice in a record\n\taggregate that is given by a subtype with a static predicate.\n\ngcc/testsuite/\n\n\t* gnat.dg/aggr25.adb, gnat.dg/aggr25.ads: New testcase.\n\nFrom-SVN: r273112", "tree": {"sha": "d874d49dca886c171bfa46dd98eb0ce2947fbdf6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d874d49dca886c171bfa46dd98eb0ce2947fbdf6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7145d799a347800ea6ef5c5e3114db11469137a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7145d799a347800ea6ef5c5e3114db11469137a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7145d799a347800ea6ef5c5e3114db11469137a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7145d799a347800ea6ef5c5e3114db11469137a8/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de70d01f1a3f52654d39ecb97bd769032e5e2a60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de70d01f1a3f52654d39ecb97bd769032e5e2a60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de70d01f1a3f52654d39ecb97bd769032e5e2a60"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "cac6be71dc28d5af70ac0be540e405a5ba437394", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7145d799a347800ea6ef5c5e3114db11469137a8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7145d799a347800ea6ef5c5e3114db11469137a8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7145d799a347800ea6ef5c5e3114db11469137a8", "patch": "@@ -1,3 +1,11 @@\n+2019-07-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_util.adb (Encloing_Subprogram): If Enclosing_Dynamic_Scope\n+\tis a loop, continue climbing the scope stack to find the\n+\tenclosing subprogram.\n+\t(Gather_Components): Handle properly a choice in a record\n+\taggregate that is given by a subtype with a static predicate.\n+\n 2019-07-05  Javier Miranda  <miranda@adacore.com>\n \n \t* debug.adb (-gnatd.K): Leave available this switch."}, {"sha": "5c336940517773e910f2b32f5c814c86232dc694", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7145d799a347800ea6ef5c5e3114db11469137a8/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7145d799a347800ea6ef5c5e3114db11469137a8/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=7145d799a347800ea6ef5c5e3114db11469137a8", "patch": "@@ -6895,7 +6895,7 @@ package body Sem_Util is\n       elsif Ekind (Dyn_Scop) = E_Subprogram_Body then\n          return Corresponding_Spec (Parent (Parent (Dyn_Scop)));\n \n-      elsif Ekind_In (Dyn_Scop, E_Block, E_Return_Statement) then\n+      elsif Ekind_In (Dyn_Scop, E_Block, E_Return_Statement, E_Loop) then\n          return Enclosing_Subprogram (Dyn_Scop);\n \n       elsif Ekind (Dyn_Scop) = E_Entry then\n@@ -8939,6 +8939,12 @@ package body Sem_Util is\n \n       begin\n          Find_Discrete_Value : while Present (Variant) loop\n+\n+            --  If a choice is a subtype with a static predicate, it must\n+            --  be rewritten as an explicit list of non-predicated choices.\n+\n+            Expand_Static_Predicates_In_Choices (Variant);\n+\n             Discrete_Choice := First (Discrete_Choices (Variant));\n             while Present (Discrete_Choice) loop\n                exit Find_Discrete_Value when"}, {"sha": "82b8c22901c5256eead9919b0d294818bd1fe46e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7145d799a347800ea6ef5c5e3114db11469137a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7145d799a347800ea6ef5c5e3114db11469137a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7145d799a347800ea6ef5c5e3114db11469137a8", "patch": "@@ -1,3 +1,7 @@\n+2019-07-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/aggr25.adb, gnat.dg/aggr25.ads: New testcase.\n+\n 2019-07-05  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/predicate7.adb, gnat.dg/predicate7.ads,"}, {"sha": "d1bb32a13b436780b460bb4b40f1a884aa90e626", "filename": "gcc/testsuite/gnat.dg/aggr25.adb", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7145d799a347800ea6ef5c5e3114db11469137a8/gcc%2Ftestsuite%2Fgnat.dg%2Faggr25.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7145d799a347800ea6ef5c5e3114db11469137a8/gcc%2Ftestsuite%2Fgnat.dg%2Faggr25.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faggr25.adb?ref=7145d799a347800ea6ef5c5e3114db11469137a8", "patch": "@@ -0,0 +1,7 @@\n+--  { dg-do compile }\n+\n+package body Aggr25 is\n+\n+  procedure Foo is null;\n+\n+end Aggr25;"}, {"sha": "5637cfeec365eafa630bfe435fb59f2fe156fe7a", "filename": "gcc/testsuite/gnat.dg/aggr25.ads", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7145d799a347800ea6ef5c5e3114db11469137a8/gcc%2Ftestsuite%2Fgnat.dg%2Faggr25.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7145d799a347800ea6ef5c5e3114db11469137a8/gcc%2Ftestsuite%2Fgnat.dg%2Faggr25.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faggr25.ads?ref=7145d799a347800ea6ef5c5e3114db11469137a8", "patch": "@@ -0,0 +1,23 @@\n+package Aggr25 is\n+\n+  type T_A is (A, B , C ,D);\n+\n+  subtype Has_B_D is T_A with Static_Predicate => Has_B_D in B | D;\n+\n+  type Obj_T (Kind : T_A) is\n+    record\n+       case Kind is\n+        --OK-- when A | C => null; --OK--\n+        when Has_B_D  =>  Value : Boolean;\n+        --BAD-- when A | C => null;\n+        when others => null;\n+      end case;\n+    end record;\n+\n+  type T is access Obj_T;\n+\n+  Unavailable : constant T := new Obj_T'(Kind => A);\n+\n+  procedure Foo;\n+\n+end Aggr25;"}]}