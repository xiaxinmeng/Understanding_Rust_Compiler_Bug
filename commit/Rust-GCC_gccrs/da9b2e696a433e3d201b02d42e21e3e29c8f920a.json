{"sha": "da9b2e696a433e3d201b02d42e21e3e29c8f920a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE5YjJlNjk2YTQzM2UzZDIwMWIwMmQ0MmUyMWUzZTI5YzhmOTIwYQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2016-09-23T10:54:14Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2016-09-23T10:54:14Z"}, "message": "[PATCH 16/17][ARM] Add tests for VFP FP16 ACLE instrinsics.\n\ntestsuite/\n2016-09-23  Jiong Wang  <jiong.wang@arm.com>\n\t    Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/binary_scalar_op.inc: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/unary_scalar_op.inc: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/ternary_scalar_op.inc: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vabsh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vaddh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtah_s32_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtah_u32_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_f16_s32_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_f16_u32_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_f16_s32_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_f16_u32_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_s32_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_u32_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_s32_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_u32_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtmh_s32_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtmh_u32_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtnh_s32_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtnh_u32_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtph_s32_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vcvtph_u32_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vdivh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vfmah_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vfmsh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmaxnmh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vminnmh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vmulh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vnegh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrndah_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrndh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrndih_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrndmh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrndnh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrndph_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vrndxh_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vsqrth_f16_1.c: New.\n\t* gcc.target/aarch64/advsimd-intrinsics/vsubh_f16_1.c: New.\n\n\nCo-Authored-By: Matthew Wahab <matthew.wahab@arm.com>\n\nFrom-SVN: r240426", "tree": {"sha": "03bab907d02f314a79e5be988fd8f8983ffb947a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03bab907d02f314a79e5be988fd8f8983ffb947a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da9b2e696a433e3d201b02d42e21e3e29c8f920a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da9b2e696a433e3d201b02d42e21e3e29c8f920a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da9b2e696a433e3d201b02d42e21e3e29c8f920a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da9b2e696a433e3d201b02d42e21e3e29c8f920a/comments", "author": null, "committer": null, "parents": [{"sha": "785cf02f6855edf92cd70c657478fc1e73f01532", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/785cf02f6855edf92cd70c657478fc1e73f01532", "html_url": "https://github.com/Rust-GCC/gccrs/commit/785cf02f6855edf92cd70c657478fc1e73f01532"}], "stats": {"total": 2367, "additions": 2367, "deletions": 0}, "files": [{"sha": "bc9e798cc8fb46e752bfc773abed3d84702f0544", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -1,3 +1,44 @@\n+2016-09-23  Jiong Wang  <jiong.wang@arm.com>\n+\t    Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/binary_scalar_op.inc: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/unary_scalar_op.inc: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/ternary_scalar_op.inc: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vabsh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vaddh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtah_s32_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtah_u32_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_f16_s32_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_f16_u32_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_f16_s32_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_f16_u32_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_s32_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_n_u32_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_s32_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvth_u32_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtmh_s32_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtmh_u32_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtnh_s32_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtnh_u32_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtph_s32_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vcvtph_u32_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vdivh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vfmah_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vfmsh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmaxnmh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vminnmh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vmulh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vnegh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrndah_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrndh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrndih_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrndmh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrndnh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrndph_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vrndxh_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vsqrth_f16_1.c: New.\n+\t* gcc.target/aarch64/advsimd-intrinsics/vsubh_f16_1.c: New.\n+\n 2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* gcc.target/arm/armv8_2-fp16-neon-1.c: New."}, {"sha": "55dedd432622f3bae3dd4328bb208e858402a034", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/binary_scalar_op.inc", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_scalar_op.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_scalar_op.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbinary_scalar_op.inc?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,160 @@\n+/* Template file for binary scalar operator validation.\n+\n+   This file is meant to be included by test files for binary scalar\n+   operations.  */\n+\n+/* Check for required settings.  */\n+\n+#ifndef INSN_NAME\n+#error INSN_NAME (the intrinsic to test) must be defined.\n+#endif\n+\n+#ifndef INPUT_TYPE\n+#error INPUT_TYPE (basic type of an input value) must be defined.\n+#endif\n+\n+#ifndef OUTPUT_TYPE\n+#error OUTPUT_TYPE (basic type of an output value) must be defined.\n+#endif\n+\n+#ifndef OUTPUT_TYPE_SIZE\n+#error OUTPUT_TYPE_SIZE (size in bits of an output value) must be defined.\n+#endif\n+\n+/* Optional settings:\n+\n+   INPUT_1: Input values for the first parameter.  Must be of type INPUT_TYPE.\n+   INPUT_2: Input values for the first parameter.  Must be of type\n+   INPUT_TYPE.  */\n+\n+#ifndef TEST_MSG\n+#define TEST_MSG \"unnamed test\"\n+#endif\n+\n+/* The test framework.  */\n+\n+#include <stdio.h>\n+\n+extern void abort ();\n+\n+#define INFF __builtin_inf ()\n+\n+/* Stringify a macro.  */\n+#define STR0(A) #A\n+#define STR(A) STR0 (A)\n+\n+/* Macro concatenation.  */\n+#define CAT0(A, B) A##B\n+#define CAT(A, B) CAT0 (A, B)\n+\n+/* Format strings for error reporting.  */\n+#define FMT16 \"0x%04x\"\n+#define FMT32 \"0x%08x\"\n+#define FMT CAT (FMT,OUTPUT_TYPE_SIZE)\n+\n+/* Type construction: forms TS_t, where T is the base type and S the size in\n+   bits.  */\n+#define MK_TYPE0(T, S) T##S##_t\n+#define MK_TYPE(T, S) MK_TYPE0 (T, S)\n+\n+/* Convenience types for input and output data.  */\n+typedef MK_TYPE (uint, OUTPUT_TYPE_SIZE) output_hex_type;\n+\n+/* Conversion between typed values and their hexadecimal representation.  */\n+typedef union\n+{\n+  OUTPUT_TYPE value;\n+  output_hex_type hex;\n+} output_conv_type;\n+\n+/* Default input values.  */\n+\n+float16_t input_1_float16_t[] =\n+{\n+  0.0, -0.0,\n+  2.0, 3.1,\n+  20.0, 0.40,\n+  -2.3, 1.33,\n+  -7.6, 0.31,\n+  0.3353, 0.5,\n+  1.0, 13.13,\n+  -6.3, 20.0,\n+  (float16_t)INFF, (float16_t)-INFF,\n+};\n+\n+float16_t input_2_float16_t[] =\n+{\n+  1.0, 1.0,\n+  -4.33, 100.0,\n+  30.0, -0.02,\n+  0.5, -7.231,\n+  -6.3, 20.0,\n+  -7.231, 2.3,\n+  -7.6, 5.1,\n+  0.31, 0.33353,\n+  (float16_t)-INFF, (float16_t)INFF,\n+};\n+\n+#ifndef INPUT_1\n+#define INPUT_1 CAT (input_1_,INPUT_TYPE)\n+#endif\n+\n+#ifndef INPUT_2\n+#define INPUT_2 CAT (input_2_,INPUT_TYPE)\n+#endif\n+\n+/* Support macros and routines for the test function.  */\n+\n+#define CHECK()\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    output_conv_type actual;\t\t\t\t\t\\\n+    output_conv_type expect;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    expect.hex = ((output_hex_type*)EXPECTED)[index];\t\t\\\n+    actual.value = INSN_NAME ((INPUT_1)[index],\t\t\t\\\n+\t\t\t      (INPUT_2)[index]);\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    if (actual.hex != expect.hex)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tfprintf (stderr,\t\t\t\t\t\\\n+\t\t \"ERROR in %s (%s line %d), buffer %s, \"\t\\\n+\t\t \"index %d: got \"\t\t\t\t\\\n+\t\t FMT \" != \" FMT \"\\n\",\t\t\t\t\\\n+\t\t TEST_MSG, __FILE__, __LINE__,\t\t\t\\\n+\t\t STR (EXPECTED), index,\t\t\t\t\\\n+\t\t actual.hex, expect.hex);\t\t\t\\\n+\tabort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    fprintf (stderr, \"CHECKED %s %s\\n\",\t\t\t\t\\\n+\t     STR (EXPECTED), TEST_MSG);\t\t\t\t\\\n+  }\n+\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1 (NAME)\n+\n+/* The test function.  */\n+\n+void\n+FNNAME (INSN_NAME) (void)\n+{\n+  /* Basic test: y[i] = OP (x[i]), for each INPUT[i], then compare the result\n+     against EXPECTED[i].  */\n+\n+  const int num_tests = sizeof (INPUT_1) / sizeof (INPUT_1[0]);\n+  int index;\n+\n+  for (index = 0; index < num_tests; index++)\n+    CHECK ();\n+\n+#ifdef EXTRA_TESTS\n+  EXTRA_TESTS ();\n+#endif\n+}\n+\n+int\n+main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+\n+  return 0;\n+}"}, {"sha": "47650912d85dde30e45c14f6616b9ea43f98e007", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/ternary_scalar_op.inc", "status": "added", "additions": 206, "deletions": 0, "changes": 206, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fternary_scalar_op.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fternary_scalar_op.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fternary_scalar_op.inc?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,206 @@\n+/* Template file for ternary scalar operator validation.\n+\n+   This file is meant to be included by test files for binary scalar\n+   operations.  */\n+\n+/* Check for required settings.  */\n+\n+#ifndef INSN_NAME\n+#error INSN_NAME (the intrinsic to test) must be defined.\n+#endif\n+\n+#ifndef INPUT_TYPE\n+#error INPUT_TYPE (basic type of an input value) must be defined.\n+#endif\n+\n+#ifndef OUTPUT_TYPE\n+#error OUTPUT_TYPE (basic type of an output value) must be defined.\n+#endif\n+\n+#ifndef OUTPUT_TYPE_SIZE\n+#error OUTPUT_TYPE_SIZE (size in bits of an output value) must be defined.\n+#endif\n+\n+/* Optional settings:\n+\n+   INPUT_1: Input values for the first parameter.  Must be of type INPUT_TYPE.\n+   INPUT_2: Input values for the second parameter.  Must be of type INPUT_TYPE.\n+   INPUT_3: Input values for the third parameter.  Must be of type\n+   INPUT_TYPE.  */\n+\n+#ifndef TEST_MSG\n+#define TEST_MSG \"unnamed test\"\n+#endif\n+\n+/* The test framework.  */\n+\n+#include <stdio.h>\n+\n+extern void abort ();\n+\n+#define INFF __builtin_inf ()\n+\n+/* Stringify a macro.  */\n+#define STR0(A) #A\n+#define STR(A) STR0 (A)\n+\n+/* Macro concatenation.  */\n+#define CAT0(A, B) A##B\n+#define CAT(A, B) CAT0 (A, B)\n+\n+/* Format strings for error reporting.  */\n+#define FMT16 \"0x%04x\"\n+#define FMT32 \"0x%08x\"\n+#define FMT CAT (FMT,OUTPUT_TYPE_SIZE)\n+\n+/* Type construction: forms TS_t, where T is the base type and S the size in\n+   bits.  */\n+#define MK_TYPE0(T, S) T##S##_t\n+#define MK_TYPE(T, S) MK_TYPE0 (T, S)\n+\n+/* Convenience types for input and output data.  */\n+typedef MK_TYPE (uint, OUTPUT_TYPE_SIZE) output_hex_type;\n+\n+/* Conversion between typed values and their hexadecimal representation.  */\n+typedef union\n+{\n+  OUTPUT_TYPE value;\n+  output_hex_type hex;\n+} output_conv_type;\n+\n+/* Default input values.  */\n+\n+float16_t input_1_float16_t[] =\n+{\n+  0.0,\n+  -0.0,\n+  2.0,\n+  3.1,\n+  20.0,\n+  0.40,\n+  -2.3,\n+  1.33,\n+  -7.6,\n+  0.31,\n+  0.3353,\n+  0.5,\n+  1.0,\n+  13.13,\n+  -6.3,\n+  20.0,\n+  (float16_t)INFF,\n+  (float16_t)-INFF,\n+};\n+\n+float16_t input_2_float16_t[] =\n+{\n+  1.0,\n+  1.0,\n+  -4.33,\n+  100.0,\n+  30.0,\n+  -0.02,\n+  0.5,\n+  -7.231,\n+  -6.3,\n+  20.0,\n+  -7.231,\n+  2.3,\n+  -7.6,\n+  5.1,\n+  0.31,\n+  0.33353,\n+  (float16_t)-INFF,\n+  (float16_t)INFF,\n+};\n+\n+float16_t input_3_float16_t[] =\n+{\n+  -0.0,\n+  0.0,\n+  0.31,\n+  -0.31,\n+  1.31,\n+  2.1,\n+  -6.3,\n+  1.0,\n+  -1.5,\n+  5.1,\n+  0.3353,\n+  9.3,\n+  -9.3,\n+  -7.231,\n+  0.5,\n+  -0.33,\n+  (float16_t)INFF,\n+  (float16_t)INFF,\n+};\n+\n+#ifndef INPUT_1\n+#define INPUT_1 CAT (input_1_,INPUT_TYPE)\n+#endif\n+\n+#ifndef INPUT_2\n+#define INPUT_2 CAT (input_2_,INPUT_TYPE)\n+#endif\n+\n+#ifndef INPUT_3\n+#define INPUT_3 CAT (input_3_,INPUT_TYPE)\n+#endif\n+\n+/* Support macros and routines for the test function.  */\n+\n+#define CHECK()\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    output_conv_type actual;\t\t\t\t\t\\\n+    output_conv_type expect;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    expect.hex = ((output_hex_type*)EXPECTED)[index];\t\t\\\n+    actual.value = INSN_NAME ((INPUT_1)[index],\t\t\t\\\n+\t\t\t      (INPUT_2)[index],\t\t\t\\\n+\t\t\t      (INPUT_3)[index]);\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    if (actual.hex != expect.hex)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tfprintf (stderr,\t\t\t\t\t\\\n+\t\t \"ERROR in %s (%s line %d), buffer %s, \"\t\\\n+\t\t \"index %d: got \"\t\t\t\t\\\n+\t\t FMT \" != \" FMT \"\\n\",\t\t\t\t\\\n+\t\t TEST_MSG, __FILE__, __LINE__,\t\t\t\\\n+\t\t STR (EXPECTED), index,\t\t\t\t\\\n+\t\t actual.hex, expect.hex);\t\t\t\\\n+\tabort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    fprintf (stderr, \"CHECKED %s %s\\n\",\t\t\t\t\\\n+\t     STR (EXPECTED), TEST_MSG);\t\t\t\t\\\n+  }\n+\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1 (NAME)\n+\n+/* The test function.  */\n+\n+void\n+FNNAME (INSN_NAME) (void)\n+{\n+  /* Basic test: y[i] = OP (x[i]), for each INPUT[i], then compare the result\n+     against EXPECTED[i].  */\n+\n+  const int num_tests = sizeof (INPUT_1) / sizeof (INPUT_1[0]);\n+  int index;\n+\n+  for (index = 0; index < num_tests; index++)\n+    CHECK ();\n+\n+#ifdef EXTRA_TESTS\n+  EXTRA_TESTS ();\n+#endif\n+}\n+\n+int\n+main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+\n+  return 0;\n+}"}, {"sha": "86403d28ae66d33682743afc8f3eadace41b1b9a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/unary_scalar_op.inc", "status": "added", "additions": 199, "deletions": 0, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_scalar_op.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_scalar_op.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Funary_scalar_op.inc?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,199 @@\n+/* Template file for unary scalar operator validation.\n+\n+   This file is meant to be included by test files for unary scalar\n+   operations.  */\n+\n+/* Check for required settings.  */\n+\n+#ifndef INSN_NAME\n+#error INSN_NAME (the intrinsic to test) must be defined.\n+#endif\n+\n+#ifndef INPUT_TYPE\n+#error INPUT_TYPE (basic type of an input value) must be defined.\n+#endif\n+\n+#ifndef SCALAR_OPERANDS\n+#ifndef EXPECTED\n+#error EXPECTED (an array of expected output values) must be defined.\n+#endif\n+#endif\n+\n+#ifndef OUTPUT_TYPE\n+#error OUTPUT_TYPE (basic type of an output value) must be defined.\n+#endif\n+\n+#ifndef OUTPUT_TYPE_SIZE\n+#error OUTPUT_TYPE_SIZE (size in bits of an output value) must be defined.\n+#endif\n+\n+/* Optional settings.  */\n+\n+/* SCALAR_OPERANDS: Defined iff the intrinsic has a scalar operand.\n+\n+   SCALAR_1, SCALAR_2, .., SCALAR_4: If SCALAR_OPERANDS is defined, SCALAR_<n>\n+   is the scalar and EXPECTED_<n> is array of expected values.\n+\n+   INPUT: Input values for the first parameter.  Must be of type INPUT_TYPE.  */\n+\n+/* Additional comments for the error message.  */\n+#ifndef COMMENT\n+#define COMMENT \"\"\n+#endif\n+\n+#ifndef TEST_MSG\n+#define TEST_MSG \"unnamed test\"\n+#endif\n+\n+/* The test framework.  */\n+\n+#include <stdio.h>\n+\n+extern void abort ();\n+\n+#define INFF __builtin_inf ()\n+\n+/* Stringify a macro.  */\n+#define STR0(A) #A\n+#define STR(A) STR0 (A)\n+\n+/* Macro concatenation.  */\n+#define CAT0(A, B) A##B\n+#define CAT(A, B) CAT0 (A, B)\n+\n+/* Format strings for error reporting.  */\n+#define FMT16 \"0x%04x\"\n+#define FMT32 \"0x%08x\"\n+#define FMT CAT (FMT,OUTPUT_TYPE_SIZE)\n+\n+/* Type construction: forms TS_t, where T is the base type and S the size in\n+   bits.  */\n+#define MK_TYPE0(T, S) T##S##_t\n+#define MK_TYPE(T, S) MK_TYPE0 (T, S)\n+\n+/* Convenience types for input and output data.  */\n+typedef MK_TYPE (uint, OUTPUT_TYPE_SIZE) output_hex_type;\n+\n+/* Conversion between typed values and their hexadecimal representation.  */\n+typedef union\n+{\n+  OUTPUT_TYPE value;\n+  output_hex_type hex;\n+} output_conv_type;\n+\n+/* Default input values.  */\n+\n+float16_t input_1_float16_t[] =\n+{\n+  0.0, -0.0,\n+  2.0, 3.1,\n+  20.0, 0.40,\n+  -2.3, 1.33,\n+  -7.6, 0.31,\n+  0.3353, 0.5,\n+  1.0, 13.13,\n+  -6.3, 20.0,\n+  (float16_t)INFF, (float16_t)-INFF,\n+};\n+\n+#ifndef INPUT\n+#define INPUT CAT(input_1_,INPUT_TYPE)\n+#endif\n+\n+/* Support macros and routines for the test function.  */\n+\n+#define CHECK()\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    output_conv_type actual;\t\t\t\t\t\\\n+    output_conv_type expect;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    expect.hex = ((output_hex_type*)EXPECTED)[index];\t\t\\\n+    actual.value = INSN_NAME ((INPUT)[index]);\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    if (actual.hex != expect.hex)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tfprintf (stderr,\t\t\t\t\t\\\n+\t\t \"ERROR in %s (%s line %d), buffer %s, \"\t\\\n+\t\t \"index %d: got \"\t\t\t\t\\\n+\t\t FMT \" != \" FMT \"\\n\",\t\t\t\t\\\n+\t\t TEST_MSG, __FILE__, __LINE__,\t\t\t\\\n+\t\t STR (EXPECTED), index,\t\t\t\t\\\n+\t\t actual.hex, expect.hex);\t\t\t\\\n+\tabort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    fprintf (stderr, \"CHECKED %s %s\\n\",\t\t\t\t\\\n+\t     STR (EXPECTED), TEST_MSG);\t\t\t\t\\\n+  }\n+\n+#define CHECK_N(SCALAR, EXPECTED)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    output_conv_type actual;\t\t\t\t\t\\\n+    output_conv_type expect;\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+    expect.hex\t\t\t\t\t\t\t\\\n+      = ((output_hex_type*)EXPECTED)[index];\t\t\t\\\n+    actual.value = INSN_NAME ((INPUT)[index], (SCALAR));\t\\\n+\t\t\t\t\t\t\t\t\\\n+    if (actual.hex != expect.hex)\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tfprintf (stderr,\t\t\t\t\t\\\n+\t\t \"ERROR in %s (%s line %d), buffer %s, \"\t\\\n+\t\t \"index %d: got \"\t\t\t\t\\\n+\t\t FMT \" != \" FMT \"\\n\",\t\t\t\t\\\n+\t\t TEST_MSG, __FILE__, __LINE__,\t\t\t\\\n+\t\t STR (EXPECTED), index,\t\t\t\t\\\n+\t\t actual.hex, expect.hex);\t\t\t\\\n+\tabort ();\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    fprintf (stderr, \"CHECKED %s %s\\n\",\t\t\t\t\\\n+\t     STR (EXPECTED), TEST_MSG);\t\t\t\t\\\n+  }\n+\n+#define FNNAME1(NAME) exec_ ## NAME\n+#define FNNAME(NAME) FNNAME1 (NAME)\n+\n+/* The test function.  */\n+\n+void\n+FNNAME (INSN_NAME) (void)\n+{\n+  /* Basic test: y[i] = OP (x[i]), for each INPUT[i], then compare the result\n+     against EXPECTED[i].  */\n+\n+  const int num_tests = sizeof (INPUT) / sizeof (INPUT[0]);\n+  int index;\n+\n+  for (index = 0; index < num_tests; index++)\n+    {\n+#if defined (SCALAR_OPERANDS)\n+\n+#ifdef SCALAR_1\n+      CHECK_N (SCALAR_1, EXPECTED_1);\n+#endif\n+#ifdef SCALAR_2\n+      CHECK_N (SCALAR_2, EXPECTED_2);\n+#endif\n+#ifdef SCALAR_3\n+      CHECK_N (SCALAR_3, EXPECTED_3);\n+#endif\n+#ifdef SCALAR_4\n+      CHECK_N (SCALAR_4, EXPECTED_4);\n+#endif\n+\n+#else /* !defined (SCALAR_OPERAND).  */\n+      CHECK ();\n+#endif\n+    }\n+\n+#ifdef EXTRA_TESTS\n+  EXTRA_TESTS ();\n+#endif\n+}\n+\n+int\n+main (void)\n+{\n+  FNNAME (INSN_NAME) ();\n+\n+  return 0;\n+}"}, {"sha": "16a986ac590847fe69f63cba6cd23b93a5bd2907", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vabsh_f16_1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabsh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabsh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvabsh_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected[] =\n+{\n+  0x0000 /* 0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x4000 /* 2.000000 */,\n+  0x4233 /* 3.099609 */,\n+  0x4d00 /* 20.000000 */,\n+  0x3666 /* 0.399902 */,\n+  0x409a /* 2.300781 */,\n+  0x3d52 /* 1.330078 */,\n+  0x479a /* 7.601562 */,\n+  0x34f6 /* 0.310059 */,\n+  0x355d /* 0.335205 */,\n+  0x3800 /* 0.500000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x4a91 /* 13.132812 */,\n+  0x464d /* 6.300781 */,\n+  0x4d00 /* 20.000000 */,\n+  0x7c00 /* inf */,\n+  0x7c00 /* inf */\n+};\n+\n+#define TEST_MSG \"VABSH_F16\"\n+#define INSN_NAME vabsh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "4b0e24284f8740aee331fda3caf7af3b23a58c01", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vaddh_f16_1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvaddh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvaddh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvaddh_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected[] =\n+{\n+  0x3c00 /* 1.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0xc0a8 /* -2.328125 */,\n+  0x5672 /* 103.125000 */,\n+  0x5240 /* 50.000000 */,\n+  0x3614 /* 0.379883 */,\n+  0xbf34 /* -1.800781 */,\n+  0xc5e6 /* -5.898438 */,\n+  0xcaf4 /* -13.906250 */,\n+  0x4d14 /* 20.312500 */,\n+  0xc6e5 /* -6.894531 */,\n+  0x419a /* 2.800781 */,\n+  0xc69a /* -6.601562 */,\n+  0x4c8f /* 18.234375 */,\n+  0xc5fe /* -5.992188 */,\n+  0x4d15 /* 20.328125 */,\n+  0x7e00 /* nan */,\n+  0x7e00 /* nan */,\n+};\n+\n+#define TEST_MSG \"VADDH_F16\"\n+#define INSN_NAME vaddh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}, {"sha": "ebfd62a10685f87bdc950f5c3f2c9b7880e864f0", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_s32_f16_1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtah_s32_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtah_s32_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtah_s32_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] =\n+{\n+  0.0, -0.0,\n+  123.4, -567.8,\n+  -34.8, 1024,\n+  663.1, 169.1,\n+  -4.8, 77.0,\n+  -144.5, -56.8,\n+\n+  (float16_t) -16, (float16_t) -15,\n+  (float16_t) -14, (float16_t) -13,\n+};\n+\n+/* Expected results (32-bit hexadecimal representation).  */\n+uint32_t expected[] =\n+{\n+  0x00000000,\n+  0x00000000,\n+  0x0000007b,\n+  0xfffffdc8,\n+  0xffffffdd,\n+  0x00000400,\n+  0x00000297,\n+  0x000000a9,\n+  0xfffffffb,\n+  0x0000004d,\n+  0xffffff6f,\n+  0xffffffc7,\n+  0xfffffff0,\n+  0xfffffff1,\n+  0xfffffff2,\n+  0xfffffff3\n+};\n+\n+#define TEST_MSG \"VCVTAH_S32_F16\"\n+#define INSN_NAME vcvtah_s32_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE int32_t\n+#define OUTPUT_TYPE_SIZE 32\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "5ae28fc11dbd8fb68a8724a043633327b8806f50", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtah_u32_f16_1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtah_u32_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtah_u32_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtah_u32_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] =\n+{\n+  0.0, -0.0,\n+  123.4, -567.8,\n+  -34.8, 1024,\n+  663.1, 169.1,\n+  -4.8, 77.0,\n+  -144.5, -56.8,\n+\n+  (float16_t) -16, (float16_t) -15,\n+  (float16_t) -14, (float16_t) -13,\n+};\n+\n+/* Expected results (32-bit hexadecimal representation).  */\n+uint32_t expected[] =\n+{\n+  0x00000000,\n+  0x00000000,\n+  0x0000007b,\n+  0x00000000,\n+  0x00000000,\n+  0x00000400,\n+  0x00000297,\n+  0x000000a9,\n+  0x00000000,\n+  0x0000004d,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000\n+};\n+\n+#define TEST_MSG \"VCVTAH_U32_F16\"\n+#define INSN_NAME vcvtah_u32_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint32_t\n+#define OUTPUT_TYPE_SIZE 32\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "2173a0ef4ee342e6f3941493e77036d8055f9801", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_f16_s32_1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_f16_s32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_f16_s32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_f16_s32_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+uint32_t input[] =\n+{\n+  0, -0,\n+  123, -567,\n+  -34, 1024,\n+  -63, 169,\n+  -4, 77,\n+  -144, -56,\n+  -16, -15,\n+  -14, -13,\n+};\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected[] =\n+{\n+  0x0000 /* 0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x57b0 /* 123.000000 */,\n+  0xe06e /* -567.000000 */,\n+  0xd040 /* -34.000000 */,\n+  0x6400 /* 1024.000000 */,\n+  0xd3e0 /* -63.000000 */,\n+  0x5948 /* 169.000000 */,\n+  0xc400 /* -4.000000 */,\n+  0x54d0 /* 77.000000 */,\n+  0xd880 /* -144.000000 */,\n+  0xd300 /* -56.000000 */,\n+  0xcc00 /* -16.000000 */,\n+  0xcb80 /* -15.000000 */,\n+  0xcb00 /* -14.000000 */,\n+  0xca80 /* -13.000000 */\n+};\n+\n+#define TEST_MSG \"VCVTH_F16_S32\"\n+#define INSN_NAME vcvth_f16_s32\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE uint32_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "15832023a056f21e1ddc36f485071aa1ca2cca22", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_f16_u32_1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_f16_u32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_f16_u32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_f16_u32_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+int32_t input[] =\n+{\n+  0, -0,\n+  123, -567,\n+  -34, 1024,\n+  -63, 169,\n+  -4, 77,\n+  -144, -56,\n+  -16, -15,\n+  -14, -13,\n+};\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected[] =\n+{\n+  0x0000 /* 0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x57b0 /* 123.000000 */,\n+  0x7c00 /* inf */,\n+  0x7c00 /* inf */,\n+  0x6400 /* 1024.000000 */,\n+  0x7c00 /* inf */,\n+  0x5948 /* 169.000000 */,\n+  0x7c00 /* inf */,\n+  0x54d0 /* 77.000000 */,\n+  0x7c00 /* inf */,\n+  0x7c00 /* inf */,\n+  0x7c00 /* inf */,\n+  0x7c00 /* inf */,\n+  0x7c00 /* inf */,\n+  0x7c00 /* inf */\n+};\n+\n+#define TEST_MSG \"VCVTH_F16_U32\"\n+#define INSN_NAME vcvth_f16_u32\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE int32_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "9ce95581f694c4ed9b0925c994c936af2d007bc5", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_f16_s32_1.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_f16_s32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_f16_s32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_f16_s32_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,99 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+uint32_t input[] =\n+{\n+  0, -0,\n+  123, -567,\n+  -34, 1024,\n+  -63, 169,\n+  -4, 77,\n+  -144, -56,\n+  -16, -15,\n+  -14, -13,\n+};\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected_1[] =\n+{\n+  0x0000 /* 0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x53b0 /* 61.500000 */,\n+  0xdc6e /* -283.500000 */,\n+  0xcc40 /* -17.000000 */,\n+  0x6000 /* 512.000000 */,\n+  0xcfe0 /* -31.500000 */,\n+  0x5548 /* 84.500000 */,\n+  0xc000 /* -2.000000 */,\n+  0x50d0 /* 38.500000 */,\n+  0xd480 /* -72.000000 */,\n+  0xcf00 /* -28.000000 */,\n+  0xc800 /* -8.000000 */,\n+  0xc780 /* -7.500000 */,\n+  0xc700 /* -7.000000 */,\n+  0xc680 /* -6.500000 */\n+};\n+\n+uint16_t expected_2[] =\n+{\n+  0x0000 /* 0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x4fb0 /* 30.750000 */,\n+  0xd86e /* -141.750000 */,\n+  0xc840 /* -8.500000 */,\n+  0x5c00 /* 256.000000 */,\n+  0xcbe0 /* -15.750000 */,\n+  0x5148 /* 42.250000 */,\n+  0xbc00 /* -1.000000 */,\n+  0x4cd0 /* 19.250000 */,\n+  0xd080 /* -36.000000 */,\n+  0xcb00 /* -14.000000 */,\n+  0xc400 /* -4.000000 */,\n+  0xc380 /* -3.750000 */,\n+  0xc300 /* -3.500000 */,\n+  0xc280 /* -3.250000 */\n+};\n+\n+uint16_t expected_3[] =\n+{\n+ 0x0000 /* 0.000000 */,\n+ 0x0000 /* 0.000000 */,\n+ 0x0000 /* 0.000000 */,\n+ 0x8002 /* -0.000000 */,\n+ 0x8000 /* -0.000000 */,\n+ 0x0004 /* 0.000000 */,\n+ 0x8000 /* -0.000000 */,\n+ 0x0001 /* 0.000000 */,\n+ 0x8000 /* -0.000000 */,\n+ 0x0000 /* 0.000000 */,\n+ 0x8001 /* -0.000000 */,\n+ 0x8000 /* -0.000000 */,\n+ 0x8000 /* -0.000000 */,\n+ 0x8000 /* -0.000000 */,\n+ 0x8000 /* -0.000000 */,\n+ 0x8000 /* -0.000000 */\n+};\n+\n+#define TEST_MSG \"VCVTH_N_F16_S32\"\n+#define INSN_NAME vcvth_n_f16_s32\n+\n+#define INPUT input\n+#define EXPECTED_1 expected_1\n+#define EXPECTED_2 expected_2\n+#define EXPECTED_3 expected_3\n+\n+#define INPUT_TYPE int32_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+#define SCALAR_OPERANDS\n+#define SCALAR_1 1\n+#define SCALAR_2 2\n+#define SCALAR_3 32\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "d308c35bea1b2b17884a4b41d333ea07da2d7ae6", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_f16_u32_1.c", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_f16_u32_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_f16_u32_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_f16_u32_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,99 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+uint32_t input[] =\n+{\n+  0, -0,\n+  123, -567,\n+  -34, 1024,\n+  -63, 169,\n+  -4, 77,\n+  -144, -56,\n+  -16, -15,\n+  -14, -13,\n+};\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected_1[] =\n+{\n+  0x0000 /* 0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x53b0 /* 61.500000 */,\n+  0x7c00 /* inf */,\n+  0x7c00 /* inf */,\n+  0x6000 /* 512.000000 */,\n+  0x7c00 /* inf */,\n+  0x5548 /* 84.500000 */,\n+  0x7c00 /* inf */,\n+  0x50d0 /* 38.500000 */,\n+  0x7c00 /* inf */,\n+  0x7c00 /* inf */,\n+  0x7c00 /* inf */,\n+  0x7c00 /* inf */,\n+  0x7c00 /* inf */,\n+  0x7c00 /* inf */\n+};\n+\n+uint16_t expected_2[] =\n+{\n+  0x0000 /* 0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x4fb0 /* 30.750000 */,\n+  0x7c00 /* inf */,\n+  0x7c00 /* inf */,\n+  0x5c00 /* 256.000000 */,\n+  0x7c00 /* inf */,\n+  0x5148 /* 42.250000 */,\n+  0x7c00 /* inf */,\n+  0x4cd0 /* 19.250000 */,\n+  0x7c00 /* inf */,\n+  0x7c00 /* inf */,\n+  0x7c00 /* inf */,\n+  0x7c00 /* inf */,\n+  0x7c00 /* inf */,\n+  0x7c00 /* inf */\n+};\n+\n+uint16_t expected_3[] =\n+{\n+  0x0000 /* 0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x0004 /* 0.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x0001 /* 0.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x3c00 /* 1.000000 */\n+};\n+\n+#define TEST_MSG \"VCVTH_N_F16_U32\"\n+#define INSN_NAME vcvth_n_f16_u32\n+\n+#define INPUT input\n+#define EXPECTED_1 expected_1\n+#define EXPECTED_2 expected_2\n+#define EXPECTED_3 expected_3\n+\n+#define INPUT_TYPE uint32_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+#define SCALAR_OPERANDS\n+#define SCALAR_1 1\n+#define SCALAR_2 2\n+#define SCALAR_3 32\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "6e2ee500cf8cc17d96bd50d8ab25ae8e8e54af63", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_s32_f16_1.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_s32_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_s32_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_s32_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,100 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] =\n+{\n+  0.0, -0.0,\n+  123.4, -567.8,\n+  -34.8, 1024,\n+  663.1, 169.1,\n+  -4.8, 77.0,\n+  -144.5, -56.8,\n+\n+  (float16_t) -16, (float16_t) -15,\n+  (float16_t) -14, (float16_t) -13,\n+};\n+\n+/* Expected results (32-bit hexadecimal representation).  */\n+uint32_t expected_1[] =\n+{\n+  0x00000000,\n+  0x00000000,\n+  0x000000f6,\n+  0xfffffb90,\n+  0xffffffbb,\n+  0x00000800,\n+  0x0000052e,\n+  0x00000152,\n+  0xfffffff7,\n+  0x0000009a,\n+  0xfffffedf,\n+  0xffffff8f,\n+  0xffffffe0,\n+  0xffffffe2,\n+  0xffffffe4,\n+  0xffffffe6,\n+};\n+\n+uint32_t expected_2[] =\n+{\n+  0x00000000,\n+  0x00000000,\n+  0x000001ed,\n+  0xfffff720,\n+  0xffffff75,\n+  0x00001000,\n+  0x00000a5c,\n+  0x000002a4,\n+  0xffffffed,\n+  0x00000134,\n+  0xfffffdbe,\n+  0xffffff1d,\n+  0xffffffc0,\n+  0xffffffc4,\n+  0xffffffc8,\n+  0xffffffcc,\n+};\n+\n+uint32_t expected_3[] =\n+{\n+  0x00000000,\n+  0x00000000,\n+  0x7fffffff,\n+  0x80000000,\n+  0x80000000,\n+  0x7fffffff,\n+  0x7fffffff,\n+  0x7fffffff,\n+  0x80000000,\n+  0x7fffffff,\n+  0x80000000,\n+  0x80000000,\n+  0x80000000,\n+  0x80000000,\n+  0x80000000,\n+  0x80000000,\n+};\n+\n+#define TEST_MSG \"VCVTH_N_S32_F16\"\n+#define INSN_NAME vcvth_n_s32_f16\n+\n+#define INPUT input\n+#define EXPECTED_1 expected_1\n+#define EXPECTED_2 expected_2\n+#define EXPECTED_3 expected_3\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint32_t\n+#define OUTPUT_TYPE_SIZE 32\n+\n+#define SCALAR_OPERANDS\n+#define SCALAR_1 1\n+#define SCALAR_2 2\n+#define SCALAR_3 32\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "188f60cafe13c44e0b669c3dd4a4ebe71be877d8", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_n_u32_f16_1.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_u32_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_u32_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_n_u32_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,100 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] =\n+{\n+  0.0, -0.0,\n+  123.4, -567.8,\n+  -34.8, 1024,\n+  663.1, 169.1,\n+  -4.8, 77.0,\n+  -144.5, -56.8,\n+\n+  (float16_t) -16, (float16_t) -15,\n+  (float16_t) -14, (float16_t) -13,\n+};\n+\n+/* Expected results (32-bit hexadecimal representation).  */\n+uint32_t expected_1[] =\n+{\n+  0x00000000,\n+  0x00000000,\n+  0x000000f6,\n+  0x00000000,\n+  0x00000000,\n+  0x00000800,\n+  0x0000052e,\n+  0x00000152,\n+  0x00000000,\n+  0x0000009a,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+};\n+\n+uint32_t expected_2[] =\n+{\n+  0x00000000,\n+  0x00000000,\n+  0x000001ed,\n+  0x00000000,\n+  0x00000000,\n+  0x00001000,\n+  0x00000a5c,\n+  0x000002a4,\n+  0x00000000,\n+  0x00000134,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+};\n+\n+uint32_t expected_3[] =\n+{\n+  0x00000000,\n+  0x00000000,\n+  0xffffffff,\n+  0x00000000,\n+  0x00000000,\n+  0xffffffff,\n+  0xffffffff,\n+  0xffffffff,\n+  0x00000000,\n+  0xffffffff,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+};\n+\n+#define TEST_MSG \"VCVTH_N_U32_F16\"\n+#define INSN_NAME vcvth_n_u32_f16\n+\n+#define INPUT input\n+#define EXPECTED_1 expected_1\n+#define EXPECTED_2 expected_2\n+#define EXPECTED_3 expected_3\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint32_t\n+#define OUTPUT_TYPE_SIZE 32\n+\n+#define SCALAR_OPERANDS\n+#define SCALAR_1 1\n+#define SCALAR_2 2\n+#define SCALAR_3 32\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "6bff9546531a8fcfc08bea344f3c5ad538e6dbb4", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_s32_f16_1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_s32_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_s32_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_s32_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] =\n+{\n+  0.0, -0.0,\n+  123.4, -567.8,\n+  -34.8, 1024,\n+  663.1, 169.1,\n+  -4.8, 77.0,\n+  -144.5, -56.8,\n+\n+  (float16_t) -16, (float16_t) -15,\n+  (float16_t) -14, (float16_t) -13,\n+};\n+\n+/* Expected results (32-bit hexadecimal representation).  */\n+uint32_t expected[] =\n+{\n+  0x00000000,\n+  0x00000000,\n+  0x0000007b,\n+  0xfffffdc8,\n+  0xffffffde,\n+  0x00000400,\n+  0x00000297,\n+  0x000000a9,\n+  0xfffffffc,\n+  0x0000004d,\n+  0xffffff70,\n+  0xffffffc8,\n+  0xfffffff0,\n+  0xfffffff1,\n+  0xfffffff2,\n+  0xfffffff3,\n+};\n+\n+#define TEST_MSG \"VCVTH_S32_F16\"\n+#define INSN_NAME vcvth_s32_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE int32_t\n+#define OUTPUT_TYPE_SIZE 32\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "d5807d74317482e495a54655076f5cbcf323e06a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvth_u32_f16_1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_u32_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_u32_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvth_u32_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] =\n+{\n+  0.0, -0.0,\n+  123.4, -567.8,\n+  -34.8, 1024,\n+  663.1, 169.1,\n+  -4.8, 77.0,\n+  -144.5, -56.8,\n+\n+  (float16_t) -16, (float16_t) -15,\n+  (float16_t) -14, (float16_t) -13,\n+};\n+\n+/* Expected results (32-bit hexadecimal representation).  */\n+uint32_t expected[] =\n+{\n+  0x00000000,\n+  0x00000000,\n+  0x0000007b,\n+  0x00000000,\n+  0x00000000,\n+  0x00000400,\n+  0x00000297,\n+  0x000000a9,\n+  0x00000000,\n+  0x0000004d,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+};\n+\n+#define TEST_MSG \"VCVTH_U32_F16\"\n+#define INSN_NAME vcvth_u32_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint32_t\n+#define OUTPUT_TYPE_SIZE 32\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "f4f7b374d3e6ed49dd93e5459ada54fb516fc80a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_s32_f16_1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtmh_s32_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtmh_s32_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtmh_s32_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] =\n+{\n+  0.0, -0.0,\n+  123.4, -567.8,\n+  -34.8, 1024,\n+  663.1, 169.1,\n+  -4.8, 77.0,\n+  -144.5, -56.8,\n+\n+  (float16_t) -16, (float16_t) -15,\n+  (float16_t) -14, (float16_t) -13,\n+};\n+\n+/* Expected results (32-bit hexadecimal representation).  */\n+uint32_t expected[] =\n+{\n+  0x00000000,\n+  0x00000000,\n+  0x0000007b,\n+  0xfffffdc8,\n+  0xffffffdd,\n+  0x00000400,\n+  0x00000297,\n+  0x000000a9,\n+  0xfffffffb,\n+  0x0000004d,\n+  0xffffff6f,\n+  0xffffffc7,\n+  0xfffffff0,\n+  0xfffffff1,\n+  0xfffffff2,\n+  0xfffffff3\n+};\n+\n+#define TEST_MSG \"VCVTMH_S32_F16\"\n+#define INSN_NAME vcvtmh_s32_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE int32_t\n+#define OUTPUT_TYPE_SIZE 32\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "6cda3b6360150a45c4f3366aae7f69b4d5a31623", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtmh_u32_f16_1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtmh_u32_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtmh_u32_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtmh_u32_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] =\n+{\n+  0.0, -0.0,\n+  123.4, -567.8,\n+  -34.8, 1024,\n+  663.1, 169.1,\n+  -4.8, 77.0,\n+  -144.5, -56.8,\n+\n+  (float16_t) -16, (float16_t) -15,\n+  (float16_t) -14, (float16_t) -13,\n+};\n+\n+/* Expected results (32-bit hexadecimal representation).  */\n+uint32_t expected[] =\n+{\n+  0x00000000,\n+  0x00000000,\n+  0x0000007b,\n+  0x00000000,\n+  0x00000000,\n+  0x00000400,\n+  0x00000297,\n+  0x000000a9,\n+  0x00000000,\n+  0x0000004d,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+};\n+\n+#define TEST_MSG \"VCVTMH_U32_F16\"\n+#define INSN_NAME vcvtmh_u32_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint32_t\n+#define OUTPUT_TYPE_SIZE 32\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "94c333ee44c557e8712a59a671a00a96133dce5d", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_s32_f16_1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtnh_s32_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtnh_s32_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtnh_s32_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] =\n+{\n+  0.0, -0.0,\n+  123.4, -567.8,\n+  -34.8, 1024,\n+  663.1, 169.1,\n+  -4.8, 77.0,\n+  -144.5, -56.8,\n+\n+  (float16_t) -16, (float16_t) -15,\n+  (float16_t) -14, (float16_t) -13,\n+};\n+\n+/* Expected results (32-bit hexadecimal representation).  */\n+uint32_t expected[] =\n+{\n+  0x00000000,\n+  0x00000000,\n+  0x0000007b,\n+  0xfffffdc8,\n+  0xffffffdd,\n+  0x00000400,\n+  0x00000297,\n+  0x000000a9,\n+  0xfffffffb,\n+  0x0000004d,\n+  0xffffff70,\n+  0xffffffc7,\n+  0xfffffff0,\n+  0xfffffff1,\n+  0xfffffff2,\n+  0xfffffff3\n+};\n+\n+#define TEST_MSG \"VCVTNH_S32_F16\"\n+#define INSN_NAME vcvtnh_s32_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE int32_t\n+#define OUTPUT_TYPE_SIZE 32\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "97d5fbabb3f2edbbbe224e61a30bd07e7c15bdaa", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtnh_u32_f16_1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtnh_u32_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtnh_u32_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtnh_u32_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] =\n+{\n+  0.0, -0.0,\n+  123.4, -567.8,\n+  -34.8, 1024,\n+  663.1, 169.1,\n+  -4.8, 77.0,\n+  -144.5, -56.8,\n+\n+  (float16_t) -16, (float16_t) -15,\n+  (float16_t) -14, (float16_t) -13,\n+};\n+\n+/* Expected results (32-bit hexadecimal representation).  */\n+uint32_t expected[] =\n+{\n+  0x00000000,\n+  0x00000000,\n+  0x0000007b,\n+  0x00000000,\n+  0x00000000,\n+  0x00000400,\n+  0x00000297,\n+  0x000000a9,\n+  0x00000000,\n+  0x0000004d,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+};\n+\n+#define TEST_MSG \"VCVTNH_U32_F16\"\n+#define INSN_NAME vcvtnh_u32_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint32_t\n+#define OUTPUT_TYPE_SIZE 32\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "105d2367175cf1e5670dfb1a503543ff2d11772c", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_s32_f16_1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtph_s32_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtph_s32_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtph_s32_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] =\n+{\n+  0.0, -0.0,\n+  123.4, -567.8,\n+  -34.8, 1024,\n+  663.1, 169.1,\n+  -4.8, 77.0,\n+  -144.5, -56.8,\n+\n+  (float16_t) -16, (float16_t) -15,\n+  (float16_t) -14, (float16_t) -13,\n+};\n+\n+/* Expected results (32-bit hexadecimal representation).  */\n+uint32_t expected[] =\n+{\n+  0x00000000,\n+  0x00000000,\n+  0x0000007c,\n+  0xfffffdc8,\n+  0xffffffde,\n+  0x00000400,\n+  0x00000297,\n+  0x000000aa,\n+  0xfffffffc,\n+  0x0000004d,\n+  0xffffff70,\n+  0xffffffc8,\n+  0xfffffff0,\n+  0xfffffff1,\n+  0xfffffff2,\n+  0xfffffff3\n+};\n+\n+#define TEST_MSG \"VCVTPH_S32_F16\"\n+#define INSN_NAME vcvtph_s32_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE int32_t\n+#define OUTPUT_TYPE_SIZE 32\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "d66adcd44a7cc9d5d66161feb6a895839a8bd2fc", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vcvtph_u32_f16_1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtph_u32_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtph_u32_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvcvtph_u32_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Input values.  */\n+float16_t input[] =\n+{\n+  0.0, -0.0,\n+  123.4, -567.8,\n+  -34.8, 1024,\n+  663.1, 169.1,\n+  -4.8, 77.0,\n+  -144.5, -56.8,\n+\n+  (float16_t) -16, (float16_t) -15,\n+  (float16_t) -14, (float16_t) -13,\n+};\n+\n+/* Expected results (32-bit hexadecimal representation).  */\n+uint32_t expected[] =\n+{\n+  0x00000000,\n+  0x00000000,\n+  0x0000007c,\n+  0x00000000,\n+  0x00000000,\n+  0x00000400,\n+  0x00000297,\n+  0x000000aa,\n+  0x00000000,\n+  0x0000004d,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+  0x00000000,\n+};\n+\n+#define TEST_MSG \"VCVTPH_U32_F16\"\n+#define INSN_NAME vcvtph_u32_f16\n+\n+#define INPUT input\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE uint32_t\n+#define OUTPUT_TYPE_SIZE 32\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "6a991098efd905d0ea944a2fc658ba7b7bc098ba", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vdivh_f16_1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdivh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdivh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvdivh_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+#define INFF __builtin_inf ()\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected[] =\n+{\n+  0x0000 /* 0.000000 */,\n+  0x8000 /* -0.000000 */,\n+  0xb765 /* -0.462158 */,\n+  0x27ef /* 0.030991 */,\n+  0x3955 /* 0.666504 */,\n+  0xccff /* -19.984375 */,\n+  0xc49a /* -4.601562 */,\n+  0xb1e3 /* -0.183960 */,\n+  0x3cd3 /* 1.206055 */,\n+  0x23f0 /* 0.015503 */,\n+  0xa9ef /* -0.046356 */,\n+  0x32f4 /* 0.217285 */,\n+  0xb036 /* -0.131592 */,\n+  0x4126 /* 2.574219 */,\n+  0xcd15 /* -20.328125 */,\n+  0x537f /* 59.968750 */,\n+  0x7e00 /* nan */,\n+  0x7e00 /* nan */\n+};\n+\n+#define TEST_MSG \"VDIVH_F16\"\n+#define INSN_NAME vdivh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}, {"sha": "1ac6b67ba8b6266bdd0ff036fc8d5bf1021e5fc9", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vfmah_f16_1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfmah_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfmah_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfmah_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected[] =\n+{\n+ 0x0000 /* 0.000000 */,\n+ 0x0000 /* 0.000000 */,\n+ 0x3944 /* 0.658203 */,\n+ 0xcefa /* -27.906250 */,\n+ 0x5369 /* 59.281250 */,\n+ 0x35ba /* 0.357910 */,\n+ 0xc574 /* -5.453125 */,\n+ 0xc5e6 /* -5.898438 */,\n+ 0x3f66 /* 1.849609 */,\n+ 0x5665 /* 102.312500 */,\n+ 0xc02d /* -2.087891 */,\n+ 0x4d79 /* 21.890625 */,\n+ 0x547b /* 71.687500 */,\n+ 0xcdf0 /* -23.750000 */,\n+ 0xc625 /* -6.144531 */,\n+ 0x4cf9 /* 19.890625 */,\n+ 0x7e00 /* nan */,\n+ 0x7e00 /* nan */\n+};\n+\n+#define TEST_MSG \"VFMAH_F16\"\n+#define INSN_NAME vfmah_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"ternary_scalar_op.inc\""}, {"sha": "77021bec6157a7768f3e3d4c99dc5c9d0003f17b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vfmsh_f16_1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfmsh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfmsh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvfmsh_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected[] =\n+{\n+  0x0000 /* 0.000000 */,\n+  0x8000 /* -0.000000 */,\n+  0x42af /* 3.341797 */,\n+  0x5043 /* 34.093750 */,\n+  0xccd2 /* -19.281250 */,\n+  0x3712 /* 0.441895 */,\n+  0x3acc /* 0.849609 */,\n+  0x4848 /* 8.562500 */,\n+  0xcc43 /* -17.046875 */,\n+  0xd65c /* -101.750000 */,\n+  0x4185 /* 2.759766 */,\n+  0xcd39 /* -20.890625 */,\n+  0xd45b /* -69.687500 */,\n+  0x5241 /* 50.031250 */,\n+  0xc675 /* -6.457031 */,\n+  0x4d07 /* 20.109375 */,\n+  0x7c00 /* inf */,\n+  0xfc00 /* -inf */\n+};\n+\n+#define TEST_MSG \"VFMSH_F16\"\n+#define INSN_NAME vfmsh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"ternary_scalar_op.inc\""}, {"sha": "4db4b84885e67f3fce40ec9a324f2a4534743d8e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmaxnmh_f16_1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmaxnmh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmaxnmh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmaxnmh_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+#define INFF __builtin_inf ()\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected[] =\n+{\n+  0x3c00 /* 1.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x4000 /* 2.000000 */,\n+  0x5640 /* 100.000000 */,\n+  0x4f80 /* 30.000000 */,\n+  0x3666 /* 0.399902 */,\n+  0x3800 /* 0.500000 */,\n+  0x3d52 /* 1.330078 */,\n+  0xc64d /* -6.300781 */,\n+  0x4d00 /* 20.000000 */,\n+  0x355d /* 0.335205 */,\n+  0x409a /* 2.300781 */,\n+  0x3c00 /* 1.000000 */,\n+  0x4a91 /* 13.132812 */,\n+  0x34f6 /* 0.310059 */,\n+  0x4d00 /* 20.000000 */,\n+  0x7c00 /* inf */,\n+  0x7c00 /* inf */\n+};\n+\n+#define TEST_MSG \"VMAXNMH_F16\"\n+#define INSN_NAME vmaxnmh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}, {"sha": "f6b02161fa4bb31314681d51b4f43822a94302e7", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vminnmh_f16_1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvminnmh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvminnmh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvminnmh_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+#define INFF __builtin_inf ()\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected[] =\n+{\n+  0x0000 /* 0.000000 */,\n+  0x8000 /* -0.000000 */,\n+  0xc454 /* -4.328125 */,\n+  0x4233 /* 3.099609 */,\n+  0x4d00 /* 20.000000 */,\n+  0xa51f /* -0.020004 */,\n+  0xc09a /* -2.300781 */,\n+  0xc73b /* -7.230469 */,\n+  0xc79a /* -7.601562 */,\n+  0x34f6 /* 0.310059 */,\n+  0xc73b /* -7.230469 */,\n+  0x3800 /* 0.500000 */,\n+  0xc79a /* -7.601562 */,\n+  0x451a /* 5.101562 */,\n+  0xc64d /* -6.300781 */,\n+  0x3556 /* 0.333496 */,\n+  0xfc00 /* -inf */,\n+  0xfc00 /* -inf */\n+};\n+\n+#define TEST_MSG \"VMINNMH_F16\"\n+#define INSN_NAME vminnmh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}, {"sha": "09684d24d3c1a7d9468949155f1ed768c430e593", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vmulh_f16_1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvmulh_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+#define INFF __builtin_inf ()\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected[] =\n+{\n+  0x0000 /* 0.000000 */,\n+  0x8000 /* -0.000000 */,\n+  0xc854 /* -8.656250 */,\n+  0x5cd8 /* 310.000000 */,\n+  0x60b0 /* 600.000000 */,\n+  0xa019 /* -0.008003 */,\n+  0xbc9a /* -1.150391 */,\n+  0xc8cf /* -9.617188 */,\n+  0x51fd /* 47.906250 */,\n+  0x4634 /* 6.203125 */,\n+  0xc0d9 /* -2.423828 */,\n+  0x3c9a /* 1.150391 */,\n+  0xc79a /* -7.601562 */,\n+  0x5430 /* 67.000000 */,\n+  0xbfd0 /* -1.953125 */,\n+  0x46ac /* 6.671875 */,\n+  0xfc00 /* -inf */,\n+  0xfc00 /* -inf */\n+};\n+\n+#define TEST_MSG \"VMULH_F16\"\n+#define INSN_NAME vmulh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}, {"sha": "421d8277fd350446bc5d1fee6d08d27acf322d66", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vnegh_f16_1.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvnegh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvnegh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvnegh_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+uint16_t expected[] =\n+{\n+  0x8000 /* -0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0xc000 /* -2.000000 */,\n+  0xc233 /* -3.099609 */,\n+  0xcd00 /* -20.000000 */,\n+  0xb666 /* -0.399902 */,\n+  0x409a /* 2.300781 */,\n+  0xbd52 /* -1.330078 */,\n+  0x479a /* 7.601562 */,\n+  0xb4f6 /* -0.310059 */,\n+  0xb55d /* -0.335205 */,\n+  0xb800 /* -0.500000 */,\n+  0xbc00 /* -1.000000 */,\n+  0xca91 /* -13.132812 */,\n+  0x464d /* 6.300781 */,\n+  0xcd00 /* -20.000000 */,\n+  0xfc00 /* -inf */,\n+  0x7c00 /* inf */\n+};\n+\n+#define TEST_MSG \"VNEGH_F16\"\n+#define INSN_NAME vnegh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "bcf47f658d3ef58fd7d095642b9d4c16307bbe60", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrndah_f16_1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndah_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndah_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndah_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected[] =\n+{\n+  0x0000 /* 0.000000 */,\n+  0x8000 /* -0.000000 */,\n+  0x4000 /* 2.000000 */,\n+  0x4200 /* 3.000000 */,\n+  0x4d00 /* 20.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0xc000 /* -2.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0xc800 /* -8.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x4a80 /* 13.000000 */,\n+  0xc600 /* -6.000000 */,\n+  0x4d00 /* 20.000000 */,\n+  0x7c00 /* inf */,\n+  0xfc00 /* -inf */\n+};\n+\n+#define TEST_MSG \"VRNDAH_F16\"\n+#define INSN_NAME vrndah_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "3c4649eb19fb0e9558188608b01baf576f23c732", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrndh_f16_1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndh_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected[] =\n+{\n+  0x0000 /* 0.000000 */,\n+  0x8000 /* -0.000000 */,\n+  0x4000 /* 2.000000 */,\n+  0x4200 /* 3.000000 */,\n+  0x4d00 /* 20.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0xc000 /* -2.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0xc700 /* -7.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x4a80 /* 13.000000 */,\n+  0xc600 /* -6.000000 */,\n+  0x4d00 /* 20.000000 */,\n+  0x7c00 /* inf */,\n+  0xfc00 /* -inf */\n+};\n+\n+#define TEST_MSG \"VRNDH_F16\"\n+#define INSN_NAME vrndh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "4a7b721a511b023516721066e4bd96adc83d933b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrndih_f16_1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndih_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndih_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndih_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected[] =\n+{\n+  0x0000 /* 0.000000 */,\n+  0x8000 /* -0.000000 */,\n+  0x4000 /* 2.000000 */,\n+  0x4200 /* 3.000000 */,\n+  0x4d00 /* 20.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0xc000 /* -2.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0xc800 /* -8.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x4a80 /* 13.000000 */,\n+  0xc600 /* -6.000000 */,\n+  0x4d00 /* 20.000000 */,\n+  0x7c00 /* inf */,\n+  0xfc00 /* -inf */\n+};\n+\n+#define TEST_MSG \"VRNDIH_F16\"\n+#define INSN_NAME vrndih_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "9af357dbd4aef28815e3f78be124a7a07e8293fd", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrndmh_f16_1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndmh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndmh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndmh_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected[] =\n+{\n+  0x0000 /* 0.000000 */,\n+  0x8000 /* -0.000000 */,\n+  0x4000 /* 2.000000 */,\n+  0x4200 /* 3.000000 */,\n+  0x4d00 /* 20.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0xc200 /* -3.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0xc800 /* -8.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x4a80 /* 13.000000 */,\n+  0xc700 /* -7.000000 */,\n+  0x4d00 /* 20.000000 */,\n+  0x7c00 /* inf */,\n+  0xfc00 /* -inf */\n+};\n+\n+#define TEST_MSG \"VRNDMH_F16\"\n+#define INSN_NAME vrndmh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "eb4b27dda94e8a066224a0a195fddfd65b49522b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrndnh_f16_1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndnh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndnh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndnh_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected[] =\n+{\n+  0x0000 /* 0.000000 */,\n+  0x8000 /* -0.000000 */,\n+  0x4000 /* 2.000000 */,\n+  0x4200 /* 3.000000 */,\n+  0x4d00 /* 20.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0xc000 /* -2.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0xc800 /* -8.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x4a80 /* 13.000000 */,\n+  0xc600 /* -6.000000 */,\n+  0x4d00 /* 20.000000 */,\n+  0x7c00 /* inf */,\n+  0xfc00 /* -inf */\n+};\n+\n+#define TEST_MSG \"VRNDNH_F16\"\n+#define INSN_NAME vrndnh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "3fa9749cbf30dd780db451795b5cac28f65ddbaf", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrndph_f16_1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndph_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndph_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndph_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected[] =\n+{\n+  0x0000 /* 0.000000 */,\n+  0x8000 /* -0.000000 */,\n+  0x4000 /* 2.000000 */,\n+  0x4400 /* 4.000000 */,\n+  0x4d00 /* 20.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0xc000 /* -2.000000 */,\n+  0x4000 /* 2.000000 */,\n+  0xc700 /* -7.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x4b00 /* 14.000000 */,\n+  0xc600 /* -6.000000 */,\n+  0x4d00 /* 20.000000 */,\n+  0x7c00 /* inf */,\n+  0xfc00 /* -inf */\n+};\n+\n+#define TEST_MSG \"VRNDPH_F16\"\n+#define INSN_NAME vrndph_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "eb4b27dda94e8a066224a0a195fddfd65b49522b", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vrndxh_f16_1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndxh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndxh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvrndxh_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected[] =\n+{\n+  0x0000 /* 0.000000 */,\n+  0x8000 /* -0.000000 */,\n+  0x4000 /* 2.000000 */,\n+  0x4200 /* 3.000000 */,\n+  0x4d00 /* 20.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0xc000 /* -2.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0xc800 /* -8.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x0000 /* 0.000000 */,\n+  0x3c00 /* 1.000000 */,\n+  0x4a80 /* 13.000000 */,\n+  0xc600 /* -6.000000 */,\n+  0x4d00 /* 20.000000 */,\n+  0x7c00 /* inf */,\n+  0xfc00 /* -inf */\n+};\n+\n+#define TEST_MSG \"VRNDNH_F16\"\n+#define INSN_NAME vrndnh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "7d03827778268d6f07ee10b20d624e863da76689", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vsqrth_f16_1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsqrth_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsqrth_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsqrth_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected[] =\n+{\n+  0x0000 /* 0.000000 */,\n+  0x8000 /* -0.000000 */,\n+  0x3da8 /* 1.414062 */,\n+  0x3f0b /* 1.760742 */,\n+  0x4479 /* 4.472656 */,\n+  0x390f /* 0.632324 */,\n+  0x7e00 /* nan */,\n+  0x3c9d /* 1.153320 */,\n+  0x7e00 /* nan */,\n+  0x3874 /* 0.556641 */,\n+  0x38a2 /* 0.579102 */,\n+  0x39a8 /* 0.707031 */,\n+  0x3c00 /* 1.000000 */,\n+  0x433f /* 3.623047 */,\n+  0x7e00 /* nan */,\n+  0x4479 /* 4.472656 */,\n+  0x7c00 /* inf */,\n+  0x7e00 /* nan */\n+};\n+\n+#define TEST_MSG \"VSQRTH_F16\"\n+#define INSN_NAME vsqrth_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for unary scalar operations.  */\n+#include \"unary_scalar_op.inc\""}, {"sha": "a7aba11aaff3078b9cdc13e21cc7dc90adacc5a7", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vsubh_f16_1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsubh_f16_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da9b2e696a433e3d201b02d42e21e3e29c8f920a/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsubh_f16_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvsubh_f16_1.c?ref=da9b2e696a433e3d201b02d42e21e3e29c8f920a", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_v8_2a_fp16_scalar_hw } */\n+/* { dg-add-options arm_v8_2a_fp16_scalar }  */\n+\n+#include <arm_fp16.h>\n+\n+#define INFF __builtin_inf ()\n+\n+/* Expected results (16-bit hexadecimal representation).  */\n+uint16_t expected[] =\n+{\n+  0xbc00 /* -1.000000 */,\n+  0xbc00 /* -1.000000 */,\n+  0x4654 /* 6.328125 */,\n+  0xd60e /* -96.875000 */,\n+  0xc900 /* -10.000000 */,\n+  0x36b8 /* 0.419922 */,\n+  0xc19a /* -2.800781 */,\n+  0x4848 /* 8.562500 */,\n+  0xbd34 /* -1.300781 */,\n+  0xccec /* -19.687500 */,\n+  0x4791 /* 7.566406 */,\n+  0xbf34 /* -1.800781 */,\n+  0x484d /* 8.601562 */,\n+  0x4804 /* 8.031250 */,\n+  0xc69c /* -6.609375 */,\n+  0x4ceb /* 19.671875 */,\n+  0x7c00 /* inf */,\n+  0xfc00 /* -inf */\n+};\n+\n+#define TEST_MSG \"VSUB_F16\"\n+#define INSN_NAME vsubh_f16\n+\n+#define EXPECTED expected\n+\n+#define INPUT_TYPE float16_t\n+#define OUTPUT_TYPE float16_t\n+#define OUTPUT_TYPE_SIZE 16\n+\n+/* Include the template for binary scalar operations.  */\n+#include \"binary_scalar_op.inc\""}]}