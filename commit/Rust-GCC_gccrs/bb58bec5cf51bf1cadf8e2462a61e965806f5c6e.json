{"sha": "bb58bec5cf51bf1cadf8e2462a61e965806f5c6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI1OGJlYzVjZjUxYmYxY2FkZjhlMjQ2MmE2MWU5NjU4MDZmNWM2ZQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-10-11T21:54:33Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-10-11T21:54:33Z"}, "message": "c-typeck.c (check_modify_expr): New function.\n\n\t* c-typeck.c (check_modify_expr): New function.\n\t(build_modify_expr): Call it if warn_sequence_point.\n\t* c-decl.c (warn_sequence_point): New variable.\n\t(c_decode_option): Handle -Wsequence-point and\n\t-Wno-sequence-point.  Enable -Wsequence-point as part of -Wall.\n\t* c-tree.h (warn_sequence_point): Declare.\n\t* invoke.texi (-Wsequence-point): Document.\n\t* toplev.c (documented_lang_options): Add -Wsequence-point and\n\t-Wno-sequence-point.\n\tOriginal work by Michael Meeks, 16 Jun 1998.\n\ntestsuite:\n\t* gcc.dg/sequence-pt-1.c: New test.\n\nFrom-SVN: r36840", "tree": {"sha": "dbad9f895b3de111042fcb0bf7dd74fc9cdd6f68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbad9f895b3de111042fcb0bf7dd74fc9cdd6f68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb58bec5cf51bf1cadf8e2462a61e965806f5c6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb58bec5cf51bf1cadf8e2462a61e965806f5c6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb58bec5cf51bf1cadf8e2462a61e965806f5c6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb58bec5cf51bf1cadf8e2462a61e965806f5c6e/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0b43a40b5395e51595342a2b41dad2b44cf9a09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0b43a40b5395e51595342a2b41dad2b44cf9a09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0b43a40b5395e51595342a2b41dad2b44cf9a09"}], "stats": {"total": 254, "additions": 254, "deletions": 0}, "files": [{"sha": "2d4e90b29165e5e1184d4bd5bc9cf6ac96ee7b7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb58bec5cf51bf1cadf8e2462a61e965806f5c6e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb58bec5cf51bf1cadf8e2462a61e965806f5c6e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb58bec5cf51bf1cadf8e2462a61e965806f5c6e", "patch": "@@ -1,3 +1,17 @@\n+2000-10-11  Michael Meeks  <mmeeks@gnu.org>\n+            Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-typeck.c (check_modify_expr): New function.\n+\t(build_modify_expr): Call it if warn_sequence_point.\n+\t* c-decl.c (warn_sequence_point): New variable.\n+\t(c_decode_option): Handle -Wsequence-point and\n+\t-Wno-sequence-point.  Enable -Wsequence-point as part of -Wall.\n+\t* c-tree.h (warn_sequence_point): Declare.\n+\t* invoke.texi (-Wsequence-point): Document.\n+\t* toplev.c (documented_lang_options): Add -Wsequence-point and\n+\t-Wno-sequence-point.\n+\tOriginal work by Michael Meeks, 16 Jun 1998.\n+\n Wed Oct 11 06:15:41 2000  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* tree.c (get_narrower): Don't look at precision of field if"}, {"sha": "de45da782130ed7e8c995cd0bcfc5a19ba548d97", "filename": "gcc/c-decl.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb58bec5cf51bf1cadf8e2462a61e965806f5c6e/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb58bec5cf51bf1cadf8e2462a61e965806f5c6e/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=bb58bec5cf51bf1cadf8e2462a61e965806f5c6e", "patch": "@@ -497,6 +497,10 @@ int warn_float_equal = 0;\n \n int warn_multichar = 1;\n \n+/* Nonzero means warn about possible violations of sequence point rules.  */\n+\n+int warn_sequence_point;\n+\n /* The variant of the C language being processed.  */\n \n c_language_kind c_language = clk_c;\n@@ -765,6 +769,10 @@ c_decode_option (argc, argv)\n     warn_return_type = 1;\n   else if (!strcmp (p, \"-Wno-return-type\"))\n     warn_return_type = 0;\n+  else if (!strcmp (p, \"-Wsequence-point\"))\n+    warn_sequence_point = 1;\n+  else if (!strcmp (p, \"-Wno-sequence-point\"))\n+    warn_sequence_point = 0;\n   else if (!strcmp (p, \"-Wcomment\"))\n     ; /* cpp handles this one.  */\n   else if (!strcmp (p, \"-Wno-comment\"))\n@@ -826,6 +834,7 @@ c_decode_option (argc, argv)\n       warn_format = 1;\n       warn_char_subscripts = 1;\n       warn_parentheses = 1;\n+      warn_sequence_point = 1;\n       warn_missing_braces = 1;\n       /* We set this to 2 here, but 1 in -Wmain, so -ffreestanding can turn\n \t it off only if it's not explicit.  */"}, {"sha": "a936b22438d8ecb1c6b4db865415bfef773f5ef5", "filename": "gcc/c-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb58bec5cf51bf1cadf8e2462a61e965806f5c6e/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb58bec5cf51bf1cadf8e2462a61e965806f5c6e/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=bb58bec5cf51bf1cadf8e2462a61e965806f5c6e", "patch": "@@ -366,6 +366,10 @@ extern int warn_missing_braces;\n \n extern int warn_sign_compare;\n \n+/* Warn about possible violations of sequence point rules.  */\n+\n+extern int warn_sequence_point;\n+\n /* Warn about testing equality of floating point numbers. */\n \n extern int warn_float_equal;"}, {"sha": "d40aee19f66e1a7a5a25e268f29f73e9b538af21", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb58bec5cf51bf1cadf8e2462a61e965806f5c6e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb58bec5cf51bf1cadf8e2462a61e965806f5c6e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=bb58bec5cf51bf1cadf8e2462a61e965806f5c6e", "patch": "@@ -61,6 +61,7 @@ static tree pointer_diff\t\tPARAMS ((tree, tree));\n static tree unary_complex_lvalue\tPARAMS ((enum tree_code, tree));\n static void pedantic_lvalue_warning\tPARAMS ((enum tree_code));\n static tree internal_build_compound_expr PARAMS ((tree, int));\n+static void check_modify_expr\t\tPARAMS ((tree, tree));\n static tree convert_for_assignment\tPARAMS ((tree, tree, const char *,\n \t\t\t\t\t\t tree, tree, int));\n static void warn_for_assignment\t\tPARAMS ((const char *, const char *,\n@@ -3814,6 +3815,132 @@ build_c_cast (type, expr)\n \n   return value;\n }\n+\f\n+/* Recursive check for expressions that break the sequence point rules\n+   and so have undefined semantics (e.g. n = n++).  FIXME: if walk_tree\n+   gets moved out of the C++ front end, this should probably be moved\n+   to code shared between the front ends and use walk_tree.  */\n+static void\n+check_modify_expr (lhs, rhs)\n+     tree lhs, rhs;\n+{\n+  tree identifier_name;   /* A VAR_DECL name on the LHS that could\n+\t\t\t     be the same as one on the RHS. */\n+  identifier_name = NULL_TREE;\n+\n+  if ((lhs == NULL_TREE) || (rhs == NULL_TREE))\n+    return;\n+\n+  switch (TREE_CODE (rhs))\n+    {\n+    case ERROR_MARK:\n+      return;\n+    case VAR_DECL:\n+    case PARM_DECL:\n+      identifier_name = DECL_NAME (rhs);\n+      break;\n+    case PREDECREMENT_EXPR:\n+    case PREINCREMENT_EXPR:\n+    case POSTDECREMENT_EXPR:\n+    case POSTINCREMENT_EXPR:\n+      {\n+\ttree var_decl = TREE_OPERAND (rhs, 0);\n+\tif (TREE_CODE (var_decl) == VAR_DECL\n+\t    || TREE_CODE (var_decl) == PARM_DECL)\n+\t  identifier_name = DECL_NAME (var_decl);\n+      }\n+      break;\n+    case TREE_LIST:\n+      {\n+\ttree parm = TREE_CHAIN (rhs);\n+\t/* Now scan all the list, e.g. indices of multi dimensional array.  */\n+\twhile (parm)\n+\t  {\n+\t    check_modify_expr (lhs, TREE_VALUE (parm));\n+\t    parm = TREE_CHAIN (parm);\n+\t  }\n+      }\n+      return;\n+    case NOP_EXPR:\n+    case CONVERT_EXPR:\n+    case NON_LVALUE_EXPR:\n+      check_modify_expr (lhs, TREE_OPERAND (rhs, 0));\n+      return;\n+    case MODIFY_EXPR:\n+      /* First check for form a = b = a++ by checking RHS.  */\n+      check_modify_expr (lhs, TREE_OPERAND (rhs, 1));\n+      /* Then check for a = (a = 1) + 2 and a = b[a++] = c.  */\n+      if (TREE_CODE (TREE_OPERAND (rhs, 0)) == VAR_DECL\n+\t  || TREE_CODE (TREE_OPERAND (rhs, 0)) == PARM_DECL)\n+\t{\n+\t  identifier_name = DECL_NAME (TREE_OPERAND (rhs, 0));\n+\t  break;\n+\t}\n+      else\n+\t{\n+\t  check_modify_expr (lhs, TREE_OPERAND (rhs, 0));\n+\t  return;\n+\t}\n+    default:\n+      /* We don't know what to do... pray check_modify_expr removes\n+\t loops in the tree.  */\n+      switch (TREE_CODE_CLASS (TREE_CODE (rhs)))\n+\t{\n+\tcase 'r':\n+\tcase '<':\n+\tcase '2':\n+\tcase 'b':\n+\tcase '1':\n+\tcase 'e':\n+\tcase 's':\n+\tcase 'x':\n+\t  {\n+\t    int lp;\n+\t    int max = first_rtl_op (TREE_CODE (rhs));\n+\t    for (lp = 0; lp < max; lp++)\n+\t      check_modify_expr (lhs, TREE_OPERAND (rhs, lp));\n+\t    return;\n+\t  }\n+\tdefault:\n+\t  return;\n+\t}\n+      break;\n+    }\n+  if (identifier_name != NULL_TREE)\n+    {\n+      switch (TREE_CODE (lhs))\n+\t{\n+\tcase ERROR_MARK:\n+\t  return;\n+\t  /* Perhaps this variable was incremented on the RHS.  */\n+\tcase VAR_DECL:\n+\tcase PARM_DECL:\n+\t  if (TREE_CODE (rhs) != VAR_DECL && TREE_CODE (rhs) != PARM_DECL)\n+\t    if (DECL_NAME (lhs) == identifier_name)\n+\t      warning (\"operation on `%s' may be undefined\",\n+\t\t       IDENTIFIER_POINTER (DECL_NAME (lhs)));\n+\t  break;\n+\tcase PREDECREMENT_EXPR:\n+\tcase PREINCREMENT_EXPR:\n+\tcase POSTDECREMENT_EXPR:\n+\tcase POSTINCREMENT_EXPR:\n+\t  {\n+\t    tree var_decl = TREE_OPERAND (lhs, 0);\n+\t    if (TREE_CODE (var_decl) == VAR_DECL\n+\t\t|| TREE_CODE (var_decl) == PARM_DECL)\n+\t      if (identifier_name == DECL_NAME (var_decl))\n+\t\twarning (\"operation on `%s' may be undefined\",\n+\t\t\t IDENTIFIER_POINTER (DECL_NAME (var_decl)));\n+\t  }\n+\t  break;\n+\tdefault:\n+\t  /* To save duplicating tree traversal code swap args, and recurse.  */\n+\t  check_modify_expr (rhs, lhs);\n+\t  break;\n+\t}\n+    }\n+}\n+\n \f\n /* Build an assignment expression of lvalue LHS from value RHS.\n    MODIFYCODE is the code for a binary operator that we use\n@@ -3969,6 +4096,11 @@ build_modify_expr (lhs, modifycode, rhs)\n   if (TREE_CODE (newrhs) == ERROR_MARK)\n     return error_mark_node;\n \n+  if (warn_sequence_point)\n+    check_modify_expr (lhs, rhs);\n+\n+  /* Scan operands */\n+\n   result = build (MODIFY_EXPR, lhstype, lhs, newrhs);\n   TREE_SIDE_EFFECTS (result) = 1;\n "}, {"sha": "d7320d187f3ad0ba7ceb4bf3c37d8573e740b430", "filename": "gcc/invoke.texi", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb58bec5cf51bf1cadf8e2462a61e965806f5c6e/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb58bec5cf51bf1cadf8e2462a61e965806f5c6e/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=bb58bec5cf51bf1cadf8e2462a61e965806f5c6e", "patch": "@@ -1559,6 +1559,52 @@ the enclosing @code{if}.  The resulting code would look like this:\n @}\n @end smallexample\n \n+@item -Wsequence-point\n+Warn about code that may have undefined semantics because of violations\n+of sequence point rules in the C standard.\n+\n+The C standard defines the order in which expressions in a C program are\n+evaluated in terms of @dfn{sequence points}, which represent a partial\n+ordering between the execution of parts of the program: those executed\n+before the sequence point, and those executed after it.  These occur\n+after the evaluation of a full expression (one which is not part of a\n+larger expression), after the evaluation of the first operand of a\n+@code{&&}, @code{||}, @code{? :} or @code{,} (comma) operator, before a\n+function is called (but after the evaluation of its arguments and the\n+expression denoting the called function), and in certain other places.\n+Other than as expressed by the sequence point rules, the order of\n+evaluation of subexpressions of an expression is not specified.  All\n+these rules describe only a partial order rather than a total order,\n+since, for example, if two functions are called within one expression\n+with no sequence point between them, the order in which the functions\n+are called is not specified.  However, the standards committee have\n+ruled that function calls do not overlap.\n+\n+It is not specified when between sequence points modifications to the\n+values of objects take effect.  Programs whose behavior depends on this\n+have undefined behavior; the C standard specifies that ``Between the\n+previous and next sequence point an object shall have its stored value\n+modified at most once by the evaluation of an expression.  Furthermore,\n+the prior value shall be read only to determine the value to be\n+stored.''.  If a program breaks these rules, the results on any\n+particular implementation are entirely unpredictable.\n+\n+Examples of code with undefined behavior are @code{a = a++;}, @code{a[n]\n+= b[n++]} and @code{a[i++] = i;}.  Some more complicated cases are not\n+diagnosed by this option, and it may give an occasional false positive\n+result, but in general it has been found fairly effective at detecting\n+this sort of problem in programs.\n+\n+The present implementation of this option only works for C programs.  A\n+future implementation may also work for C++ programs.\n+\n+There is some controversy over the precise meaning of the sequence point\n+rules in subtle cases.  Alternative formal definitions may be found in\n+Clive Feather's ``Annex S''\n+@uref{http://wwwold.dkuug.dk/JTC1/SC22/WG14/www/docs/n908.htm} and in\n+Michael Norrish's thesis\n+@uref{http://www.cl.cam.ac.uk/users/mn200/PhD/thesis-report.ps.gz}.\n+\n @item -Wreturn-type\n Warn whenever a function is defined with a return-type that defaults to\n @code{int}.  Also warn about any @code{return} statement with no"}, {"sha": "c24008514d6b37303d003869bf0763fbd783a65a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb58bec5cf51bf1cadf8e2462a61e965806f5c6e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb58bec5cf51bf1cadf8e2462a61e965806f5c6e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bb58bec5cf51bf1cadf8e2462a61e965806f5c6e", "patch": "@@ -1,3 +1,7 @@\n+2000-10-11  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/sequence-pt-1.c: New test.\n+\n 2000-10-11  Geoff Keating  <geoffk@cygnus.com>\n \n \t* gcc.c-torture/execute/20001011-1.c: New testcase."}, {"sha": "f5738b9505311e4634061cbd2eb7f5a5a9eabdfb", "filename": "gcc/testsuite/gcc.dg/sequence-pt-1.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb58bec5cf51bf1cadf8e2462a61e965806f5c6e/gcc%2Ftestsuite%2Fgcc.dg%2Fsequence-pt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb58bec5cf51bf1cadf8e2462a61e965806f5c6e/gcc%2Ftestsuite%2Fgcc.dg%2Fsequence-pt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsequence-pt-1.c?ref=bb58bec5cf51bf1cadf8e2462a61e965806f5c6e", "patch": "@@ -0,0 +1,42 @@\n+/* Test for sequence point warnings.  */\n+/* Origin: Michael Meeks in\n+   <URL:http://gcc.gnu.org/ml/gcc-patches/1998-06/msg00316.html>,\n+   adapted to a testcase by Joseph Myers <jsm28@cam.ac.uk>.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wsequence-point\" } */\n+\n+struct s\n+{\n+  int a;\n+};\n+\n+extern int fn (int);\n+extern int sprintf (char *, const char *, ...);\n+\n+void\n+foo (int a, int b, int n, int p, int *ptr, struct s *sptr,\n+     int *ap, int *bp, int **cp, char *ans)\n+{\n+  int len;\n+  a = a++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = --a; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = ++a + b; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = a-- + b; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = (a++ && 4); /* { dg-bogus \"undefined\" \"bogus sequence point warning\" { xfail *-*-* } } */\n+  ap[n] = bp[n++]; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  ap[--n] = bp[n]; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  ap[++n] = bp[--n]; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  cp[n][n] = cp[n][n]++; /* { dg-warning \"undefined\" \"sequence point warning\" { xfail *-*-* } } */\n+  cp[n][p] = cp[n][n++]; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  *ptr++ = (int)ptr++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  sptr->a = sptr->a++; /* { dg-warning \"undefined\" \"sequence point warning\" { xfail *-*-* } } */\n+  sptr->a = (int)(sptr++); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  len = sprintf (ans, \"%d\", len++); /* { dg-bogus \"undefined\" \"bogus sequence point warning\" { xfail *-*-* } } */\n+  *ptr++ = fn (*ptr); /* { dg-warning \"undefined\" \"sequence point warning\" { xfail *-*-* } } */\n+  a = b = a++; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  b = a = --b; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = 1 + (a = 1); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = (a = b); /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = (a = b) + 1; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+  a = (bp[a++] = b) + 1; /* { dg-warning \"undefined\" \"sequence point warning\" } */\n+}"}, {"sha": "fb7c71bcb3aeb8d97825cd96dbe4b796f2c07472", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb58bec5cf51bf1cadf8e2462a61e965806f5c6e/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb58bec5cf51bf1cadf8e2462a61e965806f5c6e/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=bb58bec5cf51bf1cadf8e2462a61e965806f5c6e", "patch": "@@ -1247,6 +1247,9 @@ documented_lang_options[] =\n   { \"-Wno-nested-externs\", \"\" },\n   { \"-Wparentheses\", \"Warn about possible missing parentheses\" },\n   { \"-Wno-parentheses\", \"\" },\n+  { \"-Wsequence-point\",\n+    \"Warn about possible violations of sequence point rules\" },\n+  { \"-Wno-sequence-point\", \"\" },\n   { \"-Wpointer-arith\", \"Warn about function pointer arithmetic\" },\n   { \"-Wno-pointer-arith\", \"\" },\n   { \"-Wredundant-decls\","}]}