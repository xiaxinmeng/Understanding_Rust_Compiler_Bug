{"sha": "89c7ca526df13eeae5b07901ca96b6c08b94b785", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODljN2NhNTI2ZGYxM2VlYWU1YjA3OTAxY2E5NmI2YzA4Yjk0Yjc4NQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1996-02-27T13:15:13Z"}, "committer": {"name": "Richard Earnshaw", "email": "erich@gnu.org", "date": "1996-02-27T13:15:13Z"}, "message": "arm.h (enum arm_cond_code): New enum.\n\n* arm.h (enum arm_cond_code): New enum.\n(ARM_INVERSE_CONDITION_CODE): Moved here from arm.c.\n(SELECT_CC_MODE): Call arm_select_cc_mode to do the work.\n(PREDICATE_CODES): Add dominant_cc_register; delete\nreversible_cc_register.\n\nFrom-SVN: r11350", "tree": {"sha": "a79c35b9e94a89cc14c94be9399686ddb9d6626f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a79c35b9e94a89cc14c94be9399686ddb9d6626f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89c7ca526df13eeae5b07901ca96b6c08b94b785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89c7ca526df13eeae5b07901ca96b6c08b94b785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89c7ca526df13eeae5b07901ca96b6c08b94b785", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89c7ca526df13eeae5b07901ca96b6c08b94b785/comments", "author": null, "committer": null, "parents": [{"sha": "967ba98d99b8a3a51f9ba33771453a945ace3745", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/967ba98d99b8a3a51f9ba33771453a945ace3745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/967ba98d99b8a3a51f9ba33771453a945ace3745"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "575f5f0ff7933a4907d64361f75a86b2ace617b0", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89c7ca526df13eeae5b07901ca96b6c08b94b785/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89c7ca526df13eeae5b07901ca96b6c08b94b785/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=89c7ca526df13eeae5b07901ca96b6c08b94b785", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for Acorn RISC Machine.\n-   Copyright (C) 1991, 1993, 1994, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1991, 1993, 1994, 1995, 1996 Free Software Foundation, Inc.\n    Contributed by Pieter `Tiggr' Schoenmakers (rcpieter@win.tue.nl)\n    and Martin Simmons (@harleqn.co.uk).\n    More major hacks by Richard Earnshaw (rwe11@cl.cam.ac.uk)\n@@ -36,13 +36,24 @@ extern char *output_mov_immediate ();\n extern char *output_multi_immediate ();\n extern char *output_return_instruction ();\n extern char *output_load_symbol ();\n+extern char *emit_ldm_seq ();\n+extern char *emit_stm_seq ();\n extern char *fp_immediate_constant ();\n extern struct rtx_def *gen_compare_reg ();\n extern struct rtx_def *arm_gen_store_multiple ();\n extern struct rtx_def *arm_gen_load_multiple ();\n+extern struct rtx_def *gen_rotated_half_load ();\n \n+enum arm_cond_code\n+{\n+  ARM_EQ = 0, ARM_NE, ARM_CS, ARM_CC, ARM_MI, ARM_PL, ARM_VS, ARM_VC,\n+  ARM_HI, ARM_LS, ARM_GE, ARM_LT, ARM_GT, ARM_LE, ARM_AL, ARM_NV\n+};\n+extern enum arm_cond_code arm_current_cc;\n extern char *arm_condition_codes[];\n \n+#define ARM_INVERSE_CONDITION_CODE(X)  ((enum arm_cond_code) (((int)X) ^ 1))\n+\n /* This is needed by the tail-calling peepholes */\n extern int frame_pointer_needed;\n \n@@ -1441,24 +1452,17 @@ do\t\t\t\t\t\t\t\t\t\\\n    CC_Zmode should be used if only the Z flag is set correctly\n    CCmode should be used otherwise. */\n \n-#define EXTRA_CC_MODES CC_NOOVmode, CC_Zmode, CCFPmode, CCFPEmode\n-\n-#define EXTRA_CC_NAMES \"CC_NOOV\", \"CC_Z\", \"CCFP\", \"CCFPE\"\n-\n-#define SELECT_CC_MODE(OP,X,Y)\t\t\t\t      \t\t\\\n-  (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT\t\t\t\t\\\n-   ? ((OP == EQ || OP == NE) ? CCFPmode : CCFPEmode)\t\t\t\\\n-   : ((GET_MODE (X) == SImode)\t\t\t\t\t\t\\\n-      && ((OP) == EQ || (OP) == NE || (OP) == LT || (OP) == GE)\t\t\\\n-      && (GET_CODE (X) == PLUS || GET_CODE (X) == MINUS\t\t\t\\\n-\t  || GET_CODE (X) == AND || GET_CODE (X) == IOR\t\t\t\\\n-\t  || GET_CODE (X) == XOR || GET_CODE (X) == MULT\t\t\\\n-\t  || GET_CODE (X) == NOT || GET_CODE (X) == NEG\t\t\t\\\n-\t  || GET_CODE (X) == LSHIFTRT\t\t\t\t\t\\\n-\t  || GET_CODE (X) == ASHIFT || GET_CODE (X) == ASHIFTRT\t\t\\\n-\t  || GET_CODE (X) == ROTATERT || GET_CODE (X) == ZERO_EXTRACT)\t\\\n-      ? CC_NOOVmode\t\t\t\t\t\t\t\\\n-      : GET_MODE (X) == QImode ? CC_Zmode : CCmode))\n+#define EXTRA_CC_MODES CC_NOOVmode, CC_Zmode, CC_SWPmode, \\\n+  CCFPmode, CCFPEmode, CC_DNEmode, CC_DEQmode, CC_DLEmode, \\\n+  CC_DLTmode, CC_DGEmode, CC_DGTmode, CC_DLEUmode, CC_DLTUmode, \\\n+  CC_DGEUmode, CC_DGTUmode\n+\n+#define EXTRA_CC_NAMES \"CC_NOOV\", \"CC_Z\", \"CC_SWP\", \"CCFP\", \"CCFPE\", \\\n+  \"CC_DNE\", \"CC_DEQ\", \"CC_DLE\", \"CC_DLT\", \"CC_DGE\", \"CC_DGT\", \"CC_DLEU\", \\\n+  \"CC_DLTU\", \"CC_DGEU\", \"CC_DGTU\"\n+\n+enum machine_mode arm_select_cc_mode ();\n+#define SELECT_CC_MODE(OP,X,Y)  arm_select_cc_mode ((OP), (X), (Y))\n \n #define REVERSIBLE_CC_MODE(MODE) ((MODE) != CCFPEmode)\n \n@@ -1495,7 +1499,7 @@ extern int arm_compare_fp;\n   {\"reg_or_int_operand\", {SUBREG, REG, CONST_INT}},\t\t\t\\\n   {\"multi_register_push\", {PARALLEL}},\t\t\t\t\t\\\n   {\"cc_register\", {REG}},\t\t\t\t\t\t\\\n-  {\"reversible_cc_register\", {REG}},\n+  {\"dominant_cc_register\", {REG}},\n \n \f\n "}]}