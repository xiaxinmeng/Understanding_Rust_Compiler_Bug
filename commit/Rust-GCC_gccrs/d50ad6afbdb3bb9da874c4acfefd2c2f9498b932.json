{"sha": "d50ad6afbdb3bb9da874c4acfefd2c2f9498b932", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDUwYWQ2YWZiZGIzYmI5ZGE4NzRjNGFjZmVmZDJjMmY5NDk4YjkzMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2003-06-12T01:04:32Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-06-12T01:04:32Z"}, "message": "stmt.c (expand_asm_operands): Don't warn for memories with queued addresses.\n\n        * stmt.c (expand_asm_operands): Don't warn for memories with\n        queued addresses.\n\nFrom-SVN: r67808", "tree": {"sha": "6f567b8c6b6aef114abfc67ec71ebb211f5b6893", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f567b8c6b6aef114abfc67ec71ebb211f5b6893"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d50ad6afbdb3bb9da874c4acfefd2c2f9498b932", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d50ad6afbdb3bb9da874c4acfefd2c2f9498b932", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d50ad6afbdb3bb9da874c4acfefd2c2f9498b932", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d50ad6afbdb3bb9da874c4acfefd2c2f9498b932/comments", "author": null, "committer": null, "parents": [{"sha": "e46f19c8487361f93b189b877e3dfd0a13ce2b93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e46f19c8487361f93b189b877e3dfd0a13ce2b93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e46f19c8487361f93b189b877e3dfd0a13ce2b93"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "ecbb5be3a9b0dc0e7d402ed04dab7e3cefbca636", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50ad6afbdb3bb9da874c4acfefd2c2f9498b932/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50ad6afbdb3bb9da874c4acfefd2c2f9498b932/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d50ad6afbdb3bb9da874c4acfefd2c2f9498b932", "patch": "@@ -1,3 +1,8 @@\n+2003-06-11  Richard Henderson  <rth@redhat.com>\n+\n+\t* stmt.c (expand_asm_operands): Don't warn for memories with\n+\tqueued addresses.\n+\n 2003-06-11  Kaz Kojima  <kkojima@gcc.gnu.org>\n \n \t* config/sh/sh.h (SUBTARGET_ASM_RELAX_SPEC): Rewrite without"}, {"sha": "4561d722230ba935c7147fe802f92735ba1a7b40", "filename": "gcc/stmt.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50ad6afbdb3bb9da874c4acfefd2c2f9498b932/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50ad6afbdb3bb9da874c4acfefd2c2f9498b932/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=d50ad6afbdb3bb9da874c4acfefd2c2f9498b932", "patch": "@@ -1765,10 +1765,11 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t  else if (!allows_mem)\n \t    warning (\"asm operand %d probably doesn't match constraints\",\n \t\t     i + noutputs);\n-\t  else if (GET_CODE (op) == MEM && MEM_VOLATILE_P (op))\n+\t  else if (GET_CODE (op) == MEM)\n \t    {\n-\t      /* We won't recognize volatile memory as available a\n-\t\t memory_operand at this point.  Ignore it.  */\n+\t      /* We won't recognize either volatile memory or memory\n+\t\t with a queued address as available a memory_operand\n+\t\t at this point.  Ignore it: clearly this *is* a memory.  */\n \t    }\n \t  else\n \t    {"}, {"sha": "42f40e719f909e4d13fc0f376771d7d3a0b5f41c", "filename": "gcc/testsuite/gcc.dg/asm-7.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d50ad6afbdb3bb9da874c4acfefd2c2f9498b932/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d50ad6afbdb3bb9da874c4acfefd2c2f9498b932/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasm-7.c?ref=d50ad6afbdb3bb9da874c4acfefd2c2f9498b932", "patch": "@@ -7,12 +7,14 @@ void test(void)\n   register int r2;\n   int i;\n   static int m;\n+  int *p;\n \n   __asm__ (\"\" : : \"m\"(r));\t/* { dg-warning \"address of register\" } */\n   __asm__ (\"\" : : \"m\"(i));\n   __asm__ (\"\" : : \"m\"(m));\n   __asm__ (\"\" : : \"m\"(0));\t/* { dg-warning \"input without lvalue\" } */\n   __asm__ (\"\" : : \"m\"(i+1));\t/* { dg-warning \"input without lvalue\" } */\n+  __asm__ (\"\" : : \"m\"(*p++));\n \n   __asm__ (\"\" : : \"g\"(r));\n   __asm__ (\"\" : : \"g\"(i));"}]}