{"sha": "6a4d4e8a858aa2290092d5a7200ec797daf3ae1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE0ZDRlOGE4NThhYTIyOTAwOTJkNWE3MjAwZWM3OTdkYWYzYWUxYg==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2010-01-05T17:14:30Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2010-01-05T17:14:30Z"}, "message": "re PR bootstrap/41771 (Bootstrap with Sun Studio 12.1 fails)\n\n\tgcc:\n\tPR bootstrap/41771\n\t* flags.h: Don't include real.h.\n\t(HONOR_NANS, HONOR_SNANS, HONOR_INFINITIES, HONOR_SIGNED_ZEROS,\n\tHONOR_SIGN_DEPENDENT_ROUNDING): Move ...\n\t* real.h (HONOR_NANS, HONOR_SNANS, HONOR_INFINITIES,\n\tHONOR_SIGNED_ZEROS, HONOR_SIGN_DEPENDENT_ROUNDING): ... here.\n\t* dominance.c: Update copyright.\n\t* gimple.c (walk_gimple_op): Remove inline.\n\t* tree-ssa-reassoc.c: Include real.h.\n\t* Makefile.in (FLAGS_H): Remove $(REAL_H).\n\t(tree-ssa-reassoc.o): Depend on $(REAL_H).\n\n\tinclude:\n\tPR bootstrap/41771\n\t* ansidecl.h: Fix inline test for C99 and Sun Studio cc.\n\nFrom-SVN: r155654", "tree": {"sha": "94d109ef057bc7ce14a8f5017dfbbe0b88f96afb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94d109ef057bc7ce14a8f5017dfbbe0b88f96afb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d097567da357024ce7863036368e48b0fd4baaaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d097567da357024ce7863036368e48b0fd4baaaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d097567da357024ce7863036368e48b0fd4baaaa"}], "stats": {"total": 97, "additions": 58, "deletions": 39}, "files": [{"sha": "dbeeb8c792e981882b73ce5e512e23aca94252a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a4d4e8a858aa2290092d5a7200ec797daf3ae1b", "patch": "@@ -1,3 +1,17 @@\n+2010-01-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR bootstrap/41771\n+\t* flags.h: Don't include real.h.\n+\t(HONOR_NANS, HONOR_SNANS, HONOR_INFINITIES, HONOR_SIGNED_ZEROS,\n+\tHONOR_SIGN_DEPENDENT_ROUNDING): Move ...\n+\t* real.h (HONOR_NANS, HONOR_SNANS, HONOR_INFINITIES,\n+\tHONOR_SIGNED_ZEROS, HONOR_SIGN_DEPENDENT_ROUNDING): ... here.\n+\t* dominance.c: Update copyright.\n+\t* gimple.c (walk_gimple_op): Remove inline.\n+\t* tree-ssa-reassoc.c: Include real.h.\n+\t* Makefile.in (FLAGS_H): Remove $(REAL_H).\n+\t(tree-ssa-reassoc.o): Depend on $(REAL_H).\n+\n 2010-01-05  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rx/rx.c (rx_get_stack_layout): Fix allocation of second"}, {"sha": "9e41f2a81a78d705ad9ce70fa63f8c60eea2c5c1", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6a4d4e8a858aa2290092d5a7200ec797daf3ae1b", "patch": "@@ -3,7 +3,7 @@\n \n # Copyright (C) 1987, 1988, 1990, 1991, 1992, 1993, 1994, 1995, 1996,\n # 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\n-# 2008, 2009 Free Software Foundation, Inc.\n+# 2008, 2009, 2010 Free Software Foundation, Inc.\n \n #This file is part of GCC.\n \n@@ -875,7 +875,7 @@ DEMANGLE_H = $(srcdir)/../include/demangle.h\n RECOG_H = recog.h\n ALIAS_H = alias.h coretypes.h\n EMIT_RTL_H = emit-rtl.h\n-FLAGS_H = flags.h coretypes.h options.h $(REAL_H)\n+FLAGS_H = flags.h coretypes.h options.h\n FUNCTION_H = function.h $(TREE_H) $(HASHTAB_H) vecprim.h\n EXPR_H = expr.h insn-config.h $(FUNCTION_H) $(RTL_H) $(FLAGS_H) $(TREE_H) $(MACHMODE_H) $(EMIT_RTL_H)\n OPTABS_H = optabs.h insn-codes.h\n@@ -2501,8 +2501,8 @@ tree-ssa-alias.o : tree-ssa-alias.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n tree-ssa-reassoc.o : tree-ssa-reassoc.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(GGC_H) $(DIAGNOSTIC_H) $(TIMEVAR_H) \\\n    $(TM_H) coretypes.h $(TREE_DUMP_H) $(TREE_PASS_H) $(FLAGS_H) \\\n-   tree-iterator.h $(BASIC_BLOCK_H) $(GIMPLE_H) $(TREE_INLINE_H) vec.h \\\n-   langhooks.h alloc-pool.h pointer-set.h $(CFGLOOP_H)\n+   tree-iterator.h $(REAL_H) $(BASIC_BLOCK_H) $(GIMPLE_H) $(TREE_INLINE_H) \\\n+   vec.h langhooks.h alloc-pool.h pointer-set.h $(CFGLOOP_H)\n tree-optimize.o : tree-optimize.c $(TREE_FLOW_H) $(CONFIG_H) $(SYSTEM_H) \\\n    $(RTL_H) $(TREE_H) $(TM_P_H) hard-reg-set.h $(EXPR_H) $(GGC_H) output.h \\\n    $(DIAGNOSTIC_H) $(BASIC_BLOCK_H) $(FLAGS_H) $(TIMEVAR_H) $(TM_H) \\"}, {"sha": "6dd58a868a3b62c9f09972f7148da4e2101ca726", "filename": "gcc/dominance.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=6a4d4e8a858aa2290092d5a7200ec797daf3ae1b", "patch": "@@ -1,5 +1,5 @@\n /* Calculate (post)dominators in slightly super-linear time.\n-   Copyright (C) 2000, 2003, 2004, 2005, 2006, 2007, 2008 Free\n+   Copyright (C) 2000, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free\n    Software Foundation, Inc.\n    Contributed by Michael Matz (matz@ifh.de).\n "}, {"sha": "d1634bd9e1142e043c92537c78db68acbdb1dec2", "filename": "gcc/flags.h", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=6a4d4e8a858aa2290092d5a7200ec797daf3ae1b", "patch": "@@ -1,6 +1,6 @@\n /* Compilation switch flag definitions for GCC.\n    Copyright (C) 1987, 1988, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2002,\n-   2003, 2004, 2005, 2006, 2007, 2008, 2009\n+   2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -24,7 +24,6 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"coretypes.h\"\n #include \"options.h\"\n-#include \"real.h\"\n \n enum debug_info_type\n {\n@@ -334,32 +333,6 @@ extern enum stack_check_type flag_stack_check;\n    instrumentation.  */\n extern bool flag_instrument_functions_exclude_p (tree fndecl);\n \n-/* True if the given mode has a NaN representation and the treatment of\n-   NaN operands is important.  Certain optimizations, such as folding\n-   x * 0 into 0, are not correct for NaN operands, and are normally\n-   disabled for modes with NaNs.  The user can ask for them to be\n-   done anyway using the -funsafe-math-optimizations switch.  */\n-#define HONOR_NANS(MODE) \\\n-  (MODE_HAS_NANS (MODE) && !flag_finite_math_only)\n-\n-/* Like HONOR_NANs, but true if we honor signaling NaNs (or sNaNs).  */\n-#define HONOR_SNANS(MODE) (flag_signaling_nans && HONOR_NANS (MODE))\n-\n-/* As for HONOR_NANS, but true if the mode can represent infinity and\n-   the treatment of infinite values is important.  */\n-#define HONOR_INFINITIES(MODE) \\\n-  (MODE_HAS_INFINITIES (MODE) && !flag_finite_math_only)\n-\n-/* Like HONOR_NANS, but true if the given mode distinguishes between\n-   positive and negative zero, and the sign of zero is important.  */\n-#define HONOR_SIGNED_ZEROS(MODE) \\\n-  (MODE_HAS_SIGNED_ZEROS (MODE) && flag_signed_zeros)\n-\n-/* Like HONOR_NANS, but true if given mode supports sign-dependent rounding,\n-   and the rounding mode is important.  */\n-#define HONOR_SIGN_DEPENDENT_ROUNDING(MODE) \\\n-  (MODE_HAS_SIGN_DEPENDENT_ROUNDING (MODE) && flag_rounding_math)\n-\n /* True if overflow wraps around for the given integral type.  That\n    is, TYPE_MAX + 1 == TYPE_MIN.  */\n #define TYPE_OVERFLOW_WRAPS(TYPE) \\"}, {"sha": "3ee15b5698919c186fc4369bf385d058f298ebaf", "filename": "gcc/gimple.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=6a4d4e8a858aa2290092d5a7200ec797daf3ae1b", "patch": "@@ -1,6 +1,6 @@\n /* Gimple IR support functions.\n \n-   Copyright 2007, 2008, 2009 Free Software Foundation, Inc.\n+   Copyright 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Aldy Hernandez <aldyh@redhat.com>\n \n This file is part of GCC.\n@@ -1297,7 +1297,7 @@ walk_gimple_asm (gimple stmt, walk_tree_fn callback_op,\n    The return value is that returned by the last call to walk_tree, or\n    NULL_TREE if no CALLBACK_OP is specified.  */\n \n-inline tree\n+tree\n walk_gimple_op (gimple stmt, walk_tree_fn callback_op,\n \t\tstruct walk_stmt_info *wi)\n {"}, {"sha": "980bf960f5feda8450233dc3115952d61b1e80de", "filename": "gcc/real.h", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=6a4d4e8a858aa2290092d5a7200ec797daf3ae1b", "patch": "@@ -1,6 +1,7 @@\n /* Definitions of floating-point access for GNU compiler.\n    Copyright (C) 1989, 1991, 1994, 1996, 1997, 1998, 1999,\n-   2000, 2002, 2003, 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n+   2000, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -199,6 +200,31 @@ extern const struct real_format *\n   (FLOAT_MODE_P (MODE) \\\n    && FLOAT_MODE_FORMAT (MODE)->has_sign_dependent_rounding)\n \n+/* True if the given mode has a NaN representation and the treatment of\n+   NaN operands is important.  Certain optimizations, such as folding\n+   x * 0 into 0, are not correct for NaN operands, and are normally\n+   disabled for modes with NaNs.  The user can ask for them to be\n+   done anyway using the -funsafe-math-optimizations switch.  */\n+#define HONOR_NANS(MODE) \\\n+  (MODE_HAS_NANS (MODE) && !flag_finite_math_only)\n+\n+/* Like HONOR_NANs, but true if we honor signaling NaNs (or sNaNs).  */\n+#define HONOR_SNANS(MODE) (flag_signaling_nans && HONOR_NANS (MODE))\n+\n+/* As for HONOR_NANS, but true if the mode can represent infinity and\n+   the treatment of infinite values is important.  */\n+#define HONOR_INFINITIES(MODE) \\\n+  (MODE_HAS_INFINITIES (MODE) && !flag_finite_math_only)\n+\n+/* Like HONOR_NANS, but true if the given mode distinguishes between\n+   positive and negative zero, and the sign of zero is important.  */\n+#define HONOR_SIGNED_ZEROS(MODE) \\\n+  (MODE_HAS_SIGNED_ZEROS (MODE) && flag_signed_zeros)\n+\n+/* Like HONOR_NANS, but true if given mode supports sign-dependent rounding,\n+   and the rounding mode is important.  */\n+#define HONOR_SIGN_DEPENDENT_ROUNDING(MODE) \\\n+  (MODE_HAS_SIGN_DEPENDENT_ROUNDING (MODE) && flag_rounding_math)\n \n /* Declare functions in real.c.  */\n "}, {"sha": "f428008a18e77ad3bdec87c7e77d0285461683e0", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=6a4d4e8a858aa2290092d5a7200ec797daf3ae1b", "patch": "@@ -1,5 +1,5 @@\n /* Reassociation for trees.\n-   Copyright (C) 2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.\n    Contributed by Daniel Berlin <dan@dberlin.org>\n \n This file is part of GCC.\n@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-dump.h\"\n #include \"timevar.h\"\n #include \"tree-iterator.h\"\n+#include \"real.h\"\n #include \"tree-pass.h\"\n #include \"alloc-pool.h\"\n #include \"vec.h\""}, {"sha": "59fbbdad265ca7c73bf2d1c161f7791666d95233", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=6a4d4e8a858aa2290092d5a7200ec797daf3ae1b", "patch": "@@ -1,3 +1,8 @@\n+2010-01-05  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR bootstrap/41771\n+\t* ansidecl.h: Fix inline test for C99 and Sun Studio cc.\n+\n 2009-12-29  Joel Brobecker  <brobecker@adacore.com>\n \n \t* dwarf2.h (enum dwarf_attribute): Add DW_AT_GNAT_descriptive_type."}, {"sha": "8b76647426bf9641c0b0c969efa23d2886831b8c", "filename": "include/ansidecl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b/include%2Fansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4d4e8a858aa2290092d5a7200ec797daf3ae1b/include%2Fansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fansidecl.h?ref=6a4d4e8a858aa2290092d5a7200ec797daf3ae1b", "patch": "@@ -1,6 +1,6 @@\n /* ANSI and traditional C compatability macros\n    Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001,\n-   2002, 2003, 2004, 2005, 2006, 2007, 2009\n+   2002, 2003, 2004, 2005, 2006, 2007, 2009, 2010\n    Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n \n@@ -178,7 +178,7 @@ So instead we use the macro below and test it against specific values.  */\n /* inline requires special treatment; it's in C99, and GCC >=2.7 supports\n    it too, but it's not in C89.  */\n #undef inline\n-#if __STDC_VERSION__ > 199901L || defined(__cplusplus)\n+#if __STDC_VERSION__ >= 199901L || defined(__cplusplus) || (defined(__SUNPRO_C) && defined(__C99FEATURES__))\n /* it's a keyword */\n #else\n # if GCC_VERSION >= 2007"}]}