{"sha": "9217ef40d124791add4a83eed80a0b2e189a5ae0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIxN2VmNDBkMTI0NzkxYWRkNGE4M2VlZDgwYTBiMmUxODlhNWFlMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-23T08:21:36Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-23T08:21:36Z"}, "message": "extend.texi (C99 Thread-Local Edits): New subsection.\n\n        * doc/extend.texi (C99 Thread-Local Edits): New subsection.\n        (C++98 Thread-Local Edits): New subsection.\n\nFrom-SVN: r53781", "tree": {"sha": "f958cadf8da96b71a13b8766210158a94a46d874", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f958cadf8da96b71a13b8766210158a94a46d874"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9217ef40d124791add4a83eed80a0b2e189a5ae0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9217ef40d124791add4a83eed80a0b2e189a5ae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9217ef40d124791add4a83eed80a0b2e189a5ae0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9217ef40d124791add4a83eed80a0b2e189a5ae0/comments", "author": null, "committer": null, "parents": [{"sha": "5bf0ebab2da34345b9119e13ea58e5673426fd7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bf0ebab2da34345b9119e13ea58e5673426fd7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bf0ebab2da34345b9119e13ea58e5673426fd7d"}], "stats": {"total": 224, "additions": 217, "deletions": 7}, "files": [{"sha": "055b019a5e5a2881488a31a2dac4e4d7eb9748be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9217ef40d124791add4a83eed80a0b2e189a5ae0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9217ef40d124791add4a83eed80a0b2e189a5ae0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9217ef40d124791add4a83eed80a0b2e189a5ae0", "patch": "@@ -1,5 +1,8 @@\n 2002-05-23  Richard Henderson  <rth@redhat.com>\n \n+\t* doc/extend.texi (C99 Thread-Local Edits): New subsection.\n+\t(C++98 Thread-Local Edits): New subsection.\n+\n \t* config/i386/i386.c, config/i386/i386.h: Tidy comments and whitespace.\n \t(ix86_arch): Set type to enum processor_type.\n "}, {"sha": "4209f2a5dbc9a9fbc40e9852929ea62bbb248578", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 214, "deletions": 7, "changes": 221, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9217ef40d124791add4a83eed80a0b2e189a5ae0/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9217ef40d124791add4a83eed80a0b2e189a5ae0/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=9217ef40d124791add4a83eed80a0b2e189a5ae0", "patch": "@@ -6169,17 +6169,17 @@ such constructs may be detected and treated as compilation errors.\n @node Thread-Local\n @section Thread-Local Storage\n @cindex Thread-Local Storage\n-@cindex TLS\n+@cindex @acronym{TLS}\n @cindex __thread\n \n-Thread-local storage (TLS) is a mechanism by which variables are\n-allocated such that there is one instance of the variable per extant\n+Thread-local storage (@acronym{TLS}) is a mechanism by which variables\n+are allocated such that there is one instance of the variable per extant\n thread.  The run-time model GCC uses to implement this originates\n in the IA-64 processor-specific ABI, but has since been migrated\n to other processors as well.  It requires significant support from\n the linker (@command{ld}), dynamic linker (@command{ld.so}), and\n system libraries (@file{libc.so} and @file{libpthread.so}), so it\n-is not supported everywhere.\n+is not available everywhere.\n \n At the user level, the extension is visible with a new storage\n class keyword: @code{__thread}.  For example:\n@@ -6197,7 +6197,7 @@ immediately after the other storage class specifier.\n \n The @code{__thread} specifier may be applied to any global, file-scoped\n static, function-scoped static, or class-scoped static variable.  It may\n-not be applied to function-scoped automatic or class-scoped member variables.\n+not be applied to block-scoped automatic or class-scoped member variables.\n \n When the address-of operator is applied to a thread-local variable, it is\n evaluated at run-time and returns the address of the current thread's\n@@ -6207,14 +6207,221 @@ in that thread become invalid.\n \n No static initialization may refer to the address of a thread-local variable.\n \n-In C++, a thread-local variable may not be initialized by a static\n-constructor.\n+In C++, a thread-local variable may not be initialized at runtime,\n+that is, either by a static constructor or a non-constant expression.\n \n See @uref{http://people.redhat.com/drepper/tls.pdf,\n ELF Handling For Thread-Local Storage} for a detailed explanation of\n the four thread-local storage addressing models, and how the run-time\n is expected to function.\n \n+@menu\n+* C99 Thread-Local Edits::\n+* C++98 Thread-Local Edits::\n+@end menu\n+\n+@node C99 Thread-Local Edits\n+@subsection ISO/IEC 9899:1999 Edits for Thread-Local Storage\n+\n+The following are a set of changes to ISO/IEC 9899:1999 (aka C99)\n+that document the exact semantics of the language extension.\n+\n+@itemize @bullet\n+@item\n+@cite{5.1.2  Execution environments}\n+\n+Add new text after paragraph 1\n+\n+@quotation\n+Within either execution environment, a @dfn{thread} is a flow of\n+control within a program.  It is implementation defined whether\n+or not there may be more than one thread associated with a program.\n+It is implementation defined how threads beyond the first are\n+created, the name and type of the function called at thread\n+startup, and how threads may be terminated.  However, objects\n+with thread storage duration shall be initialized before thread\n+startup.\n+@end quotation\n+\n+@item\n+@cite{6.2.4  Storage durations of objects}\n+\n+Add new text before paragraph 3\n+\n+@quotation\n+An object whose identifier is declared with the storage-class\n+specifier @w{@code{__thread}} has @dfn{thread storage duration}.\n+Its lifetime is the entire execution of the thread, and its\n+stored value is initialized only once, prior to thread startup.\n+@end quotation\n+\n+@item\n+@cite{6.4.1  Keywords}\n+\n+Add @code{__thread}.\n+\n+@item\n+@cite{6.7.1  Storage-class specifiers}\n+\n+Add @code{__thread} to the list of storage class specifiers in\n+paragraph 1.\n+\n+Change paragraph 2 to\n+\n+@quotation\n+With the exception of @code{__thread}, at most one storage-class\n+specifier may be given [@dots{}].  The @code{__thread} specifier may\n+be used alone, or immediately following @code{extern} or\n+@code{static}.\n+@end quotation\n+\n+Add new text after paragraph 6\n+\n+@quotation\n+The declaration of an identifier for a variable that has\n+block scope that specifies @code{__thread} shall also\n+specify either @code{extern} or @code{static}.\n+\n+The @code{__thread} specifier shall be used only with\n+variables.\n+@end quotation\n+@end itemize\n+\n+@node C++98 Thread-Local Edits\n+@subsection ISO/IEC 14882:1998 Edits for Thread-Local Storage\n+\n+The following are a set of changes to ISO/IEC 14882:1998 (aka C++98)\n+that document the exact semantics of the language extension.\n+\n+@itemize @bullet\n+@b{[intro.execution]}\n+\n+New text after paragraph 4\n+\n+@quotation\n+A @dfn{thread} is a flow of control within the abstract machine.\n+It is implementation defined whether or not there may be more than\n+one thread.\n+@end quotation\n+\n+New text after paragraph 7\n+\n+@quotation\n+It is unspecified whether additional action must be taken to \n+ensure when and whether side effects are visible to other threads.\n+@end quotation\n+\n+@item\n+@b{[lex.key]}\n+\n+Add @code{__thread}.\n+\n+@item\n+@b{[basic.start.main]}\n+\n+Add after paragraph 5\n+\n+@quotation\n+The thread that begins execution at the @code{main} function is called\n+the @dfn{main thread}.  It is implementation defined how functions \n+beginning threads other than the main thread are designated or typed.\n+A function so designated, as well as the @code{main} function, is called\n+a @dfn{thread startup function}.  It is implementation defined what\n+happens if a thread startup function returns.  It is implementation\n+defined what happens to other threads when any thread calls @code{exit}.\n+@end quotation\n+\n+@item\n+@b{[basic.start.init]}\n+\n+Add after paragraph 4\n+\n+@quotation\n+The storage for an object of thread storage duration shall be\n+staticly initialized before the first statement of the thread startup\n+function.  An object of thread storage duration shall not require\n+dynamic initialization.\n+@end quotation\n+\n+@item\n+@b{[basic.start.term]}\n+\n+Add after paragraph 3\n+\n+@quotation\n+An object of thread storage duration shall not require a destructor.\n+@end quotation\n+\n+@item\n+@b{[basic.stc]}\n+\n+Add ``thread storage duration'' to the list in paragraph 1.\n+\n+Change paragraph 2\n+\n+@quotation\n+Thread, static, and automatic storage durations are associated with\n+objects introduced by declarations [@dots{}].\n+@end quotation\n+\n+Add @code{__thread} to the list of specifiers in paragraph 3.\n+\n+@item\n+@b{[basic.stc.thread]}\n+\n+New section before @b{[basic.stc.static]}\n+\n+@quotation\n+The keyword @code{__thread} applied to an non-local object gives the\n+object thread storage duration.\n+\n+A local variable or class data member declared both @code{static}\n+and @code{__thread} gives the variable or member thread storage\n+duration.\n+@end quotation\n+\n+@item\n+@b{[basic.stc.static]}\n+\n+Change paragraph 1\n+\n+@quotation\n+All objects which have neither thread storage duration, dynamic\n+storage duration nor are local [@dots{}].\n+@end quotation\n+\n+@item\n+@b{[dcl.stc]}\n+\n+Add @code{__thread} to the list in paragraph 1.\n+\n+Change paragraph 1\n+\n+@quotation\n+With the exception of @code{__thread}, at most one\n+@var{storage-class-specifier} shall appear in a given\n+@var{decl-specifier-seq}.  The @code{__thread} specifier may\n+be used alone, or immediately following the @code{extern} or\n+@code{static} specifiers.  [@dots{}]\n+@end quotation\n+\n+Add after paragraph 5\n+\n+@quotation\n+The @code{__thread} specifier can be applied only to the names of objects\n+and to anonymous unions.\n+@end quotation\n+\n+@item\n+@b{[class.mem]}\n+\n+Add after paragraph 6\n+\n+@quotation\n+Non-@code{static} members shall not be @code{__thread}.\n+@end quotation\n+@end itemize\n+\n @node C++ Extensions\n @chapter Extensions to the C++ Language\n @cindex extensions, C++ language"}]}