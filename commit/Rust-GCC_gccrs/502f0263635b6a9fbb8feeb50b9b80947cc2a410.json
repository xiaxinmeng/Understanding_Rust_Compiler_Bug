{"sha": "502f0263635b6a9fbb8feeb50b9b80947cc2a410", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAyZjAyNjM2MzViNmE5ZmJiOGZlZWI1MGI5YjgwOTQ3Y2MyYTQxMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-06-25T12:34:46Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-06-25T12:34:46Z"}, "message": "tree-vect-slp.c (vect_detect_hybrid_slp_stmts): Improve debug dumping.\n\n2015-06-25  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-slp.c (vect_detect_hybrid_slp_stmts): Improve debug\n\tdumping.\n\t(vect_create_mask_and_perm): Do not set STMT_VINFO_VEC_STMT and\n\tcleanup resulting dead code and parameters.\n\t(vect_transform_slp_perm_load): Adjust.\n\n\t* gfortran.dg/vect/vect-9.f90: New testcase.\n\nFrom-SVN: r224938", "tree": {"sha": "e412ac0169dc40f3da3b79a8cdb541285acb979c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e412ac0169dc40f3da3b79a8cdb541285acb979c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/502f0263635b6a9fbb8feeb50b9b80947cc2a410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/502f0263635b6a9fbb8feeb50b9b80947cc2a410", "html_url": "https://github.com/Rust-GCC/gccrs/commit/502f0263635b6a9fbb8feeb50b9b80947cc2a410", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/502f0263635b6a9fbb8feeb50b9b80947cc2a410/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed1332ee11848c7d2ded43f143f4fdb05b0645eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed1332ee11848c7d2ded43f143f4fdb05b0645eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed1332ee11848c7d2ded43f143f4fdb05b0645eb"}], "stats": {"total": 75, "additions": 60, "deletions": 15}, "files": [{"sha": "e5f1278c44621f7ce6ee02cb179159979081c317", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/502f0263635b6a9fbb8feeb50b9b80947cc2a410/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/502f0263635b6a9fbb8feeb50b9b80947cc2a410/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=502f0263635b6a9fbb8feeb50b9b80947cc2a410", "patch": "@@ -1,3 +1,11 @@\n+2015-06-25  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_detect_hybrid_slp_stmts): Improve debug\n+\tdumping.\n+\t(vect_create_mask_and_perm): Do not set STMT_VINFO_VEC_STMT and\n+\tcleanup resulting dead code and parameters.\n+\t(vect_transform_slp_perm_load): Adjust.\n+\n 2015-06-25  Nick Clifton  <nickc@redhat.com>\n \n \t* config/bfin/bfin.c (bfin_expand_prologue): Set"}, {"sha": "96cd8eedc55eea45b5204eba17335074569e30c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/502f0263635b6a9fbb8feeb50b9b80947cc2a410/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/502f0263635b6a9fbb8feeb50b9b80947cc2a410/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=502f0263635b6a9fbb8feeb50b9b80947cc2a410", "patch": "@@ -1,3 +1,7 @@\n+2015-06-25  Richard Biener  <rguenther@suse.de>\n+\n+\t* gfortran.dg/vect/vect-9.f90: New testcase.\n+\n 2015-06-25  Nick Clifton  <nickc@redhat.com>\n \n \t* gcc.dg/stack-usage-1.c: Add SIZE values for V850, MN10300,"}, {"sha": "8b07911e98f66c2698060c6cb3759633dc0871ed", "filename": "gcc/testsuite/gfortran.dg/vect/vect-9.f90", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/502f0263635b6a9fbb8feeb50b9b80947cc2a410/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-9.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/502f0263635b6a9fbb8feeb50b9b80947cc2a410/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-9.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect-9.f90?ref=502f0263635b6a9fbb8feeb50b9b80947cc2a410", "patch": "@@ -0,0 +1,34 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-Ofast\" }\n+! { dg-additional-options \"-mavx\" { target x86_64-*-* i?86-*-* } }\n+\n+      SUBROUTINE PASSB4 (IDO,L1,CC,CH,WA1,WA2,WA3)\n+      IMPLICIT REAL(4) (A-H, O-Z)\n+      DIMENSION       CC(IDO,4,L1)           ,CH(IDO,L1,4)           ,&\n+                     WA1(*)     ,WA2(*)     ,WA3(*)\n+  102 DO 104 K=1,L1\n+         DO 103 I=2,IDO,2\n+            TI1 = CC(I,1,K)-CC(I,3,K)\n+            TI2 = CC(I,1,K)+CC(I,3,K)\n+            TI3 = CC(I,2,K)+CC(I,4,K)\n+            TR4 = CC(I,4,K)-CC(I,2,K)\n+            TR1 = CC(I-1,1,K)-CC(I-1,3,K)\n+            TR2 = CC(I-1,1,K)+CC(I-1,3,K)\n+            TI4 = CC(I-1,2,K)-CC(I-1,4,K)\n+            TR3 = CC(I-1,2,K)+CC(I-1,4,K)\n+            CH(I-1,K,1) = TR2+TR3\n+            CR3 = TR2-TR3\n+            CH(I,K,1) = TI2+TI3\n+            CI3 = TI2-TI3\n+            CR2 = TR1+TR4\n+            CI4 = TI1-TI4\n+            CH(I-1,K,2) = TI1\n+            CH(I,K,2) = CR2\n+            CH(I-1,K,3) = WA2(I-1)*CR3-WA2(I)*CI3\n+            CH(I,K,3) = WA2(I-1)*CI3+WA2(I)*CR3\n+            CH(I-1,K,4) = CI4\n+            CH(I,K,4) = CI4\n+  103    CONTINUE\n+  104 CONTINUE\n+      RETURN\n+      END"}, {"sha": "e85e80dbbd10bec8cc7966fc8b11476b73803cc9", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/502f0263635b6a9fbb8feeb50b9b80947cc2a410/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/502f0263635b6a9fbb8feeb50b9b80947cc2a410/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=502f0263635b6a9fbb8feeb50b9b80947cc2a410", "patch": "@@ -1998,11 +1998,20 @@ vect_detect_hybrid_slp_stmts (slp_tree node, unsigned i, slp_vect_type stype)\n \t\t    || VECTORIZABLE_CYCLE_DEF (STMT_VINFO_DEF_TYPE (use_vinfo)))\n \t\t&& !(gimple_code (use_stmt) == GIMPLE_PHI\n \t\t     && STMT_VINFO_DEF_TYPE (use_vinfo) == vect_reduction_def))\n-\t      stype = hybrid;\n+\t      {\n+\t\tif (dump_enabled_p ())\n+\t\t  {\n+\t\t    dump_printf_loc (MSG_NOTE, vect_location, \"use of SLP \"\n+\t\t\t\t     \"def in non-SLP stmt: \");\n+\t\t    dump_gimple_stmt (MSG_NOTE, TDF_SLIM, use_stmt, 0);\n+\t\t  }\n+\t\tstype = hybrid;\n+\t      }\n \t  }\n     }\n \n-  if (stype == hybrid)\n+  if (stype == hybrid\n+      && !HYBRID_SLP_STMT (stmt_vinfo))\n     {\n       if (dump_enabled_p ())\n \t{\n@@ -3005,15 +3014,14 @@ vect_get_slp_defs (vec<tree> ops, slp_tree slp_node,\n    the created stmts must be inserted.  */\n \n static inline void\n-vect_create_mask_and_perm (gimple stmt, gimple next_scalar_stmt,\n+vect_create_mask_and_perm (gimple stmt,\n                            tree mask, int first_vec_indx, int second_vec_indx,\n                            gimple_stmt_iterator *gsi, slp_tree node,\n                            tree vectype, vec<tree> dr_chain,\n                            int ncopies, int vect_stmts_counter)\n {\n   tree perm_dest;\n   gimple perm_stmt = NULL;\n-  stmt_vec_info next_stmt_info;\n   int i, stride;\n   tree first_vec, second_vec, data_ref;\n \n@@ -3044,10 +3052,6 @@ vect_create_mask_and_perm (gimple stmt, gimple next_scalar_stmt,\n       first_vec_indx += stride;\n       second_vec_indx += stride;\n     }\n-\n-  /* Mark the scalar stmt as vectorized.  */\n-  next_stmt_info = vinfo_for_stmt (next_scalar_stmt);\n-  STMT_VINFO_VEC_STMT (next_stmt_info) = perm_stmt;\n }\n \n \n@@ -3160,9 +3164,8 @@ vect_transform_slp_perm_load (slp_tree node, vec<tree> dr_chain,\n   gimple stmt = SLP_TREE_SCALAR_STMTS (node)[0];\n   stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n   tree mask_element_type = NULL_TREE, mask_type;\n-  int i, j, k, nunits, vec_index = 0, scalar_index;\n+  int i, j, k, nunits, vec_index = 0;\n   tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n-  gimple next_scalar_stmt;\n   int group_size = SLP_INSTANCE_GROUP_SIZE (slp_node_instance);\n   int first_mask_element;\n   int index, unroll_factor, current_mask_element, ncopies;\n@@ -3234,7 +3237,6 @@ vect_transform_slp_perm_load (slp_tree node, vec<tree> dr_chain,\n      {c2,a3,b3,c3}.  */\n \n   {\n-      scalar_index = 0;\n       index = 0;\n       vect_stmts_counter = 0;\n       vec_index = 0;\n@@ -3295,10 +3297,7 @@ vect_transform_slp_perm_load (slp_tree node, vec<tree> dr_chain,\n                           second_vec_index = vec_index;\n                         }\n \n-                      next_scalar_stmt\n-\t\t\t  = SLP_TREE_SCALAR_STMTS (node)[scalar_index++];\n-\n-                      vect_create_mask_and_perm (stmt, next_scalar_stmt,\n+                      vect_create_mask_and_perm (stmt,\n                                mask_vec, first_vec_index, second_vec_index,\n \t\t\t       gsi, node, vectype, dr_chain,\n \t\t\t       ncopies, vect_stmts_counter++);"}]}