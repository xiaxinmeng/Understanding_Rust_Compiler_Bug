{"sha": "9fe9c45ae33a2df7a73a7c8d9a92a649206a15b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZlOWM0NWFlMzNhMmRmN2E3M2E3YzhkOWE5MmE2NDkyMDZhMTViNw==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-06-19T17:08:21Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-06-28T10:06:37Z"}, "message": "Duplicate the range information of the phi onto the new ssa_name\n\nSince match_simplify_replacement uses gimple_simplify, there is a new\nssa name created sometimes and then we go and replace the phi edge with\nthis new ssa name, the range information on the phi is lost.\nPlacing this in replace_phi_edge_with_variable is the best option instead\nof doing it in each time replace_phi_edge_with_variable is called which is\nwhat is done today.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\ngcc/ChangeLog:\n\n\t* tree-ssa-phiopt.c (replace_phi_edge_with_variable): Duplicate range\n\tinfo if we're the only things setting the target PHI.\n\t(value_replacement): Don't duplicate range here.\n\t(minmax_replacement): Likewise.", "tree": {"sha": "778d510089822a6b881d1d1c48691a14e10ea262", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/778d510089822a6b881d1d1c48691a14e10ea262"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fe9c45ae33a2df7a73a7c8d9a92a649206a15b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe9c45ae33a2df7a73a7c8d9a92a649206a15b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fe9c45ae33a2df7a73a7c8d9a92a649206a15b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe9c45ae33a2df7a73a7c8d9a92a649206a15b7/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f80c4eaca0805bc9e68ed944519519c3dd1c12e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f80c4eaca0805bc9e68ed944519519c3dd1c12e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f80c4eaca0805bc9e68ed944519519c3dd1c12e1"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "ab12e85569d974093411dee045cd5a8f2d7230dd", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe9c45ae33a2df7a73a7c8d9a92a649206a15b7/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe9c45ae33a2df7a73a7c8d9a92a649206a15b7/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=9fe9c45ae33a2df7a73a7c8d9a92a649206a15b7", "patch": "@@ -391,6 +391,32 @@ replace_phi_edge_with_variable (basic_block cond_block,\n   basic_block bb = gimple_bb (phi);\n   basic_block block_to_remove;\n   gimple_stmt_iterator gsi;\n+  tree phi_result = PHI_RESULT (phi);\n+\n+  /* Duplicate range info if we're the only things setting the target PHI.\n+     This is needed as later on, the new_tree will be replacing\n+     The assignement of the PHI.\n+     For an example:\n+     bb1:\n+     _4 = min<a_1, 255>\n+     goto bb2\n+\n+     range<-INF,255>\n+     a_3 = PHI<_4(1)>\n+     bb3:\n+\n+     use(a_3)\n+     And _4 gets prograted into the use of a_3 and losing the range info.\n+     This can't be done for more than 2 incoming edges as the progration\n+     won't happen.  */\n+  if (TREE_CODE (new_tree) == SSA_NAME\n+      && EDGE_COUNT (gimple_bb (phi)->preds) == 2\n+      && INTEGRAL_TYPE_P (TREE_TYPE (phi_result))\n+      && !SSA_NAME_RANGE_INFO (new_tree)\n+      && SSA_NAME_RANGE_INFO (phi_result))\n+    duplicate_ssa_name_range_info (new_tree,\n+\t\t\t\t   SSA_NAME_RANGE_TYPE (phi_result),\n+\t\t\t\t   SSA_NAME_RANGE_INFO (phi_result));\n \n   /* Change the PHI argument to new.  */\n   SET_USE (PHI_ARG_DEF_PTR (phi, e->dest_idx), new_tree);\n@@ -1385,16 +1411,6 @@ value_replacement (basic_block cond_bb, basic_block middle_bb,\n \t   <bb 4>:\n \t   # u_3 = PHI <u_6(3), 4294967295(2)>  */\n       reset_flow_sensitive_info (lhs);\n-      if (INTEGRAL_TYPE_P (TREE_TYPE (lhs)))\n-\t{\n-\t  /* If available, we can use VR of phi result at least.  */\n-\t  tree phires = gimple_phi_result (phi);\n-\t  struct range_info_def *phires_range_info\n-\t    = SSA_NAME_RANGE_INFO (phires);\n-\t  if (phires_range_info)\n-\t    duplicate_ssa_name_range_info (lhs, SSA_NAME_RANGE_TYPE (phires),\n-\t\t\t\t\t   phires_range_info);\n-\t}\n       gimple_stmt_iterator gsi_from;\n       for (int i = prep_cnt - 1; i >= 0; --i)\n \t{\n@@ -1794,13 +1810,6 @@ minmax_replacement (basic_block cond_bb, basic_block middle_bb,\n   gimple_seq stmts = NULL;\n   tree phi_result = PHI_RESULT (phi);\n   result = gimple_build (&stmts, minmax, TREE_TYPE (phi_result), arg0, arg1);\n-  /* Duplicate range info if we're the only things setting the target PHI.  */\n-  if (!gimple_seq_empty_p (stmts)\n-      && EDGE_COUNT (gimple_bb (phi)->preds) == 2\n-      && !POINTER_TYPE_P (TREE_TYPE (phi_result))\n-      && SSA_NAME_RANGE_INFO (phi_result))\n-    duplicate_ssa_name_range_info (result, SSA_NAME_RANGE_TYPE (phi_result),\n-\t\t\t\t   SSA_NAME_RANGE_INFO (phi_result));\n \n   gsi = gsi_last_bb (cond_bb);\n   gsi_insert_seq_before (&gsi, stmts, GSI_NEW_STMT);"}]}