{"sha": "102344e274f23609bc9bc008ded4a6fd501e5549", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAyMzQ0ZTI3NGYyMzYwOWJjOWJjMDA4ZGVkNGE2ZmQ1MDFlNTU0OQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-01-27T13:08:52Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-01-27T13:08:52Z"}, "message": "re PR fortran/51970 ([OOP] gimplification failed for polymorphic MOVE_ALLOC)\n\n2012-01-27  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/51970\n        PR fortran/51977\n        * primary.c (gfc_match_varspec. gfc_match_rvalue): Set\n        handle array spec for BT_CLASS.\n        * expr.c (gfc_get_variable_expr, gfc_lval_expr_from_sym)\n        * frontend-passes.c (create_var): Ditto.\n        * resolve.c (resolve_actual_arglist, resolve_assoc_var): Ditto.\n        * trans-decl.c (gfc_trans_deferred_vars): Use class_pointer\n        instead of attr.pointer.\n        (gfc_generate_function_code): Use CLASS_DATA (sym) for BT_CLASS.\n        * trans-intrinsic.c (conv_intrinsic_move_alloc): Move assert.\n        * trans-stmt.c (trans_associate_var): Ask for the descriptor.\n\n2012-01-27  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/51970\n        PR fortran/51977\n        * gfortran.dg/move_alloc_13.f90: New.\n\nFrom-SVN: r183622", "tree": {"sha": "de5f3b6f1b72f66e6ec9b8487e790dcc491f196d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de5f3b6f1b72f66e6ec9b8487e790dcc491f196d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/102344e274f23609bc9bc008ded4a6fd501e5549", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/102344e274f23609bc9bc008ded4a6fd501e5549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/102344e274f23609bc9bc008ded4a6fd501e5549", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/102344e274f23609bc9bc008ded4a6fd501e5549/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4cb2a86715695603f8abf1396436b68a7281221b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cb2a86715695603f8abf1396436b68a7281221b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cb2a86715695603f8abf1396436b68a7281221b"}], "stats": {"total": 135, "additions": 104, "deletions": 31}, "files": [{"sha": "6a6b05cbedc56e8bd8ef88eb94d1fd7b54f2c4ae", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102344e274f23609bc9bc008ded4a6fd501e5549/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102344e274f23609bc9bc008ded4a6fd501e5549/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=102344e274f23609bc9bc008ded4a6fd501e5549", "patch": "@@ -1,3 +1,18 @@\n+2012-01-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/51970\n+\tPR fortran/51977\n+\t* primary.c (gfc_match_varspec. gfc_match_rvalue): Set\n+\thandle array spec for BT_CLASS.\n+\t* expr.c (gfc_get_variable_expr, gfc_lval_expr_from_sym)\n+\t* frontend-passes.c (create_var): Ditto.\n+\t* resolve.c (resolve_actual_arglist, resolve_assoc_var): Ditto.\n+\t* trans-decl.c (gfc_trans_deferred_vars): Use class_pointer\n+\tinstead of attr.pointer.\n+\t(gfc_generate_function_code): Use CLASS_DATA (sym) for BT_CLASS.\n+\t* trans-intrinsic.c (conv_intrinsic_move_alloc): Move assert.\n+\t* trans-stmt.c (trans_associate_var): Ask for the descriptor.\n+\n 2012-01-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/51953"}, {"sha": "c4013133560cc7c2e385af3fa1b21b85bb8b0581", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102344e274f23609bc9bc008ded4a6fd501e5549/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102344e274f23609bc9bc008ded4a6fd501e5549/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=102344e274f23609bc9bc008ded4a6fd501e5549", "patch": "@@ -3805,9 +3805,12 @@ gfc_get_variable_expr (gfc_symtree *var)\n   e->symtree = var;\n   e->ts = var->n.sym->ts;\n \n-  if (var->n.sym->as != NULL)\n+  if ((var->n.sym->as != NULL && var->n.sym->ts.type != BT_CLASS)\n+      || (var->n.sym->ts.type == BT_CLASS && CLASS_DATA (var->n.sym)\n+\t  && CLASS_DATA (var->n.sym)->as))\n     {\n-      e->rank = var->n.sym->as->rank;\n+      e->rank = var->n.sym->ts.type == BT_CLASS\n+\t\t? CLASS_DATA (var->n.sym)->as->rank : var->n.sym->as->rank;\n       e->ref = gfc_get_ref ();\n       e->ref->type = REF_ARRAY;\n       e->ref->u.ar.type = AR_FULL;\n@@ -3836,7 +3839,8 @@ gfc_lval_expr_from_sym (gfc_symbol *sym)\n       lval->ref->u.ar.type = AR_FULL;\n       lval->ref->u.ar.dimen = lval->rank;\n       lval->ref->u.ar.where = sym->declared_at;\n-      lval->ref->u.ar.as = sym->as;\n+      lval->ref->u.ar.as = sym->ts.type == BT_CLASS\n+\t\t\t   ? CLASS_DATA (sym)->as : sym->as;\n     }\n \n   return lval;"}, {"sha": "20f76ebfbe683998d9654486aee18155a73d02a1", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102344e274f23609bc9bc008ded4a6fd501e5549/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102344e274f23609bc9bc008ded4a6fd501e5549/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=102344e274f23609bc9bc008ded4a6fd501e5549", "patch": "@@ -328,7 +328,8 @@ create_var (gfc_expr * e)\n       result->ref->type = REF_ARRAY;\n       result->ref->u.ar.type = AR_FULL;\n       result->ref->u.ar.where = e->where;\n-      result->ref->u.ar.as = symbol->as;\n+      result->ref->u.ar.as = symbol->ts.type == BT_CLASS\n+\t\t\t     ? CLASS_DATA (symbol)->as : symbol->as;\n       if (gfc_option.warn_array_temp)\n \tgfc_warning (\"Creating array temporary at %L\", &(e->where));\n     }"}, {"sha": "d1d96ffa68e5eb2040f3ba35a6c632ee214b8f33", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102344e274f23609bc9bc008ded4a6fd501e5549/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102344e274f23609bc9bc008ded4a6fd501e5549/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=102344e274f23609bc9bc008ded4a6fd501e5549", "patch": "@@ -1868,18 +1868,24 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n \t  && (CLASS_DATA (sym)->attr.dimension\n \t      || CLASS_DATA (sym)->attr.codimension)))\n     {\n+      gfc_array_spec *as;\n+\n+      tail = extend_ref (primary, tail);\n+      tail->type = REF_ARRAY;\n+\n       /* In EQUIVALENCE, we don't know yet whether we are seeing\n \t an array, character variable or array of character\n \t variables.  We'll leave the decision till resolve time.  */\n-      tail = extend_ref (primary, tail);\n-      tail->type = REF_ARRAY;\n \n-      m = gfc_match_array_ref (&tail->u.ar, equiv_flag ? NULL : sym->as,\n-\t\t\t       equiv_flag,\n-\t\t\t       sym->ts.type == BT_CLASS && CLASS_DATA (sym)\n-\t\t\t       ? (CLASS_DATA (sym)->as\n-\t\t\t\t  ? CLASS_DATA (sym)->as->corank : 0)\n-\t\t\t       : (sym->as ? sym->as->corank : 0));\n+      if (equiv_flag)\n+\tas = NULL;\n+      else if (sym->ts.type == BT_CLASS && CLASS_DATA (sym))\n+\tas = CLASS_DATA (sym)->as;\n+      else\n+\tas = sym->as;\n+\n+      m = gfc_match_array_ref (&tail->u.ar, as, equiv_flag,\n+\t\t\t       as ? as->corank : 0);\n       if (m != MATCH_YES)\n \treturn m;\n \n@@ -2893,7 +2899,10 @@ gfc_match_rvalue (gfc_expr **result)\n       e->value.function.actual = actual_arglist;\n       e->where = gfc_current_locus;\n \n-      if (sym->as != NULL)\n+      if (sym->ts.type == BT_CLASS && sym->attr.class_ok\n+\t  && CLASS_DATA (sym)->as)\n+\te->rank = CLASS_DATA (sym)->as->rank;\n+      else if (sym->as != NULL)\n \te->rank = sym->as->rank;\n \n       if (!sym->attr.function"}, {"sha": "2e5100471437e82d8342228c6fc0e90249f490de", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102344e274f23609bc9bc008ded4a6fd501e5549/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102344e274f23609bc9bc008ded4a6fd501e5549/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=102344e274f23609bc9bc008ded4a6fd501e5549", "patch": "@@ -1755,13 +1755,17 @@ resolve_actual_arglist (gfc_actual_arglist *arg, procedure_type ptype,\n     got_variable:\n       e->expr_type = EXPR_VARIABLE;\n       e->ts = sym->ts;\n-      if (sym->as != NULL)\n+      if ((sym->as != NULL && sym->ts.type != BT_CLASS)\n+\t  || (sym->ts.type == BT_CLASS && sym->attr.class_ok\n+\t      && CLASS_DATA (sym)->as))\n \t{\n-\t  e->rank = sym->as->rank;\n+\t  e->rank = sym->ts.type == BT_CLASS\n+\t\t    ? CLASS_DATA (sym)->as->rank : sym->as->rank;\n \t  e->ref = gfc_get_ref ();\n \t  e->ref->type = REF_ARRAY;\n \t  e->ref->u.ar.type = AR_FULL;\n-\t  e->ref->u.ar.as = sym->as;\n+\t  e->ref->u.ar.as = sym->ts.type == BT_CLASS\n+\t\t\t    ? CLASS_DATA (sym)->as : sym->as;\n \t}\n \n       /* Expressions are assigned a default ts.type of BT_PROCEDURE in\n@@ -7945,13 +7949,8 @@ resolve_assoc_var (gfc_symbol* sym, bool resolve_target)\n       sym->attr.asynchronous = tsym->attr.asynchronous;\n       sym->attr.volatile_ = tsym->attr.volatile_;\n \n-      if (tsym->ts.type == BT_CLASS)\n-\tsym->attr.target = tsym->attr.target || CLASS_DATA (tsym)->attr.pointer;\n-      else\n-\tsym->attr.target = tsym->attr.target || tsym->attr.pointer;\n-\n-      if (sym->ts.type == BT_DERIVED && tsym->ts.type == BT_CLASS)\n-\ttarget->rank = sym->as ? sym->as->rank : 0;\n+      sym->attr.target = tsym->attr.target\n+\t\t\t || gfc_expr_attr (target).pointer;\n     }\n \n   /* Get type if this was not already set.  Note that it can be\n@@ -7966,10 +7965,7 @@ resolve_assoc_var (gfc_symbol* sym, bool resolve_target)\n \t\t\t  && !gfc_has_vector_subscript (target));\n \n   /* Finally resolve if this is an array or not.  */\n-  if (sym->attr.dimension\n-\t&& (target->ts.type == BT_CLASS\n-\t      ? !CLASS_DATA (target)->attr.dimension\n-\t      : target->rank == 0))\n+  if (sym->attr.dimension && target->rank == 0)\n     {\n       gfc_error (\"Associate-name '%s' at %L is used as array\",\n \t\t sym->name, &sym->declared_at);"}, {"sha": "8efe5a97bbcaa4bbbee2c0b8425ef72e0a7b35e9", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102344e274f23609bc9bc008ded4a6fd501e5549/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102344e274f23609bc9bc008ded4a6fd501e5549/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=102344e274f23609bc9bc008ded4a6fd501e5549", "patch": "@@ -3687,7 +3687,7 @@ gfc_trans_deferred_vars (gfc_symbol * proc_sym, gfc_wrapped_block * block)\n \t}\n       else if ((!sym->attr.dummy || sym->ts.deferred)\n \t\t&& (sym->ts.type == BT_CLASS\n-\t\t&& CLASS_DATA (sym)->attr.pointer))\n+\t\t&& CLASS_DATA (sym)->attr.class_pointer))\n \tcontinue;\n       else if ((!sym->attr.dummy || sym->ts.deferred)\n \t\t&& (sym->attr.allocatable\n@@ -5341,7 +5341,8 @@ gfc_generate_function_code (gfc_namespace * ns)\n \t\t\t\t\t\t\t null_pointer_node));\n \t  else if (sym->ts.type == BT_CLASS\n \t\t   && CLASS_DATA (sym)->attr.allocatable\n-\t\t   && sym->attr.dimension == 0 && sym->result == sym)\n+\t\t   && CLASS_DATA (sym)->attr.dimension == 0\n+\t\t   && sym->result == sym)\n \t    {\n \t      tmp = CLASS_DATA (sym)->backend_decl;\n \t      tmp = fold_build3_loc (input_location, COMPONENT_REF,"}, {"sha": "ac9f5074035c601fa7a6ec832c5706b6b02de547", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102344e274f23609bc9bc008ded4a6fd501e5549/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102344e274f23609bc9bc008ded4a6fd501e5549/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=102344e274f23609bc9bc008ded4a6fd501e5549", "patch": "@@ -7237,10 +7237,11 @@ conv_intrinsic_move_alloc (gfc_code *code)\n   gfc_init_se (&from_se, NULL);\n   gfc_init_se (&to_se, NULL);\n \n+  gcc_assert (from_expr->ts.type != BT_CLASS\n+\t      || to_expr->ts.type == BT_CLASS);\n+\n   if (from_expr->rank == 0)\n     {\n-      gcc_assert (from_expr->ts.type != BT_CLASS\n-\t\t  || to_expr->ts.type == BT_CLASS);\n       if (from_expr->ts.type != BT_CLASS)\n \tfrom_expr2 = from_expr;\n       else"}, {"sha": "f264bf92df80eb17a813813e617e54c125831342", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102344e274f23609bc9bc008ded4a6fd501e5549/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102344e274f23609bc9bc008ded4a6fd501e5549/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=102344e274f23609bc9bc008ded4a6fd501e5549", "patch": "@@ -1175,6 +1175,7 @@ trans_associate_var (gfc_symbol *sym, gfc_wrapped_block *block)\n       gfc_se se;\n \n       gfc_init_se (&se, NULL);\n+      se.descriptor_only = 1;\n       gfc_conv_expr (&se, e);\n \n       gcc_assert (GFC_DESCRIPTOR_TYPE_P (TREE_TYPE (se.expr)));"}, {"sha": "38a7cf9cf64c8ada0efab571b3acd48f2aa5153b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102344e274f23609bc9bc008ded4a6fd501e5549/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102344e274f23609bc9bc008ded4a6fd501e5549/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=102344e274f23609bc9bc008ded4a6fd501e5549", "patch": "@@ -1,3 +1,9 @@\n+2012-01-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/51970\n+\tPR fortran/51977\n+\t* gfortran.dg/move_alloc_13.f90: New.\n+\n 2012-01-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/51953"}, {"sha": "9c3e0bcd58fdeefecbff349c0d21ef37388f25c0", "filename": "gcc/testsuite/gfortran.dg/move_alloc_13.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/102344e274f23609bc9bc008ded4a6fd501e5549/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_13.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/102344e274f23609bc9bc008ded4a6fd501e5549/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_13.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_13.f90?ref=102344e274f23609bc9bc008ded4a6fd501e5549", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do run}\n+!\n+! PR fortran/51970\n+! PR fortran/51977\n+!\n+type t\n+end type t\n+type, extends(t) :: t2\n+  integer :: a\n+end type t2\n+\n+class(t), allocatable :: y(:), z(:)\n+\n+allocate(y(2), source=[t2(2), t2(3)])\n+call func2(y,z)\n+\n+select type(z)\n+  type is(t2)\n+    if (any (z(:)%a /= [2, 3])) call abort()\n+  class default\n+    call abort()\n+end select\n+\n+contains\n+  function func(x)\n+   class (t), allocatable :: x(:), func(:)\n+   call move_alloc (x, func)\n+  end function\n+\n+  function func1(x)\n+   class (t), allocatable :: x(:), func1(:)\n+   call move_alloc (func1, x)\n+  end function\n+\n+  subroutine func2(x, y)\n+   class (t), allocatable :: x(:), y(:)\n+   call move_alloc (x, y)\n+  end subroutine\n+end"}]}