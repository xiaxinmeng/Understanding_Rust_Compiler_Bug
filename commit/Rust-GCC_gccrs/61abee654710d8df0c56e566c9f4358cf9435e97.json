{"sha": "61abee654710d8df0c56e566c9f4358cf9435e97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFhYmVlNjU0NzEwZDhkZjBjNTZlNTY2YzlmNDM1OGNmOTQzNWU5Nw==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2005-08-10T16:18:17Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2005-08-10T16:18:17Z"}, "message": "md.texi: (reduc_smin, reduc_umin, reduc_splus, reduc_uplus):\n\n        * doc/md.texi: (reduc_smin, reduc_umin, reduc_splus, reduc_uplus):\n        (vec_shl, vec_shr): Document new operations.\n        * tree.def (VEC_RSHIFT_EXPR, VEC_LSHIFT_EXPR): Fix comment.\n\nFrom-SVN: r102951", "tree": {"sha": "e973a352c47fb441784a6a21f70bfe496251df42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e973a352c47fb441784a6a21f70bfe496251df42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61abee654710d8df0c56e566c9f4358cf9435e97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61abee654710d8df0c56e566c9f4358cf9435e97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61abee654710d8df0c56e566c9f4358cf9435e97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61abee654710d8df0c56e566c9f4358cf9435e97/comments", "author": null, "committer": null, "parents": [{"sha": "11aac14fcefc15b085f4172ae4eb39542f505b5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11aac14fcefc15b085f4172ae4eb39542f505b5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11aac14fcefc15b085f4172ae4eb39542f505b5a"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "e13b94e84281e8dc2494ac8505f9127880959f5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61abee654710d8df0c56e566c9f4358cf9435e97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61abee654710d8df0c56e566c9f4358cf9435e97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61abee654710d8df0c56e566c9f4358cf9435e97", "patch": "@@ -1,3 +1,9 @@\n+2005-08-10  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\t* doc/md.texi: (reduc_smin, reduc_umin, reduc_splus, reduc_uplus):\n+\t(vec_shl, vec_shr): Document new operations.\n+\t* tree.def (VEC_RSHIFT_EXPR, VEC_LSHIFT_EXPR): Fix comment.\n+\n 2005-08-10  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/predicates.md (indexed_or_indirect_address): New."}, {"sha": "819ec705eb8a78b9cf1453406626158a82a0b35b", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61abee654710d8df0c56e566c9f4358cf9435e97/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61abee654710d8df0c56e566c9f4358cf9435e97/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=61abee654710d8df0c56e566c9f4358cf9435e97", "patch": "@@ -3039,6 +3039,43 @@ Signed minimum and maximum operations.  When used with floating point,\n if both operands are zeros, or if either operand is @code{NaN}, then\n it is unspecified which of the two operands is returned as the result.\n \n+@cindex @code{reduc_smin_@var{m}} instruction pattern\n+@cindex @code{reduc_smax_@var{m}} instruction pattern\n+@item @samp{reduc_smin_@var{m}}, @samp{reduc_smax_@var{m}}\n+Find the signed minimum/maximum of the elements of a vector. The vector is\n+operand 1, and the scalar result is stored in the least significant bits of \n+operand 0 (also a vector). The output and input vector should have the same \n+modes.\n+\n+@cindex @code{reduc_umin_@var{m}} instruction pattern\n+@cindex @code{reduc_umax_@var{m}} instruction pattern\n+@item @samp{reduc_umin_@var{m}}, @samp{reduc_umax_@var{m}}\n+Find the unsigned minimum/maximum of the elements of a vector. The vector is\n+operand 1, and the scalar result is stored in the least significant bits of \n+operand 0 (also a vector). The output and input vector should have the same \n+modes.\n+\n+@cindex @code{reduc_splus_@var{m}} instruction pattern\n+@item @samp{reduc_splus_@var{m}}\n+Compute the sum of the signed elements of a vector. The vector is opernad 1, \n+and the scalar result is stored in the least significant bits of opernad 0 \n+(also a vector). The output and input vector should have the same modes.\n+\n+@cindex @code{reduc_uplus_@var{m}} instruction pattern\n+@item @samp{reduc_uplus_@var{m}}\n+Compute the sum of the unsigned elements of a vector. The vector is opernad 1, \n+and the scalar result is stored in the least significant bits of opernad 0 \n+(also a vector). The output and input vector should have the same modes.\n+\n+@cindex @code{vec_shl_@var{m}} instruction pattern\n+@cindex @code{vec_shr_@var{m}} instruction pattern\n+@item @samp{vec_shl_@var{m}}, @samp{vec_shr_@var{m}}\n+Whole vector left/right shift in bits.\n+Operand 1 is a vector to be shifted.\n+Operand 2 is an integer shift amount in bits. \n+Operand 0 is where the resulting shifted vector is stored.\n+The output and input vectors should have the same modes.\n+\n @cindex @code{mulhisi3} instruction pattern\n @item @samp{mulhisi3}\n Multiply operands 1 and 2, which have mode @code{HImode}, and store"}, {"sha": "c1348aac8b587e2ea382c331b81ff6c21f7094d1", "filename": "gcc/tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61abee654710d8df0c56e566c9f4358cf9435e97/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61abee654710d8df0c56e566c9f4358cf9435e97/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=61abee654710d8df0c56e566c9f4358cf9435e97", "patch": "@@ -957,7 +957,7 @@ DEFTREECODE (REDUC_MAX_EXPR, \"reduc_max_expr\", tcc_unary, 1)\n DEFTREECODE (REDUC_MIN_EXPR, \"reduc_min_expr\", tcc_unary, 1)\n DEFTREECODE (REDUC_PLUS_EXPR, \"reduc_plus_expr\", tcc_unary, 1)\n \n-/* Whole vector left/right shift in bytes.\n+/* Whole vector left/right shift in bits.\n    Operand 0 is a vector to be shifted.\n    Operand 1 is an integer shift amount in bits.  */\n DEFTREECODE (VEC_LSHIFT_EXPR, \"vec_lshift_expr\", tcc_binary, 2)"}]}