{"sha": "d27ecc497ca88c0e24dcbd2e9f7c718bfbfe890f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI3ZWNjNDk3Y2E4OGMwZTI0ZGNiZDJlOWY3YzcxOGJmYmZlODkwZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2016-04-04T15:54:39Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2016-04-04T15:54:39Z"}, "message": "re PR ipa/66223 (Diagnostic of pure virtual function call broken, including __cxa_pure_virtual)\n\n\tPR ipa/66223\n\t* ipa-devirt.c (maybe_record_node): Do not optimize cxa_pure_virtual\n\tcalls when sanitizing.\n\t(possible_polymorphic_call_target_p)\" FIx formating.\n\t* g++.dg/ipa/devirt-51.C: New testcase.\n\nFrom-SVN: r234719", "tree": {"sha": "2bbe94b9b2ad465cd2867fcbb69022ccb38e5598", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bbe94b9b2ad465cd2867fcbb69022ccb38e5598"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d27ecc497ca88c0e24dcbd2e9f7c718bfbfe890f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d27ecc497ca88c0e24dcbd2e9f7c718bfbfe890f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d27ecc497ca88c0e24dcbd2e9f7c718bfbfe890f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d27ecc497ca88c0e24dcbd2e9f7c718bfbfe890f/comments", "author": null, "committer": null, "parents": [{"sha": "c974c96edf3bdb5d95ba997526e92ce834c0aaa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c974c96edf3bdb5d95ba997526e92ce834c0aaa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c974c96edf3bdb5d95ba997526e92ce834c0aaa1"}], "stats": {"total": 53, "additions": 50, "deletions": 3}, "files": [{"sha": "d9ad89c3dd6669945e7d95619f5448df73181053", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27ecc497ca88c0e24dcbd2e9f7c718bfbfe890f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27ecc497ca88c0e24dcbd2e9f7c718bfbfe890f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d27ecc497ca88c0e24dcbd2e9f7c718bfbfe890f", "patch": "@@ -1,3 +1,10 @@\n+2016-04-04  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/66223\n+\t* ipa-devirt.c (maybe_record_node): Do not optimize cxa_pure_virtual\n+\tcalls when sanitizing.\n+\t(possible_polymorphic_call_target_p)\" FIx formating.\n+\n 2016-04-04  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \t    Jakub Jelinek <jakub@redhat.com>\n "}, {"sha": "22ece9f76afcd4a305c91f1c046f6a27bba28fce", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27ecc497ca88c0e24dcbd2e9f7c718bfbfe890f/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27ecc497ca88c0e24dcbd2e9f7c718bfbfe890f/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=d27ecc497ca88c0e24dcbd2e9f7c718bfbfe890f", "patch": "@@ -2438,10 +2438,14 @@ maybe_record_node (vec <cgraph_node *> &nodes,\n     {\n       gcc_assert (!target_node->global.inlined_to);\n       gcc_assert (target_node->real_symbol_p ());\n+      /* When sanitizing, do not asume that cxa_pure_virutal is not called\n+\t by valid program.  */\n+      if (flag_sanitize & SANITIZE_UNDEFINED)\n+\t;\n       /* Only add pure virtual if it is the only possible target.  This way\n \t we will preserve the diagnostics about pure virtual called in many\n \t cases without disabling optimization in other.  */\n-      if (pure_virtual)\n+      else if (pure_virtual)\n \t{\n \t  if (nodes.length ())\n \t    return;\n@@ -3374,8 +3378,7 @@ possible_polymorphic_call_target_p (tree otr_type,\n   bool final;\n \n   if (TREE_CODE (TREE_TYPE (n->decl)) == FUNCTION_TYPE\n-      && ((fcode = DECL_FUNCTION_CODE (n->decl))\n-\t  == BUILT_IN_UNREACHABLE\n+      && ((fcode = DECL_FUNCTION_CODE (n->decl)) == BUILT_IN_UNREACHABLE\n           || fcode == BUILT_IN_TRAP))\n     return true;\n "}, {"sha": "168b769b859a02bc17cc98d9a15b590960c5ee9a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27ecc497ca88c0e24dcbd2e9f7c718bfbfe890f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27ecc497ca88c0e24dcbd2e9f7c718bfbfe890f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d27ecc497ca88c0e24dcbd2e9f7c718bfbfe890f", "patch": "@@ -1,3 +1,8 @@\n+2016-04-04  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\tPR ipa/66223\n+\t* g++.dg/ipa/devirt-51.C: New testcase.\n+\n 2016-04-04  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \t    Jakub Jelinek <jakub@redhat.com>\n "}, {"sha": "fadf9e2e089f06b450bdf02d444f8d6d844ca7c6", "filename": "gcc/testsuite/g++.dg/ipa/devirt-51.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d27ecc497ca88c0e24dcbd2e9f7c718bfbfe890f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-51.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d27ecc497ca88c0e24dcbd2e9f7c718bfbfe890f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-51.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fdevirt-51.C?ref=d27ecc497ca88c0e24dcbd2e9f7c718bfbfe890f", "patch": "@@ -0,0 +1,32 @@\n+/* Be sure we do not optimize the virtual call into call of the only non-virtual\n+   variant.  Either keeping virtual call or optimizing to cxa_pure_virtual\n+   is fine.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fsanitize=undefined -fdump-tree-optimized\"  } */\n+namespace {\n+  struct B {\n+        B* self;\n+        B() : self( this ) { self->f(); }\n+\tvoid E(void);\n+        virtual void f() = 0;\n+    };\n+\n+    struct D : B\n+    {\n+        void f() {}\n+    };\n+}\n+\n+struct D e;\n+\n+__attribute__ ((used))\n+void B::E(void)\n+  {\n+    this->f();\n+}\n+\n+    int main()\n+    {\n+        D d;\n+    }\n+/* { dg-final { scan-tree-dump \"cxa_pure_virtual\" \"optimized\"  } } */"}]}