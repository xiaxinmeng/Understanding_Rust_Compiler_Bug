{"sha": "15f5e70cbb33b40c97325ef9d55557747a148d39", "node_id": "C_kwDOANBUbNoAKDE1ZjVlNzBjYmIzM2I0MGM5NzMyNWVmOWQ1NTU1Nzc0N2ExNDhkMzk", "commit": {"author": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-11-18T06:45:23Z"}, "committer": {"name": "Hongyu Wang", "email": "hongyu.wang@intel.com", "date": "2021-11-18T08:29:19Z"}, "message": "i386: Fix wrong codegen for -mrelax-cmpxchg-loop\n\nFor -mrelax-cmpxchg-loop introduced by PR 103069/r12-5265, it would\nproduce infinite loop. The correct code should be\n\n.L84:\n        movl    (%rdi), %ecx\n        movl    %eax, %edx\n        orl     %esi, %edx\n        cmpl    %eax, %ecx\n        jne     .L82\n        lock cmpxchgl   %edx, (%rdi)\n        jne     .L84\n\tmovl    %r8d, %eax  <<< retval is missing in previous impl\n\tret\n.L82:\n        rep nop\n        jmp     .L84\n\nAdjust corresponding expander to fix such issue, and fix runtime test\nso the problem would be exposed.\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-expand.c (ix86_expand_atomic_fetch_op_loop):\n\tAdjust generated cfg to avoid infinite loop.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr103069-2.c: Adjust.", "tree": {"sha": "1df1020b51e959c0aa2de8fea18561d3a6161780", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1df1020b51e959c0aa2de8fea18561d3a6161780"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15f5e70cbb33b40c97325ef9d55557747a148d39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f5e70cbb33b40c97325ef9d55557747a148d39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15f5e70cbb33b40c97325ef9d55557747a148d39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15f5e70cbb33b40c97325ef9d55557747a148d39/comments", "author": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wwwhhhyyy", "id": 5366075, "node_id": "MDQ6VXNlcjUzNjYwNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5366075?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wwwhhhyyy", "html_url": "https://github.com/wwwhhhyyy", "followers_url": "https://api.github.com/users/wwwhhhyyy/followers", "following_url": "https://api.github.com/users/wwwhhhyyy/following{/other_user}", "gists_url": "https://api.github.com/users/wwwhhhyyy/gists{/gist_id}", "starred_url": "https://api.github.com/users/wwwhhhyyy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wwwhhhyyy/subscriptions", "organizations_url": "https://api.github.com/users/wwwhhhyyy/orgs", "repos_url": "https://api.github.com/users/wwwhhhyyy/repos", "events_url": "https://api.github.com/users/wwwhhhyyy/events{/privacy}", "received_events_url": "https://api.github.com/users/wwwhhhyyy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17da2c7425ea1f5bf417b954f444dbe1f1618a1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17da2c7425ea1f5bf417b954f444dbe1f1618a1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17da2c7425ea1f5bf417b954f444dbe1f1618a1c"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "0d5d1a0e205f11ae09464b03900b38167a0b642d", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f5e70cbb33b40c97325ef9d55557747a148d39/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f5e70cbb33b40c97325ef9d55557747a148d39/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=15f5e70cbb33b40c97325ef9d55557747a148d39", "patch": "@@ -23143,13 +23143,14 @@ void ix86_expand_atomic_fetch_op_loop (rtx target, rtx mem, rtx val,\n \t\t\t\t       bool doubleword)\n {\n   rtx old_reg, new_reg, old_mem, success, oldval, new_mem;\n-  rtx_code_label *loop_label, *pause_label;\n+  rtx_code_label *loop_label, *pause_label, *done_label;\n   machine_mode mode = GET_MODE (target);\n \n   old_reg = gen_reg_rtx (mode);\n   new_reg = old_reg;\n   loop_label = gen_label_rtx ();\n   pause_label = gen_label_rtx ();\n+  done_label = gen_label_rtx ();\n   old_mem = copy_to_reg (mem);\n   emit_label (loop_label);\n   emit_move_insn (old_reg, old_mem);\n@@ -23207,11 +23208,15 @@ void ix86_expand_atomic_fetch_op_loop (rtx target, rtx mem, rtx val,\n \t\t\t   GET_MODE (success), 1, loop_label,\n \t\t\t   profile_probability::guessed_never ());\n \n+  emit_jump_insn (gen_jump (done_label));\n+  emit_barrier ();\n+\n   /* If mem is not expected, pause and loop back.  */\n   emit_label (pause_label);\n   emit_insn (gen_pause ());\n   emit_jump_insn (gen_jump (loop_label));\n   emit_barrier ();\n+  emit_label (done_label);\n }\n \n #include \"gt-i386-expand.h\""}, {"sha": "b3f2235fd551e6934eb8001b2172b0cd0c2bde33", "filename": "gcc/testsuite/gcc.target/i386/pr103069-2.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15f5e70cbb33b40c97325ef9d55557747a148d39/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103069-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15f5e70cbb33b40c97325ef9d55557747a148d39/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103069-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr103069-2.c?ref=15f5e70cbb33b40c97325ef9d55557747a148d39", "patch": "@@ -1,5 +1,5 @@\n-/* PR target/103068 */\n-/* { dg-do compile } */\n+/* PR target/103069 */\n+/* { dg-do run } */\n /* { dg-additional-options \"-O2 -march=x86-64 -mtune=generic\" } */ \n \n #include <stdlib.h>\n@@ -37,13 +37,14 @@ FUNC_ATOMIC_RELAX (char, xor)\n #define TEST_ATOMIC_FETCH_LOGIC(TYPE, OP) \\\n { \\\n   TYPE a = 11, b = 101, res, exp; \\\n+  TYPE c = 11, d = 101;\t\\\n   res = relax_##TYPE##_##OP##_fetch (&a, b); \\\n-  exp = f_##TYPE##_##OP##_fetch (&a, b);  \\\n+  exp = f_##TYPE##_##OP##_fetch (&c, d);  \\\n   if (res != exp) \\\n     abort (); \\\n-  a = 21, b = 92; \\\n+  a = c = 21, b = d = 92; \\\n   res = relax_##TYPE##_fetch_##OP (&a, b); \\\n-  exp = f_##TYPE##_fetch_##OP (&a, b);  \\\n+  exp = f_##TYPE##_fetch_##OP (&c, d);  \\\n   if (res != exp) \\\n     abort (); \\\n }"}]}