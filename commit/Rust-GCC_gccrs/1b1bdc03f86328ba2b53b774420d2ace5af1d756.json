{"sha": "1b1bdc03f86328ba2b53b774420d2ace5af1d756", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIxYmRjMDNmODYzMjhiYTJiNTNiNzc0NDIwZDJhY2U1YWYxZDc1Ng==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2013-10-31T19:23:54Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2013-10-31T19:23:54Z"}, "message": "tuple (_Index_tuple, [...]): Move to <utility>.\n\n\t* include/std/tuple (_Index_tuple, _Build_index_tuple): Move to\n\t<utility>.\n\t* include/std/utility (integer_sequence, make_integer_sequence,\n\tindex_sequence, make_index_sequence, index_sequence_for): Define.\n\t* doc/xml/manual/status_cxx2014.xml: Update.\n\t* testsuite/20_util/integer_sequence/intseq.cc: New.\n\t* testsuite/20_util/integer_sequence/requirements/typedefs.cc: New.\n\nFrom-SVN: r204275", "tree": {"sha": "a7c713b9e7b0798325d5ad4d55c7f3f81c903b42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7c713b9e7b0798325d5ad4d55c7f3f81c903b42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b1bdc03f86328ba2b53b774420d2ace5af1d756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b1bdc03f86328ba2b53b774420d2ace5af1d756", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b1bdc03f86328ba2b53b774420d2ace5af1d756", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b1bdc03f86328ba2b53b774420d2ace5af1d756/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8c84975e697eea2e306f80cdb21292331fd69d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8c84975e697eea2e306f80cdb21292331fd69d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8c84975e697eea2e306f80cdb21292331fd69d7"}], "stats": {"total": 185, "additions": 162, "deletions": 23}, "files": [{"sha": "3309eb62455c1c017a30a6d387c07d6e0235e825", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1bdc03f86328ba2b53b774420d2ace5af1d756/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1bdc03f86328ba2b53b774420d2ace5af1d756/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1b1bdc03f86328ba2b53b774420d2ace5af1d756", "patch": "@@ -1,3 +1,13 @@\n+2013-10-31  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\t* include/std/tuple (_Index_tuple, _Build_index_tuple): Move to\n+\t<utility>.\n+\t* include/std/utility (integer_sequence, make_integer_sequence,\n+\tindex_sequence, make_index_sequence, index_sequence_for): Define.\n+\t* doc/xml/manual/status_cxx2014.xml: Update.\n+\t* testsuite/20_util/integer_sequence/intseq.cc: New.\n+\t* testsuite/20_util/integer_sequence/requirements/typedefs.cc: New.\n+\n 2013-10-31  Steve Ellcey  <sellcey@mips.com>\n \n \t* configure.ac: Add header checks for fenv.h and complex.h."}, {"sha": "4ef4334ab348619044706f9289d92ffb37dc5139", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2014.xml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1bdc03f86328ba2b53b774420d2ace5af1d756/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2014.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1bdc03f86328ba2b53b774420d2ace5af1d756/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2014.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2014.xml?ref=1b1bdc03f86328ba2b53b774420d2ace5af1d756", "patch": "@@ -185,8 +185,8 @@ particular release.\n \t</link>\n       </entry>\n       <entry>Compile-time integer sequences</entry>\n-      <entry>WIP</entry>\n-      <entry>Need tests</entry>\n+      <entry>Y</entry>\n+      <entry/>\n     </row>\n \n     <row>"}, {"sha": "2580f7894e6b1ed490331c8059eab501afbea9be", "filename": "libstdc++-v3/include/std/tuple", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1bdc03f86328ba2b53b774420d2ace5af1d756/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1bdc03f86328ba2b53b774420d2ace5af1d756/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftuple?ref=1b1bdc03f86328ba2b53b774420d2ace5af1d756", "patch": "@@ -917,27 +917,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n             <typename std::remove_reference<_Tp>::type>::type>::type\n     { };\n \n-  // Stores a tuple of indices.  Also used by bind() to extract the elements\n-  // in a tuple. \n-  template<std::size_t... _Indexes>\n-    struct _Index_tuple\n-    {\n-      typedef _Index_tuple<_Indexes..., sizeof...(_Indexes)> __next;\n-    };\n-\n-  // Builds an _Index_tuple<0, 1, 2, ..., _Num-1>.\n-  template<std::size_t _Num>\n-    struct _Build_index_tuple\n-    {\n-      typedef typename _Build_index_tuple<_Num - 1>::__type::__next __type;\n-    };\n-\n-  template<>\n-    struct _Build_index_tuple<0>\n-    {\n-      typedef _Index_tuple<> __type;\n-    };\n-\n   template<std::size_t, typename, typename, std::size_t>\n     struct __make_tuple_impl;\n "}, {"sha": "627f79b9cf1873ab81827cab3aa6065cc57d47e0", "filename": "libstdc++-v3/include/std/utility", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1bdc03f86328ba2b53b774420d2ace5af1d756/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1bdc03f86328ba2b53b774420d2ace5af1d756/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Futility?ref=1b1bdc03f86328ba2b53b774420d2ace5af1d756", "patch": "@@ -194,6 +194,67 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n #endif\n \n+  // Stores a tuple of indices.  Used by tuple and pair, and by bind() to\n+  // extract the elements in a tuple.\n+  template<size_t... _Indexes>\n+    struct _Index_tuple\n+    {\n+      typedef _Index_tuple<_Indexes..., sizeof...(_Indexes)> __next;\n+    };\n+\n+  // Builds an _Index_tuple<0, 1, 2, ..., _Num-1>.\n+  template<size_t _Num>\n+    struct _Build_index_tuple\n+    {\n+      typedef typename _Build_index_tuple<_Num - 1>::__type::__next __type;\n+    };\n+\n+  template<>\n+    struct _Build_index_tuple<0>\n+    {\n+      typedef _Index_tuple<> __type;\n+    };\n+\n+#if __cplusplus > 201103L\n+  /// Class template integer_sequence\n+  template<typename _Tp, _Tp... _Idx>\n+    struct integer_sequence\n+    {\n+      typedef _Tp value_type;\n+      static constexpr size_t size() { return sizeof...(_Idx); }\n+    };\n+\n+  template<typename _Tp, _Tp _Num,\n+\t   typename _ISeq = typename _Build_index_tuple<_Num>::__type>\n+    struct _Make_integer_sequence;\n+\n+  template<typename _Tp, _Tp _Num,  size_t... _Idx>\n+    struct _Make_integer_sequence<_Tp, _Num, _Index_tuple<_Idx...>>\n+    {\n+      static_assert( _Num >= 0,\n+\t\t     \"Cannot make integer sequence of negative length\" );\n+\n+      typedef integer_sequence<_Tp, static_cast<_Tp>(_Idx)...> __type;\n+    };\n+\n+  /// Alias template make_integer_sequence\n+  template<typename _Tp, _Tp _Num>\n+    using make_integer_sequence\n+      = typename _Make_integer_sequence<_Tp, _Num>::__type;\n+\n+  /// Alias template index_sequence\n+  template<size_t... _Idx>\n+    using index_sequence = integer_sequence<size_t, _Idx...>;\n+\n+  /// Alias template make_index_sequence\n+  template<size_t _Num>\n+    using make_index_sequence = make_integer_sequence<size_t, _Num>;\n+\n+  /// Alias template index_sequence_for\n+  template<typename... _Types>\n+    using index_sequence_for = make_index_sequence<sizeof...(_Types)>;\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "0f3ed41ab2c30a41d5dc904385bbf6f990a1e9b6", "filename": "libstdc++-v3/testsuite/20_util/integer_sequence/intseq.cc", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1bdc03f86328ba2b53b774420d2ace5af1d756/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_sequence%2Fintseq.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1bdc03f86328ba2b53b774420d2ace5af1d756/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_sequence%2Fintseq.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_sequence%2Fintseq.cc?ref=1b1bdc03f86328ba2b53b774420d2ace5af1d756", "patch": "@@ -0,0 +1,27 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <utility>\n+\n+using std::integer_sequence;\n+\n+static_assert( integer_sequence<int>::size() == 0, \"size() == 0\" );\n+static_assert( integer_sequence<int, 0, 1, 2>::size() == 3, \"size() == 3\" );"}, {"sha": "ab26800959ccf568e00a23c3a5371af3a41a325c", "filename": "libstdc++-v3/testsuite/20_util/integer_sequence/requirements/typedefs.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b1bdc03f86328ba2b53b774420d2ace5af1d756/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_sequence%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b1bdc03f86328ba2b53b774420d2ace5af1d756/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_sequence%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Finteger_sequence%2Frequirements%2Ftypedefs.cc?ref=1b1bdc03f86328ba2b53b774420d2ace5af1d756", "patch": "@@ -0,0 +1,62 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do compile }\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <utility>\n+#include <type_traits>\n+\n+using std::is_same;\n+using std::integer_sequence;\n+using std::make_integer_sequence;\n+using std::index_sequence;\n+using std::make_index_sequence;\n+using std::index_sequence_for;\n+\n+static_assert( is_same<integer_sequence<int>::value_type, int>::value,\n+\t       \"int value_type\");\n+\n+static_assert( is_same<integer_sequence<short>::value_type, short>::value,\n+\t       \"short value_type\");\n+\n+static_assert( is_same<make_integer_sequence<int, 0>,\n+\t\t       integer_sequence<int>>::value,\n+\t       \"make empty int seq\" );\n+\n+static_assert( is_same<make_integer_sequence<int, 2>,\n+\t\t       integer_sequence<int, 0, 1>>::value,\n+\t       \"make non-empty int seq\" );\n+\n+static_assert( is_same<make_integer_sequence<unsigned, 0>,\n+\t\t       integer_sequence<unsigned>>::value,\n+\t       \"make empty unsigned seq\" );\n+\n+static_assert( is_same<make_integer_sequence<unsigned, 2>,\n+\t\t       integer_sequence<unsigned, 0, 1>>::value,\n+\t       \"make non-empty unsigned seq\" );\n+\n+static_assert( is_same<index_sequence<0, 1>,\n+\t\t       integer_sequence<std::size_t, 0, 1>>::value,\n+\t       \"index seq\" );\n+\n+static_assert( is_same<make_index_sequence<2>, index_sequence<0, 1>>::value,\n+\t       \"make index seq\" );\n+\n+static_assert( is_same<index_sequence_for<char, int, void, double>,\n+\t\t       index_sequence<0, 1, 2, 3>>::value,\n+\t       \"index_sequence_for\" );"}]}