{"sha": "2038d7efaa2752871497ca4ee85043d9c4356c73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjAzOGQ3ZWZhYTI3NTI4NzE0OTdjYTRlZTg1MDQzZDljNDM1NmM3Mw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1995-03-01T19:54:01Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "1995-03-01T19:54:01Z"}, "message": "Add support for COFF style constructors\n\nFrom-SVN: r9101", "tree": {"sha": "cc1ffe4190c5512eee7b997941acda8a246320ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc1ffe4190c5512eee7b997941acda8a246320ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2038d7efaa2752871497ca4ee85043d9c4356c73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2038d7efaa2752871497ca4ee85043d9c4356c73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2038d7efaa2752871497ca4ee85043d9c4356c73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2038d7efaa2752871497ca4ee85043d9c4356c73/comments", "author": null, "committer": null, "parents": [{"sha": "bb68ff55b181ac17df6a274b3171876a121fad9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb68ff55b181ac17df6a274b3171876a121fad9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb68ff55b181ac17df6a274b3171876a121fad9d"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "50f78c53a419a35c606951c17629c754d8ab56b5", "filename": "gcc/config/i960/i960-coff.h", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2038d7efaa2752871497ca4ee85043d9c4356c73/gcc%2Fconfig%2Fi960%2Fi960-coff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2038d7efaa2752871497ca4ee85043d9c4356c73/gcc%2Fconfig%2Fi960%2Fi960-coff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960-coff.h?ref=2038d7efaa2752871497ca4ee85043d9c4356c73", "patch": "@@ -29,4 +29,70 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE SDB_DEBUG\n \n+#undef ASM_FILE_START\n+#define ASM_FILE_START(FILE) \\\n+  output_file_directive ((FILE), main_input_filename)\n+\n+/* Support the ctors and dtors sections for g++.  */\n+\n+#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"x\\\"\"\n+#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"x\\\"\"\n+\n+/* A list of other sections which the compiler might be \"in\" at any\n+   given time.  */\n+\n+#undef EXTRA_SECTIONS\n+#define EXTRA_SECTIONS in_ctors, in_dtors\n+\n+/* A list of extra section function definitions.  */\n+\n+#undef EXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n+  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+  DTORS_SECTION_FUNCTION\n+\n+#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+ctors_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_ctors)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_ctors;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+dtors_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_dtors)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_dtors;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define INT_ASM_OP \".word\"\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global constructors.  */\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    ctors_section ();\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global destructors.  */\n+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    dtors_section ();                   \t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    assemble_name (FILE, NAME);              \t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n /* end of i960-coff.h */"}]}