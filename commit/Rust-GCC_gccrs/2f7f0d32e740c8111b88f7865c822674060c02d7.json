{"sha": "2f7f0d32e740c8111b88f7865c822674060c02d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY3ZjBkMzJlNzQwYzgxMTFiODhmNzg2NWM4MjI2NzQwNjBjMDJkNw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-16T00:16:29Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-01-16T00:16:29Z"}, "message": "Daily bump.", "tree": {"sha": "6347f444680907ec623753244563466a19277ed2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6347f444680907ec623753244563466a19277ed2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f7f0d32e740c8111b88f7865c822674060c02d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7f0d32e740c8111b88f7865c822674060c02d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f7f0d32e740c8111b88f7865c822674060c02d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f7f0d32e740c8111b88f7865c822674060c02d7/comments", "author": null, "committer": null, "parents": [{"sha": "f1ad419ebfdcfaf26117e069b10bd1b154276049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ad419ebfdcfaf26117e069b10bd1b154276049", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1ad419ebfdcfaf26117e069b10bd1b154276049"}], "stats": {"total": 419, "additions": 418, "deletions": 1}, "files": [{"sha": "559f739c80169e5e6f2d53548d992f068584b77c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7f0d32e740c8111b88f7865c822674060c02d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7f0d32e740c8111b88f7865c822674060c02d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f7f0d32e740c8111b88f7865c822674060c02d7", "patch": "@@ -1,3 +1,173 @@\n+2021-01-15  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/altivec.h (vec_mulh, vec_div, vec_dive, vec_mod):\n+\tNew defines.\n+\t* config/rs6000/altivec.md (VIlong): Move define to file vsx.md.\n+\t* config/rs6000/rs6000-builtin.def (DIVES_V4SI, DIVES_V2DI,\n+\tDIVEU_V4SI, DIVEU_V2DI, DIVS_V4SI, DIVS_V2DI, DIVU_V4SI,\n+\tDIVU_V2DI, MODS_V2DI, MODS_V4SI, MODU_V2DI, MODU_V4SI,\n+\tMULHS_V2DI, MULHS_V4SI, MULHU_V2DI, MULHU_V4SI, MULLD_V2DI):\n+\tAdd builtin define.\n+\t(MULH, DIVE, MOD):  Add new BU_P10_OVERLOAD_2 definitions.\n+\t* config/rs6000/rs6000-call.c (VSX_BUILTIN_VEC_DIV,\n+\tVSX_BUILTIN_VEC_DIVE, P10_BUILTIN_VEC_MOD, P10_BUILTIN_VEC_MULH):\n+\tNew overloaded definitions.\n+\t(builtin_function_type) [P10V_BUILTIN_DIVEU_V4SI,\n+\tP10V_BUILTIN_DIVEU_V2DI, P10V_BUILTIN_DIVU_V4SI,\n+\tP10V_BUILTIN_DIVU_V2DI, P10V_BUILTIN_MODU_V2DI,\n+\tP10V_BUILTIN_MODU_V4SI, P10V_BUILTIN_MULHU_V2DI,\n+\tP10V_BUILTIN_MULHU_V4SI]: Add case\n+\tstatement for builtins.\n+\t* config/rs6000/rs6000.md (bits): Add new attribute sizes V4SI, V2DI.\n+\t* config/rs6000/vsx.md (VIlong): Moved from config/rs6000/altivec.md.\n+\t(UNSPEC_VDIVES, UNSPEC_VDIVEU): New unspec definitions.\n+\t(vsx_mul_v2di): Add if TARGET_POWER10 statement.\n+\t(vsx_udiv_v2di): Add if TARGET_POWER10 statement.\n+\t(dives_<mode>, diveu_<mode>, div<mode>3, uvdiv<mode>3,\n+\tmods_<mode>, modu_<mode>, mulhs_<mode>, mulhu_<mode>, mulv2di3):\n+\tAdd define_insn, mode is VIlong.\n+\t* doc/extend.texi (vec_mulh, vec_mul, vec_div, vec_dive, vec_mod):\n+\tAdd builtin descriptions.\n+\n+2021-01-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* final.c (final_start_function_1): Reset force_source_line.\n+\n+2021-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96669\n+\t* match.pd (((1 << A) & 1) != 0 -> A == 0,\n+\t((1 << A) & 1) == 0 -> A != 0): Generalize for 1s replaced by\n+\tpossibly different power of two constants and to right shift too.\n+\n+2021-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96681\n+\t* match.pd ((x < 0) ^ (y < 0) to (x ^ y) < 0): New simplification.\n+\t((x >= 0) ^ (y >= 0) to (x ^ y) < 0): Likewise.\n+\t((x < 0) ^ (y >= 0) to (x ^ y) >= 0): Likewise.\n+\t((x >= 0) ^ (y < 0) to (x ^ y) >= 0): Likewise.\n+\n+2021-01-15  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* opts.c (gen_command_line_string): Exclude -dumpbase-ext.\n+\n+2021-01-15  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (cml<fcmac1><conj_op><mode>4,\n+\tcmul<conj_op><mode>3): New.\n+\t* config/aarch64/iterators.md (UNSPEC_FCMUL,\n+\tUNSPEC_FCMUL180, UNSPEC_FCMLA_CONJ, UNSPEC_FCMLA180_CONJ,\n+\tUNSPEC_CMLA_CONJ, UNSPEC_CMLA180_CONJ, UNSPEC_CMUL, UNSPEC_CMUL180,\n+\tFCMLA_OP, FCMUL_OP, conj_op, rotsplit1, rotsplit2, fcmac1, sve_rot1,\n+\tsve_rot2, SVE2_INT_CMLA_OP, SVE2_INT_CMUL_OP, SVE2_INT_CADD_OP): New.\n+\t(rot): Add UNSPEC_FCMUL, UNSPEC_FCMUL180.\n+\t(rot_op): Renamed to conj_op.\n+\t* config/aarch64/aarch64-sve.md (cml<fcmac1><conj_op><mode>4,\n+\tcmul<conj_op><mode>3): New.\n+\t* config/aarch64/aarch64-sve2.md (cml<fcmac1><conj_op><mode>4,\n+\tcmul<conj_op><mode>3): New.\n+\n+2021-01-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR bootstrap/98696\n+\t* diagnostic.c\n+\t(selftest::test_print_parseable_fixits_bytes_vs_display_columns):\n+\tEscape the tempfile name when constructing the expected output.\n+\n+2021-01-15  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (*aarch64_<su>mlsl_hi<mode>):\n+\tRename to...\n+\t(aarch64_<su>mlsl_hi<mode>): ... This.\n+\t(aarch64_<su>mlsl_hi<mode>): Define.\n+\t(*aarch64_<su>mlsl<mode): Rename to...\n+\t(aarch64_<su>mlsl<mode): ... This.\n+\t* config/aarch64/aarch64-simd-builtins.def (smlsl, umlsl,\n+\tsmlsl_hi, umlsl_hi): Define builtins.\n+\t* config/aarch64/arm_neon.h (vmlsl_high_s8, vmlsl_high_s16,\n+\tvmlsl_high_s32, vmlsl_high_u8, vmlsl_high_u16, vmlsl_high_u32,\n+\tvmlsl_s8, vmlsl_s16, vmlsl_s32, vmlsl_u8,\n+\tvmlsl_u16, vmlsl_u32): Reimplement with builtins.\n+\n+2021-01-15  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-c.c (ix86_target_macros):\n+\tUse cpp_define_formatted for __SIZEOF_FLOAT80__ definition.\n+\n+2021-01-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/88836\n+\t* config.gcc (aarch64*-*-*): Add aarch64-cc-fusion.o to extra_objs.\n+\t* Makefile.in (RTL_SSA_H): New variable.\n+\t* config/aarch64/t-aarch64 (aarch64-cc-fusion.o): New rule.\n+\t* config/aarch64/aarch64-protos.h (make_pass_cc_fusion): Declare.\n+\t* config/aarch64/aarch64-passes.def: Add pass_cc_fusion after\n+\tpass_combine.\n+\t* config/aarch64/aarch64-cc-fusion.cc: New file.\n+\n+2021-01-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* recog.h (insn_change_watermark::~insn_change_watermark): Avoid\n+\tcalling cancel_changes for changes that no longer exist.\n+\n+2021-01-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* rtl-ssa/functions.h (function_info::ref_defs): Rename to...\n+\t(function_info::reg_defs): ...this.\n+\t* rtl-ssa/member-fns.inl (function_info::ref_defs): Rename to...\n+\t(function_info::reg_defs): ...this.\n+\n+2021-01-15  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/71233\n+\t* config/arm/arm_neon.h (vceqz_p64, vceqq_p64, vceqzq_p64): New.\n+\n+2021-01-15  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tRevert:\n+\t2021-01-15  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/71233\n+\t* config/arm/arm_neon.h (vceqz_p64, vceqq_p64, vceqzq_p64): New.\n+\n+2021-01-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/96376\n+\t* tree-vect-stmts.c (get_load_store_type): Disregard alignment\n+\tfor VMAT_INVARIANT.\n+\n+2021-01-15  Martin Liska  <mliska@suse.cz>\n+\n+\t* doc/install.texi: Document that some tests need pytest module.\n+\t* doc/sourcebuild.texi: Likewise.\n+\n+2021-01-15  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/71233\n+\t* config/arm/arm_neon.h (vceqz_p64, vceqq_p64, vceqzq_p64): New.\n+\n+2021-01-15  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/mve.md (mve_vshrq_n_s<mode>_imm): New entry.\n+\t(mve_vshrq_n_u<mode>_imm): Likewise.\n+\t* config/arm/neon.md (vashr<mode>3, vlshr<mode>3): Move to ...\n+\t* config/arm/vec-common.md: ... here.\n+\n+2021-01-15  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* config/arm/mve.md (mve_vshlq_<supf><mode>): Move to\n+\tvec-commond.md.\n+\t* config/arm/neon.md (vashl<mode>3): Delete.\n+\t* config/arm/vec-common.md (mve_vshlq_<supf><mode>): New.\n+\t(vasl<mode>3): New expander.\n+\n+2021-01-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98685\n+\t* tree-vect-slp.c (vect_schedule_slp_node): Refactor handling\n+\tof vector extern defs.\n+\n 2021-01-14  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/98586"}, {"sha": "405a8dd951bc720e4eaacac357a1bf3e73b8cbdc", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7f0d32e740c8111b88f7865c822674060c02d7/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7f0d32e740c8111b88f7865c822674060c02d7/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=2f7f0d32e740c8111b88f7865c822674060c02d7", "patch": "@@ -1 +1 @@\n-20210115\n+20210116"}, {"sha": "606af001cdc305d3f71e99c2811293f692d6124c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7f0d32e740c8111b88f7865c822674060c02d7/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7f0d32e740c8111b88f7865c822674060c02d7/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=2f7f0d32e740c8111b88f7865c822674060c02d7", "patch": "@@ -1,3 +1,15 @@\n+2021-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/98597\n+\t* c-pretty-print.c: Include options.h.\n+\t(c_fold_indirect_ref_for_warn): New function.\n+\t(print_mem_ref): Use it.  If it returns something that has compatible\n+\ttype and is TBAA compatible with zero offset, print it and return,\n+\totherwise print it using offsetof syntax or array ref syntax.  Fix up\n+\tprinting if MEM_REFs first operand is ADDR_EXPR, or when the first\n+\targument has pointer to array type.  Print pointers using the standard\n+\tformatting.\n+\n 2021-01-12  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/98597"}, {"sha": "32989a1d748768f835d0adb66bff86f67559f75e", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7f0d32e740c8111b88f7865c822674060c02d7/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7f0d32e740c8111b88f7865c822674060c02d7/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=2f7f0d32e740c8111b88f7865c822674060c02d7", "patch": "@@ -1,3 +1,9 @@\n+2021-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-typeck.c (c_finish_omp_clauses): For reduction build array with\n+\tunqualified element type and then call c_build_qualified_type on the\n+\tARRAY_TYPE.\n+\n 2021-01-07  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-parser.c (c_parser_gimple_compound_statement): Only"}, {"sha": "b683c58b9e8b825a927ea2da4b5f33c8051ca1a2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7f0d32e740c8111b88f7865c822674060c02d7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7f0d32e740c8111b88f7865c822674060c02d7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2f7f0d32e740c8111b88f7865c822674060c02d7", "patch": "@@ -1,3 +1,38 @@\n+2021-01-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98538\n+\t* tree.c (cp_build_qualified_type_real): Propagate an array's\n+\tdependentness to the copy, if known.\n+\n+2021-01-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98642\n+\t* call.c (unsafe_return_slot_p): Return int.\n+\t(init_by_return_slot_p): Split out from...\n+\t(unsafe_copy_elision_p): ...here.\n+\t(unsafe_copy_elision_p_opt): New name for old meaning.\n+\t(build_over_call): Adjust.\n+\t(make_safe_copy_elision): New.\n+\t* typeck2.c (split_nonconstant_init_1): Elide copy from safe\n+\tlist-initialization.\n+\t* cp-tree.h: Adjust.\n+\n+2021-01-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (base_ctor_for, make_base_init_ok): New.\n+\t(build_over_call): Use make_base_init_ok.\n+\n+2021-01-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/63707\n+\t* tree.c (build_vec_init_expr): Don't call build_vec_init_elt\n+\tif we got a CONSTRUCTOR.\n+\n+2021-01-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98591\n+\t* lang-specs.h: Fix handling of -fmodule-only with -fsyntax-only.\n+\n 2021-01-14  Jason Merrill  <jason@redhat.com>\n \n \t* typeck2.c (process_init_constructor_record): Use fldtype"}, {"sha": "8a9e2823daece00a0efda1f40f8df2ceb9125ca9", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7f0d32e740c8111b88f7865c822674060c02d7/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7f0d32e740c8111b88f7865c822674060c02d7/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=2f7f0d32e740c8111b88f7865c822674060c02d7", "patch": "@@ -1,3 +1,7 @@\n+2021-01-15  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* Make-lang.in (GO_OBJS): Add go/embed.o.\n+\n 2021-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* lang.opt (fgo-embedcfg=): Add full stop at the end of description."}, {"sha": "972107ff0a23a1ee936fa02232842042aed22907", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7f0d32e740c8111b88f7865c822674060c02d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7f0d32e740c8111b88f7865c822674060c02d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f7f0d32e740c8111b88f7865c822674060c02d7", "patch": "@@ -1,3 +1,159 @@\n+2021-01-15  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-1-p10-runnable.c: New test file.\n+\n+2021-01-15  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\t* gfortran.dg/iso_fortran_binding_uint8_array.f90: New test.\n+\t* gfortran.dg/iso_fortran_binding_uint8_array_driver.c: New test.\n+\n+2021-01-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98538\n+\t* g++.dg/template/pr98538.C: New.\n+\n+2021-01-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR preprocessor/95253\n+\t* g++.dg/modules/dep-1_a.C: Adjust expected output.\n+\t* g++.dg/modules/dep-1_b.C: Likewise.\n+\t* g++.dg/modules/dep-2.C: Likewise.\n+\n+2021-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96669\n+\t* gcc.dg/tree-ssa/pr96669-1.c: New test.\n+\n+2021-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96681\n+\t* gcc.dg/tree-ssa/pr96681.c: New test.\n+\n+2021-01-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/98642\n+\t* g++.dg/cpp1z/elide5.C: New test.\n+\n+2021-01-15  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp1z/elide4.C: New test.\n+\n+2021-01-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/63707\n+\t* g++.dg/cpp0x/initlist-array13.C: New test.\n+\n+2021-01-15  Alexandre Oliva  <oliva@adacore.com>\n+\n+\t* gcc.dg/analyzer/alloca-leak.c: Drop alloca.h, use builtin.\n+\t* gcc.dg/analyzer/data-model-1.c: Likewise.\n+\t* gcc.dg/analyzer/malloc-1.c: Likewise.\n+\t* gcc.dg/analyzer/malloc-paths-8.c: Likewise.\n+\n+2021-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/96671\n+\t* gcc.dg/tree-ssa/pr96671-1.c: New test.\n+\t* gcc.dg/tree-ssa/pr96671-2.c: New test.\n+\n+2021-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/98597\n+\t* gcc.dg/uninit-38.c: Expect a space in between type name and asterisk.\n+\tExpect for now a (char *) cast for VLAs.\n+\t* gcc.dg/uninit-40.c: New test.\n+\n+2021-01-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/98591\n+\t* g++.dg/modules/pr98591.H: New file.\n+\n+2021-01-15  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR target/88836\n+\t* gcc.target/aarch64/sve/acle/general/ldff1_8.c: New test.\n+\t* gcc.target/aarch64/sve/ptest_1.c: Likewise.\n+\n+2021-01-15  Marius Hillenbrand  <mhillen@linux.ibm.com>\n+\n+\t* gcc.target/s390/s390.exp: Call lib atomic-dg.exp to link\n+\tlibatomic into testcases in gcc.target/s390/md.\n+\t* gcc.target/s390/md/atomic_exchange-1.c: Remove no unnecessary\n+\t-latomic.\n+\n+2021-01-15  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/71233\n+\t* gcc.target/aarch64/advsimd-intrinsics/p64_p128.c: Add tests for\n+\tvceqz_p64, vceqq_p64 and vceqzq_p64.\n+\t* gcc.target/arm/simd/vceqz_p64.c: New test.\n+\t* gcc.target/arm/simd/vceqzq_p64.c: New test.\n+\n+2021-01-15  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tRevert:\n+\t2021-01-15  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/71233\n+\t* gcc.target/aarch64/advsimd-intrinsics/p64_p128.c: Add tests for\n+\tvceqz_p64, vceqq_p64 and vceqzq_p64.\n+\n+2021-01-15  Martin Liska  <mliska@suse.cz>\n+\n+\t* lib/gcov.exp: Use 'env python3' for execution of pytests.\n+\tCheck that pytest accepts all needed options first.\n+\tImprove formatting of PASS/FAIL lines.\n+\n+2021-01-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/96147\n+\t* gcc.dg/vect/bb-slp-32.c: Align p.\n+\n+2021-01-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/96147\n+\t* gcc.dg/vect/bb-slp-9.c: Scan for a vector load transform.\n+\n+2021-01-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/96147\n+\t* gcc.dg/vect/slp-45.c: Key scanning on\n+\tvect_hw_misalign.\n+\n+2021-01-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/96147\n+\t* gcc.dg/vect/slp-43.c: Remove ! vect_hw_misalign scan.\n+\n+2021-01-15  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\tPR target/71233\n+\t* gcc.target/aarch64/advsimd-intrinsics/p64_p128.c: Add tests for\n+\tvceqz_p64, vceqq_p64 and vceqzq_p64.\n+\n+2021-01-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/96098\n+\t* gcc.dg/vect/bb-slp-pr68892.c: Remove.\n+\n+2021-01-15  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/simd/mve-vshr.c: Add tests for vshr.\n+\n+2021-01-15  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/simd/mve-vshl.c: Add tests for vshl.\n+\n+2021-01-15  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/98685\n+\t* gcc.dg/vect/bb-slp-pr98685.c: New testcase.\n+\n+2021-01-15  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.dg/vect/complex/complex-mla-template.c: Fix sed.\n+\t* gcc.dg/vect/complex/complex-mls-template.c: Likewise.\n+\n 2021-01-14  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/plugin/diagnostic-test-show-locus-GCC_EXTRA_DIAGNOSTIC_OUTPUT-fixits-v1.c:"}, {"sha": "a24ca8ae36470611df6e978ac6aa7962a0c8cf2c", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7f0d32e740c8111b88f7865c822674060c02d7/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7f0d32e740c8111b88f7865c822674060c02d7/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=2f7f0d32e740c8111b88f7865c822674060c02d7", "patch": "@@ -1,3 +1,12 @@\n+2021-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/70454\n+\t* configure.tgt: For i?86 and x86_64 determine if -march=i486 needs to\n+\tbe added through preprocessor check on\n+\t__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4.  Determine if try_ifunc is needed\n+\tbased on preprocessor check on __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16\n+\tor __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8.\n+\n 2021-01-05  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n \n \t* configure: Re-generate."}, {"sha": "4c5f1f9f1ba87c37a9c5c36009c10a3b2a69a0e1", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7f0d32e740c8111b88f7865c822674060c02d7/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7f0d32e740c8111b88f7865c822674060c02d7/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=2f7f0d32e740c8111b88f7865c822674060c02d7", "patch": "@@ -1,3 +1,8 @@\n+2021-01-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR preprocessor/95253\n+\t* mkdeps.c (munge): Do not escape ':'.\n+\n 2020-12-14  Nathan Sidwell  <nathan@acm.org>\n \n \t* include/cpplib.h (struct cpp_macro): Add imported_p field."}, {"sha": "d30c963adf0bfbbaf71f7ef28bcbb37b555814b5", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7f0d32e740c8111b88f7865c822674060c02d7/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7f0d32e740c8111b88f7865c822674060c02d7/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=2f7f0d32e740c8111b88f7865c822674060c02d7", "patch": "@@ -1,3 +1,9 @@\n+2021-01-15  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\t* runtime/ISO_Fortran_binding.c (CFI_establish): Fixed signed\n+\t  char arrays. Signed char or uint8_t arrays would cause\n+\t  crashes unless an element size is specified.\n+\n 2021-01-05  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n \n \t* configure: Re-generate."}, {"sha": "0f86cc3037abd13a535edcad841992435ae16d79", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7f0d32e740c8111b88f7865c822674060c02d7/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7f0d32e740c8111b88f7865c822674060c02d7/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=2f7f0d32e740c8111b88f7865c822674060c02d7", "patch": "@@ -1,3 +1,10 @@\n+2021-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/70454\n+\t* configure.tgt: For i?86 and x86_64 determine if -march=i486 needs to\n+\tbe added through preprocessor check on\n+\t__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4.\n+\n 2021-01-14  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR libgomp/65099"}, {"sha": "7b3dff0b718b106252e27f9c8c8dba14b7aaac16", "filename": "libitm/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f7f0d32e740c8111b88f7865c822674060c02d7/libitm%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f7f0d32e740c8111b88f7865c822674060c02d7/libitm%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2FChangeLog?ref=2f7f0d32e740c8111b88f7865c822674060c02d7", "patch": "@@ -1,3 +1,10 @@\n+2021-01-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/70454\n+\t* configure.tgt: For i?86 and x86_64 determine if -march=i486 needs to\n+\tbe added through preprocessor check on\n+\t__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4.\n+\n 2021-01-05  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n \n \t* configure: Re-generate."}]}