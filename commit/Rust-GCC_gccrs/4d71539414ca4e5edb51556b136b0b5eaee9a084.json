{"sha": "4d71539414ca4e5edb51556b136b0b5eaee9a084", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ3MTUzOTQxNGNhNGU1ZWRiNTE1NTZiMTM2YjBiNWVhZWU5YTA4NA==", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-14T12:13:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-14T12:13:29Z"}, "message": "Merge #430\n\n430: Add FNV-128 hash for legacy symbol mangling r=philberty a=philberty\n\nRustc uses a SIP128 hash for the legacy symbol mangling but an FNV hash is\r\nsimpler to implement. This is a port of the implementation from golang\r\nstdlib hash package.\r\n\r\nThe fingerprint for the hash is simply the function signature for now.\r\nRustc takes into account options such as -Cmetadata to generate uniqueness.\r\n\r\nWe still need to implement a SIP128 hasher and the V0 symbol mangling but this\r\nwill do in the interim.\r\n\r\nAddresses: #305\r\nFixes: #428\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "f742435058e7798998a08febd0d26c0600b9ec42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f742435058e7798998a08febd0d26c0600b9ec42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d71539414ca4e5edb51556b136b0b5eaee9a084", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgnmlpCRBK7hj4Ov3rIwAAuwUIAEiaixfngVFnBqdaBuhK9XGh\nGc8Q3X8x3n4gS7TAYY05ClU1BHEltOp5Wq4bu1CzuU5b/sF6kNVDPWWVW6LMr5jn\nmWDQdvbJ5Yfw3ha3QOyw/VZkercrjGZvmRX8doHyvmAjuMwGsy9HmfZTn3GPmhhw\nK4Vq3eNLmdHBxFkIkpgOiZ8sO345448oHRh3cXuJRd2Sy0ZeVxvUHwYrD0G+drEC\nlrOmcz1uq87yTLs8iIIExeUosfJUIGRdGFcsujbCh1XNR9jPuaJTrSrnLKrzV6Cs\n1baqhQTR9HWksEC5zxrkD6gNRIQZhAWUEK9oITrP6gIBZLwy5DqMmcf1OYfVzGs=\n=k2bo\n-----END PGP SIGNATURE-----\n", "payload": "tree f742435058e7798998a08febd0d26c0600b9ec42\nparent b27c694ae995b48b8042b423bf7a0ce90166c611\nparent 9bcbfee5f3e7d69b59c985404b3e4e0788f4a607\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1620994409 +0000\ncommitter GitHub <noreply@github.com> 1620994409 +0000\n\nMerge #430\n\n430: Add FNV-128 hash for legacy symbol mangling r=philberty a=philberty\n\nRustc uses a SIP128 hash for the legacy symbol mangling but an FNV hash is\r\nsimpler to implement. This is a port of the implementation from golang\r\nstdlib hash package.\r\n\r\nThe fingerprint for the hash is simply the function signature for now.\r\nRustc takes into account options such as -Cmetadata to generate uniqueness.\r\n\r\nWe still need to implement a SIP128 hasher and the V0 symbol mangling but this\r\nwill do in the interim.\r\n\r\nAddresses: #305\r\nFixes: #428\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d71539414ca4e5edb51556b136b0b5eaee9a084", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d71539414ca4e5edb51556b136b0b5eaee9a084", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d71539414ca4e5edb51556b136b0b5eaee9a084/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b27c694ae995b48b8042b423bf7a0ce90166c611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b27c694ae995b48b8042b423bf7a0ce90166c611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b27c694ae995b48b8042b423bf7a0ce90166c611"}, {"sha": "9bcbfee5f3e7d69b59c985404b3e4e0788f4a607", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bcbfee5f3e7d69b59c985404b3e4e0788f4a607", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bcbfee5f3e7d69b59c985404b3e4e0788f4a607"}], "stats": {"total": 146, "additions": 134, "deletions": 12}, "files": [{"sha": "5df0d89b5426116d9ce7fde1ef03c03182df9824", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d71539414ca4e5edb51556b136b0b5eaee9a084/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d71539414ca4e5edb51556b136b0b5eaee9a084/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=4d71539414ca4e5edb51556b136b0b5eaee9a084", "patch": "@@ -283,9 +283,12 @@ class Context\n     return pop;\n   }\n \n-  std::string mangle_item (const std::string &name) const;\n+  // this needs to support Legacy and V0 see github #429 or #305\n+  std::string mangle_item (const TyTy::BaseType *ty,\n+\t\t\t   const std::string &name) const;\n \n   std::string mangle_impl_item (const TyTy::BaseType *self,\n+\t\t\t\tconst TyTy::BaseType *ty,\n \t\t\t\tconst std::string &name) const;\n \n private:"}, {"sha": "a5ca13b93226c5b1793fb92b91286b8260ae9a8f", "filename": "gcc/rust/backend/rust-compile-implitem.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d71539414ca4e5edb51556b136b0b5eaee9a084/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d71539414ca4e5edb51556b136b0b5eaee9a084/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-implitem.h?ref=4d71539414ca4e5edb51556b136b0b5eaee9a084", "patch": "@@ -125,7 +125,7 @@ class CompileInherentImplItem : public HIRCompileBase\n     std::string fn_identifier\n       = self->get_name () + \"_\" + function.get_function_name ();\n     std::string asm_name\n-      = ctx->mangle_impl_item (self, function.get_function_name ());\n+      = ctx->mangle_impl_item (self, fntype, function.get_function_name ());\n \n     Bfunction *fndecl\n       = ctx->get_backend ()->function (compiled_fn_type, fn_identifier,\n@@ -310,7 +310,7 @@ class CompileInherentImplItem : public HIRCompileBase\n     std::string fn_identifier\n       = self->get_name () + \"_\" + method.get_method_name ();\n     std::string asm_name\n-      = ctx->mangle_impl_item (self, method.get_method_name ());\n+      = ctx->mangle_impl_item (self, fntype, method.get_method_name ());\n \n     Bfunction *fndecl\n       = ctx->get_backend ()->function (compiled_fn_type, fn_identifier,"}, {"sha": "e3b6d0fe37003bd3647c34ce982ac5978c7ad6b3", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d71539414ca4e5edb51556b136b0b5eaee9a084/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d71539414ca4e5edb51556b136b0b5eaee9a084/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=4d71539414ca4e5edb51556b136b0b5eaee9a084", "patch": "@@ -53,7 +53,7 @@ class CompileItem : public HIRCompileBase\n     Bexpression *value = CompileExpr::Compile (var.get_expr (), ctx);\n \n     std::string name = var.get_identifier ();\n-    std::string asm_name = ctx->mangle_item (name);\n+    std::string asm_name = ctx->mangle_item (resolved_type, name);\n \n     bool is_external = false;\n     bool is_hidden = false;\n@@ -154,7 +154,7 @@ class CompileItem : public HIRCompileBase\n     // we don't mangle the main fn since we haven't implemented the main shim\n     // yet\n     if (!is_main_fn)\n-      asm_name = ctx->mangle_item (ir_symbol_name);\n+      asm_name = ctx->mangle_item (fntype, ir_symbol_name);\n \n     Bfunction *fndecl\n       = ctx->get_backend ()->function (compiled_fn_type, ir_symbol_name,"}, {"sha": "480afc8b72b60e3cd0e6e17241729d8eac7b3b43", "filename": "gcc/rust/backend/rust-compile.cc", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d71539414ca4e5edb51556b136b0b5eaee9a084/gcc%2Frust%2Fbackend%2Frust-compile.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d71539414ca4e5edb51556b136b0b5eaee9a084/gcc%2Frust%2Fbackend%2Frust-compile.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile.cc?ref=4d71539414ca4e5edb51556b136b0b5eaee9a084", "patch": "@@ -20,6 +20,7 @@\n #include \"rust-compile-item.h\"\n #include \"rust-compile-expr.h\"\n #include \"rust-compile-struct-field-expr.h\"\n+#include \"fnv-hash.h\"\n \n namespace Rust {\n namespace Compile {\n@@ -427,10 +428,23 @@ mangle_name (const std::string &name)\n   return std::to_string (name.size ()) + name;\n }\n \n+// rustc uses a sip128 hash for legacy mangling, but an fnv 128 was quicker to\n+// implement for now\n static std::string\n-dummy_hash ()\n+legacy_hash (const std::string &fingerprint)\n {\n-  return \"h0123456789abcdef\";\n+  Hash::FNV128 hasher;\n+  hasher.write ((const unsigned char *) fingerprint.c_str (),\n+\t\tfingerprint.size ());\n+\n+  uint64_t hi, lo;\n+  hasher.sum (&hi, &lo);\n+\n+  char hex[16 + 1];\n+  memset (hex, 0, sizeof hex);\n+  snprintf (hex, sizeof hex, \"%08lx%08lx\", lo, hi);\n+\n+  return \"h\" + std::string (hex, sizeof (hex) - 1);\n }\n \n static std::string\n@@ -464,21 +478,28 @@ mangle_self (const TyTy::BaseType *self)\n }\n \n std::string\n-Context::mangle_item (const std::string &name) const\n+Context::mangle_item (const TyTy::BaseType *ty, const std::string &name) const\n {\n   const std::string &crate_name = mappings->get_current_crate_name ();\n+\n+  const std::string hash = legacy_hash (ty->as_string ());\n+  const std::string hash_sig = mangle_name (hash);\n+\n   return kMangledSymbolPrefix + mangle_name (crate_name) + mangle_name (name)\n-\t + mangle_name (dummy_hash ()) + kMangledSymbolDelim;\n+\t + hash_sig + kMangledSymbolDelim;\n }\n \n std::string\n-Context::mangle_impl_item (const TyTy::BaseType *self,\n+Context::mangle_impl_item (const TyTy::BaseType *self, const TyTy::BaseType *ty,\n \t\t\t   const std::string &name) const\n {\n   const std::string &crate_name = mappings->get_current_crate_name ();\n+\n+  const std::string hash = legacy_hash (ty->as_string ());\n+  const std::string hash_sig = mangle_name (hash);\n+\n   return kMangledSymbolPrefix + mangle_name (crate_name) + mangle_self (self)\n-\t + mangle_name (name) + mangle_name (dummy_hash ())\n-\t + kMangledSymbolDelim;\n+\t + mangle_name (name) + hash_sig + kMangledSymbolDelim;\n }\n \n } // namespace Compile"}, {"sha": "692ccded213334ec4b20a3118620949ab17e65d8", "filename": "gcc/rust/util/fnv-hash.h", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d71539414ca4e5edb51556b136b0b5eaee9a084/gcc%2Frust%2Futil%2Ffnv-hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d71539414ca4e5edb51556b136b0b5eaee9a084/gcc%2Frust%2Futil%2Ffnv-hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Ffnv-hash.h?ref=4d71539414ca4e5edb51556b136b0b5eaee9a084", "patch": "@@ -0,0 +1,98 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_FNV_HASH_H\n+#define RUST_FNV_HASH_H\n+\n+#include <cstdint>\n+#include <cstddef>\n+\n+namespace Rust {\n+namespace Hash {\n+\n+const uint64_t offset128Lower = 0x62b821756295c58d;\n+const uint64_t offset128Higher = 0x6c62272e07bb0142;\n+const uint64_t prime128Lower = 0x13b;\n+const uint64_t prime128Shift = 24;\n+\n+// ported from https://github.com/golang/go/blob/master/src/hash/fnv/fnv.go\n+class FNV128\n+{\n+public:\n+  FNV128 () { reset (); }\n+\n+  void reset ()\n+  {\n+    buf[0] = offset128Higher;\n+    buf[1] = offset128Lower;\n+  }\n+\n+  void write (const unsigned char *in, size_t len)\n+  {\n+    for (size_t i = 0; i < len; i++)\n+      {\n+\tunsigned char c = in[i];\n+\n+\t// https://stackoverflow.com/questions/28868367/getting-the-high-part-of-64-bit-integer-multiplication\n+\tuint64_t a = prime128Lower;\n+\tuint64_t b = buf[1];\n+\n+\tuint64_t a_lo = (uint32_t) a;\n+\tuint64_t a_hi = a >> 32;\n+\tuint64_t b_lo = (uint32_t) b;\n+\tuint64_t b_hi = b >> 32;\n+\n+\tuint64_t a_x_b_hi = a_hi * b_hi;\n+\tuint64_t a_x_b_mid = a_hi * b_lo;\n+\tuint64_t b_x_a_mid = b_hi * a_lo;\n+\tuint64_t a_x_b_lo = a_lo * b_lo;\n+\n+\tuint64_t carry_bit\n+\t  = ((uint64_t) (uint32_t) a_x_b_mid + (uint64_t) (uint32_t) b_x_a_mid\n+\t     + (a_x_b_lo >> 32))\n+\t    >> 32;\n+\n+\tuint64_t multhi\n+\t  = a_x_b_hi + (a_x_b_mid >> 32) + (b_x_a_mid >> 32) + carry_bit;\n+\n+\tuint64_t s0 = multhi;\t\t      // high\n+\tuint64_t s1 = prime128Lower * buf[1]; // low\n+\n+\ts0 += buf[1] << (prime128Shift + prime128Lower * buf[0]);\n+\n+\t// Update the values\n+\tbuf[1] = s1;\n+\tbuf[0] = s0;\n+\tbuf[1] ^= (uint64_t) c;\n+      }\n+  }\n+\n+  void sum (uint64_t *hi, uint64_t *lo) const\n+  {\n+    *hi = buf[0];\n+    *lo = buf[1];\n+  }\n+\n+private:\n+  uint64_t buf[2];\n+};\n+\n+} // namespace Hash\n+} // namespace Rust\n+\n+#endif // RUST_FNV_HASH_H"}]}