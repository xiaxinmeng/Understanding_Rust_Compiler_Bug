{"sha": "548e68fc23073b636061541233e76161d1b66b17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ4ZTY4ZmMyMzA3M2I2MzYwNjE1NDEyMzNlNzYxNjFkMWI2NmIxNw==", "commit": {"author": {"name": "Jia Liu", "email": "proljc@gmail.com", "date": "2012-09-24T09:36:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-09-24T09:36:42Z"}, "message": "lto.texi: Separate sections.\n\n2012-09-24  Jia Liu  <proljc@gmail.com>\n\n       * doc/lto.texi: Separate sections.\n       * doc/plugins.texi: Likewise.\n\nFrom-SVN: r191659", "tree": {"sha": "2fe020e4a9fa6d4b8ec03ccf5fe9ae830d02f20f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fe020e4a9fa6d4b8ec03ccf5fe9ae830d02f20f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/548e68fc23073b636061541233e76161d1b66b17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/548e68fc23073b636061541233e76161d1b66b17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/548e68fc23073b636061541233e76161d1b66b17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/548e68fc23073b636061541233e76161d1b66b17/comments", "author": {"login": "J-Liu", "id": 1065112, "node_id": "MDQ6VXNlcjEwNjUxMTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1065112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J-Liu", "html_url": "https://github.com/J-Liu", "followers_url": "https://api.github.com/users/J-Liu/followers", "following_url": "https://api.github.com/users/J-Liu/following{/other_user}", "gists_url": "https://api.github.com/users/J-Liu/gists{/gist_id}", "starred_url": "https://api.github.com/users/J-Liu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J-Liu/subscriptions", "organizations_url": "https://api.github.com/users/J-Liu/orgs", "repos_url": "https://api.github.com/users/J-Liu/repos", "events_url": "https://api.github.com/users/J-Liu/events{/privacy}", "received_events_url": "https://api.github.com/users/J-Liu/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "483ef49f9a3b2079bea28358185391a79ebf4fa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/483ef49f9a3b2079bea28358185391a79ebf4fa7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/483ef49f9a3b2079bea28358185391a79ebf4fa7"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "ae9f84c3784194dd035176429f86b13713565c43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548e68fc23073b636061541233e76161d1b66b17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548e68fc23073b636061541233e76161d1b66b17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=548e68fc23073b636061541233e76161d1b66b17", "patch": "@@ -1,3 +1,8 @@\n+2012-09-24  Jia Liu  <proljc@gmail.com>\n+\n+\t* doc/lto.texi: Separate sections.\n+\t* doc/plugins.texi: Likewise.\n+\n 2012-09-24  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/52173"}, {"sha": "d035a5160c6371b6e2ad93d2bb1f5ce9b1b62b44", "filename": "gcc/doc/lto.texi", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548e68fc23073b636061541233e76161d1b66b17/gcc%2Fdoc%2Flto.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548e68fc23073b636061541233e76161d1b66b17/gcc%2Fdoc%2Flto.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Flto.texi?ref=548e68fc23073b636061541233e76161d1b66b17", "patch": "@@ -12,6 +12,24 @@\n @cindex wpa\n @cindex ltrans\n \n+Link Time Optimization (LTO) gives GCC the capability of\n+dumping its internal representation (GIMPLE) to disk,\n+so that all the different compilation units that make up\n+a single executable can be optimized as a single module.\n+This expands the scope of inter-procedural optimizations\n+to encompass the whole program (or, rather, everything\n+that is visible at link time).\n+\n+@menu\n+* LTO Overview::            Overview of LTO.\n+* LTO object file layout::  LTO file sections in ELF.\n+* IPA::                     Using summary information in IPA passes.\n+* WHOPR::                   Whole program assumptions,\n+                            linker plugin and symbol visibilities.\n+* Internal flags::          Internal flags controlling @code{lto1}.\n+@end menu\n+\n+@node LTO Overview\n @section Design Overview\n \n Link time optimization is implemented as a GCC front end for a\n@@ -134,6 +152,7 @@ compilation process.  Additionally, it avoids the need to load the\n whole program into memory.\n \n \n+@node LTO object file layout\n @section LTO file sections\n \n LTO information is stored in several ELF sections inside object files.\n@@ -246,6 +265,7 @@ format.\n @end itemize\n \n \n+@node IPA\n @section Using summary information in IPA passes\n \n Programs are represented internally as a @emph{callgraph} (a\n@@ -448,6 +468,7 @@ inter-procedural constant propagation pass and the\n devirtualization pass.  The inliner also uses jump functions to\n perform inlining of callbacks.\n \n+@node WHOPR\n @section Whole program assumptions, linker plugin and symbol visibilities\n \n Link-time optimization gives relatively minor benefits when used\n@@ -536,6 +557,7 @@ guess based on @option{-fwhole-program}.  Without the linker\n plugin GCC also assumes that symbols are declared @code{hidden}\n and not referred by non-LTO code by default.\n \n+@node Internal flags\n @section Internal flags controlling @code{lto1}\n \n The following flags are passed into @command{lto1} and are not"}, {"sha": "f072a5f17851795e62124f3e07a0eccf4d8934fc", "filename": "gcc/doc/plugins.texi", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/548e68fc23073b636061541233e76161d1b66b17/gcc%2Fdoc%2Fplugins.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/548e68fc23073b636061541233e76161d1b66b17/gcc%2Fdoc%2Fplugins.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fplugins.texi?ref=548e68fc23073b636061541233e76161d1b66b17", "patch": "@@ -7,6 +7,30 @@\n @chapter Plugins\n @cindex Plugins\n \n+GCC plugin is a loadable module that provides extra\n+features to the compiler, which they can further pass\n+around as a shareable module.\n+\n+GCC plugins provide developers with a rich subset of\n+the GCC API to allow them to extend GCC as they see fit.\n+Whether it is writing an additional optimization pass,\n+transforming code, or analyzing information, plugins\n+can be quite useful.\n+\n+@menu\n+* Plugins loading::      How can we load plugins.\n+* Plugin API::           The APIs for plugins.\n+* Plugins pass::         How a plugin interact with the pass manager.\n+* Plugins GC::           How a plugin Interact with GCC Garbage Collector.\n+* Plugins description::  Giving information about a plugin itself.\n+* Plugins attr::         Registering custom attributes or pragmas.\n+* Plugins recording::    Recording information about pass execution.\n+* Plugins gate::         Controlling which passes are being run.\n+* Plugins tracking::     Keeping track of available passes.\n+* Plugins building::     How can we build a plugin.\n+@end menu\n+\n+@node Plugins loading\n @section Loading Plugins\n \n Plugins are supported on platforms that support @option{-ldl\n@@ -28,6 +52,7 @@ loaded from the @file{plugin} directory, so @option{-fplugin=@var{name}} is\n the same as @option{-fplugin=`gcc -print-file-name=plugin`/@var{name}.so},\n using backquote shell syntax to query the @file{plugin} directory.\n \n+@node Plugin API\n @section Plugin API\n \n Plugins are activated by the compiler at specific events as defined in\n@@ -213,6 +238,7 @@ pointer as data from GCC), plugins may register their own pragmas\n using functions like @code{c_register_pragma} or\n @code{c_register_pragma_with_expansion}.\n \n+@node Plugins pass\n @section Interacting with the pass manager\n \n There needs to be a way to add/reorder/remove passes dynamically. This\n@@ -265,6 +291,7 @@ plugin_init (struct plugin_name_args *plugin_info,\n @end smallexample\n \n \n+@node Plugins GC\n @section Interacting with the GCC Garbage Collector\n \n Some plugins may want to be informed when GGC (the GCC Garbage\n@@ -295,6 +322,7 @@ before using @code{PLUGIN_GGC_MARKING}, @code{PLUGIN_REGISTER_GGC_ROOTS}\n or @code{PLUGIN_REGISTER_GGC_CACHES}.\n \n \n+@node Plugins description\n @section Giving information about a plugin\n \n A plugin should give some information to the user about itself. This\n@@ -312,6 +340,7 @@ Such a structure is passed as the @code{user_data} by the plugin's\n init routine using @code{register_callback} with the\n @code{PLUGIN_INFO} pseudo-event and a null callback.\n \n+@node Plugins attr\n @section Registering custom attributes or pragmas\n \n For analysis (or other) purposes it is useful to be able to add custom\n@@ -369,6 +398,7 @@ It is suggested to pass @code{\"GCCPLUGIN\"} (or a short name identifying\n your plugin) as the ``space'' argument of your pragma.\n \n \n+@node Plugins recording\n @section Recording information about pass execution\n \n The event PLUGIN_PASS_EXECUTION passes the pointer to the executed pass\n@@ -383,6 +413,7 @@ and/or @code{PLUGIN_EARLY_GIMPLE_PASSES_END} to manipulate global state\n in your plugin(s) in order to get context for the pass execution.\n \n \n+@node Plugins gate\n @section Controlling which passes are being run\n \n After the original gate function for a pass is called, its result\n@@ -393,6 +424,7 @@ A nonzero value of the gate status means that the pass is to be executed.\n You can both read and write the gate status via the passed pointer.\n \n \n+@node Plugins tracking\n @section Keeping track of available passes\n \n When your plugin is loaded, you can inspect the various\n@@ -404,6 +436,7 @@ When a pass is first added to one of the pass lists, the event\n @code{gcc_data} pointing to the new pass.\n \n \n+@node Plugins building\n @section Building GCC plugins\n \n If plugins are enabled, GCC installs the headers needed to build a"}]}