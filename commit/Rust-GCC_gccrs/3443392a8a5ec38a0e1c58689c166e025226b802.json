{"sha": "3443392a8a5ec38a0e1c58689c166e025226b802", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ0MzM5MmE4YTVlYzM4YTBlMWM1ODY4OWMxNjZlMDI1MjI2YjgwMg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2007-03-19T08:46:57Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2007-03-19T08:46:57Z"}, "message": "s390.opt (\"mhard-float\", [...]): Bit value inverted and documentation adjusted.\n\n2007-03-19  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/s390.opt (\"mhard-float\", \"msoft-float\"): Bit value\n\tinverted and documentation adjusted.\n\t(\"mhard-dfp\", \"msoft-dfp\"): New options.\n\t* config/s390/s390.c (s390_handle_arch_option): New architecture\n\tswitch: z9-ec.\n\t(override_options): Sanity checks for the new options added.\n\t* config.gcc: New architecture switch: z9-ec.\n\t* config/s390/s390.h (processor_flags): PF_DFP added.\n\t(TARGET_CPU_DFP, TARGET_DFP): Macro definitions added.\n\t(TARGET_DEFAULT): Due to the s390.opt changes hard float is enabled\n\twhen the bit is NOT set so remove it from the defaults.\n\nFrom-SVN: r123055", "tree": {"sha": "424ef0516d90005fc4c736c199941d07d7d83da5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/424ef0516d90005fc4c736c199941d07d7d83da5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3443392a8a5ec38a0e1c58689c166e025226b802", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3443392a8a5ec38a0e1c58689c166e025226b802", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3443392a8a5ec38a0e1c58689c166e025226b802", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3443392a8a5ec38a0e1c58689c166e025226b802/comments", "author": null, "committer": null, "parents": [{"sha": "c413e1b5beea151b19a980d40906c5a874c1bc32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c413e1b5beea151b19a980d40906c5a874c1bc32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c413e1b5beea151b19a980d40906c5a874c1bc32"}], "stats": {"total": 61, "additions": 54, "deletions": 7}, "files": [{"sha": "1d4e1278bb97a613541fb8251a96f4889606b70a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3443392a8a5ec38a0e1c58689c166e025226b802/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3443392a8a5ec38a0e1c58689c166e025226b802/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3443392a8a5ec38a0e1c58689c166e025226b802", "patch": "@@ -1,3 +1,17 @@\n+2007-03-19  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/s390.opt (\"mhard-float\", \"msoft-float\"): Bit value\n+\tinverted and documentation adjusted.\n+\t(\"mhard-dfp\", \"msoft-dfp\"): New options.\n+\t* config/s390/s390.c (s390_handle_arch_option): New architecture\n+\tswitch: z9-ec.\n+\t(override_options): Sanity checks for the new options added.\n+\t* config.gcc: New architecture switch: z9-ec.\n+\t* config/s390/s390.h (processor_flags): PF_DFP added.\n+\t(TARGET_CPU_DFP, TARGET_DFP): Macro definitions added.\n+\t(TARGET_DEFAULT): Due to the s390.opt changes hard float is enabled\n+\twhen the bit is NOT set so remove it from the defaults.\n+\n 2007-03-19  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* genemit.c (main): Print include statement for dfp.h."}, {"sha": "e1c0fed68d1fcb39a23afc5d98baa93c7a2da240", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3443392a8a5ec38a0e1c58689c166e025226b802/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3443392a8a5ec38a0e1c58689c166e025226b802/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=3443392a8a5ec38a0e1c58689c166e025226b802", "patch": "@@ -3023,7 +3023,7 @@ case \"${target}\" in\n \t\tfor which in arch tune; do\n \t\t\teval \"val=\\$with_$which\"\n \t\t\tcase ${val} in\n-\t\t\t\"\" | g5 | g6 | z900 | z990 | z9-109)\n+\t\t\t\"\" | g5 | g6 | z900 | z990 | z9-109 | z9-ec)\n \t\t\t\t# OK\n \t\t\t\t;;\n \t\t\t*)"}, {"sha": "e72c34ed9eacf65d543edd58f535fd5ecbd9ffbe", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3443392a8a5ec38a0e1c58689c166e025226b802/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3443392a8a5ec38a0e1c58689c166e025226b802/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=3443392a8a5ec38a0e1c58689c166e025226b802", "patch": "@@ -1340,6 +1340,8 @@ s390_handle_arch_option (const char *arg,\n \t\t\t\t    | PF_LONG_DISPLACEMENT},\n       {\"z9-109\", PROCESSOR_2094_Z9_109, PF_IEEE_FLOAT | PF_ZARCH\n                                        | PF_LONG_DISPLACEMENT | PF_EXTIMM},\n+      {\"z9-ec\", PROCESSOR_2094_Z9_109, PF_IEEE_FLOAT | PF_ZARCH\n+                             | PF_LONG_DISPLACEMENT | PF_EXTIMM | PF_DFP },\n     };\n   size_t i;\n \n@@ -1418,11 +1420,34 @@ override_options (void)\n     }\n \n   /* Sanity checks.  */\n-  if (TARGET_ZARCH && !(s390_arch_flags & PF_ZARCH))\n+  if (TARGET_ZARCH && !TARGET_CPU_ZARCH)\n     error (\"z/Architecture mode not supported on %s\", s390_arch_string);\n   if (TARGET_64BIT && !TARGET_ZARCH)\n     error (\"64-bit ABI not supported in ESA/390 mode\");\n \n+  if (TARGET_HARD_DFP && (!TARGET_CPU_DFP || !TARGET_ZARCH))\n+    {\n+      if (target_flags_explicit & MASK_SOFT_DFP)\n+\t{\n+\t  if (!TARGET_CPU_DFP)\n+\t    error (\"Hardware decimal floating point instructions\"\n+\t\t   \" not available on %s\", s390_arch_string);\n+\t  if (!TARGET_ZARCH)\n+\t    error (\"Hardware decimal floating point instructions\"\n+\t\t   \" not available in ESA/390 mode\");\n+\t}\n+      else\n+\ttarget_flags |= MASK_SOFT_DFP;\n+    }\n+\n+  if ((target_flags_explicit & MASK_SOFT_FLOAT) && TARGET_SOFT_FLOAT)\n+    {\n+      if ((target_flags_explicit & MASK_SOFT_DFP) && TARGET_HARD_DFP)\n+\terror (\"-mhard-dfp can't be used in conjunction with -msoft-float\");\n+\n+      target_flags |= MASK_SOFT_DFP;\n+    }\n+\n   /* Set processor cost function.  */\n   if (s390_tune == PROCESSOR_2094_Z9_109)\n     s390_cost = &z9_109_cost;"}, {"sha": "5f38f09298534c93e85e95ce96d835f88d8c2560", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3443392a8a5ec38a0e1c58689c166e025226b802/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3443392a8a5ec38a0e1c58689c166e025226b802/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=3443392a8a5ec38a0e1c58689c166e025226b802", "patch": "@@ -195,7 +195,7 @@\n ;; this description is also used for the g5 and g6.\n (include \"2064.md\")\n \n-;; Pipeline description for z990. \n+;; Pipeline description for z990, z9-109 and z9-ec.\n (include \"2084.md\")\n \n ;; Predicates"}, {"sha": "cde3e293391a2ea9e31bbc4c794d66e96163a63c", "filename": "gcc/config/s390/s390.opt", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3443392a8a5ec38a0e1c58689c166e025226b802/gcc%2Fconfig%2Fs390%2Fs390.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3443392a8a5ec38a0e1c58689c166e025226b802/gcc%2Fconfig%2Fs390%2Fs390.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.opt?ref=3443392a8a5ec38a0e1c58689c166e025226b802", "patch": "@@ -47,9 +47,13 @@ mfused-madd\n Target Report Mask(FUSED_MADD)\n Enable fused multiply/add instructions\n \n+mhard-dfp\n+Target Report RejectNegative InverseMask(SOFT_DFP, HARD_DFP)\n+Enable hardware decimal floating point\n+\n mhard-float\n-Target Report RejectNegative Mask(HARD_FLOAT)\n-Use hardware fp\n+Target Report RejectNegative InverseMask(SOFT_FLOAT, HARD_FLOAT)\n+Enable hardware floating point\n \n mlong-double-128\n Target Report RejectNegative Mask(LONG_DOUBLE_128)\n@@ -67,9 +71,13 @@ msmall-exec\n Target Report Mask(SMALL_EXEC)\n Use bras for executable < 64k\n \n+msoft-dfp\n+Target Report RejectNegative Mask(SOFT_DFP)\n+Disable hardware decimal floating point\n+\n msoft-float\n-Target Report RejectNegative InverseMask(HARD_FLOAT, SOFT_FLOAT)\n-Don't use hardware fp\n+Target Report RejectNegative Mask(SOFT_FLOAT)\n+Disable hardware floating point\n \n mstack-guard=\n Target RejectNegative Joined"}]}