{"sha": "01349049e8a5e3d82ea0344c7628024a7c936a3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEzNDkwNDllOGE1ZTNkODJlYTAzNDRjNzYyODAyNGE3YzkzNmEzYQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2010-06-25T19:40:37Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2010-06-25T19:40:37Z"}, "message": "intrinsic.h (gfc_check_selected_real_kind, [...]): Update prototypes.\n\n2010-06-25  Tobias Burnus  <burnus@net-b.de>\n\n        * intrinsic.h (gfc_check_selected_real_kind,\n        gfc_simplify_selected_real_kind): Update prototypes.\n        * intrinsic.c (add_functions): Add radix support to\n        selected_real_kind.\n        * check.c (gfc_check_selected_real_kind): Ditto.\n        * simplify.c (gfc_simplify_selected_real_kind): Ditto.\n        * trans-decl.c (gfc_build_intrinsic_function_decls):\n        Change call from selected_real_kind to selected_real_kind2008.\n        * intrinsic.texi (SELECTED_REAL_KIND): Update for radix.\n        (PRECISION, RANGE, RADIX): Add cross @refs.\n\n2010-06-25  Tobias Burnus  <burnus@net-b.de>\n\n        * intrinsics/selected_real_kind.f90\n        (_gfortran_selected_real_kind2008): Add function.\n        (_gfortran_selected_real_kind): Stub which calls\n        _gfortran_selected_real_kind2008.\n        * gfortran.map (GFORTRAN_1.4): Add\n        _gfortran_selected_real_kind2008.\n        * mk-srk-inc.sh: Save also RADIX.\n\n2010-06-25  Tobias Burnus  <burnus@net-b.de>\n\n        * selected_real_kind_2.f90: New.\n        * selected_real_kind_3.f90: New.\n\nFrom-SVN: r161411", "tree": {"sha": "0227f439c097f371c197a8473efb939d6bb3803b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0227f439c097f371c197a8473efb939d6bb3803b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01349049e8a5e3d82ea0344c7628024a7c936a3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01349049e8a5e3d82ea0344c7628024a7c936a3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01349049e8a5e3d82ea0344c7628024a7c936a3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01349049e8a5e3d82ea0344c7628024a7c936a3a/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "849cab7b758a2da9c739de3af5d42bb252a1db5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/849cab7b758a2da9c739de3af5d42bb252a1db5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/849cab7b758a2da9c739de3af5d42bb252a1db5f"}], "stats": {"total": 264, "additions": 212, "deletions": 52}, "files": [{"sha": "c09de2161c874d420ab9b5c512914cd012b62777", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01349049e8a5e3d82ea0344c7628024a7c936a3a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01349049e8a5e3d82ea0344c7628024a7c936a3a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=01349049e8a5e3d82ea0344c7628024a7c936a3a", "patch": "@@ -1,3 +1,16 @@\n+2010-06-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* intrinsic.h (gfc_check_selected_real_kind,\n+\tgfc_simplify_selected_real_kind): Update prototypes.\n+\t* intrinsic.c (add_functions): Add radix support to\n+\tselected_real_kind.\n+\t* check.c (gfc_check_selected_real_kind): Ditto.\n+\t* simplify.c (gfc_simplify_selected_real_kind): Ditto.\n+\t* trans-decl.c (gfc_build_intrinsic_function_decls):\n+\tChange call from selected_real_kind to selected_real_kind2008.\n+\t* intrinsic.texi (SELECTED_REAL_KIND): Update for radix.\n+\t(PRECISION, RANGE, RADIX): Add cross @refs.\n+\n 2010-06-25  Tobias Burnus  <burnus@net-b.de>\n \n \t* decl.c (gfc_match_entry): Mark ENTRY as GFC_STD_F2008_OBS."}, {"sha": "3452717243151784c3fa86bb9649300af166fd9b", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01349049e8a5e3d82ea0344c7628024a7c936a3a/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01349049e8a5e3d82ea0344c7628024a7c936a3a/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=01349049e8a5e3d82ea0344c7628024a7c936a3a", "patch": "@@ -2920,15 +2920,13 @@ gfc_check_selected_int_kind (gfc_expr *r)\n \n \n gfc_try\n-gfc_check_selected_real_kind (gfc_expr *p, gfc_expr *r)\n+gfc_check_selected_real_kind (gfc_expr *p, gfc_expr *r, gfc_expr *radix)\n {\n-  if (p == NULL && r == NULL)\n-    {\n-      gfc_error (\"Missing arguments to %s intrinsic at %L\",\n-\t\t gfc_current_intrinsic, gfc_current_intrinsic_where);\n-\n-      return FAILURE;\n-    }\n+  if (p == NULL && r == NULL\n+      && gfc_notify_std (GFC_STD_F2008, \"Fortran 2008: SELECTED_REAL_KIND with\"\n+\t\t\t \" neither 'P' nor 'R' argument at %L\",\n+\t\t\t gfc_current_intrinsic_where) == FAILURE)\n+    return FAILURE;\n \n   if (p)\n     {\n@@ -2948,6 +2946,20 @@ gfc_check_selected_real_kind (gfc_expr *p, gfc_expr *r)\n \treturn FAILURE;\n     }\n \n+  if (radix)\n+    {\n+      if (type_check (radix, 1, BT_INTEGER) == FAILURE)\n+\treturn FAILURE;\n+\n+      if (scalar_check (radix, 1) == FAILURE)\n+\treturn FAILURE;\n+\n+      if (gfc_notify_std (GFC_STD_F2008, \"Fortran 2008: '%s' intrinsic with \"\n+\t\t\t  \"RADIX argument at %L\", gfc_current_intrinsic,\n+\t\t\t  &radix->where) == FAILURE)\n+\treturn FAILURE;\n+    }\n+\n   return SUCCESS;\n }\n "}, {"sha": "833fd30beb182f48ddb22a222b90d73eeb98fc95", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01349049e8a5e3d82ea0344c7628024a7c936a3a/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01349049e8a5e3d82ea0344c7628024a7c936a3a/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=01349049e8a5e3d82ea0344c7628024a7c936a3a", "patch": "@@ -2375,10 +2375,11 @@ add_functions (void)\n \n   make_generic (\"selected_int_kind\", GFC_ISYM_SI_KIND, GFC_STD_F95);\n \n-  add_sym_2 (\"selected_real_kind\", GFC_ISYM_SR_KIND, CLASS_TRANSFORMATIONAL, ACTUAL_NO, BT_INTEGER, di,\n+  add_sym_3 (\"selected_real_kind\", GFC_ISYM_SR_KIND, CLASS_TRANSFORMATIONAL, ACTUAL_NO, BT_INTEGER, di,\n \t     GFC_STD_F95, gfc_check_selected_real_kind,\n \t     gfc_simplify_selected_real_kind, NULL,\n-\t     p, BT_INTEGER, di, OPTIONAL, r, BT_INTEGER, di, OPTIONAL);\n+\t     p, BT_INTEGER, di, OPTIONAL, r, BT_INTEGER, di, OPTIONAL,\n+\t     \"radix\", BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"selected_real_kind\", GFC_ISYM_SR_KIND, GFC_STD_F95);\n "}, {"sha": "919f09e90b4f5a706e19258ac21710f355f66287", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01349049e8a5e3d82ea0344c7628024a7c936a3a/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01349049e8a5e3d82ea0344c7628024a7c936a3a/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=01349049e8a5e3d82ea0344c7628024a7c936a3a", "patch": "@@ -126,7 +126,7 @@ gfc_try gfc_check_second_sub (gfc_expr *);\n gfc_try gfc_check_secnds (gfc_expr *);\n gfc_try gfc_check_selected_char_kind (gfc_expr *);\n gfc_try gfc_check_selected_int_kind (gfc_expr *);\n-gfc_try gfc_check_selected_real_kind (gfc_expr *, gfc_expr *);\n+gfc_try gfc_check_selected_real_kind (gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_try gfc_check_set_exponent (gfc_expr *, gfc_expr *);\n gfc_try gfc_check_shape (gfc_expr *);\n gfc_try gfc_check_size (gfc_expr *, gfc_expr *, gfc_expr *);\n@@ -322,7 +322,7 @@ gfc_expr *gfc_simplify_scale (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_scan (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_selected_char_kind (gfc_expr *);\n gfc_expr *gfc_simplify_selected_int_kind (gfc_expr *);\n-gfc_expr *gfc_simplify_selected_real_kind (gfc_expr *, gfc_expr *);\n+gfc_expr *gfc_simplify_selected_real_kind (gfc_expr *, gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_set_exponent (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_sign (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_shape (gfc_expr *);"}, {"sha": "06c6793b2c482284a82e238fa261bb05359ec4a7", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01349049e8a5e3d82ea0344c7628024a7c936a3a/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01349049e8a5e3d82ea0344c7628024a7c936a3a/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=01349049e8a5e3d82ea0344c7628024a7c936a3a", "patch": "@@ -8716,6 +8716,9 @@ Inquiry function\n The return value is of type @code{INTEGER} and of the default integer\n kind.\n \n+@item @emph{See also}:\n+@ref{SELECTED_REAL_KIND}, @ref{RANGE}\n+\n @item @emph{Example}:\n @smallexample\n program prec_and_range\n@@ -8861,6 +8864,9 @@ Inquiry function\n The return value is a scalar of type @code{INTEGER} and of the default\n integer kind.\n \n+@item @emph{See also}:\n+@ref{SELECTED_REAL_KIND}\n+\n @item @emph{Example}:\n @smallexample\n program test_radix\n@@ -9098,6 +9104,9 @@ or @code{COMPLEX}.\n The return value is of type @code{INTEGER} and of the default integer\n kind.\n \n+@item @emph{See also}:\n+@ref{SELECTED_REAL_KIND}, @ref{PRECISION}\n+\n @item @emph{Example}:\n See @code{PRECISION} for an example.\n @end table\n@@ -9676,45 +9685,58 @@ end program large_integers\n @fnindex SELECTED_REAL_KIND\n @cindex real kind\n @cindex kind, real\n+@cindex radix, real\n \n @table @asis\n @item @emph{Description}:\n @code{SELECTED_REAL_KIND(P,R)} returns the kind value of a real data type\n-with decimal precision of at least @code{P} digits and exponent\n-range greater at least @code{R}. \n+with decimal precision of at least @code{P} digits, exponent range of\n+at least @code{R}, and with a radix of @code{RADIX}.\n \n @item @emph{Standard}:\n-Fortran 95 and later\n+Fortran 95 and later, with @code{RADIX} Fortran 2008 or later\n \n @item @emph{Class}:\n Transformational function\n \n @item @emph{Syntax}:\n-@code{RESULT = SELECTED_REAL_KIND([P, R])}\n+@code{RESULT = SELECTED_REAL_KIND([P, R, RADIX])}\n \n @item @emph{Arguments}:\n @multitable @columnfractions .15 .70\n @item @var{P} @tab (Optional) shall be a scalar and of type @code{INTEGER}.\n @item @var{R} @tab (Optional) shall be a scalar and of type @code{INTEGER}.\n+@item @var{RADIX} @tab (Optional) shall be a scalar and of type @code{INTEGER}.\n @end multitable\n-At least one argument shall be present.\n+Before Fortran 2008, at least one of the arguments @var{R} or @var{P} shall\n+be present; since Fortran 2008, they are assumed to be zero if absent.\n \n @item @emph{Return value}:\n \n @code{SELECTED_REAL_KIND} returns the value of the kind type parameter of\n-a real data type with decimal precision of at least @code{P} digits and a\n-decimal exponent range of at least @code{R}. If more than one real data\n-type meet the criteria, the kind of the data type with the smallest\n-decimal precision is returned. If no real data type matches the criteria,\n-the result is\n+a real data type with decimal precision of at least @code{P} digits, a\n+decimal exponent range of at least @code{R}, and with the requested\n+@code{RADIX}. If the @code{RADIX} parameter is absent, real kinds with\n+any radix can be returned. If more than one real data type meet the\n+criteria, the kind of the data type with the smallest decimal precision\n+is returned. If no real data type matches the criteria, the result is\n @table @asis\n @item -1 if the processor does not support a real data type with a\n-precision greater than or equal to @code{P}\n+precision greater than or equal to @code{P}, but the @code{R} and\n+@code{RADIX} requirements can be fulfilled\n @item -2 if the processor does not support a real type with an exponent\n-range greater than or equal to @code{R}\n-@item -3 if neither is supported.\n+range greater than or equal to @code{R}, but @code{P} and @code{RADIX}\n+are fulfillable\n+@item -3 if @code{RADIX} but not @code{P} and @code{R} requirements\n+are fulfillable\n+@item -4 if @code{RADIX} and either @code{P} or @code{R} requirements\n+are fulfillable\n+@item -5 if there is no real type with the given @code{RADIX}\n @end table\n \n+@item @emph{See also}:\n+@ref{PRECISION}, @ref{RANGE}, @ref{RADIX}\n+\n @item @emph{Example}:\n @smallexample\n program real_kinds"}, {"sha": "7356625cf419a8e44437cf4b728420bb40c54f03", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01349049e8a5e3d82ea0344c7628024a7c936a3a/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01349049e8a5e3d82ea0344c7628024a7c936a3a/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=01349049e8a5e3d82ea0344c7628024a7c936a3a", "patch": "@@ -4589,9 +4589,11 @@ gfc_simplify_selected_int_kind (gfc_expr *e)\n \n \n gfc_expr *\n-gfc_simplify_selected_real_kind (gfc_expr *p, gfc_expr *q)\n+gfc_simplify_selected_real_kind (gfc_expr *p, gfc_expr *q, gfc_expr *rdx)\n {\n-  int range, precision, i, kind, found_precision, found_range;\n+  int range, precision, radix, i, kind, found_precision, found_range,\n+      found_radix;\n+  locus *loc = &gfc_current_locus;\n \n   if (p == NULL)\n     precision = 0;\n@@ -4600,6 +4602,7 @@ gfc_simplify_selected_real_kind (gfc_expr *p, gfc_expr *q)\n       if (p->expr_type != EXPR_CONSTANT\n \t  || gfc_extract_int (p, &precision) != NULL)\n \treturn NULL;\n+      loc = &p->where;\n     }\n \n   if (q == NULL)\n@@ -4609,11 +4612,27 @@ gfc_simplify_selected_real_kind (gfc_expr *p, gfc_expr *q)\n       if (q->expr_type != EXPR_CONSTANT\n \t  || gfc_extract_int (q, &range) != NULL)\n \treturn NULL;\n+\n+      if (!loc)\n+\tloc = &q->where;\n+    }\n+\n+  if (rdx == NULL)\n+    radix = 0;\n+  else\n+    {\n+      if (rdx->expr_type != EXPR_CONSTANT\n+\t  || gfc_extract_int (rdx, &radix) != NULL)\n+\treturn NULL;\n+\n+      if (!loc)\n+\tloc = &rdx->where;\n     }\n \n   kind = INT_MAX;\n   found_precision = 0;\n   found_range = 0;\n+  found_radix = 0;\n \n   for (i = 0; gfc_real_kinds[i].kind != 0; i++)\n     {\n@@ -4623,23 +4642,30 @@ gfc_simplify_selected_real_kind (gfc_expr *p, gfc_expr *q)\n       if (gfc_real_kinds[i].range >= range)\n \tfound_range = 1;\n \n+      if (gfc_real_kinds[i].radix >= radix)\n+\tfound_radix = 1;\n+\n       if (gfc_real_kinds[i].precision >= precision\n-\t  && gfc_real_kinds[i].range >= range && gfc_real_kinds[i].kind < kind)\n+\t  && gfc_real_kinds[i].range >= range\n+\t  && gfc_real_kinds[i].radix >= radix && gfc_real_kinds[i].kind < kind)\n \tkind = gfc_real_kinds[i].kind;\n     }\n \n   if (kind == INT_MAX)\n     {\n-      kind = 0;\n-\n-      if (!found_precision)\n+      if (found_radix && found_range && !found_precision)\n \tkind = -1;\n-      if (!found_range)\n-\tkind -= 2;\n+      else if (found_radix && found_precision && !found_range)\n+\tkind = -2;\n+      else if (found_radix && !found_precision && !found_range)\n+\tkind = -3;\n+      else if (found_radix)\n+\tkind = -4;\n+      else\n+\tkind = -5;\n     }\n \n-  return gfc_get_int_expr (gfc_default_integer_kind,\n-\t\t\t   p ? &p->where : &q->where, kind);\n+  return gfc_get_int_expr (gfc_default_integer_kind, loc, kind);\n }\n \n "}, {"sha": "1c7226c41e60773ced0ed712d55941e5d7830489", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01349049e8a5e3d82ea0344c7628024a7c936a3a/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01349049e8a5e3d82ea0344c7628024a7c936a3a/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=01349049e8a5e3d82ea0344c7628024a7c936a3a", "patch": "@@ -2612,9 +2612,10 @@ gfc_build_intrinsic_function_decls (void)\n \n   gfor_fndecl_sr_kind =\n     gfc_build_library_function_decl (get_identifier\n-\t\t\t\t\t(PREFIX(\"selected_real_kind\")),\n-                                     gfc_int4_type_node, 2,\n-                                     pvoid_type_node, pvoid_type_node);\n+\t\t\t\t\t(PREFIX(\"selected_real_kind2008\")),\n+\t\t\t\t     gfc_int4_type_node, 3,\n+\t\t\t\t     pvoid_type_node, pvoid_type_node,\n+\t\t\t\t     pvoid_type_node);\n \n   /* Power functions.  */\n   {"}, {"sha": "8365f765322db6f50fec3769da616408faa3f916", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01349049e8a5e3d82ea0344c7628024a7c936a3a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01349049e8a5e3d82ea0344c7628024a7c936a3a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01349049e8a5e3d82ea0344c7628024a7c936a3a", "patch": "@@ -1,3 +1,8 @@\n+2010-06-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* selected_real_kind_2.f90: New.\n+\t* selected_real_kind_3.f90: New.\n+\n 2010-06-25  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/entry_19.f90: New."}, {"sha": "cf73520f9306480e8c8a2a05a0d143b7965c5174", "filename": "gcc/testsuite/gfortran.dg/selected_real_kind_2.f90", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01349049e8a5e3d82ea0344c7628024a7c936a3a/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_real_kind_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01349049e8a5e3d82ea0344c7628024a7c936a3a/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_real_kind_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_real_kind_2.f90?ref=01349049e8a5e3d82ea0344c7628024a7c936a3a", "patch": "@@ -0,0 +1,32 @@\n+! { dg-do run }\n+! { dg-options \"-std=f2008 -fall-intrinsics\" }\n+!\n+\n+integer :: p, r, rdx\n+\n+! Compile-time version\n+\n+if (selected_real_kind(radix=2) /= 4) call should_not_fail()\n+if (selected_real_kind(radix=4) /= -5) call should_not_fail()\n+if (selected_real_kind(precision(0.0),range(0.0),radix(0.0)) /= kind(0.0)) &\n+  call should_not_fail()\n+if (selected_real_kind(precision(0.0d0),range(0.0d0),radix(0.0d0)) /= kind(0.0d0)) &\n+  call should_not_fail()\n+\n+! Run-time version\n+\n+rdx = 2\n+if (selected_real_kind(radix=rdx) /= 4) call abort()\n+rdx = 4\n+if (selected_real_kind(radix=rdx) /= -5) call abort()\n+\n+rdx = radix(0.0)\n+p = precision(0.0)\n+r = range(0.0)\n+if (selected_real_kind(p,r,rdx) /= kind(0.0)) call abort()\n+\n+rdx = radix(0.0d0)\n+p = precision(0.0d0)\n+r = range(0.0d0)\n+if (selected_real_kind(p,r,rdx) /= kind(0.0d0)) call abort()\n+end"}, {"sha": "d24d877acfe1cc7c90d5d2678a7fe503e6068367", "filename": "gcc/testsuite/gfortran.dg/selected_real_kind_3.f90", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01349049e8a5e3d82ea0344c7628024a7c936a3a/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_real_kind_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01349049e8a5e3d82ea0344c7628024a7c936a3a/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_real_kind_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fselected_real_kind_3.f90?ref=01349049e8a5e3d82ea0344c7628024a7c936a3a", "patch": "@@ -0,0 +1,6 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2003\" }\n+!\n+print *, selected_real_kind(p=precision(0.0),radix=2) ! { dg-error \"Fortran 2008\" }\n+print *, selected_real_kind() ! { dg-error \"neither 'P' nor 'R' argument\" }\n+end"}, {"sha": "3c2c75cd1b150544895ace66a0ee989aedb75960", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01349049e8a5e3d82ea0344c7628024a7c936a3a/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01349049e8a5e3d82ea0344c7628024a7c936a3a/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=01349049e8a5e3d82ea0344c7628024a7c936a3a", "patch": "@@ -1,3 +1,13 @@\n+2010-06-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* intrinsics/selected_real_kind.f90\n+\t(_gfortran_selected_real_kind2008): Add function.\n+\t(_gfortran_selected_real_kind): Stub which calls\n+\t_gfortran_selected_real_kind2008.\n+\t* gfortran.map (GFORTRAN_1.4): Add\n+\t_gfortran_selected_real_kind2008.\n+\t* mk-srk-inc.sh: Save also RADIX.\n+\n 2010-06-25  Tobias Burnus  <burnus@net-b.de>\n \n \t* runtime/compile_options.c (init_compile_options): Update"}, {"sha": "ce5aa77b02d2499cc7f6e0818c308ca874465cb3", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01349049e8a5e3d82ea0344c7628024a7c936a3a/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01349049e8a5e3d82ea0344c7628024a7c936a3a/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=01349049e8a5e3d82ea0344c7628024a7c936a3a", "patch": "@@ -1106,6 +1106,7 @@ GFORTRAN_1.3 {\n GFORTRAN_1.4 {\n   global:\n     _gfortran_error_stop_numeric;\n+    _gfortran_selected_real_kind2008;\n } GFORTRAN_1.3; \n \n F2C_1.0 {"}, {"sha": "92708d7205f25a5db8b213969099ca8f967381e8", "filename": "libgfortran/intrinsics/selected_real_kind.f90", "status": "modified", "additions": 44, "deletions": 13, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01349049e8a5e3d82ea0344c7628024a7c936a3a/libgfortran%2Fintrinsics%2Fselected_real_kind.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01349049e8a5e3d82ea0344c7628024a7c936a3a/libgfortran%2Fintrinsics%2Fselected_real_kind.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fselected_real_kind.f90?ref=01349049e8a5e3d82ea0344c7628024a7c936a3a", "patch": "@@ -1,7 +1,7 @@\n-!   Copyright 2003, 2004, 2009 Free Software Foundation, Inc.\n+!   Copyright 2003, 2004, 2009, 2010 Free Software Foundation, Inc.\n !   Contributed by Kejia Zhao <kejia_zh@yahoo.com.cn>\n !\n-!This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+!This file is part of the GNU Fortran runtime library (libgfortran).\n !\n !Libgfortran is free software; you can redistribute it and/or\n !modify it under the terms of the GNU General Public\n@@ -22,43 +22,74 @@\n !see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n !<http://www.gnu.org/licenses/>.\n \n-function _gfortran_selected_real_kind (p, r)\n+function _gfortran_selected_real_kind2008 (p, r, rdx)\n   implicit none\n-  integer, optional, intent (in) :: p, r\n-  integer :: _gfortran_selected_real_kind\n-  integer :: i, p2, r2\n-  logical :: found_p, found_r\n+  integer, optional, intent (in) :: p, r, rdx\n+  integer :: _gfortran_selected_real_kind2008\n+  integer :: i, p2, r2, radix2\n+  logical :: found_p, found_r, found_radix\n   ! Real kind_precision_range table\n   type :: real_info\n     integer :: kind\n     integer :: precision\n     integer :: range\n+    integer :: radix\n   end type real_info\n \n   include \"selected_real_kind.inc\"\n \n-  _gfortran_selected_real_kind = 0\n+  _gfortran_selected_real_kind2008 = 0\n   p2 = 0\n   r2 = 0\n+  radix2 = 0\n   found_p = .false.\n   found_r = .false.\n+  found_radix = .false.\n \n   if (present (p)) p2 = p\n   if (present (r)) r2 = r\n+  if (present (rdx)) radix2 = rdx\n \n   ! Assumes each type has a greater precision and range than previous one.\n \n   do i = 1, c\n     if (p2 <= real_infos (i) % precision) found_p = .true.\n     if (r2 <= real_infos (i) % range) found_r = .true.\n-    if (found_p .and. found_r) then\n-      _gfortran_selected_real_kind = real_infos (i) % kind\n+    if (radix2 <= real_infos (i) % radix) found_radix = .true.\n+\n+    if (p2 <= real_infos (i) % precision   &\n+        .and. r2 <= real_infos (i) % range &\n+        .and. radix2 <= real_infos (i) % radix) then\n+      _gfortran_selected_real_kind2008 = real_infos (i) % kind\n       return\n     end if\n   end do\n \n-  if (.not. (found_p)) _gfortran_selected_real_kind = _gfortran_selected_real_kind - 1\n-  if (.not. (found_r)) _gfortran_selected_real_kind = _gfortran_selected_real_kind - 2\n+  if (found_radix .and. found_r .and. .not. found_p) then\n+    _gfortran_selected_real_kind2008 = -1\n+  elseif (found_radix .and. found_p .and. .not. found_r) then\n+    _gfortran_selected_real_kind2008 = -2\n+  elseif (found_radix .and. .not. found_p .and. .not. found_r) then\n+    _gfortran_selected_real_kind2008 = -3\n+  elseif (found_radix) then\n+    _gfortran_selected_real_kind2008 = -4\n+  else\n+    _gfortran_selected_real_kind2008 = -5\n+  end if\n+end function _gfortran_selected_real_kind2008\n+\n+function _gfortran_selected_real_kind (p, r)\n+  implicit none\n+  integer, optional, intent (in) :: p, r\n+  integer :: _gfortran_selected_real_kind\n+\n+  interface\n+    function _gfortran_selected_real_kind2008 (p, r, rdx)\n+      implicit none\n+      integer, optional, intent (in) :: p, r, rdx\n+      integer :: _gfortran_selected_real_kind2008\n+    end function _gfortran_selected_real_kind2008\n+  end interface\n \n-  return\n+  _gfortran_selected_real_kind = _gfortran_selected_real_kind2008 (p, r)\n end function"}, {"sha": "402441ce6f2f54c67a98e309435d17a77b20d5f4", "filename": "libgfortran/mk-srk-inc.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01349049e8a5e3d82ea0344c7628024a7c936a3a/libgfortran%2Fmk-srk-inc.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01349049e8a5e3d82ea0344c7628024a7c936a3a/libgfortran%2Fmk-srk-inc.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fmk-srk-inc.sh?ref=01349049e8a5e3d82ea0344c7628024a7c936a3a", "patch": "@@ -22,7 +22,7 @@ echo \"  type (real_info), parameter :: real_infos(c) = (/ &\"\n i=0\n for k in $kinds; do\n   # echo -n is not portable\n-  str=\"    real_info ($k, precision(0.0_$k), range(0.0_$k))\"\n+  str=\"    real_info ($k, precision(0.0_$k), range(0.0_$k), radix(0.0_$k))\"\n   i=`expr $i + 1`\n   if [ $i -lt $c ]; then\n     echo \"$str, &\""}]}