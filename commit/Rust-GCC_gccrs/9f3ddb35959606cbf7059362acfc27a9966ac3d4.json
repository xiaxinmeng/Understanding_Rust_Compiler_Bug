{"sha": "9f3ddb35959606cbf7059362acfc27a9966ac3d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYzZGRiMzU5NTk2MDZjYmY3MDU5MzYyYWNmYzI3YTk5NjZhYzNkNA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-02-08T10:12:43Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-02-09T09:46:54Z"}, "message": "Conditional blocks with else can resolve into a non unit type expression.\n\nWhen we compile if blocks the else gives us a final branch that can\nresolve. Single IfExpr cannot resolve as there is no final branch.\n\nThis also fixes a small regression in compiling elif blocks where the\ngimple body was empty.\n\nFixes #213", "tree": {"sha": "3cb0dd2a04c8d2166266a6bea55f285ba88a4625", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cb0dd2a04c8d2166266a6bea55f285ba88a4625"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f3ddb35959606cbf7059362acfc27a9966ac3d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f3ddb35959606cbf7059362acfc27a9966ac3d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f3ddb35959606cbf7059362acfc27a9966ac3d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f3ddb35959606cbf7059362acfc27a9966ac3d4/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ccc245a06e434df2c98d7f9d6036c03e4038842", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ccc245a06e434df2c98d7f9d6036c03e4038842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ccc245a06e434df2c98d7f9d6036c03e4038842"}], "stats": {"total": 95, "additions": 80, "deletions": 15}, "files": [{"sha": "2dabe01a495ad42cd8ca8539ad5e83957ed5c31f", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 51, "deletions": 12, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3ddb35959606cbf7059362acfc27a9966ac3d4/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3ddb35959606cbf7059362acfc27a9966ac3d4/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=9f3ddb35959606cbf7059362acfc27a9966ac3d4", "patch": "@@ -417,7 +417,6 @@ class CompileExpr : public HIRCompileBase\n \n   void visit (HIR::IfExprConseqElse &expr)\n   {\n-    // this can be a return expression\n     TyTy::TyBase *if_type = nullptr;\n     if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n \t\t\t\t\t &if_type))\n@@ -427,27 +426,67 @@ class CompileExpr : public HIRCompileBase\n \treturn;\n       }\n \n-    fncontext fnctx = ctx->peek_fn ();\n-    Bblock *enclosing_scope = ctx->peek_enclosing_scope ();\n-    Btype *block_type = TyTyResolveCompile::compile (ctx, if_type);\n+    Bvariable *tmp = NULL;\n+    bool needs_temp = if_type->get_kind () != TyTy::TypeKind::UNIT;\n+    if (needs_temp)\n+      {\n+\tfncontext fnctx = ctx->peek_fn ();\n+\tBblock *enclosing_scope = ctx->peek_enclosing_scope ();\n+\tBtype *block_type = TyTyResolveCompile::compile (ctx, if_type);\n \n-    bool is_address_taken = false;\n-    Bstatement *ret_var_stmt = nullptr;\n-    Bvariable *tmp = ctx->get_backend ()->temporary_variable (\n-      fnctx.fndecl, enclosing_scope, block_type, NULL, is_address_taken,\n-      expr.get_locus (), &ret_var_stmt);\n-    ctx->add_statement (ret_var_stmt);\n+\tbool is_address_taken = false;\n+\tBstatement *ret_var_stmt = nullptr;\n+\ttmp = ctx->get_backend ()->temporary_variable (\n+\t  fnctx.fndecl, enclosing_scope, block_type, NULL, is_address_taken,\n+\t  expr.get_locus (), &ret_var_stmt);\n+\tctx->add_statement (ret_var_stmt);\n+      }\n \n     auto stmt = CompileConditionalBlocks::compile (&expr, ctx, tmp);\n     ctx->add_statement (stmt);\n \n-    translated = ctx->get_backend ()->var_expression (tmp, expr.get_locus ());\n+    if (tmp != NULL)\n+      {\n+\ttranslated\n+\t  = ctx->get_backend ()->var_expression (tmp, expr.get_locus ());\n+      }\n   }\n \n   void visit (HIR::IfExprConseqIf &expr)\n   {\n-    auto stmt = CompileConditionalBlocks::compile (&expr, ctx, nullptr);\n+    TyTy::TyBase *if_type = nullptr;\n+    if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n+\t\t\t\t\t &if_type))\n+      {\n+\trust_error_at (expr.get_locus (),\n+\t\t       \"failed to lookup type of IfExprConseqElse\");\n+\treturn;\n+      }\n+\n+    Bvariable *tmp = NULL;\n+    bool needs_temp = if_type->get_kind () != TyTy::TypeKind::UNIT;\n+    if (needs_temp)\n+      {\n+\tfncontext fnctx = ctx->peek_fn ();\n+\tBblock *enclosing_scope = ctx->peek_enclosing_scope ();\n+\tBtype *block_type = TyTyResolveCompile::compile (ctx, if_type);\n+\n+\tbool is_address_taken = false;\n+\tBstatement *ret_var_stmt = nullptr;\n+\ttmp = ctx->get_backend ()->temporary_variable (\n+\t  fnctx.fndecl, enclosing_scope, block_type, NULL, is_address_taken,\n+\t  expr.get_locus (), &ret_var_stmt);\n+\tctx->add_statement (ret_var_stmt);\n+      }\n+\n+    auto stmt = CompileConditionalBlocks::compile (&expr, ctx, tmp);\n     ctx->add_statement (stmt);\n+\n+    if (tmp != NULL)\n+      {\n+\ttranslated\n+\t  = ctx->get_backend ()->var_expression (tmp, expr.get_locus ());\n+      }\n   }\n \n   void visit (HIR::BlockExpr &expr)"}, {"sha": "43e51c85f3d6420adc30dd2b713a50db93e28a19", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3ddb35959606cbf7059362acfc27a9966ac3d4/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3ddb35959606cbf7059362acfc27a9966ac3d4/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=9f3ddb35959606cbf7059362acfc27a9966ac3d4", "patch": "@@ -610,10 +610,10 @@ class TypeCheckExpr : public TypeCheckBase\n   void visit (HIR::IfExprConseqIf &expr)\n   {\n     TypeCheckExpr::Resolve (expr.get_if_condition ());\n-    TypeCheckExpr::Resolve (expr.get_if_block ());\n-    TypeCheckExpr::Resolve (expr.get_conseq_if_expr ());\n+    auto if_blk = TypeCheckExpr::Resolve (expr.get_if_block ());\n+    auto else_blk = TypeCheckExpr::Resolve (expr.get_conseq_if_expr ());\n \n-    infered = new TyTy::UnitType (expr.get_mappings ().get_hirid ());\n+    infered = if_blk->combine (else_blk);\n   }\n \n   void visit (HIR::BlockExpr &expr);"}, {"sha": "a8b2f278f030a8cf4c66df8c3307ffdcfabba302", "filename": "gcc/testsuite/rust.test/compilable/block_expr3.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3ddb35959606cbf7059362acfc27a9966ac3d4/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fblock_expr3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3ddb35959606cbf7059362acfc27a9966ac3d4/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fblock_expr3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fblock_expr3.rs?ref=9f3ddb35959606cbf7059362acfc27a9966ac3d4", "patch": "@@ -0,0 +1,13 @@\n+fn main() {\n+    let x = 111;\n+\n+    let a = {\n+        if x == 10 {\n+            123\n+        } else if x < 10 {\n+            456\n+        } else {\n+            789\n+        }\n+    };\n+}"}, {"sha": "eda6d176ea7d12345fbb327c61dfe5275ed7b3c7", "filename": "gcc/testsuite/rust.test/compilable/if_elif_else_expr1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f3ddb35959606cbf7059362acfc27a9966ac3d4/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fif_elif_else_expr1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f3ddb35959606cbf7059362acfc27a9966ac3d4/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fif_elif_else_expr1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fif_elif_else_expr1.rs?ref=9f3ddb35959606cbf7059362acfc27a9966ac3d4", "patch": "@@ -0,0 +1,13 @@\n+fn test(x: i32) -> i32 {\n+    if x == 10 {\n+        123\n+    } else if x < 10 {\n+        456\n+    } else {\n+        789\n+    }\n+}\n+\n+fn main() {\n+    let a = test(1);\n+}"}]}