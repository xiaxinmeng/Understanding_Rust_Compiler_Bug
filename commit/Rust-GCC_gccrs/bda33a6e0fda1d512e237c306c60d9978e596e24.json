{"sha": "bda33a6e0fda1d512e237c306c60d9978e596e24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmRhMzNhNmUwZmRhMWQ1MTJlMjM3YzMwNmM2MGQ5OTc4ZTU5NmUyNA==", "commit": {"author": {"name": "Mark Kettenis", "email": "kettenis@gnu.org", "date": "2001-08-01T19:18:42Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2001-08-01T19:18:42Z"}, "message": "unwind-pe.h (base_of_encoded_value, [...]): Define only if NO_BASE_OF_ENCODED_VALUE isn't defined.\n\n\t* unwind-pe.h (base_of_encoded_value, read_encoded_value): Define\n\tonly if NO_BASE_OF_ENCODED_VALUE isn't defined.\n\t* unwind-dw2-fde.c (NO_BASE_OF_ENCODED_VALUE): Define before\n\tincluding \"unwind-pe.h\".\n\nFrom-SVN: r44550", "tree": {"sha": "c31af4e4c456ad2b6562f9b1f19d6815bb037a46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c31af4e4c456ad2b6562f9b1f19d6815bb037a46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bda33a6e0fda1d512e237c306c60d9978e596e24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bda33a6e0fda1d512e237c306c60d9978e596e24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bda33a6e0fda1d512e237c306c60d9978e596e24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bda33a6e0fda1d512e237c306c60d9978e596e24/comments", "author": null, "committer": null, "parents": [{"sha": "75540af074553f5d39b2c61d753b491ca31f4ce6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75540af074553f5d39b2c61d753b491ca31f4ce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75540af074553f5d39b2c61d753b491ca31f4ce6"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "c78ff25a9a5f12ff88ee5f9bbf5087515c02fdb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda33a6e0fda1d512e237c306c60d9978e596e24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda33a6e0fda1d512e237c306c60d9978e596e24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bda33a6e0fda1d512e237c306c60d9978e596e24", "patch": "@@ -1,3 +1,10 @@\n+2001-08-01  Mark Kettenis  <kettenis@gnu.org>\n+\n+\t* unwind-pe.h (base_of_encoded_value, read_encoded_value): Define\n+\tonly if NO_BASE_OF_ENCODED_VALUE isn't defined.\n+\t* unwind-dw2-fde.c (NO_BASE_OF_ENCODED_VALUE): Define before\n+\tincluding \"unwind-pe.h\".\n+\n Wed Aug  1 20:01:42 CEST 2001  Jan Hubicka  <jh@suse.cz>\n \n \t* rs6000.md (define_splits): Kill unused constraints."}, {"sha": "333daecd4515a41a8f5939037ac85bad9a7d30eb", "filename": "gcc/unwind-dw2-fde.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda33a6e0fda1d512e237c306c60d9978e596e24/gcc%2Funwind-dw2-fde.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda33a6e0fda1d512e237c306c60d9978e596e24/gcc%2Funwind-dw2-fde.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde.c?ref=bda33a6e0fda1d512e237c306c60d9978e596e24", "patch": "@@ -32,6 +32,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tsystem.h\"\n #include \"dwarf2.h\"\n #include \"unwind.h\"\n+#define NO_BASE_OF_ENCODED_VALUE\n #include \"unwind-pe.h\"\n #include \"unwind-dw2-fde.h\"\n #include \"gthr.h\""}, {"sha": "9a98f4571ff41125260f8b65d2a2eeec6c05d123", "filename": "gcc/unwind-pe.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bda33a6e0fda1d512e237c306c60d9978e596e24/gcc%2Funwind-pe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bda33a6e0fda1d512e237c306c60d9978e596e24/gcc%2Funwind-pe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-pe.h?ref=bda33a6e0fda1d512e237c306c60d9978e596e24", "patch": "@@ -76,6 +76,8 @@ size_of_encoded_value (unsigned char encoding)\n   __gxx_abort ();\n }\n \n+#ifndef NO_BASE_OF_ENCODED_VALUE\n+\n /* Given an encoding and an _Unwind_Context, return the base to which\n    the encoding is relative.  This base may then be passed to\n    read_encoded_value_with_base for use when the _Unwind_Context is\n@@ -104,6 +106,8 @@ base_of_encoded_value (unsigned char encoding, struct _Unwind_Context *context)\n   __gxx_abort ();\n }\n \n+#endif\n+\n /* Load an encoded value from memory at P.  The value is returned in VAL;\n    The function returns P incremented past the value.  BASE is as given\n    by base_of_encoded_value for this encoding in the appropriate context.  */\n@@ -220,6 +224,8 @@ read_encoded_value_with_base (unsigned char encoding, _Unwind_Ptr base,\n   return p;\n }\n \n+#ifndef NO_BASE_OF_ENCODED_VALUE\n+\n /* Like read_encoded_value_with_base, but get the base from the context\n    rather than providing it directly.  */\n \n@@ -232,6 +238,8 @@ read_encoded_value (struct _Unwind_Context *context, unsigned char encoding,\n \t\tp, val);\n }\n \n+#endif\n+\n /* Read an unsigned leb128 value from P, store the value in VAL, return\n    P incremented past the value.  */\n "}]}