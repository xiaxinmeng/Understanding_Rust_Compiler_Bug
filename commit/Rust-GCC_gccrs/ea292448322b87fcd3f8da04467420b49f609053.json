{"sha": "ea292448322b87fcd3f8da04467420b49f609053", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWEyOTI0NDgzMjJiODdmY2QzZjhkYTA0NDY3NDIwYjQ5ZjYwOTA1Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2015-05-25T14:00:28Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-05-25T14:00:28Z"}, "message": "ada-tree.h (DECL_RENAMING_GLOBAL_P): Rename into...\n\n\t* gcc-interface/ada-tree.h (DECL_RENAMING_GLOBAL_P): Rename into...\n\t(DECL_GLOBAL_NONCONSTANT_RENAMING_P): ...this.\n\t* gcc-interface/gigi.h (record_global_renaming_pointer): Delete.\n\t(invalidate_global_renaming_pointers): Likewise.\n\t(record_global_nonconstant_renaming): New.\n\t(invalidate_global_nonconstant_renamings): Likewise.\n\t(get_inner_constant_reference): Likewise.\n\t(gnat_constant_reference_p): Likewise.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Adjust to above\n\tand register the renaming pointer only if the object is non-constant.\n\t(elaborate_expression_1): Call get_inner_constant_reference instead\n\tof get_inner_reference.\n\t* gcc-interface/trans.c (fold_constant_decl_in_expr): Minor tweak.\n\t(Identifier_to_gnu): Adjust to above and do not recheck the renamed\n\tobject before substituting it.\n\t(Compilation_Unit_to_gnu): Adjust to above renaming.  Minor tweaks.\n\t(gnat_to_gnu) <N_Object_Renaming_Declaration>: Do not return the\n\tresult at the global level.\n\t(N_Exception_Renaming_Declaration): Likewise.\n\t* gcc-interface/utils.c (global_renaming_pointers): Rename into...\n\t(global_nonconstant_renamings): ...this.\n\t(destroy_gnat_utils): Adjust to above renaming.\n\t(record_global_renaming_pointer): Rename into...\n\t(record_global_nonconstant_renaming): ...this.\n\t(invalidate_global_renaming_pointers): Rename into...\n\t(invalidate_global_nonconstant_renamings): ...this and do not recheck\n\tthe renamed object before invalidating.\n\t* gcc-interface/utils2.c (gnat_stabilize_reference): Minor tweak.\n\t(get_inner_constant_reference): New public function.\n\t(gnat_constant_reference_p): New predicate.\n\nFrom-SVN: r223644", "tree": {"sha": "ad069168b45b5aa8b35d5e2c20ccbc3558fcf80d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad069168b45b5aa8b35d5e2c20ccbc3558fcf80d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea292448322b87fcd3f8da04467420b49f609053", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea292448322b87fcd3f8da04467420b49f609053", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea292448322b87fcd3f8da04467420b49f609053", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea292448322b87fcd3f8da04467420b49f609053/comments", "author": null, "committer": null, "parents": [{"sha": "288cbbbdacf90e3da12df2fd0cffba69f66369ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/288cbbbdacf90e3da12df2fd0cffba69f66369ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/288cbbbdacf90e3da12df2fd0cffba69f66369ac"}], "stats": {"total": 308, "additions": 231, "deletions": 77}, "files": [{"sha": "ae967f7e908390c22249b731ad000e1865d07ee2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea292448322b87fcd3f8da04467420b49f609053/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea292448322b87fcd3f8da04467420b49f609053/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ea292448322b87fcd3f8da04467420b49f609053", "patch": "@@ -1,3 +1,36 @@\n+2015-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/ada-tree.h (DECL_RENAMING_GLOBAL_P): Rename into...\n+\t(DECL_GLOBAL_NONCONSTANT_RENAMING_P): ...this.\n+\t* gcc-interface/gigi.h (record_global_renaming_pointer): Delete.\n+\t(invalidate_global_renaming_pointers): Likewise.\n+\t(record_global_nonconstant_renaming): New.\n+\t(invalidate_global_nonconstant_renamings): Likewise.\n+\t(get_inner_constant_reference): Likewise.\n+\t(gnat_constant_reference_p): Likewise.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <object>: Adjust to above\n+\tand register the renaming pointer only if the object is non-constant.\n+\t(elaborate_expression_1): Call get_inner_constant_reference instead\n+\tof get_inner_reference.\n+\t* gcc-interface/trans.c (fold_constant_decl_in_expr): Minor tweak.\n+\t(Identifier_to_gnu): Adjust to above and do not recheck the renamed\n+\tobject before substituting it.\n+\t(Compilation_Unit_to_gnu): Adjust to above renaming.  Minor tweaks.\n+\t(gnat_to_gnu) <N_Object_Renaming_Declaration>: Do not return the\n+\tresult at the global level.\n+\t(N_Exception_Renaming_Declaration): Likewise.\n+\t* gcc-interface/utils.c (global_renaming_pointers): Rename into...\n+\t(global_nonconstant_renamings): ...this.\n+\t(destroy_gnat_utils): Adjust to above renaming.\n+\t(record_global_renaming_pointer): Rename into...\n+\t(record_global_nonconstant_renaming): ...this.\n+\t(invalidate_global_renaming_pointers): Rename into...\n+\t(invalidate_global_nonconstant_renamings): ...this and do not recheck\n+\tthe renamed object before invalidating.\n+\t* gcc-interface/utils2.c (gnat_stabilize_reference): Minor tweak.\n+\t(get_inner_constant_reference): New public function.\n+\t(gnat_constant_reference_p): New predicate.\n+\n 2015-05-25  Javier Miranda  <miranda@adacore.com>\n \n \t* einfo.ads, einfo.adb (Has_Out_Or_In_Out_Parameter): This attribute"}, {"sha": "f496b8efca38c08a5ad5d4def42dfe48c499d7b3", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea292448322b87fcd3f8da04467420b49f609053/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea292448322b87fcd3f8da04467420b49f609053/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=ea292448322b87fcd3f8da04467420b49f609053", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2014, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2015, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -394,8 +394,9 @@ do {\t\t\t\t\t\t   \\\n    is readonly.  */\n #define DECL_POINTS_TO_READONLY_P(NODE) DECL_LANG_FLAG_4 (NODE)\n \n-/* Nonzero in a VAR_DECL if it is a pointer renaming a global object.  */\n-#define DECL_RENAMING_GLOBAL_P(NODE) DECL_LANG_FLAG_5 (VAR_DECL_CHECK (NODE))\n+/* Nonzero in a VAR_DECL if it is a global non-constant renaming.  */\n+#define DECL_GLOBAL_NONCONSTANT_RENAMING_P(NODE) \\\n+  DECL_LANG_FLAG_5 (VAR_DECL_CHECK (NODE))\n \n /* In a FIELD_DECL corresponding to a discriminant, contains the\n    discriminant number.  */"}, {"sha": "7480593a3380d7b4a4c59397741063403d79707f", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea292448322b87fcd3f8da04467420b49f609053/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea292448322b87fcd3f8da04467420b49f609053/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=ea292448322b87fcd3f8da04467420b49f609053", "patch": "@@ -1517,15 +1517,18 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t  DECL_LOOP_PARM_P (gnu_decl) = 1;\n \n \t/* If this is a renaming pointer, attach the renamed object to it and\n-\t   register it if we are at the global level.  Note that an external\n-\t   constant is at the global level.  */\n+\t   register it if we are at the global level and the renamed object\n+\t   is a non-constant reference.  Note that an external constant is at\n+\t   the global level.  */\n \tif (renamed_obj)\n \t  {\n \t    SET_DECL_RENAMED_OBJECT (gnu_decl, renamed_obj);\n-\t    if ((!definition && kind == E_Constant) || global_bindings_p ())\n+\n+\t    if (((!definition && kind == E_Constant) || global_bindings_p ())\n+\t\t&& !gnat_constant_reference_p (renamed_obj))\n \t      {\n-\t\tDECL_RENAMING_GLOBAL_P (gnu_decl) = 1;\n-\t\trecord_global_renaming_pointer (gnu_decl);\n+\t\tDECL_GLOBAL_NONCONSTANT_RENAMING_P (gnu_decl) = 1;\n+\t\trecord_global_nonconstant_renaming (gnu_decl);\n \t      }\n \t  }\n \n@@ -6245,18 +6248,7 @@ elaborate_expression_1 (tree gnu_expr, Entity_Id gnat_entity, tree gnu_name,\n       inner = skip_simple_constant_arithmetic (inner);\n \n       if (handled_component_p (inner))\n-\t{\n-\t  HOST_WIDE_INT bitsize, bitpos;\n-\t  tree offset;\n-\t  machine_mode mode;\n-\t  int unsignedp, volatilep;\n-\n-\t  inner = get_inner_reference (inner, &bitsize, &bitpos, &offset,\n-\t\t\t\t       &mode, &unsignedp, &volatilep, false);\n-\t  /* If the offset is variable, err on the side of caution.  */\n-\t  if (offset)\n-\t    inner = NULL_TREE;\n-\t}\n+\tinner = get_inner_constant_reference (inner);\n \n       expr_variable_p\n \t= !(inner"}, {"sha": "0419a53fc228ee3e2dfce4d0b3d92fca1b4456b6", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea292448322b87fcd3f8da04467420b49f609053/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea292448322b87fcd3f8da04467420b49f609053/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=ea292448322b87fcd3f8da04467420b49f609053", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2014, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2015, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -716,11 +716,11 @@ create_var_decl_1 (tree var_name, tree asm_name, tree type, tree var_init,\n \t\t     const_flag, public_flag, extern_flag,\t\t\\\n \t\t     static_flag, false, attr_list, gnat_node)\n \n-/* Record DECL as a global renaming pointer.  */\n-extern void record_global_renaming_pointer (tree decl);\n+/* Record DECL as a global non-constant renaming.  */\n+extern void record_global_nonconstant_renaming (tree decl);\n \n-/* Invalidate the global renaming pointers.  */\n-extern void invalidate_global_renaming_pointers (void);\n+/* Invalidate the global non-constant renamings.  */\n+extern void invalidate_global_nonconstant_renamings (void);\n \n /* Return a FIELD_DECL node.  FIELD_NAME is the field's name, FIELD_TYPE is\n    its type and RECORD_TYPE is the type of the enclosing record.  If SIZE is\n@@ -966,6 +966,15 @@ extern tree gnat_protect_expr (tree exp);\n    through something we don't know how to stabilize.  */\n extern tree gnat_stabilize_reference (tree ref, bool force, bool *success);\n \n+/* This is equivalent to get_inner_reference in expr.c but it returns the\n+   ultimate containing object only if the reference (lvalue) is constant,\n+   i.e. if it doesn't depend on the context in which it is evaluated.  */\n+extern tree get_inner_constant_reference (tree exp);\n+\n+/* Return true if REF is a constant reference, i.e. a reference (lvalue) that\n+   doesn't depend on the context in which it is evaluated.  */\n+extern bool gnat_constant_reference_p (tree ref);\n+\n /* If EXPR is an expression that is invariant in the current function, in the\n    sense that it can be evaluated anywhere in the function and any number of\n    times, return EXPR or an equivalent expression.  Otherwise return NULL.  */"}, {"sha": "03f3e3016a64ac9f2beac1e88015b0097441e6fd", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 35, "deletions": 31, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea292448322b87fcd3f8da04467420b49f609053/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea292448322b87fcd3f8da04467420b49f609053/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=ea292448322b87fcd3f8da04467420b49f609053", "patch": "@@ -1004,9 +1004,9 @@ fold_constant_decl_in_expr (tree exp)\n       return fold (build4 (code, TREE_TYPE (exp), op0, TREE_OPERAND (exp, 1),\n \t\t\t   TREE_OPERAND (exp, 2), TREE_OPERAND (exp, 3)));\n \n-    case VIEW_CONVERT_EXPR:\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n+    case VIEW_CONVERT_EXPR:\n       op0 = fold_constant_decl_in_expr (TREE_OPERAND (exp, 0));\n       if (op0 == TREE_OPERAND (exp, 0))\n \treturn exp;\n@@ -1165,15 +1165,14 @@ Identifier_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n \t\t\t\t\t  true, false)))\n \tgnu_result = DECL_INITIAL (gnu_result);\n \n-      /* If it's a renaming pointer and, either the renamed object is constant\n-\t or we are at the right binding level, we can reference the renamed\n-\t object directly, since it is constant or has been protected against\n+      /* If it's a renaming pointer and not a global non-constant renaming or\n+\t we are at the global level, the we can reference the renamed object\n+\t directly, since it is either constant or has been protected against\n \t multiple evaluations.  */\n       if (TREE_CODE (gnu_result) == VAR_DECL\n           && !DECL_LOOP_PARM_P (gnu_result)\n \t  && DECL_RENAMED_OBJECT (gnu_result)\n-\t  && (TREE_CONSTANT (DECL_RENAMED_OBJECT (gnu_result))\n-\t      || !DECL_RENAMING_GLOBAL_P (gnu_result)\n+\t  && (!DECL_GLOBAL_NONCONSTANT_RENAMING_P (gnu_result)\n \t      || global_bindings_p ()))\n \tgnu_result = DECL_RENAMED_OBJECT (gnu_result);\n \n@@ -5143,28 +5142,24 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n   add_stmt_list (Actions (Aux_Decls_Node (gnat_node)));\n   finalize_from_limited_with ();\n \n-  /* Save away what we've made so far and record this potential elaboration\n-     procedure.  */\n-  info = ggc_alloc<elab_info> ();\n+  /* Save away what we've made so far and finish it up.  */\n   set_current_block_context (gnu_elab_proc_decl);\n   gnat_poplevel ();\n   DECL_SAVED_TREE (gnu_elab_proc_decl) = end_stmt_group ();\n-\n   set_end_locus_from_node (gnu_elab_proc_decl, gnat_unit);\n+  gnu_elab_proc_stack->pop ();\n \n+  /* Record this potential elaboration procedure for later processing.  */\n+  info = ggc_alloc<elab_info> ();\n   info->next = elab_info_list;\n   info->elab_proc = gnu_elab_proc_decl;\n   info->gnat_node = gnat_node;\n   elab_info_list = info;\n \n-  /* Generate elaboration code for this unit, if necessary, and say whether\n-     we did or not.  */\n-  gnu_elab_proc_stack->pop ();\n-\n-  /* Invalidate the global renaming pointers.  This is necessary because\n-     stabilization of the renamed entities may create SAVE_EXPRs which\n-     have been tied to a specific elaboration routine just above.  */\n-  invalidate_global_renaming_pointers ();\n+  /* Invalidate the global non-constant renamings.  This is necessary because\n+     stabilization of the renamed entities may create SAVE_EXPRs which have\n+     been tied to a specific elaboration routine just above.  */\n+  invalidate_global_nonconstant_renamings ();\n \n   /* Force the processing for all nodes that remain in the queue.  */\n   process_deferred_decl_context (true);\n@@ -5695,31 +5690,40 @@ gnat_to_gnu (Node_Id gnat_node)\n \n     case N_Object_Renaming_Declaration:\n       gnat_temp = Defining_Entity (gnat_node);\n+      gnu_result = alloc_stmt_list ();\n \n       /* Don't do anything if this renaming is handled by the front end or if\n \t we are just annotating types and this object has a composite or task\n-\t type, don't elaborate it.  We return the result in case it has any\n-\t SAVE_EXPRs in it that need to be evaluated here.  */\n+\t type, don't elaborate it.  We return the result in case it contains\n+\t any SAVE_EXPRs that need to be evaluated here, but this cannot occur\n+\t at the global level (see Renaming, case 2 in gnat_to_gnu_entity).  */\n       if (!Is_Renaming_Of_Object (gnat_temp)\n \t  && ! (type_annotate_only\n \t\t&& (Is_Array_Type (Etype (gnat_temp))\n \t\t    || Is_Record_Type (Etype (gnat_temp))\n \t\t    || Is_Concurrent_Type (Etype (gnat_temp)))))\n-\tgnu_result\n-\t  = gnat_to_gnu_entity (gnat_temp,\n-\t\t\t\tgnat_to_gnu (Renamed_Object (gnat_temp)), 1);\n-      else\n-\tgnu_result = alloc_stmt_list ();\n+\t{\n+\t  tree gnu_temp\n+\t    = gnat_to_gnu_entity (gnat_temp,\n+\t\t\t\t  gnat_to_gnu (Renamed_Object (gnat_temp)), 1);\n+\t  if (!global_bindings_p ())\n+\t    gnu_result = gnu_temp;\n+\t}\n       break;\n \n     case N_Exception_Renaming_Declaration:\n       gnat_temp = Defining_Entity (gnat_node);\n-      if (Renamed_Entity (gnat_temp) != Empty)\n-        gnu_result\n-          = gnat_to_gnu_entity (gnat_temp,\n-                                gnat_to_gnu (Renamed_Entity (gnat_temp)), 1);\n-      else\n-        gnu_result = alloc_stmt_list ();\n+      gnu_result = alloc_stmt_list ();\n+\n+      /* See the above case for the rationale.  */\n+      if (Present (Renamed_Entity (gnat_temp)))\n+\t{\n+\t  tree gnu_temp\n+\t    = gnat_to_gnu_entity (gnat_temp,\n+\t\t\t\t  gnat_to_gnu (Renamed_Entity (gnat_temp)), 1);\n+\t  if (!global_bindings_p ())\n+\t    gnu_result = gnu_temp;\n+\t}\n       break;\n \n     case N_Implicit_Label_Declaration:"}, {"sha": "184c7d53e9e2250fd33b587d3282db7233ac49e8", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea292448322b87fcd3f8da04467420b49f609053/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea292448322b87fcd3f8da04467420b49f609053/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=ea292448322b87fcd3f8da04467420b49f609053", "patch": "@@ -233,8 +233,8 @@ static GTY(()) vec<tree, va_gc> *global_decls;\n /* An array of builtin function declarations.  */\n static GTY(()) vec<tree, va_gc> *builtin_decls;\n \n-/* An array of global renaming pointers.  */\n-static GTY(()) vec<tree, va_gc> *global_renaming_pointers;\n+/* An array of global non-constant renamings.  */\n+static GTY(()) vec<tree, va_gc> *global_nonconstant_renamings;\n \n /* A chain of unused BLOCK nodes. */\n static GTY((deletable)) tree free_block_chain;\n@@ -323,8 +323,8 @@ destroy_gnat_utils (void)\n   pad_type_hash_table->empty ();\n   pad_type_hash_table = NULL;\n \n-  /* Invalidate the global renaming pointers.   */\n-  invalidate_global_renaming_pointers ();\n+  /* Invalidate the global non-constant renamings.   */\n+  invalidate_global_nonconstant_renamings ();\n }\n \f\n /* GNAT_ENTITY is a GNAT tree node for an entity.  Associate GNU_DECL, a GCC\n@@ -2718,34 +2718,31 @@ process_attributes (tree *node, struct attrib **attr_list, bool in_place,\n   *attr_list = NULL;\n }\n \f\n-/* Record DECL as a global renaming pointer.  */\n+/* Record DECL as a global non-constant renaming.  */\n \n void\n-record_global_renaming_pointer (tree decl)\n+record_global_nonconstant_renaming (tree decl)\n {\n   gcc_assert (!DECL_LOOP_PARM_P (decl) && DECL_RENAMED_OBJECT (decl));\n-  vec_safe_push (global_renaming_pointers, decl);\n+  vec_safe_push (global_nonconstant_renamings, decl);\n }\n \n-/* Invalidate the global renaming pointers that are not constant, lest their\n-   renamed object contains SAVE_EXPRs tied to an elaboration routine.  Note\n-   that we should not blindly invalidate everything here because of the need\n-   to propagate constant values through renaming.  */\n+/* Invalidate the global non-constant renamings, lest their renamed object\n+   contains SAVE_EXPRs tied to an elaboration routine.  */\n \n void\n-invalidate_global_renaming_pointers (void)\n+invalidate_global_nonconstant_renamings (void)\n {\n   unsigned int i;\n   tree iter;\n \n-  if (global_renaming_pointers == NULL)\n+  if (global_nonconstant_renamings == NULL)\n     return;\n \n-  FOR_EACH_VEC_ELT (*global_renaming_pointers, i, iter)\n-    if (!TREE_CONSTANT (DECL_RENAMED_OBJECT (iter)))\n-      SET_DECL_RENAMED_OBJECT (iter, NULL_TREE);\n+  FOR_EACH_VEC_ELT (*global_nonconstant_renamings, i, iter)\n+    SET_DECL_RENAMED_OBJECT (iter, NULL_TREE);\n \n-  vec_free (global_renaming_pointers);\n+  vec_free (global_nonconstant_renamings);\n }\n \n /* Return true if VALUE is a known to be a multiple of FACTOR, which must be"}, {"sha": "e09b5b9d425ea9f84756885750f530d89621383a", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 73, "deletions": 4, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea292448322b87fcd3f8da04467420b49f609053/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea292448322b87fcd3f8da04467420b49f609053/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=ea292448322b87fcd3f8da04467420b49f609053", "patch": "@@ -2692,10 +2692,10 @@ gnat_stabilize_reference (tree ref, bool force, bool *success)\n       break;\n \n     case COMPONENT_REF:\n-     result = build3 (COMPONENT_REF, type,\n-\t\t      gnat_stabilize_reference (TREE_OPERAND (ref, 0), force,\n-\t\t\t\t\t\tsuccess),\n-\t\t      TREE_OPERAND (ref, 1), NULL_TREE);\n+      result = build3 (COMPONENT_REF, type,\n+\t\t       gnat_stabilize_reference (TREE_OPERAND (ref, 0), force,\n+\t\t\t\t\t\t success),\n+\t\t       TREE_OPERAND (ref, 1), NULL_TREE);\n       break;\n \n     case BIT_FIELD_REF:\n@@ -2782,6 +2782,75 @@ gnat_stabilize_reference (tree ref, bool force, bool *success)\n   return result;\n }\n \n+/* This is equivalent to get_inner_reference in expr.c but it returns the\n+   ultimate containing object only if the reference (lvalue) is constant,\n+   i.e. if it doesn't depend on the context in which it is evaluated.  */\n+\n+tree\n+get_inner_constant_reference (tree exp)\n+{\n+  while (true)\n+    {\n+      switch (TREE_CODE (exp))\n+\t{\n+\tcase BIT_FIELD_REF:\n+\t  break;\n+\n+\tcase COMPONENT_REF:\n+\t  if (TREE_OPERAND (exp, 2) != NULL_TREE)\n+\t    return NULL_TREE;\n+\n+\t  if (!TREE_CONSTANT (DECL_FIELD_OFFSET (TREE_OPERAND (exp, 1))))\n+\t    return NULL_TREE;\n+\t  break;\n+\n+\tcase ARRAY_REF:\n+\tcase ARRAY_RANGE_REF:\n+\t  {\n+\t    if (TREE_OPERAND (exp, 2) != NULL_TREE\n+\t        || TREE_OPERAND (exp, 3) != NULL_TREE)\n+\t      return NULL_TREE;\n+\n+\t    tree array_type = TREE_TYPE (TREE_OPERAND (exp, 0));\n+\t    if (!TREE_CONSTANT (TREE_OPERAND (exp, 1))\n+\t        || !TREE_CONSTANT (TYPE_MIN_VALUE (TYPE_DOMAIN (array_type)))\n+\t        || !TREE_CONSTANT (TYPE_SIZE_UNIT (TREE_TYPE (array_type))))\n+\t      return NULL_TREE;\n+\t  }\n+\t  break;\n+\n+\tcase REALPART_EXPR:\n+\tcase IMAGPART_EXPR:\n+\tcase VIEW_CONVERT_EXPR:\n+\t  break;\n+\n+\tdefault:\n+\t  goto done;\n+\t}\n+\n+      exp = TREE_OPERAND (exp, 0);\n+    }\n+\n+done:\n+  return exp;\n+}\n+\n+/* Return true if REF is a constant reference, i.e. a reference (lvalue) that\n+   doesn't depend on the context in which it is evaluated.  */\n+\n+bool\n+gnat_constant_reference_p (tree ref)\n+{\n+  if (handled_component_p (ref))\n+    {\n+      ref = get_inner_constant_reference (ref);\n+      if (!ref)\n+\treturn false;\n+    }\n+\n+  return DECL_P (ref);\n+}\n+\n /* If EXPR is an expression that is invariant in the current function, in the\n    sense that it can be evaluated anywhere in the function and any number of\n    times, return EXPR or an equivalent expression.  Otherwise return NULL.  */"}, {"sha": "2d8cd01f8a6e32929e73f8d7ef39177d9cbefa87", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea292448322b87fcd3f8da04467420b49f609053/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea292448322b87fcd3f8da04467420b49f609053/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea292448322b87fcd3f8da04467420b49f609053", "patch": "@@ -1,3 +1,7 @@\n+2015-05-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/renaming6.ad[sb]: New test.\n+\n 2015-05-25  Andreas Tobler  <andreast@gcc.gnu.org>\n \n \t* gcc.target/i386/pr64317.c: Use 'dg-require-effective-target ia32'"}, {"sha": "2dcd5c71477f3b4fc265a6978a99ec1c4c5d2a50", "filename": "gcc/testsuite/gnat.dg/renaming6.adb", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea292448322b87fcd3f8da04467420b49f609053/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea292448322b87fcd3f8da04467420b49f609053/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming6.adb?ref=ea292448322b87fcd3f8da04467420b49f609053", "patch": "@@ -0,0 +1,31 @@\n+-- { dg-do compile }\n+-- { dg-options \"-fdump-tree-original\" }\n+\n+package body Renaming6 is\n+\n+  function Get_I return Integer is\n+  begin\n+    return I;\n+  end;\n+\n+  procedure Set_I (Val : Integer) is\n+  begin\n+    I := Val;\n+  end;\n+\n+  function Get_J return Integer is\n+  begin\n+    return J;\n+  end;\n+\n+  procedure Set_J (Val : Integer) is\n+  begin\n+    J := Val;\n+  end;\n+\n+end Renaming6;\n+\n+-- { dg-final { scan-tree-dump-times \"atomic_load\" 2 \"original\" } }\n+-- { dg-final { scan-tree-dump-times \"atomic_store\" 2 \"original\" } }\n+-- { dg-final { scan-tree-dump-not \"j\" \"original\" } }\n+-- { dg-final { cleanup-tree-dump \"original\" } }"}, {"sha": "5cfef5b999f027cc8a8192b4510fdb92ecd28dac", "filename": "gcc/testsuite/gnat.dg/renaming6.ads", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea292448322b87fcd3f8da04467420b49f609053/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea292448322b87fcd3f8da04467420b49f609053/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming6.ads?ref=ea292448322b87fcd3f8da04467420b49f609053", "patch": "@@ -0,0 +1,14 @@\n+package Renaming6 is\n+\n+  I : Integer;\n+  pragma Atomic (I);\n+\n+  function Get_I return Integer;\n+  procedure Set_I (Val : Integer);\n+\n+  J : Integer renames I;\n+\n+  function Get_J return Integer;\n+  procedure Set_J (Val : Integer);\n+\n+end Renaming6;"}]}