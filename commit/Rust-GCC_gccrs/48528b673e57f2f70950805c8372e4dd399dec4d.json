{"sha": "48528b673e57f2f70950805c8372e4dd399dec4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg1MjhiNjczZTU3ZjJmNzA5NTA4MDVjODM3MmU0ZGQzOTlkZWM0ZA==", "commit": {"author": {"name": "Bo Thorsen", "email": "bo@suse.de", "date": "2002-07-19T08:54:44Z"}, "committer": {"name": "Bo Thorsen", "email": "bo@gcc.gnu.org", "date": "2002-07-19T08:54:44Z"}, "message": "gcconfig.h: Add x86-64 definitions.\n\n2002-07-18  Bo Thorsen  <bo@suse.de>\n\n\t* include/private/gcconfig.h: Add x86-64 definitions.\n\t* os_dep.c: Add x86-64 support.\n\t* configure.in: Likewise.\n\t* configure: Regenerate.\n\nApproved by Hans Boehm.\n\nFrom-SVN: r55584", "tree": {"sha": "8abb320000a626494cf7dcfdca122d336665c761", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8abb320000a626494cf7dcfdca122d336665c761"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48528b673e57f2f70950805c8372e4dd399dec4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48528b673e57f2f70950805c8372e4dd399dec4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48528b673e57f2f70950805c8372e4dd399dec4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48528b673e57f2f70950805c8372e4dd399dec4d/comments", "author": null, "committer": null, "parents": [{"sha": "7ea8939450dd8004c4504c54a33f6eaacbc5982e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ea8939450dd8004c4504c54a33f6eaacbc5982e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ea8939450dd8004c4504c54a33f6eaacbc5982e"}], "stats": {"total": 85, "additions": 69, "deletions": 16}, "files": [{"sha": "099e25adc90404ba0fd911ab07ac8cff2651fd4c", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528b673e57f2f70950805c8372e4dd399dec4d/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528b673e57f2f70950805c8372e4dd399dec4d/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=48528b673e57f2f70950805c8372e4dd399dec4d", "patch": "@@ -1,3 +1,10 @@\n+2002-07-18  Bo Thorsen  <bo@suse.de>\n+\n+\t* include/private/gcconfig.h: Add x86-64 definitions.\n+\t* os_dep.c: Add x86-64 support.\n+\t* configure.in: Likewise.\n+\t* configure: Regenerate.\n+\n 2002-07-18  H.J. Lu <hjl@gnu.org>\n \n \t* mach_dep.c (GC_push_regs): Remove the unused Linux/mips code."}, {"sha": "dc2e69df0736e3ab1a2b36cc19b097ce3353df16", "filename": "boehm-gc/configure", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528b673e57f2f70950805c8372e4dd399dec4d/boehm-gc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528b673e57f2f70950805c8372e4dd399dec4d/boehm-gc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure?ref=48528b673e57f2f70950805c8372e4dd399dec4d", "patch": "@@ -2391,7 +2391,7 @@ if test -z \"$CXXCPP\"; then\n if eval \"test \\\"`echo '$''{'ac_cv_prog_CXXCPP'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n-  ac_ext=C\n+      ac_ext=C\n # CXXFLAGS is not in ac_cpp because -g, -O, etc. are not valid cpp options.\n ac_cpp='$CXXCPP $CPPFLAGS'\n ac_compile='${CXX-g++} -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext 1>&5'\n@@ -2417,15 +2417,18 @@ else\n fi\n rm -f conftest*\n   ac_cv_prog_CXXCPP=\"$CXXCPP\"\n-ac_ext=c\n+  ac_ext=c\n # CFLAGS is not in ac_cpp because -g, -O, etc. are not valid cpp options.\n ac_cpp='$CPP $CPPFLAGS'\n ac_compile='${CC-cc} -c $CFLAGS $CPPFLAGS conftest.$ac_ext 1>&5'\n ac_link='${CC-cc} -o conftest${ac_exeext} $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS 1>&5'\n cross_compiling=$ac_cv_prog_cc_cross\n+\n fi\n+  CXXCPP=\"$ac_cv_prog_CXXCPP\"\n+else\n+  ac_cv_prog_CXXCPP=$CXXCPP\n fi\n-CXXCPP=\"$ac_cv_prog_CXXCPP\"\n echo \"$ac_t\"\"$CXXCPP\" 1>&6\n \n \n@@ -2551,7 +2554,7 @@ fi\n \n \n echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n-echo \"configure:2555: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+echo \"configure:2558: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n     # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n   enableval=\"$enable_maintainer_mode\"\n@@ -2584,7 +2587,7 @@ if false; then\n   \n \n echo $ac_n \"checking for executable suffix\"\"... $ac_c\" 1>&6\n-echo \"configure:2588: checking for executable suffix\" >&5\n+echo \"configure:2591: checking for executable suffix\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_exeext'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -2594,7 +2597,7 @@ else\n   rm -f conftest*\n   echo 'int main () { return 0; }' > conftest.$ac_ext\n   ac_cv_exeext=\n-  if { (eval echo configure:2598: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; }; then\n+  if { (eval echo configure:2601: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; }; then\n     for file in conftest.*; do\n       case $file in\n       *.c | *.o | *.obj) ;;\n@@ -2617,7 +2620,7 @@ ac_exeext=$EXEEXT\n fi\n \n echo $ac_n \"checking for thread model used by GCC\"\"... $ac_c\" 1>&6\n-echo \"configure:2621: checking for thread model used by GCC\" >&5\n+echo \"configure:2624: checking for thread model used by GCC\" >&5\n THREADS=`$CC -v 2>&1 | sed -n 's/^Thread model: //p'`\n if test -z \"$THREADS\"; then\n    THREADS=no\n@@ -2646,7 +2649,7 @@ case \"$THREADS\" in\n     THREADS=posix\n     THREADLIBS=-lpthread\n     case \"$host\" in\n-     x86-*-linux* | ia64-*-linux* | i586-*-linux* | i686-*-linux*)\n+     x86-*-linux* | ia64-*-linux* | i586-*-linux* | i686-*-linux* | x86_64-*-linux* )\n \tcat >> confdefs.h <<\\EOF\n #define GC_LINUX_THREADS 1\n EOF\n@@ -2748,15 +2751,15 @@ esac\n \n \n echo $ac_n \"checking for dlopen in -ldl\"\"... $ac_c\" 1>&6\n-echo \"configure:2752: checking for dlopen in -ldl\" >&5\n+echo \"configure:2755: checking for dlopen in -ldl\" >&5\n ac_lib_var=`echo dl'_'dlopen | sed 'y%./+-%__p_%'`\n if eval \"test \\\"`echo '$''{'ac_cv_lib_$ac_lib_var'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   ac_save_LIBS=\"$LIBS\"\n LIBS=\"-ldl  $LIBS\"\n cat > conftest.$ac_ext <<EOF\n-#line 2760 \"configure\"\n+#line 2763 \"configure\"\n #include \"confdefs.h\"\n /* Override any gcc2 internal prototype to avoid an error.  */\n /* We use char because int might match the return type of a gcc2\n@@ -2767,7 +2770,7 @@ int main() {\n dlopen()\n ; return 0; }\n EOF\n-if { (eval echo configure:2771: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:2774: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_lib_$ac_lib_var=yes\"\n else\n@@ -2986,7 +2989,7 @@ EOF\n EOF\n \n       ;;\n-      x86-*-linux* | i586-*-linux* | i686-*-linux* )\n+      x86-*-linux* | i586-*-linux* | i686-*-linux* | x86_64-*-linux* )\n \tcat >> confdefs.h <<\\EOF\n #define MAKE_BACK_GRAPH 1\n EOF"}, {"sha": "d34b723de07dc18134e64d70e71d3f7aa75e9e10", "filename": "boehm-gc/configure.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528b673e57f2f70950805c8372e4dd399dec4d/boehm-gc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528b673e57f2f70950805c8372e4dd399dec4d/boehm-gc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure.in?ref=48528b673e57f2f70950805c8372e4dd399dec4d", "patch": "@@ -73,7 +73,7 @@ case \"$THREADS\" in\n     THREADS=posix\n     THREADLIBS=-lpthread\n     case \"$host\" in\n-     x86-*-linux* | ia64-*-linux* | i586-*-linux* | i686-*-linux*)\n+     x86-*-linux* | ia64-*-linux* | i586-*-linux* | i686-*-linux* | x86_64-*-linux* )\n \tAC_DEFINE(GC_LINUX_THREADS)\n \tAC_DEFINE(_REENTRANT)\n         if test \"${enable_parallel_mark}\"; then\n@@ -259,7 +259,7 @@ AC_ARG_ENABLE(full-debug,\n       ia64-*-linux* )\n \tAC_DEFINE(MAKE_BACK_GRAPH)\n       ;;\n-      x86-*-linux* | i586-*-linux* | i686-*-linux* )\n+      x86-*-linux* | i586-*-linux* | i686-*-linux* | x86_64-*-linux* )\n \tAC_DEFINE(MAKE_BACK_GRAPH)\n \tAC_MSG_WARN(\"Client must not use -fomit-frame-pointer.\")\n \tAC_DEFINE(SAVE_CALL_COUNT, 8)"}, {"sha": "b0c5420ea037b5477a9f2193fa5fbdbb373fcd7b", "filename": "boehm-gc/include/private/gcconfig.h", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528b673e57f2f70950805c8372e4dd399dec4d/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528b673e57f2f70950805c8372e4dd399dec4d/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Finclude%2Fprivate%2Fgcconfig.h?ref=48528b673e57f2f70950805c8372e4dd399dec4d", "patch": "@@ -193,6 +193,10 @@\n #    define I386\n #    define mach_type_known\n # endif\n+# if defined(LINUX) && defined(__x86_64__)\n+#    define X86_64\n+#    define mach_type_known\n+# endif\n # if defined(LINUX) && (defined(__ia64__) || defined(__ia64))\n #    define IA64\n #    define mach_type_known\n@@ -427,6 +431,7 @@\n \t\t    /* \t\t\t(HPUX)\t\t\t\t*/\n \t\t    /*\t\t   SH\t      ==> Hitachi SuperH\t*/\n \t\t    /* \t\t\t(LINUX & MSWINCE)\t\t*/\n+\t\t    /* \t\t   X86_64     ==> AMD x86-64\t\t*/\n \n \n /*\n@@ -1624,6 +1629,44 @@\n #   define DATAEND /* not needed */\n # endif\n \n+# ifdef X86_64\n+#   define MACH_TYPE \"X86_64\"\n+#   define ALIGNMENT 8\n+#   define CPP_WORDSZ 64\n+#   define CACHE_LINE_SIZE 64\n+#   define USE_GENERIC_PUSH_REGS\n+#   endif\n+#   ifdef LINUX\n+#\tdefine OS_TYPE \"LINUX\"\n+#       define LINUX_STACKBOTTOM\n+#       if !defined(GC_LINUX_THREADS) || !defined(REDIRECT_MALLOC)\n+#\t    define MPROTECT_VDB\n+#\telse\n+\t    /* We seem to get random errors in incremental mode,\t*/\n+\t    /* possibly because Linux threads is itself a malloc client */\n+\t    /* and can't deal with the signals.\t\t\t\t*/\n+#\tendif\n+#       ifdef __ELF__\n+#            define DYNAMIC_LOADING\n+#\t     ifdef UNDEFINED\t/* includes ro data */\n+\t       extern int _etext[];\n+#              define DATASTART ((ptr_t)((((word) (_etext)) + 0xfff) & ~0xfff))\n+#\t     endif\n+#\t     include <features.h>\n+#\t     define LINUX_DATA_START\n+\t     extern int _end[];\n+#\t     define DATAEND (_end)\n+#\telse\n+\t     extern int etext[];\n+#            define DATASTART ((ptr_t)((((word) (etext)) + 0xfff) & ~0xfff))\n+#       endif\n+#\tdefine PREFETCH(x) \\\n+\t  __asm__ __volatile__ (\"\tprefetch\t%0\": : \"m\"(*(char *)(x)))\n+#\tdefine PREFETCH_FOR_WRITE(x) \\\n+\t  __asm__ __volatile__ (\"\tprefetchw\t%0\": : \"m\"(*(char *)(x)))\n+#   endif\n+# endif\n+\n #ifdef LINUX_DATA_START\n     /* Some Linux distributions arrange to define __data_start.  Some\t*/\n     /* define data_start as a weak symbol.  The latter is technically\t*/\n@@ -1817,7 +1860,7 @@\n # define CAN_SAVE_CALL_STACKS\n # define CAN_SAVE_CALL_ARGS\n #endif\n-#if defined(I386) && defined(LINUX)\n+#if (defined(I386) || defined(X86_64)) && defined(LINUX)\n     /* SAVE_CALL_CHAIN is supported if the code is compiled to save\t*/\n     /* frame pointers by default, i.e. no -fomit-frame-pointer flag.\t*/\n # define CAN_SAVE_CALL_STACKS"}, {"sha": "82386ec4fba1bfc93259793ea388faf016e283be", "filename": "boehm-gc/os_dep.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48528b673e57f2f70950805c8372e4dd399dec4d/boehm-gc%2Fos_dep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48528b673e57f2f70950805c8372e4dd399dec4d/boehm-gc%2Fos_dep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fos_dep.c?ref=48528b673e57f2f70950805c8372e4dd399dec4d", "patch": "@@ -2174,7 +2174,7 @@ SIG_PF GC_old_segv_handler;\t/* Also old MSWIN32 ACCESS_VIOLATION filter */\n \tchar * addr = (char *) (scp -> si_addr);\n #   endif\n #   ifdef LINUX\n-#     ifdef I386\n+#     if defined(I386) || defined (X86_64)\n \tchar * addr = (char *) (sc.cr2);\n #     else\n #\tif defined(M68K)"}]}