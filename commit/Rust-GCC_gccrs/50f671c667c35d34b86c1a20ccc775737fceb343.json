{"sha": "50f671c667c35d34b86c1a20ccc775737fceb343", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBmNjcxYzY2N2MzNWQzNGI4NmMxYTIwY2NjNzc1NzM3ZmNlYjM0Mw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-03-30T04:59:02Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-03-30T04:59:02Z"}, "message": "compiler: Fix order of evaluation of struct composite literals.\n\nFrom-SVN: r185990", "tree": {"sha": "d6adecc4f59286bacad137d4327767d2219f13b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6adecc4f59286bacad137d4327767d2219f13b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50f671c667c35d34b86c1a20ccc775737fceb343", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f671c667c35d34b86c1a20ccc775737fceb343", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50f671c667c35d34b86c1a20ccc775737fceb343", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50f671c667c35d34b86c1a20ccc775737fceb343/comments", "author": null, "committer": null, "parents": [{"sha": "7b770e43eea5deec69051478af946e1bec37586f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b770e43eea5deec69051478af946e1bec37586f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b770e43eea5deec69051478af946e1bec37586f"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "baff0c9a5d9e5697f02f27b3526e504c67d7b897", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f671c667c35d34b86c1a20ccc775737fceb343/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f671c667c35d34b86c1a20ccc775737fceb343/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=50f671c667c35d34b86c1a20ccc775737fceb343", "patch": "@@ -10967,9 +10967,15 @@ class Struct_construction_expression : public Expression\n   Struct_construction_expression(Type* type, Expression_list* vals,\n \t\t\t\t Location location)\n     : Expression(EXPRESSION_STRUCT_CONSTRUCTION, location),\n-      type_(type), vals_(vals)\n+      type_(type), vals_(vals), traverse_order_(NULL)\n   { }\n \n+  // Set the traversal order, used to ensure that we implement the\n+  // order of evaluation rules.  Takes ownership of the argument.\n+  void\n+  set_traverse_order(std::vector<int>* traverse_order)\n+  { this->traverse_order_ = traverse_order; }\n+\n   // Return whether this is a constant initializer.\n   bool\n   is_constant_struct() const;\n@@ -10991,8 +10997,12 @@ class Struct_construction_expression : public Expression\n   Expression*\n   do_copy()\n   {\n-    return new Struct_construction_expression(this->type_, this->vals_->copy(),\n-\t\t\t\t\t      this->location());\n+    Struct_construction_expression* ret =\n+      new Struct_construction_expression(this->type_, this->vals_->copy(),\n+\t\t\t\t\t this->location());\n+    if (this->traverse_order_ != NULL)\n+      ret->set_traverse_order(this->traverse_order_);\n+    return ret;\n   }\n \n   tree\n@@ -11010,16 +11020,36 @@ class Struct_construction_expression : public Expression\n   // The list of values, in order of the fields in the struct.  A NULL\n   // entry means that the field should be zero-initialized.\n   Expression_list* vals_;\n+  // If not NULL, the order in which to traverse vals_.  This is used\n+  // so that we implement the order of evaluation rules correctly.\n+  std::vector<int>* traverse_order_;\n };\n \n // Traversal.\n \n int\n Struct_construction_expression::do_traverse(Traverse* traverse)\n {\n-  if (this->vals_ != NULL\n-      && this->vals_->traverse(traverse) == TRAVERSE_EXIT)\n-    return TRAVERSE_EXIT;\n+  if (this->vals_ != NULL)\n+    {\n+      if (this->traverse_order_ == NULL)\n+\t{\n+\t  if (this->vals_->traverse(traverse) == TRAVERSE_EXIT)\n+\t    return TRAVERSE_EXIT;\n+\t}\n+      else\n+\t{\n+\t  for (std::vector<int>::const_iterator p =\n+\t\t this->traverse_order_->begin();\n+\t       p != this->traverse_order_->end();\n+\t       ++p)\n+\t    {\n+\t      if (Expression::traverse(&this->vals_->at(*p), traverse)\n+\t\t  == TRAVERSE_EXIT)\n+\t\treturn TRAVERSE_EXIT;\n+\t    }\n+\t}\n+    }\n   if (Type::traverse(this->type_, traverse) == TRAVERSE_EXIT)\n     return TRAVERSE_EXIT;\n   return TRAVERSE_CONTINUE;\n@@ -12198,6 +12228,7 @@ Composite_literal_expression::lower_struct(Gogo* gogo, Type* type)\n \n   size_t field_count = st->field_count();\n   std::vector<Expression*> vals(field_count);\n+  std::vector<int>* traverse_order = new(std::vector<int>);\n   Expression_list::const_iterator p = this->vals_->begin();\n   while (p != this->vals_->end())\n     {\n@@ -12350,14 +12381,18 @@ Composite_literal_expression::lower_struct(Gogo* gogo, Type* type)\n \t\t type->named_type()->message_name().c_str());\n \n       vals[index] = val;\n+      traverse_order->push_back(index);\n     }\n \n   Expression_list* list = new Expression_list;\n   list->reserve(field_count);\n   for (size_t i = 0; i < field_count; ++i)\n     list->push_back(vals[i]);\n \n-  return new Struct_construction_expression(type, list, location);\n+  Struct_construction_expression* ret =\n+    new Struct_construction_expression(type, list, location);\n+  ret->set_traverse_order(traverse_order);\n+  return ret;\n }\n \n // Lower an array composite literal."}, {"sha": "d58e6c5fcb00b0f6a7261c92f788aeb62981b440", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50f671c667c35d34b86c1a20ccc775737fceb343/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50f671c667c35d34b86c1a20ccc775737fceb343/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=50f671c667c35d34b86c1a20ccc775737fceb343", "patch": "@@ -842,6 +842,11 @@ class Expression_list\n   bool\n   contains_error() const;\n \n+  // Retrieve an element by index.\n+  Expression*&\n+  at(size_t i)\n+  { return this->entries_.at(i); }\n+\n   // Return the first and last elements.\n   Expression*&\n   front()"}]}