{"sha": "e6df850973c9cc688cad4d9bff4c1260c028025d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZkZjg1MDk3M2M5Y2M2ODhjYWQ0ZDliZmY0YzEyNjBjMDI4MDI1ZA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-07-24T20:55:22Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-07-24T20:55:22Z"}, "message": "Don't allow unsafe reductions in graphite\n\n2015-07-24  Tom de Vries  <tom@codesourcery.com>\n\n\t* graphite-sese-to-poly.c (is_reduction_operation_p): Limit\n\tflag_associative_math to FLOAT_TYPE_P.  Honour\n\tTYPE_OVERFLOW_WRAPS for INTEGRAL_TYPE_P. Don't allow any other types.\n\n\t* gcc.dg/graphite/block-1.c: Xfail scan.\n\t* gcc.dg/graphite/interchange-12.c: Same.\n\t* gcc.dg/graphite/interchange-14.c: Same.\n\t* gcc.dg/graphite/interchange-15.c: Same.\n\t* gcc.dg/graphite/interchange-9.c: Same.\n\t* gcc.dg/graphite/interchange-mvt.c: Same.\n\t* gcc.dg/graphite/uns-block-1.c: New test.\n\t* gcc.dg/graphite/uns-interchange-12.c: New test.\n\t* gcc.dg/graphite/uns-interchange-14.c: New test.\n\t* gcc.dg/graphite/uns-interchange-15.c: New test.\n\t* gcc.dg/graphite/uns-interchange-9.c: New test.\n\t* gcc.dg/graphite/uns-interchange-mvt.c: New test.\n\nFrom-SVN: r226193", "tree": {"sha": "4b8350baf0dc6269f524db5a85b88dd0a48113aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b8350baf0dc6269f524db5a85b88dd0a48113aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6df850973c9cc688cad4d9bff4c1260c028025d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6df850973c9cc688cad4d9bff4c1260c028025d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6df850973c9cc688cad4d9bff4c1260c028025d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6df850973c9cc688cad4d9bff4c1260c028025d/comments", "author": null, "committer": null, "parents": [{"sha": "274d8c11f37abd11a3a43b5bd129c194b0daeafc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/274d8c11f37abd11a3a43b5bd129c194b0daeafc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/274d8c11f37abd11a3a43b5bd129c194b0daeafc"}], "stats": {"total": 372, "additions": 363, "deletions": 9}, "files": [{"sha": "3bd8ff1a86966484c5c2d4a83e9582087711ec66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6df850973c9cc688cad4d9bff4c1260c028025d", "patch": "@@ -1,3 +1,9 @@\n+2015-07-24  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* graphite-sese-to-poly.c (is_reduction_operation_p): Limit\n+\tflag_associative_math to FLOAT_TYPE_P.  Honour\n+\tTYPE_OVERFLOW_WRAPS for INTEGRAL_TYPE_P. Don't allow any other types.\n+\n 2015-07-24  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c++/64079"}, {"sha": "25cfa17b94898cc94799c59969997e05caababd4", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=e6df850973c9cc688cad4d9bff4c1260c028025d", "patch": "@@ -2605,9 +2605,17 @@ is_reduction_operation_p (gimple stmt)\n   gcc_assert (is_gimple_assign (stmt));\n   code = gimple_assign_rhs_code (stmt);\n \n-  return flag_associative_math\n-    && commutative_tree_code (code)\n-    && associative_tree_code (code);\n+  if (!commutative_tree_code (code)\n+      || !associative_tree_code (code))\n+    return false;\n+\n+  tree type = TREE_TYPE (gimple_assign_lhs (stmt));\n+\n+  if (FLOAT_TYPE_P (type))\n+    return flag_associative_math;\n+\n+  return (INTEGRAL_TYPE_P (type)\n+\t  && TYPE_OVERFLOW_WRAPS (type));\n }\n \n /* Returns true when PHI contains an argument ARG.  */"}, {"sha": "56e1d81ffa48d7872e6fe9df16bb44d38499c756", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e6df850973c9cc688cad4d9bff4c1260c028025d", "patch": "@@ -1,3 +1,18 @@\n+2015-07-24  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* gcc.dg/graphite/block-1.c: Xfail scan.\n+\t* gcc.dg/graphite/interchange-12.c: Same.\n+\t* gcc.dg/graphite/interchange-14.c: Same.\n+\t* gcc.dg/graphite/interchange-15.c: Same.\n+\t* gcc.dg/graphite/interchange-9.c: Same.\n+\t* gcc.dg/graphite/interchange-mvt.c: Same.\n+\t* gcc.dg/graphite/uns-block-1.c: New test.\n+\t* gcc.dg/graphite/uns-interchange-12.c: New test.\n+\t* gcc.dg/graphite/uns-interchange-14.c: New test.\n+\t* gcc.dg/graphite/uns-interchange-15.c: New test.\n+\t* gcc.dg/graphite/uns-interchange-9.c: New test.\n+\t* gcc.dg/graphite/uns-interchange-mvt.c: New test.\n+\n 2015-07-24  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c++/64079"}, {"sha": "2208eb9d16b34c52238a5864b6b88d2925fe5403", "filename": "gcc/testsuite/gcc.dg/graphite/block-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fblock-1.c?ref=e6df850973c9cc688cad4d9bff4c1260c028025d", "patch": "@@ -45,4 +45,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 3 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 3 \"graphite\" { xfail *-*-* } } } */"}, {"sha": "bf95fdd98ad0a8070bb8111ea7c809057126b2cb", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-12.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-12.c?ref=e6df850973c9cc688cad4d9bff4c1260c028025d", "patch": "@@ -53,4 +53,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */"}, {"sha": "46f6a6deb23682e2f6a0a80cfc8a2f30c593d46b", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-14.c?ref=e6df850973c9cc688cad4d9bff4c1260c028025d", "patch": "@@ -55,4 +55,4 @@ main (void)\n }\n \n /* PRE destroys the perfect nest and we can't cope with that yet.  */\n-/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */"}, {"sha": "9f6b7aeda44bb61c556c122965cc1ca08f0f92cf", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-15.c?ref=e6df850973c9cc688cad4d9bff4c1260c028025d", "patch": "@@ -49,5 +49,5 @@ main (void)\n }\n \n /* PRE destroys the perfect nest and we can't cope with that yet.  */\n-/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */\n "}, {"sha": "b023ea8a9074e89bb0a3911d46c1d6e300e2393a", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-9.c?ref=e6df850973c9cc688cad4d9bff4c1260c028025d", "patch": "@@ -44,4 +44,4 @@ main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */"}, {"sha": "8c00f8073ef73d5d2b2423d72761ddda57a2c1bb", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-mvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-mvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-mvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-mvt.c?ref=e6df850973c9cc688cad4d9bff4c1260c028025d", "patch": "@@ -59,5 +59,5 @@ main (void)\n }\n \n /* PRE destroys the perfect nest and we can't cope with that yet.  */\n-/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" { xfail *-*-* } } } */\n "}, {"sha": "57d522b284239900572b6f35e1e0e7d7584bdabd", "filename": "gcc/testsuite/gcc.dg/graphite/uns-block-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-block-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-block-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-block-1.c?ref=e6df850973c9cc688cad4d9bff4c1260c028025d", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-require-effective-target size32plus } */\n+\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#define MAX 100\n+\n+extern void abort ();\n+\n+int\n+main (void)\n+{\n+  int i, j;\n+  int sum = 0;\n+  int A[MAX * MAX];\n+  int B[MAX * MAX];\n+\n+  /* These loops should be loop blocked.  */\n+  for (i = 0; i < MAX; i++)\n+    for (j = 0; j < MAX; j++)\n+      {\n+\tA[i*MAX + j] = j;\n+\tB[i*MAX + j] = j;\n+      }\n+\n+  /* These loops should be loop blocked.  */\n+  for (i = 0; i < MAX; i++)\n+    for (j = 0; j < MAX; j++)\n+      A[i*MAX + j] += B[j*MAX + i];\n+\n+  /* These loops should be loop blocked.  */\n+  for (i = 0; i < MAX; i++)\n+    for (j = 0; j < MAX; j++)\n+      sum += A[i*MAX + j];\n+\n+#if DEBUG\n+  fprintf (stderr, \"sum = %d \\n\", sum);\n+#endif\n+\n+  if (sum != 990000)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"will be loop blocked\" 3 \"graphite\" } } */"}, {"sha": "dc269266977397cc7de93433aa9711c7ad6b08a2", "filename": "gcc/testsuite/gcc.dg/graphite/uns-interchange-12.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-12.c?ref=e6df850973c9cc688cad4d9bff4c1260c028025d", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-require-effective-target size32plus } */\n+\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#define N 200\n+\n+int A[N][N], B[N][N], C[N][N];\n+\n+static int __attribute__((noinline))\n+matmult (void)\n+{\n+  int i, j, k;\n+\n+  /* Loops J and K should be interchanged.  */\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      {\n+\tA[i][j] = 0;\n+\tfor (k = 0; k < N; k++)\n+\t  A[i][j] += B[i][k] * C[k][j];\n+      }\n+\n+  return A[0][0] + A[N-1][N-1];\n+}\n+\n+extern void abort ();\n+\n+int\n+main (void)\n+{\n+  int i, j, res;\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      {\n+\tA[i][j] = 0;\n+\tB[i][j] = i - j;\n+\tC[i][j] = i + j;\n+      }\n+\n+  res = matmult ();\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  if (res != 2626800)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */"}, {"sha": "36990ab40fde2867b0f3241dc0037d0293277247", "filename": "gcc/testsuite/gcc.dg/graphite/uns-interchange-14.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-14.c?ref=e6df850973c9cc688cad4d9bff4c1260c028025d", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-require-effective-target size32plus } */\n+\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#define N 200\n+\n+int A[N][N], B[N][N], C[N][N];\n+\n+static void __attribute__((noinline))\n+matmult (void)\n+{\n+  int i, j, k;\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      A[i][j] = 0;\n+\n+  /* Loops J and K should be interchanged.  */\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      for (k = 0; k < N; k++)\n+\tA[i][j] += B[i][k] * C[k][j];\n+}\n+\n+extern void abort ();\n+\n+int\n+main (void)\n+{\n+  int i, j, res = 0;\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      {\n+\tB[i][j] = j;\n+\tC[i][j] = i;\n+      }\n+\n+  matmult ();\n+\n+  for (i = 0; i < N; i++)\n+    res += A[i][i];\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  if (res != 529340000)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* PRE destroys the perfect nest and we can't cope with that yet.  */\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */"}, {"sha": "3ddb74f04072108a862cad6a35b99a7a608681be", "filename": "gcc/testsuite/gcc.dg/graphite/uns-interchange-15.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-15.c?ref=e6df850973c9cc688cad4d9bff4c1260c028025d", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-require-effective-target size32plus } */\n+\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#define NMAX 2000\n+\n+static int x[NMAX], a[NMAX][NMAX];\n+\n+static int __attribute__((noinline))\n+mvt (long N)\n+{\n+  int i,j;\n+\n+  /* These two loops should be interchanged.  */\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      x[i] += a[j][i];\n+\n+  return x[1];\n+}\n+\n+extern void abort ();\n+\n+int\n+main (void)\n+{\n+  int i, j, res;\n+\n+  for (i = 0; i < NMAX; i++)\n+    for (j = 0; j < NMAX; j++)\n+      a[i][j] = j;\n+\n+  for (i = 0; i < NMAX; i++)\n+    x[i] = i;\n+\n+  res = mvt (NMAX);\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  if (res != 2001)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* PRE destroys the perfect nest and we can't cope with that yet.  */\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */\n+"}, {"sha": "cfec1100eee0a1b1f6d4252f179a26f37d4414a3", "filename": "gcc/testsuite/gcc.dg/graphite/uns-interchange-9.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-9.c?ref=e6df850973c9cc688cad4d9bff4c1260c028025d", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-require-effective-target size32plus } */\n+\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#define N 111\n+#define M 111\n+\n+static int __attribute__((noinline))\n+foo (int *x)\n+{\n+  int i, j;\n+  int sum = 0;\n+\n+  for (j = 0; j < M; ++j)\n+    for (i = 0;  i < N; ++i)\n+      sum += x[M * i + j];\n+\n+  return sum;\n+}\n+\n+extern void abort ();\n+\n+int\n+main (void)\n+{\n+  int A[N*M];\n+  int i, res;\n+\n+  for (i = 0; i < N*M; i++)\n+    A[i] = 2;\n+\n+  res = foo (A);\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  if (res != 24642)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */"}, {"sha": "4b8f2646bef3dd69d474472166981f7e95464437", "filename": "gcc/testsuite/gcc.dg/graphite/uns-interchange-mvt.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-mvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6df850973c9cc688cad4d9bff4c1260c028025d/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-mvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Funs-interchange-mvt.c?ref=e6df850973c9cc688cad4d9bff4c1260c028025d", "patch": "@@ -0,0 +1,63 @@\n+/* { dg-require-effective-target size32plus } */\n+\n+#define DEBUG 0\n+#if DEBUG\n+#include <stdio.h>\n+#endif\n+\n+#define NMAX 2000\n+\n+static int x1[NMAX], x2[NMAX], a[NMAX][NMAX], y1[NMAX], y2[NMAX];\n+\n+static int __attribute__((noinline))\n+mvt (long N)\n+{\n+\n+  int i,j;\n+\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      x1[i] = x1[i] + a[i][j] * y1[j];\n+\n+  /* These two loops should be interchanged.  */\n+  for (i = 0; i < N; i++)\n+    for (j = 0; j < N; j++)\n+      x2[i] = x2[i] + a[j][i] * y2[j];\n+\n+  return x1[0] + x2[0];\n+}\n+\n+extern void abort ();\n+\n+int\n+main (void)\n+{\n+  int i, j, res;\n+\n+  for (i = 0; i < NMAX; i++)\n+    for (j = 0; j < NMAX; j++)\n+      a[i][j] = i + j;\n+\n+  for (i = 0; i < NMAX; i++)\n+    {\n+      x1[i] = 0;\n+      x2[i] = 2*i;\n+      y1[i] = 100 - i;\n+      y2[i] = i;\n+    }\n+\n+  res = mvt (NMAX);\n+\n+#if DEBUG\n+  fprintf (stderr, \"res = %d \\n\", res);\n+#endif\n+\n+  if (res != 199900000)\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* PRE destroys the perfect nest and we can't cope with that yet.  */\n+/* { dg-final { scan-tree-dump-times \"will be interchanged\" 1 \"graphite\" } } */\n+"}]}