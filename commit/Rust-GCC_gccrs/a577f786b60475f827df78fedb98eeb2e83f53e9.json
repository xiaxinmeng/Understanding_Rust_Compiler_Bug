{"sha": "a577f786b60475f827df78fedb98eeb2e83f53e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU3N2Y3ODZiNjA0NzVmODI3ZGY3OGZlZGI5OGVlYjJlODNmNTNlOQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-08-18T20:33:57Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-08-18T20:33:57Z"}, "message": "Implement the latest proposed resolution of LWG 2756.\n\n\t* include/std/optional (Optional_base(const _Tp&))\n\t(Optional_base(_Tp&&), using _Base::_Base): Remove.\n\t(optional(nullopt_t)): New.\n\t(optional(_Up&&)): Invoke base directly with in_place\n\trather than creating a temporary, add default template\n\targument, change constraints.\n\t(optional(const optional<_Up>&)): Invoke base directly\n\twith in_place, remove unnecessary constraints.\n\t(optional(optional<_Up>&& __t)): Likewise.\n\t(optional(in_place_t, _Args&&...)): New.\n\t(optional(in_place_t, initializer_list<_Up>, _Args&&...)): Likewise.\n\t(operator=(_Up&&)): Add default template argument, change constraints.\n\t(operator=(const optional<_Up>&)): Put is_same first in the\n\tconstraints.\n\t(operator=(optional<_Up>&&)): Likewise.\n\t* testsuite/20_util/optional/assignment/5.cc: Add a test to\n\tverify assignment from something that can't be perfect-forwarded.\n\t* testsuite/20_util/optional/cons/value.cc: Add tests to verify\n\tthat a nested optional is disengaged when constructed\n\tfrom a disengaged element type,\tand to verify that assignments\n\tfrom an engaged element type engage the optional.\n\nFrom-SVN: r239593", "tree": {"sha": "ced23a4340f17d7cbce9d65395db42f6d9c381c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ced23a4340f17d7cbce9d65395db42f6d9c381c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a577f786b60475f827df78fedb98eeb2e83f53e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a577f786b60475f827df78fedb98eeb2e83f53e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a577f786b60475f827df78fedb98eeb2e83f53e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a577f786b60475f827df78fedb98eeb2e83f53e9/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "197c757cb11681a6ff6df1491ebfde4f5a392627", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/197c757cb11681a6ff6df1491ebfde4f5a392627", "html_url": "https://github.com/Rust-GCC/gccrs/commit/197c757cb11681a6ff6df1491ebfde4f5a392627"}], "stats": {"total": 160, "additions": 101, "deletions": 59}, "files": [{"sha": "e8eebd39e7eb1997ad72aebf702e19b08cbe8692", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a577f786b60475f827df78fedb98eeb2e83f53e9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a577f786b60475f827df78fedb98eeb2e83f53e9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a577f786b60475f827df78fedb98eeb2e83f53e9", "patch": "@@ -1,3 +1,28 @@\n+2016-08-18  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement the latest proposed resolution of LWG 2756.\n+\t* include/std/optional (Optional_base(const _Tp&))\n+\t(Optional_base(_Tp&&), using _Base::_Base): Remove.\n+\t(optional(nullopt_t)): New.\n+\t(optional(_Up&&)): Invoke base directly with in_place\n+\trather than creating a temporary, add default template\n+\targument, change constraints.\n+\t(optional(const optional<_Up>&)): Invoke base directly\n+\twith in_place, remove unnecessary constraints.\n+\t(optional(optional<_Up>&& __t)): Likewise.\n+\t(optional(in_place_t, _Args&&...)): New.\n+\t(optional(in_place_t, initializer_list<_Up>, _Args&&...)): Likewise.\n+\t(operator=(_Up&&)): Add default template argument, change constraints.\n+\t(operator=(const optional<_Up>&)): Put is_same first in the\n+\tconstraints.\n+\t(operator=(optional<_Up>&&)): Likewise.\n+\t* testsuite/20_util/optional/assignment/5.cc: Add a test to\n+\tverify assignment from something that can't be perfect-forwarded.\n+\t* testsuite/20_util/optional/cons/value.cc: Add tests to verify\n+\tthat a nested optional is disengaged when constructed\n+\tfrom a disengaged element type,\tand to verify that assignments\n+\tfrom an engaged element type engage the optional.\n+\n 2016-08-18  Tim Shen  <timshen@google.com>\n \n \tImplement <variant>"}, {"sha": "2ff75eae638735899c15fdc13e5afeef2d3ab0e8", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 44, "deletions": 58, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a577f786b60475f827df78fedb98eeb2e83f53e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a577f786b60475f827df78fedb98eeb2e83f53e9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=a577f786b60475f827df78fedb98eeb2e83f53e9", "patch": "@@ -175,12 +175,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _Optional_base{} { }\n \n       // Constructors for engaged optionals.\n-      constexpr _Optional_base(const _Tp& __t)\n-      : _M_payload(__t), _M_engaged(true) { }\n-\n-      constexpr _Optional_base(_Tp&& __t)\n-      : _M_payload(std::move(__t)), _M_engaged(true) { }\n-\n       template<typename... _Args>\n         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)\n         : _M_payload(std::forward<_Args>(__args)...), _M_engaged(true) { }\n@@ -317,12 +311,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr _Optional_base(nullopt_t) noexcept\n       : _Optional_base{} { }\n \n-      constexpr _Optional_base(const _Tp& __t)\n-      : _M_payload(__t), _M_engaged(true) { }\n-\n-      constexpr _Optional_base(_Tp&& __t)\n-      : _M_payload(std::move(__t)), _M_engaged(true) { }\n-\n       template<typename... _Args>\n         constexpr explicit _Optional_base(in_place_t, _Args&&... __args)\n         : _M_payload(std::forward<_Args>(__args)...), _M_engaged(true) { }\n@@ -478,80 +466,79 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     public:\n       using value_type = _Tp;\n \n-      // _Optional_base has the responsibility for construction.\n-      using _Base::_Base;\n-\n       constexpr optional() = default;\n+\n+      constexpr optional(nullopt_t) noexcept\n+\t: _Base(nullopt) { }\n+\n       // Converting constructors for engaged optionals.\n-      template <typename _Up,\n+      template <typename _Up = _Tp,\n                 enable_if_t<__and_<\n-\t\t\t      __not_<is_same<_Tp, _Up>>,\n+\t\t\t      __not_<__is_optional<decay_t<_Up>>>,\n \t\t\t      is_constructible<_Tp, _Up&&>,\n \t\t\t      is_convertible<_Up&&, _Tp>\n \t\t\t      >::value, bool> = true>\n       constexpr optional(_Up&& __t)\n-        : _Base(_Tp(std::forward<_Up>(__t))) { }\n+        : _Base(std::in_place, std::forward<_Up>(__t)) { }\n \n-      template <typename _Up,\n+      template <typename _Up = _Tp,\n                 enable_if_t<__and_<\n-\t\t\t    __not_<is_same<_Tp, _Up>>,\n-\t\t\t    is_constructible<_Tp, _Up&&>,\n-\t\t\t    __not_<is_convertible<_Up&&, _Tp>>\n-\t\t\t    >::value, bool> = false>\n+\t\t\t      __not_<__is_optional<decay_t<_Up>>>,\n+\t\t\t      is_constructible<_Tp, _Up&&>,\n+\t\t\t      __not_<is_convertible<_Up&&, _Tp>>\n+\t\t\t      >::value, bool> = false>\n       explicit constexpr optional(_Up&& __t)\n-        : _Base(_Tp(std::forward<_Up>(__t))) { }\n+        : _Base(std::in_place, std::forward<_Up>(__t)) { }\n \n       template <typename _Up,\n                 enable_if_t<__and_<\n \t\t\t    __not_<is_same<_Tp, _Up>>,\n-\t\t\t    __not_<is_constructible<\n-\t\t\t      _Tp, const optional<_Up>&>>,\n-\t\t\t    __not_<is_convertible<\n-\t\t\t      const optional<_Up>&, _Tp>>,\n \t\t\t    is_constructible<_Tp, const _Up&>,\n \t\t\t    is_convertible<const _Up&, _Tp>\n \t\t\t    >::value, bool> = true>\n       constexpr optional(const optional<_Up>& __t)\n-        : _Base(__t ? optional<_Tp>(*__t) : optional<_Tp>()) { }\n+        : _Base(__t ? _Base(std::in_place, *__t) : _Base()) { }\n \n       template <typename _Up,\n                  enable_if_t<__and_<\n \t\t\t       __not_<is_same<_Tp, _Up>>,\n-\t\t\t       __not_<is_constructible<\n-\t\t\t\t\t_Tp, const optional<_Up>&>>,\n-\t\t\t       __not_<is_convertible<\n-\t\t\t\t const optional<_Up>&, _Tp>>,\n \t\t\t       is_constructible<_Tp, const _Up&>,\n \t\t\t       __not_<is_convertible<const _Up&, _Tp>>\n \t\t\t       >::value, bool> = false>\n       explicit constexpr optional(const optional<_Up>& __t)\n-        : _Base(__t ? optional<_Tp>(*__t) : optional<_Tp>()) { }\n+        : _Base(__t ? _Base(std::in_place, *__t) : _Base()) { }\n \n       template <typename _Up,\n                 enable_if_t<__and_<\n \t\t\t      __not_<is_same<_Tp, _Up>>,\n-\t\t\t      __not_<is_constructible<\n-\t\t\t\t       _Tp, optional<_Up>&&>>,\n-\t\t\t      __not_<is_convertible<\n-\t\t\t\t       optional<_Up>&&, _Tp>>,\n \t\t\t      is_constructible<_Tp, _Up&&>,\n \t\t\t      is_convertible<_Up&&, _Tp>\n \t\t\t      >::value, bool> = true>\n       constexpr optional(optional<_Up>&& __t)\n-        : _Base(__t ? optional<_Tp>(std::move(*__t)) : optional<_Tp>()) { }\n+        : _Base(__t ? _Base(std::in_place, std::move(*__t)) : _Base()) { }\n \n       template <typename _Up,\n                 enable_if_t<__and_<\n \t\t\t    __not_<is_same<_Tp, _Up>>,\n-\t\t\t    __not_<is_constructible<\n-\t\t\t\t     _Tp, optional<_Up>&&>>,\n-\t\t\t    __not_<is_convertible<\n-\t\t\t\t     optional<_Up>&&, _Tp>>,\n \t\t\t    is_constructible<_Tp, _Up&&>,\n \t\t\t    __not_<is_convertible<_Up&&, _Tp>>\n \t\t\t    >::value, bool> = false>\n       explicit constexpr optional(optional<_Up>&& __t)\n-        : _Base(__t ? optional<_Tp>(std::move(*__t)) : optional<_Tp>()) { }\n+        : _Base(__t ? _Base(std::in_place, std::move(*__t)) : _Base()) { }\n+\n+      template<typename... _Args>\n+      explicit constexpr optional(in_place_t, _Args&&... __args)\n+        : _Base(std::in_place, std::forward<_Args>(__args)...) { }\n+\n+      template<typename _Up, typename... _Args,\n+               enable_if_t<is_constructible<_Tp,\n+                                            initializer_list<_Up>&,\n+                                            _Args&&...>::value,\n+                           int>...>\n+      explicit constexpr optional(in_place_t,\n+\t\t\t\t  initializer_list<_Up> __il,\n+\t\t\t\t  _Args&&... __args)\n+        : _Base(std::in_place, __il, std::forward<_Args>(__args)...) { }\n \n       // Assignment operators.\n       optional&\n@@ -561,13 +548,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         return *this;\n       }\n \n-      template<typename _Up,\n+      template<typename _Up = _Tp,\n                enable_if_t<__and_<\n-\t\t\t   is_constructible<_Tp, _Up>,\n-\t\t\t   is_assignable<_Tp&, _Up>,\n-\t\t\t   __not_<is_same<_Up, nullopt_t>>,\n-\t\t\t   __not_<__is_optional<_Up>>>::value,\n-\t\t\t bool> = true>\n+\t\t\t     __not_<__is_optional<decay_t<_Up>>>,\n+\t\t\t     is_constructible<_Tp, _Up>,\n+\t\t\t     is_assignable<_Tp&, _Up>>::value,\n+\t\t\t   bool> = true>\n         optional&\n         operator=(_Up&& __u)\n         {\n@@ -581,10 +567,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Up,\n                enable_if_t<__and_<\n-\t\t           is_constructible<_Tp, _Up>,\n-\t\t           is_assignable<_Tp&, _Up>,\n-\t\t           __not_<is_same<_Tp, _Up>>>::value,\n-\t\t\t bool> = true>\n+\t\t\t     __not_<is_same<_Tp, _Up>>,\n+\t\t\t     is_constructible<_Tp, _Up>,\n+\t\t\t     is_assignable<_Tp&, _Up>>::value,\n+\t\t\t   bool> = true>\n         optional&\n         operator=(const optional<_Up>& __u)\n         {\n@@ -604,10 +590,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Up,\n \t       enable_if_t<__and_<\n-\t\t\t   is_constructible<_Tp, _Up>,\n-\t\t\t   is_assignable<_Tp&, _Up>,\n-\t\t\t   __not_<is_same<_Tp, _Up>>>::value,\n-\t\t\t bool> = true>\n+\t\t\t     __not_<is_same<_Tp, _Up>>,\n+\t\t\t     is_constructible<_Tp, _Up>,\n+\t\t\t     is_assignable<_Tp&, _Up>>::value,\n+\t\t\t   bool> = true>\n         optional&\n         operator=(optional<_Up>&& __u)\n         {"}, {"sha": "d1a75b49ac79b1943bb7ff112a483b3534aec413", "filename": "libstdc++-v3/testsuite/20_util/optional/assignment/5.cc", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a577f786b60475f827df78fedb98eeb2e83f53e9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fassignment%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a577f786b60475f827df78fedb98eeb2e83f53e9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fassignment%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fassignment%2F5.cc?ref=a577f786b60475f827df78fedb98eeb2e83f53e9", "patch": "@@ -19,6 +19,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <optional>\n+#include <vector>\n #include <testsuite_hooks.h>\n \n int counter = 0;\n@@ -61,6 +62,14 @@ int main()\n     o = {};\n     VERIFY( !o );\n   }\n-\n+  {\n+    std::optional<std::vector<int>> ovi{{1, 2, 3}};\n+    VERIFY(ovi->size() == 3);\n+    VERIFY((*ovi)[0] == 1 && (*ovi)[1] == 2 && (*ovi)[2] == 3);\n+    ovi = {4, 5, 6, 7};\n+    VERIFY(ovi->size() == 4);\n+    VERIFY((*ovi)[0] == 4 && (*ovi)[1] == 5 &&\n+\t   (*ovi)[2] == 6 && (*ovi)[3] == 7);\n+  }\n   VERIFY( counter == 0 );\n }"}, {"sha": "6a2d8716aee42e0b1b05db2134d1e026c0446ea3", "filename": "libstdc++-v3/testsuite/20_util/optional/cons/value.cc", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a577f786b60475f827df78fedb98eeb2e83f53e9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a577f786b60475f827df78fedb98eeb2e83f53e9/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2Fvalue.cc?ref=a577f786b60475f827df78fedb98eeb2e83f53e9", "patch": "@@ -255,4 +255,26 @@ int main()\n     std::optional<X> ox4;\n     ox4 = oi;\n   }\n+  {\n+    std::optional<std::optional<int>> ooi = std::optional<int>();\n+    VERIFY(!bool(ooi));\n+    ooi = std::optional<int>();\n+    VERIFY(!bool(ooi));\n+    ooi = std::optional<int>(42);\n+    VERIFY(bool(ooi));\n+    VERIFY(bool(*ooi));\n+    std::optional<std::optional<int>> ooi2 = std::optional<short>();\n+    VERIFY(!bool(ooi2));\n+    ooi2 = std::optional<short>();\n+    VERIFY(!bool(ooi2));\n+    ooi2 = std::optional<short>(6);\n+    VERIFY(bool(ooi2));\n+    VERIFY(bool(*ooi2));\n+    std::optional<std::optional<int>> ooi3 = std::optional<int>(42);\n+    VERIFY(bool(ooi3));\n+    VERIFY(bool(*ooi3));\n+    std::optional<std::optional<int>> ooi4 = std::optional<short>(6);\n+    VERIFY(bool(ooi4));\n+    VERIFY(bool(*ooi4));\n+  }\n }"}]}