{"sha": "3eae54ca6e8c32569def0478d351d217d33d0ae6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2VhZTU0Y2E2ZThjMzI1NjlkZWYwNDc4ZDM1MWQyMTdkMzNkMGFlNg==", "commit": {"author": {"name": "Janis Johnson", "email": "janisjo@codesourcery.com", "date": "2012-06-12T20:25:16Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2012-06-12T20:25:16Z"}, "message": "20031223-1.c: Add comments to check for multiple messages reported for one line of source code.\n\n\t* gcc.dg/20031223-1.c: Add comments to check for multiple\n\tmessages reported for one line of source code.\n\t* gcc.dg/Wconversion-integer.c: Likewise.\n\t* gcc.dg/Wfatal-2.c: Likewise.\n\t* gcc.dg/Wfatal.c: Likewise.\n\t* gcc.dg/Wobjsize-1.c: Likewise.\n\t* gcc.dg/c99-vla-jump-1.c: Likewise.\n\t* gcc.dg/c99-vla-jump-2.c: Likewise.\n\t* gcc.dg/c99-vla-jump-3.c: Likewise.\n\t* gcc.dg/c99-vla-jump-4.c: Likewise.\n\t* gcc.dg/c99-vla-jump-5.c: Likewise.\n\t* gcc.dg/decl-9.c: Likewise.\n\t* gcc.dg/declspec-10.c: Likewise.\n\t* gcc.dg/declspec-18.c: Likewise.\n\t* gcc.dg/mtune.c: Likewise.\n\t* gcc.dg/parser-pr28152-2.c: Likewise.\n\t* gcc.dg/parser-pr28152.c: Likewise.\n\t* gcc.dg/pr14475.c: Likewise.\n\t* gcc.dg/pr27953.c: Likewise.\n\t* gcc.dg/pr28322-3.c: Likewise.\n\t* gcc.dg/pr30457.c: Likewise.\n\t* gcc.dg/pr30551-2.c: Likewise.\n\t* gcc.dg/pr30551-3.c: Likewise.\n\t* gcc.dg/pr30551-4.c: Likewise.\n\t* gcc.dg/pr30551-5.c: Likewise.\n\t* gcc.dg/pr30551-6.c: Likewise.\n\t* gcc.dg/pr30551.c: Likewise.\n\t* gcc.dg/pr45461.c: Likewise.\n\t* gcc.dg/pr48552-1.c: Likewise.\n\t* gcc.dg/pr48552-2.c: Likewise.\n\t* gcc.dg/redecl-1.c: Likewise.\n\t* gcc.dg/transparent-union-3.c: Likewise.\n\t* gcc.dg/utf-dflt.c: Likewise.\n\t* gcc.dg/utf-dflt2.c: Likewise.\n\t* gcc.dg/vla-8.c: Likewise.\n\t* gcc.dg/vla-init-1.c: Likewise.\n\t* gcc.dg/wtr-int-type-1.c: Likewise.\n\nFrom-SVN: r188478", "tree": {"sha": "dddf89b40ff1fbb4dfc8b172144a84495e1a510b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dddf89b40ff1fbb4dfc8b172144a84495e1a510b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3eae54ca6e8c32569def0478d351d217d33d0ae6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eae54ca6e8c32569def0478d351d217d33d0ae6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eae54ca6e8c32569def0478d351d217d33d0ae6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eae54ca6e8c32569def0478d351d217d33d0ae6/comments", "author": null, "committer": null, "parents": [{"sha": "526d4b72795c51339c5d6d632b915e48f61b5642", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/526d4b72795c51339c5d6d632b915e48f61b5642", "html_url": "https://github.com/Rust-GCC/gccrs/commit/526d4b72795c51339c5d6d632b915e48f61b5642"}], "stats": {"total": 316, "additions": 177, "deletions": 139}, "files": [{"sha": "6e9fbd93cf1a598fca14a135f0b59fdecb6df2f6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -1,5 +1,43 @@\n 2012-06-12  Janis Johnson  <janisjo@codesourcery.com>\n \n+\t* gcc.dg/20031223-1.c: Add comments to check for multiple\n+\tmessages reported for one line of source code.\n+\t* gcc.dg/Wconversion-integer.c: Likewise.\n+\t* gcc.dg/Wfatal-2.c: Likewise.\n+\t* gcc.dg/Wfatal.c: Likewise.\n+\t* gcc.dg/Wobjsize-1.c: Likewise.\n+\t* gcc.dg/c99-vla-jump-1.c: Likewise.\n+\t* gcc.dg/c99-vla-jump-2.c: Likewise.\n+\t* gcc.dg/c99-vla-jump-3.c: Likewise.\n+\t* gcc.dg/c99-vla-jump-4.c: Likewise.\n+\t* gcc.dg/c99-vla-jump-5.c: Likewise.\n+\t* gcc.dg/decl-9.c: Likewise.\n+\t* gcc.dg/declspec-10.c: Likewise.\n+\t* gcc.dg/declspec-18.c: Likewise.\n+\t* gcc.dg/mtune.c: Likewise.\n+\t* gcc.dg/parser-pr28152-2.c: Likewise.\n+\t* gcc.dg/parser-pr28152.c: Likewise.\n+\t* gcc.dg/pr14475.c: Likewise.\n+\t* gcc.dg/pr27953.c: Likewise.\n+\t* gcc.dg/pr28322-3.c: Likewise.\n+\t* gcc.dg/pr30457.c: Likewise.\n+\t* gcc.dg/pr30551-2.c: Likewise.\n+\t* gcc.dg/pr30551-3.c: Likewise.\n+\t* gcc.dg/pr30551-4.c: Likewise.\n+\t* gcc.dg/pr30551-5.c: Likewise.\n+\t* gcc.dg/pr30551-6.c: Likewise.\n+\t* gcc.dg/pr30551.c: Likewise.\n+\t* gcc.dg/pr45461.c: Likewise.\n+\t* gcc.dg/pr48552-1.c: Likewise.\n+\t* gcc.dg/pr48552-2.c: Likewise.\n+\t* gcc.dg/redecl-1.c: Likewise.\n+\t* gcc.dg/transparent-union-3.c: Likewise.\n+\t* gcc.dg/utf-dflt.c: Likewise.\n+\t* gcc.dg/utf-dflt2.c: Likewise.\n+\t* gcc.dg/vla-8.c: Likewise.\n+\t* gcc.dg/vla-init-1.c: Likewise.\n+\t* gcc.dg/wtr-int-type-1.c: Likewise.\n+\n \t* c-c++-common/raw-string-3.c: Add comments to checks for multiple\n \tmessages reported for for one line of source code.\n \t* c-c++-common/raw-string-5.c: Likewise."}, {"sha": "353397eff9088fb68bbd1985cbfc9157a634a2a4", "filename": "gcc/testsuite/gcc.dg/20031223-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2F20031223-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2F20031223-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20031223-1.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -7,7 +7,7 @@\n \n void f ()\n {\n- l: int; /* { dg-error \"a label can only be part of a statement and a declaration is not a statement\" } */\n- /* { dg-warning \"useless type name in empty declaration\" \"\" { target *-*-* } 10 } */\n- /* { dg-error \"label at end of compound statement\" \"\" { target *-*-* } 10 } */\n+ l: int; /* { dg-error \"a label can only be part of a statement and a declaration is not a statement\" \"not stmt\" } */\n+ /* { dg-warning \"useless type name in empty declaration\" \"type name\" { target *-*-* } 10 } */\n+ /* { dg-error \"label at end of compound statement\" \"label\" { target *-*-* } 10 } */\n }"}, {"sha": "4479349e1ffb00ed1a835fba38a2f8c0dfcc3776", "filename": "gcc/testsuite/gcc.dg/Wconversion-integer.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-integer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-integer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWconversion-integer.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -40,10 +40,10 @@ void h (int x)\n   fuc ('A');\n   uc = 'A';\n \n-  uc = x ? 1U : -1; /* { dg-warning \" conversion\" } */\n-  /* { dg-warning \"negative integer implicitly converted to unsigned type\" \"\" { target *-*-* } 43 } */\n-  uc = x ? SCHAR_MIN : 1U; /* { dg-warning \" conversion\" } */\n-  /* { dg-warning \"negative integer implicitly converted to unsigned type\" \"\" { target *-*-* } 45 } */\n+  uc = x ? 1U : -1; /* { dg-warning \" conversion\" \"conversion\" } */\n+  /* { dg-warning \"negative integer implicitly converted to unsigned type\" \"implicit\" { target *-*-* } 43 } */\n+  uc = x ? SCHAR_MIN : 1U; /* { dg-warning \" conversion\" \"conversion\" } */\n+  /* { dg-warning \"negative integer implicitly converted to unsigned type\" \"implicit\" { target *-*-* } 45 } */\n   uc = x ? 1 : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n   uc = x ? SCHAR_MIN : 1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */\n   ui = x ? 1U : -1; /* { dg-warning \"negative integer implicitly converted to unsigned type\" } */"}, {"sha": "796fc8be416a6372d657de2a443435aa2814c8f4", "filename": "gcc/testsuite/gcc.dg/Wfatal-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2FWfatal-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2FWfatal-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWfatal-2.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -5,5 +5,5 @@\n int i = INT_MAX + 1; /* { dg-error \"integer overflow in expression\" } */\n int k = 1 / 0; \n int j = INT_MIN - 1;\n-/* { dg-message \"being treated as errors\" \"\" { target *-*-* } 0 } */\n-/* { dg-message \"terminated due to -Wfatal-errors\" \"\" { target *-*-* } 0 } */\n+/* { dg-message \"being treated as errors\" \"treated as errors\" { target *-*-* } 0 } */\n+/* { dg-message \"terminated due to -Wfatal-errors\" \"terminated\" { target *-*-* } 0 } */"}, {"sha": "6438d54e135dd3a8a80504f2339a675d27ef4be4", "filename": "gcc/testsuite/gcc.dg/Wfatal.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2FWfatal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2FWfatal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWfatal.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -5,8 +5,8 @@\n int i = INT_MAX + 1; /* { dg-warning \"integer overflow in expression\" } */\n int k = 1 / 0; /* { dg-error \"division by zero\" } */\n int j = INT_MIN - 1;\n-/* { dg-message \"some warnings being treated as errors\" \"\" {target \"*-*-*\"} 0 } */\n-/* { dg-message \"terminated due to -Wfatal-errors\" \"\" { target *-*-* } 0 } */\n+/* { dg-message \"some warnings being treated as errors\" \"treated as errors\" {target \"*-*-*\"} 0 } */\n+/* { dg-message \"terminated due to -Wfatal-errors\" \"terminated\" { target *-*-* } 0 } */\n \n \n "}, {"sha": "291cfb9be91889a220f99e164696f4f84857bedb", "filename": "gcc/testsuite/gcc.dg/Wobjsize-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2FWobjsize-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2FWobjsize-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWobjsize-1.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -11,5 +11,5 @@ int main(int argc, char **argv)\n }\n \n /* { dg-warning \"will always overflow destination buffer\" \"\" { target *-*-* } 6 } */\n-/* { dg-message \"file included\" \"\" { target *-*-* } 0 } */\n-/* { dg-message \"inlined from\" \"\" { target *-*-* } 0 } */\n+/* { dg-message \"file included\" \"included\" { target *-*-* } 0 } */\n+/* { dg-message \"inlined from\" \"inlined\" { target *-*-* } 0 } */"}, {"sha": "0747475e282d704ac166d14564ad029840ef4353", "filename": "gcc/testsuite/gcc.dg/c99-vla-jump-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-1.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -305,5 +305,5 @@ void fa287 (int n) { { int b[n]; { int c[n]; 0;} { int d[n]; 0;} ; int e[n]; 0;}\n void fa288 (int n) { { int b[n]; { int c[n]; 0;} { int d[n]; 0;} ; int e[n]; 0;}; { int f[n]; { int g[n]; 0;}; { int h[n]; 0;}; ; int i[n]; 0;}; ; int j[n]; 0;a: goto a;  }\n \n /* Match extra informative notes.  */\n-/* { dg-message \"note: label '\\[^\\n'\\]*' defined here\" \"note: expected\" { target *-*-* } 0 } */\n-/* { dg-message \"note: '\\[^\\n'\\]*' declared here\" \"note: expected\" { target *-*-* } 0 } */\n+/* { dg-message \"note: label '\\[^\\n'\\]*' defined here\" \"note: defined\" { target *-*-* } 0 } */\n+/* { dg-message \"note: '\\[^\\n'\\]*' declared here\" \"note: declared\" { target *-*-* } 0 } */"}, {"sha": "afea116924fe63a219447eec881b16701144f108", "filename": "gcc/testsuite/gcc.dg/c99-vla-jump-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-2.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -305,5 +305,5 @@ void fb287 (int n) { P0A:goto P0A;{ int b[n]; P01A:goto P01A;{ int c[n]; P012A:g\n void fb288 (int n) { P0A:goto P0A;{ int b[n]; P01A:goto P01A;{ int c[n]; P012A:goto P012A;0;} P01B:goto P01B;{ int d[n]; P013A:goto P013A;0;} P01C:goto P01C;; int e[n]; P014A:goto P014A;0;}; P0B:goto P0B;{ int f[n]; P02A:goto P02A;{ int g[n]; P024A:goto P024A;0;}; P02B:goto P02B;{ int h[n]; P025A:goto P025A;0;}; P02C:goto P02C;; int i[n]; P026A:goto P026A;0;}; P0C:goto P0C;; int j[n]; P03A:goto P03A;0;a: goto a; P03B:goto P03B; }\n \n /* Match extra informative notes.  */\n-/* { dg-message \"note: label '\\[^\\n'\\]*' defined here\" \"note: expected\" { target *-*-* } 0 } */\n-/* { dg-message \"note: '\\[^\\n'\\]*' declared here\" \"note: expected\" { target *-*-* } 0 } */\n+/* { dg-message \"note: label '\\[^\\n'\\]*' defined here\" \"note: defined\" { target *-*-* } 0 } */\n+/* { dg-message \"note: '\\[^\\n'\\]*' declared here\" \"note: declared\" { target *-*-* } 0 } */"}, {"sha": "f7cb6ac63fbb0fd9868417a15d6dc75e68593cd2", "filename": "gcc/testsuite/gcc.dg/c99-vla-jump-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-3.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -305,5 +305,5 @@ void fc287 (int n) { { typedef int (*b)[n]; { typedef int (*c)[n]; 0;} { typedef\n void fc288 (int n) { { typedef int (*b)[n]; { typedef int (*c)[n]; 0;} { typedef int (*d)[n]; 0;} ; typedef int (*e)[n]; 0;}; { typedef int (*f)[n]; { typedef int (*g)[n]; 0;}; { typedef int (*h)[n]; 0;}; ; typedef int (*i)[n]; 0;}; ; typedef int (*j)[n]; 0;a: goto a;  }\n \n /* Match extra informative notes.  */\n-/* { dg-message \"note: label '\\[^\\n'\\]*' defined here\" \"note: expected\" { target *-*-* } 0 } */\n-/* { dg-message \"note: '\\[^\\n'\\]*' declared here\" \"note: expected\" { target *-*-* } 0 } */\n+/* { dg-message \"note: label '\\[^\\n'\\]*' defined here\" \"note: defined\" { target *-*-* } 0 } */\n+/* { dg-message \"note: '\\[^\\n'\\]*' declared here\" \"note: declared\" { target *-*-* } 0 } */"}, {"sha": "6f0060e664a0b0da76a853ed891e26d68f54ea80", "filename": "gcc/testsuite/gcc.dg/c99-vla-jump-4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-4.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -305,5 +305,5 @@ void fd287 (int n) { P0A:goto P0A;{ typedef int (*b)[n]; P01A:goto P01A;{ typede\n void fd288 (int n) { P0A:goto P0A;{ typedef int (*b)[n]; P01A:goto P01A;{ typedef int (*c)[n]; P012A:goto P012A;0;} P01B:goto P01B;{ typedef int (*d)[n]; P013A:goto P013A;0;} P01C:goto P01C;; typedef int (*e)[n]; P014A:goto P014A;0;}; P0B:goto P0B;{ typedef int (*f)[n]; P02A:goto P02A;{ typedef int (*g)[n]; P024A:goto P024A;0;}; P02B:goto P02B;{ typedef int (*h)[n]; P025A:goto P025A;0;}; P02C:goto P02C;; typedef int (*i)[n]; P026A:goto P026A;0;}; P0C:goto P0C;; typedef int (*j)[n]; P03A:goto P03A;0;a: goto a; P03B:goto P03B; }\n \n /* Match extra informative notes.  */\n-/* { dg-message \"note: label '\\[^\\n'\\]*' defined here\" \"note: expected\" { target *-*-* } 0 } */\n-/* { dg-message \"note: '\\[^\\n'\\]*' declared here\" \"note: expected\" { target *-*-* } 0 } */\n+/* { dg-message \"note: label '\\[^\\n'\\]*' defined here\" \"note: defined\" { target *-*-* } 0 } */\n+/* { dg-message \"note: '\\[^\\n'\\]*' declared here\" \"note: declared\" { target *-*-* } 0 } */"}, {"sha": "fc5e04d1b9ea7877a6a69cabecab71454eb1ae37", "filename": "gcc/testsuite/gcc.dg/c99-vla-jump-5.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc99-vla-jump-5.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -30,5 +30,5 @@ f (int a, int b)\n }\n \n /* Match extra informative notes.  */\n-/* { dg-message \"note: switch starts here\" \"note: expected\" { target *-*-* } 0 } */\n-/* { dg-message \"note: '\\[^\\n'\\]*' declared here\" \"note: expected\" { target *-*-* } 0 } */\n+/* { dg-message \"note: switch starts here\" \"note: starts\" { target *-*-* } 0 } */\n+/* { dg-message \"note: '\\[^\\n'\\]*' declared here\" \"note: declared\" { target *-*-* } 0 } */"}, {"sha": "83793a9a525f27946f74fc78021e873454a55514", "filename": "gcc/testsuite/gcc.dg/decl-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdecl-9.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -21,7 +21,7 @@ int f2()\n {\n b: a: ; /* { dg-bogus \"a label can only be part of a statement\" } */\n c: d e; /* { dg-error \"a label can only be part of a statement\" } */\n-/* { dg-error \"unknown type name 'd'\" \"\" { target *-*-* } 23 } */\n+/* { dg-error \"unknown type name 'd'\" \"unknown type name\" { target *-*-* } 23 } */\n    ;\n }\n "}, {"sha": "e6572bd82b314ff53ea2e0299aa56acc274eba20", "filename": "gcc/testsuite/gcc.dg/declspec-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-10.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -44,4 +44,4 @@ void i (void) { auto void y (void) {} } /* { dg-warning \"ISO C forbids nested fu\n \n inline int main (void) { return 0; } /* { dg-warning \"cannot inline function 'main'\" } */\n \n-/* { dg-message \"error: register name not specified for 'y'\" \"\" { target *-*-* } 19 } */\n+/* { dg-message \"error: register name not specified for 'y'\" \"not specified\" { target *-*-* } 19 } */"}, {"sha": "dd4c262d4cd5b15a7e8d7968bee9dc37e59af74f", "filename": "gcc/testsuite/gcc.dg/declspec-18.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-18.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -5,7 +5,7 @@ static t1 *a;           /* { dg-error \"unknown type name 't1'\" } */\n \n int z;                  /* { dg-message \"previous declaration of 'z'\" } */\n typedef t2 *z;          /* { dg-error \"unknown type name 't2'\" } */\n-/* { dg-error \"'z' redeclared \" \"\" { target *-*-* } 7 } */\n+/* { dg-error \"'z' redeclared \" \"redeclared\" { target *-*-* } 7 } */\n \n extern t3 p1(void);     /* { dg-error \"unknown type name 't3'\" } */\n int p2(const t4 x);     /* { dg-error \"unknown type name 't4'\" } */\n@@ -23,51 +23,51 @@ struct s {\n };\n \n typeof (z) c1;\n-typeof (x1) c2;         /* { dg-error \"undeclared\" } */\n+typeof (x1) c2;         /* { dg-error \"undeclared\" \"undeclared\" } */\n typeof (const t11) c3;  /* { dg-error \"unknown type name 't11'\" } */\n-typeof (t12 *) c3;      /* { dg-error \"unknown type name 't12'\" \"\" { xfail *-*-* } } */\n-/* { dg-bogus \"unknown type name 'x1'\" \"\" { target *-*-* } 26 } */\n-/* { dg-bogus \"undeclared\" \"\" { xfail *-*-* } 28 } */\n-/* { dg-bogus \"expected expression before\" \"\" { xfail *-*-* } 28 } */\n+typeof (t12 *) c3;      /* { dg-error \"unknown type name 't12'\" \"t12\" { xfail *-*-* } } */\n+/* { dg-bogus \"unknown type name 'x1'\" unknown\"\" { target *-*-* } 26 } */\n+/* { dg-bogus \"undeclared\" \"undeclared\" { xfail *-*-* } 28 } */\n+/* { dg-bogus \"expected expression before\" \"expected\" { xfail *-*-* } 28 } */\n \n int recover1;\n \n int s0 = sizeof (z);\n-int s1 = sizeof (x2);          /* { dg-error \"undeclared\" } */\n+int s1 = sizeof (x2);          /* { dg-error \"undeclared\" \"undeclared\" } */\n int s2 = sizeof (const t13);   /* { dg-error \"unknown type name 't13'\" } */\n-int s3 = sizeof (t14 *);       /* { dg-error \"unknown type name 't14'\" \"\" { xfail *-*-* } } */\n+int s3 = sizeof (t14 *);       /* { dg-error \"unknown type name 't14'\" \"t14\" { xfail *-*-* } } */\n \n int recover2;\n \n-/* { dg-bogus \"unknown type name 'x2'\" \"\" { target *-*-* } 36 } */\n-/* { dg-bogus \"undeclared\" \"\" { xfail *-*-* } 38 } */\n-/* { dg-bogus \"expected expression before\" \"\" { xfail *-*-* } 38 } */\n+/* { dg-bogus \"unknown type name 'x2'\" \"unknown\" { target *-*-* } 36 } */\n+/* { dg-bogus \"undeclared\" \"undeclared\" { xfail *-*-* } 38 } */\n+/* { dg-bogus \"expected expression before\" \"expected\" { xfail *-*-* } 38 } */\n \n int a0 = __alignof__ (z);\n int a1 = __alignof__ (x3);          /* { dg-error \"undeclared\" } */\n int a2 = __alignof__ (const t15);   /* { dg-error \"unknown type name 't15'\" } */\n-int a3 = __alignof__ (t16 *);       /* { dg-error \"unknown type name 't16'\" \"\" { xfail *-*-* } } */\n+int a3 = __alignof__ (t16 *);       /* { dg-error \"unknown type name 't16'\" \"t16\" { xfail *-*-* } } */\n \n int recover3;\n \n /* { dg-bogus \"unknown type name 'x3'\" \"\" { target *-*-* } 47 } */\n-/* { dg-bogus \"undeclared\" \"\" { xfail *-*-* } 49 } */\n-/* { dg-bogus \"expected expression before\" \"\" { xfail *-*-* } 49 } */\n+/* { dg-bogus \"undeclared\" \"undeclared\" { xfail *-*-* } 49 } */\n+/* { dg-bogus \"expected expression before\" \"expected\" { xfail *-*-* } 49 } */\n \n \n /* Cannot detect (undefd_type *) or (undefd_type (*) because it would\n    require 3 tokens of lookahead (same as above).  */\n \n const char *f1()\n {\n-  return (const t17) \"abc\";       /* { dg-error \"unknown type name 't17'\" } */\n-/* { dg-bogus \"expected\" \"\" { target *-*-* } 63 } */\n+  return (const t17) \"abc\";       /* { dg-error \"unknown type name 't17'\" \"t17\" } */\n+/* { dg-bogus \"expected\" \"expected\" { target *-*-* } 63 } */\n }\n \n const char *f2()\n {\n-  return (const t18 *) \"abc\";     /* { dg-error \"unknown type name 't18'\" } */\n-/* { dg-bogus \"expected\" \"\" { target *-*-* } 69 } */\n+  return (const t18 *) \"abc\";     /* { dg-error \"unknown type name 't18'\" \"t18\" } */\n+/* { dg-bogus \"expected\" \"expected\" { target *-*-* } 69 } */\n }\n \n \n@@ -76,15 +76,15 @@ const char *f2()\n \n void *f3(int x)\n {\n-  return (void *) ((void *(*)(t19)) f3);       /* { dg-error \"unknown type name 't19'\" } */\n-/* { dg-bogus \"expected\" \"\" { xfail *-*-* } 79 } */\n+  return (void *) ((void *(*)(t19)) f3);       /* { dg-error \"unknown type name 't19'\" \"t19\" } */\n+/* { dg-bogus \"expected\" \"expected\" { xfail *-*-* } 79 } */\n }\n \n const void *f4()\n {\n   return &((const t20){1});       /* { dg-error \"unknown type name 't20'\" } */\n-/* { dg-bogus \"return discards 'const'\" \"\" { target *-*-* } 85 } */\n-/* { dg-bogus \"expected\" \"\" { target *-*-* } 85 } */\n+/* { dg-bogus \"return discards 'const'\" \"discards\" { target *-*-* } 85 } */\n+/* { dg-bogus \"expected\" \"expected\" { target *-*-* } 85 } */\n }\n \n int f5(__builtin_va_list ap)\n@@ -95,6 +95,6 @@ int f5(__builtin_va_list ap)\n \n int f6(void)\n {\n-  return __builtin_offsetof (t23, field); /* { dg-error \"unknown type name 't23'\" } */\n-/* { dg-bogus \"request for member\" \"\" { target *-*-* } 98 } */\n+  return __builtin_offsetof (t23, field); /* { dg-error \"unknown type name 't23'\" \"t23\" } */\n+/* { dg-bogus \"request for member\" \"request\" { target *-*-* } 98 } */\n }"}, {"sha": "9195fd1ff161485b424051eaa9b129168da569da", "filename": "gcc/testsuite/gcc.dg/mtune.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fmtune.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fmtune.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmtune.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile } */\n /* { dg-skip-if \"\" { *-*-* } { \"-mtune=*\" } { \"\" } } */\n /* { dg-options \"-mtune=foo\" } */\n-/* { dg-error \"mtune\" \"\" { target *-*-* } 0 } */\n-/* { dg-bogus \"march\" \"\" { target *-*-* } 0 } */\n-/* { dg-bogus \"mcpu\" \"\" { target *-*-* } 0 } */\n+/* { dg-error \"mtune\" \"mtune\" { target *-*-* } 0 } */\n+/* { dg-bogus \"march\" \"march\" { target *-*-* } 0 } */\n+/* { dg-bogus \"mcpu\" \"mcpu\" { target *-*-* } 0 } */\n /* { dg-prune-output \"note: valid arguments.*\" } */\n int i;"}, {"sha": "b1502257d0ac7568bc6b36e09a356732dcd88d35", "filename": "gcc/testsuite/gcc.dg/parser-pr28152-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fparser-pr28152-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fparser-pr28152-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparser-pr28152-2.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -7,5 +7,5 @@ main (void)\n   __complex__ float z;\n \n   z = __complex__ (1.90000007326203904e+19, 0.0);   /* { dg-error \"__complex__\" } */\n-  z = __complex__ (1.0e+0, 0.0) / z;   /* { dg-error \"__complex__\" } */\n-  /* { dg-error \"at end of input\" \"\" { target *-*-* } 10 } */\n+  z = __complex__ (1.0e+0, 0.0) / z;   /* { dg-error \"__complex__\" \"Complex\" } */\n+  /* { dg-error \"at end of input\" \"end of input\" { target *-*-* } 10 } */"}, {"sha": "afb574bc5f2c9008f74765cb130899756b381421", "filename": "gcc/testsuite/gcc.dg/parser-pr28152.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fparser-pr28152.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fparser-pr28152.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fparser-pr28152.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -7,5 +7,5 @@ main (void)\n   _Complex float z;\n \n   z = _Complex (1.90000007326203904e+19, 0.0);   /* { dg-error \"_Complex\" } */\n-  z = _Complex (1.0e+0, 0.0) / z;   /* { dg-error \"_Complex\" } */\n-  /* { dg-error \"at end of input\" \"\" { target *-*-* } 10 } */\n+  z = _Complex (1.0e+0, 0.0) / z;   /* { dg-error \"_Complex\" \"_Complex\" } */\n+  /* { dg-error \"at end of input\" \"end of input\" { target *-*-* } 10 } */"}, {"sha": "4bad2b369d1e03f4dbe73ffd391c23ccede19dd8", "filename": "gcc/testsuite/gcc.dg/pr14475.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14475.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14475.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr14475.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -3,8 +3,8 @@\n \n struct tree_common\n {\n-  enum tree_code code : 8; /* { dg-error \"ISO C forbids forward references to\" \"\" } */\n-  /* { dg-error \"type of bit-field .code. is a GCC extension\" \"\" { target *-*-* } 6 } */\n-  /* { dg-warning \"narrower than values of its type\" \"\" { target *-*-* } 6 } */\n-  /* { dg-error \"incomplete type\" \"\" { target *-*-* } 6 } */\n+  enum tree_code code : 8; /* { dg-error \"ISO C forbids forward references to\" \"forward ref\" } */\n+  /* { dg-error \"type of bit-field .code. is a GCC extension\" \"extension\" { target *-*-* } 6 } */\n+  /* { dg-warning \"narrower than values of its type\" \"narrower\" { target *-*-* } 6 } */\n+  /* { dg-error \"incomplete type\" \"incomplete\" { target *-*-* } 6 } */\n };"}, {"sha": "8da92c1d3e2c48dcd422af63f862ef09cdbd7f83", "filename": "gcc/testsuite/gcc.dg/pr27953.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27953.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27953.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr27953.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -1,8 +1,8 @@\n /* PR c/27953 */\n \n-void foo(struct A a) {}  /* { dg-warning \"declared inside parameter list\" } */\n-/* { dg-warning \"its scope is only\" \"\" { target *-*-* } 3 } */\n-/* { dg-error \"incomplete type\" \"\" { target *-*-* } 3 } */\n+void foo(struct A a) {}  /* { dg-warning \"declared inside parameter list\" \"inside\" } */\n+/* { dg-warning \"its scope is only\" \"scope\" { target *-*-* } 3 } */\n+/* { dg-error \"incomplete type\" \"incomplete\" { target *-*-* } 3 } */\n \n-void foo() {}            /* { dg-error \"redefinition\" } */\n-/* { dg-message \"note: previous definition\" \"\" { target *-*-* } 3 } */\n+void foo() {}            /* { dg-error \"redefinition\" \"redef\" } */\n+/* { dg-message \"note: previous definition\" \"previous\" { target *-*-* } 3 } */"}, {"sha": "e714a3cc6f7697e84aba47a2cd3a64c6618b2d6e", "filename": "gcc/testsuite/gcc.dg/pr28322-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28322-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28322-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr28322-3.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -6,5 +6,5 @@ void foo(void)\n {\n   int i =  1;\n }\n-/* { dg-message \"unrecognized command line option .-fno-foobar.\" \"\" { target *-*-* } 0 } */\n-/* { dg-message \"unrecognized command line option .-mno-foobar.\" \"\" { target *-*-* } 0 } */\n+/* { dg-message \"unrecognized command line option .-fno-foobar.\" \"f\" { target *-*-* } 0 } */\n+/* { dg-message \"unrecognized command line option .-mno-foobar.\" \"m\" { target *-*-* } 0 } */"}, {"sha": "d72f47c1eda1f044b6f81e03f4063550e40b5350", "filename": "gcc/testsuite/gcc.dg/pr30457.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30457.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30457.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30457.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -17,9 +17,9 @@ void foo(register short paramN, ...)\n   va_start(ap, paramN); /* { dg-warning \"undefined behaviour when second parameter of 'va_start' is declared with 'register' storage\" } */\n   \n   /* Undefined by C99 7.15.1.1p2:  */\n-  (void) va_arg(ap, char); /* { dg-warning \"'char' is promoted to 'int' when passed through '...'\" } */\n-  /* { dg-message \"note: .so you should pass .int. not .char. to .va_arg..\" \"\" { target *-*-* } 20 } */\n-  /* { dg-message \"note: if this code is reached, the program will abort\"  \"\" { target *-*-* } 20 } */\n+  (void) va_arg(ap, char); /* { dg-warning \"'char' is promoted to 'int' when passed through '...'\" \"promoted\" } */\n+  /* { dg-message \"note: .so you should pass .int. not .char. to .va_arg..\" \"int not char\" { target *-*-* } 20 } */\n+  /* { dg-message \"note: if this code is reached, the program will abort\"  \"will abort\" { target *-*-* } 20 } */\n \n   va_end(ap);\n }"}, {"sha": "aa3c117c413e1bb099bed5f0f9d0e2e7a2025824", "filename": "gcc/testsuite/gcc.dg/pr30551-2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-2.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -2,7 +2,7 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-void main(char a) {} /* { dg-bogus \"first argument of .main. should be .int.\" } */\n-/* { dg-bogus \".main. takes only zero or two arguments\" \"\" { target *-*-* } 5 } */ \n-/* { dg-bogus \"return type of .main. is not .int.\" \"\" { target *-*-* } 5 } */ \n+void main(char a) {} /* { dg-bogus \"first argument of .main. should be .int.\" \"int\" } */\n+/* { dg-bogus \".main. takes only zero or two arguments\" \"zero or two\" { target *-*-* } 5 } */ \n+/* { dg-bogus \"return type of .main. is not .int.\" \"return type\" { target *-*-* } 5 } */ \n "}, {"sha": "121cfe873e314ec76d0378bbb72e0f89f78a0940", "filename": "gcc/testsuite/gcc.dg/pr30551-3.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-3.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -2,6 +2,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic-errors\" } */\n /* { dg-skip-if \"-Wmain not enabled with -pedantic on SPU\" { spu-*-* } } */\n-void main(char a) {} /* { dg-error \"first argument of .main. should be .int.\" } */\n-/* { dg-error \".main. takes only zero or two arguments\" \"\" { target *-*-* } 5 } */ \n-/* { dg-error \"return type of .main. is not .int.\" \"\" { target *-*-* } 5 } */ \n+void main(char a) {} /* { dg-error \"first argument of .main. should be .int.\" \"int\" } */\n+/* { dg-error \".main. takes only zero or two arguments\" \"zero or two\" { target *-*-* } 5 } */ \n+/* { dg-error \"return type of .main. is not .int.\" \"return type\" { target *-*-* } 5 } */ "}, {"sha": "a025a660b8ffc073b6083abc810a86b6a592f646", "filename": "gcc/testsuite/gcc.dg/pr30551-4.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-4.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -2,7 +2,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic-errors -Wno-main\" } */\n \n-void main(char a) {} /* { dg-bogus \"first argument of .main. should be .int.\" } */\n-/* { dg-bogus \".main. takes only zero or two arguments\" \"\" { target *-*-* } 5 } */ \n-/* { dg-bogus \"return type of .main. is not .int.\" \"\" { target *-*-* } 5 } */ \n+void main(char a) {} /* { dg-bogus \"first argument of .main. should be .int.\" \"int\" } */\n+/* { dg-bogus \".main. takes only zero or two arguments\" \"zero or two\" { target *-*-* } 5 } */ \n+/* { dg-bogus \"return type of .main. is not .int.\" \"return type\" { target *-*-* } 5 } */ \n "}, {"sha": "95685925ae700d106b7ba97816b8dec4d00826a5", "filename": "gcc/testsuite/gcc.dg/pr30551-5.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-5.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -2,6 +2,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic -Wno-main\" } */\n \n-void main(char a) {} /* { dg-bogus \"first argument of .main. should be .int.\" } */\n-/* { dg-bogus \".main. takes only zero or two arguments\" \"\" { target *-*-* } 5 } */ \n-/* { dg-bogus \"return type of .main. is not .int.\" \"\" { target *-*-* } 5 } */ \n+void main(char a) {} /* { dg-bogus \"first argument of .main. should be .int.\" \"int\" } */\n+/* { dg-bogus \".main. takes only zero or two arguments\" \"zero or two\" { target *-*-* } 5 } */ \n+/* { dg-bogus \"return type of .main. is not .int.\" \"return type\" { target *-*-* } 5 } */ "}, {"sha": "ba4cefcebfbd59a8d381d5854870f0fc4a8d3ec2", "filename": "gcc/testsuite/gcc.dg/pr30551-6.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551-6.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -2,6 +2,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-pedantic\" } */\n /* { dg-skip-if \"-Wmain not enabled with -pedantic on SPU\" { spu-*-* } } */\n-void main(char a) {} /* { dg-warning \"first argument of .main. should be .int.\" } */\n-/* { dg-warning \".main. takes only zero or two arguments\" \"\" { target *-*-* } 5 } */ \n-/* { dg-warning \"return type of .main. is not .int.\" \"\" { target *-*-* } 5 } */ \n+void main(char a) {} /* { dg-warning \"first argument of .main. should be .int.\" \"int\" } */\n+/* { dg-warning \".main. takes only zero or two arguments\" \"zero or two\" { target *-*-* } 5 } */ \n+/* { dg-warning \"return type of .main. is not .int.\" \"return type\" { target *-*-* } 5 } */ "}, {"sha": "68ecdedb3fe811ff47d4f2cb7c1fe0ba85a58598", "filename": "gcc/testsuite/gcc.dg/pr30551.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30551.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -2,6 +2,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-Wall\" } */\n /* { dg-skip-if \"-Wmain not enabled with -Wall on SPU\" { spu-*-* } } */\n-void main(char a) {} /* { dg-warning \"first argument of .main. should be .int.\" } */\n-/* { dg-warning \".main. takes only zero or two arguments\" \"\" { target *-*-* } 5 } */ \n-/* { dg-warning \"return type of .main. is not .int.\" \"\" { target *-*-* } 5 } */ \n+void main(char a) {} /* { dg-warning \"first argument of .main. should be .int.\" \"int\" } */\n+/* { dg-warning \".main. takes only zero or two arguments\" \"zero or two\" { target *-*-* } 5 } */ \n+/* { dg-warning \"return type of .main. is not .int.\" \"return type\" { target *-*-* } 5 } */ "}, {"sha": "7f287bd0305471828bd454535a45e9713d2964fe", "filename": "gcc/testsuite/gcc.dg/pr45461.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45461.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45461.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45461.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -9,10 +9,10 @@ foo (int i, ...)\n   short e;\n   va_list ap;\n   va_start (ap, i);\n-  e = va_arg (ap, short);\t/* { dg-warning \"is promoted\" } */\n+  e = va_arg (ap, short);\t/* { dg-warning \"is promoted\" \"promoted\" } */\n   va_end (ap);\n   return e;\n }\n \n-/* { dg-message \"note: \\\\(so you should pass\" \"\" {target *-*-* } 12 } */\n-/* { dg-message \"note: if this code\" \"\" {target *-*-* } 12 } */\n+/* { dg-message \"note: \\\\(so you should pass\" \"should pass\" {target *-*-* } 12 } */\n+/* { dg-message \"note: if this code\" \"if this code\" {target *-*-* } 12 } */"}, {"sha": "877c4c2a88199c17171d6b854ab96442c8dce280", "filename": "gcc/testsuite/gcc.dg/pr48552-1.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-1.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -7,15 +7,15 @@ struct S;\n void\n f1 (void *x)\n {\n-  __asm volatile (\"\" : : \"r\" (*x));\t/* { dg-warning \"dereferencing\" } */\n-}\t\t\t\t\t/* { dg-error \"invalid use of void expression\" \"\" { target *-*-* } 10 } */\n+  __asm volatile (\"\" : : \"r\" (*x));\t/* { dg-warning \"dereferencing\" \"deref\" } */\n+}\t\t\t\t\t/* { dg-error \"invalid use of void expression\" \"void expr\" { target *-*-* } 10 } */\n \n void\n f2 (void *x)\n {\n-  __asm volatile (\"\" : \"=r\" (*x));\t/* { dg-warning \"dereferencing\" } */\n-}\t\t\t\t\t/* { dg-error \"invalid use of void expression\" \"\" { target *-*-* } 16 } */\n-\t\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"\" { target *-*-* } 16 } */\n+  __asm volatile (\"\" : \"=r\" (*x));\t/* { dg-warning \"dereferencing\" \"deref\" } */\n+}\t\t\t\t\t/* { dg-error \"invalid use of void expression\" \"void expr\" { target *-*-* } 16 } */\n+\t\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"invalid lvalue\" { target *-*-* } 16 } */\n void\n f3 (void *x)\n {\n@@ -31,15 +31,15 @@ f4 (void *x)\n void\n f5 (void *x)\n {\n-  __asm volatile (\"\" : : \"g\" (*x));\t/* { dg-warning \"dereferencing\" } */\n-}\t\t\t\t\t/* { dg-error \"invalid use of void expression\" \"\" { target *-*-* } 34 } */\n+  __asm volatile (\"\" : : \"g\" (*x));\t/* { dg-warning \"dereferencing\" \"deref\" } */\n+}\t\t\t\t\t/* { dg-error \"invalid use of void expression\" \"void expr\" { target *-*-* } 34 } */\n \n void\n f6 (void *x)\n {\n-  __asm volatile (\"\" : \"=g\" (*x));\t/* { dg-warning \"dereferencing\" } */\n-}\t\t\t\t\t/* { dg-error \"invalid use of void expression\" \"\" { target *-*-* } 40 } */\n-\t\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"\" { target *-*-* } 40 } */\n+  __asm volatile (\"\" : \"=g\" (*x));\t/* { dg-warning \"dereferencing\" \"deref\" } */\n+}\t\t\t\t\t/* { dg-error \"invalid use of void expression\" \"void expr\" { target *-*-* } 40 } */\n+\t\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"invalid lvalue\" { target *-*-* } 40 } */\n void\n f7 (struct S *x)\n {\n@@ -49,5 +49,5 @@ f7 (struct S *x)\n void\n f8 (struct S *x)\n {\n-  __asm volatile (\"\" : \"=r\" (*x));\t/* { dg-error \"dereferencing pointer to incomplete type\" } */\n-}\t\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"\" { target *-*-* } 52 } */\n+  __asm volatile (\"\" : \"=r\" (*x));\t/* { dg-error \"dereferencing pointer to incomplete type\" \"incomplete\" } */\n+}\t\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"invalid lvalue\" { target *-*-* } 52 } */"}, {"sha": "a7969837bf5f43021b49e42defe8abd46d2b931f", "filename": "gcc/testsuite/gcc.dg/pr48552-2.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-2.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -7,15 +7,15 @@ struct S;\n void\n f1 (void *x)\n {\n-  __asm (\"\" : : \"r\" (*x));\t/* { dg-warning \"dereferencing\" } */\n-}\t\t\t\t/* { dg-error \"invalid use of void expression\" \"\" { target *-*-* } 10 } */\n+  __asm (\"\" : : \"r\" (*x));\t/* { dg-warning \"dereferencing\" \"deref\" } */\n+}\t\t\t\t/* { dg-error \"invalid use of void expression\" \"void expr\" { target *-*-* } 10 } */\n \n void\n f2 (void *x)\n {\n-  __asm (\"\" : \"=r\" (*x));\t/* { dg-warning \"dereferencing\" } */\n-}\t\t\t\t/* { dg-error \"invalid use of void expression\" \"\" { target *-*-* } 16 } */\n-\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"\" { target *-*-* } 16 } */\n+  __asm (\"\" : \"=r\" (*x));\t/* { dg-warning \"dereferencing\" \"deref\" } */\n+}\t\t\t\t/* { dg-error \"invalid use of void expression\" \"void expr\" { target *-*-* } 16 } */\n+\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"invalid lvalue\" { target *-*-* } 16 } */\n void\n f3 (void *x)\n {\n@@ -31,15 +31,15 @@ f4 (void *x)\n void\n f5 (void *x)\n {\n-  __asm (\"\" : : \"g\" (*x));\t/* { dg-warning \"dereferencing\" } */\n-}\t\t\t\t/* { dg-error \"invalid use of void expression\" \"\" { target *-*-* } 34 } */\n+  __asm (\"\" : : \"g\" (*x));\t/* { dg-warning \"dereferencing\" \"deref\" } */\n+}\t\t\t\t/* { dg-error \"invalid use of void expression\" \"void expr\" { target *-*-* } 34 } */\n \n void\n f6 (void *x)\n {\n-  __asm (\"\" : \"=g\" (*x));\t/* { dg-warning \"dereferencing\" } */\n-}\t\t\t\t/* { dg-error \"invalid use of void expression\" \"\" { target *-*-* } 40 } */\n-\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"\" { target *-*-* } 40 } */\n+  __asm (\"\" : \"=g\" (*x));\t/* { dg-warning \"dereferencing\" \"deref\" } */\n+}\t\t\t\t/* { dg-error \"invalid use of void expression\" \"void expr\" { target *-*-* } 40 } */\n+\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"invalid lvalue\" { target *-*-* } 40 } */\n void\n f7 (struct S *x)\n {\n@@ -49,5 +49,5 @@ f7 (struct S *x)\n void\n f8 (struct S *x)\n {\n-  __asm (\"\" : \"=r\" (*x));\t/* { dg-error \"dereferencing pointer to incomplete type\" } */\n-}\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"\" { target *-*-* } 52 } */\n+  __asm (\"\" : \"=r\" (*x));\t/* { dg-error \"dereferencing pointer to incomplete type\" \"incomplete\" } */\n+}\t\t\t\t/* { dg-error \"invalid lvalue in asm output 0\" \"invalid lvalue\" { target *-*-* } 52 } */"}, {"sha": "e04ec801dbd3dad8bc5d7fec9fe2c21ccad7837c", "filename": "gcc/testsuite/gcc.dg/redecl-1.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-1.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -52,21 +52,21 @@ void test3(void)\n \n void prime4(void)\n {\n-  bar4();\t\t\t/* { dg-warning \"implicit declaration of function\" } */\n+  bar4();\t\t\t/* { dg-warning \"implicit declaration of function\" \"implicit\" } */\n }\n \n void test4(void)\n {\n   extern double bar4(double);\t/* { dg-error \"conflict\" } */\n-/* { dg-message \"note: previous implicit declaration\" \"\" { target *-*-* } 55 } */\n+/* { dg-message \"note: previous implicit declaration\" \"previous\" { target *-*-* } 55 } */\n }\n \n /* Implicit decl, clashing with extern at previous function scope.  */\n \n void prime5(void)\n {\n-  extern double bar5(double);\t/* { dg-message \"note: previous declaration\" \"\" } */\n-} /* { dg-message \"note: previous implicit declaration\" \"\" { target *-*-* } 68 } */\n+  extern double bar5(double);\t/* { dg-message \"note: previous declaration\" \"previous 1\" } */\n+} /* { dg-message \"note: previous implicit declaration\" \"previous 2\" { target *-*-* } 68 } */\n \n void test5(void)\n {"}, {"sha": "3e4cd77fa4c7846f9b3e83f19bde0414aebac64b", "filename": "gcc/testsuite/gcc.dg/transparent-union-3.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftransparent-union-3.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -6,15 +6,15 @@\n \n enum e { A };\n \n-union __attribute__((__transparent_union__)) ue1 { enum e; }; /* { dg-warning \"declaration does not declare anything\" } */\n-/* { dg-warning \"union cannot be made transparent\" \"\" { target *-*-* } 9 } */\n-union ue2 { enum e; } __attribute__((__transparent_union__)); /* { dg-warning \"declaration does not declare anything\" } */\n-/* { dg-warning \"union cannot be made transparent\" \"\" { target *-*-* } 11 } */\n+union __attribute__((__transparent_union__)) ue1 { enum e; }; /* { dg-warning \"declaration does not declare anything\" \"not anything\" } */\n+/* { dg-warning \"union cannot be made transparent\" \"cannot\" { target *-*-* } 9 } */\n+union ue2 { enum e; } __attribute__((__transparent_union__)); /* { dg-warning \"declaration does not declare anything\" \"not anything\" } */\n+/* { dg-warning \"union cannot be made transparent\" \"cannot\" { target *-*-* } 11 } */\n \n-union __attribute__((__transparent_union__)) ui1 { int; }; /* { dg-warning \"declaration does not declare anything\" } */\n-/* { dg-warning \"union cannot be made transparent\" \"\" { target *-*-* } 14 } */\n-union ui2 { int; } __attribute__((__transparent_union__)); /* { dg-warning \"declaration does not declare anything\" } */\n-/* { dg-warning \"union cannot be made transparent\" \"\" { target *-*-* } 16 } */\n+union __attribute__((__transparent_union__)) ui1 { int; }; /* { dg-warning \"declaration does not declare anything\" \"not anything\" } */\n+/* { dg-warning \"union cannot be made transparent\" \"cannot\" { target *-*-* } 14 } */\n+union ui2 { int; } __attribute__((__transparent_union__)); /* { dg-warning \"declaration does not declare anything\" \"no anything\" } */\n+/* { dg-warning \"union cannot be made transparent\" \"cannot\" { target *-*-* } 16 } */\n \n union __attribute__((__transparent_union__)) u1 { };\n /* { dg-warning \"union cannot be made transparent\" \"\" { target *-*-* } 19 } */"}, {"sha": "f672f0af57a9acae53766726a7f4e1e2502ac350", "filename": "gcc/testsuite/gcc.dg/utf-dflt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Futf-dflt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Futf-dflt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf-dflt.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -3,10 +3,10 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-const unsigned short\tc0\t= u'a';\t\t/* { dg-error \"undeclared\" } */\n-\t\t/* { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 6 } */\n-const unsigned long\tc1\t= U'a';\t\t/* { dg-error \"undeclared\" } */\n-\t\t/* { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 8 } */\n+const unsigned short\tc0\t= u'a';\t\t/* { dg-error \"undeclared\" \"undeclared\" } */\n+\t\t/* { dg-error \"expected ',' or ';'\" \"expected\" { target *-*-* } 6 } */\n+const unsigned long\tc1\t= U'a';\t\t/* { dg-error \"undeclared\" \"undeclared\" } */\n+\t\t/* { dg-error \"expected ',' or ';'\" \"expected\" { target *-*-* } 8 } */\n \n #define u\t1 +\n #define U\t2 +"}, {"sha": "022c081fdb7ca1d969a0b987eff1ed20e169a900", "filename": "gcc/testsuite/gcc.dg/utf-dflt2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Futf-dflt2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Futf-dflt2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Futf-dflt2.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -2,8 +2,8 @@\n /* { dg-do compile } */\n /* { dg-options \"\" } */\n \n-const void\t*s0 = u8\"a\";\t\t/* { dg-error \"undeclared\" } */\n-\t\t/* { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 5 } */\n+const void\t*s0 = u8\"a\";\t\t/* { dg-error \"undeclared\" \"undeclared\" } */\n+\t\t/* { dg-error \"expected ',' or ';'\" \"expected\" { target *-*-* } 5 } */\n \n #define u8\t\"a\"\n "}, {"sha": "fea2337cb071e9274919a5c48ed0874c883e894b", "filename": "gcc/testsuite/gcc.dg/vla-8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-8.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -30,5 +30,5 @@ void foo2(int n) {\n }\n \n /* Match extra informative notes.  */\n-/* { dg-message \"note: label '\\[^\\n'\\]*' defined here\" \"note: expected\" { target *-*-* } 0 } */\n-/* { dg-message \"note: '\\[^\\n'\\]*' declared here\" \"note: expected\" { target *-*-* } 0 } */\n+/* { dg-message \"note: label '\\[^\\n'\\]*' defined here\" \"defined\" { target *-*-* } 0 } */\n+/* { dg-message \"note: '\\[^\\n'\\]*' declared here\" \"declared\" { target *-*-* } 0 } */"}, {"sha": "316bf98bc68d666902f8ce7112633452e527aa26", "filename": "gcc/testsuite/gcc.dg/vla-init-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvla-init-1.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -10,6 +10,6 @@ void\n foo (void)\n {\n   int x[a] = { 1 }; /* { dg-error \"variable-sized object may not be initialized\" \"VLA init\" } */\n-  /* { dg-warning \"excess elements in array initializer\" \"\" { target *-*-* } 12 } */\n-  /* { dg-warning \"near initialization\" \"\" { target *-*-* } 12 } */\n+  /* { dg-warning \"excess elements in array initializer\" \"excess\" { target *-*-* } 12 } */\n+  /* { dg-warning \"near initialization\" \"near\" { target *-*-* } 12 } */\n }"}, {"sha": "c0a600d842a3dc8f44d1a41d11ec9c7aa0b5907b", "filename": "gcc/testsuite/gcc.dg/wtr-int-type-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-int-type-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eae54ca6e8c32569def0478d351d217d33d0ae6/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-int-type-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-int-type-1.c?ref=3eae54ca6e8c32569def0478d351d217d33d0ae6", "patch": "@@ -25,8 +25,8 @@ testfunc ()\n \n   /* But this one should, since it doesn't fit in long (long), but\n      does fit in unsigned long (long).  */\n-  i = 18446744073709551615; /* { dg-warning \"integer constant is so large that it is unsigned\" \"decimal constant\" } */\n-  /* { dg-warning \"this decimal constant would be unsigned in ISO C90\" \"decimal constant\" { target *-*-* } 28 } */\n+  i = 18446744073709551615; /* { dg-warning \"integer constant is so large that it is unsigned\" \"so large\" } */\n+  /* { dg-warning \"this decimal constant would be unsigned in ISO C90\" \"ISO C90\" { target *-*-* } 28 } */\n \n # 29 \"sys-header.h\" 3\n }"}]}