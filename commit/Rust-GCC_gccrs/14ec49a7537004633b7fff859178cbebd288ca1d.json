{"sha": "14ec49a7537004633b7fff859178cbebd288ca1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRlYzQ5YTc1MzcwMDQ2MzNiN2ZmZjg1OTE3OGNiZWJkMjg4Y2ExZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-07-02T07:35:23Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-07-02T07:35:23Z"}, "message": "re PR tree-optimization/58483 (missing optimization opportunity for const std::vector compared to std::array)\n\n2019-07-02  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/58483\n\t* tree-ssa-scopedtables.c (avail_expr_hash): Use OEP_ADDRESS_OF\n\tfor MEM_REF base hashing.\n\t(equal_mem_array_ref_p): Likewise for base comparison.\n\n\t* gcc.dg/tree-ssa/ssa-dom-cse-8.c: New testcase.\n\nFrom-SVN: r272922", "tree": {"sha": "faab629040d4fb9ceae92d6baa27e2477c6c6542", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/faab629040d4fb9ceae92d6baa27e2477c6c6542"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14ec49a7537004633b7fff859178cbebd288ca1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14ec49a7537004633b7fff859178cbebd288ca1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14ec49a7537004633b7fff859178cbebd288ca1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14ec49a7537004633b7fff859178cbebd288ca1d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d64cee84be39d688a0221246f24bba8e84a54b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d64cee84be39d688a0221246f24bba8e84a54b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d64cee84be39d688a0221246f24bba8e84a54b0"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "6a1e932ad739b11819edaab1a2821ecf265d11bb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ec49a7537004633b7fff859178cbebd288ca1d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ec49a7537004633b7fff859178cbebd288ca1d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14ec49a7537004633b7fff859178cbebd288ca1d", "patch": "@@ -1,3 +1,10 @@\n+2019-07-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58483\n+\t* tree-ssa-scopedtables.c (avail_expr_hash): Use OEP_ADDRESS_OF\n+\tfor MEM_REF base hashing.\n+\t(equal_mem_array_ref_p): Likewise for base comparison.\n+\n 2019-07-01  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.md (signbit<mode>2_dm): Make this a"}, {"sha": "e3a6b7926ecaea2cd1517b23a29c733154c4f12e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ec49a7537004633b7fff859178cbebd288ca1d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ec49a7537004633b7fff859178cbebd288ca1d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14ec49a7537004633b7fff859178cbebd288ca1d", "patch": "@@ -1,3 +1,8 @@\n+2019-07-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/58483\n+\t* gcc.dg/tree-ssa/ssa-dom-cse-8.c: New testcase.\n+\n 2019-07-01  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* gcc.target/s390/vector/vec-shift-2.c: New test."}, {"sha": "b419ce76068af677373ec3d3813798f13289c685", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-cse-8.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ec49a7537004633b7fff859178cbebd288ca1d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-cse-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ec49a7537004633b7fff859178cbebd288ca1d/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-cse-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-cse-8.c?ref=14ec49a7537004633b7fff859178cbebd288ca1d", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fgimple -fdump-tree-dom2\" } */\n+\n+int __GIMPLE (ssa,startwith(\"dom\"))\n+foo (void *p)\n+{\n+  int _2;\n+\n+  __BB(2):\n+  __MEM <int> ((char *)p_1(D) + 4) = 20;\n+  _2 = __MEM <const int> ((int *)p_1(D) + 4);\n+  return _2;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 20;\" \"dom2\" } } */"}, {"sha": "50413eb86c103e23cb63baf01cc1cc511cf78422", "filename": "gcc/tree-ssa-scopedtables.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14ec49a7537004633b7fff859178cbebd288ca1d/gcc%2Ftree-ssa-scopedtables.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14ec49a7537004633b7fff859178cbebd288ca1d/gcc%2Ftree-ssa-scopedtables.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-scopedtables.c?ref=14ec49a7537004633b7fff859178cbebd288ca1d", "patch": "@@ -494,7 +494,9 @@ avail_expr_hash (class expr_hash_elt *p)\n \t    {\n \t      enum tree_code code = MEM_REF;\n \t      hstate.add_object (code);\n-\t      inchash::add_expr (base, hstate);\n+\t      inchash::add_expr (base, hstate,\n+\t\t\t\t TREE_CODE (base) == MEM_REF \n+\t\t\t\t ? OEP_ADDRESS_OF : 0);\n \t      hstate.add_object (offset);\n \t      hstate.add_object (size);\n \t      return hstate.end ();\n@@ -540,7 +542,12 @@ equal_mem_array_ref_p (tree t0, tree t1)\n   if (rev0 != rev1 || maybe_ne (sz0, sz1) || maybe_ne (off0, off1))\n     return false;\n \n-  return operand_equal_p (base0, base1, 0);\n+  return operand_equal_p (base0, base1,\n+\t\t\t  (TREE_CODE (base0) == MEM_REF\n+\t\t\t   || TREE_CODE (base0) == TARGET_MEM_REF)\n+\t\t\t  && (TREE_CODE (base1) == MEM_REF\n+\t\t\t      || TREE_CODE (base1) == TARGET_MEM_REF)\n+\t\t\t  ? OEP_ADDRESS_OF : 0);\n }\n \n /* Compare two hashable_expr structures for equivalence.  They are"}]}