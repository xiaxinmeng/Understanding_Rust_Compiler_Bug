{"sha": "3fe53000bbaa5024af7ceecb950e0a7fd6b189e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZlNTMwMDBiYmFhNTAyNGFmN2NlZWNiOTUwZTBhN2ZkNmIxODllMw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2019-02-16T16:17:17Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2019-02-16T16:17:17Z"}, "message": "Fix excess warnings from -Wtype-limits with location wrappers (PR c++/88680)\n\nPR c++/88680 reports excess warnings from -Wtype-limits after the C++\nFE's use of location wrappers was extended in r267272 for cases such as:\n\n  const unsigned n = 8;\n  static_assert (n >= 0 && n % 2 == 0, \"\");\n\nt.C:3:18: warning: comparison of unsigned expression >= 0 is always true\n  [-Wtype-limits]\n    3 | static_assert (n >= 0 && n % 2 == 0, \"\");\n      |                ~~^~~~\n\nThe root cause is that the location wrapper around \"n\" breaks the\nsuppression of the warning for the \"if OP0 is a constant that is >= 0\"\ncase.\n\nThis patch fixes it by calling fold_for_warn on OP0, extracting the\nconstant.\n\ngcc/c-family/ChangeLog:\n\tPR c++/88680\n\t* c-common.c (shorten_compare): Call fold_for_warn on op0 when\n\timplementing -Wtype-limits.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/88680\n\t* g++.dg/wrappers/pr88680.C: New test.\n\nFrom-SVN: r268961", "tree": {"sha": "d4ce7caa5c4014625f6fccf5e7a10714d8b7e302", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4ce7caa5c4014625f6fccf5e7a10714d8b7e302"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fe53000bbaa5024af7ceecb950e0a7fd6b189e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe53000bbaa5024af7ceecb950e0a7fd6b189e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fe53000bbaa5024af7ceecb950e0a7fd6b189e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fe53000bbaa5024af7ceecb950e0a7fd6b189e3/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9dbdefbb201dd67cd1ce795e969c3ae1a850c31d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dbdefbb201dd67cd1ce795e969c3ae1a850c31d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dbdefbb201dd67cd1ce795e969c3ae1a850c31d"}], "stats": {"total": 80, "additions": 77, "deletions": 3}, "files": [{"sha": "ed8026a33e098eed12567a745a61f8cddcbd2a75", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe53000bbaa5024af7ceecb950e0a7fd6b189e3/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe53000bbaa5024af7ceecb950e0a7fd6b189e3/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3fe53000bbaa5024af7ceecb950e0a7fd6b189e3", "patch": "@@ -1,3 +1,9 @@\n+2019-02-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/88680\n+\t* c-common.c (shorten_compare): Call fold_for_warn on op0 when\n+\timplementing -Wtype-limits.\n+\n 2019-02-11  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/87996"}, {"sha": "c6856c9ad103402d12e784d498a995fffdc2af9f", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe53000bbaa5024af7ceecb950e0a7fd6b189e3/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe53000bbaa5024af7ceecb950e0a7fd6b189e3/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=3fe53000bbaa5024af7ceecb950e0a7fd6b189e3", "patch": "@@ -3117,6 +3117,12 @@ shorten_compare (location_t loc, tree *op0_ptr, tree *op1_ptr,\n       primop0 = op0;\n       primop1 = op1;\n \n+      /* We want to fold unsigned comparisons of >= and < against zero.\n+\t For these, we may also issue a warning if we have a non-constant\n+\t compared against zero, where the zero was spelled as \"0\" (rather\n+\t than merely folding to it).\n+\t If we have at least one constant, then op1 is constant\n+\t and we may have a non-constant expression as op0.  */\n       if (!real1 && !real2 && integer_zerop (primop1)\n \t  && TYPE_UNSIGNED (*restype_ptr))\n \t{\n@@ -3125,13 +3131,14 @@ shorten_compare (location_t loc, tree *op0_ptr, tree *op1_ptr,\n \t     if OP0 is a constant that is >= 0, the signedness of\n \t     the comparison isn't an issue, so suppress the\n \t     warning.  */\n+\t  tree folded_op0 = fold_for_warn (op0);\n \t  bool warn = \n \t    warn_type_limits && !in_system_header_at (loc)\n-\t    && !(TREE_CODE (primop0) == INTEGER_CST\n+\t    && !(TREE_CODE (folded_op0) == INTEGER_CST\n \t\t && !TREE_OVERFLOW (convert (c_common_signed_type (type),\n-\t\t\t\t\t     primop0)))\n+\t\t\t\t\t     folded_op0)))\n \t    /* Do not warn for enumeration types.  */\n-\t    && (TREE_CODE (expr_original_type (primop0)) != ENUMERAL_TYPE);\n+\t    && (TREE_CODE (expr_original_type (folded_op0)) != ENUMERAL_TYPE);\n \t  \n \t  switch (code)\n \t    {"}, {"sha": "45fbe7c0296ab34d52705c87989888bd3de17806", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe53000bbaa5024af7ceecb950e0a7fd6b189e3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe53000bbaa5024af7ceecb950e0a7fd6b189e3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3fe53000bbaa5024af7ceecb950e0a7fd6b189e3", "patch": "@@ -1,3 +1,8 @@\n+2019-02-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/88680\n+\t* g++.dg/wrappers/pr88680.C: New test.\n+\n 2019-02-17  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/71066"}, {"sha": "5497cda5c9c92167930bc3ac7f4e866e7bd4c1c3", "filename": "gcc/testsuite/g++.dg/wrappers/pr88680.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fe53000bbaa5024af7ceecb950e0a7fd6b189e3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fpr88680.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fe53000bbaa5024af7ceecb950e0a7fd6b189e3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fpr88680.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fpr88680.C?ref=3fe53000bbaa5024af7ceecb950e0a7fd6b189e3", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wtype-limits\" }\n+\n+const unsigned N = 8;\n+const unsigned P = 0;\n+\n+enum { FOO, BAR };\n+\n+static_assert (N >= 0 && N % 2 == 0, \"\");\n+static_assert (FOO >= 0, \"\");\n+static_assert (FOO >= FOO, \"\");\n+static_assert (FOO >= P, \"\");\n+static_assert (BAR >= P, \"\");\n+static_assert (N >= FOO, \"\");\n+\n+void test(unsigned n)\n+{\n+  if (N >= 0 && N % 2 == 0)\n+    return;\n+  if (FOO >= 0)\n+    return;\n+  if (FOO >= FOO)\n+    return;\n+  if (FOO >= P)\n+    return;\n+  if (BAR >= P)\n+    return;\n+  if (N >= FOO)\n+    return;\n+  if (n >= 0) // { dg-warning \">= 0 is always true\" }\n+    return;\n+  if (n < 0) // { dg-warning \"< 0 is always false\" }\n+    return;\n+  if (n >= FOO)\n+    return;\n+  if (n < FOO)\n+    return;\n+  if (N >= 0)\n+    return;\n+  if (N < 0)\n+    return;\n+  if (N >= FOO)\n+    return;\n+  if (N < FOO)\n+    return;\n+  if (0 <= FOO)\n+    return;\n+  if (0 <= n) // { dg-warning \">= 0 is always true\" }\n+    return;\n+  if (0 > n) // { dg-warning \"< 0 is always false\" }\n+    return;\n+  if (N <= FOO)\n+    return;\n+  if (N <= n)\n+    return;\n+}"}]}