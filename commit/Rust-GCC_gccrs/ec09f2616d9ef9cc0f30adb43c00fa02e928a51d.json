{"sha": "ec09f2616d9ef9cc0f30adb43c00fa02e928a51d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWMwOWYyNjE2ZDllZjljYzBmMzBhZGI0M2MwMGZhMDJlOTI4YTUxZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-05T13:01:17Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-09-05T13:01:17Z"}, "message": "[multiple changes]\n\n2011-09-05  Johannes Kanig  <kanig@adacore.com>\n\n\t* lib-xref-alfa.adb (Is_Alfa_Reference): Filter constants from effect\n\tinformation.\n\n2011-09-05  Ed Schonberg  <schonberg@adacore.com>\n\n\t* par-ch6.adb (P_Subprogram): In Ada2012 mode, if the subprogram\n\tappears within a package specification and the token after \"IS\"\n\tis not a parenthesis, assume that this is an unparenthesized\n\texpression function, even if the token appears in a line by\n\titself.\n\t* par.adb: Clarify use of Labl field of scope stack in error\n\trecovery.\n\nFrom-SVN: r178532", "tree": {"sha": "722b72d2c0b3b7a1539911871f9c6d663acb878b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/722b72d2c0b3b7a1539911871f9c6d663acb878b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec09f2616d9ef9cc0f30adb43c00fa02e928a51d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec09f2616d9ef9cc0f30adb43c00fa02e928a51d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec09f2616d9ef9cc0f30adb43c00fa02e928a51d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec09f2616d9ef9cc0f30adb43c00fa02e928a51d/comments", "author": null, "committer": null, "parents": [{"sha": "7109f4f52da4ea189b04aeb29a077d140855cb52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7109f4f52da4ea189b04aeb29a077d140855cb52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7109f4f52da4ea189b04aeb29a077d140855cb52"}], "stats": {"total": 89, "additions": 70, "deletions": 19}, "files": [{"sha": "082b45ef1ef9e4c7ec51a0aca9f807a57521899c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec09f2616d9ef9cc0f30adb43c00fa02e928a51d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec09f2616d9ef9cc0f30adb43c00fa02e928a51d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ec09f2616d9ef9cc0f30adb43c00fa02e928a51d", "patch": "@@ -1,3 +1,18 @@\n+2011-09-05  Johannes Kanig  <kanig@adacore.com>\n+\n+\t* lib-xref-alfa.adb (Is_Alfa_Reference): Filter constants from effect\n+\tinformation.\n+\n+2011-09-05  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* par-ch6.adb (P_Subprogram): In Ada2012 mode, if the subprogram\n+\tappears within a package specification and the token after \"IS\"\n+\tis not a parenthesis, assume that this is an unparenthesized\n+\texpression function, even if the token appears in a line by\n+\titself.\n+\t* par.adb: Clarify use of Labl field of scope stack in error\n+\trecovery.\n+\n 2011-09-05  Bob Duff  <duff@adacore.com>\n \n \t* sem_res.adb (Resolve_Intrinsic_Operator): Use unchecked"}, {"sha": "c58f600d88c626872b0ed2c9e825731d5a1acdaa", "filename": "gcc/ada/lib-xref-alfa.adb", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec09f2616d9ef9cc0f30adb43c00fa02e928a51d/gcc%2Fada%2Flib-xref-alfa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec09f2616d9ef9cc0f30adb43c00fa02e928a51d/gcc%2Fada%2Flib-xref-alfa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-alfa.adb?ref=ec09f2616d9ef9cc0f30adb43c00fa02e928a51d", "patch": "@@ -616,26 +616,23 @@ package body Alfa is\n                --  section, as these will be translated as constants in the\n                --  intermediate language for formal verification.\n \n-               when E_In_Parameter =>\n+               --  Above comment is incomplete??? what about E_Constant case\n+\n+               when E_In_Parameter | E_Constant =>\n                   return False;\n \n                when others =>\n \n                   --  Objects of Task type or protected type are not Alfa\n                   --  references.\n \n-                  if Present (Etype (E)) then\n-                     case Ekind (Etype (E)) is\n-                        when E_Task_Type | E_Protected_Type =>\n-                           return False;\n-\n-                        when others =>\n-                           null;\n-                     end case;\n+                  if Present (Etype (E))\n+                    and then Ekind (Etype (E)) in E_Concurrent_Kind\n+                  then\n+                     return False;\n                   end if;\n \n                   return Typ = 'r' or else Typ = 'm';\n-\n             end case;\n          end Is_Alfa_Reference;\n "}, {"sha": "100259e9995a21f011255ef47c9d6d3c36eb815a", "filename": "gcc/ada/par-ch6.adb", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec09f2616d9ef9cc0f30adb43c00fa02e928a51d/gcc%2Fada%2Fpar-ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec09f2616d9ef9cc0f30adb43c00fa02e928a51d/gcc%2Fada%2Fpar-ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch6.adb?ref=ec09f2616d9ef9cc0f30adb43c00fa02e928a51d", "patch": "@@ -675,10 +675,42 @@ package body Ch6 is\n                   else\n                      --  If the identifier is the first token on its line, then\n                      --  let's assume that we have a missing begin and this is\n-                     --  intended as a subprogram body.\n+                     --  intended as a subprogram body. However, if the context\n+                     --  is a function and the unit is a package declaration, a\n+                     --  body would be illegal, so try for an unparenthesized\n+                     --  expression function.\n \n                      if Token_Is_At_Start_Of_Line then\n-                        return False;\n+                        declare\n+\n+                           --  The enclosing scope entry is a subprogram spec.\n+\n+                           Spec_Node : constant Node_Id :=\n+                            Parent (Scope.Table (Scope.Last).Labl);\n+                           Lib_Node : Node_Id := Spec_Node;\n+\n+                        begin\n+\n+                           --  Check whether there is an enclosing scope that\n+                           --  is a package declaration.\n+\n+                           if Scope.Last > 1 then\n+                              Lib_Node  :=\n+                                Parent (Scope.Table (Scope.Last - 1).Labl);\n+                           end if;\n+\n+                           if Ada_Version >= Ada_2012\n+                             and then\n+                               Nkind (Lib_Node) = N_Package_Specification\n+                             and then\n+                               Nkind (Spec_Node) = N_Function_Specification\n+                           then\n+                              null;\n+\n+                           else\n+                              return False;\n+                           end if;\n+                        end;\n \n                      --  Otherwise we have to scan ahead. If the identifier is\n                      --  followed by a colon or a comma, it is a declaration"}, {"sha": "4abc5b24195eeddbbf55d887709ce24740c35e79", "filename": "gcc/ada/par.adb", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec09f2616d9ef9cc0f30adb43c00fa02e928a51d/gcc%2Fada%2Fpar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec09f2616d9ef9cc0f30adb43c00fa02e928a51d/gcc%2Fada%2Fpar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar.adb?ref=ec09f2616d9ef9cc0f30adb43c00fa02e928a51d", "patch": "@@ -466,15 +466,22 @@ function Par (Configuration_Pragmas : Boolean) return List_Id is\n       --  control heuristic error recovery actions.\n \n       Labl : Node_Id;\n-      --  This field is used only for the LOOP and BEGIN cases, and is the\n-      --  Node_Id value of the label name. For all cases except child units,\n-      --  this value is an entity whose Chars field contains the name pointer\n-      --  that identifies the label uniquely. For the child unit case the Labl\n-      --  field references an N_Defining_Program_Unit_Name node for the name.\n-      --  For cases other than LOOP or BEGIN, the Label field is set to Error,\n-      --  indicating that it is an error to have a label on the end line.\n+      --  This field is used to provide the name of the construct being parsed\n+      --  and indirectly its kind. For loops and blocks, the field contains the\n+      --  source name or the generated one. For package specifications, bodies,\n+      --  subprogram specifications and bodies the field holds the correponding\n+      --  program unit name. For task declarations and bodies, protected types\n+      --  and bodies, and accept statements the field hold the name of the type\n+      --  or operation. For if-statements, case-statements, and selects, the\n+      --  field is initialized to Error, indicating that it is an error to have\n+      --  a label on the end line.\n       --  (this is really a misuse of Error since there is no Error ???)\n \n+      --  Whenever the field is a name, it is attached to the parent node of\n+      --  the construct being parsed. Thus the parent node indicates the kind\n+      --  of construct whose parse tree is being built. This is used in error\n+      --  recovery.\n+\n       Decl : List_Id;\n       --  Points to the list of declarations (i.e. the declarative part)\n       --  associated with this construct. It is set only in the END [name]"}]}