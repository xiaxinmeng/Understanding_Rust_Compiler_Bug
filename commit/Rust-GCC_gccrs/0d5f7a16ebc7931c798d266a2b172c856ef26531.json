{"sha": "0d5f7a16ebc7931c798d266a2b172c856ef26531", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ1ZjdhMTZlYmM3OTMxYzc5OGQyNjZhMmIxNzJjODU2ZWYyNjUzMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2008-09-28T15:47:45Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2008-09-28T15:47:45Z"}, "message": "unique_ptr.h (unique_ptr<_Tp[]>::template<typename U> void reset(U)): Add as deleted function, per DR 821 [Ready].\n\n2008-09-28  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/unique_ptr.h (unique_ptr<_Tp[]>::template<typename U>\n\tvoid reset(U)): Add as deleted function, per DR 821 [Ready].\n\t* include/bits/unique_ptr.h: Prefer everywhere deleted to private\n\tmember function declarations; minor formatting tweaks.\n\t* testsuite/20_util/unique_ptr/modifiers/reset_neg.cc: New.\n\t* testsuite/20_util/unique_ptr/assign/assign.cc: Adjust DejaGNU\n\tdirectives.\n\nFrom-SVN: r140737", "tree": {"sha": "2e1b13331593af53f2952a7f8e50a3a09fedc285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e1b13331593af53f2952a7f8e50a3a09fedc285"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d5f7a16ebc7931c798d266a2b172c856ef26531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5f7a16ebc7931c798d266a2b172c856ef26531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d5f7a16ebc7931c798d266a2b172c856ef26531", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5f7a16ebc7931c798d266a2b172c856ef26531/comments", "author": null, "committer": null, "parents": [{"sha": "58760a81d720022370380a3607548e7d48e9ea83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58760a81d720022370380a3607548e7d48e9ea83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58760a81d720022370380a3607548e7d48e9ea83"}], "stats": {"total": 171, "additions": 114, "deletions": 57}, "files": [{"sha": "3448d906d9521d78ed7a3ad2f527535a5021ff3c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5f7a16ebc7931c798d266a2b172c856ef26531/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5f7a16ebc7931c798d266a2b172c856ef26531/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0d5f7a16ebc7931c798d266a2b172c856ef26531", "patch": "@@ -1,3 +1,13 @@\n+2008-09-28  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/unique_ptr.h (unique_ptr<_Tp[]>::template<typename U>\n+\tvoid reset(U)): Add as deleted function, per DR 821 [Ready].\n+\t* include/bits/unique_ptr.h: Prefer everywhere deleted to private\n+\tmember function declarations; minor formatting tweaks.\n+\t* testsuite/20_util/unique_ptr/modifiers/reset_neg.cc: New.\n+\t* testsuite/20_util/unique_ptr/assign/assign.cc: Adjust DejaGNU\n+\tdirectives.\n+\n 2008-09-28  Chris Fairles <cfairles@gcc.gnu.org>\n \n \t* include/std/mutex (try_lock): Implement generic try_lock."}, {"sha": "3123a79ccaecf4e6ea587105cfd132293dea7bc0", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5f7a16ebc7931c798d266a2b172c856ef26531/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5f7a16ebc7931c798d266a2b172c856ef26531/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=0d5f7a16ebc7931c798d266a2b172c856ef26531", "patch": "@@ -84,15 +84,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template <typename _Tp, typename _Tp_Deleter = default_delete<_Tp> > \n     class unique_ptr\n     {\n-      typedef _Tp* pointer;\n-      typedef unique_ptr<_Tp, _Tp_Deleter> __this_type;\n-      typedef std::tuple<pointer, _Tp_Deleter> __tuple_type;\n-      typedef __tuple_type __this_type::* __unspecified_bool_type;\n-      typedef pointer __this_type::* __unspecified_pointer_type;\n+      typedef unique_ptr<_Tp, _Tp_Deleter>   __this_type;\n+      typedef std::tuple<_Tp*, _Tp_Deleter>  __tuple_type;\n+      typedef __tuple_type __this_type::*    __unspecified_bool_type;\n+      typedef _Tp* __this_type::*            __unspecified_pointer_type;\n \n     public:\n-      typedef _Tp         element_type;      \n-      typedef _Tp_Deleter deleter_type;\n+      typedef _Tp*                    pointer;\n+      typedef _Tp                element_type;      \n+      typedef _Tp_Deleter        deleter_type;\n \n       // constructors\n       unique_ptr()\n@@ -195,7 +195,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       }\n \n       void\n-      reset(pointer __p = 0) \n+      reset(pointer __p = pointer())\n       {\n \tif (__p != get())\n \t  {\n@@ -206,23 +206,22 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       void\n       swap(unique_ptr&& __u)\n-      { using std::swap;\n+      {\n+\tusing std::swap;\n \tswap(_M_t, __u._M_t);\n       }\n \n-    private: \n       // disable copy from lvalue\n-      unique_ptr(const unique_ptr&);\n+      unique_ptr(const unique_ptr&) = delete;\n \n       template<typename _Up, typename _Up_Deleter> \n-        unique_ptr(const unique_ptr<_Up, _Up_Deleter>&);\n-      \n-      // disable assignment from lvalue\n-      unique_ptr& operator=(const unique_ptr&);\n+        unique_ptr(const unique_ptr<_Up, _Up_Deleter>&) = delete;\n+\n+      unique_ptr& operator=(const unique_ptr&) = delete;\n \n       template<typename _Up, typename _Up_Deleter> \n-        unique_ptr& operator=(const unique_ptr<_Up, _Up_Deleter>&);\n-      \n+        unique_ptr& operator=(const unique_ptr<_Up, _Up_Deleter>&) = delete;\n+\n     private:\n       __tuple_type _M_t;\n   };\n@@ -234,15 +233,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _Tp, typename _Tp_Deleter> \n     class unique_ptr<_Tp[], _Tp_Deleter>\n     {\n-      typedef _Tp* pointer;\n-      typedef unique_ptr<_Tp[], _Tp_Deleter> __this_type;\n-      typedef std::tuple<pointer, _Tp_Deleter> __tuple_type;\n-      typedef __tuple_type __this_type::* __unspecified_bool_type;\n-      typedef pointer __this_type::* __unspecified_pointer_type;\n+      typedef unique_ptr<_Tp[], _Tp_Deleter>  __this_type;\n+      typedef std::tuple<_Tp*, _Tp_Deleter>   __tuple_type;\n+      typedef __tuple_type __this_type::*     __unspecified_bool_type;\n+      typedef _Tp* __this_type::*             __unspecified_pointer_type;\n+\n     public:\n-      typedef _Tp         element_type;      \n-      typedef _Tp_Deleter deleter_type;\n-    \n+      typedef _Tp*                    pointer;\n+      typedef _Tp                element_type;      \n+      typedef _Tp_Deleter        deleter_type;\n+\n       // constructors\n       unique_ptr()\n       : _M_t(pointer(), deleter_type())\n@@ -338,7 +338,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       }\n \n       void\n-      reset(pointer __p = 0) \n+      reset(pointer __p = pointer()) \n       {\n \tif (__p != get())\n \t{\n@@ -347,73 +347,73 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t}\n       }\n \n+      // DR 821.\n+      template<typename _Up>\n+        void reset(_Up) = delete;\n+\n       void\n       swap(unique_ptr&& __u)\n       {\n \tusing std::swap;\n \tswap(_M_t, __u._M_t);\n       }\n \n-    private:\n       // disable copy from lvalue\n-      unique_ptr(const unique_ptr&);\n-      unique_ptr& operator=(const unique_ptr&);\n+      unique_ptr(const unique_ptr&) = delete;\n+      unique_ptr& operator=(const unique_ptr&) = delete;\n \n       // disable construction from convertible pointer types\n       // (N2315 - 20.6.5.3.1)\n-      template<typename _Up> unique_ptr(_Up*,\n-        typename std::conditional<std::is_reference<deleter_type>::value, \n-          deleter_type, const deleter_type&>::type,\n-            typename std::enable_if<std::is_convertible<_Up*, \n-                pointer>::value>::type* = 0);\n-\n-      template<typename _Up> unique_ptr(_Up*,\n-        typename std::remove_reference<deleter_type>::type&&,\n-          typename std::enable_if<std::is_convertible<_Up*, \n-              pointer>::value>::type* = 0);\n-\n-      template<typename _Up> explicit unique_ptr(_Up*,\n-        typename std::enable_if<std::is_convertible<_Up*, \n-            pointer>::value>::type* = 0);\n-\n-      // disable reset with convertible pointer types (N2315 - 20.6.5.3.3) \n       template<typename _Up>\n-        typename std::enable_if<std::is_convertible<_Up*,\n-          pointer>::value>::type reset(_Up*);\n-          \n+        unique_ptr(_Up*, typename\n+\t\t   std::conditional<std::is_reference<deleter_type>::value,\n+\t\t   deleter_type, const deleter_type&>::type,\n+\t\t   typename std::enable_if<std::is_convertible<_Up*, \n+\t\t   pointer>::value>::type* = 0) = delete;\n+\n+      template<typename _Up>\n+        unique_ptr(_Up*, typename std::remove_reference<deleter_type>::type&&,\n+\t\t   typename std::enable_if<std::is_convertible<_Up*, \n+\t\t   pointer>::value>::type* = 0) = delete;\n+\n+      template<typename _Up>\n+        explicit\n+        unique_ptr(_Up*, typename std::enable_if<std::is_convertible<_Up*, \n+\t\t   pointer>::value>::type* = 0) = delete;\n+\n     private:\n       __tuple_type _M_t;\n   };\n   \n   template<typename _Tp, typename _Tp_Deleter> \n     inline void\n-    swap(unique_ptr<_Tp, _Tp_Deleter>& __x, \n-\t unique_ptr<_Tp, _Tp_Deleter>& __y) \n+    swap(unique_ptr<_Tp, _Tp_Deleter>& __x,\n+\t unique_ptr<_Tp, _Tp_Deleter>& __y)\n     { __x.swap(__y); }\n \n   template<typename _Tp, typename _Tp_Deleter> \n     inline void\n-    swap(unique_ptr<_Tp, _Tp_Deleter>&& __x, \n+    swap(unique_ptr<_Tp, _Tp_Deleter>&& __x,\n \t unique_ptr<_Tp, _Tp_Deleter>& __y)\n     { __x.swap(__y); }\n \n   template<typename _Tp, typename _Tp_Deleter> \n     inline void\n-    swap(unique_ptr<_Tp, _Tp_Deleter>& __x, \n+    swap(unique_ptr<_Tp, _Tp_Deleter>& __x,\n \t unique_ptr<_Tp, _Tp_Deleter>&& __y)\n     { __x.swap(__y); }\n   \n   template<typename _Tp, typename _Tp_Deleter,\n \t   typename _Up, typename _Up_Deleter>\n     inline bool\n-    operator==(const unique_ptr<_Tp, _Tp_Deleter>& __x, \n+    operator==(const unique_ptr<_Tp, _Tp_Deleter>& __x,\n \t       const unique_ptr<_Up, _Up_Deleter>& __y)\n     { return __x.get() == __y.get(); }\n \n   template<typename _Tp, typename _Tp_Deleter,\n \t   typename _Up, typename _Up_Deleter>\n     inline bool\n-    operator!=(const unique_ptr<_Tp, _Tp_Deleter>& __x, \n+    operator!=(const unique_ptr<_Tp, _Tp_Deleter>& __x,\n \t       const unique_ptr<_Up, _Up_Deleter>& __y)\n     { return !(__x.get() == __y.get()); }\n "}, {"sha": "3ccc8701a0cdfbddfa53240b04266f69c25baeb2", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/assign/assign.cc", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5f7a16ebc7931c798d266a2b172c856ef26531/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5f7a16ebc7931c798d266a2b172c856ef26531/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2Fassign.cc?ref=0d5f7a16ebc7931c798d266a2b172c856ef26531", "patch": "@@ -40,13 +40,20 @@ void\n test02()\n {\n   std::unique_ptr<int[]> p1(new int(420));\n-  std::unique_ptr<int[]> p2 = p1; // { dg-error \"within this context\" }\n+  std::unique_ptr<int[]> p2 = p1;\n }\n \n void\n test03()\n {\n   std::unique_ptr<int[2]> p1(new int[3]);\n-  std::unique_ptr<int[2]> p2 = p1; // { dg-error \"within this context\" }\n+  std::unique_ptr<int[2]> p2 = p1;\n }\n-// { dg-excess-errors \"is private\" }\n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 43 }\n+// { dg-error \"no matching\" \"\" { target *-*-* } 49 }\n+// { dg-error \"used here\" \"\" { target *-*-* } 50 }\n+// { dg-error \"candidates are\" \"\" { target *-*-* } 215 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 215 }\n+// { dg-error \"deleted function\" \"\" { target *-*-* } 362 }\n+// { dg-excess-errors \"note\" }"}, {"sha": "37fcb6c9ed93439906d5d2cc91dbda42ec0da3c6", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/modifiers/reset_neg.cc", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d5f7a16ebc7931c798d266a2b172c856ef26531/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d5f7a16ebc7931c798d266a2b172c856ef26531/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fmodifiers%2Freset_neg.cc?ref=0d5f7a16ebc7931c798d266a2b172c856ef26531", "patch": "@@ -0,0 +1,40 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2008 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <memory>\n+\n+struct A\n+{\n+};\n+\n+struct B : A\n+{\n+  virtual ~B() { }\n+};\n+\n+void test01()\n+{\n+  std::unique_ptr<B[]> up;\n+  up.reset(new A[3]);\n+}\n+\n+// { dg-error \"used here\" \"\" { target *-*-* } 36 } \n+// { dg-error \"deleted function\" \"\" { target *-*-* } 352 }"}]}