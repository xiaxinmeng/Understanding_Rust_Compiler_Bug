{"sha": "5d2a63dc7bb7942ba287323d89cdf622015c1e39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQyYTYzZGM3YmI3OTQyYmEyODczMjNkODljZGY2MjIwMTVjMWUzOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-02-29T09:16:57Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-02-29T09:16:57Z"}, "message": "trans.c (finalize_nrv_r): Remove obsolete code.\n\n\t* gcc-interface/trans.c (finalize_nrv_r): Remove obsolete code.\n\t(build_return_expr): Likewise.\n\t(Call_to_gnu): If this is a function call and there is no target,\n\tcreate a temporary for the return value for all aggregate types,\n\tbut never create it for a return statement.  Push a binding level\n\taround the call in more cases.  Remove obsolete code.\n\nFrom-SVN: r233805", "tree": {"sha": "0f91e6f86c4456a140d2c8b71d841a7ce8f81252", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f91e6f86c4456a140d2c8b71d841a7ce8f81252"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d2a63dc7bb7942ba287323d89cdf622015c1e39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d2a63dc7bb7942ba287323d89cdf622015c1e39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d2a63dc7bb7942ba287323d89cdf622015c1e39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d2a63dc7bb7942ba287323d89cdf622015c1e39/comments", "author": null, "committer": null, "parents": [{"sha": "93e708f9c3dba10010b56e897fbb89f93d10a21b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e708f9c3dba10010b56e897fbb89f93d10a21b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93e708f9c3dba10010b56e897fbb89f93d10a21b"}], "stats": {"total": 126, "additions": 79, "deletions": 47}, "files": [{"sha": "9fcf75ccf6e476c4263584e641ef7e2ea72d6599", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2a63dc7bb7942ba287323d89cdf622015c1e39/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2a63dc7bb7942ba287323d89cdf622015c1e39/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5d2a63dc7bb7942ba287323d89cdf622015c1e39", "patch": "@@ -1,3 +1,12 @@\n+2016-02-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (finalize_nrv_r): Remove obsolete code.\n+\t(build_return_expr): Likewise.\n+\t(Call_to_gnu): If this is a function call and there is no target,\n+\tcreate a temporary for the return value for all aggregate types,\n+\tbut never create it for a return statement.  Push a binding level\n+\taround the call in more cases.  Remove obsolete code.\n+\n 2016-02-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/ada-tree.h (DECL_RETURN_VALUE_P): New macro."}, {"sha": "c78b01b177afd58261fc54a850b10e985b1bc07e", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 30, "deletions": 47, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2a63dc7bb7942ba287323d89cdf622015c1e39/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2a63dc7bb7942ba287323d89cdf622015c1e39/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=5d2a63dc7bb7942ba287323d89cdf622015c1e39", "patch": "@@ -3330,32 +3330,14 @@ finalize_nrv_r (tree *tp, int *walk_subtrees, void *data)\n   else if (TREE_CODE (t) == RETURN_EXPR\n \t   && TREE_CODE (TREE_OPERAND (t, 0)) == INIT_EXPR)\n     {\n-      tree ret_val = TREE_OPERAND (TREE_OPERAND (t, 0), 1), init_expr;\n-\n-      /* If this is the temporary created for a return value with variable\n-\t size in Call_to_gnu, we replace the RHS with the init expression.  */\n-      if (TREE_CODE (ret_val) == COMPOUND_EXPR\n-\t  && TREE_CODE (TREE_OPERAND (ret_val, 0)) == INIT_EXPR\n-\t  && TREE_OPERAND (TREE_OPERAND (ret_val, 0), 0)\n-\t     == TREE_OPERAND (ret_val, 1))\n-\t{\n-\t  init_expr = TREE_OPERAND (TREE_OPERAND (ret_val, 0), 1);\n-\t  ret_val = TREE_OPERAND (ret_val, 1);\n-\t}\n-      else\n-\tinit_expr = NULL_TREE;\n+      tree ret_val = TREE_OPERAND (TREE_OPERAND (t, 0), 1);\n \n       /* Strip useless conversions around the return value.  */\n       if (gnat_useless_type_conversion (ret_val))\n \tret_val = TREE_OPERAND (ret_val, 0);\n \n       if (is_nrv_p (dp->nrv, ret_val))\n-\t{\n-\t  if (init_expr)\n-\t    TREE_OPERAND (TREE_OPERAND (t, 0), 1) = init_expr;\n-\t  else\n-\t    TREE_OPERAND (t, 0) = dp->result;\n-\t}\n+\tTREE_OPERAND (t, 0) = dp->result;\n     }\n \n   /* Replace the DECL_EXPR of NRVs with an initialization of the RESULT_DECL,\n@@ -3659,14 +3641,6 @@ build_return_expr (tree ret_obj, tree ret_val)\n \t  && TYPE_MODE (operation_type) == BLKmode\n \t  && aggregate_value_p (operation_type, current_function_decl))\n \t{\n-\t  /* Recognize the temporary created for a return value with variable\n-\t     size in Call_to_gnu.  We want to eliminate it if possible.  */\n-\t  if (TREE_CODE (ret_val) == COMPOUND_EXPR\n-\t      && TREE_CODE (TREE_OPERAND (ret_val, 0)) == INIT_EXPR\n-\t      && TREE_OPERAND (TREE_OPERAND (ret_val, 0), 0)\n-\t\t == TREE_OPERAND (ret_val, 1))\n-\t    ret_val = TREE_OPERAND (ret_val, 1);\n-\n \t  /* Strip useless conversions around the return value.  */\n \t  if (gnat_useless_type_conversion (ret_val))\n \t    ret_val = TREE_OPERAND (ret_val, 0);\n@@ -4314,22 +4288,32 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t  because we need to preserve the return value before copying back the\n \t  parameters.\n \n-       2. There is no target and this is neither an object nor a renaming\n-\t  declaration, and the return type has variable size, because in\n-\t  these cases the gimplifier cannot create the temporary.\n+       2. There is no target and the call is made for neither an object nor a\n+\t  renaming declaration, nor a return statement, and the return type has\n+\t  variable size, because in this case the gimplifier cannot create the\n+\t  temporary, or more generally is simply an aggregate type, because the\n+\t  gimplifier would create the temporary in the outermost scope instead\n+\t  of locally.\n \n        3. There is a target and it is a slice or an array with fixed size,\n \t  and the return type has variable size, because the gimplifier\n \t  doesn't handle these cases.\n \n+       4. There is no target and we have misaligned In Out or Out parameters\n+\t  passed by reference, because we need to preserve the return value\n+\t  before copying back the parameters.  However, in this case, we'll\n+\t  defer creating the temporary, see below.\n+\n      This must be done before we push a binding level around the call, since\n      we will pop it before copying the return value.  */\n   if (function_call\n       && ((!gnu_target && TYPE_CI_CO_LIST (gnu_subprog_type))\n \t  || (!gnu_target\n \t      && Nkind (Parent (gnat_node)) != N_Object_Declaration\n \t      && Nkind (Parent (gnat_node)) != N_Object_Renaming_Declaration\n-\t      && TREE_CODE (TYPE_SIZE (gnu_result_type)) != INTEGER_CST)\n+\t      && Nkind (Parent (gnat_node)) != N_Simple_Return_Statement\n+\t      && AGGREGATE_TYPE_P (gnu_result_type)\n+\t      && !TYPE_IS_FAT_POINTER_P (gnu_result_type))\n \t  || (gnu_target\n \t      && (TREE_CODE (gnu_target) == ARRAY_RANGE_REF\n \t\t  || (TREE_CODE (TREE_TYPE (gnu_target)) == ARRAY_TYPE\n@@ -4341,6 +4325,16 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n       DECL_RETURN_VALUE_P (gnu_retval) = 1;\n     }\n \n+  /* If we don't need a value or have already created it, push a binding level\n+     around the call.  This will narrow the lifetime of the temporaries we may\n+     need to make when translating the parameters as much as possible.  */\n+  if (!returning_value || gnu_retval)\n+    {\n+      start_stmt_group ();\n+      gnat_pushlevel ();\n+      pushed_binding_level = true;\n+    }\n+\n   /* Create the list of the actual parameters as GCC expects it, namely a\n      chain of TREE_LIST nodes in which the TREE_VALUE field of each node\n      is an expression and the TREE_PURPOSE field is null.  But skip Out\n@@ -4469,12 +4463,10 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t      DECL_RETURN_VALUE_P (gnu_retval) = 1;\n \t    }\n \n-\t  /* If we haven't pushed a binding level, push a new one.  This will\n-\t     narrow the lifetime of the temporary we are about to make as much\n-\t     as possible.  The drawback is that we'd need to create a temporary\n-\t     for the return value, if any (see comment before the loop).  So do\n-\t     it only when this temporary was already created just above.  */\n-\t  if (!pushed_binding_level && !(in_param && returning_value))\n+\t  /* If we haven't pushed a binding level, push it now.  This will\n+\t     narrow the lifetime of the temporary we are about to make as\n+\t     much as possible.  */\n+\t  if (!pushed_binding_level && (!returning_value || gnu_retval))\n \t    {\n \t      start_stmt_group ();\n \t      gnat_pushlevel ();\n@@ -4705,15 +4697,6 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t  if (!gnu_retval)\n \t    {\n \t      tree gnu_stmt;\n-\t      /* If we haven't pushed a binding level, push a new one.  This\n-\t\t will narrow the lifetime of the temporary we are about to\n-\t\t make as much as possible.  */\n-\t      if (!pushed_binding_level)\n-\t\t{\n-\t\t  start_stmt_group ();\n-\t\t  gnat_pushlevel ();\n-\t\t  pushed_binding_level = true;\n-\t        }\n \t      gnu_call\n \t\t= create_init_temporary (\"P\", gnu_call, &gnu_stmt, gnat_node);\n \t      append_to_statement_list (gnu_stmt, &gnu_stmt_list);"}, {"sha": "4e85314e00bcf1a61088a6d7d417f189e9a21c65", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2a63dc7bb7942ba287323d89cdf622015c1e39/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2a63dc7bb7942ba287323d89cdf622015c1e39/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d2a63dc7bb7942ba287323d89cdf622015c1e39", "patch": "@@ -1,3 +1,8 @@\n+2016-02-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/stack_usage3.adb: New test.\n+\t* gnat.dg/stack_usage3_pkg.ads: New helper.\n+\n 2016-02-29  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/renaming8.adb: New test."}, {"sha": "fcc5cacf70722b5f6ef29e12d0e5d50cf2c55d2c", "filename": "gcc/testsuite/gnat.dg/stack_usage3.adb", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2a63dc7bb7942ba287323d89cdf622015c1e39/gcc%2Ftestsuite%2Fgnat.dg%2Fstack_usage3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2a63dc7bb7942ba287323d89cdf622015c1e39/gcc%2Ftestsuite%2Fgnat.dg%2Fstack_usage3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fstack_usage3.adb?ref=5d2a63dc7bb7942ba287323d89cdf622015c1e39", "patch": "@@ -0,0 +1,28 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O -fstack-usage\" }\n+\n+with Ada.Text_IO; use Ada.Text_IO;\n+with Stack_Usage3_Pkg; use Stack_Usage3_Pkg;\n+\n+procedure Stack_Usage3 is\n+\n+begin\n+   Put_Line (Diag (\"Diag line 0\"));\n+   Put_Line (Diag (\"Diag line 1\"));\n+   Put_Line (Diag (\"Diag line 2\"));\n+   Put_Line (Diag (\"Diag line 3\"));\n+   Put_Line (Diag (\"Diag line 4\"));\n+   Put_Line (Diag (\"Diag line 5\"));\n+   Put_Line (Diag (\"Diag line 6\"));\n+   Put_Line (Diag (\"Diag line 7\"));\n+   Put_Line (Diag (\"Diag line 8\"));\n+   Put_Line (Diag (\"Diag line 9\"));\n+   Put_Line (Diag (\"Diag line 10\"));\n+   Put_Line (Diag (\"Diag line 11\"));\n+   Put_Line (Diag (\"Diag line 12\"));\n+   Put_Line (Diag (\"Diag line 13\"));\n+   Put_Line (Diag (\"Diag line 14\"));\n+end;\n+\n+-- { dg-final { scan-stack-usage \"\\t\\[0-9\\]\\[0-9\\]\\t\" { target i?86-*-* x86_64-*-* } } }\n+-- { dg-final { cleanup-stack-usage } }"}, {"sha": "e4a80c3ff71a2a5f2f213c6bda231cf9baaa24b5", "filename": "gcc/testsuite/gnat.dg/stack_usage3_pkg.ads", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d2a63dc7bb7942ba287323d89cdf622015c1e39/gcc%2Ftestsuite%2Fgnat.dg%2Fstack_usage3_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d2a63dc7bb7942ba287323d89cdf622015c1e39/gcc%2Ftestsuite%2Fgnat.dg%2Fstack_usage3_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fstack_usage3_pkg.ads?ref=5d2a63dc7bb7942ba287323d89cdf622015c1e39", "patch": "@@ -0,0 +1,7 @@\n+package Stack_Usage3_Pkg is\n+\n+   subtype Small_String is String (1..80);\n+\n+   function Diag (S : String) return Small_String;\n+\n+end Stack_Usage3_Pkg;"}]}