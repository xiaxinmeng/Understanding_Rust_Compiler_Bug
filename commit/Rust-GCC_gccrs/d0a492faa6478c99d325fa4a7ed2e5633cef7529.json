{"sha": "d0a492faa6478c99d325fa4a7ed2e5633cef7529", "node_id": "C_kwDOANBUbNoAKGQwYTQ5MmZhYTY0NzhjOTlkMzI1ZmE0YTdlZDJlNTYzM2NlZjc1Mjk", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-11-06T16:09:26Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-11-06T16:09:26Z"}, "message": "c++: correct __has_attribute(init_priority)\n\nCurrently __has_attribute(init_priority) always returns true, even on\ntargets that don't actually support init priorities, and when using the\nattribute on such targets we just get a hard error about them being\nunsupported.  This makes it impossible to conditionally use the attribute\nby querying __has_attribute.\n\nThis patch fixes this by including init_priority in the attribute table\nonly if the target supports init priorities.  Thus on such targets\n__has_attribute(init_priority) will now return false and we'll treat it\nas just another unrecognized attribute (e.g. using it gives a -Wattribute\nwarning instead of a hard error).\n\ngcc/cp/ChangeLog:\n\n\t* tree.cc (cxx_attribute_table): Include init_priority entry\n\tonly if SUPPORTS_INIT_PRIORITY.\n\t(handle_init_priority_attribute): Add ATTRIBUTE_UNUSED.  Assert\n\tSUPPORTS_INIT_PRIORITY is true.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/special/initpri3.C: New test.", "tree": {"sha": "733fcf33b077d090c956b85e6d13a6307bc1aebe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/733fcf33b077d090c956b85e6d13a6307bc1aebe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0a492faa6478c99d325fa4a7ed2e5633cef7529", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a492faa6478c99d325fa4a7ed2e5633cef7529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0a492faa6478c99d325fa4a7ed2e5633cef7529", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0a492faa6478c99d325fa4a7ed2e5633cef7529/comments", "author": null, "committer": null, "parents": [{"sha": "89d0a14a1fdf89d38d9db1156ffde8c1b276823c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d0a14a1fdf89d38d9db1156ffde8c1b276823c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89d0a14a1fdf89d38d9db1156ffde8c1b276823c"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "c30bbeb0839ec0f45392cb43bac87a206d973b14", "filename": "gcc/cp/tree.cc", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a492faa6478c99d325fa4a7ed2e5633cef7529/gcc%2Fcp%2Ftree.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a492faa6478c99d325fa4a7ed2e5633cef7529/gcc%2Fcp%2Ftree.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.cc?ref=d0a492faa6478c99d325fa4a7ed2e5633cef7529", "patch": "@@ -5010,8 +5010,10 @@ const struct attribute_spec cxx_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n        affects_type_identity, handler, exclude } */\n+#if SUPPORTS_INIT_PRIORITY\n   { \"init_priority\",  1, 1, true,  false, false, false,\n     handle_init_priority_attribute, NULL },\n+#endif\n   { \"abi_tag\", 1, -1, false, false, false, true,\n     handle_abi_tag_attribute, NULL },\n   { NULL, 0, 0, false, false, false, false, NULL, NULL }\n@@ -5039,7 +5041,7 @@ const struct attribute_spec std_attribute_table[] =\n \n /* Handle an \"init_priority\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n-static tree\n+ATTRIBUTE_UNUSED static tree\n handle_init_priority_attribute (tree* node,\n \t\t\t\ttree name,\n \t\t\t\ttree args,\n@@ -5103,18 +5105,10 @@ handle_init_priority_attribute (tree* node,\n \t pri);\n     }\n \n-  if (SUPPORTS_INIT_PRIORITY)\n-    {\n-      SET_DECL_INIT_PRIORITY (decl, pri);\n-      DECL_HAS_INIT_PRIORITY_P (decl) = 1;\n-      return NULL_TREE;\n-    }\n-  else\n-    {\n-      error (\"%qE attribute is not supported on this platform\", name);\n-      *no_add_attrs = true;\n-      return NULL_TREE;\n-    }\n+  gcc_assert (SUPPORTS_INIT_PRIORITY);\n+  SET_DECL_INIT_PRIORITY (decl, pri);\n+  DECL_HAS_INIT_PRIORITY_P (decl) = 1;\n+  return NULL_TREE;\n }\n \n /* DECL is being redeclared; the old declaration had the abi tags in OLD,"}, {"sha": "3d745a42a6a4561dc7b4ae00915c3dc825fe1d81", "filename": "gcc/testsuite/g++.dg/special/initpri3.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0a492faa6478c99d325fa4a7ed2e5633cef7529/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Finitpri3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0a492faa6478c99d325fa4a7ed2e5633cef7529/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Finitpri3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspecial%2Finitpri3.C?ref=d0a492faa6478c99d325fa4a7ed2e5633cef7529", "patch": "@@ -0,0 +1,10 @@\n+// Verify __has_attribute(init_priority) is false on targets that\n+// don't support init priorities, and is treated as an unrecognized\n+// attribute in that case.\n+\n+#if !__has_attribute(init_priority)\n+#error unsupported // { dg-error \"\" \"\" { target { ! init_priority } } }\n+#endif\n+\n+struct A { A(); } a __attribute__((init_priority(500)));\n+// { dg-warning \"attribute directive ignored\" \"\" { target { ! init_priority } } .-1 }"}]}