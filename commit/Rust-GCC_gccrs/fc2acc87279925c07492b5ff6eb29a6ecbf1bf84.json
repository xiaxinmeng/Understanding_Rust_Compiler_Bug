{"sha": "fc2acc87279925c07492b5ff6eb29a6ecbf1bf84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMyYWNjODcyNzk5MjVjMDc0OTJiNWZmNmViMjlhNmVjYmYxYmY4NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-07-28T18:23:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-07-28T18:23:04Z"}, "message": "mn10300.c (mn10300_builtin_saveregs): Use get_varargs_alias_set and tag the spill mems.\n\n        * mn10300.c (mn10300_builtin_saveregs): Use get_varargs_alias_set\n        and tag the spill mems.\n        (mn10300_va_start): New.\n        (mn10300_va_arg): New.\n        * mn10300.h (EXPAND_BUILTIN_VA_START): New.\n        (EXPAND_BUILTIN_VA_ARG): New.\n\nFrom-SVN: r28316", "tree": {"sha": "017013dd4d2cab3d22239a72055d08ed9a72f07c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/017013dd4d2cab3d22239a72055d08ed9a72f07c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc2acc87279925c07492b5ff6eb29a6ecbf1bf84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc2acc87279925c07492b5ff6eb29a6ecbf1bf84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc2acc87279925c07492b5ff6eb29a6ecbf1bf84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc2acc87279925c07492b5ff6eb29a6ecbf1bf84/comments", "author": null, "committer": null, "parents": [{"sha": "8bb793f37f0c9b0c9003a0d8509a0da8198807e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bb793f37f0c9b0c9003a0d8509a0da8198807e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bb793f37f0c9b0c9003a0d8509a0da8198807e0"}], "stats": {"total": 87, "additions": 79, "deletions": 8}, "files": [{"sha": "a25c1a065a41c0d61e60ec1f13c5ecd82bd6195a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc2acc87279925c07492b5ff6eb29a6ecbf1bf84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc2acc87279925c07492b5ff6eb29a6ecbf1bf84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc2acc87279925c07492b5ff6eb29a6ecbf1bf84", "patch": "@@ -1,3 +1,12 @@\n+Wed Jul 28 11:22:21 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* mn10300.c (mn10300_builtin_saveregs): Use get_varargs_alias_set\n+\tand tag the spill mems.\n+\t(mn10300_va_start): New.\n+\t(mn10300_va_arg): New.\n+\t* mn10300.h (EXPAND_BUILTIN_VA_START): New.\n+\t(EXPAND_BUILTIN_VA_ARG): New.\n+\n Wed Jul 28 11:20:19 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* mn10200.c (mn10200_va_arg): New."}, {"sha": "cf84e4810a12268e5d1133d4da34a3f29651a96f", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 60, "deletions": 7, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc2acc87279925c07492b5ff6eb29a6ecbf1bf84/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc2acc87279925c07492b5ff6eb29a6ecbf1bf84/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=fc2acc87279925c07492b5ff6eb29a6ecbf1bf84", "patch": "@@ -629,29 +629,82 @@ initial_offset (from, to)\n rtx\n mn10300_builtin_saveregs ()\n {\n-  rtx offset;\n+  rtx offset, mem;\n   tree fntype = TREE_TYPE (current_function_decl);\n   int argadj = ((!(TYPE_ARG_TYPES (fntype) != 0\n                    && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (fntype)))\n                        != void_type_node)))\n                 ? UNITS_PER_WORD : 0);\n+  int set = get_varargs_alias_set ();\n \n   if (argadj)\n     offset = plus_constant (current_function_arg_offset_rtx, argadj);\n   else\n     offset = current_function_arg_offset_rtx;\n \n-  emit_move_insn (gen_rtx (MEM, SImode, current_function_internal_arg_pointer),\n-\t\t  gen_rtx (REG, SImode, 0));\n-  emit_move_insn (gen_rtx (MEM, SImode,\n-\t\t\t   plus_constant\n-\t\t\t     (current_function_internal_arg_pointer, 4)),\n-\t\t  gen_rtx (REG, SImode, 1));\n+  mem = gen_rtx_MEM (SImode, current_function_internal_arg_pointer);\n+  MEM_ALIAS_SET (mem) = set;\n+  emit_move_insn (mem, gen_rtx_REG (SImode, 0));\n+\n+  mem = gen_rtx_MEM (SImode,\n+\t\t     plus_constant (current_function_internal_arg_pointer, 4));\n+  MEM_ALIAS_SET (mem) = set;\n+  emit_move_insn (mem, gen_rtx_REG (SImode, 1));\n+\n   return copy_to_reg (expand_binop (Pmode, add_optab,\n \t\t\t\t    current_function_internal_arg_pointer,\n \t\t\t\t    offset, 0, 0, OPTAB_LIB_WIDEN));\n }\n \n+void\n+mn10300_va_start (stdarg_p, valist, nextarg)\n+     int stdarg_p;\n+     tree valist;\n+     rtx nextarg;\n+{\n+  if (stdarg_p)\n+    nextarg = expand_builtin_saveregs ();\n+\n+  std_expand_builtin_va_start (stdarg_p, valist, nextarg);\n+}\n+\n+rtx\n+mn10300_va_arg (valist, type)\n+     tree valist, type;\n+{\n+  HOST_WIDE_INT align, rsize;\n+  tree t, ptr, pptr;\n+\n+  /* Compute the rounded size of the type.  */\n+  align = PARM_BOUNDARY / BITS_PER_UNIT;\n+  rsize = (((int_size_in_bytes (type) + align - 1) / align) * align);\n+\n+  t = build (POSTINCREMENT_EXPR, TREE_TYPE (valist), valist, \n+\t     build_int_2 ((rsize > 8 ? 4 : rsize), 0));\n+  TREE_SIDE_EFFECTS (t) = 1;\n+\n+  ptr = build_pointer_type (type);\n+\n+  /* \"Large\" types are passed by reference.  */\n+  if (rsize > 8)\n+    {\n+      pptr = build_pointer_type (ptr);\n+      t = build1 (NOP_EXPR, pptr, t);\n+      TREE_SIDE_EFFECTS (t) = 1;\n+\n+      t = build1 (INDIRECT_REF, ptr, t);\n+      TREE_SIDE_EFFECTS (t) = 1;\n+    }\n+  else\n+    {\n+      t = build1 (NOP_EXPR, ptr, t);\n+      TREE_SIDE_EFFECTS (t) = 1;\n+    }\n+\n+  /* Calculate!  */\n+  return expand_expr (t, NULL_RTX, Pmode, EXPAND_NORMAL);\n+}\n+\n /* Return an RTX to represent where a value with mode MODE will be returned\n    from a function.  If the result is 0, the argument is pushed.  */\n "}, {"sha": "548ce8294332f5c0971714e5e63dd7f31c0118af", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc2acc87279925c07492b5ff6eb29a6ecbf1bf84/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc2acc87279925c07492b5ff6eb29a6ecbf1bf84/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=fc2acc87279925c07492b5ff6eb29a6ecbf1bf84", "patch": "@@ -472,7 +472,6 @@ extern struct rtx_def *function_arg ();\n \n #define FUNCTION_ARG_PARTIAL_NREGS(CUM, MODE, TYPE, NAMED) \\\n   function_arg_partial_nregs (&CUM, MODE, TYPE, NAMED)\n-\n \f\n #define FUNCTION_ARG_PASS_BY_REFERENCE(CUM, MODE, TYPE, NAMED)\t\t\\\n   ((TYPE) && int_size_in_bytes (TYPE) > 8)\n@@ -572,6 +571,16 @@ extern struct rtx_def *function_arg ();\n extern struct rtx_def *mn10300_builtin_saveregs ();\n #define EXPAND_BUILTIN_SAVEREGS() mn10300_builtin_saveregs ()\n \n+/* Implement `va_start' for varargs and stdarg.  */\n+extern void mn10300_va_start();\n+#define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n+  mn10300_va_start (stdarg, valist, nextarg)\n+\n+/* Implement `va_arg'.  */\n+extern struct rtx_def *mn10300_va_arg();\n+#define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n+  mn10300_va_arg (valist, type)\n+\n /* Addressing modes, and classification of registers for them.  */\n \n \f"}]}