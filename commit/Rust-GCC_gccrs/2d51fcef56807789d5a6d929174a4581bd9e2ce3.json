{"sha": "2d51fcef56807789d5a6d929174a4581bd9e2ce3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ1MWZjZWY1NjgwNzc4OWQ1YTZkOTI5MTc0YTQ1ODFiZDllMmNlMw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-10-30T17:22:12Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-10-30T17:22:12Z"}, "message": "c-objc-common.c (c_tree_printer): For a typedef name, print the stripped version as well, if they're not the same.\n\n\t* c-objc-common.c (c_tree_printer) <case 'T'>: For a typedef name,\n\tprint the stripped version as well, if they're not the same.\n\n\t* gcc.dg/diag-aka-1.c: New test.\n\t* gcc.dg/pr13804-1.c: Adjust dg-error.\n\t* gcc.dg/redecl-14.c: Likewise.\n\t* gcc.dg/pr56980.c: Adjust dg-message.\n\nFrom-SVN: r216941", "tree": {"sha": "2fd76e3280f97f23caaf399ce9bfb9c9683bd287", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fd76e3280f97f23caaf399ce9bfb9c9683bd287"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d51fcef56807789d5a6d929174a4581bd9e2ce3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d51fcef56807789d5a6d929174a4581bd9e2ce3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d51fcef56807789d5a6d929174a4581bd9e2ce3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d51fcef56807789d5a6d929174a4581bd9e2ce3/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f1308e4b82467d9293ed989ff3e5a191a76fbef4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1308e4b82467d9293ed989ff3e5a191a76fbef4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1308e4b82467d9293ed989ff3e5a191a76fbef4"}], "stats": {"total": 116, "additions": 91, "deletions": 25}, "files": [{"sha": "24781e1b7a2198b091f89c60b0e5cd82eb20cae7", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d51fcef56807789d5a6d929174a4581bd9e2ce3/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d51fcef56807789d5a6d929174a4581bd9e2ce3/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=2d51fcef56807789d5a6d929174a4581bd9e2ce3", "patch": "@@ -1,3 +1,8 @@\n+2014-10-30  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-objc-common.c (c_tree_printer) <case 'T'>: For a typedef name,\n+\tprint the stripped version as well, if they're not the same.\n+\n 2014-10-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* c-decl.c, c-tree.h, c-typeck.c: Remove redundant enum from"}, {"sha": "64481a5b7ac5074bb63a090a5594fca0400d6fa4", "filename": "gcc/c/c-objc-common.c", "status": "modified", "additions": 41, "deletions": 16, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d51fcef56807789d5a6d929174a4581bd9e2ce3/gcc%2Fc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d51fcef56807789d5a6d929174a4581bd9e2ce3/gcc%2Fc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.c?ref=2d51fcef56807789d5a6d929174a4581bd9e2ce3", "patch": "@@ -127,23 +127,48 @@ c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n       break;\n \n     case 'T':\n-      gcc_assert (TYPE_P (t));\n-      name = TYPE_NAME (t);\n-\n-      if (name && TREE_CODE (name) == TYPE_DECL)\n-\t{\n-\t  if (DECL_NAME (name))\n-\t    pp_identifier (cpp, lang_hooks.decl_printable_name (name, 2));\n-\t  else\n-\t    cpp->type_id (t);\n-\t  return true;\n-\t}\n-      else\n-\t{\n+      {\n+\tgcc_assert (TYPE_P (t));\n+\tstruct obstack *ob = pp_buffer (cpp)->obstack;\n+\tchar *p = (char *) obstack_base (ob);\n+\t/* Remember the end of the initial dump.  */\n+\tint len = obstack_object_size (ob);\n+\n+\tname = TYPE_NAME (t);\n+\tif (name && TREE_CODE (name) == TYPE_DECL && DECL_NAME (name))\n+\t  pp_identifier (cpp, lang_hooks.decl_printable_name (name, 2));\n+\telse\n \t  cpp->type_id (t);\n-\t  return true;\n-\t}\n-      break;\n+\n+\t/* If we're printing a type that involves typedefs, also print the\n+\t   stripped version.  But sometimes the stripped version looks\n+\t   exactly the same, so we don't want it after all.  To avoid\n+\t   printing it in that case, we play ugly obstack games.  */\n+\tif (TYPE_CANONICAL (t) && t != TYPE_CANONICAL (t))\n+\t  {\n+\t    c_pretty_printer cpp2;\n+\t    /* Print the stripped version into a temporary printer.  */\n+\t    cpp2.type_id (TYPE_CANONICAL (t));\n+\t    struct obstack *ob2 = cpp2.buffer->obstack;\n+\t    /* Get the stripped version from the temporary printer.  */\n+\t    const char *aka = (char *) obstack_base (ob2);\n+\t    int aka_len = obstack_object_size (ob2);\n+\t    int type1_len = obstack_object_size (ob) - len;\n+\n+\t    /* If they are identical, bail out.  */\n+\t    if (aka_len == type1_len && memcmp (p + len, aka, aka_len) == 0)\n+\t      return true;\n+\n+\t    /* They're not, print the stripped version now.  */\n+\t    pp_c_whitespace (cpp);\n+\t    pp_left_brace (cpp);\n+\t    pp_c_ws_string (cpp, _(\"aka\"));\n+\t    pp_c_whitespace (cpp);\n+\t    cpp->type_id (TYPE_CANONICAL (t));\n+\t    pp_right_brace (cpp);\n+\t  }\n+\treturn true;\n+      }\n \n     case 'E':\n       if (TREE_CODE (t) == IDENTIFIER_NODE)"}, {"sha": "3aa9b6b5a56ff15f2a1a615e38e7dcfd10c5dca6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d51fcef56807789d5a6d929174a4581bd9e2ce3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d51fcef56807789d5a6d929174a4581bd9e2ce3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d51fcef56807789d5a6d929174a4581bd9e2ce3", "patch": "@@ -1,3 +1,10 @@\n+2014-10-30  Marek Polacek  <polacek@redhat.com>\n+\n+\t* gcc.dg/diag-aka-1.c: New test.\n+\t* gcc.dg/pr13804-1.c: Adjust dg-error.\n+\t* gcc.dg/redecl-14.c: Likewise.\n+\t* gcc.dg/pr56980.c: Adjust dg-message.\n+\n 2014-10-30  Ian Lance Taylor  <iant@google.com>\n \n \t* gcc.misc-tests/godump-1.c: Skip if ! lp64."}, {"sha": "87bc75753e4f797bbaf6cd4dc099c4bc46743599", "filename": "gcc/testsuite/gcc.dg/diag-aka-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d51fcef56807789d5a6d929174a4581bd9e2ce3/gcc%2Ftestsuite%2Fgcc.dg%2Fdiag-aka-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d51fcef56807789d5a6d929174a4581bd9e2ce3/gcc%2Ftestsuite%2Fgcc.dg%2Fdiag-aka-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdiag-aka-1.c?ref=2d51fcef56807789d5a6d929174a4581bd9e2ce3", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wc++-compat\" } */\n+\n+typedef struct A { int i; } B;\n+typedef struct T { int i; } T;\n+typedef const float TFA;\n+typedef TFA TFB;\n+typedef TFB TFC;\n+typedef int IA[];\n+typedef IA *IAP;\n+extern IAP arr[];\n+\n+void fn1 (B *); /* { dg-message \"expected .B \\\\* {aka struct A \\\\*}. but argument is of type .struct B \\\\*.\" } */\n+void fn2 (TFC *);\n+\n+void \n+bar (B *b, int *i)\n+{\n+  fn1 ((struct B *) b); /* { dg-warning \"passing argument\" } */\n+  fn2 (i); /* { dg-warning \"passing argument\" } */\n+  sizeof (arr); /* { dg-error \"invalid application of .sizeof. to incomplete type .int \\\\(\\\\*\\\\\\[\\\\\\]\\\\)\\\\\\[\\\\\\].\" } */\n+}\n+\n+int\n+foo (void *a)\n+{\n+  T *t = a; /* { dg-warning \"request for implicit conversion from .void \\\\*. to .T \\\\* {aka struct T \\\\*}. not\" } */\n+  return t->i;\n+}"}, {"sha": "65b238a9b8fefdc6c4b8d6c510e9c262e8f925fc", "filename": "gcc/testsuite/gcc.dg/pr13804-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d51fcef56807789d5a6d929174a4581bd9e2ce3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr13804-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d51fcef56807789d5a6d929174a4581bd9e2ce3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr13804-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr13804-1.c?ref=2d51fcef56807789d5a6d929174a4581bd9e2ce3", "patch": "@@ -20,9 +20,9 @@ void\n f (void)\n {\n   x0.c; /* { dg-error \"'struct s0' has no member named 'c'\" } */\n-  x1.c; /* { dg-error \"'S0' has no member named 'c'\" } */\n+  x1.c; /* { dg-error \"'S0 {aka struct s0}' has no member named 'c'\" } */\n   x2.c; /* { dg-error \"'union u0' has no member named 'c'\" } */\n-  x3.c; /* { dg-error \"'U0' has no member named 'c'\" } */\n+  x3.c; /* { dg-error \"'U0 {aka union u0}' has no member named 'c'\" } */\n   x4->c; /* { dg-error \"'struct s0' has no member named 'c'\" } */\n   x5->c; /* { dg-error \"'union u0' has no member named 'c'\" } */\n }"}, {"sha": "27405efac4e3df1f46f10a92f21245032a36a40d", "filename": "gcc/testsuite/gcc.dg/pr56980.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d51fcef56807789d5a6d929174a4581bd9e2ce3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56980.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d51fcef56807789d5a6d929174a4581bd9e2ce3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56980.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr56980.c?ref=2d51fcef56807789d5a6d929174a4581bd9e2ce3", "patch": "@@ -5,12 +5,12 @@ typedef struct A { int i; } B;\n typedef union U { int i; } V;\n typedef enum E { G } F;\n \n-void foo_s (struct A); /* { dg-message \"expected .struct A. but argument is of type .B \\\\*.\" } */\n-void foo_u (union U); /* { dg-message \"expected .union U. but argument is of type .V \\\\*.\" } */\n-void foo_e (enum E); /* { dg-message \"expected .enum E. but argument is of type .F \\\\*.\" } */\n-void foo_sp (B *); /* { dg-message \"expected .B \\\\*. but argument is of type .struct B \\\\*.\" } */\n-void foo_up (V *); /* { dg-message \"expected .V \\\\*. but argument is of type .union V \\\\*.\" } */\n-void foo_ep (F *); /* { dg-message \"expected .F \\\\*. but argument is of type .enum F \\\\*.\" } */\n+void foo_s (struct A); /* { dg-message \"expected .struct A. but argument is of type .B \\\\* {aka struct A \\\\*}.\" } */\n+void foo_u (union U); /* { dg-message \"expected .union U. but argument is of type .V \\\\* {aka union U \\\\*}.\" } */\n+void foo_e (enum E); /* { dg-message \"expected .enum E. but argument is of type .F \\\\* {aka enum E \\\\*}.\" } */\n+void foo_sp (B *); /* { dg-message \"expected .B \\\\* {aka struct A \\\\*}. but argument is of type .struct B \\\\*.\" } */\n+void foo_up (V *); /* { dg-message \"expected .V \\\\* {aka union U \\\\*}. but argument is of type .union V \\\\*.\" } */\n+void foo_ep (F *); /* { dg-message \"expected .F \\\\* {aka enum E \\\\*}. but argument is of type .enum F \\\\*.\" } */\n \n void \n bar (B *b, V *v, F *f)"}, {"sha": "97003c1234b85152fd5b156ba6b61b1cc3b4d168", "filename": "gcc/testsuite/gcc.dg/redecl-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d51fcef56807789d5a6d929174a4581bd9e2ce3/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d51fcef56807789d5a6d929174a4581bd9e2ce3/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-14.c?ref=2d51fcef56807789d5a6d929174a4581bd9e2ce3", "patch": "@@ -18,5 +18,5 @@ f (void)\n   }\n   extern IAP a[];\n   extern IAP a[5];\n-  sizeof (*a[0]); /* { dg-error \"invalid application of 'sizeof' to incomplete type 'IA'\" } */\n+  sizeof (*a[0]); /* { dg-error \"invalid application of 'sizeof' to incomplete type 'IA {aka int\\\\\\[\\\\\\]}'\" } */\n }"}]}