{"sha": "498c0f2757190a22826576174616ab2403e2f4f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk4YzBmMjc1NzE5MGEyMjgyNjU3NjE3NDYxNmFiMjQwM2UyZjRmNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2004-06-10T08:08:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2004-06-10T08:08:02Z"}, "message": "re PR c++/14791 (13070 does not fix -Wformat with fprintf)\n\n\tPR c++/14791\n\t* tree.h (enum tree_index): Add TI_FILEPTR_TYPE.\n\t(fileptr_type_node): Define.\n\t* tree.c (build_common_tree_nodes_2): Initialize\n\tfileptr_type_node to ptr_type_node.\n\t* c-common.c (c_common_nodes_and_builtins): For C++, make\n\tfileptr_type_node a distinct type copy.\n\t* builtin-types.def (BT_FILEPTR, BT_FN_INT_CONST_STRING_FILEPTR,\n\tBT_FN_INT_INT_FILEPTR, BT_FN_INT_FILEPTR_CONST_STRING_VALIST_ARG,\n\tBT_FN_SIZE_CONST_PTR_SIZE_SIZE_FILEPTR,\n\tBT_FN_INT_FILEPTR_CONST_STRING_VAR): Add.\n\t(BT_FN_INT_CONST_STRING_PTR, BT_FN_INT_INT_PTR,\n\tBT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR, BT_FN_INT_PTR_CONST_STRING_VAR,\n\tBT_FN_INT_PTR_CONST_STRING_VALIST_ARG): Remove.\n\t* builtins.def (BUILT_IN_FPRINTF, BUILT_IN_FPRINTF_UNLOCKED,\n\tBUILT_IN_FPUTC, BUILT_IN_FPUTC_UNLOCKED, BUILT_IN_FPUTS,\n\tBUILT_IN_FPUTS_UNLOCKED, BUILT_IN_FSCANF, BUILT_IN_FWRITE,\n\tBUILT_IN_FWRITE_UNLOCKED, BUILT_IN_VFPRINTF, BUILT_IN_VFSCANF): Use\n\tthe above *FILEPTR* types instead of *PTR*.\n\n\t* decl.c (duplicate_decls): Handle fileptr_type_node arguments\n\tspecially.\n\n\t* g++.dg/opt/builtins1.C: New test.\n\nFrom-SVN: r82902", "tree": {"sha": "0a102b64a167175eaefe13e2f8dbae8fe19d5fd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a102b64a167175eaefe13e2f8dbae8fe19d5fd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/498c0f2757190a22826576174616ab2403e2f4f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/498c0f2757190a22826576174616ab2403e2f4f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/498c0f2757190a22826576174616ab2403e2f4f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/498c0f2757190a22826576174616ab2403e2f4f6/comments", "author": null, "committer": null, "parents": [{"sha": "618df7453e19213478c14873470d6efa760fcc7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/618df7453e19213478c14873470d6efa760fcc7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/618df7453e19213478c14873470d6efa760fcc7d"}], "stats": {"total": 137, "additions": 112, "deletions": 25}, "files": [{"sha": "f3386bcecb113ca15f7ced7c1d5717b3bae8086d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498c0f2757190a22826576174616ab2403e2f4f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498c0f2757190a22826576174616ab2403e2f4f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=498c0f2757190a22826576174616ab2403e2f4f6", "patch": "@@ -1,3 +1,28 @@\n+2004-06-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/14791\n+\t* tree.h (enum tree_index): Add TI_FILEPTR_TYPE.\n+\t(fileptr_type_node): Define.\n+\t* tree.c (build_common_tree_nodes_2): Initialize\n+\tfileptr_type_node to ptr_type_node.\n+\t* c-common.c (c_common_nodes_and_builtins): For C++, make\n+\tfileptr_type_node a distinct type copy.\n+\t* builtin-types.def (BT_FILEPTR, BT_FN_INT_CONST_STRING_FILEPTR,\n+\tBT_FN_INT_INT_FILEPTR, BT_FN_INT_FILEPTR_CONST_STRING_VALIST_ARG,\n+\tBT_FN_SIZE_CONST_PTR_SIZE_SIZE_FILEPTR,\n+\tBT_FN_INT_FILEPTR_CONST_STRING_VAR): Add.\n+\t(BT_FN_INT_CONST_STRING_PTR, BT_FN_INT_INT_PTR,\n+\tBT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR, BT_FN_INT_PTR_CONST_STRING_VAR,\n+\tBT_FN_INT_PTR_CONST_STRING_VALIST_ARG): Remove.\n+\t* builtins.def (BUILT_IN_FPRINTF, BUILT_IN_FPRINTF_UNLOCKED,\n+\tBUILT_IN_FPUTC, BUILT_IN_FPUTC_UNLOCKED, BUILT_IN_FPUTS,\n+\tBUILT_IN_FPUTS_UNLOCKED, BUILT_IN_FSCANF, BUILT_IN_FWRITE,\n+\tBUILT_IN_FWRITE_UNLOCKED, BUILT_IN_VFPRINTF, BUILT_IN_VFSCANF): Use\n+\tthe above *FILEPTR* types instead of *PTR*.\n+\n+\t* decl.c (duplicate_decls): Handle fileptr_type_node arguments\n+\tspecially.\n+\n 2004-06-09  Daniel Berlin <dberlin@dberlin.org>\n \n \t* tree-ssa.c (verify_ssa): Verify that vdefs/makes_aliased_stores \n@@ -12,9 +37,9 @@\n \n 2004-06-09  Richard Henderson  <rth@redhat.com>\n  \n-        PR middle-end/15228\n-        * function.c (assign_parms): Always set_mem_align with the computed\n-        FUNCTION_ARG_BOUNDARY.  Don't clear stack_parm if !STRICT_ALIGNMENT.\n+\tPR middle-end/15228\n+\t* function.c (assign_parms): Always set_mem_align with the computed\n+\tFUNCTION_ARG_BOUNDARY.  Don't clear stack_parm if !STRICT_ALIGNMENT.\n \n 2004-06-09  Richard Henderson  <rth@redhat.com>\n "}, {"sha": "7f6fb64f121425ceca141910a2bc41adb5cdc3e0", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498c0f2757190a22826576174616ab2403e2f4f6/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498c0f2757190a22826576174616ab2403e2f4f6/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=498c0f2757190a22826576174616ab2403e2f4f6", "patch": "@@ -74,6 +74,7 @@ DEF_PRIMITIVE_TYPE (BT_COMPLEX_DOUBLE, complex_double_type_node)\n DEF_PRIMITIVE_TYPE (BT_COMPLEX_LONGDOUBLE, complex_long_double_type_node)\n \n DEF_PRIMITIVE_TYPE (BT_PTR, ptr_type_node)\n+DEF_PRIMITIVE_TYPE (BT_FILEPTR, fileptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_CONST_PTR, const_ptr_type_node)\n DEF_PRIMITIVE_TYPE (BT_PTRMODE, (*lang_hooks.types.type_for_mode)(ptr_mode, 0))\n DEF_PRIMITIVE_TYPE (BT_INT_PTR, integer_ptr_type_node)\n@@ -163,10 +164,10 @@ DEF_FUNCTION_TYPE_2 (BT_FN_SIZE_CONST_STRING_CONST_STRING,\n \t             BT_SIZE, BT_CONST_STRING, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_2 (BT_FN_STRING_CONST_STRING_INT,\n \t             BT_STRING, BT_CONST_STRING, BT_INT)\n-DEF_FUNCTION_TYPE_2 (BT_FN_INT_CONST_STRING_PTR,\n-\t\t     BT_INT, BT_CONST_STRING, BT_PTR)\n-DEF_FUNCTION_TYPE_2 (BT_FN_INT_INT_PTR,\n-\t\t     BT_INT, BT_INT, BT_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_INT_CONST_STRING_FILEPTR,\n+\t\t     BT_INT, BT_CONST_STRING, BT_FILEPTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_INT_INT_FILEPTR,\n+\t\t     BT_INT, BT_INT, BT_FILEPTR)\n DEF_FUNCTION_TYPE_2 (BT_FN_VOID_PTRMODE_PTR,\n \t\t     BT_VOID, BT_PTRMODE, BT_PTR)\n DEF_FUNCTION_TYPE_2 (BT_FN_VOID_VALIST_REF_VALIST_ARG, \n@@ -249,8 +250,8 @@ DEF_FUNCTION_TYPE_3 (BT_FN_INT_STRING_CONST_STRING_VALIST_ARG,\n \t\t     BT_INT, BT_STRING, BT_CONST_STRING, BT_VALIST_ARG)\n DEF_FUNCTION_TYPE_3 (BT_FN_INT_CONST_STRING_CONST_STRING_VALIST_ARG,\n \t\t     BT_INT, BT_CONST_STRING, BT_CONST_STRING, BT_VALIST_ARG)\n-DEF_FUNCTION_TYPE_3 (BT_FN_INT_PTR_CONST_STRING_VALIST_ARG,\n-\t\t     BT_INT, BT_PTR, BT_CONST_STRING, BT_VALIST_ARG)\n+DEF_FUNCTION_TYPE_3 (BT_FN_INT_FILEPTR_CONST_STRING_VALIST_ARG,\n+\t\t     BT_INT, BT_FILEPTR, BT_CONST_STRING, BT_VALIST_ARG)\n DEF_FUNCTION_TYPE_3 (BT_FN_STRING_CONST_STRING_CONST_STRING_INT,\n \t\t     BT_STRING, BT_CONST_STRING, BT_CONST_STRING, BT_INT)\n DEF_FUNCTION_TYPE_3 (BT_FN_FLOAT_FLOAT_FLOAT_FLOAT,\n@@ -275,8 +276,8 @@ DEF_FUNCTION_TYPE_3 (BT_FN_VOID_PTR_PTR_PTR, BT_VOID, BT_PTR, BT_PTR, BT_PTR)\n DEF_FUNCTION_TYPE_3 (BT_FN_INT_CONST_STRING_PTR_CONST_STRING_PTR_CONST_STRING,\n \t\t     BT_INT, BT_CONST_STRING, BT_PTR_CONST_STRING, BT_PTR_CONST_STRING)\n \n-DEF_FUNCTION_TYPE_4 (BT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR,\n-\t\t     BT_SIZE, BT_CONST_PTR, BT_SIZE, BT_SIZE, BT_PTR)\n+DEF_FUNCTION_TYPE_4 (BT_FN_SIZE_CONST_PTR_SIZE_SIZE_FILEPTR,\n+\t\t     BT_SIZE, BT_CONST_PTR, BT_SIZE, BT_SIZE, BT_FILEPTR)\n DEF_FUNCTION_TYPE_4 (BT_FN_INT_STRING_SIZE_CONST_STRING_VALIST_ARG,\n \t\tBT_INT, BT_STRING, BT_SIZE, BT_CONST_STRING, BT_VALIST_ARG)\n DEF_FUNCTION_TYPE_4 (BT_FN_SIZE_STRING_SIZE_CONST_STRING_CONST_PTR,\n@@ -293,8 +294,8 @@ DEF_FUNCTION_TYPE_VAR_1 (BT_FN_VOID_CONST_PTR_VAR,\n DEF_FUNCTION_TYPE_VAR_1 (BT_FN_INT_CONST_STRING_VAR,\n \t                 BT_INT, BT_CONST_STRING)\n \n-DEF_FUNCTION_TYPE_VAR_2 (BT_FN_INT_PTR_CONST_STRING_VAR,\n-\t                 BT_INT, BT_PTR, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_VAR_2 (BT_FN_INT_FILEPTR_CONST_STRING_VAR,\n+\t                 BT_INT, BT_FILEPTR, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_VAR_2 (BT_FN_INT_STRING_CONST_STRING_VAR,\n \t\t\t BT_INT, BT_STRING, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_VAR_2 (BT_FN_INT_CONST_STRING_CONST_STRING_VAR,"}, {"sha": "3dd61fa8ae0866e8664069806f3f587a8b3eb270", "filename": "gcc/builtins.def", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498c0f2757190a22826576174616ab2403e2f4f6/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498c0f2757190a22826576174616ab2403e2f4f6/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=498c0f2757190a22826576174616ab2403e2f4f6", "patch": "@@ -471,15 +471,15 @@ DEF_LIB_BUILTIN        (BUILT_IN_STRSPN, \"strspn\", BT_FN_SIZE_CONST_STRING_CONST\n DEF_LIB_BUILTIN        (BUILT_IN_STRSTR, \"strstr\", BT_FN_STRING_CONST_STRING_CONST_STRING, ATTR_PURE_NOTHROW_NONNULL_1_2)\n \n /* Category: stdio builtins.  */\n-DEF_LIB_BUILTIN        (BUILT_IN_FPRINTF, \"fprintf\", BT_FN_INT_PTR_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_2_3)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_FPRINTF_UNLOCKED, \"fprintf_unlocked\", BT_FN_INT_PTR_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_2_3)\n-DEF_LIB_BUILTIN        (BUILT_IN_FPUTC, \"fputc\", BT_FN_INT_INT_PTR, ATTR_NOTHROW_NONNULL_2)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_FPUTC_UNLOCKED, \"fputc_unlocked\", BT_FN_INT_INT_PTR, ATTR_NOTHROW_NONNULL_2)\n-DEF_LIB_BUILTIN        (BUILT_IN_FPUTS, \"fputs\", BT_FN_INT_CONST_STRING_PTR, ATTR_NOTHROW_NONNULL_1_2)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_FPUTS_UNLOCKED, \"fputs_unlocked\", BT_FN_INT_CONST_STRING_PTR, ATTR_NOTHROW_NONNULL_1_2)\n-DEF_LIB_BUILTIN        (BUILT_IN_FSCANF, \"fscanf\", BT_FN_INT_PTR_CONST_STRING_VAR, ATTR_FORMAT_SCANF_2_3)\n-DEF_LIB_BUILTIN        (BUILT_IN_FWRITE, \"fwrite\", BT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR, ATTR_NOTHROW_NONNULL_1_4)\n-DEF_EXT_LIB_BUILTIN    (BUILT_IN_FWRITE_UNLOCKED, \"fwrite_unlocked\", BT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR, ATTR_NOTHROW_NONNULL_1_4)\n+DEF_LIB_BUILTIN        (BUILT_IN_FPRINTF, \"fprintf\", BT_FN_INT_FILEPTR_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_2_3)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_FPRINTF_UNLOCKED, \"fprintf_unlocked\", BT_FN_INT_FILEPTR_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_2_3)\n+DEF_LIB_BUILTIN        (BUILT_IN_FPUTC, \"fputc\", BT_FN_INT_INT_FILEPTR, ATTR_NOTHROW_NONNULL_2)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_FPUTC_UNLOCKED, \"fputc_unlocked\", BT_FN_INT_INT_FILEPTR, ATTR_NOTHROW_NONNULL_2)\n+DEF_LIB_BUILTIN        (BUILT_IN_FPUTS, \"fputs\", BT_FN_INT_CONST_STRING_FILEPTR, ATTR_NOTHROW_NONNULL_1_2)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_FPUTS_UNLOCKED, \"fputs_unlocked\", BT_FN_INT_CONST_STRING_FILEPTR, ATTR_NOTHROW_NONNULL_1_2)\n+DEF_LIB_BUILTIN        (BUILT_IN_FSCANF, \"fscanf\", BT_FN_INT_FILEPTR_CONST_STRING_VAR, ATTR_FORMAT_SCANF_2_3)\n+DEF_LIB_BUILTIN        (BUILT_IN_FWRITE, \"fwrite\", BT_FN_SIZE_CONST_PTR_SIZE_SIZE_FILEPTR, ATTR_NOTHROW_NONNULL_1_4)\n+DEF_EXT_LIB_BUILTIN    (BUILT_IN_FWRITE_UNLOCKED, \"fwrite_unlocked\", BT_FN_SIZE_CONST_PTR_SIZE_SIZE_FILEPTR, ATTR_NOTHROW_NONNULL_1_4)\n DEF_LIB_BUILTIN        (BUILT_IN_PRINTF, \"printf\", BT_FN_INT_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_1_2)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN_PRINTF_UNLOCKED, \"printf_unlocked\", BT_FN_INT_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_1_2)\n DEF_LIB_BUILTIN        (BUILT_IN_PUTCHAR, \"putchar\", BT_FN_INT_INT, ATTR_NOTHROW_LIST)\n@@ -490,8 +490,8 @@ DEF_LIB_BUILTIN        (BUILT_IN_SCANF, \"scanf\", BT_FN_INT_CONST_STRING_VAR, ATT\n DEF_C99_BUILTIN        (BUILT_IN_SNPRINTF, \"snprintf\", BT_FN_INT_STRING_SIZE_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_3_4)\n DEF_LIB_BUILTIN        (BUILT_IN_SPRINTF, \"sprintf\", BT_FN_INT_STRING_CONST_STRING_VAR, ATTR_FORMAT_PRINTF_2_3)\n DEF_LIB_BUILTIN        (BUILT_IN_SSCANF, \"sscanf\", BT_FN_INT_CONST_STRING_CONST_STRING_VAR, ATTR_FORMAT_SCANF_2_3)\n-DEF_LIB_BUILTIN        (BUILT_IN_VFPRINTF, \"vfprintf\", BT_FN_INT_PTR_CONST_STRING_VALIST_ARG, ATTR_FORMAT_PRINTF_2_0)\n-DEF_C99_BUILTIN        (BUILT_IN_VFSCANF, \"vfscanf\", BT_FN_INT_PTR_CONST_STRING_VALIST_ARG, ATTR_FORMAT_SCANF_2_0)\n+DEF_LIB_BUILTIN        (BUILT_IN_VFPRINTF, \"vfprintf\", BT_FN_INT_FILEPTR_CONST_STRING_VALIST_ARG, ATTR_FORMAT_PRINTF_2_0)\n+DEF_C99_BUILTIN        (BUILT_IN_VFSCANF, \"vfscanf\", BT_FN_INT_FILEPTR_CONST_STRING_VALIST_ARG, ATTR_FORMAT_SCANF_2_0)\n DEF_LIB_BUILTIN        (BUILT_IN_VPRINTF, \"vprintf\", BT_FN_INT_CONST_STRING_VALIST_ARG, ATTR_FORMAT_PRINTF_1_0)\n DEF_C99_BUILTIN        (BUILT_IN_VSCANF, \"vscanf\", BT_FN_INT_CONST_STRING_VALIST_ARG, ATTR_FORMAT_SCANF_1_0)\n DEF_C99_BUILTIN        (BUILT_IN_VSNPRINTF, \"vsnprintf\", BT_FN_INT_STRING_SIZE_CONST_STRING_VALIST_ARG, ATTR_FORMAT_PRINTF_3_0)"}, {"sha": "01a878348f42cf73e55ec6e52a8943aead154edb", "filename": "gcc/c-common.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498c0f2757190a22826576174616ab2403e2f4f6/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498c0f2757190a22826576174616ab2403e2f4f6/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=498c0f2757190a22826576174616ab2403e2f4f6", "patch": "@@ -3297,6 +3297,11 @@ c_common_nodes_and_builtins (void)\n     (build_decl (TYPE_DECL, get_identifier (\"complex long double\"),\n \t\t complex_long_double_type_node));\n \n+  if (c_dialect_cxx ())\n+    /* For C++, make fileptr_type_node a distinct void * type until\n+       FILE type is defined.  */\n+    fileptr_type_node = build_type_copy (ptr_type_node);\n+\n   record_builtin_type (RID_VOID, NULL, void_type_node);\n \n   void_zero_node = build_int_2 (0, 0);"}, {"sha": "ad6226052800db441e1717e60d7d9ce067641bda", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498c0f2757190a22826576174616ab2403e2f4f6/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498c0f2757190a22826576174616ab2403e2f4f6/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=498c0f2757190a22826576174616ab2403e2f4f6", "patch": "@@ -1200,7 +1200,40 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t{\n           /* Avoid warnings redeclaring anticipated built-ins.  */\n           if (DECL_ANTICIPATED (olddecl))\n-            ;  /* Do nothing yet.  */\n+\t    {\n+\t      /* Deal with fileptr_type_node.  FILE type is not known\n+\t\t at the time we create the builtins.  */\n+\t      tree t1, t2;\n+\n+\t      for (t1 = TYPE_ARG_TYPES (TREE_TYPE (newdecl)),\n+\t\t   t2 = TYPE_ARG_TYPES (TREE_TYPE (olddecl));\n+\t\t   t1 || t2;\n+\t\t   t1 = TREE_CHAIN (t1), t2 = TREE_CHAIN (t2))\n+\t\tif (!t1 || !t2)\n+\t\t  break;\n+\t\telse if (TREE_VALUE (t2) == fileptr_type_node)\n+\t\t  {\n+\t\t    tree t = TREE_VALUE (t1);\n+\n+\t\t    if (TREE_CODE (t) == POINTER_TYPE\n+\t\t\t&& TYPE_NAME (TREE_TYPE (t))\n+\t\t\t&& DECL_NAME (TYPE_NAME (TREE_TYPE (t)))\n+\t\t\t   == get_identifier (\"FILE\")\n+\t\t\t&& compparms (TREE_CHAIN (t1), TREE_CHAIN (t2)))\n+\t\t      {\n+\t\t\ttree oldargs = TYPE_ARG_TYPES (TREE_TYPE (olddecl));\n+\n+\t\t\tTYPE_ARG_TYPES (TREE_TYPE (olddecl))\n+\t\t\t  = TYPE_ARG_TYPES (TREE_TYPE (newdecl));\n+\t\t\ttypes_match = decls_match (newdecl, olddecl);\n+\t\t\tif (types_match)\n+\t\t\t  return duplicate_decls (newdecl, olddecl);\n+\t\t\tTYPE_ARG_TYPES (TREE_TYPE (olddecl)) = oldargs;\n+\t\t      }\n+\t\t  }\n+\t\telse if (! same_type_p (TREE_VALUE (t1), TREE_VALUE (t2)))\n+\t\t  break;\n+\t    }\n \t  else if ((DECL_EXTERN_C_P (newdecl)\n \t\t    && DECL_EXTERN_C_P (olddecl))\n \t\t   || compparms (TYPE_ARG_TYPES (TREE_TYPE (newdecl)),"}, {"sha": "ed2a56c9ec714f1734455bf56424f4f978b1763b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498c0f2757190a22826576174616ab2403e2f4f6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498c0f2757190a22826576174616ab2403e2f4f6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=498c0f2757190a22826576174616ab2403e2f4f6", "patch": "@@ -1,3 +1,8 @@\n+2004-06-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/14791\n+\t* g++.dg/opt/builtins1.C: New test.\n+\n 2004-06-10  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \t* gcc.dg/i386-bitfield1.c: Add mingw32 and cygwin to targets"}, {"sha": "8311436b223fb80510a3f3fcd5a189e7c3872dbd", "filename": "gcc/testsuite/g++.dg/opt/builtins1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498c0f2757190a22826576174616ab2403e2f4f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fbuiltins1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498c0f2757190a22826576174616ab2403e2f4f6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fbuiltins1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fbuiltins1.C?ref=498c0f2757190a22826576174616ab2403e2f4f6", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/14791\n+// Test if builtins with FILE * arguments work\n+// { dg-options \"-O2 -Wformat\" }\n+\n+typedef struct _FILE FILE;\n+FILE *stderr;\n+extern \"C\" int printf (__const char *__restrict, ...);\n+extern \"C\" int fprintf (FILE *__restrict, __const char *__restrict, ...);\n+\n+int main ()\n+{\n+  printf (\"%d\\n\", 1, 1);\t\t// { dg-warning \"too many arguments for format\" }\n+  fprintf (stderr, \"%d\\n\", 1, 1);\t// { dg-warning \"too many arguments for format\" }\n+}"}, {"sha": "b3301b3c4421a728dc3208fb7539d080e90c415e", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498c0f2757190a22826576174616ab2403e2f4f6/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498c0f2757190a22826576174616ab2403e2f4f6/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=498c0f2757190a22826576174616ab2403e2f4f6", "patch": "@@ -5355,6 +5355,7 @@ build_common_tree_nodes_2 (int short_double)\n   ptr_type_node = build_pointer_type (void_type_node);\n   const_ptr_type_node\n     = build_pointer_type (build_type_variant (void_type_node, 1, 0));\n+  fileptr_type_node = ptr_type_node;\n \n   float_type_node = make_node (REAL_TYPE);\n   TYPE_PRECISION (float_type_node) = FLOAT_TYPE_SIZE;"}, {"sha": "e867302965eacfb27ddc5d7b23df309d72b41ad4", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/498c0f2757190a22826576174616ab2403e2f4f6/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/498c0f2757190a22826576174616ab2403e2f4f6/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=498c0f2757190a22826576174616ab2403e2f4f6", "patch": "@@ -2508,6 +2508,7 @@ enum tree_index\n   TI_PTRDIFF_TYPE,\n   TI_VA_LIST_TYPE,\n   TI_BOOLEAN_TYPE,\n+  TI_FILEPTR_TYPE,\n \n   TI_VOID_LIST_NODE,\n \n@@ -2572,6 +2573,8 @@ extern GTY(()) tree global_trees[TI_MAX];\n #define pid_type_node                   global_trees[TI_PID_TYPE]\n #define ptrdiff_type_node\t\tglobal_trees[TI_PTRDIFF_TYPE]\n #define va_list_type_node\t\tglobal_trees[TI_VA_LIST_TYPE]\n+/* The C type `FILE *'.  */\n+#define fileptr_type_node\t\tglobal_trees[TI_FILEPTR_TYPE]\n \n #define boolean_type_node\t\tglobal_trees[TI_BOOLEAN_TYPE]\n #define boolean_false_node\t\tglobal_trees[TI_BOOLEAN_FALSE]"}]}