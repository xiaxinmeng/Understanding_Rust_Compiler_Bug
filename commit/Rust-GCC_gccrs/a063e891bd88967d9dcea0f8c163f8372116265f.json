{"sha": "a063e891bd88967d9dcea0f8c163f8372116265f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA2M2U4OTFiZDg4OTY3ZDlkY2VhMGY4YzE2M2Y4MzcyMTE2MjY1Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-10-21T00:06:02Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-10-21T00:06:02Z"}, "message": "bitmap_allocator.h (allocate): Throw std::bad_alloc when n > max_size().\n\n2004-10-20  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/ext/bitmap_allocator.h (allocate): Throw std::bad_alloc\n\twhen n > max_size().\n\t* include/ext/malloc_allocator.h (allocate): Likewise.\n\t* include/ext/mt_allocator.h (allocate): Likewise.\n\t* include/ext/new_allocator.h (allocate): Likewise.\n\t* include/ext/array_allocator.h: Use __throw_bad_alloc().\n\t* include/ext/pool_allocator.h: Use __builtin_expect.\n\t* testsuite/ext/array_allocator/check_allocate_max_size.cc: New.\n\t* testsuite/ext/bitmap_allocator/check_allocate_max_size.cc: Likewise.\n\t* testsuite/ext/malloc_allocator/check_allocate_max_size.cc: Likewise.\n\t* testsuite/ext/mt_allocator/check_allocate_max_size.cc: Likewise.\n\t* testsuite/ext/new_allocator/check_allocate_max_size.cc: Likewise.\n\t* testsuite/ext/pool_allocator/check_allocate_max_size.cc: Likewise.\n\t* testsuite/testsuite_allocator.h (check_allocate_max_size): New test.\n\nFrom-SVN: r89351", "tree": {"sha": "86541239e0f24c6b8ccdb784b4212770c4b0f617", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86541239e0f24c6b8ccdb784b4212770c4b0f617"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a063e891bd88967d9dcea0f8c163f8372116265f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a063e891bd88967d9dcea0f8c163f8372116265f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a063e891bd88967d9dcea0f8c163f8372116265f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a063e891bd88967d9dcea0f8c163f8372116265f/comments", "author": null, "committer": null, "parents": [{"sha": "f644cebf003c3dade9b0b583facc5c8d50a025f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f644cebf003c3dade9b0b583facc5c8d50a025f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f644cebf003c3dade9b0b583facc5c8d50a025f3"}], "stats": {"total": 316, "additions": 279, "deletions": 37}, "files": [{"sha": "8e5934e109e66630f8e5bd1b68346724d683cc89", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a063e891bd88967d9dcea0f8c163f8372116265f", "patch": "@@ -1,3 +1,20 @@\n+2004-10-20  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/ext/bitmap_allocator.h (allocate): Throw std::bad_alloc\n+\twhen n > max_size().\n+\t* include/ext/malloc_allocator.h (allocate): Likewise.\n+\t* include/ext/mt_allocator.h (allocate): Likewise.\n+\t* include/ext/new_allocator.h (allocate): Likewise.\n+\t* include/ext/array_allocator.h: Use __throw_bad_alloc().\n+\t* include/ext/pool_allocator.h: Use __builtin_expect.\n+\t* testsuite/ext/array_allocator/check_allocate_max_size.cc: New.\n+\t* testsuite/ext/bitmap_allocator/check_allocate_max_size.cc: Likewise.\n+\t* testsuite/ext/malloc_allocator/check_allocate_max_size.cc: Likewise.\n+\t* testsuite/ext/mt_allocator/check_allocate_max_size.cc: Likewise.\n+\t* testsuite/ext/new_allocator/check_allocate_max_size.cc: Likewise.\n+\t* testsuite/ext/pool_allocator/check_allocate_max_size.cc: Likewise.\n+\t* testsuite/testsuite_allocator.h (check_allocate_max_size): New test.\n+\n 2004-10-19  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/performance/20_util/allocator/list_sort_search.cc:"}, {"sha": "294ee68198f4abe0e70c3097bf718b96e9688989", "filename": "libstdc++-v3/include/ext/array_allocator.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h?ref=a063e891bd88967d9dcea0f8c163f8372116265f", "patch": "@@ -32,6 +32,7 @@\n \n #include <cstddef>\n #include <new>\n+#include <bits/functexcept.h>\n #include <tr1/array>\n \n namespace __gnu_cxx\n@@ -118,7 +119,7 @@ namespace __gnu_cxx\n       {\n \tstatic size_type __used;\n \tif (__builtin_expect(__used + __n > array_type::_S_index, false))\n-\t  throw std::bad_alloc();\n+\t  std::__throw_bad_alloc();\n \tpointer __ret = _M_array->begin() + __used;\n \t__used += __n;\n \treturn __ret;"}, {"sha": "dc24465612399b41f83a8670ad53ac9b5cbed16a", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=a063e891bd88967d9dcea0f8c163f8372116265f", "patch": "@@ -38,6 +38,9 @@\n // For std::size_t, and ptrdiff_t.\n #include <cstddef>\n \n+// For __throw_bad_alloc().\n+#include <bits/functexcept.h>\n+\n // For std::pair.\n #include <utility>\n \n@@ -1084,6 +1087,9 @@ namespace __gnu_cxx\n       pointer \n       allocate(size_type __n)\n       {\n+\tif (__builtin_expect(__n > this->max_size(), false))\n+\t  std::__throw_bad_alloc();\n+\n \tif (__builtin_expect(__n == 1, true))\n \t  return this->_M_allocate_single_object();\n \telse\n@@ -1119,7 +1125,7 @@ namespace __gnu_cxx\n \n       size_type \n       max_size() const throw()\n-      { return (size_type()-1)/sizeof(value_type); }\n+      { return size_type(-1) / sizeof(value_type); }\n \n       void \n       construct(pointer __p, const_reference __data)"}, {"sha": "ba4d2d756012afe954a6efa3fda9eaeb543586e0", "filename": "libstdc++-v3/include/ext/malloc_allocator.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmalloc_allocator.h?ref=a063e891bd88967d9dcea0f8c163f8372116265f", "patch": "@@ -31,6 +31,7 @@\n #define _MALLOC_ALLOCATOR_H 1\n \n #include <new>\n+#include <bits/functexcept.h>\n \n namespace __gnu_cxx\n {\n@@ -79,9 +80,12 @@ namespace __gnu_cxx\n       pointer\n       allocate(size_type __n, const void* = 0)\n       {\n+\tif (__builtin_expect(__n > this->max_size(), false))\n+\t  std::__throw_bad_alloc();\n+\n \tpointer __ret = static_cast<_Tp*>(malloc(__n * sizeof(_Tp)));\n \tif (!__ret)\n-\t  throw std::bad_alloc();\n+\t  std::__throw_bad_alloc();\n \treturn __ret;\n       }\n "}, {"sha": "6649111a6e7d3f11b5f42a88bb908639eb3db036", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=a063e891bd88967d9dcea0f8c163f8372116265f", "patch": "@@ -685,6 +685,9 @@ namespace __gnu_cxx\n     {\n       this->_S_initialize_once();\n \n+      if (__builtin_expect(__n > this->max_size(), false))\n+\tstd::__throw_bad_alloc();\n+\n       // Requests larger than _M_max_bytes are handled by operator\n       // new/delete directly.\n       __pool_type& __pool = this->_S_get_pool();\n@@ -694,7 +697,7 @@ namespace __gnu_cxx\n \t  void* __ret = ::operator new(__bytes);\n \t  return static_cast<_Tp*>(__ret);\n \t}\n-\n+      \n       // Round up to power of 2 and figure out which bin to use.\n       const size_t __which = __pool._M_get_binmap(__bytes);\n       const size_t __thread_id = __pool._M_get_thread_id();"}, {"sha": "145f98b476a7cc5f429781057db6e04a69e914bc", "filename": "libstdc++-v3/include/ext/new_allocator.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fnew_allocator.h?ref=a063e891bd88967d9dcea0f8c163f8372116265f", "patch": "@@ -31,6 +31,7 @@\n #define _NEW_ALLOCATOR_H 1\n \n #include <new>\n+#include <bits/functexcept.h>\n \n namespace __gnu_cxx\n {\n@@ -78,7 +79,12 @@ namespace __gnu_cxx\n       // about what the return value is when __n == 0.\n       pointer\n       allocate(size_type __n, const void* = 0)\n-      { return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp))); }\n+      { \n+\tif (__builtin_expect(__n > this->max_size(), false))\n+\t  std::__throw_bad_alloc();\n+\n+\treturn static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));\n+      }\n \n       // __p is not permitted to be a null pointer.\n       void"}, {"sha": "d2110f78ad3904f392cc6ce105b143f6b222dbc9", "filename": "libstdc++-v3/include/ext/pool_allocator.h", "status": "modified", "additions": 29, "deletions": 31, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpool_allocator.h?ref=a063e891bd88967d9dcea0f8c163f8372116265f", "patch": "@@ -189,43 +189,41 @@ namespace __gnu_cxx\n     __pool_alloc<_Tp>::allocate(size_type __n, const void*)\n     {\n       pointer __ret = 0;\n-      if (__n)\n+      if (__builtin_expect(__n != 0, true))\n \t{\n-\t  if (__n <= max_size())\n+\t  if (__builtin_expect(__n > this->max_size(), false))\n+\t    std::__throw_bad_alloc();\n+\n+\t  // If there is a race through here, assume answer from getenv\n+\t  // will resolve in same direction.  Inspired by techniques\n+\t  // to efficiently support threading found in basic_string.h.\n+\t  if (_S_force_new == 0)\n \t    {\n-\t      // If there is a race through here, assume answer from getenv\n-\t      // will resolve in same direction.  Inspired by techniques\n-\t      // to efficiently support threading found in basic_string.h.\n-\t      if (_S_force_new == 0)\n-\t\t{\n-\t\t  if (getenv(\"GLIBCXX_FORCE_NEW\"))\n-\t\t    __atomic_add(&_S_force_new, 1);\n-\t\t  else\n-\t\t    __atomic_add(&_S_force_new, -1);\n-\t\t}\n+\t      if (getenv(\"GLIBCXX_FORCE_NEW\"))\n+\t\t__atomic_add(&_S_force_new, 1);\n+\t      else\n+\t\t__atomic_add(&_S_force_new, -1);\n+\t    }\n \n-\t      const size_t __bytes = __n * sizeof(_Tp);\t      \n-\t      if (__bytes > size_t(_S_max_bytes) || _S_force_new == 1)\n-\t\t__ret = static_cast<_Tp*>(::operator new(__bytes));\n+\t  const size_t __bytes = __n * sizeof(_Tp);\t      \n+\t  if (__bytes > size_t(_S_max_bytes) || _S_force_new == 1)\n+\t    __ret = static_cast<_Tp*>(::operator new(__bytes));\n+\t  else\n+\t    {\n+\t      _Obj* volatile* __free_list = _M_get_free_list(__bytes);\n+\t      \n+\t      lock sentry(_M_get_mutex());\n+\t      _Obj* __restrict__ __result = *__free_list;\n+\t      if (__builtin_expect(__result == 0, 0))\n+\t\t__ret = static_cast<_Tp*>(_M_refill(_M_round_up(__bytes)));\n \t      else\n \t\t{\n-\t\t  _Obj* volatile* __free_list = _M_get_free_list(__bytes);\n-\n-\t\t  lock sentry(_M_get_mutex());\n-\t\t  _Obj* __restrict__ __result = *__free_list;\n-\t\t  if (__builtin_expect(__result == 0, 0))\n-\t\t    __ret = static_cast<_Tp*>(_M_refill(_M_round_up(__bytes)));\n-\t\t  else\n-\t\t    {\n-\t\t      *__free_list = __result->_M_free_list_link;\n-\t\t      __ret = reinterpret_cast<_Tp*>(__result);\n-\t\t    }\n-\t\t  if (__builtin_expect(__ret == 0, 0))\n-\t\t    std::__throw_bad_alloc();\n+\t\t  *__free_list = __result->_M_free_list_link;\n+\t\t  __ret = reinterpret_cast<_Tp*>(__result);\n \t\t}\n+\t      if (__builtin_expect(__ret == 0, 0))\n+\t\tstd::__throw_bad_alloc();\n \t    }\n-\t  else\n-\t    std::__throw_bad_alloc();\n \t}\n       return __ret;\n     }\n@@ -234,7 +232,7 @@ namespace __gnu_cxx\n     void\n     __pool_alloc<_Tp>::deallocate(pointer __p, size_type __n)\n     {\n-      if (__n && (__p != 0))\n+      if (__builtin_expect(__n != 0 && __p != 0, true))\n \t{\n \t  const size_t __bytes = __n * sizeof(_Tp);\n \t  if (__bytes > static_cast<size_t>(_S_max_bytes) || _S_force_new == 1)"}, {"sha": "4225ee2ed843f182a33f1a329495174e33a2dbe6", "filename": "libstdc++-v3/testsuite/ext/array_allocator/check_allocate_max_size.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_allocate_max_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_allocate_max_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_allocate_max_size.cc?ref=a063e891bd88967d9dcea0f8c163f8372116265f", "patch": "@@ -0,0 +1,31 @@\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <ext/array_allocator.h>\n+#include <testsuite_allocator.h>\n+\n+int main()\n+{ \n+  typedef int value_type;\n+  typedef __gnu_cxx::array_allocator<value_type> allocator_type;\n+  __gnu_test::check_allocate_max_size<allocator_type>();\n+  return 0;\n+}"}, {"sha": "442b91db2094c00a84a7a9ef1b7a70231f91d8b5", "filename": "libstdc++-v3/testsuite/ext/bitmap_allocator/check_allocate_max_size.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fcheck_allocate_max_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fcheck_allocate_max_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fbitmap_allocator%2Fcheck_allocate_max_size.cc?ref=a063e891bd88967d9dcea0f8c163f8372116265f", "patch": "@@ -0,0 +1,31 @@\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <ext/bitmap_allocator.h>\n+#include <testsuite_allocator.h>\n+\n+int main()\n+{ \n+  typedef int value_type;\n+  typedef __gnu_cxx::bitmap_allocator<value_type> allocator_type;\n+  __gnu_test::check_allocate_max_size<allocator_type>();\n+  return 0;\n+}"}, {"sha": "421eb7b90528ca88b761eea5871e174072577f2a", "filename": "libstdc++-v3/testsuite/ext/malloc_allocator/check_allocate_max_size.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fcheck_allocate_max_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fcheck_allocate_max_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmalloc_allocator%2Fcheck_allocate_max_size.cc?ref=a063e891bd88967d9dcea0f8c163f8372116265f", "patch": "@@ -0,0 +1,31 @@\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <ext/malloc_allocator.h>\n+#include <testsuite_allocator.h>\n+\n+int main()\n+{\n+  typedef int value_type;\n+  typedef __gnu_cxx::malloc_allocator<value_type> allocator_type;\n+  __gnu_test::check_allocate_max_size<allocator_type>();\n+  return 0;\n+}"}, {"sha": "1beaf93daafbeee4b60d7eced281550341dd1cad", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/check_allocate_max_size.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_allocate_max_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_allocate_max_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Fcheck_allocate_max_size.cc?ref=a063e891bd88967d9dcea0f8c163f8372116265f", "patch": "@@ -0,0 +1,31 @@\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <ext/mt_allocator.h>\n+#include <testsuite_allocator.h>\n+\n+int main()\n+{ \n+  typedef int value_type;\n+  typedef __gnu_cxx::__mt_alloc<value_type> allocator_type;\n+  __gnu_test::check_allocate_max_size<allocator_type>();\n+  return 0;\n+}"}, {"sha": "d5e01325e1b47174483dbe251ef60aa5f6937612", "filename": "libstdc++-v3/testsuite/ext/new_allocator/check_allocate_max_size.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_allocate_max_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_allocate_max_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fnew_allocator%2Fcheck_allocate_max_size.cc?ref=a063e891bd88967d9dcea0f8c163f8372116265f", "patch": "@@ -0,0 +1,31 @@\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <ext/new_allocator.h>\n+#include <testsuite_allocator.h>\n+\n+int main()\n+{ \n+  typedef int value_type;\n+  typedef __gnu_cxx::new_allocator<value_type> allocator_type;\n+  __gnu_test::check_allocate_max_size<allocator_type>();\n+  return 0;\n+}"}, {"sha": "9c96c3da9f2235beed1c93ce87ce28b3e4b41f54", "filename": "libstdc++-v3/testsuite/ext/pool_allocator/check_allocate_max_size.cc", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fcheck_allocate_max_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fcheck_allocate_max_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fpool_allocator%2Fcheck_allocate_max_size.cc?ref=a063e891bd88967d9dcea0f8c163f8372116265f", "patch": "@@ -0,0 +1,31 @@\n+//\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 20.4.1.1 allocator members\n+\n+#include <ext/pool_allocator.h>\n+#include <testsuite_allocator.h>\n+\n+int main()\n+{ \n+  typedef int value_type;\n+  typedef __gnu_cxx::__pool_alloc<value_type> allocator_type;\n+  __gnu_test::check_allocate_max_size<allocator_type>();\n+  return 0;\n+}"}, {"sha": "7c353445e8a7baa70f31482ab4598aa9fab09d12", "filename": "libstdc++-v3/testsuite/testsuite_allocator.h", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a063e891bd88967d9dcea0f8c163f8372116265f/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_allocator.h?ref=a063e891bd88967d9dcea0f8c163f8372116265f", "patch": "@@ -36,6 +36,7 @@\n #define _GLIBCXX_TESTSUITE_ALLOCATOR_H\n \n #include <cstddef>\n+#include <cstdlib>\n #include <limits>\n \n namespace \n@@ -205,7 +206,27 @@ namespace __gnu_test\n       a.deallocate(NULL, 1);\n       a.deallocate(NULL, 10);\n     }\n+\n+  template<typename Alloc>\n+    bool \n+    check_allocate_max_size()\n+    {\n+      Alloc a;\n+      try\n+\t{\n+\t  a.allocate(a.max_size() + 1);\n+\t}\n+      catch(std::bad_alloc&)\n+\t{\n+\t  return true;\n+\t}\n+      catch(...)\n+\t{\n+\t  throw;\n+\t}\n+      throw;\n+    }\n+\n }; // namespace __gnu_test\n \n #endif // _GLIBCXX_TESTSUITE_ALLOCATOR_H\n-"}]}