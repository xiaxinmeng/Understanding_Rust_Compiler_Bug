{"sha": "c994a0ce087dba0ca4563130ba8840bf87c0d07c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk5NGEwY2UwODdkYmEwY2E0NTYzMTMwYmE4ODQwYmY4N2MwZDA3Yw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2010-12-08T16:38:10Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2010-12-08T16:38:10Z"}, "message": "[multiple changes]\n\n2010-12-08  Richard Earnshaw  <rearnsha@arm.com>\n\n\tPR target/46631\n\t* arm.c (thumb2_reorg): Also try to reduce <commutative_op> Rd, Rn, Rd\n\tinto a 16-bit instruction.\n\n2010-12-08  Wei Guozhi  <carrot@google.com>\n\n\tPR target/46631\n\t* gcc.target/arm/pr46631: New testcase.\n\nFrom-SVN: r167595", "tree": {"sha": "2ee917e10b5c68f9fa9b353878f75bb3e19ba27d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ee917e10b5c68f9fa9b353878f75bb3e19ba27d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c994a0ce087dba0ca4563130ba8840bf87c0d07c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c994a0ce087dba0ca4563130ba8840bf87c0d07c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c994a0ce087dba0ca4563130ba8840bf87c0d07c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c994a0ce087dba0ca4563130ba8840bf87c0d07c/comments", "author": null, "committer": null, "parents": [{"sha": "b0ce92b4038fa29a390186c9eb03f1f1cfa8dd56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0ce92b4038fa29a390186c9eb03f1f1cfa8dd56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0ce92b4038fa29a390186c9eb03f1f1cfa8dd56"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "7f039b16c289d067870b7e84c2d4be91f829f8dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c994a0ce087dba0ca4563130ba8840bf87c0d07c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c994a0ce087dba0ca4563130ba8840bf87c0d07c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c994a0ce087dba0ca4563130ba8840bf87c0d07c", "patch": "@@ -1,3 +1,9 @@\n+2010-12-08  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/46631\n+\t* arm.c (thumb2_reorg): Also try to reduce <commutative_op> Rd, Rn, Rd\n+\tinto a 16-bit instruction.\n+\n 2010-12-08  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR middle-end/42694"}, {"sha": "9d2c6dd1273b1ef8e6ceb691702e68910127fb58", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c994a0ce087dba0ca4563130ba8840bf87c0d07c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c994a0ce087dba0ca4563130ba8840bf87c0d07c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=c994a0ce087dba0ca4563130ba8840bf87c0d07c", "patch": "@@ -12183,6 +12183,7 @@ thumb2_reorg (void)\n   FOR_EACH_BB (bb)\n     {\n       rtx insn;\n+\n       COPY_REG_SET (&live, DF_LR_OUT (bb));\n       df_simulate_initialize_backwards (bb, &live);\n       FOR_BB_INSNS_REVERSE (bb, insn)\n@@ -12200,21 +12201,43 @@ thumb2_reorg (void)\n \t\t  rtx dst = XEXP (pat, 0);\n \t\t  rtx src = XEXP (pat, 1);\n \t\t  rtx op0 = XEXP (src, 0);\n+\t\t  rtx op1 = (GET_RTX_CLASS (GET_CODE (src)) == RTX_COMM_ARITH\n+\t\t\t     ? XEXP (src, 1) : NULL);\n+\n \t\t  if (rtx_equal_p (dst, op0)\n \t\t      || GET_CODE (src) == PLUS || GET_CODE (src) == MINUS)\n \t\t    {\n \t\t      rtx ccreg = gen_rtx_REG (CCmode, CC_REGNUM);\n \t\t      rtx clobber = gen_rtx_CLOBBER (VOIDmode, ccreg);\n \t\t      rtvec vec = gen_rtvec (2, pat, clobber);\n+\n+\t\t      PATTERN (insn) = gen_rtx_PARALLEL (VOIDmode, vec);\n+\t\t      INSN_CODE (insn) = -1;\n+\t\t    }\n+\t\t  /* We can also handle a commutative operation where the\n+\t\t     second operand matches the destination.  */\n+\t\t  else if (op1 && rtx_equal_p (dst, op1))\n+\t\t    {\n+\t\t      rtx ccreg = gen_rtx_REG (CCmode, CC_REGNUM);\n+\t\t      rtx clobber = gen_rtx_CLOBBER (VOIDmode, ccreg);\n+\t\t      rtvec vec;\n+\n+\t\t      src = copy_rtx (src);\n+\t\t      XEXP (src, 0) = op1;\n+\t\t      XEXP (src, 1) = op0;\n+\t\t      pat = gen_rtx_SET (VOIDmode, dst, src);\n+\t\t      vec = gen_rtvec (2, pat, clobber);\n \t\t      PATTERN (insn) = gen_rtx_PARALLEL (VOIDmode, vec);\n \t\t      INSN_CODE (insn) = -1;\n \t\t    }\n \t\t}\n \t    }\n+\n \t  if (NONDEBUG_INSN_P (insn))\n \t    df_simulate_one_insn_backwards (bb, insn, &live);\n \t}\n     }\n+\n   CLEAR_REG_SET (&live);\n }\n "}, {"sha": "313af808f8436de0b807b6bbcf13965fd514281c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c994a0ce087dba0ca4563130ba8840bf87c0d07c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c994a0ce087dba0ca4563130ba8840bf87c0d07c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c994a0ce087dba0ca4563130ba8840bf87c0d07c", "patch": "@@ -1,3 +1,8 @@\n+2010-12-08  Wei Guozhi  <carrot@google.com>\n+\n+\tPR target/46631\n+\t* gcc.target/arm/pr46631: New testcase.\n+\n 2010-12-08  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR middle-end/42694"}, {"sha": "6f6dc4e85de03c7e418173f359d89c0a34f7dafa", "filename": "gcc/testsuite/gcc.target/arm/pr46631.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c994a0ce087dba0ca4563130ba8840bf87c0d07c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr46631.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c994a0ce087dba0ca4563130ba8840bf87c0d07c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr46631.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr46631.c?ref=c994a0ce087dba0ca4563130ba8840bf87c0d07c", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-options \"-mthumb -Os\" } */\n+/* { dg-require-effective-target arm_thumb2_ok } */\n+/* { dg-final { scan-assembler \"ands\" } } */\n+\n+struct S {\n+      int bi_buf;\n+      int bi_valid;\n+};\n+\n+int tz (struct S* p, int bits, int value)\n+{\n+     if (p == 0) return 1;\n+      p->bi_valid = bits;\n+      p->bi_buf = value & ((1 << bits) - 1);\n+      return 0;\n+}"}]}