{"sha": "ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY4MTc2ZTBmYWM5MzVjMDk1Y2MzOWY0ZWNkZmQ0M2NkYjhjYjNmMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-21T09:33:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-05-31T06:46:04Z"}, "message": "c++/88601 - [C/C++] __builtin_shufflevector support\n\nThis adds support for the clang __builtin_shufflevector extension to\nthe C and C++ frontends.  The builtin is lowered to VEC_PERM_EXPR.\nBecause VEC_PERM_EXPR does not support different sized vector inputs\nor result or the special permute index of -1 (don't-care)\nc_build_shufflevector applies lowering by widening inputs and output\nto the widest vector, replacing -1 by a defined index and\nsubsetting the final vector if we produced a wider result than\ndesired.\n\nCode generation thus can be sub-optimal, followup patches will\naim to fix that by recovering from part of the missing features\nduring RTL expansion and by relaxing the constraints of the GIMPLE\nIL with regard to VEC_PERM_EXPR.\n\n2021-05-21  Richard Biener  <rguenther@suse.de>\n\n\tPR c++/88601\ngcc/c-family/\n\t* c-common.c: Include tree-vector-builder.h and\n\tvec-perm-indices.h.\n\t(c_common_reswords): Add __builtin_shufflevector.\n\t(c_build_shufflevector): New funtion.\n\t* c-common.h (enum rid): Add RID_BUILTIN_SHUFFLEVECTOR.\n\t(c_build_shufflevector): Declare.\n\ngcc/c/\n\t* c-decl.c (names_builtin_p): Handle RID_BUILTIN_SHUFFLEVECTOR.\n\t* c-parser.c (c_parser_postfix_expression): Likewise.\n\ngcc/cp/\n\t* cp-objcp-common.c (names_builtin_p): Handle\n\tRID_BUILTIN_SHUFFLEVECTOR.\n\t* cp-tree.h (build_x_shufflevector): Declare.\n\t* parser.c (cp_parser_postfix_expression): Handle\n\tRID_BUILTIN_SHUFFLEVECTOR.\n\t* pt.c (tsubst_copy_and_build): Handle IFN_SHUFFLEVECTOR.\n\t* typeck.c (build_x_shufflevector): Build either a lowered\n\tVEC_PERM_EXPR or an unlowered shufflevector via a temporary\n\tinternal function IFN_SHUFFLEVECTOR.\n\ngcc/\n\t* internal-fn.c (expand_SHUFFLEVECTOR): Define.\n\t* internal-fn.def (SHUFFLEVECTOR): New.\n\t* internal-fn.h (expand_SHUFFLEVECTOR): Declare.\n\t* doc/extend.texi: Document __builtin_shufflevector.\n\ngcc/testsuite/\n\t* c-c++-common/builtin-shufflevector-2.c: New testcase.\n\t* c-c++-common/torture/builtin-shufflevector-1.c: Likewise.\n\t* g++.dg/ext/builtin-shufflevector-1.C: Likewise.\n\t* g++.dg/ext/builtin-shufflevector-2.C: Likewise.", "tree": {"sha": "89fad1f0a7e3560dc2a1682f62cd2beffe3b9e5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89fad1f0a7e3560dc2a1682f62cd2beffe3b9e5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df4e0359dad239854af0ea9eacb8e7e3719557d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df4e0359dad239854af0ea9eacb8e7e3719557d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df4e0359dad239854af0ea9eacb8e7e3719557d0"}], "stats": {"total": 381, "additions": 380, "deletions": 1}, "files": [{"sha": "c4eb2b1c92026a71263a2962edf8eeba28140582", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "patch": "@@ -51,6 +51,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"c-spellcheck.h\"\n #include \"selftest.h\"\n #include \"debug.h\"\n+#include \"tree-vector-builder.h\"\n+#include \"vec-perm-indices.h\"\n \n cpp_reader *parse_in;\t\t/* Declared in c-pragma.h.  */\n \n@@ -383,6 +385,7 @@ const struct c_common_resword c_common_reswords[] =\n   { \"__builtin_has_attribute\", RID_BUILTIN_HAS_ATTRIBUTE, 0 },\n   { \"__builtin_launder\", RID_BUILTIN_LAUNDER, D_CXXONLY },\n   { \"__builtin_shuffle\", RID_BUILTIN_SHUFFLE, 0 },\n+  { \"__builtin_shufflevector\", RID_BUILTIN_SHUFFLEVECTOR, 0 },\n   { \"__builtin_tgmath\", RID_BUILTIN_TGMATH, D_CONLY },\n   { \"__builtin_offsetof\", RID_OFFSETOF, 0 },\n   { \"__builtin_types_compatible_p\", RID_TYPES_COMPATIBLE_P, D_CONLY },\n@@ -1108,6 +1111,142 @@ c_build_vec_perm_expr (location_t loc, tree v0, tree v1, tree mask,\n   return ret;\n }\n \n+/* Build a VEC_PERM_EXPR if V0, V1 are not error_mark_nodes\n+   and have vector types, V0 has the same element type as V1, and the\n+   number of elements the result is that of MASK.  */\n+tree\n+c_build_shufflevector (location_t loc, tree v0, tree v1, vec<tree> mask,\n+\t\t       bool complain)\n+{\n+  tree ret;\n+  bool wrap = true;\n+  bool maybe_const = false;\n+\n+  if (v0 == error_mark_node || v1 == error_mark_node)\n+    return error_mark_node;\n+\n+  if (!gnu_vector_type_p (TREE_TYPE (v0))\n+      || !gnu_vector_type_p (TREE_TYPE (v1)))\n+    {\n+      if (complain)\n+\terror_at (loc, \"%<__builtin_shufflevector%> arguments must be vectors\");\n+      return error_mark_node;\n+    }\n+\n+  /* ???  In principle one could select a constant part of a variable size\n+     vector but things get a bit awkward with trying to support this here.  */\n+  unsigned HOST_WIDE_INT v0n, v1n;\n+  if (!TYPE_VECTOR_SUBPARTS (TREE_TYPE (v0)).is_constant (&v0n)\n+      || !TYPE_VECTOR_SUBPARTS (TREE_TYPE (v1)).is_constant (&v1n))\n+    {\n+      if (complain)\n+\terror_at (loc, \"%<__builtin_shufflevector%> arguments must be constant\"\n+\t\t  \" size vectors\");\n+      return error_mark_node;\n+    }\n+\n+  if (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (v0)))\n+      != TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (v1))))\n+    {\n+      if (complain)\n+\terror_at (loc, \"%<__builtin_shufflevector%> argument vectors must \"\n+\t\t  \"have the same element type\");\n+      return error_mark_node;\n+    }\n+\n+  if (!pow2p_hwi (mask.length ()))\n+    {\n+      if (complain)\n+\terror_at (loc, \"%<__builtin_shufflevector%> must specify a result \"\n+\t\t  \"with a power of two number of elements\");\n+      return error_mark_node;\n+    }\n+\n+  if (!c_dialect_cxx ())\n+    {\n+      /* Avoid C_MAYBE_CONST_EXPRs inside VEC_PERM_EXPR.  */\n+      v0 = c_fully_fold (v0, false, &maybe_const);\n+      wrap &= maybe_const;\n+\n+      v1 = c_fully_fold (v1, false, &maybe_const);\n+      wrap &= maybe_const;\n+    }\n+\n+  unsigned HOST_WIDE_INT maskl = MAX (mask.length (), MAX (v0n, v1n));\n+  unsigned HOST_WIDE_INT pad = (v0n < maskl ? maskl - v0n : 0);\n+  vec_perm_builder sel (maskl, maskl, 1);\n+  unsigned i;\n+  for (i = 0; i < mask.length (); ++i)\n+    {\n+      tree idx = mask[i];\n+      if (!tree_fits_shwi_p (idx))\n+\t{\n+\t  if (complain)\n+\t    error_at (loc, \"invalid element index %qE to \"\n+\t\t      \"%<__builtin_shufflevector%>\", idx);\n+\t  return error_mark_node;\n+\t}\n+      HOST_WIDE_INT iidx = tree_to_shwi (idx);\n+      if (iidx < -1\n+\t  || (iidx != -1\n+\t      && (unsigned HOST_WIDE_INT) iidx >= v0n + v1n))\n+\t{\n+\t  if (complain)\n+\t    error_at (loc, \"invalid element index %qE to \"\n+\t\t      \"%<__builtin_shufflevector%>\", idx);\n+\t  return error_mark_node;\n+\t}\n+      /* ???  Our VEC_PERM_EXPR does not allow for -1 yet.  */\n+      if (iidx == -1)\n+\tiidx = i;\n+      /* ???  Our VEC_PERM_EXPR does not allow different sized inputs,\n+\t so pad out a smaller v0.  */\n+      else if ((unsigned HOST_WIDE_INT) iidx >= v0n)\n+\tiidx += pad;\n+      sel.quick_push (iidx);\n+    }\n+  /* ???  VEC_PERM_EXPR does not support a result that is smaller than\n+     the inputs, so we have to pad id out.  */\n+  for (; i < maskl; ++i)\n+    sel.quick_push (i);\n+\n+  vec_perm_indices indices (sel, 2, maskl);\n+\n+  tree ret_type = build_vector_type (TREE_TYPE (TREE_TYPE (v0)), maskl);\n+  tree mask_type = build_vector_type (build_nonstandard_integer_type\n+\t\t(TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (ret_type))), 1),\n+\t\tmaskl);\n+  /* Pad out arguments to the common vector size.  */\n+  if (v0n < maskl)\n+    {\n+      constructor_elt elt = { NULL_TREE, build_zero_cst (TREE_TYPE (v0)) };\n+      v0 = build_constructor_single (ret_type, NULL_TREE, v0);\n+      for (i = 1; i < maskl / v0n; ++i)\n+\tvec_safe_push (CONSTRUCTOR_ELTS (v0), elt);\n+    }\n+  if (v1n < maskl)\n+    {\n+      constructor_elt elt = { NULL_TREE, build_zero_cst (TREE_TYPE (v1)) };\n+      v1 = build_constructor_single (ret_type, NULL_TREE, v1);\n+      for (i = 1; i < maskl / v1n; ++i)\n+\tvec_safe_push (CONSTRUCTOR_ELTS (v1), elt);\n+    }\n+  ret = build3_loc (loc, VEC_PERM_EXPR, ret_type, v0, v1,\n+\t\t    vec_perm_indices_to_tree (mask_type, indices));\n+  /* Get the lowpart we are interested in.  */\n+  if (mask.length () < maskl)\n+    {\n+      tree lpartt = build_vector_type (TREE_TYPE (ret_type), mask.length ());\n+      ret = build3_loc (loc, BIT_FIELD_REF,\n+\t\t\tlpartt, ret, TYPE_SIZE (lpartt), bitsize_zero_node);\n+    }\n+\n+  if (!c_dialect_cxx () && !wrap)\n+    ret = c_wrap_maybe_const (ret, true);\n+\n+  return ret;\n+}\n+\n /* Build a VEC_CONVERT ifn for __builtin_convertvector builtin.  */\n \n tree"}, {"sha": "be4b29a017b28f3c1adf2609c40f1094b3c2a08e", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "patch": "@@ -107,7 +107,7 @@ enum rid\n   RID_ASM,       RID_TYPEOF,   RID_ALIGNOF,  RID_ATTRIBUTE,  RID_VA_ARG,\n   RID_EXTENSION, RID_IMAGPART, RID_REALPART, RID_LABEL,      RID_CHOOSE_EXPR,\n   RID_TYPES_COMPATIBLE_P,      RID_BUILTIN_COMPLEX,\t     RID_BUILTIN_SHUFFLE,\n-  RID_BUILTIN_CONVERTVECTOR,   RID_BUILTIN_TGMATH,\n+  RID_BUILTIN_SHUFFLEVECTOR,   RID_BUILTIN_CONVERTVECTOR,   RID_BUILTIN_TGMATH,\n   RID_BUILTIN_HAS_ATTRIBUTE,\n   RID_DFLOAT32, RID_DFLOAT64, RID_DFLOAT128,\n \n@@ -1048,6 +1048,8 @@ extern bool lvalue_p (const_tree);\n extern bool vector_targets_convertible_p (const_tree t1, const_tree t2);\n extern bool vector_types_convertible_p (const_tree t1, const_tree t2, bool emit_lax_note);\n extern tree c_build_vec_perm_expr (location_t, tree, tree, tree, bool = true);\n+extern tree c_build_shufflevector (location_t, tree, tree,\n+\t\t\t\t   vec<tree>, bool = true);\n extern tree c_build_vec_convert (location_t, tree, location_t, tree, bool = true);\n \n extern void init_c_lex (void);"}, {"sha": "28f851b9d0b54ab750b749a1409743020e080b40", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "patch": "@@ -10547,6 +10547,7 @@ names_builtin_p (const char *name)\n     case RID_BUILTIN_CONVERTVECTOR:\n     case RID_BUILTIN_HAS_ATTRIBUTE:\n     case RID_BUILTIN_SHUFFLE:\n+    case RID_BUILTIN_SHUFFLEVECTOR:\n     case RID_CHOOSE_EXPR:\n     case RID_OFFSETOF:\n     case RID_TYPES_COMPATIBLE_P:"}, {"sha": "c491b128da5dc2607ce729d46f35c386b080cb65", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "patch": "@@ -10000,6 +10000,44 @@ c_parser_postfix_expression (c_parser *parser)\n \t    set_c_expr_source_range (&expr, loc, close_paren_loc);\n \t    break;\n \t  }\n+\tcase RID_BUILTIN_SHUFFLEVECTOR:\n+\t  {\n+\t    vec<c_expr_t, va_gc> *cexpr_list;\n+\t    unsigned int i;\n+\t    c_expr_t *p;\n+\t    location_t close_paren_loc;\n+\n+\t    c_parser_consume_token (parser);\n+\t    if (!c_parser_get_builtin_args (parser,\n+\t\t\t\t\t    \"__builtin_shufflevector\",\n+\t\t\t\t\t    &cexpr_list, false,\n+\t\t\t\t\t    &close_paren_loc))\n+\t      {\n+\t\texpr.set_error ();\n+\t\tbreak;\n+\t      }\n+\n+\t    FOR_EACH_VEC_SAFE_ELT (cexpr_list, i, p)\n+\t      *p = convert_lvalue_to_rvalue (loc, *p, true, true);\n+\n+\t    if (vec_safe_length (cexpr_list) < 3)\n+\t      {\n+\t\terror_at (loc, \"wrong number of arguments to \"\n+\t\t\t       \"%<__builtin_shuffle%>\");\n+\t\texpr.set_error ();\n+\t      }\n+\t    else\n+\t      {\n+\t\tauto_vec<tree, 16> mask;\n+\t\tfor (i = 2; i < cexpr_list->length (); ++i)\n+\t\t  mask.safe_push ((*cexpr_list)[i].value);\n+\t\texpr.value = c_build_shufflevector (loc, (*cexpr_list)[0].value,\n+\t\t\t\t\t\t    (*cexpr_list)[1].value,\n+\t\t\t\t\t\t    mask);\n+\t      }\n+\t    set_c_expr_source_range (&expr, loc, close_paren_loc);\n+\t    break;\n+\t  }\n \tcase RID_BUILTIN_CONVERTVECTOR:\n \t  {\n \t    location_t start_loc = loc;"}, {"sha": "46b2248574cfd09fd882613c5d62e59622868699", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "patch": "@@ -390,6 +390,7 @@ names_builtin_p (const char *name)\n     case RID_BUILTIN_CONVERTVECTOR:\n     case RID_BUILTIN_HAS_ATTRIBUTE:\n     case RID_BUILTIN_SHUFFLE:\n+    case RID_BUILTIN_SHUFFLEVECTOR:\n     case RID_BUILTIN_LAUNDER:\n     case RID_BUILTIN_BIT_CAST:\n     case RID_OFFSETOF:"}, {"sha": "c95a820037fcf20e7e528e25254f6dbcf61ae173", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "patch": "@@ -7895,6 +7895,9 @@ extern tree cp_build_binary_op                  (const op_location_t &,\n extern tree build_x_vec_perm_expr               (location_t,\n \t\t\t\t\t\t tree, tree, tree,\n \t\t\t\t\t\t tsubst_flags_t);\n+extern tree build_x_shufflevector               (location_t,\n+\t\t\t\t\t\t vec<tree, va_gc> *,\n+\t\t\t\t\t\t tsubst_flags_t);\n #define cxx_sizeof(T)  cxx_sizeof_or_alignof_type (input_location, T, SIZEOF_EXPR, false, true)\n extern tree build_simple_component_ref\t\t(tree, tree);\n extern tree build_ptrmemfunc_access_expr\t(tree, tree);"}, {"sha": "4a46828e16266de9690683ff7a8ae3497a330d55", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "patch": "@@ -7295,6 +7295,7 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \n     case RID_ADDRESSOF:\n     case RID_BUILTIN_SHUFFLE:\n+    case RID_BUILTIN_SHUFFLEVECTOR:\n     case RID_BUILTIN_LAUNDER:\n       {\n \tvec<tree, va_gc> *vec;\n@@ -7357,6 +7358,20 @@ cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t      }\n \t    break;\n \n+\t  case RID_BUILTIN_SHUFFLEVECTOR:\n+\t    if (vec->length () < 3)\n+\t      {\n+\t\terror_at (loc, \"wrong number of arguments to \"\n+\t\t\t       \"%<__builtin_shufflevector%>\");\n+\t\tpostfix_expression = error_mark_node;\n+\t      }\n+\t    else\n+\t      {\n+\t\tpostfix_expression\n+\t\t  = build_x_shufflevector (loc, vec, tf_warning_or_error);\n+\t      }\n+\t    break;\n+\n \t  default:\n \t    gcc_unreachable ();\n \t  }"}, {"sha": "31302803c627037d4d81098ac76d6f247e9e8759", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "patch": "@@ -20397,6 +20397,15 @@ tsubst_copy_and_build (tree t,\n \t\tRETURN (ret);\n \t      break;\n \n+\t    case IFN_SHUFFLEVECTOR:\n+\t      {\n+\t\tret = build_x_shufflevector (input_location, call_args,\n+\t\t\t\t\t     complain);\n+\t\tif (ret != error_mark_node)\n+\t\t  RETURN (ret);\n+\t\tbreak;\n+\t      }\n+\n \t    default:\n \t      /* Unsupported internal function with arguments.  */\n \t      gcc_unreachable ();"}, {"sha": "dbb2370510c7eda3f03be31bc8464dde1d87e792", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "patch": "@@ -5989,6 +5989,42 @@ build_x_vec_perm_expr (location_t loc,\n \t\t\t      orig_arg1, orig_arg2);\n   return exp;\n }\n+\n+/* Build a VEC_PERM_EXPR.\n+   This is a simple wrapper for c_build_shufflevector.  */\n+tree\n+build_x_shufflevector (location_t loc, vec<tree, va_gc> *args,\n+\t\t       tsubst_flags_t complain)\n+{\n+  tree arg0 = (*args)[0];\n+  tree arg1 = (*args)[1];\n+  if (processing_template_decl)\n+    {\n+      for (unsigned i = 0; i < args->length (); ++i)\n+\tif (type_dependent_expression_p ((*args)[i]))\n+\t  {\n+\t    tree exp = build_min_nt_call_vec (NULL, args);\n+\t    CALL_EXPR_IFN (exp) = IFN_SHUFFLEVECTOR;\n+\t    return exp;\n+\t  }\n+      arg0 = build_non_dependent_expr (arg0);\n+      arg1 = build_non_dependent_expr (arg1);\n+      /* ???  Nothing needed for the index arguments?  */\n+    }\n+  auto_vec<tree, 16> mask;\n+  for (unsigned i = 2; i < args->length (); ++i)\n+    {\n+      tree idx = maybe_constant_value ((*args)[i]);\n+      mask.safe_push (idx);\n+    }\n+  tree exp = c_build_shufflevector (loc, arg0, arg1, mask, complain & tf_error);\n+  if (processing_template_decl && exp != error_mark_node)\n+    {\n+      exp = build_min_non_dep_call_vec (exp, NULL, args);\n+      CALL_EXPR_IFN (exp) = IFN_SHUFFLEVECTOR;\n+    }\n+  return exp;\n+}\n \f\n /* Return a tree for the sum or difference (RESULTCODE says which)\n    of pointer PTROP and integer INTOP.  */"}, {"sha": "8711745bbe8856a0f19160f33d4fca4dcd049e70", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "patch": "@@ -11849,6 +11849,34 @@ to and from other datatypes of the same size).\n You cannot operate between vectors of different lengths or different\n signedness without a cast.\n \n+@findex __builtin_shufflevector\n+Vector shuffling is available using the\n+@code{__builtin_shufflevector (vec1, vec2, index...)}\n+function.  @var{vec1} and @var{vec2} must be expressions with\n+vector type with a compatible element type.  The result of\n+@code{__builtin_shufflevector} is a vector with the same element type\n+as @var{vec1} and @var{vec2} but that has an element count equal to\n+the number of indices specified.\n+\n+The @var{index} arguments are a list of integers that specify the\n+elements indices of the first two vectors that should be extracted and\n+returned in a new vector. These element indices are numbered sequentially\n+starting with the first vector, continuing into the second vector.\n+An index of -1 can be used to indicate that the corresponding element in\n+the returned vector is a don't care and can be freely chosen to optimized\n+the generated code sequence performing the shuffle operation.\n+\n+Consider the following example,\n+@smallexample\n+typedef int v4si __attribute__ ((vector_size (16)));\n+typedef int v8si __attribute__ ((vector_size (32)));\n+\n+v8si a = @{1,-2,3,-4,5,-6,7,-8@};\n+v4si b = __builtin_shufflevector (a, a, 0, 2, 4, 6); /* b is @{1,3,5,7@} */\n+v4si c = @{-2,-4,-6,-8@};\n+v8si d = __builtin_shufflevector (c, b, 4, 0, 5, 1, 6, 2, 7, 3); /* d is a */\n+@end smallexample\n+\n @findex __builtin_convertvector\n Vector conversion is available using the\n @code{__builtin_convertvector (vec, vectype)}"}, {"sha": "fb8b43d1ce2d11e80ff063a71b366b2fb9d8d82c", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "patch": "@@ -4121,6 +4121,12 @@ vectorized_internal_fn_supported_p (internal_fn ifn, tree type)\n \t  && direct_internal_fn_supported_p (ifn, type, OPTIMIZE_FOR_SPEED));\n }\n \n+void\n+expand_SHUFFLEVECTOR (internal_fn, gcall *)\n+{\n+  gcc_unreachable ();\n+}\n+\n void\n expand_PHI (internal_fn, gcall *)\n {"}, {"sha": "b2f414d2131b867eda337cd30f5ed40ed7c9fa10", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "patch": "@@ -405,6 +405,9 @@ DEF_INTERNAL_FN (CO_FRAME, ECF_PURE | ECF_NOTHROW | ECF_LEAF, NULL)\n /* A NOP function with arbitrary arguments and return value.  */\n DEF_INTERNAL_FN (NOP, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n \n+/* Temporary vehicle for __builtin_shufflevector.  */\n+DEF_INTERNAL_FN (SHUFFLEVECTOR, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n+\n #undef DEF_INTERNAL_INT_FN\n #undef DEF_INTERNAL_FLT_FN\n #undef DEF_INTERNAL_FLT_FLOATN_FN"}, {"sha": "19d0f849a5adc5d7f246d15b629e91eb8d4cbc24", "filename": "gcc/internal-fn.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Finternal-fn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Finternal-fn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.h?ref=ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "patch": "@@ -233,6 +233,7 @@ extern void expand_addsub_overflow (location_t, tree_code, tree, tree, tree,\n extern void expand_internal_call (gcall *);\n extern void expand_internal_call (internal_fn, gcall *);\n extern void expand_PHI (internal_fn, gcall *);\n+extern void expand_SHUFFLEVECTOR (internal_fn, gcall *);\n \n extern bool vectorized_internal_fn_supported_p (internal_fn, tree);\n "}, {"sha": "78cec1684fc387922d719d0c9da47bd4d791e584", "filename": "gcc/testsuite/c-c++-common/builtin-shufflevector-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-shufflevector-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-shufflevector-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fbuiltin-shufflevector-2.c?ref=ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+\n+typedef long v4di __attribute__((vector_size(4 * sizeof (long))));\n+typedef int v4si __attribute__((vector_size(4 * sizeof (int))));\n+typedef int v8si __attribute__((vector_size(8 * sizeof (int))));\n+\n+v4si res, a, b;\n+v4di resl, al, bl;\n+v8si res8, a8, b8;\n+void foo (void)\n+{\n+  res = __builtin_shufflevector (a, 0, 0, 1, 4, 5); /* { dg-error \"must be vectors\" } */\n+  res = __builtin_shufflevector (a, b, 0, 1, 4, 5, 6); /* { dg-error \"power of two\" } */\n+  res = __builtin_shufflevector (a, b, 0, 1, 4, 8); /* { dg-error \"invalid\" } */\n+  res = __builtin_shufflevector (a, b, 0, 1, -4, 5); /* { dg-error \"invalid\" } */\n+  res = __builtin_shufflevector (a, bl, 0, 1, 4, 5); /* { dg-error \"same element type\" } */\n+  resl = __builtin_shufflevector (a, b, 0, 1, 4, 5); /* { dg-error \"\" } incompatible types */\n+}"}, {"sha": "c86473647958dd7bba2a14ca9050161e58ee4acc", "filename": "gcc/testsuite/c-c++-common/torture/builtin-shufflevector-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-shufflevector-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-shufflevector-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-shufflevector-1.c?ref=ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+\n+typedef long v4di __attribute__((vector_size(4 * sizeof (long))));\n+typedef int v4si __attribute__((vector_size(4 * sizeof (int))));\n+typedef int v8si __attribute__((vector_size(8 * sizeof (int))));\n+\n+v4si res[5], a, b;\n+v4di resl, al, bl;\n+v8si res8[3], a8, b8;\n+void __attribute__((noipa))\n+foo (void)\n+{\n+  res[0] = __builtin_shufflevector (a, b, 0, 1, 4, 5);\n+  res[1] = __builtin_shufflevector (a, b, 0, 1, -1, 5);\n+  res8[0] = __builtin_shufflevector (a, b, 0, 1, 2, 2 + 1, 4, 5, 6, 7);\n+  res[2] = __builtin_shufflevector (a8, b8, 0, 8, 1, 9);\n+  res[3] = __builtin_shufflevector (a8, b, 0, 8, 1, 9);\n+  res[4] = __builtin_shufflevector (a, b8, 0, 4, 1, 5);\n+  res8[1] = __builtin_shufflevector (a8, b, 0, 8, 1, 9, 10, 11, 2, 3);\n+  res8[2] = __builtin_shufflevector (a, b8, 0, 4, 1, 5, -1, -1, -1, -1);\n+}\n+\n+#define comp(a, b, n) \\\n+  for (unsigned i = 0; i < n; ++i) \\\n+    if ((a)[i] != (b)[i]) \\\n+      __builtin_abort ();\n+\n+int main()\n+{\n+  a = (v4si) { 0, 1, 2, 3 };\n+  b = (v4si) { 4, 5, 6, 7 };\n+  a8 = (v8si) { 0, 1, 2, 3, 4, 5, 6, 7 };\n+  b8 = (v8si) { 8, 9, 10, 11, 12, 13, 14, 15 };\n+  foo ();\n+  comp (res[0], ((v4si) { 0, 1, 4, 5}), 4)\n+  res[1][2] = 9;\n+  comp (res[1], ((v4si) { 0, 1, 9, 5}), 4)\n+  comp (res8[0], ((v8si) { 0, 1, 2, 3, 4, 5, 6, 7 }), 8)\n+  comp (res[2], ((v4si) { 0, 8, 1, 9}), 4)\n+  comp (res[3], ((v4si) { 0, 4, 1, 5}), 4)\n+  comp (res[4], ((v4si) { 0, 8, 1, 9}), 4)\n+  comp (res8[1], ((v8si) { 0, 4, 1, 5, 6, 7, 2, 3 }), 8)\n+  res8[2][4] = 42;\n+  res8[2][5] = 42;\n+  res8[2][6] = 42;\n+  res8[2][7] = 42;\n+  comp (res8[2], ((v8si) { 0, 8, 1, 9, 42, 42, 42, 42 }), 8)\n+  return 0;\n+}"}, {"sha": "da838e8ca6c4aac3df0d0da177b243054a5d990f", "filename": "gcc/testsuite/g++.dg/ext/builtin-shufflevector-1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-shufflevector-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-shufflevector-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-shufflevector-1.C?ref=ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T1, typename T2, int ...args>\n+struct shufflevector\n+{\n+  static auto shuffle (T1 a, T2 b)\n+      -> decltype (__builtin_shufflevector (a, b, args...))\n+  {\n+    return __builtin_shufflevector (a, b, args...);\n+  }\n+};\n+\n+typedef int v4si __attribute__((vector_size (16)));\n+v4si a, b, c;\n+int main()\n+{\n+  c = shufflevector<v4si, v4si, 0, 1, 4, 5>::shuffle (a, b);\n+}"}, {"sha": "c8d096c5295de5bd57f76fc04a0a5e1812cf7389", "filename": "gcc/testsuite/g++.dg/ext/builtin-shufflevector-2.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-shufflevector-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-shufflevector-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-shufflevector-2.C?ref=ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do compile }\n+\n+typedef double v2df __attribute__((vector_size(2 * sizeof (double))));\n+\n+template<typename T, typename U, int N, int M>\n+struct Shuffle {\n+  void f(T t, U u, v2df a, v2df b) {\n+    (void)__builtin_shufflevector(t, u, N, M); // { dg-error \"invalid\" }\n+  }\n+};\n+\n+template struct Shuffle<v2df, v2df, 4, 3>;"}]}