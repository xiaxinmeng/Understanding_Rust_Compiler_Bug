{"sha": "a494036c8e2c67c7938f7c4cf34651c3aa1737e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ5NDAzNmM4ZTJjNjdjNzkzOGY3YzRjZjM0NjUxYzNhYTE3MzdlMg==", "commit": {"author": {"name": "Quentin Ochem", "email": "ochem@adacore.com", "date": "2008-05-27T10:13:53Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-05-27T10:13:53Z"}, "message": "s-stausa.adb (Initialize): Updated result initialization, and initialization of environment stack.\n\n2008-05-27  Quentin Ochem  <ochem@adacore.com>\n\n\t* s-stausa.adb (Initialize): Updated result initialization, and\n\tinitialization of environment stack.\n\t(Fill_Stack): Improved computation of the pattern zone, taking into\n\taccount already filled at the calling point.\n\t(Get_Usage_Range): Now uses Min_Measure and Max_Measure instead of\n\tMeasure and Overflow_Guard.\n\t(Report_Result): Fixed computation of the result using new fields of\n\tStack_Analyzer.\n\t\n\t* s-stausa.ads (Initialize_Analyzer): Replaced Size / Overflow_Guard\n\tparams by more explicit Stack_Size / Max_Pattern_Size params.\n\t(Stack_Analyzer): Added distinct Stack_Size & Pattern_Size fields.\n\tAdded Stack_Used_When_Filling field.\n\t(Task_Result): Replaced Measure / Overflow_Guard by more explicit\n\tMin_Measure and Max_Measure fields.\n\t\n\t* s-tassta.adb (Task_Wrapper): Updated call to Initialize_Analyzer.\n\nFrom-SVN: r135999", "tree": {"sha": "fc5f4ca746fe0933f6141488a778144c76c36a5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc5f4ca746fe0933f6141488a778144c76c36a5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a494036c8e2c67c7938f7c4cf34651c3aa1737e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a494036c8e2c67c7938f7c4cf34651c3aa1737e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a494036c8e2c67c7938f7c4cf34651c3aa1737e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a494036c8e2c67c7938f7c4cf34651c3aa1737e2/comments", "author": {"login": "QuentinOchem", "id": 5612750, "node_id": "MDQ6VXNlcjU2MTI3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5612750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuentinOchem", "html_url": "https://github.com/QuentinOchem", "followers_url": "https://api.github.com/users/QuentinOchem/followers", "following_url": "https://api.github.com/users/QuentinOchem/following{/other_user}", "gists_url": "https://api.github.com/users/QuentinOchem/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuentinOchem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuentinOchem/subscriptions", "organizations_url": "https://api.github.com/users/QuentinOchem/orgs", "repos_url": "https://api.github.com/users/QuentinOchem/repos", "events_url": "https://api.github.com/users/QuentinOchem/events{/privacy}", "received_events_url": "https://api.github.com/users/QuentinOchem/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ce2798e8554e195b32f8c0034756dcaa558a12a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce2798e8554e195b32f8c0034756dcaa558a12a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce2798e8554e195b32f8c0034756dcaa558a12a3"}], "stats": {"total": 163, "additions": 94, "deletions": 69}, "files": [{"sha": "71474dd319c4dfc5e12cc26d73565c780777f391", "filename": "gcc/ada/s-stausa.adb", "status": "modified", "additions": 59, "deletions": 47, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a494036c8e2c67c7938f7c4cf34651c3aa1737e2/gcc%2Fada%2Fs-stausa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a494036c8e2c67c7938f7c4cf34651c3aa1737e2/gcc%2Fada%2Fs-stausa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stausa.adb?ref=a494036c8e2c67c7938f7c4cf34651c3aa1737e2", "patch": "@@ -205,10 +205,10 @@ package body System.Stack_Usage is\n       Result_Array := new Result_Array_Type (1 .. Buffer_Size);\n       Result_Array.all :=\n         (others =>\n-           (Task_Name      => (others => ASCII.NUL),\n-            Measure        => 0,\n-            Max_Size       => 0,\n-            Overflow_Guard => 0));\n+           (Task_Name   => (others => ASCII.NUL),\n+            Min_Measure => 0,\n+            Max_Measure => 0,\n+            Max_Size    => 0));\n \n       --  Set the Is_Enabled flag to true, so that the task wrapper knows that\n       --  it has to handle dynamic stack analysis\n@@ -233,7 +233,7 @@ package body System.Stack_Usage is\n               (Environment_Task_Analyzer,\n                \"ENVIRONMENT TASK\",\n                Stack_Size,\n-               0,\n+               Stack_Size,\n                System.Storage_Elements.To_Integer (Bottom_Of_Stack'Address));\n \n             Fill_Stack (Environment_Task_Analyzer);\n@@ -253,51 +253,66 @@ package body System.Stack_Usage is\n    ----------------\n \n    procedure Fill_Stack (Analyzer : in out Stack_Analyzer) is\n-\n       --  Change the local variables and parameters of this function with\n       --  super-extra care. The more the stack frame size of this function is\n       --  big, the more an \"instrumentation threshold at writing\" error is\n       --  likely to happen.\n \n-      Stack : aliased Stack_Slots (1 .. Analyzer.Size / Bytes_Per_Pattern);\n-\n+      Current_Stack_Level : aliased Integer;\n    begin\n-      Stack := (others => Analyzer.Pattern);\n+      --  Reajust the pattern size. When we arrive in this function, there is\n+      --  already a given amount of stack used, that we won't analyze.\n \n-      Analyzer.Stack_Overlay_Address := Stack'Address;\n+      Analyzer.Stack_Used_When_Filling := Stack_Size\n+        (Analyzer.Bottom_Of_Stack,\n+         To_Stack_Address (Current_Stack_Level'Address))\n+        + Natural (Current_Stack_Level'Size);\n \n-      Analyzer.Bottom_Pattern_Mark :=\n-        To_Stack_Address (Stack (Bottom_Slot_Index_In (Stack))'Address);\n-      Analyzer.Top_Pattern_Mark :=\n-        To_Stack_Address (Stack (Top_Slot_Index_In (Stack))'Address);\n+      Analyzer.Pattern_Size := Analyzer.Pattern_Size\n+        - Analyzer.Stack_Used_When_Filling;\n+\n+      declare\n+         Stack : aliased Stack_Slots\n+           (1 .. Analyzer.Pattern_Size / Bytes_Per_Pattern);\n+      begin\n+         Stack := (others => Analyzer.Pattern);\n \n-      --  If Arr has been packed, the following assertion must be true (we add\n-      --  the size of the element whose address is:\n-      --    Min (Analyzer.Inner_Pattern_Mark, Analyzer.Outer_Pattern_Mark)):\n+         Analyzer.Stack_Overlay_Address := Stack'Address;\n \n-      pragma Assert\n-        (Analyzer.Size =\n-           Stack_Size\n-             (Analyzer.Top_Pattern_Mark, Analyzer.Bottom_Pattern_Mark));\n+         Analyzer.Bottom_Pattern_Mark :=\n+           To_Stack_Address (Stack (Bottom_Slot_Index_In (Stack))'Address);\n+         Analyzer.Top_Pattern_Mark :=\n+           To_Stack_Address (Stack (Top_Slot_Index_In (Stack))'Address);\n+\n+         --  If Arr has been packed, the following assertion must be true (we\n+         --  add the size of the element whose address is:\n+         --    Min (Analyzer.Inner_Pattern_Mark, Analyzer.Outer_Pattern_Mark)):\n+\n+         pragma Assert\n+           (Analyzer.Pattern_Size =\n+              Stack_Size\n+                (Analyzer.Top_Pattern_Mark, Analyzer.Bottom_Pattern_Mark));\n+      end;\n    end Fill_Stack;\n \n    -------------------------\n    -- Initialize_Analyzer --\n    -------------------------\n \n    procedure Initialize_Analyzer\n-     (Analyzer       : in out Stack_Analyzer;\n-      Task_Name      : String;\n-      Size           : Natural;\n-      Overflow_Guard : Natural;\n-      Bottom         : Stack_Address;\n-      Pattern        : Unsigned_32 := 16#DEAD_BEEF#)\n+     (Analyzer         : in out Stack_Analyzer;\n+      Task_Name        : String;\n+      Stack_Size       : Natural;\n+      Max_Pattern_Size : Natural;\n+      Bottom           : Stack_Address;\n+      Pattern          : Unsigned_32 := 16#DEAD_BEEF#)\n    is\n    begin\n       --  Initialize the analyzer fields\n \n       Analyzer.Bottom_Of_Stack := Bottom;\n-      Analyzer.Size := Size;\n+      Analyzer.Stack_Size := Stack_Size;\n+      Analyzer.Pattern_Size := Max_Pattern_Size;\n       Analyzer.Pattern := Pattern;\n       Analyzer.Result_Id := Next_Id;\n \n@@ -314,8 +329,6 @@ package body System.Stack_Usage is\n                         Task_Name'First + Task_Name_Length - 1);\n       end if;\n \n-      Analyzer.Overflow_Guard := Overflow_Guard;\n-\n       Next_Id := Next_Id + 1;\n    end Initialize_Analyzer;\n \n@@ -346,7 +359,7 @@ package body System.Stack_Usage is\n       --  is, the more an \"instrumentation threshold at reading\" error is\n       --  likely to happen.\n \n-      Stack : Stack_Slots (1 .. Analyzer.Size / Bytes_Per_Pattern);\n+      Stack : Stack_Slots (1 .. Analyzer.Pattern_Size / Bytes_Per_Pattern);\n       for Stack'Address use Analyzer.Stack_Overlay_Address;\n \n    begin\n@@ -382,10 +395,8 @@ package body System.Stack_Usage is\n    ---------------------\n \n    function Get_Usage_Range (Result : Task_Result) return String is\n-      Min_Used_Str : constant String :=\n-                       Natural'Image (Result.Measure);\n-      Max_Used_Str : constant String :=\n-                       Natural'Image (Result.Measure + Result.Overflow_Guard);\n+      Min_Used_Str : constant String := Natural'Image (Result.Min_Measure);\n+      Max_Used_Str : constant String := Natural'Image (Result.Max_Measure);\n    begin\n       return \"[\" & Min_Used_Str (2 .. Min_Used_Str'Last) & \" -\"\n              & Max_Used_Str & \"]\";\n@@ -458,8 +469,8 @@ package body System.Stack_Usage is\n          for J in Result_Array'Range loop\n             exit when J >= Next_Id;\n \n-            if Result_Array (J).Measure\n-              > Result_Array (Max_Actual_Use_Result_Id).Measure\n+            if Result_Array (J).Max_Measure\n+              > Result_Array (Max_Actual_Use_Result_Id).Max_Measure\n             then\n                Max_Actual_Use_Result_Id := J;\n             end if;\n@@ -526,16 +537,17 @@ package body System.Stack_Usage is\n    -------------------\n \n    procedure Report_Result (Analyzer : Stack_Analyzer) is\n+      Measure : constant Natural :=\n+        Stack_Size\n+          (Analyzer.Topmost_Touched_Mark,\n+           Analyzer.Bottom_Of_Stack)\n+        + Analyzer.Stack_Used_When_Filling;\n       Result : constant Task_Result :=\n-                 (Task_Name      => Analyzer.Task_Name,\n-                  Max_Size       => Analyzer.Size + Analyzer.Overflow_Guard,\n-                  Measure        => Stack_Size\n-                                      (Analyzer.Topmost_Touched_Mark,\n-                                       Analyzer.Bottom_Of_Stack),\n-                  Overflow_Guard => Analyzer.Overflow_Guard -\n-                                      Natural (Analyzer.Bottom_Of_Stack -\n-                                        Analyzer.Bottom_Pattern_Mark));\n-\n+        (Task_Name      => Analyzer.Task_Name,\n+         Max_Size       => Analyzer.Stack_Size,\n+         Min_Measure    => Measure,\n+         Max_Measure    => Measure + Analyzer.Stack_Size\n+         - Analyzer.Pattern_Size);\n    begin\n       if Analyzer.Result_Id in Result_Array'Range then\n \n@@ -550,7 +562,7 @@ package body System.Stack_Usage is\n             Result_Str_Len : constant Natural :=\n                                Get_Usage_Range (Result)'Length;\n             Size_Str_Len   : constant Natural :=\n-                               Natural'Image (Analyzer.Size)'Length;\n+                               Natural'Image (Analyzer.Stack_Size)'Length;\n \n             Max_Stack_Size_Len : Natural;\n             Max_Actual_Use_Len : Natural;"}, {"sha": "dd27efe4141f8df6004a4fac261dbb68c0acf190", "filename": "gcc/ada/s-stausa.ads", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a494036c8e2c67c7938f7c4cf34651c3aa1737e2/gcc%2Fada%2Fs-stausa.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a494036c8e2c67c7938f7c4cf34651c3aa1737e2/gcc%2Fada%2Fs-stausa.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stausa.ads?ref=a494036c8e2c67c7938f7c4cf34651c3aa1737e2", "patch": "@@ -211,15 +211,18 @@ package System.Stack_Usage is\n    --                                            Analyzer.Top_Pattern_Mark\n \n    procedure Initialize_Analyzer\n-     (Analyzer       : in out Stack_Analyzer;\n-      Task_Name      : String;\n-      Size           : Natural;\n-      Overflow_Guard : Natural;\n-      Bottom         : Stack_Address;\n-      Pattern        : Interfaces.Unsigned_32 := 16#DEAD_BEEF#);\n+     (Analyzer         : in out Stack_Analyzer;\n+      Task_Name        : String;\n+      Stack_Size       : Natural;\n+      Max_Pattern_Size : Natural;\n+      Bottom           : Stack_Address;\n+      Pattern          : Interfaces.Unsigned_32 := 16#DEAD_BEEF#);\n    --  Should be called before any use of a Stack_Analyzer, to initialize it.\n-   --  Size is the size of the pattern zone. Bottom should be a close\n-   --  approximation of the caller base frame address.\n+   --  Max_Pattern_Size is the size of the pattern zone, might be smaller than\n+   --  the full stack size in order to take into account e.g. the secondary\n+   --  stack and a gard against overflow. The actual size taken will be\n+   --  reajusted, with data already used at the time the stack is actually\n+   --  filled.\n \n    Is_Enabled : Boolean := False;\n    --  When this flag is true, then stack analysis is enabled\n@@ -274,7 +277,10 @@ private\n       Task_Name : String (1 .. Task_Name_Length);\n       --  Name of the task\n \n-      Size : Natural;\n+      Stack_Size : Natural;\n+      --  Entire size of the analyzed stack\n+\n+      Pattern_Size : Natural;\n       --  Size of the pattern zone\n \n       Pattern : Pattern_Type;\n@@ -304,9 +310,9 @@ private\n       --  Id of the result. If less than value given to gnatbind -u corresponds\n       --  to the location in the result array of result for the current task.\n \n-      Overflow_Guard : Natural;\n-      --  The amount of bytes that won't be analyzed in order to prevent\n-      --  writing out of the stack\n+      Stack_Used_When_Filling : Natural := 0;\n+      --  Amount of stack that was already used when actually filling the\n+      --  memory, and therefore not analyzed.\n    end record;\n \n    Environment_Task_Analyzer : Stack_Analyzer;\n@@ -315,9 +321,14 @@ private\n \n    type Task_Result is record\n       Task_Name      : String (1 .. Task_Name_Length);\n-      Measure        : Natural;\n+      Min_Measure    : Natural;\n+      --  Minimal value for the measure.\n+\n+      Max_Measure    : Natural;\n+      --  Maximal value for the measure, taking into account the actual size\n+      --  of the pattern filled.\n+\n       Max_Size       : Natural;\n-      Overflow_Guard : Natural;\n    end record;\n \n    type Result_Array_Type is array (Positive range <>) of Task_Result;"}, {"sha": "d28cb7e42d23bfa3c464fc856fedd6b520ac0853", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a494036c8e2c67c7938f7c4cf34651c3aa1737e2/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a494036c8e2c67c7938f7c4cf34651c3aa1737e2/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=a494036c8e2c67c7938f7c4cf34651c3aa1737e2", "patch": "@@ -1065,8 +1065,6 @@ package body System.Tasking.Stages is\n          Overflow_Guard := Big_Overflow_Guard;\n       end if;\n \n-      Size := Size - Overflow_Guard;\n-\n       if not Parameters.Sec_Stack_Dynamic then\n          Self_ID.Common.Compiler_Data.Sec_Stack_Addr :=\n            Secondary_Stack'Address;\n@@ -1078,14 +1076,18 @@ package body System.Tasking.Stages is\n          Self_ID.Common.Task_Alternate_Stack := Task_Alternate_Stack'Address;\n       end if;\n \n+      Size := Size - Overflow_Guard;\n+\n       if System.Stack_Usage.Is_Enabled then\n          STPO.Lock_RTS;\n-         Initialize_Analyzer (Self_ID.Common.Analyzer,\n-                              Self_ID.Common.Task_Image\n-                                (1 .. Self_ID.Common.Task_Image_Len),\n-                              Size,\n-                              Overflow_Guard,\n-                              SSE.To_Integer (Bottom_Of_Stack'Address));\n+         Initialize_Analyzer\n+           (Self_ID.Common.Analyzer,\n+            Self_ID.Common.Task_Image\n+              (1 .. Self_ID.Common.Task_Image_Len),\n+            Natural\n+              (Self_ID.Common.Compiler_Data.Pri_Stack_Info.Size),\n+            Size,\n+            SSE.To_Integer (Bottom_Of_Stack'Address));\n          STPO.Unlock_RTS;\n          Fill_Stack (Self_ID.Common.Analyzer);\n       end if;"}]}