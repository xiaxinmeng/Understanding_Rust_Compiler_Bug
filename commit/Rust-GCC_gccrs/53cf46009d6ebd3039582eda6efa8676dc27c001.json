{"sha": "53cf46009d6ebd3039582eda6efa8676dc27c001", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNjZjQ2MDA5ZDZlYmQzMDM5NTgyZWRhNmVmYTg2NzZkYzI3YzAwMQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2008-08-04T09:36:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-08-04T09:36:10Z"}, "message": "sem_ch3.adb (Access_Definition): A formal object declaration is a legal context for an anonymous access to...\n\n2008-08-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Access_Definition): A formal object declaration is a\n\tlegal context for an anonymous access to subprogram.\n\n\t* sem_ch4.adb (Analyze_One_Call): If the call can be interpreted as an\n\tindirect call, report success to the caller to include possible\n\tinterpretation.\n\n\t* sem_ch6.adb (Check_Return_Type_Indication): Apply proper conformance\n\tcheck when the type\n\tof the extended return is an anonymous access_to_subprogram type.\n\n\t* sem_res.adb:\n\t(Resolve_Call): Insert a dereference if the type of the subprogram is an\n\taccess_to_subprogram and the context requires its return type, and a\n\tdereference has not been introduced previously.\n\nFrom-SVN: r138591", "tree": {"sha": "1a7e3bd5f400c494e4d4e8a46e0e916140b7c2bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a7e3bd5f400c494e4d4e8a46e0e916140b7c2bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53cf46009d6ebd3039582eda6efa8676dc27c001", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cf46009d6ebd3039582eda6efa8676dc27c001", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53cf46009d6ebd3039582eda6efa8676dc27c001", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cf46009d6ebd3039582eda6efa8676dc27c001/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a037f912464e14216f579eccc996d7565a697433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a037f912464e14216f579eccc996d7565a697433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a037f912464e14216f579eccc996d7565a697433"}], "stats": {"total": 94, "additions": 78, "deletions": 16}, "files": [{"sha": "0ac17bf2efc7c8db2f22bf7921ffad3471a13a19", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cf46009d6ebd3039582eda6efa8676dc27c001/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cf46009d6ebd3039582eda6efa8676dc27c001/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=53cf46009d6ebd3039582eda6efa8676dc27c001", "patch": "@@ -1054,6 +1054,7 @@ package body Sem_Ch3 is\n                    or else\n                  Nkind_In (D_Ityp, N_Object_Declaration,\n                                    N_Object_Renaming_Declaration,\n+                                   N_Formal_Object_Declaration,\n                                    N_Formal_Type_Declaration,\n                                    N_Task_Type_Declaration,\n                                    N_Protected_Type_Declaration))"}, {"sha": "5f23ca28c4f345dd9abc485e65fb34556eb532a6", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cf46009d6ebd3039582eda6efa8676dc27c001/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cf46009d6ebd3039582eda6efa8676dc27c001/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=53cf46009d6ebd3039582eda6efa8676dc27c001", "patch": "@@ -2127,11 +2127,12 @@ package body Sem_Ch4 is\n       --  is already known to be compatible, and because this may be an\n       --  indexing of a call with default parameters.\n \n-      Formal     : Entity_Id;\n-      Actual     : Node_Id;\n-      Is_Indexed : Boolean := False;\n-      Subp_Type  : constant Entity_Id := Etype (Nam);\n-      Norm_OK    : Boolean;\n+      Formal      : Entity_Id;\n+      Actual      : Node_Id;\n+      Is_Indexed  : Boolean := False;\n+      Is_Indirect : Boolean := False;\n+      Subp_Type   : constant Entity_Id := Etype (Nam);\n+      Norm_OK     : Boolean;\n \n       function Operator_Hidden_By (Fun : Entity_Id) return Boolean;\n       --  There may be a user-defined operator that hides the current\n@@ -2240,6 +2241,13 @@ package body Sem_Ch4 is\n       --  in prefix notation, so that the rebuilt parameter list has more than\n       --  one actual.\n \n+      if not Is_Overloadable (Nam)\n+        and then Ekind (Nam) /= E_Subprogram_Type\n+        and then Ekind (Nam) /= E_Entry_Family\n+      then\n+         return;\n+      end if;\n+\n       if Present (Actuals)\n         and then\n           (Needs_No_Actuals (Nam)\n@@ -2259,11 +2267,13 @@ package body Sem_Ch4 is\n \n          --  The prefix can also be a parameterless function that returns an\n          --  access to subprogram, in which case this is an indirect call.\n+         --  If this succeeds, an explicit dereference is added later on,\n+         --  in Analyze_Call or Resolve_Call.\n \n          elsif Is_Access_Type (Subp_Type)\n            and then Ekind (Designated_Type (Subp_Type)) = E_Subprogram_Type\n          then\n-            Is_Indexed := Try_Indirect_Call (N, Nam, Subp_Type);\n+            Is_Indirect := Try_Indirect_Call (N, Nam, Subp_Type);\n          end if;\n \n       end if;\n@@ -2278,13 +2288,21 @@ package body Sem_Ch4 is\n          return;\n       end if;\n \n-      Normalize_Actuals (N, Nam, (Report and not Is_Indexed), Norm_OK);\n+      Normalize_Actuals\n+        (N, Nam, (Report and not Is_Indexed and not Is_Indirect), Norm_OK);\n \n       if not Norm_OK then\n \n+         --  If an indirect call is a possible interpretation, indicate\n+         --  success to the caller.\n+\n+         if Is_Indirect then\n+            Success := True;\n+            return;\n+\n          --  Mismatch in number or names of parameters\n \n-         if Debug_Flag_E then\n+         elsif Debug_Flag_E then\n             Write_Str (\" normalization fails in call \");\n             Write_Int (Int (N));\n             Write_Str (\" with subprogram \");\n@@ -2410,7 +2428,7 @@ package body Sem_Ch4 is\n                      Write_Eol;\n                   end if;\n \n-                  if Report and not Is_Indexed then\n+                  if Report and not Is_Indexed and not Is_Indirect then\n \n                      --  Ada 2005 (AI-251): Complete the error notification\n                      --  to help new Ada 2005 users"}, {"sha": "1ab798240a0c76a56f456924f4c03a0b2494d5ea", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cf46009d6ebd3039582eda6efa8676dc27c001/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cf46009d6ebd3039582eda6efa8676dc27c001/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=53cf46009d6ebd3039582eda6efa8676dc27c001", "patch": "@@ -542,16 +542,33 @@ package body Sem_Ch6 is\n \n          --  \"return access T\" case; check that the return statement also has\n          --  \"access T\", and that the subtypes statically match:\n+         --   if this is an access to subprogram the signatures must match.\n \n          if R_Type_Is_Anon_Access then\n             if R_Stm_Type_Is_Anon_Access then\n-               if Base_Type (Designated_Type (R_Stm_Type)) /=\n-                    Base_Type (Designated_Type (R_Type))\n-                 or else not Subtypes_Statically_Match (R_Stm_Type, R_Type)\n+               if\n+                 Ekind (Designated_Type (R_Stm_Type)) /= E_Subprogram_Type\n                then\n-                  Error_Msg_N\n-                    (\"subtype must statically match function result subtype\",\n-                     Subtype_Mark (Subtype_Ind));\n+                  if Base_Type (Designated_Type (R_Stm_Type)) /=\n+                     Base_Type (Designated_Type (R_Type))\n+                    or else not Subtypes_Statically_Match (R_Stm_Type, R_Type)\n+                  then\n+                     Error_Msg_N\n+                      (\"subtype must statically match function result subtype\",\n+                       Subtype_Mark (Subtype_Ind));\n+                  end if;\n+\n+               else\n+                  --  For two anonymous access to subprogram types, the\n+                  --  types themselves must be type conformant.\n+\n+                  if not Conforming_Types\n+                    (R_Stm_Type, R_Type, Fully_Conformant)\n+                  then\n+                     Error_Msg_N\n+                      (\"subtype must statically match function result subtype\",\n+                         Subtype_Ind);\n+                  end if;\n                end if;\n \n             else"}, {"sha": "62822aa7b8c6a20c7dce408c4493f5daf65c6075", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cf46009d6ebd3039582eda6efa8676dc27c001/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cf46009d6ebd3039582eda6efa8676dc27c001/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=53cf46009d6ebd3039582eda6efa8676dc27c001", "patch": "@@ -4692,6 +4692,25 @@ package body Sem_Res is\n          end loop;\n       end if;\n \n+      if Ekind (Etype (Nam)) = E_Access_Subprogram_Type\n+         and then Ekind (Typ) /= E_Access_Subprogram_Type\n+         and then Nkind (Subp) /= N_Explicit_Dereference\n+         and then Present (Parameter_Associations (N))\n+      then\n+         --  The prefix is a parameterless function call that returns an\n+         --  access to subprogram. If parameters are present in the current\n+         --  call  add an explicit dereference.\n+\n+         --  The dereference is added either in Analyze_Call or here. Should\n+         --  be consolidated ???\n+\n+         Set_Is_Overloaded (Subp, False);\n+         Set_Etype (Subp, Etype (Nam));\n+         Insert_Explicit_Dereference (Subp);\n+         Nam := Designated_Type (Etype (Nam));\n+         Resolve (Subp, Nam);\n+      end if;\n+\n       --  Check that a call to Current_Task does not occur in an entry body\n \n       if Is_RTE (Nam, RE_Current_Task) then\n@@ -9487,7 +9506,10 @@ package body Sem_Res is\n \n       --  Access to subprogram types. If the operand is an access parameter,\n       --  the type has a deeper accessibility that any master, and cannot\n-      --  be assigned.\n+      --  be assigned. We must make an exception if the conversion is part\n+      --  of an assignment and the target is the return object of an extended\n+      --  return statement, because in that case the accessibility check\n+      --  takes place after the return.\n \n       elsif (Ekind (Target_Type) = E_Access_Subprogram_Type\n                or else\n@@ -9497,6 +9519,10 @@ package body Sem_Res is\n          if Ekind (Base_Type (Opnd_Type)) = E_Anonymous_Access_Subprogram_Type\n            and then Is_Entity_Name (Operand)\n            and then Ekind (Entity (Operand)) = E_In_Parameter\n+           and then\n+             (Nkind (Parent (N)) /= N_Assignment_Statement\n+               or else not Is_Entity_Name (Name (Parent (N)))\n+               or else not Is_Return_Object (Entity (Name (Parent (N)))))\n          then\n             Error_Msg_N\n               (\"illegal attempt to store anonymous access to subprogram\","}]}