{"sha": "5c28da2454101fb1e45eb9b89985b0f15a0e58b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWMyOGRhMjQ1NDEwMWZiMWU0NWViOWI4OTk4NWIwZjE1YTBlNThiNQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-04T19:38:34Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-04T19:38:34Z"}, "message": "(finish_enum): Always make an enum signed if it will fit.\n\nFrom-SVN: r5996", "tree": {"sha": "df86e864da0f7be6d1f36f955f467858acaf3ecc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df86e864da0f7be6d1f36f955f467858acaf3ecc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c28da2454101fb1e45eb9b89985b0f15a0e58b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c28da2454101fb1e45eb9b89985b0f15a0e58b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c28da2454101fb1e45eb9b89985b0f15a0e58b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c28da2454101fb1e45eb9b89985b0f15a0e58b5/comments", "author": null, "committer": null, "parents": [{"sha": "e5884dacd58235ba11d43a627087fbb36d1d55ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5884dacd58235ba11d43a627087fbb36d1d55ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5884dacd58235ba11d43a627087fbb36d1d55ad"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "26a0bfbc8c31334d8f084a31c13f899397c0a2bc", "filename": "gcc/c-decl.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c28da2454101fb1e45eb9b89985b0f15a0e58b5/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c28da2454101fb1e45eb9b89985b0f15a0e58b5/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=5c28da2454101fb1e45eb9b89985b0f15a0e58b5", "patch": "@@ -5566,8 +5566,12 @@ finish_enum (enumtype, values)\n   TYPE_SIZE (enumtype) = 0;\n   layout_type (enumtype);\n \n-  /* An enum can have some negative values; then it is signed.  */\n-  TREE_UNSIGNED (enumtype) = ! tree_int_cst_lt (minnode, integer_zero_node);\n+  /* If an enum has no negative values, and it goes beyond the range\n+     of the signed integral type, make it unsigned.  */\n+  TREE_UNSIGNED (enumtype)\n+    = (! tree_int_cst_lt (minnode, integer_zero_node)\n+       && ! tree_int_cst_lt (maxnode,\n+\t\t\t     TYPE_MAX_VALUE (type_for_size (precision, 0))));\n \n   /* Change the type of the enumerators to be the enum type.\n      Formerly this was done only for enums that fit in an int,"}]}