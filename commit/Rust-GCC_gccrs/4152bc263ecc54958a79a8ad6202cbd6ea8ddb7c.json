{"sha": "4152bc263ecc54958a79a8ad6202cbd6ea8ddb7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE1MmJjMjYzZWNjNTQ5NThhNzlhOGFkNjIwMmNiZDZlYThkZGI3Yw==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-01-25T23:34:53Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-01-25T23:34:53Z"}, "message": "re PR fortran/34876 (Can't read/write array sections with negative stride not specified)\n\n2008-01-25  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libfortran/34876\n\t* io/transfer.c (write_buf): Handle case of zero sized array.\n\t(transfer_array): Set data pointer to NULL and size to zero.  Then\n\tmake a data transfer and return.\n\nFrom-SVN: r131848", "tree": {"sha": "0ddaf66a512f8044b2abcef9d3a0c3f7ad1631d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ddaf66a512f8044b2abcef9d3a0c3f7ad1631d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4152bc263ecc54958a79a8ad6202cbd6ea8ddb7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4152bc263ecc54958a79a8ad6202cbd6ea8ddb7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4152bc263ecc54958a79a8ad6202cbd6ea8ddb7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4152bc263ecc54958a79a8ad6202cbd6ea8ddb7c/comments", "author": null, "committer": null, "parents": [{"sha": "42cd23cb280140a88f5ca1e6eec26c4aab734a84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42cd23cb280140a88f5ca1e6eec26c4aab734a84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42cd23cb280140a88f5ca1e6eec26c4aab734a84"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "d41dc6654a4a129cfb81abcfcfcdae4cb94de25b", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4152bc263ecc54958a79a8ad6202cbd6ea8ddb7c/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4152bc263ecc54958a79a8ad6202cbd6ea8ddb7c/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=4152bc263ecc54958a79a8ad6202cbd6ea8ddb7c", "patch": "@@ -1,3 +1,10 @@\n+2008-01-24  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libfortran/34876\n+\t* io/transfer.c (write_buf): Handle case of zero sized array.\n+\t(transfer_array): Set data pointer to NULL and size to zero.  Then\n+\tmake a data transfer and return.\n+\t\n 2008-01-24  David Edelsohn  <edelsohn@gnu.org>\n \n \t* configure: Regenerate."}, {"sha": "e94eb7431e681a926caa9ebfbcd0c013725d7438", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4152bc263ecc54958a79a8ad6202cbd6ea8ddb7c/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4152bc263ecc54958a79a8ad6202cbd6ea8ddb7c/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=4152bc263ecc54958a79a8ad6202cbd6ea8ddb7c", "patch": "@@ -638,6 +638,14 @@ write_buf (st_parameter_dt *dtp, void *buf, size_t nbytes)\n \t  return FAILURE;\n \t}\n \n+      if (buf == NULL && nbytes == 0)\n+\t{\n+\t   char *p;\n+\t   p = write_block (dtp, dtp->u.p.current_unit->recl);\n+\t   memset (p, 0, dtp->u.p.current_unit->recl);\n+\t   return SUCCESS;\n+\t}\n+\n       if (swrite (dtp->u.p.current_unit->s, buf, &nbytes) != 0)\n \t{\n \t  generate_error (&dtp->common, LIBERROR_OS, NULL);\n@@ -648,7 +656,6 @@ write_buf (st_parameter_dt *dtp, void *buf, size_t nbytes)\n       dtp->u.p.current_unit->bytes_left -= (gfc_offset) nbytes;\n \n       return SUCCESS;\n-\n     }\n \n   /* Unformatted sequential.  */\n@@ -1507,9 +1514,15 @@ transfer_array (st_parameter_dt *dtp, gfc_array_char *desc, int kind,\n       extent[n] = desc->dim[n].ubound + 1 - desc->dim[n].lbound;\n \n       /* If the extent of even one dimension is zero, then the entire\n-\t array section contains zero elements, so we return.  */\n+\t array section contains zero elements, so we return after writing\n+\t a zero array record.  */\n       if (extent[n] <= 0)\n-\treturn;\n+\t{\n+\t  data = NULL;\n+\t  tsize = 0;\n+\t  dtp->u.p.transfer (dtp, iotype, data, kind, size, tsize);\n+\t  return;\n+\t}\n     }\n \n   stride0 = stride[0];"}]}