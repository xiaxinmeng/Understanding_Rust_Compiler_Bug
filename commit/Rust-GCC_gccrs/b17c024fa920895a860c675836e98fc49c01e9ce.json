{"sha": "b17c024fa920895a860c675836e98fc49c01e9ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjE3YzAyNGZhOTIwODk1YTg2MGM2NzU4MzZlOThmYzQ5YzAxZTljZQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-05-24T06:46:11Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-05-24T06:46:11Z"}, "message": "re PR tree-optimization/55177 (missed optimizations with __builtin_bswap)\n\n\tPR rtl-optimization/55177\n\t* simplify-rtx.c (simplify_unary_operation_1) <NOT>: Deal with BSWAP.\n\t(simplify_byte_swapping_operation): New.\n\t(simplify_binary_operation_1): Call it for AND, IOR and XOR.\n\t(simplify_relational_operation_1): Deal with BSWAP.\n\nFrom-SVN: r199278", "tree": {"sha": "76784853bcad116d42b13a68d164909e4c2f1ad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76784853bcad116d42b13a68d164909e4c2f1ad4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b17c024fa920895a860c675836e98fc49c01e9ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17c024fa920895a860c675836e98fc49c01e9ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b17c024fa920895a860c675836e98fc49c01e9ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b17c024fa920895a860c675836e98fc49c01e9ce/comments", "author": null, "committer": null, "parents": [{"sha": "d0c70325c9ee2767b87cf7f104ab34ba8e316a4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0c70325c9ee2767b87cf7f104ab34ba8e316a4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0c70325c9ee2767b87cf7f104ab34ba8e316a4e"}], "stats": {"total": 249, "additions": 247, "deletions": 2}, "files": [{"sha": "ae1d9b5c0f7baebe147e8fc044fc52c78df2bb82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17c024fa920895a860c675836e98fc49c01e9ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17c024fa920895a860c675836e98fc49c01e9ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b17c024fa920895a860c675836e98fc49c01e9ce", "patch": "@@ -1,3 +1,11 @@\n+2013-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/55177\n+\t* simplify-rtx.c (simplify_unary_operation_1) <NOT>: Deal with BSWAP.\n+\t(simplify_byte_swapping_operation): New.\n+\t(simplify_binary_operation_1): Call it for AND, IOR and XOR.\n+\t(simplify_relational_operation_1): Deal with BSWAP.\n+\n 2013-05-23  Richard Henderson  <rth@redhat.com>\n \n \tPR target/56742"}, {"sha": "5c1dd25d8a4380596da8df3b8e550d0a47aa5cb9", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 64, "deletions": 2, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17c024fa920895a860c675836e98fc49c01e9ce/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17c024fa920895a860c675836e98fc49c01e9ce/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=b17c024fa920895a860c675836e98fc49c01e9ce", "patch": "@@ -858,7 +858,6 @@ simplify_unary_operation_1 (enum rtx_code code, enum machine_mode mode, rtx op)\n       /* (not (ashiftrt foo C)) where C is the number of bits in FOO\n \t minus 1 is (ge foo (const_int 0)) if STORE_FLAG_VALUE is -1,\n \t so we can perform the above simplification.  */\n-\n       if (STORE_FLAG_VALUE == -1\n \t  && GET_CODE (op) == ASHIFTRT\n \t  && GET_CODE (XEXP (op, 1))\n@@ -890,7 +889,6 @@ simplify_unary_operation_1 (enum rtx_code code, enum machine_mode mode, rtx op)\n \t with negating logical insns (and-not, nand, etc.).  If result has\n \t only one NOT, put it first, since that is how the patterns are\n \t coded.  */\n-\n       if (GET_CODE (op) == IOR || GET_CODE (op) == AND)\n \t{\n \t  rtx in1 = XEXP (op, 0), in2 = XEXP (op, 1);\n@@ -913,6 +911,13 @@ simplify_unary_operation_1 (enum rtx_code code, enum machine_mode mode, rtx op)\n \t  return gen_rtx_fmt_ee (GET_CODE (op) == IOR ? AND : IOR,\n \t\t\t\t mode, in1, in2);\n \t}\n+\n+      /* (not (bswap x)) -> (bswap (not x)).  */\n+      if (GET_CODE (op) == BSWAP)\n+\t{\n+\t  rtx x = simplify_gen_unary (NOT, mode, XEXP (op, 0), mode);\n+\t  return simplify_gen_unary (BSWAP, mode, x, mode);\n+\t}\n       break;\n \n     case NEG:\n@@ -2050,6 +2055,36 @@ simplify_const_unary_operation (enum rtx_code code, enum machine_mode mode,\n   return NULL_RTX;\n }\n \f\n+/* Subroutine of simplify_binary_operation to simplify a binary operation\n+   CODE that can commute with byte swapping, with result mode MODE and\n+   operating on OP0 and OP1.  CODE is currently one of AND, IOR or XOR.\n+   Return zero if no simplification or canonicalization is possible.  */\n+\n+static rtx\n+simplify_byte_swapping_operation (enum rtx_code code, enum machine_mode mode,\n+\t\t\t\t  rtx op0, rtx op1)\n+{\n+  rtx tem;\n+\n+  /* (op (bswap x) C1)) -> (bswap (op x C2)) with C2 swapped.  */\n+  if (GET_CODE (op0) == BSWAP\n+      && (CONST_INT_P (op1) || CONST_DOUBLE_AS_INT_P (op1)))\n+    {\n+      tem = simplify_gen_binary (code, mode, XEXP (op0, 0),\n+\t\t\t\t simplify_gen_unary (BSWAP, mode, op1, mode));\n+      return simplify_gen_unary (BSWAP, mode, tem, mode);\n+    }\n+\n+  /* (op (bswap x) (bswap y)) -> (bswap (op x y)).  */\n+  if (GET_CODE (op0) == BSWAP && GET_CODE (op1) == BSWAP)\n+    {\n+      tem = simplify_gen_binary (code, mode, XEXP (op0, 0), XEXP (op1, 0));\n+      return simplify_gen_unary (BSWAP, mode, tem, mode);\n+    }\n+\n+  return NULL_RTX;\n+}\n+\n /* Subroutine of simplify_binary_operation to simplify a commutative,\n    associative binary operation CODE with result mode MODE, operating\n    on OP0 and OP1.  CODE is currently one of PLUS, MULT, AND, IOR, XOR,\n@@ -2791,6 +2826,10 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t\t\t\t\tXEXP (op0, 1));\n         }\n \n+      tem = simplify_byte_swapping_operation (code, mode, op0, op1);\n+      if (tem)\n+\treturn tem;\n+\n       tem = simplify_associative_operation (code, mode, op0, op1);\n       if (tem)\n \treturn tem;\n@@ -2934,6 +2973,10 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t  && (reversed = reversed_comparison (op0, mode)))\n \treturn reversed;\n \n+      tem = simplify_byte_swapping_operation (code, mode, op0, op1);\n+      if (tem)\n+\treturn tem;\n+\n       tem = simplify_associative_operation (code, mode, op0, op1);\n       if (tem)\n \treturn tem;\n@@ -3116,6 +3159,10 @@ simplify_binary_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t  && op1 == XEXP (XEXP (op0, 0), 0))\n \treturn simplify_gen_binary (AND, mode, op1, XEXP (op0, 1));\n \n+      tem = simplify_byte_swapping_operation (code, mode, op0, op1);\n+      if (tem)\n+\treturn tem;\n+\n       tem = simplify_associative_operation (code, mode, op0, op1);\n       if (tem)\n \treturn tem;\n@@ -4764,6 +4811,21 @@ simplify_relational_operation_1 (enum rtx_code code, enum machine_mode mode,\n \t\t\t\t    simplify_gen_binary (XOR, cmp_mode,\n \t\t\t\t\t\t\t XEXP (op0, 1), op1));\n \n+  /* (eq/ne (bswap x) C1) simplifies to (eq/ne x C2) with C2 swapped.  */\n+  if ((code == EQ || code == NE)\n+      && GET_CODE (op0) == BSWAP\n+      && (CONST_INT_P (op1) || CONST_DOUBLE_AS_INT_P (op1)))\n+    return simplify_gen_relational (code, mode, cmp_mode, XEXP (op0, 0),\n+\t\t\t\t    simplify_gen_unary (BSWAP, cmp_mode,\n+\t\t\t\t\t\t\top1, cmp_mode));\n+\n+  /* (eq/ne (bswap x) (bswap y)) simplifies to (eq/ne x y).  */\n+  if ((code == EQ || code == NE)\n+      && GET_CODE (op0) == BSWAP\n+      && GET_CODE (op1) == BSWAP)\n+    return simplify_gen_relational (code, mode, cmp_mode,\n+\t\t\t\t    XEXP (op0, 0), XEXP (op1, 0));\n+\n   if (op0code == POPCOUNT && op1 == const0_rtx)\n     switch (code)\n       {"}, {"sha": "521873ceacd66b8ad2b1aa531087ecd30fc50ae0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17c024fa920895a860c675836e98fc49c01e9ce/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17c024fa920895a860c675836e98fc49c01e9ce/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b17c024fa920895a860c675836e98fc49c01e9ce", "patch": "@@ -1,3 +1,10 @@\n+2013-05-24  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/builtin-bswap-6.c: New test.\n+\t* gcc.dg/builtin-bswap-7.c: Likewise.\n+\t* gcc.dg/builtin-bswap-8.c: Likewise.\n+\t* gcc.dg/builtin-bswap-9.c: Likewise.\n+\n 2013-05-23  Christian Bruel  <christian.bruel@st.com>\n \n \tPR debug/57351"}, {"sha": "544f26ef9716d8f344284ba81d05b8c20b63d8c7", "filename": "gcc/testsuite/gcc.dg/builtin-bswap-6.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17c024fa920895a860c675836e98fc49c01e9ce/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17c024fa920895a860c675836e98fc49c01e9ce/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-6.c?ref=b17c024fa920895a860c675836e98fc49c01e9ce", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile { target arm*-*-* alpha*-*-* ia64*-*-* x86_64-*-* s390x-*-* powerpc*-*-* rs6000-*-* } } */\n+/* { dg-require-effective-target stdint_types } */\n+/* { dg-options \"-O -fdump-rtl-combine\" } */\n+\n+#include <stdint.h>\n+\n+#define BS(X) __builtin_bswap32(X)\n+\n+int foo1 (uint32_t a)\n+{\n+  if (BS (a) == 0xA0000)\n+    return 1;\n+  return 0;\n+}\n+\n+int foo2 (uint32_t a)\n+{\n+  if (BS (a) != 0xA0000)\n+    return 1;\n+  return 0;\n+}\n+\n+int foo3 (uint32_t a, uint32_t b)\n+{\n+  if (BS (a) == BS (b))\n+    return 1;\n+  return 0;\n+}\n+\n+int foo4 (uint32_t a, uint32_t b)\n+{\n+  if (BS (a) != BS (b))\n+    return 1;\n+  return 0;\n+}\n+\n+/* { dg-final { scan-rtl-dump-not \"bswapsi\" \"combine\" } } */\n+/* { dg-final { cleanup-rtl-dump \"combine\" } } */"}, {"sha": "399b825ac436ac306aaed9b798bac7387016668c", "filename": "gcc/testsuite/gcc.dg/builtin-bswap-7.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17c024fa920895a860c675836e98fc49c01e9ce/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17c024fa920895a860c675836e98fc49c01e9ce/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-7.c?ref=b17c024fa920895a860c675836e98fc49c01e9ce", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile { target arm*-*-* alpha*-*-* ia64*-*-* x86_64-*-* s390x-*-* powerpc*-*-* rs6000-*-* } } */\n+/* { dg-require-effective-target stdint_types } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O -fdump-rtl-combine\" } */\n+\n+#include <stdint.h>\n+\n+#define BS(X) __builtin_bswap64(X)\n+\n+int foo1 (uint64_t a)\n+{\n+  if (BS (a) == 0xA00000000)\n+    return 1;\n+  return 0;\n+}\n+\n+int foo2 (uint64_t a)\n+{\n+  if (BS (a) != 0xA00000000)\n+    return 1;\n+  return 0;\n+}\n+\n+int foo3 (uint64_t a, uint64_t b)\n+{\n+  if (BS (a) == BS (b))\n+    return 1;\n+  return 0;\n+}\n+\n+int foo4 (uint64_t a, uint64_t b)\n+{\n+  if (BS (a) != BS (b))\n+    return 1;\n+  return 0;\n+}\n+\n+/* { dg-final { scan-rtl-dump-not \"bswapdi\" \"combine\" } } */\n+/* { dg-final { cleanup-rtl-dump \"combine\" } } */"}, {"sha": "db750219edce1e8e46950fba5a609f256e6a1adb", "filename": "gcc/testsuite/gcc.dg/builtin-bswap-8.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17c024fa920895a860c675836e98fc49c01e9ce/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17c024fa920895a860c675836e98fc49c01e9ce/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-8.c?ref=b17c024fa920895a860c675836e98fc49c01e9ce", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile { target arm*-*-* alpha*-*-* ia64*-*-* x86_64-*-* s390x-*-* powerpc*-*-* rs6000-*-* } } */\n+/* { dg-require-effective-target stdint_types } */\n+/* { dg-options \"-O -fdump-rtl-combine\" } */\n+\n+#include <stdint.h>\n+\n+#define BS(X) __builtin_bswap32(X)\n+\n+uint32_t foo1 (uint32_t a)\n+{\n+  return BS (~ BS (a));\n+}\n+\n+uint32_t foo2 (uint32_t a)\n+{\n+  return BS (BS (a) & 0xA0000);\n+}\n+\n+uint32_t foo3 (uint32_t a)\n+{\n+  return BS (BS (a) | 0xA0000);\n+}\n+\n+uint32_t foo4 (uint32_t a)\n+{\n+  return BS (BS (a) ^ 0xA0000);\n+}\n+\n+uint32_t foo5 (uint32_t a, uint32_t b)\n+{\n+  return BS (BS (a) & BS (b));\n+}\n+\n+uint32_t foo6 (uint32_t a, uint32_t b)\n+{\n+  return BS (BS (a) | BS (b));\n+}\n+\n+uint32_t foo7 (uint32_t a, uint32_t b)\n+{\n+  return BS (BS (a) ^ BS (b));\n+}\n+\n+/* { dg-final { scan-rtl-dump-not \"bswapsi\" \"combine\" } } */\n+/* { dg-final { cleanup-rtl-dump \"combine\" } } */"}, {"sha": "632dddfb32218d8b6ac4a0ac4761ccc421266599", "filename": "gcc/testsuite/gcc.dg/builtin-bswap-9.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b17c024fa920895a860c675836e98fc49c01e9ce/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b17c024fa920895a860c675836e98fc49c01e9ce/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-bswap-9.c?ref=b17c024fa920895a860c675836e98fc49c01e9ce", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile { target arm*-*-* alpha*-*-* ia64*-*-* x86_64-*-* s390x-*-* powerpc*-*-* rs6000-*-* } } */\n+/* { dg-require-effective-target stdint_types } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O -fdump-rtl-combine\" } */\n+\n+#include <stdint.h>\n+\n+#define BS(X) __builtin_bswap64(X)\n+\n+uint64_t foo1 (uint64_t a)\n+{\n+  return BS (~ BS (a));\n+}\n+\n+uint64_t foo2 (uint64_t a)\n+{\n+  return BS (BS (a) & 0xA00000000);\n+}\n+\n+uint64_t foo3 (uint64_t a)\n+{\n+  return BS (BS (a) | 0xA00000000);\n+}\n+\n+uint64_t foo4 (uint64_t a)\n+{\n+  return BS (BS (a) ^ 0xA00000000);\n+}\n+\n+uint64_t foo5 (uint64_t a, uint64_t b)\n+{\n+  return BS (BS (a) & BS (b));\n+}\n+\n+uint64_t foo6 (uint64_t a, uint64_t b)\n+{\n+  return BS (BS (a) | BS (b));\n+}\n+\n+uint64_t foo7 (uint64_t a, uint64_t b)\n+{\n+  return BS (BS (a) ^ BS (b));\n+}\n+\n+/* { dg-final { scan-rtl-dump-not \"bswapdi\" \"combine\" } } */\n+/* { dg-final { cleanup-rtl-dump \"combine\" } } */"}]}