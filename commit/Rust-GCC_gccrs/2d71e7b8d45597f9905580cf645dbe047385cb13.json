{"sha": "2d71e7b8d45597f9905580cf645dbe047385cb13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ3MWU3YjhkNDU1OTdmOTkwNTU4MGNmNjQ1ZGJlMDQ3Mzg1Y2IxMw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2018-01-03T02:38:09Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2018-01-03T02:38:09Z"}, "message": "rs6000.md (floor<mode>2): Add support for IEEE 128-bit round to integer instructions.\n\n[gcc]\n2018-01-02  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.md (floor<mode>2): Add support for IEEE\n\t128-bit round to integer instructions.\n\t(ceil<mode>2): Likewise.\n\t(btrunc<mode>2): Likewise.\n\t(round<mode>2): Likewise.\n\n[gcc/testsuite]\n2018-01-02  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* gcc.target/powerpc/float128-hw2.c: Add tests for ceilf128,\n\tfloorf128, truncf128, and roundf128.\n\t* gcc.target/powerpc/float128-hw5.c: New tests for _Float128\n\toptimizations added in match.pd.\n\t* gcc.target/powerpc/float128-hw6.c: Likewise.\n\t* gcc.target/powerpc/float128-hw7.c: Likewise.\n\t* gcc.target/powerpc/float128-hw8.c: Likewise.\n\t* gcc.target/powerpc/float128-hw9.c: Likewise.\n\t* gcc.target/powerpc/float128-hw10.c: Likewise.\n\t* gcc.target/powerpc/float128-hw11.c: Likewise.\n\nFrom-SVN: r256118", "tree": {"sha": "402ee0fb80510f03a8e436d10d0a6b48b95272cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/402ee0fb80510f03a8e436d10d0a6b48b95272cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d71e7b8d45597f9905580cf645dbe047385cb13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d71e7b8d45597f9905580cf645dbe047385cb13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d71e7b8d45597f9905580cf645dbe047385cb13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d71e7b8d45597f9905580cf645dbe047385cb13/comments", "author": null, "committer": null, "parents": [{"sha": "50d75500a3342f0bb73da86675b7e41e5a928ea4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50d75500a3342f0bb73da86675b7e41e5a928ea4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50d75500a3342f0bb73da86675b7e41e5a928ea4"}], "stats": {"total": 314, "additions": 314, "deletions": 0}, "files": [{"sha": "4dd3e4c79746593b0035454254776e6897e07d67", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d71e7b8d45597f9905580cf645dbe047385cb13", "patch": "@@ -1,3 +1,11 @@\n+2018-01-02  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* config/rs6000/rs6000.md (floor<mode>2): Add support for IEEE\n+\t128-bit round to integer instructions.\n+\t(ceil<mode>2): Likewise.\n+\t(btrunc<mode>2): Likewise.\n+\t(round<mode>2): Likewise.\n+\n 2018-01-02  Aaron Sawdey  <acsawdey@linux.vnet.ibm.com>\n \n         * config/rs6000/rs6000-string.c (expand_block_move): Allow the use of"}, {"sha": "531b1eedacadeef81990967dd560d16be4b63749", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=2d71e7b8d45597f9905580cf645dbe047385cb13", "patch": "@@ -14777,6 +14777,47 @@\n    (set_attr \"type\" \"vecfloat\")\n    (set_attr \"size\" \"128\")])\n \n+;; IEEE 128-bit round to integer built-in functions\n+(define_insn \"floor<mode>2\"\n+  [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:IEEE128\n+\t [(match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_FRIM))]\n+  \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n+  \"xsrqpi 1,%0,%1,3\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n+\n+(define_insn \"ceil<mode>2\"\n+  [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:IEEE128\n+\t [(match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_FRIP))]\n+  \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n+  \"xsrqpi 1,%0,%1,2\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n+\n+(define_insn \"btrunc<mode>2\"\n+  [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:IEEE128\n+\t [(match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_FRIZ))]\n+  \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n+  \"xsrqpi 1,%0,%1,1\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n+\n+(define_insn \"round<mode>2\"\n+  [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:IEEE128\n+\t [(match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")]\n+\t UNSPEC_FRIN))]\n+  \"TARGET_FLOAT128_HW && FLOAT128_IEEE_P (<MODE>mode)\"\n+  \"xsrqpi 0,%0,%1,0\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n+\n ;; IEEE 128-bit instructions with round to odd semantics\n (define_insn \"add<mode>3_odd\"\n   [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")"}, {"sha": "96a263819117c1dd5174dc0e4ad58a5327b219c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d71e7b8d45597f9905580cf645dbe047385cb13", "patch": "@@ -1,3 +1,16 @@\n+2018-01-02  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\t* gcc.target/powerpc/float128-hw2.c: Add tests for ceilf128,\n+\tfloorf128, truncf128, and roundf128.\n+\t* gcc.target/powerpc/float128-hw5.c: New tests for _Float128\n+\toptimizations added in match.pd.\n+\t* gcc.target/powerpc/float128-hw6.c: Likewise.\n+\t* gcc.target/powerpc/float128-hw7.c: Likewise.\n+\t* gcc.target/powerpc/float128-hw8.c: Likewise.\n+\t* gcc.target/powerpc/float128-hw9.c: Likewise.\n+\t* gcc.target/powerpc/float128-hw10.c: Likewise.\n+\t* gcc.target/powerpc/float128-hw11.c: Likewise.\n+\n 2018-01-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/83556"}, {"sha": "eb4bed60c47df1d5a087a78f130c146d1ad76fed", "filename": "gcc/testsuite/gcc.target/powerpc/float128-hw10.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw10.c?ref=2d71e7b8d45597f9905580cf645dbe047385cb13", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mpower9-vector -O2\" } */\n+\n+extern _Float128 floorf128 (_Float128);\n+extern _Float128 ceilf128 (_Float128);\n+extern _Float128 roundf128 (_Float128);\n+extern _Float128 truncf128 (_Float128);\n+\n+/* Check rounding optimizations that are done for double are also done for\n+   _Float128.  */\n+\n+_Float128\n+floor_floor_x (_Float128 x)\n+{\n+  return floorf128 (floorf128 (x));\n+}\n+\n+_Float128\n+ceil_ceil_x (_Float128 x)\n+{\n+  return ceilf128 (ceilf128 (x));\n+}\n+\n+_Float128\n+trunc_trunc_x (_Float128 x)\n+{\n+  return truncf128 (truncf128 (x));\n+}\n+\n+_Float128\n+round_round_x (_Float128 x)\n+{\n+  return roundf128 (roundf128 (x));\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mxsrqpi\\M} 4 } } */\n+/* { dg-final { scan-assembler-not   {\\mbl\\M}       } } */"}, {"sha": "7bd9b81427a774648a9e3fd8ddbe1868c4e31f54", "filename": "gcc/testsuite/gcc.target/powerpc/float128-hw11.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw11.c?ref=2d71e7b8d45597f9905580cf645dbe047385cb13", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do run { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target p9vector_hw } */\n+/* { dg-options \"-mpower9-vector -O2\" } */\n+\n+#define __STDC_WANT_IEC_60559_TYPES_EXT__ 1\n+#define __STDC_WANT_IEC_60559_FUNCS_EXT__ 1\n+\n+#include <math.h>\n+#include <stdlib.h>\n+#include <stddef.h>\n+\n+extern _Float128 roundf128 (_Float128);\n+extern _Float128 floorf128 (_Float128);\n+extern _Float128 ceilf128  (_Float128);\n+extern _Float128 truncf128 (_Float128);\n+\n+static const struct {\n+  _Float128 value;\n+  _Float128 exp_round;\n+  _Float128 exp_floor;\n+  _Float128 exp_ceil;\n+  _Float128 exp_trunc;\n+} a[] = {\n+  { -2.0Q, -2.0Q, -2.0Q, -2.0Q, -2.0Q },\n+  { -1.7Q, -2.0Q, -2.0Q, -1.0Q, -1.0Q },\n+  { -1.5Q, -2.0Q, -2.0Q, -1.0Q, -1.0Q },\n+  { -1.3Q, -1.0Q, -2.0Q, -1.0Q, -1.0Q },\n+  { +0.0Q, +0.0Q, +0.0Q, +0.0Q, +0.0Q },\n+  { +1.3Q, +1.0Q, +1.0Q, +2.0Q, +1.0Q },\n+  { +1.5Q, +2.0Q, +1.0Q, +2.0Q, +1.0Q },\n+  { +1.7Q, +2.0Q, +1.0Q, +2.0Q, +1.0Q },\n+  { +2.0Q, +2.0Q, +2.0Q, +2.0Q, +2.0Q }\n+};\n+\n+int\n+main (void)\n+{\n+  size_t i;\n+  _Float128 v;\n+\n+  for (i = 0; i < sizeof (a) / sizeof (a[0]); i++)\n+    {\n+      v = a[i].value;\n+      if (roundf128 (v) != a[i].exp_round)\n+\tabort ();\n+\n+      if (floorf128 (v) != a[i].exp_floor)\n+\tabort ();\n+\n+      if (ceilf128 (v) != a[i].exp_ceil)\n+\tabort ();\n+\n+      if (truncf128 (v) != a[i].exp_trunc)\n+\tabort ();\n+    }\n+\n+  return 0;\n+}"}, {"sha": "118bed625375d2e81143121918cd2c294072a10f", "filename": "gcc/testsuite/gcc.target/powerpc/float128-hw2.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw2.c?ref=2d71e7b8d45597f9905580cf645dbe047385cb13", "patch": "@@ -14,6 +14,10 @@\n extern _Float128 copysignf128 (_Float128, _Float128);\n extern _Float128 sqrtf128 (_Float128);\n extern _Float128 fmaf128 (_Float128, _Float128, _Float128);\n+extern _Float128 ceilf128 (_Float128);\n+extern _Float128 floorf128 (_Float128);\n+extern _Float128 truncf128 (_Float128);\n+extern _Float128 roundf128 (_Float128);\n \n _Float128\n do_copysign (_Float128 a, _Float128 b)\n@@ -51,10 +55,35 @@ do_nfms (_Float128 a, _Float128 b, _Float128 c)\n   return -fmaf128 (a, b, -c);\n }\n \n+_Float128\n+do_ceil (_Float128 a)\n+{\n+  return ceilf128 (a);\n+}\n+\n+_Float128\n+do_floor (_Float128 a)\n+{\n+  return floorf128 (a);\n+}\n+\n+_Float128\n+do_trunc (_Float128 a)\n+{\n+  return truncf128 (a);\n+}\n+\n+_Float128\n+do_round (_Float128 a)\n+{\n+  return roundf128 (a);\n+}\n+\n /* { dg-final { scan-assembler     {\\mxscpsgnqp\\M} } } */\n /* { dg-final { scan-assembler     {\\mxssqrtqp\\M}  } } */\n /* { dg-final { scan-assembler     {\\mxsmaddqp\\M}  } } */\n /* { dg-final { scan-assembler     {\\mxsmsubqp\\M}  } } */\n /* { dg-final { scan-assembler     {\\mxsnmaddqp\\M} } } */\n /* { dg-final { scan-assembler     {\\mxsnmsubqp\\M} } } */\n+/* { dg-final { scan-assembler     {\\mxsrqpi\\M}    } } */\n /* { dg-final { scan-assembler-not {\\mbl\\M}        } } */"}, {"sha": "8621bd869da7ad1bc81acdc6615ae26030eadd50", "filename": "gcc/testsuite/gcc.target/powerpc/float128-hw5.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw5.c?ref=2d71e7b8d45597f9905580cf645dbe047385cb13", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mpower9-vector -O2 -ffast-math\" } */\n+\n+extern _Float128 copysignf128 (_Float128, _Float128);\n+\n+/* Check copysign optimizations that are done for double are also done for\n+   _Float128.  */\n+\n+_Float128\n+x_times_cs_one_negx (_Float128 x)\n+{\n+  return x * copysignf128 (1.0Q, -x);\t/* XSNABSQP  */\n+}\n+\n+_Float128\n+x_times_cs_one_x (_Float128 x)\n+{\n+  return x * copysignf128 (1.0Q, x);\t/* XSABSQP  */\n+}\n+\n+_Float128\n+cs_x_x (_Float128 x)\n+{\n+  return copysignf128 (x, x);\t\t/* no operation.  */\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mxsabsqp\\M}  1 } } */\n+/* { dg-final { scan-assembler-times {\\mxsnabsqp\\M} 1 } } */\n+/* { dg-final { scan-assembler-not   {\\mxscpsgnqp\\M}  } } */\n+/* { dg-final { scan-assembler-not   {\\mlxvx\\M}       } } */\n+/* { dg-final { scan-assembler-not   {\\mlxv\\M}        } } */\n+/* { dg-final { scan-assembler-not   {\\mbl\\M}         } } */"}, {"sha": "89bb93ce69032659aaa6f8bdb7589ed5de99ee66", "filename": "gcc/testsuite/gcc.target/powerpc/float128-hw6.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw6.c?ref=2d71e7b8d45597f9905580cf645dbe047385cb13", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mpower9-vector -O2\" } */\n+\n+extern _Float128 fabsf128 (_Float128);\n+extern _Float128 copysignf128 (_Float128, _Float128);\n+\n+/* Check copysign optimizations that are done for double are also done for\n+   _Float128.  */\n+\n+_Float128\n+cs_negx_y (_Float128 x, _Float128 y)\n+{\n+  return copysignf128 (-x, y);\t\t\t/* eliminate negation.  */\n+}\n+\n+_Float128\n+cs_absx_y (_Float128 x, _Float128 y)\n+{\n+  return copysignf128 (fabsf128 (x), y);\t/* eliminate fabsf128.  */\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mxscpsgnqp\\M} 2 } } */\n+/* { dg-final { scan-assembler-not   {\\mxsnegqp\\M}     } } */\n+/* { dg-final { scan-assembler-not   {\\mxsabsqp\\M}     } } */\n+/* { dg-final { scan-assembler-not   {\\mbl\\M}          } } */"}, {"sha": "1a111a361e7b33ae895592bb4b2c9621d78cbeed", "filename": "gcc/testsuite/gcc.target/powerpc/float128-hw7.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw7.c?ref=2d71e7b8d45597f9905580cf645dbe047385cb13", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mpower9-vector -O2\" } */\n+\n+extern _Float128 fabsf128 (_Float128);\n+extern _Float128 copysignf128 (_Float128, _Float128);\n+\n+/* Check copysign optimizations that are done for double are also done for\n+   _Float128.  */\n+\n+_Float128\n+cs_x_pos1 (_Float128 x)\n+{\n+  return copysignf128 (x, 1.0Q);\t\t/* XSABSQP.  */\n+}\n+\n+_Float128 cs_x_neg2 (_Float128 x)\n+{\n+  return copysignf128 (x, -2.0Q);\t\t/* XSNABSQP.  */\n+}\n+\n+/* { dg-final { scan-assembler-times {\\mxsabsqp\\M}  1 } } */\n+/* { dg-final { scan-assembler-not   {\\mxsnabsqp\\M} 1 } } */\n+/* { dg-final { scan-assembler-not   {\\mxscpsgnqp\\M}  } } */\n+/* { dg-final { scan-assembler-not   {\\mlxvx\\M}       } } */\n+/* { dg-final { scan-assembler-not   {\\mlxv\\M}        } } */\n+/* { dg-final { scan-assembler-not   {\\mbl\\M}         } } */"}, {"sha": "62f4eae93d10053d40592ccdb6808da0245aae22", "filename": "gcc/testsuite/gcc.target/powerpc/float128-hw8.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw8.c?ref=2d71e7b8d45597f9905580cf645dbe047385cb13", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mpower9-vector -O2\" } */\n+\n+extern _Float128 fminf128 (_Float128, _Float128);\n+extern _Float128 fmaxf128 (_Float128, _Float128);\n+\n+/* Check min/max optimizations that are done for double are also done for\n+   _Float128.  */\n+\n+_Float128\n+min_x_x (_Float128 x)\n+{\n+  return fminf128 (x, x);\n+}\n+\n+_Float128\n+max_x_x (_Float128 x)\n+{\n+  return fmaxf128 (x, x);\n+}\n+\n+/* { dg-final { scan-assembler-not {\\mxscmpuqp\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mbl\\M}       } } */"}, {"sha": "ca46e151aa9cf7adc1454c11ec4b4a4fb9ff5e5c", "filename": "gcc/testsuite/gcc.target/powerpc/float128-hw9.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d71e7b8d45597f9905580cf645dbe047385cb13/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-hw9.c?ref=2d71e7b8d45597f9905580cf645dbe047385cb13", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-require-effective-target powerpc_p9vector_ok } */\n+/* { dg-options \"-mpower9-vector -O2 -ffast-math\" } */\n+\n+extern _Float128 sqrtf128 (_Float128);\n+\n+/* Check sqrt optimizations that are done for double are also done for\n+   _Float128.  */\n+\n+_Float128\n+sqrt_x_times_sqrt_x (_Float128 x)\n+{\n+  return sqrtf128 (x) * sqrtf128 (x);\n+}\n+\n+/* { dg-final { scan-assembler-not {\\mxssqrtqp\\M} } } */\n+/* { dg-final { scan-assembler-not {\\mbl\\M}       } } */"}]}