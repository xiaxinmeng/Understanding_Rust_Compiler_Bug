{"sha": "a3bf6ce7f2e17f2c977c13df23eb718e7b433dcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNiZjZjZTdmMmUxN2YyYzk3N2MxM2RmMjNlYjcxOGU3YjQzM2RjZA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-03-31T02:57:11Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-03-31T02:57:11Z"}, "message": "c++: Adjust mangling of __alignof__ [PR88115]\n\nr11-4926 made __alignof__ get mangled differently from alignof,\nencoding __alignof__ as a vendor extended operator.  But this\nmangling is problematic for the reasons mentioned in\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=88115#c6.\n\nThis patch changes our mangling of __alignof__ to instead use the\nnew \"vendor extended expression\" syntax that's proposed in\nhttps://github.com/itanium-cxx-abi/cxx-abi/issues/112.  Clang does\nthe same thing already, so after this patch Clang and GCC agree\nabout the mangling of __alignof__(type) and __alignof__(expr).\n\ngcc/cp/ChangeLog:\n\n\tPR c++/88115\n\t* mangle.c (write_expression): Adjust the mangling of\n\t__alignof__.\n\ninclude/ChangeLog:\n\n\tPR c++/88115\n\t* demangle.h (enum demangle_component_type): Add\n\tDEMANGLE_COMPONENT_VENDOR_EXPR.\n\nlibiberty/ChangeLog:\n\n\tPR c++/88115\n\t* cp-demangle.c (d_dump, d_make_comp, d_expression_1)\n\t(d_count_templates_scopes): Handle DEMANGLE_COMPONENT_VENDOR_EXPR.\n\t(d_print_comp_inner): Likewise.\n\t<case DEMANGLE_COMPONENT_EXTENDED_OPERATOR>: Revert r11-4926\n\tchange.\n\t<case DEMANGLE_COMPONENT_UNARY>: Likewise.\n\t* testsuite/demangle-expected: Adjust __alignof__ tests.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/88115\n\t* g++.dg/cpp0x/alignof7.C: Adjust expected mangling.", "tree": {"sha": "6530f01c3cbe5630c0e79f11dbc363933ec0980d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6530f01c3cbe5630c0e79f11dbc363933ec0980d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3bf6ce7f2e17f2c977c13df23eb718e7b433dcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3bf6ce7f2e17f2c977c13df23eb718e7b433dcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3bf6ce7f2e17f2c977c13df23eb718e7b433dcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3bf6ce7f2e17f2c977c13df23eb718e7b433dcd/comments", "author": null, "committer": null, "parents": [{"sha": "0bbf0edbfc782f8e4e416d5fbd1b52a515adb585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bbf0edbfc782f8e4e416d5fbd1b52a515adb585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bbf0edbfc782f8e4e416d5fbd1b52a515adb585"}], "stats": {"total": 66, "additions": 37, "deletions": 29}, "files": [{"sha": "57ce9a6710f26d0d0017bd093db7bb7fc67b7047", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3bf6ce7f2e17f2c977c13df23eb718e7b433dcd/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3bf6ce7f2e17f2c977c13df23eb718e7b433dcd/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=a3bf6ce7f2e17f2c977c13df23eb718e7b433dcd", "patch": "@@ -3124,11 +3124,9 @@ write_expression (tree expr)\n \t  if (abi_version_at_least (15))\n \t    {\n \t      /* We used to mangle __alignof__ like alignof.  */\n-\t      write_string (\"v111__alignof__\");\n-\t      if (TYPE_P (TREE_OPERAND (expr, 0)))\n-\t\twrite_type (TREE_OPERAND (expr, 0));\n-\t      else\n-\t\twrite_expression (TREE_OPERAND (expr, 0));\n+\t      write_string (\"u11__alignof__\");\n+\t      write_template_arg (TREE_OPERAND (expr, 0));\n+\t      write_char ('E');\n \t      return;\n \t    }\n \t}"}, {"sha": "2369b879392de2beac02349ffeb0187a470079ed", "filename": "gcc/testsuite/g++.dg/cpp0x/alignof7.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3bf6ce7f2e17f2c977c13df23eb718e7b433dcd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignof7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3bf6ce7f2e17f2c977c13df23eb718e7b433dcd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignof7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falignof7.C?ref=a3bf6ce7f2e17f2c977c13df23eb718e7b433dcd", "patch": "@@ -18,5 +18,5 @@ template void f4<int>(std::size_t);\n \n // { dg-final { scan-assembler \"_Z2f1IiEvDTatT_E\" } }\n // { dg-final { scan-assembler \"_Z2f2IiEvDTaztlT_EE\" } }\n-// { dg-final { scan-assembler \"_Z2f3IiEvDTv111__alignof__T_E\" } }\n-// { dg-final { scan-assembler \"_Z2f4IiEvDTv111__alignof__tlT_EE\" } }\n+// { dg-final { scan-assembler \"_Z2f3IiEvDTu11__alignof__T_EE\" } }\n+// { dg-final { scan-assembler \"_Z2f4IiEvDTu11__alignof__XtlT_EEEE\" } }"}, {"sha": "295d58cb4541d4a7200d92086454c5048329ba36", "filename": "include/demangle.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3bf6ce7f2e17f2c977c13df23eb718e7b433dcd/include%2Fdemangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3bf6ce7f2e17f2c977c13df23eb718e7b433dcd/include%2Fdemangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fdemangle.h?ref=a3bf6ce7f2e17f2c977c13df23eb718e7b433dcd", "patch": "@@ -408,6 +408,9 @@ enum demangle_component_type\n      number which involves neither modifying the mangled string nor\n      allocating a new copy of the literal in memory.  */\n   DEMANGLE_COMPONENT_LITERAL_NEG,\n+  /* A vendor's builtin expression.  The left subtree holds the\n+     expression's name, and the right subtree is a argument list.  */\n+  DEMANGLE_COMPONENT_VENDOR_EXPR,\n   /* A libgcj compiled resource.  The left subtree is the name of the\n      resource.  */\n   DEMANGLE_COMPONENT_JAVA_RESOURCE,"}, {"sha": "33490f60285467c104bc3eca98ed9815ea28ed00", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3bf6ce7f2e17f2c977c13df23eb718e7b433dcd/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3bf6ce7f2e17f2c977c13df23eb718e7b433dcd/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=a3bf6ce7f2e17f2c977c13df23eb718e7b433dcd", "patch": "@@ -815,6 +815,9 @@ d_dump (struct demangle_component *dc, int indent)\n     case DEMANGLE_COMPONENT_LITERAL_NEG:\n       printf (\"negative literal\\n\");\n       break;\n+    case DEMANGLE_COMPONENT_VENDOR_EXPR:\n+      printf (\"vendor expression\\n\");\n+      break;\n     case DEMANGLE_COMPONENT_JAVA_RESOURCE:\n       printf (\"java resource\\n\");\n       break;\n@@ -976,6 +979,7 @@ d_make_comp (struct d_info *di, enum demangle_component_type type,\n     case DEMANGLE_COMPONENT_TRINARY_ARG1:\n     case DEMANGLE_COMPONENT_LITERAL:\n     case DEMANGLE_COMPONENT_LITERAL_NEG:\n+    case DEMANGLE_COMPONENT_VENDOR_EXPR:\n     case DEMANGLE_COMPONENT_COMPOUND_NAME:\n     case DEMANGLE_COMPONENT_VECTOR_TYPE:\n     case DEMANGLE_COMPONENT_CLONE:\n@@ -3344,6 +3348,7 @@ d_unresolved_name (struct d_info *di)\n \t\t::= cl <expression>+ E\n                 ::= st <type>\n                 ::= <template-param>\n+\t\t::= u <source-name> <template-arg>* E # vendor extended expression\n \t\t::= <unresolved-name>\n                 ::= <expr-primary>\n \n@@ -3425,6 +3430,15 @@ d_expression_1 (struct d_info *di)\n       return d_make_comp (di, DEMANGLE_COMPONENT_INITIALIZER_LIST,\n \t\t\t  type, d_exprlist (di, 'E'));\n     }\n+  else if (peek == 'u')\n+    {\n+      /* A vendor extended expression.  */\n+      struct demangle_component *name, *args;\n+      d_advance (di, 1);\n+      name = d_source_name (di);\n+      args = d_template_args_1 (di);\n+      return d_make_comp (di, DEMANGLE_COMPONENT_VENDOR_EXPR, name, args);\n+    }\n   else\n     {\n       struct demangle_component *op;\n@@ -4229,6 +4243,7 @@ d_count_templates_scopes (struct d_print_info *dpi,\n     case DEMANGLE_COMPONENT_TRINARY_ARG2:\n     case DEMANGLE_COMPONENT_LITERAL:\n     case DEMANGLE_COMPONENT_LITERAL_NEG:\n+    case DEMANGLE_COMPONENT_VENDOR_EXPR:\n     case DEMANGLE_COMPONENT_JAVA_RESOURCE:\n     case DEMANGLE_COMPONENT_COMPOUND_NAME:\n     case DEMANGLE_COMPONENT_DECLTYPE:\n@@ -5509,18 +5524,9 @@ d_print_comp_inner (struct d_print_info *dpi, int options,\n       }\n \n     case DEMANGLE_COMPONENT_EXTENDED_OPERATOR:\n-      {\n-\tstruct demangle_component *name = dc->u.s_extended_operator.name;\n-\tif (name->type == DEMANGLE_COMPONENT_NAME\n-\t    && !strncmp (name->u.s_name.s, \"__alignof__\", name->u.s_name.len))\n-\t  d_print_comp (dpi, options, dc->u.s_extended_operator.name);\n-\telse\n-\t  {\n-\t    d_append_string (dpi, \"operator \");\n-\t    d_print_comp (dpi, options, dc->u.s_extended_operator.name);\n-\t  }\n-\treturn;\n-      }\n+      d_append_string (dpi, \"operator \");\n+      d_print_comp (dpi, options, dc->u.s_extended_operator.name);\n+      return;\n \n     case DEMANGLE_COMPONENT_CONVERSION:\n       d_append_string (dpi, \"operator \");\n@@ -5585,14 +5591,8 @@ d_print_comp_inner (struct d_print_info *dpi, int options,\n \tif (code && !strcmp (code, \"gs\"))\n \t  /* Avoid parens after '::'.  */\n \t  d_print_comp (dpi, options, operand);\n-\telse if ((code && !strcmp (code, \"st\"))\n-\t\t || (op->type == DEMANGLE_COMPONENT_EXTENDED_OPERATOR\n-\t\t     && (op->u.s_extended_operator.name->type\n-\t\t\t == DEMANGLE_COMPONENT_NAME)\n-\t\t     && !strncmp (op->u.s_extended_operator.name->u.s_name.s,\n-\t\t\t\t  \"__alignof__\",\n-\t\t\t\t  op->u.s_extended_operator.name->u.s_name.len)))\n-\t  /* Always print parens for sizeof (type) and __alignof__.  */\n+\telse if (code && !strcmp (code, \"st\"))\n+\t  /* Always print parens for sizeof (type).  */\n \t  {\n \t    d_append_char (dpi, '(');\n \t    d_print_comp (dpi, options, operand);\n@@ -5805,6 +5805,13 @@ d_print_comp_inner (struct d_print_info *dpi, int options,\n       }\n       return;\n \n+    case DEMANGLE_COMPONENT_VENDOR_EXPR:\n+      d_print_comp (dpi, options, d_left (dc));\n+      d_append_char (dpi, '(');\n+      d_print_comp (dpi, options, d_right (dc));\n+      d_append_char (dpi, ')');\n+      return;\n+\n     case DEMANGLE_COMPONENT_NUMBER:\n       d_append_num (dpi, dc->u.s_number.number);\n       return;"}, {"sha": "19a0d621bc01123f526aa48f1f5a6f2875d91b8e", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3bf6ce7f2e17f2c977c13df23eb718e7b433dcd/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3bf6ce7f2e17f2c977c13df23eb718e7b433dcd/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=a3bf6ce7f2e17f2c977c13df23eb718e7b433dcd", "patch": "@@ -1471,10 +1471,10 @@ _Z2F2IZ1FvEUlvE_EN1AIT_E1XES2_\n A<F()::{lambda()#1}>::X F2<F()::{lambda()#1}>(F()::{lambda()#1})\n \n # PR 88115\n-_Z1fIiEvDTv111__alignof__T_E\n+_Z1fIiEvDTu11__alignof__T_EE\n void f<int>(decltype (__alignof__(int)))\n \n-_Z1fIiEvDTv111__alignof__tlT_EE\n+_Z1fIiEvDTu11__alignof__XtlT_EEEE\n void f<int>(decltype (__alignof__(int{})))\n \n _Z1gI1AEv1SIXadsrT_oncviEE"}]}