{"sha": "1e271beeec163b124eb424c0c9918b045e289c06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWUyNzFiZWVlYzE2M2IxMjRlYjQyNGMwYzk5MThiMDQ1ZTI4OWMwNg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-10-18T19:02:35Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-10-18T19:02:35Z"}, "message": "[arm] Introduce arm_carry_operation\n\nAn earlier patch introduced arm_borrow_operation, this one introduces\nthe carry variant, which is the same except that the logic of the\ncarry-setting is inverted.  Having done this we can now match more\ncases where the carry flag is propagated from comparisons with\ndifferent modes without having to define even more patterns.  A few\nsmall changes to the expand patterns are required to directly create\nthe carry representation.\n\nThe iterators LTUGEU is no-longer needed and removed, as is the code\nattribute 'cnb'.\n\nFinally, we fix a long-standing bug which was probably inert before:\nin Thumb2 a shift with ADC can only be by an immediate amount;\nregister-specified shifts are not permitted.\n\n\t* config/arm/predicates.md (arm_carry_operation): New special\n\tpredicate.\n\t* config/arm/iterators.md (LTUGEU): Delete iterator.\n\t(cnb): Delete code attribute.\n\t(optab): Delete ltu and geu elements.\n\t* config/arm/arm.md (addsi3_carryin): Renamed from\n\taddsi3_carryin_<optab>.  Remove iterator and use arm_carry_operand.\n\t(add0si3_carryin): Similarly, but from add0si3_carryin_<optab>.\n\t(addsi3_carryin_alt2): Similarly, but from addsi3_carryin_alt2_<optab>.\n\t(addsi3_carryin_clobercc): Similarly.\n\t(addsi3_carryin_shift): Similarly.  Do not allow register shifts in\n\tThumb2 state.\n\nFrom-SVN: r277171", "tree": {"sha": "e7d468a16e2a7534dd19d7c78a76febb470813d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7d468a16e2a7534dd19d7c78a76febb470813d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e271beeec163b124eb424c0c9918b045e289c06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e271beeec163b124eb424c0c9918b045e289c06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e271beeec163b124eb424c0c9918b045e289c06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e271beeec163b124eb424c0c9918b045e289c06/comments", "author": null, "committer": null, "parents": [{"sha": "bc8dd50fe4cddc779349ef79f55e9e623c3c215f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc8dd50fe4cddc779349ef79f55e9e623c3c215f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc8dd50fe4cddc779349ef79f55e9e623c3c215f"}], "stats": {"total": 83, "additions": 57, "deletions": 26}, "files": [{"sha": "e4f10c6eb962cd7f0b638e3906ba1a0d5d426d9a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e271beeec163b124eb424c0c9918b045e289c06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e271beeec163b124eb424c0c9918b045e289c06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e271beeec163b124eb424c0c9918b045e289c06", "patch": "@@ -1,3 +1,18 @@\n+2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/predicates.md (arm_carry_operation): New special\n+\tpredicate.\n+\t* config/arm/iterators.md (LTUGEU): Delete iterator.\n+\t(cnb): Delete code attribute.\n+\t(optab): Delete ltu and geu elements.\n+\t* config/arm/arm.md (addsi3_carryin): Renamed from\n+\taddsi3_carryin_<optab>.  Remove iterator and use arm_carry_operand.\n+\t(add0si3_carryin): Similarly, but from add0si3_carryin_<optab>.\n+\t(addsi3_carryin_alt2): Similarly, but from addsi3_carryin_alt2_<optab>.\n+\t(addsi3_carryin_clobercc): Similarly.\n+\t(addsi3_carryin_shift): Similarly.  Do not allow register shifts in\n+\tThumb2 state.\n+\n 2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/arm.md (arm_subdi3): Delete insn."}, {"sha": "f53dbc27207c6d6736fb72b709e046ddc7ed12d5", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e271beeec163b124eb424c0c9918b045e289c06/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e271beeec163b124eb424c0c9918b045e289c06/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=1e271beeec163b124eb424c0c9918b045e289c06", "patch": "@@ -471,10 +471,12 @@\n \t    hi_op2 = force_reg (SImode, hi_op2);\n \n \t  emit_insn (gen_addsi3_compareC (lo_dest, lo_op1, lo_op2));\n+\t  rtx carry = gen_rtx_LTU (SImode, gen_rtx_REG (CC_Cmode, CC_REGNUM),\n+\t\t\t\t   const0_rtx);\n \t  if (hi_op2 == const0_rtx)\n-\t    emit_insn (gen_add0si3_carryin_ltu (hi_dest, hi_op1));\n+\t    emit_insn (gen_add0si3_carryin (hi_dest, hi_op1, carry));\n \t  else\n-\t    emit_insn (gen_addsi3_carryin_ltu (hi_dest, hi_op1, hi_op2));\n+\t    emit_insn (gen_addsi3_carryin (hi_dest, hi_op1, hi_op2, carry));\n \t}\n \n       if (lo_result != lo_dest)\n@@ -858,11 +860,11 @@\n    (set_attr \"type\" \"alus_imm,alus_sreg,alus_imm,alus_imm,alus_sreg\")]\n  )\n \n-(define_insn \"addsi3_carryin_<optab>\"\n+(define_insn \"addsi3_carryin\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=l,r,r\")\n         (plus:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%l,r,r\")\n                           (match_operand:SI 2 \"arm_not_operand\" \"0,rI,K\"))\n-                 (LTUGEU:SI (reg:<cnb> CC_REGNUM) (const_int 0))))]\n+                 (match_operand:SI 3 \"arm_carry_operation\" \"\")))]\n   \"TARGET_32BIT\"\n   \"@\n    adc%?\\\\t%0, %1, %2\n@@ -877,9 +879,9 @@\n )\n \n ;; Canonicalization of the above when the immediate is zero.\n-(define_insn \"add0si3_carryin_<optab>\"\n+(define_insn \"add0si3_carryin\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n-\t(plus:SI (LTUGEU:SI (reg:<cnb> CC_REGNUM) (const_int 0))\n+\t(plus:SI (match_operand:SI 2 \"arm_carry_operation\" \"\")\n \t\t (match_operand:SI 1 \"arm_not_operand\" \"r\")))]\n   \"TARGET_32BIT\"\n   \"adc%?\\\\t%0, %1, #0\"\n@@ -889,9 +891,9 @@\n    (set_attr \"type\" \"adc_imm\")]\n )\n \n-(define_insn \"*addsi3_carryin_alt2_<optab>\"\n+(define_insn \"*addsi3_carryin_alt2\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=l,r,r\")\n-        (plus:SI (plus:SI (LTUGEU:SI (reg:<cnb> CC_REGNUM) (const_int 0))\n+        (plus:SI (plus:SI (match_operand:SI 3 \"arm_carry_operation\" \"\")\n                           (match_operand:SI 1 \"s_register_operand\" \"%l,r,r\"))\n                  (match_operand:SI 2 \"arm_not_operand\" \"l,rI,K\")))]\n   \"TARGET_32BIT\"\n@@ -907,28 +909,30 @@\n    (set_attr \"type\" \"adc_reg,adc_reg,adc_imm\")]\n )\n \n-(define_insn \"*addsi3_carryin_shift_<optab>\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+(define_insn \"*addsi3_carryin_shift\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n \t(plus:SI (plus:SI\n \t\t  (match_operator:SI 2 \"shift_operator\"\n-\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r\")\n-\t\t     (match_operand:SI 4 \"reg_or_int_operand\" \"rM\")])\n-\t\t  (LTUGEU:SI (reg:<cnb> CC_REGNUM) (const_int 0)))\n-\t\t (match_operand:SI 1 \"s_register_operand\" \"r\")))]\n+\t\t    [(match_operand:SI 3 \"s_register_operand\" \"r,r\")\n+\t\t     (match_operand:SI 4 \"shift_amount_operand\" \"M,r\")])\n+\t\t  (match_operand:SI 5 \"arm_carry_operation\" \"\"))\n+\t\t (match_operand:SI 1 \"s_register_operand\" \"r,r\")))]\n   \"TARGET_32BIT\"\n   \"adc%?\\\\t%0, %1, %3%S2\"\n   [(set_attr \"conds\" \"use\")\n+   (set_attr \"arch\" \"32,a\")\n+   (set_attr \"shift\" \"3\")\n    (set_attr \"predicable\" \"yes\")\n    (set (attr \"type\") (if_then_else (match_operand 4 \"const_int_operand\" \"\")\n \t\t      (const_string \"alu_shift_imm\")\n \t\t      (const_string \"alu_shift_reg\")))]\n )\n \n-(define_insn \"*addsi3_carryin_clobercc_<optab>\"\n+(define_insn \"*addsi3_carryin_clobercc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(plus:SI (plus:SI (match_operand:SI 1 \"s_register_operand\" \"%r\")\n \t\t\t  (match_operand:SI 2 \"arm_rhs_operand\" \"rI\"))\n-\t\t (LTUGEU:SI (reg:<cnb> CC_REGNUM) (const_int 0))))\n+\t\t (match_operand:SI 3 \"arm_carry_operation\" \"\")))\n    (clobber (reg:CC CC_REGNUM))]\n    \"TARGET_32BIT\"\n    \"adcs%?\\\\t%0, %1, %2\""}, {"sha": "77e1645083fa1605bf542f8ec507b519ef37d72b", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e271beeec163b124eb424c0c9918b045e289c06/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e271beeec163b124eb424c0c9918b045e289c06/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=1e271beeec163b124eb424c0c9918b045e289c06", "patch": "@@ -219,11 +219,6 @@\n ;; Code iterators\n ;;----------------------------------------------------------------------------\n \n-;; A list of condition codes used in compare instructions where\n-;; the carry flag from the addition is used instead of doing the\n-;; compare a second time.\n-(define_code_iterator LTUGEU [ltu geu])\n-\n ;; The signed gt, ge comparisons\n (define_code_iterator GTGE [gt ge])\n \n@@ -809,13 +804,9 @@\n (define_code_attr VQH_sign [(plus \"i\") (smin \"s\") (smax \"s\") (umin \"u\")\n                 (umax \"u\")])\n \n-(define_code_attr cnb [(ltu \"CC_C\") (geu \"CC\")])\n-\n ;; Map rtl operator codes to optab names\n (define_code_attr optab\n- [(ltu \"ltu\")\n-  (geu \"geu\")\n-  (and \"and\")\n+ [(and \"and\")\n   (ior \"ior\")\n   (xor \"xor\")])\n "}, {"sha": "ed7495b69fc430d944ac0ced1c0341bb80e9707b", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e271beeec163b124eb424c0c9918b045e289c06/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e271beeec163b124eb424c0c9918b045e289c06/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=1e271beeec163b124eb424c0c9918b045e289c06", "patch": "@@ -356,6 +356,27 @@\n (define_special_predicate \"lt_ge_comparison_operator\"\n   (match_code \"lt,ge\"))\n \n+(define_special_predicate \"arm_carry_operation\"\n+  (match_code \"geu,ltu\")\n+  {\n+    if (XEXP (op, 1) != const0_rtx)\n+      return false;\n+\n+    rtx op0 = XEXP (op, 0);\n+\n+    if (!REG_P (op0) || REGNO (op0) != CC_REGNUM)\n+      return false;\n+\n+    machine_mode ccmode = GET_MODE (op0);\n+    if (ccmode == CC_Cmode)\n+      return GET_CODE (op) == LTU;\n+    else if (ccmode == CCmode || ccmode == CC_RSBmode)\n+      return GET_CODE (op) == GEU;\n+\n+    return false;\n+  }\n+)\n+\n ;; Match a \"borrow\" operation for use with SBC.  The precise code will\n ;; depend on the form of the comparison.  This is generally the inverse of\n ;; a carry operation, since the logic of SBC uses \"not borrow\" in it's"}]}