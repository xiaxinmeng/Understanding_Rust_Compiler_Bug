{"sha": "e979f9e88c46abb7c45dd2dacf79085a26d48301", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTk3OWY5ZTg4YzQ2YWJiN2M0NWRkMmRhY2Y3OTA4NWEyNmQ0ODMwMQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-06-27T00:04:39Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-06-27T00:04:39Z"}, "message": "cpp.texi, [...]: Use @: where necessary when a full stop does not end a sentence.\n\n\t* doc/cpp.texi, doc/cppinternals.texi, doc/extend.texi,\n\tdoc/gcc.texi, doc/install.texi, doc/invoke.texi, doc/md.texi,\n\tdoc/tm.texi: Use @: where necessary when a full stop does not end\n\ta sentence.\n\nFrom-SVN: r43600", "tree": {"sha": "e914978e025bc77d36fa3e0486d47042adfd64d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e914978e025bc77d36fa3e0486d47042adfd64d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e979f9e88c46abb7c45dd2dacf79085a26d48301", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e979f9e88c46abb7c45dd2dacf79085a26d48301", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e979f9e88c46abb7c45dd2dacf79085a26d48301", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e979f9e88c46abb7c45dd2dacf79085a26d48301/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f34f2346339d7d44d15582758283b8829bebba92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f34f2346339d7d44d15582758283b8829bebba92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f34f2346339d7d44d15582758283b8829bebba92"}], "stats": {"total": 95, "additions": 51, "deletions": 44}, "files": [{"sha": "10db88e33efbba2adff4ba9b78e706b2c0426d87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e979f9e88c46abb7c45dd2dacf79085a26d48301/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e979f9e88c46abb7c45dd2dacf79085a26d48301/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e979f9e88c46abb7c45dd2dacf79085a26d48301", "patch": "@@ -1,3 +1,10 @@\n+2001-06-27  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/cpp.texi, doc/cppinternals.texi, doc/extend.texi,\n+\tdoc/gcc.texi, doc/install.texi, doc/invoke.texi, doc/md.texi,\n+\tdoc/tm.texi: Use @: where necessary when a full stop does not end\n+\ta sentence.\n+\n 2001-06-27  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/gcc.texi, doc/install.texi, doc/invoke.texi: Remove trailing"}, {"sha": "ce67981976c0c207e370b1f81948ef54e05f5521", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e979f9e88c46abb7c45dd2dacf79085a26d48301/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e979f9e88c46abb7c45dd2dacf79085a26d48301/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=e979f9e88c46abb7c45dd2dacf79085a26d48301", "patch": "@@ -864,7 +864,7 @@ generally less useful.  @xref{Invocation}.\n @cindex wrapper @code{#ifndef}\n \n If a header file happens to be included twice, the compiler will process\n-its contents twice.  This is very likely to cause an error, e.g. when the\n+its contents twice.  This is very likely to cause an error, e.g.@: when the\n compiler sees the same structure definition twice.  Even if it does not,\n it will certainly waste time.\n \n@@ -1954,7 +1954,7 @@ the @code{m68k-aout} environment it expands to an @samp{_}, but in the\n \n This macro will have the correct definition even if\n @option{-f(no-)underscores} is in use, but it will not be correct if\n-target-specific options that adjust this prefix are used (e.g. the\n+target-specific options that adjust this prefix are used (e.g.@: the\n OSF/rose @option{-mno-underscores} option).\n \n @item __SIZE_TYPE__\n@@ -3187,7 +3187,7 @@ discarded.\n \n The ISO standard specifies that it is implementation defined whether a\n preprocessor preserves whitespace between tokens, or replaces it with\n-e.g. a single space.  In GNU CPP, whitespace between tokens is collapsed\n+e.g.@: a single space.  In GNU CPP, whitespace between tokens is collapsed\n to become a single space, with the exception that the first token on a\n non-directive line is preceded with sufficient spaces that it appears in\n the same column in the preprocessed output that it appeared in in the\n@@ -3325,7 +3325,7 @@ and the tokens to be pasted.\n \n @item\n Traditional mode preserves the amount and form of whitespace provided by\n-the user.  Hard tabs remain hard tabs.  This can be useful, e.g. if you\n+the user.  Hard tabs remain hard tabs.  This can be useful, e.g.@: if you\n are preprocessing a Makefile (which we do not encourage).\n @end itemize\n "}, {"sha": "ac7088f8783999fb7d39e03bd4c5eca78eea3be4", "filename": "gcc/doc/cppinternals.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e979f9e88c46abb7c45dd2dacf79085a26d48301/gcc%2Fdoc%2Fcppinternals.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e979f9e88c46abb7c45dd2dacf79085a26d48301/gcc%2Fdoc%2Fcppinternals.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppinternals.texi?ref=e979f9e88c46abb7c45dd2dacf79085a26d48301", "patch": "@@ -131,7 +131,7 @@ the lexer to only step forwards through the input files, and not step\n back.  This will make future changes to support different character\n sets, in particular state or shift-dependent ones, much easier.\n \n-This file also contains all information needed to spell a token, i.e. to\n+This file also contains all information needed to spell a token, i.e.@: to\n output it either in a diagnostic or to a preprocessed output file.  This\n information is not exported, but made available to clients through such\n functions as @samp{cpp_spell_token} and @samp{cpp_token_len}."}, {"sha": "334875fe3329e73372ec7011d839236bb66fb279", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e979f9e88c46abb7c45dd2dacf79085a26d48301/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e979f9e88c46abb7c45dd2dacf79085a26d48301/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e979f9e88c46abb7c45dd2dacf79085a26d48301", "patch": "@@ -948,7 +948,7 @@ Non-empty initialization of zero-length arrays is now deprecated.\n Instead GCC allows static initialization of flexible array members.\n This is equivalent to defining a new structure containing the original\n structure followed by an array of sufficient size to contain the data.\n-I.e. in the following, @code{f1} is constructed as if it were declared\n+I.e.@: in the following, @code{f1} is constructed as if it were declared\n like @code{f2}.\n \n @example\n@@ -3440,7 +3440,7 @@ you recompile them specially for the task at hand).\n @cindex @code{qsort}, and global register variables\n It is not safe for one function that uses a global register variable to\n call another such function @code{foo} by way of a third function\n-@code{lose} that was compiled without knowledge of this variable (i.e. in a\n+@code{lose} that was compiled without knowledge of this variable (i.e.@: in a\n different source file in which the variable wasn't declared).  This is\n because @code{lose} might save the register and put some other value there.\n For example, you can't expect a global register variable to be available in\n@@ -4430,7 +4430,7 @@ other files) without having to specify them as well.\n g++ has extended the template instantiation syntax outlined in the\n Working Paper to allow forward declaration of explicit instantiations\n (with @code{extern}), instantiation of the compiler support data for a\n-template class (i.e. the vtable) without instantiating any of its\n+template class (i.e.@: the vtable) without instantiating any of its\n members (with @code{inline}), and instantiation of only the static data\n members of a template class, without the support data or member\n functions (with (@code{static}):\n@@ -4455,7 +4455,7 @@ definitions.  For each of these files, add @samp{#pragma implementation\n \"@var{filename}\"} to the top of some @samp{.C} file which\n @samp{#include}s it.  Then compile everything with\n @option{-fexternal-templates}.  The templates will then only be expanded\n-in the translation unit which implements them (i.e. has a @samp{#pragma\n+in the translation unit which implements them (i.e.@: has a @samp{#pragma\n implementation} line for the file where they live); all other files will\n use external references.  If you're lucky, everything should work\n properly.  If you get undefined symbol errors, you need to make sure\n@@ -4518,7 +4518,7 @@ typedef int (*fptr)(A *);\n fptr p = (fptr)(a.*fp);\n @end example\n \n-For PMF constants (i.e. expressions of the form @samp{&Klasse::Member}),\n+For PMF constants (i.e.@: expressions of the form @samp{&Klasse::Member}),\n no object is needed to obtain the address of the function.  They can be\n converted to function pointers directly:\n "}, {"sha": "f246d44f28dc569510010e5bd4f5babc09ddc2e8", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e979f9e88c46abb7c45dd2dacf79085a26d48301/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e979f9e88c46abb7c45dd2dacf79085a26d48301/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=e979f9e88c46abb7c45dd2dacf79085a26d48301", "patch": "@@ -1153,8 +1153,8 @@ it when @option{-traditional} is used, but it is too much work to\n implement.\n \n @item\n-K&R compilers allow comments to cross over an inclusion boundary (i.e.\n-started in an include file and ended in the including file).  I think\n+K&R compilers allow comments to cross over an inclusion boundary\n+(i.e.@: started in an include file and ended in the including file).  I think\n this would be quite ugly and can't imagine it could be needed.\n \n @cindex external declaration scope\n@@ -2603,7 +2603,7 @@ preprocessor then uses this name with no prefix in an attempt to open\n the include file.\n \n @item\n-If the file specification is not a valid VMS filename (i.e. does not\n+If the file specification is not a valid VMS filename (i.e.@: does not\n contain a device or a directory specifier, and contains a @samp{/}\n character), the preprocessor tries to convert it from Unix syntax to\n VMS syntax."}, {"sha": "0729e486b0475aa4e99c111e4d2e2f00a119dd0b", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e979f9e88c46abb7c45dd2dacf79085a26d48301/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e979f9e88c46abb7c45dd2dacf79085a26d48301/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=e979f9e88c46abb7c45dd2dacf79085a26d48301", "patch": "@@ -33,7 +33,7 @@\n @settitle Installing GCC: Binaries\n @end ifset\n \n-@comment $Id: install.texi,v 1.35 2001/06/26 22:47:09 jsm28 Exp $\n+@comment $Id: install.texi,v 1.36 2001/06/26 23:23:32 jsm28 Exp $\n @c Copyright (C) 2001 Free Software Foundation, Inc.\n @c *** Converted to texinfo by Dean Wakerley, dean@wakerley.com\n \n@@ -438,7 +438,7 @@ defaults to @file{/usr/local} unless overridden by the\n target system triple, such as @var{sparc-sun-solaris2.7}, and\n @var{version} denotes the GCC version, such as 2.95.2.\n @item\n-Check operating system specific directories (e.g. @file{/usr/ccs/bin} on\n+Check operating system specific directories (e.g.@: @file{/usr/ccs/bin} on\n Sun Solaris).\n @end itemize\n Note that these rules do not check for the value of @env{PATH}.  You may\n@@ -545,7 +545,7 @@ Microsoft Win32 API thread support.\n Specify which cpu variant the\n compiler should generate code for by default.  This is currently\n only supported on the some ports, specifically arm, powerpc, and\n-SPARC.  If configure does not recognize the model name (e.g. arm700,\n+SPARC.  If configure does not recognize the model name (e.g.@: arm700,\n 603e, or ultrasparc) you provide, please check the configure script\n for a complete list of supported models.\n \n@@ -923,7 +923,7 @@ Now you may need specific preparations:\n @item\n In order to run the libio tests in GCC 2.95 and earlier versions of GCC\n on targets which do not fully\n-support Unix/POSIX commands (e.g. Cygwin), the references to the @file{dbz}\n+support Unix/POSIX commands (e.g.@: Cygwin), the references to the @file{dbz}\n directory have to be deleted from @file{libio/configure.in}.\n \n @item\n@@ -2311,7 +2311,7 @@ raises some of the arbitrary limits found in the original.\n <hr>\n @end html\n @heading @anchor{m68k-att-sysv}m68k-att-sysv\n-AT&T 3b1, a.k.a. 7300 PC.  This version of GCC cannot\n+AT&T 3b1, a.k.a.@: 7300 PC.  This version of GCC cannot\n be compiled with the system C compiler, which is too buggy.\n You will need to get a previous version of GCC and use it to\n bootstrap.  Binaries are available from the OSU-CIS archive, at\n@@ -2784,7 +2784,7 @@ smaller than 16 bytes and which are not 8 bytes.  The problem is very\n involved and difficult to fix.  It affects a number of other targets also,\n but IRIX 6 is affected the most, because it is a 64 bit target, and 4 byte\n structures are common.  The exact problem is that structures are being padded\n-at the wrong end, e.g. a 4 byte structure is loaded into the lower 4 bytes\n+at the wrong end, e.g.@: a 4 byte structure is loaded into the lower 4 bytes\n of the register when it should be loaded into the upper 4 bytes of the\n register.\n "}, {"sha": "94d4e0c06de0bf7d5df6b7243291370aeb120fc4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e979f9e88c46abb7c45dd2dacf79085a26d48301/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e979f9e88c46abb7c45dd2dacf79085a26d48301/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e979f9e88c46abb7c45dd2dacf79085a26d48301", "patch": "@@ -917,7 +917,7 @@ possible values are\n Same as @option{-ansi}\n \n @item iso9899:199409\n-ISO C as modified in amend. 1\n+ISO C as modified in amendment 1\n \n @item iso9899:1999\n ISO C99.  Note that this standard is not yet fully supported; see\n@@ -1371,7 +1371,7 @@ be removed from a future version of G++.\n @item -fno-implicit-templates\n @opindex fno-implicit-templates\n Never emit code for non-inline templates which are instantiated\n-implicitly (i.e. by use); only emit code for explicit instantiations.\n+implicitly (i.e.@: by use); only emit code for explicit instantiations.\n @xref{Template Instantiation}, for more information.\n \n @item -fno-implicit-inline-templates\n@@ -1685,9 +1685,9 @@ Warn if a selector has multiple methods of different types defined.\n @cindex message formatting\n \n Traditionally, diagnostic messages have been formatted irrespective of\n-the output device's aspect (e.g. its width, @dots{}).  The options described\n+the output device's aspect (e.g.@: its width, @dots{}).  The options described\n below can be used to control the diagnostic messages formatting\n-algorithm, e.g. how many characters per line, how often source location\n+algorithm, e.g.@: how many characters per line, how often source location\n information should be reported.  Right now, only the C++ front end can\n honor these options.  However it is expected, in the near future, that\n the remaining front ends would be able to digest them correctly.\n@@ -2305,7 +2305,7 @@ The unary plus operator.\n The @samp{U} integer constant suffix, or the @samp{F} or @samp{L} floating point\n constant suffixes.  (Traditional C does support the @samp{L} suffix on integer\n constants.)  Note, these suffixes appear in macros defined in the system\n-headers of most modern systems, e.g. the @samp{_MIN}/@samp{_MAX} macros in @code{<limits.h>}.\n+headers of most modern systems, e.g.@: the @samp{_MIN}/@samp{_MAX} macros in @code{<limits.h>}.\n Use of these macros in user code might normally lead to spurious\n warnings, however gcc's integrated preprocessor has enough context to\n avoid warning in these cases.\n@@ -2324,7 +2324,7 @@ This construct is not accepted by some traditional C compilers.\n @item\n The ISO type of an integer constant has a different width or\n signedness from its traditional type.  This warning is only issued if\n-the base of the constant is ten.  I.e. hexadecimal or octal values, which\n+the base of the constant is ten.  I.e.@: hexadecimal or octal values, which\n typically represent bit patterns, are not warned about.\n \n @item\n@@ -2340,7 +2340,7 @@ namespace for labels.\n @item\n Initialization of unions.  If the initializer is zero, the warning is\n omitted.  This is done under the assumption that the zero initializer in\n-user code appears conditioned on e.g. @code{__STDC__} to avoid missing\n+user code appears conditioned on e.g.@: @code{__STDC__} to avoid missing\n initializer warnings and relies on default initialization to zero in the\n traditional C case.\n \n@@ -4813,7 +4813,7 @@ string after this option will not.\n @item %@{@code{S}*:@code{X}@}\n Substitutes @code{X} if one or more switches whose names start with\n @code{-S} are specified to GCC.  Note that the tail part of the\n-@code{-S} option (i.e. the part matched by the @samp{*}) will be substituted\n+@code{-S} option (i.e.@: the part matched by the @samp{*}) will be substituted\n for each occurrence of @samp{%*} within @code{X}.\n \n @item %@{@code{S}:@code{X}@}\n@@ -4983,7 +4983,7 @@ command with the @option{-V} option.\n \n Earlier we discussed the standard option @option{-b} which chooses among\n different installed compilers for completely different target\n-machines, such as Vax vs. 68000 vs. 80386.\n+machines, such as Vax vs.@: 68000 vs.@: 80386.\n \n In addition, each of these target machine types can have its own\n special options, starting with @samp{-m}, to choose among various\n@@ -5871,7 +5871,7 @@ objects in memory.\n @opindex mno-alignment-traps\n Generate code that assumes that the MMU will not trap unaligned\n accesses.  This produces better code when the target instruction set\n-does not have half-word memory operations (i.e. implementations prior to\n+does not have half-word memory operations (i.e.@: implementations prior to\n ARMv4).\n \n Note that you cannot use this option to access unaligned word objects,\n@@ -8047,7 +8047,7 @@ Produce code for a C300 Clipper processor.  This is the default.\n \n @item -mc400\n @opindex mc400\n-Produce code for a C400 Clipper processor i.e. use floating point\n+Produce code for a C400 Clipper processor i.e.@: use floating point\n registers f8---f15.\n @end table\n \n@@ -8941,7 +8941,7 @@ use exception handling.\n Generate code that allows trapping instructions to throw exceptions.\n Note that this requires platform-specific runtime support that does\n not exist everywhere.  Moreover, it only allows @emph{trapping}\n-instructions to throw exceptions, i.e. memory references or floating\n+instructions to throw exceptions, i.e.@: memory references or floating\n point instructions.  It does not allow exceptions to be thrown from\n arbitrary signal handlers such as @code{SIGALRM}.\n "}, {"sha": "18498275c5958564cc953d30f34a364286a10db5", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e979f9e88c46abb7c45dd2dacf79085a26d48301/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e979f9e88c46abb7c45dd2dacf79085a26d48301/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=e979f9e88c46abb7c45dd2dacf79085a26d48301", "patch": "@@ -383,7 +383,7 @@ predicate function, and that function is solely responsible for\n deciding whether the expression to be matched ``has'' that mode.\n \n When constructing an insn, argument 3 of the gen-function will specify\n-the operation (i.e. the expression code) for the expression to be\n+the operation (i.e.@: the expression code) for the expression to be\n made.  It should be an RTL expression, whose expression code is copied\n into a new expression whose operands are arguments 1 and 2 of the\n gen-function.  The subexpressions of argument 3 are not used;\n@@ -2519,8 +2519,8 @@ This instruction pattern should be defined to support\n @code{__builtin_apply} on machines where special instructions are needed\n to call a subroutine with arbitrary arguments or to save the value\n returned.  This instruction pattern is required on machines that have\n-multiple registers that can hold a return value (i.e.\n-@code{FUNCTION_VALUE_REGNO_P} is true for more than one register).\n+multiple registers that can hold a return value\n+(i.e.@: @code{FUNCTION_VALUE_REGNO_P} is true for more than one register).\n \n @cindex @code{return} instruction pattern\n @item @samp{return}\n@@ -4930,7 +4930,7 @@ if the current insn is predicated, and will otherwise be @code{NULL}.\n \n When @code{define_cond_exec} is used, an implicit reference to\n the @code{predicable} instruction attribute is made.\n-@xref{Insn Attributes}.  This attribute must be boolean (i.e. have\n+@xref{Insn Attributes}.  This attribute must be boolean (i.e.@: have\n exactly two elements in its @var{list-of-values}).  Further, it must\n not be used with complex expressions.  That is, the default and all\n uses in the insns must be a simple constant, not dependent on the"}, {"sha": "57385f8ab368e305ecda5906de5dc3ebac772413", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e979f9e88c46abb7c45dd2dacf79085a26d48301/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e979f9e88c46abb7c45dd2dacf79085a26d48301/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=e979f9e88c46abb7c45dd2dacf79085a26d48301", "patch": "@@ -3832,7 +3832,7 @@ First, emit code to add the integer @var{delta} to the location that\n contains the incoming first argument.  Assume that this argument\n contains a pointer, and is the one used to pass the @code{this} pointer\n in C++.  This is the incoming argument @emph{before} the function prologue,\n-e.g. @samp{%o0} on a sparc.  The addition must preserve the values of\n+e.g.@: @samp{%o0} on a sparc.  The addition must preserve the values of\n all other incoming arguments.\n \n After the addition, emit code to jump to @var{function}, which is a\n@@ -4023,7 +4023,7 @@ assembler code to call function @code{__bb_trace_ret}.  The\n assembler code should only be output\n if the global compile flag @code{profile_block_flag} == 2.  This\n macro has to be used at every place where code for returning from\n-a function is generated (e.g. @code{FUNCTION_EPILOGUE}).  Although\n+a function is generated (e.g.@: @code{FUNCTION_EPILOGUE}).  Although\n you have to write the definition of @code{FUNCTION_EPILOGUE}\n as well, you have to define this macro to tell the compiler, that\n the proper call to @code{__bb_trace_ret} is produced.\n@@ -5181,7 +5181,7 @@ ordinarily expect.\n @findex SLOW_BYTE_ACCESS\n @item SLOW_BYTE_ACCESS\n Define this macro as a C expression which is nonzero if accessing less\n-than a word of memory (i.e. a @code{char} or a @code{short}) is no\n+than a word of memory (i.e.@: a @code{char} or a @code{short}) is no\n faster than accessing a word of memory, i.e., if such access\n require more than one instruction or if there is no difference in cost\n between byte and (aligned) word loads.\n@@ -6312,8 +6312,8 @@ the tree nodes are available.\n @item ASM_OUTPUT_DEFINE_LABEL_DIFFERENCE_SYMBOL (@var{stream}, @var{symbol}, @var{high}, @var{low})\n A C statement to output to the stdio stream @var{stream} assembler code\n which defines (equates) the symbol @var{symbol} to have a value equal to\n-the difference of the two symbols @var{high} and @var{low}, i.e.\n-@var{high} minus @var{low}.  GCC guarantees that the symbols @var{high}\n+the difference of the two symbols @var{high} and @var{low},\n+i.e.@: @var{high} minus @var{low}.  GCC guarantees that the symbols @var{high}\n and @var{low} are already known by the assembler so that the difference\n resolves into a constant.\n \n@@ -6763,12 +6763,12 @@ or whatever.\n \n Don't define this macro if it has nothing to do, but it is helpful in\n reading assembly output if the extent of the delay sequence is made\n-explicit (e.g. with white space).\n+explicit (e.g.@: with white space).\n \n @findex final_sequence\n Note that output routines for instructions with delay slots must be\n-prepared to deal with not being output as part of a sequence (i.e.\n-when the scheduling pass is not run, or when no slot fillers could be\n+prepared to deal with not being output as part of a sequence\n+(i.e.@: when the scheduling pass is not run, or when no slot fillers could be\n found.)  The variable @code{final_sequence} is null when not\n processing a sequence, otherwise it contains the @code{sequence} rtx\n being output.\n@@ -7754,7 +7754,7 @@ floating point operations, but to perform a single precision operation,\n the FPSCR PR bit has to be cleared, while for a double precision\n operation, this bit has to be set.  Changing the PR bit requires a general\n purpose register as a scratch register, hence these FPSCR sets have to\n-be inserted before reload, i.e. you can't put this into instruction emitting\n+be inserted before reload, i.e.@: you can't put this into instruction emitting\n or MACHINE_DEPENDENT_REORG.\n \n You can have multiple entities that are mode-switched, and select at run time"}]}