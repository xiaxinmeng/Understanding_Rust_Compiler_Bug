{"sha": "297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk3ZGNmYjNhOTFiNDI4NGI5ZmM0YzRkYjNlYjk2MzBhMGZjZDQ2NQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchell@usa.net", "date": "1998-03-17T14:59:43Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-03-17T14:59:43Z"}, "message": "typeck2.c (build_x_arrow): Don't crash when an aggregate type has no overloaded operator ->.\n\n\t* typeck2.c (build_x_arrow): Don't crash when an aggregate type\n\thas no overloaded operator ->.\n\t* call.c (build_field_call): Don't crash when presented with a\n\tfield that is actually a nested type.\n\t* decl.c (pushtag): Deal with friend class injection in local\n\tclasses.\n\t* call.c (build_object_call): Don't crash if OBJ is a\n\tpointer-to-member-function.\n\nFrom-SVN: r18647", "tree": {"sha": "669a4605294f2e4a57c022f3a74df9735d5c02ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/669a4605294f2e4a57c022f3a74df9735d5c02ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465/comments", "author": null, "committer": null, "parents": [{"sha": "c7dfe584801a38a984c279332c63e8fb41af4294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7dfe584801a38a984c279332c63e8fb41af4294", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7dfe584801a38a984c279332c63e8fb41af4294"}], "stats": {"total": 102, "additions": 99, "deletions": 3}, "files": [{"sha": "2882a29877427ac626ad450c00f0a4d9cf97f8a4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465", "patch": "@@ -1,3 +1,17 @@\n+Tue Mar 17 14:44:54 1998  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* typeck2.c (build_x_arrow): Don't crash when an aggregate type\n+\thas no overloaded operator ->.\n+\n+\t* call.c (build_field_call): Don't crash when presented with a\n+\tfield that is actually a nested type.\n+\n+\t* decl.c (pushtag): Deal with friend class injection in local\n+\tclasses.\n+\n+\t* call.c (build_object_call): Don't crash if OBJ is a\n+\tpointer-to-member-function.\n+\n Tue Mar 17 11:40:26 1998  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* pt.c (push_template_decl): Complain about template with C linkage,"}, {"sha": "16a6f9f0471aab73d864ef0e0bd2cbe571914b9b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465", "patch": "@@ -169,7 +169,7 @@ build_field_call (basetype_path, instance_ptr, name, parms)\n   if (field == error_mark_node)\n     return error_mark_node;\n \n-  if (field)\n+  if (field && TREE_CODE (field) == FIELD_DECL)\n     {\n       tree basetype;\n       tree ftype = TREE_TYPE (field);\n@@ -2277,6 +2277,15 @@ build_object_call (obj, args)\n   tree type = TREE_TYPE (obj);\n   tree templates = NULL_TREE;\n \n+  if (TYPE_PTRMEMFUNC_P (type))\n+    {\n+      /* It's no good looking for an overloaded operator() on a\n+\t pointer-to-member-function.  */\n+      cp_error (\"pointer-to-member function %E cannot be called\", obj);\n+      cp_error (\"without an object; consider using .* or ->*\");\n+      return error_mark_node;\n+    }\n+\n   fns = lookup_fnfields (TYPE_BINFO (type), ansi_opname [CALL_EXPR], 0);\n \n   args = resolve_args (args);"}, {"sha": "4c33191a705fcc0e6db29670c6291fba40c77307", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465", "patch": "@@ -2170,8 +2170,19 @@ pushtag (name, type, globalize)\n   if (name)\n     {\n       context = type ? TYPE_CONTEXT (type) : NULL_TREE;\n-      if (! context && ! globalize)\n-        context = current_scope ();\n+      if (! context)\n+\t{\n+\t  tree cs = current_scope ();\n+\n+\t  if (! globalize)\n+\t    context = cs;\n+\t  else if (cs != NULL_TREE \n+\t\t   && TREE_CODE_CLASS (TREE_CODE (cs)) == 't')\n+\t    /* When declaring a friend class of a local class, we want\n+\t       to inject the newly named class into the scope\n+\t       containing the local class, not the namespace scope.  */\n+\t    context = hack_decl_function_context (get_type_decl (cs));\n+\t}\n       if (context)\n \tc_decl = TREE_CODE (context) == FUNCTION_DECL\n \t  ? context : TYPE_MAIN_DECL (context);"}, {"sha": "5b17ae2d76fc9e86697017ead953399ee897dffb", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465", "patch": "@@ -1371,6 +1371,13 @@ build_x_arrow (datum)\n \t    }\n \t  last_rval = rval;\n \t}     \n+\n+      if (last_rval == NULL_TREE)\n+\t{\n+\t  cp_error (\"base operand of `->' has non-pointer type `%T'\", type);\n+\t  return error_mark_node;\n+\t}\n+\n       if (TREE_CODE (TREE_TYPE (last_rval)) == REFERENCE_TYPE)\n \tlast_rval = convert_from_reference (last_rval);\n     }"}, {"sha": "e5946fd776834072ab69b3b3b9b1a2d5f9a67506", "filename": "gcc/testsuite/g++.old-deja/g++.other/badarrow.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fbadarrow.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fbadarrow.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fbadarrow.C?ref=297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465", "patch": "@@ -0,0 +1,10 @@\n+// Build don't link:\n+\n+struct S { \n+  int i;\n+} s;\n+\n+void f()\n+{\n+  s->i = 3; // ERROR - base operand\n+}"}, {"sha": "32a0a285fc65da1068754aa1c62af241507d9d45", "filename": "gcc/testsuite/g++.old-deja/g++.other/friend2.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend2.C?ref=297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465", "patch": "@@ -0,0 +1,19 @@\n+// Build don't link:\n+\n+void\n+f()\n+{\n+  class Local_2 {\n+    friend class Friend;\n+\n+    int i;\n+  };\n+  \n+  class Friend {\n+  public:\n+    void g() {\n+      Local_2 l2;\n+      l2.i = 3;\n+    }\n+  };\n+}"}, {"sha": "0c038561d666480b18f83140b89b999cbd76300e", "filename": "gcc/testsuite/g++.old-deja/g++.other/nested1.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnested1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnested1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnested1.C?ref=297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465", "patch": "@@ -0,0 +1,19 @@\n+// Build don't link:\n+\n+struct C\n+{\n+  struct D\n+  {\n+  };\n+};\n+\n+struct E\n+{\n+  C& c;\n+  void g();\n+};\n+\n+void E::g()\n+{\n+  c.D().f(); // ERROR - no matching function\n+}"}, {"sha": "3f6a2afca0ee01c7052af7ab3f3043a89e1360df", "filename": "gcc/testsuite/g++.old-deja/g++.other/ptrmem3.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fptrmem3.C?ref=297dcfb3a91b4284b9fc4c4db3eb9630a0fcd465", "patch": "@@ -0,0 +1,7 @@\n+// Build don't link:\n+\n+class c {\n+  void (c::*x)();\n+public:\n+  void f() { this->x(); } // ERROR - pointer-to-member\n+};"}]}