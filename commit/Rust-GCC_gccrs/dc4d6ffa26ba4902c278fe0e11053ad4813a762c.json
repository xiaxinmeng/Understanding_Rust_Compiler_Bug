{"sha": "dc4d6ffa26ba4902c278fe0e11053ad4813a762c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM0ZDZmZmEyNmJhNDkwMmMyNzhmZTBlMTEwNTNhZDQ4MTNhNzYyYw==", "commit": {"author": {"name": "Stan Shebs", "email": "shebs@apple.com", "date": "2004-12-09T18:25:15Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2004-12-09T18:25:15Z"}, "message": "darwin-asm.h: New file, 32/64-bit assembly macros formerly in darwin-tramp.asm.\n\n        * config/rs6000/darwin-asm.h: New file, 32/64-bit assembly macros\n        formerly in darwin-tramp.asm.\n        * config/rs6000/darwin-tramp.asm: Include darwin-asm.h.\n        * config/rs6000/darwin-fpsave.asm: Use 32/64-bit macros.\n        * config/rs6000/t-darwin: Add dependencies.\n\nFrom-SVN: r91960", "tree": {"sha": "1f1bc5c17b0dd7a123c0c9718c6193ffd68a420a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f1bc5c17b0dd7a123c0c9718c6193ffd68a420a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc4d6ffa26ba4902c278fe0e11053ad4813a762c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc4d6ffa26ba4902c278fe0e11053ad4813a762c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc4d6ffa26ba4902c278fe0e11053ad4813a762c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc4d6ffa26ba4902c278fe0e11053ad4813a762c/comments", "author": null, "committer": null, "parents": [{"sha": "366e6bd1733bb53b0f555ea4365e9d16f24fa143", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/366e6bd1733bb53b0f555ea4365e9d16f24fa143", "html_url": "https://github.com/Rust-GCC/gccrs/commit/366e6bd1733bb53b0f555ea4365e9d16f24fa143"}], "stats": {"total": 106, "additions": 79, "deletions": 27}, "files": [{"sha": "d82d719cc8854ca0a6424093aeee3be3917f60de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4d6ffa26ba4902c278fe0e11053ad4813a762c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4d6ffa26ba4902c278fe0e11053ad4813a762c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc4d6ffa26ba4902c278fe0e11053ad4813a762c", "patch": "@@ -1,3 +1,11 @@\n+2004-12-09  Stan Shebs  <shebs@apple.com>\n+\n+\t* config/rs6000/darwin-asm.h: New file, 32/64-bit assembly macros\n+\tformerly in darwin-tramp.asm.\n+\t* config/rs6000/darwin-tramp.asm: Include darwin-asm.h.\n+\t* config/rs6000/darwin-fpsave.asm: Use 32/64-bit macros.\n+\t* config/rs6000/t-darwin: Add dependencies.\n+\n 2004-12-09  Richard Henderson  <rth@redhat.com>\n \n \tPR target/17025"}, {"sha": "68b8f189c2ade75f86651407d916e84b3166ce42", "filename": "gcc/config/rs6000/darwin-asm.h", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4d6ffa26ba4902c278fe0e11053ad4813a762c/gcc%2Fconfig%2Frs6000%2Fdarwin-asm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4d6ffa26ba4902c278fe0e11053ad4813a762c/gcc%2Fconfig%2Frs6000%2Fdarwin-asm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin-asm.h?ref=dc4d6ffa26ba4902c278fe0e11053ad4813a762c", "patch": "@@ -0,0 +1,61 @@\n+/*  Macro definitions to used to support 32/64-bit code in Darwin's\n+ *  assembly files.\n+ *\n+ *   Copyright (C) 2004 Free Software Foundation, Inc.\n+ * \n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 59 Temple Place - Suite 330,\n+ * Boston, MA 02111-1307, USA.\n+ * \n+ *  As a special exception, if you link this library with files\n+ *  compiled with GCC to produce an executable, this does not cause the\n+ *  resulting executable to be covered by the GNU General Public License.\n+ *  This exception does not however invalidate any other reasons why the\n+ *  executable file might be covered by the GNU General Public License.\n+ */ \n+\n+/* These are donated from /usr/include/architecture/ppc . */\n+\n+#if defined(__ppc64__)\n+#define MODE_CHOICE(x, y) y\n+#else\n+#define MODE_CHOICE(x, y) x\n+#endif\n+\n+#define cmpg    MODE_CHOICE(cmpw, cmpd)\n+#define lg      MODE_CHOICE(lwz, ld)\n+#define stg     MODE_CHOICE(stw, std)\n+#define lgx     MODE_CHOICE(lwzx, ldx)\n+#define stgx    MODE_CHOICE(stwx, stdx)\n+#define lgu     MODE_CHOICE(lwzu, ldu)\n+#define stgu    MODE_CHOICE(stwu, stdu)\n+#define lgux    MODE_CHOICE(lwzux, ldux)\n+#define stgux   MODE_CHOICE(stwux, stdux)\n+#define lgwa    MODE_CHOICE(lwz, lwa)\n+\n+#define g_long  MODE_CHOICE(long, quad)         /* usage is \".g_long\" */\n+\n+#define GPR_BYTES       MODE_CHOICE(4,8)        /* size of a GPR in bytes */\n+#define LOG2_GPR_BYTES  MODE_CHOICE(2,3)        /* log2(GPR_BYTES) */\n+\n+#define SAVED_LR_OFFSET MODE_CHOICE(8,16)\t/* position of saved\n+\t\t\t\t\t\t   LR in frame */"}, {"sha": "4e6e2fa86d3ed1fb689ae09ede4ebdf54b9d837e", "filename": "gcc/config/rs6000/darwin-fpsave.asm", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4d6ffa26ba4902c278fe0e11053ad4813a762c/gcc%2Fconfig%2Frs6000%2Fdarwin-fpsave.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4d6ffa26ba4902c278fe0e11053ad4813a762c/gcc%2Fconfig%2Frs6000%2Fdarwin-fpsave.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin-fpsave.asm?ref=dc4d6ffa26ba4902c278fe0e11053ad4813a762c", "patch": "@@ -40,10 +40,12 @@\n \n    MORAL: DO NOT MESS AROUND WITH THESE FUNCTIONS!  */\n \n+#include \"darwin-asm.h\"\n+\n .text\n \t.align 2\n \n-/* saveFP saves R0 -- assumed to be the callers LR -- to 8(R1).  */\n+/* saveFP saves R0 -- assumed to be the callers LR -- to 8/16(R1).  */\n \n .private_extern saveFP\n saveFP:\n@@ -65,10 +67,10 @@ saveFP:\n \tstfd f29,-24(r1)\n \tstfd f30,-16(r1)\n \tstfd f31,-8(r1)\n-\tstw  r0,8(r1)\n+\tstg  r0,SAVED_LR_OFFSET(r1)\n \tblr\n \n-/* restFP restores the caller`s LR from 8(R1).  Note that the code for\n+/* restFP restores the caller`s LR from 8/16(R1).  Note that the code for\n    this starts at the offset of F30 restoration, so calling this\n    routine in an attempt to restore only F31 WILL NOT WORK (it would\n    be a stupid thing to do, anyway.)  */\n@@ -92,7 +94,7 @@ restFP:\n \tlfd f28,-32(r1)\n \tlfd f29,-24(r1)\n \t\t\t/* <OFFSET OF F30 RESTORE> restore callers LR  */\n-\tlwz r0,8(r1)\n+\tlg r0,SAVED_LR_OFFSET(r1)\n \tlfd f30,-16(r1)\n \t\t\t/* and prepare for return to caller  */\n \tmtlr r0\t"}, {"sha": "6d0fab223d10284d8a5d425c6b35d6aa33a5574a", "filename": "gcc/config/rs6000/darwin-tramp.asm", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4d6ffa26ba4902c278fe0e11053ad4813a762c/gcc%2Fconfig%2Frs6000%2Fdarwin-tramp.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4d6ffa26ba4902c278fe0e11053ad4813a762c/gcc%2Fconfig%2Frs6000%2Fdarwin-tramp.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin-tramp.asm?ref=dc4d6ffa26ba4902c278fe0e11053ad4813a762c", "patch": "@@ -33,29 +33,7 @@\n  *  executable file might be covered by the GNU General Public License.\n  */ \n \n-/* Some 32/64 macros, donated from /usr/include/architecture/ppc . */\n-\n-#if defined(__ppc64__)\n-#define MODE_CHOICE(x, y) y\n-#else\n-#define MODE_CHOICE(x, y) x\n-#endif\n-\n-#define cmpg    MODE_CHOICE(cmpw, cmpd)\n-#define lg      MODE_CHOICE(lwz, ld)\n-#define stg     MODE_CHOICE(stw, std)\n-#define lgx     MODE_CHOICE(lwzx, ldx)\n-#define stgx    MODE_CHOICE(stwx, stdx)\n-#define lgu     MODE_CHOICE(lwzu, ldu)\n-#define stgu    MODE_CHOICE(stwu, stdu)\n-#define lgux    MODE_CHOICE(lwzux, ldux)\n-#define stgux   MODE_CHOICE(stwux, stdux)\n-#define lgwa    MODE_CHOICE(lwz, lwa)\n-\n-#define g_long  MODE_CHOICE(long, quad)         /* usage is \".g_long\" */\n-\n-#define GPR_BYTES       MODE_CHOICE(4,8)        /* size of a GPR in bytes */\n-#define LOG2_GPR_BYTES  MODE_CHOICE(2,3)        /* log2(GPR_BYTES) */\n+#include \"darwin-asm.h\"\n \n /* Set up trampolines.  */\n "}, {"sha": "467c426f9766766912d8718277690ad82c5f0ec2", "filename": "gcc/config/rs6000/t-darwin", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc4d6ffa26ba4902c278fe0e11053ad4813a762c/gcc%2Fconfig%2Frs6000%2Ft-darwin", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc4d6ffa26ba4902c278fe0e11053ad4813a762c/gcc%2Fconfig%2Frs6000%2Ft-darwin", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-darwin?ref=dc4d6ffa26ba4902c278fe0e11053ad4813a762c", "patch": "@@ -15,3 +15,6 @@ TARGET_LIBGCC2_CFLAGS = -Wa,-force_cpusubtype_ALL\n SHLIB_MAPFILES += $(srcdir)/config/rs6000/libgcc-ppc64.ver\n \n LIB2ADDEH += $(srcdir)/config/rs6000/darwin-fallback.c\n+\n+darwin-fpsave.o:\t$(srcdir)/config/rs6000/darwin-asm.h\n+darwin-tramp.o:\t\t$(srcdir)/config/rs6000/darwin-asm.h"}]}