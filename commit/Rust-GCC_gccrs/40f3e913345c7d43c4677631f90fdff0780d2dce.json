{"sha": "40f3e913345c7d43c4677631f90fdff0780d2dce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBmM2U5MTMzNDVjN2Q0M2M0Njc3NjMxZjkwZmRmZjA3ODBkMmRjZQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-07-18T14:45:56Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-07-18T14:45:56Z"}, "message": "Clean up optional's comments.\n\nFrom-SVN: r238436", "tree": {"sha": "96fe83fa53f6dda5935c9a5f308be5c3cf8ebb2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96fe83fa53f6dda5935c9a5f308be5c3cf8ebb2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40f3e913345c7d43c4677631f90fdff0780d2dce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f3e913345c7d43c4677631f90fdff0780d2dce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f3e913345c7d43c4677631f90fdff0780d2dce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f3e913345c7d43c4677631f90fdff0780d2dce/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94e136b95b163c60090dc0a711b07de03649aca1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94e136b95b163c60090dc0a711b07de03649aca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94e136b95b163c60090dc0a711b07de03649aca1"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "e2bab6330ac16b32a7ef23b8bcd7eb21734238e2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f3e913345c7d43c4677631f90fdff0780d2dce/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f3e913345c7d43c4677631f90fdff0780d2dce/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=40f3e913345c7d43c4677631f90fdff0780d2dce", "patch": "@@ -1,3 +1,10 @@\n+2016-07-18  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tClean up optional's comments.\n+\t* include/std/optional: Remove incorrect section headers\n+\tfrom comments when redundant, replace bare section\n+\theaders with more descriptive comments.\n+\n 2016-07-15  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/algorithmfwd.h: Change C++0x to C++11 in comments."}, {"sha": "4c94dff00d16be69a340513d334ecf949508bc1f", "filename": "libstdc++-v3/include/std/optional", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40f3e913345c7d43c4677631f90fdff0780d2dce/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40f3e913345c7d43c4677631f90fdff0780d2dce/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Foptional?ref=40f3e913345c7d43c4677631f90fdff0780d2dce", "patch": "@@ -51,13 +51,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  @{\n    */\n \n-  // All subsequent [X.Y.n] references are against n3793.\n-\n-  // [X.Y.4]\n   template<typename _Tp>\n     class optional;\n \n-  // [X.Y.6]\n   /// Tag type to disengage optional objects.\n   struct nullopt_t\n   {\n@@ -72,11 +68,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     explicit constexpr nullopt_t(_Construct) { }\n   };\n \n-  // [X.Y.6]\n   /// Tag to disengage optional objects.\n   constexpr nullopt_t nullopt { nullopt_t::_Construct::_Token };\n \n-  // [X.Y.7]\n   /**\n    *  @brief Exception class thrown when a disengaged optional object is\n    *  dereferenced.\n@@ -172,7 +166,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using _Stored_type = remove_const_t<_Tp>;\n \n     public:\n-      // [X.Y.4.1] Constructors.\n \n       // Constructors for disengaged optionals.\n       constexpr _Optional_base() noexcept\n@@ -217,7 +210,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n           this->_M_construct(std::move(__other._M_get()));\n       }\n \n-      // [X.Y.4.3] (partly) Assignment.\n+      // Assignment operators.\n       _Optional_base&\n       operator=(const _Optional_base& __other)\n       {\n@@ -251,7 +244,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n-      // [X.Y.4.2] Destructor.\n+      // Destructor.\n       ~_Optional_base()\n       {\n         if (this->_M_engaged)\n@@ -560,7 +553,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       explicit constexpr optional(optional<_Up>&& __t)\n         : _Base(__t ? optional<_Tp>(std::move(*__t)) : optional<_Tp>()) { }\n \n-      // [X.Y.4.3] (partly) Assignment.\n+      // Assignment operators.\n       optional&\n       operator=(nullopt_t) noexcept\n       {\n@@ -650,9 +643,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  this->_M_construct(__il, std::forward<_Args>(__args)...);\n \t}\n \n-      // [X.Y.4.2] Destructor is implicit, implemented in _Optional_base.\n+      // Destructor is implicit, implemented in _Optional_base.\n \n-      // [X.Y.4.4] Swap.\n+      // Swap.\n       void\n       swap(optional& __other)\n       noexcept(is_nothrow_move_constructible<_Tp>()\n@@ -674,7 +667,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  }\n       }\n \n-      // [X.Y.4.5] Observers.\n+      // Observers.\n       constexpr const _Tp*\n       operator->() const\n       { return __constexpr_addressof(this->_M_get()); }\n@@ -777,7 +770,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     using __optional_relop_t =\n     enable_if_t<is_convertible<_Tp, bool>::value, bool>;\n \n-  // [X.Y.8] Comparisons between optional values.\n+  // Comparisons between optional values.\n   template<typename _Tp>\n     constexpr auto\n     operator==(const optional<_Tp>& __lhs, const optional<_Tp>& __rhs)\n@@ -828,7 +821,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return !__rhs || (static_cast<bool>(__lhs) && *__lhs >= *__rhs);\n     }\n \n-  // [X.Y.9] Comparisons with nullopt.\n+  // Comparisons with nullopt.\n   template<typename _Tp>\n     constexpr bool\n     operator==(const optional<_Tp>& __lhs, nullopt_t) noexcept\n@@ -889,7 +882,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     operator>=(nullopt_t, const optional<_Tp>& __rhs) noexcept\n     { return !__rhs; }\n \n-  // [X.Y.10] Comparisons with value type.\n+  // Comparisons with value type.\n   template<typename _Tp>\n     constexpr auto\n     operator==(const optional<_Tp>& __lhs, const _Tp& __rhs)\n@@ -962,7 +955,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     -> __optional_relop_t<decltype(declval<_Tp>() >= declval<_Tp>())>\n     { return !__rhs || __lhs >= *__rhs; }\n \n-  // [X.Y.11]\n+  // Swap and creation functions.\n   template<typename _Tp>\n     inline void\n     swap(optional<_Tp>& __lhs, optional<_Tp>& __rhs)\n@@ -984,7 +977,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     make_optional(initializer_list<_Up> __il, _Args&&... __args)\n     { return optional<_Tp> { in_place, __il, std::forward<_Args>(__args)... }; }\n \n-  // [X.Y.12]\n+  // Hash.\n   template<typename _Tp>\n     struct hash<optional<_Tp>>\n     {"}]}