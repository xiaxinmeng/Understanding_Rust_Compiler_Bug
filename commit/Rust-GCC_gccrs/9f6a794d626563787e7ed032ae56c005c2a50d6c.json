{"sha": "9f6a794d626563787e7ed032ae56c005c2a50d6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY2YTc5NGQ2MjY1NjM3ODdlN2VkMDMyYWU1NmMwMDVjMmE1MGQ2Yw==", "commit": {"author": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2003-12-07T15:23:31Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2003-12-07T15:23:31Z"}, "message": "re PR c++/2294 (using declaration confusion)\n\n\tPR c++/2294\n\t* name-lookup.c (push_overloaded_decl): Always construct an\n\tOVERLOAD unless the declaration is a built-in.\n\t(set_namespace_binding): While binding OVERLOADs with only one\n\tdeclaration, we still need to call supplement_binding.\n\t* init.c (build_new_1): Deal with an OVERLOAD set when\n\tlooking up for _Jv_AllocObject.\n\t* except.c (build_throw): Likewise for _Jv_Throw.\n\nFrom-SVN: r74394", "tree": {"sha": "cceed65ec08f95207104d09da9520944043f5c66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cceed65ec08f95207104d09da9520944043f5c66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f6a794d626563787e7ed032ae56c005c2a50d6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f6a794d626563787e7ed032ae56c005c2a50d6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f6a794d626563787e7ed032ae56c005c2a50d6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f6a794d626563787e7ed032ae56c005c2a50d6c/comments", "author": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f866b457dcc4257bb7c79b0eae9403faf9a33ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f866b457dcc4257bb7c79b0eae9403faf9a33ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f866b457dcc4257bb7c79b0eae9403faf9a33ff"}], "stats": {"total": 48, "additions": 39, "deletions": 9}, "files": [{"sha": "8105bfceb31fcd522d0654900076e4b348b4759e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6a794d626563787e7ed032ae56c005c2a50d6c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6a794d626563787e7ed032ae56c005c2a50d6c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9f6a794d626563787e7ed032ae56c005c2a50d6c", "patch": "@@ -1,3 +1,14 @@\n+2003-12-07  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\r\n+\r\n+\tPR c++/2294\r\n+\t* name-lookup.c (push_overloaded_decl): Always construct an \r\n+\tOVERLOAD unless the declaration is a built-in.\r\n+\t(set_namespace_binding): While binding OVERLOADs with only one\r\n+\tdeclaration, we still need to call supplement_binding.\r\n+\t* init.c (build_new_1): Deal with an OVERLOAD set when\r\n+\tlooking up for _Jv_AllocObject.\r\n+\t* except.c (build_throw): Likewise for _Jv_Throw.\r\n+\n 2003-12-06  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/13323"}, {"sha": "b684efbb02266a374f8f66b710ee6dedaa8f4e2e", "filename": "gcc/cp/except.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6a794d626563787e7ed032ae56c005c2a50d6c/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6a794d626563787e7ed032ae56c005c2a50d6c/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=9f6a794d626563787e7ed032ae56c005c2a50d6c", "patch": "@@ -645,7 +645,12 @@ build_throw (tree exp)\n \t  tmp = build_function_type (ptr_type_node, tmp);\n \t  fn = push_throw_library_fn (fn, tmp);\n \t}\n-\n+      else if (really_overloaded_fn (fn))\n+\t{\r\n+\t  error (\"`%D' should never be overloaded\", fn);\n+\t  return error_mark_node;\r\n+\t}\n+      fn = OVL_CURRENT (fn);\n       exp = build_function_call (fn, tree_cons (NULL_TREE, exp, NULL_TREE));\n     }\n   else if (exp)"}, {"sha": "19642d6a29c22885c7ba53a705ca7487e7a4c32b", "filename": "gcc/cp/init.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6a794d626563787e7ed032ae56c005c2a50d6c/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6a794d626563787e7ed032ae56c005c2a50d6c/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=9f6a794d626563787e7ed032ae56c005c2a50d6c", "patch": "@@ -2005,11 +2005,18 @@ build_new_1 (tree exp)\n       tree class_size = size_in_bytes (true_type);\n       static const char alloc_name[] = \"_Jv_AllocObject\";\n       use_java_new = 1;\n-      alloc_decl = IDENTIFIER_GLOBAL_VALUE (get_identifier (alloc_name));\n-      if (alloc_decl == NULL_TREE)\n-\tfatal_error (\"call to Java constructor with `%s' undefined\",\n-\t\t     alloc_name);\n-\n+      if (!get_global_value_if_present (get_identifier (alloc_name), \n+\t\t\t\t\t&alloc_decl))\n+\t{\r\n+\t  error (\"call to Java constructor with `%s' undefined\", alloc_name);\n+\t  return error_mark_node;\n+\t}\n+      else if (really_overloaded_fn (alloc_decl))\n+\t{\r\n+\t  error (\"`%D' should never be overloaded\", alloc_decl);\n+\t  return error_mark_node;\n+\t}\n+      alloc_decl = OVL_CURRENT (alloc_decl);\n       class_addr = build1 (ADDR_EXPR, jclass_node, class_decl);\n       alloc_call = (build_function_call\n \t\t    (alloc_decl,"}, {"sha": "203cb1bba8c143b3f759d1d4639fbec5cda6d967", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6a794d626563787e7ed032ae56c005c2a50d6c/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6a794d626563787e7ed032ae56c005c2a50d6c/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=9f6a794d626563787e7ed032ae56c005c2a50d6c", "patch": "@@ -2002,7 +2002,11 @@ push_overloaded_decl (tree decl, int flags)\n \t}\n     }\n \n-  if (old || TREE_CODE (decl) == TEMPLATE_DECL)\n+  /* FIXME: We should build OVERLOADs for all function declarations here.\n+     But right now, there are too many places where the code creates an\n+     artificial declaration and expects the name to be bound exactly\n+     to a FUNCTION_DECL.  */\n+  if (!DECL_ARTIFICIAL (decl))\n     {\n       if (old && TREE_CODE (old) != OVERLOAD)\n \tnew_binding = ovl_cons (decl, ovl_cons (old, NULL_TREE));\n@@ -2012,7 +2016,6 @@ push_overloaded_decl (tree decl, int flags)\n \tOVL_USED (new_binding) = 1;\n     }\n   else\n-    /* NAME is not ambiguous.  */\n     new_binding = decl;\n \n   if (doing_global)\n@@ -2870,7 +2873,11 @@ set_namespace_binding (tree name, tree scope, tree val)\n   if (scope == NULL_TREE)\n     scope = global_namespace;\n   b = binding_for_name (NAMESPACE_LEVEL (scope), name);\n-  if (!b->value || TREE_CODE (val) == OVERLOAD || val == error_mark_node)\n+  if (!b->value\n+      /* If OVL_CHAIN is NULL, it's the first FUNCTION_DECL for this name,\n+       and we still need to call supplement_binding.  */\n+      || (TREE_CODE (val) == OVERLOAD && OVL_CHAIN (val))\n+      || val == error_mark_node)\n     b->value = val;\n   else\n     supplement_binding (b, val);"}]}