{"sha": "81a0f4a391dd3cef102feda6c509db349b4545bd", "node_id": "C_kwDOANBUbNoAKDgxYTBmNGEzOTFkZDNjZWYxMDJmZWRhNmM1MDlkYjM0OWI0NTQ1YmQ", "commit": {"author": {"name": "Yannick Moy", "email": "moy@adacore.com", "date": "2021-07-15T08:40:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-09-22T15:01:43Z"}, "message": "[Ada] Fix obsolete comments/name referring to girder discriminants\n\ngcc/ada/\n\n\t* einfo.ads: Fix comments.\n\t* exp_aggr.adb: Fix variable name.\n\t* exp_util.adb: Fix comments.\n\t* sem_ch13.adb: Fix comments.\n\t* sem_ch3.adb: Fix comments and variable name.", "tree": {"sha": "b310e027251e32ea5b3a083a1e579a25cff662ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b310e027251e32ea5b3a083a1e579a25cff662ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81a0f4a391dd3cef102feda6c509db349b4545bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a0f4a391dd3cef102feda6c509db349b4545bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81a0f4a391dd3cef102feda6c509db349b4545bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a0f4a391dd3cef102feda6c509db349b4545bd/comments", "author": {"login": "yannickmoy", "id": 859440, "node_id": "MDQ6VXNlcjg1OTQ0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/859440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yannickmoy", "html_url": "https://github.com/yannickmoy", "followers_url": "https://api.github.com/users/yannickmoy/followers", "following_url": "https://api.github.com/users/yannickmoy/following{/other_user}", "gists_url": "https://api.github.com/users/yannickmoy/gists{/gist_id}", "starred_url": "https://api.github.com/users/yannickmoy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yannickmoy/subscriptions", "organizations_url": "https://api.github.com/users/yannickmoy/orgs", "repos_url": "https://api.github.com/users/yannickmoy/repos", "events_url": "https://api.github.com/users/yannickmoy/events{/privacy}", "received_events_url": "https://api.github.com/users/yannickmoy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "064056d7b54538dbe47834e8951edf837ee91dc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/064056d7b54538dbe47834e8951edf837ee91dc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/064056d7b54538dbe47834e8951edf837ee91dc4"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "94c56624fef0082b3b01381ba80cbf32d7617339", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a0f4a391dd3cef102feda6c509db349b4545bd/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a0f4a391dd3cef102feda6c509db349b4545bd/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=81a0f4a391dd3cef102feda6c509db349b4545bd", "patch": "@@ -746,9 +746,9 @@ package Einfo is\n \n --    Corresponding_Record_Component\n --       Defined in components of a derived untagged record type, including\n---       discriminants. For a regular component or a girder discriminant,\n+--       discriminants. For a regular component or a stored discriminant,\n --       points to the corresponding component in the parent type. Set to\n---       Empty for a non-girder discriminant. It is used by the back end to\n+--       Empty for a non-stored discriminant. It is used by the back end to\n --       ensure the layout of the derived type matches that of the parent\n --       type when there is no representation clause on the derived type.\n \n@@ -2400,11 +2400,11 @@ package Einfo is\n --       parent, we do not consider them to be separate units for this flag).\n \n --    Is_Completely_Hidden\n---       Defined on discriminants. Only set on girder discriminants of\n---       untagged types. When set, the entity is a girder discriminant of a\n+--       Defined on discriminants. Only set on stored discriminants of\n+--       untagged types. When set, the entity is a stored discriminant of a\n --       derived untagged type which is not directly visible in the derived\n --       type because the derived type or one of its ancestors have renamed the\n---       discriminants in the root type. Note: there are girder discriminants\n+--       discriminants in the root type. Note: there are stored discriminants\n --       which are not Completely_Hidden (e.g. discriminants of a root type).\n \n --    Is_Composite_Type (synthesized)\n@@ -3652,7 +3652,7 @@ package Einfo is\n \n --    Next_Discriminant (synthesized)\n --       Applies to discriminants returned by First/Next_Discriminant. Returns\n---       the next language-defined (i.e. perhaps non-girder) discriminant by\n+--       the next language-defined (i.e. perhaps non-stored) discriminant by\n --       following the chain of declared entities as long as the kind of the\n --       entity corresponds to a discriminant. Note that the discriminants\n --       might be the only components of the record. Returns Empty if there\n@@ -3842,8 +3842,8 @@ package Einfo is\n --            Rec_Ext.Comp -> Rec_Ext.Parent. ... .Parent.Comp\n --\n --       In base untagged types:\n---         Always points to itself except for non-girder discriminants, where\n---         it points to the girder discriminant it renames.\n+--         Always points to itself except for non-stored discriminants, where\n+--         it points to the stored discriminant it renames.\n --\n --       In subtypes (tagged and untagged):\n --         Points to the component in the base type."}, {"sha": "63a06665fc810370b54f540413056e0233a2a992", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a0f4a391dd3cef102feda6c509db349b4545bd/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a0f4a391dd3cef102feda6c509db349b4545bd/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=81a0f4a391dd3cef102feda6c509db349b4545bd", "patch": "@@ -8046,7 +8046,7 @@ package body Exp_Aggr is\n                Discr    : Entity_Id;\n                Decl     : Node_Id;\n                Num_Disc : Nat := 0;\n-               Num_Gird : Nat := 0;\n+               Num_Stor : Nat := 0;\n \n             --  Start of processing for Generate_Aggregate_For_Derived_Type\n \n@@ -8082,13 +8082,13 @@ package body Exp_Aggr is\n \n                Discr := First_Stored_Discriminant (Base_Type (Typ));\n                while Present (Discr) loop\n-                  Num_Gird := Num_Gird + 1;\n+                  Num_Stor := Num_Stor + 1;\n                   Next_Stored_Discriminant (Discr);\n                end loop;\n \n                --  Case of more stored discriminants than new discriminants\n \n-               if Num_Gird > Num_Disc then\n+               if Num_Stor > Num_Disc then\n \n                   --  Create a proper subtype of the parent type, which is the\n                   --  proper implementation type for the aggregate, and convert"}, {"sha": "59c87637c6717318f596251ff8cf029e859529cc", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a0f4a391dd3cef102feda6c509db349b4545bd/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a0f4a391dd3cef102feda6c509db349b4545bd/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=81a0f4a391dd3cef102feda6c509db349b4545bd", "patch": "@@ -10645,7 +10645,7 @@ package body Exp_Util is\n                   end if;\n \n                --  Otherwise the constraint denotes a reference to some name\n-               --  which results in a Girder discriminant:\n+               --  which results in a Stored discriminant:\n \n                --    vvvv\n                --    Name : ...;\n@@ -10666,7 +10666,7 @@ package body Exp_Util is\n                return Find_Constraint_Value (Entity (Constr));\n \n             --  Otherwise the current constraint is an expression which yields\n-            --  a Girder discriminant:\n+            --  a Stored discriminant:\n \n             --    type Typ (D1 : ...; DN : ...) is\n             --      new Anc (Discr => <expression>) with ...\n@@ -10741,7 +10741,7 @@ package body Exp_Util is\n          --    that D_2 constrains D_1, therefore if the algorithm finds the\n          --    value of D_2, then this would also be the value for D_1.\n \n-         --    2.2) The constraint is a name (aka Girder):\n+         --    2.2) The constraint is a name (aka Stored):\n \n          --      Name : ...\n          --      type Ancestor_1 (D_1 : ...) is tagged ...\n@@ -10750,7 +10750,7 @@ package body Exp_Util is\n          --    In this case the name is the final value of D_1 because the\n          --    discriminant cannot be further constrained.\n \n-         --    2.3) The constraint is an expression (aka Girder):\n+         --    2.3) The constraint is an expression (aka Stored):\n \n          --      type Ancestor_1 (D_1 : ...) is tagged ...\n          --      type Ancestor_2 is new Ancestor_1 (D_1 => 1 + 2) ..."}, {"sha": "8cb3b425db9df032d94a0929d546f5afd4e63b4e", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a0f4a391dd3cef102feda6c509db349b4545bd/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a0f4a391dd3cef102feda6c509db349b4545bd/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=81a0f4a391dd3cef102feda6c509db349b4545bd", "patch": "@@ -12361,8 +12361,8 @@ package body Sem_Ch13 is\n                   end if;\n \n                   --  Outer level of record definition, check discriminants\n-                  --  but be careful not to flag a non-girder discriminant\n-                  --  and the girder discriminant it renames as overlapping.\n+                  --  but be careful not to flag a non-stored discriminant\n+                  --  and the stored discriminant it renames as overlapping.\n \n                   if Nkind (Clist) in N_Full_Type_Declaration\n                                     | N_Private_Type_Declaration"}, {"sha": "0e36cc228373d02c99aba10adbd35137572a1129", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81a0f4a391dd3cef102feda6c509db349b4545bd/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81a0f4a391dd3cef102feda6c509db349b4545bd/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=81a0f4a391dd3cef102feda6c509db349b4545bd", "patch": "@@ -696,8 +696,8 @@ package body Sem_Ch3 is\n    --  copy will leave the references to the ancestor discriminants unchanged\n    --  in the declaration tree and they need to be fixed up. If the derived\n    --  type has a known discriminant part, then the remapping done during the\n-   --  copy will only create references to the girder discriminants and they\n-   --  need to be replaced with references to the non-girder discriminants.\n+   --  copy will only create references to the stored discriminants and they\n+   --  need to be replaced with references to the non-stored discriminants.\n \n    procedure Set_Fixed_Range\n      (E   : Entity_Id;\n@@ -8475,11 +8475,11 @@ package body Sem_Ch3 is\n    --  discriminants in R and T1 through T4:\n \n    --   Type      Discrim     Stored Discrim  Comment\n-   --    R      (D1, D2, D3)   (D1, D2, D3)   Girder discrims implicit in R\n-   --    T1     (D1, D2, D3)   (D1, D2, D3)   Girder discrims implicit in T1\n-   --    T2     (X1, X2)       (D1, D2, D3)   Girder discrims EXPLICIT in T2\n-   --    T3     (X1, X2)       (D1, D2, D3)   Girder discrims EXPLICIT in T3\n-   --    T4     (Y)            (D1, D2, D3)   Girder discrims EXPLICIT in T4\n+   --    R      (D1, D2, D3)   (D1, D2, D3)   Stored discrims implicit in R\n+   --    T1     (D1, D2, D3)   (D1, D2, D3)   Stored discrims implicit in T1\n+   --    T2     (X1, X2)       (D1, D2, D3)   Stored discrims EXPLICIT in T2\n+   --    T3     (X1, X2)       (D1, D2, D3)   Stored discrims EXPLICIT in T3\n+   --    T4     (Y)            (D1, D2, D3)   Stored discrims EXPLICIT in T4\n \n    --  Field Corresponding_Discriminant (abbreviated CD below) allows us to\n    --  find the corresponding discriminant in the parent type, while\n@@ -15133,7 +15133,7 @@ package body Sem_Ch3 is\n \n       Add_Discriminants : declare\n          Num_Disc : Nat;\n-         Num_Gird : Nat;\n+         Num_Stor : Nat;\n \n       begin\n          Num_Disc := 0;\n@@ -15154,20 +15154,20 @@ package body Sem_Ch3 is\n          --  the GCC 4.x back-end decides to break apart assignments between\n          --  objects using the parent view into member-wise assignments.\n \n-         Num_Gird := 0;\n+         Num_Stor := 0;\n \n          if Is_Derived_Type (Typ)\n            and then not Is_Tagged_Type (Typ)\n          then\n             Old_C := First_Stored_Discriminant (Typ);\n \n             while Present (Old_C) loop\n-               Num_Gird := Num_Gird + 1;\n+               Num_Stor := Num_Stor + 1;\n                Next_Stored_Discriminant (Old_C);\n             end loop;\n          end if;\n \n-         if Num_Gird > Num_Disc then\n+         if Num_Stor > Num_Disc then\n \n             --  Find out multiple uses of new discriminants, and add hidden\n             --  components for the extra renamed discriminants. We recognize"}]}