{"sha": "facbc2368c8f373a596e7665beb29b96c894bae2", "node_id": "C_kwDOANBUbNoAKGZhY2JjMjM2OGM4ZjM3M2E1OTZlNzY2NWJlYjI5Yjk2Yzg5NGJhZTI", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2021-10-21T15:20:49Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2022-01-20T11:14:43Z"}, "message": "arm: Add option for mitigating against Cortex-A CPU erratum for AES\n\nAdd a new option -mfix-cortex-a-aes for enabling the Cortex-A AES\nerratum work-around and enable it automatically for the affected\nproducts (Cortex-A57 and Cortex-A72).\n\ngcc/ChangeLog:\n\n\t* config/arm/arm-cpus.in (quirk_aes_1742098): New quirk feature\n\t(ALL_QUIRKS): Add it.\n\t(cortex-a57, cortex-a72): Enable it.\n\t(cortex-a57.cortex-a53, cortex-a72.cortex-a53): Likewise.\n\t* config/arm/arm.opt (mfix-cortex-a57-aes-1742098): New command-line\n\toption.\n\t(mfix-cortex-a72-aes-1655431): New option alias.\n\t* config/arm/arm.cc (arm_option_override): Handle default settings\n\tfor AES erratum switch.\n\t* doc/invoke.texi (Arm Options): Document new options.", "tree": {"sha": "e42bd007f26514a712c1bf608b1f515987b1aaa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e42bd007f26514a712c1bf608b1f515987b1aaa5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/facbc2368c8f373a596e7665beb29b96c894bae2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/facbc2368c8f373a596e7665beb29b96c894bae2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/facbc2368c8f373a596e7665beb29b96c894bae2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/facbc2368c8f373a596e7665beb29b96c894bae2/comments", "author": null, "committer": null, "parents": [{"sha": "c471ee0f05d8de576c195996cc3c8ae3ca73d978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c471ee0f05d8de576c195996cc3c8ae3ca73d978", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c471ee0f05d8de576c195996cc3c8ae3ca73d978"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "0d3082b569f70580f54cc934b8c73cae706d13ae", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facbc2368c8f373a596e7665beb29b96c894bae2/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facbc2368c8f373a596e7665beb29b96c894bae2/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=facbc2368c8f373a596e7665beb29b96c894bae2", "patch": "@@ -192,6 +192,9 @@ define feature quirk_cm3_ldrd\n # v8-m/v8.1-m VLLDM errata.\n define feature quirk_vlldm\n \n+# AES errata on some Cortex-A parts\n+define feature quirk_aes_1742098\n+\n # Don't use .cpu assembly directive\n define feature quirk_no_asmcpu\n \n@@ -329,7 +332,7 @@ define implied vfp_base MVE MVE_FP ALL_FP\n # architectures.\n # xscale isn't really a 'quirk', but it isn't an architecture either and we\n # need to ignore it for matching purposes.\n-define fgroup ALL_QUIRKS   quirk_no_volatile_ce quirk_armv6kz quirk_cm3_ldrd quirk_vlldm xscale quirk_no_asmcpu\n+define fgroup ALL_QUIRKS   quirk_no_volatile_ce quirk_armv6kz quirk_cm3_ldrd quirk_vlldm xscale quirk_no_asmcpu quirk_aes_1742098\n \n define fgroup IGNORE_FOR_MULTILIB cdecp0 cdecp1 cdecp2 cdecp3 cdecp4 cdecp5 cdecp6 cdecp7\n \n@@ -1342,6 +1345,7 @@ begin cpu cortex-a57\n  cname cortexa57\n  tune flags LDSCHED\n  architecture armv8-a+crc+simd\n+ isa quirk_aes_1742098\n  option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a57\n  vendor 41\n@@ -1353,6 +1357,7 @@ begin cpu cortex-a72\n  tune for cortex-a57\n  tune flags LDSCHED\n  architecture armv8-a+crc+simd\n+ isa quirk_aes_1742098\n  option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a57\n  vendor 41\n@@ -1391,6 +1396,7 @@ begin cpu cortex-a57.cortex-a53\n  tune for cortex-a53\n  tune flags LDSCHED\n  architecture armv8-a+crc+simd\n+ isa quirk_aes_1742098\n  option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a57\n end cpu cortex-a57.cortex-a53\n@@ -1400,6 +1406,7 @@ begin cpu cortex-a72.cortex-a53\n  tune for cortex-a53\n  tune flags LDSCHED\n  architecture armv8-a+crc+simd\n+ isa quirk_aes_1742098\n  option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a57\n end cpu cortex-a72.cortex-a53"}, {"sha": "04354b36606265d612c13b05bb5dd2188adba52b", "filename": "gcc/config/arm/arm.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facbc2368c8f373a596e7665beb29b96c894bae2/gcc%2Fconfig%2Farm%2Farm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facbc2368c8f373a596e7665beb29b96c894bae2/gcc%2Fconfig%2Farm%2Farm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.cc?ref=facbc2368c8f373a596e7665beb29b96c894bae2", "patch": "@@ -3638,6 +3638,15 @@ arm_option_override (void)\n \tfix_vlldm = 0;\n     }\n \n+  /* Enable fix_aes by default if required.  */\n+  if (fix_aes_erratum_1742098 == 2)\n+    {\n+      if (bitmap_bit_p (arm_active_target.isa, isa_bit_quirk_aes_1742098))\n+\tfix_aes_erratum_1742098 = 1;\n+      else\n+\tfix_aes_erratum_1742098 = 0;\n+    }\n+\n   /* Hot/Cold partitioning is not currently supported, since we can't\n      handle literal pool placement in that case.  */\n   if (flag_reorder_blocks_and_partition)"}, {"sha": "2a4f165033aadb6151c88f4258460a7ce56f4882", "filename": "gcc/config/arm/arm.opt", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facbc2368c8f373a596e7665beb29b96c894bae2/gcc%2Fconfig%2Farm%2Farm.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facbc2368c8f373a596e7665beb29b96c894bae2/gcc%2Fconfig%2Farm%2Farm.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.opt?ref=facbc2368c8f373a596e7665beb29b96c894bae2", "patch": "@@ -272,6 +272,16 @@ mfix-cmse-cve-2021-35465\n Target Var(fix_vlldm) Init(2)\n Mitigate issues with VLLDM on some M-profile devices (CVE-2021-35465).\n \n+mfix-cortex-a57-aes-1742098\n+Target Var(fix_aes_erratum_1742098) Init(2) Save\n+Mitigate issues with AES instructions on Cortex-A57 and Cortex-A72.\n+Arm erratum #1742098\n+\n+mfix-cortex-a72-aes-1655431\n+Target Alias(mfix-cortex-a57-aes-1742098)\n+Mitigate issues with AES instructions on Cortex-A57 and Cortex-A72.\n+Arm erratum #1655431\n+\n munaligned-access\n Target Var(unaligned_access) Init(2) Save\n Enable unaligned word and halfword accesses to packed data."}, {"sha": "67693d6c5cfbbbf9820fe5e76a66b2b2472cf2d0", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/facbc2368c8f373a596e7665beb29b96c894bae2/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/facbc2368c8f373a596e7665beb29b96c894bae2/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=facbc2368c8f373a596e7665beb29b96c894bae2", "patch": "@@ -812,6 +812,8 @@ Objective-C and Objective-C++ Dialects}.\n -mtp=@var{name}  -mtls-dialect=@var{dialect} @gol\n -mword-relocations @gol\n -mfix-cortex-m3-ldrd @gol\n+-mfix-cortex-a57-aes-1742098 @gol\n+-mfix-cortex-a72-aes-1655431 @gol\n -munaligned-access @gol\n -mneon-for-64bits @gol\n -mslow-flash-data @gol\n@@ -21281,6 +21283,15 @@ with overlapping destination and base registers are used.  This option avoids\n generating these instructions.  This option is enabled by default when\n @option{-mcpu=cortex-m3} is specified.\n \n+@item -mfix-cortex-a57-aes-1742098\n+@itemx -mno-fix-cortex-a57-aes-1742098\n+@itemx -mfix-cortex-a72-aes-1655431\n+@itemx -mno-fix-cortex-a72-aes-1655431\n+Enable (disable) mitigation for an erratum on Cortex-A57 and\n+Cortex-A72 that affects the AES cryptographic instructions.  This\n+option is enabled by default when either @option{-mcpu=cortex-a57} or\n+@option{-mcpu=cortex-a72} is specified.\n+\n @item -munaligned-access\n @itemx -mno-unaligned-access\n @opindex munaligned-access"}]}