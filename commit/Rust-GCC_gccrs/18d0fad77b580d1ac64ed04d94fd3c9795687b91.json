{"sha": "18d0fad77b580d1ac64ed04d94fd3c9795687b91", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThkMGZhZDc3YjU4MGQxYWM2NGVkMDRkOTRmZDNjOTc5NTY4N2I5MQ==", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-06-01T16:22:59Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-07-02T15:32:44Z"}, "message": "BTF: Support for BTF_KIND_FLOAT\n\nAdd BTF_KIND_FLOAT, a new BTF type kind which has recently stabilized in\nthe linux kernel [1]. This kind is used for encoding floating point\ntypes, and is of particular use when generating BTF for some s390\narch-specific kernel headers.\n\nAlso update some BTF tests which previously used floating point types to\ncheck correct behavior for types with no BTF representation.\n\n[1]: https://github.com/torvalds/linux/commit/b1828f0b04828aa8cccadf00a702f459caefeed9\n\ninclude/ChangeLog:\n\n\t* btf.h (struct btf_type): Update bit usage comment.\n\t(BTF_INFO_KIND): Update bit mask.\n\t(BTF_KIND_FLOAT): New define.\n\t(BTF_KIND_MAX): Update.\n\ngcc/ChangeLog:\n\n\t* btfout.c (get_btf_kind): Support BTF_KIND_FLOAT.\n\t(btf_asm_type): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/debug/btf/btf-float-1.c: New test.\n\t* gcc.dg/debug/btf/btf-function-3.c: Use different unrepresentable type.\n\t* gcc.dg/debug/btf/btf-struct-2.c: Likewise.\n\t* gcc.dg/debug/btf/btf-variables-2.c: Likewise.", "tree": {"sha": "1dcda79f66eae9a3de3ddc5028ec73c71db26cd5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dcda79f66eae9a3de3ddc5028ec73c71db26cd5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18d0fad77b580d1ac64ed04d94fd3c9795687b91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18d0fad77b580d1ac64ed04d94fd3c9795687b91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18d0fad77b580d1ac64ed04d94fd3c9795687b91", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18d0fad77b580d1ac64ed04d94fd3c9795687b91/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b60761baa6fd6acf3200e732283d133f4ce0f0e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b60761baa6fd6acf3200e732283d133f4ce0f0e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b60761baa6fd6acf3200e732283d133f4ce0f0e9"}], "stats": {"total": 37, "additions": 30, "deletions": 7}, "files": [{"sha": "8cdd9905fb6ca853d3f9119f50dc2e71a860c5fe", "filename": "gcc/btfout.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d0fad77b580d1ac64ed04d94fd3c9795687b91/gcc%2Fbtfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d0fad77b580d1ac64ed04d94fd3c9795687b91/gcc%2Fbtfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbtfout.c?ref=18d0fad77b580d1ac64ed04d94fd3c9795687b91", "patch": "@@ -124,6 +124,7 @@ get_btf_kind (uint32_t ctf_kind)\n   switch (ctf_kind)\n     {\n     case CTF_K_INTEGER:  return BTF_KIND_INT;\n+    case CTF_K_FLOAT:\t return BTF_KIND_FLOAT;\n     case CTF_K_POINTER:  return BTF_KIND_PTR;\n     case CTF_K_ARRAY:    return BTF_KIND_ARRAY;\n     case CTF_K_FUNCTION: return BTF_KIND_FUNC_PROTO;\n@@ -627,6 +628,7 @@ btf_asm_type (ctf_container_ref ctfc, ctf_dtdef_ref dtd)\n   switch (btf_kind)\n     {\n     case BTF_KIND_INT:\n+    case BTF_KIND_FLOAT:\n     case BTF_KIND_STRUCT:\n     case BTF_KIND_UNION:\n     case BTF_KIND_ENUM:"}, {"sha": "6876df041581669ad73164dd49c20b99c2577db8", "filename": "gcc/testsuite/gcc.dg/debug/btf/btf-float-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d0fad77b580d1ac64ed04d94fd3c9795687b91/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-float-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d0fad77b580d1ac64ed04d94fd3c9795687b91/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-float-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-float-1.c?ref=18d0fad77b580d1ac64ed04d94fd3c9795687b91", "patch": "@@ -0,0 +1,20 @@\n+/* Tests for BTF floating point type kinds. We expect a single record for each\n+   of the base types: float, double and long double.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O0 -gbtf -dA\" } */\n+\n+/* { dg-final { scan-assembler-times \"\\[\\t \\]0x10000000\\[\\t \\]+\\[^\\n\\]*btt_info\" 3 } } */\n+\n+/* { dg-final { scan-assembler-times \"ascii \\\"float.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"double.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_string\" 1 } } */\n+/* { dg-final { scan-assembler-times \"ascii \\\"long double.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_string\" 1 } } */\n+\n+float a;\n+float b = 1.5f;\n+\n+double c;\n+double d = -99.9;\n+\n+long double e;\n+long double f = 1000.01;"}, {"sha": "c83b823d22f3fcec6bffa6c44f627d6fe7e40bec", "filename": "gcc/testsuite/gcc.dg/debug/btf/btf-function-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d0fad77b580d1ac64ed04d94fd3c9795687b91/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-function-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d0fad77b580d1ac64ed04d94fd3c9795687b91/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-function-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-function-3.c?ref=18d0fad77b580d1ac64ed04d94fd3c9795687b91", "patch": "@@ -16,7 +16,7 @@\n /* Exactly one function parameter should have type_id=0.  */\n /* { dg-final { scan-assembler-times \"\\[\\t \\]0\\[\\t \\]+\\[^\\n\\]*farg_type\" 1 } } */\n \n-int foo (int a, float f, long b)\n+int foo (int a, float __attribute__((__vector_size__(16))) f, long b)\n {\n   return 0;\n }"}, {"sha": "c3aff09ed9ad2e449ce88c5ffc5f665aae741284", "filename": "gcc/testsuite/gcc.dg/debug/btf/btf-struct-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d0fad77b580d1ac64ed04d94fd3c9795687b91/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-struct-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d0fad77b580d1ac64ed04d94fd3c9795687b91/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-struct-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-struct-2.c?ref=18d0fad77b580d1ac64ed04d94fd3c9795687b91", "patch": "@@ -14,6 +14,6 @@\n struct with_float\n {\n   int a;\n-  float f;\n+  float __attribute__((__vector_size__(16))) f;\n   char c;\n } instance;"}, {"sha": "db0bdd7be16e00cd0393906d65a708feecfc760a", "filename": "gcc/testsuite/gcc.dg/debug/btf/btf-variables-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d0fad77b580d1ac64ed04d94fd3c9795687b91/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-variables-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d0fad77b580d1ac64ed04d94fd3c9795687b91/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-variables-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fbtf%2Fbtf-variables-2.c?ref=18d0fad77b580d1ac64ed04d94fd3c9795687b91", "patch": "@@ -16,7 +16,7 @@\n /* { dg-final { scan-assembler-times \"ascii \\\"myst.0\\\"\\[\\t \\]+\\[^\\n\\]*btf_string\" 1 } } */\n \n int foo;\n-float bar;\n+float __attribute__((__vector_size__(16))) bar;\n int baz[10];\n \n struct st"}, {"sha": "bf720ee49b41172dc9339eb667658f2e91f87f1d", "filename": "include/btf.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18d0fad77b580d1ac64ed04d94fd3c9795687b91/include%2Fbtf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18d0fad77b580d1ac64ed04d94fd3c9795687b91/include%2Fbtf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fbtf.h?ref=18d0fad77b580d1ac64ed04d94fd3c9795687b91", "patch": "@@ -62,8 +62,8 @@ struct btf_type\n   uint32_t info;\t/* Encoded kind, variant length, kind flag:\n \t\t\t   - bits  0-15: vlen\n \t\t\t   - bits 16-23: unused\n-\t\t\t   - bits 24-27: kind\n-\t\t\t   - bits 28-30: unused\n+\t\t\t   - bits 24-28: kind\n+\t\t\t   - bits 29-30: unused\n \t\t\t   - bit     31: kind_flag\n \t\t\t   See accessor macros below.  */\n \n@@ -79,7 +79,7 @@ struct btf_type\n \n /* The folloing macros access the information encoded in btf_type.info.  */\n /* Type kind. See below.  */\n-#define BTF_INFO_KIND(info)\t(((info) >> 24) & 0x0f)\n+#define BTF_INFO_KIND(info)\t(((info) >> 24) & 0x1f)\n /* Number of entries of variable length data following certain type kinds.\n    For example, number of structure members, number of function parameters.  */\n #define BTF_INFO_VLEN(info)\t((info) & 0xffff)\n@@ -108,7 +108,8 @@ struct btf_type\n #define BTF_KIND_FUNC_PROTO\t13\t/* Function Prototype.  */\n #define BTF_KIND_VAR\t\t14\t/* Variable.  */\n #define BTF_KIND_DATASEC\t15\t/* Section such as .bss or .data.  */\n-#define BTF_KIND_MAX\t\tBTF_KIND_DATASEC\n+#define BTF_KIND_FLOAT\t\t16\t/* Floating point.  */\n+#define BTF_KIND_MAX\t\tBTF_KIND_FLOAT\n #define NR_BTF_KINDS\t\t(BTF_KIND_MAX + 1)\n \n /* For some BTF_KINDs, struct btf_type is immediately followed by"}]}