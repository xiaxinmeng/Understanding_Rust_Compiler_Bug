{"sha": "974f90baf29fd1ac7a091126fde9bab10a8dd282", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTc0ZjkwYmFmMjlmZDFhYzdhMDkxMTI2ZmRlOWJhYjEwYThkZDI4Mg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-30T06:48:40Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-30T06:48:40Z"}, "message": "re PR target/39423 ([SH]  performance regression: lost mov @(disp,Rn))\n\n\tPR target/39423\n\t* config/gcc/sh/sh.md (*movsi_index_disp, *movhi_index_disp): New insns.\n\nFrom-SVN: r189954", "tree": {"sha": "8d8f4b5e5400b7783c9e99e0a72b0f26226488f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d8f4b5e5400b7783c9e99e0a72b0f26226488f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/974f90baf29fd1ac7a091126fde9bab10a8dd282", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974f90baf29fd1ac7a091126fde9bab10a8dd282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/974f90baf29fd1ac7a091126fde9bab10a8dd282", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/974f90baf29fd1ac7a091126fde9bab10a8dd282/comments", "author": null, "committer": null, "parents": [{"sha": "be8cbce15811f4d5ba02d7f3d8784b7b94b421d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be8cbce15811f4d5ba02d7f3d8784b7b94b421d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be8cbce15811f4d5ba02d7f3d8784b7b94b421d1"}], "stats": {"total": 131, "additions": 131, "deletions": 0}, "files": [{"sha": "1db4fa04a214e7b988864541902c2dbef93c58db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974f90baf29fd1ac7a091126fde9bab10a8dd282/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974f90baf29fd1ac7a091126fde9bab10a8dd282/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=974f90baf29fd1ac7a091126fde9bab10a8dd282", "patch": "@@ -1,3 +1,8 @@\n+2012-07-30  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/39423\n+\t* config/gcc/sh/sh.md (*movsi_index_disp, *movhi_index_disp): New insns.\n+\n 2012-07-30  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/51244"}, {"sha": "ec9ff03ff7a4cd1e0e340c250bfb83716d01ae21", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/974f90baf29fd1ac7a091126fde9bab10a8dd282/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/974f90baf29fd1ac7a091126fde9bab10a8dd282/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=974f90baf29fd1ac7a091126fde9bab10a8dd282", "patch": "@@ -5103,6 +5103,132 @@ label:\n   \"TARGET_SH1\"\n   \"sett\")\n \n+\n+;; Use the combine pass to transform sequences such as\n+;;\tmov\tr5,r0\n+;;\tadd\t#1,r0\n+;;\tshll2\tr0\n+;;\tmov.l\t@(r0,r4),r0\n+;; into\n+;;\tshll2\tr5\n+;;\tadd\tr4,r5\n+;;\tmov.l\t@(4,r5),r0\n+;;\n+;; See also PR 39423.\n+;; FIXME: Fold copy pasted patterns somehow.\n+;; FIXME: Combine never tries this kind of patterns for DImode.\n+(define_insn_and_split \"*movsi_index_disp\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n+\t(mem:SI\n+\t  (plus:SI\n+\t    (plus:SI (mult:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\")\n+\t\t\t      (match_operand:SI 2 \"const_int_operand\"))\n+\t\t     (match_operand:SI 3 \"arith_reg_operand\" \"r\"))\n+\t    (match_operand:SI 4 \"const_int_operand\"))))]\n+  \"TARGET_SH1 && sh_legitimate_index_p (SImode, operands[4], TARGET_SH2A, true)\n+   && exact_log2 (INTVAL (operands[2])) > 0\"\n+  \"#\"\n+  \"&& can_create_pseudo_p ()\"\n+  [(set (match_dup 5) (ashift:SI (match_dup 1) (match_dup 2)))\n+   (set (match_dup 6) (plus:SI (match_dup 5) (match_dup 3)))\n+   (set (match_dup 0) (mem:SI (plus:SI (match_dup 6) (match_dup 4))))]\n+{\n+  operands[5] = gen_reg_rtx (SImode);\n+  operands[6] = gen_reg_rtx (SImode);\n+  operands[2] = GEN_INT (exact_log2 (INTVAL (operands[2])));\n+})\n+\n+(define_insn_and_split \"*movhi_index_disp\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n+\t(sign_extend:SI\n+\t  (mem:HI\n+\t    (plus:SI\n+\t      (plus:SI (mult:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\")\n+\t\t\t\t(match_operand:SI 2 \"const_int_operand\"))\n+\t\t       (match_operand:SI 3 \"arith_reg_operand\" \"r\"))\n+\t      (match_operand:SI 4 \"const_int_operand\")))))]\n+  \"TARGET_SH1 && sh_legitimate_index_p (HImode, operands[4], TARGET_SH2A, true)\n+   && exact_log2 (INTVAL (operands[2])) > 0\"\n+  \"#\"\n+  \"&& can_create_pseudo_p ()\"\n+  [(set (match_dup 5) (ashift:SI (match_dup 1) (match_dup 2)))\n+   (set (match_dup 6) (plus:SI (match_dup 5) (match_dup 3)))\n+   (set (match_dup 0)\n+\t(sign_extend:SI (mem:HI (plus:SI (match_dup 6) (match_dup 4)))))]\n+{\n+  operands[5] = gen_reg_rtx (SImode);\n+  operands[6] = gen_reg_rtx (SImode);\n+  operands[2] = GEN_INT (exact_log2 (INTVAL (operands[2])));\n+})\n+\n+(define_insn_and_split \"*movhi_index_disp\"\n+  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n+\t(zero_extend:SI\n+\t  (mem:HI\n+\t    (plus:SI\n+\t      (plus:SI (mult:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\")\n+\t\t\t\t(match_operand:SI 2 \"const_int_operand\"))\n+\t\t       (match_operand:SI 3 \"arith_reg_operand\" \"r\"))\n+\t      (match_operand:SI 4 \"const_int_operand\")))))]\n+  \"TARGET_SH1 && sh_legitimate_index_p (HImode, operands[4], TARGET_SH2A, true)\n+   && exact_log2 (INTVAL (operands[2])) > 0\"\n+  \"#\"\n+  \"&& can_create_pseudo_p ()\"\n+  [(set (match_dup 5) (ashift:SI (match_dup 1) (match_dup 2)))\n+   (set (match_dup 6) (plus:SI (match_dup 5) (match_dup 3)))\n+   (set (match_dup 7)\n+\t(sign_extend:SI (mem:HI (plus:SI (match_dup 6) (match_dup 4)))))\n+   (set (match_dup 0) (zero_extend:SI (match_dup 8)))]\n+{\n+  operands[5] = gen_reg_rtx (SImode);\n+  operands[6] = gen_reg_rtx (SImode);\n+  operands[7] = gen_reg_rtx (SImode);\n+  operands[8] = gen_lowpart (HImode, operands[7]);\n+  operands[2] = GEN_INT (exact_log2 (INTVAL (operands[2])));\n+})\n+\n+(define_insn_and_split \"*movsi_index_disp\"\n+  [(set (mem:SI\n+\t  (plus:SI\n+\t    (plus:SI (mult:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\")\n+\t\t\t      (match_operand:SI 2 \"const_int_operand\"))\n+\t\t     (match_operand:SI 3 \"arith_reg_operand\" \"r\"))\n+\t  (match_operand:SI 4 \"const_int_operand\")))\n+\t(match_operand:SI 0 \"arith_reg_operand\" \"r\"))]\n+  \"TARGET_SH1 && sh_legitimate_index_p (SImode, operands[4], TARGET_SH2A, true)\n+   && exact_log2 (INTVAL (operands[2])) > 0\"\n+  \"#\"\n+  \"&& can_create_pseudo_p ()\"\n+  [(set (match_dup 5) (ashift:SI (match_dup 1) (match_dup 2)))\n+   (set (match_dup 6) (plus:SI (match_dup 5) (match_dup 3)))\n+   (set (mem:SI (plus:SI (match_dup 6) (match_dup 4))) (match_dup 0))]\n+{\n+  operands[5] = gen_reg_rtx (SImode);\n+  operands[6] = gen_reg_rtx (SImode);\n+  operands[2] = GEN_INT (exact_log2 (INTVAL (operands[2])));\n+})\n+\n+(define_insn_and_split \"*movhi_index_disp\"\n+  [(set (mem:HI\n+\t  (plus:SI\n+\t    (plus:SI (mult:SI (match_operand:SI 1 \"arith_reg_operand\" \"r\")\n+\t\t\t      (match_operand:SI 2 \"const_int_operand\"))\n+\t\t     (match_operand:SI 3 \"arith_reg_operand\" \"r\"))\n+\t  (match_operand:SI 4 \"const_int_operand\")))\n+\t(match_operand:HI 0 \"arith_reg_operand\" \"r\"))]\n+  \"TARGET_SH1 && sh_legitimate_index_p (HImode, operands[4], TARGET_SH2A, true)\n+   && exact_log2 (INTVAL (operands[2])) > 0\"\n+  \"#\"\n+  \"&& can_create_pseudo_p ()\"\n+  [(set (match_dup 5) (ashift:SI (match_dup 1) (match_dup 2)))\n+   (set (match_dup 6) (plus:SI (match_dup 5) (match_dup 3)))\n+   (set (mem:HI (plus:SI (match_dup 6) (match_dup 4))) (match_dup 0))]\n+{\n+  operands[5] = gen_reg_rtx (SImode);\n+  operands[6] = gen_reg_rtx (SImode);\n+  operands[2] = GEN_INT (exact_log2 (INTVAL (operands[2])));\n+})\n+\n ;; Define additional pop for SH1 and SH2 so it does not get \n ;; placed in the delay slot.\n (define_insn \"*movsi_pop\""}]}