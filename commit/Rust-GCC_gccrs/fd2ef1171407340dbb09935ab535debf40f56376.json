{"sha": "fd2ef1171407340dbb09935ab535debf40f56376", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQyZWYxMTcxNDA3MzQwZGJiMDk5MzVhYjUzNWRlYmY0MGY1NjM3Ng==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-05-20T19:02:22Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-05-20T19:02:22Z"}, "message": "2015-05-20  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/cpp_type_traits.h\n\t(std::move_iterator): Delete declaration.\n\t(std::__is_move_iterator<move_iterator>): Move partial specialization...\n\t* include/bits/stl_iterator.h: ... here.\n\t(std::__miter_base): Overloads for std::reverse_iterator and\n\tstd::move_iterator.\n\t* include/bits/stl_algobase.h (std::__miter_base): Provide default\n\timplementation.\n\nFrom-SVN: r223453", "tree": {"sha": "8344fafd34f2f367574607fe9040390e943c2549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8344fafd34f2f367574607fe9040390e943c2549"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd2ef1171407340dbb09935ab535debf40f56376", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2ef1171407340dbb09935ab535debf40f56376", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd2ef1171407340dbb09935ab535debf40f56376", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2ef1171407340dbb09935ab535debf40f56376/comments", "author": null, "committer": null, "parents": [{"sha": "91767ed11af18ab39fc7a85850ff4908036e416b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91767ed11af18ab39fc7a85850ff4908036e416b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91767ed11af18ab39fc7a85850ff4908036e416b"}], "stats": {"total": 59, "additions": 38, "deletions": 21}, "files": [{"sha": "773c1dd62f8c236387d00e0921bd32f684215943", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2ef1171407340dbb09935ab535debf40f56376/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2ef1171407340dbb09935ab535debf40f56376/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fd2ef1171407340dbb09935ab535debf40f56376", "patch": "@@ -1,3 +1,14 @@\n+2015-05-20  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/cpp_type_traits.h\n+\t(std::move_iterator): Delete declaration.\n+\t(std::__is_move_iterator<move_iterator>): Move partial specialization...\n+\t* include/bits/stl_iterator.h: ... here.\n+\t(std::__miter_base): Overloads for std::reverse_iterator and\n+\tstd::move_iterator.\n+\t* include/bits/stl_algobase.h (std::__miter_base): Provide default\n+\timplementation.\n+\n 2015-05-20  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/util/testsuite_fs.h (nonexistent_path): Don't use tempnam."}, {"sha": "f7b76bf8b5134cd17a2631b73f8e9641c86fd8af", "filename": "libstdc++-v3/include/bits/cpp_type_traits.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2ef1171407340dbb09935ab535debf40f56376/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2ef1171407340dbb09935ab535debf40f56376/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcpp_type_traits.h?ref=fd2ef1171407340dbb09935ab535debf40f56376", "patch": "@@ -399,18 +399,6 @@ __INT_N(__GLIBCXX_TYPE_INT_N_3)\n       typedef __false_type __type;\n     };\n \n-#if __cplusplus >= 201103L\n-  template<typename _Iterator>\n-    class move_iterator;\n-\n-  template<typename _Iterator>\n-    struct __is_move_iterator< move_iterator<_Iterator> >\n-    {\n-      enum { __value = 1 };\n-      typedef __true_type __type;\n-    };\n-#endif\n-\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "409ef364da50e0e8936d749019d878ed365d651f", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2ef1171407340dbb09935ab535debf40f56376/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2ef1171407340dbb09935ab535debf40f56376/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=fd2ef1171407340dbb09935ab535debf40f56376", "patch": "@@ -277,17 +277,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __niter_base(_Iterator __it)\n     { return __it; }\n \n-  // If _Iterator is a move_iterator return its base otherwise return it\n-  // untouched.  See copy, fill, ...\n+  // Likewise for move_iterator.\n   template<typename _Iterator>\n-    struct _Miter_base\n-    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>\n-    { };\n-\n-  template<typename _Iterator>\n-    inline typename _Miter_base<_Iterator>::iterator_type\n+    inline _Iterator\n     __miter_base(_Iterator __it)\n-    { return std::_Miter_base<_Iterator>::_S_base(__it); }\n+    { return __it; }\n \n   // All of these auxiliary structs serve two purposes.  (1) Replace\n   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,"}, {"sha": "58b9aabf2e605f0e43d7e82c7a16f563f17a8177", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2ef1171407340dbb09935ab535debf40f56376/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2ef1171407340dbb09935ab535debf40f56376/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=fd2ef1171407340dbb09935ab535debf40f56376", "patch": "@@ -414,6 +414,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     __niter_base(reverse_iterator<_Iterator> __it)\n     -> decltype(__make_reverse_iterator(__niter_base(__it.base())))\n     { return __make_reverse_iterator(__niter_base(__it.base())); }\n+\n+  template<typename _Iterator>\n+    struct __is_move_iterator<reverse_iterator<_Iterator> >\n+      : __is_move_iterator<_Iterator>\n+    { };\n+\n+  template<typename _Iterator>\n+    auto\n+    __miter_base(reverse_iterator<_Iterator> __it)\n+    -> decltype(__make_reverse_iterator(__miter_base(__it.base())))\n+    { return __make_reverse_iterator(__miter_base(__it.base())); }\n #endif\n \n   // 24.4.2.2.1 back_insert_iterator\n@@ -1211,6 +1222,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     -> decltype(make_move_iterator(__niter_base(__it.base())))\n     { return make_move_iterator(__niter_base(__it.base())); }\n \n+  template<typename _Iterator>\n+    struct __is_move_iterator<move_iterator<_Iterator> >\n+    {\n+      enum { __value = 1 };\n+      typedef __true_type __type;\n+    };\n+\n+  template<typename _Iterator>\n+    auto\n+    __miter_base(move_iterator<_Iterator> __it)\n+    -> decltype(__miter_base(__it.base()))\n+    { return __miter_base(__it.base()); }\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}]}