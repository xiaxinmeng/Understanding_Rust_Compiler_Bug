{"sha": "fe37c7afd16ae44daf4256d6bf7bd630382989e4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUzN2M3YWZkMTZhZTQ0ZGFmNDI1NmQ2YmY3YmQ2MzAzODI5ODllNA==", "commit": {"author": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2016-04-18T20:36:27Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2016-04-18T20:36:27Z"}, "message": "tree.h (TYPE_ALIGN, DECL_ALIGN): Return shifted amount.\n\n\t* tree.h (TYPE_ALIGN, DECL_ALIGN): Return shifted amount.\n\t(SET_TYPE_ALIGN, SET_DECL_ALIGN): New.\n\t* tree-core.h (tree_type_common.align): Use bit-field.\n\t(tree_type_common.spare): New.\n\t(tree_decl_common.off_align): Make smaller.\n\t(tree_decl_common.align): Use bit-field.\n\n\t* expr.c (expand_expr_addr_expr_1): Use SET_TYPE_ALIGN.\n\t* omp-low.c (install_var_field): Use SET_DECL_ALIGN.\n\t(scan_sharing_clauses): Ditto.\n\t(finish_taskreg_scan): Use SET_DECL_ALIGN and SET_TYPE_ALIGN.\n\t(omp_finish_file): Ditto.\n\t* stor-layout.c (do_type_align): Use SET_DECL_ALIGN.\n\t(layout_decl): Ditto.\n\t(relayout_decl): Ditto.\n\t(finalize_record_size): Use SET_TYPE_ALIGN.\n\t(finalize_type_size): Ditto.\n\t(finish_builtin_struct): Ditto.\n\t(layout_type): Ditto.\n\t(initialize_sizetypes): Ditto.\n\t* targhooks.c (std_gimplify_va_arg_expr): Use SET_TYPE_ALIGN.\n\t* tree-nested.c (insert_field_into_struct): Use SET_TYPE_ALIGN.\n\t(lookup_field_for_decl): Use SET_DECL_ALIGN.\n\t(get_chain_field): Ditto.\n\t(get_trampoline_type): Ditto.\n\t(get_nl_goto_field): Ditto.\n\t* tree-streamer-in.c (unpack_ts_decl_common_value_fields): Use\n\tSET_DECL_ALIGN.\n\t(unpack_ts_type_common_value_fields): Use SET_TYPE_ALIGN.\n\t* gimple-expr.c (copy_var_decl): Use SET_DECL_ALIGN.\n\t* tree.c (make_node_stat): Use SET_DECL_ALIGN and SET_TYPE_ALIGN.\n\t(build_qualified_type): Use SET_TYPE_ALIGN.\n\t(build_aligned_type, build_range_type_1): Ditto.\n\t(build_atomic_base): Ditto.\n\t(build_common_tree_nodes): Ditto.\n\t* cfgexpand.c (align_local_variable): Use SET_DECL_ALIGN.\n\t(expand_one_stack_var_at): Ditto.\n\t* coverage.c (build_var): Use SET_DECL_ALIGN.\n\t* except.c (init_eh): Ditto.\n\t* function.c (assign_parm_setup_block): Ditto.\n\t* symtab.c (increase_alignment_1): Ditto.\n\t* tree-ssa-ccp.c (fold_builtin_alloca_with_align): Ditto.\n\t* tree-vect-stmts.c (ensure_base_align): Ditto.\n\t* varasm.c (align_variable): Ditto.\n\t(assemble_variable): Ditto.\n\t(build_constant_desc): Ditto.\n\t(output_constant_def_contents): Ditto.\n\n\t* config/arm/arm.c (arm_relayout_function): Use SET_DECL_ALIGN.\n\t* config/avr/avr.c (avr_adjust_type_node): Use SET_TYPE_ALIGN.\n\t* config/mips/mips.c (mips_std_gimplify_va_arg_expr): Ditto.\n\t* config/msp430/msp430.c (msp430_gimplify_va_arg_expr): Ditto.\n\t* config/spu/spu.c (spu_build_builtin_va_list): Use SET_DECL_ALIGN.\n\nada/\n\t* gcc-interface/decl.c (gnat_to_gnu_entity): Use SET_TYPE_ALIGN.\n\t(gnat_to_gnu_field): Ditto.\n\t(components_to_record): Ditto.\n\t(create_variant_part_from): Ditto.\n\t(copy_and_substitute_in_size): Ditto.\n\t(substitute_in_type): Ditto.\n\t* gcc-interface/utils.c (make_aligning_type): Use SET_TYPE_ALIGN.\n\t(make_packable_type): Ditto.\n\t(maybe_pad_type): Ditto.\n\t(finish_fat_pointer_type): Ditto.\n\t(finish_record_type): Ditto and use SET_DECL_ALIGN.\n\t(rest_of_record_type_compilation): Use SET_TYPE_ALIGN.\n\t(create_field_decl): Use SET_DECL_ALIGN.\n\nc-family/\n\t* c-common.c (handle_aligned_attribute): Use SET_TYPE_ALIGN\n\tand SET_DECL_ALIGN.\n\nc/\n\t* c-decl.c (merge_decls): Use SET_DECL_ALIGN and SET_TYPE_ALIGN.\n\t(grokdeclarator, parser_xref_tag, finish_enum): Use SET_TYPE_ALIGN.\n\ncp/\n\t* class.c (build_vtable): Use SET_DECL_ALIGN and SET_TYPE_ALIGN.\n\t(layout_class_type): Ditto.\n\t(build_base_field): Use SET_DECL_ALIGN.\n\t(fixup_attribute_variants): Use SET_TYPE_ALIGN.\n\t* decl.c (duplicate_decls): Use SET_DECL_ALIGN.\n\t(record_unknown_type): Use SET_TYPE_ALIGN.\n\t(cxx_init_decl_processing): Ditto.\n\t(copy_type_enum): Ditto.\n\t(grokfndecl): Use SET_DECL_ALIGN.\n\t(copy_type_enum): Use SET_TYPE_ALIGN.\n\t* pt.c (instantiate_class_template_1): Use SET_TYPE_ALIGN.\n\t(tsubst): Ditto.\n\t* tree.c (cp_build_qualified_type_real): Use SET_TYPE_ALIGN.\n\t* lambda.c (maybe_add_lambda_conv_op): Use SET_DECL_ALIGN.\n\t* method.c (implicitly_declare_fn): Use SET_DECL_ALIGN.\n\t* rtti.c (emit_tinfo_decl): Ditto.\n\nfortran/\n\t* trans-io.c (gfc_build_io_library_fndecls): Use SET_TYPE_ALIGN.\n\t* trans-common.c (build_common_decl): Use SET_DECL_ALIGN.\n\t* trans-types.c (gfc_add_field_to_struct): Use SET_DECL_ALIGN.\n\ngo/\n\t* go-gcc.cc (Gcc_backend::implicit_variable): Use SET_DECL_ALIGN.\n\njava/\n\t* class.c (add_method_1): Use SET_DECL_ALIGN.\n\t(make_class_data): Ditto.\n\t(emit_register_classes_in_jcr_section): Ditto.\n\t* typeck.c (build_java_array_type): Ditto.\n\nobjc/\n\t* objc-act.c (objc_build_struct): Use SET_DECL_ALIGN.\n\nlibcc1/\n\t* plugin.cc (plugin_finish_record_or_union): Use SET_TYPE_ALIGN.\n\nFrom-SVN: r235172", "tree": {"sha": "2398405f72dc6325d5af24a3f44a44c84a2c9a33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2398405f72dc6325d5af24a3f44a44c84a2c9a33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe37c7afd16ae44daf4256d6bf7bd630382989e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe37c7afd16ae44daf4256d6bf7bd630382989e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe37c7afd16ae44daf4256d6bf7bd630382989e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe37c7afd16ae44daf4256d6bf7bd630382989e4/comments", "author": null, "committer": null, "parents": [{"sha": "91a47c39bfc0e58ac8fea59ba485d220665eca28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91a47c39bfc0e58ac8fea59ba485d220665eca28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91a47c39bfc0e58ac8fea59ba485d220665eca28"}], "stats": {"total": 495, "additions": 321, "deletions": 174}, "files": [{"sha": "60b327b569c8de364e82aff97b4778062ff20fd8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1,3 +1,59 @@\n+2016-04-18  Michael Matz  <matz@suse.de>\n+\n+\t* tree.h (TYPE_ALIGN, DECL_ALIGN): Return shifted amount.\n+\t(SET_TYPE_ALIGN, SET_DECL_ALIGN): New.\n+\t* tree-core.h (tree_type_common.align): Use bit-field.\n+\t(tree_type_common.spare): New.\n+\t(tree_decl_common.off_align): Make smaller.\n+\t(tree_decl_common.align): Use bit-field.\n+\n+\t* expr.c (expand_expr_addr_expr_1): Use SET_TYPE_ALIGN.\n+\t* omp-low.c (install_var_field): Use SET_DECL_ALIGN.\n+\t(scan_sharing_clauses): Ditto.\n+\t(finish_taskreg_scan): Use SET_DECL_ALIGN and SET_TYPE_ALIGN.\n+\t(omp_finish_file): Ditto.\n+\t* stor-layout.c (do_type_align): Use SET_DECL_ALIGN.\n+\t(layout_decl): Ditto.\n+\t(relayout_decl): Ditto.\n+\t(finalize_record_size): Use SET_TYPE_ALIGN.\n+\t(finalize_type_size): Ditto.\n+\t(finish_builtin_struct): Ditto.\n+\t(layout_type): Ditto.\n+\t(initialize_sizetypes): Ditto.\n+\t* targhooks.c (std_gimplify_va_arg_expr): Use SET_TYPE_ALIGN.\n+\t* tree-nested.c (insert_field_into_struct): Use SET_TYPE_ALIGN.\n+\t(lookup_field_for_decl): Use SET_DECL_ALIGN.\n+\t(get_chain_field): Ditto.\n+\t(get_trampoline_type): Ditto.\n+\t(get_nl_goto_field): Ditto.\n+\t* tree-streamer-in.c (unpack_ts_decl_common_value_fields): Use\n+\tSET_DECL_ALIGN.\n+\t(unpack_ts_type_common_value_fields): Use SET_TYPE_ALIGN.\n+\t* gimple-expr.c (copy_var_decl): Use SET_DECL_ALIGN.\n+\t* tree.c (make_node_stat): Use SET_DECL_ALIGN and SET_TYPE_ALIGN.\n+\t(build_qualified_type): Use SET_TYPE_ALIGN.\n+\t(build_aligned_type, build_range_type_1): Ditto.\n+\t(build_atomic_base): Ditto.\n+\t(build_common_tree_nodes): Ditto.\n+\t* cfgexpand.c (align_local_variable): Use SET_DECL_ALIGN.\n+\t(expand_one_stack_var_at): Ditto.\n+\t* coverage.c (build_var): Use SET_DECL_ALIGN.\n+\t* except.c (init_eh): Ditto.\n+\t* function.c (assign_parm_setup_block): Ditto.\n+\t* symtab.c (increase_alignment_1): Ditto.\n+\t* tree-ssa-ccp.c (fold_builtin_alloca_with_align): Ditto.\n+\t* tree-vect-stmts.c (ensure_base_align): Ditto.\n+\t* varasm.c (align_variable): Ditto.\n+\t(assemble_variable): Ditto.\n+\t(build_constant_desc): Ditto.\n+\t(output_constant_def_contents): Ditto.\n+\n+\t* config/arm/arm.c (arm_relayout_function): Use SET_DECL_ALIGN.\n+\t* config/avr/avr.c (avr_adjust_type_node): Use SET_TYPE_ALIGN.\n+\t* config/mips/mips.c (mips_std_gimplify_va_arg_expr): Ditto.\n+\t* config/msp430/msp430.c (msp430_gimplify_va_arg_expr): Ditto.\n+\t* config/spu/spu.c (spu_build_builtin_va_list): Use SET_DECL_ALIGN.\n+\n 2016-04-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/70708"}, {"sha": "1ad6083afe6aec15fcf9ad31e5b0c6e787a52403", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1,3 +1,19 @@\n+2016-04-18  Michael Matz  <matz@suse.de>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Use SET_TYPE_ALIGN.\n+\t(gnat_to_gnu_field): Ditto.\n+\t(components_to_record): Ditto.\n+\t(create_variant_part_from): Ditto.\n+\t(copy_and_substitute_in_size): Ditto.\n+\t(substitute_in_type): Ditto.\n+\t* gcc-interface/utils.c (make_aligning_type): Use SET_TYPE_ALIGN.\n+\t(make_packable_type): Ditto.\n+\t(maybe_pad_type): Ditto.\n+\t(finish_fat_pointer_type): Ditto.\n+\t(finish_record_type): Ditto and use SET_DECL_ALIGN.\n+\t(rest_of_record_type_compilation): Use SET_TYPE_ALIGN.\n+\t(create_field_decl): Use SET_DECL_ALIGN.\n+\n 2016-04-18  Arnaud Charlet  <charlet@adacore.com>\n \n \t* einfo.adb (Overridden_Operation): assert that"}, {"sha": "8ea72b5f7faa42f0c02ed915c6515d5d3094d475", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1888,8 +1888,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t     This means that bit-packed arrays are given \"ceil\" alignment for\n \t     their size by default, which may seem counter-intuitive but makes\n \t     it possible to overlay them on modular types easily.  */\n-\t  TYPE_ALIGN (gnu_type)\n-\t    = align > 0 ? align : TYPE_ALIGN (gnu_field_type);\n+\t  SET_TYPE_ALIGN (gnu_type,\n+\t\t\t  align > 0 ? align : TYPE_ALIGN (gnu_field_type));\n \n \t  /* Propagate the reverse storage order flag to the record type so\n \t     that the required byte swapping is performed when retrieving the\n@@ -1953,7 +1953,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t  TYPE_SIZE (gnu_type) = TYPE_SIZE (gnu_field_type);\n \t  TYPE_SIZE_UNIT (gnu_type) = TYPE_SIZE_UNIT (gnu_field_type);\n \t  SET_TYPE_ADA_SIZE (gnu_type, TYPE_RM_SIZE (gnu_field_type));\n-\t  TYPE_ALIGN (gnu_type) = align;\n+\t  SET_TYPE_ALIGN (gnu_type, align);\n \t  relate_alias_sets (gnu_type, gnu_field_type, ALIAS_SET_COPY);\n \n \t  /* Don't declare the field as addressable since we won't be taking\n@@ -2265,9 +2265,10 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \tif (No (Packed_Array_Impl_Type (gnat_entity))\n \t    && Known_Alignment (gnat_entity))\n \t  {\n-\t    TYPE_ALIGN (tem)\n-\t      = validate_alignment (Alignment (gnat_entity), gnat_entity,\n-\t\t\t\t    TYPE_ALIGN (tem));\n+\t    SET_TYPE_ALIGN (tem,\n+\t\t\t    validate_alignment (Alignment (gnat_entity),\n+\t\t\t\t\t\tgnat_entity,\n+\t\t\t\t\t\tTYPE_ALIGN (tem)));\n \t    if (Present (Alignment_Clause (gnat_entity)))\n \t      TYPE_USER_ALIGN (tem) = 1;\n \t  }\n@@ -2296,7 +2297,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \tTYPE_POINTER_TO (gnu_type) = gnu_fat_type;\n \tTYPE_REFERENCE_TO (gnu_type) = gnu_fat_type;\n \tSET_TYPE_MODE (gnu_type, BLKmode);\n-\tTYPE_ALIGN (gnu_type) = TYPE_ALIGN (tem);\n+\tSET_TYPE_ALIGN (gnu_type, TYPE_ALIGN (tem));\n \n \t/* If the maximum size doesn't overflow, use it.  */\n \tif (gnu_max_size\n@@ -3035,11 +3036,12 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t/* Always set the alignment on the record type here so that it can\n \t   get the proper layout.  */\n \tif (has_align)\n-\t  TYPE_ALIGN (gnu_type)\n-\t    = validate_alignment (Alignment (gnat_entity), gnat_entity, 0);\n+\t  SET_TYPE_ALIGN (gnu_type,\n+\t\t\t  validate_alignment (Alignment (gnat_entity),\n+\t\t\t\t\t      gnat_entity, 0));\n \telse\n \t  {\n-\t    TYPE_ALIGN (gnu_type) = 0;\n+\t    SET_TYPE_ALIGN (gnu_type, 0);\n \n \t    /* If a type needs strict alignment, the minimum size will be the\n \t       type size instead of the RM size (see validate_size).  Cap the\n@@ -3138,7 +3140,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t       be created with a component clause below, then we need\n \t       to apply the same adjustment as in gnat_to_gnu_field.  */\n \t    if (has_rep && TYPE_ALIGN (gnu_type) < TYPE_ALIGN (gnu_parent))\n-\t      TYPE_ALIGN (gnu_type) = TYPE_ALIGN (gnu_parent);\n+\t      SET_TYPE_ALIGN (gnu_type, TYPE_ALIGN (gnu_parent));\n \n \t    /* Finally we fix up both kinds of twisted COMPONENT_REF we have\n \t       initially built.  The discriminants must reference the fields\n@@ -4565,8 +4567,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t    /* Set a default alignment to speed up accesses.  But we\n \t\t       shouldn't increase the size of the structure too much,\n \t\t       lest it doesn't fit in return registers anymore.  */\n-\t\t    TYPE_ALIGN (gnu_return_type)\n-\t\t      = get_mode_alignment (ptr_mode);\n+\t\t    SET_TYPE_ALIGN (gnu_return_type,\n+\t\t\t\t    get_mode_alignment (ptr_mode));\n \t\t  }\n \n \t\tgnu_field\n@@ -4613,8 +4615,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t    if (mode != BLKmode)\n \t\t      {\n \t\t\tSET_TYPE_MODE (gnu_return_type, mode);\n-\t\t\tTYPE_ALIGN (gnu_return_type)\n-\t\t\t  = GET_MODE_ALIGNMENT (mode);\n+\t\t\tSET_TYPE_ALIGN (gnu_return_type,\n+\t\t\t\t\tGET_MODE_ALIGNMENT (mode));\n \t\t\tTYPE_SIZE (gnu_return_type)\n \t\t\t  = bitsize_int (GET_MODE_BITSIZE (mode));\n \t\t\tTYPE_SIZE_UNIT (gnu_return_type)\n@@ -6796,7 +6798,7 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n \t  const unsigned int type_align = TYPE_ALIGN (gnu_field_type);\n \n \t  if (TYPE_ALIGN (gnu_record_type) < type_align)\n-\t    TYPE_ALIGN (gnu_record_type) = type_align;\n+\t    SET_TYPE_ALIGN (gnu_record_type, type_align);\n \n \t  /* If the position is not a multiple of the alignment of the type,\n \t     then error out and reset the position.  */\n@@ -7283,7 +7285,7 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n \t    = make_node (unchecked_union ? UNION_TYPE : QUAL_UNION_TYPE);\n \n \t  TYPE_NAME (gnu_union_type) = gnu_union_name;\n-\t  TYPE_ALIGN (gnu_union_type) = 0;\n+\t  SET_TYPE_ALIGN (gnu_union_type, 0);\n \t  TYPE_PACKED (gnu_union_type) = TYPE_PACKED (gnu_record_type);\n \t  TYPE_REVERSE_STORAGE_ORDER (gnu_union_type)\n \t    = TYPE_REVERSE_STORAGE_ORDER (gnu_record_type);\n@@ -7336,7 +7338,7 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n \t  /* Set the alignment of the inner type in case we need to make\n \t     inner objects into bitfields, but then clear it out so the\n \t     record actually gets only the alignment required.  */\n-\t  TYPE_ALIGN (gnu_variant_type) = TYPE_ALIGN (gnu_record_type);\n+\t  SET_TYPE_ALIGN (gnu_variant_type, TYPE_ALIGN (gnu_record_type));\n \t  TYPE_PACKED (gnu_variant_type) = TYPE_PACKED (gnu_record_type);\n \t  TYPE_REVERSE_STORAGE_ORDER (gnu_variant_type)\n \t    = TYPE_REVERSE_STORAGE_ORDER (gnu_record_type);\n@@ -7568,9 +7570,9 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n \t  SET_DECL_OFFSET_ALIGN (gnu_field, BIGGEST_ALIGNMENT);\n \t  DECL_FIELD_BIT_OFFSET (gnu_field) = bitsize_zero_node;\n \t  if (field_is_aliased (gnu_field))\n-\t    TYPE_ALIGN (gnu_record_type)\n-\t      = MAX (TYPE_ALIGN (gnu_record_type),\n-\t\t     TYPE_ALIGN (TREE_TYPE (gnu_field)));\n+\t    SET_TYPE_ALIGN (gnu_record_type,\n+\t\t\t    MAX (TYPE_ALIGN (gnu_record_type),\n+\t\t\t\t TYPE_ALIGN (TREE_TYPE (gnu_field))));\n \t  MOVE_FROM_FIELD_LIST_TO (gnu_zero_list);\n \t  continue;\n \t}\n@@ -7681,7 +7683,7 @@ components_to_record (tree gnu_record_type, Node_Id gnat_component_list,\n     gnu_field_list = chainon (gnu_field_list, gnu_variant_part);\n \n   if (cancel_alignment)\n-    TYPE_ALIGN (gnu_record_type) = 0;\n+    SET_TYPE_ALIGN (gnu_record_type, 0);\n \n   TYPE_ARTIFICIAL (gnu_record_type) = artificial;\n \n@@ -8794,7 +8796,7 @@ create_variant_part_from (tree old_variant_part,\n       SET_TYPE_ADA_SIZE (new_union_type,\n \t\t\t size_binop (MINUS_EXPR, TYPE_ADA_SIZE (record_type),\n  \t\t\t\t     first_bit));\n-      TYPE_ALIGN (new_union_type) = TYPE_ALIGN (old_union_type);\n+      SET_TYPE_ALIGN (new_union_type, TYPE_ALIGN (old_union_type));\n       relate_alias_sets (new_union_type, old_union_type, ALIAS_SET_COPY);\n     }\n   else\n@@ -8891,7 +8893,7 @@ copy_and_substitute_in_size (tree new_type, tree old_type,\n   TYPE_SIZE (new_type) = TYPE_SIZE (old_type);\n   TYPE_SIZE_UNIT (new_type) = TYPE_SIZE_UNIT (old_type);\n   SET_TYPE_ADA_SIZE (new_type, TYPE_ADA_SIZE (old_type));\n-  TYPE_ALIGN (new_type) = TYPE_ALIGN (old_type);\n+  SET_TYPE_ALIGN (new_type, TYPE_ALIGN (old_type));\n   relate_alias_sets (new_type, old_type, ALIAS_SET_COPY);\n \n   if (CONTAINS_PLACEHOLDER_P (TYPE_SIZE (new_type)))\n@@ -9034,7 +9036,7 @@ substitute_in_type (tree t, tree f, tree r)\n \t  return t;\n \n \tnt = build_nonshared_array_type (component, domain);\n-\tTYPE_ALIGN (nt) = TYPE_ALIGN (t);\n+\tSET_TYPE_ALIGN (nt, TYPE_ALIGN (t));\n \tTYPE_USER_ALIGN (nt) = TYPE_USER_ALIGN (t);\n \tSET_TYPE_MODE (nt, TYPE_MODE (t));\n \tTYPE_SIZE (nt) = SUBSTITUTE_IN_EXPR (TYPE_SIZE (t), f, r);"}, {"sha": "d568dff8e019034f1161349dc06bfe8261c33cd4", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -904,7 +904,7 @@ make_aligning_type (tree type, unsigned int align, tree size,\n \t\t\t     pos, 1, -1);\n   TYPE_FIELDS (record_type) = field;\n \n-  TYPE_ALIGN (record_type) = base_align;\n+  SET_TYPE_ALIGN (record_type, base_align);\n   TYPE_USER_ALIGN (record_type) = 1;\n \n   TYPE_SIZE (record_type)\n@@ -963,7 +963,7 @@ make_packable_type (tree type, bool in_record)\n   if (in_record && size <= MAX_FIXED_MODE_SIZE)\n     {\n       align = ceil_pow2 (size);\n-      TYPE_ALIGN (new_type) = align;\n+      SET_TYPE_ALIGN (new_type, align);\n       new_size = (size + align - 1) & -align;\n     }\n   else\n@@ -983,7 +983,7 @@ make_packable_type (tree type, bool in_record)\n \treturn type;\n \n       align = new_size & -new_size;\n-      TYPE_ALIGN (new_type) = MIN (TYPE_ALIGN (type), align);\n+      SET_TYPE_ALIGN (new_type, MIN (TYPE_ALIGN (type), align));\n     }\n \n   TYPE_USER_ALIGN (new_type) = 1;\n@@ -1295,7 +1295,7 @@ maybe_pad_type (tree type, tree size, unsigned int align,\n   else if (Present (gnat_entity))\n     TYPE_NAME (record) = create_concat_name (gnat_entity, \"PAD\");\n \n-  TYPE_ALIGN (record) = align ? align : orig_align;\n+  SET_TYPE_ALIGN (record, align ? align : orig_align);\n   TYPE_SIZE (record) = size ? size : orig_size;\n   TYPE_SIZE_UNIT (record)\n     = convert (sizetype,\n@@ -1650,7 +1650,7 @@ finish_fat_pointer_type (tree record_type, tree field_list)\n {\n   /* Make sure we can put it into a register.  */\n   if (STRICT_ALIGNMENT)\n-    TYPE_ALIGN (record_type) = MIN (BIGGEST_ALIGNMENT, 2 * POINTER_SIZE);\n+    SET_TYPE_ALIGN (record_type, MIN (BIGGEST_ALIGNMENT, 2 * POINTER_SIZE));\n \n   /* Show what it really is.  */\n   TYPE_FAT_POINTER_P (record_type) = 1;\n@@ -1697,7 +1697,8 @@ finish_record_type (tree record_type, tree field_list, int rep_level,\n      that just means some initializations; otherwise, layout the record.  */\n   if (rep_level > 0)\n     {\n-      TYPE_ALIGN (record_type) = MAX (BITS_PER_UNIT, TYPE_ALIGN (record_type));\n+      SET_TYPE_ALIGN (record_type, MAX (BITS_PER_UNIT,\n+\t\t\t\t\tTYPE_ALIGN (record_type)));\n \n       if (!had_size_unit)\n \tTYPE_SIZE_UNIT (record_type) = size_zero_node;\n@@ -1775,7 +1776,7 @@ finish_record_type (tree record_type, tree field_list, int rep_level,\n \t\t maximum alignment, if any.  */\n \t      if (TYPE_ALIGN (record_type) >= align)\n \t\t{\n-\t\t  DECL_ALIGN (field) = MAX (DECL_ALIGN (field), align);\n+\t\t  SET_DECL_ALIGN (field, MAX (DECL_ALIGN (field), align));\n \t\t  DECL_BIT_FIELD (field) = 0;\n \t\t}\n \t      else if (!had_align\n@@ -1784,8 +1785,8 @@ finish_record_type (tree record_type, tree field_list, int rep_level,\n \t\t       && (!TYPE_MAX_ALIGN (record_type)\n \t\t\t   || TYPE_MAX_ALIGN (record_type) >= align))\n \t\t{\n-\t\t  TYPE_ALIGN (record_type) = align;\n-\t\t  DECL_ALIGN (field) = MAX (DECL_ALIGN (field), align);\n+\t\t  SET_TYPE_ALIGN (record_type, align);\n+\t\t  SET_DECL_ALIGN (field, MAX (DECL_ALIGN (field), align));\n \t\t  DECL_BIT_FIELD (field) = 0;\n \t\t}\n \t    }\n@@ -1808,8 +1809,8 @@ finish_record_type (tree record_type, tree field_list, int rep_level,\n       /* A type must be as aligned as its most aligned field that is not\n \t a bit-field.  But this is already enforced by layout_type.  */\n       if (rep_level > 0 && !DECL_BIT_FIELD (field))\n-\tTYPE_ALIGN (record_type)\n-\t  = MAX (TYPE_ALIGN (record_type), DECL_ALIGN (field));\n+\tSET_TYPE_ALIGN (record_type,\n+\t\t\tMAX (TYPE_ALIGN (record_type), DECL_ALIGN (field)));\n \n       switch (code)\n \t{\n@@ -1980,7 +1981,7 @@ rest_of_record_type_compilation (tree record_type)\n \t= concat_name (orig_name, TREE_CODE (record_type) == QUAL_UNION_TYPE\n \t\t\t\t  ? \"XVU\" : \"XVE\");\n       TYPE_NAME (new_record_type) = new_name;\n-      TYPE_ALIGN (new_record_type) = BIGGEST_ALIGNMENT;\n+      SET_TYPE_ALIGN (new_record_type, BIGGEST_ALIGNMENT);\n       TYPE_STUB_DECL (new_record_type)\n \t= create_type_stub_decl (new_name, new_record_type);\n       DECL_IGNORED_P (TYPE_STUB_DECL (new_record_type))\n@@ -2072,7 +2073,7 @@ rest_of_record_type_compilation (tree record_type)\n \t      if (align != 0 && TYPE_ALIGN (field_type) > align)\n \t\t{\n \t\t  field_type = copy_node (field_type);\n-\t\t  TYPE_ALIGN (field_type) = align;\n+\t\t  SET_TYPE_ALIGN (field_type, align);\n \t\t}\n \t      var = true;\n \t    }\n@@ -2620,7 +2621,7 @@ create_field_decl (tree name, tree type, tree record_type, tree size, tree pos,\n \t\t || (!pos\n \t\t     && AGGREGATE_TYPE_P (type)\n \t\t     && aggregate_type_contains_array_p (type))))\n-    DECL_ALIGN (field_decl) = BITS_PER_UNIT;\n+    SET_DECL_ALIGN (field_decl, BITS_PER_UNIT);\n \n   /* If a size is specified, use it.  Otherwise, if the record type is packed\n      compute a size to use, which may differ from the object's natural size.\n@@ -2667,9 +2668,9 @@ create_field_decl (tree name, tree type, tree record_type, tree size, tree pos,\n \t{\n \t  if (TYPE_ALIGN (record_type) != 0\n \t      && TYPE_ALIGN (record_type) < TYPE_ALIGN (type))\n-\t    DECL_ALIGN (field_decl) = TYPE_ALIGN (record_type);\n+\t    SET_DECL_ALIGN (field_decl, TYPE_ALIGN (record_type));\n \t  else\n-\t    DECL_ALIGN (field_decl) = TYPE_ALIGN (type);\n+\t    SET_DECL_ALIGN (field_decl, TYPE_ALIGN (type));\n \t}\n     }\n \n@@ -2685,10 +2686,10 @@ create_field_decl (tree name, tree type, tree record_type, tree size, tree pos,\n \t : packed && TYPE_MODE (type) != BLKmode ? BITS_PER_UNIT : 0);\n \n     if (bit_align > DECL_ALIGN (field_decl))\n-      DECL_ALIGN (field_decl) = bit_align;\n+      SET_DECL_ALIGN (field_decl, bit_align);\n     else if (!bit_align && TYPE_ALIGN (type) > DECL_ALIGN (field_decl))\n       {\n-\tDECL_ALIGN (field_decl) = TYPE_ALIGN (type);\n+\tSET_DECL_ALIGN (field_decl, TYPE_ALIGN (type));\n \tDECL_USER_ALIGN (field_decl) = TYPE_USER_ALIGN (type);\n       }\n   }"}, {"sha": "7ae6903eb7e4aea5fa9266a6278570809b91340c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1,3 +1,8 @@\n+2016-04-18  Michael Matz  <matz@suse.de>\n+\n+\t* c-common.c (handle_aligned_attribute): Use SET_TYPE_ALIGN\n+\tand SET_DECL_ALIGN.\n+\n 2016-04-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-ada-spec.c (get_underlying_decl): Return the typedef, if any."}, {"sha": "cae2faf5c4f28060ecd0818c93f3babf9ed8878c", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -7837,7 +7837,7 @@ handle_aligned_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n       else\n \t*type = build_variant_type_copy (*type);\n \n-      TYPE_ALIGN (*type) = (1U << i) * BITS_PER_UNIT;\n+      SET_TYPE_ALIGN (*type, (1U << i) * BITS_PER_UNIT);\n       TYPE_USER_ALIGN (*type) = 1;\n     }\n   else if (! VAR_OR_FUNCTION_DECL_P (decl)\n@@ -7871,7 +7871,7 @@ handle_aligned_attribute (tree *node, tree ARG_UNUSED (name), tree args,\n     }\n   else\n     {\n-      DECL_ALIGN (decl) = (1U << i) * BITS_PER_UNIT;\n+      SET_DECL_ALIGN (decl, (1U << i) * BITS_PER_UNIT);\n       DECL_USER_ALIGN (decl) = 1;\n     }\n "}, {"sha": "b46df1f0a495e4a12be894539bff9044471327e8", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1,3 +1,8 @@\n+2016-04-18  Michael Matz  <matz@suse.de>\n+\n+\t* c-decl.c (merge_decls): Use SET_DECL_ALIGN and SET_TYPE_ALIGN.\n+\t(grokdeclarator, parser_xref_tag, finish_enum): Use SET_TYPE_ALIGN.\n+\n 2016-04-15  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/70671"}, {"sha": "f0c677b1cef1d3f284847323ae50f5afbb290175", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -2369,7 +2369,7 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n       if (TYPE_USER_ALIGN (tem))\n \t{\n \t  if (TYPE_ALIGN (tem) > TYPE_ALIGN (newtype))\n-\t    TYPE_ALIGN (newtype) = TYPE_ALIGN (tem);\n+\t    SET_TYPE_ALIGN (newtype, TYPE_ALIGN (tem));\n \t  TYPE_USER_ALIGN (newtype) = true;\n \t}\n \n@@ -2410,7 +2410,7 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n       DECL_MODE (newdecl) = DECL_MODE (olddecl);\n       if (DECL_ALIGN (olddecl) > DECL_ALIGN (newdecl))\n \t{\n-\t  DECL_ALIGN (newdecl) = DECL_ALIGN (olddecl);\n+\t  SET_DECL_ALIGN (newdecl, DECL_ALIGN (olddecl));\n \t  DECL_USER_ALIGN (newdecl) |= DECL_USER_ALIGN (olddecl);\n \t}\n     }\n@@ -6763,7 +6763,7 @@ grokdeclarator (const struct c_declarator *declarator,\n     /* Apply _Alignas specifiers.  */\n     if (alignas_align)\n       {\n-\tDECL_ALIGN (decl) = alignas_align * BITS_PER_UNIT;\n+\tSET_DECL_ALIGN (decl, alignas_align * BITS_PER_UNIT);\n \tDECL_USER_ALIGN (decl) = 1;\n       }\n \n@@ -7205,7 +7205,7 @@ parser_xref_tag (location_t loc, enum tree_code code, tree name)\n       /* Give the type a default layout like unsigned int\n \t to avoid crashing if it does not get defined.  */\n       SET_TYPE_MODE (ref, TYPE_MODE (unsigned_type_node));\n-      TYPE_ALIGN (ref) = TYPE_ALIGN (unsigned_type_node);\n+      SET_TYPE_ALIGN (ref, TYPE_ALIGN (unsigned_type_node));\n       TYPE_USER_ALIGN (ref) = 0;\n       TYPE_UNSIGNED (ref) = 1;\n       TYPE_PRECISION (ref) = TYPE_PRECISION (unsigned_type_node);\n@@ -8101,7 +8101,7 @@ finish_enum (tree enumtype, tree values, tree attributes)\n   TYPE_MIN_VALUE (enumtype) = TYPE_MIN_VALUE (tem);\n   TYPE_MAX_VALUE (enumtype) = TYPE_MAX_VALUE (tem);\n   TYPE_UNSIGNED (enumtype) = TYPE_UNSIGNED (tem);\n-  TYPE_ALIGN (enumtype) = TYPE_ALIGN (tem);\n+  SET_TYPE_ALIGN (enumtype, TYPE_ALIGN (tem));\n   TYPE_SIZE (enumtype) = 0;\n   TYPE_PRECISION (enumtype) = TYPE_PRECISION (tem);\n \n@@ -8163,7 +8163,7 @@ finish_enum (tree enumtype, tree values, tree attributes)\n       TYPE_SIZE_UNIT (tem) = TYPE_SIZE_UNIT (enumtype);\n       SET_TYPE_MODE (tem, TYPE_MODE (enumtype));\n       TYPE_PRECISION (tem) = TYPE_PRECISION (enumtype);\n-      TYPE_ALIGN (tem) = TYPE_ALIGN (enumtype);\n+      SET_TYPE_ALIGN (tem, TYPE_ALIGN (enumtype));\n       TYPE_USER_ALIGN (tem) = TYPE_USER_ALIGN (enumtype);\n       TYPE_UNSIGNED (tem) = TYPE_UNSIGNED (enumtype);\n       TYPE_LANG_SPECIFIC (tem) = TYPE_LANG_SPECIFIC (enumtype);"}, {"sha": "3ed2270e881792bc4e16e1bb91e960f7ff1e4e9e", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -369,7 +369,7 @@ align_local_variable (tree decl)\n   else\n     {\n       align = LOCAL_DECL_ALIGNMENT (decl);\n-      DECL_ALIGN (decl) = align;\n+      SET_DECL_ALIGN (decl, align);\n     }\n   return align / BITS_PER_UNIT;\n }\n@@ -1018,7 +1018,7 @@ expand_one_stack_var_at (tree decl, rtx base, unsigned base_align,\n \t alignment here, but (at least) the i386 port does exactly this\n \t via the MINIMUM_ALIGNMENT hook.  */\n \n-      DECL_ALIGN (decl) = align;\n+      SET_DECL_ALIGN (decl, align);\n       DECL_USER_ALIGN (decl) = 0;\n     }\n "}, {"sha": "4d9f6f1ad7efaedcecfff2361167ec842d18dff0", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -29981,8 +29981,8 @@ arm_relayout_function (tree fndecl)\n   if (!callee_tree)\n     callee_tree = target_option_default_node;\n \n-  DECL_ALIGN (fndecl) =\n-    FUNCTION_BOUNDARY_P (TREE_TARGET_OPTION (callee_tree)->x_target_flags);\n+  struct cl_target_option *opts = TREE_TARGET_OPTION (callee_tree);\n+  SET_DECL_ALIGN (fndecl, FUNCTION_BOUNDARY_P (opts->x_target_flags));\n }\n \n /* Inner function to process the attribute((target(...))), take an argument and"}, {"sha": "8de39e0a660668fccd7bc1257ce4d7fb55f35ede", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -911,7 +911,7 @@ avr_adjust_type_node (tree *node, machine_mode mode, int sat_p)\n   TYPE_IBIT (*node) = GET_MODE_IBIT (mode);\n   TYPE_FBIT (*node) = GET_MODE_FBIT (mode);\n   TYPE_PRECISION (*node) = GET_MODE_BITSIZE (mode);\n-  TYPE_ALIGN (*node) = 8;\n+  SET_TYPE_ALIGN (*node, 8);\n   SET_TYPE_MODE (*node, mode);\n \n   layout_type (*node);"}, {"sha": "399f231791de66ecb881e56acda315a9cf9aaa95", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -6304,7 +6304,7 @@ mips_std_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   if (boundary < TYPE_ALIGN (type))\n     {\n       type = build_variant_type_copy (type);\n-      TYPE_ALIGN (type) = boundary;\n+      SET_TYPE_ALIGN (type, boundary);\n     }\n \n   /* Compute the rounded size of the type.  */"}, {"sha": "2e2a02c0d1a534e1447010e2db1aec40bc19c47a", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1461,7 +1461,7 @@ msp430_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   if (boundary < TYPE_ALIGN (type))\n     {\n       type = build_variant_type_copy (type);\n-      TYPE_ALIGN (type) = boundary;\n+      SET_TYPE_ALIGN (type, boundary);\n     }\n \n   /* Compute the rounded size of the type.  */"}, {"sha": "c3757eb029e638e804fc5a937f26f6a2e5c7d4e6", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -3915,11 +3915,11 @@ spu_build_builtin_va_list (void)\n \t\t       FIELD_DECL, get_identifier (\"__skip\"), ptr_type_node);\n \n   DECL_FIELD_CONTEXT (f_args) = record;\n-  DECL_ALIGN (f_args) = 128;\n+  SET_DECL_ALIGN (f_args, 128);\n   DECL_USER_ALIGN (f_args) = 1;\n \n   DECL_FIELD_CONTEXT (f_skip) = record;\n-  DECL_ALIGN (f_skip) = 128;\n+  SET_DECL_ALIGN (f_skip, 128);\n   DECL_USER_ALIGN (f_skip) = 1;\n \n   TYPE_STUB_DECL (record) = type_decl;"}, {"sha": "67cc908cbf580cdf093ac0bf6d57e24d66439eb9", "filename": "gcc/coverage.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -751,7 +751,7 @@ build_var (tree fn_decl, tree type, int counter)\n   TREE_STATIC (var) = 1;\n   TREE_ADDRESSABLE (var) = 1;\n   DECL_NONALIASED (var) = 1;\n-  DECL_ALIGN (var) = TYPE_ALIGN (type);\n+  SET_DECL_ALIGN (var, TYPE_ALIGN (type));\n \n   return var;\n }"}, {"sha": "c50c6abd6160b7e4b2dc46c0dbf2e6b122780f45", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1,3 +1,22 @@\n+2016-04-18  Michael Matz  <matz@suse.de>\n+\n+\t* class.c (build_vtable): Use SET_DECL_ALIGN and SET_TYPE_ALIGN.\n+\t(layout_class_type): Ditto.\n+\t(build_base_field): Use SET_DECL_ALIGN.\n+\t(fixup_attribute_variants): Use SET_TYPE_ALIGN.\n+\t* decl.c (duplicate_decls): Use SET_DECL_ALIGN.\n+\t(record_unknown_type): Use SET_TYPE_ALIGN.\n+\t(cxx_init_decl_processing): Ditto.\n+\t(copy_type_enum): Ditto.\n+\t(grokfndecl): Use SET_DECL_ALIGN.\n+\t(copy_type_enum): Use SET_TYPE_ALIGN.\n+\t* pt.c (instantiate_class_template_1): Use SET_TYPE_ALIGN.\n+\t(tsubst): Ditto.\n+\t* tree.c (cp_build_qualified_type_real): Use SET_TYPE_ALIGN.\n+\t* lambda.c (maybe_add_lambda_conv_op): Use SET_DECL_ALIGN.\n+\t* method.c (implicitly_declare_fn): Use SET_DECL_ALIGN.\n+\t* rtti.c (emit_tinfo_decl): Ditto.\n+\n 2016-04-18  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/70690"}, {"sha": "2705e189afa17997ad8d6691c87dde3b2e1eb4d2", "filename": "gcc/cp/class.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -801,7 +801,7 @@ build_vtable (tree class_type, tree name, tree vtable_type)\n   TREE_STATIC (decl) = 1;\n   TREE_READONLY (decl) = 1;\n   DECL_VIRTUAL_P (decl) = 1;\n-  DECL_ALIGN (decl) = TARGET_VTABLE_ENTRY_ALIGN;\n+  SET_DECL_ALIGN (decl, TARGET_VTABLE_ENTRY_ALIGN);\n   DECL_USER_ALIGN (decl) = true;\n   DECL_VTABLE_OR_VTT_P (decl) = 1;\n   set_linkage_according_to_type (class_type, decl);\n@@ -2035,7 +2035,7 @@ fixup_attribute_variants (tree t)\n \tvalign = MAX (valign, TYPE_ALIGN (variants));\n       else\n \tTYPE_USER_ALIGN (variants) = user_align;\n-      TYPE_ALIGN (variants) = valign;\n+      SET_TYPE_ALIGN (variants, valign);\n       if (may_alias)\n \tfixup_may_alias (variants);\n     }\n@@ -4484,7 +4484,7 @@ build_base_field (record_layout_info rli, tree binfo,\n \t{\n \t  DECL_SIZE (decl) = CLASSTYPE_SIZE (basetype);\n \t  DECL_SIZE_UNIT (decl) = CLASSTYPE_SIZE_UNIT (basetype);\n-\t  DECL_ALIGN (decl) = CLASSTYPE_ALIGN (basetype);\n+\t  SET_DECL_ALIGN (decl, CLASSTYPE_ALIGN (basetype));\n \t  DECL_USER_ALIGN (decl) = CLASSTYPE_USER_ALIGN (basetype);\n \t  DECL_MODE (decl) = TYPE_MODE (basetype);\n \t  DECL_FIELD_IS_BASE (decl) = 1;\n@@ -6404,7 +6404,7 @@ layout_class_type (tree t, tree *virtuals_p)\n \t    }\n \n \t  DECL_SIZE (field) = TYPE_SIZE (integer_type);\n-\t  DECL_ALIGN (field) = TYPE_ALIGN (integer_type);\n+\t  SET_DECL_ALIGN (field, TYPE_ALIGN (integer_type));\n \t  DECL_USER_ALIGN (field) = TYPE_USER_ALIGN (integer_type);\n \t  layout_nonempty_base_or_field (rli, field, NULL_TREE,\n \t\t\t\t\t empty_base_offsets);\n@@ -6539,7 +6539,7 @@ layout_class_type (tree t, tree *virtuals_p)\n \t\t      size_binop (MULT_EXPR,\n \t\t\t\t  fold_convert (bitsizetype, eoc),\n \t\t\t\t  bitsize_int (BITS_PER_UNIT)));\n-      TYPE_ALIGN (base_t) = rli->record_align;\n+      SET_TYPE_ALIGN (base_t, rli->record_align);\n       TYPE_USER_ALIGN (base_t) = TYPE_USER_ALIGN (t);\n \n       /* Copy the fields from T.  */"}, {"sha": "461822ba16774d0729a0ebfc7df34ae764f40a78", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -2066,7 +2066,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n \t  if (TYPE_USER_ALIGN (tem))\n \t    {\n \t      if (TYPE_ALIGN (tem) > TYPE_ALIGN (newtype))\n-\t\tTYPE_ALIGN (newtype) = TYPE_ALIGN (tem);\n+\t\tSET_TYPE_ALIGN (newtype, TYPE_ALIGN (tem));\n \t      TYPE_USER_ALIGN (newtype) = true;\n \t    }\n \n@@ -2490,7 +2490,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n   /* Likewise for DECL_ALIGN, DECL_USER_ALIGN and DECL_PACKED.  */\n   if (DECL_ALIGN (olddecl) > DECL_ALIGN (newdecl))\n     {\n-      DECL_ALIGN (newdecl) = DECL_ALIGN (olddecl);\n+      SET_DECL_ALIGN (newdecl, DECL_ALIGN (olddecl));\n       DECL_USER_ALIGN (newdecl) |= DECL_USER_ALIGN (olddecl);\n     }\n   DECL_USER_ALIGN (olddecl) = DECL_USER_ALIGN (newdecl);\n@@ -3919,7 +3919,7 @@ record_unknown_type (tree type, const char* name)\n   DECL_IGNORED_P (decl) = 1;\n   TYPE_DECL_SUPPRESS_DEBUG (decl) = 1;\n   TYPE_SIZE (type) = TYPE_SIZE (void_type_node);\n-  TYPE_ALIGN (type) = 1;\n+  SET_TYPE_ALIGN (type, 1);\n   TYPE_USER_ALIGN (type) = 0;\n   SET_TYPE_MODE (type, TYPE_MODE (void_type_node));\n }\n@@ -4174,7 +4174,7 @@ cxx_init_decl_processing (void)\n     TYPE_UNSIGNED (nullptr_type_node) = 1;\n     TYPE_PRECISION (nullptr_type_node) = GET_MODE_BITSIZE (ptr_mode);\n     if (abi_version_at_least (9))\n-      TYPE_ALIGN (nullptr_type_node) = GET_MODE_ALIGNMENT (ptr_mode);\n+      SET_TYPE_ALIGN (nullptr_type_node, GET_MODE_ALIGNMENT (ptr_mode));\n     SET_TYPE_MODE (nullptr_type_node, ptr_mode);\n     record_builtin_type (RID_MAX, \"decltype(nullptr)\", nullptr_type_node);\n     nullptr_node = build_int_cst (nullptr_type_node, 0);\n@@ -7924,7 +7924,7 @@ grokfndecl (tree ctype,\n       parms = parm;\n \n       /* Allocate space to hold the vptr bit if needed.  */\n-      DECL_ALIGN (decl) = MINIMUM_METHOD_BOUNDARY;\n+      SET_DECL_ALIGN (decl, MINIMUM_METHOD_BOUNDARY);\n     }\n   DECL_ARGUMENTS (decl) = parms;\n   for (t = parms; t; t = DECL_CHAIN (t))\n@@ -13115,7 +13115,7 @@ copy_type_enum (tree dst, tree src)\n \tvalign = MAX (valign, TYPE_ALIGN (t));\n       else\n \tTYPE_USER_ALIGN (t) = TYPE_USER_ALIGN (src);\n-      TYPE_ALIGN (t) = valign;\n+      SET_TYPE_ALIGN (t, valign);\n       TYPE_UNSIGNED (t) = TYPE_UNSIGNED (src);\n     }\n }"}, {"sha": "374a78b1b4f1087097b463c7e27d9c862b7366d6", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1006,7 +1006,7 @@ maybe_add_lambda_conv_op (tree type)\n   tree convfn = build_lang_decl (FUNCTION_DECL, name, fntype);\n   tree fn = convfn;\n   DECL_SOURCE_LOCATION (fn) = DECL_SOURCE_LOCATION (callop);\n-  DECL_ALIGN (fn) = MINIMUM_METHOD_BOUNDARY;\n+  SET_DECL_ALIGN (fn, MINIMUM_METHOD_BOUNDARY);\n   SET_OVERLOADED_OPERATOR_CODE (fn, TYPE_EXPR);\n   grokclassfn (type, fn, NO_SPECIAL);\n   set_linkage_according_to_type (type, fn);"}, {"sha": "862451f249bf1daf625751c30af2625c7e08d5d9", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1865,7 +1865,7 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n       SET_OVERLOADED_OPERATOR_CODE (fn, NOP_EXPR);\n     }\n \n-  DECL_ALIGN (fn) = MINIMUM_METHOD_BOUNDARY;\n+  SET_DECL_ALIGN (fn, MINIMUM_METHOD_BOUNDARY);\n \n   /* Create the explicit arguments.  */\n   if (rhs_parm_type)"}, {"sha": "a6d56d147bb424f0fcc41c969ef7661160964e69", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -9856,7 +9856,7 @@ instantiate_class_template_1 (tree type)\n     DECL_SOURCE_LOCATION (typedecl);\n \n   TYPE_PACKED (type) = TYPE_PACKED (pattern);\n-  TYPE_ALIGN (type) = TYPE_ALIGN (pattern);\n+  SET_TYPE_ALIGN (type, TYPE_ALIGN (pattern));\n   TYPE_USER_ALIGN (type) = TYPE_USER_ALIGN (pattern);\n   TYPE_FOR_JAVA (type) = TYPE_FOR_JAVA (pattern); /* For libjava's JArray<T> */\n   if (ANON_AGGR_TYPE_P (pattern))\n@@ -13403,7 +13403,7 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \n \tif (TYPE_USER_ALIGN (t))\n \t  {\n-\t    TYPE_ALIGN (r) = TYPE_ALIGN (t);\n+\t    SET_TYPE_ALIGN (r, TYPE_ALIGN (t));\n \t    TYPE_USER_ALIGN (r) = 1;\n \t  }\n "}, {"sha": "43d5f15fa3f8035fef9f684129c1fc758df4665a", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1603,7 +1603,7 @@ emit_tinfo_decl (tree decl)\n       /* Avoid targets optionally bumping up the alignment to improve\n \t vector instruction accesses, tinfo are never accessed this way.  */\n #ifdef DATA_ABI_ALIGNMENT\n-      DECL_ALIGN (decl) = DATA_ABI_ALIGNMENT (decl, TYPE_ALIGN (TREE_TYPE (decl)));\n+      SET_DECL_ALIGN (decl, DATA_ABI_ALIGNMENT (decl, TYPE_ALIGN (TREE_TYPE (decl))));\n       DECL_USER_ALIGN (decl) = true;\n #endif\n       return true;"}, {"sha": "112c8c7a565e27f451694671e198d48e20d40e0a", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1074,7 +1074,7 @@ cp_build_qualified_type_real (tree type,\n \t    {\n \t      t = build_variant_type_copy (t);\n \t      TYPE_NAME (t) = TYPE_NAME (type);\n-\t      TYPE_ALIGN (t) = TYPE_ALIGN (type);\n+\t      SET_TYPE_ALIGN (t, TYPE_ALIGN (type));\n \t      TYPE_USER_ALIGN (t) = TYPE_USER_ALIGN (type);\n \t    }\n \t}"}, {"sha": "cf1df8cc6ecb9a7354a03f6b5fdc6b45b1b7c467", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -300,7 +300,7 @@ init_eh (void)\n #ifdef DONT_USE_BUILTIN_SETJMP\n       /* We don't know what the alignment requirements of the\n \t runtime's jmp_buf has.  Overestimate.  */\n-      DECL_ALIGN (f_jbuf) = BIGGEST_ALIGNMENT;\n+      SET_DECL_ALIGN (f_jbuf, BIGGEST_ALIGNMENT);\n       DECL_USER_ALIGN (f_jbuf) = 1;\n #endif\n       DECL_FIELD_CONTEXT (f_jbuf) = sjlj_fc_type_node;"}, {"sha": "248d3d7bf8288846bfa48225751c52a420b0f9ce", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -7712,7 +7712,7 @@ expand_expr_addr_expr_1 (tree exp, rtx target, machine_mode tmode,\n     {\n       inner = copy_node (inner);\n       TREE_TYPE (inner) = copy_node (TREE_TYPE (inner));\n-      TYPE_ALIGN (TREE_TYPE (inner)) = TYPE_ALIGN (TREE_TYPE (exp));\n+      SET_TYPE_ALIGN (TREE_TYPE (inner), TYPE_ALIGN (TREE_TYPE (exp)));\n       TYPE_USER_ALIGN (TREE_TYPE (inner)) = 1;\n     }\n   result = expand_expr_addr_expr_1 (inner, subtarget, tmode, modifier, as);"}, {"sha": "086a516b6bc652318c15b99fc6df82732dac58fa", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1,3 +1,9 @@\n+2016-04-18  Michael Matz  <matz@suse.de>\n+\n+\t* trans-io.c (gfc_build_io_library_fndecls): Use SET_TYPE_ALIGN.\n+\t* trans-common.c (build_common_decl): Use SET_DECL_ALIGN.\n+\t* trans-types.c (gfc_add_field_to_struct): Use SET_DECL_ALIGN.\n+\n 2016-04-13  Dominique d'Humieres  <dominiq@lps.ens.fr>\n \n \tPR fortran/67039"}, {"sha": "44787aebfdecb144234c4e2f8baa36b245b5947e", "filename": "gcc/fortran/trans-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ffortran%2Ftrans-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ffortran%2Ftrans-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-common.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -438,7 +438,7 @@ build_common_decl (gfc_common_head *com, tree union_type, bool is_init)\n       TREE_STATIC (decl) = 1;\n       DECL_IGNORED_P (decl) = 1;\n       if (!com->is_bind_c)\n-\tDECL_ALIGN (decl) = BIGGEST_ALIGNMENT;\n+\tSET_DECL_ALIGN (decl, BIGGEST_ALIGNMENT);\n       else\n         {\n \t  /* Do not set the alignment for bind(c) common blocks to\n@@ -449,7 +449,7 @@ build_common_decl (gfc_common_head *com, tree union_type, bool is_init)\n \t  tree field = NULL_TREE;\n \t  field = TYPE_FIELDS (TREE_TYPE (decl));\n \t  if (DECL_CHAIN (field) == NULL_TREE)\n-\t    DECL_ALIGN (decl) = TYPE_ALIGN (TREE_TYPE (field));\n+\t    SET_DECL_ALIGN (decl, TYPE_ALIGN (TREE_TYPE (field)));\n \t}\n       DECL_USER_ALIGN (decl) = 0;\n       GFC_DECL_COMMON_OR_EQUIV (decl) = 1;"}, {"sha": "7f64997886395eb2cd34028a7581169527b65a20", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -309,8 +309,8 @@ gfc_build_io_library_fndecls (void)\n      alignment that is at least as large as the needed alignment for those\n      types.  See the st_parameter_dt structure in libgfortran/io/io.h for\n      what really goes into this space.  */\n-  TYPE_ALIGN (types[IOPARM_type_pad]) = MAX (TYPE_ALIGN (pchar_type_node),\n-\t\t     TYPE_ALIGN (gfc_get_int_type (gfc_intio_kind)));\n+  SET_TYPE_ALIGN (types[IOPARM_type_pad], MAX (TYPE_ALIGN (pchar_type_node),\n+\t\t     TYPE_ALIGN (gfc_get_int_type (gfc_intio_kind))));\n \n   for (ptype = IOPARM_ptype_common; ptype < IOPARM_ptype_num; ptype++)\n     gfc_build_st_parameter ((enum ioparam_type) ptype, types);"}, {"sha": "dd945aa059af3708a09cd62ee8acc0e62d1afced", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -2275,7 +2275,7 @@ gfc_add_field_to_struct (tree context, tree name, tree type, tree **chain)\n   tree decl = gfc_add_field_to_struct_1 (context, name, type, chain);\n \n   DECL_INITIAL (decl) = 0;\n-  DECL_ALIGN (decl) = 0;\n+  SET_DECL_ALIGN (decl, 0);\n   DECL_USER_ALIGN (decl) = 0;\n \n   return decl;"}, {"sha": "43a80b428751f4ad73f9015f0cc38ec28520fbef", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -2925,7 +2925,7 @@ assign_parm_setup_block (struct assign_parm_data_all *all,\n   size_stored = CEIL_ROUND (size, UNITS_PER_WORD);\n   if (stack_parm == 0)\n     {\n-      DECL_ALIGN (parm) = MAX (DECL_ALIGN (parm), BITS_PER_WORD);\n+      SET_DECL_ALIGN (parm, MAX (DECL_ALIGN (parm), BITS_PER_WORD));\n       stack_parm = assign_stack_local (BLKmode, size_stored,\n \t\t\t\t       DECL_ALIGN (parm));\n       if (GET_MODE_SIZE (GET_MODE (entry_parm)) == size)"}, {"sha": "ed012ccfdc66cb89145ce3458b00a19fe9cc846d", "filename": "gcc/gimple-expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fgimple-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fgimple-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-expr.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -377,7 +377,7 @@ copy_var_decl (tree var, tree name, tree type)\n   DECL_ATTRIBUTES (copy) = DECL_ATTRIBUTES (var);\n   if (DECL_USER_ALIGN (var))\n     {\n-      DECL_ALIGN (copy) = DECL_ALIGN (var);\n+      SET_DECL_ALIGN (copy, DECL_ALIGN (var));\n       DECL_USER_ALIGN (copy) = 1;\n     }\n "}, {"sha": "f3b419b44a9dd41fd41ef4bf669fcf9715a30830", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1,3 +1,7 @@\n+2016-04-18  Michael Matz  <matz@suse.de>\n+\n+\t* go-gcc.cc (Gcc_backend::implicit_variable): Use SET_DECL_ALIGN.\n+\n 2016-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gofrontend/lex.cc: Spelling fixes - behaviour -> behavior and"}, {"sha": "1cb3242d5018968f7ef15e364f0d9b18251fd980", "filename": "gcc/go/go-gcc.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -2687,7 +2687,7 @@ Gcc_backend::implicit_variable(const std::string& name, Btype* type,\n     }\n   if (alignment != 0)\n     {\n-      DECL_ALIGN(decl) = alignment * BITS_PER_UNIT;\n+      SET_DECL_ALIGN(decl, alignment * BITS_PER_UNIT);\n       DECL_USER_ALIGN(decl) = 1;\n     }\n "}, {"sha": "7c20b060cc8058b742f82dc1dbb8bb27737011db", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1,3 +1,10 @@\n+2016-04-18  Michael Matz  <matz@suse.de>\n+\n+\t* class.c (add_method_1): Use SET_DECL_ALIGN.\n+\t(make_class_data): Ditto.\n+\t(emit_register_classes_in_jcr_section): Ditto.\n+\t* typeck.c (build_java_array_type): Ditto.\n+\n 2016-01-04  Jakub Jelinek  <jakub@redhat.com>\n \n \tUpdate copyright years."}, {"sha": "35874867170450365d9e5843ce7652f43576ff71", "filename": "gcc/java/class.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -773,7 +773,7 @@ add_method_1 (tree this_class, int access_flags, tree name, tree function_type)\n   TYPE_METHODS (this_class) = fndecl;\n \n   if (!(access_flags & ACC_STATIC))\n-    DECL_ALIGN (fndecl) = MINIMUM_METHOD_BOUNDARY;\n+    SET_DECL_ALIGN (fndecl, MINIMUM_METHOD_BOUNDARY);\n \n   /* Notice that this is a finalizer and update the class type\n      accordingly. This is used to optimize instance allocation. */\n@@ -2207,11 +2207,11 @@ make_class_data (tree type)\n   FINISH_RECORD_CONSTRUCTOR (cons, v2, class_type_node);\n \n   DECL_INITIAL (decl) = cons;\n-  \n+\n   /* Hash synchronization requires at least 64-bit alignment. */\n   if (flag_hash_synchronization && POINTER_SIZE < 64)\n-    DECL_ALIGN (decl) = 64; \n-  \n+    SET_DECL_ALIGN (decl, 64);\n+\n   if (flag_indirect_classes)\n     {\n       TREE_READONLY (decl) = 1;\n@@ -2790,7 +2790,7 @@ emit_register_classes_in_jcr_section (void)\n   cdecl = build_decl (UNKNOWN_LOCATION,\n \t\t      VAR_DECL, get_identifier (\"_Jv_JCR_SECTION_data\"),\n \t\t      class_array_type);\n-  DECL_ALIGN (cdecl) = POINTER_SIZE;\n+  SET_DECL_ALIGN (cdecl, POINTER_SIZE);\n   DECL_USER_ALIGN (cdecl) = 1;\n   DECL_INITIAL (cdecl) = build_constructor (class_array_type, init);\n   TREE_CONSTANT (DECL_INITIAL (cdecl)) = 1;"}, {"sha": "d2e3db6e4b390583bcfe56a3b020ded8224c462d", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -305,7 +305,7 @@ build_java_array_type (tree element_type, HOST_WIDE_INT length)\n \t\t      FIELD_DECL, get_identifier (\"data\"), atype);\n   DECL_CONTEXT (arfld) = t;\n   DECL_CHAIN (fld) = arfld;\n-  DECL_ALIGN (arfld) = TYPE_ALIGN (element_type);\n+  SET_DECL_ALIGN (arfld, TYPE_ALIGN (element_type));\n \n   /* We could layout_class, but that loads java.lang.Object prematurely.\n    * This is called by the parser, and it is a bad idea to do load_class"}, {"sha": "3b3f0f5c616b6b2c37ad0679c17d3b5817645a8b", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1,3 +1,7 @@\n+2016-04-18  Michael Matz  <matz@suse.de>\n+\n+\t* objc-act.c (objc_build_struct): Use SET_DECL_ALIGN.\n+\n 2016-02-12  Jakub Jelinek  <jakub@redhat.com>\n \n \t* objc-act.c: Spelling fixes - behaviour -> behavior and"}, {"sha": "48564572fa6af4d28f1528123188de6bd422ddfa", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -2115,7 +2115,7 @@ objc_build_struct (tree klass, tree fields, tree super_name)\n \t= size_binop (FLOOR_DIV_EXPR, convert (sizetype, DECL_SIZE (base)),\n \t\t      size_int (BITS_PER_UNIT));\n       DECL_ARTIFICIAL (base) = 1;\n-      DECL_ALIGN (base) = 1;\n+      SET_DECL_ALIGN (base, 1);\n       DECL_FIELD_CONTEXT (base) = s;\n #ifdef OBJCPLUS\n       DECL_FIELD_IS_BASE (base) = 1;"}, {"sha": "50ad68ece77324695a201ba992331e0e1135ca7a", "filename": "gcc/omp-low.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1445,12 +1445,12 @@ install_var_field (tree var, bool by_ref, int mask, omp_context *ctx,\n   DECL_ABSTRACT_ORIGIN (field) = var;\n   if (type == TREE_TYPE (var))\n     {\n-      DECL_ALIGN (field) = DECL_ALIGN (var);\n+      SET_DECL_ALIGN (field, DECL_ALIGN (var));\n       DECL_USER_ALIGN (field) = DECL_USER_ALIGN (var);\n       TREE_THIS_VOLATILE (field) = TREE_THIS_VOLATILE (var);\n     }\n   else\n-    DECL_ALIGN (field) = TYPE_ALIGN (type);\n+    SET_DECL_ALIGN (field, TYPE_ALIGN (type));\n \n   if ((mask & 3) == 3)\n     {\n@@ -1460,7 +1460,7 @@ install_var_field (tree var, bool by_ref, int mask, omp_context *ctx,\n \t  sfield = build_decl (DECL_SOURCE_LOCATION (var),\n \t\t\t       FIELD_DECL, DECL_NAME (var), type);\n \t  DECL_ABSTRACT_ORIGIN (sfield) = var;\n-\t  DECL_ALIGN (sfield) = DECL_ALIGN (field);\n+\t  SET_DECL_ALIGN (sfield, DECL_ALIGN (field));\n \t  DECL_USER_ALIGN (sfield) = DECL_USER_ALIGN (field);\n \t  TREE_THIS_VOLATILE (sfield) = TREE_THIS_VOLATILE (field);\n \t  insert_field_into_struct (ctx->srecord_type, sfield);\n@@ -2153,7 +2153,7 @@ scan_sharing_clauses (tree clauses, omp_context *ctx,\n \t\t  tree field\n \t\t    = build_decl (OMP_CLAUSE_LOCATION (c),\n \t\t\t\t  FIELD_DECL, NULL_TREE, ptr_type_node);\n-\t\t  DECL_ALIGN (field) = TYPE_ALIGN (ptr_type_node);\n+\t\t  SET_DECL_ALIGN (field, TYPE_ALIGN (ptr_type_node));\n \t\t  insert_field_into_struct (ctx->record_type, field);\n \t\t  splay_tree_insert (ctx->field_map, (splay_tree_key) decl,\n \t\t\t\t     (splay_tree_value) field);\n@@ -2804,18 +2804,18 @@ finish_taskreg_scan (omp_context *ctx)\n \t    TREE_TYPE (field) = build_pointer_type (TREE_TYPE (decl));\n \t    TREE_THIS_VOLATILE (field) = 0;\n \t    DECL_USER_ALIGN (field) = 0;\n-\t    DECL_ALIGN (field) = TYPE_ALIGN (TREE_TYPE (field));\n+\t    SET_DECL_ALIGN (field, TYPE_ALIGN (TREE_TYPE (field)));\n \t    if (TYPE_ALIGN (ctx->record_type) < DECL_ALIGN (field))\n-\t      TYPE_ALIGN (ctx->record_type) = DECL_ALIGN (field);\n+\t      SET_TYPE_ALIGN (ctx->record_type, DECL_ALIGN (field));\n \t    if (ctx->srecord_type)\n \t      {\n \t\ttree sfield = lookup_sfield (decl, ctx);\n \t\tTREE_TYPE (sfield) = TREE_TYPE (field);\n \t\tTREE_THIS_VOLATILE (sfield) = 0;\n \t\tDECL_USER_ALIGN (sfield) = 0;\n-\t\tDECL_ALIGN (sfield) = DECL_ALIGN (field);\n+\t\tSET_DECL_ALIGN (sfield, DECL_ALIGN (field));\n \t\tif (TYPE_ALIGN (ctx->srecord_type) < DECL_ALIGN (sfield))\n-\t\t  TYPE_ALIGN (ctx->srecord_type) = DECL_ALIGN (sfield);\n+\t\t  SET_TYPE_ALIGN (ctx->srecord_type, DECL_ALIGN (sfield));\n \t      }\n \t  }\n     }\n@@ -18486,8 +18486,8 @@ omp_finish_file (void)\n \t\t\t\t\t\t    num_vars * 2);\n       tree funcs_decl_type = build_array_type_nelts (pointer_sized_int_node,\n \t\t\t\t\t\t     num_funcs);\n-      TYPE_ALIGN (vars_decl_type) = TYPE_ALIGN (pointer_sized_int_node);\n-      TYPE_ALIGN (funcs_decl_type) = TYPE_ALIGN (pointer_sized_int_node);\n+      SET_TYPE_ALIGN (vars_decl_type, TYPE_ALIGN (pointer_sized_int_node));\n+      SET_TYPE_ALIGN (funcs_decl_type, TYPE_ALIGN (pointer_sized_int_node));\n       tree ctor_v = build_constructor (vars_decl_type, v_v);\n       tree ctor_f = build_constructor (funcs_decl_type, v_f);\n       TREE_CONSTANT (ctor_v) = TREE_CONSTANT (ctor_f) = 1;\n@@ -18503,8 +18503,8 @@ omp_finish_file (void)\n \t otherwise a joint table in a binary will contain padding between\n \t tables from multiple object files.  */\n       DECL_USER_ALIGN (funcs_decl) = DECL_USER_ALIGN (vars_decl) = 1;\n-      DECL_ALIGN (funcs_decl) = TYPE_ALIGN (funcs_decl_type);\n-      DECL_ALIGN (vars_decl) = TYPE_ALIGN (vars_decl_type);\n+      SET_DECL_ALIGN (funcs_decl, TYPE_ALIGN (funcs_decl_type));\n+      SET_DECL_ALIGN (vars_decl, TYPE_ALIGN (vars_decl_type));\n       DECL_INITIAL (funcs_decl) = ctor_f;\n       DECL_INITIAL (vars_decl) = ctor_v;\n       set_decl_section_name (funcs_decl, OFFLOAD_FUNC_TABLE_SECTION_NAME);"}, {"sha": "5bae23bb4e524314d09d7d6a18caf5fed0c01f2b", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -579,7 +579,7 @@ do_type_align (tree type, tree decl)\n {\n   if (TYPE_ALIGN (type) > DECL_ALIGN (decl))\n     {\n-      DECL_ALIGN (decl) = TYPE_ALIGN (type);\n+      SET_DECL_ALIGN (decl, TYPE_ALIGN (type));\n       if (TREE_CODE (decl) == FIELD_DECL)\n \tDECL_USER_ALIGN (decl) = TYPE_USER_ALIGN (type);\n     }\n@@ -672,7 +672,7 @@ layout_decl (tree decl, unsigned int known_align)\n #ifdef EMPTY_FIELD_BOUNDARY\n \t\t  if (EMPTY_FIELD_BOUNDARY > DECL_ALIGN (decl))\n \t\t    {\n-\t\t      DECL_ALIGN (decl) = EMPTY_FIELD_BOUNDARY;\n+\t\t      SET_DECL_ALIGN (decl, EMPTY_FIELD_BOUNDARY);\n \t\t      DECL_USER_ALIGN (decl) = 0;\n \t\t    }\n #endif\n@@ -694,7 +694,7 @@ layout_decl (tree decl, unsigned int known_align)\n \t\t  && !(xalign > BITS_PER_UNIT && DECL_PACKED (decl))\n \t\t  && (known_align == 0 || known_align >= xalign))\n \t\t{\n-\t\t  DECL_ALIGN (decl) = MAX (xalign, DECL_ALIGN (decl));\n+\t\t  SET_DECL_ALIGN (decl, MAX (xalign, DECL_ALIGN (decl)));\n \t\t  DECL_MODE (decl) = xmode;\n \t\t  DECL_BIT_FIELD (decl) = 0;\n \t\t}\n@@ -719,19 +719,19 @@ layout_decl (tree decl, unsigned int known_align)\n \t DECL_USER_ALIGN, so we need to check old_user_align instead.  */\n       if (packed_p\n \t  && !old_user_align)\n-\tDECL_ALIGN (decl) = MIN (DECL_ALIGN (decl), BITS_PER_UNIT);\n+\tSET_DECL_ALIGN (decl, MIN (DECL_ALIGN (decl), BITS_PER_UNIT));\n \n       if (! packed_p && ! DECL_USER_ALIGN (decl))\n \t{\n \t  /* Some targets (i.e. i386, VMS) limit struct field alignment\n \t     to a lower boundary than alignment of variables unless\n \t     it was overridden by attribute aligned.  */\n #ifdef BIGGEST_FIELD_ALIGNMENT\n-\t  DECL_ALIGN (decl)\n-\t    = MIN (DECL_ALIGN (decl), (unsigned) BIGGEST_FIELD_ALIGNMENT);\n+\t  SET_DECL_ALIGN (decl, MIN (DECL_ALIGN (decl),\n+\t\t\t\t     (unsigned) BIGGEST_FIELD_ALIGNMENT));\n #endif\n #ifdef ADJUST_FIELD_ALIGN\n-\t  DECL_ALIGN (decl) = ADJUST_FIELD_ALIGN (decl, DECL_ALIGN (decl));\n+\t  SET_DECL_ALIGN (decl, ADJUST_FIELD_ALIGN (decl, DECL_ALIGN (decl)));\n #endif\n \t}\n \n@@ -741,7 +741,7 @@ layout_decl (tree decl, unsigned int known_align)\n \tmfa = maximum_field_alignment;\n       /* Should this be controlled by DECL_USER_ALIGN, too?  */\n       if (mfa != 0)\n-\tDECL_ALIGN (decl) = MIN (DECL_ALIGN (decl), mfa);\n+\tSET_DECL_ALIGN (decl, MIN (DECL_ALIGN (decl), mfa));\n     }\n \n   /* Evaluate nonconstant size only once, either now or as soon as safe.  */\n@@ -791,7 +791,7 @@ relayout_decl (tree decl)\n   DECL_SIZE (decl) = DECL_SIZE_UNIT (decl) = 0;\n   DECL_MODE (decl) = VOIDmode;\n   if (!DECL_USER_ALIGN (decl))\n-    DECL_ALIGN (decl) = 0;\n+    SET_DECL_ALIGN (decl, 0);\n   SET_DECL_RTL (decl, 0);\n \n   layout_decl (decl, 0);\n@@ -1572,10 +1572,10 @@ finalize_record_size (record_layout_info rli)\n \n   /* Determine the desired alignment.  */\n #ifdef ROUND_TYPE_ALIGN\n-  TYPE_ALIGN (rli->t) = ROUND_TYPE_ALIGN (rli->t, TYPE_ALIGN (rli->t),\n-\t\t\t\t\t  rli->record_align);\n+  SET_TYPE_ALIGN (rli->t, ROUND_TYPE_ALIGN (rli->t, TYPE_ALIGN (rli->t),\n+\t\t\t\t\t    rli->record_align));\n #else\n-  TYPE_ALIGN (rli->t) = MAX (TYPE_ALIGN (rli->t), rli->record_align);\n+  SET_TYPE_ALIGN (rli->t, MAX (TYPE_ALIGN (rli->t), rli->record_align));\n #endif\n \n   /* Compute the size so far.  Be sure to allow for extra bits in the\n@@ -1732,15 +1732,15 @@ finalize_type_size (tree type)\n \t alignment of one of the fields.  */\n       if (mode_align >= TYPE_ALIGN (type))\n \t{\n-\t  TYPE_ALIGN (type) = mode_align;\n+\t  SET_TYPE_ALIGN (type, mode_align);\n \t  TYPE_USER_ALIGN (type) = 0;\n \t}\n     }\n \n   /* Do machine-dependent extra alignment.  */\n #ifdef ROUND_TYPE_ALIGN\n-  TYPE_ALIGN (type)\n-    = ROUND_TYPE_ALIGN (type, TYPE_ALIGN (type), BITS_PER_UNIT);\n+  SET_TYPE_ALIGN (type,\n+                  ROUND_TYPE_ALIGN (type, TYPE_ALIGN (type), BITS_PER_UNIT));\n #endif\n \n   /* If we failed to find a simple way to calculate the unit size\n@@ -1793,7 +1793,7 @@ finalize_type_size (tree type)\n \t    valign = MAX (valign, TYPE_ALIGN (variant));\n \t  else\n \t    TYPE_USER_ALIGN (variant) = user_align;\n-\t  TYPE_ALIGN (variant) = valign;\n+\t  SET_TYPE_ALIGN (variant, valign);\n \t  TYPE_PRECISION (variant) = precision;\n \t  SET_TYPE_MODE (variant, mode);\n \t}\n@@ -2087,7 +2087,7 @@ finish_builtin_struct (tree type, const char *name, tree fields,\n \n   if (align_type)\n     {\n-      TYPE_ALIGN (type) = TYPE_ALIGN (align_type);\n+      SET_TYPE_ALIGN (type, TYPE_ALIGN (align_type));\n       TYPE_USER_ALIGN (type) = TYPE_USER_ALIGN (align_type);\n     }\n \n@@ -2200,7 +2200,7 @@ layout_type (tree type)\n \t   Instead, query a target hook, defaulting to natural alignment.\n \t   This prevents ABI changes depending on whether or not native\n \t   vector modes are supported.  */\n-\tTYPE_ALIGN (type) = targetm.vector_alignment (type);\n+\tSET_TYPE_ALIGN (type, targetm.vector_alignment (type));\n \n \t/* However, if the underlying mode requires a bigger alignment than\n \t   what the target hook provides, we cannot use the mode.  For now,\n@@ -2212,7 +2212,7 @@ layout_type (tree type)\n \n     case VOID_TYPE:\n       /* This is an incomplete type and so doesn't have a size.  */\n-      TYPE_ALIGN (type) = 1;\n+      SET_TYPE_ALIGN (type, 1);\n       TYPE_USER_ALIGN (type) = 0;\n       SET_TYPE_MODE (type, VOIDmode);\n       break;\n@@ -2337,7 +2337,7 @@ layout_type (tree type)\n #else\n \talign = MAX (align, BITS_PER_UNIT);\n #endif\n-\tTYPE_ALIGN (type) = align;\n+\tSET_TYPE_ALIGN (type, align);\n \tSET_TYPE_MODE (type, BLKmode);\n \tif (TYPE_SIZE (type) != 0\n \t    && ! targetm.member_type_forces_blk (type, VOIDmode)\n@@ -2609,13 +2609,13 @@ initialize_sizetypes (void)\n \n   /* Now layout both types manually.  */\n   SET_TYPE_MODE (sizetype, smallest_mode_for_size (precision, MODE_INT));\n-  TYPE_ALIGN (sizetype) = GET_MODE_ALIGNMENT (TYPE_MODE (sizetype));\n+  SET_TYPE_ALIGN (sizetype, GET_MODE_ALIGNMENT (TYPE_MODE (sizetype)));\n   TYPE_SIZE (sizetype) = bitsize_int (precision);\n   TYPE_SIZE_UNIT (sizetype) = size_int (GET_MODE_SIZE (TYPE_MODE (sizetype)));\n   set_min_and_max_values_for_integral_type (sizetype, precision, UNSIGNED);\n \n   SET_TYPE_MODE (bitsizetype, smallest_mode_for_size (bprecision, MODE_INT));\n-  TYPE_ALIGN (bitsizetype) = GET_MODE_ALIGNMENT (TYPE_MODE (bitsizetype));\n+  SET_TYPE_ALIGN (bitsizetype, GET_MODE_ALIGNMENT (TYPE_MODE (bitsizetype)));\n   TYPE_SIZE (bitsizetype) = bitsize_int (bprecision);\n   TYPE_SIZE_UNIT (bitsizetype)\n     = size_int (GET_MODE_SIZE (TYPE_MODE (bitsizetype)));"}, {"sha": "9bf33273fe131d1d321c3618ee5cbe211dae55c9", "filename": "gcc/symtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymtab.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -2153,7 +2153,7 @@ increase_alignment_1 (symtab_node *n, void *v)\n   if (DECL_ALIGN (n->decl) < align\n       && n->can_increase_alignment_p ())\n     {\n-      DECL_ALIGN (n->decl) = align;\n+      SET_DECL_ALIGN (n->decl, align);\n       DECL_USER_ALIGN (n->decl) = 1;\n     }\n   return false;"}, {"sha": "6b4601b719a9da4c463adaadbd07b3b401ba1ac3", "filename": "gcc/targhooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1856,7 +1856,7 @@ std_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n   if (boundary < TYPE_ALIGN (type))\n     {\n       type = build_variant_type_copy (type);\n-      TYPE_ALIGN (type) = boundary;\n+      SET_TYPE_ALIGN (type, boundary);\n     }\n \n   /* Compute the rounded size of the type.  */"}, {"sha": "0d48ff59d52392ac004c14842bc46ad2bf491ce1", "filename": "gcc/tree-core.h", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1441,7 +1441,13 @@ struct GTY(()) tree_type_common {\n   unsigned lang_flag_5 : 1;\n   unsigned lang_flag_6 : 1;\n \n-  unsigned int align;\n+  /* TYPE_ALIGN in log2; this has to be large enough to hold values\n+     of the maximum of BIGGEST_ALIGNMENT and MAX_OFILE_ALIGNMENT,\n+     the latter being usually the larger.  For ELF it is 8<<28,\n+     so we need to store the value 32 (not 31, as we need the zero\n+     as well), hence six bits.  */\n+  unsigned align : 6;\n+  unsigned spare : 26;\n   alias_set_type alias_set;\n   tree pointer_to;\n   tree reference_to;\n@@ -1542,12 +1548,12 @@ struct GTY(()) tree_decl_common {\n   unsigned decl_nonshareable_flag : 1;\n \n   /* DECL_OFFSET_ALIGN, used only for FIELD_DECLs.  */\n-  unsigned int off_align : 8;\n-\n-  /* 24 bits unused.  */\n+  unsigned int off_align : 6;\n \n   /* DECL_ALIGN.  It should have the same size as TYPE_ALIGN.  */\n-  unsigned int align;\n+  unsigned int align : 6;\n+\n+  /* 20 bits unused.  */\n \n   /* UID for points-to sets, stable over copying from inlining.  */\n   unsigned int pt_uid;"}, {"sha": "25a92aaa04b4b1427551c5b831144ab00b4cd628", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -192,7 +192,7 @@ insert_field_into_struct (tree type, tree field)\n \n   /* Set correct alignment for frame struct type.  */\n   if (TYPE_ALIGN (type) < DECL_ALIGN (field))\n-    TYPE_ALIGN (type) = DECL_ALIGN (field);\n+    SET_TYPE_ALIGN (type, DECL_ALIGN (field));\n }\n \n /* Build or return the RECORD_TYPE that describes the frame state that is\n@@ -275,14 +275,14 @@ lookup_field_for_decl (struct nesting_info *info, tree decl,\n       if (use_pointer_in_frame (decl))\n \t{\n \t  TREE_TYPE (field) = build_pointer_type (TREE_TYPE (decl));\n-\t  DECL_ALIGN (field) = TYPE_ALIGN (TREE_TYPE (field));\n+\t  SET_DECL_ALIGN (field, TYPE_ALIGN (TREE_TYPE (field)));\n \t  DECL_NONADDRESSABLE_P (field) = 1;\n \t}\n       else\n \t{\n           TREE_TYPE (field) = TREE_TYPE (decl);\n           DECL_SOURCE_LOCATION (field) = DECL_SOURCE_LOCATION (decl);\n-          DECL_ALIGN (field) = DECL_ALIGN (decl);\n+          SET_DECL_ALIGN (field, DECL_ALIGN (decl));\n           DECL_USER_ALIGN (field) = DECL_USER_ALIGN (decl);\n           TREE_ADDRESSABLE (field) = TREE_ADDRESSABLE (decl);\n           DECL_NONADDRESSABLE_P (field) = !TREE_ADDRESSABLE (decl);\n@@ -361,7 +361,7 @@ get_chain_field (struct nesting_info *info)\n       field = make_node (FIELD_DECL);\n       DECL_NAME (field) = get_identifier (\"__chain\");\n       TREE_TYPE (field) = type;\n-      DECL_ALIGN (field) = TYPE_ALIGN (type);\n+      SET_DECL_ALIGN (field, TYPE_ALIGN (type));\n       DECL_NONADDRESSABLE_P (field) = 1;\n \n       insert_field_into_struct (get_frame_type (info), field);\n@@ -474,7 +474,7 @@ get_trampoline_type (struct nesting_info *info)\n   t = build_array_type (char_type_node, t);\n   t = build_decl (DECL_SOURCE_LOCATION (info->context),\n \t\t  FIELD_DECL, get_identifier (\"__data\"), t);\n-  DECL_ALIGN (t) = align;\n+  SET_DECL_ALIGN (t, align);\n   DECL_USER_ALIGN (t) = 1;\n \n   trampoline_type = make_node (RECORD_TYPE);\n@@ -548,7 +548,7 @@ get_nl_goto_field (struct nesting_info *info)\n       field = make_node (FIELD_DECL);\n       DECL_NAME (field) = get_identifier (\"__nl_goto_buf\");\n       TREE_TYPE (field) = type;\n-      DECL_ALIGN (field) = TYPE_ALIGN (type);\n+      SET_DECL_ALIGN (field, TYPE_ALIGN (type));\n       TREE_ADDRESSABLE (field) = 1;\n \n       insert_field_into_struct (get_frame_type (info), field);"}, {"sha": "2568a415eea4ce913342b8fca55496db93a4ecd7", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -2114,7 +2114,7 @@ fold_builtin_alloca_with_align (gimple *stmt)\n   n_elem = size * 8 / BITS_PER_UNIT;\n   array_type = build_array_type_nelts (elem_type, n_elem);\n   var = create_tmp_var (array_type);\n-  DECL_ALIGN (var) = TREE_INT_CST_LOW (gimple_call_arg (stmt, 1));\n+  SET_DECL_ALIGN (var, TREE_INT_CST_LOW (gimple_call_arg (stmt, 1)));\n   {\n     struct ptr_info_def *pi = SSA_NAME_PTR_INFO (lhs);\n     if (pi != NULL && !pi->pt.anything)"}, {"sha": "2ad2f9212fa163116e2e9b5f88295309c2d7e994", "filename": "gcc/tree-streamer-in.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ftree-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ftree-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-in.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -230,10 +230,10 @@ unpack_ts_decl_common_value_fields (struct bitpack_d *bp, tree expr)\n   DECL_PRESERVE_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_EXTERNAL (expr) = (unsigned) bp_unpack_value (bp, 1);\n   DECL_GIMPLE_REG_P (expr) = (unsigned) bp_unpack_value (bp, 1);\n-  DECL_ALIGN (expr) = (unsigned) bp_unpack_var_len_unsigned (bp);\n+  SET_DECL_ALIGN (expr, (unsigned) bp_unpack_var_len_unsigned (bp));\n #ifdef ACCEL_COMPILER\n   if (DECL_ALIGN (expr) > targetm.absolute_biggest_alignment)\n-    DECL_ALIGN (expr) = targetm.absolute_biggest_alignment;\n+    SET_DECL_ALIGN (expr, targetm.absolute_biggest_alignment);\n #endif\n   if (TREE_CODE (expr) == LABEL_DECL)\n     {\n@@ -378,10 +378,10 @@ unpack_ts_type_common_value_fields (struct bitpack_d *bp, tree expr)\n   else if (TREE_CODE (expr) == ARRAY_TYPE)\n     TYPE_NONALIASED_COMPONENT (expr) = (unsigned) bp_unpack_value (bp, 1);\n   TYPE_PRECISION (expr) = bp_unpack_var_len_unsigned (bp);\n-  TYPE_ALIGN (expr) = bp_unpack_var_len_unsigned (bp);\n+  SET_TYPE_ALIGN (expr, bp_unpack_var_len_unsigned (bp));\n #ifdef ACCEL_COMPILER\n   if (TYPE_ALIGN (expr) > targetm.absolute_biggest_alignment)\n-    TYPE_ALIGN (expr) = targetm.absolute_biggest_alignment;\n+    SET_TYPE_ALIGN (expr, targetm.absolute_biggest_alignment);\n #endif\n }\n "}, {"sha": "5f054c53447711afa3bd4eb56348ca8ff4ce25e8", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -5131,7 +5131,7 @@ ensure_base_align (stmt_vec_info stmt_info, struct data_reference *dr)\n \tsymtab_node::get (base_decl)->increase_alignment (TYPE_ALIGN (vectype));\n       else\n \t{\n-          DECL_ALIGN (base_decl) = TYPE_ALIGN (vectype);\n+          SET_DECL_ALIGN (base_decl, TYPE_ALIGN (vectype));\n           DECL_USER_ALIGN (base_decl) = 1;\n \t}\n       DR_VECT_AUX (dr)->base_misaligned = false;"}, {"sha": "6de46a84695fccbb3d93ee2fc97aeab998a9857f", "filename": "gcc/tree.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1020,11 +1020,11 @@ make_node_stat (enum tree_code code MEM_STAT_DECL)\n \t{\n \t  if (code == FUNCTION_DECL)\n \t    {\n-\t      DECL_ALIGN (t) = FUNCTION_BOUNDARY;\n+\t      SET_DECL_ALIGN (t, FUNCTION_BOUNDARY);\n \t      DECL_MODE (t) = FUNCTION_MODE;\n \t    }\n \t  else\n-\t    DECL_ALIGN (t) = 1;\n+\t    SET_DECL_ALIGN (t, 1);\n \t}\n       DECL_SOURCE_LOCATION (t) = input_location;\n       if (TREE_CODE (t) == DEBUG_EXPR_DECL)\n@@ -1041,7 +1041,7 @@ make_node_stat (enum tree_code code MEM_STAT_DECL)\n \n     case tcc_type:\n       TYPE_UID (t) = next_type_uid++;\n-      TYPE_ALIGN (t) = BITS_PER_UNIT;\n+      SET_TYPE_ALIGN (t, BITS_PER_UNIT);\n       TYPE_USER_ALIGN (t) = 0;\n       TYPE_MAIN_VARIANT (t) = t;\n       TYPE_CANONICAL (t) = t;\n@@ -6646,7 +6646,7 @@ build_qualified_type (tree type, int type_quals)\n \t      /* Ensure the alignment of this type is compatible with\n \t\t the required alignment of the atomic type.  */\n \t      if (TYPE_ALIGN (atomic_type) > TYPE_ALIGN (t))\n-\t\tTYPE_ALIGN (t) = TYPE_ALIGN (atomic_type);\n+\t\tSET_TYPE_ALIGN (t, TYPE_ALIGN (atomic_type));\n \t    }\n \t}\n \n@@ -6685,7 +6685,7 @@ build_aligned_type (tree type, unsigned int align)\n       return t;\n \n   t = build_variant_type_copy (type);\n-  TYPE_ALIGN (t) = align;\n+  SET_TYPE_ALIGN (t, align);\n \n   return t;\n }\n@@ -8135,7 +8135,7 @@ build_range_type_1 (tree type, tree lowval, tree highval, bool shared)\n   SET_TYPE_MODE (itype, TYPE_MODE (type));\n   TYPE_SIZE (itype) = TYPE_SIZE (type);\n   TYPE_SIZE_UNIT (itype) = TYPE_SIZE_UNIT (type);\n-  TYPE_ALIGN (itype) = TYPE_ALIGN (type);\n+  SET_TYPE_ALIGN (itype, TYPE_ALIGN (type));\n   TYPE_USER_ALIGN (itype) = TYPE_USER_ALIGN (type);\n \n   if (!shared)\n@@ -10036,7 +10036,7 @@ build_atomic_base (tree type, unsigned int align)\n   set_type_quals (t, TYPE_QUAL_ATOMIC);\n \n   if (align)\n-    TYPE_ALIGN (t) = align;\n+    SET_TYPE_ALIGN (t, align);\n \n   return t;\n }\n@@ -10185,7 +10185,7 @@ build_common_tree_nodes (bool signed_char)\n \n   /* We are not going to have real types in C with less than byte alignment,\n      so we might as well not have any types that claim to have it.  */\n-  TYPE_ALIGN (void_type_node) = BITS_PER_UNIT;\n+  SET_TYPE_ALIGN (void_type_node, BITS_PER_UNIT);\n   TYPE_USER_ALIGN (void_type_node) = 0;\n \n   void_node = make_node (VOID_CST);"}, {"sha": "33833a7abe65322bdb14457cf3e7412d1df272f8", "filename": "gcc/tree.h", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -916,10 +916,7 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n    of this type is aligned at least to the alignment of the type, even if it\n    doesn't appear that it is.  We see this, for example, in object-oriented\n    languages where a tag field may show this is an object of a more-aligned\n-   variant of the more generic type.\n-\n-   In an SSA_NAME node, nonzero if the SSA_NAME node is on the SSA_NAME\n-   freelist.  */\n+   variant of the more generic type.  */\n #define TYPE_ALIGN_OK(NODE) (TYPE_CHECK (NODE)->base.nothrow_flag)\n \n /* Used in classes in C++.  */\n@@ -1865,8 +1862,15 @@ extern machine_mode element_mode (const_tree t);\n #define TYPE_ATTRIBUTES(NODE) (TYPE_CHECK (NODE)->type_common.attributes)\n \n /* The alignment necessary for objects of this type.\n-   The value is an int, measured in bits.  */\n-#define TYPE_ALIGN(NODE) (TYPE_CHECK (NODE)->type_common.align)\n+   The value is an int, measured in bits and must be a power of two.\n+   We support also an \"alignement\" of zero.  */\n+#define TYPE_ALIGN(NODE) \\\n+    (TYPE_CHECK (NODE)->type_common.align \\\n+     ? ((unsigned)1) << ((NODE)->type_common.align - 1) : 0)\n+\n+/* Specify that TYPE_ALIGN(NODE) is X.  */\n+#define SET_TYPE_ALIGN(NODE, X) \\\n+    (TYPE_CHECK (NODE)->type_common.align = ffs_hwi (X))\n \n /* 1 if the alignment for this type was requested by \"aligned\" attribute,\n    0 if it is the default for this type.  */\n@@ -2306,8 +2310,16 @@ extern machine_mode element_mode (const_tree t);\n #define DECL_SIZE(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.size)\n /* Likewise for the size in bytes.  */\n #define DECL_SIZE_UNIT(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.size_unit)\n-/* Holds the alignment required for the datum, in bits.  */\n-#define DECL_ALIGN(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.align)\n+/* Returns the alignment required for the datum, in bits.  It must\n+   be a power of two, but an \"alignment\" of zero is supported\n+   (e.g. as \"uninitialized\" sentinel).  */\n+#define DECL_ALIGN(NODE) \\\n+    (DECL_COMMON_CHECK (NODE)->decl_common.align \\\n+     ? ((unsigned)1) << ((NODE)->decl_common.align - 1) : 0)\n+/* Specify that DECL_ALIGN(NODE) is X.  */\n+#define SET_DECL_ALIGN(NODE, X) \\\n+    (DECL_COMMON_CHECK (NODE)->decl_common.align = ffs_hwi (X))\n+\n /* The alignment of NODE, in bytes.  */\n #define DECL_ALIGN_UNIT(NODE) (DECL_ALIGN (NODE) / BITS_PER_UNIT)\n /* Set if the alignment of this DECL has been set by the user, for\n@@ -2510,7 +2522,7 @@ extern void decl_value_expr_insert (tree, tree);\n #define DECL_OFFSET_ALIGN(NODE) \\\n   (((unsigned HOST_WIDE_INT)1) << FIELD_DECL_CHECK (NODE)->decl_common.off_align)\n \n-/* Specify that DECL_ALIGN(NODE) is a multiple of X.  */\n+/* Specify that DECL_OFFSET_ALIGN(NODE) is X.  */\n #define SET_DECL_OFFSET_ALIGN(NODE, X) \\\n   (FIELD_DECL_CHECK (NODE)->decl_common.off_align = ffs_hwi (X) - 1)\n "}, {"sha": "d71defac590f04adb21b21abed8e5c41e1fa1bba", "filename": "gcc/varasm.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1053,7 +1053,7 @@ align_variable (tree decl, bool dont_output_data)\n \n   /* Reset the alignment in case we have made it tighter, so we can benefit\n      from it in get_pointer_alignment.  */\n-  DECL_ALIGN (decl) = align;\n+  SET_DECL_ALIGN (decl, align);\n }\n \n /* Return DECL_ALIGN (decl), possibly increased for optimization purposes\n@@ -2187,8 +2187,8 @@ assemble_variable (tree decl, int top_level ATTRIBUTE_UNUSED,\n       && asan_protect_global (decl))\n     {\n       asan_protected = true;\n-      DECL_ALIGN (decl) = MAX (DECL_ALIGN (decl), \n-                               ASAN_RED_ZONE_SIZE * BITS_PER_UNIT);\n+      SET_DECL_ALIGN (decl, MAX (DECL_ALIGN (decl),\n+\t\t\t\t ASAN_RED_ZONE_SIZE * BITS_PER_UNIT));\n     }\n \n   set_mem_align (decl_rtl, DECL_ALIGN (decl));\n@@ -3249,7 +3249,7 @@ build_constant_desc (tree exp)\n      architectures so use DATA_ALIGNMENT as well, except for strings.  */\n   if (TREE_CODE (exp) == STRING_CST)\n     {\n-      DECL_ALIGN (decl) = CONSTANT_ALIGNMENT (exp, DECL_ALIGN (decl));\n+      SET_DECL_ALIGN (decl, CONSTANT_ALIGNMENT (exp, DECL_ALIGN (decl)));\n     }\n   else\n     align_variable (decl, 0);\n@@ -3404,8 +3404,8 @@ output_constant_def_contents (rtx symbol)\n       && asan_protect_global (exp))\n     {\n       asan_protected = true;\n-      DECL_ALIGN (decl) = MAX (DECL_ALIGN (decl),\n-\t\t\t       ASAN_RED_ZONE_SIZE * BITS_PER_UNIT);\n+      SET_DECL_ALIGN (decl, MAX (DECL_ALIGN (decl),\n+\t\t\t\t ASAN_RED_ZONE_SIZE * BITS_PER_UNIT));\n     }\n \n   /* If the constant is part of an object block, make sure that the"}, {"sha": "1ce7671b201ddfbf62471f04aaa92440f1c25515", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -1,3 +1,7 @@\n+2016-04-18  Michael Matz  <matz@suse.de>\n+\n+\t* plugin.cc (plugin_finish_record_or_union): Use SET_TYPE_ALIGN.\n+\n 2016-04-11  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR bootstrap/70173\n@@ -60,7 +64,7 @@\n \t* configure.ac (libcc1_cv_lib_sockets): Check for -lsocket -lnsl.\n \t* configure: Regenerate.\n \t* connection.cc: Include <string.h>.\n-        * libcc1.cc (libcc1_compile): Use AF_UNIX instead of AF_LOCAL.\n+\t* libcc1.cc (libcc1_compile): Use AF_UNIX instead of AF_LOCAL.\n \n 2014-11-11  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n "}, {"sha": "44d0d607022d6e9bc86154d2ba8fc0f61ade4823", "filename": "libcc1/plugin.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe37c7afd16ae44daf4256d6bf7bd630382989e4/libcc1%2Fplugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe37c7afd16ae44daf4256d6bf7bd630382989e4/libcc1%2Fplugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fplugin.cc?ref=fe37c7afd16ae44daf4256d6bf7bd630382989e4", "patch": "@@ -553,8 +553,8 @@ plugin_finish_record_or_union (cc1_plugin::connection *,\n     {\n       // FIXME there's no way to get this from DWARF,\n       // or even, it seems, a particularly good way to deduce it.\n-      TYPE_ALIGN (record_or_union_type)\n-\t= TYPE_PRECISION (pointer_sized_int_node);\n+      SET_TYPE_ALIGN (record_or_union_type,\n+\t\t      TYPE_PRECISION (pointer_sized_int_node));\n \n       TYPE_SIZE (record_or_union_type) = bitsize_int (size_in_bytes\n \t\t\t\t\t\t      * BITS_PER_UNIT);"}]}