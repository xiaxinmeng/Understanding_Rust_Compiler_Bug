{"sha": "40cae311f5c7317fcc247e334517fb8c431e973f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDBjYWUzMTFmNWM3MzE3ZmNjMjQ3ZTMzNDUxN2ZiOGM0MzFlOTczZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-08-02T23:08:49Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-08-02T23:08:49Z"}, "message": "m32r.c (m32r_setup_incoming_varargs): Use get_varargs_alias_set for the register spill block.\n\n        * m32r.c (m32r_setup_incoming_varargs): Use get_varargs_alias_set\n        for the register spill block.\n        (m32r_va_arg): New.\n        * m32r.h (EXPAND_BUILTIN_VA_ARG): New.\n        (EXPAND_BUILTIN_SAVEREGS): Delete #if 0 code.\n\n        * m32r.h (INT8_P): Don't short-cut test with (unsigned).\n        (INT16_P, CMP_INT16_P, UINT16_P): Likewise.\n        (UPPER16_P, UINT24_P, INT32_P, UINT5_P): Likewise.\n\nFrom-SVN: r28417", "tree": {"sha": "5aea2a7b14abd6c02f35f847b9bc8e502152e9f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5aea2a7b14abd6c02f35f847b9bc8e502152e9f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/40cae311f5c7317fcc247e334517fb8c431e973f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40cae311f5c7317fcc247e334517fb8c431e973f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40cae311f5c7317fcc247e334517fb8c431e973f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40cae311f5c7317fcc247e334517fb8c431e973f/comments", "author": null, "committer": null, "parents": [{"sha": "247cfc5c36023e832c05102695b1c4b020294eb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/247cfc5c36023e832c05102695b1c4b020294eb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/247cfc5c36023e832c05102695b1c4b020294eb1"}], "stats": {"total": 117, "additions": 92, "deletions": 25}, "files": [{"sha": "840602bda913086e4d9c16782ec50210aad23fa7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40cae311f5c7317fcc247e334517fb8c431e973f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40cae311f5c7317fcc247e334517fb8c431e973f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=40cae311f5c7317fcc247e334517fb8c431e973f", "patch": "@@ -1,3 +1,15 @@\n+1999-08-02  Richard Henderson  <rth@cygnus.com>\n+\n+\t* m32r.c (m32r_setup_incoming_varargs): Use get_varargs_alias_set\n+\tfor the register spill block.\n+\t(m32r_va_arg): New.\n+\t* m32r.h (EXPAND_BUILTIN_VA_ARG): New.\n+\t(EXPAND_BUILTIN_SAVEREGS): Delete #if 0 code.\n+\n+\t* m32r.h (INT8_P): Don't short-cut test with (unsigned).\n+\t(INT16_P, CMP_INT16_P, UINT16_P): Likewise.\n+\t(UPPER16_P, UINT24_P, INT32_P, UINT5_P): Likewise.\n+\n 1999-08-02  Jakub Jelinek  <jj@ultra.linux.cz>\n \n \t* config/sparc/linux.h: Define WCHAR_TYPE as \"int\" and undef"}, {"sha": "6dc5ff43c6a5b0be6e2618d3fa18b34b7c00b5aa", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40cae311f5c7317fcc247e334517fb8c431e973f/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40cae311f5c7317fcc247e334517fb8c431e973f/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=40cae311f5c7317fcc247e334517fb8c431e973f", "patch": "@@ -1338,12 +1338,75 @@ m32r_setup_incoming_varargs (cum, int_mode, type, pretend_size, no_rtl)\n       regblock = gen_rtx (MEM, BLKmode,\n \t\t\t  plus_constant (arg_pointer_rtx,\n \t\t\t\t\t FIRST_PARM_OFFSET (0)));\n+      MEM_ALIAS_SET (regblock) = get_varargs_alias_set ();\n       move_block_from_reg (first_reg_offset, regblock,\n \t\t\t   size, size * UNITS_PER_WORD);\n \n       *pretend_size = (size * UNITS_PER_WORD);\n     }\n }\n+\n+/* Implement `va_arg'.  */\n+\n+rtx\n+m32r_va_arg (valist, type)\n+     tree valist, type;\n+{\n+  HOST_WIDE_INT size, rsize;\n+  tree t;\n+  rtx addr_rtx;\n+\n+  size = int_size_in_bytes (type);\n+  rsize = (size + UNITS_PER_WORD - 1) & -UNITS_PER_WORD;\n+\n+  if (size > 8)\n+    {\n+      tree type_ptr, type_ptr_ptr;\n+\n+      /* Pass by reference.  */\n+\n+      type_ptr = build_pointer_type (type);\n+      type_ptr_ptr = build_pointer_type (type_ptr);\n+\n+      t = build (POSTINCREMENT_EXPR, va_list_type_node, valist, \n+\t\t build_int_2 (UNITS_PER_WORD, 0));\n+      TREE_SIDE_EFFECTS (t) = 1;\n+      t = build1 (NOP_EXPR, type_ptr_ptr, t);\n+      TREE_SIDE_EFFECTS (t) = 1;\n+      t = build1 (INDIRECT_REF, type_ptr, t);\n+\n+      addr_rtx = expand_expr (t, NULL_RTX, Pmode, EXPAND_NORMAL);\n+    }\n+  else\n+    {\n+      /* Pass by value.  */\n+\n+      if (size < UNITS_PER_WORD)\n+\t{\n+\t  /* Care for bigendian correction on the aligned address.  */\n+\t  t = build (PLUS_EXPR, ptr_type_node, valist,\n+\t\t     build_int_2 (rsize - size, 0));\n+\t  addr_rtx = expand_expr (t, NULL_RTX, Pmode, EXPAND_NORMAL);\n+\t  addr_rtx = copy_to_reg (addr_rtx);\n+\n+\t  /* Increment AP.  */\n+\t  t = build (PLUS_EXPR, va_list_type_node, valist,\n+\t\t     build_int_2 (rsize, 0));\n+\t  t = build (MODIFY_EXPR, va_list_type_node, valist, t);\n+\t  TREE_SIDE_EFFECTS (t) = 1;\n+\t  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\t}\n+      else\n+\t{\n+\t  t = build (POSTINCREMENT_EXPR, va_list_type_node, valist, \n+\t\t     build_int_2 (rsize, 0));\n+\t  TREE_SIDE_EFFECTS (t) = 1;\n+\t  addr_rtx = expand_expr (t, NULL_RTX, Pmode, EXPAND_NORMAL);\n+\t}\n+    }\n+\n+  return addr_rtx;\n+}\n \f\n /* Cost functions.  */\n "}, {"sha": "d57e50b5957818a54bf251a87318985ffdfd382b", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40cae311f5c7317fcc247e334517fb8c431e973f/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40cae311f5c7317fcc247e334517fb8c431e973f/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=40cae311f5c7317fcc247e334517fb8c431e973f", "patch": "@@ -597,15 +597,18 @@ extern enum reg_class m32r_regno_reg_class[FIRST_PSEUDO_REGISTER];\n        (values in the range -32767 to +32768).  */\n \n /* local to this file */\n-#define INT8_P(X) ((unsigned) ((X) + 0x80) < 0x100)\n-#define INT16_P(X) ((unsigned) ((X) + 0x8000) < 0x10000)\n-#define CMP_INT16_P(X) ((unsigned) ((X) - 1 + 0x8000) < 0x10000)\n-#define UINT16_P(X) ((unsigned) (X) < 0x10000)\n-#define UPPER16_P(X) (((X) & ~0xffff0000) == 0)\n-#define UINT24_P(X) ((unsigned) (X) < 0x1000000)\n-#define INT32_P(X) ((X) >= (-(HOST_WIDE_INT) 0x7fffffff - 1) \\\n-\t\t    && (X) <= (unsigned HOST_WIDE_INT) 0xffffffff)\n-#define UINT5_P(X) ((unsigned) (X) < 32)\n+#define INT8_P(X) ((X) >= -0x80 && (X) <= 0x7f)\n+#define INT16_P(X) ((X) >= -0x8000 && (X) <= 0x7fff)\n+#define CMP_INT16_P(X) ((X) >= -0x7fff && (X) <= 0x8000)\n+#define UINT16_P(X) ((X) >= 0 && (X) <= 0xffff)\n+#define UPPER16_P(X) (((X) & 0xffff) == 0\t\t\t\t\\\n+\t\t      && ((X) >> 16) >= -0x8000\t\t\t\t\\\n+\t\t      && ((X) >> 16) <= 0x7fff)\n+#define UINT24_P(X) ((X) >= 0 && (X) < 0x1000000)\n+#define INT32_P(X) (((X) >= -(HOST_WIDE_INT) 0x80000000\t\t\t\\\n+\t\t     && (X) <= (HOST_WIDE_INT) 0x7fffffff)\t\t\\\n+\t\t    || (unsigned HOST_WIDE_INT) (X) <= 0xffffffff)\n+#define UINT5_P(X) ((X) >= 0 && (X) < 32)\n #define INVERTED_SIGNED_8BIT(VAL) ((VAL) >= -127 && (VAL) <= 128)\n \n #define CONST_OK_FOR_LETTER_P(VALUE, C)\t\t\t\t\t\\\n@@ -968,22 +971,6 @@ M32R_STACK_ALIGN (current_function_outgoing_args_size)\n  : 2 * PARM_BOUNDARY)\n #endif\n \n-#if 0\n-/* If defined, is a C expression that produces the machine-specific\n-   code for a call to `__builtin_saveregs'.  This code will be moved\n-   to the very beginning of the function, before any parameter access\n-   are made.  The return value of this function should be an RTX that\n-   contains the value to use as the return of `__builtin_saveregs'.\n-\n-   The argument ARGS is a `tree_list' containing the arguments that\n-   were passed to `__builtin_saveregs'.\n-\n-   If this macro is not defined, the compiler will output an ordinary\n-   call to the library function `__builtin_saveregs'.  */\n-extern struct rtx *m32r_expand_builtin_savergs ();\n-#define EXPAND_BUILTIN_SAVEREGS() m32r_expand_builtin_saveregs ()\n-#endif\n-\n /* This macro offers an alternative\n    to using `__builtin_saveregs' and defining the macro\n    `EXPAND_BUILTIN_SAVEREGS'.  Use it to store the anonymous register\n@@ -1013,6 +1000,10 @@ extern struct rtx *m32r_expand_builtin_savergs ();\n \n #define SETUP_INCOMING_VARARGS(ARGS_SO_FAR, MODE, TYPE, PRETEND_SIZE, NO_RTL) \\\n m32r_setup_incoming_varargs (&ARGS_SO_FAR, MODE, TYPE, &PRETEND_SIZE, NO_RTL)\n+\n+/* Implement `va_arg'.  */\n+#define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n+  m32r_va_arg (valist, type)\n \f\n /* Function results.  */\n \n@@ -2059,6 +2050,7 @@ extern int  function_arg_partial_nregs\t\tPROTO((CUMULATIVE_ARGS *,\n extern void m32r_setup_incoming_varargs\t\tPROTO((CUMULATIVE_ARGS *,\n \t\t\t\t\t\t       int, Tree, int *,\n \t\t\t\t\t\t       int));\n+extern struct rtx_def *m32r_va_arg\t\tPROTO((Tree, Tree));\n extern int  m32r_address_code\t\t\tPROTO((Rtx));\n extern enum m32r_function_type m32r_compute_function_type\n \t\t\t\t\t\tPROTO((Tree));"}]}