{"sha": "1bb721dcde610f30cd72d019060122bdf6d2c348", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJiNzIxZGNkZTYxMGYzMGNkNzJkMDE5MDYwMTIyYmRmNmQyYzM0OA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-03-22T22:42:51Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-03-22T22:42:51Z"}, "message": "pa-hpux.opt (flag_pa_unix): New Variable entry.\n\n\t* config/pa/pa-hpux.opt (flag_pa_unix): New Variable entry.\n\t(munix=93): Use Var.\n\t* config/pa/pa-hpux1010.opt (munix=95): Use Var.\n\t* config/pa/pa-hpux1111.opt (munix=98): Use Var.\n\t* config/pa/pa-opts.h: New.\n\t* config/pa/pa.c (pa_cpu, flag_pa_unix): Remove.\n\t(pa_handle_option): Don't assert that global structures are in\n\tuse.  Access target_flags via opts pointer.  Don't handle\n\tOPT_mschedule_, OPT_mfixed_range_, OPT_munix_93, OPT_munix_95 or\n\tOPT_munix_98 here.\n\t(pa_option_override): Handle deferred OPT_mfixed_range_.\n\nFrom-SVN: r171324", "tree": {"sha": "49d63a6f66695967bb4c29a86117bad9b47d2486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49d63a6f66695967bb4c29a86117bad9b47d2486"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bb721dcde610f30cd72d019060122bdf6d2c348", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb721dcde610f30cd72d019060122bdf6d2c348", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bb721dcde610f30cd72d019060122bdf6d2c348", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bb721dcde610f30cd72d019060122bdf6d2c348/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd8d8754d58202ee4a9e909baa3a15cbe1d0c79c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd8d8754d58202ee4a9e909baa3a15cbe1d0c79c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd8d8754d58202ee4a9e909baa3a15cbe1d0c79c"}], "stats": {"total": 197, "additions": 116, "deletions": 81}, "files": [{"sha": "ea5a89d17b2d6d199652130f24c99ae1733450d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb721dcde610f30cd72d019060122bdf6d2c348/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb721dcde610f30cd72d019060122bdf6d2c348/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bb721dcde610f30cd72d019060122bdf6d2c348", "patch": "@@ -1,3 +1,17 @@\n+2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/pa/pa-hpux.opt (flag_pa_unix): New Variable entry.\n+\t(munix=93): Use Var.\n+\t* config/pa/pa-hpux1010.opt (munix=95): Use Var.\n+\t* config/pa/pa-hpux1111.opt (munix=98): Use Var.\n+\t* config/pa/pa-opts.h: New.\n+\t* config/pa/pa.c (pa_cpu, flag_pa_unix): Remove.\n+\t(pa_handle_option): Don't assert that global structures are in\n+\tuse.  Access target_flags via opts pointer.  Don't handle\n+\tOPT_mschedule_, OPT_mfixed_range_, OPT_munix_93, OPT_munix_95 or\n+\tOPT_munix_98 here.\n+\t(pa_option_override): Handle deferred OPT_mfixed_range_.\n+\n 2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/mn10300/mn10300-opts.h: New."}, {"sha": "ddbb68f03eb7e6c05ec6cbfe3e3c024a2700dccc", "filename": "gcc/config/pa/pa-hpux.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb721dcde610f30cd72d019060122bdf6d2c348/gcc%2Fconfig%2Fpa%2Fpa-hpux.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb721dcde610f30cd72d019060122bdf6d2c348/gcc%2Fconfig%2Fpa%2Fpa-hpux.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux.opt?ref=1bb721dcde610f30cd72d019060122bdf6d2c348", "patch": "@@ -18,12 +18,16 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n+; The UNIX standard to use for predefines and linking.\n+Variable\n+int flag_pa_unix = TARGET_HPUX_11_11 ? 1998 : TARGET_HPUX_10_10 ? 1995 : 1993\n+\n msio\n Target RejectNegative Mask(SIO) MaskExists\n Generate cpp defines for server IO\n \n munix=93\n-Target RejectNegative\n+Target RejectNegative Var(flag_pa_unix, 1993)\n Specify UNIX standard for predefines and linking\n \n mwsio"}, {"sha": "372f1e3dd959a88b283a88745c9aeec118d4abeb", "filename": "gcc/config/pa/pa-hpux1010.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb721dcde610f30cd72d019060122bdf6d2c348/gcc%2Fconfig%2Fpa%2Fpa-hpux1010.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb721dcde610f30cd72d019060122bdf6d2c348/gcc%2Fconfig%2Fpa%2Fpa-hpux1010.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux1010.opt?ref=1bb721dcde610f30cd72d019060122bdf6d2c348", "patch": "@@ -1,6 +1,6 @@\n ; Options for the HP PA-RISC port of the compiler.\n \n-; Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2007, 2011 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -19,5 +19,5 @@\n ; <http://www.gnu.org/licenses/>.\n \n munix=95\n-Target RejectNegative\n+Target RejectNegative Var(flag_pa_unix, 1995)\n Specify UNIX standard for predefines and linking"}, {"sha": "fa5f6f113f21d74cd0027ec722dbeb3fe01f86d2", "filename": "gcc/config/pa/pa-hpux1111.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb721dcde610f30cd72d019060122bdf6d2c348/gcc%2Fconfig%2Fpa%2Fpa-hpux1111.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb721dcde610f30cd72d019060122bdf6d2c348/gcc%2Fconfig%2Fpa%2Fpa-hpux1111.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux1111.opt?ref=1bb721dcde610f30cd72d019060122bdf6d2c348", "patch": "@@ -1,6 +1,6 @@\n ; Options for the HP PA-RISC port of the compiler.\n \n-; Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2007, 2011 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -19,5 +19,5 @@\n ; <http://www.gnu.org/licenses/>.\n \n munix=98\n-Target RejectNegative\n+Target RejectNegative Var(flag_pa_unix, 1998)\n Specify UNIX standard for predefines and linking"}, {"sha": "b0828fcf30abfff219a75ac5b23e52d9877e9e39", "filename": "gcc/config/pa/pa-opts.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb721dcde610f30cd72d019060122bdf6d2c348/gcc%2Fconfig%2Fpa%2Fpa-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb721dcde610f30cd72d019060122bdf6d2c348/gcc%2Fconfig%2Fpa%2Fpa-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-opts.h?ref=1bb721dcde610f30cd72d019060122bdf6d2c348", "patch": "@@ -0,0 +1,37 @@\n+/* Definitions for option handling for HP PA.\n+   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n+   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n+   Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef PA_OPTS_H\n+#define PA_OPTS_H\n+\n+/* Which processor to schedule for.  */\n+\n+enum processor_type\n+{\n+  PROCESSOR_700,\n+  PROCESSOR_7100,\n+  PROCESSOR_7100LC,\n+  PROCESSOR_7200,\n+  PROCESSOR_7300,\n+  PROCESSOR_8000\n+};\n+\n+#endif"}, {"sha": "c1bf358eae68f924d344269a328d718eacfaa086", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 24, "deletions": 54, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb721dcde610f30cd72d019060122bdf6d2c348/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb721dcde610f30cd72d019060122bdf6d2c348/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=1bb721dcde610f30cd72d019060122bdf6d2c348", "patch": "@@ -193,12 +193,6 @@ static GTY(()) section *som_readonly_data_section;\n static GTY(()) section *som_one_only_readonly_data_section;\n static GTY(()) section *som_one_only_data_section;\n \n-/* Which cpu we are scheduling for.  */\n-enum processor_type pa_cpu = TARGET_SCHED_DEFAULT;\n-\n-/* The UNIX standard to use for predefines and linking.  */\n-int flag_pa_unix = TARGET_HPUX_11_11 ? 1998 : TARGET_HPUX_10_10 ? 1995 : 1993;\n-\n /* Counts for the number of callee-saved general and floating point\n    registers which were saved by the current function's prologue.  */\n static int gr_saved, fr_saved;\n@@ -480,74 +474,32 @@ fix_range (const char *const_str)\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-pa_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+pa_handle_option (struct gcc_options *opts,\n+\t\t  struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n \t\t  const struct cl_decoded_option *decoded,\n \t\t  location_t loc ATTRIBUTE_UNUSED)\n {\n   size_t code = decoded->opt_index;\n-  const char *arg = decoded->arg;\n-\n-  gcc_assert (opts == &global_options);\n-  gcc_assert (opts_set == &global_options_set);\n \n   switch (code)\n     {\n     case OPT_mnosnake:\n     case OPT_mpa_risc_1_0:\n     case OPT_march_1_0:\n-      target_flags &= ~(MASK_PA_11 | MASK_PA_20);\n+      opts->x_target_flags &= ~(MASK_PA_11 | MASK_PA_20);\n       return true;\n \n     case OPT_msnake:\n     case OPT_mpa_risc_1_1:\n     case OPT_march_1_1:\n-      target_flags &= ~MASK_PA_20;\n-      target_flags |= MASK_PA_11;\n+      opts->x_target_flags &= ~MASK_PA_20;\n+      opts->x_target_flags |= MASK_PA_11;\n       return true;\n \n     case OPT_mpa_risc_2_0:\n     case OPT_march_2_0:\n-      target_flags |= MASK_PA_11 | MASK_PA_20;\n-      return true;\n-\n-    case OPT_mschedule_:\n-      if (strcmp (arg, \"8000\") == 0)\n-\tpa_cpu = PROCESSOR_8000;\n-      else if (strcmp (arg, \"7100\") == 0)\n-\tpa_cpu = PROCESSOR_7100;\n-      else if (strcmp (arg, \"700\") == 0)\n-\tpa_cpu = PROCESSOR_700;\n-      else if (strcmp (arg, \"7100LC\") == 0)\n-\tpa_cpu = PROCESSOR_7100LC;\n-      else if (strcmp (arg, \"7200\") == 0)\n-\tpa_cpu = PROCESSOR_7200;\n-      else if (strcmp (arg, \"7300\") == 0)\n-\tpa_cpu = PROCESSOR_7300;\n-      else\n-\treturn false;\n-      return true;\n-\n-    case OPT_mfixed_range_:\n-      fix_range (arg);\n-      return true;\n-\n-#if TARGET_HPUX\n-    case OPT_munix_93:\n-      flag_pa_unix = 1993;\n-      return true;\n-#endif\n-\n-#if TARGET_HPUX_10_10\n-    case OPT_munix_95:\n-      flag_pa_unix = 1995;\n-      return true;\n-#endif\n-\n-#if TARGET_HPUX_11_11\n-    case OPT_munix_98:\n-      flag_pa_unix = 1998;\n+      opts->x_target_flags |= MASK_PA_11 | MASK_PA_20;\n       return true;\n-#endif\n \n     default:\n       return true;\n@@ -559,6 +511,24 @@ pa_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n static void\n pa_option_override (void)\n {\n+  unsigned int i;\n+  cl_deferred_option *opt;\n+  VEC(cl_deferred_option,heap) *vec\n+    = (VEC(cl_deferred_option,heap) *) pa_deferred_options;\n+\n+  FOR_EACH_VEC_ELT (cl_deferred_option, vec, i, opt)\n+    {\n+      switch (opt->opt_index)\n+\t{\n+\tcase OPT_mfixed_range_:\n+\t  fix_range (opt->arg);\n+\t  break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+    }\n+\n   /* Unconditional branches in the delay slot are not compatible with dwarf2\n      call frame information.  There is no benefit in using this optimization\n      on PA8000 and later processors.  */"}, {"sha": "1cb236bcab1b256eb0c87171a42e006cf9899884", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb721dcde610f30cd72d019060122bdf6d2c348/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb721dcde610f30cd72d019060122bdf6d2c348/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=1bb721dcde610f30cd72d019060122bdf6d2c348", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for the HP Spectrum.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,\n-   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com) of Cygnus Support\n    and Tim Moore (moore@defmacro.cs.utah.edu) of the Center for\n@@ -25,24 +25,6 @@ along with GCC; see the file COPYING3.  If not see\n /* For long call handling.  */\n extern unsigned long total_code_bytes;\n \n-/* Which processor to schedule for.  */\n-\n-enum processor_type\n-{\n-  PROCESSOR_700,\n-  PROCESSOR_7100,\n-  PROCESSOR_7100LC,\n-  PROCESSOR_7200,\n-  PROCESSOR_7300,\n-  PROCESSOR_8000\n-};\n-\n-/* For -mschedule= option.  */\n-extern enum processor_type pa_cpu;\n-\n-/* For -munix= option.  */\n-extern int flag_pa_unix;\n-\n #define pa_cpu_attr ((enum attr_cpu)pa_cpu)\n \n /* Print subsidiary information on the compiler version in use.  */"}, {"sha": "ccb4febd501233e22c26726d6079e33c14278cd2", "filename": "gcc/config/pa/pa.opt", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bb721dcde610f30cd72d019060122bdf6d2c348/gcc%2Fconfig%2Fpa%2Fpa.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bb721dcde610f30cd72d019060122bdf6d2c348/gcc%2Fconfig%2Fpa%2Fpa.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.opt?ref=1bb721dcde610f30cd72d019060122bdf6d2c348", "patch": "@@ -1,6 +1,6 @@\n ; Options for the HP PA-RISC port of the compiler.\n \n-; Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2007, 2011 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -18,6 +18,13 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n+HeaderInclude\n+config/pa/pa-opts.h\n+\n+; Which cpu we are scheduling for.\n+Variable\n+enum processor_type pa_cpu = TARGET_SCHED_DEFAULT\n+\n march=1.0\n Target RejectNegative\n Generate PA1.0 code\n@@ -47,7 +54,7 @@ Target Report Mask(FAST_INDIRECT_CALLS)\n Generate fast indirect calls\n \n mfixed-range=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Var(pa_deferred_options) Defer\n Specify range of registers to make fixed\n \n mgas\n@@ -96,9 +103,30 @@ Target Report Mask(PORTABLE_RUNTIME)\n Use portable calling conventions\n \n mschedule=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Enum(pa_schedule) Var(pa_cpu)\n Specify CPU for scheduling purposes.  Valid arguments are 700, 7100, 7100LC, 7200, 7300, and 8000\n \n+Enum\n+Name(pa_schedule) Type(enum processor_type)\n+\n+EnumValue\n+Enum(pa_schedule) String(8000) Value(PROCESSOR_8000)\n+\n+EnumValue\n+Enum(pa_schedule) String(7100) Value(PROCESSOR_7100)\n+\n+EnumValue\n+Enum(pa_schedule) String(700) Value(PROCESSOR_700)\n+\n+EnumValue\n+Enum(pa_schedule) String(7100LC) Value(PROCESSOR_7100LC)\n+\n+EnumValue\n+Enum(pa_schedule) String(7200) Value(PROCESSOR_7200)\n+\n+EnumValue\n+Enum(pa_schedule) String(7300) Value(PROCESSOR_7300)\n+\n msoft-float\n Target Report Mask(SOFT_FLOAT)\n Use software floating point"}]}