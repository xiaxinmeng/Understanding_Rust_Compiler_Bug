{"sha": "62e66ee5bfe93de637f9ea9849a73807894936e0", "node_id": "C_kwDOANBUbNoAKDYyZTY2ZWU1YmZlOTNkZTYzN2Y5ZWE5ODQ5YTczODA3ODk0OTM2ZTA", "commit": {"author": {"name": "Steve Baird", "email": "baird@adacore.com", "date": "2021-07-23T18:09:05Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-09-23T13:06:13Z"}, "message": "[Ada] Update \"Implementation Defined Characteristics\" documentation.\n\ngcc/ada/\n\n\t* doc/gnat_rm/implementation_defined_characteristics.rst: Update\n\tthis section to reflect the current version of Ada RM M.2.\n\t* gnat_rm.texi: Regenerate.", "tree": {"sha": "125bbe1077ab28abbc28ccd1937c2c9163078b52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/125bbe1077ab28abbc28ccd1937c2c9163078b52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62e66ee5bfe93de637f9ea9849a73807894936e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e66ee5bfe93de637f9ea9849a73807894936e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e66ee5bfe93de637f9ea9849a73807894936e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e66ee5bfe93de637f9ea9849a73807894936e0/comments", "author": {"login": "swbaird", "id": 50751052, "node_id": "MDQ6VXNlcjUwNzUxMDUy", "avatar_url": "https://avatars.githubusercontent.com/u/50751052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swbaird", "html_url": "https://github.com/swbaird", "followers_url": "https://api.github.com/users/swbaird/followers", "following_url": "https://api.github.com/users/swbaird/following{/other_user}", "gists_url": "https://api.github.com/users/swbaird/gists{/gist_id}", "starred_url": "https://api.github.com/users/swbaird/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swbaird/subscriptions", "organizations_url": "https://api.github.com/users/swbaird/orgs", "repos_url": "https://api.github.com/users/swbaird/repos", "events_url": "https://api.github.com/users/swbaird/events{/privacy}", "received_events_url": "https://api.github.com/users/swbaird/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16e3d6b8b2b5168ebc773833f0e7ccf2191932c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16e3d6b8b2b5168ebc773833f0e7ccf2191932c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16e3d6b8b2b5168ebc773833f0e7ccf2191932c1"}], "stats": {"total": 1652, "additions": 956, "deletions": 696}, "files": [{"sha": "400e23254a8ed005da5cf3d3e68a6966933c9964", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_characteristics.rst", "status": "modified", "additions": 379, "deletions": 311, "changes": 690, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e66ee5bfe93de637f9ea9849a73807894936e0/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_characteristics.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e66ee5bfe93de637f9ea9849a73807894936e0/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_characteristics.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_characteristics.rst?ref=62e66ee5bfe93de637f9ea9849a73807894936e0", "patch": "@@ -53,7 +53,8 @@ Any *code_statement* can potentially cause external interactions.\n See separate section on source representation.\n \n *\n-  \"The control functions allowed in comments.  See 2.1(14).\"\n+  \"The semantics of an Ada program whose text is not in\n+   Normalization Form C.  See 2.1(4).\"\n \n See separate section on source representation.\n \n@@ -86,14 +87,14 @@ parameter, checks that the optimization flag is set, and aborts if it is\n not.\n \n *\n-  \"The sequence of characters of the value returned by\n-  ``S'Image`` when some of the graphic characters of\n-  ``S'Wide_Image`` are not defined in ``Character``.  See\n-  3.5(37).\"\n+  \"The message string associated with the Assertion_Error exception raised\n+  by the failure of a predicate check if there is no applicable\n+  Predicate_Failure aspect.  See 3.2.4(31).\"\n \n-The sequence of characters is as defined by the wide character encoding\n-method used for the source.  See section on source representation for\n-further details.\n+In the case of a Dynamic_Predicate aspect, the string is\n+\"Dynamic_Predicate failed at <source position>\", where\n+\"<source position>\" might be something like \"foo.adb:123\".\n+The Static_Predicate case is handled analogously.\n \n *\n   \"The predefined integer types declared in\n@@ -191,25 +192,80 @@ small must lie in 1.0E-38 .. 1.0E+38 and the digits in 1 .. 38.\n Block numbers of the form :samp:`B{nnn}`, where *nnn* is a\n decimal integer are allocated.\n \n+*\n+  \"The sequence of characters of the value returned by Tags.Expanded_Name\n+  (respectively, Tags.Wide_Expanded_Name) when some of the graphic\n+  characters of Tags.Wide_Wide_Expanded_Name are not defined in Character\n+  (respectively, Wide_Character).  See 3.9(10.1).\"\n+\n+This is handled in the same way as the implementation-defined behavior\n+referenced in A.4.12(34).\n+\n *\n   \"Implementation-defined attributes.  See 4.1.4(12).\"\n \n See :ref:`Implementation_Defined_Attributes`.\n \n+*\n+  \"The value of the parameter to Empty for some container aggregates.\n+  See 4.3.5(40).\"\n+\n+As per the suggestion given in the Annotated Ada RM, the default value\n+of the formal parameter is used if one exists and zero is used otherwise.\n+\n+*\n+  \"The maximum number of chunks for a parallel reduction expression without\n+  a chunk_specification.  See 4.5.10(21).\"\n+\n+Feature unimplemented.\n+\n+*\n+  \"Rounding of real static expressions which are exactly half-way between\n+  two machine numbers.  See 4.9(38).\"\n+\n+Round to even is used in all such cases.\n+\n+*\n+  \"The maximum number of chunks for a parallel generalized iterator without\n+   a chunk_specification.  See 5.5.2(10).\"\n+\n+Feature unimplemented.\n+\n+*\n+  \"The number of chunks for an array component iterator.  See 5.5.2(11).\"\n+\n+Feature unimplemented.\n+\n+*\n+  \"Any extensions of the Global aspect.  See 6.1.2(43).\"\n+\n+Feature unimplemented.\n+\n+*\n+  \"The circumstances the implementation passes in the null value for a view\n+  conversion of an access type used as an out parameter.  See 6.4.1(19).\"\n+\n+Difficult to characterize.\n+\n+*\n+  \"Any extensions of the Default_Initial_Condition aspect.  See 7.3.3(11).\"\n+\n+SPARK allows specifying *null* as the Default_Initial_Condition\n+aspect of a type. See the SPARK reference manual for further details.\n+\n *\n   \"Any implementation-defined time types.  See 9.6(6).\"\n \n There are no implementation-defined time types.\n \n *\n-  \"The time base associated with relative delays.\"\n+  \"The time base associated with relative delays.  See 9.6(20).\"\n \n See 9.6(20).  The time base used is that provided by the C library\n function ``gettimeofday``.\n \n *\n-  \"The time base of the type ``Calendar.Time``.  See\n-  9.6(23).\"\n+  \"The time base of the type ``Calendar.Time``.  See 9.6(23).\"\n \n The time base used is that provided by the C library function\n ``gettimeofday``.\n@@ -229,13 +285,15 @@ setting for local time, as accessed by the C library function\n There are no such limits.\n \n *\n-  \"Whether or not two non-overlapping parts of a composite\n-  object are independently addressable, in the case where packing, record\n-  layout, or ``Component_Size`` is specified for the object.  See\n-  9.10(1).\"\n+  \"The result of Calendar.Formatting.Image if its argument represents more\n+   than 100 hours.  See 9.6.1(86).\"\n+\n+Calendar.Time_Error is raised.\n+\n+*\n+  \"Implementation-defined conflict check policies.  See 9.10.1(5).\"\n \n-Separate components are independently addressable if they do not share\n-overlapping storage units.\n+There are no implementation-defined conflict check policies.\n \n *\n   \"The representation for a compilation.  See 10.1(2).\"\n@@ -281,9 +339,8 @@ options, refer to *GNAT Make Program gnatmake* in the\n :title:`GNAT User's Guide`.\n \n *\n-  \"The implementation-defined means, if any, of specifying\n-  which compilation units are needed by a given compilation unit.  See\n-  10.2(2).\"\n+  \"The implementation-defined means, if any, of specifying which compilation\n+  units are needed by a given compilation unit.  See 10.2(2).\"\n \n The units needed by a given compilation unit are as defined in\n the Ada Reference Manual section 10.2(2-6).  There are no\n@@ -298,17 +355,13 @@ The main program is designated by providing the name of the\n corresponding :file:`ALI` file as the input parameter to the binder.\n \n *\n-  \"The order of elaboration of *library_items*.  See\n-  10.2(18).\"\n+  \"The order of elaboration of *library_items*.  See 10.2(18).\"\n \n The first constraint on ordering is that it meets the requirements of\n Chapter 10 of the Ada Reference Manual.  This still leaves some\n-implementation dependent choices, which are resolved by first\n-elaborating bodies as early as possible (i.e., in preference to specs\n-where there is a choice), and second by evaluating the immediate with\n-clauses of a unit to determine the probably best choice, and\n-third by elaborating in alphabetical order of unit names\n-where a choice still remains.\n+implementation-dependent choices, which are resolved by analyzing\n+the elaboration code of each unit and identifying implicit\n+elaboration-order dependencies.\n \n *\n   \"Parameter passing and function return for the main\n@@ -320,13 +373,12 @@ value is the return code of the program (overriding any value that\n may have been set by a call to ``Ada.Command_Line.Set_Exit_Status``).\n \n *\n-  \"The mechanisms for building and running partitions.  See\n-  10.2(24).\"\n+  \"The mechanisms for building and running partitions.  See 10.2(24).\"\n \n-GNAT itself supports programs with only a single partition.  The GNATDIST\n+GNAT itself supports programs with only a single partition. The GNATDIST\n tool provided with the GLADE package (which also includes an implementation\n of the PCS) provides a completely flexible method for building and running\n-programs consisting of multiple partitions.  See the separate GLADE manual\n+programs consisting of multiple partitions. See the separate GLADE manual\n for details.\n \n *\n@@ -340,12 +392,11 @@ See separate section on compilation model.\n   implementation.  See 10.2(28).\"\n \n Passive partitions are supported on targets where shared memory is\n-provided by the operating system.  See the GLADE reference manual for\n+provided by the operating system. See the GLADE reference manual for\n further details.\n \n *\n-  \"The information returned by ``Exception_Message``.  See\n-  11.4.1(10).\"\n+  \"The information returned by ``Exception_Message``.  See 11.4.1(10).\"\n \n Exception message returns the null string unless a specific message has\n been passed by the program.\n@@ -390,6 +441,38 @@ where\n      The line terminator sequence at the end of each line, including\n      the last line is a single ``LF`` character (``16#0A#``).\n \n+*\n+  \"The sequence of characters of the value returned by\n+  Exceptions.Exception_Name (respectively, Exceptions.Wide_Exception_Name)\n+  when some of the graphic characters of Exceptions.Wide_Wide_Exception_Name\n+  are not defined in Character (respectively, Wide_Character).\n+  See 11.4.1(12.1).\"\n+\n+This is handled in the same way as the implementation-defined behavior\n+referenced in A.4.12(34).\n+\n+*\n+  \"The information returned by Exception_Information.  See 11.4.1(13).\"\n+\n+The exception name and the source location at which the exception was\n+raised are included.\n+\n+*\n+  \"Implementation-defined policy_identifiers and assertion_aspect_marks\n+  allowed in a pragma Assertion_Policy.  See 11.4.2(9).\"\n+\n+Implementation-defined assertion_aspect_marks include Assert_And_Cut,\n+Assume, Contract_Cases, Debug, Ghost, Initial_Condition, Loop_Invariant,\n+Loop_Variant, Postcondition, Precondition, Predicate, Refined_Post,\n+Statement_Assertions, and Subprogram_Variant. Implementation-defined\n+policy_identifiers include Ignore and Suppressible.\n+\n+*\n+  \"The default assertion policy.  See 11.4.2(10).\"\n+\n+The default assertion policy is Ignore, although this can be overridden\n+via compiler switches such as \"-gnata\".\n+\n *\n   \"Implementation-defined check names.  See 11.5(27).\"\n \n@@ -400,28 +483,54 @@ program can add implementation-defined check names by means of the pragma\n Check_Name. See the description of pragma ``Suppress`` for full details.\n \n *\n-  \"The interpretation of each aspect of representation.  See\n-  13.1(20).\"\n+  \"Existence and meaning of second parameter of pragma Unsuppress.\n+  See 11.5(27.1).\"\n+\n+The legality rules for and semantics of the second parameter of pragma\n+Unsuppress match those for the second argument of pragma Suppress.\n+\n+*\n+  \"The cases that cause conflicts between the representation of the\n+   ancestors of a type_declaration.  See 13.1(13.1).\"\n+\n+No such cases exist.\n+\n+*\n+  \"The interpretation of each representation aspect.  See 13.1(20).\"\n \n See separate section on data representations.\n \n *\n-  \"Any restrictions placed upon representation items.  See\n-  13.1(20).\"\n+  \"Any restrictions placed upon the specification of representation aspects.\n+  See 13.1(20).\"\n \n See separate section on data representations.\n \n *\n-  \"The meaning of ``Size`` for indefinite subtypes.  See\n-  13.3(48).\"\n+  \"Implementation-defined aspects, including the syntax for specifying\n+  such aspects and the legality rules for such aspects.  See 13.1.1(38).\"\n+\n+See :ref:`Implementation_Defined_Aspects`.\n+\n+*\n+  \"The set of machine scalars.  See 13.3(8.1).\"\n+\n+See separate section on data representations.\n+\n+*\n+  \"The meaning of ``Size`` for indefinite subtypes.  See 13.3(48).\"\n+\n+The Size attribute of an indefinite subtype is not less than the Size\n+attribute of any object of that type.\n+\n+*\n+  \"The meaning of Object_Size for indefinite subtypes.  See 13.3(58).\"\n \n-Size for an indefinite subtype is the maximum possible size, except that\n-for the case of a subprogram parameter, the size of the parameter object\n-is the actual size.\n+The Object_Size attribute of an indefinite subtype is not less than the\n+Object_Size attribute of any object of that type.\n \n *\n-  \"The default external representation for a type tag.  See\n-  13.3(75).\"\n+  \"The default external representation for a type tag.  See 13.3(75).\"\n \n The default external representation for a type tag is the fully expanded\n name of the type in upper case letters.\n@@ -448,27 +557,32 @@ implementation, so no non-default bit ordering is supported.  The default\n bit ordering corresponds to the natural endianness of the target architecture.\n \n *\n-  \"The contents of the visible part of package ``System``\n-  and its language-defined children.  See 13.7(2).\"\n+  \"The contents of the visible part of package ``System``.  See 13.7(2).\"\n \n-See the definition of these packages in files :file:`system.ads` and\n-:file:`s-stoele.ads`. Note that two declarations are added to package\n-System.\n+See the definition of package System in :file:`system.ads`.\n+Note that two declarations are added to package System.\n \n .. code-block:: ada\n \n   Max_Priority           : constant Positive := Priority'Last;\n   Max_Interrupt_Priority : constant Positive := Interrupt_Priority'Last;\n \n *\n-  \"The contents of the visible part of package\n-  ``System.Machine_Code``, and the meaning of\n-  *code_statements*.  See 13.8(7).\"\n+  \"The range of Storage_Elements.Storage_Offset, the modulus of\n+  Storage_Elements.Storage_Element, and the declaration of\n+  Storage_Elements.Integer_Address.  See 13.7.1(11).\"\n+\n+See the definition of package System.Storage_Elements in :file:`s-stoele.ads`.\n+\n+*\n+  \"The contents of the visible part of package ``System.Machine_Code``,\n+  and the meaning of *code_statements*.  See 13.8(7).\"\n \n See the definition and documentation in file :file:`s-maccod.ads`.\n \n *\n-  \"The effect of unchecked conversion.  See 13.9(11).\"\n+  \"The result of unchecked conversion for instances with scalar result\n+  types whose result is not defined by the language.  See 13.9(11).\"\n \n Unchecked conversion between types of the same size\n results in an uninterpreted transmission of the bits from one type\n@@ -485,84 +599,63 @@ greater than the source alignment, then a copy of the result is\n made with appropriate alignment\n \n *\n-  \"The semantics of operations on invalid representations.\n-  See 13.9.2(10-11).\"\n-\n-For assignments and other operations where the use of invalid values cannot\n-result in erroneous behavior, the compiler ignores the possibility of invalid\n-values. An exception is raised at the point where an invalid value would\n-result in erroneous behavior. For example executing:\n+  \"The result of unchecked conversion for instances with nonscalar result\n+  types whose result is not defined by the language.  See 13.9(11).\"\n \n-.. code-block:: ada\n-\n-  procedure invalidvals is\n-    X : Integer := -1;\n-    Y : Natural range 1 .. 10;\n-    for Y'Address use X'Address;\n-    Z : Natural range 1 .. 10;\n-    A : array (Natural range 1 .. 10) of Integer;\n-  begin\n-    Z := Y;     -- no exception\n-    A (Z) := 3; -- exception raised;\n-  end;\n-\n-As indicated, an exception is raised on the array assignment, but not\n-on the simple assignment of the invalid negative value from Y to Z.\n+See preceding definition for the scalar result case.\n \n *\n-  \"The manner of choosing a storage pool for an access type\n-  when ``Storage_Pool`` is not specified for the type.  See 13.11(17).\"\n+  \"Whether or not the implementation provides user-accessible\n+  names for the standard pool type(s).  See 13.11(17).\"\n \n There are 3 different standard pools used by the compiler when\n ``Storage_Pool`` is not specified depending whether the type is local\n to a subprogram or defined at the library level and whether\n-``Storage_Size``is specified or not.  See documentation in the runtime\n+``Storage_Size``is specified or not. See documentation in the runtime\n library units ``System.Pool_Global``, ``System.Pool_Size`` and\n ``System.Pool_Local`` in files :file:`s-poosiz.ads`,\n :file:`s-pooglo.ads` and :file:`s-pooloc.ads` for full details on the\n-default pools used.\n-\n-*\n-  \"Whether or not the implementation provides user-accessible\n-  names for the standard pool type(s).  See 13.11(17).\"\n-\n-See documentation in the sources of the run time mentioned in the previous\n-paragraph.  All these pools are accessible by means of `with`\\ ing\n+default pools used.  All these pools are accessible by means of `with`\\ ing\n these units.\n \n *\n-  \"The meaning of ``Storage_Size``.  See 13.11(18).\"\n+  \"The meaning of ``Storage_Size`` when neither the Storage_Size nor the\n+  Storage_Pool is specified for an access type.  See 13.11(18).\"\n \n ``Storage_Size`` is measured in storage units, and refers to the\n total space available for an access type collection, or to the primary\n stack space for a task.\n \n *\n-  \"Implementation-defined aspects of storage pools.  See\n-  13.11(22).\"\n+  \"The effect of specifying aspect Default_Storage_Pool on an instance\n+  of a language-defined generic unit.  See 13.11.3(5).\"\n \n-See documentation in the sources of the run time mentioned in the\n-paragraph about standard storage pools above\n-for details on GNAT-defined aspects of storage pools.\n+Instances of language-defined generic units are treated the same as other\n+instances with respect to the Default_Storage_Pool aspect.\n \n *\n-  \"The set of restrictions allowed in a pragma\n-  ``Restrictions``.  See 13.12(7).\"\n+  \"Implementation-defined restrictions allowed in a pragma\n+  ``Restrictions``.  See 13.12(8.7).\"\n \n See :ref:`Standard_and_Implementation_Defined_Restrictions`.\n \n *\n   \"The consequences of violating limitations on\n   ``Restrictions`` pragmas.  See 13.12(9).\"\n \n-Restrictions that can be checked at compile time result in illegalities\n-if violated.  Currently there are no other consequences of violating\n-restrictions.\n+Restrictions that can be checked at compile time are enforced at\n+compile time; violations are illegal. For other restrictions, any\n+violation during program execution results in erroneous execution.\n \n *\n-  \"The representation used by the ``Read`` and\n-  ``Write`` attributes of elementary types in terms of stream\n-  elements.  See 13.13.2(9).\"\n+  \"Implementation-defined usage profiles allowed in a pragma Profile.\n+  See 13.12(15).\"\n+\n+See :ref:`Implementation_Defined_Pragmas`.\n+\n+*\n+  \"The contents of the stream elements read and written by the Read and\n+  Write attributes of elementary types.  See 13.13.2(9).\"\n \n The representation is the in-memory representation of the base type of\n the type, using the number of bits corresponding to the\n@@ -575,12 +668,29 @@ the type, using the number of bits corresponding to the\n See items describing the integer and floating-point types supported.\n \n *\n-  \"The string returned by ``Character_Set_Version``.\n-  See A.3.5(3).\"\n+  \"The values returned by Strings.Hash.  See A.4.9(3).\"\n+\n+This hash function has predictable collisions and is subject to\n+equivalent substring attacks. It is not suitable for construction of a\n+hash table keyed on possibly malicious user input.\n+\n+*\n+  \"The value returned by a call to a Text_Buffer Get procedure if any\n+  character in the returned sequence is not defined in Character.\n+  See A.4.12(34).\"\n+\n+The contents of a buffer is represented internally as a UTF_8 string.\n+The value return by Text_Buffer.Get is the result of passing that\n+UTF_8 string to UTF_Encoding.Strings.Decode.\n+\n+*\n+  \"The value returned by a call to a Text_Buffer Wide_Get procedure if\n+  any character in the returned sequence is not defined in Wide_Character.\n+  See A.4.12(34).\"\n \n-``Ada.Wide_Characters.Handling.Character_Set_Version`` returns\n-the string \"Unicode 4.0\", referring to version 4.0 of the\n-Unicode specification.\n+The contents of a buffer is represented internally as a UTF_8 string.\n+The value return by Text_Buffer.Wide_Get is the result of passing that\n+UTF_8 string to UTF_Encoding.Wide_Strings.Decode.\n \n *\n   \"The accuracy actually achieved by the elementary\n@@ -609,14 +719,6 @@ Maximum image width is 6864, see library file :file:`s-rannum.ads`.\n \n Maximum image width is 6864, see library file :file:`s-rannum.ads`.\n \n-*\n-  \"The algorithms for random number generation.  See\n-  A.5.2(32).\"\n-\n-The algorithm is the Mersenne Twister, as documented in the source file\n-:file:`s-rannum.adb`. This version of the algorithm has a period of\n-2**19937-1.\n-\n *\n   \"The string representation of a random number generator's\n   state.  See A.5.2(38).\"\n@@ -625,33 +727,17 @@ The value returned by the Image function is the concatenation of\n the fixed-width decimal representations of the 624 32-bit integers\n of the state vector.\n \n-*\n-  \"The minimum time interval between calls to the\n-  time-dependent Reset procedure that are guaranteed to initiate different\n-  random number sequences.  See A.5.2(45).\"\n-\n-The minimum period between reset calls to guarantee distinct series of\n-random numbers is one microsecond.\n-\n *\n   \"The values of the ``Model_Mantissa``,\n   ``Model_Emin``, ``Model_Epsilon``, ``Model``,\n   ``Safe_First``, and ``Safe_Last`` attributes, if the Numerics\n   Annex is not supported.  See A.5.3(72).\"\n \n-Run the compiler with *-gnatS* to produce a listing of package\n-``Standard``, has the values of all numeric attributes.\n+Running the compiler with *-gnatS* to produce a listing of package\n+``Standard`` displays the values of these attributes.\n \n *\n-  \"Any implementation-defined characteristics of the\n-  input-output packages.  See A.7(14).\"\n-\n-There are no special implementation defined characteristics for these\n-packages.\n-\n-*\n-  \"The value of ``Buffer_Size`` in ``Storage_IO``.  See\n-  A.9(10).\"\n+  \"The value of ``Buffer_Size`` in ``Storage_IO``.  See A.9(10).\"\n \n All type representations are contiguous, and the ``Buffer_Size`` is\n the value of ``type'Size`` rounded up to the next storage unit\n@@ -662,16 +748,21 @@ boundary.\n   standard error See A.10(5).\"\n \n These files are mapped onto the files provided by the C streams\n-libraries.  See source file :file:`i-cstrea.ads` for further details.\n+libraries. See source file :file:`i-cstrea.ads` for further details.\n \n *\n-  \"The accuracy of the value produced by ``Put``.  See\n-  A.10.9(36).\"\n+  \"The accuracy of the value produced by ``Put``.  See A.10.9(36).\"\n \n If more digits are requested in the output than are represented by the\n precision of the value, zeroes are output in the corresponding least\n significant digit positions.\n \n+*\n+  \"Current size for a stream file for which positioning is not supported.\n+  See A.12.1(1.1).\"\n+\n+Positioning is supported.\n+\n *\n   \"The meaning of ``Argument_Count``, ``Argument``, and\n   ``Command_Name``.  See A.15(1).\"\n@@ -680,80 +771,66 @@ These are mapped onto the ``argv`` and ``argc`` parameters of the\n main program in the natural manner.\n \n *\n-  \"The interpretation of the ``Form`` parameter in procedure\n-  ``Create_Directory``.  See A.16(56).\"\n+  \"The interpretation of file names and directory names.  See A.16(46).\"\n \n-The ``Form`` parameter is not used.\n+These names are interpreted consistently with the underlying file system.\n \n *\n-  \"The interpretation of the ``Form`` parameter in procedure\n-  ``Create_Path``.  See A.16(60).\"\n+  \"The maxium value for a file size in Directories.  See A.16(87).\"\n \n-The ``Form`` parameter is not used.\n+Directories.File_Size'Last is equal to Long_Long_Integer'Last .\n \n *\n-  \"The interpretation of the ``Form`` parameter in procedure\n-  ``Copy_File``.  See A.16(68).\"\n+  \"The result for Directories.Size for a directory or special file.\n+   See A.16(93).\"\n \n-The ``Form`` parameter is case-insensitive.\n-Two fields are recognized in the ``Form`` parameter::\n+Name_Error is raised.\n \n-  *preserve=<value>*\n-  *mode=<value>*\n+*\n+  \"The result for Directories.Modification_Time for a directory or special file.\n+   See A.16(93).\"\n \n-<value> starts immediately after the character '=' and ends with the\n-character immediately preceding the next comma (',') or with the last\n-character of the parameter.\n+Name_Error is raised.\n \n-The only possible values for preserve= are:\n+*\n+  \"The interpretation of a nonnull search pattern in Directories.\n+   See A.16(104).\"\n \n-================== ===================================================================\n-Value              Meaning\n-================== ===================================================================\n-*no_attributes*    Do not try to preserve any file attributes. This is the\n-                   default if no preserve= is found in Form.\n-*all_attributes*   Try to preserve all file attributes (timestamps, access rights).\n-*timestamps*       Preserve the timestamp of the copied file, but not the other\n-                   file attributes.\n-================== ===================================================================\n+When the ``Pattern`` parameter is not the null string, it is interpreted\n+according to the syntax of regular expressions as defined in the\n+``GNAT.Regexp`` package.\n \n-The only possible values for mode= are:\n+See :ref:`GNAT.Regexp_(g-regexp.ads)`.\n \n-============== ===============================================================================\n-Value          Meaning\n-============== ===============================================================================\n-*copy*         Only do the copy if the destination file does not already exist.\n-               If it already exists, Copy_File fails.\n-*overwrite*    Copy the file in all cases. Overwrite an already existing destination file.\n-*append*       Append the original file to the destination file. If the destination file\n-               does not exist, the destination file is a copy of the source file.\n-               When mode=append, the field preserve=, if it exists, is not taken into account.\n-============== ===============================================================================\n+*\n+  \"The results of a Directories search if the contents of the directory are\n+   altered while a search is in progress.  See A.16(110).\"\n \n-If the Form parameter includes one or both of the fields and the value or\n-values are incorrect, Copy_file fails with Use_Error.\n+The effect of a call to Get_Next_Entry is determined by the current\n+state of the directory.\n \n-Examples of correct Forms::\n+*\n+  \"The definition and meaning of an environment variable.  See A.17(1).\"\n \n-  Form => \"preserve=no_attributes,mode=overwrite\" (the default)\n-  Form => \"mode=append\"\n-  Form => \"mode=copy, preserve=all_attributes\"\n+This definition is determined by the underlying operating system.\n \n-Examples of incorrect Forms::\n+*\n+  \"The circumstances where an environment variable cannot be defined.\n+  See A.17(16).\"\n \n-  Form => \"preserve=junk\"\n-  Form => \"mode=internal, preserve=timestamps\"\n+  There are no such implementation-defined circumstances.\n \n *\n-  \"The interpretation of the ``Pattern`` parameter, when not the null string,\n-  in the ``Start_Search`` and ``Search`` procedures.\n-  See A.16(104) and A.16(112).\"\n+  \"Environment names for which Set has the effect of Clear.  See A.17(17).\"\n \n-When the ``Pattern`` parameter is not the null string, it is interpreted\n-according to the syntax of regular expressions as defined in the\n-``GNAT.Regexp`` package.\n+There are no such names.\n \n-See :ref:`GNAT.Regexp_(g-regexp.ads)`.\n+*\n+  \"The value of Containers.Hash_Type'Modulus. The value of\n+  Containers.Count_Type'Last.  See A.18.1(7).\"\n+\n+Containers.Hash_Type'Modulus is 2**32.\n+Containers.Count_Type'Last is 2**31 - 1.\n \n *\n   \"Implementation-defined convention names.  See B.1(11).\"\n@@ -806,9 +883,8 @@ Convention Name         Interpretation\n Link names are the actual names used by the linker.\n \n *\n-  \"The manner of choosing link names when neither the link\n-  name nor the address of an imported or exported entity is specified.  See\n-  B.1(36).\"\n+  \"The manner of choosing link names when neither the link name nor the\n+  address of an imported or exported entity is specified.  See B.1(36).\"\n \n The default linker name is that which would be assigned by the relevant\n external language, interpreting the Ada name as being in all lower case\n@@ -844,6 +920,12 @@ See files with prefix :file:`i-` in the distributed library.\n \n See files with prefix :file:`i-` in the distributed library.\n \n+*\n+  \"The definitions of certain types and constants in Interfaces.C.\n+  See B.3(41).\"\n+\n+See source file :file:`i-c.ads`.\n+\n *\n   \"The types ``Floating``, ``Long_Floating``,\n   ``Binary``, ``Long_Binary``, ``Decimal_ Element``, and\n@@ -865,44 +947,53 @@ COBOL                 Ada\n For initialization, see the file :file:`i-cobol.ads` in the distributed library.\n \n *\n-  \"Support for access to machine instructions.  See C.1(1).\"\n+  \"The types Fortran_Integer, Real, Double_Precision, and Character_Set\n+  in Interfaces.Fortran.  See B.5(17).\"\n \n-See documentation in file :file:`s-maccod.ads` in the distributed library.\n+See source file :file:`i-fortra.ads`. These types are derived, respectively,\n+from Integer, Float, Long_Float, and Character.\n \n *\n-  \"Implementation-defined aspects of access to machine\n-  operations.  See C.1(9).\"\n+  \"Implementation-defined intrinsic subprograms.  See C.1(1).\"\n \n-See documentation in file :file:`s-maccod.ads` in the distributed library.\n+See separate section on Intrinsic Subprograms.\n \n *\n-  \"Implementation-defined aspects of interrupts.  See C.3(2).\"\n+  \"Any restrictions on a protected procedure or its containing type when an\n+  aspect Attach_handler or Interrupt_Handler is specified.  See C.3.1(17).\"\n \n-Interrupts are mapped to signals or conditions as appropriate.  See\n-definition of unit\n-``Ada.Interrupt_Names`` in source file :file:`a-intnam.ads` for details\n-on the interrupts supported on a particular target.\n+There are no such restrictions.\n \n *\n-  \"Implementation-defined aspects of pre-elaboration.  See\n-  C.4(13).\"\n+  \"Any other forms of interrupt handler supported by the Attach_Handler and\n+  Interrupt_Handler aspects.  See C.3.1(19).\"\n \n-GNAT does not permit a partition to be restarted without reloading,\n-except under control of the debugger.\n+There are no such forms.\n \n *\n-  \"The semantics of pragma ``Discard_Names``.  See C.5(7).\"\n+  \"The semantics of some attributes and functions of an entity for which\n+   aspect Discard_Names is True.  See C.5(7).\"\n \n-Pragma ``Discard_Names`` causes names of enumeration literals to\n-be suppressed.  In the presence of this pragma, the Image attribute\n+If Discard_Names is True for an enumeration type, the Image attribute\n provides the image of the Pos of the literal, and Value accepts\n Pos values.\n \n-For tagged types, when pragmas ``Discard_Names`` and ``No_Tagged_Streams``\n-simultaneously apply, their Expanded_Name and External_Tag are initialized\n-with empty strings. This is useful to avoid exposing entity names at binary\n+If both of the aspects``Discard_Names`` and ``No_Tagged_Streams`` are true\n+for a tagged type, its Expanded_Name and External_Tag values are\n+empty strings. This is useful to avoid exposing entity names at binary\n level.\n \n+*\n+  \"The modulus and size of Test_and_Set_Flag.  See C.6.3(8).\"\n+\n+The modulus is 2**8. The size is 8.\n+\n+*\n+  \"The value used to represent the set value for Atomic_Test_and_Set.\n+  See C.6.3(10).\"\n+\n+The value is 1.\n+\n *\n   \"The result of the ``Task_Identification.Image``\n   attribute.  See C.7.1(7).\"\n@@ -939,32 +1030,11 @@ Protected entries or interrupt handlers can be executed by any\n convenient thread, so the value of ``Current_Task`` is undefined.\n \n *\n-  \"The effect of calling ``Current_Task`` from an entry\n-  body or interrupt handler.  See C.7.1(19).\"\n+  \"Granularity of locking for Task_Attributes.  See C.7.2(16).\"\n \n-When GNAT can determine statically that ``Current_Task`` is called directly in\n-the body of an entry (or barrier) then a warning is emitted and ``Program_Error``\n-is raised at run time. Otherwise, the effect of calling ``Current_Task`` from an\n-entry body or interrupt handler is to return the identification of the task\n-currently executing the code.\n-\n-*\n-  \"Implementation-defined aspects of\n-  ``Task_Attributes``.  See C.7.2(19).\"\n-\n-There are no implementation-defined aspects of ``Task_Attributes``.\n-\n-*\n-  \"Values of all ``Metrics``.  See D(2).\"\n-\n-The metrics information for GNAT depends on the performance of the\n-underlying operating system.  The sources of the run-time for tasking\n-implementation, together with the output from *-gnatG* can be\n-used to determine the exact sequence of operating systems calls made\n-to implement various tasking constructs.  Together with appropriate\n-information on the performance of the underlying operating system,\n-on the exact target in use, this information can be used to determine\n-the required metrics.\n+No locking is needed if the formal type Attribute has the size and\n+alignment of either Integer or System.Address and the bit representation\n+of Initial_Value is all zeroes. Otherwise, locking is performed.\n \n *\n   \"The declarations of ``Any_Priority`` and\n@@ -993,23 +1063,14 @@ and appropriate, these threads correspond to native threads of the\n underlying operating system.\n \n *\n-  \"Implementation-defined *policy_identifiers* allowed\n-  in a pragma ``Task_Dispatching_Policy``.  See D.2.2(3).\"\n-\n-There are no implementation-defined policy-identifiers allowed in this\n-pragma.\n-\n-*\n-  \"Implementation-defined aspects of priority inversion.  See\n-  D.2.2(16).\"\n+  \"Implementation-defined task dispatching policies.  See D.2.2(3).\"\n \n-Execution of a task cannot be preempted by the implementation processing\n-of delay expirations for lower priority tasks.\n+There are no implementation-defined task dispatching policies.\n \n *\n-  \"Implementation-defined task dispatching.  See D.2.2(18).\"\n+  \"The value of Default_Quantum in Dispatching.Round_Robin.  See D.2.5(4).\"\n \n-The policy is the same as that of the underlying threads implementation.\n+The value is 10 milliseconds.\n \n *\n   \"Implementation-defined *policy_identifiers* allowed\n@@ -1045,12 +1106,9 @@ The ceiling priority of internal protected objects is\n There are no implementation-defined queuing policies.\n \n *\n-  \"On a multiprocessor, any conditions that cause the\n-  completion of an aborted construct to be delayed later than what is\n-  specified for a single processor.  See D.6(3).\"\n+  \"Implementation-defined admission policies.  See D.4.1(1).\"\n \n-The semantics for abort on a multi-processor is the same as on a single\n-processor, there are no further delays.\n+There are no implementation-defined admission policies.\n \n *\n   \"Any operations that implicitly require heap storage\n@@ -1060,43 +1118,75 @@ The only operation that implicitly requires heap storage allocation is\n task creation.\n \n *\n-  \"What happens when a task terminates in the presence of\n-  pragma ``No_Task_Termination``. See D.7(15).\"\n+  \"When restriction No_Dynamic_CPU_Assignment applies to a partition, the\n+  processor on which a task with a CPU value of a Not_A_Specific_CPU will\n+  execute.  See D.7(10).\"\n+\n+Unknown.\n+\n+*\n+  \"When restriction No_Task_Termination applies to a partition, what happens\n+   when a task terminates.  See D.7(15.1).\"\n+\n+Execution is erroneous in that case.\n+\n+*\n+  \"The behavior when restriction Max_Storage_At_Blocking is violated.\n+   See D.7(17).\"\n+\n+Execution is erroneous in that case.\n+\n+*\n+  \"The behavior when restriction Max_Asynchronous_Select_Nesting is violated.\n+  See D.7(18).\"\n+\n+Execution is erroneous in that case.\n+\n+*\n+  \"The behavior when restriction Max_Tasks is violated.  See D.7(19).\"\n \n Execution is erroneous in that case.\n \n+* \"Whether the use of pragma Restrictions results in a reduction in program\n+   code or data size or execution time.  See D.7(20).\"\n+\n+   Yes it can, but the precise circumstances and properties of such reductions\n+   are difficult to characterize.\n+\n+*\n+  \"The value of Barrier_Limit'Last in Synchronous_Barriers.  See D.10.1(4).\"\n+\n+Synchronous_Barriers.Barrier_Limit'Last is Integer'Last .\n+\n *\n-  \"Implementation-defined aspects of pragma\n-  ``Restrictions``.  See D.7(20).\"\n+  \"When an aborted task that is waiting on a Synchronous_Barrier is aborted.\n+  See D.10.1(13).\"\n \n-There are no such implementation-defined aspects.\n+Difficult to characterize.\n \n *\n-  \"Implementation-defined aspects of package\n-  ``Real_Time``.  See D.8(17).\"\n+  \"The value of Min_Handler_Ceiling in Execution_Time.Group_Budgets.\n+   See D.14.2(7).\"\n \n-There are no implementation defined aspects of package ``Real_Time``.\n+See source file :file:`a-etgrbu.ads`.\n \n *\n-  \"Implementation-defined aspects of\n-  *delay_statements*.  See D.9(8).\"\n+  \"The value of CPU_Range'Last in System.Multiprocessors.  See D.16(4).\"\n \n-Any difference greater than one microsecond will cause the task to be\n-delayed (see D.9(7)).\n+See source file :file:`s-multip.ads`.\n \n *\n-  \"The upper bound on the duration of interrupt blocking\n-  caused by the implementation.  See D.12(5).\"\n+  \"The processor on which the environment task executes in the absence\n+  of a value for the aspect CPU.  See D.16(13).\"\n \n-The upper bound is determined by the underlying operating system.  In\n-no cases is it more than 10 milliseconds.\n+Unknown.\n \n *\n   \"The means for creating and executing distributed\n   programs.  See E(5).\"\n \n The GLADE package provides a utility GNATDIST for creating and executing\n-distributed programs.  See the GLADE reference manual for further details.\n+distributed programs. See the GLADE reference manual for further details.\n \n *\n   \"Any events that can result in a partition becoming\n@@ -1105,23 +1195,12 @@ distributed programs.  See the GLADE reference manual for further details.\n See the GLADE reference manual for full details on such events.\n \n *\n-  \"The scheduling policies, treatment of priorities, and\n-  management of shared resources between partitions in certain cases.  See\n-  E.1(11).\"\n+  \"The scheduling policies, treatment of priorities, and management of\n+  shared resources between partitions in certain cases.  See E.1(11).\"\n \n See the GLADE reference manual for full details on these aspects of\n multi-partition execution.\n \n-*\n-  \"Events that cause the version of a compilation unit to\n-  change.  See E.3(5).\"\n-\n-Editing the source file of a compilation unit, or the source files of\n-any units on which it is dependent in a significant way cause the version\n-to change.  No other actions cause the version number to change.  All changes\n-are significant except those which affect only layout, capitalization or\n-comments.\n-\n *\n   \"Whether the execution of the remote subprogram is\n   immediately aborted as a result of cancellation.  See E.4(13).\"\n@@ -1130,14 +1209,12 @@ See the GLADE reference manual for details on the effect of abort in\n a distributed application.\n \n *\n-  \"Implementation-defined aspects of the PCS.  See E.5(25).\"\n+  \"The range of type System.RPC.Partition_Id.  See E.5(14).\"\n \n-See the GLADE reference manual for a full description of all implementation\n-defined aspects of the PCS.\n+System.RPC.Partion_ID'Last is Integer'Last. See source file :file:`s-rpc.ads`.\n \n *\n-  \"Implementation-defined interfaces in the PCS.  See\n-  E.5(26).\"\n+  \"Implementation-defined interfaces in the PCS.  See E.5(26).\"\n \n See the GLADE reference manual for a full description of all\n implementation defined interfaces.\n@@ -1228,9 +1305,8 @@ properly generated.\n Not relevant, division is IEEE exact.\n \n *\n-  \"The definition of close result set, which determines the\n-  accuracy of certain fixed point multiplications and divisions.  See\n-  G.2.3(5).\"\n+  \"The definition of close result set, which determines the accuracy of\n+  certain fixed point multiplications and divisions.  See G.2.3(5).\"\n \n Operations in the close result set are performed using IEEE long format\n floating-point arithmetic.  The input operands are converted to\n@@ -1291,28 +1367,20 @@ IEEE infinite and Nan values are produced as appropriate.\n Information on those subjects is not yet available.\n \n *\n-  \"Information regarding bounded errors and erroneous\n-  execution.  See H.2(1).\"\n-\n-Information on this subject is not yet available.\n-\n-*\n-  \"Implementation-defined aspects of pragma\n-  ``Inspection_Point``.  See H.3.2(8).\"\n+  \"The accuracy requirements for the subprograms Solve, Inverse,\n+   Determinant, Eigenvalues and Eigensystem for type Real_Matrix.\n+   See G.3.1(81).\"\n \n-Pragma ``Inspection_Point`` ensures that the variable is live and can\n-be examined by the debugger at the inspection point.\n+Information on those subjects is not yet available.\n \n *\n-  \"Implementation-defined aspects of pragma\n-  ``Restrictions``.  See H.4(25).\"\n+  \"The accuracy requirements for the subprograms Solve, Inverse,\n+   Determinant, Eigenvalues and Eigensystem for type Complex_Matrix.\n+   See G.3.2(149).\"\n \n-There are no implementation-defined aspects of pragma ``Restrictions``.  The\n-use of pragma ``Restrictions [No_Exceptions]`` has no effect on the\n-generated code.  Checks must suppressed by use of pragma ``Suppress``.\n+Information on those subjects is not yet available.\n \n *\n-  \"Any restrictions on pragma ``Restrictions``.  See\n-  H.4(27).\"\n+  \"The consequences of violating No_Hidden_Indirect_Globals.  See H.4(23.9).\"\n \n-There are no restrictions on pragma ``Restrictions``.\n+Execution is erroneous in that case."}, {"sha": "9148b5f238e75e4dd07e25eaa99560b368e5e818", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 577, "deletions": 385, "changes": 962, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e66ee5bfe93de637f9ea9849a73807894936e0/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e66ee5bfe93de637f9ea9849a73807894936e0/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=62e66ee5bfe93de637f9ea9849a73807894936e0", "patch": "@@ -15713,7 +15713,13 @@ See separate section on source representation.\n @itemize *\n \n @item \n-\u201cThe control functions allowed in comments.  See 2.1(14).\u201d\n+\n+@table @asis\n+\n+@item \u201cThe semantics of an Ada program whose text is not in\n+\n+Normalization Form C.  See 2.1(4).\u201d\n+@end table\n @end itemize\n \n See separate section on source representation.\n@@ -15766,15 +15772,15 @@ not.\n @itemize *\n \n @item \n-\u201cThe sequence of characters of the value returned by\n-@code{S'Image} when some of the graphic characters of\n-@code{S'Wide_Image} are not defined in @code{Character}.  See\n-3.5(37).\u201d\n+\u201cThe message string associated with the Assertion_Error exception raised\n+by the failure of a predicate check if there is no applicable\n+Predicate_Failure aspect.  See 3.2.4(31).\u201d\n @end itemize\n \n-The sequence of characters is as defined by the wide character encoding\n-method used for the source.  See section on source representation for\n-further details.\n+In the case of a Dynamic_Predicate aspect, the string is\n+\u201cDynamic_Predicate failed at <source position>\u201d, where\n+\u201c<source position>\u201d might be something like \u201cfoo.adb:123\u201d.\n+The Static_Predicate case is handled analogously.\n \n \n @itemize *\n@@ -15991,6 +15997,19 @@ Block numbers of the form @code{B@emph{nnn}}, where @emph{nnn} is a\n decimal integer are allocated.\n \n \n+@itemize *\n+\n+@item \n+\u201cThe sequence of characters of the value returned by Tags.Expanded_Name\n+(respectively, Tags.Wide_Expanded_Name) when some of the graphic\n+characters of Tags.Wide_Wide_Expanded_Name are not defined in Character\n+(respectively, Wide_Character).  See 3.9(10.1).\u201d\n+@end itemize\n+\n+This is handled in the same way as the implementation-defined behavior\n+referenced in A.4.12(34).\n+\n+\n @itemize *\n \n @item \n@@ -16000,6 +16019,90 @@ decimal integer are allocated.\n See @ref{8,,Implementation Defined Attributes}.\n \n \n+@itemize *\n+\n+@item \n+\u201cThe value of the parameter to Empty for some container aggregates.\n+See 4.3.5(40).\u201d\n+@end itemize\n+\n+As per the suggestion given in the Annotated Ada RM, the default value\n+of the formal parameter is used if one exists and zero is used otherwise.\n+\n+\n+@itemize *\n+\n+@item \n+\u201cThe maximum number of chunks for a parallel reduction expression without\n+a chunk_specification.  See 4.5.10(21).\u201d\n+@end itemize\n+\n+Feature unimplemented.\n+\n+\n+@itemize *\n+\n+@item \n+\u201cRounding of real static expressions which are exactly half-way between\n+two machine numbers.  See 4.9(38).\u201d\n+@end itemize\n+\n+Round to even is used in all such cases.\n+\n+\n+@itemize *\n+\n+@item \n+\n+@table @asis\n+\n+@item \u201cThe maximum number of chunks for a parallel generalized iterator without\n+\n+a chunk_specification.  See 5.5.2(10).\u201d\n+@end table\n+@end itemize\n+\n+Feature unimplemented.\n+\n+\n+@itemize *\n+\n+@item \n+\u201cThe number of chunks for an array component iterator.  See 5.5.2(11).\u201d\n+@end itemize\n+\n+Feature unimplemented.\n+\n+\n+@itemize *\n+\n+@item \n+\u201cAny extensions of the Global aspect.  See 6.1.2(43).\u201d\n+@end itemize\n+\n+Feature unimplemented.\n+\n+\n+@itemize *\n+\n+@item \n+\u201cThe circumstances the implementation passes in the null value for a view\n+conversion of an access type used as an out parameter.  See 6.4.1(19).\u201d\n+@end itemize\n+\n+Difficult to characterize.\n+\n+\n+@itemize *\n+\n+@item \n+\u201cAny extensions of the Default_Initial_Condition aspect.  See 7.3.3(11).\u201d\n+@end itemize\n+\n+SPARK allows specifying @emph{null} as the Default_Initial_Condition\n+aspect of a type. See the SPARK reference manual for further details.\n+\n+\n @itemize *\n \n @item \n@@ -16012,7 +16115,7 @@ There are no implementation-defined time types.\n @itemize *\n \n @item \n-\u201cThe time base associated with relative delays.\u201d\n+\u201cThe time base associated with relative delays.  See 9.6(20).\u201d\n @end itemize\n \n See 9.6(20).  The time base used is that provided by the C library\n@@ -16022,8 +16125,7 @@ function @code{gettimeofday}.\n @itemize *\n \n @item \n-\u201cThe time base of the type @code{Calendar.Time}.  See\n-9.6(23).\u201d\n+\u201cThe time base of the type @code{Calendar.Time}.  See 9.6(23).\u201d\n @end itemize\n \n The time base used is that provided by the C library function\n@@ -16055,14 +16157,25 @@ There are no such limits.\n @itemize *\n \n @item \n-\u201cWhether or not two non-overlapping parts of a composite\n-object are independently addressable, in the case where packing, record\n-layout, or @code{Component_Size} is specified for the object.  See\n-9.10(1).\u201d\n+\n+@table @asis\n+\n+@item \u201cThe result of Calendar.Formatting.Image if its argument represents more\n+\n+than 100 hours.  See 9.6.1(86).\u201d\n+@end table\n @end itemize\n \n-Separate components are independently addressable if they do not share\n-overlapping storage units.\n+Calendar.Time_Error is raised.\n+\n+\n+@itemize *\n+\n+@item \n+\u201cImplementation-defined conflict check policies.  See 9.10.1(5).\u201d\n+@end itemize\n+\n+There are no implementation-defined conflict check policies.\n \n \n @itemize *\n@@ -16127,9 +16240,8 @@ options, refer to @emph{GNAT Make Program gnatmake} in the\n @itemize *\n \n @item \n-\u201cThe implementation-defined means, if any, of specifying\n-which compilation units are needed by a given compilation unit.  See\n-10.2(2).\u201d\n+\u201cThe implementation-defined means, if any, of specifying which compilation\n+units are needed by a given compilation unit.  See 10.2(2).\u201d\n @end itemize\n \n The units needed by a given compilation unit are as defined in\n@@ -16152,18 +16264,14 @@ corresponding @code{ALI} file as the input parameter to the binder.\n @itemize *\n \n @item \n-\u201cThe order of elaboration of @emph{library_items}.  See\n-10.2(18).\u201d\n+\u201cThe order of elaboration of @emph{library_items}.  See 10.2(18).\u201d\n @end itemize\n \n The first constraint on ordering is that it meets the requirements of\n Chapter 10 of the Ada Reference Manual.  This still leaves some\n-implementation dependent choices, which are resolved by first\n-elaborating bodies as early as possible (i.e., in preference to specs\n-where there is a choice), and second by evaluating the immediate with\n-clauses of a unit to determine the probably best choice, and\n-third by elaborating in alphabetical order of unit names\n-where a choice still remains.\n+implementation-dependent choices, which are resolved by analyzing\n+the elaboration code of each unit and identifying implicit\n+elaboration-order dependencies.\n \n \n @itemize *\n@@ -16182,14 +16290,13 @@ may have been set by a call to @code{Ada.Command_Line.Set_Exit_Status}).\n @itemize *\n \n @item \n-\u201cThe mechanisms for building and running partitions.  See\n-10.2(24).\u201d\n+\u201cThe mechanisms for building and running partitions.  See 10.2(24).\u201d\n @end itemize\n \n-GNAT itself supports programs with only a single partition.  The GNATDIST\n+GNAT itself supports programs with only a single partition. The GNATDIST\n tool provided with the GLADE package (which also includes an implementation\n of the PCS) provides a completely flexible method for building and running\n-programs consisting of multiple partitions.  See the separate GLADE manual\n+programs consisting of multiple partitions. See the separate GLADE manual\n for details.\n \n \n@@ -16211,15 +16318,14 @@ implementation.  See 10.2(28).\u201d\n @end itemize\n \n Passive partitions are supported on targets where shared memory is\n-provided by the operating system.  See the GLADE reference manual for\n+provided by the operating system. See the GLADE reference manual for\n further details.\n \n \n @itemize *\n \n @item \n-\u201cThe information returned by @code{Exception_Message}.  See\n-11.4.1(10).\u201d\n+\u201cThe information returned by @code{Exception_Message}.  See 11.4.1(10).\u201d\n @end itemize\n \n Exception message returns the null string unless a specific message has\n@@ -16287,6 +16393,54 @@ the last line is a single @code{LF} character (@code{16#0A#}).\n @end quotation\n \n \n+@itemize *\n+\n+@item \n+\u201cThe sequence of characters of the value returned by\n+Exceptions.Exception_Name (respectively, Exceptions.Wide_Exception_Name)\n+when some of the graphic characters of Exceptions.Wide_Wide_Exception_Name\n+are not defined in Character (respectively, Wide_Character).\n+See 11.4.1(12.1).\u201d\n+@end itemize\n+\n+This is handled in the same way as the implementation-defined behavior\n+referenced in A.4.12(34).\n+\n+\n+@itemize *\n+\n+@item \n+\u201cThe information returned by Exception_Information.  See 11.4.1(13).\u201d\n+@end itemize\n+\n+The exception name and the source location at which the exception was\n+raised are included.\n+\n+\n+@itemize *\n+\n+@item \n+\u201cImplementation-defined policy_identifiers and assertion_aspect_marks\n+allowed in a pragma Assertion_Policy.  See 11.4.2(9).\u201d\n+@end itemize\n+\n+Implementation-defined assertion_aspect_marks include Assert_And_Cut,\n+Assume, Contract_Cases, Debug, Ghost, Initial_Condition, Loop_Invariant,\n+Loop_Variant, Postcondition, Precondition, Predicate, Refined_Post,\n+Statement_Assertions, and Subprogram_Variant. Implementation-defined\n+policy_identifiers include Ignore and Suppressible.\n+\n+\n+@itemize *\n+\n+@item \n+\u201cThe default assertion policy.  See 11.4.2(10).\u201d\n+@end itemize\n+\n+The default assertion policy is Ignore, although this can be overridden\n+via compiler switches such as \u201c-gnata\u201d.\n+\n+\n @itemize *\n \n @item \n@@ -16303,8 +16457,33 @@ Check_Name. See the description of pragma @code{Suppress} for full details.\n @itemize *\n \n @item \n-\u201cThe interpretation of each aspect of representation.  See\n-13.1(20).\u201d\n+\u201cExistence and meaning of second parameter of pragma Unsuppress.\n+See 11.5(27.1).\u201d\n+@end itemize\n+\n+The legality rules for and semantics of the second parameter of pragma\n+Unsuppress match those for the second argument of pragma Suppress.\n+\n+\n+@itemize *\n+\n+@item \n+\n+@table @asis\n+\n+@item \u201cThe cases that cause conflicts between the representation of the\n+\n+ancestors of a type_declaration.  See 13.1(13.1).\u201d\n+@end table\n+@end itemize\n+\n+No such cases exist.\n+\n+\n+@itemize *\n+\n+@item \n+\u201cThe interpretation of each representation aspect.  See 13.1(20).\u201d\n @end itemize\n \n See separate section on data representations.\n@@ -16313,8 +16492,8 @@ See separate section on data representations.\n @itemize *\n \n @item \n-\u201cAny restrictions placed upon representation items.  See\n-13.1(20).\u201d\n+\u201cAny restrictions placed upon the specification of representation aspects.\n+See 13.1(20).\u201d\n @end itemize\n \n See separate section on data representations.\n@@ -16323,20 +16502,46 @@ See separate section on data representations.\n @itemize *\n \n @item \n-\u201cThe meaning of @code{Size} for indefinite subtypes.  See\n-13.3(48).\u201d\n+\u201cImplementation-defined aspects, including the syntax for specifying\n+such aspects and the legality rules for such aspects.  See 13.1.1(38).\u201d\n @end itemize\n \n-Size for an indefinite subtype is the maximum possible size, except that\n-for the case of a subprogram parameter, the size of the parameter object\n-is the actual size.\n+See @ref{120,,Implementation Defined Aspects}.\n \n \n @itemize *\n \n @item \n-\u201cThe default external representation for a type tag.  See\n-13.3(75).\u201d\n+\u201cThe set of machine scalars.  See 13.3(8.1).\u201d\n+@end itemize\n+\n+See separate section on data representations.\n+\n+\n+@itemize *\n+\n+@item \n+\u201cThe meaning of @code{Size} for indefinite subtypes.  See 13.3(48).\u201d\n+@end itemize\n+\n+The Size attribute of an indefinite subtype is not less than the Size\n+attribute of any object of that type.\n+\n+\n+@itemize *\n+\n+@item \n+\u201cThe meaning of Object_Size for indefinite subtypes.  See 13.3(58).\u201d\n+@end itemize\n+\n+The Object_Size attribute of an indefinite subtype is not less than the\n+Object_Size attribute of any object of that type.\n+\n+\n+@itemize *\n+\n+@item \n+\u201cThe default external representation for a type tag.  See 13.3(75).\u201d\n @end itemize\n \n The default external representation for a type tag is the fully expanded\n@@ -16379,13 +16584,11 @@ bit ordering corresponds to the natural endianness of the target architecture.\n @itemize *\n \n @item \n-\u201cThe contents of the visible part of package @code{System}\n-and its language-defined children.  See 13.7(2).\u201d\n+\u201cThe contents of the visible part of package @code{System}.  See 13.7(2).\u201d\n @end itemize\n \n-See the definition of these packages in files @code{system.ads} and\n-@code{s-stoele.ads}. Note that two declarations are added to package\n-System.\n+See the definition of package System in @code{system.ads}.\n+Note that two declarations are added to package System.\n \n @example\n Max_Priority           : constant Positive := Priority'Last;\n@@ -16396,9 +16599,19 @@ Max_Interrupt_Priority : constant Positive := Interrupt_Priority'Last;\n @itemize *\n \n @item \n-\u201cThe contents of the visible part of package\n-@code{System.Machine_Code}, and the meaning of\n-@emph{code_statements}.  See 13.8(7).\u201d\n+\u201cThe range of Storage_Elements.Storage_Offset, the modulus of\n+Storage_Elements.Storage_Element, and the declaration of\n+Storage_Elements.Integer_Address.  See 13.7.1(11).\u201d\n+@end itemize\n+\n+See the definition of package System.Storage_Elements in @code{s-stoele.ads}.\n+\n+\n+@itemize *\n+\n+@item \n+\u201cThe contents of the visible part of package @code{System.Machine_Code},\n+and the meaning of @emph{code_statements}.  See 13.8(7).\u201d\n @end itemize\n \n See the definition and documentation in file @code{s-maccod.ads}.\n@@ -16407,7 +16620,8 @@ See the definition and documentation in file @code{s-maccod.ads}.\n @itemize *\n \n @item \n-\u201cThe effect of unchecked conversion.  See 13.9(11).\u201d\n+\u201cThe result of unchecked conversion for instances with scalar result\n+types whose result is not defined by the language.  See 13.9(11).\u201d\n @end itemize\n \n Unchecked conversion between types of the same size\n@@ -16428,65 +16642,36 @@ made with appropriate alignment\n @itemize *\n \n @item \n-\u201cThe semantics of operations on invalid representations.\n-See 13.9.2(10-11).\u201d\n+\u201cThe result of unchecked conversion for instances with nonscalar result\n+types whose result is not defined by the language.  See 13.9(11).\u201d\n @end itemize\n \n-For assignments and other operations where the use of invalid values cannot\n-result in erroneous behavior, the compiler ignores the possibility of invalid\n-values. An exception is raised at the point where an invalid value would\n-result in erroneous behavior. For example executing:\n-\n-@example\n-procedure invalidvals is\n-  X : Integer := -1;\n-  Y : Natural range 1 .. 10;\n-  for Y'Address use X'Address;\n-  Z : Natural range 1 .. 10;\n-  A : array (Natural range 1 .. 10) of Integer;\n-begin\n-  Z := Y;     -- no exception\n-  A (Z) := 3; -- exception raised;\n-end;\n-@end example\n-\n-As indicated, an exception is raised on the array assignment, but not\n-on the simple assignment of the invalid negative value from Y to Z.\n+See preceding definition for the scalar result case.\n \n \n @itemize *\n \n @item \n-\u201cThe manner of choosing a storage pool for an access type\n-when @code{Storage_Pool} is not specified for the type.  See 13.11(17).\u201d\n+\u201cWhether or not the implementation provides user-accessible\n+names for the standard pool type(s).  See 13.11(17).\u201d\n @end itemize\n \n There are 3 different standard pools used by the compiler when\n @code{Storage_Pool} is not specified depending whether the type is local\n to a subprogram or defined at the library level and whether\n-@code{Storage_Size`@w{`}is specified or not.  See documentation in the runtime\n+@code{Storage_Size`@w{`}is specified or not. See documentation in the runtime\n library units `@w{`}System.Pool_Global}, @code{System.Pool_Size} and\n @code{System.Pool_Local} in files @code{s-poosiz.ads},\n @code{s-pooglo.ads} and @code{s-pooloc.ads} for full details on the\n-default pools used.\n-\n-\n-@itemize *\n-\n-@item \n-\u201cWhether or not the implementation provides user-accessible\n-names for the standard pool type(s).  See 13.11(17).\u201d\n-@end itemize\n-\n-See documentation in the sources of the run time mentioned in the previous\n-paragraph.  All these pools are accessible by means of @cite{with}ing\n+default pools used.  All these pools are accessible by means of @cite{with}ing\n these units.\n \n \n @itemize *\n \n @item \n-\u201cThe meaning of @code{Storage_Size}.  See 13.11(18).\u201d\n+\u201cThe meaning of @code{Storage_Size} when neither the Storage_Size nor the\n+Storage_Pool is specified for an access type.  See 13.11(18).\u201d\n @end itemize\n \n @code{Storage_Size} is measured in storage units, and refers to the\n@@ -16497,20 +16682,19 @@ stack space for a task.\n @itemize *\n \n @item \n-\u201cImplementation-defined aspects of storage pools.  See\n-13.11(22).\u201d\n+\u201cThe effect of specifying aspect Default_Storage_Pool on an instance\n+of a language-defined generic unit.  See 13.11.3(5).\u201d\n @end itemize\n \n-See documentation in the sources of the run time mentioned in the\n-paragraph about standard storage pools above\n-for details on GNAT-defined aspects of storage pools.\n+Instances of language-defined generic units are treated the same as other\n+instances with respect to the Default_Storage_Pool aspect.\n \n \n @itemize *\n \n @item \n-\u201cThe set of restrictions allowed in a pragma\n-@code{Restrictions}.  See 13.12(7).\u201d\n+\u201cImplementation-defined restrictions allowed in a pragma\n+@code{Restrictions}.  See 13.12(8.7).\u201d\n @end itemize\n \n See @ref{9,,Standard and Implementation Defined Restrictions}.\n@@ -16523,17 +16707,26 @@ See @ref{9,,Standard and Implementation Defined Restrictions}.\n @code{Restrictions} pragmas.  See 13.12(9).\u201d\n @end itemize\n \n-Restrictions that can be checked at compile time result in illegalities\n-if violated.  Currently there are no other consequences of violating\n-restrictions.\n+Restrictions that can be checked at compile time are enforced at\n+compile time; violations are illegal. For other restrictions, any\n+violation during program execution results in erroneous execution.\n \n \n @itemize *\n \n @item \n-\u201cThe representation used by the @code{Read} and\n-@code{Write} attributes of elementary types in terms of stream\n-elements.  See 13.13.2(9).\u201d\n+\u201cImplementation-defined usage profiles allowed in a pragma Profile.\n+See 13.12(15).\u201d\n+@end itemize\n+\n+See @ref{7,,Implementation Defined Pragmas}.\n+\n+\n+@itemize *\n+\n+@item \n+\u201cThe contents of the stream elements read and written by the Read and\n+Write attributes of elementary types.  See 13.13.2(9).\u201d\n @end itemize\n \n The representation is the in-memory representation of the base type of\n@@ -16554,13 +16747,38 @@ See items describing the integer and floating-point types supported.\n @itemize *\n \n @item \n-\u201cThe string returned by @code{Character_Set_Version}.\n-See A.3.5(3).\u201d\n+\u201cThe values returned by Strings.Hash.  See A.4.9(3).\u201d\n+@end itemize\n+\n+This hash function has predictable collisions and is subject to\n+equivalent substring attacks. It is not suitable for construction of a\n+hash table keyed on possibly malicious user input.\n+\n+\n+@itemize *\n+\n+@item \n+\u201cThe value returned by a call to a Text_Buffer Get procedure if any\n+character in the returned sequence is not defined in Character.\n+See A.4.12(34).\u201d\n+@end itemize\n+\n+The contents of a buffer is represented internally as a UTF_8 string.\n+The value return by Text_Buffer.Get is the result of passing that\n+UTF_8 string to UTF_Encoding.Strings.Decode.\n+\n+\n+@itemize *\n+\n+@item \n+\u201cThe value returned by a call to a Text_Buffer Wide_Get procedure if\n+any character in the returned sequence is not defined in Wide_Character.\n+See A.4.12(34).\u201d\n @end itemize\n \n-@code{Ada.Wide_Characters.Handling.Character_Set_Version} returns\n-the string \u201cUnicode 4.0\u201d, referring to version 4.0 of the\n-Unicode specification.\n+The contents of a buffer is represented internally as a UTF_8 string.\n+The value return by Text_Buffer.Wide_Get is the result of passing that\n+UTF_8 string to UTF_Encoding.Wide_Strings.Decode.\n \n \n @itemize *\n@@ -16606,18 +16824,6 @@ Maximum image width is 6864, see library file @code{s-rannum.ads}.\n Maximum image width is 6864, see library file @code{s-rannum.ads}.\n \n \n-@itemize *\n-\n-@item \n-\u201cThe algorithms for random number generation.  See\n-A.5.2(32).\u201d\n-@end itemize\n-\n-The algorithm is the Mersenne Twister, as documented in the source file\n-@code{s-rannum.adb}. This version of the algorithm has a period of\n-2**19937-1.\n-\n-\n @itemize *\n \n @item \n@@ -16630,18 +16836,6 @@ the fixed-width decimal representations of the 624 32-bit integers\n of the state vector.\n \n \n-@itemize *\n-\n-@item \n-\u201cThe minimum time interval between calls to the\n-time-dependent Reset procedure that are guaranteed to initiate different\n-random number sequences.  See A.5.2(45).\u201d\n-@end itemize\n-\n-The minimum period between reset calls to guarantee distinct series of\n-random numbers is one microsecond.\n-\n-\n @itemize *\n \n @item \n@@ -16651,26 +16845,14 @@ random numbers is one microsecond.\n Annex is not supported.  See A.5.3(72).\u201d\n @end itemize\n \n-Run the compiler with @emph{-gnatS} to produce a listing of package\n-@code{Standard}, has the values of all numeric attributes.\n+Running the compiler with @emph{-gnatS} to produce a listing of package\n+@code{Standard} displays the values of these attributes.\n \n \n @itemize *\n \n @item \n-\u201cAny implementation-defined characteristics of the\n-input-output packages.  See A.7(14).\u201d\n-@end itemize\n-\n-There are no special implementation defined characteristics for these\n-packages.\n-\n-\n-@itemize *\n-\n-@item \n-\u201cThe value of @code{Buffer_Size} in @code{Storage_IO}.  See\n-A.9(10).\u201d\n+\u201cThe value of @code{Buffer_Size} in @code{Storage_IO}.  See A.9(10).\u201d\n @end itemize\n \n All type representations are contiguous, and the @code{Buffer_Size} is\n@@ -16686,14 +16868,13 @@ standard error See A.10(5).\u201d\n @end itemize\n \n These files are mapped onto the files provided by the C streams\n-libraries.  See source file @code{i-cstrea.ads} for further details.\n+libraries. See source file @code{i-cstrea.ads} for further details.\n \n \n @itemize *\n \n @item \n-\u201cThe accuracy of the value produced by @code{Put}.  See\n-A.10.9(36).\u201d\n+\u201cThe accuracy of the value produced by @code{Put}.  See A.10.9(36).\u201d\n @end itemize\n \n If more digits are requested in the output than are represented by the\n@@ -16704,168 +16885,140 @@ significant digit positions.\n @itemize *\n \n @item \n-\u201cThe meaning of @code{Argument_Count}, @code{Argument}, and\n-@code{Command_Name}.  See A.15(1).\u201d\n+\u201cCurrent size for a stream file for which positioning is not supported.\n+See A.12.1(1.1).\u201d\n @end itemize\n \n-These are mapped onto the @code{argv} and @code{argc} parameters of the\n-main program in the natural manner.\n+Positioning is supported.\n \n \n @itemize *\n \n @item \n-\u201cThe interpretation of the @code{Form} parameter in procedure\n-@code{Create_Directory}.  See A.16(56).\u201d\n+\u201cThe meaning of @code{Argument_Count}, @code{Argument}, and\n+@code{Command_Name}.  See A.15(1).\u201d\n @end itemize\n \n-The @code{Form} parameter is not used.\n+These are mapped onto the @code{argv} and @code{argc} parameters of the\n+main program in the natural manner.\n \n \n @itemize *\n \n @item \n-\u201cThe interpretation of the @code{Form} parameter in procedure\n-@code{Create_Path}.  See A.16(60).\u201d\n+\u201cThe interpretation of file names and directory names.  See A.16(46).\u201d\n @end itemize\n \n-The @code{Form} parameter is not used.\n+These names are interpreted consistently with the underlying file system.\n \n \n @itemize *\n \n @item \n-\u201cThe interpretation of the @code{Form} parameter in procedure\n-@code{Copy_File}.  See A.16(68).\u201d\n+\u201cThe maxium value for a file size in Directories.  See A.16(87).\u201d\n @end itemize\n \n-The @code{Form} parameter is case-insensitive.\n-Two fields are recognized in the @code{Form} parameter:\n-\n-@example\n-*preserve=<value>*\n-*mode=<value>*\n-@end example\n-\n-<value> starts immediately after the character \u2018=\u2019 and ends with the\n-character immediately preceding the next comma (\u2018,\u2019) or with the last\n-character of the parameter.\n-\n-The only possible values for preserve= are:\n-\n+Directories.File_Size\u2019Last is equal to Long_Long_Integer\u2019Last .\n \n-@multitable {xxxxxxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} \n-@headitem\n-\n-Value\n \n-@tab\n-\n-Meaning\n-\n-@item\n-\n-@emph{no_attributes}\n+@itemize *\n \n-@tab\n+@item \n \n-Do not try to preserve any file attributes. This is the\n-default if no preserve= is found in Form.\n+@table @asis\n \n-@item\n+@item \u201cThe result for Directories.Size for a directory or special file.\n \n-@emph{all_attributes}\n+See A.16(93).\u201d\n+@end table\n+@end itemize\n \n-@tab\n+Name_Error is raised.\n \n-Try to preserve all file attributes (timestamps, access rights).\n \n-@item\n+@itemize *\n \n-@emph{timestamps}\n+@item \n \n-@tab\n+@table @asis\n \n-Preserve the timestamp of the copied file, but not the other\n-file attributes.\n+@item \u201cThe result for Directories.Modification_Time for a directory or special file.\n \n-@end multitable\n+See A.16(93).\u201d\n+@end table\n+@end itemize\n \n+Name_Error is raised.\n \n-The only possible values for mode= are:\n \n+@itemize *\n \n-@multitable {xxxxxxxxxxxxxxxx} {xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} \n-@headitem\n+@item \n \n-Value\n+@table @asis\n \n-@tab\n+@item \u201cThe interpretation of a nonnull search pattern in Directories.\n \n-Meaning\n+See A.16(104).\u201d\n+@end table\n+@end itemize\n \n-@item\n+When the @code{Pattern} parameter is not the null string, it is interpreted\n+according to the syntax of regular expressions as defined in the\n+@code{GNAT.Regexp} package.\n \n-@emph{copy}\n+See @ref{25a,,GNAT.Regexp (g-regexp.ads)}.\n \n-@tab\n \n-Only do the copy if the destination file does not already exist.\n-If it already exists, Copy_File fails.\n+@itemize *\n \n-@item\n+@item \n \n-@emph{overwrite}\n+@table @asis\n \n-@tab\n+@item \u201cThe results of a Directories search if the contents of the directory are\n \n-Copy the file in all cases. Overwrite an already existing destination file.\n+altered while a search is in progress.  See A.16(110).\u201d\n+@end table\n+@end itemize\n \n-@item\n+The effect of a call to Get_Next_Entry is determined by the current\n+state of the directory.\n \n-@emph{append}\n \n-@tab\n+@itemize *\n \n-Append the original file to the destination file. If the destination file\n-does not exist, the destination file is a copy of the source file.\n-When mode=append, the field preserve=, if it exists, is not taken into account.\n+@item \n+\u201cThe definition and meaning of an environment variable.  See A.17(1).\u201d\n+@end itemize\n \n-@end multitable\n+This definition is determined by the underlying operating system.\n \n \n-If the Form parameter includes one or both of the fields and the value or\n-values are incorrect, Copy_file fails with Use_Error.\n+@itemize *\n \n-Examples of correct Forms:\n+@item \n+\u201cThe circumstances where an environment variable cannot be defined.\n+See A.17(16).\u201d\n \n-@example\n-Form => \"preserve=no_attributes,mode=overwrite\" (the default)\n-Form => \"mode=append\"\n-Form => \"mode=copy, preserve=all_attributes\"\n-@end example\n+There are no such implementation-defined circumstances.\n \n-Examples of incorrect Forms:\n+@item \n+\u201cEnvironment names for which Set has the effect of Clear.  See A.17(17).\u201d\n+@end itemize\n \n-@example\n-Form => \"preserve=junk\"\n-Form => \"mode=internal, preserve=timestamps\"\n-@end example\n+There are no such names.\n \n \n @itemize *\n \n @item \n-\u201cThe interpretation of the @code{Pattern} parameter, when not the null string,\n-in the @code{Start_Search} and @code{Search} procedures.\n-See A.16(104) and A.16(112).\u201d\n+\u201cThe value of Containers.Hash_Type\u2019Modulus. The value of\n+Containers.Count_Type\u2019Last.  See A.18.1(7).\u201d\n @end itemize\n \n-When the @code{Pattern} parameter is not the null string, it is interpreted\n-according to the syntax of regular expressions as defined in the\n-@code{GNAT.Regexp} package.\n-\n-See @ref{25a,,GNAT.Regexp (g-regexp.ads)}.\n+Containers.Hash_Type\u2019Modulus is 2**32.\n+Containers.Count_Type\u2019Last is 2**31 - 1.\n \n \n @itemize *\n@@ -17063,9 +17216,8 @@ Link names are the actual names used by the linker.\n @itemize *\n \n @item \n-\u201cThe manner of choosing link names when neither the link\n-name nor the address of an imported or exported entity is specified.  See\n-B.1(36).\u201d\n+\u201cThe manner of choosing link names when neither the link name nor the\n+address of an imported or exported entity is specified.  See B.1(36).\u201d\n @end itemize\n \n The default linker name is that which would be assigned by the relevant\n@@ -17115,6 +17267,16 @@ See files with prefix @code{i-} in the distributed library.\n See files with prefix @code{i-} in the distributed library.\n \n \n+@itemize *\n+\n+@item \n+\u201cThe definitions of certain types and constants in Interfaces.C.\n+See B.3(41).\u201d\n+@end itemize\n+\n+See source file @code{i-c.ads}.\n+\n+\n @itemize *\n \n @item \n@@ -17192,62 +17354,84 @@ For initialization, see the file @code{i-cobol.ads} in the distributed library.\n @itemize *\n \n @item \n-\u201cSupport for access to machine instructions.  See C.1(1).\u201d\n+\u201cThe types Fortran_Integer, Real, Double_Precision, and Character_Set\n+in Interfaces.Fortran.  See B.5(17).\u201d\n @end itemize\n \n-See documentation in file @code{s-maccod.ads} in the distributed library.\n+See source file @code{i-fortra.ads}. These types are derived, respectively,\n+from Integer, Float, Long_Float, and Character.\n \n \n @itemize *\n \n @item \n-\u201cImplementation-defined aspects of access to machine\n-operations.  See C.1(9).\u201d\n+\u201cImplementation-defined intrinsic subprograms.  See C.1(1).\u201d\n @end itemize\n \n-See documentation in file @code{s-maccod.ads} in the distributed library.\n+See separate section on Intrinsic Subprograms.\n \n \n @itemize *\n \n @item \n-\u201cImplementation-defined aspects of interrupts.  See C.3(2).\u201d\n+\u201cAny restrictions on a protected procedure or its containing type when an\n+aspect Attach_handler or Interrupt_Handler is specified.  See C.3.1(17).\u201d\n @end itemize\n \n-Interrupts are mapped to signals or conditions as appropriate.  See\n-definition of unit\n-@code{Ada.Interrupt_Names} in source file @code{a-intnam.ads} for details\n-on the interrupts supported on a particular target.\n+There are no such restrictions.\n \n \n @itemize *\n \n @item \n-\u201cImplementation-defined aspects of pre-elaboration.  See\n-C.4(13).\u201d\n+\u201cAny other forms of interrupt handler supported by the Attach_Handler and\n+Interrupt_Handler aspects.  See C.3.1(19).\u201d\n @end itemize\n \n-GNAT does not permit a partition to be restarted without reloading,\n-except under control of the debugger.\n+There are no such forms.\n \n \n @itemize *\n \n @item \n-\u201cThe semantics of pragma @code{Discard_Names}.  See C.5(7).\u201d\n+\n+@table @asis\n+\n+@item \u201cThe semantics of some attributes and functions of an entity for which\n+\n+aspect Discard_Names is True.  See C.5(7).\u201d\n+@end table\n @end itemize\n \n-Pragma @code{Discard_Names} causes names of enumeration literals to\n-be suppressed.  In the presence of this pragma, the Image attribute\n+If Discard_Names is True for an enumeration type, the Image attribute\n provides the image of the Pos of the literal, and Value accepts\n Pos values.\n \n-For tagged types, when pragmas @code{Discard_Names} and @code{No_Tagged_Streams}\n-simultaneously apply, their Expanded_Name and External_Tag are initialized\n-with empty strings. This is useful to avoid exposing entity names at binary\n+If both of the aspects`@w{`}Discard_Names`@w{`} and @code{No_Tagged_Streams} are true\n+for a tagged type, its Expanded_Name and External_Tag values are\n+empty strings. This is useful to avoid exposing entity names at binary\n level.\n \n \n+@itemize *\n+\n+@item \n+\u201cThe modulus and size of Test_and_Set_Flag.  See C.6.3(8).\u201d\n+@end itemize\n+\n+The modulus is 2**8. The size is 8.\n+\n+\n+@itemize *\n+\n+@item \n+\u201cThe value used to represent the set value for Atomic_Test_and_Set.\n+See C.6.3(10).\u201d\n+@end itemize\n+\n+The value is 1.\n+\n+\n @itemize *\n \n @item \n@@ -17294,41 +17478,12 @@ convenient thread, so the value of @code{Current_Task} is undefined.\n @itemize *\n \n @item \n-\u201cThe effect of calling @code{Current_Task} from an entry\n-body or interrupt handler.  See C.7.1(19).\u201d\n-@end itemize\n-\n-When GNAT can determine statically that @code{Current_Task} is called directly in\n-the body of an entry (or barrier) then a warning is emitted and @code{Program_Error}\n-is raised at run time. Otherwise, the effect of calling @code{Current_Task} from an\n-entry body or interrupt handler is to return the identification of the task\n-currently executing the code.\n-\n-\n-@itemize *\n-\n-@item \n-\u201cImplementation-defined aspects of\n-@code{Task_Attributes}.  See C.7.2(19).\u201d\n-@end itemize\n-\n-There are no implementation-defined aspects of @code{Task_Attributes}.\n-\n-\n-@itemize *\n-\n-@item \n-\u201cValues of all @code{Metrics}.  See D(2).\u201d\n+\u201cGranularity of locking for Task_Attributes.  See C.7.2(16).\u201d\n @end itemize\n \n-The metrics information for GNAT depends on the performance of the\n-underlying operating system.  The sources of the run-time for tasking\n-implementation, together with the output from @emph{-gnatG} can be\n-used to determine the exact sequence of operating systems calls made\n-to implement various tasking constructs.  Together with appropriate\n-information on the performance of the underlying operating system,\n-on the exact target in use, this information can be used to determine\n-the required metrics.\n+No locking is needed if the formal type Attribute has the size and\n+alignment of either Integer or System.Address and the bit representation\n+of Initial_Value is all zeroes. Otherwise, locking is performed.\n \n \n @itemize *\n@@ -17376,32 +17531,19 @@ underlying operating system.\n @itemize *\n \n @item \n-\u201cImplementation-defined @emph{policy_identifiers} allowed\n-in a pragma @code{Task_Dispatching_Policy}.  See D.2.2(3).\u201d\n-@end itemize\n-\n-There are no implementation-defined policy-identifiers allowed in this\n-pragma.\n-\n-\n-@itemize *\n-\n-@item \n-\u201cImplementation-defined aspects of priority inversion.  See\n-D.2.2(16).\u201d\n+\u201cImplementation-defined task dispatching policies.  See D.2.2(3).\u201d\n @end itemize\n \n-Execution of a task cannot be preempted by the implementation processing\n-of delay expirations for lower priority tasks.\n+There are no implementation-defined task dispatching policies.\n \n \n @itemize *\n \n @item \n-\u201cImplementation-defined task dispatching.  See D.2.2(18).\u201d\n+\u201cThe value of Default_Quantum in Dispatching.Round_Robin.  See D.2.5(4).\u201d\n @end itemize\n \n-The policy is the same as that of the underlying threads implementation.\n+The value is 10 milliseconds.\n \n \n @itemize *\n@@ -17456,13 +17598,10 @@ There are no implementation-defined queuing policies.\n @itemize *\n \n @item \n-\u201cOn a multiprocessor, any conditions that cause the\n-completion of an aborted construct to be delayed later than what is\n-specified for a single processor.  See D.6(3).\u201d\n+\u201cImplementation-defined admission policies.  See D.4.1(1).\u201d\n @end itemize\n \n-The semantics for abort on a multi-processor is the same as on a single\n-processor, there are no further delays.\n+There are no implementation-defined admission policies.\n \n \n @itemize *\n@@ -17479,8 +17618,24 @@ task creation.\n @itemize *\n \n @item \n-\u201cWhat happens when a task terminates in the presence of\n-pragma @code{No_Task_Termination}. See D.7(15).\u201d\n+\u201cWhen restriction No_Dynamic_CPU_Assignment applies to a partition, the\n+processor on which a task with a CPU value of a Not_A_Specific_CPU will\n+execute.  See D.7(10).\u201d\n+@end itemize\n+\n+Unknown.\n+\n+\n+@itemize *\n+\n+@item \n+\n+@table @asis\n+\n+@item \u201cWhen restriction No_Task_Termination applies to a partition, what happens\n+\n+when a task terminates.  See D.7(15.1).\u201d\n+@end table\n @end itemize\n \n Execution is erroneous in that case.\n@@ -17489,43 +17644,100 @@ Execution is erroneous in that case.\n @itemize *\n \n @item \n-\u201cImplementation-defined aspects of pragma\n-@code{Restrictions}.  See D.7(20).\u201d\n+\n+@table @asis\n+\n+@item \u201cThe behavior when restriction Max_Storage_At_Blocking is violated.\n+\n+See D.7(17).\u201d\n+@end table\n @end itemize\n \n-There are no such implementation-defined aspects.\n+Execution is erroneous in that case.\n \n \n @itemize *\n \n @item \n-\u201cImplementation-defined aspects of package\n-@code{Real_Time}.  See D.8(17).\u201d\n+\u201cThe behavior when restriction Max_Asynchronous_Select_Nesting is violated.\n+See D.7(18).\u201d\n @end itemize\n \n-There are no implementation defined aspects of package @code{Real_Time}.\n+Execution is erroneous in that case.\n \n \n @itemize *\n \n @item \n-\u201cImplementation-defined aspects of\n-@emph{delay_statements}.  See D.9(8).\u201d\n+\u201cThe behavior when restriction Max_Tasks is violated.  See D.7(19).\u201d\n @end itemize\n \n-Any difference greater than one microsecond will cause the task to be\n-delayed (see D.9(7)).\n+Execution is erroneous in that case.\n \n \n @itemize *\n \n @item \n-\u201cThe upper bound on the duration of interrupt blocking\n-caused by the implementation.  See D.12(5).\u201d\n+\n+@table @asis\n+\n+@item \u201cWhether the use of pragma Restrictions results in a reduction in program\n+\n+code or data size or execution time.  See D.7(20).\u201d\n+\n+Yes it can, but the precise circumstances and properties of such reductions\n+are difficult to characterize.\n+@end table\n+\n+@item \n+\u201cThe value of Barrier_Limit\u2019Last in Synchronous_Barriers.  See D.10.1(4).\u201d\n @end itemize\n \n-The upper bound is determined by the underlying operating system.  In\n-no cases is it more than 10 milliseconds.\n+Synchronous_Barriers.Barrier_Limit\u2019Last is Integer\u2019Last .\n+\n+\n+@itemize *\n+\n+@item \n+\u201cWhen an aborted task that is waiting on a Synchronous_Barrier is aborted.\n+See D.10.1(13).\u201d\n+@end itemize\n+\n+Difficult to characterize.\n+\n+\n+@itemize *\n+\n+@item \n+\n+@table @asis\n+\n+@item \u201cThe value of Min_Handler_Ceiling in Execution_Time.Group_Budgets.\n+\n+See D.14.2(7).\u201d\n+@end table\n+@end itemize\n+\n+See source file @code{a-etgrbu.ads}.\n+\n+\n+@itemize *\n+\n+@item \n+\u201cThe value of CPU_Range\u2019Last in System.Multiprocessors.  See D.16(4).\u201d\n+@end itemize\n+\n+See source file @code{s-multip.ads}.\n+\n+\n+@itemize *\n+\n+@item \n+\u201cThe processor on which the environment task executes in the absence\n+of a value for the aspect CPU.  See D.16(13).\u201d\n+@end itemize\n+\n+Unknown.\n \n \n @itemize *\n@@ -17536,7 +17748,7 @@ programs.  See E(5).\u201d\n @end itemize\n \n The GLADE package provides a utility GNATDIST for creating and executing\n-distributed programs.  See the GLADE reference manual for further details.\n+distributed programs. See the GLADE reference manual for further details.\n \n \n @itemize *\n@@ -17552,29 +17764,14 @@ See the GLADE reference manual for full details on such events.\n @itemize *\n \n @item \n-\u201cThe scheduling policies, treatment of priorities, and\n-management of shared resources between partitions in certain cases.  See\n-E.1(11).\u201d\n+\u201cThe scheduling policies, treatment of priorities, and management of\n+shared resources between partitions in certain cases.  See E.1(11).\u201d\n @end itemize\n \n See the GLADE reference manual for full details on these aspects of\n multi-partition execution.\n \n \n-@itemize *\n-\n-@item \n-\u201cEvents that cause the version of a compilation unit to\n-change.  See E.3(5).\u201d\n-@end itemize\n-\n-Editing the source file of a compilation unit, or the source files of\n-any units on which it is dependent in a significant way cause the version\n-to change.  No other actions cause the version number to change.  All changes\n-are significant except those which affect only layout, capitalization or\n-comments.\n-\n-\n @itemize *\n \n @item \n@@ -17589,18 +17786,16 @@ a distributed application.\n @itemize *\n \n @item \n-\u201cImplementation-defined aspects of the PCS.  See E.5(25).\u201d\n+\u201cThe range of type System.RPC.Partition_Id.  See E.5(14).\u201d\n @end itemize\n \n-See the GLADE reference manual for a full description of all implementation\n-defined aspects of the PCS.\n+System.RPC.Partion_ID\u2019Last is Integer\u2019Last. See source file @code{s-rpc.ads}.\n \n \n @itemize *\n \n @item \n-\u201cImplementation-defined interfaces in the PCS.  See\n-E.5(26).\u201d\n+\u201cImplementation-defined interfaces in the PCS.  See E.5(26).\u201d\n @end itemize\n \n See the GLADE reference manual for a full description of all\n@@ -17778,9 +17973,8 @@ Not relevant, division is IEEE exact.\n @itemize *\n \n @item \n-\u201cThe definition of close result set, which determines the\n-accuracy of certain fixed point multiplications and divisions.  See\n-G.2.3(5).\u201d\n+\u201cThe definition of close result set, which determines the accuracy of\n+certain fixed point multiplications and divisions.  See G.2.3(5).\u201d\n @end itemize\n \n Operations in the close result set are performed using IEEE long format\n@@ -17873,44 +18067,42 @@ Information on those subjects is not yet available.\n @itemize *\n \n @item \n-\u201cInformation regarding bounded errors and erroneous\n-execution.  See H.2(1).\u201d\n-@end itemize\n-\n-Information on this subject is not yet available.\n \n+@table @asis\n \n-@itemize *\n+@item \u201cThe accuracy requirements for the subprograms Solve, Inverse,\n \n-@item \n-\u201cImplementation-defined aspects of pragma\n-@code{Inspection_Point}.  See H.3.2(8).\u201d\n+Determinant, Eigenvalues and Eigensystem for type Real_Matrix.\n+See G.3.1(81).\u201d\n+@end table\n @end itemize\n \n-Pragma @code{Inspection_Point} ensures that the variable is live and can\n-be examined by the debugger at the inspection point.\n+Information on those subjects is not yet available.\n \n \n @itemize *\n \n @item \n-\u201cImplementation-defined aspects of pragma\n-@code{Restrictions}.  See H.4(25).\u201d\n+\n+@table @asis\n+\n+@item \u201cThe accuracy requirements for the subprograms Solve, Inverse,\n+\n+Determinant, Eigenvalues and Eigensystem for type Complex_Matrix.\n+See G.3.2(149).\u201d\n+@end table\n @end itemize\n \n-There are no implementation-defined aspects of pragma @code{Restrictions}.  The\n-use of pragma @code{Restrictions [No_Exceptions]} has no effect on the\n-generated code.  Checks must suppressed by use of pragma @code{Suppress}.\n+Information on those subjects is not yet available.\n \n \n @itemize *\n \n @item \n-\u201cAny restrictions on pragma @code{Restrictions}.  See\n-H.4(27).\u201d\n+\u201cThe consequences of violating No_Hidden_Indirect_Globals.  See H.4(23.9).\u201d\n @end itemize\n \n-There are no restrictions on pragma @code{Restrictions}.\n+Execution is erroneous in that case.\n \n @node Intrinsic Subprograms,Representation Clauses and Pragmas,Implementation Defined Characteristics,Top\n @anchor{gnat_rm/intrinsic_subprograms doc}@anchor{25b}@anchor{gnat_rm/intrinsic_subprograms id1}@anchor{25c}@anchor{gnat_rm/intrinsic_subprograms intrinsic-subprograms}@anchor{c}"}]}