{"sha": "412dc3482fd83f919a5ad96656ecf5df6c18d20d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEyZGMzNDgyZmQ4M2Y5MTlhNWFkOTY2NTZlY2Y1ZGY2YzE4ZDIwZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-03-03T13:06:22Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-03-03T13:06:22Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r380", "tree": {"sha": "adf65e85dfa64c79e038c37ad607c78c7d85feb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adf65e85dfa64c79e038c37ad607c78c7d85feb5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/412dc3482fd83f919a5ad96656ecf5df6c18d20d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/412dc3482fd83f919a5ad96656ecf5df6c18d20d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/412dc3482fd83f919a5ad96656ecf5df6c18d20d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/412dc3482fd83f919a5ad96656ecf5df6c18d20d/comments", "author": null, "committer": null, "parents": [{"sha": "983a9061ab77a29915a535f307a65fe0d6ff49be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/983a9061ab77a29915a535f307a65fe0d6ff49be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/983a9061ab77a29915a535f307a65fe0d6ff49be"}], "stats": {"total": 85, "additions": 34, "deletions": 51}, "files": [{"sha": "be1b3b0ff23d8bc28b1f162e2aeac4fd6928bf6f", "filename": "gcc/config/vax/vax.md", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/412dc3482fd83f919a5ad96656ecf5df6c18d20d/gcc%2Fconfig%2Fvax%2Fvax.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/412dc3482fd83f919a5ad96656ecf5df6c18d20d/gcc%2Fconfig%2Fvax%2Fvax.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.md?ref=412dc3482fd83f919a5ad96656ecf5df6c18d20d", "patch": "@@ -1533,8 +1533,9 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (gt (match_operand:SI 0 \"general_operand\" \"+g\")\n-\t     (const_int 1))\n+\t (gt (plus:SI (match_operand:SI 0 \"general_operand\" \"+g\")\n+\t\t      (const_int -1))\n+\t     (const_int 0))\n \t (label_ref (match_operand 1 \"\" \"\"))\n \t (pc)))\n    (set (match_dup 0)\n@@ -1546,8 +1547,9 @@\n (define_insn \"\"\n   [(set (pc)\n \t(if_then_else\n-\t (ge (match_operand:SI 0 \"general_operand\" \"+g\")\n-\t     (const_int 1))\n+\t (ge (plus:SI (match_operand:SI 0 \"general_operand\" \"+g\")\n+\t\t      (const_int -1))\n+\t     (const_int 0))\n \t (label_ref (match_operand 1 \"\" \"\"))\n \t (pc)))\n    (set (match_dup 0)"}, {"sha": "8f55e133226294fbe9f078eaed2abf923fae308c", "filename": "gcc/config/vax/vms.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/412dc3482fd83f919a5ad96656ecf5df6c18d20d/gcc%2Fconfig%2Fvax%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/412dc3482fd83f919a5ad96656ecf5df6c18d20d/gcc%2Fconfig%2Fvax%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvms.h?ref=412dc3482fd83f919a5ad96656ecf5df6c18d20d", "patch": "@@ -35,7 +35,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n /* Predefine this in CPP because VMS limits the size of command options\n    and GNU CPP is not used on VMS except with GNU C.  */\n-#define CPP_PREDEFINES \"-Dvax -Dvms -DVMS -D__GNU__ -D__GNUC__\"\n+/* ??? __GNU__ is probably obsolete; delete it for 2.1.  */\n+#define CPP_PREDEFINES \"-Dvax -Dvms -DVMS -D__GNU__ -D__GNUC__=2\"\n \n /* Strictly speaking, VMS does not use DBX at all, but the interpreter built\n    into gas only speaks straight DBX.  */\n@@ -161,7 +162,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    ? (const_section (), 0) : (data_section (), 0)),\t\t\\\n   fputs (\".comm \", (FILE)),\t\t\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+  fprintf ((FILE), \",%u\\n\", (SIZE)))\n \n /* We define this to prevent the name mangler from putting dollar signs into\n    function names.  This isn't really needed, but it has been here for\n@@ -254,7 +255,6 @@ const_section ()\t\t\t\t\t\\\n    __CTOR_LIST__, and essentially points to the same list as __CTOR_LIST.  */\n \n #ifdef L__main\n-#include <stdio.h>\n \n #define __CTOR_LIST__ __gxx_init_0\n #define __CTOR_LIST_END__ __gxx_init_2\n@@ -269,7 +269,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   extern func_ptr __CTOR_LIST_END__[1];\t\t\t\t\t\\\n   extern func_ptr __CTOR_LIST_SHR__[1];\t\t\t\t\t\\\n   extern func_ptr __CTOR_LIST_SHR_END__[1];\t\t\t\t\\\n-  fflush(stdout);\t\t\t\t\t\t\t\\\n   if( &__CTOR_LIST_SHR__[0] != &__CTOR_LIST__[1])\t\t\t\\\n   for (p = __CTOR_LIST_SHR__ + 1; p < __CTOR_LIST_SHR_END__ ; p++ )\t\\\n     if (*p) (*p) ();\t\t\t\t\t\t\t\\"}, {"sha": "ef88d0a07bf071848286d49e6ce377c83188ea8b", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/412dc3482fd83f919a5ad96656ecf5df6c18d20d/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/412dc3482fd83f919a5ad96656ecf5df6c18d20d/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=412dc3482fd83f919a5ad96656ecf5df6c18d20d", "patch": "@@ -2459,7 +2459,7 @@ write_test_expr (exp, in_comparison)\n \t  printf (\" / \");\n \t  break;\n \tcase MOD:\n-\t  printf (\" % \");\n+\t  printf (\" %% \");\n \t  break;\n \tcase AND:\n \t  if (in_comparison)\n@@ -3025,8 +3025,7 @@ write_eligible_delay (kind)\n \n   if (num_delays > 1)\n     {\n-      sprintf (str, \"*delay_type\", kind);\n-      attr = find_attr (str, 0);\n+      attr = find_attr (\"*delay_type\", 0);\n       if (! attr) abort ();\n       common_av = find_most_used (attr);\n "}, {"sha": "ccc6f47b75989faf6f4ff3d971e4869bc46d75e0", "filename": "gcc/unroll.c", "status": "modified", "additions": 23, "deletions": 40, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/412dc3482fd83f919a5ad96656ecf5df6c18d20d/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/412dc3482fd83f919a5ad96656ecf5df6c18d20d/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=412dc3482fd83f919a5ad96656ecf5df6c18d20d", "patch": "@@ -1248,7 +1248,7 @@ precondition_loop_p (initial_value, final_value, increment, loop_start,\n   /* Fail for floating point values, since the caller of this function\n      does not have code to deal with them.  */\n   if (GET_MODE_CLASS (GET_MODE (loop_final_value)) == MODE_FLOAT\n-      || GET_MODE_CLASS (GET_MODE (loop_initial_value) == MODE_FLOAT))\n+      || GET_MODE_CLASS (GET_MODE (loop_initial_value)) == MODE_FLOAT)\n     {\n       if (loop_dump_stream)\n \tfprintf (loop_dump_stream,\n@@ -1493,8 +1493,11 @@ copy_loop_body (copy_start, copy_end, map, exit_label, last_iteration,\n \t\t\t\t\t   XEXP (value, 1));\n \t\t\t\n \t\t\t/* Reset the giv to be just the register again, in case\n-\t\t\t   it is used after the set we have just emitted.  */\n-\t\t\ttv->dest_reg = dest_reg;\n+\t\t\t   it is used after the set we have just emitted.\n+\t\t\t   We must subtract the const_adjust factor added in\n+\t\t\t   above.  */\n+\t\t\ttv->dest_reg = plus_constant (dest_reg,\n+\t\t\t\t\t\t      - tv->const_adjust);\n \t\t\t*tv->location = tv->dest_reg;\n \t\t      }\n \t\t  }\n@@ -2669,6 +2672,7 @@ reg_dead_after_loop (reg, loop_start, loop_end)\n {\n   rtx insn, label;\n   enum rtx_code code;\n+  int jump_count = 0;\n \n   /* HACK: Must also search the loop fall through exit, create a label_ref\n      here which points to the loop_end, and append the loop_number_exit_labels\n@@ -2684,54 +2688,33 @@ reg_dead_after_loop (reg, loop_start, loop_end)\n \t a conditional jump.  */\n \n       insn = NEXT_INSN (XEXP (label, 0));\n-      while (1)\n+      while (insn)\n \t{\n-\t  if (insn == 0)\n-\t    break;\n-\n-\t  if ((code = GET_CODE (insn)) == INSN || code == JUMP_INSN\n-\t      || code == CALL_INSN)\n+\t  code = GET_CODE (insn);\n+\t  if (GET_RTX_CLASS (code) == 'i')\n \t    {\n-\t      if (GET_CODE (PATTERN (insn)) == SET)\n-\t\t{\n-\t\t  if (reg_mentioned_p (reg, SET_SRC (PATTERN (insn))))\n-\t\t    return 0;\n-\t\t  if (SET_DEST (PATTERN (insn)) == reg)\n-\t\t    break;\n-\t\t  if (reg_mentioned_p (reg, SET_DEST (PATTERN (insn))))\n-\t\t    return 0;\n-\t\t}\n-\t      else if (reg_mentioned_p (reg, PATTERN (insn)))\n+\t      rtx set;\n+\n+\t      if (reg_referenced_p (reg, PATTERN (insn)))\n \t\treturn 0;\n+\n+\t      set = single_set (insn);\n+\t      if (set && rtx_equal_p (SET_DEST (set), reg))\n+\t\tbreak;\n \t    }\n+\n \t  if (code == JUMP_INSN)\n \t    {\n \t      if (GET_CODE (PATTERN (insn)) == RETURN)\n \t\tbreak;\n-\t      else if (! simplejump_p (insn))\n+\t      else if (! simplejump_p (insn)\n+\t\t       /* Prevent infinite loop following infinite loops. */\n+\t\t       || jump_count++ > 20)\n \t\treturn 0;\n \t      else\n-\t\t{\n-\t\t  insn = JUMP_LABEL (insn);\n-\t\t  /* If this branches to a code label after a LOOP_BEG or\n-\t\t     a LOOP_CONT note, then assume it is a loop back edge.\n-\t\t     Must fail in that case to prevent going into an infinite\n-\t\t     loop trying to trace infinite loops.\n-\n-\t\t     In the presence of syntax errors, this may be a jump to\n-\t\t     a CODE_LABEL that was never emitted.  Fail in this case\n-\t\t     also.  */\n-\n-\t\t  if (! PREV_INSN (insn)\n-\t\t      || (GET_CODE (PREV_INSN (insn)) == NOTE\n-\t\t\t  && ((NOTE_LINE_NUMBER (PREV_INSN (insn))\n-\t\t\t       == NOTE_INSN_LOOP_BEG)\n-\t\t\t      || (NOTE_LINE_NUMBER (PREV_INSN (insn))\n-\t\t\t\t  == NOTE_INSN_LOOP_CONT))))\n-\t\t    return 0;\n-\t\t}\n+\t\tinsn = JUMP_LABEL (insn);\n \t    }\n-\t  \n+\n \t  insn = NEXT_INSN (insn);\n \t}\n     }"}]}