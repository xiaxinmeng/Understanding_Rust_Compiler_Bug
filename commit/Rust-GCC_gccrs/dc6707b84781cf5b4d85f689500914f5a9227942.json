{"sha": "dc6707b84781cf5b4d85f689500914f5a9227942", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM2NzA3Yjg0NzgxY2Y1YjRkODVmNjg5NTAwOTE0ZjVhOTIyNzk0Mg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-06-19T14:22:16Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-06-19T14:22:16Z"}, "message": "re PR testsuite/40491 (Revision 148663 caused extra failures)\n\n\t* optabs.h (enum optab_index): Add new OTI_significand.\n\t(significand_optab): Define corresponding macro.\n\t* optabs.c (init_optabs): Initialize significand_optab.\n\t* genopinit.c (optabs): Implement significand_optab using\n\tsignificand?f2 patterns.\n\t* builtins.c (expand_builtin_mathfn): Handle\n\tBUILT_IN_SIGNIFICAND{,F,L}.\n\t(expand_builtin): Expand BUILT_IN_SIGNIFICAND{,F,L} using\n\texpand_builtin_mathfn if flag_unsafe_math_optimizations is set.\n\n\t* config/i386/i386.md (significandxf2, significand<mode>2): New\n\texpanders to implement significandf, significand and significandl\n\tbuilt-ins as inline x87 intrinsics.\n\ntestsuite/ChangeLog:\n\n\t* gcc.dg/builtins-34.c: Add significand cases.\n\n\tPR testsuite/40491\n\t* testsuite/gcc.dg/20080522-1.c: Remove testcase for real.\n\t* testsuite/gcc.dg/20080528-1.c: Ditto.\n\nFrom-SVN: r148705", "tree": {"sha": "c7f3ade8c5e3a25441fdd08fc75af39c939d4fb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7f3ade8c5e3a25441fdd08fc75af39c939d4fb2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc6707b84781cf5b4d85f689500914f5a9227942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc6707b84781cf5b4d85f689500914f5a9227942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc6707b84781cf5b4d85f689500914f5a9227942", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc6707b84781cf5b4d85f689500914f5a9227942/comments", "author": null, "committer": null, "parents": [{"sha": "4646d048e4f5e76521bb215aad2e8bbbe6609c71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4646d048e4f5e76521bb215aad2e8bbbe6609c71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4646d048e4f5e76521bb215aad2e8bbbe6609c71"}], "stats": {"total": 91, "additions": 84, "deletions": 7}, "files": [{"sha": "4bd4664f4e0f7466ab09b1107b03209755fb2423", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6707b84781cf5b4d85f689500914f5a9227942/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6707b84781cf5b4d85f689500914f5a9227942/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dc6707b84781cf5b4d85f689500914f5a9227942", "patch": "@@ -1,3 +1,19 @@\n+2009-06-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* optabs.h (enum optab_index): Add new OTI_significand.\n+\t(significand_optab): Define corresponding macro.\n+\t* optabs.c (init_optabs): Initialize significand_optab.\n+\t* genopinit.c (optabs): Implement significand_optab using\n+\tsignificand?f2 patterns.\n+\t* builtins.c (expand_builtin_mathfn): Handle\n+\tBUILT_IN_SIGNIFICAND{,F,L}.\n+\t(expand_builtin): Expand BUILT_IN_SIGNIFICAND{,F,L} using\n+\texpand_builtin_mathfn if flag_unsafe_math_optimizations is set.\n+\n+\t* config/i386/i386.md (significandxf2, significand<mode>2): New\n+\texpanders to implement significandf, significand and significandl\n+\tbuilt-ins as inline x87 intrinsics.\n+\n 2009-06-18  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/avr/avr.c (avr_override_options): Remove setting value of\n@@ -42,8 +58,6 @@\n \t* timevar.def (TV_SEE): Remove.\n \t* tree-pass.h (pass_see): Remove declaration.\n \t* doc/invoke.texi (-fsee): Remove documentation.\n-\t* testsuite/gcc.dg/20080522-1.c: Remove testcase.\n-\t* testsuite/gcc.dg/20080528-1.c: Remove testcase.\n \t\n 2009-06-18  Martin Jambor  <mjambor@suse.cz>\n \n@@ -1763,8 +1777,8 @@\n \t* config/rs6000/crtsavgpr.asm: Likewise.\n \t* config/rs6000/crtsavfpr.asm: Likewise.\n \n-\t* dwarf2out.c (output_cfi_directive): Pass 1 instead of\n-\t0 to second argument of DWARF2_FRAME_REG_OUT macros.\n+\t* dwarf2out.c (output_cfi_directive): Pass 1 instead of 0 to second\n+\targument of DWARF2_FRAME_REG_OUT macros.\n \n 2009-06-03  Julian Brown  <julian@codesourcery.com>\n "}, {"sha": "e906ef78eae54ee8e591245c50c2d4c135df5d35", "filename": "gcc/builtins.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6707b84781cf5b4d85f689500914f5a9227942/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6707b84781cf5b4d85f689500914f5a9227942/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=dc6707b84781cf5b4d85f689500914f5a9227942", "patch": "@@ -1975,6 +1975,8 @@ expand_builtin_mathfn (tree exp, rtx target, rtx subtarget)\n       /* Else fallthrough and expand as rint.  */\n     CASE_FLT_FN (BUILT_IN_RINT):\n       builtin_optab = rint_optab; break;\n+    CASE_FLT_FN (BUILT_IN_SIGNIFICAND):\n+      builtin_optab = significand_optab; break;\n     default:\n       gcc_unreachable ();\n     }\n@@ -6332,6 +6334,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     CASE_FLT_FN (BUILT_IN_ASIN):\n     CASE_FLT_FN (BUILT_IN_ACOS):\n     CASE_FLT_FN (BUILT_IN_ATAN):\n+    CASE_FLT_FN (BUILT_IN_SIGNIFICAND):\n       /* Treat these like sqrt only if unsafe math optimizations are allowed,\n \t because of possible accuracy problems.  */\n       if (! flag_unsafe_math_optimizations)"}, {"sha": "a71ca43c16318aa4f754d4727f09f24df7c18570", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6707b84781cf5b4d85f689500914f5a9227942/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6707b84781cf5b4d85f689500914f5a9227942/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=dc6707b84781cf5b4d85f689500914f5a9227942", "patch": "@@ -18531,7 +18531,7 @@\n (define_expand \"scalb<mode>3\"\n   [(use (match_operand:MODEF 0 \"register_operand\" \"\"))\n    (use (match_operand:MODEF 1 \"general_operand\" \"\"))\n-   (use (match_operand:MODEF 2 \"register_operand\" \"\"))]\n+   (use (match_operand:MODEF 2 \"general_operand\" \"\"))]\n  \"TARGET_USE_FANCY_MATH_387\n    && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n        || TARGET_MIX_SSE_I387)\n@@ -18552,6 +18552,34 @@\n   emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n   DONE;\n })\n+\n+(define_expand \"significandxf2\"\n+  [(parallel [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t\t   (unspec:XF [(match_operand:XF 1 \"register_operand\" \"\")]\n+\t\t\t      UNSPEC_XTRACT_FRACT))\n+\t      (set (match_dup 2)\n+\t\t   (unspec:XF [(match_dup 1)] UNSPEC_XTRACT_EXP))])]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  operands[2] = gen_reg_rtx (XFmode);\n+})\n+\n+(define_expand \"significand<mode>2\"\n+  [(use (match_operand:MODEF 0 \"register_operand\" \"\"))\n+   (use (match_operand:MODEF 1 \"register_operand\" \"\"))]\n+  \"TARGET_USE_FANCY_MATH_387\n+   && (!(SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH)\n+       || TARGET_MIX_SSE_I387)\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx op0 = gen_reg_rtx (XFmode);\n+  rtx op1 = gen_reg_rtx (XFmode);\n+\n+  emit_insn (gen_fxtract_extend<mode>xf3_i387 (op0, op1, operands[1]));\n+  emit_insn (gen_truncxf<mode>2_i387_noop (operands[0], op0));\n+  DONE;\n+})\n \f\n \n (define_insn \"sse4_1_round<mode>2\""}, {"sha": "52e0dd9462a24177f5b8b596d815127a6673431d", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6707b84781cf5b4d85f689500914f5a9227942/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6707b84781cf5b4d85f689500914f5a9227942/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=dc6707b84781cf5b4d85f689500914f5a9227942", "patch": "@@ -178,6 +178,7 @@ static const char * const optabs[] =\n   \"optab_handler (expm1_optab, $A)->insn_code = CODE_FOR_$(expm1$a2$)\",\n   \"optab_handler (ldexp_optab, $A)->insn_code = CODE_FOR_$(ldexp$a3$)\",\n   \"optab_handler (scalb_optab, $A)->insn_code = CODE_FOR_$(scalb$a3$)\",\n+  \"optab_handler (significand_optab, $A)->insn_code = CODE_FOR_$(significand$a2$)\",\n   \"optab_handler (logb_optab, $A)->insn_code = CODE_FOR_$(logb$a2$)\",\n   \"optab_handler (ilogb_optab, $A)->insn_code = CODE_FOR_$(ilogb$a2$)\",\n   \"optab_handler (log_optab, $A)->insn_code = CODE_FOR_$(log$a2$)\","}, {"sha": "34d284a588b23340260130a67661d09c3ee027a8", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6707b84781cf5b4d85f689500914f5a9227942/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6707b84781cf5b4d85f689500914f5a9227942/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=dc6707b84781cf5b4d85f689500914f5a9227942", "patch": "@@ -6271,6 +6271,7 @@ init_optabs (void)\n   init_optab (expm1_optab, UNKNOWN);\n   init_optab (ldexp_optab, UNKNOWN);\n   init_optab (scalb_optab, UNKNOWN);\n+  init_optab (significand_optab, UNKNOWN);\n   init_optab (logb_optab, UNKNOWN);\n   init_optab (ilogb_optab, UNKNOWN);\n   init_optab (log_optab, UNKNOWN);"}, {"sha": "82f8084883afb0b9c5cd82d1db2fd61a2d859219", "filename": "gcc/optabs.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6707b84781cf5b4d85f689500914f5a9227942/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6707b84781cf5b4d85f689500914f5a9227942/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=dc6707b84781cf5b4d85f689500914f5a9227942", "patch": "@@ -242,6 +242,8 @@ enum optab_index\n   OTI_ldexp,\n   /* Multiply floating-point number by integral power of radix */\n   OTI_scalb,\n+  /* Mantissa of a floating-point number */\n+  OTI_significand,\n   /* Radix-independent exponent */\n   OTI_logb,\n   OTI_ilogb,\n@@ -462,6 +464,7 @@ extern struct optab_d optab_table[OTI_MAX];\n #define expm1_optab (&optab_table[OTI_expm1])\n #define ldexp_optab (&optab_table[OTI_ldexp])\n #define scalb_optab (&optab_table[OTI_scalb])\n+#define significand_optab (&optab_table[OTI_significand])\n #define logb_optab (&optab_table[OTI_logb])\n #define ilogb_optab (&optab_table[OTI_ilogb])\n #define log_optab (&optab_table[OTI_log])"}, {"sha": "918d19819f5aee0ec6c58a22658a9bdfc97849b4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6707b84781cf5b4d85f689500914f5a9227942/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6707b84781cf5b4d85f689500914f5a9227942/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dc6707b84781cf5b4d85f689500914f5a9227942", "patch": "@@ -1,3 +1,13 @@\n+2009-06-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.dg/builtins-34.c: Add significand cases.\n+\n+2009-06-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR testsuite/40491\n+\t* testsuite/gcc.dg/20080522-1.c: Remove testcase for real.\n+\t* testsuite/gcc.dg/20080528-1.c: Ditto.\n+\n 2009-06-19  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/40450"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/testsuite/gcc.dg/20080522-1.c", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4646d048e4f5e76521bb215aad2e8bbbe6609c71/gcc%2Ftestsuite%2Fgcc.dg%2F20080522-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4646d048e4f5e76521bb215aad2e8bbbe6609c71/gcc%2Ftestsuite%2Fgcc.dg%2F20080522-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20080522-1.c?ref=4646d048e4f5e76521bb215aad2e8bbbe6609c71"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/testsuite/gcc.dg/20080528-1.c", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4646d048e4f5e76521bb215aad2e8bbbe6609c71/gcc%2Ftestsuite%2Fgcc.dg%2F20080528-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4646d048e4f5e76521bb215aad2e8bbbe6609c71/gcc%2Ftestsuite%2Fgcc.dg%2F20080528-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20080528-1.c?ref=4646d048e4f5e76521bb215aad2e8bbbe6609c71"}, {"sha": "e348a1ca9438148f9cdedcb420c89b05dfbdb187", "filename": "gcc/testsuite/gcc.dg/builtins-34.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc6707b84781cf5b4d85f689500914f5a9227942/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-34.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc6707b84781cf5b4d85f689500914f5a9227942/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-34.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-34.c?ref=dc6707b84781cf5b4d85f689500914f5a9227942", "patch": "@@ -1,7 +1,6 @@\n /* Copyright (C) 2004 Free Software Foundation.\n \n-   Check that exp10, exp10f, exp10l, exp2, exp2f, exp2l, pow10, pow10f,\n-   pow10l, expm1, expm1f and expm1l built-in functions compile.\n+   Check that various built-in functions compile.\n \n    Written by Uros Bizjak, 13th February 2004.  */\n \n@@ -16,6 +15,7 @@ extern double ldexp(double, int);\n extern double scalb(double, double);\n extern double scalbn(double, int);\n extern double scalbln(double, long);\n+extern double significand(double);\n extern float exp10f(float);\n extern float exp2f(float);\n extern float pow10f(float);\n@@ -24,6 +24,7 @@ extern float ldexpf(float, int);\n extern float scalbf(float, float);\n extern float scalbnf(float, int);\n extern float scalblnf(float, long);\n+extern float significandf(float);\n extern long double exp10l(long double);\n extern long double exp2l(long double);\n extern long double pow10l(long double);\n@@ -32,6 +33,7 @@ extern long double ldexpl(long double, int);\n extern long double scalbl(long double, long double);\n extern long double scalbnl(long double, int);\n extern long double scalblnl(long double, long);\n+extern long double significandl(long double);\n \n \n double test1(double x)\n@@ -74,6 +76,11 @@ double test8(double x, long exp)\n   return scalbln(x, exp);\n }\n \n+double test9(double x)\n+{\n+  return significand(x);\n+}\n+\n float test1f(float x)\n {\n   return exp10f(x);\n@@ -114,6 +121,11 @@ float test8f(float x, long exp)\n   return scalblnf(x, exp);\n }\n \n+float test9f(float x)\n+{\n+  return significandf(x);\n+}\n+\n long double test1l(long double x)\n {\n   return exp10l(x);\n@@ -153,3 +165,8 @@ long double test8l(long double x, long exp)\n {\n   return scalblnl(x, exp);\n }\n+\n+long double test9l(long double x)\n+{\n+  return significandl(x);\n+}"}]}