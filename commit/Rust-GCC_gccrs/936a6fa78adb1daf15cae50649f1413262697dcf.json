{"sha": "936a6fa78adb1daf15cae50649f1413262697dcf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM2YTZmYTc4YWRiMWRhZjE1Y2FlNTA2NDlmMTQxMzI2MjY5N2RjZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2006-03-04T18:27:08Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-03-04T18:27:08Z"}, "message": "gigi.h (get_ada_base_type): Delete.\n\n\t* gigi.h (get_ada_base_type): Delete.\n\t* utils2.c (get_ada_base_type): Likewise.\n\t* trans.c (convert_with_check): Operate in the real base type.\n\nFrom-SVN: r111711", "tree": {"sha": "b03d4babea37195fff6bc1c1fc2c7d0273ce21a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b03d4babea37195fff6bc1c1fc2c7d0273ce21a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/936a6fa78adb1daf15cae50649f1413262697dcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/936a6fa78adb1daf15cae50649f1413262697dcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/936a6fa78adb1daf15cae50649f1413262697dcf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/936a6fa78adb1daf15cae50649f1413262697dcf/comments", "author": null, "committer": null, "parents": [{"sha": "4469af7acf60b8af84174ece207e847e74067b27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4469af7acf60b8af84174ece207e847e74067b27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4469af7acf60b8af84174ece207e847e74067b27"}], "stats": {"total": 33, "additions": 11, "deletions": 22}, "files": [{"sha": "56e21e018de250d17c0d120c3e5214b1a22b8843", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/936a6fa78adb1daf15cae50649f1413262697dcf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/936a6fa78adb1daf15cae50649f1413262697dcf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=936a6fa78adb1daf15cae50649f1413262697dcf", "patch": "@@ -1,3 +1,9 @@\n+2006-03-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gigi.h (get_ada_base_type): Delete.\n+\t* utils2.c (get_ada_base_type): Likewise.\n+\t* trans.c (convert_with_check): Operate in the real base type.\n+\n 2006-03-03  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* uintp.adb (Num_Bits): Handle Uint_Int_First specially."}, {"sha": "e1914e4ac1ba0a25dcece3b727cfb7aba3547654", "filename": "gcc/ada/gigi.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/936a6fa78adb1daf15cae50649f1413262697dcf/gcc%2Fada%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/936a6fa78adb1daf15cae50649f1413262697dcf/gcc%2Fada%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgigi.h?ref=936a6fa78adb1daf15cae50649f1413262697dcf", "patch": "@@ -671,9 +671,6 @@ extern tree gnat_truthvalue_conversion (tree expr);\n /* Return the base type of TYPE.  */\n extern tree get_base_type (tree type);\n \n-/* Likewise, but only return types known at Ada source.  */\n-extern tree get_ada_base_type (tree type);\n-\n /* EXP is a GCC tree representing an address.  See if we can find how\n    strictly the object at that address is aligned.   Return that alignment\n    strictly the object at that address is aligned.   Return that alignment"}, {"sha": "30c0fb5dc27b8c4b427b20aa389a0706e13e7931", "filename": "gcc/ada/trans.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/936a6fa78adb1daf15cae50649f1413262697dcf/gcc%2Fada%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/936a6fa78adb1daf15cae50649f1413262697dcf/gcc%2Fada%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftrans.c?ref=936a6fa78adb1daf15cae50649f1413262697dcf", "patch": "@@ -5323,7 +5323,6 @@ convert_with_check (Entity_Id gnat_type, tree gnu_expr, bool overflowp,\n   tree gnu_in_type = TREE_TYPE (gnu_expr);\n   tree gnu_in_basetype = get_base_type (gnu_in_type);\n   tree gnu_base_type = get_base_type (gnu_type);\n-  tree gnu_ada_base_type = get_ada_base_type (gnu_type);\n   tree gnu_result = gnu_expr;\n \n   /* If we are not doing any checks, the output is an integral type, and\n@@ -5415,7 +5414,7 @@ convert_with_check (Entity_Id gnat_type, tree gnu_expr, bool overflowp,\n \n   /* Now convert to the result base type.  If this is a non-truncating\n      float-to-integer conversion, round.  */\n-  if (INTEGRAL_TYPE_P (gnu_ada_base_type) && FLOAT_TYPE_P (gnu_in_basetype)\n+  if (INTEGRAL_TYPE_P (gnu_base_type) && FLOAT_TYPE_P (gnu_in_basetype)\n       && !truncatep)\n     {\n       REAL_VALUE_TYPE half_minus_pred_half, pred_half;\n@@ -5474,12 +5473,12 @@ convert_with_check (Entity_Id gnat_type, tree gnu_expr, bool overflowp,\n \t\t\t   gnu_add_pred_half, gnu_subtract_pred_half);\n     }\n \n-  if (TREE_CODE (gnu_ada_base_type) == INTEGER_TYPE\n-      && TYPE_HAS_ACTUAL_BOUNDS_P (gnu_ada_base_type)\n+  if (TREE_CODE (gnu_base_type) == INTEGER_TYPE\n+      && TYPE_HAS_ACTUAL_BOUNDS_P (gnu_base_type)\n       && TREE_CODE (gnu_result) == UNCONSTRAINED_ARRAY_REF)\n-    gnu_result = unchecked_convert (gnu_ada_base_type, gnu_result, false);\n+    gnu_result = unchecked_convert (gnu_base_type, gnu_result, false);\n   else\n-    gnu_result = convert (gnu_ada_base_type, gnu_result);\n+    gnu_result = convert (gnu_base_type, gnu_result);\n \n   /* Finally, do the range check if requested.  Note that if the\n      result type is a modular type, the range check is actually"}, {"sha": "65837bb015133cdf10267dd85fb8c6833e74c5b0", "filename": "gcc/ada/utils2.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/936a6fa78adb1daf15cae50649f1413262697dcf/gcc%2Fada%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/936a6fa78adb1daf15cae50649f1413262697dcf/gcc%2Fada%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils2.c?ref=936a6fa78adb1daf15cae50649f1413262697dcf", "patch": "@@ -123,19 +123,6 @@ get_base_type (tree type)\n \n   return type;\n }\n-\n-/* Likewise, but only return types known to the Ada source.  */\n-tree\n-get_ada_base_type (tree type)\n-{\n-  while (TREE_TYPE (type)\n-\t && (TREE_CODE (type) == INTEGER_TYPE\n-\t     || TREE_CODE (type) == REAL_TYPE)\n-\t && !TYPE_EXTRA_SUBTYPE_P (type))\n-    type = TREE_TYPE (type);\n-\n-  return type;\n-}\n \f\n /* EXP is a GCC tree representing an address.  See if we can find how\n    strictly the object at that address is aligned.   Return that alignment"}]}