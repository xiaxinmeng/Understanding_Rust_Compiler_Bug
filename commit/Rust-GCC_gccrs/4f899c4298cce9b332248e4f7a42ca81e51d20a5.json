{"sha": "4f899c4298cce9b332248e4f7a42ca81e51d20a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY4OTljNDI5OGNjZTliMzMyMjQ4ZTRmN2E0MmNhODFlNTFkMjBhNQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde@tbsaunde.org", "date": "2021-06-08T03:36:15Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@tbsaunde.org", "date": "2021-06-17T08:43:27Z"}, "message": "return auto_vec from get_dominated_by\n\nSigned-off-by: Trevor Saunders <tbsaunde@tbsaunde.org>\n\ngcc/ChangeLog:\n\n\t* dominance.c (get_dominated_by): Return auto_vec<basic_block>.\n\t* dominance.h (get_dominated_by): Likewise.\n\t* auto-profile.c (afdo_find_equiv_class): Adjust.\n\t* cfgloopmanip.c (duplicate_loop_to_header_edge): Likewise.\n\t* loop-unroll.c (unroll_loop_runtime_iterations): Likewise.\n\t* tree-cfg.c (test_linear_chain): Likewise.\n\t(test_diamond): Likewise.", "tree": {"sha": "ab2dff2977ba8b74c198cdc5ebdbe528b7fda999", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab2dff2977ba8b74c198cdc5ebdbe528b7fda999"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f899c4298cce9b332248e4f7a42ca81e51d20a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f899c4298cce9b332248e4f7a42ca81e51d20a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f899c4298cce9b332248e4f7a42ca81e51d20a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f899c4298cce9b332248e4f7a42ca81e51d20a5/comments", "author": {"login": "tbsaunde", "id": 349840, "node_id": "MDQ6VXNlcjM0OTg0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/349840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbsaunde", "html_url": "https://github.com/tbsaunde", "followers_url": "https://api.github.com/users/tbsaunde/followers", "following_url": "https://api.github.com/users/tbsaunde/following{/other_user}", "gists_url": "https://api.github.com/users/tbsaunde/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbsaunde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbsaunde/subscriptions", "organizations_url": "https://api.github.com/users/tbsaunde/orgs", "repos_url": "https://api.github.com/users/tbsaunde/repos", "events_url": "https://api.github.com/users/tbsaunde/events{/privacy}", "received_events_url": "https://api.github.com/users/tbsaunde/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbsaunde", "id": 349840, "node_id": "MDQ6VXNlcjM0OTg0MA==", "avatar_url": "https://avatars.githubusercontent.com/u/349840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbsaunde", "html_url": "https://github.com/tbsaunde", "followers_url": "https://api.github.com/users/tbsaunde/followers", "following_url": "https://api.github.com/users/tbsaunde/following{/other_user}", "gists_url": "https://api.github.com/users/tbsaunde/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbsaunde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbsaunde/subscriptions", "organizations_url": "https://api.github.com/users/tbsaunde/orgs", "repos_url": "https://api.github.com/users/tbsaunde/repos", "events_url": "https://api.github.com/users/tbsaunde/events{/privacy}", "received_events_url": "https://api.github.com/users/tbsaunde/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a165040e11e340f6b397104f23717ef398408e67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a165040e11e340f6b397104f23717ef398408e67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a165040e11e340f6b397104f23717ef398408e67"}], "stats": {"total": 47, "additions": 17, "deletions": 30}, "files": [{"sha": "43d6fa0b1f02c1f31650eaedd74ef5fd3407da03", "filename": "gcc/auto-profile.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f899c4298cce9b332248e4f7a42ca81e51d20a5/gcc%2Fauto-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f899c4298cce9b332248e4f7a42ca81e51d20a5/gcc%2Fauto-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fauto-profile.c?ref=4f899c4298cce9b332248e4f7a42ca81e51d20a5", "patch": "@@ -1155,13 +1155,10 @@ afdo_find_equiv_class (bb_set *annotated_bb)\n \n   FOR_ALL_BB_FN (bb, cfun)\n   {\n-    vec<basic_block> dom_bbs;\n-\n     if (bb->aux != NULL)\n       continue;\n     bb->aux = bb;\n-    dom_bbs = get_dominated_by (CDI_DOMINATORS, bb);\n-    for (basic_block bb1 : dom_bbs)\n+    for (basic_block bb1 : get_dominated_by (CDI_DOMINATORS, bb))\n       if (bb1->aux == NULL && dominated_by_p (CDI_POST_DOMINATORS, bb, bb1)\n \t  && bb1->loop_father == bb->loop_father)\n \t{\n@@ -1172,8 +1169,8 @@ afdo_find_equiv_class (bb_set *annotated_bb)\n \t      set_bb_annotated (bb, annotated_bb);\n \t    }\n \t}\n-    dom_bbs = get_dominated_by (CDI_POST_DOMINATORS, bb);\n-    for (basic_block bb1 : dom_bbs)\n+\n+    for (basic_block bb1 : get_dominated_by (CDI_POST_DOMINATORS, bb))\n       if (bb1->aux == NULL && dominated_by_p (CDI_DOMINATORS, bb, bb1)\n \t  && bb1->loop_father == bb->loop_father)\n \t{"}, {"sha": "e6df28036c4fc150a07138fd8fa116ca6f1f0515", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f899c4298cce9b332248e4f7a42ca81e51d20a5/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f899c4298cce9b332248e4f7a42ca81e51d20a5/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=4f899c4298cce9b332248e4f7a42ca81e51d20a5", "patch": "@@ -1414,13 +1414,12 @@ duplicate_loop_to_header_edge (class loop *loop, edge e,\n   for (i = 0; i < n; i++)\n     {\n       basic_block dominated, dom_bb;\n-      vec<basic_block> dom_bbs;\n       unsigned j;\n \n       bb = bbs[i];\n       bb->aux = 0;\n \n-      dom_bbs = get_dominated_by (CDI_DOMINATORS, bb);\n+      auto_vec<basic_block> dom_bbs = get_dominated_by (CDI_DOMINATORS, bb);\n       FOR_EACH_VEC_ELT (dom_bbs, j, dominated)\n \t{\n \t  if (flow_bb_inside_loop_p (loop, dominated))\n@@ -1429,7 +1428,6 @@ duplicate_loop_to_header_edge (class loop *loop, edge e,\n \t\t\tCDI_DOMINATORS, first_active[i], first_active_latch);\n \t  set_immediate_dominator (CDI_DOMINATORS, dominated, dom_bb);\n \t}\n-      dom_bbs.release ();\n     }\n   free (first_active);\n "}, {"sha": "0e464cb72821de4b7531258505295e640ac7d53f", "filename": "gcc/dominance.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f899c4298cce9b332248e4f7a42ca81e51d20a5/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f899c4298cce9b332248e4f7a42ca81e51d20a5/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=4f899c4298cce9b332248e4f7a42ca81e51d20a5", "patch": "@@ -883,17 +883,17 @@ set_immediate_dominator (enum cdi_direction dir, basic_block bb,\n \n /* Returns the list of basic blocks immediately dominated by BB, in the\n    direction DIR.  */\n-vec<basic_block> \n+auto_vec<basic_block> \n get_dominated_by (enum cdi_direction dir, basic_block bb)\n {\n   unsigned int dir_index = dom_convert_dir_to_idx (dir);\n   struct et_node *node = bb->dom[dir_index], *son = node->son, *ason;\n-  vec<basic_block> bbs = vNULL;\n+  auto_vec<basic_block> bbs;\n \n   gcc_checking_assert (dom_computed[dir_index]);\n \n   if (!son)\n-    return vNULL;\n+    return bbs;\n \n   bbs.safe_push ((basic_block) son->data);\n   for (ason = son->right; ason != son; ason = ason->right)"}, {"sha": "515a369aacf8de49f693190103aa45aec3d600ec", "filename": "gcc/dominance.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f899c4298cce9b332248e4f7a42ca81e51d20a5/gcc%2Fdominance.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f899c4298cce9b332248e4f7a42ca81e51d20a5/gcc%2Fdominance.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.h?ref=4f899c4298cce9b332248e4f7a42ca81e51d20a5", "patch": "@@ -46,7 +46,7 @@ extern void free_dominance_info_for_region (function *,\n extern basic_block get_immediate_dominator (enum cdi_direction, basic_block);\n extern void set_immediate_dominator (enum cdi_direction, basic_block,\n \t\t\t\t     basic_block);\n-extern vec<basic_block> get_dominated_by (enum cdi_direction, basic_block);\n+extern auto_vec<basic_block> get_dominated_by (enum cdi_direction, basic_block);\n extern vec<basic_block> get_dominated_by_region (enum cdi_direction,\n \t\t\t\t\t\t\t basic_block *,\n \t\t\t\t\t\t\t unsigned);"}, {"sha": "66d93487e29f62d2eb88084f6c6b62cf1d56f579", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f899c4298cce9b332248e4f7a42ca81e51d20a5/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f899c4298cce9b332248e4f7a42ca81e51d20a5/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=4f899c4298cce9b332248e4f7a42ca81e51d20a5", "patch": "@@ -884,7 +884,7 @@ unroll_loop_runtime_iterations (class loop *loop)\n {\n   rtx old_niter, niter, tmp;\n   rtx_insn *init_code, *branch_code;\n-  unsigned i, j;\n+  unsigned i;\n   profile_probability p;\n   basic_block preheader, *body, swtch, ezc_swtch = NULL;\n   int may_exit_copy;\n@@ -908,15 +908,9 @@ unroll_loop_runtime_iterations (class loop *loop)\n   body = get_loop_body (loop);\n   for (i = 0; i < loop->num_nodes; i++)\n     {\n-      vec<basic_block> ldom;\n-      basic_block bb;\n-\n-      ldom = get_dominated_by (CDI_DOMINATORS, body[i]);\n-      FOR_EACH_VEC_ELT (ldom, j, bb)\n+      for (basic_block bb : get_dominated_by (CDI_DOMINATORS, body[i]))\n \tif (!flow_bb_inside_loop_p (loop, bb))\n \t  dom_bbs.safe_push (bb);\n-\n-      ldom.release ();\n     }\n   free (body);\n \n@@ -1013,7 +1007,7 @@ unroll_loop_runtime_iterations (class loop *loop)\n       gcc_assert (ok);\n \n       /* Create item for switch.  */\n-      j = n_peel - i - (extra_zero_check ? 0 : 1);\n+      unsigned j = n_peel - i - (extra_zero_check ? 0 : 1);\n       p = profile_probability::always ().apply_scale (1, i + 2);\n \n       preheader = split_edge (loop_preheader_edge (loop));"}, {"sha": "6bdd1a561fd4f080959c17e19da039fbd748734d", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f899c4298cce9b332248e4f7a42ca81e51d20a5/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f899c4298cce9b332248e4f7a42ca81e51d20a5/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=4f899c4298cce9b332248e4f7a42ca81e51d20a5", "patch": "@@ -9917,22 +9917,20 @@ test_linear_chain ()\n   calculate_dominance_info (CDI_DOMINATORS);\n   ASSERT_EQ (bb_a, get_immediate_dominator (CDI_DOMINATORS, bb_b));\n   ASSERT_EQ (bb_b, get_immediate_dominator (CDI_DOMINATORS, bb_c));\n-  vec<basic_block> dom_by_b = get_dominated_by (CDI_DOMINATORS, bb_b);\n+  auto_vec<basic_block> dom_by_b = get_dominated_by (CDI_DOMINATORS, bb_b);\n   ASSERT_EQ (1, dom_by_b.length ());\n   ASSERT_EQ (bb_c, dom_by_b[0]);\n   free_dominance_info (CDI_DOMINATORS);\n-  dom_by_b.release ();\n \n   /* Similarly for post-dominance: each BB in our chain is post-dominated\n      by the one after it.  */\n   calculate_dominance_info (CDI_POST_DOMINATORS);\n   ASSERT_EQ (bb_b, get_immediate_dominator (CDI_POST_DOMINATORS, bb_a));\n   ASSERT_EQ (bb_c, get_immediate_dominator (CDI_POST_DOMINATORS, bb_b));\n-  vec<basic_block> postdom_by_b = get_dominated_by (CDI_POST_DOMINATORS, bb_b);\n+  auto_vec<basic_block> postdom_by_b = get_dominated_by (CDI_POST_DOMINATORS, bb_b);\n   ASSERT_EQ (1, postdom_by_b.length ());\n   ASSERT_EQ (bb_a, postdom_by_b[0]);\n   free_dominance_info (CDI_POST_DOMINATORS);\n-  postdom_by_b.release ();\n \n   pop_cfun ();\n }\n@@ -9991,10 +9989,10 @@ test_diamond ()\n   ASSERT_EQ (bb_a, get_immediate_dominator (CDI_DOMINATORS, bb_b));\n   ASSERT_EQ (bb_a, get_immediate_dominator (CDI_DOMINATORS, bb_c));\n   ASSERT_EQ (bb_a, get_immediate_dominator (CDI_DOMINATORS, bb_d));\n-  vec<basic_block> dom_by_a = get_dominated_by (CDI_DOMINATORS, bb_a);\n+  auto_vec<basic_block> dom_by_a = get_dominated_by (CDI_DOMINATORS, bb_a);\n   ASSERT_EQ (3, dom_by_a.length ()); /* B, C, D, in some order.  */\n   dom_by_a.release ();\n-  vec<basic_block> dom_by_b = get_dominated_by (CDI_DOMINATORS, bb_b);\n+  auto_vec<basic_block> dom_by_b = get_dominated_by (CDI_DOMINATORS, bb_b);\n   ASSERT_EQ (0, dom_by_b.length ());\n   dom_by_b.release ();\n   free_dominance_info (CDI_DOMINATORS);\n@@ -10004,10 +10002,10 @@ test_diamond ()\n   ASSERT_EQ (bb_d, get_immediate_dominator (CDI_POST_DOMINATORS, bb_a));\n   ASSERT_EQ (bb_d, get_immediate_dominator (CDI_POST_DOMINATORS, bb_b));\n   ASSERT_EQ (bb_d, get_immediate_dominator (CDI_POST_DOMINATORS, bb_c));\n-  vec<basic_block> postdom_by_d = get_dominated_by (CDI_POST_DOMINATORS, bb_d);\n+  auto_vec<basic_block> postdom_by_d = get_dominated_by (CDI_POST_DOMINATORS, bb_d);\n   ASSERT_EQ (3, postdom_by_d.length ()); /* A, B, C in some order.  */\n   postdom_by_d.release ();\n-  vec<basic_block> postdom_by_b = get_dominated_by (CDI_POST_DOMINATORS, bb_b);\n+  auto_vec<basic_block> postdom_by_b = get_dominated_by (CDI_POST_DOMINATORS, bb_b);\n   ASSERT_EQ (0, postdom_by_b.length ());\n   postdom_by_b.release ();\n   free_dominance_info (CDI_POST_DOMINATORS);"}]}