{"sha": "45e184209dbf619aab2f777064891c97e6c4b185", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVlMTg0MjA5ZGJmNjE5YWFiMmY3NzcwNjQ4OTFjOTdlNmM0YjE4NQ==", "commit": {"author": {"name": "Rafael Avila de Espindola", "email": "espindola@google.com", "date": "2008-04-30T17:21:55Z"}, "committer": {"name": "Rafael Espindola", "email": "espindola@gcc.gnu.org", "date": "2008-04-30T17:21:55Z"}, "message": "builtins.c (fold_call_expr): Return realret.\n\n2008-04-30  Rafael Espindola  <espindola@google.com>\n\n\t* builtins.c (fold_call_expr): Return realret.\n\t* tree-ssa-threadedge.c\n\t(record_temporary_equivalences_from_stmts_at_dest): Ignore calls to\n\t__builtin_object_size.\n\nFrom-SVN: r134833", "tree": {"sha": "2a4e745e479b5718418f62438522a460b4b2f37c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a4e745e479b5718418f62438522a460b4b2f37c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45e184209dbf619aab2f777064891c97e6c4b185", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e184209dbf619aab2f777064891c97e6c4b185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45e184209dbf619aab2f777064891c97e6c4b185", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45e184209dbf619aab2f777064891c97e6c4b185/comments", "author": null, "committer": null, "parents": [{"sha": "fe7df9c4566e75472fbf5322ca1a6495b197426f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7df9c4566e75472fbf5322ca1a6495b197426f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe7df9c4566e75472fbf5322ca1a6495b197426f"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "043723e06e05d35ec084afe5f8959cbc0bdced7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e184209dbf619aab2f777064891c97e6c4b185/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e184209dbf619aab2f777064891c97e6c4b185/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45e184209dbf619aab2f777064891c97e6c4b185", "patch": "@@ -1,3 +1,10 @@\n+2008-04-30  Rafael Espindola  <espindola@google.com>\n+\n+\t* builtins.c (fold_call_expr): Return realret.\n+\t* tree-ssa-threadedge.c\n+\t(record_temporary_equivalences_from_stmts_at_dest): Ignore calls to\n+\t__builtin_object_size.\n+\n 2008-04-30  Seongbae Park  <seongbae.park@gmail.com>\n \n \t* gcc.c (wrapper_string): New variable."}, {"sha": "2cb8fa03f9ed5275b038a06dc9addad8f39d19b6", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e184209dbf619aab2f777064891c97e6c4b185/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e184209dbf619aab2f777064891c97e6c4b185/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=45e184209dbf619aab2f777064891c97e6c4b185", "patch": "@@ -10553,6 +10553,7 @@ fold_call_expr (tree exp, bool ignore)\n \t\t  if (CAN_HAVE_LOCATION_P (realret)\n \t\t      && !EXPR_HAS_LOCATION (realret))\n \t\t    SET_EXPR_LOCATION (realret, EXPR_LOCATION (exp));\n+\t\t  return realret;\n \t\t}\n \t      return ret;\n \t    }"}, {"sha": "b15de2752eb36ab998e73131784ba03ee0f2196c", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45e184209dbf619aab2f777064891c97e6c4b185/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45e184209dbf619aab2f777064891c97e6c4b185/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=45e184209dbf619aab2f777064891c97e6c4b185", "patch": "@@ -226,6 +226,7 @@ record_temporary_equivalences_from_stmts_at_dest (edge e,\n   for (bsi = bsi_start (e->dest); ! bsi_end_p (bsi); bsi_next (&bsi))\n     {\n       tree cached_lhs = NULL;\n+      tree rhs;\n \n       stmt = bsi_stmt (bsi);\n \n@@ -252,17 +253,43 @@ record_temporary_equivalences_from_stmts_at_dest (edge e,\n \t  || TREE_CODE (GIMPLE_STMT_OPERAND (stmt, 0)) != SSA_NAME)\n \tcontinue;\n \n+      rhs = GIMPLE_STMT_OPERAND (stmt, 1);\n+\n+      /* The result of __builtin_object_size depends on all the arguments\n+\t of a phi node. Temporarily using only one edge produces invalid\n+\t results. For example\n+\n+\t if (x < 6)\n+\t   goto l;\n+\t else\n+\t   goto l;\n+\n+\t l:\n+\t r = PHI <&w[2].a[1](2), &a.a[6](3)>\n+\t __builtin_object_size (r, 0)\n+\n+\t The result of __builtin_object_size is defined to be the maximum of\n+\t remaining bytes. If we use only one edge on the phi, the result will\n+\t change to be the remaining bytes for the corresponding phi argument. */\n+\n+      if (TREE_CODE (rhs) == CALL_EXPR)\n+\t{\n+\t  tree fndecl = get_callee_fndecl (rhs);\n+\t  if (fndecl && DECL_FUNCTION_CODE (fndecl) == BUILT_IN_OBJECT_SIZE)\n+\t    continue;\n+\t}\n+\n       /* At this point we have a statement which assigns an RHS to an\n \t SSA_VAR on the LHS.  We want to try and simplify this statement\n \t to expose more context sensitive equivalences which in turn may\n \t allow us to simplify the condition at the end of the loop. \n \n \t Handle simple copy operations as well as implied copies from\n \t ASSERT_EXPRs.  */\n-      if (TREE_CODE (GIMPLE_STMT_OPERAND (stmt, 1)) == SSA_NAME)\n-\tcached_lhs = GIMPLE_STMT_OPERAND (stmt, 1);\n-      else if (TREE_CODE (GIMPLE_STMT_OPERAND (stmt, 1)) == ASSERT_EXPR)\n-\tcached_lhs = TREE_OPERAND (GIMPLE_STMT_OPERAND (stmt, 1), 0);\n+      if (TREE_CODE (rhs) == SSA_NAME)\n+\tcached_lhs = rhs;\n+      else if (TREE_CODE (rhs) == ASSERT_EXPR)\n+\tcached_lhs = TREE_OPERAND (rhs, 0);\n       else\n \t{\n \t  /* A statement that is not a trivial copy or ASSERT_EXPR."}]}