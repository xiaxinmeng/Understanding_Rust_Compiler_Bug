{"sha": "43faf3e5445b571731e52faa1be085ecd0a09323", "node_id": "C_kwDOANBUbNoAKDQzZmFmM2U1NDQ1YjU3MTczMWU1MmZhYTFiZTA4NWVjZDBhMDkzMjM", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-09-20T14:25:42Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-09-30T01:27:02Z"}, "message": "c++: reduce redundant TARGET_EXPR\n\nAn experiment led me to notice that in some cases we were ending up with\nTARGET_EXPR initialized by TARGET_EXPR, which isn't useful.\n\nThe target_expr_needs_replace change won't make a difference in most cases,\nsince cp_genericize_init will have already expanded VEC_INIT_EXPR by the\ntime we consider it, but it is correct.\n\ngcc/cp/ChangeLog:\n\n\t* cp-gimplify.cc (cp_fold_r) [TARGET_EXPR]: Collapse\n\tTARGET_EXPR within TARGET_EXPR.\n\t* constexpr.cc (cxx_eval_outermost_constant_expr): Avoid\n\tadding redundant TARGET_EXPR.\n\t* cp-tree.h (target_expr_needs_replace): VEC_INIT_EXPR doesn't.", "tree": {"sha": "095d0b528bcb5282e8edd8b950682dc4eddea4b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/095d0b528bcb5282e8edd8b950682dc4eddea4b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43faf3e5445b571731e52faa1be085ecd0a09323", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43faf3e5445b571731e52faa1be085ecd0a09323", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43faf3e5445b571731e52faa1be085ecd0a09323", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43faf3e5445b571731e52faa1be085ecd0a09323/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbdcdf5cc73e1b3385d9a25bdab4df70c4bd8c2e"}], "stats": {"total": 23, "additions": 17, "deletions": 6}, "files": [{"sha": "db7571d7d71a3510c9ab1644f2311e6a1717ac1f", "filename": "gcc/cp/constexpr.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43faf3e5445b571731e52faa1be085ecd0a09323/gcc%2Fcp%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43faf3e5445b571731e52faa1be085ecd0a09323/gcc%2Fcp%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.cc?ref=43faf3e5445b571731e52faa1be085ecd0a09323", "patch": "@@ -8065,8 +8065,8 @@ cxx_eval_outermost_constant_expr (tree t, bool allow_non_constant,\n       if (TREE_CODE (t) == TARGET_EXPR\n \t  && TARGET_EXPR_INITIAL (t) == r)\n \treturn t;\n-      else if (TREE_CODE (t) == CONSTRUCTOR)\n-\t;\n+      else if (TREE_CODE (t) == CONSTRUCTOR || TREE_CODE (t) == CALL_EXPR)\n+\t/* Don't add a TARGET_EXPR if our argument didn't have one.  */;\n       else if (TREE_CODE (t) == TARGET_EXPR && TARGET_EXPR_CLEANUP (t))\n \tr = get_target_expr (r);\n       else"}, {"sha": "735488887837fa8a67378d99f91758939f19f84c", "filename": "gcc/cp/cp-gimplify.cc", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43faf3e5445b571731e52faa1be085ecd0a09323/gcc%2Fcp%2Fcp-gimplify.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43faf3e5445b571731e52faa1be085ecd0a09323/gcc%2Fcp%2Fcp-gimplify.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.cc?ref=43faf3e5445b571731e52faa1be085ecd0a09323", "patch": "@@ -1084,9 +1084,9 @@ cp_fold_r (tree *stmt_p, int *walk_subtrees, void *data_)\n \t}\n       break;\n \n-      /* These are only for genericize time; they're here rather than in\n-\t cp_genericize to avoid problems with the invisible reference\n-\t transition.  */\n+      /* cp_genericize_{init,target}_expr are only for genericize time; they're\n+\t here rather than in cp_genericize to avoid problems with the invisible\n+\t reference transition.  */\n     case INIT_EXPR:\n       if (data->genericize)\n \tcp_genericize_init_expr (stmt_p);\n@@ -1095,6 +1095,16 @@ cp_fold_r (tree *stmt_p, int *walk_subtrees, void *data_)\n     case TARGET_EXPR:\n       if (data->genericize)\n \tcp_genericize_target_expr (stmt_p);\n+\n+      /* Folding might replace e.g. a COND_EXPR with a TARGET_EXPR; in\n+\t that case, use it in place of this one.  */\n+      if (tree &init = TARGET_EXPR_INITIAL (stmt))\n+\t{\n+\t  cp_walk_tree (&init, cp_fold_r, data, NULL);\n+\t  *walk_subtrees = 0;\n+\t  if (TREE_CODE (init) == TARGET_EXPR)\n+\t    *stmt_p = init;\n+\t}\n       break;\n \n     default:"}, {"sha": "d696fd54a7ac597bbd2dcb5c0453d853b546405f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43faf3e5445b571731e52faa1be085ecd0a09323/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43faf3e5445b571731e52faa1be085ecd0a09323/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=43faf3e5445b571731e52faa1be085ecd0a09323", "patch": "@@ -5426,7 +5426,8 @@ target_expr_needs_replace (tree t)\n     return false;\n   while (TREE_CODE (init) == COMPOUND_EXPR)\n     init = TREE_OPERAND (init, 1);\n-  return TREE_CODE (init) != AGGR_INIT_EXPR;\n+  return (TREE_CODE (init) != AGGR_INIT_EXPR\n+\t  && TREE_CODE (init) != VEC_INIT_EXPR);\n }\n \n /* True if EXPR expresses direct-initialization of a TYPE.  */"}]}