{"sha": "6a0f8c015e787ad40bca94c72d34911368762db9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEwZjhjMDE1ZTc4N2FkNDBiY2E5NGM3MmQzNDkxMTM2ODc2MmRiOQ==", "commit": {"author": {"name": "Jim Wilson", "email": "jim.wilson@linaro.org", "date": "2015-06-15T19:35:40Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2015-06-15T19:35:40Z"}, "message": "aarch64.md (mov<mode>_aarch64): Change alternative 2 to use neon_move instead of mov_imm.\n\ngcc/\n\t* config/aarch64/aarch64.md (mov<mode>_aarch64): Change alternative 2\n\tto use neon_move instead of mov_imm.\n\t(movdi_aarch64): Change alternative 14 to use neon_move not fmov.\n\t(movtf_aarch64): Change alternative 4 to use neon_move_q not fconstd.\n\t* config/aarch64/aarch64.c (aarch64_valid_floating_const): Move\n\taarch64_float_const_zero_rtx_p check before TFmode check.\n\t* config/aarch64/aarch64.md (movtf): Don't call force_reg if op1 is\n\tan fp zero.\n\t(movtf_aarch64): Separate ?rY alternative into two.  Adjust assembly\n\tcode and attributes to match.  Change condition from register_operand\n\tto aarch64_reg_or_fp_zero for op1.  Change type for ldp from\n\tneon_load1_2reg to load2.  Change type for stp from neon_store1_2reg\n\tto store2.\n\nFrom-SVN: r224493", "tree": {"sha": "a58fee3e6534bf7c95ac9aaa70a72b6711b9bb55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a58fee3e6534bf7c95ac9aaa70a72b6711b9bb55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a0f8c015e787ad40bca94c72d34911368762db9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a0f8c015e787ad40bca94c72d34911368762db9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a0f8c015e787ad40bca94c72d34911368762db9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a0f8c015e787ad40bca94c72d34911368762db9/comments", "author": null, "committer": null, "parents": [{"sha": "f92c74268a1f3e9ff6921097e8da418879769e2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f92c74268a1f3e9ff6921097e8da418879769e2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f92c74268a1f3e9ff6921097e8da418879769e2b"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "812cb7af07a90ba891a4e8518b48dd28f1004575", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0f8c015e787ad40bca94c72d34911368762db9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0f8c015e787ad40bca94c72d34911368762db9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a0f8c015e787ad40bca94c72d34911368762db9", "patch": "@@ -1,3 +1,20 @@\n+2015-06-15  Jim Wilson  <jim.wilson@linaro.org>\n+\n+\t* config/aarch64/aarch64.md (mov<mode>_aarch64): Change alternative 2\n+\tto use neon_move instead of mov_imm.\n+\t(movdi_aarch64): Change alternative 14 to use neon_move not fmov.\n+\t(movtf_aarch64): Change alternative 4 to use neon_move_q not fconstd.\n+\n+\t* config/aarch64/aarch64.c (aarch64_valid_floating_const): Move\n+\taarch64_float_const_zero_rtx_p check before TFmode check.\n+\t* config/aarch64/aarch64.md (movtf): Don't call force_reg if op1 is\n+\tan fp zero.\n+\t(movtf_aarch64): Separate ?rY alternative into two.  Adjust assembly\n+\tcode and attributes to match.  Change condition from register_operand\n+\tto aarch64_reg_or_fp_zero for op1.  Change type for ldp from\n+\tneon_load1_2reg to load2.  Change type for stp from neon_store1_2reg\n+\tto store2.\n+\n 2015-06-15  Aldy Hernandez  <aldyh@redhat.com>\n \n \tPR debug/66535"}, {"sha": "a79bb6a96572799181a5bff3c3818e294f87cb7a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0f8c015e787ad40bca94c72d34911368762db9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0f8c015e787ad40bca94c72d34911368762db9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=6a0f8c015e787ad40bca94c72d34911368762db9", "patch": "@@ -7417,16 +7417,13 @@ aarch64_valid_floating_const (machine_mode mode, rtx x)\n   if (!CONST_DOUBLE_P (x))\n     return false;\n \n-  /* TODO: We could handle moving 0.0 to a TFmode register,\n-     but first we would like to refactor the movtf_aarch64\n-     to be more amicable to split moves properly and\n-     correctly gate on TARGET_SIMD.  For now - reject all\n-     constants which are not to SFmode or DFmode registers.  */\n+  if (aarch64_float_const_zero_rtx_p (x))\n+    return true;\n+\n+  /* We only handle moving 0.0 to a TFmode register.  */\n   if (!(mode == SFmode || mode == DFmode))\n     return false;\n \n-  if (aarch64_float_const_zero_rtx_p (x))\n-    return true;\n   return aarch64_float_const_representable_p (x);\n }\n "}, {"sha": "1efe57c91b10e47ab7511d089f7b4bb53f18f06e", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a0f8c015e787ad40bca94c72d34911368762db9/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a0f8c015e787ad40bca94c72d34911368762db9/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=6a0f8c015e787ad40bca94c72d34911368762db9", "patch": "@@ -827,7 +827,7 @@\n        gcc_unreachable ();\n      }\n }\n-  [(set_attr \"type\" \"mov_reg,mov_imm,mov_imm,load1,load1,store1,store1,\\\n+  [(set_attr \"type\" \"mov_reg,mov_imm,neon_move,load1,load1,store1,store1,\\\n                      neon_to_gp<q>,neon_from_gp<q>,neon_dup\")\n    (set_attr \"simd\" \"*,*,yes,*,*,*,*,yes,yes,yes\")]\n )\n@@ -912,7 +912,7 @@\n        DONE;\n     }\"\n   [(set_attr \"type\" \"mov_reg,mov_reg,mov_reg,mov_imm,mov_imm,load1,load1,store1,store1,\\\n-                     adr,adr,f_mcr,f_mrc,fmov,fmov\")\n+                     adr,adr,f_mcr,f_mrc,fmov,neon_move\")\n    (set_attr \"fp\" \"*,*,*,*,*,*,yes,*,yes,*,*,yes,yes,yes,*\")\n    (set_attr \"simd\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*,yes\")]\n )\n@@ -1040,18 +1040,20 @@\n \tFAIL;\n      }\n \n-    if (GET_CODE (operands[0]) == MEM)\n+    if (GET_CODE (operands[0]) == MEM\n+        && ! (GET_CODE (operands[1]) == CONST_DOUBLE\n+\t      && aarch64_float_const_zero_rtx_p (operands[1])))\n       operands[1] = force_reg (TFmode, operands[1]);\n   \"\n )\n \n (define_insn \"*movtf_aarch64\"\n   [(set (match_operand:TF 0\n-\t \"nonimmediate_operand\" \"=w,?&r,w ,?r,w,?w,w,m,?r ,Ump\")\n+\t \"nonimmediate_operand\" \"=w,?&r,w ,?r,w,?w,w,m,?r ,Ump,Ump\")\n \t(match_operand:TF 1\n-\t \"general_operand\"      \" w,?r, ?r,w ,Y,Y ,m,w,Ump,?rY\"))]\n+\t \"general_operand\"      \" w,?r, ?r,w ,Y,Y ,m,w,Ump,?r ,Y\"))]\n   \"TARGET_FLOAT && (register_operand (operands[0], TFmode)\n-    || register_operand (operands[1], TFmode))\"\n+    || aarch64_reg_or_fp_zero (operands[1], TFmode))\"\n   \"@\n    orr\\\\t%0.16b, %1.16b, %1.16b\n    #\n@@ -1062,12 +1064,13 @@\n    ldr\\\\t%q0, %1\n    str\\\\t%q1, %0\n    ldp\\\\t%0, %H0, %1\n-   stp\\\\t%1, %H1, %0\"\n-  [(set_attr \"type\" \"logic_reg,multiple,f_mcr,f_mrc,fconstd,fconstd,\\\n-                     f_loadd,f_stored,neon_load1_2reg,neon_store1_2reg\")\n-   (set_attr \"length\" \"4,8,8,8,4,4,4,4,4,4\")\n-   (set_attr \"fp\" \"*,*,yes,yes,*,yes,yes,yes,*,*\")\n-   (set_attr \"simd\" \"yes,*,*,*,yes,*,*,*,*,*\")]\n+   stp\\\\t%1, %H1, %0\n+   stp\\\\txzr, xzr, %0\"\n+  [(set_attr \"type\" \"logic_reg,multiple,f_mcr,f_mrc,neon_move_q,fconstd,\\\n+                     f_loadd,f_stored,load2,store2,store2\")\n+   (set_attr \"length\" \"4,8,8,8,4,4,4,4,4,4,4\")\n+   (set_attr \"fp\" \"*,*,yes,yes,*,yes,yes,yes,*,*,*\")\n+   (set_attr \"simd\" \"yes,*,*,*,yes,*,*,*,*,*,*\")]\n )\n \n (define_split"}]}