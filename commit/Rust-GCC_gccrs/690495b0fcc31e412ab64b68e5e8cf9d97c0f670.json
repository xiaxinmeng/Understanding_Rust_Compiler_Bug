{"sha": "690495b0fcc31e412ab64b68e5e8cf9d97c0f670", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkwNDk1YjBmY2MzMWU0MTJhYjY0YjY4ZTVlOGNmOWQ5N2MwZjY3MA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-30T09:58:45Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-30T09:58:45Z"}, "message": "basic_string.tcc (_S_construct(_InIterator, _InIterator, const _Alloc&, input_iterator_tag)): Simplify the double loop, streamline.\n\n2004-01-30  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.tcc (_S_construct(_InIterator,\n\t_InIterator, const _Alloc&, input_iterator_tag)): Simplify\n\tthe double loop, streamline.\n\n\t* include/bits/basic_string.tcc: Very minor tweaks.\n\nFrom-SVN: r76937", "tree": {"sha": "8232ed7ad46cbb79d3d4643161d559067bc30372", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8232ed7ad46cbb79d3d4643161d559067bc30372"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/690495b0fcc31e412ab64b68e5e8cf9d97c0f670", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/690495b0fcc31e412ab64b68e5e8cf9d97c0f670", "html_url": "https://github.com/Rust-GCC/gccrs/commit/690495b0fcc31e412ab64b68e5e8cf9d97c0f670", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/690495b0fcc31e412ab64b68e5e8cf9d97c0f670/comments", "author": null, "committer": null, "parents": [{"sha": "57116d8d9f851d4844479d6a999c2f1d1a54303b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57116d8d9f851d4844479d6a999c2f1d1a54303b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57116d8d9f851d4844479d6a999c2f1d1a54303b"}], "stats": {"total": 72, "additions": 32, "deletions": 40}, "files": [{"sha": "e13c44a07c708880a7b04e64b98583c3e3cf211f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/690495b0fcc31e412ab64b68e5e8cf9d97c0f670/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/690495b0fcc31e412ab64b68e5e8cf9d97c0f670/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=690495b0fcc31e412ab64b68e5e8cf9d97c0f670", "patch": "@@ -1,3 +1,11 @@\n+2004-01-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.tcc (_S_construct(_InIterator,\n+\t_InIterator, const _Alloc&, input_iterator_tag)): Simplify\n+\tthe double loop, streamline.\n+\n+\t* include/bits/basic_string.tcc: Very minor tweaks.\n+\n 2004-01-30  Loren J. Rittle  <ljrittle@acm.org>\n \n \t* scripts/check_performance: Only compile with $THREAD_FLAG"}, {"sha": "a478a4cf248380ca5bffd920711bca36fe583222", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 24, "deletions": 40, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/690495b0fcc31e412ab64b68e5e8cf9d97c0f670/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/690495b0fcc31e412ab64b68e5e8cf9d97c0f670/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=690495b0fcc31e412ab64b68e5e8cf9d97c0f670", "patch": "@@ -92,53 +92,39 @@ namespace std\n \t  return _S_empty_rep()._M_refdata();\n \t// Avoid reallocation for common case.\n \t_CharT __buf[100];\n-\tsize_type __i = 0;\n-\twhile (__beg != __end && __i < sizeof(__buf) / sizeof(_CharT))\n+\tsize_type __len = 0;\n+\twhile (__beg != __end && __len < sizeof(__buf) / sizeof(_CharT))\n \t  { \n-\t    __buf[__i++] = *__beg; \n-\t    ++__beg; \n+\t    __buf[__len++] = *__beg; \n+\t    ++__beg;\n \t  }\n-\t_Rep* __r = _Rep::_S_create(__i, size_type(0), __a);\n-\ttraits_type::copy(__r->_M_refdata(), __buf, __i);\n-\t__r->_M_length = __i;\n+\t_Rep* __r = _Rep::_S_create(__len, size_type(0), __a);\n+\ttraits_type::copy(__r->_M_refdata(), __buf, __len);\n \ttry \n \t  {\n-\t    // NB: this loop looks precisely this way because\n-\t    // it avoids comparing __beg != __end any more\n-\t    // than strictly necessary; != might be expensive!\n-\t    for (;;)\n+\t    while (__beg != __end)\n \t      {\n-\t\t_CharT* __p = __r->_M_refdata() + __r->_M_length;\n-\t\t_CharT* __last = __r->_M_refdata() + __r->_M_capacity;\n-\t\tfor (;;)\n+\t\tif (__len == __r->_M_capacity)\n \t\t  {\n-\t\t    if (__beg == __end)\n-\t\t      {\n-\t\t\t__r->_M_length = __p - __r->_M_refdata();\n-\t\t\t*__p = _Rep::_S_terminal;       // grrr.\n-\t\t\treturn __r->_M_refdata();\n-\t\t      }\n-\t\t    if (__p == __last)\n-\t\t      break;\n-\t\t    *__p++ = *__beg; \n-\t\t    ++__beg;\n+\t\t    // Allocate more space.\n+\t\t    _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);\n+\t\t    traits_type::copy(__another->_M_refdata(), \n+\t\t\t\t      __r->_M_refdata(), __len);\n+\t\t    __r->_M_destroy(__a);\n+\t\t    __r = __another;\n \t\t  }\n-\t\t// Allocate more space.\n-\t\tconst size_type __len = __r->_M_capacity;\n-\t\t_Rep* __another = _Rep::_S_create(__len + 1, __len, __a);\n-\t\ttraits_type::copy(__another->_M_refdata(), \n-\t\t\t\t  __r->_M_refdata(), __len);\n-\t\t__r->_M_destroy(__a);\n-\t\t__r = __another;\n-\t\t__r->_M_length = __len;\n+\t\t__r->_M_refdata()[__len++] = *__beg; \n+\t\t++__beg;\n \t      }\n \t  }\n \tcatch(...) \n \t  {\n \t    __r->_M_destroy(__a); \n \t    __throw_exception_again;\n \t  }\n-\treturn 0;\n+\t__r->_M_length = __len;\n+\t__r->_M_refdata()[__len] = _Rep::_S_terminal;       // grrr.\n+\treturn __r->_M_refdata();\n       }\n   \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -167,7 +153,6 @@ namespace std\n \t    __throw_exception_again;\n \t  }\n \t__r->_M_length = __dnew;\n-\n \t__r->_M_refdata()[__dnew] = _Rep::_S_terminal;  // grrr.\n \treturn __r->_M_refdata();\n       }\n@@ -209,9 +194,8 @@ namespace std\n     : _M_dataplus(_S_construct(__str._M_data()\n \t\t\t       + __str._M_check(__pos,\n \t\t\t\t\t\t\"basic_string::basic_string\"),\n-\t\t\t       __str._M_data() + __pos \n-\t\t\t       + __str._M_limit(__pos, __n),\n-\t\t\t       _Alloc()), _Alloc())\n+\t\t\t       __str._M_data() + __str._M_limit(__pos, __n)\n+\t\t\t       + __pos, _Alloc()), _Alloc())\n     { }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -221,8 +205,8 @@ namespace std\n     : _M_dataplus(_S_construct(__str._M_data()\n \t\t\t       + __str._M_check(__pos,\n \t\t\t\t\t\t\"basic_string::basic_string\"),\n-\t\t\t       __str._M_data() + __pos\n-\t\t\t       + __str._M_limit(__pos, __n), __a), __a)\n+\t\t\t       __str._M_data() + __str._M_limit(__pos, __n)\n+\t\t\t       + __pos, __a), __a)\n     { }\n \n   // TBD: DPG annotate\n@@ -262,7 +246,7 @@ namespace std\n       if (_M_rep() != __str._M_rep())\n \t{\n \t  // XXX MT\n-\t  allocator_type __a = this->get_allocator();\n+\t  const allocator_type __a = this->get_allocator();\n \t  _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());\n \t  _M_rep()->_M_dispose(__a);\n \t  _M_data(__tmp);"}]}