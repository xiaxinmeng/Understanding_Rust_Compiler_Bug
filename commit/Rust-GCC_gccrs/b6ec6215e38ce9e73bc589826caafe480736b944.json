{"sha": "b6ec6215e38ce9e73bc589826caafe480736b944", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZlYzYyMTVlMzhjZTllNzNiYzU4OTgyNmNhYWZlNDgwNzM2Yjk0NA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-05-22T14:36:27Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-05-22T14:36:27Z"}, "message": "[AArch64] PR target/65491: Classify V1TF vectors as AAPCS64 short vectors rather than composite types\n\n\tPR target/65491\n\t* config/aarch64/aarch64.c (aarch64_short_vector_p): Move above\n\taarch64_composite_type_p.  Remove check for aarch64_composite_type_p.\n\t(aarch64_composite_type_p): Return false if given type and mode are\n\tfor a short vector.\n\n\tPR target/65491\n\t* gcc.target/aarch64/pr65491_1.c: New test.\n\t* gcc.target/aarch64/aapcs64/type-def.h (vlf1_t): New typedef.\n\t* gcc.target/aarch64/aapcs64/func-ret-1.c: Add test for vlf1_t.\n\nFrom-SVN: r223577", "tree": {"sha": "238584c7ad3365c0a68d132d7f72745685dfb0c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/238584c7ad3365c0a68d132d7f72745685dfb0c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6ec6215e38ce9e73bc589826caafe480736b944", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6ec6215e38ce9e73bc589826caafe480736b944", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6ec6215e38ce9e73bc589826caafe480736b944", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6ec6215e38ce9e73bc589826caafe480736b944/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "320d13eccc9e0df7e3ac2d9d81b8a56715c6c90e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/320d13eccc9e0df7e3ac2d9d81b8a56715c6c90e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/320d13eccc9e0df7e3ac2d9d81b8a56715c6c90e"}], "stats": {"total": 76, "additions": 55, "deletions": 21}, "files": [{"sha": "593877fe3a13402a66cd76eda0fc2efbb66ec2e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6ec6215e38ce9e73bc589826caafe480736b944/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6ec6215e38ce9e73bc589826caafe480736b944/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6ec6215e38ce9e73bc589826caafe480736b944", "patch": "@@ -1,3 +1,11 @@\n+2015-05-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/65491\n+\t* config/aarch64/aarch64.c (aarch64_short_vector_p): Move above\n+\taarch64_composite_type_p.  Remove check for aarch64_composite_type_p.\n+\t(aarch64_composite_type_p): Return false if given type and mode are\n+\tfor a short vector.\n+\n 2015-05-22  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vectorizer.h (struct _slp_oprnd_info): Add second_pattern"}, {"sha": "083b9b40ccbfae39bbc76b21efd9236c38b63c00", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6ec6215e38ce9e73bc589826caafe480736b944/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6ec6215e38ce9e73bc589826caafe480736b944/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b6ec6215e38ce9e73bc589826caafe480736b944", "patch": "@@ -8156,6 +8156,26 @@ aapcs_vfp_sub_candidate (const_tree type, machine_mode *modep)\n   return -1;\n }\n \n+/* Return TRUE if the type, as described by TYPE and MODE, is a short vector\n+   type as described in AAPCS64 \\S 4.1.2.\n+\n+   See the comment above aarch64_composite_type_p for the notes on MODE.  */\n+\n+static bool\n+aarch64_short_vector_p (const_tree type,\n+\t\t\tmachine_mode mode)\n+{\n+  HOST_WIDE_INT size = -1;\n+\n+  if (type && TREE_CODE (type) == VECTOR_TYPE)\n+    size = int_size_in_bytes (type);\n+  else if (GET_MODE_CLASS (mode) == MODE_VECTOR_INT\n+\t    || GET_MODE_CLASS (mode) == MODE_VECTOR_FLOAT)\n+    size = GET_MODE_SIZE (mode);\n+\n+  return (size == 8 || size == 16);\n+}\n+\n /* Return TRUE if the type, as described by TYPE and MODE, is a composite\n    type as described in AAPCS64 \\S 4.3.  This includes aggregate, union and\n    array types.  The C99 floating-point complex types are also considered\n@@ -8177,6 +8197,9 @@ static bool\n aarch64_composite_type_p (const_tree type,\n \t\t\t  machine_mode mode)\n {\n+  if (aarch64_short_vector_p (type, mode))\n+    return false;\n+\n   if (type && (AGGREGATE_TYPE_P (type) || TREE_CODE (type) == COMPLEX_TYPE))\n     return true;\n \n@@ -8188,27 +8211,6 @@ aarch64_composite_type_p (const_tree type,\n   return false;\n }\n \n-/* Return TRUE if the type, as described by TYPE and MODE, is a short vector\n-   type as described in AAPCS64 \\S 4.1.2.\n-\n-   See the comment above aarch64_composite_type_p for the notes on MODE.  */\n-\n-static bool\n-aarch64_short_vector_p (const_tree type,\n-\t\t\tmachine_mode mode)\n-{\n-  HOST_WIDE_INT size = -1;\n-\n-  if (type && TREE_CODE (type) == VECTOR_TYPE)\n-    size = int_size_in_bytes (type);\n-  else if (!aarch64_composite_type_p (type, mode)\n-\t   && (GET_MODE_CLASS (mode) == MODE_VECTOR_INT\n-\t       || GET_MODE_CLASS (mode) == MODE_VECTOR_FLOAT))\n-    size = GET_MODE_SIZE (mode);\n-\n-  return (size == 8 || size == 16) ? true : false;\n-}\n-\n /* Return TRUE if an argument, whose type is described by TYPE and MODE,\n    shall be passed or returned in simd/fp register(s) (providing these\n    parameter passing registers are available)."}, {"sha": "6faffebb1cd8102f37bfcf49552e9d99d93e2f01", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6ec6215e38ce9e73bc589826caafe480736b944/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6ec6215e38ce9e73bc589826caafe480736b944/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b6ec6215e38ce9e73bc589826caafe480736b944", "patch": "@@ -1,3 +1,10 @@\n+2015-05-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR target/65491\n+\t* gcc.target/aarch64/pr65491_1.c: New test.\n+\t* gcc.target/aarch64/aapcs64/type-def.h (vlf1_t): New typedef.\n+\t* gcc.target/aarch64/aapcs64/func-ret-1.c: Add test for vlf1_t.\n+\n 2015-05-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/65598"}, {"sha": "a21c9265cddd712882355a6563dcad890a243127", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/func-ret-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6ec6215e38ce9e73bc589826caafe480736b944/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6ec6215e38ce9e73bc589826caafe480736b944/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ffunc-ret-1.c?ref=b6ec6215e38ce9e73bc589826caafe480736b944", "patch": "@@ -12,6 +12,8 @@\n \n vf2_t vf2 = (vf2_t){ 17.f, 18.f };\n vi4_t vi4 = (vi4_t){ 0xdeadbabe, 0xbabecafe, 0xcafebeef, 0xbeefdead };\n+vlf1_t vlf1 = (vlf1_t) { 17.0 };\n+\n union int128_t qword;\n \n int *int_ptr = (int *)0xabcdef0123456789ULL;\n@@ -41,4 +43,5 @@ FUNC_VAL_CHECK (11,   long double, 98765432123456789.987654321L, Q0, flat)\n FUNC_VAL_CHECK (12,         vf2_t,        vf2, D0, f32in64)\n FUNC_VAL_CHECK (13,         vi4_t,        vi4, Q0, i32in128)\n FUNC_VAL_CHECK (14,         int *,    int_ptr, X0, flat)\n+FUNC_VAL_CHECK (15,         vlf1_t,    vlf1, Q0, flat)\n #endif"}, {"sha": "3b9b3499ece58dc2c41295b4a30c1d54a2382c63", "filename": "gcc/testsuite/gcc.target/aarch64/aapcs64/type-def.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6ec6215e38ce9e73bc589826caafe480736b944/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftype-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6ec6215e38ce9e73bc589826caafe480736b944/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftype-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Faapcs64%2Ftype-def.h?ref=b6ec6215e38ce9e73bc589826caafe480736b944", "patch": "@@ -10,6 +10,9 @@ typedef float vf4_t __attribute__((vector_size (16)));\n /* 128-bit vector of 4 ints.  */\n typedef int vi4_t __attribute__((vector_size (16)));\n \n+/* 128-bit vector of 1 quad precision float.  */\n+typedef long double vlf1_t __attribute__((vector_size (16)));\n+\n /* signed quad-word (in an union for the convenience of initialization).  */\n union int128_t\n {"}, {"sha": "a548afb1a30fe3f99697ecbc179adda61c5a4cf4", "filename": "gcc/testsuite/gcc.target/aarch64/pr65491_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6ec6215e38ce9e73bc589826caafe480736b944/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr65491_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6ec6215e38ce9e73bc589826caafe480736b944/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr65491_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr65491_1.c?ref=b6ec6215e38ce9e73bc589826caafe480736b944", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef long double a __attribute__((vector_size (16)));\n+\n+a\n+sum (a first, a second)\n+{\n+  return first + second;\n+}\n+"}]}