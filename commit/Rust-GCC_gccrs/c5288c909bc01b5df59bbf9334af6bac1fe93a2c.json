{"sha": "c5288c909bc01b5df59bbf9334af6bac1fe93a2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzUyODhjOTA5YmMwMWI1ZGY1OWJiZjkzMzRhZjZiYWMxZmU5M2EyYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-10T10:41:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-10T10:41:08Z"}, "message": "[multiple changes]\n\n2009-04-10  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_warn.adb: Minor reformatting\n\n\t* make.adb: Minor reformatting.\n\n2009-04-10  Gary Dismukes  <dismukes@adacore.com>\n\n\t* exp_ch7.adb (Find_Final_List): When creating a finalization-chain\n\tentity and the scope is a subprogram, retrieve the Sloc of the\n\tsubprogram's body rather than using the sloc of the spec, for better\n\tline-stepping behavior in gdb.\n\t(Wrap_Transient_Declaration): For the Sloc of nodes created with a list\n\tcontroller, use the Sloc of the first declaration of the containing list\n\trather than that of the node that triggered creation of the list\n\tcontroller.\n\nFrom-SVN: r145887", "tree": {"sha": "7fe59723e2d05915321f2ac530fc23644a55e74e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fe59723e2d05915321f2ac530fc23644a55e74e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c5288c909bc01b5df59bbf9334af6bac1fe93a2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5288c909bc01b5df59bbf9334af6bac1fe93a2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5288c909bc01b5df59bbf9334af6bac1fe93a2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5288c909bc01b5df59bbf9334af6bac1fe93a2c/comments", "author": null, "committer": null, "parents": [{"sha": "2844b3304646e48e4e98fae44900a66128604542", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2844b3304646e48e4e98fae44900a66128604542", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2844b3304646e48e4e98fae44900a66128604542"}], "stats": {"total": 107, "additions": 80, "deletions": 27}, "files": [{"sha": "438831ae9194deb50ed21fd4aabd5dc769899636", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5288c909bc01b5df59bbf9334af6bac1fe93a2c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5288c909bc01b5df59bbf9334af6bac1fe93a2c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c5288c909bc01b5df59bbf9334af6bac1fe93a2c", "patch": "@@ -1,3 +1,20 @@\n+2009-04-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_warn.adb: Minor reformatting\n+\n+\t* make.adb: Minor reformatting.\n+\n+2009-04-10  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* exp_ch7.adb (Find_Final_List): When creating a finalization-chain\n+\tentity and the scope is a subprogram, retrieve the Sloc of the\n+\tsubprogram's body rather than using the sloc of the spec, for better\n+\tline-stepping behavior in gdb.\n+\t(Wrap_Transient_Declaration): For the Sloc of nodes created with a list\n+\tcontroller, use the Sloc of the first declaration of the containing list\n+\trather than that of the node that triggered creation of the list\n+\tcontroller.\n+\n 2009-04-10  Vincent Celier  <celier@adacore.com>\n \n \t* prj-nmsc.adb (Check_Naming_Schemes): Initialize local variable Casing"}, {"sha": "c44c17f3e307daa025898d8d44660308e525c68a", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 52, "deletions": 19, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5288c909bc01b5df59bbf9334af6bac1fe93a2c/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5288c909bc01b5df59bbf9334af6bac1fe93a2c/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=c5288c909bc01b5df59bbf9334af6bac1fe93a2c", "patch": "@@ -1744,9 +1744,9 @@ package body Exp_Ch7 is\n             S := Enclosing_Dynamic_Scope (E);\n          end if;\n \n-         --  When the finalization chain entity is 'Error', it means that\n-         --  there should not be any chain at that level and that the\n-         --  enclosing one should be used\n+         --  When the finalization chain entity is 'Error', it means that there\n+         --  should not be any chain at that level and that the enclosing one\n+         --  should be used.\n \n          --  This is a nasty kludge, see ??? note in exp_ch11\n \n@@ -1758,9 +1758,34 @@ package body Exp_Ch7 is\n             return New_Reference_To (RTE (RE_Global_Final_List), Sloc (E));\n          else\n             if No (Finalization_Chain_Entity (S)) then\n-               Id :=\n-                 Make_Defining_Identifier (Sloc (S),\n-                   Chars => New_Internal_Name ('F'));\n+\n+               --  In the case where the scope is a subprogram, retrieve the\n+               --  Sloc of subprogram's body for association with the chain,\n+               --  since using the Sloc of the spec would be confusing during\n+               --  source-line stepping within the debugger.\n+\n+               declare\n+                  Flist_Loc : Source_Ptr := Sloc (S);\n+                  Subp_Body : Node_Id;\n+\n+               begin\n+                  if Ekind (S) in Subprogram_Kind then\n+                     Subp_Body := Unit_Declaration_Node (S);\n+\n+                     if Nkind (Subp_Body) /= N_Subprogram_Body then\n+                        Subp_Body := Corresponding_Body (Subp_Body);\n+                     end if;\n+\n+                     if Present (Subp_Body) then\n+                        Flist_Loc := Sloc (Subp_Body);\n+                     end if;\n+                  end if;\n+\n+                  Id :=\n+                    Make_Defining_Identifier (Flist_Loc,\n+                      Chars => New_Internal_Name ('F'));\n+               end;\n+\n                Set_Finalization_Chain_Entity (S, Id);\n \n                --  Set momentarily some semantics attributes to allow normal\n@@ -3367,13 +3392,14 @@ package body Exp_Ch7 is\n    --    Finalize_One (_v2);\n \n    procedure Wrap_Transient_Declaration (N : Node_Id) is\n-      S           : Entity_Id;\n-      LC          : Entity_Id := Empty;\n-      Nodes       : List_Id;\n-      Loc         : constant Source_Ptr := Sloc (N);\n-      Enclosing_S : Entity_Id;\n-      Uses_SS     : Boolean;\n-      Next_N      : constant Node_Id := Next (N);\n+      S              : Entity_Id;\n+      LC             : Entity_Id := Empty;\n+      Nodes          : List_Id;\n+      Loc            : constant Source_Ptr := Sloc (N);\n+      First_Decl_Loc : Source_Ptr;\n+      Enclosing_S    : Entity_Id;\n+      Uses_SS        : Boolean;\n+      Next_N         : constant Node_Id := Next (N);\n \n    begin\n       S := Current_Scope;\n@@ -3397,19 +3423,26 @@ package body Exp_Ch7 is\n       if Present (Finalization_Chain_Entity (S)) then\n          LC := Make_Defining_Identifier (Loc, New_Internal_Name ('L'));\n \n+         --  Use the Sloc of the first declaration of N's containing list, to\n+         --  maintain monotonicity of source-line stepping during debugging.\n+\n+         First_Decl_Loc := Sloc (First (List_Containing (N)));\n+\n          Nodes := New_List (\n-           Make_Object_Declaration (Loc,\n+           Make_Object_Declaration (First_Decl_Loc,\n              Defining_Identifier => LC,\n              Object_Definition   =>\n-               New_Reference_To (RTE (RE_Simple_List_Controller), Loc)),\n+               New_Reference_To\n+                 (RTE (RE_Simple_List_Controller), First_Decl_Loc)),\n \n-           Make_Object_Renaming_Declaration (Loc,\n+           Make_Object_Renaming_Declaration (First_Decl_Loc,\n              Defining_Identifier => Finalization_Chain_Entity (S),\n-             Subtype_Mark => New_Reference_To (RTE (RE_Finalizable_Ptr), Loc),\n+             Subtype_Mark =>\n+               New_Reference_To (RTE (RE_Finalizable_Ptr), First_Decl_Loc),\n              Name =>\n                Make_Selected_Component (Loc,\n-                 Prefix        => New_Reference_To (LC, Loc),\n-                 Selector_Name => Make_Identifier (Loc, Name_F))));\n+                 Prefix        => New_Reference_To (LC, First_Decl_Loc),\n+                 Selector_Name => Make_Identifier (First_Decl_Loc, Name_F))));\n \n          --  Put the declaration at the beginning of the declaration part\n          --  to make sure it will be before all other actions that have been"}, {"sha": "8a71f4c15680d8d4333df34976ac7ab695c07f7c", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5288c909bc01b5df59bbf9334af6bac1fe93a2c/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5288c909bc01b5df59bbf9334af6bac1fe93a2c/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=c5288c909bc01b5df59bbf9334af6bac1fe93a2c", "patch": "@@ -4112,10 +4112,10 @@ package body Make is\n \n             --  Never display -gnatea nor -gnatez\n \n-            if Args (J).all /= \"-gnatea\" and then\n-              Args (J).all /= \"-gnatez\"\n+            if Args (J).all /= \"-gnatea\"\n+                 and then\n+               Args (J).all /= \"-gnatez\"\n             then\n-\n                --  Do not display the mapping file argument automatically\n                --  created when using a project file.\n "}, {"sha": "86592525104577ba68a8b107fd2d4a6e47ed37b4", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c5288c909bc01b5df59bbf9334af6bac1fe93a2c/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c5288c909bc01b5df59bbf9334af6bac1fe93a2c/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=c5288c909bc01b5df59bbf9334af6bac1fe93a2c", "patch": "@@ -1888,9 +1888,9 @@ package body Sem_Warn is\n          --  the renaming may be intended to re-export the unit.\n \n          function Has_Visible_Entities (P : Entity_Id) return Boolean;\n-         --  If a package has no declared entities, inhibit warning because\n-         --  there is nothing to be referenced. The package may be in the\n-         --  context just in order to carry a linker pragma for example.\n+         --  This function determines if a package has any visible entities.\n+         --  True is returned if there is at least one declared visible entity,\n+         --  otherwise False is returned (e.g. case of only pragmas present).\n \n          -------------------------\n          -- Check_Inner_Package --\n@@ -2024,7 +2024,6 @@ package body Sem_Warn is\n             E : Entity_Id;\n \n          begin\n-\n             --  If unit in context is not a package, it is a subprogram that\n             --  is not called or a generic unit that is not instantiated\n             --  in the current unit, and warning is appropriate.\n@@ -2110,7 +2109,11 @@ package body Sem_Warn is\n                      if Unit = Spec_Unit then\n                         Set_Unreferenced_In_Spec (Item);\n \n-                     --  Otherwise simple unreferenced message\n+                     --  Otherwise simple unreferenced message, but skip this\n+                     --  if no visible entities, because that is most likely a\n+                     --  case where warning would be false positive (e.g. a\n+                     --  package with only a linker options pragma and nothing\n+                     --  else or a pragma elaborate with a body library task).\n \n                      elsif Has_Visible_Entities (Entity (Name (Item))) then\n                         Error_Msg_N"}]}