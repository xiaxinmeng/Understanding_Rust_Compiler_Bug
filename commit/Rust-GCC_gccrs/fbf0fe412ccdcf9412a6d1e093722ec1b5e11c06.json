{"sha": "fbf0fe412ccdcf9412a6d1e093722ec1b5e11c06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJmMGZlNDEyY2NkY2Y5NDEyYTZkMWUwOTM3MjJlYzFiNWUxMWMwNg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-03-01T22:07:44Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-03-01T22:07:44Z"}, "message": "* config/h8300/h8300.c (h8300_adjust_insn_length): Clean up.\n\nFrom-SVN: r50207", "tree": {"sha": "c422d5a6c22460a69afefba5c2bf8d7a946bcc5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c422d5a6c22460a69afefba5c2bf8d7a946bcc5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbf0fe412ccdcf9412a6d1e093722ec1b5e11c06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf0fe412ccdcf9412a6d1e093722ec1b5e11c06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbf0fe412ccdcf9412a6d1e093722ec1b5e11c06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbf0fe412ccdcf9412a6d1e093722ec1b5e11c06/comments", "author": null, "committer": null, "parents": [{"sha": "0010687d231895bed42ac368254546872bb3e0fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0010687d231895bed42ac368254546872bb3e0fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0010687d231895bed42ac368254546872bb3e0fc"}], "stats": {"total": 62, "additions": 35, "deletions": 27}, "files": [{"sha": "0b9b000659cde4266510a9a6db6aeb71768fded2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf0fe412ccdcf9412a6d1e093722ec1b5e11c06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf0fe412ccdcf9412a6d1e093722ec1b5e11c06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbf0fe412ccdcf9412a6d1e093722ec1b5e11c06", "patch": "@@ -1,3 +1,7 @@\n+2002-03-01  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/h8300/h8300.c (h8300_adjust_insn_length): Clean up.\n+\n Fri Mar  1 20:59:14 CET 2002  Jan Hubicka  <jh@suse.cz>\n \n \t* toplev.c (rest_of_compilation): Delete dead jumptables before"}, {"sha": "aa31531e6b9f65c6f1bbc77601f0a039a8155eee", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 31, "deletions": 27, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbf0fe412ccdcf9412a6d1e093722ec1b5e11c06/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbf0fe412ccdcf9412a6d1e093722ec1b5e11c06/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=fbf0fe412ccdcf9412a6d1e093722ec1b5e11c06", "patch": "@@ -3367,34 +3367,38 @@ h8300_adjust_insn_length (insn, length)\n       else\n \taddr = XEXP (SET_DEST (pat), 0);\n \n-      /* On the H8/300, only one adjustment is necessary; if the\n-\t address mode is register indirect, then this insn is two\n-\t bytes shorter than indicated in the machine description.  */\n-      if (TARGET_H8300 && GET_CODE (addr) == REG)\n-\treturn -2;\n-\n-      /* On the H8/300H and H8/S, register indirect is 6 bytes shorter than\n-\t indicated in the machine description.  */\n-      if ((TARGET_H8300H || TARGET_H8300S)\n-          && GET_CODE (addr) == REG)\n-\treturn -6;\n+      if (TARGET_H8300)\n+\t{\n+\t  /* On the H8/300, we subtract the difference between the\n+             actual length and the longest one, which is @(d:16,ERs).  */\n \n-      /* On the H8/300H and H8/S, reg + d, for small displacements is\n-\t 4 bytes shorter than indicated in the machine description.  */\n-      if ((TARGET_H8300H || TARGET_H8300S)\n-\t  && GET_CODE (addr) == PLUS\n-\t  && GET_CODE (XEXP (addr, 0)) == REG\n-\t  && GET_CODE (XEXP (addr, 1)) == CONST_INT\n-\t  && INTVAL (XEXP (addr, 1)) > -32768\n-\t  && INTVAL (XEXP (addr, 1)) < 32767)\n-\treturn -4;\n-\n-      /* On the H8/300H and H8/S, abs:16 is two bytes shorter than the\n-\t more general abs:24.  */\n-      if ((TARGET_H8300H || TARGET_H8300S)\n-\t  && GET_CODE (addr) == SYMBOL_REF\n-\t  && TINY_DATA_NAME_P (XSTR (addr, 0)))\n-\treturn -2;\n+\t  /* @Rs is 2 bytes shorter than the longest.  */\n+\t  if (GET_CODE (addr) == REG)\n+\t    return -2;\n+\t}\n+      else\n+\t{\n+\t  /* On the H8/300H and H8/S, we subtract the difference\n+             between the actual length and the longest one, which is\n+             @(d:24,ERs).  */\n+\n+\t  /* @ERs is 6 bytes shorter than the longest.  */\n+\t  if (GET_CODE (addr) == REG)\n+\t    return -6;\n+\n+\t  /* @(d:16,ERs) is 6 bytes shorter than the longest.  */\n+\t  if (GET_CODE (addr) == PLUS\n+\t      && GET_CODE (XEXP (addr, 0)) == REG\n+\t      && GET_CODE (XEXP (addr, 1)) == CONST_INT\n+\t      && INTVAL (XEXP (addr, 1)) > -32768\n+\t      && INTVAL (XEXP (addr, 1)) < 32767)\n+\t    return -4;\n+\n+\t  /* @aa:16 is 2 bytes shorter than the longest.  */\n+\t  if (GET_CODE (addr) == SYMBOL_REF\n+\t      && TINY_DATA_NAME_P (XSTR (addr, 0)))\n+\t    return -2;\n+\t}\n     }\n \n   /* Loading some constants needs adjustment.  */"}]}