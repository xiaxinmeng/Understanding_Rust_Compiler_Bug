{"sha": "91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFhZmNmYTMwYzFhMTVkNzU5ZjhmNTljOWQxZGY0MDNmMTk2YTViNg==", "commit": {"author": {"name": "Quentin Neill", "email": "quentin.neill.gnu@gmail.com", "date": "2010-11-10T22:02:23Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-11-10T22:02:23Z"}, "message": "Add support for BMI.\n\n2010-11-10 Quentin Neill <quentin.neill.gnu@gmail.com>\n\ngcc/\n\t* config.gcc (i[34567]86-*-*): Include bmiintrin.h.\n\t(x86_64-*-*): Likewise.\n\t* config/i386/cpuid.h: Define BMI bit.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Define\n\tand set has_bmi.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Check\n\tisa_flag for BMI.\n\t* config/i386/i386.c (OPTION_MASK_ISA_BMI_SET): New.\n\t(OPTION_MASK_ISA_BMI_UNSET): New.\n\t(ix86_handle_option): Handle -mbmi.\n\t(isa_opts): Add -mbmi.\n\t(enum pta_flags): Add PTA_BMI.\n\t(ix86_option_override_internal): Add BMI support.\n\t(ix86_valid_target_attribute_inner_p): Handle -mbmi.\n\t(IX86_BUILTIN_BEXTR32): New for BMI intrinsic.\n\t(IX86_BUILTIN_BEXTR64): Likewise.\n\t(IX86_BUILTIN_CTZS): Likewise.\n\t(bdesc_args): Add BMI intrinsics.\n\t(ix86_expand_args_builtin): Add BMI specific cases.\n\t* config/i386/i386.h (TARGET_BMI): New for BMI.\n\t(CTZ_DEFINED_VALUE_AT_ZERO): Likewise.\n\t(CLZ_DEFINED_VALUE_AT_ZERO): Likewise.\n\t* config/i386/i386.md (UNSPEC_BEXTR): New for BMI.\n\t(UNSPEC_TZCNT): Likewise.\n\t(ctz<mode>2): Add tzcnt, and handle 16 bit operands.\n\t(bmi_andn_<mode>): New for BMI.\n\t(bmi_bextr_<mode>): Likewise.\n\t(bmi_blsi_<mode>): Likewise.\n\t(bmi_blsmsk_<mode>): Likewise.\n\t(bmi_blsr_<mode>): Likewise.\n\t* config/i386/i386.opt: Add -mbmi.\n\t* config/i386/x86intrin.h: Add BMI check and bmiintrin.h.\n\t* config/i386/bmiintrin.h (__lzcnt_u16): New.\n\t(__tzcnt_u16): Likewise.\n\t(__andn_u32): Likewise.\n\t(__bextr_u32): Likewise.\n\t(__blsi_u32): Likewise.\n\t(__blsmsk_u32): Likewise.\n\t(__blsr_u32): Likewise.\n\t(__lzcnt_u32): Likewise.\n\t(__tzcnt_u32): Likewise.\n\t(__andn_u64): Likewise.\n\t(__bextr_u64): Likewise.\n\t(__blsi_u64): Likewise.\n\t(__blsmsk_u64): Likewise.\n\t(__blsr_u64): Likewise.\n\t(__lzcnt_u64): Likewise.\n\t(__tzcnt_u64): Likewise.\n\t* doc/invoke.texi: Document -mbmi and -mno-bmi.\n\t* doc/extend.texi: Document BMI built-in functions.\n\ngcc/testsuite/\n\t* g++.dg/other/i386-2.C: Add -mbmi.\n\t* g++.dg/other/i386-3.C: Likewise.\n\t* gcc.target/i386/funcspec-5.c: Add bmi and no-bmi targets.\n\t* gcc.target/i386/funcspec-6.c: Likewise.\n\t* gcc.target/i386/sse-12.c: Add -mbmi.\n\t* gcc.target/i386/bmi-1.c: New file.\n\t* gcc.target/i386/bmi-2.c: Likewise.\n\t* gcc.target/i386/bmi-3.c: Likewise.\n\t* gcc.target/i386/bmi-4.c: Likewise.\n\t* gcc.target/i386/bmi-5.c: Likewise.\n\t* gcc.target/i386/bmi-6.c: Likewise.\n\nFrom-SVN: r166561", "tree": {"sha": "1f178cf8d96294aacd58f3b1cf640290e554a0d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f178cf8d96294aacd58f3b1cf640290e554a0d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d24de8354b32e9958fa662497525844886b18c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d24de8354b32e9958fa662497525844886b18c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d24de8354b32e9958fa662497525844886b18c2"}], "stats": {"total": 534, "additions": 519, "deletions": 15}, "files": [{"sha": "bbd9c9d95be7a79afb76726ad4b67f51e430f63e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -1,3 +1,56 @@\n+2010-11-10  Quentin Neill  <quentin.neill.gnu@gmail.com>\n+\n+\t* config.gcc (i[34567]86-*-*): Include bmiintrin.h.\n+\t(x86_64-*-*): Likewise.\n+\t* config/i386/cpuid.h: Define BMI bit.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Define\n+\tand set has_bmi.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Check\n+\tisa_flag for BMI.\n+\t* config/i386/i386.c (OPTION_MASK_ISA_BMI_SET): New.\n+\t(OPTION_MASK_ISA_BMI_UNSET): New.\n+\t(ix86_handle_option): Handle -mbmi.\n+\t(isa_opts): Add -mbmi.\n+\t(enum pta_flags): Add PTA_BMI.\n+\t(ix86_option_override_internal): Add BMI support.\n+\t(ix86_valid_target_attribute_inner_p): Handle -mbmi.\n+\t(IX86_BUILTIN_BEXTR32): New for BMI intrinsic.\n+\t(IX86_BUILTIN_BEXTR64): Likewise.\n+\t(IX86_BUILTIN_CTZS): Likewise.\n+\t(bdesc_args): Add BMI intrinsics.\n+\t(ix86_expand_args_builtin): Add BMI specific cases.\n+\t* config/i386/i386.h (TARGET_BMI): New for BMI.\n+\t(CTZ_DEFINED_VALUE_AT_ZERO): Likewise.\n+\t(CLZ_DEFINED_VALUE_AT_ZERO): Likewise.\n+\t* config/i386/i386.md (UNSPEC_BEXTR): New for BMI.\n+\t(UNSPEC_TZCNT): Likewise.\n+\t(ctz<mode>2): Add tzcnt, and handle 16 bit operands.\n+\t(bmi_andn_<mode>): New for BMI.\n+\t(bmi_bextr_<mode>): Likewise.\n+\t(bmi_blsi_<mode>): Likewise.\n+\t(bmi_blsmsk_<mode>): Likewise.\n+\t(bmi_blsr_<mode>): Likewise.\n+\t* config/i386/i386.opt: Add -mbmi.\n+\t* config/i386/x86intrin.h: Add BMI check and bmiintrin.h.\n+\t* config/i386/bmiintrin.h (__lzcnt_u16): New.\n+\t(__tzcnt_u16): Likewise.\n+\t(__andn_u32): Likewise.\n+\t(__bextr_u32): Likewise.\n+\t(__blsi_u32): Likewise.\n+\t(__blsmsk_u32): Likewise.\n+\t(__blsr_u32): Likewise.\n+\t(__lzcnt_u32): Likewise.\n+\t(__tzcnt_u32): Likewise.\n+\t(__andn_u64): Likewise.\n+\t(__bextr_u64): Likewise.\n+\t(__blsi_u64): Likewise.\n+\t(__blsmsk_u64): Likewise.\n+\t(__blsr_u64): Likewise.\n+\t(__lzcnt_u64): Likewise.\n+\t(__tzcnt_u64): Likewise.\n+\t* doc/invoke.texi: Document -mbmi and -mno-bmi.\n+\t* doc/extend.texi: Document BMI built-in functions.\n+\n 2010-11-10  Jan Hubicka  <jh@suse.cz>\n \n \tPR tree-optimize/46228"}, {"sha": "73016ce6ffb9588f65d9950d7ebfca0e12531384", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -316,7 +316,7 @@ i[34567]86-*-*)\n \t\t       nmmintrin.h bmmintrin.h fma4intrin.h wmmintrin.h\n \t\t       immintrin.h x86intrin.h avxintrin.h xopintrin.h\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n-\t\t       abmintrin.h\"\n+\t\t       abmintrin.h bmiintrin.h\"\n \t;;\n x86_64-*-*)\n \tcpu_type=i386\n@@ -327,7 +327,7 @@ x86_64-*-*)\n \t\t       nmmintrin.h bmmintrin.h fma4intrin.h wmmintrin.h\n \t\t       immintrin.h x86intrin.h avxintrin.h xopintrin.h\n \t\t       ia32intrin.h cross-stdarg.h lwpintrin.h popcntintrin.h\n-\t\t       abmintrin.h\"\n+\t\t       abmintrin.h bmiintrin.h\"\n \tneed_64bit_hwint=yes\n \t;;\n ia64-*-*)"}, {"sha": "d3b3bbdf4b5d5146372ae6908f1737f7b5cf6bf2", "filename": "gcc/config/i386/bmiintrin.h", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fconfig%2Fi386%2Fbmiintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fconfig%2Fi386%2Fbmiintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbmiintrin.h?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -0,0 +1,145 @@\n+/* Copyright (C) 2010 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GCC is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _X86INTRIN_H_INCLUDED\n+# error \"Never use <bmiintrin.h> directly; include <x86intrin.h> instead.\"\n+#endif\n+\n+#ifndef __BMI__\n+# error \"BMI instruction set not enabled\"\n+#endif /* __BMI__ */\n+\n+#ifndef _BMIINTRIN_H_INCLUDED\n+#define _BMIINTRIN_H_INCLUDED\n+\n+extern __inline unsigned short __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__lzcnt_u16 (unsigned short __X)\n+{\n+  return __builtin_ia32_lzcnt_u16 (__X);\n+}\n+\n+extern __inline unsigned short __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__tzcnt_u16 (unsigned short __X)\n+{\n+  return __builtin_ctzs(__X);\n+}\n+\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__andn_u32 (unsigned int __X, unsigned int __Y)\n+{\n+  unsigned int tmp = ~(__X) & (__Y);\n+  return tmp;\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__bextr_u32 (unsigned int __X, unsigned int __Y)\n+{\n+  return __builtin_ia32_bextr_u32 (__X, __Y);\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsi_u32 (unsigned int __X)\n+{\n+  unsigned int tmp = (__X) & (-(__X));\n+  return tmp;\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsmsk_u32 (unsigned int __X)\n+{\n+  unsigned int tmp = (__X) ^ (__X - 1);\n+  return tmp;\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsr_u32 (unsigned int __X)\n+{\n+  unsigned int tmp = (__X) & (__X - 1);\n+  return tmp;\n+}\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__lzcnt_u32 (unsigned int __X)\n+{\n+  return __builtin_ia32_lzcnt_u32 (__X);\n+}\n+\n+\n+extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__tzcnt_u32 (unsigned int __X)\n+{\n+  return __builtin_ctz(__X);\n+}\n+\n+\n+#ifdef  __x86_64__\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__andn_u64 (unsigned long long __X, unsigned long long __Y)\n+{\n+  unsigned long long tmp = ~(__X) & (__Y);\n+  return tmp;\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__bextr_u64 (unsigned long long __X, unsigned long long __Y)\n+{\n+  return __builtin_ia32_bextr_u64 (__X, __Y);\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsi_u64 (unsigned long long __X)\n+{\n+  unsigned long long tmp = (__X) & (-(__X));\n+  return tmp;\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsmsk_u64 (unsigned long long __X)\n+{\n+  unsigned long long tmp = (__X) ^ (__X - 1);\n+  return tmp;\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__blsr_u64 (unsigned long long __X)\n+{\n+  unsigned long long tmp = (__X) & (__X - 1);\n+  return tmp;\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__lzcnt_u64 (unsigned long long __X)\n+{\n+  return __builtin_ia32_lzcnt_u64 (__X);\n+}\n+\n+extern __inline unsigned long long __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+__tzcnt_u64 (unsigned long long __X)\n+{\n+  return __builtin_ctzll(__X);\n+}\n+\n+#endif /* __x86_64__  */\n+\n+#endif /* _BMIINTRIN_H_INCLUDED */"}, {"sha": "0f1af7f8d0d324ecb200c49dd887f233e09c8f51", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -62,6 +62,7 @@\n \n /* Extended Features (%eax == 7) */\n #define bit_FSGSBASE\t(1 << 0)\n+#define bit_BMI\t\t(1 << 3)\n \n #if defined(__i386__) && defined(__PIC__)\n /* %ebx may be the PIC register.  */"}, {"sha": "6319a14b78a8f7d83cb46608e51668da4ccc5871", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -397,6 +397,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_popcnt = 0, has_aes = 0, has_avx = 0;\n   unsigned int has_pclmul = 0, has_abm = 0, has_lwp = 0;\n   unsigned int has_fma4 = 0, has_xop = 0;\n+  unsigned int has_bmi = 0;\n \n   bool arch;\n \n@@ -467,6 +468,10 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_longmode = edx & bit_LM;\n       has_3dnowp = edx & bit_3DNOWP;\n       has_3dnow = edx & bit_3DNOW;\n+\n+      __cpuid (0x7, eax, ebx, ecx, edx);\n+\n+      has_bmi = ebx & bit_BMI;\n     }\n \n   if (!arch)\n@@ -686,6 +691,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \toptions = concat (options, \" -mfma4\", NULL);\n       if (has_xop)\n \toptions = concat (options, \" -mxop\", NULL);\n+      if (has_bmi)\n+\toptions = concat (options, \" -mbmi\", NULL);\n \n       if (has_avx)\n \toptions = concat (options, \" -mavx\", NULL);"}, {"sha": "51c0c135ad2144b5b3925d725dec68e8bbd66484", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -253,6 +253,8 @@ ix86_target_macros_internal (int isa_flag,\n     def_or_undef (parse_in, \"__LWP__\");\n   if (isa_flag & OPTION_MASK_ISA_ABM)\n     def_or_undef (parse_in, \"__ABM__\");\n+  if (isa_flag & OPTION_MASK_ISA_BMI)\n+    def_or_undef (parse_in, \"__BMI__\");\n   if (isa_flag & OPTION_MASK_ISA_POPCNT)\n     def_or_undef (parse_in, \"__POPCNT__\");\n   if (isa_flag & OPTION_MASK_ISA_FSGSBASE)"}, {"sha": "3c7dc8c827ef8209a4b7f15c495233dd3f2c21b5", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -2325,6 +2325,8 @@ static int ix86_isa_flags_explicit;\n #define OPTION_MASK_ISA_ABM_SET \\\n   (OPTION_MASK_ISA_ABM | OPTION_MASK_ISA_POPCNT)\n \n+#define OPTION_MASK_ISA_BMI_SET OPTION_MASK_ISA_BMI\n+\n #define OPTION_MASK_ISA_POPCNT_SET OPTION_MASK_ISA_POPCNT\n #define OPTION_MASK_ISA_CX16_SET OPTION_MASK_ISA_CX16\n #define OPTION_MASK_ISA_SAHF_SET OPTION_MASK_ISA_SAHF\n@@ -2379,6 +2381,7 @@ static int ix86_isa_flags_explicit;\n #define OPTION_MASK_ISA_AES_UNSET OPTION_MASK_ISA_AES\n #define OPTION_MASK_ISA_PCLMUL_UNSET OPTION_MASK_ISA_PCLMUL\n #define OPTION_MASK_ISA_ABM_UNSET OPTION_MASK_ISA_ABM\n+#define OPTION_MASK_ISA_BMI_UNSET OPTION_MASK_ISA_BMI\n #define OPTION_MASK_ISA_POPCNT_UNSET OPTION_MASK_ISA_POPCNT\n #define OPTION_MASK_ISA_CX16_UNSET OPTION_MASK_ISA_CX16\n #define OPTION_MASK_ISA_SAHF_UNSET OPTION_MASK_ISA_SAHF\n@@ -2681,6 +2684,19 @@ ix86_handle_option (size_t code, const char *arg ATTRIBUTE_UNUSED, int value)\n \t}\n       return true;\n \n+    case OPT_mbmi:\n+      if (value)\n+\t{\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_BMI_SET;\n+\t  ix86_isa_flags_explicit |= OPTION_MASK_ISA_BMI_SET;\n+\t}\n+      else\n+\t{\n+\t  ix86_isa_flags &= ~OPTION_MASK_ISA_BMI_UNSET;\n+\t  ix86_isa_flags_explicit |= OPTION_MASK_ISA_BMI_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mpopcnt:\n       if (value)\n \t{\n@@ -2849,6 +2865,7 @@ ix86_target_string (int isa, int flags, const char *arch, const char *tune,\n     { \"-m3dnowa\",\tOPTION_MASK_ISA_3DNOW_A },\n     { \"-mmmx\",\t\tOPTION_MASK_ISA_MMX },\n     { \"-mabm\",\t\tOPTION_MASK_ISA_ABM },\n+    { \"-mbmi\",\t\tOPTION_MASK_ISA_BMI },\n     { \"-mpopcnt\",\tOPTION_MASK_ISA_POPCNT },\n     { \"-mmovbe\",\tOPTION_MASK_ISA_MOVBE },\n     { \"-mcrc32\",\tOPTION_MASK_ISA_CRC32 },\n@@ -3104,7 +3121,9 @@ ix86_option_override_internal (bool main_args_p)\n       PTA_LWP = 1 << 23,\n       PTA_FSGSBASE = 1 << 24,\n       PTA_RDRND = 1 << 25,\n-      PTA_F16C = 1 << 26\n+      PTA_F16C = 1 << 26,\n+      PTA_BMI = 1 << 27\n+      /* if this reaches 32, need to widen struct pta flags below */\n     };\n \n   static struct pta\n@@ -3439,6 +3458,9 @@ ix86_option_override_internal (bool main_args_p)\n \tif (processor_alias_table[i].flags & PTA_ABM\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_ABM))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_ABM;\n+\tif (processor_alias_table[i].flags & PTA_BMI\n+\t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_BMI))\n+\t  ix86_isa_flags |= OPTION_MASK_ISA_BMI;\n \tif (processor_alias_table[i].flags & PTA_CX16\n \t    && !(ix86_isa_flags_explicit & OPTION_MASK_ISA_CX16))\n \t  ix86_isa_flags |= OPTION_MASK_ISA_CX16;\n@@ -4276,6 +4298,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[])\n     /* isa options */\n     IX86_ATTR_ISA (\"3dnow\",\tOPT_m3dnow),\n     IX86_ATTR_ISA (\"abm\",\tOPT_mabm),\n+    IX86_ATTR_ISA (\"bmi\",\tOPT_mbmi),\n     IX86_ATTR_ISA (\"aes\",\tOPT_maes),\n     IX86_ATTR_ISA (\"avx\",\tOPT_mavx),\n     IX86_ATTR_ISA (\"mmx\",\tOPT_mmmx),\n@@ -24016,6 +24039,11 @@ enum ix86_builtins\n \n   IX86_BUILTIN_CLZS,\n \n+  /* BMI instructions.  */\n+  IX86_BUILTIN_BEXTR32,\n+  IX86_BUILTIN_BEXTR64,\n+  IX86_BUILTIN_CTZS,\n+\n   /* FSGSBASE instructions.  */\n   IX86_BUILTIN_RDFSBASE32,\n   IX86_BUILTIN_RDFSBASE64,\n@@ -24955,6 +24983,11 @@ static const struct builtin_description bdesc_args[] =\n \n   { OPTION_MASK_ISA_ABM, CODE_FOR_clzhi2_abm,   \"__builtin_clzs\",   IX86_BUILTIN_CLZS,    UNKNOWN,     (int) UINT16_FTYPE_UINT16 },\n \n+  /* BMI */\n+  { OPTION_MASK_ISA_BMI, CODE_FOR_bmi_bextr_si, \"__builtin_ia32_bextr_u32\", IX86_BUILTIN_BEXTR32, UNKNOWN, (int) UINT_FTYPE_UINT_UINT },\n+  { OPTION_MASK_ISA_BMI, CODE_FOR_bmi_bextr_di, \"__builtin_ia32_bextr_u64\", IX86_BUILTIN_BEXTR64, UNKNOWN, (int) UINT64_FTYPE_UINT64_UINT64 },\n+  { OPTION_MASK_ISA_BMI, CODE_FOR_ctzhi2,       \"__builtin_ctzs\",           IX86_BUILTIN_CTZS,    UNKNOWN, (int) UINT16_FTYPE_UINT16 },\n+\n   /* F16C */\n   { OPTION_MASK_ISA_F16C, CODE_FOR_vcvtph2ps, \"__builtin_ia32_vcvtph2ps\", IX86_BUILTIN_CVTPH2PS, UNKNOWN, (int) V4SF_FTYPE_V8HI },\n   { OPTION_MASK_ISA_F16C, CODE_FOR_vcvtph2ps256, \"__builtin_ia32_vcvtph2ps256\", IX86_BUILTIN_CVTPH2PS256, UNKNOWN, (int) V8SF_FTYPE_V8HI },"}, {"sha": "d854797be82898aa4baa77ec79903a9c27bb91c8", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -59,6 +59,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_LWP\tOPTION_ISA_LWP\n #define TARGET_ROUND\tOPTION_ISA_ROUND\n #define TARGET_ABM\tOPTION_ISA_ABM\n+#define TARGET_BMI\tOPTION_ISA_BMI\n #define TARGET_POPCNT\tOPTION_ISA_POPCNT\n #define TARGET_SAHF\tOPTION_ISA_SAHF\n #define TARGET_MOVBE\tOPTION_ISA_MOVBE\n@@ -2366,6 +2367,14 @@ struct GTY(()) machine_function {\n extern void debug_ready_dispatch (void);\n extern void debug_dispatch_window (int);\n \n+/* The value at zero is only defined for the BMI instructions\n+   LZCNT and TZCNT, not the BSR/BSF insns in the original isa.  */\n+#define CTZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) \\\n+\t((VALUE) = GET_MODE_BITSIZE (MODE), TARGET_BMI)\n+#define CLZ_DEFINED_VALUE_AT_ZERO(MODE, VALUE) \\\n+\t((VALUE) = GET_MODE_BITSIZE (MODE), TARGET_BMI)\n+\n+\n /*\n Local variables:\n version-control: t"}, {"sha": "a4881f5e6fb4af837b9ae4548cd982d204be5d7e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 75, "deletions": 4, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -229,6 +229,9 @@\n   UNSPEC_VTESTP\n   UNSPEC_VCVTPH2PS\n   UNSPEC_VCVTPS2PH\n+\n+  ;; For BMI support\n+  UNSPEC_BEXTR\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -11988,13 +11991,19 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"ctz<mode>2\"\n-  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n-\t(ctz:SWI48 (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")))\n+  [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n+\t(ctz:SWI248 (match_operand:SWI248 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"bsf{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n+{\n+  if (TARGET_BMI)\n+    return \"tzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n+  else\n+    return \"bsf{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n+}\n   [(set_attr \"type\" \"alu1\")\n    (set_attr \"prefix_0f\" \"1\")\n+   (set (attr \"prefix_rep\") (symbol_ref \"TARGET_BMI\"))\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"clz<mode>2\"\n@@ -12021,12 +12030,74 @@\n   [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n \t(clz:SWI248 (match_operand:SWI248 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_ABM\"\n+  \"TARGET_ABM || TARGET_BMI\"\n   \"lzcnt{<imodesuffix>}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"prefix_rep\" \"1\")\n    (set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; BMI instructions.\n+(define_insn \"*bmi_andn_<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+        (and:SWI48\n+          (not:SWI48\n+            (match_operand:SWI48 1 \"register_operand\" \"r\"))\n+            (match_operand:SWI48 2 \"nonimmediate_operand\" \"rm\")))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_BMI\"\n+  \"andn\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"bmi_bextr_<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+        (unspec:SWI48 [(match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+                       (match_operand:SWI48 2 \"register_operand\" \"r\")]\n+                       UNSPEC_BEXTR))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_BMI\"\n+  \"bextr\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*bmi_blsi_<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+        (and:SWI48\n+          (neg:SWI48\n+            (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\"))\n+          (match_dup 1)))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_BMI\"\n+  \"blsi\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*bmi_blsmsk_<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+        (xor:SWI48\n+          (plus:SWI48\n+            (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+            (const_int -1))\n+          (match_dup 1)))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_BMI\"\n+  \"blsmsk\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n+(define_insn \"*bmi_blsr_<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+        (and:SWI48\n+          (plus:SWI48\n+            (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n+            (const_int -1))\n+          (match_dup 1)))\n+   (clobber (reg:CC FLAGS_REG))]\n+   \"TARGET_BMI\"\n+   \"blsr\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<MODE>\")])\n+\n (define_insn \"bsr_rex64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(minus:DI (const_int 63)"}, {"sha": "f4c3c582a15cc11877e046ad1ac14a51b25c46b0", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -358,6 +358,10 @@ mpopcnt\n Target Report Mask(ISA_POPCNT) Var(ix86_isa_flags) Save\n Support code generation of popcnt instruction.\n \n+mbmi\n+Target Report Mask(ISA_BMI) Var(ix86_isa_flags) Save\n+Support BMI built-in functions and code generation\n+\n mcx16\n Target Report Mask(ISA_CX16) Var(ix86_isa_flags) Save\n Support code generation of cmpxchg16b instruction."}, {"sha": "9a7366b769c31417eeeafa09e0f4f365763661b2", "filename": "gcc/config/i386/x86intrin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fconfig%2Fi386%2Fx86intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86intrin.h?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -81,6 +81,10 @@\n #include <abmintrin.h>\n #endif\n \n+#ifdef __BMI__\n+#include <bmiintrin.h>\n+#endif\n+\n #ifdef __POPCNT__\n #include <popcntintrin.h>\n #endif"}, {"sha": "15abbb8243b40211befd5ec596a99b99424535bd", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -9392,6 +9392,16 @@ unsigned char __builtin_ia32_lwpins32 (unsigned int, unsigned int, unsigned int)\n unsigned char __builtin_ia32_lwpins64 (unsigned __int64, unsigned int, unsigned int)\n @end smallexample\n \n+The following built-in functions are available when @option{-mbmi} is used.\n+All of them generate the machine instruction that is part of the name.\n+@smallexample\n+unsigned int __builtin_ia32_bextr_u32(unsigned int, unsigned int);\n+unsigned long long __builtin_ia32_bextr_u64 (unsigned long long, unsigned long long);\n+unsigned short __builtin_ia32_lzcnt_16(unsigned short);\n+unsigned int __builtin_ia32_lzcnt_u32(unsigned int);\n+unsigned long long __builtin_ia32_lzcnt_u64 (unsigned long long);\n+@end smallexample\n+\n The following built-in functions are available when @option{-m3dnow} is used.\n All of them generate the machine instruction that is part of the name.\n "}, {"sha": "99a7a890d7ba917273d7b2b0d9a31381cd7d79df", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -598,7 +598,7 @@ Objective-C and Objective-C++ Dialects}.\n -mcld -mcx16 -msahf -mmovbe -mcrc32 -mrecip -mvzeroupper @gol\n -mmmx  -msse  -msse2 -msse3 -mssse3 -msse4.1 -msse4.2 -msse4 -mavx @gol\n -maes -mpclmul -mfsgsbase -mrdrnd -mf16c -mfused-madd @gol\n--msse4a -m3dnow -mpopcnt -mabm -mfma4 -mxop -mlwp @gol\n+-msse4a -m3dnow -mpopcnt -mabm -mbmi -mfma4 -mxop -mlwp @gol\n -mthreads  -mno-align-stringops  -minline-all-stringops @gol\n -minline-stringops-dynamically -mstringop-strategy=@var{alg} @gol\n -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double @gol\n@@ -12450,6 +12450,8 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mno-popcnt\n @itemx -mabm\n @itemx -mno-abm\n+@itemx -mbmi\n+@itemx -mno-bmi\n @opindex mmmx\n @opindex mno-mmx\n @opindex msse\n@@ -12458,7 +12460,7 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @opindex mno-3dnow\n These switches enable or disable the use of instructions in the MMX,\n SSE, SSE2, SSE3, SSSE3, SSE4.1, AVX, AES, PCLMUL, FSGSBASE, RDRND,\n-F16C, SSE4A, FMA4, XOP, LWP, ABM or 3DNow!@: extended instruction sets.\n+F16C, SSE4A, FMA4, XOP, LWP, ABM, BMI, or 3DNow!@: extended instruction sets.\n These extensions are also available as built-in functions: see\n @ref{X86 Built-in Functions}, for details of the functions enabled and\n disabled by these switches."}, {"sha": "bc71f3cae8c6e0ad495ed568ac37cb52d708fbc6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -1,3 +1,17 @@\n+2010-11-10  Quentin Neill  <quentin.neill.gnu@gmail.com>\n+\n+\t* g++.dg/other/i386-2.C: Add -mbmi.\n+\t* g++.dg/other/i386-3.C: Likewise.\n+\t* gcc.target/i386/funcspec-5.c: Add bmi and no-bmi targets.\n+\t* gcc.target/i386/funcspec-6.c: Likewise.\n+\t* gcc.target/i386/sse-12.c: Add -mbmi.\n+\t* gcc.target/i386/bmi-1.c: New file.\n+\t* gcc.target/i386/bmi-2.c: Likewise.\n+\t* gcc.target/i386/bmi-3.c: Likewise.\n+\t* gcc.target/i386/bmi-4.c: Likewise.\n+\t* gcc.target/i386/bmi-5.c: Likewise.\n+\t* gcc.target/i386/bmi-6.c: Likewise.\n+\n 2010-11-10  Nathan Froyd  <froydnj@codesourcery.com>\n \n \tPR c++/46065"}, {"sha": "f0a382a8857388e4be5463445e65f1944a04736b", "filename": "gcc/testsuite/g++.dg/other/i386-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-2.C?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -pedantic-errors -march=k8 -m3dnow -mavx -mxop -maes -mpclmul -mpopcnt -mabm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O -pedantic-errors -march=k8 -m3dnow -mavx -mxop -maes -mpclmul -mpopcnt -mabm -mbmi -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, xopintrin.h, abmintrin.h,\n-   lwpintrin.h, popcntintrin.h and mm3dnow.h are usable with\n+   bmiintrin.h, lwpintrin.h, popcntintrin.h and mm3dnow.h are usable with\n    -O -pedantic-errors.  */\n \n #include <x86intrin.h>"}, {"sha": "4b27372320dd70e678938fd11aacdcbb81b41617", "filename": "gcc/testsuite/g++.dg/other/i386-3.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fi386-3.C?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -1,8 +1,8 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n-/* { dg-options \"-O -fkeep-inline-functions -march=k8 -m3dnow -mavx -mxop -maes -mpclmul -mpopcnt -mabm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O -fkeep-inline-functions -march=k8 -m3dnow -mavx -mxop -maes -mpclmul -mpopcnt -mabm -mbmi -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, xopintrin.h, abmintrin.h,\n-   lwpintrin.h, popcntintrin.h and mm3dnow.h are usable with\n+   bmiintrin.h, lwpintrin.h, popcntintrin.h and mm3dnow.h are usable with\n    -O -fkeep-inline-functions.  */\n \n #include <x86intrin.h>"}, {"sha": "dc964ba3d9234e81779ec578747c9183c4fb5e26", "filename": "gcc/testsuite/gcc.target/i386/bmi-1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-1.c?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi \" } */\n+/* { dg-final { scan-assembler \"andn\\[^\\\\n]*(%|)eax\" } } */\n+/* { dg-final { scan-assembler \"bextr\\[^\\\\n]*(%|)eax\" } } */\n+/* { dg-final { scan-assembler \"blsi\\[^\\\\n]*(%|)eax\" } } */\n+/* { dg-final { scan-assembler \"blsmsk\\[^\\\\n]*(%|)eax\" } } */\n+/* { dg-final { scan-assembler \"blsr\\[^\\\\n]*(%|)eax\" } } */\n+/* { dg-final { scan-assembler \"tzcntl\\[^\\\\n]*(%|)eax\" } } */\n+\n+#include <x86intrin.h>\n+\n+unsigned int\n+func_andn32 (unsigned int X, unsigned int Y)\n+{\n+  return __andn_u32(X, Y);\n+}\n+\n+unsigned int\n+func_bextr32 (unsigned int X, unsigned int Y)\n+{\n+  return __bextr_u32(X, Y);\n+}\n+\n+unsigned int\n+func_blsi32 (unsigned int X)\n+{\n+  return __blsi_u32(X);\n+}\n+\n+unsigned int\n+func_blsmsk32 (unsigned int X)\n+{\n+  return __blsmsk_u32(X);\n+}\n+\n+unsigned int\n+func_blsr32 (unsigned int X)\n+{\n+  return __blsr_u32(X);\n+}\n+\n+unsigned int\n+func_tzcnt32 (unsigned int X)\n+{\n+  return __tzcnt_u32(X);\n+}"}, {"sha": "4f8c14f3a4880ea7fb0c84dac4fd34cc6232d7af", "filename": "gcc/testsuite/gcc.target/i386/bmi-2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-2.c?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2 -mbmi \" } */\n+/* { dg-final { scan-assembler \"andn\\[^\\\\n]*(%|)rax\" } } */\n+/* { dg-final { scan-assembler \"bextr\\[^\\\\n]*(%|)rax\" } } */\n+/* { dg-final { scan-assembler \"blsi\\[^\\\\n]*(%|)rax\" } } */\n+/* { dg-final { scan-assembler \"blsmsk\\[^\\\\n]*(%|)rax\" } } */\n+/* { dg-final { scan-assembler \"blsr\\[^\\\\n]*(%|)rax\" } } */\n+/* { dg-final { scan-assembler \"tzcntq\\[^\\\\n]*(%|)rax\" } } */\n+\n+#include <x86intrin.h>\n+\n+unsigned long long\n+func_andn64 (unsigned long long X, unsigned long long Y)\n+{\n+  return __andn_u64 (X, Y);\n+}\n+\n+unsigned long long\n+func_bextr64 (unsigned long long X, unsigned long long Y)\n+{\n+  return __bextr_u64 (X, Y);\n+}\n+\n+unsigned long long\n+func_blsi64 (unsigned long long X)\n+{\n+  return __blsi_u64 (X);\n+}\n+\n+unsigned long long\n+func_blsmsk64 (unsigned long long X)\n+{\n+  return __blsmsk_u64 (X);\n+}\n+\n+unsigned long long\n+func_blsr64 (unsigned long long X)\n+{\n+  return __blsr_u64 (X);\n+}\n+\n+unsigned long long\n+func_tzcnt64 (unsigned long long X)\n+{\n+  return __tzcnt_u64 (X);\n+}"}, {"sha": "ddc5e0f66e2abe642768b430f3598bac7539f565", "filename": "gcc/testsuite/gcc.target/i386/bmi-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-3.c?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mbmi \" } */\n+/* { dg-final { scan-assembler \"tzcntw\\[^\\\\n]*(%|)ax\" } } */\n+\n+#include <x86intrin.h>\n+\n+unsigned short\n+func_tzcnt16 (unsigned short X)\n+{\n+  return __tzcnt_u16(X);\n+}"}, {"sha": "e0a11616232fbd2bc827a88e337de5cc0b148728", "filename": "gcc/testsuite/gcc.target/i386/bmi-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-4.c?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do link } */\n+/* { dg-options \"-O2 -mbmi\" } */\n+\n+#include <x86intrin.h>\n+\n+/* Test that a constant operand 0 to tzcnt gets folded.  */\n+extern void link_error(void);\n+int main()\n+{\n+  if (__tzcnt_u32(0) != 32)\n+    link_error();\n+  return 0;\n+}"}, {"sha": "b29c4533062f42d9861a40ba9643b672427df2e3", "filename": "gcc/testsuite/gcc.target/i386/bmi-5.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-5.c?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do link } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O0 -mbmi\" } */\n+\n+#include <x86intrin.h>\n+\n+/* Test that a constant operand 0 to tzcnt gets folded.  */\n+extern void link_error(void);\n+int main()\n+{\n+  if (__tzcnt_u64(0) != 64)\n+    link_error();\n+  return 0;\n+}"}, {"sha": "5d4bcf490d3127997850984947555483c4872f54", "filename": "gcc/testsuite/gcc.target/i386/bmi-6.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbmi-6.c?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do link } */\n+/* { dg-options \"-O0 -mbmi\" } */\n+\n+#include <x86intrin.h>\n+\n+/* Test that a constant operand 0 to tzcnt gets folded.  */\n+extern void link_error(void);\n+int main()\n+{\n+  if (__tzcnt_u16(0) != 16)\n+    link_error();\n+  return 0;\n+}"}, {"sha": "5e07d8530fd3632b260240496fba86f66ee95d45", "filename": "gcc/testsuite/gcc.target/i386/funcspec-5.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-5.c?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -5,6 +5,7 @@\n \n extern void test_abm (void)\t\t\t__attribute__((__target__(\"abm\")));\n extern void test_aes (void)\t\t\t__attribute__((__target__(\"aes\")));\n+extern void test_bmi (void)\t\t\t__attribute__((__target__(\"bmi\")));\n extern void test_mmx (void)\t\t\t__attribute__((__target__(\"mmx\")));\n extern void test_pclmul (void)\t\t\t__attribute__((__target__(\"pclmul\")));\n extern void test_popcnt (void)\t\t\t__attribute__((__target__(\"popcnt\")));\n@@ -21,6 +22,7 @@ extern void test_ssse3 (void)\t\t\t__attribute__((__target__(\"ssse3\")));\n \n extern void test_no_abm (void)\t\t\t__attribute__((__target__(\"no-abm\")));\n extern void test_no_aes (void)\t\t\t__attribute__((__target__(\"no-aes\")));\n+extern void test_no_bmi (void)\t\t\t__attribute__((__target__(\"no-bmi\")));\n extern void test_no_mmx (void)\t\t\t__attribute__((__target__(\"no-mmx\")));\n extern void test_no_pclmul (void)\t\t__attribute__((__target__(\"no-pclmul\")));\n extern void test_no_popcnt (void)\t\t__attribute__((__target__(\"no-popcnt\")));"}, {"sha": "81c831cd45bbde1a60590ba096f1618f51f50d59", "filename": "gcc/testsuite/gcc.target/i386/funcspec-6.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Ffuncspec-6.c?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -5,6 +5,7 @@\n \n extern void test_abm (void)\t\t\t__attribute__((__target__(\"abm\")));\n extern void test_aes (void)\t\t\t__attribute__((__target__(\"aes\")));\n+extern void test_bmi (void)\t\t\t__attribute__((__target__(\"bmi\")));\n extern void test_mmx (void)\t\t\t__attribute__((__target__(\"mmx\")));\n extern void test_pclmul (void)\t\t\t__attribute__((__target__(\"pclmul\")));\n extern void test_popcnt (void)\t\t\t__attribute__((__target__(\"popcnt\")));\n@@ -21,6 +22,7 @@ extern void test_ssse3 (void)\t\t\t__attribute__((__target__(\"ssse3\")));\n \n extern void test_no_abm (void)\t\t\t__attribute__((__target__(\"no-abm\")));\n extern void test_no_aes (void)\t\t\t__attribute__((__target__(\"no-aes\")));\n+extern void test_no_bmi (void)\t\t\t__attribute__((__target__(\"no-bmi\")));\n extern void test_no_mmx (void)\t\t\t__attribute__((__target__(\"no-mmx\")));\n extern void test_no_pclmul (void)\t\t__attribute__((__target__(\"no-pclmul\")));\n extern void test_no_popcnt (void)\t\t__attribute__((__target__(\"no-popcnt\")));"}, {"sha": "d59777bd0c1a1749b4ced81eb65c4be19f3bd526", "filename": "gcc/testsuite/gcc.target/i386/sse-12.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91afcfa30c1a15d759f8f59c9d1df403f196a5b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-12.c?ref=91afcfa30c1a15d759f8f59c9d1df403f196a5b6", "patch": "@@ -1,8 +1,9 @@\n /* Test that {,x,e,p,t,s,w,a,b,i}mmintrin.h, xopintrin.h, mm3dnow.h,\n-   abmintrin.h, lwpintrin.h, popcntintrin.h and mm_malloc.h are usable\n+   fma4intrin.h, abmintrin.h, bmiintrin.h, lwpintrin.h,\n+   popcntintrin.h and mm_malloc.h are usable\n    with -O -std=c89 -pedantic-errors.  */\n /* { dg-do compile } */\n-/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n+/* { dg-options \"-O -std=c89 -pedantic-errors -march=k8 -m3dnow -mavx -mfma4 -mxop -maes -mpclmul -mpopcnt -mabm -mbmi -mlwp -mfsgsbase -mrdrnd -mf16c\" } */\n \n #include <x86intrin.h>\n "}]}