{"sha": "7c82a1ed2b4523fb31eb8a33f0728a8cfc7feb6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2M4MmExZWQyYjQ1MjNmYjMxZWI4YTMzZjA3MjhhOGNmYzdmZWI2Zg==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2002-04-17T12:25:31Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2002-04-17T12:25:31Z"}, "message": "re PR rtl-optimization/6305 (c++ gets ICE in reload_cse_simplify_operands)\n\nPR optimization/6305\n* config/s390/s390.c (s390_expand_plus_operand): Use find_replacement\nto make sure previous reloads are taken into account.  Generate\nbetter code if one operand is an in-range immediate constant.\n\nFrom-SVN: r52417", "tree": {"sha": "2be28a88fbaef5517487dc5570657c0e0f2552f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2be28a88fbaef5517487dc5570657c0e0f2552f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c82a1ed2b4523fb31eb8a33f0728a8cfc7feb6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c82a1ed2b4523fb31eb8a33f0728a8cfc7feb6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c82a1ed2b4523fb31eb8a33f0728a8cfc7feb6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c82a1ed2b4523fb31eb8a33f0728a8cfc7feb6f/comments", "author": null, "committer": null, "parents": [{"sha": "58db9d1a88e9dc3d704571284af6515c94129fd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58db9d1a88e9dc3d704571284af6515c94129fd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58db9d1a88e9dc3d704571284af6515c94129fd3"}], "stats": {"total": 33, "additions": 25, "deletions": 8}, "files": [{"sha": "558fce4e83f10a912fa910e4620eb55b75d9c923", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c82a1ed2b4523fb31eb8a33f0728a8cfc7feb6f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c82a1ed2b4523fb31eb8a33f0728a8cfc7feb6f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c82a1ed2b4523fb31eb8a33f0728a8cfc7feb6f", "patch": "@@ -1,3 +1,10 @@\n+2002-04-17  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\tPR optimization/6305\n+\t* config/s390/s390.c (s390_expand_plus_operand): Use find_replacement\n+\tto make sure previous reloads are taken into account.  Generate\n+\tbetter code if one operand is an in-range immediate constant.\n+\n 2002-04-16  Andrew Haley  <aph@cambridge.redhat.com>\n \n \t* doc/install.texi (Building): libgcj requires GNU make."}, {"sha": "131f6ecbb60488ec3777d1b3580f6883a1c9eca3", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c82a1ed2b4523fb31eb8a33f0728a8cfc7feb6f/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c82a1ed2b4523fb31eb8a33f0728a8cfc7feb6f/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=7c82a1ed2b4523fb31eb8a33f0728a8cfc7feb6f", "patch": "@@ -37,6 +37,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"recog.h\"\n #include \"expr.h\"\n+#include \"reload.h\"\n #include \"toplev.h\"\n #include \"basic-block.h\"\n #include \"integrate.h\"\n@@ -1189,15 +1190,21 @@ s390_expand_plus_operand (target, src, scratch_in)\n   if (GET_CODE (src) != PLUS || GET_MODE (src) != Pmode)\n     abort ();\n \n-  sum1 = XEXP (src, 0);\n-  sum2 = XEXP (src, 1);\n+  /* Check if any of the two operands is already scheduled\n+     for replacement by reload.  This can happen e.g. when\n+     float registers occur in an address.  */\n+  sum1 = find_replacement (&XEXP (src, 0));\n+  sum2 = find_replacement (&XEXP (src, 1));\n \n   /* If one of the two operands is equal to the target,\n-     make it the first one.  */\n-  if (rtx_equal_p (target, sum2))\n+     make it the first one.  If one is a constant, make\n+     it the second one.  */\n+  if (rtx_equal_p (target, sum2)\n+      || GET_CODE (sum1) == CONST_INT)\n     {\n-      sum2 = XEXP (src, 0);\n-      sum1 = XEXP (src, 1);\n+      rtx tem = sum2;\n+      sum2 = sum1;\n+      sum1 = tem;\n     }\n \n   /* If the first operand is not an address register,\n@@ -1210,8 +1217,11 @@ s390_expand_plus_operand (target, src, scratch_in)\n \n   /* Likewise for the second operand.  However, take\n      care not to clobber the target if we already used\n-     it for the first operand.  Use the scratch instead.  */\n-  if (true_regnum (sum2) < 1 || true_regnum (sum2) > 15)\n+     it for the first operand.  Use the scratch instead.\n+     Also, allow an immediate offset if it is in range.  */\n+  if ((true_regnum (sum2) < 1 || true_regnum (sum2) > 15)\n+      && !(GET_CODE (sum2) == CONST_INT\n+           && INTVAL (sum2) >= 0 && INTVAL (sum2) < 4096))\n     {\n       if (!rtx_equal_p (target, sum1))\n         {"}]}