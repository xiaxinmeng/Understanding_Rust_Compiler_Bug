{"sha": "f6918a8b63ad38e475c23e26df0f3c4f7faad6cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY5MThhOGI2M2FkMzhlNDc1YzIzZTI2ZGYwZjNjNGY3ZmFhZDZjYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-07-19T07:35:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-07-19T07:35:05Z"}, "message": "re PR middle-end/71907 (missing buffer overflow warnings with -flto)\n\n2016-07-19  Richard Biener  <rguenther@suse.de>\n\n\tPR lto/71907\n\t* lto-streamer-out.c (DFS::DFS_write_tree_body): For blocks\n\twith an abstract origin that is not an inlined function outer\n\tscope add a self-reference as abstract origin.\n\t* tree-streamer-out.c (write_ts_block_tree_pointers): Likewise.\n\nFrom-SVN: r238456", "tree": {"sha": "86e909d0bffa0cac2e977c91deff79aa37da2526", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86e909d0bffa0cac2e977c91deff79aa37da2526"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6918a8b63ad38e475c23e26df0f3c4f7faad6cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6918a8b63ad38e475c23e26df0f3c4f7faad6cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6918a8b63ad38e475c23e26df0f3c4f7faad6cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6918a8b63ad38e475c23e26df0f3c4f7faad6cb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a8f7a89526b5fb1b17a6972b943fcbd8c4d0475a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8f7a89526b5fb1b17a6972b943fcbd8c4d0475a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8f7a89526b5fb1b17a6972b943fcbd8c4d0475a"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "bff71602ecf3b1055db76b48bca0420b444e303c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6918a8b63ad38e475c23e26df0f3c4f7faad6cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6918a8b63ad38e475c23e26df0f3c4f7faad6cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6918a8b63ad38e475c23e26df0f3c4f7faad6cb", "patch": "@@ -1,3 +1,11 @@\n+2016-07-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR lto/71907\n+\t* lto-streamer-out.c (DFS::DFS_write_tree_body): For blocks\n+\twith an abstract origin that is not an inlined function outer\n+\tscope add a self-reference as abstract origin.\n+\t* tree-streamer-out.c (write_ts_block_tree_pointers): Likewise.\n+\n 2016-07-18  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \tPR target/71493"}, {"sha": "e243337d8e90b427bbbc5d3c06034965410c65c9", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6918a8b63ad38e475c23e26df0f3c4f7faad6cb/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6918a8b63ad38e475c23e26df0f3c4f7faad6cb/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=f6918a8b63ad38e475c23e26df0f3c4f7faad6cb", "patch": "@@ -890,12 +890,16 @@ DFS::DFS_write_tree_body (struct output_block *ob,\n       /* Follow BLOCK_ABSTRACT_ORIGIN for the limited cases we can\n \t handle - those that represent inlined function scopes.\n \t For the drop rest them on the floor instead of ICEing\n-\t in dwarf2out.c.  */\n+\t in dwarf2out.c, but keep the notion of whether the block\n+\t is an inlined block by refering to itself for the sake of\n+\t tree_nonartificial_location.  */\n       if (inlined_function_outer_scope_p (expr))\n \t{\n \t  tree ultimate_origin = block_ultimate_origin (expr);\n \t  DFS_follow_tree_edge (ultimate_origin);\n \t}\n+      else if (BLOCK_ABSTRACT_ORIGIN (expr))\n+\tDFS_follow_tree_edge (expr);\n       /* Do not follow BLOCK_NONLOCALIZED_VARS.  We cannot handle debug\n \t information for early inlined BLOCKs so drop it on the floor instead\n \t of ICEing in dwarf2out.c.  */"}, {"sha": "a70666b2fd4bdd993668cb6b95da8924fae60e1f", "filename": "gcc/tree-streamer-out.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6918a8b63ad38e475c23e26df0f3c4f7faad6cb/gcc%2Ftree-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6918a8b63ad38e475c23e26df0f3c4f7faad6cb/gcc%2Ftree-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-streamer-out.c?ref=f6918a8b63ad38e475c23e26df0f3c4f7faad6cb", "patch": "@@ -807,14 +807,17 @@ write_ts_block_tree_pointers (struct output_block *ob, tree expr, bool ref_p)\n \n   /* Stream BLOCK_ABSTRACT_ORIGIN for the limited cases we can handle - those\n      that represent inlined function scopes.\n-     For the rest them on the floor instead of ICEing in dwarf2out.c.  */\n+     For the rest them on the floor instead of ICEing in dwarf2out.c, but\n+     keep the notion of whether the block is an inlined block by refering\n+     to itself for the sake of tree_nonartificial_location.  */\n   if (inlined_function_outer_scope_p (expr))\n     {\n       tree ultimate_origin = block_ultimate_origin (expr);\n       stream_write_tree (ob, ultimate_origin, ref_p);\n     }\n   else\n-    stream_write_tree (ob, NULL_TREE, ref_p);\n+    stream_write_tree (ob, (BLOCK_ABSTRACT_ORIGIN (expr)\n+\t\t\t    ? expr : NULL_TREE), ref_p);\n   /* Do not stream BLOCK_NONLOCALIZED_VARS.  We cannot handle debug information\n      for early inlined BLOCKs so drop it on the floor instead of ICEing in\n      dwarf2out.c.  */"}]}