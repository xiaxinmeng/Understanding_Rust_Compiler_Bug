{"sha": "a787f6f9ec01a53bc6734940d79edc191be7a908", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc4N2Y2ZjllYzAxYTUzYmM2NzM0OTQwZDc5ZWRjMTkxYmU3YTkwOA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-07-05T18:16:17Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2011-07-05T18:16:17Z"}, "message": "memory.c (internal_malloc_size): If size is zero, allocate a single byte.\n\n2011-07-05  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\t* runtime/memory.c (internal_malloc_size):  If size is zero,\n\tallocate a single byte.\n\t* m4/pack.m4 (pack_'rtype_code`):  Don't check for zero size\n\tfor the argument of internal_malloc_size.\n\t* m4/spread.m4 (spread_'rtype_code`):  Likewise.\n\t* m4/eoshift1.m4 (eoshift1):  Don't allocate twice.  Don't check\n\tfor zero size for the argument of internal_malloc_size.\n\t* m4/eoshift3.m4: Don't check for zero size for the argument of\n\tinternal_malloc_size.\n\t* intrinsics/pack_generic.c (pack_internal):  Likewise.\n\t(pack_s_internal):  Likewise.\n\t* intrinsics/cshift0.c (cshift0):  Likewise.\n\t* intrinsics/spread_generic.c (spread_internal):  Likewise.\n\t* intrinsics/eoshift0.c (eoshift0):  Likewise.\n\t* intrinsics/eoshift2.c (eoshift2):  Likewise.\n\t* generated/eoshift1_16.c: Regenerated.\n\t* generated/eoshift1_4.c: Regenerated.\n\t* generated/eoshift1_8.c: Regenerated.\n\t* generated/eoshift3_16.c: Regenerated.\n\t* generated/eoshift3_4.c: Regenerated.\n\t* generated/eoshift3_8.c: Regenerated.\n\t* generated/pack_c10.c: Regenerated.\n\t* generated/pack_c16.c: Regenerated.\n\t* generated/pack_c4.c: Regenerated.\n\t* generated/pack_c8.c: Regenerated.\n\t* generated/pack_i16.c: Regenerated.\n\t* generated/pack_i1.c: Regenerated.\n\t* generated/pack_i2.c: Regenerated.\n\t* generated/pack_i4.c: Regenerated.\n\t* generated/pack_i8.c: Regenerated.\n\t* generated/pack_r10.c: Regenerated.\n\t* generated/pack_r16.c: Regenerated.\n\t* generated/pack_r4.c: Regenerated.\n\t* generated/pack_r8.c: Regenerated.\n\t* generated/spread_c10.c: Regenerated.\n\t* generated/spread_c16.c: Regenerated.\n\t* generated/spread_c4.c: Regenerated.\n\t* generated/spread_c8.c: Regenerated.\n\t* generated/spread_i16.c: Regenerated.\n\t* generated/spread_i1.c: Regenerated.\n\t* generated/spread_i2.c: Regenerated.\n\t* generated/spread_i4.c: Regenerated.\n\t* generated/spread_i8.c: Regenerated.\n\t* generated/spread_r10.c: Regenerated.\n\t* generated/spread_r16.c: Regenerated.\n\t* generated/spread_r4.c: Regenerated.\n\t* generated/spread_r8.c: Regenerated.\n\nFrom-SVN: r175880", "tree": {"sha": "39e9a0538999ccc19813d9e4c1132c8912803e5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39e9a0538999ccc19813d9e4c1132c8912803e5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a787f6f9ec01a53bc6734940d79edc191be7a908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a787f6f9ec01a53bc6734940d79edc191be7a908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a787f6f9ec01a53bc6734940d79edc191be7a908", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a787f6f9ec01a53bc6734940d79edc191be7a908/comments", "author": null, "committer": null, "parents": [{"sha": "3c428fb33318e82ec37beef8f68f5c1456ab68a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c428fb33318e82ec37beef8f68f5c1456ab68a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c428fb33318e82ec37beef8f68f5c1456ab68a8"}], "stats": {"total": 492, "additions": 225, "deletions": 267}, "files": [{"sha": "442c032f47720996253298f4568f64dc81ae2384", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -1,3 +1,53 @@\n+2011-07-05  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* runtime/memory.c (internal_malloc_size):  If size is zero,\n+\tallocate a single byte.\n+\t* m4/pack.m4 (pack_'rtype_code`):  Don't check for zero size\n+\tfor the argument of internal_malloc_size.\n+\t* m4/spread.m4 (spread_'rtype_code`):  Likewise.\n+\t* m4/eoshift1.m4 (eoshift1):  Don't allocate twice.  Don't check\n+\tfor zero size for the argument of internal_malloc_size.\n+\t* m4/eoshift3.m4: Don't check for zero size for the argument of\n+\tinternal_malloc_size.\n+\t* intrinsics/pack_generic.c (pack_internal):  Likewise.\n+\t(pack_s_internal):  Likewise.\n+\t* intrinsics/cshift0.c (cshift0):  Likewise.\n+\t* intrinsics/spread_generic.c (spread_internal):  Likewise.\n+\t* intrinsics/eoshift0.c (eoshift0):  Likewise.\n+\t* intrinsics/eoshift2.c (eoshift2):  Likewise.\n+\t* generated/eoshift1_16.c: Regenerated.\n+\t* generated/eoshift1_4.c: Regenerated.\n+\t* generated/eoshift1_8.c: Regenerated.\n+\t* generated/eoshift3_16.c: Regenerated.\n+\t* generated/eoshift3_4.c: Regenerated.\n+\t* generated/eoshift3_8.c: Regenerated.\n+\t* generated/pack_c10.c: Regenerated.\n+\t* generated/pack_c16.c: Regenerated.\n+\t* generated/pack_c4.c: Regenerated.\n+\t* generated/pack_c8.c: Regenerated.\n+\t* generated/pack_i16.c: Regenerated.\n+\t* generated/pack_i1.c: Regenerated.\n+\t* generated/pack_i2.c: Regenerated.\n+\t* generated/pack_i4.c: Regenerated.\n+\t* generated/pack_i8.c: Regenerated.\n+\t* generated/pack_r10.c: Regenerated.\n+\t* generated/pack_r16.c: Regenerated.\n+\t* generated/pack_r4.c: Regenerated.\n+\t* generated/pack_r8.c: Regenerated.\n+\t* generated/spread_c10.c: Regenerated.\n+\t* generated/spread_c16.c: Regenerated.\n+\t* generated/spread_c4.c: Regenerated.\n+\t* generated/spread_c8.c: Regenerated.\n+\t* generated/spread_i16.c: Regenerated.\n+\t* generated/spread_i1.c: Regenerated.\n+\t* generated/spread_i2.c: Regenerated.\n+\t* generated/spread_i4.c: Regenerated.\n+\t* generated/spread_i8.c: Regenerated.\n+\t* generated/spread_r10.c: Regenerated.\n+\t* generated/spread_r16.c: Regenerated.\n+\t* generated/spread_r4.c: Regenerated.\n+\t* generated/spread_r8.c: Regenerated.\n+\n 2011-06-28  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/49479"}, {"sha": "eb3a27a1c64e56d2d7bfa61dbb6364da1c1e11b2", "filename": "libgfortran/generated/eoshift1_16.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Feoshift1_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Feoshift1_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_16.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -88,7 +88,6 @@ eoshift1 (gfc_array_char * const restrict ret,\n     {\n       int i;\n \n-      ret->data = internal_malloc_size (size * arraysize);\n       ret->offset = 0;\n       ret->dtype = array->dtype;\n       for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n@@ -106,10 +105,8 @@ eoshift1 (gfc_array_char * const restrict ret,\n \t  GFC_DIMENSION_SET(ret->dim[i], 0, ub, str);\n \n         }\n-      if (arraysize > 0)\n-\tret->data = internal_malloc_size (size * arraysize);\n-      else\n-\tret->data = internal_malloc_size (1);\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (size * arraysize);\n \n     }\n   else if (unlikely (compile_options.bounds_check))"}, {"sha": "d3776b911b0fa633686c11f6470422682e6d4983", "filename": "libgfortran/generated/eoshift1_4.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Feoshift1_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Feoshift1_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_4.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -88,7 +88,6 @@ eoshift1 (gfc_array_char * const restrict ret,\n     {\n       int i;\n \n-      ret->data = internal_malloc_size (size * arraysize);\n       ret->offset = 0;\n       ret->dtype = array->dtype;\n       for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n@@ -106,10 +105,8 @@ eoshift1 (gfc_array_char * const restrict ret,\n \t  GFC_DIMENSION_SET(ret->dim[i], 0, ub, str);\n \n         }\n-      if (arraysize > 0)\n-\tret->data = internal_malloc_size (size * arraysize);\n-      else\n-\tret->data = internal_malloc_size (1);\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (size * arraysize);\n \n     }\n   else if (unlikely (compile_options.bounds_check))"}, {"sha": "5f026acdfcb6893f6f1c9d989a9ac519187ecc8e", "filename": "libgfortran/generated/eoshift1_8.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Feoshift1_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Feoshift1_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift1_8.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -88,7 +88,6 @@ eoshift1 (gfc_array_char * const restrict ret,\n     {\n       int i;\n \n-      ret->data = internal_malloc_size (size * arraysize);\n       ret->offset = 0;\n       ret->dtype = array->dtype;\n       for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n@@ -106,10 +105,8 @@ eoshift1 (gfc_array_char * const restrict ret,\n \t  GFC_DIMENSION_SET(ret->dim[i], 0, ub, str);\n \n         }\n-      if (arraysize > 0)\n-\tret->data = internal_malloc_size (size * arraysize);\n-      else\n-\tret->data = internal_malloc_size (1);\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (size * arraysize);\n \n     }\n   else if (unlikely (compile_options.bounds_check))"}, {"sha": "1cf216767aca410f4e00ee52fc4a4f557cc24377", "filename": "libgfortran/generated/eoshift3_16.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Feoshift3_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Feoshift3_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_16.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -107,10 +107,8 @@ eoshift3 (gfc_array_char * const restrict ret,\n \t  GFC_DIMENSION_SET(ret->dim[i], 0, ub, str);\n \n         }\n-      if (arraysize > 0)\n-\tret->data = internal_malloc_size (size * arraysize);\n-      else\n-\tret->data = internal_malloc_size (1);\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (size * arraysize);\n \n     }\n   else if (unlikely (compile_options.bounds_check))"}, {"sha": "c6033d0a58a59771343f94445d38e6e6a72091d9", "filename": "libgfortran/generated/eoshift3_4.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Feoshift3_4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Feoshift3_4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_4.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -107,10 +107,8 @@ eoshift3 (gfc_array_char * const restrict ret,\n \t  GFC_DIMENSION_SET(ret->dim[i], 0, ub, str);\n \n         }\n-      if (arraysize > 0)\n-\tret->data = internal_malloc_size (size * arraysize);\n-      else\n-\tret->data = internal_malloc_size (1);\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (size * arraysize);\n \n     }\n   else if (unlikely (compile_options.bounds_check))"}, {"sha": "7a7b196eec4840d829fe5a6924e516b28e4274e8", "filename": "libgfortran/generated/eoshift3_8.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Feoshift3_8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Feoshift3_8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Feoshift3_8.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -107,10 +107,8 @@ eoshift3 (gfc_array_char * const restrict ret,\n \t  GFC_DIMENSION_SET(ret->dim[i], 0, ub, str);\n \n         }\n-      if (arraysize > 0)\n-\tret->data = internal_malloc_size (size * arraysize);\n-      else\n-\tret->data = internal_malloc_size (1);\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (size * arraysize);\n \n     }\n   else if (unlikely (compile_options.bounds_check))"}, {"sha": "621ba8d8b797c6f5573c6b7386e8362815ed99ab", "filename": "libgfortran/generated/pack_c10.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_c10.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -166,14 +166,12 @@ pack_c10 (gfc_array_c10 *ret, const gfc_array_c10 *array,\n \t  GFC_DIMENSION_SET(ret->dim[0], 0, total-1, 1);\n \n \t  ret->offset = 0;\n+\n+\t  /* internal_malloc_size allocates a single byte for zero size.  */\n+\t  ret->data = internal_malloc_size (sizeof (GFC_COMPLEX_10) * total);\n+\n \t  if (total == 0)\n-\t    {\n-\t      /* In this case, nothing remains to be done.  */\n-\t      ret->data = internal_malloc_size (1);\n-\t      return;\n-\t    }\n-\t  else\n-\t    ret->data = internal_malloc_size (sizeof (GFC_COMPLEX_10) * total);\n+\t    return;\n \t}\n       else \n \t{"}, {"sha": "e98de98c91cc41bf4af07cd11ea18a6a26f7e3df", "filename": "libgfortran/generated/pack_c16.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_c16.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -166,14 +166,12 @@ pack_c16 (gfc_array_c16 *ret, const gfc_array_c16 *array,\n \t  GFC_DIMENSION_SET(ret->dim[0], 0, total-1, 1);\n \n \t  ret->offset = 0;\n+\n+\t  /* internal_malloc_size allocates a single byte for zero size.  */\n+\t  ret->data = internal_malloc_size (sizeof (GFC_COMPLEX_16) * total);\n+\n \t  if (total == 0)\n-\t    {\n-\t      /* In this case, nothing remains to be done.  */\n-\t      ret->data = internal_malloc_size (1);\n-\t      return;\n-\t    }\n-\t  else\n-\t    ret->data = internal_malloc_size (sizeof (GFC_COMPLEX_16) * total);\n+\t    return;\n \t}\n       else \n \t{"}, {"sha": "85e154178515c565c63c6e14793d6742c5f6abe0", "filename": "libgfortran/generated/pack_c4.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_c4.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -166,14 +166,12 @@ pack_c4 (gfc_array_c4 *ret, const gfc_array_c4 *array,\n \t  GFC_DIMENSION_SET(ret->dim[0], 0, total-1, 1);\n \n \t  ret->offset = 0;\n+\n+\t  /* internal_malloc_size allocates a single byte for zero size.  */\n+\t  ret->data = internal_malloc_size (sizeof (GFC_COMPLEX_4) * total);\n+\n \t  if (total == 0)\n-\t    {\n-\t      /* In this case, nothing remains to be done.  */\n-\t      ret->data = internal_malloc_size (1);\n-\t      return;\n-\t    }\n-\t  else\n-\t    ret->data = internal_malloc_size (sizeof (GFC_COMPLEX_4) * total);\n+\t    return;\n \t}\n       else \n \t{"}, {"sha": "bfaec2fc910d96b6eae40eea1b71b8b1ed5f72c9", "filename": "libgfortran/generated/pack_c8.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_c8.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -166,14 +166,12 @@ pack_c8 (gfc_array_c8 *ret, const gfc_array_c8 *array,\n \t  GFC_DIMENSION_SET(ret->dim[0], 0, total-1, 1);\n \n \t  ret->offset = 0;\n+\n+\t  /* internal_malloc_size allocates a single byte for zero size.  */\n+\t  ret->data = internal_malloc_size (sizeof (GFC_COMPLEX_8) * total);\n+\n \t  if (total == 0)\n-\t    {\n-\t      /* In this case, nothing remains to be done.  */\n-\t      ret->data = internal_malloc_size (1);\n-\t      return;\n-\t    }\n-\t  else\n-\t    ret->data = internal_malloc_size (sizeof (GFC_COMPLEX_8) * total);\n+\t    return;\n \t}\n       else \n \t{"}, {"sha": "c168affaea0e279e2d80f37510ba1075057e6008", "filename": "libgfortran/generated/pack_i1.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_i1.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -166,14 +166,12 @@ pack_i1 (gfc_array_i1 *ret, const gfc_array_i1 *array,\n \t  GFC_DIMENSION_SET(ret->dim[0], 0, total-1, 1);\n \n \t  ret->offset = 0;\n+\n+\t  /* internal_malloc_size allocates a single byte for zero size.  */\n+\t  ret->data = internal_malloc_size (sizeof (GFC_INTEGER_1) * total);\n+\n \t  if (total == 0)\n-\t    {\n-\t      /* In this case, nothing remains to be done.  */\n-\t      ret->data = internal_malloc_size (1);\n-\t      return;\n-\t    }\n-\t  else\n-\t    ret->data = internal_malloc_size (sizeof (GFC_INTEGER_1) * total);\n+\t    return;\n \t}\n       else \n \t{"}, {"sha": "81ed49a8208bbae23aa8931f3331ef6ab1876433", "filename": "libgfortran/generated/pack_i16.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_i16.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -166,14 +166,12 @@ pack_i16 (gfc_array_i16 *ret, const gfc_array_i16 *array,\n \t  GFC_DIMENSION_SET(ret->dim[0], 0, total-1, 1);\n \n \t  ret->offset = 0;\n+\n+\t  /* internal_malloc_size allocates a single byte for zero size.  */\n+\t  ret->data = internal_malloc_size (sizeof (GFC_INTEGER_16) * total);\n+\n \t  if (total == 0)\n-\t    {\n-\t      /* In this case, nothing remains to be done.  */\n-\t      ret->data = internal_malloc_size (1);\n-\t      return;\n-\t    }\n-\t  else\n-\t    ret->data = internal_malloc_size (sizeof (GFC_INTEGER_16) * total);\n+\t    return;\n \t}\n       else \n \t{"}, {"sha": "a04b7af6969508775a4b9c34dcdba10de28f5bb4", "filename": "libgfortran/generated/pack_i2.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_i2.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -166,14 +166,12 @@ pack_i2 (gfc_array_i2 *ret, const gfc_array_i2 *array,\n \t  GFC_DIMENSION_SET(ret->dim[0], 0, total-1, 1);\n \n \t  ret->offset = 0;\n+\n+\t  /* internal_malloc_size allocates a single byte for zero size.  */\n+\t  ret->data = internal_malloc_size (sizeof (GFC_INTEGER_2) * total);\n+\n \t  if (total == 0)\n-\t    {\n-\t      /* In this case, nothing remains to be done.  */\n-\t      ret->data = internal_malloc_size (1);\n-\t      return;\n-\t    }\n-\t  else\n-\t    ret->data = internal_malloc_size (sizeof (GFC_INTEGER_2) * total);\n+\t    return;\n \t}\n       else \n \t{"}, {"sha": "c5d112bd3946081608ceee50fb2cfaa8773b5faa", "filename": "libgfortran/generated/pack_i4.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_i4.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -166,14 +166,12 @@ pack_i4 (gfc_array_i4 *ret, const gfc_array_i4 *array,\n \t  GFC_DIMENSION_SET(ret->dim[0], 0, total-1, 1);\n \n \t  ret->offset = 0;\n+\n+\t  /* internal_malloc_size allocates a single byte for zero size.  */\n+\t  ret->data = internal_malloc_size (sizeof (GFC_INTEGER_4) * total);\n+\n \t  if (total == 0)\n-\t    {\n-\t      /* In this case, nothing remains to be done.  */\n-\t      ret->data = internal_malloc_size (1);\n-\t      return;\n-\t    }\n-\t  else\n-\t    ret->data = internal_malloc_size (sizeof (GFC_INTEGER_4) * total);\n+\t    return;\n \t}\n       else \n \t{"}, {"sha": "7307192749b769c276eed58f678bd9b60c612c80", "filename": "libgfortran/generated/pack_i8.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_i8.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -166,14 +166,12 @@ pack_i8 (gfc_array_i8 *ret, const gfc_array_i8 *array,\n \t  GFC_DIMENSION_SET(ret->dim[0], 0, total-1, 1);\n \n \t  ret->offset = 0;\n+\n+\t  /* internal_malloc_size allocates a single byte for zero size.  */\n+\t  ret->data = internal_malloc_size (sizeof (GFC_INTEGER_8) * total);\n+\n \t  if (total == 0)\n-\t    {\n-\t      /* In this case, nothing remains to be done.  */\n-\t      ret->data = internal_malloc_size (1);\n-\t      return;\n-\t    }\n-\t  else\n-\t    ret->data = internal_malloc_size (sizeof (GFC_INTEGER_8) * total);\n+\t    return;\n \t}\n       else \n \t{"}, {"sha": "c3b55cc1a9f99bc75dc2abde7cb0a2b45554c112", "filename": "libgfortran/generated/pack_r10.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_r10.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -166,14 +166,12 @@ pack_r10 (gfc_array_r10 *ret, const gfc_array_r10 *array,\n \t  GFC_DIMENSION_SET(ret->dim[0], 0, total-1, 1);\n \n \t  ret->offset = 0;\n+\n+\t  /* internal_malloc_size allocates a single byte for zero size.  */\n+\t  ret->data = internal_malloc_size (sizeof (GFC_REAL_10) * total);\n+\n \t  if (total == 0)\n-\t    {\n-\t      /* In this case, nothing remains to be done.  */\n-\t      ret->data = internal_malloc_size (1);\n-\t      return;\n-\t    }\n-\t  else\n-\t    ret->data = internal_malloc_size (sizeof (GFC_REAL_10) * total);\n+\t    return;\n \t}\n       else \n \t{"}, {"sha": "489ff957aa1c0a5533b2d4349a86478aa876b1b3", "filename": "libgfortran/generated/pack_r16.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_r16.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -166,14 +166,12 @@ pack_r16 (gfc_array_r16 *ret, const gfc_array_r16 *array,\n \t  GFC_DIMENSION_SET(ret->dim[0], 0, total-1, 1);\n \n \t  ret->offset = 0;\n+\n+\t  /* internal_malloc_size allocates a single byte for zero size.  */\n+\t  ret->data = internal_malloc_size (sizeof (GFC_REAL_16) * total);\n+\n \t  if (total == 0)\n-\t    {\n-\t      /* In this case, nothing remains to be done.  */\n-\t      ret->data = internal_malloc_size (1);\n-\t      return;\n-\t    }\n-\t  else\n-\t    ret->data = internal_malloc_size (sizeof (GFC_REAL_16) * total);\n+\t    return;\n \t}\n       else \n \t{"}, {"sha": "05172dbbb06d39db480e3612bfd1ad39f9a82a29", "filename": "libgfortran/generated/pack_r4.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_r4.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -166,14 +166,12 @@ pack_r4 (gfc_array_r4 *ret, const gfc_array_r4 *array,\n \t  GFC_DIMENSION_SET(ret->dim[0], 0, total-1, 1);\n \n \t  ret->offset = 0;\n+\n+\t  /* internal_malloc_size allocates a single byte for zero size.  */\n+\t  ret->data = internal_malloc_size (sizeof (GFC_REAL_4) * total);\n+\n \t  if (total == 0)\n-\t    {\n-\t      /* In this case, nothing remains to be done.  */\n-\t      ret->data = internal_malloc_size (1);\n-\t      return;\n-\t    }\n-\t  else\n-\t    ret->data = internal_malloc_size (sizeof (GFC_REAL_4) * total);\n+\t    return;\n \t}\n       else \n \t{"}, {"sha": "df5cc3f3a6e4a96c589e4ea611413e7441448dda", "filename": "libgfortran/generated/pack_r8.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fpack_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fpack_r8.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -166,14 +166,12 @@ pack_r8 (gfc_array_r8 *ret, const gfc_array_r8 *array,\n \t  GFC_DIMENSION_SET(ret->dim[0], 0, total-1, 1);\n \n \t  ret->offset = 0;\n+\n+\t  /* internal_malloc_size allocates a single byte for zero size.  */\n+\t  ret->data = internal_malloc_size (sizeof (GFC_REAL_8) * total);\n+\n \t  if (total == 0)\n-\t    {\n-\t      /* In this case, nothing remains to be done.  */\n-\t      ret->data = internal_malloc_size (1);\n-\t      return;\n-\t    }\n-\t  else\n-\t    ret->data = internal_malloc_size (sizeof (GFC_REAL_8) * total);\n+\t    return;\n \t}\n       else \n \t{"}, {"sha": "d8a5bafe23554331dd080aa3eb6e6dc8212e1557", "filename": "libgfortran/generated/spread_c10.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_c10.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -100,13 +100,11 @@ spread_c10 (gfc_array_c10 *ret, const gfc_array_c10 *source,\n \t  GFC_DIMENSION_SET(ret->dim[n], 0, ub, stride);\n \t}\n       ret->offset = 0;\n-      if (rs > 0)\n-        ret->data = internal_malloc_size (rs * sizeof(GFC_COMPLEX_10));\n-      else\n-\t{\n-\t  ret->data = internal_malloc_size (1);\n-\t  return;\n-\t}\n+\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (rs * sizeof(GFC_COMPLEX_10));\n+      if (rs <= 0)\n+        return;\n     }\n   else\n     {"}, {"sha": "0bfba7f414540ad76d50f4c50d945fbb491f7d6b", "filename": "libgfortran/generated/spread_c16.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_c16.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -100,13 +100,11 @@ spread_c16 (gfc_array_c16 *ret, const gfc_array_c16 *source,\n \t  GFC_DIMENSION_SET(ret->dim[n], 0, ub, stride);\n \t}\n       ret->offset = 0;\n-      if (rs > 0)\n-        ret->data = internal_malloc_size (rs * sizeof(GFC_COMPLEX_16));\n-      else\n-\t{\n-\t  ret->data = internal_malloc_size (1);\n-\t  return;\n-\t}\n+\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (rs * sizeof(GFC_COMPLEX_16));\n+      if (rs <= 0)\n+        return;\n     }\n   else\n     {"}, {"sha": "e1a475f6f126a7905573bef3fd325e86d9c4f78f", "filename": "libgfortran/generated/spread_c4.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_c4.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -100,13 +100,11 @@ spread_c4 (gfc_array_c4 *ret, const gfc_array_c4 *source,\n \t  GFC_DIMENSION_SET(ret->dim[n], 0, ub, stride);\n \t}\n       ret->offset = 0;\n-      if (rs > 0)\n-        ret->data = internal_malloc_size (rs * sizeof(GFC_COMPLEX_4));\n-      else\n-\t{\n-\t  ret->data = internal_malloc_size (1);\n-\t  return;\n-\t}\n+\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (rs * sizeof(GFC_COMPLEX_4));\n+      if (rs <= 0)\n+        return;\n     }\n   else\n     {"}, {"sha": "a2902908e76275b8fc489be4637e2a97a656b8db", "filename": "libgfortran/generated/spread_c8.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_c8.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -100,13 +100,11 @@ spread_c8 (gfc_array_c8 *ret, const gfc_array_c8 *source,\n \t  GFC_DIMENSION_SET(ret->dim[n], 0, ub, stride);\n \t}\n       ret->offset = 0;\n-      if (rs > 0)\n-        ret->data = internal_malloc_size (rs * sizeof(GFC_COMPLEX_8));\n-      else\n-\t{\n-\t  ret->data = internal_malloc_size (1);\n-\t  return;\n-\t}\n+\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (rs * sizeof(GFC_COMPLEX_8));\n+      if (rs <= 0)\n+        return;\n     }\n   else\n     {"}, {"sha": "111c4ccea5f76eab084cce778fd72808797d6edb", "filename": "libgfortran/generated/spread_i1.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_i1.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -100,13 +100,11 @@ spread_i1 (gfc_array_i1 *ret, const gfc_array_i1 *source,\n \t  GFC_DIMENSION_SET(ret->dim[n], 0, ub, stride);\n \t}\n       ret->offset = 0;\n-      if (rs > 0)\n-        ret->data = internal_malloc_size (rs * sizeof(GFC_INTEGER_1));\n-      else\n-\t{\n-\t  ret->data = internal_malloc_size (1);\n-\t  return;\n-\t}\n+\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (rs * sizeof(GFC_INTEGER_1));\n+      if (rs <= 0)\n+        return;\n     }\n   else\n     {"}, {"sha": "2a4864ba41ca1b0665de3b0818e96c29d19454b5", "filename": "libgfortran/generated/spread_i16.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_i16.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -100,13 +100,11 @@ spread_i16 (gfc_array_i16 *ret, const gfc_array_i16 *source,\n \t  GFC_DIMENSION_SET(ret->dim[n], 0, ub, stride);\n \t}\n       ret->offset = 0;\n-      if (rs > 0)\n-        ret->data = internal_malloc_size (rs * sizeof(GFC_INTEGER_16));\n-      else\n-\t{\n-\t  ret->data = internal_malloc_size (1);\n-\t  return;\n-\t}\n+\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (rs * sizeof(GFC_INTEGER_16));\n+      if (rs <= 0)\n+        return;\n     }\n   else\n     {"}, {"sha": "5a5d87064e6b37c0f76bd9602ed56a1673586c0b", "filename": "libgfortran/generated/spread_i2.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_i2.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -100,13 +100,11 @@ spread_i2 (gfc_array_i2 *ret, const gfc_array_i2 *source,\n \t  GFC_DIMENSION_SET(ret->dim[n], 0, ub, stride);\n \t}\n       ret->offset = 0;\n-      if (rs > 0)\n-        ret->data = internal_malloc_size (rs * sizeof(GFC_INTEGER_2));\n-      else\n-\t{\n-\t  ret->data = internal_malloc_size (1);\n-\t  return;\n-\t}\n+\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (rs * sizeof(GFC_INTEGER_2));\n+      if (rs <= 0)\n+        return;\n     }\n   else\n     {"}, {"sha": "e990408b0a443e33a7b78d32555979ad1498e5b5", "filename": "libgfortran/generated/spread_i4.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_i4.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -100,13 +100,11 @@ spread_i4 (gfc_array_i4 *ret, const gfc_array_i4 *source,\n \t  GFC_DIMENSION_SET(ret->dim[n], 0, ub, stride);\n \t}\n       ret->offset = 0;\n-      if (rs > 0)\n-        ret->data = internal_malloc_size (rs * sizeof(GFC_INTEGER_4));\n-      else\n-\t{\n-\t  ret->data = internal_malloc_size (1);\n-\t  return;\n-\t}\n+\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (rs * sizeof(GFC_INTEGER_4));\n+      if (rs <= 0)\n+        return;\n     }\n   else\n     {"}, {"sha": "1e3b3055b8fd926729fefe5bf58d54baf98c72b0", "filename": "libgfortran/generated/spread_i8.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_i8.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -100,13 +100,11 @@ spread_i8 (gfc_array_i8 *ret, const gfc_array_i8 *source,\n \t  GFC_DIMENSION_SET(ret->dim[n], 0, ub, stride);\n \t}\n       ret->offset = 0;\n-      if (rs > 0)\n-        ret->data = internal_malloc_size (rs * sizeof(GFC_INTEGER_8));\n-      else\n-\t{\n-\t  ret->data = internal_malloc_size (1);\n-\t  return;\n-\t}\n+\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (rs * sizeof(GFC_INTEGER_8));\n+      if (rs <= 0)\n+        return;\n     }\n   else\n     {"}, {"sha": "ef86bc59007999271249f266f2ead4146c2d499f", "filename": "libgfortran/generated/spread_r10.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_r10.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -100,13 +100,11 @@ spread_r10 (gfc_array_r10 *ret, const gfc_array_r10 *source,\n \t  GFC_DIMENSION_SET(ret->dim[n], 0, ub, stride);\n \t}\n       ret->offset = 0;\n-      if (rs > 0)\n-        ret->data = internal_malloc_size (rs * sizeof(GFC_REAL_10));\n-      else\n-\t{\n-\t  ret->data = internal_malloc_size (1);\n-\t  return;\n-\t}\n+\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (rs * sizeof(GFC_REAL_10));\n+      if (rs <= 0)\n+        return;\n     }\n   else\n     {"}, {"sha": "9678e8768a0f58e4e2598572994fed210534b5ba", "filename": "libgfortran/generated/spread_r16.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_r16.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -100,13 +100,11 @@ spread_r16 (gfc_array_r16 *ret, const gfc_array_r16 *source,\n \t  GFC_DIMENSION_SET(ret->dim[n], 0, ub, stride);\n \t}\n       ret->offset = 0;\n-      if (rs > 0)\n-        ret->data = internal_malloc_size (rs * sizeof(GFC_REAL_16));\n-      else\n-\t{\n-\t  ret->data = internal_malloc_size (1);\n-\t  return;\n-\t}\n+\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (rs * sizeof(GFC_REAL_16));\n+      if (rs <= 0)\n+        return;\n     }\n   else\n     {"}, {"sha": "fac0900cbb442fc0dca724c84aa741e49f0eb1d1", "filename": "libgfortran/generated/spread_r4.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_r4.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -100,13 +100,11 @@ spread_r4 (gfc_array_r4 *ret, const gfc_array_r4 *source,\n \t  GFC_DIMENSION_SET(ret->dim[n], 0, ub, stride);\n \t}\n       ret->offset = 0;\n-      if (rs > 0)\n-        ret->data = internal_malloc_size (rs * sizeof(GFC_REAL_4));\n-      else\n-\t{\n-\t  ret->data = internal_malloc_size (1);\n-\t  return;\n-\t}\n+\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (rs * sizeof(GFC_REAL_4));\n+      if (rs <= 0)\n+        return;\n     }\n   else\n     {"}, {"sha": "0dd9e7bf5adb49aef3034d0b8389cbb24eb2dcab", "filename": "libgfortran/generated/spread_r8.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fgenerated%2Fspread_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspread_r8.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -100,13 +100,11 @@ spread_r8 (gfc_array_r8 *ret, const gfc_array_r8 *source,\n \t  GFC_DIMENSION_SET(ret->dim[n], 0, ub, stride);\n \t}\n       ret->offset = 0;\n-      if (rs > 0)\n-        ret->data = internal_malloc_size (rs * sizeof(GFC_REAL_8));\n-      else\n-\t{\n-\t  ret->data = internal_malloc_size (1);\n-\t  return;\n-\t}\n+\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (rs * sizeof(GFC_REAL_8));\n+      if (rs <= 0)\n+        return;\n     }\n   else\n     {"}, {"sha": "026dd1adc0d922b86f22c2ade7ad2e1a2f96a269", "filename": "libgfortran/intrinsics/cshift0.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fintrinsics%2Fcshift0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fintrinsics%2Fcshift0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fcshift0.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -79,10 +79,8 @@ cshift0 (gfc_array_char * ret, const gfc_array_char * array,\n \t  GFC_DIMENSION_SET(ret->dim[i], 0, ub, str);\n         }\n \n-      if (arraysize > 0)\n-\tret->data = internal_malloc_size (size * arraysize);\n-      else\n-\tret->data = internal_malloc_size (1);\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (size * arraysize);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "6ceed2000e00a76ec9fe293c62a1300d7af06371", "filename": "libgfortran/intrinsics/eoshift0.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fintrinsics%2Feoshift0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fintrinsics%2Feoshift0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Feoshift0.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -86,11 +86,8 @@ eoshift0 (gfc_array_char * ret, const gfc_array_char * array,\n \n         }\n \n-      if (arraysize > 0)\n-\tret->data = internal_malloc_size (size * arraysize);\n-      else\n-\tret->data = internal_malloc_size (1);\n-\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (size * arraysize);\n     }\n   else if (unlikely (compile_options.bounds_check))\n     {"}, {"sha": "b4f8278696452966905a4d74939543436d30b83d", "filename": "libgfortran/intrinsics/eoshift2.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fintrinsics%2Feoshift2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fintrinsics%2Feoshift2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Feoshift2.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -91,10 +91,8 @@ eoshift2 (gfc_array_char *ret, const gfc_array_char *array,\n \n \t  GFC_DIMENSION_SET(ret->dim[i], 0, ub, str);\n \n-\t  if (arraysize > 0)\n-\t    ret->data = internal_malloc_size (size * arraysize);\n-\t  else\n-\t    ret->data = internal_malloc_size (1);\n+          /* internal_malloc_size allocates a single byte for zero size.  */\n+\t  ret->data = internal_malloc_size (size * arraysize);\n \n         }\n     }"}, {"sha": "de1e07facabe9fc762fab5aecbe341e1588baacd", "filename": "libgfortran/intrinsics/pack_generic.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fintrinsics%2Fpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fintrinsics%2Fpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fpack_generic.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -153,14 +153,11 @@ pack_internal (gfc_array_char *ret, const gfc_array_char *array,\n \t  GFC_DIMENSION_SET(ret->dim[0], 0, total-1, 1);\n \n \t  ret->offset = 0;\n+\t  /* internal_malloc_size allocates a single byte for zero size.  */\n+\t  ret->data = internal_malloc_size (size * total);\n+\n \t  if (total == 0)\n-\t    {\n-\t      /* In this case, nothing remains to be done.  */\n-\t      ret->data = internal_malloc_size (1);\n-\t      return;\n-\t    }\n-\t  else\n-\t    ret->data = internal_malloc_size (size * total);\n+\t    return;      /* In this case, nothing remains to be done.  */\n \t}\n       else \n \t{\n@@ -523,13 +520,10 @@ pack_s_internal (gfc_array_char *ret, const gfc_array_char *array,\n \n       ret->offset = 0;\n \n+      ret->data = internal_malloc_size (size * total);\n+\n       if (total == 0)\n-\t{\n-\t  ret->data = internal_malloc_size (1);\n-\t  return;\n-\t}\n-      else\n-\tret->data = internal_malloc_size (size * total);\n+\treturn;\n     }\n \n   rstride0 = GFC_DESCRIPTOR_STRIDE_BYTES(ret,0);"}, {"sha": "2eeb24b84445a47c61d43a65cc1f9eb7edaa9228", "filename": "libgfortran/intrinsics/spread_generic.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fintrinsics%2Fspread_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fintrinsics%2Fspread_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fspread_generic.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -100,13 +100,10 @@ spread_internal (gfc_array_char *ret, const gfc_array_char *source,\n \t  GFC_DIMENSION_SET(ret->dim[n], 0, ub, stride);\n \t}\n       ret->offset = 0;\n-      if (rs > 0)\n-        ret->data = internal_malloc_size (rs * size);\n-      else\n-\t{\n-\t  ret->data = internal_malloc_size (1);\n-\t  return;\n-\t}\n+      ret->data = internal_malloc_size (rs * size);\n+\n+      if (rs <= 0)\n+\treturn;\n     }\n   else\n     {"}, {"sha": "339e1d89965e7a3aa918997569c676f3b19988f0", "filename": "libgfortran/m4/eoshift1.m4", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fm4%2Feoshift1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fm4%2Feoshift1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Feoshift1.m4?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -89,7 +89,6 @@ eoshift1 (gfc_array_char * const restrict ret,\n     {\n       int i;\n \n-      ret->data = internal_malloc_size (size * arraysize);\n       ret->offset = 0;\n       ret->dtype = array->dtype;\n       for (i = 0; i < GFC_DESCRIPTOR_RANK (array); i++)\n@@ -107,10 +106,8 @@ eoshift1 (gfc_array_char * const restrict ret,\n \t  GFC_DIMENSION_SET(ret->dim[i], 0, ub, str);\n \n         }\n-      if (arraysize > 0)\n-\tret->data = internal_malloc_size (size * arraysize);\n-      else\n-\tret->data = internal_malloc_size (1);\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (size * arraysize);\n \n     }\n   else if (unlikely (compile_options.bounds_check))"}, {"sha": "1c19575ffb86e9694864a254f8c878b909b0d765", "filename": "libgfortran/m4/eoshift3.m4", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fm4%2Feoshift3.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fm4%2Feoshift3.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Feoshift3.m4?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -108,10 +108,8 @@ eoshift3 (gfc_array_char * const restrict ret,\n \t  GFC_DIMENSION_SET(ret->dim[i], 0, ub, str);\n \n         }\n-      if (arraysize > 0)\n-\tret->data = internal_malloc_size (size * arraysize);\n-      else\n-\tret->data = internal_malloc_size (1);\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (size * arraysize);\n \n     }\n   else if (unlikely (compile_options.bounds_check))"}, {"sha": "e1882d077c2378fcf945735bc7c43a003bdf97b9", "filename": "libgfortran/m4/pack.m4", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fm4%2Fpack.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fm4%2Fpack.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fpack.m4?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -167,14 +167,12 @@ pack_'rtype_code` ('rtype` *ret, const 'rtype` *array,\n \t  GFC_DIMENSION_SET(ret->dim[0], 0, total-1, 1);\n \n \t  ret->offset = 0;\n+\n+\t  /* internal_malloc_size allocates a single byte for zero size.  */\n+\t  ret->data = internal_malloc_size (sizeof ('rtype_name`) * total);\n+\n \t  if (total == 0)\n-\t    {\n-\t      /* In this case, nothing remains to be done.  */\n-\t      ret->data = internal_malloc_size (1);\n-\t      return;\n-\t    }\n-\t  else\n-\t    ret->data = internal_malloc_size (sizeof ('rtype_name`) * total);\n+\t    return;\n \t}\n       else \n \t{"}, {"sha": "89a2e65297c1d57bd032b3593bb2033ef1829bbe", "filename": "libgfortran/m4/spread.m4", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fm4%2Fspread.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fm4%2Fspread.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fspread.m4?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -101,13 +101,11 @@ spread_'rtype_code` ('rtype` *ret, const 'rtype` *source,\n \t  GFC_DIMENSION_SET(ret->dim[n], 0, ub, stride);\n \t}\n       ret->offset = 0;\n-      if (rs > 0)\n-        ret->data = internal_malloc_size (rs * sizeof('rtype_name`));\n-      else\n-\t{\n-\t  ret->data = internal_malloc_size (1);\n-\t  return;\n-\t}\n+\n+      /* internal_malloc_size allocates a single byte for zero size.  */\n+      ret->data = internal_malloc_size (rs * sizeof('rtype_name`));\n+      if (rs <= 0)\n+        return;\n     }\n   else\n     {"}, {"sha": "a26d9e59efa2f89ede50d6ff8bac1dc310b7cdda", "filename": "libgfortran/runtime/memory.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fruntime%2Fmemory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a787f6f9ec01a53bc6734940d79edc191be7a908/libgfortran%2Fruntime%2Fmemory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmemory.c?ref=a787f6f9ec01a53bc6734940d79edc191be7a908", "patch": "@@ -54,8 +54,8 @@ get_mem (size_t n)\n void *\n internal_malloc_size (size_t size)\n {\n-  if (size == 0)\n-    return NULL;\n+  if (unlikely (size == 0))\n+    size = 1;\n \n   return get_mem (size);\n }"}]}