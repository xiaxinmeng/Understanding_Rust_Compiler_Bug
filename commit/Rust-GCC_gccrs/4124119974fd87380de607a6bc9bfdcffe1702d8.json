{"sha": "4124119974fd87380de607a6bc9bfdcffe1702d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDEyNDExOTk3NGZkODczODBkZTYwN2E2YmM5YmZkY2ZmZTE3MDJkOA==", "commit": {"author": {"name": "Renlin Li", "email": "renlin.li@arm.com", "date": "2018-10-15T16:49:05Z"}, "committer": {"name": "Renlin Li", "email": "renlin@gcc.gnu.org", "date": "2018-10-15T16:49:05Z"}, "message": "[PR87563][AARCH64-SVE]: Don't keep ifcvt loop when COND_<OP> ifn could not be vectorized.\n\nifcvt will created versioned loop and it will permissively generate\nscalar COND_<OP> ifn.\n\nIf in the loop vectorize pass, COND_<OP> could not get vectoized,\nthe if-converted loop should be abandoned when the target doesn't support\nsuch ifn.\n\n\ngcc/\n\n2018-10-12  Renlin Li  <renlin.li@arm.com>\n\n\tPR target/87563\n\t* tree-vectorizer.c (try_vectorize_loop_1): Don't use\n\tif-conversioned loop when it contains ifn with types not\n\tsupported by backend.\n\t* internal-fn.c (expand_direct_optab_fn): Add an assert.\n\t(direct_internal_fn_supported_p): New helper function.\n\t* internal-fn.h (direct_internal_fn_supported_p): Declare.\n\ngcc/testsuite/\n\n2018-10-12  Renlin Li  <renlin.li@arm.com>\n\n\tPR target/87563\n\t* gcc.target/aarch64/sve/pr87563.c: New.\n\nFrom-SVN: r265172", "tree": {"sha": "47feff0e7142f9546cb0f5127556626781cb82d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47feff0e7142f9546cb0f5127556626781cb82d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4124119974fd87380de607a6bc9bfdcffe1702d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4124119974fd87380de607a6bc9bfdcffe1702d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4124119974fd87380de607a6bc9bfdcffe1702d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4124119974fd87380de607a6bc9bfdcffe1702d8/comments", "author": null, "committer": null, "parents": [{"sha": "e60f68ec460bc5b33a6f75caac9667bf978f37d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e60f68ec460bc5b33a6f75caac9667bf978f37d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e60f68ec460bc5b33a6f75caac9667bf978f37d8"}], "stats": {"total": 70, "additions": 62, "deletions": 8}, "files": [{"sha": "0b8c7e555a633df0803b74521ba81852a27d81b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4124119974fd87380de607a6bc9bfdcffe1702d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4124119974fd87380de607a6bc9bfdcffe1702d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4124119974fd87380de607a6bc9bfdcffe1702d8", "patch": "@@ -1,3 +1,13 @@\n+2018-10-15  Renlin Li  <renlin.li@arm.com>\n+\n+\tPR target/87563\n+\t* tree-vectorizer.c (try_vectorize_loop_1): Don't use\n+\tif-conversioned loop when it contains ifn with types not\n+\tsupported by backend.\n+\t* internal-fn.c (expand_direct_optab_fn): Add an assert.\n+\t(direct_internal_fn_supported_p): New helper function.\n+\t* internal-fn.h (direct_internal_fn_supported_p): Declare.\n+\n 2018-10-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/87572"}, {"sha": "d082dd5054fa7175ffd3a53414b1ef42a1fca14e", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4124119974fd87380de607a6bc9bfdcffe1702d8/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4124119974fd87380de607a6bc9bfdcffe1702d8/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=4124119974fd87380de607a6bc9bfdcffe1702d8", "patch": "@@ -2890,6 +2890,7 @@ expand_direct_optab_fn (internal_fn fn, gcall *stmt, direct_optab optab,\n \n   tree_pair types = direct_internal_fn_types (fn, stmt);\n   insn_code icode = direct_optab_handler (optab, TYPE_MODE (types.first));\n+  gcc_assert (icode != CODE_FOR_nothing);\n \n   tree lhs = gimple_call_lhs (stmt);\n   rtx lhs_rtx = NULL_RTX;\n@@ -3183,6 +3184,17 @@ direct_internal_fn_supported_p (internal_fn fn, tree type,\n   return direct_internal_fn_supported_p (fn, tree_pair (type, type), opt_type);\n }\n \n+/* Return true if the STMT is supported when the optimization type is OPT_TYPE,\n+   given that STMT is a call to a direct internal function.  */\n+\n+bool\n+direct_internal_fn_supported_p (gcall *stmt, optimization_type opt_type)\n+{\n+  internal_fn fn = gimple_call_internal_fn (stmt);\n+  tree_pair types = direct_internal_fn_types (fn, stmt);\n+  return direct_internal_fn_supported_p (fn, types, opt_type);\n+}\n+\n /* If FN is commutative in two consecutive arguments, return the\n    index of the first, otherwise return -1.  */\n "}, {"sha": "ff3bace1ce643ee10e1f776efffa01af31b6bbe7", "filename": "gcc/internal-fn.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4124119974fd87380de607a6bc9bfdcffe1702d8/gcc%2Finternal-fn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4124119974fd87380de607a6bc9bfdcffe1702d8/gcc%2Finternal-fn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.h?ref=4124119974fd87380de607a6bc9bfdcffe1702d8", "patch": "@@ -187,6 +187,7 @@ extern bool direct_internal_fn_supported_p (internal_fn, tree_pair,\n \t\t\t\t\t    optimization_type);\n extern bool direct_internal_fn_supported_p (internal_fn, tree,\n \t\t\t\t\t    optimization_type);\n+extern bool direct_internal_fn_supported_p (gcall *, optimization_type);\n \n /* Return true if FN is supported for types TYPE0 and TYPE1 when the\n    optimization type is OPT_TYPE.  The types are those associated with"}, {"sha": "7f8b0852e903925511fd8d7eab24686f7c7ca8a0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4124119974fd87380de607a6bc9bfdcffe1702d8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4124119974fd87380de607a6bc9bfdcffe1702d8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4124119974fd87380de607a6bc9bfdcffe1702d8", "patch": "@@ -1,3 +1,8 @@\n+2018-10-15  Renlin Li  <renlin.li@arm.com>\n+\n+\tPR target/87563\n+\t* gcc.target/aarch64/sve/pr87563.c: New.\n+\n 2018-10-15  Paul Thomas  <pault@gcc.gnu.org>\n \tTobias Burnus  <burnus@gcc.gnu.org>\n "}, {"sha": "83553b7ceea7199b5afb9f5adab50f15f9e41d55", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr87563.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4124119974fd87380de607a6bc9bfdcffe1702d8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr87563.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4124119974fd87380de607a6bc9bfdcffe1702d8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr87563.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr87563.c?ref=4124119974fd87380de607a6bc9bfdcffe1702d8", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-ifcvt-details -fdump-tree-vect\" } */\n+\n+int a, b, c, *e;\n+int d[2];\n+\n+void f ()\n+{\n+  while (c)\n+    {\n+      d[0] = 4;\n+      d[1] = 4;\n+      *e = b == 0 ? 0 : a / b;\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump \"COND_DIV\" \"ifcvt\" } } */\n+/* { dg-final { scan-tree-dump-not \"COND_DIV\" \"vect\" } } */"}, {"sha": "12bf0fcd5bde4b889fb74342c4e7dd52327efa57", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4124119974fd87380de607a6bc9bfdcffe1702d8/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4124119974fd87380de607a6bc9bfdcffe1702d8/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=4124119974fd87380de607a6bc9bfdcffe1702d8", "patch": "@@ -80,6 +80,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"attribs.h\"\n #include \"gimple-pretty-print.h\"\n #include \"opt-problem.h\"\n+#include \"internal-fn.h\"\n \n \n /* Loop or bb location, with hotness information.  */\n@@ -899,23 +900,30 @@ try_vectorize_loop_1 (hash_table<simduid_to_vf> *&simduid_to_vf_htab,\n \t  && ! loop->inner)\n \t{\n \t  basic_block bb = loop->header;\n-\t  bool has_mask_load_store = false;\n+\t  bool require_loop_vectorize = false;\n \t  for (gimple_stmt_iterator gsi = gsi_start_bb (bb);\n \t       !gsi_end_p (gsi); gsi_next (&gsi))\n \t    {\n \t      gimple *stmt = gsi_stmt (gsi);\n-\t      if (is_gimple_call (stmt)\n-\t\t  && gimple_call_internal_p (stmt)\n-\t\t  && (gimple_call_internal_fn (stmt) == IFN_MASK_LOAD\n-\t\t      || gimple_call_internal_fn (stmt) == IFN_MASK_STORE))\n+\t      gcall *call = dyn_cast <gcall *> (stmt);\n+\t      if (call && gimple_call_internal_p (call))\n \t\t{\n-\t\t  has_mask_load_store = true;\n-\t\t  break;\n+\t\t  internal_fn ifn = gimple_call_internal_fn (call);\n+\t\t  if (ifn == IFN_MASK_LOAD || ifn == IFN_MASK_STORE\n+\t\t      /* Don't keep the if-converted parts when the ifn with\n+\t\t\t specifc type is not supported by the backend.  */\n+\t\t      || (direct_internal_fn_p (ifn)\n+\t\t\t  && !direct_internal_fn_supported_p\n+\t\t\t  (call, OPTIMIZE_FOR_SPEED)))\n+\t\t    {\n+\t\t      require_loop_vectorize = true;\n+\t\t      break;\n+\t\t    }\n \t\t}\n \t      gimple_set_uid (stmt, -1);\n \t      gimple_set_visited (stmt, false);\n \t    }\n-\t  if (! has_mask_load_store && vect_slp_bb (bb))\n+\t  if (!require_loop_vectorize && vect_slp_bb (bb))\n \t    {\n \t      dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t       \"basic block vectorized\\n\");"}]}