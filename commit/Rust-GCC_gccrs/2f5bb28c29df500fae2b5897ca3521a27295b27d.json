{"sha": "2f5bb28c29df500fae2b5897ca3521a27295b27d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY1YmIyOGMyOWRmNTAwZmFlMmI1ODk3Y2EzNTIxYTI3Mjk1YjI3ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-22T15:15:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-22T15:15:38Z"}, "message": "score-protos.h (score_initialize_trampoline): Remove.\n\n        * config/score/score-protos.h (score_initialize_trampoline): Remove.\n        * config/score/score.c (TARGET_ASM_TRAMPOLINE_TEMPLATE): New.\n        (TARGET_TRAMPOLINE_INIT): New.\n        (score_asm_trampoline_template): New.\n        (score_trampoline_init): Rename from score_initialize_trampoline;\n        make static; adjust for hook parameters.\n        * config/score/score.h (TRAMPOLINE_TEMPLATE): Move code to\n        score[37]_asm_trampoline_template.\n        (INITIALIZE_TRAMPOLINE): Remove.\n        * config/score/score3.c (score3_asm_trampoline_template): New.\n        (score3_trampoline_init): Rename from score3_initialize_trampoline;\n        adjust for target hook.\n        * config/score/score7.c (score7_asm_trampoline_template): New.\n        (score7_trampoline_init): Rename from score7_initialize_trampoline;\n        adjust for target hook.\n        * config/score/score3.h, config/score/score7.h: Update.\n\nFrom-SVN: r152010", "tree": {"sha": "eb90bdd16f974cd061072d89ecb75cf70fe7e26e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb90bdd16f974cd061072d89ecb75cf70fe7e26e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f5bb28c29df500fae2b5897ca3521a27295b27d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f5bb28c29df500fae2b5897ca3521a27295b27d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f5bb28c29df500fae2b5897ca3521a27295b27d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f5bb28c29df500fae2b5897ca3521a27295b27d/comments", "author": null, "committer": null, "parents": [{"sha": "b81ecf6fd65e63dc568167b3c71eabf53ba5ccca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b81ecf6fd65e63dc568167b3c71eabf53ba5ccca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b81ecf6fd65e63dc568167b3c71eabf53ba5ccca"}], "stats": {"total": 175, "additions": 108, "deletions": 67}, "files": [{"sha": "7fe7d9ec08369b9c21340d989c9e0cf34a4a42bc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5bb28c29df500fae2b5897ca3521a27295b27d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5bb28c29df500fae2b5897ca3521a27295b27d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f5bb28c29df500fae2b5897ca3521a27295b27d", "patch": "@@ -227,6 +227,23 @@\n \t(TRAMPOLINE_TEMPLATE): Remove.\n \t(TRAMPOLINE_ALIGNMENT): New.\n \n+\t* config/score/score-protos.h (score_initialize_trampoline): Remove.\n+\t* config/score/score.c (TARGET_ASM_TRAMPOLINE_TEMPLATE): New.\n+\t(TARGET_TRAMPOLINE_INIT): New.\n+\t(score_asm_trampoline_template): New.\n+\t(score_trampoline_init): Rename from score_initialize_trampoline;\n+\tmake static; adjust for hook parameters.\n+\t* config/score/score.h (TRAMPOLINE_TEMPLATE): Move code to\n+\tscore[37]_asm_trampoline_template.\n+\t(INITIALIZE_TRAMPOLINE): Remove.\n+\t* config/score/score3.c (score3_asm_trampoline_template): New.\n+\t(score3_trampoline_init): Rename from score3_initialize_trampoline;\n+\tadjust for target hook.\n+\t* config/score/score7.c (score7_asm_trampoline_template): New.\n+\t(score7_trampoline_init): Rename from score7_initialize_trampoline;\n+\tadjust for target hook.\n+\t* config/score/score3.h, config/score/score7.h: Update.\n+\n 2009-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000.c (bdesc_2arg): Fix CODE_FOR_vector_gt* codes"}, {"sha": "d42ec14eb695b15034aa09217fa10bc5240fa037", "filename": "gcc/config/score/score-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5bb28c29df500fae2b5897ca3521a27295b27d/gcc%2Fconfig%2Fscore%2Fscore-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5bb28c29df500fae2b5897ca3521a27295b27d/gcc%2Fconfig%2Fscore%2Fscore-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore-protos.h?ref=2f5bb28c29df500fae2b5897ca3521a27295b27d", "patch": "@@ -50,7 +50,6 @@ extern int score_hard_regno_mode_ok (unsigned int, enum machine_mode);\n extern int score_const_ok_for_letter_p (HOST_WIDE_INT value, char c);\n extern int score_extra_constraint (rtx op, char c);\n extern rtx score_return_addr (int count, rtx frame);\n-extern void score_initialize_trampoline (rtx ADDR, rtx FUNC, rtx CHAIN);\n extern int score_regno_mode_ok_for_base_p (int regno, int strict);\n extern void score_function_arg_advance (CUMULATIVE_ARGS *cum,\n                                         enum machine_mode mode,"}, {"sha": "4324d653e1ec33de035747cbab353b48d0acd244", "filename": "gcc/config/score/score.c", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5bb28c29df500fae2b5897ca3521a27295b27d/gcc%2Fconfig%2Fscore%2Fscore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5bb28c29df500fae2b5897ca3521a27295b27d/gcc%2Fconfig%2Fscore%2Fscore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.c?ref=2f5bb28c29df500fae2b5897ca3521a27295b27d", "patch": "@@ -119,6 +119,11 @@\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE            score_can_eliminate\n \n+#undef TARGET_ASM_TRAMPOLINE_TEMPLATE\n+#define TARGET_ASM_TRAMPOLINE_TEMPLATE\tscore_asm_trampoline_template\n+#undef TARGET_TRAMPOLINE_INIT\n+#define TARGET_TRAMPOLINE_INIT\t\tscore_trampoline_init\n+\n struct extern_list *extern_head = 0;\n \n /* default 0 = NO_REGS  */\n@@ -519,14 +524,27 @@ score_function_value (tree valtype, tree func ATTRIBUTE_UNUSED,\n   gcc_unreachable ();\n }\n \n-/* Implement INITIALIZE_TRAMPOLINE macro.  */\n-void\n-score_initialize_trampoline (rtx ADDR, rtx FUNC, rtx CHAIN)\n+/* Implement TARGET_ASM_TRAMPOLINE_TEMPLATE.  */\n+static void\n+score_asm_trampoline_template (FILE *f)\n+{\n+  if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n+    return score7_asm_trampoline_template (f);\n+  else if (TARGET_SCORE3)\n+    return score3_asm_trampoline_template (f);\n+\n+  gcc_unreachable ();\n+}\n+\n+/* Implement TARGET_TRAMPOLINE_INIT.  */\n+static void\n+score_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n {\n+  /* ??? These two routines are identical.  */\n   if (TARGET_SCORE5 || TARGET_SCORE5U || TARGET_SCORE7 || TARGET_SCORE7D)\n-    return score7_initialize_trampoline (ADDR, FUNC, CHAIN);\n+    return score7_trampoline_init (m_tramp, fndecl, chain_value);\n   else if (TARGET_SCORE3)\n-    return score3_initialize_trampoline (ADDR, FUNC, CHAIN);\n+    return score3_trampoline_init (m_tramp, fndecl, chain_value);\n \n   gcc_unreachable ();\n }"}, {"sha": "0b7af7b27399eb0c4c863a404773badae95aa7e2", "filename": "gcc/config/score/score.h", "status": "modified", "additions": 1, "deletions": 43, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5bb28c29df500fae2b5897ca3521a27295b27d/gcc%2Fconfig%2Fscore%2Fscore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5bb28c29df500fae2b5897ca3521a27295b27d/gcc%2Fconfig%2Fscore%2Fscore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore.h?ref=2f5bb28c29df500fae2b5897ca3521a27295b27d", "patch": "@@ -673,54 +673,12 @@ typedef struct score_args\n       }                                                               \\\n   } while (0)\n \n-#define TRAMPOLINE_TEMPLATE(STREAM)                                   \\\n-  do {                                                                \\\n-    if (TARGET_SCORE7)                                                \\\n-      {                                                               \\\n-        fprintf (STREAM, \"\\t.set r1\\n\");                              \\\n-        fprintf (STREAM, \"\\tmv r31, r3\\n\");                           \\\n-        fprintf (STREAM, \"\\tbl nextinsn\\n\");                          \\\n-        fprintf (STREAM, \"nextinsn:\\n\");                              \\\n-        fprintf (STREAM, \"\\tlw r1, [r3, 6*4-8]\\n\");                   \\\n-        fprintf (STREAM, \"\\tlw r23, [r3, 6*4-4]\\n\");                  \\\n-        fprintf (STREAM, \"\\tmv r3, r31\\n\");                           \\\n-        fprintf (STREAM, \"\\tbr! r1\\n\");                               \\\n-        fprintf (STREAM, \"\\tnop!\\n\");                                 \\\n-        fprintf (STREAM, \"\\t.set nor1\\n\");                            \\\n-      }                                                               \\\n-    else if (TARGET_SCORE3)                                           \\\n-      {                                                               \\\n-        fprintf (STREAM, \"\\t.set r1\\n\");                              \\\n-        fprintf (STREAM, \"\\tmv! r31, r3\\n\");                          \\\n-        fprintf (STREAM, \"\\tnop!\\n\");                                 \\\n-        fprintf (STREAM, \"\\tbl nextinsn\\n\");                          \\\n-        fprintf (STREAM, \"nextinsn:\\n\");                              \\\n-        fprintf (STREAM, \"\\tlw! r1, [r3, 6*4-8]\\n\");                  \\\n-        fprintf (STREAM, \"\\tnop!\\n\");                                 \\\n-        fprintf (STREAM, \"\\tlw r23, [r3, 6*4-4]\\n\");                  \\\n-        fprintf (STREAM, \"\\tmv! r3, r31\\n\");                          \\\n-        fprintf (STREAM, \"\\tnop!\\n\");                                 \\\n-        fprintf (STREAM, \"\\tbr! r1\\n\");                               \\\n-        fprintf (STREAM, \"\\tnop!\\n\");                                 \\\n-        fprintf (STREAM, \"\\t.set nor1\\n\");                            \\\n-      }                                                               \\\n-  } while (0)\n-\n /* Trampolines for Nested Functions.  */\n #define TRAMPOLINE_INSNS                6\n \n /* A C expression for the size in bytes of the trampoline, as an integer.  */\n #define TRAMPOLINE_SIZE                (24 + GET_MODE_SIZE (ptr_mode) * 2)\n \n-/* A C statement to initialize the variable parts of a trampoline.\n-   ADDR is an RTX for the address of the trampoline; FNADDR is an\n-   RTX for the address of the nested function; STATIC_CHAIN is an\n-   RTX for the static chain value that should be passed to the\n-   function when it is called.  */\n-\n-#define INITIALIZE_TRAMPOLINE(ADDR, FUNC, CHAIN) \\\n-  score_initialize_trampoline (ADDR, FUNC, CHAIN)\n-\n #define HAVE_PRE_INCREMENT              1\n #define HAVE_PRE_DECREMENT              1\n #define HAVE_POST_INCREMENT             1\n@@ -1067,7 +1025,7 @@ typedef struct score_args\n    for 32-bit targets.  */\n #define FUNCTION_MODE                   Pmode\n \n-struct extern_list GTY ((chain_next (\"%h.next\")))\n+struct GTY ((chain_next (\"%h.next\"))) extern_list\n {\n   struct extern_list *next;             /* next external  */\n   const char *name;                     /* name of the external  */"}, {"sha": "a5c8e608d15f63ec689ce2f398f4b55b5e6ed74a", "filename": "gcc/config/score/score3.c", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5bb28c29df500fae2b5897ca3521a27295b27d/gcc%2Fconfig%2Fscore%2Fscore3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5bb28c29df500fae2b5897ca3521a27295b27d/gcc%2Fconfig%2Fscore%2Fscore3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore3.c?ref=2f5bb28c29df500fae2b5897ca3521a27295b27d", "patch": "@@ -870,23 +870,48 @@ score3_function_value (tree valtype, tree func, enum machine_mode mode)\n   return gen_rtx_REG (mode, RT_REGNUM);\n }\n \n-/* Implement INITIALIZE_TRAMPOLINE macro.  */\n+/* Implement TARGET_ASM_TRAMPOLINE_TEMPLATE.  */\n+\n+void\n+score3_asm_trampoline_template (FILE *f)\n+{\n+  fprintf (f, \"\\t.set r1\\n\");\n+  fprintf (f, \"\\tmv! r31, r3\\n\");\n+  fprintf (f, \"\\tnop!\\n\");\n+  fprintf (f, \"\\tbl nextinsn\\n\");\n+  fprintf (f, \"nextinsn:\\n\");\n+  fprintf (f, \"\\tlw! r1, [r3, 6*4-8]\\n\");\n+  fprintf (f, \"\\tnop!\\n\");\n+  fprintf (f, \"\\tlw r23, [r3, 6*4-4]\\n\");\n+  fprintf (f, \"\\tmv! r3, r31\\n\");\n+  fprintf (f, \"\\tnop!\\n\");\n+  fprintf (f, \"\\tbr! r1\\n\");\n+  fprintf (f, \"\\tnop!\\n\");\n+  fprintf (f, \"\\t.set nor1\\n\");\n+}\n+\n+/* Implement TARGET_TRAMPOLINE_INIT.  */\n void\n-score3_initialize_trampoline (rtx ADDR, rtx FUNC, rtx CHAIN)\n+score3_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n {\n #define FFCACHE          \"_flush_cache\"\n #define CODE_SIZE        (TRAMPOLINE_INSNS * UNITS_PER_WORD)\n \n-  rtx pfunc, pchain;\n+  rtx fnaddr = XEXP (DECL_RTL (fndecl), 0);\n+  rtx addr = XEXP (m_tramp, 0);\n+  rtx mem;\n+\n+  emit_block_move (m_tramp, assemble_trampoline_template (),\n+\t\t   GEN_INT (TRAMPOLINE_SIZE), BLOCK_OP_NORMAL);\n \n-  pfunc = plus_constant (ADDR, CODE_SIZE);\n-  pchain = plus_constant (ADDR, CODE_SIZE + GET_MODE_SIZE (SImode));\n+  mem = adjust_address (m_tramp, SImode, CODE_SIZE);\n+  emit_move_insn (mem, fnaddr);\n+  mem = adjust_address (m_tramp, SImode, CODE_SIZE + GET_MODE_SIZE (SImode));\n+  emit_move_insn (mem, chain_value);\n \n-  emit_move_insn (gen_rtx_MEM (SImode, pfunc), FUNC);\n-  emit_move_insn (gen_rtx_MEM (SImode, pchain), CHAIN);\n   emit_library_call (gen_rtx_SYMBOL_REF (Pmode, FFCACHE),\n                      0, VOIDmode, 2,\n-                     ADDR, Pmode,\n+                     addr, Pmode,\n                      GEN_INT (TRAMPOLINE_SIZE), SImode);\n #undef FFCACHE\n #undef CODE_SIZE"}, {"sha": "4e545fc9570160c08cf15381208579fca9851443", "filename": "gcc/config/score/score3.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5bb28c29df500fae2b5897ca3521a27295b27d/gcc%2Fconfig%2Fscore%2Fscore3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5bb28c29df500fae2b5897ca3521a27295b27d/gcc%2Fconfig%2Fscore%2Fscore3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore3.h?ref=2f5bb28c29df500fae2b5897ca3521a27295b27d", "patch": "@@ -120,7 +120,8 @@ extern rtx score3_function_arg (const CUMULATIVE_ARGS *cum,\n extern rtx score3_function_value (tree valtype,\n                                   tree func ATTRIBUTE_UNUSED,\n                                   enum machine_mode mode);\n-extern void score3_initialize_trampoline (rtx ADDR, rtx FUNC, rtx CHAIN);\n+extern void score3_asm_trampoline_template (FILE *);\n+extern void score3_trampoline_init (rtx, tree, rtx);\n extern int score3_regno_mode_ok_for_base_p (int regno, int strict);\n extern bool score3_legitimate_address_p (enum machine_mode mode, rtx x,\n \t\t\t\t\t bool strict);"}, {"sha": "2307201f166df4b7d6a0b78f88abd2456afeb156", "filename": "gcc/config/score/score7.c", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5bb28c29df500fae2b5897ca3521a27295b27d/gcc%2Fconfig%2Fscore%2Fscore7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5bb28c29df500fae2b5897ca3521a27295b27d/gcc%2Fconfig%2Fscore%2Fscore7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore7.c?ref=2f5bb28c29df500fae2b5897ca3521a27295b27d", "patch": "@@ -861,23 +861,45 @@ score7_function_value (tree valtype, tree func, enum machine_mode mode)\n   return gen_rtx_REG (mode, RT_REGNUM);\n }\n \n-/* Implement INITIALIZE_TRAMPOLINE macro.  */\n+/* Implement TARGET_ASM_TRAMPOLINE_TEMPLATE.  */\n+\n+void\n+score7_asm_trampoline_template (FILE *f)\n+{\n+  fprintf (f, \"\\t.set r1\\n\");\n+  fprintf (f, \"\\tmv r31, r3\\n\");\n+  fprintf (f, \"\\tbl nextinsn\\n\");\n+  fprintf (f, \"nextinsn:\\n\");\n+  fprintf (f, \"\\tlw r1, [r3, 6*4-8]\\n\");\n+  fprintf (f, \"\\tlw r23, [r3, 6*4-4]\\n\");\n+  fprintf (f, \"\\tmv r3, r31\\n\");\n+  fprintf (f, \"\\tbr! r1\\n\");\n+  fprintf (f, \"\\tnop!\\n\");\n+  fprintf (f, \"\\t.set nor1\\n\");\n+}\n+\n+/* Implement TARGET_TRAMPOLINE_INIT.  */\n void\n-score7_initialize_trampoline (rtx ADDR, rtx FUNC, rtx CHAIN)\n+score7_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n {\n #define FFCACHE          \"_flush_cache\"\n #define CODE_SIZE        (TRAMPOLINE_INSNS * UNITS_PER_WORD)\n \n-  rtx pfunc, pchain;\n+  rtx fnaddr = XEXP (DECL_RTL (fndecl), 0);\n+  rtx addr = XEXP (m_tramp, 0);\n+  rtx mem;\n+\n+  emit_block_move (m_tramp, assemble_trampoline_template (),\n+\t\t   GEN_INT (TRAMPOLINE_SIZE), BLOCK_OP_NORMAL);\n \n-  pfunc = plus_constant (ADDR, CODE_SIZE);\n-  pchain = plus_constant (ADDR, CODE_SIZE + GET_MODE_SIZE (SImode));\n+  mem = adjust_address (m_tramp, SImode, CODE_SIZE);\n+  emit_move_insn (mem, fnaddr);\n+  mem = adjust_address (m_tramp, SImode, CODE_SIZE + GET_MODE_SIZE (SImode));\n+  emit_move_insn (mem, chain_value);\n \n-  emit_move_insn (gen_rtx_MEM (SImode, pfunc), FUNC);\n-  emit_move_insn (gen_rtx_MEM (SImode, pchain), CHAIN);\n   emit_library_call (gen_rtx_SYMBOL_REF (Pmode, FFCACHE),\n                      0, VOIDmode, 2,\n-                     ADDR, Pmode,\n+                     addr, Pmode,\n                      GEN_INT (TRAMPOLINE_SIZE), SImode);\n #undef FFCACHE\n #undef CODE_SIZE"}, {"sha": "0931a2b97e56f9f900ad28364ff1f29f008bc5a5", "filename": "gcc/config/score/score7.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f5bb28c29df500fae2b5897ca3521a27295b27d/gcc%2Fconfig%2Fscore%2Fscore7.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f5bb28c29df500fae2b5897ca3521a27295b27d/gcc%2Fconfig%2Fscore%2Fscore7.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Fscore7.h?ref=2f5bb28c29df500fae2b5897ca3521a27295b27d", "patch": "@@ -120,7 +120,8 @@ extern rtx score7_function_arg (const CUMULATIVE_ARGS *cum,\n extern rtx score7_function_value (tree valtype,\n                                   tree func ATTRIBUTE_UNUSED,\n                                   enum machine_mode mode);\n-extern void score7_initialize_trampoline (rtx ADDR, rtx FUNC, rtx CHAIN);\n+extern void score7_asm_trampoline_template (FILE *);\n+extern void score7_trampoline_init (rtx, tree, rtx);\n extern int score7_regno_mode_ok_for_base_p (int regno, int strict);\n extern bool score7_legitimate_address_p (enum machine_mode mode, rtx x,\n \t\t\t\t\t bool strict);"}]}