{"sha": "42373e0b05c26d047925387d71fa833540dad8f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIzNzNlMGIwNWMyNmQwNDc5MjUzODdkNzFmYTgzMzU0MGRhZDhmMA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-06-30T13:27:43Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-06-30T13:27:43Z"}, "message": "re PR tree-optimization/46787 (Does not vectorize loop with load from scalar variable)\n\n2011-06-30  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/46787\n\t* tree-data-ref.c (dr_address_invariant_p): Remove.\n\t(find_data_references_in_stmt): Invariant accesses are ok now.\n\t* tree-vect-stmts.c (vectorizable_load): Handle invariant\n\tloads.\n\t* tree-vect-data-refs.c (vect_analyze_data_ref_access): Allow\n\tinvariant loads.\n\n\t* gcc.dg/vect/vect-121.c: New testcase.\n\nFrom-SVN: r175704", "tree": {"sha": "ce6a6cf934c4c1c58eb2379172f89d804384e2fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce6a6cf934c4c1c58eb2379172f89d804384e2fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42373e0b05c26d047925387d71fa833540dad8f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42373e0b05c26d047925387d71fa833540dad8f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42373e0b05c26d047925387d71fa833540dad8f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42373e0b05c26d047925387d71fa833540dad8f0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7aa62ea1f86d6126485a01b7e91efe85544cc877", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7aa62ea1f86d6126485a01b7e91efe85544cc877", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7aa62ea1f86d6126485a01b7e91efe85544cc877"}], "stats": {"total": 94, "additions": 42, "deletions": 52}, "files": [{"sha": "6189ef81ca251ff686dfbb5f32e2c3530cc15e4c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42373e0b05c26d047925387d71fa833540dad8f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42373e0b05c26d047925387d71fa833540dad8f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42373e0b05c26d047925387d71fa833540dad8f0", "patch": "@@ -1,3 +1,13 @@\n+2011-06-30  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/46787\n+\t* tree-data-ref.c (dr_address_invariant_p): Remove.\n+\t(find_data_references_in_stmt): Invariant accesses are ok now.\n+\t* tree-vect-stmts.c (vectorizable_load): Handle invariant\n+\tloads.\n+\t* tree-vect-data-refs.c (vect_analyze_data_ref_access): Allow\n+\tinvariant loads.\n+\n 2011-06-30  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/49094"}, {"sha": "ce9314187ddd719f663288aed5e79cded59aa52c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42373e0b05c26d047925387d71fa833540dad8f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42373e0b05c26d047925387d71fa833540dad8f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=42373e0b05c26d047925387d71fa833540dad8f0", "patch": "@@ -1,3 +1,8 @@\n+2011-06-30  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/46787\n+\t* gcc.dg/vect/vect-121.c: New testcase.\n+\n 2011-06-30  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/49094"}, {"sha": "9071836c558324b164662a414fda33dca073dd39", "filename": "gcc/testsuite/gcc.dg/vect/vect-121.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42373e0b05c26d047925387d71fa833540dad8f0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-121.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42373e0b05c26d047925387d71fa833540dad8f0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-121.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-121.c?ref=42373e0b05c26d047925387d71fa833540dad8f0", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_float } */\n+\n+float *x;\n+float parm;\n+float\n+test (int start, int end)\n+{\n+  int i;\n+  for (i = start; i < end; ++i)\n+    {\n+      float tem = x[i];\n+      x[i] = parm * tem;\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump \"vectorized 1 loops\" \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "d58542c91cae622dada11eccd4130c948c51d8ff", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42373e0b05c26d047925387d71fa833540dad8f0/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42373e0b05c26d047925387d71fa833540dad8f0/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=42373e0b05c26d047925387d71fa833540dad8f0", "patch": "@@ -919,21 +919,6 @@ dr_analyze_alias (struct data_reference *dr)\n     }\n }\n \n-/* Returns true if the address of DR is invariant.  */\n-\n-static bool\n-dr_address_invariant_p (struct data_reference *dr)\n-{\n-  unsigned i;\n-  tree idx;\n-\n-  FOR_EACH_VEC_ELT (tree, DR_ACCESS_FNS (dr), i, idx)\n-    if (tree_contains_chrecs (idx, NULL))\n-      return false;\n-\n-  return true;\n-}\n-\n /* Frees data reference DR.  */\n \n void\n@@ -4228,19 +4213,6 @@ find_data_references_in_stmt (struct loop *nest, gimple stmt,\n       dr = create_data_ref (nest, loop_containing_stmt (stmt),\n \t\t\t    *ref->pos, stmt, ref->is_read);\n       gcc_assert (dr != NULL);\n-\n-      /* FIXME -- data dependence analysis does not work correctly for objects\n-         with invariant addresses in loop nests.  Let us fail here until the\n-\t problem is fixed.  */\n-      if (dr_address_invariant_p (dr) && nest)\n-\t{\n-\t  free_data_ref (dr);\n-\t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file, \"\\tFAILED as dr address is invariant\\n\");\n-\t  ret = false;\n-\t  break;\n-\t}\n-\n       VEC_safe_push (data_reference_p, heap, *datarefs, dr);\n     }\n   VEC_free (data_ref_loc, heap, references);"}, {"sha": "1a494233088286bcce7020d397e33113a2cd0223", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42373e0b05c26d047925387d71fa833540dad8f0/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42373e0b05c26d047925387d71fa833540dad8f0/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=42373e0b05c26d047925387d71fa833540dad8f0", "patch": "@@ -2302,9 +2302,9 @@ vect_analyze_data_ref_access (struct data_reference *dr)\n       return false;\n     }\n \n-  /* Don't allow invariant accesses in loops.  */\n+  /* Allow invariant loads in loops.  */\n   if (loop_vinfo && dr_step == 0)\n-    return false;\n+    return DR_IS_READ (dr);\n \n   if (loop && nested_in_vect_loop_p (loop, stmt))\n     {"}, {"sha": "0d7d3dbe41dc83be4cbb3aa7a41eef45b3cbfbcb", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42373e0b05c26d047925387d71fa833540dad8f0/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42373e0b05c26d047925387d71fa833540dad8f0/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=42373e0b05c26d047925387d71fa833540dad8f0", "patch": "@@ -4123,7 +4123,8 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n       && code != COMPONENT_REF\n       && code != IMAGPART_EXPR\n       && code != REALPART_EXPR\n-      && code != MEM_REF)\n+      && code != MEM_REF\n+      && TREE_CODE_CLASS (code) != tcc_declaration)\n     return false;\n \n   if (!STMT_VINFO_DATA_REF (stmt_info))\n@@ -4574,30 +4575,14 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t      if (inv_p && !bb_vinfo)\n \t\t{\n \t\t  gcc_assert (!strided_load);\n-\t\t  gcc_assert (nested_in_vect_loop_p (loop, stmt));\n \t\t  if (j == 0)\n \t\t    {\n-\t\t      int k;\n-\t\t      tree t = NULL_TREE;\n-\t\t      tree vec_inv, bitpos, bitsize = TYPE_SIZE (scalar_type);\n-\n-\t\t      /* CHECKME: bitpos depends on endianess?  */\n-\t\t      bitpos = bitsize_zero_node;\n-\t\t      vec_inv = build3 (BIT_FIELD_REF, scalar_type, new_temp,\n-\t\t\t\t\tbitsize, bitpos);\n-\t\t      vec_dest = vect_create_destination_var (scalar_dest,\n-\t\t\t\t\t\t\t      NULL_TREE);\n-\t\t      new_stmt = gimple_build_assign (vec_dest, vec_inv);\n-\t\t      new_temp = make_ssa_name (vec_dest, new_stmt);\n-\t\t      gimple_assign_set_lhs (new_stmt, new_temp);\n-\t\t      vect_finish_stmt_generation (stmt, new_stmt, gsi);\n-\n-\t\t      for (k = nunits - 1; k >= 0; --k)\n-\t\t\tt = tree_cons (NULL_TREE, new_temp, t);\n-\t\t      /* FIXME: use build_constructor directly.  */\n-\t\t      vec_inv = build_constructor_from_list (vectype, t);\n+\t\t      tree vec_inv;\n+\t\t      gimple_stmt_iterator gsi2 = *gsi;\n+\t\t      gsi_next (&gsi2);\n+\t\t      vec_inv = build_vector_from_val (vectype, scalar_dest);\n \t\t      new_temp = vect_init_vector (stmt, vec_inv,\n-\t\t\t\t\t\t   vectype, gsi);\n+\t\t\t\t\t\t   vectype, &gsi2);\n \t\t      new_stmt = SSA_NAME_DEF_STMT (new_temp);\n \t\t    }\n \t\t  else"}]}