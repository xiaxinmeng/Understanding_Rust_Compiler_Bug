{"sha": "bd159a7660bf1cac2b884ffbf6667bb64189017f", "node_id": "C_kwDOANBUbNoAKGJkMTU5YTc2NjBiZjFjYWMyYjg4NGZmYmY2NjY3YmI2NDE4OTAxN2Y", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-07-04T15:09:57Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2022-08-16T15:34:51Z"}, "message": "RISC-V: Support zfh and zfhmin extension\n\nZfh and Zfhmin are extensions for IEEE half precision, both are ratified\nin Jan. 2022[1]:\n\n- Zfh has full set of operation like F or D for single or double precision.\n- Zfhmin has only provide minimal support for half precision operation,\n  like conversion, load, store and move instructions.\n\n[1] https://github.com/riscv/riscv-isa-manual/commit/b35a54079e0da11740ce5b1e6db999d1d5172768\n\ngcc/ChangeLog:\n\n\t* common/config/riscv/riscv-common.cc (riscv_implied_info): Add\n\tzfh and zfhmin.\n\t(riscv_ext_version_table): Ditto.\n\t(riscv_ext_flag_table): Ditto.\n\t* config/riscv/riscv-opts.h (MASK_ZFHMIN): New.\n\t(MASK_ZFH): Ditto.\n\t(TARGET_ZFHMIN): Ditto.\n\t(TARGET_ZFH): Ditto.\n\t* config/riscv/riscv.cc (riscv_output_move): Handle HFmode move\n\tfor zfh and zfhmin.\n\t(riscv_emit_float_compare): Handle HFmode.\n\t* config/riscv/riscv.md (ANYF): Add HF.\n\t(SOFTF): Add HF.\n\t(load): Ditto.\n\t(store): Ditto.\n\t(truncsfhf2): New.\n\t(truncdfhf2): Ditto.\n\t(extendhfsf2): Ditto.\n\t(extendhfdf2): Ditto.\n\t(*movhf_hardfloat): Ditto.\n\t(*movhf_softfloat): Make sure not ZFHMIN.\n\t* config/riscv/riscv.opt (riscv_zf_subext): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/_Float16-zfh-1.c: New.\n\t* gcc.target/riscv/_Float16-zfh-2.c: Ditto.\n\t* gcc.target/riscv/_Float16-zfh-3.c: Ditto.\n\t* gcc.target/riscv/_Float16-zfhmin-1.c: Ditto.\n\t* gcc.target/riscv/_Float16-zfhmin-2.c: Ditto.\n\t* gcc.target/riscv/_Float16-zfhmin-3.c: Ditto.\n\t* gcc.target/riscv/arch-16.c: Ditto.\n\t* gcc.target/riscv/arch-17.c: Ditto.\n\t* gcc.target/riscv/predef-21.c: Ditto.\n\t* gcc.target/riscv/predef-22.c: Ditto.", "tree": {"sha": "47664c6e3bd907e821ec263f387c881a77b3f47f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47664c6e3bd907e821ec263f387c881a77b3f47f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd159a7660bf1cac2b884ffbf6667bb64189017f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd159a7660bf1cac2b884ffbf6667bb64189017f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd159a7660bf1cac2b884ffbf6667bb64189017f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd159a7660bf1cac2b884ffbf6667bb64189017f/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27d68a60783b52504a08503d3fe12054de104241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27d68a60783b52504a08503d3fe12054de104241", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27d68a60783b52504a08503d3fe12054de104241"}], "stats": {"total": 288, "additions": 279, "deletions": 9}, "files": [{"sha": "4ee1b3198c505965b355eb59e9507aab99b6a2d8", "filename": "gcc/common/config/riscv/riscv-common.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.cc?ref=bd159a7660bf1cac2b884ffbf6667bb64189017f", "patch": "@@ -96,6 +96,9 @@ static const riscv_implied_info_t riscv_implied_info[] =\n   {\"zvl32768b\", \"zvl16384b\"},\n   {\"zvl65536b\", \"zvl32768b\"},\n \n+  {\"zfh\", \"zfhmin\"},\n+  {\"zfhmin\", \"f\"},\n+\n   {NULL, NULL}\n };\n \n@@ -193,6 +196,9 @@ static const struct riscv_ext_version riscv_ext_version_table[] =\n   {\"zvl32768b\", ISA_SPEC_CLASS_NONE, 1, 0},\n   {\"zvl65536b\", ISA_SPEC_CLASS_NONE, 1, 0},\n \n+  {\"zfh\",       ISA_SPEC_CLASS_NONE, 1, 0},\n+  {\"zfhmin\",    ISA_SPEC_CLASS_NONE, 1, 0},\n+\n   /* Terminate the list.  */\n   {NULL, ISA_SPEC_CLASS_NONE, 0, 0}\n };\n@@ -1148,6 +1154,8 @@ static const riscv_ext_flag_table_t riscv_ext_flag_table[] =\n   {\"zvl32768b\", &gcc_options::x_riscv_zvl_flags, MASK_ZVL32768B},\n   {\"zvl65536b\", &gcc_options::x_riscv_zvl_flags, MASK_ZVL65536B},\n \n+  {\"zfhmin\",    &gcc_options::x_riscv_zf_subext, MASK_ZFHMIN},\n+  {\"zfh\",       &gcc_options::x_riscv_zf_subext, MASK_ZFH},\n \n   {NULL, NULL, 0}\n };"}, {"sha": "85e869e62e3ad16d82deb20248828290f3ef74cd", "filename": "gcc/config/riscv/riscv-opts.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Fconfig%2Friscv%2Friscv-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Fconfig%2Friscv%2Friscv-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-opts.h?ref=bd159a7660bf1cac2b884ffbf6667bb64189017f", "patch": "@@ -153,6 +153,12 @@ enum stack_protector_guard {\n #define TARGET_ZICBOM ((riscv_zicmo_subext & MASK_ZICBOM) != 0)\n #define TARGET_ZICBOP ((riscv_zicmo_subext & MASK_ZICBOP) != 0)\n \n+#define MASK_ZFHMIN   (1 << 0)\n+#define MASK_ZFH      (1 << 1)\n+\n+#define TARGET_ZFHMIN ((riscv_zf_subext & MASK_ZFHMIN) != 0)\n+#define TARGET_ZFH    ((riscv_zf_subext & MASK_ZFH) != 0)\n+\n /* Bit of riscv_zvl_flags will set contintuly, N-1 bit will set if N-bit is\n    set, e.g. MASK_ZVL64B has set then MASK_ZVL32B is set, so we can use\n    popcount to caclulate the minimal VLEN.  */"}, {"sha": "9d70974c893f2d189ca326296f56d0aea9f19eda", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=bd159a7660bf1cac2b884ffbf6667bb64189017f", "patch": "@@ -2313,6 +2313,8 @@ riscv_output_move (rtx dest, rtx src)\n \tswitch (width)\n \t  {\n \t  case 2:\n+\t    if (TARGET_ZFHMIN)\n+\t      return \"fmv.x.h\\t%0,%1\";\n \t    /* Using fmv.x.s + sign-extend to emulate fmv.x.h.  */\n \t    return \"fmv.x.s\\t%0,%1;slli\\t%0,%0,16;srai\\t%0,%0,16\";\n \t  case 4:\n@@ -2367,6 +2369,8 @@ riscv_output_move (rtx dest, rtx src)\n \t    switch (width)\n \t      {\n \t      case 2:\n+\t\tif (TARGET_ZFHMIN)\n+\t\t  return \"fmv.h.x\\t%0,%z1\";\n \t\t/* High 16 bits should be all-1, otherwise HW will treated\n \t\t   as a n-bit canonical NaN, but isn't matter for softfloat.  */\n \t\treturn \"fmv.s.x\\t%0,%1\";\n@@ -2395,6 +2399,8 @@ riscv_output_move (rtx dest, rtx src)\n \tswitch (width)\n \t  {\n \t  case 2:\n+\t    if (TARGET_ZFH)\n+\t      return \"fmv.h\\t%0,%1\";\n \t    return \"fmv.s\\t%0,%1\";\n \t  case 4:\n \t    return \"fmv.s\\t%0,%1\";\n@@ -2403,12 +2409,28 @@ riscv_output_move (rtx dest, rtx src)\n \t  }\n \n       if (dest_code == MEM)\n-\treturn dbl_p ? \"fsd\\t%1,%0\" : \"fsw\\t%1,%0\";\n+\tswitch (width)\n+\t  {\n+\t  case 2:\n+\t    return \"fsh\\t%1,%0\";\n+\t  case 4:\n+\t    return \"fsw\\t%1,%0\";\n+\t  case 8:\n+\t    return \"fsd\\t%1,%0\";\n+\t  }\n     }\n   if (dest_code == REG && FP_REG_P (REGNO (dest)))\n     {\n       if (src_code == MEM)\n-\treturn dbl_p ? \"fld\\t%0,%1\" : \"flw\\t%0,%1\";\n+\tswitch (width)\n+\t  {\n+\t  case 2:\n+\t    return \"flh\\t%0,%1\";\n+\t  case 4:\n+\t    return \"flw\\t%0,%1\";\n+\t  case 8:\n+\t    return \"fld\\t%0,%1\";\n+\t  }\n     }\n   gcc_unreachable ();\n }\n@@ -2685,6 +2707,10 @@ riscv_emit_float_compare (enum rtx_code *code, rtx *op0, rtx *op1)\n \temit_insn (gen_f##CMP##_quietdfdi4 (*op0, cmp_op0, cmp_op1));\t\\\n       else if (GET_MODE (cmp_op0) == DFmode)\t\t\t\t\\\n \temit_insn (gen_f##CMP##_quietdfsi4 (*op0, cmp_op0, cmp_op1));\t\\\n+      else if (GET_MODE (cmp_op0) == HFmode && TARGET_64BIT)\t\t\\\n+\temit_insn (gen_f##CMP##_quiethfdi4 (*op0, cmp_op0, cmp_op1));\t\\\n+      else if (GET_MODE (cmp_op0) == HFmode)\t\t\t\t\\\n+\temit_insn (gen_f##CMP##_quiethfsi4 (*op0, cmp_op0, cmp_op1));\t\\\n       else\t\t\t\t\t\t\t\t\\\n \tgcc_unreachable ();\t\t\t\t\t\t\\\n       *op1 = const0_rtx;\t\t\t\t\t\t\\\n@@ -5722,7 +5748,8 @@ riscv_excess_precision (enum excess_precision_type type)\n     {\n     case EXCESS_PRECISION_TYPE_FAST:\n     case EXCESS_PRECISION_TYPE_STANDARD:\n-      return FLT_EVAL_METHOD_PROMOTE_TO_FLOAT;\n+      return (TARGET_ZFH ? FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16\n+\t\t\t : FLT_EVAL_METHOD_PROMOTE_TO_FLOAT);\n     case EXCESS_PRECISION_TYPE_IMPLICIT:\n       return FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16;\n     default:"}, {"sha": "493f00cdb80bf609528967dc5d7312568c9b66da", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 53, "deletions": 6, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=bd159a7660bf1cac2b884ffbf6667bb64189017f", "patch": "@@ -307,17 +307,18 @@\n \n ;; Iterator for hardware-supported floating-point modes.\n (define_mode_iterator ANYF [(SF \"TARGET_HARD_FLOAT\")\n-\t\t\t    (DF \"TARGET_DOUBLE_FLOAT\")])\n+\t\t\t    (DF \"TARGET_DOUBLE_FLOAT\")\n+\t\t\t    (HF \"TARGET_ZFH\")])\n \n ;; Iterator for floating-point modes that can be loaded into X registers.\n-(define_mode_iterator SOFTF [SF (DF \"TARGET_64BIT\")])\n+(define_mode_iterator SOFTF [SF (DF \"TARGET_64BIT\") (HF \"TARGET_ZFHMIN\")])\n \n ;; This attribute gives the length suffix for a sign- or zero-extension\n ;; instruction.\n (define_mode_attr size [(QI \"b\") (HI \"h\")])\n \n ;; Mode attributes for loads.\n-(define_mode_attr load [(QI \"lb\") (HI \"lh\") (SI \"lw\") (DI \"ld\") (SF \"flw\") (DF \"fld\")])\n+(define_mode_attr load [(QI \"lb\") (HI \"lh\") (SI \"lw\") (DI \"ld\") (HF \"flh\") (SF \"flw\") (DF \"fld\")])\n \n ;; Instruction names for integer loads that aren't explicitly sign or zero\n ;; extended.  See riscv_output_move and LOAD_EXTEND_OP.\n@@ -327,7 +328,7 @@\n (define_mode_attr softload [(HF \"lh\") (SF \"lw\") (DF \"ld\")])\n \n ;; Instruction names for stores.\n-(define_mode_attr store [(QI \"sb\") (HI \"sh\") (SI \"sw\") (DI \"sd\") (SF \"fsw\") (DF \"fsd\")])\n+(define_mode_attr store [(QI \"sb\") (HI \"sh\") (SI \"sw\") (DI \"sd\") (HF \"fsh\") (SF \"fsw\") (DF \"fsd\")])\n \n ;; Instruction names for FP stores from integer registers.\n (define_mode_attr softstore [(HF \"sh\") (SF \"sw\") (DF \"sd\")])\n@@ -1324,6 +1325,24 @@\n   [(set_attr \"type\" \"fcvt\")\n    (set_attr \"mode\" \"SF\")])\n \n+(define_insn \"truncsfhf2\"\n+  [(set (match_operand:HF     0 \"register_operand\" \"=f\")\n+       (float_truncate:HF\n+           (match_operand:SF 1 \"register_operand\" \" f\")))]\n+  \"TARGET_ZFHMIN\"\n+  \"fcvt.h.s\\t%0,%1\"\n+  [(set_attr \"type\" \"fcvt\")\n+   (set_attr \"mode\" \"HF\")])\n+\n+(define_insn \"truncdfhf2\"\n+  [(set (match_operand:HF     0 \"register_operand\" \"=f\")\n+       (float_truncate:HF\n+           (match_operand:DF 1 \"register_operand\" \" f\")))]\n+  \"TARGET_ZFHMIN && TARGET_DOUBLE_FLOAT\"\n+  \"fcvt.h.d\\t%0,%1\"\n+  [(set_attr \"type\" \"fcvt\")\n+   (set_attr \"mode\" \"HF\")])\n+\n ;;\n ;;  ....................\n ;;\n@@ -1441,6 +1460,15 @@\n   [(set_attr \"move_type\" \"shift_shift,load\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"extendhfsf2\"\n+  [(set (match_operand:SF     0 \"register_operand\" \"=f\")\n+       (float_extend:SF\n+           (match_operand:HF 1 \"register_operand\" \" f\")))]\n+  \"TARGET_ZFHMIN\"\n+  \"fcvt.s.h\\t%0,%1\"\n+  [(set_attr \"type\" \"fcvt\")\n+   (set_attr \"mode\" \"SF\")])\n+\n (define_insn \"extendsfdf2\"\n   [(set (match_operand:DF     0 \"register_operand\" \"=f\")\n \t(float_extend:DF\n@@ -1450,6 +1478,15 @@\n   [(set_attr \"type\" \"fcvt\")\n    (set_attr \"mode\" \"DF\")])\n \n+(define_insn \"extendhfdf2\"\n+  [(set (match_operand:DF     0 \"register_operand\" \"=f\")\n+       (float_extend:DF\n+           (match_operand:HF 1 \"register_operand\" \" f\")))]\n+  \"TARGET_ZFHMIN && TARGET_DOUBLE_FLOAT\"\n+  \"fcvt.d.h\\t%0,%1\"\n+  [(set_attr \"type\" \"fcvt\")\n+   (set_attr \"mode\" \"DF\")])\n+\n ;; 16-bit floating point moves\n (define_expand \"movhf\"\n   [(set (match_operand:HF 0 \"\")\n@@ -1460,12 +1497,22 @@\n     DONE;\n })\n \n+(define_insn \"*movhf_hardfloat\"\n+  [(set (match_operand:HF 0 \"nonimmediate_operand\" \"=f,f,f,m,m,*f,*r,  *r,*r,*m\")\n+\t(match_operand:HF 1 \"move_operand\"         \" f,G,m,f,G,*r,*f,*G*r,*m,*r\"))]\n+  \"TARGET_ZFHMIN\n+   && (register_operand (operands[0], HFmode)\n+       || reg_or_0_operand (operands[1], HFmode))\"\n+  { return riscv_output_move (operands[0], operands[1]); }\n+  [(set_attr \"move_type\" \"fmove,mtc,fpload,fpstore,store,mtc,mfc,move,load,store\")\n+   (set_attr \"mode\" \"HF\")])\n \n (define_insn \"*movhf_softfloat\"\n   [(set (match_operand:HF 0 \"nonimmediate_operand\" \"=f, r,r,m,*f,*r\")\n \t(match_operand:HF 1 \"move_operand\"         \" f,Gr,m,r,*r,*f\"))]\n-  \"(register_operand (operands[0], HFmode)\n-    || reg_or_0_operand (operands[1], HFmode))\"\n+  \"!TARGET_ZFHMIN\n+   && (register_operand (operands[0], HFmode)\n+       || reg_or_0_operand (operands[1], HFmode))\"\n   { return riscv_output_move (operands[0], operands[1]); }\n   [(set_attr \"move_type\" \"fmove,move,load,store,mtc,mfc\")\n    (set_attr \"mode\" \"HF\")])"}, {"sha": "fbca91b956c60643564e8ae33d67477904a41a98", "filename": "gcc/config/riscv/riscv.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Fconfig%2Friscv%2Friscv.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Fconfig%2Friscv%2Friscv.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.opt?ref=bd159a7660bf1cac2b884ffbf6667bb64189017f", "patch": "@@ -212,6 +212,9 @@ int riscv_zvl_flags\n TargetVariable\n int riscv_zicmo_subext\n \n+TargetVariable\n+int riscv_zf_subext\n+\n Enum\n Name(isa_spec_class) Type(enum riscv_isa_spec_class)\n Supported ISA specs (for use with the -misa-spec= option):"}, {"sha": "98908dccbb381d19e6d0db83dd3508e5c671e02e", "filename": "gcc/testsuite/gcc.target/riscv/_Float16-zfh-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zfh-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zfh-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zfh-1.c?ref=bd159a7660bf1cac2b884ffbf6667bb64189017f", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64if_zfh -mabi=lp64f -O\" } */\n+\n+_Float16 foo1 (_Float16 a, _Float16 b)\n+{\n+    /* { dg-final { scan-assembler-times \"fmv.h\" 1 } } */\n+    return b;\n+}"}, {"sha": "58bfa6b419856872da7a1b3f9cd34453c285b2e2", "filename": "gcc/testsuite/gcc.target/riscv/_Float16-zfh-2.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zfh-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zfh-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zfh-2.c?ref=bd159a7660bf1cac2b884ffbf6667bb64189017f", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64if_zfh -mabi=lp64f -O\" } */\n+\n+_Float16 foo1 (_Float16 a, _Float16 b)\n+{\n+    /* { dg-final { scan-assembler-times \"fadd.h\" 1 } } */\n+    return a + b;\n+}"}, {"sha": "128b4e53f27cb16568e3b130fe1622b5384cb3a8", "filename": "gcc/testsuite/gcc.target/riscv/_Float16-zfh-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zfh-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zfh-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zfh-3.c?ref=bd159a7660bf1cac2b884ffbf6667bb64189017f", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64if_zfh -mabi=lp64f -O\" } */\n+\n+int foo1 (_Float16 a, _Float16 b)\n+{\n+    /* { dg-final { scan-assembler-times \"fgt.h\" 1 } } */\n+    return a > b;\n+}"}, {"sha": "631a049f52f5d12bf510e97823d8e65651631cbb", "filename": "gcc/testsuite/gcc.target/riscv/_Float16-zfhmin-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zfhmin-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zfhmin-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zfhmin-1.c?ref=bd159a7660bf1cac2b884ffbf6667bb64189017f", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64if_zfhmin -mabi=lp64f -O\" } */\n+\n+_Float16 foo1 (_Float16 a, _Float16 b)\n+{\n+    /* { dg-final { scan-assembler-not \"fmv.h\" } } */\n+    /* { dg-final { scan-assembler-times \"fmv.s\" 1 } } */\n+    return b;\n+}"}, {"sha": "06c85eb797deec87b0ff2595adbbd8916cb77efd", "filename": "gcc/testsuite/gcc.target/riscv/_Float16-zfhmin-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zfhmin-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zfhmin-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zfhmin-2.c?ref=bd159a7660bf1cac2b884ffbf6667bb64189017f", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64if_zfhmin -mabi=lp64f -O\" } */\n+\n+_Float16 foo1 (_Float16 a, _Float16 b)\n+{\n+    /* { dg-final { scan-assembler-not \"fadd.h\" } } */\n+    /* { dg-final { scan-assembler-times \"fadd.s\" 1 } } */\n+    return a + b;\n+}"}, {"sha": "28960d602458bc7b826bd688cc04063800d7b218", "filename": "gcc/testsuite/gcc.target/riscv/_Float16-zfhmin-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zfhmin-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zfhmin-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2F_Float16-zfhmin-3.c?ref=bd159a7660bf1cac2b884ffbf6667bb64189017f", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64if_zfhmin -mabi=lp64f -O\" } */\n+\n+int foo1 (_Float16 a, _Float16 b)\n+{\n+    /* { dg-final { scan-assembler-not \"fgt.h\" } } */\n+    /* { dg-final { scan-assembler-times \"fgt.s\" 1 } } */\n+    return a > b;\n+}"}, {"sha": "14b40ae9a5aa73d6ab1f8990fbac475767e29a28", "filename": "gcc/testsuite/gcc.target/riscv/arch-16.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-16.c?ref=bd159a7660bf1cac2b884ffbf6667bb64189017f", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv32gcv_zfh -mabi=ilp32 -mcmodel=medlow\" } */\n+int foo()\n+{\n+}"}, {"sha": "3d3275e44a57ae52fe45378926d579f4a08e11b3", "filename": "gcc/testsuite/gcc.target/riscv/arch-17.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Farch-17.c?ref=bd159a7660bf1cac2b884ffbf6667bb64189017f", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv32gcv_zfhmin -mabi=ilp32 -mcmodel=medlow\" } */\n+int foo()\n+{\n+}"}, {"sha": "a171b3b83af42cd5a0905834c30c0194de650003", "filename": "gcc/testsuite/gcc.target/riscv/predef-21.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-21.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-21.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-21.c?ref=bd159a7660bf1cac2b884ffbf6667bb64189017f", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv64i_zfh -mabi=lp64f -mcmodel=medlow -misa-spec=20191213\" } */\n+\n+int main () {\n+\n+#ifndef __riscv_arch_test\n+#error \"__riscv_arch_test\"\n+#endif\n+\n+#if __riscv_xlen != 64\n+#error \"__riscv_xlen\"\n+#endif\n+\n+#if !defined(__riscv_i)\n+#error \"__riscv_i\"\n+#endif\n+\n+#if defined(__riscv_c)\n+#error \"__riscv_c\"\n+#endif\n+\n+#if defined(__riscv_e)\n+#error \"__riscv_e\"\n+#endif\n+\n+#if defined(__riscv_a)\n+#error \"__riscv_a\"\n+#endif\n+\n+#if defined(__riscv_m)\n+#error \"__riscv_m\"\n+#endif\n+\n+#if !defined(__riscv_f)\n+#error \"__riscv_f\"\n+#endif\n+\n+#if defined(__riscv_d)\n+#error \"__riscv_d\"\n+#endif\n+\n+#if defined(__riscv_v)\n+#error \"__riscv_v\"\n+#endif\n+\n+#if !defined(__riscv_zfh)\n+#error \"__riscv_zfh\"\n+#endif\n+\n+#if !defined(__riscv_zfhmin)\n+#error \"__riscv_zfhmin\"\n+#endif\n+\n+#if !defined(__riscv_zicsr)\n+#error \"__riscv_zicsr\"\n+#endif\n+\n+  return 0;\n+}"}, {"sha": "ad1896573cedbef651ee3eaaa4a59804fba75884", "filename": "gcc/testsuite/gcc.target/riscv/predef-22.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd159a7660bf1cac2b884ffbf6667bb64189017f/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fpredef-22.c?ref=bd159a7660bf1cac2b884ffbf6667bb64189017f", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv64i_zfhmin -mabi=lp64f -mcmodel=medlow -misa-spec=20191213\" } */\n+\n+int main () {\n+\n+#ifndef __riscv_arch_test\n+#error \"__riscv_arch_test\"\n+#endif\n+\n+#if __riscv_xlen != 64\n+#error \"__riscv_xlen\"\n+#endif\n+\n+#if !defined(__riscv_i)\n+#error \"__riscv_i\"\n+#endif\n+\n+#if defined(__riscv_c)\n+#error \"__riscv_c\"\n+#endif\n+\n+#if defined(__riscv_e)\n+#error \"__riscv_e\"\n+#endif\n+\n+#if defined(__riscv_a)\n+#error \"__riscv_a\"\n+#endif\n+\n+#if defined(__riscv_m)\n+#error \"__riscv_m\"\n+#endif\n+\n+#if !defined(__riscv_f)\n+#error \"__riscv_f\"\n+#endif\n+\n+#if defined(__riscv_d)\n+#error \"__riscv_d\"\n+#endif\n+\n+#if defined(__riscv_v)\n+#error \"__riscv_v\"\n+#endif\n+\n+#if defined(__riscv_zfh)\n+#error \"__riscv_zfh\"\n+#endif\n+\n+#if !defined(__riscv_zfhmin)\n+#error \"__riscv_zfhmin\"\n+#endif\n+\n+#if !defined(__riscv_zicsr)\n+#error \"__riscv_zicsr\"\n+#endif\n+\n+  return 0;\n+}"}]}