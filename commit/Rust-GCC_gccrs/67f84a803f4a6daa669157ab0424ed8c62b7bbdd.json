{"sha": "67f84a803f4a6daa669157ab0424ed8c62b7bbdd", "node_id": "C_kwDOANBUbNoAKDY3Zjg0YTgwM2Y0YTZkYWE2NjkxNTdhYjA0MjRlZDhjNjJiN2JiZGQ", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-18T13:24:21Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-01-18T16:25:36Z"}, "message": "nds32: fix -Wformat-diag warning.\n\ngcc/ChangeLog:\n\n\t* config/nds32/nds32-intrinsic.cc (nds32_expand_builtin_impl):\n\tFix warnings.\n\t* config/nds32/nds32-intrinsic.md: Likewise.\n\t* config/nds32/nds32-isr.cc (nds32_check_isr_attrs_conflict): Likewise.\n\t* config/nds32/nds32.cc (nds32_print_operand): Likewise.\n\t(nds32_insert_attributes): Likewise.", "tree": {"sha": "139c04cc7a867386eba3b960ab12d0da062a0612", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/139c04cc7a867386eba3b960ab12d0da062a0612"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67f84a803f4a6daa669157ab0424ed8c62b7bbdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f84a803f4a6daa669157ab0424ed8c62b7bbdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67f84a803f4a6daa669157ab0424ed8c62b7bbdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67f84a803f4a6daa669157ab0424ed8c62b7bbdd/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1f3640912a050d1c405d01f909074659db92c7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1f3640912a050d1c405d01f909074659db92c7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1f3640912a050d1c405d01f909074659db92c7b"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "2f2cd7c791ea435b6c77e1cd45e9b2ca072d056e", "filename": "gcc/config/nds32/nds32-intrinsic.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f84a803f4a6daa669157ab0424ed8c62b7bbdd/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f84a803f4a6daa669157ab0424ed8c62b7bbdd/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.cc?ref=67f84a803f4a6daa669157ab0424ed8c62b7bbdd", "patch": "@@ -1013,7 +1013,7 @@ nds32_expand_builtin_impl (tree exp,\n       /* Both v3s and v3f toolchains define TARGET_FPU_SINGLE.  */\n       if (!TARGET_FPU_SINGLE)\n \t{\n-\t  error (\"this builtin function is only available \"\n+\t  error (\"this built-in function is only available \"\n \t\t \"on the v3s or v3f toolchain\");\n \t  return NULL_RTX;\n \t}\n@@ -1025,7 +1025,7 @@ nds32_expand_builtin_impl (tree exp,\n       /* Only v3f toolchain defines TARGET_FPU_DOUBLE.  */\n       if (!TARGET_FPU_DOUBLE)\n \t{\n-\t  error (\"this builtin function is only available \"\n+\t  error (\"this built-in function is only available \"\n \t\t \"on the v3f toolchain\");\n \t  return NULL_RTX;\n \t}\n@@ -1040,7 +1040,7 @@ nds32_expand_builtin_impl (tree exp,\n     case NDS32_BUILTIN_SBUP:\n       if (TARGET_ISA_V3M)\n \t{\n-\t  error (\"this builtin function not support \"\n+\t  error (\"this built-in function not support \"\n \t\t \"on the v3m toolchain\");\n \t  return NULL_RTX;\n \t}"}, {"sha": "d7229cdbaa9fceb0a99b843a2a08e7224305cfb0", "filename": "gcc/config/nds32/nds32-intrinsic.md", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f84a803f4a6daa669157ab0424ed8c62b7bbdd/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f84a803f4a6daa669157ab0424ed8c62b7bbdd/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-intrinsic.md?ref=67f84a803f4a6daa669157ab0424ed8c62b7bbdd", "patch": "@@ -301,8 +301,8 @@\n       offset = 32;\n     }\n   else\n-    error (\"__nds32__clr_pending_hwint not support NDS32_INT_SWI,\"\n-\t   \" NDS32_INT_ALZ, NDS32_INT_IDIVZE, NDS32_INT_DSSIM\");\n+    error (\"%<__nds32__clr_pending_hwint%> not support %<NDS32_INT_SWI%>,\"\n+\t   \" %<NDS32_INT_ALZ%>, %<NDS32_INT_IDIVZE%>, %<NDS32_INT_DSSIM%>\");\n \n   /* $INT_PEND type is write one clear.  */\n   clr_hwint = GEN_INT (1 << (INTVAL (operands[0]) - offset));\n@@ -359,8 +359,8 @@\n       operands[2] = GEN_INT (31 - (INTVAL (operands[1]) - 32));\n     }\n   else\n-    error (\"get_pending_int not support NDS32_INT_ALZ,\"\n-\t   \" NDS32_INT_IDIVZE, NDS32_INT_DSSIM\");\n+    error (\"%<get_pending_int%> not support %<NDS32_INT_ALZ%>,\"\n+\t   \" %<NDS32_INT_IDIVZE%>, %<NDS32_INT_DSSIM%>\");\n \n   /* mfsr op0, sytem_reg  */\n   if (system_reg != NULL_RTX)\n@@ -417,8 +417,8 @@\n       offset = 48;\n     }\n   else\n-    error (\"set_int_priority not support NDS32_INT_SWI,\"\n-\t   \" NDS32_INT_ALZ, NDS32_INT_IDIVZE, NDS32_INT_DSSIM\");\n+    error (\"i%<set_int_priority%> not support %<NDS32_INT_SWI%>,\"\n+\t   \" %<NDS32_INT_ALZ%>, %<NDS32_INT_IDIVZE%>, %<NDS32_INT_DSSIM%>\");\n \n   mask = GEN_INT (~(3 << 2 * (INTVAL (operands[0]) - offset)));\n   priority = GEN_INT ((int) (INTVAL (operands[1])\n@@ -477,8 +477,8 @@\n       offset = 48;\n     }\n   else\n-    error (\"set_int_priority not support NDS32_INT_SWI,\"\n-\t   \" NDS32_INT_ALZ, NDS32_INT_IDIVZE, NDS32_INT_DSSIM\");\n+    error (\"%<set_int_priority%> not support %<NDS32_INT_SWI%>,\"\n+\t   \" %<NDS32_INT_ALZ%>, %<NDS32_INT_IDIVZE%>, %<NDS32_INT_DSSIM%>\");\n \n   priority = GEN_INT (31 - 2 * (INTVAL (operands[1]) - offset));\n \n@@ -514,8 +514,8 @@\n       offset = 32;\n     }\n   else\n-    error (\"__nds32__set_trig_type_level not support NDS32_INT_SWI,\"\n-\t   \" NDS32_INT_ALZ, NDS32_INT_IDIVZE, NDS32_INT_DSSIM\");\n+    error (\"%<__nds32__set_trig_type_level%> not support %<NDS32_INT_SWI%>,\"\n+\t   \" %<NDS32_INT_ALZ%>, %<NDS32_INT_IDIVZE%>, %<NDS32_INT_DSSIM%>\");\n \n   if (system_reg != NULL_RTX)\n     {\n@@ -551,8 +551,8 @@\n       offset = 32;\n     }\n   else\n-    error (\"__nds32__set_trig_type_edge not support NDS32_INT_SWI,\"\n-\t   \" NDS32_INT_ALZ, NDS32_INT_IDIVZE, NDS32_INT_DSSIM\");\n+    error (\"%<__nds32__set_trig_type_edge%> not support %<NDS32_INT_SWI%>,\"\n+\t   \" %<NDS32_INT_ALZ%>, %<NDS32_INT_IDIVZE%>, %<NDS32_INT_DSSIM%>\");\n \n   if (system_reg != NULL_RTX)\n     {\n@@ -588,8 +588,8 @@\n       offset = 32;\n     }\n   else\n-    error (\"__nds32__get_trig_type not support NDS32_INT_SWI,\"\n-\t   \" NDS32_INT_ALZ, NDS32_INT_IDIVZE, NDS32_INT_DSSIM\");\n+    error (\"%<__nds32__get_trig_type%> not support %<NDS32_INT_SWI%>,\"\n+\t   \" %<NDS32_INT_ALZ%>, %<NDS32_INT_IDIVZE%>, %<NDS32_INT_DSSIM%>\");\n \n   if (system_reg != NULL_RTX)\n     {"}, {"sha": "eef2d862bd02f3d0a9fda2208e4aa21657990497", "filename": "gcc/config/nds32/nds32-isr.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f84a803f4a6daa669157ab0424ed8c62b7bbdd/gcc%2Fconfig%2Fnds32%2Fnds32-isr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f84a803f4a6daa669157ab0424ed8c62b7bbdd/gcc%2Fconfig%2Fnds32%2Fnds32-isr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-isr.cc?ref=67f84a803f4a6daa669157ab0424ed8c62b7bbdd", "patch": "@@ -614,7 +614,7 @@ nds32_check_isr_attrs_conflict (tree func_decl, tree func_attrs)\n     partial_save_p = 1;\n \n   if ((save_all_p + partial_save_p) > 1)\n-    error (\"multiple save reg attributes to function %qD\", func_decl);\n+    error (\"multiple save register attributes to function %qD\", func_decl);\n \n   /* We must check at MOST one attribute to set nested-type.  */\n   if (lookup_attribute (\"nested\", func_attrs))"}, {"sha": "71fe9e8bcd69c8efaf913e2aa910c64005be3ae2", "filename": "gcc/config/nds32/nds32.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67f84a803f4a6daa669157ab0424ed8c62b7bbdd/gcc%2Fconfig%2Fnds32%2Fnds32.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67f84a803f4a6daa669157ab0424ed8c62b7bbdd/gcc%2Fconfig%2Fnds32%2Fnds32.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.cc?ref=67f84a803f4a6daa669157ab0424ed8c62b7bbdd", "patch": "@@ -3476,35 +3476,35 @@ nds32_print_operand (FILE *stream, rtx x, int code)\n     case 'R': /* cctl valck  */\n       /* Note the cctl divide to 5 group and share the same name table.  */\n       if (op_value < 0 || op_value > 4)\n-\terror (\"CCTL intrinsic function subtype out of range!\");\n+\terror (\"CCTL intrinsic function subtype out of range\");\n       fprintf (stream, \"%s\", nds32_cctl_names[op_value]);\n       return;\n \n     case 'T': /* cctl idxwbinv  */\n       /* Note the cctl divide to 5 group and share the same name table.  */\n       if (op_value < 0 || op_value > 4)\n-\terror (\"CCTL intrinsic function subtype out of range!\");\n+\terror (\"CCTL intrinsic function subtype out of range\");\n       fprintf (stream, \"%s\", nds32_cctl_names[op_value + 4]);\n       return;\n \n     case 'U': /* cctl vawbinv  */\n       /* Note the cctl divide to 5 group and share the same name table.  */\n       if (op_value < 0 || op_value > 4)\n-\terror (\"CCTL intrinsic function subtype out of range!\");\n+\terror (\"CCTL intrinsic function subtype out of range\");\n       fprintf (stream, \"%s\", nds32_cctl_names[op_value + 8]);\n       return;\n \n     case 'X': /* cctl idxread  */\n       /* Note the cctl divide to 5 group and share the same name table.  */\n       if (op_value < 0 || op_value > 4)\n-\terror (\"CCTL intrinsic function subtype out of range!\");\n+\terror (\"CCTL intrinsic function subtype out of range\");\n       fprintf (stream, \"%s\", nds32_cctl_names[op_value + 12]);\n       return;\n \n     case 'W': /* cctl idxwitre  */\n       /* Note the cctl divide to 5 group and share the same name table.  */\n       if (op_value < 0 || op_value > 4)\n-\terror (\"CCTL intrinsic function subtype out of range!\");\n+\terror (\"CCTL intrinsic function subtype out of range\");\n       fprintf (stream, \"%s\", nds32_cctl_names[op_value + 16]);\n       return;\n \n@@ -3941,15 +3941,15 @@ nds32_insert_attributes (tree decl, tree *attributes)\n       tree new_attrs = *attributes;\n \n       if (TARGET_LINUX_ABI)\n-\terror(\"cannot use indirect_call attribute under linux toolchain\");\n+\terror (\"cannot use %<indirect_call%> attribute under linux toolchain\");\n \n       if (lookup_attribute (\"noinline\", new_attrs) == NULL)\n \tnew_attrs = tree_cons (get_identifier (\"noinline\"), NULL, new_attrs);\n       if (lookup_attribute (\"noclone\", new_attrs) == NULL)\n \tnew_attrs = tree_cons (get_identifier (\"noclone\"), NULL, new_attrs);\n \n       if (!TREE_PUBLIC (decl))\n-\terror (\"indirect_call attribute can%'t apply for static function\");\n+\terror (\"%<indirect_call%> attribute cannot apply for static function\");\n \n       *attributes = new_attrs;\n     }"}]}