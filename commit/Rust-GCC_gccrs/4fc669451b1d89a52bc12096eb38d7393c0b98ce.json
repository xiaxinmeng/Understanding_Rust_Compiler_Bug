{"sha": "4fc669451b1d89a52bc12096eb38d7393c0b98ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZjNjY5NDUxYjFkODlhNTJiYzEyMDk2ZWIzOGQ3MzkzYzBiOThjZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-07-04T16:26:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-07-04T16:26:53Z"}, "message": "tree-ssa.c (useless_type_conversion_p): Add handling for scalar float and vector types.\n\n2007-07-04  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa.c (useless_type_conversion_p): Add handling for\n\tscalar float and vector types.  Only call the types_compatible_p\n\tlanghook for aggregate types as last resort.  Follow the\n\trules.\n\nFrom-SVN: r126326", "tree": {"sha": "79ba821ded023f496e32c6557d2cc237570ca3e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79ba821ded023f496e32c6557d2cc237570ca3e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fc669451b1d89a52bc12096eb38d7393c0b98ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fc669451b1d89a52bc12096eb38d7393c0b98ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fc669451b1d89a52bc12096eb38d7393c0b98ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fc669451b1d89a52bc12096eb38d7393c0b98ce/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5cda34b18aa246fd4214db0f96453a29a23a5482", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cda34b18aa246fd4214db0f96453a29a23a5482", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cda34b18aa246fd4214db0f96453a29a23a5482"}], "stats": {"total": 101, "additions": 75, "deletions": 26}, "files": [{"sha": "b4ef5bed58ee61310c400b40312862c92e1c4254", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fc669451b1d89a52bc12096eb38d7393c0b98ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fc669451b1d89a52bc12096eb38d7393c0b98ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4fc669451b1d89a52bc12096eb38d7393c0b98ce", "patch": "@@ -1,3 +1,10 @@\n+2007-07-04  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa.c (useless_type_conversion_p): Add handling for\n+\tscalar float and vector types.  Only call the types_compatible_p\n+\tlanghook for aggregate types as last resort.  Follow the\n+\trules.\n+\n 2007-07-04  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-inline.c (estimate_num_insns_1): Treat CONVERT_EXPR"}, {"sha": "005d3fdcbdd26ff35c0d7773e95ed4d85e47989e", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 68, "deletions": 26, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fc669451b1d89a52bc12096eb38d7393c0b98ce/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fc669451b1d89a52bc12096eb38d7393c0b98ce/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=4fc669451b1d89a52bc12096eb38d7393c0b98ce", "patch": "@@ -908,13 +908,15 @@ delete_tree_ssa (void)\n \tbe dereferenced or offsetted, but copied, hence its set of operations\n \tis a strict subset of that of all other data pointer types).  Casts\n \tto const T* are useless (can't be written to), casts from const T*\n-\tto T* are not.\n-\n-   ???  The above do not hold currently.  */\n+\tto T* are not.  */\n \n bool\n useless_type_conversion_p (tree outer_type, tree inner_type)\n {\n+  /* Qualifiers on value types do not matter.  */\n+  inner_type = TYPE_MAIN_VARIANT (inner_type);\n+  outer_type = TYPE_MAIN_VARIANT (outer_type);\n+\n   if (inner_type == outer_type)\n     return true;\n \n@@ -951,43 +953,58 @@ useless_type_conversion_p (tree outer_type, tree inner_type)\n \t\t\t\t  TYPE_MAX_VALUE (outer_type)))\n \treturn false;\n \n-      /* ???  We might want to preserve base type changes because of\n-\t TBAA.  Or we need to be extra careful below.  */\n-\n       return true;\n     }\n \n+  /* Scalar floating point types with the same mode are compatible.  */\n+  else if (SCALAR_FLOAT_TYPE_P (inner_type)\n+\t   && SCALAR_FLOAT_TYPE_P (outer_type))\n+    return true;\n+\n   /* We need to take special care recursing to pointed-to types.  */\n   else if (POINTER_TYPE_P (inner_type)\n \t   && POINTER_TYPE_P (outer_type))\n     {\n+      /* If the outer type is (void *), then the conversion is not\n+\t necessary.  */\n+      if (TREE_CODE (TREE_TYPE (outer_type)) == VOID_TYPE)\n+\treturn true;\n+\n       /* Don't lose casts between pointers to volatile and non-volatile\n \t qualified types.  Doing so would result in changing the semantics\n \t of later accesses.  */\n-      if (TYPE_VOLATILE (TREE_TYPE (outer_type))\n-\t  != TYPE_VOLATILE (TREE_TYPE (inner_type)))\n+      if ((TYPE_VOLATILE (TREE_TYPE (outer_type))\n+\t   != TYPE_VOLATILE (TREE_TYPE (inner_type)))\n+\t  && TYPE_VOLATILE (TREE_TYPE (outer_type)))\n \treturn false;\n \n       /* Do not lose casts between pointers with different\n-\t TYPE_REF_CAN_ALIAS_ALL setting.  */\n-      if (TYPE_REF_CAN_ALIAS_ALL (inner_type)\n-\t  != TYPE_REF_CAN_ALIAS_ALL (outer_type))\n+\t TYPE_REF_CAN_ALIAS_ALL setting or alias sets.  */\n+      if ((TYPE_REF_CAN_ALIAS_ALL (inner_type)\n+\t   != TYPE_REF_CAN_ALIAS_ALL (outer_type))\n+\t  || (get_alias_set (TREE_TYPE (inner_type))\n+\t      != get_alias_set (TREE_TYPE (outer_type))))\n \treturn false;\n \n-      /* If the outer type is (void *), then the conversion is not\n-\t necessary.\n-\t ???  Together with calling the langhook below this makes\n-\t useless_type_conversion_p not transitive.  */\n-      if (TREE_CODE (TREE_TYPE (outer_type)) == VOID_TYPE)\n-\treturn true;\n+      /* Do not lose casts from const qualified to non-const\n+\t qualified.  */\n+      if ((TYPE_READONLY (TREE_TYPE (outer_type))\n+\t   != TYPE_READONLY (TREE_TYPE (inner_type)))\n+\t  && TYPE_READONLY (TREE_TYPE (inner_type)))\n+\treturn false;\n+\n+      /* Do not lose casts to restrict qualified pointers.  */\n+      if ((TYPE_RESTRICT (outer_type)\n+\t   != TYPE_RESTRICT (inner_type))\n+\t  && TYPE_RESTRICT (outer_type))\n+\treturn false;\n \n       /* Otherwise pointers/references are equivalent if their pointed\n-\t to types are effectively the same.  This allows to strip conversions\n-\t between pointer types with different type qualifiers.\n-\t ???  We should recurse here with\n-\t useless_type_conversion_p.  */\n-      return lang_hooks.types_compatible_p (TREE_TYPE (inner_type),\n-\t\t\t\t\t   TREE_TYPE (outer_type));\n+\t to types are effectively the same.  We can strip qualifiers\n+\t on pointed-to types for further comparsion, which is done in\n+\t the callee.  */\n+      return useless_type_conversion_p (TREE_TYPE (outer_type),\n+\t\t\t\t        TREE_TYPE (inner_type));\n     }\n \n   /* Recurse for complex types.  */\n@@ -996,9 +1013,34 @@ useless_type_conversion_p (tree outer_type, tree inner_type)\n     return useless_type_conversion_p (TREE_TYPE (outer_type),\n \t\t\t\t      TREE_TYPE (inner_type));\n \n-  /* Fall back to what the frontend thinks of type compatibility.\n-     ???  This should eventually just return false.  */\n-  return lang_hooks.types_compatible_p (inner_type, outer_type);\n+  /* Recurse for vector types with the same number of subparts.  */\n+  else if (TREE_CODE (inner_type) == VECTOR_TYPE\n+\t   && TREE_CODE (outer_type) == VECTOR_TYPE\n+\t   && TYPE_PRECISION (inner_type) == TYPE_PRECISION (outer_type))\n+    return useless_type_conversion_p (TREE_TYPE (outer_type),\n+\t\t\t\t      TREE_TYPE (inner_type));\n+\n+  /* For aggregates we may need to fall back to structural equality\n+     checks.  */\n+  else if (AGGREGATE_TYPE_P (inner_type)\n+\t   && AGGREGATE_TYPE_P (outer_type))\n+    {\n+      /* Different types of aggregates are incompatible.  */\n+      if (TREE_CODE (inner_type) != TREE_CODE (outer_type))\n+\treturn false;\n+\n+      /* If we know the canonical types, compare them.  */\n+      if (TYPE_CANONICAL (inner_type)\n+\t  && TYPE_CANONICAL (inner_type) == TYPE_CANONICAL (outer_type))\n+\treturn true;\n+\n+      /* ???  Add structural equivalence check.  */\n+\n+      /* ???  This should eventually just return false.  */\n+      return lang_hooks.types_compatible_p (inner_type, outer_type);\n+    }\n+\n+  return false;\n }\n \n /* Return true if a conversion from either type of TYPE1 and TYPE2"}]}