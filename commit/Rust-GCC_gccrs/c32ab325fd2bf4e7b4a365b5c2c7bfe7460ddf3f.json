{"sha": "c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMyYWIzMjVmZDJiZjRlN2I0YTM2NWI1YzJjN2JmZTc0NjBkZGYzZg==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2014-10-14T21:35:03Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2014-10-14T21:35:03Z"}, "message": "msp430-modes.def (PSI): Add.\n\n* config/msp430/msp430-modes.def (PSI): Add.\n\n* config/msp430/msp430-protos.h (msp430_hard_regno_nregs_has_padding): New.\n(msp430_hard_regno_nregs_with_padding): New.\n* config/msp430/msp430.c (msp430_scalar_mode_supported_p): New.\n(msp430_hard_regno_nregs_has_padding): New.\n(msp430_hard_regno_nregs_with_padding): New.\n(msp430_unwind_word_mode): Use PSImode instead of SImode.\n(msp430_addr_space_legitimate_address_p): New.\n(msp430_asm_integer): New.\n(msp430_init_dwarf_reg_sizes_extra): New.\n(msp430_print_operand): Use X suffix for PSImode even in small model.\n* config/msp430/msp430.h (POINTER_SIZE): Use 20 bits, not 32.\n(PTR_SIZE): ...but 4 bytes for EH.\n(SIZE_TYPE): Use __int20.\n(PTRDIFF_TYPE): Likewise.\n(INCOMING_FRAME_SP_OFFSET): Adjust.\n* config/msp430/msp430.md (movqi_topbyte): New.\n(movpsi): Use fixed suffixes.\n(movsipsi2): Enable for 430X, not large model.\n(extendhipsi2): Likewise.\n(zero_extendhisi2): Likewise.\n(zero_extendhisipsi2): Likewise.\n(extend_and_shift1_hipsi2): Likewise.\n(extendpsisi2): Likewise.\n(*bitbranch<mode>4_z): Fix suffix logic.\n\nFrom-SVN: r216225", "tree": {"sha": "d385108313d1c009a21e075def8a15fddf7ec264", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d385108313d1c009a21e075def8a15fddf7ec264"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f/comments", "author": null, "committer": null, "parents": [{"sha": "c84733360b2a78e24d2c59fb38c454010090769a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c84733360b2a78e24d2c59fb38c454010090769a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c84733360b2a78e24d2c59fb38c454010090769a"}], "stats": {"total": 188, "additions": 168, "deletions": 20}, "files": [{"sha": "830c12f25c13af22980a958f1a50614cd72215eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f", "patch": "@@ -1,3 +1,32 @@\n+2014-10-14  DJ Delorie  <dj@redhat.com>\n+\n+\t* config/msp430/msp430-modes.def (PSI): Add.\n+\n+\t* config/msp430/msp430-protos.h (msp430_hard_regno_nregs_has_padding): New.\n+\t(msp430_hard_regno_nregs_with_padding): New.\n+\t* config/msp430/msp430.c (msp430_scalar_mode_supported_p): New.\n+\t(msp430_hard_regno_nregs_has_padding): New.\n+\t(msp430_hard_regno_nregs_with_padding): New.\n+\t(msp430_unwind_word_mode): Use PSImode instead of SImode.\n+\t(msp430_addr_space_legitimate_address_p): New.\n+\t(msp430_asm_integer): New.\n+\t(msp430_init_dwarf_reg_sizes_extra): New.\n+\t(msp430_print_operand): Use X suffix for PSImode even in small model.\n+\t* config/msp430/msp430.h (POINTER_SIZE): Use 20 bits, not 32.\n+\t(PTR_SIZE): ...but 4 bytes for EH.\n+\t(SIZE_TYPE): Use __int20.\n+\t(PTRDIFF_TYPE): Likewise.\n+\t(INCOMING_FRAME_SP_OFFSET): Adjust.\n+\t* config/msp430/msp430.md (movqi_topbyte): New.\n+\t(movpsi): Use fixed suffixes.\n+\t(movsipsi2): Enable for 430X, not large model.\n+\t(extendhipsi2): Likewise.\n+\t(zero_extendhisi2): Likewise.\n+\t(zero_extendhisipsi2): Likewise.\n+\t(extend_and_shift1_hipsi2): Likewise.\n+\t(extendpsisi2): Likewise.\n+\t(*bitbranch<mode>4_z): Fix suffix logic.\n+\n 2014-10-14  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/62019"}, {"sha": "d170e48eb643bbc417e910eca31334e3cc24be7f", "filename": "gcc/config/msp430/msp430-modes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f/gcc%2Fconfig%2Fmsp430%2Fmsp430-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f/gcc%2Fconfig%2Fmsp430%2Fmsp430-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430-modes.def?ref=c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f", "patch": "@@ -1,3 +1,4 @@\n /* 20-bit address */\n PARTIAL_INT_MODE (SI, 20, PSI);\n \n+INT_N (PSI, 20);"}, {"sha": "6cdce097e5126f3940530537bafebe863909444e", "filename": "gcc/config/msp430/msp430-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f/gcc%2Fconfig%2Fmsp430%2Fmsp430-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f/gcc%2Fconfig%2Fmsp430%2Fmsp430-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430-protos.h?ref=c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f", "patch": "@@ -30,6 +30,9 @@ const char * msp430x_extendhisi (rtx *);\n void\tmsp430_fixup_compare_operands (enum machine_mode, rtx *);\n int\tmsp430_hard_regno_mode_ok (int, enum machine_mode);\n int\tmsp430_hard_regno_nregs (int, enum machine_mode);\n+int\tmsp430_hard_regno_nregs_has_padding (int, enum machine_mode);\n+int\tmsp430_hard_regno_nregs_with_padding (int, enum machine_mode);\n+bool    msp430_hwmult_enabled (void);\n rtx\tmsp430_incoming_return_addr_rtx (void);\n void\tmsp430_init_cumulative_args (CUMULATIVE_ARGS *, tree, rtx, tree, int);\n int\tmsp430_initial_elimination_offset (int, int);"}, {"sha": "6e9405d5fb58ef0557db6d4fd837b3702456a674", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 111, "deletions": 2, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f", "patch": "@@ -228,6 +228,21 @@ msp430_option_override (void)\n     optimize_size = 1;\n }\n \n+#undef  TARGET_SCALAR_MODE_SUPPORTED_P\n+#define TARGET_SCALAR_MODE_SUPPORTED_P msp430_scalar_mode_supported_p\n+\n+static bool\n+msp430_scalar_mode_supported_p (enum machine_mode m)\n+{\n+  if (m == PSImode && msp430x)\n+    return true;\n+#if 0\n+  if (m == TImode)\n+    return true;\n+#endif\n+  return default_scalar_mode_supported_p (m);\n+}\n+\n \f\n \n /* Storage Layout */\n@@ -257,6 +272,27 @@ msp430_hard_regno_nregs (int regno ATTRIBUTE_UNUSED,\n \t  / UNITS_PER_WORD);\n }\n \n+/* Implements HARD_REGNO_NREGS_HAS_PADDING.  */\n+int\n+msp430_hard_regno_nregs_has_padding (int regno ATTRIBUTE_UNUSED,\n+\t\t\t\t     enum machine_mode mode)\n+{\n+  if (mode == PSImode && msp430x)\n+    return 1;\n+  return ((GET_MODE_SIZE (mode) + UNITS_PER_WORD - 1)\n+\t  / UNITS_PER_WORD);\n+}\n+\n+/* Implements HARD_REGNO_NREGS_WITH_PADDING.  */\n+int\n+msp430_hard_regno_nregs_with_padding (int regno ATTRIBUTE_UNUSED,\n+\t\t\t\t     enum machine_mode mode)\n+{\n+  if (mode == PSImode)\n+    return 2;\n+  return msp430_hard_regno_nregs (regno, mode);\n+}\n+\n /* Implements HARD_REGNO_MODE_OK.  */\n int\n msp430_hard_regno_mode_ok (int regno ATTRIBUTE_UNUSED,\n@@ -370,7 +406,7 @@ msp430_addr_space_pointer_mode (addr_space_t addrspace)\n static enum machine_mode\n msp430_unwind_word_mode (void)\n {\n-  return TARGET_LARGE ? SImode : HImode;\n+  return TARGET_LARGE ? PSImode : HImode;\n }\n \n /* Determine if one named address space is a subset of another.  */\n@@ -885,6 +921,52 @@ msp430_legitimate_address_p (enum machine_mode mode ATTRIBUTE_UNUSED,\n     }\n }\n \n+#undef  TARGET_ADDR_SPACE_LEGITIMATE_ADDRESS_P\n+#define TARGET_ADDR_SPACE_LEGITIMATE_ADDRESS_P msp430_addr_space_legitimate_address_p\n+\n+bool\n+msp430_addr_space_legitimate_address_p (enum machine_mode mode,\n+\t\t\t\t\trtx x,\n+\t\t\t\t\tbool strict,\n+\t\t\t\t\taddr_space_t as ATTRIBUTE_UNUSED)\n+{\n+  return msp430_legitimate_address_p (mode, x, strict);\n+}\n+\n+#undef  TARGET_ASM_INTEGER\n+#define TARGET_ASM_INTEGER msp430_asm_integer\n+static bool\n+msp430_asm_integer (rtx x, unsigned int size, int aligned_p)\n+{\n+  int c = GET_CODE (x);\n+\n+  if (size == 3 && GET_MODE (x) == PSImode)\n+    size = 4;\n+\n+  switch (size)\n+    {\n+    case 4:\n+      if (c == SYMBOL_REF || c == CONST || c == LABEL_REF || c == CONST_INT)\n+\t{\n+\t  fprintf (asm_out_file, \"\\t.long\\t\");\n+\t  output_addr_const (asm_out_file, x);\n+\t  fputc ('\\n', asm_out_file);\n+\t  return true;\n+\t}\n+      break;\n+    }\n+  return default_assemble_integer (x, size, aligned_p);\n+}\n+\n+#undef  TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA\n+#define TARGET_ASM_OUTPUT_ADDR_CONST_EXTRA msp430_asm_output_addr_const_extra\n+static bool\n+msp430_asm_output_addr_const_extra (FILE *file, rtx x)\n+{\n+  debug_rtx(x);\n+  return false;\n+}\n+\n #undef  TARGET_LEGITIMATE_CONSTANT_P\n #define TARGET_LEGITIMATE_CONSTANT_P msp430_legitimate_constant\n \n@@ -1753,6 +1835,33 @@ msp430_expand_eh_return (rtx eh_handler)\n   emit_move_insn (tmp, ra);\n }\n \n+#undef  TARGET_INIT_DWARF_REG_SIZES_EXTRA\n+#define TARGET_INIT_DWARF_REG_SIZES_EXTRA msp430_init_dwarf_reg_sizes_extra\n+void\n+msp430_init_dwarf_reg_sizes_extra (tree address)\n+{\n+  int i;\n+  rtx addr = expand_normal (address);\n+  rtx mem = gen_rtx_MEM (BLKmode, addr);\n+\n+  if (!msp430x)\n+    return;\n+\n+  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+    {\n+      unsigned int dnum = DWARF_FRAME_REGNUM (i);\n+      unsigned int rnum = DWARF2_FRAME_REG_OUT (dnum, 1);\n+\n+      if (rnum < DWARF_FRAME_REGISTERS)\n+\t{\n+\t  HOST_WIDE_INT offset = rnum * GET_MODE_SIZE (QImode);\n+\n+\t  emit_move_insn (adjust_address (mem, QImode, offset),\n+\t\t\t  gen_int_mode (4, QImode));\n+\t}\n+    }\n+}\n+\n /* This is a list of MD patterns that implement fixed-count shifts.  */\n static struct\n {\n@@ -2485,7 +2594,7 @@ msp430_print_operand (FILE * file, rtx op, int letter)\n     case 'X':\n       /* This is used to turn, for example, an ADD opcode into an ADDX\n \t opcode when we're using 20-bit addresses.  */\n-      if (TARGET_LARGE)\n+      if (TARGET_LARGE || GET_MODE (op) == PSImode)\n \tfprintf (file, \"X\");\n       /* We don't care which operand we use, but we want 'X' in the MD\n \t file, so we do it this way.  */"}, {"sha": "89e225df2a142ffefeff1e2cbacad543b7ae9c58", "filename": "gcc/config/msp430/msp430.h", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.h?ref=c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f", "patch": "@@ -127,10 +127,9 @@ extern bool msp430x;\n #define MAX_REGS_PER_ADDRESS \t\t1\n \n #define Pmode \t\t\t\t(TARGET_LARGE ? PSImode : HImode)\n-/* Note: 32 is a lie.  Large pointers are actually 20-bits wide.  But gcc\n-   thinks that any non-power-of-2 pointer size equates to BLKmode, which\n-   causes all kinds of problems...  */\n-#define POINTER_SIZE\t\t\t(TARGET_LARGE ? 32 : 16)\n+#define POINTER_SIZE\t\t\t(TARGET_LARGE ? 20 : 16)\n+/* This is just for .eh_frame, to match bfd.  */\n+#define PTR_SIZE\t\t\t(TARGET_LARGE ? 4 : 2)\n #define\tPOINTERS_EXTEND_UNSIGNED\t1\n \n #define ADDR_SPACE_NEAR\t1\n@@ -154,9 +153,9 @@ extern bool msp430x;\n /* Layout of Source Language Data Types */\n \n #undef  SIZE_TYPE\n-#define SIZE_TYPE\t\t\t(TARGET_LARGE ? \"long unsigned int\" : \"unsigned int\")\n+#define SIZE_TYPE\t\t\t(TARGET_LARGE ? \"__int20 unsigned\" : \"unsigned int\")\n #undef  PTRDIFF_TYPE\n-#define PTRDIFF_TYPE\t\t\t(TARGET_LARGE ? \"long int\" : \"int\")\n+#define PTRDIFF_TYPE\t\t\t(TARGET_LARGE ? \"__int20\" : \"int\")\n #undef  WCHAR_TYPE\n #define WCHAR_TYPE\t\t\t\"long int\"\n #undef  WCHAR_TYPE_SIZE\n@@ -378,7 +377,7 @@ typedef struct\n #undef\tDWARF2_ADDR_SIZE\n #define\tDWARF2_ADDR_SIZE\t\t\t4\n \n-#define INCOMING_FRAME_SP_OFFSET\t\t(POINTER_SIZE / BITS_PER_UNIT)\n+#define INCOMING_FRAME_SP_OFFSET\t\t(TARGET_LARGE ? 4 : 2)\n \n #undef  PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG"}, {"sha": "60e7b6ff14208adba43fa17364060127841932ee", "filename": "gcc/config/msp430/msp430.md", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f/gcc%2Fconfig%2Fmsp430%2Fmsp430.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.md?ref=c32ab325fd2bf4e7b4a365b5c2c7bfe7460ddf3f", "patch": "@@ -179,6 +179,13 @@\n    MOV%X1.B\\t%1, %0\"\n )\n \n+(define_insn \"movqi_topbyte\"\n+  [(set (match_operand:QI 0 \"msp_nonimmediate_operand\" \"=r\")\n+\t(subreg:QI (match_operand:PSI 1 \"msp_general_operand\" \"r\") 2))]\n+  \"msp430x\"\n+  \"PUSHM.A\\t#1,%1 { POPM.W\\t#1,%0 { POPM.W\\t#1,%0\"\n+)\n+\n (define_insn \"movqi\"\n   [(set (match_operand:QI 0 \"msp_nonimmediate_operand\" \"=rYs,rm\")\n \t(match_operand:QI 1 \"msp_general_operand\" \"riYs,rmi\"))]\n@@ -223,9 +230,9 @@\n \t(match_operand:PSI 1 \"msp_general_operand\" \"riYa,r,rmi\"))]\n   \"\"\n   \"@\n-  MOV%Q0\\t%1, %0\n-  MOV%Q0\\t%1, %0\n-  MOV%X0.%Q0\\t%1, %0\")\n+  MOVA\\t%1, %0\n+  MOVA\\t%1, %0\n+  MOVX.A\\t%1, %0\")\n \n ; This pattern is identical to the truncsipsi2 pattern except\n ; that it uses a SUBREG instead of a TRUNC.  It is needed in\n@@ -237,7 +244,7 @@\n (define_insn \"movsipsi2\"\n   [(set (match_operand:PSI            0 \"register_operand\" \"=r\")\n \t(subreg:PSI (match_operand:SI 1 \"register_operand\" \"r\") 0))]\n-  \"TARGET_LARGE\"\n+  \"msp430x\"\n   \"PUSH.W\\t%H1 { PUSH.W\\t%L1 { POPM.A #1, %0 ; Move reg-pair %L1:%H1 into pointer %0\"\n )\n \n@@ -567,7 +574,7 @@\n (define_insn \"extendhipsi2\"\n   [(set (match_operand:PSI 0 \"nonimmediate_operand\" \"=r\")\n \t(subreg:PSI (sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")) 0))]\n-  \"TARGET_LARGE\"\n+  \"msp430x\"\n   \"RLAM.A #4, %0 { RRAM.A #4, %0\"\n )\n \n@@ -578,14 +585,14 @@\n (define_insn \"zero_extendhisi2\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n \t(zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")))]\n-  \"TARGET_LARGE\"\n+  \"msp430x\"\n   \"MOV.W\\t#0,%H0\"\n )\n \n (define_insn \"zero_extendhisipsi2\"\n   [(set (match_operand:PSI 0 \"nonimmediate_operand\" \"=r,r\")\n \t(subreg:PSI (zero_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0,r\")) 0))]\n-  \"TARGET_LARGE\"\n+  \"msp430x\"\n   \"@\n    AND.W\\t#-1,%0\n    MOV.W\\t%1,%0\"\n@@ -595,15 +602,15 @@\n   [(set (subreg:SI (match_operand:PSI 0 \"nonimmediate_operand\" \"=r\") 0)\n \t(ashift:SI (sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0\"))\n \t\t   (const_int 1)))]\n-  \"TARGET_LARGE\"\n+  \"msp430x\"\n   \"RLAM.A #4, %0 { RRAM.A #3, %0\"\n )\n \n (define_insn \"extend_and_shift2_hipsi2\"\n   [(set (subreg:SI (match_operand:PSI 0 \"nonimmediate_operand\" \"=r\") 0)\n \t(ashift:SI (sign_extend:SI (match_operand:HI 1 \"nonimmediate_operand\" \"0\"))\n \t\t   (const_int 2)))]\n-  \"TARGET_LARGE\"\n+  \"msp430x\"\n   \"RLAM.A #4, %0 { RRAM.A #2, %0\"\n )\n \n@@ -648,7 +655,7 @@\n (define_insn \"extendpsisi2\"\n   [(set (match_operand:SI                  0 \"register_operand\" \"=r\")\n \t(sign_extend:SI (match_operand:PSI 1 \"register_operand\" \"r\")))]\n-  \"TARGET_LARGE\"\n+  \"msp430x\"\n   \"*\n     /* The intention here is that we copy the bottom 16-bits of\n        %1 into %L0 (zeroing the top four bits).  Then we copy the\n@@ -1177,7 +1184,7 @@\n    (clobber (reg:BI CARRY))\n    ]\n   \"\"\n-  \"BIT%x0%X0%b0\\t%1, %0 { JEQ\\t%l2\"\n+  \"BIT%x0%b0\\t%1, %0 { JEQ\\t%l2\"\n   )\n \n (define_insn \"*bitbranch<mode>4\""}]}