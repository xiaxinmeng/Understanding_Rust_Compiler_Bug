{"sha": "5fa671cf5bd476ab9af10e8a46d6c9794b8b502f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWZhNjcxY2Y1YmQ0NzZhYjlhZjEwZThhNDZkNmM5Nzk0YjhiNTAyZg==", "commit": {"author": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "1999-03-25T12:04:26Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "1999-03-25T12:04:26Z"}, "message": "rtl.texi (RTX_FRAME_RELATED_P): Add documentation.\n\n\t\nThu Mar 25 14:04:54 EST 1999  Andrew MacLeod  <amacleod@cygnus.com>\n\t* rtl.texi (RTX_FRAME_RELATED_P): Add documentation.\n\t* rtl.h (struct rtx_def): Update comment for frame_related field.\n\t(set_unique_reg_note): Declare prototype.\n\t* dwarf2out.c (dwarf2out_frame_debug_expr): Split out from\n\t'dwarf2out_frame_debug' to handle only expressions, and process\n\tcomponent parts of a PARALLEL expression.\n\t(dwarf2out_frame_debug): Process insns only, and call\n\tnew function 'dwarf2out_frame_debug_expr' for patterns.\n\t* emit-rtl.c (set_unique_reg_note): New function to add a reg note,\n\tbut if there is an existingone, deletes it first.\n\t* expmed.c (expand_mult, expand_divmod): Use set_unique_reg_note.\n\t* optabs.c (add_equal_note, expand_binop): Use set_unique_reg_note.\n\t(emit_no_conflict_block, emit_libcall_block): Use set_unique_reg_note.\n\t(expand_fix):  Use set_unique_reg_note.\n\nFrom-SVN: r25980", "tree": {"sha": "bffac5b3fcd8d8e13bda763506061f3f994a2afc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bffac5b3fcd8d8e13bda763506061f3f994a2afc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5fa671cf5bd476ab9af10e8a46d6c9794b8b502f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fa671cf5bd476ab9af10e8a46d6c9794b8b502f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5fa671cf5bd476ab9af10e8a46d6c9794b8b502f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5fa671cf5bd476ab9af10e8a46d6c9794b8b502f/comments", "author": null, "committer": null, "parents": [{"sha": "7e5bda2c38632a42a84b0c993344e5532597f29c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e5bda2c38632a42a84b0c993344e5532597f29c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e5bda2c38632a42a84b0c993344e5532597f29c"}], "stats": {"total": 43, "additions": 18, "deletions": 25}, "files": [{"sha": "b5a84230a7e7e75a3601675177379e780bd3f215", "filename": "gcc/optabs.c", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5fa671cf5bd476ab9af10e8a46d6c9794b8b502f/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5fa671cf5bd476ab9af10e8a46d6c9794b8b502f/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=5fa671cf5bd476ab9af10e8a46d6c9794b8b502f", "patch": "@@ -305,9 +305,7 @@ add_equal_note (seq, target, code, op0, op1)\n   else\n     note = gen_rtx_fmt_ee (code, GET_MODE (target), copy_rtx (op0), copy_rtx (op1));\n \n-  REG_NOTES (XVECEXP (seq, 0, XVECLEN (seq, 0) - 1))\n-    = gen_rtx_EXPR_LIST (REG_EQUAL, note,\n-\t\t\t REG_NOTES (XVECEXP (seq, 0, XVECLEN (seq, 0) - 1)));\n+  set_unique_reg_note (XVECEXP (seq, 0, XVECLEN (seq, 0) - 1), REG_EQUAL, note);\n \n   return 1;\n }\n@@ -990,12 +988,11 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \t    {\n \t      rtx temp = emit_move_insn (target, target);\n \n-\t      REG_NOTES (temp)\n-\t\t= gen_rtx_EXPR_LIST (REG_EQUAL,\n-\t\t\t\t     gen_rtx_fmt_ee (binoptab->code, mode,\n-\t\t\t\t\t\t     copy_rtx (xop0),\n-\t\t\t\t\t\t     copy_rtx (xop1)),\n-\t\t\t\t     REG_NOTES (temp));\n+\t      set_unique_reg_note (temp,\n+\t      \t\t\t   REG_EQUAL,\n+\t\t\t\t   gen_rtx_fmt_ee (binoptab->code, mode,\n+\t\t\t\t\t\t   copy_rtx (xop0),\n+\t\t\t\t\t\t   copy_rtx (xop1)));\n \t    }\n \t  return target;\n \t}\n@@ -1173,12 +1170,11 @@ expand_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n \t      if (mov_optab->handlers[(int) mode].insn_code != CODE_FOR_nothing)\n \t\t{\n \t\t  temp = emit_move_insn (product, product);\n-\t\t  REG_NOTES (temp)\n-\t\t    = gen_rtx_EXPR_LIST (REG_EQUAL,\n-\t\t\t\t\t gen_rtx_fmt_ee (MULT, mode,\n-\t\t\t\t\t\t\t copy_rtx (op0),\n-\t\t\t\t\t\t\t copy_rtx (op1)),\n-\t\t\t\t\t REG_NOTES (temp));\n+\t\t  set_unique_reg_note (temp,\n+\t\t  \t\t       REG_EQUAL,\n+\t\t\t\t       gen_rtx_fmt_ee (MULT, mode,\n+\t\t\t\t\t\t       copy_rtx (op0),\n+\t\t\t\t\t\t       copy_rtx (op1)));\n \t\t}\n \t      return product;\n \t    }\n@@ -2545,8 +2541,7 @@ emit_no_conflict_block (insns, target, op0, op1, equiv)\n     {\n       last = emit_move_insn (target, target);\n       if (equiv)\n-\tREG_NOTES (last)\n-\t  = gen_rtx_EXPR_LIST (REG_EQUAL, equiv, REG_NOTES (last));\n+\tset_unique_reg_note (last, REG_EQUAL, equiv);\n     }\n   else\n     last = get_last_insn ();\n@@ -2659,8 +2654,7 @@ emit_libcall_block (insns, target, result, equiv)\n   last = emit_move_insn (target, result);\n   if (mov_optab->handlers[(int) GET_MODE (target)].insn_code\n       != CODE_FOR_nothing)\n-    REG_NOTES (last) = gen_rtx_EXPR_LIST (REG_EQUAL, copy_rtx (equiv),\n-\t\t\t\t\t  REG_NOTES (last));\n+    set_unique_reg_note (last, REG_EQUAL, copy_rtx (equiv));\n \n   if (prev == 0)\n     first = get_insns ();\n@@ -3945,12 +3939,11 @@ expand_fix (to, from, unsignedp)\n \t    {\n \t      /* Make a place for a REG_NOTE and add it.  */\n \t      insn = emit_move_insn (to, to);\n-\t      REG_NOTES (insn)\n-\t\t= gen_rtx_EXPR_LIST (REG_EQUAL,\n-\t\t\t\t     gen_rtx_fmt_e (UNSIGNED_FIX,\n-\t\t\t\t\t\t    GET_MODE (to),\n-\t\t\t\t\t\t    copy_rtx (from)),\n-\t\t\t\t     REG_NOTES (insn));\n+\t      set_unique_reg_note (insn,\n+\t                           REG_EQUAL,\n+\t\t\t\t   gen_rtx_fmt_e (UNSIGNED_FIX,\n+\t\t\t\t\t\t  GET_MODE (to),\n+\t\t\t\t\t\t  copy_rtx (from)));\n \t    }\n \t  return;\n \t}"}]}