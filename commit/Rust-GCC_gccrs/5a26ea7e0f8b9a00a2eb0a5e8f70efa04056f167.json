{"sha": "5a26ea7e0f8b9a00a2eb0a5e8f70efa04056f167", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWEyNmVhN2UwZjhiOWEwMGEyZWIwYTVlOGY3MGVmYTA0MDU2ZjE2Nw==", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-05-05T20:16:50Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2020-05-05T20:16:50Z"}, "message": "PR fortran/93366 - ICE on invalid, reject invalid use of NULL() as argument\n\ngcc/fortran/ChangeLog:\n\n2020-05-05  Steve Kargl  <kargl@gcc.gnu.org>\n\tHarald Anlauf  <anlauf@gmx.de>\n\n\tPR fortran/93366\n\t* check.c (gfc_check_associated, invalid_null_arg): Factorize\n\tcheck for presence of invalid NULL() argument.\n\t(gfc_check_kind, gfc_check_merge, gfc_check_shape)\n\t(gfc_check_sizeof, gfc_check_spread, gfc_check_transfer): Use this\n\tcheck for presence of invalid NULL() arguments.\n\ngcc/testsuite/ChangeLog:\n\n2020-05-05  Harald Anlauf  <anlauf@gmx.de>\n\n\tPR fortran/93366\n\t* gfortran.dg/pr93366.f90: New test.", "tree": {"sha": "2528a343ade5935d26af1550a4ef9d75132ca51f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2528a343ade5935d26af1550a4ef9d75132ca51f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a26ea7e0f8b9a00a2eb0a5e8f70efa04056f167", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a26ea7e0f8b9a00a2eb0a5e8f70efa04056f167", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a26ea7e0f8b9a00a2eb0a5e8f70efa04056f167", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a26ea7e0f8b9a00a2eb0a5e8f70efa04056f167/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1136ba01e1a1d9dda49c19432843748258bef06f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1136ba01e1a1d9dda49c19432843748258bef06f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1136ba01e1a1d9dda49c19432843748258bef06f"}], "stats": {"total": 88, "additions": 73, "deletions": 15}, "files": [{"sha": "beeabfa28398eadd41641ff17afe954f11d54102", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a26ea7e0f8b9a00a2eb0a5e8f70efa04056f167/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a26ea7e0f8b9a00a2eb0a5e8f70efa04056f167/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5a26ea7e0f8b9a00a2eb0a5e8f70efa04056f167", "patch": "@@ -1,3 +1,13 @@\n+2020-05-05  Steve Kargl  <kargl@gcc.gnu.org>\n+\tHarald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/93366\n+\t* check.c (gfc_check_associated, invalid_null_arg): Factorize\n+\tcheck for presence of invalid NULL() argument.\n+\t(gfc_check_kind, gfc_check_merge, gfc_check_shape)\n+\t(gfc_check_sizeof, gfc_check_spread, gfc_check_transfer): Use this\n+\tcheck for presence of invalid NULL() arguments.\n+\n 2020-04-29  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n \n \tPR fortran/94769"}, {"sha": "0afb96c041482a9f80daf6fd2160d67b96bb1b46", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 40, "deletions": 15, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a26ea7e0f8b9a00a2eb0a5e8f70efa04056f167/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a26ea7e0f8b9a00a2eb0a5e8f70efa04056f167/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=5a26ea7e0f8b9a00a2eb0a5e8f70efa04056f167", "patch": "@@ -1431,19 +1431,28 @@ gfc_check_x_yd (gfc_expr *x, gfc_expr *y)\n   return true;\n }\n \n+static bool\n+invalid_null_arg (gfc_expr *x)\n+{\n+  if (x->expr_type == EXPR_NULL)\n+    {\n+      gfc_error (\"NULL at %L is not permitted as actual argument \"\n+\t\t \"to %qs intrinsic function\", &x->where,\n+\t\t gfc_current_intrinsic);\n+      return true;\n+    }\n+  return false;\n+}\n \n bool\n gfc_check_associated (gfc_expr *pointer, gfc_expr *target)\n {\n   symbol_attribute attr1, attr2;\n   int i;\n   bool t;\n-  locus *where;\n \n-  where = &pointer->where;\n-\n-  if (pointer->expr_type == EXPR_NULL)\n-    goto null_arg;\n+  if (invalid_null_arg (pointer))\n+    return false;\n \n   attr1 = gfc_expr_attr (pointer);\n \n@@ -1468,9 +1477,8 @@ gfc_check_associated (gfc_expr *pointer, gfc_expr *target)\n   if (target == NULL)\n     return true;\n \n-  where = &target->where;\n-  if (target->expr_type == EXPR_NULL)\n-    goto null_arg;\n+  if (invalid_null_arg (target))\n+    return false;\n \n   if (target->expr_type == EXPR_VARIABLE || target->expr_type == EXPR_FUNCTION)\n     attr2 = gfc_expr_attr (target);\n@@ -1518,13 +1526,6 @@ gfc_check_associated (gfc_expr *pointer, gfc_expr *target)\n \t  }\n     }\n   return t;\n-\n-null_arg:\n-\n-  gfc_error (\"NULL pointer at %L is not permitted as actual argument \"\n-\t     \"of %qs intrinsic function\", where, gfc_current_intrinsic);\n-  return false;\n-\n }\n \n \n@@ -3373,6 +3374,9 @@ gfc_check_kill_sub (gfc_expr *pid, gfc_expr *sig, gfc_expr *status)\n bool\n gfc_check_kind (gfc_expr *x)\n {\n+  if (invalid_null_arg (x))\n+    return false;\n+\n   if (gfc_bt_struct (x->ts.type) || x->ts.type == BT_CLASS)\n     {\n       gfc_error (\"%qs argument of %qs intrinsic at %L must be of \"\n@@ -4134,6 +4138,12 @@ gfc_check_transf_bit_intrins (gfc_actual_arglist *ap)\n bool\n gfc_check_merge (gfc_expr *tsource, gfc_expr *fsource, gfc_expr *mask)\n {\n+  if (invalid_null_arg (tsource))\n+    return false;\n+\n+  if (invalid_null_arg (fsource))\n+    return false;\n+\n   if (!same_type_check (tsource, 0, fsource, 1))\n     return false;\n \n@@ -5051,6 +5061,9 @@ gfc_check_shape (gfc_expr *source, gfc_expr *kind)\n {\n   gfc_array_ref *ar;\n \n+  if (invalid_null_arg (source))\n+    return false;\n+\n   if (source->rank == 0 || source->expr_type != EXPR_VARIABLE)\n     return true;\n \n@@ -5133,6 +5146,9 @@ gfc_check_size (gfc_expr *array, gfc_expr *dim, gfc_expr *kind)\n bool\n gfc_check_sizeof (gfc_expr *arg)\n {\n+  if (invalid_null_arg (arg))\n+    return false;\n+\n   if (arg->ts.type == BT_PROCEDURE)\n     {\n       gfc_error (\"%qs argument of %qs intrinsic at %L shall not be a procedure\",\n@@ -5618,6 +5634,9 @@ gfc_check_sngl (gfc_expr *a)\n bool\n gfc_check_spread (gfc_expr *source, gfc_expr *dim, gfc_expr *ncopies)\n {\n+  if (invalid_null_arg (source))\n+    return false;\n+\n   if (source->rank >= GFC_MAX_DIMENSIONS)\n     {\n       gfc_error (\"%qs argument of %qs intrinsic at %L must be less \"\n@@ -6148,6 +6167,9 @@ gfc_check_transfer (gfc_expr *source, gfc_expr *mold, gfc_expr *size)\n   size_t source_size;\n   size_t result_size;\n \n+  if (invalid_null_arg (source))\n+    return false;\n+\n   /* SOURCE shall be a scalar or array of any type.  */\n   if (source->ts.type == BT_PROCEDURE\n       && source->symtree->n.sym->attr.subroutine == 1)\n@@ -6164,6 +6186,9 @@ gfc_check_transfer (gfc_expr *source, gfc_expr *mold, gfc_expr *size)\n   if (mold->ts.type == BT_BOZ && illegal_boz_arg (mold))\n     return false;\n \n+  if (invalid_null_arg (mold))\n+    return false;\n+\n   /* MOLD shall be a scalar or array of any type.  */\n   if (mold->ts.type == BT_PROCEDURE\n       && mold->symtree->n.sym->attr.subroutine == 1)"}, {"sha": "b36f8748689a710299576880533291e215aaa4a6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a26ea7e0f8b9a00a2eb0a5e8f70efa04056f167/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a26ea7e0f8b9a00a2eb0a5e8f70efa04056f167/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5a26ea7e0f8b9a00a2eb0a5e8f70efa04056f167", "patch": "@@ -1,3 +1,8 @@\n+2020-05-05  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/93366\n+\t* gfortran.dg/pr93366.f90: New test.\n+\n 2020-05-05  Michael Meissner  <meissner@linux.ibm.com>\n \n \t* gcc.dg/nextafter-2.c: Delete changes meant for a private branch."}, {"sha": "3cb6d1d16da96904319e426f6d37fd2707db2583", "filename": "gcc/testsuite/gfortran.dg/pr93366.f90", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a26ea7e0f8b9a00a2eb0a5e8f70efa04056f167/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93366.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a26ea7e0f8b9a00a2eb0a5e8f70efa04056f167/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93366.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr93366.f90?ref=5a26ea7e0f8b9a00a2eb0a5e8f70efa04056f167", "patch": "@@ -0,0 +1,18 @@\n+! { dg-do compile }\n+!\n+! PR fortran/93366 - ICE on invalid, reject invalid use of NULL() as argument\n+\n+program p\n+  print *, kind (null())                    ! { dg-error \"NULL at\" }\n+  print *, [ merge(null(), [1]   ,.true.) ] ! { dg-error \"NULL at\" }\n+  print *, [ merge([1]   , null(),.true.) ] ! { dg-error \"NULL at\" }\n+  print *, [ merge(null(), null(),.true.) ] ! { dg-error \"NULL at\" }\n+  print *, shape (null())                   ! { dg-error \"NULL at\" }\n+  print *, sizeof (null())                  ! { dg-error \"NULL at\" }\n+  print *, spread (null(),1,1)              ! { dg-error \"NULL at\" }\n+  print *, transfer ( 1 , null())           ! { dg-error \"NULL at\" }\n+  print *, transfer ([1], null())           ! { dg-error \"NULL at\" }\n+  print *, transfer (null(), 1)             ! { dg-error \"NULL at\" }\n+  print *, transfer (null(), [1])           ! { dg-error \"NULL at\" }\n+  print *, transfer (null(), null())        ! { dg-error \"NULL at\" }\n+end"}]}