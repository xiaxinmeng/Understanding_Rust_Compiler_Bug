{"sha": "a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNkNGEyMmIwMWViNjFmYmMwMmJhZmEyNzg4YWFmM2U0OTdlY2VmOQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-08-22T13:58:52Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-08-22T13:58:52Z"}, "message": "re PR target/37184 (ice in ix86_match_ccmode)\n\n        PR target/37184\n        * config/i386/i386.c (ix86_match_ccmode): Handle CCAmode,\n        CCCmode, CCOmode and CCSmode destination modes.\n\n        PR target/37191\n        * config/i386/mmx.md (*vec_extractv2sf_0): Avoid combining registers\n        from different units in a single alternative.\n        (*vec_extractv2sf_1): Ditto.\n        (*vec_extractv2si_0): Ditto.\n        (*vec_extractv2si_1): Ditto.\n        * config/i386/sse.md (sse2_storehpd): Ditto.\n        (sse2_storelpd): Ditto.\n        (sse2_loadhpd): Ditto.\n        (sse2_loadlpd): Ditto.\n\n        PR target/37197\n        * config/i386/i386.md (clzsi2_abm): Fix operand 1 constraints.\n        (popcountsi2): Ditto.\n        (clzdi2_abm): Ditto.\n        (popcountdi2): Ditto.\n        (clzhi2_abm): Ditto.\n        (popcounthi2): Ditto.\n\ntestsuite/ChangeLog:\n\n        PR target/37184\n        * gcc.target/i386/pr37184.c: New test.\n\n        PR target/37191\n        * gcc.target/i386/pr37191.c: New test.\n\n        PR target/37197\n        * gcc.target/i386/pr37197.c: New test.\n\nFrom-SVN: r139471", "tree": {"sha": "2b127590b7b77ae3d3d96c86d61ca2e85f2f8eef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b127590b7b77ae3d3d96c86d61ca2e85f2f8eef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9/comments", "author": null, "committer": null, "parents": [{"sha": "6eca32ba8d80c1d36903dc28b743ec1b3532a2cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eca32ba8d80c1d36903dc28b743ec1b3532a2cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eca32ba8d80c1d36903dc28b743ec1b3532a2cd"}], "stats": {"total": 232, "additions": 188, "deletions": 44}, "files": [{"sha": "c7e5e5a15b9604942d6c49564ac288375eea958c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9", "patch": "@@ -1,3 +1,28 @@\n+2008-08-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/37184\n+\t* config/i386/i386.c (ix86_match_ccmode): Handle CCAmode,\n+\tCCCmode, CCOmode and CCSmode destination modes.\n+\n+\tPR target/37191\n+\t* config/i386/mmx.md (*vec_extractv2sf_0): Avoid combining registers\n+\tfrom different units in a single alternative.\n+\t(*vec_extractv2sf_1): Ditto.\n+\t(*vec_extractv2si_0): Ditto.\n+\t(*vec_extractv2si_1): Ditto.\n+\t* config/i386/sse.md (sse2_storehpd): Ditto.\n+\t(sse2_storelpd): Ditto.\n+\t(sse2_loadhpd): Ditto.\n+\t(sse2_loadlpd): Ditto.\n+\n+\tPR target/37197\n+\t* config/i386/i386.md (clzsi2_abm): Fix operand 1 constraints.\n+\t(popcountsi2): Ditto.\n+\t(clzdi2_abm): Ditto.\n+\t(popcountdi2): Ditto.\n+\t(clzhi2_abm): Ditto.\n+\t(popcounthi2): Ditto.\n+\n 2008-08-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/36548\n@@ -35,9 +60,11 @@\n 2008-08-21  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.c (first_cgraph_function_insertion_hook): New variable.\n-\t(cgraph_add_function_insertion_hook, cgraph_remove_function_insertion_hook,\n+\t(cgraph_add_function_insertion_hook,\n+\tcgraph_remove_function_insertion_hook,\n \tcgraph_call_function_insertion_hooks): New functions.\n-\t* cgraph.h (cgraph_add_function_insertion_hook, cgraph_remove_function_insertion_hook,\n+\t* cgraph.h (cgraph_add_function_insertion_hook,\n+\tcgraph_remove_function_insertion_hook,\n \tcgraph_call_function_insertion_hooks): Declare.\n \t* ipa-reference.c (function_insertion_hook_holder): New variable.\n \t(check_operand, look_for_address_of): When checking late, do not care\n@@ -260,9 +287,9 @@\n \n 2008-08-19  Rafael Espindola  <espindola@google.com>\n \n-      * varasm.c (weak_decls): Move earlier in the file.\n-      (assemble_external): Add weak decls to the weak_decls list.\n-      (declare_weak): Don't add decls to the weak_decls list.\n+\t* varasm.c (weak_decls): Move earlier in the file.\n+\t(assemble_external): Add weak decls to the weak_decls list.\n+\t(declare_weak): Don't add decls to the weak_decls list.\n \n 2008-08-19  H.J. Lu  <hongjiu.lu@intel.com>\n \n@@ -390,7 +417,6 @@\n \t(compute_branch_probabilities): Refactored. Invokes mcf_smooth_cfg if\n \tflag_profile_correction is set.\n \n->>>>>>> .r139386\n 2008-08-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* rtlanal.c (subreg_offset_representable_p): Check HARD_REGNO_MODE_OK."}, {"sha": "b7561c3002ac7483f678664852edda3b0230bc5d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9", "patch": "@@ -12794,6 +12794,10 @@ ix86_match_ccmode (rtx insn, enum machine_mode req_mode)\n       if (req_mode == CCZmode)\n \treturn 0;\n       /* FALLTHRU */\n+    case CCAmode:\n+    case CCCmode:\n+    case CCOmode:\n+    case CCSmode:\n     case CCZmode:\n       break;\n "}, {"sha": "49fde6b428a50778a8aa3e7009bad289ca25e44d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9", "patch": "@@ -15285,7 +15285,7 @@\n \n (define_insn \"clzsi2_abm\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-        (clz:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n+        (clz:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_ABM\"\n   \"lzcnt{l}\\t{%1, %0|%0, %1}\"\n@@ -15305,7 +15305,7 @@\n \n (define_insn \"popcountsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(popcount:SI (match_operand:SI 1 \"nonimmediate_operand\" \"\")))\n+\t(popcount:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_POPCNT\"\n   \"popcnt{l}\\t{%1, %0|%0, %1}\"\n@@ -15412,7 +15412,7 @@\n \n (define_insn \"clzdi2_abm\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(clz:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")))\n+\t(clz:DI (match_operand:DI 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && TARGET_ABM\"\n   \"lzcnt{q}\\t{%1, %0|%0, %1}\"\n@@ -15432,7 +15432,7 @@\n \n (define_insn \"popcountdi2\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(popcount:DI (match_operand:DI 1 \"nonimmediate_operand\" \"\")))\n+\t(popcount:DI (match_operand:DI 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && TARGET_POPCNT\"\n   \"popcnt{q}\\t{%1, %0|%0, %1}\"\n@@ -15473,7 +15473,7 @@\n \n (define_insn \"clzhi2_abm\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(clz:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))\n+\t(clz:HI (match_operand:HI 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_ABM\"\n   \"lzcnt{w}\\t{%1, %0|%0, %1}\"\n@@ -15493,7 +15493,7 @@\n \n (define_insn \"popcounthi2\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r\")\n-\t(popcount:HI (match_operand:HI 1 \"nonimmediate_operand\" \"\")))\n+\t(popcount:HI (match_operand:HI 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_POPCNT\"\n   \"popcnt{w}\\t{%1, %0|%0, %1}\""}, {"sha": "9bc675893a593313026fc602a1c302398259eabe", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9", "patch": "@@ -535,10 +535,12 @@\n   DONE;\n })\n \n+;; Avoid combining registers from different units in a single alternative,\n+;; see comment above inline_secondary_memory_needed function in i386.c\n (define_insn_and_split \"*vec_extractv2sf_0\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\"     \"=x,y,m,m,frxy\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\"     \"=x, m,y ,m,f,r\")\n \t(vec_select:SF\n-\t  (match_operand:V2SF 1 \"nonimmediate_operand\" \" x,y,x,y,m\")\n+\t  (match_operand:V2SF 1 \"nonimmediate_operand\" \" xm,x,ym,y,m,m\")\n \t  (parallel [(const_int 0)])))]\n   \"TARGET_MMX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n@@ -554,18 +556,23 @@\n   DONE;\n })\n \n+;; Avoid combining registers from different units in a single alternative,\n+;; see comment above inline_secondary_memory_needed function in i386.c\n (define_insn \"*vec_extractv2sf_1\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\"     \"=y,x,frxy\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\"     \"=y,x,y,x,f,r\")\n \t(vec_select:SF\n-\t  (match_operand:V2SF 1 \"nonimmediate_operand\" \" 0,0,o\")\n+\t  (match_operand:V2SF 1 \"nonimmediate_operand\" \" 0,0,o,o,o,o\")\n \t  (parallel [(const_int 1)])))]\n   \"TARGET_MMX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n    punpckhdq\\t%0, %0\n    unpckhps\\t%0, %0\n+   #\n+   #\n+   #\n    #\"\n-  [(set_attr \"type\" \"mmxcvt,sselog1,*\")\n-   (set_attr \"mode\" \"DI,V4SF,SI\")])\n+  [(set_attr \"type\" \"mmxcvt,sselog1,mmxmov,ssemov,fmov,imov\")\n+   (set_attr \"mode\" \"DI,V4SF,SF,SF,SF,SF\")])\n \n (define_split\n   [(set (match_operand:SF 0 \"register_operand\" \"\")\n@@ -1214,10 +1221,12 @@\n   DONE;\n })\n \n+;; Avoid combining registers from different units in a single alternative,\n+;; see comment above inline_secondary_memory_needed function in i386.c\n (define_insn_and_split \"*vec_extractv2si_0\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\"     \"=x,y,m,m,frxy\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\"     \"=x,m,y, m,r\")\n \t(vec_select:SI\n-\t  (match_operand:V2SI 1 \"nonimmediate_operand\" \" x,y,x,y,m\")\n+\t  (match_operand:V2SI 1 \"nonimmediate_operand\" \"xm,x,ym,y,m\")\n \t  (parallel [(const_int 0)])))]\n   \"TARGET_MMX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n@@ -1233,20 +1242,24 @@\n   DONE;\n })\n \n+;; Avoid combining registers from different units in a single alternative,\n+;; see comment above inline_secondary_memory_needed function in i386.c\n (define_insn \"*vec_extractv2si_1\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\"     \"=y,Y2,Y2,x,frxy\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\"     \"=y,Y2,Y2,x,y,x,r\")\n \t(vec_select:SI\n-\t  (match_operand:V2SI 1 \"nonimmediate_operand\" \" 0,0 ,Y2,0,o\")\n+\t  (match_operand:V2SI 1 \"nonimmediate_operand\" \" 0,0 ,Y2,0,o,o,o\")\n \t  (parallel [(const_int 1)])))]\n   \"TARGET_MMX && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n    punpckhdq\\t%0, %0\n    punpckhdq\\t%0, %0\n    pshufd\\t{$85, %1, %0|%0, %1, 85}\n    unpckhps\\t%0, %0\n+   #\n+   #\n    #\"\n-  [(set_attr \"type\" \"mmxcvt,sselog1,sselog1,sselog1,*\")\n-   (set_attr \"mode\" \"DI,TI,TI,V4SF,SI\")])\n+  [(set_attr \"type\" \"mmxcvt,sselog1,sselog1,sselog1,mmxmov,ssemov,imov\")\n+   (set_attr \"mode\" \"DI,TI,TI,V4SF,SI,SI,SI\")])\n \n (define_split\n   [(set (match_operand:SI 0 \"register_operand\" \"\")"}, {"sha": "72098ec0ad4de69d7337f2299f53e2c9f1e22bf9", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 36, "deletions": 20, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9", "patch": "@@ -2404,9 +2404,9 @@\n })\n \n (define_insn_and_split \"*vec_extractv4sf_0\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=x,m,fr\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=x,m,f,r\")\n \t(vec_select:SF\n-\t  (match_operand:V4SF 1 \"nonimmediate_operand\" \"xm,x,m\")\n+\t  (match_operand:V4SF 1 \"nonimmediate_operand\" \"xm,x,m,m\")\n \t  (parallel [(const_int 0)])))]\n   \"TARGET_SSE && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n@@ -2659,18 +2659,22 @@\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"mode\" \"V2DF\")])\n \n+;; Avoid combining registers from different units in a single alternative,\n+;; see comment above inline_secondary_memory_needed function in i386.c\n (define_insn \"sse2_storehpd\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\"     \"=m,x,x*fr\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\"     \"=m,x,x,*f,r\")\n \t(vec_select:DF\n-\t  (match_operand:V2DF 1 \"nonimmediate_operand\" \" x,0,o\")\n+\t  (match_operand:V2DF 1 \"nonimmediate_operand\" \" x,0,o,o,o\")\n \t  (parallel [(const_int 1)])))]\n   \"TARGET_SSE2 && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n    movhpd\\t{%1, %0|%0, %1}\n    unpckhpd\\t%0, %0\n+   #\n+   #\n    #\"\n-  [(set_attr \"type\" \"ssemov,sselog1,ssemov\")\n-   (set_attr \"mode\" \"V1DF,V2DF,DF\")])\n+  [(set_attr \"type\" \"ssemov,sselog1,ssemov,fmov,imov\")\n+   (set_attr \"mode\" \"V1DF,V2DF,DF,DF,DF\")])\n \n (define_split\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n@@ -2683,18 +2687,22 @@\n   operands[1] = adjust_address (operands[1], DFmode, 8);\n })\n \n+;; Avoid combining registers from different units in a single alternative,\n+;; see comment above inline_secondary_memory_needed function in i386.c\n (define_insn \"sse2_storelpd\"\n-  [(set (match_operand:DF 0 \"nonimmediate_operand\"     \"=m,x,x*fr\")\n+  [(set (match_operand:DF 0 \"nonimmediate_operand\"     \"=m,x,x,*f,r\")\n \t(vec_select:DF\n-\t  (match_operand:V2DF 1 \"nonimmediate_operand\" \" x,x,m\")\n+\t  (match_operand:V2DF 1 \"nonimmediate_operand\" \" x,x,m,m,m\")\n \t  (parallel [(const_int 0)])))]\n   \"TARGET_SSE2 && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"@\n    movlpd\\t{%1, %0|%0, %1}\n    #\n+   #\n+   #\n    #\"\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"mode\" \"V1DF,DF,DF\")])\n+  [(set_attr \"type\" \"ssemov,ssemov,ssemov,fmov,imov\")\n+   (set_attr \"mode\" \"V1DF,DF,DF,DF,DF\")])\n \n (define_split\n   [(set (match_operand:DF 0 \"register_operand\" \"\")\n@@ -2723,21 +2731,25 @@\n   \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands (UNKNOWN, V2DFmode, operands);\")\n \n+;; Avoid combining registers from different units in a single alternative,\n+;; see comment above inline_secondary_memory_needed function in i386.c\n (define_insn \"sse2_loadhpd\"\n-  [(set (match_operand:V2DF 0 \"nonimmediate_operand\"     \"=x,x,x,o\")\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\"     \"=x,x,x,o,o,o\")\n \t(vec_concat:V2DF\n \t  (vec_select:DF\n-\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \" 0,0,x,0\")\n+\t    (match_operand:V2DF 1 \"nonimmediate_operand\" \" 0,0,x,0,0,0\")\n \t    (parallel [(const_int 0)]))\n-\t  (match_operand:DF 2 \"nonimmediate_operand\"     \" m,x,0,x*fr\")))]\n+\t  (match_operand:DF 2 \"nonimmediate_operand\"     \" m,x,0,x,*f,r\")))]\n   \"TARGET_SSE2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n    movhpd\\t{%2, %0|%0, %2}\n    unpcklpd\\t{%2, %0|%0, %2}\n    shufpd\\t{$1, %1, %0|%0, %1, 1}\n+   #\n+   #\n    #\"\n-  [(set_attr \"type\" \"ssemov,sselog,sselog,other\")\n-   (set_attr \"mode\" \"V1DF,V2DF,V2DF,DF\")])\n+  [(set_attr \"type\" \"ssemov,sselog,sselog,ssemov,fmov,imov\")\n+   (set_attr \"mode\" \"V1DF,V2DF,V2DF,DF,DF,DF\")])\n \n (define_split\n   [(set (match_operand:V2DF 0 \"memory_operand\" \"\")\n@@ -2760,12 +2772,14 @@\n   \"TARGET_SSE2\"\n   \"ix86_fixup_binary_operands (UNKNOWN, V2DFmode, operands);\")\n \n+;; Avoid combining registers from different units in a single alternative,\n+;; see comment above inline_secondary_memory_needed function in i386.c\n (define_insn \"sse2_loadlpd\"\n-  [(set (match_operand:V2DF 0 \"nonimmediate_operand\"    \"=x,x,x,x,x,m\")\n+  [(set (match_operand:V2DF 0 \"nonimmediate_operand\"    \"=x,x,x,x,x,m,m,m\")\n \t(vec_concat:V2DF\n-\t  (match_operand:DF 2 \"nonimmediate_operand\"    \" m,m,x,0,0,x*fr\")\n+\t  (match_operand:DF 2 \"nonimmediate_operand\"    \" m,m,x,0,0,x,*f,r\")\n \t  (vec_select:DF\n-\t    (match_operand:V2DF 1 \"vector_move_operand\" \" C,0,0,x,o,0\")\n+\t    (match_operand:V2DF 1 \"vector_move_operand\" \" C,0,0,x,o,0,0,0\")\n \t    (parallel [(const_int 1)]))))]\n   \"TARGET_SSE2 && !(MEM_P (operands[1]) && MEM_P (operands[2]))\"\n   \"@\n@@ -2774,9 +2788,11 @@\n    movsd\\t{%2, %0|%0, %2}\n    shufpd\\t{$2, %2, %0|%0, %2, 2}\n    movhpd\\t{%H1, %0|%0, %H1}\n+   #\n+   #\n    #\"\n-  [(set_attr \"type\" \"ssemov,ssemov,ssemov,sselog,ssemov,other\")\n-   (set_attr \"mode\" \"DF,V1DF,V1DF,V2DF,V1DF,DF\")])\n+  [(set_attr \"type\" \"ssemov,ssemov,ssemov,sselog,ssemov,ssemov,fmov,imov\")\n+   (set_attr \"mode\" \"DF,V1DF,V1DF,V2DF,V1DF,DF,DF,DF\")])\n \n (define_split\n   [(set (match_operand:V2DF 0 \"memory_operand\" \"\")"}, {"sha": "b1dc9c40eae32b5d6c0e085f19ed8e55f5eb60dc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9", "patch": "@@ -1,3 +1,14 @@\n+2008-08-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/37184\n+\t* gcc.target/i386/pr37184.c: New test.\n+\n+\tPR target/37191\n+\t* gcc.target/i386/pr37191.c: New test.\n+\n+\tPR target/37197\n+\t* gcc.target/i386/pr37197.c: New test.\n+\n 2008-08-22  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/36548"}, {"sha": "14e11f707959b3a7921bb1a786d5b493ab1fc1a4", "filename": "gcc/testsuite/gcc.target/i386/pr37184.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37184.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37184.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37184.c?ref=a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O1\" } */\n+\n+static inline unsigned int\n+rshift_u_s (unsigned int left, int right)\n+{\n+  return left >> right;\n+}\n+\n+unsigned int g_15;\n+\n+int func_29 (int p_30)\n+{\n+  unsigned int l_31;\n+  unsigned long long int l_35 = 0x7736EAE11771B705LL;\n+  unsigned int l_36 = 0xEDB553A8L;\n+\n+  l_31 = g_15;\n+  if ((l_31 <\n+       (rshift_u_s ((g_15 - (g_15 >= l_35)), (l_36 <= 1)))) + mod_rhs (1))\n+    return 1;\n+}\n+"}, {"sha": "b7b65df12b1dd98ec4769af4fbda404db23cb30f", "filename": "gcc/testsuite/gcc.target/i386/pr37191.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37191.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37191.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37191.c?ref=a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -mmmx\" } */\n+\n+#include <mmintrin.h>\n+#include <stddef.h>\n+#include <stdint.h>\n+\n+extern const uint64_t ff_bone;\n+\n+static inline void transpose4x4(uint8_t *dst, uint8_t *src, ptrdiff_t dst_stride, ptrdiff_t src_stride) {\n+    __m64 row0 = _mm_cvtsi32_si64(*(unsigned*)(src + (0 * src_stride)));\n+    __m64 row1 = _mm_cvtsi32_si64(*(unsigned*)(src + (1 * src_stride)));\n+    __m64 row2 = _mm_cvtsi32_si64(*(unsigned*)(src + (2 * src_stride)));\n+    __m64 row3 = _mm_cvtsi32_si64(*(unsigned*)(src + (3 * src_stride)));\n+    __m64 tmp0 = _mm_unpacklo_pi8(row0, row1);\n+    __m64 tmp1 = _mm_unpacklo_pi8(row2, row3);\n+    __m64 row01 = _mm_unpacklo_pi16(tmp0, tmp1);\n+    __m64 row23 = _mm_unpackhi_pi16(tmp0, tmp1);\n+    *((unsigned*)(dst + (0 * dst_stride))) = _mm_cvtsi64_si32(row01);\n+    *((unsigned*)(dst + (1 * dst_stride))) = _mm_cvtsi64_si32(_mm_unpackhi_pi32(row01, row01));\n+    *((unsigned*)(dst + (2 * dst_stride))) = _mm_cvtsi64_si32(row23);\n+    *((unsigned*)(dst + (3 * dst_stride))) = _mm_cvtsi64_si32(_mm_unpackhi_pi32(row23, row23));\n+}\n+\n+static inline void h264_loop_filter_chroma_intra_mmx2(uint8_t *pix, int stride, int alpha1, int beta1)\n+{\n+    asm volatile(\n+        \"\"\n+        :: \"r\"(pix-2*stride), \"r\"(pix), \"r\"((long)stride),\n+           \"m\"(alpha1), \"m\"(beta1), \"m\"(ff_bone)\n+    );\n+}\n+\n+void h264_h_loop_filter_chroma_intra_mmx2(uint8_t *pix, int stride, int alpha, int beta)\n+{\n+\n+    uint8_t trans[8*4] __attribute__ ((aligned (8)));\n+    transpose4x4(trans, pix-2, 8, stride);\n+    transpose4x4(trans+4, pix-2+4*stride, 8, stride);\n+    h264_loop_filter_chroma_intra_mmx2(trans+2*8, 8, alpha-1, beta-1);\n+    transpose4x4(pix-2, trans, stride, 8);\n+    transpose4x4(pix-2+4*stride, trans+4, stride, 8);\n+}"}, {"sha": "95565e8027e81c3f6a004d9ea2980847ea348509", "filename": "gcc/testsuite/gcc.target/i386/pr37197.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37197.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37197.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr37197.c?ref=a3d4a22b01eb61fbc02bafa2788aaf3e497ecef9", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse4\" } */\n+\n+int testl (unsigned long *a, int b)\n+{\n+  return b ? 1 : __builtin_parityl (*a);\n+}"}]}