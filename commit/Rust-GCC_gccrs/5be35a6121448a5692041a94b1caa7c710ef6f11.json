{"sha": "5be35a6121448a5692041a94b1caa7c710ef6f11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJlMzVhNjEyMTQ0OGE1NjkyMDQxYTk0YjFjYWE3YzcxMGVmNmYxMQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-05-31T15:07:32Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-05-31T15:07:32Z"}, "message": "gen-avr-mmcu-texi.c: Sort MCUs.\n\n\t* config/avr/gen-avr-mmcu-texi.c: Sort MCUs. \n\t* doc/avr-mmcu.texi: Regenerate.\n\nFrom-SVN: r188067", "tree": {"sha": "c59bd465688b57fe522c835a931037e6c8f6c271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c59bd465688b57fe522c835a931037e6c8f6c271"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5be35a6121448a5692041a94b1caa7c710ef6f11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5be35a6121448a5692041a94b1caa7c710ef6f11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5be35a6121448a5692041a94b1caa7c710ef6f11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5be35a6121448a5692041a94b1caa7c710ef6f11/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a0563dc567e8d37b30a23ec3c9ee912fc5bcfb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a0563dc567e8d37b30a23ec3c9ee912fc5bcfb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a0563dc567e8d37b30a23ec3c9ee912fc5bcfb8"}], "stats": {"total": 72, "additions": 50, "deletions": 22}, "files": [{"sha": "266f7967c764a4ecf92ec0ac9ee497959974223b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be35a6121448a5692041a94b1caa7c710ef6f11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be35a6121448a5692041a94b1caa7c710ef6f11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5be35a6121448a5692041a94b1caa7c710ef6f11", "patch": "@@ -18,6 +18,11 @@\n \tnumber_of_rw_in_partition, partition_contains_all_rw,\n \tldist_gen): Use partition_t instead of bitmap.\n \n+2012-05-31  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/gen-avr-mmcu-texi.c: Sort MCUs. \n+\t* doc/avr-mmcu.texi: Regenerate.\n+\t\n 2012-05-31  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-loop-distribution.c (stmt_has_scalar_dependences_outside_loop):"}, {"sha": "b5cb3c4a8a4cb94fab7ef6e016f5a32fc872a39c", "filename": "gcc/config/avr/gen-avr-mmcu-texi.c", "status": "modified", "additions": 38, "deletions": 15, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be35a6121448a5692041a94b1caa7c710ef6f11/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be35a6121448a5692041a94b1caa7c710ef6f11/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fgen-avr-mmcu-texi.c?ref=5be35a6121448a5692041a94b1caa7c710ef6f11", "patch": "@@ -20,10 +20,38 @@\n \n #include \"avr-devices.c\"\n \n+static const char*\n+mcu_name[sizeof avr_mcu_types / sizeof avr_mcu_types[0]];\n+\n+static int\n+comparator (const void *va, const void *vb)\n+{\n+  const char* const *a = (const char* const*) va;\n+  const char* const *b = (const char* const*) vb;\n+\n+  return strcmp (*a, *b);\n+} \n+\n+static void\n+print_mcus (size_t n_mcus)\n+{\n+  size_t i;\n+    \n+  if (!n_mcus)\n+    return;\n+    \n+  qsort (mcu_name, n_mcus, sizeof (char*), comparator);\n+\n+  printf (\"@*@var{mcu}@tie{}=\");\n+\n+  for (i = 0; i < n_mcus; i++)\n+    printf (\" @code{%s}%s\", mcu_name[i], i == n_mcus-1 ? \".\\n\\n\" : \",\");\n+}\n+\n int main (void)\n {\n   enum avr_arch arch = 0;\n-  unsigned i, first = 1;\n+  size_t i, n_mcus = 0;\n   const struct mcu_type_s *mcu;\n \n   printf (\"@c Copyright (C) 2012 Free Software Foundation, Inc.\\n\");\n@@ -46,27 +74,22 @@ int main (void)\n         {\n           arch = mcu->arch;\n \n+          /* Start a new architecture:  Flush the MCUs collected so far.  */\n+\n+          print_mcus (n_mcus);\n+          n_mcus = 0;\n+\n           for (i = 0; i < sizeof (avr_texinfo) / sizeof (*avr_texinfo); i++)\n-            {\n-              if (arch == avr_texinfo[i].arch)\n-                {\n-                  if (mcu != avr_mcu_types)\n-                    printf (\".\\n\\n\");\n-                  printf (\"@item %s\\n%s\\n\", mcu->name, avr_texinfo[i].texinfo);\n-                  printf (\"@*@var{mcu}@tie{}=\");\n-                  first = 1;\n-                  break;\n-                }\n-            }\n+            if (arch == avr_texinfo[i].arch)\n+              printf (\"@item %s\\n%s\\n\", mcu->name, avr_texinfo[i].texinfo);\n         }\n       else if (arch == (enum avr_arch) mcu->arch)\n         {\n-          printf (\"%s @code{%s}\", first ? \"\" : \",\", mcu->name);\n-          first = 0;\n+          mcu_name[n_mcus++] = mcu->name;\n         }\n     }\n \n-  printf (\".\\n\\n\");\n+  print_mcus (n_mcus);\n   printf (\"@end table\\n\");\n \n   return EXIT_SUCCESS;"}, {"sha": "ac9c631161a027b38453ac3aa101999111fa0c9c", "filename": "gcc/doc/avr-mmcu.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5be35a6121448a5692041a94b1caa7c710ef6f11/gcc%2Fdoc%2Favr-mmcu.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5be35a6121448a5692041a94b1caa7c710ef6f11/gcc%2Fdoc%2Favr-mmcu.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Favr-mmcu.texi?ref=5be35a6121448a5692041a94b1caa7c710ef6f11", "patch": "@@ -13,35 +13,35 @@\n \n @item avr2\n ``Classic'' devices with up to 8@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{at90s2313}, @code{at90s2323}, @code{at90s2333}, @code{at90s2343}, @code{attiny22}, @code{attiny26}, @code{at90s4414}, @code{at90s4433}, @code{at90s4434}, @code{at90s8515}, @code{at90c8534}, @code{at90s8535}.\n+@*@var{mcu}@tie{}= @code{at90c8534}, @code{at90s2313}, @code{at90s2323}, @code{at90s2333}, @code{at90s2343}, @code{at90s4414}, @code{at90s4433}, @code{at90s4434}, @code{at90s8515}, @code{at90s8535}, @code{attiny22}, @code{attiny26}.\n \n @item avr25\n ``Classic'' devices with up to 8@tie{}KiB of program memory and with the @code{MOVW} instruction.\n-@*@var{mcu}@tie{}= @code{ata6289}, @code{attiny13}, @code{attiny13a}, @code{attiny2313}, @code{attiny2313a}, @code{attiny24}, @code{attiny24a}, @code{attiny4313}, @code{attiny44}, @code{attiny44a}, @code{attiny84}, @code{attiny84a}, @code{attiny25}, @code{attiny45}, @code{attiny85}, @code{attiny261}, @code{attiny261a}, @code{attiny461}, @code{attiny461a}, @code{attiny861}, @code{attiny861a}, @code{attiny43u}, @code{attiny87}, @code{attiny48}, @code{attiny88}, @code{at86rf401}.\n+@*@var{mcu}@tie{}= @code{at86rf401}, @code{ata6289}, @code{attiny13}, @code{attiny13a}, @code{attiny2313}, @code{attiny2313a}, @code{attiny24}, @code{attiny24a}, @code{attiny25}, @code{attiny261}, @code{attiny261a}, @code{attiny4313}, @code{attiny43u}, @code{attiny44}, @code{attiny44a}, @code{attiny45}, @code{attiny461}, @code{attiny461a}, @code{attiny48}, @code{attiny84}, @code{attiny84a}, @code{attiny85}, @code{attiny861}, @code{attiny861a}, @code{attiny87}, @code{attiny88}.\n \n @item avr3\n ``Classic'' devices with 16@tie{}KiB up to 64@tie{}KiB of  program memory.\n @*@var{mcu}@tie{}= @code{at43usb355}, @code{at76c711}.\n \n @item avr31\n ``Classic'' devices with 128@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{atmega103}, @code{at43usb320}.\n+@*@var{mcu}@tie{}= @code{at43usb320}, @code{atmega103}.\n \n @item avr35\n ``Classic'' devices with 16@tie{}KiB up to 64@tie{}KiB of program memory and with the @code{MOVW} instruction.\n-@*@var{mcu}@tie{}= @code{at90usb82}, @code{at90usb162}, @code{atmega8u2}, @code{atmega16u2}, @code{atmega32u2}, @code{attiny167}.\n+@*@var{mcu}@tie{}= @code{at90usb162}, @code{at90usb82}, @code{atmega16u2}, @code{atmega32u2}, @code{atmega8u2}, @code{attiny167}.\n \n @item avr4\n ``Enhanced'' devices with up to 8@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{atmega8}, @code{atmega48}, @code{atmega48a}, @code{atmega48p}, @code{atmega88}, @code{atmega88a}, @code{atmega88p}, @code{atmega88pa}, @code{atmega8515}, @code{atmega8535}, @code{atmega8hva}, @code{at90pwm1}, @code{at90pwm2}, @code{at90pwm2b}, @code{at90pwm3}, @code{at90pwm3b}, @code{at90pwm81}.\n+@*@var{mcu}@tie{}= @code{at90pwm1}, @code{at90pwm2}, @code{at90pwm2b}, @code{at90pwm3}, @code{at90pwm3b}, @code{at90pwm81}, @code{atmega48}, @code{atmega48a}, @code{atmega48p}, @code{atmega8}, @code{atmega8515}, @code{atmega8535}, @code{atmega88}, @code{atmega88a}, @code{atmega88p}, @code{atmega88pa}, @code{atmega8hva}.\n \n @item avr5\n ``Enhanced'' devices with 16@tie{}KiB up to 64@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{atmega16}, @code{atmega16a}, @code{atmega161}, @code{atmega162}, @code{atmega163}, @code{atmega164a}, @code{atmega164p}, @code{atmega165}, @code{atmega165a}, @code{atmega165p}, @code{atmega168}, @code{atmega168a}, @code{atmega168p}, @code{atmega169}, @code{atmega169a}, @code{atmega169p}, @code{atmega169pa}, @code{atmega32}, @code{atmega323}, @code{atmega324a}, @code{atmega324p}, @code{atmega324pa}, @code{atmega325}, @code{atmega325a}, @code{atmega325p}, @code{atmega3250}, @code{atmega3250a}, @code{atmega3250p}, @code{atmega328}, @code{atmega328p}, @code{atmega329}, @code{atmega329a}, @code{atmega329p}, @code{atmega329pa}, @code{atmega3290}, @code{atmega3290a}, @code{atmega3290p}, @code{atmega406}, @code{atmega64}, @code{atmega640}, @code{atmega644}, @code{atmega644a}, @code{atmega644p}, @code{atmega644pa}, @code{atmega645}, @code{atmega645a}, @code{atmega645p}, @code{atmega6450}, @code{atmega6450a}, @code{atmega6450p}, @code{atmega649}, @code{atmega649a}, @code{atmega649p}, @code{atmega6490}, @code{atmega16hva}, @code{atmega16hva2}, @code{atmega16hvb}, @code{atmega32hvb}, @code{atmega64hve}, @code{at90can32}, @code{at90can64}, @code{at90pwm216}, @code{at90pwm316}, @code{atmega32c1}, @code{atmega64c1}, @code{atmega16m1}, @code{atmega32m1}, @code{atmega64m1}, @code{atmega16u4}, @code{atmega32u4}, @code{atmega32u6}, @code{at90scr100}, @code{at90usb646}, @code{at90usb647}, @code{at94k}, @code{m3000}.\n+@*@var{mcu}@tie{}= @code{at90can32}, @code{at90can64}, @code{at90pwm216}, @code{at90pwm316}, @code{at90scr100}, @code{at90usb646}, @code{at90usb647}, @code{at94k}, @code{atmega16}, @code{atmega161}, @code{atmega162}, @code{atmega163}, @code{atmega164a}, @code{atmega164p}, @code{atmega165}, @code{atmega165a}, @code{atmega165p}, @code{atmega168}, @code{atmega168a}, @code{atmega168p}, @code{atmega169}, @code{atmega169a}, @code{atmega169p}, @code{atmega169pa}, @code{atmega16a}, @code{atmega16hva}, @code{atmega16hva2}, @code{atmega16hvb}, @code{atmega16m1}, @code{atmega16u4}, @code{atmega32}, @code{atmega323}, @code{atmega324a}, @code{atmega324p}, @code{atmega324pa}, @code{atmega325}, @code{atmega3250}, @code{atmega3250a}, @code{atmega3250p}, @code{atmega325a}, @code{atmega325p}, @code{atmega328}, @code{atmega328p}, @code{atmega329}, @code{atmega3290}, @code{atmega3290a}, @code{atmega3290p}, @code{atmega329a}, @code{atmega329p}, @code{atmega329pa}, @code{atmega32c1}, @code{atmega32hvb}, @code{atmega32m1}, @code{atmega32u4}, @code{atmega32u6}, @code{atmega406}, @code{atmega64}, @code{atmega640}, @code{atmega644}, @code{atmega644a}, @code{atmega644p}, @code{atmega644pa}, @code{atmega645}, @code{atmega6450}, @code{atmega6450a}, @code{atmega6450p}, @code{atmega645a}, @code{atmega645p}, @code{atmega649}, @code{atmega6490}, @code{atmega649a}, @code{atmega649p}, @code{atmega64c1}, @code{atmega64hve}, @code{atmega64m1}, @code{m3000}.\n \n @item avr51\n ``Enhanced'' devices with 128@tie{}KiB of program memory.\n-@*@var{mcu}@tie{}= @code{atmega128}, @code{atmega1280}, @code{atmega1281}, @code{atmega1284p}, @code{atmega128rfa1}, @code{at90can128}, @code{at90usb1286}, @code{at90usb1287}.\n+@*@var{mcu}@tie{}= @code{at90can128}, @code{at90usb1286}, @code{at90usb1287}, @code{atmega128}, @code{atmega1280}, @code{atmega1281}, @code{atmega1284p}, @code{atmega128rfa1}.\n \n @item avr6\n ``Enhanced'' devices with 3-byte PC, i.e.@: with more than 128@tie{}KiB of program memory."}]}