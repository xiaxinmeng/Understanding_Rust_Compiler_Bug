{"sha": "103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAzZmYwZDY1ZTkwMzNhMmZkZjA1YjRmNGM5Yjc2ODZkOTVlNzhjMA==", "commit": {"author": {"name": "Teresa Johnson", "email": "tejohnson@google.com", "date": "2013-08-29T13:51:04Z"}, "committer": {"name": "Teresa Johnson", "email": "tejohnson@gcc.gnu.org", "date": "2013-08-29T13:51:04Z"}, "message": "dumpfile.c (dump_loc): Output column number.\n\n2013-08-29  Teresa Johnson  <tejohnson@google.com>\n\n\t* dumpfile.c (dump_loc): Output column number.\n\t* dumpfile.h (OPTGROUP_OTHER): Add and enable under OPTGROUP_ALL.\n\t* doc/invoke.texi: Document optall -fopt-info flag.\n\t* profile.c (read_profile_edge_counts): Use new dump framework.\n\t(compute_branch_probabilities): Ditto.\n\t* passes.c (pass_manager::register_one_dump_file): Use OPTGROUP_OTHER\n\twhen pass not in any opt group.\n\t* pass_manager.h (pass_manager::get_pass_profile): New method.\n\t* value-prof.c (check_counter): Use new dump framework.\n\t(check_ic_target): Ditto.\n\t* coverage.c (get_coverage_counts): Ditto.\n\t(coverage_init): Setup new dump framework.\n\n\t* testsuite/gcc.dg/pr40209.c: Use -fopt-info.\n\t* testsuite/gcc.dg/pr26570.c: Ditto.\n\t* testsuite/gcc.dg/pr32773.c: Ditto.\n\t* testsuite/g++.dg/tree-ssa/dom-invalid.C: Ditto.\n\t* testsuite/gcc.dg/inline-dump.c: New test.\n\nFrom-SVN: r202077", "tree": {"sha": "fc61cacb307eeb74176a0b795fc6db1199798047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc61cacb307eeb74176a0b795fc6db1199798047"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/comments", "author": {"login": "teresajohnson", "id": 20446403, "node_id": "MDQ6VXNlcjIwNDQ2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/20446403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/teresajohnson", "html_url": "https://github.com/teresajohnson", "followers_url": "https://api.github.com/users/teresajohnson/followers", "following_url": "https://api.github.com/users/teresajohnson/following{/other_user}", "gists_url": "https://api.github.com/users/teresajohnson/gists{/gist_id}", "starred_url": "https://api.github.com/users/teresajohnson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/teresajohnson/subscriptions", "organizations_url": "https://api.github.com/users/teresajohnson/orgs", "repos_url": "https://api.github.com/users/teresajohnson/repos", "events_url": "https://api.github.com/users/teresajohnson/events{/privacy}", "received_events_url": "https://api.github.com/users/teresajohnson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "301bbc16628d9ca57cd7b0af306fde6753f04911", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/301bbc16628d9ca57cd7b0af306fde6753f04911", "html_url": "https://github.com/Rust-GCC/gccrs/commit/301bbc16628d9ca57cd7b0af306fde6753f04911"}], "stats": {"total": 131, "additions": 97, "deletions": 34}, "files": [{"sha": "fedf7c42007a4336f28261607fe6f64f52c5f40a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0", "patch": "@@ -1,3 +1,24 @@\n+2013-08-29  Teresa Johnson  <tejohnson@google.com>\n+\n+\t* dumpfile.c (dump_loc): Output column number.\n+\t* dumpfile.h (OPTGROUP_OTHER): Add and enable under OPTGROUP_ALL.\n+\t* doc/invoke.texi: Document optall -fopt-info flag.\n+\t* profile.c (read_profile_edge_counts): Use new dump framework.\n+\t(compute_branch_probabilities): Ditto.\n+\t* passes.c (pass_manager::register_one_dump_file): Use OPTGROUP_OTHER\n+\twhen pass not in any opt group.\n+\t* pass_manager.h (pass_manager::get_pass_profile): New method.\n+\t* value-prof.c (check_counter): Use new dump framework.\n+\t(check_ic_target): Ditto.\n+\t* coverage.c (get_coverage_counts): Ditto.\n+\t(coverage_init): Setup new dump framework.\n+\n+\t* testsuite/gcc.dg/pr40209.c: Use -fopt-info.\n+\t* testsuite/gcc.dg/pr26570.c: Ditto.\n+\t* testsuite/gcc.dg/pr32773.c: Ditto.\n+\t* testsuite/g++.dg/tree-ssa/dom-invalid.C: Ditto.\n+\t* testsuite/gcc.dg/inline-dump.c: New test.\n+\n 2013-08-29  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/58246"}, {"sha": "d662e8d094622e7e6c407b42899964bec73649ff", "filename": "gcc/coverage.c", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0", "patch": "@@ -43,6 +43,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"hash-table.h\"\n #include \"tree-iterator.h\"\n+#include \"context.h\"\n+#include \"pass_manager.h\"\n+#include \"tree-pass.h\"\n #include \"cgraph.h\"\n #include \"dumpfile.h\"\n #include \"diagnostic-core.h\"\n@@ -341,11 +344,13 @@ get_coverage_counts (unsigned counter, unsigned expected,\n     {\n       static int warned = 0;\n \n-      if (!warned++)\n-\tinform (input_location, (flag_guess_branch_prob\n-\t\t ? \"file %s not found, execution counts estimated\"\n-\t\t : \"file %s not found, execution counts assumed to be zero\"),\n-\t\tda_file_name);\n+      if (!warned++ && dump_enabled_p ())\n+\tdump_printf_loc (MSG_OPTIMIZED_LOCATIONS, input_location,\n+                         (flag_guess_branch_prob\n+                          ? \"file %s not found, execution counts estimated\"\n+                          : \"file %s not found, execution counts assumed to \"\n+                            \"be zero\"),\n+                         da_file_name);\n       return NULL;\n     }\n \n@@ -369,21 +374,25 @@ get_coverage_counts (unsigned counter, unsigned expected,\n \twarning_at (input_location, OPT_Wcoverage_mismatch,\n \t\t    \"the control flow of function %qE does not match \"\n \t\t    \"its profile data (counter %qs)\", id, ctr_names[counter]);\n-      if (warning_printed)\n+      if (warning_printed && dump_enabled_p ())\n \t{\n-\t inform (input_location, \"use -Wno-error=coverage-mismatch to tolerate \"\n-\t \t \"the mismatch but performance may drop if the function is hot\");\n+          dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, input_location,\n+                           \"use -Wno-error=coverage-mismatch to tolerate \"\n+                           \"the mismatch but performance may drop if the \"\n+                           \"function is hot\");\n \t  \n \t  if (!seen_error ()\n \t      && !warned++)\n \t    {\n-\t      inform (input_location, \"coverage mismatch ignored\");\n-\t      inform (input_location, flag_guess_branch_prob\n-\t\t      ? G_(\"execution counts estimated\")\n-\t\t      : G_(\"execution counts assumed to be zero\"));\n+\t      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, input_location,\n+                               \"coverage mismatch ignored\");\n+\t      dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, input_location,\n+                               flag_guess_branch_prob\n+                               ? G_(\"execution counts estimated\")\n+                               : G_(\"execution counts assumed to be zero\"));\n \t      if (!flag_guess_branch_prob)\n-\t\tinform (input_location,\n-\t\t\t\"this can result in poorly optimized code\");\n+\t\tdump_printf_loc (MSG_OPTIMIZED_LOCATIONS, input_location,\n+                                 \"this can result in poorly optimized code\");\n \t    }\n \t}\n \n@@ -1125,6 +1134,11 @@ coverage_init (const char *filename)\n   int len = strlen (filename);\n   int prefix_len = 0;\n \n+  /* Since coverage_init is invoked very early, before the pass\n+     manager, we need to set up the dumping explicitly. This is\n+     similar to the handling in finish_optimization_passes.  */\n+  dump_start (g->get_passes ()->get_pass_profile ()->static_pass_number, NULL);\n+\n   if (!profile_data_prefix && !IS_ABSOLUTE_PATH (filename))\n     profile_data_prefix = getpwd ();\n \n@@ -1167,6 +1181,8 @@ coverage_init (const char *filename)\n \t  gcov_write_unsigned (bbg_file_stamp);\n \t}\n     }\n+\n+  dump_finish (g->get_passes ()->get_pass_profile ()->static_pass_number);\n }\n \n /* Performs file-level cleanup.  Close notes file, generate coverage"}, {"sha": "0858f2fee69742388c04ef4ee5ce53e5be2661c4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0", "patch": "@@ -6293,6 +6293,9 @@ Enable dumps from all loop optimizations.\n Enable dumps from all inlining optimizations.\n @item vec\n Enable dumps from all vectorization optimizations.\n+@item optall\n+Enable dumps from all optimizations. This is a superset of\n+the optimization groups listed above.\n @end table\n \n For example,"}, {"sha": "6f15634ab7b20f268bdf0b159702fd60d2d136ac", "filename": "gcc/dumpfile.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Fdumpfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Fdumpfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.c?ref=103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0", "patch": "@@ -259,16 +259,16 @@ dump_open_alternate_stream (struct dump_file_info *dfi)\n void\n dump_loc (int dump_kind, FILE *dfile, source_location loc)\n {\n-  /* Currently vectorization passes print location information.  */\n   if (dump_kind)\n     {\n       if (LOCATION_LOCUS (loc) > BUILTINS_LOCATION)\n-        fprintf (dfile, \"\\n%s:%d: note: \", LOCATION_FILE (loc),\n-                 LOCATION_LINE (loc));\n+        fprintf (dfile, \"\\n%s:%d:%d: note: \", LOCATION_FILE (loc),\n+                 LOCATION_LINE (loc), LOCATION_COLUMN (loc));\n       else if (current_function_decl)\n-        fprintf (dfile, \"\\n%s:%d: note: \",\n+        fprintf (dfile, \"\\n%s:%d:%d: note: \",\n                  DECL_SOURCE_FILE (current_function_decl),\n-                 DECL_SOURCE_LINE (current_function_decl));\n+                 DECL_SOURCE_LINE (current_function_decl),\n+                 DECL_SOURCE_COLUMN (current_function_decl));\n     }\n }\n "}, {"sha": "ddc770ab947be5a310218447a3d9ad55cce4ad55", "filename": "gcc/dumpfile.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Fdumpfile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Fdumpfile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdumpfile.h?ref=103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0", "patch": "@@ -98,8 +98,9 @@ enum tree_dump_index\n #define OPTGROUP_LOOP        (1 << 2)   /* Loop optimization passes */\n #define OPTGROUP_INLINE      (1 << 3)   /* Inlining passes */\n #define OPTGROUP_VEC         (1 << 4)   /* Vectorization passes */\n+#define OPTGROUP_OTHER       (1 << 5)   /* All other passes */\n #define OPTGROUP_ALL\t     (OPTGROUP_IPA | OPTGROUP_LOOP | OPTGROUP_INLINE \\\n-                              | OPTGROUP_VEC)\n+                              | OPTGROUP_VEC | OPTGROUP_OTHER)\n \n /* Define a tree dump switch.  */\n struct dump_file_info"}, {"sha": "04c6237d791fb8a19eed19e2db3034a16c80740c", "filename": "gcc/pass_manager.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Fpass_manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Fpass_manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpass_manager.h?ref=103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0", "patch": "@@ -74,6 +74,7 @@ class pass_manager\n     return pass_mode_switching_1;\n   }\n   opt_pass *get_pass_peephole2 () const { return pass_peephole2_1; }\n+  opt_pass *get_pass_profile () const { return pass_profile_1; }\n \n public:\n   /* The root of the compilation pass tree, once constructed.  */"}, {"sha": "bffff412c1748163f02e1b52978282ba7da82be6", "filename": "gcc/passes.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0", "patch": "@@ -676,6 +676,11 @@ pass_manager::register_one_dump_file (struct opt_pass *pass)\n   flag_name = concat (prefix, name, num, NULL);\n   glob_name = concat (prefix, name, NULL);\n   optgroup_flags |= pass->optinfo_flags;\n+  /* For any passes that do not have an optgroup set, and which are not\n+     IPA passes setup above, set the optgroup to OPTGROUP_OTHER so that\n+     any dump messages are emitted properly under -fopt-info(-optall).  */\n+  if (optgroup_flags == OPTGROUP_NONE)\n+    optgroup_flags = OPTGROUP_OTHER;\n   id = dump_register (dot_name, flag_name, glob_name, flags, optgroup_flags);\n   set_pass_for_id (id, pass);\n   full_name = concat (prefix, pass->name, num, NULL);"}, {"sha": "2abde8aec03c949f6c8093a1df06d7e5ec165c50", "filename": "gcc/profile.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0", "patch": "@@ -432,8 +432,8 @@ read_profile_edge_counts (gcov_type *exec_counts)\n \t\t    if (flag_profile_correction)\n \t\t      {\n \t\t\tstatic bool informed = 0;\n-\t\t\tif (!informed)\n-\t\t          inform (input_location,\n+\t\t\tif (dump_enabled_p () && !informed)\n+\t\t          dump_printf_loc (MSG_NOTE, input_location,\n \t\t\t          \"corrupted profile info: edge count exceeds maximal count\");\n \t\t\tinformed = 1;\n \t\t      }\n@@ -692,10 +692,11 @@ compute_branch_probabilities (unsigned cfg_checksum, unsigned lineno_checksum)\n        {\n          /* Inconsistency detected. Make it flow-consistent. */\n          static int informed = 0;\n-         if (informed == 0)\n+         if (dump_enabled_p () && informed == 0)\n            {\n              informed = 1;\n-             inform (input_location, \"correcting inconsistent profile data\");\n+             dump_printf_loc (MSG_NOTE, input_location,\n+                              \"correcting inconsistent profile data\");\n            }\n          correct_negative_edge_counts ();\n          /* Set bb counts to the sum of the outgoing edge counts */"}, {"sha": "91f43ae8c0bf5033bab4cb5ad0127982ea2681d3", "filename": "gcc/testsuite/g++.dg/tree-ssa/dom-invalid.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fdom-invalid.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fdom-invalid.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fdom-invalid.C?ref=103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0", "patch": "@@ -1,7 +1,7 @@\n // PR tree-optimization/39557\n // invalid post-dom info leads to infinite loop\n // { dg-do run }\n-// { dg-options \"-Wall -fno-exceptions -O2 -fprofile-use -fno-rtti\" }\n+// { dg-options \"-Wall -fno-exceptions -O2 -fprofile-use -fopt-info -fno-rtti\" }\n \n struct C\n {"}, {"sha": "e0c9ba6993c0e74d44caeeea6adbe5bbb55aa3d6", "filename": "gcc/testsuite/gcc.dg/inline-dump.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Ftestsuite%2Fgcc.dg%2Finline-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Ftestsuite%2Fgcc.dg%2Finline-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Finline-dump.c?ref=103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0", "patch": "@@ -0,0 +1,11 @@\n+/* Verify that -fopt-info can output correct inline info.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wall -fopt-info-inline=stderr -O2 -fno-early-inlining\" } */\n+static inline int leaf() {\n+  int i, ret = 0;\n+  for (i = 0; i < 10; i++)\n+    ret += i;\n+  return ret;\n+}\n+static inline int foo(void) { return leaf(); } /* { dg-message \"note: leaf .*inlined into bar .*via inline instance foo.*\\n\" } */\n+int bar(void) { return foo(); }"}, {"sha": "71c16f20744d789b7417e931695b16b5c5980503", "filename": "gcc/testsuite/gcc.dg/pr26570.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26570.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26570.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr26570.c?ref=103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fprofile-generate -fprofile-use\" } */\n+/* { dg-options \"-O2 -fprofile-generate -fprofile-use -fopt-info\" } */\n \n unsigned test (unsigned a, unsigned b)\n {"}, {"sha": "19a90195ad39f4efb94d6c42af30bb5fab4fc37e", "filename": "gcc/testsuite/gcc.dg/pr32773.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32773.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32773.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32773.c?ref=103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0", "patch": "@@ -1,6 +1,6 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O -fprofile-use\" } */\n-/* { dg-options \"-O -m4 -fprofile-use\" { target sh-*-* } } */\n+/* { dg-options \"-O -fprofile-use -fopt-info\" } */\n+/* { dg-options \"-O -m4 -fprofile-use -fopt-info\" { target sh-*-* } } */\n \n void foo (int *p)\n {"}, {"sha": "afe131fc5eb74fa3e66b2b4c380a0d344664db39", "filename": "gcc/testsuite/gcc.dg/pr40209.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr40209.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr40209.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr40209.c?ref=103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fprofile-use\" } */\n+/* { dg-options \"-O2 -fprofile-use -fopt-info\" } */\n \n void process(const char *s);\n "}, {"sha": "3aa5c7469eeddbba174441bfe1c3aaf3972c29ce", "filename": "gcc/value-prof.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=103ff0d65e9033a2fdf05b4f4c9b7686d95e78c0", "patch": "@@ -585,9 +585,11 @@ check_counter (gimple stmt, const char * name,\n               : DECL_SOURCE_LOCATION (current_function_decl);\n       if (flag_profile_correction)\n         {\n-\t  inform (locus, \"correcting inconsistent value profile: \"\n-\t\t  \"%s profiler overall count (%d) does not match BB count \"\n-                  \"(%d)\", name, (int)*all, (int)bb_count);\n+          if (dump_enabled_p ())\n+            dump_printf_loc (MSG_MISSED_OPTIMIZATION, locus,\n+                             \"correcting inconsistent value profile: %s \"\n+                             \"profiler overall count (%d) does not match BB \"\n+                             \"count (%d)\", name, (int)*all, (int)bb_count);\n \t  *all = bb_count;\n \t  if (*count > *all)\n             *count = *all;\n@@ -1271,8 +1273,10 @@ check_ic_target (gimple call_stmt, struct cgraph_node *target)\n      return true;\n \n    locus =  gimple_location (call_stmt);\n-   inform (locus, \"Skipping target %s with mismatching types for icall \",\n-           cgraph_node_name (target));\n+   if (dump_enabled_p ())\n+     dump_printf_loc (MSG_MISSED_OPTIMIZATION, locus,\n+                      \"Skipping target %s with mismatching types for icall \",\n+                      cgraph_node_name (target));\n    return false;\n }\n "}]}