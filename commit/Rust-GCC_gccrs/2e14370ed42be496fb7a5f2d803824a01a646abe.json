{"sha": "2e14370ed42be496fb7a5f2d803824a01a646abe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmUxNDM3MGVkNDJiZTQ5NmZiN2E1ZjJkODAzODI0YTAxYTY0NmFiZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-04-03T23:16:19Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-04-03T23:16:19Z"}, "message": "oops\n\nFrom-SVN: r9308", "tree": {"sha": "e156f9206f84e89dd17605e0d43ee56ce428d66d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e156f9206f84e89dd17605e0d43ee56ce428d66d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e14370ed42be496fb7a5f2d803824a01a646abe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e14370ed42be496fb7a5f2d803824a01a646abe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e14370ed42be496fb7a5f2d803824a01a646abe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e14370ed42be496fb7a5f2d803824a01a646abe/comments", "author": null, "committer": null, "parents": [{"sha": "28d29b39bc51b82d6f437cc29fa95b5d1495a2ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d29b39bc51b82d6f437cc29fa95b5d1495a2ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28d29b39bc51b82d6f437cc29fa95b5d1495a2ed"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "b6e9a6b972b6e7d0fd723e7b80f5930cf694d78d", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e14370ed42be496fb7a5f2d803824a01a646abe/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e14370ed42be496fb7a5f2d803824a01a646abe/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=2e14370ed42be496fb7a5f2d803824a01a646abe", "patch": "@@ -2455,6 +2455,9 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t\t all the values of the unsigned type.  */\n \t      if (! TREE_UNSIGNED (result_type))\n \t\t/* OK */;\n+              /* Do not warn if both operands are unsigned.  */\n+              else if (op0_signed == op1_signed)\n+                /* OK */;\n \t      /* Do not warn if the signed quantity is an unsuffixed\n \t\t integer literal (or some static constant expression\n \t\t involving such literals) and it is non-negative.  */"}]}