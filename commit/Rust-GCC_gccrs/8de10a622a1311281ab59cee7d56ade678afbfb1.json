{"sha": "8de10a622a1311281ab59cee7d56ade678afbfb1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRlMTBhNjIyYTEzMTEyODFhYjU5Y2VlN2Q1NmFkZTY3OGFmYmZiMQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-06-25T18:27:59Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2007-06-25T18:27:59Z"}, "message": "re PR fortran/32464 (ICE: USE in contained subroutine)\n\n2007-06-25  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/32464\n\t* resolve.c (check_host_association): Return if the old symbol\n\tis use associated.  Introduce retval to reduce the number of\n\tevaluations of the first-order return value.\n\n\tPR fortran/31494\n\t* match.c (gfc_match_call): If a host associated symbol is not\n\ta subroutine, build a new symtree/symbol in the current name\n\tspace.\n\n\n2007-06-25  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/32464\n\t* gfortran.dg/host_assoc_function_2.f90: New test.\n\n\tPR fortran/31494\n\t* gfortran.dg/host_assoc_call_1.f90: New test.\n\nFrom-SVN: r126000", "tree": {"sha": "7fff192c314fb9c9590eb4ed4bfd48f36a7d9f0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fff192c314fb9c9590eb4ed4bfd48f36a7d9f0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8de10a622a1311281ab59cee7d56ade678afbfb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de10a622a1311281ab59cee7d56ade678afbfb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8de10a622a1311281ab59cee7d56ade678afbfb1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de10a622a1311281ab59cee7d56ade678afbfb1/comments", "author": null, "committer": null, "parents": [{"sha": "c861db6620d5f4bdac9f361b678697ea7350dbd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c861db6620d5f4bdac9f361b678697ea7350dbd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c861db6620d5f4bdac9f361b678697ea7350dbd7"}], "stats": {"total": 111, "additions": 104, "deletions": 7}, "files": [{"sha": "5b697d14c0c7215be07503f5c8876494f5efae6d", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de10a622a1311281ab59cee7d56ade678afbfb1/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de10a622a1311281ab59cee7d56ade678afbfb1/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8de10a622a1311281ab59cee7d56ade678afbfb1", "patch": "@@ -1,3 +1,15 @@\n+2007-06-25  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/32464\n+\t* resolve.c (check_host_association): Return if the old symbol\n+\tis use associated.  Introduce retval to reduce the number of\n+\tevaluations of the first-order return value.\n+\n+\tPR fortran/31494\n+\t* match.c (gfc_match_call): If a host associated symbol is not\n+\ta subroutine, build a new symtree/symbol in the current name\n+\tspace.\n+\n 2007-06-24  Tobias Burnus  <burnus@net-de>\n \n \tPR fortran/32460"}, {"sha": "ee376f5640e5a57e8783baf70d6d12f66fa0db7f", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de10a622a1311281ab59cee7d56ade678afbfb1/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de10a622a1311281ab59cee7d56ade678afbfb1/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=8de10a622a1311281ab59cee7d56ade678afbfb1", "patch": "@@ -2170,13 +2170,20 @@ gfc_match_call (void)\n     return MATCH_ERROR;\n \n   sym = st->n.sym;\n-  gfc_set_sym_referenced (sym);\n \n-  if (!sym->attr.generic\n-      && !sym->attr.subroutine\n-      && gfc_add_subroutine (&sym->attr, sym->name, NULL) == FAILURE)\n+  if (sym->ns != gfc_current_ns\n+\t&& !sym->attr.generic\n+\t&& !sym->attr.subroutine\n+        && gfc_get_sym_tree (name, NULL, &st) == 1)\n     return MATCH_ERROR;\n \n+  sym = st->n.sym;\n+\n+  if (gfc_add_subroutine (&sym->attr, sym->name, NULL) == FAILURE)\n+    return MATCH_ERROR;\n+\n+  gfc_set_sym_referenced (sym);\n+\n   if (gfc_match_eos () != MATCH_YES)\n     {\n       m = gfc_match_actual_arglist (1, &arglist);"}, {"sha": "bc6ba02d44a86ed420111091b8fc77ab039c3c86", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de10a622a1311281ab59cee7d56ade678afbfb1/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de10a622a1311281ab59cee7d56ade678afbfb1/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=8de10a622a1311281ab59cee7d56ade678afbfb1", "patch": "@@ -3224,11 +3224,16 @@ check_host_association (gfc_expr *e)\n   locus temp_locus;\n   gfc_expr *expr;\n   int n;\n+  bool retval = e->expr_type == EXPR_FUNCTION;\n \n   if (e->symtree == NULL || e->symtree->n.sym == NULL)\n-    return e->expr_type == EXPR_FUNCTION;\n+    return retval;\n \n   old_sym = e->symtree->n.sym;\n+\n+  if (old_sym->attr.use_assoc)\n+    return retval;\n+\n   if (gfc_current_ns->parent\n \t&& gfc_current_ns->parent->parent\n \t&& old_sym->ns != gfc_current_ns)\n@@ -3244,7 +3249,7 @@ check_host_association (gfc_expr *e)\n \t  gfc_free_ref_list (e->ref);\n \t  e->ref = NULL;\n \n-\t  if (e->expr_type == EXPR_FUNCTION)\n+\t  if (retval)\n \t    {\n \t      gfc_free_actual_arglist (e->value.function.actual);\n \t      e->value.function.actual = NULL;\n@@ -3271,7 +3276,7 @@ check_host_association (gfc_expr *e)\n \t  gfc_current_locus = temp_locus;\n \t}\n     }\n-\n+  /* This might have changed!  */\n   return e->expr_type == EXPR_FUNCTION;\n }\n "}, {"sha": "eb9251f094c62ea6418f99e7fb3363d0c0202f96", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de10a622a1311281ab59cee7d56ade678afbfb1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de10a622a1311281ab59cee7d56ade678afbfb1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8de10a622a1311281ab59cee7d56ade678afbfb1", "patch": "@@ -1,3 +1,11 @@\n+2007-06-25  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/32464\n+\t* gfortran.dg/host_assoc_function_2.f90: New test.\n+\n+\tPR fortran/31494\n+\t* gfortran.dg/host_assoc_call_1.f90: New test.\n+\n 2007-06-24  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \t* gfortran.dg/secnds-1.f: Revise test to reduce random errors."}, {"sha": "804929080a18cd5df125179ce89f62d276f61d31", "filename": "gcc/testsuite/gfortran.dg/host_assoc_call_1.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de10a622a1311281ab59cee7d56ade678afbfb1/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_call_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de10a622a1311281ab59cee7d56ade678afbfb1/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_call_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_call_1.f90?ref=8de10a622a1311281ab59cee7d56ade678afbfb1", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do compile }\n+! Tests the fix for PR31494, where the call of sub2 would reference\n+! the variable, rather than the contained subroutine.\n+!\n+! Contributed by Michael Richmond <michael.a.richmond@nasa.gov>\n+!\n+MODULE ksbin2_aux_mod\n+REAL, DIMENSION(1) :: sub2\n+CONTAINS\n+  SUBROUTINE sub1\n+    CALL sub2\n+    CONTAINS \n+      SUBROUTINE sub2\n+      END SUBROUTINE sub2\n+  END SUBROUTINE sub1\n+END MODULE ksbin2_aux_mod\n+! { dg-final { cleanup-modules \"ksbin2_aux_mod\" } }"}, {"sha": "5d63d7aa378fef73d8f9a1671727f7bc2b49164c", "filename": "gcc/testsuite/gfortran.dg/host_assoc_function_2.f90", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8de10a622a1311281ab59cee7d56ade678afbfb1/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_function_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8de10a622a1311281ab59cee7d56ade678afbfb1/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_function_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fhost_assoc_function_2.f90?ref=8de10a622a1311281ab59cee7d56ade678afbfb1", "patch": "@@ -0,0 +1,48 @@\n+! { dg-do compile }\n+! Tests the fix for PR32464, where the use associated procedure would\n+! mess up the check for \"grandparent\" host association.\n+!\n+! Contributed by Harald Anlauf <anlauf@gmx.de>\n+!\n+\n+module gfcbug64_mod1\n+  implicit none\n+\n+  public :: inverse\n+\n+  interface inverse\n+     module procedure copy\n+  end interface\n+\n+contains\n+\n+  function copy (d) result (y)\n+    real, intent(in) :: d(:)\n+    real             :: y(size (d))     ! <- this version kills gfortran\n+!    real, intent(in) :: d\n+!    real             :: y\n+    y = d\n+  end function copy\n+\n+end module gfcbug64_mod1\n+\n+!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n+\n+module gfcbug64_mod2\n+  implicit none\n+contains\n+\n+  subroutine foo (x_o)\n+    real, intent(in) :: x_o(:)\n+\n+    integer          :: s(size (x_o))           ! <- this line kills gfortran\n+\n+  contains\n+\n+    subroutine bar ()\n+      use gfcbug64_mod1, only: inverse          ! <- this line kills gfortran\n+    end subroutine bar\n+\n+  end subroutine foo\n+end module gfcbug64_mod2\n+! { dg-final { cleanup-modules \"gfcbug64_mod1 gfcbug64_mod2\" } }"}]}