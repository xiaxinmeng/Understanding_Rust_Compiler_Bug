{"sha": "57fd5f9525f36d3df45345c343e4086aaa452750", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdmZDVmOTUyNWYzNmQzZGY0NTM0NWMzNDNlNDA4NmFhYTQ1Mjc1MA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-03-22T13:55:11Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-03-22T13:55:11Z"}, "message": "base.h (_PseudoSequence): Do not forward declare.\n\n2010-03-22  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/parallel/base.h (_PseudoSequence): Do not forward declare.\n\t(_VoidFunctor): Remove, unused.\n\t(__median_of_three_iterators): Take __comp by value.\n\t(_PseudoSequenceIterator<>::operator++(int)): Do not const qualify\n\tthe return type.\n\t(_PseudoSequenceIterator<>::operator!=): Fix return type to bool.\n\nFrom-SVN: r157628", "tree": {"sha": "f34a0200952a36d3f4b25dffbcc22ea2c9d868b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f34a0200952a36d3f4b25dffbcc22ea2c9d868b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57fd5f9525f36d3df45345c343e4086aaa452750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57fd5f9525f36d3df45345c343e4086aaa452750", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57fd5f9525f36d3df45345c343e4086aaa452750", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57fd5f9525f36d3df45345c343e4086aaa452750/comments", "author": null, "committer": null, "parents": [{"sha": "6d7971b832cbd7046e04184bbf140d9e6c30ff18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d7971b832cbd7046e04184bbf140d9e6c30ff18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d7971b832cbd7046e04184bbf140d9e6c30ff18"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "dac1b8ef5ccafb635e4ffe242a3966fa36086e0d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57fd5f9525f36d3df45345c343e4086aaa452750/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57fd5f9525f36d3df45345c343e4086aaa452750/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=57fd5f9525f36d3df45345c343e4086aaa452750", "patch": "@@ -1,3 +1,12 @@\n+2010-03-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/parallel/base.h (_PseudoSequence): Do not forward declare.\n+\t(_VoidFunctor): Remove, unused.\n+\t(__median_of_three_iterators): Take __comp by value.\n+\t(_PseudoSequenceIterator<>::operator++(int)): Do not const qualify\n+\tthe return type.\n+\t(_PseudoSequenceIterator<>::operator!=): Fix return type to bool.\n+\n 2010-03-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/parallel/base.h (_Less): Use std::less."}, {"sha": "1a8c3cb60a8dc16e3348757613ab8f4af7ea45d0", "filename": "libstdc++-v3/include/parallel/base.h", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57fd5f9525f36d3df45345c343e4086aaa452750/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57fd5f9525f36d3df45345c343e4086aaa452750/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fparallel%2Fbase.h?ref=57fd5f9525f36d3df45345c343e4086aaa452750", "patch": "@@ -297,9 +297,6 @@ namespace __gnu_parallel\n     struct _Multiplies<_Tp, _Tp, _Tp>\n     : public std::multiplies<_Tp> { };\n \n-  template<typename _Tp, typename _DifferenceTp>\n-    class _PseudoSequence;\n-\n   /** @brief _Iterator associated with __gnu_parallel::_PseudoSequence.\n    *  If features the usual random-access iterator functionality.\n    *  @param _Tp Sequence _M_value type.\n@@ -311,11 +308,6 @@ namespace __gnu_parallel\n     public:\n       typedef _DifferenceTp _DifferenceType;\n \n-    private:\n-      const _Tp& _M_val;\n-      _DifferenceType _M_pos;\n-\n-    public:\n       _PseudoSequenceIterator(const _Tp& __val, _DifferenceType __pos)\n       : _M_val(__val), _M_pos(__pos) { }\n \n@@ -328,7 +320,7 @@ namespace __gnu_parallel\n       }\n \n       // Post-increment operator.\n-      const _PseudoSequenceIterator\n+      _PseudoSequenceIterator\n       operator++(int)\n       { return _PseudoSequenceIterator(_M_pos++); }\n \n@@ -344,13 +336,17 @@ namespace __gnu_parallel\n       operator==(const _PseudoSequenceIterator& __i2)\n       { return _M_pos == __i2._M_pos; }\n \n-      _DifferenceType\n+      bool\n       operator!=(const _PseudoSequenceIterator& __i2)\n       { return _M_pos != __i2._M_pos; }\n \n       _DifferenceType\n       operator-(const _PseudoSequenceIterator& __i2)\n       { return _M_pos - __i2._M_pos; }\n+\n+    private:\n+      const _Tp& _M_val;\n+      _DifferenceType _M_pos;\n     };\n \n   /** @brief Sequence that conceptually consists of multiple copies of\n@@ -390,14 +386,6 @@ namespace __gnu_parallel\n       _DifferenceType _M_count;\n     };\n \n-  /** @brief Functor that does nothing */\n-  template<typename _ValueTp>\n-    class _VoidFunctor\n-    {\n-      inline void\n-      operator()(const _ValueTp& __v) const { }\n-    };\n-\n   /** @brief Compute the median of three referenced elements,\n       according to @c __comp.\n       *  @param __a First iterator.\n@@ -408,7 +396,7 @@ namespace __gnu_parallel\n   template<typename _RAIter, typename _Compare>\n     _RAIter\n     __median_of_three_iterators(_RAIter __a, _RAIter __b,\n-\t\t\t\t_RAIter __c, _Compare& __comp)\n+\t\t\t\t_RAIter __c, _Compare __comp)\n     {\n       if (__comp(*__a, *__b))\n \tif (__comp(*__b, *__c))"}]}