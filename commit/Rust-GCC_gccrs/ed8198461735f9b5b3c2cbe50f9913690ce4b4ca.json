{"sha": "ed8198461735f9b5b3c2cbe50f9913690ce4b4ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ4MTk4NDYxNzM1ZjliNWIzYzJjYmU1MGY5OTEzNjkwY2U0YjRjYQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-03-02T10:12:58Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2021-03-15T15:48:14Z"}, "message": "coroutines : Avoid generating empty statements [PR96749].\n\nIn the compiler-only idiom:\n\" a = (target expr creats temp, op uses temp) \"\nthe target expression variable needs to be promoted to a frame one\n(if the expression has a suspend point).  However, the only uses of\nthe var are in the second part of the compound expression - and we\nwere creating an empty statement corresponding to the (now unused)\nfirst arm.  This then produces the spurious warnings noted.\n\nFixed by avoiding generation of a separate variable nest for\nisolated target expressions (or similarly isolated co_awaits used\nin a function call).\n\ngcc/cp/ChangeLog:\n\n\tPR c++/96749\n\t* coroutines.cc (flatten_await_stmt): Allow for the case\n\twhere a target expression variable only has uses in the\n\tsecond part of a compound expression.\n\t(maybe_promote_temps): Avoid emiting empty statements.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/96749\n\t* g++.dg/coroutines/pr96749-1.C: New test.\n\t* g++.dg/coroutines/pr96749-2.C: New test.", "tree": {"sha": "bc006f141a585245c004dab651a040252b7998be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc006f141a585245c004dab651a040252b7998be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed8198461735f9b5b3c2cbe50f9913690ce4b4ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed8198461735f9b5b3c2cbe50f9913690ce4b4ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed8198461735f9b5b3c2cbe50f9913690ce4b4ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed8198461735f9b5b3c2cbe50f9913690ce4b4ca/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f4b0ff2b1fbd58669ae130387c7535110300c52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f4b0ff2b1fbd58669ae130387c7535110300c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f4b0ff2b1fbd58669ae130387c7535110300c52"}], "stats": {"total": 143, "additions": 123, "deletions": 20}, "files": [{"sha": "712431583d53d19084079c78a4a93ffe111d1991", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 44, "deletions": 20, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8198461735f9b5b3c2cbe50f9913690ce4b4ca/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8198461735f9b5b3c2cbe50f9913690ce4b4ca/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=ed8198461735f9b5b3c2cbe50f9913690ce4b4ca", "patch": "@@ -2955,7 +2955,9 @@ flatten_await_stmt (var_nest_node *n, hash_set<tree> *promoted,\n \tbreak;\n       case TARGET_EXPR:\n \t{\n-\t  /* We have a temporary; promote it.  */\n+\t  /* We have a temporary; promote it, but allow for the idiom in code\n+\t     generated by the compiler like\n+\t     a = (target_expr produces temp, op uses temp).  */\n \t  tree init = t;\n \t  temps_used->add (init);\n \t  tree var_type = TREE_TYPE (init);\n@@ -2976,20 +2978,35 @@ flatten_await_stmt (var_nest_node *n, hash_set<tree> *promoted,\n \t    }\n \t  else\n \t    init = build2 (INIT_EXPR, var_type, var, init);\n-\t  var_nest_node *ins\n-\t    = new var_nest_node (var, init, n->prev, n);\n-\t  /* We have to replace the target expr... */\n-\t  *v.entry = var;\n-\t  /* ... and any uses of its var.  */\n-\t  proxy_replace pr = {TREE_OPERAND (t, 0), var};\n-\t  cp_walk_tree (&n->init, replace_proxy, &pr, NULL);\n-\t  /* Compiler-generated temporaries can also have uses in following\n-\t     arms of compound expressions, which will be listed in 'replace_in'\n-\t     if present.  */\n-\t  if (replace_in)\n-\t    cp_walk_tree (replace_in, replace_proxy, &pr, NULL);\n-\t  flatten_await_stmt (ins, promoted, temps_used, NULL);\n-\t  flatten_await_stmt (n, promoted, temps_used, NULL);\n+\t  /* Simplify for the case that we have an init containing the temp\n+\t     alone.  */\n+\t  if (t == n->init && n->var == NULL_TREE)\n+\t    {\n+\t      n->var = var;\n+\t      proxy_replace pr = {TREE_OPERAND (t, 0), var};\n+\t      cp_walk_tree (&init, replace_proxy, &pr, NULL);\n+\t      n->init = init;\n+\t      if (replace_in)\n+\t\tcp_walk_tree (replace_in, replace_proxy, &pr, NULL);\n+\t      flatten_await_stmt (n, promoted, temps_used, NULL);\n+\t    }\n+\t  else\n+\t    {\n+\t      var_nest_node *ins\n+\t\t= new var_nest_node (var, init, n->prev, n);\n+\t      /* We have to replace the target expr... */\n+\t      *v.entry = var;\n+\t      /* ... and any uses of its var.  */\n+\t      proxy_replace pr = {TREE_OPERAND (t, 0), var};\n+\t      cp_walk_tree (&n->init, replace_proxy, &pr, NULL);\n+\t      /* Compiler-generated temporaries can also have uses in\n+\t\t following arms of compound expressions, which will be listed\n+\t\t in 'replace_in' if present.  */\n+\t      if (replace_in)\n+\t\tcp_walk_tree (replace_in, replace_proxy, &pr, NULL);\n+\t      flatten_await_stmt (ins, promoted, temps_used, NULL);\n+\t      flatten_await_stmt (n, promoted, temps_used, NULL);\n+\t    }\n \t  return;\n \t}\n \tbreak;\n@@ -3178,7 +3195,6 @@ maybe_promote_temps (tree *stmt, void *d)\n   gcc_checking_assert (root->next == NULL);\n   tree vlist = NULL_TREE;\n   var_nest_node *t = root;\n-  gcc_checking_assert (!t->var);\n   /* We build the bind scope expression from the bottom-up.\n      EXPR_LIST holds the inner expression nest at the current cleanup\n      level (becoming the final expression list when we've exhausted the\n@@ -3214,9 +3230,12 @@ maybe_promote_temps (tree *stmt, void *d)\n \t      add_stmt (cl); /* push this onto the level above.  */\n \t    }\n \t  else if (expr_list)\n-\t    add_stmt (expr_list);\n-\t  else\n-\t    gcc_unreachable ();\n+\t    {\n+\t      if (TREE_CODE (expr_list) != STATEMENT_LIST)\n+\t\tadd_stmt (expr_list);\n+\t      else if (!tsi_end_p (tsi_start (expr_list)))\n+\t\tadd_stmt (expr_list);\n+\t    }\n \t}\n       else\n \t{\n@@ -3225,7 +3244,12 @@ maybe_promote_temps (tree *stmt, void *d)\n \t  else\n \t    finish_expr_stmt (t->init);\n \t  if (expr_list)\n-\t    add_stmt (expr_list);\n+\t    {\n+\t      if (TREE_CODE (expr_list) != STATEMENT_LIST)\n+\t\tadd_stmt (expr_list);\n+\t      else if (!tsi_end_p (tsi_start (expr_list)))\n+\t\tadd_stmt (expr_list);\n+\t    }\n \t}\n       expr_list = pop_stmt_list (new_list);\n       var_nest_node *old = t;"}, {"sha": "941a64e6379540c668e03a8e79422254eb0cde85", "filename": "gcc/testsuite/g++.dg/coroutines/pr96749-1.C", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8198461735f9b5b3c2cbe50f9913690ce4b4ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr96749-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8198461735f9b5b3c2cbe50f9913690ce4b4ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr96749-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr96749-1.C?ref=ed8198461735f9b5b3c2cbe50f9913690ce4b4ca", "patch": "@@ -0,0 +1,42 @@\n+//  { dg-additional-options \"-Wall\" }\n+\n+#include <coroutine>\n+\n+template <typename _Tp> struct promise;\n+template <typename _Tp> struct task {\n+\tusing promise_type = promise<_Tp>;\n+\tbool await_ready() noexcept { return false; }\n+\tvoid await_suspend(std::coroutine_handle<> awaiter) noexcept { m_a = awaiter; }\n+\tauto await_resume() { return _Tp(); }\n+\tstd::coroutine_handle<> m_a;\n+};\n+\n+template <typename _Tp> struct promise {\n+\tauto get_return_object() noexcept { return task<_Tp>(); }\n+\tauto initial_suspend() noexcept { return std::suspend_always(); }\n+\tauto final_suspend() noexcept { return std::suspend_always(); }\n+\tvoid return_value(_Tp value) noexcept { m_v = value; }\n+\tvoid unhandled_exception() noexcept {}\n+\t_Tp m_v;\n+};\n+\n+task<int> test_coro(void) {\n+\tint r = 0;\n+#if 1\n+\t// this code causes the unexpected warning below\n+\tr += co_await task<int>();\n+#else\n+\t// this code causes no warning\n+\tauto b = co_await task<int>();\n+\tr += b;\n+#endif\n+\tco_return r;\n+\t// test1.cpp: In function \u2018task<int> test_coro(int)\u2019:\n+\t// test1.cpp:36:1: warning: statement has no effect [-Wunused-value]\n+\t//   36 | }\n+\t//      | ^\n+}\n+\n+int main(void) {\n+\treturn 0;\n+}"}, {"sha": "43052b57dd9cc01cacb46fb239853547fe53950a", "filename": "gcc/testsuite/g++.dg/coroutines/pr96749-2.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed8198461735f9b5b3c2cbe50f9913690ce4b4ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr96749-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed8198461735f9b5b3c2cbe50f9913690ce4b4ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr96749-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr96749-2.C?ref=ed8198461735f9b5b3c2cbe50f9913690ce4b4ca", "patch": "@@ -0,0 +1,37 @@\n+//  { dg-additional-options \"-Wall\" }\n+\n+#include <coroutine>\n+\n+#if 1\n+// with a struct, GCC emits \"statement has no effect\"\n+struct S {};\n+#else\n+// no warning with built-in types\n+using S = int;\n+#endif\n+\n+S Func1(int);\n+\n+struct C {\n+\tauto operator co_await() {\n+\t\tstruct Awaitable final {\n+\t\t\tbool await_ready() const { return true; }\n+\t\t\tstd::coroutine_handle<> await_suspend(std::coroutine_handle<>) { return {}; }\n+\t\t\tint await_resume() { return 42; }\n+\t\t};\n+\t\treturn Awaitable{};\n+\t}\n+};\n+\n+struct Task {\n+\tstruct promise_type {\n+\t\tauto initial_suspend() { return std::suspend_always{}; }\n+\t\tauto final_suspend() noexcept { return std::suspend_always{}; }\n+\t\tvoid get_return_object() {}\n+\t\tvoid unhandled_exception() {}\n+\t};\n+};\n+\n+Task Func2() {\n+\tFunc1(co_await C());\n+}"}]}