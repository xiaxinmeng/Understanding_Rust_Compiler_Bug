{"sha": "c4636dd18891a3e24592f399e79d8a4c0539dfc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQ2MzZkZDE4ODkxYTNlMjQ1OTJmMzk5ZTc5ZDhhNGMwNTM5ZGZjMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2001-02-05T04:11:54Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2001-02-05T04:11:54Z"}, "message": "avr.h (ASM_OUTPUT_REG_PUSH, [...]): Call abort instead of fatal.\n\n\t* config/avr/avr.h (ASM_OUTPUT_REG_PUSH, ASM_OUTPUT_REG_POP):\n\tCall abort instead of fatal.\n\t(TRAMPOLINE_TEMPLATE): Call internal_error instead of fatal.\n\t* config/dsp16xx/dsp16xx.h (FUNCTION_PROFILER): Likewise.\n\t(FUNCTION_BLOCK_PROFILER, BLOCK_PROFILER): Likewise.\n\t(TRAMPOLINE_TEMPLATE, INITIALIZE_TRAMPOLINE): Likewise.\n\t(ASM_OUTPUT_REG_PUSH, ASM_OUTPUT_REG_POP): Likewise.\n\t* config/rs6000/rs6000.h (RETURN_ADDRESS_OFFSET): Likewise.\n\nFrom-SVN: r39448", "tree": {"sha": "5cae7b3e928e00fba2e29f2b0faa38793f9ad0e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cae7b3e928e00fba2e29f2b0faa38793f9ad0e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4636dd18891a3e24592f399e79d8a4c0539dfc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4636dd18891a3e24592f399e79d8a4c0539dfc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4636dd18891a3e24592f399e79d8a4c0539dfc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4636dd18891a3e24592f399e79d8a4c0539dfc1/comments", "author": null, "committer": null, "parents": [{"sha": "0ba434e0f8e5563b77de97e34c2509964541380b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ba434e0f8e5563b77de97e34c2509964541380b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ba434e0f8e5563b77de97e34c2509964541380b"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "ec03704343a556ba636fc899493fb4d856091641", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4636dd18891a3e24592f399e79d8a4c0539dfc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4636dd18891a3e24592f399e79d8a4c0539dfc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4636dd18891a3e24592f399e79d8a4c0539dfc1", "patch": "@@ -8,6 +8,15 @@\n \n Sun Feb  4 15:52:44 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n+\t* config/avr/avr.h (ASM_OUTPUT_REG_PUSH, ASM_OUTPUT_REG_POP):\n+\tCall abort instead of fatal.\n+\t(TRAMPOLINE_TEMPLATE): Call internal_error instead of fatal.\n+\t* config/dsp16xx/dsp16xx.h (FUNCTION_PROFILER): Likewise.\n+\t(FUNCTION_BLOCK_PROFILER, BLOCK_PROFILER): Likewise.\n+\t(TRAMPOLINE_TEMPLATE, INITIALIZE_TRAMPOLINE): Likewise.\n+\t(ASM_OUTPUT_REG_PUSH, ASM_OUTPUT_REG_POP): Likewise.\n+\t* config/rs6000/rs6000.h (RETURN_ADDRESS_OFFSET): Likewise.\n+\n \t* diagnostic.h (set_internal_error_function): Renamed.\n \t* toplev.h (internal_error): Renamed from fatal.\n \t(pfatal_with_name): Deleted."}, {"sha": "34566b62e50ae5d556d7cce187b1fcb8b05f739b", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4636dd18891a3e24592f399e79d8a4c0539dfc1/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4636dd18891a3e24592f399e79d8a4c0539dfc1/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=c4636dd18891a3e24592f399e79d8a4c0539dfc1", "patch": "@@ -1,6 +1,5 @@\n /* Definitions of target machine for GNU compiler,\n    for ATMEL AVR at90s8515, ATmega103/103L, ATmega603/603L microcontrollers.\n-\n    Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n    Contributed by Denis Chertykov (denisc@overta.ru)\n \n@@ -2695,7 +2694,7 @@ sprintf (STRING, \"*.%s%d\", PREFIX, NUM)\n #define ASM_OUTPUT_REG_PUSH(STREAM, REGNO)\t\\\n {\t\t\t\t\t\t\\\n   if (REGNO > 31)\t\t\t\t\\\n-    fatal(\"regno error in push\");\t\t\\\n+    abort ();\t\t\t\t\t\\\n   fprintf (STREAM, \"\\tpush\\tr%d\", REGNO);\t\\\n }\n /* A C expression to output to STREAM some assembler code which will\n@@ -2705,7 +2704,7 @@ sprintf (STRING, \"*.%s%d\", PREFIX, NUM)\n #define ASM_OUTPUT_REG_POP(STREAM, REGNO)\t\\\n {\t\t\t\t\t\t\\\n   if (REGNO > 31)\t\t\t\t\\\n-    fatal(\"regno error in pop\");\t\t\\\n+    abort ();\t\t\t\t\t\\\n   fprintf (STREAM, \"\\tpop\\tr%d\", REGNO);\t\\\n }\n /* A C expression to output to STREAM some assembler code which will\n@@ -2896,7 +2895,8 @@ valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n \n \n \n-#define TRAMPOLINE_TEMPLATE(FILE) fatal (\"Trampolines not supported\\n\")\n+#define TRAMPOLINE_TEMPLATE(FILE) \\\n+  internal_error (\"Trampolines not supported\\n\")\n \n /* Length in units of the trampoline for entering a nested function.  */\n "}, {"sha": "86ff76f63123b7a04f9dec99c51d454938d927ac", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4636dd18891a3e24592f399e79d8a4c0539dfc1/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4636dd18891a3e24592f399e79d8a4c0539dfc1/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=c4636dd18891a3e24592f399e79d8a4c0539dfc1", "patch": "@@ -1184,15 +1184,18 @@ extern struct dsp16xx_frame_info current_frame_info;\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry. */\n \n-#define FUNCTION_PROFILER(FILE, LABELNO)        fatal(\"Profiling not implemented yet.\")\n+#define FUNCTION_PROFILER(FILE, LABELNO)        \\\n+  internal_error (\"Profiling not implemented yet.\")\n \n /* Output assembler code to FILE to initialize this source file's\n    basic block profiling info, if that has not already been done. */\n-#define FUNCTION_BLOCK_PROFILER(FILE, LABELNO)  fatal(\"Profiling not implemented yet.\")\n+#define FUNCTION_BLOCK_PROFILER(FILE, LABELNO)  \\\n+  internal_error (\"Profiling not implemented yet.\")\n \n /* Output assembler code to FILE to increment the entry-count for\n    the BLOCKNO'th basic block in this source file. */\n-#define BLOCK_PROFILER(FILE, BLOCKNO)\t        fatal(\"Profiling not implemented yet.\")\n+#define BLOCK_PROFILER(FILE, BLOCKNO)\t        \\\n+  internal_error (\"Profiling not implemented yet.\")\n \n \n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n@@ -1202,7 +1205,8 @@ extern struct dsp16xx_frame_info current_frame_info;\n \n #define EXIT_IGNORE_STACK  (0)\n \n-#define TRAMPOLINE_TEMPLATE(FILE) fatal (\"Trampolines not yet implemented\");\n+#define TRAMPOLINE_TEMPLATE(FILE) \\\n+  internal_error (\"Trampolines not yet implemented\");\n \n /* Length in units of the trampoline for entering a nested function.\n    This is a dummy value  */\n@@ -1214,7 +1218,7 @@ extern struct dsp16xx_frame_info current_frame_info;\n    CXT is an RTX for the static chain value for the function. */\n \n #define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n-  fatal (\"Trampolines not yet implemented\");\n+  internal_error (\"Trampolines not yet implemented\");\n \n /* This macro generates the assembly code for function exit,\n    on machines that need it.  If FUNCTION_EPILOGUE is not defined\n@@ -1835,11 +1839,13 @@ const_section ()                                                   \\\n \n /* This is how to output an insn to push a register on the stack.\n    It need not be very fast code since it is used only for profiling  */\n-#define ASM_OUTPUT_REG_PUSH(FILE,REGNO)    fatal(\"Profiling not implemented yet.\");\n+#define ASM_OUTPUT_REG_PUSH(FILE,REGNO)    \\\n+  internal_error (\"Profiling not implemented yet.\");\n \n /* This is how to output an insn to pop a register from the stack.\n    It need not be very fast code since it is used only for profiling  */\n-#define ASM_OUTPUT_REG_POP(FILE,REGNO)     fatal(\"Profiling not implemented yet.\"); \n+#define ASM_OUTPUT_REG_POP(FILE,REGNO)     \\\n+  internal_error (\"Profiling not implemented yet.\"); \n \f\n /* OUTPUT OF DISPATCH TABLES */\n "}, {"sha": "fc70c506c3a644eb8bb4ac13724a482979d78238", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4636dd18891a3e24592f399e79d8a4c0539dfc1/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4636dd18891a3e24592f399e79d8a4c0539dfc1/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=c4636dd18891a3e24592f399e79d8a4c0539dfc1", "patch": "@@ -1644,7 +1644,7 @@ typedef struct rs6000_args\n    || DEFAULT_ABI == ABI_AIX_NODESC)\t? (TARGET_32BIT ? 8 : 16) :\t\\\n   (DEFAULT_ABI == ABI_V4\t\t\t\t\t\t\\\n    || DEFAULT_ABI == ABI_SOLARIS)\t? (TARGET_32BIT ? 4 : 8) :\t\\\n-  (fatal (\"RETURN_ADDRESS_OFFSET not supported\"), 0))\n+  (internal_error (\"RETURN_ADDRESS_OFFSET not supported\"), 0))\n \n /* The current return address is in link register (65).  The return address\n    of anything farther back is accessed normally at an offset of 8 from the"}]}