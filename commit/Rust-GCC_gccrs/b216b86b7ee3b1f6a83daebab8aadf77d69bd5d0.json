{"sha": "b216b86b7ee3b1f6a83daebab8aadf77d69bd5d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjIxNmI4NmI3ZWUzYjFmNmE4M2RhZWJhYjhhYWRmNzdkNjliZDVkMA==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2012-08-18T23:16:53Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2012-08-18T23:16:53Z"}, "message": "re PR middle-end/53823 (FAIL: gcc.c-torture/execute/930921-1.c execution at -O0 and -O1)\n\n\tPR middle-end/53823\n\t* expmed.c (expand_mult): Skip synth_mult for negative coefficients\n\tif the mode is larger than a wide int and it is too costly to multiply\n\tby a positive multiplier and negate the result.\n\nFrom-SVN: r190505", "tree": {"sha": "cce054ce1aba013927a269a47a19b00fcd6964a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cce054ce1aba013927a269a47a19b00fcd6964a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b216b86b7ee3b1f6a83daebab8aadf77d69bd5d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b216b86b7ee3b1f6a83daebab8aadf77d69bd5d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b216b86b7ee3b1f6a83daebab8aadf77d69bd5d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b216b86b7ee3b1f6a83daebab8aadf77d69bd5d0/comments", "author": null, "committer": null, "parents": [{"sha": "b44e2c4cfb03d46d3969039fc54461a1f8afb5d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b44e2c4cfb03d46d3969039fc54461a1f8afb5d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b44e2c4cfb03d46d3969039fc54461a1f8afb5d0"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "1f313e9b7d89da753046002be15df2b51c579739", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b216b86b7ee3b1f6a83daebab8aadf77d69bd5d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b216b86b7ee3b1f6a83daebab8aadf77d69bd5d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b216b86b7ee3b1f6a83daebab8aadf77d69bd5d0", "patch": "@@ -1,3 +1,10 @@\n+2012-08-18  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR middle-end/53823\n+\t* expmed.c (expand_mult): Skip synth_mult for negative coefficients\n+\tif the mode is larger than a wide int and it is too costly to multiply\n+\tby a positive multiplier and negate the result.\n+\n 2012-08-18  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* sparseset.c (sparseset_alloc): Use non-clearing allocation.  Tell"}, {"sha": "6c94a90fb8436122bf9018abfcba3f23cc8eb89b", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b216b86b7ee3b1f6a83daebab8aadf77d69bd5d0/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b216b86b7ee3b1f6a83daebab8aadf77d69bd5d0/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=b216b86b7ee3b1f6a83daebab8aadf77d69bd5d0", "patch": "@@ -3261,7 +3261,6 @@ expand_mult (enum machine_mode mode, rtx op0, rtx op1, rtx target,\n       /* Attempt to handle multiplication of DImode values by negative\n \t coefficients, by performing the multiplication by a positive\n \t multiplier and then inverting the result.  */\n-      /* ??? How is this not slightly redundant with the neg variant?  */\n       if (is_neg && mode_bitsize > HOST_BITS_PER_WIDE_INT)\n \t{\n \t  /* Its safe to use -coeff even for INT_MIN, as the\n@@ -3278,6 +3277,7 @@ expand_mult (enum machine_mode mode, rtx op0, rtx op1, rtx target,\n \t\t\t\t\t    &algorithm, variant);\n \t      return expand_unop (mode, neg_optab, temp, target, 0);\n \t    }\n+\t  goto skip_synth;\n \t}\n \n       /* Exclude cost of op0 from max_cost to match the cost"}]}