{"sha": "e41da82345fb01c4c2641c979a94a975d15312ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQxZGE4MjM0NWZiMDFjNGMyNjQxYzk3OWE5NGE5NzVkMTUzMTJhYg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2020-08-02T09:35:36Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2020-08-02T09:35:36Z"}, "message": "This patch fixes PR96325. See the explanatory comment in the testcase.\n\n2020-08-02  Paul Thomas  <pault@gcc.gnu.org>\n\ngcc/fortran\n\tPR fortran/96325\n\t* primary.c (gfc_match_varspec): In the case that a component\n\treference is added to an intrinsic type component, emit the\n\terror message in this function.\n\ngcc/testsuite/\n\tPR fortran/96325\n\t* gfortran.dg/pr96325.f90: New test.\n\t* gfortran.dg/pr91589.f90: Update error message.", "tree": {"sha": "30cf62ec607106472e2eb2c9a21735b1894fd13f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30cf62ec607106472e2eb2c9a21735b1894fd13f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e41da82345fb01c4c2641c979a94a975d15312ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e41da82345fb01c4c2641c979a94a975d15312ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e41da82345fb01c4c2641c979a94a975d15312ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e41da82345fb01c4c2641c979a94a975d15312ab/comments", "author": null, "committer": null, "parents": [{"sha": "4967ca2f8b2e13324258786a90c46f62abce2b7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4967ca2f8b2e13324258786a90c46f62abce2b7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4967ca2f8b2e13324258786a90c46f62abce2b7d"}], "stats": {"total": 36, "additions": 31, "deletions": 5}, "files": [{"sha": "a58a25924daf1112ce9c70f52ba091257d4875fc", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41da82345fb01c4c2641c979a94a975d15312ab/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41da82345fb01c4c2641c979a94a975d15312ab/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=e41da82345fb01c4c2641c979a94a975d15312ab", "patch": "@@ -2023,7 +2023,8 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n {\n   char name[GFC_MAX_SYMBOL_LEN + 1];\n   gfc_ref *substring, *tail, *tmp;\n-  gfc_component *component;\n+  gfc_component *component = NULL;\n+  gfc_component *previous = NULL;\n   gfc_symbol *sym = primary->symtree->n.sym;\n   gfc_expr *tgt_expr = NULL;\n   match m;\n@@ -2343,15 +2344,19 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n \t  break;\n \t}\n \n+      previous = component;\n+\n       if (!inquiry && !intrinsic)\n \tcomponent = gfc_find_component (sym, name, false, false, &tmp);\n       else\n \tcomponent = NULL;\n \n-      /* In some cases, returning MATCH_NO gives a better error message. Most\n-\t cases return \"Unclassifiable statement at...\"  */\n       if (intrinsic && !inquiry)\n-\treturn MATCH_NO;\n+       {\n+\t  gfc_error (\"%qs at %C is not an inquiry reference to an intrinsic \"\n+\t\t     \"type component %qs\", name, previous->name);\n+\t  return MATCH_ERROR;\n+       }\n       else if (component == NULL && !inquiry)\n \treturn MATCH_ERROR;\n "}, {"sha": "375d895e0b7322389f382709ce09f6a14fdb283f", "filename": "gcc/testsuite/gfortran.dg/pr91589.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41da82345fb01c4c2641c979a94a975d15312ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91589.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41da82345fb01c4c2641c979a94a975d15312ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91589.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr91589.f90?ref=e41da82345fb01c4c2641c979a94a975d15312ab", "patch": "@@ -10,6 +10,6 @@ program p\n       integer :: a\n    end type\n    type(t) :: x = t(1)\n-   call sub (x%a%a)   ! { dg-error \"Syntax error in argument list\" }\n+   call sub (x%a%a)   ! { dg-error \"is not an inquiry reference\" }\n end\n "}, {"sha": "06314a21bb80088699eb6e53fffc86bb8bbb6a9d", "filename": "gcc/testsuite/gfortran.dg/pr96325.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e41da82345fb01c4c2641c979a94a975d15312ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96325.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e41da82345fb01c4c2641c979a94a975d15312ab/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96325.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr96325.f90?ref=e41da82345fb01c4c2641c979a94a975d15312ab", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do run }\n+!\n+! Test the fix for PR96325 in which the typebound procedure reference\n+! 'foo' was applied to an intrinsic type component without generating\n+! an error. The result of the expression was the value of the arg..\n+!\n+! Contributed by Gerhardt Steinmetz  <gscfq@t-online.de>\n+!\n+   implicit none\n+\n+   type t2\n+      integer r1\n+   end type\n+\n+   type(t2) :: t\n+   integer :: a\n+\n+   a = t%r1%foo(1)     { dg-error \"is not an inquiry reference\" }\n+   if (a == 42) stop\n+\n+   end"}]}