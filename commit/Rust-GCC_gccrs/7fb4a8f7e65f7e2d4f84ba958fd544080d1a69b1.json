{"sha": "7fb4a8f7e65f7e2d4f84ba958fd544080d1a69b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZiNGE4ZjdlNjVmN2UyZDRmODRiYTk1OGZkNTQ0MDgwZDFhNjliMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-05-26T11:43:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-05-26T11:43:52Z"}, "message": "decl.c (pushdecl): Don't copy the type_decl.\n\n\t* decl.c (pushdecl): Don't copy the type_decl.\n\t* class.c (pushclass): Always store TYPE_MAIN_VARIANT in\n\tcurrent_class_type.\n\t* decl.c (grokdeclarator): Put typedefs on the type's obstack.\n\t* parse.y (complex_direct_notype_declarator): Use $1 to access\n\tscope of notype_qualified_id.\n\nFrom-SVN: r20061", "tree": {"sha": "c52b599634675e48b34761d2c35c11a984732ccb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c52b599634675e48b34761d2c35c11a984732ccb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7fb4a8f7e65f7e2d4f84ba958fd544080d1a69b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb4a8f7e65f7e2d4f84ba958fd544080d1a69b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fb4a8f7e65f7e2d4f84ba958fd544080d1a69b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fb4a8f7e65f7e2d4f84ba958fd544080d1a69b1/comments", "author": null, "committer": null, "parents": [{"sha": "97cf4d2d5d05615ab610302adde25adc6d252b87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97cf4d2d5d05615ab610302adde25adc6d252b87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97cf4d2d5d05615ab610302adde25adc6d252b87"}], "stats": {"total": 73, "additions": 28, "deletions": 45}, "files": [{"sha": "21e0c6eaa32c30e4fdfdc3e529faeb04b2e02854", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb4a8f7e65f7e2d4f84ba958fd544080d1a69b1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb4a8f7e65f7e2d4f84ba958fd544080d1a69b1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7fb4a8f7e65f7e2d4f84ba958fd544080d1a69b1", "patch": "@@ -1,9 +1,22 @@\n+1998-05-26  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (pushdecl): Don't copy the type_decl.\n+\n+1998-05-26  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+\n+\t* class.c (pushclass): Always store TYPE_MAIN_VARIANT in\n+\tcurrent_class_type.\n+\t* decl.c (grokdeclarator): Put typedefs on the type's obstack.\n+\n+\t* parse.y (complex_direct_notype_declarator): Use $1 to access\n+\tscope of notype_qualified_id.\n+\n 1998-05-26  Dave Brolley  <brolley@cygnus.com>\n \n \t* lex.c (parse_options,yy_cur,yy_lim): Add for cpplib.\n \t(init_parse): Initialize cpplib interface.\n \n-\t* Makefile.in (CXX_OBJS): Make sure dependencies nenver end with an\n+\t* Makefile.in (CXX_OBJS): Make sure dependencies never end with an\n \tempty continuation.\n \n 1998-05-26  Mark Mitchell  <mark@markmitchell.com>"}, {"sha": "e7019a86e4387d684a2eb0621f6971f601417e38", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb4a8f7e65f7e2d4f84ba958fd544080d1a69b1/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb4a8f7e65f7e2d4f84ba958fd544080d1a69b1/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=7fb4a8f7e65f7e2d4f84ba958fd544080d1a69b1", "patch": "@@ -4668,6 +4668,7 @@ pushclass (type, modify)\n      tree type;\n      int modify;\n {\n+  type = TYPE_MAIN_VARIANT (type);\n   push_memoized_context (type, modify);\n \n   current_class_depth++;"}, {"sha": "822874ecb458d4b093639733d100f3ad78f9368c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 38, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb4a8f7e65f7e2d4f84ba958fd544080d1a69b1/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb4a8f7e65f7e2d4f84ba958fd544080d1a69b1/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7fb4a8f7e65f7e2d4f84ba958fd544080d1a69b1", "patch": "@@ -3373,43 +3373,6 @@ pushdecl (x)\n             {\n \t      push_obstacks (TYPE_OBSTACK (type), TYPE_OBSTACK (type));\n \n-\t      if (!TREE_PERMANENT (x) \n-\t\t  && TYPE_OBSTACK (type) != saveable_obstack)\n-\t\t{\n-\t\t  /* X should have been allocated on the saveable\n-\t\t     obstack.  Since the type was not, the type may\n-\t\t     outlive X, unless we make a copy of X.  Here are\n-\t\t     some examples:\n-\t\t     \n-\t\t     template <class T>\n-\t\t     void f()\n-\t\t     {\n-\t\t       typedef S<T> Type_t;\n-\t\t       Type_t::foo();\n-\t\t     }\n-\t\t     \n-\t\t     Here, we will create a SCOPE_REF with Type_t as\n-\t\t     its first argument, and save the SCOPE_REF for\n-\t\t     later, so that we can tsubst into it.  But, that\n-\t\t     means we need to save the TYPE_DECL for Type_t.\n-\t\t     \n-\t\t     But, we must save the TYPE_DECL even when not\n-\t\t     processing_template_decl.  For example,\n-\t\t     \n-\t\t     void f() \n-\t\t     {\n-\t\t       typedef int I;\n-\t\t       g<I>();\n-\t\t     }\n-\t\t     \n-\t\t     may create a declaration of g with `I' as one of\n-\t\t     the arguments.  In the old days, we used to use\n-\t\t     the underlying types for things, but now we try\n-\t\t     to use the typedef names for readability.  */\n-\t\t  x = copy_node (x);\n-\t\t  copy_lang_decl (x);\n-\t\t}\n-\n \t      DECL_ORIGINAL_TYPE (x) = type;\n               type = build_type_copy (type);\n \t      TYPE_STUB_DECL (type) = TYPE_STUB_DECL (DECL_ORIGINAL_TYPE (x));\n@@ -9624,7 +9587,13 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n       else if (current_lang_name == lang_name_java)\n \tdecl = build_lang_decl (TYPE_DECL, declarator, type);\n       else\n-\tdecl = build_decl (TYPE_DECL, declarator, type);\n+\t{\n+\t  /* Make sure this typedef lives as long as its type,\n+\t     since it might be used as a template parameter. */\n+\t  push_obstacks (TYPE_OBSTACK (type), TYPE_OBSTACK (type));\n+\t  decl = build_decl (TYPE_DECL, declarator, type);\n+\t  pop_obstacks ();\n+\t}\n \n       /* If the user declares \"struct {...} foo\" then `foo' will have\n \t an anonymous name.  Fill that name in now.  Nothing can"}, {"sha": "2ee723056d9a83be683324d3cfd0590a0b48dedf", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb4a8f7e65f7e2d4f84ba958fd544080d1a69b1/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb4a8f7e65f7e2d4f84ba958fd544080d1a69b1/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=7fb4a8f7e65f7e2d4f84ba958fd544080d1a69b1", "patch": "@@ -6596,10 +6596,10 @@ case 590:\n     break;}\n case 591:\n #line 2743 \"parse.y\"\n-{ if (OP0 (yyval.ttype) != current_class_type)\n+{ if (OP0 (yyvsp[0].ttype) != current_class_type)\n \t\t    {\n-\t\t      push_nested_class (OP0 (yyval.ttype), 3);\n-\t\t      TREE_COMPLEXITY (yyval.ttype) = current_class_depth;\n+\t\t      push_nested_class (OP0 (yyvsp[0].ttype), 3);\n+\t\t      TREE_COMPLEXITY (yyvsp[0].ttype) = current_class_depth;\n \t\t    }\n \t\t;\n     break;}"}, {"sha": "664256e519020f978fed1e82577d03aec02ef03c", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7fb4a8f7e65f7e2d4f84ba958fd544080d1a69b1/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7fb4a8f7e65f7e2d4f84ba958fd544080d1a69b1/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=7fb4a8f7e65f7e2d4f84ba958fd544080d1a69b1", "patch": "@@ -2740,10 +2740,10 @@ complex_direct_notype_declarator:\n \t| direct_notype_declarator '[' ']'\n \t\t{ $$ = build_parse_node (ARRAY_REF, $$, NULL_TREE); }\n \t| notype_qualified_id\n-\t\t{ if (OP0 ($$) != current_class_type)\n+\t\t{ if (OP0 ($1) != current_class_type)\n \t\t    {\n-\t\t      push_nested_class (OP0 ($$), 3);\n-\t\t      TREE_COMPLEXITY ($$) = current_class_depth;\n+\t\t      push_nested_class (OP0 ($1), 3);\n+\t\t      TREE_COMPLEXITY ($1) = current_class_depth;\n \t\t    }\n \t\t}\n         | nested_name_specifier notype_template_declarator"}]}