{"sha": "6eaf7ac6f49eae85825be185005338ca5c886161", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVhZjdhYzZmNDllYWU4NTgyNWJlMTg1MDA1MzM4Y2E1Yzg4NjE2MQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-07T07:09:09Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-04-07T07:59:07Z"}, "message": "Add debug_vn_reference_ops helper\n\nThis factors out a helper to dump VN reference operands, sth that\nproves useful in debugging VN issues.\n\n2021-04-07  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.h (print_vn_reference_ops): Declare.\n\t* tree-ssa-pre.c (print_pre_expr): Factor out VN reference operand\n\tprinting...\n\t* tree-ssa-sccvn.c (print_vn_reference_ops): ... into this new\n\tfunction.\n\t(debug_vn_reference_ops): New.", "tree": {"sha": "0dd60d7f40998bcabaa91c954546bdc919e0bae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dd60d7f40998bcabaa91c954546bdc919e0bae6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eaf7ac6f49eae85825be185005338ca5c886161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eaf7ac6f49eae85825be185005338ca5c886161", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eaf7ac6f49eae85825be185005338ca5c886161", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eaf7ac6f49eae85825be185005338ca5c886161/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0bdccac582c01c928a05f26edcd8f5ac24669eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0bdccac582c01c928a05f26edcd8f5ac24669eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0bdccac582c01c928a05f26edcd8f5ac24669eb"}], "stats": {"total": 89, "additions": 51, "deletions": 38}, "files": [{"sha": "91dd49200c3022a411184487899c9aba5e3257a2", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eaf7ac6f49eae85825be185005338ca5c886161/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eaf7ac6f49eae85825be185005338ca5c886161/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=6eaf7ac6f49eae85825be185005338ca5c886161", "patch": "@@ -1067,45 +1067,8 @@ print_pre_expr (FILE *outfile, const pre_expr expr)\n \n     case REFERENCE:\n       {\n-\tvn_reference_op_t vro;\n-\tunsigned int i;\n \tvn_reference_t ref = PRE_EXPR_REFERENCE (expr);\n-\tfprintf (outfile, \"{\");\n-\tfor (i = 0;\n-\t     ref->operands.iterate (i, &vro);\n-\t     i++)\n-\t  {\n-\t    bool closebrace = false;\n-\t    if (vro->opcode != SSA_NAME\n-\t\t&& TREE_CODE_CLASS (vro->opcode) != tcc_declaration)\n-\t      {\n-\t\tfprintf (outfile, \"%s\", get_tree_code_name (vro->opcode));\n-\t\tif (vro->op0)\n-\t\t  {\n-\t\t    fprintf (outfile, \"<\");\n-\t\t    closebrace = true;\n-\t\t  }\n-\t      }\n-\t    if (vro->op0)\n-\t      {\n-\t\tprint_generic_expr (outfile, vro->op0);\n-\t\tif (vro->op1)\n-\t\t  {\n-\t\t    fprintf (outfile, \",\");\n-\t\t    print_generic_expr (outfile, vro->op1);\n-\t\t  }\n-\t\tif (vro->op2)\n-\t\t  {\n-\t\t    fprintf (outfile, \",\");\n-\t\t    print_generic_expr (outfile, vro->op2);\n-\t\t  }\n-\t      }\n-\t    if (closebrace)\n-\t\tfprintf (outfile, \">\");\n-\t    if (i != ref->operands.length () - 1)\n-\t      fprintf (outfile, \",\");\n-\t  }\n-\tfprintf (outfile, \"}\");\n+\tprint_vn_reference_ops (outfile, ref->operands);\n \tif (ref->vuse)\n \t  {\n \t    fprintf (outfile, \"@\");"}, {"sha": "16e75b518b01b0715ff6939d26834dc3230aba95", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eaf7ac6f49eae85825be185005338ca5c886161/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eaf7ac6f49eae85825be185005338ca5c886161/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=6eaf7ac6f49eae85825be185005338ca5c886161", "patch": "@@ -249,6 +249,55 @@ vn_reference_hasher::equal (const vn_reference_s *v, const vn_reference_s *c)\n typedef hash_table<vn_reference_hasher> vn_reference_table_type;\n typedef vn_reference_table_type::iterator vn_reference_iterator_type;\n \n+/* Pretty-print OPS to OUTFILE.  */\n+\n+void\n+print_vn_reference_ops (FILE *outfile, const vec<vn_reference_op_s> ops)\n+{\n+  vn_reference_op_t vro;\n+  unsigned int i;\n+  fprintf (outfile, \"{\");\n+  for (i = 0; ops.iterate (i, &vro); i++)\n+    {\n+      bool closebrace = false;\n+      if (vro->opcode != SSA_NAME\n+\t  && TREE_CODE_CLASS (vro->opcode) != tcc_declaration)\n+\t{\n+\t  fprintf (outfile, \"%s\", get_tree_code_name (vro->opcode));\n+\t  if (vro->op0)\n+\t    {\n+\t      fprintf (outfile, \"<\");\n+\t      closebrace = true;\n+\t    }\n+\t}\n+      if (vro->op0)\n+\t{\n+\t  print_generic_expr (outfile, vro->op0);\n+\t  if (vro->op1)\n+\t    {\n+\t      fprintf (outfile, \",\");\n+\t      print_generic_expr (outfile, vro->op1);\n+\t    }\n+\t  if (vro->op2)\n+\t    {\n+\t      fprintf (outfile, \",\");\n+\t      print_generic_expr (outfile, vro->op2);\n+\t    }\n+\t}\n+      if (closebrace)\n+\tfprintf (outfile, \">\");\n+      if (i != ops.length () - 1)\n+\tfprintf (outfile, \",\");\n+    }\n+  fprintf (outfile, \"}\");\n+}\n+\n+DEBUG_FUNCTION void\n+debug_vn_reference_ops (const vec<vn_reference_op_s> ops)\n+{\n+  print_vn_reference_ops (stderr, ops);\n+  fputc ('\\n', stderr);\n+}\n \n /* The set of VN hashtables.  */\n "}, {"sha": "6df526c269b2a4796feeba64de78f10f83a2a640", "filename": "gcc/tree-ssa-sccvn.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eaf7ac6f49eae85825be185005338ca5c886161/gcc%2Ftree-ssa-sccvn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eaf7ac6f49eae85825be185005338ca5c886161/gcc%2Ftree-ssa-sccvn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.h?ref=6eaf7ac6f49eae85825be185005338ca5c886161", "patch": "@@ -265,6 +265,7 @@ void vn_reference_lookup_call (gcall *, vn_reference_t *, vn_reference_t);\n vn_reference_t vn_reference_insert_pieces (tree, alias_set_type, alias_set_type,\n \t\t\t\t\t   tree, vec<vn_reference_op_s>,\n \t\t\t\t\t   tree, unsigned int);\n+void print_vn_reference_ops (FILE *, const vec<vn_reference_op_s>);\n \n bool vn_nary_op_eq (const_vn_nary_op_t const vno1,\n \t\t    const_vn_nary_op_t const vno2);"}]}