{"sha": "68f1d74ff92c0579981b615335456e0578af6e32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhmMWQ3NGZmOTJjMDU3OTk4MWI2MTUzMzU0NTZlMDU3OGFmNmUzMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-14T15:04:59Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-05-14T15:06:35Z"}, "message": "c++: Missed c++2a->20 change\n\nJason missed a c++2a mention.  I couldn't resist changing the loop\nfollowing to place the initializers inside the fors.\n\n\t* parser.c (cp_parser_diagnose_invalid_typename): Mention\n\tstd=c++20 not 2a, reformat dependent binfo inform loops.", "tree": {"sha": "b11d1d6a9c45ccf69f24e01a2f9621cbbb5d99c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b11d1d6a9c45ccf69f24e01a2f9621cbbb5d99c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68f1d74ff92c0579981b615335456e0578af6e32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68f1d74ff92c0579981b615335456e0578af6e32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68f1d74ff92c0579981b615335456e0578af6e32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68f1d74ff92c0579981b615335456e0578af6e32/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f497e36ae56f0f22b1d60171509c75f7b11f8663", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f497e36ae56f0f22b1d60171509c75f7b11f8663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f497e36ae56f0f22b1d60171509c75f7b11f8663"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "ba0d9e691cac5fcdc931baff1b82736ec4010350", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f1d74ff92c0579981b615335456e0578af6e32/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f1d74ff92c0579981b615335456e0578af6e32/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=68f1d74ff92c0579981b615335456e0578af6e32", "patch": "@@ -1,5 +1,8 @@\n 2020-05-14  Nathan Sidwell  <nathan@acm.org>\n \n+\t* parser.c (cp_parser_diagnose_invalid_typename): Mention\n+\tstd=c++20 not 2a, reformat dependent binfo inform loops.\n+\n \t* pt.c (tsubst_template_decl): Reorder and commonize some control\n \tpaths.\n "}, {"sha": "41712bfdc2cd149638d932e1b89ac58bbb4926f5", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f1d74ff92c0579981b615335456e0578af6e32/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f1d74ff92c0579981b615335456e0578af6e32/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=68f1d74ff92c0579981b615335456e0578af6e32", "patch": "@@ -3376,41 +3376,35 @@ cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree id,\n \tinform (location, \"%<concept%> only available with %<-std=c++20%> or \"\n \t\t\"%<-fconcepts%>\");\n       else if (!flag_concepts && id == ridpointers[(int)RID_REQUIRES])\n-\tinform (location, \"%<requires%> only available with %<-std=c++2a%> or \"\n+\tinform (location, \"%<requires%> only available with %<-std=c++20%> or \"\n \t\t\"%<-fconcepts%>\");\n       else if (processing_template_decl && current_class_type\n \t       && TYPE_BINFO (current_class_type))\n \t{\n-\t  tree b;\n-\n-\t  for (b = TREE_CHAIN (TYPE_BINFO (current_class_type));\n-\t       b;\n-\t       b = TREE_CHAIN (b))\n+\t  for (tree b = TREE_CHAIN (TYPE_BINFO (current_class_type));\n+\t       b; b = TREE_CHAIN (b))\n \t    {\n \t      tree base_type = BINFO_TYPE (b);\n \t      if (CLASS_TYPE_P (base_type)\n \t\t  && dependent_type_p (base_type))\n \t\t{\n-\t\t  tree field;\n \t\t  /* Go from a particular instantiation of the\n \t\t     template (which will have an empty TYPE_FIELDs),\n \t\t     to the main version.  */\n \t\t  base_type = CLASSTYPE_PRIMARY_TEMPLATE_TYPE (base_type);\n-\t\t  for (field = TYPE_FIELDS (base_type);\n-\t\t       field;\n-\t\t       field = DECL_CHAIN (field))\n+\t\t  for (tree field = TYPE_FIELDS (base_type);\n+\t\t       field; field = DECL_CHAIN (field))\n \t\t    if (TREE_CODE (field) == TYPE_DECL\n \t\t\t&& DECL_NAME (field) == id)\n \t\t      {\n \t\t\tinform (location,\n \t\t\t\t\"(perhaps %<typename %T::%E%> was intended)\",\n \t\t\t\tBINFO_TYPE (b), id);\n-\t\t\tbreak;\n+\t\t\tgoto found;\n \t\t      }\n-\t\t  if (field)\n-\t\t    break;\n \t\t}\n \t    }\n+\tfound:;\n \t}\n     }\n   /* Here we diagnose qualified-ids where the scope is actually correct,"}]}