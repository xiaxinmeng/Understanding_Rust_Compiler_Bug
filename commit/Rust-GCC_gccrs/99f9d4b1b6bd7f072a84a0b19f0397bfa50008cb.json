{"sha": "99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTlmOWQ0YjFiNmJkN2YwNzJhODRhMGIxOWYwMzk3YmZhNTAwMDhjYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-08-10T21:58:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-08-10T21:58:23Z"}, "message": "Implement C++17 constexpr if.\n\n\t* cp-tree.h (IF_STMT_CONSTEXPR_P): New.\n\t* name-lookup.c (push_to_top_level, pop_from_top_level_1): Handle it.\n\t* parser.h (struct cp_parser): Add in_discarded_stmt field.\n\t* parser.c (cp_parser_selection_statement): Handle 'if constexpr'.\n\t(cp_parser_jump_statement): Avoid deducing from a discarded return.\n\t* pt.c (tsubst_expr): Only instantiate taken branch of constexpr if.\n\t* semantics.c (begin_if_stmt): Set the binding level this_entity.\n\t(finish_if_stmt_cond): Require the condition of a\n\tconstexpr if to be constant.\n\t* decl.c (level_for_constexpr_if): New.\n\t(named_label_entry): Add in_constexpr_if field.\n\t(poplevel_named_label_1): Set it.\n\t(check_goto): Check it.\n\t(check_previous_goto_1): Check level_for_constexpr_if.\n\nFrom-SVN: r239338", "tree": {"sha": "387fdc4230f85dcbe03d25081a8bef0f7568d826", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/387fdc4230f85dcbe03d25081a8bef0f7568d826"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e9e6d4f6cc2c0a3407c527f4c786b46508cb3366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e6d4f6cc2c0a3407c527f4c786b46508cb3366", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9e6d4f6cc2c0a3407c527f4c786b46508cb3366"}], "stats": {"total": 264, "additions": 253, "deletions": 11}, "files": [{"sha": "647b3e65800a12f1163d888353dda5c08d1b6d69", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb", "patch": "@@ -1,3 +1,21 @@\n+2016-08-10  Jason Merrill  <jason@redhat.com>\n+\n+\tImplement C++17 constexpr if.\n+\t* cp-tree.h (IF_STMT_CONSTEXPR_P): New.\n+\t* name-lookup.c (push_to_top_level, pop_from_top_level_1): Handle it.\n+\t* parser.h (struct cp_parser): Add in_discarded_stmt field.\n+\t* parser.c (cp_parser_selection_statement): Handle 'if constexpr'.\n+\t(cp_parser_jump_statement): Avoid deducing from a discarded return.\n+\t* pt.c (tsubst_expr): Only instantiate taken branch of constexpr if.\n+\t* semantics.c (begin_if_stmt): Set the binding level this_entity.\n+\t(finish_if_stmt_cond): Require the condition of a\n+\tconstexpr if to be constant.\n+\t* decl.c (level_for_constexpr_if): New.\n+\t(named_label_entry): Add in_constexpr_if field.\n+\t(poplevel_named_label_1): Set it.\n+\t(check_goto): Check it.\n+\t(check_previous_goto_1): Check level_for_constexpr_if.\n+\n 2016-08-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/68703"}, {"sha": "8a32f179ecdeefcca05501bd66d5fcda805814c9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb", "patch": "@@ -145,6 +145,7 @@ operator == (const cp_expr &lhs, tree rhs)\n       WILDCARD_PACK_P (in WILDCARD_DECL)\n       BLOCK_OUTER_CURLY_BRACE_P (in BLOCK)\n       FOLD_EXPR_MODOP_P (*_FOLD_EXPR)\n+      IF_STMT_CONSTEXPR_P (IF_STMT)\n    1: IDENTIFIER_VIRTUAL_P (in IDENTIFIER_NODE)\n       TI_PENDING_TEMPLATE_FLAG.\n       TEMPLATE_PARMS_FOR_INLINE.\n@@ -4530,6 +4531,7 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n #define THEN_CLAUSE(NODE)\tTREE_OPERAND (IF_STMT_CHECK (NODE), 1)\n #define ELSE_CLAUSE(NODE)\tTREE_OPERAND (IF_STMT_CHECK (NODE), 2)\n #define IF_SCOPE(NODE)\t\tTREE_OPERAND (IF_STMT_CHECK (NODE), 3)\n+#define IF_STMT_CONSTEXPR_P(NODE) TREE_LANG_FLAG_0 (IF_STMT_CHECK (NODE))\n \n /* WHILE_STMT accessors. These give access to the condition of the\n    while statement and the body of the while statement, respectively.  */\n@@ -6303,7 +6305,7 @@ extern void add_decl_expr\t\t\t(tree);\n extern tree maybe_cleanup_point_expr_void\t(tree);\n extern tree finish_expr_stmt\t\t\t(tree);\n extern tree begin_if_stmt\t\t\t(void);\n-extern void finish_if_stmt_cond\t\t\t(tree, tree);\n+extern tree finish_if_stmt_cond\t\t\t(tree, tree);\n extern tree finish_then_clause\t\t\t(tree);\n extern void begin_else_clause\t\t\t(tree);\n extern void finish_else_clause\t\t\t(tree);"}, {"sha": "43cf3df36bac33dc7f1d5529dc098aba7338c190", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb", "patch": "@@ -218,6 +218,7 @@ struct GTY((for_user)) named_label_entry {\n   bool in_catch_scope;\n   bool in_omp_scope;\n   bool in_transaction_scope;\n+  bool in_constexpr_if;\n };\n \n #define named_labels cp_function_chain->x_named_labels\n@@ -476,6 +477,16 @@ objc_mark_locals_volatile (void *enclosing_blk)\n     }\n }\n \n+/* True if B is the level for the condition of a constexpr if.  */\n+\n+static bool\n+level_for_constexpr_if (cp_binding_level *b)\n+{\n+  return (b->kind == sk_cond && b->this_entity\n+\t  && TREE_CODE (b->this_entity) == IF_STMT\n+\t  && IF_STMT_CONSTEXPR_P (b->this_entity));\n+}\n+\n /* Update data for defined and undefined labels when leaving a scope.  */\n \n int\n@@ -512,6 +523,10 @@ poplevel_named_label_1 (named_label_entry **slot, cp_binding_level *bl)\n \tcase sk_transaction:\n \t  ent->in_transaction_scope = true;\n \t  break;\n+\tcase sk_block:\n+\t  if (level_for_constexpr_if (bl->level_chain))\n+\t    ent->in_constexpr_if = true;\n+\t  break;\n \tdefault:\n \t  break;\n \t}\n@@ -3047,7 +3062,7 @@ check_previous_goto_1 (tree decl, cp_binding_level* level, tree names,\n   cp_binding_level *b;\n   bool complained = false;\n   int identified = 0;\n-  bool saw_eh = false, saw_omp = false, saw_tm = false;\n+  bool saw_eh = false, saw_omp = false, saw_tm = false, saw_cxif = false;\n \n   if (exited_omp)\n     {\n@@ -3132,6 +3147,20 @@ check_previous_goto_1 (tree decl, cp_binding_level* level, tree names,\n \t\t    \"  enters synchronized or atomic statement\");\n \t  saw_tm = true;\n \t}\n+      if (!saw_cxif && b->kind == sk_block\n+\t  && level_for_constexpr_if (b->level_chain))\n+\t{\n+\t  if (identified < 2)\n+\t    {\n+\t      complained = identify_goto (decl, input_location, locus,\n+\t\t\t\t\t  DK_ERROR);\n+\t      identified = 2;\n+\t    }\n+\t  if (complained)\n+\t    inform (EXPR_LOCATION (b->level_chain->this_entity),\n+\t\t    \"  enters constexpr if statement\");\n+\t  saw_cxif = true;\n+\t}\n     }\n \n   return !identified;\n@@ -3200,10 +3229,11 @@ check_goto (tree decl)\n     }\n \n   if (ent->in_try_scope || ent->in_catch_scope || ent->in_transaction_scope\n+      || ent->in_constexpr_if\n       || ent->in_omp_scope || !vec_safe_is_empty (ent->bad_decls))\n     {\n       diagnostic_t diag_kind = DK_PERMERROR;\n-      if (ent->in_try_scope || ent->in_catch_scope\n+      if (ent->in_try_scope || ent->in_catch_scope || ent->in_constexpr_if\n \t  || ent->in_transaction_scope || ent->in_omp_scope)\n \tdiag_kind = DK_ERROR;\n       complained = identify_goto (decl, DECL_SOURCE_LOCATION (decl),\n@@ -3248,6 +3278,8 @@ check_goto (tree decl)\n \tinform (input_location, \"  enters catch block\");\n       else if (ent->in_transaction_scope)\n \tinform (input_location, \"  enters synchronized or atomic statement\");\n+      else if (ent->in_constexpr_if)\n+\tinform (input_location, \"  enters constexpr if statement\");\n     }\n \n   if (ent->in_omp_scope)"}, {"sha": "1b9359ed050e8100f7da0013c81f2e404894401f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 56, "deletions": 3, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb", "patch": "@@ -10899,6 +10899,18 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \ttree statement;\n \ttree condition;\n \n+\tbool cx = false;\n+\tif (keyword == RID_IF\n+\t    && cp_lexer_next_token_is_keyword (parser->lexer,\n+\t\t\t\t\t       RID_CONSTEXPR))\n+\t  {\n+\t    cx = true;\n+\t    cp_token *tok = cp_lexer_consume_token (parser->lexer);\n+\t    if (cxx_dialect < cxx1z && !in_system_header_at (tok->location))\n+\t      pedwarn (tok->location, 0, \"%<if constexpr%> only available \"\n+\t\t       \"with -std=c++1z or -std=gnu++1z\");\n+\t  }\n+\n \t/* Look for the `('.  */\n \tif (!cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN))\n \t  {\n@@ -10908,7 +10920,10 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \n \t/* Begin the selection-statement.  */\n \tif (keyword == RID_IF)\n-\t  statement = begin_if_stmt ();\n+\t  {\n+\t    statement = begin_if_stmt ();\n+\t    IF_STMT_CONSTEXPR_P (statement) = cx;\n+\t  }\n \telse\n \t  statement = begin_switch_stmt ();\n \n@@ -10925,7 +10940,7 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \t    unsigned char in_statement;\n \n \t    /* Add the condition.  */\n-\t    finish_if_stmt_cond (condition, statement);\n+\t    condition = finish_if_stmt_cond (condition, statement);\n \n \t    if (warn_duplicated_cond)\n \t      warn_duplicated_cond_add_or_warn (token->location, condition,\n@@ -10934,16 +10949,44 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \t    /* Parse the then-clause.  */\n \t    in_statement = parser->in_statement;\n \t    parser->in_statement |= IN_IF_STMT;\n+\n+\t    /* Outside a template, the non-selected branch of a constexpr\n+\t       if is a 'discarded statement', i.e. unevaluated.  */\n+\t    bool was_discarded = parser->in_discarded_stmt;\n+\t    bool discard_then = (cx && !processing_template_decl\n+\t\t\t\t && integer_zerop (condition));\n+\t    if (discard_then)\n+\t      {\n+\t\tparser->in_discarded_stmt = true;\n+\t\t++c_inhibit_evaluation_warnings;\n+\t      }\n+\n \t    cp_parser_implicitly_scoped_statement (parser, &nested_if,\n \t\t\t\t\t\t   guard_tinfo);\n+\n \t    parser->in_statement = in_statement;\n \n \t    finish_then_clause (statement);\n \n+\t    if (discard_then)\n+\t      {\n+\t\tTHEN_CLAUSE (statement) = NULL_TREE;\n+\t\tparser->in_discarded_stmt = was_discarded;\n+\t\t--c_inhibit_evaluation_warnings;\n+\t      }\n+\n \t    /* If the next token is `else', parse the else-clause.  */\n \t    if (cp_lexer_next_token_is_keyword (parser->lexer,\n \t\t\t\t\t\tRID_ELSE))\n \t      {\n+\t\tbool discard_else = (cx && !processing_template_decl\n+\t\t\t\t     && integer_nonzerop (condition));\n+\t\tif (discard_else)\n+\t\t  {\n+\t\t    parser->in_discarded_stmt = true;\n+\t\t    ++c_inhibit_evaluation_warnings;\n+\t\t  }\n+\n \t\tguard_tinfo\n \t\t  = get_token_indent_info (cp_lexer_peek_token (parser->lexer));\n \t\t/* Consume the `else' keyword.  */\n@@ -10993,6 +11036,13 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \t\t   when we get back up to the parent if statement.  */\n \t\tif (if_p != NULL)\n \t\t  *if_p = true;\n+\n+\t\tif (discard_else)\n+\t\t  {\n+\t\t    ELSE_CLAUSE (statement) = NULL_TREE;\n+\t\t    parser->in_discarded_stmt = was_discarded;\n+\t\t    --c_inhibit_evaluation_warnings;\n+\t\t  }\n \t      }\n \t    else\n \t      {\n@@ -11864,7 +11914,10 @@ cp_parser_jump_statement (cp_parser* parser)\n \t     expression.  */\n \t  expr = NULL_TREE;\n \t/* Build the return-statement.  */\n-\tstatement = finish_return_stmt (expr);\n+\tif (current_function_auto_return_pattern && parser->in_discarded_stmt)\n+\t  /* Don't deduce from a discarded return statement.  */;\n+\telse\n+\t  statement = finish_return_stmt (expr);\n \t/* Look for the final `;'.  */\n \tcp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);\n       }"}, {"sha": "6a52b12e81334942081675167a920a4f7b877f5f", "filename": "gcc/cp/parser.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Fcp%2Fparser.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Fcp%2Fparser.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.h?ref=99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb", "patch": "@@ -336,6 +336,10 @@ struct GTY(()) cp_parser {\n      a local class.  */\n   bool in_function_body;\n \n+  /* TRUE if we are parsing a C++17 discarded statement (the non-taken branch\n+     of an if constexpr).  */\n+  bool in_discarded_stmt;\n+\n   /* Nonzero if we're processing a __transaction_atomic or\n      __transaction_relaxed statement.  */\n   unsigned char in_transaction;"}, {"sha": "1ee5fd4b579ab9ed585a26d05140ff9f2f94151e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb", "patch": "@@ -15387,12 +15387,18 @@ tsubst_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl,\n \n     case IF_STMT:\n       stmt = begin_if_stmt ();\n+      IF_STMT_CONSTEXPR_P (stmt) = IF_STMT_CONSTEXPR_P (t);\n       tmp = RECUR (IF_COND (t));\n-      finish_if_stmt_cond (tmp, stmt);\n-      RECUR (THEN_CLAUSE (t));\n+      tmp = finish_if_stmt_cond (tmp, stmt);\n+      if (IF_STMT_CONSTEXPR_P (t) && integer_zerop (tmp))\n+\t/* Don't instantiate the THEN_CLAUSE. */;\n+      else\n+\tRECUR (THEN_CLAUSE (t));\n       finish_then_clause (stmt);\n \n-      if (ELSE_CLAUSE (t))\n+      if (IF_STMT_CONSTEXPR_P (t) && integer_nonzerop (tmp))\n+\t/* Don't instantiate the ELSE_CLAUSE. */;\n+      else if (ELSE_CLAUSE (t))\n \t{\n \t  begin_else_clause (stmt);\n \t  RECUR (ELSE_CLAUSE (t));"}, {"sha": "a2e04f6b61d8c70617817923288827ccdd11f6c8", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb", "patch": "@@ -715,19 +715,26 @@ begin_if_stmt (void)\n   scope = do_pushlevel (sk_cond);\n   r = build_stmt (input_location, IF_STMT, NULL_TREE,\n \t\t  NULL_TREE, NULL_TREE, scope);\n+  current_binding_level->this_entity = r;\n   begin_cond (&IF_COND (r));\n   return r;\n }\n \n /* Process the COND of an if-statement, which may be given by\n    IF_STMT.  */\n \n-void\n+tree\n finish_if_stmt_cond (tree cond, tree if_stmt)\n {\n-  finish_cond (&IF_COND (if_stmt), maybe_convert_cond (cond));\n+  cond = maybe_convert_cond (cond);\n+  if (IF_STMT_CONSTEXPR_P (if_stmt)\n+      && require_potential_rvalue_constant_expression (cond)\n+      && !value_dependent_expression_p (cond))\n+    cond = cxx_constant_value (cond, NULL_TREE);\n+  finish_cond (&IF_COND (if_stmt), cond);\n   add_stmt (if_stmt);\n   THEN_CLAUSE (if_stmt) = push_stmt_list ();\n+  return cond;\n }\n \n /* Finish the then-clause of an if-statement, which may be given by"}, {"sha": "416d9ec7129ca6876e78a755c742a238c66ff93e", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if1.C?ref=99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb", "patch": "@@ -0,0 +1,14 @@\n+// Testcase from P0292R2\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"\" }\n+\n+template<typename T, typename ... Rest> void g(T&& p, Rest&& ...rs) {\n+  // ... handle p\n+  if constexpr (sizeof...(rs) > 0) // { dg-warning \"constexpr\" \"\" { target c++14_down } }\n+    g(rs...);  // never instantiated with an empty argument list.\n+}\n+\n+int main()\n+{\n+  g(1,2,3);\n+}"}, {"sha": "7f3a5776c42f4b8e6567b2da10050f3d155918ea", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if2.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if2.C?ref=99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile { target c++14 } }\n+// { dg-options \"\" }\n+\n+template <class,class> struct Same;\n+template <class T> struct Same<T,T> {};\n+\n+auto f()\n+{\n+  if constexpr (sizeof(int)==3) // { dg-warning \"constexpr\" \"\" { target c++14_only } }\n+    return 42;\n+  else\n+    return 42L;\n+}\n+\n+Same<decltype(f()), long> s;"}, {"sha": "1cc5780416f195cf5d6a0cc7bf51e77b52beb788", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if3.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if3.C?ref=99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb", "patch": "@@ -0,0 +1,13 @@\n+// Testcase from P0292R2\n+// { dg-do link { target c++11 } }\n+// { dg-options \"\" }\n+\n+extern int x;   // no definition of x required\n+int main() {\n+  if constexpr (true) // { dg-warning \"constexpr\" \"\" { target c++14_down } }\n+    return 0;\n+  else if (x)\n+    return x;\n+  else\n+    return -x;\n+}"}, {"sha": "612eff83b1e82fdccdfcfc19d2f46d4ea937ee82", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if4.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if4.C?ref=99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-w\" }\n+\n+void f()\n+{\n+  goto l;\t\t\t// { dg-message \"from here\" }\n+  if constexpr (false)\t\t// { dg-message \"enters constexpr if\" }\n+    {\n+    l:;\t\t\t\t// { dg-error \"jump to label\" }\n+    }\n+}"}, {"sha": "69d03e3c8b88d48ea8ba3a66c3fcb1d892b152d8", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if5.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if5.C?ref=99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-w\" }\n+\n+void f()\n+{\n+  if constexpr (false)\t\t// { dg-message \"enters constexpr if\" }\n+    {\n+      goto l;\t\t\t// { dg-message \"from here\" }\n+    }\n+  else\n+    {\n+    l:;\t\t\t\t// { dg-error \"jump to label\" }\n+    }\n+}"}, {"sha": "87aeabc178dd18bc72cdf2b7b34c167825772fa9", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if6.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if6.C?ref=99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-w\" }\n+\n+void f()\n+{\n+  if constexpr (false)\n+    {\n+      goto l;\n+    l:;\n+    }\n+  else\n+    {\n+    }\n+}"}, {"sha": "64829ccf5234bb76398cc92eed821790a7589b37", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if7.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if7.C?ref=99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-w\" }\n+\n+void f()\n+{\n+  if constexpr (false)\n+    {\n+    l:;\n+      goto l;\n+    }\n+  else\n+    {\n+    }\n+}"}, {"sha": "7efdc47070e375591eae97b4e66bedf1d2fe0395", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if8.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if8.C?ref=99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb", "patch": "@@ -0,0 +1,14 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-w\" }\n+\n+void f()\n+{\n+  if constexpr (false)\n+    {\n+    l:;\t\t\t\t// { dg-error \"jump to label\" }\n+    }\n+  else\n+    {\n+      goto l;\t\t\t// { dg-message \"from here\" }\n+    }\n+}"}, {"sha": "748278af8c97579aa56f9fb02b6a82b9298aca42", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if9.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if9.C?ref=99f9d4b1b6bd7f072a84a0b19f0397bfa50008cb", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-w\" }\n+\n+void f(int i)\n+{\n+  switch (i)\n+    if constexpr (false)\t// { dg-message \"enters constexpr if\" }\n+      {\n+      case 42:;\t\t\t// { dg-error \"jump to case label\" }\n+      }\n+}"}]}