{"sha": "fba621209f542447474d7e1b5d33ba21df14f04d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJhNjIxMjA5ZjU0MjQ0NzQ3NGQ3ZTFiNWQzM2JhMjFkZjE0ZjA0ZA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2012-04-16T12:15:50Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2012-04-16T12:15:50Z"}, "message": "re PR tree-optimization/52976 (Revision 186384 breaks the polyhedron tests aermod.f90 and doduc.f90 at -O3 -ffast-math)\n\n2012-04-16  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR tree-optimization/52976\n\t* tree-ssa-reassoc.c (add_to_ops_vec_max_rank): New function.\n\t(undistribute_ops_list): Ops with repeat counts aren't eligible for\n\tundistribution.\n\t(attempt_builtin_powi): Call add_to_ops_vec_max_rank.\n\nFrom-SVN: r186493", "tree": {"sha": "ce7aa9f7137c59fbc3a76d5807df7d3891bfc3b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce7aa9f7137c59fbc3a76d5807df7d3891bfc3b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fba621209f542447474d7e1b5d33ba21df14f04d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba621209f542447474d7e1b5d33ba21df14f04d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fba621209f542447474d7e1b5d33ba21df14f04d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fba621209f542447474d7e1b5d33ba21df14f04d/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "65c70e6b0311be59bddaba52ab10d837b61ea574", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65c70e6b0311be59bddaba52ab10d837b61ea574", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65c70e6b0311be59bddaba52ab10d837b61ea574"}], "stats": {"total": 41, "additions": 38, "deletions": 3}, "files": [{"sha": "a1f2b4bdf9a32cfd41ef619ee7da5d9cd0db54b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba621209f542447474d7e1b5d33ba21df14f04d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba621209f542447474d7e1b5d33ba21df14f04d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fba621209f542447474d7e1b5d33ba21df14f04d", "patch": "@@ -1,3 +1,11 @@\n+2012-04-16  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR tree-optimization/52976\n+\t* tree-ssa-reassoc.c (add_to_ops_vec_max_rank): New function.\n+\t(undistribute_ops_list): Ops with repeat counts aren't eligible for\n+\tundistribution.\n+\t(attempt_builtin_powi): Call add_to_ops_vec_max_rank.\n+\n 2012-04-16  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraph.h (FOR_EACH_VARIABLE, FOR_EACH_VARIABLE, FOR_EACH_FUNCTION):"}, {"sha": "854ce005a348ff2bea572de469b1045ba9f2b0c7", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fba621209f542447474d7e1b5d33ba21df14f04d/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fba621209f542447474d7e1b5d33ba21df14f04d/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=fba621209f542447474d7e1b5d33ba21df14f04d", "patch": "@@ -544,6 +544,28 @@ add_repeat_to_ops_vec (VEC(operand_entry_t, heap) **ops, tree op,\n   reassociate_stats.pows_encountered++;\n }\n \n+/* Add an operand entry to *OPS for the tree operand OP, giving the\n+   new entry a larger rank than any other operand already in *OPS.  */\n+\n+static void\n+add_to_ops_vec_max_rank (VEC(operand_entry_t, heap) **ops, tree op)\n+{\n+  operand_entry_t oe = (operand_entry_t) pool_alloc (operand_entry_pool);\n+  operand_entry_t oe1;\n+  unsigned i;\n+  unsigned max_rank = 0;\n+\n+  FOR_EACH_VEC_ELT (operand_entry_t, *ops, i, oe1)\n+    if (oe1->rank > max_rank)\n+      max_rank = oe1->rank;\n+\n+  oe->op = op;\n+  oe->rank = max_rank + 1;\n+  oe->id = next_operand_entry_id++;\n+  oe->count = 1;\n+  VEC_safe_push (operand_entry_t, heap, *ops, oe);\n+}\n+\n /* Return true if STMT is reassociable operation containing a binary\n    operation with tree code CODE, and is inside LOOP.  */\n \n@@ -1200,6 +1222,7 @@ undistribute_ops_list (enum tree_code opcode,\n       dcode = gimple_assign_rhs_code (oe1def);\n       if ((dcode != MULT_EXPR\n \t   && dcode != RDIV_EXPR)\n+\t  || oe1->count != 1\n \t  || !is_reassociable_op (oe1def, dcode, loop))\n \tcontinue;\n \n@@ -1243,6 +1266,8 @@ undistribute_ops_list (enum tree_code opcode,\n \t  oecount c;\n \t  void **slot;\n \t  size_t idx;\n+\t  if (oe1->count != 1)\n+\t    continue;\n \t  c.oecode = oecode;\n \t  c.cnt = 1;\n \t  c.id = next_oecount_id++;\n@@ -1311,7 +1336,7 @@ undistribute_ops_list (enum tree_code opcode,\n \n \t  FOR_EACH_VEC_ELT (operand_entry_t, subops[i], j, oe1)\n \t    {\n-\t      if (oe1->op == c->op)\n+\t      if (oe1->op == c->op && oe1->count == 1)\n \t\t{\n \t\t  SET_BIT (candidates2, i);\n \t\t  ++nr_candidates2;\n@@ -3275,8 +3300,10 @@ attempt_builtin_powi (gimple stmt, VEC(operand_entry_t, heap) **ops,\n \t  gsi_insert_before (&gsi, pow_stmt, GSI_SAME_STMT);\n \t}\n \n-      /* Append the result of this iteration to the ops vector.  */\n-      add_to_ops_vec (ops, iter_result);\n+      /* Append the result of this iteration to the ops vector.\n+         Give it a rank higher than all other ranks in the ops vector\n+         so that all uses of it will be forced to come after it.  */\n+      add_to_ops_vec_max_rank (ops, iter_result);\n \n       /* Decrement the occurrence count of each element in the product\n \t by the count found above, and remove this many copies of each"}]}