{"sha": "20804d96d131529e7f7f300458e02b7f1ed30d6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA4MDRkOTZkMTMxNTI5ZTdmN2YzMDA0NThlMDJiN2YxZWQzMGQ2Yw==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2013-01-30T09:26:21Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2013-01-30T09:26:21Z"}, "message": "Properly set progbits/nobits for Solaris/SPARC as\n\n\t* configure.ac (HAVE_AS_SPARC_NOBITS): New test.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* config/sparc/sparc.c (sparc_solaris_elf_asm_named_section): Emit\n\t#nobits/#progbits if supported.\n\nFrom-SVN: r195572", "tree": {"sha": "8515fd046813cc90ae619e11c467f19cbd84522d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8515fd046813cc90ae619e11c467f19cbd84522d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/20804d96d131529e7f7f300458e02b7f1ed30d6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20804d96d131529e7f7f300458e02b7f1ed30d6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20804d96d131529e7f7f300458e02b7f1ed30d6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20804d96d131529e7f7f300458e02b7f1ed30d6c/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6690cb20df45ead8d49a0697b56b16b23476b2b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6690cb20df45ead8d49a0697b56b16b23476b2b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6690cb20df45ead8d49a0697b56b16b23476b2b9"}], "stats": {"total": 83, "additions": 69, "deletions": 14}, "files": [{"sha": "b796e699d383ab551f78db9852ce08dcc5d6fbe6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20804d96d131529e7f7f300458e02b7f1ed30d6c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20804d96d131529e7f7f300458e02b7f1ed30d6c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=20804d96d131529e7f7f300458e02b7f1ed30d6c", "patch": "@@ -1,3 +1,11 @@\n+2013-01-30  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* configure.ac (HAVE_AS_SPARC_NOBITS): New test.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* config/sparc/sparc.c (sparc_solaris_elf_asm_named_section): Emit\n+\t#nobits/#progbits if supported.\n+\n 2013-01-29  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/56121"}, {"sha": "d80fb9f6e11379cb778c2fbe791168e18610e588", "filename": "gcc/config.in", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20804d96d131529e7f7f300458e02b7f1ed30d6c/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20804d96d131529e7f7f300458e02b7f1ed30d6c/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=20804d96d131529e7f7f300458e02b7f1ed30d6c", "patch": "@@ -199,12 +199,6 @@\n #endif\n \n \n-/* Define if the zone collector is in use */\n-#ifndef USED_FOR_TARGET\n-#undef GGC_ZONE\n-#endif\n-\n-\n /* mcontext_t fields start with __ */\n #ifndef USED_FOR_TARGET\n #undef HAS_MCONTEXT_T_UNDERSCORES\n@@ -266,12 +260,6 @@\n #endif\n \n \n-/* Define if your assembler supports SPARC4 instructions. */\n-#ifndef USED_FOR_TARGET\n-#undef HAVE_AS_SPARC4\n-#endif\n-\n-\n /* Define if your assembler supports fprnd. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_FPRND\n@@ -477,12 +465,24 @@\n #endif\n \n \n+/* Define if your assembler supports SPARC4 instructions. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_SPARC4\n+#endif\n+\n+\n /* Define if your assembler and linker support GOTDATA_OP relocs. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_AS_SPARC_GOTDATA_OP\n #endif\n \n \n+/* Define to 1 if your assembler supports #nobits, 0 otherwise. */\n+#ifndef USED_FOR_TARGET\n+#undef HAVE_AS_SPARC_NOBITS\n+#endif\n+\n+\n /* Define if your assembler and linker support unaligned PC relative relocs.\n    */\n #ifndef USED_FOR_TARGET\n@@ -1228,7 +1228,7 @@\n #endif\n \n \n-/* Define if your PowerPC64 linker supports a large TOC. */\n+/* Define if your AIX linker supports a large TOC. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_LD_LARGE_TOC\n #endif"}, {"sha": "08c2894fbbc0f5e2d34962086bb87f680ba664d2", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20804d96d131529e7f7f300458e02b7f1ed30d6c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20804d96d131529e7f7f300458e02b7f1ed30d6c/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=20804d96d131529e7f7f300458e02b7f1ed30d6c", "patch": "@@ -9512,7 +9512,14 @@ sparc_solaris_elf_asm_named_section (const char *name, unsigned int flags,\n   if (flags & SECTION_CODE)\n     fputs (\",#execinstr\", asm_out_file);\n \n-  /* ??? Handle SECTION_BSS.  */\n+  /* Sun as only supports #nobits/#progbits since Solaris 10.  */\n+  if (HAVE_AS_SPARC_NOBITS)\n+    {\n+      if (flags & SECTION_BSS)\n+\tfputs (\",#nobits\", asm_out_file);\n+      else\n+\tfputs (\",#progbits\", asm_out_file);\n+    }\n \n   fputc ('\\n', asm_out_file);\n }"}, {"sha": "6711c0feb5f7f8d3682bb8b4c39bb4394efaaf49", "filename": "gcc/configure", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20804d96d131529e7f7f300458e02b7f1ed30d6c/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20804d96d131529e7f7f300458e02b7f1ed30d6c/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=20804d96d131529e7f7f300458e02b7f1ed30d6c", "patch": "@@ -23927,6 +23927,39 @@ $as_echo \"#define HAVE_AS_REGISTER_PSEUDO_OP 1\" >>confdefs.h\n \n fi\n \n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for #nobits\" >&5\n+$as_echo_n \"checking assembler for #nobits... \" >&6; }\n+if test \"${gcc_cv_as_sparc_nobits+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gcc_cv_as_sparc_nobits=no\n+  if test x$gcc_cv_as != x; then\n+    $as_echo '.section \"nobits\",#alloc,#write,#nobits\n+       .section \"progbits\",#alloc,#write,#progbits' > conftest.s\n+    if { ac_try='$gcc_cv_as $gcc_cv_as_flags  -o conftest.o conftest.s >&5'\n+  { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_try\\\"\"; } >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; }; }\n+    then\n+\tgcc_cv_as_sparc_nobits=yes\n+    else\n+      echo \"configure: failed program was\" >&5\n+      cat conftest.s >&5\n+    fi\n+    rm -f conftest.o conftest.s\n+  fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_as_sparc_nobits\" >&5\n+$as_echo \"$gcc_cv_as_sparc_nobits\" >&6; }\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_AS_SPARC_NOBITS `if test $gcc_cv_as_sparc_nobits = yes; then echo 1; else echo 0; fi`\n+_ACEOF\n+\n+\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: checking assembler for -relax option\" >&5\n $as_echo_n \"checking assembler for -relax option... \" >&6; }\n if test \"${gcc_cv_as_sparc_relax+set}\" = set; then :"}, {"sha": "9ae560489059d1c4a6cfe5e92b3bc3434f7b97a2", "filename": "gcc/configure.ac", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/20804d96d131529e7f7f300458e02b7f1ed30d6c/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/20804d96d131529e7f7f300458e02b7f1ed30d6c/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=20804d96d131529e7f7f300458e02b7f1ed30d6c", "patch": "@@ -3467,6 +3467,13 @@ case \"$target\" in\n       [AC_DEFINE(HAVE_AS_REGISTER_PSEUDO_OP, 1,\n \t\t[Define if your assembler supports .register.])])\n \n+    gcc_GAS_CHECK_FEATURE([@%:@nobits], gcc_cv_as_sparc_nobits,,,\n+      [.section \"nobits\",#alloc,#write,#nobits\n+       .section \"progbits\",#alloc,#write,#progbits])\n+    AC_DEFINE_UNQUOTED(HAVE_AS_SPARC_NOBITS,\n+      [`if test $gcc_cv_as_sparc_nobits = yes; then echo 1; else echo 0; fi`],\n+      [Define to 1 if your assembler supports #nobits, 0 otherwise.])\n+\n     gcc_GAS_CHECK_FEATURE([-relax option], gcc_cv_as_sparc_relax,,\n       [-relax], [.text],,\n       [AC_DEFINE(HAVE_AS_RELAX_OPTION, 1,"}]}