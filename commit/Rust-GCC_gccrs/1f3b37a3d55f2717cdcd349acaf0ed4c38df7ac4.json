{"sha": "1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYzYjM3YTNkNTVmMjcxN2NkY2QzNDlhY2FmMGVkNGMzOGRmN2FjNA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-06-30T17:23:53Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-06-30T17:23:53Z"}, "message": "rtl.def (DEFINE_INSN, [...]): Change output-template slot to format 'T'.\n\n\t* rtl.def (DEFINE_INSN, DEFINE_INSN_AND_SPLIT, DEFINE_PEEPHOLE):\n\tChange output-template slot to format 'T'.\n\t* rtl.h (XTMPL): New.\n\t* read-rtl.c (read_escape): New function.\n\t(read_quoted_string, read_braced_string): Use it.\n\t(read_rtx): Set star_if_braced from the format string.\n\tUse XTMPL where appropriate.\n\t* genoutput.c (gen_insn, gen_peephole): Use XTMPL to get the\n\ttemplate string.\n\n\t* rtl.c: Include errors.h for sake of rtl_check_failed* routines.\n\tDocument 'T' in rtx format strings.\n\t* Makefile.in (rtl.o, $(HOST_PREFIX_1)rtl.o): Depend on errors.h.\n\t* errors.c (internal_error): Add missing \": \" at end of string.\n\n\t* i860.md: Change triple backslashes to double backslashes at\n\tends of lines in output templates.\n\nFrom-SVN: r43665", "tree": {"sha": "f463ba2f0823d6664856d0b8348a8f2cc0663d3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f463ba2f0823d6664856d0b8348a8f2cc0663d3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4/comments", "author": null, "committer": null, "parents": [{"sha": "07804c3b7d630c9e75a42f74f2eec39dba49aa64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07804c3b7d630c9e75a42f74f2eec39dba49aa64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07804c3b7d630c9e75a42f74f2eec39dba49aa64"}], "stats": {"total": 176, "additions": 109, "deletions": 67}, "files": [{"sha": "5eedd0fadfec9838050b55e8592113c76442e6ef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4", "patch": "@@ -1,3 +1,23 @@\n+2001-06-30  Zack Weinberg  <zackw@stanford.edu>\n+\n+\t* rtl.def (DEFINE_INSN, DEFINE_INSN_AND_SPLIT, DEFINE_PEEPHOLE):\n+\tChange output-template slot to format 'T'.\n+\t* rtl.h (XTMPL): New.\n+\t* read-rtl.c (read_escape): New function.\n+\t(read_quoted_string, read_braced_string): Use it.\n+\t(read_rtx): Set star_if_braced from the format string.\n+\tUse XTMPL where appropriate.\n+\t* genoutput.c (gen_insn, gen_peephole): Use XTMPL to get the\n+\ttemplate string.\n+\n+\t* rtl.c: Include errors.h for sake of rtl_check_failed* routines.\n+\tDocument 'T' in rtx format strings.\n+\t* Makefile.in (rtl.o, $(HOST_PREFIX_1)rtl.o): Depend on errors.h.\n+\t* errors.c (internal_error): Add missing \": \" at end of string.\n+\n+\t* i860.md: Change triple backslashes to double backslashes at\n+\tends of lines in output templates.\n+\n 2001-06-29  Nick Clifton  <nickc@cambridge.redhat.com>\n \n \t* gcc.c (process_command): Append a DIR_SEPARATOR to a path\n@@ -1015,7 +1035,7 @@ Mon Jun 18 12:50:49 2001  Jeffrey A Law  (law@cygnus.com)\n \t(delete_unreachable_blocks): Use find_unreachable_blocks.\n \t* basic-block.h (find_unreachable_blocks): Declare.\n \n-        * dce.c (eliminate_dead_code): Fix formatting glitch.\n+\t* dce.c (eliminate_dead_code): Fix formatting glitch.\n \n 2001-06-18  Jason Merrill  <jason_merrill@redhat.com>\n "}, {"sha": "e8493bacb3ef8a3095361c06de92f5e99b4a785a", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4", "patch": "@@ -1345,7 +1345,7 @@ toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) function.h \\\n \t  -c $(srcdir)/toplev.c\n main.o : main.c toplev.h\n \n-rtl.o : rtl.c $(GCONFIG_H) $(SYSTEM_H) $(RTL_H) real.h $(GGC_H)\n+rtl.o : rtl.c $(GCONFIG_H) $(SYSTEM_H) $(RTL_H) real.h $(GGC_H) errors.h\n \t$(CC) -c $(ALL_CFLAGS) -DGENERATOR_FILE $(ALL_CPPFLAGS) $(INCLUDES) $< $(OUTPUT_OPTION)\n \n print-rtl.o : print-rtl.c $(GCONFIG_H) $(SYSTEM_H) $(RTL_H) hard-reg-set.h \\\n@@ -1822,7 +1822,7 @@ gengenrtl.o : gengenrtl.c $(RTL_BASE_H) $(HCONFIG_H) $(SYSTEM_H) real.h\n # and HOST_PREFIX_1 is `foobar', just to ensure these rules don't conflict\n # with the rules for rtl.o, etc.\n $(HOST_PREFIX_1)rtl.o: $(srcdir)/rtl.c $(HCONFIG_H) $(SYSTEM_H) $(RTL_H) \\\n-  $(GGC_H)\n+  $(GGC_H) errors.h\n \trm -f $(HOST_PREFIX)rtl.c\n \tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/rtl.c > $(HOST_PREFIX)rtl.c\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)rtl.c"}, {"sha": "beeabe6927b8acc6c1f5ce8888cd0afbb07b374d", "filename": "gcc/config/i860/i860.md", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4/gcc%2Fconfig%2Fi860%2Fi860.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4/gcc%2Fconfig%2Fi860%2Fi860.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.md?ref=1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4", "patch": "@@ -1958,17 +1958,17 @@\n       cc_status.flags |= CC_KNOW_HI_R31;\n       cc_status.flags &= ~CC_HI_R31_ADJ;\n       cc_status.mdep = CONST2_RTX (SFmode); \n-      return \\\"frcp.dd %2,%3\\;fmul.dd %2,%3,%0\\;fmov.dd %?f0,%4\\;\\\\\\\n-orh 0x4000,%?r0,%?r31\\;ixfr %?r31,%R4\\;fsub.dd %4,%0,%0\\;\\\\\\\n-fmul.dd %3,%0,%3\\;fmul.dd %2,%3,%0\\;fsub.dd %4,%0,%0\\;\\\\\\\n-fmul.dd %3,%0,%3\\;fmul.dd %2,%3,%0\\;fsub.dd %4,%0,%0\\;\\\\\\\n+      return \\\"frcp.dd %2,%3\\;fmul.dd %2,%3,%0\\;fmov.dd %?f0,%4\\;\\\\\n+orh 0x4000,%?r0,%?r31\\;ixfr %?r31,%R4\\;fsub.dd %4,%0,%0\\;\\\\\n+fmul.dd %3,%0,%3\\;fmul.dd %2,%3,%0\\;fsub.dd %4,%0,%0\\;\\\\\n+fmul.dd %3,%0,%3\\;fmul.dd %2,%3,%0\\;fsub.dd %4,%0,%0\\;\\\\\n fmul.dd %3,%1,%3\\;fmul.dd %0,%3,%0\\\";\n     }\n   else\n-    return \\\"frcp.dd %2,%3\\;fmul.dd %2,%3,%0\\;fmov.dd %?f0,%4\\;\\\\\\\n-ixfr %?r31,%R4\\;fsub.dd %4,%0,%0\\;\\\\\\\n-fmul.dd %3,%0,%3\\;fmul.dd %2,%3,%0\\;fsub.dd %4,%0,%0\\;\\\\\\\n-fmul.dd %3,%0,%3\\;fmul.dd %2,%3,%0\\;fsub.dd %4,%0,%0\\;\\\\\\\n+    return \\\"frcp.dd %2,%3\\;fmul.dd %2,%3,%0\\;fmov.dd %?f0,%4\\;\\\\\n+ixfr %?r31,%R4\\;fsub.dd %4,%0,%0\\;\\\\\n+fmul.dd %3,%0,%3\\;fmul.dd %2,%3,%0\\;fsub.dd %4,%0,%0\\;\\\\\n+fmul.dd %3,%0,%3\\;fmul.dd %2,%3,%0\\;fsub.dd %4,%0,%0\\;\\\\\n fmul.dd %3,%1,%3\\;fmul.dd %0,%3,%0\\\";\n }\")\n \n@@ -1991,9 +1991,9 @@ fmul.dd %3,%1,%3\\;fmul.dd %0,%3,%0\\\";\n       cc_status.mdep = CONST2_RTX (SFmode);\n       output_asm_insn (\\\"orh 0x4000,%?r0,%?r31\\\", operands);\n     }\n-  return \\\"ixfr %?r31,%4\\;frcp.ss %2,%0\\;\\\\\\\n-fmul.ss %2,%0,%3\\;fsub.ss %4,%3,%3\\;fmul.ss %0,%3,%0\\;\\\\\\\n-fmul.ss %2,%0,%3\\;fsub.ss %4,%3,%3\\;\\\\\\\n+  return \\\"ixfr %?r31,%4\\;frcp.ss %2,%0\\;\\\\\n+fmul.ss %2,%0,%3\\;fsub.ss %4,%3,%3\\;fmul.ss %0,%3,%0\\;\\\\\n+fmul.ss %2,%0,%3\\;fsub.ss %4,%3,%3\\;\\\\\n fmul.ss %1,%0,%4\\;fmul.ss %3,%4,%0\\\";\n }\")\n \f"}, {"sha": "a61bb8801dafd338f610d58c87e73bfcc74ee46f", "filename": "gcc/errors.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4/gcc%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4/gcc%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ferrors.c?ref=1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4", "patch": "@@ -121,7 +121,7 @@ internal_error VPARAMS ((const char *format, ...))\n   format = va_arg (ap, const char *);\n #endif\n \n-  fprintf (stderr, \"%s: Internal error\", progname);\n+  fprintf (stderr, \"%s: Internal error: \", progname);\n   vfprintf (stderr, format, ap);\n   va_end (ap);\n   fputc ('\\n', stderr);"}, {"sha": "bca9a6232592a502146b81af11b5ae25ca061337", "filename": "gcc/genoutput.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4", "patch": "@@ -808,7 +808,7 @@ gen_insn (insn, lineno)\n   validate_insn_operands (d);\n   validate_insn_alternatives (d);\n   place_operands (d);\n-  process_template (d, XSTR (insn, 3));\n+  process_template (d, XTMPL (insn, 3));\n }\n \f\n /* Look at a define_peephole just read.  Assign its code number.\n@@ -849,7 +849,7 @@ gen_peephole (peep, lineno)\n \n   validate_insn_alternatives (d);\n   place_operands (d);\n-  process_template (d, XSTR (peep, 2));\n+  process_template (d, XTMPL (peep, 2));\n }\n \f\n /* Process a define_expand just read.  Assign its code number,"}, {"sha": "7e0da18f0f85cbb8aea2fd6ed8fc57fcdbec80a9", "filename": "gcc/read-rtl.c", "status": "modified", "additions": 65, "deletions": 47, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4/gcc%2Fread-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4/gcc%2Fread-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-rtl.c?ref=1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4", "patch": "@@ -37,6 +37,7 @@ static void read_name\t\tPARAMS ((char *, FILE *));\n static char *read_string\tPARAMS ((struct obstack *, FILE *, int));\n static char *read_quoted_string\tPARAMS ((struct obstack *, FILE *));\n static char *read_braced_string\tPARAMS ((struct obstack *, FILE *));\n+static void read_escape\t\tPARAMS ((struct obstack *, FILE *));\n static unsigned def_hash PARAMS ((const void *));\n static int def_name_eq_p PARAMS ((const void *, const void *));\n static void read_constants PARAMS ((FILE *infile, char *tmp_char));\n@@ -211,6 +212,60 @@ read_name (str, infile)\n     }\n }\n \n+/* Subroutine of the string readers.  Handles backslash escapes.\n+   Caller has read the backslash, but not placed it into the obstack.  */\n+static void\n+read_escape (ob, infile)\n+     struct obstack *ob;\n+     FILE *infile;\n+{\n+  int c = getc (infile);\n+  switch (c)\n+    {\n+      /* Backslash-newline is replaced by nothing, as in C.  */\n+    case '\\n':\n+      read_rtx_lineno++;\n+      return;\n+\n+      /* \\\" \\' \\\\ are replaced by the second character.  */\n+    case '\\\\':\n+    case '\"':\n+    case '\\'':\n+      break;\n+\n+      /* Standard C string escapes:\n+\t \\a \\b \\f \\n \\r \\t \\v\n+\t \\[0-7] \\x\n+\t all are passed through to the output string unmolested.\n+\t In normal use these wind up in a string constant processed\n+\t by the C compiler, which will translate them appropriately.\n+\t We do not bother checking that \\[0-7] are followed by up to\n+\t two octal digits, or that \\x is followed by N hex digits.\n+\t \\? \\u \\U are left out because they are not in traditional C.  */\n+    case 'a': case 'b': case 'f': case 'n': case 'r': case 't': case 'v':\n+    case '0': case '1': case '2': case '3': case '4': case '5': case '6':\n+    case '7': case 'x':\n+      obstack_1grow (ob, '\\\\');\n+      break;\n+\n+      /* \\; makes stuff for a C string constant containing\n+\t newline and tab.  */\n+    case ';':\n+      obstack_grow (ob, \"\\\\n\\\\t\", 4);\n+      return;\n+\n+      /* pass anything else through, but issue a warning.  */\n+    default:\n+      fprintf (stderr, \"%s:%d: warning: unrecognized escape \\\\%c\\n\",\n+\t       read_rtx_filename, read_rtx_lineno, c);\n+      obstack_1grow (ob, '\\\\');\n+      break;\n+    }\n+\n+  obstack_1grow (ob, c);\n+}\n+      \n+\n /* Read a double-quoted string onto the obstack.  Caller has scanned\n    the leading quote.  */\n static char *\n@@ -226,27 +281,8 @@ read_quoted_string (ob, infile)\n \tread_rtx_lineno++;\n       else if (c == '\\\\')\n \t{\n-\t  c = getc (infile);\t/* Read the string  */\n-\t  /* \\; makes stuff for a C string constant containing\n-\t     newline and tab.  */\n-\t  if (c == ';')\n-\t    {\n-\t      obstack_grow (ob, \"\\\\n\\\\t\", 4);\n-\t      continue;\n-\t    }\n-\t  else if (c == '\\n')\n-\t    /* \\-newline: delete the backslash and update our idea of\n-\t       the line number.  */\n-\t    read_rtx_lineno++;\n-\t  else if (c == '\\\\' || c == '\"')\n-\t    ; /* \\\", \\\\ are a literal quote and backslash.  */\n-\t  else\n-\t    /* Backslash escapes we do not recognize are left unmolested.\n-\t       They may be handled by the C compiler (e.g. \\n, \\t) */\n-\t    {\n-\t      ungetc (c, infile);  /* put it back */\n-\t      c = '\\\\';\n-\t    }\n+\t  read_escape (ob, infile);\n+\t  continue;\n \t}\n       else if (c == '\"')\n \tbreak;\n@@ -281,27 +317,8 @@ read_braced_string (ob, infile)\n \tbrace_depth--;\n       else if (c == '\\\\')\n \t{\n-\t  c = getc (infile);\t/* Read the string  */\n-\t  /* \\; makes stuff for a C string constant containing\n-\t     newline and tab.  */\n-\t  if (c == ';')\n-\t    {\n-\t      obstack_grow (ob, \"\\\\n\\\\t\", 4);\n-\t      continue;\n-\t    }\n-\t  else if (c == '\\n')\n-\t    /* \\-newline: delete the backslash and update our idea of\n-\t       the line number.  */\n-\t    read_rtx_lineno++;\n-\t  else if (c == '\\\\')\n-\t    ; /* \\\\ is a literal backslash */\n-\t  else\n-\t    /* Backslash escapes we do not recognize are left unmolested.\n-\t       They may be handled by the C compiler (e.g. \\n, \\t) */\n-\t    {\n-\t      ungetc (c, infile);  /* put it back */\n-\t      c = '\\\\';\n-\t    }\n+\t  read_escape (ob, infile);\n+\t  continue;\n \t}\n \n       obstack_1grow (ob, c);\n@@ -643,6 +660,7 @@ read_rtx (infile)\n \t    break;\n \t  }\n \n+      case 'T':\n       case 's':\n \t{\n \t  char *stringbuf;\n@@ -651,10 +669,7 @@ read_rtx (infile)\n \t     DEFINE_INSN_AND_SPLIT, or DEFINE_PEEPHOLE automatically\n \t     gets a star inserted as its first character, if it is\n \t     written with a brace block instead of a string constant.  */\n-\t  int star_if_braced =\n-\t    ((i == 3 && (GET_CODE (return_rtx) == DEFINE_INSN\n-\t\t\t || GET_CODE (return_rtx) == DEFINE_INSN_AND_SPLIT))\n-\t     || (i == 2 && GET_CODE (return_rtx) == DEFINE_PEEPHOLE));\n+\t  int star_if_braced = (format_ptr[-1] == 'T');\n \t    \n \t  stringbuf = read_string (&rtl_obstack, infile, star_if_braced);\n \n@@ -680,7 +695,10 @@ read_rtx (infile)\n \t      stringbuf = (char *) obstack_finish (&rtl_obstack);\n \t    }\n \n-\t  XSTR (return_rtx, i) = stringbuf;\n+\t  if (star_if_braced)\n+\t    XTMPL (return_rtx, i) = stringbuf;\n+\t  else\n+\t    XSTR (return_rtx, i) = stringbuf;\n \t}\n \tbreak;\n "}, {"sha": "0e4a9b33da56ecf0e3e48175024b0edefa622576", "filename": "gcc/rtl.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4", "patch": "@@ -24,6 +24,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"real.h\"\n #include \"ggc.h\"\n+#include \"errors.h\"\n \n \f\n /* Calculate the format for CONST_DOUBLE.  This depends on the relative\n@@ -230,6 +231,8 @@ const char * const rtx_format[] = {\n          prints the string\n      \"S\" like \"s\", but optional:\n \t the containing rtx may end before this operand\n+     \"T\" like \"s\", but treated specially by the RTL reader;\n+         only found in machine description patterns.\n      \"e\" a pointer to an rtl expression\n          prints the expression\n      \"E\" a pointer to a vector that points to a number of rtl expressions"}, {"sha": "500301a334c3c435f5cce6850bd5d25b1d718762", "filename": "gcc/rtl.def", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4", "patch": "@@ -184,15 +184,15 @@ DEF_RTL_EXPR(MATCH_INSN, \"match_insn\", \"is\", 'm')\n       template to use.\n    4: optionally, a vector of attributes for this insn.\n      */\n-DEF_RTL_EXPR(DEFINE_INSN, \"define_insn\", \"sEssV\", 'x')\n+DEF_RTL_EXPR(DEFINE_INSN, \"define_insn\", \"sEsTV\", 'x')\n \n /* Definition of a peephole optimization.\n    1st operand: vector of insn patterns to match\n    2nd operand: C expression that must be true\n    3rd operand: template or C code to produce assembler output.\n    4: optionally, a vector of attributes for this insn.\n      */\n-DEF_RTL_EXPR(DEFINE_PEEPHOLE, \"define_peephole\", \"EssV\", 'x')\n+DEF_RTL_EXPR(DEFINE_PEEPHOLE, \"define_peephole\", \"EsTV\", 'x')\n \n /* Definition of a split operation.\n    1st operand: insn pattern to match\n@@ -229,7 +229,7 @@ DEF_RTL_EXPR(DEFINE_SPLIT, \"define_split\", \"EsES\", 'x')\n \telements of `recog_operand' for use by the vector of insn-patterns.\n \t(`operands' is an alias here for `recog_operand').  \n    7: optionally, a vector of attributes for this insn.  */\n-DEF_RTL_EXPR(DEFINE_INSN_AND_SPLIT, \"define_insn_and_split\", \"sEsssESV\", 'x')\n+DEF_RTL_EXPR(DEFINE_INSN_AND_SPLIT, \"define_insn_and_split\", \"sEsTsESV\", 'x')\n \n /* Definition of an RTL peephole operation.\n    Follows the same arguments as define_split.  */"}, {"sha": "84de8fe3d39b84f581d7b19529da533cd2142bbc", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=1f3b37a3d55f2717cdcd349acaf0ed4c38df7ac4", "patch": "@@ -320,6 +320,7 @@ extern void rtvec_check_failed_bounds PARAMS ((rtvec, int,\n #define XBITMAP(RTX, N) (RTL_CHECK1(RTX, N, 'b').rtbit)\n #define XTREE(RTX, N)   (RTL_CHECK1(RTX, N, 't').rttree)\n #define XBBDEF(RTX, N)\t(RTL_CHECK1(RTX, N, 'B').bb)\n+#define XTMPL(RTX, N)\t(RTL_CHECK1(RTX, N, 'T').rtstr)\n \n #define XVECEXP(RTX, N, M)\tRTVEC_ELT (XVEC (RTX, N), M)\n #define XVECLEN(RTX, N)\t\tGET_NUM_ELEM (XVEC (RTX, N))"}]}