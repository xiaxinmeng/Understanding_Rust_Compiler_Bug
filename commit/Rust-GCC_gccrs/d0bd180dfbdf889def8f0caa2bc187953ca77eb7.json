{"sha": "d0bd180dfbdf889def8f0caa2bc187953ca77eb7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBiZDE4MGRmYmRmODg5ZGVmOGYwY2FhMmJjMTg3OTUzY2E3N2ViNw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-20T23:42:24Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-20T23:42:24Z"}, "message": "Fix indentation, clean up comments.\n\nRename structure fields and typedefs.\n\nFrom-SVN: r2192", "tree": {"sha": "4d31de1cc542dfd73beb2f9c68431a85cad5b08b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d31de1cc542dfd73beb2f9c68431a85cad5b08b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0bd180dfbdf889def8f0caa2bc187953ca77eb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0bd180dfbdf889def8f0caa2bc187953ca77eb7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0bd180dfbdf889def8f0caa2bc187953ca77eb7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0bd180dfbdf889def8f0caa2bc187953ca77eb7/comments", "author": null, "committer": null, "parents": [{"sha": "2156dfe3834bd6b3f5f2d411232caa61193e554b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2156dfe3834bd6b3f5f2d411232caa61193e554b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2156dfe3834bd6b3f5f2d411232caa61193e554b"}], "stats": {"total": 154, "additions": 71, "deletions": 83}, "files": [{"sha": "07c4419ee58ef01cfb7f5d169df52794d46c5de9", "filename": "gcc/objc/hash.h", "status": "modified", "additions": 71, "deletions": 83, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0bd180dfbdf889def8f0caa2bc187953ca77eb7/gcc%2Fobjc%2Fhash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0bd180dfbdf889def8f0caa2bc187953ca77eb7/gcc%2Fobjc%2Fhash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fhash.h?ref=d0bd180dfbdf889def8f0caa2bc187953ca77eb7", "patch": "@@ -23,10 +23,16 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n    the executable file might be covered by the GNU General Public License.  */\n \n /* \n-  $Header: /home/fsf/rms/c-runtime/dispatch/RCS/hash.h,v 0.11 1992/08/31 21:15:02 dglattin Exp rms $\n-  $Author: dglattin $\n-  $Date: 1992/08/31 21:15:02 $\n+  $Header: /home/fsf/rms/c-runtime/dispatch/RCS/hash.h,v 0.12 1992/09/02 01:59:40 rms Exp rms $\n+  $Author: rms $\n+  $Date: 1992/09/02 01:59:40 $\n   $Log: hash.h,v $\n+ * Revision 0.12  1992/09/02  01:59:40  rms\n+ * Changed the format of various sections to conform with GNU standard.\n+ * Deleted dependencies on some header files.\n+ * Replaced the use of the functions from memory.h with funtions like bzero.\n+ * Changed the include format.\n+ *\n  * Revision 0.11  1992/08/31  21:15:02  dglattin\n  * minor documentation changes.\n  *\n@@ -85,17 +91,14 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n  * Items in the cache are really of type void*.\n  */\n typedef struct cache_node {\n-  struct cache_node *nextNode;\t/* Pointer to next entry on\n-\t\t\t\t   the list.  NULL indicates\n-\t\t\t\t   end of list. */\n-  void *theKey;\t\t\t/* Key used to locate the\n-\t\t\t\t   value.  Used to locate\n-\t\t\t\t   value when more than one\n+  struct cache_node *next;\t/* Pointer to next entry on the list.\n+\t\t\t\t   NULL indicates end of list. */\n+  void *key;\t\t\t/* Key used to locate the value.  Used\n+\t\t\t\t   to locate value when more than one\n \t\t\t\t   key computes the same hash\n \t\t\t\t   value. */\n-  void *theValue;\t\t/* Value stored for the\n-\t\t\t\t   key. */\n-} CacheNode, *CacheNode_t;\n+  void *value;\t\t\t/* Value stored for the key. */\n+} *node_ptr;\n \n \n /*\n@@ -107,7 +110,7 @@ typedef struct cache_node {\n  * typedef.  Therefore, to remove compiler warnings the functions passed to\n  * hash_new will have to be casted to this type. \n  */\n-typedef unsigned int   (*HashFunc)(void*, void*);\n+typedef unsigned int   (*hash_func_type)(void*, void*);\n \n /*\n  * This data type is the function that compares two hash keys and returns an\n@@ -116,7 +119,7 @@ typedef unsigned int   (*HashFunc)(void*, void*);\n  * second. \n  */\n \n-typedef int     (*CompareFunc)(void*, void*);\n+typedef int     (*compare_func_type)(void*, void*);\n \n \n /*\n@@ -126,61 +129,48 @@ typedef int     (*CompareFunc)(void*, void*);\n  *   (except for new).\n  */\n typedef struct cache {\n-  /*\n-   * Variables used to implement the\n-   *  hash itself.\n-   */\n-  CacheNode_t  (*theNodeTable)[]; /* Pointer to an array of\n-\t\t\t\t     hash nodes. */\n-  /*\n-   * Variables used to track the size of the hash\n-   *  table so to determine when to resize it.\n-   */\n-  unsigned int sizeOfHash,\t/* Number of buckets \n-\t\t\t\t   allocated for the hash\n-\t\t\t\t   table  (number of array\n-\t\t\t\t   entries allocated for\n-\t\t\t\t   \"theNodeTable\").  Must be\n-\t\t\t\t   a power of two. */\n-  unsigned int entriesInHash,\t/* Current number of entries\n-\t\t\t\t   in the hash table. */\n-  unsigned int mask;\t\t/* Precomputed mask. */\n-  /*\n-   * Variables used to implement indexing\n-   *  through the hash table.\n-   */\n-  unsigned int lastBucket;\t/* Tracks which entry in the\n-\t\t\t\t   array where the last value\n-\t\t\t\t   was returned. */\n+  /* Variables used to implement the hash itself.  */\n+  node_ptr  (*node_table)[]; /* Pointer to an array of hash nodes.  */\n+  /* Variables used to track the size of the hash table so to determine\n+    when to resize it.  */\n+  unsigned int size; /* Number of buckets allocated for the hash table\n+\t\t\t(number of array entries allocated for\n+\t\t\t\"node_table\").  Must be a power of two.  */\n+  unsigned int used; /* Current number of entries in the hash table.  */\n+  unsigned int mask; /* Precomputed mask.  */\n+\n+  /* Variables used to implement indexing through the hash table.  */\n+\n+  unsigned int last_bucket; /* Tracks which entry in the array where\n+\t\t\t       the last value was returned.  */\n   /* Function used to compute a hash code given a key. \n-     This function is specified when the hash table is created. */\n-  HashFunc    hashFunc;\n-  /* Function used to compare two hash keys to determine\n-     if they are equal. */\n-  CompareFunc compareFunc;\n-} Cache, *Cache_t;\n-\n-\n-/* Allocate and initialize a hash table. */ \n-Cache_t \n-hash_new (unsigned int sizeOfHash,\n-\t  HashFunc aHashFunc, CompareFunc aCompareFunc);\n+     This function is specified when the hash table is created.  */\n+  hash_func_type    hash_func;\n+  /* Function used to compare two hash keys to see if they are equal.  */\n+  compare_func_type compare_func;\n+} *cache_ptr;\n+\n+\n+/* Allocate and initialize a hash table.  */ \n+\n+cache_ptr hash_new (unsigned int size,\n+\t\t    hash_func_type hash_func, compare_func_type compare_func);\n                        \n-/* Deallocate all of the hash nodes and the cache itself. */\n-void \n-hash_delete (Cache_t theCache);\n+/* Deallocate all of the hash nodes and the cache itself.  */\n+\n+void hash_delete (cache_ptr cache);\n \n /* Add the key/value pair to the hash table.  If the\n    hash table reaches a level of fullnes then it will be resized. \n                                                    \n-   assert if the key is already in the hash. */\n-void \n-hash_add (Cache_t *theCache, void *aKey, void *aValue);\n+   assert if the key is already in the hash.  */\n+\n+void hash_add (cache_ptr *cachep, void *key, void *value);\n      \n /* Remove the key/value pair from the hash table.  \n-   assert if the key isn't in the table. */\n-void \n-hash_remove (Cache_t theCache, void *aKey);\n+   assert if the key isn't in the table.  */\n+\n+void hash_remove (cache_ptr cache, void *key);\n \n /* Used to index through the hash table.  Start with NULL\n    to get the first entry.\n@@ -189,13 +179,13 @@ hash_remove (Cache_t theCache, void *aKey);\n    ** Don't modify the hash during this operation *** \n                                                   \n    Cache nodes are returned such that key or value can\n-   be extracted. */\n-CacheNode_t \n-hash_next (Cache_t theCache, CacheNode_t aCacheNode);\n+   be extracted.  */\n+\n+node_ptr hash_next (cache_ptr cache, node_ptr node);\n \n /* Used to return a value from a hash table using a given key.  */\n-void* \n-hash_value_for_key (Cache_t theCache, void *aKey);\n+\n+void *hash_value_for_key (cache_ptr cache, void *key);\n \n \n /************************************************\n@@ -207,49 +197,47 @@ hash_value_for_key (Cache_t theCache, void *aKey);\n ************************************************/\n \n /* Calculate a hash code by performing some \n-   manipulation of the key pointer. */\n+   manipulation of the key pointer.  */\n static inline unsigned int \n-intHash(Cache_t theCache, void *aKey)\n+hash_int (cache_ptr cache, void *key)\n {\n+  assert (sizeof (unsigned int) == sizeof (key));\n \n-\n-  assert(sizeof (unsigned int) == sizeof (aKey));\n-\n-  return ((unsigned int)aKey >> (sizeof(void*) - 1)) & theCache->mask ;\n+  return ((unsigned int)key >> (sizeof (void *) - 1)) & cache->mask;\n }\n \n \n /* Calculate a hash code by iterating over a NULL \n-   terminate string. */\n+   terminate string.  */\n static inline unsigned int \n-strHash(Cache_t theCache, void *aKey)\n+hash_string (cache_ptr cache, void *key)\n {\n   unsigned int ret = 0;\n   unsigned int ctr = 0;\n         \n         \n-  while(*(char*)aKey) {\n-    ret ^= *(char*)aKey++ << ctr;\n-    ctr = (ctr + 1) % sizeof(void*);\n+  while (*(char*)key) {\n+    ret ^= *(char*)key++ << ctr;\n+    ctr = (ctr + 1) % sizeof (void *);\n   }\n \n-  return ret & theCache->mask ;\n+  return ret & cache->mask;\n }\n \n \n-/* Compare two integers. */\n+/* Compare two integers.  */\n static inline int \n-intCmp(void *k1, void *k2)\n+compare_ints (void *k1, void *k2)\n {\n   return !((int)k1 - (int)k2);\n }\n \n \n-/* Compare two strings. */\n+/* Compare two strings.  */\n static inline int \n-strCmp(void *k1, void *k2)\n+compare_strings (void *k1, void *k2)\n {\n-  return !strcmp(k1, k2);\n+  return !strcmp (k1, k2);\n }\n \n "}]}