{"sha": "1548bf05145ddec6edf90ae59aecae1c39274bc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU0OGJmMDUxNDVkZGVjNmVkZjkwYWU1OWFlY2FlMWMzOTI3NGJjNw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-22T15:13:30Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-22T15:13:30Z"}, "message": "m32r.c (TARGET_TRAMPOLINE_INIT): New.\n\n        * config/m32r/m32r.c (TARGET_TRAMPOLINE_INIT): New.\n        (m32r_trampoline_init): New.\n        * config/m32r/m32r.h (INITIALIZE_TRAMPOLINE): Move code to\n        m32r_trampoline_init.\n\nFrom-SVN: r151997", "tree": {"sha": "01582d050371df5fc3da905697adf959386739b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01582d050371df5fc3da905697adf959386739b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1548bf05145ddec6edf90ae59aecae1c39274bc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1548bf05145ddec6edf90ae59aecae1c39274bc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1548bf05145ddec6edf90ae59aecae1c39274bc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1548bf05145ddec6edf90ae59aecae1c39274bc7/comments", "author": null, "committer": null, "parents": [{"sha": "229fbccbab7b8ad59558f34bce92311dbd48c2b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/229fbccbab7b8ad59558f34bce92311dbd48c2b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/229fbccbab7b8ad59558f34bce92311dbd48c2b4"}], "stats": {"total": 72, "additions": 40, "deletions": 32}, "files": [{"sha": "a8e0a1dc76c2c1404f007f7728138558697a6fac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1548bf05145ddec6edf90ae59aecae1c39274bc7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1548bf05145ddec6edf90ae59aecae1c39274bc7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1548bf05145ddec6edf90ae59aecae1c39274bc7", "patch": "@@ -130,6 +130,11 @@\n \tadjust for hook parameters.\n \t* config/m32c/m32c.h (INITIALIZE_TRAMPOLINE): Remove.\n \n+\t* config/m32r/m32r.c (TARGET_TRAMPOLINE_INIT): New.\n+\t(m32r_trampoline_init): New.\n+\t* config/m32r/m32r.h (INITIALIZE_TRAMPOLINE): Move code to\n+\tm32r_trampoline_init.\n+\n 2009-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000.c (bdesc_2arg): Fix CODE_FOR_vector_gt* codes"}, {"sha": "36a652acdf35899cd8822fc16b8d1f5dbb67c9cd", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1548bf05145ddec6edf90ae59aecae1c39274bc7/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1548bf05145ddec6edf90ae59aecae1c39274bc7/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=1548bf05145ddec6edf90ae59aecae1c39274bc7", "patch": "@@ -88,6 +88,7 @@ static bool m32r_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n static int m32r_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   tree, bool);\n static bool m32r_can_eliminate (const int, const int);\n+static void m32r_trampoline_init (rtx, tree, rtx);\n \f\n /* M32R specific attributes.  */\n \n@@ -155,6 +156,9 @@ static const struct attribute_spec m32r_attribute_table[] =\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE m32r_can_eliminate\n \n+#undef TARGET_TRAMPOLINE_INIT\n+#define TARGET_TRAMPOLINE_INIT m32r_trampoline_init\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Implement TARGET_HANDLE_OPTION.  */\n@@ -2630,3 +2634,34 @@ m32r_return_addr (int count)\n \n   return get_hard_reg_initial_val (Pmode, RETURN_ADDR_REGNUM);\n }\n+\n+static void\n+m32r_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n+{\n+  emit_move_insn (adjust_address (m_tramp, SImode, 0),\n+\t\t  gen_int_mode (TARGET_LITTLE_ENDIAN ?\n+\t\t\t\t0x017e8e17 : 0x178e7e01, SImode));\n+  emit_move_insn (adjust_address (m_tramp, SImode, 4),\n+\t\t  gen_int_mode (TARGET_LITTLE_ENDIAN ?\n+\t\t\t\t0x0c00ae86 : 0x86ae000c, SImode));\n+  emit_move_insn (adjust_address (m_tramp, SImode, 8),\n+\t\t  gen_int_mode (TARGET_LITTLE_ENDIAN ?\n+\t\t\t\t0xe627871e : 0x1e8727e6, SImode));\n+  emit_move_insn (adjust_address (m_tramp, SImode, 12),\n+\t\t  gen_int_mode (TARGET_LITTLE_ENDIAN ?\n+\t\t\t\t0xc616c626 : 0x26c61fc6, SImode));\n+  emit_move_insn (adjust_address (m_tramp, SImode, 16),\n+\t\t  chain_value);\n+  emit_move_insn (adjust_address (m_tramp, SImode, 20),\n+\t\t  XEXP (DECL_RTL (fndecl), 0));\n+\n+  if (m32r_cache_flush_trap >= 0)\n+    emit_insn (gen_flush_icache\n+\t       (validize_mem (adjust_address (m_tramp, SImode, 0)),\n+\t\tgen_int_mode (m32r_cache_flush_trap, SImode)));\n+  else if (m32r_cache_flush_func && m32r_cache_flush_func[0])\n+    emit_library_call (m32r_function_symbol (m32r_cache_flush_func),\n+\t\t       LCT_NORMAL, VOIDmode, 3, XEXP (m_tramp, 0), Pmode,\n+\t\t       gen_int_mode (TRAMPOLINE_SIZE, SImode), SImode,\n+\t\t       GEN_INT (3), SImode);\n+}"}, {"sha": "7b6237a7c22c994ffda82d0ecc87a0b6159e1bfd", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1548bf05145ddec6edf90ae59aecae1c39274bc7/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1548bf05145ddec6edf90ae59aecae1c39274bc7/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=1548bf05145ddec6edf90ae59aecae1c39274bc7", "patch": "@@ -990,38 +990,6 @@ L2:     .word STATIC\n /* Length in bytes of the trampoline for entering a nested function.  */\n #define TRAMPOLINE_SIZE 24\n \n-/* Emit RTL insns to initialize the variable parts of a trampoline.\n-   FNADDR is an RTX for the address of the function's pure code.\n-   CXT is an RTX for the static chain value for the function.  */\n-#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\t\\\n-      emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 0)),\t\t\\\n-\t\t      gen_int_mode (TARGET_LITTLE_ENDIAN ?\t\t\t\\\n-\t\t\t\t    0x017e8e17 : 0x178e7e01, SImode));\t\t\\\n-      emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 4)),\t\t\\\n-\t\t      gen_int_mode (TARGET_LITTLE_ENDIAN ?\t\t\t\\\n-\t\t\t\t    0x0c00ae86 : 0x86ae000c, SImode));\t\t\\\n-      emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 8)),\t\t\\\n-\t\t      gen_int_mode (TARGET_LITTLE_ENDIAN ?\t\t\t\\\n-\t\t\t\t    0xe627871e : 0x1e8727e6, SImode));\t\t\\\n-      emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 12)),\t\t\\\n-\t\t      gen_int_mode (TARGET_LITTLE_ENDIAN ?\t\t\t\\\n-\t\t\t\t    0xc616c626 : 0x26c61fc6, SImode));\t\t\\\n-      emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 16)),\t\t\\\n-\t\t      (CXT));\t\t\t\t\t\t\t\\\n-      emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 20)),\t\t\\\n-\t\t      (FNADDR));\t\t\t\t\t\t\\\n-      if (m32r_cache_flush_trap >= 0)\t\t\t\t\t\t\\\n-\temit_insn (gen_flush_icache (validize_mem (gen_rtx_MEM (SImode, TRAMP)),\\\n-\t\t\t\t     gen_int_mode (m32r_cache_flush_trap, SImode))); \\\n-      else if (m32r_cache_flush_func && m32r_cache_flush_func[0])\t\t\\\n-\temit_library_call (m32r_function_symbol (m32r_cache_flush_func),\t\\\n-\t\t\t   LCT_NORMAL, VOIDmode, 3, TRAMP, Pmode,\t\t\\\n-\t\t\t   gen_int_mode (TRAMPOLINE_SIZE, SImode), SImode,\t\\\n-\t\t\t   GEN_INT (3), SImode);\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n \f\n #define RETURN_ADDR_RTX(COUNT, FRAME) m32r_return_addr (COUNT)\n "}]}