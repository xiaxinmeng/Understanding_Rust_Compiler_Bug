{"sha": "d994a6e28cbd12d699d5cf522742d9cd3e84997a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk5NGE2ZTI4Y2JkMTJkNjk5ZDVjZjUyMjc0MmQ5Y2QzZTg0OTk3YQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2009-07-23T12:32:41Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-07-23T12:32:41Z"}, "message": "einfo.ads, [...]: Add comment.\n\n2009-07-23  Robert Dewar  <dewar@adacore.com>\n\n\t* einfo.ads, g-ssvety.ads, s-regexp.adb, g-sse.ads: Add comment. Minor\n\treformatting.\n\nFrom-SVN: r150001", "tree": {"sha": "3752b7e04be521a2c71dc27e920ad9ddbe98d5ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3752b7e04be521a2c71dc27e920ad9ddbe98d5ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d994a6e28cbd12d699d5cf522742d9cd3e84997a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d994a6e28cbd12d699d5cf522742d9cd3e84997a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d994a6e28cbd12d699d5cf522742d9cd3e84997a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d994a6e28cbd12d699d5cf522742d9cd3e84997a/comments", "author": null, "committer": null, "parents": [{"sha": "19f21e1133746fa91c6a68e7514fb51968f45050", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19f21e1133746fa91c6a68e7514fb51968f45050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19f21e1133746fa91c6a68e7514fb51968f45050"}], "stats": {"total": 94, "additions": 53, "deletions": 41}, "files": [{"sha": "7d6fa16960bd518cde0f8980d13c199b2852c504", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d994a6e28cbd12d699d5cf522742d9cd3e84997a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d994a6e28cbd12d699d5cf522742d9cd3e84997a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d994a6e28cbd12d699d5cf522742d9cd3e84997a", "patch": "@@ -1,3 +1,8 @@\n+2009-07-23  Robert Dewar  <dewar@adacore.com>\n+\n+\t* einfo.ads, g-ssvety.ads, s-regexp.adb, g-sse.ads: Update comment.\n+\tMinor reformatting.\n+\n 2009-07-23  Yannick Moy  <moy@adacore.com>\n \n \t* s-regexp.adb (Check_Well_Formed_Pattern): Called before compiling the"}, {"sha": "7a17efd9f7a42506d69a8d9d74380c533ad760ed", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d994a6e28cbd12d699d5cf522742d9cd3e84997a/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d994a6e28cbd12d699d5cf522742d9cd3e84997a/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=d994a6e28cbd12d699d5cf522742d9cd3e84997a", "patch": "@@ -357,13 +357,12 @@ package Einfo is\n --       overloaded entities it points to the parent subprogram of a derived\n --       subprogram. In case of abstract interface subprograms it points to the\n --       subprogram that covers the abstract interface primitive. Also used for\n---       a subprogram renaming, where it points to the renamed subprogram.\n---       For an inherited operation (of a type extension) that is overridden\n---       in a private part, the Alias is the overriding operation. In this\n---       fashion a call from outside the package ends up executing the new body\n---       even if non-dispatching, and a call from inside calls the overriding\n---       operation because it hides the implicit one.\n---       Alias is always empty for entries.\n+--       a subprogram renaming, where it points to the renamed subprogram. For\n+--       an inherited operation (of a type extension) that is overridden in a\n+--       private part, the Alias is the overriding operation. In this fashion a\n+--       call from outside the package ends up executing the new body even if\n+--       non-dispatching, and a call from inside calls the overriding operation\n+--       because it hides the implicit one. Alias is always empty for entries.\n \n --    Alignment (Uint14)\n --       Present in entities for types and also in constants, variables"}, {"sha": "d7b01a991bea7f549ca8a72946ab02e53a953745", "filename": "gcc/ada/g-sse.ads", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d994a6e28cbd12d699d5cf522742d9cd3e84997a/gcc%2Fada%2Fg-sse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d994a6e28cbd12d699d5cf522742d9cd3e84997a/gcc%2Fada%2Fg-sse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sse.ads?ref=d994a6e28cbd12d699d5cf522742d9cd3e84997a", "patch": "@@ -82,8 +82,6 @@\n --     end if;\n --  end;\n \n---  Use of Unchecked_Union to perform the overlays is not supported.\n-\n package GNAT.SSE is\n    type Float32 is new Float;\n    type Float64 is new Long_Float;"}, {"sha": "42e49bf5d838b7577e98493e3120c89c5016b404", "filename": "gcc/ada/g-ssvety.ads", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d994a6e28cbd12d699d5cf522742d9cd3e84997a/gcc%2Fada%2Fg-ssvety.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d994a6e28cbd12d699d5cf522742d9cd3e84997a/gcc%2Fada%2Fg-ssvety.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-ssvety.ads?ref=d994a6e28cbd12d699d5cf522742d9cd3e84997a", "patch": "@@ -32,14 +32,14 @@\n --  This unit exposes the Ada __m128 like data types to represent the contents\n --  of SSE registers, for use by bindings to the SSE intrinsic operations.\n \n---  See GNAT.SSE for the list of targets where this facility is supported.\n+--  See GNAT.SSE for the list of targets where this facility is supported\n \n package GNAT.SSE.Vector_Types is\n \n-   --  The reference guide states a few usage guidelines for the C types :\n+   --  The reference guide states a few usage guidelines for the C types:\n \n-   --  << Since these new data types are not basic ANSI C data types, you\n-   --     must observe the following usage restrictions:\n+   --    Since these new data types are not basic ANSI C data types, you\n+   --    must observe the following usage restrictions:\n    --\n    --     * Use new data types only on either side of an assignment, as a\n    --       return value, or as a parameter. You cannot use it with other\n@@ -51,29 +51,28 @@ package GNAT.SSE.Vector_Types is\n    --     * Use new data types only with the respective intrinsics described\n    --       in this documentation. >>\n \n-   type m128 is private;   --  SSE >= 1\n+   type m128  is private;  --  SSE >= 1\n    type m128d is private;  --  SSE >= 2\n    type m128i is private;  --  SSE >= 2\n \n private\n+   --  Each of the m128 types maps to a specific vector_type with an extra\n+   --  \"may_alias\" attribute as in GCC's definitions for C, for instance in\n+   --  xmmintrin.h:\n \n-   --  Each of the m128 types maps to a specific vector_type with\n-   --  an extra \"may_alias\" attribute as in GCC's definitions for C,\n-   --  for instance in xmmintrin.h:\n-   --\n    --  /* The Intel API is flexible enough that we must allow aliasing\n    --     with other vector types, and their scalar components.  */\n    --  typedef float __m128\n    --    __attribute__ ((__vector_size__ (16), __may_alias__));\n-   --\n+\n    --  /* Internal data types for implementing the intrinsics.  */\n    --  typedef float __v4sf __attribute__ ((__vector_size__ (16)));\n \n    ------------\n    --  M128  --\n    ------------\n \n-   --  << The __m128 data type can hold four 32-bit floating-point values. >>\n+   --  The __m128 data type can hold four 32-bit floating-point values\n \n    type m128 is array (1 .. 4) of Float32;\n    for m128'Alignment use VECTOR_ALIGN;\n@@ -84,7 +83,7 @@ private\n    --  m128d  --\n    -------------\n \n-   --  << The __m128d data type can hold two 64-bit floating-point values. >>\n+   --  The __m128d data type can hold two 64-bit floating-point values\n \n    type m128d is array (1 .. 2) of Float64;\n    for m128d'Alignment use VECTOR_ALIGN;\n@@ -95,8 +94,8 @@ private\n    --  m128i  --\n    -------------\n \n-   --  << The __m128i data type can hold sixteen 8-bit, eight 16-bit, four\n-   --     32-bit, or two 64-bit integer values. >>\n+   --  The __m128i data type can hold sixteen 8-bit, eight 16-bit, four 32-bit,\n+   --  or two 64-bit integer values.\n \n    type m128i is array (1 .. 2) of Integer64;\n    for m128i'Alignment use VECTOR_ALIGN;"}, {"sha": "293412c47641cf39b559e6fff225b8b67f04552c", "filename": "gcc/ada/s-regexp.adb", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d994a6e28cbd12d699d5cf522742d9cd3e84997a/gcc%2Fada%2Fs-regexp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d994a6e28cbd12d699d5cf522742d9cd3e84997a/gcc%2Fada%2Fs-regexp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-regexp.adb?ref=d994a6e28cbd12d699d5cf522742d9cd3e84997a", "patch": "@@ -130,12 +130,11 @@ package body System.Regexp is\n       --  This total does not include special operators, such as *, (, ...\n \n       procedure Check_Well_Formed_Pattern;\n-      --  Check that the pattern to compile is well-formed, so that\n-      --  subsequent code can rely on this without performing each time\n-      --  the checks to avoid accessing the pattern outside its bounds.\n-      --  Except that, not all well-formedness rules are checked.\n-      --  In particular, the rules about special characters not being\n-      --  treated as regular characters are not checked.\n+      --  Check that the pattern to compile is well-formed, so that subsequent\n+      --  code can rely on this without performing each time the checks to\n+      --  avoid accessing the pattern outside its bounds. However, not all\n+      --  well-formedness rules are checked. In particular, rules about special\n+      --  characters not being treated as regular characters are not checked.\n \n       procedure Create_Mapping;\n       --  Creates a mapping between characters in the regexp and columns\n@@ -193,21 +192,25 @@ package body System.Regexp is\n       -------------------------------\n \n       procedure Check_Well_Formed_Pattern is\n+         J : Integer;\n \n-         J                 : Integer := S'First;\n-         Past_Elmt         : Boolean := False;\n+         Past_Elmt : Boolean := False;\n          --  Set to True everywhere an elmt has been parsed, if Glob=False,\n          --  meaning there can be now an occurence of '*', '+' and '?'.\n-         Past_Term         : Boolean := False;\n+\n+         Past_Term : Boolean := False;\n          --  Set to True everywhere a term has been parsed, if Glob=False,\n          --  meaning there can be now an occurence of '|'.\n+\n          Parenthesis_Level : Integer := 0;\n          Curly_Level       : Integer := 0;\n-         Last_Open         : Integer := S'First - 1;\n+\n+         Last_Open : Integer := S'First - 1;\n          --  The last occurence of an opening parenthesis, if Glob=False,\n          --  or the last occurence of an opening curly brace, if Glob=True.\n \n          procedure Raise_Exception_If_No_More_Chars (K : Integer := 0);\n+         --  If no more characters are raised, call Raise_Exception\n \n          --------------------------------------\n          -- Raise_Exception_If_No_More_Chars --\n@@ -216,14 +219,14 @@ package body System.Regexp is\n          procedure Raise_Exception_If_No_More_Chars (K : Integer := 0) is\n          begin\n             if J + K > S'Last then\n-               Raise_Exception\n-                 (\"Ill-formed pattern while parsing\", J);\n+               Raise_Exception (\"Ill-formed pattern while parsing\", J);\n             end if;\n          end Raise_Exception_If_No_More_Chars;\n \n       --  Start of processing for Check_Well_Formed_Pattern\n \n       begin\n+         J := S'First;\n          while J <= S'Last loop\n             case S (J) is\n                when Open_Bracket =>\n@@ -254,14 +257,14 @@ package body System.Regexp is\n \n                   declare\n                      Possible_Range_Start : Boolean := True;\n-                     --  Set to True everywhere a range character '-'\n-                     --  can occur.\n+                     --  Set True everywhere a range character '-' can occur\n+\n                   begin\n                      loop\n                         exit when S (J) = Close_Bracket;\n \n-                        --  The current character should be followed by\n-                        --  a closing bracket.\n+                        --  The current character should be followed by a\n+                        --  closing bracket.\n \n                         Raise_Exception_If_No_More_Chars (1);\n \n@@ -281,6 +284,7 @@ package body System.Regexp is\n                            --  except as last character in the set.\n \n                            Possible_Range_Start := False;\n+\n                         else\n                            Possible_Range_Start := True;\n                         end if;\n@@ -300,8 +304,9 @@ package body System.Regexp is\n                   Past_Term := True;\n \n                when Close_Bracket =>\n-                  --  A close bracket must follow a open_bracket,\n-                  --  and cannot be found alone on the line.\n+\n+                  --  A close bracket must follow a open_bracket, and cannot be\n+                  --  found alone on the line.\n \n                   Raise_Exception\n                     (\"Incorrect character ']' in regular expression\", J);\n@@ -314,6 +319,7 @@ package body System.Regexp is\n \n                      Past_Elmt := True;\n                      Past_Term := True;\n+\n                   else\n                      --  \\ not allowed at the end of the regexp\n \n@@ -364,6 +370,7 @@ package body System.Regexp is\n                   if Glob then\n                      Curly_Level := Curly_Level + 1;\n                      Last_Open := J;\n+\n                   else\n                      --  Any character can be an elmt or a term\n \n@@ -388,6 +395,7 @@ package body System.Regexp is\n                           (\"Empty curly braces not allowed in regular \"\n                            & \"expression\", J);\n                      end if;\n+\n                   else\n                      --  Any character can be an elmt or a term\n \n@@ -397,6 +405,7 @@ package body System.Regexp is\n \n                when '*' | '?' | '+' =>\n                   if not Glob then\n+\n                      --  These operators must apply to an elmt sub-expression,\n                      --  and cannot be found if one has not just been parsed.\n \n@@ -412,6 +421,7 @@ package body System.Regexp is\n \n                when '|' =>\n                   if not Glob then\n+\n                      --  This operator must apply to a term sub-expression,\n                      --  and cannot be found if one has not just been parsed.\n \n@@ -427,6 +437,7 @@ package body System.Regexp is\n \n                when others =>\n                   if not Glob then\n+\n                      --  Any character can be an elmt or a term\n \n                      Past_Elmt := True;"}]}