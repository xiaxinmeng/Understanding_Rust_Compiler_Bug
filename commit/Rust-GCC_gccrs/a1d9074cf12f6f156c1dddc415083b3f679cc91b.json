{"sha": "a1d9074cf12f6f156c1dddc415083b3f679cc91b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFkOTA3NGNmMTJmNmYxNTZjMWRkZGM0MTUwODNiM2Y2NzljYzkxYg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "1999-11-10T19:59:20Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "1999-11-10T19:59:20Z"}, "message": "* gcc.c (do_spec_1): Support text between `%u' and `%O'.\n\nFrom-SVN: r30478", "tree": {"sha": "a153d5cdee691d83c3ac28805f356bd8066d459d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a153d5cdee691d83c3ac28805f356bd8066d459d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1d9074cf12f6f156c1dddc415083b3f679cc91b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d9074cf12f6f156c1dddc415083b3f679cc91b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1d9074cf12f6f156c1dddc415083b3f679cc91b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1d9074cf12f6f156c1dddc415083b3f679cc91b/comments", "author": null, "committer": null, "parents": [{"sha": "6c9821b783ceb6f2b12b40980af5b384f112ed89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c9821b783ceb6f2b12b40980af5b384f112ed89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c9821b783ceb6f2b12b40980af5b384f112ed89"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "a9a57ba8a49234d707372e49641aa1990f3607db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d9074cf12f6f156c1dddc415083b3f679cc91b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d9074cf12f6f156c1dddc415083b3f679cc91b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1d9074cf12f6f156c1dddc415083b3f679cc91b", "patch": "@@ -1,3 +1,7 @@\n+Wed Nov 10 10:52:42 1999  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* gcc.c (do_spec_1): Support text between `%u' and `%O'.\n+\n Wed Nov 10 12:43:21 1999  Philippe De Muyter  <phdm@macqel.be>\n                           Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n "}, {"sha": "88d83a5b7b8102eb0836ecb6189b5b1f2fe36c01", "filename": "gcc/gcc.c", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1d9074cf12f6f156c1dddc415083b3f679cc91b/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1d9074cf12f6f156c1dddc415083b3f679cc91b/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=a1d9074cf12f6f156c1dddc415083b3f679cc91b", "patch": "@@ -283,11 +283,11 @@ or with constant text in a single argument.\n \tchosen in a way that is hard to predict even when previously\n \tchosen file names are known.  For example, `%g.s ... %g.o ... %g.s'\n \tmight turn into `ccUVUUAU.s ccXYAXZ12.o ccUVUUAU.s'.  SUFFIX matches\n-\tthe regexp \"[.A-Za-z]*\" or the special string \"%O\", which is\n-\ttreated exactly as if %O had been pre-processed.  Previously, %g\n-\twas simply substituted with a file name chosen once per compilation,\n-\twithout regard to any appended suffix (which was therefore treated\n-\tjust like ordinary text), making such attacks more likely to succeed.\n+\tthe regexp \"[.A-Za-z]*%O\"; \"%O\" is treated exactly as if it\n+\thad been pre-processed.  Previously, %g was simply substituted\n+\twith a file name chosen once per compilation, without regard\n+\tto any appended suffix (which was therefore treated just like\n+\tordinary text), making such attacks more likely to succeed.\n  %uSUFFIX\n \tlike %g, but generates a new temporary file name even if %uSUFFIX\n \twas already seen.\n@@ -317,12 +317,13 @@ or with constant text in a single argument.\n \tat all, but they are included among the output files, so they will\n \tbe linked.\n  %O\tsubstitutes the suffix for object files.  Note that this is\n-\thandled specially when it immediately follows %g, %u, or %U,\n-\tbecause of the need for those to form complete file names.  The\n-\thandling is such that %O is treated exactly as if it had already\n-\tbeen substituted, except that %g, %u, and %U do not currently\n-\tsupport additional SUFFIX characters following %O as they would\n-\tfollowing, for example, `.o'.\n+        handled specially when it immediately follows %g, %u, or %U\n+\t(with or without a suffix argument) because of the need for\n+\tthose to form complete file names.  The handling is such that\n+\t%O is treated exactly as if it had already been substituted,\n+\texcept that %g, %u, and %U do not currently support additional\n+\tSUFFIX characters following %O as they would following, for\n+\texample, `.o'.\n  %p\tsubstitutes the standard macro predefinitions for the\n \tcurrent target machine.  Use this when running cpp.\n  %P\tlike %p, but puts `__' before and after the name of each macro.\n@@ -3980,21 +3981,29 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\tstruct temp_name *t;\n \t\tint suffix_length;\n \t\tconst char *suffix = p;\n+\t\tchar *saved_suffix = NULL;\n \n+\t\twhile (*p == '.' || ISALPHA ((unsigned char)*p))\n+\t\t  p++;\n+\t\tsuffix_length = p - suffix;\n \t\tif (p[0] == '%' && p[1] == 'O')\n \t\t  {\n \t\t    p += 2;\n \t\t    /* We don't support extra suffix characters after %O.  */\n \t\t    if (*p == '.' || ISALPHA ((unsigned char)*p))\n \t\t      abort ();\n-\t\t    suffix = OBJECT_SUFFIX;\n-\t\t    suffix_length = strlen (OBJECT_SUFFIX);\n-\t\t  }\n-\t\telse\n-\t\t  {\n-\t\t    while (*p == '.' || ISALPHA ((unsigned char)*p))\n-\t\t      p++;\n-\t\t    suffix_length = p - suffix;\n+\t\t    if (suffix_length == 0)\n+\t\t      suffix = OBJECT_SUFFIX;\n+\t\t    else\n+\t\t      {\n+\t\t\tsaved_suffix\n+\t\t\t  = (char *) xmalloc (suffix_length\n+\t\t\t\t\t      + strlen (OBJECT_SUFFIX));\n+\t\t\tstrncpy (saved_suffix, suffix, suffix_length);\n+\t\t\tstrcpy (saved_suffix + suffix_length,\n+\t\t\t\tOBJECT_SUFFIX);\n+\t\t      }\n+\t\t    suffix_length += strlen (OBJECT_SUFFIX);\n \t\t  }\n \n \t\t/* See if we already have an association of %g/%u/%U and\n@@ -4023,6 +4032,9 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t\t    t->filename_length = temp_filename_length;\n \t\t  }\n \n+\t\tif (saved_suffix)\n+\t\t  free (saved_suffix);\n+\n \t\tobstack_grow (&obstack, t->filename, t->filename_length);\n \t\tdelete_this_arg = 1;\n #else"}]}