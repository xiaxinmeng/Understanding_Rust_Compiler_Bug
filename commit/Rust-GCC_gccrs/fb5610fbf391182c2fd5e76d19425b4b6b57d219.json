{"sha": "fb5610fbf391182c2fd5e76d19425b4b6b57d219", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI1NjEwZmJmMzkxMTgyYzJmZDVlNzZkMTk0MjViNGI2YjU3ZDIxOQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@codesourcery.com", "date": "2013-09-14T15:36:41Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2013-09-14T15:36:41Z"}, "message": "re PR target/48094 (ld: warning: section has unexpectedly large size errors in objc/obj-c++ lto)\n\n\ngcc:\n\n       PR target/48094\n        * config/darwin.c (darwin_objc2_section): Note if ObjC Metadata is seen.\n        (darwin_objc1_section): Likewise.\n        (darwin_file_end): Emit Image Info section when required.\n\ngcc/c-family:\n\n       PR target/48094\n        * c.opt (fgnu-runtime, fnext-runtime, fobjc-abi-version,\n        fobjc-gc, freplace-objc-classes): Accept for LTO.\n\ngcc/objc:\n\n       PR target/48094\n        * objc-next-runtime-abi-01.c (generate_objc_image_info): Remove.\n        (objc_generate_v1_next_metadata): Remove generation of ImageInfo.\n        * objc-next-runtime-abi-02.c (generate_v2_objc_image_info): Remove.\n        (objc_generate_v2_next_metadata): Remove generation of ImageInfo.\n\nFrom-SVN: r202593", "tree": {"sha": "37f8cb3b89d7b0c506037785ff7f0325114657cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37f8cb3b89d7b0c506037785ff7f0325114657cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb5610fbf391182c2fd5e76d19425b4b6b57d219", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb5610fbf391182c2fd5e76d19425b4b6b57d219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb5610fbf391182c2fd5e76d19425b4b6b57d219", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb5610fbf391182c2fd5e76d19425b4b6b57d219/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afdec9bd067cffe3242fe256e547dc5733006b2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afdec9bd067cffe3242fe256e547dc5733006b2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afdec9bd067cffe3242fe256e547dc5733006b2c"}], "stats": {"total": 150, "additions": 69, "deletions": 81}, "files": [{"sha": "63821aca03f6cd7d073c6b0eb4a2ce4166f915e1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5610fbf391182c2fd5e76d19425b4b6b57d219/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5610fbf391182c2fd5e76d19425b4b6b57d219/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb5610fbf391182c2fd5e76d19425b4b6b57d219", "patch": "@@ -1,3 +1,10 @@\n+2013-09-14  Iain Sandoe  <iain@codesourcery.com>\n+\n+\tPR target/48094\n+\t* config/darwin.c (darwin_objc2_section): Note if ObjC Metadata is\n+\tseen.  (darwin_objc1_section): Likewise.\n+\t(darwin_file_end): Emit Image Info section when required.\n+\n 2013-09-14  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-into-ssa.c (gate_into_ssa): New."}, {"sha": "3061b4a896d9c6fd828230e770a6c7d3bace36e7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5610fbf391182c2fd5e76d19425b4b6b57d219/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5610fbf391182c2fd5e76d19425b4b6b57d219/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=fb5610fbf391182c2fd5e76d19425b4b6b57d219", "patch": "@@ -1,3 +1,9 @@\n+2013-09-14  Iain Sandoe  <iain@codesourcery.com>\n+\n+\tPR target/48094\n+\t* c.opt (fgnu-runtime, fnext-runtime, fobjc-abi-version,\n+\tfobjc-gc, freplace-objc-classes): Accept for LTO.\n+\n 2013-09-13  Jacek Caban  <jacek@codeweavers.com>\n \n \t* c-target.def: New hook"}, {"sha": "24d1b87d11f33ac9adc98a7b54d77da64b5a6442", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5610fbf391182c2fd5e76d19425b4b6b57d219/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5610fbf391182c2fd5e76d19425b4b6b57d219/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=fb5610fbf391182c2fd5e76d19425b4b6b57d219", "patch": "@@ -945,7 +945,7 @@ C++ ObjC++ Var(flag_no_gnu_keywords, 0)\n Recognize GNU-defined keywords\n \n fgnu-runtime\n-ObjC ObjC++ Report RejectNegative Var(flag_next_runtime,0) Init(NEXT_OBJC_RUNTIME)\n+ObjC ObjC++ LTO Report RejectNegative Var(flag_next_runtime,0) Init(NEXT_OBJC_RUNTIME)\n Generate code for GNU runtime environment\n \n fgnu89-inline\n@@ -1019,7 +1019,7 @@ fnew-abi\n C++ ObjC++ Ignore Warn(switch %qs is no longer supported)\n \n fnext-runtime\n-ObjC ObjC++ Report RejectNegative Var(flag_next_runtime)\n+ObjC ObjC++ LTO Report RejectNegative Var(flag_next_runtime)\n Generate code for NeXT (Apple Mac OS X) runtime environment\n \n fnil-receivers\n@@ -1037,7 +1037,7 @@ C++ ObjC++ Optimization Var(flag_nothrow_opt)\n Treat a throw() exception specification as noexcept to improve code size\n \n fobjc-abi-version=\n-ObjC ObjC++ Joined Report RejectNegative UInteger Var(flag_objc_abi)\n+ObjC ObjC++ LTO Joined Report RejectNegative UInteger Var(flag_objc_abi)\n Specify which ABI to use for Objective-C family code and meta-data generation.\n \n ; Generate special '- .cxx_construct' and '- .cxx_destruct' methods\n@@ -1057,7 +1057,7 @@ ObjC ObjC++ Var(flag_objc_exceptions)\n Enable Objective-C exception and synchronization syntax\n \n fobjc-gc\n-ObjC ObjC++ Var(flag_objc_gc)\n+ObjC ObjC++ LTO Var(flag_objc_gc)\n Enable garbage collection (GC) in Objective-C/Objective-C++ programs\n \n fobjc-nilcheck\n@@ -1117,7 +1117,7 @@ C++ ObjC++ Var(flag_pretty_templates) Init(1)\n -fno-pretty-templates Do not pretty-print template specializations as the template signature followed by the arguments\n \n freplace-objc-classes\n-ObjC ObjC++ Var(flag_replace_objc_classes)\n+ObjC ObjC++ LTO Var(flag_replace_objc_classes)\n Used in Fix-and-Continue mode to indicate that object files may be swapped in at runtime\n \n frepo"}, {"sha": "ab48558127e64b587b72df653a8ab27cae9f755b", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 43, "deletions": 15, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5610fbf391182c2fd5e76d19425b4b6b57d219/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5610fbf391182c2fd5e76d19425b4b6b57d219/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=fb5610fbf391182c2fd5e76d19425b4b6b57d219", "patch": "@@ -1329,6 +1329,9 @@ is_objc_metadata (tree decl)\n   return NULL_TREE;\n }\n \n+static int classes_seen;\n+static int objc_metadata_seen;\n+\n /* Return the section required for Objective C ABI 2 metadata.  */\n static section *\n darwin_objc2_section (tree decl ATTRIBUTE_UNUSED, tree meta, section * base)\n@@ -1338,12 +1341,9 @@ darwin_objc2_section (tree decl ATTRIBUTE_UNUSED, tree meta, section * base)\n   gcc_assert (TREE_CODE (ident) == IDENTIFIER_NODE);\n   p = IDENTIFIER_POINTER (ident);\n \n-  /* If we are in LTO, then we don't know the state of flag_next_runtime\n-     or flag_objc_abi when the code was generated.  We set these from the\n-     meta-data - which is needed to deal with const string constructors.  */\n+  gcc_checking_assert (flag_next_runtime == 1 && flag_objc_abi == 2);\n \n-  flag_next_runtime = 1;\n-  flag_objc_abi = 2;\n+  objc_metadata_seen = 1;\n \n   if (base == data_section)\n     base = darwin_sections[objc2_metadata_section];\n@@ -1366,7 +1366,10 @@ darwin_objc2_section (tree decl ATTRIBUTE_UNUSED, tree meta, section * base)\n   else if (!strncmp (p, \"V2_NLCL\", 7))\n     return darwin_sections[objc2_nonlazy_class_section];\n   else if (!strncmp (p, \"V2_CLAB\", 7))\n-    return darwin_sections[objc2_classlist_section];\n+    {\n+      classes_seen = 1;\n+      return darwin_sections[objc2_classlist_section];\n+    }\n   else if (!strncmp (p, \"V2_SRFS\", 7))\n     return darwin_sections[objc2_selector_refs_section];\n   else if (!strncmp (p, \"V2_NLCA\", 7))\n@@ -1401,12 +1404,9 @@ darwin_objc1_section (tree decl ATTRIBUTE_UNUSED, tree meta, section * base)\n   gcc_assert (TREE_CODE (ident) == IDENTIFIER_NODE);\n   p = IDENTIFIER_POINTER (ident);\n \n-  /* If we are in LTO, then we don't know the state of flag_next_runtime\n-     or flag_objc_abi when the code was generated.  We set these from the\n-     meta-data - which is needed to deal with const string constructors.  */\n-  flag_next_runtime = 1;\n-  if (!global_options_set.x_flag_objc_abi)\n-    flag_objc_abi = 1;\n+  gcc_checking_assert (flag_next_runtime == 1 && flag_objc_abi < 2);\n+\n+  objc_metadata_seen = 1;\n \n   /* String sections first, cos there are lots of strings.  */\n   if      (!strncmp (p, \"V1_STRG\", 7))\n@@ -1419,7 +1419,10 @@ darwin_objc1_section (tree decl ATTRIBUTE_UNUSED, tree meta, section * base)\n     return darwin_sections[objc_meth_var_types_section];\n \n   else if (!strncmp (p, \"V1_CLAS\", 7))\n-    return darwin_sections[objc_class_section];\n+    {\n+      classes_seen = 1;\n+      return darwin_sections[objc_class_section];\n+    }\n   else if (!strncmp (p, \"V1_META\", 7))\n     return darwin_sections[objc_meta_class_section];\n   else if (!strncmp (p, \"V1_CATG\", 7))\n@@ -1603,8 +1606,6 @@ machopic_select_section (tree decl,\n       if (TREE_CODE (name) == TYPE_DECL)\n         name = DECL_NAME (name);\n \n-      /* FIXME: This is unsatisfactory for LTO, since it relies on other\n-\t metadata determining the source FE.  */\n       if (!strcmp (IDENTIFIER_POINTER (name), \"__builtin_ObjCString\"))\n \t{\n \t  if (flag_next_runtime)\n@@ -2845,6 +2846,33 @@ darwin_file_end (void)\n     finalize_ctors ();\n   if (!vec_safe_is_empty (dtors))\n     finalize_dtors ();\n+\n+  /* If we are expecting to output NeXT ObjC meta-data, (and we actually see\n+     some) then we output the fix-and-continue marker (Image Info).\n+     This applies to Objective C, Objective C++ and LTO with either language\n+     as part of the input.  */\n+  if (flag_next_runtime && objc_metadata_seen)\n+    {\n+      unsigned int flags = 0;\n+      if (flag_objc_abi >= 2)\n+\t{\n+\t  flags = 16;\n+\t  output_section_asm_op\n+\t    (darwin_sections[objc2_image_info_section]->unnamed.data);\n+\t}\n+      else\n+\toutput_section_asm_op\n+\t  (darwin_sections[objc_image_info_section]->unnamed.data);\n+\n+      ASM_OUTPUT_ALIGN (asm_out_file, 2);\n+      fputs (\"L_OBJC_ImageInfo:\\n\", asm_out_file);\n+\n+      flags |= (flag_replace_objc_classes && classes_seen) ? 1 : 0;\n+      flags |= flag_objc_gc ? 2 : 0;\n+\n+      fprintf (asm_out_file, \"\\t.long\\t0\\n\\t.long\\t%u\\n\", flags);\n+     }\n+\n   machopic_finish (asm_out_file);\n   if (strcmp (lang_hooks.name, \"GNU C++\") == 0)\n     {"}, {"sha": "0cdd7616490f89adb3d41cd83d3ad5f3d973b89b", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5610fbf391182c2fd5e76d19425b4b6b57d219/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5610fbf391182c2fd5e76d19425b4b6b57d219/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=fb5610fbf391182c2fd5e76d19425b4b6b57d219", "patch": "@@ -1,3 +1,11 @@\n+2013-09-14  Iain Sandoe  <iain@codesourcery.com>\n+\n+\tPR target/48094\n+\t* objc-next-runtime-abi-01.c (generate_objc_image_info): Remove.\n+\t(objc_generate_v1_next_metadata): Remove generation of ImageInfo.\n+\t* objc-next-runtime-abi-02.c (generate_v2_objc_image_info): Remove.\n+\t(objc_generate_v2_next_metadata): Remove generation of ImageInfo.\n+\n 2013-07-21   Ond\u00c5\u0099ej B\u00c3\u00adlka  <neleai@seznam.cz>\n \n \t* objc-act.c: Fix typos."}, {"sha": "000256d83112f2edbcb5b542d7e8189ea008dfdf", "filename": "gcc/objc/objc-next-runtime-abi-01.c", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5610fbf391182c2fd5e76d19425b4b6b57d219/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5610fbf391182c2fd5e76d19425b4b6b57d219/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c?ref=fb5610fbf391182c2fd5e76d19425b4b6b57d219", "patch": "@@ -2332,36 +2332,6 @@ generate_classref_translation_entry (tree chain)\n   return;\n }\n \n-\n-/* The Fix-and-Continue functionality available in Mac OS X 10.3 and\n-   later requires that ObjC translation units participating in F&C be\n-   specially marked.  The following routine accomplishes this.  */\n-\n-/* static int _OBJC_IMAGE_INFO[2] = { 0, 1 }; */\n-\n-static void\n-generate_objc_image_info (void)\n-{\n-  tree decl;\n-  int flags\n-    = ((flag_replace_objc_classes && imp_count ? 1 : 0)\n-       | (flag_objc_gc ? 2 : 0));\n-  vec<constructor_elt, va_gc> *v = NULL;\n-  tree array_type;\n-\n-  array_type  = build_sized_array_type (integer_type_node, 2);\n-\n-  decl = start_var_decl (array_type, \"_OBJC_ImageInfo\");\n-\n-  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, integer_zero_node);\n-  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (integer_type_node, flags));\n-  /* The runtime wants this and refers to it in a manner hidden from the compiler.\n-     So we must force the output.  */\n-  DECL_PRESERVE_P (decl) = 1;\n-  OBJCMETA (decl, objc_meta, meta_info);\n-  finish_var_decl (decl, objc_build_constructor (TREE_TYPE (decl), v));\n-}\n-\n static void\n objc_generate_v1_next_metadata (void)\n {\n@@ -2412,9 +2382,6 @@ objc_generate_v1_next_metadata (void)\n   attr = build_tree_list (objc_meta, meta_modules);\n   build_module_descriptor (vers, attr);\n \n-  /* This conveys information on GC usage and zero-link.  */\n-  generate_objc_image_info ();\n-\n   /* Dump the class references.  This forces the appropriate classes\n      to be linked into the executable image, preserving unix archive\n      semantics.  */"}, {"sha": "09600068ca6e7a50c2188245d484a64b68567a92", "filename": "gcc/objc/objc-next-runtime-abi-02.c", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb5610fbf391182c2fd5e76d19425b4b6b57d219/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb5610fbf391182c2fd5e76d19425b4b6b57d219/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c?ref=fb5610fbf391182c2fd5e76d19425b4b6b57d219", "patch": "@@ -3331,31 +3331,6 @@ build_v2_ivar_offset_ref_table (void)\n     finish_var_decl (ref->decl, ref->offset);\n }\n \n-/* static int _OBJC_IMAGE_INFO[2] = { 0, 16 | flags }; */\n-\n-static void\n-generate_v2_objc_image_info (void)\n-{\n-  tree decl, array_type;\n-  vec<constructor_elt, va_gc> *v = NULL;\n-  int flags =\n-\t((flag_replace_objc_classes && imp_count ? 1 : 0)\n-\t  | (flag_objc_gc ? 2 : 0));\n-\n-  flags |= 16;\n-\n-  array_type  = build_sized_array_type (integer_type_node, 2);\n-\n-  decl = start_var_decl (array_type, \"_OBJC_ImageInfo\");\n-\n-  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, integer_zero_node);\n-  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (integer_type_node, flags));\n-  /* The Runtime wants this.  */\n-  DECL_PRESERVE_P (decl) = 1;\n-  OBJCMETA (decl, objc_meta, meta_info);\n-  finish_var_decl (decl, objc_build_constructor (TREE_TYPE (decl), v));\n-}\n-\n static void\n objc_generate_v2_next_metadata (void)\n {\n@@ -3407,9 +3382,6 @@ objc_generate_v2_next_metadata (void)\n   build_v2_address_table (nonlazy_category_list, \"_OBJC_NonLazyCategoryList$\",\n \t\t\t  meta_label_nonlazy_categorylist);\n \n-  /* This conveys information on GC usage and zero-link.  */\n-  generate_v2_objc_image_info ();\n-\n   /* Generate catch objects for eh, if any are needed.  */\n   build_v2_eh_catch_objects ();\n "}]}