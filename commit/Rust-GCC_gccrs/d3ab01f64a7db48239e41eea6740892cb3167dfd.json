{"sha": "d3ab01f64a7db48239e41eea6740892cb3167dfd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNhYjAxZjY0YTdkYjQ4MjM5ZTQxZWVhNjc0MDg5MmNiMzE2N2RmZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-02-18T08:50:29Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-07T09:29:15Z"}, "message": "[Ada] Fix type mismatch warnings during LTO bootstrap #4\n\ngcc/ada/\n\n\t* libgnat/s-stalib.ads (Exception_Data): Mark components as aliased.\n\t* stand.ads (Standard_Entity_Type): Enhance comments.\n\t* cstand.adb (Make_Component): Rename into...\n\t(Make_Aliased_Component): ...this; set Is_Aliased and Is_Independent\n\tflags on the component.\n\t(Create_Standard): Adjust the types of the component of the record\n\tStandard_Exception_Type and mark them as aliased.\n\t* exp_ch11.adb (Expand_N_Exception_Declaration): Use OK\n\tconversion to Standard_Address for Full_Name component, except\n\tin CodePeer_Mode (set it to 0).\n\t* exp_prag.adb (Expand_Pragma_Import_Or_Interface): Likewise.\n\t* raise.h (struct Exception_Data): Change the type of Full_Name,\n\tHTable_Ptr and Foreign_Data.", "tree": {"sha": "2cd6d003d3a3ded5807f1ab465e762581b6642d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cd6d003d3a3ded5807f1ab465e762581b6642d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3ab01f64a7db48239e41eea6740892cb3167dfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ab01f64a7db48239e41eea6740892cb3167dfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3ab01f64a7db48239e41eea6740892cb3167dfd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3ab01f64a7db48239e41eea6740892cb3167dfd/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6d3b4990f9db77e2f6f7fa15d17b22ecea46e74"}], "stats": {"total": 151, "additions": 76, "deletions": 75}, "files": [{"sha": "52291531cb6da867b8bef15c2ac61a9085dfc280", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 48, "deletions": 46, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ab01f64a7db48239e41eea6740892cb3167dfd/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ab01f64a7db48239e41eea6740892cb3167dfd/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=d3ab01f64a7db48239e41eea6740892cb3167dfd", "patch": "@@ -133,12 +133,12 @@ package body CStand is\n    --  Returns an identifier node with the same name as the defining identifier\n    --  corresponding to the given Standard_Entity_Type value.\n \n-   procedure Make_Component\n+   procedure Make_Aliased_Component\n      (Rec : Entity_Id;\n       Typ : Entity_Id;\n       Nam : String);\n-   --  Build a record component with the given type and name, and append to\n-   --  the list of components of Rec.\n+   --  Build an aliased record component with the given type and name,\n+   --  and append to the list of components of Rec.\n \n    function Make_Formal (Typ : Entity_Id; Nam : String) return Entity_Id;\n    --  Construct entity for subprogram formal with given name and type\n@@ -1495,38 +1495,40 @@ package body CStand is\n       --  known by the run-time. Components of the record are documented in\n       --  the declaration in System.Standard_Library.\n \n-      Standard_Exception_Type := New_Standard_Entity (\"exception\");\n-      Set_Ekind       (Standard_Exception_Type, E_Record_Type);\n-      Set_Etype       (Standard_Exception_Type, Standard_Exception_Type);\n-      Set_Scope       (Standard_Exception_Type, Standard_Standard);\n-      Set_Stored_Constraint\n-                      (Standard_Exception_Type, No_Elist);\n-      Init_Size_Align (Standard_Exception_Type);\n-      Set_Size_Known_At_Compile_Time\n-                      (Standard_Exception_Type, True);\n-\n-      Make_Component\n-        (Standard_Exception_Type, Standard_Boolean,   \"Not_Handled_By_Others\");\n-      Make_Component\n-        (Standard_Exception_Type, Standard_Character, \"Lang\");\n-      Make_Component\n-        (Standard_Exception_Type, Standard_Natural,   \"Name_Length\");\n-      Make_Component\n-        (Standard_Exception_Type, Standard_A_Char,    \"Full_Name\");\n-      Make_Component\n-        (Standard_Exception_Type, Standard_A_Char,    \"HTable_Ptr\");\n-      Make_Component\n-        (Standard_Exception_Type, Standard_A_Char,    \"Foreign_Data\");\n-      Make_Component\n-        (Standard_Exception_Type, Standard_A_Char,    \"Raise_Hook\");\n-\n-      --  Build tree for record declaration, for use by the back-end\n-\n-      declare\n-         Comp_List : List_Id;\n-         Comp      : Entity_Id;\n+      Build_Exception_Type : declare\n+         Comp_List      : List_Id;\n+         Comp           : Entity_Id;\n \n       begin\n+         Standard_Exception_Type := New_Standard_Entity (\"exception\");\n+         Set_Ekind       (Standard_Exception_Type, E_Record_Type);\n+         Set_Etype       (Standard_Exception_Type, Standard_Exception_Type);\n+         Set_Scope       (Standard_Exception_Type, Standard_Standard);\n+         Set_Stored_Constraint\n+                         (Standard_Exception_Type, No_Elist);\n+         Init_Size_Align (Standard_Exception_Type);\n+         Set_Size_Known_At_Compile_Time\n+                         (Standard_Exception_Type, True);\n+\n+         Make_Aliased_Component (Standard_Exception_Type, Standard_Boolean,\n+                         \"Not_Handled_By_Others\");\n+         Make_Aliased_Component (Standard_Exception_Type, Standard_Character,\n+                         \"Lang\");\n+         Make_Aliased_Component (Standard_Exception_Type, Standard_Natural,\n+                         \"Name_Length\");\n+         Make_Aliased_Component (Standard_Exception_Type, Standard_Address,\n+                         \"Full_Name\");\n+         Make_Aliased_Component (Standard_Exception_Type, Standard_A_Char,\n+                         \"HTable_Ptr\");\n+         Make_Aliased_Component (Standard_Exception_Type, Standard_Address,\n+                         \"Foreign_Data\");\n+         Make_Aliased_Component (Standard_Exception_Type, Standard_A_Char,\n+                         \"Raise_Hook\");\n+\n+         Layout_Type (Standard_Exception_Type);\n+\n+         --  Build tree for record declaration, for use by the back-end\n+\n          Comp      := First_Entity (Standard_Exception_Type);\n          Comp_List := New_List;\n          while Present (Comp) loop\n@@ -1535,9 +1537,9 @@ package body CStand is\n                 Defining_Identifier => Comp,\n                 Component_Definition =>\n                   Make_Component_Definition (Stloc,\n-                    Aliased_Present    => False,\n-                    Subtype_Indication => New_Occurrence_Of (Etype (Comp),\n-                                                             Stloc))),\n+                    Aliased_Present    => True,\n+                    Subtype_Indication =>\n+                      New_Occurrence_Of (Etype (Comp), Stloc))),\n               Comp_List);\n \n             Next_Entity (Comp);\n@@ -1547,15 +1549,13 @@ package body CStand is\n            Defining_Identifier => Standard_Exception_Type,\n            Type_Definition =>\n              Make_Record_Definition (Stloc,\n-               End_Label => Empty,\n+               End_Label      => Empty,\n                Component_List =>\n                  Make_Component_List (Stloc,\n                    Component_Items => Comp_List)));\n-      end;\n \n-      Append (Decl, Decl_S);\n-\n-      Layout_Type (Standard_Exception_Type);\n+         Append (Decl, Decl_S);\n+      end Build_Exception_Type;\n \n       --  Create declarations of standard exceptions\n \n@@ -1711,11 +1711,11 @@ package body CStand is\n       return Ident_Node;\n    end Identifier_For;\n \n-   --------------------\n-   -- Make_Component --\n-   --------------------\n+   ----------------------------\n+   -- Make_Aliased_Component --\n+   ----------------------------\n \n-   procedure Make_Component\n+   procedure Make_Aliased_Component\n      (Rec : Entity_Id;\n       Typ : Entity_Id;\n       Nam : String)\n@@ -1728,8 +1728,10 @@ package body CStand is\n       Set_Scope                     (Id, Rec);\n       Init_Component_Location       (Id);\n       Set_Original_Record_Component (Id, Id);\n+      Set_Is_Aliased                (Id);\n+      Set_Is_Independent            (Id);\n       Append_Entity (Id, Rec);\n-   end Make_Component;\n+   end Make_Aliased_Component;\n \n    -----------------\n    -- Make_Formal --"}, {"sha": "7c24da136d6d47281a5811a5e248daa08ea087ad", "filename": "gcc/ada/exp_ch11.adb", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ab01f64a7db48239e41eea6740892cb3167dfd/gcc%2Fada%2Fexp_ch11.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ab01f64a7db48239e41eea6740892cb3167dfd/gcc%2Fada%2Fexp_ch11.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch11.adb?ref=d3ab01f64a7db48239e41eea6740892cb3167dfd", "patch": "@@ -1246,16 +1246,13 @@ package body Exp_Ch11 is\n           Prefix         => New_Occurrence_Of (Ex_Id, Loc),\n           Attribute_Name => Name_Length));\n \n-      --  Full_Name component: Standard.A_Char!(Nam'Address)\n-\n-      --  The unchecked conversion causes capacity issues for CodePeer in some\n-      --  cases and is never useful, so we set the Full_Name component to null\n-      --  instead for CodePeer.\n+      --  Full_Name component: Standard_Address?(Nam'Address)\n+      --  or 0 if CodePeer_Mode\n \n       if CodePeer_Mode then\n-         Append_To (L, Make_Null (Loc));\n+         Append_To (L, Make_Integer_Literal (Loc, Uint_0));\n       else\n-         Append_To (L, Unchecked_Convert_To (Standard_A_Char,\n+         Append_To (L, OK_Convert_To (Standard_Address,\n            Make_Attribute_Reference (Loc,\n              Prefix         => New_Occurrence_Of (Ex_Id, Loc),\n              Attribute_Name => Name_Address)));\n@@ -1265,9 +1262,9 @@ package body Exp_Ch11 is\n \n       Append_To (L, Make_Null (Loc));\n \n-      --  Foreign_Data component: null\n+      --  Foreign_Data component: null address\n \n-      Append_To (L, Make_Null (Loc));\n+      Append_To (L, Make_Integer_Literal (Loc, Uint_0));\n \n       --  Raise_Hook component: null\n "}, {"sha": "e503f6d9de0c82e0cb12cdabfb147c2b7b056570", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ab01f64a7db48239e41eea6740892cb3167dfd/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ab01f64a7db48239e41eea6740892cb3167dfd/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=d3ab01f64a7db48239e41eea6740892cb3167dfd", "patch": "@@ -2039,7 +2039,7 @@ package body Exp_Prag is\n                     Expression => Relocate_Node (Rtti_Name))))));\n \n             Rewrite (Expression (Foreign_Data),\n-              Unchecked_Convert_To (Standard_A_Char,\n+              OK_Convert_To (Standard_Address,\n                 Make_Attribute_Reference (Loc,\n                   Prefix         => Make_Identifier (Loc, Chars (Dum)),\n                   Attribute_Name => Name_Address)));"}, {"sha": "fb6e992396813d670b4f21b2104bf0b1d0f4525f", "filename": "gcc/ada/libgnat/s-stalib.ads", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ab01f64a7db48239e41eea6740892cb3167dfd/gcc%2Fada%2Flibgnat%2Fs-stalib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ab01f64a7db48239e41eea6740892cb3167dfd/gcc%2Fada%2Flibgnat%2Fs-stalib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-stalib.ads?ref=d3ab01f64a7db48239e41eea6740892cb3167dfd", "patch": "@@ -86,44 +86,46 @@ package System.Standard_Library is\n \n    --  The following record defines the underlying representation of exceptions\n \n-   --  WARNING: Any changes to this may need to be reflected in the following\n+   --  WARNING: Any change to the record needs to be reflected in the following\n    --  locations in the compiler and runtime code:\n \n-   --    1. The Internal_Exception routine in s-exctab.adb\n-   --    2. The processing in gigi that tests Not_Handled_By_Others\n-   --    3. Expand_N_Exception_Declaration in Exp_Ch11\n-   --    4. The construction of the exception type in Cstand\n+   --    1. The construction of the exception type in Cstand\n+   --    2. Expand_N_Exception_Declaration in Exp_Ch11\n+   --    3. Expand_Pragma_Import_Or_Interface in Exp_Prag\n+   --    4. The processing in gigi that tests Not_Handled_By_Others\n+   --    5. The Internal_Exception routine in s-exctab.adb\n+   --    6. The declaration of the corresponding C type in raise.h\n \n    type Exception_Data is record\n-      Not_Handled_By_Others : Boolean;\n+      Not_Handled_By_Others : aliased Boolean;\n       --  Normally set False, indicating that the exception is handled in the\n       --  usual way by others (i.e. an others handler handles the exception).\n       --  Set True to indicate that this exception is not caught by others\n       --  handlers, but must be explicitly named in a handler. This latter\n       --  setting is currently used by the Abort_Signal.\n \n-      Lang : Character;\n+      Lang : aliased Character;\n       --  A character indicating the language raising the exception.\n       --  Set to \"A\" for exceptions defined by an Ada program.\n       --  Set to \"C\" for imported C++ exceptions.\n \n-      Name_Length : Natural;\n+      Name_Length : aliased Natural;\n       --  Length of fully expanded name of exception\n \n-      Full_Name : System.Address;\n+      Full_Name : aliased System.Address;\n       --  Fully expanded name of exception, null terminated\n       --  You can use To_Ptr to convert this to a string.\n \n-      HTable_Ptr : Exception_Data_Ptr;\n+      HTable_Ptr : aliased Exception_Data_Ptr;\n       --  Hash table pointer used to link entries together in the hash table\n       --  built (by Register_Exception in s-exctab.adb) for converting between\n       --  identities and names.\n \n-      Foreign_Data : Address;\n+      Foreign_Data : aliased System.Address;\n       --  Data for imported exceptions. Not used in the Ada case. This\n       --  represents the address of the RTTI for the C++ case.\n \n-      Raise_Hook : Raise_Action;\n+      Raise_Hook : aliased Raise_Action;\n       --  This field can be used to place a \"hook\" on an exception. If the\n       --  value is non-null, then it points to a procedure which is called\n       --  whenever the exception is raised. This call occurs immediately,"}, {"sha": "0288dd7fd932a7dc34b8ad8e299cd31577ef1119", "filename": "gcc/ada/raise.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ab01f64a7db48239e41eea6740892cb3167dfd/gcc%2Fada%2Fraise.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ab01f64a7db48239e41eea6740892cb3167dfd/gcc%2Fada%2Fraise.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise.h?ref=d3ab01f64a7db48239e41eea6740892cb3167dfd", "patch": "@@ -40,9 +40,9 @@ struct Exception_Data\n   char Not_Handled_By_Others;\n   char Lang;\n   int Name_Length;\n-  char *Full_Name;\n-  char *Htable_Ptr;\n-  void *Foreign_Data;\n+  __UINTPTR_TYPE__ Full_Name;\n+  void *HTable_Ptr;\n+  __UINTPTR_TYPE__ Foreign_Data;\n   void (*Raise_Hook)(void);\n };\n "}, {"sha": "f32265668c845706c0e82dc282d24de40fab0973", "filename": "gcc/ada/stand.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3ab01f64a7db48239e41eea6740892cb3167dfd/gcc%2Fada%2Fstand.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3ab01f64a7db48239e41eea6740892cb3167dfd/gcc%2Fada%2Fstand.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fstand.ads?ref=d3ab01f64a7db48239e41eea6740892cb3167dfd", "patch": "@@ -335,12 +335,12 @@ package Stand is\n    --  This is a type used to represent the Etype of exceptions\n \n    Standard_A_String : Entity_Id;\n-   --  An access to String type used for building elements of tables\n-   --  carrying the enumeration literal names.\n+   --  An access to String type used for building elements of tables carrying\n+   --  the enumeration literal names.\n \n    Standard_A_Char : Entity_Id;\n-   --  Access to character, used as a component of the exception type to denote\n-   --  a thin pointer component.\n+   --  An access to character type, used as a component of the exception type\n+   --  to denote a thin pointer component. Needed for non-GCC back-ends.\n \n    Standard_Debug_Renaming_Type : Entity_Id;\n    --  A zero-size subtype of Integer, used as the type of variables used to"}]}