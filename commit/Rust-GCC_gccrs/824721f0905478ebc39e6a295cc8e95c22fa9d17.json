{"sha": "824721f0905478ebc39e6a295cc8e95c22fa9d17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI0NzIxZjA5MDU0NzhlYmMzOWU2YTI5NWNjOGU5NWMyMmZhOWQxNw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-01-17T16:56:56Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-01-17T16:56:56Z"}, "message": "lto, testsuite: Fix ICE in -Wodr (PR lto/83121)\n\nPR lto/83121 reports an ICE deep inside the linemap code when -Wodr\nreports on a type mismatch.\n\nThe root cause is that the warning can access the DECL_SOURCE_LOCATION\nof a streamed-in decl before the lto_location_cache has been applied.\n\nlto_location_cache::input_location stores RESERVED_LOCATION_COUNT (==2)\nas a poison value until the cache is applied:\n250\t  /* Keep value RESERVED_LOCATION_COUNT in *loc as linemap lookups will\n251\t     ICE on it.  */\n\nThe fix is relatively simple: apply the cache before reading the\nDECL_SOURCE_LOCATION.\n\nTriggering the ICE was fiddly: it seems to be affected by many things,\nincluding the order of files, and (I think) by filenames.  My theory is\nthat it's affected by the ordering of the tree nodes in the LTO stream:\nfor the ICE to occur, the types in question need to be compared before\nsome other operation flushes the lto_location_cache.  This ordering\nis affected by the hash-based ordering in DFS in lto-streamer-out.c, which\nmight explain why r255066 seemed to trigger the bug; the only relevant\nchange to LTO there seemed to be:\n  * lto-streamer-out.c (hash_tree): Hash TYPE_EMPTY_P and DECL_PADDING_P.\nIf so, then the bug was presumably already present, but hidden.\n\nThe patch also adds regression test coverage for the ICE, which is more\ninvolved - as far as I can tell, we don't have an existing way to verify\ndiagnostics emitted during link-time optimization.\n\nHence the patch adds some machinery to lib/lto.exp to support two new\ndirectives: dg-lto-warning and dg-lto-message, corresponding to\ndg-warning and dg-message respectively, where the diagnostics are\nexpected to be emitted at link-time.\n\nThe test case includes examples of LTO warnings and notes in both the\nprimary and secondary source files\n\nDoing so required reusing the logic from DejaGnu for handling diagnostics.\nUnfortunately the pertinent code is a 50 line loop within a ~200 line Tcl\nfunction in dg.exp (dg-test), so I had to copy it from DejaGnu, making\nvarious changes as necessary (see lto_handle_diagnostics_for_file in the\npatch; for example the LTO version supports multiple source files,\nidentifying which source file emitted a diagnostic).\n\nFor non-LTO diagnostics we currently ignore surplus \"note\" diagnostics.\nThis patch updates lto_prune_warns to follow this behavior (since\notherwise we'd need numerous dg-lto-message directives for the motivating\ntest case).\n\nThe patch adds these PASS results to g++.sum:\n\nPASS: g++.dg/lto/pr83121 cp_lto_pr83121_0.o assemble, -O0 -flto\nPASS: g++.dg/lto/pr83121 cp_lto_pr83121_1.o assemble, -O0 -flto\nPASS: g++.dg/lto/pr83121  (test for LTO warnings, pr83121_0.C line 6)\nPASS: g++.dg/lto/pr83121  (test for LTO warnings, pr83121_0.C line 8)\nPASS: g++.dg/lto/pr83121  (test for LTO warnings, pr83121_1.C line 2)\nPASS: g++.dg/lto/pr83121  (test for LTO warnings, pr83121_1.C line 3)\nPASS: g++.dg/lto/pr83121 cp_lto_pr83121_0.o-cp_lto_pr83121_1.o link, -O0 -flto\n\nThe output for dg-lto-message above refers to \"warnings\", rather than\n\"messages\" but that's the same as for the non-LTO case, where dg-message\nalso refers to \"warnings\".\n\ngcc/ChangeLog:\n\tPR lto/83121\n\t* ipa-devirt.c (add_type_duplicate): When comparing memory layout,\n\tcall the lto_location_cache before reading the\n\tDECL_SOURCE_LOCATION of the types.\n\ngcc/testsuite/ChangeLog:\n\tPR lto/83121\n\t* g++.dg/lto/pr83121_0.C: New test case.\n\t* g++.dg/lto/pr83121_1.C: New test case.\n\t* lib/lto.exp (lto_handle_diagnostics_for_file): New procedure,\n\tadapted from DejaGnu's dg-test.\n\t(lto_handle_diagnostics): New procedure.\n\t(lto_prune_warns): Ignore informational notes.\n\t(lto-link-and-maybe-run): Add \"messages_by_file\" param.\n\tCall lto_handle_diagnostics.  Avoid issuing \"unresolved\" for\n\t\"execute\" when \"link\" fails if \"execute\" was not specified.\n\t(lto-can-handle-directive): New procedure.\n\t(lto-get-options-main): Call lto-can-handle-directive.  Add a\n\tdg-messages local, using it to set the caller's\n\tdg-messages-by-file for the given source file.\n\t(lto-get-options): Likewise.\n\t(lto-execute): Add dg-messages-by-file local, and pass it to\n\tlto-link-and-maybe-run.\n\nFrom-SVN: r256801", "tree": {"sha": "7b14acd4aab7681b7028d9c600cad008ca4ddba5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b14acd4aab7681b7028d9c600cad008ca4ddba5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/824721f0905478ebc39e6a295cc8e95c22fa9d17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/824721f0905478ebc39e6a295cc8e95c22fa9d17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/824721f0905478ebc39e6a295cc8e95c22fa9d17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/824721f0905478ebc39e6a295cc8e95c22fa9d17/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c0bb5bc54feab4bac0df04f358ec9e839a32b2a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0bb5bc54feab4bac0df04f358ec9e839a32b2a2"}], "stats": {"total": 255, "additions": 249, "deletions": 6}, "files": [{"sha": "7b0146b7e52b4a2274986ea9e199eda376ef7982", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824721f0905478ebc39e6a295cc8e95c22fa9d17/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824721f0905478ebc39e6a295cc8e95c22fa9d17/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=824721f0905478ebc39e6a295cc8e95c22fa9d17", "patch": "@@ -1,3 +1,10 @@\n+2018-01-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR lto/83121\n+\t* ipa-devirt.c (add_type_duplicate): When comparing memory layout,\n+\tcall the lto_location_cache before reading the\n+\tDECL_SOURCE_LOCATION of the types.\n+\n 2018-01-17  Wilco Dijkstra  <wdijkstr@arm.com>\n \t    Richard Sandiford  <richard.sandiford@linaro.org>\n "}, {"sha": "f66dc45deb8668372b620d2348c39bef835f8c90", "filename": "gcc/ipa-devirt.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824721f0905478ebc39e6a295cc8e95c22fa9d17/gcc%2Fipa-devirt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824721f0905478ebc39e6a295cc8e95c22fa9d17/gcc%2Fipa-devirt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-devirt.c?ref=824721f0905478ebc39e6a295cc8e95c22fa9d17", "patch": "@@ -1844,7 +1844,12 @@ add_type_duplicate (odr_type val, tree type)\n \t}\n     }\n \n-  /* Next compare memory layout.  */\n+  /* Next compare memory layout.\n+     The DECL_SOURCE_LOCATIONs in this invocation came from LTO streaming.\n+     We must apply the location cache to ensure that they are valid\n+     before we can pass them to odr_types_equivalent_p (PR lto/83121).  */\n+  if (lto_location_cache::current_cache)\n+    lto_location_cache::current_cache->apply_location_cache ();\n   if (!odr_types_equivalent_p (val->type, type,\n \t\t\t       !flag_ltrans && !val->odr_violated && !warned,\n \t\t\t       &warned, &visited,"}, {"sha": "dd25a3746b87dd7c2815399b077a9632c950051d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824721f0905478ebc39e6a295cc8e95c22fa9d17/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824721f0905478ebc39e6a295cc8e95c22fa9d17/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=824721f0905478ebc39e6a295cc8e95c22fa9d17", "patch": "@@ -1,3 +1,23 @@\n+2018-01-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR lto/83121\n+\t* g++.dg/lto/pr83121_0.C: New test case.\n+\t* g++.dg/lto/pr83121_1.C: New test case.\n+\t* lib/lto.exp (lto_handle_diagnostics_for_file): New procedure,\n+\tadapted from DejaGnu's dg-test.\n+\t(lto_handle_diagnostics): New procedure.\n+\t(lto_prune_warns): Ignore informational notes.\n+\t(lto-link-and-maybe-run): Add \"messages_by_file\" param.\n+\tCall lto_handle_diagnostics.  Avoid issuing \"unresolved\" for\n+\t\"execute\" when \"link\" fails if \"execute\" was not specified.\n+\t(lto-can-handle-directive): New procedure.\n+\t(lto-get-options-main): Call lto-can-handle-directive.  Add a\n+\tdg-messages local, using it to set the caller's\n+\tdg-messages-by-file for the given source file.\n+\t(lto-get-options): Likewise.\n+\t(lto-execute): Add dg-messages-by-file local, and pass it to\n+\tlto-link-and-maybe-run.\n+\n 2018-01-17  Wilco Dijkstra  <wdijkstr@arm.com>\n \t    Richard Sandiford  <richard.sandiford@linaro.org>\n "}, {"sha": "ef894c7c868999edf2efee98f222c290c062a110", "filename": "gcc/testsuite/g++.dg/lto/pr83121_0.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824721f0905478ebc39e6a295cc8e95c22fa9d17/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr83121_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824721f0905478ebc39e6a295cc8e95c22fa9d17/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr83121_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr83121_0.C?ref=824721f0905478ebc39e6a295cc8e95c22fa9d17", "patch": "@@ -0,0 +1,12 @@\n+// { dg-lto-do link }\n+// { dg-lto-options {{-O0 -flto}} }\n+/* We need -O0 to avoid the \"Environment\" locals in the test functions\n+   from being optimized away.  */\n+\n+struct Environment { // { dg-lto-warning \"8: type 'struct Environment' violates the C\\\\+\\\\+ One Definition Rule\" }\n+  struct AsyncHooks {\n+    int providers_[2]; // { dg-lto-message \"a field of same name but different type is defined in another translation unit\" }\n+  };\n+  AsyncHooks async_hooks_;\n+};\n+void fn2() { Environment a; }"}, {"sha": "2aef1b50957026ea7abd93ccf4a654c5c513b8b7", "filename": "gcc/testsuite/g++.dg/lto/pr83121_1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824721f0905478ebc39e6a295cc8e95c22fa9d17/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr83121_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824721f0905478ebc39e6a295cc8e95c22fa9d17/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr83121_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr83121_1.C?ref=824721f0905478ebc39e6a295cc8e95c22fa9d17", "patch": "@@ -0,0 +1,10 @@\n+struct Environment {\n+  struct AsyncHooks { // { dg-lto-warning \"10: type 'struct AsyncHooks' violates the C\\\\+\\\\+ One Definition Rule\" }\n+    int providers_[1]; // { dg-lto-message \"the first difference of corresponding definitions is field 'providers_'\" }\n+  };\n+  AsyncHooks async_hooks_;\n+};\n+void fn1() { Environment a; }\n+int main ()\n+{\n+}"}, {"sha": "11d113ce6754f6911bda782778b337d64075ff9c", "filename": "gcc/testsuite/lib/lto.exp", "status": "modified", "additions": 194, "deletions": 5, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/824721f0905478ebc39e6a295cc8e95c22fa9d17/gcc%2Ftestsuite%2Flib%2Flto.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/824721f0905478ebc39e6a295cc8e95c22fa9d17/gcc%2Ftestsuite%2Flib%2Flto.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Flto.exp?ref=824721f0905478ebc39e6a295cc8e95c22fa9d17", "patch": "@@ -16,6 +16,122 @@\n \n # Contributed by Diego Novillo <dnovillo@google.com>\n \n+# A subroutine of lto_handle_diagnostics: check TEXT for the expected\n+# diagnostics for one specific source file, issuing PASS/FAIL results.\n+# Return TEXT, stripped of any diagnostics that were handled.\n+#\n+# NAME is the testcase name to use when reporting PASS/FAIL results.\n+# FILENAME is the name (with full path) of the file we're interested in.\n+# MESSAGES_FOR_FILE is a list of expected messages, akin to DejaGnu's\n+# \"dg-messages\" variable.\n+# TEXT is the textual output from the LTO link.\n+\n+proc lto_handle_diagnostics_for_file { name filename messages_for_file text } {\n+    global dg-linenum-format\n+\n+    set filename_without_path [file tail $filename]\n+\n+    # This loop is adapted from the related part of DejaGnu's dg-test,\n+    # with changes as detailed below to cope with the LTO case.\n+\n+    foreach i ${messages_for_file} {\n+\tverbose \"Scanning for message: $i\" 4\n+\n+\t# Remove all error messages for the line [lindex $i 0]\n+\t# in the source file.  If we find any, success!\n+\tset line [lindex $i 0]\n+\tset pattern [lindex $i 2]\n+\tset comment [lindex $i 3]\n+\tverbose \"line: $line\" 4\n+\tverbose \"pattern: $pattern\" 4\n+\tverbose \"comment: $comment\" 4\n+\t#send_user \"Before:\\n$text\\n\"\n+\n+\t# Unlike dg-test, we use $filename_without_path in this pattern.\n+\t# This is to ensure that we have the correct file/line combination.\n+\t# This imposes the restriction that the filename can't contain\n+\t# any regexp control characters.  We have to strip the path, since\n+\t# e.g. the '+' in \"g++.dg\" wouldn't be valid.\n+\tset pat \"(^|\\n)(\\[^\\n\\]+$filename_without_path$line\\[^\\n\\]*($pattern)\\[^\\n\\]*\\n?)+\"\n+\tif {[regsub -all $pat $text \"\\n\" text]} {\n+\t    set text [string trimleft $text]\n+\t    set ok pass\n+\t    set uhoh fail\n+\t} else {\n+\t    set ok fail\n+\t    set uhoh pass\n+\t}\n+\t#send_user \"After:\\n$text\\n\"\n+\n+\t# $line will either be a formatted line number or a number all by\n+\t# itself.  Delete the formatting.\n+\tscan $line ${dg-linenum-format} line\n+\n+\t# Unlike dg-test, add the filename to the PASS/FAIL message (rather\n+\t# than just the line number) so that the user can identify the\n+\t# pertinent directive.\n+\tset describe_where \"$filename_without_path line $line\"\n+\n+\t# Issue the PASS/FAIL, adding \"LTO\" to the messages (e.g. \"LTO errors\")\n+\t# to distinguish them from the non-LTO case (in case we ever need to\n+\t# support both).\n+\tswitch [lindex $i 1] {\n+\t    \"ERROR\" {\n+\t\t$ok \"$name $comment (test for LTO errors, $describe_where)\"\n+\t    }\n+\t    \"XERROR\" {\n+\t\tx$ok \"$name $comment (test for LTO errors, $describe_where)\"\n+\t    }\n+\t    \"WARNING\" {\n+\t\t$ok \"$name $comment (test for LTO warnings, $describe_where)\"\n+\t    }\n+\t    \"XWARNING\" {\n+\t\tx$ok \"$name $comment (test for LTO warnings, $describe_where)\"\n+\t    }\n+\t    \"BOGUS\" {\n+\t\t$uhoh \"$name $comment (test for LTO bogus messages, $describe_where)\"\n+\t    }\n+\t    \"XBOGUS\" {\n+\t\tx$uhoh \"$name $comment (test for LTO bogus messages, $describe_where)\"\n+\t    }\n+\t    \"BUILD\" {\n+\t\t$uhoh \"$name $comment (test for LTO build failure, $describe_where)\"\n+\t    }\n+\t    \"XBUILD\" {\n+\t\tx$uhoh \"$name $comment (test for LTO build failure, $describe_where)\"\n+\t    }\n+\t    \"EXEC\" { }\n+\t    \"XEXEC\" { }\n+\t}\n+    }\n+    return $text\n+}\n+\n+# Support for checking for link-time diagnostics: check for\n+# the expected diagnostics within TEXT, issuing PASS/FAIL results.\n+# Return TEXT, stripped of any diagnostics that were handled.\n+#\n+# MESSAGES_BY_FILE is a dict; the keys are source files (with paths)\n+# the values are lists of expected messages, akin to DejaGnu's \"dg-messages\"\n+# variable.\n+# TEXT is the textual output from the LTO link.\n+\n+proc lto_handle_diagnostics { messages_by_file text } {\n+    global testcase\n+\n+    verbose \"lto_handle_diagnostics: entry: $text\" 2\n+    verbose \"  messages_by_file $messages_by_file\" 3\n+\n+    dict for {src dg-messages} $messages_by_file {\n+\tset text [lto_handle_diagnostics_for_file $testcase $src \\\n+\t\t      ${dg-messages} $text]\n+    }\n+\n+    verbose \"lto_handle_diagnostics: exit: $text\" 2\n+\n+    return $text\n+}\n+\n # Prune messages that aren't useful.\n \n proc lto_prune_warns { text } {\n@@ -39,6 +155,9 @@ proc lto_prune_warns { text } {\n     regsub -all \"(^|\\n)\\[ \\t\\]*\\[\\(\\]file \\[^\\n\\]* value=\\[^\\n\\]*; file \\[^\\n\\]* value=\\[^\\n\\]*\\[)\\];\" $text \"\" text\n     regsub -all \"(^|\\n)\\[ \\t\\]*\\[^\\n\\]* definition taken\" $text \"\" text\n \n+    # Ignore informational notes.\n+    regsub -all \"(^|\\n)\\[^\\n\\]*: note: \\[^\\n\\]*\" $text \"\" text\n+\n     verbose \"lto_prune_warns: exit: $text\" 2\n \n     return $text\n@@ -175,12 +294,17 @@ proc lto-obj { source dest optall optfile optstr xfaildata } {\n # OPTALL is a list of compiler and linker options to use for all tests\n # OPTFILE is a list of compiler and linker options to use for this test\n # OPTSTR is the list of options to list in messages\n-proc lto-link-and-maybe-run { testname objlist dest optall optfile optstr } {\n+# MESSAGES_BY_FILE is a dict of (src, dg-messages)\n+proc lto-link-and-maybe-run { testname objlist dest optall optfile optstr \\\n+\t\t\t      messages_by_file } {\n     global testcase\n     global tool\n     global compile_type\n     global board_info\n \n+    verbose \"lto-link-and-maybe-run\" 2\n+    verbose \"  messages_by_file $messages_by_file\" 3\n+\n     # Check that all of the objects were built successfully.\n     foreach obj [split $objlist] {\n \tif ![file_on_host exists $obj] then {\n@@ -217,12 +341,17 @@ proc lto-link-and-maybe-run { testname objlist dest optall optfile optstr } {\n \tset board_info($target_board,ldscript) $saved_ldscript\n     }\n \n+    # Check for diagnostics specified by directives\n+    set comp_output [lto_handle_diagnostics $messages_by_file $comp_output]\n+\n     # Prune unimportant visibility warnings before checking output.\n     set comp_output [lto_prune_warns $comp_output]\n \n     if ![${tool}_check_compile \"$testcase $testname link\" $optstr \\\n \t $dest $comp_output] then {\n-\tunresolved \"$testcase $testname execute $optstr\"\n+\tif { ![string compare \"execute\" $compile_type] } {\n+\t    unresolved \"$testcase $testname execute $optstr\"\n+\t}\n \treturn\n     }\n \n@@ -243,6 +372,51 @@ proc lto-link-and-maybe-run { testname objlist dest optall optfile optstr } {\n     $status \"$testcase $testname execute $optstr\"\n }\n \n+# Potentially handle the given dg- directive (a list)\n+# Return true is the directive was handled, false otherwise.\n+\n+proc lto-can-handle-directive { op } {\n+    set cmd [lindex $op 0]\n+\n+    # dg-warning and dg-message append to dg-messages.\n+    upvar dg-messages dg-messages\n+\n+    # A list of directives to recognize, and a list of directives\n+    # to remap them to.\n+    # For example, \"dg-lto-warning\" is implemented by calling \"dg-warning\".\n+    set directives { dg-lto-warning dg-lto-message }\n+    set remapped_directives { dg-warning dg-message }\n+\n+    set idx [lsearch -exact $directives $cmd]\n+    if { $idx != -1 } {\n+\tverbose \"remapping from: $op\" 4\n+\n+\tset remapped_cmd [lindex $remapped_directives $idx]\n+\tset op [lreplace $op 0 0 $remapped_cmd]\n+\n+\tverbose \"remapped to: $op\" 4\n+\n+\tset status [catch \"$op\" errmsg]\n+\tif { $status != 0 } {\n+\t    if { 0 && [info exists errorInfo] } {\n+\t\t# This also prints a backtrace which will just confuse\n+\t\t# testcase writers, so it's disabled.\n+\t\tperror \"$name: $errorInfo\\n\"\n+\t    } else {\n+\t\tperror \"$name: $errmsg for \\\"$op\\\"\\n\"\n+\t    }\n+\t    # ??? The call to unresolved here is necessary to clear `errcnt'.\n+\t    # What we really need is a proc like perror that doesn't set errcnt.\n+\t    # It should also set exit_status to 1.\n+\t    unresolved \"$name: $errmsg for \\\"$op\\\"\"\n+\t}\n+\n+\treturn true\n+    }\n+\n+    return false\n+}\n+\n # lto-get-options-main -- get target requirements for a test and\n # options for the primary source file and the test as a whole\n #\n@@ -266,6 +440,10 @@ proc lto-get-options-main { src } {\n     upvar dg-final-code dg-final-code\n     set dg-final-code \"\"\n \n+    # dg-warning and dg-message append to dg-messages.\n+    upvar dg-messages-by-file dg-messages-by-file\n+    set dg-messages \"\"\n+    \n     set tmp [dg-get-options $src]\n     verbose \"getting options for $src: $tmp\"\n     foreach op $tmp {\n@@ -342,12 +520,15 @@ proc lto-get-options-main { src } {\n \t    } else {\n \t\tappend dg-final-code \"[lindex $op 2]\\n\"\n \t    }\n-\t} else {\n+\t} elseif { ![lto-can-handle-directive $op] } {\n \t    # Ignore unrecognized dg- commands, but warn about them.\n \t    warning \"lto.exp does not support $cmd\"\n \t}\n     }\n \n+    verbose \"dg-messages: ${dg-messages}\" 3\n+    dict append dg-messages-by-file $src ${dg-messages}\n+\n     # Return flags to use for compiling the primary source file and for\n     # linking.\n     verbose \"dg-extra-tool-flags for main is ${dg-extra-tool-flags}\"\n@@ -373,6 +554,10 @@ proc lto-get-options { src } {\n     # dg-xfail-if needs access to dg-do-what.\n     upvar dg-do-what dg-do-what \n \n+    # dg-warning appends to dg-messages.\n+    upvar dg-messages-by-file dg-messages-by-file\n+    set dg-messages \"\"\n+\n     set tmp [dg-get-options $src]\n     foreach op $tmp {\n \tset cmd [lindex $op 0]\n@@ -386,12 +571,15 @@ proc lto-get-options { src } {\n \t    }\n \t} elseif { [string match \"dg-require-*\" $cmd] } {\n \t    warning \"lto.exp does not support $cmd in secondary source files\"\n-\t} else {\n+\t} elseif { ![lto-can-handle-directive $op] } {\n \t    # Ignore unrecognized dg- commands, but warn about them.\n \t    warning \"lto.exp does not support $cmd in secondary source files\"\n \t}\n     }\n \n+    verbose \"dg-messages: ${dg-messages}\" 3\n+    dict append dg-messages-by-file $src ${dg-messages}\n+\n     return ${dg-extra-tool-flags}\n }\n \n@@ -421,6 +609,7 @@ proc lto-execute { src1 sid } {\n     verbose \"lto-execute: $src1\" 1\n     set compile_type \"run\"\n     set dg-do-what [list ${dg-do-what-default} \"\" P]\n+    set dg-messages-by-file [dict create]\n     set extra_flags(0) [lto-get-options-main $src1]\n     set compile_xfail(0) \"\" \n \n@@ -544,7 +733,7 @@ proc lto-execute { src1 sid } {\n \t    lto-link-and-maybe-run \\\n \t\t    \"[lindex $obj_list 0]-[lindex $obj_list end]\" \\\n \t\t    $obj_list $execname $filtered ${dg-extra-ld-options} \\\n-\t\t    $filtered\n+\t\t    $filtered ${dg-messages-by-file}\n \t}\n \n "}]}